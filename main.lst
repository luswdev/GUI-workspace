
main.elf:     file format elf32-littlearm


Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000598 	.word	0x20000598
 80001c8:	00000000 	.word	0x00000000
 80001cc:	0801f200 	.word	0x0801f200

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	2000059c 	.word	0x2000059c
 80001e8:	0801f200 	.word	0x0801f200

080001ec <_mainCRTStartup>:
 80001ec:	4b15      	ldr	r3, [pc, #84]	; (8000244 <_mainCRTStartup+0x58>)
 80001ee:	2b00      	cmp	r3, #0
 80001f0:	bf08      	it	eq
 80001f2:	4b13      	ldreq	r3, [pc, #76]	; (8000240 <_mainCRTStartup+0x54>)
 80001f4:	469d      	mov	sp, r3
 80001f6:	f5a3 3a80 	sub.w	sl, r3, #65536	; 0x10000
 80001fa:	2100      	movs	r1, #0
 80001fc:	468b      	mov	fp, r1
 80001fe:	460f      	mov	r7, r1
 8000200:	4813      	ldr	r0, [pc, #76]	; (8000250 <_mainCRTStartup+0x64>)
 8000202:	4a14      	ldr	r2, [pc, #80]	; (8000254 <_mainCRTStartup+0x68>)
 8000204:	1a12      	subs	r2, r2, r0
 8000206:	f01e fe9d 	bl	801ef44 <memset>
 800020a:	4b0f      	ldr	r3, [pc, #60]	; (8000248 <_mainCRTStartup+0x5c>)
 800020c:	2b00      	cmp	r3, #0
 800020e:	d000      	beq.n	8000212 <_mainCRTStartup+0x26>
 8000210:	4798      	blx	r3
 8000212:	4b0e      	ldr	r3, [pc, #56]	; (800024c <_mainCRTStartup+0x60>)
 8000214:	2b00      	cmp	r3, #0
 8000216:	d000      	beq.n	800021a <_mainCRTStartup+0x2e>
 8000218:	4798      	blx	r3
 800021a:	2000      	movs	r0, #0
 800021c:	2100      	movs	r1, #0
 800021e:	0004      	movs	r4, r0
 8000220:	000d      	movs	r5, r1
 8000222:	480d      	ldr	r0, [pc, #52]	; (8000258 <_mainCRTStartup+0x6c>)
 8000224:	2800      	cmp	r0, #0
 8000226:	d002      	beq.n	800022e <_mainCRTStartup+0x42>
 8000228:	480c      	ldr	r0, [pc, #48]	; (800025c <_mainCRTStartup+0x70>)
 800022a:	f01e ff53 	bl	801f0d4 <atexit>
 800022e:	f01e fe65 	bl	801eefc <__libc_init_array>
 8000232:	0020      	movs	r0, r4
 8000234:	0029      	movs	r1, r5
 8000236:	f000 fb1f 	bl	8000878 <main>
 800023a:	f01e fe4f 	bl	801eedc <exit>
 800023e:	bf00      	nop
 8000240:	00080000 	.word	0x00080000
	...
 8000250:	20000598 	.word	0x20000598
 8000254:	2000e02c 	.word	0x2000e02c
 8000258:	0801f0d5 	.word	0x0801f0d5
 800025c:	0801f0e1 	.word	0x0801f0e1

08000260 <LCD_SetPixel>:
#include <cogui.h>
#include <stm32f429i_discovery_lcd.h>
#include <LCD.h>

void LCD_SetPixel(cogui_color_t *c, co_int32_t x, co_int32_t y)
{
 8000260:	b590      	push	{r4, r7, lr}
 8000262:	b085      	sub	sp, #20
 8000264:	af00      	add	r7, sp, #0
 8000266:	60f8      	str	r0, [r7, #12]
 8000268:	60b9      	str	r1, [r7, #8]
 800026a:	607a      	str	r2, [r7, #4]
	LCD_SetTextColor(*c);
 800026c:	68fb      	ldr	r3, [r7, #12]
 800026e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8000272:	b29b      	uxth	r3, r3
 8000274:	4618      	mov	r0, r3
 8000276:	f010 fb13 	bl	80108a0 <LCD_SetTextColor>
	LCD_DrawLine(x, y, 1, LCD_DIR_HORIZONTAL);
 800027a:	68bb      	ldr	r3, [r7, #8]
 800027c:	b298      	uxth	r0, r3
 800027e:	687b      	ldr	r3, [r7, #4]
 8000280:	b299      	uxth	r1, r3
 8000282:	2300      	movs	r3, #0
 8000284:	2201      	movs	r2, #1
 8000286:	f010 fd64 	bl	8010d52 <LCD_DrawLine>
}
 800028a:	bf00      	nop
 800028c:	3714      	adds	r7, #20
 800028e:	46bd      	mov	sp, r7
 8000290:	bd90      	pop	{r4, r7, pc}

08000292 <LCD_GetPixel>:
	
void LCD_GetPixel(cogui_color_t *c, co_int32_t x, co_int32_t y) 
{
 8000292:	b480      	push	{r7}
 8000294:	b085      	sub	sp, #20
 8000296:	af00      	add	r7, sp, #0
 8000298:	60f8      	str	r0, [r7, #12]
 800029a:	60b9      	str	r1, [r7, #8]
 800029c:	607a      	str	r2, [r7, #4]
    
}
 800029e:	bf00      	nop
 80002a0:	3714      	adds	r7, #20
 80002a2:	46bd      	mov	sp, r7
 80002a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a8:	4770      	bx	lr

080002aa <LCD_DrawHLine>:

void LCD_DrawHLine(cogui_color_t *c, co_int32_t x1, co_int32_t x2, co_int32_t y)
{
 80002aa:	b590      	push	{r4, r7, lr}
 80002ac:	b085      	sub	sp, #20
 80002ae:	af00      	add	r7, sp, #0
 80002b0:	60f8      	str	r0, [r7, #12]
 80002b2:	60b9      	str	r1, [r7, #8]
 80002b4:	607a      	str	r2, [r7, #4]
 80002b6:	603b      	str	r3, [r7, #0]
	LCD_SetTextColor(*c);
 80002b8:	68fb      	ldr	r3, [r7, #12]
 80002ba:	e9d3 3400 	ldrd	r3, r4, [r3]
 80002be:	b29b      	uxth	r3, r3
 80002c0:	4618      	mov	r0, r3
 80002c2:	f010 faed 	bl	80108a0 <LCD_SetTextColor>
	LCD_DrawLine(x1, y, x2-x1, LCD_DIR_HORIZONTAL);
 80002c6:	68bb      	ldr	r3, [r7, #8]
 80002c8:	b298      	uxth	r0, r3
 80002ca:	683b      	ldr	r3, [r7, #0]
 80002cc:	b299      	uxth	r1, r3
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	b29a      	uxth	r2, r3
 80002d2:	68bb      	ldr	r3, [r7, #8]
 80002d4:	b29b      	uxth	r3, r3
 80002d6:	1ad3      	subs	r3, r2, r3
 80002d8:	b29a      	uxth	r2, r3
 80002da:	2300      	movs	r3, #0
 80002dc:	f010 fd39 	bl	8010d52 <LCD_DrawLine>
}
 80002e0:	bf00      	nop
 80002e2:	3714      	adds	r7, #20
 80002e4:	46bd      	mov	sp, r7
 80002e6:	bd90      	pop	{r4, r7, pc}

080002e8 <LCD_DrawVLine>:

void LCD_DrawVLine(cogui_color_t *c, co_int32_t x , co_int32_t y1, co_int32_t y2)
{
 80002e8:	b590      	push	{r4, r7, lr}
 80002ea:	b085      	sub	sp, #20
 80002ec:	af00      	add	r7, sp, #0
 80002ee:	60f8      	str	r0, [r7, #12]
 80002f0:	60b9      	str	r1, [r7, #8]
 80002f2:	607a      	str	r2, [r7, #4]
 80002f4:	603b      	str	r3, [r7, #0]
	LCD_SetTextColor(*c);
 80002f6:	68fb      	ldr	r3, [r7, #12]
 80002f8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80002fc:	b29b      	uxth	r3, r3
 80002fe:	4618      	mov	r0, r3
 8000300:	f010 face 	bl	80108a0 <LCD_SetTextColor>
	LCD_DrawLine(x, y1, y2-y1, LCD_DIR_VERTICAL);
 8000304:	68bb      	ldr	r3, [r7, #8]
 8000306:	b298      	uxth	r0, r3
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	b299      	uxth	r1, r3
 800030c:	683b      	ldr	r3, [r7, #0]
 800030e:	b29a      	uxth	r2, r3
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	b29b      	uxth	r3, r3
 8000314:	1ad3      	subs	r3, r2, r3
 8000316:	b29a      	uxth	r2, r3
 8000318:	2301      	movs	r3, #1
 800031a:	f010 fd1a 	bl	8010d52 <LCD_DrawLine>
}
 800031e:	bf00      	nop
 8000320:	3714      	adds	r7, #20
 8000322:	46bd      	mov	sp, r7
 8000324:	bd90      	pop	{r4, r7, pc}
	...

08000328 <wait_user_btn>:
};
#endif
#endif

void wait_user_btn(char *s)
{
 8000328:	b580      	push	{r7, lr}
 800032a:	b084      	sub	sp, #16
 800032c:	af00      	add	r7, sp, #0
 800032e:	6078      	str	r0, [r7, #4]
    co_uint16_t len;
	len = cogui_printf(">>>>> Press the USER BUTTON to %s <<<<<\r", s);
 8000330:	6879      	ldr	r1, [r7, #4]
 8000332:	4811      	ldr	r0, [pc, #68]	; (8000378 <wait_user_btn+0x50>)
 8000334:	f01c fcf8 	bl	801cd28 <cogui_printf>
 8000338:	4603      	mov	r3, r0
 800033a:	81fb      	strh	r3, [r7, #14]

	 /* Wait for User push-button is pressed */
    while (STM_EVAL_PBGetState(BUTTON_USER) != Bit_RESET) {
 800033c:	bf00      	nop
 800033e:	2000      	movs	r0, #0
 8000340:	f00d ff0a 	bl	800e158 <STM_EVAL_PBGetState>
 8000344:	4603      	mov	r3, r0
 8000346:	2b00      	cmp	r3, #0
 8000348:	d1f9      	bne.n	800033e <wait_user_btn+0x16>
    }
    
    /* Wait for User push-button is released */
    while (STM_EVAL_PBGetState(BUTTON_USER) != Bit_SET) {
 800034a:	bf00      	nop
 800034c:	2000      	movs	r0, #0
 800034e:	f00d ff03 	bl	800e158 <STM_EVAL_PBGetState>
 8000352:	4603      	mov	r3, r0
 8000354:	2b01      	cmp	r3, #1
 8000356:	d1f9      	bne.n	800034c <wait_user_btn+0x24>
    }

    /* clear ouput buffer with space */
    while (len --){
 8000358:	e002      	b.n	8000360 <wait_user_btn+0x38>
        cogui_printf(" ");
 800035a:	4808      	ldr	r0, [pc, #32]	; (800037c <wait_user_btn+0x54>)
 800035c:	f01c fce4 	bl	801cd28 <cogui_printf>
    while (len --){
 8000360:	89fb      	ldrh	r3, [r7, #14]
 8000362:	1e5a      	subs	r2, r3, #1
 8000364:	81fa      	strh	r2, [r7, #14]
 8000366:	2b00      	cmp	r3, #0
 8000368:	d1f7      	bne.n	800035a <wait_user_btn+0x32>
    }
    cogui_printf(" \r");
 800036a:	4805      	ldr	r0, [pc, #20]	; (8000380 <wait_user_btn+0x58>)
 800036c:	f01c fcdc 	bl	801cd28 <cogui_printf>
    
}
 8000370:	bf00      	nop
 8000372:	3710      	adds	r7, #16
 8000374:	46bd      	mov	sp, r7
 8000376:	bd80      	pop	{r7, pc}
 8000378:	0801f220 	.word	0x0801f220
 800037c:	0801f24c 	.word	0x0801f24c
 8000380:	0801f250 	.word	0x0801f250

08000384 <app_a_paint>:

#ifdef USE_GUI
void app_a_paint()
{
 8000384:	b590      	push	{r4, r7, lr}
 8000386:	b085      	sub	sp, #20
 8000388:	af02      	add	r7, sp, #8
	cogui_printf("[%10s] Paint start.\r\n", cogui_app_self()->name);
 800038a:	f01b f849 	bl	801b420 <cogui_app_self>
 800038e:	4603      	mov	r3, r0
 8000390:	685b      	ldr	r3, [r3, #4]
 8000392:	4619      	mov	r1, r3
 8000394:	481d      	ldr	r0, [pc, #116]	; (800040c <app_a_paint+0x88>)
 8000396:	f01c fcc7 	bl	801cd28 <cogui_printf>

	cogui_window_t *win = cogui_window_create_with_title();
 800039a:	f64f 70fe 	movw	r0, #65534	; 0xfffe
 800039e:	f01d ff4b 	bl	801e238 <cogui_window_create>
 80003a2:	6078      	str	r0, [r7, #4]
	
	cogui_window_show(win);
 80003a4:	6878      	ldr	r0, [r7, #4]
 80003a6:	f01e fa2f 	bl	801e808 <cogui_window_show>
	
	cogui_widget_t *test_wgt1 = cogui_widget_create(win);
 80003aa:	6878      	ldr	r0, [r7, #4]
 80003ac:	f01c ffc0 	bl	801d330 <cogui_widget_create>
 80003b0:	6038      	str	r0, [r7, #0]
	cogui_widget_set_rectangle(test_wgt1, 100, 100, 100, 100);
 80003b2:	2364      	movs	r3, #100	; 0x64
 80003b4:	9300      	str	r3, [sp, #0]
 80003b6:	2364      	movs	r3, #100	; 0x64
 80003b8:	2264      	movs	r2, #100	; 0x64
 80003ba:	2164      	movs	r1, #100	; 0x64
 80003bc:	6838      	ldr	r0, [r7, #0]
 80003be:	f01d fb1e 	bl	801d9fe <cogui_widget_set_rectangle>
	test_wgt1->gc.background = COGUI_RED;
 80003c2:	683a      	ldr	r2, [r7, #0]
 80003c4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80003c8:	f04f 0400 	mov.w	r4, #0
 80003cc:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
	
	test_wgt1->flag |= COGUI_WIDGET_FLAG_RECT | COGUI_WIDGET_FLAG_FILLED;
 80003d0:	683b      	ldr	r3, [r7, #0]
 80003d2:	689b      	ldr	r3, [r3, #8]
 80003d4:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 80003d8:	683b      	ldr	r3, [r7, #0]
 80003da:	609a      	str	r2, [r3, #8]

    cogui_widget_set_text(test_wgt1, "test");
 80003dc:	490c      	ldr	r1, [pc, #48]	; (8000410 <app_a_paint+0x8c>)
 80003de:	6838      	ldr	r0, [r7, #0]
 80003e0:	f01d fc0e 	bl	801dc00 <cogui_widget_set_text>
	
	print_result(cogui_widget_show(test_wgt1), "create widget 1");
 80003e4:	6838      	ldr	r0, [r7, #0]
 80003e6:	f01d fdfb 	bl	801dfe0 <cogui_widget_show>
 80003ea:	4603      	mov	r3, r0
 80003ec:	4909      	ldr	r1, [pc, #36]	; (8000414 <app_a_paint+0x90>)
 80003ee:	4618      	mov	r0, r3
 80003f0:	f000 ff9e 	bl	8001330 <print_result>
	
	cogui_printf("[%10s] Paint ok.\r\n", cogui_app_self()->name);
 80003f4:	f01b f814 	bl	801b420 <cogui_app_self>
 80003f8:	4603      	mov	r3, r0
 80003fa:	685b      	ldr	r3, [r3, #4]
 80003fc:	4619      	mov	r1, r3
 80003fe:	4806      	ldr	r0, [pc, #24]	; (8000418 <app_a_paint+0x94>)
 8000400:	f01c fc92 	bl	801cd28 <cogui_printf>
}
 8000404:	bf00      	nop
 8000406:	370c      	adds	r7, #12
 8000408:	46bd      	mov	sp, r7
 800040a:	bd90      	pop	{r4, r7, pc}
 800040c:	0801f254 	.word	0x0801f254
 8000410:	0801f26c 	.word	0x0801f26c
 8000414:	0801f274 	.word	0x0801f274
 8000418:	0801f284 	.word	0x0801f284

0800041c <a_handler>:

StatusType a_handler(struct cogui_event *event)
{
 800041c:	b580      	push	{r7, lr}
 800041e:	b082      	sub	sp, #8
 8000420:	af00      	add	r7, sp, #0
 8000422:	6078      	str	r0, [r7, #4]
	COGUI_ASSERT(event != Co_NULL);
 8000424:	687b      	ldr	r3, [r7, #4]
 8000426:	2b00      	cmp	r3, #0
 8000428:	d104      	bne.n	8000434 <a_handler+0x18>
 800042a:	225e      	movs	r2, #94	; 0x5e
 800042c:	4908      	ldr	r1, [pc, #32]	; (8000450 <a_handler+0x34>)
 800042e:	4809      	ldr	r0, [pc, #36]	; (8000454 <a_handler+0x38>)
 8000430:	f01c fe5a 	bl	801d0e8 <cogui_assert_handler>

	switch (event->type)
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	781b      	ldrb	r3, [r3, #0]
 8000438:	2b0f      	cmp	r3, #15
 800043a:	d104      	bne.n	8000446 <a_handler+0x2a>
    {
	case COGUI_EVENT_PAINT:
		 app_a_paint();
 800043c:	f7ff ffa2 	bl	8000384 <app_a_paint>
		break;
 8000440:	bf00      	nop
	default:
		return Co_FALSE;
				
	}
		
	return Co_TRUE;
 8000442:	2301      	movs	r3, #1
 8000444:	e000      	b.n	8000448 <a_handler+0x2c>
		return Co_FALSE;
 8000446:	2300      	movs	r3, #0
}
 8000448:	4618      	mov	r0, r3
 800044a:	3708      	adds	r7, #8
 800044c:	46bd      	mov	sp, r7
 800044e:	bd80      	pop	{r7, pc}
 8000450:	0801fa1c 	.word	0x0801fa1c
 8000454:	0801f298 	.word	0x0801f298

08000458 <app_a>:

void app_a(void *par) 
{
 8000458:	b580      	push	{r7, lr}
 800045a:	b084      	sub	sp, #16
 800045c:	af00      	add	r7, sp, #0
 800045e:	6078      	str	r0, [r7, #4]
	cogui_app_t *app = cogui_app_create("app test");
 8000460:	480b      	ldr	r0, [pc, #44]	; (8000490 <app_a+0x38>)
 8000462:	f01a fdef 	bl	801b044 <cogui_app_create>
 8000466:	60f8      	str	r0, [r7, #12]
	if (app == Co_NULL) {
 8000468:	68fb      	ldr	r3, [r7, #12]
 800046a:	2b00      	cmp	r3, #0
 800046c:	d00b      	beq.n	8000486 <app_a+0x2e>
		return;
	}
	
	app->optional_handler = a_handler; 
 800046e:	68fb      	ldr	r3, [r7, #12]
 8000470:	4a08      	ldr	r2, [pc, #32]	; (8000494 <app_a+0x3c>)
 8000472:	655a      	str	r2, [r3, #84]	; 0x54

	cogui_app_run(app);
 8000474:	68f8      	ldr	r0, [r7, #12]
 8000476:	f01a ff0b 	bl	801b290 <cogui_app_run>
	cogui_app_delete(app);
 800047a:	68f8      	ldr	r0, [r7, #12]
 800047c:	f01a fe5e 	bl	801b13c <cogui_app_delete>
	
	CoExitTask();
 8000480:	f019 ff08 	bl	801a294 <CoExitTask>
 8000484:	e000      	b.n	8000488 <app_a+0x30>
		return;
 8000486:	bf00      	nop
}
 8000488:	3710      	adds	r7, #16
 800048a:	46bd      	mov	sp, r7
 800048c:	bd80      	pop	{r7, pc}
 800048e:	bf00      	nop
 8000490:	0801f2ac 	.word	0x0801f2ac
 8000494:	0800041d 	.word	0x0800041d

08000498 <app_b_paint>:

void app_b_paint()
{
 8000498:	b590      	push	{r4, r7, lr}
 800049a:	b085      	sub	sp, #20
 800049c:	af02      	add	r7, sp, #8
	cogui_window_t *win = cogui_window_create_with_title();
 800049e:	f64f 70fe 	movw	r0, #65534	; 0xfffe
 80004a2:	f01d fec9 	bl	801e238 <cogui_window_create>
 80004a6:	6078      	str	r0, [r7, #4]
	
	cogui_window_show(win);
 80004a8:	6878      	ldr	r0, [r7, #4]
 80004aa:	f01e f9ad 	bl	801e808 <cogui_window_show>

    /* widget 1: top-left */
    cogui_widget_t *font_ex = cogui_widget_create(win);
 80004ae:	6878      	ldr	r0, [r7, #4]
 80004b0:	f01c ff3e 	bl	801d330 <cogui_widget_create>
 80004b4:	6038      	str	r0, [r7, #0]
	cogui_widget_set_rectangle(font_ex, 5, 45, 230, 50);
 80004b6:	2332      	movs	r3, #50	; 0x32
 80004b8:	9300      	str	r3, [sp, #0]
 80004ba:	23e6      	movs	r3, #230	; 0xe6
 80004bc:	222d      	movs	r2, #45	; 0x2d
 80004be:	2105      	movs	r1, #5
 80004c0:	6838      	ldr	r0, [r7, #0]
 80004c2:	f01d fa9c 	bl	801d9fe <cogui_widget_set_rectangle>
	font_ex->gc.background = COGUI_BLUE;
 80004c6:	683a      	ldr	r2, [r7, #0]
 80004c8:	f04f 031f 	mov.w	r3, #31
 80004cc:	f04f 0400 	mov.w	r4, #0
 80004d0:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
	font_ex->flag |= COGUI_WIDGET_FLAG_RECT | COGUI_WIDGET_FLAG_FILLED;
 80004d4:	683b      	ldr	r3, [r7, #0]
 80004d6:	689b      	ldr	r3, [r3, #8]
 80004d8:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 80004dc:	683b      	ldr	r3, [r7, #0]
 80004de:	609a      	str	r2, [r3, #8]
    font_ex->gc.padding = COGUI_PADDING_SIMPLE(5);
 80004e0:	683a      	ldr	r2, [r7, #0]
 80004e2:	f04f 3305 	mov.w	r3, #84215045	; 0x5050505
 80004e6:	f04f 0400 	mov.w	r4, #0
 80004ea:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48
    cogui_widget_set_text_align(font_ex, COGUI_TEXT_ALIGN_LEFT|COGUI_TEXT_ALIGN_TOP);
 80004ee:	2109      	movs	r1, #9
 80004f0:	6838      	ldr	r0, [r7, #0]
 80004f2:	f01d fb69 	bl	801dbc8 <cogui_widget_set_text_align>
    cogui_widget_set_text(font_ex, "Text align left-top");
 80004f6:	4977      	ldr	r1, [pc, #476]	; (80006d4 <app_b_paint+0x23c>)
 80004f8:	6838      	ldr	r0, [r7, #0]
 80004fa:	f01d fb81 	bl	801dc00 <cogui_widget_set_text>
	print_result(cogui_widget_show(font_ex), "create left-top example");
 80004fe:	6838      	ldr	r0, [r7, #0]
 8000500:	f01d fd6e 	bl	801dfe0 <cogui_widget_show>
 8000504:	4603      	mov	r3, r0
 8000506:	4974      	ldr	r1, [pc, #464]	; (80006d8 <app_b_paint+0x240>)
 8000508:	4618      	mov	r0, r3
 800050a:	f000 ff11 	bl	8001330 <print_result>

    /* widget 2: middle-center */
    font_ex = cogui_widget_create(win);
 800050e:	6878      	ldr	r0, [r7, #4]
 8000510:	f01c ff0e 	bl	801d330 <cogui_widget_create>
 8000514:	6038      	str	r0, [r7, #0]
	cogui_widget_set_rectangle(font_ex, 5, 100, 230, 50);
 8000516:	2332      	movs	r3, #50	; 0x32
 8000518:	9300      	str	r3, [sp, #0]
 800051a:	23e6      	movs	r3, #230	; 0xe6
 800051c:	2264      	movs	r2, #100	; 0x64
 800051e:	2105      	movs	r1, #5
 8000520:	6838      	ldr	r0, [r7, #0]
 8000522:	f01d fa6c 	bl	801d9fe <cogui_widget_set_rectangle>
	font_ex->gc.background = COGUI_RED;
 8000526:	683a      	ldr	r2, [r7, #0]
 8000528:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800052c:	f04f 0400 	mov.w	r4, #0
 8000530:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
	font_ex->flag |= COGUI_WIDGET_FLAG_RECT | COGUI_WIDGET_FLAG_FILLED;
 8000534:	683b      	ldr	r3, [r7, #0]
 8000536:	689b      	ldr	r3, [r3, #8]
 8000538:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 800053c:	683b      	ldr	r3, [r7, #0]
 800053e:	609a      	str	r2, [r3, #8]
    font_ex->gc.padding = COGUI_PADDING_SIMPLE(5);
 8000540:	683a      	ldr	r2, [r7, #0]
 8000542:	f04f 3305 	mov.w	r3, #84215045	; 0x5050505
 8000546:	f04f 0400 	mov.w	r4, #0
 800054a:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48
    cogui_widget_set_text_align(font_ex, COGUI_TEXT_ALIGN_CENTER|COGUI_TEXT_ALIGN_MIDDLE);
 800054e:	2114      	movs	r1, #20
 8000550:	6838      	ldr	r0, [r7, #0]
 8000552:	f01d fb39 	bl	801dbc8 <cogui_widget_set_text_align>
    cogui_widget_set_text(font_ex, "Text align middle-center");
 8000556:	4961      	ldr	r1, [pc, #388]	; (80006dc <app_b_paint+0x244>)
 8000558:	6838      	ldr	r0, [r7, #0]
 800055a:	f01d fb51 	bl	801dc00 <cogui_widget_set_text>
	print_result(cogui_widget_show(font_ex), "create middle-center example");
 800055e:	6838      	ldr	r0, [r7, #0]
 8000560:	f01d fd3e 	bl	801dfe0 <cogui_widget_show>
 8000564:	4603      	mov	r3, r0
 8000566:	495e      	ldr	r1, [pc, #376]	; (80006e0 <app_b_paint+0x248>)
 8000568:	4618      	mov	r0, r3
 800056a:	f000 fee1 	bl	8001330 <print_result>

    /* widget 3: bottom-right */
    font_ex = cogui_widget_create(win);
 800056e:	6878      	ldr	r0, [r7, #4]
 8000570:	f01c fede 	bl	801d330 <cogui_widget_create>
 8000574:	6038      	str	r0, [r7, #0]
	cogui_widget_set_rectangle(font_ex, 5, 155, 230, 50);
 8000576:	2332      	movs	r3, #50	; 0x32
 8000578:	9300      	str	r3, [sp, #0]
 800057a:	23e6      	movs	r3, #230	; 0xe6
 800057c:	229b      	movs	r2, #155	; 0x9b
 800057e:	2105      	movs	r1, #5
 8000580:	6838      	ldr	r0, [r7, #0]
 8000582:	f01d fa3c 	bl	801d9fe <cogui_widget_set_rectangle>
	font_ex->gc.background = COGUI_GREEN;
 8000586:	683a      	ldr	r2, [r7, #0]
 8000588:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800058c:	f04f 0400 	mov.w	r4, #0
 8000590:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
	font_ex->gc.foreground = COGUI_DARK_GRAY;
 8000594:	683a      	ldr	r2, [r7, #0]
 8000596:	f244 2308 	movw	r3, #16904	; 0x4208
 800059a:	f04f 0400 	mov.w	r4, #0
 800059e:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
	font_ex->flag |= COGUI_WIDGET_FLAG_RECT | COGUI_WIDGET_FLAG_FILLED;
 80005a2:	683b      	ldr	r3, [r7, #0]
 80005a4:	689b      	ldr	r3, [r3, #8]
 80005a6:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 80005aa:	683b      	ldr	r3, [r7, #0]
 80005ac:	609a      	str	r2, [r3, #8]
    font_ex->gc.padding = COGUI_PADDING_SIMPLE(5);
 80005ae:	683a      	ldr	r2, [r7, #0]
 80005b0:	f04f 3305 	mov.w	r3, #84215045	; 0x5050505
 80005b4:	f04f 0400 	mov.w	r4, #0
 80005b8:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48
    cogui_widget_set_text_align(font_ex, COGUI_TEXT_ALIGN_BOTTOM|COGUI_TEXT_ALIGN_RIGHT);
 80005bc:	2122      	movs	r1, #34	; 0x22
 80005be:	6838      	ldr	r0, [r7, #0]
 80005c0:	f01d fb02 	bl	801dbc8 <cogui_widget_set_text_align>
    cogui_widget_set_text(font_ex, "Text align bottom-right");
 80005c4:	4947      	ldr	r1, [pc, #284]	; (80006e4 <app_b_paint+0x24c>)
 80005c6:	6838      	ldr	r0, [r7, #0]
 80005c8:	f01d fb1a 	bl	801dc00 <cogui_widget_set_text>
	print_result(cogui_widget_show(font_ex), "create bottom-right example");
 80005cc:	6838      	ldr	r0, [r7, #0]
 80005ce:	f01d fd07 	bl	801dfe0 <cogui_widget_show>
 80005d2:	4603      	mov	r3, r0
 80005d4:	4944      	ldr	r1, [pc, #272]	; (80006e8 <app_b_paint+0x250>)
 80005d6:	4618      	mov	r0, r3
 80005d8:	f000 feaa 	bl	8001330 <print_result>

    /* widget 4: font size 11x18 */
    font_ex = cogui_widget_create(win);
 80005dc:	6878      	ldr	r0, [r7, #4]
 80005de:	f01c fea7 	bl	801d330 <cogui_widget_create>
 80005e2:	6038      	str	r0, [r7, #0]
	cogui_widget_set_rectangle(font_ex, 5, 210, 230, 50);
 80005e4:	2332      	movs	r3, #50	; 0x32
 80005e6:	9300      	str	r3, [sp, #0]
 80005e8:	23e6      	movs	r3, #230	; 0xe6
 80005ea:	22d2      	movs	r2, #210	; 0xd2
 80005ec:	2105      	movs	r1, #5
 80005ee:	6838      	ldr	r0, [r7, #0]
 80005f0:	f01d fa05 	bl	801d9fe <cogui_widget_set_rectangle>
	font_ex->gc.background = COGUI_YELLOW;
 80005f4:	683a      	ldr	r2, [r7, #0]
 80005f6:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80005fa:	f04f 0400 	mov.w	r4, #0
 80005fe:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
	font_ex->gc.foreground = COGUI_DARK_GRAY;
 8000602:	683a      	ldr	r2, [r7, #0]
 8000604:	f244 2308 	movw	r3, #16904	; 0x4208
 8000608:	f04f 0400 	mov.w	r4, #0
 800060c:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
	font_ex->flag |= COGUI_WIDGET_FLAG_RECT | COGUI_WIDGET_FLAG_FILLED;
 8000610:	683b      	ldr	r3, [r7, #0]
 8000612:	689b      	ldr	r3, [r3, #8]
 8000614:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8000618:	683b      	ldr	r3, [r7, #0]
 800061a:	609a      	str	r2, [r3, #8]
    font_ex->gc.padding = COGUI_PADDING_SIMPLE(15);
 800061c:	683a      	ldr	r2, [r7, #0]
 800061e:	f04f 330f 	mov.w	r3, #252645135	; 0xf0f0f0f
 8000622:	f04f 0400 	mov.w	r4, #0
 8000626:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48
    cogui_widget_set_font(font_ex, &tm_font_11x18);
 800062a:	4930      	ldr	r1, [pc, #192]	; (80006ec <app_b_paint+0x254>)
 800062c:	6838      	ldr	r0, [r7, #0]
 800062e:	f01d faa7 	bl	801db80 <cogui_widget_set_font>
    cogui_widget_set_text_align(font_ex, COGUI_TEXT_ALIGN_CENTER|COGUI_TEXT_ALIGN_MIDDLE);
 8000632:	2114      	movs	r1, #20
 8000634:	6838      	ldr	r0, [r7, #0]
 8000636:	f01d fac7 	bl	801dbc8 <cogui_widget_set_text_align>
    cogui_widget_set_text(font_ex, "11x18");
 800063a:	492d      	ldr	r1, [pc, #180]	; (80006f0 <app_b_paint+0x258>)
 800063c:	6838      	ldr	r0, [r7, #0]
 800063e:	f01d fadf 	bl	801dc00 <cogui_widget_set_text>
	print_result(cogui_widget_show(font_ex), "create 11x18 example");
 8000642:	6838      	ldr	r0, [r7, #0]
 8000644:	f01d fccc 	bl	801dfe0 <cogui_widget_show>
 8000648:	4603      	mov	r3, r0
 800064a:	492a      	ldr	r1, [pc, #168]	; (80006f4 <app_b_paint+0x25c>)
 800064c:	4618      	mov	r0, r3
 800064e:	f000 fe6f 	bl	8001330 <print_result>

    /* widget 5: font size 16x26 */
    font_ex = cogui_widget_create(win);
 8000652:	6878      	ldr	r0, [r7, #4]
 8000654:	f01c fe6c 	bl	801d330 <cogui_widget_create>
 8000658:	6038      	str	r0, [r7, #0]
	cogui_widget_set_rectangle(font_ex, 5, 265, 230, 50);
 800065a:	2332      	movs	r3, #50	; 0x32
 800065c:	9300      	str	r3, [sp, #0]
 800065e:	23e6      	movs	r3, #230	; 0xe6
 8000660:	f240 1209 	movw	r2, #265	; 0x109
 8000664:	2105      	movs	r1, #5
 8000666:	6838      	ldr	r0, [r7, #0]
 8000668:	f01d f9c9 	bl	801d9fe <cogui_widget_set_rectangle>
	font_ex->gc.background = COGUI_PURPLE;
 800066c:	683a      	ldr	r2, [r7, #0]
 800066e:	f64f 031f 	movw	r3, #63519	; 0xf81f
 8000672:	f04f 0400 	mov.w	r4, #0
 8000676:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
	font_ex->flag |= COGUI_WIDGET_FLAG_RECT | COGUI_WIDGET_FLAG_FILLED;
 800067a:	683b      	ldr	r3, [r7, #0]
 800067c:	689b      	ldr	r3, [r3, #8]
 800067e:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8000682:	683b      	ldr	r3, [r7, #0]
 8000684:	609a      	str	r2, [r3, #8]
    font_ex->gc.padding = COGUI_PADDING_SIMPLE(10);
 8000686:	683a      	ldr	r2, [r7, #0]
 8000688:	f04f 330a 	mov.w	r3, #168430090	; 0xa0a0a0a
 800068c:	f04f 0400 	mov.w	r4, #0
 8000690:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48
    cogui_widget_set_font(font_ex, &tm_font_16x26);
 8000694:	4918      	ldr	r1, [pc, #96]	; (80006f8 <app_b_paint+0x260>)
 8000696:	6838      	ldr	r0, [r7, #0]
 8000698:	f01d fa72 	bl	801db80 <cogui_widget_set_font>
    cogui_widget_set_text_align(font_ex, COGUI_TEXT_ALIGN_CENTER|COGUI_TEXT_ALIGN_MIDDLE);
 800069c:	2114      	movs	r1, #20
 800069e:	6838      	ldr	r0, [r7, #0]
 80006a0:	f01d fa92 	bl	801dbc8 <cogui_widget_set_text_align>
    cogui_widget_set_text(font_ex, "16x26");
 80006a4:	4915      	ldr	r1, [pc, #84]	; (80006fc <app_b_paint+0x264>)
 80006a6:	6838      	ldr	r0, [r7, #0]
 80006a8:	f01d faaa 	bl	801dc00 <cogui_widget_set_text>
	print_result(cogui_widget_show(font_ex), "create 16x26 example");
 80006ac:	6838      	ldr	r0, [r7, #0]
 80006ae:	f01d fc97 	bl	801dfe0 <cogui_widget_show>
 80006b2:	4603      	mov	r3, r0
 80006b4:	4912      	ldr	r1, [pc, #72]	; (8000700 <app_b_paint+0x268>)
 80006b6:	4618      	mov	r0, r3
 80006b8:	f000 fe3a 	bl	8001330 <print_result>

	cogui_printf("[%10s] Paint ok.\r\n", cogui_app_self()->name);
 80006bc:	f01a feb0 	bl	801b420 <cogui_app_self>
 80006c0:	4603      	mov	r3, r0
 80006c2:	685b      	ldr	r3, [r3, #4]
 80006c4:	4619      	mov	r1, r3
 80006c6:	480f      	ldr	r0, [pc, #60]	; (8000704 <app_b_paint+0x26c>)
 80006c8:	f01c fb2e 	bl	801cd28 <cogui_printf>
}
 80006cc:	bf00      	nop
 80006ce:	370c      	adds	r7, #12
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd90      	pop	{r4, r7, pc}
 80006d4:	0801f2b8 	.word	0x0801f2b8
 80006d8:	0801f2cc 	.word	0x0801f2cc
 80006dc:	0801f2e4 	.word	0x0801f2e4
 80006e0:	0801f300 	.word	0x0801f300
 80006e4:	0801f320 	.word	0x0801f320
 80006e8:	0801f338 	.word	0x0801f338
 80006ec:	20000148 	.word	0x20000148
 80006f0:	0801f354 	.word	0x0801f354
 80006f4:	0801f35c 	.word	0x0801f35c
 80006f8:	20000154 	.word	0x20000154
 80006fc:	0801f374 	.word	0x0801f374
 8000700:	0801f37c 	.word	0x0801f37c
 8000704:	0801f284 	.word	0x0801f284

08000708 <b_handler>:

StatusType b_handler(struct cogui_event *event)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b082      	sub	sp, #8
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
	COGUI_ASSERT(event != Co_NULL);
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	2b00      	cmp	r3, #0
 8000714:	d104      	bne.n	8000720 <b_handler+0x18>
 8000716:	22be      	movs	r2, #190	; 0xbe
 8000718:	4908      	ldr	r1, [pc, #32]	; (800073c <b_handler+0x34>)
 800071a:	4809      	ldr	r0, [pc, #36]	; (8000740 <b_handler+0x38>)
 800071c:	f01c fce4 	bl	801d0e8 <cogui_assert_handler>

	switch (event->type)
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	781b      	ldrb	r3, [r3, #0]
 8000724:	2b0f      	cmp	r3, #15
 8000726:	d104      	bne.n	8000732 <b_handler+0x2a>
    {
	case COGUI_EVENT_PAINT:
		 app_b_paint();
 8000728:	f7ff feb6 	bl	8000498 <app_b_paint>
		break;
 800072c:	bf00      	nop
	default:
		return Co_FALSE;
				
	}
		
	return Co_TRUE;
 800072e:	2301      	movs	r3, #1
 8000730:	e000      	b.n	8000734 <b_handler+0x2c>
		return Co_FALSE;
 8000732:	2300      	movs	r3, #0
}
 8000734:	4618      	mov	r0, r3
 8000736:	3708      	adds	r7, #8
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}
 800073c:	0801fa28 	.word	0x0801fa28
 8000740:	0801f298 	.word	0x0801f298

08000744 <app_b>:

void app_b(void *par) 
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b084      	sub	sp, #16
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
	cogui_app_t *app = cogui_app_create("Font Ex.");
 800074c:	480b      	ldr	r0, [pc, #44]	; (800077c <app_b+0x38>)
 800074e:	f01a fc79 	bl	801b044 <cogui_app_create>
 8000752:	60f8      	str	r0, [r7, #12]
	if (app == Co_NULL) {
 8000754:	68fb      	ldr	r3, [r7, #12]
 8000756:	2b00      	cmp	r3, #0
 8000758:	d00b      	beq.n	8000772 <app_b+0x2e>
		return;
	}
	
	app->optional_handler = b_handler; 
 800075a:	68fb      	ldr	r3, [r7, #12]
 800075c:	4a08      	ldr	r2, [pc, #32]	; (8000780 <app_b+0x3c>)
 800075e:	655a      	str	r2, [r3, #84]	; 0x54
	cogui_app_run(app);
 8000760:	68f8      	ldr	r0, [r7, #12]
 8000762:	f01a fd95 	bl	801b290 <cogui_app_run>
	cogui_app_delete(app);
 8000766:	68f8      	ldr	r0, [r7, #12]
 8000768:	f01a fce8 	bl	801b13c <cogui_app_delete>
	
	CoExitTask();
 800076c:	f019 fd92 	bl	801a294 <CoExitTask>
 8000770:	e000      	b.n	8000774 <app_b+0x30>
		return;
 8000772:	bf00      	nop
}
 8000774:	3710      	adds	r7, #16
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	0801f394 	.word	0x0801f394
 8000780:	08000709 	.word	0x08000709

08000784 <usb_p>:
#endif

#ifdef USE_USB
void usb_p(void *par)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b082      	sub	sp, #8
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
    cogui_printf("[usb] start procress.\r\n");
 800078c:	4803      	ldr	r0, [pc, #12]	; (800079c <usb_p+0x18>)
 800078e:	f01c facb 	bl	801cd28 <cogui_printf>
    for(;;){
        USBH_Process(&USB_OTG_Core, &USB_Host);
 8000792:	4903      	ldr	r1, [pc, #12]	; (80007a0 <usb_p+0x1c>)
 8000794:	4803      	ldr	r0, [pc, #12]	; (80007a4 <usb_p+0x20>)
 8000796:	f014 fe5e 	bl	8015456 <USBH_Process>
 800079a:	e7fa      	b.n	8000792 <usb_p+0xe>
 800079c:	0801f3a0 	.word	0x0801f3a0
 80007a0:	200033e0 	.word	0x200033e0
 80007a4:	20002e34 	.word	0x20002e34

080007a8 <gui_init>:
    }
}    
#endif

void gui_init(void *par)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b082      	sub	sp, #8
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
	stm_print_string(GRN_BOLD"\t[OK]\t\t"ARESET"│\r\n");
 80007b0:	481f      	ldr	r0, [pc, #124]	; (8000830 <gui_init+0x88>)
 80007b2:	f000 fd93 	bl	80012dc <stm_print_string>
    stm_print_string("\t│\t\t\t\t\t\t\t\t\t\t│\r\n\t╰───────────────────────────────────────────────────────────────────────────────╯\r\n\r\n");
 80007b6:	481f      	ldr	r0, [pc, #124]	; (8000834 <gui_init+0x8c>)
 80007b8:	f000 fd90 	bl	80012dc <stm_print_string>
    	
#ifdef USE_GUI
	cogui_printf("[%10s] Set up grahpic driver...", "User");
 80007bc:	491e      	ldr	r1, [pc, #120]	; (8000838 <gui_init+0x90>)
 80007be:	481f      	ldr	r0, [pc, #124]	; (800083c <gui_init+0x94>)
 80007c0:	f01c fab2 	bl	801cd28 <cogui_printf>
	cogui_set_graphic_driver(&driver_ops);
 80007c4:	481e      	ldr	r0, [pc, #120]	; (8000840 <gui_init+0x98>)
 80007c6:	f01b fc33 	bl	801c030 <cogui_set_graphic_driver>
	cogui_printf(GRN_BOLD"\t[OK]\r\n"ARESET);
 80007ca:	481e      	ldr	r0, [pc, #120]	; (8000844 <gui_init+0x9c>)
 80007cc:	f01c faac 	bl	801cd28 <cogui_printf>
	
	cogui_system_init();
 80007d0:	f01b ff76 	bl	801c6c0 <cogui_system_init>
	
	cogui_printf("[%10s] Create a task \"app a\"...", "User");
 80007d4:	4918      	ldr	r1, [pc, #96]	; (8000838 <gui_init+0x90>)
 80007d6:	481c      	ldr	r0, [pc, #112]	; (8000848 <gui_init+0xa0>)
 80007d8:	f01c faa6 	bl	801cd28 <cogui_printf>
	CoCreateTask(app_a, (void *)0, 25, &app_a_stk[TASK_STK_SIZE-1], TASK_STK_SIZE);
 80007dc:	4b1b      	ldr	r3, [pc, #108]	; (800084c <gui_init+0xa4>)
 80007de:	4a1c      	ldr	r2, [pc, #112]	; (8000850 <gui_init+0xa8>)
 80007e0:	2100      	movs	r1, #0
 80007e2:	481c      	ldr	r0, [pc, #112]	; (8000854 <gui_init+0xac>)
 80007e4:	f019 fc36 	bl	801a054 <CreateTask>
	cogui_printf(GRN_BOLD"\t[OK]\r\n"ARESET);
 80007e8:	4816      	ldr	r0, [pc, #88]	; (8000844 <gui_init+0x9c>)
 80007ea:	f01c fa9d 	bl	801cd28 <cogui_printf>
	
	
	cogui_printf("[%10s] Create a task \"app b\"...", "User");
 80007ee:	4912      	ldr	r1, [pc, #72]	; (8000838 <gui_init+0x90>)
 80007f0:	4819      	ldr	r0, [pc, #100]	; (8000858 <gui_init+0xb0>)
 80007f2:	f01c fa99 	bl	801cd28 <cogui_printf>
	CoCreateTask(app_b, (void *)0, 30, &app_b_stk[TASK_STK_SIZE-1], TASK_STK_SIZE);
 80007f6:	4b19      	ldr	r3, [pc, #100]	; (800085c <gui_init+0xb4>)
 80007f8:	4a19      	ldr	r2, [pc, #100]	; (8000860 <gui_init+0xb8>)
 80007fa:	2100      	movs	r1, #0
 80007fc:	4819      	ldr	r0, [pc, #100]	; (8000864 <gui_init+0xbc>)
 80007fe:	f019 fc29 	bl	801a054 <CreateTask>
	cogui_printf(GRN_BOLD"\t[OK]\r\n"ARESET);
 8000802:	4810      	ldr	r0, [pc, #64]	; (8000844 <gui_init+0x9c>)
 8000804:	f01c fa90 	bl	801cd28 <cogui_printf>

#ifdef USE_USB
    cogui_printf("[%10s] Create a task \"USB\"...", "User");
 8000808:	490b      	ldr	r1, [pc, #44]	; (8000838 <gui_init+0x90>)
 800080a:	4817      	ldr	r0, [pc, #92]	; (8000868 <gui_init+0xc0>)
 800080c:	f01c fa8c 	bl	801cd28 <cogui_printf>
	CoCreateTask(usb_p, (void *)0, 35, &usb_stk[TASK_STK_SIZE-1], TASK_STK_SIZE);
 8000810:	4b16      	ldr	r3, [pc, #88]	; (800086c <gui_init+0xc4>)
 8000812:	4a17      	ldr	r2, [pc, #92]	; (8000870 <gui_init+0xc8>)
 8000814:	2100      	movs	r1, #0
 8000816:	4817      	ldr	r0, [pc, #92]	; (8000874 <gui_init+0xcc>)
 8000818:	f019 fc1c 	bl	801a054 <CreateTask>
	cogui_printf(GRN_BOLD"\t[OK]\r\n"ARESET);
 800081c:	4809      	ldr	r0, [pc, #36]	; (8000844 <gui_init+0x9c>)
 800081e:	f01c fa83 	bl	801cd28 <cogui_printf>
#endif

	CoExitTask();
 8000822:	f019 fd37 	bl	801a294 <CoExitTask>
#endif
}
 8000826:	bf00      	nop
 8000828:	3708      	adds	r7, #8
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	0801f3b8 	.word	0x0801f3b8
 8000834:	0801f3d4 	.word	0x0801f3d4
 8000838:	0801f4e0 	.word	0x0801f4e0
 800083c:	0801f4e8 	.word	0x0801f4e8
 8000840:	20000014 	.word	0x20000014
 8000844:	0801f508 	.word	0x0801f508
 8000848:	0801f520 	.word	0x0801f520
 800084c:	20001db0 	.word	0x20001db0
 8000850:	00020019 	.word	0x00020019
 8000854:	08000459 	.word	0x08000459
 8000858:	0801f540 	.word	0x0801f540
 800085c:	200025b0 	.word	0x200025b0
 8000860:	0002001e 	.word	0x0002001e
 8000864:	08000745 	.word	0x08000745
 8000868:	0801f560 	.word	0x0801f560
 800086c:	20002db0 	.word	0x20002db0
 8000870:	00020023 	.word	0x00020023
 8000874:	08000785 	.word	0x08000785

08000878 <main>:

int main(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b082      	sub	sp, #8
 800087c:	af02      	add	r7, sp, #8
    UART_Init();
 800087e:	f000 fb35 	bl	8000eec <UART_Init>

    stm_print_string("\r\n\r\n\t╭───────────────────────────────────────────────────────────────────────────────╮\r\n\t│\t\t\t\t\t\t\t\t\t\t│\r\n");
 8000882:	4843      	ldr	r0, [pc, #268]	; (8000990 <main+0x118>)
 8000884:	f000 fd2a 	bl	80012dc <stm_print_string>
    stm_print_string("\t│\t\t\tSTM32F429 Discovery Board Initial\t\t\t│\r\n");
 8000888:	4842      	ldr	r0, [pc, #264]	; (8000994 <main+0x11c>)
 800088a:	f000 fd27 	bl	80012dc <stm_print_string>
    stm_print_string("\t│\t\t      ─────────────────────────────────────\t\t\t│\r\n\t│\t\t\t\t\t\t\t\t\t\t│\r\n");
 800088e:	4842      	ldr	r0, [pc, #264]	; (8000998 <main+0x120>)
 8000890:	f000 fd24 	bl	80012dc <stm_print_string>
    stm_print_string("\t│\t\t[sys] Initial system tick ..............");
    Delay_Init();
	stm_print_string(GRN_BOLD"\t[OK]\t\t"ARESET"│\r\n");
#endif

    stm_print_string("\t│\t\t[sys] Initial LED GPIO setting .........");
 8000894:	4841      	ldr	r0, [pc, #260]	; (800099c <main+0x124>)
 8000896:	f000 fd21 	bl	80012dc <stm_print_string>
    LED_Init();
 800089a:	f000 fb7f 	bl	8000f9c <LED_Init>
	stm_print_string(GRN_BOLD"\t[OK]\t\t"ARESET"│\r\n");
 800089e:	4840      	ldr	r0, [pc, #256]	; (80009a0 <main+0x128>)
 80008a0:	f000 fd1c 	bl	80012dc <stm_print_string>

    stm_print_string("\t│\t\t[sys] Initial user btn setting .........");
 80008a4:	483f      	ldr	r0, [pc, #252]	; (80009a4 <main+0x12c>)
 80008a6:	f000 fd19 	bl	80012dc <stm_print_string>
	STM_EVAL_PBInit(BUTTON_USER, BUTTON_MODE_GPIO);
 80008aa:	2100      	movs	r1, #0
 80008ac:	2000      	movs	r0, #0
 80008ae:	f00d fc07 	bl	800e0c0 <STM_EVAL_PBInit>
	stm_print_string(GRN_BOLD"\t[OK]\t\t"ARESET"│\r\n");
 80008b2:	483b      	ldr	r0, [pc, #236]	; (80009a0 <main+0x128>)
 80008b4:	f000 fd12 	bl	80012dc <stm_print_string>

    stm_print_string("\t│\t\t[sys] Initial LCD setting ..............");
 80008b8:	483b      	ldr	r0, [pc, #236]	; (80009a8 <main+0x130>)
 80008ba:	f000 fd0f 	bl	80012dc <stm_print_string>
	LCD_Config();
 80008be:	f000 fb93 	bl	8000fe8 <LCD_Config>
	stm_print_string(GRN_BOLD"\t[OK]\t\t"ARESET"│\r\n");
 80008c2:	4837      	ldr	r0, [pc, #220]	; (80009a0 <main+0x128>)
 80008c4:	f000 fd0a 	bl	80012dc <stm_print_string>

    stm_print_string("\t│\t\t[sys] Enable Layer1 ....................");
 80008c8:	4838      	ldr	r0, [pc, #224]	; (80009ac <main+0x134>)
 80008ca:	f000 fd07 	bl	80012dc <stm_print_string>
    LTDC_LayerCmd(LTDC_Layer1, ENABLE);
 80008ce:	2101      	movs	r1, #1
 80008d0:	4837      	ldr	r0, [pc, #220]	; (80009b0 <main+0x138>)
 80008d2:	f006 ffea 	bl	80078aa <LTDC_LayerCmd>
	stm_print_string(GRN_BOLD"\t[OK]\t\t"ARESET"│\r\n");
 80008d6:	4832      	ldr	r0, [pc, #200]	; (80009a0 <main+0x128>)
 80008d8:	f000 fd00 	bl	80012dc <stm_print_string>

    stm_print_string("\t│\t\t[sys] Reload configuration of Layer1 ...");
 80008dc:	4835      	ldr	r0, [pc, #212]	; (80009b4 <main+0x13c>)
 80008de:	f000 fcfd 	bl	80012dc <stm_print_string>
    LTDC_ReloadConfig(LTDC_IMReload);
 80008e2:	2001      	movs	r0, #1
 80008e4:	f006 fefc 	bl	80076e0 <LTDC_ReloadConfig>
	stm_print_string(GRN_BOLD"\t[OK]\t\t"ARESET"│\r\n");
 80008e8:	482d      	ldr	r0, [pc, #180]	; (80009a0 <main+0x128>)
 80008ea:	f000 fcf7 	bl	80012dc <stm_print_string>

    stm_print_string("\t│\t\t[sys] Enable The LCD ...................");
 80008ee:	4832      	ldr	r0, [pc, #200]	; (80009b8 <main+0x140>)
 80008f0:	f000 fcf4 	bl	80012dc <stm_print_string>
    LTDC_Cmd(ENABLE);
 80008f4:	2001      	movs	r0, #1
 80008f6:	f006 fe68 	bl	80075ca <LTDC_Cmd>
	stm_print_string(GRN_BOLD"\t[OK]\t\t"ARESET"│\r\n");
 80008fa:	4829      	ldr	r0, [pc, #164]	; (80009a0 <main+0x128>)
 80008fc:	f000 fcee 	bl	80012dc <stm_print_string>

    stm_print_string("\t│\t\t[sys] Testing The LCD ..................");
 8000900:	482e      	ldr	r0, [pc, #184]	; (80009bc <main+0x144>)
 8000902:	f000 fceb 	bl	80012dc <stm_print_string>
    LCD_SetLayer(LCD_BACKGROUND_LAYER);
 8000906:	2000      	movs	r0, #0
 8000908:	f00f ff78 	bl	80107fc <LCD_SetLayer>
	LCD_Clear(COGUI_WHITE);
 800090c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000910:	f010 f84c 	bl	80109ac <LCD_Clear>
	LCD_SetLayer(LCD_FOREGROUND_LAYER);
 8000914:	2001      	movs	r0, #1
 8000916:	f00f ff71 	bl	80107fc <LCD_SetLayer>
	stm_print_string(GRN_BOLD"\t[OK]\t\t"ARESET"│\r\n");
 800091a:	4821      	ldr	r0, [pc, #132]	; (80009a0 <main+0x128>)
 800091c:	f000 fcde 	bl	80012dc <stm_print_string>

#ifdef USE_USB
    stm_print_string("\t│\t\t[sys] Initial USB OTG ..................\t\t\t│\r\n");
 8000920:	4827      	ldr	r0, [pc, #156]	; (80009c0 <main+0x148>)
 8000922:	f000 fcdb 	bl	80012dc <stm_print_string>
    USBH_Init(&USB_OTG_Core, 
 8000926:	4b27      	ldr	r3, [pc, #156]	; (80009c4 <main+0x14c>)
 8000928:	9300      	str	r3, [sp, #0]
 800092a:	4b27      	ldr	r3, [pc, #156]	; (80009c8 <main+0x150>)
 800092c:	4a27      	ldr	r2, [pc, #156]	; (80009cc <main+0x154>)
 800092e:	2100      	movs	r1, #0
 8000930:	4827      	ldr	r0, [pc, #156]	; (80009d0 <main+0x158>)
 8000932:	f014 fd36 	bl	80153a2 <USBH_Init>
            USB_OTG_HS_CORE_ID,
#endif
            &USB_Host,
            &HID_cb, 
            &USBH_USR_cb);
	stm_print_string(UP_CUR GRN_BOLD"\t[OK]\t\t"ARESET"│\r\n");
 8000936:	4827      	ldr	r0, [pc, #156]	; (80009d4 <main+0x15c>)
 8000938:	f000 fcd0 	bl	80012dc <stm_print_string>
	stm_print_string(GRN_BOLD"\t\t\t\t\t\t\t\t\t[OK]\t\t"ARESET"│\r\n");
 800093c:	4826      	ldr	r0, [pc, #152]	; (80009d8 <main+0x160>)
 800093e:	f000 fccd 	bl	80012dc <stm_print_string>
#endif

#ifdef USE_COOS
	stm_print_string("\t│\t\t[sys] Initial CoOS .....................");
 8000942:	4826      	ldr	r0, [pc, #152]	; (80009dc <main+0x164>)
 8000944:	f000 fcca 	bl	80012dc <stm_print_string>
    CoInitOS();
 8000948:	f016 fe90 	bl	801766c <CoInitOS>
	stm_print_string(GRN_BOLD"\t[OK]\t\t"ARESET"│\r\n");
 800094c:	4814      	ldr	r0, [pc, #80]	; (80009a0 <main+0x128>)
 800094e:	f000 fcc5 	bl	80012dc <stm_print_string>

	stm_print_string("\t│\t\t[sys] Create a task \"gui_init\" .........");
 8000952:	4823      	ldr	r0, [pc, #140]	; (80009e0 <main+0x168>)
 8000954:	f000 fcc2 	bl	80012dc <stm_print_string>
	CoCreateTask(gui_init, (void*)0, 10, &init_stk[TASK_STK_SIZE-1], TASK_STK_SIZE);
 8000958:	4b22      	ldr	r3, [pc, #136]	; (80009e4 <main+0x16c>)
 800095a:	4a23      	ldr	r2, [pc, #140]	; (80009e8 <main+0x170>)
 800095c:	2100      	movs	r1, #0
 800095e:	4823      	ldr	r0, [pc, #140]	; (80009ec <main+0x174>)
 8000960:	f019 fb78 	bl	801a054 <CreateTask>
	stm_print_string(GRN_BOLD"\t[OK]\t\t"ARESET"│\r\n");
 8000964:	480e      	ldr	r0, [pc, #56]	; (80009a0 <main+0x128>)
 8000966:	f000 fcb9 	bl	80012dc <stm_print_string>

	stm_print_string("\t│\t\t[sys] Start CoOS .......................");
 800096a:	4821      	ldr	r0, [pc, #132]	; (80009f0 <main+0x178>)
 800096c:	f000 fcb6 	bl	80012dc <stm_print_string>
    CoStartOS();
 8000970:	f016 febc 	bl	80176ec <CoStartOS>

	stm_print_string(RED_BOLD"\t│\t\t[sys] System initial failed!\r\n"ARESET);
 8000974:	481f      	ldr	r0, [pc, #124]	; (80009f4 <main+0x17c>)
 8000976:	f000 fcb1 	bl	80012dc <stm_print_string>
#endif

    stm_print_string("\t│\t\t\t\t\t\t\t\t\t\t│\r\n\t╰───────────────────────────────────────────────────────────────────────────────╯\r\n\r\n");
 800097a:	481f      	ldr	r0, [pc, #124]	; (80009f8 <main+0x180>)
 800097c:	f000 fcae 	bl	80012dc <stm_print_string>

    STM_EVAL_LEDOff(LED3|LED4);
 8000980:	2001      	movs	r0, #1
 8000982:	f00d fb65 	bl	800e050 <STM_EVAL_LEDOff>
    
	for(;;){
#ifdef USE_USB
        USBH_Process(&USB_OTG_Core, &USB_Host);
 8000986:	4911      	ldr	r1, [pc, #68]	; (80009cc <main+0x154>)
 8000988:	4811      	ldr	r0, [pc, #68]	; (80009d0 <main+0x158>)
 800098a:	f014 fd64 	bl	8015456 <USBH_Process>
 800098e:	e7fa      	b.n	8000986 <main+0x10e>
 8000990:	0801f580 	.word	0x0801f580
 8000994:	0801f690 	.word	0x0801f690
 8000998:	0801f6c4 	.word	0x0801f6c4
 800099c:	0801f75c 	.word	0x0801f75c
 80009a0:	0801f3b8 	.word	0x0801f3b8
 80009a4:	0801f78c 	.word	0x0801f78c
 80009a8:	0801f7bc 	.word	0x0801f7bc
 80009ac:	0801f7ec 	.word	0x0801f7ec
 80009b0:	40016884 	.word	0x40016884
 80009b4:	0801f81c 	.word	0x0801f81c
 80009b8:	0801f84c 	.word	0x0801f84c
 80009bc:	0801f87c 	.word	0x0801f87c
 80009c0:	0801f8ac 	.word	0x0801f8ac
 80009c4:	20000028 	.word	0x20000028
 80009c8:	200000e4 	.word	0x200000e4
 80009cc:	200033e0 	.word	0x200033e0
 80009d0:	20002e34 	.word	0x20002e34
 80009d4:	0801f8e4 	.word	0x0801f8e4
 80009d8:	0801f904 	.word	0x0801f904
 80009dc:	0801f928 	.word	0x0801f928
 80009e0:	0801f958 	.word	0x0801f958
 80009e4:	20000db0 	.word	0x20000db0
 80009e8:	0002000a 	.word	0x0002000a
 80009ec:	080007a9 	.word	0x080007a9
 80009f0:	0801f988 	.word	0x0801f988
 80009f4:	0801f9b8 	.word	0x0801f9b8
 80009f8:	0801f3d4 	.word	0x0801f3d4

080009fc <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t* file, uint32_t line)
{ 
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b082      	sub	sp, #8
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
 8000a04:	6039      	str	r1, [r7, #0]
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */

    /* Infinite loop */
    while (1)
    {
        cogui_printf("Wrong parameters value: file %s on line %d\r\n", file, line);
 8000a06:	683a      	ldr	r2, [r7, #0]
 8000a08:	6879      	ldr	r1, [r7, #4]
 8000a0a:	4802      	ldr	r0, [pc, #8]	; (8000a14 <assert_failed+0x18>)
 8000a0c:	f01c f98c 	bl	801cd28 <cogui_printf>
 8000a10:	e7f9      	b.n	8000a06 <assert_failed+0xa>
 8000a12:	bf00      	nop
 8000a14:	0801f9ec 	.word	0x0801f9ec

08000a18 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0
}
 8000a1c:	bf00      	nop
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a24:	4770      	bx	lr

08000a26 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8000a26:	b580      	push	{r7, lr}
 8000a28:	af00      	add	r7, sp, #0
    cogui_printf("Hard Fault exception!!!\r\n");
 8000a2a:	4802      	ldr	r0, [pc, #8]	; (8000a34 <HardFault_Handler+0xe>)
 8000a2c:	f01c f97c 	bl	801cd28 <cogui_printf>
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8000a30:	e7fe      	b.n	8000a30 <HardFault_Handler+0xa>
 8000a32:	bf00      	nop
 8000a34:	0801fa34 	.word	0x0801fa34

08000a38 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	af00      	add	r7, sp, #0
    cogui_printf("Memory Manage exception!!!\r\n");
 8000a3c:	4801      	ldr	r0, [pc, #4]	; (8000a44 <MemManage_Handler+0xc>)
 8000a3e:	f01c f973 	bl	801cd28 <cogui_printf>
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8000a42:	e7fe      	b.n	8000a42 <MemManage_Handler+0xa>
 8000a44:	0801fa50 	.word	0x0801fa50

08000a48 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	af00      	add	r7, sp, #0
    cogui_printf("Bus Fault exception!!!\r\n");
 8000a4c:	4801      	ldr	r0, [pc, #4]	; (8000a54 <BusFault_Handler+0xc>)
 8000a4e:	f01c f96b 	bl	801cd28 <cogui_printf>
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8000a52:	e7fe      	b.n	8000a52 <BusFault_Handler+0xa>
 8000a54:	0801fa70 	.word	0x0801fa70

08000a58 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	af00      	add	r7, sp, #0
    cogui_printf("Usage Fault exception!!!\r\n");
 8000a5c:	4801      	ldr	r0, [pc, #4]	; (8000a64 <UsageFault_Handler+0xc>)
 8000a5e:	f01c f963 	bl	801cd28 <cogui_printf>
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8000a62:	e7fe      	b.n	8000a62 <UsageFault_Handler+0xa>
 8000a64:	0801fa8c 	.word	0x0801fa8c

08000a68 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	af00      	add	r7, sp, #0
}
 8000a6c:	bf00      	nop
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a74:	4770      	bx	lr

08000a76 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8000a76:	b480      	push	{r7}
 8000a78:	af00      	add	r7, sp, #0
}
 8000a7a:	bf00      	nop
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a82:	4770      	bx	lr

08000a84 <USBH_USR_Init>:
  * @brief  Add the host lib initialization message to the console
  * @param  None
  * @retval None
  */
void USBH_USR_Init(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0
    if (USB_Host_status == USB_HOST_NOT_INIT) {
 8000a88:	4b06      	ldr	r3, [pc, #24]	; (8000aa4 <USBH_USR_Init+0x20>)
 8000a8a:	781b      	ldrb	r3, [r3, #0]
 8000a8c:	b2db      	uxtb	r3, r3
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d102      	bne.n	8000a98 <USBH_USR_Init+0x14>
        cogui_printf("\t│\t\t[sys] Start initial usb host............");
 8000a92:	4805      	ldr	r0, [pc, #20]	; (8000aa8 <USBH_USR_Init+0x24>)
 8000a94:	f01c f948 	bl	801cd28 <cogui_printf>
    }

    USB_Host_status = USB_HOST_INIT;
 8000a98:	4b02      	ldr	r3, [pc, #8]	; (8000aa4 <USBH_USR_Init+0x20>)
 8000a9a:	2201      	movs	r2, #1
 8000a9c:	701a      	strb	r2, [r3, #0]
}
 8000a9e:	bf00      	nop
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	20002db4 	.word	0x20002db4
 8000aa8:	0801fc40 	.word	0x0801fc40

08000aac <USBH_USR_DeviceAttached>:
  * @brief  Add the device attachement message to the console
  * @param  None
  * @retval None
  */
void USBH_USR_DeviceAttached(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	af00      	add	r7, sp, #0
    cogui_printf("[system] %s.\r\n", MSG_DEV_ATTACHED);
 8000ab0:	4905      	ldr	r1, [pc, #20]	; (8000ac8 <USBH_USR_DeviceAttached+0x1c>)
 8000ab2:	4806      	ldr	r0, [pc, #24]	; (8000acc <USBH_USR_DeviceAttached+0x20>)
 8000ab4:	f01c f938 	bl	801cd28 <cogui_printf>
    STM_EVAL_LEDOn(LED4);
 8000ab8:	2001      	movs	r0, #1
 8000aba:	f00d fab1 	bl	800e020 <STM_EVAL_LEDOn>

    USB_Host_status = USB_HOST_ATTACH;
 8000abe:	4b04      	ldr	r3, [pc, #16]	; (8000ad0 <USBH_USR_DeviceAttached+0x24>)
 8000ac0:	2202      	movs	r2, #2
 8000ac2:	701a      	strb	r2, [r3, #0]
}
 8000ac4:	bf00      	nop
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	0801fac4 	.word	0x0801fac4
 8000acc:	0801fc70 	.word	0x0801fc70
 8000ad0:	20002db4 	.word	0x20002db4

08000ad4 <USBH_USR_UnrecoveredError>:
  * @brief  Add the unrecovered error message to the console
  * @param  None
  * @retval None
  */
void USBH_USR_UnrecoveredError (void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0
    cogui_printf("[system] %s.\r\n", MSG_UNREC_ERROR);
 8000ad8:	4902      	ldr	r1, [pc, #8]	; (8000ae4 <USBH_USR_UnrecoveredError+0x10>)
 8000ada:	4803      	ldr	r0, [pc, #12]	; (8000ae8 <USBH_USR_UnrecoveredError+0x14>)
 8000adc:	f01c f924 	bl	801cd28 <cogui_printf>
}
 8000ae0:	bf00      	nop
 8000ae2:	bd80      	pop	{r7, pc}
 8000ae4:	0801fc18 	.word	0x0801fc18
 8000ae8:	0801fc70 	.word	0x0801fc70

08000aec <USBH_USR_DeviceDisconnected>:
  *        USB associated resources
  * @param  None
  * @retval None
  */
void USBH_USR_DeviceDisconnected (void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	af00      	add	r7, sp, #0
    cogui_printf("[system] %s.\r\n", MSG_DEV_DISCONNECTED);
 8000af0:	4905      	ldr	r1, [pc, #20]	; (8000b08 <USBH_USR_DeviceDisconnected+0x1c>)
 8000af2:	4806      	ldr	r0, [pc, #24]	; (8000b0c <USBH_USR_DeviceDisconnected+0x20>)
 8000af4:	f01c f918 	bl	801cd28 <cogui_printf>

    STM_EVAL_LEDOff(LED4);
 8000af8:	2001      	movs	r0, #1
 8000afa:	f00d faa9 	bl	800e050 <STM_EVAL_LEDOff>

    USB_Host_status = USB_HOST_DISCONNECT;
 8000afe:	4b04      	ldr	r3, [pc, #16]	; (8000b10 <USBH_USR_DeviceDisconnected+0x24>)
 8000b00:	2203      	movs	r2, #3
 8000b02:	701a      	strb	r2, [r3, #0]
}
 8000b04:	bf00      	nop
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	0801fad8 	.word	0x0801fad8
 8000b0c:	0801fc70 	.word	0x0801fc70
 8000b10:	20002db4 	.word	0x20002db4

08000b14 <USBH_USR_ResetDevice>:
  * @brief  callback of the device reset event
  * @param  None
  * @retval None
  */
void USBH_USR_ResetDevice(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0
}
 8000b18:	bf00      	nop
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b20:	4770      	bx	lr

08000b22 <USBH_USR_DeviceSpeedDetected>:
  * @brief  Add the device speed message to the console
  * @param  Device speed
  * @retval None
  */
void USBH_USR_DeviceSpeedDetected(uint8_t DeviceSpeed)
{
 8000b22:	b580      	push	{r7, lr}
 8000b24:	b082      	sub	sp, #8
 8000b26:	af00      	add	r7, sp, #0
 8000b28:	4603      	mov	r3, r0
 8000b2a:	71fb      	strb	r3, [r7, #7]
    if (DeviceSpeed == HPRT0_PRTSPD_HIGH_SPEED) {
 8000b2c:	79fb      	ldrb	r3, [r7, #7]
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d104      	bne.n	8000b3c <USBH_USR_DeviceSpeedDetected+0x1a>
        cogui_printf("[system] %s.\r\n", MSG_DEV_HIGHSPEED);
 8000b32:	490e      	ldr	r1, [pc, #56]	; (8000b6c <USBH_USR_DeviceSpeedDetected+0x4a>)
 8000b34:	480e      	ldr	r0, [pc, #56]	; (8000b70 <USBH_USR_DeviceSpeedDetected+0x4e>)
 8000b36:	f01c f8f7 	bl	801cd28 <cogui_printf>
        cogui_printf("[system] %s.\r\n", MSG_DEV_LOWSPEED);
	} 
    else {
		cogui_printf("[system] %s.\r\n", MSG_DEV_ERROR);
	}
}
 8000b3a:	e013      	b.n	8000b64 <USBH_USR_DeviceSpeedDetected+0x42>
    else if (DeviceSpeed == HPRT0_PRTSPD_FULL_SPEED) {
 8000b3c:	79fb      	ldrb	r3, [r7, #7]
 8000b3e:	2b01      	cmp	r3, #1
 8000b40:	d104      	bne.n	8000b4c <USBH_USR_DeviceSpeedDetected+0x2a>
        cogui_printf("[system] %s.\r\n", MSG_DEV_FULLSPEED);
 8000b42:	490c      	ldr	r1, [pc, #48]	; (8000b74 <USBH_USR_DeviceSpeedDetected+0x52>)
 8000b44:	480a      	ldr	r0, [pc, #40]	; (8000b70 <USBH_USR_DeviceSpeedDetected+0x4e>)
 8000b46:	f01c f8ef 	bl	801cd28 <cogui_printf>
}
 8000b4a:	e00b      	b.n	8000b64 <USBH_USR_DeviceSpeedDetected+0x42>
    else if (DeviceSpeed == HPRT0_PRTSPD_LOW_SPEED) {
 8000b4c:	79fb      	ldrb	r3, [r7, #7]
 8000b4e:	2b02      	cmp	r3, #2
 8000b50:	d104      	bne.n	8000b5c <USBH_USR_DeviceSpeedDetected+0x3a>
        cogui_printf("[system] %s.\r\n", MSG_DEV_LOWSPEED);
 8000b52:	4909      	ldr	r1, [pc, #36]	; (8000b78 <USBH_USR_DeviceSpeedDetected+0x56>)
 8000b54:	4806      	ldr	r0, [pc, #24]	; (8000b70 <USBH_USR_DeviceSpeedDetected+0x4e>)
 8000b56:	f01c f8e7 	bl	801cd28 <cogui_printf>
}
 8000b5a:	e003      	b.n	8000b64 <USBH_USR_DeviceSpeedDetected+0x42>
		cogui_printf("[system] %s.\r\n", MSG_DEV_ERROR);
 8000b5c:	4907      	ldr	r1, [pc, #28]	; (8000b7c <USBH_USR_DeviceSpeedDetected+0x5a>)
 8000b5e:	4804      	ldr	r0, [pc, #16]	; (8000b70 <USBH_USR_DeviceSpeedDetected+0x4e>)
 8000b60:	f01c f8e2 	bl	801cd28 <cogui_printf>
}
 8000b64:	bf00      	nop
 8000b66:	3708      	adds	r7, #8
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	0801fb04 	.word	0x0801fb04
 8000b70:	0801fc70 	.word	0x0801fc70
 8000b74:	0801fb20 	.word	0x0801fb20
 8000b78:	0801fb3c 	.word	0x0801fb3c
 8000b7c:	0801fb58 	.word	0x0801fb58

08000b80 <USBH_USR_Device_DescAvailable>:
  * @brief  Add the USB device vendor and MFC Ids to the console
  * @param  device descriptor
  * @retval None
  */
void USBH_USR_Device_DescAvailable(void *DeviceDesc)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b084      	sub	sp, #16
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
    USBH_DevDesc_TypeDef *hs;
    hs = DeviceDesc;  
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	60fb      	str	r3, [r7, #12]
    
    cogui_printf("[system] VID : %d\r\n" , (uint32_t)(*hs).idVendor);
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	891b      	ldrh	r3, [r3, #8]
 8000b90:	4619      	mov	r1, r3
 8000b92:	4806      	ldr	r0, [pc, #24]	; (8000bac <USBH_USR_Device_DescAvailable+0x2c>)
 8000b94:	f01c f8c8 	bl	801cd28 <cogui_printf>
    cogui_printf("[system] PID : %d\r\n" , (uint32_t)(*hs).idProduct); 
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	895b      	ldrh	r3, [r3, #10]
 8000b9c:	4619      	mov	r1, r3
 8000b9e:	4804      	ldr	r0, [pc, #16]	; (8000bb0 <USBH_USR_Device_DescAvailable+0x30>)
 8000ba0:	f01c f8c2 	bl	801cd28 <cogui_printf>
}
 8000ba4:	bf00      	nop
 8000ba6:	3710      	adds	r7, #16
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}
 8000bac:	0801fc80 	.word	0x0801fc80
 8000bb0:	0801fc94 	.word	0x0801fc94

08000bb4 <USBH_USR_DeviceAddressAssigned>:
  * @brief  Device addressed event callbacak
  * @param  None
  * @retval None
  */
void USBH_USR_DeviceAddressAssigned(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0
}
 8000bb8:	bf00      	nop
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc0:	4770      	bx	lr

08000bc2 <USBH_USR_Configuration_DescAvailable>:
  * @retval None
  */
void USBH_USR_Configuration_DescAvailable(USBH_CfgDesc_TypeDef * cfgDesc,
    USBH_InterfaceDesc_TypeDef *itfDesc,
    USBH_EpDesc_TypeDef *epDesc)
{
 8000bc2:	b580      	push	{r7, lr}
 8000bc4:	b086      	sub	sp, #24
 8000bc6:	af00      	add	r7, sp, #0
 8000bc8:	60f8      	str	r0, [r7, #12]
 8000bca:	60b9      	str	r1, [r7, #8]
 8000bcc:	607a      	str	r2, [r7, #4]
    USBH_InterfaceDesc_TypeDef *id;
  
    id = itfDesc;  
 8000bce:	68bb      	ldr	r3, [r7, #8]
 8000bd0:	617b      	str	r3, [r7, #20]
    
    if ((*id).bInterfaceClass  == 0x08) {
 8000bd2:	697b      	ldr	r3, [r7, #20]
 8000bd4:	795b      	ldrb	r3, [r3, #5]
 8000bd6:	2b08      	cmp	r3, #8
 8000bd8:	d104      	bne.n	8000be4 <USBH_USR_Configuration_DescAvailable+0x22>
		cogui_printf("[system] %s.\r\n", MSG_MSC_CLASS);
 8000bda:	4908      	ldr	r1, [pc, #32]	; (8000bfc <USBH_USR_Configuration_DescAvailable+0x3a>)
 8000bdc:	4808      	ldr	r0, [pc, #32]	; (8000c00 <USBH_USR_Configuration_DescAvailable+0x3e>)
 8000bde:	f01c f8a3 	bl	801cd28 <cogui_printf>
    } 
    else if ((*id).bInterfaceClass  == 0x03) {
        cogui_printf("[system] %s.\r\n", MSG_HID_CLASS);
    }   
}
 8000be2:	e007      	b.n	8000bf4 <USBH_USR_Configuration_DescAvailable+0x32>
    else if ((*id).bInterfaceClass  == 0x03) {
 8000be4:	697b      	ldr	r3, [r7, #20]
 8000be6:	795b      	ldrb	r3, [r3, #5]
 8000be8:	2b03      	cmp	r3, #3
 8000bea:	d103      	bne.n	8000bf4 <USBH_USR_Configuration_DescAvailable+0x32>
        cogui_printf("[system] %s.\r\n", MSG_HID_CLASS);
 8000bec:	4905      	ldr	r1, [pc, #20]	; (8000c04 <USBH_USR_Configuration_DescAvailable+0x42>)
 8000bee:	4804      	ldr	r0, [pc, #16]	; (8000c00 <USBH_USR_Configuration_DescAvailable+0x3e>)
 8000bf0:	f01c f89a 	bl	801cd28 <cogui_printf>
}
 8000bf4:	bf00      	nop
 8000bf6:	3718      	adds	r7, #24
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd80      	pop	{r7, pc}
 8000bfc:	0801fb68 	.word	0x0801fb68
 8000c00:	0801fc70 	.word	0x0801fc70
 8000c04:	0801fb88 	.word	0x0801fb88

08000c08 <USBH_USR_Manufacturer_String>:
  * @brief  Add the MFC String to the console
  * @param  Manufacturer String
  * @retval None
  */
void USBH_USR_Manufacturer_String(void *ManufacturerString)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b082      	sub	sp, #8
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
    cogui_printf("[system] Manufacturer : %s\r\n", (char *)ManufacturerString);
 8000c10:	6879      	ldr	r1, [r7, #4]
 8000c12:	4803      	ldr	r0, [pc, #12]	; (8000c20 <USBH_USR_Manufacturer_String+0x18>)
 8000c14:	f01c f888 	bl	801cd28 <cogui_printf>
}
 8000c18:	bf00      	nop
 8000c1a:	3708      	adds	r7, #8
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bd80      	pop	{r7, pc}
 8000c20:	0801fca8 	.word	0x0801fca8

08000c24 <USBH_USR_Product_String>:
  * @brief  Add the Product String to the console
  * @param  Product String
  * @retval None
  */
void USBH_USR_Product_String(void *ProductString)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b082      	sub	sp, #8
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
    cogui_printf("[system] Product : %s\r\n", (char *)ProductString);  
 8000c2c:	6879      	ldr	r1, [r7, #4]
 8000c2e:	4803      	ldr	r0, [pc, #12]	; (8000c3c <USBH_USR_Product_String+0x18>)
 8000c30:	f01c f87a 	bl	801cd28 <cogui_printf>
}
 8000c34:	bf00      	nop
 8000c36:	3708      	adds	r7, #8
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bd80      	pop	{r7, pc}
 8000c3c:	0801fcc8 	.word	0x0801fcc8

08000c40 <USBH_USR_SerialNum_String>:
  * @brief  Add the Srial Number String to the console
  * @param  SerialNum_String
  * @retval None
  */
void USBH_USR_SerialNum_String(void *SerialNumString)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b082      	sub	sp, #8
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
    cogui_printf("[system] Serial Number : %s\r\n", (char *)SerialNumString);    
 8000c48:	6879      	ldr	r1, [r7, #4]
 8000c4a:	4803      	ldr	r0, [pc, #12]	; (8000c58 <USBH_USR_SerialNum_String+0x18>)
 8000c4c:	f01c f86c 	bl	801cd28 <cogui_printf>
}
 8000c50:	bf00      	nop
 8000c52:	3708      	adds	r7, #8
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	0801fce0 	.word	0x0801fce0

08000c5c <USBH_USR_EnumerationDone>:
  * @brief  Enumeration complete event callback
  * @param  None
  * @retval None
  */
void USBH_USR_EnumerationDone(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	af00      	add	r7, sp, #0
    cogui_printf("[system] %s.\r\n", MSG_DEV_ENUMERATED);
 8000c60:	4902      	ldr	r1, [pc, #8]	; (8000c6c <USBH_USR_EnumerationDone+0x10>)
 8000c62:	4803      	ldr	r0, [pc, #12]	; (8000c70 <USBH_USR_EnumerationDone+0x14>)
 8000c64:	f01c f860 	bl	801cd28 <cogui_printf>
}
 8000c68:	bf00      	nop
 8000c6a:	bd80      	pop	{r7, pc}
 8000c6c:	0801faec 	.word	0x0801faec
 8000c70:	0801fc70 	.word	0x0801fc70

08000c74 <USBH_USR_DeviceNotSupported>:
  * @brief  Device is not supported callback
  * @param  None
  * @retval None
  */
void USBH_USR_DeviceNotSupported(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	af00      	add	r7, sp, #0
    cogui_printf("[system] Device not supported.\r\n");
 8000c78:	4802      	ldr	r0, [pc, #8]	; (8000c84 <USBH_USR_DeviceNotSupported+0x10>)
 8000c7a:	f01c f855 	bl	801cd28 <cogui_printf>
}
 8000c7e:	bf00      	nop
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	0801fd00 	.word	0x0801fd00

08000c88 <USBH_USR_UserInput>:
  * @brief  User Action for application state entry callback
  * @param  None
  * @retval USBH_USR_Status : User response for key button
  */
USBH_USR_Status USBH_USR_UserInput(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
    return USBH_USR_RESP_OK;
 8000c8c:	2301      	movs	r3, #1
}
 8000c8e:	4618      	mov	r0, r3
 8000c90:	46bd      	mov	sp, r7
 8000c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c96:	4770      	bx	lr

08000c98 <USBH_USR_OverCurrentDetected>:
  * @brief  Over Current Detected on VBUS
  * @param  None
  * @retval Staus
  */
void USBH_USR_OverCurrentDetected (void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	af00      	add	r7, sp, #0
    cogui_printf("[system] Overcurrent detected.\r\n");
 8000c9c:	4802      	ldr	r0, [pc, #8]	; (8000ca8 <USBH_USR_OverCurrentDetected+0x10>)
 8000c9e:	f01c f843 	bl	801cd28 <cogui_printf>
}
 8000ca2:	bf00      	nop
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	0801fd24 	.word	0x0801fd24

08000cac <USBH_USR_DeInit>:
  * @brief  De-init User state and associated variables
  * @param  None
  * @retval None
  */
void USBH_USR_DeInit(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0
}
 8000cb0:	bf00      	nop
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb8:	4770      	bx	lr

08000cba <USR_KEYBRD_Init>:

void  USR_KEYBRD_Init (void) 
{
 8000cba:	b480      	push	{r7}
 8000cbc:	af00      	add	r7, sp, #0
}
 8000cbe:	bf00      	nop
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc6:	4770      	bx	lr

08000cc8 <USR_KEYBRD_ProcessData>:

void  USR_KEYBRD_ProcessData (uint8_t pbuf)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	b083      	sub	sp, #12
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	4603      	mov	r3, r0
 8000cd0:	71fb      	strb	r3, [r7, #7]
}
 8000cd2:	bf00      	nop
 8000cd4:	370c      	adds	r7, #12
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cdc:	4770      	bx	lr

08000cde <update_cursor>:

int16_t mouse_event[3] = {0, 0, 0};
int16_t cursor[3] = {0,0,0};

void update_cursor(int16_t dx, int16_t dy, uint8_t btn)
{
 8000cde:	b580      	push	{r7, lr}
 8000ce0:	b090      	sub	sp, #64	; 0x40
 8000ce2:	af00      	add	r7, sp, #0
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	80fb      	strh	r3, [r7, #6]
 8000ce8:	460b      	mov	r3, r1
 8000cea:	80bb      	strh	r3, [r7, #4]
 8000cec:	4613      	mov	r3, r2
 8000cee:	70fb      	strb	r3, [r7, #3]

    LCD_SetTextColor(COGUI_BLACK);
    LCD_DrawFullRect(cursor[0], cursor[1], 10, 10);     /* draw cursor                                          */
#else
    struct cogui_event event;
    COGUI_EVENT_INIT(&event, COGUI_EVENT_MOUSE_MOTION);
 8000cf0:	230c      	movs	r3, #12
 8000cf2:	733b      	strb	r3, [r7, #12]
 8000cf4:	f01a fb94 	bl	801b420 <cogui_app_self>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	613b      	str	r3, [r7, #16]
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	753b      	strb	r3, [r7, #20]

    event.dx = dx;
 8000d00:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d04:	623b      	str	r3, [r7, #32]
    event.dy = dy;
 8000d06:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000d0a:	627b      	str	r3, [r7, #36]	; 0x24

    cogui_send(cogui_get_server(), &event);
 8000d0c:	f01b fcbc 	bl	801c688 <cogui_get_server>
 8000d10:	4602      	mov	r2, r0
 8000d12:	f107 030c 	add.w	r3, r7, #12
 8000d16:	4619      	mov	r1, r3
 8000d18:	4610      	mov	r0, r2
 8000d1a:	f01b fd31 	bl	801c780 <cogui_send>
#endif

    USB_Host_status = USB_HOST_MOUSE_IDLE;              /* set status back to idle                              */
 8000d1e:	4b03      	ldr	r3, [pc, #12]	; (8000d2c <update_cursor+0x4e>)
 8000d20:	2209      	movs	r2, #9
 8000d22:	701a      	strb	r2, [r3, #0]
}
 8000d24:	bf00      	nop
 8000d26:	3740      	adds	r7, #64	; 0x40
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	20002db4 	.word	0x20002db4

08000d30 <USR_MOUSE_Init>:

void  USR_MOUSE_Init (void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	af00      	add	r7, sp, #0
    cogui_printf("[system] Connect to a mouse.\r\n");
 8000d34:	4807      	ldr	r0, [pc, #28]	; (8000d54 <USR_MOUSE_Init+0x24>)
 8000d36:	f01b fff7 	bl	801cd28 <cogui_printf>

    update_cursor(115*4, 155*4, 0);                     /* set cursor position in middle of screen              */
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	f44f 711b 	mov.w	r1, #620	; 0x26c
 8000d40:	f44f 70e6 	mov.w	r0, #460	; 0x1cc
 8000d44:	f7ff ffcb 	bl	8000cde <update_cursor>

    USB_Host_status = USB_HOST_MOUSE_CONNECT;
 8000d48:	4b03      	ldr	r3, [pc, #12]	; (8000d58 <USR_MOUSE_Init+0x28>)
 8000d4a:	2204      	movs	r2, #4
 8000d4c:	701a      	strb	r2, [r3, #0]
}
 8000d4e:	bf00      	nop
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	0801fd48 	.word	0x0801fd48
 8000d58:	20002db4 	.word	0x20002db4

08000d5c <USR_MOUSE_ProcessData>:

void  USR_MOUSE_ProcessData (HID_MOUSE_Data_TypeDef *data)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b084      	sub	sp, #16
 8000d60:	af02      	add	r7, sp, #8
 8000d62:	6078      	str	r0, [r7, #4]
    cogui_printf("[system] %s (%d, %d, %d)\r\n", (char *)MSG_MOUSE_INPUT, data->x, data->y, data->button);
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	781b      	ldrb	r3, [r3, #0]
 8000d68:	461a      	mov	r2, r3
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	785b      	ldrb	r3, [r3, #1]
 8000d6e:	4619      	mov	r1, r3
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	78db      	ldrb	r3, [r3, #3]
 8000d74:	9300      	str	r3, [sp, #0]
 8000d76:	460b      	mov	r3, r1
 8000d78:	4932      	ldr	r1, [pc, #200]	; (8000e44 <USR_MOUSE_ProcessData+0xe8>)
 8000d7a:	4833      	ldr	r0, [pc, #204]	; (8000e48 <USR_MOUSE_ProcessData+0xec>)
 8000d7c:	f01b ffd4 	bl	801cd28 <cogui_printf>

    if (data->x || data->y) {
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	781b      	ldrb	r3, [r3, #0]
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d103      	bne.n	8000d90 <USR_MOUSE_ProcessData+0x34>
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	785b      	ldrb	r3, [r3, #1]
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d02b      	beq.n	8000de8 <USR_MOUSE_ProcessData+0x8c>
        USB_Host_status = USB_HOST_MOUSE_MOVE;
 8000d90:	4b2e      	ldr	r3, [pc, #184]	; (8000e4c <USR_MOUSE_ProcessData+0xf0>)
 8000d92:	2205      	movs	r2, #5
 8000d94:	701a      	strb	r2, [r3, #0]

        if (data->x > 127) {
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	781b      	ldrb	r3, [r3, #0]
 8000d9a:	b25b      	sxtb	r3, r3
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	da09      	bge.n	8000db4 <USR_MOUSE_ProcessData+0x58>
            mouse_event[0] = data->x - 256;
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	781b      	ldrb	r3, [r3, #0]
 8000da4:	b29b      	uxth	r3, r3
 8000da6:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8000daa:	b29b      	uxth	r3, r3
 8000dac:	b21a      	sxth	r2, r3
 8000dae:	4b28      	ldr	r3, [pc, #160]	; (8000e50 <USR_MOUSE_ProcessData+0xf4>)
 8000db0:	801a      	strh	r2, [r3, #0]
 8000db2:	e004      	b.n	8000dbe <USR_MOUSE_ProcessData+0x62>
        }
        else {
            mouse_event[0] = data->x;
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	781b      	ldrb	r3, [r3, #0]
 8000db8:	b21a      	sxth	r2, r3
 8000dba:	4b25      	ldr	r3, [pc, #148]	; (8000e50 <USR_MOUSE_ProcessData+0xf4>)
 8000dbc:	801a      	strh	r2, [r3, #0]
        }
        if (data->y > 127) {
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	785b      	ldrb	r3, [r3, #1]
 8000dc2:	b25b      	sxtb	r3, r3
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	da09      	bge.n	8000ddc <USR_MOUSE_ProcessData+0x80>
            mouse_event[1] = data->y - 256;
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	785b      	ldrb	r3, [r3, #1]
 8000dcc:	b29b      	uxth	r3, r3
 8000dce:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8000dd2:	b29b      	uxth	r3, r3
 8000dd4:	b21a      	sxth	r2, r3
 8000dd6:	4b1e      	ldr	r3, [pc, #120]	; (8000e50 <USR_MOUSE_ProcessData+0xf4>)
 8000dd8:	805a      	strh	r2, [r3, #2]
        if (data->y > 127) {
 8000dda:	e01d      	b.n	8000e18 <USR_MOUSE_ProcessData+0xbc>
        }
        else {
            mouse_event[1] = data->y;
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	785b      	ldrb	r3, [r3, #1]
 8000de0:	b21a      	sxth	r2, r3
 8000de2:	4b1b      	ldr	r3, [pc, #108]	; (8000e50 <USR_MOUSE_ProcessData+0xf4>)
 8000de4:	805a      	strh	r2, [r3, #2]
        if (data->y > 127) {
 8000de6:	e017      	b.n	8000e18 <USR_MOUSE_ProcessData+0xbc>
        }
    }
    else {
        mouse_event[0] = 0;
 8000de8:	4b19      	ldr	r3, [pc, #100]	; (8000e50 <USR_MOUSE_ProcessData+0xf4>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	801a      	strh	r2, [r3, #0]
        mouse_event[1] = 0;
 8000dee:	4b18      	ldr	r3, [pc, #96]	; (8000e50 <USR_MOUSE_ProcessData+0xf4>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	805a      	strh	r2, [r3, #2]

        switch (data->button) {
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	78db      	ldrb	r3, [r3, #3]
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d004      	beq.n	8000e06 <USR_MOUSE_ProcessData+0xaa>
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	db0a      	blt.n	8000e16 <USR_MOUSE_ProcessData+0xba>
 8000e00:	2b04      	cmp	r3, #4
 8000e02:	dc08      	bgt.n	8000e16 <USR_MOUSE_ProcessData+0xba>
 8000e04:	e003      	b.n	8000e0e <USR_MOUSE_ProcessData+0xb2>
            case 0:
                USB_Host_status = USB_HOST_MOUSE_BUTTON_RELEASED;
 8000e06:	4b11      	ldr	r3, [pc, #68]	; (8000e4c <USR_MOUSE_ProcessData+0xf0>)
 8000e08:	2207      	movs	r2, #7
 8000e0a:	701a      	strb	r2, [r3, #0]
                break;
 8000e0c:	e004      	b.n	8000e18 <USR_MOUSE_ProcessData+0xbc>

            case 1:
            case 2:
            case 3:
            case 4:
                USB_Host_status = USB_HOST_MOUSE_BUTTON_PRESSED;
 8000e0e:	4b0f      	ldr	r3, [pc, #60]	; (8000e4c <USR_MOUSE_ProcessData+0xf0>)
 8000e10:	2206      	movs	r2, #6
 8000e12:	701a      	strb	r2, [r3, #0]
                break;
 8000e14:	e000      	b.n	8000e18 <USR_MOUSE_ProcessData+0xbc>

            default:
                break;
 8000e16:	bf00      	nop
        }
    }

    mouse_event[2] = data->button;
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	78db      	ldrb	r3, [r3, #3]
 8000e1c:	b21a      	sxth	r2, r3
 8000e1e:	4b0c      	ldr	r3, [pc, #48]	; (8000e50 <USR_MOUSE_ProcessData+0xf4>)
 8000e20:	809a      	strh	r2, [r3, #4]

    update_cursor(mouse_event[0], mouse_event[1], mouse_event[2]);
 8000e22:	4b0b      	ldr	r3, [pc, #44]	; (8000e50 <USR_MOUSE_ProcessData+0xf4>)
 8000e24:	f9b3 0000 	ldrsh.w	r0, [r3]
 8000e28:	4b09      	ldr	r3, [pc, #36]	; (8000e50 <USR_MOUSE_ProcessData+0xf4>)
 8000e2a:	f9b3 1002 	ldrsh.w	r1, [r3, #2]
 8000e2e:	4b08      	ldr	r3, [pc, #32]	; (8000e50 <USR_MOUSE_ProcessData+0xf4>)
 8000e30:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000e34:	b2db      	uxtb	r3, r3
 8000e36:	461a      	mov	r2, r3
 8000e38:	f7ff ff51 	bl	8000cde <update_cursor>
}
 8000e3c:	bf00      	nop
 8000e3e:	3708      	adds	r7, #8
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	0801fc30 	.word	0x0801fc30
 8000e48:	0801fd68 	.word	0x0801fd68
 8000e4c:	20002db4 	.word	0x20002db4
 8000e50:	20002db8 	.word	0x20002db8

08000e54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e54:	b480      	push	{r7}
 8000e56:	b083      	sub	sp, #12
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	6039      	str	r1, [r7, #0]
 8000e5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	db0a      	blt.n	8000e7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e68:	683b      	ldr	r3, [r7, #0]
 8000e6a:	b2da      	uxtb	r2, r3
 8000e6c:	490c      	ldr	r1, [pc, #48]	; (8000ea0 <__NVIC_SetPriority+0x4c>)
 8000e6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e72:	0112      	lsls	r2, r2, #4
 8000e74:	b2d2      	uxtb	r2, r2
 8000e76:	440b      	add	r3, r1
 8000e78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e7c:	e00a      	b.n	8000e94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	b2da      	uxtb	r2, r3
 8000e82:	4908      	ldr	r1, [pc, #32]	; (8000ea4 <__NVIC_SetPriority+0x50>)
 8000e84:	79fb      	ldrb	r3, [r7, #7]
 8000e86:	f003 030f 	and.w	r3, r3, #15
 8000e8a:	3b04      	subs	r3, #4
 8000e8c:	0112      	lsls	r2, r2, #4
 8000e8e:	b2d2      	uxtb	r2, r2
 8000e90:	440b      	add	r3, r1
 8000e92:	761a      	strb	r2, [r3, #24]
}
 8000e94:	bf00      	nop
 8000e96:	370c      	adds	r7, #12
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9e:	4770      	bx	lr
 8000ea0:	e000e100 	.word	0xe000e100
 8000ea4:	e000ed00 	.word	0xe000ed00

08000ea8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b082      	sub	sp, #8
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	3b01      	subs	r3, #1
 8000eb4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000eb8:	d301      	bcc.n	8000ebe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000eba:	2301      	movs	r3, #1
 8000ebc:	e00f      	b.n	8000ede <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ebe:	4a0a      	ldr	r2, [pc, #40]	; (8000ee8 <SysTick_Config+0x40>)
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	3b01      	subs	r3, #1
 8000ec4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ec6:	210f      	movs	r1, #15
 8000ec8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ecc:	f7ff ffc2 	bl	8000e54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ed0:	4b05      	ldr	r3, [pc, #20]	; (8000ee8 <SysTick_Config+0x40>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ed6:	4b04      	ldr	r3, [pc, #16]	; (8000ee8 <SysTick_Config+0x40>)
 8000ed8:	2207      	movs	r2, #7
 8000eda:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000edc:	2300      	movs	r3, #0
}
 8000ede:	4618      	mov	r0, r3
 8000ee0:	3708      	adds	r7, #8
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	e000e010 	.word	0xe000e010

08000eec <UART_Init>:
 * @param[out] None
 * @retval     None
 *******************************************************************************
 */
void UART_Init(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b086      	sub	sp, #24
 8000ef0:	af00      	add	r7, sp, #0
	USART_InitTypeDef USART_InitStructure;
    GPIO_InitTypeDef   GPIO_InitStructure;
	
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA,  ENABLE);  
 8000ef2:	2101      	movs	r1, #1
 8000ef4:	2001      	movs	r0, #1
 8000ef6:	f007 fd2f 	bl	8008958 <RCC_AHB1PeriphClockCmd>
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);
 8000efa:	2101      	movs	r1, #1
 8000efc:	2010      	movs	r0, #16
 8000efe:	f007 fdab 	bl	8008a58 <RCC_APB2PeriphClockCmd>
	
	GPIO_PinAFConfig(GPIOA, GPIO_PinSource9,  GPIO_AF_USART1);
 8000f02:	2207      	movs	r2, #7
 8000f04:	2109      	movs	r1, #9
 8000f06:	4823      	ldr	r0, [pc, #140]	; (8000f94 <UART_Init+0xa8>)
 8000f08:	f005 fcc5 	bl	8006896 <GPIO_PinAFConfig>
    GPIO_PinAFConfig(GPIOA, GPIO_PinSource10, GPIO_AF_USART1);
 8000f0c:	2207      	movs	r2, #7
 8000f0e:	210a      	movs	r1, #10
 8000f10:	4820      	ldr	r0, [pc, #128]	; (8000f94 <UART_Init+0xa8>)
 8000f12:	f005 fcc0 	bl	8006896 <GPIO_PinAFConfig>
	
	GPIO_StructInit(&GPIO_InitStructure);
 8000f16:	463b      	mov	r3, r7
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f005 fbdb 	bl	80066d4 <GPIO_StructInit>
    GPIO_InitStructure.GPIO_Pin 	= GPIO_Pin_9;
 8000f1e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f22:	603b      	str	r3, [r7, #0]
    GPIO_InitStructure.GPIO_Mode 	= GPIO_Mode_AF;
 8000f24:	2302      	movs	r3, #2
 8000f26:	713b      	strb	r3, [r7, #4]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	71bb      	strb	r3, [r7, #6]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8000f2c:	2302      	movs	r3, #2
 8000f2e:	717b      	strb	r3, [r7, #5]
    GPIO_Init(GPIOA, &GPIO_InitStructure);
 8000f30:	463b      	mov	r3, r7
 8000f32:	4619      	mov	r1, r3
 8000f34:	4817      	ldr	r0, [pc, #92]	; (8000f94 <UART_Init+0xa8>)
 8000f36:	f005 fb3f 	bl	80065b8 <GPIO_Init>

    GPIO_InitStructure.GPIO_Pin  = GPIO_Pin_10;
 8000f3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f3e:	603b      	str	r3, [r7, #0]
  	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8000f40:	2302      	movs	r3, #2
 8000f42:	713b      	strb	r3, [r7, #4]
    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 8000f44:	2301      	movs	r3, #1
 8000f46:	71fb      	strb	r3, [r7, #7]
    GPIO_Init(GPIOA, &GPIO_InitStructure);
 8000f48:	463b      	mov	r3, r7
 8000f4a:	4619      	mov	r1, r3
 8000f4c:	4811      	ldr	r0, [pc, #68]	; (8000f94 <UART_Init+0xa8>)
 8000f4e:	f005 fb33 	bl	80065b8 <GPIO_Init>
		
	USART_StructInit(&USART_InitStructure);
 8000f52:	f107 0308 	add.w	r3, r7, #8
 8000f56:	4618      	mov	r0, r3
 8000f58:	f00c fc26 	bl	800d7a8 <USART_StructInit>
	USART_InitStructure.USART_BaudRate            = 9600;
 8000f5c:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8000f60:	60bb      	str	r3, [r7, #8]
	USART_InitStructure.USART_WordLength          = USART_WordLength_8b;
 8000f62:	2300      	movs	r3, #0
 8000f64:	81bb      	strh	r3, [r7, #12]
	USART_InitStructure.USART_StopBits            = USART_StopBits_1;
 8000f66:	2300      	movs	r3, #0
 8000f68:	81fb      	strh	r3, [r7, #14]
	USART_InitStructure.USART_Parity              = USART_Parity_No ;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	823b      	strh	r3, [r7, #16]
	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	82bb      	strh	r3, [r7, #20]
	USART_InitStructure.USART_Mode                = USART_Mode_Rx | USART_Mode_Tx;
 8000f72:	230c      	movs	r3, #12
 8000f74:	827b      	strh	r3, [r7, #18]
	USART_Init(USART1, &USART_InitStructure);
 8000f76:	f107 0308 	add.w	r3, r7, #8
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	4806      	ldr	r0, [pc, #24]	; (8000f98 <UART_Init+0xac>)
 8000f7e:	f00c fb59 	bl	800d634 <USART_Init>
			
	USART_Cmd(USART1, ENABLE);
 8000f82:	2101      	movs	r1, #1
 8000f84:	4804      	ldr	r0, [pc, #16]	; (8000f98 <UART_Init+0xac>)
 8000f86:	f00c fc6d 	bl	800d864 <USART_Cmd>
}		
 8000f8a:	bf00      	nop
 8000f8c:	3718      	adds	r7, #24
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	40020000 	.word	0x40020000
 8000f98:	40011000 	.word	0x40011000

08000f9c <LED_Init>:
 * @param[out] None
 * @retval     None
 *******************************************************************************
 */
void LED_Init(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	af00      	add	r7, sp, #0
    STM_EVAL_LEDInit(LED3);
 8000fa0:	2000      	movs	r0, #0
 8000fa2:	f00d f80f 	bl	800dfc4 <STM_EVAL_LEDInit>
    STM_EVAL_LEDInit(LED4);
 8000fa6:	2001      	movs	r0, #1
 8000fa8:	f00d f80c 	bl	800dfc4 <STM_EVAL_LEDInit>
}
 8000fac:	bf00      	nop
 8000fae:	bd80      	pop	{r7, pc}

08000fb0 <Delay_Init>:

void Delay_Init(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b084      	sub	sp, #16
 8000fb4:	af00      	add	r7, sp, #0
    RCC_ClocksTypeDef RCC_Clocks;
    RCC_GetClocksFreq(&RCC_Clocks);    /* get system clock */
 8000fb6:	463b      	mov	r3, r7
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f007 fb1d 	bl	80085f8 <RCC_GetClocksFreq>
    /* while loop takes 4 cycles */
    /* Enable SysTick for Delay function */
    if (SysTick_Config(SystemCoreClock / 1000)) //1ms
 8000fbe:	4b08      	ldr	r3, [pc, #32]	; (8000fe0 <Delay_Init+0x30>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	4a08      	ldr	r2, [pc, #32]	; (8000fe4 <Delay_Init+0x34>)
 8000fc4:	fba2 2303 	umull	r2, r3, r2, r3
 8000fc8:	099b      	lsrs	r3, r3, #6
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f7ff ff6c 	bl	8000ea8 <SysTick_Config>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d000      	beq.n	8000fd8 <Delay_Init+0x28>
    { 
        /* Capture error */ 
        while (1);
 8000fd6:	e7fe      	b.n	8000fd6 <Delay_Init+0x26>
    }
}
 8000fd8:	bf00      	nop
 8000fda:	3710      	adds	r7, #16
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	20000070 	.word	0x20000070
 8000fe4:	10624dd3 	.word	0x10624dd3

08000fe8 <LCD_Config>:
 * @param[out] None
 * @retval     None
 *******************************************************************************
 */
void LCD_Config(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b0a2      	sub	sp, #136	; 0x88
 8000fec:	af00      	add	r7, sp, #0
    LTDC_InitTypeDef               LTDC_InitStruct;
    LTDC_Layer_InitTypeDef         LTDC_Layer_InitStruct;
    GPIO_InitTypeDef GPIO_InitStructure;
    
    RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, ENABLE);
 8000fee:	2101      	movs	r1, #1
 8000ff0:	2008      	movs	r0, #8
 8000ff2:	f007 fcb1 	bl	8008958 <RCC_AHB1PeriphClockCmd>
    
    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_13;
 8000ff6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ffa:	607b      	str	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8000ffc:	2302      	movs	r3, #2
 8000ffe:	727b      	strb	r3, [r7, #9]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8001000:	2301      	movs	r3, #1
 8001002:	723b      	strb	r3, [r7, #8]
    GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8001004:	2300      	movs	r3, #0
 8001006:	72bb      	strb	r3, [r7, #10]
    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8001008:	2300      	movs	r3, #0
 800100a:	72fb      	strb	r3, [r7, #11]
    GPIO_Init(GPIOD, &GPIO_InitStructure);
 800100c:	1d3b      	adds	r3, r7, #4
 800100e:	4619      	mov	r1, r3
 8001010:	4848      	ldr	r0, [pc, #288]	; (8001134 <LCD_Config+0x14c>)
 8001012:	f005 fad1 	bl	80065b8 <GPIO_Init>
    
    /* Configure the LCD Control pins ------------------------------------------*/
    LCD_CtrlLinesConfig();
 8001016:	f011 fa1d 	bl	8012454 <LCD_CtrlLinesConfig>
    LCD_ChipSelect(DISABLE);
 800101a:	2000      	movs	r0, #0
 800101c:	f00f fbd6 	bl	80107cc <LCD_ChipSelect>
    LCD_ChipSelect(ENABLE);
 8001020:	2001      	movs	r0, #1
 8001022:	f00f fbd3 	bl	80107cc <LCD_ChipSelect>

    /* Configure the LCD_SPI interface -----------------------------------------*/
    LCD_SPIConfig(); 
 8001026:	f011 fa53 	bl	80124d0 <LCD_SPIConfig>
    
    /* Power on the LCD --------------------------------------------------------*/
    LCD_PowerOn();
 800102a:	f011 f8bd 	bl	80121a8 <LCD_PowerOn>
        
    /* Enable the LTDC Clock */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_LTDC, ENABLE);
 800102e:	2101      	movs	r1, #1
 8001030:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8001034:	f007 fd10 	bl	8008a58 <RCC_APB2PeriphClockCmd>
    
    /* Enable the DMA2D Clock */
    RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA2D, ENABLE); 
 8001038:	2101      	movs	r1, #1
 800103a:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 800103e:	f007 fc8b 	bl	8008958 <RCC_AHB1PeriphClockCmd>
    
    /* Configure the LCD Control pins */
    LCD_AF_GPIOConfig();  
 8001042:	f000 f87d 	bl	8001140 <LCD_AF_GPIOConfig>
    
    /* Configure the FMC Parallel interface : SDRAM is used as Frame Buffer for LCD */
    SDRAM_Init();
 8001046:	f011 fba3 	bl	8012790 <SDRAM_Init>
    /* Configure PLLSAI prescalers for LCD */
    /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
    /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAI_N = 192 Mhz */
    /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAI_R = 192/3 = 64 Mhz */
    /* LTDC clock frequency = PLLLCDCLK / RCC_PLLSAIDivR = 64/8 = 8 Mhz */
    RCC_PLLSAIConfig(192, 7, 3);
 800104a:	2203      	movs	r2, #3
 800104c:	2107      	movs	r1, #7
 800104e:	20c0      	movs	r0, #192	; 0xc0
 8001050:	f007 f9d6 	bl	8008400 <RCC_PLLSAIConfig>
    RCC_LTDCCLKDivConfig(RCC_PLLSAIDivR_Div8);
 8001054:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001058:	f007 fc50 	bl	80088fc <RCC_LTDCCLKDivConfig>
    
    /* Enable PLLSAI Clock */
    RCC_PLLSAICmd(ENABLE);
 800105c:	2001      	movs	r0, #1
 800105e:	f007 f9e9 	bl	8008434 <RCC_PLLSAICmd>
    /* Wait for PLLSAI activation */
    while(RCC_GetFlagStatus(RCC_FLAG_PLLSAIRDY) == RESET)
 8001062:	bf00      	nop
 8001064:	203d      	movs	r0, #61	; 0x3d
 8001066:	f007 fe7d 	bl	8008d64 <RCC_GetFlagStatus>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d0f9      	beq.n	8001064 <LCD_Config+0x7c>
    }

/* LTDC Initialization -------------------------------------------------------*/

    /* Initialize the horizontal synchronization polarity as active low*/
    LTDC_InitStruct.LTDC_HSPolarity = LTDC_HSPolarity_AL;     
 8001070:	2300      	movs	r3, #0
 8001072:	64fb      	str	r3, [r7, #76]	; 0x4c
    /* Initialize the vertical synchronization polarity as active low */  
    LTDC_InitStruct.LTDC_VSPolarity = LTDC_VSPolarity_AL;     
 8001074:	2300      	movs	r3, #0
 8001076:	653b      	str	r3, [r7, #80]	; 0x50
    /* Initialize the data enable polarity as active low */ 
    LTDC_InitStruct.LTDC_DEPolarity = LTDC_DEPolarity_AL;     
 8001078:	2300      	movs	r3, #0
 800107a:	657b      	str	r3, [r7, #84]	; 0x54
    /* Initialize the pixel clock polarity as input pixel clock */ 
    LTDC_InitStruct.LTDC_PCPolarity = LTDC_PCPolarity_IPC;
 800107c:	2300      	movs	r3, #0
 800107e:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* Timing configuration */
        /* Configure horizontal synchronization width */     
    LTDC_InitStruct.LTDC_HorizontalSync = 9;
 8001080:	2309      	movs	r3, #9
 8001082:	65fb      	str	r3, [r7, #92]	; 0x5c
    /* Configure vertical synchronization height */
    LTDC_InitStruct.LTDC_VerticalSync = 1;
 8001084:	2301      	movs	r3, #1
 8001086:	663b      	str	r3, [r7, #96]	; 0x60
    /* Configure accumulated horizontal back porch */
    LTDC_InitStruct.LTDC_AccumulatedHBP = 29; 
 8001088:	231d      	movs	r3, #29
 800108a:	667b      	str	r3, [r7, #100]	; 0x64
    /* Configure accumulated vertical back porch */
    LTDC_InitStruct.LTDC_AccumulatedVBP = 3;  
 800108c:	2303      	movs	r3, #3
 800108e:	66bb      	str	r3, [r7, #104]	; 0x68
    /* Configure accumulated active width */  
    LTDC_InitStruct.LTDC_AccumulatedActiveW = 269;
 8001090:	f240 130d 	movw	r3, #269	; 0x10d
 8001094:	66fb      	str	r3, [r7, #108]	; 0x6c
    /* Configure accumulated active height */
    LTDC_InitStruct.LTDC_AccumulatedActiveH = 323;
 8001096:	f240 1343 	movw	r3, #323	; 0x143
 800109a:	673b      	str	r3, [r7, #112]	; 0x70
    /* Configure total width */
    LTDC_InitStruct.LTDC_TotalWidth = 279; 
 800109c:	f240 1317 	movw	r3, #279	; 0x117
 80010a0:	677b      	str	r3, [r7, #116]	; 0x74
    /* Configure total height */
    LTDC_InitStruct.LTDC_TotalHeigh = 327;
 80010a2:	f240 1347 	movw	r3, #327	; 0x147
 80010a6:	67bb      	str	r3, [r7, #120]	; 0x78
    
    LTDC_Init(&LTDC_InitStruct);
 80010a8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80010ac:	4618      	mov	r0, r3
 80010ae:	f006 f9bd 	bl	800742c <LTDC_Init>
    
    /* Configure R,G,B component values for LCD background color */                   
    LTDC_InitStruct.LTDC_BackgroundRedValue = 0;            
 80010b2:	2300      	movs	r3, #0
 80010b4:	67fb      	str	r3, [r7, #124]	; 0x7c
    LTDC_InitStruct.LTDC_BackgroundGreenValue = 0;          
 80010b6:	2300      	movs	r3, #0
 80010b8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    LTDC_InitStruct.LTDC_BackgroundBlueValue = 0; 
 80010bc:	2300      	movs	r3, #0
 80010be:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                
    LTDC_Init(&LTDC_InitStruct);
 80010c2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80010c6:	4618      	mov	r0, r3
 80010c8:	f006 f9b0 	bl	800742c <LTDC_Init>
    /* In this case all the active display area is used to display a picture then :
        Horizontal start = horizontal synchronization + Horizontal back porch = 30 
        Horizontal stop = Horizontal start + window width -1 = 30 + 240 -1
        Vertical start   = vertical synchronization + vertical back porch     = 4
        Vertical stop   = Vertical start + window height -1  = 4 + 320 -1      */ 
    LTDC_Layer_InitStruct.LTDC_HorizontalStart = 30;
 80010cc:	231e      	movs	r3, #30
 80010ce:	60fb      	str	r3, [r7, #12]
    LTDC_Layer_InitStruct.LTDC_HorizontalStop = (240 + 30 - 1); 
 80010d0:	f240 130d 	movw	r3, #269	; 0x10d
 80010d4:	613b      	str	r3, [r7, #16]
    LTDC_Layer_InitStruct.LTDC_VerticalStart = 4;
 80010d6:	2304      	movs	r3, #4
 80010d8:	617b      	str	r3, [r7, #20]
    LTDC_Layer_InitStruct.LTDC_VerticalStop = (320 + 4 - 1);
 80010da:	f240 1343 	movw	r3, #323	; 0x143
 80010de:	61bb      	str	r3, [r7, #24]
    
    /* Pixel Format configuration*/           
    LTDC_Layer_InitStruct.LTDC_PixelFormat = LTDC_Pixelformat_RGB565;
 80010e0:	2302      	movs	r3, #2
 80010e2:	61fb      	str	r3, [r7, #28]
    
    /* Alpha constant (255 totally opaque) */
    LTDC_Layer_InitStruct.LTDC_ConstantAlpha = 255; 
 80010e4:	23ff      	movs	r3, #255	; 0xff
 80010e6:	623b      	str	r3, [r7, #32]
    
    /* Configure blending factors */       
    LTDC_Layer_InitStruct.LTDC_BlendingFactor_1 = LTDC_BlendingFactor1_CA;    
 80010e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010ec:	637b      	str	r3, [r7, #52]	; 0x34
    LTDC_Layer_InitStruct.LTDC_BlendingFactor_2 = LTDC_BlendingFactor2_CA;  
 80010ee:	2305      	movs	r3, #5
 80010f0:	63bb      	str	r3, [r7, #56]	; 0x38
    
    /* Default Color configuration (configure A,R,G,B component values) */          
    LTDC_Layer_InitStruct.LTDC_DefaultColorBlue = 0;        
 80010f2:	2300      	movs	r3, #0
 80010f4:	627b      	str	r3, [r7, #36]	; 0x24
    LTDC_Layer_InitStruct.LTDC_DefaultColorGreen = 0;       
 80010f6:	2300      	movs	r3, #0
 80010f8:	62bb      	str	r3, [r7, #40]	; 0x28
    LTDC_Layer_InitStruct.LTDC_DefaultColorRed = 0;         
 80010fa:	2300      	movs	r3, #0
 80010fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    LTDC_Layer_InitStruct.LTDC_DefaultColorAlpha = 0;   
 80010fe:	2300      	movs	r3, #0
 8001100:	633b      	str	r3, [r7, #48]	; 0x30
    
    /* Input Address configuration */    
    LTDC_Layer_InitStruct.LTDC_CFBStartAdress = LCD_FRAME_BUFFER + BUFFER_OFFSET;
 8001102:	4b0d      	ldr	r3, [pc, #52]	; (8001138 <LCD_Config+0x150>)
 8001104:	63fb      	str	r3, [r7, #60]	; 0x3c
    /* the length of one line of pixels in bytes + 3 then :
        Line Lenth = Active high width x number of bytes per pixel + 3 
        Active high width         = 240 
        number of bytes per pixel = 2    (pixel_format : RGB565) 
    */
    LTDC_Layer_InitStruct.LTDC_CFBLineLength = ((240 * 2) + 3);
 8001106:	f240 13e3 	movw	r3, #483	; 0x1e3
 800110a:	643b      	str	r3, [r7, #64]	; 0x40
    
    /*  the pitch is the increment from the start of one line of pixels to the 
        start of the next line in bytes, then :
        Pitch = Active high width x number of bytes per pixel     
    */
    LTDC_Layer_InitStruct.LTDC_CFBPitch = (240 * 2);  
 800110c:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001110:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* configure the number of lines */
    LTDC_Layer_InitStruct.LTDC_CFBLineNumber = 320;
 8001112:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001116:	64bb      	str	r3, [r7, #72]	; 0x48
    
    LTDC_LayerInit(LTDC_Layer1, &LTDC_Layer_InitStruct);
 8001118:	f107 030c 	add.w	r3, r7, #12
 800111c:	4619      	mov	r1, r3
 800111e:	4807      	ldr	r0, [pc, #28]	; (800113c <LCD_Config+0x154>)
 8001120:	f006 faee 	bl	8007700 <LTDC_LayerInit>
    
    LTDC_DitherCmd(ENABLE);
 8001124:	2001      	movs	r0, #1
 8001126:	f006 fa6d 	bl	8007604 <LTDC_DitherCmd>
}
 800112a:	bf00      	nop
 800112c:	3788      	adds	r7, #136	; 0x88
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	40020c00 	.word	0x40020c00
 8001138:	d0050000 	.word	0xd0050000
 800113c:	40016884 	.word	0x40016884

08001140 <LCD_AF_GPIOConfig>:
 * @param[out] None
 * @retval     None
 *******************************************************************************
 */
void LCD_AF_GPIOConfig(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b082      	sub	sp, #8
 8001144:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct;
    
    /* Enable GPIOI, GPIOJ, GPIOG, GPIOF, GPIOH AHB Clocks */
    RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA | RCC_AHB1Periph_GPIOB | \
 8001146:	2101      	movs	r1, #1
 8001148:	206f      	movs	r0, #111	; 0x6f
 800114a:	f007 fc05 	bl	8008958 <RCC_AHB1PeriphClockCmd>
            -----------------------------------------------------

    */

    /* GPIOA configuration */
    GPIO_PinAFConfig(GPIOA, GPIO_PinSource3, GPIO_AF_LTDC);
 800114e:	220e      	movs	r2, #14
 8001150:	2103      	movs	r1, #3
 8001152:	4850      	ldr	r0, [pc, #320]	; (8001294 <LCD_AF_GPIOConfig+0x154>)
 8001154:	f005 fb9f 	bl	8006896 <GPIO_PinAFConfig>
    GPIO_PinAFConfig(GPIOA, GPIO_PinSource4, GPIO_AF_LTDC);
 8001158:	220e      	movs	r2, #14
 800115a:	2104      	movs	r1, #4
 800115c:	484d      	ldr	r0, [pc, #308]	; (8001294 <LCD_AF_GPIOConfig+0x154>)
 800115e:	f005 fb9a 	bl	8006896 <GPIO_PinAFConfig>
    GPIO_PinAFConfig(GPIOA, GPIO_PinSource6, GPIO_AF_LTDC);
 8001162:	220e      	movs	r2, #14
 8001164:	2106      	movs	r1, #6
 8001166:	484b      	ldr	r0, [pc, #300]	; (8001294 <LCD_AF_GPIOConfig+0x154>)
 8001168:	f005 fb95 	bl	8006896 <GPIO_PinAFConfig>
    GPIO_PinAFConfig(GPIOA, GPIO_PinSource11, GPIO_AF_LTDC);
 800116c:	220e      	movs	r2, #14
 800116e:	210b      	movs	r1, #11
 8001170:	4848      	ldr	r0, [pc, #288]	; (8001294 <LCD_AF_GPIOConfig+0x154>)
 8001172:	f005 fb90 	bl	8006896 <GPIO_PinAFConfig>
    GPIO_PinAFConfig(GPIOA, GPIO_PinSource12, GPIO_AF_LTDC);
 8001176:	220e      	movs	r2, #14
 8001178:	210c      	movs	r1, #12
 800117a:	4846      	ldr	r0, [pc, #280]	; (8001294 <LCD_AF_GPIOConfig+0x154>)
 800117c:	f005 fb8b 	bl	8006896 <GPIO_PinAFConfig>

    GPIO_InitStruct.GPIO_Pin = GPIO_Pin_3 | GPIO_Pin_4 | GPIO_Pin_6 | \
 8001180:	f641 0358 	movw	r3, #6232	; 0x1858
 8001184:	603b      	str	r3, [r7, #0]
                                GPIO_Pin_11 | GPIO_Pin_12;
                                
    GPIO_InitStruct.GPIO_Speed = GPIO_Speed_50MHz;
 8001186:	2302      	movs	r3, #2
 8001188:	717b      	strb	r3, [r7, #5]
    GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AF;
 800118a:	2302      	movs	r3, #2
 800118c:	713b      	strb	r3, [r7, #4]
    GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
 800118e:	2300      	movs	r3, #0
 8001190:	71bb      	strb	r3, [r7, #6]
    GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8001192:	2300      	movs	r3, #0
 8001194:	71fb      	strb	r3, [r7, #7]
    GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001196:	463b      	mov	r3, r7
 8001198:	4619      	mov	r1, r3
 800119a:	483e      	ldr	r0, [pc, #248]	; (8001294 <LCD_AF_GPIOConfig+0x154>)
 800119c:	f005 fa0c 	bl	80065b8 <GPIO_Init>
    
    /* GPIOB configuration */  
    GPIO_PinAFConfig(GPIOB, GPIO_PinSource0, GPIO_AF_LTDC);
 80011a0:	220e      	movs	r2, #14
 80011a2:	2100      	movs	r1, #0
 80011a4:	483c      	ldr	r0, [pc, #240]	; (8001298 <LCD_AF_GPIOConfig+0x158>)
 80011a6:	f005 fb76 	bl	8006896 <GPIO_PinAFConfig>
    GPIO_PinAFConfig(GPIOB, GPIO_PinSource1, GPIO_AF_LTDC);
 80011aa:	220e      	movs	r2, #14
 80011ac:	2101      	movs	r1, #1
 80011ae:	483a      	ldr	r0, [pc, #232]	; (8001298 <LCD_AF_GPIOConfig+0x158>)
 80011b0:	f005 fb71 	bl	8006896 <GPIO_PinAFConfig>
    GPIO_PinAFConfig(GPIOB, GPIO_PinSource8, GPIO_AF_LTDC);
 80011b4:	220e      	movs	r2, #14
 80011b6:	2108      	movs	r1, #8
 80011b8:	4837      	ldr	r0, [pc, #220]	; (8001298 <LCD_AF_GPIOConfig+0x158>)
 80011ba:	f005 fb6c 	bl	8006896 <GPIO_PinAFConfig>
    GPIO_PinAFConfig(GPIOB, GPIO_PinSource9, GPIO_AF_LTDC);
 80011be:	220e      	movs	r2, #14
 80011c0:	2109      	movs	r1, #9
 80011c2:	4835      	ldr	r0, [pc, #212]	; (8001298 <LCD_AF_GPIOConfig+0x158>)
 80011c4:	f005 fb67 	bl	8006896 <GPIO_PinAFConfig>
    GPIO_PinAFConfig(GPIOB, GPIO_PinSource10, GPIO_AF_LTDC);
 80011c8:	220e      	movs	r2, #14
 80011ca:	210a      	movs	r1, #10
 80011cc:	4832      	ldr	r0, [pc, #200]	; (8001298 <LCD_AF_GPIOConfig+0x158>)
 80011ce:	f005 fb62 	bl	8006896 <GPIO_PinAFConfig>
    GPIO_PinAFConfig(GPIOB, GPIO_PinSource11, GPIO_AF_LTDC);
 80011d2:	220e      	movs	r2, #14
 80011d4:	210b      	movs	r1, #11
 80011d6:	4830      	ldr	r0, [pc, #192]	; (8001298 <LCD_AF_GPIOConfig+0x158>)
 80011d8:	f005 fb5d 	bl	8006896 <GPIO_PinAFConfig>

    GPIO_InitStruct.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_8 | \
 80011dc:	f640 7303 	movw	r3, #3843	; 0xf03
 80011e0:	603b      	str	r3, [r7, #0]
                                GPIO_Pin_9 | GPIO_Pin_10 | GPIO_Pin_11;
    
    GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011e2:	463b      	mov	r3, r7
 80011e4:	4619      	mov	r1, r3
 80011e6:	482c      	ldr	r0, [pc, #176]	; (8001298 <LCD_AF_GPIOConfig+0x158>)
 80011e8:	f005 f9e6 	bl	80065b8 <GPIO_Init>

    /* GPIOC configuration */
    GPIO_PinAFConfig(GPIOC, GPIO_PinSource6, GPIO_AF_LTDC);
 80011ec:	220e      	movs	r2, #14
 80011ee:	2106      	movs	r1, #6
 80011f0:	482a      	ldr	r0, [pc, #168]	; (800129c <LCD_AF_GPIOConfig+0x15c>)
 80011f2:	f005 fb50 	bl	8006896 <GPIO_PinAFConfig>
    GPIO_PinAFConfig(GPIOC, GPIO_PinSource7, GPIO_AF_LTDC);
 80011f6:	220e      	movs	r2, #14
 80011f8:	2107      	movs	r1, #7
 80011fa:	4828      	ldr	r0, [pc, #160]	; (800129c <LCD_AF_GPIOConfig+0x15c>)
 80011fc:	f005 fb4b 	bl	8006896 <GPIO_PinAFConfig>
    //  GPIO_PinAFConfig(GPIOC, GPIO_PinSource10, GPIO_AF_LTDC);
    
    GPIO_InitStruct.GPIO_Pin = GPIO_Pin_6 | GPIO_Pin_7;// | GPIO_Pin_10;
 8001200:	23c0      	movs	r3, #192	; 0xc0
 8001202:	603b      	str	r3, [r7, #0]
                                
    GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001204:	463b      	mov	r3, r7
 8001206:	4619      	mov	r1, r3
 8001208:	4824      	ldr	r0, [pc, #144]	; (800129c <LCD_AF_GPIOConfig+0x15c>)
 800120a:	f005 f9d5 	bl	80065b8 <GPIO_Init>

    /* GPIOD configuration */
    GPIO_PinAFConfig(GPIOD, GPIO_PinSource3, GPIO_AF_LTDC);
 800120e:	220e      	movs	r2, #14
 8001210:	2103      	movs	r1, #3
 8001212:	4823      	ldr	r0, [pc, #140]	; (80012a0 <LCD_AF_GPIOConfig+0x160>)
 8001214:	f005 fb3f 	bl	8006896 <GPIO_PinAFConfig>
    GPIO_PinAFConfig(GPIOD, GPIO_PinSource6, GPIO_AF_LTDC);
 8001218:	220e      	movs	r2, #14
 800121a:	2106      	movs	r1, #6
 800121c:	4820      	ldr	r0, [pc, #128]	; (80012a0 <LCD_AF_GPIOConfig+0x160>)
 800121e:	f005 fb3a 	bl	8006896 <GPIO_PinAFConfig>
    
    GPIO_InitStruct.GPIO_Pin = GPIO_Pin_3 | GPIO_Pin_6;
 8001222:	2348      	movs	r3, #72	; 0x48
 8001224:	603b      	str	r3, [r7, #0]
                                
    GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001226:	463b      	mov	r3, r7
 8001228:	4619      	mov	r1, r3
 800122a:	481d      	ldr	r0, [pc, #116]	; (80012a0 <LCD_AF_GPIOConfig+0x160>)
 800122c:	f005 f9c4 	bl	80065b8 <GPIO_Init>
    
    /* GPIOF configuration */
    GPIO_PinAFConfig(GPIOF, GPIO_PinSource10, GPIO_AF_LTDC);
 8001230:	220e      	movs	r2, #14
 8001232:	210a      	movs	r1, #10
 8001234:	481b      	ldr	r0, [pc, #108]	; (80012a4 <LCD_AF_GPIOConfig+0x164>)
 8001236:	f005 fb2e 	bl	8006896 <GPIO_PinAFConfig>
    
    GPIO_InitStruct.GPIO_Pin = GPIO_Pin_10;
 800123a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800123e:	603b      	str	r3, [r7, #0]
                                
    GPIO_Init(GPIOF, &GPIO_InitStruct);     
 8001240:	463b      	mov	r3, r7
 8001242:	4619      	mov	r1, r3
 8001244:	4817      	ldr	r0, [pc, #92]	; (80012a4 <LCD_AF_GPIOConfig+0x164>)
 8001246:	f005 f9b7 	bl	80065b8 <GPIO_Init>

    /* GPIOG configuration */  
    GPIO_PinAFConfig(GPIOG, GPIO_PinSource6, GPIO_AF_LTDC);
 800124a:	220e      	movs	r2, #14
 800124c:	2106      	movs	r1, #6
 800124e:	4816      	ldr	r0, [pc, #88]	; (80012a8 <LCD_AF_GPIOConfig+0x168>)
 8001250:	f005 fb21 	bl	8006896 <GPIO_PinAFConfig>
    GPIO_PinAFConfig(GPIOG, GPIO_PinSource7, GPIO_AF_LTDC);
 8001254:	220e      	movs	r2, #14
 8001256:	2107      	movs	r1, #7
 8001258:	4813      	ldr	r0, [pc, #76]	; (80012a8 <LCD_AF_GPIOConfig+0x168>)
 800125a:	f005 fb1c 	bl	8006896 <GPIO_PinAFConfig>
    GPIO_PinAFConfig(GPIOG, GPIO_PinSource10, GPIO_AF_LTDC);
 800125e:	220e      	movs	r2, #14
 8001260:	210a      	movs	r1, #10
 8001262:	4811      	ldr	r0, [pc, #68]	; (80012a8 <LCD_AF_GPIOConfig+0x168>)
 8001264:	f005 fb17 	bl	8006896 <GPIO_PinAFConfig>
    GPIO_PinAFConfig(GPIOG, GPIO_PinSource11, GPIO_AF_LTDC);
 8001268:	220e      	movs	r2, #14
 800126a:	210b      	movs	r1, #11
 800126c:	480e      	ldr	r0, [pc, #56]	; (80012a8 <LCD_AF_GPIOConfig+0x168>)
 800126e:	f005 fb12 	bl	8006896 <GPIO_PinAFConfig>
    GPIO_PinAFConfig(GPIOG, GPIO_PinSource12, GPIO_AF_LTDC);
 8001272:	220e      	movs	r2, #14
 8001274:	210c      	movs	r1, #12
 8001276:	480c      	ldr	r0, [pc, #48]	; (80012a8 <LCD_AF_GPIOConfig+0x168>)
 8001278:	f005 fb0d 	bl	8006896 <GPIO_PinAFConfig>

    GPIO_InitStruct.GPIO_Pin = GPIO_Pin_6 | GPIO_Pin_7 | GPIO_Pin_10 | \
 800127c:	f44f 53e6 	mov.w	r3, #7360	; 0x1cc0
 8001280:	603b      	str	r3, [r7, #0]
                                GPIO_Pin_11 | GPIO_Pin_12;
    
    GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001282:	463b      	mov	r3, r7
 8001284:	4619      	mov	r1, r3
 8001286:	4808      	ldr	r0, [pc, #32]	; (80012a8 <LCD_AF_GPIOConfig+0x168>)
 8001288:	f005 f996 	bl	80065b8 <GPIO_Init>
}
 800128c:	bf00      	nop
 800128e:	3708      	adds	r7, #8
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}
 8001294:	40020000 	.word	0x40020000
 8001298:	40020400 	.word	0x40020400
 800129c:	40020800 	.word	0x40020800
 80012a0:	40020c00 	.word	0x40020c00
 80012a4:	40021400 	.word	0x40021400
 80012a8:	40021800 	.word	0x40021800

080012ac <stm_print_char>:
 * @param[out] None
 * @retval     None
 *******************************************************************************
 */
void stm_print_char(const char ch)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b082      	sub	sp, #8
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	4603      	mov	r3, r0
 80012b4:	71fb      	strb	r3, [r7, #7]
    USART1->DR = (uint8_t) ch;
 80012b6:	4b08      	ldr	r3, [pc, #32]	; (80012d8 <stm_print_char+0x2c>)
 80012b8:	79fa      	ldrb	r2, [r7, #7]
 80012ba:	b292      	uxth	r2, r2
 80012bc:	809a      	strh	r2, [r3, #4]

    while(USART_GetFlagStatus(USART1, USART_FLAG_TXE) == RESET);
 80012be:	bf00      	nop
 80012c0:	2180      	movs	r1, #128	; 0x80
 80012c2:	4805      	ldr	r0, [pc, #20]	; (80012d8 <stm_print_char+0x2c>)
 80012c4:	f00c fd3c 	bl	800dd40 <USART_GetFlagStatus>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d0f8      	beq.n	80012c0 <stm_print_char+0x14>
}
 80012ce:	bf00      	nop
 80012d0:	3708      	adds	r7, #8
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	40011000 	.word	0x40011000

080012dc <stm_print_string>:
 * @param[out] None
 * @retval     None
 *******************************************************************************
 */
void stm_print_string(const char *str)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b082      	sub	sp, #8
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
    while (*str) {
 80012e4:	e01c      	b.n	8001320 <stm_print_string+0x44>
        if (*str == '\n') {
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	781b      	ldrb	r3, [r3, #0]
 80012ea:	2b0a      	cmp	r3, #10
 80012ec:	d106      	bne.n	80012fc <stm_print_string+0x20>
            stm_print_char('\n');
 80012ee:	200a      	movs	r0, #10
 80012f0:	f7ff ffdc 	bl	80012ac <stm_print_char>
            str++;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	3301      	adds	r3, #1
 80012f8:	607b      	str	r3, [r7, #4]
 80012fa:	e011      	b.n	8001320 <stm_print_string+0x44>
        }
        else if (*str == '\r') {
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	781b      	ldrb	r3, [r3, #0]
 8001300:	2b0d      	cmp	r3, #13
 8001302:	d106      	bne.n	8001312 <stm_print_string+0x36>
            stm_print_char('\r');
 8001304:	200d      	movs	r0, #13
 8001306:	f7ff ffd1 	bl	80012ac <stm_print_char>
            str++;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	3301      	adds	r3, #1
 800130e:	607b      	str	r3, [r7, #4]
 8001310:	e006      	b.n	8001320 <stm_print_string+0x44>
        }
        else {
            stm_print_char(*str++);
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	1c5a      	adds	r2, r3, #1
 8001316:	607a      	str	r2, [r7, #4]
 8001318:	781b      	ldrb	r3, [r3, #0]
 800131a:	4618      	mov	r0, r3
 800131c:	f7ff ffc6 	bl	80012ac <stm_print_char>
    while (*str) {
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	781b      	ldrb	r3, [r3, #0]
 8001324:	2b00      	cmp	r3, #0
 8001326:	d1de      	bne.n	80012e6 <stm_print_string+0xa>
        }
    }
}
 8001328:	bf00      	nop
 800132a:	3708      	adds	r7, #8
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}

08001330 <print_result>:
 * @param[in]  *str     Other message.
 * @param[out] None
 * @retval     None
 *******************************************************************************
 */
void print_result(StatusType r, char *str) {
 8001330:	b580      	push	{r7, lr}
 8001332:	b082      	sub	sp, #8
 8001334:	af00      	add	r7, sp, #0
 8001336:	4603      	mov	r3, r0
 8001338:	6039      	str	r1, [r7, #0]
 800133a:	71fb      	strb	r3, [r7, #7]
    cogui_printf("[%10s] %-40s => ", "User", str);
 800133c:	683a      	ldr	r2, [r7, #0]
 800133e:	490f      	ldr	r1, [pc, #60]	; (800137c <print_result+0x4c>)
 8001340:	480f      	ldr	r0, [pc, #60]	; (8001380 <print_result+0x50>)
 8001342:	f01b fcf1 	bl	801cd28 <cogui_printf>
	switch (r) {
 8001346:	79fb      	ldrb	r3, [r7, #7]
 8001348:	2b17      	cmp	r3, #23
 800134a:	d007      	beq.n	800135c <print_result+0x2c>
 800134c:	2b18      	cmp	r3, #24
 800134e:	d009      	beq.n	8001364 <print_result+0x34>
 8001350:	2b16      	cmp	r3, #22
 8001352:	d10b      	bne.n	800136c <print_result+0x3c>
		case GUI_E_ERROR:
			cogui_printf(RED_BOLD"GUI_E_ERROR\r\n"ARESET);
 8001354:	480b      	ldr	r0, [pc, #44]	; (8001384 <print_result+0x54>)
 8001356:	f01b fce7 	bl	801cd28 <cogui_printf>
			break;
 800135a:	e00b      	b.n	8001374 <print_result+0x44>
		
		case GUI_E_OK:
			cogui_printf(GRN_BOLD"GUI_E_OK\r\n"ARESET);
 800135c:	480a      	ldr	r0, [pc, #40]	; (8001388 <print_result+0x58>)
 800135e:	f01b fce3 	bl	801cd28 <cogui_printf>
			break;
 8001362:	e007      	b.n	8001374 <print_result+0x44>
        
        case GUI_E_APP_NULL:
			cogui_printf(RED_BOLD"GUI_E_APP_NULL\r\n"ARESET);
 8001364:	4809      	ldr	r0, [pc, #36]	; (800138c <print_result+0x5c>)
 8001366:	f01b fcdf 	bl	801cd28 <cogui_printf>
			break;
 800136a:	e003      	b.n	8001374 <print_result+0x44>

        default:
            cogui_printf(MAN_BOLD"None\r\n"ARESET);
 800136c:	4808      	ldr	r0, [pc, #32]	; (8001390 <print_result+0x60>)
 800136e:	f01b fcdb 	bl	801cd28 <cogui_printf>
            break;
 8001372:	bf00      	nop
	}	
}
 8001374:	bf00      	nop
 8001376:	3708      	adds	r7, #8
 8001378:	46bd      	mov	sp, r7
 800137a:	bd80      	pop	{r7, pc}
 800137c:	0801fd84 	.word	0x0801fd84
 8001380:	0801fd8c 	.word	0x0801fd8c
 8001384:	0801fda0 	.word	0x0801fda0
 8001388:	0801fdbc 	.word	0x0801fdbc
 800138c:	0801fdd4 	.word	0x0801fdd4
 8001390:	0801fdf4 	.word	0x0801fdf4

08001394 <print_task_list>:
 * @param[out] None
 * @retval     None
 *******************************************************************************
 */
void print_task_list(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b082      	sub	sp, #8
 8001398:	af00      	add	r7, sp, #0
	extern OSTCB TCBTbl[CFG_MAX_USER_TASKS+SYS_TASK_NUM];
	P_OSTCB 	 ptcb;
	int i;
    
	ptcb = &TCBTbl[0];
 800139a:	4b1f      	ldr	r3, [pc, #124]	; (8001418 <print_task_list+0x84>)
 800139c:	607b      	str	r3, [r7, #4]
	for ( i = 0; i < (CFG_MAX_USER_TASKS+SYS_TASK_NUM-1); i++ ) {
 800139e:	2300      	movs	r3, #0
 80013a0:	603b      	str	r3, [r7, #0]
 80013a2:	e032      	b.n	800140a <print_task_list+0x76>
		cogui_printf("Task %2d: state =>", ptcb->taskID);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	799b      	ldrb	r3, [r3, #6]
 80013a8:	4619      	mov	r1, r3
 80013aa:	481c      	ldr	r0, [pc, #112]	; (800141c <print_task_list+0x88>)
 80013ac:	f01b fcbc 	bl	801cd28 <cogui_printf>
		switch (ptcb->state) {
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	795b      	ldrb	r3, [r3, #5]
 80013b4:	2b03      	cmp	r3, #3
 80013b6:	d81b      	bhi.n	80013f0 <print_task_list+0x5c>
 80013b8:	a201      	add	r2, pc, #4	; (adr r2, 80013c0 <print_task_list+0x2c>)
 80013ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013be:	bf00      	nop
 80013c0:	080013d1 	.word	0x080013d1
 80013c4:	080013d9 	.word	0x080013d9
 80013c8:	080013e1 	.word	0x080013e1
 80013cc:	080013e9 	.word	0x080013e9
			case TASK_READY:
				cogui_printf(GRN_BOLD" TASK_READY  "ARESET);
 80013d0:	4813      	ldr	r0, [pc, #76]	; (8001420 <print_task_list+0x8c>)
 80013d2:	f01b fca9 	bl	801cd28 <cogui_printf>
				break;
 80013d6:	e00b      	b.n	80013f0 <print_task_list+0x5c>
		
			case TASK_RUNNING:
				cogui_printf(BLU_BOLD" TASK_RUNNING"ARESET);
 80013d8:	4812      	ldr	r0, [pc, #72]	; (8001424 <print_task_list+0x90>)
 80013da:	f01b fca5 	bl	801cd28 <cogui_printf>
				break;
 80013de:	e007      	b.n	80013f0 <print_task_list+0x5c>
			
			case TASK_WAITING:
				cogui_printf(YEL_BOLD" TASK_WAITING"ARESET);
 80013e0:	4811      	ldr	r0, [pc, #68]	; (8001428 <print_task_list+0x94>)
 80013e2:	f01b fca1 	bl	801cd28 <cogui_printf>
				break;
 80013e6:	e003      	b.n	80013f0 <print_task_list+0x5c>
			
			case TASK_DORMANT:
				cogui_printf(RED_BOLD" TASK_DORMANT"ARESET);
 80013e8:	4810      	ldr	r0, [pc, #64]	; (800142c <print_task_list+0x98>)
 80013ea:	f01b fc9d 	bl	801cd28 <cogui_printf>
				break;
 80013ee:	bf00      	nop
		}
		
		cogui_printf(", priority => %d (0x%p)\r\n", ptcb->prio, ptcb);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	791b      	ldrb	r3, [r3, #4]
 80013f4:	687a      	ldr	r2, [r7, #4]
 80013f6:	4619      	mov	r1, r3
 80013f8:	480d      	ldr	r0, [pc, #52]	; (8001430 <print_task_list+0x9c>)
 80013fa:	f01b fc95 	bl	801cd28 <cogui_printf>
		ptcb++;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	3330      	adds	r3, #48	; 0x30
 8001402:	607b      	str	r3, [r7, #4]
	for ( i = 0; i < (CFG_MAX_USER_TASKS+SYS_TASK_NUM-1); i++ ) {
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	3301      	adds	r3, #1
 8001408:	603b      	str	r3, [r7, #0]
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	2b04      	cmp	r3, #4
 800140e:	ddc9      	ble.n	80013a4 <print_task_list+0x10>
	}
}
 8001410:	bf00      	nop
 8001412:	3708      	adds	r7, #8
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}
 8001418:	2000d598 	.word	0x2000d598
 800141c:	0801fe08 	.word	0x0801fe08
 8001420:	0801fe1c 	.word	0x0801fe1c
 8001424:	0801fe38 	.word	0x0801fe38
 8001428:	0801fe54 	.word	0x0801fe54
 800142c:	0801fe70 	.word	0x0801fe70
 8001430:	0801fe8c 	.word	0x0801fe8c

08001434 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001438:	4b16      	ldr	r3, [pc, #88]	; (8001494 <SystemInit+0x60>)
 800143a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800143e:	4a15      	ldr	r2, [pc, #84]	; (8001494 <SystemInit+0x60>)
 8001440:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001444:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001448:	4b13      	ldr	r3, [pc, #76]	; (8001498 <SystemInit+0x64>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4a12      	ldr	r2, [pc, #72]	; (8001498 <SystemInit+0x64>)
 800144e:	f043 0301 	orr.w	r3, r3, #1
 8001452:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001454:	4b10      	ldr	r3, [pc, #64]	; (8001498 <SystemInit+0x64>)
 8001456:	2200      	movs	r2, #0
 8001458:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800145a:	4b0f      	ldr	r3, [pc, #60]	; (8001498 <SystemInit+0x64>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	4a0e      	ldr	r2, [pc, #56]	; (8001498 <SystemInit+0x64>)
 8001460:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001464:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001468:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800146a:	4b0b      	ldr	r3, [pc, #44]	; (8001498 <SystemInit+0x64>)
 800146c:	4a0b      	ldr	r2, [pc, #44]	; (800149c <SystemInit+0x68>)
 800146e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001470:	4b09      	ldr	r3, [pc, #36]	; (8001498 <SystemInit+0x64>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4a08      	ldr	r2, [pc, #32]	; (8001498 <SystemInit+0x64>)
 8001476:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800147a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800147c:	4b06      	ldr	r3, [pc, #24]	; (8001498 <SystemInit+0x64>)
 800147e:	2200      	movs	r2, #0
 8001480:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSDRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8001482:	f000 f889 	bl	8001598 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001486:	4b03      	ldr	r3, [pc, #12]	; (8001494 <SystemInit+0x60>)
 8001488:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800148c:	609a      	str	r2, [r3, #8]
#endif
}
 800148e:	bf00      	nop
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	e000ed00 	.word	0xe000ed00
 8001498:	40023800 	.word	0x40023800
 800149c:	24003010 	.word	0x24003010

080014a0 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 80014a0:	b480      	push	{r7}
 80014a2:	b087      	sub	sp, #28
 80014a4:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 80014a6:	2300      	movs	r3, #0
 80014a8:	613b      	str	r3, [r7, #16]
 80014aa:	2300      	movs	r3, #0
 80014ac:	617b      	str	r3, [r7, #20]
 80014ae:	2302      	movs	r3, #2
 80014b0:	60fb      	str	r3, [r7, #12]
 80014b2:	2300      	movs	r3, #0
 80014b4:	60bb      	str	r3, [r7, #8]
 80014b6:	2302      	movs	r3, #2
 80014b8:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80014ba:	4b32      	ldr	r3, [pc, #200]	; (8001584 <SystemCoreClockUpdate+0xe4>)
 80014bc:	689b      	ldr	r3, [r3, #8]
 80014be:	f003 030c 	and.w	r3, r3, #12
 80014c2:	613b      	str	r3, [r7, #16]

  switch (tmp)
 80014c4:	693b      	ldr	r3, [r7, #16]
 80014c6:	2b04      	cmp	r3, #4
 80014c8:	d007      	beq.n	80014da <SystemCoreClockUpdate+0x3a>
 80014ca:	2b08      	cmp	r3, #8
 80014cc:	d009      	beq.n	80014e2 <SystemCoreClockUpdate+0x42>
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d13d      	bne.n	800154e <SystemCoreClockUpdate+0xae>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 80014d2:	4b2d      	ldr	r3, [pc, #180]	; (8001588 <SystemCoreClockUpdate+0xe8>)
 80014d4:	4a2d      	ldr	r2, [pc, #180]	; (800158c <SystemCoreClockUpdate+0xec>)
 80014d6:	601a      	str	r2, [r3, #0]
      break;
 80014d8:	e03d      	b.n	8001556 <SystemCoreClockUpdate+0xb6>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 80014da:	4b2b      	ldr	r3, [pc, #172]	; (8001588 <SystemCoreClockUpdate+0xe8>)
 80014dc:	4a2c      	ldr	r2, [pc, #176]	; (8001590 <SystemCoreClockUpdate+0xf0>)
 80014de:	601a      	str	r2, [r3, #0]
      break;
 80014e0:	e039      	b.n	8001556 <SystemCoreClockUpdate+0xb6>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 80014e2:	4b28      	ldr	r3, [pc, #160]	; (8001584 <SystemCoreClockUpdate+0xe4>)
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	0d9b      	lsrs	r3, r3, #22
 80014e8:	f003 0301 	and.w	r3, r3, #1
 80014ec:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80014ee:	4b25      	ldr	r3, [pc, #148]	; (8001584 <SystemCoreClockUpdate+0xe4>)
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80014f6:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 80014f8:	68bb      	ldr	r3, [r7, #8]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d00c      	beq.n	8001518 <SystemCoreClockUpdate+0x78>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80014fe:	4a24      	ldr	r2, [pc, #144]	; (8001590 <SystemCoreClockUpdate+0xf0>)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	fbb2 f3f3 	udiv	r3, r2, r3
 8001506:	4a1f      	ldr	r2, [pc, #124]	; (8001584 <SystemCoreClockUpdate+0xe4>)
 8001508:	6852      	ldr	r2, [r2, #4]
 800150a:	0992      	lsrs	r2, r2, #6
 800150c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001510:	fb02 f303 	mul.w	r3, r2, r3
 8001514:	617b      	str	r3, [r7, #20]
 8001516:	e00b      	b.n	8001530 <SystemCoreClockUpdate+0x90>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8001518:	4a1c      	ldr	r2, [pc, #112]	; (800158c <SystemCoreClockUpdate+0xec>)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001520:	4a18      	ldr	r2, [pc, #96]	; (8001584 <SystemCoreClockUpdate+0xe4>)
 8001522:	6852      	ldr	r2, [r2, #4]
 8001524:	0992      	lsrs	r2, r2, #6
 8001526:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800152a:	fb02 f303 	mul.w	r3, r2, r3
 800152e:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8001530:	4b14      	ldr	r3, [pc, #80]	; (8001584 <SystemCoreClockUpdate+0xe4>)
 8001532:	685b      	ldr	r3, [r3, #4]
 8001534:	0c1b      	lsrs	r3, r3, #16
 8001536:	f003 0303 	and.w	r3, r3, #3
 800153a:	3301      	adds	r3, #1
 800153c:	005b      	lsls	r3, r3, #1
 800153e:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 8001540:	697a      	ldr	r2, [r7, #20]
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	fbb2 f3f3 	udiv	r3, r2, r3
 8001548:	4a0f      	ldr	r2, [pc, #60]	; (8001588 <SystemCoreClockUpdate+0xe8>)
 800154a:	6013      	str	r3, [r2, #0]
      break;
 800154c:	e003      	b.n	8001556 <SystemCoreClockUpdate+0xb6>
    default:
      SystemCoreClock = HSI_VALUE;
 800154e:	4b0e      	ldr	r3, [pc, #56]	; (8001588 <SystemCoreClockUpdate+0xe8>)
 8001550:	4a0e      	ldr	r2, [pc, #56]	; (800158c <SystemCoreClockUpdate+0xec>)
 8001552:	601a      	str	r2, [r3, #0]
      break;
 8001554:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8001556:	4b0b      	ldr	r3, [pc, #44]	; (8001584 <SystemCoreClockUpdate+0xe4>)
 8001558:	689b      	ldr	r3, [r3, #8]
 800155a:	091b      	lsrs	r3, r3, #4
 800155c:	f003 030f 	and.w	r3, r3, #15
 8001560:	4a0c      	ldr	r2, [pc, #48]	; (8001594 <SystemCoreClockUpdate+0xf4>)
 8001562:	5cd3      	ldrb	r3, [r2, r3]
 8001564:	b2db      	uxtb	r3, r3
 8001566:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8001568:	4b07      	ldr	r3, [pc, #28]	; (8001588 <SystemCoreClockUpdate+0xe8>)
 800156a:	681a      	ldr	r2, [r3, #0]
 800156c:	693b      	ldr	r3, [r7, #16]
 800156e:	fa22 f303 	lsr.w	r3, r2, r3
 8001572:	4a05      	ldr	r2, [pc, #20]	; (8001588 <SystemCoreClockUpdate+0xe8>)
 8001574:	6013      	str	r3, [r2, #0]
}
 8001576:	bf00      	nop
 8001578:	371c      	adds	r7, #28
 800157a:	46bd      	mov	sp, r7
 800157c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001580:	4770      	bx	lr
 8001582:	bf00      	nop
 8001584:	40023800 	.word	0x40023800
 8001588:	20000070 	.word	0x20000070
 800158c:	00f42400 	.word	0x00f42400
 8001590:	007a1200 	.word	0x007a1200
 8001594:	20000074 	.word	0x20000074

08001598 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8001598:	b480      	push	{r7}
 800159a:	b083      	sub	sp, #12
 800159c:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 800159e:	2300      	movs	r3, #0
 80015a0:	607b      	str	r3, [r7, #4]
 80015a2:	2300      	movs	r3, #0
 80015a4:	603b      	str	r3, [r7, #0]
                   (RCC_PLLCFGR_PLLSRC_HSI) | (PLL_Q << 24);

#else /* PLL_SOURCE_HSE_BYPASS or PLL_SOURCE_HSE */

  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 80015a6:	4b43      	ldr	r3, [pc, #268]	; (80016b4 <SetSysClock+0x11c>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	4a42      	ldr	r2, [pc, #264]	; (80016b4 <SetSysClock+0x11c>)
 80015ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015b0:	6013      	str	r3, [r2, #0]
  RCC->CR |= ((uint32_t)RCC_CR_HSEBYP);
#endif   /* PLL_SOURCE_HSE_BYPASS */
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 80015b2:	4b40      	ldr	r3, [pc, #256]	; (80016b4 <SetSysClock+0x11c>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015ba:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	3301      	adds	r3, #1
 80015c0:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d103      	bne.n	80015d0 <SetSysClock+0x38>
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 80015ce:	d1f0      	bne.n	80015b2 <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 80015d0:	4b38      	ldr	r3, [pc, #224]	; (80016b4 <SetSysClock+0x11c>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d002      	beq.n	80015e2 <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 80015dc:	2301      	movs	r3, #1
 80015de:	603b      	str	r3, [r7, #0]
 80015e0:	e001      	b.n	80015e6 <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 80015e2:	2300      	movs	r3, #0
 80015e4:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	2b01      	cmp	r3, #1
 80015ea:	d102      	bne.n	80015f2 <SetSysClock+0x5a>
  {
    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 80015ec:	4b31      	ldr	r3, [pc, #196]	; (80016b4 <SetSysClock+0x11c>)
 80015ee:	4a32      	ldr	r2, [pc, #200]	; (80016b8 <SetSysClock+0x120>)
 80015f0:	605a      	str	r2, [r3, #4]
         configuration. User can add here some code to deal with this error */
  }
#endif /*PLL_SOURCE_HSI*/
  
      /* Select regulator voltage output Scale 1 mode, System frequency up to 180 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 80015f2:	4b30      	ldr	r3, [pc, #192]	; (80016b4 <SetSysClock+0x11c>)
 80015f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f6:	4a2f      	ldr	r2, [pc, #188]	; (80016b4 <SetSysClock+0x11c>)
 80015f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015fc:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 80015fe:	4b2f      	ldr	r3, [pc, #188]	; (80016bc <SetSysClock+0x124>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	4a2e      	ldr	r2, [pc, #184]	; (80016bc <SetSysClock+0x124>)
 8001604:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001608:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 800160a:	4b2a      	ldr	r3, [pc, #168]	; (80016b4 <SetSysClock+0x11c>)
 800160c:	4a29      	ldr	r2, [pc, #164]	; (80016b4 <SetSysClock+0x11c>)
 800160e:	689b      	ldr	r3, [r3, #8]
 8001610:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8001612:	4b28      	ldr	r3, [pc, #160]	; (80016b4 <SetSysClock+0x11c>)
 8001614:	689b      	ldr	r3, [r3, #8]
 8001616:	4a27      	ldr	r2, [pc, #156]	; (80016b4 <SetSysClock+0x11c>)
 8001618:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800161c:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 800161e:	4b25      	ldr	r3, [pc, #148]	; (80016b4 <SetSysClock+0x11c>)
 8001620:	689b      	ldr	r3, [r3, #8]
 8001622:	4a24      	ldr	r2, [pc, #144]	; (80016b4 <SetSysClock+0x11c>)
 8001624:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8001628:	6093      	str	r3, [r2, #8]

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 800162a:	4b22      	ldr	r3, [pc, #136]	; (80016b4 <SetSysClock+0x11c>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	4a21      	ldr	r2, [pc, #132]	; (80016b4 <SetSysClock+0x11c>)
 8001630:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001634:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8001636:	bf00      	nop
 8001638:	4b1e      	ldr	r3, [pc, #120]	; (80016b4 <SetSysClock+0x11c>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001640:	2b00      	cmp	r3, #0
 8001642:	d0f9      	beq.n	8001638 <SetSysClock+0xa0>
    {
    }

    /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
    PWR->CR |= PWR_CR_ODEN;
 8001644:	4b1d      	ldr	r3, [pc, #116]	; (80016bc <SetSysClock+0x124>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4a1c      	ldr	r2, [pc, #112]	; (80016bc <SetSysClock+0x124>)
 800164a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800164e:	6013      	str	r3, [r2, #0]
    while((PWR->CSR & PWR_CSR_ODRDY) == 0)
 8001650:	bf00      	nop
 8001652:	4b1a      	ldr	r3, [pc, #104]	; (80016bc <SetSysClock+0x124>)
 8001654:	685b      	ldr	r3, [r3, #4]
 8001656:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800165a:	2b00      	cmp	r3, #0
 800165c:	d0f9      	beq.n	8001652 <SetSysClock+0xba>
    {
    }
    PWR->CR |= PWR_CR_ODSWEN;
 800165e:	4b17      	ldr	r3, [pc, #92]	; (80016bc <SetSysClock+0x124>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	4a16      	ldr	r2, [pc, #88]	; (80016bc <SetSysClock+0x124>)
 8001664:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001668:	6013      	str	r3, [r2, #0]
    while((PWR->CSR & PWR_CSR_ODSWRDY) == 0)
 800166a:	bf00      	nop
 800166c:	4b13      	ldr	r3, [pc, #76]	; (80016bc <SetSysClock+0x124>)
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001674:	2b00      	cmp	r3, #0
 8001676:	d0f9      	beq.n	800166c <SetSysClock+0xd4>
    {
    } 
     
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8001678:	4b11      	ldr	r3, [pc, #68]	; (80016c0 <SetSysClock+0x128>)
 800167a:	f240 7205 	movw	r2, #1797	; 0x705
 800167e:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8001680:	4b0c      	ldr	r3, [pc, #48]	; (80016b4 <SetSysClock+0x11c>)
 8001682:	689b      	ldr	r3, [r3, #8]
 8001684:	4a0b      	ldr	r2, [pc, #44]	; (80016b4 <SetSysClock+0x11c>)
 8001686:	f023 0303 	bic.w	r3, r3, #3
 800168a:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 800168c:	4b09      	ldr	r3, [pc, #36]	; (80016b4 <SetSysClock+0x11c>)
 800168e:	689b      	ldr	r3, [r3, #8]
 8001690:	4a08      	ldr	r2, [pc, #32]	; (80016b4 <SetSysClock+0x11c>)
 8001692:	f043 0302 	orr.w	r3, r3, #2
 8001696:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL)
 8001698:	bf00      	nop
 800169a:	4b06      	ldr	r3, [pc, #24]	; (80016b4 <SetSysClock+0x11c>)
 800169c:	689b      	ldr	r3, [r3, #8]
 800169e:	f003 030c 	and.w	r3, r3, #12
 80016a2:	2b08      	cmp	r3, #8
 80016a4:	d1f9      	bne.n	800169a <SetSysClock+0x102>
    {
    }
}
 80016a6:	bf00      	nop
 80016a8:	370c      	adds	r7, #12
 80016aa:	46bd      	mov	sp, r7
 80016ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b0:	4770      	bx	lr
 80016b2:	bf00      	nop
 80016b4:	40023800 	.word	0x40023800
 80016b8:	07405a08 	.word	0x07405a08
 80016bc:	40007000 	.word	0x40007000
 80016c0:	40023c00 	.word	0x40023c00

080016c4 <NVIC_PriorityGroupConfig>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
 80016c4:	b480      	push	{r7}
 80016c6:	b083      	sub	sp, #12
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 80016cc:	4a06      	ldr	r2, [pc, #24]	; (80016e8 <NVIC_PriorityGroupConfig+0x24>)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016d8:	60d3      	str	r3, [r2, #12]
}
 80016da:	bf00      	nop
 80016dc:	370c      	adds	r7, #12
 80016de:	46bd      	mov	sp, r7
 80016e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e4:	4770      	bx	lr
 80016e6:	bf00      	nop
 80016e8:	e000ed00 	.word	0xe000ed00

080016ec <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b085      	sub	sp, #20
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 80016f4:	2300      	movs	r3, #0
 80016f6:	73fb      	strb	r3, [r7, #15]
 80016f8:	2300      	movs	r3, #0
 80016fa:	73bb      	strb	r3, [r7, #14]
 80016fc:	230f      	movs	r3, #15
 80016fe:	737b      	strb	r3, [r7, #13]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	78db      	ldrb	r3, [r3, #3]
 8001704:	2b00      	cmp	r3, #0
 8001706:	d039      	beq.n	800177c <NVIC_Init+0x90>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8001708:	4b27      	ldr	r3, [pc, #156]	; (80017a8 <NVIC_Init+0xbc>)
 800170a:	68db      	ldr	r3, [r3, #12]
 800170c:	43db      	mvns	r3, r3
 800170e:	0a1b      	lsrs	r3, r3, #8
 8001710:	b2db      	uxtb	r3, r3
 8001712:	f003 0307 	and.w	r3, r3, #7
 8001716:	73fb      	strb	r3, [r7, #15]
    tmppre = (0x4 - tmppriority);
 8001718:	7bfb      	ldrb	r3, [r7, #15]
 800171a:	f1c3 0304 	rsb	r3, r3, #4
 800171e:	73bb      	strb	r3, [r7, #14]
    tmpsub = tmpsub >> tmppriority;
 8001720:	7b7a      	ldrb	r2, [r7, #13]
 8001722:	7bfb      	ldrb	r3, [r7, #15]
 8001724:	fa42 f303 	asr.w	r3, r2, r3
 8001728:	737b      	strb	r3, [r7, #13]

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	785b      	ldrb	r3, [r3, #1]
 800172e:	461a      	mov	r2, r3
 8001730:	7bbb      	ldrb	r3, [r7, #14]
 8001732:	fa02 f303 	lsl.w	r3, r2, r3
 8001736:	73fb      	strb	r3, [r7, #15]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	789a      	ldrb	r2, [r3, #2]
 800173c:	7b7b      	ldrb	r3, [r7, #13]
 800173e:	4013      	ands	r3, r2
 8001740:	b2da      	uxtb	r2, r3
 8001742:	7bfb      	ldrb	r3, [r7, #15]
 8001744:	4313      	orrs	r3, r2
 8001746:	73fb      	strb	r3, [r7, #15]
        
    tmppriority = tmppriority << 0x04;
 8001748:	7bfb      	ldrb	r3, [r7, #15]
 800174a:	011b      	lsls	r3, r3, #4
 800174c:	73fb      	strb	r3, [r7, #15]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 800174e:	4a17      	ldr	r2, [pc, #92]	; (80017ac <NVIC_Init+0xc0>)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	781b      	ldrb	r3, [r3, #0]
 8001754:	4413      	add	r3, r2
 8001756:	7bfa      	ldrb	r2, [r7, #15]
 8001758:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	781b      	ldrb	r3, [r3, #0]
 8001760:	f003 031f 	and.w	r3, r3, #31
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8001764:	4911      	ldr	r1, [pc, #68]	; (80017ac <NVIC_Init+0xc0>)
 8001766:	687a      	ldr	r2, [r7, #4]
 8001768:	7812      	ldrb	r2, [r2, #0]
 800176a:	0952      	lsrs	r2, r2, #5
 800176c:	b2d2      	uxtb	r2, r2
 800176e:	4610      	mov	r0, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8001770:	2201      	movs	r2, #1
 8001772:	fa02 f303 	lsl.w	r3, r2, r3
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8001776:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 800177a:	e00f      	b.n	800179c <NVIC_Init+0xb0>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	781b      	ldrb	r3, [r3, #0]
 8001780:	f003 031f 	and.w	r3, r3, #31
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8001784:	4909      	ldr	r1, [pc, #36]	; (80017ac <NVIC_Init+0xc0>)
 8001786:	687a      	ldr	r2, [r7, #4]
 8001788:	7812      	ldrb	r2, [r2, #0]
 800178a:	0952      	lsrs	r2, r2, #5
 800178c:	b2d2      	uxtb	r2, r2
 800178e:	4610      	mov	r0, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8001790:	2201      	movs	r2, #1
 8001792:	409a      	lsls	r2, r3
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8001794:	f100 0320 	add.w	r3, r0, #32
 8001798:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800179c:	bf00      	nop
 800179e:	3714      	adds	r7, #20
 80017a0:	46bd      	mov	sp, r7
 80017a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a6:	4770      	bx	lr
 80017a8:	e000ed00 	.word	0xe000ed00
 80017ac:	e000e100 	.word	0xe000e100

080017b0 <NVIC_SetVectorTable>:
  *     @arg NVIC_VectTab_FLASH: Vector Table in internal FLASH.
  * @param  Offset: Vector Table base offset field. This value must be a multiple of 0x200.
  * @retval None
  */
void NVIC_SetVectorTable(uint32_t NVIC_VectTab, uint32_t Offset)
{ 
 80017b0:	b480      	push	{r7}
 80017b2:	b083      	sub	sp, #12
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
 80017b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_VECTTAB(NVIC_VectTab));
  assert_param(IS_NVIC_OFFSET(Offset));  
   
  SCB->VTOR = NVIC_VectTab | (Offset & (uint32_t)0x1FFFFF80);
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 80017c0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80017c4:	4904      	ldr	r1, [pc, #16]	; (80017d8 <NVIC_SetVectorTable+0x28>)
 80017c6:	687a      	ldr	r2, [r7, #4]
 80017c8:	4313      	orrs	r3, r2
 80017ca:	608b      	str	r3, [r1, #8]
}
 80017cc:	bf00      	nop
 80017ce:	370c      	adds	r7, #12
 80017d0:	46bd      	mov	sp, r7
 80017d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d6:	4770      	bx	lr
 80017d8:	e000ed00 	.word	0xe000ed00

080017dc <NVIC_SystemLPConfig>:
  *     @arg NVIC_LP_SLEEPONEXIT: Low Power Sleep on Exit.
  * @param  NewState: new state of LP condition. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void NVIC_SystemLPConfig(uint8_t LowPowerMode, FunctionalState NewState)
{
 80017dc:	b480      	push	{r7}
 80017de:	b083      	sub	sp, #12
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	4603      	mov	r3, r0
 80017e4:	460a      	mov	r2, r1
 80017e6:	71fb      	strb	r3, [r7, #7]
 80017e8:	4613      	mov	r3, r2
 80017ea:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if (NewState != DISABLE)
 80017ec:	79bb      	ldrb	r3, [r7, #6]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d006      	beq.n	8001800 <NVIC_SystemLPConfig+0x24>
  {
    SCB->SCR |= LowPowerMode;
 80017f2:	4b0a      	ldr	r3, [pc, #40]	; (800181c <NVIC_SystemLPConfig+0x40>)
 80017f4:	691a      	ldr	r2, [r3, #16]
 80017f6:	79fb      	ldrb	r3, [r7, #7]
 80017f8:	4908      	ldr	r1, [pc, #32]	; (800181c <NVIC_SystemLPConfig+0x40>)
 80017fa:	4313      	orrs	r3, r2
 80017fc:	610b      	str	r3, [r1, #16]
  }
  else
  {
    SCB->SCR &= (uint32_t)(~(uint32_t)LowPowerMode);
  }
}
 80017fe:	e006      	b.n	800180e <NVIC_SystemLPConfig+0x32>
    SCB->SCR &= (uint32_t)(~(uint32_t)LowPowerMode);
 8001800:	4b06      	ldr	r3, [pc, #24]	; (800181c <NVIC_SystemLPConfig+0x40>)
 8001802:	691a      	ldr	r2, [r3, #16]
 8001804:	79fb      	ldrb	r3, [r7, #7]
 8001806:	43db      	mvns	r3, r3
 8001808:	4904      	ldr	r1, [pc, #16]	; (800181c <NVIC_SystemLPConfig+0x40>)
 800180a:	4013      	ands	r3, r2
 800180c:	610b      	str	r3, [r1, #16]
}
 800180e:	bf00      	nop
 8001810:	370c      	adds	r7, #12
 8001812:	46bd      	mov	sp, r7
 8001814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001818:	4770      	bx	lr
 800181a:	bf00      	nop
 800181c:	e000ed00 	.word	0xe000ed00

08001820 <SysTick_CLKSourceConfig>:
  *     @arg SysTick_CLKSource_HCLK_Div8: AHB clock divided by 8 selected as SysTick clock source.
  *     @arg SysTick_CLKSource_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource)
{
 8001820:	b480      	push	{r7}
 8001822:	b083      	sub	sp, #12
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	2b04      	cmp	r3, #4
 800182c:	d106      	bne.n	800183c <SysTick_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
 800182e:	4b09      	ldr	r3, [pc, #36]	; (8001854 <SysTick_CLKSourceConfig+0x34>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	4a08      	ldr	r2, [pc, #32]	; (8001854 <SysTick_CLKSourceConfig+0x34>)
 8001834:	f043 0304 	orr.w	r3, r3, #4
 8001838:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
  }
}
 800183a:	e005      	b.n	8001848 <SysTick_CLKSourceConfig+0x28>
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
 800183c:	4b05      	ldr	r3, [pc, #20]	; (8001854 <SysTick_CLKSourceConfig+0x34>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4a04      	ldr	r2, [pc, #16]	; (8001854 <SysTick_CLKSourceConfig+0x34>)
 8001842:	f023 0304 	bic.w	r3, r3, #4
 8001846:	6013      	str	r3, [r2, #0]
}
 8001848:	bf00      	nop
 800184a:	370c      	adds	r7, #12
 800184c:	46bd      	mov	sp, r7
 800184e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001852:	4770      	bx	lr
 8001854:	e000e010 	.word	0xe000e010

08001858 <ADC_DeInit>:
  *         values.
  * @param  None
  * @retval None
  */
void ADC_DeInit(void)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	af00      	add	r7, sp, #0
  /* Enable all ADCs reset state */
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC, ENABLE);
 800185c:	2101      	movs	r1, #1
 800185e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001862:	f007 f999 	bl	8008b98 <RCC_APB2PeriphResetCmd>
  
  /* Release all ADCs from reset state */
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC, DISABLE);
 8001866:	2100      	movs	r1, #0
 8001868:	f44f 7080 	mov.w	r0, #256	; 0x100
 800186c:	f007 f994 	bl	8008b98 <RCC_APB2PeriphResetCmd>
}
 8001870:	bf00      	nop
 8001872:	bd80      	pop	{r7, pc}

08001874 <ADC_Init>:
  * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure that contains
  *         the configuration information for the specified ADC peripheral.
  * @retval None
  */
void ADC_Init(ADC_TypeDef* ADCx, ADC_InitTypeDef* ADC_InitStruct)
{
 8001874:	b480      	push	{r7}
 8001876:	b085      	sub	sp, #20
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
 800187c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0;
 800187e:	2300      	movs	r3, #0
 8001880:	60fb      	str	r3, [r7, #12]
  uint8_t tmpreg2 = 0;
 8001882:	2300      	movs	r3, #0
 8001884:	72fb      	strb	r3, [r7, #11]
  assert_param(IS_ADC_DATA_ALIGN(ADC_InitStruct->ADC_DataAlign)); 
  assert_param(IS_ADC_REGULAR_LENGTH(ADC_InitStruct->ADC_NbrOfConversion));
  
  /*---------------------------- ADCx CR1 Configuration -----------------*/
  /* Get the ADCx CR1 value */
  tmpreg1 = ADCx->CR1;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	60fb      	str	r3, [r7, #12]
  
  /* Clear RES and SCAN bits */
  tmpreg1 &= CR1_CLEAR_MASK;
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8001892:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001896:	60fb      	str	r3, [r7, #12]
  
  /* Configure ADCx: scan conversion mode and resolution */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  /* Set RES bit according to ADC_Resolution value */ 
  tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | \
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	791b      	ldrb	r3, [r3, #4]
 800189c:	021a      	lsls	r2, r3, #8
                                   ADC_InitStruct->ADC_Resolution);
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	681b      	ldr	r3, [r3, #0]
  tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | \
 80018a2:	4313      	orrs	r3, r2
 80018a4:	68fa      	ldr	r2, [r7, #12]
 80018a6:	4313      	orrs	r3, r2
 80018a8:	60fb      	str	r3, [r7, #12]
  /* Write to ADCx CR1 */
  ADCx->CR1 = tmpreg1;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	68fa      	ldr	r2, [r7, #12]
 80018ae:	605a      	str	r2, [r3, #4]
  /*---------------------------- ADCx CR2 Configuration -----------------*/
  /* Get the ADCx CR2 value */
  tmpreg1 = ADCx->CR2;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	689b      	ldr	r3, [r3, #8]
 80018b4:	60fb      	str	r3, [r7, #12]
  
  /* Clear CONT, ALIGN, EXTEN and EXTSEL bits */
  tmpreg1 &= CR2_CLEAR_MASK;
 80018b6:	68fa      	ldr	r2, [r7, #12]
 80018b8:	4b18      	ldr	r3, [pc, #96]	; (800191c <ADC_Init+0xa8>)
 80018ba:	4013      	ands	r3, r2
 80018bc:	60fb      	str	r3, [r7, #12]
     continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	691a      	ldr	r2, [r3, #16]
                        ADC_InitStruct->ADC_ExternalTrigConv | 
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	68db      	ldr	r3, [r3, #12]
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 80018c6:	431a      	orrs	r2, r3
                        ADC_InitStruct->ADC_ExternalTrigConvEdge | \
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	689b      	ldr	r3, [r3, #8]
                        ADC_InitStruct->ADC_ExternalTrigConv | 
 80018cc:	431a      	orrs	r2, r3
                        ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	795b      	ldrb	r3, [r3, #5]
 80018d2:	005b      	lsls	r3, r3, #1
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 80018d4:	4313      	orrs	r3, r2
 80018d6:	68fa      	ldr	r2, [r7, #12]
 80018d8:	4313      	orrs	r3, r2
 80018da:	60fb      	str	r3, [r7, #12]
                        
  /* Write to ADCx CR2 */
  ADCx->CR2 = tmpreg1;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	68fa      	ldr	r2, [r7, #12]
 80018e0:	609a      	str	r2, [r3, #8]
  /*---------------------------- ADCx SQR1 Configuration -----------------*/
  /* Get the ADCx SQR1 value */
  tmpreg1 = ADCx->SQR1;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018e6:	60fb      	str	r3, [r7, #12]
  
  /* Clear L bits */
  tmpreg1 &= SQR1_L_RESET;
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80018ee:	60fb      	str	r3, [r7, #12]
  
  /* Configure ADCx: regular channel sequence length */
  /* Set L bits according to ADC_NbrOfConversion value */
  tmpreg2 |= (uint8_t)(ADC_InitStruct->ADC_NbrOfConversion - (uint8_t)1);
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	7d1b      	ldrb	r3, [r3, #20]
 80018f4:	3b01      	subs	r3, #1
 80018f6:	b2da      	uxtb	r2, r3
 80018f8:	7afb      	ldrb	r3, [r7, #11]
 80018fa:	4313      	orrs	r3, r2
 80018fc:	72fb      	strb	r3, [r7, #11]
  tmpreg1 |= ((uint32_t)tmpreg2 << 20);
 80018fe:	7afb      	ldrb	r3, [r7, #11]
 8001900:	051b      	lsls	r3, r3, #20
 8001902:	68fa      	ldr	r2, [r7, #12]
 8001904:	4313      	orrs	r3, r2
 8001906:	60fb      	str	r3, [r7, #12]
  
  /* Write to ADCx SQR1 */
  ADCx->SQR1 = tmpreg1;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	68fa      	ldr	r2, [r7, #12]
 800190c:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800190e:	bf00      	nop
 8001910:	3714      	adds	r7, #20
 8001912:	46bd      	mov	sp, r7
 8001914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001918:	4770      	bx	lr
 800191a:	bf00      	nop
 800191c:	c0fff7fd 	.word	0xc0fff7fd

08001920 <ADC_StructInit>:
  * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure which will 
  *         be initialized.
  * @retval None
  */
void ADC_StructInit(ADC_InitTypeDef* ADC_InitStruct)
{
 8001920:	b480      	push	{r7}
 8001922:	b083      	sub	sp, #12
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  /* Initialize the ADC_Mode member */
  ADC_InitStruct->ADC_Resolution = ADC_Resolution_12b;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2200      	movs	r2, #0
 800192c:	601a      	str	r2, [r3, #0]

  /* initialize the ADC_ScanConvMode member */
  ADC_InitStruct->ADC_ScanConvMode = DISABLE;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	2200      	movs	r2, #0
 8001932:	711a      	strb	r2, [r3, #4]

  /* Initialize the ADC_ContinuousConvMode member */
  ADC_InitStruct->ADC_ContinuousConvMode = DISABLE;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	2200      	movs	r2, #0
 8001938:	715a      	strb	r2, [r3, #5]

  /* Initialize the ADC_ExternalTrigConvEdge member */
  ADC_InitStruct->ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_None;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	2200      	movs	r2, #0
 800193e:	609a      	str	r2, [r3, #8]

  /* Initialize the ADC_ExternalTrigConv member */
  ADC_InitStruct->ADC_ExternalTrigConv = ADC_ExternalTrigConv_T1_CC1;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2200      	movs	r2, #0
 8001944:	60da      	str	r2, [r3, #12]

  /* Initialize the ADC_DataAlign member */
  ADC_InitStruct->ADC_DataAlign = ADC_DataAlign_Right;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	2200      	movs	r2, #0
 800194a:	611a      	str	r2, [r3, #16]

  /* Initialize the ADC_NbrOfConversion member */
  ADC_InitStruct->ADC_NbrOfConversion = 1;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	2201      	movs	r2, #1
 8001950:	751a      	strb	r2, [r3, #20]
}
 8001952:	bf00      	nop
 8001954:	370c      	adds	r7, #12
 8001956:	46bd      	mov	sp, r7
 8001958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195c:	4770      	bx	lr

0800195e <ADC_CommonInit>:
  * @param  ADC_CommonInitStruct: pointer to an ADC_CommonInitTypeDef structure 
  *         that contains the configuration information for  All ADCs peripherals.
  * @retval None
  */
void ADC_CommonInit(ADC_CommonInitTypeDef* ADC_CommonInitStruct)
{
 800195e:	b480      	push	{r7}
 8001960:	b085      	sub	sp, #20
 8001962:	af00      	add	r7, sp, #0
 8001964:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0;
 8001966:	2300      	movs	r3, #0
 8001968:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_PRESCALER(ADC_CommonInitStruct->ADC_Prescaler));
  assert_param(IS_ADC_DMA_ACCESS_MODE(ADC_CommonInitStruct->ADC_DMAAccessMode));
  assert_param(IS_ADC_SAMPLING_DELAY(ADC_CommonInitStruct->ADC_TwoSamplingDelay));
  /*---------------------------- ADC CCR Configuration -----------------*/
  /* Get the ADC CCR value */
  tmpreg1 = ADC->CCR;
 800196a:	4b0f      	ldr	r3, [pc, #60]	; (80019a8 <ADC_CommonInit+0x4a>)
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	60fb      	str	r3, [r7, #12]
  
  /* Clear MULTI, DELAY, DMA and ADCPRE bits */
  tmpreg1 &= CR_CLEAR_MASK;
 8001970:	68fa      	ldr	r2, [r7, #12]
 8001972:	4b0e      	ldr	r3, [pc, #56]	; (80019ac <ADC_CommonInit+0x4e>)
 8001974:	4013      	ands	r3, r2
 8001976:	60fb      	str	r3, [r7, #12]
     and DMA access mode for multimode */
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681a      	ldr	r2, [r3, #0]
                        ADC_CommonInitStruct->ADC_Prescaler | 
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	685b      	ldr	r3, [r3, #4]
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 8001980:	431a      	orrs	r2, r3
                        ADC_CommonInitStruct->ADC_DMAAccessMode | 
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	689b      	ldr	r3, [r3, #8]
                        ADC_CommonInitStruct->ADC_Prescaler | 
 8001986:	431a      	orrs	r2, r3
                        ADC_CommonInitStruct->ADC_TwoSamplingDelay);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	68db      	ldr	r3, [r3, #12]
                        ADC_CommonInitStruct->ADC_DMAAccessMode | 
 800198c:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 800198e:	68fa      	ldr	r2, [r7, #12]
 8001990:	4313      	orrs	r3, r2
 8001992:	60fb      	str	r3, [r7, #12]
                        
  /* Write to ADC CCR */
  ADC->CCR = tmpreg1;
 8001994:	4a04      	ldr	r2, [pc, #16]	; (80019a8 <ADC_CommonInit+0x4a>)
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	6053      	str	r3, [r2, #4]
}
 800199a:	bf00      	nop
 800199c:	3714      	adds	r7, #20
 800199e:	46bd      	mov	sp, r7
 80019a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a4:	4770      	bx	lr
 80019a6:	bf00      	nop
 80019a8:	40012300 	.word	0x40012300
 80019ac:	fffc30e0 	.word	0xfffc30e0

080019b0 <ADC_CommonStructInit>:
  * @param  ADC_CommonInitStruct: pointer to an ADC_CommonInitTypeDef structure
  *         which will be initialized.
  * @retval None
  */
void ADC_CommonStructInit(ADC_CommonInitTypeDef* ADC_CommonInitStruct)
{
 80019b0:	b480      	push	{r7}
 80019b2:	b083      	sub	sp, #12
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  /* Initialize the ADC_Mode member */
  ADC_CommonInitStruct->ADC_Mode = ADC_Mode_Independent;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2200      	movs	r2, #0
 80019bc:	601a      	str	r2, [r3, #0]

  /* initialize the ADC_Prescaler member */
  ADC_CommonInitStruct->ADC_Prescaler = ADC_Prescaler_Div2;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2200      	movs	r2, #0
 80019c2:	605a      	str	r2, [r3, #4]

  /* Initialize the ADC_DMAAccessMode member */
  ADC_CommonInitStruct->ADC_DMAAccessMode = ADC_DMAAccessMode_Disabled;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	2200      	movs	r2, #0
 80019c8:	609a      	str	r2, [r3, #8]

  /* Initialize the ADC_TwoSamplingDelay member */
  ADC_CommonInitStruct->ADC_TwoSamplingDelay = ADC_TwoSamplingDelay_5Cycles;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	2200      	movs	r2, #0
 80019ce:	60da      	str	r2, [r3, #12]
}
 80019d0:	bf00      	nop
 80019d2:	370c      	adds	r7, #12
 80019d4:	46bd      	mov	sp, r7
 80019d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019da:	4770      	bx	lr

080019dc <ADC_Cmd>:
  * @param  NewState: new state of the ADCx peripheral. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_Cmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 80019dc:	b480      	push	{r7}
 80019de:	b083      	sub	sp, #12
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
 80019e4:	460b      	mov	r3, r1
 80019e6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80019e8:	78fb      	ldrb	r3, [r7, #3]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d006      	beq.n	80019fc <ADC_Cmd+0x20>
  {
    /* Set the ADON bit to wake up the ADC from power down mode */
    ADCx->CR2 |= (uint32_t)ADC_CR2_ADON;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	689b      	ldr	r3, [r3, #8]
 80019f2:	f043 0201 	orr.w	r2, r3, #1
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	609a      	str	r2, [r3, #8]
  else
  {
    /* Disable the selected ADC peripheral */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_ADON);
  }
}
 80019fa:	e005      	b.n	8001a08 <ADC_Cmd+0x2c>
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_ADON);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	689b      	ldr	r3, [r3, #8]
 8001a00:	f023 0201 	bic.w	r2, r3, #1
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	609a      	str	r2, [r3, #8]
}
 8001a08:	bf00      	nop
 8001a0a:	370c      	adds	r7, #12
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a12:	4770      	bx	lr

08001a14 <ADC_AnalogWatchdogCmd>:
  *            @arg ADC_AnalogWatchdog_AllRegAllInjecEnable: Analog watchdog on all regular and injected channels
  *            @arg ADC_AnalogWatchdog_None: No channel guarded by the analog watchdog
  * @retval None	  
  */
void ADC_AnalogWatchdogCmd(ADC_TypeDef* ADCx, uint32_t ADC_AnalogWatchdog)
{
 8001a14:	b480      	push	{r7}
 8001a16:	b085      	sub	sp, #20
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
 8001a1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_ANALOG_WATCHDOG(ADC_AnalogWatchdog));
  
  /* Get the old register value */
  tmpreg = ADCx->CR1;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	60fb      	str	r3, [r7, #12]
  
  /* Clear AWDEN, JAWDEN and AWDSGL bits */
  tmpreg &= CR1_AWDMode_RESET;
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8001a2e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001a32:	60fb      	str	r3, [r7, #12]
  
  /* Set the analog watchdog enable mode */
  tmpreg |= ADC_AnalogWatchdog;
 8001a34:	68fa      	ldr	r2, [r7, #12]
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	4313      	orrs	r3, r2
 8001a3a:	60fb      	str	r3, [r7, #12]
  
  /* Store the new register value */
  ADCx->CR1 = tmpreg;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	68fa      	ldr	r2, [r7, #12]
 8001a40:	605a      	str	r2, [r3, #4]
}
 8001a42:	bf00      	nop
 8001a44:	3714      	adds	r7, #20
 8001a46:	46bd      	mov	sp, r7
 8001a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4c:	4770      	bx	lr

08001a4e <ADC_AnalogWatchdogThresholdsConfig>:
  *          This parameter must be a 12-bit value.
  * @retval None
  */
void ADC_AnalogWatchdogThresholdsConfig(ADC_TypeDef* ADCx, uint16_t HighThreshold,
                                        uint16_t LowThreshold)
{
 8001a4e:	b480      	push	{r7}
 8001a50:	b083      	sub	sp, #12
 8001a52:	af00      	add	r7, sp, #0
 8001a54:	6078      	str	r0, [r7, #4]
 8001a56:	460b      	mov	r3, r1
 8001a58:	807b      	strh	r3, [r7, #2]
 8001a5a:	4613      	mov	r3, r2
 8001a5c:	803b      	strh	r3, [r7, #0]
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_THRESHOLD(HighThreshold));
  assert_param(IS_ADC_THRESHOLD(LowThreshold));
  
  /* Set the ADCx high threshold */
  ADCx->HTR = HighThreshold;
 8001a5e:	887a      	ldrh	r2, [r7, #2]
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* Set the ADCx low threshold */
  ADCx->LTR = LowThreshold;
 8001a64:	883a      	ldrh	r2, [r7, #0]
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001a6a:	bf00      	nop
 8001a6c:	370c      	adds	r7, #12
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a74:	4770      	bx	lr

08001a76 <ADC_AnalogWatchdogSingleChannelConfig>:
  *            @arg ADC_Channel_17: ADC Channel17 selected
  *            @arg ADC_Channel_18: ADC Channel18 selected
  * @retval None
  */
void ADC_AnalogWatchdogSingleChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel)
{
 8001a76:	b480      	push	{r7}
 8001a78:	b085      	sub	sp, #20
 8001a7a:	af00      	add	r7, sp, #0
 8001a7c:	6078      	str	r0, [r7, #4]
 8001a7e:	460b      	mov	r3, r1
 8001a80:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpreg = 0;
 8001a82:	2300      	movs	r3, #0
 8001a84:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  
  /* Get the old register value */
  tmpreg = ADCx->CR1;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	60fb      	str	r3, [r7, #12]
  
  /* Clear the Analog watchdog channel select bits */
  tmpreg &= CR1_AWDCH_RESET;
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	f023 031f 	bic.w	r3, r3, #31
 8001a92:	60fb      	str	r3, [r7, #12]
  
  /* Set the Analog watchdog channel */
  tmpreg |= ADC_Channel;
 8001a94:	78fb      	ldrb	r3, [r7, #3]
 8001a96:	68fa      	ldr	r2, [r7, #12]
 8001a98:	4313      	orrs	r3, r2
 8001a9a:	60fb      	str	r3, [r7, #12]
  
  /* Store the new register value */
  ADCx->CR1 = tmpreg;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	68fa      	ldr	r2, [r7, #12]
 8001aa0:	605a      	str	r2, [r3, #4]
}
 8001aa2:	bf00      	nop
 8001aa4:	3714      	adds	r7, #20
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr

08001aae <ADC_TempSensorVrefintCmd>:
  * @param  NewState: new state of the temperature sensor and Vrefint channels.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_TempSensorVrefintCmd(FunctionalState NewState)                
{
 8001aae:	b480      	push	{r7}
 8001ab0:	b083      	sub	sp, #12
 8001ab2:	af00      	add	r7, sp, #0
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001ab8:	79fb      	ldrb	r3, [r7, #7]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d006      	beq.n	8001acc <ADC_TempSensorVrefintCmd+0x1e>
  {
    /* Enable the temperature sensor and Vrefint channel*/
    ADC->CCR |= (uint32_t)ADC_CCR_TSVREFE;
 8001abe:	4b09      	ldr	r3, [pc, #36]	; (8001ae4 <ADC_TempSensorVrefintCmd+0x36>)
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	4a08      	ldr	r2, [pc, #32]	; (8001ae4 <ADC_TempSensorVrefintCmd+0x36>)
 8001ac4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001ac8:	6053      	str	r3, [r2, #4]
  else
  {
    /* Disable the temperature sensor and Vrefint channel*/
    ADC->CCR &= (uint32_t)(~ADC_CCR_TSVREFE);
  }
}
 8001aca:	e005      	b.n	8001ad8 <ADC_TempSensorVrefintCmd+0x2a>
    ADC->CCR &= (uint32_t)(~ADC_CCR_TSVREFE);
 8001acc:	4b05      	ldr	r3, [pc, #20]	; (8001ae4 <ADC_TempSensorVrefintCmd+0x36>)
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	4a04      	ldr	r2, [pc, #16]	; (8001ae4 <ADC_TempSensorVrefintCmd+0x36>)
 8001ad2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001ad6:	6053      	str	r3, [r2, #4]
}
 8001ad8:	bf00      	nop
 8001ada:	370c      	adds	r7, #12
 8001adc:	46bd      	mov	sp, r7
 8001ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae2:	4770      	bx	lr
 8001ae4:	40012300 	.word	0x40012300

08001ae8 <ADC_VBATCmd>:
  * @param  NewState: new state of the VBAT channel.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_VBATCmd(FunctionalState NewState)                             
{
 8001ae8:	b480      	push	{r7}
 8001aea:	b083      	sub	sp, #12
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	4603      	mov	r3, r0
 8001af0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001af2:	79fb      	ldrb	r3, [r7, #7]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d006      	beq.n	8001b06 <ADC_VBATCmd+0x1e>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= (uint32_t)ADC_CCR_VBATE;
 8001af8:	4b09      	ldr	r3, [pc, #36]	; (8001b20 <ADC_VBATCmd+0x38>)
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	4a08      	ldr	r2, [pc, #32]	; (8001b20 <ADC_VBATCmd+0x38>)
 8001afe:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001b02:	6053      	str	r3, [r2, #4]
  else
  {
    /* Disable the VBAT channel*/
    ADC->CCR &= (uint32_t)(~ADC_CCR_VBATE);
  }
}
 8001b04:	e005      	b.n	8001b12 <ADC_VBATCmd+0x2a>
    ADC->CCR &= (uint32_t)(~ADC_CCR_VBATE);
 8001b06:	4b06      	ldr	r3, [pc, #24]	; (8001b20 <ADC_VBATCmd+0x38>)
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	4a05      	ldr	r2, [pc, #20]	; (8001b20 <ADC_VBATCmd+0x38>)
 8001b0c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001b10:	6053      	str	r3, [r2, #4]
}
 8001b12:	bf00      	nop
 8001b14:	370c      	adds	r7, #12
 8001b16:	46bd      	mov	sp, r7
 8001b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1c:	4770      	bx	lr
 8001b1e:	bf00      	nop
 8001b20:	40012300 	.word	0x40012300

08001b24 <ADC_RegularChannelConfig>:
  *            @arg ADC_SampleTime_144Cycles: Sample time equal to 144 cycles	
  *            @arg ADC_SampleTime_480Cycles: Sample time equal to 480 cycles	
  * @retval None
  */
void ADC_RegularChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b085      	sub	sp, #20
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
 8001b2c:	4608      	mov	r0, r1
 8001b2e:	4611      	mov	r1, r2
 8001b30:	461a      	mov	r2, r3
 8001b32:	4603      	mov	r3, r0
 8001b34:	70fb      	strb	r3, [r7, #3]
 8001b36:	460b      	mov	r3, r1
 8001b38:	70bb      	strb	r3, [r7, #2]
 8001b3a:	4613      	mov	r3, r2
 8001b3c:	707b      	strb	r3, [r7, #1]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	60fb      	str	r3, [r7, #12]
 8001b42:	2300      	movs	r3, #0
 8001b44:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_REGULAR_RANK(Rank));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (ADC_Channel > ADC_Channel_9)
 8001b46:	78fb      	ldrb	r3, [r7, #3]
 8001b48:	2b09      	cmp	r3, #9
 8001b4a:	d923      	bls.n	8001b94 <ADC_RegularChannelConfig+0x70>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	68db      	ldr	r3, [r3, #12]
 8001b50:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SMPR1_SMP_SET << (3 * (ADC_Channel - 10));
 8001b52:	78fb      	ldrb	r3, [r7, #3]
 8001b54:	f1a3 020a 	sub.w	r2, r3, #10
 8001b58:	4613      	mov	r3, r2
 8001b5a:	005b      	lsls	r3, r3, #1
 8001b5c:	4413      	add	r3, r2
 8001b5e:	2207      	movs	r2, #7
 8001b60:	fa02 f303 	lsl.w	r3, r2, r3
 8001b64:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 8001b66:	68bb      	ldr	r3, [r7, #8]
 8001b68:	43db      	mvns	r3, r3
 8001b6a:	68fa      	ldr	r2, [r7, #12]
 8001b6c:	4013      	ands	r3, r2
 8001b6e:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 10));
 8001b70:	7879      	ldrb	r1, [r7, #1]
 8001b72:	78fb      	ldrb	r3, [r7, #3]
 8001b74:	f1a3 020a 	sub.w	r2, r3, #10
 8001b78:	4613      	mov	r3, r2
 8001b7a:	005b      	lsls	r3, r3, #1
 8001b7c:	4413      	add	r3, r2
 8001b7e:	fa01 f303 	lsl.w	r3, r1, r3
 8001b82:	60bb      	str	r3, [r7, #8]
    
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 8001b84:	68fa      	ldr	r2, [r7, #12]
 8001b86:	68bb      	ldr	r3, [r7, #8]
 8001b88:	4313      	orrs	r3, r2
 8001b8a:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SMPR1 = tmpreg1;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	68fa      	ldr	r2, [r7, #12]
 8001b90:	60da      	str	r2, [r3, #12]
 8001b92:	e01e      	b.n	8001bd2 <ADC_RegularChannelConfig+0xae>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	691b      	ldr	r3, [r3, #16]
 8001b98:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SMPR2_SMP_SET << (3 * ADC_Channel);
 8001b9a:	78fa      	ldrb	r2, [r7, #3]
 8001b9c:	4613      	mov	r3, r2
 8001b9e:	005b      	lsls	r3, r3, #1
 8001ba0:	4413      	add	r3, r2
 8001ba2:	2207      	movs	r2, #7
 8001ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba8:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 8001baa:	68bb      	ldr	r3, [r7, #8]
 8001bac:	43db      	mvns	r3, r3
 8001bae:	68fa      	ldr	r2, [r7, #12]
 8001bb0:	4013      	ands	r3, r2
 8001bb2:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
 8001bb4:	7879      	ldrb	r1, [r7, #1]
 8001bb6:	78fa      	ldrb	r2, [r7, #3]
 8001bb8:	4613      	mov	r3, r2
 8001bba:	005b      	lsls	r3, r3, #1
 8001bbc:	4413      	add	r3, r2
 8001bbe:	fa01 f303 	lsl.w	r3, r1, r3
 8001bc2:	60bb      	str	r3, [r7, #8]
    
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 8001bc4:	68fa      	ldr	r2, [r7, #12]
 8001bc6:	68bb      	ldr	r3, [r7, #8]
 8001bc8:	4313      	orrs	r3, r2
 8001bca:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SMPR2 = tmpreg1;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	68fa      	ldr	r2, [r7, #12]
 8001bd0:	611a      	str	r2, [r3, #16]
  }
  /* For Rank 1 to 6 */
  if (Rank < 7)
 8001bd2:	78bb      	ldrb	r3, [r7, #2]
 8001bd4:	2b06      	cmp	r3, #6
 8001bd6:	d821      	bhi.n	8001c1c <ADC_RegularChannelConfig+0xf8>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR3;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bdc:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SQR3_SQ_SET << (5 * (Rank - 1));
 8001bde:	78bb      	ldrb	r3, [r7, #2]
 8001be0:	1e5a      	subs	r2, r3, #1
 8001be2:	4613      	mov	r3, r2
 8001be4:	009b      	lsls	r3, r3, #2
 8001be6:	4413      	add	r3, r2
 8001be8:	221f      	movs	r2, #31
 8001bea:	fa02 f303 	lsl.w	r3, r2, r3
 8001bee:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8001bf0:	68bb      	ldr	r3, [r7, #8]
 8001bf2:	43db      	mvns	r3, r3
 8001bf4:	68fa      	ldr	r2, [r7, #12]
 8001bf6:	4013      	ands	r3, r2
 8001bf8:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 1));
 8001bfa:	78f9      	ldrb	r1, [r7, #3]
 8001bfc:	78bb      	ldrb	r3, [r7, #2]
 8001bfe:	1e5a      	subs	r2, r3, #1
 8001c00:	4613      	mov	r3, r2
 8001c02:	009b      	lsls	r3, r3, #2
 8001c04:	4413      	add	r3, r2
 8001c06:	fa01 f303 	lsl.w	r3, r1, r3
 8001c0a:	60bb      	str	r3, [r7, #8]
    
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8001c0c:	68fa      	ldr	r2, [r7, #12]
 8001c0e:	68bb      	ldr	r3, [r7, #8]
 8001c10:	4313      	orrs	r3, r2
 8001c12:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SQR3 = tmpreg1;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	68fa      	ldr	r2, [r7, #12]
 8001c18:	635a      	str	r2, [r3, #52]	; 0x34
    tmpreg1 |= tmpreg2;
    
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
  }
}
 8001c1a:	e047      	b.n	8001cac <ADC_RegularChannelConfig+0x188>
  else if (Rank < 13)
 8001c1c:	78bb      	ldrb	r3, [r7, #2]
 8001c1e:	2b0c      	cmp	r3, #12
 8001c20:	d821      	bhi.n	8001c66 <ADC_RegularChannelConfig+0x142>
    tmpreg1 = ADCx->SQR2;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c26:	60fb      	str	r3, [r7, #12]
    tmpreg2 = SQR2_SQ_SET << (5 * (Rank - 7));
 8001c28:	78bb      	ldrb	r3, [r7, #2]
 8001c2a:	1fda      	subs	r2, r3, #7
 8001c2c:	4613      	mov	r3, r2
 8001c2e:	009b      	lsls	r3, r3, #2
 8001c30:	4413      	add	r3, r2
 8001c32:	221f      	movs	r2, #31
 8001c34:	fa02 f303 	lsl.w	r3, r2, r3
 8001c38:	60bb      	str	r3, [r7, #8]
    tmpreg1 &= ~tmpreg2;
 8001c3a:	68bb      	ldr	r3, [r7, #8]
 8001c3c:	43db      	mvns	r3, r3
 8001c3e:	68fa      	ldr	r2, [r7, #12]
 8001c40:	4013      	ands	r3, r2
 8001c42:	60fb      	str	r3, [r7, #12]
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 7));
 8001c44:	78f9      	ldrb	r1, [r7, #3]
 8001c46:	78bb      	ldrb	r3, [r7, #2]
 8001c48:	1fda      	subs	r2, r3, #7
 8001c4a:	4613      	mov	r3, r2
 8001c4c:	009b      	lsls	r3, r3, #2
 8001c4e:	4413      	add	r3, r2
 8001c50:	fa01 f303 	lsl.w	r3, r1, r3
 8001c54:	60bb      	str	r3, [r7, #8]
    tmpreg1 |= tmpreg2;
 8001c56:	68fa      	ldr	r2, [r7, #12]
 8001c58:	68bb      	ldr	r3, [r7, #8]
 8001c5a:	4313      	orrs	r3, r2
 8001c5c:	60fb      	str	r3, [r7, #12]
    ADCx->SQR2 = tmpreg1;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	68fa      	ldr	r2, [r7, #12]
 8001c62:	631a      	str	r2, [r3, #48]	; 0x30
}
 8001c64:	e022      	b.n	8001cac <ADC_RegularChannelConfig+0x188>
    tmpreg1 = ADCx->SQR1;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c6a:	60fb      	str	r3, [r7, #12]
    tmpreg2 = SQR1_SQ_SET << (5 * (Rank - 13));
 8001c6c:	78bb      	ldrb	r3, [r7, #2]
 8001c6e:	f1a3 020d 	sub.w	r2, r3, #13
 8001c72:	4613      	mov	r3, r2
 8001c74:	009b      	lsls	r3, r3, #2
 8001c76:	4413      	add	r3, r2
 8001c78:	221f      	movs	r2, #31
 8001c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7e:	60bb      	str	r3, [r7, #8]
    tmpreg1 &= ~tmpreg2;
 8001c80:	68bb      	ldr	r3, [r7, #8]
 8001c82:	43db      	mvns	r3, r3
 8001c84:	68fa      	ldr	r2, [r7, #12]
 8001c86:	4013      	ands	r3, r2
 8001c88:	60fb      	str	r3, [r7, #12]
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 13));
 8001c8a:	78f9      	ldrb	r1, [r7, #3]
 8001c8c:	78bb      	ldrb	r3, [r7, #2]
 8001c8e:	f1a3 020d 	sub.w	r2, r3, #13
 8001c92:	4613      	mov	r3, r2
 8001c94:	009b      	lsls	r3, r3, #2
 8001c96:	4413      	add	r3, r2
 8001c98:	fa01 f303 	lsl.w	r3, r1, r3
 8001c9c:	60bb      	str	r3, [r7, #8]
    tmpreg1 |= tmpreg2;
 8001c9e:	68fa      	ldr	r2, [r7, #12]
 8001ca0:	68bb      	ldr	r3, [r7, #8]
 8001ca2:	4313      	orrs	r3, r2
 8001ca4:	60fb      	str	r3, [r7, #12]
    ADCx->SQR1 = tmpreg1;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	68fa      	ldr	r2, [r7, #12]
 8001caa:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8001cac:	bf00      	nop
 8001cae:	3714      	adds	r7, #20
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb6:	4770      	bx	lr

08001cb8 <ADC_SoftwareStartConv>:
  * @brief  Enables the selected ADC software start conversion of the regular channels.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval None
  */
void ADC_SoftwareStartConv(ADC_TypeDef* ADCx)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b083      	sub	sp, #12
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  
  /* Enable the selected ADC conversion for regular group */
  ADCx->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	689b      	ldr	r3, [r3, #8]
 8001cc4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	609a      	str	r2, [r3, #8]
}
 8001ccc:	bf00      	nop
 8001cce:	370c      	adds	r7, #12
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd6:	4770      	bx	lr

08001cd8 <ADC_GetSoftwareStartConvStatus>:
  * @brief  Gets the selected ADC Software start regular conversion Status.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval The new state of ADC software start conversion (SET or RESET).
  */
FlagStatus ADC_GetSoftwareStartConvStatus(ADC_TypeDef* ADCx)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b085      	sub	sp, #20
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  
  /* Check the status of SWSTART bit */
  if ((ADCx->CR2 & ADC_CR2_SWSTART) != (uint32_t)RESET)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	689b      	ldr	r3, [r3, #8]
 8001ce8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d002      	beq.n	8001cf6 <ADC_GetSoftwareStartConvStatus+0x1e>
  {
    /* SWSTART bit is set */
    bitstatus = SET;
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	73fb      	strb	r3, [r7, #15]
 8001cf4:	e001      	b.n	8001cfa <ADC_GetSoftwareStartConvStatus+0x22>
  }
  else
  {
    /* SWSTART bit is reset */
    bitstatus = RESET;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return the SWSTART bit status */
  return  bitstatus;
 8001cfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	3714      	adds	r7, #20
 8001d00:	46bd      	mov	sp, r7
 8001d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d06:	4770      	bx	lr

08001d08 <ADC_EOCOnEachRegularChannelCmd>:
  * @param  NewState: new state of the selected ADC EOC flag rising
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_EOCOnEachRegularChannelCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b083      	sub	sp, #12
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
 8001d10:	460b      	mov	r3, r1
 8001d12:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001d14:	78fb      	ldrb	r3, [r7, #3]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d006      	beq.n	8001d28 <ADC_EOCOnEachRegularChannelCmd+0x20>
  {
    /* Enable the selected ADC EOC rising on each regular channel conversion */
    ADCx->CR2 |= (uint32_t)ADC_CR2_EOCS;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	689b      	ldr	r3, [r3, #8]
 8001d1e:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	609a      	str	r2, [r3, #8]
  else
  {
    /* Disable the selected ADC EOC rising on each regular channel conversion */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_EOCS);
  }
}
 8001d26:	e005      	b.n	8001d34 <ADC_EOCOnEachRegularChannelCmd+0x2c>
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_EOCS);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	689b      	ldr	r3, [r3, #8]
 8001d2c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	609a      	str	r2, [r3, #8]
}
 8001d34:	bf00      	nop
 8001d36:	370c      	adds	r7, #12
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3e:	4770      	bx	lr

08001d40 <ADC_ContinuousModeCmd>:
  * @param  NewState: new state of the selected ADC continuous conversion mode
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_ContinuousModeCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b083      	sub	sp, #12
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
 8001d48:	460b      	mov	r3, r1
 8001d4a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001d4c:	78fb      	ldrb	r3, [r7, #3]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d006      	beq.n	8001d60 <ADC_ContinuousModeCmd+0x20>
  {
    /* Enable the selected ADC continuous conversion mode */
    ADCx->CR2 |= (uint32_t)ADC_CR2_CONT;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	689b      	ldr	r3, [r3, #8]
 8001d56:	f043 0202 	orr.w	r2, r3, #2
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	609a      	str	r2, [r3, #8]
  else
  {
    /* Disable the selected ADC continuous conversion mode */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_CONT);
  }
}
 8001d5e:	e005      	b.n	8001d6c <ADC_ContinuousModeCmd+0x2c>
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_CONT);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	689b      	ldr	r3, [r3, #8]
 8001d64:	f023 0202 	bic.w	r2, r3, #2
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	609a      	str	r2, [r3, #8]
}
 8001d6c:	bf00      	nop
 8001d6e:	370c      	adds	r7, #12
 8001d70:	46bd      	mov	sp, r7
 8001d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d76:	4770      	bx	lr

08001d78 <ADC_DiscModeChannelCountConfig>:
  * @param  Number: specifies the discontinuous mode regular channel count value.
  *          This number must be between 1 and 8.
  * @retval None
  */
void ADC_DiscModeChannelCountConfig(ADC_TypeDef* ADCx, uint8_t Number)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b085      	sub	sp, #20
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
 8001d80:	460b      	mov	r3, r1
 8001d82:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpreg1 = 0;
 8001d84:	2300      	movs	r3, #0
 8001d86:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg2 = 0;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_REGULAR_DISC_NUMBER(Number));
  
  /* Get the old register value */
  tmpreg1 = ADCx->CR1;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	60fb      	str	r3, [r7, #12]
  
  /* Clear the old discontinuous mode channel count */
  tmpreg1 &= CR1_DISCNUM_RESET;
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001d98:	60fb      	str	r3, [r7, #12]
  
  /* Set the discontinuous mode channel count */
  tmpreg2 = Number - 1;
 8001d9a:	78fb      	ldrb	r3, [r7, #3]
 8001d9c:	3b01      	subs	r3, #1
 8001d9e:	60bb      	str	r3, [r7, #8]
  tmpreg1 |= tmpreg2 << 13;
 8001da0:	68bb      	ldr	r3, [r7, #8]
 8001da2:	035b      	lsls	r3, r3, #13
 8001da4:	68fa      	ldr	r2, [r7, #12]
 8001da6:	4313      	orrs	r3, r2
 8001da8:	60fb      	str	r3, [r7, #12]
  
  /* Store the new register value */
  ADCx->CR1 = tmpreg1;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	68fa      	ldr	r2, [r7, #12]
 8001dae:	605a      	str	r2, [r3, #4]
}
 8001db0:	bf00      	nop
 8001db2:	3714      	adds	r7, #20
 8001db4:	46bd      	mov	sp, r7
 8001db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dba:	4770      	bx	lr

08001dbc <ADC_DiscModeCmd>:
  *         regular group channel.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_DiscModeCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b083      	sub	sp, #12
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
 8001dc4:	460b      	mov	r3, r1
 8001dc6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001dc8:	78fb      	ldrb	r3, [r7, #3]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d006      	beq.n	8001ddc <ADC_DiscModeCmd+0x20>
  {
    /* Enable the selected ADC regular discontinuous mode */
    ADCx->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	605a      	str	r2, [r3, #4]
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    ADCx->CR1 &= (uint32_t)(~ADC_CR1_DISCEN);
  }
}
 8001dda:	e005      	b.n	8001de8 <ADC_DiscModeCmd+0x2c>
    ADCx->CR1 &= (uint32_t)(~ADC_CR1_DISCEN);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	605a      	str	r2, [r3, #4]
}
 8001de8:	bf00      	nop
 8001dea:	370c      	adds	r7, #12
 8001dec:	46bd      	mov	sp, r7
 8001dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df2:	4770      	bx	lr

08001df4 <ADC_GetConversionValue>:
  * @brief  Returns the last ADCx conversion result data for regular channel.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval The Data conversion value.
  */
uint16_t ADC_GetConversionValue(ADC_TypeDef* ADCx)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b083      	sub	sp, #12
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  
  /* Return the selected ADC conversion value */
  return (uint16_t) ADCx->DR;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e00:	b29b      	uxth	r3, r3
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	370c      	adds	r7, #12
 8001e06:	46bd      	mov	sp, r7
 8001e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0c:	4770      	bx	lr

08001e0e <ADC_GetMultiModeConversionValue>:
  * @note   In triple mode, the value returned by this function is as following
  *           Data[15:0] : these bits contain alternatively the regular data of ADC1, ADC3 and ADC2.
  *           Data[31:16]: these bits contain alternatively the regular data of ADC2, ADC1 and ADC3.           
  */
uint32_t ADC_GetMultiModeConversionValue(void)
{
 8001e0e:	b480      	push	{r7}
 8001e10:	af00      	add	r7, sp, #0
  /* Return the multi mode conversion value */
  return (*(__IO uint32_t *) CDR_ADDRESS);
 8001e12:	4b03      	ldr	r3, [pc, #12]	; (8001e20 <ADC_GetMultiModeConversionValue+0x12>)
 8001e14:	681b      	ldr	r3, [r3, #0]
}
 8001e16:	4618      	mov	r0, r3
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1e:	4770      	bx	lr
 8001e20:	40012308 	.word	0x40012308

08001e24 <ADC_DMACmd>:
  * @param  NewState: new state of the selected ADC DMA transfer.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_DMACmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8001e24:	b480      	push	{r7}
 8001e26:	b083      	sub	sp, #12
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
 8001e2c:	460b      	mov	r3, r1
 8001e2e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001e30:	78fb      	ldrb	r3, [r7, #3]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d006      	beq.n	8001e44 <ADC_DMACmd+0x20>
  {
    /* Enable the selected ADC DMA request */
    ADCx->CR2 |= (uint32_t)ADC_CR2_DMA;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	689b      	ldr	r3, [r3, #8]
 8001e3a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	609a      	str	r2, [r3, #8]
  else
  {
    /* Disable the selected ADC DMA request */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_DMA);
  }
}
 8001e42:	e005      	b.n	8001e50 <ADC_DMACmd+0x2c>
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_DMA);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	689b      	ldr	r3, [r3, #8]
 8001e48:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	609a      	str	r2, [r3, #8]
}
 8001e50:	bf00      	nop
 8001e52:	370c      	adds	r7, #12
 8001e54:	46bd      	mov	sp, r7
 8001e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5a:	4770      	bx	lr

08001e5c <ADC_DMARequestAfterLastTransferCmd>:
  * @param  NewState: new state of the selected ADC DMA request after last transfer.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_DMARequestAfterLastTransferCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b083      	sub	sp, #12
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
 8001e64:	460b      	mov	r3, r1
 8001e66:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001e68:	78fb      	ldrb	r3, [r7, #3]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d006      	beq.n	8001e7c <ADC_DMARequestAfterLastTransferCmd+0x20>
  {
    /* Enable the selected ADC DMA request after last transfer */
    ADCx->CR2 |= (uint32_t)ADC_CR2_DDS;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	689b      	ldr	r3, [r3, #8]
 8001e72:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	609a      	str	r2, [r3, #8]
  else
  {
    /* Disable the selected ADC DMA request after last transfer */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_DDS);
  }
}
 8001e7a:	e005      	b.n	8001e88 <ADC_DMARequestAfterLastTransferCmd+0x2c>
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_DDS);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	689b      	ldr	r3, [r3, #8]
 8001e80:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	609a      	str	r2, [r3, #8]
}
 8001e88:	bf00      	nop
 8001e8a:	370c      	adds	r7, #12
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e92:	4770      	bx	lr

08001e94 <ADC_MultiModeDMARequestAfterLastTransferCmd>:
  *         by ADC_CommonInitStruct.ADC_DMAAccessMode structure member) is 
  *          ADC_DMAAccessMode_1, ADC_DMAAccessMode_2 or ADC_DMAAccessMode_3.     
  * @retval None
  */
void ADC_MultiModeDMARequestAfterLastTransferCmd(FunctionalState NewState)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b083      	sub	sp, #12
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001e9e:	79fb      	ldrb	r3, [r7, #7]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d006      	beq.n	8001eb2 <ADC_MultiModeDMARequestAfterLastTransferCmd+0x1e>
  {
    /* Enable the selected ADC DMA request after last transfer */
    ADC->CCR |= (uint32_t)ADC_CCR_DDS;
 8001ea4:	4b09      	ldr	r3, [pc, #36]	; (8001ecc <ADC_MultiModeDMARequestAfterLastTransferCmd+0x38>)
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	4a08      	ldr	r2, [pc, #32]	; (8001ecc <ADC_MultiModeDMARequestAfterLastTransferCmd+0x38>)
 8001eaa:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001eae:	6053      	str	r3, [r2, #4]
  else
  {
    /* Disable the selected ADC DMA request after last transfer */
    ADC->CCR &= (uint32_t)(~ADC_CCR_DDS);
  }
}
 8001eb0:	e005      	b.n	8001ebe <ADC_MultiModeDMARequestAfterLastTransferCmd+0x2a>
    ADC->CCR &= (uint32_t)(~ADC_CCR_DDS);
 8001eb2:	4b06      	ldr	r3, [pc, #24]	; (8001ecc <ADC_MultiModeDMARequestAfterLastTransferCmd+0x38>)
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	4a05      	ldr	r2, [pc, #20]	; (8001ecc <ADC_MultiModeDMARequestAfterLastTransferCmd+0x38>)
 8001eb8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001ebc:	6053      	str	r3, [r2, #4]
}
 8001ebe:	bf00      	nop
 8001ec0:	370c      	adds	r7, #12
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec8:	4770      	bx	lr
 8001eca:	bf00      	nop
 8001ecc:	40012300 	.word	0x40012300

08001ed0 <ADC_InjectedChannelConfig>:
  *            @arg ADC_SampleTime_144Cycles: Sample time equal to 144 cycles	
  *            @arg ADC_SampleTime_480Cycles: Sample time equal to 480 cycles	
  * @retval None
  */
void ADC_InjectedChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b087      	sub	sp, #28
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
 8001ed8:	4608      	mov	r0, r1
 8001eda:	4611      	mov	r1, r2
 8001edc:	461a      	mov	r2, r3
 8001ede:	4603      	mov	r3, r0
 8001ee0:	70fb      	strb	r3, [r7, #3]
 8001ee2:	460b      	mov	r3, r1
 8001ee4:	70bb      	strb	r3, [r7, #2]
 8001ee6:	4613      	mov	r3, r2
 8001ee8:	707b      	strb	r3, [r7, #1]
  uint32_t tmpreg1 = 0, tmpreg2 = 0, tmpreg3 = 0;
 8001eea:	2300      	movs	r3, #0
 8001eec:	617b      	str	r3, [r7, #20]
 8001eee:	2300      	movs	r3, #0
 8001ef0:	613b      	str	r3, [r7, #16]
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_INJECTED_RANK(Rank));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (ADC_Channel > ADC_Channel_9)
 8001ef6:	78fb      	ldrb	r3, [r7, #3]
 8001ef8:	2b09      	cmp	r3, #9
 8001efa:	d923      	bls.n	8001f44 <ADC_InjectedChannelConfig+0x74>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	68db      	ldr	r3, [r3, #12]
 8001f00:	617b      	str	r3, [r7, #20]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR1_SMP_SET << (3*(ADC_Channel - 10));
 8001f02:	78fb      	ldrb	r3, [r7, #3]
 8001f04:	f1a3 020a 	sub.w	r2, r3, #10
 8001f08:	4613      	mov	r3, r2
 8001f0a:	005b      	lsls	r3, r3, #1
 8001f0c:	4413      	add	r3, r2
 8001f0e:	2207      	movs	r2, #7
 8001f10:	fa02 f303 	lsl.w	r3, r2, r3
 8001f14:	613b      	str	r3, [r7, #16]
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 8001f16:	693b      	ldr	r3, [r7, #16]
 8001f18:	43db      	mvns	r3, r3
 8001f1a:	697a      	ldr	r2, [r7, #20]
 8001f1c:	4013      	ands	r3, r2
 8001f1e:	617b      	str	r3, [r7, #20]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3*(ADC_Channel - 10));
 8001f20:	7879      	ldrb	r1, [r7, #1]
 8001f22:	78fb      	ldrb	r3, [r7, #3]
 8001f24:	f1a3 020a 	sub.w	r2, r3, #10
 8001f28:	4613      	mov	r3, r2
 8001f2a:	005b      	lsls	r3, r3, #1
 8001f2c:	4413      	add	r3, r2
 8001f2e:	fa01 f303 	lsl.w	r3, r1, r3
 8001f32:	613b      	str	r3, [r7, #16]
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 8001f34:	697a      	ldr	r2, [r7, #20]
 8001f36:	693b      	ldr	r3, [r7, #16]
 8001f38:	4313      	orrs	r3, r2
 8001f3a:	617b      	str	r3, [r7, #20]
    /* Store the new register value */
    ADCx->SMPR1 = tmpreg1;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	697a      	ldr	r2, [r7, #20]
 8001f40:	60da      	str	r2, [r3, #12]
 8001f42:	e01e      	b.n	8001f82 <ADC_InjectedChannelConfig+0xb2>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	691b      	ldr	r3, [r3, #16]
 8001f48:	617b      	str	r3, [r7, #20]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR2_SMP_SET << (3 * ADC_Channel);
 8001f4a:	78fa      	ldrb	r2, [r7, #3]
 8001f4c:	4613      	mov	r3, r2
 8001f4e:	005b      	lsls	r3, r3, #1
 8001f50:	4413      	add	r3, r2
 8001f52:	2207      	movs	r2, #7
 8001f54:	fa02 f303 	lsl.w	r3, r2, r3
 8001f58:	613b      	str	r3, [r7, #16]
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 8001f5a:	693b      	ldr	r3, [r7, #16]
 8001f5c:	43db      	mvns	r3, r3
 8001f5e:	697a      	ldr	r2, [r7, #20]
 8001f60:	4013      	ands	r3, r2
 8001f62:	617b      	str	r3, [r7, #20]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
 8001f64:	7879      	ldrb	r1, [r7, #1]
 8001f66:	78fa      	ldrb	r2, [r7, #3]
 8001f68:	4613      	mov	r3, r2
 8001f6a:	005b      	lsls	r3, r3, #1
 8001f6c:	4413      	add	r3, r2
 8001f6e:	fa01 f303 	lsl.w	r3, r1, r3
 8001f72:	613b      	str	r3, [r7, #16]
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 8001f74:	697a      	ldr	r2, [r7, #20]
 8001f76:	693b      	ldr	r3, [r7, #16]
 8001f78:	4313      	orrs	r3, r2
 8001f7a:	617b      	str	r3, [r7, #20]
    /* Store the new register value */
    ADCx->SMPR2 = tmpreg1;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	697a      	ldr	r2, [r7, #20]
 8001f80:	611a      	str	r2, [r3, #16]
  }
  /* Rank configuration */
  /* Get the old register value */
  tmpreg1 = ADCx->JSQR;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f86:	617b      	str	r3, [r7, #20]
  /* Get JL value: Number = JL+1 */
  tmpreg3 =  (tmpreg1 & JSQR_JL_SET)>> 20;
 8001f88:	697b      	ldr	r3, [r7, #20]
 8001f8a:	0d1b      	lsrs	r3, r3, #20
 8001f8c:	f003 0303 	and.w	r3, r3, #3
 8001f90:	60fb      	str	r3, [r7, #12]
  /* Calculate the mask to clear: ((Rank-1)+(4-JL-1)) */
  tmpreg2 = JSQR_JSQ_SET << (5 * (uint8_t)((Rank + 3) - (tmpreg3 + 1)));
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	b2db      	uxtb	r3, r3
 8001f96:	78ba      	ldrb	r2, [r7, #2]
 8001f98:	1ad3      	subs	r3, r2, r3
 8001f9a:	b2db      	uxtb	r3, r3
 8001f9c:	3302      	adds	r3, #2
 8001f9e:	b2db      	uxtb	r3, r3
 8001fa0:	461a      	mov	r2, r3
 8001fa2:	4613      	mov	r3, r2
 8001fa4:	009b      	lsls	r3, r3, #2
 8001fa6:	4413      	add	r3, r2
 8001fa8:	221f      	movs	r2, #31
 8001faa:	fa02 f303 	lsl.w	r3, r2, r3
 8001fae:	613b      	str	r3, [r7, #16]
  /* Clear the old JSQx bits for the selected rank */
  tmpreg1 &= ~tmpreg2;
 8001fb0:	693b      	ldr	r3, [r7, #16]
 8001fb2:	43db      	mvns	r3, r3
 8001fb4:	697a      	ldr	r2, [r7, #20]
 8001fb6:	4013      	ands	r3, r2
 8001fb8:	617b      	str	r3, [r7, #20]
  /* Calculate the mask to set: ((Rank-1)+(4-JL-1)) */
  tmpreg2 = (uint32_t)ADC_Channel << (5 * (uint8_t)((Rank + 3) - (tmpreg3 + 1)));
 8001fba:	78fa      	ldrb	r2, [r7, #3]
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	b2db      	uxtb	r3, r3
 8001fc0:	78b9      	ldrb	r1, [r7, #2]
 8001fc2:	1acb      	subs	r3, r1, r3
 8001fc4:	b2db      	uxtb	r3, r3
 8001fc6:	3302      	adds	r3, #2
 8001fc8:	b2db      	uxtb	r3, r3
 8001fca:	4619      	mov	r1, r3
 8001fcc:	460b      	mov	r3, r1
 8001fce:	009b      	lsls	r3, r3, #2
 8001fd0:	440b      	add	r3, r1
 8001fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd6:	613b      	str	r3, [r7, #16]
  /* Set the JSQx bits for the selected rank */
  tmpreg1 |= tmpreg2;
 8001fd8:	697a      	ldr	r2, [r7, #20]
 8001fda:	693b      	ldr	r3, [r7, #16]
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	617b      	str	r3, [r7, #20]
  /* Store the new register value */
  ADCx->JSQR = tmpreg1;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	697a      	ldr	r2, [r7, #20]
 8001fe4:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001fe6:	bf00      	nop
 8001fe8:	371c      	adds	r7, #28
 8001fea:	46bd      	mov	sp, r7
 8001fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff0:	4770      	bx	lr

08001ff2 <ADC_InjectedSequencerLengthConfig>:
  * @param  Length: The sequencer length. 
  *          This parameter must be a number between 1 to 4.
  * @retval None
  */
void ADC_InjectedSequencerLengthConfig(ADC_TypeDef* ADCx, uint8_t Length)
{
 8001ff2:	b480      	push	{r7}
 8001ff4:	b085      	sub	sp, #20
 8001ff6:	af00      	add	r7, sp, #0
 8001ff8:	6078      	str	r0, [r7, #4]
 8001ffa:	460b      	mov	r3, r1
 8001ffc:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpreg1 = 0;
 8001ffe:	2300      	movs	r3, #0
 8002000:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg2 = 0;
 8002002:	2300      	movs	r3, #0
 8002004:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_INJECTED_LENGTH(Length));
  
  /* Get the old register value */
  tmpreg1 = ADCx->JSQR;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800200a:	60fb      	str	r3, [r7, #12]
  
  /* Clear the old injected sequence length JL bits */
  tmpreg1 &= JSQR_JL_RESET;
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8002012:	60fb      	str	r3, [r7, #12]
  
  /* Set the injected sequence length JL bits */
  tmpreg2 = Length - 1; 
 8002014:	78fb      	ldrb	r3, [r7, #3]
 8002016:	3b01      	subs	r3, #1
 8002018:	60bb      	str	r3, [r7, #8]
  tmpreg1 |= tmpreg2 << 20;
 800201a:	68bb      	ldr	r3, [r7, #8]
 800201c:	051b      	lsls	r3, r3, #20
 800201e:	68fa      	ldr	r2, [r7, #12]
 8002020:	4313      	orrs	r3, r2
 8002022:	60fb      	str	r3, [r7, #12]
  
  /* Store the new register value */
  ADCx->JSQR = tmpreg1;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	68fa      	ldr	r2, [r7, #12]
 8002028:	639a      	str	r2, [r3, #56]	; 0x38
}
 800202a:	bf00      	nop
 800202c:	3714      	adds	r7, #20
 800202e:	46bd      	mov	sp, r7
 8002030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002034:	4770      	bx	lr

08002036 <ADC_SetInjectedOffset>:
  * @param  Offset: the offset value for the selected ADC injected channel
  *          This parameter must be a 12bit value.
  * @retval None
  */
void ADC_SetInjectedOffset(ADC_TypeDef* ADCx, uint8_t ADC_InjectedChannel, uint16_t Offset)
{
 8002036:	b480      	push	{r7}
 8002038:	b085      	sub	sp, #20
 800203a:	af00      	add	r7, sp, #0
 800203c:	6078      	str	r0, [r7, #4]
 800203e:	460b      	mov	r3, r1
 8002040:	70fb      	strb	r3, [r7, #3]
 8002042:	4613      	mov	r3, r2
 8002044:	803b      	strh	r3, [r7, #0]
    __IO uint32_t tmp = 0;
 8002046:	2300      	movs	r3, #0
 8002048:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_INJECTED_CHANNEL(ADC_InjectedChannel));
  assert_param(IS_ADC_OFFSET(Offset));
  
  tmp = (uint32_t)ADCx;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	60fb      	str	r3, [r7, #12]
  tmp += ADC_InjectedChannel;
 800204e:	78fa      	ldrb	r2, [r7, #3]
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	4413      	add	r3, r2
 8002054:	60fb      	str	r3, [r7, #12]
  
  /* Set the selected injected channel data offset */
 *(__IO uint32_t *) tmp = (uint32_t)Offset;
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	461a      	mov	r2, r3
 800205a:	883b      	ldrh	r3, [r7, #0]
 800205c:	6013      	str	r3, [r2, #0]
}
 800205e:	bf00      	nop
 8002060:	3714      	adds	r7, #20
 8002062:	46bd      	mov	sp, r7
 8002064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002068:	4770      	bx	lr

0800206a <ADC_ExternalTrigInjectedConvConfig>:
  *            @arg ADC_ExternalTrigInjecConv_T8_CC4: Timer8 capture compare4 selected 
  *            @arg ADC_ExternalTrigInjecConv_Ext_IT15: External interrupt line 15 event selected                          
  * @retval None
  */
void ADC_ExternalTrigInjectedConvConfig(ADC_TypeDef* ADCx, uint32_t ADC_ExternalTrigInjecConv)
{
 800206a:	b480      	push	{r7}
 800206c:	b085      	sub	sp, #20
 800206e:	af00      	add	r7, sp, #0
 8002070:	6078      	str	r0, [r7, #4]
 8002072:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8002074:	2300      	movs	r3, #0
 8002076:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_EXT_INJEC_TRIG(ADC_ExternalTrigInjecConv));
  
  /* Get the old register value */
  tmpreg = ADCx->CR2;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	689b      	ldr	r3, [r3, #8]
 800207c:	60fb      	str	r3, [r7, #12]
  
  /* Clear the old external event selection for injected group */
  tmpreg &= CR2_JEXTSEL_RESET;
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8002084:	60fb      	str	r3, [r7, #12]
  
  /* Set the external event selection for injected group */
  tmpreg |= ADC_ExternalTrigInjecConv;
 8002086:	68fa      	ldr	r2, [r7, #12]
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	4313      	orrs	r3, r2
 800208c:	60fb      	str	r3, [r7, #12]
  
  /* Store the new register value */
  ADCx->CR2 = tmpreg;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	68fa      	ldr	r2, [r7, #12]
 8002092:	609a      	str	r2, [r3, #8]
}
 8002094:	bf00      	nop
 8002096:	3714      	adds	r7, #20
 8002098:	46bd      	mov	sp, r7
 800209a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209e:	4770      	bx	lr

080020a0 <ADC_ExternalTrigInjectedConvEdgeConfig>:
  *            @arg ADC_ExternalTrigInjecConvEdge_RisingFalling: detection on both rising 
  *                                                               and falling edge
  * @retval None
  */
void ADC_ExternalTrigInjectedConvEdgeConfig(ADC_TypeDef* ADCx, uint32_t ADC_ExternalTrigInjecConvEdge)
{
 80020a0:	b480      	push	{r7}
 80020a2:	b085      	sub	sp, #20
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
 80020a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80020aa:	2300      	movs	r3, #0
 80020ac:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_EXT_INJEC_TRIG_EDGE(ADC_ExternalTrigInjecConvEdge));
  /* Get the old register value */
  tmpreg = ADCx->CR2;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	689b      	ldr	r3, [r3, #8]
 80020b2:	60fb      	str	r3, [r7, #12]
  /* Clear the old external trigger edge for injected group */
  tmpreg &= CR2_JEXTEN_RESET;
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80020ba:	60fb      	str	r3, [r7, #12]
  /* Set the new external trigger edge for injected group */
  tmpreg |= ADC_ExternalTrigInjecConvEdge;
 80020bc:	68fa      	ldr	r2, [r7, #12]
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	4313      	orrs	r3, r2
 80020c2:	60fb      	str	r3, [r7, #12]
  /* Store the new register value */
  ADCx->CR2 = tmpreg;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	68fa      	ldr	r2, [r7, #12]
 80020c8:	609a      	str	r2, [r3, #8]
}
 80020ca:	bf00      	nop
 80020cc:	3714      	adds	r7, #20
 80020ce:	46bd      	mov	sp, r7
 80020d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d4:	4770      	bx	lr

080020d6 <ADC_SoftwareStartInjectedConv>:
  * @brief  Enables the selected ADC software start conversion of the injected channels.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval None
  */
void ADC_SoftwareStartInjectedConv(ADC_TypeDef* ADCx)
{
 80020d6:	b480      	push	{r7}
 80020d8:	b083      	sub	sp, #12
 80020da:	af00      	add	r7, sp, #0
 80020dc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Enable the selected ADC conversion for injected group */
  ADCx->CR2 |= (uint32_t)ADC_CR2_JSWSTART;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	689b      	ldr	r3, [r3, #8]
 80020e2:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	609a      	str	r2, [r3, #8]
}
 80020ea:	bf00      	nop
 80020ec:	370c      	adds	r7, #12
 80020ee:	46bd      	mov	sp, r7
 80020f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f4:	4770      	bx	lr

080020f6 <ADC_GetSoftwareStartInjectedConvCmdStatus>:
  * @brief  Gets the selected ADC Software start injected conversion Status.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval The new state of ADC software start injected conversion (SET or RESET).
  */
FlagStatus ADC_GetSoftwareStartInjectedConvCmdStatus(ADC_TypeDef* ADCx)
{
 80020f6:	b480      	push	{r7}
 80020f8:	b085      	sub	sp, #20
 80020fa:	af00      	add	r7, sp, #0
 80020fc:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 80020fe:	2300      	movs	r3, #0
 8002100:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  
  /* Check the status of JSWSTART bit */
  if ((ADCx->CR2 & ADC_CR2_JSWSTART) != (uint32_t)RESET)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	689b      	ldr	r3, [r3, #8]
 8002106:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800210a:	2b00      	cmp	r3, #0
 800210c:	d002      	beq.n	8002114 <ADC_GetSoftwareStartInjectedConvCmdStatus+0x1e>
  {
    /* JSWSTART bit is set */
    bitstatus = SET;
 800210e:	2301      	movs	r3, #1
 8002110:	73fb      	strb	r3, [r7, #15]
 8002112:	e001      	b.n	8002118 <ADC_GetSoftwareStartInjectedConvCmdStatus+0x22>
  }
  else
  {
    /* JSWSTART bit is reset */
    bitstatus = RESET;
 8002114:	2300      	movs	r3, #0
 8002116:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the JSWSTART bit status */
  return  bitstatus;
 8002118:	7bfb      	ldrb	r3, [r7, #15]
}
 800211a:	4618      	mov	r0, r3
 800211c:	3714      	adds	r7, #20
 800211e:	46bd      	mov	sp, r7
 8002120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002124:	4770      	bx	lr

08002126 <ADC_AutoInjectedConvCmd>:
  * @param  NewState: new state of the selected ADC auto injected conversion
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_AutoInjectedConvCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8002126:	b480      	push	{r7}
 8002128:	b083      	sub	sp, #12
 800212a:	af00      	add	r7, sp, #0
 800212c:	6078      	str	r0, [r7, #4]
 800212e:	460b      	mov	r3, r1
 8002130:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8002132:	78fb      	ldrb	r3, [r7, #3]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d006      	beq.n	8002146 <ADC_AutoInjectedConvCmd+0x20>
  {
    /* Enable the selected ADC automatic injected group conversion */
    ADCx->CR1 |= (uint32_t)ADC_CR1_JAUTO;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	605a      	str	r2, [r3, #4]
  else
  {
    /* Disable the selected ADC automatic injected group conversion */
    ADCx->CR1 &= (uint32_t)(~ADC_CR1_JAUTO);
  }
}
 8002144:	e005      	b.n	8002152 <ADC_AutoInjectedConvCmd+0x2c>
    ADCx->CR1 &= (uint32_t)(~ADC_CR1_JAUTO);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	605a      	str	r2, [r3, #4]
}
 8002152:	bf00      	nop
 8002154:	370c      	adds	r7, #12
 8002156:	46bd      	mov	sp, r7
 8002158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215c:	4770      	bx	lr

0800215e <ADC_InjectedDiscModeCmd>:
  *         group channel.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_InjectedDiscModeCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 800215e:	b480      	push	{r7}
 8002160:	b083      	sub	sp, #12
 8002162:	af00      	add	r7, sp, #0
 8002164:	6078      	str	r0, [r7, #4]
 8002166:	460b      	mov	r3, r1
 8002168:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800216a:	78fb      	ldrb	r3, [r7, #3]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d006      	beq.n	800217e <ADC_InjectedDiscModeCmd+0x20>
  {
    /* Enable the selected ADC injected discontinuous mode */
    ADCx->CR1 |= (uint32_t)ADC_CR1_JDISCEN;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	605a      	str	r2, [r3, #4]
  else
  {
    /* Disable the selected ADC injected discontinuous mode */
    ADCx->CR1 &= (uint32_t)(~ADC_CR1_JDISCEN);
  }
}
 800217c:	e005      	b.n	800218a <ADC_InjectedDiscModeCmd+0x2c>
    ADCx->CR1 &= (uint32_t)(~ADC_CR1_JDISCEN);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	605a      	str	r2, [r3, #4]
}
 800218a:	bf00      	nop
 800218c:	370c      	adds	r7, #12
 800218e:	46bd      	mov	sp, r7
 8002190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002194:	4770      	bx	lr

08002196 <ADC_GetInjectedConversionValue>:
  *            @arg ADC_InjectedChannel_3: Injected Channel3 selected
  *            @arg ADC_InjectedChannel_4: Injected Channel4 selected
  * @retval The Data conversion value.
  */
uint16_t ADC_GetInjectedConversionValue(ADC_TypeDef* ADCx, uint8_t ADC_InjectedChannel)
{
 8002196:	b480      	push	{r7}
 8002198:	b085      	sub	sp, #20
 800219a:	af00      	add	r7, sp, #0
 800219c:	6078      	str	r0, [r7, #4]
 800219e:	460b      	mov	r3, r1
 80021a0:	70fb      	strb	r3, [r7, #3]
  __IO uint32_t tmp = 0;
 80021a2:	2300      	movs	r3, #0
 80021a4:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_INJECTED_CHANNEL(ADC_InjectedChannel));

  tmp = (uint32_t)ADCx;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	60fb      	str	r3, [r7, #12]
  tmp += ADC_InjectedChannel + JDR_OFFSET;
 80021aa:	78fa      	ldrb	r2, [r7, #3]
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	4413      	add	r3, r2
 80021b0:	3328      	adds	r3, #40	; 0x28
 80021b2:	60fb      	str	r3, [r7, #12]
  
  /* Returns the selected injected channel conversion data value */
  return (uint16_t) (*(__IO uint32_t*)  tmp); 
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	b29b      	uxth	r3, r3
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	3714      	adds	r7, #20
 80021be:	46bd      	mov	sp, r7
 80021c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c4:	4770      	bx	lr

080021c6 <ADC_ITConfig>:
  * @param  NewState: new state of the specified ADC interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_ITConfig(ADC_TypeDef* ADCx, uint16_t ADC_IT, FunctionalState NewState)  
{
 80021c6:	b480      	push	{r7}
 80021c8:	b085      	sub	sp, #20
 80021ca:	af00      	add	r7, sp, #0
 80021cc:	6078      	str	r0, [r7, #4]
 80021ce:	460b      	mov	r3, r1
 80021d0:	807b      	strh	r3, [r7, #2]
 80021d2:	4613      	mov	r3, r2
 80021d4:	707b      	strb	r3, [r7, #1]
  uint32_t itmask = 0;
 80021d6:	2300      	movs	r3, #0
 80021d8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_ADC_IT(ADC_IT)); 

  /* Get the ADC IT index */
  itmask = (uint8_t)ADC_IT;
 80021da:	887b      	ldrh	r3, [r7, #2]
 80021dc:	b2db      	uxtb	r3, r3
 80021de:	60fb      	str	r3, [r7, #12]
  itmask = (uint32_t)0x01 << itmask;    
 80021e0:	2201      	movs	r2, #1
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	fa02 f303 	lsl.w	r3, r2, r3
 80021e8:	60fb      	str	r3, [r7, #12]

  if (NewState != DISABLE)
 80021ea:	787b      	ldrb	r3, [r7, #1]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d006      	beq.n	80021fe <ADC_ITConfig+0x38>
  {
    /* Enable the selected ADC interrupts */
    ADCx->CR1 |= itmask;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	685a      	ldr	r2, [r3, #4]
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	431a      	orrs	r2, r3
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	605a      	str	r2, [r3, #4]
  else
  {
    /* Disable the selected ADC interrupts */
    ADCx->CR1 &= (~(uint32_t)itmask);
  }
}
 80021fc:	e006      	b.n	800220c <ADC_ITConfig+0x46>
    ADCx->CR1 &= (~(uint32_t)itmask);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	685a      	ldr	r2, [r3, #4]
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	43db      	mvns	r3, r3
 8002206:	401a      	ands	r2, r3
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	605a      	str	r2, [r3, #4]
}
 800220c:	bf00      	nop
 800220e:	3714      	adds	r7, #20
 8002210:	46bd      	mov	sp, r7
 8002212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002216:	4770      	bx	lr

08002218 <ADC_GetFlagStatus>:
  *            @arg ADC_FLAG_STRT: Start of regular group conversion flag
  *            @arg ADC_FLAG_OVR: Overrun flag                                                 
  * @retval The new state of ADC_FLAG (SET or RESET).
  */
FlagStatus ADC_GetFlagStatus(ADC_TypeDef* ADCx, uint8_t ADC_FLAG)
{
 8002218:	b480      	push	{r7}
 800221a:	b085      	sub	sp, #20
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
 8002220:	460b      	mov	r3, r1
 8002222:	70fb      	strb	r3, [r7, #3]
  FlagStatus bitstatus = RESET;
 8002224:	2300      	movs	r3, #0
 8002226:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_GET_FLAG(ADC_FLAG));

  /* Check the status of the specified ADC flag */
  if ((ADCx->SR & ADC_FLAG) != (uint8_t)RESET)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681a      	ldr	r2, [r3, #0]
 800222c:	78fb      	ldrb	r3, [r7, #3]
 800222e:	4013      	ands	r3, r2
 8002230:	2b00      	cmp	r3, #0
 8002232:	d002      	beq.n	800223a <ADC_GetFlagStatus+0x22>
  {
    /* ADC_FLAG is set */
    bitstatus = SET;
 8002234:	2301      	movs	r3, #1
 8002236:	73fb      	strb	r3, [r7, #15]
 8002238:	e001      	b.n	800223e <ADC_GetFlagStatus+0x26>
  }
  else
  {
    /* ADC_FLAG is reset */
    bitstatus = RESET;
 800223a:	2300      	movs	r3, #0
 800223c:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the ADC_FLAG status */
  return  bitstatus;
 800223e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002240:	4618      	mov	r0, r3
 8002242:	3714      	adds	r7, #20
 8002244:	46bd      	mov	sp, r7
 8002246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224a:	4770      	bx	lr

0800224c <ADC_ClearFlag>:
  *            @arg ADC_FLAG_STRT: Start of regular group conversion flag
  *            @arg ADC_FLAG_OVR: Overrun flag                          
  * @retval None
  */
void ADC_ClearFlag(ADC_TypeDef* ADCx, uint8_t ADC_FLAG)
{
 800224c:	b480      	push	{r7}
 800224e:	b083      	sub	sp, #12
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
 8002254:	460b      	mov	r3, r1
 8002256:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CLEAR_FLAG(ADC_FLAG));

  /* Clear the selected ADC flags */
  ADCx->SR = ~(uint32_t)ADC_FLAG;
 8002258:	78fb      	ldrb	r3, [r7, #3]
 800225a:	43da      	mvns	r2, r3
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	601a      	str	r2, [r3, #0]
}
 8002260:	bf00      	nop
 8002262:	370c      	adds	r7, #12
 8002264:	46bd      	mov	sp, r7
 8002266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226a:	4770      	bx	lr

0800226c <ADC_GetITStatus>:
  *            @arg ADC_IT_JEOC: End of injected conversion interrupt mask
  *            @arg ADC_IT_OVR: Overrun interrupt mask                        
  * @retval The new state of ADC_IT (SET or RESET).
  */
ITStatus ADC_GetITStatus(ADC_TypeDef* ADCx, uint16_t ADC_IT)
{
 800226c:	b480      	push	{r7}
 800226e:	b087      	sub	sp, #28
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
 8002274:	460b      	mov	r3, r1
 8002276:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET;
 8002278:	2300      	movs	r3, #0
 800227a:	75fb      	strb	r3, [r7, #23]
  uint32_t itmask = 0, enablestatus = 0;
 800227c:	2300      	movs	r3, #0
 800227e:	613b      	str	r3, [r7, #16]
 8002280:	2300      	movs	r3, #0
 8002282:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_IT(ADC_IT));

  /* Get the ADC IT index */
  itmask = ADC_IT >> 8;
 8002284:	887b      	ldrh	r3, [r7, #2]
 8002286:	0a1b      	lsrs	r3, r3, #8
 8002288:	b29b      	uxth	r3, r3
 800228a:	613b      	str	r3, [r7, #16]

  /* Get the ADC_IT enable bit status */
  enablestatus = (ADCx->CR1 & ((uint32_t)0x01 << (uint8_t)ADC_IT)) ;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	685a      	ldr	r2, [r3, #4]
 8002290:	887b      	ldrh	r3, [r7, #2]
 8002292:	b2db      	uxtb	r3, r3
 8002294:	4619      	mov	r1, r3
 8002296:	2301      	movs	r3, #1
 8002298:	408b      	lsls	r3, r1
 800229a:	4013      	ands	r3, r2
 800229c:	60fb      	str	r3, [r7, #12]

  /* Check the status of the specified ADC interrupt */
  if (((ADCx->SR & itmask) != (uint32_t)RESET) && enablestatus)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681a      	ldr	r2, [r3, #0]
 80022a2:	693b      	ldr	r3, [r7, #16]
 80022a4:	4013      	ands	r3, r2
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d005      	beq.n	80022b6 <ADC_GetITStatus+0x4a>
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d002      	beq.n	80022b6 <ADC_GetITStatus+0x4a>
  {
    /* ADC_IT is set */
    bitstatus = SET;
 80022b0:	2301      	movs	r3, #1
 80022b2:	75fb      	strb	r3, [r7, #23]
 80022b4:	e001      	b.n	80022ba <ADC_GetITStatus+0x4e>
  }
  else
  {
    /* ADC_IT is reset */
    bitstatus = RESET;
 80022b6:	2300      	movs	r3, #0
 80022b8:	75fb      	strb	r3, [r7, #23]
  }
  /* Return the ADC_IT status */
  return  bitstatus;
 80022ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80022bc:	4618      	mov	r0, r3
 80022be:	371c      	adds	r7, #28
 80022c0:	46bd      	mov	sp, r7
 80022c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c6:	4770      	bx	lr

080022c8 <ADC_ClearITPendingBit>:
  *            @arg ADC_IT_JEOC: End of injected conversion interrupt mask
  *            @arg ADC_IT_OVR: Overrun interrupt mask                         
  * @retval None
  */
void ADC_ClearITPendingBit(ADC_TypeDef* ADCx, uint16_t ADC_IT)
{
 80022c8:	b480      	push	{r7}
 80022ca:	b085      	sub	sp, #20
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
 80022d0:	460b      	mov	r3, r1
 80022d2:	807b      	strh	r3, [r7, #2]
  uint8_t itmask = 0;
 80022d4:	2300      	movs	r3, #0
 80022d6:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_IT(ADC_IT)); 
  /* Get the ADC IT index */
  itmask = (uint8_t)(ADC_IT >> 8);
 80022d8:	887b      	ldrh	r3, [r7, #2]
 80022da:	0a1b      	lsrs	r3, r3, #8
 80022dc:	b29b      	uxth	r3, r3
 80022de:	73fb      	strb	r3, [r7, #15]
  /* Clear the selected ADC interrupt pending bits */
  ADCx->SR = ~(uint32_t)itmask;
 80022e0:	7bfb      	ldrb	r3, [r7, #15]
 80022e2:	43da      	mvns	r2, r3
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	601a      	str	r2, [r3, #0]
}                    
 80022e8:	bf00      	nop
 80022ea:	3714      	adds	r7, #20
 80022ec:	46bd      	mov	sp, r7
 80022ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f2:	4770      	bx	lr

080022f4 <CAN_DeInit>:
  * @brief  Deinitializes the CAN peripheral registers to their default reset values.
  * @param  CANx: where x can be 1 or 2 to select the CAN peripheral.
  * @retval None.
  */
void CAN_DeInit(CAN_TypeDef* CANx)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b082      	sub	sp, #8
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
 
  if (CANx == CAN1)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	4a0e      	ldr	r2, [pc, #56]	; (8002338 <CAN_DeInit+0x44>)
 8002300:	4293      	cmp	r3, r2
 8002302:	d10a      	bne.n	800231a <CAN_DeInit+0x26>
  {
    /* Enable CAN1 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN1, ENABLE);
 8002304:	2101      	movs	r1, #1
 8002306:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 800230a:	f006 fc25 	bl	8008b58 <RCC_APB1PeriphResetCmd>
    /* Release CAN1 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN1, DISABLE);
 800230e:	2100      	movs	r1, #0
 8002310:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 8002314:	f006 fc20 	bl	8008b58 <RCC_APB1PeriphResetCmd>
    /* Enable CAN2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN2, ENABLE);
    /* Release CAN2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN2, DISABLE);
  }
}
 8002318:	e009      	b.n	800232e <CAN_DeInit+0x3a>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN2, ENABLE);
 800231a:	2101      	movs	r1, #1
 800231c:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8002320:	f006 fc1a 	bl	8008b58 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN2, DISABLE);
 8002324:	2100      	movs	r1, #0
 8002326:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 800232a:	f006 fc15 	bl	8008b58 <RCC_APB1PeriphResetCmd>
}
 800232e:	bf00      	nop
 8002330:	3708      	adds	r7, #8
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}
 8002336:	bf00      	nop
 8002338:	40006400 	.word	0x40006400

0800233c <CAN_Init>:
  *         the configuration information for the CAN peripheral.
  * @retval Constant indicates initialization succeed which will be 
  *         CAN_InitStatus_Failed or CAN_InitStatus_Success.
  */
uint8_t CAN_Init(CAN_TypeDef* CANx, CAN_InitTypeDef* CAN_InitStruct)
{
 800233c:	b480      	push	{r7}
 800233e:	b085      	sub	sp, #20
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
 8002344:	6039      	str	r1, [r7, #0]
  uint8_t InitStatus = CAN_InitStatus_Failed;
 8002346:	2300      	movs	r3, #0
 8002348:	73fb      	strb	r3, [r7, #15]
  uint32_t wait_ack = 0x00000000;
 800234a:	2300      	movs	r3, #0
 800234c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_CAN_BS1(CAN_InitStruct->CAN_BS1));
  assert_param(IS_CAN_BS2(CAN_InitStruct->CAN_BS2));
  assert_param(IS_CAN_PRESCALER(CAN_InitStruct->CAN_Prescaler));

  /* Exit from sleep mode */
  CANx->MCR &= (~(uint32_t)CAN_MCR_SLEEP);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f023 0202 	bic.w	r2, r3, #2
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	601a      	str	r2, [r3, #0]

  /* Request initialisation */
  CANx->MCR |= CAN_MCR_INRQ ;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f043 0201 	orr.w	r2, r3, #1
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	601a      	str	r2, [r3, #0]

  /* Wait the acknowledge */
  while (((CANx->MSR & CAN_MSR_INAK) != CAN_MSR_INAK) && (wait_ack != INAK_TIMEOUT))
 8002366:	e002      	b.n	800236e <CAN_Init+0x32>
  {
    wait_ack++;
 8002368:	68bb      	ldr	r3, [r7, #8]
 800236a:	3301      	adds	r3, #1
 800236c:	60bb      	str	r3, [r7, #8]
  while (((CANx->MSR & CAN_MSR_INAK) != CAN_MSR_INAK) && (wait_ack != INAK_TIMEOUT))
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	f003 0301 	and.w	r3, r3, #1
 8002376:	2b01      	cmp	r3, #1
 8002378:	d004      	beq.n	8002384 <CAN_Init+0x48>
 800237a:	68bb      	ldr	r3, [r7, #8]
 800237c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002380:	4293      	cmp	r3, r2
 8002382:	d1f1      	bne.n	8002368 <CAN_Init+0x2c>
  }

  /* Check acknowledge */
  if ((CANx->MSR & CAN_MSR_INAK) != CAN_MSR_INAK)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	f003 0301 	and.w	r3, r3, #1
 800238c:	2b01      	cmp	r3, #1
 800238e:	d002      	beq.n	8002396 <CAN_Init+0x5a>
  {
    InitStatus = CAN_InitStatus_Failed;
 8002390:	2300      	movs	r3, #0
 8002392:	73fb      	strb	r3, [r7, #15]
 8002394:	e09c      	b.n	80024d0 <CAN_Init+0x194>
  }
  else 
  {
    /* Set the time triggered communication mode */
    if (CAN_InitStruct->CAN_TTCM == ENABLE)
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	799b      	ldrb	r3, [r3, #6]
 800239a:	2b01      	cmp	r3, #1
 800239c:	d106      	bne.n	80023ac <CAN_Init+0x70>
    {
      CANx->MCR |= CAN_MCR_TTCM;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	601a      	str	r2, [r3, #0]
 80023aa:	e005      	b.n	80023b8 <CAN_Init+0x7c>
    }
    else
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_TTCM;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	601a      	str	r2, [r3, #0]
    }

    /* Set the automatic bus-off management */
    if (CAN_InitStruct->CAN_ABOM == ENABLE)
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	79db      	ldrb	r3, [r3, #7]
 80023bc:	2b01      	cmp	r3, #1
 80023be:	d106      	bne.n	80023ce <CAN_Init+0x92>
    {
      CANx->MCR |= CAN_MCR_ABOM;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	601a      	str	r2, [r3, #0]
 80023cc:	e005      	b.n	80023da <CAN_Init+0x9e>
    }
    else
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_ABOM;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	601a      	str	r2, [r3, #0]
    }

    /* Set the automatic wake-up mode */
    if (CAN_InitStruct->CAN_AWUM == ENABLE)
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	7a1b      	ldrb	r3, [r3, #8]
 80023de:	2b01      	cmp	r3, #1
 80023e0:	d106      	bne.n	80023f0 <CAN_Init+0xb4>
    {
      CANx->MCR |= CAN_MCR_AWUM;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f043 0220 	orr.w	r2, r3, #32
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	601a      	str	r2, [r3, #0]
 80023ee:	e005      	b.n	80023fc <CAN_Init+0xc0>
    }
    else
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_AWUM;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f023 0220 	bic.w	r2, r3, #32
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	601a      	str	r2, [r3, #0]
    }

    /* Set the no automatic retransmission */
    if (CAN_InitStruct->CAN_NART == ENABLE)
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	7a5b      	ldrb	r3, [r3, #9]
 8002400:	2b01      	cmp	r3, #1
 8002402:	d106      	bne.n	8002412 <CAN_Init+0xd6>
    {
      CANx->MCR |= CAN_MCR_NART;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f043 0210 	orr.w	r2, r3, #16
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	601a      	str	r2, [r3, #0]
 8002410:	e005      	b.n	800241e <CAN_Init+0xe2>
    }
    else
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_NART;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f023 0210 	bic.w	r2, r3, #16
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	601a      	str	r2, [r3, #0]
    }

    /* Set the receive FIFO locked mode */
    if (CAN_InitStruct->CAN_RFLM == ENABLE)
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	7a9b      	ldrb	r3, [r3, #10]
 8002422:	2b01      	cmp	r3, #1
 8002424:	d106      	bne.n	8002434 <CAN_Init+0xf8>
    {
      CANx->MCR |= CAN_MCR_RFLM;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f043 0208 	orr.w	r2, r3, #8
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	601a      	str	r2, [r3, #0]
 8002432:	e005      	b.n	8002440 <CAN_Init+0x104>
    }
    else
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_RFLM;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f023 0208 	bic.w	r2, r3, #8
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	601a      	str	r2, [r3, #0]
    }

    /* Set the transmit FIFO priority */
    if (CAN_InitStruct->CAN_TXFP == ENABLE)
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	7adb      	ldrb	r3, [r3, #11]
 8002444:	2b01      	cmp	r3, #1
 8002446:	d106      	bne.n	8002456 <CAN_Init+0x11a>
    {
      CANx->MCR |= CAN_MCR_TXFP;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f043 0204 	orr.w	r2, r3, #4
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	601a      	str	r2, [r3, #0]
 8002454:	e005      	b.n	8002462 <CAN_Init+0x126>
    }
    else
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_TXFP;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f023 0204 	bic.w	r2, r3, #4
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	601a      	str	r2, [r3, #0]
    }

    /* Set the bit timing register */
    CANx->BTR = (uint32_t)((uint32_t)CAN_InitStruct->CAN_Mode << 30) | \
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	789b      	ldrb	r3, [r3, #2]
 8002466:	079a      	lsls	r2, r3, #30
                ((uint32_t)CAN_InitStruct->CAN_SJW << 24) | \
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	78db      	ldrb	r3, [r3, #3]
 800246c:	061b      	lsls	r3, r3, #24
    CANx->BTR = (uint32_t)((uint32_t)CAN_InitStruct->CAN_Mode << 30) | \
 800246e:	431a      	orrs	r2, r3
                ((uint32_t)CAN_InitStruct->CAN_BS1 << 16) | \
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	791b      	ldrb	r3, [r3, #4]
 8002474:	041b      	lsls	r3, r3, #16
                ((uint32_t)CAN_InitStruct->CAN_SJW << 24) | \
 8002476:	431a      	orrs	r2, r3
                ((uint32_t)CAN_InitStruct->CAN_BS2 << 20) | \
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	795b      	ldrb	r3, [r3, #5]
 800247c:	051b      	lsls	r3, r3, #20
                ((uint32_t)CAN_InitStruct->CAN_BS1 << 16) | \
 800247e:	431a      	orrs	r2, r3
               ((uint32_t)CAN_InitStruct->CAN_Prescaler - 1);
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	881b      	ldrh	r3, [r3, #0]
 8002484:	3b01      	subs	r3, #1
                ((uint32_t)CAN_InitStruct->CAN_BS2 << 20) | \
 8002486:	431a      	orrs	r2, r3
    CANx->BTR = (uint32_t)((uint32_t)CAN_InitStruct->CAN_Mode << 30) | \
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	61da      	str	r2, [r3, #28]

    /* Request leave initialisation */
    CANx->MCR &= ~(uint32_t)CAN_MCR_INRQ;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f023 0201 	bic.w	r2, r3, #1
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	601a      	str	r2, [r3, #0]

   /* Wait the acknowledge */
   wait_ack = 0;
 8002498:	2300      	movs	r3, #0
 800249a:	60bb      	str	r3, [r7, #8]

   while (((CANx->MSR & CAN_MSR_INAK) == CAN_MSR_INAK) && (wait_ack != INAK_TIMEOUT))
 800249c:	e002      	b.n	80024a4 <CAN_Init+0x168>
   {
     wait_ack++;
 800249e:	68bb      	ldr	r3, [r7, #8]
 80024a0:	3301      	adds	r3, #1
 80024a2:	60bb      	str	r3, [r7, #8]
   while (((CANx->MSR & CAN_MSR_INAK) == CAN_MSR_INAK) && (wait_ack != INAK_TIMEOUT))
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	f003 0301 	and.w	r3, r3, #1
 80024ac:	2b01      	cmp	r3, #1
 80024ae:	d104      	bne.n	80024ba <CAN_Init+0x17e>
 80024b0:	68bb      	ldr	r3, [r7, #8]
 80024b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d1f1      	bne.n	800249e <CAN_Init+0x162>
   }

    /* ...and check acknowledged */
    if ((CANx->MSR & CAN_MSR_INAK) == CAN_MSR_INAK)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	f003 0301 	and.w	r3, r3, #1
 80024c2:	2b01      	cmp	r3, #1
 80024c4:	d102      	bne.n	80024cc <CAN_Init+0x190>
    {
      InitStatus = CAN_InitStatus_Failed;
 80024c6:	2300      	movs	r3, #0
 80024c8:	73fb      	strb	r3, [r7, #15]
 80024ca:	e001      	b.n	80024d0 <CAN_Init+0x194>
    }
    else
    {
      InitStatus = CAN_InitStatus_Success ;
 80024cc:	2301      	movs	r3, #1
 80024ce:	73fb      	strb	r3, [r7, #15]
    }
  }

  /* At this step, return the status of initialization */
  return InitStatus;
 80024d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80024d2:	4618      	mov	r0, r3
 80024d4:	3714      	adds	r7, #20
 80024d6:	46bd      	mov	sp, r7
 80024d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024dc:	4770      	bx	lr

080024de <CAN_FilterInit>:
  * @param  CAN_FilterInitStruct: pointer to a CAN_FilterInitTypeDef structure that
  *         contains the configuration information.
  * @retval None
  */
void CAN_FilterInit(CAN_FilterInitTypeDef* CAN_FilterInitStruct)
{
 80024de:	b490      	push	{r4, r7}
 80024e0:	b084      	sub	sp, #16
 80024e2:	af00      	add	r7, sp, #0
 80024e4:	6078      	str	r0, [r7, #4]
  uint32_t filter_number_bit_pos = 0;
 80024e6:	2300      	movs	r3, #0
 80024e8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_CAN_FILTER_MODE(CAN_FilterInitStruct->CAN_FilterMode));
  assert_param(IS_CAN_FILTER_SCALE(CAN_FilterInitStruct->CAN_FilterScale));
  assert_param(IS_CAN_FILTER_FIFO(CAN_FilterInitStruct->CAN_FilterFIFOAssignment));
  assert_param(IS_FUNCTIONAL_STATE(CAN_FilterInitStruct->CAN_FilterActivation));

  filter_number_bit_pos = ((uint32_t)1) << CAN_FilterInitStruct->CAN_FilterNumber;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	7a9b      	ldrb	r3, [r3, #10]
 80024ee:	461a      	mov	r2, r3
 80024f0:	2301      	movs	r3, #1
 80024f2:	4093      	lsls	r3, r2
 80024f4:	60fb      	str	r3, [r7, #12]

  /* Initialisation mode for the filter */
  CAN1->FMR |= FMR_FINIT;
 80024f6:	4b5a      	ldr	r3, [pc, #360]	; (8002660 <CAN_FilterInit+0x182>)
 80024f8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80024fc:	4a58      	ldr	r2, [pc, #352]	; (8002660 <CAN_FilterInit+0x182>)
 80024fe:	f043 0301 	orr.w	r3, r3, #1
 8002502:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

  /* Filter Deactivation */
  CAN1->FA1R &= ~(uint32_t)filter_number_bit_pos;
 8002506:	4b56      	ldr	r3, [pc, #344]	; (8002660 <CAN_FilterInit+0x182>)
 8002508:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	43db      	mvns	r3, r3
 8002510:	4953      	ldr	r1, [pc, #332]	; (8002660 <CAN_FilterInit+0x182>)
 8002512:	4013      	ands	r3, r2
 8002514:	f8c1 321c 	str.w	r3, [r1, #540]	; 0x21c

  /* Filter Scale */
  if (CAN_FilterInitStruct->CAN_FilterScale == CAN_FilterScale_16bit)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	7b1b      	ldrb	r3, [r3, #12]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d129      	bne.n	8002574 <CAN_FilterInit+0x96>
  {
    /* 16-bit scale for the filter */
    CAN1->FS1R &= ~(uint32_t)filter_number_bit_pos;
 8002520:	4b4f      	ldr	r3, [pc, #316]	; (8002660 <CAN_FilterInit+0x182>)
 8002522:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	43db      	mvns	r3, r3
 800252a:	494d      	ldr	r1, [pc, #308]	; (8002660 <CAN_FilterInit+0x182>)
 800252c:	4013      	ands	r3, r2
 800252e:	f8c1 320c 	str.w	r3, [r1, #524]	; 0x20c

    /* First 16-bit identifier and First 16-bit mask */
    /* Or First 16-bit identifier and Second 16-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow) << 16) |
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	88db      	ldrh	r3, [r3, #6]
 8002536:	041b      	lsls	r3, r3, #16
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);
 8002538:	687a      	ldr	r2, [r7, #4]
 800253a:	8852      	ldrh	r2, [r2, #2]
 800253c:	4614      	mov	r4, r2
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
 800253e:	4948      	ldr	r1, [pc, #288]	; (8002660 <CAN_FilterInit+0x182>)
 8002540:	687a      	ldr	r2, [r7, #4]
 8002542:	7a92      	ldrb	r2, [r2, #10]
 8002544:	4610      	mov	r0, r2
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow) << 16) |
 8002546:	ea43 0204 	orr.w	r2, r3, r4
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
 800254a:	f100 0348 	add.w	r3, r0, #72	; 0x48
 800254e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]

    /* Second 16-bit identifier and Second 16-bit mask */
    /* Or Third 16-bit identifier and Fourth 16-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	889b      	ldrh	r3, [r3, #4]
 8002556:	041b      	lsls	r3, r3, #16
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh);
 8002558:	687a      	ldr	r2, [r7, #4]
 800255a:	8812      	ldrh	r2, [r2, #0]
 800255c:	4614      	mov	r4, r2
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
 800255e:	4940      	ldr	r1, [pc, #256]	; (8002660 <CAN_FilterInit+0x182>)
 8002560:	687a      	ldr	r2, [r7, #4]
 8002562:	7a92      	ldrb	r2, [r2, #10]
 8002564:	4610      	mov	r0, r2
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
 8002566:	ea43 0204 	orr.w	r2, r3, r4
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
 800256a:	f100 0348 	add.w	r3, r0, #72	; 0x48
 800256e:	00db      	lsls	r3, r3, #3
 8002570:	440b      	add	r3, r1
 8002572:	605a      	str	r2, [r3, #4]
  }

  if (CAN_FilterInitStruct->CAN_FilterScale == CAN_FilterScale_32bit)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	7b1b      	ldrb	r3, [r3, #12]
 8002578:	2b01      	cmp	r3, #1
 800257a:	d128      	bne.n	80025ce <CAN_FilterInit+0xf0>
  {
    /* 32-bit scale for the filter */
    CAN1->FS1R |= filter_number_bit_pos;
 800257c:	4b38      	ldr	r3, [pc, #224]	; (8002660 <CAN_FilterInit+0x182>)
 800257e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002582:	4937      	ldr	r1, [pc, #220]	; (8002660 <CAN_FilterInit+0x182>)
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	4313      	orrs	r3, r2
 8002588:	f8c1 320c 	str.w	r3, [r1, #524]	; 0x20c
    /* 32-bit identifier or First 32-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh) << 16) |
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	881b      	ldrh	r3, [r3, #0]
 8002590:	041b      	lsls	r3, r3, #16
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);
 8002592:	687a      	ldr	r2, [r7, #4]
 8002594:	8852      	ldrh	r2, [r2, #2]
 8002596:	4614      	mov	r4, r2
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
 8002598:	4931      	ldr	r1, [pc, #196]	; (8002660 <CAN_FilterInit+0x182>)
 800259a:	687a      	ldr	r2, [r7, #4]
 800259c:	7a92      	ldrb	r2, [r2, #10]
 800259e:	4610      	mov	r0, r2
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh) << 16) |
 80025a0:	ea43 0204 	orr.w	r2, r3, r4
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
 80025a4:	f100 0348 	add.w	r3, r0, #72	; 0x48
 80025a8:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    /* 32-bit mask or Second 32-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	889b      	ldrh	r3, [r3, #4]
 80025b0:	041b      	lsls	r3, r3, #16
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow);
 80025b2:	687a      	ldr	r2, [r7, #4]
 80025b4:	88d2      	ldrh	r2, [r2, #6]
 80025b6:	4614      	mov	r4, r2
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
 80025b8:	4929      	ldr	r1, [pc, #164]	; (8002660 <CAN_FilterInit+0x182>)
 80025ba:	687a      	ldr	r2, [r7, #4]
 80025bc:	7a92      	ldrb	r2, [r2, #10]
 80025be:	4610      	mov	r0, r2
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
 80025c0:	ea43 0204 	orr.w	r2, r3, r4
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
 80025c4:	f100 0348 	add.w	r3, r0, #72	; 0x48
 80025c8:	00db      	lsls	r3, r3, #3
 80025ca:	440b      	add	r3, r1
 80025cc:	605a      	str	r2, [r3, #4]
  }

  /* Filter Mode */
  if (CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdMask)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	7adb      	ldrb	r3, [r3, #11]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d109      	bne.n	80025ea <CAN_FilterInit+0x10c>
  {
    /*Id/Mask mode for the filter*/
    CAN1->FM1R &= ~(uint32_t)filter_number_bit_pos;
 80025d6:	4b22      	ldr	r3, [pc, #136]	; (8002660 <CAN_FilterInit+0x182>)
 80025d8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	43db      	mvns	r3, r3
 80025e0:	491f      	ldr	r1, [pc, #124]	; (8002660 <CAN_FilterInit+0x182>)
 80025e2:	4013      	ands	r3, r2
 80025e4:	f8c1 3204 	str.w	r3, [r1, #516]	; 0x204
 80025e8:	e007      	b.n	80025fa <CAN_FilterInit+0x11c>
  }
  else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
  {
    /*Identifier list mode for the filter*/
    CAN1->FM1R |= (uint32_t)filter_number_bit_pos;
 80025ea:	4b1d      	ldr	r3, [pc, #116]	; (8002660 <CAN_FilterInit+0x182>)
 80025ec:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80025f0:	491b      	ldr	r1, [pc, #108]	; (8002660 <CAN_FilterInit+0x182>)
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	4313      	orrs	r3, r2
 80025f6:	f8c1 3204 	str.w	r3, [r1, #516]	; 0x204
  }

  /* Filter FIFO assignment */
  if (CAN_FilterInitStruct->CAN_FilterFIFOAssignment == CAN_Filter_FIFO0)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	891b      	ldrh	r3, [r3, #8]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d108      	bne.n	8002614 <CAN_FilterInit+0x136>
  {
    /* FIFO 0 assignation for the filter */
    CAN1->FFA1R &= ~(uint32_t)filter_number_bit_pos;
 8002602:	4b17      	ldr	r3, [pc, #92]	; (8002660 <CAN_FilterInit+0x182>)
 8002604:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	43db      	mvns	r3, r3
 800260c:	4914      	ldr	r1, [pc, #80]	; (8002660 <CAN_FilterInit+0x182>)
 800260e:	4013      	ands	r3, r2
 8002610:	f8c1 3214 	str.w	r3, [r1, #532]	; 0x214
  }

  if (CAN_FilterInitStruct->CAN_FilterFIFOAssignment == CAN_Filter_FIFO1)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	891b      	ldrh	r3, [r3, #8]
 8002618:	2b01      	cmp	r3, #1
 800261a:	d107      	bne.n	800262c <CAN_FilterInit+0x14e>
  {
    /* FIFO 1 assignation for the filter */
    CAN1->FFA1R |= (uint32_t)filter_number_bit_pos;
 800261c:	4b10      	ldr	r3, [pc, #64]	; (8002660 <CAN_FilterInit+0x182>)
 800261e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002622:	490f      	ldr	r1, [pc, #60]	; (8002660 <CAN_FilterInit+0x182>)
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	4313      	orrs	r3, r2
 8002628:	f8c1 3214 	str.w	r3, [r1, #532]	; 0x214
  }
  
  /* Filter activation */
  if (CAN_FilterInitStruct->CAN_FilterActivation == ENABLE)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	7b5b      	ldrb	r3, [r3, #13]
 8002630:	2b01      	cmp	r3, #1
 8002632:	d107      	bne.n	8002644 <CAN_FilterInit+0x166>
  {
    CAN1->FA1R |= filter_number_bit_pos;
 8002634:	4b0a      	ldr	r3, [pc, #40]	; (8002660 <CAN_FilterInit+0x182>)
 8002636:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800263a:	4909      	ldr	r1, [pc, #36]	; (8002660 <CAN_FilterInit+0x182>)
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	4313      	orrs	r3, r2
 8002640:	f8c1 321c 	str.w	r3, [r1, #540]	; 0x21c
  }

  /* Leave the initialisation mode for the filter */
  CAN1->FMR &= ~FMR_FINIT;
 8002644:	4b06      	ldr	r3, [pc, #24]	; (8002660 <CAN_FilterInit+0x182>)
 8002646:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800264a:	4a05      	ldr	r2, [pc, #20]	; (8002660 <CAN_FilterInit+0x182>)
 800264c:	f023 0301 	bic.w	r3, r3, #1
 8002650:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
 8002654:	bf00      	nop
 8002656:	3710      	adds	r7, #16
 8002658:	46bd      	mov	sp, r7
 800265a:	bc90      	pop	{r4, r7}
 800265c:	4770      	bx	lr
 800265e:	bf00      	nop
 8002660:	40006400 	.word	0x40006400

08002664 <CAN_StructInit>:
  * @brief  Fills each CAN_InitStruct member with its default value.
  * @param  CAN_InitStruct: pointer to a CAN_InitTypeDef structure which ill be initialized.
  * @retval None
  */
void CAN_StructInit(CAN_InitTypeDef* CAN_InitStruct)
{
 8002664:	b480      	push	{r7}
 8002666:	b083      	sub	sp, #12
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  /* Reset CAN init structure parameters values */
  
  /* Initialize the time triggered communication mode */
  CAN_InitStruct->CAN_TTCM = DISABLE;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2200      	movs	r2, #0
 8002670:	719a      	strb	r2, [r3, #6]
  
  /* Initialize the automatic bus-off management */
  CAN_InitStruct->CAN_ABOM = DISABLE;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2200      	movs	r2, #0
 8002676:	71da      	strb	r2, [r3, #7]
  
  /* Initialize the automatic wake-up mode */
  CAN_InitStruct->CAN_AWUM = DISABLE;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2200      	movs	r2, #0
 800267c:	721a      	strb	r2, [r3, #8]
  
  /* Initialize the no automatic retransmission */
  CAN_InitStruct->CAN_NART = DISABLE;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	2200      	movs	r2, #0
 8002682:	725a      	strb	r2, [r3, #9]
  
  /* Initialize the receive FIFO locked mode */
  CAN_InitStruct->CAN_RFLM = DISABLE;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2200      	movs	r2, #0
 8002688:	729a      	strb	r2, [r3, #10]
  
  /* Initialize the transmit FIFO priority */
  CAN_InitStruct->CAN_TXFP = DISABLE;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2200      	movs	r2, #0
 800268e:	72da      	strb	r2, [r3, #11]
  
  /* Initialize the CAN_Mode member */
  CAN_InitStruct->CAN_Mode = CAN_Mode_Normal;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2200      	movs	r2, #0
 8002694:	709a      	strb	r2, [r3, #2]
  
  /* Initialize the CAN_SJW member */
  CAN_InitStruct->CAN_SJW = CAN_SJW_1tq;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2200      	movs	r2, #0
 800269a:	70da      	strb	r2, [r3, #3]
  
  /* Initialize the CAN_BS1 member */
  CAN_InitStruct->CAN_BS1 = CAN_BS1_4tq;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2203      	movs	r2, #3
 80026a0:	711a      	strb	r2, [r3, #4]
  
  /* Initialize the CAN_BS2 member */
  CAN_InitStruct->CAN_BS2 = CAN_BS2_3tq;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2202      	movs	r2, #2
 80026a6:	715a      	strb	r2, [r3, #5]
  
  /* Initialize the CAN_Prescaler member */
  CAN_InitStruct->CAN_Prescaler = 1;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2201      	movs	r2, #1
 80026ac:	801a      	strh	r2, [r3, #0]
}
 80026ae:	bf00      	nop
 80026b0:	370c      	adds	r7, #12
 80026b2:	46bd      	mov	sp, r7
 80026b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b8:	4770      	bx	lr

080026ba <CAN_SlaveStartBank>:
  * @brief  Select the start bank filter for slave CAN.
  * @param  CAN_BankNumber: Select the start slave bank filter from 1..27.
  * @retval None
  */
void CAN_SlaveStartBank(uint8_t CAN_BankNumber) 
{
 80026ba:	b480      	push	{r7}
 80026bc:	b083      	sub	sp, #12
 80026be:	af00      	add	r7, sp, #0
 80026c0:	4603      	mov	r3, r0
 80026c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_CAN_BANKNUMBER(CAN_BankNumber));
  
  /* Enter Initialisation mode for the filter */
  CAN1->FMR |= FMR_FINIT;
 80026c4:	4b14      	ldr	r3, [pc, #80]	; (8002718 <CAN_SlaveStartBank+0x5e>)
 80026c6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80026ca:	4a13      	ldr	r2, [pc, #76]	; (8002718 <CAN_SlaveStartBank+0x5e>)
 80026cc:	f043 0301 	orr.w	r3, r3, #1
 80026d0:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
  
  /* Select the start slave bank */
  CAN1->FMR &= (uint32_t)0xFFFFC0F1 ;
 80026d4:	4b10      	ldr	r3, [pc, #64]	; (8002718 <CAN_SlaveStartBank+0x5e>)
 80026d6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80026da:	4a0f      	ldr	r2, [pc, #60]	; (8002718 <CAN_SlaveStartBank+0x5e>)
 80026dc:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80026e0:	f023 030e 	bic.w	r3, r3, #14
 80026e4:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
  CAN1->FMR |= (uint32_t)(CAN_BankNumber)<<8;
 80026e8:	4b0b      	ldr	r3, [pc, #44]	; (8002718 <CAN_SlaveStartBank+0x5e>)
 80026ea:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80026ee:	79fb      	ldrb	r3, [r7, #7]
 80026f0:	021b      	lsls	r3, r3, #8
 80026f2:	4909      	ldr	r1, [pc, #36]	; (8002718 <CAN_SlaveStartBank+0x5e>)
 80026f4:	4313      	orrs	r3, r2
 80026f6:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200
  
  /* Leave Initialisation mode for the filter */
  CAN1->FMR &= ~FMR_FINIT;
 80026fa:	4b07      	ldr	r3, [pc, #28]	; (8002718 <CAN_SlaveStartBank+0x5e>)
 80026fc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002700:	4a05      	ldr	r2, [pc, #20]	; (8002718 <CAN_SlaveStartBank+0x5e>)
 8002702:	f023 0301 	bic.w	r3, r3, #1
 8002706:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
 800270a:	bf00      	nop
 800270c:	370c      	adds	r7, #12
 800270e:	46bd      	mov	sp, r7
 8002710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002714:	4770      	bx	lr
 8002716:	bf00      	nop
 8002718:	40006400 	.word	0x40006400

0800271c <CAN_DBGFreeze>:
  *          during debug. Reception FIFOs can still be accessed/controlled normally) 
  *          or DISABLE (CAN is working during debug).
  * @retval None
  */
void CAN_DBGFreeze(CAN_TypeDef* CANx, FunctionalState NewState)
{
 800271c:	b480      	push	{r7}
 800271e:	b083      	sub	sp, #12
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
 8002724:	460b      	mov	r3, r1
 8002726:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8002728:	78fb      	ldrb	r3, [r7, #3]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d006      	beq.n	800273c <CAN_DBGFreeze+0x20>
  {
    /* Enable Debug Freeze  */
    CANx->MCR |= MCR_DBF;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable Debug Freeze */
    CANx->MCR &= ~MCR_DBF;
  }
}
 800273a:	e005      	b.n	8002748 <CAN_DBGFreeze+0x2c>
    CANx->MCR &= ~MCR_DBF;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	601a      	str	r2, [r3, #0]
}
 8002748:	bf00      	nop
 800274a:	370c      	adds	r7, #12
 800274c:	46bd      	mov	sp, r7
 800274e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002752:	4770      	bx	lr

08002754 <CAN_TTComModeCmd>:
  *         data bytes of the 8-byte message: TIME[7:0] in data byte 6 and TIME[15:8] 
  *         in data byte 7. 
  * @retval None
  */
void CAN_TTComModeCmd(CAN_TypeDef* CANx, FunctionalState NewState)
{
 8002754:	b480      	push	{r7}
 8002756:	b083      	sub	sp, #12
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
 800275c:	460b      	mov	r3, r1
 800275e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8002760:	78fb      	ldrb	r3, [r7, #3]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d01e      	beq.n	80027a4 <CAN_TTComModeCmd+0x50>
  {
    /* Enable the TTCM mode */
    CANx->MCR |= CAN_MCR_TTCM;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	601a      	str	r2, [r3, #0]

    /* Set TGT bits */
    CANx->sTxMailBox[0].TDTR |= ((uint32_t)CAN_TDT0R_TGT);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
 8002778:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    CANx->sTxMailBox[1].TDTR |= ((uint32_t)CAN_TDT1R_TGT);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 8002788:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
    CANx->sTxMailBox[2].TDTR |= ((uint32_t)CAN_TDT2R_TGT);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8002798:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
    /* Reset TGT bits */
    CANx->sTxMailBox[0].TDTR &= ((uint32_t)~CAN_TDT0R_TGT);
    CANx->sTxMailBox[1].TDTR &= ((uint32_t)~CAN_TDT1R_TGT);
    CANx->sTxMailBox[2].TDTR &= ((uint32_t)~CAN_TDT2R_TGT);
  }
}
 80027a2:	e01d      	b.n	80027e0 <CAN_TTComModeCmd+0x8c>
    CANx->MCR &= (uint32_t)(~(uint32_t)CAN_MCR_TTCM);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	601a      	str	r2, [r3, #0]
    CANx->sTxMailBox[0].TDTR &= ((uint32_t)~CAN_TDT0R_TGT);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
 80027b6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    CANx->sTxMailBox[1].TDTR &= ((uint32_t)~CAN_TDT1R_TGT);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 80027c6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
    CANx->sTxMailBox[2].TDTR &= ((uint32_t)~CAN_TDT2R_TGT);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 80027d6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
}
 80027e0:	bf00      	nop
 80027e2:	370c      	adds	r7, #12
 80027e4:	46bd      	mov	sp, r7
 80027e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ea:	4770      	bx	lr

080027ec <CAN_Transmit>:
  * @param  TxMessage: pointer to a structure which contains CAN Id, CAN DLC and CAN data.
  * @retval The number of the mailbox that is used for transmission or
  *         CAN_TxStatus_NoMailBox if there is no empty mailbox.
  */
uint8_t CAN_Transmit(CAN_TypeDef* CANx, CanTxMsg* TxMessage)
{
 80027ec:	b480      	push	{r7}
 80027ee:	b085      	sub	sp, #20
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
 80027f4:	6039      	str	r1, [r7, #0]
  uint8_t transmit_mailbox = 0;
 80027f6:	2300      	movs	r3, #0
 80027f8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_CAN_IDTYPE(TxMessage->IDE));
  assert_param(IS_CAN_RTR(TxMessage->RTR));
  assert_param(IS_CAN_DLC(TxMessage->DLC));

  /* Select one empty transmit mailbox */
  if ((CANx->TSR&CAN_TSR_TME0) == CAN_TSR_TME0)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	689b      	ldr	r3, [r3, #8]
 80027fe:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002802:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002806:	d102      	bne.n	800280e <CAN_Transmit+0x22>
  {
    transmit_mailbox = 0;
 8002808:	2300      	movs	r3, #0
 800280a:	73fb      	strb	r3, [r7, #15]
 800280c:	e015      	b.n	800283a <CAN_Transmit+0x4e>
  }
  else if ((CANx->TSR&CAN_TSR_TME1) == CAN_TSR_TME1)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	689b      	ldr	r3, [r3, #8]
 8002812:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002816:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800281a:	d102      	bne.n	8002822 <CAN_Transmit+0x36>
  {
    transmit_mailbox = 1;
 800281c:	2301      	movs	r3, #1
 800281e:	73fb      	strb	r3, [r7, #15]
 8002820:	e00b      	b.n	800283a <CAN_Transmit+0x4e>
  }
  else if ((CANx->TSR&CAN_TSR_TME2) == CAN_TSR_TME2)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	689b      	ldr	r3, [r3, #8]
 8002826:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800282a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800282e:	d102      	bne.n	8002836 <CAN_Transmit+0x4a>
  {
    transmit_mailbox = 2;
 8002830:	2302      	movs	r3, #2
 8002832:	73fb      	strb	r3, [r7, #15]
 8002834:	e001      	b.n	800283a <CAN_Transmit+0x4e>
  }
  else
  {
    transmit_mailbox = CAN_TxStatus_NoMailBox;
 8002836:	2304      	movs	r3, #4
 8002838:	73fb      	strb	r3, [r7, #15]
  }

  if (transmit_mailbox != CAN_TxStatus_NoMailBox)
 800283a:	7bfb      	ldrb	r3, [r7, #15]
 800283c:	2b04      	cmp	r3, #4
 800283e:	f000 809f 	beq.w	8002980 <CAN_Transmit+0x194>
  {
    /* Set up the Id */
    CANx->sTxMailBox[transmit_mailbox].TIR &= TMIDxR_TXRQ;
 8002842:	7bfb      	ldrb	r3, [r7, #15]
 8002844:	687a      	ldr	r2, [r7, #4]
 8002846:	3318      	adds	r3, #24
 8002848:	011b      	lsls	r3, r3, #4
 800284a:	4413      	add	r3, r2
 800284c:	681a      	ldr	r2, [r3, #0]
 800284e:	7bfb      	ldrb	r3, [r7, #15]
 8002850:	f002 0201 	and.w	r2, r2, #1
 8002854:	6879      	ldr	r1, [r7, #4]
 8002856:	3318      	adds	r3, #24
 8002858:	011b      	lsls	r3, r3, #4
 800285a:	440b      	add	r3, r1
 800285c:	601a      	str	r2, [r3, #0]
    if (TxMessage->IDE == CAN_Id_Standard)
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	7a1b      	ldrb	r3, [r3, #8]
 8002862:	2b00      	cmp	r3, #0
 8002864:	d113      	bne.n	800288e <CAN_Transmit+0xa2>
    {
      assert_param(IS_CAN_STDID(TxMessage->StdId));  
      CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->StdId << 21) | \
 8002866:	7bfb      	ldrb	r3, [r7, #15]
 8002868:	687a      	ldr	r2, [r7, #4]
 800286a:	3318      	adds	r3, #24
 800286c:	011b      	lsls	r3, r3, #4
 800286e:	4413      	add	r3, r2
 8002870:	6819      	ldr	r1, [r3, #0]
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	055b      	lsls	r3, r3, #21
                                                  TxMessage->RTR);
 8002878:	683a      	ldr	r2, [r7, #0]
 800287a:	7a52      	ldrb	r2, [r2, #9]
      CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->StdId << 21) | \
 800287c:	431a      	orrs	r2, r3
 800287e:	7bfb      	ldrb	r3, [r7, #15]
 8002880:	430a      	orrs	r2, r1
 8002882:	6879      	ldr	r1, [r7, #4]
 8002884:	3318      	adds	r3, #24
 8002886:	011b      	lsls	r3, r3, #4
 8002888:	440b      	add	r3, r1
 800288a:	601a      	str	r2, [r3, #0]
 800288c:	e015      	b.n	80028ba <CAN_Transmit+0xce>
    }
    else
    {
      assert_param(IS_CAN_EXTID(TxMessage->ExtId));
      CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->ExtId << 3) | \
 800288e:	7bfb      	ldrb	r3, [r7, #15]
 8002890:	687a      	ldr	r2, [r7, #4]
 8002892:	3318      	adds	r3, #24
 8002894:	011b      	lsls	r3, r3, #4
 8002896:	4413      	add	r3, r2
 8002898:	6819      	ldr	r1, [r3, #0]
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	00db      	lsls	r3, r3, #3
                                                  TxMessage->IDE | \
 80028a0:	683a      	ldr	r2, [r7, #0]
 80028a2:	7a12      	ldrb	r2, [r2, #8]
      CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->ExtId << 3) | \
 80028a4:	4313      	orrs	r3, r2
                                                  TxMessage->RTR);
 80028a6:	683a      	ldr	r2, [r7, #0]
 80028a8:	7a52      	ldrb	r2, [r2, #9]
                                                  TxMessage->IDE | \
 80028aa:	431a      	orrs	r2, r3
      CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->ExtId << 3) | \
 80028ac:	7bfb      	ldrb	r3, [r7, #15]
 80028ae:	430a      	orrs	r2, r1
 80028b0:	6879      	ldr	r1, [r7, #4]
 80028b2:	3318      	adds	r3, #24
 80028b4:	011b      	lsls	r3, r3, #4
 80028b6:	440b      	add	r3, r1
 80028b8:	601a      	str	r2, [r3, #0]
    }
    
    /* Set up the DLC */
    TxMessage->DLC &= (uint8_t)0x0000000F;
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	7a9b      	ldrb	r3, [r3, #10]
 80028be:	f003 030f 	and.w	r3, r3, #15
 80028c2:	b2da      	uxtb	r2, r3
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	729a      	strb	r2, [r3, #10]
    CANx->sTxMailBox[transmit_mailbox].TDTR &= (uint32_t)0xFFFFFFF0;
 80028c8:	7bfb      	ldrb	r3, [r7, #15]
 80028ca:	687a      	ldr	r2, [r7, #4]
 80028cc:	3318      	adds	r3, #24
 80028ce:	011b      	lsls	r3, r3, #4
 80028d0:	4413      	add	r3, r2
 80028d2:	3304      	adds	r3, #4
 80028d4:	681a      	ldr	r2, [r3, #0]
 80028d6:	7bfb      	ldrb	r3, [r7, #15]
 80028d8:	f022 020f 	bic.w	r2, r2, #15
 80028dc:	6879      	ldr	r1, [r7, #4]
 80028de:	3318      	adds	r3, #24
 80028e0:	011b      	lsls	r3, r3, #4
 80028e2:	440b      	add	r3, r1
 80028e4:	3304      	adds	r3, #4
 80028e6:	601a      	str	r2, [r3, #0]
    CANx->sTxMailBox[transmit_mailbox].TDTR |= TxMessage->DLC;
 80028e8:	7bfb      	ldrb	r3, [r7, #15]
 80028ea:	687a      	ldr	r2, [r7, #4]
 80028ec:	3318      	adds	r3, #24
 80028ee:	011b      	lsls	r3, r3, #4
 80028f0:	4413      	add	r3, r2
 80028f2:	3304      	adds	r3, #4
 80028f4:	681a      	ldr	r2, [r3, #0]
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	7a9b      	ldrb	r3, [r3, #10]
 80028fa:	4619      	mov	r1, r3
 80028fc:	7bfb      	ldrb	r3, [r7, #15]
 80028fe:	430a      	orrs	r2, r1
 8002900:	6879      	ldr	r1, [r7, #4]
 8002902:	3318      	adds	r3, #24
 8002904:	011b      	lsls	r3, r3, #4
 8002906:	440b      	add	r3, r1
 8002908:	3304      	adds	r3, #4
 800290a:	601a      	str	r2, [r3, #0]

    /* Set up the data field */
    CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	7b9b      	ldrb	r3, [r3, #14]
 8002910:	061a      	lsls	r2, r3, #24
                                             ((uint32_t)TxMessage->Data[2] << 16) |
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	7b5b      	ldrb	r3, [r3, #13]
 8002916:	041b      	lsls	r3, r3, #16
    CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
 8002918:	431a      	orrs	r2, r3
                                             ((uint32_t)TxMessage->Data[1] << 8) | 
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	7b1b      	ldrb	r3, [r3, #12]
 800291e:	021b      	lsls	r3, r3, #8
                                             ((uint32_t)TxMessage->Data[2] << 16) |
 8002920:	431a      	orrs	r2, r3
                                             ((uint32_t)TxMessage->Data[0]));
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	7adb      	ldrb	r3, [r3, #11]
 8002926:	4619      	mov	r1, r3
    CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
 8002928:	7bfb      	ldrb	r3, [r7, #15]
                                             ((uint32_t)TxMessage->Data[1] << 8) | 
 800292a:	430a      	orrs	r2, r1
    CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
 800292c:	6879      	ldr	r1, [r7, #4]
 800292e:	011b      	lsls	r3, r3, #4
 8002930:	440b      	add	r3, r1
 8002932:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8002936:	601a      	str	r2, [r3, #0]
    CANx->sTxMailBox[transmit_mailbox].TDHR = (((uint32_t)TxMessage->Data[7] << 24) | 
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	7c9b      	ldrb	r3, [r3, #18]
 800293c:	061a      	lsls	r2, r3, #24
                                             ((uint32_t)TxMessage->Data[6] << 16) |
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	7c5b      	ldrb	r3, [r3, #17]
 8002942:	041b      	lsls	r3, r3, #16
    CANx->sTxMailBox[transmit_mailbox].TDHR = (((uint32_t)TxMessage->Data[7] << 24) | 
 8002944:	431a      	orrs	r2, r3
                                             ((uint32_t)TxMessage->Data[5] << 8) |
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	7c1b      	ldrb	r3, [r3, #16]
 800294a:	021b      	lsls	r3, r3, #8
                                             ((uint32_t)TxMessage->Data[6] << 16) |
 800294c:	431a      	orrs	r2, r3
                                             ((uint32_t)TxMessage->Data[4]));
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	7bdb      	ldrb	r3, [r3, #15]
 8002952:	4619      	mov	r1, r3
    CANx->sTxMailBox[transmit_mailbox].TDHR = (((uint32_t)TxMessage->Data[7] << 24) | 
 8002954:	7bfb      	ldrb	r3, [r7, #15]
                                             ((uint32_t)TxMessage->Data[5] << 8) |
 8002956:	430a      	orrs	r2, r1
    CANx->sTxMailBox[transmit_mailbox].TDHR = (((uint32_t)TxMessage->Data[7] << 24) | 
 8002958:	6879      	ldr	r1, [r7, #4]
 800295a:	011b      	lsls	r3, r3, #4
 800295c:	440b      	add	r3, r1
 800295e:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8002962:	601a      	str	r2, [r3, #0]
    /* Request transmission */
    CANx->sTxMailBox[transmit_mailbox].TIR |= TMIDxR_TXRQ;
 8002964:	7bfb      	ldrb	r3, [r7, #15]
 8002966:	687a      	ldr	r2, [r7, #4]
 8002968:	3318      	adds	r3, #24
 800296a:	011b      	lsls	r3, r3, #4
 800296c:	4413      	add	r3, r2
 800296e:	681a      	ldr	r2, [r3, #0]
 8002970:	7bfb      	ldrb	r3, [r7, #15]
 8002972:	f042 0201 	orr.w	r2, r2, #1
 8002976:	6879      	ldr	r1, [r7, #4]
 8002978:	3318      	adds	r3, #24
 800297a:	011b      	lsls	r3, r3, #4
 800297c:	440b      	add	r3, r1
 800297e:	601a      	str	r2, [r3, #0]
  }
  return transmit_mailbox;
 8002980:	7bfb      	ldrb	r3, [r7, #15]
}
 8002982:	4618      	mov	r0, r3
 8002984:	3714      	adds	r7, #20
 8002986:	46bd      	mov	sp, r7
 8002988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298c:	4770      	bx	lr

0800298e <CAN_TransmitStatus>:
  * @param  TransmitMailbox: the number of the mailbox that is used for transmission.
  * @retval CAN_TxStatus_Ok if the CAN driver transmits the message, 
  *         CAN_TxStatus_Failed in an other case.
  */
uint8_t CAN_TransmitStatus(CAN_TypeDef* CANx, uint8_t TransmitMailbox)
{
 800298e:	b480      	push	{r7}
 8002990:	b085      	sub	sp, #20
 8002992:	af00      	add	r7, sp, #0
 8002994:	6078      	str	r0, [r7, #4]
 8002996:	460b      	mov	r3, r1
 8002998:	70fb      	strb	r3, [r7, #3]
  uint32_t state = 0;
 800299a:	2300      	movs	r3, #0
 800299c:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_TRANSMITMAILBOX(TransmitMailbox));
 
  switch (TransmitMailbox)
 800299e:	78fb      	ldrb	r3, [r7, #3]
 80029a0:	2b01      	cmp	r3, #1
 80029a2:	d009      	beq.n	80029b8 <CAN_TransmitStatus+0x2a>
 80029a4:	2b02      	cmp	r3, #2
 80029a6:	d00d      	beq.n	80029c4 <CAN_TransmitStatus+0x36>
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d111      	bne.n	80029d0 <CAN_TransmitStatus+0x42>
  {
    case (CAN_TXMAILBOX_0): 
      state =   CANx->TSR &  (CAN_TSR_RQCP0 | CAN_TSR_TXOK0 | CAN_TSR_TME0);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	689a      	ldr	r2, [r3, #8]
 80029b0:	4b26      	ldr	r3, [pc, #152]	; (8002a4c <CAN_TransmitStatus+0xbe>)
 80029b2:	4013      	ands	r3, r2
 80029b4:	60fb      	str	r3, [r7, #12]
      break;
 80029b6:	e00e      	b.n	80029d6 <CAN_TransmitStatus+0x48>
    case (CAN_TXMAILBOX_1): 
      state =   CANx->TSR &  (CAN_TSR_RQCP1 | CAN_TSR_TXOK1 | CAN_TSR_TME1);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	689a      	ldr	r2, [r3, #8]
 80029bc:	4b24      	ldr	r3, [pc, #144]	; (8002a50 <CAN_TransmitStatus+0xc2>)
 80029be:	4013      	ands	r3, r2
 80029c0:	60fb      	str	r3, [r7, #12]
      break;
 80029c2:	e008      	b.n	80029d6 <CAN_TransmitStatus+0x48>
    case (CAN_TXMAILBOX_2): 
      state =   CANx->TSR &  (CAN_TSR_RQCP2 | CAN_TSR_TXOK2 | CAN_TSR_TME2);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	689a      	ldr	r2, [r3, #8]
 80029c8:	4b22      	ldr	r3, [pc, #136]	; (8002a54 <CAN_TransmitStatus+0xc6>)
 80029ca:	4013      	ands	r3, r2
 80029cc:	60fb      	str	r3, [r7, #12]
      break;
 80029ce:	e002      	b.n	80029d6 <CAN_TransmitStatus+0x48>
    default:
      state = CAN_TxStatus_Failed;
 80029d0:	2300      	movs	r3, #0
 80029d2:	60fb      	str	r3, [r7, #12]
      break;
 80029d4:	bf00      	nop
  }
  switch (state)
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	4a1f      	ldr	r2, [pc, #124]	; (8002a58 <CAN_TransmitStatus+0xca>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d01b      	beq.n	8002a16 <CAN_TransmitStatus+0x88>
 80029de:	4a1e      	ldr	r2, [pc, #120]	; (8002a58 <CAN_TransmitStatus+0xca>)
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d808      	bhi.n	80029f6 <CAN_TransmitStatus+0x68>
 80029e4:	4a1d      	ldr	r2, [pc, #116]	; (8002a5c <CAN_TransmitStatus+0xce>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d012      	beq.n	8002a10 <CAN_TransmitStatus+0x82>
 80029ea:	4a18      	ldr	r2, [pc, #96]	; (8002a4c <CAN_TransmitStatus+0xbe>)
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d018      	beq.n	8002a22 <CAN_TransmitStatus+0x94>
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d00a      	beq.n	8002a0a <CAN_TransmitStatus+0x7c>
 80029f4:	e01e      	b.n	8002a34 <CAN_TransmitStatus+0xa6>
 80029f6:	4a1a      	ldr	r2, [pc, #104]	; (8002a60 <CAN_TransmitStatus+0xd2>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d00f      	beq.n	8002a1c <CAN_TransmitStatus+0x8e>
 80029fc:	4a15      	ldr	r2, [pc, #84]	; (8002a54 <CAN_TransmitStatus+0xc6>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d015      	beq.n	8002a2e <CAN_TransmitStatus+0xa0>
 8002a02:	4a13      	ldr	r2, [pc, #76]	; (8002a50 <CAN_TransmitStatus+0xc2>)
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d00f      	beq.n	8002a28 <CAN_TransmitStatus+0x9a>
 8002a08:	e014      	b.n	8002a34 <CAN_TransmitStatus+0xa6>
  {
      /* transmit pending  */
    case (0x0): state = CAN_TxStatus_Pending;
 8002a0a:	2302      	movs	r3, #2
 8002a0c:	60fb      	str	r3, [r7, #12]
      break;
 8002a0e:	e014      	b.n	8002a3a <CAN_TransmitStatus+0xac>
      /* transmit failed  */
     case (CAN_TSR_RQCP0 | CAN_TSR_TME0): state = CAN_TxStatus_Failed;
 8002a10:	2300      	movs	r3, #0
 8002a12:	60fb      	str	r3, [r7, #12]
      break;
 8002a14:	e011      	b.n	8002a3a <CAN_TransmitStatus+0xac>
     case (CAN_TSR_RQCP1 | CAN_TSR_TME1): state = CAN_TxStatus_Failed;
 8002a16:	2300      	movs	r3, #0
 8002a18:	60fb      	str	r3, [r7, #12]
      break;
 8002a1a:	e00e      	b.n	8002a3a <CAN_TransmitStatus+0xac>
     case (CAN_TSR_RQCP2 | CAN_TSR_TME2): state = CAN_TxStatus_Failed;
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	60fb      	str	r3, [r7, #12]
      break;
 8002a20:	e00b      	b.n	8002a3a <CAN_TransmitStatus+0xac>
      /* transmit succeeded  */
    case (CAN_TSR_RQCP0 | CAN_TSR_TXOK0 | CAN_TSR_TME0):state = CAN_TxStatus_Ok;
 8002a22:	2301      	movs	r3, #1
 8002a24:	60fb      	str	r3, [r7, #12]
      break;
 8002a26:	e008      	b.n	8002a3a <CAN_TransmitStatus+0xac>
    case (CAN_TSR_RQCP1 | CAN_TSR_TXOK1 | CAN_TSR_TME1):state = CAN_TxStatus_Ok;
 8002a28:	2301      	movs	r3, #1
 8002a2a:	60fb      	str	r3, [r7, #12]
      break;
 8002a2c:	e005      	b.n	8002a3a <CAN_TransmitStatus+0xac>
    case (CAN_TSR_RQCP2 | CAN_TSR_TXOK2 | CAN_TSR_TME2):state = CAN_TxStatus_Ok;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	60fb      	str	r3, [r7, #12]
      break;
 8002a32:	e002      	b.n	8002a3a <CAN_TransmitStatus+0xac>
    default: state = CAN_TxStatus_Failed;
 8002a34:	2300      	movs	r3, #0
 8002a36:	60fb      	str	r3, [r7, #12]
      break;
 8002a38:	bf00      	nop
  }
  return (uint8_t) state;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	b2db      	uxtb	r3, r3
}
 8002a3e:	4618      	mov	r0, r3
 8002a40:	3714      	adds	r7, #20
 8002a42:	46bd      	mov	sp, r7
 8002a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a48:	4770      	bx	lr
 8002a4a:	bf00      	nop
 8002a4c:	04000003 	.word	0x04000003
 8002a50:	08000300 	.word	0x08000300
 8002a54:	10030000 	.word	0x10030000
 8002a58:	08000100 	.word	0x08000100
 8002a5c:	04000001 	.word	0x04000001
 8002a60:	10010000 	.word	0x10010000

08002a64 <CAN_CancelTransmit>:
  * @param  CANx: where x can be 1 or 2 to select the CAN peripheral.
  * @param  Mailbox: Mailbox number.
  * @retval None
  */
void CAN_CancelTransmit(CAN_TypeDef* CANx, uint8_t Mailbox)
{
 8002a64:	b480      	push	{r7}
 8002a66:	b083      	sub	sp, #12
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
 8002a6c:	460b      	mov	r3, r1
 8002a6e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_TRANSMITMAILBOX(Mailbox));
  /* abort transmission */
  switch (Mailbox)
 8002a70:	78fb      	ldrb	r3, [r7, #3]
 8002a72:	2b01      	cmp	r3, #1
 8002a74:	d00b      	beq.n	8002a8e <CAN_CancelTransmit+0x2a>
 8002a76:	2b02      	cmp	r3, #2
 8002a78:	d010      	beq.n	8002a9c <CAN_CancelTransmit+0x38>
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d000      	beq.n	8002a80 <CAN_CancelTransmit+0x1c>
    case (CAN_TXMAILBOX_1): CANx->TSR |= CAN_TSR_ABRQ1;
      break;
    case (CAN_TXMAILBOX_2): CANx->TSR |= CAN_TSR_ABRQ2;
      break;
    default:
      break;
 8002a7e:	e014      	b.n	8002aaa <CAN_CancelTransmit+0x46>
    case (CAN_TXMAILBOX_0): CANx->TSR |= CAN_TSR_ABRQ0;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	689b      	ldr	r3, [r3, #8]
 8002a84:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	609a      	str	r2, [r3, #8]
      break;
 8002a8c:	e00d      	b.n	8002aaa <CAN_CancelTransmit+0x46>
    case (CAN_TXMAILBOX_1): CANx->TSR |= CAN_TSR_ABRQ1;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	689b      	ldr	r3, [r3, #8]
 8002a92:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	609a      	str	r2, [r3, #8]
      break;
 8002a9a:	e006      	b.n	8002aaa <CAN_CancelTransmit+0x46>
    case (CAN_TXMAILBOX_2): CANx->TSR |= CAN_TSR_ABRQ2;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	689b      	ldr	r3, [r3, #8]
 8002aa0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	609a      	str	r2, [r3, #8]
      break;
 8002aa8:	bf00      	nop
  }
}
 8002aaa:	bf00      	nop
 8002aac:	370c      	adds	r7, #12
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab4:	4770      	bx	lr

08002ab6 <CAN_Receive>:
  * @param  RxMessage: pointer to a structure receive frame which contains CAN Id,
  *         CAN DLC, CAN data and FMI number.
  * @retval None
  */
void CAN_Receive(CAN_TypeDef* CANx, uint8_t FIFONumber, CanRxMsg* RxMessage)
{
 8002ab6:	b480      	push	{r7}
 8002ab8:	b085      	sub	sp, #20
 8002aba:	af00      	add	r7, sp, #0
 8002abc:	60f8      	str	r0, [r7, #12]
 8002abe:	460b      	mov	r3, r1
 8002ac0:	607a      	str	r2, [r7, #4]
 8002ac2:	72fb      	strb	r3, [r7, #11]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_FIFO(FIFONumber));
  /* Get the Id */
  RxMessage->IDE = (uint8_t)0x04 & CANx->sFIFOMailBox[FIFONumber].RIR;
 8002ac4:	7afb      	ldrb	r3, [r7, #11]
 8002ac6:	68fa      	ldr	r2, [r7, #12]
 8002ac8:	331b      	adds	r3, #27
 8002aca:	011b      	lsls	r3, r3, #4
 8002acc:	4413      	add	r3, r2
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	b2db      	uxtb	r3, r3
 8002ad2:	f003 0304 	and.w	r3, r3, #4
 8002ad6:	b2da      	uxtb	r2, r3
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	721a      	strb	r2, [r3, #8]
  if (RxMessage->IDE == CAN_Id_Standard)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	7a1b      	ldrb	r3, [r3, #8]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d10b      	bne.n	8002afc <CAN_Receive+0x46>
  {
    RxMessage->StdId = (uint32_t)0x000007FF & (CANx->sFIFOMailBox[FIFONumber].RIR >> 21);
 8002ae4:	7afb      	ldrb	r3, [r7, #11]
 8002ae6:	68fa      	ldr	r2, [r7, #12]
 8002ae8:	331b      	adds	r3, #27
 8002aea:	011b      	lsls	r3, r3, #4
 8002aec:	4413      	add	r3, r2
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	0d5b      	lsrs	r3, r3, #21
 8002af2:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	601a      	str	r2, [r3, #0]
 8002afa:	e00a      	b.n	8002b12 <CAN_Receive+0x5c>
  }
  else
  {
    RxMessage->ExtId = (uint32_t)0x1FFFFFFF & (CANx->sFIFOMailBox[FIFONumber].RIR >> 3);
 8002afc:	7afb      	ldrb	r3, [r7, #11]
 8002afe:	68fa      	ldr	r2, [r7, #12]
 8002b00:	331b      	adds	r3, #27
 8002b02:	011b      	lsls	r3, r3, #4
 8002b04:	4413      	add	r3, r2
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	08db      	lsrs	r3, r3, #3
 8002b0a:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	605a      	str	r2, [r3, #4]
  }
  
  RxMessage->RTR = (uint8_t)0x02 & CANx->sFIFOMailBox[FIFONumber].RIR;
 8002b12:	7afb      	ldrb	r3, [r7, #11]
 8002b14:	68fa      	ldr	r2, [r7, #12]
 8002b16:	331b      	adds	r3, #27
 8002b18:	011b      	lsls	r3, r3, #4
 8002b1a:	4413      	add	r3, r2
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	b2db      	uxtb	r3, r3
 8002b20:	f003 0302 	and.w	r3, r3, #2
 8002b24:	b2da      	uxtb	r2, r3
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	725a      	strb	r2, [r3, #9]
  /* Get the DLC */
  RxMessage->DLC = (uint8_t)0x0F & CANx->sFIFOMailBox[FIFONumber].RDTR;
 8002b2a:	7afb      	ldrb	r3, [r7, #11]
 8002b2c:	68fa      	ldr	r2, [r7, #12]
 8002b2e:	331b      	adds	r3, #27
 8002b30:	011b      	lsls	r3, r3, #4
 8002b32:	4413      	add	r3, r2
 8002b34:	3304      	adds	r3, #4
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	b2db      	uxtb	r3, r3
 8002b3a:	f003 030f 	and.w	r3, r3, #15
 8002b3e:	b2da      	uxtb	r2, r3
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	729a      	strb	r2, [r3, #10]
  /* Get the FMI */
  RxMessage->FMI = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDTR >> 8);
 8002b44:	7afb      	ldrb	r3, [r7, #11]
 8002b46:	68fa      	ldr	r2, [r7, #12]
 8002b48:	331b      	adds	r3, #27
 8002b4a:	011b      	lsls	r3, r3, #4
 8002b4c:	4413      	add	r3, r2
 8002b4e:	3304      	adds	r3, #4
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	0a1b      	lsrs	r3, r3, #8
 8002b54:	b2da      	uxtb	r2, r3
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	74da      	strb	r2, [r3, #19]
  /* Get the data field */
  RxMessage->Data[0] = (uint8_t)0xFF & CANx->sFIFOMailBox[FIFONumber].RDLR;
 8002b5a:	7afb      	ldrb	r3, [r7, #11]
 8002b5c:	68fa      	ldr	r2, [r7, #12]
 8002b5e:	011b      	lsls	r3, r3, #4
 8002b60:	4413      	add	r3, r2
 8002b62:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	b2da      	uxtb	r2, r3
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	72da      	strb	r2, [r3, #11]
  RxMessage->Data[1] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 8);
 8002b6e:	7afb      	ldrb	r3, [r7, #11]
 8002b70:	68fa      	ldr	r2, [r7, #12]
 8002b72:	011b      	lsls	r3, r3, #4
 8002b74:	4413      	add	r3, r2
 8002b76:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	0a1b      	lsrs	r3, r3, #8
 8002b7e:	b2da      	uxtb	r2, r3
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	731a      	strb	r2, [r3, #12]
  RxMessage->Data[2] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 16);
 8002b84:	7afb      	ldrb	r3, [r7, #11]
 8002b86:	68fa      	ldr	r2, [r7, #12]
 8002b88:	011b      	lsls	r3, r3, #4
 8002b8a:	4413      	add	r3, r2
 8002b8c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	0c1b      	lsrs	r3, r3, #16
 8002b94:	b2da      	uxtb	r2, r3
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	735a      	strb	r2, [r3, #13]
  RxMessage->Data[3] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 24);
 8002b9a:	7afb      	ldrb	r3, [r7, #11]
 8002b9c:	68fa      	ldr	r2, [r7, #12]
 8002b9e:	011b      	lsls	r3, r3, #4
 8002ba0:	4413      	add	r3, r2
 8002ba2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	0e1b      	lsrs	r3, r3, #24
 8002baa:	b2da      	uxtb	r2, r3
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	739a      	strb	r2, [r3, #14]
  RxMessage->Data[4] = (uint8_t)0xFF & CANx->sFIFOMailBox[FIFONumber].RDHR;
 8002bb0:	7afb      	ldrb	r3, [r7, #11]
 8002bb2:	68fa      	ldr	r2, [r7, #12]
 8002bb4:	011b      	lsls	r3, r3, #4
 8002bb6:	4413      	add	r3, r2
 8002bb8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	b2da      	uxtb	r2, r3
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	73da      	strb	r2, [r3, #15]
  RxMessage->Data[5] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 8);
 8002bc4:	7afb      	ldrb	r3, [r7, #11]
 8002bc6:	68fa      	ldr	r2, [r7, #12]
 8002bc8:	011b      	lsls	r3, r3, #4
 8002bca:	4413      	add	r3, r2
 8002bcc:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	0a1b      	lsrs	r3, r3, #8
 8002bd4:	b2da      	uxtb	r2, r3
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	741a      	strb	r2, [r3, #16]
  RxMessage->Data[6] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 16);
 8002bda:	7afb      	ldrb	r3, [r7, #11]
 8002bdc:	68fa      	ldr	r2, [r7, #12]
 8002bde:	011b      	lsls	r3, r3, #4
 8002be0:	4413      	add	r3, r2
 8002be2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	0c1b      	lsrs	r3, r3, #16
 8002bea:	b2da      	uxtb	r2, r3
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	745a      	strb	r2, [r3, #17]
  RxMessage->Data[7] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 24);
 8002bf0:	7afb      	ldrb	r3, [r7, #11]
 8002bf2:	68fa      	ldr	r2, [r7, #12]
 8002bf4:	011b      	lsls	r3, r3, #4
 8002bf6:	4413      	add	r3, r2
 8002bf8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	0e1b      	lsrs	r3, r3, #24
 8002c00:	b2da      	uxtb	r2, r3
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	749a      	strb	r2, [r3, #18]
  /* Release the FIFO */
  /* Release FIFO0 */
  if (FIFONumber == CAN_FIFO0)
 8002c06:	7afb      	ldrb	r3, [r7, #11]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d106      	bne.n	8002c1a <CAN_Receive+0x164>
  {
    CANx->RF0R |= CAN_RF0R_RFOM0;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	68db      	ldr	r3, [r3, #12]
 8002c10:	f043 0220 	orr.w	r2, r3, #32
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	60da      	str	r2, [r3, #12]
  /* Release FIFO1 */
  else /* FIFONumber == CAN_FIFO1 */
  {
    CANx->RF1R |= CAN_RF1R_RFOM1;
  }
}
 8002c18:	e005      	b.n	8002c26 <CAN_Receive+0x170>
    CANx->RF1R |= CAN_RF1R_RFOM1;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	691b      	ldr	r3, [r3, #16]
 8002c1e:	f043 0220 	orr.w	r2, r3, #32
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	611a      	str	r2, [r3, #16]
}
 8002c26:	bf00      	nop
 8002c28:	3714      	adds	r7, #20
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c30:	4770      	bx	lr

08002c32 <CAN_FIFORelease>:
  * @param  CANx: where x can be 1 or 2 to select the CAN peripheral.
  * @param  FIFONumber: FIFO to release, CAN_FIFO0 or CAN_FIFO1.
  * @retval None
  */
void CAN_FIFORelease(CAN_TypeDef* CANx, uint8_t FIFONumber)
{
 8002c32:	b480      	push	{r7}
 8002c34:	b083      	sub	sp, #12
 8002c36:	af00      	add	r7, sp, #0
 8002c38:	6078      	str	r0, [r7, #4]
 8002c3a:	460b      	mov	r3, r1
 8002c3c:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_FIFO(FIFONumber));
  /* Release FIFO0 */
  if (FIFONumber == CAN_FIFO0)
 8002c3e:	78fb      	ldrb	r3, [r7, #3]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d106      	bne.n	8002c52 <CAN_FIFORelease+0x20>
  {
    CANx->RF0R |= CAN_RF0R_RFOM0;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	68db      	ldr	r3, [r3, #12]
 8002c48:	f043 0220 	orr.w	r2, r3, #32
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	60da      	str	r2, [r3, #12]
  /* Release FIFO1 */
  else /* FIFONumber == CAN_FIFO1 */
  {
    CANx->RF1R |= CAN_RF1R_RFOM1;
  }
}
 8002c50:	e005      	b.n	8002c5e <CAN_FIFORelease+0x2c>
    CANx->RF1R |= CAN_RF1R_RFOM1;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	691b      	ldr	r3, [r3, #16]
 8002c56:	f043 0220 	orr.w	r2, r3, #32
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	611a      	str	r2, [r3, #16]
}
 8002c5e:	bf00      	nop
 8002c60:	370c      	adds	r7, #12
 8002c62:	46bd      	mov	sp, r7
 8002c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c68:	4770      	bx	lr

08002c6a <CAN_MessagePending>:
  * @param  CANx: where x can be 1 or 2 to select the CAN peripheral.
  * @param  FIFONumber: Receive FIFO number, CAN_FIFO0 or CAN_FIFO1.
  * @retval NbMessage : which is the number of pending message.
  */
uint8_t CAN_MessagePending(CAN_TypeDef* CANx, uint8_t FIFONumber)
{
 8002c6a:	b480      	push	{r7}
 8002c6c:	b085      	sub	sp, #20
 8002c6e:	af00      	add	r7, sp, #0
 8002c70:	6078      	str	r0, [r7, #4]
 8002c72:	460b      	mov	r3, r1
 8002c74:	70fb      	strb	r3, [r7, #3]
  uint8_t message_pending=0;
 8002c76:	2300      	movs	r3, #0
 8002c78:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_FIFO(FIFONumber));
  if (FIFONumber == CAN_FIFO0)
 8002c7a:	78fb      	ldrb	r3, [r7, #3]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d106      	bne.n	8002c8e <CAN_MessagePending+0x24>
  {
    message_pending = (uint8_t)(CANx->RF0R&(uint32_t)0x03);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	68db      	ldr	r3, [r3, #12]
 8002c84:	b2db      	uxtb	r3, r3
 8002c86:	f003 0303 	and.w	r3, r3, #3
 8002c8a:	73fb      	strb	r3, [r7, #15]
 8002c8c:	e00b      	b.n	8002ca6 <CAN_MessagePending+0x3c>
  }
  else if (FIFONumber == CAN_FIFO1)
 8002c8e:	78fb      	ldrb	r3, [r7, #3]
 8002c90:	2b01      	cmp	r3, #1
 8002c92:	d106      	bne.n	8002ca2 <CAN_MessagePending+0x38>
  {
    message_pending = (uint8_t)(CANx->RF1R&(uint32_t)0x03);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	691b      	ldr	r3, [r3, #16]
 8002c98:	b2db      	uxtb	r3, r3
 8002c9a:	f003 0303 	and.w	r3, r3, #3
 8002c9e:	73fb      	strb	r3, [r7, #15]
 8002ca0:	e001      	b.n	8002ca6 <CAN_MessagePending+0x3c>
  }
  else
  {
    message_pending = 0;
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	73fb      	strb	r3, [r7, #15]
  }
  return message_pending;
 8002ca6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ca8:	4618      	mov	r0, r3
 8002caa:	3714      	adds	r7, #20
 8002cac:	46bd      	mov	sp, r7
 8002cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb2:	4770      	bx	lr

08002cb4 <CAN_OperatingModeRequest>:
  * @retval status of the requested mode which can be 
  *         - CAN_ModeStatus_Failed:  CAN failed entering the specific mode 
  *         - CAN_ModeStatus_Success: CAN Succeed entering the specific mode 
  */
uint8_t CAN_OperatingModeRequest(CAN_TypeDef* CANx, uint8_t CAN_OperatingMode)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b085      	sub	sp, #20
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
 8002cbc:	460b      	mov	r3, r1
 8002cbe:	70fb      	strb	r3, [r7, #3]
  uint8_t status = CAN_ModeStatus_Failed;
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	73fb      	strb	r3, [r7, #15]
  
  /* Timeout for INAK or also for SLAK bits*/
  uint32_t timeout = INAK_TIMEOUT; 
 8002cc4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002cc8:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_OPERATING_MODE(CAN_OperatingMode));

  if (CAN_OperatingMode == CAN_OperatingMode_Initialization)
 8002cca:	78fb      	ldrb	r3, [r7, #3]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d120      	bne.n	8002d12 <CAN_OperatingModeRequest+0x5e>
  {
    /* Request initialisation */
    CANx->MCR = (uint32_t)((CANx->MCR & (uint32_t)(~(uint32_t)CAN_MCR_SLEEP)) | CAN_MCR_INRQ);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f023 0303 	bic.w	r3, r3, #3
 8002cd8:	f043 0201 	orr.w	r2, r3, #1
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	601a      	str	r2, [r3, #0]

    /* Wait the acknowledge */
    while (((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_INAK) && (timeout != 0))
 8002ce0:	e002      	b.n	8002ce8 <CAN_OperatingModeRequest+0x34>
    {
      timeout--;
 8002ce2:	68bb      	ldr	r3, [r7, #8]
 8002ce4:	3b01      	subs	r3, #1
 8002ce6:	60bb      	str	r3, [r7, #8]
    while (((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_INAK) && (timeout != 0))
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	f003 0303 	and.w	r3, r3, #3
 8002cf0:	2b01      	cmp	r3, #1
 8002cf2:	d002      	beq.n	8002cfa <CAN_OperatingModeRequest+0x46>
 8002cf4:	68bb      	ldr	r3, [r7, #8]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d1f3      	bne.n	8002ce2 <CAN_OperatingModeRequest+0x2e>
    }
    if ((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_INAK)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	f003 0303 	and.w	r3, r3, #3
 8002d02:	2b01      	cmp	r3, #1
 8002d04:	d002      	beq.n	8002d0c <CAN_OperatingModeRequest+0x58>
    {
      status = CAN_ModeStatus_Failed;
 8002d06:	2300      	movs	r3, #0
 8002d08:	73fb      	strb	r3, [r7, #15]
 8002d0a:	e04a      	b.n	8002da2 <CAN_OperatingModeRequest+0xee>
    }
    else
    {
      status = CAN_ModeStatus_Success;
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	73fb      	strb	r3, [r7, #15]
 8002d10:	e047      	b.n	8002da2 <CAN_OperatingModeRequest+0xee>
    }
  }
  else  if (CAN_OperatingMode == CAN_OperatingMode_Normal)
 8002d12:	78fb      	ldrb	r3, [r7, #3]
 8002d14:	2b01      	cmp	r3, #1
 8002d16:	d11e      	bne.n	8002d56 <CAN_OperatingModeRequest+0xa2>
  {
    /* Request leave initialisation and sleep mode  and enter Normal mode */
    CANx->MCR &= (uint32_t)(~(CAN_MCR_SLEEP|CAN_MCR_INRQ));
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f023 0203 	bic.w	r2, r3, #3
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	601a      	str	r2, [r3, #0]

    /* Wait the acknowledge */
    while (((CANx->MSR & CAN_MODE_MASK) != 0) && (timeout!=0))
 8002d24:	e002      	b.n	8002d2c <CAN_OperatingModeRequest+0x78>
    {
      timeout--;
 8002d26:	68bb      	ldr	r3, [r7, #8]
 8002d28:	3b01      	subs	r3, #1
 8002d2a:	60bb      	str	r3, [r7, #8]
    while (((CANx->MSR & CAN_MODE_MASK) != 0) && (timeout!=0))
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	685b      	ldr	r3, [r3, #4]
 8002d30:	f003 0303 	and.w	r3, r3, #3
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d002      	beq.n	8002d3e <CAN_OperatingModeRequest+0x8a>
 8002d38:	68bb      	ldr	r3, [r7, #8]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d1f3      	bne.n	8002d26 <CAN_OperatingModeRequest+0x72>
    }
    if ((CANx->MSR & CAN_MODE_MASK) != 0)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	f003 0303 	and.w	r3, r3, #3
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d002      	beq.n	8002d50 <CAN_OperatingModeRequest+0x9c>
    {
      status = CAN_ModeStatus_Failed;
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	73fb      	strb	r3, [r7, #15]
 8002d4e:	e028      	b.n	8002da2 <CAN_OperatingModeRequest+0xee>
    }
    else
    {
      status = CAN_ModeStatus_Success;
 8002d50:	2301      	movs	r3, #1
 8002d52:	73fb      	strb	r3, [r7, #15]
 8002d54:	e025      	b.n	8002da2 <CAN_OperatingModeRequest+0xee>
    }
  }
  else  if (CAN_OperatingMode == CAN_OperatingMode_Sleep)
 8002d56:	78fb      	ldrb	r3, [r7, #3]
 8002d58:	2b02      	cmp	r3, #2
 8002d5a:	d120      	bne.n	8002d9e <CAN_OperatingModeRequest+0xea>
  {
    /* Request Sleep mode */
    CANx->MCR = (uint32_t)((CANx->MCR & (uint32_t)(~(uint32_t)CAN_MCR_INRQ)) | CAN_MCR_SLEEP);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f023 0303 	bic.w	r3, r3, #3
 8002d64:	f043 0202 	orr.w	r2, r3, #2
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	601a      	str	r2, [r3, #0]

    /* Wait the acknowledge */
    while (((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_SLAK) && (timeout!=0))
 8002d6c:	e002      	b.n	8002d74 <CAN_OperatingModeRequest+0xc0>
    {
      timeout--;
 8002d6e:	68bb      	ldr	r3, [r7, #8]
 8002d70:	3b01      	subs	r3, #1
 8002d72:	60bb      	str	r3, [r7, #8]
    while (((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_SLAK) && (timeout!=0))
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	f003 0303 	and.w	r3, r3, #3
 8002d7c:	2b02      	cmp	r3, #2
 8002d7e:	d002      	beq.n	8002d86 <CAN_OperatingModeRequest+0xd2>
 8002d80:	68bb      	ldr	r3, [r7, #8]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d1f3      	bne.n	8002d6e <CAN_OperatingModeRequest+0xba>
    }
    if ((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_SLAK)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	f003 0303 	and.w	r3, r3, #3
 8002d8e:	2b02      	cmp	r3, #2
 8002d90:	d002      	beq.n	8002d98 <CAN_OperatingModeRequest+0xe4>
    {
      status = CAN_ModeStatus_Failed;
 8002d92:	2300      	movs	r3, #0
 8002d94:	73fb      	strb	r3, [r7, #15]
 8002d96:	e004      	b.n	8002da2 <CAN_OperatingModeRequest+0xee>
    }
    else
    {
      status = CAN_ModeStatus_Success;
 8002d98:	2301      	movs	r3, #1
 8002d9a:	73fb      	strb	r3, [r7, #15]
 8002d9c:	e001      	b.n	8002da2 <CAN_OperatingModeRequest+0xee>
    }
  }
  else
  {
    status = CAN_ModeStatus_Failed;
 8002d9e:	2300      	movs	r3, #0
 8002da0:	73fb      	strb	r3, [r7, #15]
  }

  return  (uint8_t) status;
 8002da2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002da4:	4618      	mov	r0, r3
 8002da6:	3714      	adds	r7, #20
 8002da8:	46bd      	mov	sp, r7
 8002daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dae:	4770      	bx	lr

08002db0 <CAN_Sleep>:
  * @brief  Enters the Sleep (low power) mode.
  * @param  CANx: where x can be 1 or 2 to select the CAN peripheral.
  * @retval CAN_Sleep_Ok if sleep entered, CAN_Sleep_Failed otherwise.
  */
uint8_t CAN_Sleep(CAN_TypeDef* CANx)
{
 8002db0:	b480      	push	{r7}
 8002db2:	b085      	sub	sp, #20
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
  uint8_t sleepstatus = CAN_Sleep_Failed;
 8002db8:	2300      	movs	r3, #0
 8002dba:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
    
  /* Request Sleep mode */
   CANx->MCR = (((CANx->MCR) & (uint32_t)(~(uint32_t)CAN_MCR_INRQ)) | CAN_MCR_SLEEP);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f023 0303 	bic.w	r3, r3, #3
 8002dc4:	f043 0202 	orr.w	r2, r3, #2
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	601a      	str	r2, [r3, #0]
   
  /* Sleep mode status */
  if ((CANx->MSR & (CAN_MSR_SLAK|CAN_MSR_INAK)) == CAN_MSR_SLAK)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	f003 0303 	and.w	r3, r3, #3
 8002dd4:	2b02      	cmp	r3, #2
 8002dd6:	d101      	bne.n	8002ddc <CAN_Sleep+0x2c>
  {
    /* Sleep mode not entered */
    sleepstatus =  CAN_Sleep_Ok;
 8002dd8:	2301      	movs	r3, #1
 8002dda:	73fb      	strb	r3, [r7, #15]
  }
  /* return sleep mode status */
   return (uint8_t)sleepstatus;
 8002ddc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dde:	4618      	mov	r0, r3
 8002de0:	3714      	adds	r7, #20
 8002de2:	46bd      	mov	sp, r7
 8002de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de8:	4770      	bx	lr

08002dea <CAN_WakeUp>:
  * @brief  Wakes up the CAN peripheral from sleep mode .
  * @param  CANx: where x can be 1 or 2 to select the CAN peripheral.
  * @retval CAN_WakeUp_Ok if sleep mode left, CAN_WakeUp_Failed otherwise.
  */
uint8_t CAN_WakeUp(CAN_TypeDef* CANx)
{
 8002dea:	b480      	push	{r7}
 8002dec:	b085      	sub	sp, #20
 8002dee:	af00      	add	r7, sp, #0
 8002df0:	6078      	str	r0, [r7, #4]
  uint32_t wait_slak = SLAK_TIMEOUT;
 8002df2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002df6:	60fb      	str	r3, [r7, #12]
  uint8_t wakeupstatus = CAN_WakeUp_Failed;
 8002df8:	2300      	movs	r3, #0
 8002dfa:	72fb      	strb	r3, [r7, #11]
  
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
    
  /* Wake up request */
  CANx->MCR &= ~(uint32_t)CAN_MCR_SLEEP;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f023 0202 	bic.w	r2, r3, #2
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	601a      	str	r2, [r3, #0]
    
  /* Sleep mode status */
  while(((CANx->MSR & CAN_MSR_SLAK) == CAN_MSR_SLAK)&&(wait_slak!=0x00))
 8002e08:	e002      	b.n	8002e10 <CAN_WakeUp+0x26>
  {
   wait_slak--;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	3b01      	subs	r3, #1
 8002e0e:	60fb      	str	r3, [r7, #12]
  while(((CANx->MSR & CAN_MSR_SLAK) == CAN_MSR_SLAK)&&(wait_slak!=0x00))
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	f003 0302 	and.w	r3, r3, #2
 8002e18:	2b02      	cmp	r3, #2
 8002e1a:	d102      	bne.n	8002e22 <CAN_WakeUp+0x38>
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d1f3      	bne.n	8002e0a <CAN_WakeUp+0x20>
  }
  if((CANx->MSR & CAN_MSR_SLAK) != CAN_MSR_SLAK)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	f003 0302 	and.w	r3, r3, #2
 8002e2a:	2b02      	cmp	r3, #2
 8002e2c:	d001      	beq.n	8002e32 <CAN_WakeUp+0x48>
  {
   /* wake up done : Sleep mode exited */
    wakeupstatus = CAN_WakeUp_Ok;
 8002e2e:	2301      	movs	r3, #1
 8002e30:	72fb      	strb	r3, [r7, #11]
  }
  /* return wakeup status */
  return (uint8_t)wakeupstatus;
 8002e32:	7afb      	ldrb	r3, [r7, #11]
}
 8002e34:	4618      	mov	r0, r3
 8002e36:	3714      	adds	r7, #20
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3e:	4770      	bx	lr

08002e40 <CAN_GetLastErrorCode>:
  *          - CAN_ERRORCODE_BitDominantErr: Bit Dominant Error
  *          - CAN_ERRORCODE_CRCErr: CRC Error
  *          - CAN_ERRORCODE_SoftwareSetErr: Software Set Error  
  */
uint8_t CAN_GetLastErrorCode(CAN_TypeDef* CANx)
{
 8002e40:	b480      	push	{r7}
 8002e42:	b085      	sub	sp, #20
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
  uint8_t errorcode=0;
 8002e48:	2300      	movs	r3, #0
 8002e4a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  
  /* Get the error code*/
  errorcode = (((uint8_t)CANx->ESR) & (uint8_t)CAN_ESR_LEC);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	699b      	ldr	r3, [r3, #24]
 8002e50:	b2db      	uxtb	r3, r3
 8002e52:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002e56:	73fb      	strb	r3, [r7, #15]
  
  /* Return the error code*/
  return errorcode;
 8002e58:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	3714      	adds	r7, #20
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e64:	4770      	bx	lr

08002e66 <CAN_GetReceiveErrorCounter>:
  *         error passive state.  
  * @param  CANx: where x can be 1 or 2 to to select the CAN peripheral.  
  * @retval CAN Receive Error Counter. 
  */
uint8_t CAN_GetReceiveErrorCounter(CAN_TypeDef* CANx)
{
 8002e66:	b480      	push	{r7}
 8002e68:	b085      	sub	sp, #20
 8002e6a:	af00      	add	r7, sp, #0
 8002e6c:	6078      	str	r0, [r7, #4]
  uint8_t counter=0;
 8002e6e:	2300      	movs	r3, #0
 8002e70:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  
  /* Get the Receive Error Counter*/
  counter = (uint8_t)((CANx->ESR & CAN_ESR_REC)>> 24);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	699b      	ldr	r3, [r3, #24]
 8002e76:	0e1b      	lsrs	r3, r3, #24
 8002e78:	73fb      	strb	r3, [r7, #15]
  
  /* Return the Receive Error Counter*/
  return counter;
 8002e7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	3714      	adds	r7, #20
 8002e80:	46bd      	mov	sp, r7
 8002e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e86:	4770      	bx	lr

08002e88 <CAN_GetLSBTransmitErrorCounter>:
  * @brief  Returns the LSB of the 9-bit CANx Transmit Error Counter(TEC).
  * @param  CANx: where x can be 1 or 2 to to select the CAN peripheral.
  * @retval LSB of the 9-bit CAN Transmit Error Counter. 
  */
uint8_t CAN_GetLSBTransmitErrorCounter(CAN_TypeDef* CANx)
{
 8002e88:	b480      	push	{r7}
 8002e8a:	b085      	sub	sp, #20
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
  uint8_t counter=0;
 8002e90:	2300      	movs	r3, #0
 8002e92:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  
  /* Get the LSB of the 9-bit CANx Transmit Error Counter(TEC) */
  counter = (uint8_t)((CANx->ESR & CAN_ESR_TEC)>> 16);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	699b      	ldr	r3, [r3, #24]
 8002e98:	0c1b      	lsrs	r3, r3, #16
 8002e9a:	73fb      	strb	r3, [r7, #15]
  
  /* Return the LSB of the 9-bit CANx Transmit Error Counter(TEC) */
  return counter;
 8002e9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	3714      	adds	r7, #20
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea8:	4770      	bx	lr

08002eaa <CAN_ITConfig>:
  * @param  NewState: new state of the CAN interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void CAN_ITConfig(CAN_TypeDef* CANx, uint32_t CAN_IT, FunctionalState NewState)
{
 8002eaa:	b480      	push	{r7}
 8002eac:	b085      	sub	sp, #20
 8002eae:	af00      	add	r7, sp, #0
 8002eb0:	60f8      	str	r0, [r7, #12]
 8002eb2:	60b9      	str	r1, [r7, #8]
 8002eb4:	4613      	mov	r3, r2
 8002eb6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_IT(CAN_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8002eb8:	79fb      	ldrb	r3, [r7, #7]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d006      	beq.n	8002ecc <CAN_ITConfig+0x22>
  {
    /* Enable the selected CANx interrupt */
    CANx->IER |= CAN_IT;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	695a      	ldr	r2, [r3, #20]
 8002ec2:	68bb      	ldr	r3, [r7, #8]
 8002ec4:	431a      	orrs	r2, r3
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	615a      	str	r2, [r3, #20]
  else
  {
    /* Disable the selected CANx interrupt */
    CANx->IER &= ~CAN_IT;
  }
}
 8002eca:	e006      	b.n	8002eda <CAN_ITConfig+0x30>
    CANx->IER &= ~CAN_IT;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	695a      	ldr	r2, [r3, #20]
 8002ed0:	68bb      	ldr	r3, [r7, #8]
 8002ed2:	43db      	mvns	r3, r3
 8002ed4:	401a      	ands	r2, r3
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	615a      	str	r2, [r3, #20]
}
 8002eda:	bf00      	nop
 8002edc:	3714      	adds	r7, #20
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee4:	4770      	bx	lr

08002ee6 <CAN_GetFlagStatus>:
  *            @arg CAN_FLAG_BOF: Bus-Off Flag    
  *            @arg CAN_FLAG_LEC: Last error code Flag      
  * @retval The new state of CAN_FLAG (SET or RESET).
  */
FlagStatus CAN_GetFlagStatus(CAN_TypeDef* CANx, uint32_t CAN_FLAG)
{
 8002ee6:	b480      	push	{r7}
 8002ee8:	b085      	sub	sp, #20
 8002eea:	af00      	add	r7, sp, #0
 8002eec:	6078      	str	r0, [r7, #4]
 8002eee:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_GET_FLAG(CAN_FLAG));
  

  if((CAN_FLAG & CAN_FLAGS_ESR) != (uint32_t)RESET)
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d00d      	beq.n	8002f1a <CAN_GetFlagStatus+0x34>
  { 
    /* Check the status of the specified CAN flag */
    if ((CANx->ESR & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	699a      	ldr	r2, [r3, #24]
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	4013      	ands	r3, r2
 8002f06:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d002      	beq.n	8002f14 <CAN_GetFlagStatus+0x2e>
    { 
      /* CAN_FLAG is set */
      bitstatus = SET;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	73fb      	strb	r3, [r7, #15]
 8002f12:	e048      	b.n	8002fa6 <CAN_GetFlagStatus+0xc0>
    }
    else
    { 
      /* CAN_FLAG is reset */
      bitstatus = RESET;
 8002f14:	2300      	movs	r3, #0
 8002f16:	73fb      	strb	r3, [r7, #15]
 8002f18:	e045      	b.n	8002fa6 <CAN_GetFlagStatus+0xc0>
    }
  }
  else if((CAN_FLAG & CAN_FLAGS_MSR) != (uint32_t)RESET)
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d00d      	beq.n	8002f40 <CAN_GetFlagStatus+0x5a>
  { 
    /* Check the status of the specified CAN flag */
    if ((CANx->MSR & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	685a      	ldr	r2, [r3, #4]
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	4013      	ands	r3, r2
 8002f2c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d002      	beq.n	8002f3a <CAN_GetFlagStatus+0x54>
    { 
      /* CAN_FLAG is set */
      bitstatus = SET;
 8002f34:	2301      	movs	r3, #1
 8002f36:	73fb      	strb	r3, [r7, #15]
 8002f38:	e035      	b.n	8002fa6 <CAN_GetFlagStatus+0xc0>
    }
    else
    { 
      /* CAN_FLAG is reset */
      bitstatus = RESET;
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	73fb      	strb	r3, [r7, #15]
 8002f3e:	e032      	b.n	8002fa6 <CAN_GetFlagStatus+0xc0>
    }
  }
  else if((CAN_FLAG & CAN_FLAGS_TSR) != (uint32_t)RESET)
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d00d      	beq.n	8002f66 <CAN_GetFlagStatus+0x80>
  { 
    /* Check the status of the specified CAN flag */
    if ((CANx->TSR & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	689a      	ldr	r2, [r3, #8]
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	4013      	ands	r3, r2
 8002f52:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d002      	beq.n	8002f60 <CAN_GetFlagStatus+0x7a>
    { 
      /* CAN_FLAG is set */
      bitstatus = SET;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	73fb      	strb	r3, [r7, #15]
 8002f5e:	e022      	b.n	8002fa6 <CAN_GetFlagStatus+0xc0>
    }
    else
    { 
      /* CAN_FLAG is reset */
      bitstatus = RESET;
 8002f60:	2300      	movs	r3, #0
 8002f62:	73fb      	strb	r3, [r7, #15]
 8002f64:	e01f      	b.n	8002fa6 <CAN_GetFlagStatus+0xc0>
    }
  }
  else if((CAN_FLAG & CAN_FLAGS_RF0R) != (uint32_t)RESET)
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d00d      	beq.n	8002f8c <CAN_GetFlagStatus+0xa6>
  { 
    /* Check the status of the specified CAN flag */
    if ((CANx->RF0R & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	68da      	ldr	r2, [r3, #12]
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	4013      	ands	r3, r2
 8002f78:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d002      	beq.n	8002f86 <CAN_GetFlagStatus+0xa0>
    { 
      /* CAN_FLAG is set */
      bitstatus = SET;
 8002f80:	2301      	movs	r3, #1
 8002f82:	73fb      	strb	r3, [r7, #15]
 8002f84:	e00f      	b.n	8002fa6 <CAN_GetFlagStatus+0xc0>
    }
    else
    { 
      /* CAN_FLAG is reset */
      bitstatus = RESET;
 8002f86:	2300      	movs	r3, #0
 8002f88:	73fb      	strb	r3, [r7, #15]
 8002f8a:	e00c      	b.n	8002fa6 <CAN_GetFlagStatus+0xc0>
    }
  }
  else /* If(CAN_FLAG & CAN_FLAGS_RF1R != (uint32_t)RESET) */
  { 
    /* Check the status of the specified CAN flag */
    if ((uint32_t)(CANx->RF1R & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	691a      	ldr	r2, [r3, #16]
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	4013      	ands	r3, r2
 8002f94:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d002      	beq.n	8002fa2 <CAN_GetFlagStatus+0xbc>
    { 
      /* CAN_FLAG is set */
      bitstatus = SET;
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	73fb      	strb	r3, [r7, #15]
 8002fa0:	e001      	b.n	8002fa6 <CAN_GetFlagStatus+0xc0>
    }
    else
    { 
      /* CAN_FLAG is reset */
      bitstatus = RESET;
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	73fb      	strb	r3, [r7, #15]
    }
  }
  /* Return the CAN_FLAG status */
  return  bitstatus;
 8002fa6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fa8:	4618      	mov	r0, r3
 8002faa:	3714      	adds	r7, #20
 8002fac:	46bd      	mov	sp, r7
 8002fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb2:	4770      	bx	lr

08002fb4 <CAN_ClearFlag>:
  *            @arg CAN_FLAG_SLAK: Sleep acknowledge Flag    
  *            @arg CAN_FLAG_LEC: Last error code Flag        
  * @retval None
  */
void CAN_ClearFlag(CAN_TypeDef* CANx, uint32_t CAN_FLAG)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	b085      	sub	sp, #20
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
 8002fbc:	6039      	str	r1, [r7, #0]
  uint32_t flagtmp=0;
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_CLEAR_FLAG(CAN_FLAG));
  
  if (CAN_FLAG == CAN_FLAG_LEC) /* ESR register */
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	4a17      	ldr	r2, [pc, #92]	; (8003024 <CAN_ClearFlag+0x70>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d103      	bne.n	8002fd2 <CAN_ClearFlag+0x1e>
  {
    /* Clear the selected CAN flags */
    CANx->ESR = (uint32_t)RESET;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2200      	movs	r2, #0
 8002fce:	619a      	str	r2, [r3, #24]
    {
      /* Operating mode Flags */
      CANx->MSR = (uint32_t)(flagtmp);
    }
  }
}
 8002fd0:	e021      	b.n	8003016 <CAN_ClearFlag+0x62>
    flagtmp = CAN_FLAG & 0x000FFFFF;
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002fd8:	60fb      	str	r3, [r7, #12]
    if ((CAN_FLAG & CAN_FLAGS_RF0R)!=(uint32_t)RESET)
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d003      	beq.n	8002fec <CAN_ClearFlag+0x38>
      CANx->RF0R = (uint32_t)(flagtmp);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	68fa      	ldr	r2, [r7, #12]
 8002fe8:	60da      	str	r2, [r3, #12]
}
 8002fea:	e014      	b.n	8003016 <CAN_ClearFlag+0x62>
    else if ((CAN_FLAG & CAN_FLAGS_RF1R)!=(uint32_t)RESET)
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d003      	beq.n	8002ffe <CAN_ClearFlag+0x4a>
      CANx->RF1R = (uint32_t)(flagtmp);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	68fa      	ldr	r2, [r7, #12]
 8002ffa:	611a      	str	r2, [r3, #16]
}
 8002ffc:	e00b      	b.n	8003016 <CAN_ClearFlag+0x62>
    else if ((CAN_FLAG & CAN_FLAGS_TSR)!=(uint32_t)RESET)
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003004:	2b00      	cmp	r3, #0
 8003006:	d003      	beq.n	8003010 <CAN_ClearFlag+0x5c>
      CANx->TSR = (uint32_t)(flagtmp);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	68fa      	ldr	r2, [r7, #12]
 800300c:	609a      	str	r2, [r3, #8]
}
 800300e:	e002      	b.n	8003016 <CAN_ClearFlag+0x62>
      CANx->MSR = (uint32_t)(flagtmp);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	68fa      	ldr	r2, [r7, #12]
 8003014:	605a      	str	r2, [r3, #4]
}
 8003016:	bf00      	nop
 8003018:	3714      	adds	r7, #20
 800301a:	46bd      	mov	sp, r7
 800301c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003020:	4770      	bx	lr
 8003022:	bf00      	nop
 8003024:	30f00070 	.word	0x30f00070

08003028 <CAN_GetITStatus>:
  *            @arg CAN_IT_LEC: Last error code Interrupt
  *            @arg CAN_IT_ERR: Error Interrupt
  * @retval The current state of CAN_IT (SET or RESET).
  */
ITStatus CAN_GetITStatus(CAN_TypeDef* CANx, uint32_t CAN_IT)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b084      	sub	sp, #16
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
 8003030:	6039      	str	r1, [r7, #0]
  ITStatus itstatus = RESET;
 8003032:	2300      	movs	r3, #0
 8003034:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_IT(CAN_IT));
  
  /* check the interrupt enable bit */
 if((CANx->IER & CAN_IT) != RESET)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	695a      	ldr	r2, [r3, #20]
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	4013      	ands	r3, r2
 800303e:	2b00      	cmp	r3, #0
 8003040:	f000 80b2 	beq.w	80031a8 <CAN_GetITStatus+0x180>
 {
   /* in case the Interrupt is enabled, .... */
    switch (CAN_IT)
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	2b40      	cmp	r3, #64	; 0x40
 8003048:	d062      	beq.n	8003110 <CAN_GetITStatus+0xe8>
 800304a:	2b40      	cmp	r3, #64	; 0x40
 800304c:	d80f      	bhi.n	800306e <CAN_GetITStatus+0x46>
 800304e:	2b04      	cmp	r3, #4
 8003050:	d03a      	beq.n	80030c8 <CAN_GetITStatus+0xa0>
 8003052:	2b04      	cmp	r3, #4
 8003054:	d804      	bhi.n	8003060 <CAN_GetITStatus+0x38>
 8003056:	2b01      	cmp	r3, #1
 8003058:	d024      	beq.n	80030a4 <CAN_GetITStatus+0x7c>
 800305a:	2b02      	cmp	r3, #2
 800305c:	d02b      	beq.n	80030b6 <CAN_GetITStatus+0x8e>
 800305e:	e09f      	b.n	80031a0 <CAN_GetITStatus+0x178>
 8003060:	2b10      	cmp	r3, #16
 8003062:	d043      	beq.n	80030ec <CAN_GetITStatus+0xc4>
 8003064:	2b20      	cmp	r3, #32
 8003066:	d04a      	beq.n	80030fe <CAN_GetITStatus+0xd6>
 8003068:	2b08      	cmp	r3, #8
 800306a:	d036      	beq.n	80030da <CAN_GetITStatus+0xb2>
 800306c:	e098      	b.n	80031a0 <CAN_GetITStatus+0x178>
 800306e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003072:	f000 8083 	beq.w	800317c <CAN_GetITStatus+0x154>
 8003076:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800307a:	d809      	bhi.n	8003090 <CAN_GetITStatus+0x68>
 800307c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003080:	d06a      	beq.n	8003158 <CAN_GetITStatus+0x130>
 8003082:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003086:	d070      	beq.n	800316a <CAN_GetITStatus+0x142>
 8003088:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800308c:	d05b      	beq.n	8003146 <CAN_GetITStatus+0x11e>
 800308e:	e087      	b.n	80031a0 <CAN_GetITStatus+0x178>
 8003090:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003094:	d045      	beq.n	8003122 <CAN_GetITStatus+0xfa>
 8003096:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800309a:	d04b      	beq.n	8003134 <CAN_GetITStatus+0x10c>
 800309c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80030a0:	d075      	beq.n	800318e <CAN_GetITStatus+0x166>
 80030a2:	e07d      	b.n	80031a0 <CAN_GetITStatus+0x178>
    {
      case CAN_IT_TME:
        /* Check CAN_TSR_RQCPx bits */
        itstatus = CheckITStatus(CANx->TSR, CAN_TSR_RQCP0|CAN_TSR_RQCP1|CAN_TSR_RQCP2);  
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	689b      	ldr	r3, [r3, #8]
 80030a8:	4943      	ldr	r1, [pc, #268]	; (80031b8 <CAN_GetITStatus+0x190>)
 80030aa:	4618      	mov	r0, r3
 80030ac:	f000 f8f6 	bl	800329c <CheckITStatus>
 80030b0:	4603      	mov	r3, r0
 80030b2:	73fb      	strb	r3, [r7, #15]
        break;
 80030b4:	e07a      	b.n	80031ac <CAN_GetITStatus+0x184>
      case CAN_IT_FMP0:
        /* Check CAN_RF0R_FMP0 bit */
        itstatus = CheckITStatus(CANx->RF0R, CAN_RF0R_FMP0);  
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	68db      	ldr	r3, [r3, #12]
 80030ba:	2103      	movs	r1, #3
 80030bc:	4618      	mov	r0, r3
 80030be:	f000 f8ed 	bl	800329c <CheckITStatus>
 80030c2:	4603      	mov	r3, r0
 80030c4:	73fb      	strb	r3, [r7, #15]
        break;
 80030c6:	e071      	b.n	80031ac <CAN_GetITStatus+0x184>
      case CAN_IT_FF0:
        /* Check CAN_RF0R_FULL0 bit */
        itstatus = CheckITStatus(CANx->RF0R, CAN_RF0R_FULL0);  
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	68db      	ldr	r3, [r3, #12]
 80030cc:	2108      	movs	r1, #8
 80030ce:	4618      	mov	r0, r3
 80030d0:	f000 f8e4 	bl	800329c <CheckITStatus>
 80030d4:	4603      	mov	r3, r0
 80030d6:	73fb      	strb	r3, [r7, #15]
        break;
 80030d8:	e068      	b.n	80031ac <CAN_GetITStatus+0x184>
      case CAN_IT_FOV0:
        /* Check CAN_RF0R_FOVR0 bit */
        itstatus = CheckITStatus(CANx->RF0R, CAN_RF0R_FOVR0);  
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	68db      	ldr	r3, [r3, #12]
 80030de:	2110      	movs	r1, #16
 80030e0:	4618      	mov	r0, r3
 80030e2:	f000 f8db 	bl	800329c <CheckITStatus>
 80030e6:	4603      	mov	r3, r0
 80030e8:	73fb      	strb	r3, [r7, #15]
        break;
 80030ea:	e05f      	b.n	80031ac <CAN_GetITStatus+0x184>
      case CAN_IT_FMP1:
        /* Check CAN_RF1R_FMP1 bit */
        itstatus = CheckITStatus(CANx->RF1R, CAN_RF1R_FMP1);  
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	691b      	ldr	r3, [r3, #16]
 80030f0:	2103      	movs	r1, #3
 80030f2:	4618      	mov	r0, r3
 80030f4:	f000 f8d2 	bl	800329c <CheckITStatus>
 80030f8:	4603      	mov	r3, r0
 80030fa:	73fb      	strb	r3, [r7, #15]
        break;
 80030fc:	e056      	b.n	80031ac <CAN_GetITStatus+0x184>
      case CAN_IT_FF1:
        /* Check CAN_RF1R_FULL1 bit */
        itstatus = CheckITStatus(CANx->RF1R, CAN_RF1R_FULL1);  
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	691b      	ldr	r3, [r3, #16]
 8003102:	2108      	movs	r1, #8
 8003104:	4618      	mov	r0, r3
 8003106:	f000 f8c9 	bl	800329c <CheckITStatus>
 800310a:	4603      	mov	r3, r0
 800310c:	73fb      	strb	r3, [r7, #15]
        break;
 800310e:	e04d      	b.n	80031ac <CAN_GetITStatus+0x184>
      case CAN_IT_FOV1:
        /* Check CAN_RF1R_FOVR1 bit */
        itstatus = CheckITStatus(CANx->RF1R, CAN_RF1R_FOVR1);  
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	691b      	ldr	r3, [r3, #16]
 8003114:	2110      	movs	r1, #16
 8003116:	4618      	mov	r0, r3
 8003118:	f000 f8c0 	bl	800329c <CheckITStatus>
 800311c:	4603      	mov	r3, r0
 800311e:	73fb      	strb	r3, [r7, #15]
        break;
 8003120:	e044      	b.n	80031ac <CAN_GetITStatus+0x184>
      case CAN_IT_WKU:
        /* Check CAN_MSR_WKUI bit */
        itstatus = CheckITStatus(CANx->MSR, CAN_MSR_WKUI);  
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	2108      	movs	r1, #8
 8003128:	4618      	mov	r0, r3
 800312a:	f000 f8b7 	bl	800329c <CheckITStatus>
 800312e:	4603      	mov	r3, r0
 8003130:	73fb      	strb	r3, [r7, #15]
        break;
 8003132:	e03b      	b.n	80031ac <CAN_GetITStatus+0x184>
      case CAN_IT_SLK:
        /* Check CAN_MSR_SLAKI bit */
        itstatus = CheckITStatus(CANx->MSR, CAN_MSR_SLAKI);  
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	2110      	movs	r1, #16
 800313a:	4618      	mov	r0, r3
 800313c:	f000 f8ae 	bl	800329c <CheckITStatus>
 8003140:	4603      	mov	r3, r0
 8003142:	73fb      	strb	r3, [r7, #15]
        break;
 8003144:	e032      	b.n	80031ac <CAN_GetITStatus+0x184>
      case CAN_IT_EWG:
        /* Check CAN_ESR_EWGF bit */
        itstatus = CheckITStatus(CANx->ESR, CAN_ESR_EWGF);  
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	699b      	ldr	r3, [r3, #24]
 800314a:	2101      	movs	r1, #1
 800314c:	4618      	mov	r0, r3
 800314e:	f000 f8a5 	bl	800329c <CheckITStatus>
 8003152:	4603      	mov	r3, r0
 8003154:	73fb      	strb	r3, [r7, #15]
        break;
 8003156:	e029      	b.n	80031ac <CAN_GetITStatus+0x184>
      case CAN_IT_EPV:
        /* Check CAN_ESR_EPVF bit */
        itstatus = CheckITStatus(CANx->ESR, CAN_ESR_EPVF);  
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	699b      	ldr	r3, [r3, #24]
 800315c:	2102      	movs	r1, #2
 800315e:	4618      	mov	r0, r3
 8003160:	f000 f89c 	bl	800329c <CheckITStatus>
 8003164:	4603      	mov	r3, r0
 8003166:	73fb      	strb	r3, [r7, #15]
        break;
 8003168:	e020      	b.n	80031ac <CAN_GetITStatus+0x184>
      case CAN_IT_BOF:
        /* Check CAN_ESR_BOFF bit */
        itstatus = CheckITStatus(CANx->ESR, CAN_ESR_BOFF);  
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	699b      	ldr	r3, [r3, #24]
 800316e:	2104      	movs	r1, #4
 8003170:	4618      	mov	r0, r3
 8003172:	f000 f893 	bl	800329c <CheckITStatus>
 8003176:	4603      	mov	r3, r0
 8003178:	73fb      	strb	r3, [r7, #15]
        break;
 800317a:	e017      	b.n	80031ac <CAN_GetITStatus+0x184>
      case CAN_IT_LEC:
        /* Check CAN_ESR_LEC bit */
        itstatus = CheckITStatus(CANx->ESR, CAN_ESR_LEC);  
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	699b      	ldr	r3, [r3, #24]
 8003180:	2170      	movs	r1, #112	; 0x70
 8003182:	4618      	mov	r0, r3
 8003184:	f000 f88a 	bl	800329c <CheckITStatus>
 8003188:	4603      	mov	r3, r0
 800318a:	73fb      	strb	r3, [r7, #15]
        break;
 800318c:	e00e      	b.n	80031ac <CAN_GetITStatus+0x184>
      case CAN_IT_ERR:
        /* Check CAN_MSR_ERRI bit */ 
        itstatus = CheckITStatus(CANx->MSR, CAN_MSR_ERRI); 
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	2104      	movs	r1, #4
 8003194:	4618      	mov	r0, r3
 8003196:	f000 f881 	bl	800329c <CheckITStatus>
 800319a:	4603      	mov	r3, r0
 800319c:	73fb      	strb	r3, [r7, #15]
        break;
 800319e:	e005      	b.n	80031ac <CAN_GetITStatus+0x184>
      default:
        /* in case of error, return RESET */
        itstatus = RESET;
 80031a0:	2300      	movs	r3, #0
 80031a2:	73fb      	strb	r3, [r7, #15]
        break;
 80031a4:	bf00      	nop
 80031a6:	e001      	b.n	80031ac <CAN_GetITStatus+0x184>
    }
  }
  else
  {
   /* in case the Interrupt is not enabled, return RESET */
    itstatus  = RESET;
 80031a8:	2300      	movs	r3, #0
 80031aa:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return the CAN_IT status */
  return  itstatus;
 80031ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80031ae:	4618      	mov	r0, r3
 80031b0:	3710      	adds	r7, #16
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd80      	pop	{r7, pc}
 80031b6:	bf00      	nop
 80031b8:	00010101 	.word	0x00010101

080031bc <CAN_ClearITPendingBit>:
  *            @arg CAN_IT_LEC: Last error code Interrupt
  *            @arg CAN_IT_ERR: Error Interrupt 
  * @retval None
  */
void CAN_ClearITPendingBit(CAN_TypeDef* CANx, uint32_t CAN_IT)
{
 80031bc:	b480      	push	{r7}
 80031be:	b083      	sub	sp, #12
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
 80031c4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_CLEAR_IT(CAN_IT));

  switch (CAN_IT)
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031cc:	d043      	beq.n	8003256 <CAN_ClearITPendingBit+0x9a>
 80031ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031d2:	d80d      	bhi.n	80031f0 <CAN_ClearITPendingBit+0x34>
 80031d4:	2b08      	cmp	r3, #8
 80031d6:	d02a      	beq.n	800322e <CAN_ClearITPendingBit+0x72>
 80031d8:	2b08      	cmp	r3, #8
 80031da:	d804      	bhi.n	80031e6 <CAN_ClearITPendingBit+0x2a>
 80031dc:	2b01      	cmp	r3, #1
 80031de:	d01e      	beq.n	800321e <CAN_ClearITPendingBit+0x62>
 80031e0:	2b04      	cmp	r3, #4
 80031e2:	d020      	beq.n	8003226 <CAN_ClearITPendingBit+0x6a>
      /* Clear CAN_MSR_ERRI (rc_w1) */
      CANx->MSR = CAN_MSR_ERRI; 
       /* @note BOFF, EPVF and EWGF Flags are cleared by hardware depending on the CAN Bus status*/
       break;
    default:
       break;
 80031e4:	e051      	b.n	800328a <CAN_ClearITPendingBit+0xce>
  switch (CAN_IT)
 80031e6:	2b20      	cmp	r3, #32
 80031e8:	d025      	beq.n	8003236 <CAN_ClearITPendingBit+0x7a>
 80031ea:	2b40      	cmp	r3, #64	; 0x40
 80031ec:	d027      	beq.n	800323e <CAN_ClearITPendingBit+0x82>
       break;
 80031ee:	e04c      	b.n	800328a <CAN_ClearITPendingBit+0xce>
  switch (CAN_IT)
 80031f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80031f4:	d03b      	beq.n	800326e <CAN_ClearITPendingBit+0xb2>
 80031f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80031fa:	d806      	bhi.n	800320a <CAN_ClearITPendingBit+0x4e>
 80031fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003200:	d02d      	beq.n	800325e <CAN_ClearITPendingBit+0xa2>
 8003202:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003206:	d02e      	beq.n	8003266 <CAN_ClearITPendingBit+0xaa>
       break;
 8003208:	e03f      	b.n	800328a <CAN_ClearITPendingBit+0xce>
  switch (CAN_IT)
 800320a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800320e:	d01a      	beq.n	8003246 <CAN_ClearITPendingBit+0x8a>
 8003210:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003214:	d01b      	beq.n	800324e <CAN_ClearITPendingBit+0x92>
 8003216:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800321a:	d02f      	beq.n	800327c <CAN_ClearITPendingBit+0xc0>
       break;
 800321c:	e035      	b.n	800328a <CAN_ClearITPendingBit+0xce>
      CANx->TSR = CAN_TSR_RQCP0|CAN_TSR_RQCP1|CAN_TSR_RQCP2;  
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	4a1d      	ldr	r2, [pc, #116]	; (8003298 <CAN_ClearITPendingBit+0xdc>)
 8003222:	609a      	str	r2, [r3, #8]
      break;
 8003224:	e031      	b.n	800328a <CAN_ClearITPendingBit+0xce>
      CANx->RF0R = CAN_RF0R_FULL0; 
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2208      	movs	r2, #8
 800322a:	60da      	str	r2, [r3, #12]
      break;
 800322c:	e02d      	b.n	800328a <CAN_ClearITPendingBit+0xce>
      CANx->RF0R = CAN_RF0R_FOVR0; 
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2210      	movs	r2, #16
 8003232:	60da      	str	r2, [r3, #12]
      break;
 8003234:	e029      	b.n	800328a <CAN_ClearITPendingBit+0xce>
      CANx->RF1R = CAN_RF1R_FULL1;  
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2208      	movs	r2, #8
 800323a:	611a      	str	r2, [r3, #16]
      break;
 800323c:	e025      	b.n	800328a <CAN_ClearITPendingBit+0xce>
      CANx->RF1R = CAN_RF1R_FOVR1; 
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2210      	movs	r2, #16
 8003242:	611a      	str	r2, [r3, #16]
      break;
 8003244:	e021      	b.n	800328a <CAN_ClearITPendingBit+0xce>
      CANx->MSR = CAN_MSR_WKUI;  
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2208      	movs	r2, #8
 800324a:	605a      	str	r2, [r3, #4]
      break;
 800324c:	e01d      	b.n	800328a <CAN_ClearITPendingBit+0xce>
      CANx->MSR = CAN_MSR_SLAKI;   
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2210      	movs	r2, #16
 8003252:	605a      	str	r2, [r3, #4]
      break;
 8003254:	e019      	b.n	800328a <CAN_ClearITPendingBit+0xce>
      CANx->MSR = CAN_MSR_ERRI;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2204      	movs	r2, #4
 800325a:	605a      	str	r2, [r3, #4]
      break;
 800325c:	e015      	b.n	800328a <CAN_ClearITPendingBit+0xce>
      CANx->MSR = CAN_MSR_ERRI; 
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2204      	movs	r2, #4
 8003262:	605a      	str	r2, [r3, #4]
      break;
 8003264:	e011      	b.n	800328a <CAN_ClearITPendingBit+0xce>
      CANx->MSR = CAN_MSR_ERRI; 
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2204      	movs	r2, #4
 800326a:	605a      	str	r2, [r3, #4]
       break;
 800326c:	e00d      	b.n	800328a <CAN_ClearITPendingBit+0xce>
      CANx->ESR = RESET; 
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2200      	movs	r2, #0
 8003272:	619a      	str	r2, [r3, #24]
      CANx->MSR = CAN_MSR_ERRI; 
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2204      	movs	r2, #4
 8003278:	605a      	str	r2, [r3, #4]
      break;
 800327a:	e006      	b.n	800328a <CAN_ClearITPendingBit+0xce>
      CANx->ESR = RESET; 
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2200      	movs	r2, #0
 8003280:	619a      	str	r2, [r3, #24]
      CANx->MSR = CAN_MSR_ERRI; 
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2204      	movs	r2, #4
 8003286:	605a      	str	r2, [r3, #4]
       break;
 8003288:	bf00      	nop
   }
}
 800328a:	bf00      	nop
 800328c:	370c      	adds	r7, #12
 800328e:	46bd      	mov	sp, r7
 8003290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003294:	4770      	bx	lr
 8003296:	bf00      	nop
 8003298:	00010101 	.word	0x00010101

0800329c <CheckITStatus>:
  * @param  CAN_Reg: specifies the CAN interrupt register to check.
  * @param  It_Bit: specifies the interrupt source bit to check.
  * @retval The new state of the CAN Interrupt (SET or RESET).
  */
static ITStatus CheckITStatus(uint32_t CAN_Reg, uint32_t It_Bit)
{
 800329c:	b480      	push	{r7}
 800329e:	b085      	sub	sp, #20
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
 80032a4:	6039      	str	r1, [r7, #0]
  ITStatus pendingbitstatus = RESET;
 80032a6:	2300      	movs	r3, #0
 80032a8:	73fb      	strb	r3, [r7, #15]
  
  if ((CAN_Reg & It_Bit) != (uint32_t)RESET)
 80032aa:	687a      	ldr	r2, [r7, #4]
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	4013      	ands	r3, r2
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d002      	beq.n	80032ba <CheckITStatus+0x1e>
  {
    /* CAN_IT is set */
    pendingbitstatus = SET;
 80032b4:	2301      	movs	r3, #1
 80032b6:	73fb      	strb	r3, [r7, #15]
 80032b8:	e001      	b.n	80032be <CheckITStatus+0x22>
  }
  else
  {
    /* CAN_IT is reset */
    pendingbitstatus = RESET;
 80032ba:	2300      	movs	r3, #0
 80032bc:	73fb      	strb	r3, [r7, #15]
  }
  return pendingbitstatus;
 80032be:	7bfb      	ldrb	r3, [r7, #15]
}
 80032c0:	4618      	mov	r0, r3
 80032c2:	3714      	adds	r7, #20
 80032c4:	46bd      	mov	sp, r7
 80032c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ca:	4770      	bx	lr

080032cc <DAC_DeInit>:
  * @brief  Deinitializes the DAC peripheral registers to their default reset values.
  * @param  None
  * @retval None
  */
void DAC_DeInit(void)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	af00      	add	r7, sp, #0
  /* Enable DAC reset state */
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_DAC, ENABLE);
 80032d0:	2101      	movs	r1, #1
 80032d2:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 80032d6:	f005 fc3f 	bl	8008b58 <RCC_APB1PeriphResetCmd>
  /* Release DAC from reset state */
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_DAC, DISABLE);
 80032da:	2100      	movs	r1, #0
 80032dc:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 80032e0:	f005 fc3a 	bl	8008b58 <RCC_APB1PeriphResetCmd>
}
 80032e4:	bf00      	nop
 80032e6:	bd80      	pop	{r7, pc}

080032e8 <DAC_Init>:
  * @param  DAC_InitStruct: pointer to a DAC_InitTypeDef structure that contains
  *         the configuration information for the  specified DAC channel.
  * @retval None
  */
void DAC_Init(uint32_t DAC_Channel, DAC_InitTypeDef* DAC_InitStruct)
{
 80032e8:	b480      	push	{r7}
 80032ea:	b085      	sub	sp, #20
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
 80032f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
 80032f2:	2300      	movs	r3, #0
 80032f4:	60fb      	str	r3, [r7, #12]
 80032f6:	2300      	movs	r3, #0
 80032f8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_DAC_LFSR_UNMASK_TRIANGLE_AMPLITUDE(DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(DAC_InitStruct->DAC_OutputBuffer));

/*---------------------------- DAC CR Configuration --------------------------*/
  /* Get the DAC CR value */
  tmpreg1 = DAC->CR;
 80032fa:	4b14      	ldr	r3, [pc, #80]	; (800334c <DAC_Init+0x64>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	60fb      	str	r3, [r7, #12]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(CR_CLEAR_MASK << DAC_Channel);
 8003300:	f640 72fe 	movw	r2, #4094	; 0xffe
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	fa02 f303 	lsl.w	r3, r2, r3
 800330a:	43db      	mvns	r3, r3
 800330c:	68fa      	ldr	r2, [r7, #12]
 800330e:	4013      	ands	r3, r2
 8003310:	60fb      	str	r3, [r7, #12]
     wave generation, mask/amplitude for wave generation */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set WAVEx bits according to DAC_WaveGeneration value */
  /* Set MAMPx bits according to DAC_LFSRUnmask_TriangleAmplitude value */ 
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (DAC_InitStruct->DAC_Trigger | DAC_InitStruct->DAC_WaveGeneration |
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	681a      	ldr	r2, [r3, #0]
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	431a      	orrs	r2, r3
             DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude | \
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	689b      	ldr	r3, [r3, #8]
  tmpreg2 = (DAC_InitStruct->DAC_Trigger | DAC_InitStruct->DAC_WaveGeneration |
 8003320:	431a      	orrs	r2, r3
             DAC_InitStruct->DAC_OutputBuffer);
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	68db      	ldr	r3, [r3, #12]
  tmpreg2 = (DAC_InitStruct->DAC_Trigger | DAC_InitStruct->DAC_WaveGeneration |
 8003326:	4313      	orrs	r3, r2
 8003328:	60bb      	str	r3, [r7, #8]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << DAC_Channel;
 800332a:	68ba      	ldr	r2, [r7, #8]
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	fa02 f303 	lsl.w	r3, r2, r3
 8003332:	68fa      	ldr	r2, [r7, #12]
 8003334:	4313      	orrs	r3, r2
 8003336:	60fb      	str	r3, [r7, #12]
  /* Write to DAC CR */
  DAC->CR = tmpreg1;
 8003338:	4a04      	ldr	r2, [pc, #16]	; (800334c <DAC_Init+0x64>)
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	6013      	str	r3, [r2, #0]
}
 800333e:	bf00      	nop
 8003340:	3714      	adds	r7, #20
 8003342:	46bd      	mov	sp, r7
 8003344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003348:	4770      	bx	lr
 800334a:	bf00      	nop
 800334c:	40007400 	.word	0x40007400

08003350 <DAC_StructInit>:
  * @param  DAC_InitStruct: pointer to a DAC_InitTypeDef structure which will 
  *         be initialized.
  * @retval None
  */
void DAC_StructInit(DAC_InitTypeDef* DAC_InitStruct)
{
 8003350:	b480      	push	{r7}
 8003352:	b083      	sub	sp, #12
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
/*--------------- Reset DAC init structure parameters values -----------------*/
  /* Initialize the DAC_Trigger member */
  DAC_InitStruct->DAC_Trigger = DAC_Trigger_None;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2200      	movs	r2, #0
 800335c:	601a      	str	r2, [r3, #0]
  /* Initialize the DAC_WaveGeneration member */
  DAC_InitStruct->DAC_WaveGeneration = DAC_WaveGeneration_None;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2200      	movs	r2, #0
 8003362:	605a      	str	r2, [r3, #4]
  /* Initialize the DAC_LFSRUnmask_TriangleAmplitude member */
  DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude = DAC_LFSRUnmask_Bit0;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2200      	movs	r2, #0
 8003368:	609a      	str	r2, [r3, #8]
  /* Initialize the DAC_OutputBuffer member */
  DAC_InitStruct->DAC_OutputBuffer = DAC_OutputBuffer_Enable;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2200      	movs	r2, #0
 800336e:	60da      	str	r2, [r3, #12]
}
 8003370:	bf00      	nop
 8003372:	370c      	adds	r7, #12
 8003374:	46bd      	mov	sp, r7
 8003376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337a:	4770      	bx	lr

0800337c <DAC_Cmd>:
  *          This parameter can be: ENABLE or DISABLE.
  * @note   When the DAC channel is enabled the trigger source can no more be modified.
  * @retval None
  */
void DAC_Cmd(uint32_t DAC_Channel, FunctionalState NewState)
{
 800337c:	b480      	push	{r7}
 800337e:	b083      	sub	sp, #12
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
 8003384:	460b      	mov	r3, r1
 8003386:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8003388:	78fb      	ldrb	r3, [r7, #3]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d009      	beq.n	80033a2 <DAC_Cmd+0x26>
  {
    /* Enable the selected DAC channel */
    DAC->CR |= (DAC_CR_EN1 << DAC_Channel);
 800338e:	4b0d      	ldr	r3, [pc, #52]	; (80033c4 <DAC_Cmd+0x48>)
 8003390:	681a      	ldr	r2, [r3, #0]
 8003392:	2101      	movs	r1, #1
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	fa01 f303 	lsl.w	r3, r1, r3
 800339a:	490a      	ldr	r1, [pc, #40]	; (80033c4 <DAC_Cmd+0x48>)
 800339c:	4313      	orrs	r3, r2
 800339e:	600b      	str	r3, [r1, #0]
  else
  {
    /* Disable the selected DAC channel */
    DAC->CR &= (~(DAC_CR_EN1 << DAC_Channel));
  }
}
 80033a0:	e009      	b.n	80033b6 <DAC_Cmd+0x3a>
    DAC->CR &= (~(DAC_CR_EN1 << DAC_Channel));
 80033a2:	4b08      	ldr	r3, [pc, #32]	; (80033c4 <DAC_Cmd+0x48>)
 80033a4:	681a      	ldr	r2, [r3, #0]
 80033a6:	2101      	movs	r1, #1
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	fa01 f303 	lsl.w	r3, r1, r3
 80033ae:	43db      	mvns	r3, r3
 80033b0:	4904      	ldr	r1, [pc, #16]	; (80033c4 <DAC_Cmd+0x48>)
 80033b2:	4013      	ands	r3, r2
 80033b4:	600b      	str	r3, [r1, #0]
}
 80033b6:	bf00      	nop
 80033b8:	370c      	adds	r7, #12
 80033ba:	46bd      	mov	sp, r7
 80033bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c0:	4770      	bx	lr
 80033c2:	bf00      	nop
 80033c4:	40007400 	.word	0x40007400

080033c8 <DAC_SoftwareTriggerCmd>:
  * @param  NewState: new state of the selected DAC channel software trigger.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DAC_SoftwareTriggerCmd(uint32_t DAC_Channel, FunctionalState NewState)
{
 80033c8:	b480      	push	{r7}
 80033ca:	b083      	sub	sp, #12
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
 80033d0:	460b      	mov	r3, r1
 80033d2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80033d4:	78fb      	ldrb	r3, [r7, #3]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d00a      	beq.n	80033f0 <DAC_SoftwareTriggerCmd+0x28>
  {
    /* Enable software trigger for the selected DAC channel */
    DAC->SWTRIGR |= (uint32_t)DAC_SWTRIGR_SWTRIG1 << (DAC_Channel >> 4);
 80033da:	4b0e      	ldr	r3, [pc, #56]	; (8003414 <DAC_SoftwareTriggerCmd+0x4c>)
 80033dc:	685a      	ldr	r2, [r3, #4]
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	091b      	lsrs	r3, r3, #4
 80033e2:	2101      	movs	r1, #1
 80033e4:	fa01 f303 	lsl.w	r3, r1, r3
 80033e8:	490a      	ldr	r1, [pc, #40]	; (8003414 <DAC_SoftwareTriggerCmd+0x4c>)
 80033ea:	4313      	orrs	r3, r2
 80033ec:	604b      	str	r3, [r1, #4]
  else
  {
    /* Disable software trigger for the selected DAC channel */
    DAC->SWTRIGR &= ~((uint32_t)DAC_SWTRIGR_SWTRIG1 << (DAC_Channel >> 4));
  }
}
 80033ee:	e00a      	b.n	8003406 <DAC_SoftwareTriggerCmd+0x3e>
    DAC->SWTRIGR &= ~((uint32_t)DAC_SWTRIGR_SWTRIG1 << (DAC_Channel >> 4));
 80033f0:	4b08      	ldr	r3, [pc, #32]	; (8003414 <DAC_SoftwareTriggerCmd+0x4c>)
 80033f2:	685a      	ldr	r2, [r3, #4]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	091b      	lsrs	r3, r3, #4
 80033f8:	2101      	movs	r1, #1
 80033fa:	fa01 f303 	lsl.w	r3, r1, r3
 80033fe:	43db      	mvns	r3, r3
 8003400:	4904      	ldr	r1, [pc, #16]	; (8003414 <DAC_SoftwareTriggerCmd+0x4c>)
 8003402:	4013      	ands	r3, r2
 8003404:	604b      	str	r3, [r1, #4]
}
 8003406:	bf00      	nop
 8003408:	370c      	adds	r7, #12
 800340a:	46bd      	mov	sp, r7
 800340c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003410:	4770      	bx	lr
 8003412:	bf00      	nop
 8003414:	40007400 	.word	0x40007400

08003418 <DAC_DualSoftwareTriggerCmd>:
  * @param  NewState: new state of the DAC channels software triggers.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DAC_DualSoftwareTriggerCmd(FunctionalState NewState)
{
 8003418:	b480      	push	{r7}
 800341a:	b083      	sub	sp, #12
 800341c:	af00      	add	r7, sp, #0
 800341e:	4603      	mov	r3, r0
 8003420:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8003422:	79fb      	ldrb	r3, [r7, #7]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d006      	beq.n	8003436 <DAC_DualSoftwareTriggerCmd+0x1e>
  {
    /* Enable software trigger for both DAC channels */
    DAC->SWTRIGR |= DUAL_SWTRIG_SET;
 8003428:	4b09      	ldr	r3, [pc, #36]	; (8003450 <DAC_DualSoftwareTriggerCmd+0x38>)
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	4a08      	ldr	r2, [pc, #32]	; (8003450 <DAC_DualSoftwareTriggerCmd+0x38>)
 800342e:	f043 0303 	orr.w	r3, r3, #3
 8003432:	6053      	str	r3, [r2, #4]
  else
  {
    /* Disable software trigger for both DAC channels */
    DAC->SWTRIGR &= DUAL_SWTRIG_RESET;
  }
}
 8003434:	e005      	b.n	8003442 <DAC_DualSoftwareTriggerCmd+0x2a>
    DAC->SWTRIGR &= DUAL_SWTRIG_RESET;
 8003436:	4b06      	ldr	r3, [pc, #24]	; (8003450 <DAC_DualSoftwareTriggerCmd+0x38>)
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	4a05      	ldr	r2, [pc, #20]	; (8003450 <DAC_DualSoftwareTriggerCmd+0x38>)
 800343c:	f023 0303 	bic.w	r3, r3, #3
 8003440:	6053      	str	r3, [r2, #4]
}
 8003442:	bf00      	nop
 8003444:	370c      	adds	r7, #12
 8003446:	46bd      	mov	sp, r7
 8003448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344c:	4770      	bx	lr
 800344e:	bf00      	nop
 8003450:	40007400 	.word	0x40007400

08003454 <DAC_WaveGenerationCmd>:
  * @param  NewState: new state of the selected DAC channel wave generation.
  *          This parameter can be: ENABLE or DISABLE.  
  * @retval None
  */
void DAC_WaveGenerationCmd(uint32_t DAC_Channel, uint32_t DAC_Wave, FunctionalState NewState)
{
 8003454:	b480      	push	{r7}
 8003456:	b085      	sub	sp, #20
 8003458:	af00      	add	r7, sp, #0
 800345a:	60f8      	str	r0, [r7, #12]
 800345c:	60b9      	str	r1, [r7, #8]
 800345e:	4613      	mov	r3, r2
 8003460:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_DAC_WAVE(DAC_Wave)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8003462:	79fb      	ldrb	r3, [r7, #7]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d009      	beq.n	800347c <DAC_WaveGenerationCmd+0x28>
  {
    /* Enable the selected wave generation for the selected DAC channel */
    DAC->CR |= DAC_Wave << DAC_Channel;
 8003468:	4b0c      	ldr	r3, [pc, #48]	; (800349c <DAC_WaveGenerationCmd+0x48>)
 800346a:	681a      	ldr	r2, [r3, #0]
 800346c:	68b9      	ldr	r1, [r7, #8]
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	fa01 f303 	lsl.w	r3, r1, r3
 8003474:	4909      	ldr	r1, [pc, #36]	; (800349c <DAC_WaveGenerationCmd+0x48>)
 8003476:	4313      	orrs	r3, r2
 8003478:	600b      	str	r3, [r1, #0]
  else
  {
    /* Disable the selected wave generation for the selected DAC channel */
    DAC->CR &= ~(DAC_Wave << DAC_Channel);
  }
}
 800347a:	e009      	b.n	8003490 <DAC_WaveGenerationCmd+0x3c>
    DAC->CR &= ~(DAC_Wave << DAC_Channel);
 800347c:	4b07      	ldr	r3, [pc, #28]	; (800349c <DAC_WaveGenerationCmd+0x48>)
 800347e:	681a      	ldr	r2, [r3, #0]
 8003480:	68b9      	ldr	r1, [r7, #8]
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	fa01 f303 	lsl.w	r3, r1, r3
 8003488:	43db      	mvns	r3, r3
 800348a:	4904      	ldr	r1, [pc, #16]	; (800349c <DAC_WaveGenerationCmd+0x48>)
 800348c:	4013      	ands	r3, r2
 800348e:	600b      	str	r3, [r1, #0]
}
 8003490:	bf00      	nop
 8003492:	3714      	adds	r7, #20
 8003494:	46bd      	mov	sp, r7
 8003496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349a:	4770      	bx	lr
 800349c:	40007400 	.word	0x40007400

080034a0 <DAC_SetChannel1Data>:
  *            @arg DAC_Align_12b_R: 12bit right data alignment selected
  * @param  Data: Data to be loaded in the selected data holding register.
  * @retval None
  */
void DAC_SetChannel1Data(uint32_t DAC_Align, uint16_t Data)
{  
 80034a0:	b480      	push	{r7}
 80034a2:	b085      	sub	sp, #20
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
 80034a8:	460b      	mov	r3, r1
 80034aa:	807b      	strh	r3, [r7, #2]
  __IO uint32_t tmp = 0;
 80034ac:	2300      	movs	r3, #0
 80034ae:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_DAC_ALIGN(DAC_Align));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)DAC_BASE; 
 80034b0:	4b08      	ldr	r3, [pc, #32]	; (80034d4 <DAC_SetChannel1Data+0x34>)
 80034b2:	60fb      	str	r3, [r7, #12]
  tmp += DHR12R1_OFFSET + DAC_Align;
 80034b4:	68fa      	ldr	r2, [r7, #12]
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	4413      	add	r3, r2
 80034ba:	3308      	adds	r3, #8
 80034bc:	60fb      	str	r3, [r7, #12]

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	461a      	mov	r2, r3
 80034c2:	887b      	ldrh	r3, [r7, #2]
 80034c4:	6013      	str	r3, [r2, #0]
}
 80034c6:	bf00      	nop
 80034c8:	3714      	adds	r7, #20
 80034ca:	46bd      	mov	sp, r7
 80034cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d0:	4770      	bx	lr
 80034d2:	bf00      	nop
 80034d4:	40007400 	.word	0x40007400

080034d8 <DAC_SetChannel2Data>:
  *            @arg DAC_Align_12b_R: 12bit right data alignment selected
  * @param  Data: Data to be loaded in the selected data holding register.
  * @retval None
  */
void DAC_SetChannel2Data(uint32_t DAC_Align, uint16_t Data)
{
 80034d8:	b480      	push	{r7}
 80034da:	b085      	sub	sp, #20
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
 80034e0:	460b      	mov	r3, r1
 80034e2:	807b      	strh	r3, [r7, #2]
  __IO uint32_t tmp = 0;
 80034e4:	2300      	movs	r3, #0
 80034e6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_DAC_ALIGN(DAC_Align));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)DAC_BASE;
 80034e8:	4b08      	ldr	r3, [pc, #32]	; (800350c <DAC_SetChannel2Data+0x34>)
 80034ea:	60fb      	str	r3, [r7, #12]
  tmp += DHR12R2_OFFSET + DAC_Align;
 80034ec:	68fa      	ldr	r2, [r7, #12]
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	4413      	add	r3, r2
 80034f2:	3314      	adds	r3, #20
 80034f4:	60fb      	str	r3, [r7, #12]

  /* Set the DAC channel2 selected data holding register */
  *(__IO uint32_t *)tmp = Data;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	461a      	mov	r2, r3
 80034fa:	887b      	ldrh	r3, [r7, #2]
 80034fc:	6013      	str	r3, [r2, #0]
}
 80034fe:	bf00      	nop
 8003500:	3714      	adds	r7, #20
 8003502:	46bd      	mov	sp, r7
 8003504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003508:	4770      	bx	lr
 800350a:	bf00      	nop
 800350c:	40007400 	.word	0x40007400

08003510 <DAC_SetDualChannelData>:
  * @note   In dual mode, a unique register access is required to write in both
  *          DAC channels at the same time.
  * @retval None
  */
void DAC_SetDualChannelData(uint32_t DAC_Align, uint16_t Data2, uint16_t Data1)
{
 8003510:	b480      	push	{r7}
 8003512:	b085      	sub	sp, #20
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
 8003518:	460b      	mov	r3, r1
 800351a:	807b      	strh	r3, [r7, #2]
 800351c:	4613      	mov	r3, r2
 800351e:	803b      	strh	r3, [r7, #0]
  uint32_t data = 0, tmp = 0;
 8003520:	2300      	movs	r3, #0
 8003522:	60fb      	str	r3, [r7, #12]
 8003524:	2300      	movs	r3, #0
 8003526:	60bb      	str	r3, [r7, #8]
  assert_param(IS_DAC_ALIGN(DAC_Align));
  assert_param(IS_DAC_DATA(Data1));
  assert_param(IS_DAC_DATA(Data2));
  
  /* Calculate and set dual DAC data holding register value */
  if (DAC_Align == DAC_Align_8b_R)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2b08      	cmp	r3, #8
 800352c:	d105      	bne.n	800353a <DAC_SetDualChannelData+0x2a>
  {
    data = ((uint32_t)Data2 << 8) | Data1; 
 800352e:	887b      	ldrh	r3, [r7, #2]
 8003530:	021a      	lsls	r2, r3, #8
 8003532:	883b      	ldrh	r3, [r7, #0]
 8003534:	4313      	orrs	r3, r2
 8003536:	60fb      	str	r3, [r7, #12]
 8003538:	e004      	b.n	8003544 <DAC_SetDualChannelData+0x34>
  }
  else
  {
    data = ((uint32_t)Data2 << 16) | Data1;
 800353a:	887b      	ldrh	r3, [r7, #2]
 800353c:	041a      	lsls	r2, r3, #16
 800353e:	883b      	ldrh	r3, [r7, #0]
 8003540:	4313      	orrs	r3, r2
 8003542:	60fb      	str	r3, [r7, #12]
  }
  
  tmp = (uint32_t)DAC_BASE;
 8003544:	4b07      	ldr	r3, [pc, #28]	; (8003564 <DAC_SetDualChannelData+0x54>)
 8003546:	60bb      	str	r3, [r7, #8]
  tmp += DHR12RD_OFFSET + DAC_Align;
 8003548:	687a      	ldr	r2, [r7, #4]
 800354a:	68bb      	ldr	r3, [r7, #8]
 800354c:	4413      	add	r3, r2
 800354e:	3320      	adds	r3, #32
 8003550:	60bb      	str	r3, [r7, #8]

  /* Set the dual DAC selected data holding register */
  *(__IO uint32_t *)tmp = data;
 8003552:	68bb      	ldr	r3, [r7, #8]
 8003554:	68fa      	ldr	r2, [r7, #12]
 8003556:	601a      	str	r2, [r3, #0]
}
 8003558:	bf00      	nop
 800355a:	3714      	adds	r7, #20
 800355c:	46bd      	mov	sp, r7
 800355e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003562:	4770      	bx	lr
 8003564:	40007400 	.word	0x40007400

08003568 <DAC_GetDataOutputValue>:
  *            @arg DAC_Channel_1: DAC Channel1 selected
  *            @arg DAC_Channel_2: DAC Channel2 selected
  * @retval The selected DAC channel data output value.
  */
uint16_t DAC_GetDataOutputValue(uint32_t DAC_Channel)
{
 8003568:	b480      	push	{r7}
 800356a:	b085      	sub	sp, #20
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmp = 0;
 8003570:	2300      	movs	r3, #0
 8003572:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  
  tmp = (uint32_t) DAC_BASE ;
 8003574:	4b08      	ldr	r3, [pc, #32]	; (8003598 <DAC_GetDataOutputValue+0x30>)
 8003576:	60fb      	str	r3, [r7, #12]
  tmp += DOR_OFFSET + ((uint32_t)DAC_Channel >> 2);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	089a      	lsrs	r2, r3, #2
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	4413      	add	r3, r2
 8003580:	332c      	adds	r3, #44	; 0x2c
 8003582:	60fb      	str	r3, [r7, #12]
  
  /* Returns the DAC channel data output register value */
  return (uint16_t) (*(__IO uint32_t*) tmp);
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	b29b      	uxth	r3, r3
}
 800358a:	4618      	mov	r0, r3
 800358c:	3714      	adds	r7, #20
 800358e:	46bd      	mov	sp, r7
 8003590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003594:	4770      	bx	lr
 8003596:	bf00      	nop
 8003598:	40007400 	.word	0x40007400

0800359c <DAC_DMACmd>:
  * @note   The DAC channel2 is mapped on DMA1 Stream 6 channel7 which must be
  *          already configured.    
  * @retval None
  */
void DAC_DMACmd(uint32_t DAC_Channel, FunctionalState NewState)
{
 800359c:	b480      	push	{r7}
 800359e:	b083      	sub	sp, #12
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
 80035a4:	460b      	mov	r3, r1
 80035a6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80035a8:	78fb      	ldrb	r3, [r7, #3]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d00a      	beq.n	80035c4 <DAC_DMACmd+0x28>
  {
    /* Enable the selected DAC channel DMA request */
    DAC->CR |= (DAC_CR_DMAEN1 << DAC_Channel);
 80035ae:	4b0e      	ldr	r3, [pc, #56]	; (80035e8 <DAC_DMACmd+0x4c>)
 80035b0:	681a      	ldr	r2, [r3, #0]
 80035b2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	fa01 f303 	lsl.w	r3, r1, r3
 80035bc:	490a      	ldr	r1, [pc, #40]	; (80035e8 <DAC_DMACmd+0x4c>)
 80035be:	4313      	orrs	r3, r2
 80035c0:	600b      	str	r3, [r1, #0]
  else
  {
    /* Disable the selected DAC channel DMA request */
    DAC->CR &= (~(DAC_CR_DMAEN1 << DAC_Channel));
  }
}
 80035c2:	e00a      	b.n	80035da <DAC_DMACmd+0x3e>
    DAC->CR &= (~(DAC_CR_DMAEN1 << DAC_Channel));
 80035c4:	4b08      	ldr	r3, [pc, #32]	; (80035e8 <DAC_DMACmd+0x4c>)
 80035c6:	681a      	ldr	r2, [r3, #0]
 80035c8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	fa01 f303 	lsl.w	r3, r1, r3
 80035d2:	43db      	mvns	r3, r3
 80035d4:	4904      	ldr	r1, [pc, #16]	; (80035e8 <DAC_DMACmd+0x4c>)
 80035d6:	4013      	ands	r3, r2
 80035d8:	600b      	str	r3, [r1, #0]
}
 80035da:	bf00      	nop
 80035dc:	370c      	adds	r7, #12
 80035de:	46bd      	mov	sp, r7
 80035e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e4:	4770      	bx	lr
 80035e6:	bf00      	nop
 80035e8:	40007400 	.word	0x40007400

080035ec <DAC_ITConfig>:
  * @param  NewState: new state of the specified DAC interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */ 
void DAC_ITConfig(uint32_t DAC_Channel, uint32_t DAC_IT, FunctionalState NewState)  
{
 80035ec:	b480      	push	{r7}
 80035ee:	b085      	sub	sp, #20
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	60f8      	str	r0, [r7, #12]
 80035f4:	60b9      	str	r1, [r7, #8]
 80035f6:	4613      	mov	r3, r2
 80035f8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_DAC_IT(DAC_IT)); 

  if (NewState != DISABLE)
 80035fa:	79fb      	ldrb	r3, [r7, #7]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d009      	beq.n	8003614 <DAC_ITConfig+0x28>
  {
    /* Enable the selected DAC interrupts */
    DAC->CR |=  (DAC_IT << DAC_Channel);
 8003600:	4b0c      	ldr	r3, [pc, #48]	; (8003634 <DAC_ITConfig+0x48>)
 8003602:	681a      	ldr	r2, [r3, #0]
 8003604:	68b9      	ldr	r1, [r7, #8]
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	fa01 f303 	lsl.w	r3, r1, r3
 800360c:	4909      	ldr	r1, [pc, #36]	; (8003634 <DAC_ITConfig+0x48>)
 800360e:	4313      	orrs	r3, r2
 8003610:	600b      	str	r3, [r1, #0]
  else
  {
    /* Disable the selected DAC interrupts */
    DAC->CR &= (~(uint32_t)(DAC_IT << DAC_Channel));
  }
}
 8003612:	e009      	b.n	8003628 <DAC_ITConfig+0x3c>
    DAC->CR &= (~(uint32_t)(DAC_IT << DAC_Channel));
 8003614:	4b07      	ldr	r3, [pc, #28]	; (8003634 <DAC_ITConfig+0x48>)
 8003616:	681a      	ldr	r2, [r3, #0]
 8003618:	68b9      	ldr	r1, [r7, #8]
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	fa01 f303 	lsl.w	r3, r1, r3
 8003620:	43db      	mvns	r3, r3
 8003622:	4904      	ldr	r1, [pc, #16]	; (8003634 <DAC_ITConfig+0x48>)
 8003624:	4013      	ands	r3, r2
 8003626:	600b      	str	r3, [r1, #0]
}
 8003628:	bf00      	nop
 800362a:	3714      	adds	r7, #20
 800362c:	46bd      	mov	sp, r7
 800362e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003632:	4770      	bx	lr
 8003634:	40007400 	.word	0x40007400

08003638 <DAC_GetFlagStatus>:
  * @note   The DMA underrun occurs when a second external trigger arrives before the 
  *         acknowledgement for the first external trigger is received (first request).
  * @retval The new state of DAC_FLAG (SET or RESET).
  */
FlagStatus DAC_GetFlagStatus(uint32_t DAC_Channel, uint32_t DAC_FLAG)
{
 8003638:	b480      	push	{r7}
 800363a:	b085      	sub	sp, #20
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
 8003640:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 8003642:	2300      	movs	r3, #0
 8003644:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_DAC_FLAG(DAC_FLAG));

  /* Check the status of the specified DAC flag */
  if ((DAC->SR & (DAC_FLAG << DAC_Channel)) != (uint8_t)RESET)
 8003646:	4b0a      	ldr	r3, [pc, #40]	; (8003670 <DAC_GetFlagStatus+0x38>)
 8003648:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800364a:	6839      	ldr	r1, [r7, #0]
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	fa01 f303 	lsl.w	r3, r1, r3
 8003652:	4013      	ands	r3, r2
 8003654:	2b00      	cmp	r3, #0
 8003656:	d002      	beq.n	800365e <DAC_GetFlagStatus+0x26>
  {
    /* DAC_FLAG is set */
    bitstatus = SET;
 8003658:	2301      	movs	r3, #1
 800365a:	73fb      	strb	r3, [r7, #15]
 800365c:	e001      	b.n	8003662 <DAC_GetFlagStatus+0x2a>
  }
  else
  {
    /* DAC_FLAG is reset */
    bitstatus = RESET;
 800365e:	2300      	movs	r3, #0
 8003660:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the DAC_FLAG status */
  return  bitstatus;
 8003662:	7bfb      	ldrb	r3, [r7, #15]
}
 8003664:	4618      	mov	r0, r3
 8003666:	3714      	adds	r7, #20
 8003668:	46bd      	mov	sp, r7
 800366a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366e:	4770      	bx	lr
 8003670:	40007400 	.word	0x40007400

08003674 <DAC_ClearFlag>:
  * @note   The DMA underrun occurs when a second external trigger arrives before the 
  *         acknowledgement for the first external trigger is received (first request).                           
  * @retval None
  */
void DAC_ClearFlag(uint32_t DAC_Channel, uint32_t DAC_FLAG)
{
 8003674:	b480      	push	{r7}
 8003676:	b083      	sub	sp, #12
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
 800367c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_DAC_FLAG(DAC_FLAG));

  /* Clear the selected DAC flags */
  DAC->SR = (DAC_FLAG << DAC_Channel);
 800367e:	4906      	ldr	r1, [pc, #24]	; (8003698 <DAC_ClearFlag+0x24>)
 8003680:	683a      	ldr	r2, [r7, #0]
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	fa02 f303 	lsl.w	r3, r2, r3
 8003688:	634b      	str	r3, [r1, #52]	; 0x34
}
 800368a:	bf00      	nop
 800368c:	370c      	adds	r7, #12
 800368e:	46bd      	mov	sp, r7
 8003690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003694:	4770      	bx	lr
 8003696:	bf00      	nop
 8003698:	40007400 	.word	0x40007400

0800369c <DAC_GetITStatus>:
  * @note   The DMA underrun occurs when a second external trigger arrives before the 
  *         acknowledgement for the first external trigger is received (first request).
  * @retval The new state of DAC_IT (SET or RESET).
  */
ITStatus DAC_GetITStatus(uint32_t DAC_Channel, uint32_t DAC_IT)
{
 800369c:	b480      	push	{r7}
 800369e:	b085      	sub	sp, #20
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
 80036a4:	6039      	str	r1, [r7, #0]
  ITStatus bitstatus = RESET;
 80036a6:	2300      	movs	r3, #0
 80036a8:	73fb      	strb	r3, [r7, #15]
  uint32_t enablestatus = 0;
 80036aa:	2300      	movs	r3, #0
 80036ac:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_DAC_IT(DAC_IT));

  /* Get the DAC_IT enable bit status */
  enablestatus = (DAC->CR & (DAC_IT << DAC_Channel)) ;
 80036ae:	4b10      	ldr	r3, [pc, #64]	; (80036f0 <DAC_GetITStatus+0x54>)
 80036b0:	681a      	ldr	r2, [r3, #0]
 80036b2:	6839      	ldr	r1, [r7, #0]
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	fa01 f303 	lsl.w	r3, r1, r3
 80036ba:	4013      	ands	r3, r2
 80036bc:	60bb      	str	r3, [r7, #8]
  
  /* Check the status of the specified DAC interrupt */
  if (((DAC->SR & (DAC_IT << DAC_Channel)) != (uint32_t)RESET) && enablestatus)
 80036be:	4b0c      	ldr	r3, [pc, #48]	; (80036f0 <DAC_GetITStatus+0x54>)
 80036c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80036c2:	6839      	ldr	r1, [r7, #0]
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	fa01 f303 	lsl.w	r3, r1, r3
 80036ca:	4013      	ands	r3, r2
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d005      	beq.n	80036dc <DAC_GetITStatus+0x40>
 80036d0:	68bb      	ldr	r3, [r7, #8]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d002      	beq.n	80036dc <DAC_GetITStatus+0x40>
  {
    /* DAC_IT is set */
    bitstatus = SET;
 80036d6:	2301      	movs	r3, #1
 80036d8:	73fb      	strb	r3, [r7, #15]
 80036da:	e001      	b.n	80036e0 <DAC_GetITStatus+0x44>
  }
  else
  {
    /* DAC_IT is reset */
    bitstatus = RESET;
 80036dc:	2300      	movs	r3, #0
 80036de:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the DAC_IT status */
  return  bitstatus;
 80036e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80036e2:	4618      	mov	r0, r3
 80036e4:	3714      	adds	r7, #20
 80036e6:	46bd      	mov	sp, r7
 80036e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ec:	4770      	bx	lr
 80036ee:	bf00      	nop
 80036f0:	40007400 	.word	0x40007400

080036f4 <DAC_ClearITPendingBit>:
  * @note   The DMA underrun occurs when a second external trigger arrives before the 
  *         acknowledgement for the first external trigger is received (first request).                           
  * @retval None
  */
void DAC_ClearITPendingBit(uint32_t DAC_Channel, uint32_t DAC_IT)
{
 80036f4:	b480      	push	{r7}
 80036f6:	b083      	sub	sp, #12
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
 80036fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_DAC_IT(DAC_IT)); 

  /* Clear the selected DAC interrupt pending bits */
  DAC->SR = (DAC_IT << DAC_Channel);
 80036fe:	4906      	ldr	r1, [pc, #24]	; (8003718 <DAC_ClearITPendingBit+0x24>)
 8003700:	683a      	ldr	r2, [r7, #0]
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	fa02 f303 	lsl.w	r3, r2, r3
 8003708:	634b      	str	r3, [r1, #52]	; 0x34
}
 800370a:	bf00      	nop
 800370c:	370c      	adds	r7, #12
 800370e:	46bd      	mov	sp, r7
 8003710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003714:	4770      	bx	lr
 8003716:	bf00      	nop
 8003718:	40007400 	.word	0x40007400

0800371c <DBGMCU_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @param  None
  * @retval Device revision identifier
  */
uint32_t DBGMCU_GetREVID(void)
{
 800371c:	b480      	push	{r7}
 800371e:	af00      	add	r7, sp, #0
   return(DBGMCU->IDCODE >> 16);
 8003720:	4b03      	ldr	r3, [pc, #12]	; (8003730 <DBGMCU_GetREVID+0x14>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	0c1b      	lsrs	r3, r3, #16
}
 8003726:	4618      	mov	r0, r3
 8003728:	46bd      	mov	sp, r7
 800372a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372e:	4770      	bx	lr
 8003730:	e0042000 	.word	0xe0042000

08003734 <DBGMCU_GetDEVID>:
  * @brief  Returns the device identifier.
  * @param  None
  * @retval Device identifier
  */
uint32_t DBGMCU_GetDEVID(void)
{
 8003734:	b480      	push	{r7}
 8003736:	af00      	add	r7, sp, #0
   return(DBGMCU->IDCODE & IDCODE_DEVID_MASK);
 8003738:	4b04      	ldr	r3, [pc, #16]	; (800374c <DBGMCU_GetDEVID+0x18>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 8003740:	4618      	mov	r0, r3
 8003742:	46bd      	mov	sp, r7
 8003744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003748:	4770      	bx	lr
 800374a:	bf00      	nop
 800374c:	e0042000 	.word	0xe0042000

08003750 <DBGMCU_Config>:
  * @param  NewState: new state of the specified low power mode in Debug mode.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DBGMCU_Config(uint32_t DBGMCU_Periph, FunctionalState NewState)
{
 8003750:	b480      	push	{r7}
 8003752:	b083      	sub	sp, #12
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
 8003758:	460b      	mov	r3, r1
 800375a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DBGMCU_PERIPH(DBGMCU_Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800375c:	78fb      	ldrb	r3, [r7, #3]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d006      	beq.n	8003770 <DBGMCU_Config+0x20>
  {
    DBGMCU->CR |= DBGMCU_Periph;
 8003762:	4b0a      	ldr	r3, [pc, #40]	; (800378c <DBGMCU_Config+0x3c>)
 8003764:	685a      	ldr	r2, [r3, #4]
 8003766:	4909      	ldr	r1, [pc, #36]	; (800378c <DBGMCU_Config+0x3c>)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	4313      	orrs	r3, r2
 800376c:	604b      	str	r3, [r1, #4]
  }
  else
  {
    DBGMCU->CR &= ~DBGMCU_Periph;
  }
}
 800376e:	e006      	b.n	800377e <DBGMCU_Config+0x2e>
    DBGMCU->CR &= ~DBGMCU_Periph;
 8003770:	4b06      	ldr	r3, [pc, #24]	; (800378c <DBGMCU_Config+0x3c>)
 8003772:	685a      	ldr	r2, [r3, #4]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	43db      	mvns	r3, r3
 8003778:	4904      	ldr	r1, [pc, #16]	; (800378c <DBGMCU_Config+0x3c>)
 800377a:	4013      	ands	r3, r2
 800377c:	604b      	str	r3, [r1, #4]
}
 800377e:	bf00      	nop
 8003780:	370c      	adds	r7, #12
 8003782:	46bd      	mov	sp, r7
 8003784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003788:	4770      	bx	lr
 800378a:	bf00      	nop
 800378c:	e0042000 	.word	0xe0042000

08003790 <DBGMCU_APB1PeriphConfig>:
  *     @arg DBGMCU_CAN1_STOP: Debug CAN2 stopped when Core is halted        
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DBGMCU_APB1PeriphConfig(uint32_t DBGMCU_Periph, FunctionalState NewState)
{
 8003790:	b480      	push	{r7}
 8003792:	b083      	sub	sp, #12
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
 8003798:	460b      	mov	r3, r1
 800379a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DBGMCU_APB1PERIPH(DBGMCU_Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800379c:	78fb      	ldrb	r3, [r7, #3]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d006      	beq.n	80037b0 <DBGMCU_APB1PeriphConfig+0x20>
  {
    DBGMCU->APB1FZ |= DBGMCU_Periph;
 80037a2:	4b0a      	ldr	r3, [pc, #40]	; (80037cc <DBGMCU_APB1PeriphConfig+0x3c>)
 80037a4:	689a      	ldr	r2, [r3, #8]
 80037a6:	4909      	ldr	r1, [pc, #36]	; (80037cc <DBGMCU_APB1PeriphConfig+0x3c>)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	4313      	orrs	r3, r2
 80037ac:	608b      	str	r3, [r1, #8]
  }
  else
  {
    DBGMCU->APB1FZ &= ~DBGMCU_Periph;
  }
}
 80037ae:	e006      	b.n	80037be <DBGMCU_APB1PeriphConfig+0x2e>
    DBGMCU->APB1FZ &= ~DBGMCU_Periph;
 80037b0:	4b06      	ldr	r3, [pc, #24]	; (80037cc <DBGMCU_APB1PeriphConfig+0x3c>)
 80037b2:	689a      	ldr	r2, [r3, #8]
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	43db      	mvns	r3, r3
 80037b8:	4904      	ldr	r1, [pc, #16]	; (80037cc <DBGMCU_APB1PeriphConfig+0x3c>)
 80037ba:	4013      	ands	r3, r2
 80037bc:	608b      	str	r3, [r1, #8]
}
 80037be:	bf00      	nop
 80037c0:	370c      	adds	r7, #12
 80037c2:	46bd      	mov	sp, r7
 80037c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c8:	4770      	bx	lr
 80037ca:	bf00      	nop
 80037cc:	e0042000 	.word	0xe0042000

080037d0 <DBGMCU_APB2PeriphConfig>:
  * @param  NewState: new state of the specified peripheral in Debug mode.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DBGMCU_APB2PeriphConfig(uint32_t DBGMCU_Periph, FunctionalState NewState)
{
 80037d0:	b480      	push	{r7}
 80037d2:	b083      	sub	sp, #12
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
 80037d8:	460b      	mov	r3, r1
 80037da:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DBGMCU_APB2PERIPH(DBGMCU_Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80037dc:	78fb      	ldrb	r3, [r7, #3]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d006      	beq.n	80037f0 <DBGMCU_APB2PeriphConfig+0x20>
  {
    DBGMCU->APB2FZ |= DBGMCU_Periph;
 80037e2:	4b0a      	ldr	r3, [pc, #40]	; (800380c <DBGMCU_APB2PeriphConfig+0x3c>)
 80037e4:	68da      	ldr	r2, [r3, #12]
 80037e6:	4909      	ldr	r1, [pc, #36]	; (800380c <DBGMCU_APB2PeriphConfig+0x3c>)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	4313      	orrs	r3, r2
 80037ec:	60cb      	str	r3, [r1, #12]
  }
  else
  {
    DBGMCU->APB2FZ &= ~DBGMCU_Periph;
  }
}
 80037ee:	e006      	b.n	80037fe <DBGMCU_APB2PeriphConfig+0x2e>
    DBGMCU->APB2FZ &= ~DBGMCU_Periph;
 80037f0:	4b06      	ldr	r3, [pc, #24]	; (800380c <DBGMCU_APB2PeriphConfig+0x3c>)
 80037f2:	68da      	ldr	r2, [r3, #12]
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	43db      	mvns	r3, r3
 80037f8:	4904      	ldr	r1, [pc, #16]	; (800380c <DBGMCU_APB2PeriphConfig+0x3c>)
 80037fa:	4013      	ands	r3, r2
 80037fc:	60cb      	str	r3, [r1, #12]
}
 80037fe:	bf00      	nop
 8003800:	370c      	adds	r7, #12
 8003802:	46bd      	mov	sp, r7
 8003804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003808:	4770      	bx	lr
 800380a:	bf00      	nop
 800380c:	e0042000 	.word	0xe0042000

08003810 <DCMI_DeInit>:
  * @brief  Deinitializes the DCMI registers to their default reset values.
  * @param  None
  * @retval None
  */
void DCMI_DeInit(void)
{
 8003810:	b480      	push	{r7}
 8003812:	af00      	add	r7, sp, #0
  DCMI->CR = 0x0;
 8003814:	4b0c      	ldr	r3, [pc, #48]	; (8003848 <DCMI_DeInit+0x38>)
 8003816:	2200      	movs	r2, #0
 8003818:	601a      	str	r2, [r3, #0]
  DCMI->IER = 0x0;
 800381a:	4b0b      	ldr	r3, [pc, #44]	; (8003848 <DCMI_DeInit+0x38>)
 800381c:	2200      	movs	r2, #0
 800381e:	60da      	str	r2, [r3, #12]
  DCMI->ICR = 0x1F;
 8003820:	4b09      	ldr	r3, [pc, #36]	; (8003848 <DCMI_DeInit+0x38>)
 8003822:	221f      	movs	r2, #31
 8003824:	615a      	str	r2, [r3, #20]
  DCMI->ESCR = 0x0;
 8003826:	4b08      	ldr	r3, [pc, #32]	; (8003848 <DCMI_DeInit+0x38>)
 8003828:	2200      	movs	r2, #0
 800382a:	619a      	str	r2, [r3, #24]
  DCMI->ESUR = 0x0;
 800382c:	4b06      	ldr	r3, [pc, #24]	; (8003848 <DCMI_DeInit+0x38>)
 800382e:	2200      	movs	r2, #0
 8003830:	61da      	str	r2, [r3, #28]
  DCMI->CWSTRTR = 0x0;
 8003832:	4b05      	ldr	r3, [pc, #20]	; (8003848 <DCMI_DeInit+0x38>)
 8003834:	2200      	movs	r2, #0
 8003836:	621a      	str	r2, [r3, #32]
  DCMI->CWSIZER = 0x0;
 8003838:	4b03      	ldr	r3, [pc, #12]	; (8003848 <DCMI_DeInit+0x38>)
 800383a:	2200      	movs	r2, #0
 800383c:	625a      	str	r2, [r3, #36]	; 0x24
}
 800383e:	bf00      	nop
 8003840:	46bd      	mov	sp, r7
 8003842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003846:	4770      	bx	lr
 8003848:	50050000 	.word	0x50050000

0800384c <DCMI_Init>:
  * @param  DCMI_InitStruct: pointer to a DCMI_InitTypeDef structure that contains 
  *         the configuration information for the DCMI.
  * @retval None
  */
void DCMI_Init(DCMI_InitTypeDef* DCMI_InitStruct)
{
 800384c:	b480      	push	{r7}
 800384e:	b085      	sub	sp, #20
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
  uint32_t temp = 0x0;
 8003854:	2300      	movs	r3, #0
 8003856:	60fb      	str	r3, [r7, #12]
  assert_param(IS_DCMI_CAPTURE_RATE(DCMI_InitStruct->DCMI_CaptureRate));
  assert_param(IS_DCMI_EXTENDED_DATA(DCMI_InitStruct->DCMI_ExtendedDataMode));

  /* The DCMI configuration registers should be programmed correctly before 
  enabling the CR_ENABLE Bit and the CR_CAPTURE Bit */
  DCMI->CR &= ~(DCMI_CR_ENABLE | DCMI_CR_CAPTURE);
 8003858:	4b1b      	ldr	r3, [pc, #108]	; (80038c8 <DCMI_Init+0x7c>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4a1a      	ldr	r2, [pc, #104]	; (80038c8 <DCMI_Init+0x7c>)
 800385e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003862:	f023 0301 	bic.w	r3, r3, #1
 8003866:	6013      	str	r3, [r2, #0]
   
  /* Reset the old DCMI configuration */
  temp = DCMI->CR;
 8003868:	4b17      	ldr	r3, [pc, #92]	; (80038c8 <DCMI_Init+0x7c>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	60fb      	str	r3, [r7, #12]
  
  temp &= ~((uint32_t)DCMI_CR_CM     | DCMI_CR_ESS   | DCMI_CR_PCKPOL |
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8003874:	f023 0302 	bic.w	r3, r3, #2
 8003878:	60fb      	str	r3, [r7, #12]
                      DCMI_CR_HSPOL  | DCMI_CR_VSPOL | DCMI_CR_FCRC_0 | 
                      DCMI_CR_FCRC_1 | DCMI_CR_EDM_0 | DCMI_CR_EDM_1); 
                  
  /* Sets the new configuration of the DCMI peripheral */
  temp |= ((uint32_t)DCMI_InitStruct->DCMI_CaptureMode |
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	881a      	ldrh	r2, [r3, #0]
                     DCMI_InitStruct->DCMI_SynchroMode |
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	885b      	ldrh	r3, [r3, #2]
                     DCMI_InitStruct->DCMI_PCKPolarity |
                     DCMI_InitStruct->DCMI_VSPolarity |
                     DCMI_InitStruct->DCMI_HSPolarity |
                     DCMI_InitStruct->DCMI_CaptureRate |
 8003882:	4313      	orrs	r3, r2
 8003884:	b29a      	uxth	r2, r3
                     DCMI_InitStruct->DCMI_PCKPolarity |
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	889b      	ldrh	r3, [r3, #4]
                     DCMI_InitStruct->DCMI_CaptureRate |
 800388a:	4313      	orrs	r3, r2
 800388c:	b29a      	uxth	r2, r3
                     DCMI_InitStruct->DCMI_VSPolarity |
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	88db      	ldrh	r3, [r3, #6]
                     DCMI_InitStruct->DCMI_CaptureRate |
 8003892:	4313      	orrs	r3, r2
 8003894:	b29a      	uxth	r2, r3
                     DCMI_InitStruct->DCMI_HSPolarity |
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	891b      	ldrh	r3, [r3, #8]
                     DCMI_InitStruct->DCMI_CaptureRate |
 800389a:	4313      	orrs	r3, r2
 800389c:	b29a      	uxth	r2, r3
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	895b      	ldrh	r3, [r3, #10]
 80038a2:	4313      	orrs	r3, r2
 80038a4:	b29a      	uxth	r2, r3
                     DCMI_InitStruct->DCMI_ExtendedDataMode);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	899b      	ldrh	r3, [r3, #12]
                     DCMI_InitStruct->DCMI_CaptureRate |
 80038aa:	4313      	orrs	r3, r2
 80038ac:	b29b      	uxth	r3, r3
 80038ae:	461a      	mov	r2, r3
  temp |= ((uint32_t)DCMI_InitStruct->DCMI_CaptureMode |
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	4313      	orrs	r3, r2
 80038b4:	60fb      	str	r3, [r7, #12]

  DCMI->CR = temp;                              
 80038b6:	4a04      	ldr	r2, [pc, #16]	; (80038c8 <DCMI_Init+0x7c>)
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	6013      	str	r3, [r2, #0]
}
 80038bc:	bf00      	nop
 80038be:	3714      	adds	r7, #20
 80038c0:	46bd      	mov	sp, r7
 80038c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c6:	4770      	bx	lr
 80038c8:	50050000 	.word	0x50050000

080038cc <DCMI_StructInit>:
  * @param  DCMI_InitStruct : pointer to a DCMI_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void DCMI_StructInit(DCMI_InitTypeDef* DCMI_InitStruct)
{
 80038cc:	b480      	push	{r7}
 80038ce:	b083      	sub	sp, #12
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  DCMI_InitStruct->DCMI_CaptureMode = DCMI_CaptureMode_Continuous;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2200      	movs	r2, #0
 80038d8:	801a      	strh	r2, [r3, #0]
  DCMI_InitStruct->DCMI_SynchroMode = DCMI_SynchroMode_Hardware;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2200      	movs	r2, #0
 80038de:	805a      	strh	r2, [r3, #2]
  DCMI_InitStruct->DCMI_PCKPolarity = DCMI_PCKPolarity_Falling;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2200      	movs	r2, #0
 80038e4:	809a      	strh	r2, [r3, #4]
  DCMI_InitStruct->DCMI_VSPolarity = DCMI_VSPolarity_Low;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2200      	movs	r2, #0
 80038ea:	80da      	strh	r2, [r3, #6]
  DCMI_InitStruct->DCMI_HSPolarity = DCMI_HSPolarity_Low;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2200      	movs	r2, #0
 80038f0:	811a      	strh	r2, [r3, #8]
  DCMI_InitStruct->DCMI_CaptureRate = DCMI_CaptureRate_All_Frame;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2200      	movs	r2, #0
 80038f6:	815a      	strh	r2, [r3, #10]
  DCMI_InitStruct->DCMI_ExtendedDataMode = DCMI_ExtendedDataMode_8b;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2200      	movs	r2, #0
 80038fc:	819a      	strh	r2, [r3, #12]
}
 80038fe:	bf00      	nop
 8003900:	370c      	adds	r7, #12
 8003902:	46bd      	mov	sp, r7
 8003904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003908:	4770      	bx	lr

0800390a <DCMI_CROPConfig>:
  * @param  DCMI_CROPInitStruct:  pointer to a DCMI_CROPInitTypeDef structure that 
  *         contains the configuration information for the DCMI peripheral CROP mode.
  * @retval None
  */
void DCMI_CROPConfig(DCMI_CROPInitTypeDef* DCMI_CROPInitStruct)
{  
 800390a:	b480      	push	{r7}
 800390c:	b083      	sub	sp, #12
 800390e:	af00      	add	r7, sp, #0
 8003910:	6078      	str	r0, [r7, #4]
  /* Sets the CROP window coordinates */
  DCMI->CWSTRTR = (uint32_t)((uint32_t)DCMI_CROPInitStruct->DCMI_HorizontalOffsetCount |
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	885b      	ldrh	r3, [r3, #2]
 8003916:	4619      	mov	r1, r3
                  ((uint32_t)DCMI_CROPInitStruct->DCMI_VerticalStartLine << 16));
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	881b      	ldrh	r3, [r3, #0]
 800391c:	041b      	lsls	r3, r3, #16
  DCMI->CWSTRTR = (uint32_t)((uint32_t)DCMI_CROPInitStruct->DCMI_HorizontalOffsetCount |
 800391e:	4a09      	ldr	r2, [pc, #36]	; (8003944 <DCMI_CROPConfig+0x3a>)
 8003920:	430b      	orrs	r3, r1
 8003922:	6213      	str	r3, [r2, #32]

  /* Sets the CROP window size */
  DCMI->CWSIZER = (uint32_t)(DCMI_CROPInitStruct->DCMI_CaptureCount |
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	88db      	ldrh	r3, [r3, #6]
 8003928:	4619      	mov	r1, r3
                  ((uint32_t)DCMI_CROPInitStruct->DCMI_VerticalLineCount << 16));
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	889b      	ldrh	r3, [r3, #4]
 800392e:	041b      	lsls	r3, r3, #16
  DCMI->CWSIZER = (uint32_t)(DCMI_CROPInitStruct->DCMI_CaptureCount |
 8003930:	4a04      	ldr	r2, [pc, #16]	; (8003944 <DCMI_CROPConfig+0x3a>)
 8003932:	430b      	orrs	r3, r1
 8003934:	6253      	str	r3, [r2, #36]	; 0x24
}
 8003936:	bf00      	nop
 8003938:	370c      	adds	r7, #12
 800393a:	46bd      	mov	sp, r7
 800393c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003940:	4770      	bx	lr
 8003942:	bf00      	nop
 8003944:	50050000 	.word	0x50050000

08003948 <DCMI_CROPCmd>:
  * @param  NewState: new state of the DCMI Crop feature. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DCMI_CROPCmd(FunctionalState NewState)
{
 8003948:	b480      	push	{r7}
 800394a:	b083      	sub	sp, #12
 800394c:	af00      	add	r7, sp, #0
 800394e:	4603      	mov	r3, r0
 8003950:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
 8003952:	79fb      	ldrb	r3, [r7, #7]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d006      	beq.n	8003966 <DCMI_CROPCmd+0x1e>
  {
    /* Enable the DCMI Crop feature */
    DCMI->CR |= (uint32_t)DCMI_CR_CROP;
 8003958:	4b09      	ldr	r3, [pc, #36]	; (8003980 <DCMI_CROPCmd+0x38>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4a08      	ldr	r2, [pc, #32]	; (8003980 <DCMI_CROPCmd+0x38>)
 800395e:	f043 0304 	orr.w	r3, r3, #4
 8003962:	6013      	str	r3, [r2, #0]
  else
  {
    /* Disable the DCMI Crop feature */
    DCMI->CR &= ~(uint32_t)DCMI_CR_CROP;
  }
}
 8003964:	e005      	b.n	8003972 <DCMI_CROPCmd+0x2a>
    DCMI->CR &= ~(uint32_t)DCMI_CR_CROP;
 8003966:	4b06      	ldr	r3, [pc, #24]	; (8003980 <DCMI_CROPCmd+0x38>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4a05      	ldr	r2, [pc, #20]	; (8003980 <DCMI_CROPCmd+0x38>)
 800396c:	f023 0304 	bic.w	r3, r3, #4
 8003970:	6013      	str	r3, [r2, #0]
}
 8003972:	bf00      	nop
 8003974:	370c      	adds	r7, #12
 8003976:	46bd      	mov	sp, r7
 8003978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397c:	4770      	bx	lr
 800397e:	bf00      	nop
 8003980:	50050000 	.word	0x50050000

08003984 <DCMI_SetEmbeddedSynchroCodes>:
  * @param  DCMI_CodesInitTypeDef: pointer to a DCMI_CodesInitTypeDef structure that
  *         contains the embedded synchronization codes for the DCMI peripheral.
  * @retval None
  */
void DCMI_SetEmbeddedSynchroCodes(DCMI_CodesInitTypeDef* DCMI_CodesInitStruct)
{
 8003984:	b480      	push	{r7}
 8003986:	b083      	sub	sp, #12
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
  DCMI->ESCR = (uint32_t)(DCMI_CodesInitStruct->DCMI_FrameStartCode |
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	781b      	ldrb	r3, [r3, #0]
 8003990:	461a      	mov	r2, r3
                          ((uint32_t)DCMI_CodesInitStruct->DCMI_LineStartCode << 8)|
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	785b      	ldrb	r3, [r3, #1]
 8003996:	021b      	lsls	r3, r3, #8
  DCMI->ESCR = (uint32_t)(DCMI_CodesInitStruct->DCMI_FrameStartCode |
 8003998:	431a      	orrs	r2, r3
                          ((uint32_t)DCMI_CodesInitStruct->DCMI_LineEndCode << 16)|
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	789b      	ldrb	r3, [r3, #2]
 800399e:	041b      	lsls	r3, r3, #16
                          ((uint32_t)DCMI_CodesInitStruct->DCMI_LineStartCode << 8)|
 80039a0:	431a      	orrs	r2, r3
                          ((uint32_t)DCMI_CodesInitStruct->DCMI_FrameEndCode << 24));
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	78db      	ldrb	r3, [r3, #3]
 80039a6:	061b      	lsls	r3, r3, #24
  DCMI->ESCR = (uint32_t)(DCMI_CodesInitStruct->DCMI_FrameStartCode |
 80039a8:	4904      	ldr	r1, [pc, #16]	; (80039bc <DCMI_SetEmbeddedSynchroCodes+0x38>)
 80039aa:	4313      	orrs	r3, r2
 80039ac:	618b      	str	r3, [r1, #24]
}
 80039ae:	bf00      	nop
 80039b0:	370c      	adds	r7, #12
 80039b2:	46bd      	mov	sp, r7
 80039b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b8:	4770      	bx	lr
 80039ba:	bf00      	nop
 80039bc:	50050000 	.word	0x50050000

080039c0 <DCMI_JPEGCmd>:
  * @param  NewState: new state of the DCMI JPEG format. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DCMI_JPEGCmd(FunctionalState NewState)
{
 80039c0:	b480      	push	{r7}
 80039c2:	b083      	sub	sp, #12
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	4603      	mov	r3, r0
 80039c8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
 
  if (NewState != DISABLE)
 80039ca:	79fb      	ldrb	r3, [r7, #7]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d006      	beq.n	80039de <DCMI_JPEGCmd+0x1e>
  {
    /* Enable the DCMI JPEG format */
    DCMI->CR |= (uint32_t)DCMI_CR_JPEG;
 80039d0:	4b09      	ldr	r3, [pc, #36]	; (80039f8 <DCMI_JPEGCmd+0x38>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4a08      	ldr	r2, [pc, #32]	; (80039f8 <DCMI_JPEGCmd+0x38>)
 80039d6:	f043 0308 	orr.w	r3, r3, #8
 80039da:	6013      	str	r3, [r2, #0]
  else
  {
    /* Disable the DCMI JPEG format */
    DCMI->CR &= ~(uint32_t)DCMI_CR_JPEG;
  }
}
 80039dc:	e005      	b.n	80039ea <DCMI_JPEGCmd+0x2a>
    DCMI->CR &= ~(uint32_t)DCMI_CR_JPEG;
 80039de:	4b06      	ldr	r3, [pc, #24]	; (80039f8 <DCMI_JPEGCmd+0x38>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4a05      	ldr	r2, [pc, #20]	; (80039f8 <DCMI_JPEGCmd+0x38>)
 80039e4:	f023 0308 	bic.w	r3, r3, #8
 80039e8:	6013      	str	r3, [r2, #0]
}
 80039ea:	bf00      	nop
 80039ec:	370c      	adds	r7, #12
 80039ee:	46bd      	mov	sp, r7
 80039f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f4:	4770      	bx	lr
 80039f6:	bf00      	nop
 80039f8:	50050000 	.word	0x50050000

080039fc <DCMI_Cmd>:
  * @param  NewState: new state of the DCMI interface. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DCMI_Cmd(FunctionalState NewState)
{
 80039fc:	b480      	push	{r7}
 80039fe:	b083      	sub	sp, #12
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	4603      	mov	r3, r0
 8003a04:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8003a06:	79fb      	ldrb	r3, [r7, #7]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d006      	beq.n	8003a1a <DCMI_Cmd+0x1e>
  {
    /* Enable the DCMI by setting ENABLE bit */
    DCMI->CR |= (uint32_t)DCMI_CR_ENABLE;
 8003a0c:	4b09      	ldr	r3, [pc, #36]	; (8003a34 <DCMI_Cmd+0x38>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a08      	ldr	r2, [pc, #32]	; (8003a34 <DCMI_Cmd+0x38>)
 8003a12:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003a16:	6013      	str	r3, [r2, #0]
  else
  {
    /* Disable the DCMI by clearing ENABLE bit */
    DCMI->CR &= ~(uint32_t)DCMI_CR_ENABLE;
  }
}
 8003a18:	e005      	b.n	8003a26 <DCMI_Cmd+0x2a>
    DCMI->CR &= ~(uint32_t)DCMI_CR_ENABLE;
 8003a1a:	4b06      	ldr	r3, [pc, #24]	; (8003a34 <DCMI_Cmd+0x38>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4a05      	ldr	r2, [pc, #20]	; (8003a34 <DCMI_Cmd+0x38>)
 8003a20:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003a24:	6013      	str	r3, [r2, #0]
}
 8003a26:	bf00      	nop
 8003a28:	370c      	adds	r7, #12
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a30:	4770      	bx	lr
 8003a32:	bf00      	nop
 8003a34:	50050000 	.word	0x50050000

08003a38 <DCMI_CaptureCmd>:
  * @param  NewState: new state of the DCMI capture. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DCMI_CaptureCmd(FunctionalState NewState)
{
 8003a38:	b480      	push	{r7}
 8003a3a:	b083      	sub	sp, #12
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	4603      	mov	r3, r0
 8003a40:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
 8003a42:	79fb      	ldrb	r3, [r7, #7]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d006      	beq.n	8003a56 <DCMI_CaptureCmd+0x1e>
  {
    /* Enable the DCMI Capture */
    DCMI->CR |= (uint32_t)DCMI_CR_CAPTURE;
 8003a48:	4b09      	ldr	r3, [pc, #36]	; (8003a70 <DCMI_CaptureCmd+0x38>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4a08      	ldr	r2, [pc, #32]	; (8003a70 <DCMI_CaptureCmd+0x38>)
 8003a4e:	f043 0301 	orr.w	r3, r3, #1
 8003a52:	6013      	str	r3, [r2, #0]
  else
  {
    /* Disable the DCMI Capture */
    DCMI->CR &= ~(uint32_t)DCMI_CR_CAPTURE;
  }
}
 8003a54:	e005      	b.n	8003a62 <DCMI_CaptureCmd+0x2a>
    DCMI->CR &= ~(uint32_t)DCMI_CR_CAPTURE;
 8003a56:	4b06      	ldr	r3, [pc, #24]	; (8003a70 <DCMI_CaptureCmd+0x38>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4a05      	ldr	r2, [pc, #20]	; (8003a70 <DCMI_CaptureCmd+0x38>)
 8003a5c:	f023 0301 	bic.w	r3, r3, #1
 8003a60:	6013      	str	r3, [r2, #0]
}
 8003a62:	bf00      	nop
 8003a64:	370c      	adds	r7, #12
 8003a66:	46bd      	mov	sp, r7
 8003a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6c:	4770      	bx	lr
 8003a6e:	bf00      	nop
 8003a70:	50050000 	.word	0x50050000

08003a74 <DCMI_ReadData>:
  * @brief  Reads the data stored in the DR register.
  * @param  None 
  * @retval Data register value
  */
uint32_t DCMI_ReadData(void)
{
 8003a74:	b480      	push	{r7}
 8003a76:	af00      	add	r7, sp, #0
  return DCMI->DR;
 8003a78:	4b03      	ldr	r3, [pc, #12]	; (8003a88 <DCMI_ReadData+0x14>)
 8003a7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a84:	4770      	bx	lr
 8003a86:	bf00      	nop
 8003a88:	50050000 	.word	0x50050000

08003a8c <DCMI_ITConfig>:
  * @param  NewState: new state of the specified DCMI interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DCMI_ITConfig(uint16_t DCMI_IT, FunctionalState NewState)
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	b083      	sub	sp, #12
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	4603      	mov	r3, r0
 8003a94:	460a      	mov	r2, r1
 8003a96:	80fb      	strh	r3, [r7, #6]
 8003a98:	4613      	mov	r3, r2
 8003a9a:	717b      	strb	r3, [r7, #5]
  /* Check the parameters */
  assert_param(IS_DCMI_CONFIG_IT(DCMI_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8003a9c:	797b      	ldrb	r3, [r7, #5]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d006      	beq.n	8003ab0 <DCMI_ITConfig+0x24>
  {
    /* Enable the Interrupt sources */
    DCMI->IER |= DCMI_IT;
 8003aa2:	4b0b      	ldr	r3, [pc, #44]	; (8003ad0 <DCMI_ITConfig+0x44>)
 8003aa4:	68da      	ldr	r2, [r3, #12]
 8003aa6:	88fb      	ldrh	r3, [r7, #6]
 8003aa8:	4909      	ldr	r1, [pc, #36]	; (8003ad0 <DCMI_ITConfig+0x44>)
 8003aaa:	4313      	orrs	r3, r2
 8003aac:	60cb      	str	r3, [r1, #12]
  else
  {
    /* Disable the Interrupt sources */
    DCMI->IER &= (uint16_t)(~DCMI_IT);
  }  
}
 8003aae:	e008      	b.n	8003ac2 <DCMI_ITConfig+0x36>
    DCMI->IER &= (uint16_t)(~DCMI_IT);
 8003ab0:	4b07      	ldr	r3, [pc, #28]	; (8003ad0 <DCMI_ITConfig+0x44>)
 8003ab2:	68db      	ldr	r3, [r3, #12]
 8003ab4:	88fa      	ldrh	r2, [r7, #6]
 8003ab6:	43d2      	mvns	r2, r2
 8003ab8:	b292      	uxth	r2, r2
 8003aba:	4611      	mov	r1, r2
 8003abc:	4a04      	ldr	r2, [pc, #16]	; (8003ad0 <DCMI_ITConfig+0x44>)
 8003abe:	400b      	ands	r3, r1
 8003ac0:	60d3      	str	r3, [r2, #12]
}
 8003ac2:	bf00      	nop
 8003ac4:	370c      	adds	r7, #12
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003acc:	4770      	bx	lr
 8003ace:	bf00      	nop
 8003ad0:	50050000 	.word	0x50050000

08003ad4 <DCMI_GetFlagStatus>:
  *            @arg DCMI_FLAG_VSYNC: VSYNC flag mask
  *            @arg DCMI_FLAG_FNE: Fifo not empty flag mask
  * @retval The new state of DCMI_FLAG (SET or RESET).
  */
FlagStatus DCMI_GetFlagStatus(uint16_t DCMI_FLAG)
{
 8003ad4:	b480      	push	{r7}
 8003ad6:	b087      	sub	sp, #28
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	4603      	mov	r3, r0
 8003adc:	80fb      	strh	r3, [r7, #6]
  FlagStatus bitstatus = RESET;
 8003ade:	2300      	movs	r3, #0
 8003ae0:	75fb      	strb	r3, [r7, #23]
  uint32_t dcmireg, tempreg = 0;
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_DCMI_GET_FLAG(DCMI_FLAG));
  
  /* Get the DCMI register index */
  dcmireg = (((uint16_t)DCMI_FLAG) >> 12);
 8003ae6:	88fb      	ldrh	r3, [r7, #6]
 8003ae8:	0b1b      	lsrs	r3, r3, #12
 8003aea:	b29b      	uxth	r3, r3
 8003aec:	60fb      	str	r3, [r7, #12]
  
  if (dcmireg == 0x00) /* The FLAG is in RISR register */
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d103      	bne.n	8003afc <DCMI_GetFlagStatus+0x28>
  {
    tempreg= DCMI->RISR;
 8003af4:	4b0f      	ldr	r3, [pc, #60]	; (8003b34 <DCMI_GetFlagStatus+0x60>)
 8003af6:	689b      	ldr	r3, [r3, #8]
 8003af8:	613b      	str	r3, [r7, #16]
 8003afa:	e009      	b.n	8003b10 <DCMI_GetFlagStatus+0x3c>
  }
  else if (dcmireg == 0x02) /* The FLAG is in SR register */
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	2b02      	cmp	r3, #2
 8003b00:	d103      	bne.n	8003b0a <DCMI_GetFlagStatus+0x36>
  {
    tempreg = DCMI->SR;
 8003b02:	4b0c      	ldr	r3, [pc, #48]	; (8003b34 <DCMI_GetFlagStatus+0x60>)
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	613b      	str	r3, [r7, #16]
 8003b08:	e002      	b.n	8003b10 <DCMI_GetFlagStatus+0x3c>
  }
  else /* The FLAG is in MISR register */
  {
    tempreg = DCMI->MISR;
 8003b0a:	4b0a      	ldr	r3, [pc, #40]	; (8003b34 <DCMI_GetFlagStatus+0x60>)
 8003b0c:	691b      	ldr	r3, [r3, #16]
 8003b0e:	613b      	str	r3, [r7, #16]
  }
  
  if ((tempreg & DCMI_FLAG) != (uint16_t)RESET )
 8003b10:	88fa      	ldrh	r2, [r7, #6]
 8003b12:	693b      	ldr	r3, [r7, #16]
 8003b14:	4013      	ands	r3, r2
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d002      	beq.n	8003b20 <DCMI_GetFlagStatus+0x4c>
  {
    bitstatus = SET;
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	75fb      	strb	r3, [r7, #23]
 8003b1e:	e001      	b.n	8003b24 <DCMI_GetFlagStatus+0x50>
  }
  else
  {
    bitstatus = RESET;
 8003b20:	2300      	movs	r3, #0
 8003b22:	75fb      	strb	r3, [r7, #23]
  }
  /* Return the DCMI_FLAG status */
  return  bitstatus;
 8003b24:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b26:	4618      	mov	r0, r3
 8003b28:	371c      	adds	r7, #28
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b30:	4770      	bx	lr
 8003b32:	bf00      	nop
 8003b34:	50050000 	.word	0x50050000

08003b38 <DCMI_ClearFlag>:
  *            @arg DCMI_FLAG_VSYNCRI: VSYNC Raw flag mask
  *            @arg DCMI_FLAG_LINERI: Line Raw flag mask
  * @retval None
  */
void DCMI_ClearFlag(uint16_t DCMI_FLAG)
{
 8003b38:	b480      	push	{r7}
 8003b3a:	b083      	sub	sp, #12
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	4603      	mov	r3, r0
 8003b40:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_DCMI_CLEAR_FLAG(DCMI_FLAG));
  
  /* Clear the flag by writing in the ICR register 1 in the corresponding 
  Flag position*/
  
  DCMI->ICR = DCMI_FLAG;
 8003b42:	4a04      	ldr	r2, [pc, #16]	; (8003b54 <DCMI_ClearFlag+0x1c>)
 8003b44:	88fb      	ldrh	r3, [r7, #6]
 8003b46:	6153      	str	r3, [r2, #20]
}
 8003b48:	bf00      	nop
 8003b4a:	370c      	adds	r7, #12
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b52:	4770      	bx	lr
 8003b54:	50050000 	.word	0x50050000

08003b58 <DCMI_GetITStatus>:
  *            @arg DCMI_IT_VSYNC: VSYNC interrupt mask
  *            @arg DCMI_IT_LINE: Line interrupt mask
  * @retval The new state of DCMI_IT (SET or RESET).
  */
ITStatus DCMI_GetITStatus(uint16_t DCMI_IT)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	b085      	sub	sp, #20
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	4603      	mov	r3, r0
 8003b60:	80fb      	strh	r3, [r7, #6]
  ITStatus bitstatus = RESET;
 8003b62:	2300      	movs	r3, #0
 8003b64:	73fb      	strb	r3, [r7, #15]
  uint32_t itstatus = 0;
 8003b66:	2300      	movs	r3, #0
 8003b68:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_DCMI_GET_IT(DCMI_IT));
  
  itstatus = DCMI->MISR & DCMI_IT; /* Only masked interrupts are checked */
 8003b6a:	4b0a      	ldr	r3, [pc, #40]	; (8003b94 <DCMI_GetITStatus+0x3c>)
 8003b6c:	691a      	ldr	r2, [r3, #16]
 8003b6e:	88fb      	ldrh	r3, [r7, #6]
 8003b70:	4013      	ands	r3, r2
 8003b72:	60bb      	str	r3, [r7, #8]
  
  if ((itstatus != (uint16_t)RESET))
 8003b74:	68bb      	ldr	r3, [r7, #8]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d002      	beq.n	8003b80 <DCMI_GetITStatus+0x28>
  {
    bitstatus = SET;
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	73fb      	strb	r3, [r7, #15]
 8003b7e:	e001      	b.n	8003b84 <DCMI_GetITStatus+0x2c>
  }
  else
  {
    bitstatus = RESET;
 8003b80:	2300      	movs	r3, #0
 8003b82:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003b84:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b86:	4618      	mov	r0, r3
 8003b88:	3714      	adds	r7, #20
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b90:	4770      	bx	lr
 8003b92:	bf00      	nop
 8003b94:	50050000 	.word	0x50050000

08003b98 <DCMI_ClearITPendingBit>:
  *            @arg DCMI_IT_VSYNC: VSYNC interrupt mask
  *            @arg DCMI_IT_LINE: Line interrupt mask
  * @retval None
  */
void DCMI_ClearITPendingBit(uint16_t DCMI_IT)
{
 8003b98:	b480      	push	{r7}
 8003b9a:	b083      	sub	sp, #12
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	80fb      	strh	r3, [r7, #6]
  /* Clear the interrupt pending Bit by writing in the ICR register 1 in the 
  corresponding pending Bit position*/
  
  DCMI->ICR = DCMI_IT;
 8003ba2:	4a04      	ldr	r2, [pc, #16]	; (8003bb4 <DCMI_ClearITPendingBit+0x1c>)
 8003ba4:	88fb      	ldrh	r3, [r7, #6]
 8003ba6:	6153      	str	r3, [r2, #20]
}
 8003ba8:	bf00      	nop
 8003baa:	370c      	adds	r7, #12
 8003bac:	46bd      	mov	sp, r7
 8003bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb2:	4770      	bx	lr
 8003bb4:	50050000 	.word	0x50050000

08003bb8 <DMA_DeInit>:
  * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
  *         to 7 to select the DMA Stream.
  * @retval None
  */
void DMA_DeInit(DMA_Stream_TypeDef* DMAy_Streamx)
{
 8003bb8:	b480      	push	{r7}
 8003bba:	b083      	sub	sp, #12
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  /* Disable the selected DMAy Streamx */
  DMAy_Streamx->CR &= ~((uint32_t)DMA_SxCR_EN);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f023 0201 	bic.w	r2, r3, #1
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	601a      	str	r2, [r3, #0]

  /* Reset DMAy Streamx control register */
  DMAy_Streamx->CR  = 0;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2200      	movs	r2, #0
 8003bd0:	601a      	str	r2, [r3, #0]
  
  /* Reset DMAy Streamx Number of Data to Transfer register */
  DMAy_Streamx->NDTR = 0;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	605a      	str	r2, [r3, #4]
  
  /* Reset DMAy Streamx peripheral address register */
  DMAy_Streamx->PAR  = 0;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2200      	movs	r2, #0
 8003bdc:	609a      	str	r2, [r3, #8]
  
  /* Reset DMAy Streamx memory 0 address register */
  DMAy_Streamx->M0AR = 0;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2200      	movs	r2, #0
 8003be2:	60da      	str	r2, [r3, #12]

  /* Reset DMAy Streamx memory 1 address register */
  DMAy_Streamx->M1AR = 0;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2200      	movs	r2, #0
 8003be8:	611a      	str	r2, [r3, #16]

  /* Reset DMAy Streamx FIFO control register */
  DMAy_Streamx->FCR = (uint32_t)0x00000021; 
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2221      	movs	r2, #33	; 0x21
 8003bee:	615a      	str	r2, [r3, #20]

  /* Reset interrupt pending bits for the selected stream */
  if (DMAy_Streamx == DMA1_Stream0)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	4a46      	ldr	r2, [pc, #280]	; (8003d0c <DMA_DeInit+0x154>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d103      	bne.n	8003c00 <DMA_DeInit+0x48>
  {
    /* Reset interrupt pending bits for DMA1 Stream0 */
    DMA1->LIFCR = DMA_Stream0_IT_MASK;
 8003bf8:	4b45      	ldr	r3, [pc, #276]	; (8003d10 <DMA_DeInit+0x158>)
 8003bfa:	223d      	movs	r2, #61	; 0x3d
 8003bfc:	609a      	str	r2, [r3, #8]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 8003bfe:	e07e      	b.n	8003cfe <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream1)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	4a44      	ldr	r2, [pc, #272]	; (8003d14 <DMA_DeInit+0x15c>)
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d104      	bne.n	8003c12 <DMA_DeInit+0x5a>
    DMA1->LIFCR = DMA_Stream1_IT_MASK;
 8003c08:	4b41      	ldr	r3, [pc, #260]	; (8003d10 <DMA_DeInit+0x158>)
 8003c0a:	f44f 6274 	mov.w	r2, #3904	; 0xf40
 8003c0e:	609a      	str	r2, [r3, #8]
}
 8003c10:	e075      	b.n	8003cfe <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream2)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	4a40      	ldr	r2, [pc, #256]	; (8003d18 <DMA_DeInit+0x160>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d104      	bne.n	8003c24 <DMA_DeInit+0x6c>
    DMA1->LIFCR = DMA_Stream2_IT_MASK;
 8003c1a:	4b3d      	ldr	r3, [pc, #244]	; (8003d10 <DMA_DeInit+0x158>)
 8003c1c:	f44f 1274 	mov.w	r2, #3997696	; 0x3d0000
 8003c20:	609a      	str	r2, [r3, #8]
}
 8003c22:	e06c      	b.n	8003cfe <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream3)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	4a3d      	ldr	r2, [pc, #244]	; (8003d1c <DMA_DeInit+0x164>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d104      	bne.n	8003c36 <DMA_DeInit+0x7e>
    DMA1->LIFCR = DMA_Stream3_IT_MASK;
 8003c2c:	4b38      	ldr	r3, [pc, #224]	; (8003d10 <DMA_DeInit+0x158>)
 8003c2e:	f04f 6274 	mov.w	r2, #255852544	; 0xf400000
 8003c32:	609a      	str	r2, [r3, #8]
}
 8003c34:	e063      	b.n	8003cfe <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream4)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	4a39      	ldr	r2, [pc, #228]	; (8003d20 <DMA_DeInit+0x168>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d103      	bne.n	8003c46 <DMA_DeInit+0x8e>
    DMA1->HIFCR = DMA_Stream4_IT_MASK;
 8003c3e:	4b34      	ldr	r3, [pc, #208]	; (8003d10 <DMA_DeInit+0x158>)
 8003c40:	4a38      	ldr	r2, [pc, #224]	; (8003d24 <DMA_DeInit+0x16c>)
 8003c42:	60da      	str	r2, [r3, #12]
}
 8003c44:	e05b      	b.n	8003cfe <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream5)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	4a37      	ldr	r2, [pc, #220]	; (8003d28 <DMA_DeInit+0x170>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d103      	bne.n	8003c56 <DMA_DeInit+0x9e>
    DMA1->HIFCR = DMA_Stream5_IT_MASK;
 8003c4e:	4b30      	ldr	r3, [pc, #192]	; (8003d10 <DMA_DeInit+0x158>)
 8003c50:	4a36      	ldr	r2, [pc, #216]	; (8003d2c <DMA_DeInit+0x174>)
 8003c52:	60da      	str	r2, [r3, #12]
}
 8003c54:	e053      	b.n	8003cfe <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream6)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	4a35      	ldr	r2, [pc, #212]	; (8003d30 <DMA_DeInit+0x178>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d103      	bne.n	8003c66 <DMA_DeInit+0xae>
    DMA1->HIFCR = (uint32_t)DMA_Stream6_IT_MASK;
 8003c5e:	4b2c      	ldr	r3, [pc, #176]	; (8003d10 <DMA_DeInit+0x158>)
 8003c60:	4a34      	ldr	r2, [pc, #208]	; (8003d34 <DMA_DeInit+0x17c>)
 8003c62:	60da      	str	r2, [r3, #12]
}
 8003c64:	e04b      	b.n	8003cfe <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream7)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	4a33      	ldr	r2, [pc, #204]	; (8003d38 <DMA_DeInit+0x180>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d104      	bne.n	8003c78 <DMA_DeInit+0xc0>
    DMA1->HIFCR = DMA_Stream7_IT_MASK;
 8003c6e:	4b28      	ldr	r3, [pc, #160]	; (8003d10 <DMA_DeInit+0x158>)
 8003c70:	f04f 523d 	mov.w	r2, #792723456	; 0x2f400000
 8003c74:	60da      	str	r2, [r3, #12]
}
 8003c76:	e042      	b.n	8003cfe <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream0)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	4a30      	ldr	r2, [pc, #192]	; (8003d3c <DMA_DeInit+0x184>)
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d103      	bne.n	8003c88 <DMA_DeInit+0xd0>
    DMA2->LIFCR = DMA_Stream0_IT_MASK;
 8003c80:	4b2f      	ldr	r3, [pc, #188]	; (8003d40 <DMA_DeInit+0x188>)
 8003c82:	223d      	movs	r2, #61	; 0x3d
 8003c84:	609a      	str	r2, [r3, #8]
}
 8003c86:	e03a      	b.n	8003cfe <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream1)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	4a2e      	ldr	r2, [pc, #184]	; (8003d44 <DMA_DeInit+0x18c>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d104      	bne.n	8003c9a <DMA_DeInit+0xe2>
    DMA2->LIFCR = DMA_Stream1_IT_MASK;
 8003c90:	4b2b      	ldr	r3, [pc, #172]	; (8003d40 <DMA_DeInit+0x188>)
 8003c92:	f44f 6274 	mov.w	r2, #3904	; 0xf40
 8003c96:	609a      	str	r2, [r3, #8]
}
 8003c98:	e031      	b.n	8003cfe <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream2)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	4a2a      	ldr	r2, [pc, #168]	; (8003d48 <DMA_DeInit+0x190>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d104      	bne.n	8003cac <DMA_DeInit+0xf4>
    DMA2->LIFCR = DMA_Stream2_IT_MASK;
 8003ca2:	4b27      	ldr	r3, [pc, #156]	; (8003d40 <DMA_DeInit+0x188>)
 8003ca4:	f44f 1274 	mov.w	r2, #3997696	; 0x3d0000
 8003ca8:	609a      	str	r2, [r3, #8]
}
 8003caa:	e028      	b.n	8003cfe <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream3)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	4a27      	ldr	r2, [pc, #156]	; (8003d4c <DMA_DeInit+0x194>)
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d104      	bne.n	8003cbe <DMA_DeInit+0x106>
    DMA2->LIFCR = DMA_Stream3_IT_MASK;
 8003cb4:	4b22      	ldr	r3, [pc, #136]	; (8003d40 <DMA_DeInit+0x188>)
 8003cb6:	f04f 6274 	mov.w	r2, #255852544	; 0xf400000
 8003cba:	609a      	str	r2, [r3, #8]
}
 8003cbc:	e01f      	b.n	8003cfe <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream4)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	4a23      	ldr	r2, [pc, #140]	; (8003d50 <DMA_DeInit+0x198>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d103      	bne.n	8003cce <DMA_DeInit+0x116>
    DMA2->HIFCR = DMA_Stream4_IT_MASK;
 8003cc6:	4b1e      	ldr	r3, [pc, #120]	; (8003d40 <DMA_DeInit+0x188>)
 8003cc8:	4a16      	ldr	r2, [pc, #88]	; (8003d24 <DMA_DeInit+0x16c>)
 8003cca:	60da      	str	r2, [r3, #12]
}
 8003ccc:	e017      	b.n	8003cfe <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream5)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	4a20      	ldr	r2, [pc, #128]	; (8003d54 <DMA_DeInit+0x19c>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d103      	bne.n	8003cde <DMA_DeInit+0x126>
    DMA2->HIFCR = DMA_Stream5_IT_MASK;
 8003cd6:	4b1a      	ldr	r3, [pc, #104]	; (8003d40 <DMA_DeInit+0x188>)
 8003cd8:	4a14      	ldr	r2, [pc, #80]	; (8003d2c <DMA_DeInit+0x174>)
 8003cda:	60da      	str	r2, [r3, #12]
}
 8003cdc:	e00f      	b.n	8003cfe <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream6)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	4a1d      	ldr	r2, [pc, #116]	; (8003d58 <DMA_DeInit+0x1a0>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d103      	bne.n	8003cee <DMA_DeInit+0x136>
    DMA2->HIFCR = DMA_Stream6_IT_MASK;
 8003ce6:	4b16      	ldr	r3, [pc, #88]	; (8003d40 <DMA_DeInit+0x188>)
 8003ce8:	4a12      	ldr	r2, [pc, #72]	; (8003d34 <DMA_DeInit+0x17c>)
 8003cea:	60da      	str	r2, [r3, #12]
}
 8003cec:	e007      	b.n	8003cfe <DMA_DeInit+0x146>
    if (DMAy_Streamx == DMA2_Stream7)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	4a1a      	ldr	r2, [pc, #104]	; (8003d5c <DMA_DeInit+0x1a4>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d103      	bne.n	8003cfe <DMA_DeInit+0x146>
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
 8003cf6:	4b12      	ldr	r3, [pc, #72]	; (8003d40 <DMA_DeInit+0x188>)
 8003cf8:	f04f 523d 	mov.w	r2, #792723456	; 0x2f400000
 8003cfc:	60da      	str	r2, [r3, #12]
}
 8003cfe:	bf00      	nop
 8003d00:	370c      	adds	r7, #12
 8003d02:	46bd      	mov	sp, r7
 8003d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d08:	4770      	bx	lr
 8003d0a:	bf00      	nop
 8003d0c:	40026010 	.word	0x40026010
 8003d10:	40026000 	.word	0x40026000
 8003d14:	40026028 	.word	0x40026028
 8003d18:	40026040 	.word	0x40026040
 8003d1c:	40026058 	.word	0x40026058
 8003d20:	40026070 	.word	0x40026070
 8003d24:	2000003d 	.word	0x2000003d
 8003d28:	40026088 	.word	0x40026088
 8003d2c:	20000f40 	.word	0x20000f40
 8003d30:	400260a0 	.word	0x400260a0
 8003d34:	203d0000 	.word	0x203d0000
 8003d38:	400260b8 	.word	0x400260b8
 8003d3c:	40026410 	.word	0x40026410
 8003d40:	40026400 	.word	0x40026400
 8003d44:	40026428 	.word	0x40026428
 8003d48:	40026440 	.word	0x40026440
 8003d4c:	40026458 	.word	0x40026458
 8003d50:	40026470 	.word	0x40026470
 8003d54:	40026488 	.word	0x40026488
 8003d58:	400264a0 	.word	0x400264a0
 8003d5c:	400264b8 	.word	0x400264b8

08003d60 <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that contains
  *         the configuration information for the specified DMA Stream.  
  * @retval None
  */
void DMA_Init(DMA_Stream_TypeDef* DMAy_Streamx, DMA_InitTypeDef* DMA_InitStruct)
{
 8003d60:	b480      	push	{r7}
 8003d62:	b085      	sub	sp, #20
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
 8003d68:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_DMA_MEMORY_BURST(DMA_InitStruct->DMA_MemoryBurst));
  assert_param(IS_DMA_PERIPHERAL_BURST(DMA_InitStruct->DMA_PeripheralBurst));

  /*------------------------- DMAy Streamx CR Configuration ------------------*/
  /* Get the DMAy_Streamx CR value */
  tmpreg = DMAy_Streamx->CR;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	60fb      	str	r3, [r7, #12]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003d74:	68fa      	ldr	r2, [r7, #12]
 8003d76:	4b25      	ldr	r3, [pc, #148]	; (8003e0c <DMA_Init+0xac>)
 8003d78:	4013      	ands	r3, r2
 8003d7a:	60fb      	str	r3, [r7, #12]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	681a      	ldr	r2, [r3, #0]
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	68db      	ldr	r3, [r3, #12]
 8003d84:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	695b      	ldr	r3, [r3, #20]
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8003d8a:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	699b      	ldr	r3, [r3, #24]
 8003d90:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	69db      	ldr	r3, [r3, #28]
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8003d96:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	6a1b      	ldr	r3, [r3, #32]
 8003d9c:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8003da2:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003da8:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8003dae:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003db4:	4313      	orrs	r3, r2
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8003db6:	68fa      	ldr	r2, [r7, #12]
 8003db8:	4313      	orrs	r3, r2
 8003dba:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR register */
  DMAy_Streamx->CR = tmpreg;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	68fa      	ldr	r2, [r7, #12]
 8003dc0:	601a      	str	r2, [r3, #0]

  /*------------------------- DMAy Streamx FCR Configuration -----------------*/
  /* Get the DMAy_Streamx FCR value */
  tmpreg = DMAy_Streamx->FCR;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	695b      	ldr	r3, [r3, #20]
 8003dc6:	60fb      	str	r3, [r7, #12]

  /* Clear DMDIS and FTH bits */
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	f023 0307 	bic.w	r3, r3, #7
 8003dce:	60fb      	str	r3, [r7, #12]

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dd8:	4313      	orrs	r3, r2
 8003dda:	68fa      	ldr	r2, [r7, #12]
 8003ddc:	4313      	orrs	r3, r2
 8003dde:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR */
  DMAy_Streamx->FCR = tmpreg;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	68fa      	ldr	r2, [r7, #12]
 8003de4:	615a      	str	r2, [r3, #20]

  /*------------------------- DMAy Streamx NDTR Configuration ----------------*/
  /* Write to DMAy Streamx NDTR register */
  DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	691a      	ldr	r2, [r3, #16]
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	605a      	str	r2, [r3, #4]

  /*------------------------- DMAy Streamx PAR Configuration -----------------*/
  /* Write to DMAy Streamx PAR */
  DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	685a      	ldr	r2, [r3, #4]
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	609a      	str	r2, [r3, #8]

  /*------------------------- DMAy Streamx M0AR Configuration ----------------*/
  /* Write to DMAy Streamx M0AR */
  DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	689a      	ldr	r2, [r3, #8]
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	60da      	str	r2, [r3, #12]
}
 8003dfe:	bf00      	nop
 8003e00:	3714      	adds	r7, #20
 8003e02:	46bd      	mov	sp, r7
 8003e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e08:	4770      	bx	lr
 8003e0a:	bf00      	nop
 8003e0c:	f01c803f 	.word	0xf01c803f

08003e10 <DMA_StructInit>:
  * @param  DMA_InitStruct : pointer to a DMA_InitTypeDef structure which will 
  *         be initialized.
  * @retval None
  */
void DMA_StructInit(DMA_InitTypeDef* DMA_InitStruct)
{
 8003e10:	b480      	push	{r7}
 8003e12:	b083      	sub	sp, #12
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
  /*-------------- Reset DMA init structure parameters values ----------------*/
  /* Initialize the DMA_Channel member */
  DMA_InitStruct->DMA_Channel = 0;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA_PeripheralBaseAddr member */
  DMA_InitStruct->DMA_PeripheralBaseAddr = 0;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2200      	movs	r2, #0
 8003e22:	605a      	str	r2, [r3, #4]

  /* Initialize the DMA_Memory0BaseAddr member */
  DMA_InitStruct->DMA_Memory0BaseAddr = 0;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2200      	movs	r2, #0
 8003e28:	609a      	str	r2, [r3, #8]

  /* Initialize the DMA_DIR member */
  DMA_InitStruct->DMA_DIR = DMA_DIR_PeripheralToMemory;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	60da      	str	r2, [r3, #12]

  /* Initialize the DMA_BufferSize member */
  DMA_InitStruct->DMA_BufferSize = 0;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2200      	movs	r2, #0
 8003e34:	611a      	str	r2, [r3, #16]

  /* Initialize the DMA_PeripheralInc member */
  DMA_InitStruct->DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2200      	movs	r2, #0
 8003e3a:	615a      	str	r2, [r3, #20]

  /* Initialize the DMA_MemoryInc member */
  DMA_InitStruct->DMA_MemoryInc = DMA_MemoryInc_Disable;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2200      	movs	r2, #0
 8003e40:	619a      	str	r2, [r3, #24]

  /* Initialize the DMA_PeripheralDataSize member */
  DMA_InitStruct->DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2200      	movs	r2, #0
 8003e46:	61da      	str	r2, [r3, #28]

  /* Initialize the DMA_MemoryDataSize member */
  DMA_InitStruct->DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA_Mode member */
  DMA_InitStruct->DMA_Mode = DMA_Mode_Normal;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2200      	movs	r2, #0
 8003e52:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the DMA_Priority member */
  DMA_InitStruct->DMA_Priority = DMA_Priority_Low;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2200      	movs	r2, #0
 8003e58:	629a      	str	r2, [r3, #40]	; 0x28

  /* Initialize the DMA_FIFOMode member */
  DMA_InitStruct->DMA_FIFOMode = DMA_FIFOMode_Disable;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the DMA_FIFOThreshold member */
  DMA_InitStruct->DMA_FIFOThreshold = DMA_FIFOThreshold_1QuarterFull;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2200      	movs	r2, #0
 8003e64:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the DMA_MemoryBurst member */
  DMA_InitStruct->DMA_MemoryBurst = DMA_MemoryBurst_Single;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2200      	movs	r2, #0
 8003e6a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the DMA_PeripheralBurst member */
  DMA_InitStruct->DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2200      	movs	r2, #0
 8003e70:	639a      	str	r2, [r3, #56]	; 0x38
}
 8003e72:	bf00      	nop
 8003e74:	370c      	adds	r7, #12
 8003e76:	46bd      	mov	sp, r7
 8003e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7c:	4770      	bx	lr

08003e7e <DMA_Cmd>:
  *        this single data is finished.            
  *    
  * @retval None
  */
void DMA_Cmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
{
 8003e7e:	b480      	push	{r7}
 8003e80:	b083      	sub	sp, #12
 8003e82:	af00      	add	r7, sp, #0
 8003e84:	6078      	str	r0, [r7, #4]
 8003e86:	460b      	mov	r3, r1
 8003e88:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8003e8a:	78fb      	ldrb	r3, [r7, #3]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d006      	beq.n	8003e9e <DMA_Cmd+0x20>
  {
    /* Enable the selected DMAy Streamx by setting EN bit */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f043 0201 	orr.w	r2, r3, #1
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
  }
}
 8003e9c:	e005      	b.n	8003eaa <DMA_Cmd+0x2c>
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f023 0201 	bic.w	r2, r3, #1
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	601a      	str	r2, [r3, #0]
}
 8003eaa:	bf00      	nop
 8003eac:	370c      	adds	r7, #12
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb4:	4770      	bx	lr

08003eb6 <DMA_PeriphIncOffsetSizeConfig>:
  *            @arg DMA_PINCOS_WordAligned: Peripheral address increment offset is 
  *                                         fixed to 4 (32-bit aligned addresses). 
  * @retval None
  */
void DMA_PeriphIncOffsetSizeConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_Pincos)
{
 8003eb6:	b480      	push	{r7}
 8003eb8:	b083      	sub	sp, #12
 8003eba:	af00      	add	r7, sp, #0
 8003ebc:	6078      	str	r0, [r7, #4]
 8003ebe:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_PINCOS_SIZE(DMA_Pincos));

  /* Check the needed Peripheral increment offset */
  if(DMA_Pincos != DMA_PINCOS_Psize)
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d006      	beq.n	8003ed4 <DMA_PeriphIncOffsetSizeConfig+0x1e>
  {
    /* Configure DMA_SxCR_PINCOS bit with the input parameter */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_PINCOS;     
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear the PINCOS bit: Peripheral address incremented according to PSIZE */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_PINCOS;    
  }
}
 8003ed2:	e005      	b.n	8003ee0 <DMA_PeriphIncOffsetSizeConfig+0x2a>
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_PINCOS;    
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	601a      	str	r2, [r3, #0]
}
 8003ee0:	bf00      	nop
 8003ee2:	370c      	adds	r7, #12
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eea:	4770      	bx	lr

08003eec <DMA_FlowControllerConfig>:
  *            @arg DMA_FlowCtrl_Peripheral: DMAy_Streamx transactions flow controller 
  *                                          is the peripheral.    
  * @retval None
  */
void DMA_FlowControllerConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FlowCtrl)
{
 8003eec:	b480      	push	{r7}
 8003eee:	b083      	sub	sp, #12
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
 8003ef4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_FLOW_CTRL(DMA_FlowCtrl));

  /* Check the needed flow controller  */
  if(DMA_FlowCtrl != DMA_FlowCtrl_Memory)
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d006      	beq.n	8003f0a <DMA_FlowControllerConfig+0x1e>
  {
    /* Configure DMA_SxCR_PFCTRL bit with the input parameter */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_PFCTRL;   
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f043 0220 	orr.w	r2, r3, #32
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear the PFCTRL bit: Memory is the flow controller */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_PFCTRL;    
  }
}
 8003f08:	e005      	b.n	8003f16 <DMA_FlowControllerConfig+0x2a>
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_PFCTRL;    
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f023 0220 	bic.w	r2, r3, #32
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	601a      	str	r2, [r3, #0]
}
 8003f16:	bf00      	nop
 8003f18:	370c      	adds	r7, #12
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f20:	4770      	bx	lr

08003f22 <DMA_SetCurrDataCounter>:
  *         DMAy_SxPAR register is considered as Peripheral.
  *      
  * @retval The number of remaining data units in the current DMAy Streamx transfer.
  */
void DMA_SetCurrDataCounter(DMA_Stream_TypeDef* DMAy_Streamx, uint16_t Counter)
{
 8003f22:	b480      	push	{r7}
 8003f24:	b083      	sub	sp, #12
 8003f26:	af00      	add	r7, sp, #0
 8003f28:	6078      	str	r0, [r7, #4]
 8003f2a:	460b      	mov	r3, r1
 8003f2c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  /* Write the number of data units to be transferred */
  DMAy_Streamx->NDTR = (uint16_t)Counter;
 8003f2e:	887a      	ldrh	r2, [r7, #2]
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	605a      	str	r2, [r3, #4]
}
 8003f34:	bf00      	nop
 8003f36:	370c      	adds	r7, #12
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3e:	4770      	bx	lr

08003f40 <DMA_GetCurrDataCounter>:
  * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
  *          to 7 to select the DMA Stream.
  * @retval The number of remaining data units in the current DMAy Streamx transfer.
  */
uint16_t DMA_GetCurrDataCounter(DMA_Stream_TypeDef* DMAy_Streamx)
{
 8003f40:	b480      	push	{r7}
 8003f42:	b083      	sub	sp, #12
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  /* Return the number of remaining data units for DMAy Streamx */
  return ((uint16_t)(DMAy_Streamx->NDTR));
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	685b      	ldr	r3, [r3, #4]
 8003f4c:	b29b      	uxth	r3, r3
}
 8003f4e:	4618      	mov	r0, r3
 8003f50:	370c      	adds	r7, #12
 8003f52:	46bd      	mov	sp, r7
 8003f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f58:	4770      	bx	lr

08003f5a <DMA_DoubleBufferModeConfig>:
  *   
  * @retval None
  */
void DMA_DoubleBufferModeConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t Memory1BaseAddr,
                                uint32_t DMA_CurrentMemory)
{  
 8003f5a:	b480      	push	{r7}
 8003f5c:	b085      	sub	sp, #20
 8003f5e:	af00      	add	r7, sp, #0
 8003f60:	60f8      	str	r0, [r7, #12]
 8003f62:	60b9      	str	r1, [r7, #8]
 8003f64:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CURRENT_MEM(DMA_CurrentMemory));

  if (DMA_CurrentMemory != DMA_Memory_0)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d006      	beq.n	8003f7a <DMA_DoubleBufferModeConfig+0x20>
  {
    /* Set Memory 1 as current memory address */
    DMAy_Streamx->CR |= (uint32_t)(DMA_SxCR_CT);    
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	601a      	str	r2, [r3, #0]
 8003f78:	e005      	b.n	8003f86 <DMA_DoubleBufferModeConfig+0x2c>
  }
  else
  {
    /* Set Memory 0 as current memory address */
    DMAy_Streamx->CR &= ~(uint32_t)(DMA_SxCR_CT);    
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	601a      	str	r2, [r3, #0]
  }

  /* Write to DMAy Streamx M1AR */
  DMAy_Streamx->M1AR = Memory1BaseAddr;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	68ba      	ldr	r2, [r7, #8]
 8003f8a:	611a      	str	r2, [r3, #16]
}
 8003f8c:	bf00      	nop
 8003f8e:	3714      	adds	r7, #20
 8003f90:	46bd      	mov	sp, r7
 8003f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f96:	4770      	bx	lr

08003f98 <DMA_DoubleBufferModeCmd>:
  * @param  NewState: new state of the DMAy Streamx double buffer mode. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DMA_DoubleBufferModeCmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
{  
 8003f98:	b480      	push	{r7}
 8003f9a:	b083      	sub	sp, #12
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
 8003fa0:	460b      	mov	r3, r1
 8003fa2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Configure the Double Buffer mode */
  if (NewState != DISABLE)
 8003fa4:	78fb      	ldrb	r3, [r7, #3]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d006      	beq.n	8003fb8 <DMA_DoubleBufferModeCmd+0x20>
  {
    /* Enable the Double buffer mode */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_DBM;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the Double buffer mode */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_DBM;
  }
}
 8003fb6:	e005      	b.n	8003fc4 <DMA_DoubleBufferModeCmd+0x2c>
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_DBM;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	601a      	str	r2, [r3, #0]
}
 8003fc4:	bf00      	nop
 8003fc6:	370c      	adds	r7, #12
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fce:	4770      	bx	lr

08003fd0 <DMA_MemoryTargetConfig>:
  *  
  * @retval None
  */
void DMA_MemoryTargetConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t MemoryBaseAddr,
                           uint32_t DMA_MemoryTarget)
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	b085      	sub	sp, #20
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	60f8      	str	r0, [r7, #12]
 8003fd8:	60b9      	str	r1, [r7, #8]
 8003fda:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CURRENT_MEM(DMA_MemoryTarget));
    
  /* Check the Memory target to be configured */
  if (DMA_MemoryTarget != DMA_Memory_0)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d003      	beq.n	8003fea <DMA_MemoryTargetConfig+0x1a>
  {
    /* Write to DMAy Streamx M1AR */
    DMAy_Streamx->M1AR = MemoryBaseAddr;    
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	68ba      	ldr	r2, [r7, #8]
 8003fe6:	611a      	str	r2, [r3, #16]
  else
  {
    /* Write to DMAy Streamx M0AR */
    DMAy_Streamx->M0AR = MemoryBaseAddr;  
  }
}
 8003fe8:	e002      	b.n	8003ff0 <DMA_MemoryTargetConfig+0x20>
    DMAy_Streamx->M0AR = MemoryBaseAddr;  
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	68ba      	ldr	r2, [r7, #8]
 8003fee:	60da      	str	r2, [r3, #12]
}
 8003ff0:	bf00      	nop
 8003ff2:	3714      	adds	r7, #20
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffa:	4770      	bx	lr

08003ffc <DMA_GetCurrentMemoryTarget>:
  * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
  *          to 7 to select the DMA Stream.
  * @retval The memory target number: 0 for Memory0 or 1 for Memory1. 
  */
uint32_t DMA_GetCurrentMemoryTarget(DMA_Stream_TypeDef* DMAy_Streamx)
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	b085      	sub	sp, #20
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
 8004004:	2300      	movs	r3, #0
 8004006:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  /* Get the current memory target */
  if ((DMAy_Streamx->CR & DMA_SxCR_CT) != 0)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004010:	2b00      	cmp	r3, #0
 8004012:	d002      	beq.n	800401a <DMA_GetCurrentMemoryTarget+0x1e>
  {
    /* Current memory buffer used is Memory 1 */
    tmp = 1;
 8004014:	2301      	movs	r3, #1
 8004016:	60fb      	str	r3, [r7, #12]
 8004018:	e001      	b.n	800401e <DMA_GetCurrentMemoryTarget+0x22>
  }  
  else
  {
    /* Current memory buffer used is Memory 0 */
    tmp = 0;    
 800401a:	2300      	movs	r3, #0
 800401c:	60fb      	str	r3, [r7, #12]
  }
  return tmp;
 800401e:	68fb      	ldr	r3, [r7, #12]
}
 8004020:	4618      	mov	r0, r3
 8004022:	3714      	adds	r7, #20
 8004024:	46bd      	mov	sp, r7
 8004026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402a:	4770      	bx	lr

0800402c <DMA_GetCmdStatus>:
  *          of this single data is finished.  
  *      
  * @retval Current state of the DMAy Streamx (ENABLE or DISABLE).
  */
FunctionalState DMA_GetCmdStatus(DMA_Stream_TypeDef* DMAy_Streamx)
{
 800402c:	b480      	push	{r7}
 800402e:	b085      	sub	sp, #20
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
  FunctionalState state = DISABLE;
 8004034:	2300      	movs	r3, #0
 8004036:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  if ((DMAy_Streamx->CR & (uint32_t)DMA_SxCR_EN) != 0)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f003 0301 	and.w	r3, r3, #1
 8004040:	2b00      	cmp	r3, #0
 8004042:	d002      	beq.n	800404a <DMA_GetCmdStatus+0x1e>
  {
    /* The selected DMAy Streamx EN bit is set (DMA is still transferring) */
    state = ENABLE;
 8004044:	2301      	movs	r3, #1
 8004046:	73fb      	strb	r3, [r7, #15]
 8004048:	e001      	b.n	800404e <DMA_GetCmdStatus+0x22>
  }
  else
  {
    /* The selected DMAy Streamx EN bit is cleared (DMA is disabled and 
        all transfers are complete) */
    state = DISABLE;
 800404a:	2300      	movs	r3, #0
 800404c:	73fb      	strb	r3, [r7, #15]
  }
  return state;
 800404e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004050:	4618      	mov	r0, r3
 8004052:	3714      	adds	r7, #20
 8004054:	46bd      	mov	sp, r7
 8004056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405a:	4770      	bx	lr

0800405c <DMA_GetFIFOStatus>:
  *           - DMA_FIFOStatus_3QuartersFull: if more than 3 quarters-full.
  *           - DMA_FIFOStatus_Empty: when FIFO is empty
  *           - DMA_FIFOStatus_Full: when FIFO is full
  */
uint32_t DMA_GetFIFOStatus(DMA_Stream_TypeDef* DMAy_Streamx)
{
 800405c:	b480      	push	{r7}
 800405e:	b085      	sub	sp, #20
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8004064:	2300      	movs	r3, #0
 8004066:	60fb      	str	r3, [r7, #12]
 
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  
  /* Get the FIFO level bits */
  tmpreg = (uint32_t)((DMAy_Streamx->FCR & DMA_SxFCR_FS));
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	695b      	ldr	r3, [r3, #20]
 800406c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004070:	60fb      	str	r3, [r7, #12]
  
  return tmpreg;
 8004072:	68fb      	ldr	r3, [r7, #12]
}
 8004074:	4618      	mov	r0, r3
 8004076:	3714      	adds	r7, #20
 8004078:	46bd      	mov	sp, r7
 800407a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407e:	4770      	bx	lr

08004080 <DMA_GetFlagStatus>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval The new state of DMA_FLAG (SET or RESET).
  */
FlagStatus DMA_GetFlagStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 8004080:	b480      	push	{r7}
 8004082:	b087      	sub	sp, #28
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
 8004088:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 800408a:	2300      	movs	r3, #0
 800408c:	75fb      	strb	r3, [r7, #23]
  DMA_TypeDef* DMAy;
  uint32_t tmpreg = 0;
 800408e:	2300      	movs	r3, #0
 8004090:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_GET_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	4a15      	ldr	r2, [pc, #84]	; (80040ec <DMA_GetFlagStatus+0x6c>)
 8004096:	4293      	cmp	r3, r2
 8004098:	d802      	bhi.n	80040a0 <DMA_GetFlagStatus+0x20>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 800409a:	4b15      	ldr	r3, [pc, #84]	; (80040f0 <DMA_GetFlagStatus+0x70>)
 800409c:	613b      	str	r3, [r7, #16]
 800409e:	e001      	b.n	80040a4 <DMA_GetFlagStatus+0x24>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 80040a0:	4b14      	ldr	r3, [pc, #80]	; (80040f4 <DMA_GetFlagStatus+0x74>)
 80040a2:	613b      	str	r3, [r7, #16]
  }

  /* Check if the flag is in HISR or LISR */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d003      	beq.n	80040b6 <DMA_GetFlagStatus+0x36>
  {
    /* Get DMAy HISR register value */
    tmpreg = DMAy->HISR;
 80040ae:	693b      	ldr	r3, [r7, #16]
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	60fb      	str	r3, [r7, #12]
 80040b4:	e002      	b.n	80040bc <DMA_GetFlagStatus+0x3c>
  }
  else
  {
    /* Get DMAy LISR register value */
    tmpreg = DMAy->LISR;
 80040b6:	693b      	ldr	r3, [r7, #16]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	60fb      	str	r3, [r7, #12]
  }   
 
  /* Mask the reserved bits */
  tmpreg &= (uint32_t)RESERVED_MASK;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 80040c2:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 80040c6:	60fb      	str	r3, [r7, #12]

  /* Check the status of the specified DMA flag */
  if ((tmpreg & DMA_FLAG) != (uint32_t)RESET)
 80040c8:	68fa      	ldr	r2, [r7, #12]
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	4013      	ands	r3, r2
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d002      	beq.n	80040d8 <DMA_GetFlagStatus+0x58>
  {
    /* DMA_FLAG is set */
    bitstatus = SET;
 80040d2:	2301      	movs	r3, #1
 80040d4:	75fb      	strb	r3, [r7, #23]
 80040d6:	e001      	b.n	80040dc <DMA_GetFlagStatus+0x5c>
  }
  else
  {
    /* DMA_FLAG is reset */
    bitstatus = RESET;
 80040d8:	2300      	movs	r3, #0
 80040da:	75fb      	strb	r3, [r7, #23]
  }

  /* Return the DMA_FLAG status */
  return  bitstatus;
 80040dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80040de:	4618      	mov	r0, r3
 80040e0:	371c      	adds	r7, #28
 80040e2:	46bd      	mov	sp, r7
 80040e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e8:	4770      	bx	lr
 80040ea:	bf00      	nop
 80040ec:	4002640f 	.word	0x4002640f
 80040f0:	40026000 	.word	0x40026000
 80040f4:	40026400 	.word	0x40026400

080040f8 <DMA_ClearFlag>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.   
  * @retval None
  */
void DMA_ClearFlag(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 80040f8:	b480      	push	{r7}
 80040fa:	b085      	sub	sp, #20
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
 8004100:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CLEAR_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	4a10      	ldr	r2, [pc, #64]	; (8004148 <DMA_ClearFlag+0x50>)
 8004106:	4293      	cmp	r3, r2
 8004108:	d802      	bhi.n	8004110 <DMA_ClearFlag+0x18>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 800410a:	4b10      	ldr	r3, [pc, #64]	; (800414c <DMA_ClearFlag+0x54>)
 800410c:	60fb      	str	r3, [r7, #12]
 800410e:	e001      	b.n	8004114 <DMA_ClearFlag+0x1c>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8004110:	4b0f      	ldr	r3, [pc, #60]	; (8004150 <DMA_ClearFlag+0x58>)
 8004112:	60fb      	str	r3, [r7, #12]
  }

  /* Check if LIFCR or HIFCR register is targeted */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800411a:	2b00      	cmp	r3, #0
 800411c:	d007      	beq.n	800412e <DMA_ClearFlag+0x36>
  {
    /* Set DMAy HIFCR register clear flag bits */
    DMAy->HIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8004124:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8004128:	68fa      	ldr	r2, [r7, #12]
 800412a:	60d3      	str	r3, [r2, #12]
  else 
  {
    /* Set DMAy LIFCR register clear flag bits */
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
  }    
}
 800412c:	e006      	b.n	800413c <DMA_ClearFlag+0x44>
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8004134:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8004138:	68fa      	ldr	r2, [r7, #12]
 800413a:	6093      	str	r3, [r2, #8]
}
 800413c:	bf00      	nop
 800413e:	3714      	adds	r7, #20
 8004140:	46bd      	mov	sp, r7
 8004142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004146:	4770      	bx	lr
 8004148:	4002640f 	.word	0x4002640f
 800414c:	40026000 	.word	0x40026000
 8004150:	40026400 	.word	0x40026400

08004154 <DMA_ITConfig>:
  * @param  NewState: new state of the specified DMA interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DMA_ITConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT, FunctionalState NewState)
{
 8004154:	b480      	push	{r7}
 8004156:	b085      	sub	sp, #20
 8004158:	af00      	add	r7, sp, #0
 800415a:	60f8      	str	r0, [r7, #12]
 800415c:	60b9      	str	r1, [r7, #8]
 800415e:	4613      	mov	r3, r2
 8004160:	71fb      	strb	r3, [r7, #7]
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CONFIG_IT(DMA_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Check if the DMA_IT parameter contains a FIFO interrupt */
  if ((DMA_IT & DMA_IT_FE) != 0)
 8004162:	68bb      	ldr	r3, [r7, #8]
 8004164:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004168:	2b00      	cmp	r3, #0
 800416a:	d00f      	beq.n	800418c <DMA_ITConfig+0x38>
  {
    if (NewState != DISABLE)
 800416c:	79fb      	ldrb	r3, [r7, #7]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d006      	beq.n	8004180 <DMA_ITConfig+0x2c>
    {
      /* Enable the selected DMA FIFO interrupts */
      DMAy_Streamx->FCR |= (uint32_t)DMA_IT_FE;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	695b      	ldr	r3, [r3, #20]
 8004176:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	615a      	str	r2, [r3, #20]
 800417e:	e005      	b.n	800418c <DMA_ITConfig+0x38>
    }    
    else 
    {
      /* Disable the selected DMA FIFO interrupts */
      DMAy_Streamx->FCR &= ~(uint32_t)DMA_IT_FE;  
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	695b      	ldr	r3, [r3, #20]
 8004184:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	615a      	str	r2, [r3, #20]
    }
  }

  /* Check if the DMA_IT parameter contains a Transfer interrupt */
  if (DMA_IT != DMA_IT_FE)
 800418c:	68bb      	ldr	r3, [r7, #8]
 800418e:	2b80      	cmp	r3, #128	; 0x80
 8004190:	d014      	beq.n	80041bc <DMA_ITConfig+0x68>
  {
    if (NewState != DISABLE)
 8004192:	79fb      	ldrb	r3, [r7, #7]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d008      	beq.n	80041aa <DMA_ITConfig+0x56>
    {
      /* Enable the selected DMA transfer interrupts */
      DMAy_Streamx->CR |= (uint32_t)(DMA_IT  & TRANSFER_IT_ENABLE_MASK);
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681a      	ldr	r2, [r3, #0]
 800419c:	68bb      	ldr	r3, [r7, #8]
 800419e:	f003 031e 	and.w	r3, r3, #30
 80041a2:	431a      	orrs	r2, r3
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	601a      	str	r2, [r3, #0]
    {
      /* Disable the selected DMA transfer interrupts */
      DMAy_Streamx->CR &= ~(uint32_t)(DMA_IT & TRANSFER_IT_ENABLE_MASK);
    }    
  }
}
 80041a8:	e008      	b.n	80041bc <DMA_ITConfig+0x68>
      DMAy_Streamx->CR &= ~(uint32_t)(DMA_IT & TRANSFER_IT_ENABLE_MASK);
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681a      	ldr	r2, [r3, #0]
 80041ae:	68bb      	ldr	r3, [r7, #8]
 80041b0:	f003 031e 	and.w	r3, r3, #30
 80041b4:	43db      	mvns	r3, r3
 80041b6:	401a      	ands	r2, r3
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	601a      	str	r2, [r3, #0]
}
 80041bc:	bf00      	nop
 80041be:	3714      	adds	r7, #20
 80041c0:	46bd      	mov	sp, r7
 80041c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c6:	4770      	bx	lr

080041c8 <DMA_GetITStatus>:
  *            @arg DMA_IT_FEIFx:  Streamx FIFO error interrupt
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval The new state of DMA_IT (SET or RESET).
  */
ITStatus DMA_GetITStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT)
{
 80041c8:	b480      	push	{r7}
 80041ca:	b087      	sub	sp, #28
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
 80041d0:	6039      	str	r1, [r7, #0]
  ITStatus bitstatus = RESET;
 80041d2:	2300      	movs	r3, #0
 80041d4:	75fb      	strb	r3, [r7, #23]
  DMA_TypeDef* DMAy;
  uint32_t tmpreg = 0, enablestatus = 0;
 80041d6:	2300      	movs	r3, #0
 80041d8:	60fb      	str	r3, [r7, #12]
 80041da:	2300      	movs	r3, #0
 80041dc:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_GET_IT(DMA_IT));
 
  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	4a22      	ldr	r2, [pc, #136]	; (800426c <DMA_GetITStatus+0xa4>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d802      	bhi.n	80041ec <DMA_GetITStatus+0x24>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 80041e6:	4b22      	ldr	r3, [pc, #136]	; (8004270 <DMA_GetITStatus+0xa8>)
 80041e8:	613b      	str	r3, [r7, #16]
 80041ea:	e001      	b.n	80041f0 <DMA_GetITStatus+0x28>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 80041ec:	4b21      	ldr	r3, [pc, #132]	; (8004274 <DMA_GetITStatus+0xac>)
 80041ee:	613b      	str	r3, [r7, #16]
  }

  /* Check if the interrupt enable bit is in the CR or FCR register */
  if ((DMA_IT & TRANSFER_IT_MASK) != (uint32_t)RESET)
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 80041f6:	f023 13c3 	bic.w	r3, r3, #12779715	; 0xc300c3
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d00a      	beq.n	8004214 <DMA_GetITStatus+0x4c>
  {
    /* Get the interrupt enable position mask in CR register */
    tmpreg = (uint32_t)((DMA_IT >> 11) & TRANSFER_IT_ENABLE_MASK);   
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	0adb      	lsrs	r3, r3, #11
 8004202:	f003 031e 	and.w	r3, r3, #30
 8004206:	60fb      	str	r3, [r7, #12]
    
    /* Check the enable bit in CR register */
    enablestatus = (uint32_t)(DMAy_Streamx->CR & tmpreg);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	68fa      	ldr	r2, [r7, #12]
 800420e:	4013      	ands	r3, r2
 8004210:	60bb      	str	r3, [r7, #8]
 8004212:	e004      	b.n	800421e <DMA_GetITStatus+0x56>
  }
  else 
  {
    /* Check the enable bit in FCR register */
    enablestatus = (uint32_t)(DMAy_Streamx->FCR & DMA_IT_FE); 
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	695b      	ldr	r3, [r3, #20]
 8004218:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800421c:	60bb      	str	r3, [r7, #8]
  }
 
  /* Check if the interrupt pending flag is in LISR or HISR */
  if ((DMA_IT & HIGH_ISR_MASK) != (uint32_t)RESET)
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004224:	2b00      	cmp	r3, #0
 8004226:	d003      	beq.n	8004230 <DMA_GetITStatus+0x68>
  {
    /* Get DMAy HISR register value */
    tmpreg = DMAy->HISR ;
 8004228:	693b      	ldr	r3, [r7, #16]
 800422a:	685b      	ldr	r3, [r3, #4]
 800422c:	60fb      	str	r3, [r7, #12]
 800422e:	e002      	b.n	8004236 <DMA_GetITStatus+0x6e>
  }
  else
  {
    /* Get DMAy LISR register value */
    tmpreg = DMAy->LISR ;
 8004230:	693b      	ldr	r3, [r7, #16]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	60fb      	str	r3, [r7, #12]
  } 

  /* mask all reserved bits */
  tmpreg &= (uint32_t)RESERVED_MASK;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 800423c:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8004240:	60fb      	str	r3, [r7, #12]

  /* Check the status of the specified DMA interrupt */
  if (((tmpreg & DMA_IT) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
 8004242:	68fa      	ldr	r2, [r7, #12]
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	4013      	ands	r3, r2
 8004248:	2b00      	cmp	r3, #0
 800424a:	d005      	beq.n	8004258 <DMA_GetITStatus+0x90>
 800424c:	68bb      	ldr	r3, [r7, #8]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d002      	beq.n	8004258 <DMA_GetITStatus+0x90>
  {
    /* DMA_IT is set */
    bitstatus = SET;
 8004252:	2301      	movs	r3, #1
 8004254:	75fb      	strb	r3, [r7, #23]
 8004256:	e001      	b.n	800425c <DMA_GetITStatus+0x94>
  }
  else
  {
    /* DMA_IT is reset */
    bitstatus = RESET;
 8004258:	2300      	movs	r3, #0
 800425a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return the DMA_IT status */
  return  bitstatus;
 800425c:	7dfb      	ldrb	r3, [r7, #23]
}
 800425e:	4618      	mov	r0, r3
 8004260:	371c      	adds	r7, #28
 8004262:	46bd      	mov	sp, r7
 8004264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004268:	4770      	bx	lr
 800426a:	bf00      	nop
 800426c:	4002640f 	.word	0x4002640f
 8004270:	40026000 	.word	0x40026000
 8004274:	40026400 	.word	0x40026400

08004278 <DMA_ClearITPendingBit>:
  *            @arg DMA_IT_FEIFx:  Streamx FIFO error interrupt
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval None
  */
void DMA_ClearITPendingBit(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT)
{
 8004278:	b480      	push	{r7}
 800427a:	b085      	sub	sp, #20
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
 8004280:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CLEAR_IT(DMA_IT));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	4a10      	ldr	r2, [pc, #64]	; (80042c8 <DMA_ClearITPendingBit+0x50>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d802      	bhi.n	8004290 <DMA_ClearITPendingBit+0x18>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 800428a:	4b10      	ldr	r3, [pc, #64]	; (80042cc <DMA_ClearITPendingBit+0x54>)
 800428c:	60fb      	str	r3, [r7, #12]
 800428e:	e001      	b.n	8004294 <DMA_ClearITPendingBit+0x1c>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8004290:	4b0f      	ldr	r3, [pc, #60]	; (80042d0 <DMA_ClearITPendingBit+0x58>)
 8004292:	60fb      	str	r3, [r7, #12]
  }

  /* Check if LIFCR or HIFCR register is targeted */
  if ((DMA_IT & HIGH_ISR_MASK) != (uint32_t)RESET)
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800429a:	2b00      	cmp	r3, #0
 800429c:	d007      	beq.n	80042ae <DMA_ClearITPendingBit+0x36>
  {
    /* Set DMAy HIFCR register clear interrupt bits */
    DMAy->HIFCR = (uint32_t)(DMA_IT & RESERVED_MASK);
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 80042a4:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 80042a8:	68fa      	ldr	r2, [r7, #12]
 80042aa:	60d3      	str	r3, [r2, #12]
  else 
  {
    /* Set DMAy LIFCR register clear interrupt bits */
    DMAy->LIFCR = (uint32_t)(DMA_IT & RESERVED_MASK);
  }   
}
 80042ac:	e006      	b.n	80042bc <DMA_ClearITPendingBit+0x44>
    DMAy->LIFCR = (uint32_t)(DMA_IT & RESERVED_MASK);
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 80042b4:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 80042b8:	68fa      	ldr	r2, [r7, #12]
 80042ba:	6093      	str	r3, [r2, #8]
}
 80042bc:	bf00      	nop
 80042be:	3714      	adds	r7, #20
 80042c0:	46bd      	mov	sp, r7
 80042c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c6:	4770      	bx	lr
 80042c8:	4002640f 	.word	0x4002640f
 80042cc:	40026000 	.word	0x40026000
 80042d0:	40026400 	.word	0x40026400

080042d4 <DMA2D_DeInit>:
  * @param  None
  * @retval None
  */

void DMA2D_DeInit(void)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	af00      	add	r7, sp, #0
  /* Enable DMA2D reset state */
  RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_DMA2D, ENABLE);
 80042d8:	2101      	movs	r1, #1
 80042da:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80042de:	f004 fbdb 	bl	8008a98 <RCC_AHB1PeriphResetCmd>
  /* Release DMA2D from reset state */
  RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_DMA2D, DISABLE);
 80042e2:	2100      	movs	r1, #0
 80042e4:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80042e8:	f004 fbd6 	bl	8008a98 <RCC_AHB1PeriphResetCmd>
}
 80042ec:	bf00      	nop
 80042ee:	bd80      	pop	{r7, pc}

080042f0 <DMA2D_Init>:
  * @param  DMA2D_InitStruct: pointer to a DMA2D_InitTypeDef structure that contains
  *         the configuration information for the specified DMA2D peripheral.
  * @retval None
  */
void DMA2D_Init(DMA2D_InitTypeDef* DMA2D_InitStruct)
{
 80042f0:	b480      	push	{r7}
 80042f2:	b087      	sub	sp, #28
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]

  uint32_t outgreen = 0;
 80042f8:	2300      	movs	r3, #0
 80042fa:	617b      	str	r3, [r7, #20]
  uint32_t outred   = 0;
 80042fc:	2300      	movs	r3, #0
 80042fe:	613b      	str	r3, [r7, #16]
  uint32_t outalpha = 0;
 8004300:	2300      	movs	r3, #0
 8004302:	60fb      	str	r3, [r7, #12]
  uint32_t pixline  = 0;
 8004304:	2300      	movs	r3, #0
 8004306:	60bb      	str	r3, [r7, #8]
  assert_param(IS_DMA2D_OUTPUT_OFFSET(DMA2D_InitStruct->DMA2D_OutputOffset));
  assert_param(IS_DMA2D_LINE(DMA2D_InitStruct->DMA2D_NumberOfLine));
  assert_param(IS_DMA2D_PIXEL(DMA2D_InitStruct->DMA2D_PixelPerLine));

  /* Configures the DMA2D operation mode */
  DMA2D->CR &= (uint32_t)CR_MASK;
 8004308:	4b50      	ldr	r3, [pc, #320]	; (800444c <DMA2D_Init+0x15c>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4a4f      	ldr	r2, [pc, #316]	; (800444c <DMA2D_Init+0x15c>)
 800430e:	f023 1303 	bic.w	r3, r3, #196611	; 0x30003
 8004312:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8004316:	6013      	str	r3, [r2, #0]
  DMA2D->CR |= (DMA2D_InitStruct->DMA2D_Mode);
 8004318:	4b4c      	ldr	r3, [pc, #304]	; (800444c <DMA2D_Init+0x15c>)
 800431a:	681a      	ldr	r2, [r3, #0]
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	494a      	ldr	r1, [pc, #296]	; (800444c <DMA2D_Init+0x15c>)
 8004322:	4313      	orrs	r3, r2
 8004324:	600b      	str	r3, [r1, #0]

  /* Configures the color mode of the output image */
  DMA2D->OPFCCR &= ~(uint32_t)DMA2D_OPFCCR_CM;
 8004326:	4b49      	ldr	r3, [pc, #292]	; (800444c <DMA2D_Init+0x15c>)
 8004328:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800432a:	4a48      	ldr	r2, [pc, #288]	; (800444c <DMA2D_Init+0x15c>)
 800432c:	f023 0307 	bic.w	r3, r3, #7
 8004330:	6353      	str	r3, [r2, #52]	; 0x34
  DMA2D->OPFCCR |= (DMA2D_InitStruct->DMA2D_CMode);
 8004332:	4b46      	ldr	r3, [pc, #280]	; (800444c <DMA2D_Init+0x15c>)
 8004334:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	685b      	ldr	r3, [r3, #4]
 800433a:	4944      	ldr	r1, [pc, #272]	; (800444c <DMA2D_Init+0x15c>)
 800433c:	4313      	orrs	r3, r2
 800433e:	634b      	str	r3, [r1, #52]	; 0x34

  /* Configures the output color */

  if (DMA2D_InitStruct->DMA2D_CMode == DMA2D_ARGB8888)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	685b      	ldr	r3, [r3, #4]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d10c      	bne.n	8004362 <DMA2D_Init+0x72>
  {
    outgreen = DMA2D_InitStruct->DMA2D_OutputGreen << 8;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	68db      	ldr	r3, [r3, #12]
 800434c:	021b      	lsls	r3, r3, #8
 800434e:	617b      	str	r3, [r7, #20]
    outred = DMA2D_InitStruct->DMA2D_OutputRed << 16;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	691b      	ldr	r3, [r3, #16]
 8004354:	041b      	lsls	r3, r3, #16
 8004356:	613b      	str	r3, [r7, #16]
    outalpha = DMA2D_InitStruct->DMA2D_OutputAlpha << 24;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	695b      	ldr	r3, [r3, #20]
 800435c:	061b      	lsls	r3, r3, #24
 800435e:	60fb      	str	r3, [r7, #12]
 8004360:	e03a      	b.n	80043d8 <DMA2D_Init+0xe8>
  }
  else
  
    if (DMA2D_InitStruct->DMA2D_CMode == DMA2D_RGB888)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	685b      	ldr	r3, [r3, #4]
 8004366:	2b01      	cmp	r3, #1
 8004368:	d10a      	bne.n	8004380 <DMA2D_Init+0x90>
    {
      outgreen = DMA2D_InitStruct->DMA2D_OutputGreen << 8;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	68db      	ldr	r3, [r3, #12]
 800436e:	021b      	lsls	r3, r3, #8
 8004370:	617b      	str	r3, [r7, #20]
      outred = DMA2D_InitStruct->DMA2D_OutputRed << 16;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	691b      	ldr	r3, [r3, #16]
 8004376:	041b      	lsls	r3, r3, #16
 8004378:	613b      	str	r3, [r7, #16]
      outalpha = (uint32_t)0x00000000;
 800437a:	2300      	movs	r3, #0
 800437c:	60fb      	str	r3, [r7, #12]
 800437e:	e02b      	b.n	80043d8 <DMA2D_Init+0xe8>
    }
     
  else

    if (DMA2D_InitStruct->DMA2D_CMode == DMA2D_RGB565)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	685b      	ldr	r3, [r3, #4]
 8004384:	2b02      	cmp	r3, #2
 8004386:	d10a      	bne.n	800439e <DMA2D_Init+0xae>
    {
      outgreen = DMA2D_InitStruct->DMA2D_OutputGreen << 5;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	68db      	ldr	r3, [r3, #12]
 800438c:	015b      	lsls	r3, r3, #5
 800438e:	617b      	str	r3, [r7, #20]
      outred = DMA2D_InitStruct->DMA2D_OutputRed << 11;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	691b      	ldr	r3, [r3, #16]
 8004394:	02db      	lsls	r3, r3, #11
 8004396:	613b      	str	r3, [r7, #16]
      outalpha = (uint32_t)0x00000000;
 8004398:	2300      	movs	r3, #0
 800439a:	60fb      	str	r3, [r7, #12]
 800439c:	e01c      	b.n	80043d8 <DMA2D_Init+0xe8>
    }

  else

    if (DMA2D_InitStruct->DMA2D_CMode == DMA2D_ARGB1555)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	685b      	ldr	r3, [r3, #4]
 80043a2:	2b03      	cmp	r3, #3
 80043a4:	d10c      	bne.n	80043c0 <DMA2D_Init+0xd0>
    {  
      outgreen = DMA2D_InitStruct->DMA2D_OutputGreen << 5;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	68db      	ldr	r3, [r3, #12]
 80043aa:	015b      	lsls	r3, r3, #5
 80043ac:	617b      	str	r3, [r7, #20]
      outred = DMA2D_InitStruct->DMA2D_OutputRed << 10;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	691b      	ldr	r3, [r3, #16]
 80043b2:	029b      	lsls	r3, r3, #10
 80043b4:	613b      	str	r3, [r7, #16]
      outalpha = DMA2D_InitStruct->DMA2D_OutputAlpha << 15;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	695b      	ldr	r3, [r3, #20]
 80043ba:	03db      	lsls	r3, r3, #15
 80043bc:	60fb      	str	r3, [r7, #12]
 80043be:	e00b      	b.n	80043d8 <DMA2D_Init+0xe8>
    }

  else /* DMA2D_CMode = DMA2D_ARGB4444 */
  {
    outgreen = DMA2D_InitStruct->DMA2D_OutputGreen << 4;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	68db      	ldr	r3, [r3, #12]
 80043c4:	011b      	lsls	r3, r3, #4
 80043c6:	617b      	str	r3, [r7, #20]
    outred = DMA2D_InitStruct->DMA2D_OutputRed << 8;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	691b      	ldr	r3, [r3, #16]
 80043cc:	021b      	lsls	r3, r3, #8
 80043ce:	613b      	str	r3, [r7, #16]
    outalpha = DMA2D_InitStruct->DMA2D_OutputAlpha << 12;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	695b      	ldr	r3, [r3, #20]
 80043d4:	031b      	lsls	r3, r3, #12
 80043d6:	60fb      	str	r3, [r7, #12]
  }  
  DMA2D->OCOLR |= ((outgreen) | (outred) | (DMA2D_InitStruct->DMA2D_OutputBlue) | (outalpha));
 80043d8:	4b1c      	ldr	r3, [pc, #112]	; (800444c <DMA2D_Init+0x15c>)
 80043da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80043dc:	6979      	ldr	r1, [r7, #20]
 80043de:	693b      	ldr	r3, [r7, #16]
 80043e0:	4319      	orrs	r1, r3
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	689b      	ldr	r3, [r3, #8]
 80043e6:	4319      	orrs	r1, r3
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	430b      	orrs	r3, r1
 80043ec:	4917      	ldr	r1, [pc, #92]	; (800444c <DMA2D_Init+0x15c>)
 80043ee:	4313      	orrs	r3, r2
 80043f0:	638b      	str	r3, [r1, #56]	; 0x38

  /* Configures the output memory address */
  DMA2D->OMAR = (DMA2D_InitStruct->DMA2D_OutputMemoryAdd);
 80043f2:	4a16      	ldr	r2, [pc, #88]	; (800444c <DMA2D_Init+0x15c>)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	699b      	ldr	r3, [r3, #24]
 80043f8:	63d3      	str	r3, [r2, #60]	; 0x3c

  /* Configure  the line Offset */
  DMA2D->OOR &= ~(uint32_t)DMA2D_OOR_LO;
 80043fa:	4b14      	ldr	r3, [pc, #80]	; (800444c <DMA2D_Init+0x15c>)
 80043fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043fe:	4a13      	ldr	r2, [pc, #76]	; (800444c <DMA2D_Init+0x15c>)
 8004400:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8004404:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004408:	6413      	str	r3, [r2, #64]	; 0x40
  DMA2D->OOR |= (DMA2D_InitStruct->DMA2D_OutputOffset);
 800440a:	4b10      	ldr	r3, [pc, #64]	; (800444c <DMA2D_Init+0x15c>)
 800440c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	69db      	ldr	r3, [r3, #28]
 8004412:	490e      	ldr	r1, [pc, #56]	; (800444c <DMA2D_Init+0x15c>)
 8004414:	4313      	orrs	r3, r2
 8004416:	640b      	str	r3, [r1, #64]	; 0x40

  /* Configure the number of line and pixel per line */
  pixline = DMA2D_InitStruct->DMA2D_PixelPerLine << 16; 
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800441c:	041b      	lsls	r3, r3, #16
 800441e:	60bb      	str	r3, [r7, #8]
  DMA2D->NLR &= ~(DMA2D_NLR_NL | DMA2D_NLR_PL);
 8004420:	4b0a      	ldr	r3, [pc, #40]	; (800444c <DMA2D_Init+0x15c>)
 8004422:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004424:	4a09      	ldr	r2, [pc, #36]	; (800444c <DMA2D_Init+0x15c>)
 8004426:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800442a:	6453      	str	r3, [r2, #68]	; 0x44
  DMA2D->NLR |= ((DMA2D_InitStruct->DMA2D_NumberOfLine) | (pixline));
 800442c:	4b07      	ldr	r3, [pc, #28]	; (800444c <DMA2D_Init+0x15c>)
 800442e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6a19      	ldr	r1, [r3, #32]
 8004434:	68bb      	ldr	r3, [r7, #8]
 8004436:	430b      	orrs	r3, r1
 8004438:	4904      	ldr	r1, [pc, #16]	; (800444c <DMA2D_Init+0x15c>)
 800443a:	4313      	orrs	r3, r2
 800443c:	644b      	str	r3, [r1, #68]	; 0x44
  * @brief  Fills each DMA2D_InitStruct member with its default value.
  * @param  DMA2D_InitStruct: pointer to a DMA2D_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
}
 800443e:	bf00      	nop
 8004440:	371c      	adds	r7, #28
 8004442:	46bd      	mov	sp, r7
 8004444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004448:	4770      	bx	lr
 800444a:	bf00      	nop
 800444c:	4002b000 	.word	0x4002b000

08004450 <DMA2D_StructInit>:
void DMA2D_StructInit(DMA2D_InitTypeDef* DMA2D_InitStruct)
{
 8004450:	b480      	push	{r7}
 8004452:	b083      	sub	sp, #12
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
  /* Initialize the transfer mode member */
  DMA2D_InitStruct->DMA2D_Mode = DMA2D_M2M;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2200      	movs	r2, #0
 800445c:	601a      	str	r2, [r3, #0]

  /* Initialize the output color mode members */
  DMA2D_InitStruct->DMA2D_CMode = DMA2D_ARGB8888;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2200      	movs	r2, #0
 8004462:	605a      	str	r2, [r3, #4]

  /* Initialize the alpha and RGB values */
  DMA2D_InitStruct->DMA2D_OutputGreen = 0x00;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2200      	movs	r2, #0
 8004468:	60da      	str	r2, [r3, #12]
  DMA2D_InitStruct->DMA2D_OutputBlue = 0x00;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2200      	movs	r2, #0
 800446e:	609a      	str	r2, [r3, #8]
  DMA2D_InitStruct->DMA2D_OutputRed = 0x00;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2200      	movs	r2, #0
 8004474:	611a      	str	r2, [r3, #16]
  DMA2D_InitStruct->DMA2D_OutputAlpha = 0x00;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	2200      	movs	r2, #0
 800447a:	615a      	str	r2, [r3, #20]

  /* Initialize the output memory address */
  DMA2D_InitStruct->DMA2D_OutputMemoryAdd = 0x00;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2200      	movs	r2, #0
 8004480:	619a      	str	r2, [r3, #24]

  /* Initialize the output offset */
  DMA2D_InitStruct->DMA2D_OutputOffset = 0x00;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2200      	movs	r2, #0
 8004486:	61da      	str	r2, [r3, #28]

  /* Initialize the number of line and the number of pixel per line */
  DMA2D_InitStruct->DMA2D_NumberOfLine = 0x00;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2200      	movs	r2, #0
 800448c:	621a      	str	r2, [r3, #32]
  DMA2D_InitStruct->DMA2D_PixelPerLine = 0x00;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2200      	movs	r2, #0
 8004492:	625a      	str	r2, [r3, #36]	; 0x24
}
 8004494:	bf00      	nop
 8004496:	370c      	adds	r7, #12
 8004498:	46bd      	mov	sp, r7
 800449a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449e:	4770      	bx	lr

080044a0 <DMA2D_StartTransfer>:
  * @param 
  * @retval None
  */

void DMA2D_StartTransfer(void)
{
 80044a0:	b480      	push	{r7}
 80044a2:	af00      	add	r7, sp, #0
    /* Start DMA2D transfer by setting START bit */
    DMA2D->CR |= (uint32_t)DMA2D_CR_START;
 80044a4:	4b05      	ldr	r3, [pc, #20]	; (80044bc <DMA2D_StartTransfer+0x1c>)
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	4a04      	ldr	r2, [pc, #16]	; (80044bc <DMA2D_StartTransfer+0x1c>)
 80044aa:	f043 0301 	orr.w	r3, r3, #1
 80044ae:	6013      	str	r3, [r2, #0]
}
 80044b0:	bf00      	nop
 80044b2:	46bd      	mov	sp, r7
 80044b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b8:	4770      	bx	lr
 80044ba:	bf00      	nop
 80044bc:	4002b000 	.word	0x4002b000

080044c0 <DMA2D_AbortTransfer>:
  * @param
  * @retval None
  */

void DMA2D_AbortTransfer(void)
{
 80044c0:	b480      	push	{r7}
 80044c2:	af00      	add	r7, sp, #0
    /* Start DMA2D transfer by setting START bit */
    DMA2D->CR |= (uint32_t)DMA2D_CR_ABORT;
 80044c4:	4b05      	ldr	r3, [pc, #20]	; (80044dc <DMA2D_AbortTransfer+0x1c>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4a04      	ldr	r2, [pc, #16]	; (80044dc <DMA2D_AbortTransfer+0x1c>)
 80044ca:	f043 0304 	orr.w	r3, r3, #4
 80044ce:	6013      	str	r3, [r2, #0]

}
 80044d0:	bf00      	nop
 80044d2:	46bd      	mov	sp, r7
 80044d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d8:	4770      	bx	lr
 80044da:	bf00      	nop
 80044dc:	4002b000 	.word	0x4002b000

080044e0 <DMA2D_Suspend>:
  * @param  NewState: new state of the DMA2D peripheral.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DMA2D_Suspend(FunctionalState NewState)
{
 80044e0:	b480      	push	{r7}
 80044e2:	b083      	sub	sp, #12
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	4603      	mov	r3, r0
 80044e8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80044ea:	79fb      	ldrb	r3, [r7, #7]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d006      	beq.n	80044fe <DMA2D_Suspend+0x1e>
  {
    /* Suspend DMA2D transfer by setting STOP bit */
    DMA2D->CR |= (uint32_t)DMA2D_CR_SUSP;
 80044f0:	4b09      	ldr	r3, [pc, #36]	; (8004518 <DMA2D_Suspend+0x38>)
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4a08      	ldr	r2, [pc, #32]	; (8004518 <DMA2D_Suspend+0x38>)
 80044f6:	f043 0302 	orr.w	r3, r3, #2
 80044fa:	6013      	str	r3, [r2, #0]
  else
  {
    /* Continue DMA2D transfer by clearing STOP bit */
    DMA2D->CR &= ~(uint32_t)DMA2D_CR_SUSP;
  }
}
 80044fc:	e005      	b.n	800450a <DMA2D_Suspend+0x2a>
    DMA2D->CR &= ~(uint32_t)DMA2D_CR_SUSP;
 80044fe:	4b06      	ldr	r3, [pc, #24]	; (8004518 <DMA2D_Suspend+0x38>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	4a05      	ldr	r2, [pc, #20]	; (8004518 <DMA2D_Suspend+0x38>)
 8004504:	f023 0302 	bic.w	r3, r3, #2
 8004508:	6013      	str	r3, [r2, #0]
}
 800450a:	bf00      	nop
 800450c:	370c      	adds	r7, #12
 800450e:	46bd      	mov	sp, r7
 8004510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004514:	4770      	bx	lr
 8004516:	bf00      	nop
 8004518:	4002b000 	.word	0x4002b000

0800451c <DMA2D_FGConfig>:
  * @param  DMA2D_FGStruct: pointer to a DMA2D_FGTypeDef structure that contains
  *         the configuration information for the specified Background.
  * @retval None
  */
void DMA2D_FGConfig(DMA2D_FG_InitTypeDef* DMA2D_FG_InitStruct)
{
 800451c:	b480      	push	{r7}
 800451e:	b089      	sub	sp, #36	; 0x24
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]

  uint32_t fg_clutcolormode = 0;
 8004524:	2300      	movs	r3, #0
 8004526:	61fb      	str	r3, [r7, #28]
  uint32_t fg_clutsize = 0;
 8004528:	2300      	movs	r3, #0
 800452a:	61bb      	str	r3, [r7, #24]
  uint32_t fg_alpha_mode = 0;
 800452c:	2300      	movs	r3, #0
 800452e:	617b      	str	r3, [r7, #20]
  uint32_t fg_alphavalue = 0;
 8004530:	2300      	movs	r3, #0
 8004532:	613b      	str	r3, [r7, #16]
  uint32_t fg_colorgreen = 0;
 8004534:	2300      	movs	r3, #0
 8004536:	60fb      	str	r3, [r7, #12]
  uint32_t fg_colorred = 0;
 8004538:	2300      	movs	r3, #0
 800453a:	60bb      	str	r3, [r7, #8]
  assert_param(IS_DMA2D_FGC_BLUE(DMA2D_FG_InitStruct->DMA2D_FGC_BLUE));
  assert_param(IS_DMA2D_FGC_GREEN(DMA2D_FG_InitStruct->DMA2D_FGC_GREEN));
  assert_param(IS_DMA2D_FGC_RED(DMA2D_FG_InitStruct->DMA2D_FGC_RED));

  /* Configures the FG memory address */
  DMA2D->FGMAR = (DMA2D_FG_InitStruct->DMA2D_FGMA);
 800453c:	4a2d      	ldr	r2, [pc, #180]	; (80045f4 <DMA2D_FGConfig+0xd8>)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	60d3      	str	r3, [r2, #12]

  /* Configures the FG offset */
  DMA2D->FGOR &= ~(uint32_t)DMA2D_FGOR_LO;
 8004544:	4b2b      	ldr	r3, [pc, #172]	; (80045f4 <DMA2D_FGConfig+0xd8>)
 8004546:	691b      	ldr	r3, [r3, #16]
 8004548:	4a2a      	ldr	r2, [pc, #168]	; (80045f4 <DMA2D_FGConfig+0xd8>)
 800454a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800454e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004552:	6113      	str	r3, [r2, #16]
  DMA2D->FGOR |= (DMA2D_FG_InitStruct->DMA2D_FGO);
 8004554:	4b27      	ldr	r3, [pc, #156]	; (80045f4 <DMA2D_FGConfig+0xd8>)
 8004556:	691a      	ldr	r2, [r3, #16]
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	685b      	ldr	r3, [r3, #4]
 800455c:	4925      	ldr	r1, [pc, #148]	; (80045f4 <DMA2D_FGConfig+0xd8>)
 800455e:	4313      	orrs	r3, r2
 8004560:	610b      	str	r3, [r1, #16]

  /* Configures foreground Pixel Format Convertor */
  DMA2D->FGPFCCR &= (uint32_t)PFCCR_MASK;
 8004562:	4b24      	ldr	r3, [pc, #144]	; (80045f4 <DMA2D_FGConfig+0xd8>)
 8004564:	69da      	ldr	r2, [r3, #28]
 8004566:	4923      	ldr	r1, [pc, #140]	; (80045f4 <DMA2D_FGConfig+0xd8>)
 8004568:	4b23      	ldr	r3, [pc, #140]	; (80045f8 <DMA2D_FGConfig+0xdc>)
 800456a:	4013      	ands	r3, r2
 800456c:	61cb      	str	r3, [r1, #28]
  fg_clutcolormode = DMA2D_FG_InitStruct->DMA2D_FG_CLUT_CM << 4;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	68db      	ldr	r3, [r3, #12]
 8004572:	011b      	lsls	r3, r3, #4
 8004574:	61fb      	str	r3, [r7, #28]
  fg_clutsize = DMA2D_FG_InitStruct->DMA2D_FG_CLUT_SIZE << 8;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	691b      	ldr	r3, [r3, #16]
 800457a:	021b      	lsls	r3, r3, #8
 800457c:	61bb      	str	r3, [r7, #24]
  fg_alpha_mode = DMA2D_FG_InitStruct->DMA2D_FGPFC_ALPHA_MODE << 16;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	695b      	ldr	r3, [r3, #20]
 8004582:	041b      	lsls	r3, r3, #16
 8004584:	617b      	str	r3, [r7, #20]
  fg_alphavalue = DMA2D_FG_InitStruct->DMA2D_FGPFC_ALPHA_VALUE << 24;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	699b      	ldr	r3, [r3, #24]
 800458a:	061b      	lsls	r3, r3, #24
 800458c:	613b      	str	r3, [r7, #16]
  DMA2D->FGPFCCR |= (DMA2D_FG_InitStruct->DMA2D_FGCM | fg_clutcolormode | fg_clutsize | \
 800458e:	4b19      	ldr	r3, [pc, #100]	; (80045f4 <DMA2D_FGConfig+0xd8>)
 8004590:	69da      	ldr	r2, [r3, #28]
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6899      	ldr	r1, [r3, #8]
 8004596:	69fb      	ldr	r3, [r7, #28]
 8004598:	4319      	orrs	r1, r3
 800459a:	69bb      	ldr	r3, [r7, #24]
 800459c:	4319      	orrs	r1, r3
 800459e:	697b      	ldr	r3, [r7, #20]
 80045a0:	4319      	orrs	r1, r3
                    fg_alpha_mode | fg_alphavalue);
 80045a2:	693b      	ldr	r3, [r7, #16]
 80045a4:	430b      	orrs	r3, r1
  DMA2D->FGPFCCR |= (DMA2D_FG_InitStruct->DMA2D_FGCM | fg_clutcolormode | fg_clutsize | \
 80045a6:	4913      	ldr	r1, [pc, #76]	; (80045f4 <DMA2D_FGConfig+0xd8>)
 80045a8:	4313      	orrs	r3, r2
 80045aa:	61cb      	str	r3, [r1, #28]

  /* Configures foreground color */
  DMA2D->FGCOLR &= ~(DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | DMA2D_FGCOLR_RED);
 80045ac:	4b11      	ldr	r3, [pc, #68]	; (80045f4 <DMA2D_FGConfig+0xd8>)
 80045ae:	6a1b      	ldr	r3, [r3, #32]
 80045b0:	4a10      	ldr	r2, [pc, #64]	; (80045f4 <DMA2D_FGConfig+0xd8>)
 80045b2:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80045b6:	6213      	str	r3, [r2, #32]
  fg_colorgreen = DMA2D_FG_InitStruct->DMA2D_FGC_GREEN << 8;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6a1b      	ldr	r3, [r3, #32]
 80045bc:	021b      	lsls	r3, r3, #8
 80045be:	60fb      	str	r3, [r7, #12]
  fg_colorred = DMA2D_FG_InitStruct->DMA2D_FGC_RED << 16;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045c4:	041b      	lsls	r3, r3, #16
 80045c6:	60bb      	str	r3, [r7, #8]
  DMA2D->FGCOLR |= (DMA2D_FG_InitStruct->DMA2D_FGC_BLUE | fg_colorgreen | fg_colorred);
 80045c8:	4b0a      	ldr	r3, [pc, #40]	; (80045f4 <DMA2D_FGConfig+0xd8>)
 80045ca:	6a1a      	ldr	r2, [r3, #32]
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	69d9      	ldr	r1, [r3, #28]
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	4319      	orrs	r1, r3
 80045d4:	68bb      	ldr	r3, [r7, #8]
 80045d6:	430b      	orrs	r3, r1
 80045d8:	4906      	ldr	r1, [pc, #24]	; (80045f4 <DMA2D_FGConfig+0xd8>)
 80045da:	4313      	orrs	r3, r2
 80045dc:	620b      	str	r3, [r1, #32]

  /* Configures foreground CLUT memory address */
  DMA2D->FGCMAR = DMA2D_FG_InitStruct->DMA2D_FGCMAR;
 80045de:	4a05      	ldr	r2, [pc, #20]	; (80045f4 <DMA2D_FGConfig+0xd8>)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045e4:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 80045e6:	bf00      	nop
 80045e8:	3724      	adds	r7, #36	; 0x24
 80045ea:	46bd      	mov	sp, r7
 80045ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f0:	4770      	bx	lr
 80045f2:	bf00      	nop
 80045f4:	4002b000 	.word	0x4002b000
 80045f8:	00fc00c0 	.word	0x00fc00c0

080045fc <DMA2D_FG_StructInit>:
  * @param  DMA2D_FGStruct: pointer to a DMA2D_FGTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void DMA2D_FG_StructInit(DMA2D_FG_InitTypeDef* DMA2D_FG_InitStruct)
{
 80045fc:	b480      	push	{r7}
 80045fe:	b083      	sub	sp, #12
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
  /*!< Initialize the DMA2D foreground memory address */
  DMA2D_FG_InitStruct->DMA2D_FGMA = 0x00;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2200      	movs	r2, #0
 8004608:	601a      	str	r2, [r3, #0]

  /*!< Initialize the DMA2D foreground offset */
  DMA2D_FG_InitStruct->DMA2D_FGO = 0x00;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2200      	movs	r2, #0
 800460e:	605a      	str	r2, [r3, #4]

  /*!< Initialize the DMA2D foreground color mode */
  DMA2D_FG_InitStruct->DMA2D_FGCM = CM_ARGB8888;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2200      	movs	r2, #0
 8004614:	609a      	str	r2, [r3, #8]

  /*!< Initialize the DMA2D foreground CLUT color mode */
  DMA2D_FG_InitStruct->DMA2D_FG_CLUT_CM = CLUT_CM_ARGB8888;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	2200      	movs	r2, #0
 800461a:	60da      	str	r2, [r3, #12]

  /*!< Initialize the DMA2D foreground CLUT size */
  DMA2D_FG_InitStruct->DMA2D_FG_CLUT_SIZE = 0x00;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2200      	movs	r2, #0
 8004620:	611a      	str	r2, [r3, #16]

  /*!< Initialize the DMA2D foreground alpha mode */
  DMA2D_FG_InitStruct->DMA2D_FGPFC_ALPHA_MODE = NO_MODIF_ALPHA_VALUE;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2200      	movs	r2, #0
 8004626:	615a      	str	r2, [r3, #20]

  /*!< Initialize the DMA2D foreground alpha value */
  DMA2D_FG_InitStruct->DMA2D_FGPFC_ALPHA_VALUE = 0x00;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2200      	movs	r2, #0
 800462c:	619a      	str	r2, [r3, #24]

  /*!< Initialize the DMA2D foreground blue value */
  DMA2D_FG_InitStruct->DMA2D_FGC_BLUE = 0x00;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2200      	movs	r2, #0
 8004632:	61da      	str	r2, [r3, #28]

  /*!< Initialize the DMA2D foreground green value */
  DMA2D_FG_InitStruct->DMA2D_FGC_GREEN = 0x00;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2200      	movs	r2, #0
 8004638:	621a      	str	r2, [r3, #32]

  /*!< Initialize the DMA2D foreground red value */
  DMA2D_FG_InitStruct->DMA2D_FGC_RED = 0x00;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2200      	movs	r2, #0
 800463e:	625a      	str	r2, [r3, #36]	; 0x24

  /*!< Initialize the DMA2D foreground CLUT memory address */
  DMA2D_FG_InitStruct->DMA2D_FGCMAR = 0x00;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2200      	movs	r2, #0
 8004644:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004646:	bf00      	nop
 8004648:	370c      	adds	r7, #12
 800464a:	46bd      	mov	sp, r7
 800464c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004650:	4770      	bx	lr

08004652 <DMA2D_BGConfig>:
  * @param  DMA2D_BGStruct: pointer to a DMA2D_BGTypeDef structure that contains
  *         the configuration information for the specified Background.
  * @retval None
  */
void DMA2D_BGConfig(DMA2D_BG_InitTypeDef* DMA2D_BG_InitStruct)
{
 8004652:	b480      	push	{r7}
 8004654:	b089      	sub	sp, #36	; 0x24
 8004656:	af00      	add	r7, sp, #0
 8004658:	6078      	str	r0, [r7, #4]

  uint32_t bg_clutcolormode = 0;
 800465a:	2300      	movs	r3, #0
 800465c:	61fb      	str	r3, [r7, #28]
  uint32_t bg_clutsize = 0;
 800465e:	2300      	movs	r3, #0
 8004660:	61bb      	str	r3, [r7, #24]
  uint32_t bg_alpha_mode = 0;
 8004662:	2300      	movs	r3, #0
 8004664:	617b      	str	r3, [r7, #20]
  uint32_t bg_alphavalue = 0;
 8004666:	2300      	movs	r3, #0
 8004668:	613b      	str	r3, [r7, #16]
  uint32_t bg_colorgreen = 0;
 800466a:	2300      	movs	r3, #0
 800466c:	60fb      	str	r3, [r7, #12]
  uint32_t bg_colorred = 0;
 800466e:	2300      	movs	r3, #0
 8004670:	60bb      	str	r3, [r7, #8]
  assert_param(IS_DMA2D_BGC_BLUE(DMA2D_BG_InitStruct->DMA2D_BGC_BLUE));
  assert_param(IS_DMA2D_BGC_GREEN(DMA2D_BG_InitStruct->DMA2D_BGC_GREEN));
  assert_param(IS_DMA2D_BGC_RED(DMA2D_BG_InitStruct->DMA2D_BGC_RED));

  /* Configures the BG memory address */
  DMA2D->BGMAR = (DMA2D_BG_InitStruct->DMA2D_BGMA);
 8004672:	4a2d      	ldr	r2, [pc, #180]	; (8004728 <DMA2D_BGConfig+0xd6>)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	6153      	str	r3, [r2, #20]

  /* Configures the BG offset */
  DMA2D->BGOR &= ~(uint32_t)DMA2D_BGOR_LO;
 800467a:	4b2b      	ldr	r3, [pc, #172]	; (8004728 <DMA2D_BGConfig+0xd6>)
 800467c:	699b      	ldr	r3, [r3, #24]
 800467e:	4a2a      	ldr	r2, [pc, #168]	; (8004728 <DMA2D_BGConfig+0xd6>)
 8004680:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8004684:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004688:	6193      	str	r3, [r2, #24]
  DMA2D->BGOR |= (DMA2D_BG_InitStruct->DMA2D_BGO);
 800468a:	4b27      	ldr	r3, [pc, #156]	; (8004728 <DMA2D_BGConfig+0xd6>)
 800468c:	699a      	ldr	r2, [r3, #24]
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	685b      	ldr	r3, [r3, #4]
 8004692:	4925      	ldr	r1, [pc, #148]	; (8004728 <DMA2D_BGConfig+0xd6>)
 8004694:	4313      	orrs	r3, r2
 8004696:	618b      	str	r3, [r1, #24]

  /* Configures background Pixel Format Convertor */
  DMA2D->BGPFCCR &= (uint32_t)PFCCR_MASK;
 8004698:	4b23      	ldr	r3, [pc, #140]	; (8004728 <DMA2D_BGConfig+0xd6>)
 800469a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800469c:	4922      	ldr	r1, [pc, #136]	; (8004728 <DMA2D_BGConfig+0xd6>)
 800469e:	4b23      	ldr	r3, [pc, #140]	; (800472c <DMA2D_BGConfig+0xda>)
 80046a0:	4013      	ands	r3, r2
 80046a2:	624b      	str	r3, [r1, #36]	; 0x24
  bg_clutcolormode = DMA2D_BG_InitStruct->DMA2D_BG_CLUT_CM << 4;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	68db      	ldr	r3, [r3, #12]
 80046a8:	011b      	lsls	r3, r3, #4
 80046aa:	61fb      	str	r3, [r7, #28]
  bg_clutsize = DMA2D_BG_InitStruct->DMA2D_BG_CLUT_SIZE << 8;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	691b      	ldr	r3, [r3, #16]
 80046b0:	021b      	lsls	r3, r3, #8
 80046b2:	61bb      	str	r3, [r7, #24]
  bg_alpha_mode = DMA2D_BG_InitStruct->DMA2D_BGPFC_ALPHA_MODE << 16;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	695b      	ldr	r3, [r3, #20]
 80046b8:	041b      	lsls	r3, r3, #16
 80046ba:	617b      	str	r3, [r7, #20]
  bg_alphavalue = DMA2D_BG_InitStruct->DMA2D_BGPFC_ALPHA_VALUE << 24;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	699b      	ldr	r3, [r3, #24]
 80046c0:	061b      	lsls	r3, r3, #24
 80046c2:	613b      	str	r3, [r7, #16]
  DMA2D->BGPFCCR |= (DMA2D_BG_InitStruct->DMA2D_BGCM | bg_clutcolormode | bg_clutsize | \
 80046c4:	4b18      	ldr	r3, [pc, #96]	; (8004728 <DMA2D_BGConfig+0xd6>)
 80046c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6899      	ldr	r1, [r3, #8]
 80046cc:	69fb      	ldr	r3, [r7, #28]
 80046ce:	4319      	orrs	r1, r3
 80046d0:	69bb      	ldr	r3, [r7, #24]
 80046d2:	4319      	orrs	r1, r3
 80046d4:	697b      	ldr	r3, [r7, #20]
 80046d6:	4319      	orrs	r1, r3
                    bg_alpha_mode | bg_alphavalue);
 80046d8:	693b      	ldr	r3, [r7, #16]
 80046da:	430b      	orrs	r3, r1
  DMA2D->BGPFCCR |= (DMA2D_BG_InitStruct->DMA2D_BGCM | bg_clutcolormode | bg_clutsize | \
 80046dc:	4912      	ldr	r1, [pc, #72]	; (8004728 <DMA2D_BGConfig+0xd6>)
 80046de:	4313      	orrs	r3, r2
 80046e0:	624b      	str	r3, [r1, #36]	; 0x24

  /* Configures background color */
  DMA2D->BGCOLR &= ~(DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | DMA2D_BGCOLR_RED);
 80046e2:	4b11      	ldr	r3, [pc, #68]	; (8004728 <DMA2D_BGConfig+0xd6>)
 80046e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046e6:	4a10      	ldr	r2, [pc, #64]	; (8004728 <DMA2D_BGConfig+0xd6>)
 80046e8:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80046ec:	6293      	str	r3, [r2, #40]	; 0x28
  bg_colorgreen = DMA2D_BG_InitStruct->DMA2D_BGC_GREEN << 8;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6a1b      	ldr	r3, [r3, #32]
 80046f2:	021b      	lsls	r3, r3, #8
 80046f4:	60fb      	str	r3, [r7, #12]
  bg_colorred = DMA2D_BG_InitStruct->DMA2D_BGC_RED << 16;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046fa:	041b      	lsls	r3, r3, #16
 80046fc:	60bb      	str	r3, [r7, #8]
  DMA2D->BGCOLR |= (DMA2D_BG_InitStruct->DMA2D_BGC_BLUE | bg_colorgreen | bg_colorred);
 80046fe:	4b0a      	ldr	r3, [pc, #40]	; (8004728 <DMA2D_BGConfig+0xd6>)
 8004700:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	69d9      	ldr	r1, [r3, #28]
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	4319      	orrs	r1, r3
 800470a:	68bb      	ldr	r3, [r7, #8]
 800470c:	430b      	orrs	r3, r1
 800470e:	4906      	ldr	r1, [pc, #24]	; (8004728 <DMA2D_BGConfig+0xd6>)
 8004710:	4313      	orrs	r3, r2
 8004712:	628b      	str	r3, [r1, #40]	; 0x28
  
  /* Configures background CLUT memory address */
  DMA2D->BGCMAR = DMA2D_BG_InitStruct->DMA2D_BGCMAR;
 8004714:	4a04      	ldr	r2, [pc, #16]	; (8004728 <DMA2D_BGConfig+0xd6>)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800471a:	6313      	str	r3, [r2, #48]	; 0x30

}
 800471c:	bf00      	nop
 800471e:	3724      	adds	r7, #36	; 0x24
 8004720:	46bd      	mov	sp, r7
 8004722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004726:	4770      	bx	lr
 8004728:	4002b000 	.word	0x4002b000
 800472c:	00fc00c0 	.word	0x00fc00c0

08004730 <DMA2D_BG_StructInit>:
  * @param  DMA2D_BGStruct: pointer to a DMA2D_BGTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void DMA2D_BG_StructInit(DMA2D_BG_InitTypeDef* DMA2D_BG_InitStruct)
{
 8004730:	b480      	push	{r7}
 8004732:	b083      	sub	sp, #12
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
  /*!< Initialize the DMA2D background memory address */
  DMA2D_BG_InitStruct->DMA2D_BGMA = 0x00;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2200      	movs	r2, #0
 800473c:	601a      	str	r2, [r3, #0]

  /*!< Initialize the DMA2D background offset */
  DMA2D_BG_InitStruct->DMA2D_BGO = 0x00;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	2200      	movs	r2, #0
 8004742:	605a      	str	r2, [r3, #4]

  /*!< Initialize the DMA2D background color mode */
  DMA2D_BG_InitStruct->DMA2D_BGCM = CM_ARGB8888;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2200      	movs	r2, #0
 8004748:	609a      	str	r2, [r3, #8]

  /*!< Initialize the DMA2D background CLUT color mode */
  DMA2D_BG_InitStruct->DMA2D_BG_CLUT_CM = CLUT_CM_ARGB8888;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2200      	movs	r2, #0
 800474e:	60da      	str	r2, [r3, #12]

  /*!< Initialize the DMA2D background CLUT size */
  DMA2D_BG_InitStruct->DMA2D_BG_CLUT_SIZE = 0x00;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2200      	movs	r2, #0
 8004754:	611a      	str	r2, [r3, #16]

  /*!< Initialize the DMA2D background alpha mode */
  DMA2D_BG_InitStruct->DMA2D_BGPFC_ALPHA_MODE = NO_MODIF_ALPHA_VALUE;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2200      	movs	r2, #0
 800475a:	615a      	str	r2, [r3, #20]

  /*!< Initialize the DMA2D background alpha value */
  DMA2D_BG_InitStruct->DMA2D_BGPFC_ALPHA_VALUE = 0x00;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2200      	movs	r2, #0
 8004760:	619a      	str	r2, [r3, #24]

  /*!< Initialize the DMA2D background blue value */
  DMA2D_BG_InitStruct->DMA2D_BGC_BLUE = 0x00;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2200      	movs	r2, #0
 8004766:	61da      	str	r2, [r3, #28]

  /*!< Initialize the DMA2D background green value */
  DMA2D_BG_InitStruct->DMA2D_BGC_GREEN = 0x00;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2200      	movs	r2, #0
 800476c:	621a      	str	r2, [r3, #32]

  /*!< Initialize the DMA2D background red value */
  DMA2D_BG_InitStruct->DMA2D_BGC_RED = 0x00;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2200      	movs	r2, #0
 8004772:	625a      	str	r2, [r3, #36]	; 0x24

  /*!< Initialize the DMA2D background CLUT memory address */
  DMA2D_BG_InitStruct->DMA2D_BGCMAR = 0x00;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2200      	movs	r2, #0
 8004778:	629a      	str	r2, [r3, #40]	; 0x28
}
 800477a:	bf00      	nop
 800477c:	370c      	adds	r7, #12
 800477e:	46bd      	mov	sp, r7
 8004780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004784:	4770      	bx	lr

08004786 <DMA2D_FGStart>:
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */

void DMA2D_FGStart(FunctionalState NewState) 
{
 8004786:	b480      	push	{r7}
 8004788:	b083      	sub	sp, #12
 800478a:	af00      	add	r7, sp, #0
 800478c:	4603      	mov	r3, r0
 800478e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8004790:	79fb      	ldrb	r3, [r7, #7]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d006      	beq.n	80047a4 <DMA2D_FGStart+0x1e>
  {
    /* Start the automatic loading of the CLUT */
    DMA2D->FGPFCCR |= DMA2D_FGPFCCR_START;
 8004796:	4b09      	ldr	r3, [pc, #36]	; (80047bc <DMA2D_FGStart+0x36>)
 8004798:	69db      	ldr	r3, [r3, #28]
 800479a:	4a08      	ldr	r2, [pc, #32]	; (80047bc <DMA2D_FGStart+0x36>)
 800479c:	f043 0320 	orr.w	r3, r3, #32
 80047a0:	61d3      	str	r3, [r2, #28]
  else
  {
    /* abort the transfer */
    DMA2D->FGPFCCR &= (uint32_t)~DMA2D_FGPFCCR_START;
  }
}
 80047a2:	e005      	b.n	80047b0 <DMA2D_FGStart+0x2a>
    DMA2D->FGPFCCR &= (uint32_t)~DMA2D_FGPFCCR_START;
 80047a4:	4b05      	ldr	r3, [pc, #20]	; (80047bc <DMA2D_FGStart+0x36>)
 80047a6:	69db      	ldr	r3, [r3, #28]
 80047a8:	4a04      	ldr	r2, [pc, #16]	; (80047bc <DMA2D_FGStart+0x36>)
 80047aa:	f023 0320 	bic.w	r3, r3, #32
 80047ae:	61d3      	str	r3, [r2, #28]
}
 80047b0:	bf00      	nop
 80047b2:	370c      	adds	r7, #12
 80047b4:	46bd      	mov	sp, r7
 80047b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ba:	4770      	bx	lr
 80047bc:	4002b000 	.word	0x4002b000

080047c0 <DMA2D_BGStart>:
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
  
void DMA2D_BGStart(FunctionalState NewState) 
{
 80047c0:	b480      	push	{r7}
 80047c2:	b083      	sub	sp, #12
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	4603      	mov	r3, r0
 80047c8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80047ca:	79fb      	ldrb	r3, [r7, #7]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d006      	beq.n	80047de <DMA2D_BGStart+0x1e>
  {
    /* Start the automatic loading of the CLUT */
    DMA2D->BGPFCCR |= DMA2D_BGPFCCR_START;
 80047d0:	4b09      	ldr	r3, [pc, #36]	; (80047f8 <DMA2D_BGStart+0x38>)
 80047d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047d4:	4a08      	ldr	r2, [pc, #32]	; (80047f8 <DMA2D_BGStart+0x38>)
 80047d6:	f043 0320 	orr.w	r3, r3, #32
 80047da:	6253      	str	r3, [r2, #36]	; 0x24
  else
  {
    /* abort the transfer */
    DMA2D->BGPFCCR &= (uint32_t)~DMA2D_BGPFCCR_START;
  }
}
 80047dc:	e005      	b.n	80047ea <DMA2D_BGStart+0x2a>
    DMA2D->BGPFCCR &= (uint32_t)~DMA2D_BGPFCCR_START;
 80047de:	4b06      	ldr	r3, [pc, #24]	; (80047f8 <DMA2D_BGStart+0x38>)
 80047e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047e2:	4a05      	ldr	r2, [pc, #20]	; (80047f8 <DMA2D_BGStart+0x38>)
 80047e4:	f023 0320 	bic.w	r3, r3, #32
 80047e8:	6253      	str	r3, [r2, #36]	; 0x24
}
 80047ea:	bf00      	nop
 80047ec:	370c      	adds	r7, #12
 80047ee:	46bd      	mov	sp, r7
 80047f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f4:	4770      	bx	lr
 80047f6:	bf00      	nop
 80047f8:	4002b000 	.word	0x4002b000

080047fc <DMA2D_DeadTimeConfig>:
  * @param  DMA2D_DeadTime: specifies the DMA2D dead time.
  *   This parameter can be one of the following values:
  * @retval None
  */
void DMA2D_DeadTimeConfig(uint32_t DMA2D_DeadTime, FunctionalState NewState)
{
 80047fc:	b480      	push	{r7}
 80047fe:	b085      	sub	sp, #20
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
 8004804:	460b      	mov	r3, r1
 8004806:	70fb      	strb	r3, [r7, #3]

  /* Check the parameters */
  assert_param(IS_DMA2D_DEAD_TIME(DMA2D_DeadTime));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8004808:	78fb      	ldrb	r3, [r7, #3]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d013      	beq.n	8004836 <DMA2D_DeadTimeConfig+0x3a>
  {
    /* Enable and Configures the dead time */
    DMA2D->AMTCR &= (uint32_t)DEAD_MASK;
 800480e:	4b10      	ldr	r3, [pc, #64]	; (8004850 <DMA2D_DeadTimeConfig+0x54>)
 8004810:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004812:	4a0f      	ldr	r2, [pc, #60]	; (8004850 <DMA2D_DeadTimeConfig+0x54>)
 8004814:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004818:	f023 0301 	bic.w	r3, r3, #1
 800481c:	64d3      	str	r3, [r2, #76]	; 0x4c
    DeadTime = DMA2D_DeadTime << 8;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	021b      	lsls	r3, r3, #8
 8004822:	60fb      	str	r3, [r7, #12]
    DMA2D->AMTCR |= (DeadTime | DMA2D_AMTCR_EN);
 8004824:	4b0a      	ldr	r3, [pc, #40]	; (8004850 <DMA2D_DeadTimeConfig+0x54>)
 8004826:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	4313      	orrs	r3, r2
 800482c:	4a08      	ldr	r2, [pc, #32]	; (8004850 <DMA2D_DeadTimeConfig+0x54>)
 800482e:	f043 0301 	orr.w	r3, r3, #1
 8004832:	64d3      	str	r3, [r2, #76]	; 0x4c
  }
  else
  {
     DMA2D->AMTCR &= ~(uint32_t)DMA2D_AMTCR_EN;
  }
}
 8004834:	e005      	b.n	8004842 <DMA2D_DeadTimeConfig+0x46>
     DMA2D->AMTCR &= ~(uint32_t)DMA2D_AMTCR_EN;
 8004836:	4b06      	ldr	r3, [pc, #24]	; (8004850 <DMA2D_DeadTimeConfig+0x54>)
 8004838:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800483a:	4a05      	ldr	r2, [pc, #20]	; (8004850 <DMA2D_DeadTimeConfig+0x54>)
 800483c:	f023 0301 	bic.w	r3, r3, #1
 8004840:	64d3      	str	r3, [r2, #76]	; 0x4c
}
 8004842:	bf00      	nop
 8004844:	3714      	adds	r7, #20
 8004846:	46bd      	mov	sp, r7
 8004848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484c:	4770      	bx	lr
 800484e:	bf00      	nop
 8004850:	4002b000 	.word	0x4002b000

08004854 <DMA2D_LineWatermarkConfig>:
  * @param  DMA2D_LWatermarkConfig: Line Watermark configuration.
  * @retval None
  */

void DMA2D_LineWatermarkConfig(uint32_t DMA2D_LWatermarkConfig)
{
 8004854:	b480      	push	{r7}
 8004856:	b083      	sub	sp, #12
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA2D_LineWatermark(DMA2D_LWatermarkConfig));

  /* Sets the Line watermark configuration */
  DMA2D->LWR = (uint32_t)DMA2D_LWatermarkConfig;
 800485c:	4a04      	ldr	r2, [pc, #16]	; (8004870 <DMA2D_LineWatermarkConfig+0x1c>)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6493      	str	r3, [r2, #72]	; 0x48
}
 8004862:	bf00      	nop
 8004864:	370c      	adds	r7, #12
 8004866:	46bd      	mov	sp, r7
 8004868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486c:	4770      	bx	lr
 800486e:	bf00      	nop
 8004870:	4002b000 	.word	0x4002b000

08004874 <DMA2D_ITConfig>:
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */

void DMA2D_ITConfig(uint32_t DMA2D_IT, FunctionalState NewState)
{
 8004874:	b480      	push	{r7}
 8004876:	b083      	sub	sp, #12
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
 800487c:	460b      	mov	r3, r1
 800487e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA2D_IT(DMA2D_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8004880:	78fb      	ldrb	r3, [r7, #3]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d006      	beq.n	8004894 <DMA2D_ITConfig+0x20>
  {
    /* Enable the selected DMA2D interrupts */
    DMA2D->CR |= DMA2D_IT;
 8004886:	4b0a      	ldr	r3, [pc, #40]	; (80048b0 <DMA2D_ITConfig+0x3c>)
 8004888:	681a      	ldr	r2, [r3, #0]
 800488a:	4909      	ldr	r1, [pc, #36]	; (80048b0 <DMA2D_ITConfig+0x3c>)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	4313      	orrs	r3, r2
 8004890:	600b      	str	r3, [r1, #0]
  else
  {
    /* Disable the selected DMA2D interrupts */
    DMA2D->CR &= (uint32_t)~DMA2D_IT;
  }
}
 8004892:	e006      	b.n	80048a2 <DMA2D_ITConfig+0x2e>
    DMA2D->CR &= (uint32_t)~DMA2D_IT;
 8004894:	4b06      	ldr	r3, [pc, #24]	; (80048b0 <DMA2D_ITConfig+0x3c>)
 8004896:	681a      	ldr	r2, [r3, #0]
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	43db      	mvns	r3, r3
 800489c:	4904      	ldr	r1, [pc, #16]	; (80048b0 <DMA2D_ITConfig+0x3c>)
 800489e:	4013      	ands	r3, r2
 80048a0:	600b      	str	r3, [r1, #0]
}
 80048a2:	bf00      	nop
 80048a4:	370c      	adds	r7, #12
 80048a6:	46bd      	mov	sp, r7
 80048a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ac:	4770      	bx	lr
 80048ae:	bf00      	nop
 80048b0:	4002b000 	.word	0x4002b000

080048b4 <DMA2D_GetFlagStatus>:
  *     @arg DMA2D_FLAG_TE:   Transfer Error interrupt flag.
  * @retval The new state of DMA2D_FLAG (SET or RESET).
  */

FlagStatus DMA2D_GetFlagStatus(uint32_t DMA2D_FLAG)
{
 80048b4:	b480      	push	{r7}
 80048b6:	b085      	sub	sp, #20
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 80048bc:	2300      	movs	r3, #0
 80048be:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_DMA2D_GET_FLAG(DMA2D_FLAG));
  
  /* Check the status of the specified DMA2D flag */
  if (((DMA2D->ISR) & DMA2D_FLAG) != (uint32_t)RESET)
 80048c0:	4b08      	ldr	r3, [pc, #32]	; (80048e4 <DMA2D_GetFlagStatus+0x30>)
 80048c2:	685a      	ldr	r2, [r3, #4]
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	4013      	ands	r3, r2
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d002      	beq.n	80048d2 <DMA2D_GetFlagStatus+0x1e>
  {
    /* DMA2D_FLAG is set */
    bitstatus = SET;
 80048cc:	2301      	movs	r3, #1
 80048ce:	73fb      	strb	r3, [r7, #15]
 80048d0:	e001      	b.n	80048d6 <DMA2D_GetFlagStatus+0x22>
  }
  else
  {
    /* DMA2D_FLAG is reset */
    bitstatus = RESET;
 80048d2:	2300      	movs	r3, #0
 80048d4:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the DMA2D_FLAG status */
  return bitstatus;
 80048d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80048d8:	4618      	mov	r0, r3
 80048da:	3714      	adds	r7, #20
 80048dc:	46bd      	mov	sp, r7
 80048de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e2:	4770      	bx	lr
 80048e4:	4002b000 	.word	0x4002b000

080048e8 <DMA2D_ClearFlag>:
  *     @arg DMA2D_FLAG_TC:   Transfer Complete interrupt flag.
  *     @arg DMA2D_FLAG_TE:   Transfer Error interrupt flag.
  * @retval None
  */
void DMA2D_ClearFlag(uint32_t DMA2D_FLAG)
{
 80048e8:	b480      	push	{r7}
 80048ea:	b083      	sub	sp, #12
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA2D_GET_FLAG(DMA2D_FLAG));
    
  /* Clear the corresponding DMA2D flag */
  DMA2D->IFCR = (uint32_t)DMA2D_FLAG;
 80048f0:	4a04      	ldr	r2, [pc, #16]	; (8004904 <DMA2D_ClearFlag+0x1c>)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6093      	str	r3, [r2, #8]
}
 80048f6:	bf00      	nop
 80048f8:	370c      	adds	r7, #12
 80048fa:	46bd      	mov	sp, r7
 80048fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004900:	4770      	bx	lr
 8004902:	bf00      	nop
 8004904:	4002b000 	.word	0x4002b000

08004908 <DMA2D_GetITStatus>:
  *     @arg DMA2D_IT_TC:   Transfer Complete interrupt enable.
  *     @arg DMA2D_IT_TE:   Transfer Error interrupt enable.
  * @retval The new state of the DMA2D_IT (SET or RESET).
  */
ITStatus DMA2D_GetITStatus(uint32_t DMA2D_IT)
{
 8004908:	b480      	push	{r7}
 800490a:	b085      	sub	sp, #20
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
 8004910:	2300      	movs	r3, #0
 8004912:	73fb      	strb	r3, [r7, #15]
  uint32_t DMA2D_IT_FLAG = DMA2D_IT >> 8;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	0a1b      	lsrs	r3, r3, #8
 8004918:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_DMA2D_IT(DMA2D_IT));

  if ((DMA2D->ISR & DMA2D_IT_FLAG) != (uint32_t)RESET)
 800491a:	4b10      	ldr	r3, [pc, #64]	; (800495c <DMA2D_GetITStatus+0x54>)
 800491c:	685a      	ldr	r2, [r3, #4]
 800491e:	68bb      	ldr	r3, [r7, #8]
 8004920:	4013      	ands	r3, r2
 8004922:	2b00      	cmp	r3, #0
 8004924:	d002      	beq.n	800492c <DMA2D_GetITStatus+0x24>
  {
    bitstatus = SET;
 8004926:	2301      	movs	r3, #1
 8004928:	73fb      	strb	r3, [r7, #15]
 800492a:	e001      	b.n	8004930 <DMA2D_GetITStatus+0x28>
  }
  else
  {
    bitstatus = RESET;
 800492c:	2300      	movs	r3, #0
 800492e:	73fb      	strb	r3, [r7, #15]
  }
  
  if (((DMA2D->CR & DMA2D_IT) != (uint32_t)RESET) && (bitstatus != (uint32_t)RESET))
 8004930:	4b0a      	ldr	r3, [pc, #40]	; (800495c <DMA2D_GetITStatus+0x54>)
 8004932:	681a      	ldr	r2, [r3, #0]
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	4013      	ands	r3, r2
 8004938:	2b00      	cmp	r3, #0
 800493a:	d005      	beq.n	8004948 <DMA2D_GetITStatus+0x40>
 800493c:	7bfb      	ldrb	r3, [r7, #15]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d002      	beq.n	8004948 <DMA2D_GetITStatus+0x40>
  {
    bitstatus = SET;
 8004942:	2301      	movs	r3, #1
 8004944:	73fb      	strb	r3, [r7, #15]
 8004946:	e001      	b.n	800494c <DMA2D_GetITStatus+0x44>
  }
  else
  {
    bitstatus = RESET;
 8004948:	2300      	movs	r3, #0
 800494a:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800494c:	7bfb      	ldrb	r3, [r7, #15]
}
 800494e:	4618      	mov	r0, r3
 8004950:	3714      	adds	r7, #20
 8004952:	46bd      	mov	sp, r7
 8004954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004958:	4770      	bx	lr
 800495a:	bf00      	nop
 800495c:	4002b000 	.word	0x4002b000

08004960 <DMA2D_ClearITPendingBit>:
  *     @arg DMA2D_IT_TC:   Transfer Complete interrupt.
  *     @arg DMA2D_IT_TE:   Transfer Error interrupt.
  * @retval None
  */
void DMA2D_ClearITPendingBit(uint32_t DMA2D_IT)
{
 8004960:	b480      	push	{r7}
 8004962:	b083      	sub	sp, #12
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA2D_IT(DMA2D_IT));
  DMA2D_IT = DMA2D_IT >> 8;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	0a1b      	lsrs	r3, r3, #8
 800496c:	607b      	str	r3, [r7, #4]
    
  /* Clear the corresponding DMA2D Interrupt */
  DMA2D->IFCR = (uint32_t)DMA2D_IT;
 800496e:	4a04      	ldr	r2, [pc, #16]	; (8004980 <DMA2D_ClearITPendingBit+0x20>)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6093      	str	r3, [r2, #8]
}
 8004974:	bf00      	nop
 8004976:	370c      	adds	r7, #12
 8004978:	46bd      	mov	sp, r7
 800497a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497e:	4770      	bx	lr
 8004980:	4002b000 	.word	0x4002b000

08004984 <EXTI_DeInit>:
  * @brief  Deinitializes the EXTI peripheral registers to their default reset values.
  * @param  None
  * @retval None
  */
void EXTI_DeInit(void)
{
 8004984:	b480      	push	{r7}
 8004986:	af00      	add	r7, sp, #0
  EXTI->IMR = 0x00000000;
 8004988:	4b09      	ldr	r3, [pc, #36]	; (80049b0 <EXTI_DeInit+0x2c>)
 800498a:	2200      	movs	r2, #0
 800498c:	601a      	str	r2, [r3, #0]
  EXTI->EMR = 0x00000000;
 800498e:	4b08      	ldr	r3, [pc, #32]	; (80049b0 <EXTI_DeInit+0x2c>)
 8004990:	2200      	movs	r2, #0
 8004992:	605a      	str	r2, [r3, #4]
  EXTI->RTSR = 0x00000000;
 8004994:	4b06      	ldr	r3, [pc, #24]	; (80049b0 <EXTI_DeInit+0x2c>)
 8004996:	2200      	movs	r2, #0
 8004998:	609a      	str	r2, [r3, #8]
  EXTI->FTSR = 0x00000000;
 800499a:	4b05      	ldr	r3, [pc, #20]	; (80049b0 <EXTI_DeInit+0x2c>)
 800499c:	2200      	movs	r2, #0
 800499e:	60da      	str	r2, [r3, #12]
  EXTI->PR = 0x007FFFFF;
 80049a0:	4b03      	ldr	r3, [pc, #12]	; (80049b0 <EXTI_DeInit+0x2c>)
 80049a2:	4a04      	ldr	r2, [pc, #16]	; (80049b4 <EXTI_DeInit+0x30>)
 80049a4:	615a      	str	r2, [r3, #20]
}
 80049a6:	bf00      	nop
 80049a8:	46bd      	mov	sp, r7
 80049aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ae:	4770      	bx	lr
 80049b0:	40013c00 	.word	0x40013c00
 80049b4:	007fffff 	.word	0x007fffff

080049b8 <EXTI_Init>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure
  *         that contains the configuration information for the EXTI peripheral.
  * @retval None
  */
void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
{
 80049b8:	b480      	push	{r7}
 80049ba:	b085      	sub	sp, #20
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
 80049c0:	2300      	movs	r3, #0
 80049c2:	60fb      	str	r3, [r7, #12]
  assert_param(IS_EXTI_MODE(EXTI_InitStruct->EXTI_Mode));
  assert_param(IS_EXTI_TRIGGER(EXTI_InitStruct->EXTI_Trigger));
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));  
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
 80049c4:	4b34      	ldr	r3, [pc, #208]	; (8004a98 <EXTI_Init+0xe0>)
 80049c6:	60fb      	str	r3, [r7, #12]
     
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	799b      	ldrb	r3, [r3, #6]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d04f      	beq.n	8004a70 <EXTI_Init+0xb8>
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
 80049d0:	4b31      	ldr	r3, [pc, #196]	; (8004a98 <EXTI_Init+0xe0>)
 80049d2:	681a      	ldr	r2, [r3, #0]
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	43db      	mvns	r3, r3
 80049da:	492f      	ldr	r1, [pc, #188]	; (8004a98 <EXTI_Init+0xe0>)
 80049dc:	4013      	ands	r3, r2
 80049de:	600b      	str	r3, [r1, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
 80049e0:	4b2d      	ldr	r3, [pc, #180]	; (8004a98 <EXTI_Init+0xe0>)
 80049e2:	685a      	ldr	r2, [r3, #4]
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	43db      	mvns	r3, r3
 80049ea:	492b      	ldr	r1, [pc, #172]	; (8004a98 <EXTI_Init+0xe0>)
 80049ec:	4013      	ands	r3, r2
 80049ee:	604b      	str	r3, [r1, #4]
    
    tmp += EXTI_InitStruct->EXTI_Mode;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	791b      	ldrb	r3, [r3, #4]
 80049f4:	461a      	mov	r2, r3
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	4413      	add	r3, r2
 80049fa:	60fb      	str	r3, [r7, #12]

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	6819      	ldr	r1, [r3, #0]
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681a      	ldr	r2, [r3, #0]
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	430a      	orrs	r2, r1
 8004a08:	601a      	str	r2, [r3, #0]

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
 8004a0a:	4b23      	ldr	r3, [pc, #140]	; (8004a98 <EXTI_Init+0xe0>)
 8004a0c:	689a      	ldr	r2, [r3, #8]
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	43db      	mvns	r3, r3
 8004a14:	4920      	ldr	r1, [pc, #128]	; (8004a98 <EXTI_Init+0xe0>)
 8004a16:	4013      	ands	r3, r2
 8004a18:	608b      	str	r3, [r1, #8]
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
 8004a1a:	4b1f      	ldr	r3, [pc, #124]	; (8004a98 <EXTI_Init+0xe0>)
 8004a1c:	68da      	ldr	r2, [r3, #12]
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	43db      	mvns	r3, r3
 8004a24:	491c      	ldr	r1, [pc, #112]	; (8004a98 <EXTI_Init+0xe0>)
 8004a26:	4013      	ands	r3, r2
 8004a28:	60cb      	str	r3, [r1, #12]
    
    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	795b      	ldrb	r3, [r3, #5]
 8004a2e:	2b10      	cmp	r3, #16
 8004a30:	d10e      	bne.n	8004a50 <EXTI_Init+0x98>
    {
      /* Rising Falling edge */
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
 8004a32:	4b19      	ldr	r3, [pc, #100]	; (8004a98 <EXTI_Init+0xe0>)
 8004a34:	689a      	ldr	r2, [r3, #8]
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	4917      	ldr	r1, [pc, #92]	; (8004a98 <EXTI_Init+0xe0>)
 8004a3c:	4313      	orrs	r3, r2
 8004a3e:	608b      	str	r3, [r1, #8]
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
 8004a40:	4b15      	ldr	r3, [pc, #84]	; (8004a98 <EXTI_Init+0xe0>)
 8004a42:	68da      	ldr	r2, [r3, #12]
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	4913      	ldr	r1, [pc, #76]	; (8004a98 <EXTI_Init+0xe0>)
 8004a4a:	4313      	orrs	r3, r2
 8004a4c:	60cb      	str	r3, [r1, #12]
    tmp += EXTI_InitStruct->EXTI_Mode;

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
  }
}
 8004a4e:	e01d      	b.n	8004a8c <EXTI_Init+0xd4>
      tmp = (uint32_t)EXTI_BASE;
 8004a50:	4b11      	ldr	r3, [pc, #68]	; (8004a98 <EXTI_Init+0xe0>)
 8004a52:	60fb      	str	r3, [r7, #12]
      tmp += EXTI_InitStruct->EXTI_Trigger;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	795b      	ldrb	r3, [r3, #5]
 8004a58:	461a      	mov	r2, r3
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	4413      	add	r3, r2
 8004a5e:	60fb      	str	r3, [r7, #12]
      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	6819      	ldr	r1, [r3, #0]
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681a      	ldr	r2, [r3, #0]
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	430a      	orrs	r2, r1
 8004a6c:	601a      	str	r2, [r3, #0]
}
 8004a6e:	e00d      	b.n	8004a8c <EXTI_Init+0xd4>
    tmp += EXTI_InitStruct->EXTI_Mode;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	791b      	ldrb	r3, [r3, #4]
 8004a74:	461a      	mov	r2, r3
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	4413      	add	r3, r2
 8004a7a:	60fb      	str	r3, [r7, #12]
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	6819      	ldr	r1, [r3, #0]
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	43da      	mvns	r2, r3
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	400a      	ands	r2, r1
 8004a8a:	601a      	str	r2, [r3, #0]
}
 8004a8c:	bf00      	nop
 8004a8e:	3714      	adds	r7, #20
 8004a90:	46bd      	mov	sp, r7
 8004a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a96:	4770      	bx	lr
 8004a98:	40013c00 	.word	0x40013c00

08004a9c <EXTI_StructInit>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void EXTI_StructInit(EXTI_InitTypeDef* EXTI_InitStruct)
{
 8004a9c:	b480      	push	{r7}
 8004a9e:	b083      	sub	sp, #12
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
  EXTI_InitStruct->EXTI_Line = EXTI_LINENONE;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	601a      	str	r2, [r3, #0]
  EXTI_InitStruct->EXTI_Mode = EXTI_Mode_Interrupt;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2200      	movs	r2, #0
 8004aae:	711a      	strb	r2, [r3, #4]
  EXTI_InitStruct->EXTI_Trigger = EXTI_Trigger_Falling;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	220c      	movs	r2, #12
 8004ab4:	715a      	strb	r2, [r3, #5]
  EXTI_InitStruct->EXTI_LineCmd = DISABLE;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2200      	movs	r2, #0
 8004aba:	719a      	strb	r2, [r3, #6]
}
 8004abc:	bf00      	nop
 8004abe:	370c      	adds	r7, #12
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac6:	4770      	bx	lr

08004ac8 <EXTI_GenerateSWInterrupt>:
  *         will be generated.
  *         This parameter can be any combination of EXTI_Linex where x can be (0..22)
  * @retval None
  */
void EXTI_GenerateSWInterrupt(uint32_t EXTI_Line)
{
 8004ac8:	b480      	push	{r7}
 8004aca:	b083      	sub	sp, #12
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->SWIER |= EXTI_Line;
 8004ad0:	4b05      	ldr	r3, [pc, #20]	; (8004ae8 <EXTI_GenerateSWInterrupt+0x20>)
 8004ad2:	691a      	ldr	r2, [r3, #16]
 8004ad4:	4904      	ldr	r1, [pc, #16]	; (8004ae8 <EXTI_GenerateSWInterrupt+0x20>)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	4313      	orrs	r3, r2
 8004ada:	610b      	str	r3, [r1, #16]
}
 8004adc:	bf00      	nop
 8004ade:	370c      	adds	r7, #12
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae6:	4770      	bx	lr
 8004ae8:	40013c00 	.word	0x40013c00

08004aec <EXTI_GetFlagStatus>:
  * @param  EXTI_Line: specifies the EXTI line flag to check.
  *          This parameter can be EXTI_Linex where x can be(0..22)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
FlagStatus EXTI_GetFlagStatus(uint32_t EXTI_Line)
{
 8004aec:	b480      	push	{r7}
 8004aee:	b085      	sub	sp, #20
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 8004af4:	2300      	movs	r3, #0
 8004af6:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  if ((EXTI->PR & EXTI_Line) != (uint32_t)RESET)
 8004af8:	4b08      	ldr	r3, [pc, #32]	; (8004b1c <EXTI_GetFlagStatus+0x30>)
 8004afa:	695a      	ldr	r2, [r3, #20]
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	4013      	ands	r3, r2
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d002      	beq.n	8004b0a <EXTI_GetFlagStatus+0x1e>
  {
    bitstatus = SET;
 8004b04:	2301      	movs	r3, #1
 8004b06:	73fb      	strb	r3, [r7, #15]
 8004b08:	e001      	b.n	8004b0e <EXTI_GetFlagStatus+0x22>
  }
  else
  {
    bitstatus = RESET;
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004b0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b10:	4618      	mov	r0, r3
 8004b12:	3714      	adds	r7, #20
 8004b14:	46bd      	mov	sp, r7
 8004b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1a:	4770      	bx	lr
 8004b1c:	40013c00 	.word	0x40013c00

08004b20 <EXTI_ClearFlag>:
  * @param  EXTI_Line: specifies the EXTI lines flags to clear.
  *          This parameter can be any combination of EXTI_Linex where x can be (0..22)
  * @retval None
  */
void EXTI_ClearFlag(uint32_t EXTI_Line)
{
 8004b20:	b480      	push	{r7}
 8004b22:	b083      	sub	sp, #12
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 8004b28:	4a04      	ldr	r2, [pc, #16]	; (8004b3c <EXTI_ClearFlag+0x1c>)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6153      	str	r3, [r2, #20]
}
 8004b2e:	bf00      	nop
 8004b30:	370c      	adds	r7, #12
 8004b32:	46bd      	mov	sp, r7
 8004b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b38:	4770      	bx	lr
 8004b3a:	bf00      	nop
 8004b3c:	40013c00 	.word	0x40013c00

08004b40 <EXTI_GetITStatus>:
  * @param  EXTI_Line: specifies the EXTI line to check.
  *          This parameter can be EXTI_Linex where x can be(0..22)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITStatus(uint32_t EXTI_Line)
{
 8004b40:	b480      	push	{r7}
 8004b42:	b085      	sub	sp, #20
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 8004b48:	2300      	movs	r3, #0
 8004b4a:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  if ((EXTI->PR & EXTI_Line) != (uint32_t)RESET)
 8004b4c:	4b08      	ldr	r3, [pc, #32]	; (8004b70 <EXTI_GetITStatus+0x30>)
 8004b4e:	695a      	ldr	r2, [r3, #20]
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	4013      	ands	r3, r2
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d002      	beq.n	8004b5e <EXTI_GetITStatus+0x1e>
  {
    bitstatus = SET;
 8004b58:	2301      	movs	r3, #1
 8004b5a:	73fb      	strb	r3, [r7, #15]
 8004b5c:	e001      	b.n	8004b62 <EXTI_GetITStatus+0x22>
  }
  else
  {
    bitstatus = RESET;
 8004b5e:	2300      	movs	r3, #0
 8004b60:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004b62:	7bfb      	ldrb	r3, [r7, #15]
  
}
 8004b64:	4618      	mov	r0, r3
 8004b66:	3714      	adds	r7, #20
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6e:	4770      	bx	lr
 8004b70:	40013c00 	.word	0x40013c00

08004b74 <EXTI_ClearITPendingBit>:
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *          This parameter can be any combination of EXTI_Linex where x can be (0..22)
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
 8004b74:	b480      	push	{r7}
 8004b76:	b083      	sub	sp, #12
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 8004b7c:	4a04      	ldr	r2, [pc, #16]	; (8004b90 <EXTI_ClearITPendingBit+0x1c>)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6153      	str	r3, [r2, #20]
}
 8004b82:	bf00      	nop
 8004b84:	370c      	adds	r7, #12
 8004b86:	46bd      	mov	sp, r7
 8004b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8c:	4770      	bx	lr
 8004b8e:	bf00      	nop
 8004b90:	40013c00 	.word	0x40013c00

08004b94 <FLASH_SetLatency>:
  *       FLASH_Latency_0 and FLASH_Latency_15. 
  *         
  * @retval None
  */
void FLASH_SetLatency(uint32_t FLASH_Latency)
{
 8004b94:	b480      	push	{r7}
 8004b96:	b083      	sub	sp, #12
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_LATENCY(FLASH_Latency));
  
  /* Perform Byte access to FLASH_ACR[8:0] to set the Latency value */
  *(__IO uint8_t *)ACR_BYTE0_ADDRESS = (uint8_t)FLASH_Latency;
 8004b9c:	4b04      	ldr	r3, [pc, #16]	; (8004bb0 <FLASH_SetLatency+0x1c>)
 8004b9e:	687a      	ldr	r2, [r7, #4]
 8004ba0:	b2d2      	uxtb	r2, r2
 8004ba2:	701a      	strb	r2, [r3, #0]
}
 8004ba4:	bf00      	nop
 8004ba6:	370c      	adds	r7, #12
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bae:	4770      	bx	lr
 8004bb0:	40023c00 	.word	0x40023c00

08004bb4 <FLASH_PrefetchBufferCmd>:
  * @param  NewState: new state of the Prefetch Buffer.
  *          This parameter  can be: ENABLE or DISABLE.
  * @retval None
  */
void FLASH_PrefetchBufferCmd(FunctionalState NewState)
{
 8004bb4:	b480      	push	{r7}
 8004bb6:	b083      	sub	sp, #12
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	4603      	mov	r3, r0
 8004bbc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  /* Enable or disable the Prefetch Buffer */
  if(NewState != DISABLE)
 8004bbe:	79fb      	ldrb	r3, [r7, #7]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d006      	beq.n	8004bd2 <FLASH_PrefetchBufferCmd+0x1e>
  {
    FLASH->ACR |= FLASH_ACR_PRFTEN;
 8004bc4:	4b09      	ldr	r3, [pc, #36]	; (8004bec <FLASH_PrefetchBufferCmd+0x38>)
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	4a08      	ldr	r2, [pc, #32]	; (8004bec <FLASH_PrefetchBufferCmd+0x38>)
 8004bca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004bce:	6013      	str	r3, [r2, #0]
  }
  else
  {
    FLASH->ACR &= (~FLASH_ACR_PRFTEN);
  }
}
 8004bd0:	e005      	b.n	8004bde <FLASH_PrefetchBufferCmd+0x2a>
    FLASH->ACR &= (~FLASH_ACR_PRFTEN);
 8004bd2:	4b06      	ldr	r3, [pc, #24]	; (8004bec <FLASH_PrefetchBufferCmd+0x38>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	4a05      	ldr	r2, [pc, #20]	; (8004bec <FLASH_PrefetchBufferCmd+0x38>)
 8004bd8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004bdc:	6013      	str	r3, [r2, #0]
}
 8004bde:	bf00      	nop
 8004be0:	370c      	adds	r7, #12
 8004be2:	46bd      	mov	sp, r7
 8004be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be8:	4770      	bx	lr
 8004bea:	bf00      	nop
 8004bec:	40023c00 	.word	0x40023c00

08004bf0 <FLASH_InstructionCacheCmd>:
  * @param  NewState: new state of the Instruction Cache.
  *          This parameter  can be: ENABLE or DISABLE.
  * @retval None
  */
void FLASH_InstructionCacheCmd(FunctionalState NewState)
{
 8004bf0:	b480      	push	{r7}
 8004bf2:	b083      	sub	sp, #12
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	4603      	mov	r3, r0
 8004bf8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if(NewState != DISABLE)
 8004bfa:	79fb      	ldrb	r3, [r7, #7]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d006      	beq.n	8004c0e <FLASH_InstructionCacheCmd+0x1e>
  {
    FLASH->ACR |= FLASH_ACR_ICEN;
 8004c00:	4b09      	ldr	r3, [pc, #36]	; (8004c28 <FLASH_InstructionCacheCmd+0x38>)
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	4a08      	ldr	r2, [pc, #32]	; (8004c28 <FLASH_InstructionCacheCmd+0x38>)
 8004c06:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004c0a:	6013      	str	r3, [r2, #0]
  }
  else
  {
    FLASH->ACR &= (~FLASH_ACR_ICEN);
  }
}
 8004c0c:	e005      	b.n	8004c1a <FLASH_InstructionCacheCmd+0x2a>
    FLASH->ACR &= (~FLASH_ACR_ICEN);
 8004c0e:	4b06      	ldr	r3, [pc, #24]	; (8004c28 <FLASH_InstructionCacheCmd+0x38>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	4a05      	ldr	r2, [pc, #20]	; (8004c28 <FLASH_InstructionCacheCmd+0x38>)
 8004c14:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004c18:	6013      	str	r3, [r2, #0]
}
 8004c1a:	bf00      	nop
 8004c1c:	370c      	adds	r7, #12
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c24:	4770      	bx	lr
 8004c26:	bf00      	nop
 8004c28:	40023c00 	.word	0x40023c00

08004c2c <FLASH_DataCacheCmd>:
  * @param  NewState: new state of the Data Cache.
  *          This parameter  can be: ENABLE or DISABLE.
  * @retval None
  */
void FLASH_DataCacheCmd(FunctionalState NewState)
{
 8004c2c:	b480      	push	{r7}
 8004c2e:	b083      	sub	sp, #12
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	4603      	mov	r3, r0
 8004c34:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if(NewState != DISABLE)
 8004c36:	79fb      	ldrb	r3, [r7, #7]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d006      	beq.n	8004c4a <FLASH_DataCacheCmd+0x1e>
  {
    FLASH->ACR |= FLASH_ACR_DCEN;
 8004c3c:	4b09      	ldr	r3, [pc, #36]	; (8004c64 <FLASH_DataCacheCmd+0x38>)
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	4a08      	ldr	r2, [pc, #32]	; (8004c64 <FLASH_DataCacheCmd+0x38>)
 8004c42:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004c46:	6013      	str	r3, [r2, #0]
  }
  else
  {
    FLASH->ACR &= (~FLASH_ACR_DCEN);
  }
}
 8004c48:	e005      	b.n	8004c56 <FLASH_DataCacheCmd+0x2a>
    FLASH->ACR &= (~FLASH_ACR_DCEN);
 8004c4a:	4b06      	ldr	r3, [pc, #24]	; (8004c64 <FLASH_DataCacheCmd+0x38>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	4a05      	ldr	r2, [pc, #20]	; (8004c64 <FLASH_DataCacheCmd+0x38>)
 8004c50:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004c54:	6013      	str	r3, [r2, #0]
}
 8004c56:	bf00      	nop
 8004c58:	370c      	adds	r7, #12
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c60:	4770      	bx	lr
 8004c62:	bf00      	nop
 8004c64:	40023c00 	.word	0x40023c00

08004c68 <FLASH_InstructionCacheReset>:
  * @note   This function must be used only when the Instruction Cache is disabled.  
  * @param  None
  * @retval None
  */
void FLASH_InstructionCacheReset(void)
{
 8004c68:	b480      	push	{r7}
 8004c6a:	af00      	add	r7, sp, #0
  FLASH->ACR |= FLASH_ACR_ICRST;
 8004c6c:	4b05      	ldr	r3, [pc, #20]	; (8004c84 <FLASH_InstructionCacheReset+0x1c>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	4a04      	ldr	r2, [pc, #16]	; (8004c84 <FLASH_InstructionCacheReset+0x1c>)
 8004c72:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004c76:	6013      	str	r3, [r2, #0]
}
 8004c78:	bf00      	nop
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c80:	4770      	bx	lr
 8004c82:	bf00      	nop
 8004c84:	40023c00 	.word	0x40023c00

08004c88 <FLASH_DataCacheReset>:
  * @note   This function must be used only when the Data Cache is disabled.  
  * @param  None
  * @retval None
  */
void FLASH_DataCacheReset(void)
{
 8004c88:	b480      	push	{r7}
 8004c8a:	af00      	add	r7, sp, #0
  FLASH->ACR |= FLASH_ACR_DCRST;
 8004c8c:	4b05      	ldr	r3, [pc, #20]	; (8004ca4 <FLASH_DataCacheReset+0x1c>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	4a04      	ldr	r2, [pc, #16]	; (8004ca4 <FLASH_DataCacheReset+0x1c>)
 8004c92:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004c96:	6013      	str	r3, [r2, #0]
}
 8004c98:	bf00      	nop
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca0:	4770      	bx	lr
 8004ca2:	bf00      	nop
 8004ca4:	40023c00 	.word	0x40023c00

08004ca8 <FLASH_Unlock>:
  * @brief  Unlocks the FLASH control register access
  * @param  None
  * @retval None
  */
void FLASH_Unlock(void)
{
 8004ca8:	b480      	push	{r7}
 8004caa:	af00      	add	r7, sp, #0
  if((FLASH->CR & FLASH_CR_LOCK) != RESET)
 8004cac:	4b07      	ldr	r3, [pc, #28]	; (8004ccc <FLASH_Unlock+0x24>)
 8004cae:	691b      	ldr	r3, [r3, #16]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	da05      	bge.n	8004cc0 <FLASH_Unlock+0x18>
  {
    /* Authorize the FLASH Registers access */
    FLASH->KEYR = FLASH_KEY1;
 8004cb4:	4b05      	ldr	r3, [pc, #20]	; (8004ccc <FLASH_Unlock+0x24>)
 8004cb6:	4a06      	ldr	r2, [pc, #24]	; (8004cd0 <FLASH_Unlock+0x28>)
 8004cb8:	605a      	str	r2, [r3, #4]
    FLASH->KEYR = FLASH_KEY2;
 8004cba:	4b04      	ldr	r3, [pc, #16]	; (8004ccc <FLASH_Unlock+0x24>)
 8004cbc:	4a05      	ldr	r2, [pc, #20]	; (8004cd4 <FLASH_Unlock+0x2c>)
 8004cbe:	605a      	str	r2, [r3, #4]
  }  
}
 8004cc0:	bf00      	nop
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc8:	4770      	bx	lr
 8004cca:	bf00      	nop
 8004ccc:	40023c00 	.word	0x40023c00
 8004cd0:	45670123 	.word	0x45670123
 8004cd4:	cdef89ab 	.word	0xcdef89ab

08004cd8 <FLASH_Lock>:
  * @brief  Locks the FLASH control register access
  * @param  None
  * @retval None
  */
void FLASH_Lock(void)
{
 8004cd8:	b480      	push	{r7}
 8004cda:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8004cdc:	4b05      	ldr	r3, [pc, #20]	; (8004cf4 <FLASH_Lock+0x1c>)
 8004cde:	691b      	ldr	r3, [r3, #16]
 8004ce0:	4a04      	ldr	r2, [pc, #16]	; (8004cf4 <FLASH_Lock+0x1c>)
 8004ce2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004ce6:	6113      	str	r3, [r2, #16]
}
 8004ce8:	bf00      	nop
 8004cea:	46bd      	mov	sp, r7
 8004cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf0:	4770      	bx	lr
 8004cf2:	bf00      	nop
 8004cf4:	40023c00 	.word	0x40023c00

08004cf8 <FLASH_EraseSector>:
  *       
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
  *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
  */
FLASH_Status FLASH_EraseSector(uint32_t FLASH_Sector, uint8_t VoltageRange)
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b084      	sub	sp, #16
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
 8004d00:	460b      	mov	r3, r1
 8004d02:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0x0;
 8004d04:	2300      	movs	r3, #0
 8004d06:	60fb      	str	r3, [r7, #12]
  FLASH_Status status = FLASH_COMPLETE;
 8004d08:	2309      	movs	r3, #9
 8004d0a:	72fb      	strb	r3, [r7, #11]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(FLASH_Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == VoltageRange_1)
 8004d0c:	78fb      	ldrb	r3, [r7, #3]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d102      	bne.n	8004d18 <FLASH_EraseSector+0x20>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 8004d12:	2300      	movs	r3, #0
 8004d14:	60fb      	str	r3, [r7, #12]
 8004d16:	e010      	b.n	8004d3a <FLASH_EraseSector+0x42>
  }
  else if(VoltageRange == VoltageRange_2)
 8004d18:	78fb      	ldrb	r3, [r7, #3]
 8004d1a:	2b01      	cmp	r3, #1
 8004d1c:	d103      	bne.n	8004d26 <FLASH_EraseSector+0x2e>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8004d1e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004d22:	60fb      	str	r3, [r7, #12]
 8004d24:	e009      	b.n	8004d3a <FLASH_EraseSector+0x42>
  }
  else if(VoltageRange == VoltageRange_3)
 8004d26:	78fb      	ldrb	r3, [r7, #3]
 8004d28:	2b02      	cmp	r3, #2
 8004d2a:	d103      	bne.n	8004d34 <FLASH_EraseSector+0x3c>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8004d2c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004d30:	60fb      	str	r3, [r7, #12]
 8004d32:	e002      	b.n	8004d3a <FLASH_EraseSector+0x42>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8004d34:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004d38:	60fb      	str	r3, [r7, #12]
  }
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation();
 8004d3a:	f000 fc8b 	bl	8005654 <FLASH_WaitForLastOperation>
 8004d3e:	4603      	mov	r3, r0
 8004d40:	72fb      	strb	r3, [r7, #11]
  
  if(status == FLASH_COMPLETE)
 8004d42:	7afb      	ldrb	r3, [r7, #11]
 8004d44:	2b09      	cmp	r3, #9
 8004d46:	d12f      	bne.n	8004da8 <FLASH_EraseSector+0xb0>
  { 
    /* if the previous operation is completed, proceed to erase the sector */
    FLASH->CR &= CR_PSIZE_MASK;
 8004d48:	4b1a      	ldr	r3, [pc, #104]	; (8004db4 <FLASH_EraseSector+0xbc>)
 8004d4a:	691b      	ldr	r3, [r3, #16]
 8004d4c:	4a19      	ldr	r2, [pc, #100]	; (8004db4 <FLASH_EraseSector+0xbc>)
 8004d4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d52:	6113      	str	r3, [r2, #16]
    FLASH->CR |= tmp_psize;
 8004d54:	4b17      	ldr	r3, [pc, #92]	; (8004db4 <FLASH_EraseSector+0xbc>)
 8004d56:	691a      	ldr	r2, [r3, #16]
 8004d58:	4916      	ldr	r1, [pc, #88]	; (8004db4 <FLASH_EraseSector+0xbc>)
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	4313      	orrs	r3, r2
 8004d5e:	610b      	str	r3, [r1, #16]
    FLASH->CR &= SECTOR_MASK;
 8004d60:	4b14      	ldr	r3, [pc, #80]	; (8004db4 <FLASH_EraseSector+0xbc>)
 8004d62:	691b      	ldr	r3, [r3, #16]
 8004d64:	4a13      	ldr	r2, [pc, #76]	; (8004db4 <FLASH_EraseSector+0xbc>)
 8004d66:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8004d6a:	6113      	str	r3, [r2, #16]
    FLASH->CR |= FLASH_CR_SER | FLASH_Sector;
 8004d6c:	4b11      	ldr	r3, [pc, #68]	; (8004db4 <FLASH_EraseSector+0xbc>)
 8004d6e:	691a      	ldr	r2, [r3, #16]
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	4313      	orrs	r3, r2
 8004d74:	4a0f      	ldr	r2, [pc, #60]	; (8004db4 <FLASH_EraseSector+0xbc>)
 8004d76:	f043 0302 	orr.w	r3, r3, #2
 8004d7a:	6113      	str	r3, [r2, #16]
    FLASH->CR |= FLASH_CR_STRT;
 8004d7c:	4b0d      	ldr	r3, [pc, #52]	; (8004db4 <FLASH_EraseSector+0xbc>)
 8004d7e:	691b      	ldr	r3, [r3, #16]
 8004d80:	4a0c      	ldr	r2, [pc, #48]	; (8004db4 <FLASH_EraseSector+0xbc>)
 8004d82:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d86:	6113      	str	r3, [r2, #16]
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation();
 8004d88:	f000 fc64 	bl	8005654 <FLASH_WaitForLastOperation>
 8004d8c:	4603      	mov	r3, r0
 8004d8e:	72fb      	strb	r3, [r7, #11]
    
    /* if the erase operation is completed, disable the SER Bit */
    FLASH->CR &= (~FLASH_CR_SER);
 8004d90:	4b08      	ldr	r3, [pc, #32]	; (8004db4 <FLASH_EraseSector+0xbc>)
 8004d92:	691b      	ldr	r3, [r3, #16]
 8004d94:	4a07      	ldr	r2, [pc, #28]	; (8004db4 <FLASH_EraseSector+0xbc>)
 8004d96:	f023 0302 	bic.w	r3, r3, #2
 8004d9a:	6113      	str	r3, [r2, #16]
    FLASH->CR &= SECTOR_MASK; 
 8004d9c:	4b05      	ldr	r3, [pc, #20]	; (8004db4 <FLASH_EraseSector+0xbc>)
 8004d9e:	691b      	ldr	r3, [r3, #16]
 8004da0:	4a04      	ldr	r2, [pc, #16]	; (8004db4 <FLASH_EraseSector+0xbc>)
 8004da2:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8004da6:	6113      	str	r3, [r2, #16]
  }
  /* Return the Erase Status */
  return status;
 8004da8:	7afb      	ldrb	r3, [r7, #11]
}
 8004daa:	4618      	mov	r0, r3
 8004dac:	3710      	adds	r7, #16
 8004dae:	46bd      	mov	sp, r7
 8004db0:	bd80      	pop	{r7, pc}
 8004db2:	bf00      	nop
 8004db4:	40023c00 	.word	0x40023c00

08004db8 <FLASH_EraseAllSectors>:
  *       
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
  *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
  */
FLASH_Status FLASH_EraseAllSectors(uint8_t VoltageRange)
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b084      	sub	sp, #16
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	4603      	mov	r3, r0
 8004dc0:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp_psize = 0x0;
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	60fb      	str	r3, [r7, #12]
  FLASH_Status status = FLASH_COMPLETE;
 8004dc6:	2309      	movs	r3, #9
 8004dc8:	72fb      	strb	r3, [r7, #11]
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation();
 8004dca:	f000 fc43 	bl	8005654 <FLASH_WaitForLastOperation>
 8004dce:	4603      	mov	r3, r0
 8004dd0:	72fb      	strb	r3, [r7, #11]
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == VoltageRange_1)
 8004dd2:	79fb      	ldrb	r3, [r7, #7]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d102      	bne.n	8004dde <FLASH_EraseAllSectors+0x26>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 8004dd8:	2300      	movs	r3, #0
 8004dda:	60fb      	str	r3, [r7, #12]
 8004ddc:	e010      	b.n	8004e00 <FLASH_EraseAllSectors+0x48>
  }
  else if(VoltageRange == VoltageRange_2)
 8004dde:	79fb      	ldrb	r3, [r7, #7]
 8004de0:	2b01      	cmp	r3, #1
 8004de2:	d103      	bne.n	8004dec <FLASH_EraseAllSectors+0x34>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8004de4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004de8:	60fb      	str	r3, [r7, #12]
 8004dea:	e009      	b.n	8004e00 <FLASH_EraseAllSectors+0x48>
  }
  else if(VoltageRange == VoltageRange_3)
 8004dec:	79fb      	ldrb	r3, [r7, #7]
 8004dee:	2b02      	cmp	r3, #2
 8004df0:	d103      	bne.n	8004dfa <FLASH_EraseAllSectors+0x42>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8004df2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004df6:	60fb      	str	r3, [r7, #12]
 8004df8:	e002      	b.n	8004e00 <FLASH_EraseAllSectors+0x48>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8004dfa:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004dfe:	60fb      	str	r3, [r7, #12]
  }  
  if(status == FLASH_COMPLETE)
 8004e00:	7afb      	ldrb	r3, [r7, #11]
 8004e02:	2b09      	cmp	r3, #9
 8004e04:	d125      	bne.n	8004e52 <FLASH_EraseAllSectors+0x9a>
  {
    /* if the previous operation is completed, proceed to erase all sectors */
#if defined (STM32F427_437xx) || defined (STM32F429_439xx)    
    FLASH->CR &= CR_PSIZE_MASK;
 8004e06:	4b15      	ldr	r3, [pc, #84]	; (8004e5c <FLASH_EraseAllSectors+0xa4>)
 8004e08:	691b      	ldr	r3, [r3, #16]
 8004e0a:	4a14      	ldr	r2, [pc, #80]	; (8004e5c <FLASH_EraseAllSectors+0xa4>)
 8004e0c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e10:	6113      	str	r3, [r2, #16]
    FLASH->CR |= tmp_psize;
 8004e12:	4b12      	ldr	r3, [pc, #72]	; (8004e5c <FLASH_EraseAllSectors+0xa4>)
 8004e14:	691a      	ldr	r2, [r3, #16]
 8004e16:	4911      	ldr	r1, [pc, #68]	; (8004e5c <FLASH_EraseAllSectors+0xa4>)
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	4313      	orrs	r3, r2
 8004e1c:	610b      	str	r3, [r1, #16]
    FLASH->CR |= (FLASH_CR_MER1 | FLASH_CR_MER2);
 8004e1e:	4b0f      	ldr	r3, [pc, #60]	; (8004e5c <FLASH_EraseAllSectors+0xa4>)
 8004e20:	691b      	ldr	r3, [r3, #16]
 8004e22:	4a0e      	ldr	r2, [pc, #56]	; (8004e5c <FLASH_EraseAllSectors+0xa4>)
 8004e24:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e28:	f043 0304 	orr.w	r3, r3, #4
 8004e2c:	6113      	str	r3, [r2, #16]
    FLASH->CR |= FLASH_CR_STRT;
 8004e2e:	4b0b      	ldr	r3, [pc, #44]	; (8004e5c <FLASH_EraseAllSectors+0xa4>)
 8004e30:	691b      	ldr	r3, [r3, #16]
 8004e32:	4a0a      	ldr	r2, [pc, #40]	; (8004e5c <FLASH_EraseAllSectors+0xa4>)
 8004e34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e38:	6113      	str	r3, [r2, #16]
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation();
 8004e3a:	f000 fc0b 	bl	8005654 <FLASH_WaitForLastOperation>
 8004e3e:	4603      	mov	r3, r0
 8004e40:	72fb      	strb	r3, [r7, #11]

    /* if the erase operation is completed, disable the MER Bit */
    FLASH->CR &= ~(FLASH_CR_MER1 | FLASH_CR_MER2);
 8004e42:	4b06      	ldr	r3, [pc, #24]	; (8004e5c <FLASH_EraseAllSectors+0xa4>)
 8004e44:	691b      	ldr	r3, [r3, #16]
 8004e46:	4a05      	ldr	r2, [pc, #20]	; (8004e5c <FLASH_EraseAllSectors+0xa4>)
 8004e48:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004e4c:	f023 0304 	bic.w	r3, r3, #4
 8004e50:	6113      	str	r3, [r2, #16]
    FLASH->CR &= (~FLASH_CR_MER);
#endif /* STM32F40_41xxx || STM32F401xx */

  }   
  /* Return the Erase Status */
  return status;
 8004e52:	7afb      	ldrb	r3, [r7, #11]
}
 8004e54:	4618      	mov	r0, r3
 8004e56:	3710      	adds	r7, #16
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	bd80      	pop	{r7, pc}
 8004e5c:	40023c00 	.word	0x40023c00

08004e60 <FLASH_EraseAllBank1Sectors>:
  *       
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
  *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
  */
FLASH_Status FLASH_EraseAllBank1Sectors(uint8_t VoltageRange)
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b084      	sub	sp, #16
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	4603      	mov	r3, r0
 8004e68:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp_psize = 0x0;
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	60fb      	str	r3, [r7, #12]
  FLASH_Status status = FLASH_COMPLETE;
 8004e6e:	2309      	movs	r3, #9
 8004e70:	72fb      	strb	r3, [r7, #11]
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation();
 8004e72:	f000 fbef 	bl	8005654 <FLASH_WaitForLastOperation>
 8004e76:	4603      	mov	r3, r0
 8004e78:	72fb      	strb	r3, [r7, #11]
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == VoltageRange_1)
 8004e7a:	79fb      	ldrb	r3, [r7, #7]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d102      	bne.n	8004e86 <FLASH_EraseAllBank1Sectors+0x26>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 8004e80:	2300      	movs	r3, #0
 8004e82:	60fb      	str	r3, [r7, #12]
 8004e84:	e010      	b.n	8004ea8 <FLASH_EraseAllBank1Sectors+0x48>
  }
  else if(VoltageRange == VoltageRange_2)
 8004e86:	79fb      	ldrb	r3, [r7, #7]
 8004e88:	2b01      	cmp	r3, #1
 8004e8a:	d103      	bne.n	8004e94 <FLASH_EraseAllBank1Sectors+0x34>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8004e8c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004e90:	60fb      	str	r3, [r7, #12]
 8004e92:	e009      	b.n	8004ea8 <FLASH_EraseAllBank1Sectors+0x48>
  }
  else if(VoltageRange == VoltageRange_3)
 8004e94:	79fb      	ldrb	r3, [r7, #7]
 8004e96:	2b02      	cmp	r3, #2
 8004e98:	d103      	bne.n	8004ea2 <FLASH_EraseAllBank1Sectors+0x42>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8004e9a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004e9e:	60fb      	str	r3, [r7, #12]
 8004ea0:	e002      	b.n	8004ea8 <FLASH_EraseAllBank1Sectors+0x48>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8004ea2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004ea6:	60fb      	str	r3, [r7, #12]
  }  
  if(status == FLASH_COMPLETE)
 8004ea8:	7afb      	ldrb	r3, [r7, #11]
 8004eaa:	2b09      	cmp	r3, #9
 8004eac:	d121      	bne.n	8004ef2 <FLASH_EraseAllBank1Sectors+0x92>
  {
    /* if the previous operation is completed, proceed to erase all sectors */
     FLASH->CR &= CR_PSIZE_MASK;
 8004eae:	4b13      	ldr	r3, [pc, #76]	; (8004efc <FLASH_EraseAllBank1Sectors+0x9c>)
 8004eb0:	691b      	ldr	r3, [r3, #16]
 8004eb2:	4a12      	ldr	r2, [pc, #72]	; (8004efc <FLASH_EraseAllBank1Sectors+0x9c>)
 8004eb4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004eb8:	6113      	str	r3, [r2, #16]
     FLASH->CR |= tmp_psize;
 8004eba:	4b10      	ldr	r3, [pc, #64]	; (8004efc <FLASH_EraseAllBank1Sectors+0x9c>)
 8004ebc:	691a      	ldr	r2, [r3, #16]
 8004ebe:	490f      	ldr	r1, [pc, #60]	; (8004efc <FLASH_EraseAllBank1Sectors+0x9c>)
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	4313      	orrs	r3, r2
 8004ec4:	610b      	str	r3, [r1, #16]
     FLASH->CR |= FLASH_CR_MER1;
 8004ec6:	4b0d      	ldr	r3, [pc, #52]	; (8004efc <FLASH_EraseAllBank1Sectors+0x9c>)
 8004ec8:	691b      	ldr	r3, [r3, #16]
 8004eca:	4a0c      	ldr	r2, [pc, #48]	; (8004efc <FLASH_EraseAllBank1Sectors+0x9c>)
 8004ecc:	f043 0304 	orr.w	r3, r3, #4
 8004ed0:	6113      	str	r3, [r2, #16]
     FLASH->CR |= FLASH_CR_STRT;
 8004ed2:	4b0a      	ldr	r3, [pc, #40]	; (8004efc <FLASH_EraseAllBank1Sectors+0x9c>)
 8004ed4:	691b      	ldr	r3, [r3, #16]
 8004ed6:	4a09      	ldr	r2, [pc, #36]	; (8004efc <FLASH_EraseAllBank1Sectors+0x9c>)
 8004ed8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004edc:	6113      	str	r3, [r2, #16]
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation();
 8004ede:	f000 fbb9 	bl	8005654 <FLASH_WaitForLastOperation>
 8004ee2:	4603      	mov	r3, r0
 8004ee4:	72fb      	strb	r3, [r7, #11]

    /* if the erase operation is completed, disable the MER Bit */
    FLASH->CR &= (~FLASH_CR_MER1);
 8004ee6:	4b05      	ldr	r3, [pc, #20]	; (8004efc <FLASH_EraseAllBank1Sectors+0x9c>)
 8004ee8:	691b      	ldr	r3, [r3, #16]
 8004eea:	4a04      	ldr	r2, [pc, #16]	; (8004efc <FLASH_EraseAllBank1Sectors+0x9c>)
 8004eec:	f023 0304 	bic.w	r3, r3, #4
 8004ef0:	6113      	str	r3, [r2, #16]

  }   
  /* Return the Erase Status */
  return status;
 8004ef2:	7afb      	ldrb	r3, [r7, #11]
}
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	3710      	adds	r7, #16
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	bd80      	pop	{r7, pc}
 8004efc:	40023c00 	.word	0x40023c00

08004f00 <FLASH_EraseAllBank2Sectors>:
  *       
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
  *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
  */
FLASH_Status FLASH_EraseAllBank2Sectors(uint8_t VoltageRange)
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b084      	sub	sp, #16
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	4603      	mov	r3, r0
 8004f08:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp_psize = 0x0;
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	60fb      	str	r3, [r7, #12]
  FLASH_Status status = FLASH_COMPLETE;
 8004f0e:	2309      	movs	r3, #9
 8004f10:	72fb      	strb	r3, [r7, #11]
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation();
 8004f12:	f000 fb9f 	bl	8005654 <FLASH_WaitForLastOperation>
 8004f16:	4603      	mov	r3, r0
 8004f18:	72fb      	strb	r3, [r7, #11]
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == VoltageRange_1)
 8004f1a:	79fb      	ldrb	r3, [r7, #7]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d102      	bne.n	8004f26 <FLASH_EraseAllBank2Sectors+0x26>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 8004f20:	2300      	movs	r3, #0
 8004f22:	60fb      	str	r3, [r7, #12]
 8004f24:	e010      	b.n	8004f48 <FLASH_EraseAllBank2Sectors+0x48>
  }
  else if(VoltageRange == VoltageRange_2)
 8004f26:	79fb      	ldrb	r3, [r7, #7]
 8004f28:	2b01      	cmp	r3, #1
 8004f2a:	d103      	bne.n	8004f34 <FLASH_EraseAllBank2Sectors+0x34>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8004f2c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004f30:	60fb      	str	r3, [r7, #12]
 8004f32:	e009      	b.n	8004f48 <FLASH_EraseAllBank2Sectors+0x48>
  }
  else if(VoltageRange == VoltageRange_3)
 8004f34:	79fb      	ldrb	r3, [r7, #7]
 8004f36:	2b02      	cmp	r3, #2
 8004f38:	d103      	bne.n	8004f42 <FLASH_EraseAllBank2Sectors+0x42>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8004f3a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004f3e:	60fb      	str	r3, [r7, #12]
 8004f40:	e002      	b.n	8004f48 <FLASH_EraseAllBank2Sectors+0x48>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8004f42:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004f46:	60fb      	str	r3, [r7, #12]
  }  
  if(status == FLASH_COMPLETE)
 8004f48:	7afb      	ldrb	r3, [r7, #11]
 8004f4a:	2b09      	cmp	r3, #9
 8004f4c:	d121      	bne.n	8004f92 <FLASH_EraseAllBank2Sectors+0x92>
  {
    /* if the previous operation is completed, proceed to erase all sectors */
     FLASH->CR &= CR_PSIZE_MASK;
 8004f4e:	4b13      	ldr	r3, [pc, #76]	; (8004f9c <FLASH_EraseAllBank2Sectors+0x9c>)
 8004f50:	691b      	ldr	r3, [r3, #16]
 8004f52:	4a12      	ldr	r2, [pc, #72]	; (8004f9c <FLASH_EraseAllBank2Sectors+0x9c>)
 8004f54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f58:	6113      	str	r3, [r2, #16]
     FLASH->CR |= tmp_psize;
 8004f5a:	4b10      	ldr	r3, [pc, #64]	; (8004f9c <FLASH_EraseAllBank2Sectors+0x9c>)
 8004f5c:	691a      	ldr	r2, [r3, #16]
 8004f5e:	490f      	ldr	r1, [pc, #60]	; (8004f9c <FLASH_EraseAllBank2Sectors+0x9c>)
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	4313      	orrs	r3, r2
 8004f64:	610b      	str	r3, [r1, #16]
     FLASH->CR |= FLASH_CR_MER2;
 8004f66:	4b0d      	ldr	r3, [pc, #52]	; (8004f9c <FLASH_EraseAllBank2Sectors+0x9c>)
 8004f68:	691b      	ldr	r3, [r3, #16]
 8004f6a:	4a0c      	ldr	r2, [pc, #48]	; (8004f9c <FLASH_EraseAllBank2Sectors+0x9c>)
 8004f6c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f70:	6113      	str	r3, [r2, #16]
     FLASH->CR |= FLASH_CR_STRT;
 8004f72:	4b0a      	ldr	r3, [pc, #40]	; (8004f9c <FLASH_EraseAllBank2Sectors+0x9c>)
 8004f74:	691b      	ldr	r3, [r3, #16]
 8004f76:	4a09      	ldr	r2, [pc, #36]	; (8004f9c <FLASH_EraseAllBank2Sectors+0x9c>)
 8004f78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f7c:	6113      	str	r3, [r2, #16]
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation();
 8004f7e:	f000 fb69 	bl	8005654 <FLASH_WaitForLastOperation>
 8004f82:	4603      	mov	r3, r0
 8004f84:	72fb      	strb	r3, [r7, #11]

    /* if the erase operation is completed, disable the MER Bit */
    FLASH->CR &= (~FLASH_CR_MER2);
 8004f86:	4b05      	ldr	r3, [pc, #20]	; (8004f9c <FLASH_EraseAllBank2Sectors+0x9c>)
 8004f88:	691b      	ldr	r3, [r3, #16]
 8004f8a:	4a04      	ldr	r2, [pc, #16]	; (8004f9c <FLASH_EraseAllBank2Sectors+0x9c>)
 8004f8c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004f90:	6113      	str	r3, [r2, #16]

  }   
  /* Return the Erase Status */
  return status;
 8004f92:	7afb      	ldrb	r3, [r7, #11]
}
 8004f94:	4618      	mov	r0, r3
 8004f96:	3710      	adds	r7, #16
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	bd80      	pop	{r7, pc}
 8004f9c:	40023c00 	.word	0x40023c00

08004fa0 <FLASH_ProgramDoubleWord>:
  * @param  Data: specifies the data to be programmed.
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
  *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
  */
FLASH_Status FLASH_ProgramDoubleWord(uint32_t Address, uint64_t Data)
{
 8004fa0:	b590      	push	{r4, r7, lr}
 8004fa2:	b087      	sub	sp, #28
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	60f8      	str	r0, [r7, #12]
 8004fa8:	e9c7 2300 	strd	r2, r3, [r7]
  FLASH_Status status = FLASH_COMPLETE;
 8004fac:	2309      	movs	r3, #9
 8004fae:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation();
 8004fb0:	f000 fb50 	bl	8005654 <FLASH_WaitForLastOperation>
 8004fb4:	4603      	mov	r3, r0
 8004fb6:	75fb      	strb	r3, [r7, #23]
  
  if(status == FLASH_COMPLETE)
 8004fb8:	7dfb      	ldrb	r3, [r7, #23]
 8004fba:	2b09      	cmp	r3, #9
 8004fbc:	d120      	bne.n	8005000 <FLASH_ProgramDoubleWord+0x60>
  {
    /* if the previous operation is completed, proceed to program the new data */
    FLASH->CR &= CR_PSIZE_MASK;
 8004fbe:	4b13      	ldr	r3, [pc, #76]	; (800500c <FLASH_ProgramDoubleWord+0x6c>)
 8004fc0:	691b      	ldr	r3, [r3, #16]
 8004fc2:	4a12      	ldr	r2, [pc, #72]	; (800500c <FLASH_ProgramDoubleWord+0x6c>)
 8004fc4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004fc8:	6113      	str	r3, [r2, #16]
    FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8004fca:	4b10      	ldr	r3, [pc, #64]	; (800500c <FLASH_ProgramDoubleWord+0x6c>)
 8004fcc:	691b      	ldr	r3, [r3, #16]
 8004fce:	4a0f      	ldr	r2, [pc, #60]	; (800500c <FLASH_ProgramDoubleWord+0x6c>)
 8004fd0:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8004fd4:	6113      	str	r3, [r2, #16]
    FLASH->CR |= FLASH_CR_PG;
 8004fd6:	4b0d      	ldr	r3, [pc, #52]	; (800500c <FLASH_ProgramDoubleWord+0x6c>)
 8004fd8:	691b      	ldr	r3, [r3, #16]
 8004fda:	4a0c      	ldr	r2, [pc, #48]	; (800500c <FLASH_ProgramDoubleWord+0x6c>)
 8004fdc:	f043 0301 	orr.w	r3, r3, #1
 8004fe0:	6113      	str	r3, [r2, #16]
  
    *(__IO uint64_t*)Address = Data;
 8004fe2:	68fa      	ldr	r2, [r7, #12]
 8004fe4:	e9d7 3400 	ldrd	r3, r4, [r7]
 8004fe8:	e9c2 3400 	strd	r3, r4, [r2]
        
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation();
 8004fec:	f000 fb32 	bl	8005654 <FLASH_WaitForLastOperation>
 8004ff0:	4603      	mov	r3, r0
 8004ff2:	75fb      	strb	r3, [r7, #23]

    /* if the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 8004ff4:	4b05      	ldr	r3, [pc, #20]	; (800500c <FLASH_ProgramDoubleWord+0x6c>)
 8004ff6:	691b      	ldr	r3, [r3, #16]
 8004ff8:	4a04      	ldr	r2, [pc, #16]	; (800500c <FLASH_ProgramDoubleWord+0x6c>)
 8004ffa:	f023 0301 	bic.w	r3, r3, #1
 8004ffe:	6113      	str	r3, [r2, #16]
  } 
  /* Return the Program Status */
  return status;
 8005000:	7dfb      	ldrb	r3, [r7, #23]
}
 8005002:	4618      	mov	r0, r3
 8005004:	371c      	adds	r7, #28
 8005006:	46bd      	mov	sp, r7
 8005008:	bd90      	pop	{r4, r7, pc}
 800500a:	bf00      	nop
 800500c:	40023c00 	.word	0x40023c00

08005010 <FLASH_ProgramWord>:
  * @param  Data: specifies the data to be programmed.
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
  *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
  */
FLASH_Status FLASH_ProgramWord(uint32_t Address, uint32_t Data)
{
 8005010:	b580      	push	{r7, lr}
 8005012:	b084      	sub	sp, #16
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
 8005018:	6039      	str	r1, [r7, #0]
  FLASH_Status status = FLASH_COMPLETE;
 800501a:	2309      	movs	r3, #9
 800501c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation();
 800501e:	f000 fb19 	bl	8005654 <FLASH_WaitForLastOperation>
 8005022:	4603      	mov	r3, r0
 8005024:	73fb      	strb	r3, [r7, #15]
  
  if(status == FLASH_COMPLETE)
 8005026:	7bfb      	ldrb	r3, [r7, #15]
 8005028:	2b09      	cmp	r3, #9
 800502a:	d11e      	bne.n	800506a <FLASH_ProgramWord+0x5a>
  {
    /* if the previous operation is completed, proceed to program the new data */
    FLASH->CR &= CR_PSIZE_MASK;
 800502c:	4b11      	ldr	r3, [pc, #68]	; (8005074 <FLASH_ProgramWord+0x64>)
 800502e:	691b      	ldr	r3, [r3, #16]
 8005030:	4a10      	ldr	r2, [pc, #64]	; (8005074 <FLASH_ProgramWord+0x64>)
 8005032:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005036:	6113      	str	r3, [r2, #16]
    FLASH->CR |= FLASH_PSIZE_WORD;
 8005038:	4b0e      	ldr	r3, [pc, #56]	; (8005074 <FLASH_ProgramWord+0x64>)
 800503a:	691b      	ldr	r3, [r3, #16]
 800503c:	4a0d      	ldr	r2, [pc, #52]	; (8005074 <FLASH_ProgramWord+0x64>)
 800503e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005042:	6113      	str	r3, [r2, #16]
    FLASH->CR |= FLASH_CR_PG;
 8005044:	4b0b      	ldr	r3, [pc, #44]	; (8005074 <FLASH_ProgramWord+0x64>)
 8005046:	691b      	ldr	r3, [r3, #16]
 8005048:	4a0a      	ldr	r2, [pc, #40]	; (8005074 <FLASH_ProgramWord+0x64>)
 800504a:	f043 0301 	orr.w	r3, r3, #1
 800504e:	6113      	str	r3, [r2, #16]
  
    *(__IO uint32_t*)Address = Data;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	683a      	ldr	r2, [r7, #0]
 8005054:	601a      	str	r2, [r3, #0]
        
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation();
 8005056:	f000 fafd 	bl	8005654 <FLASH_WaitForLastOperation>
 800505a:	4603      	mov	r3, r0
 800505c:	73fb      	strb	r3, [r7, #15]

    /* if the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 800505e:	4b05      	ldr	r3, [pc, #20]	; (8005074 <FLASH_ProgramWord+0x64>)
 8005060:	691b      	ldr	r3, [r3, #16]
 8005062:	4a04      	ldr	r2, [pc, #16]	; (8005074 <FLASH_ProgramWord+0x64>)
 8005064:	f023 0301 	bic.w	r3, r3, #1
 8005068:	6113      	str	r3, [r2, #16]
  } 
  /* Return the Program Status */
  return status;
 800506a:	7bfb      	ldrb	r3, [r7, #15]
}
 800506c:	4618      	mov	r0, r3
 800506e:	3710      	adds	r7, #16
 8005070:	46bd      	mov	sp, r7
 8005072:	bd80      	pop	{r7, pc}
 8005074:	40023c00 	.word	0x40023c00

08005078 <FLASH_ProgramHalfWord>:
  * @param  Data: specifies the data to be programmed.
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
  *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
  */
FLASH_Status FLASH_ProgramHalfWord(uint32_t Address, uint16_t Data)
{
 8005078:	b580      	push	{r7, lr}
 800507a:	b084      	sub	sp, #16
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
 8005080:	460b      	mov	r3, r1
 8005082:	807b      	strh	r3, [r7, #2]
  FLASH_Status status = FLASH_COMPLETE;
 8005084:	2309      	movs	r3, #9
 8005086:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation();
 8005088:	f000 fae4 	bl	8005654 <FLASH_WaitForLastOperation>
 800508c:	4603      	mov	r3, r0
 800508e:	73fb      	strb	r3, [r7, #15]
  
  if(status == FLASH_COMPLETE)
 8005090:	7bfb      	ldrb	r3, [r7, #15]
 8005092:	2b09      	cmp	r3, #9
 8005094:	d11e      	bne.n	80050d4 <FLASH_ProgramHalfWord+0x5c>
  {
    /* if the previous operation is completed, proceed to program the new data */
    FLASH->CR &= CR_PSIZE_MASK;
 8005096:	4b12      	ldr	r3, [pc, #72]	; (80050e0 <FLASH_ProgramHalfWord+0x68>)
 8005098:	691b      	ldr	r3, [r3, #16]
 800509a:	4a11      	ldr	r2, [pc, #68]	; (80050e0 <FLASH_ProgramHalfWord+0x68>)
 800509c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050a0:	6113      	str	r3, [r2, #16]
    FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 80050a2:	4b0f      	ldr	r3, [pc, #60]	; (80050e0 <FLASH_ProgramHalfWord+0x68>)
 80050a4:	691b      	ldr	r3, [r3, #16]
 80050a6:	4a0e      	ldr	r2, [pc, #56]	; (80050e0 <FLASH_ProgramHalfWord+0x68>)
 80050a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050ac:	6113      	str	r3, [r2, #16]
    FLASH->CR |= FLASH_CR_PG;
 80050ae:	4b0c      	ldr	r3, [pc, #48]	; (80050e0 <FLASH_ProgramHalfWord+0x68>)
 80050b0:	691b      	ldr	r3, [r3, #16]
 80050b2:	4a0b      	ldr	r2, [pc, #44]	; (80050e0 <FLASH_ProgramHalfWord+0x68>)
 80050b4:	f043 0301 	orr.w	r3, r3, #1
 80050b8:	6113      	str	r3, [r2, #16]
  
    *(__IO uint16_t*)Address = Data;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	887a      	ldrh	r2, [r7, #2]
 80050be:	801a      	strh	r2, [r3, #0]
        
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation();
 80050c0:	f000 fac8 	bl	8005654 <FLASH_WaitForLastOperation>
 80050c4:	4603      	mov	r3, r0
 80050c6:	73fb      	strb	r3, [r7, #15]

    /* if the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 80050c8:	4b05      	ldr	r3, [pc, #20]	; (80050e0 <FLASH_ProgramHalfWord+0x68>)
 80050ca:	691b      	ldr	r3, [r3, #16]
 80050cc:	4a04      	ldr	r2, [pc, #16]	; (80050e0 <FLASH_ProgramHalfWord+0x68>)
 80050ce:	f023 0301 	bic.w	r3, r3, #1
 80050d2:	6113      	str	r3, [r2, #16]
  } 
  /* Return the Program Status */
  return status;
 80050d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80050d6:	4618      	mov	r0, r3
 80050d8:	3710      	adds	r7, #16
 80050da:	46bd      	mov	sp, r7
 80050dc:	bd80      	pop	{r7, pc}
 80050de:	bf00      	nop
 80050e0:	40023c00 	.word	0x40023c00

080050e4 <FLASH_ProgramByte>:
  * @param  Data: specifies the data to be programmed.
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
  *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
  */
FLASH_Status FLASH_ProgramByte(uint32_t Address, uint8_t Data)
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b084      	sub	sp, #16
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
 80050ec:	460b      	mov	r3, r1
 80050ee:	70fb      	strb	r3, [r7, #3]
  FLASH_Status status = FLASH_COMPLETE;
 80050f0:	2309      	movs	r3, #9
 80050f2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation();
 80050f4:	f000 faae 	bl	8005654 <FLASH_WaitForLastOperation>
 80050f8:	4603      	mov	r3, r0
 80050fa:	73fb      	strb	r3, [r7, #15]
  
  if(status == FLASH_COMPLETE)
 80050fc:	7bfb      	ldrb	r3, [r7, #15]
 80050fe:	2b09      	cmp	r3, #9
 8005100:	d11c      	bne.n	800513c <FLASH_ProgramByte+0x58>
  {
    /* if the previous operation is completed, proceed to program the new data */
    FLASH->CR &= CR_PSIZE_MASK;
 8005102:	4b11      	ldr	r3, [pc, #68]	; (8005148 <FLASH_ProgramByte+0x64>)
 8005104:	691b      	ldr	r3, [r3, #16]
 8005106:	4a10      	ldr	r2, [pc, #64]	; (8005148 <FLASH_ProgramByte+0x64>)
 8005108:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800510c:	6113      	str	r3, [r2, #16]
    FLASH->CR |= FLASH_PSIZE_BYTE;
 800510e:	4b0e      	ldr	r3, [pc, #56]	; (8005148 <FLASH_ProgramByte+0x64>)
 8005110:	4a0d      	ldr	r2, [pc, #52]	; (8005148 <FLASH_ProgramByte+0x64>)
 8005112:	691b      	ldr	r3, [r3, #16]
 8005114:	6113      	str	r3, [r2, #16]
    FLASH->CR |= FLASH_CR_PG;
 8005116:	4b0c      	ldr	r3, [pc, #48]	; (8005148 <FLASH_ProgramByte+0x64>)
 8005118:	691b      	ldr	r3, [r3, #16]
 800511a:	4a0b      	ldr	r2, [pc, #44]	; (8005148 <FLASH_ProgramByte+0x64>)
 800511c:	f043 0301 	orr.w	r3, r3, #1
 8005120:	6113      	str	r3, [r2, #16]
  
    *(__IO uint8_t*)Address = Data;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	78fa      	ldrb	r2, [r7, #3]
 8005126:	701a      	strb	r2, [r3, #0]
        
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation();
 8005128:	f000 fa94 	bl	8005654 <FLASH_WaitForLastOperation>
 800512c:	4603      	mov	r3, r0
 800512e:	73fb      	strb	r3, [r7, #15]

    /* if the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 8005130:	4b05      	ldr	r3, [pc, #20]	; (8005148 <FLASH_ProgramByte+0x64>)
 8005132:	691b      	ldr	r3, [r3, #16]
 8005134:	4a04      	ldr	r2, [pc, #16]	; (8005148 <FLASH_ProgramByte+0x64>)
 8005136:	f023 0301 	bic.w	r3, r3, #1
 800513a:	6113      	str	r3, [r2, #16]
  } 

  /* Return the Program Status */
  return status;
 800513c:	7bfb      	ldrb	r3, [r7, #15]
}
 800513e:	4618      	mov	r0, r3
 8005140:	3710      	adds	r7, #16
 8005142:	46bd      	mov	sp, r7
 8005144:	bd80      	pop	{r7, pc}
 8005146:	bf00      	nop
 8005148:	40023c00 	.word	0x40023c00

0800514c <FLASH_OB_Unlock>:
  * @brief  Unlocks the FLASH Option Control Registers access.
  * @param  None
  * @retval None
  */
void FLASH_OB_Unlock(void)
{
 800514c:	b480      	push	{r7}
 800514e:	af00      	add	r7, sp, #0
  if((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != RESET)
 8005150:	4b08      	ldr	r3, [pc, #32]	; (8005174 <FLASH_OB_Unlock+0x28>)
 8005152:	695b      	ldr	r3, [r3, #20]
 8005154:	f003 0301 	and.w	r3, r3, #1
 8005158:	2b00      	cmp	r3, #0
 800515a:	d005      	beq.n	8005168 <FLASH_OB_Unlock+0x1c>
  {
    /* Authorizes the Option Byte register programming */
    FLASH->OPTKEYR = FLASH_OPT_KEY1;
 800515c:	4b05      	ldr	r3, [pc, #20]	; (8005174 <FLASH_OB_Unlock+0x28>)
 800515e:	4a06      	ldr	r2, [pc, #24]	; (8005178 <FLASH_OB_Unlock+0x2c>)
 8005160:	609a      	str	r2, [r3, #8]
    FLASH->OPTKEYR = FLASH_OPT_KEY2;
 8005162:	4b04      	ldr	r3, [pc, #16]	; (8005174 <FLASH_OB_Unlock+0x28>)
 8005164:	4a05      	ldr	r2, [pc, #20]	; (800517c <FLASH_OB_Unlock+0x30>)
 8005166:	609a      	str	r2, [r3, #8]
  }  
}
 8005168:	bf00      	nop
 800516a:	46bd      	mov	sp, r7
 800516c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005170:	4770      	bx	lr
 8005172:	bf00      	nop
 8005174:	40023c00 	.word	0x40023c00
 8005178:	08192a3b 	.word	0x08192a3b
 800517c:	4c5d6e7f 	.word	0x4c5d6e7f

08005180 <FLASH_OB_Lock>:
  * @brief  Locks the FLASH Option Control Registers access.
  * @param  None
  * @retval None
  */
void FLASH_OB_Lock(void)
{
 8005180:	b480      	push	{r7}
 8005182:	af00      	add	r7, sp, #0
  /* Set the OPTLOCK Bit to lock the FLASH Option Byte Registers access */
  FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 8005184:	4b05      	ldr	r3, [pc, #20]	; (800519c <FLASH_OB_Lock+0x1c>)
 8005186:	695b      	ldr	r3, [r3, #20]
 8005188:	4a04      	ldr	r2, [pc, #16]	; (800519c <FLASH_OB_Lock+0x1c>)
 800518a:	f043 0301 	orr.w	r3, r3, #1
 800518e:	6153      	str	r3, [r2, #20]
}
 8005190:	bf00      	nop
 8005192:	46bd      	mov	sp, r7
 8005194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005198:	4770      	bx	lr
 800519a:	bf00      	nop
 800519c:	40023c00 	.word	0x40023c00

080051a0 <FLASH_OB_WRPConfig>:
  * @param  Newstate: new state of the Write Protection.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None  
  */
void FLASH_OB_WRPConfig(uint32_t OB_WRP, FunctionalState NewState)
{ 
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b084      	sub	sp, #16
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
 80051a8:	460b      	mov	r3, r1
 80051aa:	70fb      	strb	r3, [r7, #3]
  FLASH_Status status = FLASH_COMPLETE;
 80051ac:	2309      	movs	r3, #9
 80051ae:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_OB_WRP(OB_WRP));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  status = FLASH_WaitForLastOperation();
 80051b0:	f000 fa50 	bl	8005654 <FLASH_WaitForLastOperation>
 80051b4:	4603      	mov	r3, r0
 80051b6:	73fb      	strb	r3, [r7, #15]

  if(status == FLASH_COMPLETE)
 80051b8:	7bfb      	ldrb	r3, [r7, #15]
 80051ba:	2b09      	cmp	r3, #9
 80051bc:	d117      	bne.n	80051ee <FLASH_OB_WRPConfig+0x4e>
  { 
    if(NewState != DISABLE)
 80051be:	78fb      	ldrb	r3, [r7, #3]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d00b      	beq.n	80051dc <FLASH_OB_WRPConfig+0x3c>
    {
      *(__IO uint16_t*)OPTCR_BYTE2_ADDRESS &= (~OB_WRP);
 80051c4:	4b0c      	ldr	r3, [pc, #48]	; (80051f8 <FLASH_OB_WRPConfig+0x58>)
 80051c6:	881b      	ldrh	r3, [r3, #0]
 80051c8:	b29a      	uxth	r2, r3
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	b29b      	uxth	r3, r3
 80051ce:	43db      	mvns	r3, r3
 80051d0:	b29b      	uxth	r3, r3
 80051d2:	4909      	ldr	r1, [pc, #36]	; (80051f8 <FLASH_OB_WRPConfig+0x58>)
 80051d4:	4013      	ands	r3, r2
 80051d6:	b29b      	uxth	r3, r3
 80051d8:	800b      	strh	r3, [r1, #0]
    else
    {
      *(__IO uint16_t*)OPTCR_BYTE2_ADDRESS |= (uint16_t)OB_WRP;
    }
  }
}
 80051da:	e008      	b.n	80051ee <FLASH_OB_WRPConfig+0x4e>
      *(__IO uint16_t*)OPTCR_BYTE2_ADDRESS |= (uint16_t)OB_WRP;
 80051dc:	4b06      	ldr	r3, [pc, #24]	; (80051f8 <FLASH_OB_WRPConfig+0x58>)
 80051de:	881b      	ldrh	r3, [r3, #0]
 80051e0:	b29a      	uxth	r2, r3
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	b29b      	uxth	r3, r3
 80051e6:	4904      	ldr	r1, [pc, #16]	; (80051f8 <FLASH_OB_WRPConfig+0x58>)
 80051e8:	4313      	orrs	r3, r2
 80051ea:	b29b      	uxth	r3, r3
 80051ec:	800b      	strh	r3, [r1, #0]
}
 80051ee:	bf00      	nop
 80051f0:	3710      	adds	r7, #16
 80051f2:	46bd      	mov	sp, r7
 80051f4:	bd80      	pop	{r7, pc}
 80051f6:	bf00      	nop
 80051f8:	40023c16 	.word	0x40023c16

080051fc <FLASH_OB_WRP1Config>:
  * @param  Newstate: new state of the Write Protection.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None  
  */
void FLASH_OB_WRP1Config(uint32_t OB_WRP, FunctionalState NewState)
{ 
 80051fc:	b580      	push	{r7, lr}
 80051fe:	b084      	sub	sp, #16
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
 8005204:	460b      	mov	r3, r1
 8005206:	70fb      	strb	r3, [r7, #3]
  FLASH_Status status = FLASH_COMPLETE;
 8005208:	2309      	movs	r3, #9
 800520a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_OB_WRP(OB_WRP));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  status = FLASH_WaitForLastOperation();
 800520c:	f000 fa22 	bl	8005654 <FLASH_WaitForLastOperation>
 8005210:	4603      	mov	r3, r0
 8005212:	73fb      	strb	r3, [r7, #15]

  if(status == FLASH_COMPLETE)
 8005214:	7bfb      	ldrb	r3, [r7, #15]
 8005216:	2b09      	cmp	r3, #9
 8005218:	d117      	bne.n	800524a <FLASH_OB_WRP1Config+0x4e>
  { 
    if(NewState != DISABLE)
 800521a:	78fb      	ldrb	r3, [r7, #3]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d00b      	beq.n	8005238 <FLASH_OB_WRP1Config+0x3c>
    {
      *(__IO uint16_t*)OPTCR1_BYTE2_ADDRESS &= (~OB_WRP);
 8005220:	4b0c      	ldr	r3, [pc, #48]	; (8005254 <FLASH_OB_WRP1Config+0x58>)
 8005222:	881b      	ldrh	r3, [r3, #0]
 8005224:	b29a      	uxth	r2, r3
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	b29b      	uxth	r3, r3
 800522a:	43db      	mvns	r3, r3
 800522c:	b29b      	uxth	r3, r3
 800522e:	4909      	ldr	r1, [pc, #36]	; (8005254 <FLASH_OB_WRP1Config+0x58>)
 8005230:	4013      	ands	r3, r2
 8005232:	b29b      	uxth	r3, r3
 8005234:	800b      	strh	r3, [r1, #0]
    else
    {
      *(__IO uint16_t*)OPTCR1_BYTE2_ADDRESS |= (uint16_t)OB_WRP;
    }
  }
}
 8005236:	e008      	b.n	800524a <FLASH_OB_WRP1Config+0x4e>
      *(__IO uint16_t*)OPTCR1_BYTE2_ADDRESS |= (uint16_t)OB_WRP;
 8005238:	4b06      	ldr	r3, [pc, #24]	; (8005254 <FLASH_OB_WRP1Config+0x58>)
 800523a:	881b      	ldrh	r3, [r3, #0]
 800523c:	b29a      	uxth	r2, r3
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	b29b      	uxth	r3, r3
 8005242:	4904      	ldr	r1, [pc, #16]	; (8005254 <FLASH_OB_WRP1Config+0x58>)
 8005244:	4313      	orrs	r3, r2
 8005246:	b29b      	uxth	r3, r3
 8005248:	800b      	strh	r3, [r1, #0]
}
 800524a:	bf00      	nop
 800524c:	3710      	adds	r7, #16
 800524e:	46bd      	mov	sp, r7
 8005250:	bd80      	pop	{r7, pc}
 8005252:	bf00      	nop
 8005254:	40023c1a 	.word	0x40023c1a

08005258 <FLASH_OB_PCROPSelectionConfig>:
  *            @arg OB_PcROP_Disable: nWRPi control the write protection of respective user sectors.
  *            @arg OB_PcROP_Enable: nWRPi control the  read&write protection (PCROP) of respective user sectors.
  * @retval None
  */
void FLASH_OB_PCROPSelectionConfig(uint8_t OB_PcROP)
{  
 8005258:	b480      	push	{r7}
 800525a:	b085      	sub	sp, #20
 800525c:	af00      	add	r7, sp, #0
 800525e:	4603      	mov	r3, r0
 8005260:	71fb      	strb	r3, [r7, #7]
  uint8_t optiontmp = 0xFF;
 8005262:	23ff      	movs	r3, #255	; 0xff
 8005264:	73fb      	strb	r3, [r7, #15]
      
  /* Check the parameters */
  assert_param(IS_OB_PCROP_SELECT(OB_PcROP));
  
  /* Mask SPRMOD bit */
  optiontmp =  (uint8_t)((*(__IO uint8_t *)OPTCR_BYTE3_ADDRESS) & (uint8_t)0x7F); 
 8005266:	4b09      	ldr	r3, [pc, #36]	; (800528c <FLASH_OB_PCROPSelectionConfig+0x34>)
 8005268:	781b      	ldrb	r3, [r3, #0]
 800526a:	b2db      	uxtb	r3, r3
 800526c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005270:	73fb      	strb	r3, [r7, #15]
  /* Update Option Byte */
  *(__IO uint8_t *)OPTCR_BYTE3_ADDRESS = (uint8_t)(OB_PcROP | optiontmp); 
 8005272:	4906      	ldr	r1, [pc, #24]	; (800528c <FLASH_OB_PCROPSelectionConfig+0x34>)
 8005274:	79fa      	ldrb	r2, [r7, #7]
 8005276:	7bfb      	ldrb	r3, [r7, #15]
 8005278:	4313      	orrs	r3, r2
 800527a:	b2db      	uxtb	r3, r3
 800527c:	700b      	strb	r3, [r1, #0]
    
}
 800527e:	bf00      	nop
 8005280:	3714      	adds	r7, #20
 8005282:	46bd      	mov	sp, r7
 8005284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005288:	4770      	bx	lr
 800528a:	bf00      	nop
 800528c:	40023c17 	.word	0x40023c17

08005290 <FLASH_OB_PCROPConfig>:
  * @param  Newstate: new state of the Write Protection.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None  
  */
void FLASH_OB_PCROPConfig(uint32_t OB_PCROP, FunctionalState NewState)
{ 
 8005290:	b580      	push	{r7, lr}
 8005292:	b084      	sub	sp, #16
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
 8005298:	460b      	mov	r3, r1
 800529a:	70fb      	strb	r3, [r7, #3]
  FLASH_Status status = FLASH_COMPLETE;
 800529c:	2309      	movs	r3, #9
 800529e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_OB_PCROP(OB_PCROP));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  status = FLASH_WaitForLastOperation();
 80052a0:	f000 f9d8 	bl	8005654 <FLASH_WaitForLastOperation>
 80052a4:	4603      	mov	r3, r0
 80052a6:	73fb      	strb	r3, [r7, #15]

  if(status == FLASH_COMPLETE)
 80052a8:	7bfb      	ldrb	r3, [r7, #15]
 80052aa:	2b09      	cmp	r3, #9
 80052ac:	d117      	bne.n	80052de <FLASH_OB_PCROPConfig+0x4e>
  { 
    if(NewState != DISABLE)
 80052ae:	78fb      	ldrb	r3, [r7, #3]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d009      	beq.n	80052c8 <FLASH_OB_PCROPConfig+0x38>
    {
      *(__IO uint16_t*)OPTCR_BYTE2_ADDRESS |= (uint16_t)OB_PCROP;    
 80052b4:	4b0c      	ldr	r3, [pc, #48]	; (80052e8 <FLASH_OB_PCROPConfig+0x58>)
 80052b6:	881b      	ldrh	r3, [r3, #0]
 80052b8:	b29a      	uxth	r2, r3
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	b29b      	uxth	r3, r3
 80052be:	490a      	ldr	r1, [pc, #40]	; (80052e8 <FLASH_OB_PCROPConfig+0x58>)
 80052c0:	4313      	orrs	r3, r2
 80052c2:	b29b      	uxth	r3, r3
 80052c4:	800b      	strh	r3, [r1, #0]
    else
    {
      *(__IO uint16_t*)OPTCR_BYTE2_ADDRESS &= (~OB_PCROP);
    }
  }
}
 80052c6:	e00a      	b.n	80052de <FLASH_OB_PCROPConfig+0x4e>
      *(__IO uint16_t*)OPTCR_BYTE2_ADDRESS &= (~OB_PCROP);
 80052c8:	4b07      	ldr	r3, [pc, #28]	; (80052e8 <FLASH_OB_PCROPConfig+0x58>)
 80052ca:	881b      	ldrh	r3, [r3, #0]
 80052cc:	b29a      	uxth	r2, r3
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	b29b      	uxth	r3, r3
 80052d2:	43db      	mvns	r3, r3
 80052d4:	b29b      	uxth	r3, r3
 80052d6:	4904      	ldr	r1, [pc, #16]	; (80052e8 <FLASH_OB_PCROPConfig+0x58>)
 80052d8:	4013      	ands	r3, r2
 80052da:	b29b      	uxth	r3, r3
 80052dc:	800b      	strh	r3, [r1, #0]
}
 80052de:	bf00      	nop
 80052e0:	3710      	adds	r7, #16
 80052e2:	46bd      	mov	sp, r7
 80052e4:	bd80      	pop	{r7, pc}
 80052e6:	bf00      	nop
 80052e8:	40023c16 	.word	0x40023c16

080052ec <FLASH_OB_PCROP1Config>:
  * @param  Newstate: new state of the Write Protection.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None  
  */
void FLASH_OB_PCROP1Config(uint32_t OB_PCROP, FunctionalState NewState)
{ 
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b084      	sub	sp, #16
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
 80052f4:	460b      	mov	r3, r1
 80052f6:	70fb      	strb	r3, [r7, #3]
  FLASH_Status status = FLASH_COMPLETE;
 80052f8:	2309      	movs	r3, #9
 80052fa:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_OB_PCROP(OB_PCROP));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  status = FLASH_WaitForLastOperation();
 80052fc:	f000 f9aa 	bl	8005654 <FLASH_WaitForLastOperation>
 8005300:	4603      	mov	r3, r0
 8005302:	73fb      	strb	r3, [r7, #15]

  if(status == FLASH_COMPLETE)
 8005304:	7bfb      	ldrb	r3, [r7, #15]
 8005306:	2b09      	cmp	r3, #9
 8005308:	d117      	bne.n	800533a <FLASH_OB_PCROP1Config+0x4e>
  { 
    if(NewState != DISABLE)
 800530a:	78fb      	ldrb	r3, [r7, #3]
 800530c:	2b00      	cmp	r3, #0
 800530e:	d009      	beq.n	8005324 <FLASH_OB_PCROP1Config+0x38>
    {
      *(__IO uint16_t*)OPTCR1_BYTE2_ADDRESS |= (uint16_t)OB_PCROP;
 8005310:	4b0c      	ldr	r3, [pc, #48]	; (8005344 <FLASH_OB_PCROP1Config+0x58>)
 8005312:	881b      	ldrh	r3, [r3, #0]
 8005314:	b29a      	uxth	r2, r3
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	b29b      	uxth	r3, r3
 800531a:	490a      	ldr	r1, [pc, #40]	; (8005344 <FLASH_OB_PCROP1Config+0x58>)
 800531c:	4313      	orrs	r3, r2
 800531e:	b29b      	uxth	r3, r3
 8005320:	800b      	strh	r3, [r1, #0]
    else
    {
      *(__IO uint16_t*)OPTCR1_BYTE2_ADDRESS &= (~OB_PCROP);
    }
  }
}
 8005322:	e00a      	b.n	800533a <FLASH_OB_PCROP1Config+0x4e>
      *(__IO uint16_t*)OPTCR1_BYTE2_ADDRESS &= (~OB_PCROP);
 8005324:	4b07      	ldr	r3, [pc, #28]	; (8005344 <FLASH_OB_PCROP1Config+0x58>)
 8005326:	881b      	ldrh	r3, [r3, #0]
 8005328:	b29a      	uxth	r2, r3
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	b29b      	uxth	r3, r3
 800532e:	43db      	mvns	r3, r3
 8005330:	b29b      	uxth	r3, r3
 8005332:	4904      	ldr	r1, [pc, #16]	; (8005344 <FLASH_OB_PCROP1Config+0x58>)
 8005334:	4013      	ands	r3, r2
 8005336:	b29b      	uxth	r3, r3
 8005338:	800b      	strh	r3, [r1, #0]
}
 800533a:	bf00      	nop
 800533c:	3710      	adds	r7, #16
 800533e:	46bd      	mov	sp, r7
 8005340:	bd80      	pop	{r7, pc}
 8005342:	bf00      	nop
 8005344:	40023c1a 	.word	0x40023c1a

08005348 <FLASH_OB_RDPConfig>:
  * /!\ Warning /!\ When enabling OB_RDP level 2 it's no more possible to go back to level 1 or 0
  *    
  * @retval None
  */
void FLASH_OB_RDPConfig(uint8_t OB_RDP)
{
 8005348:	b580      	push	{r7, lr}
 800534a:	b084      	sub	sp, #16
 800534c:	af00      	add	r7, sp, #0
 800534e:	4603      	mov	r3, r0
 8005350:	71fb      	strb	r3, [r7, #7]
  FLASH_Status status = FLASH_COMPLETE;
 8005352:	2309      	movs	r3, #9
 8005354:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_OB_RDP(OB_RDP));

  status = FLASH_WaitForLastOperation();
 8005356:	f000 f97d 	bl	8005654 <FLASH_WaitForLastOperation>
 800535a:	4603      	mov	r3, r0
 800535c:	73fb      	strb	r3, [r7, #15]

  if(status == FLASH_COMPLETE)
 800535e:	7bfb      	ldrb	r3, [r7, #15]
 8005360:	2b09      	cmp	r3, #9
 8005362:	d102      	bne.n	800536a <FLASH_OB_RDPConfig+0x22>
  {
    *(__IO uint8_t*)OPTCR_BYTE1_ADDRESS = OB_RDP;
 8005364:	4a03      	ldr	r2, [pc, #12]	; (8005374 <FLASH_OB_RDPConfig+0x2c>)
 8005366:	79fb      	ldrb	r3, [r7, #7]
 8005368:	7013      	strb	r3, [r2, #0]

  }
}
 800536a:	bf00      	nop
 800536c:	3710      	adds	r7, #16
 800536e:	46bd      	mov	sp, r7
 8005370:	bd80      	pop	{r7, pc}
 8005372:	bf00      	nop
 8005374:	40023c15 	.word	0x40023c15

08005378 <FLASH_OB_UserConfig>:
  *            @arg OB_STDBY_NoRST: No reset generated when entering in STANDBY
  *            @arg OB_STDBY_RST: Reset generated when entering in STANDBY
  * @retval None
  */
void FLASH_OB_UserConfig(uint8_t OB_IWDG, uint8_t OB_STOP, uint8_t OB_STDBY)
{
 8005378:	b580      	push	{r7, lr}
 800537a:	b084      	sub	sp, #16
 800537c:	af00      	add	r7, sp, #0
 800537e:	4603      	mov	r3, r0
 8005380:	71fb      	strb	r3, [r7, #7]
 8005382:	460b      	mov	r3, r1
 8005384:	71bb      	strb	r3, [r7, #6]
 8005386:	4613      	mov	r3, r2
 8005388:	717b      	strb	r3, [r7, #5]
  uint8_t optiontmp = 0xFF;
 800538a:	23ff      	movs	r3, #255	; 0xff
 800538c:	73fb      	strb	r3, [r7, #15]
  FLASH_Status status = FLASH_COMPLETE; 
 800538e:	2309      	movs	r3, #9
 8005390:	73bb      	strb	r3, [r7, #14]
  assert_param(IS_OB_IWDG_SOURCE(OB_IWDG));
  assert_param(IS_OB_STOP_SOURCE(OB_STOP));
  assert_param(IS_OB_STDBY_SOURCE(OB_STDBY));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation();
 8005392:	f000 f95f 	bl	8005654 <FLASH_WaitForLastOperation>
 8005396:	4603      	mov	r3, r0
 8005398:	73bb      	strb	r3, [r7, #14]
  
  if(status == FLASH_COMPLETE)
 800539a:	7bbb      	ldrb	r3, [r7, #14]
 800539c:	2b09      	cmp	r3, #9
 800539e:	d111      	bne.n	80053c4 <FLASH_OB_UserConfig+0x4c>
  { 
#if defined (STM32F427_437xx) || defined (STM32F429_439xx)     
    /* Mask OPTLOCK, OPTSTRT, BOR_LEV and BFB2 bits */
    optiontmp =  (uint8_t)((*(__IO uint8_t *)OPTCR_BYTE0_ADDRESS) & (uint8_t)0x1F);
 80053a0:	4b0a      	ldr	r3, [pc, #40]	; (80053cc <FLASH_OB_UserConfig+0x54>)
 80053a2:	781b      	ldrb	r3, [r3, #0]
 80053a4:	b2db      	uxtb	r3, r3
 80053a6:	f003 031f 	and.w	r3, r3, #31
 80053aa:	73fb      	strb	r3, [r7, #15]
    /* Mask OPTLOCK, OPTSTRT and BOR_LEV bits */
    optiontmp =  (uint8_t)((*(__IO uint8_t *)OPTCR_BYTE0_ADDRESS) & (uint8_t)0x0F); 
#endif /* STM32F40_41xxx || STM32F401xx */ 

    /* Update User Option Byte */
    *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS = OB_IWDG | (uint8_t)(OB_STDBY | (uint8_t)(OB_STOP | ((uint8_t)optiontmp))); 
 80053ac:	79ba      	ldrb	r2, [r7, #6]
 80053ae:	7bfb      	ldrb	r3, [r7, #15]
 80053b0:	4313      	orrs	r3, r2
 80053b2:	b2da      	uxtb	r2, r3
 80053b4:	797b      	ldrb	r3, [r7, #5]
 80053b6:	4313      	orrs	r3, r2
 80053b8:	b2da      	uxtb	r2, r3
 80053ba:	4904      	ldr	r1, [pc, #16]	; (80053cc <FLASH_OB_UserConfig+0x54>)
 80053bc:	79fb      	ldrb	r3, [r7, #7]
 80053be:	4313      	orrs	r3, r2
 80053c0:	b2db      	uxtb	r3, r3
 80053c2:	700b      	strb	r3, [r1, #0]
  }  
}
 80053c4:	bf00      	nop
 80053c6:	3710      	adds	r7, #16
 80053c8:	46bd      	mov	sp, r7
 80053ca:	bd80      	pop	{r7, pc}
 80053cc:	40023c14 	.word	0x40023c14

080053d0 <FLASH_OB_BootConfig>:
  *            @arg OB_Dual_BootEnabled: Dual Bank Boot Enable
  *            @arg OB_Dual_BootDisabled: Dual Bank Boot Disabled
  * @retval None
  */
void FLASH_OB_BootConfig(uint8_t OB_BOOT)
{
 80053d0:	b480      	push	{r7}
 80053d2:	b083      	sub	sp, #12
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	4603      	mov	r3, r0
 80053d8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_OB_BOOT(OB_BOOT));

  /* Set Dual Bank Boot */
  *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS &= (~FLASH_OPTCR_BFB2);
 80053da:	4b0b      	ldr	r3, [pc, #44]	; (8005408 <FLASH_OB_BootConfig+0x38>)
 80053dc:	781b      	ldrb	r3, [r3, #0]
 80053de:	b2db      	uxtb	r3, r3
 80053e0:	4a09      	ldr	r2, [pc, #36]	; (8005408 <FLASH_OB_BootConfig+0x38>)
 80053e2:	f023 0310 	bic.w	r3, r3, #16
 80053e6:	b2db      	uxtb	r3, r3
 80053e8:	7013      	strb	r3, [r2, #0]
  *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS |= OB_BOOT;
 80053ea:	4b07      	ldr	r3, [pc, #28]	; (8005408 <FLASH_OB_BootConfig+0x38>)
 80053ec:	781b      	ldrb	r3, [r3, #0]
 80053ee:	b2da      	uxtb	r2, r3
 80053f0:	4905      	ldr	r1, [pc, #20]	; (8005408 <FLASH_OB_BootConfig+0x38>)
 80053f2:	79fb      	ldrb	r3, [r7, #7]
 80053f4:	4313      	orrs	r3, r2
 80053f6:	b2db      	uxtb	r3, r3
 80053f8:	700b      	strb	r3, [r1, #0]

}
 80053fa:	bf00      	nop
 80053fc:	370c      	adds	r7, #12
 80053fe:	46bd      	mov	sp, r7
 8005400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005404:	4770      	bx	lr
 8005406:	bf00      	nop
 8005408:	40023c14 	.word	0x40023c14

0800540c <FLASH_OB_BORConfig>:
  *            @arg OB_BOR_LEVEL1: Supply voltage ranges from 2.1 to 2.4 V
  *            @arg OB_BOR_OFF: Supply voltage ranges from 1.62 to 2.1 V
  * @retval None
  */
void FLASH_OB_BORConfig(uint8_t OB_BOR)
{
 800540c:	b480      	push	{r7}
 800540e:	b083      	sub	sp, #12
 8005410:	af00      	add	r7, sp, #0
 8005412:	4603      	mov	r3, r0
 8005414:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_OB_BOR(OB_BOR));

  /* Set the BOR Level */
  *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS &= (~FLASH_OPTCR_BOR_LEV);
 8005416:	4b0b      	ldr	r3, [pc, #44]	; (8005444 <FLASH_OB_BORConfig+0x38>)
 8005418:	781b      	ldrb	r3, [r3, #0]
 800541a:	b2db      	uxtb	r3, r3
 800541c:	4a09      	ldr	r2, [pc, #36]	; (8005444 <FLASH_OB_BORConfig+0x38>)
 800541e:	f023 030c 	bic.w	r3, r3, #12
 8005422:	b2db      	uxtb	r3, r3
 8005424:	7013      	strb	r3, [r2, #0]
  *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS |= OB_BOR;
 8005426:	4b07      	ldr	r3, [pc, #28]	; (8005444 <FLASH_OB_BORConfig+0x38>)
 8005428:	781b      	ldrb	r3, [r3, #0]
 800542a:	b2da      	uxtb	r2, r3
 800542c:	4905      	ldr	r1, [pc, #20]	; (8005444 <FLASH_OB_BORConfig+0x38>)
 800542e:	79fb      	ldrb	r3, [r7, #7]
 8005430:	4313      	orrs	r3, r2
 8005432:	b2db      	uxtb	r3, r3
 8005434:	700b      	strb	r3, [r1, #0]

}
 8005436:	bf00      	nop
 8005438:	370c      	adds	r7, #12
 800543a:	46bd      	mov	sp, r7
 800543c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005440:	4770      	bx	lr
 8005442:	bf00      	nop
 8005444:	40023c14 	.word	0x40023c14

08005448 <FLASH_OB_Launch>:
  * @param  None
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
  *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
  */
FLASH_Status FLASH_OB_Launch(void)
{
 8005448:	b580      	push	{r7, lr}
 800544a:	b082      	sub	sp, #8
 800544c:	af00      	add	r7, sp, #0
  FLASH_Status status = FLASH_COMPLETE;
 800544e:	2309      	movs	r3, #9
 8005450:	71fb      	strb	r3, [r7, #7]

  /* Set the OPTSTRT bit in OPTCR register */
  *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS |= FLASH_OPTCR_OPTSTRT;
 8005452:	4b08      	ldr	r3, [pc, #32]	; (8005474 <FLASH_OB_Launch+0x2c>)
 8005454:	781b      	ldrb	r3, [r3, #0]
 8005456:	b2db      	uxtb	r3, r3
 8005458:	4a06      	ldr	r2, [pc, #24]	; (8005474 <FLASH_OB_Launch+0x2c>)
 800545a:	f043 0302 	orr.w	r3, r3, #2
 800545e:	b2db      	uxtb	r3, r3
 8005460:	7013      	strb	r3, [r2, #0]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation();
 8005462:	f000 f8f7 	bl	8005654 <FLASH_WaitForLastOperation>
 8005466:	4603      	mov	r3, r0
 8005468:	71fb      	strb	r3, [r7, #7]

  return status;
 800546a:	79fb      	ldrb	r3, [r7, #7]
}
 800546c:	4618      	mov	r0, r3
 800546e:	3708      	adds	r7, #8
 8005470:	46bd      	mov	sp, r7
 8005472:	bd80      	pop	{r7, pc}
 8005474:	40023c14 	.word	0x40023c14

08005478 <FLASH_OB_GetUser>:
  * @param  None
  * @retval The FLASH User Option Bytes values: IWDG_SW(Bit0), RST_STOP(Bit1)
  *         and RST_STDBY(Bit2).
  */
uint8_t FLASH_OB_GetUser(void)
{
 8005478:	b480      	push	{r7}
 800547a:	af00      	add	r7, sp, #0
  /* Return the User Option Byte */
  return (uint8_t)(FLASH->OPTCR >> 5);
 800547c:	4b04      	ldr	r3, [pc, #16]	; (8005490 <FLASH_OB_GetUser+0x18>)
 800547e:	695b      	ldr	r3, [r3, #20]
 8005480:	095b      	lsrs	r3, r3, #5
 8005482:	b2db      	uxtb	r3, r3
}
 8005484:	4618      	mov	r0, r3
 8005486:	46bd      	mov	sp, r7
 8005488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548c:	4770      	bx	lr
 800548e:	bf00      	nop
 8005490:	40023c00 	.word	0x40023c00

08005494 <FLASH_OB_GetWRP>:
  * @brief  Returns the FLASH Write Protection Option Bytes value.
  * @param  None
  * @retval The FLASH Write Protection  Option Bytes value
  */
uint16_t FLASH_OB_GetWRP(void)
{
 8005494:	b480      	push	{r7}
 8005496:	af00      	add	r7, sp, #0
  /* Return the FLASH write protection Register value */
  return (*(__IO uint16_t *)(OPTCR_BYTE2_ADDRESS));
 8005498:	4b03      	ldr	r3, [pc, #12]	; (80054a8 <FLASH_OB_GetWRP+0x14>)
 800549a:	881b      	ldrh	r3, [r3, #0]
 800549c:	b29b      	uxth	r3, r3
}
 800549e:	4618      	mov	r0, r3
 80054a0:	46bd      	mov	sp, r7
 80054a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a6:	4770      	bx	lr
 80054a8:	40023c16 	.word	0x40023c16

080054ac <FLASH_OB_GetWRP1>:
  *   
  * @param  None
  * @retval The FLASH Write Protection  Option Bytes value
  */
uint16_t FLASH_OB_GetWRP1(void)
{
 80054ac:	b480      	push	{r7}
 80054ae:	af00      	add	r7, sp, #0
  /* Return the FLASH write protection Register value */
  return (*(__IO uint16_t *)(OPTCR1_BYTE2_ADDRESS));
 80054b0:	4b03      	ldr	r3, [pc, #12]	; (80054c0 <FLASH_OB_GetWRP1+0x14>)
 80054b2:	881b      	ldrh	r3, [r3, #0]
 80054b4:	b29b      	uxth	r3, r3
}
 80054b6:	4618      	mov	r0, r3
 80054b8:	46bd      	mov	sp, r7
 80054ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054be:	4770      	bx	lr
 80054c0:	40023c1a 	.word	0x40023c1a

080054c4 <FLASH_OB_GetPCROP>:
  *   
  * @param  None
  * @retval The FLASH PC Read/Write Protection Option Bytes value
  */
uint16_t FLASH_OB_GetPCROP(void)
{
 80054c4:	b480      	push	{r7}
 80054c6:	af00      	add	r7, sp, #0
  /* Return the FLASH PC Read/write protection Register value */
  return (*(__IO uint16_t *)(OPTCR_BYTE2_ADDRESS));
 80054c8:	4b03      	ldr	r3, [pc, #12]	; (80054d8 <FLASH_OB_GetPCROP+0x14>)
 80054ca:	881b      	ldrh	r3, [r3, #0]
 80054cc:	b29b      	uxth	r3, r3
}
 80054ce:	4618      	mov	r0, r3
 80054d0:	46bd      	mov	sp, r7
 80054d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d6:	4770      	bx	lr
 80054d8:	40023c16 	.word	0x40023c16

080054dc <FLASH_OB_GetPCROP1>:
  *     
  * @param  None
  * @retval The FLASH PC Read/Write Protection Option Bytes value
  */
uint16_t FLASH_OB_GetPCROP1(void)
{
 80054dc:	b480      	push	{r7}
 80054de:	af00      	add	r7, sp, #0
  /* Return the FLASH write protection Register value */
  return (*(__IO uint16_t *)(OPTCR1_BYTE2_ADDRESS));
 80054e0:	4b03      	ldr	r3, [pc, #12]	; (80054f0 <FLASH_OB_GetPCROP1+0x14>)
 80054e2:	881b      	ldrh	r3, [r3, #0]
 80054e4:	b29b      	uxth	r3, r3
}
 80054e6:	4618      	mov	r0, r3
 80054e8:	46bd      	mov	sp, r7
 80054ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ee:	4770      	bx	lr
 80054f0:	40023c1a 	.word	0x40023c1a

080054f4 <FLASH_OB_GetRDP>:
  * @retval FLASH ReadOut Protection Status:
  *           - SET, when OB_RDP_Level_1 or OB_RDP_Level_2 is set
  *           - RESET, when OB_RDP_Level_0 is set
  */
FlagStatus FLASH_OB_GetRDP(void)
{
 80054f4:	b480      	push	{r7}
 80054f6:	b083      	sub	sp, #12
 80054f8:	af00      	add	r7, sp, #0
  FlagStatus readstatus = RESET;
 80054fa:	2300      	movs	r3, #0
 80054fc:	71fb      	strb	r3, [r7, #7]

  if ((*(__IO uint8_t*)(OPTCR_BYTE1_ADDRESS) != (uint8_t)OB_RDP_Level_0))
 80054fe:	4b08      	ldr	r3, [pc, #32]	; (8005520 <FLASH_OB_GetRDP+0x2c>)
 8005500:	781b      	ldrb	r3, [r3, #0]
 8005502:	b2db      	uxtb	r3, r3
 8005504:	2baa      	cmp	r3, #170	; 0xaa
 8005506:	d002      	beq.n	800550e <FLASH_OB_GetRDP+0x1a>
  {
    readstatus = SET;
 8005508:	2301      	movs	r3, #1
 800550a:	71fb      	strb	r3, [r7, #7]
 800550c:	e001      	b.n	8005512 <FLASH_OB_GetRDP+0x1e>
  }
  else
  {
    readstatus = RESET;
 800550e:	2300      	movs	r3, #0
 8005510:	71fb      	strb	r3, [r7, #7]
  }
  return readstatus;
 8005512:	79fb      	ldrb	r3, [r7, #7]
}
 8005514:	4618      	mov	r0, r3
 8005516:	370c      	adds	r7, #12
 8005518:	46bd      	mov	sp, r7
 800551a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551e:	4770      	bx	lr
 8005520:	40023c15 	.word	0x40023c15

08005524 <FLASH_OB_GetBOR>:
  *           - OB_BOR_LEVEL2: Supply voltage ranges from 2.4 to 2.7 V
  *           - OB_BOR_LEVEL1: Supply voltage ranges from 2.1 to 2.4 V
  *           - OB_BOR_OFF   : Supply voltage ranges from 1.62 to 2.1 V  
  */
uint8_t FLASH_OB_GetBOR(void)
{
 8005524:	b480      	push	{r7}
 8005526:	af00      	add	r7, sp, #0
  /* Return the FLASH BOR level */
  return (uint8_t)(*(__IO uint8_t *)(OPTCR_BYTE0_ADDRESS) & (uint8_t)0x0C);
 8005528:	4b05      	ldr	r3, [pc, #20]	; (8005540 <FLASH_OB_GetBOR+0x1c>)
 800552a:	781b      	ldrb	r3, [r3, #0]
 800552c:	b2db      	uxtb	r3, r3
 800552e:	f003 030c 	and.w	r3, r3, #12
 8005532:	b2db      	uxtb	r3, r3
}
 8005534:	4618      	mov	r0, r3
 8005536:	46bd      	mov	sp, r7
 8005538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553c:	4770      	bx	lr
 800553e:	bf00      	nop
 8005540:	40023c14 	.word	0x40023c14

08005544 <FLASH_ITConfig>:
  *            @arg FLASH_IT_ERR: FLASH Error Interrupt
  *            @arg FLASH_IT_EOP: FLASH end of operation Interrupt
  * @retval None 
  */
void FLASH_ITConfig(uint32_t FLASH_IT, FunctionalState NewState)
{
 8005544:	b480      	push	{r7}
 8005546:	b083      	sub	sp, #12
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
 800554c:	460b      	mov	r3, r1
 800554e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_IT(FLASH_IT)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if(NewState != DISABLE)
 8005550:	78fb      	ldrb	r3, [r7, #3]
 8005552:	2b00      	cmp	r3, #0
 8005554:	d006      	beq.n	8005564 <FLASH_ITConfig+0x20>
  {
    /* Enable the interrupt sources */
    FLASH->CR |= FLASH_IT;
 8005556:	4b0a      	ldr	r3, [pc, #40]	; (8005580 <FLASH_ITConfig+0x3c>)
 8005558:	691a      	ldr	r2, [r3, #16]
 800555a:	4909      	ldr	r1, [pc, #36]	; (8005580 <FLASH_ITConfig+0x3c>)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	4313      	orrs	r3, r2
 8005560:	610b      	str	r3, [r1, #16]
  else
  {
    /* Disable the interrupt sources */
    FLASH->CR &= ~(uint32_t)FLASH_IT;
  }
}
 8005562:	e006      	b.n	8005572 <FLASH_ITConfig+0x2e>
    FLASH->CR &= ~(uint32_t)FLASH_IT;
 8005564:	4b06      	ldr	r3, [pc, #24]	; (8005580 <FLASH_ITConfig+0x3c>)
 8005566:	691a      	ldr	r2, [r3, #16]
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	43db      	mvns	r3, r3
 800556c:	4904      	ldr	r1, [pc, #16]	; (8005580 <FLASH_ITConfig+0x3c>)
 800556e:	4013      	ands	r3, r2
 8005570:	610b      	str	r3, [r1, #16]
}
 8005572:	bf00      	nop
 8005574:	370c      	adds	r7, #12
 8005576:	46bd      	mov	sp, r7
 8005578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557c:	4770      	bx	lr
 800557e:	bf00      	nop
 8005580:	40023c00 	.word	0x40023c00

08005584 <FLASH_GetFlagStatus>:
  *            @arg FLASH_FLAG_RDERR: FLASH (PCROP) Read Protection error flag (STM32F42/43xxx and STM32F401xx devices) 
  *            @arg FLASH_FLAG_BSY: FLASH Busy flag
  * @retval The new state of FLASH_FLAG (SET or RESET).
  */
FlagStatus FLASH_GetFlagStatus(uint32_t FLASH_FLAG)
{
 8005584:	b480      	push	{r7}
 8005586:	b085      	sub	sp, #20
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 800558c:	2300      	movs	r3, #0
 800558e:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_FLASH_GET_FLAG(FLASH_FLAG));

  if((FLASH->SR & FLASH_FLAG) != (uint32_t)RESET)
 8005590:	4b08      	ldr	r3, [pc, #32]	; (80055b4 <FLASH_GetFlagStatus+0x30>)
 8005592:	68da      	ldr	r2, [r3, #12]
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	4013      	ands	r3, r2
 8005598:	2b00      	cmp	r3, #0
 800559a:	d002      	beq.n	80055a2 <FLASH_GetFlagStatus+0x1e>
  {
    bitstatus = SET;
 800559c:	2301      	movs	r3, #1
 800559e:	73fb      	strb	r3, [r7, #15]
 80055a0:	e001      	b.n	80055a6 <FLASH_GetFlagStatus+0x22>
  }
  else
  {
    bitstatus = RESET;
 80055a2:	2300      	movs	r3, #0
 80055a4:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the new state of FLASH_FLAG (SET or RESET) */
  return bitstatus; 
 80055a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80055a8:	4618      	mov	r0, r3
 80055aa:	3714      	adds	r7, #20
 80055ac:	46bd      	mov	sp, r7
 80055ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b2:	4770      	bx	lr
 80055b4:	40023c00 	.word	0x40023c00

080055b8 <FLASH_ClearFlag>:
  *            @arg FLASH_FLAG_PGSERR: FLASH Programming Sequence error flag
  *            @arg FLASH_FLAG_RDERR: FLASH Read Protection error flag (STM32F42/43xxx and STM32F401xx devices)   
  * @retval None
  */
void FLASH_ClearFlag(uint32_t FLASH_FLAG)
{
 80055b8:	b480      	push	{r7}
 80055ba:	b083      	sub	sp, #12
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_CLEAR_FLAG(FLASH_FLAG));
  
  /* Clear the flags */
  FLASH->SR = FLASH_FLAG;
 80055c0:	4a04      	ldr	r2, [pc, #16]	; (80055d4 <FLASH_ClearFlag+0x1c>)
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	60d3      	str	r3, [r2, #12]
}
 80055c6:	bf00      	nop
 80055c8:	370c      	adds	r7, #12
 80055ca:	46bd      	mov	sp, r7
 80055cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d0:	4770      	bx	lr
 80055d2:	bf00      	nop
 80055d4:	40023c00 	.word	0x40023c00

080055d8 <FLASH_GetStatus>:
  * @param  None
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
  *                       FLASH_ERROR_WRP, FLASH_ERROR_RD, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
  */
FLASH_Status FLASH_GetStatus(void)
{
 80055d8:	b480      	push	{r7}
 80055da:	b083      	sub	sp, #12
 80055dc:	af00      	add	r7, sp, #0
  FLASH_Status flashstatus = FLASH_COMPLETE;
 80055de:	2309      	movs	r3, #9
 80055e0:	71fb      	strb	r3, [r7, #7]
  
  if((FLASH->SR & FLASH_FLAG_BSY) == FLASH_FLAG_BSY) 
 80055e2:	4b1b      	ldr	r3, [pc, #108]	; (8005650 <FLASH_GetStatus+0x78>)
 80055e4:	68db      	ldr	r3, [r3, #12]
 80055e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80055ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055ee:	d102      	bne.n	80055f6 <FLASH_GetStatus+0x1e>
  {
    flashstatus = FLASH_BUSY;
 80055f0:	2301      	movs	r3, #1
 80055f2:	71fb      	strb	r3, [r7, #7]
 80055f4:	e025      	b.n	8005642 <FLASH_GetStatus+0x6a>
  }
  else 
  {  
    if((FLASH->SR & FLASH_FLAG_WRPERR) != (uint32_t)0x00)
 80055f6:	4b16      	ldr	r3, [pc, #88]	; (8005650 <FLASH_GetStatus+0x78>)
 80055f8:	68db      	ldr	r3, [r3, #12]
 80055fa:	f003 0310 	and.w	r3, r3, #16
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d002      	beq.n	8005608 <FLASH_GetStatus+0x30>
    { 
      flashstatus = FLASH_ERROR_WRP;
 8005602:	2306      	movs	r3, #6
 8005604:	71fb      	strb	r3, [r7, #7]
 8005606:	e01c      	b.n	8005642 <FLASH_GetStatus+0x6a>
    }
    else
    {
      if((FLASH->SR & FLASH_FLAG_RDERR) != (uint32_t)0x00)
 8005608:	4b11      	ldr	r3, [pc, #68]	; (8005650 <FLASH_GetStatus+0x78>)
 800560a:	68db      	ldr	r3, [r3, #12]
 800560c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005610:	2b00      	cmp	r3, #0
 8005612:	d002      	beq.n	800561a <FLASH_GetStatus+0x42>
      { 
        flashstatus = FLASH_ERROR_RD;
 8005614:	2302      	movs	r3, #2
 8005616:	71fb      	strb	r3, [r7, #7]
 8005618:	e013      	b.n	8005642 <FLASH_GetStatus+0x6a>
      } 
      else 
      {
        if((FLASH->SR & (uint32_t)0xEF) != (uint32_t)0x00)
 800561a:	4b0d      	ldr	r3, [pc, #52]	; (8005650 <FLASH_GetStatus+0x78>)
 800561c:	68db      	ldr	r3, [r3, #12]
 800561e:	f003 03ef 	and.w	r3, r3, #239	; 0xef
 8005622:	2b00      	cmp	r3, #0
 8005624:	d002      	beq.n	800562c <FLASH_GetStatus+0x54>
        {
          flashstatus = FLASH_ERROR_PROGRAM; 
 8005626:	2307      	movs	r3, #7
 8005628:	71fb      	strb	r3, [r7, #7]
 800562a:	e00a      	b.n	8005642 <FLASH_GetStatus+0x6a>
        }
        else
        {
          if((FLASH->SR & FLASH_FLAG_OPERR) != (uint32_t)0x00)
 800562c:	4b08      	ldr	r3, [pc, #32]	; (8005650 <FLASH_GetStatus+0x78>)
 800562e:	68db      	ldr	r3, [r3, #12]
 8005630:	f003 0302 	and.w	r3, r3, #2
 8005634:	2b00      	cmp	r3, #0
 8005636:	d002      	beq.n	800563e <FLASH_GetStatus+0x66>
          {
            flashstatus = FLASH_ERROR_OPERATION;
 8005638:	2308      	movs	r3, #8
 800563a:	71fb      	strb	r3, [r7, #7]
 800563c:	e001      	b.n	8005642 <FLASH_GetStatus+0x6a>
          }
          else
          {
            flashstatus = FLASH_COMPLETE;
 800563e:	2309      	movs	r3, #9
 8005640:	71fb      	strb	r3, [r7, #7]
        }
      }
    }
  }
  /* Return the FLASH Status */
  return flashstatus;
 8005642:	79fb      	ldrb	r3, [r7, #7]
}
 8005644:	4618      	mov	r0, r3
 8005646:	370c      	adds	r7, #12
 8005648:	46bd      	mov	sp, r7
 800564a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564e:	4770      	bx	lr
 8005650:	40023c00 	.word	0x40023c00

08005654 <FLASH_WaitForLastOperation>:
  * @param  None
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
  *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
  */
FLASH_Status FLASH_WaitForLastOperation(void)
{ 
 8005654:	b580      	push	{r7, lr}
 8005656:	b082      	sub	sp, #8
 8005658:	af00      	add	r7, sp, #0
  __IO FLASH_Status status = FLASH_COMPLETE;
 800565a:	2309      	movs	r3, #9
 800565c:	71fb      	strb	r3, [r7, #7]
   
  /* Check for the FLASH Status */
  status = FLASH_GetStatus();
 800565e:	f7ff ffbb 	bl	80055d8 <FLASH_GetStatus>
 8005662:	4603      	mov	r3, r0
 8005664:	71fb      	strb	r3, [r7, #7]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  while(status == FLASH_BUSY)
 8005666:	e003      	b.n	8005670 <FLASH_WaitForLastOperation+0x1c>
  {
    status = FLASH_GetStatus();
 8005668:	f7ff ffb6 	bl	80055d8 <FLASH_GetStatus>
 800566c:	4603      	mov	r3, r0
 800566e:	71fb      	strb	r3, [r7, #7]
  while(status == FLASH_BUSY)
 8005670:	79fb      	ldrb	r3, [r7, #7]
 8005672:	b2db      	uxtb	r3, r3
 8005674:	2b01      	cmp	r3, #1
 8005676:	d0f7      	beq.n	8005668 <FLASH_WaitForLastOperation+0x14>
  }
  /* Return the operation status */
  return status;
 8005678:	79fb      	ldrb	r3, [r7, #7]
 800567a:	b2db      	uxtb	r3, r3
}
 800567c:	4618      	mov	r0, r3
 800567e:	3708      	adds	r7, #8
 8005680:	46bd      	mov	sp, r7
 8005682:	bd80      	pop	{r7, pc}

08005684 <FMC_NORSRAMDeInit>:
  *            @arg FMC_Bank1_NORSRAM3: FMC Bank1 NOR/SRAM3 
  *            @arg FMC_Bank1_NORSRAM4: FMC Bank1 NOR/SRAM4 
  * @retval None
  */
void FMC_NORSRAMDeInit(uint32_t FMC_Bank)
{
 8005684:	b480      	push	{r7}
 8005686:	b083      	sub	sp, #12
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_FMC_NORSRAM_BANK(FMC_Bank));
  
  /* FMC_Bank1_NORSRAM1 */
  if(FMC_Bank == FMC_Bank1_NORSRAM1)
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2b00      	cmp	r3, #0
 8005690:	d107      	bne.n	80056a2 <FMC_NORSRAMDeInit+0x1e>
  {
    FMC_Bank1->BTCR[FMC_Bank] = 0x000030DB;    
 8005692:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	f243 01db 	movw	r1, #12507	; 0x30db
 800569c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80056a0:	e006      	b.n	80056b0 <FMC_NORSRAMDeInit+0x2c>
  }
  /* FMC_Bank1_NORSRAM2,  FMC_Bank1_NORSRAM3 or FMC_Bank1_NORSRAM4 */
  else
  {   
    FMC_Bank1->BTCR[FMC_Bank] = 0x000030D2; 
 80056a2:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	f243 01d2 	movw	r1, #12498	; 0x30d2
 80056ac:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  }
  FMC_Bank1->BTCR[FMC_Bank + 1] = 0x0FFFFFFF;
 80056b0:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	3301      	adds	r3, #1
 80056b8:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 80056bc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  FMC_Bank1E->BWTR[FMC_Bank] = 0x0FFFFFFF;  
 80056c0:	4a05      	ldr	r2, [pc, #20]	; (80056d8 <FMC_NORSRAMDeInit+0x54>)
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 80056c8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 80056cc:	bf00      	nop
 80056ce:	370c      	adds	r7, #12
 80056d0:	46bd      	mov	sp, r7
 80056d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d6:	4770      	bx	lr
 80056d8:	a0000104 	.word	0xa0000104

080056dc <FMC_NORSRAMInit>:
  *         that contains the configuration information for the FMC NOR/SRAM 
  *         specified Banks.                       
  * @retval None
  */
void FMC_NORSRAMInit(FMC_NORSRAMInitTypeDef* FMC_NORSRAMInitStruct)
{
 80056dc:	b480      	push	{r7}
 80056de:	b085      	sub	sp, #20
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpr = 0;
 80056e4:	2300      	movs	r3, #0
 80056e6:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FMC_DATA_LATENCY(FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_DataLatency));
  assert_param(IS_FMC_ACCESS_MODE(FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AccessMode)); 
  
  /* NOR/SRAM Bank control register configuration */ 
  FMC_Bank1->BTCR[FMC_NORSRAMInitStruct->FMC_Bank] =   
            (uint32_t)FMC_NORSRAMInitStruct->FMC_DataAddressMux |
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	685a      	ldr	r2, [r3, #4]
            FMC_NORSRAMInitStruct->FMC_MemoryType |
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	689b      	ldr	r3, [r3, #8]
            (uint32_t)FMC_NORSRAMInitStruct->FMC_DataAddressMux |
 80056f0:	431a      	orrs	r2, r3
            FMC_NORSRAMInitStruct->FMC_MemoryDataWidth |
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	68db      	ldr	r3, [r3, #12]
            FMC_NORSRAMInitStruct->FMC_MemoryType |
 80056f6:	431a      	orrs	r2, r3
            FMC_NORSRAMInitStruct->FMC_BurstAccessMode |
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	691b      	ldr	r3, [r3, #16]
            FMC_NORSRAMInitStruct->FMC_MemoryDataWidth |
 80056fc:	431a      	orrs	r2, r3
            FMC_NORSRAMInitStruct->FMC_WaitSignalPolarity |
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	695b      	ldr	r3, [r3, #20]
            FMC_NORSRAMInitStruct->FMC_BurstAccessMode |
 8005702:	431a      	orrs	r2, r3
            FMC_NORSRAMInitStruct->FMC_WrapMode |
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	699b      	ldr	r3, [r3, #24]
            FMC_NORSRAMInitStruct->FMC_WaitSignalPolarity |
 8005708:	431a      	orrs	r2, r3
            FMC_NORSRAMInitStruct->FMC_WaitSignalActive |
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	69db      	ldr	r3, [r3, #28]
            FMC_NORSRAMInitStruct->FMC_WrapMode |
 800570e:	431a      	orrs	r2, r3
            FMC_NORSRAMInitStruct->FMC_WriteOperation |
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	6a1b      	ldr	r3, [r3, #32]
            FMC_NORSRAMInitStruct->FMC_WaitSignalActive |
 8005714:	431a      	orrs	r2, r3
            FMC_NORSRAMInitStruct->FMC_WaitSignal |
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
            FMC_NORSRAMInitStruct->FMC_WriteOperation |
 800571a:	431a      	orrs	r2, r3
            FMC_NORSRAMInitStruct->FMC_ExtendedMode |
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
            FMC_NORSRAMInitStruct->FMC_WaitSignal |
 8005720:	431a      	orrs	r2, r3
            FMC_NORSRAMInitStruct->FMC_AsynchronousWait |
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            FMC_NORSRAMInitStruct->FMC_ExtendedMode |
 8005726:	431a      	orrs	r2, r3
            FMC_NORSRAMInitStruct->FMC_WriteBurst |
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            FMC_NORSRAMInitStruct->FMC_AsynchronousWait |
 800572c:	ea42 0103 	orr.w	r1, r2, r3
            FMC_NORSRAMInitStruct->FMC_ContinousClock;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	6b5a      	ldr	r2, [r3, #52]	; 0x34
  FMC_Bank1->BTCR[FMC_NORSRAMInitStruct->FMC_Bank] =   
 8005734:	f04f 4020 	mov.w	r0, #2684354560	; 0xa0000000
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
            FMC_NORSRAMInitStruct->FMC_WriteBurst |
 800573c:	430a      	orrs	r2, r1
  FMC_Bank1->BTCR[FMC_NORSRAMInitStruct->FMC_Bank] =   
 800573e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

            
  if(FMC_NORSRAMInitStruct->FMC_MemoryType == FMC_MemoryType_NOR)
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	689b      	ldr	r3, [r3, #8]
 8005746:	2b08      	cmp	r3, #8
 8005748:	d10d      	bne.n	8005766 <FMC_NORSRAMInit+0x8a>
  {
    FMC_Bank1->BTCR[FMC_NORSRAMInitStruct->FMC_Bank] |= (uint32_t)BCR_FACCEN_SET;
 800574a:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005756:	f04f 4120 	mov.w	r1, #2684354560	; 0xa0000000
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005762:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }

  /* Configure Continuous clock feature when bank2..4 is used */
  if((FMC_NORSRAMInitStruct->FMC_ContinousClock == FMC_CClock_SyncAsync) && (FMC_NORSRAMInitStruct->FMC_Bank != FMC_Bank1_NORSRAM1))
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800576a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800576e:	d124      	bne.n	80057ba <FMC_NORSRAMInit+0xde>
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d020      	beq.n	80057ba <FMC_NORSRAMInit+0xde>
  {
    tmpr = (uint32_t)((FMC_Bank1->BTCR[FMC_Bank1_NORSRAM1+1]) & ~(((uint32_t)0x0F) << 20));    
 8005778:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 800577c:	685b      	ldr	r3, [r3, #4]
 800577e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005782:	60fb      	str	r3, [r7, #12]
    
    FMC_Bank1->BTCR[FMC_Bank1_NORSRAM1]  |= FMC_NORSRAMInitStruct->FMC_ContinousClock;
 8005784:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 8005788:	681a      	ldr	r2, [r3, #0]
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800578e:	f04f 4120 	mov.w	r1, #2684354560	; 0xa0000000
 8005792:	4313      	orrs	r3, r2
 8005794:	600b      	str	r3, [r1, #0]
    FMC_Bank1->BTCR[FMC_Bank1_NORSRAM1]  |= FMC_BurstAccessMode_Enable;
 8005796:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 80057a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80057a4:	6013      	str	r3, [r2, #0]
    FMC_Bank1->BTCR[FMC_Bank1_NORSRAM1+1] = (uint32_t)(tmpr | (((FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_CLKDivision)-1) << 20));
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057aa:	691b      	ldr	r3, [r3, #16]
 80057ac:	3b01      	subs	r3, #1
 80057ae:	051a      	lsls	r2, r3, #20
 80057b0:	f04f 4120 	mov.w	r1, #2684354560	; 0xa0000000
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	4313      	orrs	r3, r2
 80057b8:	604b      	str	r3, [r1, #4]
  }
  
  /* NOR/SRAM Bank timing register configuration */
  FMC_Bank1->BTCR[FMC_NORSRAMInitStruct->FMC_Bank+1] =   
            (uint32_t)FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AddressSetupTime |
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057be:	681a      	ldr	r2, [r3, #0]
            (FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AddressHoldTime << 4) |
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057c4:	685b      	ldr	r3, [r3, #4]
 80057c6:	011b      	lsls	r3, r3, #4
            (uint32_t)FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AddressSetupTime |
 80057c8:	431a      	orrs	r2, r3
            (FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_DataSetupTime << 8) |
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057ce:	689b      	ldr	r3, [r3, #8]
 80057d0:	021b      	lsls	r3, r3, #8
            (FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AddressHoldTime << 4) |
 80057d2:	431a      	orrs	r2, r3
            (FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_BusTurnAroundDuration << 16) |
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057d8:	68db      	ldr	r3, [r3, #12]
 80057da:	041b      	lsls	r3, r3, #16
            (FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_DataSetupTime << 8) |
 80057dc:	431a      	orrs	r2, r3
            ((FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_CLKDivision) << 20) |
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057e2:	691b      	ldr	r3, [r3, #16]
 80057e4:	051b      	lsls	r3, r3, #20
            (FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_BusTurnAroundDuration << 16) |
 80057e6:	431a      	orrs	r2, r3
            ((FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_DataLatency) << 24) |
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057ec:	695b      	ldr	r3, [r3, #20]
 80057ee:	061b      	lsls	r3, r3, #24
            ((FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_CLKDivision) << 20) |
 80057f0:	ea42 0103 	orr.w	r1, r2, r3
             FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AccessMode;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057f8:	699a      	ldr	r2, [r3, #24]
  FMC_Bank1->BTCR[FMC_NORSRAMInitStruct->FMC_Bank+1] =   
 80057fa:	f04f 4020 	mov.w	r0, #2684354560	; 0xa0000000
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	3301      	adds	r3, #1
            ((FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_DataLatency) << 24) |
 8005804:	430a      	orrs	r2, r1
  FMC_Bank1->BTCR[FMC_NORSRAMInitStruct->FMC_Bank+1] =   
 8005806:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
     
  /* NOR/SRAM Bank timing register for write configuration, if extended mode is used */
  if(FMC_NORSRAMInitStruct->FMC_ExtendedMode == FMC_ExtendedMode_Enable)
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800580e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005812:	d121      	bne.n	8005858 <FMC_NORSRAMInit+0x17c>
    assert_param(IS_FMC_CLK_DIV(FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_CLKDivision));
    assert_param(IS_FMC_DATA_LATENCY(FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_DataLatency));
    assert_param(IS_FMC_ACCESS_MODE(FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_AccessMode));
    
    FMC_Bank1E->BWTR[FMC_NORSRAMInitStruct->FMC_Bank] =   
               (uint32_t)FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_AddressSetupTime |
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005818:	681a      	ldr	r2, [r3, #0]
               (FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_AddressHoldTime << 4 )|
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800581e:	685b      	ldr	r3, [r3, #4]
 8005820:	011b      	lsls	r3, r3, #4
               (uint32_t)FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_AddressSetupTime |
 8005822:	431a      	orrs	r2, r3
               (FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_DataSetupTime << 8) |
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005828:	689b      	ldr	r3, [r3, #8]
 800582a:	021b      	lsls	r3, r3, #8
               (FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_AddressHoldTime << 4 )|
 800582c:	431a      	orrs	r2, r3
               ((FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_CLKDivision) << 20) |
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005832:	691b      	ldr	r3, [r3, #16]
 8005834:	051b      	lsls	r3, r3, #20
               (FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_DataSetupTime << 8) |
 8005836:	431a      	orrs	r2, r3
               ((FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_DataLatency) << 24) |
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800583c:	695b      	ldr	r3, [r3, #20]
 800583e:	061b      	lsls	r3, r3, #24
               ((FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_CLKDivision) << 20) |
 8005840:	ea42 0103 	orr.w	r1, r2, r3
               FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_AccessMode;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005848:	699a      	ldr	r2, [r3, #24]
    FMC_Bank1E->BWTR[FMC_NORSRAMInitStruct->FMC_Bank] =   
 800584a:	480a      	ldr	r0, [pc, #40]	; (8005874 <FMC_NORSRAMInit+0x198>)
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
               ((FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_DataLatency) << 24) |
 8005850:	430a      	orrs	r2, r1
    FMC_Bank1E->BWTR[FMC_NORSRAMInitStruct->FMC_Bank] =   
 8005852:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
  else
  {
    FMC_Bank1E->BWTR[FMC_NORSRAMInitStruct->FMC_Bank] = 0x0FFFFFFF;
  }
  
}
 8005856:	e006      	b.n	8005866 <FMC_NORSRAMInit+0x18a>
    FMC_Bank1E->BWTR[FMC_NORSRAMInitStruct->FMC_Bank] = 0x0FFFFFFF;
 8005858:	4a06      	ldr	r2, [pc, #24]	; (8005874 <FMC_NORSRAMInit+0x198>)
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8005862:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8005866:	bf00      	nop
 8005868:	3714      	adds	r7, #20
 800586a:	46bd      	mov	sp, r7
 800586c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005870:	4770      	bx	lr
 8005872:	bf00      	nop
 8005874:	a0000104 	.word	0xa0000104

08005878 <FMC_NORSRAMStructInit>:
  * @param  FMC_NORSRAMInitStruct: pointer to a FMC_NORSRAMInitTypeDef structure 
  *         which will be initialized.
  * @retval None
  */
void FMC_NORSRAMStructInit(FMC_NORSRAMInitTypeDef* FMC_NORSRAMInitStruct)
{  
 8005878:	b480      	push	{r7}
 800587a:	b083      	sub	sp, #12
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
  /* Reset NOR/SRAM Init structure parameters values */
  FMC_NORSRAMInitStruct->FMC_Bank = FMC_Bank1_NORSRAM1;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2200      	movs	r2, #0
 8005884:	601a      	str	r2, [r3, #0]
  FMC_NORSRAMInitStruct->FMC_DataAddressMux = FMC_DataAddressMux_Enable;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	2202      	movs	r2, #2
 800588a:	605a      	str	r2, [r3, #4]
  FMC_NORSRAMInitStruct->FMC_MemoryType = FMC_MemoryType_SRAM;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2200      	movs	r2, #0
 8005890:	609a      	str	r2, [r3, #8]
  FMC_NORSRAMInitStruct->FMC_MemoryDataWidth = FMC_NORSRAM_MemoryDataWidth_16b;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	2210      	movs	r2, #16
 8005896:	60da      	str	r2, [r3, #12]
  FMC_NORSRAMInitStruct->FMC_BurstAccessMode = FMC_BurstAccessMode_Disable;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2200      	movs	r2, #0
 800589c:	611a      	str	r2, [r3, #16]
  FMC_NORSRAMInitStruct->FMC_AsynchronousWait = FMC_AsynchronousWait_Disable;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2200      	movs	r2, #0
 80058a2:	62da      	str	r2, [r3, #44]	; 0x2c
  FMC_NORSRAMInitStruct->FMC_WaitSignalPolarity = FMC_WaitSignalPolarity_Low;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2200      	movs	r2, #0
 80058a8:	615a      	str	r2, [r3, #20]
  FMC_NORSRAMInitStruct->FMC_WrapMode = FMC_WrapMode_Disable;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	2200      	movs	r2, #0
 80058ae:	619a      	str	r2, [r3, #24]
  FMC_NORSRAMInitStruct->FMC_WaitSignalActive = FMC_WaitSignalActive_BeforeWaitState;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2200      	movs	r2, #0
 80058b4:	61da      	str	r2, [r3, #28]
  FMC_NORSRAMInitStruct->FMC_WriteOperation = FMC_WriteOperation_Enable;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80058bc:	621a      	str	r2, [r3, #32]
  FMC_NORSRAMInitStruct->FMC_WaitSignal = FMC_WaitSignal_Enable;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80058c4:	625a      	str	r2, [r3, #36]	; 0x24
  FMC_NORSRAMInitStruct->FMC_ExtendedMode = FMC_ExtendedMode_Disable;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	2200      	movs	r2, #0
 80058ca:	629a      	str	r2, [r3, #40]	; 0x28
  FMC_NORSRAMInitStruct->FMC_WriteBurst = FMC_WriteBurst_Disable;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2200      	movs	r2, #0
 80058d0:	631a      	str	r2, [r3, #48]	; 0x30
  FMC_NORSRAMInitStruct->FMC_ContinousClock = FMC_CClock_SyncOnly;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	2200      	movs	r2, #0
 80058d6:	635a      	str	r2, [r3, #52]	; 0x34
  
  FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AddressSetupTime = 15;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058dc:	220f      	movs	r2, #15
 80058de:	601a      	str	r2, [r3, #0]
  FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AddressHoldTime = 15;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058e4:	220f      	movs	r2, #15
 80058e6:	605a      	str	r2, [r3, #4]
  FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_DataSetupTime = 255;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058ec:	22ff      	movs	r2, #255	; 0xff
 80058ee:	609a      	str	r2, [r3, #8]
  FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_BusTurnAroundDuration = 15;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058f4:	220f      	movs	r2, #15
 80058f6:	60da      	str	r2, [r3, #12]
  FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_CLKDivision = 15;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058fc:	220f      	movs	r2, #15
 80058fe:	611a      	str	r2, [r3, #16]
  FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_DataLatency = 15;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005904:	220f      	movs	r2, #15
 8005906:	615a      	str	r2, [r3, #20]
  FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AccessMode = FMC_AccessMode_A; 
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800590c:	2200      	movs	r2, #0
 800590e:	619a      	str	r2, [r3, #24]
  FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_AddressSetupTime = 15;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005914:	220f      	movs	r2, #15
 8005916:	601a      	str	r2, [r3, #0]
  FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_AddressHoldTime = 15;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800591c:	220f      	movs	r2, #15
 800591e:	605a      	str	r2, [r3, #4]
  FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_DataSetupTime = 255;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005924:	22ff      	movs	r2, #255	; 0xff
 8005926:	609a      	str	r2, [r3, #8]
  FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_BusTurnAroundDuration = 15;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800592c:	220f      	movs	r2, #15
 800592e:	60da      	str	r2, [r3, #12]
  FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_CLKDivision = 15;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005934:	220f      	movs	r2, #15
 8005936:	611a      	str	r2, [r3, #16]
  FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_DataLatency = 15;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800593c:	220f      	movs	r2, #15
 800593e:	615a      	str	r2, [r3, #20]
  FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_AccessMode = FMC_AccessMode_A;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005944:	2200      	movs	r2, #0
 8005946:	619a      	str	r2, [r3, #24]
}
 8005948:	bf00      	nop
 800594a:	370c      	adds	r7, #12
 800594c:	46bd      	mov	sp, r7
 800594e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005952:	4770      	bx	lr

08005954 <FMC_NORSRAMCmd>:
  *            @arg FMC_Bank1_NORSRAM4: FMC Bank1 NOR/SRAM4 
  * @param  NewState: new state of the FMC_Bank. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void FMC_NORSRAMCmd(uint32_t FMC_Bank, FunctionalState NewState)
{
 8005954:	b480      	push	{r7}
 8005956:	b083      	sub	sp, #12
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
 800595c:	460b      	mov	r3, r1
 800595e:	70fb      	strb	r3, [r7, #3]
  assert_param(IS_FMC_NORSRAM_BANK(FMC_Bank));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8005960:	78fb      	ldrb	r3, [r7, #3]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d00c      	beq.n	8005980 <FMC_NORSRAMCmd+0x2c>
  {
    /* Enable the selected NOR/SRAM Bank by setting the PBKEN bit in the BCRx register */
    FMC_Bank1->BTCR[FMC_Bank] |= BCR_MBKEN_SET;
 8005966:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005970:	f04f 4120 	mov.w	r1, #2684354560	; 0xa0000000
 8005974:	f043 0201 	orr.w	r2, r3, #1
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  else
  {
    /* Disable the selected NOR/SRAM Bank by clearing the PBKEN bit in the BCRx register */
    FMC_Bank1->BTCR[FMC_Bank] &= BCR_MBKEN_RESET;
  }
}
 800597e:	e00b      	b.n	8005998 <FMC_NORSRAMCmd+0x44>
    FMC_Bank1->BTCR[FMC_Bank] &= BCR_MBKEN_RESET;
 8005980:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800598a:	f04f 4120 	mov.w	r1, #2684354560	; 0xa0000000
 800598e:	4b05      	ldr	r3, [pc, #20]	; (80059a4 <FMC_NORSRAMCmd+0x50>)
 8005990:	4013      	ands	r3, r2
 8005992:	687a      	ldr	r2, [r7, #4]
 8005994:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
}
 8005998:	bf00      	nop
 800599a:	370c      	adds	r7, #12
 800599c:	46bd      	mov	sp, r7
 800599e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a2:	4770      	bx	lr
 80059a4:	000ffffe 	.word	0x000ffffe

080059a8 <FMC_NANDDeInit>:
  *            @arg FMC_Bank2_NAND: FMC Bank2 NAND 
  *            @arg FMC_Bank3_NAND: FMC Bank3 NAND 
  * @retval None
  */
void FMC_NANDDeInit(uint32_t FMC_Bank)
{
 80059a8:	b480      	push	{r7}
 80059aa:	b083      	sub	sp, #12
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_FMC_NAND_BANK(FMC_Bank));
  
  if(FMC_Bank == FMC_Bank2_NAND)
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2b10      	cmp	r3, #16
 80059b4:	d10e      	bne.n	80059d4 <FMC_NANDDeInit+0x2c>
  {
    /* Set the FMC_Bank2 registers to their reset values */
    FMC_Bank2->PCR2 = 0x00000018;
 80059b6:	4b11      	ldr	r3, [pc, #68]	; (80059fc <FMC_NANDDeInit+0x54>)
 80059b8:	2218      	movs	r2, #24
 80059ba:	601a      	str	r2, [r3, #0]
    FMC_Bank2->SR2 = 0x00000040;
 80059bc:	4b0f      	ldr	r3, [pc, #60]	; (80059fc <FMC_NANDDeInit+0x54>)
 80059be:	2240      	movs	r2, #64	; 0x40
 80059c0:	605a      	str	r2, [r3, #4]
    FMC_Bank2->PMEM2 = 0xFCFCFCFC;
 80059c2:	4b0e      	ldr	r3, [pc, #56]	; (80059fc <FMC_NANDDeInit+0x54>)
 80059c4:	f04f 32fc 	mov.w	r2, #4244438268	; 0xfcfcfcfc
 80059c8:	609a      	str	r2, [r3, #8]
    FMC_Bank2->PATT2 = 0xFCFCFCFC;  
 80059ca:	4b0c      	ldr	r3, [pc, #48]	; (80059fc <FMC_NANDDeInit+0x54>)
 80059cc:	f04f 32fc 	mov.w	r2, #4244438268	; 0xfcfcfcfc
 80059d0:	60da      	str	r2, [r3, #12]
    FMC_Bank3->PCR3 = 0x00000018;
    FMC_Bank3->SR3 = 0x00000040;
    FMC_Bank3->PMEM3 = 0xFCFCFCFC;
    FMC_Bank3->PATT3 = 0xFCFCFCFC; 
  }  
}
 80059d2:	e00d      	b.n	80059f0 <FMC_NANDDeInit+0x48>
    FMC_Bank3->PCR3 = 0x00000018;
 80059d4:	4b0a      	ldr	r3, [pc, #40]	; (8005a00 <FMC_NANDDeInit+0x58>)
 80059d6:	2218      	movs	r2, #24
 80059d8:	601a      	str	r2, [r3, #0]
    FMC_Bank3->SR3 = 0x00000040;
 80059da:	4b09      	ldr	r3, [pc, #36]	; (8005a00 <FMC_NANDDeInit+0x58>)
 80059dc:	2240      	movs	r2, #64	; 0x40
 80059de:	605a      	str	r2, [r3, #4]
    FMC_Bank3->PMEM3 = 0xFCFCFCFC;
 80059e0:	4b07      	ldr	r3, [pc, #28]	; (8005a00 <FMC_NANDDeInit+0x58>)
 80059e2:	f04f 32fc 	mov.w	r2, #4244438268	; 0xfcfcfcfc
 80059e6:	609a      	str	r2, [r3, #8]
    FMC_Bank3->PATT3 = 0xFCFCFCFC; 
 80059e8:	4b05      	ldr	r3, [pc, #20]	; (8005a00 <FMC_NANDDeInit+0x58>)
 80059ea:	f04f 32fc 	mov.w	r2, #4244438268	; 0xfcfcfcfc
 80059ee:	60da      	str	r2, [r3, #12]
}
 80059f0:	bf00      	nop
 80059f2:	370c      	adds	r7, #12
 80059f4:	46bd      	mov	sp, r7
 80059f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fa:	4770      	bx	lr
 80059fc:	a0000060 	.word	0xa0000060
 8005a00:	a0000080 	.word	0xa0000080

08005a04 <FMC_NANDInit>:
  * @param  FMC_NANDInitStruct : pointer to a FMC_NANDInitTypeDef structure that
  *         contains the configuration information for the FMC NAND specified Banks.                       
  * @retval None
  */
void FMC_NANDInit(FMC_NANDInitTypeDef* FMC_NANDInitStruct)
{
 8005a04:	b480      	push	{r7}
 8005a06:	b087      	sub	sp, #28
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
  uint32_t tmppcr = 0x00000000, tmppmem = 0x00000000, tmppatt = 0x00000000; 
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	617b      	str	r3, [r7, #20]
 8005a10:	2300      	movs	r3, #0
 8005a12:	613b      	str	r3, [r7, #16]
 8005a14:	2300      	movs	r3, #0
 8005a16:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FMC_WAIT_TIME(FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_WaitSetupTime));
  assert_param(IS_FMC_HOLD_TIME(FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HoldSetupTime));
  assert_param(IS_FMC_HIZ_TIME(FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HiZSetupTime));
  
  /* Set the tmppcr value according to FMC_NANDInitStruct parameters */
  tmppcr = (uint32_t)FMC_NANDInitStruct->FMC_Waitfeature |
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	685a      	ldr	r2, [r3, #4]
            PCR_MEMORYTYPE_NAND |
            FMC_NANDInitStruct->FMC_MemoryDataWidth |
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	689b      	ldr	r3, [r3, #8]
            PCR_MEMORYTYPE_NAND |
 8005a20:	431a      	orrs	r2, r3
            FMC_NANDInitStruct->FMC_ECC |
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	68db      	ldr	r3, [r3, #12]
            FMC_NANDInitStruct->FMC_MemoryDataWidth |
 8005a26:	431a      	orrs	r2, r3
            FMC_NANDInitStruct->FMC_ECCPageSize |
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	691b      	ldr	r3, [r3, #16]
            FMC_NANDInitStruct->FMC_ECC |
 8005a2c:	431a      	orrs	r2, r3
            (FMC_NANDInitStruct->FMC_TCLRSetupTime << 9 )|
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	695b      	ldr	r3, [r3, #20]
 8005a32:	025b      	lsls	r3, r3, #9
            FMC_NANDInitStruct->FMC_ECCPageSize |
 8005a34:	431a      	orrs	r2, r3
            (FMC_NANDInitStruct->FMC_TARSetupTime << 13);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	699b      	ldr	r3, [r3, #24]
 8005a3a:	035b      	lsls	r3, r3, #13
            (FMC_NANDInitStruct->FMC_TCLRSetupTime << 9 )|
 8005a3c:	4313      	orrs	r3, r2
  tmppcr = (uint32_t)FMC_NANDInitStruct->FMC_Waitfeature |
 8005a3e:	f043 0308 	orr.w	r3, r3, #8
 8005a42:	617b      	str	r3, [r7, #20]
            
  /* Set tmppmem value according to FMC_CommonSpaceTimingStructure parameters */
  tmppmem = (uint32_t)FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_SetupTime |
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	69db      	ldr	r3, [r3, #28]
 8005a48:	681a      	ldr	r2, [r3, #0]
            (FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_WaitSetupTime << 8) |
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	69db      	ldr	r3, [r3, #28]
 8005a4e:	685b      	ldr	r3, [r3, #4]
 8005a50:	021b      	lsls	r3, r3, #8
  tmppmem = (uint32_t)FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_SetupTime |
 8005a52:	431a      	orrs	r2, r3
            (FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HoldSetupTime << 16)|
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	69db      	ldr	r3, [r3, #28]
 8005a58:	689b      	ldr	r3, [r3, #8]
 8005a5a:	041b      	lsls	r3, r3, #16
            (FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_WaitSetupTime << 8) |
 8005a5c:	431a      	orrs	r2, r3
            (FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HiZSetupTime << 24); 
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	69db      	ldr	r3, [r3, #28]
 8005a62:	68db      	ldr	r3, [r3, #12]
 8005a64:	061b      	lsls	r3, r3, #24
  tmppmem = (uint32_t)FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_SetupTime |
 8005a66:	4313      	orrs	r3, r2
 8005a68:	613b      	str	r3, [r7, #16]
            
  /* Set tmppatt value according to FMC_AttributeSpaceTimingStructure parameters */
  tmppatt = (uint32_t)FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_SetupTime |
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6a1b      	ldr	r3, [r3, #32]
 8005a6e:	681a      	ldr	r2, [r3, #0]
            (FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_WaitSetupTime << 8) |
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	6a1b      	ldr	r3, [r3, #32]
 8005a74:	685b      	ldr	r3, [r3, #4]
 8005a76:	021b      	lsls	r3, r3, #8
  tmppatt = (uint32_t)FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_SetupTime |
 8005a78:	431a      	orrs	r2, r3
            (FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HoldSetupTime << 16)|
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6a1b      	ldr	r3, [r3, #32]
 8005a7e:	689b      	ldr	r3, [r3, #8]
 8005a80:	041b      	lsls	r3, r3, #16
            (FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_WaitSetupTime << 8) |
 8005a82:	431a      	orrs	r2, r3
            (FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HiZSetupTime << 24);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	6a1b      	ldr	r3, [r3, #32]
 8005a88:	68db      	ldr	r3, [r3, #12]
 8005a8a:	061b      	lsls	r3, r3, #24
  tmppatt = (uint32_t)FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_SetupTime |
 8005a8c:	4313      	orrs	r3, r2
 8005a8e:	60fb      	str	r3, [r7, #12]
  
  if(FMC_NANDInitStruct->FMC_Bank == FMC_Bank2_NAND)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	2b10      	cmp	r3, #16
 8005a96:	d109      	bne.n	8005aac <FMC_NANDInit+0xa8>
  {
    /* FMC_Bank2_NAND registers configuration */
    FMC_Bank2->PCR2 = tmppcr;
 8005a98:	4a0c      	ldr	r2, [pc, #48]	; (8005acc <FMC_NANDInit+0xc8>)
 8005a9a:	697b      	ldr	r3, [r7, #20]
 8005a9c:	6013      	str	r3, [r2, #0]
    FMC_Bank2->PMEM2 = tmppmem;
 8005a9e:	4a0b      	ldr	r2, [pc, #44]	; (8005acc <FMC_NANDInit+0xc8>)
 8005aa0:	693b      	ldr	r3, [r7, #16]
 8005aa2:	6093      	str	r3, [r2, #8]
    FMC_Bank2->PATT2 = tmppatt;
 8005aa4:	4a09      	ldr	r2, [pc, #36]	; (8005acc <FMC_NANDInit+0xc8>)
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	60d3      	str	r3, [r2, #12]
    /* FMC_Bank3_NAND registers configuration */
    FMC_Bank3->PCR3 = tmppcr;
    FMC_Bank3->PMEM3 = tmppmem;
    FMC_Bank3->PATT3 = tmppatt;
  }
}
 8005aaa:	e008      	b.n	8005abe <FMC_NANDInit+0xba>
    FMC_Bank3->PCR3 = tmppcr;
 8005aac:	4a08      	ldr	r2, [pc, #32]	; (8005ad0 <FMC_NANDInit+0xcc>)
 8005aae:	697b      	ldr	r3, [r7, #20]
 8005ab0:	6013      	str	r3, [r2, #0]
    FMC_Bank3->PMEM3 = tmppmem;
 8005ab2:	4a07      	ldr	r2, [pc, #28]	; (8005ad0 <FMC_NANDInit+0xcc>)
 8005ab4:	693b      	ldr	r3, [r7, #16]
 8005ab6:	6093      	str	r3, [r2, #8]
    FMC_Bank3->PATT3 = tmppatt;
 8005ab8:	4a05      	ldr	r2, [pc, #20]	; (8005ad0 <FMC_NANDInit+0xcc>)
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	60d3      	str	r3, [r2, #12]
}
 8005abe:	bf00      	nop
 8005ac0:	371c      	adds	r7, #28
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac8:	4770      	bx	lr
 8005aca:	bf00      	nop
 8005acc:	a0000060 	.word	0xa0000060
 8005ad0:	a0000080 	.word	0xa0000080

08005ad4 <FMC_NANDStructInit>:
  * @param  FMC_NANDInitStruct: pointer to a FMC_NANDInitTypeDef structure which
  *         will be initialized.
  * @retval None
  */
void FMC_NANDStructInit(FMC_NANDInitTypeDef* FMC_NANDInitStruct)
{ 
 8005ad4:	b480      	push	{r7}
 8005ad6:	b083      	sub	sp, #12
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
  /* Reset NAND Init structure parameters values */
  FMC_NANDInitStruct->FMC_Bank = FMC_Bank2_NAND;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2210      	movs	r2, #16
 8005ae0:	601a      	str	r2, [r3, #0]
  FMC_NANDInitStruct->FMC_Waitfeature = FMC_Waitfeature_Disable;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	605a      	str	r2, [r3, #4]
  FMC_NANDInitStruct->FMC_MemoryDataWidth = FMC_NAND_MemoryDataWidth_16b;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2210      	movs	r2, #16
 8005aec:	609a      	str	r2, [r3, #8]
  FMC_NANDInitStruct->FMC_ECC = FMC_ECC_Disable;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	2200      	movs	r2, #0
 8005af2:	60da      	str	r2, [r3, #12]
  FMC_NANDInitStruct->FMC_ECCPageSize = FMC_ECCPageSize_256Bytes;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2200      	movs	r2, #0
 8005af8:	611a      	str	r2, [r3, #16]
  FMC_NANDInitStruct->FMC_TCLRSetupTime = 0x0;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2200      	movs	r2, #0
 8005afe:	615a      	str	r2, [r3, #20]
  FMC_NANDInitStruct->FMC_TARSetupTime = 0x0;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2200      	movs	r2, #0
 8005b04:	619a      	str	r2, [r3, #24]
  FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_SetupTime = 252;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	69db      	ldr	r3, [r3, #28]
 8005b0a:	22fc      	movs	r2, #252	; 0xfc
 8005b0c:	601a      	str	r2, [r3, #0]
  FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_WaitSetupTime = 252;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	69db      	ldr	r3, [r3, #28]
 8005b12:	22fc      	movs	r2, #252	; 0xfc
 8005b14:	605a      	str	r2, [r3, #4]
  FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HoldSetupTime = 252;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	69db      	ldr	r3, [r3, #28]
 8005b1a:	22fc      	movs	r2, #252	; 0xfc
 8005b1c:	609a      	str	r2, [r3, #8]
  FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HiZSetupTime = 252;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	69db      	ldr	r3, [r3, #28]
 8005b22:	22fc      	movs	r2, #252	; 0xfc
 8005b24:	60da      	str	r2, [r3, #12]
  FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_SetupTime = 252;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6a1b      	ldr	r3, [r3, #32]
 8005b2a:	22fc      	movs	r2, #252	; 0xfc
 8005b2c:	601a      	str	r2, [r3, #0]
  FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_WaitSetupTime = 252;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	6a1b      	ldr	r3, [r3, #32]
 8005b32:	22fc      	movs	r2, #252	; 0xfc
 8005b34:	605a      	str	r2, [r3, #4]
  FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HoldSetupTime = 252;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	6a1b      	ldr	r3, [r3, #32]
 8005b3a:	22fc      	movs	r2, #252	; 0xfc
 8005b3c:	609a      	str	r2, [r3, #8]
  FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HiZSetupTime = 252;	  
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	6a1b      	ldr	r3, [r3, #32]
 8005b42:	22fc      	movs	r2, #252	; 0xfc
 8005b44:	60da      	str	r2, [r3, #12]
}
 8005b46:	bf00      	nop
 8005b48:	370c      	adds	r7, #12
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b50:	4770      	bx	lr

08005b52 <FMC_NANDCmd>:
  *            @arg FMC_Bank3_NAND: FMC Bank3 NAND
  * @param  NewState: new state of the FMC_Bank. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void FMC_NANDCmd(uint32_t FMC_Bank, FunctionalState NewState)
{
 8005b52:	b480      	push	{r7}
 8005b54:	b083      	sub	sp, #12
 8005b56:	af00      	add	r7, sp, #0
 8005b58:	6078      	str	r0, [r7, #4]
 8005b5a:	460b      	mov	r3, r1
 8005b5c:	70fb      	strb	r3, [r7, #3]
  assert_param(IS_FMC_NAND_BANK(FMC_Bank));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8005b5e:	78fb      	ldrb	r3, [r7, #3]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d010      	beq.n	8005b86 <FMC_NANDCmd+0x34>
  {
    /* Enable the selected NAND Bank by setting the PBKEN bit in the PCRx register */
    if(FMC_Bank == FMC_Bank2_NAND)
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2b10      	cmp	r3, #16
 8005b68:	d106      	bne.n	8005b78 <FMC_NANDCmd+0x26>
    {
      FMC_Bank2->PCR2 |= PCR_PBKEN_SET;
 8005b6a:	4b12      	ldr	r3, [pc, #72]	; (8005bb4 <FMC_NANDCmd+0x62>)
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	4a11      	ldr	r2, [pc, #68]	; (8005bb4 <FMC_NANDCmd+0x62>)
 8005b70:	f043 0304 	orr.w	r3, r3, #4
 8005b74:	6013      	str	r3, [r2, #0]
    else
    {
      FMC_Bank3->PCR3 &= PCR_PBKEN_RESET;
    }
  }
}
 8005b76:	e016      	b.n	8005ba6 <FMC_NANDCmd+0x54>
      FMC_Bank3->PCR3 |= PCR_PBKEN_SET;
 8005b78:	4b0f      	ldr	r3, [pc, #60]	; (8005bb8 <FMC_NANDCmd+0x66>)
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	4a0e      	ldr	r2, [pc, #56]	; (8005bb8 <FMC_NANDCmd+0x66>)
 8005b7e:	f043 0304 	orr.w	r3, r3, #4
 8005b82:	6013      	str	r3, [r2, #0]
}
 8005b84:	e00f      	b.n	8005ba6 <FMC_NANDCmd+0x54>
    if(FMC_Bank == FMC_Bank2_NAND)
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	2b10      	cmp	r3, #16
 8005b8a:	d106      	bne.n	8005b9a <FMC_NANDCmd+0x48>
      FMC_Bank2->PCR2 &= PCR_PBKEN_RESET;
 8005b8c:	4b09      	ldr	r3, [pc, #36]	; (8005bb4 <FMC_NANDCmd+0x62>)
 8005b8e:	681a      	ldr	r2, [r3, #0]
 8005b90:	4908      	ldr	r1, [pc, #32]	; (8005bb4 <FMC_NANDCmd+0x62>)
 8005b92:	4b0a      	ldr	r3, [pc, #40]	; (8005bbc <FMC_NANDCmd+0x6a>)
 8005b94:	4013      	ands	r3, r2
 8005b96:	600b      	str	r3, [r1, #0]
}
 8005b98:	e005      	b.n	8005ba6 <FMC_NANDCmd+0x54>
      FMC_Bank3->PCR3 &= PCR_PBKEN_RESET;
 8005b9a:	4b07      	ldr	r3, [pc, #28]	; (8005bb8 <FMC_NANDCmd+0x66>)
 8005b9c:	681a      	ldr	r2, [r3, #0]
 8005b9e:	4906      	ldr	r1, [pc, #24]	; (8005bb8 <FMC_NANDCmd+0x66>)
 8005ba0:	4b06      	ldr	r3, [pc, #24]	; (8005bbc <FMC_NANDCmd+0x6a>)
 8005ba2:	4013      	ands	r3, r2
 8005ba4:	600b      	str	r3, [r1, #0]
}
 8005ba6:	bf00      	nop
 8005ba8:	370c      	adds	r7, #12
 8005baa:	46bd      	mov	sp, r7
 8005bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb0:	4770      	bx	lr
 8005bb2:	bf00      	nop
 8005bb4:	a0000060 	.word	0xa0000060
 8005bb8:	a0000080 	.word	0xa0000080
 8005bbc:	000ffffb 	.word	0x000ffffb

08005bc0 <FMC_NANDECCCmd>:
  * @param  NewState: new state of the FMC NAND ECC feature.  
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void FMC_NANDECCCmd(uint32_t FMC_Bank, FunctionalState NewState)
{
 8005bc0:	b480      	push	{r7}
 8005bc2:	b083      	sub	sp, #12
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
 8005bc8:	460b      	mov	r3, r1
 8005bca:	70fb      	strb	r3, [r7, #3]
  assert_param(IS_FMC_NAND_BANK(FMC_Bank));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8005bcc:	78fb      	ldrb	r3, [r7, #3]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d010      	beq.n	8005bf4 <FMC_NANDECCCmd+0x34>
  {
    /* Enable the selected NAND Bank ECC function by setting the ECCEN bit in the PCRx register */
    if(FMC_Bank == FMC_Bank2_NAND)
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	2b10      	cmp	r3, #16
 8005bd6:	d106      	bne.n	8005be6 <FMC_NANDECCCmd+0x26>
    {
      FMC_Bank2->PCR2 |= PCR_ECCEN_SET;
 8005bd8:	4b11      	ldr	r3, [pc, #68]	; (8005c20 <FMC_NANDECCCmd+0x60>)
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	4a10      	ldr	r2, [pc, #64]	; (8005c20 <FMC_NANDECCCmd+0x60>)
 8005bde:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005be2:	6013      	str	r3, [r2, #0]
    else
    {
      FMC_Bank3->PCR3 &= PCR_ECCEN_RESET;
    }
  }
}
 8005be4:	e016      	b.n	8005c14 <FMC_NANDECCCmd+0x54>
      FMC_Bank3->PCR3 |= PCR_ECCEN_SET;
 8005be6:	4b0f      	ldr	r3, [pc, #60]	; (8005c24 <FMC_NANDECCCmd+0x64>)
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	4a0e      	ldr	r2, [pc, #56]	; (8005c24 <FMC_NANDECCCmd+0x64>)
 8005bec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005bf0:	6013      	str	r3, [r2, #0]
}
 8005bf2:	e00f      	b.n	8005c14 <FMC_NANDECCCmd+0x54>
    if(FMC_Bank == FMC_Bank2_NAND)
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2b10      	cmp	r3, #16
 8005bf8:	d106      	bne.n	8005c08 <FMC_NANDECCCmd+0x48>
      FMC_Bank2->PCR2 &= PCR_ECCEN_RESET;
 8005bfa:	4b09      	ldr	r3, [pc, #36]	; (8005c20 <FMC_NANDECCCmd+0x60>)
 8005bfc:	681a      	ldr	r2, [r3, #0]
 8005bfe:	4908      	ldr	r1, [pc, #32]	; (8005c20 <FMC_NANDECCCmd+0x60>)
 8005c00:	4b09      	ldr	r3, [pc, #36]	; (8005c28 <FMC_NANDECCCmd+0x68>)
 8005c02:	4013      	ands	r3, r2
 8005c04:	600b      	str	r3, [r1, #0]
}
 8005c06:	e005      	b.n	8005c14 <FMC_NANDECCCmd+0x54>
      FMC_Bank3->PCR3 &= PCR_ECCEN_RESET;
 8005c08:	4b06      	ldr	r3, [pc, #24]	; (8005c24 <FMC_NANDECCCmd+0x64>)
 8005c0a:	681a      	ldr	r2, [r3, #0]
 8005c0c:	4905      	ldr	r1, [pc, #20]	; (8005c24 <FMC_NANDECCCmd+0x64>)
 8005c0e:	4b06      	ldr	r3, [pc, #24]	; (8005c28 <FMC_NANDECCCmd+0x68>)
 8005c10:	4013      	ands	r3, r2
 8005c12:	600b      	str	r3, [r1, #0]
}
 8005c14:	bf00      	nop
 8005c16:	370c      	adds	r7, #12
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1e:	4770      	bx	lr
 8005c20:	a0000060 	.word	0xa0000060
 8005c24:	a0000080 	.word	0xa0000080
 8005c28:	000fffbf 	.word	0x000fffbf

08005c2c <FMC_GetECC>:
  *            @arg FMC_Bank2_NAND: FMC Bank2 NAND 
  *            @arg FMC_Bank3_NAND: FMC Bank3 NAND
  * @retval The Error Correction Code (ECC) value.
  */
uint32_t FMC_GetECC(uint32_t FMC_Bank)
{
 8005c2c:	b480      	push	{r7}
 8005c2e:	b085      	sub	sp, #20
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
  uint32_t eccval = 0x00000000;
 8005c34:	2300      	movs	r3, #0
 8005c36:	60fb      	str	r3, [r7, #12]
  
  if(FMC_Bank == FMC_Bank2_NAND)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2b10      	cmp	r3, #16
 8005c3c:	d103      	bne.n	8005c46 <FMC_GetECC+0x1a>
  {
    /* Get the ECCR2 register value */
    eccval = FMC_Bank2->ECCR2;
 8005c3e:	4b07      	ldr	r3, [pc, #28]	; (8005c5c <FMC_GetECC+0x30>)
 8005c40:	695b      	ldr	r3, [r3, #20]
 8005c42:	60fb      	str	r3, [r7, #12]
 8005c44:	e002      	b.n	8005c4c <FMC_GetECC+0x20>
  }
  else
  {
    /* Get the ECCR3 register value */
    eccval = FMC_Bank3->ECCR3;
 8005c46:	4b06      	ldr	r3, [pc, #24]	; (8005c60 <FMC_GetECC+0x34>)
 8005c48:	695b      	ldr	r3, [r3, #20]
 8005c4a:	60fb      	str	r3, [r7, #12]
  }
  /* Return the error correction code value */
  return(eccval);
 8005c4c:	68fb      	ldr	r3, [r7, #12]
}
 8005c4e:	4618      	mov	r0, r3
 8005c50:	3714      	adds	r7, #20
 8005c52:	46bd      	mov	sp, r7
 8005c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c58:	4770      	bx	lr
 8005c5a:	bf00      	nop
 8005c5c:	a0000060 	.word	0xa0000060
 8005c60:	a0000080 	.word	0xa0000080

08005c64 <FMC_PCCARDDeInit>:
  * @brief  De-initializes the FMC PCCARD Bank registers to their default reset values.
  * @param  None                       
  * @retval None
  */
void FMC_PCCARDDeInit(void)
{
 8005c64:	b480      	push	{r7}
 8005c66:	af00      	add	r7, sp, #0
  /* Set the FMC_Bank4 registers to their reset values */
  FMC_Bank4->PCR4 = 0x00000018; 
 8005c68:	4b0b      	ldr	r3, [pc, #44]	; (8005c98 <FMC_PCCARDDeInit+0x34>)
 8005c6a:	2218      	movs	r2, #24
 8005c6c:	601a      	str	r2, [r3, #0]
  FMC_Bank4->SR4 = 0x00000000;	
 8005c6e:	4b0a      	ldr	r3, [pc, #40]	; (8005c98 <FMC_PCCARDDeInit+0x34>)
 8005c70:	2200      	movs	r2, #0
 8005c72:	605a      	str	r2, [r3, #4]
  FMC_Bank4->PMEM4 = 0xFCFCFCFC;
 8005c74:	4b08      	ldr	r3, [pc, #32]	; (8005c98 <FMC_PCCARDDeInit+0x34>)
 8005c76:	f04f 32fc 	mov.w	r2, #4244438268	; 0xfcfcfcfc
 8005c7a:	609a      	str	r2, [r3, #8]
  FMC_Bank4->PATT4 = 0xFCFCFCFC;
 8005c7c:	4b06      	ldr	r3, [pc, #24]	; (8005c98 <FMC_PCCARDDeInit+0x34>)
 8005c7e:	f04f 32fc 	mov.w	r2, #4244438268	; 0xfcfcfcfc
 8005c82:	60da      	str	r2, [r3, #12]
  FMC_Bank4->PIO4 = 0xFCFCFCFC;
 8005c84:	4b04      	ldr	r3, [pc, #16]	; (8005c98 <FMC_PCCARDDeInit+0x34>)
 8005c86:	f04f 32fc 	mov.w	r2, #4244438268	; 0xfcfcfcfc
 8005c8a:	611a      	str	r2, [r3, #16]
}
 8005c8c:	bf00      	nop
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c94:	4770      	bx	lr
 8005c96:	bf00      	nop
 8005c98:	a00000a0 	.word	0xa00000a0

08005c9c <FMC_PCCARDInit>:
  * @param  FMC_PCCARDInitStruct : pointer to a FMC_PCCARDInitTypeDef structure
  *         that contains the configuration information for the FMC PCCARD Bank.                       
  * @retval None
  */
void FMC_PCCARDInit(FMC_PCCARDInitTypeDef* FMC_PCCARDInitStruct)
{
 8005c9c:	b480      	push	{r7}
 8005c9e:	b083      	sub	sp, #12
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
  assert_param(IS_FMC_WAIT_TIME(FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_WaitSetupTime));
  assert_param(IS_FMC_HOLD_TIME(FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_HoldSetupTime));
  assert_param(IS_FMC_HIZ_TIME(FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_HiZSetupTime));
  
  /* Set the PCR4 register value according to FMC_PCCARDInitStruct parameters */
  FMC_Bank4->PCR4 = (uint32_t)FMC_PCCARDInitStruct->FMC_Waitfeature |
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681a      	ldr	r2, [r3, #0]
                     FMC_NAND_MemoryDataWidth_16b |  
                     (FMC_PCCARDInitStruct->FMC_TCLRSetupTime << 9) |
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	685b      	ldr	r3, [r3, #4]
 8005cac:	025b      	lsls	r3, r3, #9
                     FMC_NAND_MemoryDataWidth_16b |  
 8005cae:	431a      	orrs	r2, r3
                     (FMC_PCCARDInitStruct->FMC_TARSetupTime << 13);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	689b      	ldr	r3, [r3, #8]
 8005cb4:	035b      	lsls	r3, r3, #13
                     (FMC_PCCARDInitStruct->FMC_TCLRSetupTime << 9) |
 8005cb6:	4313      	orrs	r3, r2
  FMC_Bank4->PCR4 = (uint32_t)FMC_PCCARDInitStruct->FMC_Waitfeature |
 8005cb8:	4a22      	ldr	r2, [pc, #136]	; (8005d44 <FMC_PCCARDInit+0xa8>)
                     (FMC_PCCARDInitStruct->FMC_TCLRSetupTime << 9) |
 8005cba:	f043 0310 	orr.w	r3, r3, #16
  FMC_Bank4->PCR4 = (uint32_t)FMC_PCCARDInitStruct->FMC_Waitfeature |
 8005cbe:	6013      	str	r3, [r2, #0]
            
  /* Set PMEM4 register value according to FMC_CommonSpaceTimingStructure parameters */
  FMC_Bank4->PMEM4 = (uint32_t)FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_SetupTime |
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	68db      	ldr	r3, [r3, #12]
 8005cc4:	681a      	ldr	r2, [r3, #0]
                      (FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_WaitSetupTime << 8) |
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	68db      	ldr	r3, [r3, #12]
 8005cca:	685b      	ldr	r3, [r3, #4]
 8005ccc:	021b      	lsls	r3, r3, #8
  FMC_Bank4->PMEM4 = (uint32_t)FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_SetupTime |
 8005cce:	431a      	orrs	r2, r3
                      (FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HoldSetupTime << 16)|
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	68db      	ldr	r3, [r3, #12]
 8005cd4:	689b      	ldr	r3, [r3, #8]
 8005cd6:	041b      	lsls	r3, r3, #16
                      (FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_WaitSetupTime << 8) |
 8005cd8:	431a      	orrs	r2, r3
                      (FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HiZSetupTime << 24); 
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	68db      	ldr	r3, [r3, #12]
 8005cde:	68db      	ldr	r3, [r3, #12]
 8005ce0:	061b      	lsls	r3, r3, #24
  FMC_Bank4->PMEM4 = (uint32_t)FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_SetupTime |
 8005ce2:	4918      	ldr	r1, [pc, #96]	; (8005d44 <FMC_PCCARDInit+0xa8>)
                      (FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HoldSetupTime << 16)|
 8005ce4:	4313      	orrs	r3, r2
  FMC_Bank4->PMEM4 = (uint32_t)FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_SetupTime |
 8005ce6:	608b      	str	r3, [r1, #8]
            
  /* Set PATT4 register value according to FMC_AttributeSpaceTimingStructure parameters */
  FMC_Bank4->PATT4 = (uint32_t)FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_SetupTime |
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	691b      	ldr	r3, [r3, #16]
 8005cec:	681a      	ldr	r2, [r3, #0]
                      (FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_WaitSetupTime << 8) |
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	691b      	ldr	r3, [r3, #16]
 8005cf2:	685b      	ldr	r3, [r3, #4]
 8005cf4:	021b      	lsls	r3, r3, #8
  FMC_Bank4->PATT4 = (uint32_t)FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_SetupTime |
 8005cf6:	431a      	orrs	r2, r3
                      (FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HoldSetupTime << 16)|
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	691b      	ldr	r3, [r3, #16]
 8005cfc:	689b      	ldr	r3, [r3, #8]
 8005cfe:	041b      	lsls	r3, r3, #16
                      (FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_WaitSetupTime << 8) |
 8005d00:	431a      	orrs	r2, r3
                      (FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HiZSetupTime << 24);	
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	691b      	ldr	r3, [r3, #16]
 8005d06:	68db      	ldr	r3, [r3, #12]
 8005d08:	061b      	lsls	r3, r3, #24
  FMC_Bank4->PATT4 = (uint32_t)FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_SetupTime |
 8005d0a:	490e      	ldr	r1, [pc, #56]	; (8005d44 <FMC_PCCARDInit+0xa8>)
                      (FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HoldSetupTime << 16)|
 8005d0c:	4313      	orrs	r3, r2
  FMC_Bank4->PATT4 = (uint32_t)FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_SetupTime |
 8005d0e:	60cb      	str	r3, [r1, #12]
            
  /* Set PIO4 register value according to FMC_IOSpaceTimingStructure parameters */
  FMC_Bank4->PIO4 = (uint32_t)FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_SetupTime |
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	695b      	ldr	r3, [r3, #20]
 8005d14:	681a      	ldr	r2, [r3, #0]
                     (FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_WaitSetupTime << 8) |
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	695b      	ldr	r3, [r3, #20]
 8005d1a:	685b      	ldr	r3, [r3, #4]
 8005d1c:	021b      	lsls	r3, r3, #8
  FMC_Bank4->PIO4 = (uint32_t)FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_SetupTime |
 8005d1e:	431a      	orrs	r2, r3
                     (FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_HoldSetupTime << 16)|
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	695b      	ldr	r3, [r3, #20]
 8005d24:	689b      	ldr	r3, [r3, #8]
 8005d26:	041b      	lsls	r3, r3, #16
                     (FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_WaitSetupTime << 8) |
 8005d28:	431a      	orrs	r2, r3
                     (FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_HiZSetupTime << 24);             
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	695b      	ldr	r3, [r3, #20]
 8005d2e:	68db      	ldr	r3, [r3, #12]
 8005d30:	061b      	lsls	r3, r3, #24
  FMC_Bank4->PIO4 = (uint32_t)FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_SetupTime |
 8005d32:	4904      	ldr	r1, [pc, #16]	; (8005d44 <FMC_PCCARDInit+0xa8>)
                     (FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_HoldSetupTime << 16)|
 8005d34:	4313      	orrs	r3, r2
  FMC_Bank4->PIO4 = (uint32_t)FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_SetupTime |
 8005d36:	610b      	str	r3, [r1, #16]
}
 8005d38:	bf00      	nop
 8005d3a:	370c      	adds	r7, #12
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d42:	4770      	bx	lr
 8005d44:	a00000a0 	.word	0xa00000a0

08005d48 <FMC_PCCARDStructInit>:
  * @param  FMC_PCCARDInitStruct: pointer to a FMC_PCCARDInitTypeDef structure
  *         which will be initialized.
  * @retval None
  */
void FMC_PCCARDStructInit(FMC_PCCARDInitTypeDef* FMC_PCCARDInitStruct)
{
 8005d48:	b480      	push	{r7}
 8005d4a:	b083      	sub	sp, #12
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
  /* Reset PCCARD Init structure parameters values */
  FMC_PCCARDInitStruct->FMC_Waitfeature = FMC_Waitfeature_Disable;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2200      	movs	r2, #0
 8005d54:	601a      	str	r2, [r3, #0]
  FMC_PCCARDInitStruct->FMC_TCLRSetupTime = 0;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	2200      	movs	r2, #0
 8005d5a:	605a      	str	r2, [r3, #4]
  FMC_PCCARDInitStruct->FMC_TARSetupTime = 0;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2200      	movs	r2, #0
 8005d60:	609a      	str	r2, [r3, #8]
  FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_SetupTime = 252;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	68db      	ldr	r3, [r3, #12]
 8005d66:	22fc      	movs	r2, #252	; 0xfc
 8005d68:	601a      	str	r2, [r3, #0]
  FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_WaitSetupTime = 252;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	68db      	ldr	r3, [r3, #12]
 8005d6e:	22fc      	movs	r2, #252	; 0xfc
 8005d70:	605a      	str	r2, [r3, #4]
  FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HoldSetupTime = 252;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	68db      	ldr	r3, [r3, #12]
 8005d76:	22fc      	movs	r2, #252	; 0xfc
 8005d78:	609a      	str	r2, [r3, #8]
  FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HiZSetupTime = 252;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	68db      	ldr	r3, [r3, #12]
 8005d7e:	22fc      	movs	r2, #252	; 0xfc
 8005d80:	60da      	str	r2, [r3, #12]
  FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_SetupTime = 252;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	691b      	ldr	r3, [r3, #16]
 8005d86:	22fc      	movs	r2, #252	; 0xfc
 8005d88:	601a      	str	r2, [r3, #0]
  FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_WaitSetupTime = 252;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	691b      	ldr	r3, [r3, #16]
 8005d8e:	22fc      	movs	r2, #252	; 0xfc
 8005d90:	605a      	str	r2, [r3, #4]
  FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HoldSetupTime = 252;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	691b      	ldr	r3, [r3, #16]
 8005d96:	22fc      	movs	r2, #252	; 0xfc
 8005d98:	609a      	str	r2, [r3, #8]
  FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HiZSetupTime = 252;	
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	691b      	ldr	r3, [r3, #16]
 8005d9e:	22fc      	movs	r2, #252	; 0xfc
 8005da0:	60da      	str	r2, [r3, #12]
  FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_SetupTime = 252;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	695b      	ldr	r3, [r3, #20]
 8005da6:	22fc      	movs	r2, #252	; 0xfc
 8005da8:	601a      	str	r2, [r3, #0]
  FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_WaitSetupTime = 252;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	695b      	ldr	r3, [r3, #20]
 8005dae:	22fc      	movs	r2, #252	; 0xfc
 8005db0:	605a      	str	r2, [r3, #4]
  FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_HoldSetupTime = 252;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	695b      	ldr	r3, [r3, #20]
 8005db6:	22fc      	movs	r2, #252	; 0xfc
 8005db8:	609a      	str	r2, [r3, #8]
  FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_HiZSetupTime = 252;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	695b      	ldr	r3, [r3, #20]
 8005dbe:	22fc      	movs	r2, #252	; 0xfc
 8005dc0:	60da      	str	r2, [r3, #12]
}
 8005dc2:	bf00      	nop
 8005dc4:	370c      	adds	r7, #12
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dcc:	4770      	bx	lr

08005dce <FMC_PCCARDCmd>:
  * @param  NewState: new state of the PCCARD Memory Bank.  
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void FMC_PCCARDCmd(FunctionalState NewState)
{
 8005dce:	b480      	push	{r7}
 8005dd0:	b083      	sub	sp, #12
 8005dd2:	af00      	add	r7, sp, #0
 8005dd4:	4603      	mov	r3, r0
 8005dd6:	71fb      	strb	r3, [r7, #7]
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8005dd8:	79fb      	ldrb	r3, [r7, #7]
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d006      	beq.n	8005dec <FMC_PCCARDCmd+0x1e>
  {
    /* Enable the PCCARD Bank by setting the PBKEN bit in the PCR4 register */
    FMC_Bank4->PCR4 |= PCR_PBKEN_SET;
 8005dde:	4b09      	ldr	r3, [pc, #36]	; (8005e04 <FMC_PCCARDCmd+0x36>)
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	4a08      	ldr	r2, [pc, #32]	; (8005e04 <FMC_PCCARDCmd+0x36>)
 8005de4:	f043 0304 	orr.w	r3, r3, #4
 8005de8:	6013      	str	r3, [r2, #0]
  else
  {
    /* Disable the PCCARD Bank by clearing the PBKEN bit in the PCR4 register */
    FMC_Bank4->PCR4 &= PCR_PBKEN_RESET;
  }
}
 8005dea:	e005      	b.n	8005df8 <FMC_PCCARDCmd+0x2a>
    FMC_Bank4->PCR4 &= PCR_PBKEN_RESET;
 8005dec:	4b05      	ldr	r3, [pc, #20]	; (8005e04 <FMC_PCCARDCmd+0x36>)
 8005dee:	681a      	ldr	r2, [r3, #0]
 8005df0:	4904      	ldr	r1, [pc, #16]	; (8005e04 <FMC_PCCARDCmd+0x36>)
 8005df2:	4b05      	ldr	r3, [pc, #20]	; (8005e08 <FMC_PCCARDCmd+0x3a>)
 8005df4:	4013      	ands	r3, r2
 8005df6:	600b      	str	r3, [r1, #0]
}
 8005df8:	bf00      	nop
 8005dfa:	370c      	adds	r7, #12
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e02:	4770      	bx	lr
 8005e04:	a00000a0 	.word	0xa00000a0
 8005e08:	000ffffb 	.word	0x000ffffb

08005e0c <FMC_SDRAMDeInit>:
  *            @arg FMC_Bank1_SDRAM: FMC Bank1 SDRAM 
  *            @arg FMC_Bank2_SDRAM: FMC Bank2 SDRAM 
  * @retval None
  */
void FMC_SDRAMDeInit(uint32_t FMC_Bank)
{
 8005e0c:	b480      	push	{r7}
 8005e0e:	b083      	sub	sp, #12
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_FMC_SDRAM_BANK(FMC_Bank));
  
  FMC_Bank5_6->SDCR[FMC_Bank] = 0x000002D0;
 8005e14:	4a0d      	ldr	r2, [pc, #52]	; (8005e4c <FMC_SDRAMDeInit+0x40>)
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	f44f 7134 	mov.w	r1, #720	; 0x2d0
 8005e1c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  FMC_Bank5_6->SDTR[FMC_Bank] = 0x0FFFFFFF;    
 8005e20:	4a0a      	ldr	r2, [pc, #40]	; (8005e4c <FMC_SDRAMDeInit+0x40>)
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	3302      	adds	r3, #2
 8005e26:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8005e2a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  FMC_Bank5_6->SDCMR = 0x00000000;
 8005e2e:	4b07      	ldr	r3, [pc, #28]	; (8005e4c <FMC_SDRAMDeInit+0x40>)
 8005e30:	2200      	movs	r2, #0
 8005e32:	611a      	str	r2, [r3, #16]
  FMC_Bank5_6->SDRTR = 0x00000000;
 8005e34:	4b05      	ldr	r3, [pc, #20]	; (8005e4c <FMC_SDRAMDeInit+0x40>)
 8005e36:	2200      	movs	r2, #0
 8005e38:	615a      	str	r2, [r3, #20]
  FMC_Bank5_6->SDSR = 0x00000000; 
 8005e3a:	4b04      	ldr	r3, [pc, #16]	; (8005e4c <FMC_SDRAMDeInit+0x40>)
 8005e3c:	2200      	movs	r2, #0
 8005e3e:	619a      	str	r2, [r3, #24]
}  
 8005e40:	bf00      	nop
 8005e42:	370c      	adds	r7, #12
 8005e44:	46bd      	mov	sp, r7
 8005e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4a:	4770      	bx	lr
 8005e4c:	a0000140 	.word	0xa0000140

08005e50 <FMC_SDRAMInit>:
  *         that contains the configuration information for the FMC SDRAM 
  *         specified Banks.                       
  * @retval None
  */
void FMC_SDRAMInit(FMC_SDRAMInitTypeDef* FMC_SDRAMInitStruct)
{ 
 8005e50:	b480      	push	{r7}
 8005e52:	b087      	sub	sp, #28
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
  /* temporary registers */
  uint32_t tmpr1 = 0;
 8005e58:	2300      	movs	r3, #0
 8005e5a:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 8005e5c:	2300      	movs	r3, #0
 8005e5e:	613b      	str	r3, [r7, #16]
  uint32_t tmpr3 = 0;
 8005e60:	2300      	movs	r3, #0
 8005e62:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr4 = 0;
 8005e64:	2300      	movs	r3, #0
 8005e66:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_WRITE_RECOVERY_TIME(FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_WriteRecoveryTime)); 
  assert_param(IS_FMC_RP_DELAY(FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RPDelay)); 
  assert_param(IS_FMC_RCD_DELAY(FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RCDDelay));    
  
  /* SDRAM bank control register configuration */ 
  tmpr1 =   (uint32_t)FMC_SDRAMInitStruct->FMC_ColumnBitsNumber |
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	685a      	ldr	r2, [r3, #4]
             FMC_SDRAMInitStruct->FMC_RowBitsNumber |
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	689b      	ldr	r3, [r3, #8]
  tmpr1 =   (uint32_t)FMC_SDRAMInitStruct->FMC_ColumnBitsNumber |
 8005e70:	431a      	orrs	r2, r3
             FMC_SDRAMInitStruct->FMC_SDMemoryDataWidth |
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	68db      	ldr	r3, [r3, #12]
             FMC_SDRAMInitStruct->FMC_RowBitsNumber |
 8005e76:	431a      	orrs	r2, r3
             FMC_SDRAMInitStruct->FMC_InternalBankNumber |           
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	691b      	ldr	r3, [r3, #16]
             FMC_SDRAMInitStruct->FMC_SDMemoryDataWidth |
 8005e7c:	431a      	orrs	r2, r3
             FMC_SDRAMInitStruct->FMC_CASLatency |
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	695b      	ldr	r3, [r3, #20]
             FMC_SDRAMInitStruct->FMC_InternalBankNumber |           
 8005e82:	431a      	orrs	r2, r3
             FMC_SDRAMInitStruct->FMC_WriteProtection |
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	699b      	ldr	r3, [r3, #24]
             FMC_SDRAMInitStruct->FMC_CASLatency |
 8005e88:	431a      	orrs	r2, r3
             FMC_SDRAMInitStruct->FMC_SDClockPeriod |
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	69db      	ldr	r3, [r3, #28]
             FMC_SDRAMInitStruct->FMC_WriteProtection |
 8005e8e:	431a      	orrs	r2, r3
             FMC_SDRAMInitStruct->FMC_ReadBurst | 
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	6a1b      	ldr	r3, [r3, #32]
             FMC_SDRAMInitStruct->FMC_SDClockPeriod |
 8005e94:	431a      	orrs	r2, r3
             FMC_SDRAMInitStruct->FMC_ReadPipeDelay;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  tmpr1 =   (uint32_t)FMC_SDRAMInitStruct->FMC_ColumnBitsNumber |
 8005e9a:	4313      	orrs	r3, r2
 8005e9c:	617b      	str	r3, [r7, #20]
            
  if(FMC_SDRAMInitStruct->FMC_Bank == FMC_Bank1_SDRAM )
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d106      	bne.n	8005eb4 <FMC_SDRAMInit+0x64>
  {
    FMC_Bank5_6->SDCR[FMC_SDRAMInitStruct->FMC_Bank] = tmpr1;
 8005ea6:	4940      	ldr	r1, [pc, #256]	; (8005fa8 <FMC_SDRAMInit+0x158>)
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	697a      	ldr	r2, [r7, #20]
 8005eae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8005eb2:	e011      	b.n	8005ed8 <FMC_SDRAMInit+0x88>
  }
  else   /* SDCR2 "don't care" bits configuration */
  {
    tmpr3 = (uint32_t)FMC_SDRAMInitStruct->FMC_SDClockPeriod |
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	69da      	ldr	r2, [r3, #28]
             FMC_SDRAMInitStruct->FMC_ReadBurst | 
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	6a1b      	ldr	r3, [r3, #32]
    tmpr3 = (uint32_t)FMC_SDRAMInitStruct->FMC_SDClockPeriod |
 8005ebc:	431a      	orrs	r2, r3
             FMC_SDRAMInitStruct->FMC_ReadPipeDelay;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    tmpr3 = (uint32_t)FMC_SDRAMInitStruct->FMC_SDClockPeriod |
 8005ec2:	4313      	orrs	r3, r2
 8005ec4:	60fb      	str	r3, [r7, #12]
    
    FMC_Bank5_6->SDCR[FMC_Bank1_SDRAM] = tmpr3;
 8005ec6:	4a38      	ldr	r2, [pc, #224]	; (8005fa8 <FMC_SDRAMInit+0x158>)
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	6013      	str	r3, [r2, #0]
    FMC_Bank5_6->SDCR[FMC_SDRAMInitStruct->FMC_Bank] = tmpr1;
 8005ecc:	4936      	ldr	r1, [pc, #216]	; (8005fa8 <FMC_SDRAMInit+0x158>)
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	697a      	ldr	r2, [r7, #20]
 8005ed4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
  /* SDRAM bank timing register configuration */
  if(FMC_SDRAMInitStruct->FMC_Bank == FMC_Bank1_SDRAM )
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d130      	bne.n	8005f42 <FMC_SDRAMInit+0xf2>
  {
    tmpr2 =   (uint32_t)((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_LoadToActiveDelay)-1) |
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	1e5a      	subs	r2, r3, #1
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_ExitSelfRefreshDelay)-1) << 4) |
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005eec:	685b      	ldr	r3, [r3, #4]
 8005eee:	3b01      	subs	r3, #1
 8005ef0:	011b      	lsls	r3, r3, #4
    tmpr2 =   (uint32_t)((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_LoadToActiveDelay)-1) |
 8005ef2:	431a      	orrs	r2, r3
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_SelfRefreshTime)-1) << 8) |
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ef8:	689b      	ldr	r3, [r3, #8]
 8005efa:	3b01      	subs	r3, #1
 8005efc:	021b      	lsls	r3, r3, #8
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_ExitSelfRefreshDelay)-1) << 4) |
 8005efe:	431a      	orrs	r2, r3
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RowCycleDelay)-1) << 12) |
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f04:	68db      	ldr	r3, [r3, #12]
 8005f06:	3b01      	subs	r3, #1
 8005f08:	031b      	lsls	r3, r3, #12
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_SelfRefreshTime)-1) << 8) |
 8005f0a:	431a      	orrs	r2, r3
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_WriteRecoveryTime)-1) << 16) |
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f10:	691b      	ldr	r3, [r3, #16]
 8005f12:	3b01      	subs	r3, #1
 8005f14:	041b      	lsls	r3, r3, #16
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RowCycleDelay)-1) << 12) |
 8005f16:	431a      	orrs	r2, r3
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RPDelay)-1) << 20) |
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f1c:	695b      	ldr	r3, [r3, #20]
 8005f1e:	3b01      	subs	r3, #1
 8005f20:	051b      	lsls	r3, r3, #20
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_WriteRecoveryTime)-1) << 16) |
 8005f22:	431a      	orrs	r2, r3
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RCDDelay)-1) << 24);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f28:	699b      	ldr	r3, [r3, #24]
 8005f2a:	3b01      	subs	r3, #1
 8005f2c:	061b      	lsls	r3, r3, #24
    tmpr2 =   (uint32_t)((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_LoadToActiveDelay)-1) |
 8005f2e:	4313      	orrs	r3, r2
 8005f30:	613b      	str	r3, [r7, #16]
            
            FMC_Bank5_6->SDTR[FMC_SDRAMInitStruct->FMC_Bank] = tmpr2;
 8005f32:	491d      	ldr	r1, [pc, #116]	; (8005fa8 <FMC_SDRAMInit+0x158>)
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	3302      	adds	r3, #2
 8005f3a:	693a      	ldr	r2, [r7, #16]
 8005f3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            
            FMC_Bank5_6->SDTR[FMC_Bank1_SDRAM] = tmpr4;
            FMC_Bank5_6->SDTR[FMC_SDRAMInitStruct->FMC_Bank] = tmpr2;
  }
  
}
 8005f40:	e02c      	b.n	8005f9c <FMC_SDRAMInit+0x14c>
    tmpr2 =   (uint32_t)((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_LoadToActiveDelay)-1) |
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	1e5a      	subs	r2, r3, #1
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_ExitSelfRefreshDelay)-1) << 4) |
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f4e:	685b      	ldr	r3, [r3, #4]
 8005f50:	3b01      	subs	r3, #1
 8005f52:	011b      	lsls	r3, r3, #4
    tmpr2 =   (uint32_t)((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_LoadToActiveDelay)-1) |
 8005f54:	431a      	orrs	r2, r3
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_SelfRefreshTime)-1) << 8) |
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f5a:	689b      	ldr	r3, [r3, #8]
 8005f5c:	3b01      	subs	r3, #1
 8005f5e:	021b      	lsls	r3, r3, #8
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_ExitSelfRefreshDelay)-1) << 4) |
 8005f60:	431a      	orrs	r2, r3
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_WriteRecoveryTime)-1) << 16);
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f66:	691b      	ldr	r3, [r3, #16]
 8005f68:	3b01      	subs	r3, #1
 8005f6a:	041b      	lsls	r3, r3, #16
    tmpr2 =   (uint32_t)((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_LoadToActiveDelay)-1) |
 8005f6c:	4313      	orrs	r3, r2
 8005f6e:	613b      	str	r3, [r7, #16]
    tmpr4 =   (uint32_t)(((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RowCycleDelay)-1) << 12) |
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f74:	68db      	ldr	r3, [r3, #12]
 8005f76:	3b01      	subs	r3, #1
 8005f78:	031a      	lsls	r2, r3, #12
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RPDelay)-1) << 20);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f7e:	695b      	ldr	r3, [r3, #20]
 8005f80:	3b01      	subs	r3, #1
 8005f82:	051b      	lsls	r3, r3, #20
    tmpr4 =   (uint32_t)(((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RowCycleDelay)-1) << 12) |
 8005f84:	4313      	orrs	r3, r2
 8005f86:	60bb      	str	r3, [r7, #8]
            FMC_Bank5_6->SDTR[FMC_Bank1_SDRAM] = tmpr4;
 8005f88:	4a07      	ldr	r2, [pc, #28]	; (8005fa8 <FMC_SDRAMInit+0x158>)
 8005f8a:	68bb      	ldr	r3, [r7, #8]
 8005f8c:	6093      	str	r3, [r2, #8]
            FMC_Bank5_6->SDTR[FMC_SDRAMInitStruct->FMC_Bank] = tmpr2;
 8005f8e:	4906      	ldr	r1, [pc, #24]	; (8005fa8 <FMC_SDRAMInit+0x158>)
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	3302      	adds	r3, #2
 8005f96:	693a      	ldr	r2, [r7, #16]
 8005f98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8005f9c:	bf00      	nop
 8005f9e:	371c      	adds	r7, #28
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa6:	4770      	bx	lr
 8005fa8:	a0000140 	.word	0xa0000140

08005fac <FMC_SDRAMStructInit>:
  * @param  FMC_SDRAMInitStruct: pointer to a FMC_SDRAMInitTypeDef structure 
  *         which will be initialized.
  * @retval None
  */
void FMC_SDRAMStructInit(FMC_SDRAMInitTypeDef* FMC_SDRAMInitStruct)  
{  
 8005fac:	b480      	push	{r7}
 8005fae:	b083      	sub	sp, #12
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
  /* Reset SDRAM Init structure parameters values */
  FMC_SDRAMInitStruct->FMC_Bank = FMC_Bank1_SDRAM;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	601a      	str	r2, [r3, #0]
  FMC_SDRAMInitStruct->FMC_ColumnBitsNumber = FMC_ColumnBits_Number_8b;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	605a      	str	r2, [r3, #4]
  FMC_SDRAMInitStruct->FMC_RowBitsNumber = FMC_RowBits_Number_11b; 
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	609a      	str	r2, [r3, #8]
  FMC_SDRAMInitStruct->FMC_SDMemoryDataWidth = FMC_SDMemory_Width_16b;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	2210      	movs	r2, #16
 8005fca:	60da      	str	r2, [r3, #12]
  FMC_SDRAMInitStruct->FMC_InternalBankNumber = FMC_InternalBank_Number_4; 
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	2240      	movs	r2, #64	; 0x40
 8005fd0:	611a      	str	r2, [r3, #16]
  FMC_SDRAMInitStruct->FMC_CASLatency = FMC_CAS_Latency_1;  
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	2280      	movs	r2, #128	; 0x80
 8005fd6:	615a      	str	r2, [r3, #20]
  FMC_SDRAMInitStruct->FMC_WriteProtection = FMC_Write_Protection_Enable;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005fde:	619a      	str	r2, [r3, #24]
  FMC_SDRAMInitStruct->FMC_SDClockPeriod = FMC_SDClock_Disable;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	61da      	str	r2, [r3, #28]
  FMC_SDRAMInitStruct->FMC_ReadBurst = FMC_Read_Burst_Disable;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	2200      	movs	r2, #0
 8005fea:	621a      	str	r2, [r3, #32]
  FMC_SDRAMInitStruct->FMC_ReadPipeDelay = FMC_ReadPipe_Delay_0; 
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2200      	movs	r2, #0
 8005ff0:	625a      	str	r2, [r3, #36]	; 0x24
   
  FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_LoadToActiveDelay = 16;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ff6:	2210      	movs	r2, #16
 8005ff8:	601a      	str	r2, [r3, #0]
  FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_ExitSelfRefreshDelay = 16;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ffe:	2210      	movs	r2, #16
 8006000:	605a      	str	r2, [r3, #4]
  FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_SelfRefreshTime = 16;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006006:	2210      	movs	r2, #16
 8006008:	609a      	str	r2, [r3, #8]
  FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RowCycleDelay = 16;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800600e:	2210      	movs	r2, #16
 8006010:	60da      	str	r2, [r3, #12]
  FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_WriteRecoveryTime = 16;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006016:	2210      	movs	r2, #16
 8006018:	611a      	str	r2, [r3, #16]
  FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RPDelay = 16;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800601e:	2210      	movs	r2, #16
 8006020:	615a      	str	r2, [r3, #20]
  FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RCDDelay = 16;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006026:	2210      	movs	r2, #16
 8006028:	619a      	str	r2, [r3, #24]
  
}
 800602a:	bf00      	nop
 800602c:	370c      	adds	r7, #12
 800602e:	46bd      	mov	sp, r7
 8006030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006034:	4770      	bx	lr

08006036 <FMC_SDRAMCmdConfig>:
  * @param  FMC_SDRAMCommandStruct: pointer to a FMC_SDRAMCommandTypeDef structure 
  *         which will be configured.
  * @retval None
  */
void FMC_SDRAMCmdConfig(FMC_SDRAMCommandTypeDef* FMC_SDRAMCommandStruct)
{
 8006036:	b480      	push	{r7}
 8006038:	b085      	sub	sp, #20
 800603a:	af00      	add	r7, sp, #0
 800603c:	6078      	str	r0, [r7, #4]
  uint32_t tmpr = 0x0;
 800603e:	2300      	movs	r3, #0
 8006040:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FMC_COMMAND_MODE(FMC_SDRAMCommandStruct->FMC_CommandMode));
  assert_param(IS_FMC_COMMAND_TARGET(FMC_SDRAMCommandStruct->FMC_CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(FMC_SDRAMCommandStruct->FMC_AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(FMC_SDRAMCommandStruct->FMC_ModeRegisterDefinition));
  
  tmpr =   (uint32_t)(FMC_SDRAMCommandStruct->FMC_CommandMode |
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681a      	ldr	r2, [r3, #0]
                      FMC_SDRAMCommandStruct->FMC_CommandTarget |
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	685b      	ldr	r3, [r3, #4]
  tmpr =   (uint32_t)(FMC_SDRAMCommandStruct->FMC_CommandMode |
 800604a:	431a      	orrs	r2, r3
                     (((FMC_SDRAMCommandStruct->FMC_AutoRefreshNumber)-1)<<5) |
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	689b      	ldr	r3, [r3, #8]
 8006050:	3b01      	subs	r3, #1
 8006052:	015b      	lsls	r3, r3, #5
                      FMC_SDRAMCommandStruct->FMC_CommandTarget |
 8006054:	431a      	orrs	r2, r3
                     ((FMC_SDRAMCommandStruct->FMC_ModeRegisterDefinition)<<9));
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	68db      	ldr	r3, [r3, #12]
 800605a:	025b      	lsls	r3, r3, #9
  tmpr =   (uint32_t)(FMC_SDRAMCommandStruct->FMC_CommandMode |
 800605c:	4313      	orrs	r3, r2
 800605e:	60fb      	str	r3, [r7, #12]
  
  FMC_Bank5_6->SDCMR = tmpr;
 8006060:	4a04      	ldr	r2, [pc, #16]	; (8006074 <FMC_SDRAMCmdConfig+0x3e>)
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	6113      	str	r3, [r2, #16]

}
 8006066:	bf00      	nop
 8006068:	3714      	adds	r7, #20
 800606a:	46bd      	mov	sp, r7
 800606c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006070:	4770      	bx	lr
 8006072:	bf00      	nop
 8006074:	a0000140 	.word	0xa0000140

08006078 <FMC_GetModeStatus>:
  * @param  SDRAM_Bank: Defines the FMC SDRAM bank. This parameter can be 
  *                     FMC_Bank1_SDRAM or FMC_Bank2_SDRAM. 
  * @retval The FMC SDRAM bank mode status         
  */
uint32_t FMC_GetModeStatus(uint32_t SDRAM_Bank)
{
 8006078:	b480      	push	{r7}
 800607a:	b085      	sub	sp, #20
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8006080:	2300      	movs	r3, #0
 8006082:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameter */
  assert_param(IS_FMC_SDRAM_BANK(SDRAM_Bank));

  /* Get the busy flag status */
  if(SDRAM_Bank == FMC_Bank1_SDRAM)
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2b00      	cmp	r3, #0
 8006088:	d105      	bne.n	8006096 <FMC_GetModeStatus+0x1e>
  {
    tmpreg = (uint32_t)(FMC_Bank5_6->SDSR & FMC_SDSR_MODES1); 
 800608a:	4b09      	ldr	r3, [pc, #36]	; (80060b0 <FMC_GetModeStatus+0x38>)
 800608c:	699b      	ldr	r3, [r3, #24]
 800608e:	f003 0306 	and.w	r3, r3, #6
 8006092:	60fb      	str	r3, [r7, #12]
 8006094:	e005      	b.n	80060a2 <FMC_GetModeStatus+0x2a>
  }
  else
  {
    tmpreg = ((uint32_t)(FMC_Bank5_6->SDSR & FMC_SDSR_MODES2) >> 2);
 8006096:	4b06      	ldr	r3, [pc, #24]	; (80060b0 <FMC_GetModeStatus+0x38>)
 8006098:	699b      	ldr	r3, [r3, #24]
 800609a:	089b      	lsrs	r3, r3, #2
 800609c:	f003 0306 	and.w	r3, r3, #6
 80060a0:	60fb      	str	r3, [r7, #12]
  }
  
  /* Return the mode status */
  return tmpreg;
 80060a2:	68fb      	ldr	r3, [r7, #12]
}
 80060a4:	4618      	mov	r0, r3
 80060a6:	3714      	adds	r7, #20
 80060a8:	46bd      	mov	sp, r7
 80060aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ae:	4770      	bx	lr
 80060b0:	a0000140 	.word	0xa0000140

080060b4 <FMC_SetRefreshCount>:
  * @brief  defines the SDRAM Memory Refresh rate.
  * @param  FMC_Count: specifies the Refresh timer count.       
  * @retval None
  */
void FMC_SetRefreshCount(uint32_t FMC_Count)
{
 80060b4:	b480      	push	{r7}
 80060b6:	b083      	sub	sp, #12
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
  /* check the parameters */
  assert_param(IS_FMC_REFRESH_COUNT(FMC_Count));
  
  FMC_Bank5_6->SDRTR |= (FMC_Count<<1);
 80060bc:	4b06      	ldr	r3, [pc, #24]	; (80060d8 <FMC_SetRefreshCount+0x24>)
 80060be:	695a      	ldr	r2, [r3, #20]
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	005b      	lsls	r3, r3, #1
 80060c4:	4904      	ldr	r1, [pc, #16]	; (80060d8 <FMC_SetRefreshCount+0x24>)
 80060c6:	4313      	orrs	r3, r2
 80060c8:	614b      	str	r3, [r1, #20]
   
}
 80060ca:	bf00      	nop
 80060cc:	370c      	adds	r7, #12
 80060ce:	46bd      	mov	sp, r7
 80060d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d4:	4770      	bx	lr
 80060d6:	bf00      	nop
 80060d8:	a0000140 	.word	0xa0000140

080060dc <FMC_SetAutoRefresh_Number>:
  * @brief  Sets the Number of consecutive SDRAM Memory auto Refresh commands.
  * @param  FMC_Number: specifies the auto Refresh number.       
  * @retval None
  */
void FMC_SetAutoRefresh_Number(uint32_t FMC_Number)
{
 80060dc:	b480      	push	{r7}
 80060de:	b083      	sub	sp, #12
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
  /* check the parameters */
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(FMC_Number));
  
  FMC_Bank5_6->SDCMR |= (FMC_Number << 5);   
 80060e4:	4b06      	ldr	r3, [pc, #24]	; (8006100 <FMC_SetAutoRefresh_Number+0x24>)
 80060e6:	691a      	ldr	r2, [r3, #16]
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	015b      	lsls	r3, r3, #5
 80060ec:	4904      	ldr	r1, [pc, #16]	; (8006100 <FMC_SetAutoRefresh_Number+0x24>)
 80060ee:	4313      	orrs	r3, r2
 80060f0:	610b      	str	r3, [r1, #16]
}
 80060f2:	bf00      	nop
 80060f4:	370c      	adds	r7, #12
 80060f6:	46bd      	mov	sp, r7
 80060f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fc:	4770      	bx	lr
 80060fe:	bf00      	nop
 8006100:	a0000140 	.word	0xa0000140

08006104 <FMC_SDRAMWriteProtectionConfig>:
  * @param  NewState: new state of the write protection flag.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void FMC_SDRAMWriteProtectionConfig(uint32_t SDRAM_Bank, FunctionalState NewState)
{
 8006104:	b480      	push	{r7}
 8006106:	b083      	sub	sp, #12
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
 800610c:	460b      	mov	r3, r1
 800610e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameter */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_FMC_SDRAM_BANK(SDRAM_Bank));
  
  if (NewState != DISABLE)
 8006110:	78fb      	ldrb	r3, [r7, #3]
 8006112:	2b00      	cmp	r3, #0
 8006114:	d00a      	beq.n	800612c <FMC_SDRAMWriteProtectionConfig+0x28>
  {
    FMC_Bank5_6->SDCR[SDRAM_Bank] |= FMC_Write_Protection_Enable;    
 8006116:	4a0e      	ldr	r2, [pc, #56]	; (8006150 <FMC_SDRAMWriteProtectionConfig+0x4c>)
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800611e:	490c      	ldr	r1, [pc, #48]	; (8006150 <FMC_SDRAMWriteProtectionConfig+0x4c>)
 8006120:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  else
  {
    FMC_Bank5_6->SDCR[SDRAM_Bank] &= SDCR_WriteProtection_RESET;
  } 
  
}
 800612a:	e00a      	b.n	8006142 <FMC_SDRAMWriteProtectionConfig+0x3e>
    FMC_Bank5_6->SDCR[SDRAM_Bank] &= SDCR_WriteProtection_RESET;
 800612c:	4a08      	ldr	r2, [pc, #32]	; (8006150 <FMC_SDRAMWriteProtectionConfig+0x4c>)
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8006134:	4906      	ldr	r1, [pc, #24]	; (8006150 <FMC_SDRAMWriteProtectionConfig+0x4c>)
 8006136:	f647 53ff 	movw	r3, #32255	; 0x7dff
 800613a:	4013      	ands	r3, r2
 800613c:	687a      	ldr	r2, [r7, #4]
 800613e:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
}
 8006142:	bf00      	nop
 8006144:	370c      	adds	r7, #12
 8006146:	46bd      	mov	sp, r7
 8006148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614c:	4770      	bx	lr
 800614e:	bf00      	nop
 8006150:	a0000140 	.word	0xa0000140

08006154 <FMC_ITConfig>:
  * @param  NewState: new state of the specified FMC interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void FMC_ITConfig(uint32_t FMC_Bank, uint32_t FMC_IT, FunctionalState NewState)
{
 8006154:	b480      	push	{r7}
 8006156:	b085      	sub	sp, #20
 8006158:	af00      	add	r7, sp, #0
 800615a:	60f8      	str	r0, [r7, #12]
 800615c:	60b9      	str	r1, [r7, #8]
 800615e:	4613      	mov	r3, r2
 8006160:	71fb      	strb	r3, [r7, #7]
  assert_param(IS_FMC_IT_BANK(FMC_Bank));
  assert_param(IS_FMC_IT(FMC_IT));	
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8006162:	79fb      	ldrb	r3, [r7, #7]
 8006164:	2b00      	cmp	r3, #0
 8006166:	d026      	beq.n	80061b6 <FMC_ITConfig+0x62>
  {
    /* Enable the selected FMC_Bank2 interrupts */
    if(FMC_Bank == FMC_Bank2_NAND)
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	2b10      	cmp	r3, #16
 800616c:	d106      	bne.n	800617c <FMC_ITConfig+0x28>
    {
      FMC_Bank2->SR2 |= FMC_IT;
 800616e:	4b2a      	ldr	r3, [pc, #168]	; (8006218 <FMC_ITConfig+0xc4>)
 8006170:	685a      	ldr	r2, [r3, #4]
 8006172:	4929      	ldr	r1, [pc, #164]	; (8006218 <FMC_ITConfig+0xc4>)
 8006174:	68bb      	ldr	r3, [r7, #8]
 8006176:	4313      	orrs	r3, r2
 8006178:	604b      	str	r3, [r1, #4]
    {
      /* Disables the interrupt if the refresh error flag is not set */
      FMC_Bank5_6->SDRTR &= (uint32_t)~FMC_IT; 
    }
  }
}
 800617a:	e046      	b.n	800620a <FMC_ITConfig+0xb6>
    else if (FMC_Bank == FMC_Bank3_NAND)
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006182:	d106      	bne.n	8006192 <FMC_ITConfig+0x3e>
      FMC_Bank3->SR3 |= FMC_IT;
 8006184:	4b25      	ldr	r3, [pc, #148]	; (800621c <FMC_ITConfig+0xc8>)
 8006186:	685a      	ldr	r2, [r3, #4]
 8006188:	4924      	ldr	r1, [pc, #144]	; (800621c <FMC_ITConfig+0xc8>)
 800618a:	68bb      	ldr	r3, [r7, #8]
 800618c:	4313      	orrs	r3, r2
 800618e:	604b      	str	r3, [r1, #4]
}
 8006190:	e03b      	b.n	800620a <FMC_ITConfig+0xb6>
    else if (FMC_Bank == FMC_Bank4_PCCARD)
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006198:	d106      	bne.n	80061a8 <FMC_ITConfig+0x54>
      FMC_Bank4->SR4 |= FMC_IT;    
 800619a:	4b21      	ldr	r3, [pc, #132]	; (8006220 <FMC_ITConfig+0xcc>)
 800619c:	685a      	ldr	r2, [r3, #4]
 800619e:	4920      	ldr	r1, [pc, #128]	; (8006220 <FMC_ITConfig+0xcc>)
 80061a0:	68bb      	ldr	r3, [r7, #8]
 80061a2:	4313      	orrs	r3, r2
 80061a4:	604b      	str	r3, [r1, #4]
}
 80061a6:	e030      	b.n	800620a <FMC_ITConfig+0xb6>
      FMC_Bank5_6->SDRTR |= FMC_IT; 
 80061a8:	4b1e      	ldr	r3, [pc, #120]	; (8006224 <FMC_ITConfig+0xd0>)
 80061aa:	695a      	ldr	r2, [r3, #20]
 80061ac:	491d      	ldr	r1, [pc, #116]	; (8006224 <FMC_ITConfig+0xd0>)
 80061ae:	68bb      	ldr	r3, [r7, #8]
 80061b0:	4313      	orrs	r3, r2
 80061b2:	614b      	str	r3, [r1, #20]
}
 80061b4:	e029      	b.n	800620a <FMC_ITConfig+0xb6>
    if(FMC_Bank == FMC_Bank2_NAND)
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	2b10      	cmp	r3, #16
 80061ba:	d107      	bne.n	80061cc <FMC_ITConfig+0x78>
      FMC_Bank2->SR2 &= (uint32_t)~FMC_IT;
 80061bc:	4b16      	ldr	r3, [pc, #88]	; (8006218 <FMC_ITConfig+0xc4>)
 80061be:	685a      	ldr	r2, [r3, #4]
 80061c0:	68bb      	ldr	r3, [r7, #8]
 80061c2:	43db      	mvns	r3, r3
 80061c4:	4914      	ldr	r1, [pc, #80]	; (8006218 <FMC_ITConfig+0xc4>)
 80061c6:	4013      	ands	r3, r2
 80061c8:	604b      	str	r3, [r1, #4]
}
 80061ca:	e01e      	b.n	800620a <FMC_ITConfig+0xb6>
    else if (FMC_Bank == FMC_Bank3_NAND)
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80061d2:	d107      	bne.n	80061e4 <FMC_ITConfig+0x90>
      FMC_Bank3->SR3 &= (uint32_t)~FMC_IT;
 80061d4:	4b11      	ldr	r3, [pc, #68]	; (800621c <FMC_ITConfig+0xc8>)
 80061d6:	685a      	ldr	r2, [r3, #4]
 80061d8:	68bb      	ldr	r3, [r7, #8]
 80061da:	43db      	mvns	r3, r3
 80061dc:	490f      	ldr	r1, [pc, #60]	; (800621c <FMC_ITConfig+0xc8>)
 80061de:	4013      	ands	r3, r2
 80061e0:	604b      	str	r3, [r1, #4]
}
 80061e2:	e012      	b.n	800620a <FMC_ITConfig+0xb6>
    else if(FMC_Bank == FMC_Bank4_PCCARD)
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061ea:	d107      	bne.n	80061fc <FMC_ITConfig+0xa8>
      FMC_Bank4->SR4 &= (uint32_t)~FMC_IT;    
 80061ec:	4b0c      	ldr	r3, [pc, #48]	; (8006220 <FMC_ITConfig+0xcc>)
 80061ee:	685a      	ldr	r2, [r3, #4]
 80061f0:	68bb      	ldr	r3, [r7, #8]
 80061f2:	43db      	mvns	r3, r3
 80061f4:	490a      	ldr	r1, [pc, #40]	; (8006220 <FMC_ITConfig+0xcc>)
 80061f6:	4013      	ands	r3, r2
 80061f8:	604b      	str	r3, [r1, #4]
}
 80061fa:	e006      	b.n	800620a <FMC_ITConfig+0xb6>
      FMC_Bank5_6->SDRTR &= (uint32_t)~FMC_IT; 
 80061fc:	4b09      	ldr	r3, [pc, #36]	; (8006224 <FMC_ITConfig+0xd0>)
 80061fe:	695a      	ldr	r2, [r3, #20]
 8006200:	68bb      	ldr	r3, [r7, #8]
 8006202:	43db      	mvns	r3, r3
 8006204:	4907      	ldr	r1, [pc, #28]	; (8006224 <FMC_ITConfig+0xd0>)
 8006206:	4013      	ands	r3, r2
 8006208:	614b      	str	r3, [r1, #20]
}
 800620a:	bf00      	nop
 800620c:	3714      	adds	r7, #20
 800620e:	46bd      	mov	sp, r7
 8006210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006214:	4770      	bx	lr
 8006216:	bf00      	nop
 8006218:	a0000060 	.word	0xa0000060
 800621c:	a0000080 	.word	0xa0000080
 8006220:	a00000a0 	.word	0xa00000a0
 8006224:	a0000140 	.word	0xa0000140

08006228 <FMC_GetFlagStatus>:
  *            @arg FMC_FLAG_Refresh: Refresh error Flag.
  *            @arg FMC_FLAG_Busy: Busy status Flag.     
  * @retval The new state of FMC_FLAG (SET or RESET).
  */
FlagStatus FMC_GetFlagStatus(uint32_t FMC_Bank, uint32_t FMC_FLAG)
{
 8006228:	b480      	push	{r7}
 800622a:	b085      	sub	sp, #20
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
 8006230:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 8006232:	2300      	movs	r3, #0
 8006234:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsr = 0x00000000;
 8006236:	2300      	movs	r3, #0
 8006238:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_FMC_GETFLAG_BANK(FMC_Bank));
  assert_param(IS_FMC_GET_FLAG(FMC_FLAG));
  
  if(FMC_Bank == FMC_Bank2_NAND)
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	2b10      	cmp	r3, #16
 800623e:	d103      	bne.n	8006248 <FMC_GetFlagStatus+0x20>
  {
    tmpsr = FMC_Bank2->SR2;
 8006240:	4b14      	ldr	r3, [pc, #80]	; (8006294 <FMC_GetFlagStatus+0x6c>)
 8006242:	685b      	ldr	r3, [r3, #4]
 8006244:	60bb      	str	r3, [r7, #8]
 8006246:	e012      	b.n	800626e <FMC_GetFlagStatus+0x46>
  }  
  else if(FMC_Bank == FMC_Bank3_NAND)
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800624e:	d103      	bne.n	8006258 <FMC_GetFlagStatus+0x30>
  {
    tmpsr = FMC_Bank3->SR3;
 8006250:	4b11      	ldr	r3, [pc, #68]	; (8006298 <FMC_GetFlagStatus+0x70>)
 8006252:	685b      	ldr	r3, [r3, #4]
 8006254:	60bb      	str	r3, [r7, #8]
 8006256:	e00a      	b.n	800626e <FMC_GetFlagStatus+0x46>
  }
  else if(FMC_Bank == FMC_Bank4_PCCARD)
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800625e:	d103      	bne.n	8006268 <FMC_GetFlagStatus+0x40>
  {
    tmpsr = FMC_Bank4->SR4;
 8006260:	4b0e      	ldr	r3, [pc, #56]	; (800629c <FMC_GetFlagStatus+0x74>)
 8006262:	685b      	ldr	r3, [r3, #4]
 8006264:	60bb      	str	r3, [r7, #8]
 8006266:	e002      	b.n	800626e <FMC_GetFlagStatus+0x46>
  }
  else 
  {
    tmpsr = FMC_Bank5_6->SDSR;
 8006268:	4b0d      	ldr	r3, [pc, #52]	; (80062a0 <FMC_GetFlagStatus+0x78>)
 800626a:	699b      	ldr	r3, [r3, #24]
 800626c:	60bb      	str	r3, [r7, #8]
  }
  
  /* Get the flag status */
  if ((tmpsr & FMC_FLAG) != FMC_FLAG )
 800626e:	68ba      	ldr	r2, [r7, #8]
 8006270:	683b      	ldr	r3, [r7, #0]
 8006272:	4013      	ands	r3, r2
 8006274:	683a      	ldr	r2, [r7, #0]
 8006276:	429a      	cmp	r2, r3
 8006278:	d002      	beq.n	8006280 <FMC_GetFlagStatus+0x58>
  {
    bitstatus = RESET;
 800627a:	2300      	movs	r3, #0
 800627c:	73fb      	strb	r3, [r7, #15]
 800627e:	e001      	b.n	8006284 <FMC_GetFlagStatus+0x5c>
  }
  else
  {
    bitstatus = SET;
 8006280:	2301      	movs	r3, #1
 8006282:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the flag status */
  return bitstatus;
 8006284:	7bfb      	ldrb	r3, [r7, #15]
}
 8006286:	4618      	mov	r0, r3
 8006288:	3714      	adds	r7, #20
 800628a:	46bd      	mov	sp, r7
 800628c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006290:	4770      	bx	lr
 8006292:	bf00      	nop
 8006294:	a0000060 	.word	0xa0000060
 8006298:	a0000080 	.word	0xa0000080
 800629c:	a00000a0 	.word	0xa00000a0
 80062a0:	a0000140 	.word	0xa0000140

080062a4 <FMC_ClearFlag>:
  *            @arg FMC_FLAG_FallingEdge: Falling edge detection Flag.
  *            @arg FMC_FLAG_Refresh: Refresh error Flag.  
  * @retval None
  */
void FMC_ClearFlag(uint32_t FMC_Bank, uint32_t FMC_FLAG)
{
 80062a4:	b480      	push	{r7}
 80062a6:	b083      	sub	sp, #12
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
 80062ac:	6039      	str	r1, [r7, #0]
 /* Check the parameters */
  assert_param(IS_FMC_GETFLAG_BANK(FMC_Bank));
  assert_param(IS_FMC_CLEAR_FLAG(FMC_FLAG)) ;
    
  if(FMC_Bank == FMC_Bank2_NAND)
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	2b10      	cmp	r3, #16
 80062b2:	d107      	bne.n	80062c4 <FMC_ClearFlag+0x20>
  {
    FMC_Bank2->SR2 &= (~FMC_FLAG); 
 80062b4:	4b16      	ldr	r3, [pc, #88]	; (8006310 <FMC_ClearFlag+0x6c>)
 80062b6:	685a      	ldr	r2, [r3, #4]
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	43db      	mvns	r3, r3
 80062bc:	4914      	ldr	r1, [pc, #80]	; (8006310 <FMC_ClearFlag+0x6c>)
 80062be:	4013      	ands	r3, r2
 80062c0:	604b      	str	r3, [r1, #4]
  else
  {
    FMC_Bank5_6->SDRTR &= (~FMC_FLAG);
  }
  
}
 80062c2:	e01e      	b.n	8006302 <FMC_ClearFlag+0x5e>
  else if(FMC_Bank == FMC_Bank3_NAND)
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80062ca:	d107      	bne.n	80062dc <FMC_ClearFlag+0x38>
    FMC_Bank3->SR3 &= (~FMC_FLAG);
 80062cc:	4b11      	ldr	r3, [pc, #68]	; (8006314 <FMC_ClearFlag+0x70>)
 80062ce:	685a      	ldr	r2, [r3, #4]
 80062d0:	683b      	ldr	r3, [r7, #0]
 80062d2:	43db      	mvns	r3, r3
 80062d4:	490f      	ldr	r1, [pc, #60]	; (8006314 <FMC_ClearFlag+0x70>)
 80062d6:	4013      	ands	r3, r2
 80062d8:	604b      	str	r3, [r1, #4]
}
 80062da:	e012      	b.n	8006302 <FMC_ClearFlag+0x5e>
  else if(FMC_Bank == FMC_Bank4_PCCARD)
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062e2:	d107      	bne.n	80062f4 <FMC_ClearFlag+0x50>
    FMC_Bank4->SR4 &= (~FMC_FLAG);
 80062e4:	4b0c      	ldr	r3, [pc, #48]	; (8006318 <FMC_ClearFlag+0x74>)
 80062e6:	685a      	ldr	r2, [r3, #4]
 80062e8:	683b      	ldr	r3, [r7, #0]
 80062ea:	43db      	mvns	r3, r3
 80062ec:	490a      	ldr	r1, [pc, #40]	; (8006318 <FMC_ClearFlag+0x74>)
 80062ee:	4013      	ands	r3, r2
 80062f0:	604b      	str	r3, [r1, #4]
}
 80062f2:	e006      	b.n	8006302 <FMC_ClearFlag+0x5e>
    FMC_Bank5_6->SDRTR &= (~FMC_FLAG);
 80062f4:	4b09      	ldr	r3, [pc, #36]	; (800631c <FMC_ClearFlag+0x78>)
 80062f6:	695a      	ldr	r2, [r3, #20]
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	43db      	mvns	r3, r3
 80062fc:	4907      	ldr	r1, [pc, #28]	; (800631c <FMC_ClearFlag+0x78>)
 80062fe:	4013      	ands	r3, r2
 8006300:	614b      	str	r3, [r1, #20]
}
 8006302:	bf00      	nop
 8006304:	370c      	adds	r7, #12
 8006306:	46bd      	mov	sp, r7
 8006308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630c:	4770      	bx	lr
 800630e:	bf00      	nop
 8006310:	a0000060 	.word	0xa0000060
 8006314:	a0000080 	.word	0xa0000080
 8006318:	a00000a0 	.word	0xa00000a0
 800631c:	a0000140 	.word	0xa0000140

08006320 <FMC_GetITStatus>:
  *            @arg FMC_IT_FallingEdge: Falling edge detection interrupt.
  *            @arg FMC_IT_Refresh: Refresh error detection interrupt.    
  * @retval The new state of FMC_IT (SET or RESET).
  */
ITStatus FMC_GetITStatus(uint32_t FMC_Bank, uint32_t FMC_IT)
{
 8006320:	b480      	push	{r7}
 8006322:	b089      	sub	sp, #36	; 0x24
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]
 8006328:	6039      	str	r1, [r7, #0]
  ITStatus bitstatus = RESET;
 800632a:	2300      	movs	r3, #0
 800632c:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpsr = 0x0;
 800632e:	2300      	movs	r3, #0
 8006330:	61bb      	str	r3, [r7, #24]
  uint32_t tmpsr2 = 0x0;
 8006332:	2300      	movs	r3, #0
 8006334:	617b      	str	r3, [r7, #20]
  uint32_t itstatus = 0x0;
 8006336:	2300      	movs	r3, #0
 8006338:	613b      	str	r3, [r7, #16]
  uint32_t itenable = 0x0; 
 800633a:	2300      	movs	r3, #0
 800633c:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_FMC_IT_BANK(FMC_Bank));
  assert_param(IS_FMC_GET_IT(FMC_IT));
  
  if(FMC_Bank == FMC_Bank2_NAND)
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	2b10      	cmp	r3, #16
 8006342:	d103      	bne.n	800634c <FMC_GetITStatus+0x2c>
  {
    tmpsr = FMC_Bank2->SR2;
 8006344:	4b1f      	ldr	r3, [pc, #124]	; (80063c4 <FMC_GetITStatus+0xa4>)
 8006346:	685b      	ldr	r3, [r3, #4]
 8006348:	61bb      	str	r3, [r7, #24]
 800634a:	e015      	b.n	8006378 <FMC_GetITStatus+0x58>
  }  
  else if(FMC_Bank == FMC_Bank3_NAND)
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006352:	d103      	bne.n	800635c <FMC_GetITStatus+0x3c>
  {
    tmpsr = FMC_Bank3->SR3;
 8006354:	4b1c      	ldr	r3, [pc, #112]	; (80063c8 <FMC_GetITStatus+0xa8>)
 8006356:	685b      	ldr	r3, [r3, #4]
 8006358:	61bb      	str	r3, [r7, #24]
 800635a:	e00d      	b.n	8006378 <FMC_GetITStatus+0x58>
  }
  else if(FMC_Bank == FMC_Bank4_PCCARD)
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006362:	d103      	bne.n	800636c <FMC_GetITStatus+0x4c>
  {
    tmpsr = FMC_Bank4->SR4;
 8006364:	4b19      	ldr	r3, [pc, #100]	; (80063cc <FMC_GetITStatus+0xac>)
 8006366:	685b      	ldr	r3, [r3, #4]
 8006368:	61bb      	str	r3, [r7, #24]
 800636a:	e005      	b.n	8006378 <FMC_GetITStatus+0x58>
  }
  /* FMC_Bank5_6 SDRAM*/
  else
  {
    tmpsr = FMC_Bank5_6->SDRTR;
 800636c:	4b18      	ldr	r3, [pc, #96]	; (80063d0 <FMC_GetITStatus+0xb0>)
 800636e:	695b      	ldr	r3, [r3, #20]
 8006370:	61bb      	str	r3, [r7, #24]
    tmpsr2 = FMC_Bank5_6->SDSR;
 8006372:	4b17      	ldr	r3, [pc, #92]	; (80063d0 <FMC_GetITStatus+0xb0>)
 8006374:	699b      	ldr	r3, [r3, #24]
 8006376:	617b      	str	r3, [r7, #20]
  } 
  
  /* get the IT enable bit status*/
  itenable = tmpsr & FMC_IT;
 8006378:	69ba      	ldr	r2, [r7, #24]
 800637a:	683b      	ldr	r3, [r7, #0]
 800637c:	4013      	ands	r3, r2
 800637e:	60fb      	str	r3, [r7, #12]
  
  /* get the corresponding IT Flag status*/
  if((FMC_Bank == FMC_Bank1_SDRAM) || (FMC_Bank == FMC_Bank2_SDRAM))
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2b00      	cmp	r3, #0
 8006384:	d002      	beq.n	800638c <FMC_GetITStatus+0x6c>
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	2b01      	cmp	r3, #1
 800638a:	d104      	bne.n	8006396 <FMC_GetITStatus+0x76>
  {
    itstatus = tmpsr2 & FMC_SDSR_RE;  
 800638c:	697b      	ldr	r3, [r7, #20]
 800638e:	f003 0301 	and.w	r3, r3, #1
 8006392:	613b      	str	r3, [r7, #16]
 8006394:	e004      	b.n	80063a0 <FMC_GetITStatus+0x80>
  }           
  else
  {
    itstatus = tmpsr & (FMC_IT >> 3);  
 8006396:	683b      	ldr	r3, [r7, #0]
 8006398:	08db      	lsrs	r3, r3, #3
 800639a:	69ba      	ldr	r2, [r7, #24]
 800639c:	4013      	ands	r3, r2
 800639e:	613b      	str	r3, [r7, #16]
  }  
  
  if ((itstatus != (uint32_t)RESET)  && (itenable != (uint32_t)RESET))
 80063a0:	693b      	ldr	r3, [r7, #16]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d005      	beq.n	80063b2 <FMC_GetITStatus+0x92>
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d002      	beq.n	80063b2 <FMC_GetITStatus+0x92>
  {
    bitstatus = SET;
 80063ac:	2301      	movs	r3, #1
 80063ae:	77fb      	strb	r3, [r7, #31]
 80063b0:	e001      	b.n	80063b6 <FMC_GetITStatus+0x96>
  }
  else
  {
    bitstatus = RESET;
 80063b2:	2300      	movs	r3, #0
 80063b4:	77fb      	strb	r3, [r7, #31]
  }
  return bitstatus; 
 80063b6:	7ffb      	ldrb	r3, [r7, #31]
}
 80063b8:	4618      	mov	r0, r3
 80063ba:	3724      	adds	r7, #36	; 0x24
 80063bc:	46bd      	mov	sp, r7
 80063be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c2:	4770      	bx	lr
 80063c4:	a0000060 	.word	0xa0000060
 80063c8:	a0000080 	.word	0xa0000080
 80063cc:	a00000a0 	.word	0xa00000a0
 80063d0:	a0000140 	.word	0xa0000140

080063d4 <FMC_ClearITPendingBit>:
  *            @arg FMC_IT_FallingEdge: Falling edge detection interrupt.
  *            @arg FMC_IT_Refresh: Refresh error detection interrupt.  
  * @retval None
  */
void FMC_ClearITPendingBit(uint32_t FMC_Bank, uint32_t FMC_IT)
{
 80063d4:	b480      	push	{r7}
 80063d6:	b083      	sub	sp, #12
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
 80063dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_IT_BANK(FMC_Bank));
  assert_param(IS_FMC_IT(FMC_IT));
    
  if(FMC_Bank == FMC_Bank2_NAND)
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	2b10      	cmp	r3, #16
 80063e2:	d108      	bne.n	80063f6 <FMC_ClearITPendingBit+0x22>
  {
    FMC_Bank2->SR2 &= ~(FMC_IT >> 3); 
 80063e4:	4b17      	ldr	r3, [pc, #92]	; (8006444 <FMC_ClearITPendingBit+0x70>)
 80063e6:	685a      	ldr	r2, [r3, #4]
 80063e8:	683b      	ldr	r3, [r7, #0]
 80063ea:	08db      	lsrs	r3, r3, #3
 80063ec:	43db      	mvns	r3, r3
 80063ee:	4915      	ldr	r1, [pc, #84]	; (8006444 <FMC_ClearITPendingBit+0x70>)
 80063f0:	4013      	ands	r3, r2
 80063f2:	604b      	str	r3, [r1, #4]
  /* FMC_Bank5_6 SDRAM*/
  else
  {
    FMC_Bank5_6->SDRTR |= FMC_SDRTR_CRE;
  }
}
 80063f4:	e01f      	b.n	8006436 <FMC_ClearITPendingBit+0x62>
  else if(FMC_Bank == FMC_Bank3_NAND)
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80063fc:	d108      	bne.n	8006410 <FMC_ClearITPendingBit+0x3c>
    FMC_Bank3->SR3 &= ~(FMC_IT >> 3);
 80063fe:	4b12      	ldr	r3, [pc, #72]	; (8006448 <FMC_ClearITPendingBit+0x74>)
 8006400:	685a      	ldr	r2, [r3, #4]
 8006402:	683b      	ldr	r3, [r7, #0]
 8006404:	08db      	lsrs	r3, r3, #3
 8006406:	43db      	mvns	r3, r3
 8006408:	490f      	ldr	r1, [pc, #60]	; (8006448 <FMC_ClearITPendingBit+0x74>)
 800640a:	4013      	ands	r3, r2
 800640c:	604b      	str	r3, [r1, #4]
}
 800640e:	e012      	b.n	8006436 <FMC_ClearITPendingBit+0x62>
  else if(FMC_Bank == FMC_Bank4_PCCARD)
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006416:	d108      	bne.n	800642a <FMC_ClearITPendingBit+0x56>
    FMC_Bank4->SR4 &= ~(FMC_IT >> 3);
 8006418:	4b0c      	ldr	r3, [pc, #48]	; (800644c <FMC_ClearITPendingBit+0x78>)
 800641a:	685a      	ldr	r2, [r3, #4]
 800641c:	683b      	ldr	r3, [r7, #0]
 800641e:	08db      	lsrs	r3, r3, #3
 8006420:	43db      	mvns	r3, r3
 8006422:	490a      	ldr	r1, [pc, #40]	; (800644c <FMC_ClearITPendingBit+0x78>)
 8006424:	4013      	ands	r3, r2
 8006426:	604b      	str	r3, [r1, #4]
}
 8006428:	e005      	b.n	8006436 <FMC_ClearITPendingBit+0x62>
    FMC_Bank5_6->SDRTR |= FMC_SDRTR_CRE;
 800642a:	4b09      	ldr	r3, [pc, #36]	; (8006450 <FMC_ClearITPendingBit+0x7c>)
 800642c:	695b      	ldr	r3, [r3, #20]
 800642e:	4a08      	ldr	r2, [pc, #32]	; (8006450 <FMC_ClearITPendingBit+0x7c>)
 8006430:	f043 0301 	orr.w	r3, r3, #1
 8006434:	6153      	str	r3, [r2, #20]
}
 8006436:	bf00      	nop
 8006438:	370c      	adds	r7, #12
 800643a:	46bd      	mov	sp, r7
 800643c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006440:	4770      	bx	lr
 8006442:	bf00      	nop
 8006444:	a0000060 	.word	0xa0000060
 8006448:	a0000080 	.word	0xa0000080
 800644c:	a00000a0 	.word	0xa00000a0
 8006450:	a0000140 	.word	0xa0000140

08006454 <GPIO_DeInit>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F42xxx/43xxx devices.
  *                      x can be (A, B, C, D and H) to select the GPIO peripheral for STM32F401xx devices.  
  * @retval None
  */
void GPIO_DeInit(GPIO_TypeDef* GPIOx)
{
 8006454:	b580      	push	{r7, lr}
 8006456:	b082      	sub	sp, #8
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  if (GPIOx == GPIOA)
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	4a4b      	ldr	r2, [pc, #300]	; (800658c <GPIO_DeInit+0x138>)
 8006460:	4293      	cmp	r3, r2
 8006462:	d108      	bne.n	8006476 <GPIO_DeInit+0x22>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 8006464:	2101      	movs	r1, #1
 8006466:	2001      	movs	r0, #1
 8006468:	f002 fb16 	bl	8008a98 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, DISABLE);
 800646c:	2100      	movs	r1, #0
 800646e:	2001      	movs	r0, #1
 8006470:	f002 fb12 	bl	8008a98 <RCC_AHB1PeriphResetCmd>
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, DISABLE);
    }
  }
}
 8006474:	e086      	b.n	8006584 <GPIO_DeInit+0x130>
  else if (GPIOx == GPIOB)
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	4a45      	ldr	r2, [pc, #276]	; (8006590 <GPIO_DeInit+0x13c>)
 800647a:	4293      	cmp	r3, r2
 800647c:	d108      	bne.n	8006490 <GPIO_DeInit+0x3c>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 800647e:	2101      	movs	r1, #1
 8006480:	2002      	movs	r0, #2
 8006482:	f002 fb09 	bl	8008a98 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, DISABLE);
 8006486:	2100      	movs	r1, #0
 8006488:	2002      	movs	r0, #2
 800648a:	f002 fb05 	bl	8008a98 <RCC_AHB1PeriphResetCmd>
}
 800648e:	e079      	b.n	8006584 <GPIO_DeInit+0x130>
  else if (GPIOx == GPIOC)
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	4a40      	ldr	r2, [pc, #256]	; (8006594 <GPIO_DeInit+0x140>)
 8006494:	4293      	cmp	r3, r2
 8006496:	d108      	bne.n	80064aa <GPIO_DeInit+0x56>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, ENABLE);
 8006498:	2101      	movs	r1, #1
 800649a:	2004      	movs	r0, #4
 800649c:	f002 fafc 	bl	8008a98 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, DISABLE);
 80064a0:	2100      	movs	r1, #0
 80064a2:	2004      	movs	r0, #4
 80064a4:	f002 faf8 	bl	8008a98 <RCC_AHB1PeriphResetCmd>
}
 80064a8:	e06c      	b.n	8006584 <GPIO_DeInit+0x130>
  else if (GPIOx == GPIOD)
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	4a3a      	ldr	r2, [pc, #232]	; (8006598 <GPIO_DeInit+0x144>)
 80064ae:	4293      	cmp	r3, r2
 80064b0:	d108      	bne.n	80064c4 <GPIO_DeInit+0x70>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, ENABLE);
 80064b2:	2101      	movs	r1, #1
 80064b4:	2008      	movs	r0, #8
 80064b6:	f002 faef 	bl	8008a98 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, DISABLE);
 80064ba:	2100      	movs	r1, #0
 80064bc:	2008      	movs	r0, #8
 80064be:	f002 faeb 	bl	8008a98 <RCC_AHB1PeriphResetCmd>
}
 80064c2:	e05f      	b.n	8006584 <GPIO_DeInit+0x130>
  else if (GPIOx == GPIOE)
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	4a35      	ldr	r2, [pc, #212]	; (800659c <GPIO_DeInit+0x148>)
 80064c8:	4293      	cmp	r3, r2
 80064ca:	d108      	bne.n	80064de <GPIO_DeInit+0x8a>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, ENABLE);
 80064cc:	2101      	movs	r1, #1
 80064ce:	2010      	movs	r0, #16
 80064d0:	f002 fae2 	bl	8008a98 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, DISABLE);
 80064d4:	2100      	movs	r1, #0
 80064d6:	2010      	movs	r0, #16
 80064d8:	f002 fade 	bl	8008a98 <RCC_AHB1PeriphResetCmd>
}
 80064dc:	e052      	b.n	8006584 <GPIO_DeInit+0x130>
  else if (GPIOx == GPIOF)
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	4a2f      	ldr	r2, [pc, #188]	; (80065a0 <GPIO_DeInit+0x14c>)
 80064e2:	4293      	cmp	r3, r2
 80064e4:	d108      	bne.n	80064f8 <GPIO_DeInit+0xa4>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, ENABLE);
 80064e6:	2101      	movs	r1, #1
 80064e8:	2020      	movs	r0, #32
 80064ea:	f002 fad5 	bl	8008a98 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, DISABLE);
 80064ee:	2100      	movs	r1, #0
 80064f0:	2020      	movs	r0, #32
 80064f2:	f002 fad1 	bl	8008a98 <RCC_AHB1PeriphResetCmd>
}
 80064f6:	e045      	b.n	8006584 <GPIO_DeInit+0x130>
  else if (GPIOx == GPIOG)
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	4a2a      	ldr	r2, [pc, #168]	; (80065a4 <GPIO_DeInit+0x150>)
 80064fc:	4293      	cmp	r3, r2
 80064fe:	d108      	bne.n	8006512 <GPIO_DeInit+0xbe>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, ENABLE);
 8006500:	2101      	movs	r1, #1
 8006502:	2040      	movs	r0, #64	; 0x40
 8006504:	f002 fac8 	bl	8008a98 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, DISABLE);
 8006508:	2100      	movs	r1, #0
 800650a:	2040      	movs	r0, #64	; 0x40
 800650c:	f002 fac4 	bl	8008a98 <RCC_AHB1PeriphResetCmd>
}
 8006510:	e038      	b.n	8006584 <GPIO_DeInit+0x130>
  else if (GPIOx == GPIOH)
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	4a24      	ldr	r2, [pc, #144]	; (80065a8 <GPIO_DeInit+0x154>)
 8006516:	4293      	cmp	r3, r2
 8006518:	d108      	bne.n	800652c <GPIO_DeInit+0xd8>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, ENABLE);
 800651a:	2101      	movs	r1, #1
 800651c:	2080      	movs	r0, #128	; 0x80
 800651e:	f002 fabb 	bl	8008a98 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, DISABLE);
 8006522:	2100      	movs	r1, #0
 8006524:	2080      	movs	r0, #128	; 0x80
 8006526:	f002 fab7 	bl	8008a98 <RCC_AHB1PeriphResetCmd>
}
 800652a:	e02b      	b.n	8006584 <GPIO_DeInit+0x130>
  else if (GPIOx == GPIOI)
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	4a1f      	ldr	r2, [pc, #124]	; (80065ac <GPIO_DeInit+0x158>)
 8006530:	4293      	cmp	r3, r2
 8006532:	d10a      	bne.n	800654a <GPIO_DeInit+0xf6>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
 8006534:	2101      	movs	r1, #1
 8006536:	f44f 7080 	mov.w	r0, #256	; 0x100
 800653a:	f002 faad 	bl	8008a98 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
 800653e:	2100      	movs	r1, #0
 8006540:	f44f 7080 	mov.w	r0, #256	; 0x100
 8006544:	f002 faa8 	bl	8008a98 <RCC_AHB1PeriphResetCmd>
}
 8006548:	e01c      	b.n	8006584 <GPIO_DeInit+0x130>
  else if (GPIOx == GPIOJ)
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	4a18      	ldr	r2, [pc, #96]	; (80065b0 <GPIO_DeInit+0x15c>)
 800654e:	4293      	cmp	r3, r2
 8006550:	d10a      	bne.n	8006568 <GPIO_DeInit+0x114>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOJ, ENABLE);
 8006552:	2101      	movs	r1, #1
 8006554:	f44f 7000 	mov.w	r0, #512	; 0x200
 8006558:	f002 fa9e 	bl	8008a98 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOJ, DISABLE);
 800655c:	2100      	movs	r1, #0
 800655e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8006562:	f002 fa99 	bl	8008a98 <RCC_AHB1PeriphResetCmd>
}
 8006566:	e00d      	b.n	8006584 <GPIO_DeInit+0x130>
    if (GPIOx == GPIOK)
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	4a12      	ldr	r2, [pc, #72]	; (80065b4 <GPIO_DeInit+0x160>)
 800656c:	4293      	cmp	r3, r2
 800656e:	d109      	bne.n	8006584 <GPIO_DeInit+0x130>
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, ENABLE);
 8006570:	2101      	movs	r1, #1
 8006572:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8006576:	f002 fa8f 	bl	8008a98 <RCC_AHB1PeriphResetCmd>
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, DISABLE);
 800657a:	2100      	movs	r1, #0
 800657c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8006580:	f002 fa8a 	bl	8008a98 <RCC_AHB1PeriphResetCmd>
}
 8006584:	bf00      	nop
 8006586:	3708      	adds	r7, #8
 8006588:	46bd      	mov	sp, r7
 800658a:	bd80      	pop	{r7, pc}
 800658c:	40020000 	.word	0x40020000
 8006590:	40020400 	.word	0x40020400
 8006594:	40020800 	.word	0x40020800
 8006598:	40020c00 	.word	0x40020c00
 800659c:	40021000 	.word	0x40021000
 80065a0:	40021400 	.word	0x40021400
 80065a4:	40021800 	.word	0x40021800
 80065a8:	40021c00 	.word	0x40021c00
 80065ac:	40022000 	.word	0x40022000
 80065b0:	40022400 	.word	0x40022400
 80065b4:	40022800 	.word	0x40022800

080065b8 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 80065b8:	b480      	push	{r7}
 80065ba:	b087      	sub	sp, #28
 80065bc:	af00      	add	r7, sp, #0
 80065be:	6078      	str	r0, [r7, #4]
 80065c0:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 80065c2:	2300      	movs	r3, #0
 80065c4:	617b      	str	r3, [r7, #20]
 80065c6:	2300      	movs	r3, #0
 80065c8:	613b      	str	r3, [r7, #16]
 80065ca:	2300      	movs	r3, #0
 80065cc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80065ce:	2300      	movs	r3, #0
 80065d0:	617b      	str	r3, [r7, #20]
 80065d2:	e076      	b.n	80066c2 <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 80065d4:	2201      	movs	r2, #1
 80065d6:	697b      	ldr	r3, [r7, #20]
 80065d8:	fa02 f303 	lsl.w	r3, r2, r3
 80065dc:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 80065de:	683b      	ldr	r3, [r7, #0]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	693a      	ldr	r2, [r7, #16]
 80065e4:	4013      	ands	r3, r2
 80065e6:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 80065e8:	68fa      	ldr	r2, [r7, #12]
 80065ea:	693b      	ldr	r3, [r7, #16]
 80065ec:	429a      	cmp	r2, r3
 80065ee:	d165      	bne.n	80066bc <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681a      	ldr	r2, [r3, #0]
 80065f4:	697b      	ldr	r3, [r7, #20]
 80065f6:	005b      	lsls	r3, r3, #1
 80065f8:	2103      	movs	r1, #3
 80065fa:	fa01 f303 	lsl.w	r3, r1, r3
 80065fe:	43db      	mvns	r3, r3
 8006600:	401a      	ands	r2, r3
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681a      	ldr	r2, [r3, #0]
 800660a:	683b      	ldr	r3, [r7, #0]
 800660c:	791b      	ldrb	r3, [r3, #4]
 800660e:	4619      	mov	r1, r3
 8006610:	697b      	ldr	r3, [r7, #20]
 8006612:	005b      	lsls	r3, r3, #1
 8006614:	fa01 f303 	lsl.w	r3, r1, r3
 8006618:	431a      	orrs	r2, r3
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 800661e:	683b      	ldr	r3, [r7, #0]
 8006620:	791b      	ldrb	r3, [r3, #4]
 8006622:	2b01      	cmp	r3, #1
 8006624:	d003      	beq.n	800662e <GPIO_Init+0x76>
 8006626:	683b      	ldr	r3, [r7, #0]
 8006628:	791b      	ldrb	r3, [r3, #4]
 800662a:	2b02      	cmp	r3, #2
 800662c:	d12e      	bne.n	800668c <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	689a      	ldr	r2, [r3, #8]
 8006632:	697b      	ldr	r3, [r7, #20]
 8006634:	005b      	lsls	r3, r3, #1
 8006636:	2103      	movs	r1, #3
 8006638:	fa01 f303 	lsl.w	r3, r1, r3
 800663c:	43db      	mvns	r3, r3
 800663e:	401a      	ands	r2, r3
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	689a      	ldr	r2, [r3, #8]
 8006648:	683b      	ldr	r3, [r7, #0]
 800664a:	795b      	ldrb	r3, [r3, #5]
 800664c:	4619      	mov	r1, r3
 800664e:	697b      	ldr	r3, [r7, #20]
 8006650:	005b      	lsls	r3, r3, #1
 8006652:	fa01 f303 	lsl.w	r3, r1, r3
 8006656:	431a      	orrs	r2, r3
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	685a      	ldr	r2, [r3, #4]
 8006660:	697b      	ldr	r3, [r7, #20]
 8006662:	b29b      	uxth	r3, r3
 8006664:	4619      	mov	r1, r3
 8006666:	2301      	movs	r3, #1
 8006668:	408b      	lsls	r3, r1
 800666a:	43db      	mvns	r3, r3
 800666c:	401a      	ands	r2, r3
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	685b      	ldr	r3, [r3, #4]
 8006676:	683a      	ldr	r2, [r7, #0]
 8006678:	7992      	ldrb	r2, [r2, #6]
 800667a:	4611      	mov	r1, r2
 800667c:	697a      	ldr	r2, [r7, #20]
 800667e:	b292      	uxth	r2, r2
 8006680:	fa01 f202 	lsl.w	r2, r1, r2
 8006684:	b292      	uxth	r2, r2
 8006686:	431a      	orrs	r2, r3
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	68da      	ldr	r2, [r3, #12]
 8006690:	697b      	ldr	r3, [r7, #20]
 8006692:	b29b      	uxth	r3, r3
 8006694:	005b      	lsls	r3, r3, #1
 8006696:	2103      	movs	r1, #3
 8006698:	fa01 f303 	lsl.w	r3, r1, r3
 800669c:	43db      	mvns	r3, r3
 800669e:	401a      	ands	r2, r3
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	68da      	ldr	r2, [r3, #12]
 80066a8:	683b      	ldr	r3, [r7, #0]
 80066aa:	79db      	ldrb	r3, [r3, #7]
 80066ac:	4619      	mov	r1, r3
 80066ae:	697b      	ldr	r3, [r7, #20]
 80066b0:	005b      	lsls	r3, r3, #1
 80066b2:	fa01 f303 	lsl.w	r3, r1, r3
 80066b6:	431a      	orrs	r2, r3
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80066bc:	697b      	ldr	r3, [r7, #20]
 80066be:	3301      	adds	r3, #1
 80066c0:	617b      	str	r3, [r7, #20]
 80066c2:	697b      	ldr	r3, [r7, #20]
 80066c4:	2b0f      	cmp	r3, #15
 80066c6:	d985      	bls.n	80065d4 <GPIO_Init+0x1c>
    }
  }
}
 80066c8:	bf00      	nop
 80066ca:	371c      	adds	r7, #28
 80066cc:	46bd      	mov	sp, r7
 80066ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d2:	4770      	bx	lr

080066d4 <GPIO_StructInit>:
  * @brief  Fills each GPIO_InitStruct member with its default value.
  * @param  GPIO_InitStruct : pointer to a GPIO_InitTypeDef structure which will be initialized.
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
 80066d4:	b480      	push	{r7}
 80066d6:	b083      	sub	sp, #12
 80066d8:	af00      	add	r7, sp, #0
 80066da:	6078      	str	r0, [r7, #4]
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80066e2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	2200      	movs	r2, #0
 80066e8:	711a      	strb	r2, [r3, #4]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	2200      	movs	r2, #0
 80066ee:	715a      	strb	r2, [r3, #5]
  GPIO_InitStruct->GPIO_OType = GPIO_OType_PP;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	2200      	movs	r2, #0
 80066f4:	719a      	strb	r2, [r3, #6]
  GPIO_InitStruct->GPIO_PuPd = GPIO_PuPd_NOPULL;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	2200      	movs	r2, #0
 80066fa:	71da      	strb	r2, [r3, #7]
}
 80066fc:	bf00      	nop
 80066fe:	370c      	adds	r7, #12
 8006700:	46bd      	mov	sp, r7
 8006702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006706:	4770      	bx	lr

08006708 <GPIO_PinLockConfig>:
  * @param  GPIO_Pin: specifies the port bit to be locked.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_PinLockConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006708:	b480      	push	{r7}
 800670a:	b085      	sub	sp, #20
 800670c:	af00      	add	r7, sp, #0
 800670e:	6078      	str	r0, [r7, #4]
 8006710:	460b      	mov	r3, r1
 8006712:	807b      	strh	r3, [r7, #2]
  __IO uint32_t tmp = 0x00010000;
 8006714:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006718:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  tmp |= GPIO_Pin;
 800671a:	887a      	ldrh	r2, [r7, #2]
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	4313      	orrs	r3, r2
 8006720:	60fb      	str	r3, [r7, #12]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 8006722:	68fa      	ldr	r2, [r7, #12]
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	61da      	str	r2, [r3, #28]
  /* Reset LCKK bit */
  GPIOx->LCKR =  GPIO_Pin;
 8006728:	887a      	ldrh	r2, [r7, #2]
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	61da      	str	r2, [r3, #28]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 800672e:	68fa      	ldr	r2, [r7, #12]
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	61da      	str	r2, [r3, #28]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	69db      	ldr	r3, [r3, #28]
 8006738:	60fb      	str	r3, [r7, #12]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	69db      	ldr	r3, [r3, #28]
 800673e:	60fb      	str	r3, [r7, #12]
}
 8006740:	bf00      	nop
 8006742:	3714      	adds	r7, #20
 8006744:	46bd      	mov	sp, r7
 8006746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674a:	4770      	bx	lr

0800674c <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800674c:	b480      	push	{r7}
 800674e:	b085      	sub	sp, #20
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]
 8006754:	460b      	mov	r3, r1
 8006756:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 8006758:	2300      	movs	r3, #0
 800675a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	691a      	ldr	r2, [r3, #16]
 8006760:	887b      	ldrh	r3, [r7, #2]
 8006762:	4013      	ands	r3, r2
 8006764:	2b00      	cmp	r3, #0
 8006766:	d002      	beq.n	800676e <GPIO_ReadInputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
 8006768:	2301      	movs	r3, #1
 800676a:	73fb      	strb	r3, [r7, #15]
 800676c:	e001      	b.n	8006772 <GPIO_ReadInputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 800676e:	2300      	movs	r3, #0
 8006770:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006772:	7bfb      	ldrb	r3, [r7, #15]
}
 8006774:	4618      	mov	r0, r3
 8006776:	3714      	adds	r7, #20
 8006778:	46bd      	mov	sp, r7
 800677a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677e:	4770      	bx	lr

08006780 <GPIO_ReadInputData>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F42xxx/43xxx devices.
  *                      x can be (A, B, C, D and H) to select the GPIO peripheral for STM32F401xx devices. 
  * @retval GPIO input data port value.
  */
uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
{
 8006780:	b480      	push	{r7}
 8006782:	b083      	sub	sp, #12
 8006784:	af00      	add	r7, sp, #0
 8006786:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->IDR);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	691b      	ldr	r3, [r3, #16]
 800678c:	b29b      	uxth	r3, r3
}
 800678e:	4618      	mov	r0, r3
 8006790:	370c      	adds	r7, #12
 8006792:	46bd      	mov	sp, r7
 8006794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006798:	4770      	bx	lr

0800679a <GPIO_ReadOutputDataBit>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *          This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The output port pin value.
  */
uint8_t GPIO_ReadOutputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800679a:	b480      	push	{r7}
 800679c:	b085      	sub	sp, #20
 800679e:	af00      	add	r7, sp, #0
 80067a0:	6078      	str	r0, [r7, #4]
 80067a2:	460b      	mov	r3, r1
 80067a4:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 80067a6:	2300      	movs	r3, #0
 80067a8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if (((GPIOx->ODR) & GPIO_Pin) != (uint32_t)Bit_RESET)
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	695a      	ldr	r2, [r3, #20]
 80067ae:	887b      	ldrh	r3, [r7, #2]
 80067b0:	4013      	ands	r3, r2
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d002      	beq.n	80067bc <GPIO_ReadOutputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
 80067b6:	2301      	movs	r3, #1
 80067b8:	73fb      	strb	r3, [r7, #15]
 80067ba:	e001      	b.n	80067c0 <GPIO_ReadOutputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 80067bc:	2300      	movs	r3, #0
 80067be:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80067c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80067c2:	4618      	mov	r0, r3
 80067c4:	3714      	adds	r7, #20
 80067c6:	46bd      	mov	sp, r7
 80067c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067cc:	4770      	bx	lr

080067ce <GPIO_ReadOutputData>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F42xxx/43xxx devices.
  *                      x can be (A, B, C, D and H) to select the GPIO peripheral for STM32F401xx devices. 
  * @retval GPIO output data port value.
  */
uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
{
 80067ce:	b480      	push	{r7}
 80067d0:	b083      	sub	sp, #12
 80067d2:	af00      	add	r7, sp, #0
 80067d4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->ODR);
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	695b      	ldr	r3, [r3, #20]
 80067da:	b29b      	uxth	r3, r3
}
 80067dc:	4618      	mov	r0, r3
 80067de:	370c      	adds	r7, #12
 80067e0:	46bd      	mov	sp, r7
 80067e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e6:	4770      	bx	lr

080067e8 <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80067e8:	b480      	push	{r7}
 80067ea:	b083      	sub	sp, #12
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
 80067f0:	460b      	mov	r3, r1
 80067f2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRL = GPIO_Pin;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	887a      	ldrh	r2, [r7, #2]
 80067f8:	831a      	strh	r2, [r3, #24]
}
 80067fa:	bf00      	nop
 80067fc:	370c      	adds	r7, #12
 80067fe:	46bd      	mov	sp, r7
 8006800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006804:	4770      	bx	lr

08006806 <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006806:	b480      	push	{r7}
 8006808:	b083      	sub	sp, #12
 800680a:	af00      	add	r7, sp, #0
 800680c:	6078      	str	r0, [r7, #4]
 800680e:	460b      	mov	r3, r1
 8006810:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRH = GPIO_Pin;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	887a      	ldrh	r2, [r7, #2]
 8006816:	835a      	strh	r2, [r3, #26]
}
 8006818:	bf00      	nop
 800681a:	370c      	adds	r7, #12
 800681c:	46bd      	mov	sp, r7
 800681e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006822:	4770      	bx	lr

08006824 <GPIO_WriteBit>:
  *            @arg Bit_RESET: to clear the port pin
  *            @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
 8006824:	b480      	push	{r7}
 8006826:	b083      	sub	sp, #12
 8006828:	af00      	add	r7, sp, #0
 800682a:	6078      	str	r0, [r7, #4]
 800682c:	460b      	mov	r3, r1
 800682e:	807b      	strh	r3, [r7, #2]
 8006830:	4613      	mov	r3, r2
 8006832:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
 8006834:	787b      	ldrb	r3, [r7, #1]
 8006836:	2b00      	cmp	r3, #0
 8006838:	d003      	beq.n	8006842 <GPIO_WriteBit+0x1e>
  {
    GPIOx->BSRRL = GPIO_Pin;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	887a      	ldrh	r2, [r7, #2]
 800683e:	831a      	strh	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRRH = GPIO_Pin ;
  }
}
 8006840:	e002      	b.n	8006848 <GPIO_WriteBit+0x24>
    GPIOx->BSRRH = GPIO_Pin ;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	887a      	ldrh	r2, [r7, #2]
 8006846:	835a      	strh	r2, [r3, #26]
}
 8006848:	bf00      	nop
 800684a:	370c      	adds	r7, #12
 800684c:	46bd      	mov	sp, r7
 800684e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006852:	4770      	bx	lr

08006854 <GPIO_Write>:
  *                      x can be (A, B, C, D and H) to select the GPIO peripheral for STM32F401xx devices. 
  * @param  PortVal: specifies the value to be written to the port output data register.
  * @retval None
  */
void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal)
{
 8006854:	b480      	push	{r7}
 8006856:	b083      	sub	sp, #12
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]
 800685c:	460b      	mov	r3, r1
 800685e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR = PortVal;
 8006860:	887a      	ldrh	r2, [r7, #2]
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	615a      	str	r2, [r3, #20]
}
 8006866:	bf00      	nop
 8006868:	370c      	adds	r7, #12
 800686a:	46bd      	mov	sp, r7
 800686c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006870:	4770      	bx	lr

08006872 <GPIO_ToggleBits>:
  *                      x can be (A, B, C, D and H) to select the GPIO peripheral for STM32F401xx devices. 
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void GPIO_ToggleBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006872:	b480      	push	{r7}
 8006874:	b083      	sub	sp, #12
 8006876:	af00      	add	r7, sp, #0
 8006878:	6078      	str	r0, [r7, #4]
 800687a:	460b      	mov	r3, r1
 800687c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR ^= GPIO_Pin;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	695a      	ldr	r2, [r3, #20]
 8006882:	887b      	ldrh	r3, [r7, #2]
 8006884:	405a      	eors	r2, r3
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	615a      	str	r2, [r3, #20]
}
 800688a:	bf00      	nop
 800688c:	370c      	adds	r7, #12
 800688e:	46bd      	mov	sp, r7
 8006890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006894:	4770      	bx	lr

08006896 <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_LTDC: Connect LTDC pins to AF14 for STM32F429xx/439xx devices. 
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 8006896:	b480      	push	{r7}
 8006898:	b085      	sub	sp, #20
 800689a:	af00      	add	r7, sp, #0
 800689c:	6078      	str	r0, [r7, #4]
 800689e:	460b      	mov	r3, r1
 80068a0:	807b      	strh	r3, [r7, #2]
 80068a2:	4613      	mov	r3, r2
 80068a4:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 80068a6:	2300      	movs	r3, #0
 80068a8:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 80068aa:	2300      	movs	r3, #0
 80068ac:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 80068ae:	787a      	ldrb	r2, [r7, #1]
 80068b0:	887b      	ldrh	r3, [r7, #2]
 80068b2:	f003 0307 	and.w	r3, r3, #7
 80068b6:	009b      	lsls	r3, r3, #2
 80068b8:	fa02 f303 	lsl.w	r3, r2, r3
 80068bc:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 80068be:	887b      	ldrh	r3, [r7, #2]
 80068c0:	08db      	lsrs	r3, r3, #3
 80068c2:	b29b      	uxth	r3, r3
 80068c4:	461a      	mov	r2, r3
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	3208      	adds	r2, #8
 80068ca:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80068ce:	887b      	ldrh	r3, [r7, #2]
 80068d0:	f003 0307 	and.w	r3, r3, #7
 80068d4:	009b      	lsls	r3, r3, #2
 80068d6:	210f      	movs	r1, #15
 80068d8:	fa01 f303 	lsl.w	r3, r1, r3
 80068dc:	43db      	mvns	r3, r3
 80068de:	8879      	ldrh	r1, [r7, #2]
 80068e0:	08c9      	lsrs	r1, r1, #3
 80068e2:	b289      	uxth	r1, r1
 80068e4:	4608      	mov	r0, r1
 80068e6:	ea02 0103 	and.w	r1, r2, r3
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	f100 0208 	add.w	r2, r0, #8
 80068f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 80068f4:	887b      	ldrh	r3, [r7, #2]
 80068f6:	08db      	lsrs	r3, r3, #3
 80068f8:	b29b      	uxth	r3, r3
 80068fa:	461a      	mov	r2, r3
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	3208      	adds	r2, #8
 8006900:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006904:	68fa      	ldr	r2, [r7, #12]
 8006906:	4313      	orrs	r3, r2
 8006908:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 800690a:	887b      	ldrh	r3, [r7, #2]
 800690c:	08db      	lsrs	r3, r3, #3
 800690e:	b29b      	uxth	r3, r3
 8006910:	461a      	mov	r2, r3
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	3208      	adds	r2, #8
 8006916:	68b9      	ldr	r1, [r7, #8]
 8006918:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 800691c:	bf00      	nop
 800691e:	3714      	adds	r7, #20
 8006920:	46bd      	mov	sp, r7
 8006922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006926:	4770      	bx	lr

08006928 <I2C_DeInit>:
  * @brief  Deinitialize the I2Cx peripheral registers to their default reset values.
  * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
  * @retval None
  */
void I2C_DeInit(I2C_TypeDef* I2Cx)
{
 8006928:	b580      	push	{r7, lr}
 800692a:	b082      	sub	sp, #8
 800692c:	af00      	add	r7, sp, #0
 800692e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  if (I2Cx == I2C1)
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	4a17      	ldr	r2, [pc, #92]	; (8006990 <I2C_DeInit+0x68>)
 8006934:	4293      	cmp	r3, r2
 8006936:	d10a      	bne.n	800694e <I2C_DeInit+0x26>
  {
    /* Enable I2C1 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, ENABLE);
 8006938:	2101      	movs	r1, #1
 800693a:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800693e:	f002 f90b 	bl	8008b58 <RCC_APB1PeriphResetCmd>
    /* Release I2C1 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, DISABLE);    
 8006942:	2100      	movs	r1, #0
 8006944:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8006948:	f002 f906 	bl	8008b58 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, ENABLE);
      /* Release I2C3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, DISABLE);     
    }
  }
}
 800694c:	e01c      	b.n	8006988 <I2C_DeInit+0x60>
  else if (I2Cx == I2C2)
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	4a10      	ldr	r2, [pc, #64]	; (8006994 <I2C_DeInit+0x6c>)
 8006952:	4293      	cmp	r3, r2
 8006954:	d10a      	bne.n	800696c <I2C_DeInit+0x44>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, ENABLE);
 8006956:	2101      	movs	r1, #1
 8006958:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 800695c:	f002 f8fc 	bl	8008b58 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, DISABLE);      
 8006960:	2100      	movs	r1, #0
 8006962:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8006966:	f002 f8f7 	bl	8008b58 <RCC_APB1PeriphResetCmd>
}
 800696a:	e00d      	b.n	8006988 <I2C_DeInit+0x60>
    if (I2Cx == I2C3)
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	4a0a      	ldr	r2, [pc, #40]	; (8006998 <I2C_DeInit+0x70>)
 8006970:	4293      	cmp	r3, r2
 8006972:	d109      	bne.n	8006988 <I2C_DeInit+0x60>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, ENABLE);
 8006974:	2101      	movs	r1, #1
 8006976:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 800697a:	f002 f8ed 	bl	8008b58 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, DISABLE);     
 800697e:	2100      	movs	r1, #0
 8006980:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8006984:	f002 f8e8 	bl	8008b58 <RCC_APB1PeriphResetCmd>
}
 8006988:	bf00      	nop
 800698a:	3708      	adds	r7, #8
 800698c:	46bd      	mov	sp, r7
 800698e:	bd80      	pop	{r7, pc}
 8006990:	40005400 	.word	0x40005400
 8006994:	40005800 	.word	0x40005800
 8006998:	40005c00 	.word	0x40005c00

0800699c <I2C_Init>:
  * @param  I2C_InitStruct: pointer to a I2C_InitTypeDef structure that contains 
  *         the configuration information for the specified I2C peripheral.
  * @retval None
  */
void I2C_Init(I2C_TypeDef* I2Cx, I2C_InitTypeDef* I2C_InitStruct)
{
 800699c:	b580      	push	{r7, lr}
 800699e:	b08a      	sub	sp, #40	; 0x28
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	6078      	str	r0, [r7, #4]
 80069a4:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0, freqrange = 0;
 80069a6:	2300      	movs	r3, #0
 80069a8:	84fb      	strh	r3, [r7, #38]	; 0x26
 80069aa:	2300      	movs	r3, #0
 80069ac:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t result = 0x04;
 80069ae:	2304      	movs	r3, #4
 80069b0:	84bb      	strh	r3, [r7, #36]	; 0x24
  uint32_t pclk1 = 8000000;
 80069b2:	4b57      	ldr	r3, [pc, #348]	; (8006b10 <I2C_Init+0x174>)
 80069b4:	61fb      	str	r3, [r7, #28]
  assert_param(IS_I2C_ACK_STATE(I2C_InitStruct->I2C_Ack));
  assert_param(IS_I2C_ACKNOWLEDGE_ADDRESS(I2C_InitStruct->I2C_AcknowledgedAddress));

/*---------------------------- I2Cx CR2 Configuration ------------------------*/
  /* Get the I2Cx CR2 value */
  tmpreg = I2Cx->CR2;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	889b      	ldrh	r3, [r3, #4]
 80069ba:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Clear frequency FREQ[5:0] bits */
  tmpreg &= (uint16_t)~((uint16_t)I2C_CR2_FREQ);
 80069bc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80069be:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80069c2:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Get pclk1 frequency value */
  RCC_GetClocksFreq(&rcc_clocks);
 80069c4:	f107 030c 	add.w	r3, r7, #12
 80069c8:	4618      	mov	r0, r3
 80069ca:	f001 fe15 	bl	80085f8 <RCC_GetClocksFreq>
  pclk1 = rcc_clocks.PCLK1_Frequency;
 80069ce:	697b      	ldr	r3, [r7, #20]
 80069d0:	61fb      	str	r3, [r7, #28]
  /* Set frequency bits depending on pclk1 value */
  freqrange = (uint16_t)(pclk1 / 1000000);
 80069d2:	69fb      	ldr	r3, [r7, #28]
 80069d4:	4a4f      	ldr	r2, [pc, #316]	; (8006b14 <I2C_Init+0x178>)
 80069d6:	fba2 2303 	umull	r2, r3, r2, r3
 80069da:	0c9b      	lsrs	r3, r3, #18
 80069dc:	847b      	strh	r3, [r7, #34]	; 0x22
  tmpreg |= freqrange;
 80069de:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80069e0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80069e2:	4313      	orrs	r3, r2
 80069e4:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Write to I2Cx CR2 */
  I2Cx->CR2 = tmpreg;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80069ea:	809a      	strh	r2, [r3, #4]

/*---------------------------- I2Cx CCR Configuration ------------------------*/
  /* Disable the selected I2C peripheral to configure TRISE */
  I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	881b      	ldrh	r3, [r3, #0]
 80069f0:	b29b      	uxth	r3, r3
 80069f2:	f023 0301 	bic.w	r3, r3, #1
 80069f6:	b29a      	uxth	r2, r3
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	801a      	strh	r2, [r3, #0]
  /* Reset tmpreg value */
  /* Clear F/S, DUTY and CCR[11:0] bits */
  tmpreg = 0;
 80069fc:	2300      	movs	r3, #0
 80069fe:	84fb      	strh	r3, [r7, #38]	; 0x26

  /* Configure speed in standard mode */
  if (I2C_InitStruct->I2C_ClockSpeed <= 100000)
 8006a00:	683b      	ldr	r3, [r7, #0]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	4a44      	ldr	r2, [pc, #272]	; (8006b18 <I2C_Init+0x17c>)
 8006a06:	4293      	cmp	r3, r2
 8006a08:	d815      	bhi.n	8006a36 <I2C_Init+0x9a>
  {
    /* Standard mode speed calculate */
    result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed << 1));
 8006a0a:	683b      	ldr	r3, [r7, #0]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	005b      	lsls	r3, r3, #1
 8006a10:	69fa      	ldr	r2, [r7, #28]
 8006a12:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a16:	84bb      	strh	r3, [r7, #36]	; 0x24
    /* Test if CCR value is under 0x4*/
    if (result < 0x04)
 8006a18:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006a1a:	2b03      	cmp	r3, #3
 8006a1c:	d801      	bhi.n	8006a22 <I2C_Init+0x86>
    {
      /* Set minimum allowed value */
      result = 0x04;  
 8006a1e:	2304      	movs	r3, #4
 8006a20:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    /* Set speed value for standard mode */
    tmpreg |= result;	  
 8006a22:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006a24:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006a26:	4313      	orrs	r3, r2
 8006a28:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* Set Maximum Rise Time for standard mode */
    I2Cx->TRISE = freqrange + 1; 
 8006a2a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006a2c:	3301      	adds	r3, #1
 8006a2e:	b29a      	uxth	r2, r3
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	841a      	strh	r2, [r3, #32]
 8006a34:	e040      	b.n	8006ab8 <I2C_Init+0x11c>
  /* Configure speed in fast mode */
  /* To use the I2C at 400 KHz (in fast mode), the PCLK1 frequency (I2C peripheral
     input clock) must be a multiple of 10 MHz */
  else /*(I2C_InitStruct->I2C_ClockSpeed <= 400000)*/
  {
    if (I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_2)
 8006a36:	683b      	ldr	r3, [r7, #0]
 8006a38:	88db      	ldrh	r3, [r3, #6]
 8006a3a:	f64b 72ff 	movw	r2, #49151	; 0xbfff
 8006a3e:	4293      	cmp	r3, r2
 8006a40:	d109      	bne.n	8006a56 <I2C_Init+0xba>
    {
      /* Fast mode speed calculate: Tlow/Thigh = 2 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 3));
 8006a42:	683b      	ldr	r3, [r7, #0]
 8006a44:	681a      	ldr	r2, [r3, #0]
 8006a46:	4613      	mov	r3, r2
 8006a48:	005b      	lsls	r3, r3, #1
 8006a4a:	4413      	add	r3, r2
 8006a4c:	69fa      	ldr	r2, [r7, #28]
 8006a4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a52:	84bb      	strh	r3, [r7, #36]	; 0x24
 8006a54:	e00e      	b.n	8006a74 <I2C_Init+0xd8>
    }
    else /*I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_16_9*/
    {
      /* Fast mode speed calculate: Tlow/Thigh = 16/9 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 25));
 8006a56:	683b      	ldr	r3, [r7, #0]
 8006a58:	681a      	ldr	r2, [r3, #0]
 8006a5a:	4613      	mov	r3, r2
 8006a5c:	009b      	lsls	r3, r3, #2
 8006a5e:	4413      	add	r3, r2
 8006a60:	009a      	lsls	r2, r3, #2
 8006a62:	4413      	add	r3, r2
 8006a64:	69fa      	ldr	r2, [r7, #28]
 8006a66:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a6a:	84bb      	strh	r3, [r7, #36]	; 0x24
      /* Set DUTY bit */
      result |= I2C_DutyCycle_16_9;
 8006a6c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006a6e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006a72:	84bb      	strh	r3, [r7, #36]	; 0x24
    }

    /* Test if CCR value is under 0x1*/
    if ((result & I2C_CCR_CCR) == 0)
 8006a74:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006a76:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d103      	bne.n	8006a86 <I2C_Init+0xea>
    {
      /* Set minimum allowed value */
      result |= (uint16_t)0x0001;  
 8006a7e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006a80:	f043 0301 	orr.w	r3, r3, #1
 8006a84:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    /* Set speed value and set F/S bit for fast mode */
    tmpreg |= (uint16_t)(result | I2C_CCR_FS);
 8006a86:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006a88:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006a8a:	4313      	orrs	r3, r2
 8006a8c:	b29b      	uxth	r3, r3
 8006a8e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a92:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a96:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* Set Maximum Rise Time for fast mode */
    I2Cx->TRISE = (uint16_t)(((freqrange * (uint16_t)300) / (uint16_t)1000) + (uint16_t)1);  
 8006a98:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006a9a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006a9e:	fb02 f303 	mul.w	r3, r2, r3
 8006aa2:	4a1e      	ldr	r2, [pc, #120]	; (8006b1c <I2C_Init+0x180>)
 8006aa4:	fb82 1203 	smull	r1, r2, r2, r3
 8006aa8:	1192      	asrs	r2, r2, #6
 8006aaa:	17db      	asrs	r3, r3, #31
 8006aac:	1ad3      	subs	r3, r2, r3
 8006aae:	b29b      	uxth	r3, r3
 8006ab0:	3301      	adds	r3, #1
 8006ab2:	b29a      	uxth	r2, r3
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	841a      	strh	r2, [r3, #32]
  }

  /* Write to I2Cx CCR */
  I2Cx->CCR = tmpreg;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006abc:	839a      	strh	r2, [r3, #28]
  /* Enable the selected I2C peripheral */
  I2Cx->CR1 |= I2C_CR1_PE;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	881b      	ldrh	r3, [r3, #0]
 8006ac2:	b29b      	uxth	r3, r3
 8006ac4:	f043 0301 	orr.w	r3, r3, #1
 8006ac8:	b29a      	uxth	r2, r3
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	801a      	strh	r2, [r3, #0]

/*---------------------------- I2Cx CR1 Configuration ------------------------*/
  /* Get the I2Cx CR1 value */
  tmpreg = I2Cx->CR1;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	881b      	ldrh	r3, [r3, #0]
 8006ad2:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Clear ACK, SMBTYPE and  SMBUS bits */
  tmpreg &= CR1_CLEAR_MASK;
 8006ad4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006ad6:	f423 6381 	bic.w	r3, r3, #1032	; 0x408
 8006ada:	f023 0302 	bic.w	r3, r3, #2
 8006ade:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Configure I2Cx: mode and acknowledgement */
  /* Set SMBTYPE and SMBUS bits according to I2C_Mode value */
  /* Set ACK bit according to I2C_Ack value */
  tmpreg |= (uint16_t)((uint32_t)I2C_InitStruct->I2C_Mode | I2C_InitStruct->I2C_Ack);
 8006ae0:	683b      	ldr	r3, [r7, #0]
 8006ae2:	889a      	ldrh	r2, [r3, #4]
 8006ae4:	683b      	ldr	r3, [r7, #0]
 8006ae6:	895b      	ldrh	r3, [r3, #10]
 8006ae8:	4313      	orrs	r3, r2
 8006aea:	b29a      	uxth	r2, r3
 8006aec:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006aee:	4313      	orrs	r3, r2
 8006af0:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Write to I2Cx CR1 */
  I2Cx->CR1 = tmpreg;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006af6:	801a      	strh	r2, [r3, #0]

/*---------------------------- I2Cx OAR1 Configuration -----------------------*/
  /* Set I2Cx Own Address1 and acknowledged address */
  I2Cx->OAR1 = (I2C_InitStruct->I2C_AcknowledgedAddress | I2C_InitStruct->I2C_OwnAddress1);
 8006af8:	683b      	ldr	r3, [r7, #0]
 8006afa:	899a      	ldrh	r2, [r3, #12]
 8006afc:	683b      	ldr	r3, [r7, #0]
 8006afe:	891b      	ldrh	r3, [r3, #8]
 8006b00:	4313      	orrs	r3, r2
 8006b02:	b29a      	uxth	r2, r3
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	811a      	strh	r2, [r3, #8]
}
 8006b08:	bf00      	nop
 8006b0a:	3728      	adds	r7, #40	; 0x28
 8006b0c:	46bd      	mov	sp, r7
 8006b0e:	bd80      	pop	{r7, pc}
 8006b10:	007a1200 	.word	0x007a1200
 8006b14:	431bde83 	.word	0x431bde83
 8006b18:	000186a0 	.word	0x000186a0
 8006b1c:	10624dd3 	.word	0x10624dd3

08006b20 <I2C_StructInit>:
  * @brief  Fills each I2C_InitStruct member with its default value.
  * @param  I2C_InitStruct: pointer to an I2C_InitTypeDef structure which will be initialized.
  * @retval None
  */
void I2C_StructInit(I2C_InitTypeDef* I2C_InitStruct)
{
 8006b20:	b480      	push	{r7}
 8006b22:	b083      	sub	sp, #12
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	6078      	str	r0, [r7, #4]
/*---------------- Reset I2C init structure parameters values ----------------*/
  /* initialize the I2C_ClockSpeed member */
  I2C_InitStruct->I2C_ClockSpeed = 5000;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b2e:	601a      	str	r2, [r3, #0]
  /* Initialize the I2C_Mode member */
  I2C_InitStruct->I2C_Mode = I2C_Mode_I2C;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	2200      	movs	r2, #0
 8006b34:	809a      	strh	r2, [r3, #4]
  /* Initialize the I2C_DutyCycle member */
  I2C_InitStruct->I2C_DutyCycle = I2C_DutyCycle_2;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	f64b 72ff 	movw	r2, #49151	; 0xbfff
 8006b3c:	80da      	strh	r2, [r3, #6]
  /* Initialize the I2C_OwnAddress1 member */
  I2C_InitStruct->I2C_OwnAddress1 = 0;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	2200      	movs	r2, #0
 8006b42:	811a      	strh	r2, [r3, #8]
  /* Initialize the I2C_Ack member */
  I2C_InitStruct->I2C_Ack = I2C_Ack_Disable;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	2200      	movs	r2, #0
 8006b48:	815a      	strh	r2, [r3, #10]
  /* Initialize the I2C_AcknowledgedAddress member */
  I2C_InitStruct->I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006b50:	819a      	strh	r2, [r3, #12]
}
 8006b52:	bf00      	nop
 8006b54:	370c      	adds	r7, #12
 8006b56:	46bd      	mov	sp, r7
 8006b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5c:	4770      	bx	lr

08006b5e <I2C_Cmd>:
  * @param  NewState: new state of the I2Cx peripheral. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_Cmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8006b5e:	b480      	push	{r7}
 8006b60:	b083      	sub	sp, #12
 8006b62:	af00      	add	r7, sp, #0
 8006b64:	6078      	str	r0, [r7, #4]
 8006b66:	460b      	mov	r3, r1
 8006b68:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8006b6a:	78fb      	ldrb	r3, [r7, #3]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d008      	beq.n	8006b82 <I2C_Cmd+0x24>
  {
    /* Enable the selected I2C peripheral */
    I2Cx->CR1 |= I2C_CR1_PE;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	881b      	ldrh	r3, [r3, #0]
 8006b74:	b29b      	uxth	r3, r3
 8006b76:	f043 0301 	orr.w	r3, r3, #1
 8006b7a:	b29a      	uxth	r2, r3
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the selected I2C peripheral */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
  }
}
 8006b80:	e007      	b.n	8006b92 <I2C_Cmd+0x34>
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	881b      	ldrh	r3, [r3, #0]
 8006b86:	b29b      	uxth	r3, r3
 8006b88:	f023 0301 	bic.w	r3, r3, #1
 8006b8c:	b29a      	uxth	r2, r3
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	801a      	strh	r2, [r3, #0]
}
 8006b92:	bf00      	nop
 8006b94:	370c      	adds	r7, #12
 8006b96:	46bd      	mov	sp, r7
 8006b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9c:	4770      	bx	lr

08006b9e <I2C_AnalogFilterCmd>:
  * @note   This function should be called before initializing and enabling
            the I2C Peripheral.
  * @retval None
  */
void I2C_AnalogFilterCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8006b9e:	b480      	push	{r7}
 8006ba0:	b083      	sub	sp, #12
 8006ba2:	af00      	add	r7, sp, #0
 8006ba4:	6078      	str	r0, [r7, #4]
 8006ba6:	460b      	mov	r3, r1
 8006ba8:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8006baa:	78fb      	ldrb	r3, [r7, #3]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d008      	beq.n	8006bc2 <I2C_AnalogFilterCmd+0x24>
  {
    /* Enable the analog filter */
    I2Cx->FLTR &= (uint16_t)~((uint16_t)I2C_FLTR_ANOFF);    
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006bb4:	b29b      	uxth	r3, r3
 8006bb6:	f023 0310 	bic.w	r3, r3, #16
 8006bba:	b29a      	uxth	r2, r3
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	849a      	strh	r2, [r3, #36]	; 0x24
  else
  {
    /* Disable the analog filter */
    I2Cx->FLTR |= I2C_FLTR_ANOFF;
  }
}
 8006bc0:	e007      	b.n	8006bd2 <I2C_AnalogFilterCmd+0x34>
    I2Cx->FLTR |= I2C_FLTR_ANOFF;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006bc6:	b29b      	uxth	r3, r3
 8006bc8:	f043 0310 	orr.w	r3, r3, #16
 8006bcc:	b29a      	uxth	r2, r3
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	849a      	strh	r2, [r3, #36]	; 0x24
}
 8006bd2:	bf00      	nop
 8006bd4:	370c      	adds	r7, #12
 8006bd6:	46bd      	mov	sp, r7
 8006bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bdc:	4770      	bx	lr

08006bde <I2C_DigitalFilterConfig>:
  * @note   This function should be called before initializing and enabling
            the I2C Peripheral.
  * @retval None
  */
void I2C_DigitalFilterConfig(I2C_TypeDef* I2Cx, uint16_t I2C_DigitalFilter)
{
 8006bde:	b480      	push	{r7}
 8006be0:	b085      	sub	sp, #20
 8006be2:	af00      	add	r7, sp, #0
 8006be4:	6078      	str	r0, [r7, #4]
 8006be6:	460b      	mov	r3, r1
 8006be8:	807b      	strh	r3, [r7, #2]
  uint16_t tmpreg = 0;
 8006bea:	2300      	movs	r3, #0
 8006bec:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_DIGITAL_FILTER(I2C_DigitalFilter));
  
  /* Get the old register value */
  tmpreg = I2Cx->FLTR;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006bf2:	81fb      	strh	r3, [r7, #14]
  
  /* Reset I2Cx DNF bit [3:0] */
  tmpreg &= (uint16_t)~((uint16_t)I2C_FLTR_DNF);
 8006bf4:	89fb      	ldrh	r3, [r7, #14]
 8006bf6:	f023 030f 	bic.w	r3, r3, #15
 8006bfa:	81fb      	strh	r3, [r7, #14]
  
  /* Set I2Cx DNF coefficient */
  tmpreg |= (uint16_t)((uint16_t)I2C_DigitalFilter & I2C_FLTR_DNF);
 8006bfc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006c00:	f003 030f 	and.w	r3, r3, #15
 8006c04:	b21a      	sxth	r2, r3
 8006c06:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006c0a:	4313      	orrs	r3, r2
 8006c0c:	b21b      	sxth	r3, r3
 8006c0e:	81fb      	strh	r3, [r7, #14]
  
  /* Store the new register value */
  I2Cx->FLTR = tmpreg;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	89fa      	ldrh	r2, [r7, #14]
 8006c14:	849a      	strh	r2, [r3, #36]	; 0x24
}
 8006c16:	bf00      	nop
 8006c18:	3714      	adds	r7, #20
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c20:	4770      	bx	lr

08006c22 <I2C_GenerateSTART>:
  * @param  NewState: new state of the I2C START condition generation.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_GenerateSTART(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8006c22:	b480      	push	{r7}
 8006c24:	b083      	sub	sp, #12
 8006c26:	af00      	add	r7, sp, #0
 8006c28:	6078      	str	r0, [r7, #4]
 8006c2a:	460b      	mov	r3, r1
 8006c2c:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8006c2e:	78fb      	ldrb	r3, [r7, #3]
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d008      	beq.n	8006c46 <I2C_GenerateSTART+0x24>
  {
    /* Generate a START condition */
    I2Cx->CR1 |= I2C_CR1_START;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	881b      	ldrh	r3, [r3, #0]
 8006c38:	b29b      	uxth	r3, r3
 8006c3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006c3e:	b29a      	uxth	r2, r3
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the START condition generation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_START);
  }
}
 8006c44:	e007      	b.n	8006c56 <I2C_GenerateSTART+0x34>
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_START);
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	881b      	ldrh	r3, [r3, #0]
 8006c4a:	b29b      	uxth	r3, r3
 8006c4c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006c50:	b29a      	uxth	r2, r3
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	801a      	strh	r2, [r3, #0]
}
 8006c56:	bf00      	nop
 8006c58:	370c      	adds	r7, #12
 8006c5a:	46bd      	mov	sp, r7
 8006c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c60:	4770      	bx	lr

08006c62 <I2C_GenerateSTOP>:
  * @param  NewState: new state of the I2C STOP condition generation.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_GenerateSTOP(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8006c62:	b480      	push	{r7}
 8006c64:	b083      	sub	sp, #12
 8006c66:	af00      	add	r7, sp, #0
 8006c68:	6078      	str	r0, [r7, #4]
 8006c6a:	460b      	mov	r3, r1
 8006c6c:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8006c6e:	78fb      	ldrb	r3, [r7, #3]
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d008      	beq.n	8006c86 <I2C_GenerateSTOP+0x24>
  {
    /* Generate a STOP condition */
    I2Cx->CR1 |= I2C_CR1_STOP;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	881b      	ldrh	r3, [r3, #0]
 8006c78:	b29b      	uxth	r3, r3
 8006c7a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006c7e:	b29a      	uxth	r2, r3
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the STOP condition generation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_STOP);
  }
}
 8006c84:	e007      	b.n	8006c96 <I2C_GenerateSTOP+0x34>
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_STOP);
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	881b      	ldrh	r3, [r3, #0]
 8006c8a:	b29b      	uxth	r3, r3
 8006c8c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006c90:	b29a      	uxth	r2, r3
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	801a      	strh	r2, [r3, #0]
}
 8006c96:	bf00      	nop
 8006c98:	370c      	adds	r7, #12
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca0:	4770      	bx	lr

08006ca2 <I2C_Send7bitAddress>:
  *            @arg I2C_Direction_Transmitter: Transmitter mode
  *            @arg I2C_Direction_Receiver: Receiver mode
  * @retval None.
  */
void I2C_Send7bitAddress(I2C_TypeDef* I2Cx, uint8_t Address, uint8_t I2C_Direction)
{
 8006ca2:	b480      	push	{r7}
 8006ca4:	b083      	sub	sp, #12
 8006ca6:	af00      	add	r7, sp, #0
 8006ca8:	6078      	str	r0, [r7, #4]
 8006caa:	460b      	mov	r3, r1
 8006cac:	70fb      	strb	r3, [r7, #3]
 8006cae:	4613      	mov	r3, r2
 8006cb0:	70bb      	strb	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_DIRECTION(I2C_Direction));
  /* Test on the direction to set/reset the read/write bit */
  if (I2C_Direction != I2C_Direction_Transmitter)
 8006cb2:	78bb      	ldrb	r3, [r7, #2]
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d004      	beq.n	8006cc2 <I2C_Send7bitAddress+0x20>
  {
    /* Set the address bit0 for read */
    Address |= I2C_OAR1_ADD0;
 8006cb8:	78fb      	ldrb	r3, [r7, #3]
 8006cba:	f043 0301 	orr.w	r3, r3, #1
 8006cbe:	70fb      	strb	r3, [r7, #3]
 8006cc0:	e003      	b.n	8006cca <I2C_Send7bitAddress+0x28>
  }
  else
  {
    /* Reset the address bit0 for write */
    Address &= (uint8_t)~((uint8_t)I2C_OAR1_ADD0);
 8006cc2:	78fb      	ldrb	r3, [r7, #3]
 8006cc4:	f023 0301 	bic.w	r3, r3, #1
 8006cc8:	70fb      	strb	r3, [r7, #3]
  }
  /* Send the address */
  I2Cx->DR = Address;
 8006cca:	78fb      	ldrb	r3, [r7, #3]
 8006ccc:	b29a      	uxth	r2, r3
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	821a      	strh	r2, [r3, #16]
}
 8006cd2:	bf00      	nop
 8006cd4:	370c      	adds	r7, #12
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cdc:	4770      	bx	lr

08006cde <I2C_AcknowledgeConfig>:
  * @param  NewState: new state of the I2C Acknowledgement.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_AcknowledgeConfig(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8006cde:	b480      	push	{r7}
 8006ce0:	b083      	sub	sp, #12
 8006ce2:	af00      	add	r7, sp, #0
 8006ce4:	6078      	str	r0, [r7, #4]
 8006ce6:	460b      	mov	r3, r1
 8006ce8:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8006cea:	78fb      	ldrb	r3, [r7, #3]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d008      	beq.n	8006d02 <I2C_AcknowledgeConfig+0x24>
  {
    /* Enable the acknowledgement */
    I2Cx->CR1 |= I2C_CR1_ACK;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	881b      	ldrh	r3, [r3, #0]
 8006cf4:	b29b      	uxth	r3, r3
 8006cf6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006cfa:	b29a      	uxth	r2, r3
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the acknowledgement */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ACK);
  }
}
 8006d00:	e007      	b.n	8006d12 <I2C_AcknowledgeConfig+0x34>
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ACK);
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	881b      	ldrh	r3, [r3, #0]
 8006d06:	b29b      	uxth	r3, r3
 8006d08:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006d0c:	b29a      	uxth	r2, r3
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	801a      	strh	r2, [r3, #0]
}
 8006d12:	bf00      	nop
 8006d14:	370c      	adds	r7, #12
 8006d16:	46bd      	mov	sp, r7
 8006d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1c:	4770      	bx	lr

08006d1e <I2C_OwnAddress2Config>:
  * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
  * @param  Address: specifies the 7bit I2C own address2.
  * @retval None.
  */
void I2C_OwnAddress2Config(I2C_TypeDef* I2Cx, uint8_t Address)
{
 8006d1e:	b480      	push	{r7}
 8006d20:	b085      	sub	sp, #20
 8006d22:	af00      	add	r7, sp, #0
 8006d24:	6078      	str	r0, [r7, #4]
 8006d26:	460b      	mov	r3, r1
 8006d28:	70fb      	strb	r3, [r7, #3]
  uint16_t tmpreg = 0;
 8006d2a:	2300      	movs	r3, #0
 8006d2c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  /* Get the old register value */
  tmpreg = I2Cx->OAR2;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	899b      	ldrh	r3, [r3, #12]
 8006d32:	81fb      	strh	r3, [r7, #14]

  /* Reset I2Cx Own address2 bit [7:1] */
  tmpreg &= (uint16_t)~((uint16_t)I2C_OAR2_ADD2);
 8006d34:	89fb      	ldrh	r3, [r7, #14]
 8006d36:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 8006d3a:	81fb      	strh	r3, [r7, #14]

  /* Set I2Cx Own address2 */
  tmpreg |= (uint16_t)((uint16_t)Address & (uint16_t)0x00FE);
 8006d3c:	78fb      	ldrb	r3, [r7, #3]
 8006d3e:	b21b      	sxth	r3, r3
 8006d40:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8006d44:	b21a      	sxth	r2, r3
 8006d46:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006d4a:	4313      	orrs	r3, r2
 8006d4c:	b21b      	sxth	r3, r3
 8006d4e:	81fb      	strh	r3, [r7, #14]

  /* Store the new register value */
  I2Cx->OAR2 = tmpreg;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	89fa      	ldrh	r2, [r7, #14]
 8006d54:	819a      	strh	r2, [r3, #12]
}
 8006d56:	bf00      	nop
 8006d58:	3714      	adds	r7, #20
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d60:	4770      	bx	lr

08006d62 <I2C_DualAddressCmd>:
  * @param  NewState: new state of the I2C dual addressing mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_DualAddressCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8006d62:	b480      	push	{r7}
 8006d64:	b083      	sub	sp, #12
 8006d66:	af00      	add	r7, sp, #0
 8006d68:	6078      	str	r0, [r7, #4]
 8006d6a:	460b      	mov	r3, r1
 8006d6c:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8006d6e:	78fb      	ldrb	r3, [r7, #3]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d008      	beq.n	8006d86 <I2C_DualAddressCmd+0x24>
  {
    /* Enable dual addressing mode */
    I2Cx->OAR2 |= I2C_OAR2_ENDUAL;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	899b      	ldrh	r3, [r3, #12]
 8006d78:	b29b      	uxth	r3, r3
 8006d7a:	f043 0301 	orr.w	r3, r3, #1
 8006d7e:	b29a      	uxth	r2, r3
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable dual addressing mode */
    I2Cx->OAR2 &= (uint16_t)~((uint16_t)I2C_OAR2_ENDUAL);
  }
}
 8006d84:	e007      	b.n	8006d96 <I2C_DualAddressCmd+0x34>
    I2Cx->OAR2 &= (uint16_t)~((uint16_t)I2C_OAR2_ENDUAL);
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	899b      	ldrh	r3, [r3, #12]
 8006d8a:	b29b      	uxth	r3, r3
 8006d8c:	f023 0301 	bic.w	r3, r3, #1
 8006d90:	b29a      	uxth	r2, r3
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	819a      	strh	r2, [r3, #12]
}
 8006d96:	bf00      	nop
 8006d98:	370c      	adds	r7, #12
 8006d9a:	46bd      	mov	sp, r7
 8006d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da0:	4770      	bx	lr

08006da2 <I2C_GeneralCallCmd>:
  * @param  NewState: new state of the I2C General call.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_GeneralCallCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8006da2:	b480      	push	{r7}
 8006da4:	b083      	sub	sp, #12
 8006da6:	af00      	add	r7, sp, #0
 8006da8:	6078      	str	r0, [r7, #4]
 8006daa:	460b      	mov	r3, r1
 8006dac:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8006dae:	78fb      	ldrb	r3, [r7, #3]
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d008      	beq.n	8006dc6 <I2C_GeneralCallCmd+0x24>
  {
    /* Enable generall call */
    I2Cx->CR1 |= I2C_CR1_ENGC;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	881b      	ldrh	r3, [r3, #0]
 8006db8:	b29b      	uxth	r3, r3
 8006dba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006dbe:	b29a      	uxth	r2, r3
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable generall call */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ENGC);
  }
}
 8006dc4:	e007      	b.n	8006dd6 <I2C_GeneralCallCmd+0x34>
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ENGC);
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	881b      	ldrh	r3, [r3, #0]
 8006dca:	b29b      	uxth	r3, r3
 8006dcc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006dd0:	b29a      	uxth	r2, r3
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	801a      	strh	r2, [r3, #0]
}
 8006dd6:	bf00      	nop
 8006dd8:	370c      	adds	r7, #12
 8006dda:	46bd      	mov	sp, r7
 8006ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de0:	4770      	bx	lr

08006de2 <I2C_SoftwareResetCmd>:
  * @param  NewState: new state of the I2C software reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_SoftwareResetCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8006de2:	b480      	push	{r7}
 8006de4:	b083      	sub	sp, #12
 8006de6:	af00      	add	r7, sp, #0
 8006de8:	6078      	str	r0, [r7, #4]
 8006dea:	460b      	mov	r3, r1
 8006dec:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8006dee:	78fb      	ldrb	r3, [r7, #3]
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d00a      	beq.n	8006e0a <I2C_SoftwareResetCmd+0x28>
  {
    /* Peripheral under reset */
    I2Cx->CR1 |= I2C_CR1_SWRST;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	881b      	ldrh	r3, [r3, #0]
 8006df8:	b29b      	uxth	r3, r3
 8006dfa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006dfe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e02:	b29a      	uxth	r2, r3
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Peripheral not under reset */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_SWRST);
  }
}
 8006e08:	e007      	b.n	8006e1a <I2C_SoftwareResetCmd+0x38>
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_SWRST);
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	881b      	ldrh	r3, [r3, #0]
 8006e0e:	b29b      	uxth	r3, r3
 8006e10:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8006e14:	b29a      	uxth	r2, r3
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	801a      	strh	r2, [r3, #0]
}
 8006e1a:	bf00      	nop
 8006e1c:	370c      	adds	r7, #12
 8006e1e:	46bd      	mov	sp, r7
 8006e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e24:	4770      	bx	lr

08006e26 <I2C_StretchClockCmd>:
  * @param  NewState: new state of the I2Cx Clock stretching.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_StretchClockCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8006e26:	b480      	push	{r7}
 8006e28:	b083      	sub	sp, #12
 8006e2a:	af00      	add	r7, sp, #0
 8006e2c:	6078      	str	r0, [r7, #4]
 8006e2e:	460b      	mov	r3, r1
 8006e30:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState == DISABLE)
 8006e32:	78fb      	ldrb	r3, [r7, #3]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d108      	bne.n	8006e4a <I2C_StretchClockCmd+0x24>
  {
    /* Enable the selected I2C Clock stretching */
    I2Cx->CR1 |= I2C_CR1_NOSTRETCH;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	881b      	ldrh	r3, [r3, #0]
 8006e3c:	b29b      	uxth	r3, r3
 8006e3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e42:	b29a      	uxth	r2, r3
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the selected I2C Clock stretching */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_NOSTRETCH);
  }
}
 8006e48:	e007      	b.n	8006e5a <I2C_StretchClockCmd+0x34>
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_NOSTRETCH);
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	881b      	ldrh	r3, [r3, #0]
 8006e4e:	b29b      	uxth	r3, r3
 8006e50:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006e54:	b29a      	uxth	r2, r3
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	801a      	strh	r2, [r3, #0]
}
 8006e5a:	bf00      	nop
 8006e5c:	370c      	adds	r7, #12
 8006e5e:	46bd      	mov	sp, r7
 8006e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e64:	4770      	bx	lr

08006e66 <I2C_FastModeDutyCycleConfig>:
  *            @arg I2C_DutyCycle_2: I2C fast mode Tlow/Thigh = 2
  *            @arg I2C_DutyCycle_16_9: I2C fast mode Tlow/Thigh = 16/9
  * @retval None
  */
void I2C_FastModeDutyCycleConfig(I2C_TypeDef* I2Cx, uint16_t I2C_DutyCycle)
{
 8006e66:	b480      	push	{r7}
 8006e68:	b083      	sub	sp, #12
 8006e6a:	af00      	add	r7, sp, #0
 8006e6c:	6078      	str	r0, [r7, #4]
 8006e6e:	460b      	mov	r3, r1
 8006e70:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_DUTY_CYCLE(I2C_DutyCycle));
  if (I2C_DutyCycle != I2C_DutyCycle_16_9)
 8006e72:	887b      	ldrh	r3, [r7, #2]
 8006e74:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006e78:	d008      	beq.n	8006e8c <I2C_FastModeDutyCycleConfig+0x26>
  {
    /* I2C fast mode Tlow/Thigh=2 */
    I2Cx->CCR &= I2C_DutyCycle_2;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	8b9b      	ldrh	r3, [r3, #28]
 8006e7e:	b29b      	uxth	r3, r3
 8006e80:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006e84:	b29a      	uxth	r2, r3
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	839a      	strh	r2, [r3, #28]
  else
  {
    /* I2C fast mode Tlow/Thigh=16/9 */
    I2Cx->CCR |= I2C_DutyCycle_16_9;
  }
}
 8006e8a:	e007      	b.n	8006e9c <I2C_FastModeDutyCycleConfig+0x36>
    I2Cx->CCR |= I2C_DutyCycle_16_9;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	8b9b      	ldrh	r3, [r3, #28]
 8006e90:	b29b      	uxth	r3, r3
 8006e92:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006e96:	b29a      	uxth	r2, r3
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	839a      	strh	r2, [r3, #28]
}
 8006e9c:	bf00      	nop
 8006e9e:	370c      	adds	r7, #12
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea6:	4770      	bx	lr

08006ea8 <I2C_NACKPositionConfig>:
  *          is intended to used in SMBUS mode. 
  *            
  * @retval None
  */
void I2C_NACKPositionConfig(I2C_TypeDef* I2Cx, uint16_t I2C_NACKPosition)
{
 8006ea8:	b480      	push	{r7}
 8006eaa:	b083      	sub	sp, #12
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	6078      	str	r0, [r7, #4]
 8006eb0:	460b      	mov	r3, r1
 8006eb2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_NACK_POSITION(I2C_NACKPosition));
  
  /* Check the input parameter */
  if (I2C_NACKPosition == I2C_NACKPosition_Next)
 8006eb4:	887b      	ldrh	r3, [r7, #2]
 8006eb6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006eba:	d108      	bne.n	8006ece <I2C_NACKPositionConfig+0x26>
  {
    /* Next byte in shift register is the last received byte */
    I2Cx->CR1 |= I2C_NACKPosition_Next;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	881b      	ldrh	r3, [r3, #0]
 8006ec0:	b29b      	uxth	r3, r3
 8006ec2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006ec6:	b29a      	uxth	r2, r3
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Current byte in shift register is the last received byte */
    I2Cx->CR1 &= I2C_NACKPosition_Current;
  }
}
 8006ecc:	e007      	b.n	8006ede <I2C_NACKPositionConfig+0x36>
    I2Cx->CR1 &= I2C_NACKPosition_Current;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	881b      	ldrh	r3, [r3, #0]
 8006ed2:	b29b      	uxth	r3, r3
 8006ed4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006ed8:	b29a      	uxth	r2, r3
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	801a      	strh	r2, [r3, #0]
}
 8006ede:	bf00      	nop
 8006ee0:	370c      	adds	r7, #12
 8006ee2:	46bd      	mov	sp, r7
 8006ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee8:	4770      	bx	lr

08006eea <I2C_SMBusAlertConfig>:
  *            @arg I2C_SMBusAlert_Low: SMBAlert pin driven low
  *            @arg I2C_SMBusAlert_High: SMBAlert pin driven high
  * @retval None
  */
void I2C_SMBusAlertConfig(I2C_TypeDef* I2Cx, uint16_t I2C_SMBusAlert)
{
 8006eea:	b480      	push	{r7}
 8006eec:	b083      	sub	sp, #12
 8006eee:	af00      	add	r7, sp, #0
 8006ef0:	6078      	str	r0, [r7, #4]
 8006ef2:	460b      	mov	r3, r1
 8006ef4:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_SMBUS_ALERT(I2C_SMBusAlert));
  if (I2C_SMBusAlert == I2C_SMBusAlert_Low)
 8006ef6:	887b      	ldrh	r3, [r7, #2]
 8006ef8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006efc:	d108      	bne.n	8006f10 <I2C_SMBusAlertConfig+0x26>
  {
    /* Drive the SMBusAlert pin Low */
    I2Cx->CR1 |= I2C_SMBusAlert_Low;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	881b      	ldrh	r3, [r3, #0]
 8006f02:	b29b      	uxth	r3, r3
 8006f04:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006f08:	b29a      	uxth	r2, r3
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Drive the SMBusAlert pin High  */
    I2Cx->CR1 &= I2C_SMBusAlert_High;
  }
}
 8006f0e:	e007      	b.n	8006f20 <I2C_SMBusAlertConfig+0x36>
    I2Cx->CR1 &= I2C_SMBusAlert_High;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	881b      	ldrh	r3, [r3, #0]
 8006f14:	b29b      	uxth	r3, r3
 8006f16:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006f1a:	b29a      	uxth	r2, r3
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	801a      	strh	r2, [r3, #0]
}
 8006f20:	bf00      	nop
 8006f22:	370c      	adds	r7, #12
 8006f24:	46bd      	mov	sp, r7
 8006f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2a:	4770      	bx	lr

08006f2c <I2C_ARPCmd>:
  * @param  NewState: new state of the I2Cx ARP. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_ARPCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8006f2c:	b480      	push	{r7}
 8006f2e:	b083      	sub	sp, #12
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	6078      	str	r0, [r7, #4]
 8006f34:	460b      	mov	r3, r1
 8006f36:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8006f38:	78fb      	ldrb	r3, [r7, #3]
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d008      	beq.n	8006f50 <I2C_ARPCmd+0x24>
  {
    /* Enable the selected I2C ARP */
    I2Cx->CR1 |= I2C_CR1_ENARP;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	881b      	ldrh	r3, [r3, #0]
 8006f42:	b29b      	uxth	r3, r3
 8006f44:	f043 0310 	orr.w	r3, r3, #16
 8006f48:	b29a      	uxth	r2, r3
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the selected I2C ARP */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ENARP);
  }
}
 8006f4e:	e007      	b.n	8006f60 <I2C_ARPCmd+0x34>
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ENARP);
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	881b      	ldrh	r3, [r3, #0]
 8006f54:	b29b      	uxth	r3, r3
 8006f56:	f023 0310 	bic.w	r3, r3, #16
 8006f5a:	b29a      	uxth	r2, r3
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	801a      	strh	r2, [r3, #0]
}
 8006f60:	bf00      	nop
 8006f62:	370c      	adds	r7, #12
 8006f64:	46bd      	mov	sp, r7
 8006f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6a:	4770      	bx	lr

08006f6c <I2C_SendData>:
  * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
  * @param  Data: Byte to be transmitted..
  * @retval None
  */
void I2C_SendData(I2C_TypeDef* I2Cx, uint8_t Data)
{
 8006f6c:	b480      	push	{r7}
 8006f6e:	b083      	sub	sp, #12
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	6078      	str	r0, [r7, #4]
 8006f74:	460b      	mov	r3, r1
 8006f76:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Write in the DR register the data to be sent */
  I2Cx->DR = Data;
 8006f78:	78fb      	ldrb	r3, [r7, #3]
 8006f7a:	b29a      	uxth	r2, r3
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	821a      	strh	r2, [r3, #16]
}
 8006f80:	bf00      	nop
 8006f82:	370c      	adds	r7, #12
 8006f84:	46bd      	mov	sp, r7
 8006f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8a:	4770      	bx	lr

08006f8c <I2C_ReceiveData>:
  * @brief  Returns the most recent received data by the I2Cx peripheral.
  * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
  * @retval The value of the received data.
  */
uint8_t I2C_ReceiveData(I2C_TypeDef* I2Cx)
{
 8006f8c:	b480      	push	{r7}
 8006f8e:	b083      	sub	sp, #12
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Return the data in the DR register */
  return (uint8_t)I2Cx->DR;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	8a1b      	ldrh	r3, [r3, #16]
 8006f98:	b29b      	uxth	r3, r3
 8006f9a:	b2db      	uxtb	r3, r3
}
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	370c      	adds	r7, #12
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa6:	4770      	bx	lr

08006fa8 <I2C_TransmitPEC>:
  * @param  NewState: new state of the I2C PEC transmission.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_TransmitPEC(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8006fa8:	b480      	push	{r7}
 8006faa:	b083      	sub	sp, #12
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	6078      	str	r0, [r7, #4]
 8006fb0:	460b      	mov	r3, r1
 8006fb2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8006fb4:	78fb      	ldrb	r3, [r7, #3]
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d008      	beq.n	8006fcc <I2C_TransmitPEC+0x24>
  {
    /* Enable the selected I2C PEC transmission */
    I2Cx->CR1 |= I2C_CR1_PEC;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	881b      	ldrh	r3, [r3, #0]
 8006fbe:	b29b      	uxth	r3, r3
 8006fc0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006fc4:	b29a      	uxth	r2, r3
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the selected I2C PEC transmission */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PEC);
  }
}
 8006fca:	e007      	b.n	8006fdc <I2C_TransmitPEC+0x34>
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PEC);
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	881b      	ldrh	r3, [r3, #0]
 8006fd0:	b29b      	uxth	r3, r3
 8006fd2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006fd6:	b29a      	uxth	r2, r3
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	801a      	strh	r2, [r3, #0]
}
 8006fdc:	bf00      	nop
 8006fde:	370c      	adds	r7, #12
 8006fe0:	46bd      	mov	sp, r7
 8006fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe6:	4770      	bx	lr

08006fe8 <I2C_PECPositionConfig>:
  *          is intended to used in I2C mode.
  *                
  * @retval None
  */
void I2C_PECPositionConfig(I2C_TypeDef* I2Cx, uint16_t I2C_PECPosition)
{
 8006fe8:	b480      	push	{r7}
 8006fea:	b083      	sub	sp, #12
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	6078      	str	r0, [r7, #4]
 8006ff0:	460b      	mov	r3, r1
 8006ff2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_PEC_POSITION(I2C_PECPosition));
  if (I2C_PECPosition == I2C_PECPosition_Next)
 8006ff4:	887b      	ldrh	r3, [r7, #2]
 8006ff6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006ffa:	d108      	bne.n	800700e <I2C_PECPositionConfig+0x26>
  {
    /* Next byte in shift register is PEC */
    I2Cx->CR1 |= I2C_PECPosition_Next;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	881b      	ldrh	r3, [r3, #0]
 8007000:	b29b      	uxth	r3, r3
 8007002:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007006:	b29a      	uxth	r2, r3
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Current byte in shift register is PEC */
    I2Cx->CR1 &= I2C_PECPosition_Current;
  }
}
 800700c:	e007      	b.n	800701e <I2C_PECPositionConfig+0x36>
    I2Cx->CR1 &= I2C_PECPosition_Current;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	881b      	ldrh	r3, [r3, #0]
 8007012:	b29b      	uxth	r3, r3
 8007014:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007018:	b29a      	uxth	r2, r3
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	801a      	strh	r2, [r3, #0]
}
 800701e:	bf00      	nop
 8007020:	370c      	adds	r7, #12
 8007022:	46bd      	mov	sp, r7
 8007024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007028:	4770      	bx	lr

0800702a <I2C_CalculatePEC>:
  * @param  NewState: new state of the I2Cx PEC value calculation.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_CalculatePEC(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 800702a:	b480      	push	{r7}
 800702c:	b083      	sub	sp, #12
 800702e:	af00      	add	r7, sp, #0
 8007030:	6078      	str	r0, [r7, #4]
 8007032:	460b      	mov	r3, r1
 8007034:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8007036:	78fb      	ldrb	r3, [r7, #3]
 8007038:	2b00      	cmp	r3, #0
 800703a:	d008      	beq.n	800704e <I2C_CalculatePEC+0x24>
  {
    /* Enable the selected I2C PEC calculation */
    I2Cx->CR1 |= I2C_CR1_ENPEC;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	881b      	ldrh	r3, [r3, #0]
 8007040:	b29b      	uxth	r3, r3
 8007042:	f043 0320 	orr.w	r3, r3, #32
 8007046:	b29a      	uxth	r2, r3
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the selected I2C PEC calculation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ENPEC);
  }
}
 800704c:	e007      	b.n	800705e <I2C_CalculatePEC+0x34>
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ENPEC);
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	881b      	ldrh	r3, [r3, #0]
 8007052:	b29b      	uxth	r3, r3
 8007054:	f023 0320 	bic.w	r3, r3, #32
 8007058:	b29a      	uxth	r2, r3
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	801a      	strh	r2, [r3, #0]
}
 800705e:	bf00      	nop
 8007060:	370c      	adds	r7, #12
 8007062:	46bd      	mov	sp, r7
 8007064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007068:	4770      	bx	lr

0800706a <I2C_GetPEC>:
  * @brief  Returns the PEC value for the specified I2C.
  * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
  * @retval The PEC value.
  */
uint8_t I2C_GetPEC(I2C_TypeDef* I2Cx)
{
 800706a:	b480      	push	{r7}
 800706c:	b083      	sub	sp, #12
 800706e:	af00      	add	r7, sp, #0
 8007070:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Return the selected I2C PEC value */
  return ((I2Cx->SR2) >> 8);
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	8b1b      	ldrh	r3, [r3, #24]
 8007076:	b29b      	uxth	r3, r3
 8007078:	0a1b      	lsrs	r3, r3, #8
 800707a:	b29b      	uxth	r3, r3
 800707c:	b2db      	uxtb	r3, r3
}
 800707e:	4618      	mov	r0, r3
 8007080:	370c      	adds	r7, #12
 8007082:	46bd      	mov	sp, r7
 8007084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007088:	4770      	bx	lr

0800708a <I2C_DMACmd>:
  * @param  NewState: new state of the I2C DMA transfer.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_DMACmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 800708a:	b480      	push	{r7}
 800708c:	b083      	sub	sp, #12
 800708e:	af00      	add	r7, sp, #0
 8007090:	6078      	str	r0, [r7, #4]
 8007092:	460b      	mov	r3, r1
 8007094:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8007096:	78fb      	ldrb	r3, [r7, #3]
 8007098:	2b00      	cmp	r3, #0
 800709a:	d008      	beq.n	80070ae <I2C_DMACmd+0x24>
  {
    /* Enable the selected I2C DMA requests */
    I2Cx->CR2 |= I2C_CR2_DMAEN;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	889b      	ldrh	r3, [r3, #4]
 80070a0:	b29b      	uxth	r3, r3
 80070a2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80070a6:	b29a      	uxth	r2, r3
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	809a      	strh	r2, [r3, #4]
  else
  {
    /* Disable the selected I2C DMA requests */
    I2Cx->CR2 &= (uint16_t)~((uint16_t)I2C_CR2_DMAEN);
  }
}
 80070ac:	e007      	b.n	80070be <I2C_DMACmd+0x34>
    I2Cx->CR2 &= (uint16_t)~((uint16_t)I2C_CR2_DMAEN);
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	889b      	ldrh	r3, [r3, #4]
 80070b2:	b29b      	uxth	r3, r3
 80070b4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80070b8:	b29a      	uxth	r2, r3
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	809a      	strh	r2, [r3, #4]
}
 80070be:	bf00      	nop
 80070c0:	370c      	adds	r7, #12
 80070c2:	46bd      	mov	sp, r7
 80070c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c8:	4770      	bx	lr

080070ca <I2C_DMALastTransferCmd>:
  * @param  NewState: new state of the I2C DMA last transfer.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_DMALastTransferCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 80070ca:	b480      	push	{r7}
 80070cc:	b083      	sub	sp, #12
 80070ce:	af00      	add	r7, sp, #0
 80070d0:	6078      	str	r0, [r7, #4]
 80070d2:	460b      	mov	r3, r1
 80070d4:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80070d6:	78fb      	ldrb	r3, [r7, #3]
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d008      	beq.n	80070ee <I2C_DMALastTransferCmd+0x24>
  {
    /* Next DMA transfer is the last transfer */
    I2Cx->CR2 |= I2C_CR2_LAST;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	889b      	ldrh	r3, [r3, #4]
 80070e0:	b29b      	uxth	r3, r3
 80070e2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80070e6:	b29a      	uxth	r2, r3
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	809a      	strh	r2, [r3, #4]
  else
  {
    /* Next DMA transfer is not the last transfer */
    I2Cx->CR2 &= (uint16_t)~((uint16_t)I2C_CR2_LAST);
  }
}
 80070ec:	e007      	b.n	80070fe <I2C_DMALastTransferCmd+0x34>
    I2Cx->CR2 &= (uint16_t)~((uint16_t)I2C_CR2_LAST);
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	889b      	ldrh	r3, [r3, #4]
 80070f2:	b29b      	uxth	r3, r3
 80070f4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80070f8:	b29a      	uxth	r2, r3
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	809a      	strh	r2, [r3, #4]
}
 80070fe:	bf00      	nop
 8007100:	370c      	adds	r7, #12
 8007102:	46bd      	mov	sp, r7
 8007104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007108:	4770      	bx	lr

0800710a <I2C_ReadRegister>:
  *            @arg I2C_Register_CCR:   CCR register.
  *            @arg I2C_Register_TRISE: TRISE register.
  * @retval The value of the read register.
  */
uint16_t I2C_ReadRegister(I2C_TypeDef* I2Cx, uint8_t I2C_Register)
{
 800710a:	b480      	push	{r7}
 800710c:	b085      	sub	sp, #20
 800710e:	af00      	add	r7, sp, #0
 8007110:	6078      	str	r0, [r7, #4]
 8007112:	460b      	mov	r3, r1
 8007114:	70fb      	strb	r3, [r7, #3]
  __IO uint32_t tmp = 0;
 8007116:	2300      	movs	r3, #0
 8007118:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_REGISTER(I2C_Register));

  tmp = (uint32_t) I2Cx;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	60fb      	str	r3, [r7, #12]
  tmp += I2C_Register;
 800711e:	78fa      	ldrb	r2, [r7, #3]
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	4413      	add	r3, r2
 8007124:	60fb      	str	r3, [r7, #12]

  /* Return the selected register value */
  return (*(__IO uint16_t *) tmp);
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	881b      	ldrh	r3, [r3, #0]
 800712a:	b29b      	uxth	r3, r3
}
 800712c:	4618      	mov	r0, r3
 800712e:	3714      	adds	r7, #20
 8007130:	46bd      	mov	sp, r7
 8007132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007136:	4770      	bx	lr

08007138 <I2C_ITConfig>:
  * @param  NewState: new state of the specified I2C interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_ITConfig(I2C_TypeDef* I2Cx, uint16_t I2C_IT, FunctionalState NewState)
{
 8007138:	b480      	push	{r7}
 800713a:	b083      	sub	sp, #12
 800713c:	af00      	add	r7, sp, #0
 800713e:	6078      	str	r0, [r7, #4]
 8007140:	460b      	mov	r3, r1
 8007142:	807b      	strh	r3, [r7, #2]
 8007144:	4613      	mov	r3, r2
 8007146:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_I2C_CONFIG_IT(I2C_IT));
  
  if (NewState != DISABLE)
 8007148:	787b      	ldrb	r3, [r7, #1]
 800714a:	2b00      	cmp	r3, #0
 800714c:	d008      	beq.n	8007160 <I2C_ITConfig+0x28>
  {
    /* Enable the selected I2C interrupts */
    I2Cx->CR2 |= I2C_IT;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	889b      	ldrh	r3, [r3, #4]
 8007152:	b29a      	uxth	r2, r3
 8007154:	887b      	ldrh	r3, [r7, #2]
 8007156:	4313      	orrs	r3, r2
 8007158:	b29a      	uxth	r2, r3
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	809a      	strh	r2, [r3, #4]
  else
  {
    /* Disable the selected I2C interrupts */
    I2Cx->CR2 &= (uint16_t)~I2C_IT;
  }
}
 800715e:	e009      	b.n	8007174 <I2C_ITConfig+0x3c>
    I2Cx->CR2 &= (uint16_t)~I2C_IT;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	889b      	ldrh	r3, [r3, #4]
 8007164:	b29a      	uxth	r2, r3
 8007166:	887b      	ldrh	r3, [r7, #2]
 8007168:	43db      	mvns	r3, r3
 800716a:	b29b      	uxth	r3, r3
 800716c:	4013      	ands	r3, r2
 800716e:	b29a      	uxth	r2, r3
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	809a      	strh	r2, [r3, #4]
}
 8007174:	bf00      	nop
 8007176:	370c      	adds	r7, #12
 8007178:	46bd      	mov	sp, r7
 800717a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717e:	4770      	bx	lr

08007180 <I2C_CheckEvent>:
  * @retval An ErrorStatus enumeration value:
  *           - SUCCESS: Last event is equal to the I2C_EVENT
  *           - ERROR: Last event is different from the I2C_EVENT
  */
ErrorStatus I2C_CheckEvent(I2C_TypeDef* I2Cx, uint32_t I2C_EVENT)
{
 8007180:	b480      	push	{r7}
 8007182:	b087      	sub	sp, #28
 8007184:	af00      	add	r7, sp, #0
 8007186:	6078      	str	r0, [r7, #4]
 8007188:	6039      	str	r1, [r7, #0]
  uint32_t lastevent = 0;
 800718a:	2300      	movs	r3, #0
 800718c:	613b      	str	r3, [r7, #16]
  uint32_t flag1 = 0, flag2 = 0;
 800718e:	2300      	movs	r3, #0
 8007190:	60fb      	str	r3, [r7, #12]
 8007192:	2300      	movs	r3, #0
 8007194:	60bb      	str	r3, [r7, #8]
  ErrorStatus status = ERROR;
 8007196:	2300      	movs	r3, #0
 8007198:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_EVENT(I2C_EVENT));

  /* Read the I2Cx status register */
  flag1 = I2Cx->SR1;
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	8a9b      	ldrh	r3, [r3, #20]
 800719e:	b29b      	uxth	r3, r3
 80071a0:	60fb      	str	r3, [r7, #12]
  flag2 = I2Cx->SR2;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	8b1b      	ldrh	r3, [r3, #24]
 80071a6:	b29b      	uxth	r3, r3
 80071a8:	60bb      	str	r3, [r7, #8]
  flag2 = flag2 << 16;
 80071aa:	68bb      	ldr	r3, [r7, #8]
 80071ac:	041b      	lsls	r3, r3, #16
 80071ae:	60bb      	str	r3, [r7, #8]

  /* Get the last event value from I2C status register */
  lastevent = (flag1 | flag2) & FLAG_MASK;
 80071b0:	68fa      	ldr	r2, [r7, #12]
 80071b2:	68bb      	ldr	r3, [r7, #8]
 80071b4:	4313      	orrs	r3, r2
 80071b6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80071ba:	613b      	str	r3, [r7, #16]

  /* Check whether the last event contains the I2C_EVENT */
  if ((lastevent & I2C_EVENT) == I2C_EVENT)
 80071bc:	693a      	ldr	r2, [r7, #16]
 80071be:	683b      	ldr	r3, [r7, #0]
 80071c0:	4013      	ands	r3, r2
 80071c2:	683a      	ldr	r2, [r7, #0]
 80071c4:	429a      	cmp	r2, r3
 80071c6:	d102      	bne.n	80071ce <I2C_CheckEvent+0x4e>
  {
    /* SUCCESS: last event is equal to I2C_EVENT */
    status = SUCCESS;
 80071c8:	2301      	movs	r3, #1
 80071ca:	75fb      	strb	r3, [r7, #23]
 80071cc:	e001      	b.n	80071d2 <I2C_CheckEvent+0x52>
  }
  else
  {
    /* ERROR: last event is different from I2C_EVENT */
    status = ERROR;
 80071ce:	2300      	movs	r3, #0
 80071d0:	75fb      	strb	r3, [r7, #23]
  }
  /* Return status */
  return status;
 80071d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80071d4:	4618      	mov	r0, r3
 80071d6:	371c      	adds	r7, #28
 80071d8:	46bd      	mov	sp, r7
 80071da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071de:	4770      	bx	lr

080071e0 <I2C_GetLastEvent>:
  *         in stm32f4xx_i2c.h file.
  *    
  * @retval The last event
  */
uint32_t I2C_GetLastEvent(I2C_TypeDef* I2Cx)
{
 80071e0:	b480      	push	{r7}
 80071e2:	b087      	sub	sp, #28
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	6078      	str	r0, [r7, #4]
  uint32_t lastevent = 0;
 80071e8:	2300      	movs	r3, #0
 80071ea:	617b      	str	r3, [r7, #20]
  uint32_t flag1 = 0, flag2 = 0;
 80071ec:	2300      	movs	r3, #0
 80071ee:	613b      	str	r3, [r7, #16]
 80071f0:	2300      	movs	r3, #0
 80071f2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  /* Read the I2Cx status register */
  flag1 = I2Cx->SR1;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	8a9b      	ldrh	r3, [r3, #20]
 80071f8:	b29b      	uxth	r3, r3
 80071fa:	613b      	str	r3, [r7, #16]
  flag2 = I2Cx->SR2;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	8b1b      	ldrh	r3, [r3, #24]
 8007200:	b29b      	uxth	r3, r3
 8007202:	60fb      	str	r3, [r7, #12]
  flag2 = flag2 << 16;
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	041b      	lsls	r3, r3, #16
 8007208:	60fb      	str	r3, [r7, #12]

  /* Get the last event value from I2C status register */
  lastevent = (flag1 | flag2) & FLAG_MASK;
 800720a:	693a      	ldr	r2, [r7, #16]
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	4313      	orrs	r3, r2
 8007210:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007214:	617b      	str	r3, [r7, #20]

  /* Return status */
  return lastevent;
 8007216:	697b      	ldr	r3, [r7, #20]
}
 8007218:	4618      	mov	r0, r3
 800721a:	371c      	adds	r7, #28
 800721c:	46bd      	mov	sp, r7
 800721e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007222:	4770      	bx	lr

08007224 <I2C_GetFlagStatus>:
  *                                Address matched flag (Slave mode)"ENDAD"
  *            @arg I2C_FLAG_SB: Start bit flag (Master mode)
  * @retval The new state of I2C_FLAG (SET or RESET).
  */
FlagStatus I2C_GetFlagStatus(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG)
{
 8007224:	b480      	push	{r7}
 8007226:	b087      	sub	sp, #28
 8007228:	af00      	add	r7, sp, #0
 800722a:	6078      	str	r0, [r7, #4]
 800722c:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 800722e:	2300      	movs	r3, #0
 8007230:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t i2creg = 0, i2cxbase = 0;
 8007232:	2300      	movs	r3, #0
 8007234:	613b      	str	r3, [r7, #16]
 8007236:	2300      	movs	r3, #0
 8007238:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_FLAG(I2C_FLAG));

  /* Get the I2Cx peripheral base address */
  i2cxbase = (uint32_t)I2Cx;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	60fb      	str	r3, [r7, #12]
  
  /* Read flag register index */
  i2creg = I2C_FLAG >> 28;
 800723e:	683b      	ldr	r3, [r7, #0]
 8007240:	0f1b      	lsrs	r3, r3, #28
 8007242:	613b      	str	r3, [r7, #16]
  
  /* Get bit[23:0] of the flag */
  I2C_FLAG &= FLAG_MASK;
 8007244:	683b      	ldr	r3, [r7, #0]
 8007246:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800724a:	603b      	str	r3, [r7, #0]
  
  if(i2creg != 0)
 800724c:	693b      	ldr	r3, [r7, #16]
 800724e:	2b00      	cmp	r3, #0
 8007250:	d003      	beq.n	800725a <I2C_GetFlagStatus+0x36>
  {
    /* Get the I2Cx SR1 register address */
    i2cxbase += 0x14;
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	3314      	adds	r3, #20
 8007256:	60fb      	str	r3, [r7, #12]
 8007258:	e005      	b.n	8007266 <I2C_GetFlagStatus+0x42>
  }
  else
  {
    /* Flag in I2Cx SR2 Register */
    I2C_FLAG = (uint32_t)(I2C_FLAG >> 16);
 800725a:	683b      	ldr	r3, [r7, #0]
 800725c:	0c1b      	lsrs	r3, r3, #16
 800725e:	603b      	str	r3, [r7, #0]
    /* Get the I2Cx SR2 register address */
    i2cxbase += 0x18;
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	3318      	adds	r3, #24
 8007264:	60fb      	str	r3, [r7, #12]
  }
  
  if(((*(__IO uint32_t *)i2cxbase) & I2C_FLAG) != (uint32_t)RESET)
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	681a      	ldr	r2, [r3, #0]
 800726a:	683b      	ldr	r3, [r7, #0]
 800726c:	4013      	ands	r3, r2
 800726e:	2b00      	cmp	r3, #0
 8007270:	d002      	beq.n	8007278 <I2C_GetFlagStatus+0x54>
  {
    /* I2C_FLAG is set */
    bitstatus = SET;
 8007272:	2301      	movs	r3, #1
 8007274:	75fb      	strb	r3, [r7, #23]
 8007276:	e001      	b.n	800727c <I2C_GetFlagStatus+0x58>
  }
  else
  {
    /* I2C_FLAG is reset */
    bitstatus = RESET;
 8007278:	2300      	movs	r3, #0
 800727a:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return the I2C_FLAG status */
  return  bitstatus;
 800727c:	7dfb      	ldrb	r3, [r7, #23]
}
 800727e:	4618      	mov	r0, r3
 8007280:	371c      	adds	r7, #28
 8007282:	46bd      	mov	sp, r7
 8007284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007288:	4770      	bx	lr

0800728a <I2C_ClearFlag>:
  *          register (I2C_SendData()).
  *  
  * @retval None
  */
void I2C_ClearFlag(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG)
{
 800728a:	b480      	push	{r7}
 800728c:	b085      	sub	sp, #20
 800728e:	af00      	add	r7, sp, #0
 8007290:	6078      	str	r0, [r7, #4]
 8007292:	6039      	str	r1, [r7, #0]
  uint32_t flagpos = 0;
 8007294:	2300      	movs	r3, #0
 8007296:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_CLEAR_FLAG(I2C_FLAG));
  /* Get the I2C flag position */
  flagpos = I2C_FLAG & FLAG_MASK;
 8007298:	683b      	ldr	r3, [r7, #0]
 800729a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800729e:	60fb      	str	r3, [r7, #12]
  /* Clear the selected I2C flag */
  I2Cx->SR1 = (uint16_t)~flagpos;
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	b29b      	uxth	r3, r3
 80072a4:	43db      	mvns	r3, r3
 80072a6:	b29a      	uxth	r2, r3
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	829a      	strh	r2, [r3, #20]
}
 80072ac:	bf00      	nop
 80072ae:	3714      	adds	r7, #20
 80072b0:	46bd      	mov	sp, r7
 80072b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b6:	4770      	bx	lr

080072b8 <I2C_GetITStatus>:
  *                              Address matched flag (Slave mode)"ENDAD"
  *            @arg I2C_IT_SB: Start bit flag (Master mode)
  * @retval The new state of I2C_IT (SET or RESET).
  */
ITStatus I2C_GetITStatus(I2C_TypeDef* I2Cx, uint32_t I2C_IT)
{
 80072b8:	b480      	push	{r7}
 80072ba:	b085      	sub	sp, #20
 80072bc:	af00      	add	r7, sp, #0
 80072be:	6078      	str	r0, [r7, #4]
 80072c0:	6039      	str	r1, [r7, #0]
  ITStatus bitstatus = RESET;
 80072c2:	2300      	movs	r3, #0
 80072c4:	73fb      	strb	r3, [r7, #15]
  uint32_t enablestatus = 0;
 80072c6:	2300      	movs	r3, #0
 80072c8:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_IT(I2C_IT));

  /* Check if the interrupt source is enabled or not */
  enablestatus = (uint32_t)(((I2C_IT & ITEN_MASK) >> 16) & (I2Cx->CR2)) ;
 80072ca:	683b      	ldr	r3, [r7, #0]
 80072cc:	0c1b      	lsrs	r3, r3, #16
 80072ce:	687a      	ldr	r2, [r7, #4]
 80072d0:	8892      	ldrh	r2, [r2, #4]
 80072d2:	b292      	uxth	r2, r2
 80072d4:	4013      	ands	r3, r2
 80072d6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80072da:	60bb      	str	r3, [r7, #8]
  
  /* Get bit[23:0] of the flag */
  I2C_IT &= FLAG_MASK;
 80072dc:	683b      	ldr	r3, [r7, #0]
 80072de:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80072e2:	603b      	str	r3, [r7, #0]

  /* Check the status of the specified I2C flag */
  if (((I2Cx->SR1 & I2C_IT) != (uint32_t)RESET) && enablestatus)
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	8a9b      	ldrh	r3, [r3, #20]
 80072e8:	b29b      	uxth	r3, r3
 80072ea:	461a      	mov	r2, r3
 80072ec:	683b      	ldr	r3, [r7, #0]
 80072ee:	4013      	ands	r3, r2
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d005      	beq.n	8007300 <I2C_GetITStatus+0x48>
 80072f4:	68bb      	ldr	r3, [r7, #8]
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d002      	beq.n	8007300 <I2C_GetITStatus+0x48>
  {
    /* I2C_IT is set */
    bitstatus = SET;
 80072fa:	2301      	movs	r3, #1
 80072fc:	73fb      	strb	r3, [r7, #15]
 80072fe:	e001      	b.n	8007304 <I2C_GetITStatus+0x4c>
  }
  else
  {
    /* I2C_IT is reset */
    bitstatus = RESET;
 8007300:	2300      	movs	r3, #0
 8007302:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the I2C_IT status */
  return  bitstatus;
 8007304:	7bfb      	ldrb	r3, [r7, #15]
}
 8007306:	4618      	mov	r0, r3
 8007308:	3714      	adds	r7, #20
 800730a:	46bd      	mov	sp, r7
 800730c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007310:	4770      	bx	lr

08007312 <I2C_ClearITPendingBit>:
  *          I2C_SR1 register (I2C_GetITStatus()) followed by a write operation to 
  *          I2C_DR register (I2C_SendData()).
  * @retval None
  */
void I2C_ClearITPendingBit(I2C_TypeDef* I2Cx, uint32_t I2C_IT)
{
 8007312:	b480      	push	{r7}
 8007314:	b085      	sub	sp, #20
 8007316:	af00      	add	r7, sp, #0
 8007318:	6078      	str	r0, [r7, #4]
 800731a:	6039      	str	r1, [r7, #0]
  uint32_t flagpos = 0;
 800731c:	2300      	movs	r3, #0
 800731e:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_CLEAR_IT(I2C_IT));

  /* Get the I2C flag position */
  flagpos = I2C_IT & FLAG_MASK;
 8007320:	683b      	ldr	r3, [r7, #0]
 8007322:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007326:	60fb      	str	r3, [r7, #12]

  /* Clear the selected I2C flag */
  I2Cx->SR1 = (uint16_t)~flagpos;
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	b29b      	uxth	r3, r3
 800732c:	43db      	mvns	r3, r3
 800732e:	b29a      	uxth	r2, r3
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	829a      	strh	r2, [r3, #20]
}
 8007334:	bf00      	nop
 8007336:	3714      	adds	r7, #20
 8007338:	46bd      	mov	sp, r7
 800733a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800733e:	4770      	bx	lr

08007340 <IWDG_WriteAccessCmd>:
  *            @arg IWDG_WriteAccess_Enable: Enable write access to IWDG_PR and IWDG_RLR registers
  *            @arg IWDG_WriteAccess_Disable: Disable write access to IWDG_PR and IWDG_RLR registers
  * @retval None
  */
void IWDG_WriteAccessCmd(uint16_t IWDG_WriteAccess)
{
 8007340:	b480      	push	{r7}
 8007342:	b083      	sub	sp, #12
 8007344:	af00      	add	r7, sp, #0
 8007346:	4603      	mov	r3, r0
 8007348:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_IWDG_WRITE_ACCESS(IWDG_WriteAccess));
  IWDG->KR = IWDG_WriteAccess;
 800734a:	4a04      	ldr	r2, [pc, #16]	; (800735c <IWDG_WriteAccessCmd+0x1c>)
 800734c:	88fb      	ldrh	r3, [r7, #6]
 800734e:	6013      	str	r3, [r2, #0]
}
 8007350:	bf00      	nop
 8007352:	370c      	adds	r7, #12
 8007354:	46bd      	mov	sp, r7
 8007356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735a:	4770      	bx	lr
 800735c:	40003000 	.word	0x40003000

08007360 <IWDG_SetPrescaler>:
  *            @arg IWDG_Prescaler_128: IWDG prescaler set to 128
  *            @arg IWDG_Prescaler_256: IWDG prescaler set to 256
  * @retval None
  */
void IWDG_SetPrescaler(uint8_t IWDG_Prescaler)
{
 8007360:	b480      	push	{r7}
 8007362:	b083      	sub	sp, #12
 8007364:	af00      	add	r7, sp, #0
 8007366:	4603      	mov	r3, r0
 8007368:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_IWDG_PRESCALER(IWDG_Prescaler));
  IWDG->PR = IWDG_Prescaler;
 800736a:	4a04      	ldr	r2, [pc, #16]	; (800737c <IWDG_SetPrescaler+0x1c>)
 800736c:	79fb      	ldrb	r3, [r7, #7]
 800736e:	6053      	str	r3, [r2, #4]
}
 8007370:	bf00      	nop
 8007372:	370c      	adds	r7, #12
 8007374:	46bd      	mov	sp, r7
 8007376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737a:	4770      	bx	lr
 800737c:	40003000 	.word	0x40003000

08007380 <IWDG_SetReload>:
  * @param  Reload: specifies the IWDG Reload value.
  *          This parameter must be a number between 0 and 0x0FFF.
  * @retval None
  */
void IWDG_SetReload(uint16_t Reload)
{
 8007380:	b480      	push	{r7}
 8007382:	b083      	sub	sp, #12
 8007384:	af00      	add	r7, sp, #0
 8007386:	4603      	mov	r3, r0
 8007388:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_IWDG_RELOAD(Reload));
  IWDG->RLR = Reload;
 800738a:	4a04      	ldr	r2, [pc, #16]	; (800739c <IWDG_SetReload+0x1c>)
 800738c:	88fb      	ldrh	r3, [r7, #6]
 800738e:	6093      	str	r3, [r2, #8]
}
 8007390:	bf00      	nop
 8007392:	370c      	adds	r7, #12
 8007394:	46bd      	mov	sp, r7
 8007396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739a:	4770      	bx	lr
 800739c:	40003000 	.word	0x40003000

080073a0 <IWDG_ReloadCounter>:
  *         (write access to IWDG_PR and IWDG_RLR registers disabled).
  * @param  None
  * @retval None
  */
void IWDG_ReloadCounter(void)
{
 80073a0:	b480      	push	{r7}
 80073a2:	af00      	add	r7, sp, #0
  IWDG->KR = KR_KEY_RELOAD;
 80073a4:	4b04      	ldr	r3, [pc, #16]	; (80073b8 <IWDG_ReloadCounter+0x18>)
 80073a6:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 80073aa:	601a      	str	r2, [r3, #0]
}
 80073ac:	bf00      	nop
 80073ae:	46bd      	mov	sp, r7
 80073b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b4:	4770      	bx	lr
 80073b6:	bf00      	nop
 80073b8:	40003000 	.word	0x40003000

080073bc <IWDG_Enable>:
  * @brief  Enables IWDG (write access to IWDG_PR and IWDG_RLR registers disabled).
  * @param  None
  * @retval None
  */
void IWDG_Enable(void)
{
 80073bc:	b480      	push	{r7}
 80073be:	af00      	add	r7, sp, #0
  IWDG->KR = KR_KEY_ENABLE;
 80073c0:	4b04      	ldr	r3, [pc, #16]	; (80073d4 <IWDG_Enable+0x18>)
 80073c2:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 80073c6:	601a      	str	r2, [r3, #0]
}
 80073c8:	bf00      	nop
 80073ca:	46bd      	mov	sp, r7
 80073cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d0:	4770      	bx	lr
 80073d2:	bf00      	nop
 80073d4:	40003000 	.word	0x40003000

080073d8 <IWDG_GetFlagStatus>:
  *            @arg IWDG_FLAG_PVU: Prescaler Value Update on going
  *            @arg IWDG_FLAG_RVU: Reload Value Update on going
  * @retval The new state of IWDG_FLAG (SET or RESET).
  */
FlagStatus IWDG_GetFlagStatus(uint16_t IWDG_FLAG)
{
 80073d8:	b480      	push	{r7}
 80073da:	b085      	sub	sp, #20
 80073dc:	af00      	add	r7, sp, #0
 80073de:	4603      	mov	r3, r0
 80073e0:	80fb      	strh	r3, [r7, #6]
  FlagStatus bitstatus = RESET;
 80073e2:	2300      	movs	r3, #0
 80073e4:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_IWDG_FLAG(IWDG_FLAG));
  if ((IWDG->SR & IWDG_FLAG) != (uint32_t)RESET)
 80073e6:	4b09      	ldr	r3, [pc, #36]	; (800740c <IWDG_GetFlagStatus+0x34>)
 80073e8:	68da      	ldr	r2, [r3, #12]
 80073ea:	88fb      	ldrh	r3, [r7, #6]
 80073ec:	4013      	ands	r3, r2
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d002      	beq.n	80073f8 <IWDG_GetFlagStatus+0x20>
  {
    bitstatus = SET;
 80073f2:	2301      	movs	r3, #1
 80073f4:	73fb      	strb	r3, [r7, #15]
 80073f6:	e001      	b.n	80073fc <IWDG_GetFlagStatus+0x24>
  }
  else
  {
    bitstatus = RESET;
 80073f8:	2300      	movs	r3, #0
 80073fa:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the flag status */
  return bitstatus;
 80073fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80073fe:	4618      	mov	r0, r3
 8007400:	3714      	adds	r7, #20
 8007402:	46bd      	mov	sp, r7
 8007404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007408:	4770      	bx	lr
 800740a:	bf00      	nop
 800740c:	40003000 	.word	0x40003000

08007410 <LTDC_DeInit>:
  * @param  None
  * @retval None
  */

void LTDC_DeInit(void)
{
 8007410:	b580      	push	{r7, lr}
 8007412:	af00      	add	r7, sp, #0
  /* Enable LTDC reset state */
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_LTDC, ENABLE);
 8007414:	2101      	movs	r1, #1
 8007416:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 800741a:	f001 fbbd 	bl	8008b98 <RCC_APB2PeriphResetCmd>
  /* Release LTDC from reset state */
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_LTDC, DISABLE);
 800741e:	2100      	movs	r1, #0
 8007420:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8007424:	f001 fbb8 	bl	8008b98 <RCC_APB2PeriphResetCmd>
}
 8007428:	bf00      	nop
 800742a:	bd80      	pop	{r7, pc}

0800742c <LTDC_Init>:
  *         the configuration information for the specified LTDC peripheral.
  * @retval None
  */

void LTDC_Init(LTDC_InitTypeDef* LTDC_InitStruct)
{
 800742c:	b480      	push	{r7}
 800742e:	b089      	sub	sp, #36	; 0x24
 8007430:	af00      	add	r7, sp, #0
 8007432:	6078      	str	r0, [r7, #4]
  uint32_t horizontalsync = 0;
 8007434:	2300      	movs	r3, #0
 8007436:	61fb      	str	r3, [r7, #28]
  uint32_t accumulatedHBP = 0;
 8007438:	2300      	movs	r3, #0
 800743a:	61bb      	str	r3, [r7, #24]
  uint32_t accumulatedactiveW = 0;
 800743c:	2300      	movs	r3, #0
 800743e:	617b      	str	r3, [r7, #20]
  uint32_t totalwidth = 0;
 8007440:	2300      	movs	r3, #0
 8007442:	613b      	str	r3, [r7, #16]
  uint32_t backgreen = 0;
 8007444:	2300      	movs	r3, #0
 8007446:	60fb      	str	r3, [r7, #12]
  uint32_t backred = 0;
 8007448:	2300      	movs	r3, #0
 800744a:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LTDC_BackBlueValue(LTDC_InitStruct->LTDC_BackgroundBlueValue));
  assert_param(IS_LTDC_BackGreenValue(LTDC_InitStruct->LTDC_BackgroundGreenValue));
  assert_param(IS_LTDC_BackRedValue(LTDC_InitStruct->LTDC_BackgroundRedValue));

  /* Sets Synchronization size */
  LTDC->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800744c:	4b40      	ldr	r3, [pc, #256]	; (8007550 <LTDC_Init+0x124>)
 800744e:	689a      	ldr	r2, [r3, #8]
 8007450:	493f      	ldr	r1, [pc, #252]	; (8007550 <LTDC_Init+0x124>)
 8007452:	4b40      	ldr	r3, [pc, #256]	; (8007554 <LTDC_Init+0x128>)
 8007454:	4013      	ands	r3, r2
 8007456:	608b      	str	r3, [r1, #8]
  horizontalsync = (LTDC_InitStruct->LTDC_HorizontalSync << 16);
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	691b      	ldr	r3, [r3, #16]
 800745c:	041b      	lsls	r3, r3, #16
 800745e:	61fb      	str	r3, [r7, #28]
  LTDC->SSCR |= (horizontalsync | LTDC_InitStruct->LTDC_VerticalSync);
 8007460:	4b3b      	ldr	r3, [pc, #236]	; (8007550 <LTDC_Init+0x124>)
 8007462:	689a      	ldr	r2, [r3, #8]
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	6959      	ldr	r1, [r3, #20]
 8007468:	69fb      	ldr	r3, [r7, #28]
 800746a:	430b      	orrs	r3, r1
 800746c:	4938      	ldr	r1, [pc, #224]	; (8007550 <LTDC_Init+0x124>)
 800746e:	4313      	orrs	r3, r2
 8007470:	608b      	str	r3, [r1, #8]

  /* Sets Accumulated Back porch */
  LTDC->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8007472:	4b37      	ldr	r3, [pc, #220]	; (8007550 <LTDC_Init+0x124>)
 8007474:	68da      	ldr	r2, [r3, #12]
 8007476:	4936      	ldr	r1, [pc, #216]	; (8007550 <LTDC_Init+0x124>)
 8007478:	4b36      	ldr	r3, [pc, #216]	; (8007554 <LTDC_Init+0x128>)
 800747a:	4013      	ands	r3, r2
 800747c:	60cb      	str	r3, [r1, #12]
  accumulatedHBP = (LTDC_InitStruct->LTDC_AccumulatedHBP << 16);
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	699b      	ldr	r3, [r3, #24]
 8007482:	041b      	lsls	r3, r3, #16
 8007484:	61bb      	str	r3, [r7, #24]
  LTDC->BPCR |= (accumulatedHBP | LTDC_InitStruct->LTDC_AccumulatedVBP);
 8007486:	4b32      	ldr	r3, [pc, #200]	; (8007550 <LTDC_Init+0x124>)
 8007488:	68da      	ldr	r2, [r3, #12]
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	69d9      	ldr	r1, [r3, #28]
 800748e:	69bb      	ldr	r3, [r7, #24]
 8007490:	430b      	orrs	r3, r1
 8007492:	492f      	ldr	r1, [pc, #188]	; (8007550 <LTDC_Init+0x124>)
 8007494:	4313      	orrs	r3, r2
 8007496:	60cb      	str	r3, [r1, #12]

  /* Sets Accumulated Active Width */
  LTDC->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8007498:	4b2d      	ldr	r3, [pc, #180]	; (8007550 <LTDC_Init+0x124>)
 800749a:	691a      	ldr	r2, [r3, #16]
 800749c:	492c      	ldr	r1, [pc, #176]	; (8007550 <LTDC_Init+0x124>)
 800749e:	4b2d      	ldr	r3, [pc, #180]	; (8007554 <LTDC_Init+0x128>)
 80074a0:	4013      	ands	r3, r2
 80074a2:	610b      	str	r3, [r1, #16]
  accumulatedactiveW = (LTDC_InitStruct->LTDC_AccumulatedActiveW << 16);
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	6a1b      	ldr	r3, [r3, #32]
 80074a8:	041b      	lsls	r3, r3, #16
 80074aa:	617b      	str	r3, [r7, #20]
  LTDC->AWCR |= (accumulatedactiveW | LTDC_InitStruct->LTDC_AccumulatedActiveH);
 80074ac:	4b28      	ldr	r3, [pc, #160]	; (8007550 <LTDC_Init+0x124>)
 80074ae:	691a      	ldr	r2, [r3, #16]
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80074b4:	697b      	ldr	r3, [r7, #20]
 80074b6:	430b      	orrs	r3, r1
 80074b8:	4925      	ldr	r1, [pc, #148]	; (8007550 <LTDC_Init+0x124>)
 80074ba:	4313      	orrs	r3, r2
 80074bc:	610b      	str	r3, [r1, #16]

  /* Sets Total Width */
  LTDC->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80074be:	4b24      	ldr	r3, [pc, #144]	; (8007550 <LTDC_Init+0x124>)
 80074c0:	695a      	ldr	r2, [r3, #20]
 80074c2:	4923      	ldr	r1, [pc, #140]	; (8007550 <LTDC_Init+0x124>)
 80074c4:	4b23      	ldr	r3, [pc, #140]	; (8007554 <LTDC_Init+0x128>)
 80074c6:	4013      	ands	r3, r2
 80074c8:	614b      	str	r3, [r1, #20]
  totalwidth = (LTDC_InitStruct->LTDC_TotalWidth << 16);
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074ce:	041b      	lsls	r3, r3, #16
 80074d0:	613b      	str	r3, [r7, #16]
  LTDC->TWCR |= (totalwidth | LTDC_InitStruct->LTDC_TotalHeigh);
 80074d2:	4b1f      	ldr	r3, [pc, #124]	; (8007550 <LTDC_Init+0x124>)
 80074d4:	695a      	ldr	r2, [r3, #20]
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80074da:	693b      	ldr	r3, [r7, #16]
 80074dc:	430b      	orrs	r3, r1
 80074de:	491c      	ldr	r1, [pc, #112]	; (8007550 <LTDC_Init+0x124>)
 80074e0:	4313      	orrs	r3, r2
 80074e2:	614b      	str	r3, [r1, #20]

  LTDC->GCR &= (uint32_t)GCR_MASK;
 80074e4:	4b1a      	ldr	r3, [pc, #104]	; (8007550 <LTDC_Init+0x124>)
 80074e6:	699a      	ldr	r2, [r3, #24]
 80074e8:	4919      	ldr	r1, [pc, #100]	; (8007550 <LTDC_Init+0x124>)
 80074ea:	4b1b      	ldr	r3, [pc, #108]	; (8007558 <LTDC_Init+0x12c>)
 80074ec:	4013      	ands	r3, r2
 80074ee:	618b      	str	r3, [r1, #24]
  LTDC->GCR |=  (uint32_t)(LTDC_InitStruct->LTDC_HSPolarity | LTDC_InitStruct->LTDC_VSPolarity | \
 80074f0:	4b17      	ldr	r3, [pc, #92]	; (8007550 <LTDC_Init+0x124>)
 80074f2:	699a      	ldr	r2, [r3, #24]
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	6819      	ldr	r1, [r3, #0]
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	685b      	ldr	r3, [r3, #4]
 80074fc:	4319      	orrs	r1, r3
                           LTDC_InitStruct->LTDC_DEPolarity | LTDC_InitStruct->LTDC_PCPolarity);
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	689b      	ldr	r3, [r3, #8]
  LTDC->GCR |=  (uint32_t)(LTDC_InitStruct->LTDC_HSPolarity | LTDC_InitStruct->LTDC_VSPolarity | \
 8007502:	4319      	orrs	r1, r3
                           LTDC_InitStruct->LTDC_DEPolarity | LTDC_InitStruct->LTDC_PCPolarity);
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	68db      	ldr	r3, [r3, #12]
 8007508:	430b      	orrs	r3, r1
  LTDC->GCR |=  (uint32_t)(LTDC_InitStruct->LTDC_HSPolarity | LTDC_InitStruct->LTDC_VSPolarity | \
 800750a:	4911      	ldr	r1, [pc, #68]	; (8007550 <LTDC_Init+0x124>)
 800750c:	4313      	orrs	r3, r2
 800750e:	618b      	str	r3, [r1, #24]

  /* sets the background color value */
  backgreen = (LTDC_InitStruct->LTDC_BackgroundGreenValue << 8);
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007514:	021b      	lsls	r3, r3, #8
 8007516:	60fb      	str	r3, [r7, #12]
  backred = (LTDC_InitStruct->LTDC_BackgroundRedValue << 16);
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800751c:	041b      	lsls	r3, r3, #16
 800751e:	60bb      	str	r3, [r7, #8]

  LTDC->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8007520:	4b0b      	ldr	r3, [pc, #44]	; (8007550 <LTDC_Init+0x124>)
 8007522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007524:	4a0a      	ldr	r2, [pc, #40]	; (8007550 <LTDC_Init+0x124>)
 8007526:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800752a:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC->BCCR |= (backred | backgreen | LTDC_InitStruct->LTDC_BackgroundBlueValue);
 800752c:	4b08      	ldr	r3, [pc, #32]	; (8007550 <LTDC_Init+0x124>)
 800752e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007530:	68b9      	ldr	r1, [r7, #8]
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	4319      	orrs	r1, r3
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800753a:	430b      	orrs	r3, r1
 800753c:	4904      	ldr	r1, [pc, #16]	; (8007550 <LTDC_Init+0x124>)
 800753e:	4313      	orrs	r3, r2
 8007540:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8007542:	bf00      	nop
 8007544:	3724      	adds	r7, #36	; 0x24
 8007546:	46bd      	mov	sp, r7
 8007548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754c:	4770      	bx	lr
 800754e:	bf00      	nop
 8007550:	40016800 	.word	0x40016800
 8007554:	f000f800 	.word	0xf000f800
 8007558:	0ffe888f 	.word	0x0ffe888f

0800755c <LTDC_StructInit>:
  *         be initialized.
  * @retval None
  */

void LTDC_StructInit(LTDC_InitTypeDef* LTDC_InitStruct)
{
 800755c:	b480      	push	{r7}
 800755e:	b083      	sub	sp, #12
 8007560:	af00      	add	r7, sp, #0
 8007562:	6078      	str	r0, [r7, #4]
  /*--------------- Reset LTDC init structure parameters values ----------------*/
  LTDC_InitStruct->LTDC_HSPolarity = LTDC_HSPolarity_AL;      /*!< Initialize the LTDC_HSPolarity member */ 
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	2200      	movs	r2, #0
 8007568:	601a      	str	r2, [r3, #0]
  LTDC_InitStruct->LTDC_VSPolarity = LTDC_VSPolarity_AL;      /*!< Initialize the LTDC_VSPolarity member */
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	2200      	movs	r2, #0
 800756e:	605a      	str	r2, [r3, #4]
  LTDC_InitStruct->LTDC_DEPolarity = LTDC_DEPolarity_AL;      /*!< Initialize the LTDC_DEPolarity member */
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	2200      	movs	r2, #0
 8007574:	609a      	str	r2, [r3, #8]
  LTDC_InitStruct->LTDC_PCPolarity = LTDC_PCPolarity_IPC;     /*!< Initialize the LTDC_PCPolarity member */
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	2200      	movs	r2, #0
 800757a:	60da      	str	r2, [r3, #12]
  LTDC_InitStruct->LTDC_HorizontalSync = 0x00;                /*!< Initialize the LTDC_HorizontalSync member */
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	2200      	movs	r2, #0
 8007580:	611a      	str	r2, [r3, #16]
  LTDC_InitStruct->LTDC_VerticalSync = 0x00;                  /*!< Initialize the LTDC_VerticalSync member */
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	2200      	movs	r2, #0
 8007586:	615a      	str	r2, [r3, #20]
  LTDC_InitStruct->LTDC_AccumulatedHBP = 0x00;                /*!< Initialize the LTDC_AccumulatedHBP member */
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	2200      	movs	r2, #0
 800758c:	619a      	str	r2, [r3, #24]
  LTDC_InitStruct->LTDC_AccumulatedVBP = 0x00;                /*!< Initialize the LTDC_AccumulatedVBP member */
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	2200      	movs	r2, #0
 8007592:	61da      	str	r2, [r3, #28]
  LTDC_InitStruct->LTDC_AccumulatedActiveW = 0x00;            /*!< Initialize the LTDC_AccumulatedActiveW member */
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	2200      	movs	r2, #0
 8007598:	621a      	str	r2, [r3, #32]
  LTDC_InitStruct->LTDC_AccumulatedActiveH = 0x00;            /*!< Initialize the LTDC_AccumulatedActiveH member */
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	2200      	movs	r2, #0
 800759e:	625a      	str	r2, [r3, #36]	; 0x24
  LTDC_InitStruct->LTDC_TotalWidth = 0x00;                    /*!< Initialize the LTDC_TotalWidth member */
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	2200      	movs	r2, #0
 80075a4:	629a      	str	r2, [r3, #40]	; 0x28
  LTDC_InitStruct->LTDC_TotalHeigh = 0x00;                    /*!< Initialize the LTDC_TotalHeigh member */
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	2200      	movs	r2, #0
 80075aa:	62da      	str	r2, [r3, #44]	; 0x2c
  LTDC_InitStruct->LTDC_BackgroundRedValue = 0x00;            /*!< Initialize the LTDC_BackgroundRedValue member */
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	2200      	movs	r2, #0
 80075b0:	631a      	str	r2, [r3, #48]	; 0x30
  LTDC_InitStruct->LTDC_BackgroundGreenValue = 0x00;          /*!< Initialize the LTDC_BackgroundGreenValue member */
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	2200      	movs	r2, #0
 80075b6:	635a      	str	r2, [r3, #52]	; 0x34
  LTDC_InitStruct->LTDC_BackgroundBlueValue = 0x00;           /*!< Initialize the LTDC_BackgroundBlueValue member */
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	2200      	movs	r2, #0
 80075bc:	639a      	str	r2, [r3, #56]	; 0x38
}
 80075be:	bf00      	nop
 80075c0:	370c      	adds	r7, #12
 80075c2:	46bd      	mov	sp, r7
 80075c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c8:	4770      	bx	lr

080075ca <LTDC_Cmd>:
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */

void LTDC_Cmd(FunctionalState NewState)
{
 80075ca:	b480      	push	{r7}
 80075cc:	b083      	sub	sp, #12
 80075ce:	af00      	add	r7, sp, #0
 80075d0:	4603      	mov	r3, r0
 80075d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80075d4:	79fb      	ldrb	r3, [r7, #7]
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d006      	beq.n	80075e8 <LTDC_Cmd+0x1e>
  {
    /* Enable LTDC by setting LTDCEN bit */
    LTDC->GCR |= (uint32_t)LTDC_GCR_LTDCEN;
 80075da:	4b09      	ldr	r3, [pc, #36]	; (8007600 <LTDC_Cmd+0x36>)
 80075dc:	699b      	ldr	r3, [r3, #24]
 80075de:	4a08      	ldr	r2, [pc, #32]	; (8007600 <LTDC_Cmd+0x36>)
 80075e0:	f043 0301 	orr.w	r3, r3, #1
 80075e4:	6193      	str	r3, [r2, #24]
  else
  {
    /* Disable LTDC by clearing LTDCEN bit */
    LTDC->GCR &= ~(uint32_t)LTDC_GCR_LTDCEN;
  }
}
 80075e6:	e005      	b.n	80075f4 <LTDC_Cmd+0x2a>
    LTDC->GCR &= ~(uint32_t)LTDC_GCR_LTDCEN;
 80075e8:	4b05      	ldr	r3, [pc, #20]	; (8007600 <LTDC_Cmd+0x36>)
 80075ea:	699b      	ldr	r3, [r3, #24]
 80075ec:	4a04      	ldr	r2, [pc, #16]	; (8007600 <LTDC_Cmd+0x36>)
 80075ee:	f023 0301 	bic.w	r3, r3, #1
 80075f2:	6193      	str	r3, [r2, #24]
}
 80075f4:	bf00      	nop
 80075f6:	370c      	adds	r7, #12
 80075f8:	46bd      	mov	sp, r7
 80075fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075fe:	4770      	bx	lr
 8007600:	40016800 	.word	0x40016800

08007604 <LTDC_DitherCmd>:
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */

void LTDC_DitherCmd(FunctionalState NewState)
{
 8007604:	b480      	push	{r7}
 8007606:	b083      	sub	sp, #12
 8007608:	af00      	add	r7, sp, #0
 800760a:	4603      	mov	r3, r0
 800760c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800760e:	79fb      	ldrb	r3, [r7, #7]
 8007610:	2b00      	cmp	r3, #0
 8007612:	d006      	beq.n	8007622 <LTDC_DitherCmd+0x1e>
  {
    /* Enable Dither by setting DTEN bit */
    LTDC->GCR |= (uint32_t)LTDC_GCR_DTEN;
 8007614:	4b09      	ldr	r3, [pc, #36]	; (800763c <LTDC_DitherCmd+0x38>)
 8007616:	699b      	ldr	r3, [r3, #24]
 8007618:	4a08      	ldr	r2, [pc, #32]	; (800763c <LTDC_DitherCmd+0x38>)
 800761a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800761e:	6193      	str	r3, [r2, #24]
  else
  {
    /* Disable Dither by clearing DTEN bit */
    LTDC->GCR &= ~(uint32_t)LTDC_GCR_DTEN;
  }
}
 8007620:	e005      	b.n	800762e <LTDC_DitherCmd+0x2a>
    LTDC->GCR &= ~(uint32_t)LTDC_GCR_DTEN;
 8007622:	4b06      	ldr	r3, [pc, #24]	; (800763c <LTDC_DitherCmd+0x38>)
 8007624:	699b      	ldr	r3, [r3, #24]
 8007626:	4a05      	ldr	r2, [pc, #20]	; (800763c <LTDC_DitherCmd+0x38>)
 8007628:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800762c:	6193      	str	r3, [r2, #24]
}
 800762e:	bf00      	nop
 8007630:	370c      	adds	r7, #12
 8007632:	46bd      	mov	sp, r7
 8007634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007638:	4770      	bx	lr
 800763a:	bf00      	nop
 800763c:	40016800 	.word	0x40016800

08007640 <LTDC_GetRGBWidth>:
  *         the Dither RGB width.
  * @retval None
  */

LTDC_RGBTypeDef LTDC_GetRGBWidth(void)
{
 8007640:	b490      	push	{r4, r7}
 8007642:	b086      	sub	sp, #24
 8007644:	af00      	add	r7, sp, #0
 8007646:	6078      	str	r0, [r7, #4]
  LTDC_RGBTypeDef LTDC_RGB_InitStruct;

  LTDC->GCR &= (uint32_t)GCR_MASK;
 8007648:	4b12      	ldr	r3, [pc, #72]	; (8007694 <LTDC_GetRGBWidth+0x54>)
 800764a:	699a      	ldr	r2, [r3, #24]
 800764c:	4911      	ldr	r1, [pc, #68]	; (8007694 <LTDC_GetRGBWidth+0x54>)
 800764e:	4b12      	ldr	r3, [pc, #72]	; (8007698 <LTDC_GetRGBWidth+0x58>)
 8007650:	4013      	ands	r3, r2
 8007652:	618b      	str	r3, [r1, #24]

  LTDC_RGB_InitStruct.LTDC_BlueWidth = (uint32_t)((LTDC->GCR >> 4) & 0x7);
 8007654:	4b0f      	ldr	r3, [pc, #60]	; (8007694 <LTDC_GetRGBWidth+0x54>)
 8007656:	699b      	ldr	r3, [r3, #24]
 8007658:	091b      	lsrs	r3, r3, #4
 800765a:	f003 0307 	and.w	r3, r3, #7
 800765e:	60fb      	str	r3, [r7, #12]
  LTDC_RGB_InitStruct.LTDC_GreenWidth = (uint32_t)((LTDC->GCR >> 8) & 0x7);
 8007660:	4b0c      	ldr	r3, [pc, #48]	; (8007694 <LTDC_GetRGBWidth+0x54>)
 8007662:	699b      	ldr	r3, [r3, #24]
 8007664:	0a1b      	lsrs	r3, r3, #8
 8007666:	f003 0307 	and.w	r3, r3, #7
 800766a:	613b      	str	r3, [r7, #16]
  LTDC_RGB_InitStruct.LTDC_RedWidth = (uint32_t)((LTDC->GCR >> 12) & 0x7);
 800766c:	4b09      	ldr	r3, [pc, #36]	; (8007694 <LTDC_GetRGBWidth+0x54>)
 800766e:	699b      	ldr	r3, [r3, #24]
 8007670:	0b1b      	lsrs	r3, r3, #12
 8007672:	f003 0307 	and.w	r3, r3, #7
 8007676:	617b      	str	r3, [r7, #20]

  return LTDC_RGB_InitStruct;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	461c      	mov	r4, r3
 800767c:	f107 030c 	add.w	r3, r7, #12
 8007680:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007684:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8007688:	6878      	ldr	r0, [r7, #4]
 800768a:	3718      	adds	r7, #24
 800768c:	46bd      	mov	sp, r7
 800768e:	bc90      	pop	{r4, r7}
 8007690:	4770      	bx	lr
 8007692:	bf00      	nop
 8007694:	40016800 	.word	0x40016800
 8007698:	0ffe888f 	.word	0x0ffe888f

0800769c <LTDC_RGBStructInit>:
  *         be initialized.
  * @retval None
  */

void LTDC_RGBStructInit(LTDC_RGBTypeDef* LTDC_RGB_InitStruct)
{
 800769c:	b480      	push	{r7}
 800769e:	b083      	sub	sp, #12
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	6078      	str	r0, [r7, #4]
  LTDC_RGB_InitStruct->LTDC_BlueWidth = 0x02;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	2202      	movs	r2, #2
 80076a8:	601a      	str	r2, [r3, #0]
  LTDC_RGB_InitStruct->LTDC_GreenWidth = 0x02;
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	2202      	movs	r2, #2
 80076ae:	605a      	str	r2, [r3, #4]
  LTDC_RGB_InitStruct->LTDC_RedWidth = 0x02;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	2202      	movs	r2, #2
 80076b4:	609a      	str	r2, [r3, #8]
}
 80076b6:	bf00      	nop
 80076b8:	370c      	adds	r7, #12
 80076ba:	46bd      	mov	sp, r7
 80076bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c0:	4770      	bx	lr

080076c2 <LTDC_LIPConfig>:
  * @param  LTDC_LIPositionConfig: Line Interrupt Position.
  * @retval None
  */

void LTDC_LIPConfig(uint32_t LTDC_LIPositionConfig)
{
 80076c2:	b480      	push	{r7}
 80076c4:	b083      	sub	sp, #12
 80076c6:	af00      	add	r7, sp, #0
 80076c8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_LTDC_LIPOS(LTDC_LIPositionConfig));

  /* Sets the Line Interrupt position */
  LTDC->LIPCR = (uint32_t)LTDC_LIPositionConfig;
 80076ca:	4a04      	ldr	r2, [pc, #16]	; (80076dc <LTDC_LIPConfig+0x1a>)
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	6413      	str	r3, [r2, #64]	; 0x40
}
 80076d0:	bf00      	nop
 80076d2:	370c      	adds	r7, #12
 80076d4:	46bd      	mov	sp, r7
 80076d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076da:	4770      	bx	lr
 80076dc:	40016800 	.word	0x40016800

080076e0 <LTDC_ReloadConfig>:
  *     @arg LTDC_VBReload: Immediate reload.  
  * @retval None
  */

void LTDC_ReloadConfig(uint32_t LTDC_Reload)
{
 80076e0:	b480      	push	{r7}
 80076e2:	b083      	sub	sp, #12
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_LTDC_RELOAD(LTDC_Reload));

  /* Sets the Reload type */
  LTDC->SRCR = (uint32_t)LTDC_Reload;
 80076e8:	4a04      	ldr	r2, [pc, #16]	; (80076fc <LTDC_ReloadConfig+0x1c>)
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	6253      	str	r3, [r2, #36]	; 0x24
}
 80076ee:	bf00      	nop
 80076f0:	370c      	adds	r7, #12
 80076f2:	46bd      	mov	sp, r7
 80076f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f8:	4770      	bx	lr
 80076fa:	bf00      	nop
 80076fc:	40016800 	.word	0x40016800

08007700 <LTDC_LayerInit>:
  *         the configuration information for the specified LTDC peripheral.
  * @retval None
  */

void LTDC_LayerInit(LTDC_Layer_TypeDef* LTDC_Layerx, LTDC_Layer_InitTypeDef* LTDC_Layer_InitStruct)
{
 8007700:	b480      	push	{r7}
 8007702:	b089      	sub	sp, #36	; 0x24
 8007704:	af00      	add	r7, sp, #0
 8007706:	6078      	str	r0, [r7, #4]
 8007708:	6039      	str	r1, [r7, #0]

  uint32_t whsppos = 0;
 800770a:	2300      	movs	r3, #0
 800770c:	61fb      	str	r3, [r7, #28]
  uint32_t wvsppos = 0;
 800770e:	2300      	movs	r3, #0
 8007710:	61bb      	str	r3, [r7, #24]
  uint32_t dcgreen = 0;
 8007712:	2300      	movs	r3, #0
 8007714:	617b      	str	r3, [r7, #20]
  uint32_t dcred = 0;
 8007716:	2300      	movs	r3, #0
 8007718:	613b      	str	r3, [r7, #16]
  uint32_t dcalpha = 0;
 800771a:	2300      	movs	r3, #0
 800771c:	60fb      	str	r3, [r7, #12]
  uint32_t cfbp = 0;
 800771e:	2300      	movs	r3, #0
 8007720:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LTDC_CFBP(LTDC_Layer_InitStruct->LTDC_CFBPitch));
  assert_param(IS_LTDC_CFBLL(LTDC_Layer_InitStruct->LTDC_CFBLineLength));
  assert_param(IS_LTDC_CFBLNBR(LTDC_Layer_InitStruct->LTDC_CFBLineNumber));

  /* Configures the horizontal start and stop position */
  whsppos = LTDC_Layer_InitStruct->LTDC_HorizontalStop << 16;
 8007722:	683b      	ldr	r3, [r7, #0]
 8007724:	685b      	ldr	r3, [r3, #4]
 8007726:	041b      	lsls	r3, r3, #16
 8007728:	61fb      	str	r3, [r7, #28]
  LTDC_Layerx->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	685b      	ldr	r3, [r3, #4]
 800772e:	f403 4270 	and.w	r2, r3, #61440	; 0xf000
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	605a      	str	r2, [r3, #4]
  LTDC_Layerx->WHPCR = (LTDC_Layer_InitStruct->LTDC_HorizontalStart | whsppos);
 8007736:	683b      	ldr	r3, [r7, #0]
 8007738:	681a      	ldr	r2, [r3, #0]
 800773a:	69fb      	ldr	r3, [r7, #28]
 800773c:	431a      	orrs	r2, r3
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	605a      	str	r2, [r3, #4]

  /* Configures the vertical start and stop position */
  wvsppos = LTDC_Layer_InitStruct->LTDC_VerticalStop << 16;
 8007742:	683b      	ldr	r3, [r7, #0]
 8007744:	68db      	ldr	r3, [r3, #12]
 8007746:	041b      	lsls	r3, r3, #16
 8007748:	61bb      	str	r3, [r7, #24]
  LTDC_Layerx->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	689b      	ldr	r3, [r3, #8]
 800774e:	f403 4270 	and.w	r2, r3, #61440	; 0xf000
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	609a      	str	r2, [r3, #8]
  LTDC_Layerx->WVPCR  = (LTDC_Layer_InitStruct->LTDC_VerticalStart | wvsppos);
 8007756:	683b      	ldr	r3, [r7, #0]
 8007758:	689a      	ldr	r2, [r3, #8]
 800775a:	69bb      	ldr	r3, [r7, #24]
 800775c:	431a      	orrs	r2, r3
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	609a      	str	r2, [r3, #8]

  /* Specifies the pixel format */
  LTDC_Layerx->PFCR &= ~(LTDC_LxPFCR_PF);
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	691b      	ldr	r3, [r3, #16]
 8007766:	f023 0207 	bic.w	r2, r3, #7
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	611a      	str	r2, [r3, #16]
  LTDC_Layerx->PFCR = (LTDC_Layer_InitStruct->LTDC_PixelFormat);
 800776e:	683b      	ldr	r3, [r7, #0]
 8007770:	691a      	ldr	r2, [r3, #16]
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	611a      	str	r2, [r3, #16]

  /* Configures the default color values */
  dcgreen = (LTDC_Layer_InitStruct->LTDC_DefaultColorGreen << 8);
 8007776:	683b      	ldr	r3, [r7, #0]
 8007778:	69db      	ldr	r3, [r3, #28]
 800777a:	021b      	lsls	r3, r3, #8
 800777c:	617b      	str	r3, [r7, #20]
  dcred = (LTDC_Layer_InitStruct->LTDC_DefaultColorRed << 16);
 800777e:	683b      	ldr	r3, [r7, #0]
 8007780:	6a1b      	ldr	r3, [r3, #32]
 8007782:	041b      	lsls	r3, r3, #16
 8007784:	613b      	str	r3, [r7, #16]
  dcalpha = (LTDC_Layer_InitStruct->LTDC_DefaultColorAlpha << 24);
 8007786:	683b      	ldr	r3, [r7, #0]
 8007788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800778a:	061b      	lsls	r3, r3, #24
 800778c:	60fb      	str	r3, [r7, #12]
  LTDC_Layerx->DCCR &=  ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	699b      	ldr	r3, [r3, #24]
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	2200      	movs	r2, #0
 8007796:	619a      	str	r2, [r3, #24]
  LTDC_Layerx->DCCR = (LTDC_Layer_InitStruct->LTDC_DefaultColorBlue | dcgreen | \
 8007798:	683b      	ldr	r3, [r7, #0]
 800779a:	699a      	ldr	r2, [r3, #24]
 800779c:	697b      	ldr	r3, [r7, #20]
 800779e:	431a      	orrs	r2, r3
 80077a0:	693b      	ldr	r3, [r7, #16]
 80077a2:	431a      	orrs	r2, r3
                        dcred | dcalpha);
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	431a      	orrs	r2, r3
  LTDC_Layerx->DCCR = (LTDC_Layer_InitStruct->LTDC_DefaultColorBlue | dcgreen | \
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	619a      	str	r2, [r3, #24]

  /* Specifies the constant alpha value */      
  LTDC_Layerx->CACR &= ~(LTDC_LxCACR_CONSTA);
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	695b      	ldr	r3, [r3, #20]
 80077b0:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	615a      	str	r2, [r3, #20]
  LTDC_Layerx->CACR = (LTDC_Layer_InitStruct->LTDC_ConstantAlpha);
 80077b8:	683b      	ldr	r3, [r7, #0]
 80077ba:	695a      	ldr	r2, [r3, #20]
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	615a      	str	r2, [r3, #20]

  /* Specifies the blending factors */
  LTDC_Layerx->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	69db      	ldr	r3, [r3, #28]
 80077c4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80077c8:	f023 0307 	bic.w	r3, r3, #7
 80077cc:	687a      	ldr	r2, [r7, #4]
 80077ce:	61d3      	str	r3, [r2, #28]
  LTDC_Layerx->BFCR = (LTDC_Layer_InitStruct->LTDC_BlendingFactor_1 | LTDC_Layer_InitStruct->LTDC_BlendingFactor_2);
 80077d0:	683b      	ldr	r3, [r7, #0]
 80077d2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80077d4:	683b      	ldr	r3, [r7, #0]
 80077d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077d8:	431a      	orrs	r2, r3
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	61da      	str	r2, [r3, #28]

  /* Configures the color frame buffer start address */
  LTDC_Layerx->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	2200      	movs	r2, #0
 80077e6:	629a      	str	r2, [r3, #40]	; 0x28
  LTDC_Layerx->CFBAR = (LTDC_Layer_InitStruct->LTDC_CFBStartAdress);
 80077e8:	683b      	ldr	r3, [r7, #0]
 80077ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	629a      	str	r2, [r3, #40]	; 0x28

  /* Configures the color frame buffer pitch in byte */
  cfbp = (LTDC_Layer_InitStruct->LTDC_CFBPitch << 16);
 80077f0:	683b      	ldr	r3, [r7, #0]
 80077f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077f4:	041b      	lsls	r3, r3, #16
 80077f6:	60bb      	str	r3, [r7, #8]
  LTDC_Layerx->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077fc:	f003 22e0 	and.w	r2, r3, #3758153728	; 0xe000e000
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	62da      	str	r2, [r3, #44]	; 0x2c
  LTDC_Layerx->CFBLR  = (LTDC_Layer_InitStruct->LTDC_CFBLineLength | cfbp);
 8007804:	683b      	ldr	r3, [r7, #0]
 8007806:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007808:	68bb      	ldr	r3, [r7, #8]
 800780a:	431a      	orrs	r2, r3
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Configures the frame buffer line number */
  LTDC_Layerx->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007814:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007818:	f023 0307 	bic.w	r3, r3, #7
 800781c:	687a      	ldr	r2, [r7, #4]
 800781e:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_Layerx->CFBLNR  = (LTDC_Layer_InitStruct->LTDC_CFBLineNumber);
 8007820:	683b      	ldr	r3, [r7, #0]
 8007822:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	631a      	str	r2, [r3, #48]	; 0x30

}
 8007828:	bf00      	nop
 800782a:	3724      	adds	r7, #36	; 0x24
 800782c:	46bd      	mov	sp, r7
 800782e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007832:	4770      	bx	lr

08007834 <LTDC_LayerStructInit>:
  *         be initialized.
  * @retval None
  */

void LTDC_LayerStructInit(LTDC_Layer_InitTypeDef * LTDC_Layer_InitStruct)
{
 8007834:	b480      	push	{r7}
 8007836:	b083      	sub	sp, #12
 8007838:	af00      	add	r7, sp, #0
 800783a:	6078      	str	r0, [r7, #4]
  /*--------------- Reset Layer structure parameters values -------------------*/

  /*!< Initialize the horizontal limit member */
  LTDC_Layer_InitStruct->LTDC_HorizontalStart = 0x00;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	2200      	movs	r2, #0
 8007840:	601a      	str	r2, [r3, #0]
  LTDC_Layer_InitStruct->LTDC_HorizontalStop = 0x00;
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	2200      	movs	r2, #0
 8007846:	605a      	str	r2, [r3, #4]

  /*!< Initialize the vertical limit member */
  LTDC_Layer_InitStruct->LTDC_VerticalStart = 0x00;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	2200      	movs	r2, #0
 800784c:	609a      	str	r2, [r3, #8]
  LTDC_Layer_InitStruct->LTDC_VerticalStop = 0x00;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	2200      	movs	r2, #0
 8007852:	60da      	str	r2, [r3, #12]

  /*!< Initialize the pixel format member */
  LTDC_Layer_InitStruct->LTDC_PixelFormat = LTDC_Pixelformat_ARGB8888;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	2200      	movs	r2, #0
 8007858:	611a      	str	r2, [r3, #16]

  /*!< Initialize the constant alpha value */
  LTDC_Layer_InitStruct->LTDC_ConstantAlpha = 0xFF;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	22ff      	movs	r2, #255	; 0xff
 800785e:	615a      	str	r2, [r3, #20]

  /*!< Initialize the default color values */
  LTDC_Layer_InitStruct->LTDC_DefaultColorBlue = 0x00;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	2200      	movs	r2, #0
 8007864:	619a      	str	r2, [r3, #24]
  LTDC_Layer_InitStruct->LTDC_DefaultColorGreen = 0x00;
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	2200      	movs	r2, #0
 800786a:	61da      	str	r2, [r3, #28]
  LTDC_Layer_InitStruct->LTDC_DefaultColorRed = 0x00;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	2200      	movs	r2, #0
 8007870:	621a      	str	r2, [r3, #32]
  LTDC_Layer_InitStruct->LTDC_DefaultColorAlpha = 0x00;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	2200      	movs	r2, #0
 8007876:	625a      	str	r2, [r3, #36]	; 0x24

  /*!< Initialize the blending factors */
  LTDC_Layer_InitStruct->LTDC_BlendingFactor_1 = LTDC_BlendingFactor1_PAxCA;
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800787e:	629a      	str	r2, [r3, #40]	; 0x28
  LTDC_Layer_InitStruct->LTDC_BlendingFactor_2 = LTDC_BlendingFactor2_PAxCA;
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	2207      	movs	r2, #7
 8007884:	62da      	str	r2, [r3, #44]	; 0x2c

  /*!< Initialize the frame buffer start address */
  LTDC_Layer_InitStruct->LTDC_CFBStartAdress = 0x00;
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	2200      	movs	r2, #0
 800788a:	631a      	str	r2, [r3, #48]	; 0x30

  /*!< Initialize the frame buffer pitch and line length */
  LTDC_Layer_InitStruct->LTDC_CFBLineLength = 0x00;
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	2200      	movs	r2, #0
 8007890:	635a      	str	r2, [r3, #52]	; 0x34
  LTDC_Layer_InitStruct->LTDC_CFBPitch = 0x00;
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	2200      	movs	r2, #0
 8007896:	639a      	str	r2, [r3, #56]	; 0x38

  /*!< Initialize the frame buffer line number */
  LTDC_Layer_InitStruct->LTDC_CFBLineNumber = 0x00;
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	2200      	movs	r2, #0
 800789c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800789e:	bf00      	nop
 80078a0:	370c      	adds	r7, #12
 80078a2:	46bd      	mov	sp, r7
 80078a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a8:	4770      	bx	lr

080078aa <LTDC_LayerCmd>:
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */

void LTDC_LayerCmd(LTDC_Layer_TypeDef* LTDC_Layerx, FunctionalState NewState)
{
 80078aa:	b480      	push	{r7}
 80078ac:	b083      	sub	sp, #12
 80078ae:	af00      	add	r7, sp, #0
 80078b0:	6078      	str	r0, [r7, #4]
 80078b2:	460b      	mov	r3, r1
 80078b4:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80078b6:	78fb      	ldrb	r3, [r7, #3]
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d006      	beq.n	80078ca <LTDC_LayerCmd+0x20>
  {
    /* Enable LTDC_Layer by setting LEN bit */
    LTDC_Layerx->CR |= (uint32_t)LTDC_LxCR_LEN;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	f043 0201 	orr.w	r2, r3, #1
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable LTDC_Layer by clearing LEN bit */
    LTDC_Layerx->CR &= ~(uint32_t)LTDC_LxCR_LEN;
  }
}
 80078c8:	e005      	b.n	80078d6 <LTDC_LayerCmd+0x2c>
    LTDC_Layerx->CR &= ~(uint32_t)LTDC_LxCR_LEN;
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	f023 0201 	bic.w	r2, r3, #1
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	601a      	str	r2, [r3, #0]
}
 80078d6:	bf00      	nop
 80078d8:	370c      	adds	r7, #12
 80078da:	46bd      	mov	sp, r7
 80078dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e0:	4770      	bx	lr

080078e2 <LTDC_GetPosStatus>:
  *         the current position.
  * @retval None
  */

LTDC_PosTypeDef LTDC_GetPosStatus(void)
{
 80078e2:	b480      	push	{r7}
 80078e4:	b085      	sub	sp, #20
 80078e6:	af00      	add	r7, sp, #0
 80078e8:	6078      	str	r0, [r7, #4]
  LTDC_PosTypeDef LTDC_Pos_InitStruct;

  LTDC->CPSR &= ~(LTDC_CPSR_CYPOS | LTDC_CPSR_CXPOS);
 80078ea:	4b0d      	ldr	r3, [pc, #52]	; (8007920 <LTDC_GetPosStatus+0x3e>)
 80078ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078ee:	4b0c      	ldr	r3, [pc, #48]	; (8007920 <LTDC_GetPosStatus+0x3e>)
 80078f0:	2200      	movs	r2, #0
 80078f2:	645a      	str	r2, [r3, #68]	; 0x44

  LTDC_Pos_InitStruct.LTDC_POSX = (uint32_t)(LTDC->CPSR >> 16);
 80078f4:	4b0a      	ldr	r3, [pc, #40]	; (8007920 <LTDC_GetPosStatus+0x3e>)
 80078f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078f8:	0c1b      	lsrs	r3, r3, #16
 80078fa:	60bb      	str	r3, [r7, #8]
  LTDC_Pos_InitStruct.LTDC_POSY = (uint32_t)(LTDC->CPSR & 0xFFFF);
 80078fc:	4b08      	ldr	r3, [pc, #32]	; (8007920 <LTDC_GetPosStatus+0x3e>)
 80078fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007900:	b29b      	uxth	r3, r3
 8007902:	60fb      	str	r3, [r7, #12]

  return LTDC_Pos_InitStruct;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	461a      	mov	r2, r3
 8007908:	f107 0308 	add.w	r3, r7, #8
 800790c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8007910:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8007914:	6878      	ldr	r0, [r7, #4]
 8007916:	3714      	adds	r7, #20
 8007918:	46bd      	mov	sp, r7
 800791a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800791e:	4770      	bx	lr
 8007920:	40016800 	.word	0x40016800

08007924 <LTDC_PosStructInit>:
  *         be initialized.
  * @retval None
  */

void LTDC_PosStructInit(LTDC_PosTypeDef* LTDC_Pos_InitStruct)
{
 8007924:	b480      	push	{r7}
 8007926:	b083      	sub	sp, #12
 8007928:	af00      	add	r7, sp, #0
 800792a:	6078      	str	r0, [r7, #4]
  LTDC_Pos_InitStruct->LTDC_POSX = 0x00;
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	2200      	movs	r2, #0
 8007930:	601a      	str	r2, [r3, #0]
  LTDC_Pos_InitStruct->LTDC_POSY = 0x00;
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	2200      	movs	r2, #0
 8007936:	605a      	str	r2, [r3, #4]
}
 8007938:	bf00      	nop
 800793a:	370c      	adds	r7, #12
 800793c:	46bd      	mov	sp, r7
 800793e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007942:	4770      	bx	lr

08007944 <LTDC_GetCDStatus>:
  *     @arg LTDC_CD_HSYNC:  Horizontal Synchronization current status.
  * @retval The new state of LTDC_CD (SET or RESET).
  */

FlagStatus LTDC_GetCDStatus(uint32_t LTDC_CD)
{
 8007944:	b480      	push	{r7}
 8007946:	b085      	sub	sp, #20
 8007948:	af00      	add	r7, sp, #0
 800794a:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus;

  /* Check the parameters */
  assert_param(IS_LTDC_GET_CD(LTDC_CD));

  if ((LTDC->CDSR & LTDC_CD) != (uint32_t)RESET)
 800794c:	4b08      	ldr	r3, [pc, #32]	; (8007970 <LTDC_GetCDStatus+0x2c>)
 800794e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	4013      	ands	r3, r2
 8007954:	2b00      	cmp	r3, #0
 8007956:	d002      	beq.n	800795e <LTDC_GetCDStatus+0x1a>
  {
    bitstatus = SET;
 8007958:	2301      	movs	r3, #1
 800795a:	73fb      	strb	r3, [r7, #15]
 800795c:	e001      	b.n	8007962 <LTDC_GetCDStatus+0x1e>
  }
  else
  {
    bitstatus = RESET;
 800795e:	2300      	movs	r3, #0
 8007960:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007962:	7bfb      	ldrb	r3, [r7, #15]
}
 8007964:	4618      	mov	r0, r3
 8007966:	3714      	adds	r7, #20
 8007968:	46bd      	mov	sp, r7
 800796a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800796e:	4770      	bx	lr
 8007970:	40016800 	.word	0x40016800

08007974 <LTDC_ColorKeyingConfig>:
  *         one of the following values: LTDC_Layer1, LTDC_Layer2   
  * @retval None
  */

void LTDC_ColorKeyingConfig(LTDC_Layer_TypeDef* LTDC_Layerx, LTDC_ColorKeying_InitTypeDef* LTDC_colorkeying_InitStruct, FunctionalState NewState)
{ 
 8007974:	b480      	push	{r7}
 8007976:	b087      	sub	sp, #28
 8007978:	af00      	add	r7, sp, #0
 800797a:	60f8      	str	r0, [r7, #12]
 800797c:	60b9      	str	r1, [r7, #8]
 800797e:	4613      	mov	r3, r2
 8007980:	71fb      	strb	r3, [r7, #7]
  uint32_t ckgreen = 0;
 8007982:	2300      	movs	r3, #0
 8007984:	617b      	str	r3, [r7, #20]
  uint32_t ckred = 0;
 8007986:	2300      	movs	r3, #0
 8007988:	613b      	str	r3, [r7, #16]
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_LTDC_CKEYING(LTDC_colorkeying_InitStruct->LTDC_ColorKeyBlue));
  assert_param(IS_LTDC_CKEYING(LTDC_colorkeying_InitStruct->LTDC_ColorKeyGreen));
  assert_param(IS_LTDC_CKEYING(LTDC_colorkeying_InitStruct->LTDC_ColorKeyRed));
  
  if (NewState != DISABLE)
 800798a:	79fb      	ldrb	r3, [r7, #7]
 800798c:	2b00      	cmp	r3, #0
 800798e:	d01f      	beq.n	80079d0 <LTDC_ColorKeyingConfig+0x5c>
  {
    /* Enable LTDC color keying by setting COLKEN bit */
    LTDC_Layerx->CR |= (uint32_t)LTDC_LxCR_COLKEN;
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	f043 0202 	orr.w	r2, r3, #2
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	601a      	str	r2, [r3, #0]
    
    /* Sets the color keying values */
    ckgreen = (LTDC_colorkeying_InitStruct->LTDC_ColorKeyGreen << 8);
 800799c:	68bb      	ldr	r3, [r7, #8]
 800799e:	685b      	ldr	r3, [r3, #4]
 80079a0:	021b      	lsls	r3, r3, #8
 80079a2:	617b      	str	r3, [r7, #20]
    ckred = (LTDC_colorkeying_InitStruct->LTDC_ColorKeyRed << 16);
 80079a4:	68bb      	ldr	r3, [r7, #8]
 80079a6:	689b      	ldr	r3, [r3, #8]
 80079a8:	041b      	lsls	r3, r3, #16
 80079aa:	613b      	str	r3, [r7, #16]
    LTDC_Layerx->CKCR  &= ~(LTDC_LxCKCR_CKBLUE | LTDC_LxCKCR_CKGREEN | LTDC_LxCKCR_CKRED);
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	68db      	ldr	r3, [r3, #12]
 80079b0:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	60da      	str	r2, [r3, #12]
    LTDC_Layerx->CKCR |= (LTDC_colorkeying_InitStruct->LTDC_ColorKeyBlue | ckgreen | ckred);
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	68da      	ldr	r2, [r3, #12]
 80079bc:	68bb      	ldr	r3, [r7, #8]
 80079be:	6819      	ldr	r1, [r3, #0]
 80079c0:	697b      	ldr	r3, [r7, #20]
 80079c2:	4319      	orrs	r1, r3
 80079c4:	693b      	ldr	r3, [r7, #16]
 80079c6:	430b      	orrs	r3, r1
 80079c8:	431a      	orrs	r2, r3
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	60da      	str	r2, [r3, #12]
 80079ce:	e005      	b.n	80079dc <LTDC_ColorKeyingConfig+0x68>
  }
  else
  {
    /* Disable LTDC color keying by clearing COLKEN bit */
    LTDC_Layerx->CR &= ~(uint32_t)LTDC_LxCR_COLKEN;
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	f023 0202 	bic.w	r2, r3, #2
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	601a      	str	r2, [r3, #0]
  }
  
  /* Reload shadow register */
  LTDC->SRCR = LTDC_IMReload;
 80079dc:	4b04      	ldr	r3, [pc, #16]	; (80079f0 <LTDC_ColorKeyingConfig+0x7c>)
 80079de:	2201      	movs	r2, #1
 80079e0:	625a      	str	r2, [r3, #36]	; 0x24
}
 80079e2:	bf00      	nop
 80079e4:	371c      	adds	r7, #28
 80079e6:	46bd      	mov	sp, r7
 80079e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ec:	4770      	bx	lr
 80079ee:	bf00      	nop
 80079f0:	40016800 	.word	0x40016800

080079f4 <LTDC_ColorKeyingStructInit>:
  *         be initialized.
  * @retval None
  */

void LTDC_ColorKeyingStructInit(LTDC_ColorKeying_InitTypeDef* LTDC_colorkeying_InitStruct)
{
 80079f4:	b480      	push	{r7}
 80079f6:	b083      	sub	sp, #12
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	6078      	str	r0, [r7, #4]
  /*!< Initialize the color keying values */
  LTDC_colorkeying_InitStruct->LTDC_ColorKeyBlue = 0x00;
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	2200      	movs	r2, #0
 8007a00:	601a      	str	r2, [r3, #0]
  LTDC_colorkeying_InitStruct->LTDC_ColorKeyGreen = 0x00;
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	2200      	movs	r2, #0
 8007a06:	605a      	str	r2, [r3, #4]
  LTDC_colorkeying_InitStruct->LTDC_ColorKeyRed = 0x00;
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	2200      	movs	r2, #0
 8007a0c:	609a      	str	r2, [r3, #8]
}
 8007a0e:	bf00      	nop
 8007a10:	370c      	adds	r7, #12
 8007a12:	46bd      	mov	sp, r7
 8007a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a18:	4770      	bx	lr

08007a1a <LTDC_CLUTCmd>:
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */

void LTDC_CLUTCmd(LTDC_Layer_TypeDef* LTDC_Layerx, FunctionalState NewState)
{
 8007a1a:	b480      	push	{r7}
 8007a1c:	b083      	sub	sp, #12
 8007a1e:	af00      	add	r7, sp, #0
 8007a20:	6078      	str	r0, [r7, #4]
 8007a22:	460b      	mov	r3, r1
 8007a24:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8007a26:	78fb      	ldrb	r3, [r7, #3]
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d006      	beq.n	8007a3a <LTDC_CLUTCmd+0x20>
  {
    /* Enable CLUT by setting CLUTEN bit */
    LTDC_Layerx->CR |= (uint32_t)LTDC_LxCR_CLUTEN;
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	f043 0210 	orr.w	r2, r3, #16
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	601a      	str	r2, [r3, #0]
 8007a38:	e005      	b.n	8007a46 <LTDC_CLUTCmd+0x2c>
  }
  else
  {
    /* Disable CLUT by clearing CLUTEN bit */
    LTDC_Layerx->CR &= ~(uint32_t)LTDC_LxCR_CLUTEN;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	f023 0210 	bic.w	r2, r3, #16
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	601a      	str	r2, [r3, #0]
  }
  
  /* Reload shadow register */
  LTDC->SRCR = LTDC_IMReload;
 8007a46:	4b04      	ldr	r3, [pc, #16]	; (8007a58 <LTDC_CLUTCmd+0x3e>)
 8007a48:	2201      	movs	r2, #1
 8007a4a:	625a      	str	r2, [r3, #36]	; 0x24
}
 8007a4c:	bf00      	nop
 8007a4e:	370c      	adds	r7, #12
 8007a50:	46bd      	mov	sp, r7
 8007a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a56:	4770      	bx	lr
 8007a58:	40016800 	.word	0x40016800

08007a5c <LTDC_CLUTInit>:
  *         one of the following values: LTDC_Layer1, LTDC_Layer2   
  * @retval None
  */

void LTDC_CLUTInit(LTDC_Layer_TypeDef* LTDC_Layerx, LTDC_CLUT_InitTypeDef* LTDC_CLUT_InitStruct)
{  
 8007a5c:	b480      	push	{r7}
 8007a5e:	b087      	sub	sp, #28
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	6078      	str	r0, [r7, #4]
 8007a64:	6039      	str	r1, [r7, #0]
  uint32_t green = 0;
 8007a66:	2300      	movs	r3, #0
 8007a68:	617b      	str	r3, [r7, #20]
  uint32_t red = 0;
 8007a6a:	2300      	movs	r3, #0
 8007a6c:	613b      	str	r3, [r7, #16]
  uint32_t clutadd = 0;
 8007a6e:	2300      	movs	r3, #0
 8007a70:	60fb      	str	r3, [r7, #12]
  assert_param(IS_LTDC_CLUTWR(LTDC_CLUT_InitStruct->LTDC_RedValue));
  assert_param(IS_LTDC_CLUTWR(LTDC_CLUT_InitStruct->LTDC_GreenValue));
  assert_param(IS_LTDC_CLUTWR(LTDC_CLUT_InitStruct->LTDC_BlueValue));
    
  /* Specifies the CLUT address and RGB value */
  green = (LTDC_CLUT_InitStruct->LTDC_GreenValue << 8);
 8007a72:	683b      	ldr	r3, [r7, #0]
 8007a74:	689b      	ldr	r3, [r3, #8]
 8007a76:	021b      	lsls	r3, r3, #8
 8007a78:	617b      	str	r3, [r7, #20]
  red = (LTDC_CLUT_InitStruct->LTDC_RedValue << 16);
 8007a7a:	683b      	ldr	r3, [r7, #0]
 8007a7c:	68db      	ldr	r3, [r3, #12]
 8007a7e:	041b      	lsls	r3, r3, #16
 8007a80:	613b      	str	r3, [r7, #16]
  clutadd = (LTDC_CLUT_InitStruct->LTDC_CLUTAdress << 24);
 8007a82:	683b      	ldr	r3, [r7, #0]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	061b      	lsls	r3, r3, #24
 8007a88:	60fb      	str	r3, [r7, #12]
  LTDC_Layerx->CLUTWR  = (clutadd | LTDC_CLUT_InitStruct->LTDC_BlueValue | \
 8007a8a:	683b      	ldr	r3, [r7, #0]
 8007a8c:	685a      	ldr	r2, [r3, #4]
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	431a      	orrs	r2, r3
 8007a92:	697b      	ldr	r3, [r7, #20]
 8007a94:	431a      	orrs	r2, r3
                              green | red);
 8007a96:	693b      	ldr	r3, [r7, #16]
 8007a98:	431a      	orrs	r2, r3
  LTDC_Layerx->CLUTWR  = (clutadd | LTDC_CLUT_InitStruct->LTDC_BlueValue | \
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	641a      	str	r2, [r3, #64]	; 0x40
}
 8007a9e:	bf00      	nop
 8007aa0:	371c      	adds	r7, #28
 8007aa2:	46bd      	mov	sp, r7
 8007aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa8:	4770      	bx	lr

08007aaa <LTDC_CLUTStructInit>:
  *         be initialized.
  * @retval None
  */

void LTDC_CLUTStructInit(LTDC_CLUT_InitTypeDef* LTDC_CLUT_InitStruct)
{
 8007aaa:	b480      	push	{r7}
 8007aac:	b083      	sub	sp, #12
 8007aae:	af00      	add	r7, sp, #0
 8007ab0:	6078      	str	r0, [r7, #4]
  /*!< Initialize the CLUT adress and RGB values */
  LTDC_CLUT_InitStruct->LTDC_CLUTAdress = 0x00;
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	2200      	movs	r2, #0
 8007ab6:	601a      	str	r2, [r3, #0]
  LTDC_CLUT_InitStruct->LTDC_BlueValue = 0x00;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	2200      	movs	r2, #0
 8007abc:	605a      	str	r2, [r3, #4]
  LTDC_CLUT_InitStruct->LTDC_GreenValue = 0x00;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	2200      	movs	r2, #0
 8007ac2:	609a      	str	r2, [r3, #8]
  LTDC_CLUT_InitStruct->LTDC_RedValue = 0x00;
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	2200      	movs	r2, #0
 8007ac8:	60da      	str	r2, [r3, #12]
}
 8007aca:	bf00      	nop
 8007acc:	370c      	adds	r7, #12
 8007ace:	46bd      	mov	sp, r7
 8007ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad4:	4770      	bx	lr

08007ad6 <LTDC_LayerPosition>:
  * @retval Reload of the shadow registers values must be applied after layer 
  *         position reconfiguration.
  */

void LTDC_LayerPosition(LTDC_Layer_TypeDef* LTDC_Layerx, uint16_t OffsetX, uint16_t OffsetY)
{
 8007ad6:	b480      	push	{r7}
 8007ad8:	b089      	sub	sp, #36	; 0x24
 8007ada:	af00      	add	r7, sp, #0
 8007adc:	6078      	str	r0, [r7, #4]
 8007ade:	460b      	mov	r3, r1
 8007ae0:	807b      	strh	r3, [r7, #2]
 8007ae2:	4613      	mov	r3, r2
 8007ae4:	803b      	strh	r3, [r7, #0]
  uint32_t horizontal_start;
  uint32_t horizontal_stop;
  uint32_t vertical_start;
  uint32_t vertical_stop;
  
  LTDC_Layerx->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	685b      	ldr	r3, [r3, #4]
 8007aea:	f403 4270 	and.w	r2, r3, #61440	; 0xf000
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	605a      	str	r2, [r3, #4]
  LTDC_Layerx->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	689b      	ldr	r3, [r3, #8]
 8007af6:	f403 4270 	and.w	r2, r3, #61440	; 0xf000
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	609a      	str	r2, [r3, #8]
  
  /* Reconfigures the horizontal and vertical start position */
  tempreg = LTDC->BPCR;
 8007afe:	4b2c      	ldr	r3, [pc, #176]	; (8007bb0 <LTDC_LayerPosition+0xda>)
 8007b00:	68db      	ldr	r3, [r3, #12]
 8007b02:	61bb      	str	r3, [r7, #24]
  horizontal_start = (tempreg >> 16) + 1 + OffsetX;
 8007b04:	69bb      	ldr	r3, [r7, #24]
 8007b06:	0c1a      	lsrs	r2, r3, #16
 8007b08:	887b      	ldrh	r3, [r7, #2]
 8007b0a:	4413      	add	r3, r2
 8007b0c:	3301      	adds	r3, #1
 8007b0e:	617b      	str	r3, [r7, #20]
  vertical_start = (tempreg & 0xFFFF) + 1 + OffsetY;
 8007b10:	69bb      	ldr	r3, [r7, #24]
 8007b12:	b29a      	uxth	r2, r3
 8007b14:	883b      	ldrh	r3, [r7, #0]
 8007b16:	4413      	add	r3, r2
 8007b18:	3301      	adds	r3, #1
 8007b1a:	613b      	str	r3, [r7, #16]
  
  /* Reconfigures the horizontal and vertical stop position */
  /* Get the number of byte per pixel */
  
  tempreg = LTDC_Layerx->PFCR;
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	691b      	ldr	r3, [r3, #16]
 8007b20:	61bb      	str	r3, [r7, #24]
  
  if (tempreg == LTDC_Pixelformat_ARGB8888)
 8007b22:	69bb      	ldr	r3, [r7, #24]
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d102      	bne.n	8007b2e <LTDC_LayerPosition+0x58>
  {
    temp = 4;
 8007b28:	2304      	movs	r3, #4
 8007b2a:	61fb      	str	r3, [r7, #28]
 8007b2c:	e016      	b.n	8007b5c <LTDC_LayerPosition+0x86>
  }
  else if (tempreg == LTDC_Pixelformat_RGB888)
 8007b2e:	69bb      	ldr	r3, [r7, #24]
 8007b30:	2b01      	cmp	r3, #1
 8007b32:	d102      	bne.n	8007b3a <LTDC_LayerPosition+0x64>
  {
    temp = 3;
 8007b34:	2303      	movs	r3, #3
 8007b36:	61fb      	str	r3, [r7, #28]
 8007b38:	e010      	b.n	8007b5c <LTDC_LayerPosition+0x86>
  }
  else if ((tempreg == LTDC_Pixelformat_ARGB4444) || 
 8007b3a:	69bb      	ldr	r3, [r7, #24]
 8007b3c:	2b04      	cmp	r3, #4
 8007b3e:	d008      	beq.n	8007b52 <LTDC_LayerPosition+0x7c>
 8007b40:	69bb      	ldr	r3, [r7, #24]
 8007b42:	2b02      	cmp	r3, #2
 8007b44:	d005      	beq.n	8007b52 <LTDC_LayerPosition+0x7c>
          (tempreg == LTDC_Pixelformat_RGB565)    ||  
 8007b46:	69bb      	ldr	r3, [r7, #24]
 8007b48:	2b03      	cmp	r3, #3
 8007b4a:	d002      	beq.n	8007b52 <LTDC_LayerPosition+0x7c>
          (tempreg == LTDC_Pixelformat_ARGB1555)  ||
 8007b4c:	69bb      	ldr	r3, [r7, #24]
 8007b4e:	2b07      	cmp	r3, #7
 8007b50:	d102      	bne.n	8007b58 <LTDC_LayerPosition+0x82>
          (tempreg == LTDC_Pixelformat_AL88))
  {
    temp = 2;  
 8007b52:	2302      	movs	r3, #2
 8007b54:	61fb      	str	r3, [r7, #28]
 8007b56:	e001      	b.n	8007b5c <LTDC_LayerPosition+0x86>
  }
  else
  {
    temp = 1;
 8007b58:	2301      	movs	r3, #1
 8007b5a:	61fb      	str	r3, [r7, #28]
  }  
    
  tempreg = LTDC_Layerx->CFBLR;
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b60:	61bb      	str	r3, [r7, #24]
  horizontal_stop = (((tempreg & 0x1FFF) - 3)/temp) + horizontal_start - 1;
 8007b62:	69bb      	ldr	r3, [r7, #24]
 8007b64:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007b68:	1eda      	subs	r2, r3, #3
 8007b6a:	69fb      	ldr	r3, [r7, #28]
 8007b6c:	fbb2 f2f3 	udiv	r2, r2, r3
 8007b70:	697b      	ldr	r3, [r7, #20]
 8007b72:	4413      	add	r3, r2
 8007b74:	3b01      	subs	r3, #1
 8007b76:	60fb      	str	r3, [r7, #12]
  
  tempreg = LTDC_Layerx->CFBLNR;
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b7c:	61bb      	str	r3, [r7, #24]
  vertical_stop = (tempreg & 0x7FF) + vertical_start - 1;  
 8007b7e:	69bb      	ldr	r3, [r7, #24]
 8007b80:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8007b84:	693b      	ldr	r3, [r7, #16]
 8007b86:	4413      	add	r3, r2
 8007b88:	3b01      	subs	r3, #1
 8007b8a:	60bb      	str	r3, [r7, #8]
  
  LTDC_Layerx->WHPCR = horizontal_start | (horizontal_stop << 16);
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	041a      	lsls	r2, r3, #16
 8007b90:	697b      	ldr	r3, [r7, #20]
 8007b92:	431a      	orrs	r2, r3
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	605a      	str	r2, [r3, #4]
  LTDC_Layerx->WVPCR = vertical_start | (vertical_stop << 16);  
 8007b98:	68bb      	ldr	r3, [r7, #8]
 8007b9a:	041a      	lsls	r2, r3, #16
 8007b9c:	693b      	ldr	r3, [r7, #16]
 8007b9e:	431a      	orrs	r2, r3
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	609a      	str	r2, [r3, #8]
}
 8007ba4:	bf00      	nop
 8007ba6:	3724      	adds	r7, #36	; 0x24
 8007ba8:	46bd      	mov	sp, r7
 8007baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bae:	4770      	bx	lr
 8007bb0:	40016800 	.word	0x40016800

08007bb4 <LTDC_LayerAlpha>:
  * @retval Reload of the shadow registers values must be applied after constant 
  *         alpha reconfiguration.         
  */

void LTDC_LayerAlpha(LTDC_Layer_TypeDef* LTDC_Layerx, uint8_t ConstantAlpha)
{  
 8007bb4:	b480      	push	{r7}
 8007bb6:	b083      	sub	sp, #12
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	6078      	str	r0, [r7, #4]
 8007bbc:	460b      	mov	r3, r1
 8007bbe:	70fb      	strb	r3, [r7, #3]
  /* reconfigure the constant alpha value */      
  LTDC_Layerx->CACR = ConstantAlpha;
 8007bc0:	78fa      	ldrb	r2, [r7, #3]
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	615a      	str	r2, [r3, #20]
}
 8007bc6:	bf00      	nop
 8007bc8:	370c      	adds	r7, #12
 8007bca:	46bd      	mov	sp, r7
 8007bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd0:	4770      	bx	lr

08007bd2 <LTDC_LayerAddress>:
  * @retval Reload of the shadow registers values must be applied after layer 
  *         address reconfiguration.
  */

void LTDC_LayerAddress(LTDC_Layer_TypeDef* LTDC_Layerx, uint32_t Address)
{
 8007bd2:	b480      	push	{r7}
 8007bd4:	b083      	sub	sp, #12
 8007bd6:	af00      	add	r7, sp, #0
 8007bd8:	6078      	str	r0, [r7, #4]
 8007bda:	6039      	str	r1, [r7, #0]
  /* Reconfigures the color frame buffer start address */
  LTDC_Layerx->CFBAR = Address;
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	683a      	ldr	r2, [r7, #0]
 8007be0:	629a      	str	r2, [r3, #40]	; 0x28
}
 8007be2:	bf00      	nop
 8007be4:	370c      	adds	r7, #12
 8007be6:	46bd      	mov	sp, r7
 8007be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bec:	4770      	bx	lr

08007bee <LTDC_LayerSize>:
  * @retval Reload of the shadow registers values must be applied after layer 
  *         size reconfiguration.
  */

void LTDC_LayerSize(LTDC_Layer_TypeDef* LTDC_Layerx, uint32_t Width, uint32_t Height)
{
 8007bee:	b480      	push	{r7}
 8007bf0:	b08b      	sub	sp, #44	; 0x2c
 8007bf2:	af00      	add	r7, sp, #0
 8007bf4:	60f8      	str	r0, [r7, #12]
 8007bf6:	60b9      	str	r1, [r7, #8]
 8007bf8:	607a      	str	r2, [r7, #4]
  uint32_t horizontal_start;
  uint32_t horizontal_stop;
  uint32_t vertical_start;
  uint32_t vertical_stop;  
  
  tempreg = LTDC_Layerx->PFCR;
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	691b      	ldr	r3, [r3, #16]
 8007bfe:	623b      	str	r3, [r7, #32]
  
  if (tempreg == LTDC_Pixelformat_ARGB8888)
 8007c00:	6a3b      	ldr	r3, [r7, #32]
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d103      	bne.n	8007c0e <LTDC_LayerSize+0x20>
  {
    temp = 4;
 8007c06:	2304      	movs	r3, #4
 8007c08:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007c0c:	e019      	b.n	8007c42 <LTDC_LayerSize+0x54>
  }
  else if (tempreg == LTDC_Pixelformat_RGB888)
 8007c0e:	6a3b      	ldr	r3, [r7, #32]
 8007c10:	2b01      	cmp	r3, #1
 8007c12:	d103      	bne.n	8007c1c <LTDC_LayerSize+0x2e>
  {
    temp = 3;
 8007c14:	2303      	movs	r3, #3
 8007c16:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007c1a:	e012      	b.n	8007c42 <LTDC_LayerSize+0x54>
  }
  else if ((tempreg == LTDC_Pixelformat_ARGB4444) || \
 8007c1c:	6a3b      	ldr	r3, [r7, #32]
 8007c1e:	2b04      	cmp	r3, #4
 8007c20:	d008      	beq.n	8007c34 <LTDC_LayerSize+0x46>
 8007c22:	6a3b      	ldr	r3, [r7, #32]
 8007c24:	2b02      	cmp	r3, #2
 8007c26:	d005      	beq.n	8007c34 <LTDC_LayerSize+0x46>
          (tempreg == LTDC_Pixelformat_RGB565)    || \
 8007c28:	6a3b      	ldr	r3, [r7, #32]
 8007c2a:	2b03      	cmp	r3, #3
 8007c2c:	d002      	beq.n	8007c34 <LTDC_LayerSize+0x46>
          (tempreg == LTDC_Pixelformat_ARGB1555)  || \
 8007c2e:	6a3b      	ldr	r3, [r7, #32]
 8007c30:	2b07      	cmp	r3, #7
 8007c32:	d103      	bne.n	8007c3c <LTDC_LayerSize+0x4e>
          (tempreg == LTDC_Pixelformat_AL88))
  {
    temp = 2;  
 8007c34:	2302      	movs	r3, #2
 8007c36:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007c3a:	e002      	b.n	8007c42 <LTDC_LayerSize+0x54>
  }
  else
  {
    temp = 1;
 8007c3c:	2301      	movs	r3, #1
 8007c3e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* update horizontal and vertical stop */
  tempreg = LTDC_Layerx->WHPCR;
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	685b      	ldr	r3, [r3, #4]
 8007c46:	623b      	str	r3, [r7, #32]
  horizontal_start = (tempreg & 0x1FFF);
 8007c48:	6a3b      	ldr	r3, [r7, #32]
 8007c4a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007c4e:	61fb      	str	r3, [r7, #28]
  horizontal_stop = Width + horizontal_start - 1;  
 8007c50:	68ba      	ldr	r2, [r7, #8]
 8007c52:	69fb      	ldr	r3, [r7, #28]
 8007c54:	4413      	add	r3, r2
 8007c56:	3b01      	subs	r3, #1
 8007c58:	61bb      	str	r3, [r7, #24]

  tempreg = LTDC_Layerx->WVPCR;
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	689b      	ldr	r3, [r3, #8]
 8007c5e:	623b      	str	r3, [r7, #32]
  vertical_start = (tempreg & 0x1FFF);
 8007c60:	6a3b      	ldr	r3, [r7, #32]
 8007c62:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007c66:	617b      	str	r3, [r7, #20]
  vertical_stop = Height + vertical_start - 1;  
 8007c68:	687a      	ldr	r2, [r7, #4]
 8007c6a:	697b      	ldr	r3, [r7, #20]
 8007c6c:	4413      	add	r3, r2
 8007c6e:	3b01      	subs	r3, #1
 8007c70:	613b      	str	r3, [r7, #16]
  
  LTDC_Layerx->WHPCR = horizontal_start | (horizontal_stop << 16);
 8007c72:	69bb      	ldr	r3, [r7, #24]
 8007c74:	041a      	lsls	r2, r3, #16
 8007c76:	69fb      	ldr	r3, [r7, #28]
 8007c78:	431a      	orrs	r2, r3
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	605a      	str	r2, [r3, #4]
  LTDC_Layerx->WVPCR = vertical_start | (vertical_stop << 16);  
 8007c7e:	693b      	ldr	r3, [r7, #16]
 8007c80:	041a      	lsls	r2, r3, #16
 8007c82:	697b      	ldr	r3, [r7, #20]
 8007c84:	431a      	orrs	r2, r3
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	609a      	str	r2, [r3, #8]

  /* Reconfigures the color frame buffer pitch in byte */
  LTDC_Layerx->CFBLR  = ((Width * temp) << 16) | ((Width * temp) + 3);  
 8007c8a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007c8e:	68ba      	ldr	r2, [r7, #8]
 8007c90:	fb02 f303 	mul.w	r3, r2, r3
 8007c94:	041a      	lsls	r2, r3, #16
 8007c96:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007c9a:	68b9      	ldr	r1, [r7, #8]
 8007c9c:	fb01 f303 	mul.w	r3, r1, r3
 8007ca0:	3303      	adds	r3, #3
 8007ca2:	431a      	orrs	r2, r3
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reconfigures the frame buffer line number */
  LTDC_Layerx->CFBLNR  = Height;  
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	687a      	ldr	r2, [r7, #4]
 8007cac:	631a      	str	r2, [r3, #48]	; 0x30
  
}
 8007cae:	bf00      	nop
 8007cb0:	372c      	adds	r7, #44	; 0x2c
 8007cb2:	46bd      	mov	sp, r7
 8007cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb8:	4770      	bx	lr

08007cba <LTDC_LayerPixelFormat>:
  * @retval Reload of the shadow registers values must be applied after layer 
  *         pixel format reconfiguration.
  */

void LTDC_LayerPixelFormat(LTDC_Layer_TypeDef* LTDC_Layerx, uint32_t PixelFormat)
{
 8007cba:	b480      	push	{r7}
 8007cbc:	b085      	sub	sp, #20
 8007cbe:	af00      	add	r7, sp, #0
 8007cc0:	6078      	str	r0, [r7, #4]
 8007cc2:	6039      	str	r1, [r7, #0]

  uint8_t temp;
  uint32_t tempreg;
  
  tempreg = LTDC_Layerx->PFCR;
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	691b      	ldr	r3, [r3, #16]
 8007cc8:	60bb      	str	r3, [r7, #8]
  
  if (tempreg == LTDC_Pixelformat_ARGB8888)
 8007cca:	68bb      	ldr	r3, [r7, #8]
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d102      	bne.n	8007cd6 <LTDC_LayerPixelFormat+0x1c>
  {
    temp = 4;
 8007cd0:	2304      	movs	r3, #4
 8007cd2:	73fb      	strb	r3, [r7, #15]
 8007cd4:	e016      	b.n	8007d04 <LTDC_LayerPixelFormat+0x4a>
  }
  else if (tempreg == LTDC_Pixelformat_RGB888)
 8007cd6:	68bb      	ldr	r3, [r7, #8]
 8007cd8:	2b01      	cmp	r3, #1
 8007cda:	d102      	bne.n	8007ce2 <LTDC_LayerPixelFormat+0x28>
  {
    temp = 3;
 8007cdc:	2303      	movs	r3, #3
 8007cde:	73fb      	strb	r3, [r7, #15]
 8007ce0:	e010      	b.n	8007d04 <LTDC_LayerPixelFormat+0x4a>
  }
  else if ((tempreg == LTDC_Pixelformat_ARGB4444) || \
 8007ce2:	68bb      	ldr	r3, [r7, #8]
 8007ce4:	2b04      	cmp	r3, #4
 8007ce6:	d008      	beq.n	8007cfa <LTDC_LayerPixelFormat+0x40>
 8007ce8:	68bb      	ldr	r3, [r7, #8]
 8007cea:	2b02      	cmp	r3, #2
 8007cec:	d005      	beq.n	8007cfa <LTDC_LayerPixelFormat+0x40>
          (tempreg == LTDC_Pixelformat_RGB565)    || \
 8007cee:	68bb      	ldr	r3, [r7, #8]
 8007cf0:	2b03      	cmp	r3, #3
 8007cf2:	d002      	beq.n	8007cfa <LTDC_LayerPixelFormat+0x40>
          (tempreg == LTDC_Pixelformat_ARGB1555)  || \
 8007cf4:	68bb      	ldr	r3, [r7, #8]
 8007cf6:	2b07      	cmp	r3, #7
 8007cf8:	d102      	bne.n	8007d00 <LTDC_LayerPixelFormat+0x46>
          (tempreg == LTDC_Pixelformat_AL88))  
  {
    temp = 2;  
 8007cfa:	2302      	movs	r3, #2
 8007cfc:	73fb      	strb	r3, [r7, #15]
 8007cfe:	e001      	b.n	8007d04 <LTDC_LayerPixelFormat+0x4a>
  }
  else
  {
    temp = 1;
 8007d00:	2301      	movs	r3, #1
 8007d02:	73fb      	strb	r3, [r7, #15]
  }
  
  tempreg = (LTDC_Layerx->CFBLR >> 16);
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d08:	0c1b      	lsrs	r3, r3, #16
 8007d0a:	60bb      	str	r3, [r7, #8]
  tempreg = (tempreg / temp); 
 8007d0c:	7bfb      	ldrb	r3, [r7, #15]
 8007d0e:	68ba      	ldr	r2, [r7, #8]
 8007d10:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d14:	60bb      	str	r3, [r7, #8]
  
  if (PixelFormat == LTDC_Pixelformat_ARGB8888)
 8007d16:	683b      	ldr	r3, [r7, #0]
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d102      	bne.n	8007d22 <LTDC_LayerPixelFormat+0x68>
  {
    temp = 4;
 8007d1c:	2304      	movs	r3, #4
 8007d1e:	73fb      	strb	r3, [r7, #15]
 8007d20:	e016      	b.n	8007d50 <LTDC_LayerPixelFormat+0x96>
  }
  else if (PixelFormat == LTDC_Pixelformat_RGB888)
 8007d22:	683b      	ldr	r3, [r7, #0]
 8007d24:	2b01      	cmp	r3, #1
 8007d26:	d102      	bne.n	8007d2e <LTDC_LayerPixelFormat+0x74>
  {
    temp = 3;
 8007d28:	2303      	movs	r3, #3
 8007d2a:	73fb      	strb	r3, [r7, #15]
 8007d2c:	e010      	b.n	8007d50 <LTDC_LayerPixelFormat+0x96>
  }
  else if ((PixelFormat == LTDC_Pixelformat_ARGB4444) || \
 8007d2e:	683b      	ldr	r3, [r7, #0]
 8007d30:	2b04      	cmp	r3, #4
 8007d32:	d008      	beq.n	8007d46 <LTDC_LayerPixelFormat+0x8c>
 8007d34:	683b      	ldr	r3, [r7, #0]
 8007d36:	2b02      	cmp	r3, #2
 8007d38:	d005      	beq.n	8007d46 <LTDC_LayerPixelFormat+0x8c>
          (PixelFormat == LTDC_Pixelformat_RGB565)    || \
 8007d3a:	683b      	ldr	r3, [r7, #0]
 8007d3c:	2b03      	cmp	r3, #3
 8007d3e:	d002      	beq.n	8007d46 <LTDC_LayerPixelFormat+0x8c>
          (PixelFormat == LTDC_Pixelformat_ARGB1555)  || \
 8007d40:	683b      	ldr	r3, [r7, #0]
 8007d42:	2b07      	cmp	r3, #7
 8007d44:	d102      	bne.n	8007d4c <LTDC_LayerPixelFormat+0x92>
          (PixelFormat == LTDC_Pixelformat_AL88))
  {
    temp = 2;  
 8007d46:	2302      	movs	r3, #2
 8007d48:	73fb      	strb	r3, [r7, #15]
 8007d4a:	e001      	b.n	8007d50 <LTDC_LayerPixelFormat+0x96>
  }
  else
  {
    temp = 1;
 8007d4c:	2301      	movs	r3, #1
 8007d4e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Reconfigures the color frame buffer pitch in byte */
  LTDC_Layerx->CFBLR  = ((tempreg * temp) << 16) | ((tempreg * temp) + 3);  
 8007d50:	7bfb      	ldrb	r3, [r7, #15]
 8007d52:	68ba      	ldr	r2, [r7, #8]
 8007d54:	fb02 f303 	mul.w	r3, r2, r3
 8007d58:	041a      	lsls	r2, r3, #16
 8007d5a:	7bfb      	ldrb	r3, [r7, #15]
 8007d5c:	68b9      	ldr	r1, [r7, #8]
 8007d5e:	fb01 f303 	mul.w	r3, r1, r3
 8007d62:	3303      	adds	r3, #3
 8007d64:	431a      	orrs	r2, r3
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reconfigures the color frame buffer start address */
  LTDC_Layerx->PFCR = PixelFormat;
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	683a      	ldr	r2, [r7, #0]
 8007d6e:	611a      	str	r2, [r3, #16]
    
}
 8007d70:	bf00      	nop
 8007d72:	3714      	adds	r7, #20
 8007d74:	46bd      	mov	sp, r7
 8007d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7a:	4770      	bx	lr

08007d7c <LTDC_ITConfig>:
  * @param NewState: new state of the specified LTDC interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void LTDC_ITConfig(uint32_t LTDC_IT, FunctionalState NewState)
{
 8007d7c:	b480      	push	{r7}
 8007d7e:	b083      	sub	sp, #12
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	6078      	str	r0, [r7, #4]
 8007d84:	460b      	mov	r3, r1
 8007d86:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_LTDC_IT(LTDC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8007d88:	78fb      	ldrb	r3, [r7, #3]
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d006      	beq.n	8007d9c <LTDC_ITConfig+0x20>
  {
    LTDC->IER |= LTDC_IT;
 8007d8e:	4b0a      	ldr	r3, [pc, #40]	; (8007db8 <LTDC_ITConfig+0x3c>)
 8007d90:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007d92:	4909      	ldr	r1, [pc, #36]	; (8007db8 <LTDC_ITConfig+0x3c>)
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	4313      	orrs	r3, r2
 8007d98:	634b      	str	r3, [r1, #52]	; 0x34
  }
  else
  {
    LTDC->IER &= (uint32_t)~LTDC_IT;
  }
}
 8007d9a:	e006      	b.n	8007daa <LTDC_ITConfig+0x2e>
    LTDC->IER &= (uint32_t)~LTDC_IT;
 8007d9c:	4b06      	ldr	r3, [pc, #24]	; (8007db8 <LTDC_ITConfig+0x3c>)
 8007d9e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	43db      	mvns	r3, r3
 8007da4:	4904      	ldr	r1, [pc, #16]	; (8007db8 <LTDC_ITConfig+0x3c>)
 8007da6:	4013      	ands	r3, r2
 8007da8:	634b      	str	r3, [r1, #52]	; 0x34
}
 8007daa:	bf00      	nop
 8007dac:	370c      	adds	r7, #12
 8007dae:	46bd      	mov	sp, r7
 8007db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db4:	4770      	bx	lr
 8007db6:	bf00      	nop
 8007db8:	40016800 	.word	0x40016800

08007dbc <LTDC_GetFlagStatus>:
  *     @arg LTDC_FLAG_TERR: Transfer Error Interrupt flag.
  *     @arg LTDC_FLAG_RR:   Register Reload interrupt flag.
  * @retval The new state of LTDC_FLAG (SET or RESET).
  */
FlagStatus LTDC_GetFlagStatus(uint32_t LTDC_FLAG)
{
 8007dbc:	b480      	push	{r7}
 8007dbe:	b085      	sub	sp, #20
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 8007dc4:	2300      	movs	r3, #0
 8007dc6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_LTDC_FLAG(LTDC_FLAG));

  if ((LTDC->ISR & LTDC_FLAG) != (uint32_t)RESET)
 8007dc8:	4b08      	ldr	r3, [pc, #32]	; (8007dec <LTDC_GetFlagStatus+0x30>)
 8007dca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	4013      	ands	r3, r2
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d002      	beq.n	8007dda <LTDC_GetFlagStatus+0x1e>
  {
    bitstatus = SET;
 8007dd4:	2301      	movs	r3, #1
 8007dd6:	73fb      	strb	r3, [r7, #15]
 8007dd8:	e001      	b.n	8007dde <LTDC_GetFlagStatus+0x22>
  }
  else
  {
    bitstatus = RESET;
 8007dda:	2300      	movs	r3, #0
 8007ddc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007dde:	7bfb      	ldrb	r3, [r7, #15]
}
 8007de0:	4618      	mov	r0, r3
 8007de2:	3714      	adds	r7, #20
 8007de4:	46bd      	mov	sp, r7
 8007de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dea:	4770      	bx	lr
 8007dec:	40016800 	.word	0x40016800

08007df0 <LTDC_ClearFlag>:
  *     @arg LTDC_FLAG_TERR: Transfer Error Interrupt flag.
  *     @arg LTDC_FLAG_RR:   Register Reload interrupt flag.  
  * @retval None
  */
void LTDC_ClearFlag(uint32_t LTDC_FLAG)
{
 8007df0:	b480      	push	{r7}
 8007df2:	b083      	sub	sp, #12
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_LTDC_FLAG(LTDC_FLAG));

  /* Clear the corresponding LTDC flag */
  LTDC->ICR = (uint32_t)LTDC_FLAG;
 8007df8:	4a04      	ldr	r2, [pc, #16]	; (8007e0c <LTDC_ClearFlag+0x1c>)
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8007dfe:	bf00      	nop
 8007e00:	370c      	adds	r7, #12
 8007e02:	46bd      	mov	sp, r7
 8007e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e08:	4770      	bx	lr
 8007e0a:	bf00      	nop
 8007e0c:	40016800 	.word	0x40016800

08007e10 <LTDC_GetITStatus>:
  *     @arg LTDC_IT_TERR: Transfer Error Interrupt Enable.
  *     @arg LTDC_IT_RR:   Register Reload interrupt Enable.
  * @retval The new state of the LTDC_IT (SET or RESET).
  */
ITStatus LTDC_GetITStatus(uint32_t LTDC_IT)
{
 8007e10:	b480      	push	{r7}
 8007e12:	b085      	sub	sp, #20
 8007e14:	af00      	add	r7, sp, #0
 8007e16:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
 8007e18:	2300      	movs	r3, #0
 8007e1a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_LTDC_IT(LTDC_IT));

  if ((LTDC->ISR & LTDC_IT) != (uint32_t)RESET)
 8007e1c:	4b0f      	ldr	r3, [pc, #60]	; (8007e5c <LTDC_GetITStatus+0x4c>)
 8007e1e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	4013      	ands	r3, r2
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d002      	beq.n	8007e2e <LTDC_GetITStatus+0x1e>
  {
    bitstatus = SET;
 8007e28:	2301      	movs	r3, #1
 8007e2a:	73fb      	strb	r3, [r7, #15]
 8007e2c:	e001      	b.n	8007e32 <LTDC_GetITStatus+0x22>
  }
  else
  {
    bitstatus = RESET;
 8007e2e:	2300      	movs	r3, #0
 8007e30:	73fb      	strb	r3, [r7, #15]
  }

  if (((LTDC->IER & LTDC_IT) != (uint32_t)RESET) && (bitstatus != (uint32_t)RESET))
 8007e32:	4b0a      	ldr	r3, [pc, #40]	; (8007e5c <LTDC_GetITStatus+0x4c>)
 8007e34:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	4013      	ands	r3, r2
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d005      	beq.n	8007e4a <LTDC_GetITStatus+0x3a>
 8007e3e:	7bfb      	ldrb	r3, [r7, #15]
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d002      	beq.n	8007e4a <LTDC_GetITStatus+0x3a>
  {
    bitstatus = SET;
 8007e44:	2301      	movs	r3, #1
 8007e46:	73fb      	strb	r3, [r7, #15]
 8007e48:	e001      	b.n	8007e4e <LTDC_GetITStatus+0x3e>
  }
  else
  {
    bitstatus = RESET;
 8007e4a:	2300      	movs	r3, #0
 8007e4c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007e4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e50:	4618      	mov	r0, r3
 8007e52:	3714      	adds	r7, #20
 8007e54:	46bd      	mov	sp, r7
 8007e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e5a:	4770      	bx	lr
 8007e5c:	40016800 	.word	0x40016800

08007e60 <LTDC_ClearITPendingBit>:
  *     @arg LTDC_IT_TERRIE: Transfer Error Interrupt.
  *     @arg LTDC_IT_RRIE:   Register Reload interrupt.
  * @retval None
  */
void LTDC_ClearITPendingBit(uint32_t LTDC_IT)
{
 8007e60:	b480      	push	{r7}
 8007e62:	b083      	sub	sp, #12
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_LTDC_IT(LTDC_IT));

  /* Clear the corresponding LTDC Interrupt */
  LTDC->ICR = (uint32_t)LTDC_IT;
 8007e68:	4a04      	ldr	r2, [pc, #16]	; (8007e7c <LTDC_ClearITPendingBit+0x1c>)
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8007e6e:	bf00      	nop
 8007e70:	370c      	adds	r7, #12
 8007e72:	46bd      	mov	sp, r7
 8007e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e78:	4770      	bx	lr
 8007e7a:	bf00      	nop
 8007e7c:	40016800 	.word	0x40016800

08007e80 <PWR_DeInit>:
  * @brief  Deinitializes the PWR peripheral registers to their default reset values.     
  * @param  None
  * @retval None
  */
void PWR_DeInit(void)
{
 8007e80:	b580      	push	{r7, lr}
 8007e82:	af00      	add	r7, sp, #0
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_PWR, ENABLE);
 8007e84:	2101      	movs	r1, #1
 8007e86:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8007e8a:	f000 fe65 	bl	8008b58 <RCC_APB1PeriphResetCmd>
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_PWR, DISABLE);
 8007e8e:	2100      	movs	r1, #0
 8007e90:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8007e94:	f000 fe60 	bl	8008b58 <RCC_APB1PeriphResetCmd>
}
 8007e98:	bf00      	nop
 8007e9a:	bd80      	pop	{r7, pc}

08007e9c <PWR_BackupAccessCmd>:
  * @param  NewState: new state of the access to the backup domain.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void PWR_BackupAccessCmd(FunctionalState NewState)
{
 8007e9c:	b480      	push	{r7}
 8007e9e:	b083      	sub	sp, #12
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	4603      	mov	r3, r0
 8007ea4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)NewState;
 8007ea6:	4a04      	ldr	r2, [pc, #16]	; (8007eb8 <PWR_BackupAccessCmd+0x1c>)
 8007ea8:	79fb      	ldrb	r3, [r7, #7]
 8007eaa:	6013      	str	r3, [r2, #0]
}
 8007eac:	bf00      	nop
 8007eae:	370c      	adds	r7, #12
 8007eb0:	46bd      	mov	sp, r7
 8007eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb6:	4770      	bx	lr
 8007eb8:	420e0020 	.word	0x420e0020

08007ebc <PWR_PVDLevelConfig>:
  *         more details about the voltage threshold corresponding to each 
  *         detection level.
  * @retval None
  */
void PWR_PVDLevelConfig(uint32_t PWR_PVDLevel)
{
 8007ebc:	b480      	push	{r7}
 8007ebe:	b085      	sub	sp, #20
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8007ec4:	2300      	movs	r3, #0
 8007ec6:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_PWR_PVD_LEVEL(PWR_PVDLevel));
  
  tmpreg = PWR->CR;
 8007ec8:	4b09      	ldr	r3, [pc, #36]	; (8007ef0 <PWR_PVDLevelConfig+0x34>)
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	60fb      	str	r3, [r7, #12]
  
  /* Clear PLS[7:5] bits */
  tmpreg &= CR_PLS_MASK;
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8007ed4:	60fb      	str	r3, [r7, #12]
  
  /* Set PLS[7:5] bits according to PWR_PVDLevel value */
  tmpreg |= PWR_PVDLevel;
 8007ed6:	68fa      	ldr	r2, [r7, #12]
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	4313      	orrs	r3, r2
 8007edc:	60fb      	str	r3, [r7, #12]
  
  /* Store the new value */
  PWR->CR = tmpreg;
 8007ede:	4a04      	ldr	r2, [pc, #16]	; (8007ef0 <PWR_PVDLevelConfig+0x34>)
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	6013      	str	r3, [r2, #0]
}
 8007ee4:	bf00      	nop
 8007ee6:	3714      	adds	r7, #20
 8007ee8:	46bd      	mov	sp, r7
 8007eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eee:	4770      	bx	lr
 8007ef0:	40007000 	.word	0x40007000

08007ef4 <PWR_PVDCmd>:
  * @param  NewState: new state of the PVD.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void PWR_PVDCmd(FunctionalState NewState)
{
 8007ef4:	b480      	push	{r7}
 8007ef6:	b083      	sub	sp, #12
 8007ef8:	af00      	add	r7, sp, #0
 8007efa:	4603      	mov	r3, r0
 8007efc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) CR_PVDE_BB = (uint32_t)NewState;
 8007efe:	4a04      	ldr	r2, [pc, #16]	; (8007f10 <PWR_PVDCmd+0x1c>)
 8007f00:	79fb      	ldrb	r3, [r7, #7]
 8007f02:	6013      	str	r3, [r2, #0]
}
 8007f04:	bf00      	nop
 8007f06:	370c      	adds	r7, #12
 8007f08:	46bd      	mov	sp, r7
 8007f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f0e:	4770      	bx	lr
 8007f10:	420e0010 	.word	0x420e0010

08007f14 <PWR_WakeUpPinCmd>:
  * @param  NewState: new state of the WakeUp Pin functionality.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void PWR_WakeUpPinCmd(FunctionalState NewState)
{
 8007f14:	b480      	push	{r7}
 8007f16:	b083      	sub	sp, #12
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	4603      	mov	r3, r0
 8007f1c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CSR_EWUP_BB = (uint32_t)NewState;
 8007f1e:	4a04      	ldr	r2, [pc, #16]	; (8007f30 <PWR_WakeUpPinCmd+0x1c>)
 8007f20:	79fb      	ldrb	r3, [r7, #7]
 8007f22:	6013      	str	r3, [r2, #0]
}
 8007f24:	bf00      	nop
 8007f26:	370c      	adds	r7, #12
 8007f28:	46bd      	mov	sp, r7
 8007f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f2e:	4770      	bx	lr
 8007f30:	420e00a0 	.word	0x420e00a0

08007f34 <PWR_BackupRegulatorCmd>:
  * @param  NewState: new state of the Backup Regulator.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void PWR_BackupRegulatorCmd(FunctionalState NewState)
{
 8007f34:	b480      	push	{r7}
 8007f36:	b083      	sub	sp, #12
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	4603      	mov	r3, r0
 8007f3c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CSR_BRE_BB = (uint32_t)NewState;
 8007f3e:	4a04      	ldr	r2, [pc, #16]	; (8007f50 <PWR_BackupRegulatorCmd+0x1c>)
 8007f40:	79fb      	ldrb	r3, [r7, #7]
 8007f42:	6013      	str	r3, [r2, #0]
}
 8007f44:	bf00      	nop
 8007f46:	370c      	adds	r7, #12
 8007f48:	46bd      	mov	sp, r7
 8007f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f4e:	4770      	bx	lr
 8007f50:	420e00a4 	.word	0x420e00a4

08007f54 <PWR_MainRegulatorModeConfig>:
  *            @arg PWR_Regulator_Voltage_Scale3: Regulator voltage output Scale 3 mode, 
  *                                                System frequency up to 120 MHz (only for STM32F42xxx/43xxx devices)
  * @retval None
  */
void PWR_MainRegulatorModeConfig(uint32_t PWR_Regulator_Voltage)
{
 8007f54:	b480      	push	{r7}
 8007f56:	b085      	sub	sp, #20
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8007f5c:	2300      	movs	r3, #0
 8007f5e:	60fb      	str	r3, [r7, #12]
	
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR_VOLTAGE(PWR_Regulator_Voltage));

  tmpreg = PWR->CR;
 8007f60:	4b09      	ldr	r3, [pc, #36]	; (8007f88 <PWR_MainRegulatorModeConfig+0x34>)
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	60fb      	str	r3, [r7, #12]
  
  /* Clear VOS[15:14] bits */
  tmpreg &= CR_VOS_MASK;
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8007f6c:	60fb      	str	r3, [r7, #12]
  
  /* Set VOS[15:14] bits according to PWR_Regulator_Voltage value */
  tmpreg |= PWR_Regulator_Voltage;
 8007f6e:	68fa      	ldr	r2, [r7, #12]
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	4313      	orrs	r3, r2
 8007f74:	60fb      	str	r3, [r7, #12]
  
  /* Store the new value */
  PWR->CR = tmpreg;
 8007f76:	4a04      	ldr	r2, [pc, #16]	; (8007f88 <PWR_MainRegulatorModeConfig+0x34>)
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	6013      	str	r3, [r2, #0]
}
 8007f7c:	bf00      	nop
 8007f7e:	3714      	adds	r7, #20
 8007f80:	46bd      	mov	sp, r7
 8007f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f86:	4770      	bx	lr
 8007f88:	40007000 	.word	0x40007000

08007f8c <PWR_OverDriveCmd>:
  * @param  NewState: new state of the Over Drive mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void PWR_OverDriveCmd(FunctionalState NewState)
{
 8007f8c:	b480      	push	{r7}
 8007f8e:	b083      	sub	sp, #12
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	4603      	mov	r3, r0
 8007f94:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  /* Set/Reset the ODEN bit to enable/disable the Over Drive mode */
  *(__IO uint32_t *) CR_ODEN_BB = (uint32_t)NewState;
 8007f96:	4a04      	ldr	r2, [pc, #16]	; (8007fa8 <PWR_OverDriveCmd+0x1c>)
 8007f98:	79fb      	ldrb	r3, [r7, #7]
 8007f9a:	6013      	str	r3, [r2, #0]
}
 8007f9c:	bf00      	nop
 8007f9e:	370c      	adds	r7, #12
 8007fa0:	46bd      	mov	sp, r7
 8007fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa6:	4770      	bx	lr
 8007fa8:	420e0040 	.word	0x420e0040

08007fac <PWR_OverDriveSWCmd>:
  * @param  NewState: new state of the Over Drive switching mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void PWR_OverDriveSWCmd(FunctionalState NewState)
{
 8007fac:	b480      	push	{r7}
 8007fae:	b083      	sub	sp, #12
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	4603      	mov	r3, r0
 8007fb4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Set/Reset the ODSWEN bit to enable/disable the Over Drive switching mode */
  *(__IO uint32_t *) CR_ODSWEN_BB = (uint32_t)NewState;
 8007fb6:	4a04      	ldr	r2, [pc, #16]	; (8007fc8 <PWR_OverDriveSWCmd+0x1c>)
 8007fb8:	79fb      	ldrb	r3, [r7, #7]
 8007fba:	6013      	str	r3, [r2, #0]
}
 8007fbc:	bf00      	nop
 8007fbe:	370c      	adds	r7, #12
 8007fc0:	46bd      	mov	sp, r7
 8007fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc6:	4770      	bx	lr
 8007fc8:	420e0044 	.word	0x420e0044

08007fcc <PWR_UnderDriveCmd>:
  * @param  NewState: new state of the Under Drive mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void PWR_UnderDriveCmd(FunctionalState NewState)
{
 8007fcc:	b480      	push	{r7}
 8007fce:	b083      	sub	sp, #12
 8007fd0:	af00      	add	r7, sp, #0
 8007fd2:	4603      	mov	r3, r0
 8007fd4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8007fd6:	79fb      	ldrb	r3, [r7, #7]
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d006      	beq.n	8007fea <PWR_UnderDriveCmd+0x1e>
  {
    /* Set the UDEN[1:0] bits to enable the Under Drive mode */
    PWR->CR |= (uint32_t)PWR_CR_UDEN;
 8007fdc:	4b09      	ldr	r3, [pc, #36]	; (8008004 <PWR_UnderDriveCmd+0x38>)
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	4a08      	ldr	r2, [pc, #32]	; (8008004 <PWR_UnderDriveCmd+0x38>)
 8007fe2:	f443 2340 	orr.w	r3, r3, #786432	; 0xc0000
 8007fe6:	6013      	str	r3, [r2, #0]
  else
  {
    /* Reset the UDEN[1:0] bits to disable the Under Drive mode */
    PWR->CR &= (uint32_t)(~PWR_CR_UDEN);
  }
}
 8007fe8:	e005      	b.n	8007ff6 <PWR_UnderDriveCmd+0x2a>
    PWR->CR &= (uint32_t)(~PWR_CR_UDEN);
 8007fea:	4b06      	ldr	r3, [pc, #24]	; (8008004 <PWR_UnderDriveCmd+0x38>)
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	4a05      	ldr	r2, [pc, #20]	; (8008004 <PWR_UnderDriveCmd+0x38>)
 8007ff0:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8007ff4:	6013      	str	r3, [r2, #0]
}
 8007ff6:	bf00      	nop
 8007ff8:	370c      	adds	r7, #12
 8007ffa:	46bd      	mov	sp, r7
 8007ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008000:	4770      	bx	lr
 8008002:	bf00      	nop
 8008004:	40007000 	.word	0x40007000

08008008 <PWR_FlashPowerDownCmd>:
  * @param  NewState: new state of the Flash power mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void PWR_FlashPowerDownCmd(FunctionalState NewState)
{
 8008008:	b480      	push	{r7}
 800800a:	b083      	sub	sp, #12
 800800c:	af00      	add	r7, sp, #0
 800800e:	4603      	mov	r3, r0
 8008010:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_FPDS_BB = (uint32_t)NewState;
 8008012:	4a04      	ldr	r2, [pc, #16]	; (8008024 <PWR_FlashPowerDownCmd+0x1c>)
 8008014:	79fb      	ldrb	r3, [r7, #7]
 8008016:	6013      	str	r3, [r2, #0]
}
 8008018:	bf00      	nop
 800801a:	370c      	adds	r7, #12
 800801c:	46bd      	mov	sp, r7
 800801e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008022:	4770      	bx	lr
 8008024:	420e0024 	.word	0x420e0024

08008028 <PWR_EnterSTOPMode>:
  *            @arg PWR_STOPEntry_WFI: enter STOP mode with WFI instruction
  *            @arg PWR_STOPEntry_WFE: enter STOP mode with WFE instruction
  * @retval None
  */
void PWR_EnterSTOPMode(uint32_t PWR_Regulator, uint8_t PWR_STOPEntry)
{
 8008028:	b480      	push	{r7}
 800802a:	b085      	sub	sp, #20
 800802c:	af00      	add	r7, sp, #0
 800802e:	6078      	str	r0, [r7, #4]
 8008030:	460b      	mov	r3, r1
 8008032:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpreg = 0;
 8008034:	2300      	movs	r3, #0
 8008036:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(PWR_Regulator));
  assert_param(IS_PWR_STOP_ENTRY(PWR_STOPEntry));
  
  /* Select the regulator state in STOP mode ---------------------------------*/
  tmpreg = PWR->CR;
 8008038:	4b13      	ldr	r3, [pc, #76]	; (8008088 <PWR_EnterSTOPMode+0x60>)
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	60fb      	str	r3, [r7, #12]
  /* Clear PDDS and LPDS bits */
  tmpreg &= CR_DS_MASK;
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8008044:	f023 0303 	bic.w	r3, r3, #3
 8008048:	60fb      	str	r3, [r7, #12]
  
  /* Set LPDS, MRLVDS and LPLVDS bits according to PWR_Regulator value */
  tmpreg |= PWR_Regulator;
 800804a:	68fa      	ldr	r2, [r7, #12]
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	4313      	orrs	r3, r2
 8008050:	60fb      	str	r3, [r7, #12]
  
  /* Store the new value */
  PWR->CR = tmpreg;
 8008052:	4a0d      	ldr	r2, [pc, #52]	; (8008088 <PWR_EnterSTOPMode+0x60>)
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	6013      	str	r3, [r2, #0]
  
  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
 8008058:	4b0c      	ldr	r3, [pc, #48]	; (800808c <PWR_EnterSTOPMode+0x64>)
 800805a:	691b      	ldr	r3, [r3, #16]
 800805c:	4a0b      	ldr	r2, [pc, #44]	; (800808c <PWR_EnterSTOPMode+0x64>)
 800805e:	f043 0304 	orr.w	r3, r3, #4
 8008062:	6113      	str	r3, [r2, #16]
  
  /* Select STOP mode entry --------------------------------------------------*/
  if(PWR_STOPEntry == PWR_STOPEntry_WFI)
 8008064:	78fb      	ldrb	r3, [r7, #3]
 8008066:	2b01      	cmp	r3, #1
 8008068:	d101      	bne.n	800806e <PWR_EnterSTOPMode+0x46>
  {   
    /* Request Wait For Interrupt */
    __WFI();
 800806a:	bf30      	wfi
 800806c:	e000      	b.n	8008070 <PWR_EnterSTOPMode+0x48>
  }
  else
  {
    /* Request Wait For Event */
    __WFE();
 800806e:	bf20      	wfe
  }
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  SCB->SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP_Msk);  
 8008070:	4b06      	ldr	r3, [pc, #24]	; (800808c <PWR_EnterSTOPMode+0x64>)
 8008072:	691b      	ldr	r3, [r3, #16]
 8008074:	4a05      	ldr	r2, [pc, #20]	; (800808c <PWR_EnterSTOPMode+0x64>)
 8008076:	f023 0304 	bic.w	r3, r3, #4
 800807a:	6113      	str	r3, [r2, #16]
}
 800807c:	bf00      	nop
 800807e:	3714      	adds	r7, #20
 8008080:	46bd      	mov	sp, r7
 8008082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008086:	4770      	bx	lr
 8008088:	40007000 	.word	0x40007000
 800808c:	e000ed00 	.word	0xe000ed00

08008090 <PWR_EnterUnderDriveSTOPMode>:
  *            @arg PWR_STOPEntry_WFI: enter STOP mode with WFI instruction
  *            @arg PWR_STOPEntry_WFE: enter STOP mode with WFE instruction
  * @retval None
  */
void PWR_EnterUnderDriveSTOPMode(uint32_t PWR_Regulator, uint8_t PWR_STOPEntry)
{
 8008090:	b480      	push	{r7}
 8008092:	b085      	sub	sp, #20
 8008094:	af00      	add	r7, sp, #0
 8008096:	6078      	str	r0, [r7, #4]
 8008098:	460b      	mov	r3, r1
 800809a:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpreg = 0;
 800809c:	2300      	movs	r3, #0
 800809e:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR_UNDERDRIVE(PWR_Regulator));
  assert_param(IS_PWR_STOP_ENTRY(PWR_STOPEntry));
  
  /* Select the regulator state in STOP mode ---------------------------------*/
  tmpreg = PWR->CR;
 80080a0:	4b13      	ldr	r3, [pc, #76]	; (80080f0 <PWR_EnterUnderDriveSTOPMode+0x60>)
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	60fb      	str	r3, [r7, #12]
  /* Clear PDDS and LPDS bits */
  tmpreg &= CR_DS_MASK;
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80080ac:	f023 0303 	bic.w	r3, r3, #3
 80080b0:	60fb      	str	r3, [r7, #12]
  
  /* Set LPDS, MRLUDS and LPLUDS bits according to PWR_Regulator value */
  tmpreg |= PWR_Regulator;
 80080b2:	68fa      	ldr	r2, [r7, #12]
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	4313      	orrs	r3, r2
 80080b8:	60fb      	str	r3, [r7, #12]
  
  /* Store the new value */
  PWR->CR = tmpreg;
 80080ba:	4a0d      	ldr	r2, [pc, #52]	; (80080f0 <PWR_EnterUnderDriveSTOPMode+0x60>)
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	6013      	str	r3, [r2, #0]
  
  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
 80080c0:	4b0c      	ldr	r3, [pc, #48]	; (80080f4 <PWR_EnterUnderDriveSTOPMode+0x64>)
 80080c2:	691b      	ldr	r3, [r3, #16]
 80080c4:	4a0b      	ldr	r2, [pc, #44]	; (80080f4 <PWR_EnterUnderDriveSTOPMode+0x64>)
 80080c6:	f043 0304 	orr.w	r3, r3, #4
 80080ca:	6113      	str	r3, [r2, #16]
  
  /* Select STOP mode entry --------------------------------------------------*/
  if(PWR_STOPEntry == PWR_STOPEntry_WFI)
 80080cc:	78fb      	ldrb	r3, [r7, #3]
 80080ce:	2b01      	cmp	r3, #1
 80080d0:	d101      	bne.n	80080d6 <PWR_EnterUnderDriveSTOPMode+0x46>
  {   
    /* Request Wait For Interrupt */
    __WFI();
 80080d2:	bf30      	wfi
 80080d4:	e000      	b.n	80080d8 <PWR_EnterUnderDriveSTOPMode+0x48>
  }
  else
  {
    /* Request Wait For Event */
    __WFE();
 80080d6:	bf20      	wfe
  }
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  SCB->SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP_Msk);  
 80080d8:	4b06      	ldr	r3, [pc, #24]	; (80080f4 <PWR_EnterUnderDriveSTOPMode+0x64>)
 80080da:	691b      	ldr	r3, [r3, #16]
 80080dc:	4a05      	ldr	r2, [pc, #20]	; (80080f4 <PWR_EnterUnderDriveSTOPMode+0x64>)
 80080de:	f023 0304 	bic.w	r3, r3, #4
 80080e2:	6113      	str	r3, [r2, #16]
}
 80080e4:	bf00      	nop
 80080e6:	3714      	adds	r7, #20
 80080e8:	46bd      	mov	sp, r7
 80080ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ee:	4770      	bx	lr
 80080f0:	40007000 	.word	0x40007000
 80080f4:	e000ed00 	.word	0xe000ed00

080080f8 <PWR_EnterSTANDBYMode>:
  *          - WKUP pin 1 (PA0) if enabled.       
  * @param  None
  * @retval None
  */
void PWR_EnterSTANDBYMode(void)
{
 80080f8:	b480      	push	{r7}
 80080fa:	af00      	add	r7, sp, #0
  /* Clear Wakeup flag */
  PWR->CR |= PWR_CR_CWUF;
 80080fc:	4b0b      	ldr	r3, [pc, #44]	; (800812c <PWR_EnterSTANDBYMode+0x34>)
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	4a0a      	ldr	r2, [pc, #40]	; (800812c <PWR_EnterSTANDBYMode+0x34>)
 8008102:	f043 0304 	orr.w	r3, r3, #4
 8008106:	6013      	str	r3, [r2, #0]
  
  /* Select STANDBY mode */
  PWR->CR |= PWR_CR_PDDS;
 8008108:	4b08      	ldr	r3, [pc, #32]	; (800812c <PWR_EnterSTANDBYMode+0x34>)
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	4a07      	ldr	r2, [pc, #28]	; (800812c <PWR_EnterSTANDBYMode+0x34>)
 800810e:	f043 0302 	orr.w	r3, r3, #2
 8008112:	6013      	str	r3, [r2, #0]
  
  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
 8008114:	4b06      	ldr	r3, [pc, #24]	; (8008130 <PWR_EnterSTANDBYMode+0x38>)
 8008116:	691b      	ldr	r3, [r3, #16]
 8008118:	4a05      	ldr	r2, [pc, #20]	; (8008130 <PWR_EnterSTANDBYMode+0x38>)
 800811a:	f043 0304 	orr.w	r3, r3, #4
 800811e:	6113      	str	r3, [r2, #16]
/* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM   )
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 8008120:	bf30      	wfi
}
 8008122:	bf00      	nop
 8008124:	46bd      	mov	sp, r7
 8008126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800812a:	4770      	bx	lr
 800812c:	40007000 	.word	0x40007000
 8008130:	e000ed00 	.word	0xe000ed00

08008134 <PWR_GetFlagStatus>:
  *            @arg PWR_FLAG_UDRDY: This flag indicates that the Under-drive mode
  *                 is enabled in Stop mode (STM32F42xxx/43xxx devices)
  * @retval The new state of PWR_FLAG (SET or RESET).
  */
FlagStatus PWR_GetFlagStatus(uint32_t PWR_FLAG)
{
 8008134:	b480      	push	{r7}
 8008136:	b085      	sub	sp, #20
 8008138:	af00      	add	r7, sp, #0
 800813a:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 800813c:	2300      	movs	r3, #0
 800813e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_PWR_GET_FLAG(PWR_FLAG));
  
  if ((PWR->CSR & PWR_FLAG) != (uint32_t)RESET)
 8008140:	4b08      	ldr	r3, [pc, #32]	; (8008164 <PWR_GetFlagStatus+0x30>)
 8008142:	685a      	ldr	r2, [r3, #4]
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	4013      	ands	r3, r2
 8008148:	2b00      	cmp	r3, #0
 800814a:	d002      	beq.n	8008152 <PWR_GetFlagStatus+0x1e>
  {
    bitstatus = SET;
 800814c:	2301      	movs	r3, #1
 800814e:	73fb      	strb	r3, [r7, #15]
 8008150:	e001      	b.n	8008156 <PWR_GetFlagStatus+0x22>
  }
  else
  {
    bitstatus = RESET;
 8008152:	2300      	movs	r3, #0
 8008154:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the flag status */
  return bitstatus;
 8008156:	7bfb      	ldrb	r3, [r7, #15]
}
 8008158:	4618      	mov	r0, r3
 800815a:	3714      	adds	r7, #20
 800815c:	46bd      	mov	sp, r7
 800815e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008162:	4770      	bx	lr
 8008164:	40007000 	.word	0x40007000

08008168 <PWR_ClearFlag>:
  *            @arg PWR_FLAG_SB: StandBy flag
  *            @arg PWR_FLAG_UDRDY: Under-drive ready flag (STM32F42xxx/43xxx devices)
  * @retval None
  */
void PWR_ClearFlag(uint32_t PWR_FLAG)
{
 8008168:	b480      	push	{r7}
 800816a:	b083      	sub	sp, #12
 800816c:	af00      	add	r7, sp, #0
 800816e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_CLEAR_FLAG(PWR_FLAG));
  
#if defined (STM32F427_437xx) || defined (STM32F429_439xx)
  if (PWR_FLAG != PWR_FLAG_UDRDY)
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8008176:	d007      	beq.n	8008188 <PWR_ClearFlag+0x20>
  {
    PWR->CR |=  PWR_FLAG << 2;
 8008178:	4b09      	ldr	r3, [pc, #36]	; (80081a0 <PWR_ClearFlag+0x38>)
 800817a:	681a      	ldr	r2, [r3, #0]
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	009b      	lsls	r3, r3, #2
 8008180:	4907      	ldr	r1, [pc, #28]	; (80081a0 <PWR_ClearFlag+0x38>)
 8008182:	4313      	orrs	r3, r2
 8008184:	600b      	str	r3, [r1, #0]
#endif /* STM32F427_437xx ||  STM32F429_439xx */

#if defined (STM32F40_41xxx) || defined (STM32F401xx) 
  PWR->CR |=  PWR_FLAG << 2;
#endif /* STM32F40_41xxx */
}
 8008186:	e005      	b.n	8008194 <PWR_ClearFlag+0x2c>
    PWR->CSR |= PWR_FLAG_UDRDY;
 8008188:	4b05      	ldr	r3, [pc, #20]	; (80081a0 <PWR_ClearFlag+0x38>)
 800818a:	685b      	ldr	r3, [r3, #4]
 800818c:	4a04      	ldr	r2, [pc, #16]	; (80081a0 <PWR_ClearFlag+0x38>)
 800818e:	f443 2340 	orr.w	r3, r3, #786432	; 0xc0000
 8008192:	6053      	str	r3, [r2, #4]
}
 8008194:	bf00      	nop
 8008196:	370c      	adds	r7, #12
 8008198:	46bd      	mov	sp, r7
 800819a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800819e:	4770      	bx	lr
 80081a0:	40007000 	.word	0x40007000

080081a4 <RCC_DeInit>:
  *            - LSI, LSE and RTC clocks 
  * @param  None
  * @retval None
  */
void RCC_DeInit(void)
{
 80081a4:	b480      	push	{r7}
 80081a6:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80081a8:	4b16      	ldr	r3, [pc, #88]	; (8008204 <RCC_DeInit+0x60>)
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	4a15      	ldr	r2, [pc, #84]	; (8008204 <RCC_DeInit+0x60>)
 80081ae:	f043 0301 	orr.w	r3, r3, #1
 80081b2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80081b4:	4b13      	ldr	r3, [pc, #76]	; (8008204 <RCC_DeInit+0x60>)
 80081b6:	2200      	movs	r2, #0
 80081b8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON, PLLON, PLLI2S and PLLSAI(STM32F42/43xxx devices) bits */
  RCC->CR &= (uint32_t)0xEAF6FFFF;
 80081ba:	4b12      	ldr	r3, [pc, #72]	; (8008204 <RCC_DeInit+0x60>)
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	4a11      	ldr	r2, [pc, #68]	; (8008204 <RCC_DeInit+0x60>)
 80081c0:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80081c4:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80081c8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80081ca:	4b0e      	ldr	r3, [pc, #56]	; (8008204 <RCC_DeInit+0x60>)
 80081cc:	4a0e      	ldr	r2, [pc, #56]	; (8008208 <RCC_DeInit+0x64>)
 80081ce:	605a      	str	r2, [r3, #4]

  /* Reset PLLI2SCFGR register */
  RCC->PLLI2SCFGR = 0x20003000;
 80081d0:	4b0c      	ldr	r3, [pc, #48]	; (8008204 <RCC_DeInit+0x60>)
 80081d2:	4a0e      	ldr	r2, [pc, #56]	; (800820c <RCC_DeInit+0x68>)
 80081d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset PLLSAICFGR register, only available for STM32F42/43xxx devices */
  RCC->PLLSAICFGR = 0x24003000;
 80081d8:	4b0a      	ldr	r3, [pc, #40]	; (8008204 <RCC_DeInit+0x60>)
 80081da:	4a0d      	ldr	r2, [pc, #52]	; (8008210 <RCC_DeInit+0x6c>)
 80081dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 
  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80081e0:	4b08      	ldr	r3, [pc, #32]	; (8008204 <RCC_DeInit+0x60>)
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	4a07      	ldr	r2, [pc, #28]	; (8008204 <RCC_DeInit+0x60>)
 80081e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80081ea:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80081ec:	4b05      	ldr	r3, [pc, #20]	; (8008204 <RCC_DeInit+0x60>)
 80081ee:	2200      	movs	r2, #0
 80081f0:	60da      	str	r2, [r3, #12]

  /* Disable Timers clock prescalers selection, only available for STM32F42/43xxx devices */
  RCC->DCKCFGR = 0x00000000; 
 80081f2:	4b04      	ldr	r3, [pc, #16]	; (8008204 <RCC_DeInit+0x60>)
 80081f4:	2200      	movs	r2, #0
 80081f6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

}
 80081fa:	bf00      	nop
 80081fc:	46bd      	mov	sp, r7
 80081fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008202:	4770      	bx	lr
 8008204:	40023800 	.word	0x40023800
 8008208:	24003010 	.word	0x24003010
 800820c:	20003000 	.word	0x20003000
 8008210:	24003000 	.word	0x24003000

08008214 <RCC_HSEConfig>:
  *            @arg RCC_HSE_ON: turn ON the HSE oscillator
  *            @arg RCC_HSE_Bypass: HSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_HSEConfig(uint8_t RCC_HSE)
{
 8008214:	b480      	push	{r7}
 8008216:	b083      	sub	sp, #12
 8008218:	af00      	add	r7, sp, #0
 800821a:	4603      	mov	r3, r0
 800821c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));

  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE_OFF;
 800821e:	4b06      	ldr	r3, [pc, #24]	; (8008238 <RCC_HSEConfig+0x24>)
 8008220:	2200      	movs	r2, #0
 8008222:	701a      	strb	r2, [r3, #0]

  /* Set the new HSE configuration -------------------------------------------*/
  *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE;
 8008224:	4a04      	ldr	r2, [pc, #16]	; (8008238 <RCC_HSEConfig+0x24>)
 8008226:	79fb      	ldrb	r3, [r7, #7]
 8008228:	7013      	strb	r3, [r2, #0]
}
 800822a:	bf00      	nop
 800822c:	370c      	adds	r7, #12
 800822e:	46bd      	mov	sp, r7
 8008230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008234:	4770      	bx	lr
 8008236:	bf00      	nop
 8008238:	40023802 	.word	0x40023802

0800823c <RCC_WaitForHSEStartUp>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: HSE oscillator is stable and ready to use
  *          - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
 800823c:	b580      	push	{r7, lr}
 800823e:	b082      	sub	sp, #8
 8008240:	af00      	add	r7, sp, #0
  __IO uint32_t startupcounter = 0;
 8008242:	2300      	movs	r3, #0
 8008244:	603b      	str	r3, [r7, #0]
  ErrorStatus status = ERROR;
 8008246:	2300      	movs	r3, #0
 8008248:	71fb      	strb	r3, [r7, #7]
  FlagStatus hsestatus = RESET;
 800824a:	2300      	movs	r3, #0
 800824c:	71bb      	strb	r3, [r7, #6]
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    hsestatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
 800824e:	2031      	movs	r0, #49	; 0x31
 8008250:	f000 fd88 	bl	8008d64 <RCC_GetFlagStatus>
 8008254:	4603      	mov	r3, r0
 8008256:	71bb      	strb	r3, [r7, #6]
    startupcounter++;
 8008258:	683b      	ldr	r3, [r7, #0]
 800825a:	3301      	adds	r3, #1
 800825c:	603b      	str	r3, [r7, #0]
  } while((startupcounter != HSE_STARTUP_TIMEOUT) && (hsestatus == RESET));
 800825e:	683b      	ldr	r3, [r7, #0]
 8008260:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8008264:	d002      	beq.n	800826c <RCC_WaitForHSEStartUp+0x30>
 8008266:	79bb      	ldrb	r3, [r7, #6]
 8008268:	2b00      	cmp	r3, #0
 800826a:	d0f0      	beq.n	800824e <RCC_WaitForHSEStartUp+0x12>

  if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
 800826c:	2031      	movs	r0, #49	; 0x31
 800826e:	f000 fd79 	bl	8008d64 <RCC_GetFlagStatus>
 8008272:	4603      	mov	r3, r0
 8008274:	2b00      	cmp	r3, #0
 8008276:	d002      	beq.n	800827e <RCC_WaitForHSEStartUp+0x42>
  {
    status = SUCCESS;
 8008278:	2301      	movs	r3, #1
 800827a:	71fb      	strb	r3, [r7, #7]
 800827c:	e001      	b.n	8008282 <RCC_WaitForHSEStartUp+0x46>
  }
  else
  {
    status = ERROR;
 800827e:	2300      	movs	r3, #0
 8008280:	71fb      	strb	r3, [r7, #7]
  }
  return (status);
 8008282:	79fb      	ldrb	r3, [r7, #7]
}
 8008284:	4618      	mov	r0, r3
 8008286:	3708      	adds	r7, #8
 8008288:	46bd      	mov	sp, r7
 800828a:	bd80      	pop	{r7, pc}

0800828c <RCC_AdjustHSICalibrationValue>:
  * @param  HSICalibrationValue: specifies the calibration trimming value.
  *         This parameter must be a number between 0 and 0x1F.
  * @retval None
  */
void RCC_AdjustHSICalibrationValue(uint8_t HSICalibrationValue)
{
 800828c:	b480      	push	{r7}
 800828e:	b085      	sub	sp, #20
 8008290:	af00      	add	r7, sp, #0
 8008292:	4603      	mov	r3, r0
 8008294:	71fb      	strb	r3, [r7, #7]
  uint32_t tmpreg = 0;
 8008296:	2300      	movs	r3, #0
 8008298:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_CALIBRATION_VALUE(HSICalibrationValue));

  tmpreg = RCC->CR;
 800829a:	4b0a      	ldr	r3, [pc, #40]	; (80082c4 <RCC_AdjustHSICalibrationValue+0x38>)
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	60fb      	str	r3, [r7, #12]

  /* Clear HSITRIM[4:0] bits */
  tmpreg &= ~RCC_CR_HSITRIM;
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80082a6:	60fb      	str	r3, [r7, #12]

  /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
  tmpreg |= (uint32_t)HSICalibrationValue << 3;
 80082a8:	79fb      	ldrb	r3, [r7, #7]
 80082aa:	00db      	lsls	r3, r3, #3
 80082ac:	68fa      	ldr	r2, [r7, #12]
 80082ae:	4313      	orrs	r3, r2
 80082b0:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CR = tmpreg;
 80082b2:	4a04      	ldr	r2, [pc, #16]	; (80082c4 <RCC_AdjustHSICalibrationValue+0x38>)
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	6013      	str	r3, [r2, #0]
}
 80082b8:	bf00      	nop
 80082ba:	3714      	adds	r7, #20
 80082bc:	46bd      	mov	sp, r7
 80082be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c2:	4770      	bx	lr
 80082c4:	40023800 	.word	0x40023800

080082c8 <RCC_HSICmd>:
  * @note   When the HSI is stopped, HSIRDY flag goes low after 6 HSI oscillator
  *         clock cycles.  
  * @retval None
  */
void RCC_HSICmd(FunctionalState NewState)
{
 80082c8:	b480      	push	{r7}
 80082ca:	b083      	sub	sp, #12
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	4603      	mov	r3, r0
 80082d0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
 80082d2:	4a04      	ldr	r2, [pc, #16]	; (80082e4 <RCC_HSICmd+0x1c>)
 80082d4:	79fb      	ldrb	r3, [r7, #7]
 80082d6:	6013      	str	r3, [r2, #0]
}
 80082d8:	bf00      	nop
 80082da:	370c      	adds	r7, #12
 80082dc:	46bd      	mov	sp, r7
 80082de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e2:	4770      	bx	lr
 80082e4:	42470000 	.word	0x42470000

080082e8 <RCC_LSEConfig>:
  *            @arg RCC_LSE_ON: turn ON the LSE oscillator
  *            @arg RCC_LSE_Bypass: LSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_LSEConfig(uint8_t RCC_LSE)
{
 80082e8:	b480      	push	{r7}
 80082ea:	b083      	sub	sp, #12
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	4603      	mov	r3, r0
 80082f0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));

  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 80082f2:	4b0d      	ldr	r3, [pc, #52]	; (8008328 <RCC_LSEConfig+0x40>)
 80082f4:	2200      	movs	r2, #0
 80082f6:	701a      	strb	r2, [r3, #0]

  /* Reset LSEBYP bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 80082f8:	4b0b      	ldr	r3, [pc, #44]	; (8008328 <RCC_LSEConfig+0x40>)
 80082fa:	2200      	movs	r2, #0
 80082fc:	701a      	strb	r2, [r3, #0]

  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch (RCC_LSE)
 80082fe:	79fb      	ldrb	r3, [r7, #7]
 8008300:	2b01      	cmp	r3, #1
 8008302:	d002      	beq.n	800830a <RCC_LSEConfig+0x22>
 8008304:	2b04      	cmp	r3, #4
 8008306:	d004      	beq.n	8008312 <RCC_LSEConfig+0x2a>
    case RCC_LSE_Bypass:
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
      break;
    default:
      break;
 8008308:	e007      	b.n	800831a <RCC_LSEConfig+0x32>
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
 800830a:	4b07      	ldr	r3, [pc, #28]	; (8008328 <RCC_LSEConfig+0x40>)
 800830c:	2201      	movs	r2, #1
 800830e:	701a      	strb	r2, [r3, #0]
      break;
 8008310:	e003      	b.n	800831a <RCC_LSEConfig+0x32>
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
 8008312:	4b05      	ldr	r3, [pc, #20]	; (8008328 <RCC_LSEConfig+0x40>)
 8008314:	2205      	movs	r2, #5
 8008316:	701a      	strb	r2, [r3, #0]
      break;
 8008318:	bf00      	nop
  }
}
 800831a:	bf00      	nop
 800831c:	370c      	adds	r7, #12
 800831e:	46bd      	mov	sp, r7
 8008320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008324:	4770      	bx	lr
 8008326:	bf00      	nop
 8008328:	40023870 	.word	0x40023870

0800832c <RCC_LSICmd>:
  * @note   When the LSI is stopped, LSIRDY flag goes low after 6 LSI oscillator
  *         clock cycles. 
  * @retval None
  */
void RCC_LSICmd(FunctionalState NewState)
{
 800832c:	b480      	push	{r7}
 800832e:	b083      	sub	sp, #12
 8008330:	af00      	add	r7, sp, #0
 8008332:	4603      	mov	r3, r0
 8008334:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
 8008336:	4a04      	ldr	r2, [pc, #16]	; (8008348 <RCC_LSICmd+0x1c>)
 8008338:	79fb      	ldrb	r3, [r7, #7]
 800833a:	6013      	str	r3, [r2, #0]
}
 800833c:	bf00      	nop
 800833e:	370c      	adds	r7, #12
 8008340:	46bd      	mov	sp, r7
 8008342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008346:	4770      	bx	lr
 8008348:	42470e80 	.word	0x42470e80

0800834c <RCC_PLLConfig>:
  *         correctly.
  *   
  * @retval None
  */
void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP, uint32_t PLLQ)
{
 800834c:	b480      	push	{r7}
 800834e:	b085      	sub	sp, #20
 8008350:	af00      	add	r7, sp, #0
 8008352:	60f8      	str	r0, [r7, #12]
 8008354:	60b9      	str	r1, [r7, #8]
 8008356:	607a      	str	r2, [r7, #4]
 8008358:	603b      	str	r3, [r7, #0]
  assert_param(IS_RCC_PLLM_VALUE(PLLM));
  assert_param(IS_RCC_PLLN_VALUE(PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLP));
  assert_param(IS_RCC_PLLQ_VALUE(PLLQ));

  RCC->PLLCFGR = PLLM | (PLLN << 6) | (((PLLP >> 1) -1) << 16) | (RCC_PLLSource) |
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	019a      	lsls	r2, r3, #6
 800835e:	68bb      	ldr	r3, [r7, #8]
 8008360:	431a      	orrs	r2, r3
 8008362:	683b      	ldr	r3, [r7, #0]
 8008364:	085b      	lsrs	r3, r3, #1
 8008366:	3b01      	subs	r3, #1
 8008368:	041b      	lsls	r3, r3, #16
 800836a:	431a      	orrs	r2, r3
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	431a      	orrs	r2, r3
                 (PLLQ << 24);
 8008370:	69bb      	ldr	r3, [r7, #24]
 8008372:	061b      	lsls	r3, r3, #24
  RCC->PLLCFGR = PLLM | (PLLN << 6) | (((PLLP >> 1) -1) << 16) | (RCC_PLLSource) |
 8008374:	4904      	ldr	r1, [pc, #16]	; (8008388 <RCC_PLLConfig+0x3c>)
 8008376:	4313      	orrs	r3, r2
 8008378:	604b      	str	r3, [r1, #4]
}
 800837a:	bf00      	nop
 800837c:	3714      	adds	r7, #20
 800837e:	46bd      	mov	sp, r7
 8008380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008384:	4770      	bx	lr
 8008386:	bf00      	nop
 8008388:	40023800 	.word	0x40023800

0800838c <RCC_PLLCmd>:
  * @note   The main PLL is disabled by hardware when entering STOP and STANDBY modes.
  * @param  NewState: new state of the main PLL. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLCmd(FunctionalState NewState)
{
 800838c:	b480      	push	{r7}
 800838e:	b083      	sub	sp, #12
 8008390:	af00      	add	r7, sp, #0
 8008392:	4603      	mov	r3, r0
 8008394:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
 8008396:	4a04      	ldr	r2, [pc, #16]	; (80083a8 <RCC_PLLCmd+0x1c>)
 8008398:	79fb      	ldrb	r3, [r7, #7]
 800839a:	6013      	str	r3, [r2, #0]
}
 800839c:	bf00      	nop
 800839e:	370c      	adds	r7, #12
 80083a0:	46bd      	mov	sp, r7
 80083a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a6:	4770      	bx	lr
 80083a8:	42470060 	.word	0x42470060

080083ac <RCC_PLLI2SConfig>:
  * @note   the PLLI2SR parameter is only available with STM32F42xxx/43xxx devices.  
  *   
  * @retval None
  */
void RCC_PLLI2SConfig(uint32_t PLLI2SN, uint32_t PLLI2SQ, uint32_t PLLI2SR)
{
 80083ac:	b480      	push	{r7}
 80083ae:	b085      	sub	sp, #20
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	60f8      	str	r0, [r7, #12]
 80083b4:	60b9      	str	r1, [r7, #8]
 80083b6:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_PLLI2SN_VALUE(PLLI2SN));
  assert_param(IS_RCC_PLLI2SQ_VALUE(PLLI2SQ));
  assert_param(IS_RCC_PLLI2SR_VALUE(PLLI2SR));

  RCC->PLLI2SCFGR = (PLLI2SN << 6) | (PLLI2SQ << 24) | (PLLI2SR << 28);
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	019a      	lsls	r2, r3, #6
 80083bc:	68bb      	ldr	r3, [r7, #8]
 80083be:	061b      	lsls	r3, r3, #24
 80083c0:	431a      	orrs	r2, r3
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	071b      	lsls	r3, r3, #28
 80083c6:	4905      	ldr	r1, [pc, #20]	; (80083dc <RCC_PLLI2SConfig+0x30>)
 80083c8:	4313      	orrs	r3, r2
 80083ca:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
}
 80083ce:	bf00      	nop
 80083d0:	3714      	adds	r7, #20
 80083d2:	46bd      	mov	sp, r7
 80083d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d8:	4770      	bx	lr
 80083da:	bf00      	nop
 80083dc:	40023800 	.word	0x40023800

080083e0 <RCC_PLLI2SCmd>:
  * @note   The PLLI2S is disabled by hardware when entering STOP and STANDBY modes.  
  * @param  NewState: new state of the PLLI2S. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLI2SCmd(FunctionalState NewState)
{
 80083e0:	b480      	push	{r7}
 80083e2:	b083      	sub	sp, #12
 80083e4:	af00      	add	r7, sp, #0
 80083e6:	4603      	mov	r3, r0
 80083e8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLI2SON_BB = (uint32_t)NewState;
 80083ea:	4a04      	ldr	r2, [pc, #16]	; (80083fc <RCC_PLLI2SCmd+0x1c>)
 80083ec:	79fb      	ldrb	r3, [r7, #7]
 80083ee:	6013      	str	r3, [r2, #0]
}
 80083f0:	bf00      	nop
 80083f2:	370c      	adds	r7, #12
 80083f4:	46bd      	mov	sp, r7
 80083f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083fa:	4770      	bx	lr
 80083fc:	42470068 	.word	0x42470068

08008400 <RCC_PLLSAIConfig>:
  *          This parameter must be a number between 2 and 7.
  *   
  * @retval None
  */
void RCC_PLLSAIConfig(uint32_t PLLSAIN, uint32_t PLLSAIQ, uint32_t PLLSAIR)
{
 8008400:	b480      	push	{r7}
 8008402:	b085      	sub	sp, #20
 8008404:	af00      	add	r7, sp, #0
 8008406:	60f8      	str	r0, [r7, #12]
 8008408:	60b9      	str	r1, [r7, #8]
 800840a:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_PLLSAIN_VALUE(PLLSAIN));
  assert_param(IS_RCC_PLLSAIR_VALUE(PLLSAIR));

  RCC->PLLSAICFGR = (PLLSAIN << 6) | (PLLSAIQ << 24) | (PLLSAIR << 28);
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	019a      	lsls	r2, r3, #6
 8008410:	68bb      	ldr	r3, [r7, #8]
 8008412:	061b      	lsls	r3, r3, #24
 8008414:	431a      	orrs	r2, r3
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	071b      	lsls	r3, r3, #28
 800841a:	4905      	ldr	r1, [pc, #20]	; (8008430 <RCC_PLLSAIConfig+0x30>)
 800841c:	4313      	orrs	r3, r2
 800841e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8008422:	bf00      	nop
 8008424:	3714      	adds	r7, #20
 8008426:	46bd      	mov	sp, r7
 8008428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800842c:	4770      	bx	lr
 800842e:	bf00      	nop
 8008430:	40023800 	.word	0x40023800

08008434 <RCC_PLLSAICmd>:
  * @note   The PLLSAI is disabled by hardware when entering STOP and STANDBY modes.  
  * @param  NewState: new state of the PLLSAI. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLSAICmd(FunctionalState NewState)
{
 8008434:	b480      	push	{r7}
 8008436:	b083      	sub	sp, #12
 8008438:	af00      	add	r7, sp, #0
 800843a:	4603      	mov	r3, r0
 800843c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLSAION_BB = (uint32_t)NewState;
 800843e:	4a04      	ldr	r2, [pc, #16]	; (8008450 <RCC_PLLSAICmd+0x1c>)
 8008440:	79fb      	ldrb	r3, [r7, #7]
 8008442:	6013      	str	r3, [r2, #0]
}
 8008444:	bf00      	nop
 8008446:	370c      	adds	r7, #12
 8008448:	46bd      	mov	sp, r7
 800844a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800844e:	4770      	bx	lr
 8008450:	42470070 	.word	0x42470070

08008454 <RCC_ClockSecuritySystemCmd>:
  * @param  NewState: new state of the Clock Security System.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
{
 8008454:	b480      	push	{r7}
 8008456:	b083      	sub	sp, #12
 8008458:	af00      	add	r7, sp, #0
 800845a:	4603      	mov	r3, r0
 800845c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
 800845e:	4a04      	ldr	r2, [pc, #16]	; (8008470 <RCC_ClockSecuritySystemCmd+0x1c>)
 8008460:	79fb      	ldrb	r3, [r7, #7]
 8008462:	6013      	str	r3, [r2, #0]
}
 8008464:	bf00      	nop
 8008466:	370c      	adds	r7, #12
 8008468:	46bd      	mov	sp, r7
 800846a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800846e:	4770      	bx	lr
 8008470:	4247004c 	.word	0x4247004c

08008474 <RCC_MCO1Config>:
  *            @arg RCC_MCO1Div_4: division by 4 applied to MCO1 clock
  *            @arg RCC_MCO1Div_5: division by 5 applied to MCO1 clock
  * @retval None
  */
void RCC_MCO1Config(uint32_t RCC_MCO1Source, uint32_t RCC_MCO1Div)
{
 8008474:	b480      	push	{r7}
 8008476:	b085      	sub	sp, #20
 8008478:	af00      	add	r7, sp, #0
 800847a:	6078      	str	r0, [r7, #4]
 800847c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800847e:	2300      	movs	r3, #0
 8008480:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_MCO1SOURCE(RCC_MCO1Source));
  assert_param(IS_RCC_MCO1DIV(RCC_MCO1Div));  

  tmpreg = RCC->CFGR;
 8008482:	4b0b      	ldr	r3, [pc, #44]	; (80084b0 <RCC_MCO1Config+0x3c>)
 8008484:	689b      	ldr	r3, [r3, #8]
 8008486:	60fb      	str	r3, [r7, #12]

  /* Clear MCO1[1:0] and MCO1PRE[2:0] bits */
  tmpreg &= CFGR_MCO1_RESET_MASK;
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	f023 63ec 	bic.w	r3, r3, #123731968	; 0x7600000
 800848e:	60fb      	str	r3, [r7, #12]

  /* Select MCO1 clock source and prescaler */
  tmpreg |= RCC_MCO1Source | RCC_MCO1Div;
 8008490:	687a      	ldr	r2, [r7, #4]
 8008492:	683b      	ldr	r3, [r7, #0]
 8008494:	4313      	orrs	r3, r2
 8008496:	68fa      	ldr	r2, [r7, #12]
 8008498:	4313      	orrs	r3, r2
 800849a:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;  
 800849c:	4a04      	ldr	r2, [pc, #16]	; (80084b0 <RCC_MCO1Config+0x3c>)
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	6093      	str	r3, [r2, #8]
}
 80084a2:	bf00      	nop
 80084a4:	3714      	adds	r7, #20
 80084a6:	46bd      	mov	sp, r7
 80084a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ac:	4770      	bx	lr
 80084ae:	bf00      	nop
 80084b0:	40023800 	.word	0x40023800

080084b4 <RCC_MCO2Config>:
  *            @arg RCC_MCO2Div_4: division by 4 applied to MCO2 clock
  *            @arg RCC_MCO2Div_5: division by 5 applied to MCO2 clock
  * @retval None
  */
void RCC_MCO2Config(uint32_t RCC_MCO2Source, uint32_t RCC_MCO2Div)
{
 80084b4:	b480      	push	{r7}
 80084b6:	b085      	sub	sp, #20
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	6078      	str	r0, [r7, #4]
 80084bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80084be:	2300      	movs	r3, #0
 80084c0:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_MCO2SOURCE(RCC_MCO2Source));
  assert_param(IS_RCC_MCO2DIV(RCC_MCO2Div));
  
  tmpreg = RCC->CFGR;
 80084c2:	4b0b      	ldr	r3, [pc, #44]	; (80084f0 <RCC_MCO2Config+0x3c>)
 80084c4:	689b      	ldr	r3, [r3, #8]
 80084c6:	60fb      	str	r3, [r7, #12]
  
  /* Clear MCO2 and MCO2PRE[2:0] bits */
  tmpreg &= CFGR_MCO2_RESET_MASK;
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80084ce:	60fb      	str	r3, [r7, #12]

  /* Select MCO2 clock source and prescaler */
  tmpreg |= RCC_MCO2Source | RCC_MCO2Div;
 80084d0:	687a      	ldr	r2, [r7, #4]
 80084d2:	683b      	ldr	r3, [r7, #0]
 80084d4:	4313      	orrs	r3, r2
 80084d6:	68fa      	ldr	r2, [r7, #12]
 80084d8:	4313      	orrs	r3, r2
 80084da:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;  
 80084dc:	4a04      	ldr	r2, [pc, #16]	; (80084f0 <RCC_MCO2Config+0x3c>)
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	6093      	str	r3, [r2, #8]
}
 80084e2:	bf00      	nop
 80084e4:	3714      	adds	r7, #20
 80084e6:	46bd      	mov	sp, r7
 80084e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ec:	4770      	bx	lr
 80084ee:	bf00      	nop
 80084f0:	40023800 	.word	0x40023800

080084f4 <RCC_SYSCLKConfig>:
  *            @arg RCC_SYSCLKSource_HSE:    HSE selected as system clock source
  *            @arg RCC_SYSCLKSource_PLLCLK: PLL selected as system clock source
  * @retval None
  */
void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
{
 80084f4:	b480      	push	{r7}
 80084f6:	b085      	sub	sp, #20
 80084f8:	af00      	add	r7, sp, #0
 80084fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 80084fc:	2300      	movs	r3, #0
 80084fe:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));

  tmpreg = RCC->CFGR;
 8008500:	4b09      	ldr	r3, [pc, #36]	; (8008528 <RCC_SYSCLKConfig+0x34>)
 8008502:	689b      	ldr	r3, [r3, #8]
 8008504:	60fb      	str	r3, [r7, #12]

  /* Clear SW[1:0] bits */
  tmpreg &= ~RCC_CFGR_SW;
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	f023 0303 	bic.w	r3, r3, #3
 800850c:	60fb      	str	r3, [r7, #12]

  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
 800850e:	68fa      	ldr	r2, [r7, #12]
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	4313      	orrs	r3, r2
 8008514:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8008516:	4a04      	ldr	r2, [pc, #16]	; (8008528 <RCC_SYSCLKConfig+0x34>)
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	6093      	str	r3, [r2, #8]
}
 800851c:	bf00      	nop
 800851e:	3714      	adds	r7, #20
 8008520:	46bd      	mov	sp, r7
 8008522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008526:	4770      	bx	lr
 8008528:	40023800 	.word	0x40023800

0800852c <RCC_GetSYSCLKSource>:
  *              - 0x00: HSI used as system clock
  *              - 0x04: HSE used as system clock
  *              - 0x08: PLL used as system clock
  */
uint8_t RCC_GetSYSCLKSource(void)
{
 800852c:	b480      	push	{r7}
 800852e:	af00      	add	r7, sp, #0
  return ((uint8_t)(RCC->CFGR & RCC_CFGR_SWS));
 8008530:	4b05      	ldr	r3, [pc, #20]	; (8008548 <RCC_GetSYSCLKSource+0x1c>)
 8008532:	689b      	ldr	r3, [r3, #8]
 8008534:	b2db      	uxtb	r3, r3
 8008536:	f003 030c 	and.w	r3, r3, #12
 800853a:	b2db      	uxtb	r3, r3
}
 800853c:	4618      	mov	r0, r3
 800853e:	46bd      	mov	sp, r7
 8008540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008544:	4770      	bx	lr
 8008546:	bf00      	nop
 8008548:	40023800 	.word	0x40023800

0800854c <RCC_HCLKConfig>:
  *            @arg RCC_SYSCLK_Div256: AHB clock = SYSCLK/256
  *            @arg RCC_SYSCLK_Div512: AHB clock = SYSCLK/512
  * @retval None
  */
void RCC_HCLKConfig(uint32_t RCC_SYSCLK)
{
 800854c:	b480      	push	{r7}
 800854e:	b085      	sub	sp, #20
 8008550:	af00      	add	r7, sp, #0
 8008552:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8008554:	2300      	movs	r3, #0
 8008556:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));

  tmpreg = RCC->CFGR;
 8008558:	4b09      	ldr	r3, [pc, #36]	; (8008580 <RCC_HCLKConfig+0x34>)
 800855a:	689b      	ldr	r3, [r3, #8]
 800855c:	60fb      	str	r3, [r7, #12]

  /* Clear HPRE[3:0] bits */
  tmpreg &= ~RCC_CFGR_HPRE;
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008564:	60fb      	str	r3, [r7, #12]

  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
 8008566:	68fa      	ldr	r2, [r7, #12]
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	4313      	orrs	r3, r2
 800856c:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
 800856e:	4a04      	ldr	r2, [pc, #16]	; (8008580 <RCC_HCLKConfig+0x34>)
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	6093      	str	r3, [r2, #8]
}
 8008574:	bf00      	nop
 8008576:	3714      	adds	r7, #20
 8008578:	46bd      	mov	sp, r7
 800857a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800857e:	4770      	bx	lr
 8008580:	40023800 	.word	0x40023800

08008584 <RCC_PCLK1Config>:
  *            @arg RCC_HCLK_Div8:  APB1 clock = HCLK/8
  *            @arg RCC_HCLK_Div16: APB1 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK1Config(uint32_t RCC_HCLK)
{
 8008584:	b480      	push	{r7}
 8008586:	b085      	sub	sp, #20
 8008588:	af00      	add	r7, sp, #0
 800858a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800858c:	2300      	movs	r3, #0
 800858e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
 8008590:	4b09      	ldr	r3, [pc, #36]	; (80085b8 <RCC_PCLK1Config+0x34>)
 8008592:	689b      	ldr	r3, [r3, #8]
 8008594:	60fb      	str	r3, [r7, #12]

  /* Clear PPRE1[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE1;
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 800859c:	60fb      	str	r3, [r7, #12]

  /* Set PPRE1[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
 800859e:	68fa      	ldr	r2, [r7, #12]
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	4313      	orrs	r3, r2
 80085a4:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
 80085a6:	4a04      	ldr	r2, [pc, #16]	; (80085b8 <RCC_PCLK1Config+0x34>)
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	6093      	str	r3, [r2, #8]
}
 80085ac:	bf00      	nop
 80085ae:	3714      	adds	r7, #20
 80085b0:	46bd      	mov	sp, r7
 80085b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b6:	4770      	bx	lr
 80085b8:	40023800 	.word	0x40023800

080085bc <RCC_PCLK2Config>:
  *            @arg RCC_HCLK_Div8:  APB2 clock = HCLK/8
  *            @arg RCC_HCLK_Div16: APB2 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK2Config(uint32_t RCC_HCLK)
{
 80085bc:	b480      	push	{r7}
 80085be:	b085      	sub	sp, #20
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 80085c4:	2300      	movs	r3, #0
 80085c6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
 80085c8:	4b0a      	ldr	r3, [pc, #40]	; (80085f4 <RCC_PCLK2Config+0x38>)
 80085ca:	689b      	ldr	r3, [r3, #8]
 80085cc:	60fb      	str	r3, [r7, #12]

  /* Clear PPRE2[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE2;
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80085d4:	60fb      	str	r3, [r7, #12]

  /* Set PPRE2[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK << 3;
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	00db      	lsls	r3, r3, #3
 80085da:	68fa      	ldr	r2, [r7, #12]
 80085dc:	4313      	orrs	r3, r2
 80085de:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
 80085e0:	4a04      	ldr	r2, [pc, #16]	; (80085f4 <RCC_PCLK2Config+0x38>)
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	6093      	str	r3, [r2, #8]
}
 80085e6:	bf00      	nop
 80085e8:	3714      	adds	r7, #20
 80085ea:	46bd      	mov	sp, r7
 80085ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f0:	4770      	bx	lr
 80085f2:	bf00      	nop
 80085f4:	40023800 	.word	0x40023800

080085f8 <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 80085f8:	b480      	push	{r7}
 80085fa:	b089      	sub	sp, #36	; 0x24
 80085fc:	af00      	add	r7, sp, #0
 80085fe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8008600:	2300      	movs	r3, #0
 8008602:	61bb      	str	r3, [r7, #24]
 8008604:	2300      	movs	r3, #0
 8008606:	617b      	str	r3, [r7, #20]
 8008608:	2300      	movs	r3, #0
 800860a:	61fb      	str	r3, [r7, #28]
 800860c:	2302      	movs	r3, #2
 800860e:	613b      	str	r3, [r7, #16]
 8008610:	2300      	movs	r3, #0
 8008612:	60fb      	str	r3, [r7, #12]
 8008614:	2302      	movs	r3, #2
 8008616:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8008618:	4b47      	ldr	r3, [pc, #284]	; (8008738 <RCC_GetClocksFreq+0x140>)
 800861a:	689b      	ldr	r3, [r3, #8]
 800861c:	f003 030c 	and.w	r3, r3, #12
 8008620:	61bb      	str	r3, [r7, #24]

  switch (tmp)
 8008622:	69bb      	ldr	r3, [r7, #24]
 8008624:	2b04      	cmp	r3, #4
 8008626:	d007      	beq.n	8008638 <RCC_GetClocksFreq+0x40>
 8008628:	2b08      	cmp	r3, #8
 800862a:	d009      	beq.n	8008640 <RCC_GetClocksFreq+0x48>
 800862c:	2b00      	cmp	r3, #0
 800862e:	d13d      	bne.n	80086ac <RCC_GetClocksFreq+0xb4>
  {
    case 0x00:  /* HSI used as system clock source */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	4a42      	ldr	r2, [pc, #264]	; (800873c <RCC_GetClocksFreq+0x144>)
 8008634:	601a      	str	r2, [r3, #0]
      break;
 8008636:	e03d      	b.n	80086b4 <RCC_GetClocksFreq+0xbc>
    case 0x04:  /* HSE used as system clock  source */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	4a41      	ldr	r2, [pc, #260]	; (8008740 <RCC_GetClocksFreq+0x148>)
 800863c:	601a      	str	r2, [r3, #0]
      break;
 800863e:	e039      	b.n	80086b4 <RCC_GetClocksFreq+0xbc>
    case 0x08:  /* PLL used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8008640:	4b3d      	ldr	r3, [pc, #244]	; (8008738 <RCC_GetClocksFreq+0x140>)
 8008642:	685b      	ldr	r3, [r3, #4]
 8008644:	0d9b      	lsrs	r3, r3, #22
 8008646:	f003 0301 	and.w	r3, r3, #1
 800864a:	60fb      	str	r3, [r7, #12]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800864c:	4b3a      	ldr	r3, [pc, #232]	; (8008738 <RCC_GetClocksFreq+0x140>)
 800864e:	685b      	ldr	r3, [r3, #4]
 8008650:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008654:	60bb      	str	r3, [r7, #8]
      
      if (pllsource != 0)
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	2b00      	cmp	r3, #0
 800865a:	d00c      	beq.n	8008676 <RCC_GetClocksFreq+0x7e>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 800865c:	4a38      	ldr	r2, [pc, #224]	; (8008740 <RCC_GetClocksFreq+0x148>)
 800865e:	68bb      	ldr	r3, [r7, #8]
 8008660:	fbb2 f3f3 	udiv	r3, r2, r3
 8008664:	4a34      	ldr	r2, [pc, #208]	; (8008738 <RCC_GetClocksFreq+0x140>)
 8008666:	6852      	ldr	r2, [r2, #4]
 8008668:	0992      	lsrs	r2, r2, #6
 800866a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800866e:	fb02 f303 	mul.w	r3, r2, r3
 8008672:	61fb      	str	r3, [r7, #28]
 8008674:	e00b      	b.n	800868e <RCC_GetClocksFreq+0x96>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8008676:	4a31      	ldr	r2, [pc, #196]	; (800873c <RCC_GetClocksFreq+0x144>)
 8008678:	68bb      	ldr	r3, [r7, #8]
 800867a:	fbb2 f3f3 	udiv	r3, r2, r3
 800867e:	4a2e      	ldr	r2, [pc, #184]	; (8008738 <RCC_GetClocksFreq+0x140>)
 8008680:	6852      	ldr	r2, [r2, #4]
 8008682:	0992      	lsrs	r2, r2, #6
 8008684:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008688:	fb02 f303 	mul.w	r3, r2, r3
 800868c:	61fb      	str	r3, [r7, #28]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 800868e:	4b2a      	ldr	r3, [pc, #168]	; (8008738 <RCC_GetClocksFreq+0x140>)
 8008690:	685b      	ldr	r3, [r3, #4]
 8008692:	0c1b      	lsrs	r3, r3, #16
 8008694:	f003 0303 	and.w	r3, r3, #3
 8008698:	3301      	adds	r3, #1
 800869a:	005b      	lsls	r3, r3, #1
 800869c:	613b      	str	r3, [r7, #16]
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 800869e:	69fa      	ldr	r2, [r7, #28]
 80086a0:	693b      	ldr	r3, [r7, #16]
 80086a2:	fbb2 f2f3 	udiv	r2, r2, r3
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	601a      	str	r2, [r3, #0]
      break;
 80086aa:	e003      	b.n	80086b4 <RCC_GetClocksFreq+0xbc>
    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	4a23      	ldr	r2, [pc, #140]	; (800873c <RCC_GetClocksFreq+0x144>)
 80086b0:	601a      	str	r2, [r3, #0]
      break;
 80086b2:	bf00      	nop
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 80086b4:	4b20      	ldr	r3, [pc, #128]	; (8008738 <RCC_GetClocksFreq+0x140>)
 80086b6:	689b      	ldr	r3, [r3, #8]
 80086b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80086bc:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 4;
 80086be:	69bb      	ldr	r3, [r7, #24]
 80086c0:	091b      	lsrs	r3, r3, #4
 80086c2:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 80086c4:	4a1f      	ldr	r2, [pc, #124]	; (8008744 <RCC_GetClocksFreq+0x14c>)
 80086c6:	69bb      	ldr	r3, [r7, #24]
 80086c8:	4413      	add	r3, r2
 80086ca:	781b      	ldrb	r3, [r3, #0]
 80086cc:	b2db      	uxtb	r3, r3
 80086ce:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681a      	ldr	r2, [r3, #0]
 80086d4:	697b      	ldr	r3, [r7, #20]
 80086d6:	40da      	lsrs	r2, r3
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 80086dc:	4b16      	ldr	r3, [pc, #88]	; (8008738 <RCC_GetClocksFreq+0x140>)
 80086de:	689b      	ldr	r3, [r3, #8]
 80086e0:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 80086e4:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 10;
 80086e6:	69bb      	ldr	r3, [r7, #24]
 80086e8:	0a9b      	lsrs	r3, r3, #10
 80086ea:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 80086ec:	4a15      	ldr	r2, [pc, #84]	; (8008744 <RCC_GetClocksFreq+0x14c>)
 80086ee:	69bb      	ldr	r3, [r7, #24]
 80086f0:	4413      	add	r3, r2
 80086f2:	781b      	ldrb	r3, [r3, #0]
 80086f4:	b2db      	uxtb	r3, r3
 80086f6:	617b      	str	r3, [r7, #20]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	685a      	ldr	r2, [r3, #4]
 80086fc:	697b      	ldr	r3, [r7, #20]
 80086fe:	40da      	lsrs	r2, r3
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 8008704:	4b0c      	ldr	r3, [pc, #48]	; (8008738 <RCC_GetClocksFreq+0x140>)
 8008706:	689b      	ldr	r3, [r3, #8]
 8008708:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800870c:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 13;
 800870e:	69bb      	ldr	r3, [r7, #24]
 8008710:	0b5b      	lsrs	r3, r3, #13
 8008712:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8008714:	4a0b      	ldr	r2, [pc, #44]	; (8008744 <RCC_GetClocksFreq+0x14c>)
 8008716:	69bb      	ldr	r3, [r7, #24]
 8008718:	4413      	add	r3, r2
 800871a:	781b      	ldrb	r3, [r3, #0]
 800871c:	b2db      	uxtb	r3, r3
 800871e:	617b      	str	r3, [r7, #20]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	685a      	ldr	r2, [r3, #4]
 8008724:	697b      	ldr	r3, [r7, #20]
 8008726:	40da      	lsrs	r2, r3
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	60da      	str	r2, [r3, #12]
}
 800872c:	bf00      	nop
 800872e:	3724      	adds	r7, #36	; 0x24
 8008730:	46bd      	mov	sp, r7
 8008732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008736:	4770      	bx	lr
 8008738:	40023800 	.word	0x40023800
 800873c:	00f42400 	.word	0x00f42400
 8008740:	007a1200 	.word	0x007a1200
 8008744:	20000084 	.word	0x20000084

08008748 <RCC_RTCCLKConfig>:
  *         RTC clock source).
  *  
  * @retval None
  */
void RCC_RTCCLKConfig(uint32_t RCC_RTCCLKSource)
{
 8008748:	b480      	push	{r7}
 800874a:	b085      	sub	sp, #20
 800874c:	af00      	add	r7, sp, #0
 800874e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8008750:	2300      	movs	r3, #0
 8008752:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));

  if ((RCC_RTCCLKSource & 0x00000300) == 0x00000300)
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800875a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800875e:	d111      	bne.n	8008784 <RCC_RTCCLKConfig+0x3c>
  { /* If HSE is selected as RTC clock source, configure HSE division factor for RTC clock */
    tmpreg = RCC->CFGR;
 8008760:	4b0f      	ldr	r3, [pc, #60]	; (80087a0 <RCC_RTCCLKConfig+0x58>)
 8008762:	689b      	ldr	r3, [r3, #8]
 8008764:	60fb      	str	r3, [r7, #12]

    /* Clear RTCPRE[4:0] bits */
    tmpreg &= ~RCC_CFGR_RTCPRE;
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800876c:	60fb      	str	r3, [r7, #12]

    /* Configure HSE division factor for RTC clock */
    tmpreg |= (RCC_RTCCLKSource & 0xFFFFCFF);
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8008774:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008778:	68fa      	ldr	r2, [r7, #12]
 800877a:	4313      	orrs	r3, r2
 800877c:	60fb      	str	r3, [r7, #12]

    /* Store the new value */
    RCC->CFGR = tmpreg;
 800877e:	4a08      	ldr	r2, [pc, #32]	; (80087a0 <RCC_RTCCLKConfig+0x58>)
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	6093      	str	r3, [r2, #8]
  }
    
  /* Select the RTC clock source */
  RCC->BDCR |= (RCC_RTCCLKSource & 0x00000FFF);
 8008784:	4b06      	ldr	r3, [pc, #24]	; (80087a0 <RCC_RTCCLKConfig+0x58>)
 8008786:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800878e:	4904      	ldr	r1, [pc, #16]	; (80087a0 <RCC_RTCCLKConfig+0x58>)
 8008790:	4313      	orrs	r3, r2
 8008792:	670b      	str	r3, [r1, #112]	; 0x70
}
 8008794:	bf00      	nop
 8008796:	3714      	adds	r7, #20
 8008798:	46bd      	mov	sp, r7
 800879a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800879e:	4770      	bx	lr
 80087a0:	40023800 	.word	0x40023800

080087a4 <RCC_RTCCLKCmd>:
  *         using the RCC_RTCCLKConfig function.
  * @param  NewState: new state of the RTC clock. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_RTCCLKCmd(FunctionalState NewState)
{
 80087a4:	b480      	push	{r7}
 80087a6:	b083      	sub	sp, #12
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	4603      	mov	r3, r0
 80087ac:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
 80087ae:	4a04      	ldr	r2, [pc, #16]	; (80087c0 <RCC_RTCCLKCmd+0x1c>)
 80087b0:	79fb      	ldrb	r3, [r7, #7]
 80087b2:	6013      	str	r3, [r2, #0]
}
 80087b4:	bf00      	nop
 80087b6:	370c      	adds	r7, #12
 80087b8:	46bd      	mov	sp, r7
 80087ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087be:	4770      	bx	lr
 80087c0:	42470e3c 	.word	0x42470e3c

080087c4 <RCC_BackupResetCmd>:
  * @param  NewState: new state of the Backup domain reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_BackupResetCmd(FunctionalState NewState)
{
 80087c4:	b480      	push	{r7}
 80087c6:	b083      	sub	sp, #12
 80087c8:	af00      	add	r7, sp, #0
 80087ca:	4603      	mov	r3, r0
 80087cc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
 80087ce:	4a04      	ldr	r2, [pc, #16]	; (80087e0 <RCC_BackupResetCmd+0x1c>)
 80087d0:	79fb      	ldrb	r3, [r7, #7]
 80087d2:	6013      	str	r3, [r2, #0]
}
 80087d4:	bf00      	nop
 80087d6:	370c      	adds	r7, #12
 80087d8:	46bd      	mov	sp, r7
 80087da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087de:	4770      	bx	lr
 80087e0:	42470e40 	.word	0x42470e40

080087e4 <RCC_I2SCLKConfig>:
  *            @arg RCC_I2S2CLKSource_Ext: External clock mapped on the I2S_CKIN pin
  *                                        used as I2S clock source
  * @retval None
  */
void RCC_I2SCLKConfig(uint32_t RCC_I2SCLKSource)
{
 80087e4:	b480      	push	{r7}
 80087e6:	b083      	sub	sp, #12
 80087e8:	af00      	add	r7, sp, #0
 80087ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_I2SCLK_SOURCE(RCC_I2SCLKSource));

  *(__IO uint32_t *) CFGR_I2SSRC_BB = RCC_I2SCLKSource;
 80087ec:	4a04      	ldr	r2, [pc, #16]	; (8008800 <RCC_I2SCLKConfig+0x1c>)
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	6013      	str	r3, [r2, #0]
}
 80087f2:	bf00      	nop
 80087f4:	370c      	adds	r7, #12
 80087f6:	46bd      	mov	sp, r7
 80087f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087fc:	4770      	bx	lr
 80087fe:	bf00      	nop
 8008800:	4247015c 	.word	0x4247015c

08008804 <RCC_SAIPLLI2SClkDivConfig>:
  *          SAI1 clock frequency = f(PLLI2S_Q) / RCC_PLLI2SDivQ 
  *              
  * @retval None
  */
void RCC_SAIPLLI2SClkDivConfig(uint32_t RCC_PLLI2SDivQ)  
{
 8008804:	b480      	push	{r7}
 8008806:	b085      	sub	sp, #20
 8008808:	af00      	add	r7, sp, #0
 800880a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800880c:	2300      	movs	r3, #0
 800880e:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(RCC_PLLI2SDivQ));
  
  tmpreg = RCC->DCKCFGR;
 8008810:	4b0b      	ldr	r3, [pc, #44]	; (8008840 <RCC_SAIPLLI2SClkDivConfig+0x3c>)
 8008812:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008816:	60fb      	str	r3, [r7, #12]

  /* Clear PLLI2SDIVQ[4:0] bits */
  tmpreg &= ~(RCC_DCKCFGR_PLLI2SDIVQ);
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	f023 031f 	bic.w	r3, r3, #31
 800881e:	60fb      	str	r3, [r7, #12]

  /* Set PLLI2SDIVQ values */
  tmpreg |= (RCC_PLLI2SDivQ - 1);
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	3b01      	subs	r3, #1
 8008824:	68fa      	ldr	r2, [r7, #12]
 8008826:	4313      	orrs	r3, r2
 8008828:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
 800882a:	4a05      	ldr	r2, [pc, #20]	; (8008840 <RCC_SAIPLLI2SClkDivConfig+0x3c>)
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
}
 8008832:	bf00      	nop
 8008834:	3714      	adds	r7, #20
 8008836:	46bd      	mov	sp, r7
 8008838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800883c:	4770      	bx	lr
 800883e:	bf00      	nop
 8008840:	40023800 	.word	0x40023800

08008844 <RCC_SAIPLLSAIClkDivConfig>:
  *          SAI1 clock frequency = f(PLLSAI_Q) / RCC_PLLSAIDivQ  
  *              
  * @retval None
  */
void RCC_SAIPLLSAIClkDivConfig(uint32_t RCC_PLLSAIDivQ)  
{
 8008844:	b480      	push	{r7}
 8008846:	b085      	sub	sp, #20
 8008848:	af00      	add	r7, sp, #0
 800884a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800884c:	2300      	movs	r3, #0
 800884e:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(RCC_PLLSAIDivQ));
  
  tmpreg = RCC->DCKCFGR;
 8008850:	4b0b      	ldr	r3, [pc, #44]	; (8008880 <RCC_SAIPLLSAIClkDivConfig+0x3c>)
 8008852:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008856:	60fb      	str	r3, [r7, #12]

  /* Clear PLLI2SDIVQ[4:0] and PLLSAIDIVQ[4:0] bits */
  tmpreg &= ~(RCC_DCKCFGR_PLLSAIDIVQ);
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 800885e:	60fb      	str	r3, [r7, #12]

  /* Set PLLSAIDIVQ values */
  tmpreg |= ((RCC_PLLSAIDivQ - 1) << 8);
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	3b01      	subs	r3, #1
 8008864:	021b      	lsls	r3, r3, #8
 8008866:	68fa      	ldr	r2, [r7, #12]
 8008868:	4313      	orrs	r3, r2
 800886a:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
 800886c:	4a04      	ldr	r2, [pc, #16]	; (8008880 <RCC_SAIPLLSAIClkDivConfig+0x3c>)
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
}
 8008874:	bf00      	nop
 8008876:	3714      	adds	r7, #20
 8008878:	46bd      	mov	sp, r7
 800887a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800887e:	4770      	bx	lr
 8008880:	40023800 	.word	0x40023800

08008884 <RCC_SAIBlockACLKConfig>:
  *            @arg RCC_SAIACLKSource_Ext: External clock mapped on the I2S_CKIN pin
  *                                        used as SAI1 Block A clock
  * @retval None
  */
void RCC_SAIBlockACLKConfig(uint32_t RCC_SAIBlockACLKSource)
{
 8008884:	b480      	push	{r7}
 8008886:	b085      	sub	sp, #20
 8008888:	af00      	add	r7, sp, #0
 800888a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800888c:	2300      	movs	r3, #0
 800888e:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_SAIACLK_SOURCE(RCC_SAIBlockACLKSource));
  
  tmpreg = RCC->DCKCFGR;
 8008890:	4b0a      	ldr	r3, [pc, #40]	; (80088bc <RCC_SAIBlockACLKConfig+0x38>)
 8008892:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008896:	60fb      	str	r3, [r7, #12]

  /* Clear RCC_DCKCFGR_SAI1ASRC[1:0] bits */
  tmpreg &= ~RCC_DCKCFGR_SAI1ASRC;
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800889e:	60fb      	str	r3, [r7, #12]

  /* Set SAI Block A source selection value */
  tmpreg |= RCC_SAIBlockACLKSource;
 80088a0:	68fa      	ldr	r2, [r7, #12]
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	4313      	orrs	r3, r2
 80088a6:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
 80088a8:	4a04      	ldr	r2, [pc, #16]	; (80088bc <RCC_SAIBlockACLKConfig+0x38>)
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
}
 80088b0:	bf00      	nop
 80088b2:	3714      	adds	r7, #20
 80088b4:	46bd      	mov	sp, r7
 80088b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ba:	4770      	bx	lr
 80088bc:	40023800 	.word	0x40023800

080088c0 <RCC_SAIBlockBCLKConfig>:
  *            @arg RCC_SAIBCLKSource_Ext: External clock mapped on the I2S_CKIN pin
  *                                        used as SAI1 Block B clock
  * @retval None
  */
void RCC_SAIBlockBCLKConfig(uint32_t RCC_SAIBlockBCLKSource)
{
 80088c0:	b480      	push	{r7}
 80088c2:	b085      	sub	sp, #20
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 80088c8:	2300      	movs	r3, #0
 80088ca:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_SAIBCLK_SOURCE(RCC_SAIBlockBCLKSource));
  
  tmpreg = RCC->DCKCFGR;
 80088cc:	4b0a      	ldr	r3, [pc, #40]	; (80088f8 <RCC_SAIBlockBCLKConfig+0x38>)
 80088ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80088d2:	60fb      	str	r3, [r7, #12]

  /* Clear RCC_DCKCFGR_SAI1BSRC[1:0] bits */
  tmpreg &= ~RCC_DCKCFGR_SAI1BSRC;
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80088da:	60fb      	str	r3, [r7, #12]

  /* Set SAI Block B source selection value */
  tmpreg |= RCC_SAIBlockBCLKSource;
 80088dc:	68fa      	ldr	r2, [r7, #12]
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	4313      	orrs	r3, r2
 80088e2:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
 80088e4:	4a04      	ldr	r2, [pc, #16]	; (80088f8 <RCC_SAIBlockBCLKConfig+0x38>)
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
}
 80088ec:	bf00      	nop
 80088ee:	3714      	adds	r7, #20
 80088f0:	46bd      	mov	sp, r7
 80088f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f6:	4770      	bx	lr
 80088f8:	40023800 	.word	0x40023800

080088fc <RCC_LTDCCLKDivConfig>:
  *          LTDC clock frequency = f(PLLSAI_R) / RCC_PLLSAIDivR  
  *            
  * @retval None
  */
void RCC_LTDCCLKDivConfig(uint32_t RCC_PLLSAIDivR)
{
 80088fc:	b480      	push	{r7}
 80088fe:	b085      	sub	sp, #20
 8008900:	af00      	add	r7, sp, #0
 8008902:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8008904:	2300      	movs	r3, #0
 8008906:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_PLLSAI_DIVR_VALUE(RCC_PLLSAIDivR));
  
  tmpreg = RCC->DCKCFGR;
 8008908:	4b0a      	ldr	r3, [pc, #40]	; (8008934 <RCC_LTDCCLKDivConfig+0x38>)
 800890a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800890e:	60fb      	str	r3, [r7, #12]

  /* Clear PLLSAIDIVR[2:0] bits */
  tmpreg &= ~RCC_DCKCFGR_PLLSAIDIVR;
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8008916:	60fb      	str	r3, [r7, #12]

  /* Set PLLSAIDIVR values */
  tmpreg |= RCC_PLLSAIDivR;
 8008918:	68fa      	ldr	r2, [r7, #12]
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	4313      	orrs	r3, r2
 800891e:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
 8008920:	4a04      	ldr	r2, [pc, #16]	; (8008934 <RCC_LTDCCLKDivConfig+0x38>)
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
}
 8008928:	bf00      	nop
 800892a:	3714      	adds	r7, #20
 800892c:	46bd      	mov	sp, r7
 800892e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008932:	4770      	bx	lr
 8008934:	40023800 	.word	0x40023800

08008938 <RCC_TIMCLKPresConfig>:
  *                 else it is equal to [(HPRE * PPREx) / 4] if PPREx is corresponding 
  *                 to division by 8 or more.
  * @retval None
  */
void RCC_TIMCLKPresConfig(uint32_t RCC_TIMCLKPrescaler)
{
 8008938:	b480      	push	{r7}
 800893a:	b083      	sub	sp, #12
 800893c:	af00      	add	r7, sp, #0
 800893e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_TIMCLK_PRESCALER(RCC_TIMCLKPrescaler));

  *(__IO uint32_t *) DCKCFGR_TIMPRE_BB = RCC_TIMCLKPrescaler;
 8008940:	4a04      	ldr	r2, [pc, #16]	; (8008954 <RCC_TIMCLKPresConfig+0x1c>)
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	6013      	str	r3, [r2, #0]
  
}
 8008946:	bf00      	nop
 8008948:	370c      	adds	r7, #12
 800894a:	46bd      	mov	sp, r7
 800894c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008950:	4770      	bx	lr
 8008952:	bf00      	nop
 8008954:	424711e0 	.word	0x424711e0

08008958 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8008958:	b480      	push	{r7}
 800895a:	b083      	sub	sp, #12
 800895c:	af00      	add	r7, sp, #0
 800895e:	6078      	str	r0, [r7, #4]
 8008960:	460b      	mov	r3, r1
 8008962:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8008964:	78fb      	ldrb	r3, [r7, #3]
 8008966:	2b00      	cmp	r3, #0
 8008968:	d006      	beq.n	8008978 <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 800896a:	4b0a      	ldr	r3, [pc, #40]	; (8008994 <RCC_AHB1PeriphClockCmd+0x3c>)
 800896c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800896e:	4909      	ldr	r1, [pc, #36]	; (8008994 <RCC_AHB1PeriphClockCmd+0x3c>)
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	4313      	orrs	r3, r2
 8008974:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 8008976:	e006      	b.n	8008986 <RCC_AHB1PeriphClockCmd+0x2e>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8008978:	4b06      	ldr	r3, [pc, #24]	; (8008994 <RCC_AHB1PeriphClockCmd+0x3c>)
 800897a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	43db      	mvns	r3, r3
 8008980:	4904      	ldr	r1, [pc, #16]	; (8008994 <RCC_AHB1PeriphClockCmd+0x3c>)
 8008982:	4013      	ands	r3, r2
 8008984:	630b      	str	r3, [r1, #48]	; 0x30
}
 8008986:	bf00      	nop
 8008988:	370c      	adds	r7, #12
 800898a:	46bd      	mov	sp, r7
 800898c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008990:	4770      	bx	lr
 8008992:	bf00      	nop
 8008994:	40023800 	.word	0x40023800

08008998 <RCC_AHB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB2PeriphClockCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
 8008998:	b480      	push	{r7}
 800899a:	b083      	sub	sp, #12
 800899c:	af00      	add	r7, sp, #0
 800899e:	6078      	str	r0, [r7, #4]
 80089a0:	460b      	mov	r3, r1
 80089a2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80089a4:	78fb      	ldrb	r3, [r7, #3]
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d006      	beq.n	80089b8 <RCC_AHB2PeriphClockCmd+0x20>
  {
    RCC->AHB2ENR |= RCC_AHB2Periph;
 80089aa:	4b0a      	ldr	r3, [pc, #40]	; (80089d4 <RCC_AHB2PeriphClockCmd+0x3c>)
 80089ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80089ae:	4909      	ldr	r1, [pc, #36]	; (80089d4 <RCC_AHB2PeriphClockCmd+0x3c>)
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	4313      	orrs	r3, r2
 80089b4:	634b      	str	r3, [r1, #52]	; 0x34
  }
  else
  {
    RCC->AHB2ENR &= ~RCC_AHB2Periph;
  }
}
 80089b6:	e006      	b.n	80089c6 <RCC_AHB2PeriphClockCmd+0x2e>
    RCC->AHB2ENR &= ~RCC_AHB2Periph;
 80089b8:	4b06      	ldr	r3, [pc, #24]	; (80089d4 <RCC_AHB2PeriphClockCmd+0x3c>)
 80089ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	43db      	mvns	r3, r3
 80089c0:	4904      	ldr	r1, [pc, #16]	; (80089d4 <RCC_AHB2PeriphClockCmd+0x3c>)
 80089c2:	4013      	ands	r3, r2
 80089c4:	634b      	str	r3, [r1, #52]	; 0x34
}
 80089c6:	bf00      	nop
 80089c8:	370c      	adds	r7, #12
 80089ca:	46bd      	mov	sp, r7
 80089cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d0:	4770      	bx	lr
 80089d2:	bf00      	nop
 80089d4:	40023800 	.word	0x40023800

080089d8 <RCC_AHB3PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB3PeriphClockCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
 80089d8:	b480      	push	{r7}
 80089da:	b083      	sub	sp, #12
 80089dc:	af00      	add	r7, sp, #0
 80089de:	6078      	str	r0, [r7, #4]
 80089e0:	460b      	mov	r3, r1
 80089e2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80089e4:	78fb      	ldrb	r3, [r7, #3]
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d006      	beq.n	80089f8 <RCC_AHB3PeriphClockCmd+0x20>
  {
    RCC->AHB3ENR |= RCC_AHB3Periph;
 80089ea:	4b0a      	ldr	r3, [pc, #40]	; (8008a14 <RCC_AHB3PeriphClockCmd+0x3c>)
 80089ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80089ee:	4909      	ldr	r1, [pc, #36]	; (8008a14 <RCC_AHB3PeriphClockCmd+0x3c>)
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	4313      	orrs	r3, r2
 80089f4:	638b      	str	r3, [r1, #56]	; 0x38
  }
  else
  {
    RCC->AHB3ENR &= ~RCC_AHB3Periph;
  }
}
 80089f6:	e006      	b.n	8008a06 <RCC_AHB3PeriphClockCmd+0x2e>
    RCC->AHB3ENR &= ~RCC_AHB3Periph;
 80089f8:	4b06      	ldr	r3, [pc, #24]	; (8008a14 <RCC_AHB3PeriphClockCmd+0x3c>)
 80089fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	43db      	mvns	r3, r3
 8008a00:	4904      	ldr	r1, [pc, #16]	; (8008a14 <RCC_AHB3PeriphClockCmd+0x3c>)
 8008a02:	4013      	ands	r3, r2
 8008a04:	638b      	str	r3, [r1, #56]	; 0x38
}
 8008a06:	bf00      	nop
 8008a08:	370c      	adds	r7, #12
 8008a0a:	46bd      	mov	sp, r7
 8008a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a10:	4770      	bx	lr
 8008a12:	bf00      	nop
 8008a14:	40023800 	.word	0x40023800

08008a18 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8008a18:	b480      	push	{r7}
 8008a1a:	b083      	sub	sp, #12
 8008a1c:	af00      	add	r7, sp, #0
 8008a1e:	6078      	str	r0, [r7, #4]
 8008a20:	460b      	mov	r3, r1
 8008a22:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8008a24:	78fb      	ldrb	r3, [r7, #3]
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d006      	beq.n	8008a38 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8008a2a:	4b0a      	ldr	r3, [pc, #40]	; (8008a54 <RCC_APB1PeriphClockCmd+0x3c>)
 8008a2c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008a2e:	4909      	ldr	r1, [pc, #36]	; (8008a54 <RCC_APB1PeriphClockCmd+0x3c>)
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	4313      	orrs	r3, r2
 8008a34:	640b      	str	r3, [r1, #64]	; 0x40
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 8008a36:	e006      	b.n	8008a46 <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8008a38:	4b06      	ldr	r3, [pc, #24]	; (8008a54 <RCC_APB1PeriphClockCmd+0x3c>)
 8008a3a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	43db      	mvns	r3, r3
 8008a40:	4904      	ldr	r1, [pc, #16]	; (8008a54 <RCC_APB1PeriphClockCmd+0x3c>)
 8008a42:	4013      	ands	r3, r2
 8008a44:	640b      	str	r3, [r1, #64]	; 0x40
}
 8008a46:	bf00      	nop
 8008a48:	370c      	adds	r7, #12
 8008a4a:	46bd      	mov	sp, r7
 8008a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a50:	4770      	bx	lr
 8008a52:	bf00      	nop
 8008a54:	40023800 	.word	0x40023800

08008a58 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8008a58:	b480      	push	{r7}
 8008a5a:	b083      	sub	sp, #12
 8008a5c:	af00      	add	r7, sp, #0
 8008a5e:	6078      	str	r0, [r7, #4]
 8008a60:	460b      	mov	r3, r1
 8008a62:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8008a64:	78fb      	ldrb	r3, [r7, #3]
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d006      	beq.n	8008a78 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8008a6a:	4b0a      	ldr	r3, [pc, #40]	; (8008a94 <RCC_APB2PeriphClockCmd+0x3c>)
 8008a6c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008a6e:	4909      	ldr	r1, [pc, #36]	; (8008a94 <RCC_APB2PeriphClockCmd+0x3c>)
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	4313      	orrs	r3, r2
 8008a74:	644b      	str	r3, [r1, #68]	; 0x44
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 8008a76:	e006      	b.n	8008a86 <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8008a78:	4b06      	ldr	r3, [pc, #24]	; (8008a94 <RCC_APB2PeriphClockCmd+0x3c>)
 8008a7a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	43db      	mvns	r3, r3
 8008a80:	4904      	ldr	r1, [pc, #16]	; (8008a94 <RCC_APB2PeriphClockCmd+0x3c>)
 8008a82:	4013      	ands	r3, r2
 8008a84:	644b      	str	r3, [r1, #68]	; 0x44
}
 8008a86:	bf00      	nop
 8008a88:	370c      	adds	r7, #12
 8008a8a:	46bd      	mov	sp, r7
 8008a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a90:	4770      	bx	lr
 8008a92:	bf00      	nop
 8008a94:	40023800 	.word	0x40023800

08008a98 <RCC_AHB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphResetCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8008a98:	b480      	push	{r7}
 8008a9a:	b083      	sub	sp, #12
 8008a9c:	af00      	add	r7, sp, #0
 8008a9e:	6078      	str	r0, [r7, #4]
 8008aa0:	460b      	mov	r3, r1
 8008aa2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_RESET_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8008aa4:	78fb      	ldrb	r3, [r7, #3]
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d006      	beq.n	8008ab8 <RCC_AHB1PeriphResetCmd+0x20>
  {
    RCC->AHB1RSTR |= RCC_AHB1Periph;
 8008aaa:	4b0a      	ldr	r3, [pc, #40]	; (8008ad4 <RCC_AHB1PeriphResetCmd+0x3c>)
 8008aac:	691a      	ldr	r2, [r3, #16]
 8008aae:	4909      	ldr	r1, [pc, #36]	; (8008ad4 <RCC_AHB1PeriphResetCmd+0x3c>)
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	4313      	orrs	r3, r2
 8008ab4:	610b      	str	r3, [r1, #16]
  }
  else
  {
    RCC->AHB1RSTR &= ~RCC_AHB1Periph;
  }
}
 8008ab6:	e006      	b.n	8008ac6 <RCC_AHB1PeriphResetCmd+0x2e>
    RCC->AHB1RSTR &= ~RCC_AHB1Periph;
 8008ab8:	4b06      	ldr	r3, [pc, #24]	; (8008ad4 <RCC_AHB1PeriphResetCmd+0x3c>)
 8008aba:	691a      	ldr	r2, [r3, #16]
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	43db      	mvns	r3, r3
 8008ac0:	4904      	ldr	r1, [pc, #16]	; (8008ad4 <RCC_AHB1PeriphResetCmd+0x3c>)
 8008ac2:	4013      	ands	r3, r2
 8008ac4:	610b      	str	r3, [r1, #16]
}
 8008ac6:	bf00      	nop
 8008ac8:	370c      	adds	r7, #12
 8008aca:	46bd      	mov	sp, r7
 8008acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad0:	4770      	bx	lr
 8008ad2:	bf00      	nop
 8008ad4:	40023800 	.word	0x40023800

08008ad8 <RCC_AHB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB2PeriphResetCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
 8008ad8:	b480      	push	{r7}
 8008ada:	b083      	sub	sp, #12
 8008adc:	af00      	add	r7, sp, #0
 8008ade:	6078      	str	r0, [r7, #4]
 8008ae0:	460b      	mov	r3, r1
 8008ae2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8008ae4:	78fb      	ldrb	r3, [r7, #3]
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d006      	beq.n	8008af8 <RCC_AHB2PeriphResetCmd+0x20>
  {
    RCC->AHB2RSTR |= RCC_AHB2Periph;
 8008aea:	4b0a      	ldr	r3, [pc, #40]	; (8008b14 <RCC_AHB2PeriphResetCmd+0x3c>)
 8008aec:	695a      	ldr	r2, [r3, #20]
 8008aee:	4909      	ldr	r1, [pc, #36]	; (8008b14 <RCC_AHB2PeriphResetCmd+0x3c>)
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	4313      	orrs	r3, r2
 8008af4:	614b      	str	r3, [r1, #20]
  }
  else
  {
    RCC->AHB2RSTR &= ~RCC_AHB2Periph;
  }
}
 8008af6:	e006      	b.n	8008b06 <RCC_AHB2PeriphResetCmd+0x2e>
    RCC->AHB2RSTR &= ~RCC_AHB2Periph;
 8008af8:	4b06      	ldr	r3, [pc, #24]	; (8008b14 <RCC_AHB2PeriphResetCmd+0x3c>)
 8008afa:	695a      	ldr	r2, [r3, #20]
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	43db      	mvns	r3, r3
 8008b00:	4904      	ldr	r1, [pc, #16]	; (8008b14 <RCC_AHB2PeriphResetCmd+0x3c>)
 8008b02:	4013      	ands	r3, r2
 8008b04:	614b      	str	r3, [r1, #20]
}
 8008b06:	bf00      	nop
 8008b08:	370c      	adds	r7, #12
 8008b0a:	46bd      	mov	sp, r7
 8008b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b10:	4770      	bx	lr
 8008b12:	bf00      	nop
 8008b14:	40023800 	.word	0x40023800

08008b18 <RCC_AHB3PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB3PeriphResetCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
 8008b18:	b480      	push	{r7}
 8008b1a:	b083      	sub	sp, #12
 8008b1c:	af00      	add	r7, sp, #0
 8008b1e:	6078      	str	r0, [r7, #4]
 8008b20:	460b      	mov	r3, r1
 8008b22:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8008b24:	78fb      	ldrb	r3, [r7, #3]
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d006      	beq.n	8008b38 <RCC_AHB3PeriphResetCmd+0x20>
  {
    RCC->AHB3RSTR |= RCC_AHB3Periph;
 8008b2a:	4b0a      	ldr	r3, [pc, #40]	; (8008b54 <RCC_AHB3PeriphResetCmd+0x3c>)
 8008b2c:	699a      	ldr	r2, [r3, #24]
 8008b2e:	4909      	ldr	r1, [pc, #36]	; (8008b54 <RCC_AHB3PeriphResetCmd+0x3c>)
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	4313      	orrs	r3, r2
 8008b34:	618b      	str	r3, [r1, #24]
  }
  else
  {
    RCC->AHB3RSTR &= ~RCC_AHB3Periph;
  }
}
 8008b36:	e006      	b.n	8008b46 <RCC_AHB3PeriphResetCmd+0x2e>
    RCC->AHB3RSTR &= ~RCC_AHB3Periph;
 8008b38:	4b06      	ldr	r3, [pc, #24]	; (8008b54 <RCC_AHB3PeriphResetCmd+0x3c>)
 8008b3a:	699a      	ldr	r2, [r3, #24]
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	43db      	mvns	r3, r3
 8008b40:	4904      	ldr	r1, [pc, #16]	; (8008b54 <RCC_AHB3PeriphResetCmd+0x3c>)
 8008b42:	4013      	ands	r3, r2
 8008b44:	618b      	str	r3, [r1, #24]
}
 8008b46:	bf00      	nop
 8008b48:	370c      	adds	r7, #12
 8008b4a:	46bd      	mov	sp, r7
 8008b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b50:	4770      	bx	lr
 8008b52:	bf00      	nop
 8008b54:	40023800 	.word	0x40023800

08008b58 <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8008b58:	b480      	push	{r7}
 8008b5a:	b083      	sub	sp, #12
 8008b5c:	af00      	add	r7, sp, #0
 8008b5e:	6078      	str	r0, [r7, #4]
 8008b60:	460b      	mov	r3, r1
 8008b62:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8008b64:	78fb      	ldrb	r3, [r7, #3]
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d006      	beq.n	8008b78 <RCC_APB1PeriphResetCmd+0x20>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 8008b6a:	4b0a      	ldr	r3, [pc, #40]	; (8008b94 <RCC_APB1PeriphResetCmd+0x3c>)
 8008b6c:	6a1a      	ldr	r2, [r3, #32]
 8008b6e:	4909      	ldr	r1, [pc, #36]	; (8008b94 <RCC_APB1PeriphResetCmd+0x3c>)
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	4313      	orrs	r3, r2
 8008b74:	620b      	str	r3, [r1, #32]
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
  }
}
 8008b76:	e006      	b.n	8008b86 <RCC_APB1PeriphResetCmd+0x2e>
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 8008b78:	4b06      	ldr	r3, [pc, #24]	; (8008b94 <RCC_APB1PeriphResetCmd+0x3c>)
 8008b7a:	6a1a      	ldr	r2, [r3, #32]
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	43db      	mvns	r3, r3
 8008b80:	4904      	ldr	r1, [pc, #16]	; (8008b94 <RCC_APB1PeriphResetCmd+0x3c>)
 8008b82:	4013      	ands	r3, r2
 8008b84:	620b      	str	r3, [r1, #32]
}
 8008b86:	bf00      	nop
 8008b88:	370c      	adds	r7, #12
 8008b8a:	46bd      	mov	sp, r7
 8008b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b90:	4770      	bx	lr
 8008b92:	bf00      	nop
 8008b94:	40023800 	.word	0x40023800

08008b98 <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8008b98:	b480      	push	{r7}
 8008b9a:	b083      	sub	sp, #12
 8008b9c:	af00      	add	r7, sp, #0
 8008b9e:	6078      	str	r0, [r7, #4]
 8008ba0:	460b      	mov	r3, r1
 8008ba2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8008ba4:	78fb      	ldrb	r3, [r7, #3]
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d006      	beq.n	8008bb8 <RCC_APB2PeriphResetCmd+0x20>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 8008baa:	4b0a      	ldr	r3, [pc, #40]	; (8008bd4 <RCC_APB2PeriphResetCmd+0x3c>)
 8008bac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008bae:	4909      	ldr	r1, [pc, #36]	; (8008bd4 <RCC_APB2PeriphResetCmd+0x3c>)
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	4313      	orrs	r3, r2
 8008bb4:	624b      	str	r3, [r1, #36]	; 0x24
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
  }
}
 8008bb6:	e006      	b.n	8008bc6 <RCC_APB2PeriphResetCmd+0x2e>
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 8008bb8:	4b06      	ldr	r3, [pc, #24]	; (8008bd4 <RCC_APB2PeriphResetCmd+0x3c>)
 8008bba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	43db      	mvns	r3, r3
 8008bc0:	4904      	ldr	r1, [pc, #16]	; (8008bd4 <RCC_APB2PeriphResetCmd+0x3c>)
 8008bc2:	4013      	ands	r3, r2
 8008bc4:	624b      	str	r3, [r1, #36]	; 0x24
}
 8008bc6:	bf00      	nop
 8008bc8:	370c      	adds	r7, #12
 8008bca:	46bd      	mov	sp, r7
 8008bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd0:	4770      	bx	lr
 8008bd2:	bf00      	nop
 8008bd4:	40023800 	.word	0x40023800

08008bd8 <RCC_AHB1PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockLPModeCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8008bd8:	b480      	push	{r7}
 8008bda:	b083      	sub	sp, #12
 8008bdc:	af00      	add	r7, sp, #0
 8008bde:	6078      	str	r0, [r7, #4]
 8008be0:	460b      	mov	r3, r1
 8008be2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_LPMODE_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8008be4:	78fb      	ldrb	r3, [r7, #3]
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d006      	beq.n	8008bf8 <RCC_AHB1PeriphClockLPModeCmd+0x20>
  {
    RCC->AHB1LPENR |= RCC_AHB1Periph;
 8008bea:	4b0a      	ldr	r3, [pc, #40]	; (8008c14 <RCC_AHB1PeriphClockLPModeCmd+0x3c>)
 8008bec:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008bee:	4909      	ldr	r1, [pc, #36]	; (8008c14 <RCC_AHB1PeriphClockLPModeCmd+0x3c>)
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	4313      	orrs	r3, r2
 8008bf4:	650b      	str	r3, [r1, #80]	; 0x50
  }
  else
  {
    RCC->AHB1LPENR &= ~RCC_AHB1Periph;
  }
}
 8008bf6:	e006      	b.n	8008c06 <RCC_AHB1PeriphClockLPModeCmd+0x2e>
    RCC->AHB1LPENR &= ~RCC_AHB1Periph;
 8008bf8:	4b06      	ldr	r3, [pc, #24]	; (8008c14 <RCC_AHB1PeriphClockLPModeCmd+0x3c>)
 8008bfa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	43db      	mvns	r3, r3
 8008c00:	4904      	ldr	r1, [pc, #16]	; (8008c14 <RCC_AHB1PeriphClockLPModeCmd+0x3c>)
 8008c02:	4013      	ands	r3, r2
 8008c04:	650b      	str	r3, [r1, #80]	; 0x50
}
 8008c06:	bf00      	nop
 8008c08:	370c      	adds	r7, #12
 8008c0a:	46bd      	mov	sp, r7
 8008c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c10:	4770      	bx	lr
 8008c12:	bf00      	nop
 8008c14:	40023800 	.word	0x40023800

08008c18 <RCC_AHB2PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB2PeriphClockLPModeCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
 8008c18:	b480      	push	{r7}
 8008c1a:	b083      	sub	sp, #12
 8008c1c:	af00      	add	r7, sp, #0
 8008c1e:	6078      	str	r0, [r7, #4]
 8008c20:	460b      	mov	r3, r1
 8008c22:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8008c24:	78fb      	ldrb	r3, [r7, #3]
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d006      	beq.n	8008c38 <RCC_AHB2PeriphClockLPModeCmd+0x20>
  {
    RCC->AHB2LPENR |= RCC_AHB2Periph;
 8008c2a:	4b0a      	ldr	r3, [pc, #40]	; (8008c54 <RCC_AHB2PeriphClockLPModeCmd+0x3c>)
 8008c2c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008c2e:	4909      	ldr	r1, [pc, #36]	; (8008c54 <RCC_AHB2PeriphClockLPModeCmd+0x3c>)
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	4313      	orrs	r3, r2
 8008c34:	654b      	str	r3, [r1, #84]	; 0x54
  }
  else
  {
    RCC->AHB2LPENR &= ~RCC_AHB2Periph;
  }
}
 8008c36:	e006      	b.n	8008c46 <RCC_AHB2PeriphClockLPModeCmd+0x2e>
    RCC->AHB2LPENR &= ~RCC_AHB2Periph;
 8008c38:	4b06      	ldr	r3, [pc, #24]	; (8008c54 <RCC_AHB2PeriphClockLPModeCmd+0x3c>)
 8008c3a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	43db      	mvns	r3, r3
 8008c40:	4904      	ldr	r1, [pc, #16]	; (8008c54 <RCC_AHB2PeriphClockLPModeCmd+0x3c>)
 8008c42:	4013      	ands	r3, r2
 8008c44:	654b      	str	r3, [r1, #84]	; 0x54
}
 8008c46:	bf00      	nop
 8008c48:	370c      	adds	r7, #12
 8008c4a:	46bd      	mov	sp, r7
 8008c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c50:	4770      	bx	lr
 8008c52:	bf00      	nop
 8008c54:	40023800 	.word	0x40023800

08008c58 <RCC_AHB3PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB3PeriphClockLPModeCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
 8008c58:	b480      	push	{r7}
 8008c5a:	b083      	sub	sp, #12
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	6078      	str	r0, [r7, #4]
 8008c60:	460b      	mov	r3, r1
 8008c62:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8008c64:	78fb      	ldrb	r3, [r7, #3]
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d006      	beq.n	8008c78 <RCC_AHB3PeriphClockLPModeCmd+0x20>
  {
    RCC->AHB3LPENR |= RCC_AHB3Periph;
 8008c6a:	4b0a      	ldr	r3, [pc, #40]	; (8008c94 <RCC_AHB3PeriphClockLPModeCmd+0x3c>)
 8008c6c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008c6e:	4909      	ldr	r1, [pc, #36]	; (8008c94 <RCC_AHB3PeriphClockLPModeCmd+0x3c>)
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	4313      	orrs	r3, r2
 8008c74:	658b      	str	r3, [r1, #88]	; 0x58
  }
  else
  {
    RCC->AHB3LPENR &= ~RCC_AHB3Periph;
  }
}
 8008c76:	e006      	b.n	8008c86 <RCC_AHB3PeriphClockLPModeCmd+0x2e>
    RCC->AHB3LPENR &= ~RCC_AHB3Periph;
 8008c78:	4b06      	ldr	r3, [pc, #24]	; (8008c94 <RCC_AHB3PeriphClockLPModeCmd+0x3c>)
 8008c7a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	43db      	mvns	r3, r3
 8008c80:	4904      	ldr	r1, [pc, #16]	; (8008c94 <RCC_AHB3PeriphClockLPModeCmd+0x3c>)
 8008c82:	4013      	ands	r3, r2
 8008c84:	658b      	str	r3, [r1, #88]	; 0x58
}
 8008c86:	bf00      	nop
 8008c88:	370c      	adds	r7, #12
 8008c8a:	46bd      	mov	sp, r7
 8008c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c90:	4770      	bx	lr
 8008c92:	bf00      	nop
 8008c94:	40023800 	.word	0x40023800

08008c98 <RCC_APB1PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockLPModeCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8008c98:	b480      	push	{r7}
 8008c9a:	b083      	sub	sp, #12
 8008c9c:	af00      	add	r7, sp, #0
 8008c9e:	6078      	str	r0, [r7, #4]
 8008ca0:	460b      	mov	r3, r1
 8008ca2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8008ca4:	78fb      	ldrb	r3, [r7, #3]
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d006      	beq.n	8008cb8 <RCC_APB1PeriphClockLPModeCmd+0x20>
  {
    RCC->APB1LPENR |= RCC_APB1Periph;
 8008caa:	4b0a      	ldr	r3, [pc, #40]	; (8008cd4 <RCC_APB1PeriphClockLPModeCmd+0x3c>)
 8008cac:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8008cae:	4909      	ldr	r1, [pc, #36]	; (8008cd4 <RCC_APB1PeriphClockLPModeCmd+0x3c>)
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	4313      	orrs	r3, r2
 8008cb4:	660b      	str	r3, [r1, #96]	; 0x60
  }
  else
  {
    RCC->APB1LPENR &= ~RCC_APB1Periph;
  }
}
 8008cb6:	e006      	b.n	8008cc6 <RCC_APB1PeriphClockLPModeCmd+0x2e>
    RCC->APB1LPENR &= ~RCC_APB1Periph;
 8008cb8:	4b06      	ldr	r3, [pc, #24]	; (8008cd4 <RCC_APB1PeriphClockLPModeCmd+0x3c>)
 8008cba:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	43db      	mvns	r3, r3
 8008cc0:	4904      	ldr	r1, [pc, #16]	; (8008cd4 <RCC_APB1PeriphClockLPModeCmd+0x3c>)
 8008cc2:	4013      	ands	r3, r2
 8008cc4:	660b      	str	r3, [r1, #96]	; 0x60
}
 8008cc6:	bf00      	nop
 8008cc8:	370c      	adds	r7, #12
 8008cca:	46bd      	mov	sp, r7
 8008ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd0:	4770      	bx	lr
 8008cd2:	bf00      	nop
 8008cd4:	40023800 	.word	0x40023800

08008cd8 <RCC_APB2PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockLPModeCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8008cd8:	b480      	push	{r7}
 8008cda:	b083      	sub	sp, #12
 8008cdc:	af00      	add	r7, sp, #0
 8008cde:	6078      	str	r0, [r7, #4]
 8008ce0:	460b      	mov	r3, r1
 8008ce2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8008ce4:	78fb      	ldrb	r3, [r7, #3]
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d006      	beq.n	8008cf8 <RCC_APB2PeriphClockLPModeCmd+0x20>
  {
    RCC->APB2LPENR |= RCC_APB2Periph;
 8008cea:	4b0a      	ldr	r3, [pc, #40]	; (8008d14 <RCC_APB2PeriphClockLPModeCmd+0x3c>)
 8008cec:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8008cee:	4909      	ldr	r1, [pc, #36]	; (8008d14 <RCC_APB2PeriphClockLPModeCmd+0x3c>)
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	4313      	orrs	r3, r2
 8008cf4:	664b      	str	r3, [r1, #100]	; 0x64
  }
  else
  {
    RCC->APB2LPENR &= ~RCC_APB2Periph;
  }
}
 8008cf6:	e006      	b.n	8008d06 <RCC_APB2PeriphClockLPModeCmd+0x2e>
    RCC->APB2LPENR &= ~RCC_APB2Periph;
 8008cf8:	4b06      	ldr	r3, [pc, #24]	; (8008d14 <RCC_APB2PeriphClockLPModeCmd+0x3c>)
 8008cfa:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	43db      	mvns	r3, r3
 8008d00:	4904      	ldr	r1, [pc, #16]	; (8008d14 <RCC_APB2PeriphClockLPModeCmd+0x3c>)
 8008d02:	4013      	ands	r3, r2
 8008d04:	664b      	str	r3, [r1, #100]	; 0x64
}
 8008d06:	bf00      	nop
 8008d08:	370c      	adds	r7, #12
 8008d0a:	46bd      	mov	sp, r7
 8008d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d10:	4770      	bx	lr
 8008d12:	bf00      	nop
 8008d14:	40023800 	.word	0x40023800

08008d18 <RCC_ITConfig>:
  * @param  NewState: new state of the specified RCC interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
{
 8008d18:	b480      	push	{r7}
 8008d1a:	b083      	sub	sp, #12
 8008d1c:	af00      	add	r7, sp, #0
 8008d1e:	4603      	mov	r3, r0
 8008d20:	460a      	mov	r2, r1
 8008d22:	71fb      	strb	r3, [r7, #7]
 8008d24:	4613      	mov	r3, r2
 8008d26:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8008d28:	79bb      	ldrb	r3, [r7, #6]
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d008      	beq.n	8008d40 <RCC_ITConfig+0x28>
  {
    /* Perform Byte access to RCC_CIR[14:8] bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
 8008d2e:	4b0c      	ldr	r3, [pc, #48]	; (8008d60 <RCC_ITConfig+0x48>)
 8008d30:	781b      	ldrb	r3, [r3, #0]
 8008d32:	b2da      	uxtb	r2, r3
 8008d34:	490a      	ldr	r1, [pc, #40]	; (8008d60 <RCC_ITConfig+0x48>)
 8008d36:	79fb      	ldrb	r3, [r7, #7]
 8008d38:	4313      	orrs	r3, r2
 8008d3a:	b2db      	uxtb	r3, r3
 8008d3c:	700b      	strb	r3, [r1, #0]
  else
  {
    /* Perform Byte access to RCC_CIR[14:8] bits to disable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
  }
}
 8008d3e:	e009      	b.n	8008d54 <RCC_ITConfig+0x3c>
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
 8008d40:	4b07      	ldr	r3, [pc, #28]	; (8008d60 <RCC_ITConfig+0x48>)
 8008d42:	781b      	ldrb	r3, [r3, #0]
 8008d44:	b2da      	uxtb	r2, r3
 8008d46:	79fb      	ldrb	r3, [r7, #7]
 8008d48:	43db      	mvns	r3, r3
 8008d4a:	b2db      	uxtb	r3, r3
 8008d4c:	4904      	ldr	r1, [pc, #16]	; (8008d60 <RCC_ITConfig+0x48>)
 8008d4e:	4013      	ands	r3, r2
 8008d50:	b2db      	uxtb	r3, r3
 8008d52:	700b      	strb	r3, [r1, #0]
}
 8008d54:	bf00      	nop
 8008d56:	370c      	adds	r7, #12
 8008d58:	46bd      	mov	sp, r7
 8008d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d5e:	4770      	bx	lr
 8008d60:	4002380d 	.word	0x4002380d

08008d64 <RCC_GetFlagStatus>:
  *            @arg RCC_FLAG_WWDGRST: Window Watchdog reset
  *            @arg RCC_FLAG_LPWRRST: Low Power reset
  * @retval The new state of RCC_FLAG (SET or RESET).
  */
FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
{
 8008d64:	b480      	push	{r7}
 8008d66:	b087      	sub	sp, #28
 8008d68:	af00      	add	r7, sp, #0
 8008d6a:	4603      	mov	r3, r0
 8008d6c:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0;
 8008d6e:	2300      	movs	r3, #0
 8008d70:	60fb      	str	r3, [r7, #12]
  uint32_t statusreg = 0;
 8008d72:	2300      	movs	r3, #0
 8008d74:	617b      	str	r3, [r7, #20]
  FlagStatus bitstatus = RESET;
 8008d76:	2300      	movs	r3, #0
 8008d78:	74fb      	strb	r3, [r7, #19]

  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
 8008d7a:	79fb      	ldrb	r3, [r7, #7]
 8008d7c:	095b      	lsrs	r3, r3, #5
 8008d7e:	b2db      	uxtb	r3, r3
 8008d80:	60fb      	str	r3, [r7, #12]
  if (tmp == 1)               /* The flag to check is in CR register */
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	2b01      	cmp	r3, #1
 8008d86:	d103      	bne.n	8008d90 <RCC_GetFlagStatus+0x2c>
  {
    statusreg = RCC->CR;
 8008d88:	4b12      	ldr	r3, [pc, #72]	; (8008dd4 <RCC_GetFlagStatus+0x70>)
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	617b      	str	r3, [r7, #20]
 8008d8e:	e009      	b.n	8008da4 <RCC_GetFlagStatus+0x40>
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	2b02      	cmp	r3, #2
 8008d94:	d103      	bne.n	8008d9e <RCC_GetFlagStatus+0x3a>
  {
    statusreg = RCC->BDCR;
 8008d96:	4b0f      	ldr	r3, [pc, #60]	; (8008dd4 <RCC_GetFlagStatus+0x70>)
 8008d98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d9a:	617b      	str	r3, [r7, #20]
 8008d9c:	e002      	b.n	8008da4 <RCC_GetFlagStatus+0x40>
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
 8008d9e:	4b0d      	ldr	r3, [pc, #52]	; (8008dd4 <RCC_GetFlagStatus+0x70>)
 8008da0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008da2:	617b      	str	r3, [r7, #20]
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_MASK;
 8008da4:	79fb      	ldrb	r3, [r7, #7]
 8008da6:	f003 031f 	and.w	r3, r3, #31
 8008daa:	60fb      	str	r3, [r7, #12]
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 8008dac:	697a      	ldr	r2, [r7, #20]
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	fa22 f303 	lsr.w	r3, r2, r3
 8008db4:	f003 0301 	and.w	r3, r3, #1
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d002      	beq.n	8008dc2 <RCC_GetFlagStatus+0x5e>
  {
    bitstatus = SET;
 8008dbc:	2301      	movs	r3, #1
 8008dbe:	74fb      	strb	r3, [r7, #19]
 8008dc0:	e001      	b.n	8008dc6 <RCC_GetFlagStatus+0x62>
  }
  else
  {
    bitstatus = RESET;
 8008dc2:	2300      	movs	r3, #0
 8008dc4:	74fb      	strb	r3, [r7, #19]
  }
  /* Return the flag status */
  return bitstatus;
 8008dc6:	7cfb      	ldrb	r3, [r7, #19]
}
 8008dc8:	4618      	mov	r0, r3
 8008dca:	371c      	adds	r7, #28
 8008dcc:	46bd      	mov	sp, r7
 8008dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd2:	4770      	bx	lr
 8008dd4:	40023800 	.word	0x40023800

08008dd8 <RCC_ClearFlag>:
  *         RCC_FLAG_IWDGRST, RCC_FLAG_WWDGRST, RCC_FLAG_LPWRRST
  * @param  None
  * @retval None
  */
void RCC_ClearFlag(void)
{
 8008dd8:	b480      	push	{r7}
 8008dda:	af00      	add	r7, sp, #0
  /* Set RMVF bit to clear the reset flags */
  RCC->CSR |= RCC_CSR_RMVF;
 8008ddc:	4b05      	ldr	r3, [pc, #20]	; (8008df4 <RCC_ClearFlag+0x1c>)
 8008dde:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008de0:	4a04      	ldr	r2, [pc, #16]	; (8008df4 <RCC_ClearFlag+0x1c>)
 8008de2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008de6:	6753      	str	r3, [r2, #116]	; 0x74
}
 8008de8:	bf00      	nop
 8008dea:	46bd      	mov	sp, r7
 8008dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df0:	4770      	bx	lr
 8008df2:	bf00      	nop
 8008df4:	40023800 	.word	0x40023800

08008df8 <RCC_GetITStatus>:
  *            @arg RCC_IT_PLLSAIRDY: PLLSAI clock ready interrupt (only for STM32F42xxx/43xxx devices)    
  *            @arg RCC_IT_CSS: Clock Security System interrupt
  * @retval The new state of RCC_IT (SET or RESET).
  */
ITStatus RCC_GetITStatus(uint8_t RCC_IT)
{
 8008df8:	b480      	push	{r7}
 8008dfa:	b085      	sub	sp, #20
 8008dfc:	af00      	add	r7, sp, #0
 8008dfe:	4603      	mov	r3, r0
 8008e00:	71fb      	strb	r3, [r7, #7]
  ITStatus bitstatus = RESET;
 8008e02:	2300      	movs	r3, #0
 8008e04:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_RCC_GET_IT(RCC_IT));

  /* Check the status of the specified RCC interrupt */
  if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
 8008e06:	4b09      	ldr	r3, [pc, #36]	; (8008e2c <RCC_GetITStatus+0x34>)
 8008e08:	68da      	ldr	r2, [r3, #12]
 8008e0a:	79fb      	ldrb	r3, [r7, #7]
 8008e0c:	4013      	ands	r3, r2
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d002      	beq.n	8008e18 <RCC_GetITStatus+0x20>
  {
    bitstatus = SET;
 8008e12:	2301      	movs	r3, #1
 8008e14:	73fb      	strb	r3, [r7, #15]
 8008e16:	e001      	b.n	8008e1c <RCC_GetITStatus+0x24>
  }
  else
  {
    bitstatus = RESET;
 8008e18:	2300      	movs	r3, #0
 8008e1a:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the RCC_IT status */
  return  bitstatus;
 8008e1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e1e:	4618      	mov	r0, r3
 8008e20:	3714      	adds	r7, #20
 8008e22:	46bd      	mov	sp, r7
 8008e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e28:	4770      	bx	lr
 8008e2a:	bf00      	nop
 8008e2c:	40023800 	.word	0x40023800

08008e30 <RCC_ClearITPendingBit>:
  *            @arg RCC_IT_PLLSAIRDY: PLLSAI ready interrupt (only for STM32F42xxx/43xxx devices)   
  *            @arg RCC_IT_CSS: Clock Security System interrupt
  * @retval None
  */
void RCC_ClearITPendingBit(uint8_t RCC_IT)
{
 8008e30:	b480      	push	{r7}
 8008e32:	b083      	sub	sp, #12
 8008e34:	af00      	add	r7, sp, #0
 8008e36:	4603      	mov	r3, r0
 8008e38:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_CLEAR_IT(RCC_IT));

  /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
     pending bits */
  *(__IO uint8_t *) CIR_BYTE3_ADDRESS = RCC_IT;
 8008e3a:	4a04      	ldr	r2, [pc, #16]	; (8008e4c <RCC_ClearITPendingBit+0x1c>)
 8008e3c:	79fb      	ldrb	r3, [r7, #7]
 8008e3e:	7013      	strb	r3, [r2, #0]
}
 8008e40:	bf00      	nop
 8008e42:	370c      	adds	r7, #12
 8008e44:	46bd      	mov	sp, r7
 8008e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e4a:	4770      	bx	lr
 8008e4c:	4002380e 	.word	0x4002380e

08008e50 <RNG_DeInit>:
  * @brief  De-initializes the RNG peripheral registers to their default reset values.
  * @param  None
  * @retval None
  */
void RNG_DeInit(void)
{
 8008e50:	b580      	push	{r7, lr}
 8008e52:	af00      	add	r7, sp, #0
  /* Enable RNG reset state */
  RCC_AHB2PeriphResetCmd(RCC_AHB2Periph_RNG, ENABLE);
 8008e54:	2101      	movs	r1, #1
 8008e56:	2040      	movs	r0, #64	; 0x40
 8008e58:	f7ff fe3e 	bl	8008ad8 <RCC_AHB2PeriphResetCmd>

  /* Release RNG from reset state */
  RCC_AHB2PeriphResetCmd(RCC_AHB2Periph_RNG, DISABLE);
 8008e5c:	2100      	movs	r1, #0
 8008e5e:	2040      	movs	r0, #64	; 0x40
 8008e60:	f7ff fe3a 	bl	8008ad8 <RCC_AHB2PeriphResetCmd>
}
 8008e64:	bf00      	nop
 8008e66:	bd80      	pop	{r7, pc}

08008e68 <RNG_Cmd>:
  * @param  NewState: new state of the RNG peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RNG_Cmd(FunctionalState NewState)
{
 8008e68:	b480      	push	{r7}
 8008e6a:	b083      	sub	sp, #12
 8008e6c:	af00      	add	r7, sp, #0
 8008e6e:	4603      	mov	r3, r0
 8008e70:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8008e72:	79fb      	ldrb	r3, [r7, #7]
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d006      	beq.n	8008e86 <RNG_Cmd+0x1e>
  {
    /* Enable the RNG */
    RNG->CR |= RNG_CR_RNGEN;
 8008e78:	4b09      	ldr	r3, [pc, #36]	; (8008ea0 <RNG_Cmd+0x38>)
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	4a08      	ldr	r2, [pc, #32]	; (8008ea0 <RNG_Cmd+0x38>)
 8008e7e:	f043 0304 	orr.w	r3, r3, #4
 8008e82:	6013      	str	r3, [r2, #0]
  else
  {
    /* Disable the RNG */
    RNG->CR &= ~RNG_CR_RNGEN;
  }
}
 8008e84:	e005      	b.n	8008e92 <RNG_Cmd+0x2a>
    RNG->CR &= ~RNG_CR_RNGEN;
 8008e86:	4b06      	ldr	r3, [pc, #24]	; (8008ea0 <RNG_Cmd+0x38>)
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	4a05      	ldr	r2, [pc, #20]	; (8008ea0 <RNG_Cmd+0x38>)
 8008e8c:	f023 0304 	bic.w	r3, r3, #4
 8008e90:	6013      	str	r3, [r2, #0]
}
 8008e92:	bf00      	nop
 8008e94:	370c      	adds	r7, #12
 8008e96:	46bd      	mov	sp, r7
 8008e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e9c:	4770      	bx	lr
 8008e9e:	bf00      	nop
 8008ea0:	50060800 	.word	0x50060800

08008ea4 <RNG_GetRandomNumber>:
  *         
  * @param  None
  * @retval 32-bit random number.
  */
uint32_t RNG_GetRandomNumber(void)
{
 8008ea4:	b480      	push	{r7}
 8008ea6:	af00      	add	r7, sp, #0
  /* Return the 32 bit random number from the DR register */
  return RNG->DR;
 8008ea8:	4b03      	ldr	r3, [pc, #12]	; (8008eb8 <RNG_GetRandomNumber+0x14>)
 8008eaa:	689b      	ldr	r3, [r3, #8]
}
 8008eac:	4618      	mov	r0, r3
 8008eae:	46bd      	mov	sp, r7
 8008eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb4:	4770      	bx	lr
 8008eb6:	bf00      	nop
 8008eb8:	50060800 	.word	0x50060800

08008ebc <RNG_ITConfig>:
  * @param  NewState: new state of the RNG interrupt.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RNG_ITConfig(FunctionalState NewState)
{
 8008ebc:	b480      	push	{r7}
 8008ebe:	b083      	sub	sp, #12
 8008ec0:	af00      	add	r7, sp, #0
 8008ec2:	4603      	mov	r3, r0
 8008ec4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8008ec6:	79fb      	ldrb	r3, [r7, #7]
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d006      	beq.n	8008eda <RNG_ITConfig+0x1e>
  {
    /* Enable the RNG interrupt */
    RNG->CR |= RNG_CR_IE;
 8008ecc:	4b09      	ldr	r3, [pc, #36]	; (8008ef4 <RNG_ITConfig+0x38>)
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	4a08      	ldr	r2, [pc, #32]	; (8008ef4 <RNG_ITConfig+0x38>)
 8008ed2:	f043 0308 	orr.w	r3, r3, #8
 8008ed6:	6013      	str	r3, [r2, #0]
  else
  {
    /* Disable the RNG interrupt */
    RNG->CR &= ~RNG_CR_IE;
  }
}
 8008ed8:	e005      	b.n	8008ee6 <RNG_ITConfig+0x2a>
    RNG->CR &= ~RNG_CR_IE;
 8008eda:	4b06      	ldr	r3, [pc, #24]	; (8008ef4 <RNG_ITConfig+0x38>)
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	4a05      	ldr	r2, [pc, #20]	; (8008ef4 <RNG_ITConfig+0x38>)
 8008ee0:	f023 0308 	bic.w	r3, r3, #8
 8008ee4:	6013      	str	r3, [r2, #0]
}
 8008ee6:	bf00      	nop
 8008ee8:	370c      	adds	r7, #12
 8008eea:	46bd      	mov	sp, r7
 8008eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef0:	4770      	bx	lr
 8008ef2:	bf00      	nop
 8008ef4:	50060800 	.word	0x50060800

08008ef8 <RNG_GetFlagStatus>:
  *            @arg RNG_FLAG_CECS: Clock Error Current flag.
  *            @arg RNG_FLAG_SECS: Seed Error Current flag.
  * @retval The new state of RNG_FLAG (SET or RESET).
  */
FlagStatus RNG_GetFlagStatus(uint8_t RNG_FLAG)
{
 8008ef8:	b480      	push	{r7}
 8008efa:	b085      	sub	sp, #20
 8008efc:	af00      	add	r7, sp, #0
 8008efe:	4603      	mov	r3, r0
 8008f00:	71fb      	strb	r3, [r7, #7]
  FlagStatus bitstatus = RESET;
 8008f02:	2300      	movs	r3, #0
 8008f04:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_RNG_GET_FLAG(RNG_FLAG));

  /* Check the status of the specified RNG flag */
  if ((RNG->SR & RNG_FLAG) != (uint8_t)RESET)
 8008f06:	4b09      	ldr	r3, [pc, #36]	; (8008f2c <RNG_GetFlagStatus+0x34>)
 8008f08:	685a      	ldr	r2, [r3, #4]
 8008f0a:	79fb      	ldrb	r3, [r7, #7]
 8008f0c:	4013      	ands	r3, r2
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d002      	beq.n	8008f18 <RNG_GetFlagStatus+0x20>
  {
    /* RNG_FLAG is set */
    bitstatus = SET;
 8008f12:	2301      	movs	r3, #1
 8008f14:	73fb      	strb	r3, [r7, #15]
 8008f16:	e001      	b.n	8008f1c <RNG_GetFlagStatus+0x24>
  }
  else
  {
    /* RNG_FLAG is reset */
    bitstatus = RESET;
 8008f18:	2300      	movs	r3, #0
 8008f1a:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the RNG_FLAG status */
  return  bitstatus;
 8008f1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f1e:	4618      	mov	r0, r3
 8008f20:	3714      	adds	r7, #20
 8008f22:	46bd      	mov	sp, r7
 8008f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f28:	4770      	bx	lr
 8008f2a:	bf00      	nop
 8008f2c:	50060800 	.word	0x50060800

08008f30 <RNG_ClearFlag>:
  *         This flag is cleared only by reading the Random number data (using 
  *         RNG_GetRandomNumber() function).                           
  * @retval None
  */
void RNG_ClearFlag(uint8_t RNG_FLAG)
{
 8008f30:	b480      	push	{r7}
 8008f32:	b083      	sub	sp, #12
 8008f34:	af00      	add	r7, sp, #0
 8008f36:	4603      	mov	r3, r0
 8008f38:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RNG_CLEAR_FLAG(RNG_FLAG));
  /* Clear the selected RNG flags */
  RNG->SR = ~(uint32_t)(((uint32_t)RNG_FLAG) << 4);
 8008f3a:	79fb      	ldrb	r3, [r7, #7]
 8008f3c:	011b      	lsls	r3, r3, #4
 8008f3e:	4a04      	ldr	r2, [pc, #16]	; (8008f50 <RNG_ClearFlag+0x20>)
 8008f40:	43db      	mvns	r3, r3
 8008f42:	6053      	str	r3, [r2, #4]
}
 8008f44:	bf00      	nop
 8008f46:	370c      	adds	r7, #12
 8008f48:	46bd      	mov	sp, r7
 8008f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f4e:	4770      	bx	lr
 8008f50:	50060800 	.word	0x50060800

08008f54 <RNG_GetITStatus>:
  *            @arg RNG_IT_CEI: Clock Error Interrupt.
  *            @arg RNG_IT_SEI: Seed Error Interrupt.                   
  * @retval The new state of RNG_IT (SET or RESET).
  */
ITStatus RNG_GetITStatus(uint8_t RNG_IT)
{
 8008f54:	b480      	push	{r7}
 8008f56:	b085      	sub	sp, #20
 8008f58:	af00      	add	r7, sp, #0
 8008f5a:	4603      	mov	r3, r0
 8008f5c:	71fb      	strb	r3, [r7, #7]
  ITStatus bitstatus = RESET;
 8008f5e:	2300      	movs	r3, #0
 8008f60:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_RNG_GET_IT(RNG_IT));

  /* Check the status of the specified RNG interrupt */
  if ((RNG->SR & RNG_IT) != (uint8_t)RESET)
 8008f62:	4b09      	ldr	r3, [pc, #36]	; (8008f88 <RNG_GetITStatus+0x34>)
 8008f64:	685a      	ldr	r2, [r3, #4]
 8008f66:	79fb      	ldrb	r3, [r7, #7]
 8008f68:	4013      	ands	r3, r2
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d002      	beq.n	8008f74 <RNG_GetITStatus+0x20>
  {
    /* RNG_IT is set */
    bitstatus = SET;
 8008f6e:	2301      	movs	r3, #1
 8008f70:	73fb      	strb	r3, [r7, #15]
 8008f72:	e001      	b.n	8008f78 <RNG_GetITStatus+0x24>
  }
  else
  {
    /* RNG_IT is reset */
    bitstatus = RESET;
 8008f74:	2300      	movs	r3, #0
 8008f76:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the RNG_IT status */
  return bitstatus;
 8008f78:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f7a:	4618      	mov	r0, r3
 8008f7c:	3714      	adds	r7, #20
 8008f7e:	46bd      	mov	sp, r7
 8008f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f84:	4770      	bx	lr
 8008f86:	bf00      	nop
 8008f88:	50060800 	.word	0x50060800

08008f8c <RNG_ClearITPendingBit>:
  *            @arg RNG_IT_CEI: Clock Error Interrupt.
  *            @arg RNG_IT_SEI: Seed Error Interrupt.
  * @retval None
  */
void RNG_ClearITPendingBit(uint8_t RNG_IT)
{
 8008f8c:	b480      	push	{r7}
 8008f8e:	b083      	sub	sp, #12
 8008f90:	af00      	add	r7, sp, #0
 8008f92:	4603      	mov	r3, r0
 8008f94:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RNG_IT(RNG_IT));

  /* Clear the selected RNG interrupt pending bit */
  RNG->SR = (uint8_t)~RNG_IT;
 8008f96:	79fb      	ldrb	r3, [r7, #7]
 8008f98:	43db      	mvns	r3, r3
 8008f9a:	b2da      	uxtb	r2, r3
 8008f9c:	4b03      	ldr	r3, [pc, #12]	; (8008fac <RNG_ClearITPendingBit+0x20>)
 8008f9e:	605a      	str	r2, [r3, #4]
}
 8008fa0:	bf00      	nop
 8008fa2:	370c      	adds	r7, #12
 8008fa4:	46bd      	mov	sp, r7
 8008fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008faa:	4770      	bx	lr
 8008fac:	50060800 	.word	0x50060800

08008fb0 <RTC_DeInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC registers are deinitialized
  *          - ERROR: RTC registers are not deinitialized
  */
ErrorStatus RTC_DeInit(void)
{
 8008fb0:	b580      	push	{r7, lr}
 8008fb2:	b084      	sub	sp, #16
 8008fb4:	af00      	add	r7, sp, #0
  __IO uint32_t wutcounter = 0x00;
 8008fb6:	2300      	movs	r3, #0
 8008fb8:	607b      	str	r3, [r7, #4]
  uint32_t wutwfstatus = 0x00;
 8008fba:	2300      	movs	r3, #0
 8008fbc:	60bb      	str	r3, [r7, #8]
  ErrorStatus status = ERROR;
 8008fbe:	2300      	movs	r3, #0
 8008fc0:	73fb      	strb	r3, [r7, #15]
  
  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8008fc2:	4b36      	ldr	r3, [pc, #216]	; (800909c <RTC_DeInit+0xec>)
 8008fc4:	22ca      	movs	r2, #202	; 0xca
 8008fc6:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 8008fc8:	4b34      	ldr	r3, [pc, #208]	; (800909c <RTC_DeInit+0xec>)
 8008fca:	2253      	movs	r2, #83	; 0x53
 8008fcc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode() == ERROR)
 8008fce:	f000 f8d3 	bl	8009178 <RTC_EnterInitMode>
 8008fd2:	4603      	mov	r3, r0
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d102      	bne.n	8008fde <RTC_DeInit+0x2e>
  {
    status = ERROR;
 8008fd8:	2300      	movs	r3, #0
 8008fda:	73fb      	strb	r3, [r7, #15]
 8008fdc:	e055      	b.n	800908a <RTC_DeInit+0xda>
  }  
  else
  {
    /* Reset TR, DR and CR registers */
    RTC->TR = (uint32_t)0x00000000;
 8008fde:	4b2f      	ldr	r3, [pc, #188]	; (800909c <RTC_DeInit+0xec>)
 8008fe0:	2200      	movs	r2, #0
 8008fe2:	601a      	str	r2, [r3, #0]
    RTC->DR = (uint32_t)0x00002101;
 8008fe4:	4b2d      	ldr	r3, [pc, #180]	; (800909c <RTC_DeInit+0xec>)
 8008fe6:	f242 1201 	movw	r2, #8449	; 0x2101
 8008fea:	605a      	str	r2, [r3, #4]
    /* Reset All CR bits except CR[2:0] */
    RTC->CR &= (uint32_t)0x00000007;
 8008fec:	4b2b      	ldr	r3, [pc, #172]	; (800909c <RTC_DeInit+0xec>)
 8008fee:	689b      	ldr	r3, [r3, #8]
 8008ff0:	4a2a      	ldr	r2, [pc, #168]	; (800909c <RTC_DeInit+0xec>)
 8008ff2:	f003 0307 	and.w	r3, r3, #7
 8008ff6:	6093      	str	r3, [r2, #8]
  
    /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
    do
    {
      wutwfstatus = RTC->ISR & RTC_ISR_WUTWF;
 8008ff8:	4b28      	ldr	r3, [pc, #160]	; (800909c <RTC_DeInit+0xec>)
 8008ffa:	68db      	ldr	r3, [r3, #12]
 8008ffc:	f003 0304 	and.w	r3, r3, #4
 8009000:	60bb      	str	r3, [r7, #8]
      wutcounter++;  
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	3301      	adds	r3, #1
 8009006:	607b      	str	r3, [r7, #4]
    } while((wutcounter != INITMODE_TIMEOUT) && (wutwfstatus == 0x00));
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800900e:	d002      	beq.n	8009016 <RTC_DeInit+0x66>
 8009010:	68bb      	ldr	r3, [r7, #8]
 8009012:	2b00      	cmp	r3, #0
 8009014:	d0f0      	beq.n	8008ff8 <RTC_DeInit+0x48>
    
    if ((RTC->ISR & RTC_ISR_WUTWF) == RESET)
 8009016:	4b21      	ldr	r3, [pc, #132]	; (800909c <RTC_DeInit+0xec>)
 8009018:	68db      	ldr	r3, [r3, #12]
 800901a:	f003 0304 	and.w	r3, r3, #4
 800901e:	2b00      	cmp	r3, #0
 8009020:	d102      	bne.n	8009028 <RTC_DeInit+0x78>
    {
      status = ERROR;
 8009022:	2300      	movs	r3, #0
 8009024:	73fb      	strb	r3, [r7, #15]
 8009026:	e030      	b.n	800908a <RTC_DeInit+0xda>
    }
    else
    {
      /* Reset all RTC CR register bits */
      RTC->CR &= (uint32_t)0x00000000;
 8009028:	4b1c      	ldr	r3, [pc, #112]	; (800909c <RTC_DeInit+0xec>)
 800902a:	689b      	ldr	r3, [r3, #8]
 800902c:	4b1b      	ldr	r3, [pc, #108]	; (800909c <RTC_DeInit+0xec>)
 800902e:	2200      	movs	r2, #0
 8009030:	609a      	str	r2, [r3, #8]
      RTC->WUTR = (uint32_t)0x0000FFFF;
 8009032:	4b1a      	ldr	r3, [pc, #104]	; (800909c <RTC_DeInit+0xec>)
 8009034:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009038:	615a      	str	r2, [r3, #20]
      RTC->PRER = (uint32_t)0x007F00FF;
 800903a:	4b18      	ldr	r3, [pc, #96]	; (800909c <RTC_DeInit+0xec>)
 800903c:	4a18      	ldr	r2, [pc, #96]	; (80090a0 <RTC_DeInit+0xf0>)
 800903e:	611a      	str	r2, [r3, #16]
      RTC->CALIBR = (uint32_t)0x00000000;
 8009040:	4b16      	ldr	r3, [pc, #88]	; (800909c <RTC_DeInit+0xec>)
 8009042:	2200      	movs	r2, #0
 8009044:	619a      	str	r2, [r3, #24]
      RTC->ALRMAR = (uint32_t)0x00000000;        
 8009046:	4b15      	ldr	r3, [pc, #84]	; (800909c <RTC_DeInit+0xec>)
 8009048:	2200      	movs	r2, #0
 800904a:	61da      	str	r2, [r3, #28]
      RTC->ALRMBR = (uint32_t)0x00000000;
 800904c:	4b13      	ldr	r3, [pc, #76]	; (800909c <RTC_DeInit+0xec>)
 800904e:	2200      	movs	r2, #0
 8009050:	621a      	str	r2, [r3, #32]
      RTC->SHIFTR = (uint32_t)0x00000000;
 8009052:	4b12      	ldr	r3, [pc, #72]	; (800909c <RTC_DeInit+0xec>)
 8009054:	2200      	movs	r2, #0
 8009056:	62da      	str	r2, [r3, #44]	; 0x2c
      RTC->CALR = (uint32_t)0x00000000;
 8009058:	4b10      	ldr	r3, [pc, #64]	; (800909c <RTC_DeInit+0xec>)
 800905a:	2200      	movs	r2, #0
 800905c:	63da      	str	r2, [r3, #60]	; 0x3c
      RTC->ALRMASSR = (uint32_t)0x00000000;
 800905e:	4b0f      	ldr	r3, [pc, #60]	; (800909c <RTC_DeInit+0xec>)
 8009060:	2200      	movs	r2, #0
 8009062:	645a      	str	r2, [r3, #68]	; 0x44
      RTC->ALRMBSSR = (uint32_t)0x00000000;
 8009064:	4b0d      	ldr	r3, [pc, #52]	; (800909c <RTC_DeInit+0xec>)
 8009066:	2200      	movs	r2, #0
 8009068:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Reset ISR register and exit initialization mode */
      RTC->ISR = (uint32_t)0x00000000;
 800906a:	4b0c      	ldr	r3, [pc, #48]	; (800909c <RTC_DeInit+0xec>)
 800906c:	2200      	movs	r2, #0
 800906e:	60da      	str	r2, [r3, #12]
      
      /* Reset Tamper and alternate functions configuration register */
      RTC->TAFCR = 0x00000000;
 8009070:	4b0a      	ldr	r3, [pc, #40]	; (800909c <RTC_DeInit+0xec>)
 8009072:	2200      	movs	r2, #0
 8009074:	641a      	str	r2, [r3, #64]	; 0x40
  
      if(RTC_WaitForSynchro() == ERROR)
 8009076:	f000 f8c9 	bl	800920c <RTC_WaitForSynchro>
 800907a:	4603      	mov	r3, r0
 800907c:	2b00      	cmp	r3, #0
 800907e:	d102      	bne.n	8009086 <RTC_DeInit+0xd6>
      {
        status = ERROR;
 8009080:	2300      	movs	r3, #0
 8009082:	73fb      	strb	r3, [r7, #15]
 8009084:	e001      	b.n	800908a <RTC_DeInit+0xda>
      }
      else
      {
        status = SUCCESS;      
 8009086:	2301      	movs	r3, #1
 8009088:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
  
  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF;  
 800908a:	4b04      	ldr	r3, [pc, #16]	; (800909c <RTC_DeInit+0xec>)
 800908c:	22ff      	movs	r2, #255	; 0xff
 800908e:	625a      	str	r2, [r3, #36]	; 0x24
  
  return status;
 8009090:	7bfb      	ldrb	r3, [r7, #15]
}
 8009092:	4618      	mov	r0, r3
 8009094:	3710      	adds	r7, #16
 8009096:	46bd      	mov	sp, r7
 8009098:	bd80      	pop	{r7, pc}
 800909a:	bf00      	nop
 800909c:	40002800 	.word	0x40002800
 80090a0:	007f00ff 	.word	0x007f00ff

080090a4 <RTC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC registers are initialized
  *          - ERROR: RTC registers are not initialized  
  */
ErrorStatus RTC_Init(RTC_InitTypeDef* RTC_InitStruct)
{
 80090a4:	b580      	push	{r7, lr}
 80090a6:	b084      	sub	sp, #16
 80090a8:	af00      	add	r7, sp, #0
 80090aa:	6078      	str	r0, [r7, #4]
  ErrorStatus status = ERROR;
 80090ac:	2300      	movs	r3, #0
 80090ae:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RTC_HOUR_FORMAT(RTC_InitStruct->RTC_HourFormat));
  assert_param(IS_RTC_ASYNCH_PREDIV(RTC_InitStruct->RTC_AsynchPrediv));
  assert_param(IS_RTC_SYNCH_PREDIV(RTC_InitStruct->RTC_SynchPrediv));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 80090b0:	4b19      	ldr	r3, [pc, #100]	; (8009118 <RTC_Init+0x74>)
 80090b2:	22ca      	movs	r2, #202	; 0xca
 80090b4:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 80090b6:	4b18      	ldr	r3, [pc, #96]	; (8009118 <RTC_Init+0x74>)
 80090b8:	2253      	movs	r2, #83	; 0x53
 80090ba:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode() == ERROR)
 80090bc:	f000 f85c 	bl	8009178 <RTC_EnterInitMode>
 80090c0:	4603      	mov	r3, r0
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d102      	bne.n	80090cc <RTC_Init+0x28>
  {
    status = ERROR;
 80090c6:	2300      	movs	r3, #0
 80090c8:	73fb      	strb	r3, [r7, #15]
 80090ca:	e01c      	b.n	8009106 <RTC_Init+0x62>
  } 
  else
  {
    /* Clear RTC CR FMT Bit */
    RTC->CR &= ((uint32_t)~(RTC_CR_FMT));
 80090cc:	4b12      	ldr	r3, [pc, #72]	; (8009118 <RTC_Init+0x74>)
 80090ce:	689b      	ldr	r3, [r3, #8]
 80090d0:	4a11      	ldr	r2, [pc, #68]	; (8009118 <RTC_Init+0x74>)
 80090d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80090d6:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    RTC->CR |=  ((uint32_t)(RTC_InitStruct->RTC_HourFormat));
 80090d8:	4b0f      	ldr	r3, [pc, #60]	; (8009118 <RTC_Init+0x74>)
 80090da:	689a      	ldr	r2, [r3, #8]
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	490d      	ldr	r1, [pc, #52]	; (8009118 <RTC_Init+0x74>)
 80090e2:	4313      	orrs	r3, r2
 80090e4:	608b      	str	r3, [r1, #8]
  
    /* Configure the RTC PRER */
    RTC->PRER = (uint32_t)(RTC_InitStruct->RTC_SynchPrediv);
 80090e6:	4a0c      	ldr	r2, [pc, #48]	; (8009118 <RTC_Init+0x74>)
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	689b      	ldr	r3, [r3, #8]
 80090ec:	6113      	str	r3, [r2, #16]
    RTC->PRER |= (uint32_t)(RTC_InitStruct->RTC_AsynchPrediv << 16);
 80090ee:	4b0a      	ldr	r3, [pc, #40]	; (8009118 <RTC_Init+0x74>)
 80090f0:	691a      	ldr	r2, [r3, #16]
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	685b      	ldr	r3, [r3, #4]
 80090f6:	041b      	lsls	r3, r3, #16
 80090f8:	4907      	ldr	r1, [pc, #28]	; (8009118 <RTC_Init+0x74>)
 80090fa:	4313      	orrs	r3, r2
 80090fc:	610b      	str	r3, [r1, #16]

    /* Exit Initialization mode */
    RTC_ExitInitMode();
 80090fe:	f000 f875 	bl	80091ec <RTC_ExitInitMode>

    status = SUCCESS;    
 8009102:	2301      	movs	r3, #1
 8009104:	73fb      	strb	r3, [r7, #15]
  }
  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 8009106:	4b04      	ldr	r3, [pc, #16]	; (8009118 <RTC_Init+0x74>)
 8009108:	22ff      	movs	r2, #255	; 0xff
 800910a:	625a      	str	r2, [r3, #36]	; 0x24
  
  return status;
 800910c:	7bfb      	ldrb	r3, [r7, #15]
}
 800910e:	4618      	mov	r0, r3
 8009110:	3710      	adds	r7, #16
 8009112:	46bd      	mov	sp, r7
 8009114:	bd80      	pop	{r7, pc}
 8009116:	bf00      	nop
 8009118:	40002800 	.word	0x40002800

0800911c <RTC_StructInit>:
  * @param  RTC_InitStruct: pointer to a RTC_InitTypeDef structure which will be 
  *         initialized.
  * @retval None
  */
void RTC_StructInit(RTC_InitTypeDef* RTC_InitStruct)
{
 800911c:	b480      	push	{r7}
 800911e:	b083      	sub	sp, #12
 8009120:	af00      	add	r7, sp, #0
 8009122:	6078      	str	r0, [r7, #4]
  /* Initialize the RTC_HourFormat member */
  RTC_InitStruct->RTC_HourFormat = RTC_HourFormat_24;
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	2200      	movs	r2, #0
 8009128:	601a      	str	r2, [r3, #0]
    
  /* Initialize the RTC_AsynchPrediv member */
  RTC_InitStruct->RTC_AsynchPrediv = (uint32_t)0x7F;
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	227f      	movs	r2, #127	; 0x7f
 800912e:	605a      	str	r2, [r3, #4]

  /* Initialize the RTC_SynchPrediv member */
  RTC_InitStruct->RTC_SynchPrediv = (uint32_t)0xFF; 
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	22ff      	movs	r2, #255	; 0xff
 8009134:	609a      	str	r2, [r3, #8]
}
 8009136:	bf00      	nop
 8009138:	370c      	adds	r7, #12
 800913a:	46bd      	mov	sp, r7
 800913c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009140:	4770      	bx	lr

08009142 <RTC_WriteProtectionCmd>:
  * @param  NewState: new state of the write protection.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RTC_WriteProtectionCmd(FunctionalState NewState)
{
 8009142:	b480      	push	{r7}
 8009144:	b083      	sub	sp, #12
 8009146:	af00      	add	r7, sp, #0
 8009148:	4603      	mov	r3, r0
 800914a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
 800914c:	79fb      	ldrb	r3, [r7, #7]
 800914e:	2b00      	cmp	r3, #0
 8009150:	d003      	beq.n	800915a <RTC_WriteProtectionCmd+0x18>
  {
    /* Enable the write protection for RTC registers */
    RTC->WPR = 0xFF;   
 8009152:	4b08      	ldr	r3, [pc, #32]	; (8009174 <RTC_WriteProtectionCmd+0x32>)
 8009154:	22ff      	movs	r2, #255	; 0xff
 8009156:	625a      	str	r2, [r3, #36]	; 0x24
  {
    /* Disable the write protection for RTC registers */
    RTC->WPR = 0xCA;
    RTC->WPR = 0x53;    
  }
}
 8009158:	e005      	b.n	8009166 <RTC_WriteProtectionCmd+0x24>
    RTC->WPR = 0xCA;
 800915a:	4b06      	ldr	r3, [pc, #24]	; (8009174 <RTC_WriteProtectionCmd+0x32>)
 800915c:	22ca      	movs	r2, #202	; 0xca
 800915e:	625a      	str	r2, [r3, #36]	; 0x24
    RTC->WPR = 0x53;    
 8009160:	4b04      	ldr	r3, [pc, #16]	; (8009174 <RTC_WriteProtectionCmd+0x32>)
 8009162:	2253      	movs	r2, #83	; 0x53
 8009164:	625a      	str	r2, [r3, #36]	; 0x24
}
 8009166:	bf00      	nop
 8009168:	370c      	adds	r7, #12
 800916a:	46bd      	mov	sp, r7
 800916c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009170:	4770      	bx	lr
 8009172:	bf00      	nop
 8009174:	40002800 	.word	0x40002800

08009178 <RTC_EnterInitMode>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC is in Init mode
  *          - ERROR: RTC is not in Init mode  
  */
ErrorStatus RTC_EnterInitMode(void)
{
 8009178:	b480      	push	{r7}
 800917a:	b085      	sub	sp, #20
 800917c:	af00      	add	r7, sp, #0
  __IO uint32_t initcounter = 0x00;
 800917e:	2300      	movs	r3, #0
 8009180:	607b      	str	r3, [r7, #4]
  ErrorStatus status = ERROR;
 8009182:	2300      	movs	r3, #0
 8009184:	73fb      	strb	r3, [r7, #15]
  uint32_t initstatus = 0x00;
 8009186:	2300      	movs	r3, #0
 8009188:	60bb      	str	r3, [r7, #8]
     
  /* Check if the Initialization mode is set */
  if ((RTC->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800918a:	4b17      	ldr	r3, [pc, #92]	; (80091e8 <RTC_EnterInitMode+0x70>)
 800918c:	68db      	ldr	r3, [r3, #12]
 800918e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009192:	2b00      	cmp	r3, #0
 8009194:	d11e      	bne.n	80091d4 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    RTC->ISR = (uint32_t)RTC_INIT_MASK;
 8009196:	4b14      	ldr	r3, [pc, #80]	; (80091e8 <RTC_EnterInitMode+0x70>)
 8009198:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800919c:	60da      	str	r2, [r3, #12]
    
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    do
    {
      initstatus = RTC->ISR & RTC_ISR_INITF;
 800919e:	4b12      	ldr	r3, [pc, #72]	; (80091e8 <RTC_EnterInitMode+0x70>)
 80091a0:	68db      	ldr	r3, [r3, #12]
 80091a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80091a6:	60bb      	str	r3, [r7, #8]
      initcounter++;  
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	3301      	adds	r3, #1
 80091ac:	607b      	str	r3, [r7, #4]
    } while((initcounter != INITMODE_TIMEOUT) && (initstatus == 0x00));
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80091b4:	d002      	beq.n	80091bc <RTC_EnterInitMode+0x44>
 80091b6:	68bb      	ldr	r3, [r7, #8]
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d0f0      	beq.n	800919e <RTC_EnterInitMode+0x26>
    
    if ((RTC->ISR & RTC_ISR_INITF) != RESET)
 80091bc:	4b0a      	ldr	r3, [pc, #40]	; (80091e8 <RTC_EnterInitMode+0x70>)
 80091be:	68db      	ldr	r3, [r3, #12]
 80091c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d002      	beq.n	80091ce <RTC_EnterInitMode+0x56>
    {
      status = SUCCESS;
 80091c8:	2301      	movs	r3, #1
 80091ca:	73fb      	strb	r3, [r7, #15]
 80091cc:	e004      	b.n	80091d8 <RTC_EnterInitMode+0x60>
    }
    else
    {
      status = ERROR;
 80091ce:	2300      	movs	r3, #0
 80091d0:	73fb      	strb	r3, [r7, #15]
 80091d2:	e001      	b.n	80091d8 <RTC_EnterInitMode+0x60>
    }        
  }
  else
  {
    status = SUCCESS;  
 80091d4:	2301      	movs	r3, #1
 80091d6:	73fb      	strb	r3, [r7, #15]
  } 
    
  return (status);  
 80091d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80091da:	4618      	mov	r0, r3
 80091dc:	3714      	adds	r7, #20
 80091de:	46bd      	mov	sp, r7
 80091e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e4:	4770      	bx	lr
 80091e6:	bf00      	nop
 80091e8:	40002800 	.word	0x40002800

080091ec <RTC_ExitInitMode>:
  *         RTC_WriteProtectionCmd(DISABLE) before calling this function.      
  * @param  None
  * @retval None
  */
void RTC_ExitInitMode(void)
{ 
 80091ec:	b480      	push	{r7}
 80091ee:	af00      	add	r7, sp, #0
  /* Exit Initialization mode */
  RTC->ISR &= (uint32_t)~RTC_ISR_INIT;  
 80091f0:	4b05      	ldr	r3, [pc, #20]	; (8009208 <RTC_ExitInitMode+0x1c>)
 80091f2:	68db      	ldr	r3, [r3, #12]
 80091f4:	4a04      	ldr	r2, [pc, #16]	; (8009208 <RTC_ExitInitMode+0x1c>)
 80091f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80091fa:	60d3      	str	r3, [r2, #12]
}
 80091fc:	bf00      	nop
 80091fe:	46bd      	mov	sp, r7
 8009200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009204:	4770      	bx	lr
 8009206:	bf00      	nop
 8009208:	40002800 	.word	0x40002800

0800920c <RTC_WaitForSynchro>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC registers are synchronised
  *          - ERROR: RTC registers are not synchronised
  */
ErrorStatus RTC_WaitForSynchro(void)
{
 800920c:	b480      	push	{r7}
 800920e:	b085      	sub	sp, #20
 8009210:	af00      	add	r7, sp, #0
  __IO uint32_t synchrocounter = 0;
 8009212:	2300      	movs	r3, #0
 8009214:	607b      	str	r3, [r7, #4]
  ErrorStatus status = ERROR;
 8009216:	2300      	movs	r3, #0
 8009218:	73fb      	strb	r3, [r7, #15]
  uint32_t synchrostatus = 0x00;
 800921a:	2300      	movs	r3, #0
 800921c:	60bb      	str	r3, [r7, #8]

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 800921e:	4b18      	ldr	r3, [pc, #96]	; (8009280 <RTC_WaitForSynchro+0x74>)
 8009220:	22ca      	movs	r2, #202	; 0xca
 8009222:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 8009224:	4b16      	ldr	r3, [pc, #88]	; (8009280 <RTC_WaitForSynchro+0x74>)
 8009226:	2253      	movs	r2, #83	; 0x53
 8009228:	625a      	str	r2, [r3, #36]	; 0x24
    
  /* Clear RSF flag */
  RTC->ISR &= (uint32_t)RTC_RSF_MASK;
 800922a:	4b15      	ldr	r3, [pc, #84]	; (8009280 <RTC_WaitForSynchro+0x74>)
 800922c:	68db      	ldr	r3, [r3, #12]
 800922e:	4a14      	ldr	r2, [pc, #80]	; (8009280 <RTC_WaitForSynchro+0x74>)
 8009230:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009234:	60d3      	str	r3, [r2, #12]
    
  /* Wait the registers to be synchronised */
  do
  {
    synchrostatus = RTC->ISR & RTC_ISR_RSF;
 8009236:	4b12      	ldr	r3, [pc, #72]	; (8009280 <RTC_WaitForSynchro+0x74>)
 8009238:	68db      	ldr	r3, [r3, #12]
 800923a:	f003 0320 	and.w	r3, r3, #32
 800923e:	60bb      	str	r3, [r7, #8]
    synchrocounter++;  
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	3301      	adds	r3, #1
 8009244:	607b      	str	r3, [r7, #4]
  } while((synchrocounter != SYNCHRO_TIMEOUT) && (synchrostatus == 0x00));
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800924c:	d002      	beq.n	8009254 <RTC_WaitForSynchro+0x48>
 800924e:	68bb      	ldr	r3, [r7, #8]
 8009250:	2b00      	cmp	r3, #0
 8009252:	d0f0      	beq.n	8009236 <RTC_WaitForSynchro+0x2a>
    
  if ((RTC->ISR & RTC_ISR_RSF) != RESET)
 8009254:	4b0a      	ldr	r3, [pc, #40]	; (8009280 <RTC_WaitForSynchro+0x74>)
 8009256:	68db      	ldr	r3, [r3, #12]
 8009258:	f003 0320 	and.w	r3, r3, #32
 800925c:	2b00      	cmp	r3, #0
 800925e:	d002      	beq.n	8009266 <RTC_WaitForSynchro+0x5a>
  {
    status = SUCCESS;
 8009260:	2301      	movs	r3, #1
 8009262:	73fb      	strb	r3, [r7, #15]
 8009264:	e001      	b.n	800926a <RTC_WaitForSynchro+0x5e>
  }
  else
  {
    status = ERROR;
 8009266:	2300      	movs	r3, #0
 8009268:	73fb      	strb	r3, [r7, #15]
  }        

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 800926a:	4b05      	ldr	r3, [pc, #20]	; (8009280 <RTC_WaitForSynchro+0x74>)
 800926c:	22ff      	movs	r2, #255	; 0xff
 800926e:	625a      	str	r2, [r3, #36]	; 0x24
    
  return (status); 
 8009270:	7bfb      	ldrb	r3, [r7, #15]
}
 8009272:	4618      	mov	r0, r3
 8009274:	3714      	adds	r7, #20
 8009276:	46bd      	mov	sp, r7
 8009278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800927c:	4770      	bx	lr
 800927e:	bf00      	nop
 8009280:	40002800 	.word	0x40002800

08009284 <RTC_RefClockCmd>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC reference clock detection is enabled
  *          - ERROR: RTC reference clock detection is disabled  
  */
ErrorStatus RTC_RefClockCmd(FunctionalState NewState)
{ 
 8009284:	b580      	push	{r7, lr}
 8009286:	b084      	sub	sp, #16
 8009288:	af00      	add	r7, sp, #0
 800928a:	4603      	mov	r3, r0
 800928c:	71fb      	strb	r3, [r7, #7]
  ErrorStatus status = ERROR;
 800928e:	2300      	movs	r3, #0
 8009290:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8009292:	4b15      	ldr	r3, [pc, #84]	; (80092e8 <RTC_RefClockCmd+0x64>)
 8009294:	22ca      	movs	r2, #202	; 0xca
 8009296:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 8009298:	4b13      	ldr	r3, [pc, #76]	; (80092e8 <RTC_RefClockCmd+0x64>)
 800929a:	2253      	movs	r2, #83	; 0x53
 800929c:	625a      	str	r2, [r3, #36]	; 0x24
    
  /* Set Initialization mode */
  if (RTC_EnterInitMode() == ERROR)
 800929e:	f7ff ff6b 	bl	8009178 <RTC_EnterInitMode>
 80092a2:	4603      	mov	r3, r0
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d102      	bne.n	80092ae <RTC_RefClockCmd+0x2a>
  {
    status = ERROR;
 80092a8:	2300      	movs	r3, #0
 80092aa:	73fb      	strb	r3, [r7, #15]
 80092ac:	e013      	b.n	80092d6 <RTC_RefClockCmd+0x52>
  } 
  else
  {  
    if (NewState != DISABLE)
 80092ae:	79fb      	ldrb	r3, [r7, #7]
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d006      	beq.n	80092c2 <RTC_RefClockCmd+0x3e>
    {
      /* Enable the RTC reference clock detection */
      RTC->CR |= RTC_CR_REFCKON;   
 80092b4:	4b0c      	ldr	r3, [pc, #48]	; (80092e8 <RTC_RefClockCmd+0x64>)
 80092b6:	689b      	ldr	r3, [r3, #8]
 80092b8:	4a0b      	ldr	r2, [pc, #44]	; (80092e8 <RTC_RefClockCmd+0x64>)
 80092ba:	f043 0310 	orr.w	r3, r3, #16
 80092be:	6093      	str	r3, [r2, #8]
 80092c0:	e005      	b.n	80092ce <RTC_RefClockCmd+0x4a>
    }
    else
    {
      /* Disable the RTC reference clock detection */
      RTC->CR &= ~RTC_CR_REFCKON;    
 80092c2:	4b09      	ldr	r3, [pc, #36]	; (80092e8 <RTC_RefClockCmd+0x64>)
 80092c4:	689b      	ldr	r3, [r3, #8]
 80092c6:	4a08      	ldr	r2, [pc, #32]	; (80092e8 <RTC_RefClockCmd+0x64>)
 80092c8:	f023 0310 	bic.w	r3, r3, #16
 80092cc:	6093      	str	r3, [r2, #8]
    }
    /* Exit Initialization mode */
    RTC_ExitInitMode();
 80092ce:	f7ff ff8d 	bl	80091ec <RTC_ExitInitMode>
    
    status = SUCCESS;
 80092d2:	2301      	movs	r3, #1
 80092d4:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF;  
 80092d6:	4b04      	ldr	r3, [pc, #16]	; (80092e8 <RTC_RefClockCmd+0x64>)
 80092d8:	22ff      	movs	r2, #255	; 0xff
 80092da:	625a      	str	r2, [r3, #36]	; 0x24
  
  return status; 
 80092dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80092de:	4618      	mov	r0, r3
 80092e0:	3710      	adds	r7, #16
 80092e2:	46bd      	mov	sp, r7
 80092e4:	bd80      	pop	{r7, pc}
 80092e6:	bf00      	nop
 80092e8:	40002800 	.word	0x40002800

080092ec <RTC_BypassShadowCmd>:
  * @param  NewState: new state of the Bypass Shadow feature.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
*/
void RTC_BypassShadowCmd(FunctionalState NewState)
{
 80092ec:	b480      	push	{r7}
 80092ee:	b083      	sub	sp, #12
 80092f0:	af00      	add	r7, sp, #0
 80092f2:	4603      	mov	r3, r0
 80092f4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 80092f6:	4b0f      	ldr	r3, [pc, #60]	; (8009334 <RTC_BypassShadowCmd+0x48>)
 80092f8:	22ca      	movs	r2, #202	; 0xca
 80092fa:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 80092fc:	4b0d      	ldr	r3, [pc, #52]	; (8009334 <RTC_BypassShadowCmd+0x48>)
 80092fe:	2253      	movs	r2, #83	; 0x53
 8009300:	625a      	str	r2, [r3, #36]	; 0x24
  
  if (NewState != DISABLE)
 8009302:	79fb      	ldrb	r3, [r7, #7]
 8009304:	2b00      	cmp	r3, #0
 8009306:	d006      	beq.n	8009316 <RTC_BypassShadowCmd+0x2a>
  {
    /* Set the BYPSHAD bit */
    RTC->CR |= (uint8_t)RTC_CR_BYPSHAD;
 8009308:	4b0a      	ldr	r3, [pc, #40]	; (8009334 <RTC_BypassShadowCmd+0x48>)
 800930a:	689b      	ldr	r3, [r3, #8]
 800930c:	4a09      	ldr	r2, [pc, #36]	; (8009334 <RTC_BypassShadowCmd+0x48>)
 800930e:	f043 0320 	orr.w	r3, r3, #32
 8009312:	6093      	str	r3, [r2, #8]
 8009314:	e005      	b.n	8009322 <RTC_BypassShadowCmd+0x36>
  }
  else
  {
    /* Reset the BYPSHAD bit */
    RTC->CR &= (uint8_t)~RTC_CR_BYPSHAD;
 8009316:	4b07      	ldr	r3, [pc, #28]	; (8009334 <RTC_BypassShadowCmd+0x48>)
 8009318:	689b      	ldr	r3, [r3, #8]
 800931a:	4a06      	ldr	r2, [pc, #24]	; (8009334 <RTC_BypassShadowCmd+0x48>)
 800931c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009320:	6093      	str	r3, [r2, #8]
  }

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF;
 8009322:	4b04      	ldr	r3, [pc, #16]	; (8009334 <RTC_BypassShadowCmd+0x48>)
 8009324:	22ff      	movs	r2, #255	; 0xff
 8009326:	625a      	str	r2, [r3, #36]	; 0x24
}
 8009328:	bf00      	nop
 800932a:	370c      	adds	r7, #12
 800932c:	46bd      	mov	sp, r7
 800932e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009332:	4770      	bx	lr
 8009334:	40002800 	.word	0x40002800

08009338 <RTC_SetTime>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC Time register is configured
  *          - ERROR: RTC Time register is not configured
  */
ErrorStatus RTC_SetTime(uint32_t RTC_Format, RTC_TimeTypeDef* RTC_TimeStruct)
{
 8009338:	b590      	push	{r4, r7, lr}
 800933a:	b085      	sub	sp, #20
 800933c:	af00      	add	r7, sp, #0
 800933e:	6078      	str	r0, [r7, #4]
 8009340:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8009342:	2300      	movs	r3, #0
 8009344:	60fb      	str	r3, [r7, #12]
  ErrorStatus status = ERROR;
 8009346:	2300      	movs	r3, #0
 8009348:	72fb      	strb	r3, [r7, #11]
    
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(RTC_Format));
  
  if (RTC_Format == RTC_Format_BIN)
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	2b00      	cmp	r3, #0
 800934e:	d109      	bne.n	8009364 <RTC_SetTime+0x2c>
  {
    if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8009350:	4b3d      	ldr	r3, [pc, #244]	; (8009448 <RTC_SetTime+0x110>)
 8009352:	689b      	ldr	r3, [r3, #8]
 8009354:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009358:	2b00      	cmp	r3, #0
 800935a:	d114      	bne.n	8009386 <RTC_SetTime+0x4e>
      assert_param(IS_RTC_HOUR12(RTC_TimeStruct->RTC_Hours));
      assert_param(IS_RTC_H12(RTC_TimeStruct->RTC_H12));
    } 
    else
    {
      RTC_TimeStruct->RTC_H12 = 0x00;
 800935c:	683b      	ldr	r3, [r7, #0]
 800935e:	2200      	movs	r2, #0
 8009360:	70da      	strb	r2, [r3, #3]
 8009362:	e010      	b.n	8009386 <RTC_SetTime+0x4e>
    assert_param(IS_RTC_MINUTES(RTC_TimeStruct->RTC_Minutes));
    assert_param(IS_RTC_SECONDS(RTC_TimeStruct->RTC_Seconds));
  }
  else
  {
    if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8009364:	4b38      	ldr	r3, [pc, #224]	; (8009448 <RTC_SetTime+0x110>)
 8009366:	689b      	ldr	r3, [r3, #8]
 8009368:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800936c:	2b00      	cmp	r3, #0
 800936e:	d007      	beq.n	8009380 <RTC_SetTime+0x48>
    {
      tmpreg = RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Hours);
 8009370:	683b      	ldr	r3, [r7, #0]
 8009372:	781b      	ldrb	r3, [r3, #0]
 8009374:	4618      	mov	r0, r3
 8009376:	f001 f8a6 	bl	800a4c6 <RTC_Bcd2ToByte>
 800937a:	4603      	mov	r3, r0
 800937c:	60fb      	str	r3, [r7, #12]
 800937e:	e002      	b.n	8009386 <RTC_SetTime+0x4e>
      assert_param(IS_RTC_HOUR12(tmpreg));
      assert_param(IS_RTC_H12(RTC_TimeStruct->RTC_H12)); 
    } 
    else
    {
      RTC_TimeStruct->RTC_H12 = 0x00;
 8009380:	683b      	ldr	r3, [r7, #0]
 8009382:	2200      	movs	r2, #0
 8009384:	70da      	strb	r2, [r3, #3]
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Seconds)));
  }
  
  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	2b00      	cmp	r3, #0
 800938a:	d00f      	beq.n	80093ac <RTC_SetTime+0x74>
  {
    tmpreg = (((uint32_t)(RTC_TimeStruct->RTC_Hours) << 16) | \
 800938c:	683b      	ldr	r3, [r7, #0]
 800938e:	781b      	ldrb	r3, [r3, #0]
 8009390:	041a      	lsls	r2, r3, #16
             ((uint32_t)(RTC_TimeStruct->RTC_Minutes) << 8) | \
 8009392:	683b      	ldr	r3, [r7, #0]
 8009394:	785b      	ldrb	r3, [r3, #1]
 8009396:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(RTC_TimeStruct->RTC_Hours) << 16) | \
 8009398:	4313      	orrs	r3, r2
             ((uint32_t)RTC_TimeStruct->RTC_Seconds) | \
 800939a:	683a      	ldr	r2, [r7, #0]
 800939c:	7892      	ldrb	r2, [r2, #2]
             ((uint32_t)(RTC_TimeStruct->RTC_Minutes) << 8) | \
 800939e:	431a      	orrs	r2, r3
             ((uint32_t)(RTC_TimeStruct->RTC_H12) << 16)); 
 80093a0:	683b      	ldr	r3, [r7, #0]
 80093a2:	78db      	ldrb	r3, [r3, #3]
 80093a4:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(RTC_TimeStruct->RTC_Hours) << 16) | \
 80093a6:	4313      	orrs	r3, r2
 80093a8:	60fb      	str	r3, [r7, #12]
 80093aa:	e01b      	b.n	80093e4 <RTC_SetTime+0xac>
  }  
  else
  {
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Hours) << 16) | \
 80093ac:	683b      	ldr	r3, [r7, #0]
 80093ae:	781b      	ldrb	r3, [r3, #0]
 80093b0:	4618      	mov	r0, r3
 80093b2:	f001 f86b 	bl	800a48c <RTC_ByteToBcd2>
 80093b6:	4603      	mov	r3, r0
 80093b8:	041c      	lsls	r4, r3, #16
                   ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Minutes) << 8) | \
 80093ba:	683b      	ldr	r3, [r7, #0]
 80093bc:	785b      	ldrb	r3, [r3, #1]
 80093be:	4618      	mov	r0, r3
 80093c0:	f001 f864 	bl	800a48c <RTC_ByteToBcd2>
 80093c4:	4603      	mov	r3, r0
 80093c6:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Hours) << 16) | \
 80093c8:	431c      	orrs	r4, r3
                   ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Seconds)) | \
 80093ca:	683b      	ldr	r3, [r7, #0]
 80093cc:	789b      	ldrb	r3, [r3, #2]
 80093ce:	4618      	mov	r0, r3
 80093d0:	f001 f85c 	bl	800a48c <RTC_ByteToBcd2>
 80093d4:	4603      	mov	r3, r0
                   ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Minutes) << 8) | \
 80093d6:	ea44 0203 	orr.w	r2, r4, r3
                   (((uint32_t)RTC_TimeStruct->RTC_H12) << 16));
 80093da:	683b      	ldr	r3, [r7, #0]
 80093dc:	78db      	ldrb	r3, [r3, #3]
 80093de:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Hours) << 16) | \
 80093e0:	4313      	orrs	r3, r2
 80093e2:	60fb      	str	r3, [r7, #12]
  }  

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 80093e4:	4b18      	ldr	r3, [pc, #96]	; (8009448 <RTC_SetTime+0x110>)
 80093e6:	22ca      	movs	r2, #202	; 0xca
 80093e8:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 80093ea:	4b17      	ldr	r3, [pc, #92]	; (8009448 <RTC_SetTime+0x110>)
 80093ec:	2253      	movs	r2, #83	; 0x53
 80093ee:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode() == ERROR)
 80093f0:	f7ff fec2 	bl	8009178 <RTC_EnterInitMode>
 80093f4:	4603      	mov	r3, r0
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d102      	bne.n	8009400 <RTC_SetTime+0xc8>
  {
    status = ERROR;
 80093fa:	2300      	movs	r3, #0
 80093fc:	72fb      	strb	r3, [r7, #11]
 80093fe:	e01b      	b.n	8009438 <RTC_SetTime+0x100>
  } 
  else
  {
    /* Set the RTC_TR register */
    RTC->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8009400:	4a11      	ldr	r2, [pc, #68]	; (8009448 <RTC_SetTime+0x110>)
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8009408:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800940c:	6013      	str	r3, [r2, #0]

    /* Exit Initialization mode */
    RTC_ExitInitMode(); 
 800940e:	f7ff feed 	bl	80091ec <RTC_ExitInitMode>

    /* If  RTC_CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((RTC->CR & RTC_CR_BYPSHAD) == RESET)
 8009412:	4b0d      	ldr	r3, [pc, #52]	; (8009448 <RTC_SetTime+0x110>)
 8009414:	689b      	ldr	r3, [r3, #8]
 8009416:	f003 0320 	and.w	r3, r3, #32
 800941a:	2b00      	cmp	r3, #0
 800941c:	d10a      	bne.n	8009434 <RTC_SetTime+0xfc>
    {
    if(RTC_WaitForSynchro() == ERROR)
 800941e:	f7ff fef5 	bl	800920c <RTC_WaitForSynchro>
 8009422:	4603      	mov	r3, r0
 8009424:	2b00      	cmp	r3, #0
 8009426:	d102      	bne.n	800942e <RTC_SetTime+0xf6>
    {
      status = ERROR;
 8009428:	2300      	movs	r3, #0
 800942a:	72fb      	strb	r3, [r7, #11]
 800942c:	e004      	b.n	8009438 <RTC_SetTime+0x100>
    }
    else
    {
      status = SUCCESS;
 800942e:	2301      	movs	r3, #1
 8009430:	72fb      	strb	r3, [r7, #11]
 8009432:	e001      	b.n	8009438 <RTC_SetTime+0x100>
    }
  }
    else
    {
      status = SUCCESS;
 8009434:	2301      	movs	r3, #1
 8009436:	72fb      	strb	r3, [r7, #11]
    }
  }
  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 8009438:	4b03      	ldr	r3, [pc, #12]	; (8009448 <RTC_SetTime+0x110>)
 800943a:	22ff      	movs	r2, #255	; 0xff
 800943c:	625a      	str	r2, [r3, #36]	; 0x24
    
  return status;
 800943e:	7afb      	ldrb	r3, [r7, #11]
}
 8009440:	4618      	mov	r0, r3
 8009442:	3714      	adds	r7, #20
 8009444:	46bd      	mov	sp, r7
 8009446:	bd90      	pop	{r4, r7, pc}
 8009448:	40002800 	.word	0x40002800

0800944c <RTC_TimeStructInit>:
  * @param  RTC_TimeStruct: pointer to a RTC_TimeTypeDef structure which will be 
  *         initialized.
  * @retval None
  */
void RTC_TimeStructInit(RTC_TimeTypeDef* RTC_TimeStruct)
{
 800944c:	b480      	push	{r7}
 800944e:	b083      	sub	sp, #12
 8009450:	af00      	add	r7, sp, #0
 8009452:	6078      	str	r0, [r7, #4]
  /* Time = 00h:00min:00sec */
  RTC_TimeStruct->RTC_H12 = RTC_H12_AM;
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	2200      	movs	r2, #0
 8009458:	70da      	strb	r2, [r3, #3]
  RTC_TimeStruct->RTC_Hours = 0;
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	2200      	movs	r2, #0
 800945e:	701a      	strb	r2, [r3, #0]
  RTC_TimeStruct->RTC_Minutes = 0;
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	2200      	movs	r2, #0
 8009464:	705a      	strb	r2, [r3, #1]
  RTC_TimeStruct->RTC_Seconds = 0; 
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	2200      	movs	r2, #0
 800946a:	709a      	strb	r2, [r3, #2]
}
 800946c:	bf00      	nop
 800946e:	370c      	adds	r7, #12
 8009470:	46bd      	mov	sp, r7
 8009472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009476:	4770      	bx	lr

08009478 <RTC_GetTime>:
  * @param  RTC_TimeStruct: pointer to a RTC_TimeTypeDef structure that will 
  *                        contain the returned current time configuration.     
  * @retval None
  */
void RTC_GetTime(uint32_t RTC_Format, RTC_TimeTypeDef* RTC_TimeStruct)
{
 8009478:	b580      	push	{r7, lr}
 800947a:	b084      	sub	sp, #16
 800947c:	af00      	add	r7, sp, #0
 800947e:	6078      	str	r0, [r7, #4]
 8009480:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8009482:	2300      	movs	r3, #0
 8009484:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(RTC_Format));

  /* Get the RTC_TR register */
  tmpreg = (uint32_t)(RTC->TR & RTC_TR_RESERVED_MASK); 
 8009486:	4b24      	ldr	r3, [pc, #144]	; (8009518 <RTC_GetTime+0xa0>)
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800948e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8009492:	60fb      	str	r3, [r7, #12]
  
  /* Fill the structure fields with the read parameters */
  RTC_TimeStruct->RTC_Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	0c1b      	lsrs	r3, r3, #16
 8009498:	b2db      	uxtb	r3, r3
 800949a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800949e:	b2da      	uxtb	r2, r3
 80094a0:	683b      	ldr	r3, [r7, #0]
 80094a2:	701a      	strb	r2, [r3, #0]
  RTC_TimeStruct->RTC_Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	0a1b      	lsrs	r3, r3, #8
 80094a8:	b2db      	uxtb	r3, r3
 80094aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80094ae:	b2da      	uxtb	r2, r3
 80094b0:	683b      	ldr	r3, [r7, #0]
 80094b2:	705a      	strb	r2, [r3, #1]
  RTC_TimeStruct->RTC_Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	b2db      	uxtb	r3, r3
 80094b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80094bc:	b2da      	uxtb	r2, r3
 80094be:	683b      	ldr	r3, [r7, #0]
 80094c0:	709a      	strb	r2, [r3, #2]
  RTC_TimeStruct->RTC_H12 = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16);  
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	0c1b      	lsrs	r3, r3, #16
 80094c6:	b2db      	uxtb	r3, r3
 80094c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094cc:	b2da      	uxtb	r2, r3
 80094ce:	683b      	ldr	r3, [r7, #0]
 80094d0:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (RTC_Format == RTC_Format_BIN)
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d11a      	bne.n	800950e <RTC_GetTime+0x96>
  {
    /* Convert the structure parameters to Binary format */
    RTC_TimeStruct->RTC_Hours = (uint8_t)RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Hours);
 80094d8:	683b      	ldr	r3, [r7, #0]
 80094da:	781b      	ldrb	r3, [r3, #0]
 80094dc:	4618      	mov	r0, r3
 80094de:	f000 fff2 	bl	800a4c6 <RTC_Bcd2ToByte>
 80094e2:	4603      	mov	r3, r0
 80094e4:	461a      	mov	r2, r3
 80094e6:	683b      	ldr	r3, [r7, #0]
 80094e8:	701a      	strb	r2, [r3, #0]
    RTC_TimeStruct->RTC_Minutes = (uint8_t)RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Minutes);
 80094ea:	683b      	ldr	r3, [r7, #0]
 80094ec:	785b      	ldrb	r3, [r3, #1]
 80094ee:	4618      	mov	r0, r3
 80094f0:	f000 ffe9 	bl	800a4c6 <RTC_Bcd2ToByte>
 80094f4:	4603      	mov	r3, r0
 80094f6:	461a      	mov	r2, r3
 80094f8:	683b      	ldr	r3, [r7, #0]
 80094fa:	705a      	strb	r2, [r3, #1]
    RTC_TimeStruct->RTC_Seconds = (uint8_t)RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Seconds);   
 80094fc:	683b      	ldr	r3, [r7, #0]
 80094fe:	789b      	ldrb	r3, [r3, #2]
 8009500:	4618      	mov	r0, r3
 8009502:	f000 ffe0 	bl	800a4c6 <RTC_Bcd2ToByte>
 8009506:	4603      	mov	r3, r0
 8009508:	461a      	mov	r2, r3
 800950a:	683b      	ldr	r3, [r7, #0]
 800950c:	709a      	strb	r2, [r3, #2]
  }
}
 800950e:	bf00      	nop
 8009510:	3710      	adds	r7, #16
 8009512:	46bd      	mov	sp, r7
 8009514:	bd80      	pop	{r7, pc}
 8009516:	bf00      	nop
 8009518:	40002800 	.word	0x40002800

0800951c <RTC_GetSubSecond>:
  *         SSR register.
  * @param  None
  * @retval RTC current Calendar Sub seconds value.
  */
uint32_t RTC_GetSubSecond(void)
{
 800951c:	b480      	push	{r7}
 800951e:	b083      	sub	sp, #12
 8009520:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0;
 8009522:	2300      	movs	r3, #0
 8009524:	607b      	str	r3, [r7, #4]
  
  /* Get sub seconds values from the correspondent registers*/
  tmpreg = (uint32_t)(RTC->SSR);
 8009526:	4b06      	ldr	r3, [pc, #24]	; (8009540 <RTC_GetSubSecond+0x24>)
 8009528:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800952a:	607b      	str	r3, [r7, #4]
  
  /* Read DR register to unfroze calendar registers */
  (void) (RTC->DR);
 800952c:	4b04      	ldr	r3, [pc, #16]	; (8009540 <RTC_GetSubSecond+0x24>)
 800952e:	685b      	ldr	r3, [r3, #4]
  
  return (tmpreg);
 8009530:	687b      	ldr	r3, [r7, #4]
}
 8009532:	4618      	mov	r0, r3
 8009534:	370c      	adds	r7, #12
 8009536:	46bd      	mov	sp, r7
 8009538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800953c:	4770      	bx	lr
 800953e:	bf00      	nop
 8009540:	40002800 	.word	0x40002800

08009544 <RTC_SetDate>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC Date register is configured
  *          - ERROR: RTC Date register is not configured
  */
ErrorStatus RTC_SetDate(uint32_t RTC_Format, RTC_DateTypeDef* RTC_DateStruct)
{
 8009544:	b590      	push	{r4, r7, lr}
 8009546:	b085      	sub	sp, #20
 8009548:	af00      	add	r7, sp, #0
 800954a:	6078      	str	r0, [r7, #4]
 800954c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800954e:	2300      	movs	r3, #0
 8009550:	60fb      	str	r3, [r7, #12]
  ErrorStatus status = ERROR;
 8009552:	2300      	movs	r3, #0
 8009554:	72fb      	strb	r3, [r7, #11]
  
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(RTC_Format));

  if ((RTC_Format == RTC_Format_BIN) && ((RTC_DateStruct->RTC_Month & 0x10) == 0x10))
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	2b00      	cmp	r3, #0
 800955a:	d10e      	bne.n	800957a <RTC_SetDate+0x36>
 800955c:	683b      	ldr	r3, [r7, #0]
 800955e:	785b      	ldrb	r3, [r3, #1]
 8009560:	f003 0310 	and.w	r3, r3, #16
 8009564:	2b00      	cmp	r3, #0
 8009566:	d008      	beq.n	800957a <RTC_SetDate+0x36>
  {
    RTC_DateStruct->RTC_Month = (RTC_DateStruct->RTC_Month & (uint32_t)~(0x10)) + 0x0A;
 8009568:	683b      	ldr	r3, [r7, #0]
 800956a:	785b      	ldrb	r3, [r3, #1]
 800956c:	f023 0310 	bic.w	r3, r3, #16
 8009570:	b2db      	uxtb	r3, r3
 8009572:	330a      	adds	r3, #10
 8009574:	b2da      	uxtb	r2, r3
 8009576:	683b      	ldr	r3, [r7, #0]
 8009578:	705a      	strb	r2, [r3, #1]
  }  
  if (RTC_Format == RTC_Format_BIN)
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	2b00      	cmp	r3, #0
 800957e:	d00d      	beq.n	800959c <RTC_SetDate+0x58>
    assert_param(IS_RTC_DATE(RTC_DateStruct->RTC_Date));
  }
  else
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(RTC_DateStruct->RTC_Year)));
    tmpreg = RTC_Bcd2ToByte(RTC_DateStruct->RTC_Month);
 8009580:	683b      	ldr	r3, [r7, #0]
 8009582:	785b      	ldrb	r3, [r3, #1]
 8009584:	4618      	mov	r0, r3
 8009586:	f000 ff9e 	bl	800a4c6 <RTC_Bcd2ToByte>
 800958a:	4603      	mov	r3, r0
 800958c:	60fb      	str	r3, [r7, #12]
    assert_param(IS_RTC_MONTH(tmpreg));
    tmpreg = RTC_Bcd2ToByte(RTC_DateStruct->RTC_Date);
 800958e:	683b      	ldr	r3, [r7, #0]
 8009590:	789b      	ldrb	r3, [r3, #2]
 8009592:	4618      	mov	r0, r3
 8009594:	f000 ff97 	bl	800a4c6 <RTC_Bcd2ToByte>
 8009598:	4603      	mov	r3, r0
 800959a:	60fb      	str	r3, [r7, #12]
    assert_param(IS_RTC_DATE(tmpreg));
  }
  assert_param(IS_RTC_WEEKDAY(RTC_DateStruct->RTC_WeekDay));

  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d00f      	beq.n	80095c2 <RTC_SetDate+0x7e>
  {
    tmpreg = ((((uint32_t)RTC_DateStruct->RTC_Year) << 16) | \
 80095a2:	683b      	ldr	r3, [r7, #0]
 80095a4:	78db      	ldrb	r3, [r3, #3]
 80095a6:	041a      	lsls	r2, r3, #16
              (((uint32_t)RTC_DateStruct->RTC_Month) << 8) | \
 80095a8:	683b      	ldr	r3, [r7, #0]
 80095aa:	785b      	ldrb	r3, [r3, #1]
 80095ac:	021b      	lsls	r3, r3, #8
    tmpreg = ((((uint32_t)RTC_DateStruct->RTC_Year) << 16) | \
 80095ae:	4313      	orrs	r3, r2
              ((uint32_t)RTC_DateStruct->RTC_Date) | \
 80095b0:	683a      	ldr	r2, [r7, #0]
 80095b2:	7892      	ldrb	r2, [r2, #2]
              (((uint32_t)RTC_DateStruct->RTC_Month) << 8) | \
 80095b4:	431a      	orrs	r2, r3
              (((uint32_t)RTC_DateStruct->RTC_WeekDay) << 13)); 
 80095b6:	683b      	ldr	r3, [r7, #0]
 80095b8:	781b      	ldrb	r3, [r3, #0]
 80095ba:	035b      	lsls	r3, r3, #13
    tmpreg = ((((uint32_t)RTC_DateStruct->RTC_Year) << 16) | \
 80095bc:	4313      	orrs	r3, r2
 80095be:	60fb      	str	r3, [r7, #12]
 80095c0:	e01b      	b.n	80095fa <RTC_SetDate+0xb6>
  }  
  else
  {
    tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Year) << 16) | \
 80095c2:	683b      	ldr	r3, [r7, #0]
 80095c4:	78db      	ldrb	r3, [r3, #3]
 80095c6:	4618      	mov	r0, r3
 80095c8:	f000 ff60 	bl	800a48c <RTC_ByteToBcd2>
 80095cc:	4603      	mov	r3, r0
 80095ce:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Month) << 8) | \
 80095d0:	683b      	ldr	r3, [r7, #0]
 80095d2:	785b      	ldrb	r3, [r3, #1]
 80095d4:	4618      	mov	r0, r3
 80095d6:	f000 ff59 	bl	800a48c <RTC_ByteToBcd2>
 80095da:	4603      	mov	r3, r0
 80095dc:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Year) << 16) | \
 80095de:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Date)) | \
 80095e0:	683b      	ldr	r3, [r7, #0]
 80095e2:	789b      	ldrb	r3, [r3, #2]
 80095e4:	4618      	mov	r0, r3
 80095e6:	f000 ff51 	bl	800a48c <RTC_ByteToBcd2>
 80095ea:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Month) << 8) | \
 80095ec:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)RTC_DateStruct->RTC_WeekDay << 13));
 80095f0:	683b      	ldr	r3, [r7, #0]
 80095f2:	781b      	ldrb	r3, [r3, #0]
 80095f4:	035b      	lsls	r3, r3, #13
    tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Year) << 16) | \
 80095f6:	4313      	orrs	r3, r2
 80095f8:	60fb      	str	r3, [r7, #12]
  }

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 80095fa:	4b19      	ldr	r3, [pc, #100]	; (8009660 <RTC_SetDate+0x11c>)
 80095fc:	22ca      	movs	r2, #202	; 0xca
 80095fe:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 8009600:	4b17      	ldr	r3, [pc, #92]	; (8009660 <RTC_SetDate+0x11c>)
 8009602:	2253      	movs	r2, #83	; 0x53
 8009604:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode() == ERROR)
 8009606:	f7ff fdb7 	bl	8009178 <RTC_EnterInitMode>
 800960a:	4603      	mov	r3, r0
 800960c:	2b00      	cmp	r3, #0
 800960e:	d102      	bne.n	8009616 <RTC_SetDate+0xd2>
  {
    status = ERROR;
 8009610:	2300      	movs	r3, #0
 8009612:	72fb      	strb	r3, [r7, #11]
 8009614:	e01b      	b.n	800964e <RTC_SetDate+0x10a>
  } 
  else
  {
    /* Set the RTC_DR register */
    RTC->DR = (uint32_t)(tmpreg & RTC_DR_RESERVED_MASK);
 8009616:	4a12      	ldr	r2, [pc, #72]	; (8009660 <RTC_SetDate+0x11c>)
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800961e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8009622:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    RTC_ExitInitMode(); 
 8009624:	f7ff fde2 	bl	80091ec <RTC_ExitInitMode>

    /* If  RTC_CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((RTC->CR & RTC_CR_BYPSHAD) == RESET)
 8009628:	4b0d      	ldr	r3, [pc, #52]	; (8009660 <RTC_SetDate+0x11c>)
 800962a:	689b      	ldr	r3, [r3, #8]
 800962c:	f003 0320 	and.w	r3, r3, #32
 8009630:	2b00      	cmp	r3, #0
 8009632:	d10a      	bne.n	800964a <RTC_SetDate+0x106>
    {
    if(RTC_WaitForSynchro() == ERROR)
 8009634:	f7ff fdea 	bl	800920c <RTC_WaitForSynchro>
 8009638:	4603      	mov	r3, r0
 800963a:	2b00      	cmp	r3, #0
 800963c:	d102      	bne.n	8009644 <RTC_SetDate+0x100>
    {
      status = ERROR;
 800963e:	2300      	movs	r3, #0
 8009640:	72fb      	strb	r3, [r7, #11]
 8009642:	e004      	b.n	800964e <RTC_SetDate+0x10a>
    }
    else
    {
      status = SUCCESS;
 8009644:	2301      	movs	r3, #1
 8009646:	72fb      	strb	r3, [r7, #11]
 8009648:	e001      	b.n	800964e <RTC_SetDate+0x10a>
    }
  }
    else
    {
      status = SUCCESS;
 800964a:	2301      	movs	r3, #1
 800964c:	72fb      	strb	r3, [r7, #11]
    }
  }
  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF;   
 800964e:	4b04      	ldr	r3, [pc, #16]	; (8009660 <RTC_SetDate+0x11c>)
 8009650:	22ff      	movs	r2, #255	; 0xff
 8009652:	625a      	str	r2, [r3, #36]	; 0x24
  
  return status;
 8009654:	7afb      	ldrb	r3, [r7, #11]
}
 8009656:	4618      	mov	r0, r3
 8009658:	3714      	adds	r7, #20
 800965a:	46bd      	mov	sp, r7
 800965c:	bd90      	pop	{r4, r7, pc}
 800965e:	bf00      	nop
 8009660:	40002800 	.word	0x40002800

08009664 <RTC_DateStructInit>:
  * @param  RTC_DateStruct: pointer to a RTC_DateTypeDef structure which will be 
  *         initialized.
  * @retval None
  */
void RTC_DateStructInit(RTC_DateTypeDef* RTC_DateStruct)
{
 8009664:	b480      	push	{r7}
 8009666:	b083      	sub	sp, #12
 8009668:	af00      	add	r7, sp, #0
 800966a:	6078      	str	r0, [r7, #4]
  /* Monday, January 01 xx00 */
  RTC_DateStruct->RTC_WeekDay = RTC_Weekday_Monday;
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	2201      	movs	r2, #1
 8009670:	701a      	strb	r2, [r3, #0]
  RTC_DateStruct->RTC_Date = 1;
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	2201      	movs	r2, #1
 8009676:	709a      	strb	r2, [r3, #2]
  RTC_DateStruct->RTC_Month = RTC_Month_January;
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	2201      	movs	r2, #1
 800967c:	705a      	strb	r2, [r3, #1]
  RTC_DateStruct->RTC_Year = 0;
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	2200      	movs	r2, #0
 8009682:	70da      	strb	r2, [r3, #3]
}
 8009684:	bf00      	nop
 8009686:	370c      	adds	r7, #12
 8009688:	46bd      	mov	sp, r7
 800968a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800968e:	4770      	bx	lr

08009690 <RTC_GetDate>:
  * @param RTC_DateStruct: pointer to a RTC_DateTypeDef structure that will 
  *                        contain the returned current date configuration.     
  * @retval None
  */
void RTC_GetDate(uint32_t RTC_Format, RTC_DateTypeDef* RTC_DateStruct)
{
 8009690:	b580      	push	{r7, lr}
 8009692:	b084      	sub	sp, #16
 8009694:	af00      	add	r7, sp, #0
 8009696:	6078      	str	r0, [r7, #4]
 8009698:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800969a:	2300      	movs	r3, #0
 800969c:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(RTC_Format));
  
  /* Get the RTC_TR register */
  tmpreg = (uint32_t)(RTC->DR & RTC_DR_RESERVED_MASK); 
 800969e:	4b22      	ldr	r3, [pc, #136]	; (8009728 <RTC_GetDate+0x98>)
 80096a0:	685b      	ldr	r3, [r3, #4]
 80096a2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80096a6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80096aa:	60fb      	str	r3, [r7, #12]

  /* Fill the structure fields with the read parameters */
  RTC_DateStruct->RTC_Year = (uint8_t)((tmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16);
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	0c1b      	lsrs	r3, r3, #16
 80096b0:	b2da      	uxtb	r2, r3
 80096b2:	683b      	ldr	r3, [r7, #0]
 80096b4:	70da      	strb	r2, [r3, #3]
  RTC_DateStruct->RTC_Month = (uint8_t)((tmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	0a1b      	lsrs	r3, r3, #8
 80096ba:	b2db      	uxtb	r3, r3
 80096bc:	f003 031f 	and.w	r3, r3, #31
 80096c0:	b2da      	uxtb	r2, r3
 80096c2:	683b      	ldr	r3, [r7, #0]
 80096c4:	705a      	strb	r2, [r3, #1]
  RTC_DateStruct->RTC_Date = (uint8_t)(tmpreg & (RTC_DR_DT | RTC_DR_DU));
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	b2db      	uxtb	r3, r3
 80096ca:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80096ce:	b2da      	uxtb	r2, r3
 80096d0:	683b      	ldr	r3, [r7, #0]
 80096d2:	709a      	strb	r2, [r3, #2]
  RTC_DateStruct->RTC_WeekDay = (uint8_t)((tmpreg & (RTC_DR_WDU)) >> 13);
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	0b5b      	lsrs	r3, r3, #13
 80096d8:	b2db      	uxtb	r3, r3
 80096da:	f003 0307 	and.w	r3, r3, #7
 80096de:	b2da      	uxtb	r2, r3
 80096e0:	683b      	ldr	r3, [r7, #0]
 80096e2:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (RTC_Format == RTC_Format_BIN)
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d11a      	bne.n	8009720 <RTC_GetDate+0x90>
  {
    /* Convert the structure parameters to Binary format */
    RTC_DateStruct->RTC_Year = (uint8_t)RTC_Bcd2ToByte(RTC_DateStruct->RTC_Year);
 80096ea:	683b      	ldr	r3, [r7, #0]
 80096ec:	78db      	ldrb	r3, [r3, #3]
 80096ee:	4618      	mov	r0, r3
 80096f0:	f000 fee9 	bl	800a4c6 <RTC_Bcd2ToByte>
 80096f4:	4603      	mov	r3, r0
 80096f6:	461a      	mov	r2, r3
 80096f8:	683b      	ldr	r3, [r7, #0]
 80096fa:	70da      	strb	r2, [r3, #3]
    RTC_DateStruct->RTC_Month = (uint8_t)RTC_Bcd2ToByte(RTC_DateStruct->RTC_Month);
 80096fc:	683b      	ldr	r3, [r7, #0]
 80096fe:	785b      	ldrb	r3, [r3, #1]
 8009700:	4618      	mov	r0, r3
 8009702:	f000 fee0 	bl	800a4c6 <RTC_Bcd2ToByte>
 8009706:	4603      	mov	r3, r0
 8009708:	461a      	mov	r2, r3
 800970a:	683b      	ldr	r3, [r7, #0]
 800970c:	705a      	strb	r2, [r3, #1]
    RTC_DateStruct->RTC_Date = (uint8_t)RTC_Bcd2ToByte(RTC_DateStruct->RTC_Date);
 800970e:	683b      	ldr	r3, [r7, #0]
 8009710:	789b      	ldrb	r3, [r3, #2]
 8009712:	4618      	mov	r0, r3
 8009714:	f000 fed7 	bl	800a4c6 <RTC_Bcd2ToByte>
 8009718:	4603      	mov	r3, r0
 800971a:	461a      	mov	r2, r3
 800971c:	683b      	ldr	r3, [r7, #0]
 800971e:	709a      	strb	r2, [r3, #2]
  }
}
 8009720:	bf00      	nop
 8009722:	3710      	adds	r7, #16
 8009724:	46bd      	mov	sp, r7
 8009726:	bd80      	pop	{r7, pc}
 8009728:	40002800 	.word	0x40002800

0800972c <RTC_SetAlarm>:
  * @param  RTC_AlarmStruct: pointer to a RTC_AlarmTypeDef structure that 
  *                          contains the alarm configuration parameters.     
  * @retval None
  */
void RTC_SetAlarm(uint32_t RTC_Format, uint32_t RTC_Alarm, RTC_AlarmTypeDef* RTC_AlarmStruct)
{
 800972c:	b590      	push	{r4, r7, lr}
 800972e:	b087      	sub	sp, #28
 8009730:	af00      	add	r7, sp, #0
 8009732:	60f8      	str	r0, [r7, #12]
 8009734:	60b9      	str	r1, [r7, #8]
 8009736:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8009738:	2300      	movs	r3, #0
 800973a:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(RTC_Format));
  assert_param(IS_RTC_ALARM(RTC_Alarm));
  assert_param(IS_ALARM_MASK(RTC_AlarmStruct->RTC_AlarmMask));
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(RTC_AlarmStruct->RTC_AlarmDateWeekDaySel));

  if (RTC_Format == RTC_Format_BIN)
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	2b00      	cmp	r3, #0
 8009740:	d109      	bne.n	8009756 <RTC_SetAlarm+0x2a>
  {
    if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8009742:	4b47      	ldr	r3, [pc, #284]	; (8009860 <RTC_SetAlarm+0x134>)
 8009744:	689b      	ldr	r3, [r3, #8]
 8009746:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800974a:	2b00      	cmp	r3, #0
 800974c:	d127      	bne.n	800979e <RTC_SetAlarm+0x72>
      assert_param(IS_RTC_HOUR12(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours));
      assert_param(IS_RTC_H12(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12));
    } 
    else
    {
      RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = 0x00;
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	2200      	movs	r2, #0
 8009752:	70da      	strb	r2, [r3, #3]
 8009754:	e023      	b.n	800979e <RTC_SetAlarm+0x72>
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_AlarmStruct->RTC_AlarmDateWeekDay));
    }
  }
  else
  {
    if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8009756:	4b42      	ldr	r3, [pc, #264]	; (8009860 <RTC_SetAlarm+0x134>)
 8009758:	689b      	ldr	r3, [r3, #8]
 800975a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800975e:	2b00      	cmp	r3, #0
 8009760:	d007      	beq.n	8009772 <RTC_SetAlarm+0x46>
    {
      tmpreg = RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours);
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	781b      	ldrb	r3, [r3, #0]
 8009766:	4618      	mov	r0, r3
 8009768:	f000 fead 	bl	800a4c6 <RTC_Bcd2ToByte>
 800976c:	4603      	mov	r3, r0
 800976e:	617b      	str	r3, [r7, #20]
 8009770:	e002      	b.n	8009778 <RTC_SetAlarm+0x4c>
      assert_param(IS_RTC_HOUR12(tmpreg));
      assert_param(IS_RTC_H12(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12));
    } 
    else
    {
      RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = 0x00;
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	2200      	movs	r2, #0
 8009776:	70da      	strb	r2, [r3, #3]
    }
    
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds)));
    
    if(RTC_AlarmStruct->RTC_AlarmDateWeekDaySel == RTC_AlarmDateWeekDaySel_Date)
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	689b      	ldr	r3, [r3, #8]
 800977c:	2b00      	cmp	r3, #0
 800977e:	d107      	bne.n	8009790 <RTC_SetAlarm+0x64>
    {
      tmpreg = RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmDateWeekDay);
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	7b1b      	ldrb	r3, [r3, #12]
 8009784:	4618      	mov	r0, r3
 8009786:	f000 fe9e 	bl	800a4c6 <RTC_Bcd2ToByte>
 800978a:	4603      	mov	r3, r0
 800978c:	617b      	str	r3, [r7, #20]
 800978e:	e006      	b.n	800979e <RTC_SetAlarm+0x72>
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_DATE(tmpreg));    
    }
    else
    {
      tmpreg = RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmDateWeekDay);
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	7b1b      	ldrb	r3, [r3, #12]
 8009794:	4618      	mov	r0, r3
 8009796:	f000 fe96 	bl	800a4c6 <RTC_Bcd2ToByte>
 800979a:	4603      	mov	r3, r0
 800979c:	617b      	str	r3, [r7, #20]
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(tmpreg));      
    }    
  }

  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d019      	beq.n	80097d8 <RTC_SetAlarm+0xac>
  {
    tmpreg = (((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	781b      	ldrb	r3, [r3, #0]
 80097a8:	041a      	lsls	r2, r3, #16
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	785b      	ldrb	r3, [r3, #1]
 80097ae:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 80097b0:	4313      	orrs	r3, r2
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds) | \
 80097b2:	687a      	ldr	r2, [r7, #4]
 80097b4:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 80097b6:	431a      	orrs	r2, r3
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	78db      	ldrb	r3, [r3, #3]
 80097bc:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds) | \
 80097be:	431a      	orrs	r2, r3
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	7b1b      	ldrb	r3, [r3, #12]
 80097c4:	061b      	lsls	r3, r3, #24
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
 80097c6:	431a      	orrs	r2, r3
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmDateWeekDaySel) | \
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	689b      	ldr	r3, [r3, #8]
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
 80097cc:	431a      	orrs	r2, r3
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmMask)); 
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	685b      	ldr	r3, [r3, #4]
    tmpreg = (((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 80097d2:	4313      	orrs	r3, r2
 80097d4:	617b      	str	r3, [r7, #20]
 80097d6:	e02b      	b.n	8009830 <RTC_SetAlarm+0x104>
  }  
  else
  {
    tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	781b      	ldrb	r3, [r3, #0]
 80097dc:	4618      	mov	r0, r3
 80097de:	f000 fe55 	bl	800a48c <RTC_ByteToBcd2>
 80097e2:	4603      	mov	r3, r0
 80097e4:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	785b      	ldrb	r3, [r3, #1]
 80097ea:	4618      	mov	r0, r3
 80097ec:	f000 fe4e 	bl	800a48c <RTC_ByteToBcd2>
 80097f0:	4603      	mov	r3, r0
 80097f2:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 80097f4:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds)) | \
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	789b      	ldrb	r3, [r3, #2]
 80097fa:	4618      	mov	r0, r3
 80097fc:	f000 fe46 	bl	800a48c <RTC_ByteToBcd2>
 8009800:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 8009802:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	78db      	ldrb	r3, [r3, #3]
 800980a:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds)) | \
 800980c:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	7b1b      	ldrb	r3, [r3, #12]
 8009814:	4618      	mov	r0, r3
 8009816:	f000 fe39 	bl	800a48c <RTC_ByteToBcd2>
 800981a:	4603      	mov	r3, r0
 800981c:	061b      	lsls	r3, r3, #24
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
 800981e:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmDateWeekDaySel) | \
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	689b      	ldr	r3, [r3, #8]
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
 8009826:	431a      	orrs	r2, r3
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmMask)); 
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	685b      	ldr	r3, [r3, #4]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 800982c:	4313      	orrs	r3, r2
 800982e:	617b      	str	r3, [r7, #20]
  } 

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8009830:	4b0b      	ldr	r3, [pc, #44]	; (8009860 <RTC_SetAlarm+0x134>)
 8009832:	22ca      	movs	r2, #202	; 0xca
 8009834:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 8009836:	4b0a      	ldr	r3, [pc, #40]	; (8009860 <RTC_SetAlarm+0x134>)
 8009838:	2253      	movs	r2, #83	; 0x53
 800983a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (RTC_Alarm == RTC_Alarm_A)
 800983c:	68bb      	ldr	r3, [r7, #8]
 800983e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009842:	d103      	bne.n	800984c <RTC_SetAlarm+0x120>
  {
    RTC->ALRMAR = (uint32_t)tmpreg;
 8009844:	4a06      	ldr	r2, [pc, #24]	; (8009860 <RTC_SetAlarm+0x134>)
 8009846:	697b      	ldr	r3, [r7, #20]
 8009848:	61d3      	str	r3, [r2, #28]
 800984a:	e002      	b.n	8009852 <RTC_SetAlarm+0x126>
  }
  else
  {
    RTC->ALRMBR = (uint32_t)tmpreg;
 800984c:	4a04      	ldr	r2, [pc, #16]	; (8009860 <RTC_SetAlarm+0x134>)
 800984e:	697b      	ldr	r3, [r7, #20]
 8009850:	6213      	str	r3, [r2, #32]
  }

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF;   
 8009852:	4b03      	ldr	r3, [pc, #12]	; (8009860 <RTC_SetAlarm+0x134>)
 8009854:	22ff      	movs	r2, #255	; 0xff
 8009856:	625a      	str	r2, [r3, #36]	; 0x24
}
 8009858:	bf00      	nop
 800985a:	371c      	adds	r7, #28
 800985c:	46bd      	mov	sp, r7
 800985e:	bd90      	pop	{r4, r7, pc}
 8009860:	40002800 	.word	0x40002800

08009864 <RTC_AlarmStructInit>:
  * @param  RTC_AlarmStruct: pointer to a @ref RTC_AlarmTypeDef structure which
  *         will be initialized.
  * @retval None
  */
void RTC_AlarmStructInit(RTC_AlarmTypeDef* RTC_AlarmStruct)
{
 8009864:	b480      	push	{r7}
 8009866:	b083      	sub	sp, #12
 8009868:	af00      	add	r7, sp, #0
 800986a:	6078      	str	r0, [r7, #4]
  /* Alarm Time Settings : Time = 00h:00mn:00sec */
  RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = RTC_H12_AM;
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	2200      	movs	r2, #0
 8009870:	70da      	strb	r2, [r3, #3]
  RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours = 0;
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	2200      	movs	r2, #0
 8009876:	701a      	strb	r2, [r3, #0]
  RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes = 0;
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	2200      	movs	r2, #0
 800987c:	705a      	strb	r2, [r3, #1]
  RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds = 0;
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	2200      	movs	r2, #0
 8009882:	709a      	strb	r2, [r3, #2]

  /* Alarm Date Settings : Date = 1st day of the month */
  RTC_AlarmStruct->RTC_AlarmDateWeekDaySel = RTC_AlarmDateWeekDaySel_Date;
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	2200      	movs	r2, #0
 8009888:	609a      	str	r2, [r3, #8]
  RTC_AlarmStruct->RTC_AlarmDateWeekDay = 1;
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	2201      	movs	r2, #1
 800988e:	731a      	strb	r2, [r3, #12]

  /* Alarm Masks Settings : Mask =  all fields are not masked */
  RTC_AlarmStruct->RTC_AlarmMask = RTC_AlarmMask_None;
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	2200      	movs	r2, #0
 8009894:	605a      	str	r2, [r3, #4]
}
 8009896:	bf00      	nop
 8009898:	370c      	adds	r7, #12
 800989a:	46bd      	mov	sp, r7
 800989c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a0:	4770      	bx	lr

080098a2 <RTC_GetAlarm>:
  * @param  RTC_AlarmStruct: pointer to a RTC_AlarmTypeDef structure that will 
  *                          contains the output alarm configuration values.     
  * @retval None
  */
void RTC_GetAlarm(uint32_t RTC_Format, uint32_t RTC_Alarm, RTC_AlarmTypeDef* RTC_AlarmStruct)
{
 80098a2:	b580      	push	{r7, lr}
 80098a4:	b086      	sub	sp, #24
 80098a6:	af00      	add	r7, sp, #0
 80098a8:	60f8      	str	r0, [r7, #12]
 80098aa:	60b9      	str	r1, [r7, #8]
 80098ac:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 80098ae:	2300      	movs	r3, #0
 80098b0:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(RTC_Format));
  assert_param(IS_RTC_ALARM(RTC_Alarm)); 

  /* Get the RTC_ALRMxR register */
  if (RTC_Alarm == RTC_Alarm_A)
 80098b2:	68bb      	ldr	r3, [r7, #8]
 80098b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80098b8:	d103      	bne.n	80098c2 <RTC_GetAlarm+0x20>
  {
    tmpreg = (uint32_t)(RTC->ALRMAR);
 80098ba:	4b31      	ldr	r3, [pc, #196]	; (8009980 <RTC_GetAlarm+0xde>)
 80098bc:	69db      	ldr	r3, [r3, #28]
 80098be:	617b      	str	r3, [r7, #20]
 80098c0:	e002      	b.n	80098c8 <RTC_GetAlarm+0x26>
  }
  else
  {
    tmpreg = (uint32_t)(RTC->ALRMBR);
 80098c2:	4b2f      	ldr	r3, [pc, #188]	; (8009980 <RTC_GetAlarm+0xde>)
 80098c4:	6a1b      	ldr	r3, [r3, #32]
 80098c6:	617b      	str	r3, [r7, #20]
  }

  /* Fill the structure with the read parameters */
  RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours = (uint32_t)((tmpreg & (RTC_ALRMAR_HT | \
 80098c8:	697b      	ldr	r3, [r7, #20]
 80098ca:	0c1b      	lsrs	r3, r3, #16
 80098cc:	b2db      	uxtb	r3, r3
 80098ce:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80098d2:	b2da      	uxtb	r2, r3
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	701a      	strb	r2, [r3, #0]
                                                     RTC_ALRMAR_HU)) >> 16);
  RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes = (uint32_t)((tmpreg & (RTC_ALRMAR_MNT | \
 80098d8:	697b      	ldr	r3, [r7, #20]
 80098da:	0a1b      	lsrs	r3, r3, #8
 80098dc:	b2db      	uxtb	r3, r3
 80098de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80098e2:	b2da      	uxtb	r2, r3
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	705a      	strb	r2, [r3, #1]
                                                     RTC_ALRMAR_MNU)) >> 8);
  RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds = (uint32_t)(tmpreg & (RTC_ALRMAR_ST | \
 80098e8:	697b      	ldr	r3, [r7, #20]
 80098ea:	b2db      	uxtb	r3, r3
 80098ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80098f0:	b2da      	uxtb	r2, r3
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	709a      	strb	r2, [r3, #2]
                                                     RTC_ALRMAR_SU));
  RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = (uint32_t)((tmpreg & RTC_ALRMAR_PM) >> 16);
 80098f6:	697b      	ldr	r3, [r7, #20]
 80098f8:	0c1b      	lsrs	r3, r3, #16
 80098fa:	b2db      	uxtb	r3, r3
 80098fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009900:	b2da      	uxtb	r2, r3
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	70da      	strb	r2, [r3, #3]
  RTC_AlarmStruct->RTC_AlarmDateWeekDay = (uint32_t)((tmpreg & (RTC_ALRMAR_DT | RTC_ALRMAR_DU)) >> 24);
 8009906:	697b      	ldr	r3, [r7, #20]
 8009908:	0e1b      	lsrs	r3, r3, #24
 800990a:	b2db      	uxtb	r3, r3
 800990c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009910:	b2da      	uxtb	r2, r3
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	731a      	strb	r2, [r3, #12]
  RTC_AlarmStruct->RTC_AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMAR_WDSEL);
 8009916:	697b      	ldr	r3, [r7, #20]
 8009918:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	609a      	str	r2, [r3, #8]
  RTC_AlarmStruct->RTC_AlarmMask = (uint32_t)(tmpreg & RTC_AlarmMask_All);
 8009920:	697b      	ldr	r3, [r7, #20]
 8009922:	f003 3280 	and.w	r2, r3, #2155905152	; 0x80808080
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	605a      	str	r2, [r3, #4]

  if (RTC_Format == RTC_Format_BIN)
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	2b00      	cmp	r3, #0
 800992e:	d123      	bne.n	8009978 <RTC_GetAlarm+0xd6>
  {
    RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours = RTC_Bcd2ToByte(RTC_AlarmStruct-> \
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	781b      	ldrb	r3, [r3, #0]
 8009934:	4618      	mov	r0, r3
 8009936:	f000 fdc6 	bl	800a4c6 <RTC_Bcd2ToByte>
 800993a:	4603      	mov	r3, r0
 800993c:	461a      	mov	r2, r3
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	701a      	strb	r2, [r3, #0]
                                                        RTC_AlarmTime.RTC_Hours);
    RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes = RTC_Bcd2ToByte(RTC_AlarmStruct-> \
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	785b      	ldrb	r3, [r3, #1]
 8009946:	4618      	mov	r0, r3
 8009948:	f000 fdbd 	bl	800a4c6 <RTC_Bcd2ToByte>
 800994c:	4603      	mov	r3, r0
 800994e:	461a      	mov	r2, r3
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	705a      	strb	r2, [r3, #1]
                                                        RTC_AlarmTime.RTC_Minutes);
    RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds = RTC_Bcd2ToByte(RTC_AlarmStruct-> \
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	789b      	ldrb	r3, [r3, #2]
 8009958:	4618      	mov	r0, r3
 800995a:	f000 fdb4 	bl	800a4c6 <RTC_Bcd2ToByte>
 800995e:	4603      	mov	r3, r0
 8009960:	461a      	mov	r2, r3
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	709a      	strb	r2, [r3, #2]
                                                        RTC_AlarmTime.RTC_Seconds);
    RTC_AlarmStruct->RTC_AlarmDateWeekDay = RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmDateWeekDay);
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	7b1b      	ldrb	r3, [r3, #12]
 800996a:	4618      	mov	r0, r3
 800996c:	f000 fdab 	bl	800a4c6 <RTC_Bcd2ToByte>
 8009970:	4603      	mov	r3, r0
 8009972:	461a      	mov	r2, r3
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	731a      	strb	r2, [r3, #12]
  }  
}
 8009978:	bf00      	nop
 800997a:	3718      	adds	r7, #24
 800997c:	46bd      	mov	sp, r7
 800997e:	bd80      	pop	{r7, pc}
 8009980:	40002800 	.word	0x40002800

08009984 <RTC_AlarmCmd>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC Alarm is enabled/disabled
  *          - ERROR: RTC Alarm is not enabled/disabled  
  */
ErrorStatus RTC_AlarmCmd(uint32_t RTC_Alarm, FunctionalState NewState)
{
 8009984:	b480      	push	{r7}
 8009986:	b087      	sub	sp, #28
 8009988:	af00      	add	r7, sp, #0
 800998a:	6078      	str	r0, [r7, #4]
 800998c:	460b      	mov	r3, r1
 800998e:	70fb      	strb	r3, [r7, #3]
  __IO uint32_t alarmcounter = 0x00;
 8009990:	2300      	movs	r3, #0
 8009992:	60fb      	str	r3, [r7, #12]
  uint32_t alarmstatus = 0x00;
 8009994:	2300      	movs	r3, #0
 8009996:	613b      	str	r3, [r7, #16]
  ErrorStatus status = ERROR;
 8009998:	2300      	movs	r3, #0
 800999a:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_RTC_CMD_ALARM(RTC_Alarm));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 800999c:	4b1f      	ldr	r3, [pc, #124]	; (8009a1c <RTC_AlarmCmd+0x98>)
 800999e:	22ca      	movs	r2, #202	; 0xca
 80099a0:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 80099a2:	4b1e      	ldr	r3, [pc, #120]	; (8009a1c <RTC_AlarmCmd+0x98>)
 80099a4:	2253      	movs	r2, #83	; 0x53
 80099a6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm state */
  if (NewState != DISABLE)
 80099a8:	78fb      	ldrb	r3, [r7, #3]
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d008      	beq.n	80099c0 <RTC_AlarmCmd+0x3c>
  {
    RTC->CR |= (uint32_t)RTC_Alarm;
 80099ae:	4b1b      	ldr	r3, [pc, #108]	; (8009a1c <RTC_AlarmCmd+0x98>)
 80099b0:	689a      	ldr	r2, [r3, #8]
 80099b2:	491a      	ldr	r1, [pc, #104]	; (8009a1c <RTC_AlarmCmd+0x98>)
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	4313      	orrs	r3, r2
 80099b8:	608b      	str	r3, [r1, #8]

    status = SUCCESS;    
 80099ba:	2301      	movs	r3, #1
 80099bc:	75fb      	strb	r3, [r7, #23]
 80099be:	e022      	b.n	8009a06 <RTC_AlarmCmd+0x82>
  }
  else
  { 
    /* Disable the Alarm in RTC_CR register */
    RTC->CR &= (uint32_t)~RTC_Alarm;
 80099c0:	4b16      	ldr	r3, [pc, #88]	; (8009a1c <RTC_AlarmCmd+0x98>)
 80099c2:	689a      	ldr	r2, [r3, #8]
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	43db      	mvns	r3, r3
 80099c8:	4914      	ldr	r1, [pc, #80]	; (8009a1c <RTC_AlarmCmd+0x98>)
 80099ca:	4013      	ands	r3, r2
 80099cc:	608b      	str	r3, [r1, #8]
   
    /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
    do
    {
      alarmstatus = RTC->ISR & (RTC_Alarm >> 8);
 80099ce:	4b13      	ldr	r3, [pc, #76]	; (8009a1c <RTC_AlarmCmd+0x98>)
 80099d0:	68da      	ldr	r2, [r3, #12]
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	0a1b      	lsrs	r3, r3, #8
 80099d6:	4013      	ands	r3, r2
 80099d8:	613b      	str	r3, [r7, #16]
      alarmcounter++;  
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	3301      	adds	r3, #1
 80099de:	60fb      	str	r3, [r7, #12]
    } while((alarmcounter != INITMODE_TIMEOUT) && (alarmstatus == 0x00));
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80099e6:	d002      	beq.n	80099ee <RTC_AlarmCmd+0x6a>
 80099e8:	693b      	ldr	r3, [r7, #16]
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d0ef      	beq.n	80099ce <RTC_AlarmCmd+0x4a>
    
    if ((RTC->ISR & (RTC_Alarm >> 8)) == RESET)
 80099ee:	4b0b      	ldr	r3, [pc, #44]	; (8009a1c <RTC_AlarmCmd+0x98>)
 80099f0:	68da      	ldr	r2, [r3, #12]
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	0a1b      	lsrs	r3, r3, #8
 80099f6:	4013      	ands	r3, r2
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d102      	bne.n	8009a02 <RTC_AlarmCmd+0x7e>
    {
      status = ERROR;
 80099fc:	2300      	movs	r3, #0
 80099fe:	75fb      	strb	r3, [r7, #23]
 8009a00:	e001      	b.n	8009a06 <RTC_AlarmCmd+0x82>
    } 
    else
    {
      status = SUCCESS;
 8009a02:	2301      	movs	r3, #1
 8009a04:	75fb      	strb	r3, [r7, #23]
    }        
  } 

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 8009a06:	4b05      	ldr	r3, [pc, #20]	; (8009a1c <RTC_AlarmCmd+0x98>)
 8009a08:	22ff      	movs	r2, #255	; 0xff
 8009a0a:	625a      	str	r2, [r3, #36]	; 0x24
  
  return status;
 8009a0c:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a0e:	4618      	mov	r0, r3
 8009a10:	371c      	adds	r7, #28
 8009a12:	46bd      	mov	sp, r7
 8009a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a18:	4770      	bx	lr
 8009a1a:	bf00      	nop
 8009a1c:	40002800 	.word	0x40002800

08009a20 <RTC_AlarmSubSecondConfig>:
  *     @arg RTC_AlarmSubSecondMask_None   : SS[14:0] are compared and must match
  *                                          to activate alarm
  * @retval None
  */
void RTC_AlarmSubSecondConfig(uint32_t RTC_Alarm, uint32_t RTC_AlarmSubSecondValue, uint32_t RTC_AlarmSubSecondMask)
{
 8009a20:	b480      	push	{r7}
 8009a22:	b087      	sub	sp, #28
 8009a24:	af00      	add	r7, sp, #0
 8009a26:	60f8      	str	r0, [r7, #12]
 8009a28:	60b9      	str	r1, [r7, #8]
 8009a2a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8009a2c:	2300      	movs	r3, #0
 8009a2e:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM(RTC_Alarm));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(RTC_AlarmSubSecondValue));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(RTC_AlarmSubSecondMask));
  
  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8009a30:	4b0e      	ldr	r3, [pc, #56]	; (8009a6c <RTC_AlarmSubSecondConfig+0x4c>)
 8009a32:	22ca      	movs	r2, #202	; 0xca
 8009a34:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 8009a36:	4b0d      	ldr	r3, [pc, #52]	; (8009a6c <RTC_AlarmSubSecondConfig+0x4c>)
 8009a38:	2253      	movs	r2, #83	; 0x53
 8009a3a:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* Configure the Alarm A or Alarm B Sub Second registers */
  tmpreg = (uint32_t) (uint32_t)(RTC_AlarmSubSecondValue) | (uint32_t)(RTC_AlarmSubSecondMask);
 8009a3c:	68ba      	ldr	r2, [r7, #8]
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	4313      	orrs	r3, r2
 8009a42:	617b      	str	r3, [r7, #20]
  
  if (RTC_Alarm == RTC_Alarm_A)
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009a4a:	d103      	bne.n	8009a54 <RTC_AlarmSubSecondConfig+0x34>
  {
    /* Configure the Alarm A Sub Second register */
    RTC->ALRMASSR = tmpreg;
 8009a4c:	4a07      	ldr	r2, [pc, #28]	; (8009a6c <RTC_AlarmSubSecondConfig+0x4c>)
 8009a4e:	697b      	ldr	r3, [r7, #20]
 8009a50:	6453      	str	r3, [r2, #68]	; 0x44
 8009a52:	e002      	b.n	8009a5a <RTC_AlarmSubSecondConfig+0x3a>
  }
  else
  {
    /* Configure the Alarm B Sub Second register */
    RTC->ALRMBSSR = tmpreg;
 8009a54:	4a05      	ldr	r2, [pc, #20]	; (8009a6c <RTC_AlarmSubSecondConfig+0x4c>)
 8009a56:	697b      	ldr	r3, [r7, #20]
 8009a58:	6493      	str	r3, [r2, #72]	; 0x48
  }

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF;
 8009a5a:	4b04      	ldr	r3, [pc, #16]	; (8009a6c <RTC_AlarmSubSecondConfig+0x4c>)
 8009a5c:	22ff      	movs	r2, #255	; 0xff
 8009a5e:	625a      	str	r2, [r3, #36]	; 0x24

}
 8009a60:	bf00      	nop
 8009a62:	371c      	adds	r7, #28
 8009a64:	46bd      	mov	sp, r7
 8009a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a6a:	4770      	bx	lr
 8009a6c:	40002800 	.word	0x40002800

08009a70 <RTC_GetAlarmSubSecond>:
  *     @arg RTC_Alarm_B: to select Alarm B
  * @param  None
  * @retval RTC Alarm Sub seconds value.
  */
uint32_t RTC_GetAlarmSubSecond(uint32_t RTC_Alarm)
{
 8009a70:	b480      	push	{r7}
 8009a72:	b085      	sub	sp, #20
 8009a74:	af00      	add	r7, sp, #0
 8009a76:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8009a78:	2300      	movs	r3, #0
 8009a7a:	60fb      	str	r3, [r7, #12]
  
  /* Get the RTC_ALRMxR register */
  if (RTC_Alarm == RTC_Alarm_A)
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009a82:	d105      	bne.n	8009a90 <RTC_GetAlarmSubSecond+0x20>
  {
    tmpreg = (uint32_t)((RTC->ALRMASSR) & RTC_ALRMASSR_SS);
 8009a84:	4b08      	ldr	r3, [pc, #32]	; (8009aa8 <RTC_GetAlarmSubSecond+0x38>)
 8009a86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a88:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8009a8c:	60fb      	str	r3, [r7, #12]
 8009a8e:	e004      	b.n	8009a9a <RTC_GetAlarmSubSecond+0x2a>
  }
  else
  {
    tmpreg = (uint32_t)((RTC->ALRMBSSR) & RTC_ALRMBSSR_SS);
 8009a90:	4b05      	ldr	r3, [pc, #20]	; (8009aa8 <RTC_GetAlarmSubSecond+0x38>)
 8009a92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009a94:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8009a98:	60fb      	str	r3, [r7, #12]
  } 
  
  return (tmpreg);
 8009a9a:	68fb      	ldr	r3, [r7, #12]
}
 8009a9c:	4618      	mov	r0, r3
 8009a9e:	3714      	adds	r7, #20
 8009aa0:	46bd      	mov	sp, r7
 8009aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aa6:	4770      	bx	lr
 8009aa8:	40002800 	.word	0x40002800

08009aac <RTC_WakeUpClockConfig>:
  *            @arg RTC_WakeUpClock_CK_SPRE_16bits: RTC Wakeup Counter Clock = CK_SPRE
  *            @arg RTC_WakeUpClock_CK_SPRE_17bits: RTC Wakeup Counter Clock = CK_SPRE
  * @retval None
  */
void RTC_WakeUpClockConfig(uint32_t RTC_WakeUpClock)
{
 8009aac:	b480      	push	{r7}
 8009aae:	b083      	sub	sp, #12
 8009ab0:	af00      	add	r7, sp, #0
 8009ab2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(RTC_WakeUpClock));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8009ab4:	4b0d      	ldr	r3, [pc, #52]	; (8009aec <RTC_WakeUpClockConfig+0x40>)
 8009ab6:	22ca      	movs	r2, #202	; 0xca
 8009ab8:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 8009aba:	4b0c      	ldr	r3, [pc, #48]	; (8009aec <RTC_WakeUpClockConfig+0x40>)
 8009abc:	2253      	movs	r2, #83	; 0x53
 8009abe:	625a      	str	r2, [r3, #36]	; 0x24

  /* Clear the Wakeup Timer clock source bits in CR register */
  RTC->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8009ac0:	4b0a      	ldr	r3, [pc, #40]	; (8009aec <RTC_WakeUpClockConfig+0x40>)
 8009ac2:	689b      	ldr	r3, [r3, #8]
 8009ac4:	4a09      	ldr	r2, [pc, #36]	; (8009aec <RTC_WakeUpClockConfig+0x40>)
 8009ac6:	f023 0307 	bic.w	r3, r3, #7
 8009aca:	6093      	str	r3, [r2, #8]

  /* Configure the clock source */
  RTC->CR |= (uint32_t)RTC_WakeUpClock;
 8009acc:	4b07      	ldr	r3, [pc, #28]	; (8009aec <RTC_WakeUpClockConfig+0x40>)
 8009ace:	689a      	ldr	r2, [r3, #8]
 8009ad0:	4906      	ldr	r1, [pc, #24]	; (8009aec <RTC_WakeUpClockConfig+0x40>)
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	4313      	orrs	r3, r2
 8009ad6:	608b      	str	r3, [r1, #8]
  
  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 8009ad8:	4b04      	ldr	r3, [pc, #16]	; (8009aec <RTC_WakeUpClockConfig+0x40>)
 8009ada:	22ff      	movs	r2, #255	; 0xff
 8009adc:	625a      	str	r2, [r3, #36]	; 0x24
}
 8009ade:	bf00      	nop
 8009ae0:	370c      	adds	r7, #12
 8009ae2:	46bd      	mov	sp, r7
 8009ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ae8:	4770      	bx	lr
 8009aea:	bf00      	nop
 8009aec:	40002800 	.word	0x40002800

08009af0 <RTC_SetWakeUpCounter>:
  * @param  RTC_WakeUpCounter: specifies the WakeUp counter.
  *          This parameter can be a value from 0x0000 to 0xFFFF. 
  * @retval None
  */
void RTC_SetWakeUpCounter(uint32_t RTC_WakeUpCounter)
{
 8009af0:	b480      	push	{r7}
 8009af2:	b083      	sub	sp, #12
 8009af4:	af00      	add	r7, sp, #0
 8009af6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_COUNTER(RTC_WakeUpCounter));
  
  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8009af8:	4b08      	ldr	r3, [pc, #32]	; (8009b1c <RTC_SetWakeUpCounter+0x2c>)
 8009afa:	22ca      	movs	r2, #202	; 0xca
 8009afc:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 8009afe:	4b07      	ldr	r3, [pc, #28]	; (8009b1c <RTC_SetWakeUpCounter+0x2c>)
 8009b00:	2253      	movs	r2, #83	; 0x53
 8009b02:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* Configure the Wakeup Timer counter */
  RTC->WUTR = (uint32_t)RTC_WakeUpCounter;
 8009b04:	4a05      	ldr	r2, [pc, #20]	; (8009b1c <RTC_SetWakeUpCounter+0x2c>)
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	6153      	str	r3, [r2, #20]
  
  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 8009b0a:	4b04      	ldr	r3, [pc, #16]	; (8009b1c <RTC_SetWakeUpCounter+0x2c>)
 8009b0c:	22ff      	movs	r2, #255	; 0xff
 8009b0e:	625a      	str	r2, [r3, #36]	; 0x24
}
 8009b10:	bf00      	nop
 8009b12:	370c      	adds	r7, #12
 8009b14:	46bd      	mov	sp, r7
 8009b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b1a:	4770      	bx	lr
 8009b1c:	40002800 	.word	0x40002800

08009b20 <RTC_GetWakeUpCounter>:
  * @brief  Returns the RTC WakeUp timer counter value.
  * @param  None
  * @retval The RTC WakeUp Counter value.
  */
uint32_t RTC_GetWakeUpCounter(void)
{
 8009b20:	b480      	push	{r7}
 8009b22:	af00      	add	r7, sp, #0
  /* Get the counter value */
  return ((uint32_t)(RTC->WUTR & RTC_WUTR_WUT));
 8009b24:	4b03      	ldr	r3, [pc, #12]	; (8009b34 <RTC_GetWakeUpCounter+0x14>)
 8009b26:	695b      	ldr	r3, [r3, #20]
 8009b28:	b29b      	uxth	r3, r3
}
 8009b2a:	4618      	mov	r0, r3
 8009b2c:	46bd      	mov	sp, r7
 8009b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b32:	4770      	bx	lr
 8009b34:	40002800 	.word	0x40002800

08009b38 <RTC_WakeUpCmd>:
  * @param  NewState: new state of the WakeUp timer.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
ErrorStatus RTC_WakeUpCmd(FunctionalState NewState)
{
 8009b38:	b480      	push	{r7}
 8009b3a:	b087      	sub	sp, #28
 8009b3c:	af00      	add	r7, sp, #0
 8009b3e:	4603      	mov	r3, r0
 8009b40:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t wutcounter = 0x00;
 8009b42:	2300      	movs	r3, #0
 8009b44:	60fb      	str	r3, [r7, #12]
  uint32_t wutwfstatus = 0x00;
 8009b46:	2300      	movs	r3, #0
 8009b48:	613b      	str	r3, [r7, #16]
  ErrorStatus status = ERROR;
 8009b4a:	2300      	movs	r3, #0
 8009b4c:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8009b4e:	4b1e      	ldr	r3, [pc, #120]	; (8009bc8 <RTC_WakeUpCmd+0x90>)
 8009b50:	22ca      	movs	r2, #202	; 0xca
 8009b52:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 8009b54:	4b1c      	ldr	r3, [pc, #112]	; (8009bc8 <RTC_WakeUpCmd+0x90>)
 8009b56:	2253      	movs	r2, #83	; 0x53
 8009b58:	625a      	str	r2, [r3, #36]	; 0x24

  if (NewState != DISABLE)
 8009b5a:	79fb      	ldrb	r3, [r7, #7]
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d008      	beq.n	8009b72 <RTC_WakeUpCmd+0x3a>
  {
    /* Enable the Wakeup Timer */
    RTC->CR |= (uint32_t)RTC_CR_WUTE;
 8009b60:	4b19      	ldr	r3, [pc, #100]	; (8009bc8 <RTC_WakeUpCmd+0x90>)
 8009b62:	689b      	ldr	r3, [r3, #8]
 8009b64:	4a18      	ldr	r2, [pc, #96]	; (8009bc8 <RTC_WakeUpCmd+0x90>)
 8009b66:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009b6a:	6093      	str	r3, [r2, #8]
    status = SUCCESS;    
 8009b6c:	2301      	movs	r3, #1
 8009b6e:	75fb      	strb	r3, [r7, #23]
 8009b70:	e01f      	b.n	8009bb2 <RTC_WakeUpCmd+0x7a>
  }
  else
  {
    /* Disable the Wakeup Timer */
    RTC->CR &= (uint32_t)~RTC_CR_WUTE;
 8009b72:	4b15      	ldr	r3, [pc, #84]	; (8009bc8 <RTC_WakeUpCmd+0x90>)
 8009b74:	689b      	ldr	r3, [r3, #8]
 8009b76:	4a14      	ldr	r2, [pc, #80]	; (8009bc8 <RTC_WakeUpCmd+0x90>)
 8009b78:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009b7c:	6093      	str	r3, [r2, #8]
    /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
    do
    {
      wutwfstatus = RTC->ISR & RTC_ISR_WUTWF;
 8009b7e:	4b12      	ldr	r3, [pc, #72]	; (8009bc8 <RTC_WakeUpCmd+0x90>)
 8009b80:	68db      	ldr	r3, [r3, #12]
 8009b82:	f003 0304 	and.w	r3, r3, #4
 8009b86:	613b      	str	r3, [r7, #16]
      wutcounter++;  
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	3301      	adds	r3, #1
 8009b8c:	60fb      	str	r3, [r7, #12]
    } while((wutcounter != INITMODE_TIMEOUT) && (wutwfstatus == 0x00));
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009b94:	d002      	beq.n	8009b9c <RTC_WakeUpCmd+0x64>
 8009b96:	693b      	ldr	r3, [r7, #16]
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d0f0      	beq.n	8009b7e <RTC_WakeUpCmd+0x46>
    
    if ((RTC->ISR & RTC_ISR_WUTWF) == RESET)
 8009b9c:	4b0a      	ldr	r3, [pc, #40]	; (8009bc8 <RTC_WakeUpCmd+0x90>)
 8009b9e:	68db      	ldr	r3, [r3, #12]
 8009ba0:	f003 0304 	and.w	r3, r3, #4
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d102      	bne.n	8009bae <RTC_WakeUpCmd+0x76>
    {
      status = ERROR;
 8009ba8:	2300      	movs	r3, #0
 8009baa:	75fb      	strb	r3, [r7, #23]
 8009bac:	e001      	b.n	8009bb2 <RTC_WakeUpCmd+0x7a>
    }
    else
    {
      status = SUCCESS;
 8009bae:	2301      	movs	r3, #1
 8009bb0:	75fb      	strb	r3, [r7, #23]
    }    
  }

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 8009bb2:	4b05      	ldr	r3, [pc, #20]	; (8009bc8 <RTC_WakeUpCmd+0x90>)
 8009bb4:	22ff      	movs	r2, #255	; 0xff
 8009bb6:	625a      	str	r2, [r3, #36]	; 0x24
  
  return status;
 8009bb8:	7dfb      	ldrb	r3, [r7, #23]
}
 8009bba:	4618      	mov	r0, r3
 8009bbc:	371c      	adds	r7, #28
 8009bbe:	46bd      	mov	sp, r7
 8009bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bc4:	4770      	bx	lr
 8009bc6:	bf00      	nop
 8009bc8:	40002800 	.word	0x40002800

08009bcc <RTC_DayLightSavingConfig>:
  *            @arg RTC_StoreOperation_Reset: BCK Bit Reset
  *            @arg RTC_StoreOperation_Set: BCK Bit Set
  * @retval None
  */
void RTC_DayLightSavingConfig(uint32_t RTC_DayLightSaving, uint32_t RTC_StoreOperation)
{
 8009bcc:	b480      	push	{r7}
 8009bce:	b083      	sub	sp, #12
 8009bd0:	af00      	add	r7, sp, #0
 8009bd2:	6078      	str	r0, [r7, #4]
 8009bd4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_DAYLIGHT_SAVING(RTC_DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(RTC_StoreOperation));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8009bd6:	4b0e      	ldr	r3, [pc, #56]	; (8009c10 <RTC_DayLightSavingConfig+0x44>)
 8009bd8:	22ca      	movs	r2, #202	; 0xca
 8009bda:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 8009bdc:	4b0c      	ldr	r3, [pc, #48]	; (8009c10 <RTC_DayLightSavingConfig+0x44>)
 8009bde:	2253      	movs	r2, #83	; 0x53
 8009be0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Clear the bits to be configured */
  RTC->CR &= (uint32_t)~(RTC_CR_BCK);
 8009be2:	4b0b      	ldr	r3, [pc, #44]	; (8009c10 <RTC_DayLightSavingConfig+0x44>)
 8009be4:	689b      	ldr	r3, [r3, #8]
 8009be6:	4a0a      	ldr	r2, [pc, #40]	; (8009c10 <RTC_DayLightSavingConfig+0x44>)
 8009be8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009bec:	6093      	str	r3, [r2, #8]

  /* Configure the RTC_CR register */
  RTC->CR |= (uint32_t)(RTC_DayLightSaving | RTC_StoreOperation);
 8009bee:	4b08      	ldr	r3, [pc, #32]	; (8009c10 <RTC_DayLightSavingConfig+0x44>)
 8009bf0:	689a      	ldr	r2, [r3, #8]
 8009bf2:	6879      	ldr	r1, [r7, #4]
 8009bf4:	683b      	ldr	r3, [r7, #0]
 8009bf6:	430b      	orrs	r3, r1
 8009bf8:	4905      	ldr	r1, [pc, #20]	; (8009c10 <RTC_DayLightSavingConfig+0x44>)
 8009bfa:	4313      	orrs	r3, r2
 8009bfc:	608b      	str	r3, [r1, #8]

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 8009bfe:	4b04      	ldr	r3, [pc, #16]	; (8009c10 <RTC_DayLightSavingConfig+0x44>)
 8009c00:	22ff      	movs	r2, #255	; 0xff
 8009c02:	625a      	str	r2, [r3, #36]	; 0x24
}
 8009c04:	bf00      	nop
 8009c06:	370c      	adds	r7, #12
 8009c08:	46bd      	mov	sp, r7
 8009c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c0e:	4770      	bx	lr
 8009c10:	40002800 	.word	0x40002800

08009c14 <RTC_GetStoreOperation>:
  * @retval RTC Day Light Saving stored operation.
  *          - RTC_StoreOperation_Reset
  *          - RTC_StoreOperation_Set       
  */
uint32_t RTC_GetStoreOperation(void)
{
 8009c14:	b480      	push	{r7}
 8009c16:	af00      	add	r7, sp, #0
  return (RTC->CR & RTC_CR_BCK);
 8009c18:	4b04      	ldr	r3, [pc, #16]	; (8009c2c <RTC_GetStoreOperation+0x18>)
 8009c1a:	689b      	ldr	r3, [r3, #8]
 8009c1c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
}
 8009c20:	4618      	mov	r0, r3
 8009c22:	46bd      	mov	sp, r7
 8009c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c28:	4770      	bx	lr
 8009c2a:	bf00      	nop
 8009c2c:	40002800 	.word	0x40002800

08009c30 <RTC_OutputConfig>:
  *            @arg RTC_OutputPolarity_Low: The output pin is low when the 
  *                                 ALRAF/ALRBF/WUTF is high (depending on OSEL)
  * @retval None
  */
void RTC_OutputConfig(uint32_t RTC_Output, uint32_t RTC_OutputPolarity)
{
 8009c30:	b480      	push	{r7}
 8009c32:	b083      	sub	sp, #12
 8009c34:	af00      	add	r7, sp, #0
 8009c36:	6078      	str	r0, [r7, #4]
 8009c38:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_OUTPUT(RTC_Output));
  assert_param(IS_RTC_OUTPUT_POL(RTC_OutputPolarity));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8009c3a:	4b0e      	ldr	r3, [pc, #56]	; (8009c74 <RTC_OutputConfig+0x44>)
 8009c3c:	22ca      	movs	r2, #202	; 0xca
 8009c3e:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 8009c40:	4b0c      	ldr	r3, [pc, #48]	; (8009c74 <RTC_OutputConfig+0x44>)
 8009c42:	2253      	movs	r2, #83	; 0x53
 8009c44:	625a      	str	r2, [r3, #36]	; 0x24

  /* Clear the bits to be configured */
  RTC->CR &= (uint32_t)~(RTC_CR_OSEL | RTC_CR_POL);
 8009c46:	4b0b      	ldr	r3, [pc, #44]	; (8009c74 <RTC_OutputConfig+0x44>)
 8009c48:	689b      	ldr	r3, [r3, #8]
 8009c4a:	4a0a      	ldr	r2, [pc, #40]	; (8009c74 <RTC_OutputConfig+0x44>)
 8009c4c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009c50:	6093      	str	r3, [r2, #8]

  /* Configure the output selection and polarity */
  RTC->CR |= (uint32_t)(RTC_Output | RTC_OutputPolarity);
 8009c52:	4b08      	ldr	r3, [pc, #32]	; (8009c74 <RTC_OutputConfig+0x44>)
 8009c54:	689a      	ldr	r2, [r3, #8]
 8009c56:	6879      	ldr	r1, [r7, #4]
 8009c58:	683b      	ldr	r3, [r7, #0]
 8009c5a:	430b      	orrs	r3, r1
 8009c5c:	4905      	ldr	r1, [pc, #20]	; (8009c74 <RTC_OutputConfig+0x44>)
 8009c5e:	4313      	orrs	r3, r2
 8009c60:	608b      	str	r3, [r1, #8]

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 8009c62:	4b04      	ldr	r3, [pc, #16]	; (8009c74 <RTC_OutputConfig+0x44>)
 8009c64:	22ff      	movs	r2, #255	; 0xff
 8009c66:	625a      	str	r2, [r3, #36]	; 0x24
}
 8009c68:	bf00      	nop
 8009c6a:	370c      	adds	r7, #12
 8009c6c:	46bd      	mov	sp, r7
 8009c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c72:	4770      	bx	lr
 8009c74:	40002800 	.word	0x40002800

08009c78 <RTC_CoarseCalibConfig>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC Coarse calibration are initialized
  *          - ERROR: RTC Coarse calibration are not initialized     
  */
ErrorStatus RTC_CoarseCalibConfig(uint32_t RTC_CalibSign, uint32_t Value)
{
 8009c78:	b580      	push	{r7, lr}
 8009c7a:	b084      	sub	sp, #16
 8009c7c:	af00      	add	r7, sp, #0
 8009c7e:	6078      	str	r0, [r7, #4]
 8009c80:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8009c82:	2300      	movs	r3, #0
 8009c84:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_RTC_CALIB_SIGN(RTC_CalibSign));
  assert_param(IS_RTC_CALIB_VALUE(Value)); 

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8009c86:	4b0f      	ldr	r3, [pc, #60]	; (8009cc4 <RTC_CoarseCalibConfig+0x4c>)
 8009c88:	22ca      	movs	r2, #202	; 0xca
 8009c8a:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 8009c8c:	4b0d      	ldr	r3, [pc, #52]	; (8009cc4 <RTC_CoarseCalibConfig+0x4c>)
 8009c8e:	2253      	movs	r2, #83	; 0x53
 8009c90:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode() == ERROR)
 8009c92:	f7ff fa71 	bl	8009178 <RTC_EnterInitMode>
 8009c96:	4603      	mov	r3, r0
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d102      	bne.n	8009ca2 <RTC_CoarseCalibConfig+0x2a>
  {
    status = ERROR;
 8009c9c:	2300      	movs	r3, #0
 8009c9e:	73fb      	strb	r3, [r7, #15]
 8009ca0:	e008      	b.n	8009cb4 <RTC_CoarseCalibConfig+0x3c>
  } 
  else
  {
    /* Set the coarse calibration value */
    RTC->CALIBR = (uint32_t)(RTC_CalibSign | Value);
 8009ca2:	4908      	ldr	r1, [pc, #32]	; (8009cc4 <RTC_CoarseCalibConfig+0x4c>)
 8009ca4:	687a      	ldr	r2, [r7, #4]
 8009ca6:	683b      	ldr	r3, [r7, #0]
 8009ca8:	4313      	orrs	r3, r2
 8009caa:	618b      	str	r3, [r1, #24]
    /* Exit Initialization mode */
    RTC_ExitInitMode();
 8009cac:	f7ff fa9e 	bl	80091ec <RTC_ExitInitMode>
    
    status = SUCCESS;
 8009cb0:	2301      	movs	r3, #1
 8009cb2:	73fb      	strb	r3, [r7, #15]
  } 

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 8009cb4:	4b03      	ldr	r3, [pc, #12]	; (8009cc4 <RTC_CoarseCalibConfig+0x4c>)
 8009cb6:	22ff      	movs	r2, #255	; 0xff
 8009cb8:	625a      	str	r2, [r3, #36]	; 0x24
  
  return status;
 8009cba:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cbc:	4618      	mov	r0, r3
 8009cbe:	3710      	adds	r7, #16
 8009cc0:	46bd      	mov	sp, r7
 8009cc2:	bd80      	pop	{r7, pc}
 8009cc4:	40002800 	.word	0x40002800

08009cc8 <RTC_CoarseCalibCmd>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC Coarse calibration are enabled/disabled
  *          - ERROR: RTC Coarse calibration are not enabled/disabled    
  */
ErrorStatus RTC_CoarseCalibCmd(FunctionalState NewState)
{
 8009cc8:	b580      	push	{r7, lr}
 8009cca:	b084      	sub	sp, #16
 8009ccc:	af00      	add	r7, sp, #0
 8009cce:	4603      	mov	r3, r0
 8009cd0:	71fb      	strb	r3, [r7, #7]
  ErrorStatus status = ERROR;
 8009cd2:	2300      	movs	r3, #0
 8009cd4:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8009cd6:	4b15      	ldr	r3, [pc, #84]	; (8009d2c <RTC_CoarseCalibCmd+0x64>)
 8009cd8:	22ca      	movs	r2, #202	; 0xca
 8009cda:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 8009cdc:	4b13      	ldr	r3, [pc, #76]	; (8009d2c <RTC_CoarseCalibCmd+0x64>)
 8009cde:	2253      	movs	r2, #83	; 0x53
 8009ce0:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* Set Initialization mode */
  if (RTC_EnterInitMode() == ERROR)
 8009ce2:	f7ff fa49 	bl	8009178 <RTC_EnterInitMode>
 8009ce6:	4603      	mov	r3, r0
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d102      	bne.n	8009cf2 <RTC_CoarseCalibCmd+0x2a>
  {
    status =  ERROR;
 8009cec:	2300      	movs	r3, #0
 8009cee:	73fb      	strb	r3, [r7, #15]
 8009cf0:	e013      	b.n	8009d1a <RTC_CoarseCalibCmd+0x52>
  }
  else
  {
    if (NewState != DISABLE)
 8009cf2:	79fb      	ldrb	r3, [r7, #7]
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d006      	beq.n	8009d06 <RTC_CoarseCalibCmd+0x3e>
    {
      /* Enable the Coarse Calibration */
      RTC->CR |= (uint32_t)RTC_CR_DCE;
 8009cf8:	4b0c      	ldr	r3, [pc, #48]	; (8009d2c <RTC_CoarseCalibCmd+0x64>)
 8009cfa:	689b      	ldr	r3, [r3, #8]
 8009cfc:	4a0b      	ldr	r2, [pc, #44]	; (8009d2c <RTC_CoarseCalibCmd+0x64>)
 8009cfe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009d02:	6093      	str	r3, [r2, #8]
 8009d04:	e005      	b.n	8009d12 <RTC_CoarseCalibCmd+0x4a>
    }
    else
    { 
      /* Disable the Coarse Calibration */
      RTC->CR &= (uint32_t)~RTC_CR_DCE;
 8009d06:	4b09      	ldr	r3, [pc, #36]	; (8009d2c <RTC_CoarseCalibCmd+0x64>)
 8009d08:	689b      	ldr	r3, [r3, #8]
 8009d0a:	4a08      	ldr	r2, [pc, #32]	; (8009d2c <RTC_CoarseCalibCmd+0x64>)
 8009d0c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009d10:	6093      	str	r3, [r2, #8]
    }
    /* Exit Initialization mode */
    RTC_ExitInitMode();
 8009d12:	f7ff fa6b 	bl	80091ec <RTC_ExitInitMode>
    
    status = SUCCESS;
 8009d16:	2301      	movs	r3, #1
 8009d18:	73fb      	strb	r3, [r7, #15]
  } 
  
  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 8009d1a:	4b04      	ldr	r3, [pc, #16]	; (8009d2c <RTC_CoarseCalibCmd+0x64>)
 8009d1c:	22ff      	movs	r2, #255	; 0xff
 8009d1e:	625a      	str	r2, [r3, #36]	; 0x24
  
  return status;
 8009d20:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d22:	4618      	mov	r0, r3
 8009d24:	3710      	adds	r7, #16
 8009d26:	46bd      	mov	sp, r7
 8009d28:	bd80      	pop	{r7, pc}
 8009d2a:	bf00      	nop
 8009d2c:	40002800 	.word	0x40002800

08009d30 <RTC_CalibOutputCmd>:
  * @param  NewState: new state of the digital calibration Output.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RTC_CalibOutputCmd(FunctionalState NewState)
{
 8009d30:	b480      	push	{r7}
 8009d32:	b083      	sub	sp, #12
 8009d34:	af00      	add	r7, sp, #0
 8009d36:	4603      	mov	r3, r0
 8009d38:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8009d3a:	4b0f      	ldr	r3, [pc, #60]	; (8009d78 <RTC_CalibOutputCmd+0x48>)
 8009d3c:	22ca      	movs	r2, #202	; 0xca
 8009d3e:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 8009d40:	4b0d      	ldr	r3, [pc, #52]	; (8009d78 <RTC_CalibOutputCmd+0x48>)
 8009d42:	2253      	movs	r2, #83	; 0x53
 8009d44:	625a      	str	r2, [r3, #36]	; 0x24
  
  if (NewState != DISABLE)
 8009d46:	79fb      	ldrb	r3, [r7, #7]
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d006      	beq.n	8009d5a <RTC_CalibOutputCmd+0x2a>
  {
    /* Enable the RTC clock output */
    RTC->CR |= (uint32_t)RTC_CR_COE;
 8009d4c:	4b0a      	ldr	r3, [pc, #40]	; (8009d78 <RTC_CalibOutputCmd+0x48>)
 8009d4e:	689b      	ldr	r3, [r3, #8]
 8009d50:	4a09      	ldr	r2, [pc, #36]	; (8009d78 <RTC_CalibOutputCmd+0x48>)
 8009d52:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009d56:	6093      	str	r3, [r2, #8]
 8009d58:	e005      	b.n	8009d66 <RTC_CalibOutputCmd+0x36>
  }
  else
  { 
    /* Disable the RTC clock output */
    RTC->CR &= (uint32_t)~RTC_CR_COE;
 8009d5a:	4b07      	ldr	r3, [pc, #28]	; (8009d78 <RTC_CalibOutputCmd+0x48>)
 8009d5c:	689b      	ldr	r3, [r3, #8]
 8009d5e:	4a06      	ldr	r2, [pc, #24]	; (8009d78 <RTC_CalibOutputCmd+0x48>)
 8009d60:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8009d64:	6093      	str	r3, [r2, #8]
  }
  
  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 8009d66:	4b04      	ldr	r3, [pc, #16]	; (8009d78 <RTC_CalibOutputCmd+0x48>)
 8009d68:	22ff      	movs	r2, #255	; 0xff
 8009d6a:	625a      	str	r2, [r3, #36]	; 0x24
}
 8009d6c:	bf00      	nop
 8009d6e:	370c      	adds	r7, #12
 8009d70:	46bd      	mov	sp, r7
 8009d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d76:	4770      	bx	lr
 8009d78:	40002800 	.word	0x40002800

08009d7c <RTC_CalibOutputConfig>:
  *     @arg RTC_CalibOutput_512Hz: A signal has a regular waveform at 512Hz. 
  *     @arg RTC_CalibOutput_1Hz  : A signal has a regular waveform at 1Hz.
  * @retval None
*/
void RTC_CalibOutputConfig(uint32_t RTC_CalibOutput)
{
 8009d7c:	b480      	push	{r7}
 8009d7e:	b083      	sub	sp, #12
 8009d80:	af00      	add	r7, sp, #0
 8009d82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_CALIB_OUTPUT(RTC_CalibOutput));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8009d84:	4b0d      	ldr	r3, [pc, #52]	; (8009dbc <RTC_CalibOutputConfig+0x40>)
 8009d86:	22ca      	movs	r2, #202	; 0xca
 8009d88:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 8009d8a:	4b0c      	ldr	r3, [pc, #48]	; (8009dbc <RTC_CalibOutputConfig+0x40>)
 8009d8c:	2253      	movs	r2, #83	; 0x53
 8009d8e:	625a      	str	r2, [r3, #36]	; 0x24
  
  /*clear flags before configuration */
  RTC->CR &= (uint32_t)~(RTC_CR_COSEL);
 8009d90:	4b0a      	ldr	r3, [pc, #40]	; (8009dbc <RTC_CalibOutputConfig+0x40>)
 8009d92:	689b      	ldr	r3, [r3, #8]
 8009d94:	4a09      	ldr	r2, [pc, #36]	; (8009dbc <RTC_CalibOutputConfig+0x40>)
 8009d96:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8009d9a:	6093      	str	r3, [r2, #8]

  /* Configure the RTC_CR register */
  RTC->CR |= (uint32_t)RTC_CalibOutput;
 8009d9c:	4b07      	ldr	r3, [pc, #28]	; (8009dbc <RTC_CalibOutputConfig+0x40>)
 8009d9e:	689a      	ldr	r2, [r3, #8]
 8009da0:	4906      	ldr	r1, [pc, #24]	; (8009dbc <RTC_CalibOutputConfig+0x40>)
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	4313      	orrs	r3, r2
 8009da6:	608b      	str	r3, [r1, #8]

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF;
 8009da8:	4b04      	ldr	r3, [pc, #16]	; (8009dbc <RTC_CalibOutputConfig+0x40>)
 8009daa:	22ff      	movs	r2, #255	; 0xff
 8009dac:	625a      	str	r2, [r3, #36]	; 0x24
}
 8009dae:	bf00      	nop
 8009db0:	370c      	adds	r7, #12
 8009db2:	46bd      	mov	sp, r7
 8009db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009db8:	4770      	bx	lr
 8009dba:	bf00      	nop
 8009dbc:	40002800 	.word	0x40002800

08009dc0 <RTC_SmoothCalibConfig>:
  *          - ERROR: RTC Calib registers are not configured
*/
ErrorStatus RTC_SmoothCalibConfig(uint32_t RTC_SmoothCalibPeriod,
                                  uint32_t RTC_SmoothCalibPlusPulses,
                                  uint32_t RTC_SmouthCalibMinusPulsesValue)
{
 8009dc0:	b480      	push	{r7}
 8009dc2:	b087      	sub	sp, #28
 8009dc4:	af00      	add	r7, sp, #0
 8009dc6:	60f8      	str	r0, [r7, #12]
 8009dc8:	60b9      	str	r1, [r7, #8]
 8009dca:	607a      	str	r2, [r7, #4]
  ErrorStatus status = ERROR;
 8009dcc:	2300      	movs	r3, #0
 8009dce:	75fb      	strb	r3, [r7, #23]
  uint32_t recalpfcount = 0;
 8009dd0:	2300      	movs	r3, #0
 8009dd2:	613b      	str	r3, [r7, #16]
  assert_param(IS_RTC_SMOOTH_CALIB_PERIOD(RTC_SmoothCalibPeriod));
  assert_param(IS_RTC_SMOOTH_CALIB_PLUS(RTC_SmoothCalibPlusPulses));
  assert_param(IS_RTC_SMOOTH_CALIB_MINUS(RTC_SmouthCalibMinusPulsesValue));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8009dd4:	4b1a      	ldr	r3, [pc, #104]	; (8009e40 <RTC_SmoothCalibConfig+0x80>)
 8009dd6:	22ca      	movs	r2, #202	; 0xca
 8009dd8:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 8009dda:	4b19      	ldr	r3, [pc, #100]	; (8009e40 <RTC_SmoothCalibConfig+0x80>)
 8009ddc:	2253      	movs	r2, #83	; 0x53
 8009dde:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* check if a calibration is pending*/
  if ((RTC->ISR & RTC_ISR_RECALPF) != RESET)
 8009de0:	4b17      	ldr	r3, [pc, #92]	; (8009e40 <RTC_SmoothCalibConfig+0x80>)
 8009de2:	68db      	ldr	r3, [r3, #12]
 8009de4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d00d      	beq.n	8009e08 <RTC_SmoothCalibConfig+0x48>
  {
    /* wait until the Calibration is completed*/
    while (((RTC->ISR & RTC_ISR_RECALPF) != RESET) && (recalpfcount != RECALPF_TIMEOUT))
 8009dec:	e002      	b.n	8009df4 <RTC_SmoothCalibConfig+0x34>
    {
      recalpfcount++;
 8009dee:	693b      	ldr	r3, [r7, #16]
 8009df0:	3301      	adds	r3, #1
 8009df2:	613b      	str	r3, [r7, #16]
    while (((RTC->ISR & RTC_ISR_RECALPF) != RESET) && (recalpfcount != RECALPF_TIMEOUT))
 8009df4:	4b12      	ldr	r3, [pc, #72]	; (8009e40 <RTC_SmoothCalibConfig+0x80>)
 8009df6:	68db      	ldr	r3, [r3, #12]
 8009df8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d003      	beq.n	8009e08 <RTC_SmoothCalibConfig+0x48>
 8009e00:	693b      	ldr	r3, [r7, #16]
 8009e02:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009e06:	d1f2      	bne.n	8009dee <RTC_SmoothCalibConfig+0x2e>
    }
  }

  /* check if the calibration pending is completed or if there is no calibration operation at all*/
  if ((RTC->ISR & RTC_ISR_RECALPF) == RESET)
 8009e08:	4b0d      	ldr	r3, [pc, #52]	; (8009e40 <RTC_SmoothCalibConfig+0x80>)
 8009e0a:	68db      	ldr	r3, [r3, #12]
 8009e0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d109      	bne.n	8009e28 <RTC_SmoothCalibConfig+0x68>
  {
    /* Configure the Smooth calibration settings */
    RTC->CALR = (uint32_t)((uint32_t)RTC_SmoothCalibPeriod | (uint32_t)RTC_SmoothCalibPlusPulses | (uint32_t)RTC_SmouthCalibMinusPulsesValue);
 8009e14:	68fa      	ldr	r2, [r7, #12]
 8009e16:	68bb      	ldr	r3, [r7, #8]
 8009e18:	431a      	orrs	r2, r3
 8009e1a:	4909      	ldr	r1, [pc, #36]	; (8009e40 <RTC_SmoothCalibConfig+0x80>)
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	4313      	orrs	r3, r2
 8009e20:	63cb      	str	r3, [r1, #60]	; 0x3c

    status = SUCCESS;
 8009e22:	2301      	movs	r3, #1
 8009e24:	75fb      	strb	r3, [r7, #23]
 8009e26:	e001      	b.n	8009e2c <RTC_SmoothCalibConfig+0x6c>
  }
  else
  {
    status = ERROR;
 8009e28:	2300      	movs	r3, #0
 8009e2a:	75fb      	strb	r3, [r7, #23]
  }

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF;
 8009e2c:	4b04      	ldr	r3, [pc, #16]	; (8009e40 <RTC_SmoothCalibConfig+0x80>)
 8009e2e:	22ff      	movs	r2, #255	; 0xff
 8009e30:	625a      	str	r2, [r3, #36]	; 0x24
  
  return (ErrorStatus)(status);
 8009e32:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e34:	4618      	mov	r0, r3
 8009e36:	371c      	adds	r7, #28
 8009e38:	46bd      	mov	sp, r7
 8009e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e3e:	4770      	bx	lr
 8009e40:	40002800 	.word	0x40002800

08009e44 <RTC_TimeStampCmd>:
  * @param  NewState: new state of the TimeStamp.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RTC_TimeStampCmd(uint32_t RTC_TimeStampEdge, FunctionalState NewState)
{
 8009e44:	b480      	push	{r7}
 8009e46:	b085      	sub	sp, #20
 8009e48:	af00      	add	r7, sp, #0
 8009e4a:	6078      	str	r0, [r7, #4]
 8009e4c:	460b      	mov	r3, r1
 8009e4e:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpreg = 0;
 8009e50:	2300      	movs	r3, #0
 8009e52:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RTC_TIMESTAMP_EDGE(RTC_TimeStampEdge));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(RTC->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 8009e54:	4b13      	ldr	r3, [pc, #76]	; (8009ea4 <RTC_TimeStampCmd+0x60>)
 8009e56:	689b      	ldr	r3, [r3, #8]
 8009e58:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009e5c:	f023 0308 	bic.w	r3, r3, #8
 8009e60:	60fb      	str	r3, [r7, #12]

  /* Get the new configuration */
  if (NewState != DISABLE)
 8009e62:	78fb      	ldrb	r3, [r7, #3]
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d006      	beq.n	8009e76 <RTC_TimeStampCmd+0x32>
  {
    tmpreg |= (uint32_t)(RTC_TimeStampEdge | RTC_CR_TSE);
 8009e68:	687a      	ldr	r2, [r7, #4]
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	4313      	orrs	r3, r2
 8009e6e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8009e72:	60fb      	str	r3, [r7, #12]
 8009e74:	e003      	b.n	8009e7e <RTC_TimeStampCmd+0x3a>
  }
  else
  {
    tmpreg |= (uint32_t)(RTC_TimeStampEdge);
 8009e76:	68fa      	ldr	r2, [r7, #12]
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	4313      	orrs	r3, r2
 8009e7c:	60fb      	str	r3, [r7, #12]
  }

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8009e7e:	4b09      	ldr	r3, [pc, #36]	; (8009ea4 <RTC_TimeStampCmd+0x60>)
 8009e80:	22ca      	movs	r2, #202	; 0xca
 8009e82:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 8009e84:	4b07      	ldr	r3, [pc, #28]	; (8009ea4 <RTC_TimeStampCmd+0x60>)
 8009e86:	2253      	movs	r2, #83	; 0x53
 8009e88:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Time Stamp TSEDGE and Enable bits */
  RTC->CR = (uint32_t)tmpreg;
 8009e8a:	4a06      	ldr	r2, [pc, #24]	; (8009ea4 <RTC_TimeStampCmd+0x60>)
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 8009e90:	4b04      	ldr	r3, [pc, #16]	; (8009ea4 <RTC_TimeStampCmd+0x60>)
 8009e92:	22ff      	movs	r2, #255	; 0xff
 8009e94:	625a      	str	r2, [r3, #36]	; 0x24
}
 8009e96:	bf00      	nop
 8009e98:	3714      	adds	r7, #20
 8009e9a:	46bd      	mov	sp, r7
 8009e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ea0:	4770      	bx	lr
 8009ea2:	bf00      	nop
 8009ea4:	40002800 	.word	0x40002800

08009ea8 <RTC_GetTimeStamp>:
  *                             contains the TimeStamp date values.     
  * @retval None
  */
void RTC_GetTimeStamp(uint32_t RTC_Format, RTC_TimeTypeDef* RTC_StampTimeStruct, 
                                      RTC_DateTypeDef* RTC_StampDateStruct)
{
 8009ea8:	b580      	push	{r7, lr}
 8009eaa:	b086      	sub	sp, #24
 8009eac:	af00      	add	r7, sp, #0
 8009eae:	60f8      	str	r0, [r7, #12]
 8009eb0:	60b9      	str	r1, [r7, #8]
 8009eb2:	607a      	str	r2, [r7, #4]
  uint32_t tmptime = 0, tmpdate = 0;
 8009eb4:	2300      	movs	r3, #0
 8009eb6:	617b      	str	r3, [r7, #20]
 8009eb8:	2300      	movs	r3, #0
 8009eba:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(RTC_Format));

  /* Get the TimeStamp time and date registers values */
  tmptime = (uint32_t)(RTC->TSTR & RTC_TR_RESERVED_MASK);
 8009ebc:	4b41      	ldr	r3, [pc, #260]	; (8009fc4 <RTC_GetTimeStamp+0x11c>)
 8009ebe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ec0:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8009ec4:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8009ec8:	617b      	str	r3, [r7, #20]
  tmpdate = (uint32_t)(RTC->TSDR & RTC_DR_RESERVED_MASK);
 8009eca:	4b3e      	ldr	r3, [pc, #248]	; (8009fc4 <RTC_GetTimeStamp+0x11c>)
 8009ecc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ece:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8009ed2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8009ed6:	613b      	str	r3, [r7, #16]

  /* Fill the Time structure fields with the read parameters */
  RTC_StampTimeStruct->RTC_Hours = (uint8_t)((tmptime & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 8009ed8:	697b      	ldr	r3, [r7, #20]
 8009eda:	0c1b      	lsrs	r3, r3, #16
 8009edc:	b2db      	uxtb	r3, r3
 8009ede:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009ee2:	b2da      	uxtb	r2, r3
 8009ee4:	68bb      	ldr	r3, [r7, #8]
 8009ee6:	701a      	strb	r2, [r3, #0]
  RTC_StampTimeStruct->RTC_Minutes = (uint8_t)((tmptime & (RTC_TR_MNT | RTC_TR_MNU)) >> 8);
 8009ee8:	697b      	ldr	r3, [r7, #20]
 8009eea:	0a1b      	lsrs	r3, r3, #8
 8009eec:	b2db      	uxtb	r3, r3
 8009eee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009ef2:	b2da      	uxtb	r2, r3
 8009ef4:	68bb      	ldr	r3, [r7, #8]
 8009ef6:	705a      	strb	r2, [r3, #1]
  RTC_StampTimeStruct->RTC_Seconds = (uint8_t)(tmptime & (RTC_TR_ST | RTC_TR_SU));
 8009ef8:	697b      	ldr	r3, [r7, #20]
 8009efa:	b2db      	uxtb	r3, r3
 8009efc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009f00:	b2da      	uxtb	r2, r3
 8009f02:	68bb      	ldr	r3, [r7, #8]
 8009f04:	709a      	strb	r2, [r3, #2]
  RTC_StampTimeStruct->RTC_H12 = (uint8_t)((tmptime & (RTC_TR_PM)) >> 16);  
 8009f06:	697b      	ldr	r3, [r7, #20]
 8009f08:	0c1b      	lsrs	r3, r3, #16
 8009f0a:	b2db      	uxtb	r3, r3
 8009f0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f10:	b2da      	uxtb	r2, r3
 8009f12:	68bb      	ldr	r3, [r7, #8]
 8009f14:	70da      	strb	r2, [r3, #3]

  /* Fill the Date structure fields with the read parameters */
  RTC_StampDateStruct->RTC_Year = 0;
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	2200      	movs	r2, #0
 8009f1a:	70da      	strb	r2, [r3, #3]
  RTC_StampDateStruct->RTC_Month = (uint8_t)((tmpdate & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 8009f1c:	693b      	ldr	r3, [r7, #16]
 8009f1e:	0a1b      	lsrs	r3, r3, #8
 8009f20:	b2db      	uxtb	r3, r3
 8009f22:	f003 031f 	and.w	r3, r3, #31
 8009f26:	b2da      	uxtb	r2, r3
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	705a      	strb	r2, [r3, #1]
  RTC_StampDateStruct->RTC_Date = (uint8_t)(tmpdate & (RTC_DR_DT | RTC_DR_DU));
 8009f2c:	693b      	ldr	r3, [r7, #16]
 8009f2e:	b2db      	uxtb	r3, r3
 8009f30:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009f34:	b2da      	uxtb	r2, r3
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	709a      	strb	r2, [r3, #2]
  RTC_StampDateStruct->RTC_WeekDay = (uint8_t)((tmpdate & (RTC_DR_WDU)) >> 13);
 8009f3a:	693b      	ldr	r3, [r7, #16]
 8009f3c:	0b5b      	lsrs	r3, r3, #13
 8009f3e:	b2db      	uxtb	r3, r3
 8009f40:	f003 0307 	and.w	r3, r3, #7
 8009f44:	b2da      	uxtb	r2, r3
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (RTC_Format == RTC_Format_BIN)
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d135      	bne.n	8009fbc <RTC_GetTimeStamp+0x114>
  {
    /* Convert the Time structure parameters to Binary format */
    RTC_StampTimeStruct->RTC_Hours = (uint8_t)RTC_Bcd2ToByte(RTC_StampTimeStruct->RTC_Hours);
 8009f50:	68bb      	ldr	r3, [r7, #8]
 8009f52:	781b      	ldrb	r3, [r3, #0]
 8009f54:	4618      	mov	r0, r3
 8009f56:	f000 fab6 	bl	800a4c6 <RTC_Bcd2ToByte>
 8009f5a:	4603      	mov	r3, r0
 8009f5c:	461a      	mov	r2, r3
 8009f5e:	68bb      	ldr	r3, [r7, #8]
 8009f60:	701a      	strb	r2, [r3, #0]
    RTC_StampTimeStruct->RTC_Minutes = (uint8_t)RTC_Bcd2ToByte(RTC_StampTimeStruct->RTC_Minutes);
 8009f62:	68bb      	ldr	r3, [r7, #8]
 8009f64:	785b      	ldrb	r3, [r3, #1]
 8009f66:	4618      	mov	r0, r3
 8009f68:	f000 faad 	bl	800a4c6 <RTC_Bcd2ToByte>
 8009f6c:	4603      	mov	r3, r0
 8009f6e:	461a      	mov	r2, r3
 8009f70:	68bb      	ldr	r3, [r7, #8]
 8009f72:	705a      	strb	r2, [r3, #1]
    RTC_StampTimeStruct->RTC_Seconds = (uint8_t)RTC_Bcd2ToByte(RTC_StampTimeStruct->RTC_Seconds);
 8009f74:	68bb      	ldr	r3, [r7, #8]
 8009f76:	789b      	ldrb	r3, [r3, #2]
 8009f78:	4618      	mov	r0, r3
 8009f7a:	f000 faa4 	bl	800a4c6 <RTC_Bcd2ToByte>
 8009f7e:	4603      	mov	r3, r0
 8009f80:	461a      	mov	r2, r3
 8009f82:	68bb      	ldr	r3, [r7, #8]
 8009f84:	709a      	strb	r2, [r3, #2]

    /* Convert the Date structure parameters to Binary format */
    RTC_StampDateStruct->RTC_Month = (uint8_t)RTC_Bcd2ToByte(RTC_StampDateStruct->RTC_Month);
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	785b      	ldrb	r3, [r3, #1]
 8009f8a:	4618      	mov	r0, r3
 8009f8c:	f000 fa9b 	bl	800a4c6 <RTC_Bcd2ToByte>
 8009f90:	4603      	mov	r3, r0
 8009f92:	461a      	mov	r2, r3
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	705a      	strb	r2, [r3, #1]
    RTC_StampDateStruct->RTC_Date = (uint8_t)RTC_Bcd2ToByte(RTC_StampDateStruct->RTC_Date);
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	789b      	ldrb	r3, [r3, #2]
 8009f9c:	4618      	mov	r0, r3
 8009f9e:	f000 fa92 	bl	800a4c6 <RTC_Bcd2ToByte>
 8009fa2:	4603      	mov	r3, r0
 8009fa4:	461a      	mov	r2, r3
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	709a      	strb	r2, [r3, #2]
    RTC_StampDateStruct->RTC_WeekDay = (uint8_t)RTC_Bcd2ToByte(RTC_StampDateStruct->RTC_WeekDay);
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	781b      	ldrb	r3, [r3, #0]
 8009fae:	4618      	mov	r0, r3
 8009fb0:	f000 fa89 	bl	800a4c6 <RTC_Bcd2ToByte>
 8009fb4:	4603      	mov	r3, r0
 8009fb6:	461a      	mov	r2, r3
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	701a      	strb	r2, [r3, #0]
  }
}
 8009fbc:	bf00      	nop
 8009fbe:	3718      	adds	r7, #24
 8009fc0:	46bd      	mov	sp, r7
 8009fc2:	bd80      	pop	{r7, pc}
 8009fc4:	40002800 	.word	0x40002800

08009fc8 <RTC_GetTimeStampSubSecond>:
  * @brief  Get the RTC timestamp Sub seconds value.
  * @param  None
  * @retval RTC current timestamp Sub seconds value.
  */
uint32_t RTC_GetTimeStampSubSecond(void)
{
 8009fc8:	b480      	push	{r7}
 8009fca:	af00      	add	r7, sp, #0
  /* Get timestamp sub seconds values from the correspondent registers */
  return (uint32_t)(RTC->TSSSR);
 8009fcc:	4b03      	ldr	r3, [pc, #12]	; (8009fdc <RTC_GetTimeStampSubSecond+0x14>)
 8009fce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
 8009fd0:	4618      	mov	r0, r3
 8009fd2:	46bd      	mov	sp, r7
 8009fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fd8:	4770      	bx	lr
 8009fda:	bf00      	nop
 8009fdc:	40002800 	.word	0x40002800

08009fe0 <RTC_TamperTriggerConfig>:
  *     @arg RTC_TamperTrigger_LowLevel: Low Level of the tamper pin causes tamper event.
  *     @arg RTC_TamperTrigger_HighLevel: High Level of the tamper pin causes tamper event.
  * @retval None
  */
void RTC_TamperTriggerConfig(uint32_t RTC_Tamper, uint32_t RTC_TamperTrigger)
{
 8009fe0:	b480      	push	{r7}
 8009fe2:	b083      	sub	sp, #12
 8009fe4:	af00      	add	r7, sp, #0
 8009fe6:	6078      	str	r0, [r7, #4]
 8009fe8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_TAMPER(RTC_Tamper)); 
  assert_param(IS_RTC_TAMPER_TRIGGER(RTC_TamperTrigger));
 
  if (RTC_TamperTrigger == RTC_TamperTrigger_RisingEdge)
 8009fea:	683b      	ldr	r3, [r7, #0]
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d108      	bne.n	800a002 <RTC_TamperTriggerConfig+0x22>
  {  
    /* Configure the RTC_TAFCR register */
    RTC->TAFCR &= (uint32_t)((uint32_t)~(RTC_Tamper << 1));	
 8009ff0:	4b0a      	ldr	r3, [pc, #40]	; (800a01c <RTC_TamperTriggerConfig+0x3c>)
 8009ff2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	005b      	lsls	r3, r3, #1
 8009ff8:	43db      	mvns	r3, r3
 8009ffa:	4908      	ldr	r1, [pc, #32]	; (800a01c <RTC_TamperTriggerConfig+0x3c>)
 8009ffc:	4013      	ands	r3, r2
 8009ffe:	640b      	str	r3, [r1, #64]	; 0x40
  else
  { 
    /* Configure the RTC_TAFCR register */
    RTC->TAFCR |= (uint32_t)(RTC_Tamper << 1);  
  }  
}
 800a000:	e006      	b.n	800a010 <RTC_TamperTriggerConfig+0x30>
    RTC->TAFCR |= (uint32_t)(RTC_Tamper << 1);  
 800a002:	4b06      	ldr	r3, [pc, #24]	; (800a01c <RTC_TamperTriggerConfig+0x3c>)
 800a004:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	005b      	lsls	r3, r3, #1
 800a00a:	4904      	ldr	r1, [pc, #16]	; (800a01c <RTC_TamperTriggerConfig+0x3c>)
 800a00c:	4313      	orrs	r3, r2
 800a00e:	640b      	str	r3, [r1, #64]	; 0x40
}
 800a010:	bf00      	nop
 800a012:	370c      	adds	r7, #12
 800a014:	46bd      	mov	sp, r7
 800a016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a01a:	4770      	bx	lr
 800a01c:	40002800 	.word	0x40002800

0800a020 <RTC_TamperCmd>:
  * @param  NewState: new state of the tamper pin.
  *          This parameter can be: ENABLE or DISABLE.                   
  * @retval None
  */
void RTC_TamperCmd(uint32_t RTC_Tamper, FunctionalState NewState)
{
 800a020:	b480      	push	{r7}
 800a022:	b083      	sub	sp, #12
 800a024:	af00      	add	r7, sp, #0
 800a026:	6078      	str	r0, [r7, #4]
 800a028:	460b      	mov	r3, r1
 800a02a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RTC_TAMPER(RTC_Tamper));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800a02c:	78fb      	ldrb	r3, [r7, #3]
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d006      	beq.n	800a040 <RTC_TamperCmd+0x20>
  {
    /* Enable the selected Tamper pin */
    RTC->TAFCR |= (uint32_t)RTC_Tamper;
 800a032:	4b0a      	ldr	r3, [pc, #40]	; (800a05c <RTC_TamperCmd+0x3c>)
 800a034:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a036:	4909      	ldr	r1, [pc, #36]	; (800a05c <RTC_TamperCmd+0x3c>)
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	4313      	orrs	r3, r2
 800a03c:	640b      	str	r3, [r1, #64]	; 0x40
  else
  {
    /* Disable the selected Tamper pin */
    RTC->TAFCR &= (uint32_t)~RTC_Tamper;    
  }  
}
 800a03e:	e006      	b.n	800a04e <RTC_TamperCmd+0x2e>
    RTC->TAFCR &= (uint32_t)~RTC_Tamper;    
 800a040:	4b06      	ldr	r3, [pc, #24]	; (800a05c <RTC_TamperCmd+0x3c>)
 800a042:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	43db      	mvns	r3, r3
 800a048:	4904      	ldr	r1, [pc, #16]	; (800a05c <RTC_TamperCmd+0x3c>)
 800a04a:	4013      	ands	r3, r2
 800a04c:	640b      	str	r3, [r1, #64]	; 0x40
}
 800a04e:	bf00      	nop
 800a050:	370c      	adds	r7, #12
 800a052:	46bd      	mov	sp, r7
 800a054:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a058:	4770      	bx	lr
 800a05a:	bf00      	nop
 800a05c:	40002800 	.word	0x40002800

0800a060 <RTC_TamperFilterConfig>:
  *     @arg RTC_TamperFilter_8Sample: Tamper is activated after 8 consecutive 
  *                                    samples at the active level 
  * @retval None
  */
void RTC_TamperFilterConfig(uint32_t RTC_TamperFilter)
{
 800a060:	b480      	push	{r7}
 800a062:	b083      	sub	sp, #12
 800a064:	af00      	add	r7, sp, #0
 800a066:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_TAMPER_FILTER(RTC_TamperFilter));
   
  /* Clear TAMPFLT[1:0] bits in the RTC_TAFCR register */
  RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TAMPFLT);
 800a068:	4b08      	ldr	r3, [pc, #32]	; (800a08c <RTC_TamperFilterConfig+0x2c>)
 800a06a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a06c:	4a07      	ldr	r2, [pc, #28]	; (800a08c <RTC_TamperFilterConfig+0x2c>)
 800a06e:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 800a072:	6413      	str	r3, [r2, #64]	; 0x40

  /* Configure the RTC_TAFCR register */
  RTC->TAFCR |= (uint32_t)RTC_TamperFilter;
 800a074:	4b05      	ldr	r3, [pc, #20]	; (800a08c <RTC_TamperFilterConfig+0x2c>)
 800a076:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a078:	4904      	ldr	r1, [pc, #16]	; (800a08c <RTC_TamperFilterConfig+0x2c>)
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	4313      	orrs	r3, r2
 800a07e:	640b      	str	r3, [r1, #64]	; 0x40
}
 800a080:	bf00      	nop
 800a082:	370c      	adds	r7, #12
 800a084:	46bd      	mov	sp, r7
 800a086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a08a:	4770      	bx	lr
 800a08c:	40002800 	.word	0x40002800

0800a090 <RTC_TamperSamplingFreqConfig>:
  *     @arg RTC_TamperSamplingFreq_RTCCLK_Div256: Each of the tamper inputs are sampled
  *                                           with a frequency =  RTCCLK / 256  
  * @retval None
  */
void RTC_TamperSamplingFreqConfig(uint32_t RTC_TamperSamplingFreq)
{
 800a090:	b480      	push	{r7}
 800a092:	b083      	sub	sp, #12
 800a094:	af00      	add	r7, sp, #0
 800a096:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_TAMPER_SAMPLING_FREQ(RTC_TamperSamplingFreq));
 
  /* Clear TAMPFREQ[2:0] bits in the RTC_TAFCR register */
  RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TAMPFREQ);
 800a098:	4b08      	ldr	r3, [pc, #32]	; (800a0bc <RTC_TamperSamplingFreqConfig+0x2c>)
 800a09a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a09c:	4a07      	ldr	r2, [pc, #28]	; (800a0bc <RTC_TamperSamplingFreqConfig+0x2c>)
 800a09e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800a0a2:	6413      	str	r3, [r2, #64]	; 0x40

  /* Configure the RTC_TAFCR register */
  RTC->TAFCR |= (uint32_t)RTC_TamperSamplingFreq;
 800a0a4:	4b05      	ldr	r3, [pc, #20]	; (800a0bc <RTC_TamperSamplingFreqConfig+0x2c>)
 800a0a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a0a8:	4904      	ldr	r1, [pc, #16]	; (800a0bc <RTC_TamperSamplingFreqConfig+0x2c>)
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	4313      	orrs	r3, r2
 800a0ae:	640b      	str	r3, [r1, #64]	; 0x40
}
 800a0b0:	bf00      	nop
 800a0b2:	370c      	adds	r7, #12
 800a0b4:	46bd      	mov	sp, r7
 800a0b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ba:	4770      	bx	lr
 800a0bc:	40002800 	.word	0x40002800

0800a0c0 <RTC_TamperPinsPrechargeDuration>:
  *     @arg RTC_TamperPrechargeDuration_4RTCCLK: Tamper pins are precharged before sampling during 4 RTCCLK cycle    
  *     @arg RTC_TamperPrechargeDuration_8RTCCLK: Tamper pins are precharged before sampling during 8 RTCCLK cycle
  * @retval None
  */
void RTC_TamperPinsPrechargeDuration(uint32_t RTC_TamperPrechargeDuration)
{
 800a0c0:	b480      	push	{r7}
 800a0c2:	b083      	sub	sp, #12
 800a0c4:	af00      	add	r7, sp, #0
 800a0c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_TAMPER_PRECHARGE_DURATION(RTC_TamperPrechargeDuration));
   
  /* Clear TAMPPRCH[1:0] bits in the RTC_TAFCR register */
  RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TAMPPRCH);
 800a0c8:	4b08      	ldr	r3, [pc, #32]	; (800a0ec <RTC_TamperPinsPrechargeDuration+0x2c>)
 800a0ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0cc:	4a07      	ldr	r2, [pc, #28]	; (800a0ec <RTC_TamperPinsPrechargeDuration+0x2c>)
 800a0ce:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 800a0d2:	6413      	str	r3, [r2, #64]	; 0x40

  /* Configure the RTC_TAFCR register */
  RTC->TAFCR |= (uint32_t)RTC_TamperPrechargeDuration;
 800a0d4:	4b05      	ldr	r3, [pc, #20]	; (800a0ec <RTC_TamperPinsPrechargeDuration+0x2c>)
 800a0d6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a0d8:	4904      	ldr	r1, [pc, #16]	; (800a0ec <RTC_TamperPinsPrechargeDuration+0x2c>)
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	4313      	orrs	r3, r2
 800a0de:	640b      	str	r3, [r1, #64]	; 0x40
}
 800a0e0:	bf00      	nop
 800a0e2:	370c      	adds	r7, #12
 800a0e4:	46bd      	mov	sp, r7
 800a0e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ea:	4770      	bx	lr
 800a0ec:	40002800 	.word	0x40002800

0800a0f0 <RTC_TimeStampOnTamperDetectionCmd>:
  * @param  NewState: new state of the timestamp on tamper event.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RTC_TimeStampOnTamperDetectionCmd(FunctionalState NewState)
{
 800a0f0:	b480      	push	{r7}
 800a0f2:	b083      	sub	sp, #12
 800a0f4:	af00      	add	r7, sp, #0
 800a0f6:	4603      	mov	r3, r0
 800a0f8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
   
  if (NewState != DISABLE)
 800a0fa:	79fb      	ldrb	r3, [r7, #7]
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d006      	beq.n	800a10e <RTC_TimeStampOnTamperDetectionCmd+0x1e>
  {
    /* Save timestamp on tamper detection event */
    RTC->TAFCR |= (uint32_t)RTC_TAFCR_TAMPTS;
 800a100:	4b09      	ldr	r3, [pc, #36]	; (800a128 <RTC_TimeStampOnTamperDetectionCmd+0x38>)
 800a102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a104:	4a08      	ldr	r2, [pc, #32]	; (800a128 <RTC_TimeStampOnTamperDetectionCmd+0x38>)
 800a106:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a10a:	6413      	str	r3, [r2, #64]	; 0x40
  else
  {
    /* Tamper detection does not cause a timestamp to be saved */
    RTC->TAFCR &= (uint32_t)~RTC_TAFCR_TAMPTS;    
  }
}
 800a10c:	e005      	b.n	800a11a <RTC_TimeStampOnTamperDetectionCmd+0x2a>
    RTC->TAFCR &= (uint32_t)~RTC_TAFCR_TAMPTS;    
 800a10e:	4b06      	ldr	r3, [pc, #24]	; (800a128 <RTC_TimeStampOnTamperDetectionCmd+0x38>)
 800a110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a112:	4a05      	ldr	r2, [pc, #20]	; (800a128 <RTC_TimeStampOnTamperDetectionCmd+0x38>)
 800a114:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a118:	6413      	str	r3, [r2, #64]	; 0x40
}
 800a11a:	bf00      	nop
 800a11c:	370c      	adds	r7, #12
 800a11e:	46bd      	mov	sp, r7
 800a120:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a124:	4770      	bx	lr
 800a126:	bf00      	nop
 800a128:	40002800 	.word	0x40002800

0800a12c <RTC_TamperPullUpCmd>:
  * @param  NewState: new state of tamper pull up.
  *   This parameter can be: ENABLE or DISABLE.                   
  * @retval None
  */
void RTC_TamperPullUpCmd(FunctionalState NewState)
{
 800a12c:	b480      	push	{r7}
 800a12e:	b083      	sub	sp, #12
 800a130:	af00      	add	r7, sp, #0
 800a132:	4603      	mov	r3, r0
 800a134:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
 if (NewState != DISABLE)
 800a136:	79fb      	ldrb	r3, [r7, #7]
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d006      	beq.n	800a14a <RTC_TamperPullUpCmd+0x1e>
  {
    /* Enable precharge of the selected Tamper pin */
    RTC->TAFCR &= (uint32_t)~RTC_TAFCR_TAMPPUDIS; 
 800a13c:	4b09      	ldr	r3, [pc, #36]	; (800a164 <RTC_TamperPullUpCmd+0x38>)
 800a13e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a140:	4a08      	ldr	r2, [pc, #32]	; (800a164 <RTC_TamperPullUpCmd+0x38>)
 800a142:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a146:	6413      	str	r3, [r2, #64]	; 0x40
  else
  {
    /* Disable precharge of the selected Tamper pin */
    RTC->TAFCR |= (uint32_t)RTC_TAFCR_TAMPPUDIS;    
  } 
}
 800a148:	e005      	b.n	800a156 <RTC_TamperPullUpCmd+0x2a>
    RTC->TAFCR |= (uint32_t)RTC_TAFCR_TAMPPUDIS;    
 800a14a:	4b06      	ldr	r3, [pc, #24]	; (800a164 <RTC_TamperPullUpCmd+0x38>)
 800a14c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a14e:	4a05      	ldr	r2, [pc, #20]	; (800a164 <RTC_TamperPullUpCmd+0x38>)
 800a150:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a154:	6413      	str	r3, [r2, #64]	; 0x40
}
 800a156:	bf00      	nop
 800a158:	370c      	adds	r7, #12
 800a15a:	46bd      	mov	sp, r7
 800a15c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a160:	4770      	bx	lr
 800a162:	bf00      	nop
 800a164:	40002800 	.word	0x40002800

0800a168 <RTC_WriteBackupRegister>:
  *                          specify the register.
  * @param  Data: Data to be written in the specified RTC Backup data register.                     
  * @retval None
  */
void RTC_WriteBackupRegister(uint32_t RTC_BKP_DR, uint32_t Data)
{
 800a168:	b480      	push	{r7}
 800a16a:	b085      	sub	sp, #20
 800a16c:	af00      	add	r7, sp, #0
 800a16e:	6078      	str	r0, [r7, #4]
 800a170:	6039      	str	r1, [r7, #0]
  __IO uint32_t tmp = 0;
 800a172:	2300      	movs	r3, #0
 800a174:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RTC_BKP(RTC_BKP_DR));

  tmp = RTC_BASE + 0x50;
 800a176:	4b08      	ldr	r3, [pc, #32]	; (800a198 <RTC_WriteBackupRegister+0x30>)
 800a178:	60fb      	str	r3, [r7, #12]
  tmp += (RTC_BKP_DR * 4);
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	009a      	lsls	r2, r3, #2
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	4413      	add	r3, r2
 800a182:	60fb      	str	r3, [r7, #12]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	461a      	mov	r2, r3
 800a188:	683b      	ldr	r3, [r7, #0]
 800a18a:	6013      	str	r3, [r2, #0]
}
 800a18c:	bf00      	nop
 800a18e:	3714      	adds	r7, #20
 800a190:	46bd      	mov	sp, r7
 800a192:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a196:	4770      	bx	lr
 800a198:	40002850 	.word	0x40002850

0800a19c <RTC_ReadBackupRegister>:
  *          This parameter can be: RTC_BKP_DRx where x can be from 0 to 19 to 
  *                          specify the register.                   
  * @retval None
  */
uint32_t RTC_ReadBackupRegister(uint32_t RTC_BKP_DR)
{
 800a19c:	b480      	push	{r7}
 800a19e:	b085      	sub	sp, #20
 800a1a0:	af00      	add	r7, sp, #0
 800a1a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmp = 0;
 800a1a4:	2300      	movs	r3, #0
 800a1a6:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RTC_BKP(RTC_BKP_DR));

  tmp = RTC_BASE + 0x50;
 800a1a8:	4b07      	ldr	r3, [pc, #28]	; (800a1c8 <RTC_ReadBackupRegister+0x2c>)
 800a1aa:	60fb      	str	r3, [r7, #12]
  tmp += (RTC_BKP_DR * 4);
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	009a      	lsls	r2, r3, #2
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	4413      	add	r3, r2
 800a1b4:	60fb      	str	r3, [r7, #12]
  
  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	681b      	ldr	r3, [r3, #0]
}
 800a1ba:	4618      	mov	r0, r3
 800a1bc:	3714      	adds	r7, #20
 800a1be:	46bd      	mov	sp, r7
 800a1c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1c4:	4770      	bx	lr
 800a1c6:	bf00      	nop
 800a1c8:	40002850 	.word	0x40002850

0800a1cc <RTC_TamperPinSelection>:
  *            @arg RTC_TamperPin_PC13: PC13 is selected as RTC Tamper Pin.
  *            @arg RTC_TamperPin_PI8: PI8 is selected as RTC Tamper Pin.    
  * @retval None
  */
void RTC_TamperPinSelection(uint32_t RTC_TamperPin)
{
 800a1cc:	b480      	push	{r7}
 800a1ce:	b083      	sub	sp, #12
 800a1d0:	af00      	add	r7, sp, #0
 800a1d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_TAMPER_PIN(RTC_TamperPin));
  
  RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TAMPINSEL);
 800a1d4:	4b08      	ldr	r3, [pc, #32]	; (800a1f8 <RTC_TamperPinSelection+0x2c>)
 800a1d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1d8:	4a07      	ldr	r2, [pc, #28]	; (800a1f8 <RTC_TamperPinSelection+0x2c>)
 800a1da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a1de:	6413      	str	r3, [r2, #64]	; 0x40
  RTC->TAFCR |= (uint32_t)(RTC_TamperPin);  
 800a1e0:	4b05      	ldr	r3, [pc, #20]	; (800a1f8 <RTC_TamperPinSelection+0x2c>)
 800a1e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a1e4:	4904      	ldr	r1, [pc, #16]	; (800a1f8 <RTC_TamperPinSelection+0x2c>)
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	4313      	orrs	r3, r2
 800a1ea:	640b      	str	r3, [r1, #64]	; 0x40
}
 800a1ec:	bf00      	nop
 800a1ee:	370c      	adds	r7, #12
 800a1f0:	46bd      	mov	sp, r7
 800a1f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1f6:	4770      	bx	lr
 800a1f8:	40002800 	.word	0x40002800

0800a1fc <RTC_TimeStampPinSelection>:
  *            @arg RTC_TimeStampPin_PC13: PC13 is selected as RTC TimeStamp Pin.
  *            @arg RTC_TimeStampPin_PI8: PI8 is selected as RTC TimeStamp Pin.    
  * @retval None
  */
void RTC_TimeStampPinSelection(uint32_t RTC_TimeStampPin)
{
 800a1fc:	b480      	push	{r7}
 800a1fe:	b083      	sub	sp, #12
 800a200:	af00      	add	r7, sp, #0
 800a202:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));
  
  RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TSINSEL);
 800a204:	4b08      	ldr	r3, [pc, #32]	; (800a228 <RTC_TimeStampPinSelection+0x2c>)
 800a206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a208:	4a07      	ldr	r2, [pc, #28]	; (800a228 <RTC_TimeStampPinSelection+0x2c>)
 800a20a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800a20e:	6413      	str	r3, [r2, #64]	; 0x40
  RTC->TAFCR |= (uint32_t)(RTC_TimeStampPin);  
 800a210:	4b05      	ldr	r3, [pc, #20]	; (800a228 <RTC_TimeStampPinSelection+0x2c>)
 800a212:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a214:	4904      	ldr	r1, [pc, #16]	; (800a228 <RTC_TimeStampPinSelection+0x2c>)
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	4313      	orrs	r3, r2
 800a21a:	640b      	str	r3, [r1, #64]	; 0x40
}
 800a21c:	bf00      	nop
 800a21e:	370c      	adds	r7, #12
 800a220:	46bd      	mov	sp, r7
 800a222:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a226:	4770      	bx	lr
 800a228:	40002800 	.word	0x40002800

0800a22c <RTC_OutputTypeConfig>:
  *            @arg RTC_OutputType_PushPull:  RTC Output (PC13) is configured in 
  *                                    Push Pull mode.    
  * @retval None
  */
void RTC_OutputTypeConfig(uint32_t RTC_OutputType)
{
 800a22c:	b480      	push	{r7}
 800a22e:	b083      	sub	sp, #12
 800a230:	af00      	add	r7, sp, #0
 800a232:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_OUTPUT_TYPE(RTC_OutputType));
  
  RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_ALARMOUTTYPE);
 800a234:	4b08      	ldr	r3, [pc, #32]	; (800a258 <RTC_OutputTypeConfig+0x2c>)
 800a236:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a238:	4a07      	ldr	r2, [pc, #28]	; (800a258 <RTC_OutputTypeConfig+0x2c>)
 800a23a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a23e:	6413      	str	r3, [r2, #64]	; 0x40
  RTC->TAFCR |= (uint32_t)(RTC_OutputType);  
 800a240:	4b05      	ldr	r3, [pc, #20]	; (800a258 <RTC_OutputTypeConfig+0x2c>)
 800a242:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a244:	4904      	ldr	r1, [pc, #16]	; (800a258 <RTC_OutputTypeConfig+0x2c>)
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	4313      	orrs	r3, r2
 800a24a:	640b      	str	r3, [r1, #64]	; 0x40
}
 800a24c:	bf00      	nop
 800a24e:	370c      	adds	r7, #12
 800a250:	46bd      	mov	sp, r7
 800a252:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a256:	4770      	bx	lr
 800a258:	40002800 	.word	0x40002800

0800a25c <RTC_SynchroShiftConfig>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC Shift registers are configured
  *          - ERROR: RTC Shift registers are not configured
*/
ErrorStatus RTC_SynchroShiftConfig(uint32_t RTC_ShiftAdd1S, uint32_t RTC_ShiftSubFS)
{
 800a25c:	b580      	push	{r7, lr}
 800a25e:	b084      	sub	sp, #16
 800a260:	af00      	add	r7, sp, #0
 800a262:	6078      	str	r0, [r7, #4]
 800a264:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800a266:	2300      	movs	r3, #0
 800a268:	73fb      	strb	r3, [r7, #15]
  uint32_t shpfcount = 0;
 800a26a:	2300      	movs	r3, #0
 800a26c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_RTC_SHIFT_ADD1S(RTC_ShiftAdd1S));
  assert_param(IS_RTC_SHIFT_SUBFS(RTC_ShiftSubFS));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 800a26e:	4b21      	ldr	r3, [pc, #132]	; (800a2f4 <RTC_SynchroShiftConfig+0x98>)
 800a270:	22ca      	movs	r2, #202	; 0xca
 800a272:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 800a274:	4b1f      	ldr	r3, [pc, #124]	; (800a2f4 <RTC_SynchroShiftConfig+0x98>)
 800a276:	2253      	movs	r2, #83	; 0x53
 800a278:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* Check if a Shift is pending*/
  if ((RTC->ISR & RTC_ISR_SHPF) != RESET)
 800a27a:	4b1e      	ldr	r3, [pc, #120]	; (800a2f4 <RTC_SynchroShiftConfig+0x98>)
 800a27c:	68db      	ldr	r3, [r3, #12]
 800a27e:	f003 0308 	and.w	r3, r3, #8
 800a282:	2b00      	cmp	r3, #0
 800a284:	d00d      	beq.n	800a2a2 <RTC_SynchroShiftConfig+0x46>
  {
    /* Wait until the shift is completed*/
    while (((RTC->ISR & RTC_ISR_SHPF) != RESET) && (shpfcount != SHPF_TIMEOUT))
 800a286:	e002      	b.n	800a28e <RTC_SynchroShiftConfig+0x32>
    {
      shpfcount++;
 800a288:	68bb      	ldr	r3, [r7, #8]
 800a28a:	3301      	adds	r3, #1
 800a28c:	60bb      	str	r3, [r7, #8]
    while (((RTC->ISR & RTC_ISR_SHPF) != RESET) && (shpfcount != SHPF_TIMEOUT))
 800a28e:	4b19      	ldr	r3, [pc, #100]	; (800a2f4 <RTC_SynchroShiftConfig+0x98>)
 800a290:	68db      	ldr	r3, [r3, #12]
 800a292:	f003 0308 	and.w	r3, r3, #8
 800a296:	2b00      	cmp	r3, #0
 800a298:	d003      	beq.n	800a2a2 <RTC_SynchroShiftConfig+0x46>
 800a29a:	68bb      	ldr	r3, [r7, #8]
 800a29c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a2a0:	d1f2      	bne.n	800a288 <RTC_SynchroShiftConfig+0x2c>
    }
  }

  /* Check if the Shift pending is completed or if there is no Shift operation at all*/
  if ((RTC->ISR & RTC_ISR_SHPF) == RESET)
 800a2a2:	4b14      	ldr	r3, [pc, #80]	; (800a2f4 <RTC_SynchroShiftConfig+0x98>)
 800a2a4:	68db      	ldr	r3, [r3, #12]
 800a2a6:	f003 0308 	and.w	r3, r3, #8
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d118      	bne.n	800a2e0 <RTC_SynchroShiftConfig+0x84>
  {
    /* check if the reference clock detection is disabled */
    if((RTC->CR & RTC_CR_REFCKON) == RESET)
 800a2ae:	4b11      	ldr	r3, [pc, #68]	; (800a2f4 <RTC_SynchroShiftConfig+0x98>)
 800a2b0:	689b      	ldr	r3, [r3, #8]
 800a2b2:	f003 0310 	and.w	r3, r3, #16
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d10f      	bne.n	800a2da <RTC_SynchroShiftConfig+0x7e>
    {
      /* Configure the Shift settings */
      RTC->SHIFTR = (uint32_t)(uint32_t)(RTC_ShiftSubFS) | (uint32_t)(RTC_ShiftAdd1S);
 800a2ba:	490e      	ldr	r1, [pc, #56]	; (800a2f4 <RTC_SynchroShiftConfig+0x98>)
 800a2bc:	683a      	ldr	r2, [r7, #0]
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	4313      	orrs	r3, r2
 800a2c2:	62cb      	str	r3, [r1, #44]	; 0x2c
    
      if(RTC_WaitForSynchro() == ERROR)
 800a2c4:	f7fe ffa2 	bl	800920c <RTC_WaitForSynchro>
 800a2c8:	4603      	mov	r3, r0
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d102      	bne.n	800a2d4 <RTC_SynchroShiftConfig+0x78>
      {
        status = ERROR;
 800a2ce:	2300      	movs	r3, #0
 800a2d0:	73fb      	strb	r3, [r7, #15]
 800a2d2:	e007      	b.n	800a2e4 <RTC_SynchroShiftConfig+0x88>
      }
      else
      {
        status = SUCCESS;
 800a2d4:	2301      	movs	r3, #1
 800a2d6:	73fb      	strb	r3, [r7, #15]
 800a2d8:	e004      	b.n	800a2e4 <RTC_SynchroShiftConfig+0x88>
      }
    }
    else
    {
      status = ERROR;
 800a2da:	2300      	movs	r3, #0
 800a2dc:	73fb      	strb	r3, [r7, #15]
 800a2de:	e001      	b.n	800a2e4 <RTC_SynchroShiftConfig+0x88>
    }
  }
  else
  {
    status = ERROR;
 800a2e0:	2300      	movs	r3, #0
 800a2e2:	73fb      	strb	r3, [r7, #15]
  }

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF;
 800a2e4:	4b03      	ldr	r3, [pc, #12]	; (800a2f4 <RTC_SynchroShiftConfig+0x98>)
 800a2e6:	22ff      	movs	r2, #255	; 0xff
 800a2e8:	625a      	str	r2, [r3, #36]	; 0x24
  
  return (ErrorStatus)(status);
 800a2ea:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2ec:	4618      	mov	r0, r3
 800a2ee:	3710      	adds	r7, #16
 800a2f0:	46bd      	mov	sp, r7
 800a2f2:	bd80      	pop	{r7, pc}
 800a2f4:	40002800 	.word	0x40002800

0800a2f8 <RTC_ITConfig>:
  * @param  NewState: new state of the specified RTC interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RTC_ITConfig(uint32_t RTC_IT, FunctionalState NewState)
{
 800a2f8:	b480      	push	{r7}
 800a2fa:	b083      	sub	sp, #12
 800a2fc:	af00      	add	r7, sp, #0
 800a2fe:	6078      	str	r0, [r7, #4]
 800a300:	460b      	mov	r3, r1
 800a302:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RTC_CONFIG_IT(RTC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 800a304:	4b1a      	ldr	r3, [pc, #104]	; (800a370 <RTC_ITConfig+0x78>)
 800a306:	22ca      	movs	r2, #202	; 0xca
 800a308:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 800a30a:	4b19      	ldr	r3, [pc, #100]	; (800a370 <RTC_ITConfig+0x78>)
 800a30c:	2253      	movs	r2, #83	; 0x53
 800a30e:	625a      	str	r2, [r3, #36]	; 0x24

  if (NewState != DISABLE)
 800a310:	78fb      	ldrb	r3, [r7, #3]
 800a312:	2b00      	cmp	r3, #0
 800a314:	d010      	beq.n	800a338 <RTC_ITConfig+0x40>
  {
    /* Configure the Interrupts in the RTC_CR register */
    RTC->CR |= (uint32_t)(RTC_IT & ~RTC_TAFCR_TAMPIE);
 800a316:	4b16      	ldr	r3, [pc, #88]	; (800a370 <RTC_ITConfig+0x78>)
 800a318:	689a      	ldr	r2, [r3, #8]
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	f023 0304 	bic.w	r3, r3, #4
 800a320:	4913      	ldr	r1, [pc, #76]	; (800a370 <RTC_ITConfig+0x78>)
 800a322:	4313      	orrs	r3, r2
 800a324:	608b      	str	r3, [r1, #8]
    /* Configure the Tamper Interrupt in the RTC_TAFCR */
    RTC->TAFCR |= (uint32_t)(RTC_IT & RTC_TAFCR_TAMPIE);
 800a326:	4b12      	ldr	r3, [pc, #72]	; (800a370 <RTC_ITConfig+0x78>)
 800a328:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	f003 0304 	and.w	r3, r3, #4
 800a330:	490f      	ldr	r1, [pc, #60]	; (800a370 <RTC_ITConfig+0x78>)
 800a332:	4313      	orrs	r3, r2
 800a334:	640b      	str	r3, [r1, #64]	; 0x40
 800a336:	e011      	b.n	800a35c <RTC_ITConfig+0x64>
  }
  else
  {
    /* Configure the Interrupts in the RTC_CR register */
    RTC->CR &= (uint32_t)~(RTC_IT & (uint32_t)~RTC_TAFCR_TAMPIE);
 800a338:	4b0d      	ldr	r3, [pc, #52]	; (800a370 <RTC_ITConfig+0x78>)
 800a33a:	689a      	ldr	r2, [r3, #8]
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	f023 0304 	bic.w	r3, r3, #4
 800a342:	43db      	mvns	r3, r3
 800a344:	490a      	ldr	r1, [pc, #40]	; (800a370 <RTC_ITConfig+0x78>)
 800a346:	4013      	ands	r3, r2
 800a348:	608b      	str	r3, [r1, #8]
    /* Configure the Tamper Interrupt in the RTC_TAFCR */
    RTC->TAFCR &= (uint32_t)~(RTC_IT & RTC_TAFCR_TAMPIE);
 800a34a:	4b09      	ldr	r3, [pc, #36]	; (800a370 <RTC_ITConfig+0x78>)
 800a34c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	f003 0304 	and.w	r3, r3, #4
 800a354:	43db      	mvns	r3, r3
 800a356:	4906      	ldr	r1, [pc, #24]	; (800a370 <RTC_ITConfig+0x78>)
 800a358:	4013      	ands	r3, r2
 800a35a:	640b      	str	r3, [r1, #64]	; 0x40
  }
  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 800a35c:	4b04      	ldr	r3, [pc, #16]	; (800a370 <RTC_ITConfig+0x78>)
 800a35e:	22ff      	movs	r2, #255	; 0xff
 800a360:	625a      	str	r2, [r3, #36]	; 0x24
}
 800a362:	bf00      	nop
 800a364:	370c      	adds	r7, #12
 800a366:	46bd      	mov	sp, r7
 800a368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a36c:	4770      	bx	lr
 800a36e:	bf00      	nop
 800a370:	40002800 	.word	0x40002800

0800a374 <RTC_GetFlagStatus>:
  *            @arg RTC_FLAG_ALRBWF: Alarm B Write flag
  *            @arg RTC_FLAG_ALRAWF: Alarm A write flag
  * @retval The new state of RTC_FLAG (SET or RESET).
  */
FlagStatus RTC_GetFlagStatus(uint32_t RTC_FLAG)
{
 800a374:	b480      	push	{r7}
 800a376:	b085      	sub	sp, #20
 800a378:	af00      	add	r7, sp, #0
 800a37a:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 800a37c:	2300      	movs	r3, #0
 800a37e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpreg = 0;
 800a380:	2300      	movs	r3, #0
 800a382:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_RTC_GET_FLAG(RTC_FLAG));
  
  /* Get all the flags */
  tmpreg = (uint32_t)(RTC->ISR & RTC_FLAGS_MASK);
 800a384:	4b0a      	ldr	r3, [pc, #40]	; (800a3b0 <RTC_GetFlagStatus+0x3c>)
 800a386:	68da      	ldr	r2, [r3, #12]
 800a388:	4b0a      	ldr	r3, [pc, #40]	; (800a3b4 <RTC_GetFlagStatus+0x40>)
 800a38a:	4013      	ands	r3, r2
 800a38c:	60bb      	str	r3, [r7, #8]
  
  /* Return the status of the flag */
  if ((tmpreg & RTC_FLAG) != (uint32_t)RESET)
 800a38e:	68ba      	ldr	r2, [r7, #8]
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	4013      	ands	r3, r2
 800a394:	2b00      	cmp	r3, #0
 800a396:	d002      	beq.n	800a39e <RTC_GetFlagStatus+0x2a>
  {
    bitstatus = SET;
 800a398:	2301      	movs	r3, #1
 800a39a:	73fb      	strb	r3, [r7, #15]
 800a39c:	e001      	b.n	800a3a2 <RTC_GetFlagStatus+0x2e>
  }
  else
  {
    bitstatus = RESET;
 800a39e:	2300      	movs	r3, #0
 800a3a0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800a3a2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3a4:	4618      	mov	r0, r3
 800a3a6:	3714      	adds	r7, #20
 800a3a8:	46bd      	mov	sp, r7
 800a3aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ae:	4770      	bx	lr
 800a3b0:	40002800 	.word	0x40002800
 800a3b4:	00013f7f 	.word	0x00013f7f

0800a3b8 <RTC_ClearFlag>:
  *            @arg RTC_FLAG_ALRAF: Alarm A flag
  *            @arg RTC_FLAG_RSF: Registers Synchronized flag
  * @retval None
  */
void RTC_ClearFlag(uint32_t RTC_FLAG)
{
 800a3b8:	b480      	push	{r7}
 800a3ba:	b083      	sub	sp, #12
 800a3bc:	af00      	add	r7, sp, #0
 800a3be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_CLEAR_FLAG(RTC_FLAG));

  /* Clear the Flags in the RTC_ISR register */
  RTC->ISR = (uint32_t)((uint32_t)(~((RTC_FLAG | RTC_ISR_INIT)& 0x0000FFFF) | (uint32_t)(RTC->ISR & RTC_ISR_INIT)));  
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	b29b      	uxth	r3, r3
 800a3c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a3c8:	43da      	mvns	r2, r3
 800a3ca:	4b06      	ldr	r3, [pc, #24]	; (800a3e4 <RTC_ClearFlag+0x2c>)
 800a3cc:	68db      	ldr	r3, [r3, #12]
 800a3ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a3d2:	4904      	ldr	r1, [pc, #16]	; (800a3e4 <RTC_ClearFlag+0x2c>)
 800a3d4:	4313      	orrs	r3, r2
 800a3d6:	60cb      	str	r3, [r1, #12]
}
 800a3d8:	bf00      	nop
 800a3da:	370c      	adds	r7, #12
 800a3dc:	46bd      	mov	sp, r7
 800a3de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3e2:	4770      	bx	lr
 800a3e4:	40002800 	.word	0x40002800

0800a3e8 <RTC_GetITStatus>:
  *            @arg RTC_IT_ALRA: Alarm A interrupt 
  *            @arg RTC_IT_TAMP1: Tamper 1 event interrupt 
  * @retval The new state of RTC_IT (SET or RESET).
  */
ITStatus RTC_GetITStatus(uint32_t RTC_IT)
{
 800a3e8:	b480      	push	{r7}
 800a3ea:	b087      	sub	sp, #28
 800a3ec:	af00      	add	r7, sp, #0
 800a3ee:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
 800a3f0:	2300      	movs	r3, #0
 800a3f2:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpreg = 0, enablestatus = 0;
 800a3f4:	2300      	movs	r3, #0
 800a3f6:	613b      	str	r3, [r7, #16]
 800a3f8:	2300      	movs	r3, #0
 800a3fa:	60fb      	str	r3, [r7, #12]
 
  /* Check the parameters */
  assert_param(IS_RTC_GET_IT(RTC_IT));
  
  /* Get the TAMPER Interrupt enable bit and pending bit */
  tmpreg = (uint32_t)(RTC->TAFCR & (RTC_TAFCR_TAMPIE));
 800a3fc:	4b13      	ldr	r3, [pc, #76]	; (800a44c <RTC_GetITStatus+0x64>)
 800a3fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a400:	f003 0304 	and.w	r3, r3, #4
 800a404:	613b      	str	r3, [r7, #16]
 
  /* Get the Interrupt enable Status */
  enablestatus = (uint32_t)((RTC->CR & RTC_IT) | (tmpreg & (RTC_IT >> 15)));
 800a406:	4b11      	ldr	r3, [pc, #68]	; (800a44c <RTC_GetITStatus+0x64>)
 800a408:	689a      	ldr	r2, [r3, #8]
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	401a      	ands	r2, r3
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	0bd9      	lsrs	r1, r3, #15
 800a412:	693b      	ldr	r3, [r7, #16]
 800a414:	400b      	ands	r3, r1
 800a416:	4313      	orrs	r3, r2
 800a418:	60fb      	str	r3, [r7, #12]
  
  /* Get the Interrupt pending bit */
  tmpreg = (uint32_t)((RTC->ISR & (uint32_t)(RTC_IT >> 4)));
 800a41a:	4b0c      	ldr	r3, [pc, #48]	; (800a44c <RTC_GetITStatus+0x64>)
 800a41c:	68da      	ldr	r2, [r3, #12]
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	091b      	lsrs	r3, r3, #4
 800a422:	4013      	ands	r3, r2
 800a424:	613b      	str	r3, [r7, #16]
  
  /* Get the status of the Interrupt */
  if ((enablestatus != (uint32_t)RESET) && ((tmpreg & 0x0000FFFF) != (uint32_t)RESET))
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d006      	beq.n	800a43a <RTC_GetITStatus+0x52>
 800a42c:	693b      	ldr	r3, [r7, #16]
 800a42e:	b29b      	uxth	r3, r3
 800a430:	2b00      	cmp	r3, #0
 800a432:	d002      	beq.n	800a43a <RTC_GetITStatus+0x52>
  {
    bitstatus = SET;
 800a434:	2301      	movs	r3, #1
 800a436:	75fb      	strb	r3, [r7, #23]
 800a438:	e001      	b.n	800a43e <RTC_GetITStatus+0x56>
  }
  else
  {
    bitstatus = RESET;
 800a43a:	2300      	movs	r3, #0
 800a43c:	75fb      	strb	r3, [r7, #23]
  }
  return bitstatus;
 800a43e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a440:	4618      	mov	r0, r3
 800a442:	371c      	adds	r7, #28
 800a444:	46bd      	mov	sp, r7
 800a446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a44a:	4770      	bx	lr
 800a44c:	40002800 	.word	0x40002800

0800a450 <RTC_ClearITPendingBit>:
  *            @arg RTC_IT_ALRA: Alarm A interrupt 
  *            @arg RTC_IT_TAMP1: Tamper 1 event interrupt 
  * @retval None
  */
void RTC_ClearITPendingBit(uint32_t RTC_IT)
{
 800a450:	b480      	push	{r7}
 800a452:	b085      	sub	sp, #20
 800a454:	af00      	add	r7, sp, #0
 800a456:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800a458:	2300      	movs	r3, #0
 800a45a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_CLEAR_IT(RTC_IT));

  /* Get the RTC_ISR Interrupt pending bits mask */
  tmpreg = (uint32_t)(RTC_IT >> 4);
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	091b      	lsrs	r3, r3, #4
 800a460:	60fb      	str	r3, [r7, #12]

  /* Clear the interrupt pending bits in the RTC_ISR register */
  RTC->ISR = (uint32_t)((uint32_t)(~((tmpreg | RTC_ISR_INIT)& 0x0000FFFF) | (uint32_t)(RTC->ISR & RTC_ISR_INIT))); 
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	b29b      	uxth	r3, r3
 800a466:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a46a:	43da      	mvns	r2, r3
 800a46c:	4b06      	ldr	r3, [pc, #24]	; (800a488 <RTC_ClearITPendingBit+0x38>)
 800a46e:	68db      	ldr	r3, [r3, #12]
 800a470:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a474:	4904      	ldr	r1, [pc, #16]	; (800a488 <RTC_ClearITPendingBit+0x38>)
 800a476:	4313      	orrs	r3, r2
 800a478:	60cb      	str	r3, [r1, #12]
}
 800a47a:	bf00      	nop
 800a47c:	3714      	adds	r7, #20
 800a47e:	46bd      	mov	sp, r7
 800a480:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a484:	4770      	bx	lr
 800a486:	bf00      	nop
 800a488:	40002800 	.word	0x40002800

0800a48c <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted.
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800a48c:	b480      	push	{r7}
 800a48e:	b085      	sub	sp, #20
 800a490:	af00      	add	r7, sp, #0
 800a492:	4603      	mov	r3, r0
 800a494:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0;
 800a496:	2300      	movs	r3, #0
 800a498:	73fb      	strb	r3, [r7, #15]
  
  while (Value >= 10)
 800a49a:	e005      	b.n	800a4a8 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800a49c:	7bfb      	ldrb	r3, [r7, #15]
 800a49e:	3301      	adds	r3, #1
 800a4a0:	73fb      	strb	r3, [r7, #15]
    Value -= 10;
 800a4a2:	79fb      	ldrb	r3, [r7, #7]
 800a4a4:	3b0a      	subs	r3, #10
 800a4a6:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10)
 800a4a8:	79fb      	ldrb	r3, [r7, #7]
 800a4aa:	2b09      	cmp	r3, #9
 800a4ac:	d8f6      	bhi.n	800a49c <RTC_ByteToBcd2+0x10>
  }
  
  return  ((uint8_t)(bcdhigh << 4) | Value);
 800a4ae:	7bfb      	ldrb	r3, [r7, #15]
 800a4b0:	011b      	lsls	r3, r3, #4
 800a4b2:	b2da      	uxtb	r2, r3
 800a4b4:	79fb      	ldrb	r3, [r7, #7]
 800a4b6:	4313      	orrs	r3, r2
 800a4b8:	b2db      	uxtb	r3, r3
}
 800a4ba:	4618      	mov	r0, r3
 800a4bc:	3714      	adds	r7, #20
 800a4be:	46bd      	mov	sp, r7
 800a4c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4c4:	4770      	bx	lr

0800a4c6 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted.
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800a4c6:	b480      	push	{r7}
 800a4c8:	b085      	sub	sp, #20
 800a4ca:	af00      	add	r7, sp, #0
 800a4cc:	4603      	mov	r3, r0
 800a4ce:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0;
 800a4d0:	2300      	movs	r3, #0
 800a4d2:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 800a4d4:	79fb      	ldrb	r3, [r7, #7]
 800a4d6:	091b      	lsrs	r3, r3, #4
 800a4d8:	b2db      	uxtb	r3, r3
 800a4da:	461a      	mov	r2, r3
 800a4dc:	0092      	lsls	r2, r2, #2
 800a4de:	4413      	add	r3, r2
 800a4e0:	005b      	lsls	r3, r3, #1
 800a4e2:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & (uint8_t)0x0F));
 800a4e4:	79fb      	ldrb	r3, [r7, #7]
 800a4e6:	f003 030f 	and.w	r3, r3, #15
 800a4ea:	b2da      	uxtb	r2, r3
 800a4ec:	7bfb      	ldrb	r3, [r7, #15]
 800a4ee:	4413      	add	r3, r2
 800a4f0:	b2db      	uxtb	r3, r3
}
 800a4f2:	4618      	mov	r0, r3
 800a4f4:	3714      	adds	r7, #20
 800a4f6:	46bd      	mov	sp, r7
 800a4f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4fc:	4770      	bx	lr
 800a4fe:	bf00      	nop

0800a500 <SAI_DeInit>:
  * @param  SAIx: To select the SAIx peripheral, where x can be the different instances 
  *                     
  * @retval None
  */
void SAI_DeInit(SAI_TypeDef* SAIx)
{
 800a500:	b580      	push	{r7, lr}
 800a502:	b082      	sub	sp, #8
 800a504:	af00      	add	r7, sp, #0
 800a506:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SAI_PERIPH(SAIx));

  /* Enable SAI1 reset state */
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_SAI1, ENABLE);
 800a508:	2101      	movs	r1, #1
 800a50a:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 800a50e:	f7fe fb43 	bl	8008b98 <RCC_APB2PeriphResetCmd>
  /* Release SAI1 from reset state */
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_SAI1, DISABLE);  
 800a512:	2100      	movs	r1, #0
 800a514:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 800a518:	f7fe fb3e 	bl	8008b98 <RCC_APB2PeriphResetCmd>
}
 800a51c:	bf00      	nop
 800a51e:	3708      	adds	r7, #8
 800a520:	46bd      	mov	sp, r7
 800a522:	bd80      	pop	{r7, pc}

0800a524 <SAI_Init>:
  * @param  SAI_InitStruct: pointer to a SAI_InitTypeDef structure that
  *         contains the configuration information for the specified SAI Block peripheral.             
  * @retval None
  */
void SAI_Init(SAI_Block_TypeDef* SAI_Block_x, SAI_InitTypeDef* SAI_InitStruct)
{
 800a524:	b480      	push	{r7}
 800a526:	b085      	sub	sp, #20
 800a528:	af00      	add	r7, sp, #0
 800a52a:	6078      	str	r0, [r7, #4]
 800a52c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800a52e:	2300      	movs	r3, #0
 800a530:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(SAI_InitStruct->SAI_MasterDivider));
  assert_param(IS_SAI_BLOCK_FIFO_THRESHOLD(SAI_InitStruct->SAI_FIFOThreshold));

  /* SAI Block_x CR1 Configuration */
  /* Get the SAI Block_x CR1 value */
  tmpreg = SAI_Block_x->CR1;
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	60fb      	str	r3, [r7, #12]
  /* Clear MODE, PRTCFG, DS, LSBFIRST, CKSTR, SYNCEN, OUTDRIV, NODIV, and MCKDIV bits */
  tmpreg &= CR1_CLEAR_MASK;
 800a538:	68fa      	ldr	r2, [r7, #12]
 800a53a:	4b1c      	ldr	r3, [pc, #112]	; (800a5ac <SAI_Init+0x88>)
 800a53c:	4013      	ands	r3, r2
 800a53e:	60fb      	str	r3, [r7, #12]
  /* Set CKSTR bit according to SAI_ClockStrobing value   */
  /* Set SYNCEN bit according to SAI_Synchro value        */
  /* Set OUTDRIV bit according to SAI_OUTDRIV value       */
  /* Set NODIV bit according to SAI_NoDivider value       */
  /* Set MCKDIV bits according to SAI_MasterDivider value */
  tmpreg |= (uint32_t)(SAI_InitStruct->SAI_AudioMode     | SAI_InitStruct->SAI_Protocol  |
 800a540:	683b      	ldr	r3, [r7, #0]
 800a542:	681a      	ldr	r2, [r3, #0]
 800a544:	683b      	ldr	r3, [r7, #0]
 800a546:	685b      	ldr	r3, [r3, #4]
 800a548:	431a      	orrs	r2, r3
                       SAI_InitStruct->SAI_DataSize      | SAI_InitStruct->SAI_FirstBit  |  
 800a54a:	683b      	ldr	r3, [r7, #0]
 800a54c:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(SAI_InitStruct->SAI_AudioMode     | SAI_InitStruct->SAI_Protocol  |
 800a54e:	431a      	orrs	r2, r3
                       SAI_InitStruct->SAI_DataSize      | SAI_InitStruct->SAI_FirstBit  |  
 800a550:	683b      	ldr	r3, [r7, #0]
 800a552:	68db      	ldr	r3, [r3, #12]
 800a554:	431a      	orrs	r2, r3
                       SAI_InitStruct->SAI_ClockStrobing | SAI_InitStruct->SAI_Synchro   |  
 800a556:	683b      	ldr	r3, [r7, #0]
 800a558:	691b      	ldr	r3, [r3, #16]
                       SAI_InitStruct->SAI_DataSize      | SAI_InitStruct->SAI_FirstBit  |  
 800a55a:	431a      	orrs	r2, r3
                       SAI_InitStruct->SAI_ClockStrobing | SAI_InitStruct->SAI_Synchro   |  
 800a55c:	683b      	ldr	r3, [r7, #0]
 800a55e:	695b      	ldr	r3, [r3, #20]
 800a560:	431a      	orrs	r2, r3
                       SAI_InitStruct->SAI_OUTDRIV       | SAI_InitStruct->SAI_NoDivider | 
 800a562:	683b      	ldr	r3, [r7, #0]
 800a564:	699b      	ldr	r3, [r3, #24]
                       SAI_InitStruct->SAI_ClockStrobing | SAI_InitStruct->SAI_Synchro   |  
 800a566:	431a      	orrs	r2, r3
                       SAI_InitStruct->SAI_OUTDRIV       | SAI_InitStruct->SAI_NoDivider | 
 800a568:	683b      	ldr	r3, [r7, #0]
 800a56a:	69db      	ldr	r3, [r3, #28]
 800a56c:	431a      	orrs	r2, r3
                       (uint32_t)((SAI_InitStruct->SAI_MasterDivider) << 20));
 800a56e:	683b      	ldr	r3, [r7, #0]
 800a570:	6a1b      	ldr	r3, [r3, #32]
 800a572:	051b      	lsls	r3, r3, #20
  tmpreg |= (uint32_t)(SAI_InitStruct->SAI_AudioMode     | SAI_InitStruct->SAI_Protocol  |
 800a574:	4313      	orrs	r3, r2
 800a576:	68fa      	ldr	r2, [r7, #12]
 800a578:	4313      	orrs	r3, r2
 800a57a:	60fb      	str	r3, [r7, #12]
  /* Write to SAI_Block_x CR1 */
  SAI_Block_x->CR1 = tmpreg;
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	68fa      	ldr	r2, [r7, #12]
 800a580:	601a      	str	r2, [r3, #0]
  
  /* SAI Block_x CR2 Configuration */
  /* Get the SAIBlock_x CR2 value */
  tmpreg = SAI_Block_x->CR2;
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	685b      	ldr	r3, [r3, #4]
 800a586:	60fb      	str	r3, [r7, #12]
  /* Clear FTH bits */
  tmpreg &= ~(SAI_xCR2_FTH);
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	f023 0303 	bic.w	r3, r3, #3
 800a58e:	60fb      	str	r3, [r7, #12]
  /* Configure the FIFO Level */
  /* Set FTH bits according to SAI_FIFOThreshold value */ 
  tmpreg |= (uint32_t)(SAI_InitStruct->SAI_FIFOThreshold);
 800a590:	683b      	ldr	r3, [r7, #0]
 800a592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a594:	68fa      	ldr	r2, [r7, #12]
 800a596:	4313      	orrs	r3, r2
 800a598:	60fb      	str	r3, [r7, #12]
  /* Write to SAI_Block_x CR2 */
  SAI_Block_x->CR2 = tmpreg;
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	68fa      	ldr	r2, [r7, #12]
 800a59e:	605a      	str	r2, [r3, #4]
}
 800a5a0:	bf00      	nop
 800a5a2:	3714      	adds	r7, #20
 800a5a4:	46bd      	mov	sp, r7
 800a5a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5aa:	4770      	bx	lr
 800a5ac:	ff07c010 	.word	0xff07c010

0800a5b0 <SAI_FrameInit>:
  * @param  SAI_FrameInitStruct: pointer to an SAI_FrameInitTypeDef structure that
  *         contains the configuration of audio frame for a specified SAI Block                       
  * @retval None
  */
void SAI_FrameInit(SAI_Block_TypeDef* SAI_Block_x, SAI_FrameInitTypeDef* SAI_FrameInitStruct)
{
 800a5b0:	b480      	push	{r7}
 800a5b2:	b085      	sub	sp, #20
 800a5b4:	af00      	add	r7, sp, #0
 800a5b6:	6078      	str	r0, [r7, #4]
 800a5b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800a5ba:	2300      	movs	r3, #0
 800a5bc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SAI_BLOCK_FS_POLARITY(SAI_FrameInitStruct->SAI_FSPolarity));
  assert_param(IS_SAI_BLOCK_FS_OFFSET(SAI_FrameInitStruct->SAI_FSOffset));

  /* SAI Block_x FRCR Configuration */
  /* Get the SAI Block_x FRCR value */
  tmpreg = SAI_Block_x->FRCR;
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	689b      	ldr	r3, [r3, #8]
 800a5c2:	60fb      	str	r3, [r7, #12]
  /* Clear FRL, FSALL, FSDEF, FSPOL, FSOFF bits */
  tmpreg &= FRCR_CLEAR_MASK;
 800a5c4:	68fa      	ldr	r2, [r7, #12]
 800a5c6:	4b10      	ldr	r3, [pc, #64]	; (800a608 <SAI_FrameInit+0x58>)
 800a5c8:	4013      	ands	r3, r2
 800a5ca:	60fb      	str	r3, [r7, #12]
  /* Set FRL bits according to SAI_FrameLength value         */
  /* Set FSALL bits according to SAI_ActiveFrameLength value */
  /* Set FSDEF bit according to SAI_FSDefinition value       */
  /* Set FSPOL bit according to SAI_FSPolarity value         */
  /* Set FSOFF bit according to SAI_FSOffset value           */
  tmpreg |= (uint32_t)((uint32_t)(SAI_FrameInitStruct->SAI_FrameLength - 1)  | 
 800a5cc:	683b      	ldr	r3, [r7, #0]
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	1e5a      	subs	r2, r3, #1
                       SAI_FrameInitStruct->SAI_FSOffset     | 
 800a5d2:	683b      	ldr	r3, [r7, #0]
 800a5d4:	691b      	ldr	r3, [r3, #16]
  tmpreg |= (uint32_t)((uint32_t)(SAI_FrameInitStruct->SAI_FrameLength - 1)  | 
 800a5d6:	431a      	orrs	r2, r3
                       SAI_FrameInitStruct->SAI_FSDefinition |    
 800a5d8:	683b      	ldr	r3, [r7, #0]
 800a5da:	689b      	ldr	r3, [r3, #8]
                       SAI_FrameInitStruct->SAI_FSOffset     | 
 800a5dc:	431a      	orrs	r2, r3
                       SAI_FrameInitStruct->SAI_FSPolarity   |                        
 800a5de:	683b      	ldr	r3, [r7, #0]
 800a5e0:	68db      	ldr	r3, [r3, #12]
                       SAI_FrameInitStruct->SAI_FSDefinition |    
 800a5e2:	431a      	orrs	r2, r3
                       (uint32_t)((SAI_FrameInitStruct->SAI_ActiveFrameLength - 1) << 8));
 800a5e4:	683b      	ldr	r3, [r7, #0]
 800a5e6:	685b      	ldr	r3, [r3, #4]
 800a5e8:	3b01      	subs	r3, #1
 800a5ea:	021b      	lsls	r3, r3, #8
  tmpreg |= (uint32_t)((uint32_t)(SAI_FrameInitStruct->SAI_FrameLength - 1)  | 
 800a5ec:	4313      	orrs	r3, r2
 800a5ee:	68fa      	ldr	r2, [r7, #12]
 800a5f0:	4313      	orrs	r3, r2
 800a5f2:	60fb      	str	r3, [r7, #12]
                       
  /* Write to SAI_Block_x FRCR */
  SAI_Block_x->FRCR = tmpreg;
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	68fa      	ldr	r2, [r7, #12]
 800a5f8:	609a      	str	r2, [r3, #8]
}
 800a5fa:	bf00      	nop
 800a5fc:	3714      	adds	r7, #20
 800a5fe:	46bd      	mov	sp, r7
 800a600:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a604:	4770      	bx	lr
 800a606:	bf00      	nop
 800a608:	fff88000 	.word	0xfff88000

0800a60c <SAI_SlotInit>:
  * @param  SAI_SlotInitStruct: pointer to an SAI_SlotInitTypeDef structure that
  *         contains the configuration of audio slot for a specified SAI Block                      
  * @retval None
  */
void SAI_SlotInit(SAI_Block_TypeDef* SAI_Block_x, SAI_SlotInitTypeDef* SAI_SlotInitStruct)
{
 800a60c:	b480      	push	{r7}
 800a60e:	b085      	sub	sp, #20
 800a610:	af00      	add	r7, sp, #0
 800a612:	6078      	str	r0, [r7, #4]
 800a614:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800a616:	2300      	movs	r3, #0
 800a618:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(SAI_SlotInitStruct->SAI_SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(SAI_SlotInitStruct->SAI_SlotActive));

  /* SAI Block_x SLOTR Configuration */
  /* Get the SAI Block_x SLOTR value */
  tmpreg = SAI_Block_x->SLOTR;
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	68db      	ldr	r3, [r3, #12]
 800a61e:	60fb      	str	r3, [r7, #12]
  /* Clear FBOFF, SLOTSZ, NBSLOT, SLOTEN bits */
  tmpreg &= SLOTR_CLEAR_MASK;
 800a620:	68fa      	ldr	r2, [r7, #12]
 800a622:	f24f 0320 	movw	r3, #61472	; 0xf020
 800a626:	4013      	ands	r3, r2
 800a628:	60fb      	str	r3, [r7, #12]
     audio frame and slots activated in audio frame */
  /* Set FBOFF bits according to SAI_FirstBitOffset value  */
  /* Set SLOTSZ bits according to SAI_SlotSize value       */
  /* Set NBSLOT bits according to SAI_SlotNumber value     */
  /* Set SLOTEN bits according to SAI_SlotActive value     */
  tmpreg |= (uint32_t)(SAI_SlotInitStruct->SAI_FirstBitOffset | 
 800a62a:	683b      	ldr	r3, [r7, #0]
 800a62c:	681a      	ldr	r2, [r3, #0]
                       SAI_SlotInitStruct->SAI_SlotSize       | 
 800a62e:	683b      	ldr	r3, [r7, #0]
 800a630:	685b      	ldr	r3, [r3, #4]
  tmpreg |= (uint32_t)(SAI_SlotInitStruct->SAI_FirstBitOffset | 
 800a632:	431a      	orrs	r2, r3
                       SAI_SlotInitStruct->SAI_SlotActive     |    
 800a634:	683b      	ldr	r3, [r7, #0]
 800a636:	68db      	ldr	r3, [r3, #12]
                       SAI_SlotInitStruct->SAI_SlotSize       | 
 800a638:	431a      	orrs	r2, r3
                       (uint32_t)((SAI_SlotInitStruct->SAI_SlotNumber - 1) <<  8));
 800a63a:	683b      	ldr	r3, [r7, #0]
 800a63c:	689b      	ldr	r3, [r3, #8]
 800a63e:	3b01      	subs	r3, #1
 800a640:	021b      	lsls	r3, r3, #8
  tmpreg |= (uint32_t)(SAI_SlotInitStruct->SAI_FirstBitOffset | 
 800a642:	4313      	orrs	r3, r2
 800a644:	68fa      	ldr	r2, [r7, #12]
 800a646:	4313      	orrs	r3, r2
 800a648:	60fb      	str	r3, [r7, #12]
                       
  /* Write to SAI_Block_x SLOTR */
  SAI_Block_x->SLOTR = tmpreg;
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	68fa      	ldr	r2, [r7, #12]
 800a64e:	60da      	str	r2, [r3, #12]
}
 800a650:	bf00      	nop
 800a652:	3714      	adds	r7, #20
 800a654:	46bd      	mov	sp, r7
 800a656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a65a:	4770      	bx	lr

0800a65c <SAI_StructInit>:
  * @param  SAI_InitStruct: pointer to a SAI_InitTypeDef structure which will 
  *         be initialized.  
  * @retval None
  */
void SAI_StructInit(SAI_InitTypeDef* SAI_InitStruct)
{
 800a65c:	b480      	push	{r7}
 800a65e:	b083      	sub	sp, #12
 800a660:	af00      	add	r7, sp, #0
 800a662:	6078      	str	r0, [r7, #4]
  /* Reset SAI init structure parameters values */
  /* Initialize the SAI_AudioMode member */
  SAI_InitStruct->SAI_AudioMode = SAI_Mode_MasterTx;
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	2200      	movs	r2, #0
 800a668:	601a      	str	r2, [r3, #0]
  /* Initialize the SAI_Protocol member */
  SAI_InitStruct->SAI_Protocol = SAI_Free_Protocol;
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	2200      	movs	r2, #0
 800a66e:	605a      	str	r2, [r3, #4]
  /* Initialize the SAI_DataSize member */
  SAI_InitStruct->SAI_DataSize = SAI_DataSize_8b;
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	2240      	movs	r2, #64	; 0x40
 800a674:	609a      	str	r2, [r3, #8]
  /* Initialize the SAI_FirstBit member */
  SAI_InitStruct->SAI_FirstBit = SAI_FirstBit_MSB;
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	2200      	movs	r2, #0
 800a67a:	60da      	str	r2, [r3, #12]
  /* Initialize the SAI_ClockStrobing member */
  SAI_InitStruct->SAI_ClockStrobing = SAI_ClockStrobing_FallingEdge;
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	2200      	movs	r2, #0
 800a680:	611a      	str	r2, [r3, #16]
  /* Initialize the SAI_Synchro member */
  SAI_InitStruct->SAI_Synchro = SAI_Asynchronous;
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	2200      	movs	r2, #0
 800a686:	615a      	str	r2, [r3, #20]
  /* Initialize the SAI_OUTDRIV member */
  SAI_InitStruct->SAI_OUTDRIV = SAI_OutputDrive_Disabled;
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	2200      	movs	r2, #0
 800a68c:	619a      	str	r2, [r3, #24]
  /* Initialize the SAI_NoDivider member */
  SAI_InitStruct->SAI_NoDivider = SAI_MasterDivider_Enabled;
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	2200      	movs	r2, #0
 800a692:	61da      	str	r2, [r3, #28]
  /* Initialize the SAI_MasterDivider member */
  SAI_InitStruct->SAI_MasterDivider = 0;
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	2200      	movs	r2, #0
 800a698:	621a      	str	r2, [r3, #32]
  /* Initialize the SAI_FIFOThreshold member */
  SAI_InitStruct->SAI_FIFOThreshold = SAI_Threshold_FIFOEmpty;
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	2200      	movs	r2, #0
 800a69e:	625a      	str	r2, [r3, #36]	; 0x24
}
 800a6a0:	bf00      	nop
 800a6a2:	370c      	adds	r7, #12
 800a6a4:	46bd      	mov	sp, r7
 800a6a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6aa:	4770      	bx	lr

0800a6ac <SAI_FrameStructInit>:
  * @param  SAI_FrameInitStruct: pointer to a SAI_FrameInitTypeDef structure 
  *         which will be initialized.                     
  * @retval None
  */
void SAI_FrameStructInit(SAI_FrameInitTypeDef* SAI_FrameInitStruct)
{
 800a6ac:	b480      	push	{r7}
 800a6ae:	b083      	sub	sp, #12
 800a6b0:	af00      	add	r7, sp, #0
 800a6b2:	6078      	str	r0, [r7, #4]
  /* Reset SAI Frame init structure parameters values */
  /* Initialize the SAI_FrameLength member */
  SAI_FrameInitStruct->SAI_FrameLength = 8;
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	2208      	movs	r2, #8
 800a6b8:	601a      	str	r2, [r3, #0]
  /* Initialize the SAI_ActiveFrameLength member */
  SAI_FrameInitStruct->SAI_ActiveFrameLength = 1;
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	2201      	movs	r2, #1
 800a6be:	605a      	str	r2, [r3, #4]
  /* Initialize the SAI_FSDefinition member */
  SAI_FrameInitStruct->SAI_FSDefinition = SAI_FS_StartFrame;
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	2200      	movs	r2, #0
 800a6c4:	609a      	str	r2, [r3, #8]
  /* Initialize the SAI_FSPolarity member */
  SAI_FrameInitStruct->SAI_FSPolarity = SAI_FS_ActiveLow;
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	2200      	movs	r2, #0
 800a6ca:	60da      	str	r2, [r3, #12]
  /* Initialize the SAI_FSOffset member */
  SAI_FrameInitStruct->SAI_FSOffset = SAI_FS_FirstBit;
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	2200      	movs	r2, #0
 800a6d0:	611a      	str	r2, [r3, #16]
}
 800a6d2:	bf00      	nop
 800a6d4:	370c      	adds	r7, #12
 800a6d6:	46bd      	mov	sp, r7
 800a6d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6dc:	4770      	bx	lr

0800a6de <SAI_SlotStructInit>:
  * @param  SAI_SlotInitStruct: pointer to a SAI_SlotInitTypeDef structure 
  *         which will be initialized.                     
  * @retval None
  */
void SAI_SlotStructInit(SAI_SlotInitTypeDef* SAI_SlotInitStruct)
{
 800a6de:	b480      	push	{r7}
 800a6e0:	b083      	sub	sp, #12
 800a6e2:	af00      	add	r7, sp, #0
 800a6e4:	6078      	str	r0, [r7, #4]
  /* Reset SAI Slot init structure parameters values */
  /* Initialize the SAI_FirstBitOffset member */
  SAI_SlotInitStruct->SAI_FirstBitOffset = 0;
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	2200      	movs	r2, #0
 800a6ea:	601a      	str	r2, [r3, #0]
  /* Initialize the SAI_SlotSize member */
  SAI_SlotInitStruct->SAI_SlotSize = SAI_SlotSize_DataSize;
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	2200      	movs	r2, #0
 800a6f0:	605a      	str	r2, [r3, #4]
  /* Initialize the SAI_SlotNumber member */
  SAI_SlotInitStruct->SAI_SlotNumber = 1;
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	2201      	movs	r2, #1
 800a6f6:	609a      	str	r2, [r3, #8]
  /* Initialize the SAI_SlotActive member */
  SAI_SlotInitStruct->SAI_SlotActive = SAI_Slot_NotActive;
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	2200      	movs	r2, #0
 800a6fc:	60da      	str	r2, [r3, #12]

}
 800a6fe:	bf00      	nop
 800a700:	370c      	adds	r7, #12
 800a702:	46bd      	mov	sp, r7
 800a704:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a708:	4770      	bx	lr

0800a70a <SAI_Cmd>:
  * @param  NewState: new state of the SAI_Block_x peripheral. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SAI_Cmd(SAI_Block_TypeDef* SAI_Block_x, FunctionalState NewState)
{
 800a70a:	b480      	push	{r7}
 800a70c:	b083      	sub	sp, #12
 800a70e:	af00      	add	r7, sp, #0
 800a710:	6078      	str	r0, [r7, #4]
 800a712:	460b      	mov	r3, r1
 800a714:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SAI_BLOCK_PERIPH(SAI_Block_x));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800a716:	78fb      	ldrb	r3, [r7, #3]
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d006      	beq.n	800a72a <SAI_Cmd+0x20>
  {
    /* Enable the selected SAI peripheral */
    SAI_Block_x->CR1 |= SAI_xCR1_SAIEN;
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected SAI peripheral */
    SAI_Block_x->CR1 &= ~(SAI_xCR1_SAIEN);
  }
}
 800a728:	e005      	b.n	800a736 <SAI_Cmd+0x2c>
    SAI_Block_x->CR1 &= ~(SAI_xCR1_SAIEN);
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	601a      	str	r2, [r3, #0]
}
 800a736:	bf00      	nop
 800a738:	370c      	adds	r7, #12
 800a73a:	46bd      	mov	sp, r7
 800a73c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a740:	4770      	bx	lr

0800a742 <SAI_MonoModeConfig>:
  *            @arg SAI_MonoMode : Set mono audio mode
  *            @arg SAI_StreoMode : Set streo audio mode                       
  * @retval None
  */
void SAI_MonoModeConfig(SAI_Block_TypeDef* SAI_Block_x, uint32_t SAI_Mono_StreoMode)
{
 800a742:	b480      	push	{r7}
 800a744:	b083      	sub	sp, #12
 800a746:	af00      	add	r7, sp, #0
 800a748:	6078      	str	r0, [r7, #4]
 800a74a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_SAI_BLOCK_PERIPH(SAI_Block_x));
  assert_param(IS_SAI_BLOCK_MONO_STREO_MODE(SAI_MonoMode));
  /* Clear MONO bit */
  SAI_Block_x->CR1 &= ~(SAI_xCR1_MONO);
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	601a      	str	r2, [r3, #0]
  /* Set new Mono Mode value */
  SAI_Block_x->CR1 |= SAI_MonoMode;
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	601a      	str	r2, [r3, #0]
}
 800a764:	bf00      	nop
 800a766:	370c      	adds	r7, #12
 800a768:	46bd      	mov	sp, r7
 800a76a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a76e:	4770      	bx	lr

0800a770 <SAI_TRIStateConfig>:
  *            @arg SAI_Output_NotReleased : SD output line is still drived by the SAI.
  *            @arg SAI_Output_Released : SD output line is released (HI-Z)                       
  * @retval None
  */
void SAI_TRIStateConfig(SAI_Block_TypeDef* SAI_Block_x, uint32_t SAI_TRIState)
{
 800a770:	b480      	push	{r7}
 800a772:	b083      	sub	sp, #12
 800a774:	af00      	add	r7, sp, #0
 800a776:	6078      	str	r0, [r7, #4]
 800a778:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_SAI_BLOCK_PERIPH(SAI_Block_x));
  assert_param(IS_SAI_BLOCK_TRISTATE_MANAGEMENT(SAI_TRIState));
  /* Clear MONO bit */
  SAI_Block_x->CR1 &= ~(SAI_xCR1_MONO);
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	601a      	str	r2, [r3, #0]
  /* Set new Mono Mode value */
  SAI_Block_x->CR1 |= SAI_MonoMode;  
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	601a      	str	r2, [r3, #0]
  
}
 800a792:	bf00      	nop
 800a794:	370c      	adds	r7, #12
 800a796:	46bd      	mov	sp, r7
 800a798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a79c:	4770      	bx	lr

0800a79e <SAI_CompandingModeConfig>:
  *            @arg SAI_ULaw_2CPL_Companding : Set U law (algorithm 2's complement representation)
  *            @arg SAI_ALaw_2CPL_Companding : Set A law (algorithm 2's complement repesentation)  
  * @retval None
  */
void SAI_CompandingModeConfig(SAI_Block_TypeDef* SAI_Block_x, uint32_t SAI_CompandingMode)
{
 800a79e:	b480      	push	{r7}
 800a7a0:	b083      	sub	sp, #12
 800a7a2:	af00      	add	r7, sp, #0
 800a7a4:	6078      	str	r0, [r7, #4]
 800a7a6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_SAI_BLOCK_PERIPH(SAI_Block_x));
  assert_param(IS_SAI_BLOCK_COMPANDING_MODE(SAI_CompandingMode));
  /* Clear Companding Mode bits */
  SAI_Block_x->CR2 &= ~(SAI_xCR2_COMP);
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	685b      	ldr	r3, [r3, #4]
 800a7ac:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	605a      	str	r2, [r3, #4]
  /* Set new Companding Mode value */
  SAI_Block_x->CR2 |= SAI_CompandingMode;
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	685a      	ldr	r2, [r3, #4]
 800a7b8:	683b      	ldr	r3, [r7, #0]
 800a7ba:	431a      	orrs	r2, r3
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	605a      	str	r2, [r3, #4]
}
 800a7c0:	bf00      	nop
 800a7c2:	370c      	adds	r7, #12
 800a7c4:	46bd      	mov	sp, r7
 800a7c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ca:	4770      	bx	lr

0800a7cc <SAI_MuteModeCmd>:
  * @param  NewState: new state of the SAIx block. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SAI_MuteModeCmd(SAI_Block_TypeDef* SAI_Block_x, FunctionalState NewState)
{
 800a7cc:	b480      	push	{r7}
 800a7ce:	b083      	sub	sp, #12
 800a7d0:	af00      	add	r7, sp, #0
 800a7d2:	6078      	str	r0, [r7, #4]
 800a7d4:	460b      	mov	r3, r1
 800a7d6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SAI_BLOCK_PERIPH(SAI_Block_x));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800a7d8:	78fb      	ldrb	r3, [r7, #3]
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d006      	beq.n	800a7ec <SAI_MuteModeCmd+0x20>
  {
    /* Enable the selected SAI block mute mode */
    SAI_Block_x->CR2 |= SAI_xCR2_MUTE;
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	685b      	ldr	r3, [r3, #4]
 800a7e2:	f043 0220 	orr.w	r2, r3, #32
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	605a      	str	r2, [r3, #4]
  else
  {
    /* Disable the selected SAI SS output */
    SAI_Block_x->CR2 &= ~(SAI_xCR2_MUTE);
  }
}
 800a7ea:	e005      	b.n	800a7f8 <SAI_MuteModeCmd+0x2c>
    SAI_Block_x->CR2 &= ~(SAI_xCR2_MUTE);
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	685b      	ldr	r3, [r3, #4]
 800a7f0:	f023 0220 	bic.w	r2, r3, #32
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	605a      	str	r2, [r3, #4]
}
 800a7f8:	bf00      	nop
 800a7fa:	370c      	adds	r7, #12
 800a7fc:	46bd      	mov	sp, r7
 800a7fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a802:	4770      	bx	lr

0800a804 <SAI_MuteValueConfig>:
  *            @arg SAI_ZeroValue : bit value 0 is sent during Mute Mode
  *            @arg SAI_LastSentValue : Last value is sent during Mute Mode  
  * @retval None
  */
void SAI_MuteValueConfig(SAI_Block_TypeDef* SAI_Block_x, uint32_t SAI_MuteValue)
{
 800a804:	b480      	push	{r7}
 800a806:	b083      	sub	sp, #12
 800a808:	af00      	add	r7, sp, #0
 800a80a:	6078      	str	r0, [r7, #4]
 800a80c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_SAI_BLOCK_PERIPH(SAI_Block_x));
  assert_param(IS_SAI_BLOCK_MUTE_VALUE(SAI_MuteValue));
  
  /* Clear Mute value bits */
  SAI_Block_x->CR2 &= ~(SAI_xCR2_MUTEVAL);
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	685b      	ldr	r3, [r3, #4]
 800a812:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	605a      	str	r2, [r3, #4]
  /* Set new Mute value */
  SAI_Block_x->CR2 |= SAI_MuteValue;
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	685a      	ldr	r2, [r3, #4]
 800a81e:	683b      	ldr	r3, [r7, #0]
 800a820:	431a      	orrs	r2, r3
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	605a      	str	r2, [r3, #4]
}
 800a826:	bf00      	nop
 800a828:	370c      	adds	r7, #12
 800a82a:	46bd      	mov	sp, r7
 800a82c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a830:	4770      	bx	lr

0800a832 <SAI_MuteFrameCounterConfig>:
  *         This parameter can be a number between 0 and 63.  
 
  * @retval None
  */
void SAI_MuteFrameCounterConfig(SAI_Block_TypeDef* SAI_Block_x, uint32_t SAI_MuteCounter)
{
 800a832:	b480      	push	{r7}
 800a834:	b083      	sub	sp, #12
 800a836:	af00      	add	r7, sp, #0
 800a838:	6078      	str	r0, [r7, #4]
 800a83a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_SAI_BLOCK_PERIPH(SAI_Block_x));
  assert_param(IS_SAI_BLOCK_MUTE_COUNTER(SAI_MuteCounter));
  
  /* Clear Mute value bits */
  SAI_Block_x->CR2 &= ~(SAI_xCR2_MUTECNT);
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	685b      	ldr	r3, [r3, #4]
 800a840:	f423 52fc 	bic.w	r2, r3, #8064	; 0x1f80
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	605a      	str	r2, [r3, #4]
  /* Set new Mute value */
  SAI_Block_x->CR2 |= (SAI_MuteCounter << 7);
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	685a      	ldr	r2, [r3, #4]
 800a84c:	683b      	ldr	r3, [r7, #0]
 800a84e:	01db      	lsls	r3, r3, #7
 800a850:	431a      	orrs	r2, r3
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	605a      	str	r2, [r3, #4]
}
 800a856:	bf00      	nop
 800a858:	370c      	adds	r7, #12
 800a85a:	46bd      	mov	sp, r7
 800a85c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a860:	4770      	bx	lr

0800a862 <SAI_FlushFIFO>:
  * @param  NewState: new state of the selected SAI TI communication mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SAI_FlushFIFO(SAI_Block_TypeDef* SAI_Block_x)
{
 800a862:	b480      	push	{r7}
 800a864:	b083      	sub	sp, #12
 800a866:	af00      	add	r7, sp, #0
 800a868:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SAI_BLOCK_PERIPH(SAI_Block_x));

  /* FIFO flush */
  SAI_Block_x->CR2 |= SAI_xCR2_FFLUSH;
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	685b      	ldr	r3, [r3, #4]
 800a86e:	f043 0208 	orr.w	r2, r3, #8
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	605a      	str	r2, [r3, #4]
}
 800a876:	bf00      	nop
 800a878:	370c      	adds	r7, #12
 800a87a:	46bd      	mov	sp, r7
 800a87c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a880:	4770      	bx	lr

0800a882 <SAI_ReceiveData>:
  * @param  SAI_Block_x: where x can be A or B to select the SAI Block peripheral. 
  *         
  * @retval The value of the received data.
  */
uint32_t SAI_ReceiveData(SAI_Block_TypeDef* SAI_Block_x)
{
 800a882:	b480      	push	{r7}
 800a884:	b083      	sub	sp, #12
 800a886:	af00      	add	r7, sp, #0
 800a888:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SAI_BLOCK_PERIPH(SAI_Block_x));
  
  /* Return the data in the DR register */
  return SAI_Block_x->DR;
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	69db      	ldr	r3, [r3, #28]
}
 800a88e:	4618      	mov	r0, r3
 800a890:	370c      	adds	r7, #12
 800a892:	46bd      	mov	sp, r7
 800a894:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a898:	4770      	bx	lr

0800a89a <SAI_SendData>:
  *        
  * @param  Data: Data to be transmitted.
  * @retval None
  */
void SAI_SendData(SAI_Block_TypeDef* SAI_Block_x, uint32_t Data)
{
 800a89a:	b480      	push	{r7}
 800a89c:	b083      	sub	sp, #12
 800a89e:	af00      	add	r7, sp, #0
 800a8a0:	6078      	str	r0, [r7, #4]
 800a8a2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_SAI_BLOCK_PERIPH(SAI_Block_x));
  
  /* Write in the DR register the data to be sent */
  SAI_Block_x->DR = Data;
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	683a      	ldr	r2, [r7, #0]
 800a8a8:	61da      	str	r2, [r3, #28]
}
 800a8aa:	bf00      	nop
 800a8ac:	370c      	adds	r7, #12
 800a8ae:	46bd      	mov	sp, r7
 800a8b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8b4:	4770      	bx	lr

0800a8b6 <SAI_DMACmd>:
  * @param  NewState: new state of the selected SAI block DMA transfer request.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SAI_DMACmd(SAI_Block_TypeDef* SAI_Block_x, FunctionalState NewState)
{
 800a8b6:	b480      	push	{r7}
 800a8b8:	b083      	sub	sp, #12
 800a8ba:	af00      	add	r7, sp, #0
 800a8bc:	6078      	str	r0, [r7, #4]
 800a8be:	460b      	mov	r3, r1
 800a8c0:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SAI_BLOCK_PERIPH(SAI_Block_x));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800a8c2:	78fb      	ldrb	r3, [r7, #3]
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	d006      	beq.n	800a8d6 <SAI_DMACmd+0x20>
  {
    /* Enable the selected SAI block mute mode */
    SAI_Block_x->CR1 |= SAI_xCR1_DMAEN;
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected SAI SS output */
    SAI_Block_x->CR1 &= ~(SAI_xCR1_DMAEN);
  }
}
 800a8d4:	e005      	b.n	800a8e2 <SAI_DMACmd+0x2c>
    SAI_Block_x->CR1 &= ~(SAI_xCR1_DMAEN);
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	601a      	str	r2, [r3, #0]
}
 800a8e2:	bf00      	nop
 800a8e4:	370c      	adds	r7, #12
 800a8e6:	46bd      	mov	sp, r7
 800a8e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ec:	4770      	bx	lr

0800a8ee <SAI_ITConfig>:
  * @param  NewState: new state of the specified SAI interrupt.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SAI_ITConfig(SAI_Block_TypeDef* SAI_Block_x, uint32_t SAI_IT, FunctionalState NewState)
{ 
 800a8ee:	b480      	push	{r7}
 800a8f0:	b085      	sub	sp, #20
 800a8f2:	af00      	add	r7, sp, #0
 800a8f4:	60f8      	str	r0, [r7, #12]
 800a8f6:	60b9      	str	r1, [r7, #8]
 800a8f8:	4613      	mov	r3, r2
 800a8fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_SAI_BLOCK_PERIPH(SAI_Block_x));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_SAI_BLOCK_CONFIG_IT(SAI_IT));

  if (NewState != DISABLE)
 800a8fc:	79fb      	ldrb	r3, [r7, #7]
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d006      	beq.n	800a910 <SAI_ITConfig+0x22>
  {
    /* Enable the selected SAI Block interrupt */
    SAI_Block_x->IMR |= SAI_IT;
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	691a      	ldr	r2, [r3, #16]
 800a906:	68bb      	ldr	r3, [r7, #8]
 800a908:	431a      	orrs	r2, r3
 800a90a:	68fb      	ldr	r3, [r7, #12]
 800a90c:	611a      	str	r2, [r3, #16]
  else
  {
    /* Disable the selected SAI Block interrupt */
    SAI_Block_x->IMR &= ~(SAI_IT);
  }
}
 800a90e:	e006      	b.n	800a91e <SAI_ITConfig+0x30>
    SAI_Block_x->IMR &= ~(SAI_IT);
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	691a      	ldr	r2, [r3, #16]
 800a914:	68bb      	ldr	r3, [r7, #8]
 800a916:	43db      	mvns	r3, r3
 800a918:	401a      	ands	r2, r3
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	611a      	str	r2, [r3, #16]
}
 800a91e:	bf00      	nop
 800a920:	3714      	adds	r7, #20
 800a922:	46bd      	mov	sp, r7
 800a924:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a928:	4770      	bx	lr

0800a92a <SAI_GetFlagStatus>:
  *            @arg SAI_FLAG_AFSDET: anticipated frame synchronization detection flag.
  *            @arg SAI_FLAG_LFSDET: late frame synchronization detection flag.
  * @retval The new state of SAI_FLAG (SET or RESET).
  */
FlagStatus SAI_GetFlagStatus(SAI_Block_TypeDef* SAI_Block_x, uint32_t SAI_FLAG)
{
 800a92a:	b480      	push	{r7}
 800a92c:	b085      	sub	sp, #20
 800a92e:	af00      	add	r7, sp, #0
 800a930:	6078      	str	r0, [r7, #4]
 800a932:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 800a934:	2300      	movs	r3, #0
 800a936:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SAI_BLOCK_PERIPH(SAI_Block_x));
  assert_param(IS_SAI_BLOCK_GET_FLAG(SAI_FLAG));
  
  /* Check the status of the specified SAI flag */
  if ((SAI_Block_x->SR & SAI_FLAG) != (uint32_t)RESET)
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	695a      	ldr	r2, [r3, #20]
 800a93c:	683b      	ldr	r3, [r7, #0]
 800a93e:	4013      	ands	r3, r2
 800a940:	2b00      	cmp	r3, #0
 800a942:	d002      	beq.n	800a94a <SAI_GetFlagStatus+0x20>
  {
    /* SAI_FLAG is set */
    bitstatus = SET;
 800a944:	2301      	movs	r3, #1
 800a946:	73fb      	strb	r3, [r7, #15]
 800a948:	e001      	b.n	800a94e <SAI_GetFlagStatus+0x24>
  }
  else
  {
    /* SAI_FLAG is reset */
    bitstatus = RESET;
 800a94a:	2300      	movs	r3, #0
 800a94c:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SAI_FLAG status */
  return  bitstatus;
 800a94e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a950:	4618      	mov	r0, r3
 800a952:	3714      	adds	r7, #20
 800a954:	46bd      	mov	sp, r7
 800a956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a95a:	4770      	bx	lr

0800a95c <SAI_ClearFlag>:
  *          - When the audio block is receiver and the FIFO is not empty           
  *  
  * @retval None
  */
void SAI_ClearFlag(SAI_Block_TypeDef* SAI_Block_x, uint32_t SAI_FLAG)
{
 800a95c:	b480      	push	{r7}
 800a95e:	b083      	sub	sp, #12
 800a960:	af00      	add	r7, sp, #0
 800a962:	6078      	str	r0, [r7, #4]
 800a964:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_SAI_BLOCK_PERIPH(SAI_Block_x));
  assert_param(IS_SAI_BLOCK_CLEAR_FLAG(SAI_FLAG));
    
  /* Clear the selected SAI Block flag */
  SAI_Block_x->CLRFR |= SAI_FLAG;
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	699a      	ldr	r2, [r3, #24]
 800a96a:	683b      	ldr	r3, [r7, #0]
 800a96c:	431a      	orrs	r2, r3
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	619a      	str	r2, [r3, #24]
}
 800a972:	bf00      	nop
 800a974:	370c      	adds	r7, #12
 800a976:	46bd      	mov	sp, r7
 800a978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a97c:	4770      	bx	lr

0800a97e <SAI_GetITStatus>:
  *            @arg SAI_IT_WCKCFG: wrong clock configuration interrupt 
  *                
  * @retval The new state of SAI_IT (SET or RESET).
  */
ITStatus SAI_GetITStatus(SAI_Block_TypeDef* SAI_Block_x, uint32_t SAI_IT)
{
 800a97e:	b480      	push	{r7}
 800a980:	b085      	sub	sp, #20
 800a982:	af00      	add	r7, sp, #0
 800a984:	6078      	str	r0, [r7, #4]
 800a986:	6039      	str	r1, [r7, #0]
  ITStatus bitstatus = RESET;
 800a988:	2300      	movs	r3, #0
 800a98a:	73fb      	strb	r3, [r7, #15]
  uint32_t  enablestatus = 0;
 800a98c:	2300      	movs	r3, #0
 800a98e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_SAI_BLOCK_PERIPH(SAI_Block_x));
  assert_param(IS_SAI_BLOCK_CONFIG_IT(SAI_IT));
  
  /* Get the SAI_IT enable bit status */
  enablestatus = (SAI_Block_x->IMR & SAI_IT) ;
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	691b      	ldr	r3, [r3, #16]
 800a994:	683a      	ldr	r2, [r7, #0]
 800a996:	4013      	ands	r3, r2
 800a998:	60bb      	str	r3, [r7, #8]

  /* Check the status of the specified SAI interrupt */
  if (((SAI_Block_x->SR & SAI_IT) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	695a      	ldr	r2, [r3, #20]
 800a99e:	683b      	ldr	r3, [r7, #0]
 800a9a0:	4013      	ands	r3, r2
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d005      	beq.n	800a9b2 <SAI_GetITStatus+0x34>
 800a9a6:	68bb      	ldr	r3, [r7, #8]
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d002      	beq.n	800a9b2 <SAI_GetITStatus+0x34>
  {
    /* SAI_IT is set */
    bitstatus = SET;
 800a9ac:	2301      	movs	r3, #1
 800a9ae:	73fb      	strb	r3, [r7, #15]
 800a9b0:	e001      	b.n	800a9b6 <SAI_GetITStatus+0x38>
  }
  else
  {
    /* SAI_IT is reset */
    bitstatus = RESET;
 800a9b2:	2300      	movs	r3, #0
 800a9b4:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SAI_IT status */
  return bitstatus;
 800a9b6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9b8:	4618      	mov	r0, r3
 800a9ba:	3714      	adds	r7, #20
 800a9bc:	46bd      	mov	sp, r7
 800a9be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9c2:	4770      	bx	lr

0800a9c4 <SAI_ClearITPendingBit>:
  *          - When the audio block is receiver and the FIFO is not empty  
  *            
  * @retval None
  */
void SAI_ClearITPendingBit(SAI_Block_TypeDef* SAI_Block_x, uint32_t SAI_IT)
{
 800a9c4:	b480      	push	{r7}
 800a9c6:	b083      	sub	sp, #12
 800a9c8:	af00      	add	r7, sp, #0
 800a9ca:	6078      	str	r0, [r7, #4]
 800a9cc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_SAI_BLOCK_PERIPH(SAI_Block_x));
  assert_param(IS_SAI_BLOCK_CONFIG_IT(SAI_IT));

  /* Clear the selected SAI Block x interrupt pending bit */
  SAI_Block_x->CLRFR |= SAI_IT; 
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	699a      	ldr	r2, [r3, #24]
 800a9d2:	683b      	ldr	r3, [r7, #0]
 800a9d4:	431a      	orrs	r2, r3
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	619a      	str	r2, [r3, #24]
}
 800a9da:	bf00      	nop
 800a9dc:	370c      	adds	r7, #12
 800a9de:	46bd      	mov	sp, r7
 800a9e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9e4:	4770      	bx	lr

0800a9e6 <SAI_GetCmdStatus>:
  *          the end of audio frame.  
  *      
  * @retval Current state of the DMAy Streamx (ENABLE or DISABLE).
  */
FunctionalState SAI_GetCmdStatus(SAI_Block_TypeDef* SAI_Block_x)
{
 800a9e6:	b480      	push	{r7}
 800a9e8:	b085      	sub	sp, #20
 800a9ea:	af00      	add	r7, sp, #0
 800a9ec:	6078      	str	r0, [r7, #4]
  FunctionalState state = DISABLE;
 800a9ee:	2300      	movs	r3, #0
 800a9f0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_SAI_BLOCK_PERIPH(SAI_Block_x));
  if ((SAI_Block_x->CR1 & (uint32_t)SAI_xCR1_SAIEN) != 0)
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d002      	beq.n	800aa04 <SAI_GetCmdStatus+0x1e>
  {
    /* The selected SAI Block x EN bit is set (audio frame transfer is ongoing) */
    state = ENABLE;
 800a9fe:	2301      	movs	r3, #1
 800aa00:	73fb      	strb	r3, [r7, #15]
 800aa02:	e001      	b.n	800aa08 <SAI_GetCmdStatus+0x22>
  }
  else
  {
    /* The selected SAI Block x EN bit is cleared (SAI Block is disabled and 
        all transfers are complete) */
    state = DISABLE;
 800aa04:	2300      	movs	r3, #0
 800aa06:	73fb      	strb	r3, [r7, #15]
  }
  return state;
 800aa08:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa0a:	4618      	mov	r0, r3
 800aa0c:	3714      	adds	r7, #20
 800aa0e:	46bd      	mov	sp, r7
 800aa10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa14:	4770      	bx	lr

0800aa16 <SAI_GetFIFOStatus>:
  *           - SAI_FIFOStatus_HalfFull: if more than 1 half-full.
  *           - SAI_FIFOStatus_3QuartersFull: if more than 3 quarters-full.
  *           - SAI_FIFOStatus_Full: when FIFO is full
  */
uint32_t SAI_GetFIFOStatus(SAI_Block_TypeDef* SAI_Block_x)
{
 800aa16:	b480      	push	{r7}
 800aa18:	b085      	sub	sp, #20
 800aa1a:	af00      	add	r7, sp, #0
 800aa1c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800aa1e:	2300      	movs	r3, #0
 800aa20:	60fb      	str	r3, [r7, #12]
 
  /* Check the parameters */
  assert_param(IS_SAI_BLOCK_PERIPH(SAI_Block_x));
  
  /* Get the FIFO level bits */
  tmpreg = (uint32_t)((SAI_Block_x->SR & SAI_xSR_FLVL));
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	695b      	ldr	r3, [r3, #20]
 800aa26:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800aa2a:	60fb      	str	r3, [r7, #12]
  
  return tmpreg;
 800aa2c:	68fb      	ldr	r3, [r7, #12]
}
 800aa2e:	4618      	mov	r0, r3
 800aa30:	3714      	adds	r7, #20
 800aa32:	46bd      	mov	sp, r7
 800aa34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa38:	4770      	bx	lr
 800aa3a:	bf00      	nop

0800aa3c <SDIO_DeInit>:
  * @brief  Deinitializes the SDIO peripheral registers to their default reset values.
  * @param  None
  * @retval None
  */
void SDIO_DeInit(void)
{
 800aa3c:	b580      	push	{r7, lr}
 800aa3e:	af00      	add	r7, sp, #0
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_SDIO, ENABLE);
 800aa40:	2101      	movs	r1, #1
 800aa42:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800aa46:	f7fe f8a7 	bl	8008b98 <RCC_APB2PeriphResetCmd>
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_SDIO, DISABLE);
 800aa4a:	2100      	movs	r1, #0
 800aa4c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800aa50:	f7fe f8a2 	bl	8008b98 <RCC_APB2PeriphResetCmd>
}
 800aa54:	bf00      	nop
 800aa56:	bd80      	pop	{r7, pc}

0800aa58 <SDIO_Init>:
  * @param  SDIO_InitStruct : pointer to a SDIO_InitTypeDef structure 
  *         that contains the configuration information for the SDIO peripheral.
  * @retval None
  */
void SDIO_Init(SDIO_InitTypeDef* SDIO_InitStruct)
{
 800aa58:	b480      	push	{r7}
 800aa5a:	b085      	sub	sp, #20
 800aa5c:	af00      	add	r7, sp, #0
 800aa5e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800aa60:	2300      	movs	r3, #0
 800aa62:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(SDIO_InitStruct->SDIO_BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(SDIO_InitStruct->SDIO_HardwareFlowControl)); 
   
/*---------------------------- SDIO CLKCR Configuration ------------------------*/  
  /* Get the SDIO CLKCR value */
  tmpreg = SDIO->CLKCR;
 800aa64:	4b13      	ldr	r3, [pc, #76]	; (800aab4 <SDIO_Init+0x5c>)
 800aa66:	685b      	ldr	r3, [r3, #4]
 800aa68:	60fb      	str	r3, [r7, #12]
  
  /* Clear CLKDIV, PWRSAV, BYPASS, WIDBUS, NEGEDGE, HWFC_EN bits */
  tmpreg &= CLKCR_CLEAR_MASK;
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800aa70:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800aa74:	60fb      	str	r3, [r7, #12]
  /* Set PWRSAV bit according to SDIO_ClockPowerSave value */
  /* Set BYPASS bit according to SDIO_ClockBypass value */
  /* Set WIDBUS bits according to SDIO_BusWide value */
  /* Set NEGEDGE bits according to SDIO_ClockEdge value */
  /* Set HWFC_EN bits according to SDIO_HardwareFlowControl value */
  tmpreg |= (SDIO_InitStruct->SDIO_ClockDiv  | SDIO_InitStruct->SDIO_ClockPowerSave |
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	7d1b      	ldrb	r3, [r3, #20]
 800aa7a:	461a      	mov	r2, r3
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	689b      	ldr	r3, [r3, #8]
 800aa80:	431a      	orrs	r2, r3
             SDIO_InitStruct->SDIO_ClockBypass | SDIO_InitStruct->SDIO_BusWide |
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	685b      	ldr	r3, [r3, #4]
  tmpreg |= (SDIO_InitStruct->SDIO_ClockDiv  | SDIO_InitStruct->SDIO_ClockPowerSave |
 800aa86:	431a      	orrs	r2, r3
             SDIO_InitStruct->SDIO_ClockBypass | SDIO_InitStruct->SDIO_BusWide |
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	68db      	ldr	r3, [r3, #12]
 800aa8c:	431a      	orrs	r2, r3
             SDIO_InitStruct->SDIO_ClockEdge | SDIO_InitStruct->SDIO_HardwareFlowControl); 
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	681b      	ldr	r3, [r3, #0]
             SDIO_InitStruct->SDIO_ClockBypass | SDIO_InitStruct->SDIO_BusWide |
 800aa92:	431a      	orrs	r2, r3
             SDIO_InitStruct->SDIO_ClockEdge | SDIO_InitStruct->SDIO_HardwareFlowControl); 
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	691b      	ldr	r3, [r3, #16]
 800aa98:	4313      	orrs	r3, r2
  tmpreg |= (SDIO_InitStruct->SDIO_ClockDiv  | SDIO_InitStruct->SDIO_ClockPowerSave |
 800aa9a:	68fa      	ldr	r2, [r7, #12]
 800aa9c:	4313      	orrs	r3, r2
 800aa9e:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDIO CLKCR */
  SDIO->CLKCR = tmpreg;
 800aaa0:	4a04      	ldr	r2, [pc, #16]	; (800aab4 <SDIO_Init+0x5c>)
 800aaa2:	68fb      	ldr	r3, [r7, #12]
 800aaa4:	6053      	str	r3, [r2, #4]
}
 800aaa6:	bf00      	nop
 800aaa8:	3714      	adds	r7, #20
 800aaaa:	46bd      	mov	sp, r7
 800aaac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aab0:	4770      	bx	lr
 800aab2:	bf00      	nop
 800aab4:	40012c00 	.word	0x40012c00

0800aab8 <SDIO_StructInit>:
  * @param  SDIO_InitStruct: pointer to an SDIO_InitTypeDef structure which 
  *         will be initialized.
  * @retval None
  */
void SDIO_StructInit(SDIO_InitTypeDef* SDIO_InitStruct)
{
 800aab8:	b480      	push	{r7}
 800aaba:	b083      	sub	sp, #12
 800aabc:	af00      	add	r7, sp, #0
 800aabe:	6078      	str	r0, [r7, #4]
  /* SDIO_InitStruct members default value */
  SDIO_InitStruct->SDIO_ClockDiv = 0x00;
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	2200      	movs	r2, #0
 800aac4:	751a      	strb	r2, [r3, #20]
  SDIO_InitStruct->SDIO_ClockEdge = SDIO_ClockEdge_Rising;
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	2200      	movs	r2, #0
 800aaca:	601a      	str	r2, [r3, #0]
  SDIO_InitStruct->SDIO_ClockBypass = SDIO_ClockBypass_Disable;
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	2200      	movs	r2, #0
 800aad0:	605a      	str	r2, [r3, #4]
  SDIO_InitStruct->SDIO_ClockPowerSave = SDIO_ClockPowerSave_Disable;
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	2200      	movs	r2, #0
 800aad6:	609a      	str	r2, [r3, #8]
  SDIO_InitStruct->SDIO_BusWide = SDIO_BusWide_1b;
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	2200      	movs	r2, #0
 800aadc:	60da      	str	r2, [r3, #12]
  SDIO_InitStruct->SDIO_HardwareFlowControl = SDIO_HardwareFlowControl_Disable;
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	2200      	movs	r2, #0
 800aae2:	611a      	str	r2, [r3, #16]
}
 800aae4:	bf00      	nop
 800aae6:	370c      	adds	r7, #12
 800aae8:	46bd      	mov	sp, r7
 800aaea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaee:	4770      	bx	lr

0800aaf0 <SDIO_ClockCmd>:
  * @param  NewState: new state of the SDIO Clock. 
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SDIO_ClockCmd(FunctionalState NewState)
{
 800aaf0:	b480      	push	{r7}
 800aaf2:	b083      	sub	sp, #12
 800aaf4:	af00      	add	r7, sp, #0
 800aaf6:	4603      	mov	r3, r0
 800aaf8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) CLKCR_CLKEN_BB = (uint32_t)NewState;
 800aafa:	4a04      	ldr	r2, [pc, #16]	; (800ab0c <SDIO_ClockCmd+0x1c>)
 800aafc:	79fb      	ldrb	r3, [r7, #7]
 800aafe:	6013      	str	r3, [r2, #0]
}
 800ab00:	bf00      	nop
 800ab02:	370c      	adds	r7, #12
 800ab04:	46bd      	mov	sp, r7
 800ab06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab0a:	4770      	bx	lr
 800ab0c:	422580a0 	.word	0x422580a0

0800ab10 <SDIO_SetPowerState>:
  *            @arg SDIO_PowerState_OFF: SDIO Power OFF
  *            @arg SDIO_PowerState_ON: SDIO Power ON
  * @retval None
  */
void SDIO_SetPowerState(uint32_t SDIO_PowerState)
{
 800ab10:	b480      	push	{r7}
 800ab12:	b083      	sub	sp, #12
 800ab14:	af00      	add	r7, sp, #0
 800ab16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SDIO_POWER_STATE(SDIO_PowerState));
  
  SDIO->POWER = SDIO_PowerState;
 800ab18:	4a04      	ldr	r2, [pc, #16]	; (800ab2c <SDIO_SetPowerState+0x1c>)
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	6013      	str	r3, [r2, #0]
}
 800ab1e:	bf00      	nop
 800ab20:	370c      	adds	r7, #12
 800ab22:	46bd      	mov	sp, r7
 800ab24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab28:	4770      	bx	lr
 800ab2a:	bf00      	nop
 800ab2c:	40012c00 	.word	0x40012c00

0800ab30 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(void)
{
 800ab30:	b480      	push	{r7}
 800ab32:	af00      	add	r7, sp, #0
  return (SDIO->POWER & (~PWR_PWRCTRL_MASK));
 800ab34:	4b04      	ldr	r3, [pc, #16]	; (800ab48 <SDIO_GetPowerState+0x18>)
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	f003 0303 	and.w	r3, r3, #3
}
 800ab3c:	4618      	mov	r0, r3
 800ab3e:	46bd      	mov	sp, r7
 800ab40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab44:	4770      	bx	lr
 800ab46:	bf00      	nop
 800ab48:	40012c00 	.word	0x40012c00

0800ab4c <SDIO_SendCommand>:
  *         structure that contains the configuration information for the SDIO 
  *         command.
  * @retval None
  */
void SDIO_SendCommand(SDIO_CmdInitTypeDef *SDIO_CmdInitStruct)
{
 800ab4c:	b480      	push	{r7}
 800ab4e:	b085      	sub	sp, #20
 800ab50:	af00      	add	r7, sp, #0
 800ab52:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800ab54:	2300      	movs	r3, #0
 800ab56:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_WAIT(SDIO_CmdInitStruct->SDIO_Wait));
  assert_param(IS_SDIO_CPSM(SDIO_CmdInitStruct->SDIO_CPSM));
  
/*---------------------------- SDIO ARG Configuration ------------------------*/
  /* Set the SDIO Argument value */
  SDIO->ARG = SDIO_CmdInitStruct->SDIO_Argument;
 800ab58:	4a11      	ldr	r2, [pc, #68]	; (800aba0 <SDIO_SendCommand+0x54>)
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	6093      	str	r3, [r2, #8]
  
/*---------------------------- SDIO CMD Configuration ------------------------*/  
  /* Get the SDIO CMD value */
  tmpreg = SDIO->CMD;
 800ab60:	4b0f      	ldr	r3, [pc, #60]	; (800aba0 <SDIO_SendCommand+0x54>)
 800ab62:	68db      	ldr	r3, [r3, #12]
 800ab64:	60fb      	str	r3, [r7, #12]
  /* Clear CMDINDEX, WAITRESP, WAITINT, WAITPEND, CPSMEN bits */
  tmpreg &= CMD_CLEAR_MASK;
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800ab6c:	f023 0307 	bic.w	r3, r3, #7
 800ab70:	60fb      	str	r3, [r7, #12]
  /* Set CMDINDEX bits according to SDIO_CmdIndex value */
  /* Set WAITRESP bits according to SDIO_Response value */
  /* Set WAITINT and WAITPEND bits according to SDIO_Wait value */
  /* Set CPSMEN bits according to SDIO_CPSM value */
  tmpreg |= (uint32_t)SDIO_CmdInitStruct->SDIO_CmdIndex | SDIO_CmdInitStruct->SDIO_Response
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	685a      	ldr	r2, [r3, #4]
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	689b      	ldr	r3, [r3, #8]
 800ab7a:	431a      	orrs	r2, r3
           | SDIO_CmdInitStruct->SDIO_Wait | SDIO_CmdInitStruct->SDIO_CPSM;
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	68db      	ldr	r3, [r3, #12]
 800ab80:	431a      	orrs	r2, r3
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	691b      	ldr	r3, [r3, #16]
 800ab86:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)SDIO_CmdInitStruct->SDIO_CmdIndex | SDIO_CmdInitStruct->SDIO_Response
 800ab88:	68fa      	ldr	r2, [r7, #12]
 800ab8a:	4313      	orrs	r3, r2
 800ab8c:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDIO CMD */
  SDIO->CMD = tmpreg;
 800ab8e:	4a04      	ldr	r2, [pc, #16]	; (800aba0 <SDIO_SendCommand+0x54>)
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	60d3      	str	r3, [r2, #12]
}
 800ab94:	bf00      	nop
 800ab96:	3714      	adds	r7, #20
 800ab98:	46bd      	mov	sp, r7
 800ab9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab9e:	4770      	bx	lr
 800aba0:	40012c00 	.word	0x40012c00

0800aba4 <SDIO_CmdStructInit>:
  * @param  SDIO_CmdInitStruct: pointer to an SDIO_CmdInitTypeDef 
  *         structure which will be initialized.
  * @retval None
  */
void SDIO_CmdStructInit(SDIO_CmdInitTypeDef* SDIO_CmdInitStruct)
{
 800aba4:	b480      	push	{r7}
 800aba6:	b083      	sub	sp, #12
 800aba8:	af00      	add	r7, sp, #0
 800abaa:	6078      	str	r0, [r7, #4]
  /* SDIO_CmdInitStruct members default value */
  SDIO_CmdInitStruct->SDIO_Argument = 0x00;
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	2200      	movs	r2, #0
 800abb0:	601a      	str	r2, [r3, #0]
  SDIO_CmdInitStruct->SDIO_CmdIndex = 0x00;
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	2200      	movs	r2, #0
 800abb6:	605a      	str	r2, [r3, #4]
  SDIO_CmdInitStruct->SDIO_Response = SDIO_Response_No;
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	2200      	movs	r2, #0
 800abbc:	609a      	str	r2, [r3, #8]
  SDIO_CmdInitStruct->SDIO_Wait = SDIO_Wait_No;
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	2200      	movs	r2, #0
 800abc2:	60da      	str	r2, [r3, #12]
  SDIO_CmdInitStruct->SDIO_CPSM = SDIO_CPSM_Disable;
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	2200      	movs	r2, #0
 800abc8:	611a      	str	r2, [r3, #16]
}
 800abca:	bf00      	nop
 800abcc:	370c      	adds	r7, #12
 800abce:	46bd      	mov	sp, r7
 800abd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abd4:	4770      	bx	lr

0800abd6 <SDIO_GetCommandResponse>:
  * @brief  Returns command index of last command for which response received.
  * @param  None
  * @retval Returns the command index of the last command response received.
  */
uint8_t SDIO_GetCommandResponse(void)
{
 800abd6:	b480      	push	{r7}
 800abd8:	af00      	add	r7, sp, #0
  return (uint8_t)(SDIO->RESPCMD);
 800abda:	4b04      	ldr	r3, [pc, #16]	; (800abec <SDIO_GetCommandResponse+0x16>)
 800abdc:	691b      	ldr	r3, [r3, #16]
 800abde:	b2db      	uxtb	r3, r3
}
 800abe0:	4618      	mov	r0, r3
 800abe2:	46bd      	mov	sp, r7
 800abe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abe8:	4770      	bx	lr
 800abea:	bf00      	nop
 800abec:	40012c00 	.word	0x40012c00

0800abf0 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4
  * @retval The Corresponding response register value.
  */
uint32_t SDIO_GetResponse(uint32_t SDIO_RESP)
{
 800abf0:	b480      	push	{r7}
 800abf2:	b085      	sub	sp, #20
 800abf4:	af00      	add	r7, sp, #0
 800abf6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmp = 0;
 800abf8:	2300      	movs	r3, #0
 800abfa:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(SDIO_RESP));

  tmp = SDIO_RESP_ADDR + SDIO_RESP;
 800abfc:	687a      	ldr	r2, [r7, #4]
 800abfe:	4b05      	ldr	r3, [pc, #20]	; (800ac14 <SDIO_GetResponse+0x24>)
 800ac00:	4413      	add	r3, r2
 800ac02:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp); 
 800ac04:	68fb      	ldr	r3, [r7, #12]
 800ac06:	681b      	ldr	r3, [r3, #0]
}
 800ac08:	4618      	mov	r0, r3
 800ac0a:	3714      	adds	r7, #20
 800ac0c:	46bd      	mov	sp, r7
 800ac0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac12:	4770      	bx	lr
 800ac14:	40012c14 	.word	0x40012c14

0800ac18 <SDIO_DataConfig>:
  * @param  SDIO_DataInitStruct : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDIO command.
  * @retval None
  */
void SDIO_DataConfig(SDIO_DataInitTypeDef* SDIO_DataInitStruct)
{
 800ac18:	b480      	push	{r7}
 800ac1a:	b085      	sub	sp, #20
 800ac1c:	af00      	add	r7, sp, #0
 800ac1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800ac20:	2300      	movs	r3, #0
 800ac22:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_MODE(SDIO_DataInitStruct->SDIO_TransferMode));
  assert_param(IS_SDIO_DPSM(SDIO_DataInitStruct->SDIO_DPSM));

/*---------------------------- SDIO DTIMER Configuration ---------------------*/
  /* Set the SDIO Data TimeOut value */
  SDIO->DTIMER = SDIO_DataInitStruct->SDIO_DataTimeOut;
 800ac24:	4a12      	ldr	r2, [pc, #72]	; (800ac70 <SDIO_DataConfig+0x58>)
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	6253      	str	r3, [r2, #36]	; 0x24

/*---------------------------- SDIO DLEN Configuration -----------------------*/
  /* Set the SDIO DataLength value */
  SDIO->DLEN = SDIO_DataInitStruct->SDIO_DataLength;
 800ac2c:	4a10      	ldr	r2, [pc, #64]	; (800ac70 <SDIO_DataConfig+0x58>)
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	685b      	ldr	r3, [r3, #4]
 800ac32:	6293      	str	r3, [r2, #40]	; 0x28

/*---------------------------- SDIO DCTRL Configuration ----------------------*/  
  /* Get the SDIO DCTRL value */
  tmpreg = SDIO->DCTRL;
 800ac34:	4b0e      	ldr	r3, [pc, #56]	; (800ac70 <SDIO_DataConfig+0x58>)
 800ac36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac38:	60fb      	str	r3, [r7, #12]
  /* Clear DEN, DTMODE, DTDIR and DBCKSIZE bits */
  tmpreg &= DCTRL_CLEAR_MASK;
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	f023 03f7 	bic.w	r3, r3, #247	; 0xf7
 800ac40:	60fb      	str	r3, [r7, #12]
  /* Set DEN bit according to SDIO_DPSM value */
  /* Set DTMODE bit according to SDIO_TransferMode value */
  /* Set DTDIR bit according to SDIO_TransferDir value */
  /* Set DBCKSIZE bits according to SDIO_DataBlockSize value */
  tmpreg |= (uint32_t)SDIO_DataInitStruct->SDIO_DataBlockSize | SDIO_DataInitStruct->SDIO_TransferDir
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	689a      	ldr	r2, [r3, #8]
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	68db      	ldr	r3, [r3, #12]
 800ac4a:	431a      	orrs	r2, r3
           | SDIO_DataInitStruct->SDIO_TransferMode | SDIO_DataInitStruct->SDIO_DPSM;
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	691b      	ldr	r3, [r3, #16]
 800ac50:	431a      	orrs	r2, r3
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	695b      	ldr	r3, [r3, #20]
 800ac56:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)SDIO_DataInitStruct->SDIO_DataBlockSize | SDIO_DataInitStruct->SDIO_TransferDir
 800ac58:	68fa      	ldr	r2, [r7, #12]
 800ac5a:	4313      	orrs	r3, r2
 800ac5c:	60fb      	str	r3, [r7, #12]

  /* Write to SDIO DCTRL */
  SDIO->DCTRL = tmpreg;
 800ac5e:	4a04      	ldr	r2, [pc, #16]	; (800ac70 <SDIO_DataConfig+0x58>)
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 800ac64:	bf00      	nop
 800ac66:	3714      	adds	r7, #20
 800ac68:	46bd      	mov	sp, r7
 800ac6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac6e:	4770      	bx	lr
 800ac70:	40012c00 	.word	0x40012c00

0800ac74 <SDIO_DataStructInit>:
  * @param  SDIO_DataInitStruct: pointer to an SDIO_DataInitTypeDef structure 
  *         which will be initialized.
  * @retval None
  */
void SDIO_DataStructInit(SDIO_DataInitTypeDef* SDIO_DataInitStruct)
{
 800ac74:	b480      	push	{r7}
 800ac76:	b083      	sub	sp, #12
 800ac78:	af00      	add	r7, sp, #0
 800ac7a:	6078      	str	r0, [r7, #4]
  /* SDIO_DataInitStruct members default value */
  SDIO_DataInitStruct->SDIO_DataTimeOut = 0xFFFFFFFF;
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ac82:	601a      	str	r2, [r3, #0]
  SDIO_DataInitStruct->SDIO_DataLength = 0x00;
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	2200      	movs	r2, #0
 800ac88:	605a      	str	r2, [r3, #4]
  SDIO_DataInitStruct->SDIO_DataBlockSize = SDIO_DataBlockSize_1b;
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	2200      	movs	r2, #0
 800ac8e:	609a      	str	r2, [r3, #8]
  SDIO_DataInitStruct->SDIO_TransferDir = SDIO_TransferDir_ToCard;
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	2200      	movs	r2, #0
 800ac94:	60da      	str	r2, [r3, #12]
  SDIO_DataInitStruct->SDIO_TransferMode = SDIO_TransferMode_Block;  
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	2200      	movs	r2, #0
 800ac9a:	611a      	str	r2, [r3, #16]
  SDIO_DataInitStruct->SDIO_DPSM = SDIO_DPSM_Disable;
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	2200      	movs	r2, #0
 800aca0:	615a      	str	r2, [r3, #20]
}
 800aca2:	bf00      	nop
 800aca4:	370c      	adds	r7, #12
 800aca6:	46bd      	mov	sp, r7
 800aca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acac:	4770      	bx	lr

0800acae <SDIO_GetDataCounter>:
  * @brief  Returns number of remaining data bytes to be transferred.
  * @param  None
  * @retval Number of remaining data bytes to be transferred
  */
uint32_t SDIO_GetDataCounter(void)
{ 
 800acae:	b480      	push	{r7}
 800acb0:	af00      	add	r7, sp, #0
  return SDIO->DCOUNT;
 800acb2:	4b03      	ldr	r3, [pc, #12]	; (800acc0 <SDIO_GetDataCounter+0x12>)
 800acb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 800acb6:	4618      	mov	r0, r3
 800acb8:	46bd      	mov	sp, r7
 800acba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acbe:	4770      	bx	lr
 800acc0:	40012c00 	.word	0x40012c00

0800acc4 <SDIO_ReadData>:
  * @brief  Read one data word from Rx FIFO.
  * @param  None
  * @retval Data received
  */
uint32_t SDIO_ReadData(void)
{ 
 800acc4:	b480      	push	{r7}
 800acc6:	af00      	add	r7, sp, #0
  return SDIO->FIFO;
 800acc8:	4b03      	ldr	r3, [pc, #12]	; (800acd8 <SDIO_ReadData+0x14>)
 800acca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800acce:	4618      	mov	r0, r3
 800acd0:	46bd      	mov	sp, r7
 800acd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acd6:	4770      	bx	lr
 800acd8:	40012c00 	.word	0x40012c00

0800acdc <SDIO_WriteData>:
  * @brief  Write one data word to Tx FIFO.
  * @param  Data: 32-bit data word to write.
  * @retval None
  */
void SDIO_WriteData(uint32_t Data)
{ 
 800acdc:	b480      	push	{r7}
 800acde:	b083      	sub	sp, #12
 800ace0:	af00      	add	r7, sp, #0
 800ace2:	6078      	str	r0, [r7, #4]
  SDIO->FIFO = Data;
 800ace4:	4a04      	ldr	r2, [pc, #16]	; (800acf8 <SDIO_WriteData+0x1c>)
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
}
 800acec:	bf00      	nop
 800acee:	370c      	adds	r7, #12
 800acf0:	46bd      	mov	sp, r7
 800acf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acf6:	4770      	bx	lr
 800acf8:	40012c00 	.word	0x40012c00

0800acfc <SDIO_GetFIFOCount>:
  * @brief  Returns the number of words left to be written to or read from FIFO.	
  * @param  None
  * @retval Remaining number of words.
  */
uint32_t SDIO_GetFIFOCount(void)
{ 
 800acfc:	b480      	push	{r7}
 800acfe:	af00      	add	r7, sp, #0
  return SDIO->FIFOCNT;
 800ad00:	4b03      	ldr	r3, [pc, #12]	; (800ad10 <SDIO_GetFIFOCount+0x14>)
 800ad02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
 800ad04:	4618      	mov	r0, r3
 800ad06:	46bd      	mov	sp, r7
 800ad08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad0c:	4770      	bx	lr
 800ad0e:	bf00      	nop
 800ad10:	40012c00 	.word	0x40012c00

0800ad14 <SDIO_StartSDIOReadWait>:
  * @param  NewState: new state of the Start SDIO Read Wait operation. 
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SDIO_StartSDIOReadWait(FunctionalState NewState)
{ 
 800ad14:	b480      	push	{r7}
 800ad16:	b083      	sub	sp, #12
 800ad18:	af00      	add	r7, sp, #0
 800ad1a:	4603      	mov	r3, r0
 800ad1c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) DCTRL_RWSTART_BB = (uint32_t) NewState;
 800ad1e:	4a04      	ldr	r2, [pc, #16]	; (800ad30 <SDIO_StartSDIOReadWait+0x1c>)
 800ad20:	79fb      	ldrb	r3, [r7, #7]
 800ad22:	6013      	str	r3, [r2, #0]
}
 800ad24:	bf00      	nop
 800ad26:	370c      	adds	r7, #12
 800ad28:	46bd      	mov	sp, r7
 800ad2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad2e:	4770      	bx	lr
 800ad30:	422585a0 	.word	0x422585a0

0800ad34 <SDIO_StopSDIOReadWait>:
  * @param  NewState: new state of the Stop SDIO Read Wait operation. 
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SDIO_StopSDIOReadWait(FunctionalState NewState)
{ 
 800ad34:	b480      	push	{r7}
 800ad36:	b083      	sub	sp, #12
 800ad38:	af00      	add	r7, sp, #0
 800ad3a:	4603      	mov	r3, r0
 800ad3c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) DCTRL_RWSTOP_BB = (uint32_t) NewState;
 800ad3e:	4a04      	ldr	r2, [pc, #16]	; (800ad50 <SDIO_StopSDIOReadWait+0x1c>)
 800ad40:	79fb      	ldrb	r3, [r7, #7]
 800ad42:	6013      	str	r3, [r2, #0]
}
 800ad44:	bf00      	nop
 800ad46:	370c      	adds	r7, #12
 800ad48:	46bd      	mov	sp, r7
 800ad4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad4e:	4770      	bx	lr
 800ad50:	422585a4 	.word	0x422585a4

0800ad54 <SDIO_SetSDIOReadWaitMode>:
  *            @arg SDIO_ReadWaitMode_CLK: Read Wait control by stopping SDIOCLK
  *            @arg SDIO_ReadWaitMode_DATA2: Read Wait control using SDIO_DATA2
  * @retval None
  */
void SDIO_SetSDIOReadWaitMode(uint32_t SDIO_ReadWaitMode)
{
 800ad54:	b480      	push	{r7}
 800ad56:	b083      	sub	sp, #12
 800ad58:	af00      	add	r7, sp, #0
 800ad5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SDIO_READWAIT_MODE(SDIO_ReadWaitMode));
  
  *(__IO uint32_t *) DCTRL_RWMOD_BB = SDIO_ReadWaitMode;
 800ad5c:	4a04      	ldr	r2, [pc, #16]	; (800ad70 <SDIO_SetSDIOReadWaitMode+0x1c>)
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	6013      	str	r3, [r2, #0]
}
 800ad62:	bf00      	nop
 800ad64:	370c      	adds	r7, #12
 800ad66:	46bd      	mov	sp, r7
 800ad68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad6c:	4770      	bx	lr
 800ad6e:	bf00      	nop
 800ad70:	422585a8 	.word	0x422585a8

0800ad74 <SDIO_SetSDIOOperation>:
  * @param  NewState: new state of SDIO specific operation. 
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SDIO_SetSDIOOperation(FunctionalState NewState)
{ 
 800ad74:	b480      	push	{r7}
 800ad76:	b083      	sub	sp, #12
 800ad78:	af00      	add	r7, sp, #0
 800ad7a:	4603      	mov	r3, r0
 800ad7c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) DCTRL_SDIOEN_BB = (uint32_t)NewState;
 800ad7e:	4a04      	ldr	r2, [pc, #16]	; (800ad90 <SDIO_SetSDIOOperation+0x1c>)
 800ad80:	79fb      	ldrb	r3, [r7, #7]
 800ad82:	6013      	str	r3, [r2, #0]
}
 800ad84:	bf00      	nop
 800ad86:	370c      	adds	r7, #12
 800ad88:	46bd      	mov	sp, r7
 800ad8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad8e:	4770      	bx	lr
 800ad90:	422585ac 	.word	0x422585ac

0800ad94 <SDIO_SendSDIOSuspendCmd>:
  * @param  NewState: new state of the SD I/O Mode suspend command.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SDIO_SendSDIOSuspendCmd(FunctionalState NewState)
{ 
 800ad94:	b480      	push	{r7}
 800ad96:	b083      	sub	sp, #12
 800ad98:	af00      	add	r7, sp, #0
 800ad9a:	4603      	mov	r3, r0
 800ad9c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) CMD_SDIOSUSPEND_BB = (uint32_t)NewState;
 800ad9e:	4a04      	ldr	r2, [pc, #16]	; (800adb0 <SDIO_SendSDIOSuspendCmd+0x1c>)
 800ada0:	79fb      	ldrb	r3, [r7, #7]
 800ada2:	6013      	str	r3, [r2, #0]
}
 800ada4:	bf00      	nop
 800ada6:	370c      	adds	r7, #12
 800ada8:	46bd      	mov	sp, r7
 800adaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adae:	4770      	bx	lr
 800adb0:	422581ac 	.word	0x422581ac

0800adb4 <SDIO_CommandCompletionCmd>:
  * @param  NewState: new state of command completion signal. 
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SDIO_CommandCompletionCmd(FunctionalState NewState)
{ 
 800adb4:	b480      	push	{r7}
 800adb6:	b083      	sub	sp, #12
 800adb8:	af00      	add	r7, sp, #0
 800adba:	4603      	mov	r3, r0
 800adbc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) CMD_ENCMDCOMPL_BB = (uint32_t)NewState;
 800adbe:	4a04      	ldr	r2, [pc, #16]	; (800add0 <SDIO_CommandCompletionCmd+0x1c>)
 800adc0:	79fb      	ldrb	r3, [r7, #7]
 800adc2:	6013      	str	r3, [r2, #0]
}
 800adc4:	bf00      	nop
 800adc6:	370c      	adds	r7, #12
 800adc8:	46bd      	mov	sp, r7
 800adca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adce:	4770      	bx	lr
 800add0:	422581b0 	.word	0x422581b0

0800add4 <SDIO_CEATAITCmd>:
  * @param  NewState: new state of CE-ATA interrupt. 
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SDIO_CEATAITCmd(FunctionalState NewState)
{ 
 800add4:	b480      	push	{r7}
 800add6:	b083      	sub	sp, #12
 800add8:	af00      	add	r7, sp, #0
 800adda:	4603      	mov	r3, r0
 800addc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) CMD_NIEN_BB = (uint32_t)((~((uint32_t)NewState)) & ((uint32_t)0x1));
 800adde:	79fb      	ldrb	r3, [r7, #7]
 800ade0:	f003 0301 	and.w	r3, r3, #1
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	bf0c      	ite	eq
 800ade8:	2301      	moveq	r3, #1
 800adea:	2300      	movne	r3, #0
 800adec:	b2da      	uxtb	r2, r3
 800adee:	4b04      	ldr	r3, [pc, #16]	; (800ae00 <SDIO_CEATAITCmd+0x2c>)
 800adf0:	601a      	str	r2, [r3, #0]
}
 800adf2:	bf00      	nop
 800adf4:	370c      	adds	r7, #12
 800adf6:	46bd      	mov	sp, r7
 800adf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adfc:	4770      	bx	lr
 800adfe:	bf00      	nop
 800ae00:	422581b4 	.word	0x422581b4

0800ae04 <SDIO_SendCEATACmd>:
  * @param  NewState: new state of CE-ATA command. 
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SDIO_SendCEATACmd(FunctionalState NewState)
{ 
 800ae04:	b480      	push	{r7}
 800ae06:	b083      	sub	sp, #12
 800ae08:	af00      	add	r7, sp, #0
 800ae0a:	4603      	mov	r3, r0
 800ae0c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) CMD_ATACMD_BB = (uint32_t)NewState;
 800ae0e:	4a04      	ldr	r2, [pc, #16]	; (800ae20 <SDIO_SendCEATACmd+0x1c>)
 800ae10:	79fb      	ldrb	r3, [r7, #7]
 800ae12:	6013      	str	r3, [r2, #0]
}
 800ae14:	bf00      	nop
 800ae16:	370c      	adds	r7, #12
 800ae18:	46bd      	mov	sp, r7
 800ae1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae1e:	4770      	bx	lr
 800ae20:	422581b8 	.word	0x422581b8

0800ae24 <SDIO_DMACmd>:
  * @param  NewState: new state of the selected SDIO DMA request.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SDIO_DMACmd(FunctionalState NewState)
{
 800ae24:	b480      	push	{r7}
 800ae26:	b083      	sub	sp, #12
 800ae28:	af00      	add	r7, sp, #0
 800ae2a:	4603      	mov	r3, r0
 800ae2c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) DCTRL_DMAEN_BB = (uint32_t)NewState;
 800ae2e:	4a04      	ldr	r2, [pc, #16]	; (800ae40 <SDIO_DMACmd+0x1c>)
 800ae30:	79fb      	ldrb	r3, [r7, #7]
 800ae32:	6013      	str	r3, [r2, #0]
}
 800ae34:	bf00      	nop
 800ae36:	370c      	adds	r7, #12
 800ae38:	46bd      	mov	sp, r7
 800ae3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae3e:	4770      	bx	lr
 800ae40:	4225858c 	.word	0x4225858c

0800ae44 <SDIO_ITConfig>:
  * @param  NewState: new state of the specified SDIO interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None 
  */
void SDIO_ITConfig(uint32_t SDIO_IT, FunctionalState NewState)
{
 800ae44:	b480      	push	{r7}
 800ae46:	b083      	sub	sp, #12
 800ae48:	af00      	add	r7, sp, #0
 800ae4a:	6078      	str	r0, [r7, #4]
 800ae4c:	460b      	mov	r3, r1
 800ae4e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SDIO_IT(SDIO_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800ae50:	78fb      	ldrb	r3, [r7, #3]
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d006      	beq.n	800ae64 <SDIO_ITConfig+0x20>
  {
    /* Enable the SDIO interrupts */
    SDIO->MASK |= SDIO_IT;
 800ae56:	4b0a      	ldr	r3, [pc, #40]	; (800ae80 <SDIO_ITConfig+0x3c>)
 800ae58:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ae5a:	4909      	ldr	r1, [pc, #36]	; (800ae80 <SDIO_ITConfig+0x3c>)
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	4313      	orrs	r3, r2
 800ae60:	63cb      	str	r3, [r1, #60]	; 0x3c
  else
  {
    /* Disable the SDIO interrupts */
    SDIO->MASK &= ~SDIO_IT;
  } 
}
 800ae62:	e006      	b.n	800ae72 <SDIO_ITConfig+0x2e>
    SDIO->MASK &= ~SDIO_IT;
 800ae64:	4b06      	ldr	r3, [pc, #24]	; (800ae80 <SDIO_ITConfig+0x3c>)
 800ae66:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	43db      	mvns	r3, r3
 800ae6c:	4904      	ldr	r1, [pc, #16]	; (800ae80 <SDIO_ITConfig+0x3c>)
 800ae6e:	4013      	ands	r3, r2
 800ae70:	63cb      	str	r3, [r1, #60]	; 0x3c
}
 800ae72:	bf00      	nop
 800ae74:	370c      	adds	r7, #12
 800ae76:	46bd      	mov	sp, r7
 800ae78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae7c:	4770      	bx	lr
 800ae7e:	bf00      	nop
 800ae80:	40012c00 	.word	0x40012c00

0800ae84 <SDIO_GetFlagStatus>:
  *            @arg SDIO_FLAG_SDIOIT:   SD I/O interrupt received
  *            @arg SDIO_FLAG_CEATAEND: CE-ATA command completion signal received for CMD61
  * @retval The new state of SDIO_FLAG (SET or RESET).
  */
FlagStatus SDIO_GetFlagStatus(uint32_t SDIO_FLAG)
{ 
 800ae84:	b480      	push	{r7}
 800ae86:	b085      	sub	sp, #20
 800ae88:	af00      	add	r7, sp, #0
 800ae8a:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 800ae8c:	2300      	movs	r3, #0
 800ae8e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_SDIO_FLAG(SDIO_FLAG));
  
  if ((SDIO->STA & SDIO_FLAG) != (uint32_t)RESET)
 800ae90:	4b08      	ldr	r3, [pc, #32]	; (800aeb4 <SDIO_GetFlagStatus+0x30>)
 800ae92:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	4013      	ands	r3, r2
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d002      	beq.n	800aea2 <SDIO_GetFlagStatus+0x1e>
  {
    bitstatus = SET;
 800ae9c:	2301      	movs	r3, #1
 800ae9e:	73fb      	strb	r3, [r7, #15]
 800aea0:	e001      	b.n	800aea6 <SDIO_GetFlagStatus+0x22>
  }
  else
  {
    bitstatus = RESET;
 800aea2:	2300      	movs	r3, #0
 800aea4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800aea6:	7bfb      	ldrb	r3, [r7, #15]
}
 800aea8:	4618      	mov	r0, r3
 800aeaa:	3714      	adds	r7, #20
 800aeac:	46bd      	mov	sp, r7
 800aeae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeb2:	4770      	bx	lr
 800aeb4:	40012c00 	.word	0x40012c00

0800aeb8 <SDIO_ClearFlag>:
  *            @arg SDIO_FLAG_SDIOIT:   SD I/O interrupt received
  *            @arg SDIO_FLAG_CEATAEND: CE-ATA command completion signal received for CMD61
  * @retval None
  */
void SDIO_ClearFlag(uint32_t SDIO_FLAG)
{ 
 800aeb8:	b480      	push	{r7}
 800aeba:	b083      	sub	sp, #12
 800aebc:	af00      	add	r7, sp, #0
 800aebe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SDIO_CLEAR_FLAG(SDIO_FLAG));
   
  SDIO->ICR = SDIO_FLAG;
 800aec0:	4a04      	ldr	r2, [pc, #16]	; (800aed4 <SDIO_ClearFlag+0x1c>)
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	6393      	str	r3, [r2, #56]	; 0x38
}
 800aec6:	bf00      	nop
 800aec8:	370c      	adds	r7, #12
 800aeca:	46bd      	mov	sp, r7
 800aecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aed0:	4770      	bx	lr
 800aed2:	bf00      	nop
 800aed4:	40012c00 	.word	0x40012c00

0800aed8 <SDIO_GetITStatus>:
  *            @arg SDIO_IT_SDIOIT:   SD I/O interrupt received interrupt
  *            @arg SDIO_IT_CEATAEND: CE-ATA command completion signal received for CMD61 interrupt
  * @retval The new state of SDIO_IT (SET or RESET).
  */
ITStatus SDIO_GetITStatus(uint32_t SDIO_IT)
{ 
 800aed8:	b480      	push	{r7}
 800aeda:	b085      	sub	sp, #20
 800aedc:	af00      	add	r7, sp, #0
 800aede:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
 800aee0:	2300      	movs	r3, #0
 800aee2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_SDIO_GET_IT(SDIO_IT));
  if ((SDIO->STA & SDIO_IT) != (uint32_t)RESET)  
 800aee4:	4b08      	ldr	r3, [pc, #32]	; (800af08 <SDIO_GetITStatus+0x30>)
 800aee6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	4013      	ands	r3, r2
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d002      	beq.n	800aef6 <SDIO_GetITStatus+0x1e>
  {
    bitstatus = SET;
 800aef0:	2301      	movs	r3, #1
 800aef2:	73fb      	strb	r3, [r7, #15]
 800aef4:	e001      	b.n	800aefa <SDIO_GetITStatus+0x22>
  }
  else
  {
    bitstatus = RESET;
 800aef6:	2300      	movs	r3, #0
 800aef8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800aefa:	7bfb      	ldrb	r3, [r7, #15]
}
 800aefc:	4618      	mov	r0, r3
 800aefe:	3714      	adds	r7, #20
 800af00:	46bd      	mov	sp, r7
 800af02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af06:	4770      	bx	lr
 800af08:	40012c00 	.word	0x40012c00

0800af0c <SDIO_ClearITPendingBit>:
  *            @arg SDIO_IT_SDIOIT:   SD I/O interrupt received interrupt
  *            @arg SDIO_IT_CEATAEND: CE-ATA command completion signal received for CMD61
  * @retval None
  */
void SDIO_ClearITPendingBit(uint32_t SDIO_IT)
{ 
 800af0c:	b480      	push	{r7}
 800af0e:	b083      	sub	sp, #12
 800af10:	af00      	add	r7, sp, #0
 800af12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SDIO_CLEAR_IT(SDIO_IT));
   
  SDIO->ICR = SDIO_IT;
 800af14:	4a04      	ldr	r2, [pc, #16]	; (800af28 <SDIO_ClearITPendingBit+0x1c>)
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	6393      	str	r3, [r2, #56]	; 0x38
}
 800af1a:	bf00      	nop
 800af1c:	370c      	adds	r7, #12
 800af1e:	46bd      	mov	sp, r7
 800af20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af24:	4770      	bx	lr
 800af26:	bf00      	nop
 800af28:	40012c00 	.word	0x40012c00

0800af2c <SPI_I2S_DeInit>:
  *         is managed by the I2S peripheral clock).
  *             
  * @retval None
  */
void SPI_I2S_DeInit(SPI_TypeDef* SPIx)
{
 800af2c:	b580      	push	{r7, lr}
 800af2e:	b082      	sub	sp, #8
 800af30:	af00      	add	r7, sp, #0
 800af32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));

  if (SPIx == SPI1)
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	4a2e      	ldr	r2, [pc, #184]	; (800aff0 <SPI_I2S_DeInit+0xc4>)
 800af38:	4293      	cmp	r3, r2
 800af3a:	d10a      	bne.n	800af52 <SPI_I2S_DeInit+0x26>
  {
    /* Enable SPI1 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, ENABLE);
 800af3c:	2101      	movs	r1, #1
 800af3e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800af42:	f7fd fe29 	bl	8008b98 <RCC_APB2PeriphResetCmd>
    /* Release SPI1 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, DISABLE);
 800af46:	2100      	movs	r1, #0
 800af48:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800af4c:	f7fd fe24 	bl	8008b98 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, ENABLE);
      /* Release SPI6 from reset state */
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, DISABLE);
    }
  }
}
 800af50:	e049      	b.n	800afe6 <SPI_I2S_DeInit+0xba>
  else if (SPIx == SPI2)
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	4a27      	ldr	r2, [pc, #156]	; (800aff4 <SPI_I2S_DeInit+0xc8>)
 800af56:	4293      	cmp	r3, r2
 800af58:	d10a      	bne.n	800af70 <SPI_I2S_DeInit+0x44>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, ENABLE);
 800af5a:	2101      	movs	r1, #1
 800af5c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800af60:	f7fd fdfa 	bl	8008b58 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, DISABLE);
 800af64:	2100      	movs	r1, #0
 800af66:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800af6a:	f7fd fdf5 	bl	8008b58 <RCC_APB1PeriphResetCmd>
}
 800af6e:	e03a      	b.n	800afe6 <SPI_I2S_DeInit+0xba>
  else if (SPIx == SPI3)
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	4a21      	ldr	r2, [pc, #132]	; (800aff8 <SPI_I2S_DeInit+0xcc>)
 800af74:	4293      	cmp	r3, r2
 800af76:	d10a      	bne.n	800af8e <SPI_I2S_DeInit+0x62>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
 800af78:	2101      	movs	r1, #1
 800af7a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800af7e:	f7fd fdeb 	bl	8008b58 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, DISABLE);
 800af82:	2100      	movs	r1, #0
 800af84:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800af88:	f7fd fde6 	bl	8008b58 <RCC_APB1PeriphResetCmd>
}
 800af8c:	e02b      	b.n	800afe6 <SPI_I2S_DeInit+0xba>
  else if (SPIx == SPI4)
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	4a1a      	ldr	r2, [pc, #104]	; (800affc <SPI_I2S_DeInit+0xd0>)
 800af92:	4293      	cmp	r3, r2
 800af94:	d10a      	bne.n	800afac <SPI_I2S_DeInit+0x80>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI4, ENABLE);
 800af96:	2101      	movs	r1, #1
 800af98:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800af9c:	f7fd fdfc 	bl	8008b98 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI4, DISABLE);
 800afa0:	2100      	movs	r1, #0
 800afa2:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800afa6:	f7fd fdf7 	bl	8008b98 <RCC_APB2PeriphResetCmd>
}
 800afaa:	e01c      	b.n	800afe6 <SPI_I2S_DeInit+0xba>
  else if (SPIx == SPI5)
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	4a14      	ldr	r2, [pc, #80]	; (800b000 <SPI_I2S_DeInit+0xd4>)
 800afb0:	4293      	cmp	r3, r2
 800afb2:	d10a      	bne.n	800afca <SPI_I2S_DeInit+0x9e>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI5, ENABLE);
 800afb4:	2101      	movs	r1, #1
 800afb6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800afba:	f7fd fded 	bl	8008b98 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI5, DISABLE);
 800afbe:	2100      	movs	r1, #0
 800afc0:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800afc4:	f7fd fde8 	bl	8008b98 <RCC_APB2PeriphResetCmd>
}
 800afc8:	e00d      	b.n	800afe6 <SPI_I2S_DeInit+0xba>
    if (SPIx == SPI6)
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	4a0d      	ldr	r2, [pc, #52]	; (800b004 <SPI_I2S_DeInit+0xd8>)
 800afce:	4293      	cmp	r3, r2
 800afd0:	d109      	bne.n	800afe6 <SPI_I2S_DeInit+0xba>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, ENABLE);
 800afd2:	2101      	movs	r1, #1
 800afd4:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800afd8:	f7fd fdde 	bl	8008b98 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, DISABLE);
 800afdc:	2100      	movs	r1, #0
 800afde:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800afe2:	f7fd fdd9 	bl	8008b98 <RCC_APB2PeriphResetCmd>
}
 800afe6:	bf00      	nop
 800afe8:	3708      	adds	r7, #8
 800afea:	46bd      	mov	sp, r7
 800afec:	bd80      	pop	{r7, pc}
 800afee:	bf00      	nop
 800aff0:	40013000 	.word	0x40013000
 800aff4:	40003800 	.word	0x40003800
 800aff8:	40003c00 	.word	0x40003c00
 800affc:	40013400 	.word	0x40013400
 800b000:	40015000 	.word	0x40015000
 800b004:	40015400 	.word	0x40015400

0800b008 <SPI_Init>:
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure that
  *         contains the configuration information for the specified SPI peripheral.
  * @retval None
  */
void SPI_Init(SPI_TypeDef* SPIx, SPI_InitTypeDef* SPI_InitStruct)
{
 800b008:	b480      	push	{r7}
 800b00a:	b085      	sub	sp, #20
 800b00c:	af00      	add	r7, sp, #0
 800b00e:	6078      	str	r0, [r7, #4]
 800b010:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 800b012:	2300      	movs	r3, #0
 800b014:	81fb      	strh	r3, [r7, #14]
  assert_param(IS_SPI_FIRST_BIT(SPI_InitStruct->SPI_FirstBit));
  assert_param(IS_SPI_CRC_POLYNOMIAL(SPI_InitStruct->SPI_CRCPolynomial));

/*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	881b      	ldrh	r3, [r3, #0]
 800b01a:	81fb      	strh	r3, [r7, #14]
  /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, MSTR, CPOL and CPHA bits */
  tmpreg &= CR1_CLEAR_MASK;
 800b01c:	89fb      	ldrh	r3, [r7, #14]
 800b01e:	f403 5341 	and.w	r3, r3, #12352	; 0x3040
 800b022:	81fb      	strh	r3, [r7, #14]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 800b024:	683b      	ldr	r3, [r7, #0]
 800b026:	881a      	ldrh	r2, [r3, #0]
 800b028:	683b      	ldr	r3, [r7, #0]
 800b02a:	885b      	ldrh	r3, [r3, #2]
 800b02c:	4313      	orrs	r3, r2
 800b02e:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 800b030:	683b      	ldr	r3, [r7, #0]
 800b032:	889b      	ldrh	r3, [r3, #4]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 800b034:	4313      	orrs	r3, r2
 800b036:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 800b038:	683b      	ldr	r3, [r7, #0]
 800b03a:	88db      	ldrh	r3, [r3, #6]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 800b03c:	4313      	orrs	r3, r2
 800b03e:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 800b040:	683b      	ldr	r3, [r7, #0]
 800b042:	891b      	ldrh	r3, [r3, #8]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 800b044:	4313      	orrs	r3, r2
 800b046:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 800b048:	683b      	ldr	r3, [r7, #0]
 800b04a:	895b      	ldrh	r3, [r3, #10]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 800b04c:	4313      	orrs	r3, r2
 800b04e:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 800b050:	683b      	ldr	r3, [r7, #0]
 800b052:	899b      	ldrh	r3, [r3, #12]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 800b054:	4313      	orrs	r3, r2
 800b056:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 800b058:	683b      	ldr	r3, [r7, #0]
 800b05a:	89db      	ldrh	r3, [r3, #14]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 800b05c:	4313      	orrs	r3, r2
 800b05e:	b29a      	uxth	r2, r3
 800b060:	89fb      	ldrh	r3, [r7, #14]
 800b062:	4313      	orrs	r3, r2
 800b064:	81fb      	strh	r3, [r7, #14]
  /* Write to SPIx CR1 */
  SPIx->CR1 = tmpreg;
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	89fa      	ldrh	r2, [r7, #14]
 800b06a:	801a      	strh	r2, [r3, #0]

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SMOD);
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	8b9b      	ldrh	r3, [r3, #28]
 800b070:	b29b      	uxth	r3, r3
 800b072:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b076:	b29a      	uxth	r2, r3
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	839a      	strh	r2, [r3, #28]
/*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Write to SPIx CRCPOLY */
  SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 800b07c:	683b      	ldr	r3, [r7, #0]
 800b07e:	8a1a      	ldrh	r2, [r3, #16]
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	821a      	strh	r2, [r3, #16]
}
 800b084:	bf00      	nop
 800b086:	3714      	adds	r7, #20
 800b088:	46bd      	mov	sp, r7
 800b08a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b08e:	4770      	bx	lr

0800b090 <I2S_Init>:
  *         to the value of the the source clock frequency (in Hz).
  *  
  * @retval None
  */
void I2S_Init(SPI_TypeDef* SPIx, I2S_InitTypeDef* I2S_InitStruct)
{
 800b090:	b480      	push	{r7}
 800b092:	b08b      	sub	sp, #44	; 0x2c
 800b094:	af00      	add	r7, sp, #0
 800b096:	6078      	str	r0, [r7, #4]
 800b098:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0, i2sdiv = 2, i2sodd = 0, packetlength = 1;
 800b09a:	2300      	movs	r3, #0
 800b09c:	837b      	strh	r3, [r7, #26]
 800b09e:	2302      	movs	r3, #2
 800b0a0:	84fb      	strh	r3, [r7, #38]	; 0x26
 800b0a2:	2300      	movs	r3, #0
 800b0a4:	84bb      	strh	r3, [r7, #36]	; 0x24
 800b0a6:	2301      	movs	r3, #1
 800b0a8:	847b      	strh	r3, [r7, #34]	; 0x22
  uint32_t tmp = 0, i2sclk = 0;
 800b0aa:	2300      	movs	r3, #0
 800b0ac:	61fb      	str	r3, [r7, #28]
 800b0ae:	2300      	movs	r3, #0
 800b0b0:	617b      	str	r3, [r7, #20]
#ifndef I2S_EXTERNAL_CLOCK_VAL
  uint32_t pllm = 0, plln = 0, pllr = 0;
 800b0b2:	2300      	movs	r3, #0
 800b0b4:	613b      	str	r3, [r7, #16]
 800b0b6:	2300      	movs	r3, #0
 800b0b8:	60fb      	str	r3, [r7, #12]
 800b0ba:	2300      	movs	r3, #0
 800b0bc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_I2S_AUDIO_FREQ(I2S_InitStruct->I2S_AudioFreq));
  assert_param(IS_I2S_CPOL(I2S_InitStruct->I2S_CPOL));  

/*----------------------- SPIx I2SCFGR & I2SPR Configuration -----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  SPIx->I2SCFGR &= I2SCFGR_CLEAR_MASK; 
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	8b9b      	ldrh	r3, [r3, #28]
 800b0c2:	b29b      	uxth	r3, r3
 800b0c4:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800b0c8:	f023 030f 	bic.w	r3, r3, #15
 800b0cc:	b29a      	uxth	r2, r3
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	839a      	strh	r2, [r3, #28]
  SPIx->I2SPR = 0x0002;
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	2202      	movs	r2, #2
 800b0d6:	841a      	strh	r2, [r3, #32]
  
  /* Get the I2SCFGR register value */
  tmpreg = SPIx->I2SCFGR;
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	8b9b      	ldrh	r3, [r3, #28]
 800b0dc:	837b      	strh	r3, [r7, #26]
  
  /* If the default value has to be written, reinitialize i2sdiv and i2sodd*/
  if(I2S_InitStruct->I2S_AudioFreq == I2S_AudioFreq_Default)
 800b0de:	683b      	ldr	r3, [r7, #0]
 800b0e0:	689b      	ldr	r3, [r3, #8]
 800b0e2:	2b02      	cmp	r3, #2
 800b0e4:	d104      	bne.n	800b0f0 <I2S_Init+0x60>
  {
    i2sodd = (uint16_t)0;
 800b0e6:	2300      	movs	r3, #0
 800b0e8:	84bb      	strh	r3, [r7, #36]	; 0x24
    i2sdiv = (uint16_t)2;   
 800b0ea:	2302      	movs	r3, #2
 800b0ec:	84fb      	strh	r3, [r7, #38]	; 0x26
 800b0ee:	e06d      	b.n	800b1cc <I2S_Init+0x13c>
  }
  /* If the requested audio frequency is not the default, compute the prescaler */
  else
  {
    /* Check the frame length (For the Prescaler computing) *******************/
    if(I2S_InitStruct->I2S_DataFormat == I2S_DataFormat_16b)
 800b0f0:	683b      	ldr	r3, [r7, #0]
 800b0f2:	889b      	ldrh	r3, [r3, #4]
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	d102      	bne.n	800b0fe <I2S_Init+0x6e>
    {
      /* Packet length is 16 bits */
      packetlength = 1;
 800b0f8:	2301      	movs	r3, #1
 800b0fa:	847b      	strh	r3, [r7, #34]	; 0x22
 800b0fc:	e001      	b.n	800b102 <I2S_Init+0x72>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 2;
 800b0fe:	2302      	movs	r3, #2
 800b100:	847b      	strh	r3, [r7, #34]	; 0x22
    /* Set the I2S clock to the external clock  value */
    i2sclk = I2S_EXTERNAL_CLOCK_VAL;

  #else /* There is no define for External I2S clock source */
    /* Set PLLI2S as I2S clock source */
    if ((RCC->CFGR & RCC_CFGR_I2SSRC) != 0)
 800b102:	4b4b      	ldr	r3, [pc, #300]	; (800b230 <I2S_Init+0x1a0>)
 800b104:	689b      	ldr	r3, [r3, #8]
 800b106:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	d005      	beq.n	800b11a <I2S_Init+0x8a>
    {
      RCC->CFGR &= ~(uint32_t)RCC_CFGR_I2SSRC;
 800b10e:	4b48      	ldr	r3, [pc, #288]	; (800b230 <I2S_Init+0x1a0>)
 800b110:	689b      	ldr	r3, [r3, #8]
 800b112:	4a47      	ldr	r2, [pc, #284]	; (800b230 <I2S_Init+0x1a0>)
 800b114:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800b118:	6093      	str	r3, [r2, #8]
    }    
    
    /* Get the PLLI2SN value */
    plln = (uint32_t)(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6) & \
 800b11a:	4b45      	ldr	r3, [pc, #276]	; (800b230 <I2S_Init+0x1a0>)
 800b11c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b120:	099b      	lsrs	r3, r3, #6
 800b122:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b126:	60fb      	str	r3, [r7, #12]
                      (RCC_PLLI2SCFGR_PLLI2SN >> 6));
    
    /* Get the PLLI2SR value */
    pllr = (uint32_t)(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28) & \
 800b128:	4b41      	ldr	r3, [pc, #260]	; (800b230 <I2S_Init+0x1a0>)
 800b12a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b12e:	0f1b      	lsrs	r3, r3, #28
 800b130:	f003 0307 	and.w	r3, r3, #7
 800b134:	60bb      	str	r3, [r7, #8]
                      (RCC_PLLI2SCFGR_PLLI2SR >> 28));
    
    /* Get the PLLM value */
    pllm = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM);      
 800b136:	4b3e      	ldr	r3, [pc, #248]	; (800b230 <I2S_Init+0x1a0>)
 800b138:	685b      	ldr	r3, [r3, #4]
 800b13a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b13e:	613b      	str	r3, [r7, #16]

    /* Get the I2S source clock value */
    i2sclk = (uint32_t)(((HSE_VALUE / pllm) * plln) / pllr);
 800b140:	4a3c      	ldr	r2, [pc, #240]	; (800b234 <I2S_Init+0x1a4>)
 800b142:	693b      	ldr	r3, [r7, #16]
 800b144:	fbb2 f3f3 	udiv	r3, r2, r3
 800b148:	68fa      	ldr	r2, [r7, #12]
 800b14a:	fb02 f203 	mul.w	r2, r2, r3
 800b14e:	68bb      	ldr	r3, [r7, #8]
 800b150:	fbb2 f3f3 	udiv	r3, r2, r3
 800b154:	617b      	str	r3, [r7, #20]
  #endif /* I2S_EXTERNAL_CLOCK_VAL */
    
    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if(I2S_InitStruct->I2S_MCLKOutput == I2S_MCLKOutput_Enable)
 800b156:	683b      	ldr	r3, [r7, #0]
 800b158:	88db      	ldrh	r3, [r3, #6]
 800b15a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b15e:	d10f      	bne.n	800b180 <I2S_Init+0xf0>
    {
      /* MCLK output is enabled */
      tmp = (uint16_t)(((((i2sclk / 256) * 10) / I2S_InitStruct->I2S_AudioFreq)) + 5);
 800b160:	697b      	ldr	r3, [r7, #20]
 800b162:	0a1a      	lsrs	r2, r3, #8
 800b164:	4613      	mov	r3, r2
 800b166:	009b      	lsls	r3, r3, #2
 800b168:	4413      	add	r3, r2
 800b16a:	005b      	lsls	r3, r3, #1
 800b16c:	461a      	mov	r2, r3
 800b16e:	683b      	ldr	r3, [r7, #0]
 800b170:	689b      	ldr	r3, [r3, #8]
 800b172:	fbb2 f3f3 	udiv	r3, r2, r3
 800b176:	b29b      	uxth	r3, r3
 800b178:	3305      	adds	r3, #5
 800b17a:	b29b      	uxth	r3, r3
 800b17c:	61fb      	str	r3, [r7, #28]
 800b17e:	e012      	b.n	800b1a6 <I2S_Init+0x116>
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint16_t)(((((i2sclk / (32 * packetlength)) *10 ) / I2S_InitStruct->I2S_AudioFreq)) + 5);
 800b180:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b182:	015b      	lsls	r3, r3, #5
 800b184:	461a      	mov	r2, r3
 800b186:	697b      	ldr	r3, [r7, #20]
 800b188:	fbb3 f2f2 	udiv	r2, r3, r2
 800b18c:	4613      	mov	r3, r2
 800b18e:	009b      	lsls	r3, r3, #2
 800b190:	4413      	add	r3, r2
 800b192:	005b      	lsls	r3, r3, #1
 800b194:	461a      	mov	r2, r3
 800b196:	683b      	ldr	r3, [r7, #0]
 800b198:	689b      	ldr	r3, [r3, #8]
 800b19a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b19e:	b29b      	uxth	r3, r3
 800b1a0:	3305      	adds	r3, #5
 800b1a2:	b29b      	uxth	r3, r3
 800b1a4:	61fb      	str	r3, [r7, #28]
    }
    
    /* Remove the flatting point */
    tmp = tmp / 10;  
 800b1a6:	69fb      	ldr	r3, [r7, #28]
 800b1a8:	4a23      	ldr	r2, [pc, #140]	; (800b238 <I2S_Init+0x1a8>)
 800b1aa:	fba2 2303 	umull	r2, r3, r2, r3
 800b1ae:	08db      	lsrs	r3, r3, #3
 800b1b0:	61fb      	str	r3, [r7, #28]
      
    /* Check the parity of the divider */
    i2sodd = (uint16_t)(tmp & (uint16_t)0x0001);
 800b1b2:	69fb      	ldr	r3, [r7, #28]
 800b1b4:	b29b      	uxth	r3, r3
 800b1b6:	f003 0301 	and.w	r3, r3, #1
 800b1ba:	84bb      	strh	r3, [r7, #36]	; 0x24
   
    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint16_t)((tmp - i2sodd) / 2);
 800b1bc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b1be:	69fa      	ldr	r2, [r7, #28]
 800b1c0:	1ad3      	subs	r3, r2, r3
 800b1c2:	085b      	lsrs	r3, r3, #1
 800b1c4:	84fb      	strh	r3, [r7, #38]	; 0x26
   
    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint16_t) (i2sodd << 8);
 800b1c6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b1c8:	021b      	lsls	r3, r3, #8
 800b1ca:	84bb      	strh	r3, [r7, #36]	; 0x24
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2) || (i2sdiv > 0xFF))
 800b1cc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b1ce:	2b01      	cmp	r3, #1
 800b1d0:	d902      	bls.n	800b1d8 <I2S_Init+0x148>
 800b1d2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b1d4:	2bff      	cmp	r3, #255	; 0xff
 800b1d6:	d903      	bls.n	800b1e0 <I2S_Init+0x150>
  {
    /* Set the default values */
    i2sdiv = 2;
 800b1d8:	2302      	movs	r3, #2
 800b1da:	84fb      	strh	r3, [r7, #38]	; 0x26
    i2sodd = 0;
 800b1dc:	2300      	movs	r3, #0
 800b1de:	84bb      	strh	r3, [r7, #36]	; 0x24
  }

  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)((uint16_t)i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));
 800b1e0:	683b      	ldr	r3, [r7, #0]
 800b1e2:	88da      	ldrh	r2, [r3, #6]
 800b1e4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b1e6:	4313      	orrs	r3, r2
 800b1e8:	b29a      	uxth	r2, r3
 800b1ea:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b1ec:	4313      	orrs	r3, r2
 800b1ee:	b29a      	uxth	r2, r3
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	841a      	strh	r2, [r3, #32]
 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(I2S_InitStruct->I2S_Mode | \
 800b1f4:	683b      	ldr	r3, [r7, #0]
 800b1f6:	881a      	ldrh	r2, [r3, #0]
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
 800b1f8:	683b      	ldr	r3, [r7, #0]
 800b1fa:	8859      	ldrh	r1, [r3, #2]
 800b1fc:	683b      	ldr	r3, [r7, #0]
 800b1fe:	8898      	ldrh	r0, [r3, #4]
                  (uint16_t)I2S_InitStruct->I2S_CPOL))));
 800b200:	683b      	ldr	r3, [r7, #0]
 800b202:	899b      	ldrh	r3, [r3, #12]
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
 800b204:	4303      	orrs	r3, r0
 800b206:	b29b      	uxth	r3, r3
 800b208:	430b      	orrs	r3, r1
 800b20a:	b29b      	uxth	r3, r3
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(I2S_InitStruct->I2S_Mode | \
 800b20c:	4313      	orrs	r3, r2
 800b20e:	b29a      	uxth	r2, r3
 800b210:	8b7b      	ldrh	r3, [r7, #26]
 800b212:	4313      	orrs	r3, r2
 800b214:	b29b      	uxth	r3, r3
 800b216:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800b21a:	837b      	strh	r3, [r7, #26]
 
  /* Write to SPIx I2SCFGR */  
  SPIx->I2SCFGR = tmpreg;
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	8b7a      	ldrh	r2, [r7, #26]
 800b220:	839a      	strh	r2, [r3, #28]
}
 800b222:	bf00      	nop
 800b224:	372c      	adds	r7, #44	; 0x2c
 800b226:	46bd      	mov	sp, r7
 800b228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b22c:	4770      	bx	lr
 800b22e:	bf00      	nop
 800b230:	40023800 	.word	0x40023800
 800b234:	007a1200 	.word	0x007a1200
 800b238:	cccccccd 	.word	0xcccccccd

0800b23c <SPI_StructInit>:
  * @brief  Fills each SPI_InitStruct member with its default value.
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure which will be initialized.
  * @retval None
  */
void SPI_StructInit(SPI_InitTypeDef* SPI_InitStruct)
{
 800b23c:	b480      	push	{r7}
 800b23e:	b083      	sub	sp, #12
 800b240:	af00      	add	r7, sp, #0
 800b242:	6078      	str	r0, [r7, #4]
/*--------------- Reset SPI init structure parameters values -----------------*/
  /* Initialize the SPI_Direction member */
  SPI_InitStruct->SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	2200      	movs	r2, #0
 800b248:	801a      	strh	r2, [r3, #0]
  /* initialize the SPI_Mode member */
  SPI_InitStruct->SPI_Mode = SPI_Mode_Slave;
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	2200      	movs	r2, #0
 800b24e:	805a      	strh	r2, [r3, #2]
  /* initialize the SPI_DataSize member */
  SPI_InitStruct->SPI_DataSize = SPI_DataSize_8b;
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	2200      	movs	r2, #0
 800b254:	809a      	strh	r2, [r3, #4]
  /* Initialize the SPI_CPOL member */
  SPI_InitStruct->SPI_CPOL = SPI_CPOL_Low;
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	2200      	movs	r2, #0
 800b25a:	80da      	strh	r2, [r3, #6]
  /* Initialize the SPI_CPHA member */
  SPI_InitStruct->SPI_CPHA = SPI_CPHA_1Edge;
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	2200      	movs	r2, #0
 800b260:	811a      	strh	r2, [r3, #8]
  /* Initialize the SPI_NSS member */
  SPI_InitStruct->SPI_NSS = SPI_NSS_Hard;
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	2200      	movs	r2, #0
 800b266:	815a      	strh	r2, [r3, #10]
  /* Initialize the SPI_BaudRatePrescaler member */
  SPI_InitStruct->SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_2;
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	2200      	movs	r2, #0
 800b26c:	819a      	strh	r2, [r3, #12]
  /* Initialize the SPI_FirstBit member */
  SPI_InitStruct->SPI_FirstBit = SPI_FirstBit_MSB;
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	2200      	movs	r2, #0
 800b272:	81da      	strh	r2, [r3, #14]
  /* Initialize the SPI_CRCPolynomial member */
  SPI_InitStruct->SPI_CRCPolynomial = 7;
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	2207      	movs	r2, #7
 800b278:	821a      	strh	r2, [r3, #16]
}
 800b27a:	bf00      	nop
 800b27c:	370c      	adds	r7, #12
 800b27e:	46bd      	mov	sp, r7
 800b280:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b284:	4770      	bx	lr

0800b286 <I2S_StructInit>:
  * @brief  Fills each I2S_InitStruct member with its default value.
  * @param  I2S_InitStruct: pointer to a I2S_InitTypeDef structure which will be initialized.
  * @retval None
  */
void I2S_StructInit(I2S_InitTypeDef* I2S_InitStruct)
{
 800b286:	b480      	push	{r7}
 800b288:	b083      	sub	sp, #12
 800b28a:	af00      	add	r7, sp, #0
 800b28c:	6078      	str	r0, [r7, #4]
/*--------------- Reset I2S init structure parameters values -----------------*/
  /* Initialize the I2S_Mode member */
  I2S_InitStruct->I2S_Mode = I2S_Mode_SlaveTx;
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	2200      	movs	r2, #0
 800b292:	801a      	strh	r2, [r3, #0]
  
  /* Initialize the I2S_Standard member */
  I2S_InitStruct->I2S_Standard = I2S_Standard_Phillips;
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	2200      	movs	r2, #0
 800b298:	805a      	strh	r2, [r3, #2]
  
  /* Initialize the I2S_DataFormat member */
  I2S_InitStruct->I2S_DataFormat = I2S_DataFormat_16b;
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	2200      	movs	r2, #0
 800b29e:	809a      	strh	r2, [r3, #4]
  
  /* Initialize the I2S_MCLKOutput member */
  I2S_InitStruct->I2S_MCLKOutput = I2S_MCLKOutput_Disable;
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	2200      	movs	r2, #0
 800b2a4:	80da      	strh	r2, [r3, #6]
  
  /* Initialize the I2S_AudioFreq member */
  I2S_InitStruct->I2S_AudioFreq = I2S_AudioFreq_Default;
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	2202      	movs	r2, #2
 800b2aa:	609a      	str	r2, [r3, #8]
  
  /* Initialize the I2S_CPOL member */
  I2S_InitStruct->I2S_CPOL = I2S_CPOL_Low;
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	2200      	movs	r2, #0
 800b2b0:	819a      	strh	r2, [r3, #12]
}
 800b2b2:	bf00      	nop
 800b2b4:	370c      	adds	r7, #12
 800b2b6:	46bd      	mov	sp, r7
 800b2b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2bc:	4770      	bx	lr

0800b2be <SPI_Cmd>:
  * @param  NewState: new state of the SPIx peripheral. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 800b2be:	b480      	push	{r7}
 800b2c0:	b083      	sub	sp, #12
 800b2c2:	af00      	add	r7, sp, #0
 800b2c4:	6078      	str	r0, [r7, #4]
 800b2c6:	460b      	mov	r3, r1
 800b2c8:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800b2ca:	78fb      	ldrb	r3, [r7, #3]
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	d008      	beq.n	800b2e2 <SPI_Cmd+0x24>
  {
    /* Enable the selected SPI peripheral */
    SPIx->CR1 |= SPI_CR1_SPE;
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	881b      	ldrh	r3, [r3, #0]
 800b2d4:	b29b      	uxth	r3, r3
 800b2d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b2da:	b29a      	uxth	r2, r3
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the selected SPI peripheral */
    SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_SPE);
  }
}
 800b2e0:	e007      	b.n	800b2f2 <SPI_Cmd+0x34>
    SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_SPE);
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	881b      	ldrh	r3, [r3, #0]
 800b2e6:	b29b      	uxth	r3, r3
 800b2e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b2ec:	b29a      	uxth	r2, r3
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	801a      	strh	r2, [r3, #0]
}
 800b2f2:	bf00      	nop
 800b2f4:	370c      	adds	r7, #12
 800b2f6:	46bd      	mov	sp, r7
 800b2f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2fc:	4770      	bx	lr

0800b2fe <I2S_Cmd>:
  * @param  NewState: new state of the SPIx peripheral. 
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2S_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 800b2fe:	b480      	push	{r7}
 800b300:	b083      	sub	sp, #12
 800b302:	af00      	add	r7, sp, #0
 800b304:	6078      	str	r0, [r7, #4]
 800b306:	460b      	mov	r3, r1
 800b308:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_23_PERIPH_EXT(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800b30a:	78fb      	ldrb	r3, [r7, #3]
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d008      	beq.n	800b322 <I2S_Cmd+0x24>
  {
    /* Enable the selected SPI peripheral (in I2S mode) */
    SPIx->I2SCFGR |= SPI_I2SCFGR_I2SE;
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	8b9b      	ldrh	r3, [r3, #28]
 800b314:	b29b      	uxth	r3, r3
 800b316:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b31a:	b29a      	uxth	r2, r3
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	839a      	strh	r2, [r3, #28]
  else
  {
    /* Disable the selected SPI peripheral in I2S mode */
    SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SE);
  }
}
 800b320:	e007      	b.n	800b332 <I2S_Cmd+0x34>
    SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SE);
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	8b9b      	ldrh	r3, [r3, #28]
 800b326:	b29b      	uxth	r3, r3
 800b328:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b32c:	b29a      	uxth	r2, r3
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	839a      	strh	r2, [r3, #28]
}
 800b332:	bf00      	nop
 800b334:	370c      	adds	r7, #12
 800b336:	46bd      	mov	sp, r7
 800b338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b33c:	4770      	bx	lr

0800b33e <SPI_DataSizeConfig>:
  *            @arg SPI_DataSize_16b: Set data frame format to 16bit
  *            @arg SPI_DataSize_8b: Set data frame format to 8bit
  * @retval None
  */
void SPI_DataSizeConfig(SPI_TypeDef* SPIx, uint16_t SPI_DataSize)
{
 800b33e:	b480      	push	{r7}
 800b340:	b083      	sub	sp, #12
 800b342:	af00      	add	r7, sp, #0
 800b344:	6078      	str	r0, [r7, #4]
 800b346:	460b      	mov	r3, r1
 800b348:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_DATASIZE(SPI_DataSize));
  /* Clear DFF bit */
  SPIx->CR1 &= (uint16_t)~SPI_DataSize_16b;
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	881b      	ldrh	r3, [r3, #0]
 800b34e:	b29b      	uxth	r3, r3
 800b350:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b354:	b29a      	uxth	r2, r3
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	801a      	strh	r2, [r3, #0]
  /* Set new DFF bit value */
  SPIx->CR1 |= SPI_DataSize;
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	881b      	ldrh	r3, [r3, #0]
 800b35e:	b29a      	uxth	r2, r3
 800b360:	887b      	ldrh	r3, [r7, #2]
 800b362:	4313      	orrs	r3, r2
 800b364:	b29a      	uxth	r2, r3
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	801a      	strh	r2, [r3, #0]
}
 800b36a:	bf00      	nop
 800b36c:	370c      	adds	r7, #12
 800b36e:	46bd      	mov	sp, r7
 800b370:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b374:	4770      	bx	lr

0800b376 <SPI_BiDirectionalLineConfig>:
  *            @arg SPI_Direction_Tx: Selects Tx transmission direction
  *            @arg SPI_Direction_Rx: Selects Rx receive direction
  * @retval None
  */
void SPI_BiDirectionalLineConfig(SPI_TypeDef* SPIx, uint16_t SPI_Direction)
{
 800b376:	b480      	push	{r7}
 800b378:	b083      	sub	sp, #12
 800b37a:	af00      	add	r7, sp, #0
 800b37c:	6078      	str	r0, [r7, #4]
 800b37e:	460b      	mov	r3, r1
 800b380:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_DIRECTION(SPI_Direction));
  if (SPI_Direction == SPI_Direction_Tx)
 800b382:	887b      	ldrh	r3, [r7, #2]
 800b384:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b388:	d108      	bne.n	800b39c <SPI_BiDirectionalLineConfig+0x26>
  {
    /* Set the Tx only mode */
    SPIx->CR1 |= SPI_Direction_Tx;
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	881b      	ldrh	r3, [r3, #0]
 800b38e:	b29b      	uxth	r3, r3
 800b390:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b394:	b29a      	uxth	r2, r3
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Set the Rx only mode */
    SPIx->CR1 &= SPI_Direction_Rx;
  }
}
 800b39a:	e007      	b.n	800b3ac <SPI_BiDirectionalLineConfig+0x36>
    SPIx->CR1 &= SPI_Direction_Rx;
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	881b      	ldrh	r3, [r3, #0]
 800b3a0:	b29b      	uxth	r3, r3
 800b3a2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b3a6:	b29a      	uxth	r2, r3
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	801a      	strh	r2, [r3, #0]
}
 800b3ac:	bf00      	nop
 800b3ae:	370c      	adds	r7, #12
 800b3b0:	46bd      	mov	sp, r7
 800b3b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3b6:	4770      	bx	lr

0800b3b8 <SPI_NSSInternalSoftwareConfig>:
  *            @arg SPI_NSSInternalSoft_Set: Set NSS pin internally
  *            @arg SPI_NSSInternalSoft_Reset: Reset NSS pin internally
  * @retval None
  */
void SPI_NSSInternalSoftwareConfig(SPI_TypeDef* SPIx, uint16_t SPI_NSSInternalSoft)
{
 800b3b8:	b480      	push	{r7}
 800b3ba:	b083      	sub	sp, #12
 800b3bc:	af00      	add	r7, sp, #0
 800b3be:	6078      	str	r0, [r7, #4]
 800b3c0:	460b      	mov	r3, r1
 800b3c2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_NSS_INTERNAL(SPI_NSSInternalSoft));
  if (SPI_NSSInternalSoft != SPI_NSSInternalSoft_Reset)
 800b3c4:	887b      	ldrh	r3, [r7, #2]
 800b3c6:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 800b3ca:	4293      	cmp	r3, r2
 800b3cc:	d008      	beq.n	800b3e0 <SPI_NSSInternalSoftwareConfig+0x28>
  {
    /* Set NSS pin internally by software */
    SPIx->CR1 |= SPI_NSSInternalSoft_Set;
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	881b      	ldrh	r3, [r3, #0]
 800b3d2:	b29b      	uxth	r3, r3
 800b3d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b3d8:	b29a      	uxth	r2, r3
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Reset NSS pin internally by software */
    SPIx->CR1 &= SPI_NSSInternalSoft_Reset;
  }
}
 800b3de:	e007      	b.n	800b3f0 <SPI_NSSInternalSoftwareConfig+0x38>
    SPIx->CR1 &= SPI_NSSInternalSoft_Reset;
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	881b      	ldrh	r3, [r3, #0]
 800b3e4:	b29b      	uxth	r3, r3
 800b3e6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b3ea:	b29a      	uxth	r2, r3
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	801a      	strh	r2, [r3, #0]
}
 800b3f0:	bf00      	nop
 800b3f2:	370c      	adds	r7, #12
 800b3f4:	46bd      	mov	sp, r7
 800b3f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3fa:	4770      	bx	lr

0800b3fc <SPI_SSOutputCmd>:
  * @param  NewState: new state of the SPIx SS output. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_SSOutputCmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 800b3fc:	b480      	push	{r7}
 800b3fe:	b083      	sub	sp, #12
 800b400:	af00      	add	r7, sp, #0
 800b402:	6078      	str	r0, [r7, #4]
 800b404:	460b      	mov	r3, r1
 800b406:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800b408:	78fb      	ldrb	r3, [r7, #3]
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	d008      	beq.n	800b420 <SPI_SSOutputCmd+0x24>
  {
    /* Enable the selected SPI SS output */
    SPIx->CR2 |= (uint16_t)SPI_CR2_SSOE;
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	889b      	ldrh	r3, [r3, #4]
 800b412:	b29b      	uxth	r3, r3
 800b414:	f043 0304 	orr.w	r3, r3, #4
 800b418:	b29a      	uxth	r2, r3
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	809a      	strh	r2, [r3, #4]
  else
  {
    /* Disable the selected SPI SS output */
    SPIx->CR2 &= (uint16_t)~((uint16_t)SPI_CR2_SSOE);
  }
}
 800b41e:	e007      	b.n	800b430 <SPI_SSOutputCmd+0x34>
    SPIx->CR2 &= (uint16_t)~((uint16_t)SPI_CR2_SSOE);
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	889b      	ldrh	r3, [r3, #4]
 800b424:	b29b      	uxth	r3, r3
 800b426:	f023 0304 	bic.w	r3, r3, #4
 800b42a:	b29a      	uxth	r2, r3
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	809a      	strh	r2, [r3, #4]
}
 800b430:	bf00      	nop
 800b432:	370c      	adds	r7, #12
 800b434:	46bd      	mov	sp, r7
 800b436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b43a:	4770      	bx	lr

0800b43c <SPI_TIModeCmd>:
  * @param  NewState: new state of the selected SPI TI communication mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_TIModeCmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 800b43c:	b480      	push	{r7}
 800b43e:	b083      	sub	sp, #12
 800b440:	af00      	add	r7, sp, #0
 800b442:	6078      	str	r0, [r7, #4]
 800b444:	460b      	mov	r3, r1
 800b446:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800b448:	78fb      	ldrb	r3, [r7, #3]
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	d008      	beq.n	800b460 <SPI_TIModeCmd+0x24>
  {
    /* Enable the TI mode for the selected SPI peripheral */
    SPIx->CR2 |= SPI_CR2_FRF;
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	889b      	ldrh	r3, [r3, #4]
 800b452:	b29b      	uxth	r3, r3
 800b454:	f043 0310 	orr.w	r3, r3, #16
 800b458:	b29a      	uxth	r2, r3
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	809a      	strh	r2, [r3, #4]
  else
  {
    /* Disable the TI mode for the selected SPI peripheral */
    SPIx->CR2 &= (uint16_t)~SPI_CR2_FRF;
  }
}
 800b45e:	e007      	b.n	800b470 <SPI_TIModeCmd+0x34>
    SPIx->CR2 &= (uint16_t)~SPI_CR2_FRF;
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	889b      	ldrh	r3, [r3, #4]
 800b464:	b29b      	uxth	r3, r3
 800b466:	f023 0310 	bic.w	r3, r3, #16
 800b46a:	b29a      	uxth	r2, r3
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	809a      	strh	r2, [r3, #4]
}
 800b470:	bf00      	nop
 800b472:	370c      	adds	r7, #12
 800b474:	46bd      	mov	sp, r7
 800b476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b47a:	4770      	bx	lr

0800b47c <I2S_FullDuplexConfig>:
  * @note   The I2S full duplex extension can be configured in slave mode only.    
  *  
  * @retval None
  */
void I2S_FullDuplexConfig(SPI_TypeDef* I2Sxext, I2S_InitTypeDef* I2S_InitStruct)
{
 800b47c:	b480      	push	{r7}
 800b47e:	b085      	sub	sp, #20
 800b480:	af00      	add	r7, sp, #0
 800b482:	6078      	str	r0, [r7, #4]
 800b484:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0, tmp = 0;
 800b486:	2300      	movs	r3, #0
 800b488:	81bb      	strh	r3, [r7, #12]
 800b48a:	2300      	movs	r3, #0
 800b48c:	81fb      	strh	r3, [r7, #14]
  assert_param(IS_I2S_DATA_FORMAT(I2S_InitStruct->I2S_DataFormat));
  assert_param(IS_I2S_CPOL(I2S_InitStruct->I2S_CPOL));  

/*----------------------- SPIx I2SCFGR & I2SPR Configuration -----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  I2Sxext->I2SCFGR &= I2SCFGR_CLEAR_MASK; 
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	8b9b      	ldrh	r3, [r3, #28]
 800b492:	b29b      	uxth	r3, r3
 800b494:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800b498:	f023 030f 	bic.w	r3, r3, #15
 800b49c:	b29a      	uxth	r2, r3
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	839a      	strh	r2, [r3, #28]
  I2Sxext->I2SPR = 0x0002;
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	2202      	movs	r2, #2
 800b4a6:	841a      	strh	r2, [r3, #32]
  
  /* Get the I2SCFGR register value */
  tmpreg = I2Sxext->I2SCFGR;
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	8b9b      	ldrh	r3, [r3, #28]
 800b4ac:	81bb      	strh	r3, [r7, #12]
  
  /* Get the mode to be configured for the extended I2S */
  if ((I2S_InitStruct->I2S_Mode == I2S_Mode_MasterTx) || (I2S_InitStruct->I2S_Mode == I2S_Mode_SlaveTx))
 800b4ae:	683b      	ldr	r3, [r7, #0]
 800b4b0:	881b      	ldrh	r3, [r3, #0]
 800b4b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b4b6:	d003      	beq.n	800b4c0 <I2S_FullDuplexConfig+0x44>
 800b4b8:	683b      	ldr	r3, [r7, #0]
 800b4ba:	881b      	ldrh	r3, [r3, #0]
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d103      	bne.n	800b4c8 <I2S_FullDuplexConfig+0x4c>
  {
    tmp = I2S_Mode_SlaveRx;
 800b4c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b4c4:	81fb      	strh	r3, [r7, #14]
 800b4c6:	e00b      	b.n	800b4e0 <I2S_FullDuplexConfig+0x64>
  }
  else
  {
    if ((I2S_InitStruct->I2S_Mode == I2S_Mode_MasterRx) || (I2S_InitStruct->I2S_Mode == I2S_Mode_SlaveRx))
 800b4c8:	683b      	ldr	r3, [r7, #0]
 800b4ca:	881b      	ldrh	r3, [r3, #0]
 800b4cc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b4d0:	d004      	beq.n	800b4dc <I2S_FullDuplexConfig+0x60>
 800b4d2:	683b      	ldr	r3, [r7, #0]
 800b4d4:	881b      	ldrh	r3, [r3, #0]
 800b4d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b4da:	d101      	bne.n	800b4e0 <I2S_FullDuplexConfig+0x64>
    {
      tmp = I2S_Mode_SlaveTx;
 800b4dc:	2300      	movs	r3, #0
 800b4de:	81fb      	strh	r3, [r7, #14]
  }

 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
 800b4e0:	683b      	ldr	r3, [r7, #0]
 800b4e2:	885a      	ldrh	r2, [r3, #2]
 800b4e4:	683b      	ldr	r3, [r7, #0]
 800b4e6:	8899      	ldrh	r1, [r3, #4]
                  (uint16_t)I2S_InitStruct->I2S_CPOL))));
 800b4e8:	683b      	ldr	r3, [r7, #0]
 800b4ea:	899b      	ldrh	r3, [r3, #12]
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
 800b4ec:	430b      	orrs	r3, r1
 800b4ee:	b29b      	uxth	r3, r3
 800b4f0:	4313      	orrs	r3, r2
 800b4f2:	b29a      	uxth	r2, r3
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 800b4f4:	89fb      	ldrh	r3, [r7, #14]
 800b4f6:	4313      	orrs	r3, r2
 800b4f8:	b29a      	uxth	r2, r3
 800b4fa:	89bb      	ldrh	r3, [r7, #12]
 800b4fc:	4313      	orrs	r3, r2
 800b4fe:	b29b      	uxth	r3, r3
 800b500:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800b504:	81bb      	strh	r3, [r7, #12]
 
  /* Write to SPIx I2SCFGR */  
  I2Sxext->I2SCFGR = tmpreg;
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	89ba      	ldrh	r2, [r7, #12]
 800b50a:	839a      	strh	r2, [r3, #28]
}
 800b50c:	bf00      	nop
 800b50e:	3714      	adds	r7, #20
 800b510:	46bd      	mov	sp, r7
 800b512:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b516:	4770      	bx	lr

0800b518 <SPI_I2S_ReceiveData>:
  * @param  SPIx: To select the SPIx/I2Sx peripheral, where x can be: 1, 2, 3, 4, 5 or 6 
  *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode. 
  * @retval The value of the received data.
  */
uint16_t SPI_I2S_ReceiveData(SPI_TypeDef* SPIx)
{
 800b518:	b480      	push	{r7}
 800b51a:	b083      	sub	sp, #12
 800b51c:	af00      	add	r7, sp, #0
 800b51e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  
  /* Return the data in the DR register */
  return SPIx->DR;
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	899b      	ldrh	r3, [r3, #12]
 800b524:	b29b      	uxth	r3, r3
}
 800b526:	4618      	mov	r0, r3
 800b528:	370c      	adds	r7, #12
 800b52a:	46bd      	mov	sp, r7
 800b52c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b530:	4770      	bx	lr

0800b532 <SPI_I2S_SendData>:
  *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode.     
  * @param  Data: Data to be transmitted.
  * @retval None
  */
void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
{
 800b532:	b480      	push	{r7}
 800b534:	b083      	sub	sp, #12
 800b536:	af00      	add	r7, sp, #0
 800b538:	6078      	str	r0, [r7, #4]
 800b53a:	460b      	mov	r3, r1
 800b53c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  
  /* Write in the DR register the data to be sent */
  SPIx->DR = Data;
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	887a      	ldrh	r2, [r7, #2]
 800b542:	819a      	strh	r2, [r3, #12]
}
 800b544:	bf00      	nop
 800b546:	370c      	adds	r7, #12
 800b548:	46bd      	mov	sp, r7
 800b54a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b54e:	4770      	bx	lr

0800b550 <SPI_CalculateCRC>:
  * @param  NewState: new state of the SPIx CRC value calculation.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_CalculateCRC(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 800b550:	b480      	push	{r7}
 800b552:	b083      	sub	sp, #12
 800b554:	af00      	add	r7, sp, #0
 800b556:	6078      	str	r0, [r7, #4]
 800b558:	460b      	mov	r3, r1
 800b55a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800b55c:	78fb      	ldrb	r3, [r7, #3]
 800b55e:	2b00      	cmp	r3, #0
 800b560:	d008      	beq.n	800b574 <SPI_CalculateCRC+0x24>
  {
    /* Enable the selected SPI CRC calculation */
    SPIx->CR1 |= SPI_CR1_CRCEN;
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	881b      	ldrh	r3, [r3, #0]
 800b566:	b29b      	uxth	r3, r3
 800b568:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800b56c:	b29a      	uxth	r2, r3
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the selected SPI CRC calculation */
    SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_CRCEN);
  }
}
 800b572:	e007      	b.n	800b584 <SPI_CalculateCRC+0x34>
    SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_CRCEN);
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	881b      	ldrh	r3, [r3, #0]
 800b578:	b29b      	uxth	r3, r3
 800b57a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b57e:	b29a      	uxth	r2, r3
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	801a      	strh	r2, [r3, #0]
}
 800b584:	bf00      	nop
 800b586:	370c      	adds	r7, #12
 800b588:	46bd      	mov	sp, r7
 800b58a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b58e:	4770      	bx	lr

0800b590 <SPI_TransmitCRC>:
  * @brief  Transmit the SPIx CRC value.
  * @param  SPIx: where x can be 1, 2, 3, 4, 5 or 6 to select the SPI peripheral.
  * @retval None
  */
void SPI_TransmitCRC(SPI_TypeDef* SPIx)
{
 800b590:	b480      	push	{r7}
 800b592:	b083      	sub	sp, #12
 800b594:	af00      	add	r7, sp, #0
 800b596:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  
  /* Enable the selected SPI CRC transmission */
  SPIx->CR1 |= SPI_CR1_CRCNEXT;
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	881b      	ldrh	r3, [r3, #0]
 800b59c:	b29b      	uxth	r3, r3
 800b59e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800b5a2:	b29a      	uxth	r2, r3
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	801a      	strh	r2, [r3, #0]
}
 800b5a8:	bf00      	nop
 800b5aa:	370c      	adds	r7, #12
 800b5ac:	46bd      	mov	sp, r7
 800b5ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5b2:	4770      	bx	lr

0800b5b4 <SPI_GetCRC>:
  *            @arg SPI_CRC_Tx: Selects Tx CRC register
  *            @arg SPI_CRC_Rx: Selects Rx CRC register
  * @retval The selected CRC register value..
  */
uint16_t SPI_GetCRC(SPI_TypeDef* SPIx, uint8_t SPI_CRC)
{
 800b5b4:	b480      	push	{r7}
 800b5b6:	b085      	sub	sp, #20
 800b5b8:	af00      	add	r7, sp, #0
 800b5ba:	6078      	str	r0, [r7, #4]
 800b5bc:	460b      	mov	r3, r1
 800b5be:	70fb      	strb	r3, [r7, #3]
  uint16_t crcreg = 0;
 800b5c0:	2300      	movs	r3, #0
 800b5c2:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_CRC(SPI_CRC));
  if (SPI_CRC != SPI_CRC_Rx)
 800b5c4:	78fb      	ldrb	r3, [r7, #3]
 800b5c6:	2b01      	cmp	r3, #1
 800b5c8:	d003      	beq.n	800b5d2 <SPI_GetCRC+0x1e>
  {
    /* Get the Tx CRC register */
    crcreg = SPIx->TXCRCR;
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	8b1b      	ldrh	r3, [r3, #24]
 800b5ce:	81fb      	strh	r3, [r7, #14]
 800b5d0:	e002      	b.n	800b5d8 <SPI_GetCRC+0x24>
  }
  else
  {
    /* Get the Rx CRC register */
    crcreg = SPIx->RXCRCR;
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	8a9b      	ldrh	r3, [r3, #20]
 800b5d6:	81fb      	strh	r3, [r7, #14]
  }
  /* Return the selected CRC register */
  return crcreg;
 800b5d8:	89fb      	ldrh	r3, [r7, #14]
}
 800b5da:	4618      	mov	r0, r3
 800b5dc:	3714      	adds	r7, #20
 800b5de:	46bd      	mov	sp, r7
 800b5e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5e4:	4770      	bx	lr

0800b5e6 <SPI_GetCRCPolynomial>:
  * @brief  Returns the CRC Polynomial register value for the specified SPI.
  * @param  SPIx: where x can be 1, 2, 3, 4, 5 or 6 to select the SPI peripheral.
  * @retval The CRC Polynomial register value.
  */
uint16_t SPI_GetCRCPolynomial(SPI_TypeDef* SPIx)
{
 800b5e6:	b480      	push	{r7}
 800b5e8:	b083      	sub	sp, #12
 800b5ea:	af00      	add	r7, sp, #0
 800b5ec:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  
  /* Return the CRC polynomial register */
  return SPIx->CRCPR;
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	8a1b      	ldrh	r3, [r3, #16]
 800b5f2:	b29b      	uxth	r3, r3
}
 800b5f4:	4618      	mov	r0, r3
 800b5f6:	370c      	adds	r7, #12
 800b5f8:	46bd      	mov	sp, r7
 800b5fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5fe:	4770      	bx	lr

0800b600 <SPI_I2S_DMACmd>:
  * @param  NewState: new state of the selected SPI DMA transfer request.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_I2S_DMACmd(SPI_TypeDef* SPIx, uint16_t SPI_I2S_DMAReq, FunctionalState NewState)
{
 800b600:	b480      	push	{r7}
 800b602:	b083      	sub	sp, #12
 800b604:	af00      	add	r7, sp, #0
 800b606:	6078      	str	r0, [r7, #4]
 800b608:	460b      	mov	r3, r1
 800b60a:	807b      	strh	r3, [r7, #2]
 800b60c:	4613      	mov	r3, r2
 800b60e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_SPI_I2S_DMAREQ(SPI_I2S_DMAReq));

  if (NewState != DISABLE)
 800b610:	787b      	ldrb	r3, [r7, #1]
 800b612:	2b00      	cmp	r3, #0
 800b614:	d008      	beq.n	800b628 <SPI_I2S_DMACmd+0x28>
  {
    /* Enable the selected SPI DMA requests */
    SPIx->CR2 |= SPI_I2S_DMAReq;
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	889b      	ldrh	r3, [r3, #4]
 800b61a:	b29a      	uxth	r2, r3
 800b61c:	887b      	ldrh	r3, [r7, #2]
 800b61e:	4313      	orrs	r3, r2
 800b620:	b29a      	uxth	r2, r3
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	809a      	strh	r2, [r3, #4]
  else
  {
    /* Disable the selected SPI DMA requests */
    SPIx->CR2 &= (uint16_t)~SPI_I2S_DMAReq;
  }
}
 800b626:	e009      	b.n	800b63c <SPI_I2S_DMACmd+0x3c>
    SPIx->CR2 &= (uint16_t)~SPI_I2S_DMAReq;
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	889b      	ldrh	r3, [r3, #4]
 800b62c:	b29a      	uxth	r2, r3
 800b62e:	887b      	ldrh	r3, [r7, #2]
 800b630:	43db      	mvns	r3, r3
 800b632:	b29b      	uxth	r3, r3
 800b634:	4013      	ands	r3, r2
 800b636:	b29a      	uxth	r2, r3
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	809a      	strh	r2, [r3, #4]
}
 800b63c:	bf00      	nop
 800b63e:	370c      	adds	r7, #12
 800b640:	46bd      	mov	sp, r7
 800b642:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b646:	4770      	bx	lr

0800b648 <SPI_I2S_ITConfig>:
  * @param  NewState: new state of the specified SPI interrupt.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_I2S_ITConfig(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT, FunctionalState NewState)
{
 800b648:	b480      	push	{r7}
 800b64a:	b085      	sub	sp, #20
 800b64c:	af00      	add	r7, sp, #0
 800b64e:	6078      	str	r0, [r7, #4]
 800b650:	460b      	mov	r3, r1
 800b652:	70fb      	strb	r3, [r7, #3]
 800b654:	4613      	mov	r3, r2
 800b656:	70bb      	strb	r3, [r7, #2]
  uint16_t itpos = 0, itmask = 0 ;
 800b658:	2300      	movs	r3, #0
 800b65a:	81fb      	strh	r3, [r7, #14]
 800b65c:	2300      	movs	r3, #0
 800b65e:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_SPI_I2S_CONFIG_IT(SPI_I2S_IT));

  /* Get the SPI IT index */
  itpos = SPI_I2S_IT >> 4;
 800b660:	78fb      	ldrb	r3, [r7, #3]
 800b662:	091b      	lsrs	r3, r3, #4
 800b664:	b2db      	uxtb	r3, r3
 800b666:	81fb      	strh	r3, [r7, #14]

  /* Set the IT mask */
  itmask = (uint16_t)1 << (uint16_t)itpos;
 800b668:	89fb      	ldrh	r3, [r7, #14]
 800b66a:	2201      	movs	r2, #1
 800b66c:	fa02 f303 	lsl.w	r3, r2, r3
 800b670:	81bb      	strh	r3, [r7, #12]

  if (NewState != DISABLE)
 800b672:	78bb      	ldrb	r3, [r7, #2]
 800b674:	2b00      	cmp	r3, #0
 800b676:	d008      	beq.n	800b68a <SPI_I2S_ITConfig+0x42>
  {
    /* Enable the selected SPI interrupt */
    SPIx->CR2 |= itmask;
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	889b      	ldrh	r3, [r3, #4]
 800b67c:	b29a      	uxth	r2, r3
 800b67e:	89bb      	ldrh	r3, [r7, #12]
 800b680:	4313      	orrs	r3, r2
 800b682:	b29a      	uxth	r2, r3
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	809a      	strh	r2, [r3, #4]
  else
  {
    /* Disable the selected SPI interrupt */
    SPIx->CR2 &= (uint16_t)~itmask;
  }
}
 800b688:	e009      	b.n	800b69e <SPI_I2S_ITConfig+0x56>
    SPIx->CR2 &= (uint16_t)~itmask;
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	889b      	ldrh	r3, [r3, #4]
 800b68e:	b29a      	uxth	r2, r3
 800b690:	89bb      	ldrh	r3, [r7, #12]
 800b692:	43db      	mvns	r3, r3
 800b694:	b29b      	uxth	r3, r3
 800b696:	4013      	ands	r3, r2
 800b698:	b29a      	uxth	r2, r3
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	809a      	strh	r2, [r3, #4]
}
 800b69e:	bf00      	nop
 800b6a0:	3714      	adds	r7, #20
 800b6a2:	46bd      	mov	sp, r7
 800b6a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6a8:	4770      	bx	lr

0800b6aa <SPI_I2S_GetFlagStatus>:
  *            @arg I2S_FLAG_UDR: Underrun Error flag.
  *            @arg I2S_FLAG_CHSIDE: Channel Side flag.  
  * @retval The new state of SPI_I2S_FLAG (SET or RESET).
  */
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 800b6aa:	b480      	push	{r7}
 800b6ac:	b085      	sub	sp, #20
 800b6ae:	af00      	add	r7, sp, #0
 800b6b0:	6078      	str	r0, [r7, #4]
 800b6b2:	460b      	mov	r3, r1
 800b6b4:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 800b6b6:	2300      	movs	r3, #0
 800b6b8:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  
  /* Check the status of the specified SPI flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	891b      	ldrh	r3, [r3, #8]
 800b6be:	b29a      	uxth	r2, r3
 800b6c0:	887b      	ldrh	r3, [r7, #2]
 800b6c2:	4013      	ands	r3, r2
 800b6c4:	b29b      	uxth	r3, r3
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	d002      	beq.n	800b6d0 <SPI_I2S_GetFlagStatus+0x26>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 800b6ca:	2301      	movs	r3, #1
 800b6cc:	73fb      	strb	r3, [r7, #15]
 800b6ce:	e001      	b.n	800b6d4 <SPI_I2S_GetFlagStatus+0x2a>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 800b6d0:	2300      	movs	r3, #0
 800b6d2:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 800b6d4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b6d6:	4618      	mov	r0, r3
 800b6d8:	3714      	adds	r7, #20
 800b6da:	46bd      	mov	sp, r7
 800b6dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6e0:	4770      	bx	lr

0800b6e2 <SPI_I2S_ClearFlag>:
  *          write operation to SPI_CR1 register (SPI_Cmd() to enable the SPI).
  *  
  * @retval None
  */
void SPI_I2S_ClearFlag(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 800b6e2:	b480      	push	{r7}
 800b6e4:	b083      	sub	sp, #12
 800b6e6:	af00      	add	r7, sp, #0
 800b6e8:	6078      	str	r0, [r7, #4]
 800b6ea:	460b      	mov	r3, r1
 800b6ec:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_CLEAR_FLAG(SPI_I2S_FLAG));
    
  /* Clear the selected SPI CRC Error (CRCERR) flag */
  SPIx->SR = (uint16_t)~SPI_I2S_FLAG;
 800b6ee:	887b      	ldrh	r3, [r7, #2]
 800b6f0:	43db      	mvns	r3, r3
 800b6f2:	b29a      	uxth	r2, r3
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	811a      	strh	r2, [r3, #8]
}
 800b6f8:	bf00      	nop
 800b6fa:	370c      	adds	r7, #12
 800b6fc:	46bd      	mov	sp, r7
 800b6fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b702:	4770      	bx	lr

0800b704 <SPI_I2S_GetITStatus>:
  *            @arg I2S_IT_UDR: Underrun interrupt.  
  *            @arg SPI_I2S_IT_TIFRFE: Format Error interrupt.  
  * @retval The new state of SPI_I2S_IT (SET or RESET).
  */
ITStatus SPI_I2S_GetITStatus(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT)
{
 800b704:	b480      	push	{r7}
 800b706:	b085      	sub	sp, #20
 800b708:	af00      	add	r7, sp, #0
 800b70a:	6078      	str	r0, [r7, #4]
 800b70c:	460b      	mov	r3, r1
 800b70e:	70fb      	strb	r3, [r7, #3]
  ITStatus bitstatus = RESET;
 800b710:	2300      	movs	r3, #0
 800b712:	73fb      	strb	r3, [r7, #15]
  uint16_t itpos = 0, itmask = 0, enablestatus = 0;
 800b714:	2300      	movs	r3, #0
 800b716:	81bb      	strh	r3, [r7, #12]
 800b718:	2300      	movs	r3, #0
 800b71a:	817b      	strh	r3, [r7, #10]
 800b71c:	2300      	movs	r3, #0
 800b71e:	813b      	strh	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_IT(SPI_I2S_IT));

  /* Get the SPI_I2S_IT index */
  itpos = 0x01 << (SPI_I2S_IT & 0x0F);
 800b720:	78fb      	ldrb	r3, [r7, #3]
 800b722:	f003 030f 	and.w	r3, r3, #15
 800b726:	2201      	movs	r2, #1
 800b728:	fa02 f303 	lsl.w	r3, r2, r3
 800b72c:	81bb      	strh	r3, [r7, #12]

  /* Get the SPI_I2S_IT IT mask */
  itmask = SPI_I2S_IT >> 4;
 800b72e:	78fb      	ldrb	r3, [r7, #3]
 800b730:	091b      	lsrs	r3, r3, #4
 800b732:	b2db      	uxtb	r3, r3
 800b734:	817b      	strh	r3, [r7, #10]

  /* Set the IT mask */
  itmask = 0x01 << itmask;
 800b736:	897b      	ldrh	r3, [r7, #10]
 800b738:	2201      	movs	r2, #1
 800b73a:	fa02 f303 	lsl.w	r3, r2, r3
 800b73e:	817b      	strh	r3, [r7, #10]

  /* Get the SPI_I2S_IT enable bit status */
  enablestatus = (SPIx->CR2 & itmask) ;
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	889b      	ldrh	r3, [r3, #4]
 800b744:	b29a      	uxth	r2, r3
 800b746:	897b      	ldrh	r3, [r7, #10]
 800b748:	4013      	ands	r3, r2
 800b74a:	813b      	strh	r3, [r7, #8]

  /* Check the status of the specified SPI interrupt */
  if (((SPIx->SR & itpos) != (uint16_t)RESET) && enablestatus)
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	891b      	ldrh	r3, [r3, #8]
 800b750:	b29a      	uxth	r2, r3
 800b752:	89bb      	ldrh	r3, [r7, #12]
 800b754:	4013      	ands	r3, r2
 800b756:	b29b      	uxth	r3, r3
 800b758:	2b00      	cmp	r3, #0
 800b75a:	d005      	beq.n	800b768 <SPI_I2S_GetITStatus+0x64>
 800b75c:	893b      	ldrh	r3, [r7, #8]
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d002      	beq.n	800b768 <SPI_I2S_GetITStatus+0x64>
  {
    /* SPI_I2S_IT is set */
    bitstatus = SET;
 800b762:	2301      	movs	r3, #1
 800b764:	73fb      	strb	r3, [r7, #15]
 800b766:	e001      	b.n	800b76c <SPI_I2S_GetITStatus+0x68>
  }
  else
  {
    /* SPI_I2S_IT is reset */
    bitstatus = RESET;
 800b768:	2300      	movs	r3, #0
 800b76a:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_IT status */
  return bitstatus;
 800b76c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b76e:	4618      	mov	r0, r3
 800b770:	3714      	adds	r7, #20
 800b772:	46bd      	mov	sp, r7
 800b774:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b778:	4770      	bx	lr

0800b77a <SPI_I2S_ClearITPendingBit>:
  *          followed by a write operation to SPI_CR1 register (SPI_Cmd() to enable 
  *          the SPI).
  * @retval None
  */
void SPI_I2S_ClearITPendingBit(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT)
{
 800b77a:	b480      	push	{r7}
 800b77c:	b085      	sub	sp, #20
 800b77e:	af00      	add	r7, sp, #0
 800b780:	6078      	str	r0, [r7, #4]
 800b782:	460b      	mov	r3, r1
 800b784:	70fb      	strb	r3, [r7, #3]
  uint16_t itpos = 0;
 800b786:	2300      	movs	r3, #0
 800b788:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_CLEAR_IT(SPI_I2S_IT));

  /* Get the SPI_I2S IT index */
  itpos = 0x01 << (SPI_I2S_IT & 0x0F);
 800b78a:	78fb      	ldrb	r3, [r7, #3]
 800b78c:	f003 030f 	and.w	r3, r3, #15
 800b790:	2201      	movs	r2, #1
 800b792:	fa02 f303 	lsl.w	r3, r2, r3
 800b796:	81fb      	strh	r3, [r7, #14]

  /* Clear the selected SPI CRC Error (CRCERR) interrupt pending bit */
  SPIx->SR = (uint16_t)~itpos;
 800b798:	89fb      	ldrh	r3, [r7, #14]
 800b79a:	43db      	mvns	r3, r3
 800b79c:	b29a      	uxth	r2, r3
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	811a      	strh	r2, [r3, #8]
}
 800b7a2:	bf00      	nop
 800b7a4:	3714      	adds	r7, #20
 800b7a6:	46bd      	mov	sp, r7
 800b7a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ac:	4770      	bx	lr
 800b7ae:	bf00      	nop

0800b7b0 <SYSCFG_DeInit>:
  *   registers to their default reset values.
  * @param  None
  * @retval None
  */
void SYSCFG_DeInit(void)
{
 800b7b0:	b580      	push	{r7, lr}
 800b7b2:	af00      	add	r7, sp, #0
   RCC_APB2PeriphResetCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 800b7b4:	2101      	movs	r1, #1
 800b7b6:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800b7ba:	f7fd f9ed 	bl	8008b98 <RCC_APB2PeriphResetCmd>
   RCC_APB2PeriphResetCmd(RCC_APB2Periph_SYSCFG, DISABLE);
 800b7be:	2100      	movs	r1, #0
 800b7c0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800b7c4:	f7fd f9e8 	bl	8008b98 <RCC_APB2PeriphResetCmd>
}
 800b7c8:	bf00      	nop
 800b7ca:	bd80      	pop	{r7, pc}

0800b7cc <SYSCFG_MemoryRemapConfig>:
  *            @arg SYSCFG_MemoryRemap_SRAM:        Embedded SRAM (112kB) mapped at 0x00000000
  *            @arg SYSCFG_MemoryRemap_SDRAM:       FMC (External SDRAM)  mapped at 0x00000000 for STM32F42xxx/43xxx devices.            
  * @retval None
  */
void SYSCFG_MemoryRemapConfig(uint8_t SYSCFG_MemoryRemap)
{
 800b7cc:	b480      	push	{r7}
 800b7ce:	b083      	sub	sp, #12
 800b7d0:	af00      	add	r7, sp, #0
 800b7d2:	4603      	mov	r3, r0
 800b7d4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_SYSCFG_MEMORY_REMAP_CONFING(SYSCFG_MemoryRemap));

  SYSCFG->MEMRMP = SYSCFG_MemoryRemap;
 800b7d6:	4a04      	ldr	r2, [pc, #16]	; (800b7e8 <SYSCFG_MemoryRemapConfig+0x1c>)
 800b7d8:	79fb      	ldrb	r3, [r7, #7]
 800b7da:	6013      	str	r3, [r2, #0]
}
 800b7dc:	bf00      	nop
 800b7de:	370c      	adds	r7, #12
 800b7e0:	46bd      	mov	sp, r7
 800b7e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7e6:	4770      	bx	lr
 800b7e8:	40013800 	.word	0x40013800

0800b7ec <SYSCFG_MemorySwappingBank>:
  *            @arg DISABLE:(the default state) Flash Bank1 mapped at 0x08000000 (and aliased @0x0000 0000) 
                            and Flash Bank2 mapped at 0x08100000 (and aliased at 0x00100000)  
  * @retval None
  */
void SYSCFG_MemorySwappingBank(FunctionalState NewState)
{
 800b7ec:	b480      	push	{r7}
 800b7ee:	b083      	sub	sp, #12
 800b7f0:	af00      	add	r7, sp, #0
 800b7f2:	4603      	mov	r3, r0
 800b7f4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) UFB_MODE_BB = (uint32_t)NewState;
 800b7f6:	4a04      	ldr	r2, [pc, #16]	; (800b808 <SYSCFG_MemorySwappingBank+0x1c>)
 800b7f8:	79fb      	ldrb	r3, [r7, #7]
 800b7fa:	6013      	str	r3, [r2, #0]
}
 800b7fc:	bf00      	nop
 800b7fe:	370c      	adds	r7, #12
 800b800:	46bd      	mov	sp, r7
 800b802:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b806:	4770      	bx	lr
 800b808:	42270020 	.word	0x42270020

0800b80c <SYSCFG_EXTILineConfig>:
  *           be (0..7) for STM32F42xxx/43xxx devices. 
  *             
  * @retval None
  */
void SYSCFG_EXTILineConfig(uint8_t EXTI_PortSourceGPIOx, uint8_t EXTI_PinSourcex)
{
 800b80c:	b480      	push	{r7}
 800b80e:	b085      	sub	sp, #20
 800b810:	af00      	add	r7, sp, #0
 800b812:	4603      	mov	r3, r0
 800b814:	460a      	mov	r2, r1
 800b816:	71fb      	strb	r3, [r7, #7]
 800b818:	4613      	mov	r3, r2
 800b81a:	71bb      	strb	r3, [r7, #6]
  uint32_t tmp = 0x00;
 800b81c:	2300      	movs	r3, #0
 800b81e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_EXTI_PORT_SOURCE(EXTI_PortSourceGPIOx));
  assert_param(IS_EXTI_PIN_SOURCE(EXTI_PinSourcex));

  tmp = ((uint32_t)0x0F) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03));
 800b820:	79bb      	ldrb	r3, [r7, #6]
 800b822:	f003 0303 	and.w	r3, r3, #3
 800b826:	009b      	lsls	r3, r3, #2
 800b828:	220f      	movs	r2, #15
 800b82a:	fa02 f303 	lsl.w	r3, r2, r3
 800b82e:	60fb      	str	r3, [r7, #12]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] &= ~tmp;
 800b830:	4a16      	ldr	r2, [pc, #88]	; (800b88c <SYSCFG_EXTILineConfig+0x80>)
 800b832:	79bb      	ldrb	r3, [r7, #6]
 800b834:	089b      	lsrs	r3, r3, #2
 800b836:	b2db      	uxtb	r3, r3
 800b838:	3302      	adds	r3, #2
 800b83a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800b83e:	68fb      	ldr	r3, [r7, #12]
 800b840:	43db      	mvns	r3, r3
 800b842:	4812      	ldr	r0, [pc, #72]	; (800b88c <SYSCFG_EXTILineConfig+0x80>)
 800b844:	79b9      	ldrb	r1, [r7, #6]
 800b846:	0889      	lsrs	r1, r1, #2
 800b848:	b2c9      	uxtb	r1, r1
 800b84a:	401a      	ands	r2, r3
 800b84c:	1c8b      	adds	r3, r1, #2
 800b84e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] |= (((uint32_t)EXTI_PortSourceGPIOx) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03)));
 800b852:	4a0e      	ldr	r2, [pc, #56]	; (800b88c <SYSCFG_EXTILineConfig+0x80>)
 800b854:	79bb      	ldrb	r3, [r7, #6]
 800b856:	089b      	lsrs	r3, r3, #2
 800b858:	b2db      	uxtb	r3, r3
 800b85a:	3302      	adds	r3, #2
 800b85c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800b860:	79f9      	ldrb	r1, [r7, #7]
 800b862:	79bb      	ldrb	r3, [r7, #6]
 800b864:	f003 0303 	and.w	r3, r3, #3
 800b868:	009b      	lsls	r3, r3, #2
 800b86a:	fa01 f303 	lsl.w	r3, r1, r3
 800b86e:	4807      	ldr	r0, [pc, #28]	; (800b88c <SYSCFG_EXTILineConfig+0x80>)
 800b870:	79b9      	ldrb	r1, [r7, #6]
 800b872:	0889      	lsrs	r1, r1, #2
 800b874:	b2c9      	uxtb	r1, r1
 800b876:	431a      	orrs	r2, r3
 800b878:	1c8b      	adds	r3, r1, #2
 800b87a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 800b87e:	bf00      	nop
 800b880:	3714      	adds	r7, #20
 800b882:	46bd      	mov	sp, r7
 800b884:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b888:	4770      	bx	lr
 800b88a:	bf00      	nop
 800b88c:	40013800 	.word	0x40013800

0800b890 <SYSCFG_ETH_MediaInterfaceConfig>:
  *            @arg SYSCFG_ETH_MediaInterface_MII: MII mode selected
  *            @arg SYSCFG_ETH_MediaInterface_RMII: RMII mode selected 
  * @retval None 
  */
void SYSCFG_ETH_MediaInterfaceConfig(uint32_t SYSCFG_ETH_MediaInterface) 
{ 
 800b890:	b480      	push	{r7}
 800b892:	b083      	sub	sp, #12
 800b894:	af00      	add	r7, sp, #0
 800b896:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_ETH_MEDIA_INTERFACE(SYSCFG_ETH_MediaInterface)); 
  /* Configure MII_RMII selection bit */ 
  *(__IO uint32_t *) PMC_MII_RMII_SEL_BB = SYSCFG_ETH_MediaInterface; 
 800b898:	4a04      	ldr	r2, [pc, #16]	; (800b8ac <SYSCFG_ETH_MediaInterfaceConfig+0x1c>)
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	6013      	str	r3, [r2, #0]
}
 800b89e:	bf00      	nop
 800b8a0:	370c      	adds	r7, #12
 800b8a2:	46bd      	mov	sp, r7
 800b8a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8a8:	4770      	bx	lr
 800b8aa:	bf00      	nop
 800b8ac:	422700dc 	.word	0x422700dc

0800b8b0 <SYSCFG_CompensationCellCmd>:
  *            @arg ENABLE: I/O compensation cell enabled  
  *            @arg DISABLE: I/O compensation cell power-down mode  
  * @retval None
  */
void SYSCFG_CompensationCellCmd(FunctionalState NewState)
{
 800b8b0:	b480      	push	{r7}
 800b8b2:	b083      	sub	sp, #12
 800b8b4:	af00      	add	r7, sp, #0
 800b8b6:	4603      	mov	r3, r0
 800b8b8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CMPCR_CMP_PD_BB = (uint32_t)NewState;
 800b8ba:	4a04      	ldr	r2, [pc, #16]	; (800b8cc <SYSCFG_CompensationCellCmd+0x1c>)
 800b8bc:	79fb      	ldrb	r3, [r7, #7]
 800b8be:	6013      	str	r3, [r2, #0]
}
 800b8c0:	bf00      	nop
 800b8c2:	370c      	adds	r7, #12
 800b8c4:	46bd      	mov	sp, r7
 800b8c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ca:	4770      	bx	lr
 800b8cc:	42270400 	.word	0x42270400

0800b8d0 <SYSCFG_GetCompensationCellStatus>:
  * @brief  Checks whether the I/O Compensation Cell ready flag is set or not.
  * @param  None
  * @retval The new state of the I/O Compensation Cell ready flag (SET or RESET)
  */
FlagStatus SYSCFG_GetCompensationCellStatus(void)
{
 800b8d0:	b480      	push	{r7}
 800b8d2:	b083      	sub	sp, #12
 800b8d4:	af00      	add	r7, sp, #0
  FlagStatus bitstatus = RESET;
 800b8d6:	2300      	movs	r3, #0
 800b8d8:	71fb      	strb	r3, [r7, #7]
    
  if ((SYSCFG->CMPCR & SYSCFG_CMPCR_READY ) != (uint32_t)RESET)
 800b8da:	4b09      	ldr	r3, [pc, #36]	; (800b900 <SYSCFG_GetCompensationCellStatus+0x30>)
 800b8dc:	6a1b      	ldr	r3, [r3, #32]
 800b8de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b8e2:	2b00      	cmp	r3, #0
 800b8e4:	d002      	beq.n	800b8ec <SYSCFG_GetCompensationCellStatus+0x1c>
  {
    bitstatus = SET;
 800b8e6:	2301      	movs	r3, #1
 800b8e8:	71fb      	strb	r3, [r7, #7]
 800b8ea:	e001      	b.n	800b8f0 <SYSCFG_GetCompensationCellStatus+0x20>
  }
  else
  {
    bitstatus = RESET;
 800b8ec:	2300      	movs	r3, #0
 800b8ee:	71fb      	strb	r3, [r7, #7]
  }
  return bitstatus;
 800b8f0:	79fb      	ldrb	r3, [r7, #7]
}
 800b8f2:	4618      	mov	r0, r3
 800b8f4:	370c      	adds	r7, #12
 800b8f6:	46bd      	mov	sp, r7
 800b8f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8fc:	4770      	bx	lr
 800b8fe:	bf00      	nop
 800b900:	40013800 	.word	0x40013800

0800b904 <TIM_DeInit>:
  * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
  * @retval None

  */
void TIM_DeInit(TIM_TypeDef* TIMx)
{
 800b904:	b580      	push	{r7, lr}
 800b906:	b082      	sub	sp, #8
 800b908:	af00      	add	r7, sp, #0
 800b90a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
 
  if (TIMx == TIM1)
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	4a60      	ldr	r2, [pc, #384]	; (800ba90 <TIM_DeInit+0x18c>)
 800b910:	4293      	cmp	r3, r2
 800b912:	d108      	bne.n	800b926 <TIM_DeInit+0x22>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, ENABLE);
 800b914:	2101      	movs	r1, #1
 800b916:	2001      	movs	r0, #1
 800b918:	f7fd f93e 	bl	8008b98 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, DISABLE);  
 800b91c:	2100      	movs	r1, #0
 800b91e:	2001      	movs	r0, #1
 800b920:	f7fd f93a 	bl	8008b98 <RCC_APB2PeriphResetCmd>
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 800b924:	e0af      	b.n	800ba86 <TIM_DeInit+0x182>
  else if (TIMx == TIM2) 
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b92c:	d108      	bne.n	800b940 <TIM_DeInit+0x3c>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, ENABLE);
 800b92e:	2101      	movs	r1, #1
 800b930:	2001      	movs	r0, #1
 800b932:	f7fd f911 	bl	8008b58 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, DISABLE);
 800b936:	2100      	movs	r1, #0
 800b938:	2001      	movs	r0, #1
 800b93a:	f7fd f90d 	bl	8008b58 <RCC_APB1PeriphResetCmd>
}
 800b93e:	e0a2      	b.n	800ba86 <TIM_DeInit+0x182>
  else if (TIMx == TIM3)
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	4a54      	ldr	r2, [pc, #336]	; (800ba94 <TIM_DeInit+0x190>)
 800b944:	4293      	cmp	r3, r2
 800b946:	d108      	bne.n	800b95a <TIM_DeInit+0x56>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, ENABLE);
 800b948:	2101      	movs	r1, #1
 800b94a:	2002      	movs	r0, #2
 800b94c:	f7fd f904 	bl	8008b58 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, DISABLE);
 800b950:	2100      	movs	r1, #0
 800b952:	2002      	movs	r0, #2
 800b954:	f7fd f900 	bl	8008b58 <RCC_APB1PeriphResetCmd>
}
 800b958:	e095      	b.n	800ba86 <TIM_DeInit+0x182>
  else if (TIMx == TIM4)
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	4a4e      	ldr	r2, [pc, #312]	; (800ba98 <TIM_DeInit+0x194>)
 800b95e:	4293      	cmp	r3, r2
 800b960:	d108      	bne.n	800b974 <TIM_DeInit+0x70>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, ENABLE);
 800b962:	2101      	movs	r1, #1
 800b964:	2004      	movs	r0, #4
 800b966:	f7fd f8f7 	bl	8008b58 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, DISABLE);
 800b96a:	2100      	movs	r1, #0
 800b96c:	2004      	movs	r0, #4
 800b96e:	f7fd f8f3 	bl	8008b58 <RCC_APB1PeriphResetCmd>
}
 800b972:	e088      	b.n	800ba86 <TIM_DeInit+0x182>
  else if (TIMx == TIM5)
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	4a49      	ldr	r2, [pc, #292]	; (800ba9c <TIM_DeInit+0x198>)
 800b978:	4293      	cmp	r3, r2
 800b97a:	d108      	bne.n	800b98e <TIM_DeInit+0x8a>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, ENABLE);
 800b97c:	2101      	movs	r1, #1
 800b97e:	2008      	movs	r0, #8
 800b980:	f7fd f8ea 	bl	8008b58 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, DISABLE);
 800b984:	2100      	movs	r1, #0
 800b986:	2008      	movs	r0, #8
 800b988:	f7fd f8e6 	bl	8008b58 <RCC_APB1PeriphResetCmd>
}
 800b98c:	e07b      	b.n	800ba86 <TIM_DeInit+0x182>
  else if (TIMx == TIM6)  
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	4a43      	ldr	r2, [pc, #268]	; (800baa0 <TIM_DeInit+0x19c>)
 800b992:	4293      	cmp	r3, r2
 800b994:	d108      	bne.n	800b9a8 <TIM_DeInit+0xa4>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, ENABLE);
 800b996:	2101      	movs	r1, #1
 800b998:	2010      	movs	r0, #16
 800b99a:	f7fd f8dd 	bl	8008b58 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, DISABLE);
 800b99e:	2100      	movs	r1, #0
 800b9a0:	2010      	movs	r0, #16
 800b9a2:	f7fd f8d9 	bl	8008b58 <RCC_APB1PeriphResetCmd>
}
 800b9a6:	e06e      	b.n	800ba86 <TIM_DeInit+0x182>
  else if (TIMx == TIM7)
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	4a3e      	ldr	r2, [pc, #248]	; (800baa4 <TIM_DeInit+0x1a0>)
 800b9ac:	4293      	cmp	r3, r2
 800b9ae:	d108      	bne.n	800b9c2 <TIM_DeInit+0xbe>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, ENABLE);
 800b9b0:	2101      	movs	r1, #1
 800b9b2:	2020      	movs	r0, #32
 800b9b4:	f7fd f8d0 	bl	8008b58 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, DISABLE);
 800b9b8:	2100      	movs	r1, #0
 800b9ba:	2020      	movs	r0, #32
 800b9bc:	f7fd f8cc 	bl	8008b58 <RCC_APB1PeriphResetCmd>
}
 800b9c0:	e061      	b.n	800ba86 <TIM_DeInit+0x182>
  else if (TIMx == TIM8)
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	4a38      	ldr	r2, [pc, #224]	; (800baa8 <TIM_DeInit+0x1a4>)
 800b9c6:	4293      	cmp	r3, r2
 800b9c8:	d108      	bne.n	800b9dc <TIM_DeInit+0xd8>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, ENABLE);
 800b9ca:	2101      	movs	r1, #1
 800b9cc:	2002      	movs	r0, #2
 800b9ce:	f7fd f8e3 	bl	8008b98 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, DISABLE);  
 800b9d2:	2100      	movs	r1, #0
 800b9d4:	2002      	movs	r0, #2
 800b9d6:	f7fd f8df 	bl	8008b98 <RCC_APB2PeriphResetCmd>
}
 800b9da:	e054      	b.n	800ba86 <TIM_DeInit+0x182>
  else if (TIMx == TIM9)
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	4a33      	ldr	r2, [pc, #204]	; (800baac <TIM_DeInit+0x1a8>)
 800b9e0:	4293      	cmp	r3, r2
 800b9e2:	d10a      	bne.n	800b9fa <TIM_DeInit+0xf6>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, ENABLE);
 800b9e4:	2101      	movs	r1, #1
 800b9e6:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800b9ea:	f7fd f8d5 	bl	8008b98 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, DISABLE);  
 800b9ee:	2100      	movs	r1, #0
 800b9f0:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800b9f4:	f7fd f8d0 	bl	8008b98 <RCC_APB2PeriphResetCmd>
}
 800b9f8:	e045      	b.n	800ba86 <TIM_DeInit+0x182>
  else if (TIMx == TIM10)
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	4a2c      	ldr	r2, [pc, #176]	; (800bab0 <TIM_DeInit+0x1ac>)
 800b9fe:	4293      	cmp	r3, r2
 800ba00:	d10a      	bne.n	800ba18 <TIM_DeInit+0x114>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, ENABLE);
 800ba02:	2101      	movs	r1, #1
 800ba04:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800ba08:	f7fd f8c6 	bl	8008b98 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, DISABLE);  
 800ba0c:	2100      	movs	r1, #0
 800ba0e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800ba12:	f7fd f8c1 	bl	8008b98 <RCC_APB2PeriphResetCmd>
}
 800ba16:	e036      	b.n	800ba86 <TIM_DeInit+0x182>
  else if (TIMx == TIM11) 
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	4a26      	ldr	r2, [pc, #152]	; (800bab4 <TIM_DeInit+0x1b0>)
 800ba1c:	4293      	cmp	r3, r2
 800ba1e:	d10a      	bne.n	800ba36 <TIM_DeInit+0x132>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, ENABLE);
 800ba20:	2101      	movs	r1, #1
 800ba22:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800ba26:	f7fd f8b7 	bl	8008b98 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, DISABLE);  
 800ba2a:	2100      	movs	r1, #0
 800ba2c:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800ba30:	f7fd f8b2 	bl	8008b98 <RCC_APB2PeriphResetCmd>
}
 800ba34:	e027      	b.n	800ba86 <TIM_DeInit+0x182>
  else if (TIMx == TIM12)
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	4a1f      	ldr	r2, [pc, #124]	; (800bab8 <TIM_DeInit+0x1b4>)
 800ba3a:	4293      	cmp	r3, r2
 800ba3c:	d108      	bne.n	800ba50 <TIM_DeInit+0x14c>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, ENABLE);
 800ba3e:	2101      	movs	r1, #1
 800ba40:	2040      	movs	r0, #64	; 0x40
 800ba42:	f7fd f889 	bl	8008b58 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, DISABLE);  
 800ba46:	2100      	movs	r1, #0
 800ba48:	2040      	movs	r0, #64	; 0x40
 800ba4a:	f7fd f885 	bl	8008b58 <RCC_APB1PeriphResetCmd>
}
 800ba4e:	e01a      	b.n	800ba86 <TIM_DeInit+0x182>
  else if (TIMx == TIM13) 
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	4a1a      	ldr	r2, [pc, #104]	; (800babc <TIM_DeInit+0x1b8>)
 800ba54:	4293      	cmp	r3, r2
 800ba56:	d108      	bne.n	800ba6a <TIM_DeInit+0x166>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, ENABLE);
 800ba58:	2101      	movs	r1, #1
 800ba5a:	2080      	movs	r0, #128	; 0x80
 800ba5c:	f7fd f87c 	bl	8008b58 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, DISABLE);  
 800ba60:	2100      	movs	r1, #0
 800ba62:	2080      	movs	r0, #128	; 0x80
 800ba64:	f7fd f878 	bl	8008b58 <RCC_APB1PeriphResetCmd>
}
 800ba68:	e00d      	b.n	800ba86 <TIM_DeInit+0x182>
    if (TIMx == TIM14) 
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	4a14      	ldr	r2, [pc, #80]	; (800bac0 <TIM_DeInit+0x1bc>)
 800ba6e:	4293      	cmp	r3, r2
 800ba70:	d109      	bne.n	800ba86 <TIM_DeInit+0x182>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
 800ba72:	2101      	movs	r1, #1
 800ba74:	f44f 7080 	mov.w	r0, #256	; 0x100
 800ba78:	f7fd f86e 	bl	8008b58 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
 800ba7c:	2100      	movs	r1, #0
 800ba7e:	f44f 7080 	mov.w	r0, #256	; 0x100
 800ba82:	f7fd f869 	bl	8008b58 <RCC_APB1PeriphResetCmd>
}
 800ba86:	bf00      	nop
 800ba88:	3708      	adds	r7, #8
 800ba8a:	46bd      	mov	sp, r7
 800ba8c:	bd80      	pop	{r7, pc}
 800ba8e:	bf00      	nop
 800ba90:	40010000 	.word	0x40010000
 800ba94:	40000400 	.word	0x40000400
 800ba98:	40000800 	.word	0x40000800
 800ba9c:	40000c00 	.word	0x40000c00
 800baa0:	40001000 	.word	0x40001000
 800baa4:	40001400 	.word	0x40001400
 800baa8:	40010400 	.word	0x40010400
 800baac:	40014000 	.word	0x40014000
 800bab0:	40014400 	.word	0x40014400
 800bab4:	40014800 	.word	0x40014800
 800bab8:	40001800 	.word	0x40001800
 800babc:	40001c00 	.word	0x40001c00
 800bac0:	40002000 	.word	0x40002000

0800bac4 <TIM_TimeBaseInit>:
  * @param  TIM_TimeBaseInitStruct: pointer to a TIM_TimeBaseInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 800bac4:	b480      	push	{r7}
 800bac6:	b085      	sub	sp, #20
 800bac8:	af00      	add	r7, sp, #0
 800baca:	6078      	str	r0, [r7, #4]
 800bacc:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
 800bace:	2300      	movs	r3, #0
 800bad0:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	881b      	ldrh	r3, [r3, #0]
 800bad6:	81fb      	strh	r3, [r7, #14]

  if((TIMx == TIM1) || (TIMx == TIM8)||
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	4a29      	ldr	r2, [pc, #164]	; (800bb80 <TIM_TimeBaseInit+0xbc>)
 800badc:	4293      	cmp	r3, r2
 800bade:	d013      	beq.n	800bb08 <TIM_TimeBaseInit+0x44>
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	4a28      	ldr	r2, [pc, #160]	; (800bb84 <TIM_TimeBaseInit+0xc0>)
 800bae4:	4293      	cmp	r3, r2
 800bae6:	d00f      	beq.n	800bb08 <TIM_TimeBaseInit+0x44>
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800baee:	d00b      	beq.n	800bb08 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM2) || (TIMx == TIM3)||
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	4a25      	ldr	r2, [pc, #148]	; (800bb88 <TIM_TimeBaseInit+0xc4>)
 800baf4:	4293      	cmp	r3, r2
 800baf6:	d007      	beq.n	800bb08 <TIM_TimeBaseInit+0x44>
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	4a24      	ldr	r2, [pc, #144]	; (800bb8c <TIM_TimeBaseInit+0xc8>)
 800bafc:	4293      	cmp	r3, r2
 800bafe:	d003      	beq.n	800bb08 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	4a23      	ldr	r2, [pc, #140]	; (800bb90 <TIM_TimeBaseInit+0xcc>)
 800bb04:	4293      	cmp	r3, r2
 800bb06:	d108      	bne.n	800bb1a <TIM_TimeBaseInit+0x56>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
 800bb08:	89fb      	ldrh	r3, [r7, #14]
 800bb0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bb0e:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 800bb10:	683b      	ldr	r3, [r7, #0]
 800bb12:	885a      	ldrh	r2, [r3, #2]
 800bb14:	89fb      	ldrh	r3, [r7, #14]
 800bb16:	4313      	orrs	r3, r2
 800bb18:	81fb      	strh	r3, [r7, #14]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	4a1d      	ldr	r2, [pc, #116]	; (800bb94 <TIM_TimeBaseInit+0xd0>)
 800bb1e:	4293      	cmp	r3, r2
 800bb20:	d00c      	beq.n	800bb3c <TIM_TimeBaseInit+0x78>
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	4a1c      	ldr	r2, [pc, #112]	; (800bb98 <TIM_TimeBaseInit+0xd4>)
 800bb26:	4293      	cmp	r3, r2
 800bb28:	d008      	beq.n	800bb3c <TIM_TimeBaseInit+0x78>
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 800bb2a:	89fb      	ldrh	r3, [r7, #14]
 800bb2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bb30:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 800bb32:	683b      	ldr	r3, [r7, #0]
 800bb34:	891a      	ldrh	r2, [r3, #8]
 800bb36:	89fb      	ldrh	r3, [r7, #14]
 800bb38:	4313      	orrs	r3, r2
 800bb3a:	81fb      	strh	r3, [r7, #14]
  }

  TIMx->CR1 = tmpcr1;
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	89fa      	ldrh	r2, [r7, #14]
 800bb40:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 800bb42:	683b      	ldr	r3, [r7, #0]
 800bb44:	685a      	ldr	r2, [r3, #4]
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 800bb4a:	683b      	ldr	r3, [r7, #0]
 800bb4c:	881a      	ldrh	r2, [r3, #0]
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	851a      	strh	r2, [r3, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8))  
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	4a0a      	ldr	r2, [pc, #40]	; (800bb80 <TIM_TimeBaseInit+0xbc>)
 800bb56:	4293      	cmp	r3, r2
 800bb58:	d003      	beq.n	800bb62 <TIM_TimeBaseInit+0x9e>
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	4a09      	ldr	r2, [pc, #36]	; (800bb84 <TIM_TimeBaseInit+0xc0>)
 800bb5e:	4293      	cmp	r3, r2
 800bb60:	d104      	bne.n	800bb6c <TIM_TimeBaseInit+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 800bb62:	683b      	ldr	r3, [r7, #0]
 800bb64:	7a9b      	ldrb	r3, [r3, #10]
 800bb66:	b29a      	uxth	r2, r3
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	2201      	movs	r2, #1
 800bb70:	829a      	strh	r2, [r3, #20]
}
 800bb72:	bf00      	nop
 800bb74:	3714      	adds	r7, #20
 800bb76:	46bd      	mov	sp, r7
 800bb78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb7c:	4770      	bx	lr
 800bb7e:	bf00      	nop
 800bb80:	40010000 	.word	0x40010000
 800bb84:	40010400 	.word	0x40010400
 800bb88:	40000400 	.word	0x40000400
 800bb8c:	40000800 	.word	0x40000800
 800bb90:	40000c00 	.word	0x40000c00
 800bb94:	40001000 	.word	0x40001000
 800bb98:	40001400 	.word	0x40001400

0800bb9c <TIM_TimeBaseStructInit>:
  * @param  TIM_TimeBaseInitStruct : pointer to a TIM_TimeBaseInitTypeDef
  *         structure which will be initialized.
  * @retval None
  */
void TIM_TimeBaseStructInit(TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 800bb9c:	b480      	push	{r7}
 800bb9e:	b083      	sub	sp, #12
 800bba0:	af00      	add	r7, sp, #0
 800bba2:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_TimeBaseInitStruct->TIM_Period = 0xFFFFFFFF;
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bbaa:	605a      	str	r2, [r3, #4]
  TIM_TimeBaseInitStruct->TIM_Prescaler = 0x0000;
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	2200      	movs	r2, #0
 800bbb0:	801a      	strh	r2, [r3, #0]
  TIM_TimeBaseInitStruct->TIM_ClockDivision = TIM_CKD_DIV1;
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	2200      	movs	r2, #0
 800bbb6:	811a      	strh	r2, [r3, #8]
  TIM_TimeBaseInitStruct->TIM_CounterMode = TIM_CounterMode_Up;
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	2200      	movs	r2, #0
 800bbbc:	805a      	strh	r2, [r3, #2]
  TIM_TimeBaseInitStruct->TIM_RepetitionCounter = 0x0000;
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	2200      	movs	r2, #0
 800bbc2:	729a      	strb	r2, [r3, #10]
}
 800bbc4:	bf00      	nop
 800bbc6:	370c      	adds	r7, #12
 800bbc8:	46bd      	mov	sp, r7
 800bbca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbce:	4770      	bx	lr

0800bbd0 <TIM_PrescalerConfig>:
  *            @arg TIM_PSCReloadMode_Update: The Prescaler is loaded at the update event.
  *            @arg TIM_PSCReloadMode_Immediate: The Prescaler is loaded immediatly.
  * @retval None
  */
void TIM_PrescalerConfig(TIM_TypeDef* TIMx, uint16_t Prescaler, uint16_t TIM_PSCReloadMode)
{
 800bbd0:	b480      	push	{r7}
 800bbd2:	b083      	sub	sp, #12
 800bbd4:	af00      	add	r7, sp, #0
 800bbd6:	6078      	str	r0, [r7, #4]
 800bbd8:	460b      	mov	r3, r1
 800bbda:	807b      	strh	r3, [r7, #2]
 800bbdc:	4613      	mov	r3, r2
 800bbde:	803b      	strh	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_PRESCALER_RELOAD(TIM_PSCReloadMode));
  /* Set the Prescaler value */
  TIMx->PSC = Prescaler;
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	887a      	ldrh	r2, [r7, #2]
 800bbe4:	851a      	strh	r2, [r3, #40]	; 0x28
  /* Set or reset the UG Bit */
  TIMx->EGR = TIM_PSCReloadMode;
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	883a      	ldrh	r2, [r7, #0]
 800bbea:	829a      	strh	r2, [r3, #20]
}
 800bbec:	bf00      	nop
 800bbee:	370c      	adds	r7, #12
 800bbf0:	46bd      	mov	sp, r7
 800bbf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbf6:	4770      	bx	lr

0800bbf8 <TIM_CounterModeConfig>:
  *            @arg TIM_CounterMode_CenterAligned2: TIM Center Aligned Mode2
  *            @arg TIM_CounterMode_CenterAligned3: TIM Center Aligned Mode3
  * @retval None
  */
void TIM_CounterModeConfig(TIM_TypeDef* TIMx, uint16_t TIM_CounterMode)
{
 800bbf8:	b480      	push	{r7}
 800bbfa:	b085      	sub	sp, #20
 800bbfc:	af00      	add	r7, sp, #0
 800bbfe:	6078      	str	r0, [r7, #4]
 800bc00:	460b      	mov	r3, r1
 800bc02:	807b      	strh	r3, [r7, #2]
  uint16_t tmpcr1 = 0;
 800bc04:	2300      	movs	r3, #0
 800bc06:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_COUNTER_MODE(TIM_CounterMode));

  tmpcr1 = TIMx->CR1;
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	881b      	ldrh	r3, [r3, #0]
 800bc0c:	81fb      	strh	r3, [r7, #14]

  /* Reset the CMS and DIR Bits */
  tmpcr1 &= (uint16_t)~(TIM_CR1_DIR | TIM_CR1_CMS);
 800bc0e:	89fb      	ldrh	r3, [r7, #14]
 800bc10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bc14:	81fb      	strh	r3, [r7, #14]

  /* Set the Counter Mode */
  tmpcr1 |= TIM_CounterMode;
 800bc16:	89fa      	ldrh	r2, [r7, #14]
 800bc18:	887b      	ldrh	r3, [r7, #2]
 800bc1a:	4313      	orrs	r3, r2
 800bc1c:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CR1 register */
  TIMx->CR1 = tmpcr1;
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	89fa      	ldrh	r2, [r7, #14]
 800bc22:	801a      	strh	r2, [r3, #0]
}
 800bc24:	bf00      	nop
 800bc26:	3714      	adds	r7, #20
 800bc28:	46bd      	mov	sp, r7
 800bc2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc2e:	4770      	bx	lr

0800bc30 <TIM_SetCounter>:
  * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
  * @param  Counter: specifies the Counter register new value.
  * @retval None
  */
void TIM_SetCounter(TIM_TypeDef* TIMx, uint32_t Counter)
{
 800bc30:	b480      	push	{r7}
 800bc32:	b083      	sub	sp, #12
 800bc34:	af00      	add	r7, sp, #0
 800bc36:	6078      	str	r0, [r7, #4]
 800bc38:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
   assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Set the Counter Register value */
  TIMx->CNT = Counter;
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	683a      	ldr	r2, [r7, #0]
 800bc3e:	625a      	str	r2, [r3, #36]	; 0x24
}
 800bc40:	bf00      	nop
 800bc42:	370c      	adds	r7, #12
 800bc44:	46bd      	mov	sp, r7
 800bc46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc4a:	4770      	bx	lr

0800bc4c <TIM_SetAutoreload>:
  * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
  * @param  Autoreload: specifies the Autoreload register new value.
  * @retval None
  */
void TIM_SetAutoreload(TIM_TypeDef* TIMx, uint32_t Autoreload)
{
 800bc4c:	b480      	push	{r7}
 800bc4e:	b083      	sub	sp, #12
 800bc50:	af00      	add	r7, sp, #0
 800bc52:	6078      	str	r0, [r7, #4]
 800bc54:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  
  /* Set the Autoreload Register value */
  TIMx->ARR = Autoreload;
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	683a      	ldr	r2, [r7, #0]
 800bc5a:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800bc5c:	bf00      	nop
 800bc5e:	370c      	adds	r7, #12
 800bc60:	46bd      	mov	sp, r7
 800bc62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc66:	4770      	bx	lr

0800bc68 <TIM_GetCounter>:
  * @brief  Gets the TIMx Counter value.
  * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
  * @retval Counter Register value
  */
uint32_t TIM_GetCounter(TIM_TypeDef* TIMx)
{
 800bc68:	b480      	push	{r7}
 800bc6a:	b083      	sub	sp, #12
 800bc6c:	af00      	add	r7, sp, #0
 800bc6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Get the Counter Register value */
  return TIMx->CNT;
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 800bc74:	4618      	mov	r0, r3
 800bc76:	370c      	adds	r7, #12
 800bc78:	46bd      	mov	sp, r7
 800bc7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc7e:	4770      	bx	lr

0800bc80 <TIM_GetPrescaler>:
  * @brief  Gets the TIMx Prescaler value.
  * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
  * @retval Prescaler Register value.
  */
uint16_t TIM_GetPrescaler(TIM_TypeDef* TIMx)
{
 800bc80:	b480      	push	{r7}
 800bc82:	b083      	sub	sp, #12
 800bc84:	af00      	add	r7, sp, #0
 800bc86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Get the Prescaler Register value */
  return TIMx->PSC;
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bc8c:	b29b      	uxth	r3, r3
}
 800bc8e:	4618      	mov	r0, r3
 800bc90:	370c      	adds	r7, #12
 800bc92:	46bd      	mov	sp, r7
 800bc94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc98:	4770      	bx	lr

0800bc9a <TIM_UpdateDisableConfig>:
  * @param  NewState: new state of the TIMx UDIS bit
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_UpdateDisableConfig(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 800bc9a:	b480      	push	{r7}
 800bc9c:	b083      	sub	sp, #12
 800bc9e:	af00      	add	r7, sp, #0
 800bca0:	6078      	str	r0, [r7, #4]
 800bca2:	460b      	mov	r3, r1
 800bca4:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800bca6:	78fb      	ldrb	r3, [r7, #3]
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	d008      	beq.n	800bcbe <TIM_UpdateDisableConfig+0x24>
  {
    /* Set the Update Disable Bit */
    TIMx->CR1 |= TIM_CR1_UDIS;
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	881b      	ldrh	r3, [r3, #0]
 800bcb0:	b29b      	uxth	r3, r3
 800bcb2:	f043 0302 	orr.w	r3, r3, #2
 800bcb6:	b29a      	uxth	r2, r3
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Reset the Update Disable Bit */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_UDIS;
  }
}
 800bcbc:	e007      	b.n	800bcce <TIM_UpdateDisableConfig+0x34>
    TIMx->CR1 &= (uint16_t)~TIM_CR1_UDIS;
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	881b      	ldrh	r3, [r3, #0]
 800bcc2:	b29b      	uxth	r3, r3
 800bcc4:	f023 0302 	bic.w	r3, r3, #2
 800bcc8:	b29a      	uxth	r2, r3
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	801a      	strh	r2, [r3, #0]
}
 800bcce:	bf00      	nop
 800bcd0:	370c      	adds	r7, #12
 800bcd2:	46bd      	mov	sp, r7
 800bcd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcd8:	4770      	bx	lr

0800bcda <TIM_UpdateRequestConfig>:
  *                 generation through the slave mode controller.
  *            @arg TIM_UpdateSource_Regular: Source of update is counter overflow/underflow.
  * @retval None
  */
void TIM_UpdateRequestConfig(TIM_TypeDef* TIMx, uint16_t TIM_UpdateSource)
{
 800bcda:	b480      	push	{r7}
 800bcdc:	b083      	sub	sp, #12
 800bcde:	af00      	add	r7, sp, #0
 800bce0:	6078      	str	r0, [r7, #4]
 800bce2:	460b      	mov	r3, r1
 800bce4:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_UPDATE_SOURCE(TIM_UpdateSource));

  if (TIM_UpdateSource != TIM_UpdateSource_Global)
 800bce6:	887b      	ldrh	r3, [r7, #2]
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	d008      	beq.n	800bcfe <TIM_UpdateRequestConfig+0x24>
  {
    /* Set the URS Bit */
    TIMx->CR1 |= TIM_CR1_URS;
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	881b      	ldrh	r3, [r3, #0]
 800bcf0:	b29b      	uxth	r3, r3
 800bcf2:	f043 0304 	orr.w	r3, r3, #4
 800bcf6:	b29a      	uxth	r2, r3
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Reset the URS Bit */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_URS;
  }
}
 800bcfc:	e007      	b.n	800bd0e <TIM_UpdateRequestConfig+0x34>
    TIMx->CR1 &= (uint16_t)~TIM_CR1_URS;
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	881b      	ldrh	r3, [r3, #0]
 800bd02:	b29b      	uxth	r3, r3
 800bd04:	f023 0304 	bic.w	r3, r3, #4
 800bd08:	b29a      	uxth	r2, r3
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	801a      	strh	r2, [r3, #0]
}
 800bd0e:	bf00      	nop
 800bd10:	370c      	adds	r7, #12
 800bd12:	46bd      	mov	sp, r7
 800bd14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd18:	4770      	bx	lr

0800bd1a <TIM_ARRPreloadConfig>:
  * @param  NewState: new state of the TIMx peripheral Preload register
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ARRPreloadConfig(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 800bd1a:	b480      	push	{r7}
 800bd1c:	b083      	sub	sp, #12
 800bd1e:	af00      	add	r7, sp, #0
 800bd20:	6078      	str	r0, [r7, #4]
 800bd22:	460b      	mov	r3, r1
 800bd24:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800bd26:	78fb      	ldrb	r3, [r7, #3]
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	d008      	beq.n	800bd3e <TIM_ARRPreloadConfig+0x24>
  {
    /* Set the ARR Preload Bit */
    TIMx->CR1 |= TIM_CR1_ARPE;
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	881b      	ldrh	r3, [r3, #0]
 800bd30:	b29b      	uxth	r3, r3
 800bd32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bd36:	b29a      	uxth	r2, r3
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Reset the ARR Preload Bit */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_ARPE;
  }
}
 800bd3c:	e007      	b.n	800bd4e <TIM_ARRPreloadConfig+0x34>
    TIMx->CR1 &= (uint16_t)~TIM_CR1_ARPE;
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	881b      	ldrh	r3, [r3, #0]
 800bd42:	b29b      	uxth	r3, r3
 800bd44:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bd48:	b29a      	uxth	r2, r3
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	801a      	strh	r2, [r3, #0]
}
 800bd4e:	bf00      	nop
 800bd50:	370c      	adds	r7, #12
 800bd52:	46bd      	mov	sp, r7
 800bd54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd58:	4770      	bx	lr

0800bd5a <TIM_SelectOnePulseMode>:
  *            @arg TIM_OPMode_Single
  *            @arg TIM_OPMode_Repetitive
  * @retval None
  */
void TIM_SelectOnePulseMode(TIM_TypeDef* TIMx, uint16_t TIM_OPMode)
{
 800bd5a:	b480      	push	{r7}
 800bd5c:	b083      	sub	sp, #12
 800bd5e:	af00      	add	r7, sp, #0
 800bd60:	6078      	str	r0, [r7, #4]
 800bd62:	460b      	mov	r3, r1
 800bd64:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_OPM_MODE(TIM_OPMode));

  /* Reset the OPM Bit */
  TIMx->CR1 &= (uint16_t)~TIM_CR1_OPM;
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	881b      	ldrh	r3, [r3, #0]
 800bd6a:	b29b      	uxth	r3, r3
 800bd6c:	f023 0308 	bic.w	r3, r3, #8
 800bd70:	b29a      	uxth	r2, r3
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	801a      	strh	r2, [r3, #0]

  /* Configure the OPM Mode */
  TIMx->CR1 |= TIM_OPMode;
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	881b      	ldrh	r3, [r3, #0]
 800bd7a:	b29a      	uxth	r2, r3
 800bd7c:	887b      	ldrh	r3, [r7, #2]
 800bd7e:	4313      	orrs	r3, r2
 800bd80:	b29a      	uxth	r2, r3
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	801a      	strh	r2, [r3, #0]
}
 800bd86:	bf00      	nop
 800bd88:	370c      	adds	r7, #12
 800bd8a:	46bd      	mov	sp, r7
 800bd8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd90:	4770      	bx	lr

0800bd92 <TIM_SetClockDivision>:
  *            @arg TIM_CKD_DIV2: TDTS = 2*Tck_tim
  *            @arg TIM_CKD_DIV4: TDTS = 4*Tck_tim
  * @retval None
  */
void TIM_SetClockDivision(TIM_TypeDef* TIMx, uint16_t TIM_CKD)
{
 800bd92:	b480      	push	{r7}
 800bd94:	b083      	sub	sp, #12
 800bd96:	af00      	add	r7, sp, #0
 800bd98:	6078      	str	r0, [r7, #4]
 800bd9a:	460b      	mov	r3, r1
 800bd9c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_CKD_DIV(TIM_CKD));

  /* Reset the CKD Bits */
  TIMx->CR1 &= (uint16_t)(~TIM_CR1_CKD);
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	881b      	ldrh	r3, [r3, #0]
 800bda2:	b29b      	uxth	r3, r3
 800bda4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bda8:	b29a      	uxth	r2, r3
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	801a      	strh	r2, [r3, #0]

  /* Set the CKD value */
  TIMx->CR1 |= TIM_CKD;
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	881b      	ldrh	r3, [r3, #0]
 800bdb2:	b29a      	uxth	r2, r3
 800bdb4:	887b      	ldrh	r3, [r7, #2]
 800bdb6:	4313      	orrs	r3, r2
 800bdb8:	b29a      	uxth	r2, r3
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	801a      	strh	r2, [r3, #0]
}
 800bdbe:	bf00      	nop
 800bdc0:	370c      	adds	r7, #12
 800bdc2:	46bd      	mov	sp, r7
 800bdc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdc8:	4770      	bx	lr

0800bdca <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 800bdca:	b480      	push	{r7}
 800bdcc:	b083      	sub	sp, #12
 800bdce:	af00      	add	r7, sp, #0
 800bdd0:	6078      	str	r0, [r7, #4]
 800bdd2:	460b      	mov	r3, r1
 800bdd4:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800bdd6:	78fb      	ldrb	r3, [r7, #3]
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	d008      	beq.n	800bdee <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	881b      	ldrh	r3, [r3, #0]
 800bde0:	b29b      	uxth	r3, r3
 800bde2:	f043 0301 	orr.w	r3, r3, #1
 800bde6:	b29a      	uxth	r2, r3
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
  }
}
 800bdec:	e007      	b.n	800bdfe <TIM_Cmd+0x34>
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	881b      	ldrh	r3, [r3, #0]
 800bdf2:	b29b      	uxth	r3, r3
 800bdf4:	f023 0301 	bic.w	r3, r3, #1
 800bdf8:	b29a      	uxth	r2, r3
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	801a      	strh	r2, [r3, #0]
}
 800bdfe:	bf00      	nop
 800be00:	370c      	adds	r7, #12
 800be02:	46bd      	mov	sp, r7
 800be04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be08:	4770      	bx	lr

0800be0a <TIM_OC1Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC1Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 800be0a:	b480      	push	{r7}
 800be0c:	b085      	sub	sp, #20
 800be0e:	af00      	add	r7, sp, #0
 800be10:	6078      	str	r0, [r7, #4]
 800be12:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 800be14:	2300      	movs	r3, #0
 800be16:	817b      	strh	r3, [r7, #10]
 800be18:	2300      	movs	r3, #0
 800be1a:	81fb      	strh	r3, [r7, #14]
 800be1c:	2300      	movs	r3, #0
 800be1e:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	8c1b      	ldrh	r3, [r3, #32]
 800be24:	b29b      	uxth	r3, r3
 800be26:	f023 0301 	bic.w	r3, r3, #1
 800be2a:	b29a      	uxth	r2, r3
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	8c1b      	ldrh	r3, [r3, #32]
 800be34:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	889b      	ldrh	r3, [r3, #4]
 800be3a:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	8b1b      	ldrh	r3, [r3, #24]
 800be40:	817b      	strh	r3, [r7, #10]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC1M;
 800be42:	897b      	ldrh	r3, [r7, #10]
 800be44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800be48:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC1S;
 800be4a:	897b      	ldrh	r3, [r7, #10]
 800be4c:	f023 0303 	bic.w	r3, r3, #3
 800be50:	817b      	strh	r3, [r7, #10]
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 800be52:	683b      	ldr	r3, [r7, #0]
 800be54:	881a      	ldrh	r2, [r3, #0]
 800be56:	897b      	ldrh	r3, [r7, #10]
 800be58:	4313      	orrs	r3, r2
 800be5a:	817b      	strh	r3, [r7, #10]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC1P;
 800be5c:	89fb      	ldrh	r3, [r7, #14]
 800be5e:	f023 0302 	bic.w	r3, r3, #2
 800be62:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
 800be64:	683b      	ldr	r3, [r7, #0]
 800be66:	899a      	ldrh	r2, [r3, #12]
 800be68:	89fb      	ldrh	r3, [r7, #14]
 800be6a:	4313      	orrs	r3, r2
 800be6c:	81fb      	strh	r3, [r7, #14]
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 800be6e:	683b      	ldr	r3, [r7, #0]
 800be70:	885a      	ldrh	r2, [r3, #2]
 800be72:	89fb      	ldrh	r3, [r7, #14]
 800be74:	4313      	orrs	r3, r2
 800be76:	81fb      	strh	r3, [r7, #14]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	4a1f      	ldr	r2, [pc, #124]	; (800bef8 <TIM_OC1Init+0xee>)
 800be7c:	4293      	cmp	r3, r2
 800be7e:	d003      	beq.n	800be88 <TIM_OC1Init+0x7e>
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	4a1e      	ldr	r2, [pc, #120]	; (800befc <TIM_OC1Init+0xf2>)
 800be84:	4293      	cmp	r3, r2
 800be86:	d123      	bne.n	800bed0 <TIM_OC1Init+0xc6>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NP;
 800be88:	89fb      	ldrh	r3, [r7, #14]
 800be8a:	f023 0308 	bic.w	r3, r3, #8
 800be8e:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
 800be90:	683b      	ldr	r3, [r7, #0]
 800be92:	89da      	ldrh	r2, [r3, #14]
 800be94:	89fb      	ldrh	r3, [r7, #14]
 800be96:	4313      	orrs	r3, r2
 800be98:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NE;
 800be9a:	89fb      	ldrh	r3, [r7, #14]
 800be9c:	f023 0304 	bic.w	r3, r3, #4
 800bea0:	81fb      	strh	r3, [r7, #14]
    
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
 800bea2:	683b      	ldr	r3, [r7, #0]
 800bea4:	889a      	ldrh	r2, [r3, #4]
 800bea6:	89fb      	ldrh	r3, [r7, #14]
 800bea8:	4313      	orrs	r3, r2
 800beaa:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1;
 800beac:	89bb      	ldrh	r3, [r7, #12]
 800beae:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800beb2:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1N;
 800beb4:	89bb      	ldrh	r3, [r7, #12]
 800beb6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800beba:	81bb      	strh	r3, [r7, #12]
    /* Set the Output Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
 800bebc:	683b      	ldr	r3, [r7, #0]
 800bebe:	8a1a      	ldrh	r2, [r3, #16]
 800bec0:	89bb      	ldrh	r3, [r7, #12]
 800bec2:	4313      	orrs	r3, r2
 800bec4:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
 800bec6:	683b      	ldr	r3, [r7, #0]
 800bec8:	8a5a      	ldrh	r2, [r3, #18]
 800beca:	89bb      	ldrh	r3, [r7, #12]
 800becc:	4313      	orrs	r3, r2
 800bece:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	89ba      	ldrh	r2, [r7, #12]
 800bed4:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	897a      	ldrh	r2, [r7, #10]
 800beda:	831a      	strh	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse;
 800bedc:	683b      	ldr	r3, [r7, #0]
 800bede:	689a      	ldr	r2, [r3, #8]
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	635a      	str	r2, [r3, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	89fa      	ldrh	r2, [r7, #14]
 800bee8:	841a      	strh	r2, [r3, #32]
}
 800beea:	bf00      	nop
 800beec:	3714      	adds	r7, #20
 800beee:	46bd      	mov	sp, r7
 800bef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bef4:	4770      	bx	lr
 800bef6:	bf00      	nop
 800bef8:	40010000 	.word	0x40010000
 800befc:	40010400 	.word	0x40010400

0800bf00 <TIM_OC2Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC2Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 800bf00:	b480      	push	{r7}
 800bf02:	b085      	sub	sp, #20
 800bf04:	af00      	add	r7, sp, #0
 800bf06:	6078      	str	r0, [r7, #4]
 800bf08:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 800bf0a:	2300      	movs	r3, #0
 800bf0c:	817b      	strh	r3, [r7, #10]
 800bf0e:	2300      	movs	r3, #0
 800bf10:	81fb      	strh	r3, [r7, #14]
 800bf12:	2300      	movs	r3, #0
 800bf14:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	8c1b      	ldrh	r3, [r3, #32]
 800bf1a:	b29b      	uxth	r3, r3
 800bf1c:	f023 0310 	bic.w	r3, r3, #16
 800bf20:	b29a      	uxth	r2, r3
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	8c1b      	ldrh	r3, [r3, #32]
 800bf2a:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	889b      	ldrh	r3, [r3, #4]
 800bf30:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	8b1b      	ldrh	r3, [r3, #24]
 800bf36:	817b      	strh	r3, [r7, #10]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC2M;
 800bf38:	897b      	ldrh	r3, [r7, #10]
 800bf3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bf3e:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC2S;
 800bf40:	897b      	ldrh	r3, [r7, #10]
 800bf42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bf46:	817b      	strh	r3, [r7, #10]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 800bf48:	683b      	ldr	r3, [r7, #0]
 800bf4a:	881b      	ldrh	r3, [r3, #0]
 800bf4c:	021b      	lsls	r3, r3, #8
 800bf4e:	b29a      	uxth	r2, r3
 800bf50:	897b      	ldrh	r3, [r7, #10]
 800bf52:	4313      	orrs	r3, r2
 800bf54:	817b      	strh	r3, [r7, #10]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC2P;
 800bf56:	89fb      	ldrh	r3, [r7, #14]
 800bf58:	f023 0320 	bic.w	r3, r3, #32
 800bf5c:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
 800bf5e:	683b      	ldr	r3, [r7, #0]
 800bf60:	899b      	ldrh	r3, [r3, #12]
 800bf62:	011b      	lsls	r3, r3, #4
 800bf64:	b29a      	uxth	r2, r3
 800bf66:	89fb      	ldrh	r3, [r7, #14]
 800bf68:	4313      	orrs	r3, r2
 800bf6a:	81fb      	strh	r3, [r7, #14]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
 800bf6c:	683b      	ldr	r3, [r7, #0]
 800bf6e:	885b      	ldrh	r3, [r3, #2]
 800bf70:	011b      	lsls	r3, r3, #4
 800bf72:	b29a      	uxth	r2, r3
 800bf74:	89fb      	ldrh	r3, [r7, #14]
 800bf76:	4313      	orrs	r3, r2
 800bf78:	81fb      	strh	r3, [r7, #14]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	4a22      	ldr	r2, [pc, #136]	; (800c008 <TIM_OC2Init+0x108>)
 800bf7e:	4293      	cmp	r3, r2
 800bf80:	d003      	beq.n	800bf8a <TIM_OC2Init+0x8a>
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	4a21      	ldr	r2, [pc, #132]	; (800c00c <TIM_OC2Init+0x10c>)
 800bf86:	4293      	cmp	r3, r2
 800bf88:	d12b      	bne.n	800bfe2 <TIM_OC2Init+0xe2>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NP;
 800bf8a:	89fb      	ldrh	r3, [r7, #14]
 800bf8c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bf90:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
 800bf92:	683b      	ldr	r3, [r7, #0]
 800bf94:	89db      	ldrh	r3, [r3, #14]
 800bf96:	011b      	lsls	r3, r3, #4
 800bf98:	b29a      	uxth	r2, r3
 800bf9a:	89fb      	ldrh	r3, [r7, #14]
 800bf9c:	4313      	orrs	r3, r2
 800bf9e:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NE;
 800bfa0:	89fb      	ldrh	r3, [r7, #14]
 800bfa2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bfa6:	81fb      	strh	r3, [r7, #14]
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
 800bfa8:	683b      	ldr	r3, [r7, #0]
 800bfaa:	889b      	ldrh	r3, [r3, #4]
 800bfac:	011b      	lsls	r3, r3, #4
 800bfae:	b29a      	uxth	r2, r3
 800bfb0:	89fb      	ldrh	r3, [r7, #14]
 800bfb2:	4313      	orrs	r3, r2
 800bfb4:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2;
 800bfb6:	89bb      	ldrh	r3, [r7, #12]
 800bfb8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800bfbc:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2N;
 800bfbe:	89bb      	ldrh	r3, [r7, #12]
 800bfc0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800bfc4:	81bb      	strh	r3, [r7, #12]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
 800bfc6:	683b      	ldr	r3, [r7, #0]
 800bfc8:	8a1b      	ldrh	r3, [r3, #16]
 800bfca:	009b      	lsls	r3, r3, #2
 800bfcc:	b29a      	uxth	r2, r3
 800bfce:	89bb      	ldrh	r3, [r7, #12]
 800bfd0:	4313      	orrs	r3, r2
 800bfd2:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
 800bfd4:	683b      	ldr	r3, [r7, #0]
 800bfd6:	8a5b      	ldrh	r3, [r3, #18]
 800bfd8:	009b      	lsls	r3, r3, #2
 800bfda:	b29a      	uxth	r2, r3
 800bfdc:	89bb      	ldrh	r3, [r7, #12]
 800bfde:	4313      	orrs	r3, r2
 800bfe0:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	89ba      	ldrh	r2, [r7, #12]
 800bfe6:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	897a      	ldrh	r2, [r7, #10]
 800bfec:	831a      	strh	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = TIM_OCInitStruct->TIM_Pulse;
 800bfee:	683b      	ldr	r3, [r7, #0]
 800bff0:	689a      	ldr	r2, [r3, #8]
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	89fa      	ldrh	r2, [r7, #14]
 800bffa:	841a      	strh	r2, [r3, #32]
}
 800bffc:	bf00      	nop
 800bffe:	3714      	adds	r7, #20
 800c000:	46bd      	mov	sp, r7
 800c002:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c006:	4770      	bx	lr
 800c008:	40010000 	.word	0x40010000
 800c00c:	40010400 	.word	0x40010400

0800c010 <TIM_OC3Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC3Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 800c010:	b480      	push	{r7}
 800c012:	b085      	sub	sp, #20
 800c014:	af00      	add	r7, sp, #0
 800c016:	6078      	str	r0, [r7, #4]
 800c018:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 800c01a:	2300      	movs	r3, #0
 800c01c:	817b      	strh	r3, [r7, #10]
 800c01e:	2300      	movs	r3, #0
 800c020:	81fb      	strh	r3, [r7, #14]
 800c022:	2300      	movs	r3, #0
 800c024:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	8c1b      	ldrh	r3, [r3, #32]
 800c02a:	b29b      	uxth	r3, r3
 800c02c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c030:	b29a      	uxth	r2, r3
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	8c1b      	ldrh	r3, [r3, #32]
 800c03a:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	889b      	ldrh	r3, [r3, #4]
 800c040:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	8b9b      	ldrh	r3, [r3, #28]
 800c046:	817b      	strh	r3, [r7, #10]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC3M;
 800c048:	897b      	ldrh	r3, [r7, #10]
 800c04a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c04e:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC3S;  
 800c050:	897b      	ldrh	r3, [r7, #10]
 800c052:	f023 0303 	bic.w	r3, r3, #3
 800c056:	817b      	strh	r3, [r7, #10]
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 800c058:	683b      	ldr	r3, [r7, #0]
 800c05a:	881a      	ldrh	r2, [r3, #0]
 800c05c:	897b      	ldrh	r3, [r7, #10]
 800c05e:	4313      	orrs	r3, r2
 800c060:	817b      	strh	r3, [r7, #10]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
 800c062:	89fb      	ldrh	r3, [r7, #14]
 800c064:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c068:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
 800c06a:	683b      	ldr	r3, [r7, #0]
 800c06c:	899b      	ldrh	r3, [r3, #12]
 800c06e:	021b      	lsls	r3, r3, #8
 800c070:	b29a      	uxth	r2, r3
 800c072:	89fb      	ldrh	r3, [r7, #14]
 800c074:	4313      	orrs	r3, r2
 800c076:	81fb      	strh	r3, [r7, #14]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 800c078:	683b      	ldr	r3, [r7, #0]
 800c07a:	885b      	ldrh	r3, [r3, #2]
 800c07c:	021b      	lsls	r3, r3, #8
 800c07e:	b29a      	uxth	r2, r3
 800c080:	89fb      	ldrh	r3, [r7, #14]
 800c082:	4313      	orrs	r3, r2
 800c084:	81fb      	strh	r3, [r7, #14]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	4a22      	ldr	r2, [pc, #136]	; (800c114 <TIM_OC3Init+0x104>)
 800c08a:	4293      	cmp	r3, r2
 800c08c:	d003      	beq.n	800c096 <TIM_OC3Init+0x86>
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	4a21      	ldr	r2, [pc, #132]	; (800c118 <TIM_OC3Init+0x108>)
 800c092:	4293      	cmp	r3, r2
 800c094:	d12b      	bne.n	800c0ee <TIM_OC3Init+0xde>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NP;
 800c096:	89fb      	ldrh	r3, [r7, #14]
 800c098:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c09c:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
 800c09e:	683b      	ldr	r3, [r7, #0]
 800c0a0:	89db      	ldrh	r3, [r3, #14]
 800c0a2:	021b      	lsls	r3, r3, #8
 800c0a4:	b29a      	uxth	r2, r3
 800c0a6:	89fb      	ldrh	r3, [r7, #14]
 800c0a8:	4313      	orrs	r3, r2
 800c0aa:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NE;
 800c0ac:	89fb      	ldrh	r3, [r7, #14]
 800c0ae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c0b2:	81fb      	strh	r3, [r7, #14]
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
 800c0b4:	683b      	ldr	r3, [r7, #0]
 800c0b6:	889b      	ldrh	r3, [r3, #4]
 800c0b8:	021b      	lsls	r3, r3, #8
 800c0ba:	b29a      	uxth	r2, r3
 800c0bc:	89fb      	ldrh	r3, [r7, #14]
 800c0be:	4313      	orrs	r3, r2
 800c0c0:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3;
 800c0c2:	89bb      	ldrh	r3, [r7, #12]
 800c0c4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c0c8:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3N;
 800c0ca:	89bb      	ldrh	r3, [r7, #12]
 800c0cc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c0d0:	81bb      	strh	r3, [r7, #12]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
 800c0d2:	683b      	ldr	r3, [r7, #0]
 800c0d4:	8a1b      	ldrh	r3, [r3, #16]
 800c0d6:	011b      	lsls	r3, r3, #4
 800c0d8:	b29a      	uxth	r2, r3
 800c0da:	89bb      	ldrh	r3, [r7, #12]
 800c0dc:	4313      	orrs	r3, r2
 800c0de:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
 800c0e0:	683b      	ldr	r3, [r7, #0]
 800c0e2:	8a5b      	ldrh	r3, [r3, #18]
 800c0e4:	011b      	lsls	r3, r3, #4
 800c0e6:	b29a      	uxth	r2, r3
 800c0e8:	89bb      	ldrh	r3, [r7, #12]
 800c0ea:	4313      	orrs	r3, r2
 800c0ec:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	89ba      	ldrh	r2, [r7, #12]
 800c0f2:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	897a      	ldrh	r2, [r7, #10]
 800c0f8:	839a      	strh	r2, [r3, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
 800c0fa:	683b      	ldr	r3, [r7, #0]
 800c0fc:	689a      	ldr	r2, [r3, #8]
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	89fa      	ldrh	r2, [r7, #14]
 800c106:	841a      	strh	r2, [r3, #32]
}
 800c108:	bf00      	nop
 800c10a:	3714      	adds	r7, #20
 800c10c:	46bd      	mov	sp, r7
 800c10e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c112:	4770      	bx	lr
 800c114:	40010000 	.word	0x40010000
 800c118:	40010400 	.word	0x40010400

0800c11c <TIM_OC4Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC4Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 800c11c:	b480      	push	{r7}
 800c11e:	b085      	sub	sp, #20
 800c120:	af00      	add	r7, sp, #0
 800c122:	6078      	str	r0, [r7, #4]
 800c124:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 800c126:	2300      	movs	r3, #0
 800c128:	81bb      	strh	r3, [r7, #12]
 800c12a:	2300      	movs	r3, #0
 800c12c:	817b      	strh	r3, [r7, #10]
 800c12e:	2300      	movs	r3, #0
 800c130:	81fb      	strh	r3, [r7, #14]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC4E;
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	8c1b      	ldrh	r3, [r3, #32]
 800c136:	b29b      	uxth	r3, r3
 800c138:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c13c:	b29a      	uxth	r2, r3
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	8c1b      	ldrh	r3, [r3, #32]
 800c146:	817b      	strh	r3, [r7, #10]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	889b      	ldrh	r3, [r3, #4]
 800c14c:	81fb      	strh	r3, [r7, #14]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	8b9b      	ldrh	r3, [r3, #28]
 800c152:	81bb      	strh	r3, [r7, #12]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC4M;
 800c154:	89bb      	ldrh	r3, [r7, #12]
 800c156:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c15a:	81bb      	strh	r3, [r7, #12]
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC4S;
 800c15c:	89bb      	ldrh	r3, [r7, #12]
 800c15e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c162:	81bb      	strh	r3, [r7, #12]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 800c164:	683b      	ldr	r3, [r7, #0]
 800c166:	881b      	ldrh	r3, [r3, #0]
 800c168:	021b      	lsls	r3, r3, #8
 800c16a:	b29a      	uxth	r2, r3
 800c16c:	89bb      	ldrh	r3, [r7, #12]
 800c16e:	4313      	orrs	r3, r2
 800c170:	81bb      	strh	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
 800c172:	897b      	ldrh	r3, [r7, #10]
 800c174:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c178:	817b      	strh	r3, [r7, #10]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
 800c17a:	683b      	ldr	r3, [r7, #0]
 800c17c:	899b      	ldrh	r3, [r3, #12]
 800c17e:	031b      	lsls	r3, r3, #12
 800c180:	b29a      	uxth	r2, r3
 800c182:	897b      	ldrh	r3, [r7, #10]
 800c184:	4313      	orrs	r3, r2
 800c186:	817b      	strh	r3, [r7, #10]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
 800c188:	683b      	ldr	r3, [r7, #0]
 800c18a:	885b      	ldrh	r3, [r3, #2]
 800c18c:	031b      	lsls	r3, r3, #12
 800c18e:	b29a      	uxth	r2, r3
 800c190:	897b      	ldrh	r3, [r7, #10]
 800c192:	4313      	orrs	r3, r2
 800c194:	817b      	strh	r3, [r7, #10]
  
  if((TIMx == TIM1) || (TIMx == TIM8))
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	4a12      	ldr	r2, [pc, #72]	; (800c1e4 <TIM_OC4Init+0xc8>)
 800c19a:	4293      	cmp	r3, r2
 800c19c:	d003      	beq.n	800c1a6 <TIM_OC4Init+0x8a>
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	4a11      	ldr	r2, [pc, #68]	; (800c1e8 <TIM_OC4Init+0xcc>)
 800c1a2:	4293      	cmp	r3, r2
 800c1a4:	d10a      	bne.n	800c1bc <TIM_OC4Init+0xa0>
  {
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &=(uint16_t) ~TIM_CR2_OIS4;
 800c1a6:	89fb      	ldrh	r3, [r7, #14]
 800c1a8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c1ac:	81fb      	strh	r3, [r7, #14]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 6);
 800c1ae:	683b      	ldr	r3, [r7, #0]
 800c1b0:	8a1b      	ldrh	r3, [r3, #16]
 800c1b2:	019b      	lsls	r3, r3, #6
 800c1b4:	b29a      	uxth	r2, r3
 800c1b6:	89fb      	ldrh	r3, [r7, #14]
 800c1b8:	4313      	orrs	r3, r2
 800c1ba:	81fb      	strh	r3, [r7, #14]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	89fa      	ldrh	r2, [r7, #14]
 800c1c0:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	89ba      	ldrh	r2, [r7, #12]
 800c1c6:	839a      	strh	r2, [r3, #28]
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = TIM_OCInitStruct->TIM_Pulse;
 800c1c8:	683b      	ldr	r3, [r7, #0]
 800c1ca:	689a      	ldr	r2, [r3, #8]
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	897a      	ldrh	r2, [r7, #10]
 800c1d4:	841a      	strh	r2, [r3, #32]
}
 800c1d6:	bf00      	nop
 800c1d8:	3714      	adds	r7, #20
 800c1da:	46bd      	mov	sp, r7
 800c1dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1e0:	4770      	bx	lr
 800c1e2:	bf00      	nop
 800c1e4:	40010000 	.word	0x40010000
 800c1e8:	40010400 	.word	0x40010400

0800c1ec <TIM_OCStructInit>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void TIM_OCStructInit(TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 800c1ec:	b480      	push	{r7}
 800c1ee:	b083      	sub	sp, #12
 800c1f0:	af00      	add	r7, sp, #0
 800c1f2:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_OCInitStruct->TIM_OCMode = TIM_OCMode_Timing;
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	2200      	movs	r2, #0
 800c1f8:	801a      	strh	r2, [r3, #0]
  TIM_OCInitStruct->TIM_OutputState = TIM_OutputState_Disable;
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	2200      	movs	r2, #0
 800c1fe:	805a      	strh	r2, [r3, #2]
  TIM_OCInitStruct->TIM_OutputNState = TIM_OutputNState_Disable;
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	2200      	movs	r2, #0
 800c204:	809a      	strh	r2, [r3, #4]
  TIM_OCInitStruct->TIM_Pulse = 0x00000000;
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	2200      	movs	r2, #0
 800c20a:	609a      	str	r2, [r3, #8]
  TIM_OCInitStruct->TIM_OCPolarity = TIM_OCPolarity_High;
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	2200      	movs	r2, #0
 800c210:	819a      	strh	r2, [r3, #12]
  TIM_OCInitStruct->TIM_OCNPolarity = TIM_OCPolarity_High;
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	2200      	movs	r2, #0
 800c216:	81da      	strh	r2, [r3, #14]
  TIM_OCInitStruct->TIM_OCIdleState = TIM_OCIdleState_Reset;
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	2200      	movs	r2, #0
 800c21c:	821a      	strh	r2, [r3, #16]
  TIM_OCInitStruct->TIM_OCNIdleState = TIM_OCNIdleState_Reset;
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	2200      	movs	r2, #0
 800c222:	825a      	strh	r2, [r3, #18]
}
 800c224:	bf00      	nop
 800c226:	370c      	adds	r7, #12
 800c228:	46bd      	mov	sp, r7
 800c22a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c22e:	4770      	bx	lr

0800c230 <TIM_SelectOCxM>:
  *            @arg TIM_ForcedAction_Active
  *            @arg TIM_ForcedAction_InActive
  * @retval None
  */
void TIM_SelectOCxM(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_OCMode)
{
 800c230:	b480      	push	{r7}
 800c232:	b085      	sub	sp, #20
 800c234:	af00      	add	r7, sp, #0
 800c236:	6078      	str	r0, [r7, #4]
 800c238:	460b      	mov	r3, r1
 800c23a:	807b      	strh	r3, [r7, #2]
 800c23c:	4613      	mov	r3, r2
 800c23e:	803b      	strh	r3, [r7, #0]
  uint32_t tmp = 0;
 800c240:	2300      	movs	r3, #0
 800c242:	60fb      	str	r3, [r7, #12]
  uint16_t tmp1 = 0;
 800c244:	2300      	movs	r3, #0
 800c246:	817b      	strh	r3, [r7, #10]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_OCM(TIM_OCMode));

  tmp = (uint32_t) TIMx;
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	60fb      	str	r3, [r7, #12]
  tmp += CCMR_OFFSET;
 800c24c:	68fb      	ldr	r3, [r7, #12]
 800c24e:	3318      	adds	r3, #24
 800c250:	60fb      	str	r3, [r7, #12]

  tmp1 = CCER_CCE_SET << (uint16_t)TIM_Channel;
 800c252:	887b      	ldrh	r3, [r7, #2]
 800c254:	2201      	movs	r2, #1
 800c256:	fa02 f303 	lsl.w	r3, r2, r3
 800c25a:	817b      	strh	r3, [r7, #10]

  /* Disable the Channel: Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t) ~tmp1;
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	8c1b      	ldrh	r3, [r3, #32]
 800c260:	b29a      	uxth	r2, r3
 800c262:	897b      	ldrh	r3, [r7, #10]
 800c264:	43db      	mvns	r3, r3
 800c266:	b29b      	uxth	r3, r3
 800c268:	4013      	ands	r3, r2
 800c26a:	b29a      	uxth	r2, r3
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	841a      	strh	r2, [r3, #32]

  if((TIM_Channel == TIM_Channel_1) ||(TIM_Channel == TIM_Channel_3))
 800c270:	887b      	ldrh	r3, [r7, #2]
 800c272:	2b00      	cmp	r3, #0
 800c274:	d002      	beq.n	800c27c <TIM_SelectOCxM+0x4c>
 800c276:	887b      	ldrh	r3, [r7, #2]
 800c278:	2b08      	cmp	r3, #8
 800c27a:	d114      	bne.n	800c2a6 <TIM_SelectOCxM+0x76>
  {
    tmp += (TIM_Channel>>1);
 800c27c:	887b      	ldrh	r3, [r7, #2]
 800c27e:	085b      	lsrs	r3, r3, #1
 800c280:	b29b      	uxth	r3, r3
 800c282:	461a      	mov	r2, r3
 800c284:	68fb      	ldr	r3, [r7, #12]
 800c286:	4413      	add	r3, r2
 800c288:	60fb      	str	r3, [r7, #12]

    /* Reset the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp &= CCMR_OC13M_MASK;
 800c28a:	68fb      	ldr	r3, [r7, #12]
 800c28c:	6819      	ldr	r1, [r3, #0]
 800c28e:	68fa      	ldr	r2, [r7, #12]
 800c290:	f64f 738f 	movw	r3, #65423	; 0xff8f
 800c294:	400b      	ands	r3, r1
 800c296:	6013      	str	r3, [r2, #0]
   
    /* Configure the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp |= TIM_OCMode;
 800c298:	68fb      	ldr	r3, [r7, #12]
 800c29a:	6819      	ldr	r1, [r3, #0]
 800c29c:	883a      	ldrh	r2, [r7, #0]
 800c29e:	68fb      	ldr	r3, [r7, #12]
 800c2a0:	430a      	orrs	r2, r1
 800c2a2:	601a      	str	r2, [r3, #0]
 800c2a4:	e018      	b.n	800c2d8 <TIM_SelectOCxM+0xa8>
  }
  else
  {
    tmp += (uint16_t)(TIM_Channel - (uint16_t)4)>> (uint16_t)1;
 800c2a6:	887b      	ldrh	r3, [r7, #2]
 800c2a8:	3b04      	subs	r3, #4
 800c2aa:	b29b      	uxth	r3, r3
 800c2ac:	085b      	lsrs	r3, r3, #1
 800c2ae:	b29b      	uxth	r3, r3
 800c2b0:	461a      	mov	r2, r3
 800c2b2:	68fb      	ldr	r3, [r7, #12]
 800c2b4:	4413      	add	r3, r2
 800c2b6:	60fb      	str	r3, [r7, #12]

    /* Reset the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp &= CCMR_OC24M_MASK;
 800c2b8:	68fb      	ldr	r3, [r7, #12]
 800c2ba:	6819      	ldr	r1, [r3, #0]
 800c2bc:	68fa      	ldr	r2, [r7, #12]
 800c2be:	f648 73ff 	movw	r3, #36863	; 0x8fff
 800c2c2:	400b      	ands	r3, r1
 800c2c4:	6013      	str	r3, [r2, #0]
    
    /* Configure the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp |= (uint16_t)(TIM_OCMode << 8);
 800c2c6:	68fb      	ldr	r3, [r7, #12]
 800c2c8:	681a      	ldr	r2, [r3, #0]
 800c2ca:	883b      	ldrh	r3, [r7, #0]
 800c2cc:	021b      	lsls	r3, r3, #8
 800c2ce:	b29b      	uxth	r3, r3
 800c2d0:	4619      	mov	r1, r3
 800c2d2:	68fb      	ldr	r3, [r7, #12]
 800c2d4:	430a      	orrs	r2, r1
 800c2d6:	601a      	str	r2, [r3, #0]
  }
}
 800c2d8:	bf00      	nop
 800c2da:	3714      	adds	r7, #20
 800c2dc:	46bd      	mov	sp, r7
 800c2de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2e2:	4770      	bx	lr

0800c2e4 <TIM_SetCompare1>:
  * @param  TIMx: where x can be 1 to 14 except 6 and 7, to select the TIM peripheral.
  * @param  Compare1: specifies the Capture Compare1 register new value.
  * @retval None
  */
void TIM_SetCompare1(TIM_TypeDef* TIMx, uint32_t Compare1)
{
 800c2e4:	b480      	push	{r7}
 800c2e6:	b083      	sub	sp, #12
 800c2e8:	af00      	add	r7, sp, #0
 800c2ea:	6078      	str	r0, [r7, #4]
 800c2ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));

  /* Set the Capture Compare1 Register value */
  TIMx->CCR1 = Compare1;
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	683a      	ldr	r2, [r7, #0]
 800c2f2:	635a      	str	r2, [r3, #52]	; 0x34
}
 800c2f4:	bf00      	nop
 800c2f6:	370c      	adds	r7, #12
 800c2f8:	46bd      	mov	sp, r7
 800c2fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2fe:	4770      	bx	lr

0800c300 <TIM_SetCompare2>:
  *         peripheral.
  * @param  Compare2: specifies the Capture Compare2 register new value.
  * @retval None
  */
void TIM_SetCompare2(TIM_TypeDef* TIMx, uint32_t Compare2)
{
 800c300:	b480      	push	{r7}
 800c302:	b083      	sub	sp, #12
 800c304:	af00      	add	r7, sp, #0
 800c306:	6078      	str	r0, [r7, #4]
 800c308:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Set the Capture Compare2 Register value */
  TIMx->CCR2 = Compare2;
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	683a      	ldr	r2, [r7, #0]
 800c30e:	639a      	str	r2, [r3, #56]	; 0x38
}
 800c310:	bf00      	nop
 800c312:	370c      	adds	r7, #12
 800c314:	46bd      	mov	sp, r7
 800c316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c31a:	4770      	bx	lr

0800c31c <TIM_SetCompare3>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @param  Compare3: specifies the Capture Compare3 register new value.
  * @retval None
  */
void TIM_SetCompare3(TIM_TypeDef* TIMx, uint32_t Compare3)
{
 800c31c:	b480      	push	{r7}
 800c31e:	b083      	sub	sp, #12
 800c320:	af00      	add	r7, sp, #0
 800c322:	6078      	str	r0, [r7, #4]
 800c324:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));

  /* Set the Capture Compare3 Register value */
  TIMx->CCR3 = Compare3;
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	683a      	ldr	r2, [r7, #0]
 800c32a:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800c32c:	bf00      	nop
 800c32e:	370c      	adds	r7, #12
 800c330:	46bd      	mov	sp, r7
 800c332:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c336:	4770      	bx	lr

0800c338 <TIM_SetCompare4>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @param  Compare4: specifies the Capture Compare4 register new value.
  * @retval None
  */
void TIM_SetCompare4(TIM_TypeDef* TIMx, uint32_t Compare4)
{
 800c338:	b480      	push	{r7}
 800c33a:	b083      	sub	sp, #12
 800c33c:	af00      	add	r7, sp, #0
 800c33e:	6078      	str	r0, [r7, #4]
 800c340:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));

  /* Set the Capture Compare4 Register value */
  TIMx->CCR4 = Compare4;
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	683a      	ldr	r2, [r7, #0]
 800c346:	641a      	str	r2, [r3, #64]	; 0x40
}
 800c348:	bf00      	nop
 800c34a:	370c      	adds	r7, #12
 800c34c:	46bd      	mov	sp, r7
 800c34e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c352:	4770      	bx	lr

0800c354 <TIM_ForcedOC1Config>:
  *            @arg TIM_ForcedAction_Active: Force active level on OC1REF
  *            @arg TIM_ForcedAction_InActive: Force inactive level on OC1REF.
  * @retval None
  */
void TIM_ForcedOC1Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
{
 800c354:	b480      	push	{r7}
 800c356:	b085      	sub	sp, #20
 800c358:	af00      	add	r7, sp, #0
 800c35a:	6078      	str	r0, [r7, #4]
 800c35c:	460b      	mov	r3, r1
 800c35e:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 800c360:	2300      	movs	r3, #0
 800c362:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr1 = TIMx->CCMR1;
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	8b1b      	ldrh	r3, [r3, #24]
 800c368:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC1M Bits */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC1M;
 800c36a:	89fb      	ldrh	r3, [r7, #14]
 800c36c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c370:	81fb      	strh	r3, [r7, #14]

  /* Configure The Forced output Mode */
  tmpccmr1 |= TIM_ForcedAction;
 800c372:	89fa      	ldrh	r2, [r7, #14]
 800c374:	887b      	ldrh	r3, [r7, #2]
 800c376:	4313      	orrs	r3, r2
 800c378:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	89fa      	ldrh	r2, [r7, #14]
 800c37e:	831a      	strh	r2, [r3, #24]
}
 800c380:	bf00      	nop
 800c382:	3714      	adds	r7, #20
 800c384:	46bd      	mov	sp, r7
 800c386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c38a:	4770      	bx	lr

0800c38c <TIM_ForcedOC2Config>:
  *            @arg TIM_ForcedAction_Active: Force active level on OC2REF
  *            @arg TIM_ForcedAction_InActive: Force inactive level on OC2REF.
  * @retval None
  */
void TIM_ForcedOC2Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
{
 800c38c:	b480      	push	{r7}
 800c38e:	b085      	sub	sp, #20
 800c390:	af00      	add	r7, sp, #0
 800c392:	6078      	str	r0, [r7, #4]
 800c394:	460b      	mov	r3, r1
 800c396:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 800c398:	2300      	movs	r3, #0
 800c39a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr1 = TIMx->CCMR1;
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	8b1b      	ldrh	r3, [r3, #24]
 800c3a0:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC2M Bits */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC2M;
 800c3a2:	89fb      	ldrh	r3, [r7, #14]
 800c3a4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c3a8:	81fb      	strh	r3, [r7, #14]

  /* Configure The Forced output Mode */
  tmpccmr1 |= (uint16_t)(TIM_ForcedAction << 8);
 800c3aa:	887b      	ldrh	r3, [r7, #2]
 800c3ac:	021b      	lsls	r3, r3, #8
 800c3ae:	b29a      	uxth	r2, r3
 800c3b0:	89fb      	ldrh	r3, [r7, #14]
 800c3b2:	4313      	orrs	r3, r2
 800c3b4:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	89fa      	ldrh	r2, [r7, #14]
 800c3ba:	831a      	strh	r2, [r3, #24]
}
 800c3bc:	bf00      	nop
 800c3be:	3714      	adds	r7, #20
 800c3c0:	46bd      	mov	sp, r7
 800c3c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3c6:	4770      	bx	lr

0800c3c8 <TIM_ForcedOC3Config>:
  *            @arg TIM_ForcedAction_Active: Force active level on OC3REF
  *            @arg TIM_ForcedAction_InActive: Force inactive level on OC3REF.
  * @retval None
  */
void TIM_ForcedOC3Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
{
 800c3c8:	b480      	push	{r7}
 800c3ca:	b085      	sub	sp, #20
 800c3cc:	af00      	add	r7, sp, #0
 800c3ce:	6078      	str	r0, [r7, #4]
 800c3d0:	460b      	mov	r3, r1
 800c3d2:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 800c3d4:	2300      	movs	r3, #0
 800c3d6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));

  tmpccmr2 = TIMx->CCMR2;
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	8b9b      	ldrh	r3, [r3, #28]
 800c3dc:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC1M Bits */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC3M;
 800c3de:	89fb      	ldrh	r3, [r7, #14]
 800c3e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c3e4:	81fb      	strh	r3, [r7, #14]

  /* Configure The Forced output Mode */
  tmpccmr2 |= TIM_ForcedAction;
 800c3e6:	89fa      	ldrh	r2, [r7, #14]
 800c3e8:	887b      	ldrh	r3, [r7, #2]
 800c3ea:	4313      	orrs	r3, r2
 800c3ec:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	89fa      	ldrh	r2, [r7, #14]
 800c3f2:	839a      	strh	r2, [r3, #28]
}
 800c3f4:	bf00      	nop
 800c3f6:	3714      	adds	r7, #20
 800c3f8:	46bd      	mov	sp, r7
 800c3fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3fe:	4770      	bx	lr

0800c400 <TIM_ForcedOC4Config>:
  *            @arg TIM_ForcedAction_Active: Force active level on OC4REF
  *            @arg TIM_ForcedAction_InActive: Force inactive level on OC4REF.
  * @retval None
  */
void TIM_ForcedOC4Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
{
 800c400:	b480      	push	{r7}
 800c402:	b085      	sub	sp, #20
 800c404:	af00      	add	r7, sp, #0
 800c406:	6078      	str	r0, [r7, #4]
 800c408:	460b      	mov	r3, r1
 800c40a:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 800c40c:	2300      	movs	r3, #0
 800c40e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr2 = TIMx->CCMR2;
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	8b9b      	ldrh	r3, [r3, #28]
 800c414:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC2M Bits */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC4M;
 800c416:	89fb      	ldrh	r3, [r7, #14]
 800c418:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c41c:	81fb      	strh	r3, [r7, #14]

  /* Configure The Forced output Mode */
  tmpccmr2 |= (uint16_t)(TIM_ForcedAction << 8);
 800c41e:	887b      	ldrh	r3, [r7, #2]
 800c420:	021b      	lsls	r3, r3, #8
 800c422:	b29a      	uxth	r2, r3
 800c424:	89fb      	ldrh	r3, [r7, #14]
 800c426:	4313      	orrs	r3, r2
 800c428:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	89fa      	ldrh	r2, [r7, #14]
 800c42e:	839a      	strh	r2, [r3, #28]
}
 800c430:	bf00      	nop
 800c432:	3714      	adds	r7, #20
 800c434:	46bd      	mov	sp, r7
 800c436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c43a:	4770      	bx	lr

0800c43c <TIM_OC1PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC1PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 800c43c:	b480      	push	{r7}
 800c43e:	b085      	sub	sp, #20
 800c440:	af00      	add	r7, sp, #0
 800c442:	6078      	str	r0, [r7, #4]
 800c444:	460b      	mov	r3, r1
 800c446:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 800c448:	2300      	movs	r3, #0
 800c44a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr1 = TIMx->CCMR1;
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	8b1b      	ldrh	r3, [r3, #24]
 800c450:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC1PE Bit */
  tmpccmr1 &= (uint16_t)(~TIM_CCMR1_OC1PE);
 800c452:	89fb      	ldrh	r3, [r7, #14]
 800c454:	f023 0308 	bic.w	r3, r3, #8
 800c458:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= TIM_OCPreload;
 800c45a:	89fa      	ldrh	r2, [r7, #14]
 800c45c:	887b      	ldrh	r3, [r7, #2]
 800c45e:	4313      	orrs	r3, r2
 800c460:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	89fa      	ldrh	r2, [r7, #14]
 800c466:	831a      	strh	r2, [r3, #24]
}
 800c468:	bf00      	nop
 800c46a:	3714      	adds	r7, #20
 800c46c:	46bd      	mov	sp, r7
 800c46e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c472:	4770      	bx	lr

0800c474 <TIM_OC2PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC2PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 800c474:	b480      	push	{r7}
 800c476:	b085      	sub	sp, #20
 800c478:	af00      	add	r7, sp, #0
 800c47a:	6078      	str	r0, [r7, #4]
 800c47c:	460b      	mov	r3, r1
 800c47e:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 800c480:	2300      	movs	r3, #0
 800c482:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr1 = TIMx->CCMR1;
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	8b1b      	ldrh	r3, [r3, #24]
 800c488:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC2PE Bit */
  tmpccmr1 &= (uint16_t)(~TIM_CCMR1_OC2PE);
 800c48a:	89fb      	ldrh	r3, [r7, #14]
 800c48c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c490:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= (uint16_t)(TIM_OCPreload << 8);
 800c492:	887b      	ldrh	r3, [r7, #2]
 800c494:	021b      	lsls	r3, r3, #8
 800c496:	b29a      	uxth	r2, r3
 800c498:	89fb      	ldrh	r3, [r7, #14]
 800c49a:	4313      	orrs	r3, r2
 800c49c:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	89fa      	ldrh	r2, [r7, #14]
 800c4a2:	831a      	strh	r2, [r3, #24]
}
 800c4a4:	bf00      	nop
 800c4a6:	3714      	adds	r7, #20
 800c4a8:	46bd      	mov	sp, r7
 800c4aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ae:	4770      	bx	lr

0800c4b0 <TIM_OC3PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC3PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 800c4b0:	b480      	push	{r7}
 800c4b2:	b085      	sub	sp, #20
 800c4b4:	af00      	add	r7, sp, #0
 800c4b6:	6078      	str	r0, [r7, #4]
 800c4b8:	460b      	mov	r3, r1
 800c4ba:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 800c4bc:	2300      	movs	r3, #0
 800c4be:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr2 = TIMx->CCMR2;
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	8b9b      	ldrh	r3, [r3, #28]
 800c4c4:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC3PE Bit */
  tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC3PE);
 800c4c6:	89fb      	ldrh	r3, [r7, #14]
 800c4c8:	f023 0308 	bic.w	r3, r3, #8
 800c4cc:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= TIM_OCPreload;
 800c4ce:	89fa      	ldrh	r2, [r7, #14]
 800c4d0:	887b      	ldrh	r3, [r7, #2]
 800c4d2:	4313      	orrs	r3, r2
 800c4d4:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	89fa      	ldrh	r2, [r7, #14]
 800c4da:	839a      	strh	r2, [r3, #28]
}
 800c4dc:	bf00      	nop
 800c4de:	3714      	adds	r7, #20
 800c4e0:	46bd      	mov	sp, r7
 800c4e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4e6:	4770      	bx	lr

0800c4e8 <TIM_OC4PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC4PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 800c4e8:	b480      	push	{r7}
 800c4ea:	b085      	sub	sp, #20
 800c4ec:	af00      	add	r7, sp, #0
 800c4ee:	6078      	str	r0, [r7, #4]
 800c4f0:	460b      	mov	r3, r1
 800c4f2:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 800c4f4:	2300      	movs	r3, #0
 800c4f6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr2 = TIMx->CCMR2;
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	8b9b      	ldrh	r3, [r3, #28]
 800c4fc:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC4PE Bit */
  tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC4PE);
 800c4fe:	89fb      	ldrh	r3, [r7, #14]
 800c500:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c504:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= (uint16_t)(TIM_OCPreload << 8);
 800c506:	887b      	ldrh	r3, [r7, #2]
 800c508:	021b      	lsls	r3, r3, #8
 800c50a:	b29a      	uxth	r2, r3
 800c50c:	89fb      	ldrh	r3, [r7, #14]
 800c50e:	4313      	orrs	r3, r2
 800c510:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	89fa      	ldrh	r2, [r7, #14]
 800c516:	839a      	strh	r2, [r3, #28]
}
 800c518:	bf00      	nop
 800c51a:	3714      	adds	r7, #20
 800c51c:	46bd      	mov	sp, r7
 800c51e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c522:	4770      	bx	lr

0800c524 <TIM_OC1FastConfig>:
  *            @arg TIM_OCFast_Enable: TIM output compare fast enable
  *            @arg TIM_OCFast_Disable: TIM output compare fast disable
  * @retval None
  */
void TIM_OC1FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
{
 800c524:	b480      	push	{r7}
 800c526:	b085      	sub	sp, #20
 800c528:	af00      	add	r7, sp, #0
 800c52a:	6078      	str	r0, [r7, #4]
 800c52c:	460b      	mov	r3, r1
 800c52e:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 800c530:	2300      	movs	r3, #0
 800c532:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	8b1b      	ldrh	r3, [r3, #24]
 800c538:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC1FE Bit */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC1FE;
 800c53a:	89fb      	ldrh	r3, [r7, #14]
 800c53c:	f023 0304 	bic.w	r3, r3, #4
 800c540:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr1 |= TIM_OCFast;
 800c542:	89fa      	ldrh	r2, [r7, #14]
 800c544:	887b      	ldrh	r3, [r7, #2]
 800c546:	4313      	orrs	r3, r2
 800c548:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	89fa      	ldrh	r2, [r7, #14]
 800c54e:	831a      	strh	r2, [r3, #24]
}
 800c550:	bf00      	nop
 800c552:	3714      	adds	r7, #20
 800c554:	46bd      	mov	sp, r7
 800c556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c55a:	4770      	bx	lr

0800c55c <TIM_OC2FastConfig>:
  *            @arg TIM_OCFast_Enable: TIM output compare fast enable
  *            @arg TIM_OCFast_Disable: TIM output compare fast disable
  * @retval None
  */
void TIM_OC2FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
{
 800c55c:	b480      	push	{r7}
 800c55e:	b085      	sub	sp, #20
 800c560:	af00      	add	r7, sp, #0
 800c562:	6078      	str	r0, [r7, #4]
 800c564:	460b      	mov	r3, r1
 800c566:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 800c568:	2300      	movs	r3, #0
 800c56a:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	8b1b      	ldrh	r3, [r3, #24]
 800c570:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC2FE Bit */
  tmpccmr1 &= (uint16_t)(~TIM_CCMR1_OC2FE);
 800c572:	89fb      	ldrh	r3, [r7, #14]
 800c574:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c578:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr1 |= (uint16_t)(TIM_OCFast << 8);
 800c57a:	887b      	ldrh	r3, [r7, #2]
 800c57c:	021b      	lsls	r3, r3, #8
 800c57e:	b29a      	uxth	r2, r3
 800c580:	89fb      	ldrh	r3, [r7, #14]
 800c582:	4313      	orrs	r3, r2
 800c584:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	89fa      	ldrh	r2, [r7, #14]
 800c58a:	831a      	strh	r2, [r3, #24]
}
 800c58c:	bf00      	nop
 800c58e:	3714      	adds	r7, #20
 800c590:	46bd      	mov	sp, r7
 800c592:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c596:	4770      	bx	lr

0800c598 <TIM_OC3FastConfig>:
  *            @arg TIM_OCFast_Enable: TIM output compare fast enable
  *            @arg TIM_OCFast_Disable: TIM output compare fast disable
  * @retval None
  */
void TIM_OC3FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
{
 800c598:	b480      	push	{r7}
 800c59a:	b085      	sub	sp, #20
 800c59c:	af00      	add	r7, sp, #0
 800c59e:	6078      	str	r0, [r7, #4]
 800c5a0:	460b      	mov	r3, r1
 800c5a2:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 800c5a4:	2300      	movs	r3, #0
 800c5a6:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = TIMx->CCMR2;
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	8b9b      	ldrh	r3, [r3, #28]
 800c5ac:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC3FE Bit */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC3FE;
 800c5ae:	89fb      	ldrh	r3, [r7, #14]
 800c5b0:	f023 0304 	bic.w	r3, r3, #4
 800c5b4:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr2 |= TIM_OCFast;
 800c5b6:	89fa      	ldrh	r2, [r7, #14]
 800c5b8:	887b      	ldrh	r3, [r7, #2]
 800c5ba:	4313      	orrs	r3, r2
 800c5bc:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmr2;
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	89fa      	ldrh	r2, [r7, #14]
 800c5c2:	839a      	strh	r2, [r3, #28]
}
 800c5c4:	bf00      	nop
 800c5c6:	3714      	adds	r7, #20
 800c5c8:	46bd      	mov	sp, r7
 800c5ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ce:	4770      	bx	lr

0800c5d0 <TIM_OC4FastConfig>:
  *            @arg TIM_OCFast_Enable: TIM output compare fast enable
  *            @arg TIM_OCFast_Disable: TIM output compare fast disable
  * @retval None
  */
void TIM_OC4FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
{
 800c5d0:	b480      	push	{r7}
 800c5d2:	b085      	sub	sp, #20
 800c5d4:	af00      	add	r7, sp, #0
 800c5d6:	6078      	str	r0, [r7, #4]
 800c5d8:	460b      	mov	r3, r1
 800c5da:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 800c5dc:	2300      	movs	r3, #0
 800c5de:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = TIMx->CCMR2;
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	8b9b      	ldrh	r3, [r3, #28]
 800c5e4:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC4FE Bit */
  tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC4FE);
 800c5e6:	89fb      	ldrh	r3, [r7, #14]
 800c5e8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c5ec:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr2 |= (uint16_t)(TIM_OCFast << 8);
 800c5ee:	887b      	ldrh	r3, [r7, #2]
 800c5f0:	021b      	lsls	r3, r3, #8
 800c5f2:	b29a      	uxth	r2, r3
 800c5f4:	89fb      	ldrh	r3, [r7, #14]
 800c5f6:	4313      	orrs	r3, r2
 800c5f8:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmr2;
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	89fa      	ldrh	r2, [r7, #14]
 800c5fe:	839a      	strh	r2, [r3, #28]
}
 800c600:	bf00      	nop
 800c602:	3714      	adds	r7, #20
 800c604:	46bd      	mov	sp, r7
 800c606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c60a:	4770      	bx	lr

0800c60c <TIM_ClearOC1Ref>:
  *            @arg TIM_OCClear_Enable: TIM Output clear enable
  *            @arg TIM_OCClear_Disable: TIM Output clear disable
  * @retval None
  */
void TIM_ClearOC1Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
{
 800c60c:	b480      	push	{r7}
 800c60e:	b085      	sub	sp, #20
 800c610:	af00      	add	r7, sp, #0
 800c612:	6078      	str	r0, [r7, #4]
 800c614:	460b      	mov	r3, r1
 800c616:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 800c618:	2300      	movs	r3, #0
 800c61a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr1 = TIMx->CCMR1;
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	8b1b      	ldrh	r3, [r3, #24]
 800c620:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC1CE Bit */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC1CE;
 800c622:	89fb      	ldrh	r3, [r7, #14]
 800c624:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c628:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr1 |= TIM_OCClear;
 800c62a:	89fa      	ldrh	r2, [r7, #14]
 800c62c:	887b      	ldrh	r3, [r7, #2]
 800c62e:	4313      	orrs	r3, r2
 800c630:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	89fa      	ldrh	r2, [r7, #14]
 800c636:	831a      	strh	r2, [r3, #24]
}
 800c638:	bf00      	nop
 800c63a:	3714      	adds	r7, #20
 800c63c:	46bd      	mov	sp, r7
 800c63e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c642:	4770      	bx	lr

0800c644 <TIM_ClearOC2Ref>:
  *            @arg TIM_OCClear_Enable: TIM Output clear enable
  *            @arg TIM_OCClear_Disable: TIM Output clear disable
  * @retval None
  */
void TIM_ClearOC2Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
{
 800c644:	b480      	push	{r7}
 800c646:	b085      	sub	sp, #20
 800c648:	af00      	add	r7, sp, #0
 800c64a:	6078      	str	r0, [r7, #4]
 800c64c:	460b      	mov	r3, r1
 800c64e:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 800c650:	2300      	movs	r3, #0
 800c652:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr1 = TIMx->CCMR1;
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	8b1b      	ldrh	r3, [r3, #24]
 800c658:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC2CE Bit */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC2CE;
 800c65a:	89fb      	ldrh	r3, [r7, #14]
 800c65c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800c660:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr1 |= (uint16_t)(TIM_OCClear << 8);
 800c662:	887b      	ldrh	r3, [r7, #2]
 800c664:	021b      	lsls	r3, r3, #8
 800c666:	b29a      	uxth	r2, r3
 800c668:	89fb      	ldrh	r3, [r7, #14]
 800c66a:	4313      	orrs	r3, r2
 800c66c:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	89fa      	ldrh	r2, [r7, #14]
 800c672:	831a      	strh	r2, [r3, #24]
}
 800c674:	bf00      	nop
 800c676:	3714      	adds	r7, #20
 800c678:	46bd      	mov	sp, r7
 800c67a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c67e:	4770      	bx	lr

0800c680 <TIM_ClearOC3Ref>:
  *            @arg TIM_OCClear_Enable: TIM Output clear enable
  *            @arg TIM_OCClear_Disable: TIM Output clear disable
  * @retval None
  */
void TIM_ClearOC3Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
{
 800c680:	b480      	push	{r7}
 800c682:	b085      	sub	sp, #20
 800c684:	af00      	add	r7, sp, #0
 800c686:	6078      	str	r0, [r7, #4]
 800c688:	460b      	mov	r3, r1
 800c68a:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 800c68c:	2300      	movs	r3, #0
 800c68e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr2 = TIMx->CCMR2;
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	8b9b      	ldrh	r3, [r3, #28]
 800c694:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC3CE Bit */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC3CE;
 800c696:	89fb      	ldrh	r3, [r7, #14]
 800c698:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c69c:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr2 |= TIM_OCClear;
 800c69e:	89fa      	ldrh	r2, [r7, #14]
 800c6a0:	887b      	ldrh	r3, [r7, #2]
 800c6a2:	4313      	orrs	r3, r2
 800c6a4:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	89fa      	ldrh	r2, [r7, #14]
 800c6aa:	839a      	strh	r2, [r3, #28]
}
 800c6ac:	bf00      	nop
 800c6ae:	3714      	adds	r7, #20
 800c6b0:	46bd      	mov	sp, r7
 800c6b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6b6:	4770      	bx	lr

0800c6b8 <TIM_ClearOC4Ref>:
  *            @arg TIM_OCClear_Enable: TIM Output clear enable
  *            @arg TIM_OCClear_Disable: TIM Output clear disable
  * @retval None
  */
void TIM_ClearOC4Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
{
 800c6b8:	b480      	push	{r7}
 800c6ba:	b085      	sub	sp, #20
 800c6bc:	af00      	add	r7, sp, #0
 800c6be:	6078      	str	r0, [r7, #4]
 800c6c0:	460b      	mov	r3, r1
 800c6c2:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 800c6c4:	2300      	movs	r3, #0
 800c6c6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr2 = TIMx->CCMR2;
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	8b9b      	ldrh	r3, [r3, #28]
 800c6cc:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC4CE Bit */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC4CE;
 800c6ce:	89fb      	ldrh	r3, [r7, #14]
 800c6d0:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800c6d4:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr2 |= (uint16_t)(TIM_OCClear << 8);
 800c6d6:	887b      	ldrh	r3, [r7, #2]
 800c6d8:	021b      	lsls	r3, r3, #8
 800c6da:	b29a      	uxth	r2, r3
 800c6dc:	89fb      	ldrh	r3, [r7, #14]
 800c6de:	4313      	orrs	r3, r2
 800c6e0:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	89fa      	ldrh	r2, [r7, #14]
 800c6e6:	839a      	strh	r2, [r3, #28]
}
 800c6e8:	bf00      	nop
 800c6ea:	3714      	adds	r7, #20
 800c6ec:	46bd      	mov	sp, r7
 800c6ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6f2:	4770      	bx	lr

0800c6f4 <TIM_OC1PolarityConfig>:
  *            @arg TIM_OCPolarity_High: Output Compare active high
  *            @arg TIM_OCPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC1PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
{
 800c6f4:	b480      	push	{r7}
 800c6f6:	b085      	sub	sp, #20
 800c6f8:	af00      	add	r7, sp, #0
 800c6fa:	6078      	str	r0, [r7, #4]
 800c6fc:	460b      	mov	r3, r1
 800c6fe:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
 800c700:	2300      	movs	r3, #0
 800c702:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	8c1b      	ldrh	r3, [r3, #32]
 800c708:	81fb      	strh	r3, [r7, #14]

  /* Set or Reset the CC1P Bit */
  tmpccer &= (uint16_t)(~TIM_CCER_CC1P);
 800c70a:	89fb      	ldrh	r3, [r7, #14]
 800c70c:	f023 0302 	bic.w	r3, r3, #2
 800c710:	81fb      	strh	r3, [r7, #14]
  tmpccer |= TIM_OCPolarity;
 800c712:	89fa      	ldrh	r2, [r7, #14]
 800c714:	887b      	ldrh	r3, [r7, #2]
 800c716:	4313      	orrs	r3, r2
 800c718:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	89fa      	ldrh	r2, [r7, #14]
 800c71e:	841a      	strh	r2, [r3, #32]
}
 800c720:	bf00      	nop
 800c722:	3714      	adds	r7, #20
 800c724:	46bd      	mov	sp, r7
 800c726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c72a:	4770      	bx	lr

0800c72c <TIM_OC1NPolarityConfig>:
  *            @arg TIM_OCNPolarity_High: Output Compare active high
  *            @arg TIM_OCNPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC1NPolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCNPolarity)
{
 800c72c:	b480      	push	{r7}
 800c72e:	b085      	sub	sp, #20
 800c730:	af00      	add	r7, sp, #0
 800c732:	6078      	str	r0, [r7, #4]
 800c734:	460b      	mov	r3, r1
 800c736:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
 800c738:	2300      	movs	r3, #0
 800c73a:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
   
  tmpccer = TIMx->CCER;
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	8c1b      	ldrh	r3, [r3, #32]
 800c740:	81fb      	strh	r3, [r7, #14]

  /* Set or Reset the CC1NP Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC1NP;
 800c742:	89fb      	ldrh	r3, [r7, #14]
 800c744:	f023 0308 	bic.w	r3, r3, #8
 800c748:	81fb      	strh	r3, [r7, #14]
  tmpccer |= TIM_OCNPolarity;
 800c74a:	89fa      	ldrh	r2, [r7, #14]
 800c74c:	887b      	ldrh	r3, [r7, #2]
 800c74e:	4313      	orrs	r3, r2
 800c750:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	89fa      	ldrh	r2, [r7, #14]
 800c756:	841a      	strh	r2, [r3, #32]
}
 800c758:	bf00      	nop
 800c75a:	3714      	adds	r7, #20
 800c75c:	46bd      	mov	sp, r7
 800c75e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c762:	4770      	bx	lr

0800c764 <TIM_OC2PolarityConfig>:
  *            @arg TIM_OCPolarity_High: Output Compare active high
  *            @arg TIM_OCPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC2PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
{
 800c764:	b480      	push	{r7}
 800c766:	b085      	sub	sp, #20
 800c768:	af00      	add	r7, sp, #0
 800c76a:	6078      	str	r0, [r7, #4]
 800c76c:	460b      	mov	r3, r1
 800c76e:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
 800c770:	2300      	movs	r3, #0
 800c772:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	8c1b      	ldrh	r3, [r3, #32]
 800c778:	81fb      	strh	r3, [r7, #14]

  /* Set or Reset the CC2P Bit */
  tmpccer &= (uint16_t)(~TIM_CCER_CC2P);
 800c77a:	89fb      	ldrh	r3, [r7, #14]
 800c77c:	f023 0320 	bic.w	r3, r3, #32
 800c780:	81fb      	strh	r3, [r7, #14]
  tmpccer |= (uint16_t)(TIM_OCPolarity << 4);
 800c782:	887b      	ldrh	r3, [r7, #2]
 800c784:	011b      	lsls	r3, r3, #4
 800c786:	b29a      	uxth	r2, r3
 800c788:	89fb      	ldrh	r3, [r7, #14]
 800c78a:	4313      	orrs	r3, r2
 800c78c:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	89fa      	ldrh	r2, [r7, #14]
 800c792:	841a      	strh	r2, [r3, #32]
}
 800c794:	bf00      	nop
 800c796:	3714      	adds	r7, #20
 800c798:	46bd      	mov	sp, r7
 800c79a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c79e:	4770      	bx	lr

0800c7a0 <TIM_OC2NPolarityConfig>:
  *            @arg TIM_OCNPolarity_High: Output Compare active high
  *            @arg TIM_OCNPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC2NPolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCNPolarity)
{
 800c7a0:	b480      	push	{r7}
 800c7a2:	b085      	sub	sp, #20
 800c7a4:	af00      	add	r7, sp, #0
 800c7a6:	6078      	str	r0, [r7, #4]
 800c7a8:	460b      	mov	r3, r1
 800c7aa:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
 800c7ac:	2300      	movs	r3, #0
 800c7ae:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
  
  tmpccer = TIMx->CCER;
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	8c1b      	ldrh	r3, [r3, #32]
 800c7b4:	81fb      	strh	r3, [r7, #14]

  /* Set or Reset the CC2NP Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC2NP;
 800c7b6:	89fb      	ldrh	r3, [r7, #14]
 800c7b8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c7bc:	81fb      	strh	r3, [r7, #14]
  tmpccer |= (uint16_t)(TIM_OCNPolarity << 4);
 800c7be:	887b      	ldrh	r3, [r7, #2]
 800c7c0:	011b      	lsls	r3, r3, #4
 800c7c2:	b29a      	uxth	r2, r3
 800c7c4:	89fb      	ldrh	r3, [r7, #14]
 800c7c6:	4313      	orrs	r3, r2
 800c7c8:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	89fa      	ldrh	r2, [r7, #14]
 800c7ce:	841a      	strh	r2, [r3, #32]
}
 800c7d0:	bf00      	nop
 800c7d2:	3714      	adds	r7, #20
 800c7d4:	46bd      	mov	sp, r7
 800c7d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7da:	4770      	bx	lr

0800c7dc <TIM_OC3PolarityConfig>:
  *            @arg TIM_OCPolarity_High: Output Compare active high
  *            @arg TIM_OCPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC3PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
{
 800c7dc:	b480      	push	{r7}
 800c7de:	b085      	sub	sp, #20
 800c7e0:	af00      	add	r7, sp, #0
 800c7e2:	6078      	str	r0, [r7, #4]
 800c7e4:	460b      	mov	r3, r1
 800c7e6:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
 800c7e8:	2300      	movs	r3, #0
 800c7ea:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	8c1b      	ldrh	r3, [r3, #32]
 800c7f0:	81fb      	strh	r3, [r7, #14]

  /* Set or Reset the CC3P Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
 800c7f2:	89fb      	ldrh	r3, [r7, #14]
 800c7f4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c7f8:	81fb      	strh	r3, [r7, #14]
  tmpccer |= (uint16_t)(TIM_OCPolarity << 8);
 800c7fa:	887b      	ldrh	r3, [r7, #2]
 800c7fc:	021b      	lsls	r3, r3, #8
 800c7fe:	b29a      	uxth	r2, r3
 800c800:	89fb      	ldrh	r3, [r7, #14]
 800c802:	4313      	orrs	r3, r2
 800c804:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	89fa      	ldrh	r2, [r7, #14]
 800c80a:	841a      	strh	r2, [r3, #32]
}
 800c80c:	bf00      	nop
 800c80e:	3714      	adds	r7, #20
 800c810:	46bd      	mov	sp, r7
 800c812:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c816:	4770      	bx	lr

0800c818 <TIM_OC3NPolarityConfig>:
  *            @arg TIM_OCNPolarity_High: Output Compare active high
  *            @arg TIM_OCNPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC3NPolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCNPolarity)
{
 800c818:	b480      	push	{r7}
 800c81a:	b085      	sub	sp, #20
 800c81c:	af00      	add	r7, sp, #0
 800c81e:	6078      	str	r0, [r7, #4]
 800c820:	460b      	mov	r3, r1
 800c822:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
 800c824:	2300      	movs	r3, #0
 800c826:	81fb      	strh	r3, [r7, #14]
 
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
    
  tmpccer = TIMx->CCER;
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	8c1b      	ldrh	r3, [r3, #32]
 800c82c:	81fb      	strh	r3, [r7, #14]

  /* Set or Reset the CC3NP Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC3NP;
 800c82e:	89fb      	ldrh	r3, [r7, #14]
 800c830:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c834:	81fb      	strh	r3, [r7, #14]
  tmpccer |= (uint16_t)(TIM_OCNPolarity << 8);
 800c836:	887b      	ldrh	r3, [r7, #2]
 800c838:	021b      	lsls	r3, r3, #8
 800c83a:	b29a      	uxth	r2, r3
 800c83c:	89fb      	ldrh	r3, [r7, #14]
 800c83e:	4313      	orrs	r3, r2
 800c840:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	89fa      	ldrh	r2, [r7, #14]
 800c846:	841a      	strh	r2, [r3, #32]
}
 800c848:	bf00      	nop
 800c84a:	3714      	adds	r7, #20
 800c84c:	46bd      	mov	sp, r7
 800c84e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c852:	4770      	bx	lr

0800c854 <TIM_OC4PolarityConfig>:
  *            @arg TIM_OCPolarity_High: Output Compare active high
  *            @arg TIM_OCPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC4PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
{
 800c854:	b480      	push	{r7}
 800c856:	b085      	sub	sp, #20
 800c858:	af00      	add	r7, sp, #0
 800c85a:	6078      	str	r0, [r7, #4]
 800c85c:	460b      	mov	r3, r1
 800c85e:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
 800c860:	2300      	movs	r3, #0
 800c862:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	8c1b      	ldrh	r3, [r3, #32]
 800c868:	81fb      	strh	r3, [r7, #14]

  /* Set or Reset the CC4P Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
 800c86a:	89fb      	ldrh	r3, [r7, #14]
 800c86c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c870:	81fb      	strh	r3, [r7, #14]
  tmpccer |= (uint16_t)(TIM_OCPolarity << 12);
 800c872:	887b      	ldrh	r3, [r7, #2]
 800c874:	031b      	lsls	r3, r3, #12
 800c876:	b29a      	uxth	r2, r3
 800c878:	89fb      	ldrh	r3, [r7, #14]
 800c87a:	4313      	orrs	r3, r2
 800c87c:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	89fa      	ldrh	r2, [r7, #14]
 800c882:	841a      	strh	r2, [r3, #32]
}
 800c884:	bf00      	nop
 800c886:	3714      	adds	r7, #20
 800c888:	46bd      	mov	sp, r7
 800c88a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c88e:	4770      	bx	lr

0800c890 <TIM_CCxCmd>:
  * @param  TIM_CCx: specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_Enable or TIM_CCx_Disable. 
  * @retval None
  */
void TIM_CCxCmd(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_CCx)
{
 800c890:	b480      	push	{r7}
 800c892:	b085      	sub	sp, #20
 800c894:	af00      	add	r7, sp, #0
 800c896:	6078      	str	r0, [r7, #4]
 800c898:	460b      	mov	r3, r1
 800c89a:	807b      	strh	r3, [r7, #2]
 800c89c:	4613      	mov	r3, r2
 800c89e:	803b      	strh	r3, [r7, #0]
  uint16_t tmp = 0;
 800c8a0:	2300      	movs	r3, #0
 800c8a2:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx)); 
  assert_param(IS_TIM_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_CCX(TIM_CCx));

  tmp = CCER_CCE_SET << TIM_Channel;
 800c8a4:	887b      	ldrh	r3, [r7, #2]
 800c8a6:	2201      	movs	r2, #1
 800c8a8:	fa02 f303 	lsl.w	r3, r2, r3
 800c8ac:	81fb      	strh	r3, [r7, #14]

  /* Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t)~ tmp;
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	8c1b      	ldrh	r3, [r3, #32]
 800c8b2:	b29a      	uxth	r2, r3
 800c8b4:	89fb      	ldrh	r3, [r7, #14]
 800c8b6:	43db      	mvns	r3, r3
 800c8b8:	b29b      	uxth	r3, r3
 800c8ba:	4013      	ands	r3, r2
 800c8bc:	b29a      	uxth	r2, r3
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	841a      	strh	r2, [r3, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |=  (uint16_t)(TIM_CCx << TIM_Channel);
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	8c1b      	ldrh	r3, [r3, #32]
 800c8c6:	b29a      	uxth	r2, r3
 800c8c8:	8839      	ldrh	r1, [r7, #0]
 800c8ca:	887b      	ldrh	r3, [r7, #2]
 800c8cc:	fa01 f303 	lsl.w	r3, r1, r3
 800c8d0:	b29b      	uxth	r3, r3
 800c8d2:	4313      	orrs	r3, r2
 800c8d4:	b29a      	uxth	r2, r3
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	841a      	strh	r2, [r3, #32]
}
 800c8da:	bf00      	nop
 800c8dc:	3714      	adds	r7, #20
 800c8de:	46bd      	mov	sp, r7
 800c8e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8e4:	4770      	bx	lr

0800c8e6 <TIM_CCxNCmd>:
  * @param  TIM_CCxN: specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_Enable or TIM_CCxN_Disable. 
  * @retval None
  */
void TIM_CCxNCmd(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_CCxN)
{
 800c8e6:	b480      	push	{r7}
 800c8e8:	b085      	sub	sp, #20
 800c8ea:	af00      	add	r7, sp, #0
 800c8ec:	6078      	str	r0, [r7, #4]
 800c8ee:	460b      	mov	r3, r1
 800c8f0:	807b      	strh	r3, [r7, #2]
 800c8f2:	4613      	mov	r3, r2
 800c8f4:	803b      	strh	r3, [r7, #0]
  uint16_t tmp = 0;
 800c8f6:	2300      	movs	r3, #0
 800c8f8:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_COMPLEMENTARY_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_CCXN(TIM_CCxN));

  tmp = CCER_CCNE_SET << TIM_Channel;
 800c8fa:	887b      	ldrh	r3, [r7, #2]
 800c8fc:	2204      	movs	r2, #4
 800c8fe:	fa02 f303 	lsl.w	r3, r2, r3
 800c902:	81fb      	strh	r3, [r7, #14]

  /* Reset the CCxNE Bit */
  TIMx->CCER &= (uint16_t) ~tmp;
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	8c1b      	ldrh	r3, [r3, #32]
 800c908:	b29a      	uxth	r2, r3
 800c90a:	89fb      	ldrh	r3, [r7, #14]
 800c90c:	43db      	mvns	r3, r3
 800c90e:	b29b      	uxth	r3, r3
 800c910:	4013      	ands	r3, r2
 800c912:	b29a      	uxth	r2, r3
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	841a      	strh	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */ 
  TIMx->CCER |=  (uint16_t)(TIM_CCxN << TIM_Channel);
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	8c1b      	ldrh	r3, [r3, #32]
 800c91c:	b29a      	uxth	r2, r3
 800c91e:	8839      	ldrh	r1, [r7, #0]
 800c920:	887b      	ldrh	r3, [r7, #2]
 800c922:	fa01 f303 	lsl.w	r3, r1, r3
 800c926:	b29b      	uxth	r3, r3
 800c928:	4313      	orrs	r3, r2
 800c92a:	b29a      	uxth	r2, r3
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	841a      	strh	r2, [r3, #32]
}
 800c930:	bf00      	nop
 800c932:	3714      	adds	r7, #20
 800c934:	46bd      	mov	sp, r7
 800c936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c93a:	4770      	bx	lr

0800c93c <TIM_ICInit>:
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_ICInit(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 800c93c:	b580      	push	{r7, lr}
 800c93e:	b082      	sub	sp, #8
 800c940:	af00      	add	r7, sp, #0
 800c942:	6078      	str	r0, [r7, #4]
 800c944:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_IC_POLARITY(TIM_ICInitStruct->TIM_ICPolarity));
  assert_param(IS_TIM_IC_SELECTION(TIM_ICInitStruct->TIM_ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICInitStruct->TIM_ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(TIM_ICInitStruct->TIM_ICFilter));
  
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 800c946:	683b      	ldr	r3, [r7, #0]
 800c948:	881b      	ldrh	r3, [r3, #0]
 800c94a:	2b00      	cmp	r3, #0
 800c94c:	d10f      	bne.n	800c96e <TIM_ICInit+0x32>
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 800c94e:	683b      	ldr	r3, [r7, #0]
 800c950:	8859      	ldrh	r1, [r3, #2]
 800c952:	683b      	ldr	r3, [r7, #0]
 800c954:	889a      	ldrh	r2, [r3, #4]
 800c956:	683b      	ldr	r3, [r7, #0]
 800c958:	891b      	ldrh	r3, [r3, #8]
 800c95a:	6878      	ldr	r0, [r7, #4]
 800c95c:	f000 fcb7 	bl	800d2ce <TI1_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 800c960:	683b      	ldr	r3, [r7, #0]
 800c962:	88db      	ldrh	r3, [r3, #6]
 800c964:	4619      	mov	r1, r3
 800c966:	6878      	ldr	r0, [r7, #4]
 800c968:	f000 f8e1 	bl	800cb2e <TIM_SetIC1Prescaler>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
}
 800c96c:	e036      	b.n	800c9dc <TIM_ICInit+0xa0>
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_2)
 800c96e:	683b      	ldr	r3, [r7, #0]
 800c970:	881b      	ldrh	r3, [r3, #0]
 800c972:	2b04      	cmp	r3, #4
 800c974:	d10f      	bne.n	800c996 <TIM_ICInit+0x5a>
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 800c976:	683b      	ldr	r3, [r7, #0]
 800c978:	8859      	ldrh	r1, [r3, #2]
 800c97a:	683b      	ldr	r3, [r7, #0]
 800c97c:	889a      	ldrh	r2, [r3, #4]
 800c97e:	683b      	ldr	r3, [r7, #0]
 800c980:	891b      	ldrh	r3, [r3, #8]
 800c982:	6878      	ldr	r0, [r7, #4]
 800c984:	f000 fce6 	bl	800d354 <TI2_Config>
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 800c988:	683b      	ldr	r3, [r7, #0]
 800c98a:	88db      	ldrh	r3, [r3, #6]
 800c98c:	4619      	mov	r1, r3
 800c98e:	6878      	ldr	r0, [r7, #4]
 800c990:	f000 f8e9 	bl	800cb66 <TIM_SetIC2Prescaler>
}
 800c994:	e022      	b.n	800c9dc <TIM_ICInit+0xa0>
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_3)
 800c996:	683b      	ldr	r3, [r7, #0]
 800c998:	881b      	ldrh	r3, [r3, #0]
 800c99a:	2b08      	cmp	r3, #8
 800c99c:	d10f      	bne.n	800c9be <TIM_ICInit+0x82>
    TI3_Config(TIMx,  TIM_ICInitStruct->TIM_ICPolarity,
 800c99e:	683b      	ldr	r3, [r7, #0]
 800c9a0:	8859      	ldrh	r1, [r3, #2]
 800c9a2:	683b      	ldr	r3, [r7, #0]
 800c9a4:	889a      	ldrh	r2, [r3, #4]
 800c9a6:	683b      	ldr	r3, [r7, #0]
 800c9a8:	891b      	ldrh	r3, [r3, #8]
 800c9aa:	6878      	ldr	r0, [r7, #4]
 800c9ac:	f000 fd1f 	bl	800d3ee <TI3_Config>
    TIM_SetIC3Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 800c9b0:	683b      	ldr	r3, [r7, #0]
 800c9b2:	88db      	ldrh	r3, [r3, #6]
 800c9b4:	4619      	mov	r1, r3
 800c9b6:	6878      	ldr	r0, [r7, #4]
 800c9b8:	f000 f8f3 	bl	800cba2 <TIM_SetIC3Prescaler>
}
 800c9bc:	e00e      	b.n	800c9dc <TIM_ICInit+0xa0>
    TI4_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 800c9be:	683b      	ldr	r3, [r7, #0]
 800c9c0:	8859      	ldrh	r1, [r3, #2]
 800c9c2:	683b      	ldr	r3, [r7, #0]
 800c9c4:	889a      	ldrh	r2, [r3, #4]
 800c9c6:	683b      	ldr	r3, [r7, #0]
 800c9c8:	891b      	ldrh	r3, [r3, #8]
 800c9ca:	6878      	ldr	r0, [r7, #4]
 800c9cc:	f000 fd57 	bl	800d47e <TI4_Config>
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 800c9d0:	683b      	ldr	r3, [r7, #0]
 800c9d2:	88db      	ldrh	r3, [r3, #6]
 800c9d4:	4619      	mov	r1, r3
 800c9d6:	6878      	ldr	r0, [r7, #4]
 800c9d8:	f000 f8ff 	bl	800cbda <TIM_SetIC4Prescaler>
}
 800c9dc:	bf00      	nop
 800c9de:	3708      	adds	r7, #8
 800c9e0:	46bd      	mov	sp, r7
 800c9e2:	bd80      	pop	{r7, pc}

0800c9e4 <TIM_ICStructInit>:
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void TIM_ICStructInit(TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 800c9e4:	b480      	push	{r7}
 800c9e6:	b083      	sub	sp, #12
 800c9e8:	af00      	add	r7, sp, #0
 800c9ea:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_ICInitStruct->TIM_Channel = TIM_Channel_1;
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	2200      	movs	r2, #0
 800c9f0:	801a      	strh	r2, [r3, #0]
  TIM_ICInitStruct->TIM_ICPolarity = TIM_ICPolarity_Rising;
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	2200      	movs	r2, #0
 800c9f6:	805a      	strh	r2, [r3, #2]
  TIM_ICInitStruct->TIM_ICSelection = TIM_ICSelection_DirectTI;
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	2201      	movs	r2, #1
 800c9fc:	809a      	strh	r2, [r3, #4]
  TIM_ICInitStruct->TIM_ICPrescaler = TIM_ICPSC_DIV1;
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	2200      	movs	r2, #0
 800ca02:	80da      	strh	r2, [r3, #6]
  TIM_ICInitStruct->TIM_ICFilter = 0x00;
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	2200      	movs	r2, #0
 800ca08:	811a      	strh	r2, [r3, #8]
}
 800ca0a:	bf00      	nop
 800ca0c:	370c      	adds	r7, #12
 800ca0e:	46bd      	mov	sp, r7
 800ca10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca14:	4770      	bx	lr

0800ca16 <TIM_PWMIConfig>:
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_PWMIConfig(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 800ca16:	b580      	push	{r7, lr}
 800ca18:	b084      	sub	sp, #16
 800ca1a:	af00      	add	r7, sp, #0
 800ca1c:	6078      	str	r0, [r7, #4]
 800ca1e:	6039      	str	r1, [r7, #0]
  uint16_t icoppositepolarity = TIM_ICPolarity_Rising;
 800ca20:	2300      	movs	r3, #0
 800ca22:	81fb      	strh	r3, [r7, #14]
  uint16_t icoppositeselection = TIM_ICSelection_DirectTI;
 800ca24:	2301      	movs	r3, #1
 800ca26:	81bb      	strh	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Select the Opposite Input Polarity */
  if (TIM_ICInitStruct->TIM_ICPolarity == TIM_ICPolarity_Rising)
 800ca28:	683b      	ldr	r3, [r7, #0]
 800ca2a:	885b      	ldrh	r3, [r3, #2]
 800ca2c:	2b00      	cmp	r3, #0
 800ca2e:	d102      	bne.n	800ca36 <TIM_PWMIConfig+0x20>
  {
    icoppositepolarity = TIM_ICPolarity_Falling;
 800ca30:	2302      	movs	r3, #2
 800ca32:	81fb      	strh	r3, [r7, #14]
 800ca34:	e001      	b.n	800ca3a <TIM_PWMIConfig+0x24>
  }
  else
  {
    icoppositepolarity = TIM_ICPolarity_Rising;
 800ca36:	2300      	movs	r3, #0
 800ca38:	81fb      	strh	r3, [r7, #14]
  }
  /* Select the Opposite Input */
  if (TIM_ICInitStruct->TIM_ICSelection == TIM_ICSelection_DirectTI)
 800ca3a:	683b      	ldr	r3, [r7, #0]
 800ca3c:	889b      	ldrh	r3, [r3, #4]
 800ca3e:	2b01      	cmp	r3, #1
 800ca40:	d102      	bne.n	800ca48 <TIM_PWMIConfig+0x32>
  {
    icoppositeselection = TIM_ICSelection_IndirectTI;
 800ca42:	2302      	movs	r3, #2
 800ca44:	81bb      	strh	r3, [r7, #12]
 800ca46:	e001      	b.n	800ca4c <TIM_PWMIConfig+0x36>
  }
  else
  {
    icoppositeselection = TIM_ICSelection_DirectTI;
 800ca48:	2301      	movs	r3, #1
 800ca4a:	81bb      	strh	r3, [r7, #12]
  }
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 800ca4c:	683b      	ldr	r3, [r7, #0]
 800ca4e:	881b      	ldrh	r3, [r3, #0]
 800ca50:	2b00      	cmp	r3, #0
 800ca52:	d11c      	bne.n	800ca8e <TIM_PWMIConfig+0x78>
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
 800ca54:	683b      	ldr	r3, [r7, #0]
 800ca56:	8859      	ldrh	r1, [r3, #2]
 800ca58:	683b      	ldr	r3, [r7, #0]
 800ca5a:	889a      	ldrh	r2, [r3, #4]
 800ca5c:	683b      	ldr	r3, [r7, #0]
 800ca5e:	891b      	ldrh	r3, [r3, #8]
 800ca60:	6878      	ldr	r0, [r7, #4]
 800ca62:	f000 fc34 	bl	800d2ce <TI1_Config>
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 800ca66:	683b      	ldr	r3, [r7, #0]
 800ca68:	88db      	ldrh	r3, [r3, #6]
 800ca6a:	4619      	mov	r1, r3
 800ca6c:	6878      	ldr	r0, [r7, #4]
 800ca6e:	f000 f85e 	bl	800cb2e <TIM_SetIC1Prescaler>
    /* TI2 Configuration */
    TI2_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
 800ca72:	683b      	ldr	r3, [r7, #0]
 800ca74:	891b      	ldrh	r3, [r3, #8]
 800ca76:	89ba      	ldrh	r2, [r7, #12]
 800ca78:	89f9      	ldrh	r1, [r7, #14]
 800ca7a:	6878      	ldr	r0, [r7, #4]
 800ca7c:	f000 fc6a 	bl	800d354 <TI2_Config>
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 800ca80:	683b      	ldr	r3, [r7, #0]
 800ca82:	88db      	ldrh	r3, [r3, #6]
 800ca84:	4619      	mov	r1, r3
 800ca86:	6878      	ldr	r0, [r7, #4]
 800ca88:	f000 f86d 	bl	800cb66 <TIM_SetIC2Prescaler>
    /* TI1 Configuration */
    TI1_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
}
 800ca8c:	e01b      	b.n	800cac6 <TIM_PWMIConfig+0xb0>
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
 800ca8e:	683b      	ldr	r3, [r7, #0]
 800ca90:	8859      	ldrh	r1, [r3, #2]
 800ca92:	683b      	ldr	r3, [r7, #0]
 800ca94:	889a      	ldrh	r2, [r3, #4]
 800ca96:	683b      	ldr	r3, [r7, #0]
 800ca98:	891b      	ldrh	r3, [r3, #8]
 800ca9a:	6878      	ldr	r0, [r7, #4]
 800ca9c:	f000 fc5a 	bl	800d354 <TI2_Config>
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 800caa0:	683b      	ldr	r3, [r7, #0]
 800caa2:	88db      	ldrh	r3, [r3, #6]
 800caa4:	4619      	mov	r1, r3
 800caa6:	6878      	ldr	r0, [r7, #4]
 800caa8:	f000 f85d 	bl	800cb66 <TIM_SetIC2Prescaler>
    TI1_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
 800caac:	683b      	ldr	r3, [r7, #0]
 800caae:	891b      	ldrh	r3, [r3, #8]
 800cab0:	89ba      	ldrh	r2, [r7, #12]
 800cab2:	89f9      	ldrh	r1, [r7, #14]
 800cab4:	6878      	ldr	r0, [r7, #4]
 800cab6:	f000 fc0a 	bl	800d2ce <TI1_Config>
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 800caba:	683b      	ldr	r3, [r7, #0]
 800cabc:	88db      	ldrh	r3, [r3, #6]
 800cabe:	4619      	mov	r1, r3
 800cac0:	6878      	ldr	r0, [r7, #4]
 800cac2:	f000 f834 	bl	800cb2e <TIM_SetIC1Prescaler>
}
 800cac6:	bf00      	nop
 800cac8:	3710      	adds	r7, #16
 800caca:	46bd      	mov	sp, r7
 800cacc:	bd80      	pop	{r7, pc}

0800cace <TIM_GetCapture1>:
  * @brief  Gets the TIMx Input Capture 1 value.
  * @param  TIMx: where x can be 1 to 14 except 6 and 7, to select the TIM peripheral.
  * @retval Capture Compare 1 Register value.
  */
uint32_t TIM_GetCapture1(TIM_TypeDef* TIMx)
{
 800cace:	b480      	push	{r7}
 800cad0:	b083      	sub	sp, #12
 800cad2:	af00      	add	r7, sp, #0
 800cad4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));

  /* Get the Capture 1 Register value */
  return TIMx->CCR1;
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
}
 800cada:	4618      	mov	r0, r3
 800cadc:	370c      	adds	r7, #12
 800cade:	46bd      	mov	sp, r7
 800cae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cae4:	4770      	bx	lr

0800cae6 <TIM_GetCapture2>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 5, 8, 9 or 12 to select the TIM 
  *         peripheral.
  * @retval Capture Compare 2 Register value.
  */
uint32_t TIM_GetCapture2(TIM_TypeDef* TIMx)
{
 800cae6:	b480      	push	{r7}
 800cae8:	b083      	sub	sp, #12
 800caea:	af00      	add	r7, sp, #0
 800caec:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Get the Capture 2 Register value */
  return TIMx->CCR2;
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
 800caf2:	4618      	mov	r0, r3
 800caf4:	370c      	adds	r7, #12
 800caf6:	46bd      	mov	sp, r7
 800caf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cafc:	4770      	bx	lr

0800cafe <TIM_GetCapture3>:
  * @brief  Gets the TIMx Input Capture 3 value.
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @retval Capture Compare 3 Register value.
  */
uint32_t TIM_GetCapture3(TIM_TypeDef* TIMx)
{
 800cafe:	b480      	push	{r7}
 800cb00:	b083      	sub	sp, #12
 800cb02:	af00      	add	r7, sp, #0
 800cb04:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx)); 

  /* Get the Capture 3 Register value */
  return TIMx->CCR3;
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
}
 800cb0a:	4618      	mov	r0, r3
 800cb0c:	370c      	adds	r7, #12
 800cb0e:	46bd      	mov	sp, r7
 800cb10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb14:	4770      	bx	lr

0800cb16 <TIM_GetCapture4>:
  * @brief  Gets the TIMx Input Capture 4 value.
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @retval Capture Compare 4 Register value.
  */
uint32_t TIM_GetCapture4(TIM_TypeDef* TIMx)
{
 800cb16:	b480      	push	{r7}
 800cb18:	b083      	sub	sp, #12
 800cb1a:	af00      	add	r7, sp, #0
 800cb1c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));

  /* Get the Capture 4 Register value */
  return TIMx->CCR4;
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800cb22:	4618      	mov	r0, r3
 800cb24:	370c      	adds	r7, #12
 800cb26:	46bd      	mov	sp, r7
 800cb28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb2c:	4770      	bx	lr

0800cb2e <TIM_SetIC1Prescaler>:
  *            @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *            @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC1Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
 800cb2e:	b480      	push	{r7}
 800cb30:	b083      	sub	sp, #12
 800cb32:	af00      	add	r7, sp, #0
 800cb34:	6078      	str	r0, [r7, #4]
 800cb36:	460b      	mov	r3, r1
 800cb38:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC1PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~TIM_CCMR1_IC1PSC;
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	8b1b      	ldrh	r3, [r3, #24]
 800cb3e:	b29b      	uxth	r3, r3
 800cb40:	f023 030c 	bic.w	r3, r3, #12
 800cb44:	b29a      	uxth	r2, r3
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	831a      	strh	r2, [r3, #24]

  /* Set the IC1PSC value */
  TIMx->CCMR1 |= TIM_ICPSC;
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	8b1b      	ldrh	r3, [r3, #24]
 800cb4e:	b29a      	uxth	r2, r3
 800cb50:	887b      	ldrh	r3, [r7, #2]
 800cb52:	4313      	orrs	r3, r2
 800cb54:	b29a      	uxth	r2, r3
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	831a      	strh	r2, [r3, #24]
}
 800cb5a:	bf00      	nop
 800cb5c:	370c      	adds	r7, #12
 800cb5e:	46bd      	mov	sp, r7
 800cb60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb64:	4770      	bx	lr

0800cb66 <TIM_SetIC2Prescaler>:
  *            @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *            @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC2Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
 800cb66:	b480      	push	{r7}
 800cb68:	b083      	sub	sp, #12
 800cb6a:	af00      	add	r7, sp, #0
 800cb6c:	6078      	str	r0, [r7, #4]
 800cb6e:	460b      	mov	r3, r1
 800cb70:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC2PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~TIM_CCMR1_IC2PSC;
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	8b1b      	ldrh	r3, [r3, #24]
 800cb76:	b29b      	uxth	r3, r3
 800cb78:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800cb7c:	b29a      	uxth	r2, r3
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	831a      	strh	r2, [r3, #24]

  /* Set the IC2PSC value */
  TIMx->CCMR1 |= (uint16_t)(TIM_ICPSC << 8);
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	8b1b      	ldrh	r3, [r3, #24]
 800cb86:	b29a      	uxth	r2, r3
 800cb88:	887b      	ldrh	r3, [r7, #2]
 800cb8a:	021b      	lsls	r3, r3, #8
 800cb8c:	b29b      	uxth	r3, r3
 800cb8e:	4313      	orrs	r3, r2
 800cb90:	b29a      	uxth	r2, r3
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	831a      	strh	r2, [r3, #24]
}
 800cb96:	bf00      	nop
 800cb98:	370c      	adds	r7, #12
 800cb9a:	46bd      	mov	sp, r7
 800cb9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cba0:	4770      	bx	lr

0800cba2 <TIM_SetIC3Prescaler>:
  *            @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *            @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC3Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
 800cba2:	b480      	push	{r7}
 800cba4:	b083      	sub	sp, #12
 800cba6:	af00      	add	r7, sp, #0
 800cba8:	6078      	str	r0, [r7, #4]
 800cbaa:	460b      	mov	r3, r1
 800cbac:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC3PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~TIM_CCMR2_IC3PSC;
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	8b9b      	ldrh	r3, [r3, #28]
 800cbb2:	b29b      	uxth	r3, r3
 800cbb4:	f023 030c 	bic.w	r3, r3, #12
 800cbb8:	b29a      	uxth	r2, r3
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	839a      	strh	r2, [r3, #28]

  /* Set the IC3PSC value */
  TIMx->CCMR2 |= TIM_ICPSC;
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	8b9b      	ldrh	r3, [r3, #28]
 800cbc2:	b29a      	uxth	r2, r3
 800cbc4:	887b      	ldrh	r3, [r7, #2]
 800cbc6:	4313      	orrs	r3, r2
 800cbc8:	b29a      	uxth	r2, r3
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	839a      	strh	r2, [r3, #28]
}
 800cbce:	bf00      	nop
 800cbd0:	370c      	adds	r7, #12
 800cbd2:	46bd      	mov	sp, r7
 800cbd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbd8:	4770      	bx	lr

0800cbda <TIM_SetIC4Prescaler>:
  *            @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *            @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC4Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{  
 800cbda:	b480      	push	{r7}
 800cbdc:	b083      	sub	sp, #12
 800cbde:	af00      	add	r7, sp, #0
 800cbe0:	6078      	str	r0, [r7, #4]
 800cbe2:	460b      	mov	r3, r1
 800cbe4:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC4PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~TIM_CCMR2_IC4PSC;
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	8b9b      	ldrh	r3, [r3, #28]
 800cbea:	b29b      	uxth	r3, r3
 800cbec:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800cbf0:	b29a      	uxth	r2, r3
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	839a      	strh	r2, [r3, #28]

  /* Set the IC4PSC value */
  TIMx->CCMR2 |= (uint16_t)(TIM_ICPSC << 8);
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	8b9b      	ldrh	r3, [r3, #28]
 800cbfa:	b29a      	uxth	r2, r3
 800cbfc:	887b      	ldrh	r3, [r7, #2]
 800cbfe:	021b      	lsls	r3, r3, #8
 800cc00:	b29b      	uxth	r3, r3
 800cc02:	4313      	orrs	r3, r2
 800cc04:	b29a      	uxth	r2, r3
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	839a      	strh	r2, [r3, #28]
}
 800cc0a:	bf00      	nop
 800cc0c:	370c      	adds	r7, #12
 800cc0e:	46bd      	mov	sp, r7
 800cc10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc14:	4770      	bx	lr

0800cc16 <TIM_BDTRConfig>:
  * @param  TIM_BDTRInitStruct: pointer to a TIM_BDTRInitTypeDef structure that
  *         contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval None
  */
void TIM_BDTRConfig(TIM_TypeDef* TIMx, TIM_BDTRInitTypeDef *TIM_BDTRInitStruct)
{
 800cc16:	b480      	push	{r7}
 800cc18:	b083      	sub	sp, #12
 800cc1a:	af00      	add	r7, sp, #0
 800cc1c:	6078      	str	r0, [r7, #4]
 800cc1e:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 800cc20:	683b      	ldr	r3, [r7, #0]
 800cc22:	881a      	ldrh	r2, [r3, #0]
 800cc24:	683b      	ldr	r3, [r7, #0]
 800cc26:	885b      	ldrh	r3, [r3, #2]
 800cc28:	4313      	orrs	r3, r2
 800cc2a:	b29a      	uxth	r2, r3
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
 800cc2c:	683b      	ldr	r3, [r7, #0]
 800cc2e:	889b      	ldrh	r3, [r3, #4]
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 800cc30:	4313      	orrs	r3, r2
 800cc32:	b29a      	uxth	r2, r3
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
 800cc34:	683b      	ldr	r3, [r7, #0]
 800cc36:	88db      	ldrh	r3, [r3, #6]
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 800cc38:	4313      	orrs	r3, r2
 800cc3a:	b29a      	uxth	r2, r3
             TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
 800cc3c:	683b      	ldr	r3, [r7, #0]
 800cc3e:	891b      	ldrh	r3, [r3, #8]
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 800cc40:	4313      	orrs	r3, r2
 800cc42:	b29a      	uxth	r2, r3
             TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
 800cc44:	683b      	ldr	r3, [r7, #0]
 800cc46:	895b      	ldrh	r3, [r3, #10]
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 800cc48:	4313      	orrs	r3, r2
 800cc4a:	b29a      	uxth	r2, r3
             TIM_BDTRInitStruct->TIM_AutomaticOutput;
 800cc4c:	683b      	ldr	r3, [r7, #0]
 800cc4e:	899b      	ldrh	r3, [r3, #12]
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 800cc50:	4313      	orrs	r3, r2
 800cc52:	b29a      	uxth	r2, r3
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
}
 800cc5a:	bf00      	nop
 800cc5c:	370c      	adds	r7, #12
 800cc5e:	46bd      	mov	sp, r7
 800cc60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc64:	4770      	bx	lr

0800cc66 <TIM_BDTRStructInit>:
  * @param  TIM_BDTRInitStruct: pointer to a TIM_BDTRInitTypeDef structure which
  *         will be initialized.
  * @retval None
  */
void TIM_BDTRStructInit(TIM_BDTRInitTypeDef* TIM_BDTRInitStruct)
{
 800cc66:	b480      	push	{r7}
 800cc68:	b083      	sub	sp, #12
 800cc6a:	af00      	add	r7, sp, #0
 800cc6c:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_BDTRInitStruct->TIM_OSSRState = TIM_OSSRState_Disable;
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	2200      	movs	r2, #0
 800cc72:	801a      	strh	r2, [r3, #0]
  TIM_BDTRInitStruct->TIM_OSSIState = TIM_OSSIState_Disable;
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	2200      	movs	r2, #0
 800cc78:	805a      	strh	r2, [r3, #2]
  TIM_BDTRInitStruct->TIM_LOCKLevel = TIM_LOCKLevel_OFF;
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	2200      	movs	r2, #0
 800cc7e:	809a      	strh	r2, [r3, #4]
  TIM_BDTRInitStruct->TIM_DeadTime = 0x00;
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	2200      	movs	r2, #0
 800cc84:	80da      	strh	r2, [r3, #6]
  TIM_BDTRInitStruct->TIM_Break = TIM_Break_Disable;
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	2200      	movs	r2, #0
 800cc8a:	811a      	strh	r2, [r3, #8]
  TIM_BDTRInitStruct->TIM_BreakPolarity = TIM_BreakPolarity_Low;
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	2200      	movs	r2, #0
 800cc90:	815a      	strh	r2, [r3, #10]
  TIM_BDTRInitStruct->TIM_AutomaticOutput = TIM_AutomaticOutput_Disable;
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	2200      	movs	r2, #0
 800cc96:	819a      	strh	r2, [r3, #12]
}
 800cc98:	bf00      	nop
 800cc9a:	370c      	adds	r7, #12
 800cc9c:	46bd      	mov	sp, r7
 800cc9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cca2:	4770      	bx	lr

0800cca4 <TIM_CtrlPWMOutputs>:
  * @param  NewState: new state of the TIM peripheral Main Outputs.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_CtrlPWMOutputs(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 800cca4:	b480      	push	{r7}
 800cca6:	b083      	sub	sp, #12
 800cca8:	af00      	add	r7, sp, #0
 800ccaa:	6078      	str	r0, [r7, #4]
 800ccac:	460b      	mov	r3, r1
 800ccae:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800ccb0:	78fb      	ldrb	r3, [r7, #3]
 800ccb2:	2b00      	cmp	r3, #0
 800ccb4:	d00c      	beq.n	800ccd0 <TIM_CtrlPWMOutputs+0x2c>
  {
    /* Enable the TIM Main Output */
    TIMx->BDTR |= TIM_BDTR_MOE;
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800ccbc:	b29b      	uxth	r3, r3
 800ccbe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ccc2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ccc6:	b29a      	uxth	r2, r3
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  else
  {
    /* Disable the TIM Main Output */
    TIMx->BDTR &= (uint16_t)~TIM_BDTR_MOE;
  }  
}
 800ccce:	e009      	b.n	800cce4 <TIM_CtrlPWMOutputs+0x40>
    TIMx->BDTR &= (uint16_t)~TIM_BDTR_MOE;
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800ccd6:	b29b      	uxth	r3, r3
 800ccd8:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800ccdc:	b29a      	uxth	r2, r3
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
}
 800cce4:	bf00      	nop
 800cce6:	370c      	adds	r7, #12
 800cce8:	46bd      	mov	sp, r7
 800ccea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccee:	4770      	bx	lr

0800ccf0 <TIM_SelectCOM>:
  * @param  NewState: new state of the Commutation event.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_SelectCOM(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 800ccf0:	b480      	push	{r7}
 800ccf2:	b083      	sub	sp, #12
 800ccf4:	af00      	add	r7, sp, #0
 800ccf6:	6078      	str	r0, [r7, #4]
 800ccf8:	460b      	mov	r3, r1
 800ccfa:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800ccfc:	78fb      	ldrb	r3, [r7, #3]
 800ccfe:	2b00      	cmp	r3, #0
 800cd00:	d008      	beq.n	800cd14 <TIM_SelectCOM+0x24>
  {
    /* Set the COM Bit */
    TIMx->CR2 |= TIM_CR2_CCUS;
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	889b      	ldrh	r3, [r3, #4]
 800cd06:	b29b      	uxth	r3, r3
 800cd08:	f043 0304 	orr.w	r3, r3, #4
 800cd0c:	b29a      	uxth	r2, r3
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	809a      	strh	r2, [r3, #4]
  else
  {
    /* Reset the COM Bit */
    TIMx->CR2 &= (uint16_t)~TIM_CR2_CCUS;
  }
}
 800cd12:	e007      	b.n	800cd24 <TIM_SelectCOM+0x34>
    TIMx->CR2 &= (uint16_t)~TIM_CR2_CCUS;
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	889b      	ldrh	r3, [r3, #4]
 800cd18:	b29b      	uxth	r3, r3
 800cd1a:	f023 0304 	bic.w	r3, r3, #4
 800cd1e:	b29a      	uxth	r2, r3
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	809a      	strh	r2, [r3, #4]
}
 800cd24:	bf00      	nop
 800cd26:	370c      	adds	r7, #12
 800cd28:	46bd      	mov	sp, r7
 800cd2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd2e:	4770      	bx	lr

0800cd30 <TIM_CCPreloadControl>:
  * @param  NewState: new state of the Capture Compare Preload Control bit
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_CCPreloadControl(TIM_TypeDef* TIMx, FunctionalState NewState)
{ 
 800cd30:	b480      	push	{r7}
 800cd32:	b083      	sub	sp, #12
 800cd34:	af00      	add	r7, sp, #0
 800cd36:	6078      	str	r0, [r7, #4]
 800cd38:	460b      	mov	r3, r1
 800cd3a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800cd3c:	78fb      	ldrb	r3, [r7, #3]
 800cd3e:	2b00      	cmp	r3, #0
 800cd40:	d008      	beq.n	800cd54 <TIM_CCPreloadControl+0x24>
  {
    /* Set the CCPC Bit */
    TIMx->CR2 |= TIM_CR2_CCPC;
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	889b      	ldrh	r3, [r3, #4]
 800cd46:	b29b      	uxth	r3, r3
 800cd48:	f043 0301 	orr.w	r3, r3, #1
 800cd4c:	b29a      	uxth	r2, r3
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	809a      	strh	r2, [r3, #4]
  else
  {
    /* Reset the CCPC Bit */
    TIMx->CR2 &= (uint16_t)~TIM_CR2_CCPC;
  }
}
 800cd52:	e007      	b.n	800cd64 <TIM_CCPreloadControl+0x34>
    TIMx->CR2 &= (uint16_t)~TIM_CR2_CCPC;
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	889b      	ldrh	r3, [r3, #4]
 800cd58:	b29b      	uxth	r3, r3
 800cd5a:	f023 0301 	bic.w	r3, r3, #1
 800cd5e:	b29a      	uxth	r2, r3
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	809a      	strh	r2, [r3, #4]
}
 800cd64:	bf00      	nop
 800cd66:	370c      	adds	r7, #12
 800cd68:	46bd      	mov	sp, r7
 800cd6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd6e:	4770      	bx	lr

0800cd70 <TIM_ITConfig>:
  * @param  NewState: new state of the TIM interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ITConfig(TIM_TypeDef* TIMx, uint16_t TIM_IT, FunctionalState NewState)
{  
 800cd70:	b480      	push	{r7}
 800cd72:	b083      	sub	sp, #12
 800cd74:	af00      	add	r7, sp, #0
 800cd76:	6078      	str	r0, [r7, #4]
 800cd78:	460b      	mov	r3, r1
 800cd7a:	807b      	strh	r3, [r7, #2]
 800cd7c:	4613      	mov	r3, r2
 800cd7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800cd80:	787b      	ldrb	r3, [r7, #1]
 800cd82:	2b00      	cmp	r3, #0
 800cd84:	d008      	beq.n	800cd98 <TIM_ITConfig+0x28>
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	899b      	ldrh	r3, [r3, #12]
 800cd8a:	b29a      	uxth	r2, r3
 800cd8c:	887b      	ldrh	r3, [r7, #2]
 800cd8e:	4313      	orrs	r3, r2
 800cd90:	b29a      	uxth	r2, r3
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
  }
}
 800cd96:	e009      	b.n	800cdac <TIM_ITConfig+0x3c>
    TIMx->DIER &= (uint16_t)~TIM_IT;
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	899b      	ldrh	r3, [r3, #12]
 800cd9c:	b29a      	uxth	r2, r3
 800cd9e:	887b      	ldrh	r3, [r7, #2]
 800cda0:	43db      	mvns	r3, r3
 800cda2:	b29b      	uxth	r3, r3
 800cda4:	4013      	ands	r3, r2
 800cda6:	b29a      	uxth	r2, r3
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	819a      	strh	r2, [r3, #12]
}
 800cdac:	bf00      	nop
 800cdae:	370c      	adds	r7, #12
 800cdb0:	46bd      	mov	sp, r7
 800cdb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdb6:	4770      	bx	lr

0800cdb8 <TIM_GenerateEvent>:
  * @note   TIM_EventSource_COM and TIM_EventSource_Break are used only with TIM1 and TIM8.
  *        
  * @retval None
  */
void TIM_GenerateEvent(TIM_TypeDef* TIMx, uint16_t TIM_EventSource)
{ 
 800cdb8:	b480      	push	{r7}
 800cdba:	b083      	sub	sp, #12
 800cdbc:	af00      	add	r7, sp, #0
 800cdbe:	6078      	str	r0, [r7, #4]
 800cdc0:	460b      	mov	r3, r1
 800cdc2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_EVENT_SOURCE(TIM_EventSource));
 
  /* Set the event sources */
  TIMx->EGR = TIM_EventSource;
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	887a      	ldrh	r2, [r7, #2]
 800cdc8:	829a      	strh	r2, [r3, #20]
}
 800cdca:	bf00      	nop
 800cdcc:	370c      	adds	r7, #12
 800cdce:	46bd      	mov	sp, r7
 800cdd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdd4:	4770      	bx	lr

0800cdd6 <TIM_GetFlagStatus>:
  * @note   TIM_FLAG_COM and TIM_FLAG_Break are used only with TIM1 and TIM8.    
  *
  * @retval The new state of TIM_FLAG (SET or RESET).
  */
FlagStatus TIM_GetFlagStatus(TIM_TypeDef* TIMx, uint16_t TIM_FLAG)
{ 
 800cdd6:	b480      	push	{r7}
 800cdd8:	b085      	sub	sp, #20
 800cdda:	af00      	add	r7, sp, #0
 800cddc:	6078      	str	r0, [r7, #4]
 800cdde:	460b      	mov	r3, r1
 800cde0:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET;  
 800cde2:	2300      	movs	r3, #0
 800cde4:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_FLAG(TIM_FLAG));

  
  if ((TIMx->SR & TIM_FLAG) != (uint16_t)RESET)
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	8a1b      	ldrh	r3, [r3, #16]
 800cdea:	b29a      	uxth	r2, r3
 800cdec:	887b      	ldrh	r3, [r7, #2]
 800cdee:	4013      	ands	r3, r2
 800cdf0:	b29b      	uxth	r3, r3
 800cdf2:	2b00      	cmp	r3, #0
 800cdf4:	d002      	beq.n	800cdfc <TIM_GetFlagStatus+0x26>
  {
    bitstatus = SET;
 800cdf6:	2301      	movs	r3, #1
 800cdf8:	73fb      	strb	r3, [r7, #15]
 800cdfa:	e001      	b.n	800ce00 <TIM_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
 800cdfc:	2300      	movs	r3, #0
 800cdfe:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800ce00:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce02:	4618      	mov	r0, r3
 800ce04:	3714      	adds	r7, #20
 800ce06:	46bd      	mov	sp, r7
 800ce08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce0c:	4770      	bx	lr

0800ce0e <TIM_ClearFlag>:
  * @note   TIM_FLAG_COM and TIM_FLAG_Break are used only with TIM1 and TIM8.
  *    
  * @retval None
  */
void TIM_ClearFlag(TIM_TypeDef* TIMx, uint16_t TIM_FLAG)
{  
 800ce0e:	b480      	push	{r7}
 800ce10:	b083      	sub	sp, #12
 800ce12:	af00      	add	r7, sp, #0
 800ce14:	6078      	str	r0, [r7, #4]
 800ce16:	460b      	mov	r3, r1
 800ce18:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
   
  /* Clear the flags */
  TIMx->SR = (uint16_t)~TIM_FLAG;
 800ce1a:	887b      	ldrh	r3, [r7, #2]
 800ce1c:	43db      	mvns	r3, r3
 800ce1e:	b29a      	uxth	r2, r3
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	821a      	strh	r2, [r3, #16]
}
 800ce24:	bf00      	nop
 800ce26:	370c      	adds	r7, #12
 800ce28:	46bd      	mov	sp, r7
 800ce2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce2e:	4770      	bx	lr

0800ce30 <TIM_GetITStatus>:
  * @note   TIM_IT_COM and TIM_IT_Break are used only with TIM1 and TIM8.
  *     
  * @retval The new state of the TIM_IT(SET or RESET).
  */
ITStatus TIM_GetITStatus(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 800ce30:	b480      	push	{r7}
 800ce32:	b085      	sub	sp, #20
 800ce34:	af00      	add	r7, sp, #0
 800ce36:	6078      	str	r0, [r7, #4]
 800ce38:	460b      	mov	r3, r1
 800ce3a:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET;  
 800ce3c:	2300      	movs	r3, #0
 800ce3e:	73fb      	strb	r3, [r7, #15]
  uint16_t itstatus = 0x0, itenable = 0x0;
 800ce40:	2300      	movs	r3, #0
 800ce42:	81bb      	strh	r3, [r7, #12]
 800ce44:	2300      	movs	r3, #0
 800ce46:	817b      	strh	r3, [r7, #10]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	8a1b      	ldrh	r3, [r3, #16]
 800ce4c:	b29a      	uxth	r2, r3
 800ce4e:	887b      	ldrh	r3, [r7, #2]
 800ce50:	4013      	ands	r3, r2
 800ce52:	81bb      	strh	r3, [r7, #12]
  
  itenable = TIMx->DIER & TIM_IT;
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	899b      	ldrh	r3, [r3, #12]
 800ce58:	b29a      	uxth	r2, r3
 800ce5a:	887b      	ldrh	r3, [r7, #2]
 800ce5c:	4013      	ands	r3, r2
 800ce5e:	817b      	strh	r3, [r7, #10]
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 800ce60:	89bb      	ldrh	r3, [r7, #12]
 800ce62:	2b00      	cmp	r3, #0
 800ce64:	d005      	beq.n	800ce72 <TIM_GetITStatus+0x42>
 800ce66:	897b      	ldrh	r3, [r7, #10]
 800ce68:	2b00      	cmp	r3, #0
 800ce6a:	d002      	beq.n	800ce72 <TIM_GetITStatus+0x42>
  {
    bitstatus = SET;
 800ce6c:	2301      	movs	r3, #1
 800ce6e:	73fb      	strb	r3, [r7, #15]
 800ce70:	e001      	b.n	800ce76 <TIM_GetITStatus+0x46>
  }
  else
  {
    bitstatus = RESET;
 800ce72:	2300      	movs	r3, #0
 800ce74:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800ce76:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce78:	4618      	mov	r0, r3
 800ce7a:	3714      	adds	r7, #20
 800ce7c:	46bd      	mov	sp, r7
 800ce7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce82:	4770      	bx	lr

0800ce84 <TIM_ClearITPendingBit>:
  * @note   TIM_IT_COM and TIM_IT_Break are used only with TIM1 and TIM8.
  *      
  * @retval None
  */
void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 800ce84:	b480      	push	{r7}
 800ce86:	b083      	sub	sp, #12
 800ce88:	af00      	add	r7, sp, #0
 800ce8a:	6078      	str	r0, [r7, #4]
 800ce8c:	460b      	mov	r3, r1
 800ce8e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 800ce90:	887b      	ldrh	r3, [r7, #2]
 800ce92:	43db      	mvns	r3, r3
 800ce94:	b29a      	uxth	r2, r3
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	821a      	strh	r2, [r3, #16]
}
 800ce9a:	bf00      	nop
 800ce9c:	370c      	adds	r7, #12
 800ce9e:	46bd      	mov	sp, r7
 800cea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cea4:	4770      	bx	lr

0800cea6 <TIM_DMAConfig>:
  * @param  TIM_DMABurstLength: DMA Burst length. This parameter can be one value
  *         between: TIM_DMABurstLength_1Transfer and TIM_DMABurstLength_18Transfers.
  * @retval None
  */
void TIM_DMAConfig(TIM_TypeDef* TIMx, uint16_t TIM_DMABase, uint16_t TIM_DMABurstLength)
{
 800cea6:	b480      	push	{r7}
 800cea8:	b083      	sub	sp, #12
 800ceaa:	af00      	add	r7, sp, #0
 800ceac:	6078      	str	r0, [r7, #4]
 800ceae:	460b      	mov	r3, r1
 800ceb0:	807b      	strh	r3, [r7, #2]
 800ceb2:	4613      	mov	r3, r2
 800ceb4:	803b      	strh	r3, [r7, #0]
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_DMA_BASE(TIM_DMABase)); 
  assert_param(IS_TIM_DMA_LENGTH(TIM_DMABurstLength));

  /* Set the DMA Base and the DMA Burst Length */
  TIMx->DCR = TIM_DMABase | TIM_DMABurstLength;
 800ceb6:	887a      	ldrh	r2, [r7, #2]
 800ceb8:	883b      	ldrh	r3, [r7, #0]
 800ceba:	4313      	orrs	r3, r2
 800cebc:	b29a      	uxth	r2, r3
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
}
 800cec4:	bf00      	nop
 800cec6:	370c      	adds	r7, #12
 800cec8:	46bd      	mov	sp, r7
 800ceca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cece:	4770      	bx	lr

0800ced0 <TIM_DMACmd>:
  * @param  NewState: new state of the DMA Request sources.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_DMACmd(TIM_TypeDef* TIMx, uint16_t TIM_DMASource, FunctionalState NewState)
{ 
 800ced0:	b480      	push	{r7}
 800ced2:	b083      	sub	sp, #12
 800ced4:	af00      	add	r7, sp, #0
 800ced6:	6078      	str	r0, [r7, #4]
 800ced8:	460b      	mov	r3, r1
 800ceda:	807b      	strh	r3, [r7, #2]
 800cedc:	4613      	mov	r3, r2
 800cede:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_LIST5_PERIPH(TIMx)); 
  assert_param(IS_TIM_DMA_SOURCE(TIM_DMASource));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800cee0:	787b      	ldrb	r3, [r7, #1]
 800cee2:	2b00      	cmp	r3, #0
 800cee4:	d008      	beq.n	800cef8 <TIM_DMACmd+0x28>
  {
    /* Enable the DMA sources */
    TIMx->DIER |= TIM_DMASource; 
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	899b      	ldrh	r3, [r3, #12]
 800ceea:	b29a      	uxth	r2, r3
 800ceec:	887b      	ldrh	r3, [r7, #2]
 800ceee:	4313      	orrs	r3, r2
 800cef0:	b29a      	uxth	r2, r3
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the DMA sources */
    TIMx->DIER &= (uint16_t)~TIM_DMASource;
  }
}
 800cef6:	e009      	b.n	800cf0c <TIM_DMACmd+0x3c>
    TIMx->DIER &= (uint16_t)~TIM_DMASource;
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	899b      	ldrh	r3, [r3, #12]
 800cefc:	b29a      	uxth	r2, r3
 800cefe:	887b      	ldrh	r3, [r7, #2]
 800cf00:	43db      	mvns	r3, r3
 800cf02:	b29b      	uxth	r3, r3
 800cf04:	4013      	ands	r3, r2
 800cf06:	b29a      	uxth	r2, r3
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	819a      	strh	r2, [r3, #12]
}
 800cf0c:	bf00      	nop
 800cf0e:	370c      	adds	r7, #12
 800cf10:	46bd      	mov	sp, r7
 800cf12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf16:	4770      	bx	lr

0800cf18 <TIM_SelectCCDMA>:
  * @param  NewState: new state of the Capture Compare DMA source
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_SelectCCDMA(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 800cf18:	b480      	push	{r7}
 800cf1a:	b083      	sub	sp, #12
 800cf1c:	af00      	add	r7, sp, #0
 800cf1e:	6078      	str	r0, [r7, #4]
 800cf20:	460b      	mov	r3, r1
 800cf22:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800cf24:	78fb      	ldrb	r3, [r7, #3]
 800cf26:	2b00      	cmp	r3, #0
 800cf28:	d008      	beq.n	800cf3c <TIM_SelectCCDMA+0x24>
  {
    /* Set the CCDS Bit */
    TIMx->CR2 |= TIM_CR2_CCDS;
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	889b      	ldrh	r3, [r3, #4]
 800cf2e:	b29b      	uxth	r3, r3
 800cf30:	f043 0308 	orr.w	r3, r3, #8
 800cf34:	b29a      	uxth	r2, r3
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	809a      	strh	r2, [r3, #4]
  else
  {
    /* Reset the CCDS Bit */
    TIMx->CR2 &= (uint16_t)~TIM_CR2_CCDS;
  }
}
 800cf3a:	e007      	b.n	800cf4c <TIM_SelectCCDMA+0x34>
    TIMx->CR2 &= (uint16_t)~TIM_CR2_CCDS;
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	889b      	ldrh	r3, [r3, #4]
 800cf40:	b29b      	uxth	r3, r3
 800cf42:	f023 0308 	bic.w	r3, r3, #8
 800cf46:	b29a      	uxth	r2, r3
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	809a      	strh	r2, [r3, #4]
}
 800cf4c:	bf00      	nop
 800cf4e:	370c      	adds	r7, #12
 800cf50:	46bd      	mov	sp, r7
 800cf52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf56:	4770      	bx	lr

0800cf58 <TIM_InternalClockConfig>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 5, 8, 9 or 12 to select the TIM 
  *         peripheral.
  * @retval None
  */
void TIM_InternalClockConfig(TIM_TypeDef* TIMx)
{
 800cf58:	b480      	push	{r7}
 800cf5a:	b083      	sub	sp, #12
 800cf5c:	af00      	add	r7, sp, #0
 800cf5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Disable slave mode to clock the prescaler directly with the internal clock */
  TIMx->SMCR &=  (uint16_t)~TIM_SMCR_SMS;
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	891b      	ldrh	r3, [r3, #8]
 800cf64:	b29b      	uxth	r3, r3
 800cf66:	f023 0307 	bic.w	r3, r3, #7
 800cf6a:	b29a      	uxth	r2, r3
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	811a      	strh	r2, [r3, #8]
}
 800cf70:	bf00      	nop
 800cf72:	370c      	adds	r7, #12
 800cf74:	46bd      	mov	sp, r7
 800cf76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf7a:	4770      	bx	lr

0800cf7c <TIM_ITRxExternalClockConfig>:
  *            @arg TIM_TS_ITR2: Internal Trigger 2
  *            @arg TIM_TS_ITR3: Internal Trigger 3
  * @retval None
  */
void TIM_ITRxExternalClockConfig(TIM_TypeDef* TIMx, uint16_t TIM_InputTriggerSource)
{
 800cf7c:	b580      	push	{r7, lr}
 800cf7e:	b082      	sub	sp, #8
 800cf80:	af00      	add	r7, sp, #0
 800cf82:	6078      	str	r0, [r7, #4]
 800cf84:	460b      	mov	r3, r1
 800cf86:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_INTERNAL_TRIGGER_SELECTION(TIM_InputTriggerSource));

  /* Select the Internal Trigger */
  TIM_SelectInputTrigger(TIMx, TIM_InputTriggerSource);
 800cf88:	887b      	ldrh	r3, [r7, #2]
 800cf8a:	4619      	mov	r1, r3
 800cf8c:	6878      	ldr	r0, [r7, #4]
 800cf8e:	f000 f888 	bl	800d0a2 <TIM_SelectInputTrigger>

  /* Select the External clock mode1 */
  TIMx->SMCR |= TIM_SlaveMode_External1;
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	891b      	ldrh	r3, [r3, #8]
 800cf96:	b29b      	uxth	r3, r3
 800cf98:	f043 0307 	orr.w	r3, r3, #7
 800cf9c:	b29a      	uxth	r2, r3
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	811a      	strh	r2, [r3, #8]
}
 800cfa2:	bf00      	nop
 800cfa4:	3708      	adds	r7, #8
 800cfa6:	46bd      	mov	sp, r7
 800cfa8:	bd80      	pop	{r7, pc}

0800cfaa <TIM_TIxExternalClockConfig>:
  *          This parameter must be a value between 0x0 and 0xF.
  * @retval None
  */
void TIM_TIxExternalClockConfig(TIM_TypeDef* TIMx, uint16_t TIM_TIxExternalCLKSource,
                                uint16_t TIM_ICPolarity, uint16_t ICFilter)
{
 800cfaa:	b580      	push	{r7, lr}
 800cfac:	b084      	sub	sp, #16
 800cfae:	af00      	add	r7, sp, #0
 800cfb0:	60f8      	str	r0, [r7, #12]
 800cfb2:	4608      	mov	r0, r1
 800cfb4:	4611      	mov	r1, r2
 800cfb6:	461a      	mov	r2, r3
 800cfb8:	4603      	mov	r3, r0
 800cfba:	817b      	strh	r3, [r7, #10]
 800cfbc:	460b      	mov	r3, r1
 800cfbe:	813b      	strh	r3, [r7, #8]
 800cfc0:	4613      	mov	r3, r2
 800cfc2:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_IC_POLARITY(TIM_ICPolarity));
  assert_param(IS_TIM_IC_FILTER(ICFilter));

  /* Configure the Timer Input Clock Source */
  if (TIM_TIxExternalCLKSource == TIM_TIxExternalCLK1Source_TI2)
 800cfc4:	897b      	ldrh	r3, [r7, #10]
 800cfc6:	2b60      	cmp	r3, #96	; 0x60
 800cfc8:	d106      	bne.n	800cfd8 <TIM_TIxExternalClockConfig+0x2e>
  {
    TI2_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
 800cfca:	88fb      	ldrh	r3, [r7, #6]
 800cfcc:	8939      	ldrh	r1, [r7, #8]
 800cfce:	2201      	movs	r2, #1
 800cfd0:	68f8      	ldr	r0, [r7, #12]
 800cfd2:	f000 f9bf 	bl	800d354 <TI2_Config>
 800cfd6:	e005      	b.n	800cfe4 <TIM_TIxExternalClockConfig+0x3a>
  }
  else
  {
    TI1_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
 800cfd8:	88fb      	ldrh	r3, [r7, #6]
 800cfda:	8939      	ldrh	r1, [r7, #8]
 800cfdc:	2201      	movs	r2, #1
 800cfde:	68f8      	ldr	r0, [r7, #12]
 800cfe0:	f000 f975 	bl	800d2ce <TI1_Config>
  }
  /* Select the Trigger source */
  TIM_SelectInputTrigger(TIMx, TIM_TIxExternalCLKSource);
 800cfe4:	897b      	ldrh	r3, [r7, #10]
 800cfe6:	4619      	mov	r1, r3
 800cfe8:	68f8      	ldr	r0, [r7, #12]
 800cfea:	f000 f85a 	bl	800d0a2 <TIM_SelectInputTrigger>
  /* Select the External clock mode1 */
  TIMx->SMCR |= TIM_SlaveMode_External1;
 800cfee:	68fb      	ldr	r3, [r7, #12]
 800cff0:	891b      	ldrh	r3, [r3, #8]
 800cff2:	b29b      	uxth	r3, r3
 800cff4:	f043 0307 	orr.w	r3, r3, #7
 800cff8:	b29a      	uxth	r2, r3
 800cffa:	68fb      	ldr	r3, [r7, #12]
 800cffc:	811a      	strh	r2, [r3, #8]
}
 800cffe:	bf00      	nop
 800d000:	3710      	adds	r7, #16
 800d002:	46bd      	mov	sp, r7
 800d004:	bd80      	pop	{r7, pc}

0800d006 <TIM_ETRClockMode1Config>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRClockMode1Config(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler,
                            uint16_t TIM_ExtTRGPolarity, uint16_t ExtTRGFilter)
{
 800d006:	b580      	push	{r7, lr}
 800d008:	b086      	sub	sp, #24
 800d00a:	af00      	add	r7, sp, #0
 800d00c:	60f8      	str	r0, [r7, #12]
 800d00e:	4608      	mov	r0, r1
 800d010:	4611      	mov	r1, r2
 800d012:	461a      	mov	r2, r3
 800d014:	4603      	mov	r3, r0
 800d016:	817b      	strh	r3, [r7, #10]
 800d018:	460b      	mov	r3, r1
 800d01a:	813b      	strh	r3, [r7, #8]
 800d01c:	4613      	mov	r3, r2
 800d01e:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpsmcr = 0;
 800d020:	2300      	movs	r3, #0
 800d022:	82fb      	strh	r3, [r7, #22]
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));
  /* Configure the ETR Clock source */
  TIM_ETRConfig(TIMx, TIM_ExtTRGPrescaler, TIM_ExtTRGPolarity, ExtTRGFilter);
 800d024:	88fb      	ldrh	r3, [r7, #6]
 800d026:	893a      	ldrh	r2, [r7, #8]
 800d028:	8979      	ldrh	r1, [r7, #10]
 800d02a:	68f8      	ldr	r0, [r7, #12]
 800d02c:	f000 f8a9 	bl	800d182 <TIM_ETRConfig>
  
  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800d030:	68fb      	ldr	r3, [r7, #12]
 800d032:	891b      	ldrh	r3, [r3, #8]
 800d034:	82fb      	strh	r3, [r7, #22]

  /* Reset the SMS Bits */
  tmpsmcr &= (uint16_t)~TIM_SMCR_SMS;
 800d036:	8afb      	ldrh	r3, [r7, #22]
 800d038:	f023 0307 	bic.w	r3, r3, #7
 800d03c:	82fb      	strh	r3, [r7, #22]

  /* Select the External clock mode1 */
  tmpsmcr |= TIM_SlaveMode_External1;
 800d03e:	8afb      	ldrh	r3, [r7, #22]
 800d040:	f043 0307 	orr.w	r3, r3, #7
 800d044:	82fb      	strh	r3, [r7, #22]

  /* Select the Trigger selection : ETRF */
  tmpsmcr &= (uint16_t)~TIM_SMCR_TS;
 800d046:	8afb      	ldrh	r3, [r7, #22]
 800d048:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d04c:	82fb      	strh	r3, [r7, #22]
  tmpsmcr |= TIM_TS_ETRF;
 800d04e:	8afb      	ldrh	r3, [r7, #22]
 800d050:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 800d054:	82fb      	strh	r3, [r7, #22]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d056:	68fb      	ldr	r3, [r7, #12]
 800d058:	8afa      	ldrh	r2, [r7, #22]
 800d05a:	811a      	strh	r2, [r3, #8]
}
 800d05c:	bf00      	nop
 800d05e:	3718      	adds	r7, #24
 800d060:	46bd      	mov	sp, r7
 800d062:	bd80      	pop	{r7, pc}

0800d064 <TIM_ETRClockMode2Config>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRClockMode2Config(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler, 
                             uint16_t TIM_ExtTRGPolarity, uint16_t ExtTRGFilter)
{
 800d064:	b580      	push	{r7, lr}
 800d066:	b084      	sub	sp, #16
 800d068:	af00      	add	r7, sp, #0
 800d06a:	60f8      	str	r0, [r7, #12]
 800d06c:	4608      	mov	r0, r1
 800d06e:	4611      	mov	r1, r2
 800d070:	461a      	mov	r2, r3
 800d072:	4603      	mov	r3, r0
 800d074:	817b      	strh	r3, [r7, #10]
 800d076:	460b      	mov	r3, r1
 800d078:	813b      	strh	r3, [r7, #8]
 800d07a:	4613      	mov	r3, r2
 800d07c:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));

  /* Configure the ETR Clock source */
  TIM_ETRConfig(TIMx, TIM_ExtTRGPrescaler, TIM_ExtTRGPolarity, ExtTRGFilter);
 800d07e:	88fb      	ldrh	r3, [r7, #6]
 800d080:	893a      	ldrh	r2, [r7, #8]
 800d082:	8979      	ldrh	r1, [r7, #10]
 800d084:	68f8      	ldr	r0, [r7, #12]
 800d086:	f000 f87c 	bl	800d182 <TIM_ETRConfig>

  /* Enable the External clock mode2 */
  TIMx->SMCR |= TIM_SMCR_ECE;
 800d08a:	68fb      	ldr	r3, [r7, #12]
 800d08c:	891b      	ldrh	r3, [r3, #8]
 800d08e:	b29b      	uxth	r3, r3
 800d090:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800d094:	b29a      	uxth	r2, r3
 800d096:	68fb      	ldr	r3, [r7, #12]
 800d098:	811a      	strh	r2, [r3, #8]
}
 800d09a:	bf00      	nop
 800d09c:	3710      	adds	r7, #16
 800d09e:	46bd      	mov	sp, r7
 800d0a0:	bd80      	pop	{r7, pc}

0800d0a2 <TIM_SelectInputTrigger>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
void TIM_SelectInputTrigger(TIM_TypeDef* TIMx, uint16_t TIM_InputTriggerSource)
{
 800d0a2:	b480      	push	{r7}
 800d0a4:	b085      	sub	sp, #20
 800d0a6:	af00      	add	r7, sp, #0
 800d0a8:	6078      	str	r0, [r7, #4]
 800d0aa:	460b      	mov	r3, r1
 800d0ac:	807b      	strh	r3, [r7, #2]
  uint16_t tmpsmcr = 0;
 800d0ae:	2300      	movs	r3, #0
 800d0b0:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx)); 
  assert_param(IS_TIM_TRIGGER_SELECTION(TIM_InputTriggerSource));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	891b      	ldrh	r3, [r3, #8]
 800d0b6:	81fb      	strh	r3, [r7, #14]

  /* Reset the TS Bits */
  tmpsmcr &= (uint16_t)~TIM_SMCR_TS;
 800d0b8:	89fb      	ldrh	r3, [r7, #14]
 800d0ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d0be:	81fb      	strh	r3, [r7, #14]

  /* Set the Input Trigger source */
  tmpsmcr |= TIM_InputTriggerSource;
 800d0c0:	89fa      	ldrh	r2, [r7, #14]
 800d0c2:	887b      	ldrh	r3, [r7, #2]
 800d0c4:	4313      	orrs	r3, r2
 800d0c6:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	89fa      	ldrh	r2, [r7, #14]
 800d0cc:	811a      	strh	r2, [r3, #8]
}
 800d0ce:	bf00      	nop
 800d0d0:	3714      	adds	r7, #20
 800d0d2:	46bd      	mov	sp, r7
 800d0d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0d8:	4770      	bx	lr

0800d0da <TIM_SelectOutputTrigger>:
  *            @arg TIM_TRGOSource_OC4Ref: OC4REF signal is used as the trigger output(TRGO)
  *
  * @retval None
  */
void TIM_SelectOutputTrigger(TIM_TypeDef* TIMx, uint16_t TIM_TRGOSource)
{
 800d0da:	b480      	push	{r7}
 800d0dc:	b083      	sub	sp, #12
 800d0de:	af00      	add	r7, sp, #0
 800d0e0:	6078      	str	r0, [r7, #4]
 800d0e2:	460b      	mov	r3, r1
 800d0e4:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST5_PERIPH(TIMx));
  assert_param(IS_TIM_TRGO_SOURCE(TIM_TRGOSource));

  /* Reset the MMS Bits */
  TIMx->CR2 &= (uint16_t)~TIM_CR2_MMS;
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	889b      	ldrh	r3, [r3, #4]
 800d0ea:	b29b      	uxth	r3, r3
 800d0ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d0f0:	b29a      	uxth	r2, r3
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	809a      	strh	r2, [r3, #4]
  /* Select the TRGO source */
  TIMx->CR2 |=  TIM_TRGOSource;
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	889b      	ldrh	r3, [r3, #4]
 800d0fa:	b29a      	uxth	r2, r3
 800d0fc:	887b      	ldrh	r3, [r7, #2]
 800d0fe:	4313      	orrs	r3, r2
 800d100:	b29a      	uxth	r2, r3
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	809a      	strh	r2, [r3, #4]
}
 800d106:	bf00      	nop
 800d108:	370c      	adds	r7, #12
 800d10a:	46bd      	mov	sp, r7
 800d10c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d110:	4770      	bx	lr

0800d112 <TIM_SelectSlaveMode>:
  *            @arg TIM_SlaveMode_Trigger:   The counter starts at a rising edge of the trigger TRGI
  *            @arg TIM_SlaveMode_External1: Rising edges of the selected trigger (TRGI) clock the counter
  * @retval None
  */
void TIM_SelectSlaveMode(TIM_TypeDef* TIMx, uint16_t TIM_SlaveMode)
{
 800d112:	b480      	push	{r7}
 800d114:	b083      	sub	sp, #12
 800d116:	af00      	add	r7, sp, #0
 800d118:	6078      	str	r0, [r7, #4]
 800d11a:	460b      	mov	r3, r1
 800d11c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_SLAVE_MODE(TIM_SlaveMode));

  /* Reset the SMS Bits */
  TIMx->SMCR &= (uint16_t)~TIM_SMCR_SMS;
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	891b      	ldrh	r3, [r3, #8]
 800d122:	b29b      	uxth	r3, r3
 800d124:	f023 0307 	bic.w	r3, r3, #7
 800d128:	b29a      	uxth	r2, r3
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	811a      	strh	r2, [r3, #8]

  /* Select the Slave Mode */
  TIMx->SMCR |= TIM_SlaveMode;
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	891b      	ldrh	r3, [r3, #8]
 800d132:	b29a      	uxth	r2, r3
 800d134:	887b      	ldrh	r3, [r7, #2]
 800d136:	4313      	orrs	r3, r2
 800d138:	b29a      	uxth	r2, r3
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	811a      	strh	r2, [r3, #8]
}
 800d13e:	bf00      	nop
 800d140:	370c      	adds	r7, #12
 800d142:	46bd      	mov	sp, r7
 800d144:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d148:	4770      	bx	lr

0800d14a <TIM_SelectMasterSlaveMode>:
  *                                             and its slaves (through TRGO)
  *            @arg TIM_MasterSlaveMode_Disable: No action
  * @retval None
  */
void TIM_SelectMasterSlaveMode(TIM_TypeDef* TIMx, uint16_t TIM_MasterSlaveMode)
{
 800d14a:	b480      	push	{r7}
 800d14c:	b083      	sub	sp, #12
 800d14e:	af00      	add	r7, sp, #0
 800d150:	6078      	str	r0, [r7, #4]
 800d152:	460b      	mov	r3, r1
 800d154:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_MSM_STATE(TIM_MasterSlaveMode));

  /* Reset the MSM Bit */
  TIMx->SMCR &= (uint16_t)~TIM_SMCR_MSM;
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	891b      	ldrh	r3, [r3, #8]
 800d15a:	b29b      	uxth	r3, r3
 800d15c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d160:	b29a      	uxth	r2, r3
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	811a      	strh	r2, [r3, #8]
  
  /* Set or Reset the MSM Bit */
  TIMx->SMCR |= TIM_MasterSlaveMode;
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	891b      	ldrh	r3, [r3, #8]
 800d16a:	b29a      	uxth	r2, r3
 800d16c:	887b      	ldrh	r3, [r7, #2]
 800d16e:	4313      	orrs	r3, r2
 800d170:	b29a      	uxth	r2, r3
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	811a      	strh	r2, [r3, #8]
}
 800d176:	bf00      	nop
 800d178:	370c      	adds	r7, #12
 800d17a:	46bd      	mov	sp, r7
 800d17c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d180:	4770      	bx	lr

0800d182 <TIM_ETRConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRConfig(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler,
                   uint16_t TIM_ExtTRGPolarity, uint16_t ExtTRGFilter)
{
 800d182:	b480      	push	{r7}
 800d184:	b087      	sub	sp, #28
 800d186:	af00      	add	r7, sp, #0
 800d188:	60f8      	str	r0, [r7, #12]
 800d18a:	4608      	mov	r0, r1
 800d18c:	4611      	mov	r1, r2
 800d18e:	461a      	mov	r2, r3
 800d190:	4603      	mov	r3, r0
 800d192:	817b      	strh	r3, [r7, #10]
 800d194:	460b      	mov	r3, r1
 800d196:	813b      	strh	r3, [r7, #8]
 800d198:	4613      	mov	r3, r2
 800d19a:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpsmcr = 0;
 800d19c:	2300      	movs	r3, #0
 800d19e:	82fb      	strh	r3, [r7, #22]
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));

  tmpsmcr = TIMx->SMCR;
 800d1a0:	68fb      	ldr	r3, [r7, #12]
 800d1a2:	891b      	ldrh	r3, [r3, #8]
 800d1a4:	82fb      	strh	r3, [r7, #22]

  /* Reset the ETR Bits */
  tmpsmcr &= SMCR_ETR_MASK;
 800d1a6:	8afb      	ldrh	r3, [r7, #22]
 800d1a8:	b2db      	uxtb	r3, r3
 800d1aa:	82fb      	strh	r3, [r7, #22]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint16_t)(TIM_ExtTRGPrescaler | (uint16_t)(TIM_ExtTRGPolarity | (uint16_t)(ExtTRGFilter << (uint16_t)8)));
 800d1ac:	88fb      	ldrh	r3, [r7, #6]
 800d1ae:	021b      	lsls	r3, r3, #8
 800d1b0:	b29a      	uxth	r2, r3
 800d1b2:	893b      	ldrh	r3, [r7, #8]
 800d1b4:	4313      	orrs	r3, r2
 800d1b6:	b29a      	uxth	r2, r3
 800d1b8:	897b      	ldrh	r3, [r7, #10]
 800d1ba:	4313      	orrs	r3, r2
 800d1bc:	b29a      	uxth	r2, r3
 800d1be:	8afb      	ldrh	r3, [r7, #22]
 800d1c0:	4313      	orrs	r3, r2
 800d1c2:	82fb      	strh	r3, [r7, #22]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d1c4:	68fb      	ldr	r3, [r7, #12]
 800d1c6:	8afa      	ldrh	r2, [r7, #22]
 800d1c8:	811a      	strh	r2, [r3, #8]
}
 800d1ca:	bf00      	nop
 800d1cc:	371c      	adds	r7, #28
 800d1ce:	46bd      	mov	sp, r7
 800d1d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1d4:	4770      	bx	lr

0800d1d6 <TIM_EncoderInterfaceConfig>:
  *            @arg TIM_ICPolarity_Rising: IC Rising edge.
  * @retval None
  */
void TIM_EncoderInterfaceConfig(TIM_TypeDef* TIMx, uint16_t TIM_EncoderMode,
                                uint16_t TIM_IC1Polarity, uint16_t TIM_IC2Polarity)
{
 800d1d6:	b480      	push	{r7}
 800d1d8:	b087      	sub	sp, #28
 800d1da:	af00      	add	r7, sp, #0
 800d1dc:	60f8      	str	r0, [r7, #12]
 800d1de:	4608      	mov	r0, r1
 800d1e0:	4611      	mov	r1, r2
 800d1e2:	461a      	mov	r2, r3
 800d1e4:	4603      	mov	r3, r0
 800d1e6:	817b      	strh	r3, [r7, #10]
 800d1e8:	460b      	mov	r3, r1
 800d1ea:	813b      	strh	r3, [r7, #8]
 800d1ec:	4613      	mov	r3, r2
 800d1ee:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpsmcr = 0;
 800d1f0:	2300      	movs	r3, #0
 800d1f2:	82fb      	strh	r3, [r7, #22]
  uint16_t tmpccmr1 = 0;
 800d1f4:	2300      	movs	r3, #0
 800d1f6:	82bb      	strh	r3, [r7, #20]
  uint16_t tmpccer = 0;
 800d1f8:	2300      	movs	r3, #0
 800d1fa:	827b      	strh	r3, [r7, #18]
  assert_param(IS_TIM_ENCODER_MODE(TIM_EncoderMode));
  assert_param(IS_TIM_IC_POLARITY(TIM_IC1Polarity));
  assert_param(IS_TIM_IC_POLARITY(TIM_IC2Polarity));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800d1fc:	68fb      	ldr	r3, [r7, #12]
 800d1fe:	891b      	ldrh	r3, [r3, #8]
 800d200:	82fb      	strh	r3, [r7, #22]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 800d202:	68fb      	ldr	r3, [r7, #12]
 800d204:	8b1b      	ldrh	r3, [r3, #24]
 800d206:	82bb      	strh	r3, [r7, #20]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d208:	68fb      	ldr	r3, [r7, #12]
 800d20a:	8c1b      	ldrh	r3, [r3, #32]
 800d20c:	827b      	strh	r3, [r7, #18]

  /* Set the encoder Mode */
  tmpsmcr &= (uint16_t)~TIM_SMCR_SMS;
 800d20e:	8afb      	ldrh	r3, [r7, #22]
 800d210:	f023 0307 	bic.w	r3, r3, #7
 800d214:	82fb      	strh	r3, [r7, #22]
  tmpsmcr |= TIM_EncoderMode;
 800d216:	8afa      	ldrh	r2, [r7, #22]
 800d218:	897b      	ldrh	r3, [r7, #10]
 800d21a:	4313      	orrs	r3, r2
 800d21c:	82fb      	strh	r3, [r7, #22]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_CC2S);
 800d21e:	8abb      	ldrh	r3, [r7, #20]
 800d220:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d224:	f023 0303 	bic.w	r3, r3, #3
 800d228:	82bb      	strh	r3, [r7, #20]
  tmpccmr1 |= TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;
 800d22a:	8abb      	ldrh	r3, [r7, #20]
 800d22c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d230:	f043 0301 	orr.w	r3, r3, #1
 800d234:	82bb      	strh	r3, [r7, #20]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ((uint16_t)~TIM_CCER_CC1P) & ((uint16_t)~TIM_CCER_CC2P);
 800d236:	8a7b      	ldrh	r3, [r7, #18]
 800d238:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800d23c:	827b      	strh	r3, [r7, #18]
  tmpccer |= (uint16_t)(TIM_IC1Polarity | (uint16_t)(TIM_IC2Polarity << (uint16_t)4));
 800d23e:	88fb      	ldrh	r3, [r7, #6]
 800d240:	011b      	lsls	r3, r3, #4
 800d242:	b29a      	uxth	r2, r3
 800d244:	893b      	ldrh	r3, [r7, #8]
 800d246:	4313      	orrs	r3, r2
 800d248:	b29a      	uxth	r2, r3
 800d24a:	8a7b      	ldrh	r3, [r7, #18]
 800d24c:	4313      	orrs	r3, r2
 800d24e:	827b      	strh	r3, [r7, #18]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d250:	68fb      	ldr	r3, [r7, #12]
 800d252:	8afa      	ldrh	r2, [r7, #22]
 800d254:	811a      	strh	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
 800d256:	68fb      	ldr	r3, [r7, #12]
 800d258:	8aba      	ldrh	r2, [r7, #20]
 800d25a:	831a      	strh	r2, [r3, #24]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d25c:	68fb      	ldr	r3, [r7, #12]
 800d25e:	8a7a      	ldrh	r2, [r7, #18]
 800d260:	841a      	strh	r2, [r3, #32]
}
 800d262:	bf00      	nop
 800d264:	371c      	adds	r7, #28
 800d266:	46bd      	mov	sp, r7
 800d268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d26c:	4770      	bx	lr

0800d26e <TIM_SelectHallSensor>:
  * @param  NewState: new state of the TIMx Hall sensor interface.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_SelectHallSensor(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 800d26e:	b480      	push	{r7}
 800d270:	b083      	sub	sp, #12
 800d272:	af00      	add	r7, sp, #0
 800d274:	6078      	str	r0, [r7, #4]
 800d276:	460b      	mov	r3, r1
 800d278:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800d27a:	78fb      	ldrb	r3, [r7, #3]
 800d27c:	2b00      	cmp	r3, #0
 800d27e:	d008      	beq.n	800d292 <TIM_SelectHallSensor+0x24>
  {
    /* Set the TI1S Bit */
    TIMx->CR2 |= TIM_CR2_TI1S;
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	889b      	ldrh	r3, [r3, #4]
 800d284:	b29b      	uxth	r3, r3
 800d286:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d28a:	b29a      	uxth	r2, r3
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	809a      	strh	r2, [r3, #4]
  else
  {
    /* Reset the TI1S Bit */
    TIMx->CR2 &= (uint16_t)~TIM_CR2_TI1S;
  }
}
 800d290:	e007      	b.n	800d2a2 <TIM_SelectHallSensor+0x34>
    TIMx->CR2 &= (uint16_t)~TIM_CR2_TI1S;
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	889b      	ldrh	r3, [r3, #4]
 800d296:	b29b      	uxth	r3, r3
 800d298:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d29c:	b29a      	uxth	r2, r3
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	809a      	strh	r2, [r3, #4]
}
 800d2a2:	bf00      	nop
 800d2a4:	370c      	adds	r7, #12
 800d2a6:	46bd      	mov	sp, r7
 800d2a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2ac:	4770      	bx	lr

0800d2ae <TIM_RemapConfig>:
  *            @arg TIM11_HSE:      TIM11 CH4 input is connected to HSE_RTC clock
  *                                 (HSE divided by a programmable prescaler)  
  * @retval None
  */
void TIM_RemapConfig(TIM_TypeDef* TIMx, uint16_t TIM_Remap)
{
 800d2ae:	b480      	push	{r7}
 800d2b0:	b083      	sub	sp, #12
 800d2b2:	af00      	add	r7, sp, #0
 800d2b4:	6078      	str	r0, [r7, #4]
 800d2b6:	460b      	mov	r3, r1
 800d2b8:	807b      	strh	r3, [r7, #2]
 /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_REMAP(TIM_Remap));

  /* Set the Timer remapping configuration */
  TIMx->OR =  TIM_Remap;
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	887a      	ldrh	r2, [r7, #2]
 800d2be:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
}
 800d2c2:	bf00      	nop
 800d2c4:	370c      	adds	r7, #12
 800d2c6:	46bd      	mov	sp, r7
 800d2c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2cc:	4770      	bx	lr

0800d2ce <TI1_Config>:
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI1_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 800d2ce:	b480      	push	{r7}
 800d2d0:	b087      	sub	sp, #28
 800d2d2:	af00      	add	r7, sp, #0
 800d2d4:	60f8      	str	r0, [r7, #12]
 800d2d6:	4608      	mov	r0, r1
 800d2d8:	4611      	mov	r1, r2
 800d2da:	461a      	mov	r2, r3
 800d2dc:	4603      	mov	r3, r0
 800d2de:	817b      	strh	r3, [r7, #10]
 800d2e0:	460b      	mov	r3, r1
 800d2e2:	813b      	strh	r3, [r7, #8]
 800d2e4:	4613      	mov	r3, r2
 800d2e6:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr1 = 0, tmpccer = 0;
 800d2e8:	2300      	movs	r3, #0
 800d2ea:	82fb      	strh	r3, [r7, #22]
 800d2ec:	2300      	movs	r3, #0
 800d2ee:	82bb      	strh	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
 800d2f0:	68fb      	ldr	r3, [r7, #12]
 800d2f2:	8c1b      	ldrh	r3, [r3, #32]
 800d2f4:	b29b      	uxth	r3, r3
 800d2f6:	f023 0301 	bic.w	r3, r3, #1
 800d2fa:	b29a      	uxth	r2, r3
 800d2fc:	68fb      	ldr	r3, [r7, #12]
 800d2fe:	841a      	strh	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d300:	68fb      	ldr	r3, [r7, #12]
 800d302:	8b1b      	ldrh	r3, [r3, #24]
 800d304:	82fb      	strh	r3, [r7, #22]
  tmpccer = TIMx->CCER;
 800d306:	68fb      	ldr	r3, [r7, #12]
 800d308:	8c1b      	ldrh	r3, [r3, #32]
 800d30a:	82bb      	strh	r3, [r7, #20]

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
 800d30c:	8afb      	ldrh	r3, [r7, #22]
 800d30e:	f023 03f3 	bic.w	r3, r3, #243	; 0xf3
 800d312:	82fb      	strh	r3, [r7, #22]
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 800d314:	88fb      	ldrh	r3, [r7, #6]
 800d316:	011b      	lsls	r3, r3, #4
 800d318:	b29a      	uxth	r2, r3
 800d31a:	893b      	ldrh	r3, [r7, #8]
 800d31c:	4313      	orrs	r3, r2
 800d31e:	b29a      	uxth	r2, r3
 800d320:	8afb      	ldrh	r3, [r7, #22]
 800d322:	4313      	orrs	r3, r2
 800d324:	82fb      	strh	r3, [r7, #22]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800d326:	8abb      	ldrh	r3, [r7, #20]
 800d328:	f023 030a 	bic.w	r3, r3, #10
 800d32c:	82bb      	strh	r3, [r7, #20]
  tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
 800d32e:	897a      	ldrh	r2, [r7, #10]
 800d330:	8abb      	ldrh	r3, [r7, #20]
 800d332:	4313      	orrs	r3, r2
 800d334:	b29b      	uxth	r3, r3
 800d336:	f043 0301 	orr.w	r3, r3, #1
 800d33a:	82bb      	strh	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800d33c:	68fb      	ldr	r3, [r7, #12]
 800d33e:	8afa      	ldrh	r2, [r7, #22]
 800d340:	831a      	strh	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d342:	68fb      	ldr	r3, [r7, #12]
 800d344:	8aba      	ldrh	r2, [r7, #20]
 800d346:	841a      	strh	r2, [r3, #32]
}
 800d348:	bf00      	nop
 800d34a:	371c      	adds	r7, #28
 800d34c:	46bd      	mov	sp, r7
 800d34e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d352:	4770      	bx	lr

0800d354 <TI2_Config>:
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI2_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 800d354:	b480      	push	{r7}
 800d356:	b087      	sub	sp, #28
 800d358:	af00      	add	r7, sp, #0
 800d35a:	60f8      	str	r0, [r7, #12]
 800d35c:	4608      	mov	r0, r1
 800d35e:	4611      	mov	r1, r2
 800d360:	461a      	mov	r2, r3
 800d362:	4603      	mov	r3, r0
 800d364:	817b      	strh	r3, [r7, #10]
 800d366:	460b      	mov	r3, r1
 800d368:	813b      	strh	r3, [r7, #8]
 800d36a:	4613      	mov	r3, r2
 800d36c:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;
 800d36e:	2300      	movs	r3, #0
 800d370:	82fb      	strh	r3, [r7, #22]
 800d372:	2300      	movs	r3, #0
 800d374:	82bb      	strh	r3, [r7, #20]
 800d376:	2300      	movs	r3, #0
 800d378:	827b      	strh	r3, [r7, #18]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
 800d37a:	68fb      	ldr	r3, [r7, #12]
 800d37c:	8c1b      	ldrh	r3, [r3, #32]
 800d37e:	b29b      	uxth	r3, r3
 800d380:	f023 0310 	bic.w	r3, r3, #16
 800d384:	b29a      	uxth	r2, r3
 800d386:	68fb      	ldr	r3, [r7, #12]
 800d388:	841a      	strh	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d38a:	68fb      	ldr	r3, [r7, #12]
 800d38c:	8b1b      	ldrh	r3, [r3, #24]
 800d38e:	82fb      	strh	r3, [r7, #22]
  tmpccer = TIMx->CCER;
 800d390:	68fb      	ldr	r3, [r7, #12]
 800d392:	8c1b      	ldrh	r3, [r3, #32]
 800d394:	82bb      	strh	r3, [r7, #20]
  tmp = (uint16_t)(TIM_ICPolarity << 4);
 800d396:	897b      	ldrh	r3, [r7, #10]
 800d398:	011b      	lsls	r3, r3, #4
 800d39a:	827b      	strh	r3, [r7, #18]

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 800d39c:	8afb      	ldrh	r3, [r7, #22]
 800d39e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d3a2:	051b      	lsls	r3, r3, #20
 800d3a4:	0d1b      	lsrs	r3, r3, #20
 800d3a6:	82fb      	strh	r3, [r7, #22]
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
 800d3a8:	88fb      	ldrh	r3, [r7, #6]
 800d3aa:	031b      	lsls	r3, r3, #12
 800d3ac:	b29a      	uxth	r2, r3
 800d3ae:	8afb      	ldrh	r3, [r7, #22]
 800d3b0:	4313      	orrs	r3, r2
 800d3b2:	82fb      	strh	r3, [r7, #22]
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);
 800d3b4:	893b      	ldrh	r3, [r7, #8]
 800d3b6:	021b      	lsls	r3, r3, #8
 800d3b8:	b29a      	uxth	r2, r3
 800d3ba:	8afb      	ldrh	r3, [r7, #22]
 800d3bc:	4313      	orrs	r3, r2
 800d3be:	82fb      	strh	r3, [r7, #22]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800d3c0:	8abb      	ldrh	r3, [r7, #20]
 800d3c2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800d3c6:	82bb      	strh	r3, [r7, #20]
  tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
 800d3c8:	8a7a      	ldrh	r2, [r7, #18]
 800d3ca:	8abb      	ldrh	r3, [r7, #20]
 800d3cc:	4313      	orrs	r3, r2
 800d3ce:	b29b      	uxth	r3, r3
 800d3d0:	f043 0310 	orr.w	r3, r3, #16
 800d3d4:	82bb      	strh	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800d3d6:	68fb      	ldr	r3, [r7, #12]
 800d3d8:	8afa      	ldrh	r2, [r7, #22]
 800d3da:	831a      	strh	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d3dc:	68fb      	ldr	r3, [r7, #12]
 800d3de:	8aba      	ldrh	r2, [r7, #20]
 800d3e0:	841a      	strh	r2, [r3, #32]
}
 800d3e2:	bf00      	nop
 800d3e4:	371c      	adds	r7, #28
 800d3e6:	46bd      	mov	sp, r7
 800d3e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3ec:	4770      	bx	lr

0800d3ee <TI3_Config>:
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI3_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 800d3ee:	b480      	push	{r7}
 800d3f0:	b087      	sub	sp, #28
 800d3f2:	af00      	add	r7, sp, #0
 800d3f4:	60f8      	str	r0, [r7, #12]
 800d3f6:	4608      	mov	r0, r1
 800d3f8:	4611      	mov	r1, r2
 800d3fa:	461a      	mov	r2, r3
 800d3fc:	4603      	mov	r3, r0
 800d3fe:	817b      	strh	r3, [r7, #10]
 800d400:	460b      	mov	r3, r1
 800d402:	813b      	strh	r3, [r7, #8]
 800d404:	4613      	mov	r3, r2
 800d406:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;
 800d408:	2300      	movs	r3, #0
 800d40a:	82fb      	strh	r3, [r7, #22]
 800d40c:	2300      	movs	r3, #0
 800d40e:	82bb      	strh	r3, [r7, #20]
 800d410:	2300      	movs	r3, #0
 800d412:	827b      	strh	r3, [r7, #18]

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
 800d414:	68fb      	ldr	r3, [r7, #12]
 800d416:	8c1b      	ldrh	r3, [r3, #32]
 800d418:	b29b      	uxth	r3, r3
 800d41a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d41e:	b29a      	uxth	r2, r3
 800d420:	68fb      	ldr	r3, [r7, #12]
 800d422:	841a      	strh	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800d424:	68fb      	ldr	r3, [r7, #12]
 800d426:	8b9b      	ldrh	r3, [r3, #28]
 800d428:	82fb      	strh	r3, [r7, #22]
  tmpccer = TIMx->CCER;
 800d42a:	68fb      	ldr	r3, [r7, #12]
 800d42c:	8c1b      	ldrh	r3, [r3, #32]
 800d42e:	82bb      	strh	r3, [r7, #20]
  tmp = (uint16_t)(TIM_ICPolarity << 8);
 800d430:	897b      	ldrh	r3, [r7, #10]
 800d432:	021b      	lsls	r3, r3, #8
 800d434:	827b      	strh	r3, [r7, #18]

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR2_IC3F);
 800d436:	8afb      	ldrh	r3, [r7, #22]
 800d438:	f023 03f3 	bic.w	r3, r3, #243	; 0xf3
 800d43c:	82fb      	strh	r3, [r7, #22]
  tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 800d43e:	88fb      	ldrh	r3, [r7, #6]
 800d440:	011b      	lsls	r3, r3, #4
 800d442:	b29a      	uxth	r2, r3
 800d444:	893b      	ldrh	r3, [r7, #8]
 800d446:	4313      	orrs	r3, r2
 800d448:	b29a      	uxth	r2, r3
 800d44a:	8afb      	ldrh	r3, [r7, #22]
 800d44c:	4313      	orrs	r3, r2
 800d44e:	82fb      	strh	r3, [r7, #22]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800d450:	8abb      	ldrh	r3, [r7, #20]
 800d452:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800d456:	82bb      	strh	r3, [r7, #20]
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC3E);
 800d458:	8a7a      	ldrh	r2, [r7, #18]
 800d45a:	8abb      	ldrh	r3, [r7, #20]
 800d45c:	4313      	orrs	r3, r2
 800d45e:	b29b      	uxth	r3, r3
 800d460:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d464:	82bb      	strh	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800d466:	68fb      	ldr	r3, [r7, #12]
 800d468:	8afa      	ldrh	r2, [r7, #22]
 800d46a:	839a      	strh	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800d46c:	68fb      	ldr	r3, [r7, #12]
 800d46e:	8aba      	ldrh	r2, [r7, #20]
 800d470:	841a      	strh	r2, [r3, #32]
}
 800d472:	bf00      	nop
 800d474:	371c      	adds	r7, #28
 800d476:	46bd      	mov	sp, r7
 800d478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d47c:	4770      	bx	lr

0800d47e <TI4_Config>:
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI4_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 800d47e:	b480      	push	{r7}
 800d480:	b087      	sub	sp, #28
 800d482:	af00      	add	r7, sp, #0
 800d484:	60f8      	str	r0, [r7, #12]
 800d486:	4608      	mov	r0, r1
 800d488:	4611      	mov	r1, r2
 800d48a:	461a      	mov	r2, r3
 800d48c:	4603      	mov	r3, r0
 800d48e:	817b      	strh	r3, [r7, #10]
 800d490:	460b      	mov	r3, r1
 800d492:	813b      	strh	r3, [r7, #8]
 800d494:	4613      	mov	r3, r2
 800d496:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;
 800d498:	2300      	movs	r3, #0
 800d49a:	82fb      	strh	r3, [r7, #22]
 800d49c:	2300      	movs	r3, #0
 800d49e:	82bb      	strh	r3, [r7, #20]
 800d4a0:	2300      	movs	r3, #0
 800d4a2:	827b      	strh	r3, [r7, #18]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC4E;
 800d4a4:	68fb      	ldr	r3, [r7, #12]
 800d4a6:	8c1b      	ldrh	r3, [r3, #32]
 800d4a8:	b29b      	uxth	r3, r3
 800d4aa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d4ae:	b29a      	uxth	r2, r3
 800d4b0:	68fb      	ldr	r3, [r7, #12]
 800d4b2:	841a      	strh	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800d4b4:	68fb      	ldr	r3, [r7, #12]
 800d4b6:	8b9b      	ldrh	r3, [r3, #28]
 800d4b8:	82fb      	strh	r3, [r7, #22]
  tmpccer = TIMx->CCER;
 800d4ba:	68fb      	ldr	r3, [r7, #12]
 800d4bc:	8c1b      	ldrh	r3, [r3, #32]
 800d4be:	82bb      	strh	r3, [r7, #20]
  tmp = (uint16_t)(TIM_ICPolarity << 12);
 800d4c0:	897b      	ldrh	r3, [r7, #10]
 800d4c2:	031b      	lsls	r3, r3, #12
 800d4c4:	827b      	strh	r3, [r7, #18]

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 800d4c6:	8afb      	ldrh	r3, [r7, #22]
 800d4c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d4cc:	051b      	lsls	r3, r3, #20
 800d4ce:	0d1b      	lsrs	r3, r3, #20
 800d4d0:	82fb      	strh	r3, [r7, #22]
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
 800d4d2:	893b      	ldrh	r3, [r7, #8]
 800d4d4:	021b      	lsls	r3, r3, #8
 800d4d6:	b29a      	uxth	r2, r3
 800d4d8:	8afb      	ldrh	r3, [r7, #22]
 800d4da:	4313      	orrs	r3, r2
 800d4dc:	82fb      	strh	r3, [r7, #22]
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);
 800d4de:	88fb      	ldrh	r3, [r7, #6]
 800d4e0:	031b      	lsls	r3, r3, #12
 800d4e2:	b29a      	uxth	r2, r3
 800d4e4:	8afb      	ldrh	r3, [r7, #22]
 800d4e6:	4313      	orrs	r3, r2
 800d4e8:	82fb      	strh	r3, [r7, #22]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800d4ea:	8abb      	ldrh	r3, [r7, #20]
 800d4ec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d4f0:	045b      	lsls	r3, r3, #17
 800d4f2:	0c5b      	lsrs	r3, r3, #17
 800d4f4:	82bb      	strh	r3, [r7, #20]
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC4E);
 800d4f6:	8a7a      	ldrh	r2, [r7, #18]
 800d4f8:	8abb      	ldrh	r3, [r7, #20]
 800d4fa:	4313      	orrs	r3, r2
 800d4fc:	b29b      	uxth	r3, r3
 800d4fe:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800d502:	82bb      	strh	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800d504:	68fb      	ldr	r3, [r7, #12]
 800d506:	8afa      	ldrh	r2, [r7, #22]
 800d508:	839a      	strh	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800d50a:	68fb      	ldr	r3, [r7, #12]
 800d50c:	8aba      	ldrh	r2, [r7, #20]
 800d50e:	841a      	strh	r2, [r3, #32]
}
 800d510:	bf00      	nop
 800d512:	371c      	adds	r7, #28
 800d514:	46bd      	mov	sp, r7
 800d516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d51a:	4770      	bx	lr

0800d51c <USART_DeInit>:
  * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
  *         UART peripheral.
  * @retval None
  */
void USART_DeInit(USART_TypeDef* USARTx)
{
 800d51c:	b580      	push	{r7, lr}
 800d51e:	b082      	sub	sp, #8
 800d520:	af00      	add	r7, sp, #0
 800d522:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  if (USARTx == USART1)
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	4a3b      	ldr	r2, [pc, #236]	; (800d614 <USART_DeInit+0xf8>)
 800d528:	4293      	cmp	r3, r2
 800d52a:	d108      	bne.n	800d53e <USART_DeInit+0x22>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
 800d52c:	2101      	movs	r1, #1
 800d52e:	2010      	movs	r0, #16
 800d530:	f7fb fb32 	bl	8008b98 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
 800d534:	2100      	movs	r1, #0
 800d536:	2010      	movs	r0, #16
 800d538:	f7fb fb2e 	bl	8008b98 <RCC_APB2PeriphResetCmd>
    { 
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, DISABLE);
    }
  }
}
 800d53c:	e065      	b.n	800d60a <USART_DeInit+0xee>
  else if (USARTx == USART2)
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	4a35      	ldr	r2, [pc, #212]	; (800d618 <USART_DeInit+0xfc>)
 800d542:	4293      	cmp	r3, r2
 800d544:	d10a      	bne.n	800d55c <USART_DeInit+0x40>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
 800d546:	2101      	movs	r1, #1
 800d548:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800d54c:	f7fb fb04 	bl	8008b58 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
 800d550:	2100      	movs	r1, #0
 800d552:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800d556:	f7fb faff 	bl	8008b58 <RCC_APB1PeriphResetCmd>
}
 800d55a:	e056      	b.n	800d60a <USART_DeInit+0xee>
  else if (USARTx == USART3)
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	4a2f      	ldr	r2, [pc, #188]	; (800d61c <USART_DeInit+0x100>)
 800d560:	4293      	cmp	r3, r2
 800d562:	d10a      	bne.n	800d57a <USART_DeInit+0x5e>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
 800d564:	2101      	movs	r1, #1
 800d566:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800d56a:	f7fb faf5 	bl	8008b58 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
 800d56e:	2100      	movs	r1, #0
 800d570:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800d574:	f7fb faf0 	bl	8008b58 <RCC_APB1PeriphResetCmd>
}
 800d578:	e047      	b.n	800d60a <USART_DeInit+0xee>
  else if (USARTx == UART4)
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	4a28      	ldr	r2, [pc, #160]	; (800d620 <USART_DeInit+0x104>)
 800d57e:	4293      	cmp	r3, r2
 800d580:	d10a      	bne.n	800d598 <USART_DeInit+0x7c>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
 800d582:	2101      	movs	r1, #1
 800d584:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800d588:	f7fb fae6 	bl	8008b58 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
 800d58c:	2100      	movs	r1, #0
 800d58e:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800d592:	f7fb fae1 	bl	8008b58 <RCC_APB1PeriphResetCmd>
}
 800d596:	e038      	b.n	800d60a <USART_DeInit+0xee>
  else if (USARTx == UART5)
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	4a22      	ldr	r2, [pc, #136]	; (800d624 <USART_DeInit+0x108>)
 800d59c:	4293      	cmp	r3, r2
 800d59e:	d10a      	bne.n	800d5b6 <USART_DeInit+0x9a>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
 800d5a0:	2101      	movs	r1, #1
 800d5a2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800d5a6:	f7fb fad7 	bl	8008b58 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
 800d5aa:	2100      	movs	r1, #0
 800d5ac:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800d5b0:	f7fb fad2 	bl	8008b58 <RCC_APB1PeriphResetCmd>
}
 800d5b4:	e029      	b.n	800d60a <USART_DeInit+0xee>
  else if (USARTx == USART6)
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	4a1b      	ldr	r2, [pc, #108]	; (800d628 <USART_DeInit+0x10c>)
 800d5ba:	4293      	cmp	r3, r2
 800d5bc:	d108      	bne.n	800d5d0 <USART_DeInit+0xb4>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, ENABLE);
 800d5be:	2101      	movs	r1, #1
 800d5c0:	2020      	movs	r0, #32
 800d5c2:	f7fb fae9 	bl	8008b98 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, DISABLE);
 800d5c6:	2100      	movs	r1, #0
 800d5c8:	2020      	movs	r0, #32
 800d5ca:	f7fb fae5 	bl	8008b98 <RCC_APB2PeriphResetCmd>
}
 800d5ce:	e01c      	b.n	800d60a <USART_DeInit+0xee>
  else if (USARTx == UART7)
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	4a16      	ldr	r2, [pc, #88]	; (800d62c <USART_DeInit+0x110>)
 800d5d4:	4293      	cmp	r3, r2
 800d5d6:	d10a      	bne.n	800d5ee <USART_DeInit+0xd2>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART7, ENABLE);
 800d5d8:	2101      	movs	r1, #1
 800d5da:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800d5de:	f7fb fabb 	bl	8008b58 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART7, DISABLE);
 800d5e2:	2100      	movs	r1, #0
 800d5e4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800d5e8:	f7fb fab6 	bl	8008b58 <RCC_APB1PeriphResetCmd>
}
 800d5ec:	e00d      	b.n	800d60a <USART_DeInit+0xee>
    if (USARTx == UART8)
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	4a0f      	ldr	r2, [pc, #60]	; (800d630 <USART_DeInit+0x114>)
 800d5f2:	4293      	cmp	r3, r2
 800d5f4:	d109      	bne.n	800d60a <USART_DeInit+0xee>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, ENABLE);
 800d5f6:	2101      	movs	r1, #1
 800d5f8:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800d5fc:	f7fb faac 	bl	8008b58 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, DISABLE);
 800d600:	2100      	movs	r1, #0
 800d602:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800d606:	f7fb faa7 	bl	8008b58 <RCC_APB1PeriphResetCmd>
}
 800d60a:	bf00      	nop
 800d60c:	3708      	adds	r7, #8
 800d60e:	46bd      	mov	sp, r7
 800d610:	bd80      	pop	{r7, pc}
 800d612:	bf00      	nop
 800d614:	40011000 	.word	0x40011000
 800d618:	40004400 	.word	0x40004400
 800d61c:	40004800 	.word	0x40004800
 800d620:	40004c00 	.word	0x40004c00
 800d624:	40005000 	.word	0x40005000
 800d628:	40011400 	.word	0x40011400
 800d62c:	40007800 	.word	0x40007800
 800d630:	40007c00 	.word	0x40007c00

0800d634 <USART_Init>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 800d634:	b580      	push	{r7, lr}
 800d636:	b08a      	sub	sp, #40	; 0x28
 800d638:	af00      	add	r7, sp, #0
 800d63a:	6078      	str	r0, [r7, #4]
 800d63c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 800d63e:	2300      	movs	r3, #0
 800d640:	627b      	str	r3, [r7, #36]	; 0x24
 800d642:	2300      	movs	r3, #0
 800d644:	623b      	str	r3, [r7, #32]
  uint32_t integerdivider = 0x00;
 800d646:	2300      	movs	r3, #0
 800d648:	61fb      	str	r3, [r7, #28]
  uint32_t fractionaldivider = 0x00;
 800d64a:	2300      	movs	r3, #0
 800d64c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  }

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	8a1b      	ldrh	r3, [r3, #16]
 800d652:	b29b      	uxth	r3, r3
 800d654:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 800d656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d658:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800d65c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 800d65e:	683b      	ldr	r3, [r7, #0]
 800d660:	88db      	ldrh	r3, [r3, #6]
 800d662:	461a      	mov	r2, r3
 800d664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d666:	4313      	orrs	r3, r2
 800d668:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 800d66a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d66c:	b29a      	uxth	r2, r3
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	899b      	ldrh	r3, [r3, #12]
 800d676:	b29b      	uxth	r3, r3
 800d678:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 800d67a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d67c:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800d680:	f023 030c 	bic.w	r3, r3, #12
 800d684:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 800d686:	683b      	ldr	r3, [r7, #0]
 800d688:	889a      	ldrh	r2, [r3, #4]
 800d68a:	683b      	ldr	r3, [r7, #0]
 800d68c:	891b      	ldrh	r3, [r3, #8]
 800d68e:	4313      	orrs	r3, r2
 800d690:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
 800d692:	683b      	ldr	r3, [r7, #0]
 800d694:	895b      	ldrh	r3, [r3, #10]
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 800d696:	4313      	orrs	r3, r2
 800d698:	b29b      	uxth	r3, r3
 800d69a:	461a      	mov	r2, r3
 800d69c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d69e:	4313      	orrs	r3, r2
 800d6a0:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 800d6a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6a4:	b29a      	uxth	r2, r3
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	8a9b      	ldrh	r3, [r3, #20]
 800d6ae:	b29b      	uxth	r3, r3
 800d6b0:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 800d6b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d6b8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 800d6ba:	683b      	ldr	r3, [r7, #0]
 800d6bc:	899b      	ldrh	r3, [r3, #12]
 800d6be:	461a      	mov	r2, r3
 800d6c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6c2:	4313      	orrs	r3, r2
 800d6c4:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 800d6c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6c8:	b29a      	uxth	r2, r3
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate */
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 800d6ce:	f107 0308 	add.w	r3, r7, #8
 800d6d2:	4618      	mov	r0, r3
 800d6d4:	f7fa ff90 	bl	80085f8 <RCC_GetClocksFreq>

  if ((USARTx == USART1) || (USARTx == USART6))
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	4a30      	ldr	r2, [pc, #192]	; (800d79c <USART_Init+0x168>)
 800d6dc:	4293      	cmp	r3, r2
 800d6de:	d003      	beq.n	800d6e8 <USART_Init+0xb4>
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	4a2f      	ldr	r2, [pc, #188]	; (800d7a0 <USART_Init+0x16c>)
 800d6e4:	4293      	cmp	r3, r2
 800d6e6:	d102      	bne.n	800d6ee <USART_Init+0xba>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 800d6e8:	697b      	ldr	r3, [r7, #20]
 800d6ea:	623b      	str	r3, [r7, #32]
 800d6ec:	e001      	b.n	800d6f2 <USART_Init+0xbe>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 800d6ee:	693b      	ldr	r3, [r7, #16]
 800d6f0:	623b      	str	r3, [r7, #32]
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	899b      	ldrh	r3, [r3, #12]
 800d6f6:	b29b      	uxth	r3, r3
 800d6f8:	b21b      	sxth	r3, r3
 800d6fa:	2b00      	cmp	r3, #0
 800d6fc:	da0c      	bge.n	800d718 <USART_Init+0xe4>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 800d6fe:	6a3a      	ldr	r2, [r7, #32]
 800d700:	4613      	mov	r3, r2
 800d702:	009b      	lsls	r3, r3, #2
 800d704:	4413      	add	r3, r2
 800d706:	009a      	lsls	r2, r3, #2
 800d708:	441a      	add	r2, r3
 800d70a:	683b      	ldr	r3, [r7, #0]
 800d70c:	681b      	ldr	r3, [r3, #0]
 800d70e:	005b      	lsls	r3, r3, #1
 800d710:	fbb2 f3f3 	udiv	r3, r2, r3
 800d714:	61fb      	str	r3, [r7, #28]
 800d716:	e00b      	b.n	800d730 <USART_Init+0xfc>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 800d718:	6a3a      	ldr	r2, [r7, #32]
 800d71a:	4613      	mov	r3, r2
 800d71c:	009b      	lsls	r3, r3, #2
 800d71e:	4413      	add	r3, r2
 800d720:	009a      	lsls	r2, r3, #2
 800d722:	441a      	add	r2, r3
 800d724:	683b      	ldr	r3, [r7, #0]
 800d726:	681b      	ldr	r3, [r3, #0]
 800d728:	009b      	lsls	r3, r3, #2
 800d72a:	fbb2 f3f3 	udiv	r3, r2, r3
 800d72e:	61fb      	str	r3, [r7, #28]
  }
  tmpreg = (integerdivider / 100) << 4;
 800d730:	69fb      	ldr	r3, [r7, #28]
 800d732:	4a1c      	ldr	r2, [pc, #112]	; (800d7a4 <USART_Init+0x170>)
 800d734:	fba2 2303 	umull	r2, r3, r2, r3
 800d738:	095b      	lsrs	r3, r3, #5
 800d73a:	011b      	lsls	r3, r3, #4
 800d73c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 800d73e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d740:	091b      	lsrs	r3, r3, #4
 800d742:	2264      	movs	r2, #100	; 0x64
 800d744:	fb02 f303 	mul.w	r3, r2, r3
 800d748:	69fa      	ldr	r2, [r7, #28]
 800d74a:	1ad3      	subs	r3, r2, r3
 800d74c:	61bb      	str	r3, [r7, #24]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	899b      	ldrh	r3, [r3, #12]
 800d752:	b29b      	uxth	r3, r3
 800d754:	b21b      	sxth	r3, r3
 800d756:	2b00      	cmp	r3, #0
 800d758:	da0c      	bge.n	800d774 <USART_Init+0x140>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 800d75a:	69bb      	ldr	r3, [r7, #24]
 800d75c:	00db      	lsls	r3, r3, #3
 800d75e:	3332      	adds	r3, #50	; 0x32
 800d760:	4a10      	ldr	r2, [pc, #64]	; (800d7a4 <USART_Init+0x170>)
 800d762:	fba2 2303 	umull	r2, r3, r2, r3
 800d766:	095b      	lsrs	r3, r3, #5
 800d768:	f003 0307 	and.w	r3, r3, #7
 800d76c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d76e:	4313      	orrs	r3, r2
 800d770:	627b      	str	r3, [r7, #36]	; 0x24
 800d772:	e00b      	b.n	800d78c <USART_Init+0x158>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 800d774:	69bb      	ldr	r3, [r7, #24]
 800d776:	011b      	lsls	r3, r3, #4
 800d778:	3332      	adds	r3, #50	; 0x32
 800d77a:	4a0a      	ldr	r2, [pc, #40]	; (800d7a4 <USART_Init+0x170>)
 800d77c:	fba2 2303 	umull	r2, r3, r2, r3
 800d780:	095b      	lsrs	r3, r3, #5
 800d782:	f003 030f 	and.w	r3, r3, #15
 800d786:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d788:	4313      	orrs	r3, r2
 800d78a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  
  /* Write to USART BRR register */
  USARTx->BRR = (uint16_t)tmpreg;
 800d78c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d78e:	b29a      	uxth	r2, r3
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	811a      	strh	r2, [r3, #8]
}
 800d794:	bf00      	nop
 800d796:	3728      	adds	r7, #40	; 0x28
 800d798:	46bd      	mov	sp, r7
 800d79a:	bd80      	pop	{r7, pc}
 800d79c:	40011000 	.word	0x40011000
 800d7a0:	40011400 	.word	0x40011400
 800d7a4:	51eb851f 	.word	0x51eb851f

0800d7a8 <USART_StructInit>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
 800d7a8:	b480      	push	{r7}
 800d7aa:	b083      	sub	sp, #12
 800d7ac:	af00      	add	r7, sp, #0
 800d7ae:	6078      	str	r0, [r7, #4]
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800d7b6:	601a      	str	r2, [r3, #0]
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	2200      	movs	r2, #0
 800d7bc:	809a      	strh	r2, [r3, #4]
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	2200      	movs	r2, #0
 800d7c2:	80da      	strh	r2, [r3, #6]
  USART_InitStruct->USART_Parity = USART_Parity_No ;
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	2200      	movs	r2, #0
 800d7c8:	811a      	strh	r2, [r3, #8]
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	220c      	movs	r2, #12
 800d7ce:	815a      	strh	r2, [r3, #10]
  USART_InitStruct->USART_HardwareFlowControl = USART_HardwareFlowControl_None;  
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	2200      	movs	r2, #0
 800d7d4:	819a      	strh	r2, [r3, #12]
}
 800d7d6:	bf00      	nop
 800d7d8:	370c      	adds	r7, #12
 800d7da:	46bd      	mov	sp, r7
 800d7dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7e0:	4770      	bx	lr

0800d7e2 <USART_ClockInit>:
  *         contains the configuration information for the specified  USART peripheral.
  * @note   The Smart Card and Synchronous modes are not available for UART4 and UART5.    
  * @retval None
  */
void USART_ClockInit(USART_TypeDef* USARTx, USART_ClockInitTypeDef* USART_ClockInitStruct)
{
 800d7e2:	b480      	push	{r7}
 800d7e4:	b085      	sub	sp, #20
 800d7e6:	af00      	add	r7, sp, #0
 800d7e8:	6078      	str	r0, [r7, #4]
 800d7ea:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00;
 800d7ec:	2300      	movs	r3, #0
 800d7ee:	60fb      	str	r3, [r7, #12]
  assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
  assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
  
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	8a1b      	ldrh	r3, [r3, #16]
 800d7f4:	b29b      	uxth	r3, r3
 800d7f6:	60fb      	str	r3, [r7, #12]
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= (uint32_t)~((uint32_t)CR2_CLOCK_CLEAR_MASK);
 800d7f8:	68fb      	ldr	r3, [r7, #12]
 800d7fa:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800d7fe:	60fb      	str	r3, [r7, #12]
  /* Configure the USART Clock, CPOL, CPHA and LastBit ------------*/
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
 800d800:	683b      	ldr	r3, [r7, #0]
 800d802:	881a      	ldrh	r2, [r3, #0]
 800d804:	683b      	ldr	r3, [r7, #0]
 800d806:	885b      	ldrh	r3, [r3, #2]
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
 800d808:	4313      	orrs	r3, r2
 800d80a:	b29a      	uxth	r2, r3
 800d80c:	683b      	ldr	r3, [r7, #0]
 800d80e:	889b      	ldrh	r3, [r3, #4]
 800d810:	4313      	orrs	r3, r2
 800d812:	b29a      	uxth	r2, r3
 800d814:	683b      	ldr	r3, [r7, #0]
 800d816:	88db      	ldrh	r3, [r3, #6]
 800d818:	4313      	orrs	r3, r2
 800d81a:	b29b      	uxth	r3, r3
 800d81c:	461a      	mov	r2, r3
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
 800d81e:	68fb      	ldr	r3, [r7, #12]
 800d820:	4313      	orrs	r3, r2
 800d822:	60fb      	str	r3, [r7, #12]
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 800d824:	68fb      	ldr	r3, [r7, #12]
 800d826:	b29a      	uxth	r2, r3
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	821a      	strh	r2, [r3, #16]
}
 800d82c:	bf00      	nop
 800d82e:	3714      	adds	r7, #20
 800d830:	46bd      	mov	sp, r7
 800d832:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d836:	4770      	bx	lr

0800d838 <USART_ClockStructInit>:
  * @param  USART_ClockInitStruct: pointer to a USART_ClockInitTypeDef structure
  *         which will be initialized.
  * @retval None
  */
void USART_ClockStructInit(USART_ClockInitTypeDef* USART_ClockInitStruct)
{
 800d838:	b480      	push	{r7}
 800d83a:	b083      	sub	sp, #12
 800d83c:	af00      	add	r7, sp, #0
 800d83e:	6078      	str	r0, [r7, #4]
  /* USART_ClockInitStruct members default value */
  USART_ClockInitStruct->USART_Clock = USART_Clock_Disable;
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	2200      	movs	r2, #0
 800d844:	801a      	strh	r2, [r3, #0]
  USART_ClockInitStruct->USART_CPOL = USART_CPOL_Low;
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	2200      	movs	r2, #0
 800d84a:	805a      	strh	r2, [r3, #2]
  USART_ClockInitStruct->USART_CPHA = USART_CPHA_1Edge;
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	2200      	movs	r2, #0
 800d850:	809a      	strh	r2, [r3, #4]
  USART_ClockInitStruct->USART_LastBit = USART_LastBit_Disable;
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	2200      	movs	r2, #0
 800d856:	80da      	strh	r2, [r3, #6]
}
 800d858:	bf00      	nop
 800d85a:	370c      	adds	r7, #12
 800d85c:	46bd      	mov	sp, r7
 800d85e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d862:	4770      	bx	lr

0800d864 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 800d864:	b480      	push	{r7}
 800d866:	b083      	sub	sp, #12
 800d868:	af00      	add	r7, sp, #0
 800d86a:	6078      	str	r0, [r7, #4]
 800d86c:	460b      	mov	r3, r1
 800d86e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800d870:	78fb      	ldrb	r3, [r7, #3]
 800d872:	2b00      	cmp	r3, #0
 800d874:	d008      	beq.n	800d888 <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	899b      	ldrh	r3, [r3, #12]
 800d87a:	b29b      	uxth	r3, r3
 800d87c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800d880:	b29a      	uxth	r2, r3
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
  }
}
 800d886:	e007      	b.n	800d898 <USART_Cmd+0x34>
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	899b      	ldrh	r3, [r3, #12]
 800d88c:	b29b      	uxth	r3, r3
 800d88e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d892:	b29a      	uxth	r2, r3
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	819a      	strh	r2, [r3, #12]
}
 800d898:	bf00      	nop
 800d89a:	370c      	adds	r7, #12
 800d89c:	46bd      	mov	sp, r7
 800d89e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8a2:	4770      	bx	lr

0800d8a4 <USART_SetPrescaler>:
  * @param  USART_Prescaler: specifies the prescaler clock. 
  * @note   The function is used for IrDA mode with UART4 and UART5.   
  * @retval None
  */
void USART_SetPrescaler(USART_TypeDef* USARTx, uint8_t USART_Prescaler)
{ 
 800d8a4:	b480      	push	{r7}
 800d8a6:	b083      	sub	sp, #12
 800d8a8:	af00      	add	r7, sp, #0
 800d8aa:	6078      	str	r0, [r7, #4]
 800d8ac:	460b      	mov	r3, r1
 800d8ae:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Clear the USART prescaler */
  USARTx->GTPR &= USART_GTPR_GT;
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	8b1b      	ldrh	r3, [r3, #24]
 800d8b4:	b29b      	uxth	r3, r3
 800d8b6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800d8ba:	b29a      	uxth	r2, r3
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	831a      	strh	r2, [r3, #24]
  /* Set the USART prescaler */
  USARTx->GTPR |= USART_Prescaler;
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	8b1b      	ldrh	r3, [r3, #24]
 800d8c4:	b29a      	uxth	r2, r3
 800d8c6:	78fb      	ldrb	r3, [r7, #3]
 800d8c8:	b29b      	uxth	r3, r3
 800d8ca:	4313      	orrs	r3, r2
 800d8cc:	b29a      	uxth	r2, r3
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	831a      	strh	r2, [r3, #24]
}
 800d8d2:	bf00      	nop
 800d8d4:	370c      	adds	r7, #12
 800d8d6:	46bd      	mov	sp, r7
 800d8d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8dc:	4770      	bx	lr

0800d8de <USART_OverSampling8Cmd>:
  * @param  NewState: new state of the USART 8x oversampling mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_OverSampling8Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 800d8de:	b480      	push	{r7}
 800d8e0:	b083      	sub	sp, #12
 800d8e2:	af00      	add	r7, sp, #0
 800d8e4:	6078      	str	r0, [r7, #4]
 800d8e6:	460b      	mov	r3, r1
 800d8e8:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800d8ea:	78fb      	ldrb	r3, [r7, #3]
 800d8ec:	2b00      	cmp	r3, #0
 800d8ee:	d00a      	beq.n	800d906 <USART_OverSampling8Cmd+0x28>
  {
    /* Enable the 8x Oversampling mode by setting the OVER8 bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_OVER8;
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	899b      	ldrh	r3, [r3, #12]
 800d8f4:	b29b      	uxth	r3, r3
 800d8f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d8fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d8fe:	b29a      	uxth	r2, r3
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the 8x Oversampling mode by clearing the OVER8 bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_OVER8);
  }
}  
 800d904:	e007      	b.n	800d916 <USART_OverSampling8Cmd+0x38>
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_OVER8);
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	899b      	ldrh	r3, [r3, #12]
 800d90a:	b29b      	uxth	r3, r3
 800d90c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800d910:	b29a      	uxth	r2, r3
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	819a      	strh	r2, [r3, #12]
}  
 800d916:	bf00      	nop
 800d918:	370c      	adds	r7, #12
 800d91a:	46bd      	mov	sp, r7
 800d91c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d920:	4770      	bx	lr

0800d922 <USART_OneBitMethodCmd>:
  * @param  NewState: new state of the USART one bit sampling method.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_OneBitMethodCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 800d922:	b480      	push	{r7}
 800d924:	b083      	sub	sp, #12
 800d926:	af00      	add	r7, sp, #0
 800d928:	6078      	str	r0, [r7, #4]
 800d92a:	460b      	mov	r3, r1
 800d92c:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800d92e:	78fb      	ldrb	r3, [r7, #3]
 800d930:	2b00      	cmp	r3, #0
 800d932:	d008      	beq.n	800d946 <USART_OneBitMethodCmd+0x24>
  {
    /* Enable the one bit method by setting the ONEBITE bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_ONEBIT;
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	8a9b      	ldrh	r3, [r3, #20]
 800d938:	b29b      	uxth	r3, r3
 800d93a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800d93e:	b29a      	uxth	r2, r3
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	829a      	strh	r2, [r3, #20]
  else
  {
    /* Disable the one bit method by clearing the ONEBITE bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_ONEBIT);
  }
}
 800d944:	e007      	b.n	800d956 <USART_OneBitMethodCmd+0x34>
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_ONEBIT);
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	8a9b      	ldrh	r3, [r3, #20]
 800d94a:	b29b      	uxth	r3, r3
 800d94c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d950:	b29a      	uxth	r2, r3
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	829a      	strh	r2, [r3, #20]
}
 800d956:	bf00      	nop
 800d958:	370c      	adds	r7, #12
 800d95a:	46bd      	mov	sp, r7
 800d95c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d960:	4770      	bx	lr

0800d962 <USART_SendData>:
  *         UART peripheral.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 800d962:	b480      	push	{r7}
 800d964:	b083      	sub	sp, #12
 800d966:	af00      	add	r7, sp, #0
 800d968:	6078      	str	r0, [r7, #4]
 800d96a:	460b      	mov	r3, r1
 800d96c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 800d96e:	887b      	ldrh	r3, [r7, #2]
 800d970:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d974:	b29a      	uxth	r2, r3
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	809a      	strh	r2, [r3, #4]
}
 800d97a:	bf00      	nop
 800d97c:	370c      	adds	r7, #12
 800d97e:	46bd      	mov	sp, r7
 800d980:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d984:	4770      	bx	lr

0800d986 <USART_ReceiveData>:
  * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
  *         UART peripheral.
  * @retval The received data.
  */
uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
 800d986:	b480      	push	{r7}
 800d988:	b083      	sub	sp, #12
 800d98a:	af00      	add	r7, sp, #0
 800d98c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	889b      	ldrh	r3, [r3, #4]
 800d992:	b29b      	uxth	r3, r3
 800d994:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d998:	b29b      	uxth	r3, r3
}
 800d99a:	4618      	mov	r0, r3
 800d99c:	370c      	adds	r7, #12
 800d99e:	46bd      	mov	sp, r7
 800d9a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9a4:	4770      	bx	lr

0800d9a6 <USART_SetAddress>:
  *         UART peripheral.
  * @param  USART_Address: Indicates the address of the USART node.
  * @retval None
  */
void USART_SetAddress(USART_TypeDef* USARTx, uint8_t USART_Address)
{
 800d9a6:	b480      	push	{r7}
 800d9a8:	b083      	sub	sp, #12
 800d9aa:	af00      	add	r7, sp, #0
 800d9ac:	6078      	str	r0, [r7, #4]
 800d9ae:	460b      	mov	r3, r1
 800d9b0:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_ADDRESS(USART_Address)); 
    
  /* Clear the USART address */
  USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_ADD);
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	8a1b      	ldrh	r3, [r3, #16]
 800d9b6:	b29b      	uxth	r3, r3
 800d9b8:	f023 030f 	bic.w	r3, r3, #15
 800d9bc:	b29a      	uxth	r2, r3
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	821a      	strh	r2, [r3, #16]
  /* Set the USART address node */
  USARTx->CR2 |= USART_Address;
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	8a1b      	ldrh	r3, [r3, #16]
 800d9c6:	b29a      	uxth	r2, r3
 800d9c8:	78fb      	ldrb	r3, [r7, #3]
 800d9ca:	b29b      	uxth	r3, r3
 800d9cc:	4313      	orrs	r3, r2
 800d9ce:	b29a      	uxth	r2, r3
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	821a      	strh	r2, [r3, #16]
}
 800d9d4:	bf00      	nop
 800d9d6:	370c      	adds	r7, #12
 800d9d8:	46bd      	mov	sp, r7
 800d9da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9de:	4770      	bx	lr

0800d9e0 <USART_ReceiverWakeUpCmd>:
  * @param  NewState: new state of the USART mute mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ReceiverWakeUpCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 800d9e0:	b480      	push	{r7}
 800d9e2:	b083      	sub	sp, #12
 800d9e4:	af00      	add	r7, sp, #0
 800d9e6:	6078      	str	r0, [r7, #4]
 800d9e8:	460b      	mov	r3, r1
 800d9ea:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  
  if (NewState != DISABLE)
 800d9ec:	78fb      	ldrb	r3, [r7, #3]
 800d9ee:	2b00      	cmp	r3, #0
 800d9f0:	d008      	beq.n	800da04 <USART_ReceiverWakeUpCmd+0x24>
  {
    /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_RWU;
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	899b      	ldrh	r3, [r3, #12]
 800d9f6:	b29b      	uxth	r3, r3
 800d9f8:	f043 0302 	orr.w	r3, r3, #2
 800d9fc:	b29a      	uxth	r2, r3
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the USART mute mode by clearing the RWU bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_RWU);
  }
}
 800da02:	e007      	b.n	800da14 <USART_ReceiverWakeUpCmd+0x34>
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_RWU);
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	899b      	ldrh	r3, [r3, #12]
 800da08:	b29b      	uxth	r3, r3
 800da0a:	f023 0302 	bic.w	r3, r3, #2
 800da0e:	b29a      	uxth	r2, r3
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	819a      	strh	r2, [r3, #12]
}
 800da14:	bf00      	nop
 800da16:	370c      	adds	r7, #12
 800da18:	46bd      	mov	sp, r7
 800da1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da1e:	4770      	bx	lr

0800da20 <USART_WakeUpConfig>:
  *            @arg USART_WakeUp_IdleLine: WakeUp by an idle line detection
  *            @arg USART_WakeUp_AddressMark: WakeUp by an address mark
  * @retval None
  */
void USART_WakeUpConfig(USART_TypeDef* USARTx, uint16_t USART_WakeUp)
{
 800da20:	b480      	push	{r7}
 800da22:	b083      	sub	sp, #12
 800da24:	af00      	add	r7, sp, #0
 800da26:	6078      	str	r0, [r7, #4]
 800da28:	460b      	mov	r3, r1
 800da2a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_WAKEUP(USART_WakeUp));
  
  USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_WAKE);
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	899b      	ldrh	r3, [r3, #12]
 800da30:	b29b      	uxth	r3, r3
 800da32:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800da36:	b29a      	uxth	r2, r3
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	819a      	strh	r2, [r3, #12]
  USARTx->CR1 |= USART_WakeUp;
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	899b      	ldrh	r3, [r3, #12]
 800da40:	b29a      	uxth	r2, r3
 800da42:	887b      	ldrh	r3, [r7, #2]
 800da44:	4313      	orrs	r3, r2
 800da46:	b29a      	uxth	r2, r3
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	819a      	strh	r2, [r3, #12]
}
 800da4c:	bf00      	nop
 800da4e:	370c      	adds	r7, #12
 800da50:	46bd      	mov	sp, r7
 800da52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da56:	4770      	bx	lr

0800da58 <USART_LINBreakDetectLengthConfig>:
  *            @arg USART_LINBreakDetectLength_10b: 10-bit break detection
  *            @arg USART_LINBreakDetectLength_11b: 11-bit break detection
  * @retval None
  */
void USART_LINBreakDetectLengthConfig(USART_TypeDef* USARTx, uint16_t USART_LINBreakDetectLength)
{
 800da58:	b480      	push	{r7}
 800da5a:	b083      	sub	sp, #12
 800da5c:	af00      	add	r7, sp, #0
 800da5e:	6078      	str	r0, [r7, #4]
 800da60:	460b      	mov	r3, r1
 800da62:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_LIN_BREAK_DETECT_LENGTH(USART_LINBreakDetectLength));
  
  USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_LBDL);
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	8a1b      	ldrh	r3, [r3, #16]
 800da68:	b29b      	uxth	r3, r3
 800da6a:	f023 0320 	bic.w	r3, r3, #32
 800da6e:	b29a      	uxth	r2, r3
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	821a      	strh	r2, [r3, #16]
  USARTx->CR2 |= USART_LINBreakDetectLength;  
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	8a1b      	ldrh	r3, [r3, #16]
 800da78:	b29a      	uxth	r2, r3
 800da7a:	887b      	ldrh	r3, [r7, #2]
 800da7c:	4313      	orrs	r3, r2
 800da7e:	b29a      	uxth	r2, r3
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	821a      	strh	r2, [r3, #16]
}
 800da84:	bf00      	nop
 800da86:	370c      	adds	r7, #12
 800da88:	46bd      	mov	sp, r7
 800da8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da8e:	4770      	bx	lr

0800da90 <USART_LINCmd>:
  * @param  NewState: new state of the USART LIN mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_LINCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 800da90:	b480      	push	{r7}
 800da92:	b083      	sub	sp, #12
 800da94:	af00      	add	r7, sp, #0
 800da96:	6078      	str	r0, [r7, #4]
 800da98:	460b      	mov	r3, r1
 800da9a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800da9c:	78fb      	ldrb	r3, [r7, #3]
 800da9e:	2b00      	cmp	r3, #0
 800daa0:	d008      	beq.n	800dab4 <USART_LINCmd+0x24>
  {
    /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
    USARTx->CR2 |= USART_CR2_LINEN;
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	8a1b      	ldrh	r3, [r3, #16]
 800daa6:	b29b      	uxth	r3, r3
 800daa8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800daac:	b29a      	uxth	r2, r3
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	821a      	strh	r2, [r3, #16]
  else
  {
    /* Disable the LIN mode by clearing the LINEN bit in the CR2 register */
    USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_LINEN);
  }
}
 800dab2:	e007      	b.n	800dac4 <USART_LINCmd+0x34>
    USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_LINEN);
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	8a1b      	ldrh	r3, [r3, #16]
 800dab8:	b29b      	uxth	r3, r3
 800daba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800dabe:	b29a      	uxth	r2, r3
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	821a      	strh	r2, [r3, #16]
}
 800dac4:	bf00      	nop
 800dac6:	370c      	adds	r7, #12
 800dac8:	46bd      	mov	sp, r7
 800daca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dace:	4770      	bx	lr

0800dad0 <USART_SendBreak>:
  * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
  *         UART peripheral.
  * @retval None
  */
void USART_SendBreak(USART_TypeDef* USARTx)
{
 800dad0:	b480      	push	{r7}
 800dad2:	b083      	sub	sp, #12
 800dad4:	af00      	add	r7, sp, #0
 800dad6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Send break characters */
  USARTx->CR1 |= USART_CR1_SBK;
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	899b      	ldrh	r3, [r3, #12]
 800dadc:	b29b      	uxth	r3, r3
 800dade:	f043 0301 	orr.w	r3, r3, #1
 800dae2:	b29a      	uxth	r2, r3
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	819a      	strh	r2, [r3, #12]
}
 800dae8:	bf00      	nop
 800daea:	370c      	adds	r7, #12
 800daec:	46bd      	mov	sp, r7
 800daee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daf2:	4770      	bx	lr

0800daf4 <USART_HalfDuplexCmd>:
  * @param  NewState: new state of the USART Communication.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_HalfDuplexCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 800daf4:	b480      	push	{r7}
 800daf6:	b083      	sub	sp, #12
 800daf8:	af00      	add	r7, sp, #0
 800dafa:	6078      	str	r0, [r7, #4]
 800dafc:	460b      	mov	r3, r1
 800dafe:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800db00:	78fb      	ldrb	r3, [r7, #3]
 800db02:	2b00      	cmp	r3, #0
 800db04:	d008      	beq.n	800db18 <USART_HalfDuplexCmd+0x24>
  {
    /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_HDSEL;
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	8a9b      	ldrh	r3, [r3, #20]
 800db0a:	b29b      	uxth	r3, r3
 800db0c:	f043 0308 	orr.w	r3, r3, #8
 800db10:	b29a      	uxth	r2, r3
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	829a      	strh	r2, [r3, #20]
  else
  {
    /* Disable the Half-Duplex mode by clearing the HDSEL bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_HDSEL);
  }
}
 800db16:	e007      	b.n	800db28 <USART_HalfDuplexCmd+0x34>
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_HDSEL);
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	8a9b      	ldrh	r3, [r3, #20]
 800db1c:	b29b      	uxth	r3, r3
 800db1e:	f023 0308 	bic.w	r3, r3, #8
 800db22:	b29a      	uxth	r2, r3
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	829a      	strh	r2, [r3, #20]
}
 800db28:	bf00      	nop
 800db2a:	370c      	adds	r7, #12
 800db2c:	46bd      	mov	sp, r7
 800db2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db32:	4770      	bx	lr

0800db34 <USART_SetGuardTime>:
  *         UART peripheral.
  * @param  USART_GuardTime: specifies the guard time.   
  * @retval None
  */
void USART_SetGuardTime(USART_TypeDef* USARTx, uint8_t USART_GuardTime)
{    
 800db34:	b480      	push	{r7}
 800db36:	b083      	sub	sp, #12
 800db38:	af00      	add	r7, sp, #0
 800db3a:	6078      	str	r0, [r7, #4]
 800db3c:	460b      	mov	r3, r1
 800db3e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_1236_PERIPH(USARTx));
  
  /* Clear the USART Guard time */
  USARTx->GTPR &= USART_GTPR_PSC;
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	8b1b      	ldrh	r3, [r3, #24]
 800db44:	b29b      	uxth	r3, r3
 800db46:	b2db      	uxtb	r3, r3
 800db48:	b29a      	uxth	r2, r3
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	831a      	strh	r2, [r3, #24]
  /* Set the USART guard time */
  USARTx->GTPR |= (uint16_t)((uint16_t)USART_GuardTime << 0x08);
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	8b1b      	ldrh	r3, [r3, #24]
 800db52:	b29a      	uxth	r2, r3
 800db54:	78fb      	ldrb	r3, [r7, #3]
 800db56:	b29b      	uxth	r3, r3
 800db58:	021b      	lsls	r3, r3, #8
 800db5a:	b29b      	uxth	r3, r3
 800db5c:	4313      	orrs	r3, r2
 800db5e:	b29a      	uxth	r2, r3
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	831a      	strh	r2, [r3, #24]
}
 800db64:	bf00      	nop
 800db66:	370c      	adds	r7, #12
 800db68:	46bd      	mov	sp, r7
 800db6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db6e:	4770      	bx	lr

0800db70 <USART_SmartCardCmd>:
  * @param  NewState: new state of the Smart Card mode.
  *          This parameter can be: ENABLE or DISABLE.      
  * @retval None
  */
void USART_SmartCardCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 800db70:	b480      	push	{r7}
 800db72:	b083      	sub	sp, #12
 800db74:	af00      	add	r7, sp, #0
 800db76:	6078      	str	r0, [r7, #4]
 800db78:	460b      	mov	r3, r1
 800db7a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_1236_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800db7c:	78fb      	ldrb	r3, [r7, #3]
 800db7e:	2b00      	cmp	r3, #0
 800db80:	d008      	beq.n	800db94 <USART_SmartCardCmd+0x24>
  {
    /* Enable the SC mode by setting the SCEN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_SCEN;
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	8a9b      	ldrh	r3, [r3, #20]
 800db86:	b29b      	uxth	r3, r3
 800db88:	f043 0320 	orr.w	r3, r3, #32
 800db8c:	b29a      	uxth	r2, r3
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	829a      	strh	r2, [r3, #20]
  else
  {
    /* Disable the SC mode by clearing the SCEN bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_SCEN);
  }
}
 800db92:	e007      	b.n	800dba4 <USART_SmartCardCmd+0x34>
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_SCEN);
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	8a9b      	ldrh	r3, [r3, #20]
 800db98:	b29b      	uxth	r3, r3
 800db9a:	f023 0320 	bic.w	r3, r3, #32
 800db9e:	b29a      	uxth	r2, r3
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	829a      	strh	r2, [r3, #20]
}
 800dba4:	bf00      	nop
 800dba6:	370c      	adds	r7, #12
 800dba8:	46bd      	mov	sp, r7
 800dbaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbae:	4770      	bx	lr

0800dbb0 <USART_SmartCardNACKCmd>:
  * @param  NewState: new state of the NACK transmission.
  *          This parameter can be: ENABLE or DISABLE.  
  * @retval None
  */
void USART_SmartCardNACKCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 800dbb0:	b480      	push	{r7}
 800dbb2:	b083      	sub	sp, #12
 800dbb4:	af00      	add	r7, sp, #0
 800dbb6:	6078      	str	r0, [r7, #4]
 800dbb8:	460b      	mov	r3, r1
 800dbba:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_1236_PERIPH(USARTx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800dbbc:	78fb      	ldrb	r3, [r7, #3]
 800dbbe:	2b00      	cmp	r3, #0
 800dbc0:	d008      	beq.n	800dbd4 <USART_SmartCardNACKCmd+0x24>
  {
    /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_NACK;
 800dbc2:	687b      	ldr	r3, [r7, #4]
 800dbc4:	8a9b      	ldrh	r3, [r3, #20]
 800dbc6:	b29b      	uxth	r3, r3
 800dbc8:	f043 0310 	orr.w	r3, r3, #16
 800dbcc:	b29a      	uxth	r2, r3
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	829a      	strh	r2, [r3, #20]
  else
  {
    /* Disable the NACK transmission by clearing the NACK bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_NACK);
  }
}
 800dbd2:	e007      	b.n	800dbe4 <USART_SmartCardNACKCmd+0x34>
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_NACK);
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	8a9b      	ldrh	r3, [r3, #20]
 800dbd8:	b29b      	uxth	r3, r3
 800dbda:	f023 0310 	bic.w	r3, r3, #16
 800dbde:	b29a      	uxth	r2, r3
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	829a      	strh	r2, [r3, #20]
}
 800dbe4:	bf00      	nop
 800dbe6:	370c      	adds	r7, #12
 800dbe8:	46bd      	mov	sp, r7
 800dbea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbee:	4770      	bx	lr

0800dbf0 <USART_IrDAConfig>:
  *            @arg USART_IrDAMode_LowPower
  *            @arg USART_IrDAMode_Normal
  * @retval None
  */
void USART_IrDAConfig(USART_TypeDef* USARTx, uint16_t USART_IrDAMode)
{
 800dbf0:	b480      	push	{r7}
 800dbf2:	b083      	sub	sp, #12
 800dbf4:	af00      	add	r7, sp, #0
 800dbf6:	6078      	str	r0, [r7, #4]
 800dbf8:	460b      	mov	r3, r1
 800dbfa:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_IRDA_MODE(USART_IrDAMode));
    
  USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_IRLP);
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	8a9b      	ldrh	r3, [r3, #20]
 800dc00:	b29b      	uxth	r3, r3
 800dc02:	f023 0304 	bic.w	r3, r3, #4
 800dc06:	b29a      	uxth	r2, r3
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	829a      	strh	r2, [r3, #20]
  USARTx->CR3 |= USART_IrDAMode;
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	8a9b      	ldrh	r3, [r3, #20]
 800dc10:	b29a      	uxth	r2, r3
 800dc12:	887b      	ldrh	r3, [r7, #2]
 800dc14:	4313      	orrs	r3, r2
 800dc16:	b29a      	uxth	r2, r3
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	829a      	strh	r2, [r3, #20]
}
 800dc1c:	bf00      	nop
 800dc1e:	370c      	adds	r7, #12
 800dc20:	46bd      	mov	sp, r7
 800dc22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc26:	4770      	bx	lr

0800dc28 <USART_IrDACmd>:
  * @param  NewState: new state of the IrDA mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_IrDACmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 800dc28:	b480      	push	{r7}
 800dc2a:	b083      	sub	sp, #12
 800dc2c:	af00      	add	r7, sp, #0
 800dc2e:	6078      	str	r0, [r7, #4]
 800dc30:	460b      	mov	r3, r1
 800dc32:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
 800dc34:	78fb      	ldrb	r3, [r7, #3]
 800dc36:	2b00      	cmp	r3, #0
 800dc38:	d008      	beq.n	800dc4c <USART_IrDACmd+0x24>
  {
    /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_IREN;
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	8a9b      	ldrh	r3, [r3, #20]
 800dc3e:	b29b      	uxth	r3, r3
 800dc40:	f043 0302 	orr.w	r3, r3, #2
 800dc44:	b29a      	uxth	r2, r3
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	829a      	strh	r2, [r3, #20]
  else
  {
    /* Disable the IrDA mode by clearing the IREN bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_IREN);
  }
}
 800dc4a:	e007      	b.n	800dc5c <USART_IrDACmd+0x34>
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_IREN);
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	8a9b      	ldrh	r3, [r3, #20]
 800dc50:	b29b      	uxth	r3, r3
 800dc52:	f023 0302 	bic.w	r3, r3, #2
 800dc56:	b29a      	uxth	r2, r3
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	829a      	strh	r2, [r3, #20]
}
 800dc5c:	bf00      	nop
 800dc5e:	370c      	adds	r7, #12
 800dc60:	46bd      	mov	sp, r7
 800dc62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc66:	4770      	bx	lr

0800dc68 <USART_DMACmd>:
  * @param  NewState: new state of the DMA Request sources.
  *          This parameter can be: ENABLE or DISABLE.   
  * @retval None
  */
void USART_DMACmd(USART_TypeDef* USARTx, uint16_t USART_DMAReq, FunctionalState NewState)
{
 800dc68:	b480      	push	{r7}
 800dc6a:	b083      	sub	sp, #12
 800dc6c:	af00      	add	r7, sp, #0
 800dc6e:	6078      	str	r0, [r7, #4]
 800dc70:	460b      	mov	r3, r1
 800dc72:	807b      	strh	r3, [r7, #2]
 800dc74:	4613      	mov	r3, r2
 800dc76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DMAREQ(USART_DMAReq));  
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 

  if (NewState != DISABLE)
 800dc78:	787b      	ldrb	r3, [r7, #1]
 800dc7a:	2b00      	cmp	r3, #0
 800dc7c:	d008      	beq.n	800dc90 <USART_DMACmd+0x28>
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
 800dc7e:	687b      	ldr	r3, [r7, #4]
 800dc80:	8a9b      	ldrh	r3, [r3, #20]
 800dc82:	b29a      	uxth	r2, r3
 800dc84:	887b      	ldrh	r3, [r7, #2]
 800dc86:	4313      	orrs	r3, r2
 800dc88:	b29a      	uxth	r2, r3
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	829a      	strh	r2, [r3, #20]
  {
    /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 &= (uint16_t)~USART_DMAReq;
  }
}
 800dc8e:	e009      	b.n	800dca4 <USART_DMACmd+0x3c>
    USARTx->CR3 &= (uint16_t)~USART_DMAReq;
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	8a9b      	ldrh	r3, [r3, #20]
 800dc94:	b29a      	uxth	r2, r3
 800dc96:	887b      	ldrh	r3, [r7, #2]
 800dc98:	43db      	mvns	r3, r3
 800dc9a:	b29b      	uxth	r3, r3
 800dc9c:	4013      	ands	r3, r2
 800dc9e:	b29a      	uxth	r2, r3
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	829a      	strh	r2, [r3, #20]
}
 800dca4:	bf00      	nop
 800dca6:	370c      	adds	r7, #12
 800dca8:	46bd      	mov	sp, r7
 800dcaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcae:	4770      	bx	lr

0800dcb0 <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
 800dcb0:	b480      	push	{r7}
 800dcb2:	b087      	sub	sp, #28
 800dcb4:	af00      	add	r7, sp, #0
 800dcb6:	6078      	str	r0, [r7, #4]
 800dcb8:	460b      	mov	r3, r1
 800dcba:	807b      	strh	r3, [r7, #2]
 800dcbc:	4613      	mov	r3, r2
 800dcbe:	707b      	strb	r3, [r7, #1]
  uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
 800dcc0:	2300      	movs	r3, #0
 800dcc2:	613b      	str	r3, [r7, #16]
 800dcc4:	2300      	movs	r3, #0
 800dcc6:	60fb      	str	r3, [r7, #12]
 800dcc8:	2300      	movs	r3, #0
 800dcca:	60bb      	str	r3, [r7, #8]
  uint32_t usartxbase = 0x00;
 800dccc:	2300      	movs	r3, #0
 800dcce:	617b      	str	r3, [r7, #20]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  usartxbase = (uint32_t)USARTx;
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	617b      	str	r3, [r7, #20]

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 800dcd4:	887b      	ldrh	r3, [r7, #2]
 800dcd6:	b2db      	uxtb	r3, r3
 800dcd8:	095b      	lsrs	r3, r3, #5
 800dcda:	b2db      	uxtb	r3, r3
 800dcdc:	613b      	str	r3, [r7, #16]

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
 800dcde:	887b      	ldrh	r3, [r7, #2]
 800dce0:	f003 031f 	and.w	r3, r3, #31
 800dce4:	60fb      	str	r3, [r7, #12]
  itmask = (((uint32_t)0x01) << itpos);
 800dce6:	2201      	movs	r2, #1
 800dce8:	68fb      	ldr	r3, [r7, #12]
 800dcea:	fa02 f303 	lsl.w	r3, r2, r3
 800dcee:	60bb      	str	r3, [r7, #8]
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 800dcf0:	693b      	ldr	r3, [r7, #16]
 800dcf2:	2b01      	cmp	r3, #1
 800dcf4:	d103      	bne.n	800dcfe <USART_ITConfig+0x4e>
  {
    usartxbase += 0x0C;
 800dcf6:	697b      	ldr	r3, [r7, #20]
 800dcf8:	330c      	adds	r3, #12
 800dcfa:	617b      	str	r3, [r7, #20]
 800dcfc:	e009      	b.n	800dd12 <USART_ITConfig+0x62>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
 800dcfe:	693b      	ldr	r3, [r7, #16]
 800dd00:	2b02      	cmp	r3, #2
 800dd02:	d103      	bne.n	800dd0c <USART_ITConfig+0x5c>
  {
    usartxbase += 0x10;
 800dd04:	697b      	ldr	r3, [r7, #20]
 800dd06:	3310      	adds	r3, #16
 800dd08:	617b      	str	r3, [r7, #20]
 800dd0a:	e002      	b.n	800dd12 <USART_ITConfig+0x62>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
 800dd0c:	697b      	ldr	r3, [r7, #20]
 800dd0e:	3314      	adds	r3, #20
 800dd10:	617b      	str	r3, [r7, #20]
  }
  if (NewState != DISABLE)
 800dd12:	787b      	ldrb	r3, [r7, #1]
 800dd14:	2b00      	cmp	r3, #0
 800dd16:	d006      	beq.n	800dd26 <USART_ITConfig+0x76>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 800dd18:	697b      	ldr	r3, [r7, #20]
 800dd1a:	6819      	ldr	r1, [r3, #0]
 800dd1c:	697b      	ldr	r3, [r7, #20]
 800dd1e:	68ba      	ldr	r2, [r7, #8]
 800dd20:	430a      	orrs	r2, r1
 800dd22:	601a      	str	r2, [r3, #0]
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
  }
}
 800dd24:	e006      	b.n	800dd34 <USART_ITConfig+0x84>
    *(__IO uint32_t*)usartxbase &= ~itmask;
 800dd26:	697b      	ldr	r3, [r7, #20]
 800dd28:	6819      	ldr	r1, [r3, #0]
 800dd2a:	68bb      	ldr	r3, [r7, #8]
 800dd2c:	43da      	mvns	r2, r3
 800dd2e:	697b      	ldr	r3, [r7, #20]
 800dd30:	400a      	ands	r2, r1
 800dd32:	601a      	str	r2, [r3, #0]
}
 800dd34:	bf00      	nop
 800dd36:	371c      	adds	r7, #28
 800dd38:	46bd      	mov	sp, r7
 800dd3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd3e:	4770      	bx	lr

0800dd40 <USART_GetFlagStatus>:
  *            @arg USART_FLAG_FE:   Framing Error flag
  *            @arg USART_FLAG_PE:   Parity Error flag
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
 800dd40:	b480      	push	{r7}
 800dd42:	b085      	sub	sp, #20
 800dd44:	af00      	add	r7, sp, #0
 800dd46:	6078      	str	r0, [r7, #4]
 800dd48:	460b      	mov	r3, r1
 800dd4a:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 800dd4c:	2300      	movs	r3, #0
 800dd4e:	73fb      	strb	r3, [r7, #15]
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	881b      	ldrh	r3, [r3, #0]
 800dd54:	b29a      	uxth	r2, r3
 800dd56:	887b      	ldrh	r3, [r7, #2]
 800dd58:	4013      	ands	r3, r2
 800dd5a:	b29b      	uxth	r3, r3
 800dd5c:	2b00      	cmp	r3, #0
 800dd5e:	d002      	beq.n	800dd66 <USART_GetFlagStatus+0x26>
  {
    bitstatus = SET;
 800dd60:	2301      	movs	r3, #1
 800dd62:	73fb      	strb	r3, [r7, #15]
 800dd64:	e001      	b.n	800dd6a <USART_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
 800dd66:	2300      	movs	r3, #0
 800dd68:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800dd6a:	7bfb      	ldrb	r3, [r7, #15]
}
 800dd6c:	4618      	mov	r0, r3
 800dd6e:	3714      	adds	r7, #20
 800dd70:	46bd      	mov	sp, r7
 800dd72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd76:	4770      	bx	lr

0800dd78 <USART_ClearFlag>:
  *          (USART_SendData()).
  *   
  * @retval None
  */
void USART_ClearFlag(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
 800dd78:	b480      	push	{r7}
 800dd7a:	b083      	sub	sp, #12
 800dd7c:	af00      	add	r7, sp, #0
 800dd7e:	6078      	str	r0, [r7, #4]
 800dd80:	460b      	mov	r3, r1
 800dd82:	807b      	strh	r3, [r7, #2]
  if ((USART_FLAG & USART_FLAG_CTS) == USART_FLAG_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
       
  USARTx->SR = (uint16_t)~USART_FLAG;
 800dd84:	887b      	ldrh	r3, [r7, #2]
 800dd86:	43db      	mvns	r3, r3
 800dd88:	b29a      	uxth	r2, r3
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	801a      	strh	r2, [r3, #0]
}
 800dd8e:	bf00      	nop
 800dd90:	370c      	adds	r7, #12
 800dd92:	46bd      	mov	sp, r7
 800dd94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd98:	4770      	bx	lr

0800dd9a <USART_GetITStatus>:
  *            @arg USART_IT_FE:   Framing Error interrupt
  *            @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 800dd9a:	b480      	push	{r7}
 800dd9c:	b087      	sub	sp, #28
 800dd9e:	af00      	add	r7, sp, #0
 800dda0:	6078      	str	r0, [r7, #4]
 800dda2:	460b      	mov	r3, r1
 800dda4:	807b      	strh	r3, [r7, #2]
  uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
 800dda6:	2300      	movs	r3, #0
 800dda8:	60fb      	str	r3, [r7, #12]
 800ddaa:	2300      	movs	r3, #0
 800ddac:	617b      	str	r3, [r7, #20]
 800ddae:	2300      	movs	r3, #0
 800ddb0:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
 800ddb2:	2300      	movs	r3, #0
 800ddb4:	74fb      	strb	r3, [r7, #19]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 800ddb6:	887b      	ldrh	r3, [r7, #2]
 800ddb8:	b2db      	uxtb	r3, r3
 800ddba:	095b      	lsrs	r3, r3, #5
 800ddbc:	b2db      	uxtb	r3, r3
 800ddbe:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
 800ddc0:	887b      	ldrh	r3, [r7, #2]
 800ddc2:	f003 031f 	and.w	r3, r3, #31
 800ddc6:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
 800ddc8:	2201      	movs	r2, #1
 800ddca:	697b      	ldr	r3, [r7, #20]
 800ddcc:	fa02 f303 	lsl.w	r3, r2, r3
 800ddd0:	617b      	str	r3, [r7, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 800ddd2:	68bb      	ldr	r3, [r7, #8]
 800ddd4:	2b01      	cmp	r3, #1
 800ddd6:	d107      	bne.n	800dde8 <USART_GetITStatus+0x4e>
  {
    itmask &= USARTx->CR1;
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	899b      	ldrh	r3, [r3, #12]
 800dddc:	b29b      	uxth	r3, r3
 800ddde:	461a      	mov	r2, r3
 800dde0:	697b      	ldr	r3, [r7, #20]
 800dde2:	4013      	ands	r3, r2
 800dde4:	617b      	str	r3, [r7, #20]
 800dde6:	e011      	b.n	800de0c <USART_GetITStatus+0x72>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 800dde8:	68bb      	ldr	r3, [r7, #8]
 800ddea:	2b02      	cmp	r3, #2
 800ddec:	d107      	bne.n	800ddfe <USART_GetITStatus+0x64>
  {
    itmask &= USARTx->CR2;
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	8a1b      	ldrh	r3, [r3, #16]
 800ddf2:	b29b      	uxth	r3, r3
 800ddf4:	461a      	mov	r2, r3
 800ddf6:	697b      	ldr	r3, [r7, #20]
 800ddf8:	4013      	ands	r3, r2
 800ddfa:	617b      	str	r3, [r7, #20]
 800ddfc:	e006      	b.n	800de0c <USART_GetITStatus+0x72>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	8a9b      	ldrh	r3, [r3, #20]
 800de02:	b29b      	uxth	r3, r3
 800de04:	461a      	mov	r2, r3
 800de06:	697b      	ldr	r3, [r7, #20]
 800de08:	4013      	ands	r3, r2
 800de0a:	617b      	str	r3, [r7, #20]
  }
  
  bitpos = USART_IT >> 0x08;
 800de0c:	887b      	ldrh	r3, [r7, #2]
 800de0e:	0a1b      	lsrs	r3, r3, #8
 800de10:	b29b      	uxth	r3, r3
 800de12:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
 800de14:	2201      	movs	r2, #1
 800de16:	68fb      	ldr	r3, [r7, #12]
 800de18:	fa02 f303 	lsl.w	r3, r2, r3
 800de1c:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->SR;
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	881b      	ldrh	r3, [r3, #0]
 800de22:	b29b      	uxth	r3, r3
 800de24:	461a      	mov	r2, r3
 800de26:	68fb      	ldr	r3, [r7, #12]
 800de28:	4013      	ands	r3, r2
 800de2a:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 800de2c:	697b      	ldr	r3, [r7, #20]
 800de2e:	2b00      	cmp	r3, #0
 800de30:	d005      	beq.n	800de3e <USART_GetITStatus+0xa4>
 800de32:	68fb      	ldr	r3, [r7, #12]
 800de34:	2b00      	cmp	r3, #0
 800de36:	d002      	beq.n	800de3e <USART_GetITStatus+0xa4>
  {
    bitstatus = SET;
 800de38:	2301      	movs	r3, #1
 800de3a:	74fb      	strb	r3, [r7, #19]
 800de3c:	e001      	b.n	800de42 <USART_GetITStatus+0xa8>
  }
  else
  {
    bitstatus = RESET;
 800de3e:	2300      	movs	r3, #0
 800de40:	74fb      	strb	r3, [r7, #19]
  }
  
  return bitstatus;  
 800de42:	7cfb      	ldrb	r3, [r7, #19]
}
 800de44:	4618      	mov	r0, r3
 800de46:	371c      	adds	r7, #28
 800de48:	46bd      	mov	sp, r7
 800de4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de4e:	4770      	bx	lr

0800de50 <USART_ClearITPendingBit>:
  *          (USART_SendData()).
  *  
  * @retval None
  */
void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 800de50:	b480      	push	{r7}
 800de52:	b085      	sub	sp, #20
 800de54:	af00      	add	r7, sp, #0
 800de56:	6078      	str	r0, [r7, #4]
 800de58:	460b      	mov	r3, r1
 800de5a:	807b      	strh	r3, [r7, #2]
  uint16_t bitpos = 0x00, itmask = 0x00;
 800de5c:	2300      	movs	r3, #0
 800de5e:	81fb      	strh	r3, [r7, #14]
 800de60:	2300      	movs	r3, #0
 800de62:	81bb      	strh	r3, [r7, #12]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  bitpos = USART_IT >> 0x08;
 800de64:	887b      	ldrh	r3, [r7, #2]
 800de66:	0a1b      	lsrs	r3, r3, #8
 800de68:	81fb      	strh	r3, [r7, #14]
  itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
 800de6a:	89fb      	ldrh	r3, [r7, #14]
 800de6c:	2201      	movs	r2, #1
 800de6e:	fa02 f303 	lsl.w	r3, r2, r3
 800de72:	81bb      	strh	r3, [r7, #12]
  USARTx->SR = (uint16_t)~itmask;
 800de74:	89bb      	ldrh	r3, [r7, #12]
 800de76:	43db      	mvns	r3, r3
 800de78:	b29a      	uxth	r2, r3
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	801a      	strh	r2, [r3, #0]
}
 800de7e:	bf00      	nop
 800de80:	3714      	adds	r7, #20
 800de82:	46bd      	mov	sp, r7
 800de84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de88:	4770      	bx	lr
 800de8a:	bf00      	nop

0800de8c <WWDG_DeInit>:
  * @brief  Deinitializes the WWDG peripheral registers to their default reset values.
  * @param  None
  * @retval None
  */
void WWDG_DeInit(void)
{
 800de8c:	b580      	push	{r7, lr}
 800de8e:	af00      	add	r7, sp, #0
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_WWDG, ENABLE);
 800de90:	2101      	movs	r1, #1
 800de92:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800de96:	f7fa fe5f 	bl	8008b58 <RCC_APB1PeriphResetCmd>
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_WWDG, DISABLE);
 800de9a:	2100      	movs	r1, #0
 800de9c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800dea0:	f7fa fe5a 	bl	8008b58 <RCC_APB1PeriphResetCmd>
}
 800dea4:	bf00      	nop
 800dea6:	bd80      	pop	{r7, pc}

0800dea8 <WWDG_SetPrescaler>:
  *     @arg WWDG_Prescaler_4: WWDG counter clock = (PCLK1/4096)/4
  *     @arg WWDG_Prescaler_8: WWDG counter clock = (PCLK1/4096)/8
  * @retval None
  */
void WWDG_SetPrescaler(uint32_t WWDG_Prescaler)
{
 800dea8:	b480      	push	{r7}
 800deaa:	b085      	sub	sp, #20
 800deac:	af00      	add	r7, sp, #0
 800deae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800deb0:	2300      	movs	r3, #0
 800deb2:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_WWDG_PRESCALER(WWDG_Prescaler));
  /* Clear WDGTB[1:0] bits */
  tmpreg = WWDG->CFR & CFR_WDGTB_MASK;
 800deb4:	4b08      	ldr	r3, [pc, #32]	; (800ded8 <WWDG_SetPrescaler+0x30>)
 800deb6:	685b      	ldr	r3, [r3, #4]
 800deb8:	f423 73c0 	bic.w	r3, r3, #384	; 0x180
 800debc:	60fb      	str	r3, [r7, #12]
  /* Set WDGTB[1:0] bits according to WWDG_Prescaler value */
  tmpreg |= WWDG_Prescaler;
 800debe:	68fa      	ldr	r2, [r7, #12]
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	4313      	orrs	r3, r2
 800dec4:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  WWDG->CFR = tmpreg;
 800dec6:	4a04      	ldr	r2, [pc, #16]	; (800ded8 <WWDG_SetPrescaler+0x30>)
 800dec8:	68fb      	ldr	r3, [r7, #12]
 800deca:	6053      	str	r3, [r2, #4]
}
 800decc:	bf00      	nop
 800dece:	3714      	adds	r7, #20
 800ded0:	46bd      	mov	sp, r7
 800ded2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ded6:	4770      	bx	lr
 800ded8:	40002c00 	.word	0x40002c00

0800dedc <WWDG_SetWindowValue>:
  * @param  WindowValue: specifies the window value to be compared to the downcounter.
  *   This parameter value must be lower than 0x80.
  * @retval None
  */
void WWDG_SetWindowValue(uint8_t WindowValue)
{
 800dedc:	b480      	push	{r7}
 800dede:	b085      	sub	sp, #20
 800dee0:	af00      	add	r7, sp, #0
 800dee2:	4603      	mov	r3, r0
 800dee4:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t tmpreg = 0;
 800dee6:	2300      	movs	r3, #0
 800dee8:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_WWDG_WINDOW_VALUE(WindowValue));
  /* Clear W[6:0] bits */

  tmpreg = WWDG->CFR & CFR_W_MASK;
 800deea:	4b0a      	ldr	r3, [pc, #40]	; (800df14 <WWDG_SetWindowValue+0x38>)
 800deec:	685b      	ldr	r3, [r3, #4]
 800deee:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800def2:	60fb      	str	r3, [r7, #12]

  /* Set W[6:0] bits according to WindowValue value */
  tmpreg |= WindowValue & (uint32_t) BIT_MASK;
 800def4:	79fb      	ldrb	r3, [r7, #7]
 800def6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800defa:	68fb      	ldr	r3, [r7, #12]
 800defc:	4313      	orrs	r3, r2
 800defe:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  WWDG->CFR = tmpreg;
 800df00:	4a04      	ldr	r2, [pc, #16]	; (800df14 <WWDG_SetWindowValue+0x38>)
 800df02:	68fb      	ldr	r3, [r7, #12]
 800df04:	6053      	str	r3, [r2, #4]
}
 800df06:	bf00      	nop
 800df08:	3714      	adds	r7, #20
 800df0a:	46bd      	mov	sp, r7
 800df0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df10:	4770      	bx	lr
 800df12:	bf00      	nop
 800df14:	40002c00 	.word	0x40002c00

0800df18 <WWDG_EnableIT>:
  * @note   Once enabled this interrupt cannot be disabled except by a system reset.
  * @param  None
  * @retval None
  */
void WWDG_EnableIT(void)
{
 800df18:	b480      	push	{r7}
 800df1a:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) CFR_EWI_BB = (uint32_t)ENABLE;
 800df1c:	4b03      	ldr	r3, [pc, #12]	; (800df2c <WWDG_EnableIT+0x14>)
 800df1e:	2201      	movs	r2, #1
 800df20:	601a      	str	r2, [r3, #0]
}
 800df22:	bf00      	nop
 800df24:	46bd      	mov	sp, r7
 800df26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df2a:	4770      	bx	lr
 800df2c:	420580a4 	.word	0x420580a4

0800df30 <WWDG_SetCounter>:
  *   This parameter must be a number between 0x40 and 0x7F (to prevent generating
  *   an immediate reset) 
  * @retval None
  */
void WWDG_SetCounter(uint8_t Counter)
{
 800df30:	b480      	push	{r7}
 800df32:	b083      	sub	sp, #12
 800df34:	af00      	add	r7, sp, #0
 800df36:	4603      	mov	r3, r0
 800df38:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_WWDG_COUNTER(Counter));
  /* Write to T[6:0] bits to configure the counter value, no need to do
     a read-modify-write; writing a 0 to WDGA bit does nothing */
  WWDG->CR = Counter & BIT_MASK;
 800df3a:	79fb      	ldrb	r3, [r7, #7]
 800df3c:	4a04      	ldr	r2, [pc, #16]	; (800df50 <WWDG_SetCounter+0x20>)
 800df3e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800df42:	6013      	str	r3, [r2, #0]
}
 800df44:	bf00      	nop
 800df46:	370c      	adds	r7, #12
 800df48:	46bd      	mov	sp, r7
 800df4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df4e:	4770      	bx	lr
 800df50:	40002c00 	.word	0x40002c00

0800df54 <WWDG_Enable>:
  *   This parameter must be a number between 0x40 and 0x7F (to prevent generating
  *   an immediate reset)
  * @retval None
  */
void WWDG_Enable(uint8_t Counter)
{
 800df54:	b480      	push	{r7}
 800df56:	b083      	sub	sp, #12
 800df58:	af00      	add	r7, sp, #0
 800df5a:	4603      	mov	r3, r0
 800df5c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_WWDG_COUNTER(Counter));
  WWDG->CR = WWDG_CR_WDGA | Counter;
 800df5e:	79fb      	ldrb	r3, [r7, #7]
 800df60:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800df64:	b2da      	uxtb	r2, r3
 800df66:	4b04      	ldr	r3, [pc, #16]	; (800df78 <WWDG_Enable+0x24>)
 800df68:	601a      	str	r2, [r3, #0]
}
 800df6a:	bf00      	nop
 800df6c:	370c      	adds	r7, #12
 800df6e:	46bd      	mov	sp, r7
 800df70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df74:	4770      	bx	lr
 800df76:	bf00      	nop
 800df78:	40002c00 	.word	0x40002c00

0800df7c <WWDG_GetFlagStatus>:
  * @brief  Checks whether the Early Wakeup interrupt flag is set or not.
  * @param  None
  * @retval The new state of the Early Wakeup interrupt flag (SET or RESET)
  */
FlagStatus WWDG_GetFlagStatus(void)
{
 800df7c:	b480      	push	{r7}
 800df7e:	b083      	sub	sp, #12
 800df80:	af00      	add	r7, sp, #0
  FlagStatus bitstatus = RESET;
 800df82:	2300      	movs	r3, #0
 800df84:	71fb      	strb	r3, [r7, #7]
    
  if ((WWDG->SR) != (uint32_t)RESET)
 800df86:	4b08      	ldr	r3, [pc, #32]	; (800dfa8 <WWDG_GetFlagStatus+0x2c>)
 800df88:	689b      	ldr	r3, [r3, #8]
 800df8a:	2b00      	cmp	r3, #0
 800df8c:	d002      	beq.n	800df94 <WWDG_GetFlagStatus+0x18>
  {
    bitstatus = SET;
 800df8e:	2301      	movs	r3, #1
 800df90:	71fb      	strb	r3, [r7, #7]
 800df92:	e001      	b.n	800df98 <WWDG_GetFlagStatus+0x1c>
  }
  else
  {
    bitstatus = RESET;
 800df94:	2300      	movs	r3, #0
 800df96:	71fb      	strb	r3, [r7, #7]
  }
  return bitstatus;
 800df98:	79fb      	ldrb	r3, [r7, #7]
}
 800df9a:	4618      	mov	r0, r3
 800df9c:	370c      	adds	r7, #12
 800df9e:	46bd      	mov	sp, r7
 800dfa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfa4:	4770      	bx	lr
 800dfa6:	bf00      	nop
 800dfa8:	40002c00 	.word	0x40002c00

0800dfac <WWDG_ClearFlag>:
  * @brief  Clears Early Wakeup interrupt flag.
  * @param  None
  * @retval None
  */
void WWDG_ClearFlag(void)
{
 800dfac:	b480      	push	{r7}
 800dfae:	af00      	add	r7, sp, #0
  WWDG->SR = (uint32_t)RESET;
 800dfb0:	4b03      	ldr	r3, [pc, #12]	; (800dfc0 <WWDG_ClearFlag+0x14>)
 800dfb2:	2200      	movs	r2, #0
 800dfb4:	609a      	str	r2, [r3, #8]
}
 800dfb6:	bf00      	nop
 800dfb8:	46bd      	mov	sp, r7
 800dfba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfbe:	4770      	bx	lr
 800dfc0:	40002c00 	.word	0x40002c00

0800dfc4 <STM_EVAL_LEDInit>:
  *     @arg LED3
  *     @arg LED4
  * @retval None
  */
void STM_EVAL_LEDInit(Led_TypeDef Led)
{
 800dfc4:	b580      	push	{r7, lr}
 800dfc6:	b084      	sub	sp, #16
 800dfc8:	af00      	add	r7, sp, #0
 800dfca:	4603      	mov	r3, r0
 800dfcc:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStructure;
  
  /* Enable the GPIO_LED Clock */
  RCC_AHB1PeriphClockCmd(GPIO_CLK[Led], ENABLE);
 800dfce:	79fb      	ldrb	r3, [r7, #7]
 800dfd0:	4a10      	ldr	r2, [pc, #64]	; (800e014 <STM_EVAL_LEDInit+0x50>)
 800dfd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dfd6:	2101      	movs	r1, #1
 800dfd8:	4618      	mov	r0, r3
 800dfda:	f7fa fcbd 	bl	8008958 <RCC_AHB1PeriphClockCmd>

  /* Configure the GPIO_LED pin */
  GPIO_InitStructure.GPIO_Pin = GPIO_PIN[Led];
 800dfde:	79fb      	ldrb	r3, [r7, #7]
 800dfe0:	4a0d      	ldr	r2, [pc, #52]	; (800e018 <STM_EVAL_LEDInit+0x54>)
 800dfe2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800dfe6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 800dfe8:	2301      	movs	r3, #1
 800dfea:	733b      	strb	r3, [r7, #12]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 800dfec:	2300      	movs	r3, #0
 800dfee:	73bb      	strb	r3, [r7, #14]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 800dff0:	2301      	movs	r3, #1
 800dff2:	73fb      	strb	r3, [r7, #15]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 800dff4:	2302      	movs	r3, #2
 800dff6:	737b      	strb	r3, [r7, #13]
  GPIO_Init(GPIO_PORT[Led], &GPIO_InitStructure);
 800dff8:	79fb      	ldrb	r3, [r7, #7]
 800dffa:	4a08      	ldr	r2, [pc, #32]	; (800e01c <STM_EVAL_LEDInit+0x58>)
 800dffc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e000:	f107 0208 	add.w	r2, r7, #8
 800e004:	4611      	mov	r1, r2
 800e006:	4618      	mov	r0, r3
 800e008:	f7f8 fad6 	bl	80065b8 <GPIO_Init>
}
 800e00c:	bf00      	nop
 800e00e:	3710      	adds	r7, #16
 800e010:	46bd      	mov	sp, r7
 800e012:	bd80      	pop	{r7, pc}
 800e014:	0801feac 	.word	0x0801feac
 800e018:	0801fea8 	.word	0x0801fea8
 800e01c:	20000094 	.word	0x20000094

0800e020 <STM_EVAL_LEDOn>:
  *     @arg LED3
  *     @arg LED4 
  * @retval None
  */
void STM_EVAL_LEDOn(Led_TypeDef Led)
{
 800e020:	b480      	push	{r7}
 800e022:	b083      	sub	sp, #12
 800e024:	af00      	add	r7, sp, #0
 800e026:	4603      	mov	r3, r0
 800e028:	71fb      	strb	r3, [r7, #7]
  GPIO_PORT[Led]->BSRRL = GPIO_PIN[Led];
 800e02a:	79fa      	ldrb	r2, [r7, #7]
 800e02c:	79fb      	ldrb	r3, [r7, #7]
 800e02e:	4906      	ldr	r1, [pc, #24]	; (800e048 <STM_EVAL_LEDOn+0x28>)
 800e030:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800e034:	4905      	ldr	r1, [pc, #20]	; (800e04c <STM_EVAL_LEDOn+0x2c>)
 800e036:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 800e03a:	831a      	strh	r2, [r3, #24]
}
 800e03c:	bf00      	nop
 800e03e:	370c      	adds	r7, #12
 800e040:	46bd      	mov	sp, r7
 800e042:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e046:	4770      	bx	lr
 800e048:	20000094 	.word	0x20000094
 800e04c:	0801fea8 	.word	0x0801fea8

0800e050 <STM_EVAL_LEDOff>:
  *     @arg LED3
  *     @arg LED4
  * @retval None
  */
void STM_EVAL_LEDOff(Led_TypeDef Led)
{
 800e050:	b480      	push	{r7}
 800e052:	b083      	sub	sp, #12
 800e054:	af00      	add	r7, sp, #0
 800e056:	4603      	mov	r3, r0
 800e058:	71fb      	strb	r3, [r7, #7]
  GPIO_PORT[Led]->BSRRH = GPIO_PIN[Led];  
 800e05a:	79fa      	ldrb	r2, [r7, #7]
 800e05c:	79fb      	ldrb	r3, [r7, #7]
 800e05e:	4906      	ldr	r1, [pc, #24]	; (800e078 <STM_EVAL_LEDOff+0x28>)
 800e060:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800e064:	4905      	ldr	r1, [pc, #20]	; (800e07c <STM_EVAL_LEDOff+0x2c>)
 800e066:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 800e06a:	835a      	strh	r2, [r3, #26]
}
 800e06c:	bf00      	nop
 800e06e:	370c      	adds	r7, #12
 800e070:	46bd      	mov	sp, r7
 800e072:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e076:	4770      	bx	lr
 800e078:	20000094 	.word	0x20000094
 800e07c:	0801fea8 	.word	0x0801fea8

0800e080 <STM_EVAL_LEDToggle>:
  *     @arg LED3
  *     @arg LED4  
  * @retval None
  */
void STM_EVAL_LEDToggle(Led_TypeDef Led)
{
 800e080:	b480      	push	{r7}
 800e082:	b083      	sub	sp, #12
 800e084:	af00      	add	r7, sp, #0
 800e086:	4603      	mov	r3, r0
 800e088:	71fb      	strb	r3, [r7, #7]
  GPIO_PORT[Led]->ODR ^= GPIO_PIN[Led];
 800e08a:	79fb      	ldrb	r3, [r7, #7]
 800e08c:	4a0a      	ldr	r2, [pc, #40]	; (800e0b8 <STM_EVAL_LEDToggle+0x38>)
 800e08e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e092:	695a      	ldr	r2, [r3, #20]
 800e094:	79fb      	ldrb	r3, [r7, #7]
 800e096:	4909      	ldr	r1, [pc, #36]	; (800e0bc <STM_EVAL_LEDToggle+0x3c>)
 800e098:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800e09c:	4618      	mov	r0, r3
 800e09e:	79fb      	ldrb	r3, [r7, #7]
 800e0a0:	4905      	ldr	r1, [pc, #20]	; (800e0b8 <STM_EVAL_LEDToggle+0x38>)
 800e0a2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800e0a6:	4042      	eors	r2, r0
 800e0a8:	615a      	str	r2, [r3, #20]
}
 800e0aa:	bf00      	nop
 800e0ac:	370c      	adds	r7, #12
 800e0ae:	46bd      	mov	sp, r7
 800e0b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0b4:	4770      	bx	lr
 800e0b6:	bf00      	nop
 800e0b8:	20000094 	.word	0x20000094
 800e0bc:	0801fea8 	.word	0x0801fea8

0800e0c0 <STM_EVAL_PBInit>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  * @retval None
  */
void STM_EVAL_PBInit(Button_TypeDef Button, ButtonMode_TypeDef Button_Mode)
{
 800e0c0:	b580      	push	{r7, lr}
 800e0c2:	b088      	sub	sp, #32
 800e0c4:	af00      	add	r7, sp, #0
 800e0c6:	4603      	mov	r3, r0
 800e0c8:	460a      	mov	r2, r1
 800e0ca:	71fb      	strb	r3, [r7, #7]
 800e0cc:	4613      	mov	r3, r2
 800e0ce:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef GPIO_InitStructure;
  EXTI_InitTypeDef EXTI_InitStructure;
  NVIC_InitTypeDef NVIC_InitStructure;

  /* Enable the BUTTON Clock */
  RCC_AHB1PeriphClockCmd(BUTTON_CLK[Button], ENABLE);
 800e0d0:	2301      	movs	r3, #1
 800e0d2:	2101      	movs	r1, #1
 800e0d4:	4618      	mov	r0, r3
 800e0d6:	f7fa fc3f 	bl	8008958 <RCC_AHB1PeriphClockCmd>
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 800e0da:	2101      	movs	r1, #1
 800e0dc:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800e0e0:	f7fa fcba 	bl	8008a58 <RCC_APB2PeriphClockCmd>

  /* Configure Button pin as input */
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 800e0e4:	2300      	movs	r3, #0
 800e0e6:	773b      	strb	r3, [r7, #28]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_DOWN;
 800e0e8:	2302      	movs	r3, #2
 800e0ea:	77fb      	strb	r3, [r7, #31]
  GPIO_InitStructure.GPIO_Pin = BUTTON_PIN[Button];
 800e0ec:	2301      	movs	r3, #1
 800e0ee:	61bb      	str	r3, [r7, #24]
  GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStructure);
 800e0f0:	79fb      	ldrb	r3, [r7, #7]
 800e0f2:	4a18      	ldr	r2, [pc, #96]	; (800e154 <STM_EVAL_PBInit+0x94>)
 800e0f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e0f8:	f107 0218 	add.w	r2, r7, #24
 800e0fc:	4611      	mov	r1, r2
 800e0fe:	4618      	mov	r0, r3
 800e100:	f7f8 fa5a 	bl	80065b8 <GPIO_Init>

  if (Button_Mode == BUTTON_MODE_EXTI)
 800e104:	79bb      	ldrb	r3, [r7, #6]
 800e106:	2b01      	cmp	r3, #1
 800e108:	d11f      	bne.n	800e14a <STM_EVAL_PBInit+0x8a>
  {
    /* Connect Button EXTI Line to Button GPIO Pin */
    SYSCFG_EXTILineConfig(BUTTON_PORT_SOURCE[Button], BUTTON_PIN_SOURCE[Button]);
 800e10a:	2300      	movs	r3, #0
 800e10c:	2200      	movs	r2, #0
 800e10e:	4611      	mov	r1, r2
 800e110:	4618      	mov	r0, r3
 800e112:	f7fd fb7b 	bl	800b80c <SYSCFG_EXTILineConfig>

    /* Configure Button EXTI line */
    EXTI_InitStructure.EXTI_Line = BUTTON_EXTI_LINE[Button];
 800e116:	2301      	movs	r3, #1
 800e118:	613b      	str	r3, [r7, #16]
    EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
 800e11a:	2300      	movs	r3, #0
 800e11c:	753b      	strb	r3, [r7, #20]
    EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;  
 800e11e:	2308      	movs	r3, #8
 800e120:	757b      	strb	r3, [r7, #21]
    EXTI_InitStructure.EXTI_LineCmd = ENABLE;
 800e122:	2301      	movs	r3, #1
 800e124:	75bb      	strb	r3, [r7, #22]
    EXTI_Init(&EXTI_InitStructure);
 800e126:	f107 0310 	add.w	r3, r7, #16
 800e12a:	4618      	mov	r0, r3
 800e12c:	f7f6 fc44 	bl	80049b8 <EXTI_Init>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    NVIC_InitStructure.NVIC_IRQChannel = BUTTON_IRQn[Button];
 800e130:	2306      	movs	r3, #6
 800e132:	733b      	strb	r3, [r7, #12]
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x0F;
 800e134:	230f      	movs	r3, #15
 800e136:	737b      	strb	r3, [r7, #13]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x0F;
 800e138:	230f      	movs	r3, #15
 800e13a:	73bb      	strb	r3, [r7, #14]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 800e13c:	2301      	movs	r3, #1
 800e13e:	73fb      	strb	r3, [r7, #15]

    NVIC_Init(&NVIC_InitStructure); 
 800e140:	f107 030c 	add.w	r3, r7, #12
 800e144:	4618      	mov	r0, r3
 800e146:	f7f3 fad1 	bl	80016ec <NVIC_Init>
  }
}
 800e14a:	bf00      	nop
 800e14c:	3720      	adds	r7, #32
 800e14e:	46bd      	mov	sp, r7
 800e150:	bd80      	pop	{r7, pc}
 800e152:	bf00      	nop
 800e154:	2000009c 	.word	0x2000009c

0800e158 <STM_EVAL_PBGetState>:
  * @param  Button: Specifies the Button to be checked.
  *   This parameter should be: BUTTON_USER  
  * @retval The Button GPIO pin value.
  */
uint32_t STM_EVAL_PBGetState(Button_TypeDef Button)
{
 800e158:	b580      	push	{r7, lr}
 800e15a:	b082      	sub	sp, #8
 800e15c:	af00      	add	r7, sp, #0
 800e15e:	4603      	mov	r3, r0
 800e160:	71fb      	strb	r3, [r7, #7]
  return GPIO_ReadInputDataBit(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 800e162:	79fb      	ldrb	r3, [r7, #7]
 800e164:	4a06      	ldr	r2, [pc, #24]	; (800e180 <STM_EVAL_PBGetState+0x28>)
 800e166:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e16a:	2201      	movs	r2, #1
 800e16c:	4611      	mov	r1, r2
 800e16e:	4618      	mov	r0, r3
 800e170:	f7f8 faec 	bl	800674c <GPIO_ReadInputDataBit>
 800e174:	4603      	mov	r3, r0
}
 800e176:	4618      	mov	r0, r3
 800e178:	3708      	adds	r7, #8
 800e17a:	46bd      	mov	sp, r7
 800e17c:	bd80      	pop	{r7, pc}
 800e17e:	bf00      	nop
 800e180:	2000009c 	.word	0x2000009c

0800e184 <sEE_LowLevel_DeInit>:
  * @brief  DeInitializes peripherals used by the I2C EEPROM driver.
  * @param  None
  * @retval None
  */
void sEE_LowLevel_DeInit(void)
{
 800e184:	b580      	push	{r7, lr}
 800e186:	b082      	sub	sp, #8
 800e188:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStructure; 
   
  /* sEE_I2C Peripheral Disable */
  I2C_Cmd(sEE_I2C, DISABLE);
 800e18a:	2100      	movs	r1, #0
 800e18c:	4825      	ldr	r0, [pc, #148]	; (800e224 <sEE_LowLevel_DeInit+0xa0>)
 800e18e:	f7f8 fce6 	bl	8006b5e <I2C_Cmd>
 
  /* sEE_I2C DeInit */
  I2C_DeInit(sEE_I2C);
 800e192:	4824      	ldr	r0, [pc, #144]	; (800e224 <sEE_LowLevel_DeInit+0xa0>)
 800e194:	f7f8 fbc8 	bl	8006928 <I2C_DeInit>

  /*!< sEE_I2C Periph clock disable */
  RCC_APB1PeriphClockCmd(sEE_I2C_CLK, DISABLE);
 800e198:	2100      	movs	r1, #0
 800e19a:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 800e19e:	f7fa fc3b 	bl	8008a18 <RCC_APB1PeriphClockCmd>
    
  /*!< GPIO configuration */  
  /*!< Configure sEE_I2C pins: SCL */
  GPIO_InitStructure.GPIO_Pin = sEE_I2C_SCL_PIN;
 800e1a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e1a6:	603b      	str	r3, [r7, #0]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 800e1a8:	2300      	movs	r3, #0
 800e1aa:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 800e1ac:	2300      	movs	r3, #0
 800e1ae:	71fb      	strb	r3, [r7, #7]
  GPIO_Init(sEE_I2C_SCL_GPIO_PORT, &GPIO_InitStructure);
 800e1b0:	463b      	mov	r3, r7
 800e1b2:	4619      	mov	r1, r3
 800e1b4:	481c      	ldr	r0, [pc, #112]	; (800e228 <sEE_LowLevel_DeInit+0xa4>)
 800e1b6:	f7f8 f9ff 	bl	80065b8 <GPIO_Init>

  /*!< Configure sEE_I2C pins: SDA */
  GPIO_InitStructure.GPIO_Pin = sEE_I2C_SDA_PIN;
 800e1ba:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e1be:	603b      	str	r3, [r7, #0]
  GPIO_Init(sEE_I2C_SDA_GPIO_PORT, &GPIO_InitStructure);
 800e1c0:	463b      	mov	r3, r7
 800e1c2:	4619      	mov	r1, r3
 800e1c4:	4819      	ldr	r0, [pc, #100]	; (800e22c <sEE_LowLevel_DeInit+0xa8>)
 800e1c6:	f7f8 f9f7 	bl	80065b8 <GPIO_Init>

  /* Configure and enable I2C DMA TX Stream interrupt */
  NVIC_InitStructure.NVIC_IRQChannel = sEE_I2C_DMA_TX_IRQn;
 800e1ca:	4b19      	ldr	r3, [pc, #100]	; (800e230 <sEE_LowLevel_DeInit+0xac>)
 800e1cc:	220f      	movs	r2, #15
 800e1ce:	701a      	strb	r2, [r3, #0]
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = sEE_I2C_DMA_PREPRIO;
 800e1d0:	4b17      	ldr	r3, [pc, #92]	; (800e230 <sEE_LowLevel_DeInit+0xac>)
 800e1d2:	2200      	movs	r2, #0
 800e1d4:	705a      	strb	r2, [r3, #1]
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = sEE_I2C_DMA_SUBPRIO;
 800e1d6:	4b16      	ldr	r3, [pc, #88]	; (800e230 <sEE_LowLevel_DeInit+0xac>)
 800e1d8:	2200      	movs	r2, #0
 800e1da:	709a      	strb	r2, [r3, #2]
  NVIC_InitStructure.NVIC_IRQChannelCmd = DISABLE;
 800e1dc:	4b14      	ldr	r3, [pc, #80]	; (800e230 <sEE_LowLevel_DeInit+0xac>)
 800e1de:	2200      	movs	r2, #0
 800e1e0:	70da      	strb	r2, [r3, #3]
  NVIC_Init(&NVIC_InitStructure);
 800e1e2:	4813      	ldr	r0, [pc, #76]	; (800e230 <sEE_LowLevel_DeInit+0xac>)
 800e1e4:	f7f3 fa82 	bl	80016ec <NVIC_Init>

  /* Configure and enable I2C DMA RX Stream interrupt */
  NVIC_InitStructure.NVIC_IRQChannel = sEE_I2C_DMA_RX_IRQn;
 800e1e8:	4b11      	ldr	r3, [pc, #68]	; (800e230 <sEE_LowLevel_DeInit+0xac>)
 800e1ea:	220d      	movs	r2, #13
 800e1ec:	701a      	strb	r2, [r3, #0]
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = sEE_I2C_DMA_PREPRIO;
 800e1ee:	4b10      	ldr	r3, [pc, #64]	; (800e230 <sEE_LowLevel_DeInit+0xac>)
 800e1f0:	2200      	movs	r2, #0
 800e1f2:	705a      	strb	r2, [r3, #1]
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = sEE_I2C_DMA_SUBPRIO;
 800e1f4:	4b0e      	ldr	r3, [pc, #56]	; (800e230 <sEE_LowLevel_DeInit+0xac>)
 800e1f6:	2200      	movs	r2, #0
 800e1f8:	709a      	strb	r2, [r3, #2]
  NVIC_Init(&NVIC_InitStructure);   
 800e1fa:	480d      	ldr	r0, [pc, #52]	; (800e230 <sEE_LowLevel_DeInit+0xac>)
 800e1fc:	f7f3 fa76 	bl	80016ec <NVIC_Init>
  
  /* Disable and Deinitialize the DMA Streams */
  DMA_Cmd(sEE_I2C_DMA_STREAM_TX, DISABLE);
 800e200:	2100      	movs	r1, #0
 800e202:	480c      	ldr	r0, [pc, #48]	; (800e234 <sEE_LowLevel_DeInit+0xb0>)
 800e204:	f7f5 fe3b 	bl	8003e7e <DMA_Cmd>
  DMA_Cmd(sEE_I2C_DMA_STREAM_RX, DISABLE);
 800e208:	2100      	movs	r1, #0
 800e20a:	480b      	ldr	r0, [pc, #44]	; (800e238 <sEE_LowLevel_DeInit+0xb4>)
 800e20c:	f7f5 fe37 	bl	8003e7e <DMA_Cmd>
  DMA_DeInit(sEE_I2C_DMA_STREAM_TX);
 800e210:	4808      	ldr	r0, [pc, #32]	; (800e234 <sEE_LowLevel_DeInit+0xb0>)
 800e212:	f7f5 fcd1 	bl	8003bb8 <DMA_DeInit>
  DMA_DeInit(sEE_I2C_DMA_STREAM_RX);
 800e216:	4808      	ldr	r0, [pc, #32]	; (800e238 <sEE_LowLevel_DeInit+0xb4>)
 800e218:	f7f5 fcce 	bl	8003bb8 <DMA_DeInit>
}
 800e21c:	bf00      	nop
 800e21e:	3708      	adds	r7, #8
 800e220:	46bd      	mov	sp, r7
 800e222:	bd80      	pop	{r7, pc}
 800e224:	40005c00 	.word	0x40005c00
 800e228:	40020000 	.word	0x40020000
 800e22c:	40020800 	.word	0x40020800
 800e230:	20002e04 	.word	0x20002e04
 800e234:	40026070 	.word	0x40026070
 800e238:	40026040 	.word	0x40026040

0800e23c <sEE_LowLevel_Init>:
  * @brief  Initializes peripherals used by the I2C EEPROM driver.
  * @param  None
  * @retval None
  */
void sEE_LowLevel_Init(void)
{
 800e23c:	b580      	push	{r7, lr}
 800e23e:	b082      	sub	sp, #8
 800e240:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStructure; 
   
  /*!< sEE_I2C Periph clock enable */
  RCC_APB1PeriphClockCmd(sEE_I2C_CLK, ENABLE);
 800e242:	2101      	movs	r1, #1
 800e244:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 800e248:	f7fa fbe6 	bl	8008a18 <RCC_APB1PeriphClockCmd>
  
  /*!< sEE_I2C_SCL_GPIO_CLK and sEE_I2C_SDA_GPIO_CLK Periph clock enable */
  RCC_AHB1PeriphClockCmd(sEE_I2C_SCL_GPIO_CLK | sEE_I2C_SDA_GPIO_CLK, ENABLE);
 800e24c:	2101      	movs	r1, #1
 800e24e:	2005      	movs	r0, #5
 800e250:	f7fa fb82 	bl	8008958 <RCC_AHB1PeriphClockCmd>
  
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 800e254:	2101      	movs	r1, #1
 800e256:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800e25a:	f7fa fbfd 	bl	8008a58 <RCC_APB2PeriphClockCmd>
  
  /* Reset sEE_I2C IP */
  RCC_APB1PeriphResetCmd(sEE_I2C_CLK, ENABLE);  
 800e25e:	2101      	movs	r1, #1
 800e260:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 800e264:	f7fa fc78 	bl	8008b58 <RCC_APB1PeriphResetCmd>
  /* Release reset signal of sEE_I2C IP */
  RCC_APB1PeriphResetCmd(sEE_I2C_CLK, DISABLE);
 800e268:	2100      	movs	r1, #0
 800e26a:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 800e26e:	f7fa fc73 	bl	8008b58 <RCC_APB1PeriphResetCmd>
    
  /*!< GPIO configuration */  
  /*!< Configure sEE_I2C pins: SCL */   
  GPIO_InitStructure.GPIO_Pin = sEE_I2C_SCL_PIN;
 800e272:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e276:	603b      	str	r3, [r7, #0]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 800e278:	2302      	movs	r3, #2
 800e27a:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 800e27c:	2302      	movs	r3, #2
 800e27e:	717b      	strb	r3, [r7, #5]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
 800e280:	2301      	movs	r3, #1
 800e282:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
 800e284:	2300      	movs	r3, #0
 800e286:	71fb      	strb	r3, [r7, #7]
  GPIO_Init(sEE_I2C_SCL_GPIO_PORT, &GPIO_InitStructure);
 800e288:	463b      	mov	r3, r7
 800e28a:	4619      	mov	r1, r3
 800e28c:	4848      	ldr	r0, [pc, #288]	; (800e3b0 <sEE_LowLevel_Init+0x174>)
 800e28e:	f7f8 f993 	bl	80065b8 <GPIO_Init>

  /*!< Configure sEE_I2C pins: SDA */
  GPIO_InitStructure.GPIO_Pin = sEE_I2C_SDA_PIN;
 800e292:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e296:	603b      	str	r3, [r7, #0]
  GPIO_Init(sEE_I2C_SDA_GPIO_PORT, &GPIO_InitStructure);
 800e298:	463b      	mov	r3, r7
 800e29a:	4619      	mov	r1, r3
 800e29c:	4845      	ldr	r0, [pc, #276]	; (800e3b4 <sEE_LowLevel_Init+0x178>)
 800e29e:	f7f8 f98b 	bl	80065b8 <GPIO_Init>

  /* Connect PXx to I2C_SCL*/
  GPIO_PinAFConfig(sEE_I2C_SCL_GPIO_PORT, sEE_I2C_SCL_SOURCE, sEE_I2C_SCL_AF);
 800e2a2:	2204      	movs	r2, #4
 800e2a4:	2108      	movs	r1, #8
 800e2a6:	4842      	ldr	r0, [pc, #264]	; (800e3b0 <sEE_LowLevel_Init+0x174>)
 800e2a8:	f7f8 faf5 	bl	8006896 <GPIO_PinAFConfig>

  /* Connect PXx to I2C_SDA*/
  GPIO_PinAFConfig(sEE_I2C_SDA_GPIO_PORT, sEE_I2C_SDA_SOURCE, sEE_I2C_SDA_AF);  
 800e2ac:	2204      	movs	r2, #4
 800e2ae:	2109      	movs	r1, #9
 800e2b0:	4840      	ldr	r0, [pc, #256]	; (800e3b4 <sEE_LowLevel_Init+0x178>)
 800e2b2:	f7f8 faf0 	bl	8006896 <GPIO_PinAFConfig>
  
  /* Configure and enable I2C DMA TX Channel interrupt */
  NVIC_InitStructure.NVIC_IRQChannel = sEE_I2C_DMA_TX_IRQn;
 800e2b6:	4b40      	ldr	r3, [pc, #256]	; (800e3b8 <sEE_LowLevel_Init+0x17c>)
 800e2b8:	220f      	movs	r2, #15
 800e2ba:	701a      	strb	r2, [r3, #0]
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = sEE_I2C_DMA_PREPRIO;
 800e2bc:	4b3e      	ldr	r3, [pc, #248]	; (800e3b8 <sEE_LowLevel_Init+0x17c>)
 800e2be:	2200      	movs	r2, #0
 800e2c0:	705a      	strb	r2, [r3, #1]
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = sEE_I2C_DMA_SUBPRIO;
 800e2c2:	4b3d      	ldr	r3, [pc, #244]	; (800e3b8 <sEE_LowLevel_Init+0x17c>)
 800e2c4:	2200      	movs	r2, #0
 800e2c6:	709a      	strb	r2, [r3, #2]
  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 800e2c8:	4b3b      	ldr	r3, [pc, #236]	; (800e3b8 <sEE_LowLevel_Init+0x17c>)
 800e2ca:	2201      	movs	r2, #1
 800e2cc:	70da      	strb	r2, [r3, #3]
  NVIC_Init(&NVIC_InitStructure);
 800e2ce:	483a      	ldr	r0, [pc, #232]	; (800e3b8 <sEE_LowLevel_Init+0x17c>)
 800e2d0:	f7f3 fa0c 	bl	80016ec <NVIC_Init>

  /* Configure and enable I2C DMA RX Channel interrupt */
  NVIC_InitStructure.NVIC_IRQChannel = sEE_I2C_DMA_RX_IRQn;
 800e2d4:	4b38      	ldr	r3, [pc, #224]	; (800e3b8 <sEE_LowLevel_Init+0x17c>)
 800e2d6:	220d      	movs	r2, #13
 800e2d8:	701a      	strb	r2, [r3, #0]
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = sEE_I2C_DMA_PREPRIO;
 800e2da:	4b37      	ldr	r3, [pc, #220]	; (800e3b8 <sEE_LowLevel_Init+0x17c>)
 800e2dc:	2200      	movs	r2, #0
 800e2de:	705a      	strb	r2, [r3, #1]
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = sEE_I2C_DMA_SUBPRIO;
 800e2e0:	4b35      	ldr	r3, [pc, #212]	; (800e3b8 <sEE_LowLevel_Init+0x17c>)
 800e2e2:	2200      	movs	r2, #0
 800e2e4:	709a      	strb	r2, [r3, #2]
  NVIC_Init(&NVIC_InitStructure);  
 800e2e6:	4834      	ldr	r0, [pc, #208]	; (800e3b8 <sEE_LowLevel_Init+0x17c>)
 800e2e8:	f7f3 fa00 	bl	80016ec <NVIC_Init>
  
  /*!< I2C DMA TX and RX channels configuration */
  /* Enable the DMA clock */
  RCC_AHB1PeriphClockCmd(sEE_I2C_DMA_CLK, ENABLE);
 800e2ec:	2101      	movs	r1, #1
 800e2ee:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800e2f2:	f7fa fb31 	bl	8008958 <RCC_AHB1PeriphClockCmd>
  
  /* Clear any pending flag on Rx Stream  */
  DMA_ClearFlag(sEE_I2C_DMA_STREAM_TX, sEE_TX_DMA_FLAG_FEIF | sEE_TX_DMA_FLAG_DMEIF | sEE_TX_DMA_FLAG_TEIF | \
 800e2f6:	4931      	ldr	r1, [pc, #196]	; (800e3bc <sEE_LowLevel_Init+0x180>)
 800e2f8:	4831      	ldr	r0, [pc, #196]	; (800e3c0 <sEE_LowLevel_Init+0x184>)
 800e2fa:	f7f5 fefd 	bl	80040f8 <DMA_ClearFlag>
                                       sEE_TX_DMA_FLAG_HTIF | sEE_TX_DMA_FLAG_TCIF);
  /* Disable the EE I2C Tx DMA stream */
  DMA_Cmd(sEE_I2C_DMA_STREAM_TX, DISABLE);
 800e2fe:	2100      	movs	r1, #0
 800e300:	482f      	ldr	r0, [pc, #188]	; (800e3c0 <sEE_LowLevel_Init+0x184>)
 800e302:	f7f5 fdbc 	bl	8003e7e <DMA_Cmd>
  /* Configure the DMA stream for the EE I2C peripheral TX direction */
  DMA_DeInit(sEE_I2C_DMA_STREAM_TX);
 800e306:	482e      	ldr	r0, [pc, #184]	; (800e3c0 <sEE_LowLevel_Init+0x184>)
 800e308:	f7f5 fc56 	bl	8003bb8 <DMA_DeInit>
  sEEDMA_InitStructure.DMA_Channel = sEE_I2C_DMA_CHANNEL;
 800e30c:	4b2d      	ldr	r3, [pc, #180]	; (800e3c4 <sEE_LowLevel_Init+0x188>)
 800e30e:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 800e312:	601a      	str	r2, [r3, #0]
  sEEDMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)sEE_I2C_DR_Address;
 800e314:	4b2b      	ldr	r3, [pc, #172]	; (800e3c4 <sEE_LowLevel_Init+0x188>)
 800e316:	4a2c      	ldr	r2, [pc, #176]	; (800e3c8 <sEE_LowLevel_Init+0x18c>)
 800e318:	605a      	str	r2, [r3, #4]
  sEEDMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)0;    /* This parameter will be configured durig communication */;
 800e31a:	4b2a      	ldr	r3, [pc, #168]	; (800e3c4 <sEE_LowLevel_Init+0x188>)
 800e31c:	2200      	movs	r2, #0
 800e31e:	609a      	str	r2, [r3, #8]
  sEEDMA_InitStructure.DMA_DIR = DMA_DIR_MemoryToPeripheral; /* This parameter will be configured durig communication */
 800e320:	4b28      	ldr	r3, [pc, #160]	; (800e3c4 <sEE_LowLevel_Init+0x188>)
 800e322:	2240      	movs	r2, #64	; 0x40
 800e324:	60da      	str	r2, [r3, #12]
  sEEDMA_InitStructure.DMA_BufferSize = 0xFFFF;              /* This parameter will be configured durig communication */
 800e326:	4b27      	ldr	r3, [pc, #156]	; (800e3c4 <sEE_LowLevel_Init+0x188>)
 800e328:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e32c:	611a      	str	r2, [r3, #16]
  sEEDMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 800e32e:	4b25      	ldr	r3, [pc, #148]	; (800e3c4 <sEE_LowLevel_Init+0x188>)
 800e330:	2200      	movs	r2, #0
 800e332:	615a      	str	r2, [r3, #20]
  sEEDMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
 800e334:	4b23      	ldr	r3, [pc, #140]	; (800e3c4 <sEE_LowLevel_Init+0x188>)
 800e336:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800e33a:	619a      	str	r2, [r3, #24]
  sEEDMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
 800e33c:	4b21      	ldr	r3, [pc, #132]	; (800e3c4 <sEE_LowLevel_Init+0x188>)
 800e33e:	2200      	movs	r2, #0
 800e340:	61da      	str	r2, [r3, #28]
  sEEDMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
 800e342:	4b20      	ldr	r3, [pc, #128]	; (800e3c4 <sEE_LowLevel_Init+0x188>)
 800e344:	2200      	movs	r2, #0
 800e346:	621a      	str	r2, [r3, #32]
  sEEDMA_InitStructure.DMA_Mode = DMA_Mode_Normal;
 800e348:	4b1e      	ldr	r3, [pc, #120]	; (800e3c4 <sEE_LowLevel_Init+0x188>)
 800e34a:	2200      	movs	r2, #0
 800e34c:	625a      	str	r2, [r3, #36]	; 0x24
  sEEDMA_InitStructure.DMA_Priority = DMA_Priority_VeryHigh;
 800e34e:	4b1d      	ldr	r3, [pc, #116]	; (800e3c4 <sEE_LowLevel_Init+0x188>)
 800e350:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800e354:	629a      	str	r2, [r3, #40]	; 0x28
  sEEDMA_InitStructure.DMA_FIFOMode = DMA_FIFOMode_Enable;
 800e356:	4b1b      	ldr	r3, [pc, #108]	; (800e3c4 <sEE_LowLevel_Init+0x188>)
 800e358:	2204      	movs	r2, #4
 800e35a:	62da      	str	r2, [r3, #44]	; 0x2c
  sEEDMA_InitStructure.DMA_FIFOThreshold = DMA_FIFOThreshold_Full;
 800e35c:	4b19      	ldr	r3, [pc, #100]	; (800e3c4 <sEE_LowLevel_Init+0x188>)
 800e35e:	2203      	movs	r2, #3
 800e360:	631a      	str	r2, [r3, #48]	; 0x30
  sEEDMA_InitStructure.DMA_MemoryBurst = DMA_MemoryBurst_Single;
 800e362:	4b18      	ldr	r3, [pc, #96]	; (800e3c4 <sEE_LowLevel_Init+0x188>)
 800e364:	2200      	movs	r2, #0
 800e366:	635a      	str	r2, [r3, #52]	; 0x34
  sEEDMA_InitStructure.DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
 800e368:	4b16      	ldr	r3, [pc, #88]	; (800e3c4 <sEE_LowLevel_Init+0x188>)
 800e36a:	2200      	movs	r2, #0
 800e36c:	639a      	str	r2, [r3, #56]	; 0x38
  DMA_Init(sEE_I2C_DMA_STREAM_TX, &sEEDMA_InitStructure);
 800e36e:	4915      	ldr	r1, [pc, #84]	; (800e3c4 <sEE_LowLevel_Init+0x188>)
 800e370:	4813      	ldr	r0, [pc, #76]	; (800e3c0 <sEE_LowLevel_Init+0x184>)
 800e372:	f7f5 fcf5 	bl	8003d60 <DMA_Init>

  /* Clear any pending flag on Rx Stream */
  DMA_ClearFlag(sEE_I2C_DMA_STREAM_RX, sEE_RX_DMA_FLAG_FEIF | sEE_RX_DMA_FLAG_DMEIF | sEE_RX_DMA_FLAG_TEIF | \
 800e376:	4915      	ldr	r1, [pc, #84]	; (800e3cc <sEE_LowLevel_Init+0x190>)
 800e378:	4815      	ldr	r0, [pc, #84]	; (800e3d0 <sEE_LowLevel_Init+0x194>)
 800e37a:	f7f5 febd 	bl	80040f8 <DMA_ClearFlag>
                                       sEE_RX_DMA_FLAG_HTIF | sEE_RX_DMA_FLAG_TCIF);
  /* Disable the EE I2C DMA Rx stream */
  DMA_Cmd(sEE_I2C_DMA_STREAM_RX, DISABLE);
 800e37e:	2100      	movs	r1, #0
 800e380:	4813      	ldr	r0, [pc, #76]	; (800e3d0 <sEE_LowLevel_Init+0x194>)
 800e382:	f7f5 fd7c 	bl	8003e7e <DMA_Cmd>
  /* Configure the DMA stream for the EE I2C peripheral RX direction */
  DMA_DeInit(sEE_I2C_DMA_STREAM_RX);
 800e386:	4812      	ldr	r0, [pc, #72]	; (800e3d0 <sEE_LowLevel_Init+0x194>)
 800e388:	f7f5 fc16 	bl	8003bb8 <DMA_DeInit>
  DMA_Init(sEE_I2C_DMA_STREAM_RX, &sEEDMA_InitStructure);
 800e38c:	490d      	ldr	r1, [pc, #52]	; (800e3c4 <sEE_LowLevel_Init+0x188>)
 800e38e:	4810      	ldr	r0, [pc, #64]	; (800e3d0 <sEE_LowLevel_Init+0x194>)
 800e390:	f7f5 fce6 	bl	8003d60 <DMA_Init>
  
  /* Enable the DMA Channels Interrupts */
  DMA_ITConfig(sEE_I2C_DMA_STREAM_TX, DMA_IT_TC, ENABLE);
 800e394:	2201      	movs	r2, #1
 800e396:	2110      	movs	r1, #16
 800e398:	4809      	ldr	r0, [pc, #36]	; (800e3c0 <sEE_LowLevel_Init+0x184>)
 800e39a:	f7f5 fedb 	bl	8004154 <DMA_ITConfig>
  DMA_ITConfig(sEE_I2C_DMA_STREAM_RX, DMA_IT_TC, ENABLE);      
 800e39e:	2201      	movs	r2, #1
 800e3a0:	2110      	movs	r1, #16
 800e3a2:	480b      	ldr	r0, [pc, #44]	; (800e3d0 <sEE_LowLevel_Init+0x194>)
 800e3a4:	f7f5 fed6 	bl	8004154 <DMA_ITConfig>
}
 800e3a8:	bf00      	nop
 800e3aa:	3708      	adds	r7, #8
 800e3ac:	46bd      	mov	sp, r7
 800e3ae:	bd80      	pop	{r7, pc}
 800e3b0:	40020000 	.word	0x40020000
 800e3b4:	40020800 	.word	0x40020800
 800e3b8:	20002e04 	.word	0x20002e04
 800e3bc:	2000003d 	.word	0x2000003d
 800e3c0:	40026070 	.word	0x40026070
 800e3c4:	20002dc8 	.word	0x20002dc8
 800e3c8:	40005c10 	.word	0x40005c10
 800e3cc:	103d0000 	.word	0x103d0000
 800e3d0:	40026040 	.word	0x40026040

0800e3d4 <sEE_LowLevel_DMAConfig>:
  * @brief  Initializes DMA channel used by the I2C EEPROM driver.
  * @param  None
  * @retval None
  */
void sEE_LowLevel_DMAConfig(uint32_t pBuffer, uint32_t BufferSize, uint32_t Direction)
{ 
 800e3d4:	b580      	push	{r7, lr}
 800e3d6:	b084      	sub	sp, #16
 800e3d8:	af00      	add	r7, sp, #0
 800e3da:	60f8      	str	r0, [r7, #12]
 800e3dc:	60b9      	str	r1, [r7, #8]
 800e3de:	607a      	str	r2, [r7, #4]
  /* Initialize the DMA with the new parameters */
  if (Direction == sEE_DIRECTION_TX)
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	2b00      	cmp	r3, #0
 800e3e4:	d10d      	bne.n	800e402 <sEE_LowLevel_DMAConfig+0x2e>
  {
    /* Configure the DMA Tx Stream with the buffer address and the buffer size */
    sEEDMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)pBuffer;
 800e3e6:	4a0f      	ldr	r2, [pc, #60]	; (800e424 <sEE_LowLevel_DMAConfig+0x50>)
 800e3e8:	68fb      	ldr	r3, [r7, #12]
 800e3ea:	6093      	str	r3, [r2, #8]
    sEEDMA_InitStructure.DMA_DIR = DMA_DIR_MemoryToPeripheral;    
 800e3ec:	4b0d      	ldr	r3, [pc, #52]	; (800e424 <sEE_LowLevel_DMAConfig+0x50>)
 800e3ee:	2240      	movs	r2, #64	; 0x40
 800e3f0:	60da      	str	r2, [r3, #12]
    sEEDMA_InitStructure.DMA_BufferSize = (uint32_t)BufferSize;  
 800e3f2:	4a0c      	ldr	r2, [pc, #48]	; (800e424 <sEE_LowLevel_DMAConfig+0x50>)
 800e3f4:	68bb      	ldr	r3, [r7, #8]
 800e3f6:	6113      	str	r3, [r2, #16]
    DMA_Init(sEE_I2C_DMA_STREAM_TX, &sEEDMA_InitStructure);  
 800e3f8:	490a      	ldr	r1, [pc, #40]	; (800e424 <sEE_LowLevel_DMAConfig+0x50>)
 800e3fa:	480b      	ldr	r0, [pc, #44]	; (800e428 <sEE_LowLevel_DMAConfig+0x54>)
 800e3fc:	f7f5 fcb0 	bl	8003d60 <DMA_Init>
    sEEDMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)pBuffer;
    sEEDMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralToMemory;
    sEEDMA_InitStructure.DMA_BufferSize = (uint32_t)BufferSize;      
    DMA_Init(sEE_I2C_DMA_STREAM_RX, &sEEDMA_InitStructure);    
  }
}
 800e400:	e00c      	b.n	800e41c <sEE_LowLevel_DMAConfig+0x48>
    sEEDMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)pBuffer;
 800e402:	4a08      	ldr	r2, [pc, #32]	; (800e424 <sEE_LowLevel_DMAConfig+0x50>)
 800e404:	68fb      	ldr	r3, [r7, #12]
 800e406:	6093      	str	r3, [r2, #8]
    sEEDMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralToMemory;
 800e408:	4b06      	ldr	r3, [pc, #24]	; (800e424 <sEE_LowLevel_DMAConfig+0x50>)
 800e40a:	2200      	movs	r2, #0
 800e40c:	60da      	str	r2, [r3, #12]
    sEEDMA_InitStructure.DMA_BufferSize = (uint32_t)BufferSize;      
 800e40e:	4a05      	ldr	r2, [pc, #20]	; (800e424 <sEE_LowLevel_DMAConfig+0x50>)
 800e410:	68bb      	ldr	r3, [r7, #8]
 800e412:	6113      	str	r3, [r2, #16]
    DMA_Init(sEE_I2C_DMA_STREAM_RX, &sEEDMA_InitStructure);    
 800e414:	4903      	ldr	r1, [pc, #12]	; (800e424 <sEE_LowLevel_DMAConfig+0x50>)
 800e416:	4805      	ldr	r0, [pc, #20]	; (800e42c <sEE_LowLevel_DMAConfig+0x58>)
 800e418:	f7f5 fca2 	bl	8003d60 <DMA_Init>
}
 800e41c:	bf00      	nop
 800e41e:	3710      	adds	r7, #16
 800e420:	46bd      	mov	sp, r7
 800e422:	bd80      	pop	{r7, pc}
 800e424:	20002dc8 	.word	0x20002dc8
 800e428:	40026070 	.word	0x40026070
 800e42c:	40026040 	.word	0x40026040

0800e430 <sEE_DeInit>:
  * @brief  DeInitializes peripherals used by the I2C EEPROM driver.
  * @param  None
  * @retval None
  */
void sEE_DeInit(void)
{
 800e430:	b580      	push	{r7, lr}
 800e432:	af00      	add	r7, sp, #0
  sEE_LowLevel_DeInit(); 
 800e434:	f7ff fea6 	bl	800e184 <sEE_LowLevel_DeInit>
}
 800e438:	bf00      	nop
 800e43a:	bd80      	pop	{r7, pc}

0800e43c <sEE_Init>:
  * @brief  Initializes peripherals used by the I2C EEPROM driver.
  * @param  None
  * @retval None
  */
void sEE_Init(void)
{ 
 800e43c:	b580      	push	{r7, lr}
 800e43e:	b084      	sub	sp, #16
 800e440:	af00      	add	r7, sp, #0
  I2C_InitTypeDef  I2C_InitStructure;
  
  sEE_LowLevel_Init();
 800e442:	f7ff fefb 	bl	800e23c <sEE_LowLevel_Init>

  /* If the I2C peripheral is already enabled, don't reconfigure it */
  if ((sEE_I2C->CR1 & I2C_CR1_PE) == 0)
 800e446:	4b15      	ldr	r3, [pc, #84]	; (800e49c <sEE_Init+0x60>)
 800e448:	881b      	ldrh	r3, [r3, #0]
 800e44a:	b29b      	uxth	r3, r3
 800e44c:	f003 0301 	and.w	r3, r3, #1
 800e450:	2b00      	cmp	r3, #0
 800e452:	d117      	bne.n	800e484 <sEE_Init+0x48>
  {     
    /*!< I2C configuration */
    /* sEE_I2C configuration */
    I2C_InitStructure.I2C_Mode = I2C_Mode_I2C;
 800e454:	2300      	movs	r3, #0
 800e456:	80bb      	strh	r3, [r7, #4]
    I2C_InitStructure.I2C_DutyCycle = I2C_DutyCycle_2;
 800e458:	f64b 73ff 	movw	r3, #49151	; 0xbfff
 800e45c:	80fb      	strh	r3, [r7, #6]
    I2C_InitStructure.I2C_OwnAddress1 = 0x00;
 800e45e:	2300      	movs	r3, #0
 800e460:	813b      	strh	r3, [r7, #8]
    I2C_InitStructure.I2C_Ack = I2C_Ack_Enable;
 800e462:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e466:	817b      	strh	r3, [r7, #10]
    I2C_InitStructure.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 800e468:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800e46c:	81bb      	strh	r3, [r7, #12]
    I2C_InitStructure.I2C_ClockSpeed = I2C_SPEED;
 800e46e:	4b0c      	ldr	r3, [pc, #48]	; (800e4a0 <sEE_Init+0x64>)
 800e470:	603b      	str	r3, [r7, #0]
    
    /* Apply sEE_I2C configuration after enabling it */
    I2C_Init(sEE_I2C, &I2C_InitStructure);
 800e472:	463b      	mov	r3, r7
 800e474:	4619      	mov	r1, r3
 800e476:	4809      	ldr	r0, [pc, #36]	; (800e49c <sEE_Init+0x60>)
 800e478:	f7f8 fa90 	bl	800699c <I2C_Init>
  
    /* sEE_I2C Peripheral Enable */
    I2C_Cmd(sEE_I2C, ENABLE);
 800e47c:	2101      	movs	r1, #1
 800e47e:	4807      	ldr	r0, [pc, #28]	; (800e49c <sEE_Init+0x60>)
 800e480:	f7f8 fb6d 	bl	8006b5e <I2C_Cmd>
  }  

  /* Enable the sEE_I2C peripheral DMA requests */
  I2C_DMACmd(sEE_I2C, ENABLE);  
 800e484:	2101      	movs	r1, #1
 800e486:	4805      	ldr	r0, [pc, #20]	; (800e49c <sEE_Init+0x60>)
 800e488:	f7f8 fdff 	bl	800708a <I2C_DMACmd>

  /*!< Select the EEPROM address */
  sEEAddress = sEE_HW_ADDRESS;   
 800e48c:	4b05      	ldr	r3, [pc, #20]	; (800e4a4 <sEE_Init+0x68>)
 800e48e:	22a0      	movs	r2, #160	; 0xa0
 800e490:	801a      	strh	r2, [r3, #0]
}
 800e492:	bf00      	nop
 800e494:	3710      	adds	r7, #16
 800e496:	46bd      	mov	sp, r7
 800e498:	bd80      	pop	{r7, pc}
 800e49a:	bf00      	nop
 800e49c:	40005c00 	.word	0x40005c00
 800e4a0:	000186a0 	.word	0x000186a0
 800e4a4:	20002e08 	.word	0x20002e08

0800e4a8 <sEE_ReadBuffer>:
  * 
  * @retval sEE_OK (0) if operation is correctly performed, else return value 
  *         different from sEE_OK (0) or the timeout user callback.
  */
uint32_t sEE_ReadBuffer(uint8_t* pBuffer, uint16_t ReadAddr, uint16_t* NumByteToRead)
{  
 800e4a8:	b580      	push	{r7, lr}
 800e4aa:	b084      	sub	sp, #16
 800e4ac:	af00      	add	r7, sp, #0
 800e4ae:	60f8      	str	r0, [r7, #12]
 800e4b0:	460b      	mov	r3, r1
 800e4b2:	607a      	str	r2, [r7, #4]
 800e4b4:	817b      	strh	r3, [r7, #10]
  /* Set the pointer to the Number of data to be read. This pointer will be used 
      by the DMA Transfer Completer interrupt Handler in order to reset the 
      variable to 0. User should check on this variable in order to know if the 
      DMA transfer has been complete or not. */
  sEEDataReadPointer = NumByteToRead;
 800e4b6:	4aa3      	ldr	r2, [pc, #652]	; (800e744 <sEE_ReadBuffer+0x29c>)
 800e4b8:	687b      	ldr	r3, [r7, #4]
 800e4ba:	6013      	str	r3, [r2, #0]
  
  /*!< While the bus is busy */
  sEETimeout = sEE_LONG_TIMEOUT;
 800e4bc:	4ba2      	ldr	r3, [pc, #648]	; (800e748 <sEE_ReadBuffer+0x2a0>)
 800e4be:	f44f 4220 	mov.w	r2, #40960	; 0xa000
 800e4c2:	601a      	str	r2, [r3, #0]
  while(I2C_GetFlagStatus(sEE_I2C, I2C_FLAG_BUSY))
 800e4c4:	e00a      	b.n	800e4dc <sEE_ReadBuffer+0x34>
  {
    if((sEETimeout--) == 0) return sEE_TIMEOUT_UserCallback();
 800e4c6:	4ba0      	ldr	r3, [pc, #640]	; (800e748 <sEE_ReadBuffer+0x2a0>)
 800e4c8:	681b      	ldr	r3, [r3, #0]
 800e4ca:	1e5a      	subs	r2, r3, #1
 800e4cc:	499e      	ldr	r1, [pc, #632]	; (800e748 <sEE_ReadBuffer+0x2a0>)
 800e4ce:	600a      	str	r2, [r1, #0]
 800e4d0:	2b00      	cmp	r3, #0
 800e4d2:	d103      	bne.n	800e4dc <sEE_ReadBuffer+0x34>
 800e4d4:	f000 fc8a 	bl	800edec <sEE_TIMEOUT_UserCallback>
 800e4d8:	4603      	mov	r3, r0
 800e4da:	e12e      	b.n	800e73a <sEE_ReadBuffer+0x292>
  while(I2C_GetFlagStatus(sEE_I2C, I2C_FLAG_BUSY))
 800e4dc:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 800e4e0:	489a      	ldr	r0, [pc, #616]	; (800e74c <sEE_ReadBuffer+0x2a4>)
 800e4e2:	f7f8 fe9f 	bl	8007224 <I2C_GetFlagStatus>
 800e4e6:	4603      	mov	r3, r0
 800e4e8:	2b00      	cmp	r3, #0
 800e4ea:	d1ec      	bne.n	800e4c6 <sEE_ReadBuffer+0x1e>
  }
  
  /*!< Send START condition */
  I2C_GenerateSTART(sEE_I2C, ENABLE);
 800e4ec:	2101      	movs	r1, #1
 800e4ee:	4897      	ldr	r0, [pc, #604]	; (800e74c <sEE_ReadBuffer+0x2a4>)
 800e4f0:	f7f8 fb97 	bl	8006c22 <I2C_GenerateSTART>
  
  /*!< Test on EV5 and clear it (cleared by reading SR1 then writing to DR) */
  sEETimeout = sEE_FLAG_TIMEOUT;
 800e4f4:	4b94      	ldr	r3, [pc, #592]	; (800e748 <sEE_ReadBuffer+0x2a0>)
 800e4f6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800e4fa:	601a      	str	r2, [r3, #0]
  while(!I2C_CheckEvent(sEE_I2C, I2C_EVENT_MASTER_MODE_SELECT))
 800e4fc:	e00a      	b.n	800e514 <sEE_ReadBuffer+0x6c>
  {
    if((sEETimeout--) == 0) return sEE_TIMEOUT_UserCallback();
 800e4fe:	4b92      	ldr	r3, [pc, #584]	; (800e748 <sEE_ReadBuffer+0x2a0>)
 800e500:	681b      	ldr	r3, [r3, #0]
 800e502:	1e5a      	subs	r2, r3, #1
 800e504:	4990      	ldr	r1, [pc, #576]	; (800e748 <sEE_ReadBuffer+0x2a0>)
 800e506:	600a      	str	r2, [r1, #0]
 800e508:	2b00      	cmp	r3, #0
 800e50a:	d103      	bne.n	800e514 <sEE_ReadBuffer+0x6c>
 800e50c:	f000 fc6e 	bl	800edec <sEE_TIMEOUT_UserCallback>
 800e510:	4603      	mov	r3, r0
 800e512:	e112      	b.n	800e73a <sEE_ReadBuffer+0x292>
  while(!I2C_CheckEvent(sEE_I2C, I2C_EVENT_MASTER_MODE_SELECT))
 800e514:	498e      	ldr	r1, [pc, #568]	; (800e750 <sEE_ReadBuffer+0x2a8>)
 800e516:	488d      	ldr	r0, [pc, #564]	; (800e74c <sEE_ReadBuffer+0x2a4>)
 800e518:	f7f8 fe32 	bl	8007180 <I2C_CheckEvent>
 800e51c:	4603      	mov	r3, r0
 800e51e:	2b00      	cmp	r3, #0
 800e520:	d0ed      	beq.n	800e4fe <sEE_ReadBuffer+0x56>
  }
  
  /*!< Send EEPROM address for write */
  I2C_Send7bitAddress(sEE_I2C, sEEAddress, I2C_Direction_Transmitter);
 800e522:	4b8c      	ldr	r3, [pc, #560]	; (800e754 <sEE_ReadBuffer+0x2ac>)
 800e524:	881b      	ldrh	r3, [r3, #0]
 800e526:	b29b      	uxth	r3, r3
 800e528:	b2db      	uxtb	r3, r3
 800e52a:	2200      	movs	r2, #0
 800e52c:	4619      	mov	r1, r3
 800e52e:	4887      	ldr	r0, [pc, #540]	; (800e74c <sEE_ReadBuffer+0x2a4>)
 800e530:	f7f8 fbb7 	bl	8006ca2 <I2C_Send7bitAddress>

  /*!< Test on EV6 and clear it */
  sEETimeout = sEE_FLAG_TIMEOUT;
 800e534:	4b84      	ldr	r3, [pc, #528]	; (800e748 <sEE_ReadBuffer+0x2a0>)
 800e536:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800e53a:	601a      	str	r2, [r3, #0]
  while(!I2C_CheckEvent(sEE_I2C, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED))
 800e53c:	e00a      	b.n	800e554 <sEE_ReadBuffer+0xac>
  {
    if((sEETimeout--) == 0) return sEE_TIMEOUT_UserCallback();
 800e53e:	4b82      	ldr	r3, [pc, #520]	; (800e748 <sEE_ReadBuffer+0x2a0>)
 800e540:	681b      	ldr	r3, [r3, #0]
 800e542:	1e5a      	subs	r2, r3, #1
 800e544:	4980      	ldr	r1, [pc, #512]	; (800e748 <sEE_ReadBuffer+0x2a0>)
 800e546:	600a      	str	r2, [r1, #0]
 800e548:	2b00      	cmp	r3, #0
 800e54a:	d103      	bne.n	800e554 <sEE_ReadBuffer+0xac>
 800e54c:	f000 fc4e 	bl	800edec <sEE_TIMEOUT_UserCallback>
 800e550:	4603      	mov	r3, r0
 800e552:	e0f2      	b.n	800e73a <sEE_ReadBuffer+0x292>
  while(!I2C_CheckEvent(sEE_I2C, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED))
 800e554:	4980      	ldr	r1, [pc, #512]	; (800e758 <sEE_ReadBuffer+0x2b0>)
 800e556:	487d      	ldr	r0, [pc, #500]	; (800e74c <sEE_ReadBuffer+0x2a4>)
 800e558:	f7f8 fe12 	bl	8007180 <I2C_CheckEvent>
 800e55c:	4603      	mov	r3, r0
 800e55e:	2b00      	cmp	r3, #0
 800e560:	d0ed      	beq.n	800e53e <sEE_ReadBuffer+0x96>
  } 

  /*!< Send the EEPROM's internal address to read from: MSB of the address first */
  I2C_SendData(sEE_I2C, (uint8_t)((ReadAddr & 0xFF00) >> 8));    
 800e562:	897b      	ldrh	r3, [r7, #10]
 800e564:	0a1b      	lsrs	r3, r3, #8
 800e566:	b29b      	uxth	r3, r3
 800e568:	b2db      	uxtb	r3, r3
 800e56a:	4619      	mov	r1, r3
 800e56c:	4877      	ldr	r0, [pc, #476]	; (800e74c <sEE_ReadBuffer+0x2a4>)
 800e56e:	f7f8 fcfd 	bl	8006f6c <I2C_SendData>

  /*!< Test on EV8 and clear it */
  sEETimeout = sEE_FLAG_TIMEOUT;
 800e572:	4b75      	ldr	r3, [pc, #468]	; (800e748 <sEE_ReadBuffer+0x2a0>)
 800e574:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800e578:	601a      	str	r2, [r3, #0]
  while(!I2C_CheckEvent(sEE_I2C, I2C_EVENT_MASTER_BYTE_TRANSMITTING))
 800e57a:	e00a      	b.n	800e592 <sEE_ReadBuffer+0xea>
  {
    if((sEETimeout--) == 0) return sEE_TIMEOUT_UserCallback();
 800e57c:	4b72      	ldr	r3, [pc, #456]	; (800e748 <sEE_ReadBuffer+0x2a0>)
 800e57e:	681b      	ldr	r3, [r3, #0]
 800e580:	1e5a      	subs	r2, r3, #1
 800e582:	4971      	ldr	r1, [pc, #452]	; (800e748 <sEE_ReadBuffer+0x2a0>)
 800e584:	600a      	str	r2, [r1, #0]
 800e586:	2b00      	cmp	r3, #0
 800e588:	d103      	bne.n	800e592 <sEE_ReadBuffer+0xea>
 800e58a:	f000 fc2f 	bl	800edec <sEE_TIMEOUT_UserCallback>
 800e58e:	4603      	mov	r3, r0
 800e590:	e0d3      	b.n	800e73a <sEE_ReadBuffer+0x292>
  while(!I2C_CheckEvent(sEE_I2C, I2C_EVENT_MASTER_BYTE_TRANSMITTING))
 800e592:	4972      	ldr	r1, [pc, #456]	; (800e75c <sEE_ReadBuffer+0x2b4>)
 800e594:	486d      	ldr	r0, [pc, #436]	; (800e74c <sEE_ReadBuffer+0x2a4>)
 800e596:	f7f8 fdf3 	bl	8007180 <I2C_CheckEvent>
 800e59a:	4603      	mov	r3, r0
 800e59c:	2b00      	cmp	r3, #0
 800e59e:	d0ed      	beq.n	800e57c <sEE_ReadBuffer+0xd4>
  }

  /*!< Send the EEPROM's internal address to read from: LSB of the address */
  I2C_SendData(sEE_I2C, (uint8_t)(ReadAddr & 0x00FF));    
 800e5a0:	897b      	ldrh	r3, [r7, #10]
 800e5a2:	b2db      	uxtb	r3, r3
 800e5a4:	4619      	mov	r1, r3
 800e5a6:	4869      	ldr	r0, [pc, #420]	; (800e74c <sEE_ReadBuffer+0x2a4>)
 800e5a8:	f7f8 fce0 	bl	8006f6c <I2C_SendData>

  /*!< Test on EV8 and clear it */
  sEETimeout = sEE_FLAG_TIMEOUT;
 800e5ac:	4b66      	ldr	r3, [pc, #408]	; (800e748 <sEE_ReadBuffer+0x2a0>)
 800e5ae:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800e5b2:	601a      	str	r2, [r3, #0]
  while(I2C_GetFlagStatus(sEE_I2C, I2C_FLAG_BTF) == RESET)
 800e5b4:	e00a      	b.n	800e5cc <sEE_ReadBuffer+0x124>
  {
    if((sEETimeout--) == 0) return sEE_TIMEOUT_UserCallback();
 800e5b6:	4b64      	ldr	r3, [pc, #400]	; (800e748 <sEE_ReadBuffer+0x2a0>)
 800e5b8:	681b      	ldr	r3, [r3, #0]
 800e5ba:	1e5a      	subs	r2, r3, #1
 800e5bc:	4962      	ldr	r1, [pc, #392]	; (800e748 <sEE_ReadBuffer+0x2a0>)
 800e5be:	600a      	str	r2, [r1, #0]
 800e5c0:	2b00      	cmp	r3, #0
 800e5c2:	d103      	bne.n	800e5cc <sEE_ReadBuffer+0x124>
 800e5c4:	f000 fc12 	bl	800edec <sEE_TIMEOUT_UserCallback>
 800e5c8:	4603      	mov	r3, r0
 800e5ca:	e0b6      	b.n	800e73a <sEE_ReadBuffer+0x292>
  while(I2C_GetFlagStatus(sEE_I2C, I2C_FLAG_BTF) == RESET)
 800e5cc:	4964      	ldr	r1, [pc, #400]	; (800e760 <sEE_ReadBuffer+0x2b8>)
 800e5ce:	485f      	ldr	r0, [pc, #380]	; (800e74c <sEE_ReadBuffer+0x2a4>)
 800e5d0:	f7f8 fe28 	bl	8007224 <I2C_GetFlagStatus>
 800e5d4:	4603      	mov	r3, r0
 800e5d6:	2b00      	cmp	r3, #0
 800e5d8:	d0ed      	beq.n	800e5b6 <sEE_ReadBuffer+0x10e>
  }
  
  /*!< Send STRAT condition a second time */  
  I2C_GenerateSTART(sEE_I2C, ENABLE);
 800e5da:	2101      	movs	r1, #1
 800e5dc:	485b      	ldr	r0, [pc, #364]	; (800e74c <sEE_ReadBuffer+0x2a4>)
 800e5de:	f7f8 fb20 	bl	8006c22 <I2C_GenerateSTART>
  
  /*!< Test on EV5 and clear it (cleared by reading SR1 then writing to DR) */
  sEETimeout = sEE_FLAG_TIMEOUT;
 800e5e2:	4b59      	ldr	r3, [pc, #356]	; (800e748 <sEE_ReadBuffer+0x2a0>)
 800e5e4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800e5e8:	601a      	str	r2, [r3, #0]
  while(!I2C_CheckEvent(sEE_I2C, I2C_EVENT_MASTER_MODE_SELECT))
 800e5ea:	e00a      	b.n	800e602 <sEE_ReadBuffer+0x15a>
  {
    if((sEETimeout--) == 0) return sEE_TIMEOUT_UserCallback();
 800e5ec:	4b56      	ldr	r3, [pc, #344]	; (800e748 <sEE_ReadBuffer+0x2a0>)
 800e5ee:	681b      	ldr	r3, [r3, #0]
 800e5f0:	1e5a      	subs	r2, r3, #1
 800e5f2:	4955      	ldr	r1, [pc, #340]	; (800e748 <sEE_ReadBuffer+0x2a0>)
 800e5f4:	600a      	str	r2, [r1, #0]
 800e5f6:	2b00      	cmp	r3, #0
 800e5f8:	d103      	bne.n	800e602 <sEE_ReadBuffer+0x15a>
 800e5fa:	f000 fbf7 	bl	800edec <sEE_TIMEOUT_UserCallback>
 800e5fe:	4603      	mov	r3, r0
 800e600:	e09b      	b.n	800e73a <sEE_ReadBuffer+0x292>
  while(!I2C_CheckEvent(sEE_I2C, I2C_EVENT_MASTER_MODE_SELECT))
 800e602:	4953      	ldr	r1, [pc, #332]	; (800e750 <sEE_ReadBuffer+0x2a8>)
 800e604:	4851      	ldr	r0, [pc, #324]	; (800e74c <sEE_ReadBuffer+0x2a4>)
 800e606:	f7f8 fdbb 	bl	8007180 <I2C_CheckEvent>
 800e60a:	4603      	mov	r3, r0
 800e60c:	2b00      	cmp	r3, #0
 800e60e:	d0ed      	beq.n	800e5ec <sEE_ReadBuffer+0x144>
  } 
  
  /*!< Send EEPROM address for read */
  I2C_Send7bitAddress(sEE_I2C, sEEAddress, I2C_Direction_Receiver);  
 800e610:	4b50      	ldr	r3, [pc, #320]	; (800e754 <sEE_ReadBuffer+0x2ac>)
 800e612:	881b      	ldrh	r3, [r3, #0]
 800e614:	b29b      	uxth	r3, r3
 800e616:	b2db      	uxtb	r3, r3
 800e618:	2201      	movs	r2, #1
 800e61a:	4619      	mov	r1, r3
 800e61c:	484b      	ldr	r0, [pc, #300]	; (800e74c <sEE_ReadBuffer+0x2a4>)
 800e61e:	f7f8 fb40 	bl	8006ca2 <I2C_Send7bitAddress>
  
  /* If number of data to be read is 1, then DMA couldn't be used */
  /* One Byte Master Reception procedure (POLLING) ---------------------------*/
  if ((uint16_t)(*NumByteToRead) < 2)
 800e622:	687b      	ldr	r3, [r7, #4]
 800e624:	881b      	ldrh	r3, [r3, #0]
 800e626:	2b01      	cmp	r3, #1
 800e628:	d860      	bhi.n	800e6ec <sEE_ReadBuffer+0x244>
  {
    /* Wait on ADDR flag to be set (ADDR is still not cleared at this level */
    sEETimeout = sEE_FLAG_TIMEOUT;
 800e62a:	4b47      	ldr	r3, [pc, #284]	; (800e748 <sEE_ReadBuffer+0x2a0>)
 800e62c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800e630:	601a      	str	r2, [r3, #0]
    while(I2C_GetFlagStatus(sEE_I2C, I2C_FLAG_ADDR) == RESET)
 800e632:	e00a      	b.n	800e64a <sEE_ReadBuffer+0x1a2>
    {
      if((sEETimeout--) == 0) return sEE_TIMEOUT_UserCallback();
 800e634:	4b44      	ldr	r3, [pc, #272]	; (800e748 <sEE_ReadBuffer+0x2a0>)
 800e636:	681b      	ldr	r3, [r3, #0]
 800e638:	1e5a      	subs	r2, r3, #1
 800e63a:	4943      	ldr	r1, [pc, #268]	; (800e748 <sEE_ReadBuffer+0x2a0>)
 800e63c:	600a      	str	r2, [r1, #0]
 800e63e:	2b00      	cmp	r3, #0
 800e640:	d103      	bne.n	800e64a <sEE_ReadBuffer+0x1a2>
 800e642:	f000 fbd3 	bl	800edec <sEE_TIMEOUT_UserCallback>
 800e646:	4603      	mov	r3, r0
 800e648:	e077      	b.n	800e73a <sEE_ReadBuffer+0x292>
    while(I2C_GetFlagStatus(sEE_I2C, I2C_FLAG_ADDR) == RESET)
 800e64a:	4946      	ldr	r1, [pc, #280]	; (800e764 <sEE_ReadBuffer+0x2bc>)
 800e64c:	483f      	ldr	r0, [pc, #252]	; (800e74c <sEE_ReadBuffer+0x2a4>)
 800e64e:	f7f8 fde9 	bl	8007224 <I2C_GetFlagStatus>
 800e652:	4603      	mov	r3, r0
 800e654:	2b00      	cmp	r3, #0
 800e656:	d0ed      	beq.n	800e634 <sEE_ReadBuffer+0x18c>
    }     
    
    /*!< Disable Acknowledgement */
    I2C_AcknowledgeConfig(sEE_I2C, DISABLE);   
 800e658:	2100      	movs	r1, #0
 800e65a:	483c      	ldr	r0, [pc, #240]	; (800e74c <sEE_ReadBuffer+0x2a4>)
 800e65c:	f7f8 fb3f 	bl	8006cde <I2C_AcknowledgeConfig>
    
    /* Clear ADDR register by reading SR1 then SR2 register (SR1 has already been read) */
    (void)sEE_I2C->SR2;
 800e660:	4b3a      	ldr	r3, [pc, #232]	; (800e74c <sEE_ReadBuffer+0x2a4>)
 800e662:	8b1b      	ldrh	r3, [r3, #24]
    
    /*!< Send STOP Condition */
    I2C_GenerateSTOP(sEE_I2C, ENABLE);
 800e664:	2101      	movs	r1, #1
 800e666:	4839      	ldr	r0, [pc, #228]	; (800e74c <sEE_ReadBuffer+0x2a4>)
 800e668:	f7f8 fafb 	bl	8006c62 <I2C_GenerateSTOP>
    
    /* Wait for the byte to be received */
    sEETimeout = sEE_FLAG_TIMEOUT;
 800e66c:	4b36      	ldr	r3, [pc, #216]	; (800e748 <sEE_ReadBuffer+0x2a0>)
 800e66e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800e672:	601a      	str	r2, [r3, #0]
    while(I2C_GetFlagStatus(sEE_I2C, I2C_FLAG_RXNE) == RESET)
 800e674:	e00a      	b.n	800e68c <sEE_ReadBuffer+0x1e4>
    {
      if((sEETimeout--) == 0) return sEE_TIMEOUT_UserCallback();
 800e676:	4b34      	ldr	r3, [pc, #208]	; (800e748 <sEE_ReadBuffer+0x2a0>)
 800e678:	681b      	ldr	r3, [r3, #0]
 800e67a:	1e5a      	subs	r2, r3, #1
 800e67c:	4932      	ldr	r1, [pc, #200]	; (800e748 <sEE_ReadBuffer+0x2a0>)
 800e67e:	600a      	str	r2, [r1, #0]
 800e680:	2b00      	cmp	r3, #0
 800e682:	d103      	bne.n	800e68c <sEE_ReadBuffer+0x1e4>
 800e684:	f000 fbb2 	bl	800edec <sEE_TIMEOUT_UserCallback>
 800e688:	4603      	mov	r3, r0
 800e68a:	e056      	b.n	800e73a <sEE_ReadBuffer+0x292>
    while(I2C_GetFlagStatus(sEE_I2C, I2C_FLAG_RXNE) == RESET)
 800e68c:	4936      	ldr	r1, [pc, #216]	; (800e768 <sEE_ReadBuffer+0x2c0>)
 800e68e:	482f      	ldr	r0, [pc, #188]	; (800e74c <sEE_ReadBuffer+0x2a4>)
 800e690:	f7f8 fdc8 	bl	8007224 <I2C_GetFlagStatus>
 800e694:	4603      	mov	r3, r0
 800e696:	2b00      	cmp	r3, #0
 800e698:	d0ed      	beq.n	800e676 <sEE_ReadBuffer+0x1ce>
    }
    
    /*!< Read the byte received from the EEPROM */
    *pBuffer = I2C_ReceiveData(sEE_I2C);
 800e69a:	482c      	ldr	r0, [pc, #176]	; (800e74c <sEE_ReadBuffer+0x2a4>)
 800e69c:	f7f8 fc76 	bl	8006f8c <I2C_ReceiveData>
 800e6a0:	4603      	mov	r3, r0
 800e6a2:	461a      	mov	r2, r3
 800e6a4:	68fb      	ldr	r3, [r7, #12]
 800e6a6:	701a      	strb	r2, [r3, #0]
    
    /*!< Decrement the read bytes counter */
    (uint16_t)(*NumByteToRead)--;        
 800e6a8:	687b      	ldr	r3, [r7, #4]
 800e6aa:	881b      	ldrh	r3, [r3, #0]
 800e6ac:	3b01      	subs	r3, #1
 800e6ae:	b29a      	uxth	r2, r3
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	801a      	strh	r2, [r3, #0]
    
    /* Wait to make sure that STOP control bit has been cleared */
    sEETimeout = sEE_FLAG_TIMEOUT;
 800e6b4:	4b24      	ldr	r3, [pc, #144]	; (800e748 <sEE_ReadBuffer+0x2a0>)
 800e6b6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800e6ba:	601a      	str	r2, [r3, #0]
    while(sEE_I2C->CR1 & I2C_CR1_STOP)
 800e6bc:	e00a      	b.n	800e6d4 <sEE_ReadBuffer+0x22c>
    {
      if((sEETimeout--) == 0) return sEE_TIMEOUT_UserCallback();
 800e6be:	4b22      	ldr	r3, [pc, #136]	; (800e748 <sEE_ReadBuffer+0x2a0>)
 800e6c0:	681b      	ldr	r3, [r3, #0]
 800e6c2:	1e5a      	subs	r2, r3, #1
 800e6c4:	4920      	ldr	r1, [pc, #128]	; (800e748 <sEE_ReadBuffer+0x2a0>)
 800e6c6:	600a      	str	r2, [r1, #0]
 800e6c8:	2b00      	cmp	r3, #0
 800e6ca:	d103      	bne.n	800e6d4 <sEE_ReadBuffer+0x22c>
 800e6cc:	f000 fb8e 	bl	800edec <sEE_TIMEOUT_UserCallback>
 800e6d0:	4603      	mov	r3, r0
 800e6d2:	e032      	b.n	800e73a <sEE_ReadBuffer+0x292>
    while(sEE_I2C->CR1 & I2C_CR1_STOP)
 800e6d4:	4b1d      	ldr	r3, [pc, #116]	; (800e74c <sEE_ReadBuffer+0x2a4>)
 800e6d6:	881b      	ldrh	r3, [r3, #0]
 800e6d8:	b29b      	uxth	r3, r3
 800e6da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e6de:	2b00      	cmp	r3, #0
 800e6e0:	d1ed      	bne.n	800e6be <sEE_ReadBuffer+0x216>
    }  
    
    /*!< Re-Enable Acknowledgement to be ready for another reception */
    I2C_AcknowledgeConfig(sEE_I2C, ENABLE);    
 800e6e2:	2101      	movs	r1, #1
 800e6e4:	4819      	ldr	r0, [pc, #100]	; (800e74c <sEE_ReadBuffer+0x2a4>)
 800e6e6:	f7f8 fafa 	bl	8006cde <I2C_AcknowledgeConfig>
 800e6ea:	e025      	b.n	800e738 <sEE_ReadBuffer+0x290>
  }
  else/* More than one Byte Master Reception procedure (DMA) -----------------*/
  {
    /*!< Test on EV6 and clear it */
    sEETimeout = sEE_FLAG_TIMEOUT;
 800e6ec:	4b16      	ldr	r3, [pc, #88]	; (800e748 <sEE_ReadBuffer+0x2a0>)
 800e6ee:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800e6f2:	601a      	str	r2, [r3, #0]
    while(!I2C_CheckEvent(sEE_I2C, I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED))
 800e6f4:	e00a      	b.n	800e70c <sEE_ReadBuffer+0x264>
    {
      if((sEETimeout--) == 0) return sEE_TIMEOUT_UserCallback();
 800e6f6:	4b14      	ldr	r3, [pc, #80]	; (800e748 <sEE_ReadBuffer+0x2a0>)
 800e6f8:	681b      	ldr	r3, [r3, #0]
 800e6fa:	1e5a      	subs	r2, r3, #1
 800e6fc:	4912      	ldr	r1, [pc, #72]	; (800e748 <sEE_ReadBuffer+0x2a0>)
 800e6fe:	600a      	str	r2, [r1, #0]
 800e700:	2b00      	cmp	r3, #0
 800e702:	d103      	bne.n	800e70c <sEE_ReadBuffer+0x264>
 800e704:	f000 fb72 	bl	800edec <sEE_TIMEOUT_UserCallback>
 800e708:	4603      	mov	r3, r0
 800e70a:	e016      	b.n	800e73a <sEE_ReadBuffer+0x292>
    while(!I2C_CheckEvent(sEE_I2C, I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED))
 800e70c:	4917      	ldr	r1, [pc, #92]	; (800e76c <sEE_ReadBuffer+0x2c4>)
 800e70e:	480f      	ldr	r0, [pc, #60]	; (800e74c <sEE_ReadBuffer+0x2a4>)
 800e710:	f7f8 fd36 	bl	8007180 <I2C_CheckEvent>
 800e714:	4603      	mov	r3, r0
 800e716:	2b00      	cmp	r3, #0
 800e718:	d0ed      	beq.n	800e6f6 <sEE_ReadBuffer+0x24e>
    }  
    
    /* Configure the DMA Rx Channel with the buffer address and the buffer size */
    sEE_LowLevel_DMAConfig((uint32_t)pBuffer, (uint16_t)(*NumByteToRead), sEE_DIRECTION_RX);
 800e71a:	68f8      	ldr	r0, [r7, #12]
 800e71c:	687b      	ldr	r3, [r7, #4]
 800e71e:	881b      	ldrh	r3, [r3, #0]
 800e720:	2201      	movs	r2, #1
 800e722:	4619      	mov	r1, r3
 800e724:	f7ff fe56 	bl	800e3d4 <sEE_LowLevel_DMAConfig>
    
    /* Inform the DMA that the next End Of Transfer Signal will be the last one */
    I2C_DMALastTransferCmd(sEE_I2C, ENABLE); 
 800e728:	2101      	movs	r1, #1
 800e72a:	4808      	ldr	r0, [pc, #32]	; (800e74c <sEE_ReadBuffer+0x2a4>)
 800e72c:	f7f8 fccd 	bl	80070ca <I2C_DMALastTransferCmd>
    
    /* Enable the DMA Rx Stream */
    DMA_Cmd(sEE_I2C_DMA_STREAM_RX, ENABLE);    
 800e730:	2101      	movs	r1, #1
 800e732:	480f      	ldr	r0, [pc, #60]	; (800e770 <sEE_ReadBuffer+0x2c8>)
 800e734:	f7f5 fba3 	bl	8003e7e <DMA_Cmd>
  }
  
  /* If all operations OK, return sEE_OK (0) */
  return sEE_OK;
 800e738:	2300      	movs	r3, #0
}
 800e73a:	4618      	mov	r0, r3
 800e73c:	3710      	adds	r7, #16
 800e73e:	46bd      	mov	sp, r7
 800e740:	bd80      	pop	{r7, pc}
 800e742:	bf00      	nop
 800e744:	20002e0c 	.word	0x20002e0c
 800e748:	200000a0 	.word	0x200000a0
 800e74c:	40005c00 	.word	0x40005c00
 800e750:	00030001 	.word	0x00030001
 800e754:	20002e08 	.word	0x20002e08
 800e758:	00070082 	.word	0x00070082
 800e75c:	00070080 	.word	0x00070080
 800e760:	10000004 	.word	0x10000004
 800e764:	10000002 	.word	0x10000002
 800e768:	10000040 	.word	0x10000040
 800e76c:	00030002 	.word	0x00030002
 800e770:	40026040 	.word	0x40026040

0800e774 <sEE_WritePage>:
  * 
  * @retval sEE_OK (0) if operation is correctly performed, else return value 
  *         different from sEE_OK (0) or the timeout user callback.
  */
uint32_t sEE_WritePage(uint8_t* pBuffer, uint16_t WriteAddr, uint8_t* NumByteToWrite)
{ 
 800e774:	b580      	push	{r7, lr}
 800e776:	b084      	sub	sp, #16
 800e778:	af00      	add	r7, sp, #0
 800e77a:	60f8      	str	r0, [r7, #12]
 800e77c:	460b      	mov	r3, r1
 800e77e:	607a      	str	r2, [r7, #4]
 800e780:	817b      	strh	r3, [r7, #10]
  /* Set the pointer to the Number of data to be written. This pointer will be used 
      by the DMA Transfer Completer interrupt Handler in order to reset the 
      variable to 0. User should check on this variable in order to know if the 
      DMA transfer has been complete or not. */
  sEEDataWritePointer = NumByteToWrite;  
 800e782:	4a53      	ldr	r2, [pc, #332]	; (800e8d0 <sEE_WritePage+0x15c>)
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	6013      	str	r3, [r2, #0]
  
  /*!< While the bus is busy */
  sEETimeout = sEE_LONG_TIMEOUT;
 800e788:	4b52      	ldr	r3, [pc, #328]	; (800e8d4 <sEE_WritePage+0x160>)
 800e78a:	f44f 4220 	mov.w	r2, #40960	; 0xa000
 800e78e:	601a      	str	r2, [r3, #0]
  while(I2C_GetFlagStatus(sEE_I2C, I2C_FLAG_BUSY))
 800e790:	e00a      	b.n	800e7a8 <sEE_WritePage+0x34>
  {
    if((sEETimeout--) == 0) return sEE_TIMEOUT_UserCallback();
 800e792:	4b50      	ldr	r3, [pc, #320]	; (800e8d4 <sEE_WritePage+0x160>)
 800e794:	681b      	ldr	r3, [r3, #0]
 800e796:	1e5a      	subs	r2, r3, #1
 800e798:	494e      	ldr	r1, [pc, #312]	; (800e8d4 <sEE_WritePage+0x160>)
 800e79a:	600a      	str	r2, [r1, #0]
 800e79c:	2b00      	cmp	r3, #0
 800e79e:	d103      	bne.n	800e7a8 <sEE_WritePage+0x34>
 800e7a0:	f000 fb24 	bl	800edec <sEE_TIMEOUT_UserCallback>
 800e7a4:	4603      	mov	r3, r0
 800e7a6:	e08e      	b.n	800e8c6 <sEE_WritePage+0x152>
  while(I2C_GetFlagStatus(sEE_I2C, I2C_FLAG_BUSY))
 800e7a8:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 800e7ac:	484a      	ldr	r0, [pc, #296]	; (800e8d8 <sEE_WritePage+0x164>)
 800e7ae:	f7f8 fd39 	bl	8007224 <I2C_GetFlagStatus>
 800e7b2:	4603      	mov	r3, r0
 800e7b4:	2b00      	cmp	r3, #0
 800e7b6:	d1ec      	bne.n	800e792 <sEE_WritePage+0x1e>
  }
  
  /*!< Send START condition */
  I2C_GenerateSTART(sEE_I2C, ENABLE);
 800e7b8:	2101      	movs	r1, #1
 800e7ba:	4847      	ldr	r0, [pc, #284]	; (800e8d8 <sEE_WritePage+0x164>)
 800e7bc:	f7f8 fa31 	bl	8006c22 <I2C_GenerateSTART>
  
  /*!< Test on EV5 and clear it */
  sEETimeout = sEE_FLAG_TIMEOUT;
 800e7c0:	4b44      	ldr	r3, [pc, #272]	; (800e8d4 <sEE_WritePage+0x160>)
 800e7c2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800e7c6:	601a      	str	r2, [r3, #0]
  while(!I2C_CheckEvent(sEE_I2C, I2C_EVENT_MASTER_MODE_SELECT))
 800e7c8:	e00a      	b.n	800e7e0 <sEE_WritePage+0x6c>
  {
    if((sEETimeout--) == 0) return sEE_TIMEOUT_UserCallback();
 800e7ca:	4b42      	ldr	r3, [pc, #264]	; (800e8d4 <sEE_WritePage+0x160>)
 800e7cc:	681b      	ldr	r3, [r3, #0]
 800e7ce:	1e5a      	subs	r2, r3, #1
 800e7d0:	4940      	ldr	r1, [pc, #256]	; (800e8d4 <sEE_WritePage+0x160>)
 800e7d2:	600a      	str	r2, [r1, #0]
 800e7d4:	2b00      	cmp	r3, #0
 800e7d6:	d103      	bne.n	800e7e0 <sEE_WritePage+0x6c>
 800e7d8:	f000 fb08 	bl	800edec <sEE_TIMEOUT_UserCallback>
 800e7dc:	4603      	mov	r3, r0
 800e7de:	e072      	b.n	800e8c6 <sEE_WritePage+0x152>
  while(!I2C_CheckEvent(sEE_I2C, I2C_EVENT_MASTER_MODE_SELECT))
 800e7e0:	493e      	ldr	r1, [pc, #248]	; (800e8dc <sEE_WritePage+0x168>)
 800e7e2:	483d      	ldr	r0, [pc, #244]	; (800e8d8 <sEE_WritePage+0x164>)
 800e7e4:	f7f8 fccc 	bl	8007180 <I2C_CheckEvent>
 800e7e8:	4603      	mov	r3, r0
 800e7ea:	2b00      	cmp	r3, #0
 800e7ec:	d0ed      	beq.n	800e7ca <sEE_WritePage+0x56>
  }
  
  /*!< Send EEPROM address for write */
  sEETimeout = sEE_FLAG_TIMEOUT;
 800e7ee:	4b39      	ldr	r3, [pc, #228]	; (800e8d4 <sEE_WritePage+0x160>)
 800e7f0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800e7f4:	601a      	str	r2, [r3, #0]
  I2C_Send7bitAddress(sEE_I2C, sEEAddress, I2C_Direction_Transmitter);
 800e7f6:	4b3a      	ldr	r3, [pc, #232]	; (800e8e0 <sEE_WritePage+0x16c>)
 800e7f8:	881b      	ldrh	r3, [r3, #0]
 800e7fa:	b29b      	uxth	r3, r3
 800e7fc:	b2db      	uxtb	r3, r3
 800e7fe:	2200      	movs	r2, #0
 800e800:	4619      	mov	r1, r3
 800e802:	4835      	ldr	r0, [pc, #212]	; (800e8d8 <sEE_WritePage+0x164>)
 800e804:	f7f8 fa4d 	bl	8006ca2 <I2C_Send7bitAddress>

  /*!< Test on EV6 and clear it */
  sEETimeout = sEE_FLAG_TIMEOUT;
 800e808:	4b32      	ldr	r3, [pc, #200]	; (800e8d4 <sEE_WritePage+0x160>)
 800e80a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800e80e:	601a      	str	r2, [r3, #0]
  while(!I2C_CheckEvent(sEE_I2C, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED))
 800e810:	e00a      	b.n	800e828 <sEE_WritePage+0xb4>
  {
    if((sEETimeout--) == 0) return sEE_TIMEOUT_UserCallback();
 800e812:	4b30      	ldr	r3, [pc, #192]	; (800e8d4 <sEE_WritePage+0x160>)
 800e814:	681b      	ldr	r3, [r3, #0]
 800e816:	1e5a      	subs	r2, r3, #1
 800e818:	492e      	ldr	r1, [pc, #184]	; (800e8d4 <sEE_WritePage+0x160>)
 800e81a:	600a      	str	r2, [r1, #0]
 800e81c:	2b00      	cmp	r3, #0
 800e81e:	d103      	bne.n	800e828 <sEE_WritePage+0xb4>
 800e820:	f000 fae4 	bl	800edec <sEE_TIMEOUT_UserCallback>
 800e824:	4603      	mov	r3, r0
 800e826:	e04e      	b.n	800e8c6 <sEE_WritePage+0x152>
  while(!I2C_CheckEvent(sEE_I2C, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED))
 800e828:	492e      	ldr	r1, [pc, #184]	; (800e8e4 <sEE_WritePage+0x170>)
 800e82a:	482b      	ldr	r0, [pc, #172]	; (800e8d8 <sEE_WritePage+0x164>)
 800e82c:	f7f8 fca8 	bl	8007180 <I2C_CheckEvent>
 800e830:	4603      	mov	r3, r0
 800e832:	2b00      	cmp	r3, #0
 800e834:	d0ed      	beq.n	800e812 <sEE_WritePage+0x9e>
  }
  
  /*!< Send the EEPROM's internal address to write to : MSB of the address first */
  I2C_SendData(sEE_I2C, (uint8_t)((WriteAddr & 0xFF00) >> 8));
 800e836:	897b      	ldrh	r3, [r7, #10]
 800e838:	0a1b      	lsrs	r3, r3, #8
 800e83a:	b29b      	uxth	r3, r3
 800e83c:	b2db      	uxtb	r3, r3
 800e83e:	4619      	mov	r1, r3
 800e840:	4825      	ldr	r0, [pc, #148]	; (800e8d8 <sEE_WritePage+0x164>)
 800e842:	f7f8 fb93 	bl	8006f6c <I2C_SendData>

  /*!< Test on EV8 and clear it */
  sEETimeout = sEE_FLAG_TIMEOUT;  
 800e846:	4b23      	ldr	r3, [pc, #140]	; (800e8d4 <sEE_WritePage+0x160>)
 800e848:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800e84c:	601a      	str	r2, [r3, #0]
  while(!I2C_CheckEvent(sEE_I2C, I2C_EVENT_MASTER_BYTE_TRANSMITTING))
 800e84e:	e00a      	b.n	800e866 <sEE_WritePage+0xf2>
  {
    if((sEETimeout--) == 0) return sEE_TIMEOUT_UserCallback();
 800e850:	4b20      	ldr	r3, [pc, #128]	; (800e8d4 <sEE_WritePage+0x160>)
 800e852:	681b      	ldr	r3, [r3, #0]
 800e854:	1e5a      	subs	r2, r3, #1
 800e856:	491f      	ldr	r1, [pc, #124]	; (800e8d4 <sEE_WritePage+0x160>)
 800e858:	600a      	str	r2, [r1, #0]
 800e85a:	2b00      	cmp	r3, #0
 800e85c:	d103      	bne.n	800e866 <sEE_WritePage+0xf2>
 800e85e:	f000 fac5 	bl	800edec <sEE_TIMEOUT_UserCallback>
 800e862:	4603      	mov	r3, r0
 800e864:	e02f      	b.n	800e8c6 <sEE_WritePage+0x152>
  while(!I2C_CheckEvent(sEE_I2C, I2C_EVENT_MASTER_BYTE_TRANSMITTING))
 800e866:	4920      	ldr	r1, [pc, #128]	; (800e8e8 <sEE_WritePage+0x174>)
 800e868:	481b      	ldr	r0, [pc, #108]	; (800e8d8 <sEE_WritePage+0x164>)
 800e86a:	f7f8 fc89 	bl	8007180 <I2C_CheckEvent>
 800e86e:	4603      	mov	r3, r0
 800e870:	2b00      	cmp	r3, #0
 800e872:	d0ed      	beq.n	800e850 <sEE_WritePage+0xdc>
  }  
  
  /*!< Send the EEPROM's internal address to write to : LSB of the address */
  I2C_SendData(sEE_I2C, (uint8_t)(WriteAddr & 0x00FF));
 800e874:	897b      	ldrh	r3, [r7, #10]
 800e876:	b2db      	uxtb	r3, r3
 800e878:	4619      	mov	r1, r3
 800e87a:	4817      	ldr	r0, [pc, #92]	; (800e8d8 <sEE_WritePage+0x164>)
 800e87c:	f7f8 fb76 	bl	8006f6c <I2C_SendData>
  
  /*!< Test on EV8 and clear it */
  sEETimeout = sEE_FLAG_TIMEOUT; 
 800e880:	4b14      	ldr	r3, [pc, #80]	; (800e8d4 <sEE_WritePage+0x160>)
 800e882:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800e886:	601a      	str	r2, [r3, #0]
  while(!I2C_CheckEvent(sEE_I2C, I2C_EVENT_MASTER_BYTE_TRANSMITTING))
 800e888:	e00a      	b.n	800e8a0 <sEE_WritePage+0x12c>
  {
    if((sEETimeout--) == 0) return sEE_TIMEOUT_UserCallback();
 800e88a:	4b12      	ldr	r3, [pc, #72]	; (800e8d4 <sEE_WritePage+0x160>)
 800e88c:	681b      	ldr	r3, [r3, #0]
 800e88e:	1e5a      	subs	r2, r3, #1
 800e890:	4910      	ldr	r1, [pc, #64]	; (800e8d4 <sEE_WritePage+0x160>)
 800e892:	600a      	str	r2, [r1, #0]
 800e894:	2b00      	cmp	r3, #0
 800e896:	d103      	bne.n	800e8a0 <sEE_WritePage+0x12c>
 800e898:	f000 faa8 	bl	800edec <sEE_TIMEOUT_UserCallback>
 800e89c:	4603      	mov	r3, r0
 800e89e:	e012      	b.n	800e8c6 <sEE_WritePage+0x152>
  while(!I2C_CheckEvent(sEE_I2C, I2C_EVENT_MASTER_BYTE_TRANSMITTING))
 800e8a0:	4911      	ldr	r1, [pc, #68]	; (800e8e8 <sEE_WritePage+0x174>)
 800e8a2:	480d      	ldr	r0, [pc, #52]	; (800e8d8 <sEE_WritePage+0x164>)
 800e8a4:	f7f8 fc6c 	bl	8007180 <I2C_CheckEvent>
 800e8a8:	4603      	mov	r3, r0
 800e8aa:	2b00      	cmp	r3, #0
 800e8ac:	d0ed      	beq.n	800e88a <sEE_WritePage+0x116>
  }  
  
  /* Configure the DMA Tx Channel with the buffer address and the buffer size */
  sEE_LowLevel_DMAConfig((uint32_t)pBuffer, (uint8_t)(*NumByteToWrite), sEE_DIRECTION_TX);
 800e8ae:	68f8      	ldr	r0, [r7, #12]
 800e8b0:	687b      	ldr	r3, [r7, #4]
 800e8b2:	781b      	ldrb	r3, [r3, #0]
 800e8b4:	2200      	movs	r2, #0
 800e8b6:	4619      	mov	r1, r3
 800e8b8:	f7ff fd8c 	bl	800e3d4 <sEE_LowLevel_DMAConfig>
  
  /* Enable the DMA Tx Stream */
  DMA_Cmd(sEE_I2C_DMA_STREAM_TX, ENABLE);
 800e8bc:	2101      	movs	r1, #1
 800e8be:	480b      	ldr	r0, [pc, #44]	; (800e8ec <sEE_WritePage+0x178>)
 800e8c0:	f7f5 fadd 	bl	8003e7e <DMA_Cmd>
  
  /* If all operations OK, return sEE_OK (0) */
  return sEE_OK;
 800e8c4:	2300      	movs	r3, #0
}
 800e8c6:	4618      	mov	r0, r3
 800e8c8:	3710      	adds	r7, #16
 800e8ca:	46bd      	mov	sp, r7
 800e8cc:	bd80      	pop	{r7, pc}
 800e8ce:	bf00      	nop
 800e8d0:	20002e10 	.word	0x20002e10
 800e8d4:	200000a0 	.word	0x200000a0
 800e8d8:	40005c00 	.word	0x40005c00
 800e8dc:	00030001 	.word	0x00030001
 800e8e0:	20002e08 	.word	0x20002e08
 800e8e4:	00070082 	.word	0x00070082
 800e8e8:	00070080 	.word	0x00070080
 800e8ec:	40026070 	.word	0x40026070

0800e8f0 <sEE_WriteBuffer>:
  * @param  WriteAddr : EEPROM's internal address to write to.
  * @param  NumByteToWrite : number of bytes to write to the EEPROM.
  * @retval None
  */
void sEE_WriteBuffer(uint8_t* pBuffer, uint16_t WriteAddr, uint16_t NumByteToWrite)
{
 800e8f0:	b580      	push	{r7, lr}
 800e8f2:	b084      	sub	sp, #16
 800e8f4:	af00      	add	r7, sp, #0
 800e8f6:	6078      	str	r0, [r7, #4]
 800e8f8:	460b      	mov	r3, r1
 800e8fa:	807b      	strh	r3, [r7, #2]
 800e8fc:	4613      	mov	r3, r2
 800e8fe:	803b      	strh	r3, [r7, #0]
  uint16_t NumOfPage = 0, NumOfSingle = 0, count = 0;
 800e900:	2300      	movs	r3, #0
 800e902:	81fb      	strh	r3, [r7, #14]
 800e904:	2300      	movs	r3, #0
 800e906:	81bb      	strh	r3, [r7, #12]
 800e908:	2300      	movs	r3, #0
 800e90a:	817b      	strh	r3, [r7, #10]
  uint16_t Addr = 0;
 800e90c:	2300      	movs	r3, #0
 800e90e:	813b      	strh	r3, [r7, #8]

  Addr = WriteAddr % sEE_PAGESIZE;
 800e910:	887b      	ldrh	r3, [r7, #2]
 800e912:	f003 0303 	and.w	r3, r3, #3
 800e916:	813b      	strh	r3, [r7, #8]
  count = sEE_PAGESIZE - Addr;
 800e918:	893b      	ldrh	r3, [r7, #8]
 800e91a:	f1c3 0304 	rsb	r3, r3, #4
 800e91e:	817b      	strh	r3, [r7, #10]
  NumOfPage =  NumByteToWrite / sEE_PAGESIZE;
 800e920:	883b      	ldrh	r3, [r7, #0]
 800e922:	089b      	lsrs	r3, r3, #2
 800e924:	81fb      	strh	r3, [r7, #14]
  NumOfSingle = NumByteToWrite % sEE_PAGESIZE;
 800e926:	883b      	ldrh	r3, [r7, #0]
 800e928:	f003 0303 	and.w	r3, r3, #3
 800e92c:	81bb      	strh	r3, [r7, #12]
 
  /*!< If WriteAddr is sEE_PAGESIZE aligned  */
  if(Addr == 0) 
 800e92e:	893b      	ldrh	r3, [r7, #8]
 800e930:	2b00      	cmp	r3, #0
 800e932:	d172      	bne.n	800ea1a <sEE_WriteBuffer+0x12a>
  {
    /*!< If NumByteToWrite < sEE_PAGESIZE */
    if(NumOfPage == 0) 
 800e934:	89fb      	ldrh	r3, [r7, #14]
 800e936:	2b00      	cmp	r3, #0
 800e938:	d145      	bne.n	800e9c6 <sEE_WriteBuffer+0xd6>
    {
      /* Store the number of data to be written */
      sEEDataNum = NumOfSingle;
 800e93a:	89bb      	ldrh	r3, [r7, #12]
 800e93c:	b2da      	uxtb	r2, r3
 800e93e:	4b97      	ldr	r3, [pc, #604]	; (800eb9c <sEE_WriteBuffer+0x2ac>)
 800e940:	701a      	strb	r2, [r3, #0]
      /* Start writing data */
      sEE_WritePage(pBuffer, WriteAddr, (uint8_t*)(&sEEDataNum));
 800e942:	887b      	ldrh	r3, [r7, #2]
 800e944:	4a95      	ldr	r2, [pc, #596]	; (800eb9c <sEE_WriteBuffer+0x2ac>)
 800e946:	4619      	mov	r1, r3
 800e948:	6878      	ldr	r0, [r7, #4]
 800e94a:	f7ff ff13 	bl	800e774 <sEE_WritePage>
      /* Wait transfer through DMA to be complete */
      sEETimeout = sEE_LONG_TIMEOUT;
 800e94e:	4b94      	ldr	r3, [pc, #592]	; (800eba0 <sEE_WriteBuffer+0x2b0>)
 800e950:	f44f 4220 	mov.w	r2, #40960	; 0xa000
 800e954:	601a      	str	r2, [r3, #0]
      while (sEEDataNum > 0)
 800e956:	e009      	b.n	800e96c <sEE_WriteBuffer+0x7c>
      {
        if((sEETimeout--) == 0) {sEE_TIMEOUT_UserCallback(); return;};
 800e958:	4b91      	ldr	r3, [pc, #580]	; (800eba0 <sEE_WriteBuffer+0x2b0>)
 800e95a:	681b      	ldr	r3, [r3, #0]
 800e95c:	1e5a      	subs	r2, r3, #1
 800e95e:	4990      	ldr	r1, [pc, #576]	; (800eba0 <sEE_WriteBuffer+0x2b0>)
 800e960:	600a      	str	r2, [r1, #0]
 800e962:	2b00      	cmp	r3, #0
 800e964:	d102      	bne.n	800e96c <sEE_WriteBuffer+0x7c>
 800e966:	f000 fa41 	bl	800edec <sEE_TIMEOUT_UserCallback>
 800e96a:	e150      	b.n	800ec0e <sEE_WriteBuffer+0x31e>
      while (sEEDataNum > 0)
 800e96c:	4b8b      	ldr	r3, [pc, #556]	; (800eb9c <sEE_WriteBuffer+0x2ac>)
 800e96e:	781b      	ldrb	r3, [r3, #0]
 800e970:	b2db      	uxtb	r3, r3
 800e972:	2b00      	cmp	r3, #0
 800e974:	d1f0      	bne.n	800e958 <sEE_WriteBuffer+0x68>
      }
      sEE_WaitEepromStandbyState();
 800e976:	f000 f951 	bl	800ec1c <sEE_WaitEepromStandbyState>
 800e97a:	e148      	b.n	800ec0e <sEE_WriteBuffer+0x31e>
    else  
    {
      while(NumOfPage--)
      {
        /* Store the number of data to be written */
        sEEDataNum = sEE_PAGESIZE;        
 800e97c:	4b87      	ldr	r3, [pc, #540]	; (800eb9c <sEE_WriteBuffer+0x2ac>)
 800e97e:	2204      	movs	r2, #4
 800e980:	701a      	strb	r2, [r3, #0]
        sEE_WritePage(pBuffer, WriteAddr, (uint8_t*)(&sEEDataNum)); 
 800e982:	887b      	ldrh	r3, [r7, #2]
 800e984:	4a85      	ldr	r2, [pc, #532]	; (800eb9c <sEE_WriteBuffer+0x2ac>)
 800e986:	4619      	mov	r1, r3
 800e988:	6878      	ldr	r0, [r7, #4]
 800e98a:	f7ff fef3 	bl	800e774 <sEE_WritePage>
        /* Wait transfer through DMA to be complete */
        sEETimeout = sEE_LONG_TIMEOUT;
 800e98e:	4b84      	ldr	r3, [pc, #528]	; (800eba0 <sEE_WriteBuffer+0x2b0>)
 800e990:	f44f 4220 	mov.w	r2, #40960	; 0xa000
 800e994:	601a      	str	r2, [r3, #0]
        while (sEEDataNum > 0)
 800e996:	e009      	b.n	800e9ac <sEE_WriteBuffer+0xbc>
        {
          if((sEETimeout--) == 0) {sEE_TIMEOUT_UserCallback(); return;};
 800e998:	4b81      	ldr	r3, [pc, #516]	; (800eba0 <sEE_WriteBuffer+0x2b0>)
 800e99a:	681b      	ldr	r3, [r3, #0]
 800e99c:	1e5a      	subs	r2, r3, #1
 800e99e:	4980      	ldr	r1, [pc, #512]	; (800eba0 <sEE_WriteBuffer+0x2b0>)
 800e9a0:	600a      	str	r2, [r1, #0]
 800e9a2:	2b00      	cmp	r3, #0
 800e9a4:	d102      	bne.n	800e9ac <sEE_WriteBuffer+0xbc>
 800e9a6:	f000 fa21 	bl	800edec <sEE_TIMEOUT_UserCallback>
 800e9aa:	e130      	b.n	800ec0e <sEE_WriteBuffer+0x31e>
        while (sEEDataNum > 0)
 800e9ac:	4b7b      	ldr	r3, [pc, #492]	; (800eb9c <sEE_WriteBuffer+0x2ac>)
 800e9ae:	781b      	ldrb	r3, [r3, #0]
 800e9b0:	b2db      	uxtb	r3, r3
 800e9b2:	2b00      	cmp	r3, #0
 800e9b4:	d1f0      	bne.n	800e998 <sEE_WriteBuffer+0xa8>
        }      
        sEE_WaitEepromStandbyState();
 800e9b6:	f000 f931 	bl	800ec1c <sEE_WaitEepromStandbyState>
        WriteAddr +=  sEE_PAGESIZE;
 800e9ba:	887b      	ldrh	r3, [r7, #2]
 800e9bc:	3304      	adds	r3, #4
 800e9be:	807b      	strh	r3, [r7, #2]
        pBuffer += sEE_PAGESIZE;
 800e9c0:	687b      	ldr	r3, [r7, #4]
 800e9c2:	3304      	adds	r3, #4
 800e9c4:	607b      	str	r3, [r7, #4]
      while(NumOfPage--)
 800e9c6:	89fb      	ldrh	r3, [r7, #14]
 800e9c8:	1e5a      	subs	r2, r3, #1
 800e9ca:	81fa      	strh	r2, [r7, #14]
 800e9cc:	2b00      	cmp	r3, #0
 800e9ce:	d1d5      	bne.n	800e97c <sEE_WriteBuffer+0x8c>
      }

      if(NumOfSingle!=0)
 800e9d0:	89bb      	ldrh	r3, [r7, #12]
 800e9d2:	2b00      	cmp	r3, #0
 800e9d4:	f000 811b 	beq.w	800ec0e <sEE_WriteBuffer+0x31e>
      {
        /* Store the number of data to be written */
        sEEDataNum = NumOfSingle;          
 800e9d8:	89bb      	ldrh	r3, [r7, #12]
 800e9da:	b2da      	uxtb	r2, r3
 800e9dc:	4b6f      	ldr	r3, [pc, #444]	; (800eb9c <sEE_WriteBuffer+0x2ac>)
 800e9de:	701a      	strb	r2, [r3, #0]
        sEE_WritePage(pBuffer, WriteAddr, (uint8_t*)(&sEEDataNum));
 800e9e0:	887b      	ldrh	r3, [r7, #2]
 800e9e2:	4a6e      	ldr	r2, [pc, #440]	; (800eb9c <sEE_WriteBuffer+0x2ac>)
 800e9e4:	4619      	mov	r1, r3
 800e9e6:	6878      	ldr	r0, [r7, #4]
 800e9e8:	f7ff fec4 	bl	800e774 <sEE_WritePage>
        /* Wait transfer through DMA to be complete */
        sEETimeout = sEE_LONG_TIMEOUT;
 800e9ec:	4b6c      	ldr	r3, [pc, #432]	; (800eba0 <sEE_WriteBuffer+0x2b0>)
 800e9ee:	f44f 4220 	mov.w	r2, #40960	; 0xa000
 800e9f2:	601a      	str	r2, [r3, #0]
        while (sEEDataNum > 0)
 800e9f4:	e009      	b.n	800ea0a <sEE_WriteBuffer+0x11a>
        {
          if((sEETimeout--) == 0) {sEE_TIMEOUT_UserCallback(); return;};
 800e9f6:	4b6a      	ldr	r3, [pc, #424]	; (800eba0 <sEE_WriteBuffer+0x2b0>)
 800e9f8:	681b      	ldr	r3, [r3, #0]
 800e9fa:	1e5a      	subs	r2, r3, #1
 800e9fc:	4968      	ldr	r1, [pc, #416]	; (800eba0 <sEE_WriteBuffer+0x2b0>)
 800e9fe:	600a      	str	r2, [r1, #0]
 800ea00:	2b00      	cmp	r3, #0
 800ea02:	d102      	bne.n	800ea0a <sEE_WriteBuffer+0x11a>
 800ea04:	f000 f9f2 	bl	800edec <sEE_TIMEOUT_UserCallback>
 800ea08:	e101      	b.n	800ec0e <sEE_WriteBuffer+0x31e>
        while (sEEDataNum > 0)
 800ea0a:	4b64      	ldr	r3, [pc, #400]	; (800eb9c <sEE_WriteBuffer+0x2ac>)
 800ea0c:	781b      	ldrb	r3, [r3, #0]
 800ea0e:	b2db      	uxtb	r3, r3
 800ea10:	2b00      	cmp	r3, #0
 800ea12:	d1f0      	bne.n	800e9f6 <sEE_WriteBuffer+0x106>
        }    
        sEE_WaitEepromStandbyState();
 800ea14:	f000 f902 	bl	800ec1c <sEE_WaitEepromStandbyState>
 800ea18:	e0f9      	b.n	800ec0e <sEE_WriteBuffer+0x31e>
  }
  /*!< If WriteAddr is not sEE_PAGESIZE aligned  */
  else 
  {
    /*!< If NumByteToWrite < sEE_PAGESIZE */
    if(NumOfPage== 0) 
 800ea1a:	89fb      	ldrh	r3, [r7, #14]
 800ea1c:	2b00      	cmp	r3, #0
 800ea1e:	d16e      	bne.n	800eafe <sEE_WriteBuffer+0x20e>
    {
      /*!< If the number of data to be written is more than the remaining space 
      in the current page: */
      if (NumByteToWrite > count)
 800ea20:	883a      	ldrh	r2, [r7, #0]
 800ea22:	897b      	ldrh	r3, [r7, #10]
 800ea24:	429a      	cmp	r2, r3
 800ea26:	d949      	bls.n	800eabc <sEE_WriteBuffer+0x1cc>
      {
        /* Store the number of data to be written */
        sEEDataNum = count;        
 800ea28:	897b      	ldrh	r3, [r7, #10]
 800ea2a:	b2da      	uxtb	r2, r3
 800ea2c:	4b5b      	ldr	r3, [pc, #364]	; (800eb9c <sEE_WriteBuffer+0x2ac>)
 800ea2e:	701a      	strb	r2, [r3, #0]
        /*!< Write the data contained in same page */
        sEE_WritePage(pBuffer, WriteAddr, (uint8_t*)(&sEEDataNum));
 800ea30:	887b      	ldrh	r3, [r7, #2]
 800ea32:	4a5a      	ldr	r2, [pc, #360]	; (800eb9c <sEE_WriteBuffer+0x2ac>)
 800ea34:	4619      	mov	r1, r3
 800ea36:	6878      	ldr	r0, [r7, #4]
 800ea38:	f7ff fe9c 	bl	800e774 <sEE_WritePage>
        /* Wait transfer through DMA to be complete */
        sEETimeout = sEE_LONG_TIMEOUT;
 800ea3c:	4b58      	ldr	r3, [pc, #352]	; (800eba0 <sEE_WriteBuffer+0x2b0>)
 800ea3e:	f44f 4220 	mov.w	r2, #40960	; 0xa000
 800ea42:	601a      	str	r2, [r3, #0]
        while (sEEDataNum > 0)
 800ea44:	e009      	b.n	800ea5a <sEE_WriteBuffer+0x16a>
        {
          if((sEETimeout--) == 0) {sEE_TIMEOUT_UserCallback(); return;};
 800ea46:	4b56      	ldr	r3, [pc, #344]	; (800eba0 <sEE_WriteBuffer+0x2b0>)
 800ea48:	681b      	ldr	r3, [r3, #0]
 800ea4a:	1e5a      	subs	r2, r3, #1
 800ea4c:	4954      	ldr	r1, [pc, #336]	; (800eba0 <sEE_WriteBuffer+0x2b0>)
 800ea4e:	600a      	str	r2, [r1, #0]
 800ea50:	2b00      	cmp	r3, #0
 800ea52:	d102      	bne.n	800ea5a <sEE_WriteBuffer+0x16a>
 800ea54:	f000 f9ca 	bl	800edec <sEE_TIMEOUT_UserCallback>
 800ea58:	e0d9      	b.n	800ec0e <sEE_WriteBuffer+0x31e>
        while (sEEDataNum > 0)
 800ea5a:	4b50      	ldr	r3, [pc, #320]	; (800eb9c <sEE_WriteBuffer+0x2ac>)
 800ea5c:	781b      	ldrb	r3, [r3, #0]
 800ea5e:	b2db      	uxtb	r3, r3
 800ea60:	2b00      	cmp	r3, #0
 800ea62:	d1f0      	bne.n	800ea46 <sEE_WriteBuffer+0x156>
        }          
        sEE_WaitEepromStandbyState();      
 800ea64:	f000 f8da 	bl	800ec1c <sEE_WaitEepromStandbyState>
        
        /* Store the number of data to be written */
        sEEDataNum = (NumByteToWrite - count);          
 800ea68:	883b      	ldrh	r3, [r7, #0]
 800ea6a:	b2da      	uxtb	r2, r3
 800ea6c:	897b      	ldrh	r3, [r7, #10]
 800ea6e:	b2db      	uxtb	r3, r3
 800ea70:	1ad3      	subs	r3, r2, r3
 800ea72:	b2da      	uxtb	r2, r3
 800ea74:	4b49      	ldr	r3, [pc, #292]	; (800eb9c <sEE_WriteBuffer+0x2ac>)
 800ea76:	701a      	strb	r2, [r3, #0]
        /*!< Write the remaining data in the following page */
        sEE_WritePage((uint8_t*)(pBuffer + count), (WriteAddr + count), (uint8_t*)(&sEEDataNum));
 800ea78:	897b      	ldrh	r3, [r7, #10]
 800ea7a:	687a      	ldr	r2, [r7, #4]
 800ea7c:	18d0      	adds	r0, r2, r3
 800ea7e:	887a      	ldrh	r2, [r7, #2]
 800ea80:	897b      	ldrh	r3, [r7, #10]
 800ea82:	4413      	add	r3, r2
 800ea84:	b29b      	uxth	r3, r3
 800ea86:	4a45      	ldr	r2, [pc, #276]	; (800eb9c <sEE_WriteBuffer+0x2ac>)
 800ea88:	4619      	mov	r1, r3
 800ea8a:	f7ff fe73 	bl	800e774 <sEE_WritePage>
        /* Wait transfer through DMA to be complete */
        sEETimeout = sEE_LONG_TIMEOUT;
 800ea8e:	4b44      	ldr	r3, [pc, #272]	; (800eba0 <sEE_WriteBuffer+0x2b0>)
 800ea90:	f44f 4220 	mov.w	r2, #40960	; 0xa000
 800ea94:	601a      	str	r2, [r3, #0]
        while (sEEDataNum > 0)
 800ea96:	e009      	b.n	800eaac <sEE_WriteBuffer+0x1bc>
        {
          if((sEETimeout--) == 0) {sEE_TIMEOUT_UserCallback(); return;};
 800ea98:	4b41      	ldr	r3, [pc, #260]	; (800eba0 <sEE_WriteBuffer+0x2b0>)
 800ea9a:	681b      	ldr	r3, [r3, #0]
 800ea9c:	1e5a      	subs	r2, r3, #1
 800ea9e:	4940      	ldr	r1, [pc, #256]	; (800eba0 <sEE_WriteBuffer+0x2b0>)
 800eaa0:	600a      	str	r2, [r1, #0]
 800eaa2:	2b00      	cmp	r3, #0
 800eaa4:	d102      	bne.n	800eaac <sEE_WriteBuffer+0x1bc>
 800eaa6:	f000 f9a1 	bl	800edec <sEE_TIMEOUT_UserCallback>
 800eaaa:	e0b0      	b.n	800ec0e <sEE_WriteBuffer+0x31e>
        while (sEEDataNum > 0)
 800eaac:	4b3b      	ldr	r3, [pc, #236]	; (800eb9c <sEE_WriteBuffer+0x2ac>)
 800eaae:	781b      	ldrb	r3, [r3, #0]
 800eab0:	b2db      	uxtb	r3, r3
 800eab2:	2b00      	cmp	r3, #0
 800eab4:	d1f0      	bne.n	800ea98 <sEE_WriteBuffer+0x1a8>
        }     
        sEE_WaitEepromStandbyState();        
 800eab6:	f000 f8b1 	bl	800ec1c <sEE_WaitEepromStandbyState>
 800eaba:	e0a8      	b.n	800ec0e <sEE_WriteBuffer+0x31e>
      }      
      else      
      {
        /* Store the number of data to be written */
        sEEDataNum = NumOfSingle;         
 800eabc:	89bb      	ldrh	r3, [r7, #12]
 800eabe:	b2da      	uxtb	r2, r3
 800eac0:	4b36      	ldr	r3, [pc, #216]	; (800eb9c <sEE_WriteBuffer+0x2ac>)
 800eac2:	701a      	strb	r2, [r3, #0]
        sEE_WritePage(pBuffer, WriteAddr, (uint8_t*)(&sEEDataNum));
 800eac4:	887b      	ldrh	r3, [r7, #2]
 800eac6:	4a35      	ldr	r2, [pc, #212]	; (800eb9c <sEE_WriteBuffer+0x2ac>)
 800eac8:	4619      	mov	r1, r3
 800eaca:	6878      	ldr	r0, [r7, #4]
 800eacc:	f7ff fe52 	bl	800e774 <sEE_WritePage>
        /* Wait transfer through DMA to be complete */
        sEETimeout = sEE_LONG_TIMEOUT;
 800ead0:	4b33      	ldr	r3, [pc, #204]	; (800eba0 <sEE_WriteBuffer+0x2b0>)
 800ead2:	f44f 4220 	mov.w	r2, #40960	; 0xa000
 800ead6:	601a      	str	r2, [r3, #0]
        while (sEEDataNum > 0)
 800ead8:	e009      	b.n	800eaee <sEE_WriteBuffer+0x1fe>
        {
          if((sEETimeout--) == 0) {sEE_TIMEOUT_UserCallback(); return;};
 800eada:	4b31      	ldr	r3, [pc, #196]	; (800eba0 <sEE_WriteBuffer+0x2b0>)
 800eadc:	681b      	ldr	r3, [r3, #0]
 800eade:	1e5a      	subs	r2, r3, #1
 800eae0:	492f      	ldr	r1, [pc, #188]	; (800eba0 <sEE_WriteBuffer+0x2b0>)
 800eae2:	600a      	str	r2, [r1, #0]
 800eae4:	2b00      	cmp	r3, #0
 800eae6:	d102      	bne.n	800eaee <sEE_WriteBuffer+0x1fe>
 800eae8:	f000 f980 	bl	800edec <sEE_TIMEOUT_UserCallback>
 800eaec:	e08f      	b.n	800ec0e <sEE_WriteBuffer+0x31e>
        while (sEEDataNum > 0)
 800eaee:	4b2b      	ldr	r3, [pc, #172]	; (800eb9c <sEE_WriteBuffer+0x2ac>)
 800eaf0:	781b      	ldrb	r3, [r3, #0]
 800eaf2:	b2db      	uxtb	r3, r3
 800eaf4:	2b00      	cmp	r3, #0
 800eaf6:	d1f0      	bne.n	800eada <sEE_WriteBuffer+0x1ea>
        }          
        sEE_WaitEepromStandbyState();        
 800eaf8:	f000 f890 	bl	800ec1c <sEE_WaitEepromStandbyState>
 800eafc:	e087      	b.n	800ec0e <sEE_WriteBuffer+0x31e>
      }     
    }
    /*!< If NumByteToWrite > sEE_PAGESIZE */
    else
    {
      NumByteToWrite -= count;
 800eafe:	883a      	ldrh	r2, [r7, #0]
 800eb00:	897b      	ldrh	r3, [r7, #10]
 800eb02:	1ad3      	subs	r3, r2, r3
 800eb04:	803b      	strh	r3, [r7, #0]
      NumOfPage =  NumByteToWrite / sEE_PAGESIZE;
 800eb06:	883b      	ldrh	r3, [r7, #0]
 800eb08:	089b      	lsrs	r3, r3, #2
 800eb0a:	81fb      	strh	r3, [r7, #14]
      NumOfSingle = NumByteToWrite % sEE_PAGESIZE;
 800eb0c:	883b      	ldrh	r3, [r7, #0]
 800eb0e:	f003 0303 	and.w	r3, r3, #3
 800eb12:	81bb      	strh	r3, [r7, #12]
      
      if(count != 0)
 800eb14:	897b      	ldrh	r3, [r7, #10]
 800eb16:	2b00      	cmp	r3, #0
 800eb18:	d051      	beq.n	800ebbe <sEE_WriteBuffer+0x2ce>
      {  
        /* Store the number of data to be written */
        sEEDataNum = count;         
 800eb1a:	897b      	ldrh	r3, [r7, #10]
 800eb1c:	b2da      	uxtb	r2, r3
 800eb1e:	4b1f      	ldr	r3, [pc, #124]	; (800eb9c <sEE_WriteBuffer+0x2ac>)
 800eb20:	701a      	strb	r2, [r3, #0]
        sEE_WritePage(pBuffer, WriteAddr, (uint8_t*)(&sEEDataNum));
 800eb22:	887b      	ldrh	r3, [r7, #2]
 800eb24:	4a1d      	ldr	r2, [pc, #116]	; (800eb9c <sEE_WriteBuffer+0x2ac>)
 800eb26:	4619      	mov	r1, r3
 800eb28:	6878      	ldr	r0, [r7, #4]
 800eb2a:	f7ff fe23 	bl	800e774 <sEE_WritePage>
        /* Wait transfer through DMA to be complete */
        sEETimeout = sEE_LONG_TIMEOUT;
 800eb2e:	4b1c      	ldr	r3, [pc, #112]	; (800eba0 <sEE_WriteBuffer+0x2b0>)
 800eb30:	f44f 4220 	mov.w	r2, #40960	; 0xa000
 800eb34:	601a      	str	r2, [r3, #0]
        while (sEEDataNum > 0)
 800eb36:	e009      	b.n	800eb4c <sEE_WriteBuffer+0x25c>
        {
          if((sEETimeout--) == 0) {sEE_TIMEOUT_UserCallback(); return;};
 800eb38:	4b19      	ldr	r3, [pc, #100]	; (800eba0 <sEE_WriteBuffer+0x2b0>)
 800eb3a:	681b      	ldr	r3, [r3, #0]
 800eb3c:	1e5a      	subs	r2, r3, #1
 800eb3e:	4918      	ldr	r1, [pc, #96]	; (800eba0 <sEE_WriteBuffer+0x2b0>)
 800eb40:	600a      	str	r2, [r1, #0]
 800eb42:	2b00      	cmp	r3, #0
 800eb44:	d102      	bne.n	800eb4c <sEE_WriteBuffer+0x25c>
 800eb46:	f000 f951 	bl	800edec <sEE_TIMEOUT_UserCallback>
 800eb4a:	e060      	b.n	800ec0e <sEE_WriteBuffer+0x31e>
        while (sEEDataNum > 0)
 800eb4c:	4b13      	ldr	r3, [pc, #76]	; (800eb9c <sEE_WriteBuffer+0x2ac>)
 800eb4e:	781b      	ldrb	r3, [r3, #0]
 800eb50:	b2db      	uxtb	r3, r3
 800eb52:	2b00      	cmp	r3, #0
 800eb54:	d1f0      	bne.n	800eb38 <sEE_WriteBuffer+0x248>
        }     
        sEE_WaitEepromStandbyState();
 800eb56:	f000 f861 	bl	800ec1c <sEE_WaitEepromStandbyState>
        WriteAddr += count;
 800eb5a:	887a      	ldrh	r2, [r7, #2]
 800eb5c:	897b      	ldrh	r3, [r7, #10]
 800eb5e:	4413      	add	r3, r2
 800eb60:	807b      	strh	r3, [r7, #2]
        pBuffer += count;
 800eb62:	897b      	ldrh	r3, [r7, #10]
 800eb64:	687a      	ldr	r2, [r7, #4]
 800eb66:	4413      	add	r3, r2
 800eb68:	607b      	str	r3, [r7, #4]
      } 
      
      while(NumOfPage--)
 800eb6a:	e028      	b.n	800ebbe <sEE_WriteBuffer+0x2ce>
      {
        /* Store the number of data to be written */
        sEEDataNum = sEE_PAGESIZE;          
 800eb6c:	4b0b      	ldr	r3, [pc, #44]	; (800eb9c <sEE_WriteBuffer+0x2ac>)
 800eb6e:	2204      	movs	r2, #4
 800eb70:	701a      	strb	r2, [r3, #0]
        sEE_WritePage(pBuffer, WriteAddr, (uint8_t*)(&sEEDataNum));
 800eb72:	887b      	ldrh	r3, [r7, #2]
 800eb74:	4a09      	ldr	r2, [pc, #36]	; (800eb9c <sEE_WriteBuffer+0x2ac>)
 800eb76:	4619      	mov	r1, r3
 800eb78:	6878      	ldr	r0, [r7, #4]
 800eb7a:	f7ff fdfb 	bl	800e774 <sEE_WritePage>
        /* Wait transfer through DMA to be complete */
        sEETimeout = sEE_LONG_TIMEOUT;
 800eb7e:	4b08      	ldr	r3, [pc, #32]	; (800eba0 <sEE_WriteBuffer+0x2b0>)
 800eb80:	f44f 4220 	mov.w	r2, #40960	; 0xa000
 800eb84:	601a      	str	r2, [r3, #0]
        while (sEEDataNum > 0)
 800eb86:	e00d      	b.n	800eba4 <sEE_WriteBuffer+0x2b4>
        {
          if((sEETimeout--) == 0) {sEE_TIMEOUT_UserCallback(); return;};
 800eb88:	4b05      	ldr	r3, [pc, #20]	; (800eba0 <sEE_WriteBuffer+0x2b0>)
 800eb8a:	681b      	ldr	r3, [r3, #0]
 800eb8c:	1e5a      	subs	r2, r3, #1
 800eb8e:	4904      	ldr	r1, [pc, #16]	; (800eba0 <sEE_WriteBuffer+0x2b0>)
 800eb90:	600a      	str	r2, [r1, #0]
 800eb92:	2b00      	cmp	r3, #0
 800eb94:	d106      	bne.n	800eba4 <sEE_WriteBuffer+0x2b4>
 800eb96:	f000 f929 	bl	800edec <sEE_TIMEOUT_UserCallback>
 800eb9a:	e038      	b.n	800ec0e <sEE_WriteBuffer+0x31e>
 800eb9c:	20002e14 	.word	0x20002e14
 800eba0:	200000a0 	.word	0x200000a0
        while (sEEDataNum > 0)
 800eba4:	4b1b      	ldr	r3, [pc, #108]	; (800ec14 <sEE_WriteBuffer+0x324>)
 800eba6:	781b      	ldrb	r3, [r3, #0]
 800eba8:	b2db      	uxtb	r3, r3
 800ebaa:	2b00      	cmp	r3, #0
 800ebac:	d1ec      	bne.n	800eb88 <sEE_WriteBuffer+0x298>
        }        
        sEE_WaitEepromStandbyState();
 800ebae:	f000 f835 	bl	800ec1c <sEE_WaitEepromStandbyState>
        WriteAddr +=  sEE_PAGESIZE;
 800ebb2:	887b      	ldrh	r3, [r7, #2]
 800ebb4:	3304      	adds	r3, #4
 800ebb6:	807b      	strh	r3, [r7, #2]
        pBuffer += sEE_PAGESIZE;  
 800ebb8:	687b      	ldr	r3, [r7, #4]
 800ebba:	3304      	adds	r3, #4
 800ebbc:	607b      	str	r3, [r7, #4]
      while(NumOfPage--)
 800ebbe:	89fb      	ldrh	r3, [r7, #14]
 800ebc0:	1e5a      	subs	r2, r3, #1
 800ebc2:	81fa      	strh	r2, [r7, #14]
 800ebc4:	2b00      	cmp	r3, #0
 800ebc6:	d1d1      	bne.n	800eb6c <sEE_WriteBuffer+0x27c>
      }
      if(NumOfSingle != 0)
 800ebc8:	89bb      	ldrh	r3, [r7, #12]
 800ebca:	2b00      	cmp	r3, #0
 800ebcc:	d01f      	beq.n	800ec0e <sEE_WriteBuffer+0x31e>
      {
        /* Store the number of data to be written */
        sEEDataNum = NumOfSingle;           
 800ebce:	89bb      	ldrh	r3, [r7, #12]
 800ebd0:	b2da      	uxtb	r2, r3
 800ebd2:	4b10      	ldr	r3, [pc, #64]	; (800ec14 <sEE_WriteBuffer+0x324>)
 800ebd4:	701a      	strb	r2, [r3, #0]
        sEE_WritePage(pBuffer, WriteAddr, (uint8_t*)(&sEEDataNum)); 
 800ebd6:	887b      	ldrh	r3, [r7, #2]
 800ebd8:	4a0e      	ldr	r2, [pc, #56]	; (800ec14 <sEE_WriteBuffer+0x324>)
 800ebda:	4619      	mov	r1, r3
 800ebdc:	6878      	ldr	r0, [r7, #4]
 800ebde:	f7ff fdc9 	bl	800e774 <sEE_WritePage>
        /* Wait transfer through DMA to be complete */
        sEETimeout = sEE_LONG_TIMEOUT;
 800ebe2:	4b0d      	ldr	r3, [pc, #52]	; (800ec18 <sEE_WriteBuffer+0x328>)
 800ebe4:	f44f 4220 	mov.w	r2, #40960	; 0xa000
 800ebe8:	601a      	str	r2, [r3, #0]
        while (sEEDataNum > 0)
 800ebea:	e009      	b.n	800ec00 <sEE_WriteBuffer+0x310>
        {
          if((sEETimeout--) == 0) {sEE_TIMEOUT_UserCallback(); return;};
 800ebec:	4b0a      	ldr	r3, [pc, #40]	; (800ec18 <sEE_WriteBuffer+0x328>)
 800ebee:	681b      	ldr	r3, [r3, #0]
 800ebf0:	1e5a      	subs	r2, r3, #1
 800ebf2:	4909      	ldr	r1, [pc, #36]	; (800ec18 <sEE_WriteBuffer+0x328>)
 800ebf4:	600a      	str	r2, [r1, #0]
 800ebf6:	2b00      	cmp	r3, #0
 800ebf8:	d102      	bne.n	800ec00 <sEE_WriteBuffer+0x310>
 800ebfa:	f000 f8f7 	bl	800edec <sEE_TIMEOUT_UserCallback>
 800ebfe:	e006      	b.n	800ec0e <sEE_WriteBuffer+0x31e>
        while (sEEDataNum > 0)
 800ec00:	4b04      	ldr	r3, [pc, #16]	; (800ec14 <sEE_WriteBuffer+0x324>)
 800ec02:	781b      	ldrb	r3, [r3, #0]
 800ec04:	b2db      	uxtb	r3, r3
 800ec06:	2b00      	cmp	r3, #0
 800ec08:	d1f0      	bne.n	800ebec <sEE_WriteBuffer+0x2fc>
        }         
        sEE_WaitEepromStandbyState();
 800ec0a:	f000 f807 	bl	800ec1c <sEE_WaitEepromStandbyState>
      }
    }
  }  
}
 800ec0e:	3710      	adds	r7, #16
 800ec10:	46bd      	mov	sp, r7
 800ec12:	bd80      	pop	{r7, pc}
 800ec14:	20002e14 	.word	0x20002e14
 800ec18:	200000a0 	.word	0x200000a0

0800ec1c <sEE_WaitEepromStandbyState>:
  * @param  None
  * @retval sEE_OK (0) if operation is correctly performed, else return value 
  *         different from sEE_OK (0) or the timeout user callback.
  */
uint32_t sEE_WaitEepromStandbyState(void)      
{
 800ec1c:	b580      	push	{r7, lr}
 800ec1e:	b082      	sub	sp, #8
 800ec20:	af00      	add	r7, sp, #0
  __IO uint16_t tmpSR1 = 0;
 800ec22:	2300      	movs	r3, #0
 800ec24:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t sEETrials = 0;
 800ec26:	2300      	movs	r3, #0
 800ec28:	603b      	str	r3, [r7, #0]

  /*!< While the bus is busy */
  sEETimeout = sEE_LONG_TIMEOUT;
 800ec2a:	4b3b      	ldr	r3, [pc, #236]	; (800ed18 <sEE_WaitEepromStandbyState+0xfc>)
 800ec2c:	f44f 4220 	mov.w	r2, #40960	; 0xa000
 800ec30:	601a      	str	r2, [r3, #0]
  while(I2C_GetFlagStatus(sEE_I2C, I2C_FLAG_BUSY))
 800ec32:	e00a      	b.n	800ec4a <sEE_WaitEepromStandbyState+0x2e>
  {
    if((sEETimeout--) == 0) return sEE_TIMEOUT_UserCallback();
 800ec34:	4b38      	ldr	r3, [pc, #224]	; (800ed18 <sEE_WaitEepromStandbyState+0xfc>)
 800ec36:	681b      	ldr	r3, [r3, #0]
 800ec38:	1e5a      	subs	r2, r3, #1
 800ec3a:	4937      	ldr	r1, [pc, #220]	; (800ed18 <sEE_WaitEepromStandbyState+0xfc>)
 800ec3c:	600a      	str	r2, [r1, #0]
 800ec3e:	2b00      	cmp	r3, #0
 800ec40:	d103      	bne.n	800ec4a <sEE_WaitEepromStandbyState+0x2e>
 800ec42:	f000 f8d3 	bl	800edec <sEE_TIMEOUT_UserCallback>
 800ec46:	4603      	mov	r3, r0
 800ec48:	e061      	b.n	800ed0e <sEE_WaitEepromStandbyState+0xf2>
  while(I2C_GetFlagStatus(sEE_I2C, I2C_FLAG_BUSY))
 800ec4a:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 800ec4e:	4833      	ldr	r0, [pc, #204]	; (800ed1c <sEE_WaitEepromStandbyState+0x100>)
 800ec50:	f7f8 fae8 	bl	8007224 <I2C_GetFlagStatus>
 800ec54:	4603      	mov	r3, r0
 800ec56:	2b00      	cmp	r3, #0
 800ec58:	d1ec      	bne.n	800ec34 <sEE_WaitEepromStandbyState+0x18>
     of trials is reached (this number is defined by sEE_MAX_TRIALS_NUMBER define
     in stm32f429i_discovery_i2c_ee.h file) */
  while (1)
  {
    /*!< Send START condition */
    I2C_GenerateSTART(sEE_I2C, ENABLE);
 800ec5a:	2101      	movs	r1, #1
 800ec5c:	482f      	ldr	r0, [pc, #188]	; (800ed1c <sEE_WaitEepromStandbyState+0x100>)
 800ec5e:	f7f7 ffe0 	bl	8006c22 <I2C_GenerateSTART>

    /*!< Test on EV5 and clear it */
    sEETimeout = sEE_FLAG_TIMEOUT;
 800ec62:	4b2d      	ldr	r3, [pc, #180]	; (800ed18 <sEE_WaitEepromStandbyState+0xfc>)
 800ec64:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800ec68:	601a      	str	r2, [r3, #0]
    while(!I2C_CheckEvent(sEE_I2C, I2C_EVENT_MASTER_MODE_SELECT))
 800ec6a:	e00a      	b.n	800ec82 <sEE_WaitEepromStandbyState+0x66>
    {
      if((sEETimeout--) == 0) return sEE_TIMEOUT_UserCallback();
 800ec6c:	4b2a      	ldr	r3, [pc, #168]	; (800ed18 <sEE_WaitEepromStandbyState+0xfc>)
 800ec6e:	681b      	ldr	r3, [r3, #0]
 800ec70:	1e5a      	subs	r2, r3, #1
 800ec72:	4929      	ldr	r1, [pc, #164]	; (800ed18 <sEE_WaitEepromStandbyState+0xfc>)
 800ec74:	600a      	str	r2, [r1, #0]
 800ec76:	2b00      	cmp	r3, #0
 800ec78:	d103      	bne.n	800ec82 <sEE_WaitEepromStandbyState+0x66>
 800ec7a:	f000 f8b7 	bl	800edec <sEE_TIMEOUT_UserCallback>
 800ec7e:	4603      	mov	r3, r0
 800ec80:	e045      	b.n	800ed0e <sEE_WaitEepromStandbyState+0xf2>
    while(!I2C_CheckEvent(sEE_I2C, I2C_EVENT_MASTER_MODE_SELECT))
 800ec82:	4927      	ldr	r1, [pc, #156]	; (800ed20 <sEE_WaitEepromStandbyState+0x104>)
 800ec84:	4825      	ldr	r0, [pc, #148]	; (800ed1c <sEE_WaitEepromStandbyState+0x100>)
 800ec86:	f7f8 fa7b 	bl	8007180 <I2C_CheckEvent>
 800ec8a:	4603      	mov	r3, r0
 800ec8c:	2b00      	cmp	r3, #0
 800ec8e:	d0ed      	beq.n	800ec6c <sEE_WaitEepromStandbyState+0x50>
    }    

    /*!< Send EEPROM address for write */
    I2C_Send7bitAddress(sEE_I2C, sEEAddress, I2C_Direction_Transmitter);
 800ec90:	4b24      	ldr	r3, [pc, #144]	; (800ed24 <sEE_WaitEepromStandbyState+0x108>)
 800ec92:	881b      	ldrh	r3, [r3, #0]
 800ec94:	b29b      	uxth	r3, r3
 800ec96:	b2db      	uxtb	r3, r3
 800ec98:	2200      	movs	r2, #0
 800ec9a:	4619      	mov	r1, r3
 800ec9c:	481f      	ldr	r0, [pc, #124]	; (800ed1c <sEE_WaitEepromStandbyState+0x100>)
 800ec9e:	f7f8 f800 	bl	8006ca2 <I2C_Send7bitAddress>
    
    /* Wait for ADDR flag to be set (Slave acknowledged his address) */
    sEETimeout = sEE_LONG_TIMEOUT;
 800eca2:	4b1d      	ldr	r3, [pc, #116]	; (800ed18 <sEE_WaitEepromStandbyState+0xfc>)
 800eca4:	f44f 4220 	mov.w	r2, #40960	; 0xa000
 800eca8:	601a      	str	r2, [r3, #0]
    do
    {     
      /* Get the current value of the SR1 register */
      tmpSR1 = sEE_I2C->SR1;
 800ecaa:	4b1c      	ldr	r3, [pc, #112]	; (800ed1c <sEE_WaitEepromStandbyState+0x100>)
 800ecac:	8a9b      	ldrh	r3, [r3, #20]
 800ecae:	b29b      	uxth	r3, r3
 800ecb0:	80fb      	strh	r3, [r7, #6]
      
      /* Update the timeout value and exit if it reach 0 */
      if((sEETimeout--) == 0) return sEE_TIMEOUT_UserCallback();
 800ecb2:	4b19      	ldr	r3, [pc, #100]	; (800ed18 <sEE_WaitEepromStandbyState+0xfc>)
 800ecb4:	681b      	ldr	r3, [r3, #0]
 800ecb6:	1e5a      	subs	r2, r3, #1
 800ecb8:	4917      	ldr	r1, [pc, #92]	; (800ed18 <sEE_WaitEepromStandbyState+0xfc>)
 800ecba:	600a      	str	r2, [r1, #0]
 800ecbc:	2b00      	cmp	r3, #0
 800ecbe:	d103      	bne.n	800ecc8 <sEE_WaitEepromStandbyState+0xac>
 800ecc0:	f000 f894 	bl	800edec <sEE_TIMEOUT_UserCallback>
 800ecc4:	4603      	mov	r3, r0
 800ecc6:	e022      	b.n	800ed0e <sEE_WaitEepromStandbyState+0xf2>
    }
    /* Keep looping till the Address is acknowledged or the AF flag is 
       set (address not acknowledged at time) */
    while((tmpSR1 & (I2C_SR1_ADDR | I2C_SR1_AF)) == 0);
 800ecc8:	88fb      	ldrh	r3, [r7, #6]
 800ecca:	b29b      	uxth	r3, r3
 800eccc:	461a      	mov	r2, r3
 800ecce:	f240 4302 	movw	r3, #1026	; 0x402
 800ecd2:	4013      	ands	r3, r2
 800ecd4:	2b00      	cmp	r3, #0
 800ecd6:	d0e8      	beq.n	800ecaa <sEE_WaitEepromStandbyState+0x8e>
     
    /* Check if the ADDR flag has been set */
    if (tmpSR1 & I2C_SR1_ADDR)
 800ecd8:	88fb      	ldrh	r3, [r7, #6]
 800ecda:	b29b      	uxth	r3, r3
 800ecdc:	f003 0302 	and.w	r3, r3, #2
 800ece0:	2b00      	cmp	r3, #0
 800ece2:	d007      	beq.n	800ecf4 <sEE_WaitEepromStandbyState+0xd8>
    {
      /* Clear ADDR Flag by reading SR1 then SR2 registers (SR1 have already 
         been read) */
      (void)sEE_I2C->SR2;
 800ece4:	4b0d      	ldr	r3, [pc, #52]	; (800ed1c <sEE_WaitEepromStandbyState+0x100>)
 800ece6:	8b1b      	ldrh	r3, [r3, #24]
      
      /*!< STOP condition */    
      I2C_GenerateSTOP(sEE_I2C, ENABLE);
 800ece8:	2101      	movs	r1, #1
 800ecea:	480c      	ldr	r0, [pc, #48]	; (800ed1c <sEE_WaitEepromStandbyState+0x100>)
 800ecec:	f7f7 ffb9 	bl	8006c62 <I2C_GenerateSTOP>
        
      /* Exit the function */
      return sEE_OK;
 800ecf0:	2300      	movs	r3, #0
 800ecf2:	e00c      	b.n	800ed0e <sEE_WaitEepromStandbyState+0xf2>
    }
    else
    {
      /*!< Clear AF flag */
      I2C_ClearFlag(sEE_I2C, I2C_FLAG_AF);                  
 800ecf4:	490c      	ldr	r1, [pc, #48]	; (800ed28 <sEE_WaitEepromStandbyState+0x10c>)
 800ecf6:	4809      	ldr	r0, [pc, #36]	; (800ed1c <sEE_WaitEepromStandbyState+0x100>)
 800ecf8:	f7f8 fac7 	bl	800728a <I2C_ClearFlag>
    }
    
    /* Check if the maximum allowed number of trials has bee reached */
    if (sEETrials++ == sEE_MAX_TRIALS_NUMBER)
 800ecfc:	683b      	ldr	r3, [r7, #0]
 800ecfe:	1c5a      	adds	r2, r3, #1
 800ed00:	603a      	str	r2, [r7, #0]
 800ed02:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800ed06:	d1a8      	bne.n	800ec5a <sEE_WaitEepromStandbyState+0x3e>
    {
      /* If the maximum number of trials has been reached, exit the function */
      return sEE_TIMEOUT_UserCallback();
 800ed08:	f000 f870 	bl	800edec <sEE_TIMEOUT_UserCallback>
 800ed0c:	4603      	mov	r3, r0
    }
  }
}
 800ed0e:	4618      	mov	r0, r3
 800ed10:	3708      	adds	r7, #8
 800ed12:	46bd      	mov	sp, r7
 800ed14:	bd80      	pop	{r7, pc}
 800ed16:	bf00      	nop
 800ed18:	200000a0 	.word	0x200000a0
 800ed1c:	40005c00 	.word	0x40005c00
 800ed20:	00030001 	.word	0x00030001
 800ed24:	20002e08 	.word	0x20002e08
 800ed28:	10000400 	.word	0x10000400

0800ed2c <DMA1_Stream4_IRQHandler>:
  * @brief  This function handles the DMA Tx Channel interrupt Handler.
  * @param  None
  * @retval None
  */
void sEE_I2C_DMA_TX_IRQHandler(void)
{
 800ed2c:	b580      	push	{r7, lr}
 800ed2e:	af00      	add	r7, sp, #0
  /* Check if the DMA transfer is complete */
  if(DMA_GetFlagStatus(sEE_I2C_DMA_STREAM_TX, sEE_TX_DMA_FLAG_TCIF) != RESET)
 800ed30:	4916      	ldr	r1, [pc, #88]	; (800ed8c <DMA1_Stream4_IRQHandler+0x60>)
 800ed32:	4817      	ldr	r0, [pc, #92]	; (800ed90 <DMA1_Stream4_IRQHandler+0x64>)
 800ed34:	f7f5 f9a4 	bl	8004080 <DMA_GetFlagStatus>
 800ed38:	4603      	mov	r3, r0
 800ed3a:	2b00      	cmp	r3, #0
 800ed3c:	d024      	beq.n	800ed88 <DMA1_Stream4_IRQHandler+0x5c>
  {  
    /* Disable the DMA Tx Stream and Clear TC flag */  
    DMA_Cmd(sEE_I2C_DMA_STREAM_TX, DISABLE);
 800ed3e:	2100      	movs	r1, #0
 800ed40:	4813      	ldr	r0, [pc, #76]	; (800ed90 <DMA1_Stream4_IRQHandler+0x64>)
 800ed42:	f7f5 f89c 	bl	8003e7e <DMA_Cmd>
    DMA_ClearFlag(sEE_I2C_DMA_STREAM_TX, sEE_TX_DMA_FLAG_TCIF);
 800ed46:	4911      	ldr	r1, [pc, #68]	; (800ed8c <DMA1_Stream4_IRQHandler+0x60>)
 800ed48:	4811      	ldr	r0, [pc, #68]	; (800ed90 <DMA1_Stream4_IRQHandler+0x64>)
 800ed4a:	f7f5 f9d5 	bl	80040f8 <DMA_ClearFlag>

    /*!< Wait till all data have been physically transferred on the bus */
    sEETimeout = sEE_LONG_TIMEOUT;
 800ed4e:	4b11      	ldr	r3, [pc, #68]	; (800ed94 <DMA1_Stream4_IRQHandler+0x68>)
 800ed50:	f44f 4220 	mov.w	r2, #40960	; 0xa000
 800ed54:	601a      	str	r2, [r3, #0]
    while(!I2C_GetFlagStatus(sEE_I2C, I2C_FLAG_BTF))
 800ed56:	e008      	b.n	800ed6a <DMA1_Stream4_IRQHandler+0x3e>
    {
      if((sEETimeout--) == 0) sEE_TIMEOUT_UserCallback();
 800ed58:	4b0e      	ldr	r3, [pc, #56]	; (800ed94 <DMA1_Stream4_IRQHandler+0x68>)
 800ed5a:	681b      	ldr	r3, [r3, #0]
 800ed5c:	1e5a      	subs	r2, r3, #1
 800ed5e:	490d      	ldr	r1, [pc, #52]	; (800ed94 <DMA1_Stream4_IRQHandler+0x68>)
 800ed60:	600a      	str	r2, [r1, #0]
 800ed62:	2b00      	cmp	r3, #0
 800ed64:	d101      	bne.n	800ed6a <DMA1_Stream4_IRQHandler+0x3e>
 800ed66:	f000 f841 	bl	800edec <sEE_TIMEOUT_UserCallback>
    while(!I2C_GetFlagStatus(sEE_I2C, I2C_FLAG_BTF))
 800ed6a:	490b      	ldr	r1, [pc, #44]	; (800ed98 <DMA1_Stream4_IRQHandler+0x6c>)
 800ed6c:	480b      	ldr	r0, [pc, #44]	; (800ed9c <DMA1_Stream4_IRQHandler+0x70>)
 800ed6e:	f7f8 fa59 	bl	8007224 <I2C_GetFlagStatus>
 800ed72:	4603      	mov	r3, r0
 800ed74:	2b00      	cmp	r3, #0
 800ed76:	d0ef      	beq.n	800ed58 <DMA1_Stream4_IRQHandler+0x2c>
    }
    
    /*!< Send STOP condition */
    I2C_GenerateSTOP(sEE_I2C, ENABLE);
 800ed78:	2101      	movs	r1, #1
 800ed7a:	4808      	ldr	r0, [pc, #32]	; (800ed9c <DMA1_Stream4_IRQHandler+0x70>)
 800ed7c:	f7f7 ff71 	bl	8006c62 <I2C_GenerateSTOP>
    
    /* Reset the variable holding the number of data to be written */
    *sEEDataWritePointer = 0;  
 800ed80:	4b07      	ldr	r3, [pc, #28]	; (800eda0 <DMA1_Stream4_IRQHandler+0x74>)
 800ed82:	681b      	ldr	r3, [r3, #0]
 800ed84:	2200      	movs	r2, #0
 800ed86:	701a      	strb	r2, [r3, #0]
  }
}
 800ed88:	bf00      	nop
 800ed8a:	bd80      	pop	{r7, pc}
 800ed8c:	20000020 	.word	0x20000020
 800ed90:	40026070 	.word	0x40026070
 800ed94:	200000a0 	.word	0x200000a0
 800ed98:	10000004 	.word	0x10000004
 800ed9c:	40005c00 	.word	0x40005c00
 800eda0:	20002e10 	.word	0x20002e10

0800eda4 <DMA1_Stream2_IRQHandler>:
  * @brief  This function handles the DMA Rx Channel interrupt Handler.
  * @param  None
  * @retval None
  */
void sEE_I2C_DMA_RX_IRQHandler(void)
{
 800eda4:	b580      	push	{r7, lr}
 800eda6:	af00      	add	r7, sp, #0
  /* Check if the DMA transfer is complete */
  if(DMA_GetFlagStatus(sEE_I2C_DMA_STREAM_RX, sEE_RX_DMA_FLAG_TCIF) != RESET)
 800eda8:	f04f 5181 	mov.w	r1, #270532608	; 0x10200000
 800edac:	480c      	ldr	r0, [pc, #48]	; (800ede0 <DMA1_Stream2_IRQHandler+0x3c>)
 800edae:	f7f5 f967 	bl	8004080 <DMA_GetFlagStatus>
 800edb2:	4603      	mov	r3, r0
 800edb4:	2b00      	cmp	r3, #0
 800edb6:	d010      	beq.n	800edda <DMA1_Stream2_IRQHandler+0x36>
  {      
    /*!< Send STOP Condition */
    I2C_GenerateSTOP(sEE_I2C, ENABLE);    
 800edb8:	2101      	movs	r1, #1
 800edba:	480a      	ldr	r0, [pc, #40]	; (800ede4 <DMA1_Stream2_IRQHandler+0x40>)
 800edbc:	f7f7 ff51 	bl	8006c62 <I2C_GenerateSTOP>
    
    /* Disable the DMA Rx Stream and Clear TC Flag */  
    DMA_Cmd(sEE_I2C_DMA_STREAM_RX, DISABLE);
 800edc0:	2100      	movs	r1, #0
 800edc2:	4807      	ldr	r0, [pc, #28]	; (800ede0 <DMA1_Stream2_IRQHandler+0x3c>)
 800edc4:	f7f5 f85b 	bl	8003e7e <DMA_Cmd>
    DMA_ClearFlag(sEE_I2C_DMA_STREAM_RX, sEE_RX_DMA_FLAG_TCIF);
 800edc8:	f04f 5181 	mov.w	r1, #270532608	; 0x10200000
 800edcc:	4804      	ldr	r0, [pc, #16]	; (800ede0 <DMA1_Stream2_IRQHandler+0x3c>)
 800edce:	f7f5 f993 	bl	80040f8 <DMA_ClearFlag>
    
    /* Reset the variable holding the number of data to be read */
    *sEEDataReadPointer = 0;
 800edd2:	4b05      	ldr	r3, [pc, #20]	; (800ede8 <DMA1_Stream2_IRQHandler+0x44>)
 800edd4:	681b      	ldr	r3, [r3, #0]
 800edd6:	2200      	movs	r2, #0
 800edd8:	801a      	strh	r2, [r3, #0]
  }
}
 800edda:	bf00      	nop
 800eddc:	bd80      	pop	{r7, pc}
 800edde:	bf00      	nop
 800ede0:	40026040 	.word	0x40026040
 800ede4:	40005c00 	.word	0x40005c00
 800ede8:	20002e0c 	.word	0x20002e0c

0800edec <sEE_TIMEOUT_UserCallback>:
  * @brief  Basic management of the timeout situation.
  * @param  None.
  * @retval None.
  */
uint32_t sEE_TIMEOUT_UserCallback(void)
{
 800edec:	b480      	push	{r7}
 800edee:	af00      	add	r7, sp, #0
  /* Block communication and all processes */
  while (1)
 800edf0:	e7fe      	b.n	800edf0 <sEE_TIMEOUT_UserCallback+0x4>
 800edf2:	bf00      	nop

0800edf4 <IOE_Config>:
  *         hardware (GPIOs, APB clocks ..).
  * @param  None
  * @retval IOE_OK if all initializations done correctly. Other value if error.
  */
uint8_t IOE_Config(void)
{
 800edf4:	b580      	push	{r7, lr}
 800edf6:	af00      	add	r7, sp, #0
  /* Configure the needed pins */
  IOE_GPIO_Config(); 
 800edf8:	f000 fd05 	bl	800f806 <IOE_GPIO_Config>
  
  /* I2C initialization */
  IOE_I2C_Config();
 800edfc:	f000 fd4a 	bl	800f894 <IOE_I2C_Config>
    
  /* Read IO Expander ID  */
  if(IOE_IsOperational())
 800ee00:	f000 f8ad 	bl	800ef5e <IOE_IsOperational>
 800ee04:	4603      	mov	r3, r0
 800ee06:	2b00      	cmp	r3, #0
 800ee08:	d001      	beq.n	800ee0e <IOE_Config+0x1a>
  {
    return IOE_NOT_OPERATIONAL;
 800ee0a:	2304      	movs	r3, #4
 800ee0c:	e008      	b.n	800ee20 <IOE_Config+0x2c>
  }
  
  /* Generate IO Expander Software reset */
  IOE_Reset(); 
 800ee0e:	f000 f8bf 	bl	800ef90 <IOE_Reset>
  
  /* IO Expander configuration */
  /* Touch Panel controller and ADC configuration */
  IOE_FnctCmd(IOE_ADC_FCT, ENABLE);
 800ee12:	2101      	movs	r1, #1
 800ee14:	2001      	movs	r0, #1
 800ee16:	f000 f8e5 	bl	800efe4 <IOE_FnctCmd>
  IOE_TP_Config();
 800ee1a:	f000 f959 	bl	800f0d0 <IOE_TP_Config>

  /* Configuration is OK */
  return IOE_OK; 
 800ee1e:	2300      	movs	r3, #0
}
 800ee20:	4618      	mov	r0, r3
 800ee22:	bd80      	pop	{r7, pc}

0800ee24 <IOE_TPITConfig>:
  * @brief  Enables the touch Panel interrupt.
  * @param  None
  * @retval IOE_OK: if all initializations are OK. Other value if error.
  */
uint8_t IOE_TPITConfig(void)
{    
 800ee24:	b580      	push	{r7, lr}
 800ee26:	af00      	add	r7, sp, #0
  /* Enable the Global interrupt */  
  IOE_GITCmd(ENABLE);     
 800ee28:	2001      	movs	r0, #1
 800ee2a:	f000 f905 	bl	800f038 <IOE_GITCmd>
          
  /* Enable the Global GPIO Interrupt */
  IOE_GITConfig((uint8_t)(IOE_GIT_TOUCH | IOE_GIT_FTH | IOE_GIT_FOV), ENABLE);    
 800ee2e:	2101      	movs	r1, #1
 800ee30:	2007      	movs	r0, #7
 800ee32:	f000 f923 	bl	800f07c <IOE_GITConfig>
    
  /* Read the GPIO_IT_STA to clear all pending bits if any */
  I2C_ReadDeviceRegister(IOE_REG_GPIO_INT_STA); 
 800ee36:	200d      	movs	r0, #13
 800ee38:	f000 fe58 	bl	800faec <I2C_ReadDeviceRegister>
  
  /* If all OK return IOE_OK */
  return IOE_OK;
 800ee3c:	2300      	movs	r3, #0
}
 800ee3e:	4618      	mov	r0, r3
 800ee40:	bd80      	pop	{r7, pc}

0800ee42 <IOE_TP_GetState>:
  * @brief  Returns Status and positions of the Touch Panel.
  * @param  None
  * @retval Pointer to TP_STATE structure holding Touch Panel information.
  */
TP_STATE* IOE_TP_GetState(void)
{
 800ee42:	b580      	push	{r7, lr}
 800ee44:	b084      	sub	sp, #16
 800ee46:	af00      	add	r7, sp, #0
  uint32_t xDiff, yDiff , x , y;
  static uint32_t _x = 0, _y = 0;
  
  /* Check if the Touch detect event happened */
  TP_State.TouchDetected = (I2C_ReadDeviceRegister(IOE_REG_TP_CTRL) & 0x80);
 800ee48:	2040      	movs	r0, #64	; 0x40
 800ee4a:	f000 fe4f 	bl	800faec <I2C_ReadDeviceRegister>
 800ee4e:	4603      	mov	r3, r0
 800ee50:	b29b      	uxth	r3, r3
 800ee52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ee56:	b29a      	uxth	r2, r3
 800ee58:	4b29      	ldr	r3, [pc, #164]	; (800ef00 <IOE_TP_GetState+0xbe>)
 800ee5a:	801a      	strh	r2, [r3, #0]
  
  if(TP_State.TouchDetected) 
 800ee5c:	4b28      	ldr	r3, [pc, #160]	; (800ef00 <IOE_TP_GetState+0xbe>)
 800ee5e:	881b      	ldrh	r3, [r3, #0]
 800ee60:	2b00      	cmp	r3, #0
 800ee62:	d030      	beq.n	800eec6 <IOE_TP_GetState+0x84>
  {
    x = IOE_TP_Read_X();
 800ee64:	f000 fc5e 	bl	800f724 <IOE_TP_Read_X>
 800ee68:	4603      	mov	r3, r0
 800ee6a:	60fb      	str	r3, [r7, #12]
    y = IOE_TP_Read_Y();
 800ee6c:	f000 fc8e 	bl	800f78c <IOE_TP_Read_Y>
 800ee70:	4603      	mov	r3, r0
 800ee72:	60bb      	str	r3, [r7, #8]
    xDiff = x > _x? (x - _x): (_x - x);
 800ee74:	4b23      	ldr	r3, [pc, #140]	; (800ef04 <IOE_TP_GetState+0xc2>)
 800ee76:	681b      	ldr	r3, [r3, #0]
 800ee78:	68fa      	ldr	r2, [r7, #12]
 800ee7a:	429a      	cmp	r2, r3
 800ee7c:	d904      	bls.n	800ee88 <IOE_TP_GetState+0x46>
 800ee7e:	4b21      	ldr	r3, [pc, #132]	; (800ef04 <IOE_TP_GetState+0xc2>)
 800ee80:	681b      	ldr	r3, [r3, #0]
 800ee82:	68fa      	ldr	r2, [r7, #12]
 800ee84:	1ad3      	subs	r3, r2, r3
 800ee86:	e003      	b.n	800ee90 <IOE_TP_GetState+0x4e>
 800ee88:	4b1e      	ldr	r3, [pc, #120]	; (800ef04 <IOE_TP_GetState+0xc2>)
 800ee8a:	681a      	ldr	r2, [r3, #0]
 800ee8c:	68fb      	ldr	r3, [r7, #12]
 800ee8e:	1ad3      	subs	r3, r2, r3
 800ee90:	607b      	str	r3, [r7, #4]
    yDiff = y > _y? (y - _y): (_y - y);       
 800ee92:	4b1d      	ldr	r3, [pc, #116]	; (800ef08 <IOE_TP_GetState+0xc6>)
 800ee94:	681b      	ldr	r3, [r3, #0]
 800ee96:	68ba      	ldr	r2, [r7, #8]
 800ee98:	429a      	cmp	r2, r3
 800ee9a:	d904      	bls.n	800eea6 <IOE_TP_GetState+0x64>
 800ee9c:	4b1a      	ldr	r3, [pc, #104]	; (800ef08 <IOE_TP_GetState+0xc6>)
 800ee9e:	681b      	ldr	r3, [r3, #0]
 800eea0:	68ba      	ldr	r2, [r7, #8]
 800eea2:	1ad3      	subs	r3, r2, r3
 800eea4:	e003      	b.n	800eeae <IOE_TP_GetState+0x6c>
 800eea6:	4b18      	ldr	r3, [pc, #96]	; (800ef08 <IOE_TP_GetState+0xc6>)
 800eea8:	681a      	ldr	r2, [r3, #0]
 800eeaa:	68bb      	ldr	r3, [r7, #8]
 800eeac:	1ad3      	subs	r3, r2, r3
 800eeae:	603b      	str	r3, [r7, #0]
    if (xDiff + yDiff > 5)
 800eeb0:	687a      	ldr	r2, [r7, #4]
 800eeb2:	683b      	ldr	r3, [r7, #0]
 800eeb4:	4413      	add	r3, r2
 800eeb6:	2b05      	cmp	r3, #5
 800eeb8:	d905      	bls.n	800eec6 <IOE_TP_GetState+0x84>
    {
      _x = x;
 800eeba:	4a12      	ldr	r2, [pc, #72]	; (800ef04 <IOE_TP_GetState+0xc2>)
 800eebc:	68fb      	ldr	r3, [r7, #12]
 800eebe:	6013      	str	r3, [r2, #0]
      _y = y;       
 800eec0:	4a11      	ldr	r2, [pc, #68]	; (800ef08 <IOE_TP_GetState+0xc6>)
 800eec2:	68bb      	ldr	r3, [r7, #8]
 800eec4:	6013      	str	r3, [r2, #0]
    }
  }  
  /* Update the X position */
  TP_State.X = _x;
 800eec6:	4b0f      	ldr	r3, [pc, #60]	; (800ef04 <IOE_TP_GetState+0xc2>)
 800eec8:	681b      	ldr	r3, [r3, #0]
 800eeca:	b29a      	uxth	r2, r3
 800eecc:	4b0c      	ldr	r3, [pc, #48]	; (800ef00 <IOE_TP_GetState+0xbe>)
 800eece:	805a      	strh	r2, [r3, #2]
    
  /* Update the Y position */  
  TP_State.Y = _y;
 800eed0:	4b0d      	ldr	r3, [pc, #52]	; (800ef08 <IOE_TP_GetState+0xc6>)
 800eed2:	681b      	ldr	r3, [r3, #0]
 800eed4:	b29a      	uxth	r2, r3
 800eed6:	4b0a      	ldr	r3, [pc, #40]	; (800ef00 <IOE_TP_GetState+0xbe>)
 800eed8:	809a      	strh	r2, [r3, #4]
  /* Update the Z Pression index */  
  TP_State.Z = IOE_TP_Read_Z();  
 800eeda:	f000 fc81 	bl	800f7e0 <IOE_TP_Read_Z>
 800eede:	4603      	mov	r3, r0
 800eee0:	461a      	mov	r2, r3
 800eee2:	4b07      	ldr	r3, [pc, #28]	; (800ef00 <IOE_TP_GetState+0xbe>)
 800eee4:	80da      	strh	r2, [r3, #6]
  
  /* Clear the interrupt pending bit and enable the FIFO again */
  I2C_WriteDeviceRegister(IOE_REG_FIFO_STA, 0x01);
 800eee6:	2101      	movs	r1, #1
 800eee8:	204b      	movs	r0, #75	; 0x4b
 800eeea:	f000 fd4f 	bl	800f98c <I2C_WriteDeviceRegister>
  I2C_WriteDeviceRegister(IOE_REG_FIFO_STA, 0x00);
 800eeee:	2100      	movs	r1, #0
 800eef0:	204b      	movs	r0, #75	; 0x4b
 800eef2:	f000 fd4b 	bl	800f98c <I2C_WriteDeviceRegister>
  
  /* Return pointer to the updated structure */
  return &TP_State; 
 800eef6:	4b02      	ldr	r3, [pc, #8]	; (800ef00 <IOE_TP_GetState+0xbe>)
}
 800eef8:	4618      	mov	r0, r3
 800eefa:	3710      	adds	r7, #16
 800eefc:	46bd      	mov	sp, r7
 800eefe:	bd80      	pop	{r7, pc}
 800ef00:	20002e18 	.word	0x20002e18
 800ef04:	20002e20 	.word	0x20002e20
 800ef08:	20002e24 	.word	0x20002e24

0800ef0c <IOE_GetGITStatus>:
  *   @arg  Global_IT_FTH : Touch Panel Controller FIFO Threshold interrupt   
  *   @arg  Global_IT_TOUCH : Touch Panel Controller Touch Detected interrupt      
  * @retval Status of the checked flag. Could be SET or RESET.
  */
FlagStatus IOE_GetGITStatus(uint8_t Global_IT)
{
 800ef0c:	b580      	push	{r7, lr}
 800ef0e:	b084      	sub	sp, #16
 800ef10:	af00      	add	r7, sp, #0
 800ef12:	4603      	mov	r3, r0
 800ef14:	71fb      	strb	r3, [r7, #7]
  __IO uint8_t tmp = 0;
 800ef16:	2300      	movs	r3, #0
 800ef18:	73fb      	strb	r3, [r7, #15]
 
  /* Get the Interrupt status */
  tmp = I2C_ReadDeviceRegister(IOE_REG_INT_STA);
 800ef1a:	200b      	movs	r0, #11
 800ef1c:	f000 fde6 	bl	800faec <I2C_ReadDeviceRegister>
 800ef20:	4603      	mov	r3, r0
 800ef22:	73fb      	strb	r3, [r7, #15]
  
  if ((tmp & (uint8_t)Global_IT) != 0)
 800ef24:	7bfb      	ldrb	r3, [r7, #15]
 800ef26:	b2da      	uxtb	r2, r3
 800ef28:	79fb      	ldrb	r3, [r7, #7]
 800ef2a:	4013      	ands	r3, r2
 800ef2c:	b2db      	uxtb	r3, r3
 800ef2e:	2b00      	cmp	r3, #0
 800ef30:	d001      	beq.n	800ef36 <IOE_GetGITStatus+0x2a>
  {
    return SET;
 800ef32:	2301      	movs	r3, #1
 800ef34:	e000      	b.n	800ef38 <IOE_GetGITStatus+0x2c>
  }
  else
  {
    return RESET;
 800ef36:	2300      	movs	r3, #0
  }
}
 800ef38:	4618      	mov	r0, r3
 800ef3a:	3710      	adds	r7, #16
 800ef3c:	46bd      	mov	sp, r7
 800ef3e:	bd80      	pop	{r7, pc}

0800ef40 <IOE_ClearGITPending>:
  *   @arg  Global_IT_FTH : Touch Panel Controller FIFO Threshold interrupt   
  *   @arg  Global_IT_TOUCH : Touch Panel Controller Touch Detected interrupt 
  * @retval IOE_OK: if all initializations are OK. Other value if error.
  */
uint8_t IOE_ClearGITPending(uint8_t Global_IT)
{
 800ef40:	b580      	push	{r7, lr}
 800ef42:	b082      	sub	sp, #8
 800ef44:	af00      	add	r7, sp, #0
 800ef46:	4603      	mov	r3, r0
 800ef48:	71fb      	strb	r3, [r7, #7]
  /* Write 1 to the bits that have to be cleared */
  I2C_WriteDeviceRegister(IOE_REG_INT_STA, Global_IT); 
 800ef4a:	79fb      	ldrb	r3, [r7, #7]
 800ef4c:	4619      	mov	r1, r3
 800ef4e:	200b      	movs	r0, #11
 800ef50:	f000 fd1c 	bl	800f98c <I2C_WriteDeviceRegister>

  /* If all OK return IOE_OK */
  return IOE_OK;
 800ef54:	2300      	movs	r3, #0
}
 800ef56:	4618      	mov	r0, r3
 800ef58:	3708      	adds	r7, #8
 800ef5a:	46bd      	mov	sp, r7
 800ef5c:	bd80      	pop	{r7, pc}

0800ef5e <IOE_IsOperational>:
  *         communicates correctly ont the I2C bus.
  * @param  None
  * @retval IOE_OK if IOE is operational. Other value if failure.
  */
uint8_t IOE_IsOperational(void)
{
 800ef5e:	b580      	push	{r7, lr}
 800ef60:	af00      	add	r7, sp, #0
  /* Return Error if the ID is not correct */
  if( IOE_ReadID() != (uint16_t)STMPE811_ID )
 800ef62:	f000 f825 	bl	800efb0 <IOE_ReadID>
 800ef66:	4603      	mov	r3, r0
 800ef68:	461a      	mov	r2, r3
 800ef6a:	f640 0311 	movw	r3, #2065	; 0x811
 800ef6e:	429a      	cmp	r2, r3
 800ef70:	d009      	beq.n	800ef86 <IOE_IsOperational+0x28>
  {
    /* Check if a Timeout occurred */
    if (IOE_TimeOut == 0)
 800ef72:	4b06      	ldr	r3, [pc, #24]	; (800ef8c <IOE_IsOperational+0x2e>)
 800ef74:	681b      	ldr	r3, [r3, #0]
 800ef76:	2b00      	cmp	r3, #0
 800ef78:	d103      	bne.n	800ef82 <IOE_IsOperational+0x24>
    {
      return(IOE_TimeoutUserCallback());
 800ef7a:	f000 ff91 	bl	800fea0 <IOE_TimeoutUserCallback>
 800ef7e:	4603      	mov	r3, r0
 800ef80:	e002      	b.n	800ef88 <IOE_IsOperational+0x2a>
    }
    else
    {
      return IOE_FAILURE; /* ID is not Correct */
 800ef82:	2301      	movs	r3, #1
 800ef84:	e000      	b.n	800ef88 <IOE_IsOperational+0x2a>
    }
  } 
  else 
  {
    return IOE_OK; /* ID is correct */
 800ef86:	2300      	movs	r3, #0
  }
}
 800ef88:	4618      	mov	r0, r3
 800ef8a:	bd80      	pop	{r7, pc}
 800ef8c:	200000a4 	.word	0x200000a4

0800ef90 <IOE_Reset>:
  * @brief  Resets the IO Expander by Software (SYS_CTRL1, RESET bit).
  * @param  None
  * @retval IOE_OK: if all initializations are OK. Other value if error.
  */
uint8_t IOE_Reset(void)
{
 800ef90:	b580      	push	{r7, lr}
 800ef92:	af00      	add	r7, sp, #0
  /* Power Down the IO_Expander */
  I2C_WriteDeviceRegister(IOE_REG_SYS_CTRL1, 0x02);
 800ef94:	2102      	movs	r1, #2
 800ef96:	2003      	movs	r0, #3
 800ef98:	f000 fcf8 	bl	800f98c <I2C_WriteDeviceRegister>

  /* wait for a delay to insure registers erasing */
  _delay_(2); 
 800ef9c:	2002      	movs	r0, #2
 800ef9e:	f000 ffb5 	bl	800ff0c <delay>
  
  /* Power On the Codec after the power off => all registers are reinitialized*/
  I2C_WriteDeviceRegister(IOE_REG_SYS_CTRL1, 0x00);
 800efa2:	2100      	movs	r1, #0
 800efa4:	2003      	movs	r0, #3
 800efa6:	f000 fcf1 	bl	800f98c <I2C_WriteDeviceRegister>
  
  /* If all OK return IOE_OK */
  return IOE_OK;    
 800efaa:	2300      	movs	r3, #0
}
 800efac:	4618      	mov	r0, r3
 800efae:	bd80      	pop	{r7, pc}

0800efb0 <IOE_ReadID>:
  * @brief  Reads the IOE device ID.
  * @param  None
  * @retval The Device ID (two bytes).
  */
uint16_t IOE_ReadID(void)
{
 800efb0:	b580      	push	{r7, lr}
 800efb2:	b082      	sub	sp, #8
 800efb4:	af00      	add	r7, sp, #0
  uint16_t tmp = 0;
 800efb6:	2300      	movs	r3, #0
 800efb8:	80fb      	strh	r3, [r7, #6]

  /* Read device ID  */
  tmp = I2C_ReadDeviceRegister(0);
 800efba:	2000      	movs	r0, #0
 800efbc:	f000 fd96 	bl	800faec <I2C_ReadDeviceRegister>
 800efc0:	4603      	mov	r3, r0
 800efc2:	80fb      	strh	r3, [r7, #6]
  tmp = (uint32_t)(tmp << 8);
 800efc4:	88fb      	ldrh	r3, [r7, #6]
 800efc6:	021b      	lsls	r3, r3, #8
 800efc8:	80fb      	strh	r3, [r7, #6]
  tmp |= (uint32_t)I2C_ReadDeviceRegister(1);
 800efca:	2001      	movs	r0, #1
 800efcc:	f000 fd8e 	bl	800faec <I2C_ReadDeviceRegister>
 800efd0:	4603      	mov	r3, r0
 800efd2:	b29a      	uxth	r2, r3
 800efd4:	88fb      	ldrh	r3, [r7, #6]
 800efd6:	4313      	orrs	r3, r2
 800efd8:	80fb      	strh	r3, [r7, #6]
  
  /* Return the ID */
  return (uint16_t)tmp;
 800efda:	88fb      	ldrh	r3, [r7, #6]
}
 800efdc:	4618      	mov	r0, r3
 800efde:	3708      	adds	r7, #8
 800efe0:	46bd      	mov	sp, r7
 800efe2:	bd80      	pop	{r7, pc}

0800efe4 <IOE_FnctCmd>:
  *   @arg  IOE_ADC_FCT : ADC function
  * @param  NewState: can be ENABLE pr DISABLE   
  * @retval IOE_OK: if all initializations are OK. Other value if error.
  */
uint8_t IOE_FnctCmd(uint8_t Fct, FunctionalState NewState)
{
 800efe4:	b580      	push	{r7, lr}
 800efe6:	b084      	sub	sp, #16
 800efe8:	af00      	add	r7, sp, #0
 800efea:	4603      	mov	r3, r0
 800efec:	460a      	mov	r2, r1
 800efee:	71fb      	strb	r3, [r7, #7]
 800eff0:	4613      	mov	r3, r2
 800eff2:	71bb      	strb	r3, [r7, #6]
  uint8_t tmp = 0;
 800eff4:	2300      	movs	r3, #0
 800eff6:	73fb      	strb	r3, [r7, #15]
  
  /* Get the register value */
  tmp = I2C_ReadDeviceRegister(IOE_REG_SYS_CTRL2);
 800eff8:	2004      	movs	r0, #4
 800effa:	f000 fd77 	bl	800faec <I2C_ReadDeviceRegister>
 800effe:	4603      	mov	r3, r0
 800f000:	73fb      	strb	r3, [r7, #15]
  
  if (NewState != DISABLE)
 800f002:	79bb      	ldrb	r3, [r7, #6]
 800f004:	2b00      	cmp	r3, #0
 800f006:	d009      	beq.n	800f01c <IOE_FnctCmd+0x38>
  {
    /* Set the Functionalities to be Enabled */    
    tmp &= ~(uint8_t)Fct;
 800f008:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f00c:	43db      	mvns	r3, r3
 800f00e:	b25a      	sxtb	r2, r3
 800f010:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f014:	4013      	ands	r3, r2
 800f016:	b25b      	sxtb	r3, r3
 800f018:	73fb      	strb	r3, [r7, #15]
 800f01a:	e003      	b.n	800f024 <IOE_FnctCmd+0x40>
  }
  else
  {
    /* Set the Functionalities to be Disabled */    
    tmp |= (uint8_t)Fct;  
 800f01c:	7bfa      	ldrb	r2, [r7, #15]
 800f01e:	79fb      	ldrb	r3, [r7, #7]
 800f020:	4313      	orrs	r3, r2
 800f022:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Set the register value */
  I2C_WriteDeviceRegister(IOE_REG_SYS_CTRL2, tmp);
 800f024:	7bfb      	ldrb	r3, [r7, #15]
 800f026:	4619      	mov	r1, r3
 800f028:	2004      	movs	r0, #4
 800f02a:	f000 fcaf 	bl	800f98c <I2C_WriteDeviceRegister>
  
  /* If all OK return IOE_OK */
  return IOE_OK;    
 800f02e:	2300      	movs	r3, #0
}
 800f030:	4618      	mov	r0, r3
 800f032:	3710      	adds	r7, #16
 800f034:	46bd      	mov	sp, r7
 800f036:	bd80      	pop	{r7, pc}

0800f038 <IOE_GITCmd>:
  * @brief  Enables or disables the Global interrupt.
  * @param  NewState: could be ENABLE or DISABLE.        
  * @retval IOE_OK: if all initializations are OK. Other value if error.
  */
uint8_t IOE_GITCmd(FunctionalState NewState)
{
 800f038:	b580      	push	{r7, lr}
 800f03a:	b084      	sub	sp, #16
 800f03c:	af00      	add	r7, sp, #0
 800f03e:	4603      	mov	r3, r0
 800f040:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0;
 800f042:	2300      	movs	r3, #0
 800f044:	73fb      	strb	r3, [r7, #15]
  
  /* Read the Interrupt Control register  */
  tmp = I2C_ReadDeviceRegister(IOE_REG_INT_CTRL);
 800f046:	2009      	movs	r0, #9
 800f048:	f000 fd50 	bl	800faec <I2C_ReadDeviceRegister>
 800f04c:	4603      	mov	r3, r0
 800f04e:	73fb      	strb	r3, [r7, #15]
  
  if (NewState != DISABLE)
 800f050:	79fb      	ldrb	r3, [r7, #7]
 800f052:	2b00      	cmp	r3, #0
 800f054:	d004      	beq.n	800f060 <IOE_GITCmd+0x28>
  {
    /* Set the global interrupts to be Enabled */    
    tmp |= (uint8_t)IOE_GIT_EN;
 800f056:	7bfb      	ldrb	r3, [r7, #15]
 800f058:	f043 0301 	orr.w	r3, r3, #1
 800f05c:	73fb      	strb	r3, [r7, #15]
 800f05e:	e003      	b.n	800f068 <IOE_GITCmd+0x30>
  }
  else
  {
    /* Set the global interrupts to be Disabled */    
    tmp &= ~(uint8_t)IOE_GIT_EN;
 800f060:	7bfb      	ldrb	r3, [r7, #15]
 800f062:	f023 0301 	bic.w	r3, r3, #1
 800f066:	73fb      	strb	r3, [r7, #15]
  }  
  
  /* Write Back the Interrupt Control register */
  I2C_WriteDeviceRegister(IOE_REG_INT_CTRL, tmp);
 800f068:	7bfb      	ldrb	r3, [r7, #15]
 800f06a:	4619      	mov	r1, r3
 800f06c:	2009      	movs	r0, #9
 800f06e:	f000 fc8d 	bl	800f98c <I2C_WriteDeviceRegister>

  /* If all OK return IOE_OK */
  return IOE_OK;     
 800f072:	2300      	movs	r3, #0
}
 800f074:	4618      	mov	r0, r3
 800f076:	3710      	adds	r7, #16
 800f078:	46bd      	mov	sp, r7
 800f07a:	bd80      	pop	{r7, pc}

0800f07c <IOE_GITConfig>:
  *   @arg  Global_IT_TOUCH : Touch Panel Controller Touch Detected interrupt 
  * @param  NewState: can be ENABLE pr DISABLE   
  * @retval IOE_OK: if all initializations are OK. Other value if error.
  */
uint8_t IOE_GITConfig(uint8_t Global_IT, FunctionalState NewState)
{
 800f07c:	b580      	push	{r7, lr}
 800f07e:	b084      	sub	sp, #16
 800f080:	af00      	add	r7, sp, #0
 800f082:	4603      	mov	r3, r0
 800f084:	460a      	mov	r2, r1
 800f086:	71fb      	strb	r3, [r7, #7]
 800f088:	4613      	mov	r3, r2
 800f08a:	71bb      	strb	r3, [r7, #6]
  uint8_t tmp = 0;
 800f08c:	2300      	movs	r3, #0
 800f08e:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current value of the INT_EN register */
  tmp = I2C_ReadDeviceRegister(IOE_REG_INT_EN);
 800f090:	200a      	movs	r0, #10
 800f092:	f000 fd2b 	bl	800faec <I2C_ReadDeviceRegister>
 800f096:	4603      	mov	r3, r0
 800f098:	73fb      	strb	r3, [r7, #15]
  
  if (NewState != DISABLE)
 800f09a:	79bb      	ldrb	r3, [r7, #6]
 800f09c:	2b00      	cmp	r3, #0
 800f09e:	d004      	beq.n	800f0aa <IOE_GITConfig+0x2e>
  {
    /* Set the interrupts to be Enabled */    
    tmp |= (uint8_t)Global_IT;  
 800f0a0:	7bfa      	ldrb	r2, [r7, #15]
 800f0a2:	79fb      	ldrb	r3, [r7, #7]
 800f0a4:	4313      	orrs	r3, r2
 800f0a6:	73fb      	strb	r3, [r7, #15]
 800f0a8:	e008      	b.n	800f0bc <IOE_GITConfig+0x40>
  }
  else
  {
    /* Set the interrupts to be Disabled */    
    tmp &= ~(uint8_t)Global_IT;
 800f0aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f0ae:	43db      	mvns	r3, r3
 800f0b0:	b25a      	sxtb	r2, r3
 800f0b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f0b6:	4013      	ands	r3, r2
 800f0b8:	b25b      	sxtb	r3, r3
 800f0ba:	73fb      	strb	r3, [r7, #15]
  }
  /* Set the register */
  I2C_WriteDeviceRegister(IOE_REG_INT_EN, tmp);
 800f0bc:	7bfb      	ldrb	r3, [r7, #15]
 800f0be:	4619      	mov	r1, r3
 800f0c0:	200a      	movs	r0, #10
 800f0c2:	f000 fc63 	bl	800f98c <I2C_WriteDeviceRegister>
  
  /* If all OK return IOE_OK */
  return IOE_OK;  
 800f0c6:	2300      	movs	r3, #0
}
 800f0c8:	4618      	mov	r0, r3
 800f0ca:	3710      	adds	r7, #16
 800f0cc:	46bd      	mov	sp, r7
 800f0ce:	bd80      	pop	{r7, pc}

0800f0d0 <IOE_TP_Config>:
  * @brief  Configures the touch Panel Controller (Single point detection)
  * @param  None
  * @retval IOE_OK if all initializations are OK. Other value if error.
  */
uint8_t IOE_TP_Config(void)
{ 
 800f0d0:	b580      	push	{r7, lr}
 800f0d2:	af00      	add	r7, sp, #0
  /* Enable touch Panel functionality */
  IOE_FnctCmd(IOE_TP_FCT, ENABLE);
 800f0d4:	2101      	movs	r1, #1
 800f0d6:	2002      	movs	r0, #2
 800f0d8:	f7ff ff84 	bl	800efe4 <IOE_FnctCmd>
  
  /* Select Sample Time, bit number and ADC Reference */
  I2C_WriteDeviceRegister(IOE_REG_ADC_CTRL1, 0x49);
 800f0dc:	2149      	movs	r1, #73	; 0x49
 800f0de:	2020      	movs	r0, #32
 800f0e0:	f000 fc54 	bl	800f98c <I2C_WriteDeviceRegister>
  
  /* Wait for ~20 ms */
  _delay_(2);  
 800f0e4:	2002      	movs	r0, #2
 800f0e6:	f000 ff11 	bl	800ff0c <delay>
  
  /* Select the ADC clock speed: 3.25 MHz */
  I2C_WriteDeviceRegister(IOE_REG_ADC_CTRL2, 0x01);
 800f0ea:	2101      	movs	r1, #1
 800f0ec:	2021      	movs	r0, #33	; 0x21
 800f0ee:	f000 fc4d 	bl	800f98c <I2C_WriteDeviceRegister>
  
  /* Select TSC pins in non default mode */  
  IOE_IOAFConfig((uint8_t)TOUCH_IO_ALL, DISABLE);
 800f0f2:	2100      	movs	r1, #0
 800f0f4:	201e      	movs	r0, #30
 800f0f6:	f000 f835 	bl	800f164 <IOE_IOAFConfig>
  
  /* Select 2 nF filter capacitor */
  I2C_WriteDeviceRegister(IOE_REG_TP_CFG, 0x9A);   
 800f0fa:	219a      	movs	r1, #154	; 0x9a
 800f0fc:	2041      	movs	r0, #65	; 0x41
 800f0fe:	f000 fc45 	bl	800f98c <I2C_WriteDeviceRegister>
  
  /* Select single point reading  */
  I2C_WriteDeviceRegister(IOE_REG_FIFO_TH, 0x01);
 800f102:	2101      	movs	r1, #1
 800f104:	204a      	movs	r0, #74	; 0x4a
 800f106:	f000 fc41 	bl	800f98c <I2C_WriteDeviceRegister>
  
  /* Write 0x01 to clear the FIFO memory content. */
  I2C_WriteDeviceRegister(IOE_REG_FIFO_STA, 0x01);
 800f10a:	2101      	movs	r1, #1
 800f10c:	204b      	movs	r0, #75	; 0x4b
 800f10e:	f000 fc3d 	bl	800f98c <I2C_WriteDeviceRegister>
  
  /* Write 0x00 to put the FIFO back into operation mode  */
  I2C_WriteDeviceRegister(IOE_REG_FIFO_STA, 0x00);
 800f112:	2100      	movs	r1, #0
 800f114:	204b      	movs	r0, #75	; 0x4b
 800f116:	f000 fc39 	bl	800f98c <I2C_WriteDeviceRegister>
  
  /* set the data format for Z value: 7 fractional part and 1 whole part */
  I2C_WriteDeviceRegister(IOE_REG_TP_FRACT_XYZ, 0x01);
 800f11a:	2101      	movs	r1, #1
 800f11c:	2056      	movs	r0, #86	; 0x56
 800f11e:	f000 fc35 	bl	800f98c <I2C_WriteDeviceRegister>
  
  /* set the driving capability of the device for TSC pins: 50mA */
  I2C_WriteDeviceRegister(IOE_REG_TP_I_DRIVE, 0x01);
 800f122:	2101      	movs	r1, #1
 800f124:	2058      	movs	r0, #88	; 0x58
 800f126:	f000 fc31 	bl	800f98c <I2C_WriteDeviceRegister>
  
  /* Use no tracking index, touch-panel controller operation mode (XYZ) and 
     enable the TSC */
  I2C_WriteDeviceRegister(IOE_REG_TP_CTRL, 0x03);
 800f12a:	2103      	movs	r1, #3
 800f12c:	2040      	movs	r0, #64	; 0x40
 800f12e:	f000 fc2d 	bl	800f98c <I2C_WriteDeviceRegister>
  
  /*  Clear all the status pending bits */
  I2C_WriteDeviceRegister(IOE_REG_INT_STA, 0xFF); 
 800f132:	21ff      	movs	r1, #255	; 0xff
 800f134:	200b      	movs	r0, #11
 800f136:	f000 fc29 	bl	800f98c <I2C_WriteDeviceRegister>
  
  /* Initialize the TS structure to their default values */ 
  TP_State.TouchDetected = TP_State.X = TP_State.Y = TP_State.Z = 0;
 800f13a:	4b09      	ldr	r3, [pc, #36]	; (800f160 <IOE_TP_Config+0x90>)
 800f13c:	2200      	movs	r2, #0
 800f13e:	80da      	strh	r2, [r3, #6]
 800f140:	4b07      	ldr	r3, [pc, #28]	; (800f160 <IOE_TP_Config+0x90>)
 800f142:	88da      	ldrh	r2, [r3, #6]
 800f144:	4b06      	ldr	r3, [pc, #24]	; (800f160 <IOE_TP_Config+0x90>)
 800f146:	809a      	strh	r2, [r3, #4]
 800f148:	4b05      	ldr	r3, [pc, #20]	; (800f160 <IOE_TP_Config+0x90>)
 800f14a:	889a      	ldrh	r2, [r3, #4]
 800f14c:	4b04      	ldr	r3, [pc, #16]	; (800f160 <IOE_TP_Config+0x90>)
 800f14e:	805a      	strh	r2, [r3, #2]
 800f150:	4b03      	ldr	r3, [pc, #12]	; (800f160 <IOE_TP_Config+0x90>)
 800f152:	885a      	ldrh	r2, [r3, #2]
 800f154:	4b02      	ldr	r3, [pc, #8]	; (800f160 <IOE_TP_Config+0x90>)
 800f156:	801a      	strh	r2, [r3, #0]
  
  /* All configuration done */
  return IOE_OK;  
 800f158:	2300      	movs	r3, #0
}
 800f15a:	4618      	mov	r0, r3
 800f15c:	bd80      	pop	{r7, pc}
 800f15e:	bf00      	nop
 800f160:	20002e18 	.word	0x20002e18

0800f164 <IOE_IOAFConfig>:
  * @param  NewState: State of the AF for the selected pin, could be 
  *         ENABLE or DISABLE.       
  * @retval IOE_OK: if all initializations are OK. Other value if error.
  */
uint8_t IOE_IOAFConfig(uint8_t IO_Pin, FunctionalState NewState)
{
 800f164:	b580      	push	{r7, lr}
 800f166:	b084      	sub	sp, #16
 800f168:	af00      	add	r7, sp, #0
 800f16a:	4603      	mov	r3, r0
 800f16c:	460a      	mov	r2, r1
 800f16e:	71fb      	strb	r3, [r7, #7]
 800f170:	4613      	mov	r3, r2
 800f172:	71bb      	strb	r3, [r7, #6]
  uint8_t tmp = 0;
 800f174:	2300      	movs	r3, #0
 800f176:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current state of the GPIO_AF register */
  tmp = I2C_ReadDeviceRegister(IOE_REG_GPIO_AF);
 800f178:	2017      	movs	r0, #23
 800f17a:	f000 fcb7 	bl	800faec <I2C_ReadDeviceRegister>
 800f17e:	4603      	mov	r3, r0
 800f180:	73fb      	strb	r3, [r7, #15]
  
  if (NewState != DISABLE)
 800f182:	79bb      	ldrb	r3, [r7, #6]
 800f184:	2b00      	cmp	r3, #0
 800f186:	d004      	beq.n	800f192 <IOE_IOAFConfig+0x2e>
  {
    /* Enable the selected pins alternate function */
    tmp |= (uint8_t)IO_Pin;
 800f188:	7bfa      	ldrb	r2, [r7, #15]
 800f18a:	79fb      	ldrb	r3, [r7, #7]
 800f18c:	4313      	orrs	r3, r2
 800f18e:	73fb      	strb	r3, [r7, #15]
 800f190:	e008      	b.n	800f1a4 <IOE_IOAFConfig+0x40>
  }
  else
  {
    /* Disable the selected pins alternate function */   
    tmp &= ~(uint8_t)IO_Pin;   
 800f192:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f196:	43db      	mvns	r3, r3
 800f198:	b25a      	sxtb	r2, r3
 800f19a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f19e:	4013      	ands	r3, r2
 800f1a0:	b25b      	sxtb	r3, r3
 800f1a2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Write back the new value in GPIO_AF register */  
  I2C_WriteDeviceRegister(IOE_REG_GPIO_AF, tmp);  
 800f1a4:	7bfb      	ldrb	r3, [r7, #15]
 800f1a6:	4619      	mov	r1, r3
 800f1a8:	2017      	movs	r0, #23
 800f1aa:	f000 fbef 	bl	800f98c <I2C_WriteDeviceRegister>

  /* If all OK return IOE_OK */
  return IOE_OK;
 800f1ae:	2300      	movs	r3, #0
}
 800f1b0:	4618      	mov	r0, r3
 800f1b2:	3710      	adds	r7, #16
 800f1b4:	46bd      	mov	sp, r7
 800f1b6:	bd80      	pop	{r7, pc}

0800f1b8 <I2C_DMA_WriteDeviceRegister>:
  * @param  RegisterAddr: The target register address
  * @param  RegisterValue: The target register value to be written 
  * @retval IOE_OK: if all operations are OK. Other value if error.
  */
uint8_t I2C_DMA_WriteDeviceRegister(uint8_t RegisterAddr, uint8_t RegisterValue)
{
 800f1b8:	b580      	push	{r7, lr}
 800f1ba:	b084      	sub	sp, #16
 800f1bc:	af00      	add	r7, sp, #0
 800f1be:	4603      	mov	r3, r0
 800f1c0:	460a      	mov	r2, r1
 800f1c2:	71fb      	strb	r3, [r7, #7]
 800f1c4:	4613      	mov	r3, r2
 800f1c6:	71bb      	strb	r3, [r7, #6]
  uint32_t read_verif = 0;  
 800f1c8:	2300      	movs	r3, #0
 800f1ca:	60fb      	str	r3, [r7, #12]
  uint8_t IOE_BufferTX = 0;
 800f1cc:	2300      	movs	r3, #0
 800f1ce:	72fb      	strb	r3, [r7, #11]
  
  /* Get Value to be written */
  IOE_BufferTX = RegisterValue;
 800f1d0:	79bb      	ldrb	r3, [r7, #6]
 800f1d2:	72fb      	strb	r3, [r7, #11]
  
  /* Configure DMA Peripheral */
  IOE_DMA_Config(IOE_DMA_TX, (uint8_t*)(&IOE_BufferTX));
 800f1d4:	f107 030b 	add.w	r3, r7, #11
 800f1d8:	4619      	mov	r1, r3
 800f1da:	2000      	movs	r0, #0
 800f1dc:	f000 fb84 	bl	800f8e8 <IOE_DMA_Config>
  
  /* Enable the I2C peripheral */
  I2C_GenerateSTART(IOE_I2C, ENABLE);
 800f1e0:	2101      	movs	r1, #1
 800f1e2:	4852      	ldr	r0, [pc, #328]	; (800f32c <I2C_DMA_WriteDeviceRegister+0x174>)
 800f1e4:	f7f7 fd1d 	bl	8006c22 <I2C_GenerateSTART>
  
  /* Test on SB Flag */
  IOE_TimeOut = TIMEOUT_MAX;
 800f1e8:	4b51      	ldr	r3, [pc, #324]	; (800f330 <I2C_DMA_WriteDeviceRegister+0x178>)
 800f1ea:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800f1ee:	601a      	str	r2, [r3, #0]
  while (I2C_GetFlagStatus(IOE_I2C,I2C_FLAG_SB) == RESET) 
 800f1f0:	e00a      	b.n	800f208 <I2C_DMA_WriteDeviceRegister+0x50>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
 800f1f2:	4b4f      	ldr	r3, [pc, #316]	; (800f330 <I2C_DMA_WriteDeviceRegister+0x178>)
 800f1f4:	681b      	ldr	r3, [r3, #0]
 800f1f6:	1e5a      	subs	r2, r3, #1
 800f1f8:	494d      	ldr	r1, [pc, #308]	; (800f330 <I2C_DMA_WriteDeviceRegister+0x178>)
 800f1fa:	600a      	str	r2, [r1, #0]
 800f1fc:	2b00      	cmp	r3, #0
 800f1fe:	d103      	bne.n	800f208 <I2C_DMA_WriteDeviceRegister+0x50>
 800f200:	f000 fe4e 	bl	800fea0 <IOE_TimeoutUserCallback>
 800f204:	4603      	mov	r3, r0
 800f206:	e08c      	b.n	800f322 <I2C_DMA_WriteDeviceRegister+0x16a>
  while (I2C_GetFlagStatus(IOE_I2C,I2C_FLAG_SB) == RESET) 
 800f208:	494a      	ldr	r1, [pc, #296]	; (800f334 <I2C_DMA_WriteDeviceRegister+0x17c>)
 800f20a:	4848      	ldr	r0, [pc, #288]	; (800f32c <I2C_DMA_WriteDeviceRegister+0x174>)
 800f20c:	f7f8 f80a 	bl	8007224 <I2C_GetFlagStatus>
 800f210:	4603      	mov	r3, r0
 800f212:	2b00      	cmp	r3, #0
 800f214:	d0ed      	beq.n	800f1f2 <I2C_DMA_WriteDeviceRegister+0x3a>
  }
  
  /* Transmit the slave address and enable writing operation */
  I2C_Send7bitAddress(IOE_I2C, IOE_ADDR, I2C_Direction_Transmitter);
 800f216:	2200      	movs	r2, #0
 800f218:	2182      	movs	r1, #130	; 0x82
 800f21a:	4844      	ldr	r0, [pc, #272]	; (800f32c <I2C_DMA_WriteDeviceRegister+0x174>)
 800f21c:	f7f7 fd41 	bl	8006ca2 <I2C_Send7bitAddress>
  
  /* Test on ADDR Flag */
  IOE_TimeOut = TIMEOUT_MAX;
 800f220:	4b43      	ldr	r3, [pc, #268]	; (800f330 <I2C_DMA_WriteDeviceRegister+0x178>)
 800f222:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800f226:	601a      	str	r2, [r3, #0]
  while (!I2C_CheckEvent(IOE_I2C, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED))
 800f228:	e00a      	b.n	800f240 <I2C_DMA_WriteDeviceRegister+0x88>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
 800f22a:	4b41      	ldr	r3, [pc, #260]	; (800f330 <I2C_DMA_WriteDeviceRegister+0x178>)
 800f22c:	681b      	ldr	r3, [r3, #0]
 800f22e:	1e5a      	subs	r2, r3, #1
 800f230:	493f      	ldr	r1, [pc, #252]	; (800f330 <I2C_DMA_WriteDeviceRegister+0x178>)
 800f232:	600a      	str	r2, [r1, #0]
 800f234:	2b00      	cmp	r3, #0
 800f236:	d103      	bne.n	800f240 <I2C_DMA_WriteDeviceRegister+0x88>
 800f238:	f000 fe32 	bl	800fea0 <IOE_TimeoutUserCallback>
 800f23c:	4603      	mov	r3, r0
 800f23e:	e070      	b.n	800f322 <I2C_DMA_WriteDeviceRegister+0x16a>
  while (!I2C_CheckEvent(IOE_I2C, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED))
 800f240:	493d      	ldr	r1, [pc, #244]	; (800f338 <I2C_DMA_WriteDeviceRegister+0x180>)
 800f242:	483a      	ldr	r0, [pc, #232]	; (800f32c <I2C_DMA_WriteDeviceRegister+0x174>)
 800f244:	f7f7 ff9c 	bl	8007180 <I2C_CheckEvent>
 800f248:	4603      	mov	r3, r0
 800f24a:	2b00      	cmp	r3, #0
 800f24c:	d0ed      	beq.n	800f22a <I2C_DMA_WriteDeviceRegister+0x72>
  }
  
  /* Transmit the first address for r/w operations */
  I2C_SendData(IOE_I2C, RegisterAddr);
 800f24e:	79fb      	ldrb	r3, [r7, #7]
 800f250:	4619      	mov	r1, r3
 800f252:	4836      	ldr	r0, [pc, #216]	; (800f32c <I2C_DMA_WriteDeviceRegister+0x174>)
 800f254:	f7f7 fe8a 	bl	8006f6c <I2C_SendData>
  
  /* Test on TXE FLag (data dent) */
  IOE_TimeOut = TIMEOUT_MAX;
 800f258:	4b35      	ldr	r3, [pc, #212]	; (800f330 <I2C_DMA_WriteDeviceRegister+0x178>)
 800f25a:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800f25e:	601a      	str	r2, [r3, #0]
  while ((!I2C_GetFlagStatus(IOE_I2C,I2C_FLAG_TXE)) && (!I2C_GetFlagStatus(IOE_I2C,I2C_FLAG_BTF)))  
 800f260:	e00a      	b.n	800f278 <I2C_DMA_WriteDeviceRegister+0xc0>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
 800f262:	4b33      	ldr	r3, [pc, #204]	; (800f330 <I2C_DMA_WriteDeviceRegister+0x178>)
 800f264:	681b      	ldr	r3, [r3, #0]
 800f266:	1e5a      	subs	r2, r3, #1
 800f268:	4931      	ldr	r1, [pc, #196]	; (800f330 <I2C_DMA_WriteDeviceRegister+0x178>)
 800f26a:	600a      	str	r2, [r1, #0]
 800f26c:	2b00      	cmp	r3, #0
 800f26e:	d103      	bne.n	800f278 <I2C_DMA_WriteDeviceRegister+0xc0>
 800f270:	f000 fe16 	bl	800fea0 <IOE_TimeoutUserCallback>
 800f274:	4603      	mov	r3, r0
 800f276:	e054      	b.n	800f322 <I2C_DMA_WriteDeviceRegister+0x16a>
  while ((!I2C_GetFlagStatus(IOE_I2C,I2C_FLAG_TXE)) && (!I2C_GetFlagStatus(IOE_I2C,I2C_FLAG_BTF)))  
 800f278:	4930      	ldr	r1, [pc, #192]	; (800f33c <I2C_DMA_WriteDeviceRegister+0x184>)
 800f27a:	482c      	ldr	r0, [pc, #176]	; (800f32c <I2C_DMA_WriteDeviceRegister+0x174>)
 800f27c:	f7f7 ffd2 	bl	8007224 <I2C_GetFlagStatus>
 800f280:	4603      	mov	r3, r0
 800f282:	2b00      	cmp	r3, #0
 800f284:	d106      	bne.n	800f294 <I2C_DMA_WriteDeviceRegister+0xdc>
 800f286:	492e      	ldr	r1, [pc, #184]	; (800f340 <I2C_DMA_WriteDeviceRegister+0x188>)
 800f288:	4828      	ldr	r0, [pc, #160]	; (800f32c <I2C_DMA_WriteDeviceRegister+0x174>)
 800f28a:	f7f7 ffcb 	bl	8007224 <I2C_GetFlagStatus>
 800f28e:	4603      	mov	r3, r0
 800f290:	2b00      	cmp	r3, #0
 800f292:	d0e6      	beq.n	800f262 <I2C_DMA_WriteDeviceRegister+0xaa>
  }
  
  /* Enable I2C DMA request */
  I2C_DMACmd(IOE_I2C,ENABLE);
 800f294:	2101      	movs	r1, #1
 800f296:	4825      	ldr	r0, [pc, #148]	; (800f32c <I2C_DMA_WriteDeviceRegister+0x174>)
 800f298:	f7f7 fef7 	bl	800708a <I2C_DMACmd>
  
  /* Enable DMA TX Channel */
  DMA_Cmd(IOE_DMA_TX_STREAM, ENABLE);
 800f29c:	2101      	movs	r1, #1
 800f29e:	4829      	ldr	r0, [pc, #164]	; (800f344 <I2C_DMA_WriteDeviceRegister+0x18c>)
 800f2a0:	f7f4 fded 	bl	8003e7e <DMA_Cmd>
  
  /* Wait until DMA Transfer Complete */
  IOE_TimeOut = TIMEOUT_MAX;
 800f2a4:	4b22      	ldr	r3, [pc, #136]	; (800f330 <I2C_DMA_WriteDeviceRegister+0x178>)
 800f2a6:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800f2aa:	601a      	str	r2, [r3, #0]
  while (!DMA_GetFlagStatus(IOE_DMA_TX_STREAM,IOE_DMA_TX_TCFLAG))
 800f2ac:	e00a      	b.n	800f2c4 <I2C_DMA_WriteDeviceRegister+0x10c>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
 800f2ae:	4b20      	ldr	r3, [pc, #128]	; (800f330 <I2C_DMA_WriteDeviceRegister+0x178>)
 800f2b0:	681b      	ldr	r3, [r3, #0]
 800f2b2:	1e5a      	subs	r2, r3, #1
 800f2b4:	491e      	ldr	r1, [pc, #120]	; (800f330 <I2C_DMA_WriteDeviceRegister+0x178>)
 800f2b6:	600a      	str	r2, [r1, #0]
 800f2b8:	2b00      	cmp	r3, #0
 800f2ba:	d103      	bne.n	800f2c4 <I2C_DMA_WriteDeviceRegister+0x10c>
 800f2bc:	f000 fdf0 	bl	800fea0 <IOE_TimeoutUserCallback>
 800f2c0:	4603      	mov	r3, r0
 800f2c2:	e02e      	b.n	800f322 <I2C_DMA_WriteDeviceRegister+0x16a>
  while (!DMA_GetFlagStatus(IOE_DMA_TX_STREAM,IOE_DMA_TX_TCFLAG))
 800f2c4:	4920      	ldr	r1, [pc, #128]	; (800f348 <I2C_DMA_WriteDeviceRegister+0x190>)
 800f2c6:	481f      	ldr	r0, [pc, #124]	; (800f344 <I2C_DMA_WriteDeviceRegister+0x18c>)
 800f2c8:	f7f4 feda 	bl	8004080 <DMA_GetFlagStatus>
 800f2cc:	4603      	mov	r3, r0
 800f2ce:	2b00      	cmp	r3, #0
 800f2d0:	d0ed      	beq.n	800f2ae <I2C_DMA_WriteDeviceRegister+0xf6>
  }  
  
  /* Wait until BTF Flag is set before generating STOP */
  IOE_TimeOut = 0xFF * TIMEOUT_MAX;
 800f2d2:	4b17      	ldr	r3, [pc, #92]	; (800f330 <I2C_DMA_WriteDeviceRegister+0x178>)
 800f2d4:	4a1d      	ldr	r2, [pc, #116]	; (800f34c <I2C_DMA_WriteDeviceRegister+0x194>)
 800f2d6:	601a      	str	r2, [r3, #0]
  while ((!I2C_GetFlagStatus(IOE_I2C,I2C_FLAG_BTF)))  
 800f2d8:	e00a      	b.n	800f2f0 <I2C_DMA_WriteDeviceRegister+0x138>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
 800f2da:	4b15      	ldr	r3, [pc, #84]	; (800f330 <I2C_DMA_WriteDeviceRegister+0x178>)
 800f2dc:	681b      	ldr	r3, [r3, #0]
 800f2de:	1e5a      	subs	r2, r3, #1
 800f2e0:	4913      	ldr	r1, [pc, #76]	; (800f330 <I2C_DMA_WriteDeviceRegister+0x178>)
 800f2e2:	600a      	str	r2, [r1, #0]
 800f2e4:	2b00      	cmp	r3, #0
 800f2e6:	d103      	bne.n	800f2f0 <I2C_DMA_WriteDeviceRegister+0x138>
 800f2e8:	f000 fdda 	bl	800fea0 <IOE_TimeoutUserCallback>
 800f2ec:	4603      	mov	r3, r0
 800f2ee:	e018      	b.n	800f322 <I2C_DMA_WriteDeviceRegister+0x16a>
  while ((!I2C_GetFlagStatus(IOE_I2C,I2C_FLAG_BTF)))  
 800f2f0:	4913      	ldr	r1, [pc, #76]	; (800f340 <I2C_DMA_WriteDeviceRegister+0x188>)
 800f2f2:	480e      	ldr	r0, [pc, #56]	; (800f32c <I2C_DMA_WriteDeviceRegister+0x174>)
 800f2f4:	f7f7 ff96 	bl	8007224 <I2C_GetFlagStatus>
 800f2f8:	4603      	mov	r3, r0
 800f2fa:	2b00      	cmp	r3, #0
 800f2fc:	d0ed      	beq.n	800f2da <I2C_DMA_WriteDeviceRegister+0x122>
  }
  
  /* Send STOP Condition */
  I2C_GenerateSTOP(IOE_I2C, ENABLE);
 800f2fe:	2101      	movs	r1, #1
 800f300:	480a      	ldr	r0, [pc, #40]	; (800f32c <I2C_DMA_WriteDeviceRegister+0x174>)
 800f302:	f7f7 fcae 	bl	8006c62 <I2C_GenerateSTOP>
  
  /* Disable DMA TX Channel */
  DMA_Cmd(IOE_DMA_TX_STREAM, DISABLE);
 800f306:	2100      	movs	r1, #0
 800f308:	480e      	ldr	r0, [pc, #56]	; (800f344 <I2C_DMA_WriteDeviceRegister+0x18c>)
 800f30a:	f7f4 fdb8 	bl	8003e7e <DMA_Cmd>
  
  /* Disable I2C DMA request */  
  I2C_DMACmd(IOE_I2C,DISABLE);
 800f30e:	2100      	movs	r1, #0
 800f310:	4806      	ldr	r0, [pc, #24]	; (800f32c <I2C_DMA_WriteDeviceRegister+0x174>)
 800f312:	f7f7 feba 	bl	800708a <I2C_DMACmd>
  
  /* Clear DMA TX Transfer Complete Flag */
  DMA_ClearFlag(IOE_DMA_TX_STREAM,IOE_DMA_TX_TCFLAG);
 800f316:	490c      	ldr	r1, [pc, #48]	; (800f348 <I2C_DMA_WriteDeviceRegister+0x190>)
 800f318:	480a      	ldr	r0, [pc, #40]	; (800f344 <I2C_DMA_WriteDeviceRegister+0x18c>)
 800f31a:	f7f4 feed 	bl	80040f8 <DMA_ClearFlag>
    read_verif = 0;
  }
#endif
  
  /* Return the verifying value: 0 (Passed) or 1 (Failed) */
  return read_verif;
 800f31e:	68fb      	ldr	r3, [r7, #12]
 800f320:	b2db      	uxtb	r3, r3
}
 800f322:	4618      	mov	r0, r3
 800f324:	3710      	adds	r7, #16
 800f326:	46bd      	mov	sp, r7
 800f328:	bd80      	pop	{r7, pc}
 800f32a:	bf00      	nop
 800f32c:	40005c00 	.word	0x40005c00
 800f330:	200000a4 	.word	0x200000a4
 800f334:	10000001 	.word	0x10000001
 800f338:	00070082 	.word	0x00070082
 800f33c:	10000080 	.word	0x10000080
 800f340:	10000004 	.word	0x10000004
 800f344:	400260a0 	.word	0x400260a0
 800f348:	20200000 	.word	0x20200000
 800f34c:	002fd000 	.word	0x002fd000

0800f350 <I2C_DMA_ReadDeviceRegister>:
  * @brief  Reads a register of the device through I2C.
  * @param  RegisterAddr: The target register address (between 00x and 0x24)
  * @retval The value of the read register (0xAA if Timeout occurred)   
  */
uint8_t I2C_DMA_ReadDeviceRegister(uint8_t RegisterAddr)
{
 800f350:	b580      	push	{r7, lr}
 800f352:	b084      	sub	sp, #16
 800f354:	af00      	add	r7, sp, #0
 800f356:	4603      	mov	r3, r0
 800f358:	71fb      	strb	r3, [r7, #7]
  uint8_t IOE_BufferRX[2] = {0x00, 0x00};  
 800f35a:	2300      	movs	r3, #0
 800f35c:	733b      	strb	r3, [r7, #12]
 800f35e:	2300      	movs	r3, #0
 800f360:	737b      	strb	r3, [r7, #13]
  
  /* Configure DMA Peripheral */
  IOE_DMA_Config(IOE_DMA_RX, (uint8_t*)IOE_BufferRX);
 800f362:	f107 030c 	add.w	r3, r7, #12
 800f366:	4619      	mov	r1, r3
 800f368:	2001      	movs	r0, #1
 800f36a:	f000 fabd 	bl	800f8e8 <IOE_DMA_Config>
  
  /* Enable DMA NACK automatic generation */
  I2C_DMALastTransferCmd(IOE_I2C, ENABLE);
 800f36e:	2101      	movs	r1, #1
 800f370:	4863      	ldr	r0, [pc, #396]	; (800f500 <I2C_DMA_ReadDeviceRegister+0x1b0>)
 800f372:	f7f7 feaa 	bl	80070ca <I2C_DMALastTransferCmd>
  
  /* Enable the I2C peripheral */
  I2C_GenerateSTART(IOE_I2C, ENABLE);
 800f376:	2101      	movs	r1, #1
 800f378:	4861      	ldr	r0, [pc, #388]	; (800f500 <I2C_DMA_ReadDeviceRegister+0x1b0>)
 800f37a:	f7f7 fc52 	bl	8006c22 <I2C_GenerateSTART>
  
  /* Test on SB Flag */
  IOE_TimeOut = TIMEOUT_MAX;
 800f37e:	4b61      	ldr	r3, [pc, #388]	; (800f504 <I2C_DMA_ReadDeviceRegister+0x1b4>)
 800f380:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800f384:	601a      	str	r2, [r3, #0]
  while (!I2C_GetFlagStatus(IOE_I2C,I2C_FLAG_SB)) 
 800f386:	e00a      	b.n	800f39e <I2C_DMA_ReadDeviceRegister+0x4e>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
 800f388:	4b5e      	ldr	r3, [pc, #376]	; (800f504 <I2C_DMA_ReadDeviceRegister+0x1b4>)
 800f38a:	681b      	ldr	r3, [r3, #0]
 800f38c:	1e5a      	subs	r2, r3, #1
 800f38e:	495d      	ldr	r1, [pc, #372]	; (800f504 <I2C_DMA_ReadDeviceRegister+0x1b4>)
 800f390:	600a      	str	r2, [r1, #0]
 800f392:	2b00      	cmp	r3, #0
 800f394:	d103      	bne.n	800f39e <I2C_DMA_ReadDeviceRegister+0x4e>
 800f396:	f000 fd83 	bl	800fea0 <IOE_TimeoutUserCallback>
 800f39a:	4603      	mov	r3, r0
 800f39c:	e0ac      	b.n	800f4f8 <I2C_DMA_ReadDeviceRegister+0x1a8>
  while (!I2C_GetFlagStatus(IOE_I2C,I2C_FLAG_SB)) 
 800f39e:	495a      	ldr	r1, [pc, #360]	; (800f508 <I2C_DMA_ReadDeviceRegister+0x1b8>)
 800f3a0:	4857      	ldr	r0, [pc, #348]	; (800f500 <I2C_DMA_ReadDeviceRegister+0x1b0>)
 800f3a2:	f7f7 ff3f 	bl	8007224 <I2C_GetFlagStatus>
 800f3a6:	4603      	mov	r3, r0
 800f3a8:	2b00      	cmp	r3, #0
 800f3aa:	d0ed      	beq.n	800f388 <I2C_DMA_ReadDeviceRegister+0x38>
  }
  
  /* Send device address for write */
  I2C_Send7bitAddress(IOE_I2C, IOE_ADDR, I2C_Direction_Transmitter);
 800f3ac:	2200      	movs	r2, #0
 800f3ae:	2182      	movs	r1, #130	; 0x82
 800f3b0:	4853      	ldr	r0, [pc, #332]	; (800f500 <I2C_DMA_ReadDeviceRegister+0x1b0>)
 800f3b2:	f7f7 fc76 	bl	8006ca2 <I2C_Send7bitAddress>
  
  /* Test on ADDR Flag */
  IOE_TimeOut = TIMEOUT_MAX;
 800f3b6:	4b53      	ldr	r3, [pc, #332]	; (800f504 <I2C_DMA_ReadDeviceRegister+0x1b4>)
 800f3b8:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800f3bc:	601a      	str	r2, [r3, #0]
  while (!I2C_CheckEvent(IOE_I2C, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED)) 
 800f3be:	e00a      	b.n	800f3d6 <I2C_DMA_ReadDeviceRegister+0x86>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
 800f3c0:	4b50      	ldr	r3, [pc, #320]	; (800f504 <I2C_DMA_ReadDeviceRegister+0x1b4>)
 800f3c2:	681b      	ldr	r3, [r3, #0]
 800f3c4:	1e5a      	subs	r2, r3, #1
 800f3c6:	494f      	ldr	r1, [pc, #316]	; (800f504 <I2C_DMA_ReadDeviceRegister+0x1b4>)
 800f3c8:	600a      	str	r2, [r1, #0]
 800f3ca:	2b00      	cmp	r3, #0
 800f3cc:	d103      	bne.n	800f3d6 <I2C_DMA_ReadDeviceRegister+0x86>
 800f3ce:	f000 fd67 	bl	800fea0 <IOE_TimeoutUserCallback>
 800f3d2:	4603      	mov	r3, r0
 800f3d4:	e090      	b.n	800f4f8 <I2C_DMA_ReadDeviceRegister+0x1a8>
  while (!I2C_CheckEvent(IOE_I2C, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED)) 
 800f3d6:	494d      	ldr	r1, [pc, #308]	; (800f50c <I2C_DMA_ReadDeviceRegister+0x1bc>)
 800f3d8:	4849      	ldr	r0, [pc, #292]	; (800f500 <I2C_DMA_ReadDeviceRegister+0x1b0>)
 800f3da:	f7f7 fed1 	bl	8007180 <I2C_CheckEvent>
 800f3de:	4603      	mov	r3, r0
 800f3e0:	2b00      	cmp	r3, #0
 800f3e2:	d0ed      	beq.n	800f3c0 <I2C_DMA_ReadDeviceRegister+0x70>
  }
  
  /* Send the device's internal address to write to */
  I2C_SendData(IOE_I2C, RegisterAddr);  
 800f3e4:	79fb      	ldrb	r3, [r7, #7]
 800f3e6:	4619      	mov	r1, r3
 800f3e8:	4845      	ldr	r0, [pc, #276]	; (800f500 <I2C_DMA_ReadDeviceRegister+0x1b0>)
 800f3ea:	f7f7 fdbf 	bl	8006f6c <I2C_SendData>
  
  /* Test on TXE FLag (data dent) */
  IOE_TimeOut = TIMEOUT_MAX;
 800f3ee:	4b45      	ldr	r3, [pc, #276]	; (800f504 <I2C_DMA_ReadDeviceRegister+0x1b4>)
 800f3f0:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800f3f4:	601a      	str	r2, [r3, #0]
  while ((!I2C_GetFlagStatus(IOE_I2C,I2C_FLAG_TXE)) && (!I2C_GetFlagStatus(IOE_I2C,I2C_FLAG_BTF)))  
 800f3f6:	e00a      	b.n	800f40e <I2C_DMA_ReadDeviceRegister+0xbe>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
 800f3f8:	4b42      	ldr	r3, [pc, #264]	; (800f504 <I2C_DMA_ReadDeviceRegister+0x1b4>)
 800f3fa:	681b      	ldr	r3, [r3, #0]
 800f3fc:	1e5a      	subs	r2, r3, #1
 800f3fe:	4941      	ldr	r1, [pc, #260]	; (800f504 <I2C_DMA_ReadDeviceRegister+0x1b4>)
 800f400:	600a      	str	r2, [r1, #0]
 800f402:	2b00      	cmp	r3, #0
 800f404:	d103      	bne.n	800f40e <I2C_DMA_ReadDeviceRegister+0xbe>
 800f406:	f000 fd4b 	bl	800fea0 <IOE_TimeoutUserCallback>
 800f40a:	4603      	mov	r3, r0
 800f40c:	e074      	b.n	800f4f8 <I2C_DMA_ReadDeviceRegister+0x1a8>
  while ((!I2C_GetFlagStatus(IOE_I2C,I2C_FLAG_TXE)) && (!I2C_GetFlagStatus(IOE_I2C,I2C_FLAG_BTF)))  
 800f40e:	4940      	ldr	r1, [pc, #256]	; (800f510 <I2C_DMA_ReadDeviceRegister+0x1c0>)
 800f410:	483b      	ldr	r0, [pc, #236]	; (800f500 <I2C_DMA_ReadDeviceRegister+0x1b0>)
 800f412:	f7f7 ff07 	bl	8007224 <I2C_GetFlagStatus>
 800f416:	4603      	mov	r3, r0
 800f418:	2b00      	cmp	r3, #0
 800f41a:	d106      	bne.n	800f42a <I2C_DMA_ReadDeviceRegister+0xda>
 800f41c:	493d      	ldr	r1, [pc, #244]	; (800f514 <I2C_DMA_ReadDeviceRegister+0x1c4>)
 800f41e:	4838      	ldr	r0, [pc, #224]	; (800f500 <I2C_DMA_ReadDeviceRegister+0x1b0>)
 800f420:	f7f7 ff00 	bl	8007224 <I2C_GetFlagStatus>
 800f424:	4603      	mov	r3, r0
 800f426:	2b00      	cmp	r3, #0
 800f428:	d0e6      	beq.n	800f3f8 <I2C_DMA_ReadDeviceRegister+0xa8>
  }
  
  /* Send START condition a second time */  
  I2C_GenerateSTART(IOE_I2C, ENABLE);
 800f42a:	2101      	movs	r1, #1
 800f42c:	4834      	ldr	r0, [pc, #208]	; (800f500 <I2C_DMA_ReadDeviceRegister+0x1b0>)
 800f42e:	f7f7 fbf8 	bl	8006c22 <I2C_GenerateSTART>
  
  /* Test on SB Flag */
  IOE_TimeOut = TIMEOUT_MAX;
 800f432:	4b34      	ldr	r3, [pc, #208]	; (800f504 <I2C_DMA_ReadDeviceRegister+0x1b4>)
 800f434:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800f438:	601a      	str	r2, [r3, #0]
  while (!I2C_GetFlagStatus(IOE_I2C,I2C_FLAG_SB)) 
 800f43a:	e00a      	b.n	800f452 <I2C_DMA_ReadDeviceRegister+0x102>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
 800f43c:	4b31      	ldr	r3, [pc, #196]	; (800f504 <I2C_DMA_ReadDeviceRegister+0x1b4>)
 800f43e:	681b      	ldr	r3, [r3, #0]
 800f440:	1e5a      	subs	r2, r3, #1
 800f442:	4930      	ldr	r1, [pc, #192]	; (800f504 <I2C_DMA_ReadDeviceRegister+0x1b4>)
 800f444:	600a      	str	r2, [r1, #0]
 800f446:	2b00      	cmp	r3, #0
 800f448:	d103      	bne.n	800f452 <I2C_DMA_ReadDeviceRegister+0x102>
 800f44a:	f000 fd29 	bl	800fea0 <IOE_TimeoutUserCallback>
 800f44e:	4603      	mov	r3, r0
 800f450:	e052      	b.n	800f4f8 <I2C_DMA_ReadDeviceRegister+0x1a8>
  while (!I2C_GetFlagStatus(IOE_I2C,I2C_FLAG_SB)) 
 800f452:	492d      	ldr	r1, [pc, #180]	; (800f508 <I2C_DMA_ReadDeviceRegister+0x1b8>)
 800f454:	482a      	ldr	r0, [pc, #168]	; (800f500 <I2C_DMA_ReadDeviceRegister+0x1b0>)
 800f456:	f7f7 fee5 	bl	8007224 <I2C_GetFlagStatus>
 800f45a:	4603      	mov	r3, r0
 800f45c:	2b00      	cmp	r3, #0
 800f45e:	d0ed      	beq.n	800f43c <I2C_DMA_ReadDeviceRegister+0xec>
  }
  
  /* Send IOExpander address for read */
  I2C_Send7bitAddress(IOE_I2C, IOE_ADDR, I2C_Direction_Receiver);
 800f460:	2201      	movs	r2, #1
 800f462:	2182      	movs	r1, #130	; 0x82
 800f464:	4826      	ldr	r0, [pc, #152]	; (800f500 <I2C_DMA_ReadDeviceRegister+0x1b0>)
 800f466:	f7f7 fc1c 	bl	8006ca2 <I2C_Send7bitAddress>
  
  /* Test on ADDR Flag */
  IOE_TimeOut = TIMEOUT_MAX;
 800f46a:	4b26      	ldr	r3, [pc, #152]	; (800f504 <I2C_DMA_ReadDeviceRegister+0x1b4>)
 800f46c:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800f470:	601a      	str	r2, [r3, #0]
  while (!I2C_CheckEvent(IOE_I2C, I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED))   
 800f472:	e00a      	b.n	800f48a <I2C_DMA_ReadDeviceRegister+0x13a>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
 800f474:	4b23      	ldr	r3, [pc, #140]	; (800f504 <I2C_DMA_ReadDeviceRegister+0x1b4>)
 800f476:	681b      	ldr	r3, [r3, #0]
 800f478:	1e5a      	subs	r2, r3, #1
 800f47a:	4922      	ldr	r1, [pc, #136]	; (800f504 <I2C_DMA_ReadDeviceRegister+0x1b4>)
 800f47c:	600a      	str	r2, [r1, #0]
 800f47e:	2b00      	cmp	r3, #0
 800f480:	d103      	bne.n	800f48a <I2C_DMA_ReadDeviceRegister+0x13a>
 800f482:	f000 fd0d 	bl	800fea0 <IOE_TimeoutUserCallback>
 800f486:	4603      	mov	r3, r0
 800f488:	e036      	b.n	800f4f8 <I2C_DMA_ReadDeviceRegister+0x1a8>
  while (!I2C_CheckEvent(IOE_I2C, I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED))   
 800f48a:	4923      	ldr	r1, [pc, #140]	; (800f518 <I2C_DMA_ReadDeviceRegister+0x1c8>)
 800f48c:	481c      	ldr	r0, [pc, #112]	; (800f500 <I2C_DMA_ReadDeviceRegister+0x1b0>)
 800f48e:	f7f7 fe77 	bl	8007180 <I2C_CheckEvent>
 800f492:	4603      	mov	r3, r0
 800f494:	2b00      	cmp	r3, #0
 800f496:	d0ed      	beq.n	800f474 <I2C_DMA_ReadDeviceRegister+0x124>
  }
    
  /* Enable I2C DMA request */
  I2C_DMACmd(IOE_I2C,ENABLE);
 800f498:	2101      	movs	r1, #1
 800f49a:	4819      	ldr	r0, [pc, #100]	; (800f500 <I2C_DMA_ReadDeviceRegister+0x1b0>)
 800f49c:	f7f7 fdf5 	bl	800708a <I2C_DMACmd>
  
  /* Enable DMA RX Channel */
  DMA_Cmd(IOE_DMA_RX_STREAM, ENABLE);
 800f4a0:	2101      	movs	r1, #1
 800f4a2:	481e      	ldr	r0, [pc, #120]	; (800f51c <I2C_DMA_ReadDeviceRegister+0x1cc>)
 800f4a4:	f7f4 fceb 	bl	8003e7e <DMA_Cmd>
  
  /* Wait until DMA Transfer Complete */
  IOE_TimeOut = 2 * TIMEOUT_MAX;
 800f4a8:	4b16      	ldr	r3, [pc, #88]	; (800f504 <I2C_DMA_ReadDeviceRegister+0x1b4>)
 800f4aa:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
 800f4ae:	601a      	str	r2, [r3, #0]
  while (!DMA_GetFlagStatus(IOE_DMA_RX_STREAM,IOE_DMA_RX_TCFLAG))
 800f4b0:	e00a      	b.n	800f4c8 <I2C_DMA_ReadDeviceRegister+0x178>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
 800f4b2:	4b14      	ldr	r3, [pc, #80]	; (800f504 <I2C_DMA_ReadDeviceRegister+0x1b4>)
 800f4b4:	681b      	ldr	r3, [r3, #0]
 800f4b6:	1e5a      	subs	r2, r3, #1
 800f4b8:	4912      	ldr	r1, [pc, #72]	; (800f504 <I2C_DMA_ReadDeviceRegister+0x1b4>)
 800f4ba:	600a      	str	r2, [r1, #0]
 800f4bc:	2b00      	cmp	r3, #0
 800f4be:	d103      	bne.n	800f4c8 <I2C_DMA_ReadDeviceRegister+0x178>
 800f4c0:	f000 fcee 	bl	800fea0 <IOE_TimeoutUserCallback>
 800f4c4:	4603      	mov	r3, r0
 800f4c6:	e017      	b.n	800f4f8 <I2C_DMA_ReadDeviceRegister+0x1a8>
  while (!DMA_GetFlagStatus(IOE_DMA_RX_STREAM,IOE_DMA_RX_TCFLAG))
 800f4c8:	4915      	ldr	r1, [pc, #84]	; (800f520 <I2C_DMA_ReadDeviceRegister+0x1d0>)
 800f4ca:	4814      	ldr	r0, [pc, #80]	; (800f51c <I2C_DMA_ReadDeviceRegister+0x1cc>)
 800f4cc:	f7f4 fdd8 	bl	8004080 <DMA_GetFlagStatus>
 800f4d0:	4603      	mov	r3, r0
 800f4d2:	2b00      	cmp	r3, #0
 800f4d4:	d0ed      	beq.n	800f4b2 <I2C_DMA_ReadDeviceRegister+0x162>
  }        
  
  /* Send STOP Condition */
  I2C_GenerateSTOP(IOE_I2C, ENABLE);
 800f4d6:	2101      	movs	r1, #1
 800f4d8:	4809      	ldr	r0, [pc, #36]	; (800f500 <I2C_DMA_ReadDeviceRegister+0x1b0>)
 800f4da:	f7f7 fbc2 	bl	8006c62 <I2C_GenerateSTOP>
  
  /* Disable DMA RX Channel */
  DMA_Cmd(IOE_DMA_RX_STREAM, DISABLE);
 800f4de:	2100      	movs	r1, #0
 800f4e0:	480e      	ldr	r0, [pc, #56]	; (800f51c <I2C_DMA_ReadDeviceRegister+0x1cc>)
 800f4e2:	f7f4 fccc 	bl	8003e7e <DMA_Cmd>
  
  /* Disable I2C DMA request */  
  I2C_DMACmd(IOE_I2C,DISABLE);
 800f4e6:	2100      	movs	r1, #0
 800f4e8:	4805      	ldr	r0, [pc, #20]	; (800f500 <I2C_DMA_ReadDeviceRegister+0x1b0>)
 800f4ea:	f7f7 fdce 	bl	800708a <I2C_DMACmd>
  
  /* Clear DMA RX Transfer Complete Flag */
 DMA_ClearFlag(IOE_DMA_RX_STREAM,IOE_DMA_RX_TCFLAG);
 800f4ee:	490c      	ldr	r1, [pc, #48]	; (800f520 <I2C_DMA_ReadDeviceRegister+0x1d0>)
 800f4f0:	480a      	ldr	r0, [pc, #40]	; (800f51c <I2C_DMA_ReadDeviceRegister+0x1cc>)
 800f4f2:	f7f4 fe01 	bl	80040f8 <DMA_ClearFlag>
  
  /* return a pointer to the IOE_Buffer */
  return (uint8_t)IOE_BufferRX[0];
 800f4f6:	7b3b      	ldrb	r3, [r7, #12]
}
 800f4f8:	4618      	mov	r0, r3
 800f4fa:	3710      	adds	r7, #16
 800f4fc:	46bd      	mov	sp, r7
 800f4fe:	bd80      	pop	{r7, pc}
 800f500:	40005c00 	.word	0x40005c00
 800f504:	200000a4 	.word	0x200000a4
 800f508:	10000001 	.word	0x10000001
 800f50c:	00070082 	.word	0x00070082
 800f510:	10000080 	.word	0x10000080
 800f514:	10000004 	.word	0x10000004
 800f518:	00030002 	.word	0x00030002
 800f51c:	40026010 	.word	0x40026010
 800f520:	10000020 	.word	0x10000020

0800f524 <I2C_DMA_ReadDataBuffer>:
  * @brief  Reads a buffer of 2 bytes from the device registers.
  * @param  RegisterAddr: The target register address (between 00x and 0x24)
  * @retval A pointer to the buffer containing the two returned bytes (in halfword).  
  */
uint16_t I2C_DMA_ReadDataBuffer(uint32_t RegisterAddr)
{ 
 800f524:	b580      	push	{r7, lr}
 800f526:	b084      	sub	sp, #16
 800f528:	af00      	add	r7, sp, #0
 800f52a:	6078      	str	r0, [r7, #4]
  uint8_t tmp= 0;
 800f52c:	2300      	movs	r3, #0
 800f52e:	73fb      	strb	r3, [r7, #15]
  uint8_t IOE_BufferRX[2] = {0x00, 0x00};  
 800f530:	2300      	movs	r3, #0
 800f532:	733b      	strb	r3, [r7, #12]
 800f534:	2300      	movs	r3, #0
 800f536:	737b      	strb	r3, [r7, #13]
  
  /* Configure DMA Peripheral */
  IOE_DMA_Config(IOE_DMA_RX, (uint8_t*)IOE_BufferRX);
 800f538:	f107 030c 	add.w	r3, r7, #12
 800f53c:	4619      	mov	r1, r3
 800f53e:	2001      	movs	r0, #1
 800f540:	f000 f9d2 	bl	800f8e8 <IOE_DMA_Config>
  
  /* Enable DMA NACK automatic generation */
  I2C_DMALastTransferCmd(IOE_I2C, ENABLE);
 800f544:	2101      	movs	r1, #1
 800f546:	486e      	ldr	r0, [pc, #440]	; (800f700 <I2C_DMA_ReadDataBuffer+0x1dc>)
 800f548:	f7f7 fdbf 	bl	80070ca <I2C_DMALastTransferCmd>
  
  /* Enable the I2C peripheral */
  I2C_GenerateSTART(IOE_I2C, ENABLE);
 800f54c:	2101      	movs	r1, #1
 800f54e:	486c      	ldr	r0, [pc, #432]	; (800f700 <I2C_DMA_ReadDataBuffer+0x1dc>)
 800f550:	f7f7 fb67 	bl	8006c22 <I2C_GenerateSTART>
  
  /* Test on SB Flag */
  IOE_TimeOut = TIMEOUT_MAX;
 800f554:	4b6b      	ldr	r3, [pc, #428]	; (800f704 <I2C_DMA_ReadDataBuffer+0x1e0>)
 800f556:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800f55a:	601a      	str	r2, [r3, #0]
  while (!I2C_GetFlagStatus(IOE_I2C,I2C_FLAG_SB)) 
 800f55c:	e00b      	b.n	800f576 <I2C_DMA_ReadDataBuffer+0x52>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
 800f55e:	4b69      	ldr	r3, [pc, #420]	; (800f704 <I2C_DMA_ReadDataBuffer+0x1e0>)
 800f560:	681b      	ldr	r3, [r3, #0]
 800f562:	1e5a      	subs	r2, r3, #1
 800f564:	4967      	ldr	r1, [pc, #412]	; (800f704 <I2C_DMA_ReadDataBuffer+0x1e0>)
 800f566:	600a      	str	r2, [r1, #0]
 800f568:	2b00      	cmp	r3, #0
 800f56a:	d104      	bne.n	800f576 <I2C_DMA_ReadDataBuffer+0x52>
 800f56c:	f000 fc98 	bl	800fea0 <IOE_TimeoutUserCallback>
 800f570:	4603      	mov	r3, r0
 800f572:	b29b      	uxth	r3, r3
 800f574:	e0bf      	b.n	800f6f6 <I2C_DMA_ReadDataBuffer+0x1d2>
  while (!I2C_GetFlagStatus(IOE_I2C,I2C_FLAG_SB)) 
 800f576:	4964      	ldr	r1, [pc, #400]	; (800f708 <I2C_DMA_ReadDataBuffer+0x1e4>)
 800f578:	4861      	ldr	r0, [pc, #388]	; (800f700 <I2C_DMA_ReadDataBuffer+0x1dc>)
 800f57a:	f7f7 fe53 	bl	8007224 <I2C_GetFlagStatus>
 800f57e:	4603      	mov	r3, r0
 800f580:	2b00      	cmp	r3, #0
 800f582:	d0ec      	beq.n	800f55e <I2C_DMA_ReadDataBuffer+0x3a>
  }
  
  /* Send device address for write */
  I2C_Send7bitAddress(IOE_I2C, IOE_ADDR, I2C_Direction_Transmitter);
 800f584:	2200      	movs	r2, #0
 800f586:	2182      	movs	r1, #130	; 0x82
 800f588:	485d      	ldr	r0, [pc, #372]	; (800f700 <I2C_DMA_ReadDataBuffer+0x1dc>)
 800f58a:	f7f7 fb8a 	bl	8006ca2 <I2C_Send7bitAddress>
  
  /* Test on ADDR Flag */
  IOE_TimeOut = TIMEOUT_MAX;
 800f58e:	4b5d      	ldr	r3, [pc, #372]	; (800f704 <I2C_DMA_ReadDataBuffer+0x1e0>)
 800f590:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800f594:	601a      	str	r2, [r3, #0]
  while (!I2C_CheckEvent(IOE_I2C, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED))
 800f596:	e00b      	b.n	800f5b0 <I2C_DMA_ReadDataBuffer+0x8c>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
 800f598:	4b5a      	ldr	r3, [pc, #360]	; (800f704 <I2C_DMA_ReadDataBuffer+0x1e0>)
 800f59a:	681b      	ldr	r3, [r3, #0]
 800f59c:	1e5a      	subs	r2, r3, #1
 800f59e:	4959      	ldr	r1, [pc, #356]	; (800f704 <I2C_DMA_ReadDataBuffer+0x1e0>)
 800f5a0:	600a      	str	r2, [r1, #0]
 800f5a2:	2b00      	cmp	r3, #0
 800f5a4:	d104      	bne.n	800f5b0 <I2C_DMA_ReadDataBuffer+0x8c>
 800f5a6:	f000 fc7b 	bl	800fea0 <IOE_TimeoutUserCallback>
 800f5aa:	4603      	mov	r3, r0
 800f5ac:	b29b      	uxth	r3, r3
 800f5ae:	e0a2      	b.n	800f6f6 <I2C_DMA_ReadDataBuffer+0x1d2>
  while (!I2C_CheckEvent(IOE_I2C, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED))
 800f5b0:	4956      	ldr	r1, [pc, #344]	; (800f70c <I2C_DMA_ReadDataBuffer+0x1e8>)
 800f5b2:	4853      	ldr	r0, [pc, #332]	; (800f700 <I2C_DMA_ReadDataBuffer+0x1dc>)
 800f5b4:	f7f7 fde4 	bl	8007180 <I2C_CheckEvent>
 800f5b8:	4603      	mov	r3, r0
 800f5ba:	2b00      	cmp	r3, #0
 800f5bc:	d0ec      	beq.n	800f598 <I2C_DMA_ReadDataBuffer+0x74>
  }
  
  /* Send the device's internal address to write to */
  I2C_SendData(IOE_I2C, RegisterAddr);  
 800f5be:	687b      	ldr	r3, [r7, #4]
 800f5c0:	b2db      	uxtb	r3, r3
 800f5c2:	4619      	mov	r1, r3
 800f5c4:	484e      	ldr	r0, [pc, #312]	; (800f700 <I2C_DMA_ReadDataBuffer+0x1dc>)
 800f5c6:	f7f7 fcd1 	bl	8006f6c <I2C_SendData>
  
  /* Test on TXE FLag (data dent) */
  IOE_TimeOut = TIMEOUT_MAX;
 800f5ca:	4b4e      	ldr	r3, [pc, #312]	; (800f704 <I2C_DMA_ReadDataBuffer+0x1e0>)
 800f5cc:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800f5d0:	601a      	str	r2, [r3, #0]
  while ((!I2C_GetFlagStatus(IOE_I2C,I2C_FLAG_TXE)) && (!I2C_GetFlagStatus(IOE_I2C,I2C_FLAG_BTF)))  
 800f5d2:	e00b      	b.n	800f5ec <I2C_DMA_ReadDataBuffer+0xc8>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
 800f5d4:	4b4b      	ldr	r3, [pc, #300]	; (800f704 <I2C_DMA_ReadDataBuffer+0x1e0>)
 800f5d6:	681b      	ldr	r3, [r3, #0]
 800f5d8:	1e5a      	subs	r2, r3, #1
 800f5da:	494a      	ldr	r1, [pc, #296]	; (800f704 <I2C_DMA_ReadDataBuffer+0x1e0>)
 800f5dc:	600a      	str	r2, [r1, #0]
 800f5de:	2b00      	cmp	r3, #0
 800f5e0:	d104      	bne.n	800f5ec <I2C_DMA_ReadDataBuffer+0xc8>
 800f5e2:	f000 fc5d 	bl	800fea0 <IOE_TimeoutUserCallback>
 800f5e6:	4603      	mov	r3, r0
 800f5e8:	b29b      	uxth	r3, r3
 800f5ea:	e084      	b.n	800f6f6 <I2C_DMA_ReadDataBuffer+0x1d2>
  while ((!I2C_GetFlagStatus(IOE_I2C,I2C_FLAG_TXE)) && (!I2C_GetFlagStatus(IOE_I2C,I2C_FLAG_BTF)))  
 800f5ec:	4948      	ldr	r1, [pc, #288]	; (800f710 <I2C_DMA_ReadDataBuffer+0x1ec>)
 800f5ee:	4844      	ldr	r0, [pc, #272]	; (800f700 <I2C_DMA_ReadDataBuffer+0x1dc>)
 800f5f0:	f7f7 fe18 	bl	8007224 <I2C_GetFlagStatus>
 800f5f4:	4603      	mov	r3, r0
 800f5f6:	2b00      	cmp	r3, #0
 800f5f8:	d106      	bne.n	800f608 <I2C_DMA_ReadDataBuffer+0xe4>
 800f5fa:	4946      	ldr	r1, [pc, #280]	; (800f714 <I2C_DMA_ReadDataBuffer+0x1f0>)
 800f5fc:	4840      	ldr	r0, [pc, #256]	; (800f700 <I2C_DMA_ReadDataBuffer+0x1dc>)
 800f5fe:	f7f7 fe11 	bl	8007224 <I2C_GetFlagStatus>
 800f602:	4603      	mov	r3, r0
 800f604:	2b00      	cmp	r3, #0
 800f606:	d0e5      	beq.n	800f5d4 <I2C_DMA_ReadDataBuffer+0xb0>
  }
  
  /* Send START condition a second time */  
  I2C_GenerateSTART(IOE_I2C, ENABLE);
 800f608:	2101      	movs	r1, #1
 800f60a:	483d      	ldr	r0, [pc, #244]	; (800f700 <I2C_DMA_ReadDataBuffer+0x1dc>)
 800f60c:	f7f7 fb09 	bl	8006c22 <I2C_GenerateSTART>
  
  /* Test on SB Flag */
  IOE_TimeOut = TIMEOUT_MAX;
 800f610:	4b3c      	ldr	r3, [pc, #240]	; (800f704 <I2C_DMA_ReadDataBuffer+0x1e0>)
 800f612:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800f616:	601a      	str	r2, [r3, #0]
  while (!I2C_GetFlagStatus(IOE_I2C,I2C_FLAG_SB)) 
 800f618:	e00b      	b.n	800f632 <I2C_DMA_ReadDataBuffer+0x10e>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
 800f61a:	4b3a      	ldr	r3, [pc, #232]	; (800f704 <I2C_DMA_ReadDataBuffer+0x1e0>)
 800f61c:	681b      	ldr	r3, [r3, #0]
 800f61e:	1e5a      	subs	r2, r3, #1
 800f620:	4938      	ldr	r1, [pc, #224]	; (800f704 <I2C_DMA_ReadDataBuffer+0x1e0>)
 800f622:	600a      	str	r2, [r1, #0]
 800f624:	2b00      	cmp	r3, #0
 800f626:	d104      	bne.n	800f632 <I2C_DMA_ReadDataBuffer+0x10e>
 800f628:	f000 fc3a 	bl	800fea0 <IOE_TimeoutUserCallback>
 800f62c:	4603      	mov	r3, r0
 800f62e:	b29b      	uxth	r3, r3
 800f630:	e061      	b.n	800f6f6 <I2C_DMA_ReadDataBuffer+0x1d2>
  while (!I2C_GetFlagStatus(IOE_I2C,I2C_FLAG_SB)) 
 800f632:	4935      	ldr	r1, [pc, #212]	; (800f708 <I2C_DMA_ReadDataBuffer+0x1e4>)
 800f634:	4832      	ldr	r0, [pc, #200]	; (800f700 <I2C_DMA_ReadDataBuffer+0x1dc>)
 800f636:	f7f7 fdf5 	bl	8007224 <I2C_GetFlagStatus>
 800f63a:	4603      	mov	r3, r0
 800f63c:	2b00      	cmp	r3, #0
 800f63e:	d0ec      	beq.n	800f61a <I2C_DMA_ReadDataBuffer+0xf6>
  }
  
  /* Send IO Expander address for read */
  I2C_Send7bitAddress(IOE_I2C, IOE_ADDR, I2C_Direction_Receiver);
 800f640:	2201      	movs	r2, #1
 800f642:	2182      	movs	r1, #130	; 0x82
 800f644:	482e      	ldr	r0, [pc, #184]	; (800f700 <I2C_DMA_ReadDataBuffer+0x1dc>)
 800f646:	f7f7 fb2c 	bl	8006ca2 <I2C_Send7bitAddress>
  
  /* Test on ADDR Flag */
  IOE_TimeOut = TIMEOUT_MAX;
 800f64a:	4b2e      	ldr	r3, [pc, #184]	; (800f704 <I2C_DMA_ReadDataBuffer+0x1e0>)
 800f64c:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800f650:	601a      	str	r2, [r3, #0]
  while (!I2C_CheckEvent(IOE_I2C, I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED))   
 800f652:	e00b      	b.n	800f66c <I2C_DMA_ReadDataBuffer+0x148>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
 800f654:	4b2b      	ldr	r3, [pc, #172]	; (800f704 <I2C_DMA_ReadDataBuffer+0x1e0>)
 800f656:	681b      	ldr	r3, [r3, #0]
 800f658:	1e5a      	subs	r2, r3, #1
 800f65a:	492a      	ldr	r1, [pc, #168]	; (800f704 <I2C_DMA_ReadDataBuffer+0x1e0>)
 800f65c:	600a      	str	r2, [r1, #0]
 800f65e:	2b00      	cmp	r3, #0
 800f660:	d104      	bne.n	800f66c <I2C_DMA_ReadDataBuffer+0x148>
 800f662:	f000 fc1d 	bl	800fea0 <IOE_TimeoutUserCallback>
 800f666:	4603      	mov	r3, r0
 800f668:	b29b      	uxth	r3, r3
 800f66a:	e044      	b.n	800f6f6 <I2C_DMA_ReadDataBuffer+0x1d2>
  while (!I2C_CheckEvent(IOE_I2C, I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED))   
 800f66c:	492a      	ldr	r1, [pc, #168]	; (800f718 <I2C_DMA_ReadDataBuffer+0x1f4>)
 800f66e:	4824      	ldr	r0, [pc, #144]	; (800f700 <I2C_DMA_ReadDataBuffer+0x1dc>)
 800f670:	f7f7 fd86 	bl	8007180 <I2C_CheckEvent>
 800f674:	4603      	mov	r3, r0
 800f676:	2b00      	cmp	r3, #0
 800f678:	d0ec      	beq.n	800f654 <I2C_DMA_ReadDataBuffer+0x130>
  }
  
  /* Enable I2C DMA request */
  I2C_DMACmd(IOE_I2C,ENABLE);
 800f67a:	2101      	movs	r1, #1
 800f67c:	4820      	ldr	r0, [pc, #128]	; (800f700 <I2C_DMA_ReadDataBuffer+0x1dc>)
 800f67e:	f7f7 fd04 	bl	800708a <I2C_DMACmd>
  
  /* Enable DMA RX Channel */
  DMA_Cmd(IOE_DMA_RX_STREAM, ENABLE);
 800f682:	2101      	movs	r1, #1
 800f684:	4825      	ldr	r0, [pc, #148]	; (800f71c <I2C_DMA_ReadDataBuffer+0x1f8>)
 800f686:	f7f4 fbfa 	bl	8003e7e <DMA_Cmd>
  
  /* Wait until DMA Transfer Complete */
  IOE_TimeOut = 2 * TIMEOUT_MAX;
 800f68a:	4b1e      	ldr	r3, [pc, #120]	; (800f704 <I2C_DMA_ReadDataBuffer+0x1e0>)
 800f68c:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
 800f690:	601a      	str	r2, [r3, #0]
  while (!DMA_GetFlagStatus(IOE_DMA_RX_STREAM, IOE_DMA_RX_TCFLAG))
 800f692:	e00b      	b.n	800f6ac <I2C_DMA_ReadDataBuffer+0x188>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
 800f694:	4b1b      	ldr	r3, [pc, #108]	; (800f704 <I2C_DMA_ReadDataBuffer+0x1e0>)
 800f696:	681b      	ldr	r3, [r3, #0]
 800f698:	1e5a      	subs	r2, r3, #1
 800f69a:	491a      	ldr	r1, [pc, #104]	; (800f704 <I2C_DMA_ReadDataBuffer+0x1e0>)
 800f69c:	600a      	str	r2, [r1, #0]
 800f69e:	2b00      	cmp	r3, #0
 800f6a0:	d104      	bne.n	800f6ac <I2C_DMA_ReadDataBuffer+0x188>
 800f6a2:	f000 fbfd 	bl	800fea0 <IOE_TimeoutUserCallback>
 800f6a6:	4603      	mov	r3, r0
 800f6a8:	b29b      	uxth	r3, r3
 800f6aa:	e024      	b.n	800f6f6 <I2C_DMA_ReadDataBuffer+0x1d2>
  while (!DMA_GetFlagStatus(IOE_DMA_RX_STREAM, IOE_DMA_RX_TCFLAG))
 800f6ac:	491c      	ldr	r1, [pc, #112]	; (800f720 <I2C_DMA_ReadDataBuffer+0x1fc>)
 800f6ae:	481b      	ldr	r0, [pc, #108]	; (800f71c <I2C_DMA_ReadDataBuffer+0x1f8>)
 800f6b0:	f7f4 fce6 	bl	8004080 <DMA_GetFlagStatus>
 800f6b4:	4603      	mov	r3, r0
 800f6b6:	2b00      	cmp	r3, #0
 800f6b8:	d0ec      	beq.n	800f694 <I2C_DMA_ReadDataBuffer+0x170>
  }        
  
  /* Send STOP Condition */
  I2C_GenerateSTOP(IOE_I2C, ENABLE);
 800f6ba:	2101      	movs	r1, #1
 800f6bc:	4810      	ldr	r0, [pc, #64]	; (800f700 <I2C_DMA_ReadDataBuffer+0x1dc>)
 800f6be:	f7f7 fad0 	bl	8006c62 <I2C_GenerateSTOP>
  
  /* Disable DMA RX Channel */
  DMA_Cmd(IOE_DMA_RX_STREAM, DISABLE);
 800f6c2:	2100      	movs	r1, #0
 800f6c4:	4815      	ldr	r0, [pc, #84]	; (800f71c <I2C_DMA_ReadDataBuffer+0x1f8>)
 800f6c6:	f7f4 fbda 	bl	8003e7e <DMA_Cmd>
  
  /* Disable I2C DMA request */  
  I2C_DMACmd(IOE_I2C,DISABLE);
 800f6ca:	2100      	movs	r1, #0
 800f6cc:	480c      	ldr	r0, [pc, #48]	; (800f700 <I2C_DMA_ReadDataBuffer+0x1dc>)
 800f6ce:	f7f7 fcdc 	bl	800708a <I2C_DMACmd>
  
  /* Clear DMA RX Transfer Complete Flag */
  DMA_ClearFlag(IOE_DMA_RX_STREAM,IOE_DMA_RX_TCFLAG);
 800f6d2:	4913      	ldr	r1, [pc, #76]	; (800f720 <I2C_DMA_ReadDataBuffer+0x1fc>)
 800f6d4:	4811      	ldr	r0, [pc, #68]	; (800f71c <I2C_DMA_ReadDataBuffer+0x1f8>)
 800f6d6:	f7f4 fd0f 	bl	80040f8 <DMA_ClearFlag>
  
  /* Reorganize received data */  
  tmp = IOE_BufferRX[0];
 800f6da:	7b3b      	ldrb	r3, [r7, #12]
 800f6dc:	73fb      	strb	r3, [r7, #15]
  IOE_BufferRX[0] = IOE_BufferRX[1];
 800f6de:	7b7b      	ldrb	r3, [r7, #13]
 800f6e0:	733b      	strb	r3, [r7, #12]
  IOE_BufferRX[1] = tmp;
 800f6e2:	7bfb      	ldrb	r3, [r7, #15]
 800f6e4:	737b      	strb	r3, [r7, #13]
  
  /* return the data */
  return (uint16_t) ((uint16_t)IOE_BufferRX[0] | (uint16_t)IOE_BufferRX[1]<< 8);
 800f6e6:	7b3b      	ldrb	r3, [r7, #12]
 800f6e8:	b21a      	sxth	r2, r3
 800f6ea:	7b7b      	ldrb	r3, [r7, #13]
 800f6ec:	021b      	lsls	r3, r3, #8
 800f6ee:	b21b      	sxth	r3, r3
 800f6f0:	4313      	orrs	r3, r2
 800f6f2:	b21b      	sxth	r3, r3
 800f6f4:	b29b      	uxth	r3, r3
}
 800f6f6:	4618      	mov	r0, r3
 800f6f8:	3710      	adds	r7, #16
 800f6fa:	46bd      	mov	sp, r7
 800f6fc:	bd80      	pop	{r7, pc}
 800f6fe:	bf00      	nop
 800f700:	40005c00 	.word	0x40005c00
 800f704:	200000a4 	.word	0x200000a4
 800f708:	10000001 	.word	0x10000001
 800f70c:	00070082 	.word	0x00070082
 800f710:	10000080 	.word	0x10000080
 800f714:	10000004 	.word	0x10000004
 800f718:	00030002 	.word	0x00030002
 800f71c:	40026010 	.word	0x40026010
 800f720:	10000020 	.word	0x10000020

0800f724 <IOE_TP_Read_X>:
  * @brief  Return Touch Panel X position value
  * @param  None
  * @retval X position.
  */
static uint16_t IOE_TP_Read_X(void)
{
 800f724:	b580      	push	{r7, lr}
 800f726:	b082      	sub	sp, #8
 800f728:	af00      	add	r7, sp, #0
  int32_t x, xr;
  
  /* Read x value from DATA_X register */
  x = I2C_ReadDataBuffer(IOE_REG_TP_DATA_X);
 800f72a:	204d      	movs	r0, #77	; 0x4d
 800f72c:	f000 facc 	bl	800fcc8 <I2C_ReadDataBuffer>
 800f730:	4603      	mov	r3, r0
 800f732:	607b      	str	r3, [r7, #4]
  
  /* x value first correction */
  if(x <= 3000)
 800f734:	687b      	ldr	r3, [r7, #4]
 800f736:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800f73a:	4293      	cmp	r3, r2
 800f73c:	dc05      	bgt.n	800f74a <IOE_TP_Read_X+0x26>
  {
  x = 3870 - x;
 800f73e:	687b      	ldr	r3, [r7, #4]
 800f740:	f5c3 6371 	rsb	r3, r3, #3856	; 0xf10
 800f744:	330e      	adds	r3, #14
 800f746:	607b      	str	r3, [r7, #4]
 800f748:	e004      	b.n	800f754 <IOE_TP_Read_X+0x30>
  }
  else
  {
   x = 3800 - x;
 800f74a:	687b      	ldr	r3, [r7, #4]
 800f74c:	f5c3 636d 	rsb	r3, r3, #3792	; 0xed0
 800f750:	3308      	adds	r3, #8
 800f752:	607b      	str	r3, [r7, #4]
  }
  
  /* x value second correction */  
  xr = x / 15;
 800f754:	687b      	ldr	r3, [r7, #4]
 800f756:	4a0c      	ldr	r2, [pc, #48]	; (800f788 <IOE_TP_Read_X+0x64>)
 800f758:	fb82 1203 	smull	r1, r2, r2, r3
 800f75c:	441a      	add	r2, r3
 800f75e:	10d2      	asrs	r2, r2, #3
 800f760:	17db      	asrs	r3, r3, #31
 800f762:	1ad3      	subs	r3, r2, r3
 800f764:	603b      	str	r3, [r7, #0]
  
  /* return x position value */
  if(xr <= 0)
 800f766:	683b      	ldr	r3, [r7, #0]
 800f768:	2b00      	cmp	r3, #0
 800f76a:	dc02      	bgt.n	800f772 <IOE_TP_Read_X+0x4e>
  {
    xr = 0;
 800f76c:	2300      	movs	r3, #0
 800f76e:	603b      	str	r3, [r7, #0]
 800f770:	e004      	b.n	800f77c <IOE_TP_Read_X+0x58>
  }
  else if (xr > 240)
 800f772:	683b      	ldr	r3, [r7, #0]
 800f774:	2bf0      	cmp	r3, #240	; 0xf0
 800f776:	dd01      	ble.n	800f77c <IOE_TP_Read_X+0x58>
  {
    xr = 239;
 800f778:	23ef      	movs	r3, #239	; 0xef
 800f77a:	603b      	str	r3, [r7, #0]
  }
  else 
  {}
  return (uint16_t)(xr); 
 800f77c:	683b      	ldr	r3, [r7, #0]
 800f77e:	b29b      	uxth	r3, r3
}
 800f780:	4618      	mov	r0, r3
 800f782:	3708      	adds	r7, #8
 800f784:	46bd      	mov	sp, r7
 800f786:	bd80      	pop	{r7, pc}
 800f788:	88888889 	.word	0x88888889

0800f78c <IOE_TP_Read_Y>:
  * @brief  Return Touch Panel Y position value
  * @param  None
  * @retval Y position.
  */
static uint16_t IOE_TP_Read_Y(void)
{
 800f78c:	b580      	push	{r7, lr}
 800f78e:	b082      	sub	sp, #8
 800f790:	af00      	add	r7, sp, #0
  int32_t y, yr;
  
  /* Read y value from DATA_Y register */
  y = I2C_ReadDataBuffer(IOE_REG_TP_DATA_Y);
 800f792:	204f      	movs	r0, #79	; 0x4f
 800f794:	f000 fa98 	bl	800fcc8 <I2C_ReadDataBuffer>
 800f798:	4603      	mov	r3, r0
 800f79a:	603b      	str	r3, [r7, #0]
  
  /* y value first correction */

  y -= 360;  
 800f79c:	683b      	ldr	r3, [r7, #0]
 800f79e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800f7a2:	603b      	str	r3, [r7, #0]
  
  /* y value second correction */
  yr = y / 11;
 800f7a4:	683b      	ldr	r3, [r7, #0]
 800f7a6:	4a0d      	ldr	r2, [pc, #52]	; (800f7dc <IOE_TP_Read_Y+0x50>)
 800f7a8:	fb82 1203 	smull	r1, r2, r2, r3
 800f7ac:	1052      	asrs	r2, r2, #1
 800f7ae:	17db      	asrs	r3, r3, #31
 800f7b0:	1ad3      	subs	r3, r2, r3
 800f7b2:	607b      	str	r3, [r7, #4]
  
  /* return y position value */
  if(yr <= 0)
 800f7b4:	687b      	ldr	r3, [r7, #4]
 800f7b6:	2b00      	cmp	r3, #0
 800f7b8:	dc02      	bgt.n	800f7c0 <IOE_TP_Read_Y+0x34>
  {
    yr = 0;
 800f7ba:	2300      	movs	r3, #0
 800f7bc:	607b      	str	r3, [r7, #4]
 800f7be:	e006      	b.n	800f7ce <IOE_TP_Read_Y+0x42>
  }
  else if (yr > 320)
 800f7c0:	687b      	ldr	r3, [r7, #4]
 800f7c2:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800f7c6:	dd02      	ble.n	800f7ce <IOE_TP_Read_Y+0x42>
  {
    yr = 319;
 800f7c8:	f240 133f 	movw	r3, #319	; 0x13f
 800f7cc:	607b      	str	r3, [r7, #4]
  }
  else
  {}
  return (uint16_t)(yr); 
 800f7ce:	687b      	ldr	r3, [r7, #4]
 800f7d0:	b29b      	uxth	r3, r3
}
 800f7d2:	4618      	mov	r0, r3
 800f7d4:	3708      	adds	r7, #8
 800f7d6:	46bd      	mov	sp, r7
 800f7d8:	bd80      	pop	{r7, pc}
 800f7da:	bf00      	nop
 800f7dc:	2e8ba2e9 	.word	0x2e8ba2e9

0800f7e0 <IOE_TP_Read_Z>:
  * @brief  Return Touch Panel Z position value
  * @param  None
  * @retval Z position.
  */
static uint16_t IOE_TP_Read_Z(void)
{
 800f7e0:	b580      	push	{r7, lr}
 800f7e2:	b082      	sub	sp, #8
 800f7e4:	af00      	add	r7, sp, #0
  uint32_t z;
  
  /* Read z value from DATA_Z register */
  z = I2C_ReadDataBuffer(IOE_REG_TP_DATA_Z);
 800f7e6:	2051      	movs	r0, #81	; 0x51
 800f7e8:	f000 fa6e 	bl	800fcc8 <I2C_ReadDataBuffer>
 800f7ec:	4603      	mov	r3, r0
 800f7ee:	607b      	str	r3, [r7, #4]

  /* return z position value */
  if(z <= 0)
 800f7f0:	687b      	ldr	r3, [r7, #4]
 800f7f2:	2b00      	cmp	r3, #0
 800f7f4:	d101      	bne.n	800f7fa <IOE_TP_Read_Z+0x1a>
    z = 0;
 800f7f6:	2300      	movs	r3, #0
 800f7f8:	607b      	str	r3, [r7, #4]
  return (uint16_t)(z); 
 800f7fa:	687b      	ldr	r3, [r7, #4]
 800f7fc:	b29b      	uxth	r3, r3
}
 800f7fe:	4618      	mov	r0, r3
 800f800:	3708      	adds	r7, #8
 800f802:	46bd      	mov	sp, r7
 800f804:	bd80      	pop	{r7, pc}

0800f806 <IOE_GPIO_Config>:
  * @brief  Initializes the GPIO pins used by the IO expander.
  * @param  None
  * @retval None
  */
static void IOE_GPIO_Config(void)
{
 800f806:	b580      	push	{r7, lr}
 800f808:	b082      	sub	sp, #8
 800f80a:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable IOE_I2C and IOE_I2C_GPIO_PORT & Alternate Function clocks */
  RCC_APB1PeriphClockCmd(IOE_I2C_CLK, ENABLE);
 800f80c:	2101      	movs	r1, #1
 800f80e:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 800f812:	f7f9 f901 	bl	8008a18 <RCC_APB1PeriphClockCmd>
  RCC_AHB1PeriphClockCmd(IOE_I2C_SCL_GPIO_CLK | IOE_I2C_SDA_GPIO_CLK |
 800f816:	2101      	movs	r1, #1
 800f818:	f240 1005 	movw	r0, #261	; 0x105
 800f81c:	f7f9 f89c 	bl	8008958 <RCC_AHB1PeriphClockCmd>
                         IOE_IT_GPIO_CLK, ENABLE);
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 800f820:	2101      	movs	r1, #1
 800f822:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800f826:	f7f9 f917 	bl	8008a58 <RCC_APB2PeriphClockCmd>
  
  /* Reset IOE_I2C IP */
  RCC_APB1PeriphResetCmd(IOE_I2C_CLK, ENABLE);
 800f82a:	2101      	movs	r1, #1
 800f82c:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 800f830:	f7f9 f992 	bl	8008b58 <RCC_APB1PeriphResetCmd>
  /* Release reset signal of IOE_I2C IP */
  RCC_APB1PeriphResetCmd(IOE_I2C_CLK, DISABLE);
 800f834:	2100      	movs	r1, #0
 800f836:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 800f83a:	f7f9 f98d 	bl	8008b58 <RCC_APB1PeriphResetCmd>

  /* Connect PXx to I2C_SCL*/
  GPIO_PinAFConfig(IOE_I2C_SCL_GPIO_PORT, IOE_I2C_SCL_SOURCE, IOE_I2C_SCL_AF);
 800f83e:	2204      	movs	r2, #4
 800f840:	2108      	movs	r1, #8
 800f842:	4812      	ldr	r0, [pc, #72]	; (800f88c <IOE_GPIO_Config+0x86>)
 800f844:	f7f7 f827 	bl	8006896 <GPIO_PinAFConfig>
  /* Connect PXx to I2C_SDA*/
  GPIO_PinAFConfig(IOE_I2C_SDA_GPIO_PORT, IOE_I2C_SDA_SOURCE, IOE_I2C_SDA_AF); 
 800f848:	2204      	movs	r2, #4
 800f84a:	2109      	movs	r1, #9
 800f84c:	4810      	ldr	r0, [pc, #64]	; (800f890 <IOE_GPIO_Config+0x8a>)
 800f84e:	f7f7 f822 	bl	8006896 <GPIO_PinAFConfig>
    
  /* IOE_I2C SCL and SDA pins configuration */
  GPIO_InitStructure.GPIO_Pin = IOE_I2C_SCL_PIN;
 800f852:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f856:	603b      	str	r3, [r7, #0]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 800f858:	2302      	movs	r3, #2
 800f85a:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 800f85c:	2302      	movs	r3, #2
 800f85e:	717b      	strb	r3, [r7, #5]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
 800f860:	2301      	movs	r3, #1
 800f862:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
 800f864:	2300      	movs	r3, #0
 800f866:	71fb      	strb	r3, [r7, #7]
  GPIO_Init(IOE_I2C_SCL_GPIO_PORT, &GPIO_InitStructure);
 800f868:	463b      	mov	r3, r7
 800f86a:	4619      	mov	r1, r3
 800f86c:	4807      	ldr	r0, [pc, #28]	; (800f88c <IOE_GPIO_Config+0x86>)
 800f86e:	f7f6 fea3 	bl	80065b8 <GPIO_Init>

  GPIO_InitStructure.GPIO_Pin = IOE_I2C_SDA_PIN;
 800f872:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f876:	603b      	str	r3, [r7, #0]
  GPIO_Init(IOE_I2C_SDA_GPIO_PORT, &GPIO_InitStructure);
 800f878:	463b      	mov	r3, r7
 800f87a:	4619      	mov	r1, r3
 800f87c:	4804      	ldr	r0, [pc, #16]	; (800f890 <IOE_GPIO_Config+0x8a>)
 800f87e:	f7f6 fe9b 	bl	80065b8 <GPIO_Init>
  
}
 800f882:	bf00      	nop
 800f884:	3708      	adds	r7, #8
 800f886:	46bd      	mov	sp, r7
 800f888:	bd80      	pop	{r7, pc}
 800f88a:	bf00      	nop
 800f88c:	40020000 	.word	0x40020000
 800f890:	40020800 	.word	0x40020800

0800f894 <IOE_I2C_Config>:
  * @brief  Configure the I2C Peripheral used to communicate with IO_Expanders.
  * @param  None
  * @retval None
  */
static void IOE_I2C_Config(void)
{
 800f894:	b580      	push	{r7, lr}
 800f896:	b084      	sub	sp, #16
 800f898:	af00      	add	r7, sp, #0
  I2C_InitTypeDef I2C_InitStructure;

  /* If the I2C peripheral is already enabled, don't reconfigure it */
  if ((IOE_I2C->CR1 & I2C_CR1_PE) == 0)
 800f89a:	4b11      	ldr	r3, [pc, #68]	; (800f8e0 <IOE_I2C_Config+0x4c>)
 800f89c:	881b      	ldrh	r3, [r3, #0]
 800f89e:	b29b      	uxth	r3, r3
 800f8a0:	f003 0301 	and.w	r3, r3, #1
 800f8a4:	2b00      	cmp	r3, #0
 800f8a6:	d117      	bne.n	800f8d8 <IOE_I2C_Config+0x44>
  {   
    /* IOE_I2C configuration */
    I2C_InitStructure.I2C_Mode = I2C_Mode_I2C;
 800f8a8:	2300      	movs	r3, #0
 800f8aa:	80bb      	strh	r3, [r7, #4]
    I2C_InitStructure.I2C_DutyCycle = I2C_DutyCycle_2;
 800f8ac:	f64b 73ff 	movw	r3, #49151	; 0xbfff
 800f8b0:	80fb      	strh	r3, [r7, #6]
    I2C_InitStructure.I2C_OwnAddress1 = 0x00;
 800f8b2:	2300      	movs	r3, #0
 800f8b4:	813b      	strh	r3, [r7, #8]
    I2C_InitStructure.I2C_Ack = I2C_Ack_Enable;
 800f8b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f8ba:	817b      	strh	r3, [r7, #10]
    I2C_InitStructure.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 800f8bc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800f8c0:	81bb      	strh	r3, [r7, #12]
    I2C_InitStructure.I2C_ClockSpeed = I2C_SPEED;
 800f8c2:	4b08      	ldr	r3, [pc, #32]	; (800f8e4 <IOE_I2C_Config+0x50>)
 800f8c4:	603b      	str	r3, [r7, #0]
  
    /* Initialize the I2C peripheral */
    I2C_Init(IOE_I2C, &I2C_InitStructure);
 800f8c6:	463b      	mov	r3, r7
 800f8c8:	4619      	mov	r1, r3
 800f8ca:	4805      	ldr	r0, [pc, #20]	; (800f8e0 <IOE_I2C_Config+0x4c>)
 800f8cc:	f7f7 f866 	bl	800699c <I2C_Init>
  
    /* Enable the I2C peripheral */
    I2C_Cmd(IOE_I2C, ENABLE);
 800f8d0:	2101      	movs	r1, #1
 800f8d2:	4803      	ldr	r0, [pc, #12]	; (800f8e0 <IOE_I2C_Config+0x4c>)
 800f8d4:	f7f7 f943 	bl	8006b5e <I2C_Cmd>
  }   
}
 800f8d8:	bf00      	nop
 800f8da:	3710      	adds	r7, #16
 800f8dc:	46bd      	mov	sp, r7
 800f8de:	bd80      	pop	{r7, pc}
 800f8e0:	40005c00 	.word	0x40005c00
 800f8e4:	000186a0 	.word	0x000186a0

0800f8e8 <IOE_DMA_Config>:
  * @brief  Configure the DMA Peripheral used to handle communication via I2C.
  * @param  None
  * @retval None
  */
static void IOE_DMA_Config(IOE_DMADirection_TypeDef Direction, uint8_t* buffer)
{
 800f8e8:	b580      	push	{r7, lr}
 800f8ea:	b092      	sub	sp, #72	; 0x48
 800f8ec:	af00      	add	r7, sp, #0
 800f8ee:	4603      	mov	r3, r0
 800f8f0:	6039      	str	r1, [r7, #0]
 800f8f2:	71fb      	strb	r3, [r7, #7]
  DMA_InitTypeDef DMA_InitStructure;
  
  RCC_AHB1PeriphClockCmd(IOE_DMA_CLK, ENABLE);
 800f8f4:	2101      	movs	r1, #1
 800f8f6:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800f8fa:	f7f9 f82d 	bl	8008958 <RCC_AHB1PeriphClockCmd>
  
  /* Initialize the DMA_Channel member */
  DMA_InitStructure.DMA_Channel = IOE_DMA_CHANNEL;
 800f8fe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800f902:	60fb      	str	r3, [r7, #12]
  
  /* Initialize the DMA_PeripheralBaseAddr member */
  DMA_InitStructure.DMA_PeripheralBaseAddr = IOE_I2C_DR;
 800f904:	4b1e      	ldr	r3, [pc, #120]	; (800f980 <IOE_DMA_Config+0x98>)
 800f906:	613b      	str	r3, [r7, #16]
  
  /* Initialize the DMA_Memory0BaseAddr member */
  DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)buffer;
 800f908:	683b      	ldr	r3, [r7, #0]
 800f90a:	617b      	str	r3, [r7, #20]
  
  /* Initialize the DMA_PeripheralInc member */
  DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 800f90c:	2300      	movs	r3, #0
 800f90e:	623b      	str	r3, [r7, #32]
  
  /* Initialize the DMA_MemoryInc member */
  DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
 800f910:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f914:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Initialize the DMA_PeripheralDataSize member */
  DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
 800f916:	2300      	movs	r3, #0
 800f918:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize the DMA_MemoryDataSize member */
  DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
 800f91a:	2300      	movs	r3, #0
 800f91c:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Initialize the DMA_Mode member */
  DMA_InitStructure.DMA_Mode = DMA_Mode_Normal;
 800f91e:	2300      	movs	r3, #0
 800f920:	633b      	str	r3, [r7, #48]	; 0x30
  
  /* Initialize the DMA_Priority member */
  DMA_InitStructure.DMA_Priority = DMA_Priority_Low;
 800f922:	2300      	movs	r3, #0
 800f924:	637b      	str	r3, [r7, #52]	; 0x34
  
  /* Initialize the DMA_FIFOMode member */
  DMA_InitStructure.DMA_FIFOMode = DMA_FIFOMode_Enable;
 800f926:	2304      	movs	r3, #4
 800f928:	63bb      	str	r3, [r7, #56]	; 0x38
  
  /* Initialize the DMA_FIFOThreshold member */
  DMA_InitStructure.DMA_FIFOThreshold = DMA_FIFOThreshold_1QuarterFull;
 800f92a:	2300      	movs	r3, #0
 800f92c:	63fb      	str	r3, [r7, #60]	; 0x3c
  
  /* Initialize the DMA_MemoryBurst member */
  DMA_InitStructure.DMA_MemoryBurst = DMA_MemoryBurst_Single;
 800f92e:	2300      	movs	r3, #0
 800f930:	643b      	str	r3, [r7, #64]	; 0x40
  
  /* Initialize the DMA_PeripheralBurst member */
  DMA_InitStructure.DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
 800f932:	2300      	movs	r3, #0
 800f934:	647b      	str	r3, [r7, #68]	; 0x44
  
  /* If using DMA for Reception */
  if (Direction == IOE_DMA_RX)
 800f936:	79fb      	ldrb	r3, [r7, #7]
 800f938:	2b01      	cmp	r3, #1
 800f93a:	d10d      	bne.n	800f958 <IOE_DMA_Config+0x70>
  {    
    /* Initialize the DMA_DIR member */
    DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralToMemory;
 800f93c:	2300      	movs	r3, #0
 800f93e:	61bb      	str	r3, [r7, #24]
    
    /* Initialize the DMA_BufferSize member */
    DMA_InitStructure.DMA_BufferSize = 2;
 800f940:	2302      	movs	r3, #2
 800f942:	61fb      	str	r3, [r7, #28]
    
    DMA_DeInit(IOE_DMA_RX_STREAM);
 800f944:	480f      	ldr	r0, [pc, #60]	; (800f984 <IOE_DMA_Config+0x9c>)
 800f946:	f7f4 f937 	bl	8003bb8 <DMA_DeInit>
    
    DMA_Init(IOE_DMA_RX_STREAM, &DMA_InitStructure);
 800f94a:	f107 030c 	add.w	r3, r7, #12
 800f94e:	4619      	mov	r1, r3
 800f950:	480c      	ldr	r0, [pc, #48]	; (800f984 <IOE_DMA_Config+0x9c>)
 800f952:	f7f4 fa05 	bl	8003d60 <DMA_Init>
    
    DMA_DeInit(IOE_DMA_TX_STREAM);
    
    DMA_Init(IOE_DMA_TX_STREAM, &DMA_InitStructure);
  }
}
 800f956:	e00f      	b.n	800f978 <IOE_DMA_Config+0x90>
  else if (Direction == IOE_DMA_TX)
 800f958:	79fb      	ldrb	r3, [r7, #7]
 800f95a:	2b00      	cmp	r3, #0
 800f95c:	d10c      	bne.n	800f978 <IOE_DMA_Config+0x90>
    DMA_InitStructure.DMA_DIR = DMA_DIR_MemoryToPeripheral;
 800f95e:	2340      	movs	r3, #64	; 0x40
 800f960:	61bb      	str	r3, [r7, #24]
    DMA_InitStructure.DMA_BufferSize = 1;
 800f962:	2301      	movs	r3, #1
 800f964:	61fb      	str	r3, [r7, #28]
    DMA_DeInit(IOE_DMA_TX_STREAM);
 800f966:	4808      	ldr	r0, [pc, #32]	; (800f988 <IOE_DMA_Config+0xa0>)
 800f968:	f7f4 f926 	bl	8003bb8 <DMA_DeInit>
    DMA_Init(IOE_DMA_TX_STREAM, &DMA_InitStructure);
 800f96c:	f107 030c 	add.w	r3, r7, #12
 800f970:	4619      	mov	r1, r3
 800f972:	4805      	ldr	r0, [pc, #20]	; (800f988 <IOE_DMA_Config+0xa0>)
 800f974:	f7f4 f9f4 	bl	8003d60 <DMA_Init>
}
 800f978:	bf00      	nop
 800f97a:	3748      	adds	r7, #72	; 0x48
 800f97c:	46bd      	mov	sp, r7
 800f97e:	bd80      	pop	{r7, pc}
 800f980:	40005c10 	.word	0x40005c10
 800f984:	40026010 	.word	0x40026010
 800f988:	400260a0 	.word	0x400260a0

0800f98c <I2C_WriteDeviceRegister>:
  * @param  RegisterAddr: The target register address
  * @param  RegisterValue: The target register value to be written 
  * @retval IOE_OK: if all operations are OK. Other value if error.
  */
uint8_t I2C_WriteDeviceRegister(uint8_t RegisterAddr, uint8_t RegisterValue)
{
 800f98c:	b580      	push	{r7, lr}
 800f98e:	b084      	sub	sp, #16
 800f990:	af00      	add	r7, sp, #0
 800f992:	4603      	mov	r3, r0
 800f994:	460a      	mov	r2, r1
 800f996:	71fb      	strb	r3, [r7, #7]
 800f998:	4613      	mov	r3, r2
 800f99a:	71bb      	strb	r3, [r7, #6]
  uint32_t read_verif = 0;
 800f99c:	2300      	movs	r3, #0
 800f99e:	60fb      	str	r3, [r7, #12]

  /* Begin the configuration sequence */
  I2C_GenerateSTART(IOE_I2C, ENABLE);
 800f9a0:	2101      	movs	r1, #1
 800f9a2:	484c      	ldr	r0, [pc, #304]	; (800fad4 <I2C_WriteDeviceRegister+0x148>)
 800f9a4:	f7f7 f93d 	bl	8006c22 <I2C_GenerateSTART>

  /* Test on EV5 and clear it */
  IOE_TimeOut = TIMEOUT_MAX;
 800f9a8:	4b4b      	ldr	r3, [pc, #300]	; (800fad8 <I2C_WriteDeviceRegister+0x14c>)
 800f9aa:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800f9ae:	601a      	str	r2, [r3, #0]
  while (!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_SB))
 800f9b0:	e00a      	b.n	800f9c8 <I2C_WriteDeviceRegister+0x3c>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
 800f9b2:	4b49      	ldr	r3, [pc, #292]	; (800fad8 <I2C_WriteDeviceRegister+0x14c>)
 800f9b4:	681b      	ldr	r3, [r3, #0]
 800f9b6:	1e5a      	subs	r2, r3, #1
 800f9b8:	4947      	ldr	r1, [pc, #284]	; (800fad8 <I2C_WriteDeviceRegister+0x14c>)
 800f9ba:	600a      	str	r2, [r1, #0]
 800f9bc:	2b00      	cmp	r3, #0
 800f9be:	d103      	bne.n	800f9c8 <I2C_WriteDeviceRegister+0x3c>
 800f9c0:	f000 fa6e 	bl	800fea0 <IOE_TimeoutUserCallback>
 800f9c4:	4603      	mov	r3, r0
 800f9c6:	e080      	b.n	800faca <I2C_WriteDeviceRegister+0x13e>
  while (!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_SB))
 800f9c8:	4944      	ldr	r1, [pc, #272]	; (800fadc <I2C_WriteDeviceRegister+0x150>)
 800f9ca:	4842      	ldr	r0, [pc, #264]	; (800fad4 <I2C_WriteDeviceRegister+0x148>)
 800f9cc:	f7f7 fc2a 	bl	8007224 <I2C_GetFlagStatus>
 800f9d0:	4603      	mov	r3, r0
 800f9d2:	2b00      	cmp	r3, #0
 800f9d4:	d0ed      	beq.n	800f9b2 <I2C_WriteDeviceRegister+0x26>
  }

  /* Transmit the slave address and enable writing operation */
  I2C_Send7bitAddress(IOE_I2C, IOE_ADDR, I2C_Direction_Transmitter);
 800f9d6:	2200      	movs	r2, #0
 800f9d8:	2182      	movs	r1, #130	; 0x82
 800f9da:	483e      	ldr	r0, [pc, #248]	; (800fad4 <I2C_WriteDeviceRegister+0x148>)
 800f9dc:	f7f7 f961 	bl	8006ca2 <I2C_Send7bitAddress>
  
  /* Test on EV6 and clear it */
  IOE_TimeOut = TIMEOUT_MAX;  
 800f9e0:	4b3d      	ldr	r3, [pc, #244]	; (800fad8 <I2C_WriteDeviceRegister+0x14c>)
 800f9e2:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800f9e6:	601a      	str	r2, [r3, #0]
  while (!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_ADDR))
 800f9e8:	e00a      	b.n	800fa00 <I2C_WriteDeviceRegister+0x74>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
 800f9ea:	4b3b      	ldr	r3, [pc, #236]	; (800fad8 <I2C_WriteDeviceRegister+0x14c>)
 800f9ec:	681b      	ldr	r3, [r3, #0]
 800f9ee:	1e5a      	subs	r2, r3, #1
 800f9f0:	4939      	ldr	r1, [pc, #228]	; (800fad8 <I2C_WriteDeviceRegister+0x14c>)
 800f9f2:	600a      	str	r2, [r1, #0]
 800f9f4:	2b00      	cmp	r3, #0
 800f9f6:	d103      	bne.n	800fa00 <I2C_WriteDeviceRegister+0x74>
 800f9f8:	f000 fa52 	bl	800fea0 <IOE_TimeoutUserCallback>
 800f9fc:	4603      	mov	r3, r0
 800f9fe:	e064      	b.n	800faca <I2C_WriteDeviceRegister+0x13e>
  while (!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_ADDR))
 800fa00:	4937      	ldr	r1, [pc, #220]	; (800fae0 <I2C_WriteDeviceRegister+0x154>)
 800fa02:	4834      	ldr	r0, [pc, #208]	; (800fad4 <I2C_WriteDeviceRegister+0x148>)
 800fa04:	f7f7 fc0e 	bl	8007224 <I2C_GetFlagStatus>
 800fa08:	4603      	mov	r3, r0
 800fa0a:	2b00      	cmp	r3, #0
 800fa0c:	d0ed      	beq.n	800f9ea <I2C_WriteDeviceRegister+0x5e>
  }
  
  /* Read status register 2 to clear ADDR flag */
  IOE_I2C->SR2;
 800fa0e:	4b31      	ldr	r3, [pc, #196]	; (800fad4 <I2C_WriteDeviceRegister+0x148>)
 800fa10:	8b1b      	ldrh	r3, [r3, #24]
  
  /* Test on EV8_1 and clear it */
  IOE_TimeOut = TIMEOUT_MAX;
 800fa12:	4b31      	ldr	r3, [pc, #196]	; (800fad8 <I2C_WriteDeviceRegister+0x14c>)
 800fa14:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800fa18:	601a      	str	r2, [r3, #0]
  while (!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_TXE))
 800fa1a:	e00a      	b.n	800fa32 <I2C_WriteDeviceRegister+0xa6>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
 800fa1c:	4b2e      	ldr	r3, [pc, #184]	; (800fad8 <I2C_WriteDeviceRegister+0x14c>)
 800fa1e:	681b      	ldr	r3, [r3, #0]
 800fa20:	1e5a      	subs	r2, r3, #1
 800fa22:	492d      	ldr	r1, [pc, #180]	; (800fad8 <I2C_WriteDeviceRegister+0x14c>)
 800fa24:	600a      	str	r2, [r1, #0]
 800fa26:	2b00      	cmp	r3, #0
 800fa28:	d103      	bne.n	800fa32 <I2C_WriteDeviceRegister+0xa6>
 800fa2a:	f000 fa39 	bl	800fea0 <IOE_TimeoutUserCallback>
 800fa2e:	4603      	mov	r3, r0
 800fa30:	e04b      	b.n	800faca <I2C_WriteDeviceRegister+0x13e>
  while (!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_TXE))
 800fa32:	492c      	ldr	r1, [pc, #176]	; (800fae4 <I2C_WriteDeviceRegister+0x158>)
 800fa34:	4827      	ldr	r0, [pc, #156]	; (800fad4 <I2C_WriteDeviceRegister+0x148>)
 800fa36:	f7f7 fbf5 	bl	8007224 <I2C_GetFlagStatus>
 800fa3a:	4603      	mov	r3, r0
 800fa3c:	2b00      	cmp	r3, #0
 800fa3e:	d0ed      	beq.n	800fa1c <I2C_WriteDeviceRegister+0x90>
  }
  
  /* Transmit the first address for r/w operations */
  I2C_SendData(IOE_I2C, RegisterAddr);
 800fa40:	79fb      	ldrb	r3, [r7, #7]
 800fa42:	4619      	mov	r1, r3
 800fa44:	4823      	ldr	r0, [pc, #140]	; (800fad4 <I2C_WriteDeviceRegister+0x148>)
 800fa46:	f7f7 fa91 	bl	8006f6c <I2C_SendData>
  
  /* Test on EV8 and clear it */
  IOE_TimeOut = TIMEOUT_MAX;
 800fa4a:	4b23      	ldr	r3, [pc, #140]	; (800fad8 <I2C_WriteDeviceRegister+0x14c>)
 800fa4c:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800fa50:	601a      	str	r2, [r3, #0]
  while (!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_TXE))
 800fa52:	e00a      	b.n	800fa6a <I2C_WriteDeviceRegister+0xde>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
 800fa54:	4b20      	ldr	r3, [pc, #128]	; (800fad8 <I2C_WriteDeviceRegister+0x14c>)
 800fa56:	681b      	ldr	r3, [r3, #0]
 800fa58:	1e5a      	subs	r2, r3, #1
 800fa5a:	491f      	ldr	r1, [pc, #124]	; (800fad8 <I2C_WriteDeviceRegister+0x14c>)
 800fa5c:	600a      	str	r2, [r1, #0]
 800fa5e:	2b00      	cmp	r3, #0
 800fa60:	d103      	bne.n	800fa6a <I2C_WriteDeviceRegister+0xde>
 800fa62:	f000 fa1d 	bl	800fea0 <IOE_TimeoutUserCallback>
 800fa66:	4603      	mov	r3, r0
 800fa68:	e02f      	b.n	800faca <I2C_WriteDeviceRegister+0x13e>
  while (!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_TXE))
 800fa6a:	491e      	ldr	r1, [pc, #120]	; (800fae4 <I2C_WriteDeviceRegister+0x158>)
 800fa6c:	4819      	ldr	r0, [pc, #100]	; (800fad4 <I2C_WriteDeviceRegister+0x148>)
 800fa6e:	f7f7 fbd9 	bl	8007224 <I2C_GetFlagStatus>
 800fa72:	4603      	mov	r3, r0
 800fa74:	2b00      	cmp	r3, #0
 800fa76:	d0ed      	beq.n	800fa54 <I2C_WriteDeviceRegister+0xc8>
  }
  
  /* Prepare the register value to be sent */
  I2C_SendData(IOE_I2C, RegisterValue);
 800fa78:	79bb      	ldrb	r3, [r7, #6]
 800fa7a:	4619      	mov	r1, r3
 800fa7c:	4815      	ldr	r0, [pc, #84]	; (800fad4 <I2C_WriteDeviceRegister+0x148>)
 800fa7e:	f7f7 fa75 	bl	8006f6c <I2C_SendData>
  
  /* Test on EV8_2 and clear it */
  IOE_TimeOut = TIMEOUT_MAX;
 800fa82:	4b15      	ldr	r3, [pc, #84]	; (800fad8 <I2C_WriteDeviceRegister+0x14c>)
 800fa84:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800fa88:	601a      	str	r2, [r3, #0]
  while ((!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_TXE)) || (!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_BTF)))
 800fa8a:	e00a      	b.n	800faa2 <I2C_WriteDeviceRegister+0x116>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
 800fa8c:	4b12      	ldr	r3, [pc, #72]	; (800fad8 <I2C_WriteDeviceRegister+0x14c>)
 800fa8e:	681b      	ldr	r3, [r3, #0]
 800fa90:	1e5a      	subs	r2, r3, #1
 800fa92:	4911      	ldr	r1, [pc, #68]	; (800fad8 <I2C_WriteDeviceRegister+0x14c>)
 800fa94:	600a      	str	r2, [r1, #0]
 800fa96:	2b00      	cmp	r3, #0
 800fa98:	d103      	bne.n	800faa2 <I2C_WriteDeviceRegister+0x116>
 800fa9a:	f000 fa01 	bl	800fea0 <IOE_TimeoutUserCallback>
 800fa9e:	4603      	mov	r3, r0
 800faa0:	e013      	b.n	800faca <I2C_WriteDeviceRegister+0x13e>
  while ((!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_TXE)) || (!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_BTF)))
 800faa2:	4910      	ldr	r1, [pc, #64]	; (800fae4 <I2C_WriteDeviceRegister+0x158>)
 800faa4:	480b      	ldr	r0, [pc, #44]	; (800fad4 <I2C_WriteDeviceRegister+0x148>)
 800faa6:	f7f7 fbbd 	bl	8007224 <I2C_GetFlagStatus>
 800faaa:	4603      	mov	r3, r0
 800faac:	2b00      	cmp	r3, #0
 800faae:	d0ed      	beq.n	800fa8c <I2C_WriteDeviceRegister+0x100>
 800fab0:	490d      	ldr	r1, [pc, #52]	; (800fae8 <I2C_WriteDeviceRegister+0x15c>)
 800fab2:	4808      	ldr	r0, [pc, #32]	; (800fad4 <I2C_WriteDeviceRegister+0x148>)
 800fab4:	f7f7 fbb6 	bl	8007224 <I2C_GetFlagStatus>
 800fab8:	4603      	mov	r3, r0
 800faba:	2b00      	cmp	r3, #0
 800fabc:	d0e6      	beq.n	800fa8c <I2C_WriteDeviceRegister+0x100>
  }
  
  /* End the configuration sequence */
  I2C_GenerateSTOP(IOE_I2C, ENABLE);
 800fabe:	2101      	movs	r1, #1
 800fac0:	4804      	ldr	r0, [pc, #16]	; (800fad4 <I2C_WriteDeviceRegister+0x148>)
 800fac2:	f7f7 f8ce 	bl	8006c62 <I2C_GenerateSTOP>
    read_verif = 0;
  }
#endif
  
  /* Return the verifying value: 0 (Passed) or 1 (Failed) */
  return read_verif;
 800fac6:	68fb      	ldr	r3, [r7, #12]
 800fac8:	b2db      	uxtb	r3, r3
  
}
 800faca:	4618      	mov	r0, r3
 800facc:	3710      	adds	r7, #16
 800face:	46bd      	mov	sp, r7
 800fad0:	bd80      	pop	{r7, pc}
 800fad2:	bf00      	nop
 800fad4:	40005c00 	.word	0x40005c00
 800fad8:	200000a4 	.word	0x200000a4
 800fadc:	10000001 	.word	0x10000001
 800fae0:	10000002 	.word	0x10000002
 800fae4:	10000080 	.word	0x10000080
 800fae8:	10000004 	.word	0x10000004

0800faec <I2C_ReadDeviceRegister>:
  * @brief  Reads a register of the device through I2C without DMA.
  * @param  RegisterAddr: The target register address (between 00x and 0x24)
  * @retval The value of the read register (0xAA if Timeout occurred)   
  */ 
uint8_t I2C_ReadDeviceRegister(uint8_t RegisterAddr)
{
 800faec:	b580      	push	{r7, lr}
 800faee:	b084      	sub	sp, #16
 800faf0:	af00      	add	r7, sp, #0
 800faf2:	4603      	mov	r3, r0
 800faf4:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0;
 800faf6:	2300      	movs	r3, #0
 800faf8:	73fb      	strb	r3, [r7, #15]
  
  /* Enable the I2C peripheral */
  I2C_GenerateSTART(IOE_I2C, ENABLE);
 800fafa:	2101      	movs	r1, #1
 800fafc:	486b      	ldr	r0, [pc, #428]	; (800fcac <I2C_ReadDeviceRegister+0x1c0>)
 800fafe:	f7f7 f890 	bl	8006c22 <I2C_GenerateSTART>
  
    /* Test on EV5 and clear it */
  IOE_TimeOut = TIMEOUT_MAX;
 800fb02:	4b6b      	ldr	r3, [pc, #428]	; (800fcb0 <I2C_ReadDeviceRegister+0x1c4>)
 800fb04:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800fb08:	601a      	str	r2, [r3, #0]
  while (!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_SB))
 800fb0a:	e00a      	b.n	800fb22 <I2C_ReadDeviceRegister+0x36>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
 800fb0c:	4b68      	ldr	r3, [pc, #416]	; (800fcb0 <I2C_ReadDeviceRegister+0x1c4>)
 800fb0e:	681b      	ldr	r3, [r3, #0]
 800fb10:	1e5a      	subs	r2, r3, #1
 800fb12:	4967      	ldr	r1, [pc, #412]	; (800fcb0 <I2C_ReadDeviceRegister+0x1c4>)
 800fb14:	600a      	str	r2, [r1, #0]
 800fb16:	2b00      	cmp	r3, #0
 800fb18:	d103      	bne.n	800fb22 <I2C_ReadDeviceRegister+0x36>
 800fb1a:	f000 f9c1 	bl	800fea0 <IOE_TimeoutUserCallback>
 800fb1e:	4603      	mov	r3, r0
 800fb20:	e0c0      	b.n	800fca4 <I2C_ReadDeviceRegister+0x1b8>
  while (!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_SB))
 800fb22:	4964      	ldr	r1, [pc, #400]	; (800fcb4 <I2C_ReadDeviceRegister+0x1c8>)
 800fb24:	4861      	ldr	r0, [pc, #388]	; (800fcac <I2C_ReadDeviceRegister+0x1c0>)
 800fb26:	f7f7 fb7d 	bl	8007224 <I2C_GetFlagStatus>
 800fb2a:	4603      	mov	r3, r0
 800fb2c:	2b00      	cmp	r3, #0
 800fb2e:	d0ed      	beq.n	800fb0c <I2C_ReadDeviceRegister+0x20>
  }
  /* Disable Acknowledgement */
  I2C_AcknowledgeConfig(IOE_I2C, DISABLE);
 800fb30:	2100      	movs	r1, #0
 800fb32:	485e      	ldr	r0, [pc, #376]	; (800fcac <I2C_ReadDeviceRegister+0x1c0>)
 800fb34:	f7f7 f8d3 	bl	8006cde <I2C_AcknowledgeConfig>
  
  /* Transmit the slave address and enable writing operation */
  I2C_Send7bitAddress(IOE_I2C, IOE_ADDR, I2C_Direction_Transmitter);
 800fb38:	2200      	movs	r2, #0
 800fb3a:	2182      	movs	r1, #130	; 0x82
 800fb3c:	485b      	ldr	r0, [pc, #364]	; (800fcac <I2C_ReadDeviceRegister+0x1c0>)
 800fb3e:	f7f7 f8b0 	bl	8006ca2 <I2C_Send7bitAddress>
  
  /* Test on EV6 and clear it */
  IOE_TimeOut = TIMEOUT_MAX;  
 800fb42:	4b5b      	ldr	r3, [pc, #364]	; (800fcb0 <I2C_ReadDeviceRegister+0x1c4>)
 800fb44:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800fb48:	601a      	str	r2, [r3, #0]
  while (!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_ADDR))
 800fb4a:	e00a      	b.n	800fb62 <I2C_ReadDeviceRegister+0x76>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
 800fb4c:	4b58      	ldr	r3, [pc, #352]	; (800fcb0 <I2C_ReadDeviceRegister+0x1c4>)
 800fb4e:	681b      	ldr	r3, [r3, #0]
 800fb50:	1e5a      	subs	r2, r3, #1
 800fb52:	4957      	ldr	r1, [pc, #348]	; (800fcb0 <I2C_ReadDeviceRegister+0x1c4>)
 800fb54:	600a      	str	r2, [r1, #0]
 800fb56:	2b00      	cmp	r3, #0
 800fb58:	d103      	bne.n	800fb62 <I2C_ReadDeviceRegister+0x76>
 800fb5a:	f000 f9a1 	bl	800fea0 <IOE_TimeoutUserCallback>
 800fb5e:	4603      	mov	r3, r0
 800fb60:	e0a0      	b.n	800fca4 <I2C_ReadDeviceRegister+0x1b8>
  while (!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_ADDR))
 800fb62:	4955      	ldr	r1, [pc, #340]	; (800fcb8 <I2C_ReadDeviceRegister+0x1cc>)
 800fb64:	4851      	ldr	r0, [pc, #324]	; (800fcac <I2C_ReadDeviceRegister+0x1c0>)
 800fb66:	f7f7 fb5d 	bl	8007224 <I2C_GetFlagStatus>
 800fb6a:	4603      	mov	r3, r0
 800fb6c:	2b00      	cmp	r3, #0
 800fb6e:	d0ed      	beq.n	800fb4c <I2C_ReadDeviceRegister+0x60>
  }
  
  /* Read status register 2 to clear ADDR flag */
  IOE_I2C->SR2;
 800fb70:	4b4e      	ldr	r3, [pc, #312]	; (800fcac <I2C_ReadDeviceRegister+0x1c0>)
 800fb72:	8b1b      	ldrh	r3, [r3, #24]
  
  /* Test on EV8 and clear it */
  IOE_TimeOut = TIMEOUT_MAX;
 800fb74:	4b4e      	ldr	r3, [pc, #312]	; (800fcb0 <I2C_ReadDeviceRegister+0x1c4>)
 800fb76:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800fb7a:	601a      	str	r2, [r3, #0]
  while (!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_TXE))
 800fb7c:	e00a      	b.n	800fb94 <I2C_ReadDeviceRegister+0xa8>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
 800fb7e:	4b4c      	ldr	r3, [pc, #304]	; (800fcb0 <I2C_ReadDeviceRegister+0x1c4>)
 800fb80:	681b      	ldr	r3, [r3, #0]
 800fb82:	1e5a      	subs	r2, r3, #1
 800fb84:	494a      	ldr	r1, [pc, #296]	; (800fcb0 <I2C_ReadDeviceRegister+0x1c4>)
 800fb86:	600a      	str	r2, [r1, #0]
 800fb88:	2b00      	cmp	r3, #0
 800fb8a:	d103      	bne.n	800fb94 <I2C_ReadDeviceRegister+0xa8>
 800fb8c:	f000 f988 	bl	800fea0 <IOE_TimeoutUserCallback>
 800fb90:	4603      	mov	r3, r0
 800fb92:	e087      	b.n	800fca4 <I2C_ReadDeviceRegister+0x1b8>
  while (!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_TXE))
 800fb94:	4949      	ldr	r1, [pc, #292]	; (800fcbc <I2C_ReadDeviceRegister+0x1d0>)
 800fb96:	4845      	ldr	r0, [pc, #276]	; (800fcac <I2C_ReadDeviceRegister+0x1c0>)
 800fb98:	f7f7 fb44 	bl	8007224 <I2C_GetFlagStatus>
 800fb9c:	4603      	mov	r3, r0
 800fb9e:	2b00      	cmp	r3, #0
 800fba0:	d0ed      	beq.n	800fb7e <I2C_ReadDeviceRegister+0x92>
  }
  
  /* Transmit the first address for r/w operations */
  I2C_SendData(IOE_I2C, RegisterAddr);
 800fba2:	79fb      	ldrb	r3, [r7, #7]
 800fba4:	4619      	mov	r1, r3
 800fba6:	4841      	ldr	r0, [pc, #260]	; (800fcac <I2C_ReadDeviceRegister+0x1c0>)
 800fba8:	f7f7 f9e0 	bl	8006f6c <I2C_SendData>
  
  /* Test on EV8 and clear it */
  IOE_TimeOut = TIMEOUT_MAX;
 800fbac:	4b40      	ldr	r3, [pc, #256]	; (800fcb0 <I2C_ReadDeviceRegister+0x1c4>)
 800fbae:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800fbb2:	601a      	str	r2, [r3, #0]
  while ((!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_TXE)) || (!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_BTF)))
 800fbb4:	e00a      	b.n	800fbcc <I2C_ReadDeviceRegister+0xe0>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
 800fbb6:	4b3e      	ldr	r3, [pc, #248]	; (800fcb0 <I2C_ReadDeviceRegister+0x1c4>)
 800fbb8:	681b      	ldr	r3, [r3, #0]
 800fbba:	1e5a      	subs	r2, r3, #1
 800fbbc:	493c      	ldr	r1, [pc, #240]	; (800fcb0 <I2C_ReadDeviceRegister+0x1c4>)
 800fbbe:	600a      	str	r2, [r1, #0]
 800fbc0:	2b00      	cmp	r3, #0
 800fbc2:	d103      	bne.n	800fbcc <I2C_ReadDeviceRegister+0xe0>
 800fbc4:	f000 f96c 	bl	800fea0 <IOE_TimeoutUserCallback>
 800fbc8:	4603      	mov	r3, r0
 800fbca:	e06b      	b.n	800fca4 <I2C_ReadDeviceRegister+0x1b8>
  while ((!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_TXE)) || (!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_BTF)))
 800fbcc:	493b      	ldr	r1, [pc, #236]	; (800fcbc <I2C_ReadDeviceRegister+0x1d0>)
 800fbce:	4837      	ldr	r0, [pc, #220]	; (800fcac <I2C_ReadDeviceRegister+0x1c0>)
 800fbd0:	f7f7 fb28 	bl	8007224 <I2C_GetFlagStatus>
 800fbd4:	4603      	mov	r3, r0
 800fbd6:	2b00      	cmp	r3, #0
 800fbd8:	d0ed      	beq.n	800fbb6 <I2C_ReadDeviceRegister+0xca>
 800fbda:	4939      	ldr	r1, [pc, #228]	; (800fcc0 <I2C_ReadDeviceRegister+0x1d4>)
 800fbdc:	4833      	ldr	r0, [pc, #204]	; (800fcac <I2C_ReadDeviceRegister+0x1c0>)
 800fbde:	f7f7 fb21 	bl	8007224 <I2C_GetFlagStatus>
 800fbe2:	4603      	mov	r3, r0
 800fbe4:	2b00      	cmp	r3, #0
 800fbe6:	d0e6      	beq.n	800fbb6 <I2C_ReadDeviceRegister+0xca>
  }
  
  /* Regenerate a start condition */
  I2C_GenerateSTART(IOE_I2C, ENABLE);
 800fbe8:	2101      	movs	r1, #1
 800fbea:	4830      	ldr	r0, [pc, #192]	; (800fcac <I2C_ReadDeviceRegister+0x1c0>)
 800fbec:	f7f7 f819 	bl	8006c22 <I2C_GenerateSTART>
  
  /* Test on EV5 and clear it */
  IOE_TimeOut = TIMEOUT_MAX;
 800fbf0:	4b2f      	ldr	r3, [pc, #188]	; (800fcb0 <I2C_ReadDeviceRegister+0x1c4>)
 800fbf2:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800fbf6:	601a      	str	r2, [r3, #0]
  while (!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_SB))
 800fbf8:	e00a      	b.n	800fc10 <I2C_ReadDeviceRegister+0x124>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
 800fbfa:	4b2d      	ldr	r3, [pc, #180]	; (800fcb0 <I2C_ReadDeviceRegister+0x1c4>)
 800fbfc:	681b      	ldr	r3, [r3, #0]
 800fbfe:	1e5a      	subs	r2, r3, #1
 800fc00:	492b      	ldr	r1, [pc, #172]	; (800fcb0 <I2C_ReadDeviceRegister+0x1c4>)
 800fc02:	600a      	str	r2, [r1, #0]
 800fc04:	2b00      	cmp	r3, #0
 800fc06:	d103      	bne.n	800fc10 <I2C_ReadDeviceRegister+0x124>
 800fc08:	f000 f94a 	bl	800fea0 <IOE_TimeoutUserCallback>
 800fc0c:	4603      	mov	r3, r0
 800fc0e:	e049      	b.n	800fca4 <I2C_ReadDeviceRegister+0x1b8>
  while (!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_SB))
 800fc10:	4928      	ldr	r1, [pc, #160]	; (800fcb4 <I2C_ReadDeviceRegister+0x1c8>)
 800fc12:	4826      	ldr	r0, [pc, #152]	; (800fcac <I2C_ReadDeviceRegister+0x1c0>)
 800fc14:	f7f7 fb06 	bl	8007224 <I2C_GetFlagStatus>
 800fc18:	4603      	mov	r3, r0
 800fc1a:	2b00      	cmp	r3, #0
 800fc1c:	d0ed      	beq.n	800fbfa <I2C_ReadDeviceRegister+0x10e>
  }
  
  /* Transmit the slave address and enable writing operation */
  I2C_Send7bitAddress(IOE_I2C, IOE_ADDR, I2C_Direction_Receiver);
 800fc1e:	2201      	movs	r2, #1
 800fc20:	2182      	movs	r1, #130	; 0x82
 800fc22:	4822      	ldr	r0, [pc, #136]	; (800fcac <I2C_ReadDeviceRegister+0x1c0>)
 800fc24:	f7f7 f83d 	bl	8006ca2 <I2C_Send7bitAddress>
  
  /* Test on EV6 and clear it */
  IOE_TimeOut = TIMEOUT_MAX;
 800fc28:	4b21      	ldr	r3, [pc, #132]	; (800fcb0 <I2C_ReadDeviceRegister+0x1c4>)
 800fc2a:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800fc2e:	601a      	str	r2, [r3, #0]
  while (!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_ADDR))
 800fc30:	e00a      	b.n	800fc48 <I2C_ReadDeviceRegister+0x15c>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
 800fc32:	4b1f      	ldr	r3, [pc, #124]	; (800fcb0 <I2C_ReadDeviceRegister+0x1c4>)
 800fc34:	681b      	ldr	r3, [r3, #0]
 800fc36:	1e5a      	subs	r2, r3, #1
 800fc38:	491d      	ldr	r1, [pc, #116]	; (800fcb0 <I2C_ReadDeviceRegister+0x1c4>)
 800fc3a:	600a      	str	r2, [r1, #0]
 800fc3c:	2b00      	cmp	r3, #0
 800fc3e:	d103      	bne.n	800fc48 <I2C_ReadDeviceRegister+0x15c>
 800fc40:	f000 f92e 	bl	800fea0 <IOE_TimeoutUserCallback>
 800fc44:	4603      	mov	r3, r0
 800fc46:	e02d      	b.n	800fca4 <I2C_ReadDeviceRegister+0x1b8>
  while (!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_ADDR))
 800fc48:	491b      	ldr	r1, [pc, #108]	; (800fcb8 <I2C_ReadDeviceRegister+0x1cc>)
 800fc4a:	4818      	ldr	r0, [pc, #96]	; (800fcac <I2C_ReadDeviceRegister+0x1c0>)
 800fc4c:	f7f7 faea 	bl	8007224 <I2C_GetFlagStatus>
 800fc50:	4603      	mov	r3, r0
 800fc52:	2b00      	cmp	r3, #0
 800fc54:	d0ed      	beq.n	800fc32 <I2C_ReadDeviceRegister+0x146>
  }
  
    /* Read status register 2 to clear ADDR flag */
  IOE_I2C->SR2;
 800fc56:	4b15      	ldr	r3, [pc, #84]	; (800fcac <I2C_ReadDeviceRegister+0x1c0>)
 800fc58:	8b1b      	ldrh	r3, [r3, #24]
  
  /* Test on EV7 and clear it */
  IOE_TimeOut = TIMEOUT_MAX;
 800fc5a:	4b15      	ldr	r3, [pc, #84]	; (800fcb0 <I2C_ReadDeviceRegister+0x1c4>)
 800fc5c:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800fc60:	601a      	str	r2, [r3, #0]
  while (!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_RXNE))
 800fc62:	e00a      	b.n	800fc7a <I2C_ReadDeviceRegister+0x18e>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
 800fc64:	4b12      	ldr	r3, [pc, #72]	; (800fcb0 <I2C_ReadDeviceRegister+0x1c4>)
 800fc66:	681b      	ldr	r3, [r3, #0]
 800fc68:	1e5a      	subs	r2, r3, #1
 800fc6a:	4911      	ldr	r1, [pc, #68]	; (800fcb0 <I2C_ReadDeviceRegister+0x1c4>)
 800fc6c:	600a      	str	r2, [r1, #0]
 800fc6e:	2b00      	cmp	r3, #0
 800fc70:	d103      	bne.n	800fc7a <I2C_ReadDeviceRegister+0x18e>
 800fc72:	f000 f915 	bl	800fea0 <IOE_TimeoutUserCallback>
 800fc76:	4603      	mov	r3, r0
 800fc78:	e014      	b.n	800fca4 <I2C_ReadDeviceRegister+0x1b8>
  while (!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_RXNE))
 800fc7a:	4912      	ldr	r1, [pc, #72]	; (800fcc4 <I2C_ReadDeviceRegister+0x1d8>)
 800fc7c:	480b      	ldr	r0, [pc, #44]	; (800fcac <I2C_ReadDeviceRegister+0x1c0>)
 800fc7e:	f7f7 fad1 	bl	8007224 <I2C_GetFlagStatus>
 800fc82:	4603      	mov	r3, r0
 800fc84:	2b00      	cmp	r3, #0
 800fc86:	d0ed      	beq.n	800fc64 <I2C_ReadDeviceRegister+0x178>
  }
  
  /* End the configuration sequence */
  I2C_GenerateSTOP(IOE_I2C, ENABLE);
 800fc88:	2101      	movs	r1, #1
 800fc8a:	4808      	ldr	r0, [pc, #32]	; (800fcac <I2C_ReadDeviceRegister+0x1c0>)
 800fc8c:	f7f6 ffe9 	bl	8006c62 <I2C_GenerateSTOP>
  
  /* Load the register value */
  tmp = I2C_ReceiveData(IOE_I2C);
 800fc90:	4806      	ldr	r0, [pc, #24]	; (800fcac <I2C_ReadDeviceRegister+0x1c0>)
 800fc92:	f7f7 f97b 	bl	8006f8c <I2C_ReceiveData>
 800fc96:	4603      	mov	r3, r0
 800fc98:	73fb      	strb	r3, [r7, #15]
  
  /* Enable Acknowledgement */
  I2C_AcknowledgeConfig(IOE_I2C, ENABLE);
 800fc9a:	2101      	movs	r1, #1
 800fc9c:	4803      	ldr	r0, [pc, #12]	; (800fcac <I2C_ReadDeviceRegister+0x1c0>)
 800fc9e:	f7f7 f81e 	bl	8006cde <I2C_AcknowledgeConfig>
  
  /* Return the read value */
  return tmp;
 800fca2:	7bfb      	ldrb	r3, [r7, #15]
  
}
 800fca4:	4618      	mov	r0, r3
 800fca6:	3710      	adds	r7, #16
 800fca8:	46bd      	mov	sp, r7
 800fcaa:	bd80      	pop	{r7, pc}
 800fcac:	40005c00 	.word	0x40005c00
 800fcb0:	200000a4 	.word	0x200000a4
 800fcb4:	10000001 	.word	0x10000001
 800fcb8:	10000002 	.word	0x10000002
 800fcbc:	10000080 	.word	0x10000080
 800fcc0:	10000004 	.word	0x10000004
 800fcc4:	10000040 	.word	0x10000040

0800fcc8 <I2C_ReadDataBuffer>:
  * @brief  Reads a buffer of 2 bytes from the device registers.
  * @param  RegisterAddr: The target register adress (between 00x and 0x24)
  * @retval The data in the buffer containing the two returned bytes (in halfword).   
  */
uint16_t I2C_ReadDataBuffer(uint32_t RegisterAddr)
{
 800fcc8:	b580      	push	{r7, lr}
 800fcca:	b084      	sub	sp, #16
 800fccc:	af00      	add	r7, sp, #0
 800fcce:	6078      	str	r0, [r7, #4]
  uint8_t IOE_BufferRX[2] = {0x00, 0x00};  
 800fcd0:	2300      	movs	r3, #0
 800fcd2:	733b      	strb	r3, [r7, #12]
 800fcd4:	2300      	movs	r3, #0
 800fcd6:	737b      	strb	r3, [r7, #13]
  
  /* Enable the I2C peripheral */
  I2C_GenerateSTART(IOE_I2C, ENABLE);
 800fcd8:	2101      	movs	r1, #1
 800fcda:	486b      	ldr	r0, [pc, #428]	; (800fe88 <I2C_ReadDataBuffer+0x1c0>)
 800fcdc:	f7f6 ffa1 	bl	8006c22 <I2C_GenerateSTART>
 
  /* Test on EV5 and clear it */
  IOE_TimeOut = TIMEOUT_MAX;
 800fce0:	4b6a      	ldr	r3, [pc, #424]	; (800fe8c <I2C_ReadDataBuffer+0x1c4>)
 800fce2:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800fce6:	601a      	str	r2, [r3, #0]
  while (!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_SB))
 800fce8:	e00b      	b.n	800fd02 <I2C_ReadDataBuffer+0x3a>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
 800fcea:	4b68      	ldr	r3, [pc, #416]	; (800fe8c <I2C_ReadDataBuffer+0x1c4>)
 800fcec:	681b      	ldr	r3, [r3, #0]
 800fcee:	1e5a      	subs	r2, r3, #1
 800fcf0:	4966      	ldr	r1, [pc, #408]	; (800fe8c <I2C_ReadDataBuffer+0x1c4>)
 800fcf2:	600a      	str	r2, [r1, #0]
 800fcf4:	2b00      	cmp	r3, #0
 800fcf6:	d104      	bne.n	800fd02 <I2C_ReadDataBuffer+0x3a>
 800fcf8:	f000 f8d2 	bl	800fea0 <IOE_TimeoutUserCallback>
 800fcfc:	4603      	mov	r3, r0
 800fcfe:	b29b      	uxth	r3, r3
 800fd00:	e0be      	b.n	800fe80 <I2C_ReadDataBuffer+0x1b8>
  while (!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_SB))
 800fd02:	4963      	ldr	r1, [pc, #396]	; (800fe90 <I2C_ReadDataBuffer+0x1c8>)
 800fd04:	4860      	ldr	r0, [pc, #384]	; (800fe88 <I2C_ReadDataBuffer+0x1c0>)
 800fd06:	f7f7 fa8d 	bl	8007224 <I2C_GetFlagStatus>
 800fd0a:	4603      	mov	r3, r0
 800fd0c:	2b00      	cmp	r3, #0
 800fd0e:	d0ec      	beq.n	800fcea <I2C_ReadDataBuffer+0x22>
  }
   
  /* Send device address for write */
  I2C_Send7bitAddress(IOE_I2C, IOE_ADDR, I2C_Direction_Transmitter);
 800fd10:	2200      	movs	r2, #0
 800fd12:	2182      	movs	r1, #130	; 0x82
 800fd14:	485c      	ldr	r0, [pc, #368]	; (800fe88 <I2C_ReadDataBuffer+0x1c0>)
 800fd16:	f7f6 ffc4 	bl	8006ca2 <I2C_Send7bitAddress>
  
  /* Test on EV6 and clear it */
  IOE_TimeOut = TIMEOUT_MAX;  
 800fd1a:	4b5c      	ldr	r3, [pc, #368]	; (800fe8c <I2C_ReadDataBuffer+0x1c4>)
 800fd1c:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800fd20:	601a      	str	r2, [r3, #0]
  while (!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_ADDR))
 800fd22:	e00b      	b.n	800fd3c <I2C_ReadDataBuffer+0x74>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
 800fd24:	4b59      	ldr	r3, [pc, #356]	; (800fe8c <I2C_ReadDataBuffer+0x1c4>)
 800fd26:	681b      	ldr	r3, [r3, #0]
 800fd28:	1e5a      	subs	r2, r3, #1
 800fd2a:	4958      	ldr	r1, [pc, #352]	; (800fe8c <I2C_ReadDataBuffer+0x1c4>)
 800fd2c:	600a      	str	r2, [r1, #0]
 800fd2e:	2b00      	cmp	r3, #0
 800fd30:	d104      	bne.n	800fd3c <I2C_ReadDataBuffer+0x74>
 800fd32:	f000 f8b5 	bl	800fea0 <IOE_TimeoutUserCallback>
 800fd36:	4603      	mov	r3, r0
 800fd38:	b29b      	uxth	r3, r3
 800fd3a:	e0a1      	b.n	800fe80 <I2C_ReadDataBuffer+0x1b8>
  while (!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_ADDR))
 800fd3c:	4955      	ldr	r1, [pc, #340]	; (800fe94 <I2C_ReadDataBuffer+0x1cc>)
 800fd3e:	4852      	ldr	r0, [pc, #328]	; (800fe88 <I2C_ReadDataBuffer+0x1c0>)
 800fd40:	f7f7 fa70 	bl	8007224 <I2C_GetFlagStatus>
 800fd44:	4603      	mov	r3, r0
 800fd46:	2b00      	cmp	r3, #0
 800fd48:	d0ec      	beq.n	800fd24 <I2C_ReadDataBuffer+0x5c>
  }
  
  /* Read status register 2 to clear ADDR flag */
  IOE_I2C->SR2;
 800fd4a:	4b4f      	ldr	r3, [pc, #316]	; (800fe88 <I2C_ReadDataBuffer+0x1c0>)
 800fd4c:	8b1b      	ldrh	r3, [r3, #24]
  
  /* Test on EV8 and clear it */
  IOE_TimeOut = TIMEOUT_MAX;
 800fd4e:	4b4f      	ldr	r3, [pc, #316]	; (800fe8c <I2C_ReadDataBuffer+0x1c4>)
 800fd50:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800fd54:	601a      	str	r2, [r3, #0]
  while (!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_TXE))
 800fd56:	e00b      	b.n	800fd70 <I2C_ReadDataBuffer+0xa8>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
 800fd58:	4b4c      	ldr	r3, [pc, #304]	; (800fe8c <I2C_ReadDataBuffer+0x1c4>)
 800fd5a:	681b      	ldr	r3, [r3, #0]
 800fd5c:	1e5a      	subs	r2, r3, #1
 800fd5e:	494b      	ldr	r1, [pc, #300]	; (800fe8c <I2C_ReadDataBuffer+0x1c4>)
 800fd60:	600a      	str	r2, [r1, #0]
 800fd62:	2b00      	cmp	r3, #0
 800fd64:	d104      	bne.n	800fd70 <I2C_ReadDataBuffer+0xa8>
 800fd66:	f000 f89b 	bl	800fea0 <IOE_TimeoutUserCallback>
 800fd6a:	4603      	mov	r3, r0
 800fd6c:	b29b      	uxth	r3, r3
 800fd6e:	e087      	b.n	800fe80 <I2C_ReadDataBuffer+0x1b8>
  while (!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_TXE))
 800fd70:	4949      	ldr	r1, [pc, #292]	; (800fe98 <I2C_ReadDataBuffer+0x1d0>)
 800fd72:	4845      	ldr	r0, [pc, #276]	; (800fe88 <I2C_ReadDataBuffer+0x1c0>)
 800fd74:	f7f7 fa56 	bl	8007224 <I2C_GetFlagStatus>
 800fd78:	4603      	mov	r3, r0
 800fd7a:	2b00      	cmp	r3, #0
 800fd7c:	d0ec      	beq.n	800fd58 <I2C_ReadDataBuffer+0x90>
  }
  
  /* Send the device's internal address to write to */
  I2C_SendData(IOE_I2C, RegisterAddr);  
 800fd7e:	687b      	ldr	r3, [r7, #4]
 800fd80:	b2db      	uxtb	r3, r3
 800fd82:	4619      	mov	r1, r3
 800fd84:	4840      	ldr	r0, [pc, #256]	; (800fe88 <I2C_ReadDataBuffer+0x1c0>)
 800fd86:	f7f7 f8f1 	bl	8006f6c <I2C_SendData>
    
  /* Send START condition a second time */  
  I2C_GenerateSTART(IOE_I2C, ENABLE);
 800fd8a:	2101      	movs	r1, #1
 800fd8c:	483e      	ldr	r0, [pc, #248]	; (800fe88 <I2C_ReadDataBuffer+0x1c0>)
 800fd8e:	f7f6 ff48 	bl	8006c22 <I2C_GenerateSTART>
  
  /* Test on EV5 and clear it */
  IOE_TimeOut = TIMEOUT_MAX;
 800fd92:	4b3e      	ldr	r3, [pc, #248]	; (800fe8c <I2C_ReadDataBuffer+0x1c4>)
 800fd94:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800fd98:	601a      	str	r2, [r3, #0]
  while (!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_SB))
 800fd9a:	e00b      	b.n	800fdb4 <I2C_ReadDataBuffer+0xec>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
 800fd9c:	4b3b      	ldr	r3, [pc, #236]	; (800fe8c <I2C_ReadDataBuffer+0x1c4>)
 800fd9e:	681b      	ldr	r3, [r3, #0]
 800fda0:	1e5a      	subs	r2, r3, #1
 800fda2:	493a      	ldr	r1, [pc, #232]	; (800fe8c <I2C_ReadDataBuffer+0x1c4>)
 800fda4:	600a      	str	r2, [r1, #0]
 800fda6:	2b00      	cmp	r3, #0
 800fda8:	d104      	bne.n	800fdb4 <I2C_ReadDataBuffer+0xec>
 800fdaa:	f000 f879 	bl	800fea0 <IOE_TimeoutUserCallback>
 800fdae:	4603      	mov	r3, r0
 800fdb0:	b29b      	uxth	r3, r3
 800fdb2:	e065      	b.n	800fe80 <I2C_ReadDataBuffer+0x1b8>
  while (!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_SB))
 800fdb4:	4936      	ldr	r1, [pc, #216]	; (800fe90 <I2C_ReadDataBuffer+0x1c8>)
 800fdb6:	4834      	ldr	r0, [pc, #208]	; (800fe88 <I2C_ReadDataBuffer+0x1c0>)
 800fdb8:	f7f7 fa34 	bl	8007224 <I2C_GetFlagStatus>
 800fdbc:	4603      	mov	r3, r0
 800fdbe:	2b00      	cmp	r3, #0
 800fdc0:	d0ec      	beq.n	800fd9c <I2C_ReadDataBuffer+0xd4>
  }
  
  /* Send IO Expander address for read */
  I2C_Send7bitAddress(IOE_I2C, IOE_ADDR, I2C_Direction_Receiver);
 800fdc2:	2201      	movs	r2, #1
 800fdc4:	2182      	movs	r1, #130	; 0x82
 800fdc6:	4830      	ldr	r0, [pc, #192]	; (800fe88 <I2C_ReadDataBuffer+0x1c0>)
 800fdc8:	f7f6 ff6b 	bl	8006ca2 <I2C_Send7bitAddress>
  
  /* Test on EV6 and clear it */
  IOE_TimeOut = TIMEOUT_MAX;
 800fdcc:	4b2f      	ldr	r3, [pc, #188]	; (800fe8c <I2C_ReadDataBuffer+0x1c4>)
 800fdce:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800fdd2:	601a      	str	r2, [r3, #0]
  while (!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_ADDR))
 800fdd4:	e00b      	b.n	800fdee <I2C_ReadDataBuffer+0x126>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
 800fdd6:	4b2d      	ldr	r3, [pc, #180]	; (800fe8c <I2C_ReadDataBuffer+0x1c4>)
 800fdd8:	681b      	ldr	r3, [r3, #0]
 800fdda:	1e5a      	subs	r2, r3, #1
 800fddc:	492b      	ldr	r1, [pc, #172]	; (800fe8c <I2C_ReadDataBuffer+0x1c4>)
 800fdde:	600a      	str	r2, [r1, #0]
 800fde0:	2b00      	cmp	r3, #0
 800fde2:	d104      	bne.n	800fdee <I2C_ReadDataBuffer+0x126>
 800fde4:	f000 f85c 	bl	800fea0 <IOE_TimeoutUserCallback>
 800fde8:	4603      	mov	r3, r0
 800fdea:	b29b      	uxth	r3, r3
 800fdec:	e048      	b.n	800fe80 <I2C_ReadDataBuffer+0x1b8>
  while (!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_ADDR))
 800fdee:	4929      	ldr	r1, [pc, #164]	; (800fe94 <I2C_ReadDataBuffer+0x1cc>)
 800fdf0:	4825      	ldr	r0, [pc, #148]	; (800fe88 <I2C_ReadDataBuffer+0x1c0>)
 800fdf2:	f7f7 fa17 	bl	8007224 <I2C_GetFlagStatus>
 800fdf6:	4603      	mov	r3, r0
 800fdf8:	2b00      	cmp	r3, #0
 800fdfa:	d0ec      	beq.n	800fdd6 <I2C_ReadDataBuffer+0x10e>
  }
 
  /* Disable Acknowledgement and set Pos bit */
  I2C_AcknowledgeConfig(IOE_I2C, DISABLE);       
 800fdfc:	2100      	movs	r1, #0
 800fdfe:	4822      	ldr	r0, [pc, #136]	; (800fe88 <I2C_ReadDataBuffer+0x1c0>)
 800fe00:	f7f6 ff6d 	bl	8006cde <I2C_AcknowledgeConfig>
  I2C_NACKPositionConfig(IOE_I2C, I2C_NACKPosition_Next);
 800fe04:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800fe08:	481f      	ldr	r0, [pc, #124]	; (800fe88 <I2C_ReadDataBuffer+0x1c0>)
 800fe0a:	f7f7 f84d 	bl	8006ea8 <I2C_NACKPositionConfig>
  
  /* Read status register 2 to clear ADDR flag */
  IOE_I2C->SR2;
 800fe0e:	4b1e      	ldr	r3, [pc, #120]	; (800fe88 <I2C_ReadDataBuffer+0x1c0>)
 800fe10:	8b1b      	ldrh	r3, [r3, #24]

  /* Test on EV7 and clear it */
  IOE_TimeOut = TIMEOUT_MAX;
 800fe12:	4b1e      	ldr	r3, [pc, #120]	; (800fe8c <I2C_ReadDataBuffer+0x1c4>)
 800fe14:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800fe18:	601a      	str	r2, [r3, #0]
  while (!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_BTF))
 800fe1a:	e00b      	b.n	800fe34 <I2C_ReadDataBuffer+0x16c>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
 800fe1c:	4b1b      	ldr	r3, [pc, #108]	; (800fe8c <I2C_ReadDataBuffer+0x1c4>)
 800fe1e:	681b      	ldr	r3, [r3, #0]
 800fe20:	1e5a      	subs	r2, r3, #1
 800fe22:	491a      	ldr	r1, [pc, #104]	; (800fe8c <I2C_ReadDataBuffer+0x1c4>)
 800fe24:	600a      	str	r2, [r1, #0]
 800fe26:	2b00      	cmp	r3, #0
 800fe28:	d104      	bne.n	800fe34 <I2C_ReadDataBuffer+0x16c>
 800fe2a:	f000 f839 	bl	800fea0 <IOE_TimeoutUserCallback>
 800fe2e:	4603      	mov	r3, r0
 800fe30:	b29b      	uxth	r3, r3
 800fe32:	e025      	b.n	800fe80 <I2C_ReadDataBuffer+0x1b8>
  while (!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_BTF))
 800fe34:	4919      	ldr	r1, [pc, #100]	; (800fe9c <I2C_ReadDataBuffer+0x1d4>)
 800fe36:	4814      	ldr	r0, [pc, #80]	; (800fe88 <I2C_ReadDataBuffer+0x1c0>)
 800fe38:	f7f7 f9f4 	bl	8007224 <I2C_GetFlagStatus>
 800fe3c:	4603      	mov	r3, r0
 800fe3e:	2b00      	cmp	r3, #0
 800fe40:	d0ec      	beq.n	800fe1c <I2C_ReadDataBuffer+0x154>
  }
 
  /* Send STOP Condition */
  I2C_GenerateSTOP(IOE_I2C, ENABLE);
 800fe42:	2101      	movs	r1, #1
 800fe44:	4810      	ldr	r0, [pc, #64]	; (800fe88 <I2C_ReadDataBuffer+0x1c0>)
 800fe46:	f7f6 ff0c 	bl	8006c62 <I2C_GenerateSTOP>
   
  /* Read the first byte from the IO Expander */
  IOE_BufferRX[1] = I2C_ReceiveData(IOE_I2C);
 800fe4a:	480f      	ldr	r0, [pc, #60]	; (800fe88 <I2C_ReadDataBuffer+0x1c0>)
 800fe4c:	f7f7 f89e 	bl	8006f8c <I2C_ReceiveData>
 800fe50:	4603      	mov	r3, r0
 800fe52:	737b      	strb	r3, [r7, #13]
    
  /* Read the second byte from the IO Expander */
  IOE_BufferRX[0] = I2C_ReceiveData(IOE_I2C);
 800fe54:	480c      	ldr	r0, [pc, #48]	; (800fe88 <I2C_ReadDataBuffer+0x1c0>)
 800fe56:	f7f7 f899 	bl	8006f8c <I2C_ReceiveData>
 800fe5a:	4603      	mov	r3, r0
 800fe5c:	733b      	strb	r3, [r7, #12]
                                         
  /* Enable Acknowledgement and reset POS bit to be ready for another reception */
  I2C_AcknowledgeConfig(IOE_I2C, ENABLE);
 800fe5e:	2101      	movs	r1, #1
 800fe60:	4809      	ldr	r0, [pc, #36]	; (800fe88 <I2C_ReadDataBuffer+0x1c0>)
 800fe62:	f7f6 ff3c 	bl	8006cde <I2C_AcknowledgeConfig>
  I2C_NACKPositionConfig(IOE_I2C, I2C_NACKPosition_Current);
 800fe66:	f24f 71ff 	movw	r1, #63487	; 0xf7ff
 800fe6a:	4807      	ldr	r0, [pc, #28]	; (800fe88 <I2C_ReadDataBuffer+0x1c0>)
 800fe6c:	f7f7 f81c 	bl	8006ea8 <I2C_NACKPositionConfig>
   
  /* return the data */
  return ((uint16_t) IOE_BufferRX[0] | ((uint16_t)IOE_BufferRX[1]<< 8));
 800fe70:	7b3b      	ldrb	r3, [r7, #12]
 800fe72:	b21a      	sxth	r2, r3
 800fe74:	7b7b      	ldrb	r3, [r7, #13]
 800fe76:	021b      	lsls	r3, r3, #8
 800fe78:	b21b      	sxth	r3, r3
 800fe7a:	4313      	orrs	r3, r2
 800fe7c:	b21b      	sxth	r3, r3
 800fe7e:	b29b      	uxth	r3, r3
}
 800fe80:	4618      	mov	r0, r3
 800fe82:	3710      	adds	r7, #16
 800fe84:	46bd      	mov	sp, r7
 800fe86:	bd80      	pop	{r7, pc}
 800fe88:	40005c00 	.word	0x40005c00
 800fe8c:	200000a4 	.word	0x200000a4
 800fe90:	10000001 	.word	0x10000001
 800fe94:	10000002 	.word	0x10000002
 800fe98:	10000080 	.word	0x10000080
 800fe9c:	10000004 	.word	0x10000004

0800fea0 <IOE_TimeoutUserCallback>:
  * @brief  IOE_TIMEOUT_UserCallback
  * @param  None
  * @retval 0
  */
uint8_t IOE_TimeoutUserCallback(void)
{
 800fea0:	b580      	push	{r7, lr}
 800fea2:	b084      	sub	sp, #16
 800fea4:	af00      	add	r7, sp, #0
  I2C_InitTypeDef I2C_InitStructure;

  I2C_GenerateSTOP(IOE_I2C, ENABLE);
 800fea6:	2101      	movs	r1, #1
 800fea8:	4816      	ldr	r0, [pc, #88]	; (800ff04 <IOE_TimeoutUserCallback+0x64>)
 800feaa:	f7f6 feda 	bl	8006c62 <I2C_GenerateSTOP>
  I2C_SoftwareResetCmd(IOE_I2C, ENABLE);
 800feae:	2101      	movs	r1, #1
 800feb0:	4814      	ldr	r0, [pc, #80]	; (800ff04 <IOE_TimeoutUserCallback+0x64>)
 800feb2:	f7f6 ff96 	bl	8006de2 <I2C_SoftwareResetCmd>
  I2C_SoftwareResetCmd(IOE_I2C, DISABLE);
 800feb6:	2100      	movs	r1, #0
 800feb8:	4812      	ldr	r0, [pc, #72]	; (800ff04 <IOE_TimeoutUserCallback+0x64>)
 800feba:	f7f6 ff92 	bl	8006de2 <I2C_SoftwareResetCmd>
  
  IOE_GPIO_Config();
 800febe:	f7ff fca2 	bl	800f806 <IOE_GPIO_Config>

  /* CODEC_I2C peripheral configuration */
  I2C_DeInit(IOE_I2C);
 800fec2:	4810      	ldr	r0, [pc, #64]	; (800ff04 <IOE_TimeoutUserCallback+0x64>)
 800fec4:	f7f6 fd30 	bl	8006928 <I2C_DeInit>
  I2C_InitStructure.I2C_Mode = I2C_Mode_I2C;
 800fec8:	2300      	movs	r3, #0
 800feca:	80bb      	strh	r3, [r7, #4]
  I2C_InitStructure.I2C_DutyCycle = I2C_DutyCycle_2;
 800fecc:	f64b 73ff 	movw	r3, #49151	; 0xbfff
 800fed0:	80fb      	strh	r3, [r7, #6]
  I2C_InitStructure.I2C_OwnAddress1 = 0x00;
 800fed2:	2300      	movs	r3, #0
 800fed4:	813b      	strh	r3, [r7, #8]
  I2C_InitStructure.I2C_Ack = I2C_Ack_Enable;
 800fed6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800feda:	817b      	strh	r3, [r7, #10]
  I2C_InitStructure.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 800fedc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800fee0:	81bb      	strh	r3, [r7, #12]
  I2C_InitStructure.I2C_ClockSpeed = I2C_SPEED;
 800fee2:	4b09      	ldr	r3, [pc, #36]	; (800ff08 <IOE_TimeoutUserCallback+0x68>)
 800fee4:	603b      	str	r3, [r7, #0]
  
  /* Enable the I2C peripheral */
  I2C_Cmd(IOE_I2C, ENABLE);  
 800fee6:	2101      	movs	r1, #1
 800fee8:	4806      	ldr	r0, [pc, #24]	; (800ff04 <IOE_TimeoutUserCallback+0x64>)
 800feea:	f7f6 fe38 	bl	8006b5e <I2C_Cmd>
  I2C_Init(IOE_I2C, &I2C_InitStructure);
 800feee:	463b      	mov	r3, r7
 800fef0:	4619      	mov	r1, r3
 800fef2:	4804      	ldr	r0, [pc, #16]	; (800ff04 <IOE_TimeoutUserCallback+0x64>)
 800fef4:	f7f6 fd52 	bl	800699c <I2C_Init>
  
  return 0;
 800fef8:	2300      	movs	r3, #0
}
 800fefa:	4618      	mov	r0, r3
 800fefc:	3710      	adds	r7, #16
 800fefe:	46bd      	mov	sp, r7
 800ff00:	bd80      	pop	{r7, pc}
 800ff02:	bf00      	nop
 800ff04:	40005c00 	.word	0x40005c00
 800ff08:	000186a0 	.word	0x000186a0

0800ff0c <delay>:
  * @brief  Inserts a delay time.
  * @param  nCount: specifies the delay time length.
  * @retval None
  */
static void delay(__IO uint32_t nCount)
{
 800ff0c:	b480      	push	{r7}
 800ff0e:	b085      	sub	sp, #20
 800ff10:	af00      	add	r7, sp, #0
 800ff12:	6078      	str	r0, [r7, #4]
  __IO uint32_t index = 0; 
 800ff14:	2300      	movs	r3, #0
 800ff16:	60fb      	str	r3, [r7, #12]
  for(index = (100000 * nCount); index != 0; index--)
 800ff18:	687b      	ldr	r3, [r7, #4]
 800ff1a:	4a08      	ldr	r2, [pc, #32]	; (800ff3c <delay+0x30>)
 800ff1c:	fb02 f303 	mul.w	r3, r2, r3
 800ff20:	60fb      	str	r3, [r7, #12]
 800ff22:	e002      	b.n	800ff2a <delay+0x1e>
 800ff24:	68fb      	ldr	r3, [r7, #12]
 800ff26:	3b01      	subs	r3, #1
 800ff28:	60fb      	str	r3, [r7, #12]
 800ff2a:	68fb      	ldr	r3, [r7, #12]
 800ff2c:	2b00      	cmp	r3, #0
 800ff2e:	d1f9      	bne.n	800ff24 <delay+0x18>
  {
  }
}
 800ff30:	bf00      	nop
 800ff32:	3714      	adds	r7, #20
 800ff34:	46bd      	mov	sp, r7
 800ff36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff3a:	4770      	bx	lr
 800ff3c:	000186a0 	.word	0x000186a0

0800ff40 <L3GD20_Init>:
  * @param  L3GD20_InitStruct: pointer to a L3GD20_InitTypeDef structure 
  *         that contains the configuration setting for the L3GD20.
  * @retval None
  */
void L3GD20_Init(L3GD20_InitTypeDef *L3GD20_InitStruct)
{  
 800ff40:	b580      	push	{r7, lr}
 800ff42:	b084      	sub	sp, #16
 800ff44:	af00      	add	r7, sp, #0
 800ff46:	6078      	str	r0, [r7, #4]
  uint8_t ctrl1 = 0x00, ctrl4 = 0x00;
 800ff48:	2300      	movs	r3, #0
 800ff4a:	73fb      	strb	r3, [r7, #15]
 800ff4c:	2300      	movs	r3, #0
 800ff4e:	73bb      	strb	r3, [r7, #14]
  
  /* Configure the low level interface ---------------------------------------*/
  L3GD20_LowLevel_Init();
 800ff50:	f000 f98a 	bl	8010268 <L3GD20_LowLevel_Init>
  
  /* Configure MEMS: data rate, power mode, full scale and axes */
  ctrl1 |= (uint8_t) (L3GD20_InitStruct->Power_Mode | L3GD20_InitStruct->Output_DataRate | \
 800ff54:	687b      	ldr	r3, [r7, #4]
 800ff56:	781a      	ldrb	r2, [r3, #0]
 800ff58:	687b      	ldr	r3, [r7, #4]
 800ff5a:	785b      	ldrb	r3, [r3, #1]
 800ff5c:	4313      	orrs	r3, r2
 800ff5e:	b2da      	uxtb	r2, r3
                    L3GD20_InitStruct->Axes_Enable | L3GD20_InitStruct->Band_Width);
 800ff60:	687b      	ldr	r3, [r7, #4]
 800ff62:	789b      	ldrb	r3, [r3, #2]
  ctrl1 |= (uint8_t) (L3GD20_InitStruct->Power_Mode | L3GD20_InitStruct->Output_DataRate | \
 800ff64:	4313      	orrs	r3, r2
 800ff66:	b2da      	uxtb	r2, r3
                    L3GD20_InitStruct->Axes_Enable | L3GD20_InitStruct->Band_Width);
 800ff68:	687b      	ldr	r3, [r7, #4]
 800ff6a:	78db      	ldrb	r3, [r3, #3]
  ctrl1 |= (uint8_t) (L3GD20_InitStruct->Power_Mode | L3GD20_InitStruct->Output_DataRate | \
 800ff6c:	4313      	orrs	r3, r2
 800ff6e:	b2da      	uxtb	r2, r3
 800ff70:	7bfb      	ldrb	r3, [r7, #15]
 800ff72:	4313      	orrs	r3, r2
 800ff74:	b2db      	uxtb	r3, r3
 800ff76:	73fb      	strb	r3, [r7, #15]
  
  ctrl4 |= (uint8_t) (L3GD20_InitStruct->BlockData_Update | L3GD20_InitStruct->Endianness | \
 800ff78:	687b      	ldr	r3, [r7, #4]
 800ff7a:	791a      	ldrb	r2, [r3, #4]
 800ff7c:	687b      	ldr	r3, [r7, #4]
 800ff7e:	795b      	ldrb	r3, [r3, #5]
 800ff80:	4313      	orrs	r3, r2
 800ff82:	b2da      	uxtb	r2, r3
                    L3GD20_InitStruct->Full_Scale);
 800ff84:	687b      	ldr	r3, [r7, #4]
 800ff86:	799b      	ldrb	r3, [r3, #6]
  ctrl4 |= (uint8_t) (L3GD20_InitStruct->BlockData_Update | L3GD20_InitStruct->Endianness | \
 800ff88:	4313      	orrs	r3, r2
 800ff8a:	b2da      	uxtb	r2, r3
 800ff8c:	7bbb      	ldrb	r3, [r7, #14]
 800ff8e:	4313      	orrs	r3, r2
 800ff90:	b2db      	uxtb	r3, r3
 800ff92:	73bb      	strb	r3, [r7, #14]
                    
  /* Write value to MEMS CTRL_REG1 regsister */
  L3GD20_Write(&ctrl1, L3GD20_CTRL_REG1_ADDR, 1);
 800ff94:	f107 030f 	add.w	r3, r7, #15
 800ff98:	2201      	movs	r2, #1
 800ff9a:	2120      	movs	r1, #32
 800ff9c:	4618      	mov	r0, r3
 800ff9e:	f000 f8fb 	bl	8010198 <L3GD20_Write>
  
  /* Write value to MEMS CTRL_REG4 regsister */
  L3GD20_Write(&ctrl4, L3GD20_CTRL_REG4_ADDR, 1);
 800ffa2:	f107 030e 	add.w	r3, r7, #14
 800ffa6:	2201      	movs	r2, #1
 800ffa8:	2123      	movs	r1, #35	; 0x23
 800ffaa:	4618      	mov	r0, r3
 800ffac:	f000 f8f4 	bl	8010198 <L3GD20_Write>
}
 800ffb0:	bf00      	nop
 800ffb2:	3710      	adds	r7, #16
 800ffb4:	46bd      	mov	sp, r7
 800ffb6:	bd80      	pop	{r7, pc}

0800ffb8 <L3GD20_RebootCmd>:
  * @brief  Reboot memory content of L3GD20
  * @param  None
  * @retval None
  */
void L3GD20_RebootCmd(void)
{
 800ffb8:	b580      	push	{r7, lr}
 800ffba:	b082      	sub	sp, #8
 800ffbc:	af00      	add	r7, sp, #0
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  L3GD20_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 800ffbe:	1dfb      	adds	r3, r7, #7
 800ffc0:	2201      	movs	r2, #1
 800ffc2:	2124      	movs	r1, #36	; 0x24
 800ffc4:	4618      	mov	r0, r3
 800ffc6:	f000 f917 	bl	80101f8 <L3GD20_Read>
  
  /* Enable the reboot memory */
  tmpreg |= L3GD20_BOOT_REBOOTMEMORY;
 800ffca:	79fb      	ldrb	r3, [r7, #7]
 800ffcc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ffd0:	b2db      	uxtb	r3, r3
 800ffd2:	71fb      	strb	r3, [r7, #7]
  
  /* Write value to MEMS CTRL_REG5 regsister */
  L3GD20_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 800ffd4:	1dfb      	adds	r3, r7, #7
 800ffd6:	2201      	movs	r2, #1
 800ffd8:	2124      	movs	r1, #36	; 0x24
 800ffda:	4618      	mov	r0, r3
 800ffdc:	f000 f8dc 	bl	8010198 <L3GD20_Write>
}
 800ffe0:	bf00      	nop
 800ffe2:	3708      	adds	r7, #8
 800ffe4:	46bd      	mov	sp, r7
 800ffe6:	bd80      	pop	{r7, pc}

0800ffe8 <L3GD20_INT1InterruptConfig>:
  * @param  L3GD20_InterruptConfig_TypeDef: pointer to a L3GD20_InterruptConfig_TypeDef 
  *         structure that contains the configuration setting for the L3GD20 Interrupt.
  * @retval None
  */
void L3GD20_INT1InterruptConfig(L3GD20_InterruptConfigTypeDef *L3GD20_IntConfigStruct)
{
 800ffe8:	b580      	push	{r7, lr}
 800ffea:	b084      	sub	sp, #16
 800ffec:	af00      	add	r7, sp, #0
 800ffee:	6078      	str	r0, [r7, #4]
  uint8_t ctrl_cfr = 0x00, ctrl3 = 0x00;
 800fff0:	2300      	movs	r3, #0
 800fff2:	73fb      	strb	r3, [r7, #15]
 800fff4:	2300      	movs	r3, #0
 800fff6:	73bb      	strb	r3, [r7, #14]
  
  /* Read INT1_CFG register */
  L3GD20_Read(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
 800fff8:	f107 030f 	add.w	r3, r7, #15
 800fffc:	2201      	movs	r2, #1
 800fffe:	2130      	movs	r1, #48	; 0x30
 8010000:	4618      	mov	r0, r3
 8010002:	f000 f8f9 	bl	80101f8 <L3GD20_Read>
  
  /* Read CTRL_REG3 register */
  L3GD20_Read(&ctrl3, L3GD20_CTRL_REG3_ADDR, 1);
 8010006:	f107 030e 	add.w	r3, r7, #14
 801000a:	2201      	movs	r2, #1
 801000c:	2122      	movs	r1, #34	; 0x22
 801000e:	4618      	mov	r0, r3
 8010010:	f000 f8f2 	bl	80101f8 <L3GD20_Read>
  
  ctrl_cfr &= 0x80;
 8010014:	7bfb      	ldrb	r3, [r7, #15]
 8010016:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 801001a:	b2db      	uxtb	r3, r3
 801001c:	73fb      	strb	r3, [r7, #15]
  
  ctrl3 &= 0xDF;
 801001e:	7bbb      	ldrb	r3, [r7, #14]
 8010020:	f023 0320 	bic.w	r3, r3, #32
 8010024:	b2db      	uxtb	r3, r3
 8010026:	73bb      	strb	r3, [r7, #14]
  
  /* Configure latch Interrupt request and axe interrupts */                   
  ctrl_cfr |= (uint8_t)(L3GD20_IntConfigStruct->Latch_Request| \
 8010028:	687b      	ldr	r3, [r7, #4]
 801002a:	781a      	ldrb	r2, [r3, #0]
                   L3GD20_IntConfigStruct->Interrupt_Axes);
 801002c:	687b      	ldr	r3, [r7, #4]
 801002e:	785b      	ldrb	r3, [r3, #1]
  ctrl_cfr |= (uint8_t)(L3GD20_IntConfigStruct->Latch_Request| \
 8010030:	4313      	orrs	r3, r2
 8010032:	b2da      	uxtb	r2, r3
 8010034:	7bfb      	ldrb	r3, [r7, #15]
 8010036:	4313      	orrs	r3, r2
 8010038:	b2db      	uxtb	r3, r3
 801003a:	73fb      	strb	r3, [r7, #15]
                   
  ctrl3 |= (uint8_t)(L3GD20_IntConfigStruct->Interrupt_ActiveEdge);
 801003c:	687b      	ldr	r3, [r7, #4]
 801003e:	789a      	ldrb	r2, [r3, #2]
 8010040:	7bbb      	ldrb	r3, [r7, #14]
 8010042:	4313      	orrs	r3, r2
 8010044:	b2db      	uxtb	r3, r3
 8010046:	73bb      	strb	r3, [r7, #14]
  
  /* Write value to MEMS INT1_CFG register */
  L3GD20_Write(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
 8010048:	f107 030f 	add.w	r3, r7, #15
 801004c:	2201      	movs	r2, #1
 801004e:	2130      	movs	r1, #48	; 0x30
 8010050:	4618      	mov	r0, r3
 8010052:	f000 f8a1 	bl	8010198 <L3GD20_Write>
  
  /* Write value to MEMS CTRL_REG3 register */
  L3GD20_Write(&ctrl3, L3GD20_CTRL_REG3_ADDR, 1);
 8010056:	f107 030e 	add.w	r3, r7, #14
 801005a:	2201      	movs	r2, #1
 801005c:	2122      	movs	r1, #34	; 0x22
 801005e:	4618      	mov	r0, r3
 8010060:	f000 f89a 	bl	8010198 <L3GD20_Write>
}
 8010064:	bf00      	nop
 8010066:	3710      	adds	r7, #16
 8010068:	46bd      	mov	sp, r7
 801006a:	bd80      	pop	{r7, pc}

0801006c <L3GD20_INT1InterruptCmd>:
  *        @arg L3GD20_INT1INTERRUPT_DISABLE
  *        @arg L3GD20_INT1INTERRUPT_ENABLE    
  * @retval None
  */
void L3GD20_INT1InterruptCmd(uint8_t InterruptState)
{  
 801006c:	b580      	push	{r7, lr}
 801006e:	b084      	sub	sp, #16
 8010070:	af00      	add	r7, sp, #0
 8010072:	4603      	mov	r3, r0
 8010074:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG3 register */
  L3GD20_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8010076:	f107 030f 	add.w	r3, r7, #15
 801007a:	2201      	movs	r2, #1
 801007c:	2122      	movs	r1, #34	; 0x22
 801007e:	4618      	mov	r0, r3
 8010080:	f000 f8ba 	bl	80101f8 <L3GD20_Read>
                  
  tmpreg &= 0x7F;	
 8010084:	7bfb      	ldrb	r3, [r7, #15]
 8010086:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801008a:	b2db      	uxtb	r3, r3
 801008c:	73fb      	strb	r3, [r7, #15]
  tmpreg |= InterruptState;
 801008e:	7bfa      	ldrb	r2, [r7, #15]
 8010090:	79fb      	ldrb	r3, [r7, #7]
 8010092:	4313      	orrs	r3, r2
 8010094:	b2db      	uxtb	r3, r3
 8010096:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG3 regsister */
  L3GD20_Write(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8010098:	f107 030f 	add.w	r3, r7, #15
 801009c:	2201      	movs	r2, #1
 801009e:	2122      	movs	r1, #34	; 0x22
 80100a0:	4618      	mov	r0, r3
 80100a2:	f000 f879 	bl	8010198 <L3GD20_Write>
}
 80100a6:	bf00      	nop
 80100a8:	3710      	adds	r7, #16
 80100aa:	46bd      	mov	sp, r7
 80100ac:	bd80      	pop	{r7, pc}

080100ae <L3GD20_INT2InterruptCmd>:
  *        @arg L3GD20_INT2INTERRUPT_DISABLE
  *        @arg L3GD20_INT2INTERRUPT_ENABLE    
  * @retval None
  */
void L3GD20_INT2InterruptCmd(uint8_t InterruptState)
{  
 80100ae:	b580      	push	{r7, lr}
 80100b0:	b084      	sub	sp, #16
 80100b2:	af00      	add	r7, sp, #0
 80100b4:	4603      	mov	r3, r0
 80100b6:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG3 register */
  L3GD20_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 80100b8:	f107 030f 	add.w	r3, r7, #15
 80100bc:	2201      	movs	r2, #1
 80100be:	2122      	movs	r1, #34	; 0x22
 80100c0:	4618      	mov	r0, r3
 80100c2:	f000 f899 	bl	80101f8 <L3GD20_Read>
                  
  tmpreg &= 0xF7;	
 80100c6:	7bfb      	ldrb	r3, [r7, #15]
 80100c8:	f023 0308 	bic.w	r3, r3, #8
 80100cc:	b2db      	uxtb	r3, r3
 80100ce:	73fb      	strb	r3, [r7, #15]
  tmpreg |= InterruptState;
 80100d0:	7bfa      	ldrb	r2, [r7, #15]
 80100d2:	79fb      	ldrb	r3, [r7, #7]
 80100d4:	4313      	orrs	r3, r2
 80100d6:	b2db      	uxtb	r3, r3
 80100d8:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG3 regsister */
  L3GD20_Write(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 80100da:	f107 030f 	add.w	r3, r7, #15
 80100de:	2201      	movs	r2, #1
 80100e0:	2122      	movs	r1, #34	; 0x22
 80100e2:	4618      	mov	r0, r3
 80100e4:	f000 f858 	bl	8010198 <L3GD20_Write>
}
 80100e8:	bf00      	nop
 80100ea:	3710      	adds	r7, #16
 80100ec:	46bd      	mov	sp, r7
 80100ee:	bd80      	pop	{r7, pc}

080100f0 <L3GD20_FilterConfig>:
  * @param  L3GD20_FilterStruct: pointer to a L3GD20_FilterConfigTypeDef structure 
  *         that contains the configuration setting for the L3GD20.        
  * @retval None
  */
void L3GD20_FilterConfig(L3GD20_FilterConfigTypeDef *L3GD20_FilterStruct) 
{
 80100f0:	b580      	push	{r7, lr}
 80100f2:	b084      	sub	sp, #16
 80100f4:	af00      	add	r7, sp, #0
 80100f6:	6078      	str	r0, [r7, #4]
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  L3GD20_Read(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 80100f8:	f107 030f 	add.w	r3, r7, #15
 80100fc:	2201      	movs	r2, #1
 80100fe:	2121      	movs	r1, #33	; 0x21
 8010100:	4618      	mov	r0, r3
 8010102:	f000 f879 	bl	80101f8 <L3GD20_Read>
  
  tmpreg &= 0xC0;
 8010106:	7bfb      	ldrb	r3, [r7, #15]
 8010108:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 801010c:	b2db      	uxtb	r3, r3
 801010e:	73fb      	strb	r3, [r7, #15]
  
  /* Configure MEMS: mode and cutoff frquency */
  tmpreg |= (uint8_t) (L3GD20_FilterStruct->HighPassFilter_Mode_Selection |\
 8010110:	687b      	ldr	r3, [r7, #4]
 8010112:	781a      	ldrb	r2, [r3, #0]
                      L3GD20_FilterStruct->HighPassFilter_CutOff_Frequency);                             
 8010114:	687b      	ldr	r3, [r7, #4]
 8010116:	785b      	ldrb	r3, [r3, #1]
  tmpreg |= (uint8_t) (L3GD20_FilterStruct->HighPassFilter_Mode_Selection |\
 8010118:	4313      	orrs	r3, r2
 801011a:	b2da      	uxtb	r2, r3
 801011c:	7bfb      	ldrb	r3, [r7, #15]
 801011e:	4313      	orrs	r3, r2
 8010120:	b2db      	uxtb	r3, r3
 8010122:	73fb      	strb	r3, [r7, #15]

  /* Write value to MEMS CTRL_REG2 regsister */
  L3GD20_Write(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 8010124:	f107 030f 	add.w	r3, r7, #15
 8010128:	2201      	movs	r2, #1
 801012a:	2121      	movs	r1, #33	; 0x21
 801012c:	4618      	mov	r0, r3
 801012e:	f000 f833 	bl	8010198 <L3GD20_Write>
}
 8010132:	bf00      	nop
 8010134:	3710      	adds	r7, #16
 8010136:	46bd      	mov	sp, r7
 8010138:	bd80      	pop	{r7, pc}

0801013a <L3GD20_FilterCmd>:
  *         @arg: L3GD20_HIGHPASSFILTER_DISABLE 
  *         @arg: L3GD20_HIGHPASSFILTER_ENABLE          
  * @retval None
  */
void L3GD20_FilterCmd(uint8_t HighPassFilterState)
 {
 801013a:	b580      	push	{r7, lr}
 801013c:	b084      	sub	sp, #16
 801013e:	af00      	add	r7, sp, #0
 8010140:	4603      	mov	r3, r0
 8010142:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  L3GD20_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8010144:	f107 030f 	add.w	r3, r7, #15
 8010148:	2201      	movs	r2, #1
 801014a:	2124      	movs	r1, #36	; 0x24
 801014c:	4618      	mov	r0, r3
 801014e:	f000 f853 	bl	80101f8 <L3GD20_Read>
                  
  tmpreg &= 0xEF;
 8010152:	7bfb      	ldrb	r3, [r7, #15]
 8010154:	f023 0310 	bic.w	r3, r3, #16
 8010158:	b2db      	uxtb	r3, r3
 801015a:	73fb      	strb	r3, [r7, #15]

  tmpreg |= HighPassFilterState;
 801015c:	7bfa      	ldrb	r2, [r7, #15]
 801015e:	79fb      	ldrb	r3, [r7, #7]
 8010160:	4313      	orrs	r3, r2
 8010162:	b2db      	uxtb	r3, r3
 8010164:	73fb      	strb	r3, [r7, #15]

  /* Write value to MEMS CTRL_REG5 regsister */
  L3GD20_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8010166:	f107 030f 	add.w	r3, r7, #15
 801016a:	2201      	movs	r2, #1
 801016c:	2124      	movs	r1, #36	; 0x24
 801016e:	4618      	mov	r0, r3
 8010170:	f000 f812 	bl	8010198 <L3GD20_Write>
}
 8010174:	bf00      	nop
 8010176:	3710      	adds	r7, #16
 8010178:	46bd      	mov	sp, r7
 801017a:	bd80      	pop	{r7, pc}

0801017c <L3GD20_GetDataStatus>:
  * @brief  Get status for L3GD20 data
  * @param  None         
  * @retval L3GD20 status
  */
uint8_t L3GD20_GetDataStatus(void)
{
 801017c:	b580      	push	{r7, lr}
 801017e:	b082      	sub	sp, #8
 8010180:	af00      	add	r7, sp, #0
  uint8_t tmpreg;
  
  /* Read STATUS_REG register */
  L3GD20_Read(&tmpreg, L3GD20_STATUS_REG_ADDR, 1);
 8010182:	1dfb      	adds	r3, r7, #7
 8010184:	2201      	movs	r2, #1
 8010186:	2127      	movs	r1, #39	; 0x27
 8010188:	4618      	mov	r0, r3
 801018a:	f000 f835 	bl	80101f8 <L3GD20_Read>
                  
  return tmpreg;
 801018e:	79fb      	ldrb	r3, [r7, #7]
}
 8010190:	4618      	mov	r0, r3
 8010192:	3708      	adds	r7, #8
 8010194:	46bd      	mov	sp, r7
 8010196:	bd80      	pop	{r7, pc}

08010198 <L3GD20_Write>:
  * @param  WriteAddr : L3GD20's internal address to write to.
  * @param  NumByteToWrite: Number of bytes to write.
  * @retval None
  */
void L3GD20_Write(uint8_t* pBuffer, uint8_t WriteAddr, uint16_t NumByteToWrite)
{
 8010198:	b580      	push	{r7, lr}
 801019a:	b082      	sub	sp, #8
 801019c:	af00      	add	r7, sp, #0
 801019e:	6078      	str	r0, [r7, #4]
 80101a0:	460b      	mov	r3, r1
 80101a2:	70fb      	strb	r3, [r7, #3]
 80101a4:	4613      	mov	r3, r2
 80101a6:	803b      	strh	r3, [r7, #0]
  /* Configure the MS bit: 
       - When 0, the address will remain unchanged in multiple read/write commands.
       - When 1, the address will be auto incremented in multiple read/write commands.
  */
  if(NumByteToWrite > 0x01)
 80101a8:	883b      	ldrh	r3, [r7, #0]
 80101aa:	2b01      	cmp	r3, #1
 80101ac:	d903      	bls.n	80101b6 <L3GD20_Write+0x1e>
  {
    WriteAddr |= (uint8_t)MULTIPLEBYTE_CMD;
 80101ae:	78fb      	ldrb	r3, [r7, #3]
 80101b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80101b4:	70fb      	strb	r3, [r7, #3]
  }
  /* Set chip select Low at the start of the transmission */
  L3GD20_CS_LOW();
 80101b6:	2102      	movs	r1, #2
 80101b8:	480e      	ldr	r0, [pc, #56]	; (80101f4 <L3GD20_Write+0x5c>)
 80101ba:	f7f6 fb24 	bl	8006806 <GPIO_ResetBits>
  
  /* Send the Address of the indexed register */
  L3GD20_SendByte(WriteAddr);
 80101be:	78fb      	ldrb	r3, [r7, #3]
 80101c0:	4618      	mov	r0, r3
 80101c2:	f000 f8ef 	bl	80103a4 <L3GD20_SendByte>

  /* Send the data that will be written into the device (MSB First) */
  while(NumByteToWrite >= 0x01)
 80101c6:	e00a      	b.n	80101de <L3GD20_Write+0x46>
  {
    L3GD20_SendByte(*pBuffer);
 80101c8:	687b      	ldr	r3, [r7, #4]
 80101ca:	781b      	ldrb	r3, [r3, #0]
 80101cc:	4618      	mov	r0, r3
 80101ce:	f000 f8e9 	bl	80103a4 <L3GD20_SendByte>
    NumByteToWrite--;
 80101d2:	883b      	ldrh	r3, [r7, #0]
 80101d4:	3b01      	subs	r3, #1
 80101d6:	803b      	strh	r3, [r7, #0]
    pBuffer++;
 80101d8:	687b      	ldr	r3, [r7, #4]
 80101da:	3301      	adds	r3, #1
 80101dc:	607b      	str	r3, [r7, #4]
  while(NumByteToWrite >= 0x01)
 80101de:	883b      	ldrh	r3, [r7, #0]
 80101e0:	2b00      	cmp	r3, #0
 80101e2:	d1f1      	bne.n	80101c8 <L3GD20_Write+0x30>
  }
  
  /* Set chip select High at the end of the transmission */ 
  L3GD20_CS_HIGH();
 80101e4:	2102      	movs	r1, #2
 80101e6:	4803      	ldr	r0, [pc, #12]	; (80101f4 <L3GD20_Write+0x5c>)
 80101e8:	f7f6 fafe 	bl	80067e8 <GPIO_SetBits>
}
 80101ec:	bf00      	nop
 80101ee:	3708      	adds	r7, #8
 80101f0:	46bd      	mov	sp, r7
 80101f2:	bd80      	pop	{r7, pc}
 80101f4:	40020800 	.word	0x40020800

080101f8 <L3GD20_Read>:
  * @param  ReadAddr : L3GD20's internal address to read from.
  * @param  NumByteToRead : number of bytes to read from the L3GD20.
  * @retval None
  */
void L3GD20_Read(uint8_t* pBuffer, uint8_t ReadAddr, uint16_t NumByteToRead)
{  
 80101f8:	b580      	push	{r7, lr}
 80101fa:	b082      	sub	sp, #8
 80101fc:	af00      	add	r7, sp, #0
 80101fe:	6078      	str	r0, [r7, #4]
 8010200:	460b      	mov	r3, r1
 8010202:	70fb      	strb	r3, [r7, #3]
 8010204:	4613      	mov	r3, r2
 8010206:	803b      	strh	r3, [r7, #0]
  if(NumByteToRead > 0x01)
 8010208:	883b      	ldrh	r3, [r7, #0]
 801020a:	2b01      	cmp	r3, #1
 801020c:	d904      	bls.n	8010218 <L3GD20_Read+0x20>
  {
    ReadAddr |= (uint8_t)(READWRITE_CMD | MULTIPLEBYTE_CMD);
 801020e:	78fb      	ldrb	r3, [r7, #3]
 8010210:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8010214:	70fb      	strb	r3, [r7, #3]
 8010216:	e003      	b.n	8010220 <L3GD20_Read+0x28>
  }
  else
  {
    ReadAddr |= (uint8_t)READWRITE_CMD;
 8010218:	78fb      	ldrb	r3, [r7, #3]
 801021a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801021e:	70fb      	strb	r3, [r7, #3]
  }
  /* Set chip select Low at the start of the transmission */
  L3GD20_CS_LOW();
 8010220:	2102      	movs	r1, #2
 8010222:	4810      	ldr	r0, [pc, #64]	; (8010264 <L3GD20_Read+0x6c>)
 8010224:	f7f6 faef 	bl	8006806 <GPIO_ResetBits>
  
  /* Send the Address of the indexed register */
  L3GD20_SendByte(ReadAddr);
 8010228:	78fb      	ldrb	r3, [r7, #3]
 801022a:	4618      	mov	r0, r3
 801022c:	f000 f8ba 	bl	80103a4 <L3GD20_SendByte>
  
  /* Receive the data that will be read from the device (MSB First) */
  while(NumByteToRead > 0x00)
 8010230:	e00c      	b.n	801024c <L3GD20_Read+0x54>
  {
    /* Send dummy byte (0x00) to generate the SPI clock to L3GD20 (Slave device) */
    *pBuffer = L3GD20_SendByte(DUMMY_BYTE);
 8010232:	2000      	movs	r0, #0
 8010234:	f000 f8b6 	bl	80103a4 <L3GD20_SendByte>
 8010238:	4603      	mov	r3, r0
 801023a:	461a      	mov	r2, r3
 801023c:	687b      	ldr	r3, [r7, #4]
 801023e:	701a      	strb	r2, [r3, #0]
    NumByteToRead--;
 8010240:	883b      	ldrh	r3, [r7, #0]
 8010242:	3b01      	subs	r3, #1
 8010244:	803b      	strh	r3, [r7, #0]
    pBuffer++;
 8010246:	687b      	ldr	r3, [r7, #4]
 8010248:	3301      	adds	r3, #1
 801024a:	607b      	str	r3, [r7, #4]
  while(NumByteToRead > 0x00)
 801024c:	883b      	ldrh	r3, [r7, #0]
 801024e:	2b00      	cmp	r3, #0
 8010250:	d1ef      	bne.n	8010232 <L3GD20_Read+0x3a>
  }
  
  /* Set chip select High at the end of the transmission */ 
  L3GD20_CS_HIGH();
 8010252:	2102      	movs	r1, #2
 8010254:	4803      	ldr	r0, [pc, #12]	; (8010264 <L3GD20_Read+0x6c>)
 8010256:	f7f6 fac7 	bl	80067e8 <GPIO_SetBits>
}  
 801025a:	bf00      	nop
 801025c:	3708      	adds	r7, #8
 801025e:	46bd      	mov	sp, r7
 8010260:	bd80      	pop	{r7, pc}
 8010262:	bf00      	nop
 8010264:	40020800 	.word	0x40020800

08010268 <L3GD20_LowLevel_Init>:
  * @brief  Initializes the low level interface used to drive the L3GD20
  * @param  None
  * @retval None
  */
static void L3GD20_LowLevel_Init(void)
{
 8010268:	b580      	push	{r7, lr}
 801026a:	b088      	sub	sp, #32
 801026c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  SPI_InitTypeDef  SPI_InitStructure;

  /* Enable the SPI periph */
  RCC_APB2PeriphClockCmd(L3GD20_SPI_CLK, ENABLE);
 801026e:	2101      	movs	r1, #1
 8010270:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8010274:	f7f8 fbf0 	bl	8008a58 <RCC_APB2PeriphClockCmd>

  /* Enable SCK, MOSI and MISO GPIO clocks */
  RCC_AHB1PeriphClockCmd(L3GD20_SPI_SCK_GPIO_CLK | L3GD20_SPI_MISO_GPIO_CLK | L3GD20_SPI_MOSI_GPIO_CLK, ENABLE);
 8010278:	2101      	movs	r1, #1
 801027a:	2020      	movs	r0, #32
 801027c:	f7f8 fb6c 	bl	8008958 <RCC_AHB1PeriphClockCmd>

  /* Enable CS GPIO clock */
  RCC_AHB1PeriphClockCmd(L3GD20_SPI_CS_GPIO_CLK, ENABLE);
 8010280:	2101      	movs	r1, #1
 8010282:	2004      	movs	r0, #4
 8010284:	f7f8 fb68 	bl	8008958 <RCC_AHB1PeriphClockCmd>
  
  /* Enable INT1 GPIO clock */
  RCC_AHB1PeriphClockCmd(L3GD20_SPI_INT1_GPIO_CLK, ENABLE);
 8010288:	2101      	movs	r1, #1
 801028a:	2001      	movs	r0, #1
 801028c:	f7f8 fb64 	bl	8008958 <RCC_AHB1PeriphClockCmd>
  
  /* Enable INT2 GPIO clock */
  RCC_AHB1PeriphClockCmd(L3GD20_SPI_INT2_GPIO_CLK, ENABLE);
 8010290:	2101      	movs	r1, #1
 8010292:	2001      	movs	r0, #1
 8010294:	f7f8 fb60 	bl	8008958 <RCC_AHB1PeriphClockCmd>

  GPIO_PinAFConfig(L3GD20_SPI_SCK_GPIO_PORT, L3GD20_SPI_SCK_SOURCE, L3GD20_SPI_SCK_AF);
 8010298:	2205      	movs	r2, #5
 801029a:	2107      	movs	r1, #7
 801029c:	483d      	ldr	r0, [pc, #244]	; (8010394 <L3GD20_LowLevel_Init+0x12c>)
 801029e:	f7f6 fafa 	bl	8006896 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(L3GD20_SPI_MISO_GPIO_PORT, L3GD20_SPI_MISO_SOURCE, L3GD20_SPI_MISO_AF);
 80102a2:	2205      	movs	r2, #5
 80102a4:	2108      	movs	r1, #8
 80102a6:	483b      	ldr	r0, [pc, #236]	; (8010394 <L3GD20_LowLevel_Init+0x12c>)
 80102a8:	f7f6 faf5 	bl	8006896 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(L3GD20_SPI_MOSI_GPIO_PORT, L3GD20_SPI_MOSI_SOURCE, L3GD20_SPI_MOSI_AF);
 80102ac:	2205      	movs	r2, #5
 80102ae:	2109      	movs	r1, #9
 80102b0:	4838      	ldr	r0, [pc, #224]	; (8010394 <L3GD20_LowLevel_Init+0x12c>)
 80102b2:	f7f6 faf0 	bl	8006896 <GPIO_PinAFConfig>

  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 80102b6:	2302      	movs	r3, #2
 80102b8:	773b      	strb	r3, [r7, #28]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 80102ba:	2300      	movs	r3, #0
 80102bc:	77bb      	strb	r3, [r7, #30]
  GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_DOWN;
 80102be:	2302      	movs	r3, #2
 80102c0:	77fb      	strb	r3, [r7, #31]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_25MHz;
 80102c2:	2301      	movs	r3, #1
 80102c4:	777b      	strb	r3, [r7, #29]

  /* SPI SCK pin configuration */
  GPIO_InitStructure.GPIO_Pin = L3GD20_SPI_SCK_PIN;
 80102c6:	2380      	movs	r3, #128	; 0x80
 80102c8:	61bb      	str	r3, [r7, #24]
  GPIO_Init(L3GD20_SPI_SCK_GPIO_PORT, &GPIO_InitStructure);
 80102ca:	f107 0318 	add.w	r3, r7, #24
 80102ce:	4619      	mov	r1, r3
 80102d0:	4830      	ldr	r0, [pc, #192]	; (8010394 <L3GD20_LowLevel_Init+0x12c>)
 80102d2:	f7f6 f971 	bl	80065b8 <GPIO_Init>

  /* SPI  MOSI pin configuration */
  GPIO_InitStructure.GPIO_Pin =  L3GD20_SPI_MOSI_PIN;
 80102d6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80102da:	61bb      	str	r3, [r7, #24]
  GPIO_Init(L3GD20_SPI_MOSI_GPIO_PORT, &GPIO_InitStructure);
 80102dc:	f107 0318 	add.w	r3, r7, #24
 80102e0:	4619      	mov	r1, r3
 80102e2:	482c      	ldr	r0, [pc, #176]	; (8010394 <L3GD20_LowLevel_Init+0x12c>)
 80102e4:	f7f6 f968 	bl	80065b8 <GPIO_Init>

  /* SPI MISO pin configuration */
  GPIO_InitStructure.GPIO_Pin = L3GD20_SPI_MISO_PIN;
 80102e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80102ec:	61bb      	str	r3, [r7, #24]
  GPIO_Init(L3GD20_SPI_MISO_GPIO_PORT, &GPIO_InitStructure);
 80102ee:	f107 0318 	add.w	r3, r7, #24
 80102f2:	4619      	mov	r1, r3
 80102f4:	4827      	ldr	r0, [pc, #156]	; (8010394 <L3GD20_LowLevel_Init+0x12c>)
 80102f6:	f7f6 f95f 	bl	80065b8 <GPIO_Init>

  /* SPI configuration -------------------------------------------------------*/
  SPI_I2S_DeInit(L3GD20_SPI);
 80102fa:	4827      	ldr	r0, [pc, #156]	; (8010398 <L3GD20_LowLevel_Init+0x130>)
 80102fc:	f7fa fe16 	bl	800af2c <SPI_I2S_DeInit>
  SPI_InitStructure.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 8010300:	2300      	movs	r3, #0
 8010302:	80bb      	strh	r3, [r7, #4]
  SPI_InitStructure.SPI_Mode = SPI_Mode_Master;
 8010304:	f44f 7382 	mov.w	r3, #260	; 0x104
 8010308:	80fb      	strh	r3, [r7, #6]
  SPI_InitStructure.SPI_DataSize = SPI_DataSize_8b;
 801030a:	2300      	movs	r3, #0
 801030c:	813b      	strh	r3, [r7, #8]
  SPI_InitStructure.SPI_CPOL = SPI_CPOL_Low;
 801030e:	2300      	movs	r3, #0
 8010310:	817b      	strh	r3, [r7, #10]
  SPI_InitStructure.SPI_CPHA = SPI_CPHA_1Edge;
 8010312:	2300      	movs	r3, #0
 8010314:	81bb      	strh	r3, [r7, #12]
  SPI_InitStructure.SPI_NSS = SPI_NSS_Soft;
 8010316:	f44f 7300 	mov.w	r3, #512	; 0x200
 801031a:	81fb      	strh	r3, [r7, #14]
     to verify these constraints:
        - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
        - l3gd20 SPI interface max baudrate is 10MHz for write/read
        - PCLK2 frequency is set to 90 MHz 
    */
  SPI_InitStructure.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_16;
 801031c:	2318      	movs	r3, #24
 801031e:	823b      	strh	r3, [r7, #16]
  SPI_InitStructure.SPI_FirstBit = SPI_FirstBit_MSB;
 8010320:	2300      	movs	r3, #0
 8010322:	827b      	strh	r3, [r7, #18]
  SPI_InitStructure.SPI_CRCPolynomial = 7;
 8010324:	2307      	movs	r3, #7
 8010326:	82bb      	strh	r3, [r7, #20]
  SPI_Init(L3GD20_SPI, &SPI_InitStructure);
 8010328:	1d3b      	adds	r3, r7, #4
 801032a:	4619      	mov	r1, r3
 801032c:	481a      	ldr	r0, [pc, #104]	; (8010398 <L3GD20_LowLevel_Init+0x130>)
 801032e:	f7fa fe6b 	bl	800b008 <SPI_Init>

  /* Enable L3GD20_SPI  */
  SPI_Cmd(L3GD20_SPI, ENABLE);
 8010332:	2101      	movs	r1, #1
 8010334:	4818      	ldr	r0, [pc, #96]	; (8010398 <L3GD20_LowLevel_Init+0x130>)
 8010336:	f7fa ffc2 	bl	800b2be <SPI_Cmd>
  
  /* Configure GPIO PIN for Lis Chip select */
  GPIO_InitStructure.GPIO_Pin = L3GD20_SPI_CS_PIN;
 801033a:	2302      	movs	r3, #2
 801033c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 801033e:	2301      	movs	r3, #1
 8010340:	773b      	strb	r3, [r7, #28]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8010342:	2300      	movs	r3, #0
 8010344:	77bb      	strb	r3, [r7, #30]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_25MHz;
 8010346:	2301      	movs	r3, #1
 8010348:	777b      	strb	r3, [r7, #29]
  GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
 801034a:	2300      	movs	r3, #0
 801034c:	77fb      	strb	r3, [r7, #31]
  GPIO_Init(L3GD20_SPI_CS_GPIO_PORT, &GPIO_InitStructure);
 801034e:	f107 0318 	add.w	r3, r7, #24
 8010352:	4619      	mov	r1, r3
 8010354:	4811      	ldr	r0, [pc, #68]	; (801039c <L3GD20_LowLevel_Init+0x134>)
 8010356:	f7f6 f92f 	bl	80065b8 <GPIO_Init>

  /* Deselect : Chip Select high */
  GPIO_SetBits(L3GD20_SPI_CS_GPIO_PORT, L3GD20_SPI_CS_PIN);
 801035a:	2102      	movs	r1, #2
 801035c:	480f      	ldr	r0, [pc, #60]	; (801039c <L3GD20_LowLevel_Init+0x134>)
 801035e:	f7f6 fa43 	bl	80067e8 <GPIO_SetBits>
  
  /* Configure GPIO PINs to detect Interrupts */
  GPIO_InitStructure.GPIO_Pin = L3GD20_SPI_INT1_PIN;
 8010362:	2302      	movs	r3, #2
 8010364:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 8010366:	2300      	movs	r3, #0
 8010368:	773b      	strb	r3, [r7, #28]
  GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
 801036a:	2300      	movs	r3, #0
 801036c:	77fb      	strb	r3, [r7, #31]
  GPIO_Init(L3GD20_SPI_INT1_GPIO_PORT, &GPIO_InitStructure);
 801036e:	f107 0318 	add.w	r3, r7, #24
 8010372:	4619      	mov	r1, r3
 8010374:	480a      	ldr	r0, [pc, #40]	; (80103a0 <L3GD20_LowLevel_Init+0x138>)
 8010376:	f7f6 f91f 	bl	80065b8 <GPIO_Init>
  
  GPIO_InitStructure.GPIO_Pin = L3GD20_SPI_INT2_PIN;
 801037a:	2304      	movs	r3, #4
 801037c:	61bb      	str	r3, [r7, #24]
  GPIO_Init(L3GD20_SPI_INT2_GPIO_PORT, &GPIO_InitStructure);
 801037e:	f107 0318 	add.w	r3, r7, #24
 8010382:	4619      	mov	r1, r3
 8010384:	4806      	ldr	r0, [pc, #24]	; (80103a0 <L3GD20_LowLevel_Init+0x138>)
 8010386:	f7f6 f917 	bl	80065b8 <GPIO_Init>
}  
 801038a:	bf00      	nop
 801038c:	3720      	adds	r7, #32
 801038e:	46bd      	mov	sp, r7
 8010390:	bd80      	pop	{r7, pc}
 8010392:	bf00      	nop
 8010394:	40021400 	.word	0x40021400
 8010398:	40015000 	.word	0x40015000
 801039c:	40020800 	.word	0x40020800
 80103a0:	40020000 	.word	0x40020000

080103a4 <L3GD20_SendByte>:
  *         from the SPI bus.
  * @param  Byte : Byte send.
  * @retval The received byte value
  */
static uint8_t L3GD20_SendByte(uint8_t byte)
{
 80103a4:	b580      	push	{r7, lr}
 80103a6:	b082      	sub	sp, #8
 80103a8:	af00      	add	r7, sp, #0
 80103aa:	4603      	mov	r3, r0
 80103ac:	71fb      	strb	r3, [r7, #7]
  /* Loop while DR register in not empty */
  L3GD20Timeout = L3GD20_FLAG_TIMEOUT;
 80103ae:	4b1f      	ldr	r3, [pc, #124]	; (801042c <L3GD20_SendByte+0x88>)
 80103b0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80103b4:	601a      	str	r2, [r3, #0]
  while (SPI_I2S_GetFlagStatus(L3GD20_SPI, SPI_I2S_FLAG_TXE) == RESET)
 80103b6:	e00b      	b.n	80103d0 <L3GD20_SendByte+0x2c>
  {
    if((L3GD20Timeout--) == 0) return L3GD20_TIMEOUT_UserCallback();
 80103b8:	4b1c      	ldr	r3, [pc, #112]	; (801042c <L3GD20_SendByte+0x88>)
 80103ba:	681b      	ldr	r3, [r3, #0]
 80103bc:	1e5a      	subs	r2, r3, #1
 80103be:	491b      	ldr	r1, [pc, #108]	; (801042c <L3GD20_SendByte+0x88>)
 80103c0:	600a      	str	r2, [r1, #0]
 80103c2:	2b00      	cmp	r3, #0
 80103c4:	d104      	bne.n	80103d0 <L3GD20_SendByte+0x2c>
 80103c6:	f000 f835 	bl	8010434 <L3GD20_TIMEOUT_UserCallback>
 80103ca:	4603      	mov	r3, r0
 80103cc:	b2db      	uxtb	r3, r3
 80103ce:	e029      	b.n	8010424 <L3GD20_SendByte+0x80>
  while (SPI_I2S_GetFlagStatus(L3GD20_SPI, SPI_I2S_FLAG_TXE) == RESET)
 80103d0:	2102      	movs	r1, #2
 80103d2:	4817      	ldr	r0, [pc, #92]	; (8010430 <L3GD20_SendByte+0x8c>)
 80103d4:	f7fb f969 	bl	800b6aa <SPI_I2S_GetFlagStatus>
 80103d8:	4603      	mov	r3, r0
 80103da:	2b00      	cmp	r3, #0
 80103dc:	d0ec      	beq.n	80103b8 <L3GD20_SendByte+0x14>
  }
  
  /* Send a Byte through the SPI peripheral */
  SPI_I2S_SendData(L3GD20_SPI, (uint16_t)byte);
 80103de:	79fb      	ldrb	r3, [r7, #7]
 80103e0:	b29b      	uxth	r3, r3
 80103e2:	4619      	mov	r1, r3
 80103e4:	4812      	ldr	r0, [pc, #72]	; (8010430 <L3GD20_SendByte+0x8c>)
 80103e6:	f7fb f8a4 	bl	800b532 <SPI_I2S_SendData>
  /* Wait to receive a Byte */
  L3GD20Timeout = L3GD20_FLAG_TIMEOUT;
 80103ea:	4b10      	ldr	r3, [pc, #64]	; (801042c <L3GD20_SendByte+0x88>)
 80103ec:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80103f0:	601a      	str	r2, [r3, #0]
  while (SPI_I2S_GetFlagStatus(L3GD20_SPI, SPI_I2S_FLAG_RXNE) == RESET)
 80103f2:	e00b      	b.n	801040c <L3GD20_SendByte+0x68>
  {
    if((L3GD20Timeout--) == 0) return L3GD20_TIMEOUT_UserCallback();
 80103f4:	4b0d      	ldr	r3, [pc, #52]	; (801042c <L3GD20_SendByte+0x88>)
 80103f6:	681b      	ldr	r3, [r3, #0]
 80103f8:	1e5a      	subs	r2, r3, #1
 80103fa:	490c      	ldr	r1, [pc, #48]	; (801042c <L3GD20_SendByte+0x88>)
 80103fc:	600a      	str	r2, [r1, #0]
 80103fe:	2b00      	cmp	r3, #0
 8010400:	d104      	bne.n	801040c <L3GD20_SendByte+0x68>
 8010402:	f000 f817 	bl	8010434 <L3GD20_TIMEOUT_UserCallback>
 8010406:	4603      	mov	r3, r0
 8010408:	b2db      	uxtb	r3, r3
 801040a:	e00b      	b.n	8010424 <L3GD20_SendByte+0x80>
  while (SPI_I2S_GetFlagStatus(L3GD20_SPI, SPI_I2S_FLAG_RXNE) == RESET)
 801040c:	2101      	movs	r1, #1
 801040e:	4808      	ldr	r0, [pc, #32]	; (8010430 <L3GD20_SendByte+0x8c>)
 8010410:	f7fb f94b 	bl	800b6aa <SPI_I2S_GetFlagStatus>
 8010414:	4603      	mov	r3, r0
 8010416:	2b00      	cmp	r3, #0
 8010418:	d0ec      	beq.n	80103f4 <L3GD20_SendByte+0x50>
  }
  
  /* Return the Byte read from the SPI bus */
  return (uint8_t)SPI_I2S_ReceiveData(L3GD20_SPI);
 801041a:	4805      	ldr	r0, [pc, #20]	; (8010430 <L3GD20_SendByte+0x8c>)
 801041c:	f7fb f87c 	bl	800b518 <SPI_I2S_ReceiveData>
 8010420:	4603      	mov	r3, r0
 8010422:	b2db      	uxtb	r3, r3
}
 8010424:	4618      	mov	r0, r3
 8010426:	3708      	adds	r7, #8
 8010428:	46bd      	mov	sp, r7
 801042a:	bd80      	pop	{r7, pc}
 801042c:	200000a8 	.word	0x200000a8
 8010430:	40015000 	.word	0x40015000

08010434 <L3GD20_TIMEOUT_UserCallback>:
  * @brief  Basic management of the timeout situation.
  * @param  None.
  * @retval None.
  */
uint32_t L3GD20_TIMEOUT_UserCallback(void)
{
 8010434:	b480      	push	{r7}
 8010436:	af00      	add	r7, sp, #0
  /* Block communication and all processes */
  while (1)
 8010438:	e7fe      	b.n	8010438 <L3GD20_TIMEOUT_UserCallback+0x4>
 801043a:	bf00      	nop

0801043c <LCD_DeInit>:
  * @brief  DeInitializes the LCD.
  * @param  None
  * @retval None
  */
void LCD_DeInit(void)
{ 
 801043c:	b580      	push	{r7, lr}
 801043e:	b082      	sub	sp, #8
 8010440:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  /* LCD Display Off */
  LCD_DisplayOff();
 8010442:	f002 f800 	bl	8012446 <LCD_DisplayOff>

  /* LCD_SPI disable */
  SPI_Cmd(LCD_SPI, DISABLE);
 8010446:	2100      	movs	r1, #0
 8010448:	487e      	ldr	r0, [pc, #504]	; (8010644 <LCD_DeInit+0x208>)
 801044a:	f7fa ff38 	bl	800b2be <SPI_Cmd>
  
  /* LCD_SPI DeInit */
  SPI_I2S_DeInit(LCD_SPI);
 801044e:	487d      	ldr	r0, [pc, #500]	; (8010644 <LCD_DeInit+0x208>)
 8010450:	f7fa fd6c 	bl	800af2c <SPI_I2S_DeInit>
   
  /* Disable SPI clock  */
  RCC_APB2PeriphClockCmd(LCD_SPI_CLK, DISABLE);
 8010454:	2100      	movs	r1, #0
 8010456:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 801045a:	f7f8 fafd 	bl	8008a58 <RCC_APB2PeriphClockCmd>
    
  /* Configure NCS in Output Push-Pull mode */
  GPIO_InitStructure.GPIO_Pin = LCD_NCS_PIN;
 801045e:	2304      	movs	r3, #4
 8010460:	603b      	str	r3, [r7, #0]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 8010462:	2300      	movs	r3, #0
 8010464:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8010466:	2300      	movs	r3, #0
 8010468:	71fb      	strb	r3, [r7, #7]
  GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 801046a:	463b      	mov	r3, r7
 801046c:	4619      	mov	r1, r3
 801046e:	4876      	ldr	r0, [pc, #472]	; (8010648 <LCD_DeInit+0x20c>)
 8010470:	f7f6 f8a2 	bl	80065b8 <GPIO_Init>
   
  /* Configure SPI pins: SCK, MISO and MOSI */
  GPIO_InitStructure.GPIO_Pin = LCD_SPI_SCK_PIN;
 8010474:	2380      	movs	r3, #128	; 0x80
 8010476:	603b      	str	r3, [r7, #0]
  GPIO_Init(LCD_SPI_SCK_GPIO_PORT, &GPIO_InitStructure);
 8010478:	463b      	mov	r3, r7
 801047a:	4619      	mov	r1, r3
 801047c:	4873      	ldr	r0, [pc, #460]	; (801064c <LCD_DeInit+0x210>)
 801047e:	f7f6 f89b 	bl	80065b8 <GPIO_Init>

  GPIO_InitStructure.GPIO_Pin = LCD_SPI_MISO_PIN;
 8010482:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010486:	603b      	str	r3, [r7, #0]
  GPIO_Init(LCD_SPI_MISO_GPIO_PORT, &GPIO_InitStructure);
 8010488:	463b      	mov	r3, r7
 801048a:	4619      	mov	r1, r3
 801048c:	486f      	ldr	r0, [pc, #444]	; (801064c <LCD_DeInit+0x210>)
 801048e:	f7f6 f893 	bl	80065b8 <GPIO_Init>
  
  GPIO_InitStructure.GPIO_Pin = LCD_SPI_MOSI_PIN;
 8010492:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010496:	603b      	str	r3, [r7, #0]
  GPIO_Init(LCD_SPI_MOSI_GPIO_PORT, &GPIO_InitStructure);
 8010498:	463b      	mov	r3, r7
 801049a:	4619      	mov	r1, r3
 801049c:	486b      	ldr	r0, [pc, #428]	; (801064c <LCD_DeInit+0x210>)
 801049e:	f7f6 f88b 	bl	80065b8 <GPIO_Init>

  /* GPIOA configuration */
  GPIO_PinAFConfig(GPIOA, GPIO_PinSource3, GPIO_AF_MCO);
 80104a2:	2200      	movs	r2, #0
 80104a4:	2103      	movs	r1, #3
 80104a6:	486a      	ldr	r0, [pc, #424]	; (8010650 <LCD_DeInit+0x214>)
 80104a8:	f7f6 f9f5 	bl	8006896 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOA, GPIO_PinSource4, GPIO_AF_MCO);
 80104ac:	2200      	movs	r2, #0
 80104ae:	2104      	movs	r1, #4
 80104b0:	4867      	ldr	r0, [pc, #412]	; (8010650 <LCD_DeInit+0x214>)
 80104b2:	f7f6 f9f0 	bl	8006896 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOA, GPIO_PinSource6, GPIO_AF_MCO);
 80104b6:	2200      	movs	r2, #0
 80104b8:	2106      	movs	r1, #6
 80104ba:	4865      	ldr	r0, [pc, #404]	; (8010650 <LCD_DeInit+0x214>)
 80104bc:	f7f6 f9eb 	bl	8006896 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOA, GPIO_PinSource11, GPIO_AF_MCO);
 80104c0:	2200      	movs	r2, #0
 80104c2:	210b      	movs	r1, #11
 80104c4:	4862      	ldr	r0, [pc, #392]	; (8010650 <LCD_DeInit+0x214>)
 80104c6:	f7f6 f9e6 	bl	8006896 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOA, GPIO_PinSource12, GPIO_AF_MCO);
 80104ca:	2200      	movs	r2, #0
 80104cc:	210c      	movs	r1, #12
 80104ce:	4860      	ldr	r0, [pc, #384]	; (8010650 <LCD_DeInit+0x214>)
 80104d0:	f7f6 f9e1 	bl	8006896 <GPIO_PinAFConfig>
  
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_3 | GPIO_Pin_4 | GPIO_Pin_6 |
 80104d4:	f641 0358 	movw	r3, #6232	; 0x1858
 80104d8:	603b      	str	r3, [r7, #0]
                                GPIO_Pin_11 | GPIO_Pin_12;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 80104da:	2302      	movs	r3, #2
 80104dc:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80104de:	2302      	movs	r3, #2
 80104e0:	717b      	strb	r3, [r7, #5]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 80104e2:	2300      	movs	r3, #0
 80104e4:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
 80104e6:	2300      	movs	r3, #0
 80104e8:	71fb      	strb	r3, [r7, #7]
  GPIO_Init(GPIOA, &GPIO_InitStructure);
 80104ea:	463b      	mov	r3, r7
 80104ec:	4619      	mov	r1, r3
 80104ee:	4858      	ldr	r0, [pc, #352]	; (8010650 <LCD_DeInit+0x214>)
 80104f0:	f7f6 f862 	bl	80065b8 <GPIO_Init>

  /* GPIOB configuration */
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource0, GPIO_AF_MCO);
 80104f4:	2200      	movs	r2, #0
 80104f6:	2100      	movs	r1, #0
 80104f8:	4856      	ldr	r0, [pc, #344]	; (8010654 <LCD_DeInit+0x218>)
 80104fa:	f7f6 f9cc 	bl	8006896 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource1, GPIO_AF_MCO);
 80104fe:	2200      	movs	r2, #0
 8010500:	2101      	movs	r1, #1
 8010502:	4854      	ldr	r0, [pc, #336]	; (8010654 <LCD_DeInit+0x218>)
 8010504:	f7f6 f9c7 	bl	8006896 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource8, GPIO_AF_MCO);
 8010508:	2200      	movs	r2, #0
 801050a:	2108      	movs	r1, #8
 801050c:	4851      	ldr	r0, [pc, #324]	; (8010654 <LCD_DeInit+0x218>)
 801050e:	f7f6 f9c2 	bl	8006896 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource9, GPIO_AF_MCO);
 8010512:	2200      	movs	r2, #0
 8010514:	2109      	movs	r1, #9
 8010516:	484f      	ldr	r0, [pc, #316]	; (8010654 <LCD_DeInit+0x218>)
 8010518:	f7f6 f9bd 	bl	8006896 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource10, GPIO_AF_MCO);
 801051c:	2200      	movs	r2, #0
 801051e:	210a      	movs	r1, #10
 8010520:	484c      	ldr	r0, [pc, #304]	; (8010654 <LCD_DeInit+0x218>)
 8010522:	f7f6 f9b8 	bl	8006896 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource11, GPIO_AF_MCO);
 8010526:	2200      	movs	r2, #0
 8010528:	210b      	movs	r1, #11
 801052a:	484a      	ldr	r0, [pc, #296]	; (8010654 <LCD_DeInit+0x218>)
 801052c:	f7f6 f9b3 	bl	8006896 <GPIO_PinAFConfig>
  
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0  | GPIO_Pin_1  | GPIO_Pin_8    |
 8010530:	f640 7303 	movw	r3, #3843	; 0xf03
 8010534:	603b      	str	r3, [r7, #0]
                                GPIO_Pin_9  |  GPIO_Pin_10 | GPIO_Pin_11;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8010536:	2302      	movs	r3, #2
 8010538:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 801053a:	2302      	movs	r3, #2
 801053c:	717b      	strb	r3, [r7, #5]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 801053e:	2300      	movs	r3, #0
 8010540:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
 8010542:	2300      	movs	r3, #0
 8010544:	71fb      	strb	r3, [r7, #7]
  GPIO_Init(GPIOB, &GPIO_InitStructure);
 8010546:	463b      	mov	r3, r7
 8010548:	4619      	mov	r1, r3
 801054a:	4842      	ldr	r0, [pc, #264]	; (8010654 <LCD_DeInit+0x218>)
 801054c:	f7f6 f834 	bl	80065b8 <GPIO_Init>
  
  /* GPIOC configuration */
  GPIO_PinAFConfig(GPIOC, GPIO_PinSource6, GPIO_AF_MCO);
 8010550:	2200      	movs	r2, #0
 8010552:	2106      	movs	r1, #6
 8010554:	483c      	ldr	r0, [pc, #240]	; (8010648 <LCD_DeInit+0x20c>)
 8010556:	f7f6 f99e 	bl	8006896 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOC, GPIO_PinSource7, GPIO_AF_MCO);
 801055a:	2200      	movs	r2, #0
 801055c:	2107      	movs	r1, #7
 801055e:	483a      	ldr	r0, [pc, #232]	; (8010648 <LCD_DeInit+0x20c>)
 8010560:	f7f6 f999 	bl	8006896 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOC, GPIO_PinSource10, GPIO_AF_MCO);
 8010564:	2200      	movs	r2, #0
 8010566:	210a      	movs	r1, #10
 8010568:	4837      	ldr	r0, [pc, #220]	; (8010648 <LCD_DeInit+0x20c>)
 801056a:	f7f6 f994 	bl	8006896 <GPIO_PinAFConfig>
  
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6  | GPIO_Pin_7  | GPIO_Pin_10;
 801056e:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8010572:	603b      	str	r3, [r7, #0]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8010574:	2302      	movs	r3, #2
 8010576:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8010578:	2302      	movs	r3, #2
 801057a:	717b      	strb	r3, [r7, #5]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 801057c:	2300      	movs	r3, #0
 801057e:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
 8010580:	2300      	movs	r3, #0
 8010582:	71fb      	strb	r3, [r7, #7]
  GPIO_Init(GPIOC, &GPIO_InitStructure);
 8010584:	463b      	mov	r3, r7
 8010586:	4619      	mov	r1, r3
 8010588:	482f      	ldr	r0, [pc, #188]	; (8010648 <LCD_DeInit+0x20c>)
 801058a:	f7f6 f815 	bl	80065b8 <GPIO_Init>
  
  /* GPIOD configuration */
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource3, GPIO_AF_MCO);
 801058e:	2200      	movs	r2, #0
 8010590:	2103      	movs	r1, #3
 8010592:	4831      	ldr	r0, [pc, #196]	; (8010658 <LCD_DeInit+0x21c>)
 8010594:	f7f6 f97f 	bl	8006896 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource6, GPIO_AF_MCO);
 8010598:	2200      	movs	r2, #0
 801059a:	2106      	movs	r1, #6
 801059c:	482e      	ldr	r0, [pc, #184]	; (8010658 <LCD_DeInit+0x21c>)
 801059e:	f7f6 f97a 	bl	8006896 <GPIO_PinAFConfig>
  
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_3  | GPIO_Pin_6; 
 80105a2:	2348      	movs	r3, #72	; 0x48
 80105a4:	603b      	str	r3, [r7, #0]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 80105a6:	2302      	movs	r3, #2
 80105a8:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80105aa:	2302      	movs	r3, #2
 80105ac:	717b      	strb	r3, [r7, #5]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 80105ae:	2300      	movs	r3, #0
 80105b0:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
 80105b2:	2300      	movs	r3, #0
 80105b4:	71fb      	strb	r3, [r7, #7]
  GPIO_Init(GPIOD, &GPIO_InitStructure);  
 80105b6:	463b      	mov	r3, r7
 80105b8:	4619      	mov	r1, r3
 80105ba:	4827      	ldr	r0, [pc, #156]	; (8010658 <LCD_DeInit+0x21c>)
 80105bc:	f7f5 fffc 	bl	80065b8 <GPIO_Init>

  /* GPIOF configuration */
  GPIO_PinAFConfig(GPIOF, GPIO_PinSource10, GPIO_AF_MCO);
 80105c0:	2200      	movs	r2, #0
 80105c2:	210a      	movs	r1, #10
 80105c4:	4821      	ldr	r0, [pc, #132]	; (801064c <LCD_DeInit+0x210>)
 80105c6:	f7f6 f966 	bl	8006896 <GPIO_PinAFConfig>
  
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10; 
 80105ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80105ce:	603b      	str	r3, [r7, #0]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 80105d0:	2302      	movs	r3, #2
 80105d2:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80105d4:	2302      	movs	r3, #2
 80105d6:	717b      	strb	r3, [r7, #5]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 80105d8:	2300      	movs	r3, #0
 80105da:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
 80105dc:	2300      	movs	r3, #0
 80105de:	71fb      	strb	r3, [r7, #7]
  GPIO_Init(GPIOF, &GPIO_InitStructure);  
 80105e0:	463b      	mov	r3, r7
 80105e2:	4619      	mov	r1, r3
 80105e4:	4819      	ldr	r0, [pc, #100]	; (801064c <LCD_DeInit+0x210>)
 80105e6:	f7f5 ffe7 	bl	80065b8 <GPIO_Init>

  /* GPIOG configuration */
  GPIO_PinAFConfig(GPIOG, GPIO_PinSource6, GPIO_AF_MCO);
 80105ea:	2200      	movs	r2, #0
 80105ec:	2106      	movs	r1, #6
 80105ee:	481b      	ldr	r0, [pc, #108]	; (801065c <LCD_DeInit+0x220>)
 80105f0:	f7f6 f951 	bl	8006896 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOG, GPIO_PinSource7, GPIO_AF_MCO);
 80105f4:	2200      	movs	r2, #0
 80105f6:	2107      	movs	r1, #7
 80105f8:	4818      	ldr	r0, [pc, #96]	; (801065c <LCD_DeInit+0x220>)
 80105fa:	f7f6 f94c 	bl	8006896 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOG, GPIO_PinSource10, GPIO_AF_MCO);
 80105fe:	2200      	movs	r2, #0
 8010600:	210a      	movs	r1, #10
 8010602:	4816      	ldr	r0, [pc, #88]	; (801065c <LCD_DeInit+0x220>)
 8010604:	f7f6 f947 	bl	8006896 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOG, GPIO_PinSource11, GPIO_AF_MCO);
 8010608:	2200      	movs	r2, #0
 801060a:	210b      	movs	r1, #11
 801060c:	4813      	ldr	r0, [pc, #76]	; (801065c <LCD_DeInit+0x220>)
 801060e:	f7f6 f942 	bl	8006896 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOG, GPIO_PinSource12, GPIO_AF_MCO);
 8010612:	2200      	movs	r2, #0
 8010614:	210c      	movs	r1, #12
 8010616:	4811      	ldr	r0, [pc, #68]	; (801065c <LCD_DeInit+0x220>)
 8010618:	f7f6 f93d 	bl	8006896 <GPIO_PinAFConfig>
  
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6  | GPIO_Pin_7  | GPIO_Pin_10    |
 801061c:	f44f 53e6 	mov.w	r3, #7360	; 0x1cc0
 8010620:	603b      	str	r3, [r7, #0]
                                GPIO_Pin_11 | GPIO_Pin_12;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8010622:	2302      	movs	r3, #2
 8010624:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8010626:	2302      	movs	r3, #2
 8010628:	717b      	strb	r3, [r7, #5]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 801062a:	2300      	movs	r3, #0
 801062c:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
 801062e:	2300      	movs	r3, #0
 8010630:	71fb      	strb	r3, [r7, #7]
  GPIO_Init(GPIOG, &GPIO_InitStructure);
 8010632:	463b      	mov	r3, r7
 8010634:	4619      	mov	r1, r3
 8010636:	4809      	ldr	r0, [pc, #36]	; (801065c <LCD_DeInit+0x220>)
 8010638:	f7f5 ffbe 	bl	80065b8 <GPIO_Init>
}
 801063c:	bf00      	nop
 801063e:	3708      	adds	r7, #8
 8010640:	46bd      	mov	sp, r7
 8010642:	bd80      	pop	{r7, pc}
 8010644:	40015000 	.word	0x40015000
 8010648:	40020800 	.word	0x40020800
 801064c:	40021400 	.word	0x40021400
 8010650:	40020000 	.word	0x40020000
 8010654:	40020400 	.word	0x40020400
 8010658:	40020c00 	.word	0x40020c00
 801065c:	40021800 	.word	0x40021800

08010660 <LCD_Init>:
  * @brief  Initializes the LCD.
  * @param  None
  * @retval None
  */
void LCD_Init(void)
{ 
 8010660:	b580      	push	{r7, lr}
 8010662:	b090      	sub	sp, #64	; 0x40
 8010664:	af00      	add	r7, sp, #0
  LTDC_InitTypeDef       LTDC_InitStruct;
  
  /* Configure the LCD Control pins ------------------------------------------*/
  LCD_CtrlLinesConfig();
 8010666:	f001 fef5 	bl	8012454 <LCD_CtrlLinesConfig>
  LCD_ChipSelect(DISABLE);
 801066a:	2000      	movs	r0, #0
 801066c:	f000 f8ae 	bl	80107cc <LCD_ChipSelect>
  LCD_ChipSelect(ENABLE);
 8010670:	2001      	movs	r0, #1
 8010672:	f000 f8ab 	bl	80107cc <LCD_ChipSelect>
  
  /* Configure the LCD_SPI interface -----------------------------------------*/
  LCD_SPIConfig(); 
 8010676:	f001 ff2b 	bl	80124d0 <LCD_SPIConfig>
  
  /* Power on the LCD --------------------------------------------------------*/
  LCD_PowerOn();
 801067a:	f001 fd95 	bl	80121a8 <LCD_PowerOn>
  
  /* Enable the LTDC Clock */
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_LTDC, ENABLE);
 801067e:	2101      	movs	r1, #1
 8010680:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8010684:	f7f8 f9e8 	bl	8008a58 <RCC_APB2PeriphClockCmd>
  
  /* Enable the DMA2D Clock */
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA2D, ENABLE); 
 8010688:	2101      	movs	r1, #1
 801068a:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 801068e:	f7f8 f963 	bl	8008958 <RCC_AHB1PeriphClockCmd>
  
  /* Configure the LCD Control pins */
  LCD_AF_GPIOConfig();  
 8010692:	f001 ff87 	bl	80125a4 <LCD_AF_GPIOConfig>
  
  /* Configure the FMC Parallel interface : SDRAM is used as Frame Buffer for LCD */
  SDRAM_Init();
 8010696:	f002 f87b 	bl	8012790 <SDRAM_Init>
  
  /* LTDC Configuration *********************************************************/  
  /* Polarity configuration */
  /* Initialize the horizontal synchronization polarity as active low */
  LTDC_InitStruct.LTDC_HSPolarity = LTDC_HSPolarity_AL;     
 801069a:	2300      	movs	r3, #0
 801069c:	607b      	str	r3, [r7, #4]
  /* Initialize the vertical synchronization polarity as active low */  
  LTDC_InitStruct.LTDC_VSPolarity = LTDC_VSPolarity_AL;     
 801069e:	2300      	movs	r3, #0
 80106a0:	60bb      	str	r3, [r7, #8]
  /* Initialize the data enable polarity as active low */
  LTDC_InitStruct.LTDC_DEPolarity = LTDC_DEPolarity_AL;     
 80106a2:	2300      	movs	r3, #0
 80106a4:	60fb      	str	r3, [r7, #12]
  /* Initialize the pixel clock polarity as input pixel clock */ 
  LTDC_InitStruct.LTDC_PCPolarity = LTDC_PCPolarity_IPC;
 80106a6:	2300      	movs	r3, #0
 80106a8:	613b      	str	r3, [r7, #16]
  
  /* Configure R,G,B component values for LCD background color */                   
  LTDC_InitStruct.LTDC_BackgroundRedValue = 0;            
 80106aa:	2300      	movs	r3, #0
 80106ac:	637b      	str	r3, [r7, #52]	; 0x34
  LTDC_InitStruct.LTDC_BackgroundGreenValue = 0;          
 80106ae:	2300      	movs	r3, #0
 80106b0:	63bb      	str	r3, [r7, #56]	; 0x38
  LTDC_InitStruct.LTDC_BackgroundBlueValue = 0;  
 80106b2:	2300      	movs	r3, #0
 80106b4:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* Enable Pixel Clock */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAI_N = 192 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAI_R = 192/4 = 48 Mhz */
  /* LTDC clock frequency = PLLLCDCLK / RCC_PLLSAIDivR = 48/8 = 6 Mhz */
  RCC_PLLSAIConfig(192, 7, 4);
 80106b6:	2204      	movs	r2, #4
 80106b8:	2107      	movs	r1, #7
 80106ba:	20c0      	movs	r0, #192	; 0xc0
 80106bc:	f7f7 fea0 	bl	8008400 <RCC_PLLSAIConfig>
  RCC_LTDCCLKDivConfig(RCC_PLLSAIDivR_Div8);
 80106c0:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80106c4:	f7f8 f91a 	bl	80088fc <RCC_LTDCCLKDivConfig>
  
  /* Enable PLLSAI Clock */
  RCC_PLLSAICmd(ENABLE);
 80106c8:	2001      	movs	r0, #1
 80106ca:	f7f7 feb3 	bl	8008434 <RCC_PLLSAICmd>
  /* Wait for PLLSAI activation */
  while(RCC_GetFlagStatus(RCC_FLAG_PLLSAIRDY) == RESET)
 80106ce:	bf00      	nop
 80106d0:	203d      	movs	r0, #61	; 0x3d
 80106d2:	f7f8 fb47 	bl	8008d64 <RCC_GetFlagStatus>
 80106d6:	4603      	mov	r3, r0
 80106d8:	2b00      	cmp	r3, #0
 80106da:	d0f9      	beq.n	80106d0 <LCD_Init+0x70>
  {
  }
  
  /* Timing configuration */  
  /* Configure horizontal synchronization width */     
  LTDC_InitStruct.LTDC_HorizontalSync = 9;
 80106dc:	2309      	movs	r3, #9
 80106de:	617b      	str	r3, [r7, #20]
  /* Configure vertical synchronization height */
  LTDC_InitStruct.LTDC_VerticalSync = 1;
 80106e0:	2301      	movs	r3, #1
 80106e2:	61bb      	str	r3, [r7, #24]
  /* Configure accumulated horizontal back porch */
  LTDC_InitStruct.LTDC_AccumulatedHBP = 29; 
 80106e4:	231d      	movs	r3, #29
 80106e6:	61fb      	str	r3, [r7, #28]
  /* Configure accumulated vertical back porch */
  LTDC_InitStruct.LTDC_AccumulatedVBP = 3;  
 80106e8:	2303      	movs	r3, #3
 80106ea:	623b      	str	r3, [r7, #32]
  /* Configure accumulated active width */  
  LTDC_InitStruct.LTDC_AccumulatedActiveW = 269;
 80106ec:	f240 130d 	movw	r3, #269	; 0x10d
 80106f0:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure accumulated active height */
  LTDC_InitStruct.LTDC_AccumulatedActiveH = 323;
 80106f2:	f240 1343 	movw	r3, #323	; 0x143
 80106f6:	62bb      	str	r3, [r7, #40]	; 0x28
  /* Configure total width */
  LTDC_InitStruct.LTDC_TotalWidth = 279; 
 80106f8:	f240 1317 	movw	r3, #279	; 0x117
 80106fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure total height */
  LTDC_InitStruct.LTDC_TotalHeigh = 327;
 80106fe:	f240 1347 	movw	r3, #327	; 0x147
 8010702:	633b      	str	r3, [r7, #48]	; 0x30
  
  LTDC_Init(&LTDC_InitStruct);
 8010704:	1d3b      	adds	r3, r7, #4
 8010706:	4618      	mov	r0, r3
 8010708:	f7f6 fe90 	bl	800742c <LTDC_Init>
}  
 801070c:	bf00      	nop
 801070e:	3740      	adds	r7, #64	; 0x40
 8010710:	46bd      	mov	sp, r7
 8010712:	bd80      	pop	{r7, pc}

08010714 <LCD_LayerInit>:
  * @brief  Initializes the LCD Layers.
  * @param  None
  * @retval None
  */
void LCD_LayerInit(void)
{
 8010714:	b580      	push	{r7, lr}
 8010716:	b090      	sub	sp, #64	; 0x40
 8010718:	af00      	add	r7, sp, #0
  /* In this case all the active display area is used to display a picture then :
  Horizontal start = horizontal synchronization + Horizontal back porch = 30 
  Horizontal stop = Horizontal start + window width -1 = 30 + 240 -1
  Vertical start   = vertical synchronization + vertical back porch     = 4
  Vertical stop   = Vertical start + window height -1  = 4 + 320 -1      */      
  LTDC_Layer_InitStruct.LTDC_HorizontalStart = 30;
 801071a:	231e      	movs	r3, #30
 801071c:	603b      	str	r3, [r7, #0]
  LTDC_Layer_InitStruct.LTDC_HorizontalStop = (LCD_PIXEL_WIDTH + 30 - 1); 
 801071e:	f240 130d 	movw	r3, #269	; 0x10d
 8010722:	607b      	str	r3, [r7, #4]
  LTDC_Layer_InitStruct.LTDC_VerticalStart = 4;
 8010724:	2304      	movs	r3, #4
 8010726:	60bb      	str	r3, [r7, #8]
  LTDC_Layer_InitStruct.LTDC_VerticalStop = (LCD_PIXEL_HEIGHT + 4 - 1);
 8010728:	f240 1343 	movw	r3, #323	; 0x143
 801072c:	60fb      	str	r3, [r7, #12]
  
  /* Pixel Format configuration*/
  LTDC_Layer_InitStruct.LTDC_PixelFormat = LTDC_Pixelformat_RGB888;
 801072e:	2301      	movs	r3, #1
 8010730:	613b      	str	r3, [r7, #16]
  /* Alpha constant (255 totally opaque) */
  LTDC_Layer_InitStruct.LTDC_ConstantAlpha = 255; 
 8010732:	23ff      	movs	r3, #255	; 0xff
 8010734:	617b      	str	r3, [r7, #20]
  /* Default Color configuration (configure A,R,G,B component values) */          
  LTDC_Layer_InitStruct.LTDC_DefaultColorBlue = 0;        
 8010736:	2300      	movs	r3, #0
 8010738:	61bb      	str	r3, [r7, #24]
  LTDC_Layer_InitStruct.LTDC_DefaultColorGreen = 255;       
 801073a:	23ff      	movs	r3, #255	; 0xff
 801073c:	61fb      	str	r3, [r7, #28]
  LTDC_Layer_InitStruct.LTDC_DefaultColorRed = 0;         
 801073e:	2300      	movs	r3, #0
 8010740:	623b      	str	r3, [r7, #32]
  LTDC_Layer_InitStruct.LTDC_DefaultColorAlpha = 0;
 8010742:	2300      	movs	r3, #0
 8010744:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure blending factors */       
  LTDC_Layer_InitStruct.LTDC_BlendingFactor_1 = LTDC_BlendingFactor1_CA;    
 8010746:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801074a:	62bb      	str	r3, [r7, #40]	; 0x28
  LTDC_Layer_InitStruct.LTDC_BlendingFactor_2 = LTDC_BlendingFactor2_CA;
 801074c:	2305      	movs	r3, #5
 801074e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* the length of one line of pixels in bytes + 3 then :
  Line Lenth = Active high width x number of bytes per pixel + 3 
  Active high width         = LCD_PIXEL_WIDTH 
  number of bytes per pixel = 2    (pixel_format : RGB565) 
  */
  LTDC_Layer_InitStruct.LTDC_CFBLineLength = ((LCD_PIXEL_WIDTH * 2) + 3);
 8010750:	f240 13e3 	movw	r3, #483	; 0x1e3
 8010754:	637b      	str	r3, [r7, #52]	; 0x34
  /* the pitch is the increment from the start of one line of pixels to the 
  start of the next line in bytes, then :
  Pitch = Active high width x number of bytes per pixel */ 
  LTDC_Layer_InitStruct.LTDC_CFBPitch = (LCD_PIXEL_WIDTH * 2);
 8010756:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 801075a:	63bb      	str	r3, [r7, #56]	; 0x38
  
  /* Configure the number of lines */  
  LTDC_Layer_InitStruct.LTDC_CFBLineNumber = LCD_PIXEL_HEIGHT;
 801075c:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8010760:	63fb      	str	r3, [r7, #60]	; 0x3c
  
  /* Start Address configuration : the LCD Frame buffer is defined on SDRAM */    
  LTDC_Layer_InitStruct.LTDC_CFBStartAdress = LCD_FRAME_BUFFER;
 8010762:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 8010766:	633b      	str	r3, [r7, #48]	; 0x30
  
  /* Initialize LTDC layer 1 */
  LTDC_LayerInit(LTDC_Layer1, &LTDC_Layer_InitStruct);
 8010768:	463b      	mov	r3, r7
 801076a:	4619      	mov	r1, r3
 801076c:	4813      	ldr	r0, [pc, #76]	; (80107bc <LCD_LayerInit+0xa8>)
 801076e:	f7f6 ffc7 	bl	8007700 <LTDC_LayerInit>
  
  /* Configure Layer2 */
  /* Start Address configuration : the LCD Frame buffer is defined on SDRAM w/ Offset */     
  LTDC_Layer_InitStruct.LTDC_CFBStartAdress = LCD_FRAME_BUFFER + BUFFER_OFFSET;
 8010772:	4b13      	ldr	r3, [pc, #76]	; (80107c0 <LCD_LayerInit+0xac>)
 8010774:	633b      	str	r3, [r7, #48]	; 0x30
  
  /* Configure blending factors */       
  LTDC_Layer_InitStruct.LTDC_BlendingFactor_1 = LTDC_BlendingFactor1_PAxCA;    
 8010776:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 801077a:	62bb      	str	r3, [r7, #40]	; 0x28
  LTDC_Layer_InitStruct.LTDC_BlendingFactor_2 = LTDC_BlendingFactor2_PAxCA;
 801077c:	2307      	movs	r3, #7
 801077e:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Initialize LTDC layer 2 */
  LTDC_LayerInit(LTDC_Layer2, &LTDC_Layer_InitStruct);
 8010780:	463b      	mov	r3, r7
 8010782:	4619      	mov	r1, r3
 8010784:	480f      	ldr	r0, [pc, #60]	; (80107c4 <LCD_LayerInit+0xb0>)
 8010786:	f7f6 ffbb 	bl	8007700 <LTDC_LayerInit>
  
  /* LTDC configuration reload */  
  LTDC_ReloadConfig(LTDC_IMReload);
 801078a:	2001      	movs	r0, #1
 801078c:	f7f6 ffa8 	bl	80076e0 <LTDC_ReloadConfig>
  
  /* Enable foreground & background Layers */
  LTDC_LayerCmd(LTDC_Layer1, ENABLE); 
 8010790:	2101      	movs	r1, #1
 8010792:	480a      	ldr	r0, [pc, #40]	; (80107bc <LCD_LayerInit+0xa8>)
 8010794:	f7f7 f889 	bl	80078aa <LTDC_LayerCmd>
  LTDC_LayerCmd(LTDC_Layer2, ENABLE);
 8010798:	2101      	movs	r1, #1
 801079a:	480a      	ldr	r0, [pc, #40]	; (80107c4 <LCD_LayerInit+0xb0>)
 801079c:	f7f7 f885 	bl	80078aa <LTDC_LayerCmd>
  
  /* LTDC configuration reload */  
  LTDC_ReloadConfig(LTDC_IMReload);
 80107a0:	2001      	movs	r0, #1
 80107a2:	f7f6 ff9d 	bl	80076e0 <LTDC_ReloadConfig>
  
  /* Set default font */    
  LCD_SetFont(&LCD_DEFAULT_FONT); 
 80107a6:	4808      	ldr	r0, [pc, #32]	; (80107c8 <LCD_LayerInit+0xb4>)
 80107a8:	f000 f89a 	bl	80108e0 <LCD_SetFont>
  
  /* dithering activation */
  LTDC_DitherCmd(ENABLE);
 80107ac:	2001      	movs	r0, #1
 80107ae:	f7f6 ff29 	bl	8007604 <LTDC_DitherCmd>
}
 80107b2:	bf00      	nop
 80107b4:	3740      	adds	r7, #64	; 0x40
 80107b6:	46bd      	mov	sp, r7
 80107b8:	bd80      	pop	{r7, pc}
 80107ba:	bf00      	nop
 80107bc:	40016884 	.word	0x40016884
 80107c0:	d0050000 	.word	0xd0050000
 80107c4:	40016904 	.word	0x40016904
 80107c8:	200000ac 	.word	0x200000ac

080107cc <LCD_ChipSelect>:
  * @brief  Controls LCD Chip Select (CS) pin
  * @param  NewState CS pin state
  * @retval None
  */
void LCD_ChipSelect(FunctionalState NewState)
{
 80107cc:	b580      	push	{r7, lr}
 80107ce:	b082      	sub	sp, #8
 80107d0:	af00      	add	r7, sp, #0
 80107d2:	4603      	mov	r3, r0
 80107d4:	71fb      	strb	r3, [r7, #7]
  if (NewState == DISABLE)
 80107d6:	79fb      	ldrb	r3, [r7, #7]
 80107d8:	2b00      	cmp	r3, #0
 80107da:	d104      	bne.n	80107e6 <LCD_ChipSelect+0x1a>
  {
    GPIO_ResetBits(LCD_NCS_GPIO_PORT, LCD_NCS_PIN); /* CS pin low: LCD disabled */
 80107dc:	2104      	movs	r1, #4
 80107de:	4806      	ldr	r0, [pc, #24]	; (80107f8 <LCD_ChipSelect+0x2c>)
 80107e0:	f7f6 f811 	bl	8006806 <GPIO_ResetBits>
  }
  else
  {
    GPIO_SetBits(LCD_NCS_GPIO_PORT, LCD_NCS_PIN); /* CS pin high: LCD enabled */
  }
}
 80107e4:	e003      	b.n	80107ee <LCD_ChipSelect+0x22>
    GPIO_SetBits(LCD_NCS_GPIO_PORT, LCD_NCS_PIN); /* CS pin high: LCD enabled */
 80107e6:	2104      	movs	r1, #4
 80107e8:	4803      	ldr	r0, [pc, #12]	; (80107f8 <LCD_ChipSelect+0x2c>)
 80107ea:	f7f5 fffd 	bl	80067e8 <GPIO_SetBits>
}
 80107ee:	bf00      	nop
 80107f0:	3708      	adds	r7, #8
 80107f2:	46bd      	mov	sp, r7
 80107f4:	bd80      	pop	{r7, pc}
 80107f6:	bf00      	nop
 80107f8:	40020800 	.word	0x40020800

080107fc <LCD_SetLayer>:
  * @brief  Sets the LCD Layer.
  * @param  Layerx: specifies the Layer foreground or background.
  * @retval None
  */
void LCD_SetLayer(uint32_t Layerx)
{
 80107fc:	b480      	push	{r7}
 80107fe:	b083      	sub	sp, #12
 8010800:	af00      	add	r7, sp, #0
 8010802:	6078      	str	r0, [r7, #4]
  if (Layerx == LCD_BACKGROUND_LAYER)
 8010804:	687b      	ldr	r3, [r7, #4]
 8010806:	2b00      	cmp	r3, #0
 8010808:	d107      	bne.n	801081a <LCD_SetLayer+0x1e>
  {
    CurrentFrameBuffer = LCD_FRAME_BUFFER; 
 801080a:	4b0a      	ldr	r3, [pc, #40]	; (8010834 <LCD_SetLayer+0x38>)
 801080c:	f04f 4250 	mov.w	r2, #3489660928	; 0xd0000000
 8010810:	601a      	str	r2, [r3, #0]
    CurrentLayer = LCD_BACKGROUND_LAYER;
 8010812:	4b09      	ldr	r3, [pc, #36]	; (8010838 <LCD_SetLayer+0x3c>)
 8010814:	2200      	movs	r2, #0
 8010816:	601a      	str	r2, [r3, #0]
  else
  {
    CurrentFrameBuffer = LCD_FRAME_BUFFER + BUFFER_OFFSET;
    CurrentLayer = LCD_FOREGROUND_LAYER;
  }
}  
 8010818:	e005      	b.n	8010826 <LCD_SetLayer+0x2a>
    CurrentFrameBuffer = LCD_FRAME_BUFFER + BUFFER_OFFSET;
 801081a:	4b06      	ldr	r3, [pc, #24]	; (8010834 <LCD_SetLayer+0x38>)
 801081c:	4a07      	ldr	r2, [pc, #28]	; (801083c <LCD_SetLayer+0x40>)
 801081e:	601a      	str	r2, [r3, #0]
    CurrentLayer = LCD_FOREGROUND_LAYER;
 8010820:	4b05      	ldr	r3, [pc, #20]	; (8010838 <LCD_SetLayer+0x3c>)
 8010822:	2201      	movs	r2, #1
 8010824:	601a      	str	r2, [r3, #0]
}  
 8010826:	bf00      	nop
 8010828:	370c      	adds	r7, #12
 801082a:	46bd      	mov	sp, r7
 801082c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010830:	4770      	bx	lr
 8010832:	bf00      	nop
 8010834:	200000d0 	.word	0x200000d0
 8010838:	20002e30 	.word	0x20002e30
 801083c:	d0050000 	.word	0xd0050000

08010840 <LCD_SetColors>:
  * @param  TextColor: specifies the Text Color.
  * @param  BackColor: specifies the Background Color.
  * @retval None
  */
void LCD_SetColors(uint16_t TextColor, uint16_t BackColor)
{
 8010840:	b480      	push	{r7}
 8010842:	b083      	sub	sp, #12
 8010844:	af00      	add	r7, sp, #0
 8010846:	4603      	mov	r3, r0
 8010848:	460a      	mov	r2, r1
 801084a:	80fb      	strh	r3, [r7, #6]
 801084c:	4613      	mov	r3, r2
 801084e:	80bb      	strh	r3, [r7, #4]
  CurrentTextColor = TextColor; 
 8010850:	4a05      	ldr	r2, [pc, #20]	; (8010868 <LCD_SetColors+0x28>)
 8010852:	88fb      	ldrh	r3, [r7, #6]
 8010854:	8013      	strh	r3, [r2, #0]
  CurrentBackColor = BackColor;
 8010856:	4a05      	ldr	r2, [pc, #20]	; (801086c <LCD_SetColors+0x2c>)
 8010858:	88bb      	ldrh	r3, [r7, #4]
 801085a:	8013      	strh	r3, [r2, #0]
}
 801085c:	bf00      	nop
 801085e:	370c      	adds	r7, #12
 8010860:	46bd      	mov	sp, r7
 8010862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010866:	4770      	bx	lr
 8010868:	20002e2c 	.word	0x20002e2c
 801086c:	200000cc 	.word	0x200000cc

08010870 <LCD_GetColors>:
  * @param  BackColor: pointer to the variable that will contain the Background 
            Color.
  * @retval None
  */
void LCD_GetColors(uint16_t *TextColor, uint16_t *BackColor)
{
 8010870:	b480      	push	{r7}
 8010872:	b083      	sub	sp, #12
 8010874:	af00      	add	r7, sp, #0
 8010876:	6078      	str	r0, [r7, #4]
 8010878:	6039      	str	r1, [r7, #0]
  *TextColor = CurrentTextColor;
 801087a:	4b07      	ldr	r3, [pc, #28]	; (8010898 <LCD_GetColors+0x28>)
 801087c:	881a      	ldrh	r2, [r3, #0]
 801087e:	687b      	ldr	r3, [r7, #4]
 8010880:	801a      	strh	r2, [r3, #0]
  *BackColor = CurrentBackColor;
 8010882:	4b06      	ldr	r3, [pc, #24]	; (801089c <LCD_GetColors+0x2c>)
 8010884:	881a      	ldrh	r2, [r3, #0]
 8010886:	683b      	ldr	r3, [r7, #0]
 8010888:	801a      	strh	r2, [r3, #0]
}
 801088a:	bf00      	nop
 801088c:	370c      	adds	r7, #12
 801088e:	46bd      	mov	sp, r7
 8010890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010894:	4770      	bx	lr
 8010896:	bf00      	nop
 8010898:	20002e2c 	.word	0x20002e2c
 801089c:	200000cc 	.word	0x200000cc

080108a0 <LCD_SetTextColor>:
  * @brief  Sets the Text color.
  * @param  Color: specifies the Text color code RGB(5-6-5).
  * @retval None
  */
void LCD_SetTextColor(uint16_t Color)
{
 80108a0:	b480      	push	{r7}
 80108a2:	b083      	sub	sp, #12
 80108a4:	af00      	add	r7, sp, #0
 80108a6:	4603      	mov	r3, r0
 80108a8:	80fb      	strh	r3, [r7, #6]
  CurrentTextColor = Color;
 80108aa:	4a04      	ldr	r2, [pc, #16]	; (80108bc <LCD_SetTextColor+0x1c>)
 80108ac:	88fb      	ldrh	r3, [r7, #6]
 80108ae:	8013      	strh	r3, [r2, #0]
}
 80108b0:	bf00      	nop
 80108b2:	370c      	adds	r7, #12
 80108b4:	46bd      	mov	sp, r7
 80108b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108ba:	4770      	bx	lr
 80108bc:	20002e2c 	.word	0x20002e2c

080108c0 <LCD_SetBackColor>:
  * @brief  Sets the Background color.
  * @param  Color: specifies the Background color code RGB(5-6-5).
  * @retval None
  */
void LCD_SetBackColor(uint16_t Color)
{
 80108c0:	b480      	push	{r7}
 80108c2:	b083      	sub	sp, #12
 80108c4:	af00      	add	r7, sp, #0
 80108c6:	4603      	mov	r3, r0
 80108c8:	80fb      	strh	r3, [r7, #6]
  CurrentBackColor = Color;
 80108ca:	4a04      	ldr	r2, [pc, #16]	; (80108dc <LCD_SetBackColor+0x1c>)
 80108cc:	88fb      	ldrh	r3, [r7, #6]
 80108ce:	8013      	strh	r3, [r2, #0]
}
 80108d0:	bf00      	nop
 80108d2:	370c      	adds	r7, #12
 80108d4:	46bd      	mov	sp, r7
 80108d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108da:	4770      	bx	lr
 80108dc:	200000cc 	.word	0x200000cc

080108e0 <LCD_SetFont>:
  * @brief  Sets the Text Font.
  * @param  fonts: specifies the font to be used.
  * @retval None
  */
void LCD_SetFont(sFONT *fonts)
{
 80108e0:	b480      	push	{r7}
 80108e2:	b083      	sub	sp, #12
 80108e4:	af00      	add	r7, sp, #0
 80108e6:	6078      	str	r0, [r7, #4]
  LCD_Currentfonts = fonts;
 80108e8:	4a04      	ldr	r2, [pc, #16]	; (80108fc <LCD_SetFont+0x1c>)
 80108ea:	687b      	ldr	r3, [r7, #4]
 80108ec:	6013      	str	r3, [r2, #0]
}
 80108ee:	bf00      	nop
 80108f0:	370c      	adds	r7, #12
 80108f2:	46bd      	mov	sp, r7
 80108f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108f8:	4770      	bx	lr
 80108fa:	bf00      	nop
 80108fc:	20002e28 	.word	0x20002e28

08010900 <LCD_SetTransparency>:
  * @param  transparency: specifies the transparency, 
  *         This parameter must range from 0x00 to 0xFF.
  * @retval None
  */
void LCD_SetTransparency(uint8_t transparency)
{
 8010900:	b580      	push	{r7, lr}
 8010902:	b082      	sub	sp, #8
 8010904:	af00      	add	r7, sp, #0
 8010906:	4603      	mov	r3, r0
 8010908:	71fb      	strb	r3, [r7, #7]
  if (CurrentLayer == LCD_BACKGROUND_LAYER)
 801090a:	4b0b      	ldr	r3, [pc, #44]	; (8010938 <LCD_SetTransparency+0x38>)
 801090c:	681b      	ldr	r3, [r3, #0]
 801090e:	2b00      	cmp	r3, #0
 8010910:	d105      	bne.n	801091e <LCD_SetTransparency+0x1e>
  {
    LTDC_LayerAlpha(LTDC_Layer1, transparency);
 8010912:	79fb      	ldrb	r3, [r7, #7]
 8010914:	4619      	mov	r1, r3
 8010916:	4809      	ldr	r0, [pc, #36]	; (801093c <LCD_SetTransparency+0x3c>)
 8010918:	f7f7 f94c 	bl	8007bb4 <LTDC_LayerAlpha>
 801091c:	e004      	b.n	8010928 <LCD_SetTransparency+0x28>
  }
  else
  {     
    LTDC_LayerAlpha(LTDC_Layer2, transparency);
 801091e:	79fb      	ldrb	r3, [r7, #7]
 8010920:	4619      	mov	r1, r3
 8010922:	4807      	ldr	r0, [pc, #28]	; (8010940 <LCD_SetTransparency+0x40>)
 8010924:	f7f7 f946 	bl	8007bb4 <LTDC_LayerAlpha>
  }
  LTDC_ReloadConfig(LTDC_IMReload);
 8010928:	2001      	movs	r0, #1
 801092a:	f7f6 fed9 	bl	80076e0 <LTDC_ReloadConfig>
}
 801092e:	bf00      	nop
 8010930:	3708      	adds	r7, #8
 8010932:	46bd      	mov	sp, r7
 8010934:	bd80      	pop	{r7, pc}
 8010936:	bf00      	nop
 8010938:	20002e30 	.word	0x20002e30
 801093c:	40016884 	.word	0x40016884
 8010940:	40016904 	.word	0x40016904

08010944 <LCD_GetFont>:
  * @brief  Gets the Text Font.
  * @param  None.
  * @retval the used font.
  */
sFONT *LCD_GetFont(void)
{
 8010944:	b480      	push	{r7}
 8010946:	af00      	add	r7, sp, #0
  return LCD_Currentfonts;
 8010948:	4b03      	ldr	r3, [pc, #12]	; (8010958 <LCD_GetFont+0x14>)
 801094a:	681b      	ldr	r3, [r3, #0]
}
 801094c:	4618      	mov	r0, r3
 801094e:	46bd      	mov	sp, r7
 8010950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010954:	4770      	bx	lr
 8010956:	bf00      	nop
 8010958:	20002e28 	.word	0x20002e28

0801095c <LCD_ClearLine>:
  *                                      0..26 if LCD_Currentfonts is Font12x12 or Font8x12
  *                                      0..39 if LCD_Currentfonts is Font8x8
  * @retval None
  */
void LCD_ClearLine(uint16_t Line)
{
 801095c:	b580      	push	{r7, lr}
 801095e:	b084      	sub	sp, #16
 8010960:	af00      	add	r7, sp, #0
 8010962:	4603      	mov	r3, r0
 8010964:	80fb      	strh	r3, [r7, #6]
  uint16_t refcolumn = 0;
 8010966:	2300      	movs	r3, #0
 8010968:	81fb      	strh	r3, [r7, #14]
  /* Send the string character by character on lCD */
  while ((refcolumn < LCD_PIXEL_WIDTH) && (((refcolumn + LCD_Currentfonts->Width)& 0xFFFF) >= LCD_Currentfonts->Width))
 801096a:	e00b      	b.n	8010984 <LCD_ClearLine+0x28>
  {
    /* Display one character on LCD */
    LCD_DisplayChar(Line, refcolumn, ' ');
 801096c:	89f9      	ldrh	r1, [r7, #14]
 801096e:	88fb      	ldrh	r3, [r7, #6]
 8010970:	2220      	movs	r2, #32
 8010972:	4618      	mov	r0, r3
 8010974:	f000 f942 	bl	8010bfc <LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += LCD_Currentfonts->Width;
 8010978:	4b0b      	ldr	r3, [pc, #44]	; (80109a8 <LCD_ClearLine+0x4c>)
 801097a:	681b      	ldr	r3, [r3, #0]
 801097c:	889a      	ldrh	r2, [r3, #4]
 801097e:	89fb      	ldrh	r3, [r7, #14]
 8010980:	4413      	add	r3, r2
 8010982:	81fb      	strh	r3, [r7, #14]
  while ((refcolumn < LCD_PIXEL_WIDTH) && (((refcolumn + LCD_Currentfonts->Width)& 0xFFFF) >= LCD_Currentfonts->Width))
 8010984:	89fb      	ldrh	r3, [r7, #14]
 8010986:	2bef      	cmp	r3, #239	; 0xef
 8010988:	d80a      	bhi.n	80109a0 <LCD_ClearLine+0x44>
 801098a:	4b07      	ldr	r3, [pc, #28]	; (80109a8 <LCD_ClearLine+0x4c>)
 801098c:	681b      	ldr	r3, [r3, #0]
 801098e:	889a      	ldrh	r2, [r3, #4]
 8010990:	89fb      	ldrh	r3, [r7, #14]
 8010992:	4413      	add	r3, r2
 8010994:	b29a      	uxth	r2, r3
 8010996:	4b04      	ldr	r3, [pc, #16]	; (80109a8 <LCD_ClearLine+0x4c>)
 8010998:	681b      	ldr	r3, [r3, #0]
 801099a:	889b      	ldrh	r3, [r3, #4]
 801099c:	429a      	cmp	r2, r3
 801099e:	d2e5      	bcs.n	801096c <LCD_ClearLine+0x10>
  }
}
 80109a0:	bf00      	nop
 80109a2:	3710      	adds	r7, #16
 80109a4:	46bd      	mov	sp, r7
 80109a6:	bd80      	pop	{r7, pc}
 80109a8:	20002e28 	.word	0x20002e28

080109ac <LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: the color of the background.
  * @retval None
  */
void LCD_Clear(uint16_t Color)
{
 80109ac:	b480      	push	{r7}
 80109ae:	b085      	sub	sp, #20
 80109b0:	af00      	add	r7, sp, #0
 80109b2:	4603      	mov	r3, r0
 80109b4:	80fb      	strh	r3, [r7, #6]
  uint32_t index = 0;
 80109b6:	2300      	movs	r3, #0
 80109b8:	60fb      	str	r3, [r7, #12]
  
  /* erase memory */
  for (index = 0x00; index < BUFFER_OFFSET; index++)
 80109ba:	2300      	movs	r3, #0
 80109bc:	60fb      	str	r3, [r7, #12]
 80109be:	e00a      	b.n	80109d6 <LCD_Clear+0x2a>
  {
    *(__IO uint16_t*)(CurrentFrameBuffer + (2*index)) = Color;
 80109c0:	68fb      	ldr	r3, [r7, #12]
 80109c2:	005a      	lsls	r2, r3, #1
 80109c4:	4b09      	ldr	r3, [pc, #36]	; (80109ec <LCD_Clear+0x40>)
 80109c6:	681b      	ldr	r3, [r3, #0]
 80109c8:	4413      	add	r3, r2
 80109ca:	461a      	mov	r2, r3
 80109cc:	88fb      	ldrh	r3, [r7, #6]
 80109ce:	8013      	strh	r3, [r2, #0]
  for (index = 0x00; index < BUFFER_OFFSET; index++)
 80109d0:	68fb      	ldr	r3, [r7, #12]
 80109d2:	3301      	adds	r3, #1
 80109d4:	60fb      	str	r3, [r7, #12]
 80109d6:	68fb      	ldr	r3, [r7, #12]
 80109d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80109dc:	d3f0      	bcc.n	80109c0 <LCD_Clear+0x14>
  } 
}
 80109de:	bf00      	nop
 80109e0:	3714      	adds	r7, #20
 80109e2:	46bd      	mov	sp, r7
 80109e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109e8:	4770      	bx	lr
 80109ea:	bf00      	nop
 80109ec:	200000d0 	.word	0x200000d0

080109f0 <LCD_SetCursor>:
  * @param  Xpos: specifies the X position.
  * @param  Ypos: specifies the Y position. 
  * @retval Display Address
  */
uint32_t LCD_SetCursor(uint16_t Xpos, uint16_t Ypos)
{  
 80109f0:	b480      	push	{r7}
 80109f2:	b083      	sub	sp, #12
 80109f4:	af00      	add	r7, sp, #0
 80109f6:	4603      	mov	r3, r0
 80109f8:	460a      	mov	r2, r1
 80109fa:	80fb      	strh	r3, [r7, #6]
 80109fc:	4613      	mov	r3, r2
 80109fe:	80bb      	strh	r3, [r7, #4]
  return CurrentFrameBuffer + 2*(Xpos + (LCD_PIXEL_WIDTH*Ypos));
 8010a00:	88f9      	ldrh	r1, [r7, #6]
 8010a02:	88ba      	ldrh	r2, [r7, #4]
 8010a04:	4613      	mov	r3, r2
 8010a06:	011b      	lsls	r3, r3, #4
 8010a08:	1a9b      	subs	r3, r3, r2
 8010a0a:	011b      	lsls	r3, r3, #4
 8010a0c:	440b      	add	r3, r1
 8010a0e:	005b      	lsls	r3, r3, #1
 8010a10:	461a      	mov	r2, r3
 8010a12:	4b04      	ldr	r3, [pc, #16]	; (8010a24 <LCD_SetCursor+0x34>)
 8010a14:	681b      	ldr	r3, [r3, #0]
 8010a16:	4413      	add	r3, r2
}
 8010a18:	4618      	mov	r0, r3
 8010a1a:	370c      	adds	r7, #12
 8010a1c:	46bd      	mov	sp, r7
 8010a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a22:	4770      	bx	lr
 8010a24:	200000d0 	.word	0x200000d0

08010a28 <LCD_SetColorKeying>:
  * @brief  Config and Sets the color Keying.
  * @param  RGBValue: Specifies the Color reference. 
  * @retval None
  */
void LCD_SetColorKeying(uint32_t RGBValue)
{  
 8010a28:	b580      	push	{r7, lr}
 8010a2a:	b086      	sub	sp, #24
 8010a2c:	af00      	add	r7, sp, #0
 8010a2e:	6078      	str	r0, [r7, #4]
  LTDC_ColorKeying_InitTypeDef   LTDC_colorkeying_InitStruct;
  
  /* configure the color Keying */
  LTDC_colorkeying_InitStruct.LTDC_ColorKeyBlue = 0x0000FF & RGBValue;
 8010a30:	687b      	ldr	r3, [r7, #4]
 8010a32:	b2db      	uxtb	r3, r3
 8010a34:	60fb      	str	r3, [r7, #12]
  LTDC_colorkeying_InitStruct.LTDC_ColorKeyGreen = (0x00FF00 & RGBValue) >> 8;
 8010a36:	687b      	ldr	r3, [r7, #4]
 8010a38:	0a1b      	lsrs	r3, r3, #8
 8010a3a:	b2db      	uxtb	r3, r3
 8010a3c:	613b      	str	r3, [r7, #16]
  LTDC_colorkeying_InitStruct.LTDC_ColorKeyRed = (0xFF0000 & RGBValue) >> 16;  
 8010a3e:	687b      	ldr	r3, [r7, #4]
 8010a40:	0c1b      	lsrs	r3, r3, #16
 8010a42:	b2db      	uxtb	r3, r3
 8010a44:	617b      	str	r3, [r7, #20]

  if (CurrentLayer == LCD_BACKGROUND_LAYER)
 8010a46:	4b0e      	ldr	r3, [pc, #56]	; (8010a80 <LCD_SetColorKeying+0x58>)
 8010a48:	681b      	ldr	r3, [r3, #0]
 8010a4a:	2b00      	cmp	r3, #0
 8010a4c:	d10a      	bne.n	8010a64 <LCD_SetColorKeying+0x3c>
  {   
    /* Enable the color Keying for Layer1 */
    LTDC_ColorKeyingConfig(LTDC_Layer1, &LTDC_colorkeying_InitStruct, ENABLE);
 8010a4e:	f107 030c 	add.w	r3, r7, #12
 8010a52:	2201      	movs	r2, #1
 8010a54:	4619      	mov	r1, r3
 8010a56:	480b      	ldr	r0, [pc, #44]	; (8010a84 <LCD_SetColorKeying+0x5c>)
 8010a58:	f7f6 ff8c 	bl	8007974 <LTDC_ColorKeyingConfig>
    LTDC_ReloadConfig(LTDC_IMReload);
 8010a5c:	2001      	movs	r0, #1
 8010a5e:	f7f6 fe3f 	bl	80076e0 <LTDC_ReloadConfig>
  {
    /* Enable the color Keying for Layer2 */
    LTDC_ColorKeyingConfig(LTDC_Layer2, &LTDC_colorkeying_InitStruct, ENABLE);
    LTDC_ReloadConfig(LTDC_IMReload);
  }
}
 8010a62:	e009      	b.n	8010a78 <LCD_SetColorKeying+0x50>
    LTDC_ColorKeyingConfig(LTDC_Layer2, &LTDC_colorkeying_InitStruct, ENABLE);
 8010a64:	f107 030c 	add.w	r3, r7, #12
 8010a68:	2201      	movs	r2, #1
 8010a6a:	4619      	mov	r1, r3
 8010a6c:	4806      	ldr	r0, [pc, #24]	; (8010a88 <LCD_SetColorKeying+0x60>)
 8010a6e:	f7f6 ff81 	bl	8007974 <LTDC_ColorKeyingConfig>
    LTDC_ReloadConfig(LTDC_IMReload);
 8010a72:	2001      	movs	r0, #1
 8010a74:	f7f6 fe34 	bl	80076e0 <LTDC_ReloadConfig>
}
 8010a78:	bf00      	nop
 8010a7a:	3718      	adds	r7, #24
 8010a7c:	46bd      	mov	sp, r7
 8010a7e:	bd80      	pop	{r7, pc}
 8010a80:	20002e30 	.word	0x20002e30
 8010a84:	40016884 	.word	0x40016884
 8010a88:	40016904 	.word	0x40016904

08010a8c <LCD_ReSetColorKeying>:
  * @brief  Disable the color Keying.
  * @param  RGBValue: Specifies the Color reference. 
  * @retval None
  */
void LCD_ReSetColorKeying(void)
{
 8010a8c:	b580      	push	{r7, lr}
 8010a8e:	b084      	sub	sp, #16
 8010a90:	af00      	add	r7, sp, #0
  LTDC_ColorKeying_InitTypeDef   LTDC_colorkeying_InitStruct;
  
  if (CurrentLayer == LCD_BACKGROUND_LAYER)
 8010a92:	4b0d      	ldr	r3, [pc, #52]	; (8010ac8 <LCD_ReSetColorKeying+0x3c>)
 8010a94:	681b      	ldr	r3, [r3, #0]
 8010a96:	2b00      	cmp	r3, #0
 8010a98:	d109      	bne.n	8010aae <LCD_ReSetColorKeying+0x22>
  {   
    /* Disable the color Keying for Layer1 */
    LTDC_ColorKeyingConfig(LTDC_Layer1, &LTDC_colorkeying_InitStruct, DISABLE);
 8010a9a:	1d3b      	adds	r3, r7, #4
 8010a9c:	2200      	movs	r2, #0
 8010a9e:	4619      	mov	r1, r3
 8010aa0:	480a      	ldr	r0, [pc, #40]	; (8010acc <LCD_ReSetColorKeying+0x40>)
 8010aa2:	f7f6 ff67 	bl	8007974 <LTDC_ColorKeyingConfig>
    LTDC_ReloadConfig(LTDC_IMReload);
 8010aa6:	2001      	movs	r0, #1
 8010aa8:	f7f6 fe1a 	bl	80076e0 <LTDC_ReloadConfig>
  {
    /* Disable the color Keying for Layer2 */
    LTDC_ColorKeyingConfig(LTDC_Layer2, &LTDC_colorkeying_InitStruct, DISABLE);
    LTDC_ReloadConfig(LTDC_IMReload);
  }
} 
 8010aac:	e008      	b.n	8010ac0 <LCD_ReSetColorKeying+0x34>
    LTDC_ColorKeyingConfig(LTDC_Layer2, &LTDC_colorkeying_InitStruct, DISABLE);
 8010aae:	1d3b      	adds	r3, r7, #4
 8010ab0:	2200      	movs	r2, #0
 8010ab2:	4619      	mov	r1, r3
 8010ab4:	4806      	ldr	r0, [pc, #24]	; (8010ad0 <LCD_ReSetColorKeying+0x44>)
 8010ab6:	f7f6 ff5d 	bl	8007974 <LTDC_ColorKeyingConfig>
    LTDC_ReloadConfig(LTDC_IMReload);
 8010aba:	2001      	movs	r0, #1
 8010abc:	f7f6 fe10 	bl	80076e0 <LTDC_ReloadConfig>
} 
 8010ac0:	bf00      	nop
 8010ac2:	3710      	adds	r7, #16
 8010ac4:	46bd      	mov	sp, r7
 8010ac6:	bd80      	pop	{r7, pc}
 8010ac8:	20002e30 	.word	0x20002e30
 8010acc:	40016884 	.word	0x40016884
 8010ad0:	40016904 	.word	0x40016904

08010ad4 <LCD_DrawChar>:
  * @param  Ypos: start column address.
  * @param  c: pointer to the character data.
  * @retval None
  */
void LCD_DrawChar(uint16_t Xpos, uint16_t Ypos, const uint16_t *c)
{
 8010ad4:	b480      	push	{r7}
 8010ad6:	b087      	sub	sp, #28
 8010ad8:	af00      	add	r7, sp, #0
 8010ada:	4603      	mov	r3, r0
 8010adc:	603a      	str	r2, [r7, #0]
 8010ade:	80fb      	strh	r3, [r7, #6]
 8010ae0:	460b      	mov	r3, r1
 8010ae2:	80bb      	strh	r3, [r7, #4]
  uint32_t index = 0, counter = 0, xpos =0;
 8010ae4:	2300      	movs	r3, #0
 8010ae6:	617b      	str	r3, [r7, #20]
 8010ae8:	2300      	movs	r3, #0
 8010aea:	613b      	str	r3, [r7, #16]
 8010aec:	2300      	movs	r3, #0
 8010aee:	60bb      	str	r3, [r7, #8]
  uint32_t  Xaddress = 0;
 8010af0:	2300      	movs	r3, #0
 8010af2:	60fb      	str	r3, [r7, #12]
  
  xpos = Xpos*LCD_PIXEL_WIDTH*2;
 8010af4:	88fa      	ldrh	r2, [r7, #6]
 8010af6:	4613      	mov	r3, r2
 8010af8:	011b      	lsls	r3, r3, #4
 8010afa:	1a9b      	subs	r3, r3, r2
 8010afc:	015b      	lsls	r3, r3, #5
 8010afe:	60bb      	str	r3, [r7, #8]
  Xaddress += Ypos;
 8010b00:	88bb      	ldrh	r3, [r7, #4]
 8010b02:	68fa      	ldr	r2, [r7, #12]
 8010b04:	4413      	add	r3, r2
 8010b06:	60fb      	str	r3, [r7, #12]
  
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 8010b08:	2300      	movs	r3, #0
 8010b0a:	617b      	str	r3, [r7, #20]
 8010b0c:	e05f      	b.n	8010bce <LCD_DrawChar+0xfa>
  {
    
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 8010b0e:	2300      	movs	r3, #0
 8010b10:	613b      	str	r3, [r7, #16]
 8010b12:	e04a      	b.n	8010baa <LCD_DrawChar+0xd6>
    {
          
      if((((c[index] & ((0x80 << ((LCD_Currentfonts->Width / 12 ) * 8 ) ) >> counter)) == 0x00) &&(LCD_Currentfonts->Width <= 12))||
 8010b14:	697b      	ldr	r3, [r7, #20]
 8010b16:	005b      	lsls	r3, r3, #1
 8010b18:	683a      	ldr	r2, [r7, #0]
 8010b1a:	4413      	add	r3, r2
 8010b1c:	881b      	ldrh	r3, [r3, #0]
 8010b1e:	4619      	mov	r1, r3
 8010b20:	4b31      	ldr	r3, [pc, #196]	; (8010be8 <LCD_DrawChar+0x114>)
 8010b22:	681b      	ldr	r3, [r3, #0]
 8010b24:	889b      	ldrh	r3, [r3, #4]
 8010b26:	4a31      	ldr	r2, [pc, #196]	; (8010bec <LCD_DrawChar+0x118>)
 8010b28:	fba2 2303 	umull	r2, r3, r2, r3
 8010b2c:	08db      	lsrs	r3, r3, #3
 8010b2e:	b29b      	uxth	r3, r3
 8010b30:	00db      	lsls	r3, r3, #3
 8010b32:	2280      	movs	r2, #128	; 0x80
 8010b34:	409a      	lsls	r2, r3
 8010b36:	693b      	ldr	r3, [r7, #16]
 8010b38:	fa42 f303 	asr.w	r3, r2, r3
 8010b3c:	400b      	ands	r3, r1
 8010b3e:	2b00      	cmp	r3, #0
 8010b40:	d104      	bne.n	8010b4c <LCD_DrawChar+0x78>
 8010b42:	4b29      	ldr	r3, [pc, #164]	; (8010be8 <LCD_DrawChar+0x114>)
 8010b44:	681b      	ldr	r3, [r3, #0]
 8010b46:	889b      	ldrh	r3, [r3, #4]
 8010b48:	2b0c      	cmp	r3, #12
 8010b4a:	d911      	bls.n	8010b70 <LCD_DrawChar+0x9c>
        (((c[index] & (0x1 << counter)) == 0x00)&&(LCD_Currentfonts->Width > 12 )))
 8010b4c:	697b      	ldr	r3, [r7, #20]
 8010b4e:	005b      	lsls	r3, r3, #1
 8010b50:	683a      	ldr	r2, [r7, #0]
 8010b52:	4413      	add	r3, r2
 8010b54:	881b      	ldrh	r3, [r3, #0]
 8010b56:	461a      	mov	r2, r3
 8010b58:	693b      	ldr	r3, [r7, #16]
 8010b5a:	fa42 f303 	asr.w	r3, r2, r3
 8010b5e:	f003 0301 	and.w	r3, r3, #1
      if((((c[index] & ((0x80 << ((LCD_Currentfonts->Width / 12 ) * 8 ) ) >> counter)) == 0x00) &&(LCD_Currentfonts->Width <= 12))||
 8010b62:	2b00      	cmp	r3, #0
 8010b64:	d110      	bne.n	8010b88 <LCD_DrawChar+0xb4>
        (((c[index] & (0x1 << counter)) == 0x00)&&(LCD_Currentfonts->Width > 12 )))
 8010b66:	4b20      	ldr	r3, [pc, #128]	; (8010be8 <LCD_DrawChar+0x114>)
 8010b68:	681b      	ldr	r3, [r3, #0]
 8010b6a:	889b      	ldrh	r3, [r3, #4]
 8010b6c:	2b0c      	cmp	r3, #12
 8010b6e:	d90b      	bls.n	8010b88 <LCD_DrawChar+0xb4>
      {
          /* Write data value to all SDRAM memory */
         *(__IO uint16_t*) (CurrentFrameBuffer + (2*Xaddress) + xpos) = CurrentBackColor;
 8010b70:	68fb      	ldr	r3, [r7, #12]
 8010b72:	005a      	lsls	r2, r3, #1
 8010b74:	4b1e      	ldr	r3, [pc, #120]	; (8010bf0 <LCD_DrawChar+0x11c>)
 8010b76:	681b      	ldr	r3, [r3, #0]
 8010b78:	441a      	add	r2, r3
 8010b7a:	68bb      	ldr	r3, [r7, #8]
 8010b7c:	4413      	add	r3, r2
 8010b7e:	461a      	mov	r2, r3
 8010b80:	4b1c      	ldr	r3, [pc, #112]	; (8010bf4 <LCD_DrawChar+0x120>)
 8010b82:	881b      	ldrh	r3, [r3, #0]
 8010b84:	8013      	strh	r3, [r2, #0]
 8010b86:	e00a      	b.n	8010b9e <LCD_DrawChar+0xca>
      }
      else
      {
          /* Write data value to all SDRAM memory */
         *(__IO uint16_t*) (CurrentFrameBuffer + (2*Xaddress) + xpos) = CurrentTextColor;         
 8010b88:	68fb      	ldr	r3, [r7, #12]
 8010b8a:	005a      	lsls	r2, r3, #1
 8010b8c:	4b18      	ldr	r3, [pc, #96]	; (8010bf0 <LCD_DrawChar+0x11c>)
 8010b8e:	681b      	ldr	r3, [r3, #0]
 8010b90:	441a      	add	r2, r3
 8010b92:	68bb      	ldr	r3, [r7, #8]
 8010b94:	4413      	add	r3, r2
 8010b96:	461a      	mov	r2, r3
 8010b98:	4b17      	ldr	r3, [pc, #92]	; (8010bf8 <LCD_DrawChar+0x124>)
 8010b9a:	881b      	ldrh	r3, [r3, #0]
 8010b9c:	8013      	strh	r3, [r2, #0]
      }
      Xaddress++;
 8010b9e:	68fb      	ldr	r3, [r7, #12]
 8010ba0:	3301      	adds	r3, #1
 8010ba2:	60fb      	str	r3, [r7, #12]
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 8010ba4:	693b      	ldr	r3, [r7, #16]
 8010ba6:	3301      	adds	r3, #1
 8010ba8:	613b      	str	r3, [r7, #16]
 8010baa:	4b0f      	ldr	r3, [pc, #60]	; (8010be8 <LCD_DrawChar+0x114>)
 8010bac:	681b      	ldr	r3, [r3, #0]
 8010bae:	889b      	ldrh	r3, [r3, #4]
 8010bb0:	461a      	mov	r2, r3
 8010bb2:	693b      	ldr	r3, [r7, #16]
 8010bb4:	4293      	cmp	r3, r2
 8010bb6:	d3ad      	bcc.n	8010b14 <LCD_DrawChar+0x40>
    }
      Xaddress += (LCD_PIXEL_WIDTH - LCD_Currentfonts->Width);
 8010bb8:	4b0b      	ldr	r3, [pc, #44]	; (8010be8 <LCD_DrawChar+0x114>)
 8010bba:	681b      	ldr	r3, [r3, #0]
 8010bbc:	889b      	ldrh	r3, [r3, #4]
 8010bbe:	461a      	mov	r2, r3
 8010bc0:	68fb      	ldr	r3, [r7, #12]
 8010bc2:	1a9b      	subs	r3, r3, r2
 8010bc4:	33f0      	adds	r3, #240	; 0xf0
 8010bc6:	60fb      	str	r3, [r7, #12]
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 8010bc8:	697b      	ldr	r3, [r7, #20]
 8010bca:	3301      	adds	r3, #1
 8010bcc:	617b      	str	r3, [r7, #20]
 8010bce:	4b06      	ldr	r3, [pc, #24]	; (8010be8 <LCD_DrawChar+0x114>)
 8010bd0:	681b      	ldr	r3, [r3, #0]
 8010bd2:	88db      	ldrh	r3, [r3, #6]
 8010bd4:	461a      	mov	r2, r3
 8010bd6:	697b      	ldr	r3, [r7, #20]
 8010bd8:	4293      	cmp	r3, r2
 8010bda:	d398      	bcc.n	8010b0e <LCD_DrawChar+0x3a>
  }
}
 8010bdc:	bf00      	nop
 8010bde:	371c      	adds	r7, #28
 8010be0:	46bd      	mov	sp, r7
 8010be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010be6:	4770      	bx	lr
 8010be8:	20002e28 	.word	0x20002e28
 8010bec:	aaaaaaab 	.word	0xaaaaaaab
 8010bf0:	200000d0 	.word	0x200000d0
 8010bf4:	200000cc 	.word	0x200000cc
 8010bf8:	20002e2c 	.word	0x20002e2c

08010bfc <LCD_DisplayChar>:
  * @param  Column: start column address.
  * @param  Ascii: character ascii code, must be between 0x20 and 0x7E.
  * @retval None
  */
void LCD_DisplayChar(uint16_t Line, uint16_t Column, uint8_t Ascii)
{
 8010bfc:	b580      	push	{r7, lr}
 8010bfe:	b082      	sub	sp, #8
 8010c00:	af00      	add	r7, sp, #0
 8010c02:	4603      	mov	r3, r0
 8010c04:	80fb      	strh	r3, [r7, #6]
 8010c06:	460b      	mov	r3, r1
 8010c08:	80bb      	strh	r3, [r7, #4]
 8010c0a:	4613      	mov	r3, r2
 8010c0c:	70fb      	strb	r3, [r7, #3]
  Ascii -= 32;
 8010c0e:	78fb      	ldrb	r3, [r7, #3]
 8010c10:	3b20      	subs	r3, #32
 8010c12:	70fb      	strb	r3, [r7, #3]

  LCD_DrawChar(Line, Column, &LCD_Currentfonts->table[Ascii * LCD_Currentfonts->Height]);
 8010c14:	4b09      	ldr	r3, [pc, #36]	; (8010c3c <LCD_DisplayChar+0x40>)
 8010c16:	681b      	ldr	r3, [r3, #0]
 8010c18:	681a      	ldr	r2, [r3, #0]
 8010c1a:	78fb      	ldrb	r3, [r7, #3]
 8010c1c:	4907      	ldr	r1, [pc, #28]	; (8010c3c <LCD_DisplayChar+0x40>)
 8010c1e:	6809      	ldr	r1, [r1, #0]
 8010c20:	88c9      	ldrh	r1, [r1, #6]
 8010c22:	fb01 f303 	mul.w	r3, r1, r3
 8010c26:	005b      	lsls	r3, r3, #1
 8010c28:	441a      	add	r2, r3
 8010c2a:	88b9      	ldrh	r1, [r7, #4]
 8010c2c:	88fb      	ldrh	r3, [r7, #6]
 8010c2e:	4618      	mov	r0, r3
 8010c30:	f7ff ff50 	bl	8010ad4 <LCD_DrawChar>
}
 8010c34:	bf00      	nop
 8010c36:	3708      	adds	r7, #8
 8010c38:	46bd      	mov	sp, r7
 8010c3a:	bd80      	pop	{r7, pc}
 8010c3c:	20002e28 	.word	0x20002e28

08010c40 <LCD_DisplayStringLine>:
  *     @arg Linex: where x can be 0..9
  * @param  *ptr: pointer to string to display on LCD.
  * @retval None
  */
void LCD_DisplayStringLine(uint16_t Line, uint8_t *ptr)
{  
 8010c40:	b580      	push	{r7, lr}
 8010c42:	b084      	sub	sp, #16
 8010c44:	af00      	add	r7, sp, #0
 8010c46:	4603      	mov	r3, r0
 8010c48:	6039      	str	r1, [r7, #0]
 8010c4a:	80fb      	strh	r3, [r7, #6]
  uint16_t refcolumn = 0;
 8010c4c:	2300      	movs	r3, #0
 8010c4e:	81fb      	strh	r3, [r7, #14]
  /* Send the string character by character on lCD */
  while ((refcolumn < LCD_PIXEL_WIDTH) && ((*ptr != 0) & (((refcolumn + LCD_Currentfonts->Width) & 0xFFFF) >= LCD_Currentfonts->Width)))
 8010c50:	e00f      	b.n	8010c72 <LCD_DisplayStringLine+0x32>
  {
    /* Display one character on LCD */
    LCD_DisplayChar(Line, refcolumn, *ptr);
 8010c52:	683b      	ldr	r3, [r7, #0]
 8010c54:	781a      	ldrb	r2, [r3, #0]
 8010c56:	89f9      	ldrh	r1, [r7, #14]
 8010c58:	88fb      	ldrh	r3, [r7, #6]
 8010c5a:	4618      	mov	r0, r3
 8010c5c:	f7ff ffce 	bl	8010bfc <LCD_DisplayChar>
    /* Decrement the column position by width */
    refcolumn += LCD_Currentfonts->Width;
 8010c60:	4b14      	ldr	r3, [pc, #80]	; (8010cb4 <LCD_DisplayStringLine+0x74>)
 8010c62:	681b      	ldr	r3, [r3, #0]
 8010c64:	889a      	ldrh	r2, [r3, #4]
 8010c66:	89fb      	ldrh	r3, [r7, #14]
 8010c68:	4413      	add	r3, r2
 8010c6a:	81fb      	strh	r3, [r7, #14]
    /* Point on the next character */
    ptr++;
 8010c6c:	683b      	ldr	r3, [r7, #0]
 8010c6e:	3301      	adds	r3, #1
 8010c70:	603b      	str	r3, [r7, #0]
  while ((refcolumn < LCD_PIXEL_WIDTH) && ((*ptr != 0) & (((refcolumn + LCD_Currentfonts->Width) & 0xFFFF) >= LCD_Currentfonts->Width)))
 8010c72:	89fb      	ldrh	r3, [r7, #14]
 8010c74:	2bef      	cmp	r3, #239	; 0xef
 8010c76:	d818      	bhi.n	8010caa <LCD_DisplayStringLine+0x6a>
 8010c78:	683b      	ldr	r3, [r7, #0]
 8010c7a:	781b      	ldrb	r3, [r3, #0]
 8010c7c:	2b00      	cmp	r3, #0
 8010c7e:	bf14      	ite	ne
 8010c80:	2301      	movne	r3, #1
 8010c82:	2300      	moveq	r3, #0
 8010c84:	b2da      	uxtb	r2, r3
 8010c86:	4b0b      	ldr	r3, [pc, #44]	; (8010cb4 <LCD_DisplayStringLine+0x74>)
 8010c88:	681b      	ldr	r3, [r3, #0]
 8010c8a:	8899      	ldrh	r1, [r3, #4]
 8010c8c:	89fb      	ldrh	r3, [r7, #14]
 8010c8e:	440b      	add	r3, r1
 8010c90:	b299      	uxth	r1, r3
 8010c92:	4b08      	ldr	r3, [pc, #32]	; (8010cb4 <LCD_DisplayStringLine+0x74>)
 8010c94:	681b      	ldr	r3, [r3, #0]
 8010c96:	889b      	ldrh	r3, [r3, #4]
 8010c98:	4299      	cmp	r1, r3
 8010c9a:	bf2c      	ite	cs
 8010c9c:	2301      	movcs	r3, #1
 8010c9e:	2300      	movcc	r3, #0
 8010ca0:	b2db      	uxtb	r3, r3
 8010ca2:	4013      	ands	r3, r2
 8010ca4:	b2db      	uxtb	r3, r3
 8010ca6:	2b00      	cmp	r3, #0
 8010ca8:	d1d3      	bne.n	8010c52 <LCD_DisplayStringLine+0x12>
  }
}
 8010caa:	bf00      	nop
 8010cac:	3710      	adds	r7, #16
 8010cae:	46bd      	mov	sp, r7
 8010cb0:	bd80      	pop	{r7, pc}
 8010cb2:	bf00      	nop
 8010cb4:	20002e28 	.word	0x20002e28

08010cb8 <LCD_SetDisplayWindow>:
  * @param  Height: display window height, can be a value from 0 to 320.
  * @param  Width: display window width, can be a value from 0 to 240.
  * @retval None
  */
void LCD_SetDisplayWindow(uint16_t Xpos, uint16_t Ypos, uint16_t Height, uint16_t Width)
{
 8010cb8:	b590      	push	{r4, r7, lr}
 8010cba:	b083      	sub	sp, #12
 8010cbc:	af00      	add	r7, sp, #0
 8010cbe:	4604      	mov	r4, r0
 8010cc0:	4608      	mov	r0, r1
 8010cc2:	4611      	mov	r1, r2
 8010cc4:	461a      	mov	r2, r3
 8010cc6:	4623      	mov	r3, r4
 8010cc8:	80fb      	strh	r3, [r7, #6]
 8010cca:	4603      	mov	r3, r0
 8010ccc:	80bb      	strh	r3, [r7, #4]
 8010cce:	460b      	mov	r3, r1
 8010cd0:	807b      	strh	r3, [r7, #2]
 8010cd2:	4613      	mov	r3, r2
 8010cd4:	803b      	strh	r3, [r7, #0]

  if (CurrentLayer == LCD_BACKGROUND_LAYER)
 8010cd6:	4b16      	ldr	r3, [pc, #88]	; (8010d30 <LCD_SetDisplayWindow+0x78>)
 8010cd8:	681b      	ldr	r3, [r3, #0]
 8010cda:	2b00      	cmp	r3, #0
 8010cdc:	d112      	bne.n	8010d04 <LCD_SetDisplayWindow+0x4c>
  { 
    /* reconfigure the layer1 position */
    LTDC_LayerPosition(LTDC_Layer1, Xpos, Ypos);
 8010cde:	88ba      	ldrh	r2, [r7, #4]
 8010ce0:	88fb      	ldrh	r3, [r7, #6]
 8010ce2:	4619      	mov	r1, r3
 8010ce4:	4813      	ldr	r0, [pc, #76]	; (8010d34 <LCD_SetDisplayWindow+0x7c>)
 8010ce6:	f7f6 fef6 	bl	8007ad6 <LTDC_LayerPosition>
    LTDC_ReloadConfig(LTDC_IMReload);
 8010cea:	2001      	movs	r0, #1
 8010cec:	f7f6 fcf8 	bl	80076e0 <LTDC_ReloadConfig>
    
    /* reconfigure the layer1 size */
    LTDC_LayerSize(LTDC_Layer1, Width, Height);
 8010cf0:	883b      	ldrh	r3, [r7, #0]
 8010cf2:	887a      	ldrh	r2, [r7, #2]
 8010cf4:	4619      	mov	r1, r3
 8010cf6:	480f      	ldr	r0, [pc, #60]	; (8010d34 <LCD_SetDisplayWindow+0x7c>)
 8010cf8:	f7f6 ff79 	bl	8007bee <LTDC_LayerSize>
    LTDC_ReloadConfig(LTDC_IMReload);
 8010cfc:	2001      	movs	r0, #1
 8010cfe:	f7f6 fcef 	bl	80076e0 <LTDC_ReloadConfig>
   
   /* reconfigure the layer2 size */
    LTDC_LayerSize(LTDC_Layer2, Width, Height);
    LTDC_ReloadConfig(LTDC_IMReload);
  }
}
 8010d02:	e011      	b.n	8010d28 <LCD_SetDisplayWindow+0x70>
    LTDC_LayerPosition(LTDC_Layer2, Xpos, Ypos);
 8010d04:	88ba      	ldrh	r2, [r7, #4]
 8010d06:	88fb      	ldrh	r3, [r7, #6]
 8010d08:	4619      	mov	r1, r3
 8010d0a:	480b      	ldr	r0, [pc, #44]	; (8010d38 <LCD_SetDisplayWindow+0x80>)
 8010d0c:	f7f6 fee3 	bl	8007ad6 <LTDC_LayerPosition>
    LTDC_ReloadConfig(LTDC_IMReload); 
 8010d10:	2001      	movs	r0, #1
 8010d12:	f7f6 fce5 	bl	80076e0 <LTDC_ReloadConfig>
    LTDC_LayerSize(LTDC_Layer2, Width, Height);
 8010d16:	883b      	ldrh	r3, [r7, #0]
 8010d18:	887a      	ldrh	r2, [r7, #2]
 8010d1a:	4619      	mov	r1, r3
 8010d1c:	4806      	ldr	r0, [pc, #24]	; (8010d38 <LCD_SetDisplayWindow+0x80>)
 8010d1e:	f7f6 ff66 	bl	8007bee <LTDC_LayerSize>
    LTDC_ReloadConfig(LTDC_IMReload);
 8010d22:	2001      	movs	r0, #1
 8010d24:	f7f6 fcdc 	bl	80076e0 <LTDC_ReloadConfig>
}
 8010d28:	bf00      	nop
 8010d2a:	370c      	adds	r7, #12
 8010d2c:	46bd      	mov	sp, r7
 8010d2e:	bd90      	pop	{r4, r7, pc}
 8010d30:	20002e30 	.word	0x20002e30
 8010d34:	40016884 	.word	0x40016884
 8010d38:	40016904 	.word	0x40016904

08010d3c <LCD_WindowModeDisable>:
  * @brief  Disables LCD Window mode.
  * @param  None
  * @retval None
  */
void LCD_WindowModeDisable(void)
{
 8010d3c:	b580      	push	{r7, lr}
 8010d3e:	af00      	add	r7, sp, #0
  LCD_SetDisplayWindow(0, 0, LCD_PIXEL_HEIGHT, LCD_PIXEL_WIDTH); 
 8010d40:	23f0      	movs	r3, #240	; 0xf0
 8010d42:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8010d46:	2100      	movs	r1, #0
 8010d48:	2000      	movs	r0, #0
 8010d4a:	f7ff ffb5 	bl	8010cb8 <LCD_SetDisplayWindow>
}
 8010d4e:	bf00      	nop
 8010d50:	bd80      	pop	{r7, pc}

08010d52 <LCD_DrawLine>:
  * @param Direction: line direction.
  *   This parameter can be one of the following values: LCD_DIR_HORIZONTAL or LCD_DIR_VERTICAL.
  * @retval None
  */
void LCD_DrawLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length, uint8_t Direction)
{
 8010d52:	b590      	push	{r4, r7, lr}
 8010d54:	b091      	sub	sp, #68	; 0x44
 8010d56:	af00      	add	r7, sp, #0
 8010d58:	4604      	mov	r4, r0
 8010d5a:	4608      	mov	r0, r1
 8010d5c:	4611      	mov	r1, r2
 8010d5e:	461a      	mov	r2, r3
 8010d60:	4623      	mov	r3, r4
 8010d62:	80fb      	strh	r3, [r7, #6]
 8010d64:	4603      	mov	r3, r0
 8010d66:	80bb      	strh	r3, [r7, #4]
 8010d68:	460b      	mov	r3, r1
 8010d6a:	807b      	strh	r3, [r7, #2]
 8010d6c:	4613      	mov	r3, r2
 8010d6e:	707b      	strb	r3, [r7, #1]
  DMA2D_InitTypeDef      DMA2D_InitStruct;
  
  uint32_t  Xaddress = 0;
 8010d70:	2300      	movs	r3, #0
 8010d72:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint16_t Red_Value = 0, Green_Value = 0, Blue_Value = 0;
 8010d74:	2300      	movs	r3, #0
 8010d76:	877b      	strh	r3, [r7, #58]	; 0x3a
 8010d78:	2300      	movs	r3, #0
 8010d7a:	873b      	strh	r3, [r7, #56]	; 0x38
 8010d7c:	2300      	movs	r3, #0
 8010d7e:	86fb      	strh	r3, [r7, #54]	; 0x36
  
  Xaddress = CurrentFrameBuffer + 2*(LCD_PIXEL_WIDTH*Ypos + Xpos);
 8010d80:	88ba      	ldrh	r2, [r7, #4]
 8010d82:	4613      	mov	r3, r2
 8010d84:	011b      	lsls	r3, r3, #4
 8010d86:	1a9b      	subs	r3, r3, r2
 8010d88:	011b      	lsls	r3, r3, #4
 8010d8a:	461a      	mov	r2, r3
 8010d8c:	88fb      	ldrh	r3, [r7, #6]
 8010d8e:	4413      	add	r3, r2
 8010d90:	005b      	lsls	r3, r3, #1
 8010d92:	461a      	mov	r2, r3
 8010d94:	4b23      	ldr	r3, [pc, #140]	; (8010e24 <LCD_DrawLine+0xd2>)
 8010d96:	681b      	ldr	r3, [r3, #0]
 8010d98:	4413      	add	r3, r2
 8010d9a:	63fb      	str	r3, [r7, #60]	; 0x3c
 
  Red_Value = (0xF800 & CurrentTextColor) >> 11;
 8010d9c:	4b22      	ldr	r3, [pc, #136]	; (8010e28 <LCD_DrawLine+0xd6>)
 8010d9e:	881b      	ldrh	r3, [r3, #0]
 8010da0:	0adb      	lsrs	r3, r3, #11
 8010da2:	877b      	strh	r3, [r7, #58]	; 0x3a
  Blue_Value = 0x001F & CurrentTextColor;
 8010da4:	4b20      	ldr	r3, [pc, #128]	; (8010e28 <LCD_DrawLine+0xd6>)
 8010da6:	881b      	ldrh	r3, [r3, #0]
 8010da8:	f003 031f 	and.w	r3, r3, #31
 8010dac:	86fb      	strh	r3, [r7, #54]	; 0x36
  Green_Value = (0x07E0 & CurrentTextColor) >> 5;
 8010dae:	4b1e      	ldr	r3, [pc, #120]	; (8010e28 <LCD_DrawLine+0xd6>)
 8010db0:	881b      	ldrh	r3, [r3, #0]
 8010db2:	095b      	lsrs	r3, r3, #5
 8010db4:	b29b      	uxth	r3, r3
 8010db6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010dba:	873b      	strh	r3, [r7, #56]	; 0x38

  /* Configure DMA2D */    
  DMA2D_DeInit();  
 8010dbc:	f7f3 fa8a 	bl	80042d4 <DMA2D_DeInit>
  DMA2D_InitStruct.DMA2D_Mode = DMA2D_R2M;       
 8010dc0:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8010dc4:	60fb      	str	r3, [r7, #12]
  DMA2D_InitStruct.DMA2D_CMode = DMA2D_RGB565;      
 8010dc6:	2302      	movs	r3, #2
 8010dc8:	613b      	str	r3, [r7, #16]
  DMA2D_InitStruct.DMA2D_OutputGreen = Green_Value;      
 8010dca:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8010dcc:	61bb      	str	r3, [r7, #24]
  DMA2D_InitStruct.DMA2D_OutputBlue = Blue_Value;     
 8010dce:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8010dd0:	617b      	str	r3, [r7, #20]
  DMA2D_InitStruct.DMA2D_OutputRed = Red_Value;                
 8010dd2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8010dd4:	61fb      	str	r3, [r7, #28]
  DMA2D_InitStruct.DMA2D_OutputAlpha = 0x0F;                  
 8010dd6:	230f      	movs	r3, #15
 8010dd8:	623b      	str	r3, [r7, #32]
  DMA2D_InitStruct.DMA2D_OutputMemoryAdd = Xaddress;                  
 8010dda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010ddc:	627b      	str	r3, [r7, #36]	; 0x24
  
  if(Direction == LCD_DIR_HORIZONTAL)
 8010dde:	787b      	ldrb	r3, [r7, #1]
 8010de0:	2b00      	cmp	r3, #0
 8010de2:	d106      	bne.n	8010df2 <LCD_DrawLine+0xa0>
  {                                                      
    DMA2D_InitStruct.DMA2D_OutputOffset = 0;                
 8010de4:	2300      	movs	r3, #0
 8010de6:	62bb      	str	r3, [r7, #40]	; 0x28
    DMA2D_InitStruct.DMA2D_NumberOfLine = 1;            
 8010de8:	2301      	movs	r3, #1
 8010dea:	62fb      	str	r3, [r7, #44]	; 0x2c
    DMA2D_InitStruct.DMA2D_PixelPerLine = Length; 
 8010dec:	887b      	ldrh	r3, [r7, #2]
 8010dee:	633b      	str	r3, [r7, #48]	; 0x30
 8010df0:	e005      	b.n	8010dfe <LCD_DrawLine+0xac>
  }
  else
  {                                                            
    DMA2D_InitStruct.DMA2D_OutputOffset = LCD_PIXEL_WIDTH - 1;                
 8010df2:	23ef      	movs	r3, #239	; 0xef
 8010df4:	62bb      	str	r3, [r7, #40]	; 0x28
    DMA2D_InitStruct.DMA2D_NumberOfLine = Length;            
 8010df6:	887b      	ldrh	r3, [r7, #2]
 8010df8:	62fb      	str	r3, [r7, #44]	; 0x2c
    DMA2D_InitStruct.DMA2D_PixelPerLine = 1;  
 8010dfa:	2301      	movs	r3, #1
 8010dfc:	633b      	str	r3, [r7, #48]	; 0x30
  }
  
  DMA2D_Init(&DMA2D_InitStruct);  
 8010dfe:	f107 030c 	add.w	r3, r7, #12
 8010e02:	4618      	mov	r0, r3
 8010e04:	f7f3 fa74 	bl	80042f0 <DMA2D_Init>
  
  /* Start Transfer */ 
  DMA2D_StartTransfer();  
 8010e08:	f7f3 fb4a 	bl	80044a0 <DMA2D_StartTransfer>
  /* Wait for CTC Flag activation */
  while(DMA2D_GetFlagStatus(DMA2D_FLAG_TC) == RESET)
 8010e0c:	bf00      	nop
 8010e0e:	2002      	movs	r0, #2
 8010e10:	f7f3 fd50 	bl	80048b4 <DMA2D_GetFlagStatus>
 8010e14:	4603      	mov	r3, r0
 8010e16:	2b00      	cmp	r3, #0
 8010e18:	d0f9      	beq.n	8010e0e <LCD_DrawLine+0xbc>
  {
  }
  
}
 8010e1a:	bf00      	nop
 8010e1c:	3744      	adds	r7, #68	; 0x44
 8010e1e:	46bd      	mov	sp, r7
 8010e20:	bd90      	pop	{r4, r7, pc}
 8010e22:	bf00      	nop
 8010e24:	200000d0 	.word	0x200000d0
 8010e28:	20002e2c 	.word	0x20002e2c

08010e2c <LCD_DrawRect>:
  * @param  Height: display rectangle height, can be a value from 0 to 320.
  * @param  Width: display rectangle width, can be a value from 0 to 240.
  * @retval None
  */
void LCD_DrawRect(uint16_t Xpos, uint16_t Ypos, uint16_t Height, uint16_t Width)
{
 8010e2c:	b590      	push	{r4, r7, lr}
 8010e2e:	b083      	sub	sp, #12
 8010e30:	af00      	add	r7, sp, #0
 8010e32:	4604      	mov	r4, r0
 8010e34:	4608      	mov	r0, r1
 8010e36:	4611      	mov	r1, r2
 8010e38:	461a      	mov	r2, r3
 8010e3a:	4623      	mov	r3, r4
 8010e3c:	80fb      	strh	r3, [r7, #6]
 8010e3e:	4603      	mov	r3, r0
 8010e40:	80bb      	strh	r3, [r7, #4]
 8010e42:	460b      	mov	r3, r1
 8010e44:	807b      	strh	r3, [r7, #2]
 8010e46:	4613      	mov	r3, r2
 8010e48:	803b      	strh	r3, [r7, #0]
  /* draw horizontal lines */
  LCD_DrawLine(Xpos, Ypos, Width, LCD_DIR_HORIZONTAL);
 8010e4a:	883a      	ldrh	r2, [r7, #0]
 8010e4c:	88b9      	ldrh	r1, [r7, #4]
 8010e4e:	88f8      	ldrh	r0, [r7, #6]
 8010e50:	2300      	movs	r3, #0
 8010e52:	f7ff ff7e 	bl	8010d52 <LCD_DrawLine>
  LCD_DrawLine(Xpos, (Ypos+ Height), Width, LCD_DIR_HORIZONTAL);
 8010e56:	88ba      	ldrh	r2, [r7, #4]
 8010e58:	887b      	ldrh	r3, [r7, #2]
 8010e5a:	4413      	add	r3, r2
 8010e5c:	b299      	uxth	r1, r3
 8010e5e:	883a      	ldrh	r2, [r7, #0]
 8010e60:	88f8      	ldrh	r0, [r7, #6]
 8010e62:	2300      	movs	r3, #0
 8010e64:	f7ff ff75 	bl	8010d52 <LCD_DrawLine>
  
  /* draw vertical lines */
  LCD_DrawLine(Xpos, Ypos, Height, LCD_DIR_VERTICAL);
 8010e68:	887a      	ldrh	r2, [r7, #2]
 8010e6a:	88b9      	ldrh	r1, [r7, #4]
 8010e6c:	88f8      	ldrh	r0, [r7, #6]
 8010e6e:	2301      	movs	r3, #1
 8010e70:	f7ff ff6f 	bl	8010d52 <LCD_DrawLine>
  LCD_DrawLine((Xpos + Width), Ypos, Height, LCD_DIR_VERTICAL);
 8010e74:	88fa      	ldrh	r2, [r7, #6]
 8010e76:	883b      	ldrh	r3, [r7, #0]
 8010e78:	4413      	add	r3, r2
 8010e7a:	b298      	uxth	r0, r3
 8010e7c:	887a      	ldrh	r2, [r7, #2]
 8010e7e:	88b9      	ldrh	r1, [r7, #4]
 8010e80:	2301      	movs	r3, #1
 8010e82:	f7ff ff66 	bl	8010d52 <LCD_DrawLine>
}
 8010e86:	bf00      	nop
 8010e88:	370c      	adds	r7, #12
 8010e8a:	46bd      	mov	sp, r7
 8010e8c:	bd90      	pop	{r4, r7, pc}

08010e8e <LCD_DrawCircle>:
  * @param  Ypos: specifies the Y position, can be a value from 0 to 320.
  * @param  Radius: radius of the circle.
  * @retval None
  */
void LCD_DrawCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 8010e8e:	b480      	push	{r7}
 8010e90:	b087      	sub	sp, #28
 8010e92:	af00      	add	r7, sp, #0
 8010e94:	4603      	mov	r3, r0
 8010e96:	80fb      	strh	r3, [r7, #6]
 8010e98:	460b      	mov	r3, r1
 8010e9a:	80bb      	strh	r3, [r7, #4]
 8010e9c:	4613      	mov	r3, r2
 8010e9e:	807b      	strh	r3, [r7, #2]
    int x = -Radius, y = 0, err = 2-2*Radius, e2;
 8010ea0:	887b      	ldrh	r3, [r7, #2]
 8010ea2:	425b      	negs	r3, r3
 8010ea4:	617b      	str	r3, [r7, #20]
 8010ea6:	2300      	movs	r3, #0
 8010ea8:	613b      	str	r3, [r7, #16]
 8010eaa:	887b      	ldrh	r3, [r7, #2]
 8010eac:	f1c3 0301 	rsb	r3, r3, #1
 8010eb0:	005b      	lsls	r3, r3, #1
 8010eb2:	60fb      	str	r3, [r7, #12]
    do {
        *(__IO uint16_t*) (CurrentFrameBuffer + (2*((Xpos-x) + LCD_PIXEL_WIDTH*(Ypos+y)))) = CurrentTextColor; 
 8010eb4:	88fa      	ldrh	r2, [r7, #6]
 8010eb6:	697b      	ldr	r3, [r7, #20]
 8010eb8:	1ad1      	subs	r1, r2, r3
 8010eba:	88ba      	ldrh	r2, [r7, #4]
 8010ebc:	693b      	ldr	r3, [r7, #16]
 8010ebe:	441a      	add	r2, r3
 8010ec0:	4613      	mov	r3, r2
 8010ec2:	011b      	lsls	r3, r3, #4
 8010ec4:	1a9b      	subs	r3, r3, r2
 8010ec6:	011b      	lsls	r3, r3, #4
 8010ec8:	440b      	add	r3, r1
 8010eca:	005b      	lsls	r3, r3, #1
 8010ecc:	461a      	mov	r2, r3
 8010ece:	4b39      	ldr	r3, [pc, #228]	; (8010fb4 <LCD_DrawCircle+0x126>)
 8010ed0:	681b      	ldr	r3, [r3, #0]
 8010ed2:	4413      	add	r3, r2
 8010ed4:	461a      	mov	r2, r3
 8010ed6:	4b38      	ldr	r3, [pc, #224]	; (8010fb8 <LCD_DrawCircle+0x12a>)
 8010ed8:	881b      	ldrh	r3, [r3, #0]
 8010eda:	8013      	strh	r3, [r2, #0]
        *(__IO uint16_t*) (CurrentFrameBuffer + (2*((Xpos+x) + LCD_PIXEL_WIDTH*(Ypos+y)))) = CurrentTextColor;
 8010edc:	88fa      	ldrh	r2, [r7, #6]
 8010ede:	697b      	ldr	r3, [r7, #20]
 8010ee0:	18d1      	adds	r1, r2, r3
 8010ee2:	88ba      	ldrh	r2, [r7, #4]
 8010ee4:	693b      	ldr	r3, [r7, #16]
 8010ee6:	441a      	add	r2, r3
 8010ee8:	4613      	mov	r3, r2
 8010eea:	011b      	lsls	r3, r3, #4
 8010eec:	1a9b      	subs	r3, r3, r2
 8010eee:	011b      	lsls	r3, r3, #4
 8010ef0:	440b      	add	r3, r1
 8010ef2:	005b      	lsls	r3, r3, #1
 8010ef4:	461a      	mov	r2, r3
 8010ef6:	4b2f      	ldr	r3, [pc, #188]	; (8010fb4 <LCD_DrawCircle+0x126>)
 8010ef8:	681b      	ldr	r3, [r3, #0]
 8010efa:	4413      	add	r3, r2
 8010efc:	461a      	mov	r2, r3
 8010efe:	4b2e      	ldr	r3, [pc, #184]	; (8010fb8 <LCD_DrawCircle+0x12a>)
 8010f00:	881b      	ldrh	r3, [r3, #0]
 8010f02:	8013      	strh	r3, [r2, #0]
        *(__IO uint16_t*) (CurrentFrameBuffer + (2*((Xpos+x) + LCD_PIXEL_WIDTH*(Ypos-y)))) = CurrentTextColor;
 8010f04:	88fa      	ldrh	r2, [r7, #6]
 8010f06:	697b      	ldr	r3, [r7, #20]
 8010f08:	18d1      	adds	r1, r2, r3
 8010f0a:	88ba      	ldrh	r2, [r7, #4]
 8010f0c:	693b      	ldr	r3, [r7, #16]
 8010f0e:	1ad2      	subs	r2, r2, r3
 8010f10:	4613      	mov	r3, r2
 8010f12:	011b      	lsls	r3, r3, #4
 8010f14:	1a9b      	subs	r3, r3, r2
 8010f16:	011b      	lsls	r3, r3, #4
 8010f18:	440b      	add	r3, r1
 8010f1a:	005b      	lsls	r3, r3, #1
 8010f1c:	461a      	mov	r2, r3
 8010f1e:	4b25      	ldr	r3, [pc, #148]	; (8010fb4 <LCD_DrawCircle+0x126>)
 8010f20:	681b      	ldr	r3, [r3, #0]
 8010f22:	4413      	add	r3, r2
 8010f24:	461a      	mov	r2, r3
 8010f26:	4b24      	ldr	r3, [pc, #144]	; (8010fb8 <LCD_DrawCircle+0x12a>)
 8010f28:	881b      	ldrh	r3, [r3, #0]
 8010f2a:	8013      	strh	r3, [r2, #0]
        *(__IO uint16_t*) (CurrentFrameBuffer + (2*((Xpos-x) + LCD_PIXEL_WIDTH*(Ypos-y)))) = CurrentTextColor;
 8010f2c:	88fa      	ldrh	r2, [r7, #6]
 8010f2e:	697b      	ldr	r3, [r7, #20]
 8010f30:	1ad1      	subs	r1, r2, r3
 8010f32:	88ba      	ldrh	r2, [r7, #4]
 8010f34:	693b      	ldr	r3, [r7, #16]
 8010f36:	1ad2      	subs	r2, r2, r3
 8010f38:	4613      	mov	r3, r2
 8010f3a:	011b      	lsls	r3, r3, #4
 8010f3c:	1a9b      	subs	r3, r3, r2
 8010f3e:	011b      	lsls	r3, r3, #4
 8010f40:	440b      	add	r3, r1
 8010f42:	005b      	lsls	r3, r3, #1
 8010f44:	461a      	mov	r2, r3
 8010f46:	4b1b      	ldr	r3, [pc, #108]	; (8010fb4 <LCD_DrawCircle+0x126>)
 8010f48:	681b      	ldr	r3, [r3, #0]
 8010f4a:	4413      	add	r3, r2
 8010f4c:	461a      	mov	r2, r3
 8010f4e:	4b1a      	ldr	r3, [pc, #104]	; (8010fb8 <LCD_DrawCircle+0x12a>)
 8010f50:	881b      	ldrh	r3, [r3, #0]
 8010f52:	8013      	strh	r3, [r2, #0]
      
        e2 = err;
 8010f54:	68fb      	ldr	r3, [r7, #12]
 8010f56:	60bb      	str	r3, [r7, #8]
        if (e2 <= y) {
 8010f58:	68ba      	ldr	r2, [r7, #8]
 8010f5a:	693b      	ldr	r3, [r7, #16]
 8010f5c:	429a      	cmp	r2, r3
 8010f5e:	dc13      	bgt.n	8010f88 <LCD_DrawCircle+0xfa>
            err += ++y*2+1;
 8010f60:	693b      	ldr	r3, [r7, #16]
 8010f62:	3301      	adds	r3, #1
 8010f64:	613b      	str	r3, [r7, #16]
 8010f66:	693b      	ldr	r3, [r7, #16]
 8010f68:	005b      	lsls	r3, r3, #1
 8010f6a:	3301      	adds	r3, #1
 8010f6c:	68fa      	ldr	r2, [r7, #12]
 8010f6e:	4413      	add	r3, r2
 8010f70:	60fb      	str	r3, [r7, #12]
            if (-x == y && e2 <= x) e2 = 0;
 8010f72:	697b      	ldr	r3, [r7, #20]
 8010f74:	425b      	negs	r3, r3
 8010f76:	693a      	ldr	r2, [r7, #16]
 8010f78:	429a      	cmp	r2, r3
 8010f7a:	d105      	bne.n	8010f88 <LCD_DrawCircle+0xfa>
 8010f7c:	68ba      	ldr	r2, [r7, #8]
 8010f7e:	697b      	ldr	r3, [r7, #20]
 8010f80:	429a      	cmp	r2, r3
 8010f82:	dc01      	bgt.n	8010f88 <LCD_DrawCircle+0xfa>
 8010f84:	2300      	movs	r3, #0
 8010f86:	60bb      	str	r3, [r7, #8]
        }
        if (e2 > x) err += ++x*2+1;
 8010f88:	68ba      	ldr	r2, [r7, #8]
 8010f8a:	697b      	ldr	r3, [r7, #20]
 8010f8c:	429a      	cmp	r2, r3
 8010f8e:	dd08      	ble.n	8010fa2 <LCD_DrawCircle+0x114>
 8010f90:	697b      	ldr	r3, [r7, #20]
 8010f92:	3301      	adds	r3, #1
 8010f94:	617b      	str	r3, [r7, #20]
 8010f96:	697b      	ldr	r3, [r7, #20]
 8010f98:	005b      	lsls	r3, r3, #1
 8010f9a:	3301      	adds	r3, #1
 8010f9c:	68fa      	ldr	r2, [r7, #12]
 8010f9e:	4413      	add	r3, r2
 8010fa0:	60fb      	str	r3, [r7, #12]
    }
    while (x <= 0);
 8010fa2:	697b      	ldr	r3, [r7, #20]
 8010fa4:	2b00      	cmp	r3, #0
 8010fa6:	dd85      	ble.n	8010eb4 <LCD_DrawCircle+0x26>
}
 8010fa8:	bf00      	nop
 8010faa:	371c      	adds	r7, #28
 8010fac:	46bd      	mov	sp, r7
 8010fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fb2:	4770      	bx	lr
 8010fb4:	200000d0 	.word	0x200000d0
 8010fb8:	20002e2c 	.word	0x20002e2c

08010fbc <LCD_DrawFullEllipse>:
  * @param  Radius: minor radius of ellipse.
  * @param  Radius2: major radius of ellipse.  
  * @retval None
  */
void LCD_DrawFullEllipse(int Xpos, int Ypos, int Radius, int Radius2)
{
 8010fbc:	b580      	push	{r7, lr}
 8010fbe:	b08c      	sub	sp, #48	; 0x30
 8010fc0:	af00      	add	r7, sp, #0
 8010fc2:	60f8      	str	r0, [r7, #12]
 8010fc4:	60b9      	str	r1, [r7, #8]
 8010fc6:	607a      	str	r2, [r7, #4]
 8010fc8:	603b      	str	r3, [r7, #0]
  int x = -Radius, y = 0, err = 2-2*Radius, e2;
 8010fca:	687b      	ldr	r3, [r7, #4]
 8010fcc:	425b      	negs	r3, r3
 8010fce:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010fd0:	2300      	movs	r3, #0
 8010fd2:	62bb      	str	r3, [r7, #40]	; 0x28
 8010fd4:	687b      	ldr	r3, [r7, #4]
 8010fd6:	f1c3 0301 	rsb	r3, r3, #1
 8010fda:	005b      	lsls	r3, r3, #1
 8010fdc:	627b      	str	r3, [r7, #36]	; 0x24
  float K = 0, rad1 = 0, rad2 = 0;
 8010fde:	f04f 0300 	mov.w	r3, #0
 8010fe2:	61fb      	str	r3, [r7, #28]
 8010fe4:	f04f 0300 	mov.w	r3, #0
 8010fe8:	61bb      	str	r3, [r7, #24]
 8010fea:	f04f 0300 	mov.w	r3, #0
 8010fee:	617b      	str	r3, [r7, #20]
  
  rad1 = Radius;
 8010ff0:	687b      	ldr	r3, [r7, #4]
 8010ff2:	ee07 3a90 	vmov	s15, r3
 8010ff6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010ffa:	edc7 7a06 	vstr	s15, [r7, #24]
  rad2 = Radius2;
 8010ffe:	683b      	ldr	r3, [r7, #0]
 8011000:	ee07 3a90 	vmov	s15, r3
 8011004:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011008:	edc7 7a05 	vstr	s15, [r7, #20]
  
  if (Radius > Radius2)
 801100c:	687a      	ldr	r2, [r7, #4]
 801100e:	683b      	ldr	r3, [r7, #0]
 8011010:	429a      	cmp	r2, r3
 8011012:	f340 808e 	ble.w	8011132 <LCD_DrawFullEllipse+0x176>
  { 
    do 
    {
      K = (float)(rad1/rad2);
 8011016:	edd7 6a06 	vldr	s13, [r7, #24]
 801101a:	ed97 7a05 	vldr	s14, [r7, #20]
 801101e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011022:	edc7 7a07 	vstr	s15, [r7, #28]
      LCD_DrawLine((Xpos+x), (Ypos-(uint16_t)(y/K)), (2*(uint16_t)(y/K) + 1), LCD_DIR_VERTICAL);
 8011026:	68fb      	ldr	r3, [r7, #12]
 8011028:	b29a      	uxth	r2, r3
 801102a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801102c:	b29b      	uxth	r3, r3
 801102e:	4413      	add	r3, r2
 8011030:	b298      	uxth	r0, r3
 8011032:	68bb      	ldr	r3, [r7, #8]
 8011034:	b29a      	uxth	r2, r3
 8011036:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011038:	ee07 3a90 	vmov	s15, r3
 801103c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8011040:	ed97 7a07 	vldr	s14, [r7, #28]
 8011044:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011048:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801104c:	ee17 3a90 	vmov	r3, s15
 8011050:	b29b      	uxth	r3, r3
 8011052:	1ad3      	subs	r3, r2, r3
 8011054:	b299      	uxth	r1, r3
 8011056:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011058:	ee07 3a90 	vmov	s15, r3
 801105c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8011060:	ed97 7a07 	vldr	s14, [r7, #28]
 8011064:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011068:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801106c:	ee17 3a90 	vmov	r3, s15
 8011070:	b29b      	uxth	r3, r3
 8011072:	005b      	lsls	r3, r3, #1
 8011074:	b29b      	uxth	r3, r3
 8011076:	3301      	adds	r3, #1
 8011078:	b29a      	uxth	r2, r3
 801107a:	2301      	movs	r3, #1
 801107c:	f7ff fe69 	bl	8010d52 <LCD_DrawLine>
      LCD_DrawLine((Xpos-x), (Ypos-(uint16_t)(y/K)), (2*(uint16_t)(y/K) + 1), LCD_DIR_VERTICAL);
 8011080:	68fb      	ldr	r3, [r7, #12]
 8011082:	b29a      	uxth	r2, r3
 8011084:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011086:	b29b      	uxth	r3, r3
 8011088:	1ad3      	subs	r3, r2, r3
 801108a:	b298      	uxth	r0, r3
 801108c:	68bb      	ldr	r3, [r7, #8]
 801108e:	b29a      	uxth	r2, r3
 8011090:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011092:	ee07 3a90 	vmov	s15, r3
 8011096:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 801109a:	ed97 7a07 	vldr	s14, [r7, #28]
 801109e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80110a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80110a6:	ee17 3a90 	vmov	r3, s15
 80110aa:	b29b      	uxth	r3, r3
 80110ac:	1ad3      	subs	r3, r2, r3
 80110ae:	b299      	uxth	r1, r3
 80110b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80110b2:	ee07 3a90 	vmov	s15, r3
 80110b6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80110ba:	ed97 7a07 	vldr	s14, [r7, #28]
 80110be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80110c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80110c6:	ee17 3a90 	vmov	r3, s15
 80110ca:	b29b      	uxth	r3, r3
 80110cc:	005b      	lsls	r3, r3, #1
 80110ce:	b29b      	uxth	r3, r3
 80110d0:	3301      	adds	r3, #1
 80110d2:	b29a      	uxth	r2, r3
 80110d4:	2301      	movs	r3, #1
 80110d6:	f7ff fe3c 	bl	8010d52 <LCD_DrawLine>
      
      e2 = err;
 80110da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110dc:	623b      	str	r3, [r7, #32]
      if (e2 <= y) 
 80110de:	6a3a      	ldr	r2, [r7, #32]
 80110e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80110e2:	429a      	cmp	r2, r3
 80110e4:	dc13      	bgt.n	801110e <LCD_DrawFullEllipse+0x152>
      {
        err += ++y*2+1;
 80110e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80110e8:	3301      	adds	r3, #1
 80110ea:	62bb      	str	r3, [r7, #40]	; 0x28
 80110ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80110ee:	005b      	lsls	r3, r3, #1
 80110f0:	3301      	adds	r3, #1
 80110f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80110f4:	4413      	add	r3, r2
 80110f6:	627b      	str	r3, [r7, #36]	; 0x24
        if (-x == y && e2 <= x) e2 = 0;
 80110f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110fa:	425b      	negs	r3, r3
 80110fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80110fe:	429a      	cmp	r2, r3
 8011100:	d105      	bne.n	801110e <LCD_DrawFullEllipse+0x152>
 8011102:	6a3a      	ldr	r2, [r7, #32]
 8011104:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011106:	429a      	cmp	r2, r3
 8011108:	dc01      	bgt.n	801110e <LCD_DrawFullEllipse+0x152>
 801110a:	2300      	movs	r3, #0
 801110c:	623b      	str	r3, [r7, #32]
      }
      if (e2 > x) err += ++x*2+1;
 801110e:	6a3a      	ldr	r2, [r7, #32]
 8011110:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011112:	429a      	cmp	r2, r3
 8011114:	dd08      	ble.n	8011128 <LCD_DrawFullEllipse+0x16c>
 8011116:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011118:	3301      	adds	r3, #1
 801111a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801111c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801111e:	005b      	lsls	r3, r3, #1
 8011120:	3301      	adds	r3, #1
 8011122:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011124:	4413      	add	r3, r2
 8011126:	627b      	str	r3, [r7, #36]	; 0x24
      
    }
    while (x <= 0);
 8011128:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801112a:	2b00      	cmp	r3, #0
 801112c:	f77f af73 	ble.w	8011016 <LCD_DrawFullEllipse+0x5a>
      }
      if (e2 > y) err += ++y*2+1;
    }
    while (y <= 0);
  }
}
 8011130:	e091      	b.n	8011256 <LCD_DrawFullEllipse+0x29a>
    y = -Radius2; 
 8011132:	683b      	ldr	r3, [r7, #0]
 8011134:	425b      	negs	r3, r3
 8011136:	62bb      	str	r3, [r7, #40]	; 0x28
    x = 0;
 8011138:	2300      	movs	r3, #0
 801113a:	62fb      	str	r3, [r7, #44]	; 0x2c
      K = (float)(rad2/rad1);       
 801113c:	edd7 6a05 	vldr	s13, [r7, #20]
 8011140:	ed97 7a06 	vldr	s14, [r7, #24]
 8011144:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011148:	edc7 7a07 	vstr	s15, [r7, #28]
      LCD_DrawLine((Xpos-(uint16_t)(x/K)), (Ypos+y), (2*(uint16_t)(x/K) + 1), LCD_DIR_HORIZONTAL);
 801114c:	68fb      	ldr	r3, [r7, #12]
 801114e:	b29a      	uxth	r2, r3
 8011150:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011152:	ee07 3a90 	vmov	s15, r3
 8011156:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 801115a:	ed97 7a07 	vldr	s14, [r7, #28]
 801115e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011162:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011166:	ee17 3a90 	vmov	r3, s15
 801116a:	b29b      	uxth	r3, r3
 801116c:	1ad3      	subs	r3, r2, r3
 801116e:	b298      	uxth	r0, r3
 8011170:	68bb      	ldr	r3, [r7, #8]
 8011172:	b29a      	uxth	r2, r3
 8011174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011176:	b29b      	uxth	r3, r3
 8011178:	4413      	add	r3, r2
 801117a:	b299      	uxth	r1, r3
 801117c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801117e:	ee07 3a90 	vmov	s15, r3
 8011182:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8011186:	ed97 7a07 	vldr	s14, [r7, #28]
 801118a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801118e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011192:	ee17 3a90 	vmov	r3, s15
 8011196:	b29b      	uxth	r3, r3
 8011198:	005b      	lsls	r3, r3, #1
 801119a:	b29b      	uxth	r3, r3
 801119c:	3301      	adds	r3, #1
 801119e:	b29a      	uxth	r2, r3
 80111a0:	2300      	movs	r3, #0
 80111a2:	f7ff fdd6 	bl	8010d52 <LCD_DrawLine>
      LCD_DrawLine((Xpos-(uint16_t)(x/K)), (Ypos-y), (2*(uint16_t)(x/K) + 1), LCD_DIR_HORIZONTAL);
 80111a6:	68fb      	ldr	r3, [r7, #12]
 80111a8:	b29a      	uxth	r2, r3
 80111aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111ac:	ee07 3a90 	vmov	s15, r3
 80111b0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80111b4:	ed97 7a07 	vldr	s14, [r7, #28]
 80111b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80111bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80111c0:	ee17 3a90 	vmov	r3, s15
 80111c4:	b29b      	uxth	r3, r3
 80111c6:	1ad3      	subs	r3, r2, r3
 80111c8:	b298      	uxth	r0, r3
 80111ca:	68bb      	ldr	r3, [r7, #8]
 80111cc:	b29a      	uxth	r2, r3
 80111ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80111d0:	b29b      	uxth	r3, r3
 80111d2:	1ad3      	subs	r3, r2, r3
 80111d4:	b299      	uxth	r1, r3
 80111d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111d8:	ee07 3a90 	vmov	s15, r3
 80111dc:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80111e0:	ed97 7a07 	vldr	s14, [r7, #28]
 80111e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80111e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80111ec:	ee17 3a90 	vmov	r3, s15
 80111f0:	b29b      	uxth	r3, r3
 80111f2:	005b      	lsls	r3, r3, #1
 80111f4:	b29b      	uxth	r3, r3
 80111f6:	3301      	adds	r3, #1
 80111f8:	b29a      	uxth	r2, r3
 80111fa:	2300      	movs	r3, #0
 80111fc:	f7ff fda9 	bl	8010d52 <LCD_DrawLine>
      e2 = err;
 8011200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011202:	623b      	str	r3, [r7, #32]
      if (e2 <= x) 
 8011204:	6a3a      	ldr	r2, [r7, #32]
 8011206:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011208:	429a      	cmp	r2, r3
 801120a:	dc13      	bgt.n	8011234 <LCD_DrawFullEllipse+0x278>
        err += ++x*2+1;
 801120c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801120e:	3301      	adds	r3, #1
 8011210:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011212:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011214:	005b      	lsls	r3, r3, #1
 8011216:	3301      	adds	r3, #1
 8011218:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801121a:	4413      	add	r3, r2
 801121c:	627b      	str	r3, [r7, #36]	; 0x24
        if (-y == x && e2 <= y) e2 = 0;
 801121e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011220:	425b      	negs	r3, r3
 8011222:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011224:	429a      	cmp	r2, r3
 8011226:	d105      	bne.n	8011234 <LCD_DrawFullEllipse+0x278>
 8011228:	6a3a      	ldr	r2, [r7, #32]
 801122a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801122c:	429a      	cmp	r2, r3
 801122e:	dc01      	bgt.n	8011234 <LCD_DrawFullEllipse+0x278>
 8011230:	2300      	movs	r3, #0
 8011232:	623b      	str	r3, [r7, #32]
      if (e2 > y) err += ++y*2+1;
 8011234:	6a3a      	ldr	r2, [r7, #32]
 8011236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011238:	429a      	cmp	r2, r3
 801123a:	dd08      	ble.n	801124e <LCD_DrawFullEllipse+0x292>
 801123c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801123e:	3301      	adds	r3, #1
 8011240:	62bb      	str	r3, [r7, #40]	; 0x28
 8011242:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011244:	005b      	lsls	r3, r3, #1
 8011246:	3301      	adds	r3, #1
 8011248:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801124a:	4413      	add	r3, r2
 801124c:	627b      	str	r3, [r7, #36]	; 0x24
    while (y <= 0);
 801124e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011250:	2b00      	cmp	r3, #0
 8011252:	f77f af73 	ble.w	801113c <LCD_DrawFullEllipse+0x180>
}
 8011256:	bf00      	nop
 8011258:	3730      	adds	r7, #48	; 0x30
 801125a:	46bd      	mov	sp, r7
 801125c:	bd80      	pop	{r7, pc}

0801125e <LCD_DrawEllipse>:
  * @param  Radius: specifies Radius.
  * @param  Radius2: specifies Radius2.
  * @retval None
  */
void LCD_DrawEllipse(int Xpos, int Ypos, int Radius, int Radius2)
{
 801125e:	b480      	push	{r7}
 8011260:	b08d      	sub	sp, #52	; 0x34
 8011262:	af00      	add	r7, sp, #0
 8011264:	60f8      	str	r0, [r7, #12]
 8011266:	60b9      	str	r1, [r7, #8]
 8011268:	607a      	str	r2, [r7, #4]
 801126a:	603b      	str	r3, [r7, #0]
  int x = -Radius, y = 0, err = 2-2*Radius, e2;
 801126c:	687b      	ldr	r3, [r7, #4]
 801126e:	425b      	negs	r3, r3
 8011270:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011272:	2300      	movs	r3, #0
 8011274:	62bb      	str	r3, [r7, #40]	; 0x28
 8011276:	687b      	ldr	r3, [r7, #4]
 8011278:	f1c3 0301 	rsb	r3, r3, #1
 801127c:	005b      	lsls	r3, r3, #1
 801127e:	627b      	str	r3, [r7, #36]	; 0x24
  float K = 0, rad1 = 0, rad2 = 0;
 8011280:	f04f 0300 	mov.w	r3, #0
 8011284:	61fb      	str	r3, [r7, #28]
 8011286:	f04f 0300 	mov.w	r3, #0
 801128a:	61bb      	str	r3, [r7, #24]
 801128c:	f04f 0300 	mov.w	r3, #0
 8011290:	617b      	str	r3, [r7, #20]
   
  rad1 = Radius;
 8011292:	687b      	ldr	r3, [r7, #4]
 8011294:	ee07 3a90 	vmov	s15, r3
 8011298:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801129c:	edc7 7a06 	vstr	s15, [r7, #24]
  rad2 = Radius2;
 80112a0:	683b      	ldr	r3, [r7, #0]
 80112a2:	ee07 3a90 	vmov	s15, r3
 80112a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80112aa:	edc7 7a05 	vstr	s15, [r7, #20]
  
  if (Radius > Radius2)
 80112ae:	687a      	ldr	r2, [r7, #4]
 80112b0:	683b      	ldr	r3, [r7, #0]
 80112b2:	429a      	cmp	r2, r3
 80112b4:	f340 80bc 	ble.w	8011430 <LCD_DrawEllipse+0x1d2>
  { 
    do {
      K = (float)(rad1/rad2);
 80112b8:	edd7 6a06 	vldr	s13, [r7, #24]
 80112bc:	ed97 7a05 	vldr	s14, [r7, #20]
 80112c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80112c4:	edc7 7a07 	vstr	s15, [r7, #28]
      *(__IO uint16_t*) (CurrentFrameBuffer + (2*((Xpos-x) + LCD_PIXEL_WIDTH*(Ypos+(uint16_t)(y/K))))) = CurrentTextColor; 
 80112c8:	68fa      	ldr	r2, [r7, #12]
 80112ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80112cc:	1ad1      	subs	r1, r2, r3
 80112ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80112d0:	ee07 3a90 	vmov	s15, r3
 80112d4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80112d8:	ed97 7a07 	vldr	s14, [r7, #28]
 80112dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80112e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80112e4:	ee17 3a90 	vmov	r3, s15
 80112e8:	b29b      	uxth	r3, r3
 80112ea:	461a      	mov	r2, r3
 80112ec:	68bb      	ldr	r3, [r7, #8]
 80112ee:	441a      	add	r2, r3
 80112f0:	4613      	mov	r3, r2
 80112f2:	011b      	lsls	r3, r3, #4
 80112f4:	1a9b      	subs	r3, r3, r2
 80112f6:	011b      	lsls	r3, r3, #4
 80112f8:	440b      	add	r3, r1
 80112fa:	005b      	lsls	r3, r3, #1
 80112fc:	461a      	mov	r2, r3
 80112fe:	4baf      	ldr	r3, [pc, #700]	; (80115bc <LCD_DrawEllipse+0x35e>)
 8011300:	681b      	ldr	r3, [r3, #0]
 8011302:	4413      	add	r3, r2
 8011304:	461a      	mov	r2, r3
 8011306:	4bae      	ldr	r3, [pc, #696]	; (80115c0 <LCD_DrawEllipse+0x362>)
 8011308:	881b      	ldrh	r3, [r3, #0]
 801130a:	8013      	strh	r3, [r2, #0]
      *(__IO uint16_t*) (CurrentFrameBuffer + (2*((Xpos+x) + LCD_PIXEL_WIDTH*(Ypos+(uint16_t)(y/K))))) = CurrentTextColor;
 801130c:	68fa      	ldr	r2, [r7, #12]
 801130e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011310:	18d1      	adds	r1, r2, r3
 8011312:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011314:	ee07 3a90 	vmov	s15, r3
 8011318:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 801131c:	ed97 7a07 	vldr	s14, [r7, #28]
 8011320:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011324:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011328:	ee17 3a90 	vmov	r3, s15
 801132c:	b29b      	uxth	r3, r3
 801132e:	461a      	mov	r2, r3
 8011330:	68bb      	ldr	r3, [r7, #8]
 8011332:	441a      	add	r2, r3
 8011334:	4613      	mov	r3, r2
 8011336:	011b      	lsls	r3, r3, #4
 8011338:	1a9b      	subs	r3, r3, r2
 801133a:	011b      	lsls	r3, r3, #4
 801133c:	440b      	add	r3, r1
 801133e:	005b      	lsls	r3, r3, #1
 8011340:	461a      	mov	r2, r3
 8011342:	4b9e      	ldr	r3, [pc, #632]	; (80115bc <LCD_DrawEllipse+0x35e>)
 8011344:	681b      	ldr	r3, [r3, #0]
 8011346:	4413      	add	r3, r2
 8011348:	461a      	mov	r2, r3
 801134a:	4b9d      	ldr	r3, [pc, #628]	; (80115c0 <LCD_DrawEllipse+0x362>)
 801134c:	881b      	ldrh	r3, [r3, #0]
 801134e:	8013      	strh	r3, [r2, #0]
      *(__IO uint16_t*) (CurrentFrameBuffer + (2*((Xpos+x) + LCD_PIXEL_WIDTH*(Ypos-(uint16_t)(y/K))))) = CurrentTextColor;
 8011350:	68fa      	ldr	r2, [r7, #12]
 8011352:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011354:	18d1      	adds	r1, r2, r3
 8011356:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011358:	ee07 3a90 	vmov	s15, r3
 801135c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8011360:	ed97 7a07 	vldr	s14, [r7, #28]
 8011364:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011368:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801136c:	ee17 3a90 	vmov	r3, s15
 8011370:	b29b      	uxth	r3, r3
 8011372:	461a      	mov	r2, r3
 8011374:	68bb      	ldr	r3, [r7, #8]
 8011376:	1a9a      	subs	r2, r3, r2
 8011378:	4613      	mov	r3, r2
 801137a:	011b      	lsls	r3, r3, #4
 801137c:	1a9b      	subs	r3, r3, r2
 801137e:	011b      	lsls	r3, r3, #4
 8011380:	440b      	add	r3, r1
 8011382:	005b      	lsls	r3, r3, #1
 8011384:	461a      	mov	r2, r3
 8011386:	4b8d      	ldr	r3, [pc, #564]	; (80115bc <LCD_DrawEllipse+0x35e>)
 8011388:	681b      	ldr	r3, [r3, #0]
 801138a:	4413      	add	r3, r2
 801138c:	461a      	mov	r2, r3
 801138e:	4b8c      	ldr	r3, [pc, #560]	; (80115c0 <LCD_DrawEllipse+0x362>)
 8011390:	881b      	ldrh	r3, [r3, #0]
 8011392:	8013      	strh	r3, [r2, #0]
      *(__IO uint16_t*) (CurrentFrameBuffer + (2*((Xpos-x) + LCD_PIXEL_WIDTH*(Ypos-(uint16_t)(y/K))))) = CurrentTextColor;
 8011394:	68fa      	ldr	r2, [r7, #12]
 8011396:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011398:	1ad1      	subs	r1, r2, r3
 801139a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801139c:	ee07 3a90 	vmov	s15, r3
 80113a0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80113a4:	ed97 7a07 	vldr	s14, [r7, #28]
 80113a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80113ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80113b0:	ee17 3a90 	vmov	r3, s15
 80113b4:	b29b      	uxth	r3, r3
 80113b6:	461a      	mov	r2, r3
 80113b8:	68bb      	ldr	r3, [r7, #8]
 80113ba:	1a9a      	subs	r2, r3, r2
 80113bc:	4613      	mov	r3, r2
 80113be:	011b      	lsls	r3, r3, #4
 80113c0:	1a9b      	subs	r3, r3, r2
 80113c2:	011b      	lsls	r3, r3, #4
 80113c4:	440b      	add	r3, r1
 80113c6:	005b      	lsls	r3, r3, #1
 80113c8:	461a      	mov	r2, r3
 80113ca:	4b7c      	ldr	r3, [pc, #496]	; (80115bc <LCD_DrawEllipse+0x35e>)
 80113cc:	681b      	ldr	r3, [r3, #0]
 80113ce:	4413      	add	r3, r2
 80113d0:	461a      	mov	r2, r3
 80113d2:	4b7b      	ldr	r3, [pc, #492]	; (80115c0 <LCD_DrawEllipse+0x362>)
 80113d4:	881b      	ldrh	r3, [r3, #0]
 80113d6:	8013      	strh	r3, [r2, #0]
            
      e2 = err;
 80113d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113da:	623b      	str	r3, [r7, #32]
      if (e2 <= y) {
 80113dc:	6a3a      	ldr	r2, [r7, #32]
 80113de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80113e0:	429a      	cmp	r2, r3
 80113e2:	dc13      	bgt.n	801140c <LCD_DrawEllipse+0x1ae>
        err += ++y*2+1;
 80113e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80113e6:	3301      	adds	r3, #1
 80113e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80113ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80113ec:	005b      	lsls	r3, r3, #1
 80113ee:	3301      	adds	r3, #1
 80113f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80113f2:	4413      	add	r3, r2
 80113f4:	627b      	str	r3, [r7, #36]	; 0x24
        if (-x == y && e2 <= x) e2 = 0;
 80113f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80113f8:	425b      	negs	r3, r3
 80113fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80113fc:	429a      	cmp	r2, r3
 80113fe:	d105      	bne.n	801140c <LCD_DrawEllipse+0x1ae>
 8011400:	6a3a      	ldr	r2, [r7, #32]
 8011402:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011404:	429a      	cmp	r2, r3
 8011406:	dc01      	bgt.n	801140c <LCD_DrawEllipse+0x1ae>
 8011408:	2300      	movs	r3, #0
 801140a:	623b      	str	r3, [r7, #32]
      }
      if (e2 > x) err += ++x*2+1;
 801140c:	6a3a      	ldr	r2, [r7, #32]
 801140e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011410:	429a      	cmp	r2, r3
 8011412:	dd08      	ble.n	8011426 <LCD_DrawEllipse+0x1c8>
 8011414:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011416:	3301      	adds	r3, #1
 8011418:	62fb      	str	r3, [r7, #44]	; 0x2c
 801141a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801141c:	005b      	lsls	r3, r3, #1
 801141e:	3301      	adds	r3, #1
 8011420:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011422:	4413      	add	r3, r2
 8011424:	627b      	str	r3, [r7, #36]	; 0x24
    }
    while (x <= 0);
 8011426:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011428:	2b00      	cmp	r3, #0
 801142a:	f77f af45 	ble.w	80112b8 <LCD_DrawEllipse+0x5a>
      }
      if (e2 > y) err += ++y*2+1;     
    }
    while (y <= 0);
  }
}
 801142e:	e0bf      	b.n	80115b0 <LCD_DrawEllipse+0x352>
    y = -Radius2; 
 8011430:	683b      	ldr	r3, [r7, #0]
 8011432:	425b      	negs	r3, r3
 8011434:	62bb      	str	r3, [r7, #40]	; 0x28
    x = 0;
 8011436:	2300      	movs	r3, #0
 8011438:	62fb      	str	r3, [r7, #44]	; 0x2c
      K = (float)(rad2/rad1);
 801143a:	edd7 6a05 	vldr	s13, [r7, #20]
 801143e:	ed97 7a06 	vldr	s14, [r7, #24]
 8011442:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011446:	edc7 7a07 	vstr	s15, [r7, #28]
      *(__IO uint16_t*) (CurrentFrameBuffer + (2*((Xpos-(uint16_t)(x/K)) + LCD_PIXEL_WIDTH*(Ypos+y)))) = CurrentTextColor; 
 801144a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801144c:	ee07 3a90 	vmov	s15, r3
 8011450:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8011454:	ed97 7a07 	vldr	s14, [r7, #28]
 8011458:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801145c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011460:	ee17 3a90 	vmov	r3, s15
 8011464:	b29b      	uxth	r3, r3
 8011466:	461a      	mov	r2, r3
 8011468:	68fb      	ldr	r3, [r7, #12]
 801146a:	1a99      	subs	r1, r3, r2
 801146c:	68ba      	ldr	r2, [r7, #8]
 801146e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011470:	441a      	add	r2, r3
 8011472:	4613      	mov	r3, r2
 8011474:	011b      	lsls	r3, r3, #4
 8011476:	1a9b      	subs	r3, r3, r2
 8011478:	011b      	lsls	r3, r3, #4
 801147a:	440b      	add	r3, r1
 801147c:	005b      	lsls	r3, r3, #1
 801147e:	461a      	mov	r2, r3
 8011480:	4b4e      	ldr	r3, [pc, #312]	; (80115bc <LCD_DrawEllipse+0x35e>)
 8011482:	681b      	ldr	r3, [r3, #0]
 8011484:	4413      	add	r3, r2
 8011486:	461a      	mov	r2, r3
 8011488:	4b4d      	ldr	r3, [pc, #308]	; (80115c0 <LCD_DrawEllipse+0x362>)
 801148a:	881b      	ldrh	r3, [r3, #0]
 801148c:	8013      	strh	r3, [r2, #0]
      *(__IO uint16_t*) (CurrentFrameBuffer + (2*((Xpos+(uint16_t)(x/K)) + LCD_PIXEL_WIDTH*(Ypos+y)))) = CurrentTextColor;
 801148e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011490:	ee07 3a90 	vmov	s15, r3
 8011494:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8011498:	ed97 7a07 	vldr	s14, [r7, #28]
 801149c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80114a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80114a4:	ee17 3a90 	vmov	r3, s15
 80114a8:	b29b      	uxth	r3, r3
 80114aa:	461a      	mov	r2, r3
 80114ac:	68fb      	ldr	r3, [r7, #12]
 80114ae:	18d1      	adds	r1, r2, r3
 80114b0:	68ba      	ldr	r2, [r7, #8]
 80114b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80114b4:	441a      	add	r2, r3
 80114b6:	4613      	mov	r3, r2
 80114b8:	011b      	lsls	r3, r3, #4
 80114ba:	1a9b      	subs	r3, r3, r2
 80114bc:	011b      	lsls	r3, r3, #4
 80114be:	440b      	add	r3, r1
 80114c0:	005b      	lsls	r3, r3, #1
 80114c2:	461a      	mov	r2, r3
 80114c4:	4b3d      	ldr	r3, [pc, #244]	; (80115bc <LCD_DrawEllipse+0x35e>)
 80114c6:	681b      	ldr	r3, [r3, #0]
 80114c8:	4413      	add	r3, r2
 80114ca:	461a      	mov	r2, r3
 80114cc:	4b3c      	ldr	r3, [pc, #240]	; (80115c0 <LCD_DrawEllipse+0x362>)
 80114ce:	881b      	ldrh	r3, [r3, #0]
 80114d0:	8013      	strh	r3, [r2, #0]
      *(__IO uint16_t*) (CurrentFrameBuffer + (2*((Xpos+(uint16_t)(x/K)) + LCD_PIXEL_WIDTH*(Ypos-y)))) = CurrentTextColor;
 80114d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80114d4:	ee07 3a90 	vmov	s15, r3
 80114d8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80114dc:	ed97 7a07 	vldr	s14, [r7, #28]
 80114e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80114e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80114e8:	ee17 3a90 	vmov	r3, s15
 80114ec:	b29b      	uxth	r3, r3
 80114ee:	461a      	mov	r2, r3
 80114f0:	68fb      	ldr	r3, [r7, #12]
 80114f2:	18d1      	adds	r1, r2, r3
 80114f4:	68ba      	ldr	r2, [r7, #8]
 80114f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80114f8:	1ad2      	subs	r2, r2, r3
 80114fa:	4613      	mov	r3, r2
 80114fc:	011b      	lsls	r3, r3, #4
 80114fe:	1a9b      	subs	r3, r3, r2
 8011500:	011b      	lsls	r3, r3, #4
 8011502:	440b      	add	r3, r1
 8011504:	005b      	lsls	r3, r3, #1
 8011506:	461a      	mov	r2, r3
 8011508:	4b2c      	ldr	r3, [pc, #176]	; (80115bc <LCD_DrawEllipse+0x35e>)
 801150a:	681b      	ldr	r3, [r3, #0]
 801150c:	4413      	add	r3, r2
 801150e:	461a      	mov	r2, r3
 8011510:	4b2b      	ldr	r3, [pc, #172]	; (80115c0 <LCD_DrawEllipse+0x362>)
 8011512:	881b      	ldrh	r3, [r3, #0]
 8011514:	8013      	strh	r3, [r2, #0]
      *(__IO uint16_t*) (CurrentFrameBuffer + (2*((Xpos-(uint16_t)(x/K)) + LCD_PIXEL_WIDTH*(Ypos-y)))) = CurrentTextColor;
 8011516:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011518:	ee07 3a90 	vmov	s15, r3
 801151c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8011520:	ed97 7a07 	vldr	s14, [r7, #28]
 8011524:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011528:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801152c:	ee17 3a90 	vmov	r3, s15
 8011530:	b29b      	uxth	r3, r3
 8011532:	461a      	mov	r2, r3
 8011534:	68fb      	ldr	r3, [r7, #12]
 8011536:	1a99      	subs	r1, r3, r2
 8011538:	68ba      	ldr	r2, [r7, #8]
 801153a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801153c:	1ad2      	subs	r2, r2, r3
 801153e:	4613      	mov	r3, r2
 8011540:	011b      	lsls	r3, r3, #4
 8011542:	1a9b      	subs	r3, r3, r2
 8011544:	011b      	lsls	r3, r3, #4
 8011546:	440b      	add	r3, r1
 8011548:	005b      	lsls	r3, r3, #1
 801154a:	461a      	mov	r2, r3
 801154c:	4b1b      	ldr	r3, [pc, #108]	; (80115bc <LCD_DrawEllipse+0x35e>)
 801154e:	681b      	ldr	r3, [r3, #0]
 8011550:	4413      	add	r3, r2
 8011552:	461a      	mov	r2, r3
 8011554:	4b1a      	ldr	r3, [pc, #104]	; (80115c0 <LCD_DrawEllipse+0x362>)
 8011556:	881b      	ldrh	r3, [r3, #0]
 8011558:	8013      	strh	r3, [r2, #0]
      e2 = err;
 801155a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801155c:	623b      	str	r3, [r7, #32]
      if (e2 <= x) {
 801155e:	6a3a      	ldr	r2, [r7, #32]
 8011560:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011562:	429a      	cmp	r2, r3
 8011564:	dc13      	bgt.n	801158e <LCD_DrawEllipse+0x330>
        err += ++x*2+1;
 8011566:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011568:	3301      	adds	r3, #1
 801156a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801156c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801156e:	005b      	lsls	r3, r3, #1
 8011570:	3301      	adds	r3, #1
 8011572:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011574:	4413      	add	r3, r2
 8011576:	627b      	str	r3, [r7, #36]	; 0x24
        if (-y == x && e2 <= y) e2 = 0;
 8011578:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801157a:	425b      	negs	r3, r3
 801157c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801157e:	429a      	cmp	r2, r3
 8011580:	d105      	bne.n	801158e <LCD_DrawEllipse+0x330>
 8011582:	6a3a      	ldr	r2, [r7, #32]
 8011584:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011586:	429a      	cmp	r2, r3
 8011588:	dc01      	bgt.n	801158e <LCD_DrawEllipse+0x330>
 801158a:	2300      	movs	r3, #0
 801158c:	623b      	str	r3, [r7, #32]
      if (e2 > y) err += ++y*2+1;     
 801158e:	6a3a      	ldr	r2, [r7, #32]
 8011590:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011592:	429a      	cmp	r2, r3
 8011594:	dd08      	ble.n	80115a8 <LCD_DrawEllipse+0x34a>
 8011596:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011598:	3301      	adds	r3, #1
 801159a:	62bb      	str	r3, [r7, #40]	; 0x28
 801159c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801159e:	005b      	lsls	r3, r3, #1
 80115a0:	3301      	adds	r3, #1
 80115a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80115a4:	4413      	add	r3, r2
 80115a6:	627b      	str	r3, [r7, #36]	; 0x24
    while (y <= 0);
 80115a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80115aa:	2b00      	cmp	r3, #0
 80115ac:	f77f af45 	ble.w	801143a <LCD_DrawEllipse+0x1dc>
}
 80115b0:	bf00      	nop
 80115b2:	3734      	adds	r7, #52	; 0x34
 80115b4:	46bd      	mov	sp, r7
 80115b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115ba:	4770      	bx	lr
 80115bc:	200000d0 	.word	0x200000d0
 80115c0:	20002e2c 	.word	0x20002e2c

080115c4 <LCD_DrawMonoPict>:
  * @brief  Displays a mono-color picture.
  * @param  Pict: pointer to the picture array.
  * @retval None
  */
void LCD_DrawMonoPict(const uint32_t *Pict)
{
 80115c4:	b480      	push	{r7}
 80115c6:	b085      	sub	sp, #20
 80115c8:	af00      	add	r7, sp, #0
 80115ca:	6078      	str	r0, [r7, #4]
  uint32_t index = 0, counter = 0;
 80115cc:	2300      	movs	r3, #0
 80115ce:	60fb      	str	r3, [r7, #12]
 80115d0:	2300      	movs	r3, #0
 80115d2:	60bb      	str	r3, [r7, #8]
  
   
  for(index = 0; index < 2400; index++)
 80115d4:	2300      	movs	r3, #0
 80115d6:	60fb      	str	r3, [r7, #12]
 80115d8:	e024      	b.n	8011624 <LCD_DrawMonoPict+0x60>
  {
    for(counter = 0; counter < 32; counter++)
 80115da:	2300      	movs	r3, #0
 80115dc:	60bb      	str	r3, [r7, #8]
 80115de:	e01b      	b.n	8011618 <LCD_DrawMonoPict+0x54>
    {
      if((Pict[index] & (1 << counter)) == 0x00)
 80115e0:	68fb      	ldr	r3, [r7, #12]
 80115e2:	009b      	lsls	r3, r3, #2
 80115e4:	687a      	ldr	r2, [r7, #4]
 80115e6:	4413      	add	r3, r2
 80115e8:	681b      	ldr	r3, [r3, #0]
 80115ea:	2101      	movs	r1, #1
 80115ec:	68ba      	ldr	r2, [r7, #8]
 80115ee:	fa01 f202 	lsl.w	r2, r1, r2
 80115f2:	4013      	ands	r3, r2
 80115f4:	2b00      	cmp	r3, #0
 80115f6:	d106      	bne.n	8011606 <LCD_DrawMonoPict+0x42>
      {
        *(__IO uint16_t*)(CurrentFrameBuffer) = CurrentBackColor;
 80115f8:	4b0f      	ldr	r3, [pc, #60]	; (8011638 <LCD_DrawMonoPict+0x74>)
 80115fa:	681b      	ldr	r3, [r3, #0]
 80115fc:	461a      	mov	r2, r3
 80115fe:	4b0f      	ldr	r3, [pc, #60]	; (801163c <LCD_DrawMonoPict+0x78>)
 8011600:	881b      	ldrh	r3, [r3, #0]
 8011602:	8013      	strh	r3, [r2, #0]
 8011604:	e005      	b.n	8011612 <LCD_DrawMonoPict+0x4e>
      }
      else
      {
        *(__IO uint16_t*)(CurrentFrameBuffer) = CurrentTextColor;
 8011606:	4b0c      	ldr	r3, [pc, #48]	; (8011638 <LCD_DrawMonoPict+0x74>)
 8011608:	681b      	ldr	r3, [r3, #0]
 801160a:	461a      	mov	r2, r3
 801160c:	4b0c      	ldr	r3, [pc, #48]	; (8011640 <LCD_DrawMonoPict+0x7c>)
 801160e:	881b      	ldrh	r3, [r3, #0]
 8011610:	8013      	strh	r3, [r2, #0]
    for(counter = 0; counter < 32; counter++)
 8011612:	68bb      	ldr	r3, [r7, #8]
 8011614:	3301      	adds	r3, #1
 8011616:	60bb      	str	r3, [r7, #8]
 8011618:	68bb      	ldr	r3, [r7, #8]
 801161a:	2b1f      	cmp	r3, #31
 801161c:	d9e0      	bls.n	80115e0 <LCD_DrawMonoPict+0x1c>
  for(index = 0; index < 2400; index++)
 801161e:	68fb      	ldr	r3, [r7, #12]
 8011620:	3301      	adds	r3, #1
 8011622:	60fb      	str	r3, [r7, #12]
 8011624:	68fb      	ldr	r3, [r7, #12]
 8011626:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
 801162a:	d3d6      	bcc.n	80115da <LCD_DrawMonoPict+0x16>
      }
    }
  }
}
 801162c:	bf00      	nop
 801162e:	3714      	adds	r7, #20
 8011630:	46bd      	mov	sp, r7
 8011632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011636:	4770      	bx	lr
 8011638:	200000d0 	.word	0x200000d0
 801163c:	200000cc 	.word	0x200000cc
 8011640:	20002e2c 	.word	0x20002e2c

08011644 <LCD_WriteBMP>:
  * @brief  Displays a bitmap picture loaded in the internal Flash.
  * @param  BmpAddress: Bmp picture address in the internal Flash.
  * @retval None
  */
void LCD_WriteBMP(uint32_t BmpAddress)
{
 8011644:	b580      	push	{r7, lr}
 8011646:	b08a      	sub	sp, #40	; 0x28
 8011648:	af00      	add	r7, sp, #0
 801164a:	6078      	str	r0, [r7, #4]
  uint32_t index = 0, size = 0, width = 0, height = 0, bit_pixel = 0;
 801164c:	2300      	movs	r3, #0
 801164e:	627b      	str	r3, [r7, #36]	; 0x24
 8011650:	2300      	movs	r3, #0
 8011652:	617b      	str	r3, [r7, #20]
 8011654:	2300      	movs	r3, #0
 8011656:	613b      	str	r3, [r7, #16]
 8011658:	2300      	movs	r3, #0
 801165a:	60fb      	str	r3, [r7, #12]
 801165c:	2300      	movs	r3, #0
 801165e:	60bb      	str	r3, [r7, #8]
  uint32_t Address;
  uint32_t currentline = 0, linenumber = 0;
 8011660:	2300      	movs	r3, #0
 8011662:	61fb      	str	r3, [r7, #28]
 8011664:	2300      	movs	r3, #0
 8011666:	61bb      	str	r3, [r7, #24]
 
  Address = CurrentFrameBuffer;
 8011668:	4b6b      	ldr	r3, [pc, #428]	; (8011818 <LCD_WriteBMP+0x1d4>)
 801166a:	681b      	ldr	r3, [r3, #0]
 801166c:	623b      	str	r3, [r7, #32]

  /* Read bitmap size */
  size = *(__IO uint16_t *) (BmpAddress + 2);
 801166e:	687b      	ldr	r3, [r7, #4]
 8011670:	3302      	adds	r3, #2
 8011672:	881b      	ldrh	r3, [r3, #0]
 8011674:	b29b      	uxth	r3, r3
 8011676:	617b      	str	r3, [r7, #20]
  size |= (*(__IO uint16_t *) (BmpAddress + 4)) << 16;
 8011678:	687b      	ldr	r3, [r7, #4]
 801167a:	3304      	adds	r3, #4
 801167c:	881b      	ldrh	r3, [r3, #0]
 801167e:	b29b      	uxth	r3, r3
 8011680:	041b      	lsls	r3, r3, #16
 8011682:	461a      	mov	r2, r3
 8011684:	697b      	ldr	r3, [r7, #20]
 8011686:	4313      	orrs	r3, r2
 8011688:	617b      	str	r3, [r7, #20]
  
  /* Get bitmap data address offset */
  index = *(__IO uint16_t *) (BmpAddress + 10);
 801168a:	687b      	ldr	r3, [r7, #4]
 801168c:	330a      	adds	r3, #10
 801168e:	881b      	ldrh	r3, [r3, #0]
 8011690:	b29b      	uxth	r3, r3
 8011692:	627b      	str	r3, [r7, #36]	; 0x24
  index |= (*(__IO uint16_t *) (BmpAddress + 12)) << 16;
 8011694:	687b      	ldr	r3, [r7, #4]
 8011696:	330c      	adds	r3, #12
 8011698:	881b      	ldrh	r3, [r3, #0]
 801169a:	b29b      	uxth	r3, r3
 801169c:	041b      	lsls	r3, r3, #16
 801169e:	461a      	mov	r2, r3
 80116a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80116a2:	4313      	orrs	r3, r2
 80116a4:	627b      	str	r3, [r7, #36]	; 0x24

  /* Read bitmap width */
  width = *(uint16_t *) (BmpAddress + 18);
 80116a6:	687b      	ldr	r3, [r7, #4]
 80116a8:	3312      	adds	r3, #18
 80116aa:	881b      	ldrh	r3, [r3, #0]
 80116ac:	613b      	str	r3, [r7, #16]
  width |= (*(uint16_t *) (BmpAddress + 20)) << 16;
 80116ae:	687b      	ldr	r3, [r7, #4]
 80116b0:	3314      	adds	r3, #20
 80116b2:	881b      	ldrh	r3, [r3, #0]
 80116b4:	041b      	lsls	r3, r3, #16
 80116b6:	461a      	mov	r2, r3
 80116b8:	693b      	ldr	r3, [r7, #16]
 80116ba:	4313      	orrs	r3, r2
 80116bc:	613b      	str	r3, [r7, #16]

  /* Read bitmap height */
  height = *(uint16_t *) (BmpAddress + 22);
 80116be:	687b      	ldr	r3, [r7, #4]
 80116c0:	3316      	adds	r3, #22
 80116c2:	881b      	ldrh	r3, [r3, #0]
 80116c4:	60fb      	str	r3, [r7, #12]
  height |= (*(uint16_t *) (BmpAddress + 24)) << 16;
 80116c6:	687b      	ldr	r3, [r7, #4]
 80116c8:	3318      	adds	r3, #24
 80116ca:	881b      	ldrh	r3, [r3, #0]
 80116cc:	041b      	lsls	r3, r3, #16
 80116ce:	461a      	mov	r2, r3
 80116d0:	68fb      	ldr	r3, [r7, #12]
 80116d2:	4313      	orrs	r3, r2
 80116d4:	60fb      	str	r3, [r7, #12]

  /* Read bit/pixel */
  bit_pixel = *(uint16_t *) (BmpAddress + 28);  
 80116d6:	687b      	ldr	r3, [r7, #4]
 80116d8:	331c      	adds	r3, #28
 80116da:	881b      	ldrh	r3, [r3, #0]
 80116dc:	60bb      	str	r3, [r7, #8]
 
  if (CurrentLayer == LCD_BACKGROUND_LAYER)
 80116de:	4b4f      	ldr	r3, [pc, #316]	; (801181c <LCD_WriteBMP+0x1d8>)
 80116e0:	681b      	ldr	r3, [r3, #0]
 80116e2:	2b00      	cmp	r3, #0
 80116e4:	d127      	bne.n	8011736 <LCD_WriteBMP+0xf2>
  {
    /* reconfigure layer size in accordance with the picture */
    LTDC_LayerSize(LTDC_Layer1, width, height);
 80116e6:	68fa      	ldr	r2, [r7, #12]
 80116e8:	6939      	ldr	r1, [r7, #16]
 80116ea:	484d      	ldr	r0, [pc, #308]	; (8011820 <LCD_WriteBMP+0x1dc>)
 80116ec:	f7f6 fa7f 	bl	8007bee <LTDC_LayerSize>
    LTDC_ReloadConfig(LTDC_VBReload);
 80116f0:	2002      	movs	r0, #2
 80116f2:	f7f5 fff5 	bl	80076e0 <LTDC_ReloadConfig>

    /* Reconfigure the Layer pixel format in accordance with the picture */    
    if ((bit_pixel/8) == 4)
 80116f6:	68bb      	ldr	r3, [r7, #8]
 80116f8:	3b20      	subs	r3, #32
 80116fa:	2b07      	cmp	r3, #7
 80116fc:	d807      	bhi.n	801170e <LCD_WriteBMP+0xca>
    {
      LTDC_LayerPixelFormat(LTDC_Layer1, LTDC_Pixelformat_ARGB8888);
 80116fe:	2100      	movs	r1, #0
 8011700:	4847      	ldr	r0, [pc, #284]	; (8011820 <LCD_WriteBMP+0x1dc>)
 8011702:	f7f6 fada 	bl	8007cba <LTDC_LayerPixelFormat>
      LTDC_ReloadConfig(LTDC_VBReload);
 8011706:	2002      	movs	r0, #2
 8011708:	f7f5 ffea 	bl	80076e0 <LTDC_ReloadConfig>
 801170c:	e03a      	b.n	8011784 <LCD_WriteBMP+0x140>
    }
    else if ((bit_pixel/8) == 2)
 801170e:	68bb      	ldr	r3, [r7, #8]
 8011710:	3b10      	subs	r3, #16
 8011712:	2b07      	cmp	r3, #7
 8011714:	d807      	bhi.n	8011726 <LCD_WriteBMP+0xe2>
    {
      LTDC_LayerPixelFormat(LTDC_Layer1, LTDC_Pixelformat_RGB565);
 8011716:	2102      	movs	r1, #2
 8011718:	4841      	ldr	r0, [pc, #260]	; (8011820 <LCD_WriteBMP+0x1dc>)
 801171a:	f7f6 face 	bl	8007cba <LTDC_LayerPixelFormat>
      LTDC_ReloadConfig(LTDC_VBReload);
 801171e:	2002      	movs	r0, #2
 8011720:	f7f5 ffde 	bl	80076e0 <LTDC_ReloadConfig>
 8011724:	e02e      	b.n	8011784 <LCD_WriteBMP+0x140>
    }
    else 
    {
      LTDC_LayerPixelFormat(LTDC_Layer1, LTDC_Pixelformat_RGB888);
 8011726:	2101      	movs	r1, #1
 8011728:	483d      	ldr	r0, [pc, #244]	; (8011820 <LCD_WriteBMP+0x1dc>)
 801172a:	f7f6 fac6 	bl	8007cba <LTDC_LayerPixelFormat>
      LTDC_ReloadConfig(LTDC_VBReload);
 801172e:	2002      	movs	r0, #2
 8011730:	f7f5 ffd6 	bl	80076e0 <LTDC_ReloadConfig>
 8011734:	e026      	b.n	8011784 <LCD_WriteBMP+0x140>
    } 
  }
  else
  {
    /* reconfigure layer size in accordance with the picture */
    LTDC_LayerSize(LTDC_Layer2, width, height);
 8011736:	68fa      	ldr	r2, [r7, #12]
 8011738:	6939      	ldr	r1, [r7, #16]
 801173a:	483a      	ldr	r0, [pc, #232]	; (8011824 <LCD_WriteBMP+0x1e0>)
 801173c:	f7f6 fa57 	bl	8007bee <LTDC_LayerSize>
    LTDC_ReloadConfig(LTDC_VBReload); 
 8011740:	2002      	movs	r0, #2
 8011742:	f7f5 ffcd 	bl	80076e0 <LTDC_ReloadConfig>
    
    /* Reconfigure the Layer pixel format in accordance with the picture */
    if ((bit_pixel/8) == 4)
 8011746:	68bb      	ldr	r3, [r7, #8]
 8011748:	3b20      	subs	r3, #32
 801174a:	2b07      	cmp	r3, #7
 801174c:	d807      	bhi.n	801175e <LCD_WriteBMP+0x11a>
    {
      LTDC_LayerPixelFormat(LTDC_Layer2, LTDC_Pixelformat_ARGB8888);
 801174e:	2100      	movs	r1, #0
 8011750:	4834      	ldr	r0, [pc, #208]	; (8011824 <LCD_WriteBMP+0x1e0>)
 8011752:	f7f6 fab2 	bl	8007cba <LTDC_LayerPixelFormat>
      LTDC_ReloadConfig(LTDC_VBReload);
 8011756:	2002      	movs	r0, #2
 8011758:	f7f5 ffc2 	bl	80076e0 <LTDC_ReloadConfig>
 801175c:	e012      	b.n	8011784 <LCD_WriteBMP+0x140>
    }
    else if ((bit_pixel/8) == 2)
 801175e:	68bb      	ldr	r3, [r7, #8]
 8011760:	3b10      	subs	r3, #16
 8011762:	2b07      	cmp	r3, #7
 8011764:	d807      	bhi.n	8011776 <LCD_WriteBMP+0x132>
    {
      LTDC_LayerPixelFormat(LTDC_Layer2, LTDC_Pixelformat_RGB565);
 8011766:	2102      	movs	r1, #2
 8011768:	482e      	ldr	r0, [pc, #184]	; (8011824 <LCD_WriteBMP+0x1e0>)
 801176a:	f7f6 faa6 	bl	8007cba <LTDC_LayerPixelFormat>
      LTDC_ReloadConfig(LTDC_VBReload);
 801176e:	2002      	movs	r0, #2
 8011770:	f7f5 ffb6 	bl	80076e0 <LTDC_ReloadConfig>
 8011774:	e006      	b.n	8011784 <LCD_WriteBMP+0x140>
    }
    else
    {
      LTDC_LayerPixelFormat(LTDC_Layer2, LTDC_Pixelformat_RGB888);
 8011776:	2101      	movs	r1, #1
 8011778:	482a      	ldr	r0, [pc, #168]	; (8011824 <LCD_WriteBMP+0x1e0>)
 801177a:	f7f6 fa9e 	bl	8007cba <LTDC_LayerPixelFormat>
      LTDC_ReloadConfig(LTDC_VBReload);  
 801177e:	2002      	movs	r0, #2
 8011780:	f7f5 ffae 	bl	80076e0 <LTDC_ReloadConfig>
    }
  }
 
  /* compute the real size of the picture (without the header)) */  
  size = (size - index); 
 8011784:	697a      	ldr	r2, [r7, #20]
 8011786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011788:	1ad3      	subs	r3, r2, r3
 801178a:	617b      	str	r3, [r7, #20]

  /* bypass the bitmap header */
  BmpAddress += index;
 801178c:	687a      	ldr	r2, [r7, #4]
 801178e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011790:	4413      	add	r3, r2
 8011792:	607b      	str	r3, [r7, #4]

  /* start copie image from the bottom */
  Address += width*(height-1)*(bit_pixel/8);
 8011794:	68fb      	ldr	r3, [r7, #12]
 8011796:	3b01      	subs	r3, #1
 8011798:	693a      	ldr	r2, [r7, #16]
 801179a:	fb02 f303 	mul.w	r3, r2, r3
 801179e:	68ba      	ldr	r2, [r7, #8]
 80117a0:	08d2      	lsrs	r2, r2, #3
 80117a2:	fb02 f303 	mul.w	r3, r2, r3
 80117a6:	6a3a      	ldr	r2, [r7, #32]
 80117a8:	4413      	add	r3, r2
 80117aa:	623b      	str	r3, [r7, #32]
  
  for(index = 0; index < size; index++)
 80117ac:	2300      	movs	r3, #0
 80117ae:	627b      	str	r3, [r7, #36]	; 0x24
 80117b0:	e02a      	b.n	8011808 <LCD_WriteBMP+0x1c4>
  {
    *(__IO uint8_t*) (Address) = *(__IO uint8_t *)BmpAddress;
 80117b2:	687a      	ldr	r2, [r7, #4]
 80117b4:	6a3b      	ldr	r3, [r7, #32]
 80117b6:	7812      	ldrb	r2, [r2, #0]
 80117b8:	b2d2      	uxtb	r2, r2
 80117ba:	701a      	strb	r2, [r3, #0]
    
    /*jump on next byte */   
    BmpAddress++;
 80117bc:	687b      	ldr	r3, [r7, #4]
 80117be:	3301      	adds	r3, #1
 80117c0:	607b      	str	r3, [r7, #4]
    Address++;
 80117c2:	6a3b      	ldr	r3, [r7, #32]
 80117c4:	3301      	adds	r3, #1
 80117c6:	623b      	str	r3, [r7, #32]
    currentline++;
 80117c8:	69fb      	ldr	r3, [r7, #28]
 80117ca:	3301      	adds	r3, #1
 80117cc:	61fb      	str	r3, [r7, #28]
    
    if((currentline/(bit_pixel/8)) == width)
 80117ce:	68bb      	ldr	r3, [r7, #8]
 80117d0:	08db      	lsrs	r3, r3, #3
 80117d2:	69fa      	ldr	r2, [r7, #28]
 80117d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80117d8:	693a      	ldr	r2, [r7, #16]
 80117da:	429a      	cmp	r2, r3
 80117dc:	d111      	bne.n	8011802 <LCD_WriteBMP+0x1be>
    {
      if(linenumber < height)
 80117de:	69ba      	ldr	r2, [r7, #24]
 80117e0:	68fb      	ldr	r3, [r7, #12]
 80117e2:	429a      	cmp	r2, r3
 80117e4:	d20d      	bcs.n	8011802 <LCD_WriteBMP+0x1be>
      {
        linenumber++;
 80117e6:	69bb      	ldr	r3, [r7, #24]
 80117e8:	3301      	adds	r3, #1
 80117ea:	61bb      	str	r3, [r7, #24]
        Address -=(2*width*(bit_pixel/8));
 80117ec:	68bb      	ldr	r3, [r7, #8]
 80117ee:	08db      	lsrs	r3, r3, #3
 80117f0:	693a      	ldr	r2, [r7, #16]
 80117f2:	fb02 f303 	mul.w	r3, r2, r3
 80117f6:	005b      	lsls	r3, r3, #1
 80117f8:	6a3a      	ldr	r2, [r7, #32]
 80117fa:	1ad3      	subs	r3, r2, r3
 80117fc:	623b      	str	r3, [r7, #32]
        currentline = 0;
 80117fe:	2300      	movs	r3, #0
 8011800:	61fb      	str	r3, [r7, #28]
  for(index = 0; index < size; index++)
 8011802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011804:	3301      	adds	r3, #1
 8011806:	627b      	str	r3, [r7, #36]	; 0x24
 8011808:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801180a:	697b      	ldr	r3, [r7, #20]
 801180c:	429a      	cmp	r2, r3
 801180e:	d3d0      	bcc.n	80117b2 <LCD_WriteBMP+0x16e>
      }
    }
  }
}
 8011810:	bf00      	nop
 8011812:	3728      	adds	r7, #40	; 0x28
 8011814:	46bd      	mov	sp, r7
 8011816:	bd80      	pop	{r7, pc}
 8011818:	200000d0 	.word	0x200000d0
 801181c:	20002e30 	.word	0x20002e30
 8011820:	40016884 	.word	0x40016884
 8011824:	40016904 	.word	0x40016904

08011828 <LCD_DrawFullRect>:
  * @param  Height: rectangle height.
  * @param  Width: rectangle width.
  * @retval None
  */
void LCD_DrawFullRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8011828:	b590      	push	{r4, r7, lr}
 801182a:	b091      	sub	sp, #68	; 0x44
 801182c:	af00      	add	r7, sp, #0
 801182e:	4604      	mov	r4, r0
 8011830:	4608      	mov	r0, r1
 8011832:	4611      	mov	r1, r2
 8011834:	461a      	mov	r2, r3
 8011836:	4623      	mov	r3, r4
 8011838:	80fb      	strh	r3, [r7, #6]
 801183a:	4603      	mov	r3, r0
 801183c:	80bb      	strh	r3, [r7, #4]
 801183e:	460b      	mov	r3, r1
 8011840:	807b      	strh	r3, [r7, #2]
 8011842:	4613      	mov	r3, r2
 8011844:	803b      	strh	r3, [r7, #0]
  DMA2D_InitTypeDef      DMA2D_InitStruct;
  
  uint32_t  Xaddress = 0; 
 8011846:	2300      	movs	r3, #0
 8011848:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint16_t Red_Value = 0, Green_Value = 0, Blue_Value = 0;
 801184a:	2300      	movs	r3, #0
 801184c:	877b      	strh	r3, [r7, #58]	; 0x3a
 801184e:	2300      	movs	r3, #0
 8011850:	873b      	strh	r3, [r7, #56]	; 0x38
 8011852:	2300      	movs	r3, #0
 8011854:	86fb      	strh	r3, [r7, #54]	; 0x36
 
  Red_Value = (0xF800 & CurrentTextColor) >> 11;
 8011856:	4b27      	ldr	r3, [pc, #156]	; (80118f4 <LCD_DrawFullRect+0xcc>)
 8011858:	881b      	ldrh	r3, [r3, #0]
 801185a:	0adb      	lsrs	r3, r3, #11
 801185c:	877b      	strh	r3, [r7, #58]	; 0x3a
  Blue_Value = 0x001F & CurrentTextColor;
 801185e:	4b25      	ldr	r3, [pc, #148]	; (80118f4 <LCD_DrawFullRect+0xcc>)
 8011860:	881b      	ldrh	r3, [r3, #0]
 8011862:	f003 031f 	and.w	r3, r3, #31
 8011866:	86fb      	strh	r3, [r7, #54]	; 0x36
  Green_Value = (0x07E0 & CurrentTextColor) >> 5;
 8011868:	4b22      	ldr	r3, [pc, #136]	; (80118f4 <LCD_DrawFullRect+0xcc>)
 801186a:	881b      	ldrh	r3, [r3, #0]
 801186c:	095b      	lsrs	r3, r3, #5
 801186e:	b29b      	uxth	r3, r3
 8011870:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8011874:	873b      	strh	r3, [r7, #56]	; 0x38
  
  Xaddress = CurrentFrameBuffer + 2*(LCD_PIXEL_WIDTH*Ypos + Xpos);
 8011876:	88ba      	ldrh	r2, [r7, #4]
 8011878:	4613      	mov	r3, r2
 801187a:	011b      	lsls	r3, r3, #4
 801187c:	1a9b      	subs	r3, r3, r2
 801187e:	011b      	lsls	r3, r3, #4
 8011880:	461a      	mov	r2, r3
 8011882:	88fb      	ldrh	r3, [r7, #6]
 8011884:	4413      	add	r3, r2
 8011886:	005b      	lsls	r3, r3, #1
 8011888:	461a      	mov	r2, r3
 801188a:	4b1b      	ldr	r3, [pc, #108]	; (80118f8 <LCD_DrawFullRect+0xd0>)
 801188c:	681b      	ldr	r3, [r3, #0]
 801188e:	4413      	add	r3, r2
 8011890:	63fb      	str	r3, [r7, #60]	; 0x3c
  
  /* configure DMA2D */
  DMA2D_DeInit();
 8011892:	f7f2 fd1f 	bl	80042d4 <DMA2D_DeInit>
  DMA2D_InitStruct.DMA2D_Mode = DMA2D_R2M;       
 8011896:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 801189a:	60fb      	str	r3, [r7, #12]
  DMA2D_InitStruct.DMA2D_CMode = DMA2D_RGB565;      
 801189c:	2302      	movs	r3, #2
 801189e:	613b      	str	r3, [r7, #16]
  DMA2D_InitStruct.DMA2D_OutputGreen = Green_Value;      
 80118a0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80118a2:	61bb      	str	r3, [r7, #24]
  DMA2D_InitStruct.DMA2D_OutputBlue = Blue_Value;     
 80118a4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80118a6:	617b      	str	r3, [r7, #20]
  DMA2D_InitStruct.DMA2D_OutputRed = Red_Value;                
 80118a8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80118aa:	61fb      	str	r3, [r7, #28]
  DMA2D_InitStruct.DMA2D_OutputAlpha = 0x0F;                  
 80118ac:	230f      	movs	r3, #15
 80118ae:	623b      	str	r3, [r7, #32]
  DMA2D_InitStruct.DMA2D_OutputMemoryAdd = Xaddress;                
 80118b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80118b2:	627b      	str	r3, [r7, #36]	; 0x24
  DMA2D_InitStruct.DMA2D_OutputOffset = (LCD_PIXEL_WIDTH - Width);                
 80118b4:	887b      	ldrh	r3, [r7, #2]
 80118b6:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 80118ba:	62bb      	str	r3, [r7, #40]	; 0x28
  DMA2D_InitStruct.DMA2D_NumberOfLine = Height;            
 80118bc:	883b      	ldrh	r3, [r7, #0]
 80118be:	62fb      	str	r3, [r7, #44]	; 0x2c
  DMA2D_InitStruct.DMA2D_PixelPerLine = Width;
 80118c0:	887b      	ldrh	r3, [r7, #2]
 80118c2:	633b      	str	r3, [r7, #48]	; 0x30
  DMA2D_Init(&DMA2D_InitStruct); 
 80118c4:	f107 030c 	add.w	r3, r7, #12
 80118c8:	4618      	mov	r0, r3
 80118ca:	f7f2 fd11 	bl	80042f0 <DMA2D_Init>
  
  /* Start Transfer */ 
  DMA2D_StartTransfer();
 80118ce:	f7f2 fde7 	bl	80044a0 <DMA2D_StartTransfer>
  
  /* Wait for CTC Flag activation */
  while(DMA2D_GetFlagStatus(DMA2D_FLAG_TC) == RESET)
 80118d2:	bf00      	nop
 80118d4:	2002      	movs	r0, #2
 80118d6:	f7f2 ffed 	bl	80048b4 <DMA2D_GetFlagStatus>
 80118da:	4603      	mov	r3, r0
 80118dc:	2b00      	cmp	r3, #0
 80118de:	d0f9      	beq.n	80118d4 <LCD_DrawFullRect+0xac>
  {
  } 

  LCD_SetTextColor(CurrentTextColor);
 80118e0:	4b04      	ldr	r3, [pc, #16]	; (80118f4 <LCD_DrawFullRect+0xcc>)
 80118e2:	881b      	ldrh	r3, [r3, #0]
 80118e4:	4618      	mov	r0, r3
 80118e6:	f7fe ffdb 	bl	80108a0 <LCD_SetTextColor>
}
 80118ea:	bf00      	nop
 80118ec:	3744      	adds	r7, #68	; 0x44
 80118ee:	46bd      	mov	sp, r7
 80118f0:	bd90      	pop	{r4, r7, pc}
 80118f2:	bf00      	nop
 80118f4:	20002e2c 	.word	0x20002e2c
 80118f8:	200000d0 	.word	0x200000d0

080118fc <LCD_DrawFullCircle>:
  * @param  Ypos: specifies the Y position, can be a value from 0 to 320.
  * @param  Radius
  * @retval None
  */
void LCD_DrawFullCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 80118fc:	b580      	push	{r7, lr}
 80118fe:	b086      	sub	sp, #24
 8011900:	af00      	add	r7, sp, #0
 8011902:	4603      	mov	r3, r0
 8011904:	80fb      	strh	r3, [r7, #6]
 8011906:	460b      	mov	r3, r1
 8011908:	80bb      	strh	r3, [r7, #4]
 801190a:	4613      	mov	r3, r2
 801190c:	807b      	strh	r3, [r7, #2]
  int32_t  D;    /* Decision Variable */ 
  uint32_t  CurX;/* Current X Value */
  uint32_t  CurY;/* Current Y Value */ 
  
  D = 3 - (Radius << 1);
 801190e:	887b      	ldrh	r3, [r7, #2]
 8011910:	005b      	lsls	r3, r3, #1
 8011912:	f1c3 0303 	rsb	r3, r3, #3
 8011916:	617b      	str	r3, [r7, #20]
  
  CurX = 0;
 8011918:	2300      	movs	r3, #0
 801191a:	613b      	str	r3, [r7, #16]
  CurY = Radius;
 801191c:	887b      	ldrh	r3, [r7, #2]
 801191e:	60fb      	str	r3, [r7, #12]
  
  while (CurX <= CurY)
 8011920:	e061      	b.n	80119e6 <LCD_DrawFullCircle+0xea>
  {
    if(CurY > 0) 
 8011922:	68fb      	ldr	r3, [r7, #12]
 8011924:	2b00      	cmp	r3, #0
 8011926:	d021      	beq.n	801196c <LCD_DrawFullCircle+0x70>
    {
      LCD_DrawLine(Xpos - CurX, Ypos - CurY, 2*CurY, LCD_DIR_VERTICAL);
 8011928:	693b      	ldr	r3, [r7, #16]
 801192a:	b29b      	uxth	r3, r3
 801192c:	88fa      	ldrh	r2, [r7, #6]
 801192e:	1ad3      	subs	r3, r2, r3
 8011930:	b298      	uxth	r0, r3
 8011932:	68fb      	ldr	r3, [r7, #12]
 8011934:	b29b      	uxth	r3, r3
 8011936:	88ba      	ldrh	r2, [r7, #4]
 8011938:	1ad3      	subs	r3, r2, r3
 801193a:	b299      	uxth	r1, r3
 801193c:	68fb      	ldr	r3, [r7, #12]
 801193e:	b29b      	uxth	r3, r3
 8011940:	005b      	lsls	r3, r3, #1
 8011942:	b29a      	uxth	r2, r3
 8011944:	2301      	movs	r3, #1
 8011946:	f7ff fa04 	bl	8010d52 <LCD_DrawLine>
      LCD_DrawLine(Xpos + CurX, Ypos - CurY, 2*CurY, LCD_DIR_VERTICAL);
 801194a:	693b      	ldr	r3, [r7, #16]
 801194c:	b29a      	uxth	r2, r3
 801194e:	88fb      	ldrh	r3, [r7, #6]
 8011950:	4413      	add	r3, r2
 8011952:	b298      	uxth	r0, r3
 8011954:	68fb      	ldr	r3, [r7, #12]
 8011956:	b29b      	uxth	r3, r3
 8011958:	88ba      	ldrh	r2, [r7, #4]
 801195a:	1ad3      	subs	r3, r2, r3
 801195c:	b299      	uxth	r1, r3
 801195e:	68fb      	ldr	r3, [r7, #12]
 8011960:	b29b      	uxth	r3, r3
 8011962:	005b      	lsls	r3, r3, #1
 8011964:	b29a      	uxth	r2, r3
 8011966:	2301      	movs	r3, #1
 8011968:	f7ff f9f3 	bl	8010d52 <LCD_DrawLine>
    }
    
    if(CurX > 0) 
 801196c:	693b      	ldr	r3, [r7, #16]
 801196e:	2b00      	cmp	r3, #0
 8011970:	d021      	beq.n	80119b6 <LCD_DrawFullCircle+0xba>
    {
      LCD_DrawLine(Xpos - CurY, Ypos - CurX, 2*CurX, LCD_DIR_VERTICAL);
 8011972:	68fb      	ldr	r3, [r7, #12]
 8011974:	b29b      	uxth	r3, r3
 8011976:	88fa      	ldrh	r2, [r7, #6]
 8011978:	1ad3      	subs	r3, r2, r3
 801197a:	b298      	uxth	r0, r3
 801197c:	693b      	ldr	r3, [r7, #16]
 801197e:	b29b      	uxth	r3, r3
 8011980:	88ba      	ldrh	r2, [r7, #4]
 8011982:	1ad3      	subs	r3, r2, r3
 8011984:	b299      	uxth	r1, r3
 8011986:	693b      	ldr	r3, [r7, #16]
 8011988:	b29b      	uxth	r3, r3
 801198a:	005b      	lsls	r3, r3, #1
 801198c:	b29a      	uxth	r2, r3
 801198e:	2301      	movs	r3, #1
 8011990:	f7ff f9df 	bl	8010d52 <LCD_DrawLine>
      LCD_DrawLine(Xpos + CurY, Ypos - CurX, 2*CurX, LCD_DIR_VERTICAL);
 8011994:	68fb      	ldr	r3, [r7, #12]
 8011996:	b29a      	uxth	r2, r3
 8011998:	88fb      	ldrh	r3, [r7, #6]
 801199a:	4413      	add	r3, r2
 801199c:	b298      	uxth	r0, r3
 801199e:	693b      	ldr	r3, [r7, #16]
 80119a0:	b29b      	uxth	r3, r3
 80119a2:	88ba      	ldrh	r2, [r7, #4]
 80119a4:	1ad3      	subs	r3, r2, r3
 80119a6:	b299      	uxth	r1, r3
 80119a8:	693b      	ldr	r3, [r7, #16]
 80119aa:	b29b      	uxth	r3, r3
 80119ac:	005b      	lsls	r3, r3, #1
 80119ae:	b29a      	uxth	r2, r3
 80119b0:	2301      	movs	r3, #1
 80119b2:	f7ff f9ce 	bl	8010d52 <LCD_DrawLine>
    }
    if (D < 0)
 80119b6:	697b      	ldr	r3, [r7, #20]
 80119b8:	2b00      	cmp	r3, #0
 80119ba:	da06      	bge.n	80119ca <LCD_DrawFullCircle+0xce>
    { 
      D += (CurX << 2) + 6;
 80119bc:	693b      	ldr	r3, [r7, #16]
 80119be:	009a      	lsls	r2, r3, #2
 80119c0:	697b      	ldr	r3, [r7, #20]
 80119c2:	4413      	add	r3, r2
 80119c4:	3306      	adds	r3, #6
 80119c6:	617b      	str	r3, [r7, #20]
 80119c8:	e00a      	b.n	80119e0 <LCD_DrawFullCircle+0xe4>
    }
    else
    {
      D += ((CurX - CurY) << 2) + 10;
 80119ca:	693a      	ldr	r2, [r7, #16]
 80119cc:	68fb      	ldr	r3, [r7, #12]
 80119ce:	1ad3      	subs	r3, r2, r3
 80119d0:	009a      	lsls	r2, r3, #2
 80119d2:	697b      	ldr	r3, [r7, #20]
 80119d4:	4413      	add	r3, r2
 80119d6:	330a      	adds	r3, #10
 80119d8:	617b      	str	r3, [r7, #20]
      CurY--;
 80119da:	68fb      	ldr	r3, [r7, #12]
 80119dc:	3b01      	subs	r3, #1
 80119de:	60fb      	str	r3, [r7, #12]
    }
    CurX++;
 80119e0:	693b      	ldr	r3, [r7, #16]
 80119e2:	3301      	adds	r3, #1
 80119e4:	613b      	str	r3, [r7, #16]
  while (CurX <= CurY)
 80119e6:	693a      	ldr	r2, [r7, #16]
 80119e8:	68fb      	ldr	r3, [r7, #12]
 80119ea:	429a      	cmp	r2, r3
 80119ec:	d999      	bls.n	8011922 <LCD_DrawFullCircle+0x26>
  }
  
  LCD_DrawCircle(Xpos, Ypos, Radius);  
 80119ee:	887a      	ldrh	r2, [r7, #2]
 80119f0:	88b9      	ldrh	r1, [r7, #4]
 80119f2:	88fb      	ldrh	r3, [r7, #6]
 80119f4:	4618      	mov	r0, r3
 80119f6:	f7ff fa4a 	bl	8010e8e <LCD_DrawCircle>
}
 80119fa:	bf00      	nop
 80119fc:	3718      	adds	r7, #24
 80119fe:	46bd      	mov	sp, r7
 8011a00:	bd80      	pop	{r7, pc}

08011a02 <LCD_DrawUniLine>:
  * @param  x2: specifies the point 2 x position.
  * @param  y2: specifies the point 2 y position.
  * @retval None
  */
void LCD_DrawUniLine(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2)
{
 8011a02:	b590      	push	{r4, r7, lr}
 8011a04:	b08b      	sub	sp, #44	; 0x2c
 8011a06:	af00      	add	r7, sp, #0
 8011a08:	4604      	mov	r4, r0
 8011a0a:	4608      	mov	r0, r1
 8011a0c:	4611      	mov	r1, r2
 8011a0e:	461a      	mov	r2, r3
 8011a10:	4623      	mov	r3, r4
 8011a12:	80fb      	strh	r3, [r7, #6]
 8011a14:	4603      	mov	r3, r0
 8011a16:	80bb      	strh	r3, [r7, #4]
 8011a18:	460b      	mov	r3, r1
 8011a1a:	807b      	strh	r3, [r7, #2]
 8011a1c:	4613      	mov	r3, r2
 8011a1e:	803b      	strh	r3, [r7, #0]
  int16_t deltax = 0, deltay = 0, x = 0, y = 0, xinc1 = 0, xinc2 = 0, 
 8011a20:	2300      	movs	r3, #0
 8011a22:	823b      	strh	r3, [r7, #16]
 8011a24:	2300      	movs	r3, #0
 8011a26:	81fb      	strh	r3, [r7, #14]
 8011a28:	2300      	movs	r3, #0
 8011a2a:	84fb      	strh	r3, [r7, #38]	; 0x26
 8011a2c:	2300      	movs	r3, #0
 8011a2e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8011a30:	2300      	movs	r3, #0
 8011a32:	847b      	strh	r3, [r7, #34]	; 0x22
 8011a34:	2300      	movs	r3, #0
 8011a36:	843b      	strh	r3, [r7, #32]
  yinc1 = 0, yinc2 = 0, den = 0, num = 0, numadd = 0, numpixels = 0, 
 8011a38:	2300      	movs	r3, #0
 8011a3a:	83fb      	strh	r3, [r7, #30]
 8011a3c:	2300      	movs	r3, #0
 8011a3e:	83bb      	strh	r3, [r7, #28]
 8011a40:	2300      	movs	r3, #0
 8011a42:	837b      	strh	r3, [r7, #26]
 8011a44:	2300      	movs	r3, #0
 8011a46:	833b      	strh	r3, [r7, #24]
 8011a48:	2300      	movs	r3, #0
 8011a4a:	82fb      	strh	r3, [r7, #22]
 8011a4c:	2300      	movs	r3, #0
 8011a4e:	82bb      	strh	r3, [r7, #20]
  curpixel = 0;
 8011a50:	2300      	movs	r3, #0
 8011a52:	827b      	strh	r3, [r7, #18]
  
  deltax = ABS(x2 - x1);        /* The difference between the x's */
 8011a54:	887a      	ldrh	r2, [r7, #2]
 8011a56:	88fb      	ldrh	r3, [r7, #6]
 8011a58:	1ad3      	subs	r3, r2, r3
 8011a5a:	2b00      	cmp	r3, #0
 8011a5c:	bfb8      	it	lt
 8011a5e:	425b      	neglt	r3, r3
 8011a60:	823b      	strh	r3, [r7, #16]
  deltay = ABS(y2 - y1);        /* The difference between the y's */
 8011a62:	883a      	ldrh	r2, [r7, #0]
 8011a64:	88bb      	ldrh	r3, [r7, #4]
 8011a66:	1ad3      	subs	r3, r2, r3
 8011a68:	2b00      	cmp	r3, #0
 8011a6a:	bfb8      	it	lt
 8011a6c:	425b      	neglt	r3, r3
 8011a6e:	81fb      	strh	r3, [r7, #14]
  x = x1;                       /* Start x off at the first pixel */
 8011a70:	88fb      	ldrh	r3, [r7, #6]
 8011a72:	84fb      	strh	r3, [r7, #38]	; 0x26
  y = y1;                       /* Start y off at the first pixel */
 8011a74:	88bb      	ldrh	r3, [r7, #4]
 8011a76:	84bb      	strh	r3, [r7, #36]	; 0x24
  
  if (x2 >= x1)                 /* The x-values are increasing */
 8011a78:	887a      	ldrh	r2, [r7, #2]
 8011a7a:	88fb      	ldrh	r3, [r7, #6]
 8011a7c:	429a      	cmp	r2, r3
 8011a7e:	d304      	bcc.n	8011a8a <LCD_DrawUniLine+0x88>
  {
    xinc1 = 1;
 8011a80:	2301      	movs	r3, #1
 8011a82:	847b      	strh	r3, [r7, #34]	; 0x22
    xinc2 = 1;
 8011a84:	2301      	movs	r3, #1
 8011a86:	843b      	strh	r3, [r7, #32]
 8011a88:	e005      	b.n	8011a96 <LCD_DrawUniLine+0x94>
  }
  else                          /* The x-values are decreasing */
  {
    xinc1 = -1;
 8011a8a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011a8e:	847b      	strh	r3, [r7, #34]	; 0x22
    xinc2 = -1;
 8011a90:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011a94:	843b      	strh	r3, [r7, #32]
  }
  
  if (y2 >= y1)                 /* The y-values are increasing */
 8011a96:	883a      	ldrh	r2, [r7, #0]
 8011a98:	88bb      	ldrh	r3, [r7, #4]
 8011a9a:	429a      	cmp	r2, r3
 8011a9c:	d304      	bcc.n	8011aa8 <LCD_DrawUniLine+0xa6>
  {
    yinc1 = 1;
 8011a9e:	2301      	movs	r3, #1
 8011aa0:	83fb      	strh	r3, [r7, #30]
    yinc2 = 1;
 8011aa2:	2301      	movs	r3, #1
 8011aa4:	83bb      	strh	r3, [r7, #28]
 8011aa6:	e005      	b.n	8011ab4 <LCD_DrawUniLine+0xb2>
  }
  else                          /* The y-values are decreasing */
  {
    yinc1 = -1;
 8011aa8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011aac:	83fb      	strh	r3, [r7, #30]
    yinc2 = -1;
 8011aae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011ab2:	83bb      	strh	r3, [r7, #28]
  }
  
  if (deltax >= deltay)         /* There is at least one x-value for every y-value */
 8011ab4:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8011ab8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8011abc:	429a      	cmp	r2, r3
 8011abe:	db10      	blt.n	8011ae2 <LCD_DrawUniLine+0xe0>
  {
    xinc1 = 0;                  /* Don't change the x when numerator >= denominator */
 8011ac0:	2300      	movs	r3, #0
 8011ac2:	847b      	strh	r3, [r7, #34]	; 0x22
    yinc2 = 0;                  /* Don't change the y for every iteration */
 8011ac4:	2300      	movs	r3, #0
 8011ac6:	83bb      	strh	r3, [r7, #28]
    den = deltax;
 8011ac8:	8a3b      	ldrh	r3, [r7, #16]
 8011aca:	837b      	strh	r3, [r7, #26]
    num = deltax / 2;
 8011acc:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8011ad0:	0fda      	lsrs	r2, r3, #31
 8011ad2:	4413      	add	r3, r2
 8011ad4:	105b      	asrs	r3, r3, #1
 8011ad6:	833b      	strh	r3, [r7, #24]
    numadd = deltay;
 8011ad8:	89fb      	ldrh	r3, [r7, #14]
 8011ada:	82fb      	strh	r3, [r7, #22]
    numpixels = deltax;         /* There are more x-values than y-values */
 8011adc:	8a3b      	ldrh	r3, [r7, #16]
 8011ade:	82bb      	strh	r3, [r7, #20]
 8011ae0:	e00f      	b.n	8011b02 <LCD_DrawUniLine+0x100>
  }
  else                          /* There is at least one y-value for every x-value */
  {
    xinc2 = 0;                  /* Don't change the x for every iteration */
 8011ae2:	2300      	movs	r3, #0
 8011ae4:	843b      	strh	r3, [r7, #32]
    yinc1 = 0;                  /* Don't change the y when numerator >= denominator */
 8011ae6:	2300      	movs	r3, #0
 8011ae8:	83fb      	strh	r3, [r7, #30]
    den = deltay;
 8011aea:	89fb      	ldrh	r3, [r7, #14]
 8011aec:	837b      	strh	r3, [r7, #26]
    num = deltay / 2;
 8011aee:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8011af2:	0fda      	lsrs	r2, r3, #31
 8011af4:	4413      	add	r3, r2
 8011af6:	105b      	asrs	r3, r3, #1
 8011af8:	833b      	strh	r3, [r7, #24]
    numadd = deltax;
 8011afa:	8a3b      	ldrh	r3, [r7, #16]
 8011afc:	82fb      	strh	r3, [r7, #22]
    numpixels = deltay;         /* There are more y-values than x-values */
 8011afe:	89fb      	ldrh	r3, [r7, #14]
 8011b00:	82bb      	strh	r3, [r7, #20]
  }
  
  for (curpixel = 0; curpixel <= numpixels; curpixel++)
 8011b02:	2300      	movs	r3, #0
 8011b04:	827b      	strh	r3, [r7, #18]
 8011b06:	e031      	b.n	8011b6c <LCD_DrawUniLine+0x16a>
  {
    PutPixel(x, y);             /* Draw the current pixel */
 8011b08:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 8011b0c:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8011b10:	4611      	mov	r1, r2
 8011b12:	4618      	mov	r0, r3
 8011b14:	f000 fe02 	bl	801271c <PutPixel>
    num += numadd;              /* Increase the numerator by the top of the fraction */
 8011b18:	8b3a      	ldrh	r2, [r7, #24]
 8011b1a:	8afb      	ldrh	r3, [r7, #22]
 8011b1c:	4413      	add	r3, r2
 8011b1e:	b29b      	uxth	r3, r3
 8011b20:	833b      	strh	r3, [r7, #24]
    if (num >= den)             /* Check if numerator >= denominator */
 8011b22:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8011b26:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8011b2a:	429a      	cmp	r2, r3
 8011b2c:	db0e      	blt.n	8011b4c <LCD_DrawUniLine+0x14a>
    {
      num -= den;               /* Calculate the new numerator value */
 8011b2e:	8b3a      	ldrh	r2, [r7, #24]
 8011b30:	8b7b      	ldrh	r3, [r7, #26]
 8011b32:	1ad3      	subs	r3, r2, r3
 8011b34:	b29b      	uxth	r3, r3
 8011b36:	833b      	strh	r3, [r7, #24]
      x += xinc1;               /* Change the x as appropriate */
 8011b38:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8011b3a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011b3c:	4413      	add	r3, r2
 8011b3e:	b29b      	uxth	r3, r3
 8011b40:	84fb      	strh	r3, [r7, #38]	; 0x26
      y += yinc1;               /* Change the y as appropriate */
 8011b42:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8011b44:	8bfb      	ldrh	r3, [r7, #30]
 8011b46:	4413      	add	r3, r2
 8011b48:	b29b      	uxth	r3, r3
 8011b4a:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    x += xinc2;                 /* Change the x as appropriate */
 8011b4c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8011b4e:	8c3b      	ldrh	r3, [r7, #32]
 8011b50:	4413      	add	r3, r2
 8011b52:	b29b      	uxth	r3, r3
 8011b54:	84fb      	strh	r3, [r7, #38]	; 0x26
    y += yinc2;                 /* Change the y as appropriate */
 8011b56:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8011b58:	8bbb      	ldrh	r3, [r7, #28]
 8011b5a:	4413      	add	r3, r2
 8011b5c:	b29b      	uxth	r3, r3
 8011b5e:	84bb      	strh	r3, [r7, #36]	; 0x24
  for (curpixel = 0; curpixel <= numpixels; curpixel++)
 8011b60:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8011b64:	b29b      	uxth	r3, r3
 8011b66:	3301      	adds	r3, #1
 8011b68:	b29b      	uxth	r3, r3
 8011b6a:	827b      	strh	r3, [r7, #18]
 8011b6c:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8011b70:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8011b74:	429a      	cmp	r2, r3
 8011b76:	ddc7      	ble.n	8011b08 <LCD_DrawUniLine+0x106>
  }
}
 8011b78:	bf00      	nop
 8011b7a:	372c      	adds	r7, #44	; 0x2c
 8011b7c:	46bd      	mov	sp, r7
 8011b7e:	bd90      	pop	{r4, r7, pc}

08011b80 <LCD_Triangle>:
  * @brief  Displays an triangle.
  * @param  Points: pointer to the points array.
  * @retval None
  */
void LCD_Triangle(pPoint Points, uint16_t PointCount)
{
 8011b80:	b580      	push	{r7, lr}
 8011b82:	b084      	sub	sp, #16
 8011b84:	af00      	add	r7, sp, #0
 8011b86:	6078      	str	r0, [r7, #4]
 8011b88:	460b      	mov	r3, r1
 8011b8a:	807b      	strh	r3, [r7, #2]
  int16_t X = 0, Y = 0;
 8011b8c:	2300      	movs	r3, #0
 8011b8e:	81fb      	strh	r3, [r7, #14]
 8011b90:	2300      	movs	r3, #0
 8011b92:	81bb      	strh	r3, [r7, #12]
  pPoint First = Points;
 8011b94:	687b      	ldr	r3, [r7, #4]
 8011b96:	60bb      	str	r3, [r7, #8]

  if(PointCount != 3)
 8011b98:	887b      	ldrh	r3, [r7, #2]
 8011b9a:	2b03      	cmp	r3, #3
 8011b9c:	d12e      	bne.n	8011bfc <LCD_Triangle+0x7c>
  {
    return;
  }

  while(--PointCount)
 8011b9e:	e014      	b.n	8011bca <LCD_Triangle+0x4a>
  {
    X = Points->X;
 8011ba0:	687b      	ldr	r3, [r7, #4]
 8011ba2:	881b      	ldrh	r3, [r3, #0]
 8011ba4:	81fb      	strh	r3, [r7, #14]
    Y = Points->Y;
 8011ba6:	687b      	ldr	r3, [r7, #4]
 8011ba8:	885b      	ldrh	r3, [r3, #2]
 8011baa:	81bb      	strh	r3, [r7, #12]
    Points++;
 8011bac:	687b      	ldr	r3, [r7, #4]
 8011bae:	3304      	adds	r3, #4
 8011bb0:	607b      	str	r3, [r7, #4]
    LCD_DrawUniLine(X, Y, Points->X, Points->Y);
 8011bb2:	89f8      	ldrh	r0, [r7, #14]
 8011bb4:	89b9      	ldrh	r1, [r7, #12]
 8011bb6:	687b      	ldr	r3, [r7, #4]
 8011bb8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011bbc:	b29a      	uxth	r2, r3
 8011bbe:	687b      	ldr	r3, [r7, #4]
 8011bc0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8011bc4:	b29b      	uxth	r3, r3
 8011bc6:	f7ff ff1c 	bl	8011a02 <LCD_DrawUniLine>
  while(--PointCount)
 8011bca:	887b      	ldrh	r3, [r7, #2]
 8011bcc:	3b01      	subs	r3, #1
 8011bce:	807b      	strh	r3, [r7, #2]
 8011bd0:	887b      	ldrh	r3, [r7, #2]
 8011bd2:	2b00      	cmp	r3, #0
 8011bd4:	d1e4      	bne.n	8011ba0 <LCD_Triangle+0x20>
  }
  LCD_DrawUniLine(First->X, First->Y, Points->X, Points->Y);
 8011bd6:	68bb      	ldr	r3, [r7, #8]
 8011bd8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011bdc:	b298      	uxth	r0, r3
 8011bde:	68bb      	ldr	r3, [r7, #8]
 8011be0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8011be4:	b299      	uxth	r1, r3
 8011be6:	687b      	ldr	r3, [r7, #4]
 8011be8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011bec:	b29a      	uxth	r2, r3
 8011bee:	687b      	ldr	r3, [r7, #4]
 8011bf0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8011bf4:	b29b      	uxth	r3, r3
 8011bf6:	f7ff ff04 	bl	8011a02 <LCD_DrawUniLine>
 8011bfa:	e000      	b.n	8011bfe <LCD_Triangle+0x7e>
    return;
 8011bfc:	bf00      	nop
}
 8011bfe:	3710      	adds	r7, #16
 8011c00:	46bd      	mov	sp, r7
 8011c02:	bd80      	pop	{r7, pc}

08011c04 <LCD_FillTriangle>:
  * @param  x1..3: x position of triangle point 1..3.
  * @param  y1..3: y position of triangle point 1..3.
  * @retval None
  */
void LCD_FillTriangle(uint16_t x1, uint16_t x2, uint16_t x3, uint16_t y1, uint16_t y2, uint16_t y3)
{ 
 8011c04:	b590      	push	{r4, r7, lr}
 8011c06:	b08b      	sub	sp, #44	; 0x2c
 8011c08:	af00      	add	r7, sp, #0
 8011c0a:	4604      	mov	r4, r0
 8011c0c:	4608      	mov	r0, r1
 8011c0e:	4611      	mov	r1, r2
 8011c10:	461a      	mov	r2, r3
 8011c12:	4623      	mov	r3, r4
 8011c14:	80fb      	strh	r3, [r7, #6]
 8011c16:	4603      	mov	r3, r0
 8011c18:	80bb      	strh	r3, [r7, #4]
 8011c1a:	460b      	mov	r3, r1
 8011c1c:	807b      	strh	r3, [r7, #2]
 8011c1e:	4613      	mov	r3, r2
 8011c20:	803b      	strh	r3, [r7, #0]
  
  int16_t deltax = 0, deltay = 0, x = 0, y = 0, xinc1 = 0, xinc2 = 0, 
 8011c22:	2300      	movs	r3, #0
 8011c24:	823b      	strh	r3, [r7, #16]
 8011c26:	2300      	movs	r3, #0
 8011c28:	81fb      	strh	r3, [r7, #14]
 8011c2a:	2300      	movs	r3, #0
 8011c2c:	84fb      	strh	r3, [r7, #38]	; 0x26
 8011c2e:	2300      	movs	r3, #0
 8011c30:	84bb      	strh	r3, [r7, #36]	; 0x24
 8011c32:	2300      	movs	r3, #0
 8011c34:	847b      	strh	r3, [r7, #34]	; 0x22
 8011c36:	2300      	movs	r3, #0
 8011c38:	843b      	strh	r3, [r7, #32]
  yinc1 = 0, yinc2 = 0, den = 0, num = 0, numadd = 0, numpixels = 0, 
 8011c3a:	2300      	movs	r3, #0
 8011c3c:	83fb      	strh	r3, [r7, #30]
 8011c3e:	2300      	movs	r3, #0
 8011c40:	83bb      	strh	r3, [r7, #28]
 8011c42:	2300      	movs	r3, #0
 8011c44:	837b      	strh	r3, [r7, #26]
 8011c46:	2300      	movs	r3, #0
 8011c48:	833b      	strh	r3, [r7, #24]
 8011c4a:	2300      	movs	r3, #0
 8011c4c:	82fb      	strh	r3, [r7, #22]
 8011c4e:	2300      	movs	r3, #0
 8011c50:	82bb      	strh	r3, [r7, #20]
  curpixel = 0;
 8011c52:	2300      	movs	r3, #0
 8011c54:	827b      	strh	r3, [r7, #18]
  
  deltax = ABS(x2 - x1);        /* The difference between the x's */
 8011c56:	88ba      	ldrh	r2, [r7, #4]
 8011c58:	88fb      	ldrh	r3, [r7, #6]
 8011c5a:	1ad3      	subs	r3, r2, r3
 8011c5c:	2b00      	cmp	r3, #0
 8011c5e:	bfb8      	it	lt
 8011c60:	425b      	neglt	r3, r3
 8011c62:	823b      	strh	r3, [r7, #16]
  deltay = ABS(y2 - y1);        /* The difference between the y's */
 8011c64:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8011c66:	883b      	ldrh	r3, [r7, #0]
 8011c68:	1ad3      	subs	r3, r2, r3
 8011c6a:	2b00      	cmp	r3, #0
 8011c6c:	bfb8      	it	lt
 8011c6e:	425b      	neglt	r3, r3
 8011c70:	81fb      	strh	r3, [r7, #14]
  x = x1;                       /* Start x off at the first pixel */
 8011c72:	88fb      	ldrh	r3, [r7, #6]
 8011c74:	84fb      	strh	r3, [r7, #38]	; 0x26
  y = y1;                       /* Start y off at the first pixel */
 8011c76:	883b      	ldrh	r3, [r7, #0]
 8011c78:	84bb      	strh	r3, [r7, #36]	; 0x24
  
  if (x2 >= x1)                 /* The x-values are increasing */
 8011c7a:	88ba      	ldrh	r2, [r7, #4]
 8011c7c:	88fb      	ldrh	r3, [r7, #6]
 8011c7e:	429a      	cmp	r2, r3
 8011c80:	d304      	bcc.n	8011c8c <LCD_FillTriangle+0x88>
  {
    xinc1 = 1;
 8011c82:	2301      	movs	r3, #1
 8011c84:	847b      	strh	r3, [r7, #34]	; 0x22
    xinc2 = 1;
 8011c86:	2301      	movs	r3, #1
 8011c88:	843b      	strh	r3, [r7, #32]
 8011c8a:	e005      	b.n	8011c98 <LCD_FillTriangle+0x94>
  }
  else                          /* The x-values are decreasing */
  {
    xinc1 = -1;
 8011c8c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011c90:	847b      	strh	r3, [r7, #34]	; 0x22
    xinc2 = -1;
 8011c92:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011c96:	843b      	strh	r3, [r7, #32]
  }
  
  if (y2 >= y1)                 /* The y-values are increasing */
 8011c98:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8011c9a:	883b      	ldrh	r3, [r7, #0]
 8011c9c:	429a      	cmp	r2, r3
 8011c9e:	d304      	bcc.n	8011caa <LCD_FillTriangle+0xa6>
  {
    yinc1 = 1;
 8011ca0:	2301      	movs	r3, #1
 8011ca2:	83fb      	strh	r3, [r7, #30]
    yinc2 = 1;
 8011ca4:	2301      	movs	r3, #1
 8011ca6:	83bb      	strh	r3, [r7, #28]
 8011ca8:	e005      	b.n	8011cb6 <LCD_FillTriangle+0xb2>
  }
  else                          /* The y-values are decreasing */
  {
    yinc1 = -1;
 8011caa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011cae:	83fb      	strh	r3, [r7, #30]
    yinc2 = -1;
 8011cb0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011cb4:	83bb      	strh	r3, [r7, #28]
  }
  
  if (deltax >= deltay)         /* There is at least one x-value for every y-value */
 8011cb6:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8011cba:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8011cbe:	429a      	cmp	r2, r3
 8011cc0:	db10      	blt.n	8011ce4 <LCD_FillTriangle+0xe0>
  {
    xinc1 = 0;                  /* Don't change the x when numerator >= denominator */
 8011cc2:	2300      	movs	r3, #0
 8011cc4:	847b      	strh	r3, [r7, #34]	; 0x22
    yinc2 = 0;                  /* Don't change the y for every iteration */
 8011cc6:	2300      	movs	r3, #0
 8011cc8:	83bb      	strh	r3, [r7, #28]
    den = deltax;
 8011cca:	8a3b      	ldrh	r3, [r7, #16]
 8011ccc:	837b      	strh	r3, [r7, #26]
    num = deltax / 2;
 8011cce:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8011cd2:	0fda      	lsrs	r2, r3, #31
 8011cd4:	4413      	add	r3, r2
 8011cd6:	105b      	asrs	r3, r3, #1
 8011cd8:	833b      	strh	r3, [r7, #24]
    numadd = deltay;
 8011cda:	89fb      	ldrh	r3, [r7, #14]
 8011cdc:	82fb      	strh	r3, [r7, #22]
    numpixels = deltax;         /* There are more x-values than y-values */
 8011cde:	8a3b      	ldrh	r3, [r7, #16]
 8011ce0:	82bb      	strh	r3, [r7, #20]
 8011ce2:	e00f      	b.n	8011d04 <LCD_FillTriangle+0x100>
  }
  else                          /* There is at least one y-value for every x-value */
  {
    xinc2 = 0;                  /* Don't change the x for every iteration */
 8011ce4:	2300      	movs	r3, #0
 8011ce6:	843b      	strh	r3, [r7, #32]
    yinc1 = 0;                  /* Don't change the y when numerator >= denominator */
 8011ce8:	2300      	movs	r3, #0
 8011cea:	83fb      	strh	r3, [r7, #30]
    den = deltay;
 8011cec:	89fb      	ldrh	r3, [r7, #14]
 8011cee:	837b      	strh	r3, [r7, #26]
    num = deltay / 2;
 8011cf0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8011cf4:	0fda      	lsrs	r2, r3, #31
 8011cf6:	4413      	add	r3, r2
 8011cf8:	105b      	asrs	r3, r3, #1
 8011cfa:	833b      	strh	r3, [r7, #24]
    numadd = deltax;
 8011cfc:	8a3b      	ldrh	r3, [r7, #16]
 8011cfe:	82fb      	strh	r3, [r7, #22]
    numpixels = deltay;         /* There are more y-values than x-values */
 8011d00:	89fb      	ldrh	r3, [r7, #14]
 8011d02:	82bb      	strh	r3, [r7, #20]
  }
  
  for (curpixel = 0; curpixel <= numpixels; curpixel++)
 8011d04:	2300      	movs	r3, #0
 8011d06:	827b      	strh	r3, [r7, #18]
 8011d08:	e02f      	b.n	8011d6a <LCD_FillTriangle+0x166>
  {
    LCD_DrawUniLine(x, y, x3, y3);
 8011d0a:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 8011d0c:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8011d0e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8011d10:	887a      	ldrh	r2, [r7, #2]
 8011d12:	f7ff fe76 	bl	8011a02 <LCD_DrawUniLine>
    
    num += numadd;              /* Increase the numerator by the top of the fraction */
 8011d16:	8b3a      	ldrh	r2, [r7, #24]
 8011d18:	8afb      	ldrh	r3, [r7, #22]
 8011d1a:	4413      	add	r3, r2
 8011d1c:	b29b      	uxth	r3, r3
 8011d1e:	833b      	strh	r3, [r7, #24]
    if (num >= den)             /* Check if numerator >= denominator */
 8011d20:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8011d24:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8011d28:	429a      	cmp	r2, r3
 8011d2a:	db0e      	blt.n	8011d4a <LCD_FillTriangle+0x146>
    {
      num -= den;               /* Calculate the new numerator value */
 8011d2c:	8b3a      	ldrh	r2, [r7, #24]
 8011d2e:	8b7b      	ldrh	r3, [r7, #26]
 8011d30:	1ad3      	subs	r3, r2, r3
 8011d32:	b29b      	uxth	r3, r3
 8011d34:	833b      	strh	r3, [r7, #24]
      x += xinc1;               /* Change the x as appropriate */
 8011d36:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8011d38:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011d3a:	4413      	add	r3, r2
 8011d3c:	b29b      	uxth	r3, r3
 8011d3e:	84fb      	strh	r3, [r7, #38]	; 0x26
      y += yinc1;               /* Change the y as appropriate */
 8011d40:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8011d42:	8bfb      	ldrh	r3, [r7, #30]
 8011d44:	4413      	add	r3, r2
 8011d46:	b29b      	uxth	r3, r3
 8011d48:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    x += xinc2;                 /* Change the x as appropriate */
 8011d4a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8011d4c:	8c3b      	ldrh	r3, [r7, #32]
 8011d4e:	4413      	add	r3, r2
 8011d50:	b29b      	uxth	r3, r3
 8011d52:	84fb      	strh	r3, [r7, #38]	; 0x26
    y += yinc2;                 /* Change the y as appropriate */
 8011d54:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8011d56:	8bbb      	ldrh	r3, [r7, #28]
 8011d58:	4413      	add	r3, r2
 8011d5a:	b29b      	uxth	r3, r3
 8011d5c:	84bb      	strh	r3, [r7, #36]	; 0x24
  for (curpixel = 0; curpixel <= numpixels; curpixel++)
 8011d5e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8011d62:	b29b      	uxth	r3, r3
 8011d64:	3301      	adds	r3, #1
 8011d66:	b29b      	uxth	r3, r3
 8011d68:	827b      	strh	r3, [r7, #18]
 8011d6a:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8011d6e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8011d72:	429a      	cmp	r2, r3
 8011d74:	ddc9      	ble.n	8011d0a <LCD_FillTriangle+0x106>
  }  
  
  
}
 8011d76:	bf00      	nop
 8011d78:	372c      	adds	r7, #44	; 0x2c
 8011d7a:	46bd      	mov	sp, r7
 8011d7c:	bd90      	pop	{r4, r7, pc}

08011d7e <LCD_PolyLine>:
  * @param  Points: pointer to the points array.
  * @param  PointCount: Number of points.
  * @retval None
  */
void LCD_PolyLine(pPoint Points, uint16_t PointCount)
{
 8011d7e:	b580      	push	{r7, lr}
 8011d80:	b084      	sub	sp, #16
 8011d82:	af00      	add	r7, sp, #0
 8011d84:	6078      	str	r0, [r7, #4]
 8011d86:	460b      	mov	r3, r1
 8011d88:	807b      	strh	r3, [r7, #2]
  int16_t X = 0, Y = 0;
 8011d8a:	2300      	movs	r3, #0
 8011d8c:	81fb      	strh	r3, [r7, #14]
 8011d8e:	2300      	movs	r3, #0
 8011d90:	81bb      	strh	r3, [r7, #12]

  if(PointCount < 2)
 8011d92:	887b      	ldrh	r3, [r7, #2]
 8011d94:	2b01      	cmp	r3, #1
 8011d96:	d91c      	bls.n	8011dd2 <LCD_PolyLine+0x54>
  {
    return;
  }

  while(--PointCount)
 8011d98:	e014      	b.n	8011dc4 <LCD_PolyLine+0x46>
  {
    X = Points->X;
 8011d9a:	687b      	ldr	r3, [r7, #4]
 8011d9c:	881b      	ldrh	r3, [r3, #0]
 8011d9e:	81fb      	strh	r3, [r7, #14]
    Y = Points->Y;
 8011da0:	687b      	ldr	r3, [r7, #4]
 8011da2:	885b      	ldrh	r3, [r3, #2]
 8011da4:	81bb      	strh	r3, [r7, #12]
    Points++;
 8011da6:	687b      	ldr	r3, [r7, #4]
 8011da8:	3304      	adds	r3, #4
 8011daa:	607b      	str	r3, [r7, #4]
    LCD_DrawUniLine(X, Y, Points->X, Points->Y);
 8011dac:	89f8      	ldrh	r0, [r7, #14]
 8011dae:	89b9      	ldrh	r1, [r7, #12]
 8011db0:	687b      	ldr	r3, [r7, #4]
 8011db2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011db6:	b29a      	uxth	r2, r3
 8011db8:	687b      	ldr	r3, [r7, #4]
 8011dba:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8011dbe:	b29b      	uxth	r3, r3
 8011dc0:	f7ff fe1f 	bl	8011a02 <LCD_DrawUniLine>
  while(--PointCount)
 8011dc4:	887b      	ldrh	r3, [r7, #2]
 8011dc6:	3b01      	subs	r3, #1
 8011dc8:	807b      	strh	r3, [r7, #2]
 8011dca:	887b      	ldrh	r3, [r7, #2]
 8011dcc:	2b00      	cmp	r3, #0
 8011dce:	d1e4      	bne.n	8011d9a <LCD_PolyLine+0x1c>
 8011dd0:	e000      	b.n	8011dd4 <LCD_PolyLine+0x56>
    return;
 8011dd2:	bf00      	nop
  }
}
 8011dd4:	3710      	adds	r7, #16
 8011dd6:	46bd      	mov	sp, r7
 8011dd8:	bd80      	pop	{r7, pc}

08011dda <LCD_PolyLineRelativeClosed>:
  * @param  Closed: specifies if the draw is closed or not.
  *           1: closed, 0 : not closed.
  * @retval None
  */
static void LCD_PolyLineRelativeClosed(pPoint Points, uint16_t PointCount, uint16_t Closed)
{
 8011dda:	b590      	push	{r4, r7, lr}
 8011ddc:	b085      	sub	sp, #20
 8011dde:	af00      	add	r7, sp, #0
 8011de0:	6078      	str	r0, [r7, #4]
 8011de2:	460b      	mov	r3, r1
 8011de4:	807b      	strh	r3, [r7, #2]
 8011de6:	4613      	mov	r3, r2
 8011de8:	803b      	strh	r3, [r7, #0]
  int16_t X = 0, Y = 0;
 8011dea:	2300      	movs	r3, #0
 8011dec:	81fb      	strh	r3, [r7, #14]
 8011dee:	2300      	movs	r3, #0
 8011df0:	81bb      	strh	r3, [r7, #12]
  pPoint First = Points;
 8011df2:	687b      	ldr	r3, [r7, #4]
 8011df4:	60bb      	str	r3, [r7, #8]

  if(PointCount < 2)
 8011df6:	887b      	ldrh	r3, [r7, #2]
 8011df8:	2b01      	cmp	r3, #1
 8011dfa:	d942      	bls.n	8011e82 <LCD_PolyLineRelativeClosed+0xa8>
  {
    return;
  }  
  X = Points->X;
 8011dfc:	687b      	ldr	r3, [r7, #4]
 8011dfe:	881b      	ldrh	r3, [r3, #0]
 8011e00:	81fb      	strh	r3, [r7, #14]
  Y = Points->Y;
 8011e02:	687b      	ldr	r3, [r7, #4]
 8011e04:	885b      	ldrh	r3, [r3, #2]
 8011e06:	81bb      	strh	r3, [r7, #12]
  while(--PointCount)
 8011e08:	e025      	b.n	8011e56 <LCD_PolyLineRelativeClosed+0x7c>
  {
    Points++;
 8011e0a:	687b      	ldr	r3, [r7, #4]
 8011e0c:	3304      	adds	r3, #4
 8011e0e:	607b      	str	r3, [r7, #4]
    LCD_DrawUniLine(X, Y, X + Points->X, Y + Points->Y);
 8011e10:	89f8      	ldrh	r0, [r7, #14]
 8011e12:	89b9      	ldrh	r1, [r7, #12]
 8011e14:	687b      	ldr	r3, [r7, #4]
 8011e16:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011e1a:	b29a      	uxth	r2, r3
 8011e1c:	89fb      	ldrh	r3, [r7, #14]
 8011e1e:	4413      	add	r3, r2
 8011e20:	b29c      	uxth	r4, r3
 8011e22:	687b      	ldr	r3, [r7, #4]
 8011e24:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8011e28:	b29a      	uxth	r2, r3
 8011e2a:	89bb      	ldrh	r3, [r7, #12]
 8011e2c:	4413      	add	r3, r2
 8011e2e:	b29b      	uxth	r3, r3
 8011e30:	4622      	mov	r2, r4
 8011e32:	f7ff fde6 	bl	8011a02 <LCD_DrawUniLine>
    X = X + Points->X;
 8011e36:	687b      	ldr	r3, [r7, #4]
 8011e38:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011e3c:	b29a      	uxth	r2, r3
 8011e3e:	89fb      	ldrh	r3, [r7, #14]
 8011e40:	4413      	add	r3, r2
 8011e42:	b29b      	uxth	r3, r3
 8011e44:	81fb      	strh	r3, [r7, #14]
    Y = Y + Points->Y;
 8011e46:	687b      	ldr	r3, [r7, #4]
 8011e48:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8011e4c:	b29a      	uxth	r2, r3
 8011e4e:	89bb      	ldrh	r3, [r7, #12]
 8011e50:	4413      	add	r3, r2
 8011e52:	b29b      	uxth	r3, r3
 8011e54:	81bb      	strh	r3, [r7, #12]
  while(--PointCount)
 8011e56:	887b      	ldrh	r3, [r7, #2]
 8011e58:	3b01      	subs	r3, #1
 8011e5a:	807b      	strh	r3, [r7, #2]
 8011e5c:	887b      	ldrh	r3, [r7, #2]
 8011e5e:	2b00      	cmp	r3, #0
 8011e60:	d1d3      	bne.n	8011e0a <LCD_PolyLineRelativeClosed+0x30>
  }
  if(Closed)
 8011e62:	883b      	ldrh	r3, [r7, #0]
 8011e64:	2b00      	cmp	r3, #0
 8011e66:	d00d      	beq.n	8011e84 <LCD_PolyLineRelativeClosed+0xaa>
  {
    LCD_DrawUniLine(First->X, First->Y, X, Y);
 8011e68:	68bb      	ldr	r3, [r7, #8]
 8011e6a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011e6e:	b298      	uxth	r0, r3
 8011e70:	68bb      	ldr	r3, [r7, #8]
 8011e72:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8011e76:	b299      	uxth	r1, r3
 8011e78:	89fa      	ldrh	r2, [r7, #14]
 8011e7a:	89bb      	ldrh	r3, [r7, #12]
 8011e7c:	f7ff fdc1 	bl	8011a02 <LCD_DrawUniLine>
 8011e80:	e000      	b.n	8011e84 <LCD_PolyLineRelativeClosed+0xaa>
    return;
 8011e82:	bf00      	nop
  }  
}
 8011e84:	3714      	adds	r7, #20
 8011e86:	46bd      	mov	sp, r7
 8011e88:	bd90      	pop	{r4, r7, pc}

08011e8a <LCD_ClosedPolyLine>:
  * @param  Points: pointer to the points array.
  * @param  PointCount: Number of points.
  * @retval None
  */
void LCD_ClosedPolyLine(pPoint Points, uint16_t PointCount)
{
 8011e8a:	b590      	push	{r4, r7, lr}
 8011e8c:	b083      	sub	sp, #12
 8011e8e:	af00      	add	r7, sp, #0
 8011e90:	6078      	str	r0, [r7, #4]
 8011e92:	460b      	mov	r3, r1
 8011e94:	807b      	strh	r3, [r7, #2]
  LCD_PolyLine(Points, PointCount);
 8011e96:	887b      	ldrh	r3, [r7, #2]
 8011e98:	4619      	mov	r1, r3
 8011e9a:	6878      	ldr	r0, [r7, #4]
 8011e9c:	f7ff ff6f 	bl	8011d7e <LCD_PolyLine>
  LCD_DrawUniLine(Points->X, Points->Y, (Points+PointCount-1)->X, (Points+PointCount-1)->Y);
 8011ea0:	687b      	ldr	r3, [r7, #4]
 8011ea2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011ea6:	b298      	uxth	r0, r3
 8011ea8:	687b      	ldr	r3, [r7, #4]
 8011eaa:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8011eae:	b299      	uxth	r1, r3
 8011eb0:	887b      	ldrh	r3, [r7, #2]
 8011eb2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8011eb6:	3b01      	subs	r3, #1
 8011eb8:	009b      	lsls	r3, r3, #2
 8011eba:	687a      	ldr	r2, [r7, #4]
 8011ebc:	4413      	add	r3, r2
 8011ebe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011ec2:	b29c      	uxth	r4, r3
 8011ec4:	887b      	ldrh	r3, [r7, #2]
 8011ec6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8011eca:	3b01      	subs	r3, #1
 8011ecc:	009b      	lsls	r3, r3, #2
 8011ece:	687a      	ldr	r2, [r7, #4]
 8011ed0:	4413      	add	r3, r2
 8011ed2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8011ed6:	b29b      	uxth	r3, r3
 8011ed8:	4622      	mov	r2, r4
 8011eda:	f7ff fd92 	bl	8011a02 <LCD_DrawUniLine>
}
 8011ede:	bf00      	nop
 8011ee0:	370c      	adds	r7, #12
 8011ee2:	46bd      	mov	sp, r7
 8011ee4:	bd90      	pop	{r4, r7, pc}

08011ee6 <LCD_PolyLineRelative>:
  * @param  Points: pointer to the points array.
  * @param  PointCount: Number of points.
  * @retval None
  */
void LCD_PolyLineRelative(pPoint Points, uint16_t PointCount)
{
 8011ee6:	b580      	push	{r7, lr}
 8011ee8:	b082      	sub	sp, #8
 8011eea:	af00      	add	r7, sp, #0
 8011eec:	6078      	str	r0, [r7, #4]
 8011eee:	460b      	mov	r3, r1
 8011ef0:	807b      	strh	r3, [r7, #2]
  LCD_PolyLineRelativeClosed(Points, PointCount, 0);
 8011ef2:	887b      	ldrh	r3, [r7, #2]
 8011ef4:	2200      	movs	r2, #0
 8011ef6:	4619      	mov	r1, r3
 8011ef8:	6878      	ldr	r0, [r7, #4]
 8011efa:	f7ff ff6e 	bl	8011dda <LCD_PolyLineRelativeClosed>
}
 8011efe:	bf00      	nop
 8011f00:	3708      	adds	r7, #8
 8011f02:	46bd      	mov	sp, r7
 8011f04:	bd80      	pop	{r7, pc}

08011f06 <LCD_ClosedPolyLineRelative>:
  * @param  Points: pointer to the points array.
  * @param  PointCount: Number of points.
  * @retval None
  */
void LCD_ClosedPolyLineRelative(pPoint Points, uint16_t PointCount)
{
 8011f06:	b580      	push	{r7, lr}
 8011f08:	b082      	sub	sp, #8
 8011f0a:	af00      	add	r7, sp, #0
 8011f0c:	6078      	str	r0, [r7, #4]
 8011f0e:	460b      	mov	r3, r1
 8011f10:	807b      	strh	r3, [r7, #2]
  LCD_PolyLineRelativeClosed(Points, PointCount, 1);
 8011f12:	887b      	ldrh	r3, [r7, #2]
 8011f14:	2201      	movs	r2, #1
 8011f16:	4619      	mov	r1, r3
 8011f18:	6878      	ldr	r0, [r7, #4]
 8011f1a:	f7ff ff5e 	bl	8011dda <LCD_PolyLineRelativeClosed>
}
 8011f1e:	bf00      	nop
 8011f20:	3708      	adds	r7, #8
 8011f22:	46bd      	mov	sp, r7
 8011f24:	bd80      	pop	{r7, pc}

08011f26 <LCD_FillPolyLine>:
  * @param  Points: pointer to the points array.
  * @param  PointCount: Number of points.
  * @retval None
  */
void LCD_FillPolyLine(pPoint Points, uint16_t PointCount)
{
 8011f26:	b5b0      	push	{r4, r5, r7, lr}
 8011f28:	b08c      	sub	sp, #48	; 0x30
 8011f2a:	af02      	add	r7, sp, #8
 8011f2c:	6078      	str	r0, [r7, #4]
 8011f2e:	460b      	mov	r3, r1
 8011f30:	807b      	strh	r3, [r7, #2]
 
  int16_t X = 0, Y = 0, X2 = 0, Y2 = 0, X_center = 0, Y_center = 0, X_first = 0, Y_first = 0, pixelX = 0, pixelY = 0, counter = 0;
 8011f32:	2300      	movs	r3, #0
 8011f34:	833b      	strh	r3, [r7, #24]
 8011f36:	2300      	movs	r3, #0
 8011f38:	82fb      	strh	r3, [r7, #22]
 8011f3a:	2300      	movs	r3, #0
 8011f3c:	84fb      	strh	r3, [r7, #38]	; 0x26
 8011f3e:	2300      	movs	r3, #0
 8011f40:	84bb      	strh	r3, [r7, #36]	; 0x24
 8011f42:	2300      	movs	r3, #0
 8011f44:	82bb      	strh	r3, [r7, #20]
 8011f46:	2300      	movs	r3, #0
 8011f48:	827b      	strh	r3, [r7, #18]
 8011f4a:	2300      	movs	r3, #0
 8011f4c:	823b      	strh	r3, [r7, #16]
 8011f4e:	2300      	movs	r3, #0
 8011f50:	81fb      	strh	r3, [r7, #14]
 8011f52:	2300      	movs	r3, #0
 8011f54:	81bb      	strh	r3, [r7, #12]
 8011f56:	2300      	movs	r3, #0
 8011f58:	817b      	strh	r3, [r7, #10]
 8011f5a:	2300      	movs	r3, #0
 8011f5c:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t  IMAGE_LEFT = 0, IMAGE_RIGHT = 0, IMAGE_TOP = 0, IMAGE_BOTTOM = 0;  
 8011f5e:	2300      	movs	r3, #0
 8011f60:	843b      	strh	r3, [r7, #32]
 8011f62:	2300      	movs	r3, #0
 8011f64:	83fb      	strh	r3, [r7, #30]
 8011f66:	2300      	movs	r3, #0
 8011f68:	83bb      	strh	r3, [r7, #28]
 8011f6a:	2300      	movs	r3, #0
 8011f6c:	837b      	strh	r3, [r7, #26]

  IMAGE_LEFT = IMAGE_RIGHT = Points->X;
 8011f6e:	687b      	ldr	r3, [r7, #4]
 8011f70:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011f74:	83fb      	strh	r3, [r7, #30]
 8011f76:	8bfb      	ldrh	r3, [r7, #30]
 8011f78:	843b      	strh	r3, [r7, #32]
  IMAGE_TOP= IMAGE_BOTTOM = Points->Y;
 8011f7a:	687b      	ldr	r3, [r7, #4]
 8011f7c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8011f80:	837b      	strh	r3, [r7, #26]
 8011f82:	8b7b      	ldrh	r3, [r7, #26]
 8011f84:	83bb      	strh	r3, [r7, #28]

  for(counter = 1; counter < PointCount; counter++)
 8011f86:	2301      	movs	r3, #1
 8011f88:	847b      	strh	r3, [r7, #34]	; 0x22
 8011f8a:	e02f      	b.n	8011fec <LCD_FillPolyLine+0xc6>
  {
    pixelX = POLY_X(counter);
 8011f8c:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8011f90:	009b      	lsls	r3, r3, #2
 8011f92:	687a      	ldr	r2, [r7, #4]
 8011f94:	4413      	add	r3, r2
 8011f96:	885b      	ldrh	r3, [r3, #2]
 8011f98:	81bb      	strh	r3, [r7, #12]
    if(pixelX < IMAGE_LEFT)
 8011f9a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8011f9e:	8c3b      	ldrh	r3, [r7, #32]
 8011fa0:	429a      	cmp	r2, r3
 8011fa2:	da01      	bge.n	8011fa8 <LCD_FillPolyLine+0x82>
    {
      IMAGE_LEFT = pixelX;
 8011fa4:	89bb      	ldrh	r3, [r7, #12]
 8011fa6:	843b      	strh	r3, [r7, #32]
    }
    if(pixelX > IMAGE_RIGHT)
 8011fa8:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8011fac:	8bfb      	ldrh	r3, [r7, #30]
 8011fae:	429a      	cmp	r2, r3
 8011fb0:	dd01      	ble.n	8011fb6 <LCD_FillPolyLine+0x90>
    {
      IMAGE_RIGHT = pixelX;
 8011fb2:	89bb      	ldrh	r3, [r7, #12]
 8011fb4:	83fb      	strh	r3, [r7, #30]
    }
    
    pixelY = POLY_Y(counter);
 8011fb6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8011fba:	009b      	lsls	r3, r3, #2
 8011fbc:	687a      	ldr	r2, [r7, #4]
 8011fbe:	4413      	add	r3, r2
 8011fc0:	881b      	ldrh	r3, [r3, #0]
 8011fc2:	817b      	strh	r3, [r7, #10]
    if(pixelY < IMAGE_TOP)
 8011fc4:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8011fc8:	8bbb      	ldrh	r3, [r7, #28]
 8011fca:	429a      	cmp	r2, r3
 8011fcc:	da01      	bge.n	8011fd2 <LCD_FillPolyLine+0xac>
    { 
      IMAGE_TOP = pixelY;
 8011fce:	897b      	ldrh	r3, [r7, #10]
 8011fd0:	83bb      	strh	r3, [r7, #28]
    }
    if(pixelY > IMAGE_BOTTOM)
 8011fd2:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8011fd6:	8b7b      	ldrh	r3, [r7, #26]
 8011fd8:	429a      	cmp	r2, r3
 8011fda:	dd01      	ble.n	8011fe0 <LCD_FillPolyLine+0xba>
    {
      IMAGE_BOTTOM = pixelY;
 8011fdc:	897b      	ldrh	r3, [r7, #10]
 8011fde:	837b      	strh	r3, [r7, #26]
  for(counter = 1; counter < PointCount; counter++)
 8011fe0:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8011fe4:	b29b      	uxth	r3, r3
 8011fe6:	3301      	adds	r3, #1
 8011fe8:	b29b      	uxth	r3, r3
 8011fea:	847b      	strh	r3, [r7, #34]	; 0x22
 8011fec:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 8011ff0:	887b      	ldrh	r3, [r7, #2]
 8011ff2:	429a      	cmp	r2, r3
 8011ff4:	dbca      	blt.n	8011f8c <LCD_FillPolyLine+0x66>
    }
  }  
  
  if(PointCount < 2)
 8011ff6:	887b      	ldrh	r3, [r7, #2]
 8011ff8:	2b01      	cmp	r3, #1
 8011ffa:	d972      	bls.n	80120e2 <LCD_FillPolyLine+0x1bc>
  {
    return;
  }
  
  X_center = (IMAGE_LEFT + IMAGE_RIGHT)/2;
 8011ffc:	8c3a      	ldrh	r2, [r7, #32]
 8011ffe:	8bfb      	ldrh	r3, [r7, #30]
 8012000:	4413      	add	r3, r2
 8012002:	0fda      	lsrs	r2, r3, #31
 8012004:	4413      	add	r3, r2
 8012006:	105b      	asrs	r3, r3, #1
 8012008:	82bb      	strh	r3, [r7, #20]
  Y_center = (IMAGE_BOTTOM + IMAGE_TOP)/2;
 801200a:	8b7a      	ldrh	r2, [r7, #26]
 801200c:	8bbb      	ldrh	r3, [r7, #28]
 801200e:	4413      	add	r3, r2
 8012010:	0fda      	lsrs	r2, r3, #31
 8012012:	4413      	add	r3, r2
 8012014:	105b      	asrs	r3, r3, #1
 8012016:	827b      	strh	r3, [r7, #18]
 
  X_first = Points->X;
 8012018:	687b      	ldr	r3, [r7, #4]
 801201a:	881b      	ldrh	r3, [r3, #0]
 801201c:	823b      	strh	r3, [r7, #16]
  Y_first = Points->Y;
 801201e:	687b      	ldr	r3, [r7, #4]
 8012020:	885b      	ldrh	r3, [r3, #2]
 8012022:	81fb      	strh	r3, [r7, #14]
  
  while(--PointCount)
 8012024:	e032      	b.n	801208c <LCD_FillPolyLine+0x166>
  {
    X = Points->X;
 8012026:	687b      	ldr	r3, [r7, #4]
 8012028:	881b      	ldrh	r3, [r3, #0]
 801202a:	833b      	strh	r3, [r7, #24]
    Y = Points->Y;
 801202c:	687b      	ldr	r3, [r7, #4]
 801202e:	885b      	ldrh	r3, [r3, #2]
 8012030:	82fb      	strh	r3, [r7, #22]
    Points++;
 8012032:	687b      	ldr	r3, [r7, #4]
 8012034:	3304      	adds	r3, #4
 8012036:	607b      	str	r3, [r7, #4]
    X2 = Points->X;
 8012038:	687b      	ldr	r3, [r7, #4]
 801203a:	881b      	ldrh	r3, [r3, #0]
 801203c:	84fb      	strh	r3, [r7, #38]	; 0x26
    Y2 = Points->Y;    
 801203e:	687b      	ldr	r3, [r7, #4]
 8012040:	885b      	ldrh	r3, [r3, #2]
 8012042:	84bb      	strh	r3, [r7, #36]	; 0x24
  
    LCD_FillTriangle(X, X2, X_center, Y, Y2, Y_center);
 8012044:	8b38      	ldrh	r0, [r7, #24]
 8012046:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 8012048:	8abc      	ldrh	r4, [r7, #20]
 801204a:	8afd      	ldrh	r5, [r7, #22]
 801204c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801204e:	8a7a      	ldrh	r2, [r7, #18]
 8012050:	9201      	str	r2, [sp, #4]
 8012052:	9300      	str	r3, [sp, #0]
 8012054:	462b      	mov	r3, r5
 8012056:	4622      	mov	r2, r4
 8012058:	f7ff fdd4 	bl	8011c04 <LCD_FillTriangle>
    LCD_FillTriangle(X, X_center, X2, Y, Y_center, Y2);
 801205c:	8b38      	ldrh	r0, [r7, #24]
 801205e:	8ab9      	ldrh	r1, [r7, #20]
 8012060:	8cfc      	ldrh	r4, [r7, #38]	; 0x26
 8012062:	8afd      	ldrh	r5, [r7, #22]
 8012064:	8a7b      	ldrh	r3, [r7, #18]
 8012066:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8012068:	9201      	str	r2, [sp, #4]
 801206a:	9300      	str	r3, [sp, #0]
 801206c:	462b      	mov	r3, r5
 801206e:	4622      	mov	r2, r4
 8012070:	f7ff fdc8 	bl	8011c04 <LCD_FillTriangle>
    LCD_FillTriangle(X_center, X2, X, Y_center, Y2, Y);   
 8012074:	8ab8      	ldrh	r0, [r7, #20]
 8012076:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 8012078:	8b3c      	ldrh	r4, [r7, #24]
 801207a:	8a7d      	ldrh	r5, [r7, #18]
 801207c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801207e:	8afa      	ldrh	r2, [r7, #22]
 8012080:	9201      	str	r2, [sp, #4]
 8012082:	9300      	str	r3, [sp, #0]
 8012084:	462b      	mov	r3, r5
 8012086:	4622      	mov	r2, r4
 8012088:	f7ff fdbc 	bl	8011c04 <LCD_FillTriangle>
  while(--PointCount)
 801208c:	887b      	ldrh	r3, [r7, #2]
 801208e:	3b01      	subs	r3, #1
 8012090:	807b      	strh	r3, [r7, #2]
 8012092:	887b      	ldrh	r3, [r7, #2]
 8012094:	2b00      	cmp	r3, #0
 8012096:	d1c6      	bne.n	8012026 <LCD_FillPolyLine+0x100>
  }
  
  LCD_FillTriangle(X_first, X2, X_center, Y_first, Y2, Y_center);
 8012098:	8a38      	ldrh	r0, [r7, #16]
 801209a:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 801209c:	8abc      	ldrh	r4, [r7, #20]
 801209e:	89fd      	ldrh	r5, [r7, #14]
 80120a0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80120a2:	8a7a      	ldrh	r2, [r7, #18]
 80120a4:	9201      	str	r2, [sp, #4]
 80120a6:	9300      	str	r3, [sp, #0]
 80120a8:	462b      	mov	r3, r5
 80120aa:	4622      	mov	r2, r4
 80120ac:	f7ff fdaa 	bl	8011c04 <LCD_FillTriangle>
  LCD_FillTriangle(X_first, X_center, X2, Y_first, Y_center, Y2);
 80120b0:	8a38      	ldrh	r0, [r7, #16]
 80120b2:	8ab9      	ldrh	r1, [r7, #20]
 80120b4:	8cfc      	ldrh	r4, [r7, #38]	; 0x26
 80120b6:	89fd      	ldrh	r5, [r7, #14]
 80120b8:	8a7b      	ldrh	r3, [r7, #18]
 80120ba:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80120bc:	9201      	str	r2, [sp, #4]
 80120be:	9300      	str	r3, [sp, #0]
 80120c0:	462b      	mov	r3, r5
 80120c2:	4622      	mov	r2, r4
 80120c4:	f7ff fd9e 	bl	8011c04 <LCD_FillTriangle>
  LCD_FillTriangle(X_center, X2, X_first, Y_center, Y2, Y_first); 
 80120c8:	8ab8      	ldrh	r0, [r7, #20]
 80120ca:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 80120cc:	8a3c      	ldrh	r4, [r7, #16]
 80120ce:	8a7d      	ldrh	r5, [r7, #18]
 80120d0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80120d2:	89fa      	ldrh	r2, [r7, #14]
 80120d4:	9201      	str	r2, [sp, #4]
 80120d6:	9300      	str	r3, [sp, #0]
 80120d8:	462b      	mov	r3, r5
 80120da:	4622      	mov	r2, r4
 80120dc:	f7ff fd92 	bl	8011c04 <LCD_FillTriangle>
 80120e0:	e000      	b.n	80120e4 <LCD_FillPolyLine+0x1be>
    return;
 80120e2:	bf00      	nop
}
 80120e4:	3728      	adds	r7, #40	; 0x28
 80120e6:	46bd      	mov	sp, r7
 80120e8:	bdb0      	pop	{r4, r5, r7, pc}

080120ea <LCD_WriteCommand>:
  * @brief  Writes command to select the LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void LCD_WriteCommand(uint8_t LCD_Reg)
{
 80120ea:	b580      	push	{r7, lr}
 80120ec:	b082      	sub	sp, #8
 80120ee:	af00      	add	r7, sp, #0
 80120f0:	4603      	mov	r3, r0
 80120f2:	71fb      	strb	r3, [r7, #7]
    /* Reset WRX to send command */
  LCD_CtrlLinesWrite(LCD_WRX_GPIO_PORT, LCD_WRX_PIN, Bit_RESET);
 80120f4:	2200      	movs	r2, #0
 80120f6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80120fa:	4811      	ldr	r0, [pc, #68]	; (8012140 <LCD_WriteCommand+0x56>)
 80120fc:	f000 f9d6 	bl	80124ac <LCD_CtrlLinesWrite>
  
  /* Reset LCD control line(/CS) and Send command */
  LCD_ChipSelect(DISABLE);
 8012100:	2000      	movs	r0, #0
 8012102:	f7fe fb63 	bl	80107cc <LCD_ChipSelect>
  SPI_I2S_SendData(LCD_SPI, LCD_Reg);
 8012106:	79fb      	ldrb	r3, [r7, #7]
 8012108:	b29b      	uxth	r3, r3
 801210a:	4619      	mov	r1, r3
 801210c:	480d      	ldr	r0, [pc, #52]	; (8012144 <LCD_WriteCommand+0x5a>)
 801210e:	f7f9 fa10 	bl	800b532 <SPI_I2S_SendData>
  
  /* Wait until a data is sent(not busy), before config /CS HIGH */
  
  while(SPI_I2S_GetFlagStatus(LCD_SPI, SPI_I2S_FLAG_TXE) == RESET) ;
 8012112:	bf00      	nop
 8012114:	2102      	movs	r1, #2
 8012116:	480b      	ldr	r0, [pc, #44]	; (8012144 <LCD_WriteCommand+0x5a>)
 8012118:	f7f9 fac7 	bl	800b6aa <SPI_I2S_GetFlagStatus>
 801211c:	4603      	mov	r3, r0
 801211e:	2b00      	cmp	r3, #0
 8012120:	d0f8      	beq.n	8012114 <LCD_WriteCommand+0x2a>
  
  while(SPI_I2S_GetFlagStatus(LCD_SPI, SPI_I2S_FLAG_BSY) != RESET);
 8012122:	bf00      	nop
 8012124:	2180      	movs	r1, #128	; 0x80
 8012126:	4807      	ldr	r0, [pc, #28]	; (8012144 <LCD_WriteCommand+0x5a>)
 8012128:	f7f9 fabf 	bl	800b6aa <SPI_I2S_GetFlagStatus>
 801212c:	4603      	mov	r3, r0
 801212e:	2b00      	cmp	r3, #0
 8012130:	d1f8      	bne.n	8012124 <LCD_WriteCommand+0x3a>
  
  LCD_ChipSelect(ENABLE);
 8012132:	2001      	movs	r0, #1
 8012134:	f7fe fb4a 	bl	80107cc <LCD_ChipSelect>
}
 8012138:	bf00      	nop
 801213a:	3708      	adds	r7, #8
 801213c:	46bd      	mov	sp, r7
 801213e:	bd80      	pop	{r7, pc}
 8012140:	40020c00 	.word	0x40020c00
 8012144:	40015000 	.word	0x40015000

08012148 <LCD_WriteData>:
  *         This function must be used after LCD_WriteCommand() function
  * @param  value: data to write to the selected register.
  * @retval None
  */
void LCD_WriteData(uint8_t value)
{
 8012148:	b580      	push	{r7, lr}
 801214a:	b082      	sub	sp, #8
 801214c:	af00      	add	r7, sp, #0
 801214e:	4603      	mov	r3, r0
 8012150:	71fb      	strb	r3, [r7, #7]
    /* Set WRX to send data */
  LCD_CtrlLinesWrite(LCD_WRX_GPIO_PORT, LCD_WRX_PIN, Bit_SET);
 8012152:	2201      	movs	r2, #1
 8012154:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8012158:	4811      	ldr	r0, [pc, #68]	; (80121a0 <LCD_WriteData+0x58>)
 801215a:	f000 f9a7 	bl	80124ac <LCD_CtrlLinesWrite>
  
  /* Reset LCD control line(/CS) and Send data */  
  LCD_ChipSelect(DISABLE);
 801215e:	2000      	movs	r0, #0
 8012160:	f7fe fb34 	bl	80107cc <LCD_ChipSelect>
  SPI_I2S_SendData(LCD_SPI, value);
 8012164:	79fb      	ldrb	r3, [r7, #7]
 8012166:	b29b      	uxth	r3, r3
 8012168:	4619      	mov	r1, r3
 801216a:	480e      	ldr	r0, [pc, #56]	; (80121a4 <LCD_WriteData+0x5c>)
 801216c:	f7f9 f9e1 	bl	800b532 <SPI_I2S_SendData>
  
  /* Wait until a data is sent(not busy), before config /CS HIGH */
  
  while(SPI_I2S_GetFlagStatus(LCD_SPI, SPI_I2S_FLAG_TXE) == RESET) ;
 8012170:	bf00      	nop
 8012172:	2102      	movs	r1, #2
 8012174:	480b      	ldr	r0, [pc, #44]	; (80121a4 <LCD_WriteData+0x5c>)
 8012176:	f7f9 fa98 	bl	800b6aa <SPI_I2S_GetFlagStatus>
 801217a:	4603      	mov	r3, r0
 801217c:	2b00      	cmp	r3, #0
 801217e:	d0f8      	beq.n	8012172 <LCD_WriteData+0x2a>
  
  while(SPI_I2S_GetFlagStatus(LCD_SPI, SPI_I2S_FLAG_BSY) != RESET);
 8012180:	bf00      	nop
 8012182:	2180      	movs	r1, #128	; 0x80
 8012184:	4807      	ldr	r0, [pc, #28]	; (80121a4 <LCD_WriteData+0x5c>)
 8012186:	f7f9 fa90 	bl	800b6aa <SPI_I2S_GetFlagStatus>
 801218a:	4603      	mov	r3, r0
 801218c:	2b00      	cmp	r3, #0
 801218e:	d1f8      	bne.n	8012182 <LCD_WriteData+0x3a>
  
  LCD_ChipSelect(ENABLE);
 8012190:	2001      	movs	r0, #1
 8012192:	f7fe fb1b 	bl	80107cc <LCD_ChipSelect>
}
 8012196:	bf00      	nop
 8012198:	3708      	adds	r7, #8
 801219a:	46bd      	mov	sp, r7
 801219c:	bd80      	pop	{r7, pc}
 801219e:	bf00      	nop
 80121a0:	40020c00 	.word	0x40020c00
 80121a4:	40015000 	.word	0x40015000

080121a8 <LCD_PowerOn>:
  * @brief  Configure the LCD controller (Power On sequence as described in ILI9341 Datasheet)
  * @param  None
  * @retval None
  */
void LCD_PowerOn(void)
{
 80121a8:	b580      	push	{r7, lr}
 80121aa:	af00      	add	r7, sp, #0
  LCD_WriteCommand(0xCA);
 80121ac:	20ca      	movs	r0, #202	; 0xca
 80121ae:	f7ff ff9c 	bl	80120ea <LCD_WriteCommand>
  LCD_WriteData(0xC3);
 80121b2:	20c3      	movs	r0, #195	; 0xc3
 80121b4:	f7ff ffc8 	bl	8012148 <LCD_WriteData>
  LCD_WriteData(0x08);
 80121b8:	2008      	movs	r0, #8
 80121ba:	f7ff ffc5 	bl	8012148 <LCD_WriteData>
  LCD_WriteData(0x50);
 80121be:	2050      	movs	r0, #80	; 0x50
 80121c0:	f7ff ffc2 	bl	8012148 <LCD_WriteData>
  LCD_WriteCommand(LCD_POWERB);
 80121c4:	20cf      	movs	r0, #207	; 0xcf
 80121c6:	f7ff ff90 	bl	80120ea <LCD_WriteCommand>
  LCD_WriteData(0x00);
 80121ca:	2000      	movs	r0, #0
 80121cc:	f7ff ffbc 	bl	8012148 <LCD_WriteData>
  LCD_WriteData(0xC1);
 80121d0:	20c1      	movs	r0, #193	; 0xc1
 80121d2:	f7ff ffb9 	bl	8012148 <LCD_WriteData>
  LCD_WriteData(0x30);
 80121d6:	2030      	movs	r0, #48	; 0x30
 80121d8:	f7ff ffb6 	bl	8012148 <LCD_WriteData>
  LCD_WriteCommand(LCD_POWER_SEQ);
 80121dc:	20ed      	movs	r0, #237	; 0xed
 80121de:	f7ff ff84 	bl	80120ea <LCD_WriteCommand>
  LCD_WriteData(0x64);
 80121e2:	2064      	movs	r0, #100	; 0x64
 80121e4:	f7ff ffb0 	bl	8012148 <LCD_WriteData>
  LCD_WriteData(0x03);
 80121e8:	2003      	movs	r0, #3
 80121ea:	f7ff ffad 	bl	8012148 <LCD_WriteData>
  LCD_WriteData(0x12);
 80121ee:	2012      	movs	r0, #18
 80121f0:	f7ff ffaa 	bl	8012148 <LCD_WriteData>
  LCD_WriteData(0x81);
 80121f4:	2081      	movs	r0, #129	; 0x81
 80121f6:	f7ff ffa7 	bl	8012148 <LCD_WriteData>
  LCD_WriteCommand(LCD_DTCA);
 80121fa:	20e8      	movs	r0, #232	; 0xe8
 80121fc:	f7ff ff75 	bl	80120ea <LCD_WriteCommand>
  LCD_WriteData(0x85);
 8012200:	2085      	movs	r0, #133	; 0x85
 8012202:	f7ff ffa1 	bl	8012148 <LCD_WriteData>
  LCD_WriteData(0x00);
 8012206:	2000      	movs	r0, #0
 8012208:	f7ff ff9e 	bl	8012148 <LCD_WriteData>
  LCD_WriteData(0x78);
 801220c:	2078      	movs	r0, #120	; 0x78
 801220e:	f7ff ff9b 	bl	8012148 <LCD_WriteData>
  LCD_WriteCommand(LCD_POWERA);
 8012212:	20cb      	movs	r0, #203	; 0xcb
 8012214:	f7ff ff69 	bl	80120ea <LCD_WriteCommand>
  LCD_WriteData(0x39);
 8012218:	2039      	movs	r0, #57	; 0x39
 801221a:	f7ff ff95 	bl	8012148 <LCD_WriteData>
  LCD_WriteData(0x2C);
 801221e:	202c      	movs	r0, #44	; 0x2c
 8012220:	f7ff ff92 	bl	8012148 <LCD_WriteData>
  LCD_WriteData(0x00);
 8012224:	2000      	movs	r0, #0
 8012226:	f7ff ff8f 	bl	8012148 <LCD_WriteData>
  LCD_WriteData(0x34);
 801222a:	2034      	movs	r0, #52	; 0x34
 801222c:	f7ff ff8c 	bl	8012148 <LCD_WriteData>
  LCD_WriteData(0x02);
 8012230:	2002      	movs	r0, #2
 8012232:	f7ff ff89 	bl	8012148 <LCD_WriteData>
  LCD_WriteCommand(LCD_PRC);
 8012236:	20f7      	movs	r0, #247	; 0xf7
 8012238:	f7ff ff57 	bl	80120ea <LCD_WriteCommand>
  LCD_WriteData(0x20);
 801223c:	2020      	movs	r0, #32
 801223e:	f7ff ff83 	bl	8012148 <LCD_WriteData>
  LCD_WriteCommand(LCD_DTCB);
 8012242:	20ea      	movs	r0, #234	; 0xea
 8012244:	f7ff ff51 	bl	80120ea <LCD_WriteCommand>
  LCD_WriteData(0x00);
 8012248:	2000      	movs	r0, #0
 801224a:	f7ff ff7d 	bl	8012148 <LCD_WriteData>
  LCD_WriteData(0x00);
 801224e:	2000      	movs	r0, #0
 8012250:	f7ff ff7a 	bl	8012148 <LCD_WriteData>
  LCD_WriteCommand(LCD_FRC);
 8012254:	20b1      	movs	r0, #177	; 0xb1
 8012256:	f7ff ff48 	bl	80120ea <LCD_WriteCommand>
  LCD_WriteData(0x00);
 801225a:	2000      	movs	r0, #0
 801225c:	f7ff ff74 	bl	8012148 <LCD_WriteData>
  LCD_WriteData(0x1B);
 8012260:	201b      	movs	r0, #27
 8012262:	f7ff ff71 	bl	8012148 <LCD_WriteData>
  LCD_WriteCommand(LCD_DFC);
 8012266:	20b6      	movs	r0, #182	; 0xb6
 8012268:	f7ff ff3f 	bl	80120ea <LCD_WriteCommand>
  LCD_WriteData(0x0A);
 801226c:	200a      	movs	r0, #10
 801226e:	f7ff ff6b 	bl	8012148 <LCD_WriteData>
  LCD_WriteData(0xA2);
 8012272:	20a2      	movs	r0, #162	; 0xa2
 8012274:	f7ff ff68 	bl	8012148 <LCD_WriteData>
  LCD_WriteCommand(LCD_POWER1);
 8012278:	20c0      	movs	r0, #192	; 0xc0
 801227a:	f7ff ff36 	bl	80120ea <LCD_WriteCommand>
  LCD_WriteData(0x10);
 801227e:	2010      	movs	r0, #16
 8012280:	f7ff ff62 	bl	8012148 <LCD_WriteData>
  LCD_WriteCommand(LCD_POWER2);
 8012284:	20c1      	movs	r0, #193	; 0xc1
 8012286:	f7ff ff30 	bl	80120ea <LCD_WriteCommand>
  LCD_WriteData(0x10);
 801228a:	2010      	movs	r0, #16
 801228c:	f7ff ff5c 	bl	8012148 <LCD_WriteData>
  LCD_WriteCommand(LCD_VCOM1);
 8012290:	20c5      	movs	r0, #197	; 0xc5
 8012292:	f7ff ff2a 	bl	80120ea <LCD_WriteCommand>
  LCD_WriteData(0x45);
 8012296:	2045      	movs	r0, #69	; 0x45
 8012298:	f7ff ff56 	bl	8012148 <LCD_WriteData>
  LCD_WriteData(0x15);
 801229c:	2015      	movs	r0, #21
 801229e:	f7ff ff53 	bl	8012148 <LCD_WriteData>
  LCD_WriteCommand(LCD_VCOM2);
 80122a2:	20c7      	movs	r0, #199	; 0xc7
 80122a4:	f7ff ff21 	bl	80120ea <LCD_WriteCommand>
  LCD_WriteData(0x90);
 80122a8:	2090      	movs	r0, #144	; 0x90
 80122aa:	f7ff ff4d 	bl	8012148 <LCD_WriteData>
  LCD_WriteCommand(LCD_MAC);
 80122ae:	2036      	movs	r0, #54	; 0x36
 80122b0:	f7ff ff1b 	bl	80120ea <LCD_WriteCommand>
  LCD_WriteData(0xC8);
 80122b4:	20c8      	movs	r0, #200	; 0xc8
 80122b6:	f7ff ff47 	bl	8012148 <LCD_WriteData>
  LCD_WriteCommand(LCD_3GAMMA_EN);
 80122ba:	20f2      	movs	r0, #242	; 0xf2
 80122bc:	f7ff ff15 	bl	80120ea <LCD_WriteCommand>
  LCD_WriteData(0x00);
 80122c0:	2000      	movs	r0, #0
 80122c2:	f7ff ff41 	bl	8012148 <LCD_WriteData>
  LCD_WriteCommand(LCD_RGB_INTERFACE);
 80122c6:	20b0      	movs	r0, #176	; 0xb0
 80122c8:	f7ff ff0f 	bl	80120ea <LCD_WriteCommand>
  LCD_WriteData(0xC2);
 80122cc:	20c2      	movs	r0, #194	; 0xc2
 80122ce:	f7ff ff3b 	bl	8012148 <LCD_WriteData>
  LCD_WriteCommand(LCD_DFC);
 80122d2:	20b6      	movs	r0, #182	; 0xb6
 80122d4:	f7ff ff09 	bl	80120ea <LCD_WriteCommand>
  LCD_WriteData(0x0A);
 80122d8:	200a      	movs	r0, #10
 80122da:	f7ff ff35 	bl	8012148 <LCD_WriteData>
  LCD_WriteData(0xA7);
 80122de:	20a7      	movs	r0, #167	; 0xa7
 80122e0:	f7ff ff32 	bl	8012148 <LCD_WriteData>
  LCD_WriteData(0x27);
 80122e4:	2027      	movs	r0, #39	; 0x27
 80122e6:	f7ff ff2f 	bl	8012148 <LCD_WriteData>
  LCD_WriteData(0x04);
 80122ea:	2004      	movs	r0, #4
 80122ec:	f7ff ff2c 	bl	8012148 <LCD_WriteData>

  /* colomn address set */
  LCD_WriteCommand(LCD_COLUMN_ADDR);
 80122f0:	202a      	movs	r0, #42	; 0x2a
 80122f2:	f7ff fefa 	bl	80120ea <LCD_WriteCommand>
  LCD_WriteData(0x00);
 80122f6:	2000      	movs	r0, #0
 80122f8:	f7ff ff26 	bl	8012148 <LCD_WriteData>
  LCD_WriteData(0x00);
 80122fc:	2000      	movs	r0, #0
 80122fe:	f7ff ff23 	bl	8012148 <LCD_WriteData>
  LCD_WriteData(0x00);
 8012302:	2000      	movs	r0, #0
 8012304:	f7ff ff20 	bl	8012148 <LCD_WriteData>
  LCD_WriteData(0xEF);
 8012308:	20ef      	movs	r0, #239	; 0xef
 801230a:	f7ff ff1d 	bl	8012148 <LCD_WriteData>
  /* Page Address Set */
  LCD_WriteCommand(LCD_PAGE_ADDR);
 801230e:	202b      	movs	r0, #43	; 0x2b
 8012310:	f7ff feeb 	bl	80120ea <LCD_WriteCommand>
  LCD_WriteData(0x00);
 8012314:	2000      	movs	r0, #0
 8012316:	f7ff ff17 	bl	8012148 <LCD_WriteData>
  LCD_WriteData(0x00);
 801231a:	2000      	movs	r0, #0
 801231c:	f7ff ff14 	bl	8012148 <LCD_WriteData>
  LCD_WriteData(0x01);
 8012320:	2001      	movs	r0, #1
 8012322:	f7ff ff11 	bl	8012148 <LCD_WriteData>
  LCD_WriteData(0x3F);
 8012326:	203f      	movs	r0, #63	; 0x3f
 8012328:	f7ff ff0e 	bl	8012148 <LCD_WriteData>
  LCD_WriteCommand(LCD_INTERFACE);
 801232c:	20f6      	movs	r0, #246	; 0xf6
 801232e:	f7ff fedc 	bl	80120ea <LCD_WriteCommand>
  LCD_WriteData(0x01);
 8012332:	2001      	movs	r0, #1
 8012334:	f7ff ff08 	bl	8012148 <LCD_WriteData>
  LCD_WriteData(0x00);
 8012338:	2000      	movs	r0, #0
 801233a:	f7ff ff05 	bl	8012148 <LCD_WriteData>
  LCD_WriteData(0x06);
 801233e:	2006      	movs	r0, #6
 8012340:	f7ff ff02 	bl	8012148 <LCD_WriteData>
  
  LCD_WriteCommand(LCD_GRAM);
 8012344:	202c      	movs	r0, #44	; 0x2c
 8012346:	f7ff fed0 	bl	80120ea <LCD_WriteCommand>
  delay(200);
 801234a:	20c8      	movs	r0, #200	; 0xc8
 801234c:	f000 fa0a 	bl	8012764 <delay>
  
  LCD_WriteCommand(LCD_GAMMA);
 8012350:	2026      	movs	r0, #38	; 0x26
 8012352:	f7ff feca 	bl	80120ea <LCD_WriteCommand>
  LCD_WriteData(0x01);
 8012356:	2001      	movs	r0, #1
 8012358:	f7ff fef6 	bl	8012148 <LCD_WriteData>
  
  LCD_WriteCommand(LCD_PGAMMA);
 801235c:	20e0      	movs	r0, #224	; 0xe0
 801235e:	f7ff fec4 	bl	80120ea <LCD_WriteCommand>
  LCD_WriteData(0x0F);
 8012362:	200f      	movs	r0, #15
 8012364:	f7ff fef0 	bl	8012148 <LCD_WriteData>
  LCD_WriteData(0x29);
 8012368:	2029      	movs	r0, #41	; 0x29
 801236a:	f7ff feed 	bl	8012148 <LCD_WriteData>
  LCD_WriteData(0x24);
 801236e:	2024      	movs	r0, #36	; 0x24
 8012370:	f7ff feea 	bl	8012148 <LCD_WriteData>
  LCD_WriteData(0x0C);
 8012374:	200c      	movs	r0, #12
 8012376:	f7ff fee7 	bl	8012148 <LCD_WriteData>
  LCD_WriteData(0x0E);
 801237a:	200e      	movs	r0, #14
 801237c:	f7ff fee4 	bl	8012148 <LCD_WriteData>
  LCD_WriteData(0x09);
 8012380:	2009      	movs	r0, #9
 8012382:	f7ff fee1 	bl	8012148 <LCD_WriteData>
  LCD_WriteData(0x4E);
 8012386:	204e      	movs	r0, #78	; 0x4e
 8012388:	f7ff fede 	bl	8012148 <LCD_WriteData>
  LCD_WriteData(0x78);
 801238c:	2078      	movs	r0, #120	; 0x78
 801238e:	f7ff fedb 	bl	8012148 <LCD_WriteData>
  LCD_WriteData(0x3C);
 8012392:	203c      	movs	r0, #60	; 0x3c
 8012394:	f7ff fed8 	bl	8012148 <LCD_WriteData>
  LCD_WriteData(0x09);
 8012398:	2009      	movs	r0, #9
 801239a:	f7ff fed5 	bl	8012148 <LCD_WriteData>
  LCD_WriteData(0x13);
 801239e:	2013      	movs	r0, #19
 80123a0:	f7ff fed2 	bl	8012148 <LCD_WriteData>
  LCD_WriteData(0x05);
 80123a4:	2005      	movs	r0, #5
 80123a6:	f7ff fecf 	bl	8012148 <LCD_WriteData>
  LCD_WriteData(0x17);
 80123aa:	2017      	movs	r0, #23
 80123ac:	f7ff fecc 	bl	8012148 <LCD_WriteData>
  LCD_WriteData(0x11);
 80123b0:	2011      	movs	r0, #17
 80123b2:	f7ff fec9 	bl	8012148 <LCD_WriteData>
  LCD_WriteData(0x00);
 80123b6:	2000      	movs	r0, #0
 80123b8:	f7ff fec6 	bl	8012148 <LCD_WriteData>
  LCD_WriteCommand(LCD_NGAMMA);
 80123bc:	20e1      	movs	r0, #225	; 0xe1
 80123be:	f7ff fe94 	bl	80120ea <LCD_WriteCommand>
  LCD_WriteData(0x00);
 80123c2:	2000      	movs	r0, #0
 80123c4:	f7ff fec0 	bl	8012148 <LCD_WriteData>
  LCD_WriteData(0x16);
 80123c8:	2016      	movs	r0, #22
 80123ca:	f7ff febd 	bl	8012148 <LCD_WriteData>
  LCD_WriteData(0x1B);
 80123ce:	201b      	movs	r0, #27
 80123d0:	f7ff feba 	bl	8012148 <LCD_WriteData>
  LCD_WriteData(0x04);
 80123d4:	2004      	movs	r0, #4
 80123d6:	f7ff feb7 	bl	8012148 <LCD_WriteData>
  LCD_WriteData(0x11);
 80123da:	2011      	movs	r0, #17
 80123dc:	f7ff feb4 	bl	8012148 <LCD_WriteData>
  LCD_WriteData(0x07);
 80123e0:	2007      	movs	r0, #7
 80123e2:	f7ff feb1 	bl	8012148 <LCD_WriteData>
  LCD_WriteData(0x31);
 80123e6:	2031      	movs	r0, #49	; 0x31
 80123e8:	f7ff feae 	bl	8012148 <LCD_WriteData>
  LCD_WriteData(0x33);
 80123ec:	2033      	movs	r0, #51	; 0x33
 80123ee:	f7ff feab 	bl	8012148 <LCD_WriteData>
  LCD_WriteData(0x42);
 80123f2:	2042      	movs	r0, #66	; 0x42
 80123f4:	f7ff fea8 	bl	8012148 <LCD_WriteData>
  LCD_WriteData(0x05);
 80123f8:	2005      	movs	r0, #5
 80123fa:	f7ff fea5 	bl	8012148 <LCD_WriteData>
  LCD_WriteData(0x0C);
 80123fe:	200c      	movs	r0, #12
 8012400:	f7ff fea2 	bl	8012148 <LCD_WriteData>
  LCD_WriteData(0x0A);
 8012404:	200a      	movs	r0, #10
 8012406:	f7ff fe9f 	bl	8012148 <LCD_WriteData>
  LCD_WriteData(0x28);
 801240a:	2028      	movs	r0, #40	; 0x28
 801240c:	f7ff fe9c 	bl	8012148 <LCD_WriteData>
  LCD_WriteData(0x2F);
 8012410:	202f      	movs	r0, #47	; 0x2f
 8012412:	f7ff fe99 	bl	8012148 <LCD_WriteData>
  LCD_WriteData(0x0F);
 8012416:	200f      	movs	r0, #15
 8012418:	f7ff fe96 	bl	8012148 <LCD_WriteData>
  
  LCD_WriteCommand(LCD_SLEEP_OUT);
 801241c:	2011      	movs	r0, #17
 801241e:	f7ff fe64 	bl	80120ea <LCD_WriteCommand>
  delay(200);
 8012422:	20c8      	movs	r0, #200	; 0xc8
 8012424:	f000 f99e 	bl	8012764 <delay>
  LCD_WriteCommand(LCD_DISPLAY_ON);
 8012428:	2029      	movs	r0, #41	; 0x29
 801242a:	f7ff fe5e 	bl	80120ea <LCD_WriteCommand>
  /* GRAM start writing */
  LCD_WriteCommand(LCD_GRAM);
 801242e:	202c      	movs	r0, #44	; 0x2c
 8012430:	f7ff fe5b 	bl	80120ea <LCD_WriteCommand>
 }
 8012434:	bf00      	nop
 8012436:	bd80      	pop	{r7, pc}

08012438 <LCD_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void LCD_DisplayOn(void)
{
 8012438:	b580      	push	{r7, lr}
 801243a:	af00      	add	r7, sp, #0
  LCD_WriteCommand(LCD_DISPLAY_ON);
 801243c:	2029      	movs	r0, #41	; 0x29
 801243e:	f7ff fe54 	bl	80120ea <LCD_WriteCommand>
}
 8012442:	bf00      	nop
 8012444:	bd80      	pop	{r7, pc}

08012446 <LCD_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void LCD_DisplayOff(void)
{
 8012446:	b580      	push	{r7, lr}
 8012448:	af00      	add	r7, sp, #0
    /* Display Off */
    LCD_WriteCommand(LCD_DISPLAY_OFF);
 801244a:	2028      	movs	r0, #40	; 0x28
 801244c:	f7ff fe4d 	bl	80120ea <LCD_WriteCommand>
}
 8012450:	bf00      	nop
 8012452:	bd80      	pop	{r7, pc}

08012454 <LCD_CtrlLinesConfig>:
  *         when VDDIO is lower than required LCD supply.
  * @param  None
  * @retval None
  */
void LCD_CtrlLinesConfig(void)
{
 8012454:	b580      	push	{r7, lr}
 8012456:	b082      	sub	sp, #8
 8012458:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable GPIOs clock*/
  RCC_AHB1PeriphClockCmd(LCD_NCS_GPIO_CLK | LCD_WRX_GPIO_CLK, ENABLE);
 801245a:	2101      	movs	r1, #1
 801245c:	200c      	movs	r0, #12
 801245e:	f7f6 fa7b 	bl	8008958 <RCC_AHB1PeriphClockCmd>

  /* Configure NCS in Output Push-Pull mode */
  GPIO_InitStructure.GPIO_Pin = LCD_NCS_PIN;
 8012462:	2304      	movs	r3, #4
 8012464:	603b      	str	r3, [r7, #0]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8012466:	2302      	movs	r3, #2
 8012468:	717b      	strb	r3, [r7, #5]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 801246a:	2301      	movs	r3, #1
 801246c:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 801246e:	2300      	movs	r3, #0
 8012470:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8012472:	2300      	movs	r3, #0
 8012474:	71fb      	strb	r3, [r7, #7]
  GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8012476:	463b      	mov	r3, r7
 8012478:	4619      	mov	r1, r3
 801247a:	480a      	ldr	r0, [pc, #40]	; (80124a4 <LCD_CtrlLinesConfig+0x50>)
 801247c:	f7f4 f89c 	bl	80065b8 <GPIO_Init>
  
  /* Configure WRX in Output Push-Pull mode */
  GPIO_InitStructure.GPIO_Pin = LCD_WRX_PIN;
 8012480:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8012484:	603b      	str	r3, [r7, #0]
  GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8012486:	463b      	mov	r3, r7
 8012488:	4619      	mov	r1, r3
 801248a:	4807      	ldr	r0, [pc, #28]	; (80124a8 <LCD_CtrlLinesConfig+0x54>)
 801248c:	f7f4 f894 	bl	80065b8 <GPIO_Init>

  /* Set chip select pin high */
  LCD_CtrlLinesWrite(LCD_NCS_GPIO_PORT, LCD_NCS_PIN, Bit_SET);
 8012490:	2201      	movs	r2, #1
 8012492:	2104      	movs	r1, #4
 8012494:	4803      	ldr	r0, [pc, #12]	; (80124a4 <LCD_CtrlLinesConfig+0x50>)
 8012496:	f000 f809 	bl	80124ac <LCD_CtrlLinesWrite>
}
 801249a:	bf00      	nop
 801249c:	3708      	adds	r7, #8
 801249e:	46bd      	mov	sp, r7
 80124a0:	bd80      	pop	{r7, pc}
 80124a2:	bf00      	nop
 80124a4:	40020800 	.word	0x40020800
 80124a8:	40020c00 	.word	0x40020c00

080124ac <LCD_CtrlLinesWrite>:
  *     @arg Bit_RESET: to clear the port pin
  *     @arg Bit_SET: to set the port pin
  * @retval None
  */
void LCD_CtrlLinesWrite(GPIO_TypeDef* GPIOx, uint16_t CtrlPins, BitAction BitVal)
{
 80124ac:	b580      	push	{r7, lr}
 80124ae:	b082      	sub	sp, #8
 80124b0:	af00      	add	r7, sp, #0
 80124b2:	6078      	str	r0, [r7, #4]
 80124b4:	460b      	mov	r3, r1
 80124b6:	807b      	strh	r3, [r7, #2]
 80124b8:	4613      	mov	r3, r2
 80124ba:	707b      	strb	r3, [r7, #1]
  /* Set or Reset the control line */
  GPIO_WriteBit(GPIOx, (uint16_t)CtrlPins, (BitAction)BitVal);
 80124bc:	787a      	ldrb	r2, [r7, #1]
 80124be:	887b      	ldrh	r3, [r7, #2]
 80124c0:	4619      	mov	r1, r3
 80124c2:	6878      	ldr	r0, [r7, #4]
 80124c4:	f7f4 f9ae 	bl	8006824 <GPIO_WriteBit>
}
 80124c8:	bf00      	nop
 80124ca:	3708      	adds	r7, #8
 80124cc:	46bd      	mov	sp, r7
 80124ce:	bd80      	pop	{r7, pc}

080124d0 <LCD_SPIConfig>:
  * @brief  Configures the LCD_SPI interface.
  * @param  None
  * @retval None
  */
void LCD_SPIConfig(void)
{
 80124d0:	b580      	push	{r7, lr}
 80124d2:	b088      	sub	sp, #32
 80124d4:	af00      	add	r7, sp, #0
  SPI_InitTypeDef    SPI_InitStructure;
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable LCD_SPI_SCK_GPIO_CLK, LCD_SPI_MISO_GPIO_CLK and LCD_SPI_MOSI_GPIO_CLK clock */
  RCC_AHB1PeriphClockCmd(LCD_SPI_SCK_GPIO_CLK | LCD_SPI_MISO_GPIO_CLK | LCD_SPI_MOSI_GPIO_CLK, ENABLE);
 80124d6:	2101      	movs	r1, #1
 80124d8:	2020      	movs	r0, #32
 80124da:	f7f6 fa3d 	bl	8008958 <RCC_AHB1PeriphClockCmd>

  /* Enable LCD_SPI and SYSCFG clock  */
  RCC_APB2PeriphClockCmd(LCD_SPI_CLK, ENABLE);
 80124de:	2101      	movs	r1, #1
 80124e0:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80124e4:	f7f6 fab8 	bl	8008a58 <RCC_APB2PeriphClockCmd>
  
  /* Configure LCD_SPI SCK pin */
  GPIO_InitStructure.GPIO_Pin = LCD_SPI_SCK_PIN;
 80124e8:	2380      	movs	r3, #128	; 0x80
 80124ea:	607b      	str	r3, [r7, #4]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_25MHz;
 80124ec:	2301      	movs	r3, #1
 80124ee:	727b      	strb	r3, [r7, #9]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 80124f0:	2302      	movs	r3, #2
 80124f2:	723b      	strb	r3, [r7, #8]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 80124f4:	2300      	movs	r3, #0
 80124f6:	72bb      	strb	r3, [r7, #10]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_DOWN;
 80124f8:	2302      	movs	r3, #2
 80124fa:	72fb      	strb	r3, [r7, #11]
  GPIO_Init(LCD_SPI_SCK_GPIO_PORT, &GPIO_InitStructure);
 80124fc:	1d3b      	adds	r3, r7, #4
 80124fe:	4619      	mov	r1, r3
 8012500:	4826      	ldr	r0, [pc, #152]	; (801259c <LCD_SPIConfig+0xcc>)
 8012502:	f7f4 f859 	bl	80065b8 <GPIO_Init>

  /* Configure LCD_SPI MISO pin */
  GPIO_InitStructure.GPIO_Pin = LCD_SPI_MISO_PIN;
 8012506:	f44f 7380 	mov.w	r3, #256	; 0x100
 801250a:	607b      	str	r3, [r7, #4]
  GPIO_Init(LCD_SPI_MISO_GPIO_PORT, &GPIO_InitStructure);
 801250c:	1d3b      	adds	r3, r7, #4
 801250e:	4619      	mov	r1, r3
 8012510:	4822      	ldr	r0, [pc, #136]	; (801259c <LCD_SPIConfig+0xcc>)
 8012512:	f7f4 f851 	bl	80065b8 <GPIO_Init>

  /* Configure LCD_SPI MOSI pin */
  GPIO_InitStructure.GPIO_Pin = LCD_SPI_MOSI_PIN;
 8012516:	f44f 7300 	mov.w	r3, #512	; 0x200
 801251a:	607b      	str	r3, [r7, #4]
  GPIO_Init(LCD_SPI_MOSI_GPIO_PORT, &GPIO_InitStructure);
 801251c:	1d3b      	adds	r3, r7, #4
 801251e:	4619      	mov	r1, r3
 8012520:	481e      	ldr	r0, [pc, #120]	; (801259c <LCD_SPIConfig+0xcc>)
 8012522:	f7f4 f849 	bl	80065b8 <GPIO_Init>

  /* Connect SPI SCK */
  GPIO_PinAFConfig(LCD_SPI_SCK_GPIO_PORT, LCD_SPI_SCK_SOURCE, LCD_SPI_SCK_AF);
 8012526:	2205      	movs	r2, #5
 8012528:	2107      	movs	r1, #7
 801252a:	481c      	ldr	r0, [pc, #112]	; (801259c <LCD_SPIConfig+0xcc>)
 801252c:	f7f4 f9b3 	bl	8006896 <GPIO_PinAFConfig>

  /* Connect SPI MISO */
  GPIO_PinAFConfig(LCD_SPI_MISO_GPIO_PORT, LCD_SPI_MISO_SOURCE, LCD_SPI_MISO_AF);
 8012530:	2205      	movs	r2, #5
 8012532:	2108      	movs	r1, #8
 8012534:	4819      	ldr	r0, [pc, #100]	; (801259c <LCD_SPIConfig+0xcc>)
 8012536:	f7f4 f9ae 	bl	8006896 <GPIO_PinAFConfig>

  /* Connect SPI MOSI */
  GPIO_PinAFConfig(LCD_SPI_MOSI_GPIO_PORT, LCD_SPI_MOSI_SOURCE, LCD_SPI_MOSI_AF);
 801253a:	2205      	movs	r2, #5
 801253c:	2109      	movs	r1, #9
 801253e:	4817      	ldr	r0, [pc, #92]	; (801259c <LCD_SPIConfig+0xcc>)
 8012540:	f7f4 f9a9 	bl	8006896 <GPIO_PinAFConfig>
  
  SPI_I2S_DeInit(LCD_SPI);
 8012544:	4816      	ldr	r0, [pc, #88]	; (80125a0 <LCD_SPIConfig+0xd0>)
 8012546:	f7f8 fcf1 	bl	800af2c <SPI_I2S_DeInit>

  /* SPI configuration -------------------------------------------------------*/
  /* If the SPI peripheral is already enabled, don't reconfigure it */
  if ((LCD_SPI->CR1 & SPI_CR1_SPE) == 0)
 801254a:	4b15      	ldr	r3, [pc, #84]	; (80125a0 <LCD_SPIConfig+0xd0>)
 801254c:	881b      	ldrh	r3, [r3, #0]
 801254e:	b29b      	uxth	r3, r3
 8012550:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012554:	2b00      	cmp	r3, #0
 8012556:	d11d      	bne.n	8012594 <LCD_SPIConfig+0xc4>
  {    
    SPI_InitStructure.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 8012558:	2300      	movs	r3, #0
 801255a:	81bb      	strh	r3, [r7, #12]
    SPI_InitStructure.SPI_Mode = SPI_Mode_Master;
 801255c:	f44f 7382 	mov.w	r3, #260	; 0x104
 8012560:	81fb      	strh	r3, [r7, #14]
    SPI_InitStructure.SPI_DataSize = SPI_DataSize_8b;
 8012562:	2300      	movs	r3, #0
 8012564:	823b      	strh	r3, [r7, #16]
    SPI_InitStructure.SPI_CPOL = SPI_CPOL_Low;
 8012566:	2300      	movs	r3, #0
 8012568:	827b      	strh	r3, [r7, #18]
    SPI_InitStructure.SPI_CPHA = SPI_CPHA_1Edge;
 801256a:	2300      	movs	r3, #0
 801256c:	82bb      	strh	r3, [r7, #20]
    SPI_InitStructure.SPI_NSS = SPI_NSS_Soft;
 801256e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8012572:	82fb      	strh	r3, [r7, #22]
       to verify these constraints:
          - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
          - l3gd20 SPI interface max baudrate is 10MHz for write/read
          - PCLK2 frequency is set to 90 MHz 
       */
    SPI_InitStructure.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_16;
 8012574:	2318      	movs	r3, #24
 8012576:	833b      	strh	r3, [r7, #24]
    SPI_InitStructure.SPI_FirstBit = SPI_FirstBit_MSB;
 8012578:	2300      	movs	r3, #0
 801257a:	837b      	strh	r3, [r7, #26]
    SPI_InitStructure.SPI_CRCPolynomial = 7;
 801257c:	2307      	movs	r3, #7
 801257e:	83bb      	strh	r3, [r7, #28]
    SPI_Init(LCD_SPI, &SPI_InitStructure);
 8012580:	f107 030c 	add.w	r3, r7, #12
 8012584:	4619      	mov	r1, r3
 8012586:	4806      	ldr	r0, [pc, #24]	; (80125a0 <LCD_SPIConfig+0xd0>)
 8012588:	f7f8 fd3e 	bl	800b008 <SPI_Init>

    /* Enable L3GD20_SPI  */
    SPI_Cmd(LCD_SPI, ENABLE);
 801258c:	2101      	movs	r1, #1
 801258e:	4804      	ldr	r0, [pc, #16]	; (80125a0 <LCD_SPIConfig+0xd0>)
 8012590:	f7f8 fe95 	bl	800b2be <SPI_Cmd>
  }
}
 8012594:	bf00      	nop
 8012596:	3720      	adds	r7, #32
 8012598:	46bd      	mov	sp, r7
 801259a:	bd80      	pop	{r7, pc}
 801259c:	40021400 	.word	0x40021400
 80125a0:	40015000 	.word	0x40015000

080125a4 <LCD_AF_GPIOConfig>:
  * @brief  GPIO config for LTDC.
  * @param  None
  * @retval None
  */
static void LCD_AF_GPIOConfig(void)
{
 80125a4:	b580      	push	{r7, lr}
 80125a6:	b082      	sub	sp, #8
 80125a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct;
  
  /* Enable GPIOA, GPIOB, GPIOC, GPIOD, GPIOF, GPIOG AHB Clocks */
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA | RCC_AHB1Periph_GPIOB | \
 80125aa:	2101      	movs	r1, #1
 80125ac:	206f      	movs	r0, #111	; 0x6f
 80125ae:	f7f6 f9d3 	bl	8008958 <RCC_AHB1PeriphClockCmd>
           -----------------------------------------------------

*/

 /* GPIOA configuration */
  GPIO_PinAFConfig(GPIOA, GPIO_PinSource3, GPIO_AF_LTDC);
 80125b2:	220e      	movs	r2, #14
 80125b4:	2103      	movs	r1, #3
 80125b6:	4853      	ldr	r0, [pc, #332]	; (8012704 <LCD_AF_GPIOConfig+0x160>)
 80125b8:	f7f4 f96d 	bl	8006896 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOA, GPIO_PinSource4, GPIO_AF_LTDC);
 80125bc:	220e      	movs	r2, #14
 80125be:	2104      	movs	r1, #4
 80125c0:	4850      	ldr	r0, [pc, #320]	; (8012704 <LCD_AF_GPIOConfig+0x160>)
 80125c2:	f7f4 f968 	bl	8006896 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOA, GPIO_PinSource6, GPIO_AF_LTDC);
 80125c6:	220e      	movs	r2, #14
 80125c8:	2106      	movs	r1, #6
 80125ca:	484e      	ldr	r0, [pc, #312]	; (8012704 <LCD_AF_GPIOConfig+0x160>)
 80125cc:	f7f4 f963 	bl	8006896 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOA, GPIO_PinSource11, GPIO_AF_LTDC);
 80125d0:	220e      	movs	r2, #14
 80125d2:	210b      	movs	r1, #11
 80125d4:	484b      	ldr	r0, [pc, #300]	; (8012704 <LCD_AF_GPIOConfig+0x160>)
 80125d6:	f7f4 f95e 	bl	8006896 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOA, GPIO_PinSource12, GPIO_AF_LTDC);
 80125da:	220e      	movs	r2, #14
 80125dc:	210c      	movs	r1, #12
 80125de:	4849      	ldr	r0, [pc, #292]	; (8012704 <LCD_AF_GPIOConfig+0x160>)
 80125e0:	f7f4 f959 	bl	8006896 <GPIO_PinAFConfig>

  GPIO_InitStruct.GPIO_Pin = GPIO_Pin_3 | GPIO_Pin_4 | GPIO_Pin_6 | \
 80125e4:	f641 0358 	movw	r3, #6232	; 0x1858
 80125e8:	603b      	str	r3, [r7, #0]
                             GPIO_Pin_11 | GPIO_Pin_12;
                             
  GPIO_InitStruct.GPIO_Speed = GPIO_Speed_50MHz;
 80125ea:	2302      	movs	r3, #2
 80125ec:	717b      	strb	r3, [r7, #5]
  GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AF;
 80125ee:	2302      	movs	r3, #2
 80125f0:	713b      	strb	r3, [r7, #4]
  GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
 80125f2:	2300      	movs	r3, #0
 80125f4:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_NOPULL;
 80125f6:	2300      	movs	r3, #0
 80125f8:	71fb      	strb	r3, [r7, #7]
  GPIO_Init(GPIOA, &GPIO_InitStruct);
 80125fa:	463b      	mov	r3, r7
 80125fc:	4619      	mov	r1, r3
 80125fe:	4841      	ldr	r0, [pc, #260]	; (8012704 <LCD_AF_GPIOConfig+0x160>)
 8012600:	f7f3 ffda 	bl	80065b8 <GPIO_Init>
  
 /* GPIOB configuration */  
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource0, 0x09);
 8012604:	2209      	movs	r2, #9
 8012606:	2100      	movs	r1, #0
 8012608:	483f      	ldr	r0, [pc, #252]	; (8012708 <LCD_AF_GPIOConfig+0x164>)
 801260a:	f7f4 f944 	bl	8006896 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource1, 0x09);
 801260e:	2209      	movs	r2, #9
 8012610:	2101      	movs	r1, #1
 8012612:	483d      	ldr	r0, [pc, #244]	; (8012708 <LCD_AF_GPIOConfig+0x164>)
 8012614:	f7f4 f93f 	bl	8006896 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource8, GPIO_AF_LTDC);
 8012618:	220e      	movs	r2, #14
 801261a:	2108      	movs	r1, #8
 801261c:	483a      	ldr	r0, [pc, #232]	; (8012708 <LCD_AF_GPIOConfig+0x164>)
 801261e:	f7f4 f93a 	bl	8006896 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource9, GPIO_AF_LTDC);
 8012622:	220e      	movs	r2, #14
 8012624:	2109      	movs	r1, #9
 8012626:	4838      	ldr	r0, [pc, #224]	; (8012708 <LCD_AF_GPIOConfig+0x164>)
 8012628:	f7f4 f935 	bl	8006896 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource10, GPIO_AF_LTDC);
 801262c:	220e      	movs	r2, #14
 801262e:	210a      	movs	r1, #10
 8012630:	4835      	ldr	r0, [pc, #212]	; (8012708 <LCD_AF_GPIOConfig+0x164>)
 8012632:	f7f4 f930 	bl	8006896 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource11, GPIO_AF_LTDC);
 8012636:	220e      	movs	r2, #14
 8012638:	210b      	movs	r1, #11
 801263a:	4833      	ldr	r0, [pc, #204]	; (8012708 <LCD_AF_GPIOConfig+0x164>)
 801263c:	f7f4 f92b 	bl	8006896 <GPIO_PinAFConfig>

  GPIO_InitStruct.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_8 | \
 8012640:	f640 7303 	movw	r3, #3843	; 0xf03
 8012644:	603b      	str	r3, [r7, #0]
                             GPIO_Pin_9 | GPIO_Pin_10 | GPIO_Pin_11;
  
  GPIO_Init(GPIOB, &GPIO_InitStruct);
 8012646:	463b      	mov	r3, r7
 8012648:	4619      	mov	r1, r3
 801264a:	482f      	ldr	r0, [pc, #188]	; (8012708 <LCD_AF_GPIOConfig+0x164>)
 801264c:	f7f3 ffb4 	bl	80065b8 <GPIO_Init>

 /* GPIOC configuration */
  GPIO_PinAFConfig(GPIOC, GPIO_PinSource6, GPIO_AF_LTDC);
 8012650:	220e      	movs	r2, #14
 8012652:	2106      	movs	r1, #6
 8012654:	482d      	ldr	r0, [pc, #180]	; (801270c <LCD_AF_GPIOConfig+0x168>)
 8012656:	f7f4 f91e 	bl	8006896 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOC, GPIO_PinSource7, GPIO_AF_LTDC);
 801265a:	220e      	movs	r2, #14
 801265c:	2107      	movs	r1, #7
 801265e:	482b      	ldr	r0, [pc, #172]	; (801270c <LCD_AF_GPIOConfig+0x168>)
 8012660:	f7f4 f919 	bl	8006896 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOC, GPIO_PinSource10, GPIO_AF_LTDC);
 8012664:	220e      	movs	r2, #14
 8012666:	210a      	movs	r1, #10
 8012668:	4828      	ldr	r0, [pc, #160]	; (801270c <LCD_AF_GPIOConfig+0x168>)
 801266a:	f7f4 f914 	bl	8006896 <GPIO_PinAFConfig>
  
  GPIO_InitStruct.GPIO_Pin = GPIO_Pin_6 | GPIO_Pin_7 | GPIO_Pin_10;
 801266e:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8012672:	603b      	str	r3, [r7, #0]
                             
  GPIO_Init(GPIOC, &GPIO_InitStruct);
 8012674:	463b      	mov	r3, r7
 8012676:	4619      	mov	r1, r3
 8012678:	4824      	ldr	r0, [pc, #144]	; (801270c <LCD_AF_GPIOConfig+0x168>)
 801267a:	f7f3 ff9d 	bl	80065b8 <GPIO_Init>

 /* GPIOD configuration */
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource3, GPIO_AF_LTDC);
 801267e:	220e      	movs	r2, #14
 8012680:	2103      	movs	r1, #3
 8012682:	4823      	ldr	r0, [pc, #140]	; (8012710 <LCD_AF_GPIOConfig+0x16c>)
 8012684:	f7f4 f907 	bl	8006896 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource6, GPIO_AF_LTDC);
 8012688:	220e      	movs	r2, #14
 801268a:	2106      	movs	r1, #6
 801268c:	4820      	ldr	r0, [pc, #128]	; (8012710 <LCD_AF_GPIOConfig+0x16c>)
 801268e:	f7f4 f902 	bl	8006896 <GPIO_PinAFConfig>
  
  GPIO_InitStruct.GPIO_Pin = GPIO_Pin_3 | GPIO_Pin_6;
 8012692:	2348      	movs	r3, #72	; 0x48
 8012694:	603b      	str	r3, [r7, #0]
                             
  GPIO_Init(GPIOD, &GPIO_InitStruct);
 8012696:	463b      	mov	r3, r7
 8012698:	4619      	mov	r1, r3
 801269a:	481d      	ldr	r0, [pc, #116]	; (8012710 <LCD_AF_GPIOConfig+0x16c>)
 801269c:	f7f3 ff8c 	bl	80065b8 <GPIO_Init>
  
 /* GPIOF configuration */
  GPIO_PinAFConfig(GPIOF, GPIO_PinSource10, GPIO_AF_LTDC);
 80126a0:	220e      	movs	r2, #14
 80126a2:	210a      	movs	r1, #10
 80126a4:	481b      	ldr	r0, [pc, #108]	; (8012714 <LCD_AF_GPIOConfig+0x170>)
 80126a6:	f7f4 f8f6 	bl	8006896 <GPIO_PinAFConfig>
  
  GPIO_InitStruct.GPIO_Pin = GPIO_Pin_10;
 80126aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80126ae:	603b      	str	r3, [r7, #0]
                             
  GPIO_Init(GPIOF, &GPIO_InitStruct);     
 80126b0:	463b      	mov	r3, r7
 80126b2:	4619      	mov	r1, r3
 80126b4:	4817      	ldr	r0, [pc, #92]	; (8012714 <LCD_AF_GPIOConfig+0x170>)
 80126b6:	f7f3 ff7f 	bl	80065b8 <GPIO_Init>

 /* GPIOG configuration */  
  GPIO_PinAFConfig(GPIOG, GPIO_PinSource6, GPIO_AF_LTDC);
 80126ba:	220e      	movs	r2, #14
 80126bc:	2106      	movs	r1, #6
 80126be:	4816      	ldr	r0, [pc, #88]	; (8012718 <LCD_AF_GPIOConfig+0x174>)
 80126c0:	f7f4 f8e9 	bl	8006896 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOG, GPIO_PinSource7, GPIO_AF_LTDC);
 80126c4:	220e      	movs	r2, #14
 80126c6:	2107      	movs	r1, #7
 80126c8:	4813      	ldr	r0, [pc, #76]	; (8012718 <LCD_AF_GPIOConfig+0x174>)
 80126ca:	f7f4 f8e4 	bl	8006896 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOG, GPIO_PinSource10, 0x09);
 80126ce:	2209      	movs	r2, #9
 80126d0:	210a      	movs	r1, #10
 80126d2:	4811      	ldr	r0, [pc, #68]	; (8012718 <LCD_AF_GPIOConfig+0x174>)
 80126d4:	f7f4 f8df 	bl	8006896 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOG, GPIO_PinSource11, GPIO_AF_LTDC);
 80126d8:	220e      	movs	r2, #14
 80126da:	210b      	movs	r1, #11
 80126dc:	480e      	ldr	r0, [pc, #56]	; (8012718 <LCD_AF_GPIOConfig+0x174>)
 80126de:	f7f4 f8da 	bl	8006896 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOG, GPIO_PinSource12, 0x09);
 80126e2:	2209      	movs	r2, #9
 80126e4:	210c      	movs	r1, #12
 80126e6:	480c      	ldr	r0, [pc, #48]	; (8012718 <LCD_AF_GPIOConfig+0x174>)
 80126e8:	f7f4 f8d5 	bl	8006896 <GPIO_PinAFConfig>

  GPIO_InitStruct.GPIO_Pin = GPIO_Pin_6 | GPIO_Pin_7 | GPIO_Pin_10 | \
 80126ec:	f44f 53e6 	mov.w	r3, #7360	; 0x1cc0
 80126f0:	603b      	str	r3, [r7, #0]
                             GPIO_Pin_11 | GPIO_Pin_12;
  
  GPIO_Init(GPIOG, &GPIO_InitStruct);
 80126f2:	463b      	mov	r3, r7
 80126f4:	4619      	mov	r1, r3
 80126f6:	4808      	ldr	r0, [pc, #32]	; (8012718 <LCD_AF_GPIOConfig+0x174>)
 80126f8:	f7f3 ff5e 	bl	80065b8 <GPIO_Init>
 
}
 80126fc:	bf00      	nop
 80126fe:	3708      	adds	r7, #8
 8012700:	46bd      	mov	sp, r7
 8012702:	bd80      	pop	{r7, pc}
 8012704:	40020000 	.word	0x40020000
 8012708:	40020400 	.word	0x40020400
 801270c:	40020800 	.word	0x40020800
 8012710:	40020c00 	.word	0x40020c00
 8012714:	40021400 	.word	0x40021400
 8012718:	40021800 	.word	0x40021800

0801271c <PutPixel>:
  * @param  x: pixel x.
  * @param  y: pixel y.  
  * @retval None
  */
static void PutPixel(int16_t x, int16_t y)
{ 
 801271c:	b580      	push	{r7, lr}
 801271e:	b082      	sub	sp, #8
 8012720:	af00      	add	r7, sp, #0
 8012722:	4603      	mov	r3, r0
 8012724:	460a      	mov	r2, r1
 8012726:	80fb      	strh	r3, [r7, #6]
 8012728:	4613      	mov	r3, r2
 801272a:	80bb      	strh	r3, [r7, #4]
  if(x < 0 || x > 239 || y < 0 || y > 319)
 801272c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012730:	2b00      	cmp	r3, #0
 8012732:	db13      	blt.n	801275c <PutPixel+0x40>
 8012734:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012738:	2bef      	cmp	r3, #239	; 0xef
 801273a:	dc0f      	bgt.n	801275c <PutPixel+0x40>
 801273c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8012740:	2b00      	cmp	r3, #0
 8012742:	db0b      	blt.n	801275c <PutPixel+0x40>
 8012744:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8012748:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 801274c:	da06      	bge.n	801275c <PutPixel+0x40>
  {
    return;  
  }
  LCD_DrawLine(x, y, 1, LCD_DIR_HORIZONTAL);
 801274e:	88f8      	ldrh	r0, [r7, #6]
 8012750:	88b9      	ldrh	r1, [r7, #4]
 8012752:	2300      	movs	r3, #0
 8012754:	2201      	movs	r2, #1
 8012756:	f7fe fafc 	bl	8010d52 <LCD_DrawLine>
 801275a:	e000      	b.n	801275e <PutPixel+0x42>
    return;  
 801275c:	bf00      	nop
}
 801275e:	3708      	adds	r7, #8
 8012760:	46bd      	mov	sp, r7
 8012762:	bd80      	pop	{r7, pc}

08012764 <delay>:
  * @brief  Inserts a delay time.
  * @param  nCount: specifies the delay time length.
  * @retval None
  */
static void delay(__IO uint32_t nCount)
{
 8012764:	b480      	push	{r7}
 8012766:	b085      	sub	sp, #20
 8012768:	af00      	add	r7, sp, #0
 801276a:	6078      	str	r0, [r7, #4]
  __IO uint32_t index = 0; 
 801276c:	2300      	movs	r3, #0
 801276e:	60fb      	str	r3, [r7, #12]
  for(index = nCount; index != 0; index--)
 8012770:	687b      	ldr	r3, [r7, #4]
 8012772:	60fb      	str	r3, [r7, #12]
 8012774:	e002      	b.n	801277c <delay+0x18>
 8012776:	68fb      	ldr	r3, [r7, #12]
 8012778:	3b01      	subs	r3, #1
 801277a:	60fb      	str	r3, [r7, #12]
 801277c:	68fb      	ldr	r3, [r7, #12]
 801277e:	2b00      	cmp	r3, #0
 8012780:	d1f9      	bne.n	8012776 <delay+0x12>
  {
  }
}
 8012782:	bf00      	nop
 8012784:	3714      	adds	r7, #20
 8012786:	46bd      	mov	sp, r7
 8012788:	f85d 7b04 	ldr.w	r7, [sp], #4
 801278c:	4770      	bx	lr
 801278e:	bf00      	nop

08012790 <SDRAM_Init>:
  *         on the SDRAM.
  * @param  None
  * @retval None
  */
void SDRAM_Init(void)
{
 8012790:	b580      	push	{r7, lr}
 8012792:	b092      	sub	sp, #72	; 0x48
 8012794:	af00      	add	r7, sp, #0
  FMC_SDRAMInitTypeDef  FMC_SDRAMInitStructure;
  FMC_SDRAMTimingInitTypeDef  FMC_SDRAMTimingInitStructure; 
  
  /* GPIO configuration for FMC SDRAM bank */
  SDRAM_GPIOConfig();
 8012796:	f000 f836 	bl	8012806 <SDRAM_GPIOConfig>
  
  /* Enable FMC clock */
  RCC_AHB3PeriphClockCmd(RCC_AHB3Periph_FMC, ENABLE);
 801279a:	2101      	movs	r1, #1
 801279c:	2001      	movs	r0, #1
 801279e:	f7f6 f91b 	bl	80089d8 <RCC_AHB3PeriphClockCmd>
 
/* FMC Configuration ---------------------------------------------------------*/
/* FMC SDRAM Bank configuration */   
  /* Timing configuration for 90 Mhz of SD clock frequency (180Mhz/2) */
  /* TMRD: 2 Clock cycles */
  FMC_SDRAMTimingInitStructure.FMC_LoadToActiveDelay    = 2;      
 80127a2:	2302      	movs	r3, #2
 80127a4:	603b      	str	r3, [r7, #0]
  /* TXSR: min=70ns (7x11.11ns) */
  FMC_SDRAMTimingInitStructure.FMC_ExitSelfRefreshDelay = 7;
 80127a6:	2307      	movs	r3, #7
 80127a8:	607b      	str	r3, [r7, #4]
  /* TRAS: min=42ns (4x11.11ns) max=120k (ns) */
  FMC_SDRAMTimingInitStructure.FMC_SelfRefreshTime      = 4;
 80127aa:	2304      	movs	r3, #4
 80127ac:	60bb      	str	r3, [r7, #8]
  /* TRC:  min=70 (7x11.11ns) */        
  FMC_SDRAMTimingInitStructure.FMC_RowCycleDelay        = 7;         
 80127ae:	2307      	movs	r3, #7
 80127b0:	60fb      	str	r3, [r7, #12]
  /* TWR:  min=1+ 7ns (1+1x11.11ns) */
  FMC_SDRAMTimingInitStructure.FMC_WriteRecoveryTime    = 2;      
 80127b2:	2302      	movs	r3, #2
 80127b4:	613b      	str	r3, [r7, #16]
  /* TRP:  20ns => 2x11.11ns */
  FMC_SDRAMTimingInitStructure.FMC_RPDelay              = 2;                
 80127b6:	2302      	movs	r3, #2
 80127b8:	617b      	str	r3, [r7, #20]
  /* TRCD: 20ns => 2x11.11ns */
  FMC_SDRAMTimingInitStructure.FMC_RCDDelay             = 2;
 80127ba:	2302      	movs	r3, #2
 80127bc:	61bb      	str	r3, [r7, #24]

/* FMC SDRAM control configuration */
  FMC_SDRAMInitStructure.FMC_Bank = FMC_Bank2_SDRAM;
 80127be:	2301      	movs	r3, #1
 80127c0:	61fb      	str	r3, [r7, #28]
  /* Row addressing: [7:0] */
  FMC_SDRAMInitStructure.FMC_ColumnBitsNumber = FMC_ColumnBits_Number_8b;
 80127c2:	2300      	movs	r3, #0
 80127c4:	623b      	str	r3, [r7, #32]
  /* Column addressing: [11:0] */
  FMC_SDRAMInitStructure.FMC_RowBitsNumber = FMC_RowBits_Number_12b;
 80127c6:	2304      	movs	r3, #4
 80127c8:	627b      	str	r3, [r7, #36]	; 0x24
  FMC_SDRAMInitStructure.FMC_SDMemoryDataWidth = SDRAM_MEMORY_WIDTH;
 80127ca:	2310      	movs	r3, #16
 80127cc:	62bb      	str	r3, [r7, #40]	; 0x28
  FMC_SDRAMInitStructure.FMC_InternalBankNumber = FMC_InternalBank_Number_4;
 80127ce:	2340      	movs	r3, #64	; 0x40
 80127d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  FMC_SDRAMInitStructure.FMC_CASLatency = SDRAM_CAS_LATENCY; 
 80127d2:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80127d6:	633b      	str	r3, [r7, #48]	; 0x30
  FMC_SDRAMInitStructure.FMC_WriteProtection = FMC_Write_Protection_Disable;
 80127d8:	2300      	movs	r3, #0
 80127da:	637b      	str	r3, [r7, #52]	; 0x34
  FMC_SDRAMInitStructure.FMC_SDClockPeriod = SDCLOCK_PERIOD;  
 80127dc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80127e0:	63bb      	str	r3, [r7, #56]	; 0x38
  FMC_SDRAMInitStructure.FMC_ReadBurst = SDRAM_READBURST;
 80127e2:	2300      	movs	r3, #0
 80127e4:	63fb      	str	r3, [r7, #60]	; 0x3c
  FMC_SDRAMInitStructure.FMC_ReadPipeDelay = FMC_ReadPipe_Delay_1;
 80127e6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80127ea:	643b      	str	r3, [r7, #64]	; 0x40
  FMC_SDRAMInitStructure.FMC_SDRAMTimingStruct = &FMC_SDRAMTimingInitStructure;
 80127ec:	463b      	mov	r3, r7
 80127ee:	647b      	str	r3, [r7, #68]	; 0x44
  
  /* FMC SDRAM bank initialization */
  FMC_SDRAMInit(&FMC_SDRAMInitStructure); 
 80127f0:	f107 031c 	add.w	r3, r7, #28
 80127f4:	4618      	mov	r0, r3
 80127f6:	f7f3 fb2b 	bl	8005e50 <FMC_SDRAMInit>
  
  /* FMC SDRAM device initialization sequence */
  SDRAM_InitSequence(); 
 80127fa:	f000 f90f 	bl	8012a1c <SDRAM_InitSequence>
  
}
 80127fe:	bf00      	nop
 8012800:	3748      	adds	r7, #72	; 0x48
 8012802:	46bd      	mov	sp, r7
 8012804:	bd80      	pop	{r7, pc}

08012806 <SDRAM_GPIOConfig>:
  * @brief  Configures all SDRAM memory I/Os pins. 
  * @param  None. 
  * @retval None.
  */
void SDRAM_GPIOConfig(void)
{
 8012806:	b580      	push	{r7, lr}
 8012808:	b082      	sub	sp, #8
 801280a:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable GPIOs clock */
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB | RCC_AHB1Periph_GPIOC | RCC_AHB1Periph_GPIOD |
 801280c:	2101      	movs	r1, #1
 801280e:	207e      	movs	r0, #126	; 0x7e
 8012810:	f7f6 f8a2 	bl	8008958 <RCC_AHB1PeriphClockCmd>
 +-------------------+  
  
*/
  
  /* Common GPIO configuration */
  GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_AF;
 8012814:	2302      	movs	r3, #2
 8012816:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8012818:	2302      	movs	r3, #2
 801281a:	717b      	strb	r3, [r7, #5]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 801281c:	2300      	movs	r3, #0
 801281e:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
 8012820:	2300      	movs	r3, #0
 8012822:	71fb      	strb	r3, [r7, #7]

  /* GPIOB configuration */
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource5 , GPIO_AF_FMC);
 8012824:	220c      	movs	r2, #12
 8012826:	2105      	movs	r1, #5
 8012828:	4876      	ldr	r0, [pc, #472]	; (8012a04 <SDRAM_GPIOConfig+0x1fe>)
 801282a:	f7f4 f834 	bl	8006896 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource6 , GPIO_AF_FMC);
 801282e:	220c      	movs	r2, #12
 8012830:	2106      	movs	r1, #6
 8012832:	4874      	ldr	r0, [pc, #464]	; (8012a04 <SDRAM_GPIOConfig+0x1fe>)
 8012834:	f7f4 f82f 	bl	8006896 <GPIO_PinAFConfig>
  
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_5  | GPIO_Pin_6;      
 8012838:	2360      	movs	r3, #96	; 0x60
 801283a:	603b      	str	r3, [r7, #0]

  GPIO_Init(GPIOB, &GPIO_InitStructure);  
 801283c:	463b      	mov	r3, r7
 801283e:	4619      	mov	r1, r3
 8012840:	4870      	ldr	r0, [pc, #448]	; (8012a04 <SDRAM_GPIOConfig+0x1fe>)
 8012842:	f7f3 feb9 	bl	80065b8 <GPIO_Init>

  /* GPIOC configuration */
  GPIO_PinAFConfig(GPIOC, GPIO_PinSource0 , GPIO_AF_FMC);
 8012846:	220c      	movs	r2, #12
 8012848:	2100      	movs	r1, #0
 801284a:	486f      	ldr	r0, [pc, #444]	; (8012a08 <SDRAM_GPIOConfig+0x202>)
 801284c:	f7f4 f823 	bl	8006896 <GPIO_PinAFConfig>
  
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0;      
 8012850:	2301      	movs	r3, #1
 8012852:	603b      	str	r3, [r7, #0]

  GPIO_Init(GPIOC, &GPIO_InitStructure);  
 8012854:	463b      	mov	r3, r7
 8012856:	4619      	mov	r1, r3
 8012858:	486b      	ldr	r0, [pc, #428]	; (8012a08 <SDRAM_GPIOConfig+0x202>)
 801285a:	f7f3 fead 	bl	80065b8 <GPIO_Init>
  
  /* GPIOD configuration */
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource0, GPIO_AF_FMC);
 801285e:	220c      	movs	r2, #12
 8012860:	2100      	movs	r1, #0
 8012862:	486a      	ldr	r0, [pc, #424]	; (8012a0c <SDRAM_GPIOConfig+0x206>)
 8012864:	f7f4 f817 	bl	8006896 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource1, GPIO_AF_FMC);
 8012868:	220c      	movs	r2, #12
 801286a:	2101      	movs	r1, #1
 801286c:	4867      	ldr	r0, [pc, #412]	; (8012a0c <SDRAM_GPIOConfig+0x206>)
 801286e:	f7f4 f812 	bl	8006896 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource8, GPIO_AF_FMC);
 8012872:	220c      	movs	r2, #12
 8012874:	2108      	movs	r1, #8
 8012876:	4865      	ldr	r0, [pc, #404]	; (8012a0c <SDRAM_GPIOConfig+0x206>)
 8012878:	f7f4 f80d 	bl	8006896 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource9, GPIO_AF_FMC);
 801287c:	220c      	movs	r2, #12
 801287e:	2109      	movs	r1, #9
 8012880:	4862      	ldr	r0, [pc, #392]	; (8012a0c <SDRAM_GPIOConfig+0x206>)
 8012882:	f7f4 f808 	bl	8006896 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource10, GPIO_AF_FMC);
 8012886:	220c      	movs	r2, #12
 8012888:	210a      	movs	r1, #10
 801288a:	4860      	ldr	r0, [pc, #384]	; (8012a0c <SDRAM_GPIOConfig+0x206>)
 801288c:	f7f4 f803 	bl	8006896 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource14, GPIO_AF_FMC);
 8012890:	220c      	movs	r2, #12
 8012892:	210e      	movs	r1, #14
 8012894:	485d      	ldr	r0, [pc, #372]	; (8012a0c <SDRAM_GPIOConfig+0x206>)
 8012896:	f7f3 fffe 	bl	8006896 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource15, GPIO_AF_FMC);
 801289a:	220c      	movs	r2, #12
 801289c:	210f      	movs	r1, #15
 801289e:	485b      	ldr	r0, [pc, #364]	; (8012a0c <SDRAM_GPIOConfig+0x206>)
 80128a0:	f7f3 fff9 	bl	8006896 <GPIO_PinAFConfig>

  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1  | GPIO_Pin_8 |
 80128a4:	f24c 7303 	movw	r3, #50947	; 0xc703
 80128a8:	603b      	str	r3, [r7, #0]
                                GPIO_Pin_9 | GPIO_Pin_10 | GPIO_Pin_14 |
                                GPIO_Pin_15;

  GPIO_Init(GPIOD, &GPIO_InitStructure);
 80128aa:	463b      	mov	r3, r7
 80128ac:	4619      	mov	r1, r3
 80128ae:	4857      	ldr	r0, [pc, #348]	; (8012a0c <SDRAM_GPIOConfig+0x206>)
 80128b0:	f7f3 fe82 	bl	80065b8 <GPIO_Init>

  /* GPIOE configuration */
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource0 , GPIO_AF_FMC);
 80128b4:	220c      	movs	r2, #12
 80128b6:	2100      	movs	r1, #0
 80128b8:	4855      	ldr	r0, [pc, #340]	; (8012a10 <SDRAM_GPIOConfig+0x20a>)
 80128ba:	f7f3 ffec 	bl	8006896 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource1 , GPIO_AF_FMC);
 80128be:	220c      	movs	r2, #12
 80128c0:	2101      	movs	r1, #1
 80128c2:	4853      	ldr	r0, [pc, #332]	; (8012a10 <SDRAM_GPIOConfig+0x20a>)
 80128c4:	f7f3 ffe7 	bl	8006896 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource7 , GPIO_AF_FMC);
 80128c8:	220c      	movs	r2, #12
 80128ca:	2107      	movs	r1, #7
 80128cc:	4850      	ldr	r0, [pc, #320]	; (8012a10 <SDRAM_GPIOConfig+0x20a>)
 80128ce:	f7f3 ffe2 	bl	8006896 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource8 , GPIO_AF_FMC);
 80128d2:	220c      	movs	r2, #12
 80128d4:	2108      	movs	r1, #8
 80128d6:	484e      	ldr	r0, [pc, #312]	; (8012a10 <SDRAM_GPIOConfig+0x20a>)
 80128d8:	f7f3 ffdd 	bl	8006896 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource9 , GPIO_AF_FMC);
 80128dc:	220c      	movs	r2, #12
 80128de:	2109      	movs	r1, #9
 80128e0:	484b      	ldr	r0, [pc, #300]	; (8012a10 <SDRAM_GPIOConfig+0x20a>)
 80128e2:	f7f3 ffd8 	bl	8006896 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource10 , GPIO_AF_FMC);
 80128e6:	220c      	movs	r2, #12
 80128e8:	210a      	movs	r1, #10
 80128ea:	4849      	ldr	r0, [pc, #292]	; (8012a10 <SDRAM_GPIOConfig+0x20a>)
 80128ec:	f7f3 ffd3 	bl	8006896 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource11 , GPIO_AF_FMC);
 80128f0:	220c      	movs	r2, #12
 80128f2:	210b      	movs	r1, #11
 80128f4:	4846      	ldr	r0, [pc, #280]	; (8012a10 <SDRAM_GPIOConfig+0x20a>)
 80128f6:	f7f3 ffce 	bl	8006896 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource12 , GPIO_AF_FMC);
 80128fa:	220c      	movs	r2, #12
 80128fc:	210c      	movs	r1, #12
 80128fe:	4844      	ldr	r0, [pc, #272]	; (8012a10 <SDRAM_GPIOConfig+0x20a>)
 8012900:	f7f3 ffc9 	bl	8006896 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource13 , GPIO_AF_FMC);
 8012904:	220c      	movs	r2, #12
 8012906:	210d      	movs	r1, #13
 8012908:	4841      	ldr	r0, [pc, #260]	; (8012a10 <SDRAM_GPIOConfig+0x20a>)
 801290a:	f7f3 ffc4 	bl	8006896 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource14 , GPIO_AF_FMC);
 801290e:	220c      	movs	r2, #12
 8012910:	210e      	movs	r1, #14
 8012912:	483f      	ldr	r0, [pc, #252]	; (8012a10 <SDRAM_GPIOConfig+0x20a>)
 8012914:	f7f3 ffbf 	bl	8006896 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource15 , GPIO_AF_FMC);
 8012918:	220c      	movs	r2, #12
 801291a:	210f      	movs	r1, #15
 801291c:	483c      	ldr	r0, [pc, #240]	; (8012a10 <SDRAM_GPIOConfig+0x20a>)
 801291e:	f7f3 ffba 	bl	8006896 <GPIO_PinAFConfig>

  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0  | GPIO_Pin_1  | GPIO_Pin_7 |
 8012922:	f64f 7383 	movw	r3, #65411	; 0xff83
 8012926:	603b      	str	r3, [r7, #0]
                                GPIO_Pin_8  | GPIO_Pin_9  | GPIO_Pin_10 |
                                GPIO_Pin_11 | GPIO_Pin_12 | GPIO_Pin_13 |
                                GPIO_Pin_14 | GPIO_Pin_15;

  GPIO_Init(GPIOE, &GPIO_InitStructure);
 8012928:	463b      	mov	r3, r7
 801292a:	4619      	mov	r1, r3
 801292c:	4838      	ldr	r0, [pc, #224]	; (8012a10 <SDRAM_GPIOConfig+0x20a>)
 801292e:	f7f3 fe43 	bl	80065b8 <GPIO_Init>

  /* GPIOF configuration */
  GPIO_PinAFConfig(GPIOF, GPIO_PinSource0 , GPIO_AF_FMC);
 8012932:	220c      	movs	r2, #12
 8012934:	2100      	movs	r1, #0
 8012936:	4837      	ldr	r0, [pc, #220]	; (8012a14 <SDRAM_GPIOConfig+0x20e>)
 8012938:	f7f3 ffad 	bl	8006896 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOF, GPIO_PinSource1 , GPIO_AF_FMC);
 801293c:	220c      	movs	r2, #12
 801293e:	2101      	movs	r1, #1
 8012940:	4834      	ldr	r0, [pc, #208]	; (8012a14 <SDRAM_GPIOConfig+0x20e>)
 8012942:	f7f3 ffa8 	bl	8006896 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOF, GPIO_PinSource2 , GPIO_AF_FMC);
 8012946:	220c      	movs	r2, #12
 8012948:	2102      	movs	r1, #2
 801294a:	4832      	ldr	r0, [pc, #200]	; (8012a14 <SDRAM_GPIOConfig+0x20e>)
 801294c:	f7f3 ffa3 	bl	8006896 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOF, GPIO_PinSource3 , GPIO_AF_FMC);
 8012950:	220c      	movs	r2, #12
 8012952:	2103      	movs	r1, #3
 8012954:	482f      	ldr	r0, [pc, #188]	; (8012a14 <SDRAM_GPIOConfig+0x20e>)
 8012956:	f7f3 ff9e 	bl	8006896 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOF, GPIO_PinSource4 , GPIO_AF_FMC);
 801295a:	220c      	movs	r2, #12
 801295c:	2104      	movs	r1, #4
 801295e:	482d      	ldr	r0, [pc, #180]	; (8012a14 <SDRAM_GPIOConfig+0x20e>)
 8012960:	f7f3 ff99 	bl	8006896 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOF, GPIO_PinSource5 , GPIO_AF_FMC);
 8012964:	220c      	movs	r2, #12
 8012966:	2105      	movs	r1, #5
 8012968:	482a      	ldr	r0, [pc, #168]	; (8012a14 <SDRAM_GPIOConfig+0x20e>)
 801296a:	f7f3 ff94 	bl	8006896 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOF, GPIO_PinSource11 , GPIO_AF_FMC);
 801296e:	220c      	movs	r2, #12
 8012970:	210b      	movs	r1, #11
 8012972:	4828      	ldr	r0, [pc, #160]	; (8012a14 <SDRAM_GPIOConfig+0x20e>)
 8012974:	f7f3 ff8f 	bl	8006896 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOF, GPIO_PinSource12 , GPIO_AF_FMC);
 8012978:	220c      	movs	r2, #12
 801297a:	210c      	movs	r1, #12
 801297c:	4825      	ldr	r0, [pc, #148]	; (8012a14 <SDRAM_GPIOConfig+0x20e>)
 801297e:	f7f3 ff8a 	bl	8006896 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOF, GPIO_PinSource13 , GPIO_AF_FMC);
 8012982:	220c      	movs	r2, #12
 8012984:	210d      	movs	r1, #13
 8012986:	4823      	ldr	r0, [pc, #140]	; (8012a14 <SDRAM_GPIOConfig+0x20e>)
 8012988:	f7f3 ff85 	bl	8006896 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOF, GPIO_PinSource14 , GPIO_AF_FMC);
 801298c:	220c      	movs	r2, #12
 801298e:	210e      	movs	r1, #14
 8012990:	4820      	ldr	r0, [pc, #128]	; (8012a14 <SDRAM_GPIOConfig+0x20e>)
 8012992:	f7f3 ff80 	bl	8006896 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOF, GPIO_PinSource15 , GPIO_AF_FMC);
 8012996:	220c      	movs	r2, #12
 8012998:	210f      	movs	r1, #15
 801299a:	481e      	ldr	r0, [pc, #120]	; (8012a14 <SDRAM_GPIOConfig+0x20e>)
 801299c:	f7f3 ff7b 	bl	8006896 <GPIO_PinAFConfig>

  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0  | GPIO_Pin_1 | GPIO_Pin_2 | 
 80129a0:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80129a4:	603b      	str	r3, [r7, #0]
                                GPIO_Pin_3  | GPIO_Pin_4 | GPIO_Pin_5 |
                                GPIO_Pin_11 | GPIO_Pin_12 | GPIO_Pin_13 |
                                GPIO_Pin_14 | GPIO_Pin_15;      

  GPIO_Init(GPIOF, &GPIO_InitStructure);
 80129a6:	463b      	mov	r3, r7
 80129a8:	4619      	mov	r1, r3
 80129aa:	481a      	ldr	r0, [pc, #104]	; (8012a14 <SDRAM_GPIOConfig+0x20e>)
 80129ac:	f7f3 fe04 	bl	80065b8 <GPIO_Init>

  /* GPIOG configuration */
  GPIO_PinAFConfig(GPIOG, GPIO_PinSource0 , GPIO_AF_FMC);
 80129b0:	220c      	movs	r2, #12
 80129b2:	2100      	movs	r1, #0
 80129b4:	4818      	ldr	r0, [pc, #96]	; (8012a18 <SDRAM_GPIOConfig+0x212>)
 80129b6:	f7f3 ff6e 	bl	8006896 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOG, GPIO_PinSource1 , GPIO_AF_FMC);
 80129ba:	220c      	movs	r2, #12
 80129bc:	2101      	movs	r1, #1
 80129be:	4816      	ldr	r0, [pc, #88]	; (8012a18 <SDRAM_GPIOConfig+0x212>)
 80129c0:	f7f3 ff69 	bl	8006896 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOG, GPIO_PinSource4 , GPIO_AF_FMC);
 80129c4:	220c      	movs	r2, #12
 80129c6:	2104      	movs	r1, #4
 80129c8:	4813      	ldr	r0, [pc, #76]	; (8012a18 <SDRAM_GPIOConfig+0x212>)
 80129ca:	f7f3 ff64 	bl	8006896 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOG, GPIO_PinSource5 , GPIO_AF_FMC);
 80129ce:	220c      	movs	r2, #12
 80129d0:	2105      	movs	r1, #5
 80129d2:	4811      	ldr	r0, [pc, #68]	; (8012a18 <SDRAM_GPIOConfig+0x212>)
 80129d4:	f7f3 ff5f 	bl	8006896 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOG, GPIO_PinSource8 , GPIO_AF_FMC);
 80129d8:	220c      	movs	r2, #12
 80129da:	2108      	movs	r1, #8
 80129dc:	480e      	ldr	r0, [pc, #56]	; (8012a18 <SDRAM_GPIOConfig+0x212>)
 80129de:	f7f3 ff5a 	bl	8006896 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOG, GPIO_PinSource15 , GPIO_AF_FMC);
 80129e2:	220c      	movs	r2, #12
 80129e4:	210f      	movs	r1, #15
 80129e6:	480c      	ldr	r0, [pc, #48]	; (8012a18 <SDRAM_GPIOConfig+0x212>)
 80129e8:	f7f3 ff55 	bl	8006896 <GPIO_PinAFConfig>
  

  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_4 |
 80129ec:	f248 1333 	movw	r3, #33075	; 0x8133
 80129f0:	603b      	str	r3, [r7, #0]
                                GPIO_Pin_5 | GPIO_Pin_8 | GPIO_Pin_15;

  GPIO_Init(GPIOG, &GPIO_InitStructure);    
 80129f2:	463b      	mov	r3, r7
 80129f4:	4619      	mov	r1, r3
 80129f6:	4808      	ldr	r0, [pc, #32]	; (8012a18 <SDRAM_GPIOConfig+0x212>)
 80129f8:	f7f3 fdde 	bl	80065b8 <GPIO_Init>
}
 80129fc:	bf00      	nop
 80129fe:	3708      	adds	r7, #8
 8012a00:	46bd      	mov	sp, r7
 8012a02:	bd80      	pop	{r7, pc}
 8012a04:	40020400 	.word	0x40020400
 8012a08:	40020800 	.word	0x40020800
 8012a0c:	40020c00 	.word	0x40020c00
 8012a10:	40021000 	.word	0x40021000
 8012a14:	40021400 	.word	0x40021400
 8012a18:	40021800 	.word	0x40021800

08012a1c <SDRAM_InitSequence>:
  * @brief  Executes the SDRAM memory initialization sequence. 
  * @param  None. 
  * @retval None.
  */
void SDRAM_InitSequence(void)
{
 8012a1c:	b580      	push	{r7, lr}
 8012a1e:	b086      	sub	sp, #24
 8012a20:	af00      	add	r7, sp, #0
  FMC_SDRAMCommandTypeDef FMC_SDRAMCommandStructure;
  uint32_t tmpr = 0;
 8012a22:	2300      	movs	r3, #0
 8012a24:	617b      	str	r3, [r7, #20]
  
/* Step 3 --------------------------------------------------------------------*/
  /* Configure a clock configuration enable command */
  FMC_SDRAMCommandStructure.FMC_CommandMode = FMC_Command_Mode_CLK_Enabled;
 8012a26:	2301      	movs	r3, #1
 8012a28:	607b      	str	r3, [r7, #4]
  FMC_SDRAMCommandStructure.FMC_CommandTarget = FMC_Command_Target_bank2;
 8012a2a:	2308      	movs	r3, #8
 8012a2c:	60bb      	str	r3, [r7, #8]
  FMC_SDRAMCommandStructure.FMC_AutoRefreshNumber = 1;
 8012a2e:	2301      	movs	r3, #1
 8012a30:	60fb      	str	r3, [r7, #12]
  FMC_SDRAMCommandStructure.FMC_ModeRegisterDefinition = 0;
 8012a32:	2300      	movs	r3, #0
 8012a34:	613b      	str	r3, [r7, #16]
  /* Wait until the SDRAM controller is ready */ 
  while(FMC_GetFlagStatus(FMC_Bank2_SDRAM, FMC_FLAG_Busy) != RESET)
 8012a36:	bf00      	nop
 8012a38:	2120      	movs	r1, #32
 8012a3a:	2001      	movs	r0, #1
 8012a3c:	f7f3 fbf4 	bl	8006228 <FMC_GetFlagStatus>
 8012a40:	4603      	mov	r3, r0
 8012a42:	2b00      	cmp	r3, #0
 8012a44:	d1f8      	bne.n	8012a38 <SDRAM_InitSequence+0x1c>
  {
  }
  /* Send the command */
  FMC_SDRAMCmdConfig(&FMC_SDRAMCommandStructure);  
 8012a46:	1d3b      	adds	r3, r7, #4
 8012a48:	4618      	mov	r0, r3
 8012a4a:	f7f3 faf4 	bl	8006036 <FMC_SDRAMCmdConfig>
  
/* Step 4 --------------------------------------------------------------------*/
  /* Insert 100 ms delay */
  __Delay(10);
 8012a4e:	200a      	movs	r0, #10
 8012a50:	f000 f8ac 	bl	8012bac <delay>
    
/* Step 5 --------------------------------------------------------------------*/
  /* Configure a PALL (precharge all) command */ 
  FMC_SDRAMCommandStructure.FMC_CommandMode = FMC_Command_Mode_PALL;
 8012a54:	2302      	movs	r3, #2
 8012a56:	607b      	str	r3, [r7, #4]
  FMC_SDRAMCommandStructure.FMC_CommandTarget = FMC_Command_Target_bank2;
 8012a58:	2308      	movs	r3, #8
 8012a5a:	60bb      	str	r3, [r7, #8]
  FMC_SDRAMCommandStructure.FMC_AutoRefreshNumber = 1;
 8012a5c:	2301      	movs	r3, #1
 8012a5e:	60fb      	str	r3, [r7, #12]
  FMC_SDRAMCommandStructure.FMC_ModeRegisterDefinition = 0;
 8012a60:	2300      	movs	r3, #0
 8012a62:	613b      	str	r3, [r7, #16]
  /* Wait until the SDRAM controller is ready */ 
  while(FMC_GetFlagStatus(FMC_Bank2_SDRAM, FMC_FLAG_Busy) != RESET)
 8012a64:	bf00      	nop
 8012a66:	2120      	movs	r1, #32
 8012a68:	2001      	movs	r0, #1
 8012a6a:	f7f3 fbdd 	bl	8006228 <FMC_GetFlagStatus>
 8012a6e:	4603      	mov	r3, r0
 8012a70:	2b00      	cmp	r3, #0
 8012a72:	d1f8      	bne.n	8012a66 <SDRAM_InitSequence+0x4a>
  {
  }
  /* Send the command */
  FMC_SDRAMCmdConfig(&FMC_SDRAMCommandStructure);
 8012a74:	1d3b      	adds	r3, r7, #4
 8012a76:	4618      	mov	r0, r3
 8012a78:	f7f3 fadd 	bl	8006036 <FMC_SDRAMCmdConfig>
  
/* Step 6 --------------------------------------------------------------------*/
  /* Configure a Auto-Refresh command */ 
  FMC_SDRAMCommandStructure.FMC_CommandMode = FMC_Command_Mode_AutoRefresh;
 8012a7c:	2303      	movs	r3, #3
 8012a7e:	607b      	str	r3, [r7, #4]
  FMC_SDRAMCommandStructure.FMC_CommandTarget = FMC_Command_Target_bank2;
 8012a80:	2308      	movs	r3, #8
 8012a82:	60bb      	str	r3, [r7, #8]
  FMC_SDRAMCommandStructure.FMC_AutoRefreshNumber = 4;
 8012a84:	2304      	movs	r3, #4
 8012a86:	60fb      	str	r3, [r7, #12]
  FMC_SDRAMCommandStructure.FMC_ModeRegisterDefinition = 0;
 8012a88:	2300      	movs	r3, #0
 8012a8a:	613b      	str	r3, [r7, #16]
  /* Wait until the SDRAM controller is ready */ 
  while(FMC_GetFlagStatus(FMC_Bank2_SDRAM, FMC_FLAG_Busy) != RESET)
 8012a8c:	bf00      	nop
 8012a8e:	2120      	movs	r1, #32
 8012a90:	2001      	movs	r0, #1
 8012a92:	f7f3 fbc9 	bl	8006228 <FMC_GetFlagStatus>
 8012a96:	4603      	mov	r3, r0
 8012a98:	2b00      	cmp	r3, #0
 8012a9a:	d1f8      	bne.n	8012a8e <SDRAM_InitSequence+0x72>
  {
  }
  /* Send the  first command */
  FMC_SDRAMCmdConfig(&FMC_SDRAMCommandStructure);
 8012a9c:	1d3b      	adds	r3, r7, #4
 8012a9e:	4618      	mov	r0, r3
 8012aa0:	f7f3 fac9 	bl	8006036 <FMC_SDRAMCmdConfig>
  
  /* Wait until the SDRAM controller is ready */ 
  while(FMC_GetFlagStatus(FMC_Bank2_SDRAM, FMC_FLAG_Busy) != RESET)
 8012aa4:	bf00      	nop
 8012aa6:	2120      	movs	r1, #32
 8012aa8:	2001      	movs	r0, #1
 8012aaa:	f7f3 fbbd 	bl	8006228 <FMC_GetFlagStatus>
 8012aae:	4603      	mov	r3, r0
 8012ab0:	2b00      	cmp	r3, #0
 8012ab2:	d1f8      	bne.n	8012aa6 <SDRAM_InitSequence+0x8a>
  {
  }
  /* Send the second command */
  FMC_SDRAMCmdConfig(&FMC_SDRAMCommandStructure);
 8012ab4:	1d3b      	adds	r3, r7, #4
 8012ab6:	4618      	mov	r0, r3
 8012ab8:	f7f3 fabd 	bl	8006036 <FMC_SDRAMCmdConfig>
  
/* Step 7 --------------------------------------------------------------------*/
  /* Program the external memory mode register */
  tmpr = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_2          |
 8012abc:	f240 2331 	movw	r3, #561	; 0x231
 8012ac0:	617b      	str	r3, [r7, #20]
                   SDRAM_MODEREG_CAS_LATENCY_3           |
                   SDRAM_MODEREG_OPERATING_MODE_STANDARD |
                   SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  /* Configure a load Mode register command*/ 
  FMC_SDRAMCommandStructure.FMC_CommandMode = FMC_Command_Mode_LoadMode;
 8012ac2:	2304      	movs	r3, #4
 8012ac4:	607b      	str	r3, [r7, #4]
  FMC_SDRAMCommandStructure.FMC_CommandTarget = FMC_Command_Target_bank2;
 8012ac6:	2308      	movs	r3, #8
 8012ac8:	60bb      	str	r3, [r7, #8]
  FMC_SDRAMCommandStructure.FMC_AutoRefreshNumber = 1;
 8012aca:	2301      	movs	r3, #1
 8012acc:	60fb      	str	r3, [r7, #12]
  FMC_SDRAMCommandStructure.FMC_ModeRegisterDefinition = tmpr;
 8012ace:	697b      	ldr	r3, [r7, #20]
 8012ad0:	613b      	str	r3, [r7, #16]
  /* Wait until the SDRAM controller is ready */ 
  while(FMC_GetFlagStatus(FMC_Bank2_SDRAM, FMC_FLAG_Busy) != RESET)
 8012ad2:	bf00      	nop
 8012ad4:	2120      	movs	r1, #32
 8012ad6:	2001      	movs	r0, #1
 8012ad8:	f7f3 fba6 	bl	8006228 <FMC_GetFlagStatus>
 8012adc:	4603      	mov	r3, r0
 8012ade:	2b00      	cmp	r3, #0
 8012ae0:	d1f8      	bne.n	8012ad4 <SDRAM_InitSequence+0xb8>
  {
  }
  /* Send the command */
  FMC_SDRAMCmdConfig(&FMC_SDRAMCommandStructure);
 8012ae2:	1d3b      	adds	r3, r7, #4
 8012ae4:	4618      	mov	r0, r3
 8012ae6:	f7f3 faa6 	bl	8006036 <FMC_SDRAMCmdConfig>
/* Step 8 --------------------------------------------------------------------*/

  /* Set the refresh rate counter */
  /* (15.62 us x Freq) - 20 */
  /* Set the device refresh counter */
  FMC_SetRefreshCount(1386);
 8012aea:	f240 506a 	movw	r0, #1386	; 0x56a
 8012aee:	f7f3 fae1 	bl	80060b4 <FMC_SetRefreshCount>
  /* Wait until the SDRAM controller is ready */ 
  while(FMC_GetFlagStatus(FMC_Bank2_SDRAM, FMC_FLAG_Busy) != RESET)
 8012af2:	bf00      	nop
 8012af4:	2120      	movs	r1, #32
 8012af6:	2001      	movs	r0, #1
 8012af8:	f7f3 fb96 	bl	8006228 <FMC_GetFlagStatus>
 8012afc:	4603      	mov	r3, r0
 8012afe:	2b00      	cmp	r3, #0
 8012b00:	d1f8      	bne.n	8012af4 <SDRAM_InitSequence+0xd8>
  {
  }
}
 8012b02:	bf00      	nop
 8012b04:	3718      	adds	r7, #24
 8012b06:	46bd      	mov	sp, r7
 8012b08:	bd80      	pop	{r7, pc}

08012b0a <SDRAM_WriteBuffer>:
  *         written.
  * @param  uwBufferSize: number of words to write. 
  * @retval None.
  */
void SDRAM_WriteBuffer(uint32_t* pBuffer, uint32_t uwWriteAddress, uint32_t uwBufferSize)
{
 8012b0a:	b580      	push	{r7, lr}
 8012b0c:	b086      	sub	sp, #24
 8012b0e:	af00      	add	r7, sp, #0
 8012b10:	60f8      	str	r0, [r7, #12]
 8012b12:	60b9      	str	r1, [r7, #8]
 8012b14:	607a      	str	r2, [r7, #4]
  __IO uint32_t write_pointer = (uint32_t)uwWriteAddress;
 8012b16:	68bb      	ldr	r3, [r7, #8]
 8012b18:	617b      	str	r3, [r7, #20]

  /* Disable write protection */
  FMC_SDRAMWriteProtectionConfig(FMC_Bank2_SDRAM, DISABLE);
 8012b1a:	2100      	movs	r1, #0
 8012b1c:	2001      	movs	r0, #1
 8012b1e:	f7f3 faf1 	bl	8006104 <FMC_SDRAMWriteProtectionConfig>
  
  /* Wait until the SDRAM controller is ready */ 
  while(FMC_GetFlagStatus(FMC_Bank2_SDRAM, FMC_FLAG_Busy) != RESET)
 8012b22:	bf00      	nop
 8012b24:	2120      	movs	r1, #32
 8012b26:	2001      	movs	r0, #1
 8012b28:	f7f3 fb7e 	bl	8006228 <FMC_GetFlagStatus>
 8012b2c:	4603      	mov	r3, r0
 8012b2e:	2b00      	cmp	r3, #0
 8012b30:	d1f8      	bne.n	8012b24 <SDRAM_WriteBuffer+0x1a>
  {
  }

  /* While there is data to write */
  for (; uwBufferSize != 0; uwBufferSize--) 
 8012b32:	e00d      	b.n	8012b50 <SDRAM_WriteBuffer+0x46>
  {
    /* Transfer data to the memory */
    *(uint32_t *) (SDRAM_BANK_ADDR + write_pointer) = *pBuffer++;
 8012b34:	68fb      	ldr	r3, [r7, #12]
 8012b36:	1d1a      	adds	r2, r3, #4
 8012b38:	60fa      	str	r2, [r7, #12]
 8012b3a:	697a      	ldr	r2, [r7, #20]
 8012b3c:	f102 4250 	add.w	r2, r2, #3489660928	; 0xd0000000
 8012b40:	681b      	ldr	r3, [r3, #0]
 8012b42:	6013      	str	r3, [r2, #0]

    /* Increment the address*/
    write_pointer += 4;
 8012b44:	697b      	ldr	r3, [r7, #20]
 8012b46:	3304      	adds	r3, #4
 8012b48:	617b      	str	r3, [r7, #20]
  for (; uwBufferSize != 0; uwBufferSize--) 
 8012b4a:	687b      	ldr	r3, [r7, #4]
 8012b4c:	3b01      	subs	r3, #1
 8012b4e:	607b      	str	r3, [r7, #4]
 8012b50:	687b      	ldr	r3, [r7, #4]
 8012b52:	2b00      	cmp	r3, #0
 8012b54:	d1ee      	bne.n	8012b34 <SDRAM_WriteBuffer+0x2a>
  }
    
}
 8012b56:	bf00      	nop
 8012b58:	3718      	adds	r7, #24
 8012b5a:	46bd      	mov	sp, r7
 8012b5c:	bd80      	pop	{r7, pc}

08012b5e <SDRAM_ReadBuffer>:
  *         read.
  * @param  uwBufferSize: number of words to write. 
  * @retval None.
  */
void SDRAM_ReadBuffer(uint32_t* pBuffer, uint32_t uwReadAddress, uint32_t uwBufferSize)
{
 8012b5e:	b580      	push	{r7, lr}
 8012b60:	b086      	sub	sp, #24
 8012b62:	af00      	add	r7, sp, #0
 8012b64:	60f8      	str	r0, [r7, #12]
 8012b66:	60b9      	str	r1, [r7, #8]
 8012b68:	607a      	str	r2, [r7, #4]
  __IO uint32_t write_pointer = (uint32_t)uwReadAddress;
 8012b6a:	68bb      	ldr	r3, [r7, #8]
 8012b6c:	617b      	str	r3, [r7, #20]
  
   
  /* Wait until the SDRAM controller is ready */ 
  while(FMC_GetFlagStatus(FMC_Bank2_SDRAM, FMC_FLAG_Busy) != RESET)
 8012b6e:	bf00      	nop
 8012b70:	2120      	movs	r1, #32
 8012b72:	2001      	movs	r0, #1
 8012b74:	f7f3 fb58 	bl	8006228 <FMC_GetFlagStatus>
 8012b78:	4603      	mov	r3, r0
 8012b7a:	2b00      	cmp	r3, #0
 8012b7c:	d1f8      	bne.n	8012b70 <SDRAM_ReadBuffer+0x12>
  {
  }
  
  /* Read data */
  for(; uwBufferSize != 0x00; uwBufferSize--)
 8012b7e:	e00e      	b.n	8012b9e <SDRAM_ReadBuffer+0x40>
  {
   *pBuffer++ = *(__IO uint32_t *)(SDRAM_BANK_ADDR + write_pointer );
 8012b80:	697b      	ldr	r3, [r7, #20]
 8012b82:	f103 4350 	add.w	r3, r3, #3489660928	; 0xd0000000
 8012b86:	4619      	mov	r1, r3
 8012b88:	68fb      	ldr	r3, [r7, #12]
 8012b8a:	1d1a      	adds	r2, r3, #4
 8012b8c:	60fa      	str	r2, [r7, #12]
 8012b8e:	680a      	ldr	r2, [r1, #0]
 8012b90:	601a      	str	r2, [r3, #0]
    
   /* Increment the address*/
    write_pointer += 4;
 8012b92:	697b      	ldr	r3, [r7, #20]
 8012b94:	3304      	adds	r3, #4
 8012b96:	617b      	str	r3, [r7, #20]
  for(; uwBufferSize != 0x00; uwBufferSize--)
 8012b98:	687b      	ldr	r3, [r7, #4]
 8012b9a:	3b01      	subs	r3, #1
 8012b9c:	607b      	str	r3, [r7, #4]
 8012b9e:	687b      	ldr	r3, [r7, #4]
 8012ba0:	2b00      	cmp	r3, #0
 8012ba2:	d1ed      	bne.n	8012b80 <SDRAM_ReadBuffer+0x22>
  } 
}
 8012ba4:	bf00      	nop
 8012ba6:	3718      	adds	r7, #24
 8012ba8:	46bd      	mov	sp, r7
 8012baa:	bd80      	pop	{r7, pc}

08012bac <delay>:
  * @brief  Inserts a delay time.
  * @param  nCount: specifies the delay time length.
  * @retval None
  */
static void delay(__IO uint32_t nCount)
{
 8012bac:	b480      	push	{r7}
 8012bae:	b085      	sub	sp, #20
 8012bb0:	af00      	add	r7, sp, #0
 8012bb2:	6078      	str	r0, [r7, #4]
  __IO uint32_t index = 0; 
 8012bb4:	2300      	movs	r3, #0
 8012bb6:	60fb      	str	r3, [r7, #12]
  for(index = (100000 * nCount); index != 0; index--)
 8012bb8:	687b      	ldr	r3, [r7, #4]
 8012bba:	4a08      	ldr	r2, [pc, #32]	; (8012bdc <delay+0x30>)
 8012bbc:	fb02 f303 	mul.w	r3, r2, r3
 8012bc0:	60fb      	str	r3, [r7, #12]
 8012bc2:	e002      	b.n	8012bca <delay+0x1e>
 8012bc4:	68fb      	ldr	r3, [r7, #12]
 8012bc6:	3b01      	subs	r3, #1
 8012bc8:	60fb      	str	r3, [r7, #12]
 8012bca:	68fb      	ldr	r3, [r7, #12]
 8012bcc:	2b00      	cmp	r3, #0
 8012bce:	d1f9      	bne.n	8012bc4 <delay+0x18>
  {
  }
}
 8012bd0:	bf00      	nop
 8012bd2:	3714      	adds	r7, #20
 8012bd4:	46bd      	mov	sp, r7
 8012bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bda:	4770      	bx	lr
 8012bdc:	000186a0 	.word	0x000186a0

08012be0 <USB_OTG_BSP_Init>:
  *         Initilizes BSP configurations
  * @param  None
  * @retval None
  */

void USB_OTG_BSP_Init(USB_OTG_CORE_HANDLE *pdev) {
 8012be0:	b580      	push	{r7, lr}
 8012be2:	b084      	sub	sp, #16
 8012be4:	af00      	add	r7, sp, #0
 8012be6:	6078      	str	r0, [r7, #4]
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
	RCC_AHB2PeriphClockCmd(RCC_AHB2Periph_OTG_FS, ENABLE) ;
	
#else //USE_USB_OTG_HS

	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB , ENABLE);
 8012be8:	2101      	movs	r1, #1
 8012bea:	2002      	movs	r0, #2
 8012bec:	f7f5 feb4 	bl	8008958 <RCC_AHB1PeriphClockCmd>

	/* Configure SOF VBUS ID DM DP Pins */  
	GPIO_InitStructure.GPIO_Pin = 	GPIO_Pin_14 |	// Data -
 8012bf0:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8012bf4:	60bb      	str	r3, [r7, #8]
									GPIO_Pin_15;	// Data +

	#ifndef USB_HID_HOST_DISABLE_ID
	GPIO_InitStructure.GPIO_Pin |= GPIO_Pin_12;
 8012bf6:	68bb      	ldr	r3, [r7, #8]
 8012bf8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8012bfc:	60bb      	str	r3, [r7, #8]
	#endif

	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 8012bfe:	2303      	movs	r3, #3
 8012c00:	737b      	strb	r3, [r7, #13]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8012c02:	2302      	movs	r3, #2
 8012c04:	733b      	strb	r3, [r7, #12]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
 8012c06:	2301      	movs	r3, #1
 8012c08:	73bb      	strb	r3, [r7, #14]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP; 
 8012c0a:	2301      	movs	r3, #1
 8012c0c:	73fb      	strb	r3, [r7, #15]
	GPIO_Init(GPIOB, &GPIO_InitStructure);  
 8012c0e:	f107 0308 	add.w	r3, r7, #8
 8012c12:	4619      	mov	r1, r3
 8012c14:	4813      	ldr	r0, [pc, #76]	; (8012c64 <USB_OTG_BSP_Init+0x84>)
 8012c16:	f7f3 fccf 	bl	80065b8 <GPIO_Init>

	#ifndef USB_HID_HOST_DISABLE_ID
	GPIO_PinAFConfig(GPIOB,GPIO_PinSource12, GPIO_AF_OTG2_FS);
 8012c1a:	220c      	movs	r2, #12
 8012c1c:	210c      	movs	r1, #12
 8012c1e:	4811      	ldr	r0, [pc, #68]	; (8012c64 <USB_OTG_BSP_Init+0x84>)
 8012c20:	f7f3 fe39 	bl	8006896 <GPIO_PinAFConfig>
	#endif
	
	GPIO_PinAFConfig(GPIOB,GPIO_PinSource14, GPIO_AF_OTG2_FS); 
 8012c24:	220c      	movs	r2, #12
 8012c26:	210e      	movs	r1, #14
 8012c28:	480e      	ldr	r0, [pc, #56]	; (8012c64 <USB_OTG_BSP_Init+0x84>)
 8012c2a:	f7f3 fe34 	bl	8006896 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIOB,GPIO_PinSource15, GPIO_AF_OTG2_FS);   
 8012c2e:	220c      	movs	r2, #12
 8012c30:	210f      	movs	r1, #15
 8012c32:	480c      	ldr	r0, [pc, #48]	; (8012c64 <USB_OTG_BSP_Init+0x84>)
 8012c34:	f7f3 fe2f 	bl	8006896 <GPIO_PinAFConfig>
	
	/* VBUS */
	#ifndef USB_HID_HOST_DISABLE_VBUS
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_13;
 8012c38:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8012c3c:	60bb      	str	r3, [r7, #8]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 8012c3e:	2303      	movs	r3, #3
 8012c40:	737b      	strb	r3, [r7, #13]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 8012c42:	2300      	movs	r3, #0
 8012c44:	733b      	strb	r3, [r7, #12]
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 8012c46:	f107 0308 	add.w	r3, r7, #8
 8012c4a:	4619      	mov	r1, r3
 8012c4c:	4805      	ldr	r0, [pc, #20]	; (8012c64 <USB_OTG_BSP_Init+0x84>)
 8012c4e:	f7f3 fcb3 	bl	80065b8 <GPIO_Init>
	#endif

	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_OTG_HS, ENABLE);  
 8012c52:	2101      	movs	r1, #1
 8012c54:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 8012c58:	f7f5 fe7e 	bl	8008958 <RCC_AHB1PeriphClockCmd>

#endif //USB_OTG_HS
}
 8012c5c:	bf00      	nop
 8012c5e:	3710      	adds	r7, #16
 8012c60:	46bd      	mov	sp, r7
 8012c62:	bd80      	pop	{r7, pc}
 8012c64:	40020400 	.word	0x40020400

08012c68 <USB_OTG_BSP_EnableInterrupt>:
  *         Configures USB Global interrupt
  * @param  None
  * @retval None
  */
void USB_OTG_BSP_EnableInterrupt(USB_OTG_CORE_HANDLE *pdev)
{
 8012c68:	b580      	push	{r7, lr}
 8012c6a:	b084      	sub	sp, #16
 8012c6c:	af00      	add	r7, sp, #0
 8012c6e:	6078      	str	r0, [r7, #4]
  NVIC_InitTypeDef NVIC_InitStructure; 
  
  NVIC_PriorityGroupConfig(NVIC_PriorityGroup_1);
 8012c70:	f44f 60c0 	mov.w	r0, #1536	; 0x600
 8012c74:	f7ee fd26 	bl	80016c4 <NVIC_PriorityGroupConfig>
#ifdef USE_USB_OTG_HS   
  NVIC_InitStructure.NVIC_IRQChannel = OTG_HS_IRQn;
 8012c78:	234d      	movs	r3, #77	; 0x4d
 8012c7a:	733b      	strb	r3, [r7, #12]
#else
  NVIC_InitStructure.NVIC_IRQChannel = OTG_FS_IRQn;  
#endif
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = USB_HID_HOST_NVIC_PRIORITY;
 8012c7c:	2301      	movs	r3, #1
 8012c7e:	737b      	strb	r3, [r7, #13]
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = USB_HID_HOST_NVIC_SUBPRIORITY;
 8012c80:	2303      	movs	r3, #3
 8012c82:	73bb      	strb	r3, [r7, #14]
  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8012c84:	2301      	movs	r3, #1
 8012c86:	73fb      	strb	r3, [r7, #15]
  NVIC_Init(&NVIC_InitStructure);
 8012c88:	f107 030c 	add.w	r3, r7, #12
 8012c8c:	4618      	mov	r0, r3
 8012c8e:	f7ee fd2d 	bl	80016ec <NVIC_Init>
}
 8012c92:	bf00      	nop
 8012c94:	3710      	adds	r7, #16
 8012c96:	46bd      	mov	sp, r7
 8012c98:	bd80      	pop	{r7, pc}

08012c9a <USB_OTG_BSP_DriveVBUS>:
  *         Drives the Vbus signal through IO
  * @param  state : VBUS states
  * @retval None
  */

void USB_OTG_BSP_DriveVBUS(USB_OTG_CORE_HANDLE *pdev, uint8_t state) {
 8012c9a:	b580      	push	{r7, lr}
 8012c9c:	b082      	sub	sp, #8
 8012c9e:	af00      	add	r7, sp, #0
 8012ca0:	6078      	str	r0, [r7, #4]
 8012ca2:	460b      	mov	r3, r1
 8012ca4:	70fb      	strb	r3, [r7, #3]
#ifndef USB_HID_HOST_DISABLE_VBUS
	if (0 == state) { 
 8012ca6:	78fb      	ldrb	r3, [r7, #3]
 8012ca8:	2b00      	cmp	r3, #0
 8012caa:	d104      	bne.n	8012cb6 <USB_OTG_BSP_DriveVBUS+0x1c>
		/* DISABLE is needed on output of the Power Switch */
		GPIO_SetBits(HOST_POWERSW_PORT, HOST_POWERSW_VBUS);
 8012cac:	2110      	movs	r1, #16
 8012cae:	4806      	ldr	r0, [pc, #24]	; (8012cc8 <USB_OTG_BSP_DriveVBUS+0x2e>)
 8012cb0:	f7f3 fd9a 	bl	80067e8 <GPIO_SetBits>
	} else {
		/* ENABLE the Power Switch by driving the Enable LOW */
		GPIO_ResetBits(HOST_POWERSW_PORT, HOST_POWERSW_VBUS);
	}
#endif
}
 8012cb4:	e003      	b.n	8012cbe <USB_OTG_BSP_DriveVBUS+0x24>
		GPIO_ResetBits(HOST_POWERSW_PORT, HOST_POWERSW_VBUS);
 8012cb6:	2110      	movs	r1, #16
 8012cb8:	4803      	ldr	r0, [pc, #12]	; (8012cc8 <USB_OTG_BSP_DriveVBUS+0x2e>)
 8012cba:	f7f3 fda4 	bl	8006806 <GPIO_ResetBits>
}
 8012cbe:	bf00      	nop
 8012cc0:	3708      	adds	r7, #8
 8012cc2:	46bd      	mov	sp, r7
 8012cc4:	bd80      	pop	{r7, pc}
 8012cc6:	bf00      	nop
 8012cc8:	40020800 	.word	0x40020800

08012ccc <USB_OTG_BSP_ConfigVBUS>:
  *         Configures the IO for the Vbus and OverCurrent
  * @param  None
  * @retval None
  */

void  USB_OTG_BSP_ConfigVBUS(USB_OTG_CORE_HANDLE *pdev) {
 8012ccc:	b580      	push	{r7, lr}
 8012cce:	b084      	sub	sp, #16
 8012cd0:	af00      	add	r7, sp, #0
 8012cd2:	6078      	str	r0, [r7, #4]
#ifndef USB_HID_HOST_DISABLE_VBUS
	GPIO_InitTypeDef GPIO_InitStructure; 

	RCC_AHB1PeriphClockCmd(HOST_POWERSW_PORT_RCC, ENABLE);  
 8012cd4:	2101      	movs	r1, #1
 8012cd6:	2004      	movs	r0, #4
 8012cd8:	f7f5 fe3e 	bl	8008958 <RCC_AHB1PeriphClockCmd>

	GPIO_InitStructure.GPIO_Pin = HOST_POWERSW_VBUS;
 8012cdc:	2310      	movs	r3, #16
 8012cde:	60bb      	str	r3, [r7, #8]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 8012ce0:	2303      	movs	r3, #3
 8012ce2:	737b      	strb	r3, [r7, #13]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8012ce4:	2301      	movs	r3, #1
 8012ce6:	733b      	strb	r3, [r7, #12]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8012ce8:	2300      	movs	r3, #0
 8012cea:	73bb      	strb	r3, [r7, #14]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL ;
 8012cec:	2300      	movs	r3, #0
 8012cee:	73fb      	strb	r3, [r7, #15]
	GPIO_Init(HOST_POWERSW_PORT,&GPIO_InitStructure);
 8012cf0:	f107 0308 	add.w	r3, r7, #8
 8012cf4:	4619      	mov	r1, r3
 8012cf6:	4807      	ldr	r0, [pc, #28]	; (8012d14 <USB_OTG_BSP_ConfigVBUS+0x48>)
 8012cf8:	f7f3 fc5e 	bl	80065b8 <GPIO_Init>

	/* By Default, DISABLE is needed on output of the Power Switch */
	GPIO_SetBits(HOST_POWERSW_PORT, HOST_POWERSW_VBUS);
 8012cfc:	2110      	movs	r1, #16
 8012cfe:	4805      	ldr	r0, [pc, #20]	; (8012d14 <USB_OTG_BSP_ConfigVBUS+0x48>)
 8012d00:	f7f3 fd72 	bl	80067e8 <GPIO_SetBits>

	USB_OTG_BSP_mDelay(200);   /* Delay is need for stabilising the Vbus Low 
 8012d04:	20c8      	movs	r0, #200	; 0xc8
 8012d06:	f000 f82b 	bl	8012d60 <USB_OTG_BSP_mDelay>
	in Reset Condition, when Vbus=1 and Reset-button is pressed by user */
#endif
}
 8012d0a:	bf00      	nop
 8012d0c:	3710      	adds	r7, #16
 8012d0e:	46bd      	mov	sp, r7
 8012d10:	bd80      	pop	{r7, pc}
 8012d12:	bf00      	nop
 8012d14:	40020800 	.word	0x40020800

08012d18 <USB_OTG_BSP_uDelay>:
  * @brief  USB_OTG_BSP_uDelay
  *         This function provides delay time in micro sec
  * @param  usec : Value of delay required in micro sec
  * @retval None
  */
void USB_OTG_BSP_uDelay (const uint32_t usec) {
 8012d18:	b480      	push	{r7}
 8012d1a:	b085      	sub	sp, #20
 8012d1c:	af00      	add	r7, sp, #0
 8012d1e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0;
 8012d20:	2300      	movs	r3, #0
 8012d22:	60bb      	str	r3, [r7, #8]
  const uint32_t utime = (120 * usec / 7);
 8012d24:	687a      	ldr	r2, [r7, #4]
 8012d26:	4613      	mov	r3, r2
 8012d28:	011b      	lsls	r3, r3, #4
 8012d2a:	1a9b      	subs	r3, r3, r2
 8012d2c:	00db      	lsls	r3, r3, #3
 8012d2e:	461a      	mov	r2, r3
 8012d30:	4b0a      	ldr	r3, [pc, #40]	; (8012d5c <USB_OTG_BSP_uDelay+0x44>)
 8012d32:	fba3 1302 	umull	r1, r3, r3, r2
 8012d36:	1ad2      	subs	r2, r2, r3
 8012d38:	0852      	lsrs	r2, r2, #1
 8012d3a:	4413      	add	r3, r2
 8012d3c:	089b      	lsrs	r3, r3, #2
 8012d3e:	60fb      	str	r3, [r7, #12]
  do
  {
    if ( ++count > utime )
 8012d40:	68bb      	ldr	r3, [r7, #8]
 8012d42:	3301      	adds	r3, #1
 8012d44:	60bb      	str	r3, [r7, #8]
 8012d46:	68fa      	ldr	r2, [r7, #12]
 8012d48:	429a      	cmp	r2, r3
 8012d4a:	d300      	bcc.n	8012d4e <USB_OTG_BSP_uDelay+0x36>
 8012d4c:	e7f8      	b.n	8012d40 <USB_OTG_BSP_uDelay+0x28>
    {
      return ;
 8012d4e:	bf00      	nop
    }
  }
  while (1);  
}
 8012d50:	3714      	adds	r7, #20
 8012d52:	46bd      	mov	sp, r7
 8012d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d58:	4770      	bx	lr
 8012d5a:	bf00      	nop
 8012d5c:	24924925 	.word	0x24924925

08012d60 <USB_OTG_BSP_mDelay>:
  * @brief  USB_OTG_BSP_mDelay
  *          This function provides delay time in milli sec
  * @param  msec : Value of delay required in milli sec
  * @retval None
  */
void USB_OTG_BSP_mDelay (const uint32_t msec) { 
 8012d60:	b580      	push	{r7, lr}
 8012d62:	b082      	sub	sp, #8
 8012d64:	af00      	add	r7, sp, #0
 8012d66:	6078      	str	r0, [r7, #4]
    USB_OTG_BSP_uDelay(msec * 1000);
 8012d68:	687b      	ldr	r3, [r7, #4]
 8012d6a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8012d6e:	fb02 f303 	mul.w	r3, r2, r3
 8012d72:	4618      	mov	r0, r3
 8012d74:	f7ff ffd0 	bl	8012d18 <USB_OTG_BSP_uDelay>
}
 8012d78:	bf00      	nop
 8012d7a:	3708      	adds	r7, #8
 8012d7c:	46bd      	mov	sp, r7
 8012d7e:	bd80      	pop	{r7, pc}

08012d80 <OTG_HS_IRQHandler>:


#ifdef USE_USB_OTG_FS
void OTG_FS_IRQHandler(void) {
#else
void OTG_HS_IRQHandler(void) {	
 8012d80:	b580      	push	{r7, lr}
 8012d82:	af00      	add	r7, sp, #0
#endif
	USBH_OTG_ISR_Handler(&USB_OTG_Core);
 8012d84:	4802      	ldr	r0, [pc, #8]	; (8012d90 <OTG_HS_IRQHandler+0x10>)
 8012d86:	f001 f937 	bl	8013ff8 <USBH_OTG_ISR_Handler>
}
 8012d8a:	bf00      	nop
 8012d8c:	bd80      	pop	{r7, pc}
 8012d8e:	bf00      	nop
 8012d90:	20002e34 	.word	0x20002e34

08012d94 <USB_OTG_EnableCommonInt>:
*         Initializes the commmon interrupts, used in both device and modes
* @param  pdev : Selected device
* @retval None
*/
static void USB_OTG_EnableCommonInt(USB_OTG_CORE_HANDLE *pdev)
{
 8012d94:	b480      	push	{r7}
 8012d96:	b085      	sub	sp, #20
 8012d98:	af00      	add	r7, sp, #0
 8012d9a:	6078      	str	r0, [r7, #4]
  USB_OTG_GINTMSK_TypeDef  int_mask;
  
  int_mask.d32 = 0;
 8012d9c:	2300      	movs	r3, #0
 8012d9e:	60fb      	str	r3, [r7, #12]
  /* Clear any pending USB_OTG Interrupts */
#ifndef USE_OTG_MODE
  USB_OTG_WRITE_REG32( &pdev->regs.GREGS->GOTGINT, 0xFFFFFFFF);
 8012da0:	687b      	ldr	r3, [r7, #4]
 8012da2:	68db      	ldr	r3, [r3, #12]
 8012da4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012da8:	605a      	str	r2, [r3, #4]
#endif
  /* Clear any pending interrupts */
  USB_OTG_WRITE_REG32( &pdev->regs.GREGS->GINTSTS, 0xBFFFFFFF);
 8012daa:	687b      	ldr	r3, [r7, #4]
 8012dac:	68db      	ldr	r3, [r3, #12]
 8012dae:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8012db2:	615a      	str	r2, [r3, #20]
  /* Enable the interrupts in the INTMSK */
  int_mask.b.wkupintr = 1;
 8012db4:	7bfb      	ldrb	r3, [r7, #15]
 8012db6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012dba:	73fb      	strb	r3, [r7, #15]
  int_mask.b.usbsuspend = 1; 
 8012dbc:	7b7b      	ldrb	r3, [r7, #13]
 8012dbe:	f043 0308 	orr.w	r3, r3, #8
 8012dc2:	737b      	strb	r3, [r7, #13]
#ifdef USE_OTG_MODE
  int_mask.b.otgintr = 1;
  int_mask.b.sessreqintr = 1;
  int_mask.b.conidstschng = 1;
#endif
  USB_OTG_WRITE_REG32( &pdev->regs.GREGS->GINTMSK, int_mask.d32);
 8012dc4:	687b      	ldr	r3, [r7, #4]
 8012dc6:	68db      	ldr	r3, [r3, #12]
 8012dc8:	68fa      	ldr	r2, [r7, #12]
 8012dca:	619a      	str	r2, [r3, #24]
}
 8012dcc:	bf00      	nop
 8012dce:	3714      	adds	r7, #20
 8012dd0:	46bd      	mov	sp, r7
 8012dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dd6:	4770      	bx	lr

08012dd8 <USB_OTG_CoreReset>:
* @brief  USB_OTG_CoreReset : Soft reset of the core
* @param  pdev : Selected device
* @retval USB_OTG_STS : status
*/
static USB_OTG_STS USB_OTG_CoreReset(USB_OTG_CORE_HANDLE *pdev)
{
 8012dd8:	b580      	push	{r7, lr}
 8012dda:	b086      	sub	sp, #24
 8012ddc:	af00      	add	r7, sp, #0
 8012dde:	6078      	str	r0, [r7, #4]
  USB_OTG_STS status = USB_OTG_OK;
 8012de0:	2300      	movs	r3, #0
 8012de2:	74fb      	strb	r3, [r7, #19]
  __IO USB_OTG_GRSTCTL_TypeDef  greset;
  uint32_t count = 0;
 8012de4:	2300      	movs	r3, #0
 8012de6:	617b      	str	r3, [r7, #20]
  
  greset.d32 = 0;
 8012de8:	2300      	movs	r3, #0
 8012dea:	60fb      	str	r3, [r7, #12]
  /* Wait for AHB master IDLE state. */
  do
  {
    USB_OTG_BSP_uDelay(3);
 8012dec:	2003      	movs	r0, #3
 8012dee:	f7ff ff93 	bl	8012d18 <USB_OTG_BSP_uDelay>
    greset.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GRSTCTL);
 8012df2:	687b      	ldr	r3, [r7, #4]
 8012df4:	68db      	ldr	r3, [r3, #12]
 8012df6:	691b      	ldr	r3, [r3, #16]
 8012df8:	60fb      	str	r3, [r7, #12]
    if (++count > 200000)
 8012dfa:	697b      	ldr	r3, [r7, #20]
 8012dfc:	3301      	adds	r3, #1
 8012dfe:	617b      	str	r3, [r7, #20]
 8012e00:	697b      	ldr	r3, [r7, #20]
 8012e02:	4a18      	ldr	r2, [pc, #96]	; (8012e64 <USB_OTG_CoreReset+0x8c>)
 8012e04:	4293      	cmp	r3, r2
 8012e06:	d901      	bls.n	8012e0c <USB_OTG_CoreReset+0x34>
    {
      return USB_OTG_OK;
 8012e08:	2300      	movs	r3, #0
 8012e0a:	e026      	b.n	8012e5a <USB_OTG_CoreReset+0x82>
    }
  }
  while (greset.b.ahbidle == 0);
 8012e0c:	68fb      	ldr	r3, [r7, #12]
 8012e0e:	f3c3 73c0 	ubfx	r3, r3, #31, #1
 8012e12:	b2db      	uxtb	r3, r3
 8012e14:	2b00      	cmp	r3, #0
 8012e16:	d0e9      	beq.n	8012dec <USB_OTG_CoreReset+0x14>
  /* Core Soft Reset */
  count = 0;
 8012e18:	2300      	movs	r3, #0
 8012e1a:	617b      	str	r3, [r7, #20]
  greset.b.csftrst = 1;
 8012e1c:	68fb      	ldr	r3, [r7, #12]
 8012e1e:	f043 0301 	orr.w	r3, r3, #1
 8012e22:	60fb      	str	r3, [r7, #12]
  USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GRSTCTL, greset.d32 );
 8012e24:	687b      	ldr	r3, [r7, #4]
 8012e26:	68db      	ldr	r3, [r3, #12]
 8012e28:	68fa      	ldr	r2, [r7, #12]
 8012e2a:	611a      	str	r2, [r3, #16]
  do
  {
    greset.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GRSTCTL);
 8012e2c:	687b      	ldr	r3, [r7, #4]
 8012e2e:	68db      	ldr	r3, [r3, #12]
 8012e30:	691b      	ldr	r3, [r3, #16]
 8012e32:	60fb      	str	r3, [r7, #12]
    if (++count > 200000)
 8012e34:	697b      	ldr	r3, [r7, #20]
 8012e36:	3301      	adds	r3, #1
 8012e38:	617b      	str	r3, [r7, #20]
 8012e3a:	697b      	ldr	r3, [r7, #20]
 8012e3c:	4a09      	ldr	r2, [pc, #36]	; (8012e64 <USB_OTG_CoreReset+0x8c>)
 8012e3e:	4293      	cmp	r3, r2
 8012e40:	d806      	bhi.n	8012e50 <USB_OTG_CoreReset+0x78>
    {
      break;
    }
  }
  while (greset.b.csftrst == 1);
 8012e42:	68fb      	ldr	r3, [r7, #12]
 8012e44:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8012e48:	b2db      	uxtb	r3, r3
 8012e4a:	2b01      	cmp	r3, #1
 8012e4c:	d0ee      	beq.n	8012e2c <USB_OTG_CoreReset+0x54>
 8012e4e:	e000      	b.n	8012e52 <USB_OTG_CoreReset+0x7a>
      break;
 8012e50:	bf00      	nop
  /* Wait for 3 PHY Clocks*/
  USB_OTG_BSP_uDelay(3);
 8012e52:	2003      	movs	r0, #3
 8012e54:	f7ff ff60 	bl	8012d18 <USB_OTG_BSP_uDelay>
  return status;
 8012e58:	7cfb      	ldrb	r3, [r7, #19]
}
 8012e5a:	4618      	mov	r0, r3
 8012e5c:	3718      	adds	r7, #24
 8012e5e:	46bd      	mov	sp, r7
 8012e60:	bd80      	pop	{r7, pc}
 8012e62:	bf00      	nop
 8012e64:	00030d40 	.word	0x00030d40

08012e68 <USB_OTG_WritePacket>:
*/
USB_OTG_STS USB_OTG_WritePacket(USB_OTG_CORE_HANDLE *pdev, 
                                uint8_t             *src, 
                                uint8_t             ch_ep_num, 
                                uint16_t            len)
{
 8012e68:	b480      	push	{r7}
 8012e6a:	b089      	sub	sp, #36	; 0x24
 8012e6c:	af00      	add	r7, sp, #0
 8012e6e:	60f8      	str	r0, [r7, #12]
 8012e70:	60b9      	str	r1, [r7, #8]
 8012e72:	4611      	mov	r1, r2
 8012e74:	461a      	mov	r2, r3
 8012e76:	460b      	mov	r3, r1
 8012e78:	71fb      	strb	r3, [r7, #7]
 8012e7a:	4613      	mov	r3, r2
 8012e7c:	80bb      	strh	r3, [r7, #4]
  USB_OTG_STS status = USB_OTG_OK;
 8012e7e:	2300      	movs	r3, #0
 8012e80:	76fb      	strb	r3, [r7, #27]
  if (pdev->cfg.dma_enable == 0)
 8012e82:	68fb      	ldr	r3, [r7, #12]
 8012e84:	78db      	ldrb	r3, [r3, #3]
 8012e86:	2b00      	cmp	r3, #0
 8012e88:	d122      	bne.n	8012ed0 <USB_OTG_WritePacket+0x68>
  {
    uint32_t count32b= 0 , i= 0;
 8012e8a:	2300      	movs	r3, #0
 8012e8c:	617b      	str	r3, [r7, #20]
 8012e8e:	2300      	movs	r3, #0
 8012e90:	61fb      	str	r3, [r7, #28]
    __IO uint32_t *fifo;
    
    count32b =  (len + 3) / 4;
 8012e92:	88bb      	ldrh	r3, [r7, #4]
 8012e94:	3303      	adds	r3, #3
 8012e96:	2b00      	cmp	r3, #0
 8012e98:	da00      	bge.n	8012e9c <USB_OTG_WritePacket+0x34>
 8012e9a:	3303      	adds	r3, #3
 8012e9c:	109b      	asrs	r3, r3, #2
 8012e9e:	617b      	str	r3, [r7, #20]
    fifo = pdev->regs.DFIFO[ch_ep_num];
 8012ea0:	79fb      	ldrb	r3, [r7, #7]
 8012ea2:	68fa      	ldr	r2, [r7, #12]
 8012ea4:	3332      	adds	r3, #50	; 0x32
 8012ea6:	009b      	lsls	r3, r3, #2
 8012ea8:	4413      	add	r3, r2
 8012eaa:	689b      	ldr	r3, [r3, #8]
 8012eac:	613b      	str	r3, [r7, #16]
    for (i = 0; i < count32b; i++, src+=4)
 8012eae:	2300      	movs	r3, #0
 8012eb0:	61fb      	str	r3, [r7, #28]
 8012eb2:	e009      	b.n	8012ec8 <USB_OTG_WritePacket+0x60>
    {
      USB_OTG_WRITE_REG32( fifo, *((__packed uint32_t *)src) );
 8012eb4:	68bb      	ldr	r3, [r7, #8]
 8012eb6:	681a      	ldr	r2, [r3, #0]
 8012eb8:	693b      	ldr	r3, [r7, #16]
 8012eba:	601a      	str	r2, [r3, #0]
    for (i = 0; i < count32b; i++, src+=4)
 8012ebc:	69fb      	ldr	r3, [r7, #28]
 8012ebe:	3301      	adds	r3, #1
 8012ec0:	61fb      	str	r3, [r7, #28]
 8012ec2:	68bb      	ldr	r3, [r7, #8]
 8012ec4:	3304      	adds	r3, #4
 8012ec6:	60bb      	str	r3, [r7, #8]
 8012ec8:	69fa      	ldr	r2, [r7, #28]
 8012eca:	697b      	ldr	r3, [r7, #20]
 8012ecc:	429a      	cmp	r2, r3
 8012ece:	d3f1      	bcc.n	8012eb4 <USB_OTG_WritePacket+0x4c>
    }
  }
  return status;
 8012ed0:	7efb      	ldrb	r3, [r7, #27]
}
 8012ed2:	4618      	mov	r0, r3
 8012ed4:	3724      	adds	r7, #36	; 0x24
 8012ed6:	46bd      	mov	sp, r7
 8012ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012edc:	4770      	bx	lr

08012ede <USB_OTG_ReadPacket>:
* @retval None
*/
void *USB_OTG_ReadPacket(USB_OTG_CORE_HANDLE *pdev, 
                         uint8_t *dest, 
                         uint16_t len)
{
 8012ede:	b480      	push	{r7}
 8012ee0:	b089      	sub	sp, #36	; 0x24
 8012ee2:	af00      	add	r7, sp, #0
 8012ee4:	60f8      	str	r0, [r7, #12]
 8012ee6:	60b9      	str	r1, [r7, #8]
 8012ee8:	4613      	mov	r3, r2
 8012eea:	80fb      	strh	r3, [r7, #6]
  uint32_t i=0;
 8012eec:	2300      	movs	r3, #0
 8012eee:	61fb      	str	r3, [r7, #28]
  uint32_t count32b = (len + 3) / 4;
 8012ef0:	88fb      	ldrh	r3, [r7, #6]
 8012ef2:	3303      	adds	r3, #3
 8012ef4:	2b00      	cmp	r3, #0
 8012ef6:	da00      	bge.n	8012efa <USB_OTG_ReadPacket+0x1c>
 8012ef8:	3303      	adds	r3, #3
 8012efa:	109b      	asrs	r3, r3, #2
 8012efc:	61bb      	str	r3, [r7, #24]
  
  __IO uint32_t *fifo = pdev->regs.DFIFO[0];
 8012efe:	68fb      	ldr	r3, [r7, #12]
 8012f00:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8012f04:	617b      	str	r3, [r7, #20]
  
  for ( i = 0; i < count32b; i++, dest += 4 )
 8012f06:	2300      	movs	r3, #0
 8012f08:	61fb      	str	r3, [r7, #28]
 8012f0a:	e009      	b.n	8012f20 <USB_OTG_ReadPacket+0x42>
  {
    *(__packed uint32_t *)dest = USB_OTG_READ_REG32(fifo);
 8012f0c:	697b      	ldr	r3, [r7, #20]
 8012f0e:	681a      	ldr	r2, [r3, #0]
 8012f10:	68bb      	ldr	r3, [r7, #8]
 8012f12:	601a      	str	r2, [r3, #0]
  for ( i = 0; i < count32b; i++, dest += 4 )
 8012f14:	69fb      	ldr	r3, [r7, #28]
 8012f16:	3301      	adds	r3, #1
 8012f18:	61fb      	str	r3, [r7, #28]
 8012f1a:	68bb      	ldr	r3, [r7, #8]
 8012f1c:	3304      	adds	r3, #4
 8012f1e:	60bb      	str	r3, [r7, #8]
 8012f20:	69fa      	ldr	r2, [r7, #28]
 8012f22:	69bb      	ldr	r3, [r7, #24]
 8012f24:	429a      	cmp	r2, r3
 8012f26:	d3f1      	bcc.n	8012f0c <USB_OTG_ReadPacket+0x2e>
    
  }
  return ((void *)dest);
 8012f28:	68bb      	ldr	r3, [r7, #8]
}
 8012f2a:	4618      	mov	r0, r3
 8012f2c:	3724      	adds	r7, #36	; 0x24
 8012f2e:	46bd      	mov	sp, r7
 8012f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f34:	4770      	bx	lr

08012f36 <USB_OTG_SelectCore>:
* @param  coreID : USB OTG Core ID
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_SelectCore(USB_OTG_CORE_HANDLE *pdev, 
                               USB_OTG_CORE_ID_TypeDef coreID)
{
 8012f36:	b480      	push	{r7}
 8012f38:	b087      	sub	sp, #28
 8012f3a:	af00      	add	r7, sp, #0
 8012f3c:	6078      	str	r0, [r7, #4]
 8012f3e:	460b      	mov	r3, r1
 8012f40:	70fb      	strb	r3, [r7, #3]
  uint32_t i , baseAddress = 0;
 8012f42:	2300      	movs	r3, #0
 8012f44:	613b      	str	r3, [r7, #16]
  USB_OTG_STS status = USB_OTG_OK;
 8012f46:	2300      	movs	r3, #0
 8012f48:	73fb      	strb	r3, [r7, #15]
  
  pdev->cfg.dma_enable       = 0;
 8012f4a:	687b      	ldr	r3, [r7, #4]
 8012f4c:	2200      	movs	r2, #0
 8012f4e:	70da      	strb	r2, [r3, #3]
  
  /* at startup the core is in FS mode */
  pdev->cfg.speed            = USB_OTG_SPEED_FULL;
 8012f50:	687b      	ldr	r3, [r7, #4]
 8012f52:	2201      	movs	r2, #1
 8012f54:	709a      	strb	r2, [r3, #2]
  pdev->cfg.mps              = USB_OTG_FS_MAX_PACKET_SIZE ;    
 8012f56:	687b      	ldr	r3, [r7, #4]
 8012f58:	2240      	movs	r2, #64	; 0x40
 8012f5a:	809a      	strh	r2, [r3, #4]
  
  /* initialize device cfg following its address */
  if (coreID == USB_OTG_FS_CORE_ID)
 8012f5c:	78fb      	ldrb	r3, [r7, #3]
 8012f5e:	2b01      	cmp	r3, #1
 8012f60:	d113      	bne.n	8012f8a <USB_OTG_SelectCore+0x54>
  {
    baseAddress                = USB_OTG_FS_BASE_ADDR;
 8012f62:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8012f66:	613b      	str	r3, [r7, #16]
    pdev->cfg.coreID           = USB_OTG_FS_CORE_ID;
 8012f68:	687b      	ldr	r3, [r7, #4]
 8012f6a:	2201      	movs	r2, #1
 8012f6c:	72da      	strb	r2, [r3, #11]
    pdev->cfg.host_channels    = 8 ;
 8012f6e:	687b      	ldr	r3, [r7, #4]
 8012f70:	2208      	movs	r2, #8
 8012f72:	701a      	strb	r2, [r3, #0]
    pdev->cfg.dev_endpoints    = 4 ;
 8012f74:	687b      	ldr	r3, [r7, #4]
 8012f76:	2204      	movs	r2, #4
 8012f78:	705a      	strb	r2, [r3, #1]
    pdev->cfg.TotalFifoSize    = 320; /* in 32-bits */
 8012f7a:	687b      	ldr	r3, [r7, #4]
 8012f7c:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8012f80:	80da      	strh	r2, [r3, #6]
    pdev->cfg.phy_itface       = USB_OTG_EMBEDDED_PHY;     
 8012f82:	687b      	ldr	r3, [r7, #4]
 8012f84:	2202      	movs	r2, #2
 8012f86:	721a      	strb	r2, [r3, #8]
 8012f88:	e017      	b.n	8012fba <USB_OTG_SelectCore+0x84>
    
#ifdef USB_OTG_FS_LOW_PWR_MGMT_SUPPORT    
    pdev->cfg.low_power        = 1;    
#endif     
  }
  else if (coreID == USB_OTG_HS_CORE_ID)
 8012f8a:	78fb      	ldrb	r3, [r7, #3]
 8012f8c:	2b00      	cmp	r3, #0
 8012f8e:	d114      	bne.n	8012fba <USB_OTG_SelectCore+0x84>
  {
    baseAddress                = USB_OTG_HS_BASE_ADDR;
 8012f90:	4b48      	ldr	r3, [pc, #288]	; (80130b4 <USB_OTG_SelectCore+0x17e>)
 8012f92:	613b      	str	r3, [r7, #16]
    pdev->cfg.coreID           = USB_OTG_HS_CORE_ID;    
 8012f94:	687b      	ldr	r3, [r7, #4]
 8012f96:	2200      	movs	r2, #0
 8012f98:	72da      	strb	r2, [r3, #11]
    pdev->cfg.host_channels    = 12 ;
 8012f9a:	687b      	ldr	r3, [r7, #4]
 8012f9c:	220c      	movs	r2, #12
 8012f9e:	701a      	strb	r2, [r3, #0]
    pdev->cfg.dev_endpoints    = 6 ;
 8012fa0:	687b      	ldr	r3, [r7, #4]
 8012fa2:	2206      	movs	r2, #6
 8012fa4:	705a      	strb	r2, [r3, #1]
    pdev->cfg.TotalFifoSize    = 1280;/* in 32-bits */
 8012fa6:	687b      	ldr	r3, [r7, #4]
 8012fa8:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 8012fac:	80da      	strh	r2, [r3, #6]
    
#ifdef USB_OTG_ULPI_PHY_ENABLED
    pdev->cfg.phy_itface       = USB_OTG_ULPI_PHY;
#else    
#ifdef USB_OTG_EMBEDDED_PHY_ENABLED
    pdev->cfg.phy_itface       = USB_OTG_EMBEDDED_PHY;
 8012fae:	687b      	ldr	r3, [r7, #4]
 8012fb0:	2202      	movs	r2, #2
 8012fb2:	721a      	strb	r2, [r3, #8]
#endif  
#endif      
    
#ifdef USB_OTG_HS_INTERNAL_DMA_ENABLED    
    pdev->cfg.dma_enable       = 1;    
 8012fb4:	687b      	ldr	r3, [r7, #4]
 8012fb6:	2201      	movs	r2, #1
 8012fb8:	70da      	strb	r2, [r3, #3]
    pdev->cfg.low_power        = 1;    
#endif 
    
  }
  
  pdev->regs.GREGS = (USB_OTG_GREGS *)(baseAddress + \
 8012fba:	693a      	ldr	r2, [r7, #16]
 8012fbc:	687b      	ldr	r3, [r7, #4]
 8012fbe:	60da      	str	r2, [r3, #12]
    USB_OTG_CORE_GLOBAL_REGS_OFFSET);
  pdev->regs.DREGS =  (USB_OTG_DREGS  *)  (baseAddress + \
 8012fc0:	693b      	ldr	r3, [r7, #16]
 8012fc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012fc6:	461a      	mov	r2, r3
 8012fc8:	687b      	ldr	r3, [r7, #4]
 8012fca:	611a      	str	r2, [r3, #16]
    USB_OTG_DEV_GLOBAL_REG_OFFSET);
  
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 8012fcc:	2300      	movs	r3, #0
 8012fce:	617b      	str	r3, [r7, #20]
 8012fd0:	e01c      	b.n	801300c <USB_OTG_SelectCore+0xd6>
  {
    pdev->regs.INEP_REGS[i]  = (USB_OTG_INEPREGS *)  \
      (baseAddress + USB_OTG_DEV_IN_EP_REG_OFFSET + \
        (i * USB_OTG_EP_REG_OFFSET));
 8012fd2:	697b      	ldr	r3, [r7, #20]
 8012fd4:	015a      	lsls	r2, r3, #5
      (baseAddress + USB_OTG_DEV_IN_EP_REG_OFFSET + \
 8012fd6:	693b      	ldr	r3, [r7, #16]
 8012fd8:	4413      	add	r3, r2
 8012fda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
    pdev->regs.INEP_REGS[i]  = (USB_OTG_INEPREGS *)  \
 8012fde:	4619      	mov	r1, r3
 8012fe0:	687a      	ldr	r2, [r7, #4]
 8012fe2:	697b      	ldr	r3, [r7, #20]
 8012fe4:	3304      	adds	r3, #4
 8012fe6:	009b      	lsls	r3, r3, #2
 8012fe8:	4413      	add	r3, r2
 8012fea:	6099      	str	r1, [r3, #8]
    pdev->regs.OUTEP_REGS[i] = (USB_OTG_OUTEPREGS *) \
      (baseAddress + USB_OTG_DEV_OUT_EP_REG_OFFSET + \
        (i * USB_OTG_EP_REG_OFFSET));
 8012fec:	697b      	ldr	r3, [r7, #20]
 8012fee:	015a      	lsls	r2, r3, #5
      (baseAddress + USB_OTG_DEV_OUT_EP_REG_OFFSET + \
 8012ff0:	693b      	ldr	r3, [r7, #16]
 8012ff2:	4413      	add	r3, r2
 8012ff4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
    pdev->regs.OUTEP_REGS[i] = (USB_OTG_OUTEPREGS *) \
 8012ff8:	4619      	mov	r1, r3
 8012ffa:	687a      	ldr	r2, [r7, #4]
 8012ffc:	697b      	ldr	r3, [r7, #20]
 8012ffe:	3314      	adds	r3, #20
 8013000:	009b      	lsls	r3, r3, #2
 8013002:	4413      	add	r3, r2
 8013004:	6059      	str	r1, [r3, #4]
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 8013006:	697b      	ldr	r3, [r7, #20]
 8013008:	3301      	adds	r3, #1
 801300a:	617b      	str	r3, [r7, #20]
 801300c:	687b      	ldr	r3, [r7, #4]
 801300e:	785b      	ldrb	r3, [r3, #1]
 8013010:	461a      	mov	r2, r3
 8013012:	697b      	ldr	r3, [r7, #20]
 8013014:	4293      	cmp	r3, r2
 8013016:	d3dc      	bcc.n	8012fd2 <USB_OTG_SelectCore+0x9c>
  }
  pdev->regs.HREGS = (USB_OTG_HREGS *)(baseAddress + \
 8013018:	693b      	ldr	r3, [r7, #16]
 801301a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 801301e:	461a      	mov	r2, r3
 8013020:	687b      	ldr	r3, [r7, #4]
 8013022:	615a      	str	r2, [r3, #20]
    USB_OTG_HOST_GLOBAL_REG_OFFSET);
  pdev->regs.HPRT0 = (uint32_t *)(baseAddress + USB_OTG_HOST_PORT_REGS_OFFSET);
 8013024:	693b      	ldr	r3, [r7, #16]
 8013026:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 801302a:	461a      	mov	r2, r3
 801302c:	687b      	ldr	r3, [r7, #4]
 801302e:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
  
  for (i = 0; i < pdev->cfg.host_channels; i++)
 8013032:	2300      	movs	r3, #0
 8013034:	617b      	str	r3, [r7, #20]
 8013036:	e00f      	b.n	8013058 <USB_OTG_SelectCore+0x122>
  {
    pdev->regs.HC_REGS[i] = (USB_OTG_HC_REGS *)(baseAddress + \
      USB_OTG_HOST_CHAN_REGS_OFFSET + \
        (i * USB_OTG_CHAN_REGS_OFFSET));
 8013038:	697b      	ldr	r3, [r7, #20]
 801303a:	015a      	lsls	r2, r3, #5
      USB_OTG_HOST_CHAN_REGS_OFFSET + \
 801303c:	693b      	ldr	r3, [r7, #16]
 801303e:	4413      	add	r3, r2
 8013040:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
    pdev->regs.HC_REGS[i] = (USB_OTG_HC_REGS *)(baseAddress + \
 8013044:	4619      	mov	r1, r3
 8013046:	687a      	ldr	r2, [r7, #4]
 8013048:	697b      	ldr	r3, [r7, #20]
 801304a:	3322      	adds	r3, #34	; 0x22
 801304c:	009b      	lsls	r3, r3, #2
 801304e:	4413      	add	r3, r2
 8013050:	6099      	str	r1, [r3, #8]
  for (i = 0; i < pdev->cfg.host_channels; i++)
 8013052:	697b      	ldr	r3, [r7, #20]
 8013054:	3301      	adds	r3, #1
 8013056:	617b      	str	r3, [r7, #20]
 8013058:	687b      	ldr	r3, [r7, #4]
 801305a:	781b      	ldrb	r3, [r3, #0]
 801305c:	461a      	mov	r2, r3
 801305e:	697b      	ldr	r3, [r7, #20]
 8013060:	4293      	cmp	r3, r2
 8013062:	d3e9      	bcc.n	8013038 <USB_OTG_SelectCore+0x102>
  }
  for (i = 0; i < pdev->cfg.host_channels; i++)
 8013064:	2300      	movs	r3, #0
 8013066:	617b      	str	r3, [r7, #20]
 8013068:	e00f      	b.n	801308a <USB_OTG_SelectCore+0x154>
  {
    pdev->regs.DFIFO[i] = (uint32_t *)(baseAddress + USB_OTG_DATA_FIFO_OFFSET +\
      (i * USB_OTG_DATA_FIFO_SIZE));
 801306a:	697b      	ldr	r3, [r7, #20]
 801306c:	031a      	lsls	r2, r3, #12
    pdev->regs.DFIFO[i] = (uint32_t *)(baseAddress + USB_OTG_DATA_FIFO_OFFSET +\
 801306e:	693b      	ldr	r3, [r7, #16]
 8013070:	4413      	add	r3, r2
 8013072:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013076:	4619      	mov	r1, r3
 8013078:	687a      	ldr	r2, [r7, #4]
 801307a:	697b      	ldr	r3, [r7, #20]
 801307c:	3332      	adds	r3, #50	; 0x32
 801307e:	009b      	lsls	r3, r3, #2
 8013080:	4413      	add	r3, r2
 8013082:	6099      	str	r1, [r3, #8]
  for (i = 0; i < pdev->cfg.host_channels; i++)
 8013084:	697b      	ldr	r3, [r7, #20]
 8013086:	3301      	adds	r3, #1
 8013088:	617b      	str	r3, [r7, #20]
 801308a:	687b      	ldr	r3, [r7, #4]
 801308c:	781b      	ldrb	r3, [r3, #0]
 801308e:	461a      	mov	r2, r3
 8013090:	697b      	ldr	r3, [r7, #20]
 8013092:	4293      	cmp	r3, r2
 8013094:	d3e9      	bcc.n	801306a <USB_OTG_SelectCore+0x134>
  }
  pdev->regs.PCGCCTL = (uint32_t *)(baseAddress + USB_OTG_PCGCCTL_OFFSET);
 8013096:	693b      	ldr	r3, [r7, #16]
 8013098:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801309c:	461a      	mov	r2, r3
 801309e:	687b      	ldr	r3, [r7, #4]
 80130a0:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
  
  return status;
 80130a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80130a6:	4618      	mov	r0, r3
 80130a8:	371c      	adds	r7, #28
 80130aa:	46bd      	mov	sp, r7
 80130ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130b0:	4770      	bx	lr
 80130b2:	bf00      	nop
 80130b4:	40040000 	.word	0x40040000

080130b8 <USB_OTG_CoreInit>:
*         device mode or host mode operation.
* @param  pdev : Selected device
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_CoreInit(USB_OTG_CORE_HANDLE *pdev)
{
 80130b8:	b580      	push	{r7, lr}
 80130ba:	b086      	sub	sp, #24
 80130bc:	af00      	add	r7, sp, #0
 80130be:	6078      	str	r0, [r7, #4]
  USB_OTG_STS status = USB_OTG_OK;
 80130c0:	2300      	movs	r3, #0
 80130c2:	75fb      	strb	r3, [r7, #23]
  USB_OTG_GUSBCFG_TypeDef  usbcfg;
  USB_OTG_GCCFG_TypeDef    gccfg;
  USB_OTG_GAHBCFG_TypeDef  ahbcfg;
  
  usbcfg.d32 = 0;
 80130c4:	2300      	movs	r3, #0
 80130c6:	613b      	str	r3, [r7, #16]
  gccfg.d32 = 0;
 80130c8:	2300      	movs	r3, #0
 80130ca:	60fb      	str	r3, [r7, #12]
  ahbcfg.d32 = 0;
 80130cc:	2300      	movs	r3, #0
 80130ce:	60bb      	str	r3, [r7, #8]
  
  
  
  if (pdev->cfg.phy_itface == USB_OTG_ULPI_PHY)
 80130d0:	687b      	ldr	r3, [r7, #4]
 80130d2:	7a1b      	ldrb	r3, [r3, #8]
 80130d4:	2b01      	cmp	r3, #1
 80130d6:	d146      	bne.n	8013166 <USB_OTG_CoreInit+0xae>
  {
    gccfg.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GCCFG);
 80130d8:	687b      	ldr	r3, [r7, #4]
 80130da:	68db      	ldr	r3, [r3, #12]
 80130dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80130de:	60fb      	str	r3, [r7, #12]
    gccfg.b.pwdn = 0;
 80130e0:	7bbb      	ldrb	r3, [r7, #14]
 80130e2:	f36f 0300 	bfc	r3, #0, #1
 80130e6:	73bb      	strb	r3, [r7, #14]
    
    if (pdev->cfg.Sof_output)
 80130e8:	687b      	ldr	r3, [r7, #4]
 80130ea:	7a5b      	ldrb	r3, [r3, #9]
 80130ec:	2b00      	cmp	r3, #0
 80130ee:	d003      	beq.n	80130f8 <USB_OTG_CoreInit+0x40>
    {
      gccfg.b.sofouten = 1;   
 80130f0:	7bbb      	ldrb	r3, [r7, #14]
 80130f2:	f043 0310 	orr.w	r3, r3, #16
 80130f6:	73bb      	strb	r3, [r7, #14]
    }
    USB_OTG_WRITE_REG32 (&pdev->regs.GREGS->GCCFG, gccfg.d32);
 80130f8:	687b      	ldr	r3, [r7, #4]
 80130fa:	68db      	ldr	r3, [r3, #12]
 80130fc:	68fa      	ldr	r2, [r7, #12]
 80130fe:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Init The ULPI Interface */
    usbcfg.d32 = 0;
 8013100:	2300      	movs	r3, #0
 8013102:	613b      	str	r3, [r7, #16]
    usbcfg.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GUSBCFG);
 8013104:	687b      	ldr	r3, [r7, #4]
 8013106:	68db      	ldr	r3, [r3, #12]
 8013108:	68db      	ldr	r3, [r3, #12]
 801310a:	613b      	str	r3, [r7, #16]
    
    usbcfg.b.physel            = 0; /* HS Interface */
 801310c:	7c3b      	ldrb	r3, [r7, #16]
 801310e:	f36f 1386 	bfc	r3, #6, #1
 8013112:	743b      	strb	r3, [r7, #16]
#ifdef USB_OTG_INTERNAL_VBUS_ENABLED
    usbcfg.b.ulpi_ext_vbus_drv = 0; /* Use internal VBUS */
#else
#ifdef USB_OTG_EXTERNAL_VBUS_ENABLED    
    usbcfg.b.ulpi_ext_vbus_drv = 1; /* Use external VBUS */
 8013114:	7cbb      	ldrb	r3, [r7, #18]
 8013116:	f043 0310 	orr.w	r3, r3, #16
 801311a:	74bb      	strb	r3, [r7, #18]
#endif
#endif 
    usbcfg.b.term_sel_dl_pulse = 0; /* Data line pulsing using utmi_txvalid */    
 801311c:	7cbb      	ldrb	r3, [r7, #18]
 801311e:	f36f 1386 	bfc	r3, #6, #1
 8013122:	74bb      	strb	r3, [r7, #18]
    
    usbcfg.b.ulpi_fsls = 0;
 8013124:	7cbb      	ldrb	r3, [r7, #18]
 8013126:	f36f 0341 	bfc	r3, #1, #1
 801312a:	74bb      	strb	r3, [r7, #18]
    usbcfg.b.ulpi_clk_sus_m = 0;
 801312c:	7cbb      	ldrb	r3, [r7, #18]
 801312e:	f36f 03c3 	bfc	r3, #3, #1
 8013132:	74bb      	strb	r3, [r7, #18]
    USB_OTG_WRITE_REG32 (&pdev->regs.GREGS->GUSBCFG, usbcfg.d32);
 8013134:	687b      	ldr	r3, [r7, #4]
 8013136:	68db      	ldr	r3, [r3, #12]
 8013138:	693a      	ldr	r2, [r7, #16]
 801313a:	60da      	str	r2, [r3, #12]
    
    /* Reset after a PHY select  */
    USB_OTG_CoreReset(pdev);
 801313c:	6878      	ldr	r0, [r7, #4]
 801313e:	f7ff fe4b 	bl	8012dd8 <USB_OTG_CoreReset>
    
    if(pdev->cfg.dma_enable == 1)
 8013142:	687b      	ldr	r3, [r7, #4]
 8013144:	78db      	ldrb	r3, [r3, #3]
 8013146:	2b01      	cmp	r3, #1
 8013148:	d13d      	bne.n	80131c6 <USB_OTG_CoreInit+0x10e>
    {
      
      ahbcfg.b.hburstlen = 5; /* 64 x 32-bits*/
 801314a:	7a3b      	ldrb	r3, [r7, #8]
 801314c:	2205      	movs	r2, #5
 801314e:	f362 0344 	bfi	r3, r2, #1, #4
 8013152:	723b      	strb	r3, [r7, #8]
      ahbcfg.b.dmaenable = 1;
 8013154:	7a3b      	ldrb	r3, [r7, #8]
 8013156:	f043 0320 	orr.w	r3, r3, #32
 801315a:	723b      	strb	r3, [r7, #8]
      USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GAHBCFG, ahbcfg.d32);
 801315c:	687b      	ldr	r3, [r7, #4]
 801315e:	68db      	ldr	r3, [r3, #12]
 8013160:	68ba      	ldr	r2, [r7, #8]
 8013162:	609a      	str	r2, [r3, #8]
 8013164:	e02f      	b.n	80131c6 <USB_OTG_CoreInit+0x10e>
    }    
  }
  else /* FS interface (embedded Phy) */
  {
    
    usbcfg.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GUSBCFG);;
 8013166:	687b      	ldr	r3, [r7, #4]
 8013168:	68db      	ldr	r3, [r3, #12]
 801316a:	68db      	ldr	r3, [r3, #12]
 801316c:	613b      	str	r3, [r7, #16]
    usbcfg.b.physel  = 1; /* FS Interface */
 801316e:	7c3b      	ldrb	r3, [r7, #16]
 8013170:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013174:	743b      	strb	r3, [r7, #16]
    USB_OTG_WRITE_REG32 (&pdev->regs.GREGS->GUSBCFG, usbcfg.d32);
 8013176:	687b      	ldr	r3, [r7, #4]
 8013178:	68db      	ldr	r3, [r3, #12]
 801317a:	693a      	ldr	r2, [r7, #16]
 801317c:	60da      	str	r2, [r3, #12]
    /* Reset after a PHY select and set Host mode */
    USB_OTG_CoreReset(pdev);
 801317e:	6878      	ldr	r0, [r7, #4]
 8013180:	f7ff fe2a 	bl	8012dd8 <USB_OTG_CoreReset>
    /* Deactivate the power down*/
    gccfg.d32 = 0;
 8013184:	2300      	movs	r3, #0
 8013186:	60fb      	str	r3, [r7, #12]
    gccfg.b.pwdn = 1;
 8013188:	7bbb      	ldrb	r3, [r7, #14]
 801318a:	f043 0301 	orr.w	r3, r3, #1
 801318e:	73bb      	strb	r3, [r7, #14]
    
    gccfg.b.vbussensingA = 1 ;
 8013190:	7bbb      	ldrb	r3, [r7, #14]
 8013192:	f043 0304 	orr.w	r3, r3, #4
 8013196:	73bb      	strb	r3, [r7, #14]
    gccfg.b.vbussensingB = 1 ;     
 8013198:	7bbb      	ldrb	r3, [r7, #14]
 801319a:	f043 0308 	orr.w	r3, r3, #8
 801319e:	73bb      	strb	r3, [r7, #14]
#ifndef VBUS_SENSING_ENABLED
    gccfg.b.disablevbussensing = 1; 
 80131a0:	7bbb      	ldrb	r3, [r7, #14]
 80131a2:	f043 0320 	orr.w	r3, r3, #32
 80131a6:	73bb      	strb	r3, [r7, #14]
#endif    
    
    if(pdev->cfg.Sof_output)
 80131a8:	687b      	ldr	r3, [r7, #4]
 80131aa:	7a5b      	ldrb	r3, [r3, #9]
 80131ac:	2b00      	cmp	r3, #0
 80131ae:	d003      	beq.n	80131b8 <USB_OTG_CoreInit+0x100>
    {
      gccfg.b.sofouten = 1;  
 80131b0:	7bbb      	ldrb	r3, [r7, #14]
 80131b2:	f043 0310 	orr.w	r3, r3, #16
 80131b6:	73bb      	strb	r3, [r7, #14]
    }
    
    USB_OTG_WRITE_REG32 (&pdev->regs.GREGS->GCCFG, gccfg.d32);
 80131b8:	687b      	ldr	r3, [r7, #4]
 80131ba:	68db      	ldr	r3, [r3, #12]
 80131bc:	68fa      	ldr	r2, [r7, #12]
 80131be:	639a      	str	r2, [r3, #56]	; 0x38
    USB_OTG_BSP_mDelay(20);
 80131c0:	2014      	movs	r0, #20
 80131c2:	f7ff fdcd 	bl	8012d60 <USB_OTG_BSP_mDelay>
  }
  /* case the HS core is working in FS mode */
  if(pdev->cfg.dma_enable == 1)
 80131c6:	687b      	ldr	r3, [r7, #4]
 80131c8:	78db      	ldrb	r3, [r3, #3]
 80131ca:	2b01      	cmp	r3, #1
 80131cc:	d110      	bne.n	80131f0 <USB_OTG_CoreInit+0x138>
  {
    
    ahbcfg.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GAHBCFG);
 80131ce:	687b      	ldr	r3, [r7, #4]
 80131d0:	68db      	ldr	r3, [r3, #12]
 80131d2:	689b      	ldr	r3, [r3, #8]
 80131d4:	60bb      	str	r3, [r7, #8]
    ahbcfg.b.hburstlen = 5; /* 64 x 32-bits*/
 80131d6:	7a3b      	ldrb	r3, [r7, #8]
 80131d8:	2205      	movs	r2, #5
 80131da:	f362 0344 	bfi	r3, r2, #1, #4
 80131de:	723b      	strb	r3, [r7, #8]
    ahbcfg.b.dmaenable = 1;
 80131e0:	7a3b      	ldrb	r3, [r7, #8]
 80131e2:	f043 0320 	orr.w	r3, r3, #32
 80131e6:	723b      	strb	r3, [r7, #8]
    USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GAHBCFG, ahbcfg.d32);
 80131e8:	687b      	ldr	r3, [r7, #4]
 80131ea:	68db      	ldr	r3, [r3, #12]
 80131ec:	68ba      	ldr	r2, [r7, #8]
 80131ee:	609a      	str	r2, [r3, #8]
  usbcfg.b.hnpcap = 1;
  usbcfg.b.srpcap = 1;
  USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GUSBCFG, usbcfg.d32);
  USB_OTG_EnableCommonInt(pdev);
#endif
  return status;
 80131f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80131f2:	4618      	mov	r0, r3
 80131f4:	3718      	adds	r7, #24
 80131f6:	46bd      	mov	sp, r7
 80131f8:	bd80      	pop	{r7, pc}

080131fa <USB_OTG_EnableGlobalInt>:
*         Enables the controller's Global Int in the AHB Config reg
* @param  pdev : Selected device
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_EnableGlobalInt(USB_OTG_CORE_HANDLE *pdev)
{
 80131fa:	b480      	push	{r7}
 80131fc:	b085      	sub	sp, #20
 80131fe:	af00      	add	r7, sp, #0
 8013200:	6078      	str	r0, [r7, #4]
  USB_OTG_STS status = USB_OTG_OK;
 8013202:	2300      	movs	r3, #0
 8013204:	73fb      	strb	r3, [r7, #15]
  USB_OTG_GAHBCFG_TypeDef  ahbcfg;
  
  ahbcfg.d32 = 0;
 8013206:	2300      	movs	r3, #0
 8013208:	60bb      	str	r3, [r7, #8]
  ahbcfg.b.glblintrmsk = 1; /* Enable interrupts */
 801320a:	7a3b      	ldrb	r3, [r7, #8]
 801320c:	f043 0301 	orr.w	r3, r3, #1
 8013210:	723b      	strb	r3, [r7, #8]
  USB_OTG_MODIFY_REG32(&pdev->regs.GREGS->GAHBCFG, 0, ahbcfg.d32);
 8013212:	687b      	ldr	r3, [r7, #4]
 8013214:	68db      	ldr	r3, [r3, #12]
 8013216:	6899      	ldr	r1, [r3, #8]
 8013218:	68ba      	ldr	r2, [r7, #8]
 801321a:	687b      	ldr	r3, [r7, #4]
 801321c:	68db      	ldr	r3, [r3, #12]
 801321e:	430a      	orrs	r2, r1
 8013220:	609a      	str	r2, [r3, #8]
  return status;
 8013222:	7bfb      	ldrb	r3, [r7, #15]
}
 8013224:	4618      	mov	r0, r3
 8013226:	3714      	adds	r7, #20
 8013228:	46bd      	mov	sp, r7
 801322a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801322e:	4770      	bx	lr

08013230 <USB_OTG_DisableGlobalInt>:
*         Enables the controller's Global Int in the AHB Config reg
* @param  pdev : Selected device
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_DisableGlobalInt(USB_OTG_CORE_HANDLE *pdev)
{
 8013230:	b480      	push	{r7}
 8013232:	b085      	sub	sp, #20
 8013234:	af00      	add	r7, sp, #0
 8013236:	6078      	str	r0, [r7, #4]
  USB_OTG_STS status = USB_OTG_OK;
 8013238:	2300      	movs	r3, #0
 801323a:	73fb      	strb	r3, [r7, #15]
  USB_OTG_GAHBCFG_TypeDef  ahbcfg;
  ahbcfg.d32 = 0;
 801323c:	2300      	movs	r3, #0
 801323e:	60bb      	str	r3, [r7, #8]
  ahbcfg.b.glblintrmsk = 1; /* Enable interrupts */
 8013240:	7a3b      	ldrb	r3, [r7, #8]
 8013242:	f043 0301 	orr.w	r3, r3, #1
 8013246:	723b      	strb	r3, [r7, #8]
  USB_OTG_MODIFY_REG32(&pdev->regs.GREGS->GAHBCFG, ahbcfg.d32, 0);
 8013248:	687b      	ldr	r3, [r7, #4]
 801324a:	68db      	ldr	r3, [r3, #12]
 801324c:	6899      	ldr	r1, [r3, #8]
 801324e:	68bb      	ldr	r3, [r7, #8]
 8013250:	43da      	mvns	r2, r3
 8013252:	687b      	ldr	r3, [r7, #4]
 8013254:	68db      	ldr	r3, [r3, #12]
 8013256:	400a      	ands	r2, r1
 8013258:	609a      	str	r2, [r3, #8]
  return status;
 801325a:	7bfb      	ldrb	r3, [r7, #15]
}
 801325c:	4618      	mov	r0, r3
 801325e:	3714      	adds	r7, #20
 8013260:	46bd      	mov	sp, r7
 8013262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013266:	4770      	bx	lr

08013268 <USB_OTG_FlushTxFifo>:
* @param  pdev : Selected device
* @param  num : FO num
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_FlushTxFifo (USB_OTG_CORE_HANDLE *pdev , uint32_t num )
{
 8013268:	b580      	push	{r7, lr}
 801326a:	b086      	sub	sp, #24
 801326c:	af00      	add	r7, sp, #0
 801326e:	6078      	str	r0, [r7, #4]
 8013270:	6039      	str	r1, [r7, #0]
  USB_OTG_STS status = USB_OTG_OK;
 8013272:	2300      	movs	r3, #0
 8013274:	74fb      	strb	r3, [r7, #19]
  __IO USB_OTG_GRSTCTL_TypeDef  greset;
  
  uint32_t count = 0;
 8013276:	2300      	movs	r3, #0
 8013278:	617b      	str	r3, [r7, #20]
  greset.d32 = 0;
 801327a:	2300      	movs	r3, #0
 801327c:	60fb      	str	r3, [r7, #12]
  greset.b.txfflsh = 1;
 801327e:	68fb      	ldr	r3, [r7, #12]
 8013280:	f043 0320 	orr.w	r3, r3, #32
 8013284:	60fb      	str	r3, [r7, #12]
  greset.b.txfnum  = num;
 8013286:	683b      	ldr	r3, [r7, #0]
 8013288:	f003 031f 	and.w	r3, r3, #31
 801328c:	b2da      	uxtb	r2, r3
 801328e:	68fb      	ldr	r3, [r7, #12]
 8013290:	f362 138a 	bfi	r3, r2, #6, #5
 8013294:	60fb      	str	r3, [r7, #12]
  USB_OTG_WRITE_REG32( &pdev->regs.GREGS->GRSTCTL, greset.d32 );
 8013296:	687b      	ldr	r3, [r7, #4]
 8013298:	68db      	ldr	r3, [r3, #12]
 801329a:	68fa      	ldr	r2, [r7, #12]
 801329c:	611a      	str	r2, [r3, #16]
  do
  {
    greset.d32 = USB_OTG_READ_REG32( &pdev->regs.GREGS->GRSTCTL);
 801329e:	687b      	ldr	r3, [r7, #4]
 80132a0:	68db      	ldr	r3, [r3, #12]
 80132a2:	691b      	ldr	r3, [r3, #16]
 80132a4:	60fb      	str	r3, [r7, #12]
    if (++count > 200000)
 80132a6:	697b      	ldr	r3, [r7, #20]
 80132a8:	3301      	adds	r3, #1
 80132aa:	617b      	str	r3, [r7, #20]
 80132ac:	697b      	ldr	r3, [r7, #20]
 80132ae:	4a09      	ldr	r2, [pc, #36]	; (80132d4 <USB_OTG_FlushTxFifo+0x6c>)
 80132b0:	4293      	cmp	r3, r2
 80132b2:	d806      	bhi.n	80132c2 <USB_OTG_FlushTxFifo+0x5a>
    {
      break;
    }
  }
  while (greset.b.txfflsh == 1);
 80132b4:	68fb      	ldr	r3, [r7, #12]
 80132b6:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80132ba:	b2db      	uxtb	r3, r3
 80132bc:	2b01      	cmp	r3, #1
 80132be:	d0ee      	beq.n	801329e <USB_OTG_FlushTxFifo+0x36>
 80132c0:	e000      	b.n	80132c4 <USB_OTG_FlushTxFifo+0x5c>
      break;
 80132c2:	bf00      	nop
  /* Wait for 3 PHY Clocks*/
  USB_OTG_BSP_uDelay(3);
 80132c4:	2003      	movs	r0, #3
 80132c6:	f7ff fd27 	bl	8012d18 <USB_OTG_BSP_uDelay>
  return status;
 80132ca:	7cfb      	ldrb	r3, [r7, #19]
}
 80132cc:	4618      	mov	r0, r3
 80132ce:	3718      	adds	r7, #24
 80132d0:	46bd      	mov	sp, r7
 80132d2:	bd80      	pop	{r7, pc}
 80132d4:	00030d40 	.word	0x00030d40

080132d8 <USB_OTG_FlushRxFifo>:
* @brief  USB_OTG_FlushRxFifo : Flush a Rx FIFO
* @param  pdev : Selected device
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_FlushRxFifo( USB_OTG_CORE_HANDLE *pdev )
{
 80132d8:	b580      	push	{r7, lr}
 80132da:	b086      	sub	sp, #24
 80132dc:	af00      	add	r7, sp, #0
 80132de:	6078      	str	r0, [r7, #4]
  USB_OTG_STS status = USB_OTG_OK;
 80132e0:	2300      	movs	r3, #0
 80132e2:	74fb      	strb	r3, [r7, #19]
  __IO USB_OTG_GRSTCTL_TypeDef  greset;
  uint32_t count = 0;
 80132e4:	2300      	movs	r3, #0
 80132e6:	617b      	str	r3, [r7, #20]
  
  greset.d32 = 0;
 80132e8:	2300      	movs	r3, #0
 80132ea:	60fb      	str	r3, [r7, #12]
  greset.b.rxfflsh = 1;
 80132ec:	68fb      	ldr	r3, [r7, #12]
 80132ee:	f043 0310 	orr.w	r3, r3, #16
 80132f2:	60fb      	str	r3, [r7, #12]
  USB_OTG_WRITE_REG32( &pdev->regs.GREGS->GRSTCTL, greset.d32 );
 80132f4:	687b      	ldr	r3, [r7, #4]
 80132f6:	68db      	ldr	r3, [r3, #12]
 80132f8:	68fa      	ldr	r2, [r7, #12]
 80132fa:	611a      	str	r2, [r3, #16]
  do
  {
    greset.d32 = USB_OTG_READ_REG32( &pdev->regs.GREGS->GRSTCTL);
 80132fc:	687b      	ldr	r3, [r7, #4]
 80132fe:	68db      	ldr	r3, [r3, #12]
 8013300:	691b      	ldr	r3, [r3, #16]
 8013302:	60fb      	str	r3, [r7, #12]
    if (++count > 200000)
 8013304:	697b      	ldr	r3, [r7, #20]
 8013306:	3301      	adds	r3, #1
 8013308:	617b      	str	r3, [r7, #20]
 801330a:	697b      	ldr	r3, [r7, #20]
 801330c:	4a09      	ldr	r2, [pc, #36]	; (8013334 <USB_OTG_FlushRxFifo+0x5c>)
 801330e:	4293      	cmp	r3, r2
 8013310:	d806      	bhi.n	8013320 <USB_OTG_FlushRxFifo+0x48>
    {
      break;
    }
  }
  while (greset.b.rxfflsh == 1);
 8013312:	68fb      	ldr	r3, [r7, #12]
 8013314:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8013318:	b2db      	uxtb	r3, r3
 801331a:	2b01      	cmp	r3, #1
 801331c:	d0ee      	beq.n	80132fc <USB_OTG_FlushRxFifo+0x24>
 801331e:	e000      	b.n	8013322 <USB_OTG_FlushRxFifo+0x4a>
      break;
 8013320:	bf00      	nop
  /* Wait for 3 PHY Clocks*/
  USB_OTG_BSP_uDelay(3);
 8013322:	2003      	movs	r0, #3
 8013324:	f7ff fcf8 	bl	8012d18 <USB_OTG_BSP_uDelay>
  return status;
 8013328:	7cfb      	ldrb	r3, [r7, #19]
}
 801332a:	4618      	mov	r0, r3
 801332c:	3718      	adds	r7, #24
 801332e:	46bd      	mov	sp, r7
 8013330:	bd80      	pop	{r7, pc}
 8013332:	bf00      	nop
 8013334:	00030d40 	.word	0x00030d40

08013338 <USB_OTG_SetCurrentMode>:
* @param  pdev : Selected device
* @param  mode :  (Host/device)
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_SetCurrentMode(USB_OTG_CORE_HANDLE *pdev , uint8_t mode)
{
 8013338:	b580      	push	{r7, lr}
 801333a:	b084      	sub	sp, #16
 801333c:	af00      	add	r7, sp, #0
 801333e:	6078      	str	r0, [r7, #4]
 8013340:	460b      	mov	r3, r1
 8013342:	70fb      	strb	r3, [r7, #3]
  USB_OTG_STS status = USB_OTG_OK;
 8013344:	2300      	movs	r3, #0
 8013346:	73fb      	strb	r3, [r7, #15]
  USB_OTG_GUSBCFG_TypeDef  usbcfg;
  
  usbcfg.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GUSBCFG);
 8013348:	687b      	ldr	r3, [r7, #4]
 801334a:	68db      	ldr	r3, [r3, #12]
 801334c:	68db      	ldr	r3, [r3, #12]
 801334e:	60bb      	str	r3, [r7, #8]
  
  usbcfg.b.force_host = 0;
 8013350:	7afb      	ldrb	r3, [r7, #11]
 8013352:	f36f 1345 	bfc	r3, #5, #1
 8013356:	72fb      	strb	r3, [r7, #11]
  usbcfg.b.force_dev = 0;
 8013358:	7afb      	ldrb	r3, [r7, #11]
 801335a:	f36f 1386 	bfc	r3, #6, #1
 801335e:	72fb      	strb	r3, [r7, #11]
  
  if ( mode == HOST_MODE)
 8013360:	78fb      	ldrb	r3, [r7, #3]
 8013362:	2b01      	cmp	r3, #1
 8013364:	d104      	bne.n	8013370 <USB_OTG_SetCurrentMode+0x38>
  {
    usbcfg.b.force_host = 1;
 8013366:	7afb      	ldrb	r3, [r7, #11]
 8013368:	f043 0320 	orr.w	r3, r3, #32
 801336c:	72fb      	strb	r3, [r7, #11]
 801336e:	e006      	b.n	801337e <USB_OTG_SetCurrentMode+0x46>
  }
  else if ( mode == DEVICE_MODE)
 8013370:	78fb      	ldrb	r3, [r7, #3]
 8013372:	2b00      	cmp	r3, #0
 8013374:	d103      	bne.n	801337e <USB_OTG_SetCurrentMode+0x46>
  {
    usbcfg.b.force_dev = 1;
 8013376:	7afb      	ldrb	r3, [r7, #11]
 8013378:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801337c:	72fb      	strb	r3, [r7, #11]
  }
  
  USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GUSBCFG, usbcfg.d32);
 801337e:	687b      	ldr	r3, [r7, #4]
 8013380:	68db      	ldr	r3, [r3, #12]
 8013382:	68ba      	ldr	r2, [r7, #8]
 8013384:	60da      	str	r2, [r3, #12]
  USB_OTG_BSP_mDelay(50);
 8013386:	2032      	movs	r0, #50	; 0x32
 8013388:	f7ff fcea 	bl	8012d60 <USB_OTG_BSP_mDelay>
  return status;
 801338c:	7bfb      	ldrb	r3, [r7, #15]
}
 801338e:	4618      	mov	r0, r3
 8013390:	3710      	adds	r7, #16
 8013392:	46bd      	mov	sp, r7
 8013394:	bd80      	pop	{r7, pc}

08013396 <USB_OTG_GetMode>:
* @brief  USB_OTG_GetMode : Get current mode
* @param  pdev : Selected device
* @retval current mode
*/
uint32_t USB_OTG_GetMode(USB_OTG_CORE_HANDLE *pdev)
{
 8013396:	b480      	push	{r7}
 8013398:	b083      	sub	sp, #12
 801339a:	af00      	add	r7, sp, #0
 801339c:	6078      	str	r0, [r7, #4]
  return (USB_OTG_READ_REG32(&pdev->regs.GREGS->GINTSTS ) & 0x1);
 801339e:	687b      	ldr	r3, [r7, #4]
 80133a0:	68db      	ldr	r3, [r3, #12]
 80133a2:	695b      	ldr	r3, [r3, #20]
 80133a4:	f003 0301 	and.w	r3, r3, #1
}
 80133a8:	4618      	mov	r0, r3
 80133aa:	370c      	adds	r7, #12
 80133ac:	46bd      	mov	sp, r7
 80133ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133b2:	4770      	bx	lr

080133b4 <USB_OTG_IsDeviceMode>:
* @brief  USB_OTG_IsDeviceMode : Check if it is device mode
* @param  pdev : Selected device
* @retval num_in_ep
*/
uint8_t USB_OTG_IsDeviceMode(USB_OTG_CORE_HANDLE *pdev)
{
 80133b4:	b580      	push	{r7, lr}
 80133b6:	b082      	sub	sp, #8
 80133b8:	af00      	add	r7, sp, #0
 80133ba:	6078      	str	r0, [r7, #4]
  return (USB_OTG_GetMode(pdev) != HOST_MODE);
 80133bc:	6878      	ldr	r0, [r7, #4]
 80133be:	f7ff ffea 	bl	8013396 <USB_OTG_GetMode>
 80133c2:	4603      	mov	r3, r0
 80133c4:	2b01      	cmp	r3, #1
 80133c6:	bf14      	ite	ne
 80133c8:	2301      	movne	r3, #1
 80133ca:	2300      	moveq	r3, #0
 80133cc:	b2db      	uxtb	r3, r3
}
 80133ce:	4618      	mov	r0, r3
 80133d0:	3708      	adds	r7, #8
 80133d2:	46bd      	mov	sp, r7
 80133d4:	bd80      	pop	{r7, pc}

080133d6 <USB_OTG_IsHostMode>:
* @brief  USB_OTG_IsHostMode : Check if it is host mode
* @param  pdev : Selected device
* @retval num_in_ep
*/
uint8_t USB_OTG_IsHostMode(USB_OTG_CORE_HANDLE *pdev)
{
 80133d6:	b580      	push	{r7, lr}
 80133d8:	b082      	sub	sp, #8
 80133da:	af00      	add	r7, sp, #0
 80133dc:	6078      	str	r0, [r7, #4]
  return (USB_OTG_GetMode(pdev) == HOST_MODE);
 80133de:	6878      	ldr	r0, [r7, #4]
 80133e0:	f7ff ffd9 	bl	8013396 <USB_OTG_GetMode>
 80133e4:	4603      	mov	r3, r0
 80133e6:	2b01      	cmp	r3, #1
 80133e8:	bf0c      	ite	eq
 80133ea:	2301      	moveq	r3, #1
 80133ec:	2300      	movne	r3, #0
 80133ee:	b2db      	uxtb	r3, r3
}
 80133f0:	4618      	mov	r0, r3
 80133f2:	3708      	adds	r7, #8
 80133f4:	46bd      	mov	sp, r7
 80133f6:	bd80      	pop	{r7, pc}

080133f8 <USB_OTG_ReadCoreItr>:
* @brief  USB_OTG_ReadCoreItr : returns the Core Interrupt register
* @param  pdev : Selected device
* @retval Status
*/
uint32_t USB_OTG_ReadCoreItr(USB_OTG_CORE_HANDLE *pdev)
{
 80133f8:	b480      	push	{r7}
 80133fa:	b085      	sub	sp, #20
 80133fc:	af00      	add	r7, sp, #0
 80133fe:	6078      	str	r0, [r7, #4]
  uint32_t v = 0;
 8013400:	2300      	movs	r3, #0
 8013402:	60fb      	str	r3, [r7, #12]
  v = USB_OTG_READ_REG32(&pdev->regs.GREGS->GINTSTS);
 8013404:	687b      	ldr	r3, [r7, #4]
 8013406:	68db      	ldr	r3, [r3, #12]
 8013408:	695b      	ldr	r3, [r3, #20]
 801340a:	60fb      	str	r3, [r7, #12]
  v &= USB_OTG_READ_REG32(&pdev->regs.GREGS->GINTMSK);
 801340c:	687b      	ldr	r3, [r7, #4]
 801340e:	68db      	ldr	r3, [r3, #12]
 8013410:	699b      	ldr	r3, [r3, #24]
 8013412:	68fa      	ldr	r2, [r7, #12]
 8013414:	4013      	ands	r3, r2
 8013416:	60fb      	str	r3, [r7, #12]
  return v;
 8013418:	68fb      	ldr	r3, [r7, #12]
}
 801341a:	4618      	mov	r0, r3
 801341c:	3714      	adds	r7, #20
 801341e:	46bd      	mov	sp, r7
 8013420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013424:	4770      	bx	lr

08013426 <USB_OTG_ReadOtgItr>:
* @brief  USB_OTG_ReadOtgItr : returns the USB_OTG Interrupt register
* @param  pdev : Selected device
* @retval Status
*/
uint32_t USB_OTG_ReadOtgItr (USB_OTG_CORE_HANDLE *pdev)
{
 8013426:	b480      	push	{r7}
 8013428:	b083      	sub	sp, #12
 801342a:	af00      	add	r7, sp, #0
 801342c:	6078      	str	r0, [r7, #4]
  return (USB_OTG_READ_REG32 (&pdev->regs.GREGS->GOTGINT));
 801342e:	687b      	ldr	r3, [r7, #4]
 8013430:	68db      	ldr	r3, [r3, #12]
 8013432:	685b      	ldr	r3, [r3, #4]
}
 8013434:	4618      	mov	r0, r3
 8013436:	370c      	adds	r7, #12
 8013438:	46bd      	mov	sp, r7
 801343a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801343e:	4770      	bx	lr

08013440 <USB_OTG_CoreInitHost>:
* @brief  USB_OTG_CoreInitHost : Initializes USB_OTG controller for host mode
* @param  pdev : Selected device
* @retval status
*/
USB_OTG_STS USB_OTG_CoreInitHost(USB_OTG_CORE_HANDLE *pdev)
{
 8013440:	b580      	push	{r7, lr}
 8013442:	b088      	sub	sp, #32
 8013444:	af00      	add	r7, sp, #0
 8013446:	6078      	str	r0, [r7, #4]
  USB_OTG_STS                     status = USB_OTG_OK;
 8013448:	2300      	movs	r3, #0
 801344a:	76fb      	strb	r3, [r7, #27]
  
#ifdef USE_OTG_MODE
  USB_OTG_OTGCTL_TypeDef          gotgctl;
#endif
  
  uint32_t                        i = 0;
 801344c:	2300      	movs	r3, #0
 801344e:	61fb      	str	r3, [r7, #28]
  
  nptxfifosize.d32 = 0;  
 8013450:	2300      	movs	r3, #0
 8013452:	617b      	str	r3, [r7, #20]
  ptxfifosize.d32 = 0;
 8013454:	2300      	movs	r3, #0
 8013456:	613b      	str	r3, [r7, #16]
#ifdef USE_OTG_MODE
  gotgctl.d32 = 0;
#endif
  hcfg.d32 = 0;
 8013458:	2300      	movs	r3, #0
 801345a:	60fb      	str	r3, [r7, #12]
  
  
  /* configure charge pump IO */
  USB_OTG_BSP_ConfigVBUS(pdev);
 801345c:	6878      	ldr	r0, [r7, #4]
 801345e:	f7ff fc35 	bl	8012ccc <USB_OTG_BSP_ConfigVBUS>
  
  /* Restart the Phy Clock */
  USB_OTG_WRITE_REG32(pdev->regs.PCGCCTL, 0);
 8013462:	687b      	ldr	r3, [r7, #4]
 8013464:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8013468:	2200      	movs	r2, #0
 801346a:	601a      	str	r2, [r3, #0]
  
  /* Initialize Host Configuration Register */
  if (pdev->cfg.phy_itface == USB_OTG_ULPI_PHY)
 801346c:	687b      	ldr	r3, [r7, #4]
 801346e:	7a1b      	ldrb	r3, [r3, #8]
 8013470:	2b01      	cmp	r3, #1
 8013472:	d104      	bne.n	801347e <USB_OTG_CoreInitHost+0x3e>
  {
    USB_OTG_InitFSLSPClkSel(pdev , HCFG_30_60_MHZ); 
 8013474:	2100      	movs	r1, #0
 8013476:	6878      	ldr	r0, [r7, #4]
 8013478:	f000 f8f4 	bl	8013664 <USB_OTG_InitFSLSPClkSel>
 801347c:	e003      	b.n	8013486 <USB_OTG_CoreInitHost+0x46>
  }
  else
  {
    USB_OTG_InitFSLSPClkSel(pdev , HCFG_48_MHZ); 
 801347e:	2101      	movs	r1, #1
 8013480:	6878      	ldr	r0, [r7, #4]
 8013482:	f000 f8ef 	bl	8013664 <USB_OTG_InitFSLSPClkSel>
  }
  USB_OTG_ResetPort(pdev);
 8013486:	6878      	ldr	r0, [r7, #4]
 8013488:	f000 f935 	bl	80136f6 <USB_OTG_ResetPort>
  
  hcfg.d32 = USB_OTG_READ_REG32(&pdev->regs.HREGS->HCFG);
 801348c:	687b      	ldr	r3, [r7, #4]
 801348e:	695b      	ldr	r3, [r3, #20]
 8013490:	681b      	ldr	r3, [r3, #0]
 8013492:	60fb      	str	r3, [r7, #12]
  hcfg.b.fslssupp = 0;
 8013494:	7b3b      	ldrb	r3, [r7, #12]
 8013496:	f36f 0382 	bfc	r3, #2, #1
 801349a:	733b      	strb	r3, [r7, #12]
  USB_OTG_WRITE_REG32(&pdev->regs.HREGS->HCFG, hcfg.d32);
 801349c:	687b      	ldr	r3, [r7, #4]
 801349e:	695b      	ldr	r3, [r3, #20]
 80134a0:	68fa      	ldr	r2, [r7, #12]
 80134a2:	601a      	str	r2, [r3, #0]
    ptxfifosize.b.depth     = TXH_P_FS_FIFOSIZ;
    USB_OTG_WRITE_REG32(&pdev->regs.GREGS->HPTXFSIZ, ptxfifosize.d32);      
  }
#endif
#ifdef USB_OTG_HS_CORE  
  if (pdev->cfg.coreID == USB_OTG_HS_CORE_ID)
 80134a4:	687b      	ldr	r3, [r7, #4]
 80134a6:	7adb      	ldrb	r3, [r3, #11]
 80134a8:	2b00      	cmp	r3, #0
 80134aa:	d119      	bne.n	80134e0 <USB_OTG_CoreInitHost+0xa0>
  {
    /* set Rx FIFO size */
    USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GRXFSIZ, RX_FIFO_HS_SIZE);
 80134ac:	687b      	ldr	r3, [r7, #4]
 80134ae:	68db      	ldr	r3, [r3, #12]
 80134b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80134b4:	625a      	str	r2, [r3, #36]	; 0x24
    nptxfifosize.b.startaddr = RX_FIFO_HS_SIZE;   
 80134b6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80134ba:	82bb      	strh	r3, [r7, #20]
    nptxfifosize.b.depth = TXH_NP_HS_FIFOSIZ;  
 80134bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80134c0:	82fb      	strh	r3, [r7, #22]
    USB_OTG_WRITE_REG32(&pdev->regs.GREGS->DIEPTXF0_HNPTXFSIZ, nptxfifosize.d32);
 80134c2:	687b      	ldr	r3, [r7, #4]
 80134c4:	68db      	ldr	r3, [r3, #12]
 80134c6:	697a      	ldr	r2, [r7, #20]
 80134c8:	629a      	str	r2, [r3, #40]	; 0x28
    
    ptxfifosize.b.startaddr = RX_FIFO_HS_SIZE + TXH_NP_HS_FIFOSIZ;
 80134ca:	f44f 7340 	mov.w	r3, #768	; 0x300
 80134ce:	823b      	strh	r3, [r7, #16]
    ptxfifosize.b.depth     = TXH_P_HS_FIFOSIZ;
 80134d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80134d4:	827b      	strh	r3, [r7, #18]
    USB_OTG_WRITE_REG32(&pdev->regs.GREGS->HPTXFSIZ, ptxfifosize.d32);      
 80134d6:	687b      	ldr	r3, [r7, #4]
 80134d8:	68db      	ldr	r3, [r3, #12]
 80134da:	693a      	ldr	r2, [r7, #16]
 80134dc:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  gotgctl.b.hstsethnpen = 1;
  USB_OTG_MODIFY_REG32( &pdev->regs.GREGS->GOTGCTL, gotgctl.d32, 0);
#endif
  
  /* Make sure the FIFOs are flushed. */
  USB_OTG_FlushTxFifo(pdev, 0x10 );         /* all Tx FIFOs */
 80134e0:	2110      	movs	r1, #16
 80134e2:	6878      	ldr	r0, [r7, #4]
 80134e4:	f7ff fec0 	bl	8013268 <USB_OTG_FlushTxFifo>
  USB_OTG_FlushRxFifo(pdev);
 80134e8:	6878      	ldr	r0, [r7, #4]
 80134ea:	f7ff fef5 	bl	80132d8 <USB_OTG_FlushRxFifo>
  
  
  /* Clear all pending HC Interrupts */
  for (i = 0; i < pdev->cfg.host_channels; i++)
 80134ee:	2300      	movs	r3, #0
 80134f0:	61fb      	str	r3, [r7, #28]
 80134f2:	e013      	b.n	801351c <USB_OTG_CoreInitHost+0xdc>
  {
    USB_OTG_WRITE_REG32( &pdev->regs.HC_REGS[i]->HCINT, 0xFFFFFFFF );
 80134f4:	687a      	ldr	r2, [r7, #4]
 80134f6:	69fb      	ldr	r3, [r7, #28]
 80134f8:	3322      	adds	r3, #34	; 0x22
 80134fa:	009b      	lsls	r3, r3, #2
 80134fc:	4413      	add	r3, r2
 80134fe:	689b      	ldr	r3, [r3, #8]
 8013500:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013504:	609a      	str	r2, [r3, #8]
    USB_OTG_WRITE_REG32( &pdev->regs.HC_REGS[i]->HCINTMSK, 0 );
 8013506:	687a      	ldr	r2, [r7, #4]
 8013508:	69fb      	ldr	r3, [r7, #28]
 801350a:	3322      	adds	r3, #34	; 0x22
 801350c:	009b      	lsls	r3, r3, #2
 801350e:	4413      	add	r3, r2
 8013510:	689b      	ldr	r3, [r3, #8]
 8013512:	2200      	movs	r2, #0
 8013514:	60da      	str	r2, [r3, #12]
  for (i = 0; i < pdev->cfg.host_channels; i++)
 8013516:	69fb      	ldr	r3, [r7, #28]
 8013518:	3301      	adds	r3, #1
 801351a:	61fb      	str	r3, [r7, #28]
 801351c:	687b      	ldr	r3, [r7, #4]
 801351e:	781b      	ldrb	r3, [r3, #0]
 8013520:	461a      	mov	r2, r3
 8013522:	69fb      	ldr	r3, [r7, #28]
 8013524:	4293      	cmp	r3, r2
 8013526:	d3e5      	bcc.n	80134f4 <USB_OTG_CoreInitHost+0xb4>
  }
#ifndef USE_OTG_MODE
  USB_OTG_DriveVbus(pdev, 1);
 8013528:	2101      	movs	r1, #1
 801352a:	6878      	ldr	r0, [r7, #4]
 801352c:	f000 f81c 	bl	8013568 <USB_OTG_DriveVbus>
#endif
  
  USB_OTG_EnableHostInt(pdev);
 8013530:	6878      	ldr	r0, [r7, #4]
 8013532:	f000 f856 	bl	80135e2 <USB_OTG_EnableHostInt>
  return status;
 8013536:	7efb      	ldrb	r3, [r7, #27]
}
 8013538:	4618      	mov	r0, r3
 801353a:	3720      	adds	r7, #32
 801353c:	46bd      	mov	sp, r7
 801353e:	bd80      	pop	{r7, pc}

08013540 <USB_OTG_IsEvenFrame>:
*         This function returns the frame number for sof packet
* @param  pdev : Selected device
* @retval Frame number
*/
uint8_t USB_OTG_IsEvenFrame (USB_OTG_CORE_HANDLE *pdev) 
{
 8013540:	b480      	push	{r7}
 8013542:	b083      	sub	sp, #12
 8013544:	af00      	add	r7, sp, #0
 8013546:	6078      	str	r0, [r7, #4]
  return !(USB_OTG_READ_REG32(&pdev->regs.HREGS->HFNUM) & 0x1);
 8013548:	687b      	ldr	r3, [r7, #4]
 801354a:	695b      	ldr	r3, [r3, #20]
 801354c:	689b      	ldr	r3, [r3, #8]
 801354e:	f003 0301 	and.w	r3, r3, #1
 8013552:	2b00      	cmp	r3, #0
 8013554:	bf0c      	ite	eq
 8013556:	2301      	moveq	r3, #1
 8013558:	2300      	movne	r3, #0
 801355a:	b2db      	uxtb	r3, r3
}
 801355c:	4618      	mov	r0, r3
 801355e:	370c      	adds	r7, #12
 8013560:	46bd      	mov	sp, r7
 8013562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013566:	4770      	bx	lr

08013568 <USB_OTG_DriveVbus>:
* @param  pdev : Selected device
* @param  state : VBUS state
* @retval None
*/
void USB_OTG_DriveVbus (USB_OTG_CORE_HANDLE *pdev, uint8_t state)
{
 8013568:	b580      	push	{r7, lr}
 801356a:	b084      	sub	sp, #16
 801356c:	af00      	add	r7, sp, #0
 801356e:	6078      	str	r0, [r7, #4]
 8013570:	460b      	mov	r3, r1
 8013572:	70fb      	strb	r3, [r7, #3]
  USB_OTG_HPRT0_TypeDef     hprt0;
  
  hprt0.d32 = 0;
 8013574:	2300      	movs	r3, #0
 8013576:	60fb      	str	r3, [r7, #12]
  
  /* enable disable the external charge pump */
  USB_OTG_BSP_DriveVBUS(pdev, state);
 8013578:	78fb      	ldrb	r3, [r7, #3]
 801357a:	4619      	mov	r1, r3
 801357c:	6878      	ldr	r0, [r7, #4]
 801357e:	f7ff fb8c 	bl	8012c9a <USB_OTG_BSP_DriveVBUS>
  
  /* Turn on the Host port power. */
  hprt0.d32 = USB_OTG_ReadHPRT0(pdev);
 8013582:	6878      	ldr	r0, [r7, #4]
 8013584:	f000 f88a 	bl	801369c <USB_OTG_ReadHPRT0>
 8013588:	4603      	mov	r3, r0
 801358a:	60fb      	str	r3, [r7, #12]
  if ((hprt0.b.prtpwr == 0 ) && (state == 1 ))
 801358c:	7b7b      	ldrb	r3, [r7, #13]
 801358e:	f003 0310 	and.w	r3, r3, #16
 8013592:	b2db      	uxtb	r3, r3
 8013594:	2b00      	cmp	r3, #0
 8013596:	d10b      	bne.n	80135b0 <USB_OTG_DriveVbus+0x48>
 8013598:	78fb      	ldrb	r3, [r7, #3]
 801359a:	2b01      	cmp	r3, #1
 801359c:	d108      	bne.n	80135b0 <USB_OTG_DriveVbus+0x48>
  {
    hprt0.b.prtpwr = 1;
 801359e:	7b7b      	ldrb	r3, [r7, #13]
 80135a0:	f043 0310 	orr.w	r3, r3, #16
 80135a4:	737b      	strb	r3, [r7, #13]
    USB_OTG_WRITE_REG32(pdev->regs.HPRT0, hprt0.d32);
 80135a6:	687b      	ldr	r3, [r7, #4]
 80135a8:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 80135ac:	68fa      	ldr	r2, [r7, #12]
 80135ae:	601a      	str	r2, [r3, #0]
  }
  if ((hprt0.b.prtpwr == 1 ) && (state == 0 ))
 80135b0:	7b7b      	ldrb	r3, [r7, #13]
 80135b2:	f003 0310 	and.w	r3, r3, #16
 80135b6:	b2db      	uxtb	r3, r3
 80135b8:	2b00      	cmp	r3, #0
 80135ba:	d00b      	beq.n	80135d4 <USB_OTG_DriveVbus+0x6c>
 80135bc:	78fb      	ldrb	r3, [r7, #3]
 80135be:	2b00      	cmp	r3, #0
 80135c0:	d108      	bne.n	80135d4 <USB_OTG_DriveVbus+0x6c>
  {
    hprt0.b.prtpwr = 0;
 80135c2:	7b7b      	ldrb	r3, [r7, #13]
 80135c4:	f36f 1304 	bfc	r3, #4, #1
 80135c8:	737b      	strb	r3, [r7, #13]
    USB_OTG_WRITE_REG32(pdev->regs.HPRT0, hprt0.d32);
 80135ca:	687b      	ldr	r3, [r7, #4]
 80135cc:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 80135d0:	68fa      	ldr	r2, [r7, #12]
 80135d2:	601a      	str	r2, [r3, #0]
  }
  
  USB_OTG_BSP_mDelay(200);
 80135d4:	20c8      	movs	r0, #200	; 0xc8
 80135d6:	f7ff fbc3 	bl	8012d60 <USB_OTG_BSP_mDelay>
}
 80135da:	bf00      	nop
 80135dc:	3710      	adds	r7, #16
 80135de:	46bd      	mov	sp, r7
 80135e0:	bd80      	pop	{r7, pc}

080135e2 <USB_OTG_EnableHostInt>:
* @brief  USB_OTG_EnableHostInt: Enables the Host mode interrupts
* @param  pdev : Selected device
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_EnableHostInt(USB_OTG_CORE_HANDLE *pdev)
{
 80135e2:	b580      	push	{r7, lr}
 80135e4:	b084      	sub	sp, #16
 80135e6:	af00      	add	r7, sp, #0
 80135e8:	6078      	str	r0, [r7, #4]
  USB_OTG_STS       status = USB_OTG_OK;
 80135ea:	2300      	movs	r3, #0
 80135ec:	73fb      	strb	r3, [r7, #15]
  USB_OTG_GINTMSK_TypeDef  intmsk;
  intmsk.d32 = 0;
 80135ee:	2300      	movs	r3, #0
 80135f0:	60bb      	str	r3, [r7, #8]
  /* Disable all interrupts. */
  USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GINTMSK, 0);
 80135f2:	687b      	ldr	r3, [r7, #4]
 80135f4:	68db      	ldr	r3, [r3, #12]
 80135f6:	2200      	movs	r2, #0
 80135f8:	619a      	str	r2, [r3, #24]
  
  /* Clear any pending interrupts. */
  USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GINTSTS, 0xFFFFFFFF);
 80135fa:	687b      	ldr	r3, [r7, #4]
 80135fc:	68db      	ldr	r3, [r3, #12]
 80135fe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013602:	615a      	str	r2, [r3, #20]
  
  /* Enable the common interrupts */
  USB_OTG_EnableCommonInt(pdev);
 8013604:	6878      	ldr	r0, [r7, #4]
 8013606:	f7ff fbc5 	bl	8012d94 <USB_OTG_EnableCommonInt>
  
  if (pdev->cfg.dma_enable == 0)
 801360a:	687b      	ldr	r3, [r7, #4]
 801360c:	78db      	ldrb	r3, [r3, #3]
 801360e:	2b00      	cmp	r3, #0
 8013610:	d103      	bne.n	801361a <USB_OTG_EnableHostInt+0x38>
  {  
    intmsk.b.rxstsqlvl  = 1;
 8013612:	7a3b      	ldrb	r3, [r7, #8]
 8013614:	f043 0310 	orr.w	r3, r3, #16
 8013618:	723b      	strb	r3, [r7, #8]
  }  
  intmsk.b.portintr   = 1;
 801361a:	7afb      	ldrb	r3, [r7, #11]
 801361c:	f043 0301 	orr.w	r3, r3, #1
 8013620:	72fb      	strb	r3, [r7, #11]
  intmsk.b.hcintr     = 1;
 8013622:	7afb      	ldrb	r3, [r7, #11]
 8013624:	f043 0302 	orr.w	r3, r3, #2
 8013628:	72fb      	strb	r3, [r7, #11]
  intmsk.b.disconnect = 1;  
 801362a:	7afb      	ldrb	r3, [r7, #11]
 801362c:	f043 0320 	orr.w	r3, r3, #32
 8013630:	72fb      	strb	r3, [r7, #11]
  intmsk.b.sofintr    = 1;  
 8013632:	7a3b      	ldrb	r3, [r7, #8]
 8013634:	f043 0308 	orr.w	r3, r3, #8
 8013638:	723b      	strb	r3, [r7, #8]
  intmsk.b.incomplisoout  = 1; 
 801363a:	7abb      	ldrb	r3, [r7, #10]
 801363c:	f043 0320 	orr.w	r3, r3, #32
 8013640:	72bb      	strb	r3, [r7, #10]
  USB_OTG_MODIFY_REG32(&pdev->regs.GREGS->GINTMSK, intmsk.d32, intmsk.d32);
 8013642:	687b      	ldr	r3, [r7, #4]
 8013644:	68db      	ldr	r3, [r3, #12]
 8013646:	699a      	ldr	r2, [r3, #24]
 8013648:	68bb      	ldr	r3, [r7, #8]
 801364a:	43db      	mvns	r3, r3
 801364c:	ea02 0103 	and.w	r1, r2, r3
 8013650:	68ba      	ldr	r2, [r7, #8]
 8013652:	687b      	ldr	r3, [r7, #4]
 8013654:	68db      	ldr	r3, [r3, #12]
 8013656:	430a      	orrs	r2, r1
 8013658:	619a      	str	r2, [r3, #24]
  return status;
 801365a:	7bfb      	ldrb	r3, [r7, #15]
}
 801365c:	4618      	mov	r0, r3
 801365e:	3710      	adds	r7, #16
 8013660:	46bd      	mov	sp, r7
 8013662:	bd80      	pop	{r7, pc}

08013664 <USB_OTG_InitFSLSPClkSel>:
* @param  pdev : Selected device
* @param  freq : clock frequency
* @retval None
*/
void USB_OTG_InitFSLSPClkSel(USB_OTG_CORE_HANDLE *pdev , uint8_t freq)
{
 8013664:	b480      	push	{r7}
 8013666:	b085      	sub	sp, #20
 8013668:	af00      	add	r7, sp, #0
 801366a:	6078      	str	r0, [r7, #4]
 801366c:	460b      	mov	r3, r1
 801366e:	70fb      	strb	r3, [r7, #3]
  USB_OTG_HCFG_TypeDef   hcfg;
  
  hcfg.d32 = USB_OTG_READ_REG32(&pdev->regs.HREGS->HCFG);
 8013670:	687b      	ldr	r3, [r7, #4]
 8013672:	695b      	ldr	r3, [r3, #20]
 8013674:	681b      	ldr	r3, [r3, #0]
 8013676:	60fb      	str	r3, [r7, #12]
  hcfg.b.fslspclksel = freq;
 8013678:	78fb      	ldrb	r3, [r7, #3]
 801367a:	f003 0303 	and.w	r3, r3, #3
 801367e:	b2da      	uxtb	r2, r3
 8013680:	7b3b      	ldrb	r3, [r7, #12]
 8013682:	f362 0301 	bfi	r3, r2, #0, #2
 8013686:	733b      	strb	r3, [r7, #12]
  USB_OTG_WRITE_REG32(&pdev->regs.HREGS->HCFG, hcfg.d32);
 8013688:	687b      	ldr	r3, [r7, #4]
 801368a:	695b      	ldr	r3, [r3, #20]
 801368c:	68fa      	ldr	r2, [r7, #12]
 801368e:	601a      	str	r2, [r3, #0]
}
 8013690:	bf00      	nop
 8013692:	3714      	adds	r7, #20
 8013694:	46bd      	mov	sp, r7
 8013696:	f85d 7b04 	ldr.w	r7, [sp], #4
 801369a:	4770      	bx	lr

0801369c <USB_OTG_ReadHPRT0>:
* @brief  USB_OTG_ReadHPRT0 : Reads HPRT0 to modify later
* @param  pdev : Selected device
* @retval HPRT0 value
*/
uint32_t USB_OTG_ReadHPRT0(USB_OTG_CORE_HANDLE *pdev)
{
 801369c:	b480      	push	{r7}
 801369e:	b085      	sub	sp, #20
 80136a0:	af00      	add	r7, sp, #0
 80136a2:	6078      	str	r0, [r7, #4]
  USB_OTG_HPRT0_TypeDef  hprt0;
  
  hprt0.d32 = USB_OTG_READ_REG32(pdev->regs.HPRT0);
 80136a4:	687b      	ldr	r3, [r7, #4]
 80136a6:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 80136aa:	681b      	ldr	r3, [r3, #0]
 80136ac:	60fb      	str	r3, [r7, #12]
  hprt0.b.prtena = 0;
 80136ae:	7b3b      	ldrb	r3, [r7, #12]
 80136b0:	f36f 0382 	bfc	r3, #2, #1
 80136b4:	733b      	strb	r3, [r7, #12]
  hprt0.b.prtconndet = 0;
 80136b6:	7b3b      	ldrb	r3, [r7, #12]
 80136b8:	f36f 0341 	bfc	r3, #1, #1
 80136bc:	733b      	strb	r3, [r7, #12]
  hprt0.b.prtenchng = 0;
 80136be:	7b3b      	ldrb	r3, [r7, #12]
 80136c0:	f36f 03c3 	bfc	r3, #3, #1
 80136c4:	733b      	strb	r3, [r7, #12]
  hprt0.b.prtovrcurrchng = 0;
 80136c6:	7b3b      	ldrb	r3, [r7, #12]
 80136c8:	f36f 1345 	bfc	r3, #5, #1
 80136cc:	733b      	strb	r3, [r7, #12]
  return hprt0.d32;
 80136ce:	68fb      	ldr	r3, [r7, #12]
}
 80136d0:	4618      	mov	r0, r3
 80136d2:	3714      	adds	r7, #20
 80136d4:	46bd      	mov	sp, r7
 80136d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136da:	4770      	bx	lr

080136dc <USB_OTG_ReadHostAllChannels_intr>:
* @brief  USB_OTG_ReadHostAllChannels_intr : Register PCD Callbacks
* @param  pdev : Selected device
* @retval Status
*/
uint32_t USB_OTG_ReadHostAllChannels_intr (USB_OTG_CORE_HANDLE *pdev)
{
 80136dc:	b480      	push	{r7}
 80136de:	b083      	sub	sp, #12
 80136e0:	af00      	add	r7, sp, #0
 80136e2:	6078      	str	r0, [r7, #4]
  return (USB_OTG_READ_REG32 (&pdev->regs.HREGS->HAINT));
 80136e4:	687b      	ldr	r3, [r7, #4]
 80136e6:	695b      	ldr	r3, [r3, #20]
 80136e8:	695b      	ldr	r3, [r3, #20]
}
 80136ea:	4618      	mov	r0, r3
 80136ec:	370c      	adds	r7, #12
 80136ee:	46bd      	mov	sp, r7
 80136f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136f4:	4770      	bx	lr

080136f6 <USB_OTG_ResetPort>:
* @retval status
* @note : (1)The application must wait at least 10 ms (+ 10 ms security)
*   before clearing the reset bit.
*/
uint32_t USB_OTG_ResetPort(USB_OTG_CORE_HANDLE *pdev)
{
 80136f6:	b580      	push	{r7, lr}
 80136f8:	b084      	sub	sp, #16
 80136fa:	af00      	add	r7, sp, #0
 80136fc:	6078      	str	r0, [r7, #4]
  USB_OTG_HPRT0_TypeDef  hprt0;
  
  hprt0.d32 = USB_OTG_ReadHPRT0(pdev);
 80136fe:	6878      	ldr	r0, [r7, #4]
 8013700:	f7ff ffcc 	bl	801369c <USB_OTG_ReadHPRT0>
 8013704:	4603      	mov	r3, r0
 8013706:	60fb      	str	r3, [r7, #12]
  hprt0.b.prtrst = 1;
 8013708:	7b7b      	ldrb	r3, [r7, #13]
 801370a:	f043 0301 	orr.w	r3, r3, #1
 801370e:	737b      	strb	r3, [r7, #13]
  USB_OTG_WRITE_REG32(pdev->regs.HPRT0, hprt0.d32);
 8013710:	687b      	ldr	r3, [r7, #4]
 8013712:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8013716:	68fa      	ldr	r2, [r7, #12]
 8013718:	601a      	str	r2, [r3, #0]
  USB_OTG_BSP_mDelay (10);                                /* See Note #1 */
 801371a:	200a      	movs	r0, #10
 801371c:	f7ff fb20 	bl	8012d60 <USB_OTG_BSP_mDelay>
  hprt0.b.prtrst = 0;
 8013720:	7b7b      	ldrb	r3, [r7, #13]
 8013722:	f36f 0300 	bfc	r3, #0, #1
 8013726:	737b      	strb	r3, [r7, #13]
  USB_OTG_WRITE_REG32(pdev->regs.HPRT0, hprt0.d32);
 8013728:	687b      	ldr	r3, [r7, #4]
 801372a:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 801372e:	68fa      	ldr	r2, [r7, #12]
 8013730:	601a      	str	r2, [r3, #0]
  USB_OTG_BSP_mDelay (20);   
 8013732:	2014      	movs	r0, #20
 8013734:	f7ff fb14 	bl	8012d60 <USB_OTG_BSP_mDelay>
  return 1;
 8013738:	2301      	movs	r3, #1
}
 801373a:	4618      	mov	r0, r3
 801373c:	3710      	adds	r7, #16
 801373e:	46bd      	mov	sp, r7
 8013740:	bd80      	pop	{r7, pc}

08013742 <USB_OTG_HC_Init>:
* @param  pdev : Selected device
* @param  hc_num : channel number
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_HC_Init(USB_OTG_CORE_HANDLE *pdev , uint8_t hc_num)
{
 8013742:	b480      	push	{r7}
 8013744:	b089      	sub	sp, #36	; 0x24
 8013746:	af00      	add	r7, sp, #0
 8013748:	6078      	str	r0, [r7, #4]
 801374a:	460b      	mov	r3, r1
 801374c:	70fb      	strb	r3, [r7, #3]
  USB_OTG_STS status = USB_OTG_OK;
 801374e:	2300      	movs	r3, #0
 8013750:	77fb      	strb	r3, [r7, #31]
  uint32_t intr_enable = 0;
 8013752:	2300      	movs	r3, #0
 8013754:	61bb      	str	r3, [r7, #24]
  USB_OTG_GINTMSK_TypeDef    gintmsk;
  USB_OTG_HCCHAR_TypeDef     hcchar;
  USB_OTG_HCINTn_TypeDef     hcint;
  
  
  gintmsk.d32 = 0;
 8013756:	2300      	movs	r3, #0
 8013758:	613b      	str	r3, [r7, #16]
  hcintmsk.d32 = 0;
 801375a:	2300      	movs	r3, #0
 801375c:	617b      	str	r3, [r7, #20]
  hcchar.d32 = 0;
 801375e:	2300      	movs	r3, #0
 8013760:	60fb      	str	r3, [r7, #12]
  
  /* Clear old interrupt conditions for this host channel. */
  hcint.d32 = 0xFFFFFFFF;
 8013762:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013766:	60bb      	str	r3, [r7, #8]
  USB_OTG_WRITE_REG32(&pdev->regs.HC_REGS[hc_num]->HCINT, hcint.d32);
 8013768:	78fb      	ldrb	r3, [r7, #3]
 801376a:	687a      	ldr	r2, [r7, #4]
 801376c:	3322      	adds	r3, #34	; 0x22
 801376e:	009b      	lsls	r3, r3, #2
 8013770:	4413      	add	r3, r2
 8013772:	689b      	ldr	r3, [r3, #8]
 8013774:	68ba      	ldr	r2, [r7, #8]
 8013776:	609a      	str	r2, [r3, #8]
  
  /* Enable channel interrupts required for this transfer. */
  hcintmsk.d32 = 0;
 8013778:	2300      	movs	r3, #0
 801377a:	617b      	str	r3, [r7, #20]
  
  if (pdev->cfg.dma_enable == 1)
 801377c:	687b      	ldr	r3, [r7, #4]
 801377e:	78db      	ldrb	r3, [r3, #3]
 8013780:	2b01      	cmp	r3, #1
 8013782:	d103      	bne.n	801378c <USB_OTG_HC_Init+0x4a>
  {
    hcintmsk.b.ahberr = 1;
 8013784:	7d3b      	ldrb	r3, [r7, #20]
 8013786:	f043 0304 	orr.w	r3, r3, #4
 801378a:	753b      	strb	r3, [r7, #20]
  }
  
  switch (pdev->host.hc[hc_num].ep_type) 
 801378c:	78fb      	ldrb	r3, [r7, #3]
 801378e:	687a      	ldr	r2, [r7, #4]
 8013790:	015b      	lsls	r3, r3, #5
 8013792:	4413      	add	r3, r2
 8013794:	f203 33b1 	addw	r3, r3, #945	; 0x3b1
 8013798:	781b      	ldrb	r3, [r3, #0]
 801379a:	2b03      	cmp	r3, #3
 801379c:	f200 8089 	bhi.w	80138b2 <USB_OTG_HC_Init+0x170>
 80137a0:	a201      	add	r2, pc, #4	; (adr r2, 80137a8 <USB_OTG_HC_Init+0x66>)
 80137a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80137a6:	bf00      	nop
 80137a8:	080137b9 	.word	0x080137b9
 80137ac:	0801386d 	.word	0x0801386d
 80137b0:	080137b9 	.word	0x080137b9
 80137b4:	08013821 	.word	0x08013821
  {
  case EP_TYPE_CTRL:
  case EP_TYPE_BULK:
    hcintmsk.b.xfercompl = 1;
 80137b8:	7d3b      	ldrb	r3, [r7, #20]
 80137ba:	f043 0301 	orr.w	r3, r3, #1
 80137be:	753b      	strb	r3, [r7, #20]
    hcintmsk.b.stall = 1;
 80137c0:	7d3b      	ldrb	r3, [r7, #20]
 80137c2:	f043 0308 	orr.w	r3, r3, #8
 80137c6:	753b      	strb	r3, [r7, #20]
    hcintmsk.b.xacterr = 1;
 80137c8:	7d3b      	ldrb	r3, [r7, #20]
 80137ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80137ce:	753b      	strb	r3, [r7, #20]
    hcintmsk.b.datatglerr = 1;
 80137d0:	7d7b      	ldrb	r3, [r7, #21]
 80137d2:	f043 0304 	orr.w	r3, r3, #4
 80137d6:	757b      	strb	r3, [r7, #21]
    hcintmsk.b.nak = 1;  
 80137d8:	7d3b      	ldrb	r3, [r7, #20]
 80137da:	f043 0310 	orr.w	r3, r3, #16
 80137de:	753b      	strb	r3, [r7, #20]
    if (pdev->host.hc[hc_num].ep_is_in) 
 80137e0:	78fb      	ldrb	r3, [r7, #3]
 80137e2:	687a      	ldr	r2, [r7, #4]
 80137e4:	015b      	lsls	r3, r3, #5
 80137e6:	4413      	add	r3, r2
 80137e8:	f203 33ae 	addw	r3, r3, #942	; 0x3ae
 80137ec:	781b      	ldrb	r3, [r3, #0]
 80137ee:	2b00      	cmp	r3, #0
 80137f0:	d004      	beq.n	80137fc <USB_OTG_HC_Init+0xba>
    {
      hcintmsk.b.bblerr = 1;
 80137f2:	7d7b      	ldrb	r3, [r7, #21]
 80137f4:	f043 0301 	orr.w	r3, r3, #1
 80137f8:	757b      	strb	r3, [r7, #21]
      if (pdev->host.hc[hc_num].do_ping) 
      {
        hcintmsk.b.ack = 1;
      }
    }
    break;
 80137fa:	e055      	b.n	80138a8 <USB_OTG_HC_Init+0x166>
      hcintmsk.b.nyet = 1;
 80137fc:	7d3b      	ldrb	r3, [r7, #20]
 80137fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013802:	753b      	strb	r3, [r7, #20]
      if (pdev->host.hc[hc_num].do_ping) 
 8013804:	78fb      	ldrb	r3, [r7, #3]
 8013806:	687a      	ldr	r2, [r7, #4]
 8013808:	015b      	lsls	r3, r3, #5
 801380a:	4413      	add	r3, r2
 801380c:	f503 736c 	add.w	r3, r3, #944	; 0x3b0
 8013810:	781b      	ldrb	r3, [r3, #0]
 8013812:	2b00      	cmp	r3, #0
 8013814:	d048      	beq.n	80138a8 <USB_OTG_HC_Init+0x166>
        hcintmsk.b.ack = 1;
 8013816:	7d3b      	ldrb	r3, [r7, #20]
 8013818:	f043 0320 	orr.w	r3, r3, #32
 801381c:	753b      	strb	r3, [r7, #20]
    break;
 801381e:	e043      	b.n	80138a8 <USB_OTG_HC_Init+0x166>
  case EP_TYPE_INTR:
    hcintmsk.b.xfercompl = 1;
 8013820:	7d3b      	ldrb	r3, [r7, #20]
 8013822:	f043 0301 	orr.w	r3, r3, #1
 8013826:	753b      	strb	r3, [r7, #20]
    hcintmsk.b.nak = 1;
 8013828:	7d3b      	ldrb	r3, [r7, #20]
 801382a:	f043 0310 	orr.w	r3, r3, #16
 801382e:	753b      	strb	r3, [r7, #20]
    hcintmsk.b.stall = 1;
 8013830:	7d3b      	ldrb	r3, [r7, #20]
 8013832:	f043 0308 	orr.w	r3, r3, #8
 8013836:	753b      	strb	r3, [r7, #20]
    hcintmsk.b.xacterr = 1;
 8013838:	7d3b      	ldrb	r3, [r7, #20]
 801383a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801383e:	753b      	strb	r3, [r7, #20]
    hcintmsk.b.datatglerr = 1;
 8013840:	7d7b      	ldrb	r3, [r7, #21]
 8013842:	f043 0304 	orr.w	r3, r3, #4
 8013846:	757b      	strb	r3, [r7, #21]
    hcintmsk.b.frmovrun = 1;
 8013848:	7d7b      	ldrb	r3, [r7, #21]
 801384a:	f043 0302 	orr.w	r3, r3, #2
 801384e:	757b      	strb	r3, [r7, #21]
    
    if (pdev->host.hc[hc_num].ep_is_in) 
 8013850:	78fb      	ldrb	r3, [r7, #3]
 8013852:	687a      	ldr	r2, [r7, #4]
 8013854:	015b      	lsls	r3, r3, #5
 8013856:	4413      	add	r3, r2
 8013858:	f203 33ae 	addw	r3, r3, #942	; 0x3ae
 801385c:	781b      	ldrb	r3, [r3, #0]
 801385e:	2b00      	cmp	r3, #0
 8013860:	d024      	beq.n	80138ac <USB_OTG_HC_Init+0x16a>
    {
      hcintmsk.b.bblerr = 1;
 8013862:	7d7b      	ldrb	r3, [r7, #21]
 8013864:	f043 0301 	orr.w	r3, r3, #1
 8013868:	757b      	strb	r3, [r7, #21]
    }
    
    break;
 801386a:	e01f      	b.n	80138ac <USB_OTG_HC_Init+0x16a>
  case EP_TYPE_ISOC:
    hcintmsk.b.xfercompl = 1;
 801386c:	7d3b      	ldrb	r3, [r7, #20]
 801386e:	f043 0301 	orr.w	r3, r3, #1
 8013872:	753b      	strb	r3, [r7, #20]
    hcintmsk.b.frmovrun = 1;
 8013874:	7d7b      	ldrb	r3, [r7, #21]
 8013876:	f043 0302 	orr.w	r3, r3, #2
 801387a:	757b      	strb	r3, [r7, #21]
    hcintmsk.b.ack = 1;
 801387c:	7d3b      	ldrb	r3, [r7, #20]
 801387e:	f043 0320 	orr.w	r3, r3, #32
 8013882:	753b      	strb	r3, [r7, #20]
    
    if (pdev->host.hc[hc_num].ep_is_in) 
 8013884:	78fb      	ldrb	r3, [r7, #3]
 8013886:	687a      	ldr	r2, [r7, #4]
 8013888:	015b      	lsls	r3, r3, #5
 801388a:	4413      	add	r3, r2
 801388c:	f203 33ae 	addw	r3, r3, #942	; 0x3ae
 8013890:	781b      	ldrb	r3, [r3, #0]
 8013892:	2b00      	cmp	r3, #0
 8013894:	d00c      	beq.n	80138b0 <USB_OTG_HC_Init+0x16e>
    {
      hcintmsk.b.xacterr = 1;
 8013896:	7d3b      	ldrb	r3, [r7, #20]
 8013898:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801389c:	753b      	strb	r3, [r7, #20]
      hcintmsk.b.bblerr = 1;
 801389e:	7d7b      	ldrb	r3, [r7, #21]
 80138a0:	f043 0301 	orr.w	r3, r3, #1
 80138a4:	757b      	strb	r3, [r7, #21]
    }
    break;
 80138a6:	e003      	b.n	80138b0 <USB_OTG_HC_Init+0x16e>
    break;
 80138a8:	bf00      	nop
 80138aa:	e002      	b.n	80138b2 <USB_OTG_HC_Init+0x170>
    break;
 80138ac:	bf00      	nop
 80138ae:	e000      	b.n	80138b2 <USB_OTG_HC_Init+0x170>
    break;
 80138b0:	bf00      	nop
  }
  
  
  USB_OTG_WRITE_REG32(&pdev->regs.HC_REGS[hc_num]->HCINTMSK, hcintmsk.d32);
 80138b2:	78fb      	ldrb	r3, [r7, #3]
 80138b4:	687a      	ldr	r2, [r7, #4]
 80138b6:	3322      	adds	r3, #34	; 0x22
 80138b8:	009b      	lsls	r3, r3, #2
 80138ba:	4413      	add	r3, r2
 80138bc:	689b      	ldr	r3, [r3, #8]
 80138be:	697a      	ldr	r2, [r7, #20]
 80138c0:	60da      	str	r2, [r3, #12]
  
  
  /* Enable the top level host channel interrupt. */
  intr_enable = (1 << hc_num);
 80138c2:	78fb      	ldrb	r3, [r7, #3]
 80138c4:	2201      	movs	r2, #1
 80138c6:	fa02 f303 	lsl.w	r3, r2, r3
 80138ca:	61bb      	str	r3, [r7, #24]
  USB_OTG_MODIFY_REG32(&pdev->regs.HREGS->HAINTMSK, 0, intr_enable);
 80138cc:	687b      	ldr	r3, [r7, #4]
 80138ce:	695b      	ldr	r3, [r3, #20]
 80138d0:	6999      	ldr	r1, [r3, #24]
 80138d2:	687b      	ldr	r3, [r7, #4]
 80138d4:	695b      	ldr	r3, [r3, #20]
 80138d6:	69ba      	ldr	r2, [r7, #24]
 80138d8:	430a      	orrs	r2, r1
 80138da:	619a      	str	r2, [r3, #24]
  
  /* Make sure host channel interrupts are enabled. */
  gintmsk.b.hcintr = 1;
 80138dc:	7cfb      	ldrb	r3, [r7, #19]
 80138de:	f043 0302 	orr.w	r3, r3, #2
 80138e2:	74fb      	strb	r3, [r7, #19]
  USB_OTG_MODIFY_REG32(&pdev->regs.GREGS->GINTMSK, 0, gintmsk.d32);
 80138e4:	687b      	ldr	r3, [r7, #4]
 80138e6:	68db      	ldr	r3, [r3, #12]
 80138e8:	6999      	ldr	r1, [r3, #24]
 80138ea:	693a      	ldr	r2, [r7, #16]
 80138ec:	687b      	ldr	r3, [r7, #4]
 80138ee:	68db      	ldr	r3, [r3, #12]
 80138f0:	430a      	orrs	r2, r1
 80138f2:	619a      	str	r2, [r3, #24]
  
  /* Program the HCCHAR register */
  hcchar.d32 = 0;
 80138f4:	2300      	movs	r3, #0
 80138f6:	60fb      	str	r3, [r7, #12]
  hcchar.b.devaddr = pdev->host.hc[hc_num].dev_addr;
 80138f8:	78fb      	ldrb	r3, [r7, #3]
 80138fa:	687a      	ldr	r2, [r7, #4]
 80138fc:	015b      	lsls	r3, r3, #5
 80138fe:	4413      	add	r3, r2
 8013900:	f503 736b 	add.w	r3, r3, #940	; 0x3ac
 8013904:	781b      	ldrb	r3, [r3, #0]
 8013906:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801390a:	b2da      	uxtb	r2, r3
 801390c:	89fb      	ldrh	r3, [r7, #14]
 801390e:	f362 138c 	bfi	r3, r2, #6, #7
 8013912:	81fb      	strh	r3, [r7, #14]
  hcchar.b.epnum   = pdev->host.hc[hc_num].ep_num;
 8013914:	78fb      	ldrb	r3, [r7, #3]
 8013916:	687a      	ldr	r2, [r7, #4]
 8013918:	015b      	lsls	r3, r3, #5
 801391a:	4413      	add	r3, r2
 801391c:	f203 33ad 	addw	r3, r3, #941	; 0x3ad
 8013920:	781b      	ldrb	r3, [r3, #0]
 8013922:	f003 030f 	and.w	r3, r3, #15
 8013926:	b2da      	uxtb	r2, r3
 8013928:	7b7b      	ldrb	r3, [r7, #13]
 801392a:	f362 03c6 	bfi	r3, r2, #3, #4
 801392e:	737b      	strb	r3, [r7, #13]
  hcchar.b.epdir   = pdev->host.hc[hc_num].ep_is_in;
 8013930:	78fb      	ldrb	r3, [r7, #3]
 8013932:	687a      	ldr	r2, [r7, #4]
 8013934:	015b      	lsls	r3, r3, #5
 8013936:	4413      	add	r3, r2
 8013938:	f203 33ae 	addw	r3, r3, #942	; 0x3ae
 801393c:	781b      	ldrb	r3, [r3, #0]
 801393e:	f003 0301 	and.w	r3, r3, #1
 8013942:	b2da      	uxtb	r2, r3
 8013944:	7b7b      	ldrb	r3, [r7, #13]
 8013946:	f362 13c7 	bfi	r3, r2, #7, #1
 801394a:	737b      	strb	r3, [r7, #13]
  hcchar.b.lspddev = (pdev->host.hc[hc_num].speed == HPRT0_PRTSPD_LOW_SPEED);
 801394c:	78fb      	ldrb	r3, [r7, #3]
 801394e:	687a      	ldr	r2, [r7, #4]
 8013950:	015b      	lsls	r3, r3, #5
 8013952:	4413      	add	r3, r2
 8013954:	f203 33af 	addw	r3, r3, #943	; 0x3af
 8013958:	781b      	ldrb	r3, [r3, #0]
 801395a:	2b02      	cmp	r3, #2
 801395c:	bf0c      	ite	eq
 801395e:	2301      	moveq	r3, #1
 8013960:	2300      	movne	r3, #0
 8013962:	b2da      	uxtb	r2, r3
 8013964:	7bbb      	ldrb	r3, [r7, #14]
 8013966:	f362 0341 	bfi	r3, r2, #1, #1
 801396a:	73bb      	strb	r3, [r7, #14]
  hcchar.b.eptype  = pdev->host.hc[hc_num].ep_type;
 801396c:	78fb      	ldrb	r3, [r7, #3]
 801396e:	687a      	ldr	r2, [r7, #4]
 8013970:	015b      	lsls	r3, r3, #5
 8013972:	4413      	add	r3, r2
 8013974:	f203 33b1 	addw	r3, r3, #945	; 0x3b1
 8013978:	781b      	ldrb	r3, [r3, #0]
 801397a:	f003 0303 	and.w	r3, r3, #3
 801397e:	b2da      	uxtb	r2, r3
 8013980:	7bbb      	ldrb	r3, [r7, #14]
 8013982:	f362 0383 	bfi	r3, r2, #2, #2
 8013986:	73bb      	strb	r3, [r7, #14]
  hcchar.b.mps     = pdev->host.hc[hc_num].max_packet;
 8013988:	78fb      	ldrb	r3, [r7, #3]
 801398a:	687a      	ldr	r2, [r7, #4]
 801398c:	015b      	lsls	r3, r3, #5
 801398e:	4413      	add	r3, r2
 8013990:	f203 33b2 	addw	r3, r3, #946	; 0x3b2
 8013994:	881b      	ldrh	r3, [r3, #0]
 8013996:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801399a:	b29a      	uxth	r2, r3
 801399c:	89bb      	ldrh	r3, [r7, #12]
 801399e:	f362 030a 	bfi	r3, r2, #0, #11
 80139a2:	81bb      	strh	r3, [r7, #12]
  if (pdev->host.hc[hc_num].ep_type == HCCHAR_INTR)
 80139a4:	78fb      	ldrb	r3, [r7, #3]
 80139a6:	687a      	ldr	r2, [r7, #4]
 80139a8:	015b      	lsls	r3, r3, #5
 80139aa:	4413      	add	r3, r2
 80139ac:	f203 33b1 	addw	r3, r3, #945	; 0x3b1
 80139b0:	781b      	ldrb	r3, [r3, #0]
 80139b2:	2b03      	cmp	r3, #3
 80139b4:	d103      	bne.n	80139be <USB_OTG_HC_Init+0x27c>
  {
    hcchar.b.oddfrm  = 1;
 80139b6:	7bfb      	ldrb	r3, [r7, #15]
 80139b8:	f043 0320 	orr.w	r3, r3, #32
 80139bc:	73fb      	strb	r3, [r7, #15]
  }
  USB_OTG_WRITE_REG32(&pdev->regs.HC_REGS[hc_num]->HCCHAR, hcchar.d32);
 80139be:	78fb      	ldrb	r3, [r7, #3]
 80139c0:	687a      	ldr	r2, [r7, #4]
 80139c2:	3322      	adds	r3, #34	; 0x22
 80139c4:	009b      	lsls	r3, r3, #2
 80139c6:	4413      	add	r3, r2
 80139c8:	689b      	ldr	r3, [r3, #8]
 80139ca:	68fa      	ldr	r2, [r7, #12]
 80139cc:	601a      	str	r2, [r3, #0]
  return status;
 80139ce:	7ffb      	ldrb	r3, [r7, #31]
}
 80139d0:	4618      	mov	r0, r3
 80139d2:	3724      	adds	r7, #36	; 0x24
 80139d4:	46bd      	mov	sp, r7
 80139d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139da:	4770      	bx	lr

080139dc <USB_OTG_HC_StartXfer>:
* @param  pdev : Selected device
* @param  hc_num : channel number
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_HC_StartXfer(USB_OTG_CORE_HANDLE *pdev , uint8_t hc_num)
{
 80139dc:	b580      	push	{r7, lr}
 80139de:	b08c      	sub	sp, #48	; 0x30
 80139e0:	af00      	add	r7, sp, #0
 80139e2:	6078      	str	r0, [r7, #4]
 80139e4:	460b      	mov	r3, r1
 80139e6:	70fb      	strb	r3, [r7, #3]
  USB_OTG_STS status = USB_OTG_OK;
 80139e8:	2300      	movs	r3, #0
 80139ea:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  USB_OTG_HCCHAR_TypeDef   hcchar;
  USB_OTG_HCTSIZn_TypeDef  hctsiz;
  USB_OTG_HNPTXSTS_TypeDef hnptxsts; 
  USB_OTG_HPTXSTS_TypeDef  hptxsts; 
  USB_OTG_GINTMSK_TypeDef  intmsk;
  uint16_t                 len_words = 0;   
 80139ee:	2300      	movs	r3, #0
 80139f0:	857b      	strh	r3, [r7, #42]	; 0x2a
  
  uint16_t num_packets;
  uint16_t max_hc_pkt_count;
  
  max_hc_pkt_count = 256;
 80139f2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80139f6:	853b      	strh	r3, [r7, #40]	; 0x28
  hctsiz.d32 = 0;
 80139f8:	2300      	movs	r3, #0
 80139fa:	623b      	str	r3, [r7, #32]
  hcchar.d32 = 0;
 80139fc:	2300      	movs	r3, #0
 80139fe:	627b      	str	r3, [r7, #36]	; 0x24
  intmsk.d32 = 0;
 8013a00:	2300      	movs	r3, #0
 8013a02:	60bb      	str	r3, [r7, #8]
  
  /* Compute the expected number of packets associated to the transfer */
  if (pdev->host.hc[hc_num].xfer_len > 0)
 8013a04:	78fb      	ldrb	r3, [r7, #3]
 8013a06:	687a      	ldr	r2, [r7, #4]
 8013a08:	015b      	lsls	r3, r3, #5
 8013a0a:	4413      	add	r3, r2
 8013a0c:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 8013a10:	681b      	ldr	r3, [r3, #0]
 8013a12:	2b00      	cmp	r3, #0
 8013a14:	d032      	beq.n	8013a7c <USB_OTG_HC_StartXfer+0xa0>
  {
    num_packets = (pdev->host.hc[hc_num].xfer_len + \
 8013a16:	78fb      	ldrb	r3, [r7, #3]
 8013a18:	687a      	ldr	r2, [r7, #4]
 8013a1a:	015b      	lsls	r3, r3, #5
 8013a1c:	4413      	add	r3, r2
 8013a1e:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 8013a22:	681b      	ldr	r3, [r3, #0]
      pdev->host.hc[hc_num].max_packet - 1) / pdev->host.hc[hc_num].max_packet;
 8013a24:	78fa      	ldrb	r2, [r7, #3]
 8013a26:	6879      	ldr	r1, [r7, #4]
 8013a28:	0152      	lsls	r2, r2, #5
 8013a2a:	440a      	add	r2, r1
 8013a2c:	f202 32b2 	addw	r2, r2, #946	; 0x3b2
 8013a30:	8812      	ldrh	r2, [r2, #0]
    num_packets = (pdev->host.hc[hc_num].xfer_len + \
 8013a32:	4413      	add	r3, r2
      pdev->host.hc[hc_num].max_packet - 1) / pdev->host.hc[hc_num].max_packet;
 8013a34:	3b01      	subs	r3, #1
 8013a36:	78fa      	ldrb	r2, [r7, #3]
 8013a38:	6879      	ldr	r1, [r7, #4]
 8013a3a:	0152      	lsls	r2, r2, #5
 8013a3c:	440a      	add	r2, r1
 8013a3e:	f202 32b2 	addw	r2, r2, #946	; 0x3b2
 8013a42:	8812      	ldrh	r2, [r2, #0]
 8013a44:	fbb3 f3f2 	udiv	r3, r3, r2
    num_packets = (pdev->host.hc[hc_num].xfer_len + \
 8013a48:	85fb      	strh	r3, [r7, #46]	; 0x2e
    
    if (num_packets > max_hc_pkt_count)
 8013a4a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8013a4c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8013a4e:	429a      	cmp	r2, r3
 8013a50:	d916      	bls.n	8013a80 <USB_OTG_HC_StartXfer+0xa4>
    {
      num_packets = max_hc_pkt_count;
 8013a52:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8013a54:	85fb      	strh	r3, [r7, #46]	; 0x2e
      pdev->host.hc[hc_num].xfer_len = num_packets * \
 8013a56:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
        pdev->host.hc[hc_num].max_packet;
 8013a58:	78fa      	ldrb	r2, [r7, #3]
 8013a5a:	6879      	ldr	r1, [r7, #4]
 8013a5c:	0152      	lsls	r2, r2, #5
 8013a5e:	440a      	add	r2, r1
 8013a60:	f202 32b2 	addw	r2, r2, #946	; 0x3b2
 8013a64:	8812      	ldrh	r2, [r2, #0]
      pdev->host.hc[hc_num].xfer_len = num_packets * \
 8013a66:	fb02 f203 	mul.w	r2, r2, r3
 8013a6a:	78fb      	ldrb	r3, [r7, #3]
 8013a6c:	4611      	mov	r1, r2
 8013a6e:	687a      	ldr	r2, [r7, #4]
 8013a70:	015b      	lsls	r3, r3, #5
 8013a72:	4413      	add	r3, r2
 8013a74:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 8013a78:	6019      	str	r1, [r3, #0]
 8013a7a:	e001      	b.n	8013a80 <USB_OTG_HC_StartXfer+0xa4>
    }
  }
  else
  {
    num_packets = 1;
 8013a7c:	2301      	movs	r3, #1
 8013a7e:	85fb      	strh	r3, [r7, #46]	; 0x2e
  }
  if (pdev->host.hc[hc_num].ep_is_in)
 8013a80:	78fb      	ldrb	r3, [r7, #3]
 8013a82:	687a      	ldr	r2, [r7, #4]
 8013a84:	015b      	lsls	r3, r3, #5
 8013a86:	4413      	add	r3, r2
 8013a88:	f203 33ae 	addw	r3, r3, #942	; 0x3ae
 8013a8c:	781b      	ldrb	r3, [r3, #0]
 8013a8e:	2b00      	cmp	r3, #0
 8013a90:	d011      	beq.n	8013ab6 <USB_OTG_HC_StartXfer+0xda>
  {
    pdev->host.hc[hc_num].xfer_len = num_packets * \
 8013a92:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
      pdev->host.hc[hc_num].max_packet;
 8013a94:	78fa      	ldrb	r2, [r7, #3]
 8013a96:	6879      	ldr	r1, [r7, #4]
 8013a98:	0152      	lsls	r2, r2, #5
 8013a9a:	440a      	add	r2, r1
 8013a9c:	f202 32b2 	addw	r2, r2, #946	; 0x3b2
 8013aa0:	8812      	ldrh	r2, [r2, #0]
    pdev->host.hc[hc_num].xfer_len = num_packets * \
 8013aa2:	fb02 f203 	mul.w	r2, r2, r3
 8013aa6:	78fb      	ldrb	r3, [r7, #3]
 8013aa8:	4611      	mov	r1, r2
 8013aaa:	687a      	ldr	r2, [r7, #4]
 8013aac:	015b      	lsls	r3, r3, #5
 8013aae:	4413      	add	r3, r2
 8013ab0:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 8013ab4:	6019      	str	r1, [r3, #0]
  }
  /* Initialize the HCTSIZn register */
  hctsiz.b.xfersize = pdev->host.hc[hc_num].xfer_len;
 8013ab6:	78fb      	ldrb	r3, [r7, #3]
 8013ab8:	687a      	ldr	r2, [r7, #4]
 8013aba:	015b      	lsls	r3, r3, #5
 8013abc:	4413      	add	r3, r2
 8013abe:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 8013ac2:	681b      	ldr	r3, [r3, #0]
 8013ac4:	f3c3 0212 	ubfx	r2, r3, #0, #19
 8013ac8:	6a3b      	ldr	r3, [r7, #32]
 8013aca:	f362 0312 	bfi	r3, r2, #0, #19
 8013ace:	623b      	str	r3, [r7, #32]
  hctsiz.b.pktcnt = num_packets;
 8013ad0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8013ad2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8013ad6:	b29a      	uxth	r2, r3
 8013ad8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013ada:	f362 03cc 	bfi	r3, r2, #3, #10
 8013ade:	847b      	strh	r3, [r7, #34]	; 0x22
  hctsiz.b.pid = pdev->host.hc[hc_num].data_pid;
 8013ae0:	78fb      	ldrb	r3, [r7, #3]
 8013ae2:	687a      	ldr	r2, [r7, #4]
 8013ae4:	3315      	adds	r3, #21
 8013ae6:	015b      	lsls	r3, r3, #5
 8013ae8:	4413      	add	r3, r2
 8013aea:	f503 738a 	add.w	r3, r3, #276	; 0x114
 8013aee:	781b      	ldrb	r3, [r3, #0]
 8013af0:	f003 0303 	and.w	r3, r3, #3
 8013af4:	b2da      	uxtb	r2, r3
 8013af6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8013afa:	f362 1346 	bfi	r3, r2, #5, #2
 8013afe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  USB_OTG_WRITE_REG32(&pdev->regs.HC_REGS[hc_num]->HCTSIZ, hctsiz.d32);
 8013b02:	78fb      	ldrb	r3, [r7, #3]
 8013b04:	687a      	ldr	r2, [r7, #4]
 8013b06:	3322      	adds	r3, #34	; 0x22
 8013b08:	009b      	lsls	r3, r3, #2
 8013b0a:	4413      	add	r3, r2
 8013b0c:	689b      	ldr	r3, [r3, #8]
 8013b0e:	6a3a      	ldr	r2, [r7, #32]
 8013b10:	611a      	str	r2, [r3, #16]
  
  if (pdev->cfg.dma_enable == 1)
 8013b12:	687b      	ldr	r3, [r7, #4]
 8013b14:	78db      	ldrb	r3, [r3, #3]
 8013b16:	2b01      	cmp	r3, #1
 8013b18:	d10f      	bne.n	8013b3a <USB_OTG_HC_StartXfer+0x15e>
  {
    USB_OTG_WRITE_REG32(&pdev->regs.HC_REGS[hc_num]->HCDMA, (unsigned int)pdev->host.hc[hc_num].xfer_buff);
 8013b1a:	78fb      	ldrb	r3, [r7, #3]
 8013b1c:	687a      	ldr	r2, [r7, #4]
 8013b1e:	3315      	adds	r3, #21
 8013b20:	015b      	lsls	r3, r3, #5
 8013b22:	4413      	add	r3, r2
 8013b24:	f503 738c 	add.w	r3, r3, #280	; 0x118
 8013b28:	6819      	ldr	r1, [r3, #0]
 8013b2a:	78fb      	ldrb	r3, [r7, #3]
 8013b2c:	687a      	ldr	r2, [r7, #4]
 8013b2e:	3322      	adds	r3, #34	; 0x22
 8013b30:	009b      	lsls	r3, r3, #2
 8013b32:	4413      	add	r3, r2
 8013b34:	689b      	ldr	r3, [r3, #8]
 8013b36:	460a      	mov	r2, r1
 8013b38:	615a      	str	r2, [r3, #20]
  }
  
  
  hcchar.d32 = USB_OTG_READ_REG32(&pdev->regs.HC_REGS[hc_num]->HCCHAR);
 8013b3a:	78fb      	ldrb	r3, [r7, #3]
 8013b3c:	687a      	ldr	r2, [r7, #4]
 8013b3e:	3322      	adds	r3, #34	; 0x22
 8013b40:	009b      	lsls	r3, r3, #2
 8013b42:	4413      	add	r3, r2
 8013b44:	689b      	ldr	r3, [r3, #8]
 8013b46:	681b      	ldr	r3, [r3, #0]
 8013b48:	627b      	str	r3, [r7, #36]	; 0x24
  hcchar.b.oddfrm = USB_OTG_IsEvenFrame(pdev);
 8013b4a:	6878      	ldr	r0, [r7, #4]
 8013b4c:	f7ff fcf8 	bl	8013540 <USB_OTG_IsEvenFrame>
 8013b50:	4603      	mov	r3, r0
 8013b52:	f003 0301 	and.w	r3, r3, #1
 8013b56:	b2da      	uxtb	r2, r3
 8013b58:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013b5c:	f362 1345 	bfi	r3, r2, #5, #1
 8013b60:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  
  /* Set host channel enable */
  hcchar.b.chen = 1;
 8013b64:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013b68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013b6c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  hcchar.b.chdis = 0;
 8013b70:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013b74:	f36f 1386 	bfc	r3, #6, #1
 8013b78:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  USB_OTG_WRITE_REG32(&pdev->regs.HC_REGS[hc_num]->HCCHAR, hcchar.d32);
 8013b7c:	78fb      	ldrb	r3, [r7, #3]
 8013b7e:	687a      	ldr	r2, [r7, #4]
 8013b80:	3322      	adds	r3, #34	; 0x22
 8013b82:	009b      	lsls	r3, r3, #2
 8013b84:	4413      	add	r3, r2
 8013b86:	689b      	ldr	r3, [r3, #8]
 8013b88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013b8a:	601a      	str	r2, [r3, #0]
  
  if (pdev->cfg.dma_enable == 0) /* Slave mode */
 8013b8c:	687b      	ldr	r3, [r7, #4]
 8013b8e:	78db      	ldrb	r3, [r3, #3]
 8013b90:	2b00      	cmp	r3, #0
 8013b92:	d17c      	bne.n	8013c8e <USB_OTG_HC_StartXfer+0x2b2>
  {  
    if((pdev->host.hc[hc_num].ep_is_in == 0) && 
 8013b94:	78fb      	ldrb	r3, [r7, #3]
 8013b96:	687a      	ldr	r2, [r7, #4]
 8013b98:	015b      	lsls	r3, r3, #5
 8013b9a:	4413      	add	r3, r2
 8013b9c:	f203 33ae 	addw	r3, r3, #942	; 0x3ae
 8013ba0:	781b      	ldrb	r3, [r3, #0]
 8013ba2:	2b00      	cmp	r3, #0
 8013ba4:	d173      	bne.n	8013c8e <USB_OTG_HC_StartXfer+0x2b2>
       (pdev->host.hc[hc_num].xfer_len > 0))
 8013ba6:	78fb      	ldrb	r3, [r7, #3]
 8013ba8:	687a      	ldr	r2, [r7, #4]
 8013baa:	015b      	lsls	r3, r3, #5
 8013bac:	4413      	add	r3, r2
 8013bae:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 8013bb2:	681b      	ldr	r3, [r3, #0]
    if((pdev->host.hc[hc_num].ep_is_in == 0) && 
 8013bb4:	2b00      	cmp	r3, #0
 8013bb6:	d06a      	beq.n	8013c8e <USB_OTG_HC_StartXfer+0x2b2>
    {
      switch(pdev->host.hc[hc_num].ep_type) 
 8013bb8:	78fb      	ldrb	r3, [r7, #3]
 8013bba:	687a      	ldr	r2, [r7, #4]
 8013bbc:	015b      	lsls	r3, r3, #5
 8013bbe:	4413      	add	r3, r2
 8013bc0:	f203 33b1 	addw	r3, r3, #945	; 0x3b1
 8013bc4:	781b      	ldrb	r3, [r3, #0]
 8013bc6:	2b03      	cmp	r3, #3
 8013bc8:	d848      	bhi.n	8013c5c <USB_OTG_HC_StartXfer+0x280>
 8013bca:	a201      	add	r2, pc, #4	; (adr r2, 8013bd0 <USB_OTG_HC_StartXfer+0x1f4>)
 8013bcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013bd0:	08013be1 	.word	0x08013be1
 8013bd4:	08013c1f 	.word	0x08013c1f
 8013bd8:	08013be1 	.word	0x08013be1
 8013bdc:	08013c1f 	.word	0x08013c1f
      {
        /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:
        
        hnptxsts.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->HNPTXSTS);
 8013be0:	687b      	ldr	r3, [r7, #4]
 8013be2:	68db      	ldr	r3, [r3, #12]
 8013be4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013be6:	617b      	str	r3, [r7, #20]
        len_words = (pdev->host.hc[hc_num].xfer_len + 3) / 4;
 8013be8:	78fb      	ldrb	r3, [r7, #3]
 8013bea:	687a      	ldr	r2, [r7, #4]
 8013bec:	015b      	lsls	r3, r3, #5
 8013bee:	4413      	add	r3, r2
 8013bf0:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 8013bf4:	681b      	ldr	r3, [r3, #0]
 8013bf6:	3303      	adds	r3, #3
 8013bf8:	089b      	lsrs	r3, r3, #2
 8013bfa:	857b      	strh	r3, [r7, #42]	; 0x2a
        
        /* check if there is enough space in FIFO space */
        if(len_words > hnptxsts.b.nptxfspcavail)
 8013bfc:	8abb      	ldrh	r3, [r7, #20]
 8013bfe:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8013c00:	429a      	cmp	r2, r3
 8013c02:	d92d      	bls.n	8013c60 <USB_OTG_HC_StartXfer+0x284>
        {
          /* need to process data in nptxfempty interrupt */
          intmsk.b.nptxfempty = 1;
 8013c04:	7a3b      	ldrb	r3, [r7, #8]
 8013c06:	f043 0320 	orr.w	r3, r3, #32
 8013c0a:	723b      	strb	r3, [r7, #8]
          USB_OTG_MODIFY_REG32( &pdev->regs.GREGS->GINTMSK, 0, intmsk.d32);  
 8013c0c:	687b      	ldr	r3, [r7, #4]
 8013c0e:	68db      	ldr	r3, [r3, #12]
 8013c10:	6999      	ldr	r1, [r3, #24]
 8013c12:	68ba      	ldr	r2, [r7, #8]
 8013c14:	687b      	ldr	r3, [r7, #4]
 8013c16:	68db      	ldr	r3, [r3, #12]
 8013c18:	430a      	orrs	r2, r1
 8013c1a:	619a      	str	r2, [r3, #24]
        }
        
        break;
 8013c1c:	e020      	b.n	8013c60 <USB_OTG_HC_StartXfer+0x284>
        /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        hptxsts.d32 = USB_OTG_READ_REG32(&pdev->regs.HREGS->HPTXSTS);
 8013c1e:	687b      	ldr	r3, [r7, #4]
 8013c20:	695b      	ldr	r3, [r3, #20]
 8013c22:	691b      	ldr	r3, [r3, #16]
 8013c24:	60fb      	str	r3, [r7, #12]
        len_words = (pdev->host.hc[hc_num].xfer_len + 3) / 4;
 8013c26:	78fb      	ldrb	r3, [r7, #3]
 8013c28:	687a      	ldr	r2, [r7, #4]
 8013c2a:	015b      	lsls	r3, r3, #5
 8013c2c:	4413      	add	r3, r2
 8013c2e:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 8013c32:	681b      	ldr	r3, [r3, #0]
 8013c34:	3303      	adds	r3, #3
 8013c36:	089b      	lsrs	r3, r3, #2
 8013c38:	857b      	strh	r3, [r7, #42]	; 0x2a
        /* check if there is enough space in FIFO space */
        if(len_words > hptxsts.b.ptxfspcavail) /* split the transfer */
 8013c3a:	89bb      	ldrh	r3, [r7, #12]
 8013c3c:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8013c3e:	429a      	cmp	r2, r3
 8013c40:	d910      	bls.n	8013c64 <USB_OTG_HC_StartXfer+0x288>
        {
          /* need to process data in ptxfempty interrupt */
          intmsk.b.ptxfempty = 1;
 8013c42:	7afb      	ldrb	r3, [r7, #11]
 8013c44:	f043 0304 	orr.w	r3, r3, #4
 8013c48:	72fb      	strb	r3, [r7, #11]
          USB_OTG_MODIFY_REG32( &pdev->regs.GREGS->GINTMSK, 0, intmsk.d32);  
 8013c4a:	687b      	ldr	r3, [r7, #4]
 8013c4c:	68db      	ldr	r3, [r3, #12]
 8013c4e:	6999      	ldr	r1, [r3, #24]
 8013c50:	68ba      	ldr	r2, [r7, #8]
 8013c52:	687b      	ldr	r3, [r7, #4]
 8013c54:	68db      	ldr	r3, [r3, #12]
 8013c56:	430a      	orrs	r2, r1
 8013c58:	619a      	str	r2, [r3, #24]
        }
        break;
 8013c5a:	e003      	b.n	8013c64 <USB_OTG_HC_StartXfer+0x288>
        
      default:
        break;
 8013c5c:	bf00      	nop
 8013c5e:	e002      	b.n	8013c66 <USB_OTG_HC_StartXfer+0x28a>
        break;
 8013c60:	bf00      	nop
 8013c62:	e000      	b.n	8013c66 <USB_OTG_HC_StartXfer+0x28a>
        break;
 8013c64:	bf00      	nop
      }
      
      /* Write packet into the Tx FIFO. */
      USB_OTG_WritePacket(pdev, 
 8013c66:	78fb      	ldrb	r3, [r7, #3]
 8013c68:	687a      	ldr	r2, [r7, #4]
 8013c6a:	3315      	adds	r3, #21
 8013c6c:	015b      	lsls	r3, r3, #5
 8013c6e:	4413      	add	r3, r2
 8013c70:	f503 738c 	add.w	r3, r3, #280	; 0x118
 8013c74:	6819      	ldr	r1, [r3, #0]
                          pdev->host.hc[hc_num].xfer_buff , 
                          hc_num, pdev->host.hc[hc_num].xfer_len);
 8013c76:	78fb      	ldrb	r3, [r7, #3]
 8013c78:	687a      	ldr	r2, [r7, #4]
 8013c7a:	015b      	lsls	r3, r3, #5
 8013c7c:	4413      	add	r3, r2
 8013c7e:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 8013c82:	681b      	ldr	r3, [r3, #0]
      USB_OTG_WritePacket(pdev, 
 8013c84:	b29b      	uxth	r3, r3
 8013c86:	78fa      	ldrb	r2, [r7, #3]
 8013c88:	6878      	ldr	r0, [r7, #4]
 8013c8a:	f7ff f8ed 	bl	8012e68 <USB_OTG_WritePacket>
    }
  }
  return status;
 8013c8e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
}
 8013c92:	4618      	mov	r0, r3
 8013c94:	3730      	adds	r7, #48	; 0x30
 8013c96:	46bd      	mov	sp, r7
 8013c98:	bd80      	pop	{r7, pc}

08013c9a <USB_OTG_HC_Halt>:
* @param  pdev : Selected device
* @param  hc_num : channel number
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_HC_Halt(USB_OTG_CORE_HANDLE *pdev , uint8_t hc_num)
{
 8013c9a:	b480      	push	{r7}
 8013c9c:	b08b      	sub	sp, #44	; 0x2c
 8013c9e:	af00      	add	r7, sp, #0
 8013ca0:	6078      	str	r0, [r7, #4]
 8013ca2:	460b      	mov	r3, r1
 8013ca4:	70fb      	strb	r3, [r7, #3]
  USB_OTG_STS status = USB_OTG_OK;
 8013ca6:	2300      	movs	r3, #0
 8013ca8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  USB_OTG_HNPTXSTS_TypeDef            nptxsts;
  USB_OTG_HPTXSTS_TypeDef             hptxsts;
  USB_OTG_HCCHAR_TypeDef              hcchar;
  
  nptxsts.d32 = 0;
 8013cac:	2300      	movs	r3, #0
 8013cae:	61bb      	str	r3, [r7, #24]
  hptxsts.d32 = 0;
 8013cb0:	2300      	movs	r3, #0
 8013cb2:	613b      	str	r3, [r7, #16]
  hcchar.d32 = USB_OTG_READ_REG32(&pdev->regs.HC_REGS[hc_num]->HCCHAR);
 8013cb4:	78fb      	ldrb	r3, [r7, #3]
 8013cb6:	687a      	ldr	r2, [r7, #4]
 8013cb8:	3322      	adds	r3, #34	; 0x22
 8013cba:	009b      	lsls	r3, r3, #2
 8013cbc:	4413      	add	r3, r2
 8013cbe:	689b      	ldr	r3, [r3, #8]
 8013cc0:	681b      	ldr	r3, [r3, #0]
 8013cc2:	60fb      	str	r3, [r7, #12]
  hcchar.b.chen = 1;
 8013cc4:	7bfb      	ldrb	r3, [r7, #15]
 8013cc6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013cca:	73fb      	strb	r3, [r7, #15]
  hcchar.b.chdis = 1;
 8013ccc:	7bfb      	ldrb	r3, [r7, #15]
 8013cce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013cd2:	73fb      	strb	r3, [r7, #15]
  
  /* Check for space in the request queue to issue the halt. */
  if (hcchar.b.eptype == HCCHAR_CTRL || hcchar.b.eptype == HCCHAR_BULK)
 8013cd4:	7bbb      	ldrb	r3, [r7, #14]
 8013cd6:	f003 030c 	and.w	r3, r3, #12
 8013cda:	b2db      	uxtb	r3, r3
 8013cdc:	2b00      	cmp	r3, #0
 8013cde:	d005      	beq.n	8013cec <USB_OTG_HC_Halt+0x52>
 8013ce0:	7bbb      	ldrb	r3, [r7, #14]
 8013ce2:	f003 030c 	and.w	r3, r3, #12
 8013ce6:	b2db      	uxtb	r3, r3
 8013ce8:	2b08      	cmp	r3, #8
 8013cea:	d10b      	bne.n	8013d04 <USB_OTG_HC_Halt+0x6a>
  {
    nptxsts.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->HNPTXSTS);
 8013cec:	687b      	ldr	r3, [r7, #4]
 8013cee:	68db      	ldr	r3, [r3, #12]
 8013cf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013cf2:	61bb      	str	r3, [r7, #24]
    if (nptxsts.b.nptxqspcavail == 0)
 8013cf4:	7ebb      	ldrb	r3, [r7, #26]
 8013cf6:	2b00      	cmp	r3, #0
 8013cf8:	d10f      	bne.n	8013d1a <USB_OTG_HC_Halt+0x80>
    {
      hcchar.b.chen = 0;
 8013cfa:	7bfb      	ldrb	r3, [r7, #15]
 8013cfc:	f36f 13c7 	bfc	r3, #7, #1
 8013d00:	73fb      	strb	r3, [r7, #15]
    if (nptxsts.b.nptxqspcavail == 0)
 8013d02:	e00a      	b.n	8013d1a <USB_OTG_HC_Halt+0x80>
    }
  }
  else
  {
    hptxsts.d32 = USB_OTG_READ_REG32(&pdev->regs.HREGS->HPTXSTS);
 8013d04:	687b      	ldr	r3, [r7, #4]
 8013d06:	695b      	ldr	r3, [r3, #20]
 8013d08:	691b      	ldr	r3, [r3, #16]
 8013d0a:	613b      	str	r3, [r7, #16]
    if (hptxsts.b.ptxqspcavail == 0)
 8013d0c:	7cbb      	ldrb	r3, [r7, #18]
 8013d0e:	2b00      	cmp	r3, #0
 8013d10:	d103      	bne.n	8013d1a <USB_OTG_HC_Halt+0x80>
    {
      hcchar.b.chen = 0;
 8013d12:	7bfb      	ldrb	r3, [r7, #15]
 8013d14:	f36f 13c7 	bfc	r3, #7, #1
 8013d18:	73fb      	strb	r3, [r7, #15]
    }
  }
  USB_OTG_WRITE_REG32(&pdev->regs.HC_REGS[hc_num]->HCCHAR, hcchar.d32);
 8013d1a:	78fb      	ldrb	r3, [r7, #3]
 8013d1c:	687a      	ldr	r2, [r7, #4]
 8013d1e:	3322      	adds	r3, #34	; 0x22
 8013d20:	009b      	lsls	r3, r3, #2
 8013d22:	4413      	add	r3, r2
 8013d24:	689b      	ldr	r3, [r3, #8]
 8013d26:	68fa      	ldr	r2, [r7, #12]
 8013d28:	601a      	str	r2, [r3, #0]
  return status;
 8013d2a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8013d2e:	4618      	mov	r0, r3
 8013d30:	372c      	adds	r7, #44	; 0x2c
 8013d32:	46bd      	mov	sp, r7
 8013d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d38:	4770      	bx	lr

08013d3a <USB_OTG_HC_DoPing>:
* @brief  Issue a ping token
* @param  None
* @retval : None
*/
USB_OTG_STS USB_OTG_HC_DoPing(USB_OTG_CORE_HANDLE *pdev , uint8_t hc_num)
{
 8013d3a:	b480      	push	{r7}
 8013d3c:	b087      	sub	sp, #28
 8013d3e:	af00      	add	r7, sp, #0
 8013d40:	6078      	str	r0, [r7, #4]
 8013d42:	460b      	mov	r3, r1
 8013d44:	70fb      	strb	r3, [r7, #3]
  USB_OTG_STS               status = USB_OTG_OK;
 8013d46:	2300      	movs	r3, #0
 8013d48:	75fb      	strb	r3, [r7, #23]
  USB_OTG_HCCHAR_TypeDef    hcchar;
  USB_OTG_HCTSIZn_TypeDef   hctsiz;  
  
  hctsiz.d32 = 0;
 8013d4a:	2300      	movs	r3, #0
 8013d4c:	60fb      	str	r3, [r7, #12]
  hctsiz.b.dopng = 1;
 8013d4e:	7bfb      	ldrb	r3, [r7, #15]
 8013d50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013d54:	73fb      	strb	r3, [r7, #15]
  hctsiz.b.pktcnt = 1;
 8013d56:	89fb      	ldrh	r3, [r7, #14]
 8013d58:	2201      	movs	r2, #1
 8013d5a:	f362 03cc 	bfi	r3, r2, #3, #10
 8013d5e:	81fb      	strh	r3, [r7, #14]
  USB_OTG_WRITE_REG32(&pdev->regs.HC_REGS[hc_num]->HCTSIZ, hctsiz.d32);
 8013d60:	78fb      	ldrb	r3, [r7, #3]
 8013d62:	687a      	ldr	r2, [r7, #4]
 8013d64:	3322      	adds	r3, #34	; 0x22
 8013d66:	009b      	lsls	r3, r3, #2
 8013d68:	4413      	add	r3, r2
 8013d6a:	689b      	ldr	r3, [r3, #8]
 8013d6c:	68fa      	ldr	r2, [r7, #12]
 8013d6e:	611a      	str	r2, [r3, #16]
  
  hcchar.d32 = USB_OTG_READ_REG32(&pdev->regs.HC_REGS[hc_num]->HCCHAR);
 8013d70:	78fb      	ldrb	r3, [r7, #3]
 8013d72:	687a      	ldr	r2, [r7, #4]
 8013d74:	3322      	adds	r3, #34	; 0x22
 8013d76:	009b      	lsls	r3, r3, #2
 8013d78:	4413      	add	r3, r2
 8013d7a:	689b      	ldr	r3, [r3, #8]
 8013d7c:	681b      	ldr	r3, [r3, #0]
 8013d7e:	613b      	str	r3, [r7, #16]
  hcchar.b.chen = 1;
 8013d80:	7cfb      	ldrb	r3, [r7, #19]
 8013d82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013d86:	74fb      	strb	r3, [r7, #19]
  hcchar.b.chdis = 0;
 8013d88:	7cfb      	ldrb	r3, [r7, #19]
 8013d8a:	f36f 1386 	bfc	r3, #6, #1
 8013d8e:	74fb      	strb	r3, [r7, #19]
  USB_OTG_WRITE_REG32(&pdev->regs.HC_REGS[hc_num]->HCCHAR, hcchar.d32);
 8013d90:	78fb      	ldrb	r3, [r7, #3]
 8013d92:	687a      	ldr	r2, [r7, #4]
 8013d94:	3322      	adds	r3, #34	; 0x22
 8013d96:	009b      	lsls	r3, r3, #2
 8013d98:	4413      	add	r3, r2
 8013d9a:	689b      	ldr	r3, [r3, #8]
 8013d9c:	693a      	ldr	r2, [r7, #16]
 8013d9e:	601a      	str	r2, [r3, #0]
  return status;  
 8013da0:	7dfb      	ldrb	r3, [r7, #23]
}
 8013da2:	4618      	mov	r0, r3
 8013da4:	371c      	adds	r7, #28
 8013da6:	46bd      	mov	sp, r7
 8013da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013dac:	4770      	bx	lr

08013dae <USB_OTG_StopHost>:
* @brief  Stop the device and clean up fifo's
* @param  None
* @retval : None
*/
void USB_OTG_StopHost(USB_OTG_CORE_HANDLE *pdev)
{
 8013dae:	b580      	push	{r7, lr}
 8013db0:	b084      	sub	sp, #16
 8013db2:	af00      	add	r7, sp, #0
 8013db4:	6078      	str	r0, [r7, #4]
  USB_OTG_HCCHAR_TypeDef  hcchar;
  uint32_t                i;
  
  USB_OTG_WRITE_REG32(&pdev->regs.HREGS->HAINTMSK , 0);
 8013db6:	687b      	ldr	r3, [r7, #4]
 8013db8:	695b      	ldr	r3, [r3, #20]
 8013dba:	2200      	movs	r2, #0
 8013dbc:	619a      	str	r2, [r3, #24]
  USB_OTG_WRITE_REG32(&pdev->regs.HREGS->HAINT,      0xFFFFFFFF);
 8013dbe:	687b      	ldr	r3, [r7, #4]
 8013dc0:	695b      	ldr	r3, [r3, #20]
 8013dc2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013dc6:	615a      	str	r2, [r3, #20]
  /* Flush out any leftover queued requests. */
  
  for (i = 0; i < pdev->cfg.host_channels; i++)
 8013dc8:	2300      	movs	r3, #0
 8013dca:	60fb      	str	r3, [r7, #12]
 8013dcc:	e01e      	b.n	8013e0c <USB_OTG_StopHost+0x5e>
  {
    hcchar.d32 = USB_OTG_READ_REG32(&pdev->regs.HC_REGS[i]->HCCHAR);
 8013dce:	687a      	ldr	r2, [r7, #4]
 8013dd0:	68fb      	ldr	r3, [r7, #12]
 8013dd2:	3322      	adds	r3, #34	; 0x22
 8013dd4:	009b      	lsls	r3, r3, #2
 8013dd6:	4413      	add	r3, r2
 8013dd8:	689b      	ldr	r3, [r3, #8]
 8013dda:	681b      	ldr	r3, [r3, #0]
 8013ddc:	60bb      	str	r3, [r7, #8]
    hcchar.b.chen = 0;
 8013dde:	7afb      	ldrb	r3, [r7, #11]
 8013de0:	f36f 13c7 	bfc	r3, #7, #1
 8013de4:	72fb      	strb	r3, [r7, #11]
    hcchar.b.chdis = 1;
 8013de6:	7afb      	ldrb	r3, [r7, #11]
 8013de8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013dec:	72fb      	strb	r3, [r7, #11]
    hcchar.b.epdir = 0;
 8013dee:	7a7b      	ldrb	r3, [r7, #9]
 8013df0:	f36f 13c7 	bfc	r3, #7, #1
 8013df4:	727b      	strb	r3, [r7, #9]
    USB_OTG_WRITE_REG32(&pdev->regs.HC_REGS[i]->HCCHAR, hcchar.d32);
 8013df6:	687a      	ldr	r2, [r7, #4]
 8013df8:	68fb      	ldr	r3, [r7, #12]
 8013dfa:	3322      	adds	r3, #34	; 0x22
 8013dfc:	009b      	lsls	r3, r3, #2
 8013dfe:	4413      	add	r3, r2
 8013e00:	689b      	ldr	r3, [r3, #8]
 8013e02:	68ba      	ldr	r2, [r7, #8]
 8013e04:	601a      	str	r2, [r3, #0]
  for (i = 0; i < pdev->cfg.host_channels; i++)
 8013e06:	68fb      	ldr	r3, [r7, #12]
 8013e08:	3301      	adds	r3, #1
 8013e0a:	60fb      	str	r3, [r7, #12]
 8013e0c:	687b      	ldr	r3, [r7, #4]
 8013e0e:	781b      	ldrb	r3, [r3, #0]
 8013e10:	461a      	mov	r2, r3
 8013e12:	68fb      	ldr	r3, [r7, #12]
 8013e14:	4293      	cmp	r3, r2
 8013e16:	d3da      	bcc.n	8013dce <USB_OTG_StopHost+0x20>
  }
  
  /* Flush the FIFO */
  USB_OTG_FlushRxFifo(pdev);
 8013e18:	6878      	ldr	r0, [r7, #4]
 8013e1a:	f7ff fa5d 	bl	80132d8 <USB_OTG_FlushRxFifo>
  USB_OTG_FlushTxFifo(pdev ,  0x10 );  
 8013e1e:	2110      	movs	r1, #16
 8013e20:	6878      	ldr	r0, [r7, #4]
 8013e22:	f7ff fa21 	bl	8013268 <USB_OTG_FlushTxFifo>
}
 8013e26:	bf00      	nop
 8013e28:	3710      	adds	r7, #16
 8013e2a:	46bd      	mov	sp, r7
 8013e2c:	bd80      	pop	{r7, pc}
 8013e2e:	bf00      	nop

08013e30 <HCD_Init>:
  * @param  base_address: OTG base address
  * @retval Status
  */
uint32_t HCD_Init(USB_OTG_CORE_HANDLE *pdev , 
                  USB_OTG_CORE_ID_TypeDef coreID)
{
 8013e30:	b580      	push	{r7, lr}
 8013e32:	b084      	sub	sp, #16
 8013e34:	af00      	add	r7, sp, #0
 8013e36:	6078      	str	r0, [r7, #4]
 8013e38:	460b      	mov	r3, r1
 8013e3a:	70fb      	strb	r3, [r7, #3]
  uint8_t i = 0;
 8013e3c:	2300      	movs	r3, #0
 8013e3e:	73fb      	strb	r3, [r7, #15]
  pdev->host.ConnSts = 0;
 8013e40:	687b      	ldr	r3, [r7, #4]
 8013e42:	2200      	movs	r2, #0
 8013e44:	f8c3 2310 	str.w	r2, [r3, #784]	; 0x310
  
  for (i= 0; i< USB_OTG_MAX_TX_FIFOS; i++)
 8013e48:	2300      	movs	r3, #0
 8013e4a:	73fb      	strb	r3, [r7, #15]
 8013e4c:	e015      	b.n	8013e7a <HCD_Init+0x4a>
  {
  pdev->host.ErrCnt[i]  = 0;
 8013e4e:	7bfb      	ldrb	r3, [r7, #15]
 8013e50:	687a      	ldr	r2, [r7, #4]
 8013e52:	33c4      	adds	r3, #196	; 0xc4
 8013e54:	009b      	lsls	r3, r3, #2
 8013e56:	4413      	add	r3, r2
 8013e58:	2200      	movs	r2, #0
 8013e5a:	605a      	str	r2, [r3, #4]
  pdev->host.XferCnt[i]   = 0;
 8013e5c:	7bfa      	ldrb	r2, [r7, #15]
 8013e5e:	687b      	ldr	r3, [r7, #4]
 8013e60:	32d4      	adds	r2, #212	; 0xd4
 8013e62:	2100      	movs	r1, #0
 8013e64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->host.HC_Status[i]   = HC_IDLE;
 8013e68:	7bfb      	ldrb	r3, [r7, #15]
 8013e6a:	687a      	ldr	r2, [r7, #4]
 8013e6c:	4413      	add	r3, r2
 8013e6e:	2200      	movs	r2, #0
 8013e70:	f883 238c 	strb.w	r2, [r3, #908]	; 0x38c
  for (i= 0; i< USB_OTG_MAX_TX_FIFOS; i++)
 8013e74:	7bfb      	ldrb	r3, [r7, #15]
 8013e76:	3301      	adds	r3, #1
 8013e78:	73fb      	strb	r3, [r7, #15]
 8013e7a:	7bfb      	ldrb	r3, [r7, #15]
 8013e7c:	2b0e      	cmp	r3, #14
 8013e7e:	d9e6      	bls.n	8013e4e <HCD_Init+0x1e>
  }
  pdev->host.hc[0].max_packet  = 8; 
 8013e80:	687b      	ldr	r3, [r7, #4]
 8013e82:	2208      	movs	r2, #8
 8013e84:	f8a3 23b2 	strh.w	r2, [r3, #946]	; 0x3b2

  USB_OTG_SelectCore(pdev, coreID);
 8013e88:	78fb      	ldrb	r3, [r7, #3]
 8013e8a:	4619      	mov	r1, r3
 8013e8c:	6878      	ldr	r0, [r7, #4]
 8013e8e:	f7ff f852 	bl	8012f36 <USB_OTG_SelectCore>
#ifndef DUAL_ROLE_MODE_ENABLED
  USB_OTG_DisableGlobalInt(pdev);
 8013e92:	6878      	ldr	r0, [r7, #4]
 8013e94:	f7ff f9cc 	bl	8013230 <USB_OTG_DisableGlobalInt>
  USB_OTG_CoreInit(pdev);
 8013e98:	6878      	ldr	r0, [r7, #4]
 8013e9a:	f7ff f90d 	bl	80130b8 <USB_OTG_CoreInit>

  /* Force Host Mode*/
  USB_OTG_SetCurrentMode(pdev , HOST_MODE);
 8013e9e:	2101      	movs	r1, #1
 8013ea0:	6878      	ldr	r0, [r7, #4]
 8013ea2:	f7ff fa49 	bl	8013338 <USB_OTG_SetCurrentMode>
  USB_OTG_CoreInitHost(pdev);
 8013ea6:	6878      	ldr	r0, [r7, #4]
 8013ea8:	f7ff faca 	bl	8013440 <USB_OTG_CoreInitHost>
  USB_OTG_EnableGlobalInt(pdev);
 8013eac:	6878      	ldr	r0, [r7, #4]
 8013eae:	f7ff f9a4 	bl	80131fa <USB_OTG_EnableGlobalInt>
#endif
   
  return 0;
 8013eb2:	2300      	movs	r3, #0
}
 8013eb4:	4618      	mov	r0, r3
 8013eb6:	3710      	adds	r7, #16
 8013eb8:	46bd      	mov	sp, r7
 8013eba:	bd80      	pop	{r7, pc}

08013ebc <HCD_GetCurrentSpeed>:
  * @param  pdev : Selected device
  * @retval Status
  */

uint32_t HCD_GetCurrentSpeed (USB_OTG_CORE_HANDLE *pdev)
{    
 8013ebc:	b480      	push	{r7}
 8013ebe:	b085      	sub	sp, #20
 8013ec0:	af00      	add	r7, sp, #0
 8013ec2:	6078      	str	r0, [r7, #4]
    USB_OTG_HPRT0_TypeDef  HPRT0;
    HPRT0.d32 = USB_OTG_READ_REG32(pdev->regs.HPRT0);
 8013ec4:	687b      	ldr	r3, [r7, #4]
 8013ec6:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8013eca:	681b      	ldr	r3, [r3, #0]
 8013ecc:	60fb      	str	r3, [r7, #12]
    
    return HPRT0.b.prtspd;
 8013ece:	7bbb      	ldrb	r3, [r7, #14]
 8013ed0:	f3c3 0341 	ubfx	r3, r3, #1, #2
 8013ed4:	b2db      	uxtb	r3, r3
}
 8013ed6:	4618      	mov	r0, r3
 8013ed8:	3714      	adds	r7, #20
 8013eda:	46bd      	mov	sp, r7
 8013edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ee0:	4770      	bx	lr

08013ee2 <HCD_ResetPort>:
  *         Issues the reset command to device
  * @param  pdev : Selected device
  * @retval Status
  */
uint32_t HCD_ResetPort(USB_OTG_CORE_HANDLE *pdev)
{
 8013ee2:	b580      	push	{r7, lr}
 8013ee4:	b082      	sub	sp, #8
 8013ee6:	af00      	add	r7, sp, #0
 8013ee8:	6078      	str	r0, [r7, #4]
  interrupt triggered by the debounce done bit (DBCDNE bit in OTG_FS_GOTGINT), 
  which indicates that the bus is stable again after the electrical debounce 
  caused by the attachment of a pull-up resistor on DP (FS) or DM (LS).
  */
  
  USB_OTG_ResetPort(pdev); 
 8013eea:	6878      	ldr	r0, [r7, #4]
 8013eec:	f7ff fc03 	bl	80136f6 <USB_OTG_ResetPort>
  return 0;
 8013ef0:	2300      	movs	r3, #0
}
 8013ef2:	4618      	mov	r0, r3
 8013ef4:	3708      	adds	r7, #8
 8013ef6:	46bd      	mov	sp, r7
 8013ef8:	bd80      	pop	{r7, pc}

08013efa <HCD_IsDeviceConnected>:
  * @param  pdev : Selected device
  * @retval Device connection status. 1 -> connected and 0 -> disconnected
  * 
  */
uint32_t HCD_IsDeviceConnected(USB_OTG_CORE_HANDLE *pdev)
{
 8013efa:	b480      	push	{r7}
 8013efc:	b083      	sub	sp, #12
 8013efe:	af00      	add	r7, sp, #0
 8013f00:	6078      	str	r0, [r7, #4]
  return (pdev->host.ConnSts);
 8013f02:	687b      	ldr	r3, [r7, #4]
 8013f04:	f8d3 3310 	ldr.w	r3, [r3, #784]	; 0x310
}
 8013f08:	4618      	mov	r0, r3
 8013f0a:	370c      	adds	r7, #12
 8013f0c:	46bd      	mov	sp, r7
 8013f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f12:	4770      	bx	lr

08013f14 <HCD_GetCurrentFrame>:
  * @param  pdev : Selected device
  * @retval Frame number
  * 
  */
uint32_t HCD_GetCurrentFrame (USB_OTG_CORE_HANDLE *pdev) 
{
 8013f14:	b480      	push	{r7}
 8013f16:	b083      	sub	sp, #12
 8013f18:	af00      	add	r7, sp, #0
 8013f1a:	6078      	str	r0, [r7, #4]
 return (USB_OTG_READ_REG32(&pdev->regs.HREGS->HFNUM) & 0xFFFF) ;
 8013f1c:	687b      	ldr	r3, [r7, #4]
 8013f1e:	695b      	ldr	r3, [r3, #20]
 8013f20:	689b      	ldr	r3, [r3, #8]
 8013f22:	b29b      	uxth	r3, r3
}
 8013f24:	4618      	mov	r0, r3
 8013f26:	370c      	adds	r7, #12
 8013f28:	46bd      	mov	sp, r7
 8013f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f2e:	4770      	bx	lr

08013f30 <HCD_GetURB_State>:
  * @param  pdev: Selected device
  * @retval URB_STATE
  * 
  */
URB_STATE HCD_GetURB_State (USB_OTG_CORE_HANDLE *pdev , uint8_t ch_num) 
{
 8013f30:	b480      	push	{r7}
 8013f32:	b083      	sub	sp, #12
 8013f34:	af00      	add	r7, sp, #0
 8013f36:	6078      	str	r0, [r7, #4]
 8013f38:	460b      	mov	r3, r1
 8013f3a:	70fb      	strb	r3, [r7, #3]
  return pdev->host.URB_State[ch_num] ;
 8013f3c:	78fb      	ldrb	r3, [r7, #3]
 8013f3e:	687a      	ldr	r2, [r7, #4]
 8013f40:	4413      	add	r3, r2
 8013f42:	f893 339b 	ldrb.w	r3, [r3, #923]	; 0x39b
 8013f46:	b2db      	uxtb	r3, r3
}
 8013f48:	4618      	mov	r0, r3
 8013f4a:	370c      	adds	r7, #12
 8013f4c:	46bd      	mov	sp, r7
 8013f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f52:	4770      	bx	lr

08013f54 <HCD_GetXferCnt>:
  * @param  pdev: Selected device
  * @retval No. of data bytes transferred
  * 
  */
uint32_t HCD_GetXferCnt (USB_OTG_CORE_HANDLE *pdev, uint8_t ch_num) 
{
 8013f54:	b480      	push	{r7}
 8013f56:	b083      	sub	sp, #12
 8013f58:	af00      	add	r7, sp, #0
 8013f5a:	6078      	str	r0, [r7, #4]
 8013f5c:	460b      	mov	r3, r1
 8013f5e:	70fb      	strb	r3, [r7, #3]
  return pdev->host.XferCnt[ch_num] ;
 8013f60:	78fa      	ldrb	r2, [r7, #3]
 8013f62:	687b      	ldr	r3, [r7, #4]
 8013f64:	32d4      	adds	r2, #212	; 0xd4
 8013f66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
}
 8013f6a:	4618      	mov	r0, r3
 8013f6c:	370c      	adds	r7, #12
 8013f6e:	46bd      	mov	sp, r7
 8013f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f74:	4770      	bx	lr

08013f76 <HCD_GetHCState>:
  * @param  pdev: Selected device
  * @retval HC_STATUS
  * 
  */
HC_STATUS HCD_GetHCState (USB_OTG_CORE_HANDLE *pdev ,  uint8_t ch_num) 
{
 8013f76:	b480      	push	{r7}
 8013f78:	b083      	sub	sp, #12
 8013f7a:	af00      	add	r7, sp, #0
 8013f7c:	6078      	str	r0, [r7, #4]
 8013f7e:	460b      	mov	r3, r1
 8013f80:	70fb      	strb	r3, [r7, #3]
  return pdev->host.HC_Status[ch_num] ;
 8013f82:	78fb      	ldrb	r3, [r7, #3]
 8013f84:	687a      	ldr	r2, [r7, #4]
 8013f86:	4413      	add	r3, r2
 8013f88:	f893 338c 	ldrb.w	r3, [r3, #908]	; 0x38c
 8013f8c:	b2db      	uxtb	r3, r3
}
 8013f8e:	4618      	mov	r0, r3
 8013f90:	370c      	adds	r7, #12
 8013f92:	46bd      	mov	sp, r7
 8013f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f98:	4770      	bx	lr

08013f9a <HCD_HC_Init>:
  * @param  pdev: Selected device
  * @param  hc_num: Channel number 
  * @retval status 
  */
uint32_t HCD_HC_Init (USB_OTG_CORE_HANDLE *pdev , uint8_t hc_num) 
{
 8013f9a:	b580      	push	{r7, lr}
 8013f9c:	b082      	sub	sp, #8
 8013f9e:	af00      	add	r7, sp, #0
 8013fa0:	6078      	str	r0, [r7, #4]
 8013fa2:	460b      	mov	r3, r1
 8013fa4:	70fb      	strb	r3, [r7, #3]
  return USB_OTG_HC_Init(pdev, hc_num);  
 8013fa6:	78fb      	ldrb	r3, [r7, #3]
 8013fa8:	4619      	mov	r1, r3
 8013faa:	6878      	ldr	r0, [r7, #4]
 8013fac:	f7ff fbc9 	bl	8013742 <USB_OTG_HC_Init>
 8013fb0:	4603      	mov	r3, r0
}
 8013fb2:	4618      	mov	r0, r3
 8013fb4:	3708      	adds	r7, #8
 8013fb6:	46bd      	mov	sp, r7
 8013fb8:	bd80      	pop	{r7, pc}

08013fba <HCD_SubmitRequest>:
  * @param  pdev: Selected device
  * @param  hc_num: Channel number 
  * @retval status
  */
uint32_t HCD_SubmitRequest (USB_OTG_CORE_HANDLE *pdev , uint8_t hc_num) 
{
 8013fba:	b580      	push	{r7, lr}
 8013fbc:	b082      	sub	sp, #8
 8013fbe:	af00      	add	r7, sp, #0
 8013fc0:	6078      	str	r0, [r7, #4]
 8013fc2:	460b      	mov	r3, r1
 8013fc4:	70fb      	strb	r3, [r7, #3]
  
  pdev->host.URB_State[hc_num] =   URB_IDLE;  
 8013fc6:	78fb      	ldrb	r3, [r7, #3]
 8013fc8:	687a      	ldr	r2, [r7, #4]
 8013fca:	4413      	add	r3, r2
 8013fcc:	2200      	movs	r2, #0
 8013fce:	f883 239b 	strb.w	r2, [r3, #923]	; 0x39b
  pdev->host.hc[hc_num].xfer_count = 0 ;
 8013fd2:	78fb      	ldrb	r3, [r7, #3]
 8013fd4:	687a      	ldr	r2, [r7, #4]
 8013fd6:	015b      	lsls	r3, r3, #5
 8013fd8:	4413      	add	r3, r2
 8013fda:	f503 7370 	add.w	r3, r3, #960	; 0x3c0
 8013fde:	2200      	movs	r2, #0
 8013fe0:	601a      	str	r2, [r3, #0]
  return USB_OTG_HC_StartXfer(pdev, hc_num);
 8013fe2:	78fb      	ldrb	r3, [r7, #3]
 8013fe4:	4619      	mov	r1, r3
 8013fe6:	6878      	ldr	r0, [r7, #4]
 8013fe8:	f7ff fcf8 	bl	80139dc <USB_OTG_HC_StartXfer>
 8013fec:	4603      	mov	r3, r0
}
 8013fee:	4618      	mov	r0, r3
 8013ff0:	3708      	adds	r7, #8
 8013ff2:	46bd      	mov	sp, r7
 8013ff4:	bd80      	pop	{r7, pc}
	...

08013ff8 <USBH_OTG_ISR_Handler>:
* @param  pdev: Selected device
* @retval status 
*/

uint32_t USBH_OTG_ISR_Handler (USB_OTG_CORE_HANDLE *pdev)
{
 8013ff8:	b580      	push	{r7, lr}
 8013ffa:	b084      	sub	sp, #16
 8013ffc:	af00      	add	r7, sp, #0
 8013ffe:	6078      	str	r0, [r7, #4]
  USB_OTG_GINTSTS_TypeDef  gintsts;
  uint32_t retval = 0;
 8014000:	2300      	movs	r3, #0
 8014002:	60fb      	str	r3, [r7, #12]
  
  gintsts.d32 = 0;
 8014004:	2300      	movs	r3, #0
 8014006:	60bb      	str	r3, [r7, #8]
  
  /* Check if HOST Mode */
  if (USB_OTG_IsHostMode(pdev))
 8014008:	6878      	ldr	r0, [r7, #4]
 801400a:	f7ff f9e4 	bl	80133d6 <USB_OTG_IsHostMode>
 801400e:	4603      	mov	r3, r0
 8014010:	2b00      	cmp	r3, #0
 8014012:	d071      	beq.n	80140f8 <USBH_OTG_ISR_Handler+0x100>
  {
    gintsts.d32 = USB_OTG_ReadCoreItr(pdev);
 8014014:	6878      	ldr	r0, [r7, #4]
 8014016:	f7ff f9ef 	bl	80133f8 <USB_OTG_ReadCoreItr>
 801401a:	4603      	mov	r3, r0
 801401c:	60bb      	str	r3, [r7, #8]
    if (!gintsts.d32)
 801401e:	68bb      	ldr	r3, [r7, #8]
 8014020:	2b00      	cmp	r3, #0
 8014022:	d101      	bne.n	8014028 <USBH_OTG_ISR_Handler+0x30>
    {
      return 0;
 8014024:	2300      	movs	r3, #0
 8014026:	e068      	b.n	80140fa <USBH_OTG_ISR_Handler+0x102>
    }
    
    if (gintsts.b.sofintr)
 8014028:	7a3b      	ldrb	r3, [r7, #8]
 801402a:	f003 0308 	and.w	r3, r3, #8
 801402e:	b2db      	uxtb	r3, r3
 8014030:	2b00      	cmp	r3, #0
 8014032:	d006      	beq.n	8014042 <USBH_OTG_ISR_Handler+0x4a>
    {
      retval |= USB_OTG_USBH_handle_sof_ISR (pdev);
 8014034:	6878      	ldr	r0, [r7, #4]
 8014036:	f000 f8aa 	bl	801418e <USB_OTG_USBH_handle_sof_ISR>
 801403a:	4602      	mov	r2, r0
 801403c:	68fb      	ldr	r3, [r7, #12]
 801403e:	4313      	orrs	r3, r2
 8014040:	60fb      	str	r3, [r7, #12]
    }
    
    if (gintsts.b.rxstsqlvl)
 8014042:	7a3b      	ldrb	r3, [r7, #8]
 8014044:	f003 0310 	and.w	r3, r3, #16
 8014048:	b2db      	uxtb	r3, r3
 801404a:	2b00      	cmp	r3, #0
 801404c:	d006      	beq.n	801405c <USBH_OTG_ISR_Handler+0x64>
    {
      retval |= USB_OTG_USBH_handle_rx_qlvl_ISR (pdev);
 801404e:	6878      	ldr	r0, [r7, #4]
 8014050:	f001 f888 	bl	8015164 <USB_OTG_USBH_handle_rx_qlvl_ISR>
 8014054:	4602      	mov	r2, r0
 8014056:	68fb      	ldr	r3, [r7, #12]
 8014058:	4313      	orrs	r3, r2
 801405a:	60fb      	str	r3, [r7, #12]
    }
    
    if (gintsts.b.nptxfempty)
 801405c:	7a3b      	ldrb	r3, [r7, #8]
 801405e:	f003 0320 	and.w	r3, r3, #32
 8014062:	b2db      	uxtb	r3, r3
 8014064:	2b00      	cmp	r3, #0
 8014066:	d006      	beq.n	8014076 <USBH_OTG_ISR_Handler+0x7e>
    {
      retval |= USB_OTG_USBH_handle_nptxfempty_ISR (pdev);
 8014068:	6878      	ldr	r0, [r7, #4]
 801406a:	f000 f8c5 	bl	80141f8 <USB_OTG_USBH_handle_nptxfempty_ISR>
 801406e:	4602      	mov	r2, r0
 8014070:	68fb      	ldr	r3, [r7, #12]
 8014072:	4313      	orrs	r3, r2
 8014074:	60fb      	str	r3, [r7, #12]
    }
    
    if (gintsts.b.ptxfempty)
 8014076:	7afb      	ldrb	r3, [r7, #11]
 8014078:	f003 0304 	and.w	r3, r3, #4
 801407c:	b2db      	uxtb	r3, r3
 801407e:	2b00      	cmp	r3, #0
 8014080:	d006      	beq.n	8014090 <USBH_OTG_ISR_Handler+0x98>
    {
      retval |= USB_OTG_USBH_handle_ptxfempty_ISR (pdev);
 8014082:	6878      	ldr	r0, [r7, #4]
 8014084:	f000 f97b 	bl	801437e <USB_OTG_USBH_handle_ptxfempty_ISR>
 8014088:	4602      	mov	r2, r0
 801408a:	68fb      	ldr	r3, [r7, #12]
 801408c:	4313      	orrs	r3, r2
 801408e:	60fb      	str	r3, [r7, #12]
    }    
    
    if (gintsts.b.hcintr)
 8014090:	7afb      	ldrb	r3, [r7, #11]
 8014092:	f003 0302 	and.w	r3, r3, #2
 8014096:	b2db      	uxtb	r3, r3
 8014098:	2b00      	cmp	r3, #0
 801409a:	d006      	beq.n	80140aa <USBH_OTG_ISR_Handler+0xb2>
    {
      retval |= USB_OTG_USBH_handle_hc_ISR (pdev);
 801409c:	6878      	ldr	r0, [r7, #4]
 801409e:	f000 f830 	bl	8014102 <USB_OTG_USBH_handle_hc_ISR>
 80140a2:	4602      	mov	r2, r0
 80140a4:	68fb      	ldr	r3, [r7, #12]
 80140a6:	4313      	orrs	r3, r2
 80140a8:	60fb      	str	r3, [r7, #12]
    }
    
    if (gintsts.b.portintr)
 80140aa:	7afb      	ldrb	r3, [r7, #11]
 80140ac:	f003 0301 	and.w	r3, r3, #1
 80140b0:	b2db      	uxtb	r3, r3
 80140b2:	2b00      	cmp	r3, #0
 80140b4:	d006      	beq.n	80140c4 <USBH_OTG_ISR_Handler+0xcc>
    {
      retval |= USB_OTG_USBH_handle_port_ISR (pdev);
 80140b6:	6878      	ldr	r0, [r7, #4]
 80140b8:	f000 fa24 	bl	8014504 <USB_OTG_USBH_handle_port_ISR>
 80140bc:	4602      	mov	r2, r0
 80140be:	68fb      	ldr	r3, [r7, #12]
 80140c0:	4313      	orrs	r3, r2
 80140c2:	60fb      	str	r3, [r7, #12]
    }
    
    if (gintsts.b.disconnect)
 80140c4:	7afb      	ldrb	r3, [r7, #11]
 80140c6:	f003 0320 	and.w	r3, r3, #32
 80140ca:	b2db      	uxtb	r3, r3
 80140cc:	2b00      	cmp	r3, #0
 80140ce:	d006      	beq.n	80140de <USBH_OTG_ISR_Handler+0xe6>
    {
      retval |= USB_OTG_USBH_handle_Disconnect_ISR (pdev);  
 80140d0:	6878      	ldr	r0, [r7, #4]
 80140d2:	f000 f877 	bl	80141c4 <USB_OTG_USBH_handle_Disconnect_ISR>
 80140d6:	4602      	mov	r2, r0
 80140d8:	68fb      	ldr	r3, [r7, #12]
 80140da:	4313      	orrs	r3, r2
 80140dc:	60fb      	str	r3, [r7, #12]
      
    }
    
    if (gintsts.b.incomplisoout)
 80140de:	7abb      	ldrb	r3, [r7, #10]
 80140e0:	f003 0320 	and.w	r3, r3, #32
 80140e4:	b2db      	uxtb	r3, r3
 80140e6:	2b00      	cmp	r3, #0
 80140e8:	d006      	beq.n	80140f8 <USBH_OTG_ISR_Handler+0x100>
    {
      retval |= USB_OTG_USBH_handle_IncompletePeriodicXfer_ISR (pdev);
 80140ea:	6878      	ldr	r0, [r7, #4]
 80140ec:	f001 f909 	bl	8015302 <USB_OTG_USBH_handle_IncompletePeriodicXfer_ISR>
 80140f0:	4602      	mov	r2, r0
 80140f2:	68fb      	ldr	r3, [r7, #12]
 80140f4:	4313      	orrs	r3, r2
 80140f6:	60fb      	str	r3, [r7, #12]
    }
    
    
  }
  return retval;
 80140f8:	68fb      	ldr	r3, [r7, #12]
}
 80140fa:	4618      	mov	r0, r3
 80140fc:	3710      	adds	r7, #16
 80140fe:	46bd      	mov	sp, r7
 8014100:	bd80      	pop	{r7, pc}

08014102 <USB_OTG_USBH_handle_hc_ISR>:
*         This function indicates that one or more host channels has a pending
* @param  pdev: Selected device
* @retval status 
*/
static uint32_t USB_OTG_USBH_handle_hc_ISR (USB_OTG_CORE_HANDLE *pdev)
{
 8014102:	b580      	push	{r7, lr}
 8014104:	b086      	sub	sp, #24
 8014106:	af00      	add	r7, sp, #0
 8014108:	6078      	str	r0, [r7, #4]
  USB_OTG_HAINT_TypeDef        haint;
  USB_OTG_HCCHAR_TypeDef       hcchar;
  uint32_t i = 0;
 801410a:	2300      	movs	r3, #0
 801410c:	617b      	str	r3, [r7, #20]
  uint32_t retval = 0;
 801410e:	2300      	movs	r3, #0
 8014110:	613b      	str	r3, [r7, #16]
  
  /* Clear appropriate bits in HCINTn to clear the interrupt bit in
  * GINTSTS */
  
  haint.d32 = USB_OTG_ReadHostAllChannels_intr(pdev);
 8014112:	6878      	ldr	r0, [r7, #4]
 8014114:	f7ff fae2 	bl	80136dc <USB_OTG_ReadHostAllChannels_intr>
 8014118:	4603      	mov	r3, r0
 801411a:	60fb      	str	r3, [r7, #12]
  
  for (i = 0; i < pdev->cfg.host_channels ; i++)
 801411c:	2300      	movs	r3, #0
 801411e:	617b      	str	r3, [r7, #20]
 8014120:	e02a      	b.n	8014178 <USB_OTG_USBH_handle_hc_ISR+0x76>
  {
    if (haint.b.chint & (1 << i))
 8014122:	89bb      	ldrh	r3, [r7, #12]
 8014124:	461a      	mov	r2, r3
 8014126:	697b      	ldr	r3, [r7, #20]
 8014128:	fa42 f303 	asr.w	r3, r2, r3
 801412c:	f003 0301 	and.w	r3, r3, #1
 8014130:	2b00      	cmp	r3, #0
 8014132:	d01e      	beq.n	8014172 <USB_OTG_USBH_handle_hc_ISR+0x70>
    {
      hcchar.d32 = USB_OTG_READ_REG32(&pdev->regs.HC_REGS[i]->HCCHAR);
 8014134:	687a      	ldr	r2, [r7, #4]
 8014136:	697b      	ldr	r3, [r7, #20]
 8014138:	3322      	adds	r3, #34	; 0x22
 801413a:	009b      	lsls	r3, r3, #2
 801413c:	4413      	add	r3, r2
 801413e:	689b      	ldr	r3, [r3, #8]
 8014140:	681b      	ldr	r3, [r3, #0]
 8014142:	60bb      	str	r3, [r7, #8]
      
      if (hcchar.b.epdir)
 8014144:	7a7b      	ldrb	r3, [r7, #9]
 8014146:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 801414a:	b2db      	uxtb	r3, r3
 801414c:	2b00      	cmp	r3, #0
 801414e:	d008      	beq.n	8014162 <USB_OTG_USBH_handle_hc_ISR+0x60>
      {
        retval |= USB_OTG_USBH_handle_hc_n_In_ISR (pdev, i);
 8014150:	6979      	ldr	r1, [r7, #20]
 8014152:	6878      	ldr	r0, [r7, #4]
 8014154:	f000 fd2f 	bl	8014bb6 <USB_OTG_USBH_handle_hc_n_In_ISR>
 8014158:	4602      	mov	r2, r0
 801415a:	693b      	ldr	r3, [r7, #16]
 801415c:	4313      	orrs	r3, r2
 801415e:	613b      	str	r3, [r7, #16]
 8014160:	e007      	b.n	8014172 <USB_OTG_USBH_handle_hc_ISR+0x70>
      }
      else
      {
        retval |=  USB_OTG_USBH_handle_hc_n_Out_ISR (pdev, i);
 8014162:	6979      	ldr	r1, [r7, #20]
 8014164:	6878      	ldr	r0, [r7, #4]
 8014166:	f000 fa7f 	bl	8014668 <USB_OTG_USBH_handle_hc_n_Out_ISR>
 801416a:	4602      	mov	r2, r0
 801416c:	693b      	ldr	r3, [r7, #16]
 801416e:	4313      	orrs	r3, r2
 8014170:	613b      	str	r3, [r7, #16]
  for (i = 0; i < pdev->cfg.host_channels ; i++)
 8014172:	697b      	ldr	r3, [r7, #20]
 8014174:	3301      	adds	r3, #1
 8014176:	617b      	str	r3, [r7, #20]
 8014178:	687b      	ldr	r3, [r7, #4]
 801417a:	781b      	ldrb	r3, [r3, #0]
 801417c:	461a      	mov	r2, r3
 801417e:	697b      	ldr	r3, [r7, #20]
 8014180:	4293      	cmp	r3, r2
 8014182:	d3ce      	bcc.n	8014122 <USB_OTG_USBH_handle_hc_ISR+0x20>
      }
    }
  }
  
  return retval;
 8014184:	693b      	ldr	r3, [r7, #16]
}
 8014186:	4618      	mov	r0, r3
 8014188:	3718      	adds	r7, #24
 801418a:	46bd      	mov	sp, r7
 801418c:	bd80      	pop	{r7, pc}

0801418e <USB_OTG_USBH_handle_sof_ISR>:
*         Handles the start-of-frame interrupt in host mode.
* @param  pdev: Selected device
* @retval status 
*/
static uint32_t USB_OTG_USBH_handle_sof_ISR (USB_OTG_CORE_HANDLE *pdev)
{
 801418e:	b580      	push	{r7, lr}
 8014190:	b084      	sub	sp, #16
 8014192:	af00      	add	r7, sp, #0
 8014194:	6078      	str	r0, [r7, #4]
  USB_OTG_GINTSTS_TypeDef      gintsts;
  gintsts.d32 = 0;
 8014196:	2300      	movs	r3, #0
 8014198:	60fb      	str	r3, [r7, #12]
  
  USBH_HCD_INT_fops->SOF(pdev);
 801419a:	4b09      	ldr	r3, [pc, #36]	; (80141c0 <USB_OTG_USBH_handle_sof_ISR+0x32>)
 801419c:	681b      	ldr	r3, [r3, #0]
 801419e:	681b      	ldr	r3, [r3, #0]
 80141a0:	6878      	ldr	r0, [r7, #4]
 80141a2:	4798      	blx	r3
  
  /* Clear interrupt */
  gintsts.b.sofintr = 1;
 80141a4:	7b3b      	ldrb	r3, [r7, #12]
 80141a6:	f043 0308 	orr.w	r3, r3, #8
 80141aa:	733b      	strb	r3, [r7, #12]
  USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GINTSTS, gintsts.d32);
 80141ac:	687b      	ldr	r3, [r7, #4]
 80141ae:	68db      	ldr	r3, [r3, #12]
 80141b0:	68fa      	ldr	r2, [r7, #12]
 80141b2:	615a      	str	r2, [r3, #20]
  
  return 1;
 80141b4:	2301      	movs	r3, #1
}
 80141b6:	4618      	mov	r0, r3
 80141b8:	3710      	adds	r7, #16
 80141ba:	46bd      	mov	sp, r7
 80141bc:	bd80      	pop	{r7, pc}
 80141be:	bf00      	nop
 80141c0:	200000e0 	.word	0x200000e0

080141c4 <USB_OTG_USBH_handle_Disconnect_ISR>:
*         Handles disconnect event.
* @param  pdev: Selected device
* @retval status 
*/
static uint32_t USB_OTG_USBH_handle_Disconnect_ISR (USB_OTG_CORE_HANDLE *pdev)
{
 80141c4:	b580      	push	{r7, lr}
 80141c6:	b084      	sub	sp, #16
 80141c8:	af00      	add	r7, sp, #0
 80141ca:	6078      	str	r0, [r7, #4]
  USB_OTG_GINTSTS_TypeDef      gintsts;
  
  gintsts.d32 = 0;
 80141cc:	2300      	movs	r3, #0
 80141ce:	60fb      	str	r3, [r7, #12]
  
  USBH_HCD_INT_fops->DevDisconnected(pdev);
 80141d0:	4b08      	ldr	r3, [pc, #32]	; (80141f4 <USB_OTG_USBH_handle_Disconnect_ISR+0x30>)
 80141d2:	681b      	ldr	r3, [r3, #0]
 80141d4:	689b      	ldr	r3, [r3, #8]
 80141d6:	6878      	ldr	r0, [r7, #4]
 80141d8:	4798      	blx	r3
  
  /* Clear interrupt */
  gintsts.b.disconnect = 1;
 80141da:	7bfb      	ldrb	r3, [r7, #15]
 80141dc:	f043 0320 	orr.w	r3, r3, #32
 80141e0:	73fb      	strb	r3, [r7, #15]
  USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GINTSTS, gintsts.d32);
 80141e2:	687b      	ldr	r3, [r7, #4]
 80141e4:	68db      	ldr	r3, [r3, #12]
 80141e6:	68fa      	ldr	r2, [r7, #12]
 80141e8:	615a      	str	r2, [r3, #20]
  
  return 1;
 80141ea:	2301      	movs	r3, #1
}
 80141ec:	4618      	mov	r0, r3
 80141ee:	3710      	adds	r7, #16
 80141f0:	46bd      	mov	sp, r7
 80141f2:	bd80      	pop	{r7, pc}
 80141f4:	200000e0 	.word	0x200000e0

080141f8 <USB_OTG_USBH_handle_nptxfempty_ISR>:
*         Handles non periodic tx fifo empty.
* @param  pdev: Selected device
* @retval status 
*/
static uint32_t USB_OTG_USBH_handle_nptxfempty_ISR (USB_OTG_CORE_HANDLE *pdev)
{
 80141f8:	b580      	push	{r7, lr}
 80141fa:	b088      	sub	sp, #32
 80141fc:	af00      	add	r7, sp, #0
 80141fe:	6078      	str	r0, [r7, #4]
  USB_OTG_GINTMSK_TypeDef      intmsk;
  USB_OTG_HNPTXSTS_TypeDef     hnptxsts; 
  uint16_t                     len_words , len; 
  
  hnptxsts.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->HNPTXSTS);
 8014200:	687b      	ldr	r3, [r7, #4]
 8014202:	68db      	ldr	r3, [r3, #12]
 8014204:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014206:	60fb      	str	r3, [r7, #12]
  
  len_words = (pdev->host.hc[hnptxsts.b.nptxqtop.chnum].xfer_len + 3) / 4;
 8014208:	7c3b      	ldrb	r3, [r7, #16]
 801420a:	f3c3 03c3 	ubfx	r3, r3, #3, #4
 801420e:	b2db      	uxtb	r3, r3
 8014210:	687a      	ldr	r2, [r7, #4]
 8014212:	015b      	lsls	r3, r3, #5
 8014214:	4413      	add	r3, r2
 8014216:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 801421a:	681b      	ldr	r3, [r3, #0]
 801421c:	3303      	adds	r3, #3
 801421e:	089b      	lsrs	r3, r3, #2
 8014220:	83fb      	strh	r3, [r7, #30]
  
  while ((hnptxsts.b.nptxfspcavail > len_words)&&
 8014222:	e096      	b.n	8014352 <USB_OTG_USBH_handle_nptxfempty_ISR+0x15a>
         (pdev->host.hc[hnptxsts.b.nptxqtop.chnum].xfer_len != 0))
  {
    
    len = hnptxsts.b.nptxfspcavail * 4;
 8014224:	89bb      	ldrh	r3, [r7, #12]
 8014226:	009b      	lsls	r3, r3, #2
 8014228:	83bb      	strh	r3, [r7, #28]
    
    if (len > pdev->host.hc[hnptxsts.b.nptxqtop.chnum].xfer_len)
 801422a:	8bba      	ldrh	r2, [r7, #28]
 801422c:	7c3b      	ldrb	r3, [r7, #16]
 801422e:	f3c3 03c3 	ubfx	r3, r3, #3, #4
 8014232:	b2db      	uxtb	r3, r3
 8014234:	6879      	ldr	r1, [r7, #4]
 8014236:	015b      	lsls	r3, r3, #5
 8014238:	440b      	add	r3, r1
 801423a:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 801423e:	681b      	ldr	r3, [r3, #0]
 8014240:	429a      	cmp	r2, r3
 8014242:	d919      	bls.n	8014278 <USB_OTG_USBH_handle_nptxfempty_ISR+0x80>
    {
      /* Last packet */
      len = pdev->host.hc[hnptxsts.b.nptxqtop.chnum].xfer_len;
 8014244:	7c3b      	ldrb	r3, [r7, #16]
 8014246:	f3c3 03c3 	ubfx	r3, r3, #3, #4
 801424a:	b2db      	uxtb	r3, r3
 801424c:	687a      	ldr	r2, [r7, #4]
 801424e:	015b      	lsls	r3, r3, #5
 8014250:	4413      	add	r3, r2
 8014252:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 8014256:	681b      	ldr	r3, [r3, #0]
 8014258:	83bb      	strh	r3, [r7, #28]
      
      intmsk.d32 = 0;
 801425a:	2300      	movs	r3, #0
 801425c:	61bb      	str	r3, [r7, #24]
      intmsk.b.nptxfempty = 1;
 801425e:	7e3b      	ldrb	r3, [r7, #24]
 8014260:	f043 0320 	orr.w	r3, r3, #32
 8014264:	763b      	strb	r3, [r7, #24]
      USB_OTG_MODIFY_REG32( &pdev->regs.GREGS->GINTMSK, intmsk.d32, 0);       
 8014266:	687b      	ldr	r3, [r7, #4]
 8014268:	68db      	ldr	r3, [r3, #12]
 801426a:	6999      	ldr	r1, [r3, #24]
 801426c:	69bb      	ldr	r3, [r7, #24]
 801426e:	43da      	mvns	r2, r3
 8014270:	687b      	ldr	r3, [r7, #4]
 8014272:	68db      	ldr	r3, [r3, #12]
 8014274:	400a      	ands	r2, r1
 8014276:	619a      	str	r2, [r3, #24]
    }
    
    len_words = (pdev->host.hc[hnptxsts.b.nptxqtop.chnum].xfer_len + 3) / 4;
 8014278:	7c3b      	ldrb	r3, [r7, #16]
 801427a:	f3c3 03c3 	ubfx	r3, r3, #3, #4
 801427e:	b2db      	uxtb	r3, r3
 8014280:	687a      	ldr	r2, [r7, #4]
 8014282:	015b      	lsls	r3, r3, #5
 8014284:	4413      	add	r3, r2
 8014286:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 801428a:	681b      	ldr	r3, [r3, #0]
 801428c:	3303      	adds	r3, #3
 801428e:	089b      	lsrs	r3, r3, #2
 8014290:	83fb      	strh	r3, [r7, #30]
    
    USB_OTG_WritePacket (pdev , pdev->host.hc[hnptxsts.b.nptxqtop.chnum].xfer_buff, hnptxsts.b.nptxqtop.chnum, len);
 8014292:	7c3b      	ldrb	r3, [r7, #16]
 8014294:	f3c3 03c3 	ubfx	r3, r3, #3, #4
 8014298:	b2db      	uxtb	r3, r3
 801429a:	687a      	ldr	r2, [r7, #4]
 801429c:	3315      	adds	r3, #21
 801429e:	015b      	lsls	r3, r3, #5
 80142a0:	4413      	add	r3, r2
 80142a2:	f503 738c 	add.w	r3, r3, #280	; 0x118
 80142a6:	6819      	ldr	r1, [r3, #0]
 80142a8:	7c3b      	ldrb	r3, [r7, #16]
 80142aa:	f3c3 03c3 	ubfx	r3, r3, #3, #4
 80142ae:	b2db      	uxtb	r3, r3
 80142b0:	461a      	mov	r2, r3
 80142b2:	8bbb      	ldrh	r3, [r7, #28]
 80142b4:	6878      	ldr	r0, [r7, #4]
 80142b6:	f7fe fdd7 	bl	8012e68 <USB_OTG_WritePacket>
    
    pdev->host.hc[hnptxsts.b.nptxqtop.chnum].xfer_buff  += len;
 80142ba:	7c3b      	ldrb	r3, [r7, #16]
 80142bc:	f3c3 03c3 	ubfx	r3, r3, #3, #4
 80142c0:	b2db      	uxtb	r3, r3
 80142c2:	687a      	ldr	r2, [r7, #4]
 80142c4:	3315      	adds	r3, #21
 80142c6:	015b      	lsls	r3, r3, #5
 80142c8:	4413      	add	r3, r2
 80142ca:	f503 738c 	add.w	r3, r3, #280	; 0x118
 80142ce:	681a      	ldr	r2, [r3, #0]
 80142d0:	8bbb      	ldrh	r3, [r7, #28]
 80142d2:	7c39      	ldrb	r1, [r7, #16]
 80142d4:	f3c1 01c3 	ubfx	r1, r1, #3, #4
 80142d8:	b2c9      	uxtb	r1, r1
 80142da:	4608      	mov	r0, r1
 80142dc:	441a      	add	r2, r3
 80142de:	6879      	ldr	r1, [r7, #4]
 80142e0:	f100 0315 	add.w	r3, r0, #21
 80142e4:	015b      	lsls	r3, r3, #5
 80142e6:	440b      	add	r3, r1
 80142e8:	f503 738c 	add.w	r3, r3, #280	; 0x118
 80142ec:	601a      	str	r2, [r3, #0]
    pdev->host.hc[hnptxsts.b.nptxqtop.chnum].xfer_len   -= len;
 80142ee:	7c3b      	ldrb	r3, [r7, #16]
 80142f0:	f3c3 03c3 	ubfx	r3, r3, #3, #4
 80142f4:	b2db      	uxtb	r3, r3
 80142f6:	687a      	ldr	r2, [r7, #4]
 80142f8:	015b      	lsls	r3, r3, #5
 80142fa:	4413      	add	r3, r2
 80142fc:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 8014300:	681a      	ldr	r2, [r3, #0]
 8014302:	8bbb      	ldrh	r3, [r7, #28]
 8014304:	7c39      	ldrb	r1, [r7, #16]
 8014306:	f3c1 01c3 	ubfx	r1, r1, #3, #4
 801430a:	b2c9      	uxtb	r1, r1
 801430c:	4608      	mov	r0, r1
 801430e:	1ad2      	subs	r2, r2, r3
 8014310:	6879      	ldr	r1, [r7, #4]
 8014312:	0143      	lsls	r3, r0, #5
 8014314:	440b      	add	r3, r1
 8014316:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 801431a:	601a      	str	r2, [r3, #0]
    pdev->host.hc[hnptxsts.b.nptxqtop.chnum].xfer_count  += len; 
 801431c:	7c3b      	ldrb	r3, [r7, #16]
 801431e:	f3c3 03c3 	ubfx	r3, r3, #3, #4
 8014322:	b2db      	uxtb	r3, r3
 8014324:	687a      	ldr	r2, [r7, #4]
 8014326:	015b      	lsls	r3, r3, #5
 8014328:	4413      	add	r3, r2
 801432a:	f503 7370 	add.w	r3, r3, #960	; 0x3c0
 801432e:	681a      	ldr	r2, [r3, #0]
 8014330:	8bbb      	ldrh	r3, [r7, #28]
 8014332:	7c39      	ldrb	r1, [r7, #16]
 8014334:	f3c1 01c3 	ubfx	r1, r1, #3, #4
 8014338:	b2c9      	uxtb	r1, r1
 801433a:	4608      	mov	r0, r1
 801433c:	441a      	add	r2, r3
 801433e:	6879      	ldr	r1, [r7, #4]
 8014340:	0143      	lsls	r3, r0, #5
 8014342:	440b      	add	r3, r1
 8014344:	f503 7370 	add.w	r3, r3, #960	; 0x3c0
 8014348:	601a      	str	r2, [r3, #0]
    
    hnptxsts.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->HNPTXSTS);
 801434a:	687b      	ldr	r3, [r7, #4]
 801434c:	68db      	ldr	r3, [r3, #12]
 801434e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014350:	60fb      	str	r3, [r7, #12]
  while ((hnptxsts.b.nptxfspcavail > len_words)&&
 8014352:	89bb      	ldrh	r3, [r7, #12]
 8014354:	8bfa      	ldrh	r2, [r7, #30]
 8014356:	429a      	cmp	r2, r3
 8014358:	d20c      	bcs.n	8014374 <USB_OTG_USBH_handle_nptxfempty_ISR+0x17c>
         (pdev->host.hc[hnptxsts.b.nptxqtop.chnum].xfer_len != 0))
 801435a:	7c3b      	ldrb	r3, [r7, #16]
 801435c:	f3c3 03c3 	ubfx	r3, r3, #3, #4
 8014360:	b2db      	uxtb	r3, r3
 8014362:	687a      	ldr	r2, [r7, #4]
 8014364:	015b      	lsls	r3, r3, #5
 8014366:	4413      	add	r3, r2
 8014368:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 801436c:	681b      	ldr	r3, [r3, #0]
  while ((hnptxsts.b.nptxfspcavail > len_words)&&
 801436e:	2b00      	cmp	r3, #0
 8014370:	f47f af58 	bne.w	8014224 <USB_OTG_USBH_handle_nptxfempty_ISR+0x2c>
  }  
  
  return 1;
 8014374:	2301      	movs	r3, #1
}
 8014376:	4618      	mov	r0, r3
 8014378:	3720      	adds	r7, #32
 801437a:	46bd      	mov	sp, r7
 801437c:	bd80      	pop	{r7, pc}

0801437e <USB_OTG_USBH_handle_ptxfempty_ISR>:
*         Handles periodic tx fifo empty
* @param  pdev: Selected device
* @retval status 
*/
static uint32_t USB_OTG_USBH_handle_ptxfempty_ISR (USB_OTG_CORE_HANDLE *pdev)
{
 801437e:	b580      	push	{r7, lr}
 8014380:	b086      	sub	sp, #24
 8014382:	af00      	add	r7, sp, #0
 8014384:	6078      	str	r0, [r7, #4]
  USB_OTG_GINTMSK_TypeDef      intmsk;
  USB_OTG_HPTXSTS_TypeDef      hptxsts; 
  uint16_t                     len_words , len; 
  
  hptxsts.d32 = USB_OTG_READ_REG32(&pdev->regs.HREGS->HPTXSTS);
 8014386:	687b      	ldr	r3, [r7, #4]
 8014388:	695b      	ldr	r3, [r3, #20]
 801438a:	691b      	ldr	r3, [r3, #16]
 801438c:	60bb      	str	r3, [r7, #8]
  
  len_words = (pdev->host.hc[hptxsts.b.ptxqtop.chnum].xfer_len + 3) / 4;
 801438e:	7b3b      	ldrb	r3, [r7, #12]
 8014390:	f3c3 03c3 	ubfx	r3, r3, #3, #4
 8014394:	b2db      	uxtb	r3, r3
 8014396:	687a      	ldr	r2, [r7, #4]
 8014398:	015b      	lsls	r3, r3, #5
 801439a:	4413      	add	r3, r2
 801439c:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 80143a0:	681b      	ldr	r3, [r3, #0]
 80143a2:	3303      	adds	r3, #3
 80143a4:	089b      	lsrs	r3, r3, #2
 80143a6:	82fb      	strh	r3, [r7, #22]
  
  while ((hptxsts.b.ptxfspcavail > len_words)&&
 80143a8:	e096      	b.n	80144d8 <USB_OTG_USBH_handle_ptxfempty_ISR+0x15a>
         (pdev->host.hc[hptxsts.b.ptxqtop.chnum].xfer_len != 0))    
  {
    
    len = hptxsts.b.ptxfspcavail * 4;
 80143aa:	893b      	ldrh	r3, [r7, #8]
 80143ac:	009b      	lsls	r3, r3, #2
 80143ae:	82bb      	strh	r3, [r7, #20]
    
    if (len > pdev->host.hc[hptxsts.b.ptxqtop.chnum].xfer_len)
 80143b0:	8aba      	ldrh	r2, [r7, #20]
 80143b2:	7b3b      	ldrb	r3, [r7, #12]
 80143b4:	f3c3 03c3 	ubfx	r3, r3, #3, #4
 80143b8:	b2db      	uxtb	r3, r3
 80143ba:	6879      	ldr	r1, [r7, #4]
 80143bc:	015b      	lsls	r3, r3, #5
 80143be:	440b      	add	r3, r1
 80143c0:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 80143c4:	681b      	ldr	r3, [r3, #0]
 80143c6:	429a      	cmp	r2, r3
 80143c8:	d919      	bls.n	80143fe <USB_OTG_USBH_handle_ptxfempty_ISR+0x80>
    {
      len = pdev->host.hc[hptxsts.b.ptxqtop.chnum].xfer_len;
 80143ca:	7b3b      	ldrb	r3, [r7, #12]
 80143cc:	f3c3 03c3 	ubfx	r3, r3, #3, #4
 80143d0:	b2db      	uxtb	r3, r3
 80143d2:	687a      	ldr	r2, [r7, #4]
 80143d4:	015b      	lsls	r3, r3, #5
 80143d6:	4413      	add	r3, r2
 80143d8:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 80143dc:	681b      	ldr	r3, [r3, #0]
 80143de:	82bb      	strh	r3, [r7, #20]
      /* Last packet */
      intmsk.d32 = 0;
 80143e0:	2300      	movs	r3, #0
 80143e2:	613b      	str	r3, [r7, #16]
      intmsk.b.ptxfempty = 1;
 80143e4:	7cfb      	ldrb	r3, [r7, #19]
 80143e6:	f043 0304 	orr.w	r3, r3, #4
 80143ea:	74fb      	strb	r3, [r7, #19]
      USB_OTG_MODIFY_REG32( &pdev->regs.GREGS->GINTMSK, intmsk.d32, 0); 
 80143ec:	687b      	ldr	r3, [r7, #4]
 80143ee:	68db      	ldr	r3, [r3, #12]
 80143f0:	6999      	ldr	r1, [r3, #24]
 80143f2:	693b      	ldr	r3, [r7, #16]
 80143f4:	43da      	mvns	r2, r3
 80143f6:	687b      	ldr	r3, [r7, #4]
 80143f8:	68db      	ldr	r3, [r3, #12]
 80143fa:	400a      	ands	r2, r1
 80143fc:	619a      	str	r2, [r3, #24]
    }
    
    len_words = (pdev->host.hc[hptxsts.b.ptxqtop.chnum].xfer_len + 3) / 4;
 80143fe:	7b3b      	ldrb	r3, [r7, #12]
 8014400:	f3c3 03c3 	ubfx	r3, r3, #3, #4
 8014404:	b2db      	uxtb	r3, r3
 8014406:	687a      	ldr	r2, [r7, #4]
 8014408:	015b      	lsls	r3, r3, #5
 801440a:	4413      	add	r3, r2
 801440c:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 8014410:	681b      	ldr	r3, [r3, #0]
 8014412:	3303      	adds	r3, #3
 8014414:	089b      	lsrs	r3, r3, #2
 8014416:	82fb      	strh	r3, [r7, #22]
    
    USB_OTG_WritePacket (pdev , pdev->host.hc[hptxsts.b.ptxqtop.chnum].xfer_buff, hptxsts.b.ptxqtop.chnum, len);
 8014418:	7b3b      	ldrb	r3, [r7, #12]
 801441a:	f3c3 03c3 	ubfx	r3, r3, #3, #4
 801441e:	b2db      	uxtb	r3, r3
 8014420:	687a      	ldr	r2, [r7, #4]
 8014422:	3315      	adds	r3, #21
 8014424:	015b      	lsls	r3, r3, #5
 8014426:	4413      	add	r3, r2
 8014428:	f503 738c 	add.w	r3, r3, #280	; 0x118
 801442c:	6819      	ldr	r1, [r3, #0]
 801442e:	7b3b      	ldrb	r3, [r7, #12]
 8014430:	f3c3 03c3 	ubfx	r3, r3, #3, #4
 8014434:	b2db      	uxtb	r3, r3
 8014436:	461a      	mov	r2, r3
 8014438:	8abb      	ldrh	r3, [r7, #20]
 801443a:	6878      	ldr	r0, [r7, #4]
 801443c:	f7fe fd14 	bl	8012e68 <USB_OTG_WritePacket>
    
    pdev->host.hc[hptxsts.b.ptxqtop.chnum].xfer_buff  += len;
 8014440:	7b3b      	ldrb	r3, [r7, #12]
 8014442:	f3c3 03c3 	ubfx	r3, r3, #3, #4
 8014446:	b2db      	uxtb	r3, r3
 8014448:	687a      	ldr	r2, [r7, #4]
 801444a:	3315      	adds	r3, #21
 801444c:	015b      	lsls	r3, r3, #5
 801444e:	4413      	add	r3, r2
 8014450:	f503 738c 	add.w	r3, r3, #280	; 0x118
 8014454:	681a      	ldr	r2, [r3, #0]
 8014456:	8abb      	ldrh	r3, [r7, #20]
 8014458:	7b39      	ldrb	r1, [r7, #12]
 801445a:	f3c1 01c3 	ubfx	r1, r1, #3, #4
 801445e:	b2c9      	uxtb	r1, r1
 8014460:	4608      	mov	r0, r1
 8014462:	441a      	add	r2, r3
 8014464:	6879      	ldr	r1, [r7, #4]
 8014466:	f100 0315 	add.w	r3, r0, #21
 801446a:	015b      	lsls	r3, r3, #5
 801446c:	440b      	add	r3, r1
 801446e:	f503 738c 	add.w	r3, r3, #280	; 0x118
 8014472:	601a      	str	r2, [r3, #0]
    pdev->host.hc[hptxsts.b.ptxqtop.chnum].xfer_len   -= len;
 8014474:	7b3b      	ldrb	r3, [r7, #12]
 8014476:	f3c3 03c3 	ubfx	r3, r3, #3, #4
 801447a:	b2db      	uxtb	r3, r3
 801447c:	687a      	ldr	r2, [r7, #4]
 801447e:	015b      	lsls	r3, r3, #5
 8014480:	4413      	add	r3, r2
 8014482:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 8014486:	681a      	ldr	r2, [r3, #0]
 8014488:	8abb      	ldrh	r3, [r7, #20]
 801448a:	7b39      	ldrb	r1, [r7, #12]
 801448c:	f3c1 01c3 	ubfx	r1, r1, #3, #4
 8014490:	b2c9      	uxtb	r1, r1
 8014492:	4608      	mov	r0, r1
 8014494:	1ad2      	subs	r2, r2, r3
 8014496:	6879      	ldr	r1, [r7, #4]
 8014498:	0143      	lsls	r3, r0, #5
 801449a:	440b      	add	r3, r1
 801449c:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 80144a0:	601a      	str	r2, [r3, #0]
    pdev->host.hc[hptxsts.b.ptxqtop.chnum].xfer_count  += len; 
 80144a2:	7b3b      	ldrb	r3, [r7, #12]
 80144a4:	f3c3 03c3 	ubfx	r3, r3, #3, #4
 80144a8:	b2db      	uxtb	r3, r3
 80144aa:	687a      	ldr	r2, [r7, #4]
 80144ac:	015b      	lsls	r3, r3, #5
 80144ae:	4413      	add	r3, r2
 80144b0:	f503 7370 	add.w	r3, r3, #960	; 0x3c0
 80144b4:	681a      	ldr	r2, [r3, #0]
 80144b6:	8abb      	ldrh	r3, [r7, #20]
 80144b8:	7b39      	ldrb	r1, [r7, #12]
 80144ba:	f3c1 01c3 	ubfx	r1, r1, #3, #4
 80144be:	b2c9      	uxtb	r1, r1
 80144c0:	4608      	mov	r0, r1
 80144c2:	441a      	add	r2, r3
 80144c4:	6879      	ldr	r1, [r7, #4]
 80144c6:	0143      	lsls	r3, r0, #5
 80144c8:	440b      	add	r3, r1
 80144ca:	f503 7370 	add.w	r3, r3, #960	; 0x3c0
 80144ce:	601a      	str	r2, [r3, #0]
    
    hptxsts.d32 = USB_OTG_READ_REG32(&pdev->regs.HREGS->HPTXSTS);
 80144d0:	687b      	ldr	r3, [r7, #4]
 80144d2:	695b      	ldr	r3, [r3, #20]
 80144d4:	691b      	ldr	r3, [r3, #16]
 80144d6:	60bb      	str	r3, [r7, #8]
  while ((hptxsts.b.ptxfspcavail > len_words)&&
 80144d8:	893b      	ldrh	r3, [r7, #8]
 80144da:	8afa      	ldrh	r2, [r7, #22]
 80144dc:	429a      	cmp	r2, r3
 80144de:	d20c      	bcs.n	80144fa <USB_OTG_USBH_handle_ptxfempty_ISR+0x17c>
         (pdev->host.hc[hptxsts.b.ptxqtop.chnum].xfer_len != 0))    
 80144e0:	7b3b      	ldrb	r3, [r7, #12]
 80144e2:	f3c3 03c3 	ubfx	r3, r3, #3, #4
 80144e6:	b2db      	uxtb	r3, r3
 80144e8:	687a      	ldr	r2, [r7, #4]
 80144ea:	015b      	lsls	r3, r3, #5
 80144ec:	4413      	add	r3, r2
 80144ee:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 80144f2:	681b      	ldr	r3, [r3, #0]
  while ((hptxsts.b.ptxfspcavail > len_words)&&
 80144f4:	2b00      	cmp	r3, #0
 80144f6:	f47f af58 	bne.w	80143aa <USB_OTG_USBH_handle_ptxfempty_ISR+0x2c>
  }  
  
  return 1;
 80144fa:	2301      	movs	r3, #1
}
 80144fc:	4618      	mov	r0, r3
 80144fe:	3718      	adds	r7, #24
 8014500:	46bd      	mov	sp, r7
 8014502:	bd80      	pop	{r7, pc}

08014504 <USB_OTG_USBH_handle_port_ISR>:
*/
#if defined ( __ICCARM__ ) /*!< IAR Compiler */
#pragma optimize = none
#endif /* __CC_ARM */
static uint32_t USB_OTG_USBH_handle_port_ISR (USB_OTG_CORE_HANDLE *pdev)
{
 8014504:	b580      	push	{r7, lr}
 8014506:	b088      	sub	sp, #32
 8014508:	af00      	add	r7, sp, #0
 801450a:	6078      	str	r0, [r7, #4]
  USB_OTG_HPRT0_TypeDef  hprt0;
  USB_OTG_HPRT0_TypeDef  hprt0_dup;
  USB_OTG_HCFG_TypeDef   hcfg;    
  uint32_t do_reset = 0;
 801450c:	2300      	movs	r3, #0
 801450e:	61fb      	str	r3, [r7, #28]
  uint32_t retval = 0;
 8014510:	2300      	movs	r3, #0
 8014512:	61bb      	str	r3, [r7, #24]
  
  hcfg.d32 = 0;
 8014514:	2300      	movs	r3, #0
 8014516:	60fb      	str	r3, [r7, #12]
  hprt0.d32 = 0;
 8014518:	2300      	movs	r3, #0
 801451a:	617b      	str	r3, [r7, #20]
  hprt0_dup.d32 = 0;
 801451c:	2300      	movs	r3, #0
 801451e:	613b      	str	r3, [r7, #16]
  
  hprt0.d32 = USB_OTG_READ_REG32(pdev->regs.HPRT0);
 8014520:	687b      	ldr	r3, [r7, #4]
 8014522:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8014526:	681b      	ldr	r3, [r3, #0]
 8014528:	617b      	str	r3, [r7, #20]
  hprt0_dup.d32 = USB_OTG_READ_REG32(pdev->regs.HPRT0);
 801452a:	687b      	ldr	r3, [r7, #4]
 801452c:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8014530:	681b      	ldr	r3, [r3, #0]
 8014532:	613b      	str	r3, [r7, #16]
  
  /* Clear the interrupt bits in GINTSTS */
  
  hprt0_dup.b.prtena = 0;
 8014534:	7c3b      	ldrb	r3, [r7, #16]
 8014536:	f36f 0382 	bfc	r3, #2, #1
 801453a:	743b      	strb	r3, [r7, #16]
  hprt0_dup.b.prtconndet = 0;
 801453c:	7c3b      	ldrb	r3, [r7, #16]
 801453e:	f36f 0341 	bfc	r3, #1, #1
 8014542:	743b      	strb	r3, [r7, #16]
  hprt0_dup.b.prtenchng = 0;
 8014544:	7c3b      	ldrb	r3, [r7, #16]
 8014546:	f36f 03c3 	bfc	r3, #3, #1
 801454a:	743b      	strb	r3, [r7, #16]
  hprt0_dup.b.prtovrcurrchng = 0;
 801454c:	7c3b      	ldrb	r3, [r7, #16]
 801454e:	f36f 1345 	bfc	r3, #5, #1
 8014552:	743b      	strb	r3, [r7, #16]
  
  /* Port Connect Detected */
  if (hprt0.b.prtconndet)
 8014554:	7d3b      	ldrb	r3, [r7, #20]
 8014556:	f003 0302 	and.w	r3, r3, #2
 801455a:	b2db      	uxtb	r3, r3
 801455c:	2b00      	cmp	r3, #0
 801455e:	d00c      	beq.n	801457a <USB_OTG_USBH_handle_port_ISR+0x76>
  {

    hprt0_dup.b.prtconndet = 1;
 8014560:	7c3b      	ldrb	r3, [r7, #16]
 8014562:	f043 0302 	orr.w	r3, r3, #2
 8014566:	743b      	strb	r3, [r7, #16]
    USBH_HCD_INT_fops->DevConnected(pdev);
 8014568:	4b3e      	ldr	r3, [pc, #248]	; (8014664 <USB_OTG_USBH_handle_port_ISR+0x160>)
 801456a:	681b      	ldr	r3, [r3, #0]
 801456c:	685b      	ldr	r3, [r3, #4]
 801456e:	6878      	ldr	r0, [r7, #4]
 8014570:	4798      	blx	r3
    retval |= 1;
 8014572:	69bb      	ldr	r3, [r7, #24]
 8014574:	f043 0301 	orr.w	r3, r3, #1
 8014578:	61bb      	str	r3, [r7, #24]
  }
  
  /* Port Enable Changed */
  if (hprt0.b.prtenchng)
 801457a:	7d3b      	ldrb	r3, [r7, #20]
 801457c:	f003 0308 	and.w	r3, r3, #8
 8014580:	b2db      	uxtb	r3, r3
 8014582:	2b00      	cmp	r3, #0
 8014584:	d050      	beq.n	8014628 <USB_OTG_USBH_handle_port_ISR+0x124>
  {
    hprt0_dup.b.prtenchng = 1;
 8014586:	7c3b      	ldrb	r3, [r7, #16]
 8014588:	f043 0308 	orr.w	r3, r3, #8
 801458c:	743b      	strb	r3, [r7, #16]
    
    if (hprt0.b.prtena == 1)
 801458e:	7d3b      	ldrb	r3, [r7, #20]
 8014590:	f003 0304 	and.w	r3, r3, #4
 8014594:	b2db      	uxtb	r3, r3
 8014596:	2b00      	cmp	r3, #0
 8014598:	d046      	beq.n	8014628 <USB_OTG_USBH_handle_port_ISR+0x124>
    {
      
      USBH_HCD_INT_fops->DevConnected(pdev);
 801459a:	4b32      	ldr	r3, [pc, #200]	; (8014664 <USB_OTG_USBH_handle_port_ISR+0x160>)
 801459c:	681b      	ldr	r3, [r3, #0]
 801459e:	685b      	ldr	r3, [r3, #4]
 80145a0:	6878      	ldr	r0, [r7, #4]
 80145a2:	4798      	blx	r3
      
      if ((hprt0.b.prtspd == HPRT0_PRTSPD_LOW_SPEED) ||
 80145a4:	7dbb      	ldrb	r3, [r7, #22]
 80145a6:	f003 0306 	and.w	r3, r3, #6
 80145aa:	b2db      	uxtb	r3, r3
 80145ac:	2b04      	cmp	r3, #4
 80145ae:	d005      	beq.n	80145bc <USB_OTG_USBH_handle_port_ISR+0xb8>
          (hprt0.b.prtspd == HPRT0_PRTSPD_FULL_SPEED))
 80145b0:	7dbb      	ldrb	r3, [r7, #22]
 80145b2:	f003 0306 	and.w	r3, r3, #6
 80145b6:	b2db      	uxtb	r3, r3
      if ((hprt0.b.prtspd == HPRT0_PRTSPD_LOW_SPEED) ||
 80145b8:	2b02      	cmp	r3, #2
 80145ba:	d131      	bne.n	8014620 <USB_OTG_USBH_handle_port_ISR+0x11c>
      {
        
        hcfg.d32 = USB_OTG_READ_REG32(&pdev->regs.HREGS->HCFG);
 80145bc:	687b      	ldr	r3, [r7, #4]
 80145be:	695b      	ldr	r3, [r3, #20]
 80145c0:	681b      	ldr	r3, [r3, #0]
 80145c2:	60fb      	str	r3, [r7, #12]
        
        if (hprt0.b.prtspd == HPRT0_PRTSPD_LOW_SPEED)
 80145c4:	7dbb      	ldrb	r3, [r7, #22]
 80145c6:	f003 0306 	and.w	r3, r3, #6
 80145ca:	b2db      	uxtb	r3, r3
 80145cc:	2b04      	cmp	r3, #4
 80145ce:	d115      	bne.n	80145fc <USB_OTG_USBH_handle_port_ISR+0xf8>
        {
          USB_OTG_WRITE_REG32(&pdev->regs.HREGS->HFIR, 6000 );
 80145d0:	687b      	ldr	r3, [r7, #4]
 80145d2:	695b      	ldr	r3, [r3, #20]
 80145d4:	f241 7270 	movw	r2, #6000	; 0x1770
 80145d8:	605a      	str	r2, [r3, #4]
          if (hcfg.b.fslspclksel != HCFG_6_MHZ)
 80145da:	7b3b      	ldrb	r3, [r7, #12]
 80145dc:	f003 0303 	and.w	r3, r3, #3
 80145e0:	b2db      	uxtb	r3, r3
 80145e2:	2b02      	cmp	r3, #2
 80145e4:	d01f      	beq.n	8014626 <USB_OTG_USBH_handle_port_ISR+0x122>
          {
            if(pdev->cfg.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80145e6:	687b      	ldr	r3, [r7, #4]
 80145e8:	7a1b      	ldrb	r3, [r3, #8]
 80145ea:	2b02      	cmp	r3, #2
 80145ec:	d103      	bne.n	80145f6 <USB_OTG_USBH_handle_port_ISR+0xf2>
            {
              USB_OTG_InitFSLSPClkSel(pdev ,HCFG_6_MHZ );
 80145ee:	2102      	movs	r1, #2
 80145f0:	6878      	ldr	r0, [r7, #4]
 80145f2:	f7ff f837 	bl	8013664 <USB_OTG_InitFSLSPClkSel>
            }
            do_reset = 1;
 80145f6:	2301      	movs	r3, #1
 80145f8:	61fb      	str	r3, [r7, #28]
        if (hprt0.b.prtspd == HPRT0_PRTSPD_LOW_SPEED)
 80145fa:	e014      	b.n	8014626 <USB_OTG_USBH_handle_port_ISR+0x122>
          }
        }
        else
        {
          
          USB_OTG_WRITE_REG32(&pdev->regs.HREGS->HFIR, 48000 );            
 80145fc:	687b      	ldr	r3, [r7, #4]
 80145fe:	695b      	ldr	r3, [r3, #20]
 8014600:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8014604:	605a      	str	r2, [r3, #4]
          if (hcfg.b.fslspclksel != HCFG_48_MHZ)
 8014606:	7b3b      	ldrb	r3, [r7, #12]
 8014608:	f003 0303 	and.w	r3, r3, #3
 801460c:	b2db      	uxtb	r3, r3
 801460e:	2b01      	cmp	r3, #1
 8014610:	d009      	beq.n	8014626 <USB_OTG_USBH_handle_port_ISR+0x122>
          {
            USB_OTG_InitFSLSPClkSel(pdev ,HCFG_48_MHZ );
 8014612:	2101      	movs	r1, #1
 8014614:	6878      	ldr	r0, [r7, #4]
 8014616:	f7ff f825 	bl	8013664 <USB_OTG_InitFSLSPClkSel>
            do_reset = 1;
 801461a:	2301      	movs	r3, #1
 801461c:	61fb      	str	r3, [r7, #28]
        if (hprt0.b.prtspd == HPRT0_PRTSPD_LOW_SPEED)
 801461e:	e002      	b.n	8014626 <USB_OTG_USBH_handle_port_ISR+0x122>
          }
        }
      }
      else
      {
        do_reset = 1;
 8014620:	2301      	movs	r3, #1
 8014622:	61fb      	str	r3, [r7, #28]
 8014624:	e000      	b.n	8014628 <USB_OTG_USBH_handle_port_ISR+0x124>
        if (hprt0.b.prtspd == HPRT0_PRTSPD_LOW_SPEED)
 8014626:	bf00      	nop
      }
    }
  }
  /* Overcurrent Change Interrupt */
  if (hprt0.b.prtovrcurrchng)
 8014628:	7d3b      	ldrb	r3, [r7, #20]
 801462a:	f003 0320 	and.w	r3, r3, #32
 801462e:	b2db      	uxtb	r3, r3
 8014630:	2b00      	cmp	r3, #0
 8014632:	d007      	beq.n	8014644 <USB_OTG_USBH_handle_port_ISR+0x140>
  {
    hprt0_dup.b.prtovrcurrchng = 1;
 8014634:	7c3b      	ldrb	r3, [r7, #16]
 8014636:	f043 0320 	orr.w	r3, r3, #32
 801463a:	743b      	strb	r3, [r7, #16]
    retval |= 1;
 801463c:	69bb      	ldr	r3, [r7, #24]
 801463e:	f043 0301 	orr.w	r3, r3, #1
 8014642:	61bb      	str	r3, [r7, #24]
  }
  if (do_reset)
 8014644:	69fb      	ldr	r3, [r7, #28]
 8014646:	2b00      	cmp	r3, #0
 8014648:	d002      	beq.n	8014650 <USB_OTG_USBH_handle_port_ISR+0x14c>
  {
    USB_OTG_ResetPort(pdev);
 801464a:	6878      	ldr	r0, [r7, #4]
 801464c:	f7ff f853 	bl	80136f6 <USB_OTG_ResetPort>
  }
  /* Clear Port Interrupts */
  USB_OTG_WRITE_REG32(pdev->regs.HPRT0, hprt0_dup.d32);
 8014650:	687b      	ldr	r3, [r7, #4]
 8014652:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8014656:	693a      	ldr	r2, [r7, #16]
 8014658:	601a      	str	r2, [r3, #0]
  
  return retval;
 801465a:	69bb      	ldr	r3, [r7, #24]
}
 801465c:	4618      	mov	r0, r3
 801465e:	3720      	adds	r7, #32
 8014660:	46bd      	mov	sp, r7
 8014662:	bd80      	pop	{r7, pc}
 8014664:	200000e0 	.word	0x200000e0

08014668 <USB_OTG_USBH_handle_hc_n_Out_ISR>:
* @param  pdev: Selected device
* @param  hc_num: Channel number
* @retval status 
*/
uint32_t USB_OTG_USBH_handle_hc_n_Out_ISR (USB_OTG_CORE_HANDLE *pdev , uint32_t num)
{
 8014668:	b580      	push	{r7, lr}
 801466a:	b09a      	sub	sp, #104	; 0x68
 801466c:	af00      	add	r7, sp, #0
 801466e:	6078      	str	r0, [r7, #4]
 8014670:	6039      	str	r1, [r7, #0]
  USB_OTG_HCINTn_TypeDef     hcint;
  USB_OTG_HCINTMSK_TypeDef  hcintmsk;
  USB_OTG_HC_REGS *hcreg;
  USB_OTG_HCCHAR_TypeDef     hcchar; 
  
  hcreg = pdev->regs.HC_REGS[num];
 8014672:	687a      	ldr	r2, [r7, #4]
 8014674:	683b      	ldr	r3, [r7, #0]
 8014676:	3322      	adds	r3, #34	; 0x22
 8014678:	009b      	lsls	r3, r3, #2
 801467a:	4413      	add	r3, r2
 801467c:	689b      	ldr	r3, [r3, #8]
 801467e:	667b      	str	r3, [r7, #100]	; 0x64
  hcint.d32 = USB_OTG_READ_REG32(&hcreg->HCINT);
 8014680:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8014682:	689b      	ldr	r3, [r3, #8]
 8014684:	663b      	str	r3, [r7, #96]	; 0x60
  hcintmsk.d32 = USB_OTG_READ_REG32(&hcreg->HCINTMSK);
 8014686:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8014688:	68db      	ldr	r3, [r3, #12]
 801468a:	65fb      	str	r3, [r7, #92]	; 0x5c
  hcint.d32 = hcint.d32 & hcintmsk.d32;
 801468c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801468e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014690:	4013      	ands	r3, r2
 8014692:	663b      	str	r3, [r7, #96]	; 0x60
  
  hcchar.d32 = USB_OTG_READ_REG32(&pdev->regs.HC_REGS[num]->HCCHAR);
 8014694:	687a      	ldr	r2, [r7, #4]
 8014696:	683b      	ldr	r3, [r7, #0]
 8014698:	3322      	adds	r3, #34	; 0x22
 801469a:	009b      	lsls	r3, r3, #2
 801469c:	4413      	add	r3, r2
 801469e:	689b      	ldr	r3, [r3, #8]
 80146a0:	681b      	ldr	r3, [r3, #0]
 80146a2:	65bb      	str	r3, [r7, #88]	; 0x58
  
  if (hcint.b.ahberr)
 80146a4:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 80146a8:	f003 0304 	and.w	r3, r3, #4
 80146ac:	b2db      	uxtb	r3, r3
 80146ae:	2b00      	cmp	r3, #0
 80146b0:	d021      	beq.n	80146f6 <USB_OTG_USBH_handle_hc_n_Out_ISR+0x8e>
  {
    CLEAR_HC_INT(hcreg ,ahberr);
 80146b2:	2300      	movs	r3, #0
 80146b4:	657b      	str	r3, [r7, #84]	; 0x54
 80146b6:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 80146ba:	f043 0304 	orr.w	r3, r3, #4
 80146be:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
 80146c2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80146c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80146c6:	609a      	str	r2, [r3, #8]
    UNMASK_HOST_INT_CHH (num);
 80146c8:	687a      	ldr	r2, [r7, #4]
 80146ca:	683b      	ldr	r3, [r7, #0]
 80146cc:	3322      	adds	r3, #34	; 0x22
 80146ce:	009b      	lsls	r3, r3, #2
 80146d0:	4413      	add	r3, r2
 80146d2:	689b      	ldr	r3, [r3, #8]
 80146d4:	68db      	ldr	r3, [r3, #12]
 80146d6:	653b      	str	r3, [r7, #80]	; 0x50
 80146d8:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 80146dc:	f043 0302 	orr.w	r3, r3, #2
 80146e0:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
 80146e4:	687a      	ldr	r2, [r7, #4]
 80146e6:	683b      	ldr	r3, [r7, #0]
 80146e8:	3322      	adds	r3, #34	; 0x22
 80146ea:	009b      	lsls	r3, r3, #2
 80146ec:	4413      	add	r3, r2
 80146ee:	689b      	ldr	r3, [r3, #8]
 80146f0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80146f2:	60da      	str	r2, [r3, #12]
 80146f4:	e25a      	b.n	8014bac <USB_OTG_USBH_handle_hc_n_Out_ISR+0x544>
  } 
  else if (hcint.b.ack)
 80146f6:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 80146fa:	f003 0320 	and.w	r3, r3, #32
 80146fe:	b2db      	uxtb	r3, r3
 8014700:	2b00      	cmp	r3, #0
 8014702:	d00b      	beq.n	801471c <USB_OTG_USBH_handle_hc_n_Out_ISR+0xb4>
  {
    CLEAR_HC_INT(hcreg , ack);
 8014704:	2300      	movs	r3, #0
 8014706:	64fb      	str	r3, [r7, #76]	; 0x4c
 8014708:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 801470c:	f043 0320 	orr.w	r3, r3, #32
 8014710:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
 8014714:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8014716:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8014718:	609a      	str	r2, [r3, #8]
 801471a:	e247      	b.n	8014bac <USB_OTG_USBH_handle_hc_n_Out_ISR+0x544>
  }
  else if (hcint.b.frmovrun)
 801471c:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 8014720:	f003 0302 	and.w	r3, r3, #2
 8014724:	b2db      	uxtb	r3, r3
 8014726:	2b00      	cmp	r3, #0
 8014728:	d027      	beq.n	801477a <USB_OTG_USBH_handle_hc_n_Out_ISR+0x112>
  {
    UNMASK_HOST_INT_CHH (num);
 801472a:	687a      	ldr	r2, [r7, #4]
 801472c:	683b      	ldr	r3, [r7, #0]
 801472e:	3322      	adds	r3, #34	; 0x22
 8014730:	009b      	lsls	r3, r3, #2
 8014732:	4413      	add	r3, r2
 8014734:	689b      	ldr	r3, [r3, #8]
 8014736:	68db      	ldr	r3, [r3, #12]
 8014738:	64bb      	str	r3, [r7, #72]	; 0x48
 801473a:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 801473e:	f043 0302 	orr.w	r3, r3, #2
 8014742:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
 8014746:	687a      	ldr	r2, [r7, #4]
 8014748:	683b      	ldr	r3, [r7, #0]
 801474a:	3322      	adds	r3, #34	; 0x22
 801474c:	009b      	lsls	r3, r3, #2
 801474e:	4413      	add	r3, r2
 8014750:	689b      	ldr	r3, [r3, #8]
 8014752:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8014754:	60da      	str	r2, [r3, #12]
    USB_OTG_HC_Halt(pdev, num);
 8014756:	683b      	ldr	r3, [r7, #0]
 8014758:	b2db      	uxtb	r3, r3
 801475a:	4619      	mov	r1, r3
 801475c:	6878      	ldr	r0, [r7, #4]
 801475e:	f7ff fa9c 	bl	8013c9a <USB_OTG_HC_Halt>
    CLEAR_HC_INT(hcreg ,frmovrun);
 8014762:	2300      	movs	r3, #0
 8014764:	647b      	str	r3, [r7, #68]	; 0x44
 8014766:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 801476a:	f043 0302 	orr.w	r3, r3, #2
 801476e:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 8014772:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8014774:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8014776:	609a      	str	r2, [r3, #8]
 8014778:	e218      	b.n	8014bac <USB_OTG_USBH_handle_hc_n_Out_ISR+0x544>
  }
  else if (hcint.b.xfercompl)
 801477a:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 801477e:	f003 0301 	and.w	r3, r3, #1
 8014782:	b2db      	uxtb	r3, r3
 8014784:	2b00      	cmp	r3, #0
 8014786:	d035      	beq.n	80147f4 <USB_OTG_USBH_handle_hc_n_Out_ISR+0x18c>
  {
    pdev->host.ErrCnt[num] = 0;
 8014788:	687a      	ldr	r2, [r7, #4]
 801478a:	683b      	ldr	r3, [r7, #0]
 801478c:	33c4      	adds	r3, #196	; 0xc4
 801478e:	009b      	lsls	r3, r3, #2
 8014790:	4413      	add	r3, r2
 8014792:	2200      	movs	r2, #0
 8014794:	605a      	str	r2, [r3, #4]
    UNMASK_HOST_INT_CHH (num);
 8014796:	687a      	ldr	r2, [r7, #4]
 8014798:	683b      	ldr	r3, [r7, #0]
 801479a:	3322      	adds	r3, #34	; 0x22
 801479c:	009b      	lsls	r3, r3, #2
 801479e:	4413      	add	r3, r2
 80147a0:	689b      	ldr	r3, [r3, #8]
 80147a2:	68db      	ldr	r3, [r3, #12]
 80147a4:	643b      	str	r3, [r7, #64]	; 0x40
 80147a6:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80147aa:	f043 0302 	orr.w	r3, r3, #2
 80147ae:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
 80147b2:	687a      	ldr	r2, [r7, #4]
 80147b4:	683b      	ldr	r3, [r7, #0]
 80147b6:	3322      	adds	r3, #34	; 0x22
 80147b8:	009b      	lsls	r3, r3, #2
 80147ba:	4413      	add	r3, r2
 80147bc:	689b      	ldr	r3, [r3, #8]
 80147be:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80147c0:	60da      	str	r2, [r3, #12]
    USB_OTG_HC_Halt(pdev, num);
 80147c2:	683b      	ldr	r3, [r7, #0]
 80147c4:	b2db      	uxtb	r3, r3
 80147c6:	4619      	mov	r1, r3
 80147c8:	6878      	ldr	r0, [r7, #4]
 80147ca:	f7ff fa66 	bl	8013c9a <USB_OTG_HC_Halt>
    CLEAR_HC_INT(hcreg , xfercompl);
 80147ce:	2300      	movs	r3, #0
 80147d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80147d2:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80147d6:	f043 0301 	orr.w	r3, r3, #1
 80147da:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
 80147de:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80147e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80147e2:	609a      	str	r2, [r3, #8]
    pdev->host.HC_Status[num] = HC_XFRC;            
 80147e4:	687a      	ldr	r2, [r7, #4]
 80147e6:	683b      	ldr	r3, [r7, #0]
 80147e8:	4413      	add	r3, r2
 80147ea:	f503 7363 	add.w	r3, r3, #908	; 0x38c
 80147ee:	2201      	movs	r2, #1
 80147f0:	701a      	strb	r2, [r3, #0]
 80147f2:	e1db      	b.n	8014bac <USB_OTG_USBH_handle_hc_n_Out_ISR+0x544>
  }
  
  else if (hcint.b.stall)
 80147f4:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 80147f8:	f003 0308 	and.w	r3, r3, #8
 80147fc:	b2db      	uxtb	r3, r3
 80147fe:	2b00      	cmp	r3, #0
 8014800:	d02e      	beq.n	8014860 <USB_OTG_USBH_handle_hc_n_Out_ISR+0x1f8>
  {
    CLEAR_HC_INT(hcreg , stall);
 8014802:	2300      	movs	r3, #0
 8014804:	63bb      	str	r3, [r7, #56]	; 0x38
 8014806:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 801480a:	f043 0308 	orr.w	r3, r3, #8
 801480e:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
 8014812:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014814:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8014816:	609a      	str	r2, [r3, #8]
    UNMASK_HOST_INT_CHH (num);
 8014818:	687a      	ldr	r2, [r7, #4]
 801481a:	683b      	ldr	r3, [r7, #0]
 801481c:	3322      	adds	r3, #34	; 0x22
 801481e:	009b      	lsls	r3, r3, #2
 8014820:	4413      	add	r3, r2
 8014822:	689b      	ldr	r3, [r3, #8]
 8014824:	68db      	ldr	r3, [r3, #12]
 8014826:	637b      	str	r3, [r7, #52]	; 0x34
 8014828:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 801482c:	f043 0302 	orr.w	r3, r3, #2
 8014830:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 8014834:	687a      	ldr	r2, [r7, #4]
 8014836:	683b      	ldr	r3, [r7, #0]
 8014838:	3322      	adds	r3, #34	; 0x22
 801483a:	009b      	lsls	r3, r3, #2
 801483c:	4413      	add	r3, r2
 801483e:	689b      	ldr	r3, [r3, #8]
 8014840:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014842:	60da      	str	r2, [r3, #12]
    USB_OTG_HC_Halt(pdev, num);
 8014844:	683b      	ldr	r3, [r7, #0]
 8014846:	b2db      	uxtb	r3, r3
 8014848:	4619      	mov	r1, r3
 801484a:	6878      	ldr	r0, [r7, #4]
 801484c:	f7ff fa25 	bl	8013c9a <USB_OTG_HC_Halt>
    pdev->host.HC_Status[num] = HC_STALL;      
 8014850:	687a      	ldr	r2, [r7, #4]
 8014852:	683b      	ldr	r3, [r7, #0]
 8014854:	4413      	add	r3, r2
 8014856:	f503 7363 	add.w	r3, r3, #908	; 0x38c
 801485a:	2205      	movs	r2, #5
 801485c:	701a      	strb	r2, [r3, #0]
 801485e:	e1a5      	b.n	8014bac <USB_OTG_USBH_handle_hc_n_Out_ISR+0x544>
  }
  
  else if (hcint.b.nak)
 8014860:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8014864:	f003 0310 	and.w	r3, r3, #16
 8014868:	b2db      	uxtb	r3, r3
 801486a:	2b00      	cmp	r3, #0
 801486c:	d035      	beq.n	80148da <USB_OTG_USBH_handle_hc_n_Out_ISR+0x272>
  {
    pdev->host.ErrCnt[num] = 0;
 801486e:	687a      	ldr	r2, [r7, #4]
 8014870:	683b      	ldr	r3, [r7, #0]
 8014872:	33c4      	adds	r3, #196	; 0xc4
 8014874:	009b      	lsls	r3, r3, #2
 8014876:	4413      	add	r3, r2
 8014878:	2200      	movs	r2, #0
 801487a:	605a      	str	r2, [r3, #4]
    UNMASK_HOST_INT_CHH (num);
 801487c:	687a      	ldr	r2, [r7, #4]
 801487e:	683b      	ldr	r3, [r7, #0]
 8014880:	3322      	adds	r3, #34	; 0x22
 8014882:	009b      	lsls	r3, r3, #2
 8014884:	4413      	add	r3, r2
 8014886:	689b      	ldr	r3, [r3, #8]
 8014888:	68db      	ldr	r3, [r3, #12]
 801488a:	633b      	str	r3, [r7, #48]	; 0x30
 801488c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8014890:	f043 0302 	orr.w	r3, r3, #2
 8014894:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
 8014898:	687a      	ldr	r2, [r7, #4]
 801489a:	683b      	ldr	r3, [r7, #0]
 801489c:	3322      	adds	r3, #34	; 0x22
 801489e:	009b      	lsls	r3, r3, #2
 80148a0:	4413      	add	r3, r2
 80148a2:	689b      	ldr	r3, [r3, #8]
 80148a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80148a6:	60da      	str	r2, [r3, #12]
    USB_OTG_HC_Halt(pdev, num);
 80148a8:	683b      	ldr	r3, [r7, #0]
 80148aa:	b2db      	uxtb	r3, r3
 80148ac:	4619      	mov	r1, r3
 80148ae:	6878      	ldr	r0, [r7, #4]
 80148b0:	f7ff f9f3 	bl	8013c9a <USB_OTG_HC_Halt>
    CLEAR_HC_INT(hcreg , nak);
 80148b4:	2300      	movs	r3, #0
 80148b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80148b8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80148bc:	f043 0310 	orr.w	r3, r3, #16
 80148c0:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 80148c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80148c6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80148c8:	609a      	str	r2, [r3, #8]
    pdev->host.HC_Status[num] = HC_NAK;      
 80148ca:	687a      	ldr	r2, [r7, #4]
 80148cc:	683b      	ldr	r3, [r7, #0]
 80148ce:	4413      	add	r3, r2
 80148d0:	f503 7363 	add.w	r3, r3, #908	; 0x38c
 80148d4:	2203      	movs	r2, #3
 80148d6:	701a      	strb	r2, [r3, #0]
 80148d8:	e168      	b.n	8014bac <USB_OTG_USBH_handle_hc_n_Out_ISR+0x544>
  }
  
  else if (hcint.b.xacterr)
 80148da:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 80148de:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80148e2:	b2db      	uxtb	r3, r3
 80148e4:	2b00      	cmp	r3, #0
 80148e6:	d03b      	beq.n	8014960 <USB_OTG_USBH_handle_hc_n_Out_ISR+0x2f8>
  {
    UNMASK_HOST_INT_CHH (num);
 80148e8:	687a      	ldr	r2, [r7, #4]
 80148ea:	683b      	ldr	r3, [r7, #0]
 80148ec:	3322      	adds	r3, #34	; 0x22
 80148ee:	009b      	lsls	r3, r3, #2
 80148f0:	4413      	add	r3, r2
 80148f2:	689b      	ldr	r3, [r3, #8]
 80148f4:	68db      	ldr	r3, [r3, #12]
 80148f6:	62bb      	str	r3, [r7, #40]	; 0x28
 80148f8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80148fc:	f043 0302 	orr.w	r3, r3, #2
 8014900:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 8014904:	687a      	ldr	r2, [r7, #4]
 8014906:	683b      	ldr	r3, [r7, #0]
 8014908:	3322      	adds	r3, #34	; 0x22
 801490a:	009b      	lsls	r3, r3, #2
 801490c:	4413      	add	r3, r2
 801490e:	689b      	ldr	r3, [r3, #8]
 8014910:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014912:	60da      	str	r2, [r3, #12]
    USB_OTG_HC_Halt(pdev, num);
 8014914:	683b      	ldr	r3, [r7, #0]
 8014916:	b2db      	uxtb	r3, r3
 8014918:	4619      	mov	r1, r3
 801491a:	6878      	ldr	r0, [r7, #4]
 801491c:	f7ff f9bd 	bl	8013c9a <USB_OTG_HC_Halt>
    pdev->host.ErrCnt[num] ++;
 8014920:	687a      	ldr	r2, [r7, #4]
 8014922:	683b      	ldr	r3, [r7, #0]
 8014924:	33c4      	adds	r3, #196	; 0xc4
 8014926:	009b      	lsls	r3, r3, #2
 8014928:	4413      	add	r3, r2
 801492a:	685b      	ldr	r3, [r3, #4]
 801492c:	1c5a      	adds	r2, r3, #1
 801492e:	6879      	ldr	r1, [r7, #4]
 8014930:	683b      	ldr	r3, [r7, #0]
 8014932:	33c4      	adds	r3, #196	; 0xc4
 8014934:	009b      	lsls	r3, r3, #2
 8014936:	440b      	add	r3, r1
 8014938:	605a      	str	r2, [r3, #4]
    pdev->host.HC_Status[num] = HC_XACTERR;
 801493a:	687a      	ldr	r2, [r7, #4]
 801493c:	683b      	ldr	r3, [r7, #0]
 801493e:	4413      	add	r3, r2
 8014940:	f503 7363 	add.w	r3, r3, #908	; 0x38c
 8014944:	2206      	movs	r2, #6
 8014946:	701a      	strb	r2, [r3, #0]
    CLEAR_HC_INT(hcreg , xacterr);
 8014948:	2300      	movs	r3, #0
 801494a:	627b      	str	r3, [r7, #36]	; 0x24
 801494c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8014950:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014954:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 8014958:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801495a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801495c:	609a      	str	r2, [r3, #8]
 801495e:	e125      	b.n	8014bac <USB_OTG_USBH_handle_hc_n_Out_ISR+0x544>
  }
  else if (hcint.b.nyet)
 8014960:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8014964:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014968:	b2db      	uxtb	r3, r3
 801496a:	2b00      	cmp	r3, #0
 801496c:	d033      	beq.n	80149d6 <USB_OTG_USBH_handle_hc_n_Out_ISR+0x36e>
  {
    pdev->host.ErrCnt[num] = 0;
 801496e:	687a      	ldr	r2, [r7, #4]
 8014970:	683b      	ldr	r3, [r7, #0]
 8014972:	33c4      	adds	r3, #196	; 0xc4
 8014974:	009b      	lsls	r3, r3, #2
 8014976:	4413      	add	r3, r2
 8014978:	2200      	movs	r2, #0
 801497a:	605a      	str	r2, [r3, #4]
    UNMASK_HOST_INT_CHH (num);
 801497c:	687a      	ldr	r2, [r7, #4]
 801497e:	683b      	ldr	r3, [r7, #0]
 8014980:	3322      	adds	r3, #34	; 0x22
 8014982:	009b      	lsls	r3, r3, #2
 8014984:	4413      	add	r3, r2
 8014986:	689b      	ldr	r3, [r3, #8]
 8014988:	68db      	ldr	r3, [r3, #12]
 801498a:	623b      	str	r3, [r7, #32]
 801498c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8014990:	f043 0302 	orr.w	r3, r3, #2
 8014994:	f887 3020 	strb.w	r3, [r7, #32]
 8014998:	687a      	ldr	r2, [r7, #4]
 801499a:	683b      	ldr	r3, [r7, #0]
 801499c:	3322      	adds	r3, #34	; 0x22
 801499e:	009b      	lsls	r3, r3, #2
 80149a0:	4413      	add	r3, r2
 80149a2:	689b      	ldr	r3, [r3, #8]
 80149a4:	6a3a      	ldr	r2, [r7, #32]
 80149a6:	60da      	str	r2, [r3, #12]
    USB_OTG_HC_Halt(pdev, num);
 80149a8:	683b      	ldr	r3, [r7, #0]
 80149aa:	b2db      	uxtb	r3, r3
 80149ac:	4619      	mov	r1, r3
 80149ae:	6878      	ldr	r0, [r7, #4]
 80149b0:	f7ff f973 	bl	8013c9a <USB_OTG_HC_Halt>
    CLEAR_HC_INT(hcreg , nyet);
 80149b4:	2300      	movs	r3, #0
 80149b6:	61fb      	str	r3, [r7, #28]
 80149b8:	7f3b      	ldrb	r3, [r7, #28]
 80149ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80149be:	773b      	strb	r3, [r7, #28]
 80149c0:	69fa      	ldr	r2, [r7, #28]
 80149c2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80149c4:	609a      	str	r2, [r3, #8]
    pdev->host.HC_Status[num] = HC_NYET;    
 80149c6:	687a      	ldr	r2, [r7, #4]
 80149c8:	683b      	ldr	r3, [r7, #0]
 80149ca:	4413      	add	r3, r2
 80149cc:	f503 7363 	add.w	r3, r3, #908	; 0x38c
 80149d0:	2204      	movs	r2, #4
 80149d2:	701a      	strb	r2, [r3, #0]
 80149d4:	e0ea      	b.n	8014bac <USB_OTG_USBH_handle_hc_n_Out_ISR+0x544>
  }
  else if (hcint.b.datatglerr)
 80149d6:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 80149da:	f003 0304 	and.w	r3, r3, #4
 80149de:	b2db      	uxtb	r3, r3
 80149e0:	2b00      	cmp	r3, #0
 80149e2:	d033      	beq.n	8014a4c <USB_OTG_USBH_handle_hc_n_Out_ISR+0x3e4>
  {
    
    UNMASK_HOST_INT_CHH (num);
 80149e4:	687a      	ldr	r2, [r7, #4]
 80149e6:	683b      	ldr	r3, [r7, #0]
 80149e8:	3322      	adds	r3, #34	; 0x22
 80149ea:	009b      	lsls	r3, r3, #2
 80149ec:	4413      	add	r3, r2
 80149ee:	689b      	ldr	r3, [r3, #8]
 80149f0:	68db      	ldr	r3, [r3, #12]
 80149f2:	61bb      	str	r3, [r7, #24]
 80149f4:	7e3b      	ldrb	r3, [r7, #24]
 80149f6:	f043 0302 	orr.w	r3, r3, #2
 80149fa:	763b      	strb	r3, [r7, #24]
 80149fc:	687a      	ldr	r2, [r7, #4]
 80149fe:	683b      	ldr	r3, [r7, #0]
 8014a00:	3322      	adds	r3, #34	; 0x22
 8014a02:	009b      	lsls	r3, r3, #2
 8014a04:	4413      	add	r3, r2
 8014a06:	689b      	ldr	r3, [r3, #8]
 8014a08:	69ba      	ldr	r2, [r7, #24]
 8014a0a:	60da      	str	r2, [r3, #12]
    USB_OTG_HC_Halt(pdev, num);
 8014a0c:	683b      	ldr	r3, [r7, #0]
 8014a0e:	b2db      	uxtb	r3, r3
 8014a10:	4619      	mov	r1, r3
 8014a12:	6878      	ldr	r0, [r7, #4]
 8014a14:	f7ff f941 	bl	8013c9a <USB_OTG_HC_Halt>
    CLEAR_HC_INT(hcreg , nak);   
 8014a18:	2300      	movs	r3, #0
 8014a1a:	617b      	str	r3, [r7, #20]
 8014a1c:	7d3b      	ldrb	r3, [r7, #20]
 8014a1e:	f043 0310 	orr.w	r3, r3, #16
 8014a22:	753b      	strb	r3, [r7, #20]
 8014a24:	697a      	ldr	r2, [r7, #20]
 8014a26:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8014a28:	609a      	str	r2, [r3, #8]
    pdev->host.HC_Status[num] = HC_DATATGLERR;
 8014a2a:	687a      	ldr	r2, [r7, #4]
 8014a2c:	683b      	ldr	r3, [r7, #0]
 8014a2e:	4413      	add	r3, r2
 8014a30:	f503 7363 	add.w	r3, r3, #908	; 0x38c
 8014a34:	2208      	movs	r2, #8
 8014a36:	701a      	strb	r2, [r3, #0]
    
    CLEAR_HC_INT(hcreg , datatglerr);
 8014a38:	2300      	movs	r3, #0
 8014a3a:	613b      	str	r3, [r7, #16]
 8014a3c:	7c7b      	ldrb	r3, [r7, #17]
 8014a3e:	f043 0304 	orr.w	r3, r3, #4
 8014a42:	747b      	strb	r3, [r7, #17]
 8014a44:	693a      	ldr	r2, [r7, #16]
 8014a46:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8014a48:	609a      	str	r2, [r3, #8]
 8014a4a:	e0af      	b.n	8014bac <USB_OTG_USBH_handle_hc_n_Out_ISR+0x544>
  }  
  else if (hcint.b.chhltd)
 8014a4c:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8014a50:	f003 0302 	and.w	r3, r3, #2
 8014a54:	b2db      	uxtb	r3, r3
 8014a56:	2b00      	cmp	r3, #0
 8014a58:	f000 80a8 	beq.w	8014bac <USB_OTG_USBH_handle_hc_n_Out_ISR+0x544>
  {
    MASK_HOST_INT_CHH (num);
 8014a5c:	687a      	ldr	r2, [r7, #4]
 8014a5e:	683b      	ldr	r3, [r7, #0]
 8014a60:	3322      	adds	r3, #34	; 0x22
 8014a62:	009b      	lsls	r3, r3, #2
 8014a64:	4413      	add	r3, r2
 8014a66:	689b      	ldr	r3, [r3, #8]
 8014a68:	68db      	ldr	r3, [r3, #12]
 8014a6a:	60fb      	str	r3, [r7, #12]
 8014a6c:	7b3b      	ldrb	r3, [r7, #12]
 8014a6e:	f36f 0341 	bfc	r3, #1, #1
 8014a72:	733b      	strb	r3, [r7, #12]
 8014a74:	687a      	ldr	r2, [r7, #4]
 8014a76:	683b      	ldr	r3, [r7, #0]
 8014a78:	3322      	adds	r3, #34	; 0x22
 8014a7a:	009b      	lsls	r3, r3, #2
 8014a7c:	4413      	add	r3, r2
 8014a7e:	689b      	ldr	r3, [r3, #8]
 8014a80:	68fa      	ldr	r2, [r7, #12]
 8014a82:	60da      	str	r2, [r3, #12]
    
    if(pdev->host.HC_Status[num] == HC_XFRC)
 8014a84:	687a      	ldr	r2, [r7, #4]
 8014a86:	683b      	ldr	r3, [r7, #0]
 8014a88:	4413      	add	r3, r2
 8014a8a:	f503 7363 	add.w	r3, r3, #908	; 0x38c
 8014a8e:	781b      	ldrb	r3, [r3, #0]
 8014a90:	b2db      	uxtb	r3, r3
 8014a92:	2b01      	cmp	r3, #1
 8014a94:	d120      	bne.n	8014ad8 <USB_OTG_USBH_handle_hc_n_Out_ISR+0x470>
    {
      pdev->host.URB_State[num] = URB_DONE;  
 8014a96:	687a      	ldr	r2, [r7, #4]
 8014a98:	683b      	ldr	r3, [r7, #0]
 8014a9a:	4413      	add	r3, r2
 8014a9c:	f203 339b 	addw	r3, r3, #923	; 0x39b
 8014aa0:	2201      	movs	r2, #1
 8014aa2:	701a      	strb	r2, [r3, #0]
      
      if (hcchar.b.eptype == EP_TYPE_BULK)
 8014aa4:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 8014aa8:	f003 030c 	and.w	r3, r3, #12
 8014aac:	b2db      	uxtb	r3, r3
 8014aae:	2b08      	cmp	r3, #8
 8014ab0:	d173      	bne.n	8014b9a <USB_OTG_USBH_handle_hc_n_Out_ISR+0x532>
      {
        pdev->host.hc[num].toggle_out ^= 1; 
 8014ab2:	687a      	ldr	r2, [r7, #4]
 8014ab4:	683b      	ldr	r3, [r7, #0]
 8014ab6:	331e      	adds	r3, #30
 8014ab8:	015b      	lsls	r3, r3, #5
 8014aba:	4413      	add	r3, r2
 8014abc:	3305      	adds	r3, #5
 8014abe:	781b      	ldrb	r3, [r3, #0]
 8014ac0:	f083 0301 	eor.w	r3, r3, #1
 8014ac4:	b2d9      	uxtb	r1, r3
 8014ac6:	687a      	ldr	r2, [r7, #4]
 8014ac8:	683b      	ldr	r3, [r7, #0]
 8014aca:	331e      	adds	r3, #30
 8014acc:	015b      	lsls	r3, r3, #5
 8014ace:	4413      	add	r3, r2
 8014ad0:	3305      	adds	r3, #5
 8014ad2:	460a      	mov	r2, r1
 8014ad4:	701a      	strb	r2, [r3, #0]
 8014ad6:	e060      	b.n	8014b9a <USB_OTG_USBH_handle_hc_n_Out_ISR+0x532>
      }
    }
    else if(pdev->host.HC_Status[num] == HC_NAK)
 8014ad8:	687a      	ldr	r2, [r7, #4]
 8014ada:	683b      	ldr	r3, [r7, #0]
 8014adc:	4413      	add	r3, r2
 8014ade:	f503 7363 	add.w	r3, r3, #908	; 0x38c
 8014ae2:	781b      	ldrb	r3, [r3, #0]
 8014ae4:	b2db      	uxtb	r3, r3
 8014ae6:	2b03      	cmp	r3, #3
 8014ae8:	d107      	bne.n	8014afa <USB_OTG_USBH_handle_hc_n_Out_ISR+0x492>
    {
      pdev->host.URB_State[num] = URB_NOTREADY;      
 8014aea:	687a      	ldr	r2, [r7, #4]
 8014aec:	683b      	ldr	r3, [r7, #0]
 8014aee:	4413      	add	r3, r2
 8014af0:	f203 339b 	addw	r3, r3, #923	; 0x39b
 8014af4:	2202      	movs	r2, #2
 8014af6:	701a      	strb	r2, [r3, #0]
 8014af8:	e04f      	b.n	8014b9a <USB_OTG_USBH_handle_hc_n_Out_ISR+0x532>
    }    
    else if(pdev->host.HC_Status[num] == HC_NYET)
 8014afa:	687a      	ldr	r2, [r7, #4]
 8014afc:	683b      	ldr	r3, [r7, #0]
 8014afe:	4413      	add	r3, r2
 8014b00:	f503 7363 	add.w	r3, r3, #908	; 0x38c
 8014b04:	781b      	ldrb	r3, [r3, #0]
 8014b06:	b2db      	uxtb	r3, r3
 8014b08:	2b04      	cmp	r3, #4
 8014b0a:	d116      	bne.n	8014b3a <USB_OTG_USBH_handle_hc_n_Out_ISR+0x4d2>
    {
      if(pdev->host.hc[num].do_ping == 1)
 8014b0c:	687a      	ldr	r2, [r7, #4]
 8014b0e:	683b      	ldr	r3, [r7, #0]
 8014b10:	015b      	lsls	r3, r3, #5
 8014b12:	4413      	add	r3, r2
 8014b14:	f503 736c 	add.w	r3, r3, #944	; 0x3b0
 8014b18:	781b      	ldrb	r3, [r3, #0]
 8014b1a:	2b01      	cmp	r3, #1
 8014b1c:	d105      	bne.n	8014b2a <USB_OTG_USBH_handle_hc_n_Out_ISR+0x4c2>
      {
        USB_OTG_HC_DoPing(pdev, num);
 8014b1e:	683b      	ldr	r3, [r7, #0]
 8014b20:	b2db      	uxtb	r3, r3
 8014b22:	4619      	mov	r1, r3
 8014b24:	6878      	ldr	r0, [r7, #4]
 8014b26:	f7ff f908 	bl	8013d3a <USB_OTG_HC_DoPing>
      }
      pdev->host.URB_State[num] = URB_NOTREADY;      
 8014b2a:	687a      	ldr	r2, [r7, #4]
 8014b2c:	683b      	ldr	r3, [r7, #0]
 8014b2e:	4413      	add	r3, r2
 8014b30:	f203 339b 	addw	r3, r3, #923	; 0x39b
 8014b34:	2202      	movs	r2, #2
 8014b36:	701a      	strb	r2, [r3, #0]
 8014b38:	e02f      	b.n	8014b9a <USB_OTG_USBH_handle_hc_n_Out_ISR+0x532>
    }      
    else if(pdev->host.HC_Status[num] == HC_STALL)
 8014b3a:	687a      	ldr	r2, [r7, #4]
 8014b3c:	683b      	ldr	r3, [r7, #0]
 8014b3e:	4413      	add	r3, r2
 8014b40:	f503 7363 	add.w	r3, r3, #908	; 0x38c
 8014b44:	781b      	ldrb	r3, [r3, #0]
 8014b46:	b2db      	uxtb	r3, r3
 8014b48:	2b05      	cmp	r3, #5
 8014b4a:	d107      	bne.n	8014b5c <USB_OTG_USBH_handle_hc_n_Out_ISR+0x4f4>
    {
      pdev->host.URB_State[num] = URB_STALL;      
 8014b4c:	687a      	ldr	r2, [r7, #4]
 8014b4e:	683b      	ldr	r3, [r7, #0]
 8014b50:	4413      	add	r3, r2
 8014b52:	f203 339b 	addw	r3, r3, #923	; 0x39b
 8014b56:	2204      	movs	r2, #4
 8014b58:	701a      	strb	r2, [r3, #0]
 8014b5a:	e01e      	b.n	8014b9a <USB_OTG_USBH_handle_hc_n_Out_ISR+0x532>
    }  
    else if(pdev->host.HC_Status[num] == HC_XACTERR)
 8014b5c:	687a      	ldr	r2, [r7, #4]
 8014b5e:	683b      	ldr	r3, [r7, #0]
 8014b60:	4413      	add	r3, r2
 8014b62:	f503 7363 	add.w	r3, r3, #908	; 0x38c
 8014b66:	781b      	ldrb	r3, [r3, #0]
 8014b68:	b2db      	uxtb	r3, r3
 8014b6a:	2b06      	cmp	r3, #6
 8014b6c:	d115      	bne.n	8014b9a <USB_OTG_USBH_handle_hc_n_Out_ISR+0x532>
    {
      if (pdev->host.ErrCnt[num] == 3)
 8014b6e:	687a      	ldr	r2, [r7, #4]
 8014b70:	683b      	ldr	r3, [r7, #0]
 8014b72:	33c4      	adds	r3, #196	; 0xc4
 8014b74:	009b      	lsls	r3, r3, #2
 8014b76:	4413      	add	r3, r2
 8014b78:	685b      	ldr	r3, [r3, #4]
 8014b7a:	2b03      	cmp	r3, #3
 8014b7c:	d10d      	bne.n	8014b9a <USB_OTG_USBH_handle_hc_n_Out_ISR+0x532>
      {
        pdev->host.URB_State[num] = URB_ERROR;  
 8014b7e:	687a      	ldr	r2, [r7, #4]
 8014b80:	683b      	ldr	r3, [r7, #0]
 8014b82:	4413      	add	r3, r2
 8014b84:	f203 339b 	addw	r3, r3, #923	; 0x39b
 8014b88:	2203      	movs	r2, #3
 8014b8a:	701a      	strb	r2, [r3, #0]
        pdev->host.ErrCnt[num] = 0;
 8014b8c:	687a      	ldr	r2, [r7, #4]
 8014b8e:	683b      	ldr	r3, [r7, #0]
 8014b90:	33c4      	adds	r3, #196	; 0xc4
 8014b92:	009b      	lsls	r3, r3, #2
 8014b94:	4413      	add	r3, r2
 8014b96:	2200      	movs	r2, #0
 8014b98:	605a      	str	r2, [r3, #4]
      }
    }
    CLEAR_HC_INT(hcreg , chhltd);    
 8014b9a:	2300      	movs	r3, #0
 8014b9c:	60bb      	str	r3, [r7, #8]
 8014b9e:	7a3b      	ldrb	r3, [r7, #8]
 8014ba0:	f043 0302 	orr.w	r3, r3, #2
 8014ba4:	723b      	strb	r3, [r7, #8]
 8014ba6:	68ba      	ldr	r2, [r7, #8]
 8014ba8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8014baa:	609a      	str	r2, [r3, #8]
  }
  
  
  return 1;
 8014bac:	2301      	movs	r3, #1
}
 8014bae:	4618      	mov	r0, r3
 8014bb0:	3768      	adds	r7, #104	; 0x68
 8014bb2:	46bd      	mov	sp, r7
 8014bb4:	bd80      	pop	{r7, pc}

08014bb6 <USB_OTG_USBH_handle_hc_n_In_ISR>:
* @param  pdev: Selected device
* @param  hc_num: Channel number
* @retval status 
*/
uint32_t USB_OTG_USBH_handle_hc_n_In_ISR (USB_OTG_CORE_HANDLE *pdev , uint32_t num)
{
 8014bb6:	b580      	push	{r7, lr}
 8014bb8:	b09c      	sub	sp, #112	; 0x70
 8014bba:	af00      	add	r7, sp, #0
 8014bbc:	6078      	str	r0, [r7, #4]
 8014bbe:	6039      	str	r1, [r7, #0]
  USB_OTG_HCCHAR_TypeDef     hcchar; 
  USB_OTG_HCTSIZn_TypeDef  hctsiz;
  USB_OTG_HC_REGS *hcreg;
  
  
  hcreg = pdev->regs.HC_REGS[num];
 8014bc0:	687a      	ldr	r2, [r7, #4]
 8014bc2:	683b      	ldr	r3, [r7, #0]
 8014bc4:	3322      	adds	r3, #34	; 0x22
 8014bc6:	009b      	lsls	r3, r3, #2
 8014bc8:	4413      	add	r3, r2
 8014bca:	689b      	ldr	r3, [r3, #8]
 8014bcc:	66fb      	str	r3, [r7, #108]	; 0x6c
  hcint.d32 = USB_OTG_READ_REG32(&hcreg->HCINT);
 8014bce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014bd0:	689b      	ldr	r3, [r3, #8]
 8014bd2:	66bb      	str	r3, [r7, #104]	; 0x68
  hcintmsk.d32 = USB_OTG_READ_REG32(&hcreg->HCINTMSK);
 8014bd4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014bd6:	68db      	ldr	r3, [r3, #12]
 8014bd8:	667b      	str	r3, [r7, #100]	; 0x64
  hcint.d32 = hcint.d32 & hcintmsk.d32;
 8014bda:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8014bdc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8014bde:	4013      	ands	r3, r2
 8014be0:	66bb      	str	r3, [r7, #104]	; 0x68
  hcchar.d32 = USB_OTG_READ_REG32(&pdev->regs.HC_REGS[num]->HCCHAR);
 8014be2:	687a      	ldr	r2, [r7, #4]
 8014be4:	683b      	ldr	r3, [r7, #0]
 8014be6:	3322      	adds	r3, #34	; 0x22
 8014be8:	009b      	lsls	r3, r3, #2
 8014bea:	4413      	add	r3, r2
 8014bec:	689b      	ldr	r3, [r3, #8]
 8014bee:	681b      	ldr	r3, [r3, #0]
 8014bf0:	663b      	str	r3, [r7, #96]	; 0x60
  hcintmsk.d32 = 0;
 8014bf2:	2300      	movs	r3, #0
 8014bf4:	667b      	str	r3, [r7, #100]	; 0x64
  
  
  if (hcint.b.ahberr)
 8014bf6:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 8014bfa:	f003 0304 	and.w	r3, r3, #4
 8014bfe:	b2db      	uxtb	r3, r3
 8014c00:	2b00      	cmp	r3, #0
 8014c02:	d021      	beq.n	8014c48 <USB_OTG_USBH_handle_hc_n_In_ISR+0x92>
  {
    CLEAR_HC_INT(hcreg ,ahberr);
 8014c04:	2300      	movs	r3, #0
 8014c06:	65bb      	str	r3, [r7, #88]	; 0x58
 8014c08:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 8014c0c:	f043 0304 	orr.w	r3, r3, #4
 8014c10:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
 8014c14:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8014c16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014c18:	609a      	str	r2, [r3, #8]
    UNMASK_HOST_INT_CHH (num);
 8014c1a:	687a      	ldr	r2, [r7, #4]
 8014c1c:	683b      	ldr	r3, [r7, #0]
 8014c1e:	3322      	adds	r3, #34	; 0x22
 8014c20:	009b      	lsls	r3, r3, #2
 8014c22:	4413      	add	r3, r2
 8014c24:	689b      	ldr	r3, [r3, #8]
 8014c26:	68db      	ldr	r3, [r3, #12]
 8014c28:	657b      	str	r3, [r7, #84]	; 0x54
 8014c2a:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8014c2e:	f043 0302 	orr.w	r3, r3, #2
 8014c32:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
 8014c36:	687a      	ldr	r2, [r7, #4]
 8014c38:	683b      	ldr	r3, [r7, #0]
 8014c3a:	3322      	adds	r3, #34	; 0x22
 8014c3c:	009b      	lsls	r3, r3, #2
 8014c3e:	4413      	add	r3, r2
 8014c40:	689b      	ldr	r3, [r3, #8]
 8014c42:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8014c44:	60da      	str	r2, [r3, #12]
 8014c46:	e099      	b.n	8014d7c <USB_OTG_USBH_handle_hc_n_In_ISR+0x1c6>
  }  
  else if (hcint.b.ack)
 8014c48:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 8014c4c:	f003 0320 	and.w	r3, r3, #32
 8014c50:	b2db      	uxtb	r3, r3
 8014c52:	2b00      	cmp	r3, #0
 8014c54:	d00b      	beq.n	8014c6e <USB_OTG_USBH_handle_hc_n_In_ISR+0xb8>
  {
    CLEAR_HC_INT(hcreg ,ack);
 8014c56:	2300      	movs	r3, #0
 8014c58:	653b      	str	r3, [r7, #80]	; 0x50
 8014c5a:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8014c5e:	f043 0320 	orr.w	r3, r3, #32
 8014c62:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
 8014c66:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8014c68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014c6a:	609a      	str	r2, [r3, #8]
 8014c6c:	e086      	b.n	8014d7c <USB_OTG_USBH_handle_hc_n_In_ISR+0x1c6>
  }
  
  else if (hcint.b.stall)  
 8014c6e:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 8014c72:	f003 0308 	and.w	r3, r3, #8
 8014c76:	b2db      	uxtb	r3, r3
 8014c78:	2b00      	cmp	r3, #0
 8014c7a:	d03f      	beq.n	8014cfc <USB_OTG_USBH_handle_hc_n_In_ISR+0x146>
  {
    UNMASK_HOST_INT_CHH (num);
 8014c7c:	687a      	ldr	r2, [r7, #4]
 8014c7e:	683b      	ldr	r3, [r7, #0]
 8014c80:	3322      	adds	r3, #34	; 0x22
 8014c82:	009b      	lsls	r3, r3, #2
 8014c84:	4413      	add	r3, r2
 8014c86:	689b      	ldr	r3, [r3, #8]
 8014c88:	68db      	ldr	r3, [r3, #12]
 8014c8a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8014c8c:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8014c90:	f043 0302 	orr.w	r3, r3, #2
 8014c94:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
 8014c98:	687a      	ldr	r2, [r7, #4]
 8014c9a:	683b      	ldr	r3, [r7, #0]
 8014c9c:	3322      	adds	r3, #34	; 0x22
 8014c9e:	009b      	lsls	r3, r3, #2
 8014ca0:	4413      	add	r3, r2
 8014ca2:	689b      	ldr	r3, [r3, #8]
 8014ca4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8014ca6:	60da      	str	r2, [r3, #12]
    pdev->host.HC_Status[num] = HC_STALL; 
 8014ca8:	687a      	ldr	r2, [r7, #4]
 8014caa:	683b      	ldr	r3, [r7, #0]
 8014cac:	4413      	add	r3, r2
 8014cae:	f503 7363 	add.w	r3, r3, #908	; 0x38c
 8014cb2:	2205      	movs	r2, #5
 8014cb4:	701a      	strb	r2, [r3, #0]
    CLEAR_HC_INT(hcreg , nak);   /* Clear the NAK Condition */
 8014cb6:	2300      	movs	r3, #0
 8014cb8:	64bb      	str	r3, [r7, #72]	; 0x48
 8014cba:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8014cbe:	f043 0310 	orr.w	r3, r3, #16
 8014cc2:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
 8014cc6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8014cc8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014cca:	609a      	str	r2, [r3, #8]
    CLEAR_HC_INT(hcreg , stall); /* Clear the STALL Condition */
 8014ccc:	2300      	movs	r3, #0
 8014cce:	647b      	str	r3, [r7, #68]	; 0x44
 8014cd0:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8014cd4:	f043 0308 	orr.w	r3, r3, #8
 8014cd8:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
 8014cdc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8014cde:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014ce0:	609a      	str	r2, [r3, #8]
    hcint.b.nak = 0;           /* NOTE: When there is a 'stall', reset also nak, 
 8014ce2:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 8014ce6:	f36f 1304 	bfc	r3, #4, #1
 8014cea:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                                  else, the pdev->host.HC_Status = HC_STALL
    will be overwritten by 'nak' in code below */
    USB_OTG_HC_Halt(pdev, num);    
 8014cee:	683b      	ldr	r3, [r7, #0]
 8014cf0:	b2db      	uxtb	r3, r3
 8014cf2:	4619      	mov	r1, r3
 8014cf4:	6878      	ldr	r0, [r7, #4]
 8014cf6:	f7fe ffd0 	bl	8013c9a <USB_OTG_HC_Halt>
 8014cfa:	e03f      	b.n	8014d7c <USB_OTG_USBH_handle_hc_n_In_ISR+0x1c6>
  }
  else if (hcint.b.datatglerr)
 8014cfc:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
 8014d00:	f003 0304 	and.w	r3, r3, #4
 8014d04:	b2db      	uxtb	r3, r3
 8014d06:	2b00      	cmp	r3, #0
 8014d08:	d038      	beq.n	8014d7c <USB_OTG_USBH_handle_hc_n_In_ISR+0x1c6>
  {
    
    UNMASK_HOST_INT_CHH (num);
 8014d0a:	687a      	ldr	r2, [r7, #4]
 8014d0c:	683b      	ldr	r3, [r7, #0]
 8014d0e:	3322      	adds	r3, #34	; 0x22
 8014d10:	009b      	lsls	r3, r3, #2
 8014d12:	4413      	add	r3, r2
 8014d14:	689b      	ldr	r3, [r3, #8]
 8014d16:	68db      	ldr	r3, [r3, #12]
 8014d18:	643b      	str	r3, [r7, #64]	; 0x40
 8014d1a:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8014d1e:	f043 0302 	orr.w	r3, r3, #2
 8014d22:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
 8014d26:	687a      	ldr	r2, [r7, #4]
 8014d28:	683b      	ldr	r3, [r7, #0]
 8014d2a:	3322      	adds	r3, #34	; 0x22
 8014d2c:	009b      	lsls	r3, r3, #2
 8014d2e:	4413      	add	r3, r2
 8014d30:	689b      	ldr	r3, [r3, #8]
 8014d32:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8014d34:	60da      	str	r2, [r3, #12]
    USB_OTG_HC_Halt(pdev, num);
 8014d36:	683b      	ldr	r3, [r7, #0]
 8014d38:	b2db      	uxtb	r3, r3
 8014d3a:	4619      	mov	r1, r3
 8014d3c:	6878      	ldr	r0, [r7, #4]
 8014d3e:	f7fe ffac 	bl	8013c9a <USB_OTG_HC_Halt>
    CLEAR_HC_INT(hcreg , nak);   
 8014d42:	2300      	movs	r3, #0
 8014d44:	63fb      	str	r3, [r7, #60]	; 0x3c
 8014d46:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8014d4a:	f043 0310 	orr.w	r3, r3, #16
 8014d4e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
 8014d52:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8014d54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014d56:	609a      	str	r2, [r3, #8]
    pdev->host.HC_Status[num] = HC_DATATGLERR; 
 8014d58:	687a      	ldr	r2, [r7, #4]
 8014d5a:	683b      	ldr	r3, [r7, #0]
 8014d5c:	4413      	add	r3, r2
 8014d5e:	f503 7363 	add.w	r3, r3, #908	; 0x38c
 8014d62:	2208      	movs	r2, #8
 8014d64:	701a      	strb	r2, [r3, #0]
    CLEAR_HC_INT(hcreg , datatglerr);
 8014d66:	2300      	movs	r3, #0
 8014d68:	63bb      	str	r3, [r7, #56]	; 0x38
 8014d6a:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8014d6e:	f043 0304 	orr.w	r3, r3, #4
 8014d72:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 8014d76:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014d78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014d7a:	609a      	str	r2, [r3, #8]
  }    
  
  if (hcint.b.frmovrun)
 8014d7c:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
 8014d80:	f003 0302 	and.w	r3, r3, #2
 8014d84:	b2db      	uxtb	r3, r3
 8014d86:	2b00      	cmp	r3, #0
 8014d88:	d027      	beq.n	8014dda <USB_OTG_USBH_handle_hc_n_In_ISR+0x224>
  {
    UNMASK_HOST_INT_CHH (num);
 8014d8a:	687a      	ldr	r2, [r7, #4]
 8014d8c:	683b      	ldr	r3, [r7, #0]
 8014d8e:	3322      	adds	r3, #34	; 0x22
 8014d90:	009b      	lsls	r3, r3, #2
 8014d92:	4413      	add	r3, r2
 8014d94:	689b      	ldr	r3, [r3, #8]
 8014d96:	68db      	ldr	r3, [r3, #12]
 8014d98:	637b      	str	r3, [r7, #52]	; 0x34
 8014d9a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8014d9e:	f043 0302 	orr.w	r3, r3, #2
 8014da2:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 8014da6:	687a      	ldr	r2, [r7, #4]
 8014da8:	683b      	ldr	r3, [r7, #0]
 8014daa:	3322      	adds	r3, #34	; 0x22
 8014dac:	009b      	lsls	r3, r3, #2
 8014dae:	4413      	add	r3, r2
 8014db0:	689b      	ldr	r3, [r3, #8]
 8014db2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014db4:	60da      	str	r2, [r3, #12]
    USB_OTG_HC_Halt(pdev, num);
 8014db6:	683b      	ldr	r3, [r7, #0]
 8014db8:	b2db      	uxtb	r3, r3
 8014dba:	4619      	mov	r1, r3
 8014dbc:	6878      	ldr	r0, [r7, #4]
 8014dbe:	f7fe ff6c 	bl	8013c9a <USB_OTG_HC_Halt>
    CLEAR_HC_INT(hcreg ,frmovrun);
 8014dc2:	2300      	movs	r3, #0
 8014dc4:	633b      	str	r3, [r7, #48]	; 0x30
 8014dc6:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8014dca:	f043 0302 	orr.w	r3, r3, #2
 8014dce:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
 8014dd2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014dd4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014dd6:	609a      	str	r2, [r3, #8]
 8014dd8:	e1bf      	b.n	801515a <USB_OTG_USBH_handle_hc_n_In_ISR+0x5a4>
  }
  
  else if (hcint.b.xfercompl)
 8014dda:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 8014dde:	f003 0301 	and.w	r3, r3, #1
 8014de2:	b2db      	uxtb	r3, r3
 8014de4:	2b00      	cmp	r3, #0
 8014de6:	f000 809b 	beq.w	8014f20 <USB_OTG_USBH_handle_hc_n_In_ISR+0x36a>
  {
    
    if (pdev->cfg.dma_enable == 1)
 8014dea:	687b      	ldr	r3, [r7, #4]
 8014dec:	78db      	ldrb	r3, [r3, #3]
 8014dee:	2b01      	cmp	r3, #1
 8014df0:	d117      	bne.n	8014e22 <USB_OTG_USBH_handle_hc_n_In_ISR+0x26c>
    {
      hctsiz.d32 = USB_OTG_READ_REG32(&pdev->regs.HC_REGS[num]->HCTSIZ);
 8014df2:	687a      	ldr	r2, [r7, #4]
 8014df4:	683b      	ldr	r3, [r7, #0]
 8014df6:	3322      	adds	r3, #34	; 0x22
 8014df8:	009b      	lsls	r3, r3, #2
 8014dfa:	4413      	add	r3, r2
 8014dfc:	689b      	ldr	r3, [r3, #8]
 8014dfe:	691b      	ldr	r3, [r3, #16]
 8014e00:	65fb      	str	r3, [r7, #92]	; 0x5c
      pdev->host.XferCnt[num] =  pdev->host.hc[num].xfer_len - hctsiz.b.xfersize;
 8014e02:	687a      	ldr	r2, [r7, #4]
 8014e04:	683b      	ldr	r3, [r7, #0]
 8014e06:	015b      	lsls	r3, r3, #5
 8014e08:	4413      	add	r3, r2
 8014e0a:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 8014e0e:	681b      	ldr	r3, [r3, #0]
 8014e10:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8014e12:	f3c2 0212 	ubfx	r2, r2, #0, #19
 8014e16:	1a99      	subs	r1, r3, r2
 8014e18:	687b      	ldr	r3, [r7, #4]
 8014e1a:	683a      	ldr	r2, [r7, #0]
 8014e1c:	32d4      	adds	r2, #212	; 0xd4
 8014e1e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    }
    
    pdev->host.HC_Status[num] = HC_XFRC;     
 8014e22:	687a      	ldr	r2, [r7, #4]
 8014e24:	683b      	ldr	r3, [r7, #0]
 8014e26:	4413      	add	r3, r2
 8014e28:	f503 7363 	add.w	r3, r3, #908	; 0x38c
 8014e2c:	2201      	movs	r2, #1
 8014e2e:	701a      	strb	r2, [r3, #0]
    pdev->host.ErrCnt [num]= 0;
 8014e30:	687a      	ldr	r2, [r7, #4]
 8014e32:	683b      	ldr	r3, [r7, #0]
 8014e34:	33c4      	adds	r3, #196	; 0xc4
 8014e36:	009b      	lsls	r3, r3, #2
 8014e38:	4413      	add	r3, r2
 8014e3a:	2200      	movs	r2, #0
 8014e3c:	605a      	str	r2, [r3, #4]
    CLEAR_HC_INT(hcreg , xfercompl);
 8014e3e:	2300      	movs	r3, #0
 8014e40:	62fb      	str	r3, [r7, #44]	; 0x2c
 8014e42:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8014e46:	f043 0301 	orr.w	r3, r3, #1
 8014e4a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 8014e4e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014e50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014e52:	609a      	str	r2, [r3, #8]
    
    if ((hcchar.b.eptype == EP_TYPE_CTRL)||
 8014e54:	f897 3062 	ldrb.w	r3, [r7, #98]	; 0x62
 8014e58:	f003 030c 	and.w	r3, r3, #12
 8014e5c:	b2db      	uxtb	r3, r3
 8014e5e:	2b00      	cmp	r3, #0
 8014e60:	d006      	beq.n	8014e70 <USB_OTG_USBH_handle_hc_n_In_ISR+0x2ba>
        (hcchar.b.eptype == EP_TYPE_BULK))
 8014e62:	f897 3062 	ldrb.w	r3, [r7, #98]	; 0x62
 8014e66:	f003 030c 	and.w	r3, r3, #12
 8014e6a:	b2db      	uxtb	r3, r3
    if ((hcchar.b.eptype == EP_TYPE_CTRL)||
 8014e6c:	2b08      	cmp	r3, #8
 8014e6e:	d139      	bne.n	8014ee4 <USB_OTG_USBH_handle_hc_n_In_ISR+0x32e>
    {
      UNMASK_HOST_INT_CHH (num);
 8014e70:	687a      	ldr	r2, [r7, #4]
 8014e72:	683b      	ldr	r3, [r7, #0]
 8014e74:	3322      	adds	r3, #34	; 0x22
 8014e76:	009b      	lsls	r3, r3, #2
 8014e78:	4413      	add	r3, r2
 8014e7a:	689b      	ldr	r3, [r3, #8]
 8014e7c:	68db      	ldr	r3, [r3, #12]
 8014e7e:	62bb      	str	r3, [r7, #40]	; 0x28
 8014e80:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8014e84:	f043 0302 	orr.w	r3, r3, #2
 8014e88:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 8014e8c:	687a      	ldr	r2, [r7, #4]
 8014e8e:	683b      	ldr	r3, [r7, #0]
 8014e90:	3322      	adds	r3, #34	; 0x22
 8014e92:	009b      	lsls	r3, r3, #2
 8014e94:	4413      	add	r3, r2
 8014e96:	689b      	ldr	r3, [r3, #8]
 8014e98:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014e9a:	60da      	str	r2, [r3, #12]
      USB_OTG_HC_Halt(pdev, num);
 8014e9c:	683b      	ldr	r3, [r7, #0]
 8014e9e:	b2db      	uxtb	r3, r3
 8014ea0:	4619      	mov	r1, r3
 8014ea2:	6878      	ldr	r0, [r7, #4]
 8014ea4:	f7fe fef9 	bl	8013c9a <USB_OTG_HC_Halt>
      CLEAR_HC_INT(hcreg , nak); 
 8014ea8:	2300      	movs	r3, #0
 8014eaa:	627b      	str	r3, [r7, #36]	; 0x24
 8014eac:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8014eb0:	f043 0310 	orr.w	r3, r3, #16
 8014eb4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 8014eb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014eba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014ebc:	609a      	str	r2, [r3, #8]
      pdev->host.hc[num].toggle_in ^= 1;
 8014ebe:	687a      	ldr	r2, [r7, #4]
 8014ec0:	683b      	ldr	r3, [r7, #0]
 8014ec2:	331e      	adds	r3, #30
 8014ec4:	015b      	lsls	r3, r3, #5
 8014ec6:	4413      	add	r3, r2
 8014ec8:	3304      	adds	r3, #4
 8014eca:	781b      	ldrb	r3, [r3, #0]
 8014ecc:	f083 0301 	eor.w	r3, r3, #1
 8014ed0:	b2d9      	uxtb	r1, r3
 8014ed2:	687a      	ldr	r2, [r7, #4]
 8014ed4:	683b      	ldr	r3, [r7, #0]
 8014ed6:	331e      	adds	r3, #30
 8014ed8:	015b      	lsls	r3, r3, #5
 8014eda:	4413      	add	r3, r2
 8014edc:	3304      	adds	r3, #4
 8014ede:	460a      	mov	r2, r1
 8014ee0:	701a      	strb	r2, [r3, #0]
 8014ee2:	e13a      	b.n	801515a <USB_OTG_USBH_handle_hc_n_In_ISR+0x5a4>
      
    }
    else if(hcchar.b.eptype == EP_TYPE_INTR)
 8014ee4:	f897 3062 	ldrb.w	r3, [r7, #98]	; 0x62
 8014ee8:	f003 030c 	and.w	r3, r3, #12
 8014eec:	b2db      	uxtb	r3, r3
 8014eee:	2b0c      	cmp	r3, #12
 8014ef0:	f040 8133 	bne.w	801515a <USB_OTG_USBH_handle_hc_n_In_ISR+0x5a4>
    {
      hcchar.b.oddfrm  = 1;
 8014ef4:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8014ef8:	f043 0320 	orr.w	r3, r3, #32
 8014efc:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
      USB_OTG_WRITE_REG32(&pdev->regs.HC_REGS[num]->HCCHAR, hcchar.d32); 
 8014f00:	687a      	ldr	r2, [r7, #4]
 8014f02:	683b      	ldr	r3, [r7, #0]
 8014f04:	3322      	adds	r3, #34	; 0x22
 8014f06:	009b      	lsls	r3, r3, #2
 8014f08:	4413      	add	r3, r2
 8014f0a:	689b      	ldr	r3, [r3, #8]
 8014f0c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8014f0e:	601a      	str	r2, [r3, #0]
      pdev->host.URB_State[num] = URB_DONE;  
 8014f10:	687a      	ldr	r2, [r7, #4]
 8014f12:	683b      	ldr	r3, [r7, #0]
 8014f14:	4413      	add	r3, r2
 8014f16:	f203 339b 	addw	r3, r3, #923	; 0x39b
 8014f1a:	2201      	movs	r2, #1
 8014f1c:	701a      	strb	r2, [r3, #0]
 8014f1e:	e11c      	b.n	801515a <USB_OTG_USBH_handle_hc_n_In_ISR+0x5a4>
    }
    
  }
  else if (hcint.b.chhltd)
 8014f20:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 8014f24:	f003 0302 	and.w	r3, r3, #2
 8014f28:	b2db      	uxtb	r3, r3
 8014f2a:	2b00      	cmp	r3, #0
 8014f2c:	d07b      	beq.n	8015026 <USB_OTG_USBH_handle_hc_n_In_ISR+0x470>
  {
    MASK_HOST_INT_CHH (num);
 8014f2e:	687a      	ldr	r2, [r7, #4]
 8014f30:	683b      	ldr	r3, [r7, #0]
 8014f32:	3322      	adds	r3, #34	; 0x22
 8014f34:	009b      	lsls	r3, r3, #2
 8014f36:	4413      	add	r3, r2
 8014f38:	689b      	ldr	r3, [r3, #8]
 8014f3a:	68db      	ldr	r3, [r3, #12]
 8014f3c:	623b      	str	r3, [r7, #32]
 8014f3e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8014f42:	f36f 0341 	bfc	r3, #1, #1
 8014f46:	f887 3020 	strb.w	r3, [r7, #32]
 8014f4a:	687a      	ldr	r2, [r7, #4]
 8014f4c:	683b      	ldr	r3, [r7, #0]
 8014f4e:	3322      	adds	r3, #34	; 0x22
 8014f50:	009b      	lsls	r3, r3, #2
 8014f52:	4413      	add	r3, r2
 8014f54:	689b      	ldr	r3, [r3, #8]
 8014f56:	6a3a      	ldr	r2, [r7, #32]
 8014f58:	60da      	str	r2, [r3, #12]
    
    if(pdev->host.HC_Status[num] == HC_XFRC)
 8014f5a:	687a      	ldr	r2, [r7, #4]
 8014f5c:	683b      	ldr	r3, [r7, #0]
 8014f5e:	4413      	add	r3, r2
 8014f60:	f503 7363 	add.w	r3, r3, #908	; 0x38c
 8014f64:	781b      	ldrb	r3, [r3, #0]
 8014f66:	b2db      	uxtb	r3, r3
 8014f68:	2b01      	cmp	r3, #1
 8014f6a:	d107      	bne.n	8014f7c <USB_OTG_USBH_handle_hc_n_In_ISR+0x3c6>
    {
      pdev->host.URB_State[num] = URB_DONE;      
 8014f6c:	687a      	ldr	r2, [r7, #4]
 8014f6e:	683b      	ldr	r3, [r7, #0]
 8014f70:	4413      	add	r3, r2
 8014f72:	f203 339b 	addw	r3, r3, #923	; 0x39b
 8014f76:	2201      	movs	r2, #1
 8014f78:	701a      	strb	r2, [r3, #0]
 8014f7a:	e04a      	b.n	8015012 <USB_OTG_USBH_handle_hc_n_In_ISR+0x45c>
    }
    
    else if (pdev->host.HC_Status[num] == HC_STALL) 
 8014f7c:	687a      	ldr	r2, [r7, #4]
 8014f7e:	683b      	ldr	r3, [r7, #0]
 8014f80:	4413      	add	r3, r2
 8014f82:	f503 7363 	add.w	r3, r3, #908	; 0x38c
 8014f86:	781b      	ldrb	r3, [r3, #0]
 8014f88:	b2db      	uxtb	r3, r3
 8014f8a:	2b05      	cmp	r3, #5
 8014f8c:	d107      	bne.n	8014f9e <USB_OTG_USBH_handle_hc_n_In_ISR+0x3e8>
    {
      pdev->host.URB_State[num] = URB_STALL;
 8014f8e:	687a      	ldr	r2, [r7, #4]
 8014f90:	683b      	ldr	r3, [r7, #0]
 8014f92:	4413      	add	r3, r2
 8014f94:	f203 339b 	addw	r3, r3, #923	; 0x39b
 8014f98:	2204      	movs	r2, #4
 8014f9a:	701a      	strb	r2, [r3, #0]
 8014f9c:	e039      	b.n	8015012 <USB_OTG_USBH_handle_hc_n_In_ISR+0x45c>
    }   
    
    else if((pdev->host.HC_Status[num] == HC_XACTERR) ||
 8014f9e:	687a      	ldr	r2, [r7, #4]
 8014fa0:	683b      	ldr	r3, [r7, #0]
 8014fa2:	4413      	add	r3, r2
 8014fa4:	f503 7363 	add.w	r3, r3, #908	; 0x38c
 8014fa8:	781b      	ldrb	r3, [r3, #0]
 8014faa:	b2db      	uxtb	r3, r3
 8014fac:	2b06      	cmp	r3, #6
 8014fae:	d008      	beq.n	8014fc2 <USB_OTG_USBH_handle_hc_n_In_ISR+0x40c>
            (pdev->host.HC_Status[num] == HC_DATATGLERR))
 8014fb0:	687a      	ldr	r2, [r7, #4]
 8014fb2:	683b      	ldr	r3, [r7, #0]
 8014fb4:	4413      	add	r3, r2
 8014fb6:	f503 7363 	add.w	r3, r3, #908	; 0x38c
 8014fba:	781b      	ldrb	r3, [r3, #0]
 8014fbc:	b2db      	uxtb	r3, r3
    else if((pdev->host.HC_Status[num] == HC_XACTERR) ||
 8014fbe:	2b08      	cmp	r3, #8
 8014fc0:	d10e      	bne.n	8014fe0 <USB_OTG_USBH_handle_hc_n_In_ISR+0x42a>
    {
      pdev->host.ErrCnt[num] = 0;
 8014fc2:	687a      	ldr	r2, [r7, #4]
 8014fc4:	683b      	ldr	r3, [r7, #0]
 8014fc6:	33c4      	adds	r3, #196	; 0xc4
 8014fc8:	009b      	lsls	r3, r3, #2
 8014fca:	4413      	add	r3, r2
 8014fcc:	2200      	movs	r2, #0
 8014fce:	605a      	str	r2, [r3, #4]
      pdev->host.URB_State[num] = URB_ERROR;  
 8014fd0:	687a      	ldr	r2, [r7, #4]
 8014fd2:	683b      	ldr	r3, [r7, #0]
 8014fd4:	4413      	add	r3, r2
 8014fd6:	f203 339b 	addw	r3, r3, #923	; 0x39b
 8014fda:	2203      	movs	r2, #3
 8014fdc:	701a      	strb	r2, [r3, #0]
 8014fde:	e018      	b.n	8015012 <USB_OTG_USBH_handle_hc_n_In_ISR+0x45c>
      
    }
    else if(hcchar.b.eptype == EP_TYPE_INTR)
 8014fe0:	f897 3062 	ldrb.w	r3, [r7, #98]	; 0x62
 8014fe4:	f003 030c 	and.w	r3, r3, #12
 8014fe8:	b2db      	uxtb	r3, r3
 8014fea:	2b0c      	cmp	r3, #12
 8014fec:	d111      	bne.n	8015012 <USB_OTG_USBH_handle_hc_n_In_ISR+0x45c>
    {
      pdev->host.hc[num].toggle_in ^= 1;
 8014fee:	687a      	ldr	r2, [r7, #4]
 8014ff0:	683b      	ldr	r3, [r7, #0]
 8014ff2:	331e      	adds	r3, #30
 8014ff4:	015b      	lsls	r3, r3, #5
 8014ff6:	4413      	add	r3, r2
 8014ff8:	3304      	adds	r3, #4
 8014ffa:	781b      	ldrb	r3, [r3, #0]
 8014ffc:	f083 0301 	eor.w	r3, r3, #1
 8015000:	b2d9      	uxtb	r1, r3
 8015002:	687a      	ldr	r2, [r7, #4]
 8015004:	683b      	ldr	r3, [r7, #0]
 8015006:	331e      	adds	r3, #30
 8015008:	015b      	lsls	r3, r3, #5
 801500a:	4413      	add	r3, r2
 801500c:	3304      	adds	r3, #4
 801500e:	460a      	mov	r2, r1
 8015010:	701a      	strb	r2, [r3, #0]
    }
    
    CLEAR_HC_INT(hcreg , chhltd);    
 8015012:	2300      	movs	r3, #0
 8015014:	61fb      	str	r3, [r7, #28]
 8015016:	7f3b      	ldrb	r3, [r7, #28]
 8015018:	f043 0302 	orr.w	r3, r3, #2
 801501c:	773b      	strb	r3, [r7, #28]
 801501e:	69fa      	ldr	r2, [r7, #28]
 8015020:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8015022:	609a      	str	r2, [r3, #8]
 8015024:	e099      	b.n	801515a <USB_OTG_USBH_handle_hc_n_In_ISR+0x5a4>
    
  }    
  else if (hcint.b.xacterr)
 8015026:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 801502a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 801502e:	b2db      	uxtb	r3, r3
 8015030:	2b00      	cmp	r3, #0
 8015032:	d037      	beq.n	80150a4 <USB_OTG_USBH_handle_hc_n_In_ISR+0x4ee>
  {
    UNMASK_HOST_INT_CHH (num);
 8015034:	687a      	ldr	r2, [r7, #4]
 8015036:	683b      	ldr	r3, [r7, #0]
 8015038:	3322      	adds	r3, #34	; 0x22
 801503a:	009b      	lsls	r3, r3, #2
 801503c:	4413      	add	r3, r2
 801503e:	689b      	ldr	r3, [r3, #8]
 8015040:	68db      	ldr	r3, [r3, #12]
 8015042:	61bb      	str	r3, [r7, #24]
 8015044:	7e3b      	ldrb	r3, [r7, #24]
 8015046:	f043 0302 	orr.w	r3, r3, #2
 801504a:	763b      	strb	r3, [r7, #24]
 801504c:	687a      	ldr	r2, [r7, #4]
 801504e:	683b      	ldr	r3, [r7, #0]
 8015050:	3322      	adds	r3, #34	; 0x22
 8015052:	009b      	lsls	r3, r3, #2
 8015054:	4413      	add	r3, r2
 8015056:	689b      	ldr	r3, [r3, #8]
 8015058:	69ba      	ldr	r2, [r7, #24]
 801505a:	60da      	str	r2, [r3, #12]
    pdev->host.ErrCnt[num] ++;
 801505c:	687a      	ldr	r2, [r7, #4]
 801505e:	683b      	ldr	r3, [r7, #0]
 8015060:	33c4      	adds	r3, #196	; 0xc4
 8015062:	009b      	lsls	r3, r3, #2
 8015064:	4413      	add	r3, r2
 8015066:	685b      	ldr	r3, [r3, #4]
 8015068:	1c5a      	adds	r2, r3, #1
 801506a:	6879      	ldr	r1, [r7, #4]
 801506c:	683b      	ldr	r3, [r7, #0]
 801506e:	33c4      	adds	r3, #196	; 0xc4
 8015070:	009b      	lsls	r3, r3, #2
 8015072:	440b      	add	r3, r1
 8015074:	605a      	str	r2, [r3, #4]
    pdev->host.HC_Status[num] = HC_XACTERR;
 8015076:	687a      	ldr	r2, [r7, #4]
 8015078:	683b      	ldr	r3, [r7, #0]
 801507a:	4413      	add	r3, r2
 801507c:	f503 7363 	add.w	r3, r3, #908	; 0x38c
 8015080:	2206      	movs	r2, #6
 8015082:	701a      	strb	r2, [r3, #0]
    USB_OTG_HC_Halt(pdev, num);
 8015084:	683b      	ldr	r3, [r7, #0]
 8015086:	b2db      	uxtb	r3, r3
 8015088:	4619      	mov	r1, r3
 801508a:	6878      	ldr	r0, [r7, #4]
 801508c:	f7fe fe05 	bl	8013c9a <USB_OTG_HC_Halt>
    CLEAR_HC_INT(hcreg , xacterr);    
 8015090:	2300      	movs	r3, #0
 8015092:	617b      	str	r3, [r7, #20]
 8015094:	7d3b      	ldrb	r3, [r7, #20]
 8015096:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801509a:	753b      	strb	r3, [r7, #20]
 801509c:	697a      	ldr	r2, [r7, #20]
 801509e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80150a0:	609a      	str	r2, [r3, #8]
 80150a2:	e05a      	b.n	801515a <USB_OTG_USBH_handle_hc_n_In_ISR+0x5a4>
    
  }
  else if (hcint.b.nak)  
 80150a4:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 80150a8:	f003 0310 	and.w	r3, r3, #16
 80150ac:	b2db      	uxtb	r3, r3
 80150ae:	2b00      	cmp	r3, #0
 80150b0:	d053      	beq.n	801515a <USB_OTG_USBH_handle_hc_n_In_ISR+0x5a4>
  {  
    if(hcchar.b.eptype == EP_TYPE_INTR)
 80150b2:	f897 3062 	ldrb.w	r3, [r7, #98]	; 0x62
 80150b6:	f003 030c 	and.w	r3, r3, #12
 80150ba:	b2db      	uxtb	r3, r3
 80150bc:	2b0c      	cmp	r3, #12
 80150be:	d11a      	bne.n	80150f6 <USB_OTG_USBH_handle_hc_n_In_ISR+0x540>
    {
      UNMASK_HOST_INT_CHH (num);
 80150c0:	687a      	ldr	r2, [r7, #4]
 80150c2:	683b      	ldr	r3, [r7, #0]
 80150c4:	3322      	adds	r3, #34	; 0x22
 80150c6:	009b      	lsls	r3, r3, #2
 80150c8:	4413      	add	r3, r2
 80150ca:	689b      	ldr	r3, [r3, #8]
 80150cc:	68db      	ldr	r3, [r3, #12]
 80150ce:	613b      	str	r3, [r7, #16]
 80150d0:	7c3b      	ldrb	r3, [r7, #16]
 80150d2:	f043 0302 	orr.w	r3, r3, #2
 80150d6:	743b      	strb	r3, [r7, #16]
 80150d8:	687a      	ldr	r2, [r7, #4]
 80150da:	683b      	ldr	r3, [r7, #0]
 80150dc:	3322      	adds	r3, #34	; 0x22
 80150de:	009b      	lsls	r3, r3, #2
 80150e0:	4413      	add	r3, r2
 80150e2:	689b      	ldr	r3, [r3, #8]
 80150e4:	693a      	ldr	r2, [r7, #16]
 80150e6:	60da      	str	r2, [r3, #12]
      USB_OTG_HC_Halt(pdev, num);
 80150e8:	683b      	ldr	r3, [r7, #0]
 80150ea:	b2db      	uxtb	r3, r3
 80150ec:	4619      	mov	r1, r3
 80150ee:	6878      	ldr	r0, [r7, #4]
 80150f0:	f7fe fdd3 	bl	8013c9a <USB_OTG_HC_Halt>
 80150f4:	e021      	b.n	801513a <USB_OTG_USBH_handle_hc_n_In_ISR+0x584>
    }
    else if  ((hcchar.b.eptype == EP_TYPE_CTRL)||
 80150f6:	f897 3062 	ldrb.w	r3, [r7, #98]	; 0x62
 80150fa:	f003 030c 	and.w	r3, r3, #12
 80150fe:	b2db      	uxtb	r3, r3
 8015100:	2b00      	cmp	r3, #0
 8015102:	d006      	beq.n	8015112 <USB_OTG_USBH_handle_hc_n_In_ISR+0x55c>
              (hcchar.b.eptype == EP_TYPE_BULK))
 8015104:	f897 3062 	ldrb.w	r3, [r7, #98]	; 0x62
 8015108:	f003 030c 	and.w	r3, r3, #12
 801510c:	b2db      	uxtb	r3, r3
    else if  ((hcchar.b.eptype == EP_TYPE_CTRL)||
 801510e:	2b08      	cmp	r3, #8
 8015110:	d113      	bne.n	801513a <USB_OTG_USBH_handle_hc_n_In_ISR+0x584>
    {
      /* re-activate the channel  */
      hcchar.b.chen = 1;
 8015112:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8015116:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801511a:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
      hcchar.b.chdis = 0;
 801511e:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8015122:	f36f 1386 	bfc	r3, #6, #1
 8015126:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
      USB_OTG_WRITE_REG32(&pdev->regs.HC_REGS[num]->HCCHAR, hcchar.d32); 
 801512a:	687a      	ldr	r2, [r7, #4]
 801512c:	683b      	ldr	r3, [r7, #0]
 801512e:	3322      	adds	r3, #34	; 0x22
 8015130:	009b      	lsls	r3, r3, #2
 8015132:	4413      	add	r3, r2
 8015134:	689b      	ldr	r3, [r3, #8]
 8015136:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8015138:	601a      	str	r2, [r3, #0]
    }
    pdev->host.HC_Status[num] = HC_NAK;
 801513a:	687a      	ldr	r2, [r7, #4]
 801513c:	683b      	ldr	r3, [r7, #0]
 801513e:	4413      	add	r3, r2
 8015140:	f503 7363 	add.w	r3, r3, #908	; 0x38c
 8015144:	2203      	movs	r2, #3
 8015146:	701a      	strb	r2, [r3, #0]
    CLEAR_HC_INT(hcreg , nak);   
 8015148:	2300      	movs	r3, #0
 801514a:	60fb      	str	r3, [r7, #12]
 801514c:	7b3b      	ldrb	r3, [r7, #12]
 801514e:	f043 0310 	orr.w	r3, r3, #16
 8015152:	733b      	strb	r3, [r7, #12]
 8015154:	68fa      	ldr	r2, [r7, #12]
 8015156:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8015158:	609a      	str	r2, [r3, #8]
  }
  
  
  return 1;
 801515a:	2301      	movs	r3, #1
  
}
 801515c:	4618      	mov	r0, r3
 801515e:	3770      	adds	r7, #112	; 0x70
 8015160:	46bd      	mov	sp, r7
 8015162:	bd80      	pop	{r7, pc}

08015164 <USB_OTG_USBH_handle_rx_qlvl_ISR>:
*/
#if defined ( __ICCARM__ ) /*!< IAR Compiler */
#pragma optimize = none
#endif /* __CC_ARM */
static uint32_t USB_OTG_USBH_handle_rx_qlvl_ISR (USB_OTG_CORE_HANDLE *pdev)
{
 8015164:	b580      	push	{r7, lr}
 8015166:	b088      	sub	sp, #32
 8015168:	af00      	add	r7, sp, #0
 801516a:	6078      	str	r0, [r7, #4]
  USB_OTG_GRXFSTS_TypeDef       grxsts;
  USB_OTG_GINTMSK_TypeDef       intmsk;
  USB_OTG_HCTSIZn_TypeDef       hctsiz; 
  USB_OTG_HCCHAR_TypeDef        hcchar;
  __IO uint8_t                  channelnum =0;  
 801516c:	2300      	movs	r3, #0
 801516e:	72fb      	strb	r3, [r7, #11]
  uint32_t                      count;    
  
  /* Disable the Rx Status Queue Level interrupt */
  intmsk.d32 = 0;
 8015170:	2300      	movs	r3, #0
 8015172:	617b      	str	r3, [r7, #20]
  intmsk.b.rxstsqlvl = 1;
 8015174:	7d3b      	ldrb	r3, [r7, #20]
 8015176:	f043 0310 	orr.w	r3, r3, #16
 801517a:	753b      	strb	r3, [r7, #20]
  USB_OTG_MODIFY_REG32( &pdev->regs.GREGS->GINTMSK, intmsk.d32, 0);
 801517c:	687b      	ldr	r3, [r7, #4]
 801517e:	68db      	ldr	r3, [r3, #12]
 8015180:	6999      	ldr	r1, [r3, #24]
 8015182:	697b      	ldr	r3, [r7, #20]
 8015184:	43da      	mvns	r2, r3
 8015186:	687b      	ldr	r3, [r7, #4]
 8015188:	68db      	ldr	r3, [r3, #12]
 801518a:	400a      	ands	r2, r1
 801518c:	619a      	str	r2, [r3, #24]
  
  grxsts.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GRXSTSP);
 801518e:	687b      	ldr	r3, [r7, #4]
 8015190:	68db      	ldr	r3, [r3, #12]
 8015192:	6a1b      	ldr	r3, [r3, #32]
 8015194:	61bb      	str	r3, [r7, #24]
  channelnum = grxsts.b.chnum;  
 8015196:	7e3b      	ldrb	r3, [r7, #24]
 8015198:	f3c3 0303 	ubfx	r3, r3, #0, #4
 801519c:	b2db      	uxtb	r3, r3
 801519e:	72fb      	strb	r3, [r7, #11]
  hcchar.d32 = USB_OTG_READ_REG32(&pdev->regs.HC_REGS[channelnum]->HCCHAR);
 80151a0:	7afb      	ldrb	r3, [r7, #11]
 80151a2:	b2db      	uxtb	r3, r3
 80151a4:	687a      	ldr	r2, [r7, #4]
 80151a6:	3322      	adds	r3, #34	; 0x22
 80151a8:	009b      	lsls	r3, r3, #2
 80151aa:	4413      	add	r3, r2
 80151ac:	689b      	ldr	r3, [r3, #8]
 80151ae:	681b      	ldr	r3, [r3, #0]
 80151b0:	60fb      	str	r3, [r7, #12]
  
  switch (grxsts.b.pktsts)
 80151b2:	7ebb      	ldrb	r3, [r7, #26]
 80151b4:	f3c3 0343 	ubfx	r3, r3, #1, #4
 80151b8:	b2db      	uxtb	r3, r3
 80151ba:	2b02      	cmp	r3, #2
 80151bc:	d000      	beq.n	80151c0 <USB_OTG_USBH_handle_rx_qlvl_ISR+0x5c>
  case GRXSTS_PKTSTS_IN_XFER_COMP:
    
  case GRXSTS_PKTSTS_DATA_TOGGLE_ERR:
  case GRXSTS_PKTSTS_CH_HALTED:
  default:
    break;
 80151be:	e08f      	b.n	80152e0 <USB_OTG_USBH_handle_rx_qlvl_ISR+0x17c>
    if ((grxsts.b.bcnt > 0) && (pdev->host.hc[channelnum].xfer_buff != (void  *)0))
 80151c0:	8b3a      	ldrh	r2, [r7, #24]
 80151c2:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80151c6:	4013      	ands	r3, r2
 80151c8:	b29b      	uxth	r3, r3
 80151ca:	2b00      	cmp	r3, #0
 80151cc:	f000 8087 	beq.w	80152de <USB_OTG_USBH_handle_rx_qlvl_ISR+0x17a>
 80151d0:	7afb      	ldrb	r3, [r7, #11]
 80151d2:	b2db      	uxtb	r3, r3
 80151d4:	687a      	ldr	r2, [r7, #4]
 80151d6:	3315      	adds	r3, #21
 80151d8:	015b      	lsls	r3, r3, #5
 80151da:	4413      	add	r3, r2
 80151dc:	f503 738c 	add.w	r3, r3, #280	; 0x118
 80151e0:	681b      	ldr	r3, [r3, #0]
 80151e2:	2b00      	cmp	r3, #0
 80151e4:	d07b      	beq.n	80152de <USB_OTG_USBH_handle_rx_qlvl_ISR+0x17a>
      USB_OTG_ReadPacket(pdev, pdev->host.hc[channelnum].xfer_buff, grxsts.b.bcnt);
 80151e6:	7afb      	ldrb	r3, [r7, #11]
 80151e8:	b2db      	uxtb	r3, r3
 80151ea:	687a      	ldr	r2, [r7, #4]
 80151ec:	3315      	adds	r3, #21
 80151ee:	015b      	lsls	r3, r3, #5
 80151f0:	4413      	add	r3, r2
 80151f2:	f503 738c 	add.w	r3, r3, #280	; 0x118
 80151f6:	6819      	ldr	r1, [r3, #0]
 80151f8:	8b3b      	ldrh	r3, [r7, #24]
 80151fa:	f3c3 130a 	ubfx	r3, r3, #4, #11
 80151fe:	b29b      	uxth	r3, r3
 8015200:	461a      	mov	r2, r3
 8015202:	6878      	ldr	r0, [r7, #4]
 8015204:	f7fd fe6b 	bl	8012ede <USB_OTG_ReadPacket>
      pdev->host.hc[grxsts.b.chnum].xfer_buff += grxsts.b.bcnt;           
 8015208:	7e3b      	ldrb	r3, [r7, #24]
 801520a:	f3c3 0303 	ubfx	r3, r3, #0, #4
 801520e:	b2db      	uxtb	r3, r3
 8015210:	687a      	ldr	r2, [r7, #4]
 8015212:	3315      	adds	r3, #21
 8015214:	015b      	lsls	r3, r3, #5
 8015216:	4413      	add	r3, r2
 8015218:	f503 738c 	add.w	r3, r3, #280	; 0x118
 801521c:	681b      	ldr	r3, [r3, #0]
 801521e:	8b3a      	ldrh	r2, [r7, #24]
 8015220:	f3c2 120a 	ubfx	r2, r2, #4, #11
 8015224:	b292      	uxth	r2, r2
 8015226:	4611      	mov	r1, r2
 8015228:	7e3a      	ldrb	r2, [r7, #24]
 801522a:	f3c2 0203 	ubfx	r2, r2, #0, #4
 801522e:	b2d2      	uxtb	r2, r2
 8015230:	4610      	mov	r0, r2
 8015232:	185a      	adds	r2, r3, r1
 8015234:	6879      	ldr	r1, [r7, #4]
 8015236:	f100 0315 	add.w	r3, r0, #21
 801523a:	015b      	lsls	r3, r3, #5
 801523c:	440b      	add	r3, r1
 801523e:	f503 738c 	add.w	r3, r3, #280	; 0x118
 8015242:	601a      	str	r2, [r3, #0]
      pdev->host.hc[grxsts.b.chnum].xfer_count  += grxsts.b.bcnt;
 8015244:	7e3b      	ldrb	r3, [r7, #24]
 8015246:	f3c3 0303 	ubfx	r3, r3, #0, #4
 801524a:	b2db      	uxtb	r3, r3
 801524c:	687a      	ldr	r2, [r7, #4]
 801524e:	015b      	lsls	r3, r3, #5
 8015250:	4413      	add	r3, r2
 8015252:	f503 7370 	add.w	r3, r3, #960	; 0x3c0
 8015256:	681b      	ldr	r3, [r3, #0]
 8015258:	8b3a      	ldrh	r2, [r7, #24]
 801525a:	f3c2 120a 	ubfx	r2, r2, #4, #11
 801525e:	b292      	uxth	r2, r2
 8015260:	4611      	mov	r1, r2
 8015262:	7e3a      	ldrb	r2, [r7, #24]
 8015264:	f3c2 0203 	ubfx	r2, r2, #0, #4
 8015268:	b2d2      	uxtb	r2, r2
 801526a:	4610      	mov	r0, r2
 801526c:	185a      	adds	r2, r3, r1
 801526e:	6879      	ldr	r1, [r7, #4]
 8015270:	0143      	lsls	r3, r0, #5
 8015272:	440b      	add	r3, r1
 8015274:	f503 7370 	add.w	r3, r3, #960	; 0x3c0
 8015278:	601a      	str	r2, [r3, #0]
      count = pdev->host.hc[channelnum].xfer_count;
 801527a:	7afb      	ldrb	r3, [r7, #11]
 801527c:	b2db      	uxtb	r3, r3
 801527e:	687a      	ldr	r2, [r7, #4]
 8015280:	015b      	lsls	r3, r3, #5
 8015282:	4413      	add	r3, r2
 8015284:	f503 7370 	add.w	r3, r3, #960	; 0x3c0
 8015288:	681b      	ldr	r3, [r3, #0]
 801528a:	61fb      	str	r3, [r7, #28]
      pdev->host.XferCnt[channelnum]  = count;
 801528c:	7afb      	ldrb	r3, [r7, #11]
 801528e:	b2db      	uxtb	r3, r3
 8015290:	461a      	mov	r2, r3
 8015292:	687b      	ldr	r3, [r7, #4]
 8015294:	32d4      	adds	r2, #212	; 0xd4
 8015296:	69f9      	ldr	r1, [r7, #28]
 8015298:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      hctsiz.d32 = USB_OTG_READ_REG32(&pdev->regs.HC_REGS[channelnum]->HCTSIZ);
 801529c:	7afb      	ldrb	r3, [r7, #11]
 801529e:	b2db      	uxtb	r3, r3
 80152a0:	687a      	ldr	r2, [r7, #4]
 80152a2:	3322      	adds	r3, #34	; 0x22
 80152a4:	009b      	lsls	r3, r3, #2
 80152a6:	4413      	add	r3, r2
 80152a8:	689b      	ldr	r3, [r3, #8]
 80152aa:	691b      	ldr	r3, [r3, #16]
 80152ac:	613b      	str	r3, [r7, #16]
      if(hctsiz.b.pktcnt > 0)
 80152ae:	8a7a      	ldrh	r2, [r7, #18]
 80152b0:	f641 73f8 	movw	r3, #8184	; 0x1ff8
 80152b4:	4013      	ands	r3, r2
 80152b6:	b29b      	uxth	r3, r3
 80152b8:	2b00      	cmp	r3, #0
 80152ba:	d010      	beq.n	80152de <USB_OTG_USBH_handle_rx_qlvl_ISR+0x17a>
        hcchar.b.chen = 1;
 80152bc:	7bfb      	ldrb	r3, [r7, #15]
 80152be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80152c2:	73fb      	strb	r3, [r7, #15]
        hcchar.b.chdis = 0;
 80152c4:	7bfb      	ldrb	r3, [r7, #15]
 80152c6:	f36f 1386 	bfc	r3, #6, #1
 80152ca:	73fb      	strb	r3, [r7, #15]
        USB_OTG_WRITE_REG32(&pdev->regs.HC_REGS[channelnum]->HCCHAR, hcchar.d32);
 80152cc:	7afb      	ldrb	r3, [r7, #11]
 80152ce:	b2db      	uxtb	r3, r3
 80152d0:	687a      	ldr	r2, [r7, #4]
 80152d2:	3322      	adds	r3, #34	; 0x22
 80152d4:	009b      	lsls	r3, r3, #2
 80152d6:	4413      	add	r3, r2
 80152d8:	689b      	ldr	r3, [r3, #8]
 80152da:	68fa      	ldr	r2, [r7, #12]
 80152dc:	601a      	str	r2, [r3, #0]
    break;
 80152de:	bf00      	nop
  }
  
  /* Enable the Rx Status Queue Level interrupt */
  intmsk.b.rxstsqlvl = 1;
 80152e0:	7d3b      	ldrb	r3, [r7, #20]
 80152e2:	f043 0310 	orr.w	r3, r3, #16
 80152e6:	753b      	strb	r3, [r7, #20]
  USB_OTG_MODIFY_REG32(&pdev->regs.GREGS->GINTMSK, 0, intmsk.d32);
 80152e8:	687b      	ldr	r3, [r7, #4]
 80152ea:	68db      	ldr	r3, [r3, #12]
 80152ec:	6999      	ldr	r1, [r3, #24]
 80152ee:	697a      	ldr	r2, [r7, #20]
 80152f0:	687b      	ldr	r3, [r7, #4]
 80152f2:	68db      	ldr	r3, [r3, #12]
 80152f4:	430a      	orrs	r2, r1
 80152f6:	619a      	str	r2, [r3, #24]
  return 1;
 80152f8:	2301      	movs	r3, #1
}
 80152fa:	4618      	mov	r0, r3
 80152fc:	3720      	adds	r7, #32
 80152fe:	46bd      	mov	sp, r7
 8015300:	bd80      	pop	{r7, pc}

08015302 <USB_OTG_USBH_handle_IncompletePeriodicXfer_ISR>:
*/
#if defined ( __ICCARM__ ) /*!< IAR Compiler */
#pragma optimize = none
#endif /* __CC_ARM */
static uint32_t USB_OTG_USBH_handle_IncompletePeriodicXfer_ISR (USB_OTG_CORE_HANDLE *pdev)
{
 8015302:	b480      	push	{r7}
 8015304:	b085      	sub	sp, #20
 8015306:	af00      	add	r7, sp, #0
 8015308:	6078      	str	r0, [r7, #4]
  USB_OTG_HCCHAR_TypeDef        hcchar; 
  
  
  
  
  hcchar.d32 = USB_OTG_READ_REG32(&pdev->regs.HC_REGS[0]->HCCHAR);
 801530a:	687b      	ldr	r3, [r7, #4]
 801530c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8015310:	681b      	ldr	r3, [r3, #0]
 8015312:	60bb      	str	r3, [r7, #8]
  hcchar.b.chen = 1;
 8015314:	7afb      	ldrb	r3, [r7, #11]
 8015316:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801531a:	72fb      	strb	r3, [r7, #11]
  hcchar.b.chdis = 1;
 801531c:	7afb      	ldrb	r3, [r7, #11]
 801531e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015322:	72fb      	strb	r3, [r7, #11]
  USB_OTG_WRITE_REG32(&pdev->regs.HC_REGS[0]->HCCHAR, hcchar.d32);  
 8015324:	687b      	ldr	r3, [r7, #4]
 8015326:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801532a:	68ba      	ldr	r2, [r7, #8]
 801532c:	601a      	str	r2, [r3, #0]
  
  gintsts.d32 = 0;
 801532e:	2300      	movs	r3, #0
 8015330:	60fb      	str	r3, [r7, #12]
  /* Clear interrupt */
  gintsts.b.incomplisoout = 1;
 8015332:	7bbb      	ldrb	r3, [r7, #14]
 8015334:	f043 0320 	orr.w	r3, r3, #32
 8015338:	73bb      	strb	r3, [r7, #14]
  USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GINTSTS, gintsts.d32);
 801533a:	687b      	ldr	r3, [r7, #4]
 801533c:	68db      	ldr	r3, [r3, #12]
 801533e:	68fa      	ldr	r2, [r7, #12]
 8015340:	615a      	str	r2, [r3, #20]
  
  return 1;
 8015342:	2301      	movs	r3, #1
}
 8015344:	4618      	mov	r0, r3
 8015346:	3714      	adds	r7, #20
 8015348:	46bd      	mov	sp, r7
 801534a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801534e:	4770      	bx	lr

08015350 <USBH_Connected>:
  *         USB Connect callback function from the Interrupt. 
  * @param  selected device
  * @retval Status
*/
uint8_t USBH_Connected (USB_OTG_CORE_HANDLE *pdev)
{
 8015350:	b480      	push	{r7}
 8015352:	b083      	sub	sp, #12
 8015354:	af00      	add	r7, sp, #0
 8015356:	6078      	str	r0, [r7, #4]
  pdev->host.ConnSts = 1;
 8015358:	687b      	ldr	r3, [r7, #4]
 801535a:	2201      	movs	r2, #1
 801535c:	f8c3 2310 	str.w	r2, [r3, #784]	; 0x310
  return 0;
 8015360:	2300      	movs	r3, #0
}
 8015362:	4618      	mov	r0, r3
 8015364:	370c      	adds	r7, #12
 8015366:	46bd      	mov	sp, r7
 8015368:	f85d 7b04 	ldr.w	r7, [sp], #4
 801536c:	4770      	bx	lr

0801536e <USBH_Disconnected>:
* @param  selected device
* @retval Status
*/

uint8_t USBH_Disconnected (USB_OTG_CORE_HANDLE *pdev)
{
 801536e:	b480      	push	{r7}
 8015370:	b083      	sub	sp, #12
 8015372:	af00      	add	r7, sp, #0
 8015374:	6078      	str	r0, [r7, #4]
  pdev->host.ConnSts = 0;
 8015376:	687b      	ldr	r3, [r7, #4]
 8015378:	2200      	movs	r2, #0
 801537a:	f8c3 2310 	str.w	r2, [r3, #784]	; 0x310
  return 0;  
 801537e:	2300      	movs	r3, #0
}
 8015380:	4618      	mov	r0, r3
 8015382:	370c      	adds	r7, #12
 8015384:	46bd      	mov	sp, r7
 8015386:	f85d 7b04 	ldr.w	r7, [sp], #4
 801538a:	4770      	bx	lr

0801538c <USBH_SOF>:
  * @param  selected device
  * @retval Status
  */

uint8_t USBH_SOF (USB_OTG_CORE_HANDLE *pdev)
{
 801538c:	b480      	push	{r7}
 801538e:	b083      	sub	sp, #12
 8015390:	af00      	add	r7, sp, #0
 8015392:	6078      	str	r0, [r7, #4]
  /* This callback could be used to implement a scheduler process */
  return 0;  
 8015394:	2300      	movs	r3, #0
}
 8015396:	4618      	mov	r0, r3
 8015398:	370c      	adds	r7, #12
 801539a:	46bd      	mov	sp, r7
 801539c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153a0:	4770      	bx	lr

080153a2 <USBH_Init>:
void USBH_Init(USB_OTG_CORE_HANDLE *pdev,
               USB_OTG_CORE_ID_TypeDef coreID,
               USBH_HOST *phost,               
               USBH_Class_cb_TypeDef *class_cb, 
               USBH_Usr_cb_TypeDef *usr_cb)
{
 80153a2:	b580      	push	{r7, lr}
 80153a4:	b084      	sub	sp, #16
 80153a6:	af00      	add	r7, sp, #0
 80153a8:	60f8      	str	r0, [r7, #12]
 80153aa:	607a      	str	r2, [r7, #4]
 80153ac:	603b      	str	r3, [r7, #0]
 80153ae:	460b      	mov	r3, r1
 80153b0:	72fb      	strb	r3, [r7, #11]
     
  /* Hardware Init */
  USB_OTG_BSP_Init(pdev);  
 80153b2:	68f8      	ldr	r0, [r7, #12]
 80153b4:	f7fd fc14 	bl	8012be0 <USB_OTG_BSP_Init>
  
  /* configure GPIO pin used for switching VBUS power */
  USB_OTG_BSP_ConfigVBUS(0);  
 80153b8:	2000      	movs	r0, #0
 80153ba:	f7fd fc87 	bl	8012ccc <USB_OTG_BSP_ConfigVBUS>
  
  
  /* Host de-initializations */
  USBH_DeInit(pdev, phost);
 80153be:	6879      	ldr	r1, [r7, #4]
 80153c0:	68f8      	ldr	r0, [r7, #12]
 80153c2:	f000 f818 	bl	80153f6 <USBH_DeInit>
  
  /*Register class and user callbacks */
  phost->class_cb = class_cb;
 80153c6:	687b      	ldr	r3, [r7, #4]
 80153c8:	683a      	ldr	r2, [r7, #0]
 80153ca:	67da      	str	r2, [r3, #124]	; 0x7c
  phost->usr_cb = usr_cb;  
 80153cc:	687b      	ldr	r3, [r7, #4]
 80153ce:	69ba      	ldr	r2, [r7, #24]
 80153d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    
  /* Start the USB OTG core */     
   HCD_Init(pdev , coreID);
 80153d4:	7afb      	ldrb	r3, [r7, #11]
 80153d6:	4619      	mov	r1, r3
 80153d8:	68f8      	ldr	r0, [r7, #12]
 80153da:	f7fe fd29 	bl	8013e30 <HCD_Init>
   
  /* Upon Init call usr call back */
  phost->usr_cb->Init();
 80153de:	687b      	ldr	r3, [r7, #4]
 80153e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80153e4:	681b      	ldr	r3, [r3, #0]
 80153e6:	4798      	blx	r3
  
  /* Enable Interrupts */
  USB_OTG_BSP_EnableInterrupt(pdev);
 80153e8:	68f8      	ldr	r0, [r7, #12]
 80153ea:	f7fd fc3d 	bl	8012c68 <USB_OTG_BSP_EnableInterrupt>
}
 80153ee:	bf00      	nop
 80153f0:	3710      	adds	r7, #16
 80153f2:	46bd      	mov	sp, r7
 80153f4:	bd80      	pop	{r7, pc}

080153f6 <USBH_DeInit>:
  *         Re-Initialize Host
  * @param  None 
  * @retval status: USBH_Status
  */
USBH_Status USBH_DeInit(USB_OTG_CORE_HANDLE *pdev, USBH_HOST *phost)
{
 80153f6:	b580      	push	{r7, lr}
 80153f8:	b082      	sub	sp, #8
 80153fa:	af00      	add	r7, sp, #0
 80153fc:	6078      	str	r0, [r7, #4]
 80153fe:	6039      	str	r1, [r7, #0]
  /* Software Init */
  
  phost->gState = HOST_IDLE;
 8015400:	683b      	ldr	r3, [r7, #0]
 8015402:	2200      	movs	r2, #0
 8015404:	701a      	strb	r2, [r3, #0]
  phost->gStateBkp = HOST_IDLE; 
 8015406:	683b      	ldr	r3, [r7, #0]
 8015408:	2200      	movs	r2, #0
 801540a:	705a      	strb	r2, [r3, #1]
  phost->EnumState = ENUM_IDLE;
 801540c:	683b      	ldr	r3, [r7, #0]
 801540e:	2200      	movs	r2, #0
 8015410:	709a      	strb	r2, [r3, #2]
  phost->RequestState = CMD_SEND;  
 8015412:	683b      	ldr	r3, [r7, #0]
 8015414:	2201      	movs	r2, #1
 8015416:	70da      	strb	r2, [r3, #3]
  
  phost->Control.state = CTRL_SETUP;
 8015418:	683b      	ldr	r3, [r7, #0]
 801541a:	2201      	movs	r2, #1
 801541c:	771a      	strb	r2, [r3, #28]
  phost->Control.ep0size = USB_OTG_MAX_EP0_SIZE;  
 801541e:	683b      	ldr	r3, [r7, #0]
 8015420:	2240      	movs	r2, #64	; 0x40
 8015422:	719a      	strb	r2, [r3, #6]
  
  phost->device_prop.address = USBH_DEVICE_ADDRESS_DEFAULT;
 8015424:	683b      	ldr	r3, [r7, #0]
 8015426:	2200      	movs	r2, #0
 8015428:	f883 2020 	strb.w	r2, [r3, #32]
  phost->device_prop.speed = HPRT0_PRTSPD_FULL_SPEED;
 801542c:	683b      	ldr	r3, [r7, #0]
 801542e:	2201      	movs	r2, #1
 8015430:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  USBH_Free_Channel  (pdev, phost->Control.hc_num_in);
 8015434:	683b      	ldr	r3, [r7, #0]
 8015436:	791b      	ldrb	r3, [r3, #4]
 8015438:	4619      	mov	r1, r3
 801543a:	6878      	ldr	r0, [r7, #4]
 801543c:	f000 fd5c 	bl	8015ef8 <USBH_Free_Channel>
  USBH_Free_Channel  (pdev, phost->Control.hc_num_out);  
 8015440:	683b      	ldr	r3, [r7, #0]
 8015442:	795b      	ldrb	r3, [r3, #5]
 8015444:	4619      	mov	r1, r3
 8015446:	6878      	ldr	r0, [r7, #4]
 8015448:	f000 fd56 	bl	8015ef8 <USBH_Free_Channel>
  return USBH_OK;
 801544c:	2300      	movs	r3, #0
}
 801544e:	4618      	mov	r0, r3
 8015450:	3708      	adds	r7, #8
 8015452:	46bd      	mov	sp, r7
 8015454:	bd80      	pop	{r7, pc}

08015456 <USBH_Process>:
*         USB Host core main state machine process
* @param  None 
* @retval None
*/
void USBH_Process(USB_OTG_CORE_HANDLE *pdev , USBH_HOST *phost)
{
 8015456:	b580      	push	{r7, lr}
 8015458:	b086      	sub	sp, #24
 801545a:	af02      	add	r7, sp, #8
 801545c:	6078      	str	r0, [r7, #4]
 801545e:	6039      	str	r1, [r7, #0]
  volatile USBH_Status status = USBH_FAIL;
 8015460:	2302      	movs	r3, #2
 8015462:	73fb      	strb	r3, [r7, #15]
  
  
  /* check for Host port events */
  if ((HCD_IsDeviceConnected(pdev) == 0)&& (phost->gState != HOST_IDLE)) 
 8015464:	6878      	ldr	r0, [r7, #4]
 8015466:	f7fe fd48 	bl	8013efa <HCD_IsDeviceConnected>
 801546a:	4603      	mov	r3, r0
 801546c:	2b00      	cmp	r3, #0
 801546e:	d10a      	bne.n	8015486 <USBH_Process+0x30>
 8015470:	683b      	ldr	r3, [r7, #0]
 8015472:	781b      	ldrb	r3, [r3, #0]
 8015474:	2b00      	cmp	r3, #0
 8015476:	d006      	beq.n	8015486 <USBH_Process+0x30>
  {
    if(phost->gState != HOST_DEV_DISCONNECTED) 
 8015478:	683b      	ldr	r3, [r7, #0]
 801547a:	781b      	ldrb	r3, [r3, #0]
 801547c:	2b02      	cmp	r3, #2
 801547e:	d002      	beq.n	8015486 <USBH_Process+0x30>
    {
      phost->gState = HOST_DEV_DISCONNECTED;
 8015480:	683b      	ldr	r3, [r7, #0]
 8015482:	2202      	movs	r2, #2
 8015484:	701a      	strb	r2, [r3, #0]
    }
  }
    
  switch (phost->gState)
 8015486:	683b      	ldr	r3, [r7, #0]
 8015488:	781b      	ldrb	r3, [r3, #0]
 801548a:	2b0a      	cmp	r3, #10
 801548c:	f200 8101 	bhi.w	8015692 <USBH_Process+0x23c>
 8015490:	a201      	add	r2, pc, #4	; (adr r2, 8015498 <USBH_Process+0x42>)
 8015492:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015496:	bf00      	nop
 8015498:	080154c5 	.word	0x080154c5
 801549c:	080154e1 	.word	0x080154e1
 80154a0:	08015659 	.word	0x08015659
 80154a4:	08015693 	.word	0x08015693
 80154a8:	08015595 	.word	0x08015595
 80154ac:	080155df 	.word	0x080155df
 80154b0:	0801560d 	.word	0x0801560d
 80154b4:	0801562b 	.word	0x0801562b
 80154b8:	080155b5 	.word	0x080155b5
 80154bc:	08015693 	.word	0x08015693
 80154c0:	08015635 	.word	0x08015635
  {
  
  case HOST_IDLE :
    
    if (HCD_IsDeviceConnected(pdev))  
 80154c4:	6878      	ldr	r0, [r7, #4]
 80154c6:	f7fe fd18 	bl	8013efa <HCD_IsDeviceConnected>
 80154ca:	4603      	mov	r3, r0
 80154cc:	2b00      	cmp	r3, #0
 80154ce:	f000 80e2 	beq.w	8015696 <USBH_Process+0x240>
    {
      phost->gState = HOST_DEV_ATTACHED;
 80154d2:	683b      	ldr	r3, [r7, #0]
 80154d4:	2201      	movs	r2, #1
 80154d6:	701a      	strb	r2, [r3, #0]
      USB_OTG_BSP_mDelay(100);
 80154d8:	2064      	movs	r0, #100	; 0x64
 80154da:	f7fd fc41 	bl	8012d60 <USB_OTG_BSP_mDelay>
    }
    break;
 80154de:	e0da      	b.n	8015696 <USBH_Process+0x240>
   
  case HOST_DEV_ATTACHED :
    
    phost->usr_cb->DeviceAttached();
 80154e0:	683b      	ldr	r3, [r7, #0]
 80154e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80154e6:	689b      	ldr	r3, [r3, #8]
 80154e8:	4798      	blx	r3
    phost->Control.hc_num_out = USBH_Alloc_Channel(pdev, 0x00);
 80154ea:	2100      	movs	r1, #0
 80154ec:	6878      	ldr	r0, [r7, #4]
 80154ee:	f000 fcdd 	bl	8015eac <USBH_Alloc_Channel>
 80154f2:	4603      	mov	r3, r0
 80154f4:	461a      	mov	r2, r3
 80154f6:	683b      	ldr	r3, [r7, #0]
 80154f8:	715a      	strb	r2, [r3, #5]
    phost->Control.hc_num_in = USBH_Alloc_Channel(pdev, 0x80);  
 80154fa:	2180      	movs	r1, #128	; 0x80
 80154fc:	6878      	ldr	r0, [r7, #4]
 80154fe:	f000 fcd5 	bl	8015eac <USBH_Alloc_Channel>
 8015502:	4603      	mov	r3, r0
 8015504:	461a      	mov	r2, r3
 8015506:	683b      	ldr	r3, [r7, #0]
 8015508:	711a      	strb	r2, [r3, #4]
  
    /* Reset USB Device */
    if ( HCD_ResetPort(pdev) == 0)
 801550a:	6878      	ldr	r0, [r7, #4]
 801550c:	f7fe fce9 	bl	8013ee2 <HCD_ResetPort>
 8015510:	4603      	mov	r3, r0
 8015512:	2b00      	cmp	r3, #0
 8015514:	f040 80c1 	bne.w	801569a <USBH_Process+0x244>
    {
      phost->usr_cb->ResetDevice();
 8015518:	683b      	ldr	r3, [r7, #0]
 801551a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801551e:	68db      	ldr	r3, [r3, #12]
 8015520:	4798      	blx	r3
      /*  Wait for USB USBH_ISR_PrtEnDisableChange()  
      Host is Now ready to start the Enumeration 
      */
      
      phost->device_prop.speed = HCD_GetCurrentSpeed(pdev);
 8015522:	6878      	ldr	r0, [r7, #4]
 8015524:	f7fe fcca 	bl	8013ebc <HCD_GetCurrentSpeed>
 8015528:	4603      	mov	r3, r0
 801552a:	b2da      	uxtb	r2, r3
 801552c:	683b      	ldr	r3, [r7, #0]
 801552e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      
      phost->gState = HOST_ENUMERATION;
 8015532:	683b      	ldr	r3, [r7, #0]
 8015534:	2204      	movs	r2, #4
 8015536:	701a      	strb	r2, [r3, #0]
      phost->usr_cb->DeviceSpeedDetected(phost->device_prop.speed);
 8015538:	683b      	ldr	r3, [r7, #0]
 801553a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801553e:	699b      	ldr	r3, [r3, #24]
 8015540:	683a      	ldr	r2, [r7, #0]
 8015542:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 8015546:	4610      	mov	r0, r2
 8015548:	4798      	blx	r3
        
      /* Open Control pipes */
      USBH_Open_Channel (pdev,
 801554a:	683b      	ldr	r3, [r7, #0]
 801554c:	7919      	ldrb	r1, [r3, #4]
 801554e:	683b      	ldr	r3, [r7, #0]
 8015550:	f893 2020 	ldrb.w	r2, [r3, #32]
 8015554:	683b      	ldr	r3, [r7, #0]
 8015556:	f893 0021 	ldrb.w	r0, [r3, #33]	; 0x21
                           phost->Control.hc_num_in,
                           phost->device_prop.address,
                           phost->device_prop.speed,
                           EP_TYPE_CTRL,
                           phost->Control.ep0size); 
 801555a:	683b      	ldr	r3, [r7, #0]
 801555c:	799b      	ldrb	r3, [r3, #6]
      USBH_Open_Channel (pdev,
 801555e:	b29b      	uxth	r3, r3
 8015560:	9301      	str	r3, [sp, #4]
 8015562:	2300      	movs	r3, #0
 8015564:	9300      	str	r3, [sp, #0]
 8015566:	4603      	mov	r3, r0
 8015568:	6878      	ldr	r0, [r7, #4]
 801556a:	f000 fbd7 	bl	8015d1c <USBH_Open_Channel>
      
      /* Open Control pipes */
      USBH_Open_Channel (pdev,
 801556e:	683b      	ldr	r3, [r7, #0]
 8015570:	7959      	ldrb	r1, [r3, #5]
 8015572:	683b      	ldr	r3, [r7, #0]
 8015574:	f893 2020 	ldrb.w	r2, [r3, #32]
 8015578:	683b      	ldr	r3, [r7, #0]
 801557a:	f893 0021 	ldrb.w	r0, [r3, #33]	; 0x21
                           phost->Control.hc_num_out,
                           phost->device_prop.address,
                           phost->device_prop.speed,
                           EP_TYPE_CTRL,
                           phost->Control.ep0size);          
 801557e:	683b      	ldr	r3, [r7, #0]
 8015580:	799b      	ldrb	r3, [r3, #6]
      USBH_Open_Channel (pdev,
 8015582:	b29b      	uxth	r3, r3
 8015584:	9301      	str	r3, [sp, #4]
 8015586:	2300      	movs	r3, #0
 8015588:	9300      	str	r3, [sp, #0]
 801558a:	4603      	mov	r3, r0
 801558c:	6878      	ldr	r0, [r7, #4]
 801558e:	f000 fbc5 	bl	8015d1c <USBH_Open_Channel>
   }
    break;
 8015592:	e082      	b.n	801569a <USBH_Process+0x244>
    
  case HOST_ENUMERATION:     
    /* Check for enumeration status */  
    if ( USBH_HandleEnum(pdev , phost) == USBH_OK)
 8015594:	6839      	ldr	r1, [r7, #0]
 8015596:	6878      	ldr	r0, [r7, #4]
 8015598:	f000 f8ac 	bl	80156f4 <USBH_HandleEnum>
 801559c:	4603      	mov	r3, r0
 801559e:	2b00      	cmp	r3, #0
 80155a0:	d17d      	bne.n	801569e <USBH_Process+0x248>
    { 
      /* The function shall return USBH_OK when full enumeration is complete */
      
      /* user callback for end of device basic enumeration */
      phost->usr_cb->EnumerationDone();
 80155a2:	683b      	ldr	r3, [r7, #0]
 80155a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80155a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80155aa:	4798      	blx	r3
      
      phost->gState  = HOST_USR_INPUT;    
 80155ac:	683b      	ldr	r3, [r7, #0]
 80155ae:	2208      	movs	r2, #8
 80155b0:	701a      	strb	r2, [r3, #0]
    }
    break;
 80155b2:	e074      	b.n	801569e <USBH_Process+0x248>
    
  case HOST_USR_INPUT:    
    /*The function should return user response true to move to class state */
    if ( phost->usr_cb->UserInput() == USBH_USR_RESP_OK)
 80155b4:	683b      	ldr	r3, [r7, #0]
 80155b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80155ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80155bc:	4798      	blx	r3
 80155be:	4603      	mov	r3, r0
 80155c0:	2b01      	cmp	r3, #1
 80155c2:	d16e      	bne.n	80156a2 <USBH_Process+0x24c>
    {
      if((phost->class_cb->Init(pdev, phost))\
 80155c4:	683b      	ldr	r3, [r7, #0]
 80155c6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80155c8:	681b      	ldr	r3, [r3, #0]
 80155ca:	6839      	ldr	r1, [r7, #0]
 80155cc:	6878      	ldr	r0, [r7, #4]
 80155ce:	4798      	blx	r3
 80155d0:	4603      	mov	r3, r0
 80155d2:	2b00      	cmp	r3, #0
 80155d4:	d165      	bne.n	80156a2 <USBH_Process+0x24c>
        == USBH_OK)
      {
        phost->gState  = HOST_CLASS_REQUEST;     
 80155d6:	683b      	ldr	r3, [r7, #0]
 80155d8:	2205      	movs	r2, #5
 80155da:	701a      	strb	r2, [r3, #0]
      }     
    }   
    break;
 80155dc:	e061      	b.n	80156a2 <USBH_Process+0x24c>
    
  case HOST_CLASS_REQUEST:  
    /* process class standard contol requests state machine */ 
    status = phost->class_cb->Requests(pdev, phost);
 80155de:	683b      	ldr	r3, [r7, #0]
 80155e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80155e2:	689b      	ldr	r3, [r3, #8]
 80155e4:	6839      	ldr	r1, [r7, #0]
 80155e6:	6878      	ldr	r0, [r7, #4]
 80155e8:	4798      	blx	r3
 80155ea:	4603      	mov	r3, r0
 80155ec:	73fb      	strb	r3, [r7, #15]
    
     if(status == USBH_OK)
 80155ee:	7bfb      	ldrb	r3, [r7, #15]
 80155f0:	b2db      	uxtb	r3, r3
 80155f2:	2b00      	cmp	r3, #0
 80155f4:	d103      	bne.n	80155fe <USBH_Process+0x1a8>
     {
       phost->gState  = HOST_CLASS;
 80155f6:	683b      	ldr	r3, [r7, #0]
 80155f8:	2206      	movs	r2, #6
 80155fa:	701a      	strb	r2, [r3, #0]
     {
       USBH_ErrorHandle(phost, status);
     }
 
    
    break;    
 80155fc:	e052      	b.n	80156a4 <USBH_Process+0x24e>
       USBH_ErrorHandle(phost, status);
 80155fe:	7bfb      	ldrb	r3, [r7, #15]
 8015600:	b2db      	uxtb	r3, r3
 8015602:	4619      	mov	r1, r3
 8015604:	6838      	ldr	r0, [r7, #0]
 8015606:	f000 f851 	bl	80156ac <USBH_ErrorHandle>
    break;    
 801560a:	e04b      	b.n	80156a4 <USBH_Process+0x24e>
  case HOST_CLASS:   
    /* process class state machine */
    status = phost->class_cb->Machine(pdev, phost);
 801560c:	683b      	ldr	r3, [r7, #0]
 801560e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8015610:	68db      	ldr	r3, [r3, #12]
 8015612:	6839      	ldr	r1, [r7, #0]
 8015614:	6878      	ldr	r0, [r7, #4]
 8015616:	4798      	blx	r3
 8015618:	4603      	mov	r3, r0
 801561a:	73fb      	strb	r3, [r7, #15]
    USBH_ErrorHandle(phost, status);
 801561c:	7bfb      	ldrb	r3, [r7, #15]
 801561e:	b2db      	uxtb	r3, r3
 8015620:	4619      	mov	r1, r3
 8015622:	6838      	ldr	r0, [r7, #0]
 8015624:	f000 f842 	bl	80156ac <USBH_ErrorHandle>
    break;       
 8015628:	e03c      	b.n	80156a4 <USBH_Process+0x24e>
    
  case HOST_CTRL_XFER:
    /* process control transfer state machine */
    USBH_HandleControl(pdev, phost);    
 801562a:	6839      	ldr	r1, [r7, #0]
 801562c:	6878      	ldr	r0, [r7, #4]
 801562e:	f000 f9d3 	bl	80159d8 <USBH_HandleControl>
    break;
 8015632:	e037      	b.n	80156a4 <USBH_Process+0x24e>
  case HOST_SUSPENDED:
    break;
  
  case HOST_ERROR_STATE:
    /* Re-Initilaize Host for new Enumeration */
    USBH_DeInit(pdev, phost);
 8015634:	6839      	ldr	r1, [r7, #0]
 8015636:	6878      	ldr	r0, [r7, #4]
 8015638:	f7ff fedd 	bl	80153f6 <USBH_DeInit>
    phost->usr_cb->DeInit();
 801563c:	683b      	ldr	r3, [r7, #0]
 801563e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8015642:	685b      	ldr	r3, [r3, #4]
 8015644:	4798      	blx	r3
    phost->class_cb->DeInit(pdev, &phost->device_prop);
 8015646:	683b      	ldr	r3, [r7, #0]
 8015648:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801564a:	685b      	ldr	r3, [r3, #4]
 801564c:	683a      	ldr	r2, [r7, #0]
 801564e:	3220      	adds	r2, #32
 8015650:	4611      	mov	r1, r2
 8015652:	6878      	ldr	r0, [r7, #4]
 8015654:	4798      	blx	r3
    break;
 8015656:	e025      	b.n	80156a4 <USBH_Process+0x24e>
    
  case HOST_DEV_DISCONNECTED :
    
    /* Manage User disconnect operations*/
    phost->usr_cb->DeviceDisconnected();
 8015658:	683b      	ldr	r3, [r7, #0]
 801565a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801565e:	691b      	ldr	r3, [r3, #16]
 8015660:	4798      	blx	r3
    
    /* Re-Initilaize Host for new Enumeration */
    USBH_DeInit(pdev, phost);
 8015662:	6839      	ldr	r1, [r7, #0]
 8015664:	6878      	ldr	r0, [r7, #4]
 8015666:	f7ff fec6 	bl	80153f6 <USBH_DeInit>
    phost->usr_cb->DeInit();
 801566a:	683b      	ldr	r3, [r7, #0]
 801566c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8015670:	685b      	ldr	r3, [r3, #4]
 8015672:	4798      	blx	r3
    phost->class_cb->DeInit(pdev, &phost->device_prop); 
 8015674:	683b      	ldr	r3, [r7, #0]
 8015676:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8015678:	685b      	ldr	r3, [r3, #4]
 801567a:	683a      	ldr	r2, [r7, #0]
 801567c:	3220      	adds	r2, #32
 801567e:	4611      	mov	r1, r2
 8015680:	6878      	ldr	r0, [r7, #4]
 8015682:	4798      	blx	r3
    USBH_DeAllocate_AllChannel(pdev);  
 8015684:	6878      	ldr	r0, [r7, #4]
 8015686:	f000 fc59 	bl	8015f3c <USBH_DeAllocate_AllChannel>
    phost->gState = HOST_IDLE;
 801568a:	683b      	ldr	r3, [r7, #0]
 801568c:	2200      	movs	r2, #0
 801568e:	701a      	strb	r2, [r3, #0]
    
    break;
 8015690:	e008      	b.n	80156a4 <USBH_Process+0x24e>
    
  default :
    break;
 8015692:	bf00      	nop
 8015694:	e006      	b.n	80156a4 <USBH_Process+0x24e>
    break;
 8015696:	bf00      	nop
 8015698:	e004      	b.n	80156a4 <USBH_Process+0x24e>
    break;
 801569a:	bf00      	nop
 801569c:	e002      	b.n	80156a4 <USBH_Process+0x24e>
    break;
 801569e:	bf00      	nop
 80156a0:	e000      	b.n	80156a4 <USBH_Process+0x24e>
    break;
 80156a2:	bf00      	nop
  }

}
 80156a4:	bf00      	nop
 80156a6:	3710      	adds	r7, #16
 80156a8:	46bd      	mov	sp, r7
 80156aa:	bd80      	pop	{r7, pc}

080156ac <USBH_ErrorHandle>:
  *         This function handles the Error on Host side.
  * @param  errType : Type of Error or Busy/OK state
  * @retval None
  */
void USBH_ErrorHandle(USBH_HOST *phost, USBH_Status errType)
{
 80156ac:	b580      	push	{r7, lr}
 80156ae:	b082      	sub	sp, #8
 80156b0:	af00      	add	r7, sp, #0
 80156b2:	6078      	str	r0, [r7, #4]
 80156b4:	460b      	mov	r3, r1
 80156b6:	70fb      	strb	r3, [r7, #3]
  /* Error unrecovered or not supported device speed */
  if ( (errType == USBH_ERROR_SPEED_UNKNOWN) ||
 80156b8:	78fb      	ldrb	r3, [r7, #3]
 80156ba:	2b05      	cmp	r3, #5
 80156bc:	d002      	beq.n	80156c4 <USBH_ErrorHandle+0x18>
 80156be:	78fb      	ldrb	r3, [r7, #3]
 80156c0:	2b04      	cmp	r3, #4
 80156c2:	d108      	bne.n	80156d6 <USBH_ErrorHandle+0x2a>
       (errType == USBH_UNRECOVERED_ERROR) )
  {
    phost->usr_cb->UnrecoveredError(); 
 80156c4:	687b      	ldr	r3, [r7, #4]
 80156c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80156ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80156cc:	4798      	blx	r3
    phost->gState = HOST_ERROR_STATE;   
 80156ce:	687b      	ldr	r3, [r7, #4]
 80156d0:	220a      	movs	r2, #10
 80156d2:	701a      	strb	r2, [r3, #0]
  {
    phost->gState = HOST_ERROR_STATE;  
    /* user callback for initalization */
    phost->usr_cb->Init();
  } 
}
 80156d4:	e00a      	b.n	80156ec <USBH_ErrorHandle+0x40>
  else if(errType == USBH_APPLY_DEINIT)
 80156d6:	78fb      	ldrb	r3, [r7, #3]
 80156d8:	2b06      	cmp	r3, #6
 80156da:	d107      	bne.n	80156ec <USBH_ErrorHandle+0x40>
    phost->gState = HOST_ERROR_STATE;  
 80156dc:	687b      	ldr	r3, [r7, #4]
 80156de:	220a      	movs	r2, #10
 80156e0:	701a      	strb	r2, [r3, #0]
    phost->usr_cb->Init();
 80156e2:	687b      	ldr	r3, [r7, #4]
 80156e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80156e8:	681b      	ldr	r3, [r3, #0]
 80156ea:	4798      	blx	r3
}
 80156ec:	bf00      	nop
 80156ee:	3708      	adds	r7, #8
 80156f0:	46bd      	mov	sp, r7
 80156f2:	bd80      	pop	{r7, pc}

080156f4 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  pdev: Selected device
  * @retval USBH_Status
  */
static USBH_Status USBH_HandleEnum(USB_OTG_CORE_HANDLE *pdev, USBH_HOST *phost)
{
 80156f4:	b580      	push	{r7, lr}
 80156f6:	b096      	sub	sp, #88	; 0x58
 80156f8:	af02      	add	r7, sp, #8
 80156fa:	6078      	str	r0, [r7, #4]
 80156fc:	6039      	str	r1, [r7, #0]
  USBH_Status Status = USBH_BUSY;  
 80156fe:	2301      	movs	r3, #1
 8015700:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  uint8_t Local_Buffer[64];
  
  switch (phost->EnumState)
 8015704:	683b      	ldr	r3, [r7, #0]
 8015706:	789b      	ldrb	r3, [r3, #2]
 8015708:	2b09      	cmp	r3, #9
 801570a:	f200 814a 	bhi.w	80159a2 <USBH_HandleEnum+0x2ae>
 801570e:	a201      	add	r2, pc, #4	; (adr r2, 8015714 <USBH_HandleEnum+0x20>)
 8015710:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015714:	0801573d 	.word	0x0801573d
 8015718:	0801579b 	.word	0x0801579b
 801571c:	080157c5 	.word	0x080157c5
 8015720:	0801582b 	.word	0x0801582b
 8015724:	08015845 	.word	0x08015845
 8015728:	0801587d 	.word	0x0801587d
 801572c:	080158d3 	.word	0x080158d3
 8015730:	08015927 	.word	0x08015927
 8015734:	0801597b 	.word	0x0801597b
 8015738:	0801599b 	.word	0x0801599b
  {
  case ENUM_IDLE:  
    /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
    if ( USBH_Get_DevDesc(pdev , phost, 8) == USBH_OK)
 801573c:	2208      	movs	r2, #8
 801573e:	6839      	ldr	r1, [r7, #0]
 8015740:	6878      	ldr	r0, [r7, #4]
 8015742:	f001 fb3b 	bl	8016dbc <USBH_Get_DevDesc>
 8015746:	4603      	mov	r3, r0
 8015748:	2b00      	cmp	r3, #0
 801574a:	f040 812c 	bne.w	80159a6 <USBH_HandleEnum+0x2b2>
    {
      phost->Control.ep0size = phost->device_prop.Dev_Desc.bMaxPacketSize;
 801574e:	683b      	ldr	r3, [r7, #0]
 8015750:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 8015754:	683b      	ldr	r3, [r7, #0]
 8015756:	719a      	strb	r2, [r3, #6]
      
      /* Issue Reset  */
      HCD_ResetPort(pdev);
 8015758:	6878      	ldr	r0, [r7, #4]
 801575a:	f7fe fbc2 	bl	8013ee2 <HCD_ResetPort>
      phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 801575e:	683b      	ldr	r3, [r7, #0]
 8015760:	2201      	movs	r2, #1
 8015762:	709a      	strb	r2, [r3, #2]
      
      /* modify control channels configuration for MaxPacket size */
      USBH_Modify_Channel (pdev,
 8015764:	683b      	ldr	r3, [r7, #0]
 8015766:	7959      	ldrb	r1, [r3, #5]
                           phost->Control.hc_num_out,
                           0,
                           0,
                           0,
                           phost->Control.ep0size);
 8015768:	683b      	ldr	r3, [r7, #0]
 801576a:	799b      	ldrb	r3, [r3, #6]
      USBH_Modify_Channel (pdev,
 801576c:	b29b      	uxth	r3, r3
 801576e:	9301      	str	r3, [sp, #4]
 8015770:	2300      	movs	r3, #0
 8015772:	9300      	str	r3, [sp, #0]
 8015774:	2300      	movs	r3, #0
 8015776:	2200      	movs	r2, #0
 8015778:	6878      	ldr	r0, [r7, #4]
 801577a:	f000 fb4b 	bl	8015e14 <USBH_Modify_Channel>
      
      USBH_Modify_Channel (pdev,
 801577e:	683b      	ldr	r3, [r7, #0]
 8015780:	7919      	ldrb	r1, [r3, #4]
                           phost->Control.hc_num_in,
                           0,
                           0,
                           0,
                           phost->Control.ep0size);      
 8015782:	683b      	ldr	r3, [r7, #0]
 8015784:	799b      	ldrb	r3, [r3, #6]
      USBH_Modify_Channel (pdev,
 8015786:	b29b      	uxth	r3, r3
 8015788:	9301      	str	r3, [sp, #4]
 801578a:	2300      	movs	r3, #0
 801578c:	9300      	str	r3, [sp, #0]
 801578e:	2300      	movs	r3, #0
 8015790:	2200      	movs	r2, #0
 8015792:	6878      	ldr	r0, [r7, #4]
 8015794:	f000 fb3e 	bl	8015e14 <USBH_Modify_Channel>
    }
    break;
 8015798:	e105      	b.n	80159a6 <USBH_HandleEnum+0x2b2>
    
  case ENUM_GET_FULL_DEV_DESC:  
    /* Get FULL Device Desc  */
    if ( USBH_Get_DevDesc(pdev, phost, USB_DEVICE_DESC_SIZE)\
 801579a:	2212      	movs	r2, #18
 801579c:	6839      	ldr	r1, [r7, #0]
 801579e:	6878      	ldr	r0, [r7, #4]
 80157a0:	f001 fb0c 	bl	8016dbc <USBH_Get_DevDesc>
 80157a4:	4603      	mov	r3, r0
 80157a6:	2b00      	cmp	r3, #0
 80157a8:	f040 80ff 	bne.w	80159aa <USBH_HandleEnum+0x2b6>
      == USBH_OK)
    {
      /* user callback for device descriptor available */
      phost->usr_cb->DeviceDescAvailable(&phost->device_prop.Dev_Desc);      
 80157ac:	683b      	ldr	r3, [r7, #0]
 80157ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80157b2:	69db      	ldr	r3, [r3, #28]
 80157b4:	683a      	ldr	r2, [r7, #0]
 80157b6:	3222      	adds	r2, #34	; 0x22
 80157b8:	4610      	mov	r0, r2
 80157ba:	4798      	blx	r3
      phost->EnumState = ENUM_SET_ADDR;
 80157bc:	683b      	ldr	r3, [r7, #0]
 80157be:	2202      	movs	r2, #2
 80157c0:	709a      	strb	r2, [r3, #2]
    }
    break;
 80157c2:	e0f2      	b.n	80159aa <USBH_HandleEnum+0x2b6>
   
  case ENUM_SET_ADDR: 
    /* set address */
    if ( USBH_SetAddress(pdev, phost, USBH_DEVICE_ADDRESS) == USBH_OK)
 80157c4:	2201      	movs	r2, #1
 80157c6:	6839      	ldr	r1, [r7, #0]
 80157c8:	6878      	ldr	r0, [r7, #4]
 80157ca:	f001 fbc4 	bl	8016f56 <USBH_SetAddress>
 80157ce:	4603      	mov	r3, r0
 80157d0:	2b00      	cmp	r3, #0
 80157d2:	f040 80ec 	bne.w	80159ae <USBH_HandleEnum+0x2ba>
    {
      USB_OTG_BSP_mDelay(2);
 80157d6:	2002      	movs	r0, #2
 80157d8:	f7fd fac2 	bl	8012d60 <USB_OTG_BSP_mDelay>
      phost->device_prop.address = USBH_DEVICE_ADDRESS;
 80157dc:	683b      	ldr	r3, [r7, #0]
 80157de:	2201      	movs	r2, #1
 80157e0:	f883 2020 	strb.w	r2, [r3, #32]
      
      /* user callback for device address assigned */
      phost->usr_cb->DeviceAddressAssigned();
 80157e4:	683b      	ldr	r3, [r7, #0]
 80157e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80157ea:	6a1b      	ldr	r3, [r3, #32]
 80157ec:	4798      	blx	r3
      phost->EnumState = ENUM_GET_CFG_DESC;
 80157ee:	683b      	ldr	r3, [r7, #0]
 80157f0:	2203      	movs	r2, #3
 80157f2:	709a      	strb	r2, [r3, #2]
      
      /* modify control channels to update device address */
      USBH_Modify_Channel (pdev,
 80157f4:	683b      	ldr	r3, [r7, #0]
 80157f6:	7919      	ldrb	r1, [r3, #4]
 80157f8:	683b      	ldr	r3, [r7, #0]
 80157fa:	f893 2020 	ldrb.w	r2, [r3, #32]
 80157fe:	2300      	movs	r3, #0
 8015800:	9301      	str	r3, [sp, #4]
 8015802:	2300      	movs	r3, #0
 8015804:	9300      	str	r3, [sp, #0]
 8015806:	2300      	movs	r3, #0
 8015808:	6878      	ldr	r0, [r7, #4]
 801580a:	f000 fb03 	bl	8015e14 <USBH_Modify_Channel>
                           phost->device_prop.address,
                           0,
                           0,
                           0);
      
      USBH_Modify_Channel (pdev,
 801580e:	683b      	ldr	r3, [r7, #0]
 8015810:	7959      	ldrb	r1, [r3, #5]
 8015812:	683b      	ldr	r3, [r7, #0]
 8015814:	f893 2020 	ldrb.w	r2, [r3, #32]
 8015818:	2300      	movs	r3, #0
 801581a:	9301      	str	r3, [sp, #4]
 801581c:	2300      	movs	r3, #0
 801581e:	9300      	str	r3, [sp, #0]
 8015820:	2300      	movs	r3, #0
 8015822:	6878      	ldr	r0, [r7, #4]
 8015824:	f000 faf6 	bl	8015e14 <USBH_Modify_Channel>
                           phost->device_prop.address,
                           0,
                           0,
                           0);         
    }
    break;
 8015828:	e0c1      	b.n	80159ae <USBH_HandleEnum+0x2ba>
    
  case ENUM_GET_CFG_DESC:  
    /* get standard configuration descriptor */
    if ( USBH_Get_CfgDesc(pdev, 
 801582a:	2209      	movs	r2, #9
 801582c:	6839      	ldr	r1, [r7, #0]
 801582e:	6878      	ldr	r0, [r7, #4]
 8015830:	f001 faee 	bl	8016e10 <USBH_Get_CfgDesc>
 8015834:	4603      	mov	r3, r0
 8015836:	2b00      	cmp	r3, #0
 8015838:	f040 80bb 	bne.w	80159b2 <USBH_HandleEnum+0x2be>
                          phost,
                          USB_CONFIGURATION_DESC_SIZE) == USBH_OK)
    {
      phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 801583c:	683b      	ldr	r3, [r7, #0]
 801583e:	2204      	movs	r2, #4
 8015840:	709a      	strb	r2, [r3, #2]
    }
    break;
 8015842:	e0b6      	b.n	80159b2 <USBH_HandleEnum+0x2be>
    
  case ENUM_GET_FULL_CFG_DESC:  
    /* get FULL config descriptor (config, interface, endpoints) */
    if (USBH_Get_CfgDesc(pdev, 
 8015844:	683b      	ldr	r3, [r7, #0]
 8015846:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8015848:	461a      	mov	r2, r3
 801584a:	6839      	ldr	r1, [r7, #0]
 801584c:	6878      	ldr	r0, [r7, #4]
 801584e:	f001 fadf 	bl	8016e10 <USBH_Get_CfgDesc>
 8015852:	4603      	mov	r3, r0
 8015854:	2b00      	cmp	r3, #0
 8015856:	f040 80ae 	bne.w	80159b6 <USBH_HandleEnum+0x2c2>
                         phost,
                         phost->device_prop.Cfg_Desc.wTotalLength) == USBH_OK)
    {
      /* User callback for configuration descriptors available */
      phost->usr_cb->ConfigurationDescAvailable(&phost->device_prop.Cfg_Desc,
 801585a:	683b      	ldr	r3, [r7, #0]
 801585c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8015860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015862:	683a      	ldr	r2, [r7, #0]
 8015864:	f102 0034 	add.w	r0, r2, #52	; 0x34
                                                      phost->device_prop.Itf_Desc,
 8015868:	683a      	ldr	r2, [r7, #0]
 801586a:	f102 013e 	add.w	r1, r2, #62	; 0x3e
                                                      phost->device_prop.Ep_Desc[0]);
 801586e:	683a      	ldr	r2, [r7, #0]
 8015870:	3250      	adds	r2, #80	; 0x50
      phost->usr_cb->ConfigurationDescAvailable(&phost->device_prop.Cfg_Desc,
 8015872:	4798      	blx	r3
      
      phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8015874:	683b      	ldr	r3, [r7, #0]
 8015876:	2205      	movs	r2, #5
 8015878:	709a      	strb	r2, [r3, #2]
    }
    break;
 801587a:	e09c      	b.n	80159b6 <USBH_HandleEnum+0x2c2>
    
  case ENUM_GET_MFC_STRING_DESC:  
    if (phost->device_prop.Dev_Desc.iManufacturer != 0)
 801587c:	683b      	ldr	r3, [r7, #0]
 801587e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8015882:	2b00      	cmp	r3, #0
 8015884:	d01b      	beq.n	80158be <USBH_HandleEnum+0x1ca>
    { /* Check that Manufacturer String is available */
      
      if ( USBH_Get_StringDesc(pdev,
 8015886:	683b      	ldr	r3, [r7, #0]
 8015888:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 801588c:	f107 010c 	add.w	r1, r7, #12
 8015890:	23ff      	movs	r3, #255	; 0xff
 8015892:	9300      	str	r3, [sp, #0]
 8015894:	460b      	mov	r3, r1
 8015896:	6839      	ldr	r1, [r7, #0]
 8015898:	6878      	ldr	r0, [r7, #4]
 801589a:	f001 fafd 	bl	8016e98 <USBH_Get_StringDesc>
 801589e:	4603      	mov	r3, r0
 80158a0:	2b00      	cmp	r3, #0
 80158a2:	f040 808a 	bne.w	80159ba <USBH_HandleEnum+0x2c6>
                               phost->device_prop.Dev_Desc.iManufacturer, 
                               Local_Buffer , 
                               0xff) == USBH_OK)
      {
        /* User callback for Manufacturing string */
        phost->usr_cb->ManufacturerString(Local_Buffer);
 80158a6:	683b      	ldr	r3, [r7, #0]
 80158a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80158ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80158ae:	f107 020c 	add.w	r2, r7, #12
 80158b2:	4610      	mov	r0, r2
 80158b4:	4798      	blx	r3
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80158b6:	683b      	ldr	r3, [r7, #0]
 80158b8:	2206      	movs	r2, #6
 80158ba:	709a      	strb	r2, [r3, #2]
    else
    {
      phost->usr_cb->ManufacturerString("N/A");      
      phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
    }
    break;
 80158bc:	e07d      	b.n	80159ba <USBH_HandleEnum+0x2c6>
      phost->usr_cb->ManufacturerString("N/A");      
 80158be:	683b      	ldr	r3, [r7, #0]
 80158c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80158c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80158c6:	4843      	ldr	r0, [pc, #268]	; (80159d4 <USBH_HandleEnum+0x2e0>)
 80158c8:	4798      	blx	r3
      phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80158ca:	683b      	ldr	r3, [r7, #0]
 80158cc:	2206      	movs	r2, #6
 80158ce:	709a      	strb	r2, [r3, #2]
    break;
 80158d0:	e073      	b.n	80159ba <USBH_HandleEnum+0x2c6>
    
  case ENUM_GET_PRODUCT_STRING_DESC:   
    if (phost->device_prop.Dev_Desc.iProduct != 0)
 80158d2:	683b      	ldr	r3, [r7, #0]
 80158d4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80158d8:	2b00      	cmp	r3, #0
 80158da:	d01a      	beq.n	8015912 <USBH_HandleEnum+0x21e>
    { /* Check that Product string is available */
      if ( USBH_Get_StringDesc(pdev,
 80158dc:	683b      	ldr	r3, [r7, #0]
 80158de:	f893 2031 	ldrb.w	r2, [r3, #49]	; 0x31
 80158e2:	f107 010c 	add.w	r1, r7, #12
 80158e6:	23ff      	movs	r3, #255	; 0xff
 80158e8:	9300      	str	r3, [sp, #0]
 80158ea:	460b      	mov	r3, r1
 80158ec:	6839      	ldr	r1, [r7, #0]
 80158ee:	6878      	ldr	r0, [r7, #4]
 80158f0:	f001 fad2 	bl	8016e98 <USBH_Get_StringDesc>
 80158f4:	4603      	mov	r3, r0
 80158f6:	2b00      	cmp	r3, #0
 80158f8:	d161      	bne.n	80159be <USBH_HandleEnum+0x2ca>
                               phost->device_prop.Dev_Desc.iProduct, 
                               Local_Buffer, 
                               0xff) == USBH_OK)
      {
        /* User callback for Product string */
        phost->usr_cb->ProductString(Local_Buffer);
 80158fa:	683b      	ldr	r3, [r7, #0]
 80158fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8015900:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015902:	f107 020c 	add.w	r2, r7, #12
 8015906:	4610      	mov	r0, r2
 8015908:	4798      	blx	r3
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 801590a:	683b      	ldr	r3, [r7, #0]
 801590c:	2207      	movs	r2, #7
 801590e:	709a      	strb	r2, [r3, #2]
    else
    {
      phost->usr_cb->ProductString("N/A");
      phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
    } 
    break;
 8015910:	e055      	b.n	80159be <USBH_HandleEnum+0x2ca>
      phost->usr_cb->ProductString("N/A");
 8015912:	683b      	ldr	r3, [r7, #0]
 8015914:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8015918:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801591a:	482e      	ldr	r0, [pc, #184]	; (80159d4 <USBH_HandleEnum+0x2e0>)
 801591c:	4798      	blx	r3
      phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 801591e:	683b      	ldr	r3, [r7, #0]
 8015920:	2207      	movs	r2, #7
 8015922:	709a      	strb	r2, [r3, #2]
    break;
 8015924:	e04b      	b.n	80159be <USBH_HandleEnum+0x2ca>
    
  case ENUM_GET_SERIALNUM_STRING_DESC:   
    if (phost->device_prop.Dev_Desc.iSerialNumber != 0)
 8015926:	683b      	ldr	r3, [r7, #0]
 8015928:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 801592c:	2b00      	cmp	r3, #0
 801592e:	d01a      	beq.n	8015966 <USBH_HandleEnum+0x272>
    { /* Check that Serial number string is available */    
      if ( USBH_Get_StringDesc(pdev, 
 8015930:	683b      	ldr	r3, [r7, #0]
 8015932:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
 8015936:	f107 010c 	add.w	r1, r7, #12
 801593a:	23ff      	movs	r3, #255	; 0xff
 801593c:	9300      	str	r3, [sp, #0]
 801593e:	460b      	mov	r3, r1
 8015940:	6839      	ldr	r1, [r7, #0]
 8015942:	6878      	ldr	r0, [r7, #4]
 8015944:	f001 faa8 	bl	8016e98 <USBH_Get_StringDesc>
 8015948:	4603      	mov	r3, r0
 801594a:	2b00      	cmp	r3, #0
 801594c:	d139      	bne.n	80159c2 <USBH_HandleEnum+0x2ce>
                               phost->device_prop.Dev_Desc.iSerialNumber, 
                               Local_Buffer, 
                               0xff) == USBH_OK)
      {
        /* User callback for Serial number string */
        phost->usr_cb->SerialNumString(Local_Buffer);
 801594e:	683b      	ldr	r3, [r7, #0]
 8015950:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8015954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015956:	f107 020c 	add.w	r2, r7, #12
 801595a:	4610      	mov	r0, r2
 801595c:	4798      	blx	r3
        phost->EnumState = ENUM_SET_CONFIGURATION;
 801595e:	683b      	ldr	r3, [r7, #0]
 8015960:	2208      	movs	r2, #8
 8015962:	709a      	strb	r2, [r3, #2]
    else
    {
      phost->usr_cb->SerialNumString("N/A");      
      phost->EnumState = ENUM_SET_CONFIGURATION;
    }  
    break;
 8015964:	e02d      	b.n	80159c2 <USBH_HandleEnum+0x2ce>
      phost->usr_cb->SerialNumString("N/A");      
 8015966:	683b      	ldr	r3, [r7, #0]
 8015968:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801596c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801596e:	4819      	ldr	r0, [pc, #100]	; (80159d4 <USBH_HandleEnum+0x2e0>)
 8015970:	4798      	blx	r3
      phost->EnumState = ENUM_SET_CONFIGURATION;
 8015972:	683b      	ldr	r3, [r7, #0]
 8015974:	2208      	movs	r2, #8
 8015976:	709a      	strb	r2, [r3, #2]
    break;
 8015978:	e023      	b.n	80159c2 <USBH_HandleEnum+0x2ce>
      
  case ENUM_SET_CONFIGURATION:
    /* set configuration  (default config) */
    if (USBH_SetCfg(pdev, 
                    phost,
                    phost->device_prop.Cfg_Desc.bConfigurationValue) == USBH_OK)
 801597a:	683b      	ldr	r3, [r7, #0]
 801597c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
    if (USBH_SetCfg(pdev, 
 8015980:	b29b      	uxth	r3, r3
 8015982:	461a      	mov	r2, r3
 8015984:	6839      	ldr	r1, [r7, #0]
 8015986:	6878      	ldr	r0, [r7, #4]
 8015988:	f001 fb07 	bl	8016f9a <USBH_SetCfg>
 801598c:	4603      	mov	r3, r0
 801598e:	2b00      	cmp	r3, #0
 8015990:	d119      	bne.n	80159c6 <USBH_HandleEnum+0x2d2>
    {
      phost->EnumState = ENUM_DEV_CONFIGURED;
 8015992:	683b      	ldr	r3, [r7, #0]
 8015994:	2209      	movs	r2, #9
 8015996:	709a      	strb	r2, [r3, #2]
    }
    break;
 8015998:	e015      	b.n	80159c6 <USBH_HandleEnum+0x2d2>

    
  case ENUM_DEV_CONFIGURED:
    /* user callback for enumeration done */
    Status = USBH_OK;
 801599a:	2300      	movs	r3, #0
 801599c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    break;
 80159a0:	e012      	b.n	80159c8 <USBH_HandleEnum+0x2d4>
    
  default:
    break;
 80159a2:	bf00      	nop
 80159a4:	e010      	b.n	80159c8 <USBH_HandleEnum+0x2d4>
    break;
 80159a6:	bf00      	nop
 80159a8:	e00e      	b.n	80159c8 <USBH_HandleEnum+0x2d4>
    break;
 80159aa:	bf00      	nop
 80159ac:	e00c      	b.n	80159c8 <USBH_HandleEnum+0x2d4>
    break;
 80159ae:	bf00      	nop
 80159b0:	e00a      	b.n	80159c8 <USBH_HandleEnum+0x2d4>
    break;
 80159b2:	bf00      	nop
 80159b4:	e008      	b.n	80159c8 <USBH_HandleEnum+0x2d4>
    break;
 80159b6:	bf00      	nop
 80159b8:	e006      	b.n	80159c8 <USBH_HandleEnum+0x2d4>
    break;
 80159ba:	bf00      	nop
 80159bc:	e004      	b.n	80159c8 <USBH_HandleEnum+0x2d4>
    break;
 80159be:	bf00      	nop
 80159c0:	e002      	b.n	80159c8 <USBH_HandleEnum+0x2d4>
    break;
 80159c2:	bf00      	nop
 80159c4:	e000      	b.n	80159c8 <USBH_HandleEnum+0x2d4>
    break;
 80159c6:	bf00      	nop
  }  
  return Status;
 80159c8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 80159cc:	4618      	mov	r0, r3
 80159ce:	3750      	adds	r7, #80	; 0x50
 80159d0:	46bd      	mov	sp, r7
 80159d2:	bd80      	pop	{r7, pc}
 80159d4:	0802289c 	.word	0x0802289c

080159d8 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  pdev: Selected device
  * @retval Status
  */
USBH_Status USBH_HandleControl (USB_OTG_CORE_HANDLE *pdev, USBH_HOST *phost)
{
 80159d8:	b580      	push	{r7, lr}
 80159da:	b084      	sub	sp, #16
 80159dc:	af00      	add	r7, sp, #0
 80159de:	6078      	str	r0, [r7, #4]
 80159e0:	6039      	str	r1, [r7, #0]
  uint8_t direction;  
  static uint16_t timeout = 0;
  USBH_Status status = USBH_OK;
 80159e2:	2300      	movs	r3, #0
 80159e4:	73fb      	strb	r3, [r7, #15]
  URB_STATE URB_Status = URB_IDLE;
 80159e6:	2300      	movs	r3, #0
 80159e8:	73bb      	strb	r3, [r7, #14]
  
  phost->Control.status = CTRL_START;
 80159ea:	683b      	ldr	r3, [r7, #0]
 80159ec:	2200      	movs	r2, #0
 80159ee:	749a      	strb	r2, [r3, #18]

  
  switch (phost->Control.state)
 80159f0:	683b      	ldr	r3, [r7, #0]
 80159f2:	7f1b      	ldrb	r3, [r3, #28]
 80159f4:	3b01      	subs	r3, #1
 80159f6:	2b0a      	cmp	r3, #10
 80159f8:	f200 817e 	bhi.w	8015cf8 <USBH_HandleControl+0x320>
 80159fc:	a201      	add	r2, pc, #4	; (adr r2, 8015a04 <USBH_HandleControl+0x2c>)
 80159fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015a02:	bf00      	nop
 8015a04:	08015a31 	.word	0x08015a31
 8015a08:	08015a4b 	.word	0x08015a4b
 8015a0c:	08015ad1 	.word	0x08015ad1
 8015a10:	08015aeb 	.word	0x08015aeb
 8015a14:	08015b45 	.word	0x08015b45
 8015a18:	08015b71 	.word	0x08015b71
 8015a1c:	08015bc3 	.word	0x08015bc3
 8015a20:	08015bd9 	.word	0x08015bd9
 8015a24:	08015c45 	.word	0x08015c45
 8015a28:	08015c87 	.word	0x08015c87
 8015a2c:	08015cc9 	.word	0x08015cc9
  {
  case CTRL_SETUP:
    /* send a SETUP packet */
    USBH_CtlSendSetup     (pdev, 
	                   phost->Control.setup.d8 , 
 8015a30:	683b      	ldr	r3, [r7, #0]
 8015a32:	f103 0114 	add.w	r1, r3, #20
    USBH_CtlSendSetup     (pdev, 
 8015a36:	683b      	ldr	r3, [r7, #0]
 8015a38:	795b      	ldrb	r3, [r3, #5]
 8015a3a:	461a      	mov	r2, r3
 8015a3c:	6878      	ldr	r0, [r7, #4]
 8015a3e:	f000 ff2d 	bl	801689c <USBH_CtlSendSetup>
	                   phost->Control.hc_num_out);  
    phost->Control.state = CTRL_SETUP_WAIT;  
 8015a42:	683b      	ldr	r3, [r7, #0]
 8015a44:	2202      	movs	r2, #2
 8015a46:	771a      	strb	r2, [r3, #28]
    break; 
 8015a48:	e163      	b.n	8015d12 <USBH_HandleControl+0x33a>
    
  case CTRL_SETUP_WAIT:
    
    URB_Status = HCD_GetURB_State(pdev , phost->Control.hc_num_out); 
 8015a4a:	683b      	ldr	r3, [r7, #0]
 8015a4c:	795b      	ldrb	r3, [r3, #5]
 8015a4e:	4619      	mov	r1, r3
 8015a50:	6878      	ldr	r0, [r7, #4]
 8015a52:	f7fe fa6d 	bl	8013f30 <HCD_GetURB_State>
 8015a56:	4603      	mov	r3, r0
 8015a58:	73bb      	strb	r3, [r7, #14]
    /* case SETUP packet sent successfully */
    if(URB_Status == URB_DONE)
 8015a5a:	7bbb      	ldrb	r3, [r7, #14]
 8015a5c:	2b01      	cmp	r3, #1
 8015a5e:	d12c      	bne.n	8015aba <USBH_HandleControl+0xe2>
    { 
      direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8015a60:	683b      	ldr	r3, [r7, #0]
 8015a62:	7d1b      	ldrb	r3, [r3, #20]
 8015a64:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8015a68:	737b      	strb	r3, [r7, #13]
      
      /* check if there is a data stage */
      if (phost->Control.setup.b.wLength.w != 0 )
 8015a6a:	683b      	ldr	r3, [r7, #0]
 8015a6c:	8b5b      	ldrh	r3, [r3, #26]
 8015a6e:	2b00      	cmp	r3, #0
 8015a70:	d00e      	beq.n	8015a90 <USBH_HandleControl+0xb8>
      {        
        timeout = DATA_STAGE_TIMEOUT;
 8015a72:	4ba6      	ldr	r3, [pc, #664]	; (8015d0c <USBH_HandleControl+0x334>)
 8015a74:	f241 3288 	movw	r2, #5000	; 0x1388
 8015a78:	801a      	strh	r2, [r3, #0]
        if (direction == USB_D2H)
 8015a7a:	7b7b      	ldrb	r3, [r7, #13]
 8015a7c:	2b80      	cmp	r3, #128	; 0x80
 8015a7e:	d103      	bne.n	8015a88 <USBH_HandleControl+0xb0>
        {
          /* Data Direction is IN */
          phost->Control.state = CTRL_DATA_IN;
 8015a80:	683b      	ldr	r3, [r7, #0]
 8015a82:	2203      	movs	r2, #3
 8015a84:	771a      	strb	r2, [r3, #28]
 8015a86:	e010      	b.n	8015aaa <USBH_HandleControl+0xd2>
        }
        else
        {
          /* Data Direction is OUT */
          phost->Control.state = CTRL_DATA_OUT;
 8015a88:	683b      	ldr	r3, [r7, #0]
 8015a8a:	2205      	movs	r2, #5
 8015a8c:	771a      	strb	r2, [r3, #28]
 8015a8e:	e00c      	b.n	8015aaa <USBH_HandleControl+0xd2>
        } 
      }
      /* No DATA stage */
      else
      {
        timeout = NODATA_STAGE_TIMEOUT;
 8015a90:	4b9e      	ldr	r3, [pc, #632]	; (8015d0c <USBH_HandleControl+0x334>)
 8015a92:	2232      	movs	r2, #50	; 0x32
 8015a94:	801a      	strh	r2, [r3, #0]
        
        /* If there is No Data Transfer Stage */
        if (direction == USB_D2H)
 8015a96:	7b7b      	ldrb	r3, [r7, #13]
 8015a98:	2b80      	cmp	r3, #128	; 0x80
 8015a9a:	d103      	bne.n	8015aa4 <USBH_HandleControl+0xcc>
        {
          /* Data Direction is IN */
          phost->Control.state = CTRL_STATUS_OUT;
 8015a9c:	683b      	ldr	r3, [r7, #0]
 8015a9e:	2209      	movs	r2, #9
 8015aa0:	771a      	strb	r2, [r3, #28]
 8015aa2:	e002      	b.n	8015aaa <USBH_HandleControl+0xd2>
        }
        else
        {
          /* Data Direction is OUT */
          phost->Control.state = CTRL_STATUS_IN;
 8015aa4:	683b      	ldr	r3, [r7, #0]
 8015aa6:	2207      	movs	r2, #7
 8015aa8:	771a      	strb	r2, [r3, #28]
        } 
      }          
      /* Set the delay timer to enable timeout for data stage completion */
      phost->Control.timer = HCD_GetCurrentFrame(pdev);
 8015aaa:	6878      	ldr	r0, [r7, #4]
 8015aac:	f7fe fa32 	bl	8013f14 <HCD_GetCurrentFrame>
 8015ab0:	4603      	mov	r3, r0
 8015ab2:	b29a      	uxth	r2, r3
 8015ab4:	683b      	ldr	r3, [r7, #0]
 8015ab6:	821a      	strh	r2, [r3, #16]
    else if(URB_Status == URB_ERROR)
    {
      phost->Control.state = CTRL_ERROR;     
      phost->Control.status = CTRL_XACTERR;
    }    
    break;
 8015ab8:	e120      	b.n	8015cfc <USBH_HandleControl+0x324>
    else if(URB_Status == URB_ERROR)
 8015aba:	7bbb      	ldrb	r3, [r7, #14]
 8015abc:	2b03      	cmp	r3, #3
 8015abe:	f040 811d 	bne.w	8015cfc <USBH_HandleControl+0x324>
      phost->Control.state = CTRL_ERROR;     
 8015ac2:	683b      	ldr	r3, [r7, #0]
 8015ac4:	220b      	movs	r2, #11
 8015ac6:	771a      	strb	r2, [r3, #28]
      phost->Control.status = CTRL_XACTERR;
 8015ac8:	683b      	ldr	r3, [r7, #0]
 8015aca:	2205      	movs	r2, #5
 8015acc:	749a      	strb	r2, [r3, #18]
    break;
 8015ace:	e115      	b.n	8015cfc <USBH_HandleControl+0x324>
    
  case CTRL_DATA_IN:  
    /* Issue an IN token */ 
    USBH_CtlReceiveData(pdev,
 8015ad0:	683b      	ldr	r3, [r7, #0]
 8015ad2:	6899      	ldr	r1, [r3, #8]
 8015ad4:	683b      	ldr	r3, [r7, #0]
 8015ad6:	899a      	ldrh	r2, [r3, #12]
 8015ad8:	683b      	ldr	r3, [r7, #0]
 8015ada:	791b      	ldrb	r3, [r3, #4]
 8015adc:	6878      	ldr	r0, [r7, #4]
 8015ade:	f000 ff66 	bl	80169ae <USBH_CtlReceiveData>
                        phost->Control.buff, 
                        phost->Control.length,
                        phost->Control.hc_num_in);
 
    phost->Control.state = CTRL_DATA_IN_WAIT;
 8015ae2:	683b      	ldr	r3, [r7, #0]
 8015ae4:	2204      	movs	r2, #4
 8015ae6:	771a      	strb	r2, [r3, #28]
    break;    
 8015ae8:	e113      	b.n	8015d12 <USBH_HandleControl+0x33a>
    
  case CTRL_DATA_IN_WAIT:
    
    URB_Status = HCD_GetURB_State(pdev , phost->Control.hc_num_in); 
 8015aea:	683b      	ldr	r3, [r7, #0]
 8015aec:	791b      	ldrb	r3, [r3, #4]
 8015aee:	4619      	mov	r1, r3
 8015af0:	6878      	ldr	r0, [r7, #4]
 8015af2:	f7fe fa1d 	bl	8013f30 <HCD_GetURB_State>
 8015af6:	4603      	mov	r3, r0
 8015af8:	73bb      	strb	r3, [r7, #14]
    
    /* check is DATA packet transfered successfully */
    if  (URB_Status == URB_DONE)
 8015afa:	7bbb      	ldrb	r3, [r7, #14]
 8015afc:	2b01      	cmp	r3, #1
 8015afe:	d102      	bne.n	8015b06 <USBH_HandleControl+0x12e>
    { 
      phost->Control.state = CTRL_STATUS_OUT;
 8015b00:	683b      	ldr	r3, [r7, #0]
 8015b02:	2209      	movs	r2, #9
 8015b04:	771a      	strb	r2, [r3, #28]
    }
   
    /* manage error cases*/
    if  (URB_Status == URB_STALL) 
 8015b06:	7bbb      	ldrb	r3, [r7, #14]
 8015b08:	2b04      	cmp	r3, #4
 8015b0a:	d104      	bne.n	8015b16 <USBH_HandleControl+0x13e>
    { 
      /* In stall case, return to previous machine state*/
      phost->gState =   phost->gStateBkp;
 8015b0c:	683b      	ldr	r3, [r7, #0]
 8015b0e:	785a      	ldrb	r2, [r3, #1]
 8015b10:	683b      	ldr	r3, [r7, #0]
 8015b12:	701a      	strb	r2, [r3, #0]
    else if ((HCD_GetCurrentFrame(pdev)- phost->Control.timer) > timeout)
    {
      /* timeout for IN transfer */
      phost->Control.state = CTRL_ERROR; 
    }   
    break;
 8015b14:	e0f4      	b.n	8015d00 <USBH_HandleControl+0x328>
    else if (URB_Status == URB_ERROR)
 8015b16:	7bbb      	ldrb	r3, [r7, #14]
 8015b18:	2b03      	cmp	r3, #3
 8015b1a:	d103      	bne.n	8015b24 <USBH_HandleControl+0x14c>
      phost->Control.state = CTRL_ERROR;    
 8015b1c:	683b      	ldr	r3, [r7, #0]
 8015b1e:	220b      	movs	r2, #11
 8015b20:	771a      	strb	r2, [r3, #28]
    break;
 8015b22:	e0ed      	b.n	8015d00 <USBH_HandleControl+0x328>
    else if ((HCD_GetCurrentFrame(pdev)- phost->Control.timer) > timeout)
 8015b24:	6878      	ldr	r0, [r7, #4]
 8015b26:	f7fe f9f5 	bl	8013f14 <HCD_GetCurrentFrame>
 8015b2a:	4602      	mov	r2, r0
 8015b2c:	683b      	ldr	r3, [r7, #0]
 8015b2e:	8a1b      	ldrh	r3, [r3, #16]
 8015b30:	1ad3      	subs	r3, r2, r3
 8015b32:	4a76      	ldr	r2, [pc, #472]	; (8015d0c <USBH_HandleControl+0x334>)
 8015b34:	8812      	ldrh	r2, [r2, #0]
 8015b36:	4293      	cmp	r3, r2
 8015b38:	f240 80e2 	bls.w	8015d00 <USBH_HandleControl+0x328>
      phost->Control.state = CTRL_ERROR; 
 8015b3c:	683b      	ldr	r3, [r7, #0]
 8015b3e:	220b      	movs	r2, #11
 8015b40:	771a      	strb	r2, [r3, #28]
    break;
 8015b42:	e0dd      	b.n	8015d00 <USBH_HandleControl+0x328>
    
  case CTRL_DATA_OUT:
    /* Start DATA out transfer (only one DATA packet)*/
    pdev->host.hc[phost->Control.hc_num_out].toggle_out = 1; 
 8015b44:	683b      	ldr	r3, [r7, #0]
 8015b46:	795b      	ldrb	r3, [r3, #5]
 8015b48:	687a      	ldr	r2, [r7, #4]
 8015b4a:	331e      	adds	r3, #30
 8015b4c:	015b      	lsls	r3, r3, #5
 8015b4e:	4413      	add	r3, r2
 8015b50:	3305      	adds	r3, #5
 8015b52:	2201      	movs	r2, #1
 8015b54:	701a      	strb	r2, [r3, #0]
        
    USBH_CtlSendData (pdev,
 8015b56:	683b      	ldr	r3, [r7, #0]
 8015b58:	6899      	ldr	r1, [r3, #8]
 8015b5a:	683b      	ldr	r3, [r7, #0]
 8015b5c:	899a      	ldrh	r2, [r3, #12]
 8015b5e:	683b      	ldr	r3, [r7, #0]
 8015b60:	795b      	ldrb	r3, [r3, #5]
 8015b62:	6878      	ldr	r0, [r7, #4]
 8015b64:	f000 fece 	bl	8016904 <USBH_CtlSendData>
    



    
    phost->Control.state = CTRL_DATA_OUT_WAIT;
 8015b68:	683b      	ldr	r3, [r7, #0]
 8015b6a:	2206      	movs	r2, #6
 8015b6c:	771a      	strb	r2, [r3, #28]
    break;
 8015b6e:	e0d0      	b.n	8015d12 <USBH_HandleControl+0x33a>
    
  case CTRL_DATA_OUT_WAIT:
    
    URB_Status = HCD_GetURB_State(pdev , phost->Control.hc_num_out);     
 8015b70:	683b      	ldr	r3, [r7, #0]
 8015b72:	795b      	ldrb	r3, [r3, #5]
 8015b74:	4619      	mov	r1, r3
 8015b76:	6878      	ldr	r0, [r7, #4]
 8015b78:	f7fe f9da 	bl	8013f30 <HCD_GetURB_State>
 8015b7c:	4603      	mov	r3, r0
 8015b7e:	73bb      	strb	r3, [r7, #14]
    if  (URB_Status == URB_DONE)
 8015b80:	7bbb      	ldrb	r3, [r7, #14]
 8015b82:	2b01      	cmp	r3, #1
 8015b84:	d103      	bne.n	8015b8e <USBH_HandleControl+0x1b6>
    { /* If the Setup Pkt is sent successful, then change the state */
      phost->Control.state = CTRL_STATUS_IN;
 8015b86:	683b      	ldr	r3, [r7, #0]
 8015b88:	2207      	movs	r2, #7
 8015b8a:	771a      	strb	r2, [r3, #28]
    else if (URB_Status == URB_ERROR)
    {
      /* device error */
      phost->Control.state = CTRL_ERROR;      
    } 
    break;
 8015b8c:	e0ba      	b.n	8015d04 <USBH_HandleControl+0x32c>
    else if  (URB_Status == URB_STALL) 
 8015b8e:	7bbb      	ldrb	r3, [r7, #14]
 8015b90:	2b04      	cmp	r3, #4
 8015b92:	d107      	bne.n	8015ba4 <USBH_HandleControl+0x1cc>
      phost->gState =   phost->gStateBkp;
 8015b94:	683b      	ldr	r3, [r7, #0]
 8015b96:	785a      	ldrb	r2, [r3, #1]
 8015b98:	683b      	ldr	r3, [r7, #0]
 8015b9a:	701a      	strb	r2, [r3, #0]
      phost->Control.state = CTRL_STALLED;  
 8015b9c:	683b      	ldr	r3, [r7, #0]
 8015b9e:	220c      	movs	r2, #12
 8015ba0:	771a      	strb	r2, [r3, #28]
    break;
 8015ba2:	e0af      	b.n	8015d04 <USBH_HandleControl+0x32c>
    else if  (URB_Status == URB_NOTREADY)
 8015ba4:	7bbb      	ldrb	r3, [r7, #14]
 8015ba6:	2b02      	cmp	r3, #2
 8015ba8:	d103      	bne.n	8015bb2 <USBH_HandleControl+0x1da>
      phost->Control.state = CTRL_DATA_OUT;
 8015baa:	683b      	ldr	r3, [r7, #0]
 8015bac:	2205      	movs	r2, #5
 8015bae:	771a      	strb	r2, [r3, #28]
    break;
 8015bb0:	e0a8      	b.n	8015d04 <USBH_HandleControl+0x32c>
    else if (URB_Status == URB_ERROR)
 8015bb2:	7bbb      	ldrb	r3, [r7, #14]
 8015bb4:	2b03      	cmp	r3, #3
 8015bb6:	f040 80a5 	bne.w	8015d04 <USBH_HandleControl+0x32c>
      phost->Control.state = CTRL_ERROR;      
 8015bba:	683b      	ldr	r3, [r7, #0]
 8015bbc:	220b      	movs	r2, #11
 8015bbe:	771a      	strb	r2, [r3, #28]
    break;
 8015bc0:	e0a0      	b.n	8015d04 <USBH_HandleControl+0x32c>
    
    
  case CTRL_STATUS_IN:
    /* Send 0 bytes out packet */
    USBH_CtlReceiveData (pdev,
 8015bc2:	683b      	ldr	r3, [r7, #0]
 8015bc4:	791b      	ldrb	r3, [r3, #4]
 8015bc6:	2200      	movs	r2, #0
 8015bc8:	2100      	movs	r1, #0
 8015bca:	6878      	ldr	r0, [r7, #4]
 8015bcc:	f000 feef 	bl	80169ae <USBH_CtlReceiveData>
                         0,
                         0,
                         phost->Control.hc_num_in);
    
    phost->Control.state = CTRL_STATUS_IN_WAIT;
 8015bd0:	683b      	ldr	r3, [r7, #0]
 8015bd2:	2208      	movs	r2, #8
 8015bd4:	771a      	strb	r2, [r3, #28]
    
    break;
 8015bd6:	e09c      	b.n	8015d12 <USBH_HandleControl+0x33a>
    
  case CTRL_STATUS_IN_WAIT:
    
    URB_Status = HCD_GetURB_State(pdev , phost->Control.hc_num_in); 
 8015bd8:	683b      	ldr	r3, [r7, #0]
 8015bda:	791b      	ldrb	r3, [r3, #4]
 8015bdc:	4619      	mov	r1, r3
 8015bde:	6878      	ldr	r0, [r7, #4]
 8015be0:	f7fe f9a6 	bl	8013f30 <HCD_GetURB_State>
 8015be4:	4603      	mov	r3, r0
 8015be6:	73bb      	strb	r3, [r7, #14]
    
    if  ( URB_Status == URB_DONE)
 8015be8:	7bbb      	ldrb	r3, [r7, #14]
 8015bea:	2b01      	cmp	r3, #1
 8015bec:	d107      	bne.n	8015bfe <USBH_HandleControl+0x226>
    { /* Control transfers completed, Exit the State Machine */
      phost->gState =   phost->gStateBkp;
 8015bee:	683b      	ldr	r3, [r7, #0]
 8015bf0:	785a      	ldrb	r2, [r3, #1]
 8015bf2:	683b      	ldr	r3, [r7, #0]
 8015bf4:	701a      	strb	r2, [r3, #0]
      phost->Control.state = CTRL_COMPLETE;
 8015bf6:	683b      	ldr	r3, [r7, #0]
 8015bf8:	220d      	movs	r2, #13
 8015bfa:	771a      	strb	r2, [r3, #28]
      /* Control transfers completed, Exit the State Machine */
      phost->gState =   phost->gStateBkp;
      phost->Control.status = CTRL_STALL;
      status = USBH_NOT_SUPPORTED;
    }
    break;
 8015bfc:	e084      	b.n	8015d08 <USBH_HandleControl+0x330>
    else if (URB_Status == URB_ERROR)
 8015bfe:	7bbb      	ldrb	r3, [r7, #14]
 8015c00:	2b03      	cmp	r3, #3
 8015c02:	d103      	bne.n	8015c0c <USBH_HandleControl+0x234>
      phost->Control.state = CTRL_ERROR;  
 8015c04:	683b      	ldr	r3, [r7, #0]
 8015c06:	220b      	movs	r2, #11
 8015c08:	771a      	strb	r2, [r3, #28]
    break;
 8015c0a:	e07d      	b.n	8015d08 <USBH_HandleControl+0x330>
    else if((HCD_GetCurrentFrame(pdev)\
 8015c0c:	6878      	ldr	r0, [r7, #4]
 8015c0e:	f7fe f981 	bl	8013f14 <HCD_GetCurrentFrame>
 8015c12:	4602      	mov	r2, r0
      - phost->Control.timer) > timeout)
 8015c14:	683b      	ldr	r3, [r7, #0]
 8015c16:	8a1b      	ldrh	r3, [r3, #16]
 8015c18:	1ad3      	subs	r3, r2, r3
 8015c1a:	4a3c      	ldr	r2, [pc, #240]	; (8015d0c <USBH_HandleControl+0x334>)
 8015c1c:	8812      	ldrh	r2, [r2, #0]
    else if((HCD_GetCurrentFrame(pdev)\
 8015c1e:	4293      	cmp	r3, r2
 8015c20:	d903      	bls.n	8015c2a <USBH_HandleControl+0x252>
      phost->Control.state = CTRL_ERROR; 
 8015c22:	683b      	ldr	r3, [r7, #0]
 8015c24:	220b      	movs	r2, #11
 8015c26:	771a      	strb	r2, [r3, #28]
    break;
 8015c28:	e06e      	b.n	8015d08 <USBH_HandleControl+0x330>
     else if(URB_Status == URB_STALL)
 8015c2a:	7bbb      	ldrb	r3, [r7, #14]
 8015c2c:	2b04      	cmp	r3, #4
 8015c2e:	d16b      	bne.n	8015d08 <USBH_HandleControl+0x330>
      phost->gState =   phost->gStateBkp;
 8015c30:	683b      	ldr	r3, [r7, #0]
 8015c32:	785a      	ldrb	r2, [r3, #1]
 8015c34:	683b      	ldr	r3, [r7, #0]
 8015c36:	701a      	strb	r2, [r3, #0]
      phost->Control.status = CTRL_STALL;
 8015c38:	683b      	ldr	r3, [r7, #0]
 8015c3a:	2204      	movs	r2, #4
 8015c3c:	749a      	strb	r2, [r3, #18]
      status = USBH_NOT_SUPPORTED;
 8015c3e:	2303      	movs	r3, #3
 8015c40:	73fb      	strb	r3, [r7, #15]
    break;
 8015c42:	e061      	b.n	8015d08 <USBH_HandleControl+0x330>
    
  case CTRL_STATUS_OUT:
    pdev->host.hc[phost->Control.hc_num_out].toggle_out ^= 1; 
 8015c44:	683b      	ldr	r3, [r7, #0]
 8015c46:	795b      	ldrb	r3, [r3, #5]
 8015c48:	687a      	ldr	r2, [r7, #4]
 8015c4a:	331e      	adds	r3, #30
 8015c4c:	015b      	lsls	r3, r3, #5
 8015c4e:	4413      	add	r3, r2
 8015c50:	3305      	adds	r3, #5
 8015c52:	781b      	ldrb	r3, [r3, #0]
 8015c54:	683a      	ldr	r2, [r7, #0]
 8015c56:	7952      	ldrb	r2, [r2, #5]
 8015c58:	4610      	mov	r0, r2
 8015c5a:	f083 0301 	eor.w	r3, r3, #1
 8015c5e:	b2d9      	uxtb	r1, r3
 8015c60:	687a      	ldr	r2, [r7, #4]
 8015c62:	f100 031e 	add.w	r3, r0, #30
 8015c66:	015b      	lsls	r3, r3, #5
 8015c68:	4413      	add	r3, r2
 8015c6a:	3305      	adds	r3, #5
 8015c6c:	460a      	mov	r2, r1
 8015c6e:	701a      	strb	r2, [r3, #0]
    USBH_CtlSendData (pdev,
 8015c70:	683b      	ldr	r3, [r7, #0]
 8015c72:	795b      	ldrb	r3, [r3, #5]
 8015c74:	2200      	movs	r2, #0
 8015c76:	2100      	movs	r1, #0
 8015c78:	6878      	ldr	r0, [r7, #4]
 8015c7a:	f000 fe43 	bl	8016904 <USBH_CtlSendData>
                      0,
                      0,
                      phost->Control.hc_num_out);
    
    phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8015c7e:	683b      	ldr	r3, [r7, #0]
 8015c80:	220a      	movs	r2, #10
 8015c82:	771a      	strb	r2, [r3, #28]
    break;
 8015c84:	e045      	b.n	8015d12 <USBH_HandleControl+0x33a>
    
  case CTRL_STATUS_OUT_WAIT: 
    
    URB_Status = HCD_GetURB_State(pdev , phost->Control.hc_num_out);  
 8015c86:	683b      	ldr	r3, [r7, #0]
 8015c88:	795b      	ldrb	r3, [r3, #5]
 8015c8a:	4619      	mov	r1, r3
 8015c8c:	6878      	ldr	r0, [r7, #4]
 8015c8e:	f7fe f94f 	bl	8013f30 <HCD_GetURB_State>
 8015c92:	4603      	mov	r3, r0
 8015c94:	73bb      	strb	r3, [r7, #14]
    if  (URB_Status == URB_DONE)
 8015c96:	7bbb      	ldrb	r3, [r7, #14]
 8015c98:	2b01      	cmp	r3, #1
 8015c9a:	d107      	bne.n	8015cac <USBH_HandleControl+0x2d4>
    { 
      phost->gState =   phost->gStateBkp; 
 8015c9c:	683b      	ldr	r3, [r7, #0]
 8015c9e:	785a      	ldrb	r2, [r3, #1]
 8015ca0:	683b      	ldr	r3, [r7, #0]
 8015ca2:	701a      	strb	r2, [r3, #0]
      phost->Control.state = CTRL_COMPLETE; 
 8015ca4:	683b      	ldr	r3, [r7, #0]
 8015ca6:	220d      	movs	r2, #13
 8015ca8:	771a      	strb	r2, [r3, #28]
    }      
    else if (URB_Status == URB_ERROR)
    {
      phost->Control.state = CTRL_ERROR;      
    }
    break;
 8015caa:	e031      	b.n	8015d10 <USBH_HandleControl+0x338>
    else if  (URB_Status == URB_NOTREADY)
 8015cac:	7bbb      	ldrb	r3, [r7, #14]
 8015cae:	2b02      	cmp	r3, #2
 8015cb0:	d103      	bne.n	8015cba <USBH_HandleControl+0x2e2>
      phost->Control.state = CTRL_STATUS_OUT;
 8015cb2:	683b      	ldr	r3, [r7, #0]
 8015cb4:	2209      	movs	r2, #9
 8015cb6:	771a      	strb	r2, [r3, #28]
    break;
 8015cb8:	e02a      	b.n	8015d10 <USBH_HandleControl+0x338>
    else if (URB_Status == URB_ERROR)
 8015cba:	7bbb      	ldrb	r3, [r7, #14]
 8015cbc:	2b03      	cmp	r3, #3
 8015cbe:	d127      	bne.n	8015d10 <USBH_HandleControl+0x338>
      phost->Control.state = CTRL_ERROR;      
 8015cc0:	683b      	ldr	r3, [r7, #0]
 8015cc2:	220b      	movs	r2, #11
 8015cc4:	771a      	strb	r2, [r3, #28]
    break;
 8015cc6:	e023      	b.n	8015d10 <USBH_HandleControl+0x338>
    PID; i.e., recovery actions via some other pipe are not required for control
    endpoints. For the Default Control Pipe, a device reset will ultimately be 
    required to clear the halt or error condition if the next Setup PID is not 
    accepted.
    */
    if (++ phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8015cc8:	683b      	ldr	r3, [r7, #0]
 8015cca:	7b9b      	ldrb	r3, [r3, #14]
 8015ccc:	3301      	adds	r3, #1
 8015cce:	b2da      	uxtb	r2, r3
 8015cd0:	683b      	ldr	r3, [r7, #0]
 8015cd2:	739a      	strb	r2, [r3, #14]
 8015cd4:	683b      	ldr	r3, [r7, #0]
 8015cd6:	7b9b      	ldrb	r3, [r3, #14]
 8015cd8:	2b02      	cmp	r3, #2
 8015cda:	d803      	bhi.n	8015ce4 <USBH_HandleControl+0x30c>
    {
      /* Do the transmission again, starting from SETUP Packet */
      phost->Control.state = CTRL_SETUP; 
 8015cdc:	683b      	ldr	r3, [r7, #0]
 8015cde:	2201      	movs	r2, #1
 8015ce0:	771a      	strb	r2, [r3, #28]
      phost->Control.status = CTRL_FAIL;
      phost->gState =   phost->gStateBkp;
      
      status = USBH_FAIL;
    }
    break;
 8015ce2:	e016      	b.n	8015d12 <USBH_HandleControl+0x33a>
      phost->Control.status = CTRL_FAIL;
 8015ce4:	683b      	ldr	r3, [r7, #0]
 8015ce6:	2208      	movs	r2, #8
 8015ce8:	749a      	strb	r2, [r3, #18]
      phost->gState =   phost->gStateBkp;
 8015cea:	683b      	ldr	r3, [r7, #0]
 8015cec:	785a      	ldrb	r2, [r3, #1]
 8015cee:	683b      	ldr	r3, [r7, #0]
 8015cf0:	701a      	strb	r2, [r3, #0]
      status = USBH_FAIL;
 8015cf2:	2302      	movs	r3, #2
 8015cf4:	73fb      	strb	r3, [r7, #15]
    break;
 8015cf6:	e00c      	b.n	8015d12 <USBH_HandleControl+0x33a>
    
  default:
    break;
 8015cf8:	bf00      	nop
 8015cfa:	e00a      	b.n	8015d12 <USBH_HandleControl+0x33a>
    break;
 8015cfc:	bf00      	nop
 8015cfe:	e008      	b.n	8015d12 <USBH_HandleControl+0x33a>
    break;
 8015d00:	bf00      	nop
 8015d02:	e006      	b.n	8015d12 <USBH_HandleControl+0x33a>
    break;
 8015d04:	bf00      	nop
 8015d06:	e004      	b.n	8015d12 <USBH_HandleControl+0x33a>
    break;
 8015d08:	bf00      	nop
 8015d0a:	e002      	b.n	8015d12 <USBH_HandleControl+0x33a>
 8015d0c:	20003466 	.word	0x20003466
    break;
 8015d10:	bf00      	nop
  }
  return status;
 8015d12:	7bfb      	ldrb	r3, [r7, #15]
}
 8015d14:	4618      	mov	r0, r3
 8015d16:	3710      	adds	r7, #16
 8015d18:	46bd      	mov	sp, r7
 8015d1a:	bd80      	pop	{r7, pc}

08015d1c <USBH_Open_Channel>:
                            uint8_t hc_num,
                            uint8_t dev_address,
                            uint8_t speed,
                            uint8_t ep_type,
                            uint16_t mps)
{
 8015d1c:	b580      	push	{r7, lr}
 8015d1e:	b082      	sub	sp, #8
 8015d20:	af00      	add	r7, sp, #0
 8015d22:	6078      	str	r0, [r7, #4]
 8015d24:	4608      	mov	r0, r1
 8015d26:	4611      	mov	r1, r2
 8015d28:	461a      	mov	r2, r3
 8015d2a:	4603      	mov	r3, r0
 8015d2c:	70fb      	strb	r3, [r7, #3]
 8015d2e:	460b      	mov	r3, r1
 8015d30:	70bb      	strb	r3, [r7, #2]
 8015d32:	4613      	mov	r3, r2
 8015d34:	707b      	strb	r3, [r7, #1]

  pdev->host.hc[hc_num].ep_num = pdev->host.channel[hc_num]& 0x7F;
 8015d36:	78fb      	ldrb	r3, [r7, #3]
 8015d38:	687a      	ldr	r2, [r7, #4]
 8015d3a:	f503 7331 	add.w	r3, r3, #708	; 0x2c4
 8015d3e:	005b      	lsls	r3, r3, #1
 8015d40:	4413      	add	r3, r2
 8015d42:	889b      	ldrh	r3, [r3, #4]
 8015d44:	b2da      	uxtb	r2, r3
 8015d46:	78fb      	ldrb	r3, [r7, #3]
 8015d48:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8015d4c:	b2d1      	uxtb	r1, r2
 8015d4e:	687a      	ldr	r2, [r7, #4]
 8015d50:	015b      	lsls	r3, r3, #5
 8015d52:	4413      	add	r3, r2
 8015d54:	f203 33ad 	addw	r3, r3, #941	; 0x3ad
 8015d58:	460a      	mov	r2, r1
 8015d5a:	701a      	strb	r2, [r3, #0]
  pdev->host.hc[hc_num].ep_is_in = (pdev->host.channel[hc_num] & 0x80 ) == 0x80;  
 8015d5c:	78fb      	ldrb	r3, [r7, #3]
 8015d5e:	687a      	ldr	r2, [r7, #4]
 8015d60:	f503 7331 	add.w	r3, r3, #708	; 0x2c4
 8015d64:	005b      	lsls	r3, r3, #1
 8015d66:	4413      	add	r3, r2
 8015d68:	889b      	ldrh	r3, [r3, #4]
 8015d6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8015d6e:	2b00      	cmp	r3, #0
 8015d70:	bf14      	ite	ne
 8015d72:	2301      	movne	r3, #1
 8015d74:	2300      	moveq	r3, #0
 8015d76:	b2da      	uxtb	r2, r3
 8015d78:	78fb      	ldrb	r3, [r7, #3]
 8015d7a:	4611      	mov	r1, r2
 8015d7c:	687a      	ldr	r2, [r7, #4]
 8015d7e:	015b      	lsls	r3, r3, #5
 8015d80:	4413      	add	r3, r2
 8015d82:	f203 33ae 	addw	r3, r3, #942	; 0x3ae
 8015d86:	460a      	mov	r2, r1
 8015d88:	701a      	strb	r2, [r3, #0]
  pdev->host.hc[hc_num].dev_addr = dev_address;  
 8015d8a:	78fb      	ldrb	r3, [r7, #3]
 8015d8c:	687a      	ldr	r2, [r7, #4]
 8015d8e:	015b      	lsls	r3, r3, #5
 8015d90:	4413      	add	r3, r2
 8015d92:	f503 736b 	add.w	r3, r3, #940	; 0x3ac
 8015d96:	78ba      	ldrb	r2, [r7, #2]
 8015d98:	701a      	strb	r2, [r3, #0]
  pdev->host.hc[hc_num].ep_type = ep_type;  
 8015d9a:	78fb      	ldrb	r3, [r7, #3]
 8015d9c:	687a      	ldr	r2, [r7, #4]
 8015d9e:	015b      	lsls	r3, r3, #5
 8015da0:	4413      	add	r3, r2
 8015da2:	f203 33b1 	addw	r3, r3, #945	; 0x3b1
 8015da6:	7c3a      	ldrb	r2, [r7, #16]
 8015da8:	701a      	strb	r2, [r3, #0]
  pdev->host.hc[hc_num].max_packet = mps; 
 8015daa:	78fb      	ldrb	r3, [r7, #3]
 8015dac:	687a      	ldr	r2, [r7, #4]
 8015dae:	015b      	lsls	r3, r3, #5
 8015db0:	4413      	add	r3, r2
 8015db2:	f203 33b2 	addw	r3, r3, #946	; 0x3b2
 8015db6:	8aba      	ldrh	r2, [r7, #20]
 8015db8:	801a      	strh	r2, [r3, #0]
  pdev->host.hc[hc_num].speed = speed; 
 8015dba:	78fb      	ldrb	r3, [r7, #3]
 8015dbc:	687a      	ldr	r2, [r7, #4]
 8015dbe:	015b      	lsls	r3, r3, #5
 8015dc0:	4413      	add	r3, r2
 8015dc2:	f203 33af 	addw	r3, r3, #943	; 0x3af
 8015dc6:	787a      	ldrb	r2, [r7, #1]
 8015dc8:	701a      	strb	r2, [r3, #0]
  pdev->host.hc[hc_num].toggle_in = 0; 
 8015dca:	78fb      	ldrb	r3, [r7, #3]
 8015dcc:	687a      	ldr	r2, [r7, #4]
 8015dce:	331e      	adds	r3, #30
 8015dd0:	015b      	lsls	r3, r3, #5
 8015dd2:	4413      	add	r3, r2
 8015dd4:	3304      	adds	r3, #4
 8015dd6:	2200      	movs	r2, #0
 8015dd8:	701a      	strb	r2, [r3, #0]
  pdev->host.hc[hc_num].toggle_out = 0;   
 8015dda:	78fb      	ldrb	r3, [r7, #3]
 8015ddc:	687a      	ldr	r2, [r7, #4]
 8015dde:	331e      	adds	r3, #30
 8015de0:	015b      	lsls	r3, r3, #5
 8015de2:	4413      	add	r3, r2
 8015de4:	3305      	adds	r3, #5
 8015de6:	2200      	movs	r2, #0
 8015de8:	701a      	strb	r2, [r3, #0]
  if(speed == HPRT0_PRTSPD_HIGH_SPEED)
 8015dea:	787b      	ldrb	r3, [r7, #1]
 8015dec:	2b00      	cmp	r3, #0
 8015dee:	d107      	bne.n	8015e00 <USBH_Open_Channel+0xe4>
  {
    pdev->host.hc[hc_num].do_ping = 1;
 8015df0:	78fb      	ldrb	r3, [r7, #3]
 8015df2:	687a      	ldr	r2, [r7, #4]
 8015df4:	015b      	lsls	r3, r3, #5
 8015df6:	4413      	add	r3, r2
 8015df8:	f503 736c 	add.w	r3, r3, #944	; 0x3b0
 8015dfc:	2201      	movs	r2, #1
 8015dfe:	701a      	strb	r2, [r3, #0]
  }
  
  USB_OTG_HC_Init(pdev, hc_num) ;
 8015e00:	78fb      	ldrb	r3, [r7, #3]
 8015e02:	4619      	mov	r1, r3
 8015e04:	6878      	ldr	r0, [r7, #4]
 8015e06:	f7fd fc9c 	bl	8013742 <USB_OTG_HC_Init>
  
  return HC_OK; 
 8015e0a:	2300      	movs	r3, #0

}
 8015e0c:	4618      	mov	r0, r3
 8015e0e:	3708      	adds	r7, #8
 8015e10:	46bd      	mov	sp, r7
 8015e12:	bd80      	pop	{r7, pc}

08015e14 <USBH_Modify_Channel>:
                            uint8_t hc_num,
                            uint8_t dev_address,
                            uint8_t speed,
                            uint8_t ep_type,
                            uint16_t mps)
{
 8015e14:	b580      	push	{r7, lr}
 8015e16:	b082      	sub	sp, #8
 8015e18:	af00      	add	r7, sp, #0
 8015e1a:	6078      	str	r0, [r7, #4]
 8015e1c:	4608      	mov	r0, r1
 8015e1e:	4611      	mov	r1, r2
 8015e20:	461a      	mov	r2, r3
 8015e22:	4603      	mov	r3, r0
 8015e24:	70fb      	strb	r3, [r7, #3]
 8015e26:	460b      	mov	r3, r1
 8015e28:	70bb      	strb	r3, [r7, #2]
 8015e2a:	4613      	mov	r3, r2
 8015e2c:	707b      	strb	r3, [r7, #1]
  
  if(dev_address != 0)
 8015e2e:	78bb      	ldrb	r3, [r7, #2]
 8015e30:	2b00      	cmp	r3, #0
 8015e32:	d007      	beq.n	8015e44 <USBH_Modify_Channel+0x30>
  {
    pdev->host.hc[hc_num].dev_addr = dev_address;  
 8015e34:	78fb      	ldrb	r3, [r7, #3]
 8015e36:	687a      	ldr	r2, [r7, #4]
 8015e38:	015b      	lsls	r3, r3, #5
 8015e3a:	4413      	add	r3, r2
 8015e3c:	f503 736b 	add.w	r3, r3, #940	; 0x3ac
 8015e40:	78ba      	ldrb	r2, [r7, #2]
 8015e42:	701a      	strb	r2, [r3, #0]
  }
  
  if((pdev->host.hc[hc_num].max_packet != mps) && (mps != 0))
 8015e44:	78fb      	ldrb	r3, [r7, #3]
 8015e46:	687a      	ldr	r2, [r7, #4]
 8015e48:	015b      	lsls	r3, r3, #5
 8015e4a:	4413      	add	r3, r2
 8015e4c:	f203 33b2 	addw	r3, r3, #946	; 0x3b2
 8015e50:	881b      	ldrh	r3, [r3, #0]
 8015e52:	8aba      	ldrh	r2, [r7, #20]
 8015e54:	429a      	cmp	r2, r3
 8015e56:	d00a      	beq.n	8015e6e <USBH_Modify_Channel+0x5a>
 8015e58:	8abb      	ldrh	r3, [r7, #20]
 8015e5a:	2b00      	cmp	r3, #0
 8015e5c:	d007      	beq.n	8015e6e <USBH_Modify_Channel+0x5a>
  {
    pdev->host.hc[hc_num].max_packet = mps; 
 8015e5e:	78fb      	ldrb	r3, [r7, #3]
 8015e60:	687a      	ldr	r2, [r7, #4]
 8015e62:	015b      	lsls	r3, r3, #5
 8015e64:	4413      	add	r3, r2
 8015e66:	f203 33b2 	addw	r3, r3, #946	; 0x3b2
 8015e6a:	8aba      	ldrh	r2, [r7, #20]
 8015e6c:	801a      	strh	r2, [r3, #0]
  }
  
  if((pdev->host.hc[hc_num].speed != speed ) && (speed != 0 )) 
 8015e6e:	78fb      	ldrb	r3, [r7, #3]
 8015e70:	687a      	ldr	r2, [r7, #4]
 8015e72:	015b      	lsls	r3, r3, #5
 8015e74:	4413      	add	r3, r2
 8015e76:	f203 33af 	addw	r3, r3, #943	; 0x3af
 8015e7a:	781b      	ldrb	r3, [r3, #0]
 8015e7c:	787a      	ldrb	r2, [r7, #1]
 8015e7e:	429a      	cmp	r2, r3
 8015e80:	d00a      	beq.n	8015e98 <USBH_Modify_Channel+0x84>
 8015e82:	787b      	ldrb	r3, [r7, #1]
 8015e84:	2b00      	cmp	r3, #0
 8015e86:	d007      	beq.n	8015e98 <USBH_Modify_Channel+0x84>
  {
    pdev->host.hc[hc_num].speed = speed; 
 8015e88:	78fb      	ldrb	r3, [r7, #3]
 8015e8a:	687a      	ldr	r2, [r7, #4]
 8015e8c:	015b      	lsls	r3, r3, #5
 8015e8e:	4413      	add	r3, r2
 8015e90:	f203 33af 	addw	r3, r3, #943	; 0x3af
 8015e94:	787a      	ldrb	r2, [r7, #1]
 8015e96:	701a      	strb	r2, [r3, #0]
  }
  
  USB_OTG_HC_Init(pdev, hc_num);
 8015e98:	78fb      	ldrb	r3, [r7, #3]
 8015e9a:	4619      	mov	r1, r3
 8015e9c:	6878      	ldr	r0, [r7, #4]
 8015e9e:	f7fd fc50 	bl	8013742 <USB_OTG_HC_Init>
  return HC_OK; 
 8015ea2:	2300      	movs	r3, #0

}
 8015ea4:	4618      	mov	r0, r3
 8015ea6:	3708      	adds	r7, #8
 8015ea8:	46bd      	mov	sp, r7
 8015eaa:	bd80      	pop	{r7, pc}

08015eac <USBH_Alloc_Channel>:
  *         Allocate a new channel for the pipe
  * @param  ep_addr: End point for which the channel to be allocated
  * @retval hc_num: Host channel number
  */
uint8_t USBH_Alloc_Channel  (USB_OTG_CORE_HANDLE *pdev, uint8_t ep_addr)
{
 8015eac:	b580      	push	{r7, lr}
 8015eae:	b084      	sub	sp, #16
 8015eb0:	af00      	add	r7, sp, #0
 8015eb2:	6078      	str	r0, [r7, #4]
 8015eb4:	460b      	mov	r3, r1
 8015eb6:	70fb      	strb	r3, [r7, #3]
  uint16_t hc_num;
  
  hc_num =  USBH_GetFreeChannel(pdev);
 8015eb8:	6878      	ldr	r0, [r7, #4]
 8015eba:	f000 f85b 	bl	8015f74 <USBH_GetFreeChannel>
 8015ebe:	4603      	mov	r3, r0
 8015ec0:	81fb      	strh	r3, [r7, #14]

  if (hc_num != HC_ERROR)
 8015ec2:	89fb      	ldrh	r3, [r7, #14]
 8015ec4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015ec8:	4293      	cmp	r3, r2
 8015eca:	d00f      	beq.n	8015eec <USBH_Alloc_Channel+0x40>
  {
	pdev->host.channel[hc_num] = HC_USED | ep_addr;
 8015ecc:	78fb      	ldrb	r3, [r7, #3]
 8015ece:	b21b      	sxth	r3, r3
 8015ed0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8015ed4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8015ed8:	b21a      	sxth	r2, r3
 8015eda:	89fb      	ldrh	r3, [r7, #14]
 8015edc:	b291      	uxth	r1, r2
 8015ede:	687a      	ldr	r2, [r7, #4]
 8015ee0:	f503 7331 	add.w	r3, r3, #708	; 0x2c4
 8015ee4:	005b      	lsls	r3, r3, #1
 8015ee6:	4413      	add	r3, r2
 8015ee8:	460a      	mov	r2, r1
 8015eea:	809a      	strh	r2, [r3, #4]
  }
  return hc_num;
 8015eec:	89fb      	ldrh	r3, [r7, #14]
 8015eee:	b2db      	uxtb	r3, r3
}
 8015ef0:	4618      	mov	r0, r3
 8015ef2:	3710      	adds	r7, #16
 8015ef4:	46bd      	mov	sp, r7
 8015ef6:	bd80      	pop	{r7, pc}

08015ef8 <USBH_Free_Channel>:
  *         Free the USB host channel
  * @param  idx: Channel number to be freed 
  * @retval Status
  */
uint8_t USBH_Free_Channel  (USB_OTG_CORE_HANDLE *pdev, uint8_t idx)
{
 8015ef8:	b480      	push	{r7}
 8015efa:	b083      	sub	sp, #12
 8015efc:	af00      	add	r7, sp, #0
 8015efe:	6078      	str	r0, [r7, #4]
 8015f00:	460b      	mov	r3, r1
 8015f02:	70fb      	strb	r3, [r7, #3]
   if(idx < HC_MAX)
 8015f04:	78fb      	ldrb	r3, [r7, #3]
 8015f06:	2b07      	cmp	r3, #7
 8015f08:	d811      	bhi.n	8015f2e <USBH_Free_Channel+0x36>
   {
	 pdev->host.channel[idx] &= HC_USED_MASK;
 8015f0a:	78fb      	ldrb	r3, [r7, #3]
 8015f0c:	687a      	ldr	r2, [r7, #4]
 8015f0e:	f503 7331 	add.w	r3, r3, #708	; 0x2c4
 8015f12:	005b      	lsls	r3, r3, #1
 8015f14:	4413      	add	r3, r2
 8015f16:	889a      	ldrh	r2, [r3, #4]
 8015f18:	78fb      	ldrb	r3, [r7, #3]
 8015f1a:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8015f1e:	b291      	uxth	r1, r2
 8015f20:	687a      	ldr	r2, [r7, #4]
 8015f22:	f503 7331 	add.w	r3, r3, #708	; 0x2c4
 8015f26:	005b      	lsls	r3, r3, #1
 8015f28:	4413      	add	r3, r2
 8015f2a:	460a      	mov	r2, r1
 8015f2c:	809a      	strh	r2, [r3, #4]
   }
   return USBH_OK;
 8015f2e:	2300      	movs	r3, #0
}
 8015f30:	4618      	mov	r0, r3
 8015f32:	370c      	adds	r7, #12
 8015f34:	46bd      	mov	sp, r7
 8015f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f3a:	4770      	bx	lr

08015f3c <USBH_DeAllocate_AllChannel>:
  *         Free all USB host channel
* @param  pdev : core instance
  * @retval Status
  */
uint8_t USBH_DeAllocate_AllChannel  (USB_OTG_CORE_HANDLE *pdev)
{
 8015f3c:	b480      	push	{r7}
 8015f3e:	b085      	sub	sp, #20
 8015f40:	af00      	add	r7, sp, #0
 8015f42:	6078      	str	r0, [r7, #4]
   uint8_t idx;
   
   for (idx = 2; idx < HC_MAX ; idx ++)
 8015f44:	2302      	movs	r3, #2
 8015f46:	73fb      	strb	r3, [r7, #15]
 8015f48:	e00a      	b.n	8015f60 <USBH_DeAllocate_AllChannel+0x24>
   {
	 pdev->host.channel[idx] = 0;
 8015f4a:	7bfb      	ldrb	r3, [r7, #15]
 8015f4c:	687a      	ldr	r2, [r7, #4]
 8015f4e:	f503 7331 	add.w	r3, r3, #708	; 0x2c4
 8015f52:	005b      	lsls	r3, r3, #1
 8015f54:	4413      	add	r3, r2
 8015f56:	2200      	movs	r2, #0
 8015f58:	809a      	strh	r2, [r3, #4]
   for (idx = 2; idx < HC_MAX ; idx ++)
 8015f5a:	7bfb      	ldrb	r3, [r7, #15]
 8015f5c:	3301      	adds	r3, #1
 8015f5e:	73fb      	strb	r3, [r7, #15]
 8015f60:	7bfb      	ldrb	r3, [r7, #15]
 8015f62:	2b07      	cmp	r3, #7
 8015f64:	d9f1      	bls.n	8015f4a <USBH_DeAllocate_AllChannel+0xe>
   }
   return USBH_OK;
 8015f66:	2300      	movs	r3, #0
}
 8015f68:	4618      	mov	r0, r3
 8015f6a:	3714      	adds	r7, #20
 8015f6c:	46bd      	mov	sp, r7
 8015f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f72:	4770      	bx	lr

08015f74 <USBH_GetFreeChannel>:
  *         Get a free channel number for allocation to a device endpoint
  * @param  None
  * @retval idx: Free Channel number
  */
static uint16_t USBH_GetFreeChannel (USB_OTG_CORE_HANDLE *pdev)
{
 8015f74:	b480      	push	{r7}
 8015f76:	b085      	sub	sp, #20
 8015f78:	af00      	add	r7, sp, #0
 8015f7a:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0;
 8015f7c:	2300      	movs	r3, #0
 8015f7e:	73fb      	strb	r3, [r7, #15]
  
  for (idx = 0 ; idx < HC_MAX ; idx++)
 8015f80:	2300      	movs	r3, #0
 8015f82:	73fb      	strb	r3, [r7, #15]
 8015f84:	e00f      	b.n	8015fa6 <USBH_GetFreeChannel+0x32>
  {
	if ((pdev->host.channel[idx] & HC_USED) == 0)
 8015f86:	7bfb      	ldrb	r3, [r7, #15]
 8015f88:	687a      	ldr	r2, [r7, #4]
 8015f8a:	f503 7331 	add.w	r3, r3, #708	; 0x2c4
 8015f8e:	005b      	lsls	r3, r3, #1
 8015f90:	4413      	add	r3, r2
 8015f92:	889b      	ldrh	r3, [r3, #4]
 8015f94:	b21b      	sxth	r3, r3
 8015f96:	2b00      	cmp	r3, #0
 8015f98:	db02      	blt.n	8015fa0 <USBH_GetFreeChannel+0x2c>
	{
	   return idx;
 8015f9a:	7bfb      	ldrb	r3, [r7, #15]
 8015f9c:	b29b      	uxth	r3, r3
 8015f9e:	e007      	b.n	8015fb0 <USBH_GetFreeChannel+0x3c>
  for (idx = 0 ; idx < HC_MAX ; idx++)
 8015fa0:	7bfb      	ldrb	r3, [r7, #15]
 8015fa2:	3301      	adds	r3, #1
 8015fa4:	73fb      	strb	r3, [r7, #15]
 8015fa6:	7bfb      	ldrb	r3, [r7, #15]
 8015fa8:	2b07      	cmp	r3, #7
 8015faa:	d9ec      	bls.n	8015f86 <USBH_GetFreeChannel+0x12>
	} 
  }
  return HC_ERROR;
 8015fac:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8015fb0:	4618      	mov	r0, r3
 8015fb2:	3714      	adds	r7, #20
 8015fb4:	46bd      	mov	sp, r7
 8015fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015fba:	4770      	bx	lr

08015fbc <USBH_HID_InterfaceInit>:
* @param  hdev: Selected device property
* @retval  USBH_Status :Response for USB HID driver intialization
*/
static USBH_Status USBH_HID_InterfaceInit ( USB_OTG_CORE_HANDLE *pdev, 
                                           void *phost)
{	
 8015fbc:	b580      	push	{r7, lr}
 8015fbe:	b088      	sub	sp, #32
 8015fc0:	af02      	add	r7, sp, #8
 8015fc2:	6078      	str	r0, [r7, #4]
 8015fc4:	6039      	str	r1, [r7, #0]
  uint8_t maxEP;
  USBH_HOST *pphost = phost;
 8015fc6:	683b      	ldr	r3, [r7, #0]
 8015fc8:	613b      	str	r3, [r7, #16]
    
  uint8_t num =0;
 8015fca:	2300      	movs	r3, #0
 8015fcc:	75fb      	strb	r3, [r7, #23]
  USBH_Status status = USBH_BUSY ;
 8015fce:	2301      	movs	r3, #1
 8015fd0:	75bb      	strb	r3, [r7, #22]
  HID_Machine.state = HID_ERROR;
 8015fd2:	4b60      	ldr	r3, [pc, #384]	; (8016154 <USBH_HID_InterfaceInit+0x198>)
 8015fd4:	2206      	movs	r2, #6
 8015fd6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  
  
  if(pphost->device_prop.Itf_Desc[0].bInterfaceSubClass  == HID_BOOT_CODE)
 8015fda:	693b      	ldr	r3, [r7, #16]
 8015fdc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8015fe0:	2b01      	cmp	r3, #1
 8015fe2:	f040 80ac 	bne.w	801613e <USBH_HID_InterfaceInit+0x182>
  {
    /*Decode Bootclass Protocl: Mouse or Keyboard*/
    if(pphost->device_prop.Itf_Desc[0].bInterfaceProtocol == HID_KEYBRD_BOOT_CODE)
 8015fe6:	693b      	ldr	r3, [r7, #16]
 8015fe8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8015fec:	2b01      	cmp	r3, #1
 8015fee:	d103      	bne.n	8015ff8 <USBH_HID_InterfaceInit+0x3c>
    {
      HID_Machine.cb = &HID_KEYBRD_cb;
 8015ff0:	4b58      	ldr	r3, [pc, #352]	; (8016154 <USBH_HID_InterfaceInit+0x198>)
 8015ff2:	4a59      	ldr	r2, [pc, #356]	; (8016158 <USBH_HID_InterfaceInit+0x19c>)
 8015ff4:	651a      	str	r2, [r3, #80]	; 0x50
 8015ff6:	e007      	b.n	8016008 <USBH_HID_InterfaceInit+0x4c>
    }
    else if(pphost->device_prop.Itf_Desc[0].bInterfaceProtocol  == HID_MOUSE_BOOT_CODE)		  
 8015ff8:	693b      	ldr	r3, [r7, #16]
 8015ffa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8015ffe:	2b02      	cmp	r3, #2
 8016000:	d102      	bne.n	8016008 <USBH_HID_InterfaceInit+0x4c>
    {
      HID_Machine.cb = &HID_MOUSE_cb;
 8016002:	4b54      	ldr	r3, [pc, #336]	; (8016154 <USBH_HID_InterfaceInit+0x198>)
 8016004:	4a55      	ldr	r2, [pc, #340]	; (801615c <USBH_HID_InterfaceInit+0x1a0>)
 8016006:	651a      	str	r2, [r3, #80]	; 0x50
    }
    
    HID_Machine.state     = HID_IDLE;
 8016008:	4b52      	ldr	r3, [pc, #328]	; (8016154 <USBH_HID_InterfaceInit+0x198>)
 801600a:	2200      	movs	r2, #0
 801600c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    HID_Machine.ctl_state = HID_REQ_IDLE; 
 8016010:	4b50      	ldr	r3, [pc, #320]	; (8016154 <USBH_HID_InterfaceInit+0x198>)
 8016012:	2200      	movs	r2, #0
 8016014:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    HID_Machine.ep_addr   = pphost->device_prop.Ep_Desc[0][0].bEndpointAddress;
 8016018:	693b      	ldr	r3, [r7, #16]
 801601a:	f893 2052 	ldrb.w	r2, [r3, #82]	; 0x52
 801601e:	4b4d      	ldr	r3, [pc, #308]	; (8016154 <USBH_HID_InterfaceInit+0x198>)
 8016020:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    HID_Machine.length    = pphost->device_prop.Ep_Desc[0][0].wMaxPacketSize;
 8016024:	693b      	ldr	r3, [r7, #16]
 8016026:	f8b3 2054 	ldrh.w	r2, [r3, #84]	; 0x54
 801602a:	4b4a      	ldr	r3, [pc, #296]	; (8016154 <USBH_HID_InterfaceInit+0x198>)
 801602c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    HID_Machine.poll      = pphost->device_prop.Ep_Desc[0][0].bInterval ;
 8016030:	693b      	ldr	r3, [r7, #16]
 8016032:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8016036:	b29a      	uxth	r2, r3
 8016038:	4b46      	ldr	r3, [pc, #280]	; (8016154 <USBH_HID_InterfaceInit+0x198>)
 801603a:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    
    if (HID_Machine.poll  < HID_MIN_POLL) 
 801603e:	4b45      	ldr	r3, [pc, #276]	; (8016154 <USBH_HID_InterfaceInit+0x198>)
 8016040:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8016044:	2b09      	cmp	r3, #9
 8016046:	d803      	bhi.n	8016050 <USBH_HID_InterfaceInit+0x94>
    {
       HID_Machine.poll = HID_MIN_POLL;
 8016048:	4b42      	ldr	r3, [pc, #264]	; (8016154 <USBH_HID_InterfaceInit+0x198>)
 801604a:	220a      	movs	r2, #10
 801604c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

    
    /* Check fo available number of endpoints */
    /* Find the number of EPs in the Interface Descriptor */      
    /* Choose the lower number in order not to overrun the buffer allocated */
    maxEP = ( (pphost->device_prop.Itf_Desc[0].bNumEndpoints <= USBH_MAX_NUM_ENDPOINTS) ? 
 8016050:	693b      	ldr	r3, [r7, #16]
 8016052:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8016056:	2b02      	cmp	r3, #2
 8016058:	bf28      	it	cs
 801605a:	2302      	movcs	r3, #2
 801605c:	73fb      	strb	r3, [r7, #15]
             pphost->device_prop.Itf_Desc[0].bNumEndpoints :
                 USBH_MAX_NUM_ENDPOINTS); 
    
    
    /* Decode endpoint IN and OUT address from interface descriptor */
    for (num=0; num < maxEP; num++)
 801605e:	2300      	movs	r3, #0
 8016060:	75fb      	strb	r3, [r7, #23]
 8016062:	e062      	b.n	801612a <USBH_HID_InterfaceInit+0x16e>
    {
      if(pphost->device_prop.Ep_Desc[0][num].bEndpointAddress & 0x80)
 8016064:	7dfb      	ldrb	r3, [r7, #23]
 8016066:	693a      	ldr	r2, [r7, #16]
 8016068:	330a      	adds	r3, #10
 801606a:	00db      	lsls	r3, r3, #3
 801606c:	4413      	add	r3, r2
 801606e:	789b      	ldrb	r3, [r3, #2]
 8016070:	b25b      	sxtb	r3, r3
 8016072:	2b00      	cmp	r3, #0
 8016074:	da2b      	bge.n	80160ce <USBH_HID_InterfaceInit+0x112>
      {
        HID_Machine.HIDIntInEp = (pphost->device_prop.Ep_Desc[0][num].bEndpointAddress);
 8016076:	7dfb      	ldrb	r3, [r7, #23]
 8016078:	693a      	ldr	r2, [r7, #16]
 801607a:	330a      	adds	r3, #10
 801607c:	00db      	lsls	r3, r3, #3
 801607e:	4413      	add	r3, r2
 8016080:	789a      	ldrb	r2, [r3, #2]
 8016082:	4b34      	ldr	r3, [pc, #208]	; (8016154 <USBH_HID_InterfaceInit+0x198>)
 8016084:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        HID_Machine.hc_num_in  =\
               USBH_Alloc_Channel(pdev, 
 8016088:	7dfb      	ldrb	r3, [r7, #23]
 801608a:	693a      	ldr	r2, [r7, #16]
 801608c:	330a      	adds	r3, #10
 801608e:	00db      	lsls	r3, r3, #3
 8016090:	4413      	add	r3, r2
 8016092:	789b      	ldrb	r3, [r3, #2]
 8016094:	4619      	mov	r1, r3
 8016096:	6878      	ldr	r0, [r7, #4]
 8016098:	f7ff ff08 	bl	8015eac <USBH_Alloc_Channel>
 801609c:	4603      	mov	r3, r0
 801609e:	461a      	mov	r2, r3
        HID_Machine.hc_num_in  =\
 80160a0:	4b2c      	ldr	r3, [pc, #176]	; (8016154 <USBH_HID_InterfaceInit+0x198>)
 80160a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
                                  pphost->device_prop.Ep_Desc[0][num].bEndpointAddress);
        
        /* Open channel for IN endpoint */
        USBH_Open_Channel  (pdev,
 80160a6:	4b2b      	ldr	r3, [pc, #172]	; (8016154 <USBH_HID_InterfaceInit+0x198>)
 80160a8:	f893 1040 	ldrb.w	r1, [r3, #64]	; 0x40
 80160ac:	693b      	ldr	r3, [r7, #16]
 80160ae:	f893 2020 	ldrb.w	r2, [r3, #32]
 80160b2:	693b      	ldr	r3, [r7, #16]
 80160b4:	f893 0021 	ldrb.w	r0, [r3, #33]	; 0x21
 80160b8:	4b26      	ldr	r3, [pc, #152]	; (8016154 <USBH_HID_InterfaceInit+0x198>)
 80160ba:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80160be:	9301      	str	r3, [sp, #4]
 80160c0:	2303      	movs	r3, #3
 80160c2:	9300      	str	r3, [sp, #0]
 80160c4:	4603      	mov	r3, r0
 80160c6:	6878      	ldr	r0, [r7, #4]
 80160c8:	f7ff fe28 	bl	8015d1c <USBH_Open_Channel>
 80160cc:	e02a      	b.n	8016124 <USBH_HID_InterfaceInit+0x168>
                            EP_TYPE_INTR,
                            HID_Machine.length); 
      }
      else
      {
        HID_Machine.HIDIntOutEp = (pphost->device_prop.Ep_Desc[0][num].bEndpointAddress);
 80160ce:	7dfb      	ldrb	r3, [r7, #23]
 80160d0:	693a      	ldr	r2, [r7, #16]
 80160d2:	330a      	adds	r3, #10
 80160d4:	00db      	lsls	r3, r3, #3
 80160d6:	4413      	add	r3, r2
 80160d8:	789a      	ldrb	r2, [r3, #2]
 80160da:	4b1e      	ldr	r3, [pc, #120]	; (8016154 <USBH_HID_InterfaceInit+0x198>)
 80160dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
        HID_Machine.hc_num_out  =\
                USBH_Alloc_Channel(pdev, 
 80160e0:	7dfb      	ldrb	r3, [r7, #23]
 80160e2:	693a      	ldr	r2, [r7, #16]
 80160e4:	330a      	adds	r3, #10
 80160e6:	00db      	lsls	r3, r3, #3
 80160e8:	4413      	add	r3, r2
 80160ea:	789b      	ldrb	r3, [r3, #2]
 80160ec:	4619      	mov	r1, r3
 80160ee:	6878      	ldr	r0, [r7, #4]
 80160f0:	f7ff fedc 	bl	8015eac <USBH_Alloc_Channel>
 80160f4:	4603      	mov	r3, r0
 80160f6:	461a      	mov	r2, r3
        HID_Machine.hc_num_out  =\
 80160f8:	4b16      	ldr	r3, [pc, #88]	; (8016154 <USBH_HID_InterfaceInit+0x198>)
 80160fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
                                   pphost->device_prop.Ep_Desc[0][num].bEndpointAddress);
        
        /* Open channel for OUT endpoint */
        USBH_Open_Channel  (pdev,
 80160fe:	4b15      	ldr	r3, [pc, #84]	; (8016154 <USBH_HID_InterfaceInit+0x198>)
 8016100:	f893 1041 	ldrb.w	r1, [r3, #65]	; 0x41
 8016104:	693b      	ldr	r3, [r7, #16]
 8016106:	f893 2020 	ldrb.w	r2, [r3, #32]
 801610a:	693b      	ldr	r3, [r7, #16]
 801610c:	f893 0021 	ldrb.w	r0, [r3, #33]	; 0x21
 8016110:	4b10      	ldr	r3, [pc, #64]	; (8016154 <USBH_HID_InterfaceInit+0x198>)
 8016112:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8016116:	9301      	str	r3, [sp, #4]
 8016118:	2303      	movs	r3, #3
 801611a:	9300      	str	r3, [sp, #0]
 801611c:	4603      	mov	r3, r0
 801611e:	6878      	ldr	r0, [r7, #4]
 8016120:	f7ff fdfc 	bl	8015d1c <USBH_Open_Channel>
    for (num=0; num < maxEP; num++)
 8016124:	7dfb      	ldrb	r3, [r7, #23]
 8016126:	3301      	adds	r3, #1
 8016128:	75fb      	strb	r3, [r7, #23]
 801612a:	7dfa      	ldrb	r2, [r7, #23]
 801612c:	7bfb      	ldrb	r3, [r7, #15]
 801612e:	429a      	cmp	r2, r3
 8016130:	d398      	bcc.n	8016064 <USBH_HID_InterfaceInit+0xa8>
                            HID_Machine.length); 
      }
      
    }   
    
     start_toggle =0;
 8016132:	4b0b      	ldr	r3, [pc, #44]	; (8016160 <USBH_HID_InterfaceInit+0x1a4>)
 8016134:	2200      	movs	r2, #0
 8016136:	701a      	strb	r2, [r3, #0]
     status = USBH_OK; 
 8016138:	2300      	movs	r3, #0
 801613a:	75bb      	strb	r3, [r7, #22]
 801613c:	e004      	b.n	8016148 <USBH_HID_InterfaceInit+0x18c>
  }
  else
  {
    pphost->usr_cb->DeviceNotSupported();   
 801613e:	693b      	ldr	r3, [r7, #16]
 8016140:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8016144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016146:	4798      	blx	r3
  }
  
  return status;
 8016148:	7dbb      	ldrb	r3, [r7, #22]
  
}
 801614a:	4618      	mov	r0, r3
 801614c:	3718      	adds	r7, #24
 801614e:	46bd      	mov	sp, r7
 8016150:	bd80      	pop	{r7, pc}
 8016152:	bf00      	nop
 8016154:	20003468 	.word	0x20003468
 8016158:	200000f4 	.word	0x200000f4
 801615c:	200000fc 	.word	0x200000fc
 8016160:	20003516 	.word	0x20003516

08016164 <USBH_HID_InterfaceDeInit>:
* @param  hdev: Selected device property
* @retval None
*/
void USBH_HID_InterfaceDeInit ( USB_OTG_CORE_HANDLE *pdev,
                               void *phost)
{	
 8016164:	b580      	push	{r7, lr}
 8016166:	b082      	sub	sp, #8
 8016168:	af00      	add	r7, sp, #0
 801616a:	6078      	str	r0, [r7, #4]
 801616c:	6039      	str	r1, [r7, #0]
   //USBH_HOST *pphost = phost;
    
  if(HID_Machine.hc_num_in != 0x00)
 801616e:	4b1a      	ldr	r3, [pc, #104]	; (80161d8 <USBH_HID_InterfaceDeInit+0x74>)
 8016170:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8016174:	2b00      	cmp	r3, #0
 8016176:	d011      	beq.n	801619c <USBH_HID_InterfaceDeInit+0x38>
  {   
    USB_OTG_HC_Halt(pdev, HID_Machine.hc_num_in);
 8016178:	4b17      	ldr	r3, [pc, #92]	; (80161d8 <USBH_HID_InterfaceDeInit+0x74>)
 801617a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801617e:	4619      	mov	r1, r3
 8016180:	6878      	ldr	r0, [r7, #4]
 8016182:	f7fd fd8a 	bl	8013c9a <USB_OTG_HC_Halt>
    USBH_Free_Channel  (pdev, HID_Machine.hc_num_in);
 8016186:	4b14      	ldr	r3, [pc, #80]	; (80161d8 <USBH_HID_InterfaceDeInit+0x74>)
 8016188:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801618c:	4619      	mov	r1, r3
 801618e:	6878      	ldr	r0, [r7, #4]
 8016190:	f7ff feb2 	bl	8015ef8 <USBH_Free_Channel>
    HID_Machine.hc_num_in = 0;     /* Reset the Channel as Free */  
 8016194:	4b10      	ldr	r3, [pc, #64]	; (80161d8 <USBH_HID_InterfaceDeInit+0x74>)
 8016196:	2200      	movs	r2, #0
 8016198:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }
  
  if(HID_Machine.hc_num_out != 0x00)
 801619c:	4b0e      	ldr	r3, [pc, #56]	; (80161d8 <USBH_HID_InterfaceDeInit+0x74>)
 801619e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80161a2:	2b00      	cmp	r3, #0
 80161a4:	d011      	beq.n	80161ca <USBH_HID_InterfaceDeInit+0x66>
  {   
    USB_OTG_HC_Halt(pdev, HID_Machine.hc_num_out);
 80161a6:	4b0c      	ldr	r3, [pc, #48]	; (80161d8 <USBH_HID_InterfaceDeInit+0x74>)
 80161a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80161ac:	4619      	mov	r1, r3
 80161ae:	6878      	ldr	r0, [r7, #4]
 80161b0:	f7fd fd73 	bl	8013c9a <USB_OTG_HC_Halt>
    USBH_Free_Channel  (pdev, HID_Machine.hc_num_out);
 80161b4:	4b08      	ldr	r3, [pc, #32]	; (80161d8 <USBH_HID_InterfaceDeInit+0x74>)
 80161b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80161ba:	4619      	mov	r1, r3
 80161bc:	6878      	ldr	r0, [r7, #4]
 80161be:	f7ff fe9b 	bl	8015ef8 <USBH_Free_Channel>
    HID_Machine.hc_num_out = 0;     /* Reset the Channel as Free */  
 80161c2:	4b05      	ldr	r3, [pc, #20]	; (80161d8 <USBH_HID_InterfaceDeInit+0x74>)
 80161c4:	2200      	movs	r2, #0
 80161c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
 
  start_toggle = 0;
 80161ca:	4b04      	ldr	r3, [pc, #16]	; (80161dc <USBH_HID_InterfaceDeInit+0x78>)
 80161cc:	2200      	movs	r2, #0
 80161ce:	701a      	strb	r2, [r3, #0]
}
 80161d0:	bf00      	nop
 80161d2:	3708      	adds	r7, #8
 80161d4:	46bd      	mov	sp, r7
 80161d6:	bd80      	pop	{r7, pc}
 80161d8:	20003468 	.word	0x20003468
 80161dc:	20003516 	.word	0x20003516

080161e0 <USBH_HID_ClassRequest>:
* @param  hdev: Selected device property
* @retval  USBH_Status :Response for USB Set Protocol request
*/
static USBH_Status USBH_HID_ClassRequest(USB_OTG_CORE_HANDLE *pdev , 
                                         void *phost)
{   
 80161e0:	b580      	push	{r7, lr}
 80161e2:	b086      	sub	sp, #24
 80161e4:	af00      	add	r7, sp, #0
 80161e6:	6078      	str	r0, [r7, #4]
 80161e8:	6039      	str	r1, [r7, #0]
    USBH_HOST *pphost = phost;
 80161ea:	683b      	ldr	r3, [r7, #0]
 80161ec:	613b      	str	r3, [r7, #16]
    
  USBH_Status status         = USBH_BUSY;
 80161ee:	2301      	movs	r3, #1
 80161f0:	75fb      	strb	r3, [r7, #23]
  USBH_Status classReqStatus = USBH_BUSY;
 80161f2:	2301      	movs	r3, #1
 80161f4:	73fb      	strb	r3, [r7, #15]
  
  
  /* Switch HID state machine */
  switch (HID_Machine.ctl_state)
 80161f6:	4b35      	ldr	r3, [pc, #212]	; (80162cc <USBH_HID_ClassRequest+0xec>)
 80161f8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80161fc:	2b04      	cmp	r3, #4
 80161fe:	d857      	bhi.n	80162b0 <USBH_HID_ClassRequest+0xd0>
 8016200:	a201      	add	r2, pc, #4	; (adr r2, 8016208 <USBH_HID_ClassRequest+0x28>)
 8016202:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016206:	bf00      	nop
 8016208:	0801621d 	.word	0x0801621d
 801620c:	08016245 	.word	0x08016245
 8016210:	0801621d 	.word	0x0801621d
 8016214:	08016263 	.word	0x08016263
 8016218:	08016293 	.word	0x08016293
  {
  case HID_IDLE:  
  case HID_REQ_GET_HID_DESC:
    
    /* Get HID Desc */ 
    if (USBH_Get_HID_Descriptor (pdev, pphost, USB_HID_DESC_SIZE)== USBH_OK)
 801621c:	2209      	movs	r2, #9
 801621e:	6939      	ldr	r1, [r7, #16]
 8016220:	6878      	ldr	r0, [r7, #4]
 8016222:	f000 f914 	bl	801644e <USBH_Get_HID_Descriptor>
 8016226:	4603      	mov	r3, r0
 8016228:	2b00      	cmp	r3, #0
 801622a:	d143      	bne.n	80162b4 <USBH_HID_ClassRequest+0xd4>
    {
      
      USBH_ParseHIDDesc(&HID_Desc, pdev->host.Rx_Buffer);
 801622c:	687b      	ldr	r3, [r7, #4]
 801622e:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8016232:	4619      	mov	r1, r3
 8016234:	4826      	ldr	r0, [pc, #152]	; (80162d0 <USBH_HID_ClassRequest+0xf0>)
 8016236:	f000 f9a7 	bl	8016588 <USBH_ParseHIDDesc>
      HID_Machine.ctl_state = HID_REQ_GET_REPORT_DESC;
 801623a:	4b24      	ldr	r3, [pc, #144]	; (80162cc <USBH_HID_ClassRequest+0xec>)
 801623c:	2201      	movs	r2, #1
 801623e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    
    break;     
 8016242:	e037      	b.n	80162b4 <USBH_HID_ClassRequest+0xd4>
  case HID_REQ_GET_REPORT_DESC:
    
    
    /* Get Report Desc */ 
    if (USBH_Get_HID_ReportDescriptor(pdev , pphost, HID_Desc.wItemLength) == USBH_OK)
 8016244:	4b22      	ldr	r3, [pc, #136]	; (80162d0 <USBH_HID_ClassRequest+0xf0>)
 8016246:	891b      	ldrh	r3, [r3, #8]
 8016248:	461a      	mov	r2, r3
 801624a:	6939      	ldr	r1, [r7, #16]
 801624c:	6878      	ldr	r0, [r7, #4]
 801624e:	f000 f8e3 	bl	8016418 <USBH_Get_HID_ReportDescriptor>
 8016252:	4603      	mov	r3, r0
 8016254:	2b00      	cmp	r3, #0
 8016256:	d12f      	bne.n	80162b8 <USBH_HID_ClassRequest+0xd8>
    {
      HID_Machine.ctl_state = HID_REQ_SET_IDLE;
 8016258:	4b1c      	ldr	r3, [pc, #112]	; (80162cc <USBH_HID_ClassRequest+0xec>)
 801625a:	2203      	movs	r2, #3
 801625c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    
    break;
 8016260:	e02a      	b.n	80162b8 <USBH_HID_ClassRequest+0xd8>
    
  case HID_REQ_SET_IDLE:
    
    classReqStatus = USBH_Set_Idle (pdev, pphost, 0, 0);
 8016262:	2300      	movs	r3, #0
 8016264:	2200      	movs	r2, #0
 8016266:	6939      	ldr	r1, [r7, #16]
 8016268:	6878      	ldr	r0, [r7, #4]
 801626a:	f000 f90b 	bl	8016484 <USBH_Set_Idle>
 801626e:	4603      	mov	r3, r0
 8016270:	73fb      	strb	r3, [r7, #15]
    
    /* set Idle */
    if (classReqStatus == USBH_OK)
 8016272:	7bfb      	ldrb	r3, [r7, #15]
 8016274:	2b00      	cmp	r3, #0
 8016276:	d104      	bne.n	8016282 <USBH_HID_ClassRequest+0xa2>
    {
      HID_Machine.ctl_state = HID_REQ_SET_PROTOCOL;  
 8016278:	4b14      	ldr	r3, [pc, #80]	; (80162cc <USBH_HID_ClassRequest+0xec>)
 801627a:	2204      	movs	r2, #4
 801627c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    else if(classReqStatus == USBH_NOT_SUPPORTED) 
    {
      HID_Machine.ctl_state = HID_REQ_SET_PROTOCOL;        
    } 
    break; 
 8016280:	e01c      	b.n	80162bc <USBH_HID_ClassRequest+0xdc>
    else if(classReqStatus == USBH_NOT_SUPPORTED) 
 8016282:	7bfb      	ldrb	r3, [r7, #15]
 8016284:	2b03      	cmp	r3, #3
 8016286:	d119      	bne.n	80162bc <USBH_HID_ClassRequest+0xdc>
      HID_Machine.ctl_state = HID_REQ_SET_PROTOCOL;        
 8016288:	4b10      	ldr	r3, [pc, #64]	; (80162cc <USBH_HID_ClassRequest+0xec>)
 801628a:	2204      	movs	r2, #4
 801628c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    break; 
 8016290:	e014      	b.n	80162bc <USBH_HID_ClassRequest+0xdc>
    
  case HID_REQ_SET_PROTOCOL:
    /* set protocol */
    if (USBH_Set_Protocol (pdev ,pphost, 0) == USBH_OK)
 8016292:	2200      	movs	r2, #0
 8016294:	6939      	ldr	r1, [r7, #16]
 8016296:	6878      	ldr	r0, [r7, #4]
 8016298:	f000 f94e 	bl	8016538 <USBH_Set_Protocol>
 801629c:	4603      	mov	r3, r0
 801629e:	2b00      	cmp	r3, #0
 80162a0:	d10e      	bne.n	80162c0 <USBH_HID_ClassRequest+0xe0>
    {
      HID_Machine.ctl_state = HID_REQ_IDLE;
 80162a2:	4b0a      	ldr	r3, [pc, #40]	; (80162cc <USBH_HID_ClassRequest+0xec>)
 80162a4:	2200      	movs	r2, #0
 80162a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
      
      /* all requests performed*/
      status = USBH_OK; 
 80162aa:	2300      	movs	r3, #0
 80162ac:	75fb      	strb	r3, [r7, #23]
    } 
    break;
 80162ae:	e007      	b.n	80162c0 <USBH_HID_ClassRequest+0xe0>
    
  default:
    break;
 80162b0:	bf00      	nop
 80162b2:	e006      	b.n	80162c2 <USBH_HID_ClassRequest+0xe2>
    break;     
 80162b4:	bf00      	nop
 80162b6:	e004      	b.n	80162c2 <USBH_HID_ClassRequest+0xe2>
    break;
 80162b8:	bf00      	nop
 80162ba:	e002      	b.n	80162c2 <USBH_HID_ClassRequest+0xe2>
    break; 
 80162bc:	bf00      	nop
 80162be:	e000      	b.n	80162c2 <USBH_HID_ClassRequest+0xe2>
    break;
 80162c0:	bf00      	nop
  }
  
  return status; 
 80162c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80162c4:	4618      	mov	r0, r3
 80162c6:	3718      	adds	r7, #24
 80162c8:	46bd      	mov	sp, r7
 80162ca:	bd80      	pop	{r7, pc}
 80162cc:	20003468 	.word	0x20003468
 80162d0:	2000350c 	.word	0x2000350c

080162d4 <USBH_HID_Handle>:
* @param  hdev: Selected device property
* @retval USBH_Status
*/
static USBH_Status USBH_HID_Handle(USB_OTG_CORE_HANDLE *pdev , 
                                   void   *phost)
{
 80162d4:	b580      	push	{r7, lr}
 80162d6:	b084      	sub	sp, #16
 80162d8:	af00      	add	r7, sp, #0
 80162da:	6078      	str	r0, [r7, #4]
 80162dc:	6039      	str	r1, [r7, #0]
  USBH_HOST *pphost = phost;
 80162de:	683b      	ldr	r3, [r7, #0]
 80162e0:	60fb      	str	r3, [r7, #12]
  USBH_Status status = USBH_OK;
 80162e2:	2300      	movs	r3, #0
 80162e4:	72fb      	strb	r3, [r7, #11]
  
  switch (HID_Machine.state)
 80162e6:	4b4a      	ldr	r3, [pc, #296]	; (8016410 <USBH_HID_Handle+0x13c>)
 80162e8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80162ec:	2b05      	cmp	r3, #5
 80162ee:	f200 8084 	bhi.w	80163fa <USBH_HID_Handle+0x126>
 80162f2:	a201      	add	r2, pc, #4	; (adr r2, 80162f8 <USBH_HID_Handle+0x24>)
 80162f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80162f8:	08016311 	.word	0x08016311
 80162fc:	080163fb 	.word	0x080163fb
 8016300:	080163fb 	.word	0x080163fb
 8016304:	08016337 	.word	0x08016337
 8016308:	08016321 	.word	0x08016321
 801630c:	0801636d 	.word	0x0801636d
  {
    
  case HID_IDLE:
    HID_Machine.cb->Init();
 8016310:	4b3f      	ldr	r3, [pc, #252]	; (8016410 <USBH_HID_Handle+0x13c>)
 8016312:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016314:	681b      	ldr	r3, [r3, #0]
 8016316:	4798      	blx	r3
    HID_Machine.state = HID_SYNC;
 8016318:	4b3d      	ldr	r3, [pc, #244]	; (8016410 <USBH_HID_Handle+0x13c>)
 801631a:	2204      	movs	r2, #4
 801631c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    
  case HID_SYNC:

    /* Sync with start of Even Frame */
    if(USB_OTG_IsEvenFrame(pdev) == TRUE)
 8016320:	6878      	ldr	r0, [r7, #4]
 8016322:	f7fd f90d 	bl	8013540 <USB_OTG_IsEvenFrame>
 8016326:	4603      	mov	r3, r0
 8016328:	2b01      	cmp	r3, #1
 801632a:	d168      	bne.n	80163fe <USBH_HID_Handle+0x12a>
    {
      HID_Machine.state = HID_GET_DATA;  
 801632c:	4b38      	ldr	r3, [pc, #224]	; (8016410 <USBH_HID_Handle+0x13c>)
 801632e:	2203      	movs	r2, #3
 8016330:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    }
    break;
 8016334:	e063      	b.n	80163fe <USBH_HID_Handle+0x12a>
    
  case HID_GET_DATA:

    USBH_InterruptReceiveData(pdev, 
                              HID_Machine.buff,
                              HID_Machine.length,
 8016336:	4b36      	ldr	r3, [pc, #216]	; (8016410 <USBH_HID_Handle+0x13c>)
 8016338:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
    USBH_InterruptReceiveData(pdev, 
 801633c:	b2da      	uxtb	r2, r3
 801633e:	4b34      	ldr	r3, [pc, #208]	; (8016410 <USBH_HID_Handle+0x13c>)
 8016340:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8016344:	4932      	ldr	r1, [pc, #200]	; (8016410 <USBH_HID_Handle+0x13c>)
 8016346:	6878      	ldr	r0, [r7, #4]
 8016348:	f000 fbfc 	bl	8016b44 <USBH_InterruptReceiveData>
                              HID_Machine.hc_num_in);
    start_toggle = 1;
 801634c:	4b31      	ldr	r3, [pc, #196]	; (8016414 <USBH_HID_Handle+0x140>)
 801634e:	2201      	movs	r2, #1
 8016350:	701a      	strb	r2, [r3, #0]
    
    HID_Machine.state = HID_POLL;
 8016352:	4b2f      	ldr	r3, [pc, #188]	; (8016410 <USBH_HID_Handle+0x13c>)
 8016354:	2205      	movs	r2, #5
 8016356:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    HID_Machine.timer = HCD_GetCurrentFrame(pdev);
 801635a:	6878      	ldr	r0, [r7, #4]
 801635c:	f7fd fdda 	bl	8013f14 <HCD_GetCurrentFrame>
 8016360:	4603      	mov	r3, r0
 8016362:	b29a      	uxth	r2, r3
 8016364:	4b2a      	ldr	r3, [pc, #168]	; (8016410 <USBH_HID_Handle+0x13c>)
 8016366:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
    break;
 801636a:	e04b      	b.n	8016404 <USBH_HID_Handle+0x130>
    
  case HID_POLL:
    if(( HCD_GetCurrentFrame(pdev) - HID_Machine.timer) >= HID_Machine.poll)
 801636c:	6878      	ldr	r0, [r7, #4]
 801636e:	f7fd fdd1 	bl	8013f14 <HCD_GetCurrentFrame>
 8016372:	4602      	mov	r2, r0
 8016374:	4b26      	ldr	r3, [pc, #152]	; (8016410 <USBH_HID_Handle+0x13c>)
 8016376:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 801637a:	b29b      	uxth	r3, r3
 801637c:	1ad3      	subs	r3, r2, r3
 801637e:	4a24      	ldr	r2, [pc, #144]	; (8016410 <USBH_HID_Handle+0x13c>)
 8016380:	f8b2 204a 	ldrh.w	r2, [r2, #74]	; 0x4a
 8016384:	4293      	cmp	r3, r2
 8016386:	d304      	bcc.n	8016392 <USBH_HID_Handle+0xbe>
    {
      HID_Machine.state = HID_GET_DATA;
 8016388:	4b21      	ldr	r3, [pc, #132]	; (8016410 <USBH_HID_Handle+0x13c>)
 801638a:	2203      	movs	r2, #3
 801638c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        HID_Machine.state = HID_GET_DATA;
        
      }
      
    }      
    break;
 8016390:	e037      	b.n	8016402 <USBH_HID_Handle+0x12e>
    else if(HCD_GetURB_State(pdev , HID_Machine.hc_num_in) == URB_DONE)
 8016392:	4b1f      	ldr	r3, [pc, #124]	; (8016410 <USBH_HID_Handle+0x13c>)
 8016394:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8016398:	4619      	mov	r1, r3
 801639a:	6878      	ldr	r0, [r7, #4]
 801639c:	f7fd fdc8 	bl	8013f30 <HCD_GetURB_State>
 80163a0:	4603      	mov	r3, r0
 80163a2:	2b01      	cmp	r3, #1
 80163a4:	d10d      	bne.n	80163c2 <USBH_HID_Handle+0xee>
      if(start_toggle == 1) /* handle data once */
 80163a6:	4b1b      	ldr	r3, [pc, #108]	; (8016414 <USBH_HID_Handle+0x140>)
 80163a8:	781b      	ldrb	r3, [r3, #0]
 80163aa:	b2db      	uxtb	r3, r3
 80163ac:	2b01      	cmp	r3, #1
 80163ae:	d128      	bne.n	8016402 <USBH_HID_Handle+0x12e>
        start_toggle = 0;
 80163b0:	4b18      	ldr	r3, [pc, #96]	; (8016414 <USBH_HID_Handle+0x140>)
 80163b2:	2200      	movs	r2, #0
 80163b4:	701a      	strb	r2, [r3, #0]
        HID_Machine.cb->Decode(HID_Machine.buff);
 80163b6:	4b16      	ldr	r3, [pc, #88]	; (8016410 <USBH_HID_Handle+0x13c>)
 80163b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80163ba:	685b      	ldr	r3, [r3, #4]
 80163bc:	4814      	ldr	r0, [pc, #80]	; (8016410 <USBH_HID_Handle+0x13c>)
 80163be:	4798      	blx	r3
    break;
 80163c0:	e01f      	b.n	8016402 <USBH_HID_Handle+0x12e>
    else if(HCD_GetURB_State(pdev, HID_Machine.hc_num_in) == URB_STALL) /* IN Endpoint Stalled */
 80163c2:	4b13      	ldr	r3, [pc, #76]	; (8016410 <USBH_HID_Handle+0x13c>)
 80163c4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80163c8:	4619      	mov	r1, r3
 80163ca:	6878      	ldr	r0, [r7, #4]
 80163cc:	f7fd fdb0 	bl	8013f30 <HCD_GetURB_State>
 80163d0:	4603      	mov	r3, r0
 80163d2:	2b04      	cmp	r3, #4
 80163d4:	d115      	bne.n	8016402 <USBH_HID_Handle+0x12e>
      if( (USBH_ClrFeature(pdev, 
 80163d6:	4b0e      	ldr	r3, [pc, #56]	; (8016410 <USBH_HID_Handle+0x13c>)
 80163d8:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 80163dc:	4b0c      	ldr	r3, [pc, #48]	; (8016410 <USBH_HID_Handle+0x13c>)
 80163de:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80163e2:	68f9      	ldr	r1, [r7, #12]
 80163e4:	6878      	ldr	r0, [r7, #4]
 80163e6:	f000 fe20 	bl	801702a <USBH_ClrFeature>
 80163ea:	4603      	mov	r3, r0
 80163ec:	2b00      	cmp	r3, #0
 80163ee:	d108      	bne.n	8016402 <USBH_HID_Handle+0x12e>
        HID_Machine.state = HID_GET_DATA;
 80163f0:	4b07      	ldr	r3, [pc, #28]	; (8016410 <USBH_HID_Handle+0x13c>)
 80163f2:	2203      	movs	r2, #3
 80163f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    break;
 80163f8:	e003      	b.n	8016402 <USBH_HID_Handle+0x12e>
    
  default:
    break;
 80163fa:	bf00      	nop
 80163fc:	e002      	b.n	8016404 <USBH_HID_Handle+0x130>
    break;
 80163fe:	bf00      	nop
 8016400:	e000      	b.n	8016404 <USBH_HID_Handle+0x130>
    break;
 8016402:	bf00      	nop
  }
  return status;
 8016404:	7afb      	ldrb	r3, [r7, #11]
}
 8016406:	4618      	mov	r0, r3
 8016408:	3710      	adds	r7, #16
 801640a:	46bd      	mov	sp, r7
 801640c:	bd80      	pop	{r7, pc}
 801640e:	bf00      	nop
 8016410:	20003468 	.word	0x20003468
 8016414:	20003516 	.word	0x20003516

08016418 <USBH_Get_HID_ReportDescriptor>:
* @retval USBH_Status : Response for USB HID Get Report Descriptor Request
*/
static USBH_Status USBH_Get_HID_ReportDescriptor (USB_OTG_CORE_HANDLE *pdev,
                                                  USBH_HOST *phost,
                                                  uint16_t length)
{
 8016418:	b580      	push	{r7, lr}
 801641a:	b088      	sub	sp, #32
 801641c:	af02      	add	r7, sp, #8
 801641e:	60f8      	str	r0, [r7, #12]
 8016420:	60b9      	str	r1, [r7, #8]
 8016422:	4613      	mov	r3, r2
 8016424:	80fb      	strh	r3, [r7, #6]
  status = USBH_GetDescriptor(pdev,
                              phost,
                              USB_REQ_RECIPIENT_INTERFACE
                                | USB_REQ_TYPE_STANDARD,                                  
                                USB_DESC_HID_REPORT, 
                                pdev->host.Rx_Buffer,
 8016426:	68fb      	ldr	r3, [r7, #12]
 8016428:	f503 7388 	add.w	r3, r3, #272	; 0x110
  status = USBH_GetDescriptor(pdev,
 801642c:	88fa      	ldrh	r2, [r7, #6]
 801642e:	9201      	str	r2, [sp, #4]
 8016430:	9300      	str	r3, [sp, #0]
 8016432:	f44f 5308 	mov.w	r3, #8704	; 0x2200
 8016436:	2201      	movs	r2, #1
 8016438:	68b9      	ldr	r1, [r7, #8]
 801643a:	68f8      	ldr	r0, [r7, #12]
 801643c:	f000 fd58 	bl	8016ef0 <USBH_GetDescriptor>
 8016440:	4603      	mov	r3, r0
 8016442:	75fb      	strb	r3, [r7, #23]
  HID report descriptor parsing is not required.
  In case, for supporting Non-Boot Protocol devices and output reports,
  user may parse the report descriptor*/
  
  
  return status;
 8016444:	7dfb      	ldrb	r3, [r7, #23]
}
 8016446:	4618      	mov	r0, r3
 8016448:	3718      	adds	r7, #24
 801644a:	46bd      	mov	sp, r7
 801644c:	bd80      	pop	{r7, pc}

0801644e <USBH_Get_HID_Descriptor>:
* @retval USBH_Status : Response for USB HID Get Report Descriptor Request
*/
static USBH_Status USBH_Get_HID_Descriptor (USB_OTG_CORE_HANDLE *pdev,
                                            USBH_HOST *phost,
                                            uint16_t length)
{
 801644e:	b580      	push	{r7, lr}
 8016450:	b088      	sub	sp, #32
 8016452:	af02      	add	r7, sp, #8
 8016454:	60f8      	str	r0, [r7, #12]
 8016456:	60b9      	str	r1, [r7, #8]
 8016458:	4613      	mov	r3, r2
 801645a:	80fb      	strh	r3, [r7, #6]
  status = USBH_GetDescriptor(pdev, 
                              phost,
                              USB_REQ_RECIPIENT_INTERFACE
                                | USB_REQ_TYPE_STANDARD,                                  
                                USB_DESC_HID,
                                pdev->host.Rx_Buffer,
 801645c:	68fb      	ldr	r3, [r7, #12]
 801645e:	f503 7388 	add.w	r3, r3, #272	; 0x110
  status = USBH_GetDescriptor(pdev, 
 8016462:	88fa      	ldrh	r2, [r7, #6]
 8016464:	9201      	str	r2, [sp, #4]
 8016466:	9300      	str	r3, [sp, #0]
 8016468:	f44f 5304 	mov.w	r3, #8448	; 0x2100
 801646c:	2201      	movs	r2, #1
 801646e:	68b9      	ldr	r1, [r7, #8]
 8016470:	68f8      	ldr	r0, [r7, #12]
 8016472:	f000 fd3d 	bl	8016ef0 <USBH_GetDescriptor>
 8016476:	4603      	mov	r3, r0
 8016478:	75fb      	strb	r3, [r7, #23]
                                length);
 
  return status;
 801647a:	7dfb      	ldrb	r3, [r7, #23]
}
 801647c:	4618      	mov	r0, r3
 801647e:	3718      	adds	r7, #24
 8016480:	46bd      	mov	sp, r7
 8016482:	bd80      	pop	{r7, pc}

08016484 <USBH_Set_Idle>:
*/
static USBH_Status USBH_Set_Idle (USB_OTG_CORE_HANDLE *pdev,
                                  USBH_HOST *phost,
                                  uint8_t duration,
                                  uint8_t reportId)
{
 8016484:	b580      	push	{r7, lr}
 8016486:	b084      	sub	sp, #16
 8016488:	af00      	add	r7, sp, #0
 801648a:	60f8      	str	r0, [r7, #12]
 801648c:	60b9      	str	r1, [r7, #8]
 801648e:	4611      	mov	r1, r2
 8016490:	461a      	mov	r2, r3
 8016492:	460b      	mov	r3, r1
 8016494:	71fb      	strb	r3, [r7, #7]
 8016496:	4613      	mov	r3, r2
 8016498:	71bb      	strb	r3, [r7, #6]
  
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_INTERFACE |\
 801649a:	68bb      	ldr	r3, [r7, #8]
 801649c:	2221      	movs	r2, #33	; 0x21
 801649e:	751a      	strb	r2, [r3, #20]
    USB_REQ_TYPE_CLASS;
  
  
  phost->Control.setup.b.bRequest = USB_HID_SET_IDLE;
 80164a0:	68bb      	ldr	r3, [r7, #8]
 80164a2:	220a      	movs	r2, #10
 80164a4:	755a      	strb	r2, [r3, #21]
  phost->Control.setup.b.wValue.w = (duration << 8 ) | reportId;
 80164a6:	79fb      	ldrb	r3, [r7, #7]
 80164a8:	021b      	lsls	r3, r3, #8
 80164aa:	b21a      	sxth	r2, r3
 80164ac:	79bb      	ldrb	r3, [r7, #6]
 80164ae:	b21b      	sxth	r3, r3
 80164b0:	4313      	orrs	r3, r2
 80164b2:	b21b      	sxth	r3, r3
 80164b4:	b29a      	uxth	r2, r3
 80164b6:	68bb      	ldr	r3, [r7, #8]
 80164b8:	82da      	strh	r2, [r3, #22]
  
  phost->Control.setup.b.wIndex.w = 0;
 80164ba:	68bb      	ldr	r3, [r7, #8]
 80164bc:	2200      	movs	r2, #0
 80164be:	831a      	strh	r2, [r3, #24]
  phost->Control.setup.b.wLength.w = 0;
 80164c0:	68bb      	ldr	r3, [r7, #8]
 80164c2:	2200      	movs	r2, #0
 80164c4:	835a      	strh	r2, [r3, #26]
  
  return USBH_CtlReq(pdev, phost, 0 , 0 );
 80164c6:	2300      	movs	r3, #0
 80164c8:	2200      	movs	r2, #0
 80164ca:	68b9      	ldr	r1, [r7, #8]
 80164cc:	68f8      	ldr	r0, [r7, #12]
 80164ce:	f000 f9a3 	bl	8016818 <USBH_CtlReq>
 80164d2:	4603      	mov	r3, r0
}
 80164d4:	4618      	mov	r0, r3
 80164d6:	3710      	adds	r7, #16
 80164d8:	46bd      	mov	sp, r7
 80164da:	bd80      	pop	{r7, pc}

080164dc <USBH_Set_Report>:
                                 USBH_HOST *phost,
                                    uint8_t reportType,
                                    uint8_t reportId,
                                    uint8_t reportLen,
                                    uint8_t* reportBuff)
{
 80164dc:	b580      	push	{r7, lr}
 80164de:	b084      	sub	sp, #16
 80164e0:	af00      	add	r7, sp, #0
 80164e2:	60f8      	str	r0, [r7, #12]
 80164e4:	60b9      	str	r1, [r7, #8]
 80164e6:	4611      	mov	r1, r2
 80164e8:	461a      	mov	r2, r3
 80164ea:	460b      	mov	r3, r1
 80164ec:	71fb      	strb	r3, [r7, #7]
 80164ee:	4613      	mov	r3, r2
 80164f0:	71bb      	strb	r3, [r7, #6]
  
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_INTERFACE |\
 80164f2:	68bb      	ldr	r3, [r7, #8]
 80164f4:	2221      	movs	r2, #33	; 0x21
 80164f6:	751a      	strb	r2, [r3, #20]
    USB_REQ_TYPE_CLASS;
  
  
  phost->Control.setup.b.bRequest = USB_HID_SET_REPORT;
 80164f8:	68bb      	ldr	r3, [r7, #8]
 80164fa:	2209      	movs	r2, #9
 80164fc:	755a      	strb	r2, [r3, #21]
  phost->Control.setup.b.wValue.w = (reportType << 8 ) | reportId;
 80164fe:	79fb      	ldrb	r3, [r7, #7]
 8016500:	021b      	lsls	r3, r3, #8
 8016502:	b21a      	sxth	r2, r3
 8016504:	79bb      	ldrb	r3, [r7, #6]
 8016506:	b21b      	sxth	r3, r3
 8016508:	4313      	orrs	r3, r2
 801650a:	b21b      	sxth	r3, r3
 801650c:	b29a      	uxth	r2, r3
 801650e:	68bb      	ldr	r3, [r7, #8]
 8016510:	82da      	strh	r2, [r3, #22]
  
  phost->Control.setup.b.wIndex.w = 0;
 8016512:	68bb      	ldr	r3, [r7, #8]
 8016514:	2200      	movs	r2, #0
 8016516:	831a      	strh	r2, [r3, #24]
  phost->Control.setup.b.wLength.w = reportLen;
 8016518:	7e3b      	ldrb	r3, [r7, #24]
 801651a:	b29a      	uxth	r2, r3
 801651c:	68bb      	ldr	r3, [r7, #8]
 801651e:	835a      	strh	r2, [r3, #26]
  
  return USBH_CtlReq(pdev, phost, reportBuff , reportLen );
 8016520:	7e3b      	ldrb	r3, [r7, #24]
 8016522:	b29b      	uxth	r3, r3
 8016524:	69fa      	ldr	r2, [r7, #28]
 8016526:	68b9      	ldr	r1, [r7, #8]
 8016528:	68f8      	ldr	r0, [r7, #12]
 801652a:	f000 f975 	bl	8016818 <USBH_CtlReq>
 801652e:	4603      	mov	r3, r0
}
 8016530:	4618      	mov	r0, r3
 8016532:	3710      	adds	r7, #16
 8016534:	46bd      	mov	sp, r7
 8016536:	bd80      	pop	{r7, pc}

08016538 <USBH_Set_Protocol>:
* @retval USBH_Status : Response for USB Set Protocol request
*/
static USBH_Status USBH_Set_Protocol(USB_OTG_CORE_HANDLE *pdev,
                                     USBH_HOST *phost,
                                     uint8_t protocol)
{
 8016538:	b580      	push	{r7, lr}
 801653a:	b084      	sub	sp, #16
 801653c:	af00      	add	r7, sp, #0
 801653e:	60f8      	str	r0, [r7, #12]
 8016540:	60b9      	str	r1, [r7, #8]
 8016542:	4613      	mov	r3, r2
 8016544:	71fb      	strb	r3, [r7, #7]
  
  
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_INTERFACE |\
 8016546:	68bb      	ldr	r3, [r7, #8]
 8016548:	2221      	movs	r2, #33	; 0x21
 801654a:	751a      	strb	r2, [r3, #20]
    USB_REQ_TYPE_CLASS;
  
  
  phost->Control.setup.b.bRequest = USB_HID_SET_PROTOCOL;
 801654c:	68bb      	ldr	r3, [r7, #8]
 801654e:	220b      	movs	r2, #11
 8016550:	755a      	strb	r2, [r3, #21]
  
  if(protocol != 0)
 8016552:	79fb      	ldrb	r3, [r7, #7]
 8016554:	2b00      	cmp	r3, #0
 8016556:	d003      	beq.n	8016560 <USBH_Set_Protocol+0x28>
  {
    /* Boot Protocol */
    phost->Control.setup.b.wValue.w = 0;
 8016558:	68bb      	ldr	r3, [r7, #8]
 801655a:	2200      	movs	r2, #0
 801655c:	82da      	strh	r2, [r3, #22]
 801655e:	e002      	b.n	8016566 <USBH_Set_Protocol+0x2e>
  }
  else
  {
    /*Report Protocol*/
    phost->Control.setup.b.wValue.w = 1;
 8016560:	68bb      	ldr	r3, [r7, #8]
 8016562:	2201      	movs	r2, #1
 8016564:	82da      	strh	r2, [r3, #22]
  }
  
  phost->Control.setup.b.wIndex.w = 0;
 8016566:	68bb      	ldr	r3, [r7, #8]
 8016568:	2200      	movs	r2, #0
 801656a:	831a      	strh	r2, [r3, #24]
  phost->Control.setup.b.wLength.w = 0;
 801656c:	68bb      	ldr	r3, [r7, #8]
 801656e:	2200      	movs	r2, #0
 8016570:	835a      	strh	r2, [r3, #26]
  
  return USBH_CtlReq(pdev, phost, 0 , 0 );
 8016572:	2300      	movs	r3, #0
 8016574:	2200      	movs	r2, #0
 8016576:	68b9      	ldr	r1, [r7, #8]
 8016578:	68f8      	ldr	r0, [r7, #12]
 801657a:	f000 f94d 	bl	8016818 <USBH_CtlReq>
 801657e:	4603      	mov	r3, r0
  
}
 8016580:	4618      	mov	r0, r3
 8016582:	3710      	adds	r7, #16
 8016584:	46bd      	mov	sp, r7
 8016586:	bd80      	pop	{r7, pc}

08016588 <USBH_ParseHIDDesc>:
*         This function Parse the HID descriptor
* @param  buf: Buffer where the source descriptor is available
* @retval None
*/
static void  USBH_ParseHIDDesc (USBH_HIDDesc_TypeDef *desc, uint8_t *buf)
{
 8016588:	b480      	push	{r7}
 801658a:	b083      	sub	sp, #12
 801658c:	af00      	add	r7, sp, #0
 801658e:	6078      	str	r0, [r7, #4]
 8016590:	6039      	str	r1, [r7, #0]
  
  desc->bLength                  = *(uint8_t  *) (buf + 0);
 8016592:	683b      	ldr	r3, [r7, #0]
 8016594:	781a      	ldrb	r2, [r3, #0]
 8016596:	687b      	ldr	r3, [r7, #4]
 8016598:	701a      	strb	r2, [r3, #0]
  desc->bDescriptorType          = *(uint8_t  *) (buf + 1);
 801659a:	683b      	ldr	r3, [r7, #0]
 801659c:	785a      	ldrb	r2, [r3, #1]
 801659e:	687b      	ldr	r3, [r7, #4]
 80165a0:	705a      	strb	r2, [r3, #1]
  desc->bcdHID                   =  LE16  (buf + 2);
 80165a2:	683b      	ldr	r3, [r7, #0]
 80165a4:	3302      	adds	r3, #2
 80165a6:	781b      	ldrb	r3, [r3, #0]
 80165a8:	b29a      	uxth	r2, r3
 80165aa:	683b      	ldr	r3, [r7, #0]
 80165ac:	3302      	adds	r3, #2
 80165ae:	3301      	adds	r3, #1
 80165b0:	781b      	ldrb	r3, [r3, #0]
 80165b2:	b29b      	uxth	r3, r3
 80165b4:	021b      	lsls	r3, r3, #8
 80165b6:	b29b      	uxth	r3, r3
 80165b8:	4413      	add	r3, r2
 80165ba:	b29a      	uxth	r2, r3
 80165bc:	687b      	ldr	r3, [r7, #4]
 80165be:	805a      	strh	r2, [r3, #2]
  desc->bCountryCode             = *(uint8_t  *) (buf + 4);
 80165c0:	683b      	ldr	r3, [r7, #0]
 80165c2:	791a      	ldrb	r2, [r3, #4]
 80165c4:	687b      	ldr	r3, [r7, #4]
 80165c6:	711a      	strb	r2, [r3, #4]
  desc->bNumDescriptors          = *(uint8_t  *) (buf + 5);
 80165c8:	683b      	ldr	r3, [r7, #0]
 80165ca:	795a      	ldrb	r2, [r3, #5]
 80165cc:	687b      	ldr	r3, [r7, #4]
 80165ce:	715a      	strb	r2, [r3, #5]
  desc->bReportDescriptorType    = *(uint8_t  *) (buf + 6);
 80165d0:	683b      	ldr	r3, [r7, #0]
 80165d2:	799a      	ldrb	r2, [r3, #6]
 80165d4:	687b      	ldr	r3, [r7, #4]
 80165d6:	719a      	strb	r2, [r3, #6]
  desc->wItemLength              =  LE16  (buf + 7);
 80165d8:	683b      	ldr	r3, [r7, #0]
 80165da:	3307      	adds	r3, #7
 80165dc:	781b      	ldrb	r3, [r3, #0]
 80165de:	b29a      	uxth	r2, r3
 80165e0:	683b      	ldr	r3, [r7, #0]
 80165e2:	3307      	adds	r3, #7
 80165e4:	3301      	adds	r3, #1
 80165e6:	781b      	ldrb	r3, [r3, #0]
 80165e8:	b29b      	uxth	r3, r3
 80165ea:	021b      	lsls	r3, r3, #8
 80165ec:	b29b      	uxth	r3, r3
 80165ee:	4413      	add	r3, r2
 80165f0:	b29a      	uxth	r2, r3
 80165f2:	687b      	ldr	r3, [r7, #4]
 80165f4:	811a      	strh	r2, [r3, #8]
  
} 
 80165f6:	bf00      	nop
 80165f8:	370c      	adds	r7, #12
 80165fa:	46bd      	mov	sp, r7
 80165fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016600:	4770      	bx	lr
 8016602:	bf00      	nop

08016604 <KEYBRD_Init>:
*         Initialize the keyboard function.
* @param  None
* @retval None
*/
static void  KEYBRD_Init (void)
{
 8016604:	b580      	push	{r7, lr}
 8016606:	af00      	add	r7, sp, #0
  /* Call User Init*/
  USR_KEYBRD_Init();
 8016608:	f7ea fb57 	bl	8000cba <USR_KEYBRD_Init>
}
 801660c:	bf00      	nop
 801660e:	bd80      	pop	{r7, pc}

08016610 <KEYBRD_Decode>:
* @param  pbuf : Pointer to the HID IN report data buffer
* @retval None
*/

static void KEYBRD_Decode(uint8_t *pbuf)
{
 8016610:	b580      	push	{r7, lr}
 8016612:	b084      	sub	sp, #16
 8016614:	af00      	add	r7, sp, #0
 8016616:	6078      	str	r0, [r7, #4]
  uint8_t   ix;
  uint8_t   jx;
  uint8_t   error;
  uint8_t   output;            
  
  nbr_keys      = 0;
 8016618:	4b64      	ldr	r3, [pc, #400]	; (80167ac <KEYBRD_Decode+0x19c>)
 801661a:	2200      	movs	r2, #0
 801661c:	701a      	strb	r2, [r3, #0]
  nbr_keys_new  = 0;
 801661e:	4b64      	ldr	r3, [pc, #400]	; (80167b0 <KEYBRD_Decode+0x1a0>)
 8016620:	2200      	movs	r2, #0
 8016622:	701a      	strb	r2, [r3, #0]
  nbr_keys_last = 0;
 8016624:	4b63      	ldr	r3, [pc, #396]	; (80167b4 <KEYBRD_Decode+0x1a4>)
 8016626:	2200      	movs	r2, #0
 8016628:	701a      	strb	r2, [r3, #0]
  key_newest    = 0x00;
 801662a:	4b63      	ldr	r3, [pc, #396]	; (80167b8 <KEYBRD_Decode+0x1a8>)
 801662c:	2200      	movs	r2, #0
 801662e:	701a      	strb	r2, [r3, #0]
  
  
  /* Check if Shift key is pressed */                                                                         
  if ((pbuf[0] == KBD_LEFT_SHIFT) || (pbuf[0] == KBD_RIGHT_SHIFT)) {
 8016630:	687b      	ldr	r3, [r7, #4]
 8016632:	781b      	ldrb	r3, [r3, #0]
 8016634:	2b02      	cmp	r3, #2
 8016636:	d003      	beq.n	8016640 <KEYBRD_Decode+0x30>
 8016638:	687b      	ldr	r3, [r7, #4]
 801663a:	781b      	ldrb	r3, [r3, #0]
 801663c:	2b20      	cmp	r3, #32
 801663e:	d103      	bne.n	8016648 <KEYBRD_Decode+0x38>
    shift = TRUE;
 8016640:	4b5e      	ldr	r3, [pc, #376]	; (80167bc <KEYBRD_Decode+0x1ac>)
 8016642:	2201      	movs	r2, #1
 8016644:	701a      	strb	r2, [r3, #0]
 8016646:	e002      	b.n	801664e <KEYBRD_Decode+0x3e>
  } else {
    shift = FALSE;
 8016648:	4b5c      	ldr	r3, [pc, #368]	; (80167bc <KEYBRD_Decode+0x1ac>)
 801664a:	2200      	movs	r2, #0
 801664c:	701a      	strb	r2, [r3, #0]
  }
  
  error = FALSE;
 801664e:	2300      	movs	r3, #0
 8016650:	737b      	strb	r3, [r7, #13]
  
  /* Check for the value of pressed key */
  for (ix = 2; ix < 2 + KBR_MAX_NBR_PRESSED; ix++) {                       
 8016652:	2302      	movs	r3, #2
 8016654:	73fb      	strb	r3, [r7, #15]
 8016656:	e016      	b.n	8016686 <KEYBRD_Decode+0x76>
    if ((pbuf[ix] == 0x01) ||
 8016658:	7bfb      	ldrb	r3, [r7, #15]
 801665a:	687a      	ldr	r2, [r7, #4]
 801665c:	4413      	add	r3, r2
 801665e:	781b      	ldrb	r3, [r3, #0]
 8016660:	2b01      	cmp	r3, #1
 8016662:	d00b      	beq.n	801667c <KEYBRD_Decode+0x6c>
        (pbuf[ix] == 0x02) ||
 8016664:	7bfb      	ldrb	r3, [r7, #15]
 8016666:	687a      	ldr	r2, [r7, #4]
 8016668:	4413      	add	r3, r2
 801666a:	781b      	ldrb	r3, [r3, #0]
    if ((pbuf[ix] == 0x01) ||
 801666c:	2b02      	cmp	r3, #2
 801666e:	d005      	beq.n	801667c <KEYBRD_Decode+0x6c>
          (pbuf[ix] == 0x03)) {
 8016670:	7bfb      	ldrb	r3, [r7, #15]
 8016672:	687a      	ldr	r2, [r7, #4]
 8016674:	4413      	add	r3, r2
 8016676:	781b      	ldrb	r3, [r3, #0]
        (pbuf[ix] == 0x02) ||
 8016678:	2b03      	cmp	r3, #3
 801667a:	d101      	bne.n	8016680 <KEYBRD_Decode+0x70>
            error = TRUE;
 801667c:	2301      	movs	r3, #1
 801667e:	737b      	strb	r3, [r7, #13]
  for (ix = 2; ix < 2 + KBR_MAX_NBR_PRESSED; ix++) {                       
 8016680:	7bfb      	ldrb	r3, [r7, #15]
 8016682:	3301      	adds	r3, #1
 8016684:	73fb      	strb	r3, [r7, #15]
 8016686:	7bfb      	ldrb	r3, [r7, #15]
 8016688:	2b07      	cmp	r3, #7
 801668a:	d9e5      	bls.n	8016658 <KEYBRD_Decode+0x48>
          }
  }
  
  if (error == TRUE) {
 801668c:	7b7b      	ldrb	r3, [r7, #13]
 801668e:	2b01      	cmp	r3, #1
 8016690:	f000 8087 	beq.w	80167a2 <KEYBRD_Decode+0x192>
    return;
  }
  
  nbr_keys     = 0;
 8016694:	4b45      	ldr	r3, [pc, #276]	; (80167ac <KEYBRD_Decode+0x19c>)
 8016696:	2200      	movs	r2, #0
 8016698:	701a      	strb	r2, [r3, #0]
  nbr_keys_new = 0;
 801669a:	4b45      	ldr	r3, [pc, #276]	; (80167b0 <KEYBRD_Decode+0x1a0>)
 801669c:	2200      	movs	r2, #0
 801669e:	701a      	strb	r2, [r3, #0]
  for (ix = 2; ix < 2 + KBR_MAX_NBR_PRESSED; ix++) {
 80166a0:	2302      	movs	r3, #2
 80166a2:	73fb      	strb	r3, [r7, #15]
 80166a4:	e03f      	b.n	8016726 <KEYBRD_Decode+0x116>
    if (pbuf[ix] != 0) {
 80166a6:	7bfb      	ldrb	r3, [r7, #15]
 80166a8:	687a      	ldr	r2, [r7, #4]
 80166aa:	4413      	add	r3, r2
 80166ac:	781b      	ldrb	r3, [r3, #0]
 80166ae:	2b00      	cmp	r3, #0
 80166b0:	d036      	beq.n	8016720 <KEYBRD_Decode+0x110>
      keys[nbr_keys] = pbuf[ix];                                       
 80166b2:	7bfb      	ldrb	r3, [r7, #15]
 80166b4:	687a      	ldr	r2, [r7, #4]
 80166b6:	4413      	add	r3, r2
 80166b8:	4a3c      	ldr	r2, [pc, #240]	; (80167ac <KEYBRD_Decode+0x19c>)
 80166ba:	7812      	ldrb	r2, [r2, #0]
 80166bc:	7819      	ldrb	r1, [r3, #0]
 80166be:	4b40      	ldr	r3, [pc, #256]	; (80167c0 <KEYBRD_Decode+0x1b0>)
 80166c0:	5499      	strb	r1, [r3, r2]
      nbr_keys++;
 80166c2:	4b3a      	ldr	r3, [pc, #232]	; (80167ac <KEYBRD_Decode+0x19c>)
 80166c4:	781b      	ldrb	r3, [r3, #0]
 80166c6:	3301      	adds	r3, #1
 80166c8:	b2da      	uxtb	r2, r3
 80166ca:	4b38      	ldr	r3, [pc, #224]	; (80167ac <KEYBRD_Decode+0x19c>)
 80166cc:	701a      	strb	r2, [r3, #0]
      for (jx = 0; jx < nbr_keys_last; jx++) {                         
 80166ce:	2300      	movs	r3, #0
 80166d0:	73bb      	strb	r3, [r7, #14]
 80166d2:	e00b      	b.n	80166ec <KEYBRD_Decode+0xdc>
        if (pbuf[ix] == keys_last[jx]) {
 80166d4:	7bfb      	ldrb	r3, [r7, #15]
 80166d6:	687a      	ldr	r2, [r7, #4]
 80166d8:	4413      	add	r3, r2
 80166da:	781a      	ldrb	r2, [r3, #0]
 80166dc:	7bbb      	ldrb	r3, [r7, #14]
 80166de:	4939      	ldr	r1, [pc, #228]	; (80167c4 <KEYBRD_Decode+0x1b4>)
 80166e0:	5ccb      	ldrb	r3, [r1, r3]
 80166e2:	429a      	cmp	r2, r3
 80166e4:	d008      	beq.n	80166f8 <KEYBRD_Decode+0xe8>
      for (jx = 0; jx < nbr_keys_last; jx++) {                         
 80166e6:	7bbb      	ldrb	r3, [r7, #14]
 80166e8:	3301      	adds	r3, #1
 80166ea:	73bb      	strb	r3, [r7, #14]
 80166ec:	4b31      	ldr	r3, [pc, #196]	; (80167b4 <KEYBRD_Decode+0x1a4>)
 80166ee:	781b      	ldrb	r3, [r3, #0]
 80166f0:	7bba      	ldrb	r2, [r7, #14]
 80166f2:	429a      	cmp	r2, r3
 80166f4:	d3ee      	bcc.n	80166d4 <KEYBRD_Decode+0xc4>
 80166f6:	e000      	b.n	80166fa <KEYBRD_Decode+0xea>
          break;
 80166f8:	bf00      	nop
        }
      }
      
      if (jx == nbr_keys_last) {
 80166fa:	4b2e      	ldr	r3, [pc, #184]	; (80167b4 <KEYBRD_Decode+0x1a4>)
 80166fc:	781b      	ldrb	r3, [r3, #0]
 80166fe:	7bba      	ldrb	r2, [r7, #14]
 8016700:	429a      	cmp	r2, r3
 8016702:	d10d      	bne.n	8016720 <KEYBRD_Decode+0x110>
        keys_new[nbr_keys_new] = pbuf[ix];
 8016704:	7bfb      	ldrb	r3, [r7, #15]
 8016706:	687a      	ldr	r2, [r7, #4]
 8016708:	4413      	add	r3, r2
 801670a:	4a29      	ldr	r2, [pc, #164]	; (80167b0 <KEYBRD_Decode+0x1a0>)
 801670c:	7812      	ldrb	r2, [r2, #0]
 801670e:	7819      	ldrb	r1, [r3, #0]
 8016710:	4b2d      	ldr	r3, [pc, #180]	; (80167c8 <KEYBRD_Decode+0x1b8>)
 8016712:	5499      	strb	r1, [r3, r2]
        nbr_keys_new++;
 8016714:	4b26      	ldr	r3, [pc, #152]	; (80167b0 <KEYBRD_Decode+0x1a0>)
 8016716:	781b      	ldrb	r3, [r3, #0]
 8016718:	3301      	adds	r3, #1
 801671a:	b2da      	uxtb	r2, r3
 801671c:	4b24      	ldr	r3, [pc, #144]	; (80167b0 <KEYBRD_Decode+0x1a0>)
 801671e:	701a      	strb	r2, [r3, #0]
  for (ix = 2; ix < 2 + KBR_MAX_NBR_PRESSED; ix++) {
 8016720:	7bfb      	ldrb	r3, [r7, #15]
 8016722:	3301      	adds	r3, #1
 8016724:	73fb      	strb	r3, [r7, #15]
 8016726:	7bfb      	ldrb	r3, [r7, #15]
 8016728:	2b07      	cmp	r3, #7
 801672a:	d9bc      	bls.n	80166a6 <KEYBRD_Decode+0x96>
      }
    }
  }
  
  if (nbr_keys_new == 1) {
 801672c:	4b20      	ldr	r3, [pc, #128]	; (80167b0 <KEYBRD_Decode+0x1a0>)
 801672e:	781b      	ldrb	r3, [r3, #0]
 8016730:	2b01      	cmp	r3, #1
 8016732:	d11f      	bne.n	8016774 <KEYBRD_Decode+0x164>
    key_newest = keys_new[0];
 8016734:	4b24      	ldr	r3, [pc, #144]	; (80167c8 <KEYBRD_Decode+0x1b8>)
 8016736:	781a      	ldrb	r2, [r3, #0]
 8016738:	4b1f      	ldr	r3, [pc, #124]	; (80167b8 <KEYBRD_Decode+0x1a8>)
 801673a:	701a      	strb	r2, [r3, #0]
    
    if (shift == TRUE) {
 801673c:	4b1f      	ldr	r3, [pc, #124]	; (80167bc <KEYBRD_Decode+0x1ac>)
 801673e:	781b      	ldrb	r3, [r3, #0]
 8016740:	2b01      	cmp	r3, #1
 8016742:	d109      	bne.n	8016758 <KEYBRD_Decode+0x148>
      output =  HID_KEYBRD_ShiftKey[HID_KEYBRD_Codes[key_newest]];
 8016744:	4b1c      	ldr	r3, [pc, #112]	; (80167b8 <KEYBRD_Decode+0x1a8>)
 8016746:	781b      	ldrb	r3, [r3, #0]
 8016748:	461a      	mov	r2, r3
 801674a:	4b20      	ldr	r3, [pc, #128]	; (80167cc <KEYBRD_Decode+0x1bc>)
 801674c:	5c9b      	ldrb	r3, [r3, r2]
 801674e:	461a      	mov	r2, r3
 8016750:	4b1f      	ldr	r3, [pc, #124]	; (80167d0 <KEYBRD_Decode+0x1c0>)
 8016752:	569b      	ldrsb	r3, [r3, r2]
 8016754:	733b      	strb	r3, [r7, #12]
 8016756:	e008      	b.n	801676a <KEYBRD_Decode+0x15a>
    } else {
      output =  HID_KEYBRD_Key[HID_KEYBRD_Codes[key_newest]];
 8016758:	4b17      	ldr	r3, [pc, #92]	; (80167b8 <KEYBRD_Decode+0x1a8>)
 801675a:	781b      	ldrb	r3, [r3, #0]
 801675c:	461a      	mov	r2, r3
 801675e:	4b1b      	ldr	r3, [pc, #108]	; (80167cc <KEYBRD_Decode+0x1bc>)
 8016760:	5c9b      	ldrb	r3, [r3, r2]
 8016762:	461a      	mov	r2, r3
 8016764:	4b1b      	ldr	r3, [pc, #108]	; (80167d4 <KEYBRD_Decode+0x1c4>)
 8016766:	569b      	ldrsb	r3, [r3, r2]
 8016768:	733b      	strb	r3, [r7, #12]
    }
    
    /* call user process handle */
    USR_KEYBRD_ProcessData(output);
 801676a:	7b3b      	ldrb	r3, [r7, #12]
 801676c:	4618      	mov	r0, r3
 801676e:	f7ea faab 	bl	8000cc8 <USR_KEYBRD_ProcessData>
 8016772:	e002      	b.n	801677a <KEYBRD_Decode+0x16a>
  } else {
    key_newest = 0x00;
 8016774:	4b10      	ldr	r3, [pc, #64]	; (80167b8 <KEYBRD_Decode+0x1a8>)
 8016776:	2200      	movs	r2, #0
 8016778:	701a      	strb	r2, [r3, #0]
  }
  
  
  nbr_keys_last  = nbr_keys;
 801677a:	4b0c      	ldr	r3, [pc, #48]	; (80167ac <KEYBRD_Decode+0x19c>)
 801677c:	781a      	ldrb	r2, [r3, #0]
 801677e:	4b0d      	ldr	r3, [pc, #52]	; (80167b4 <KEYBRD_Decode+0x1a4>)
 8016780:	701a      	strb	r2, [r3, #0]
  for (ix = 0; ix < KBR_MAX_NBR_PRESSED; ix++) {
 8016782:	2300      	movs	r3, #0
 8016784:	73fb      	strb	r3, [r7, #15]
 8016786:	e008      	b.n	801679a <KEYBRD_Decode+0x18a>
    keys_last[ix] = keys[ix];
 8016788:	7bfa      	ldrb	r2, [r7, #15]
 801678a:	7bfb      	ldrb	r3, [r7, #15]
 801678c:	490c      	ldr	r1, [pc, #48]	; (80167c0 <KEYBRD_Decode+0x1b0>)
 801678e:	5c89      	ldrb	r1, [r1, r2]
 8016790:	4a0c      	ldr	r2, [pc, #48]	; (80167c4 <KEYBRD_Decode+0x1b4>)
 8016792:	54d1      	strb	r1, [r2, r3]
  for (ix = 0; ix < KBR_MAX_NBR_PRESSED; ix++) {
 8016794:	7bfb      	ldrb	r3, [r7, #15]
 8016796:	3301      	adds	r3, #1
 8016798:	73fb      	strb	r3, [r7, #15]
 801679a:	7bfb      	ldrb	r3, [r7, #15]
 801679c:	2b05      	cmp	r3, #5
 801679e:	d9f3      	bls.n	8016788 <KEYBRD_Decode+0x178>
 80167a0:	e000      	b.n	80167a4 <KEYBRD_Decode+0x194>
    return;
 80167a2:	bf00      	nop
  }
}
 80167a4:	3710      	adds	r7, #16
 80167a6:	46bd      	mov	sp, r7
 80167a8:	bd80      	pop	{r7, pc}
 80167aa:	bf00      	nop
 80167ac:	20003518 	.word	0x20003518
 80167b0:	20003519 	.word	0x20003519
 80167b4:	2000351a 	.word	0x2000351a
 80167b8:	2000351b 	.word	0x2000351b
 80167bc:	2000351c 	.word	0x2000351c
 80167c0:	20003520 	.word	0x20003520
 80167c4:	20003528 	.word	0x20003528
 80167c8:	20003530 	.word	0x20003530
 80167cc:	080228a0 	.word	0x080228a0
 80167d0:	08022a0c 	.word	0x08022a0c
 80167d4:	08022988 	.word	0x08022988

080167d8 <MOUSE_Init>:
*         Init Mouse State.
* @param  None
* @retval None
*/
static void  MOUSE_Init ( void)
{
 80167d8:	b580      	push	{r7, lr}
 80167da:	af00      	add	r7, sp, #0
 /* Call User Init*/
 USR_MOUSE_Init();
 80167dc:	f7ea faa8 	bl	8000d30 <USR_MOUSE_Init>
}
 80167e0:	bf00      	nop
 80167e2:	bd80      	pop	{r7, pc}

080167e4 <MOUSE_Decode>:
*         Decode Mouse data
* @param  data : Pointer to Mouse HID data buffer
* @retval None
*/
static void  MOUSE_Decode(uint8_t *data)
{
 80167e4:	b580      	push	{r7, lr}
 80167e6:	b082      	sub	sp, #8
 80167e8:	af00      	add	r7, sp, #0
 80167ea:	6078      	str	r0, [r7, #4]
  HID_MOUSE_Data.button = data[0];
 80167ec:	687b      	ldr	r3, [r7, #4]
 80167ee:	781a      	ldrb	r2, [r3, #0]
 80167f0:	4b08      	ldr	r3, [pc, #32]	; (8016814 <MOUSE_Decode+0x30>)
 80167f2:	70da      	strb	r2, [r3, #3]

  HID_MOUSE_Data.x      = data[1];
 80167f4:	687b      	ldr	r3, [r7, #4]
 80167f6:	785a      	ldrb	r2, [r3, #1]
 80167f8:	4b06      	ldr	r3, [pc, #24]	; (8016814 <MOUSE_Decode+0x30>)
 80167fa:	701a      	strb	r2, [r3, #0]
  HID_MOUSE_Data.y      = data[2];
 80167fc:	687b      	ldr	r3, [r7, #4]
 80167fe:	789a      	ldrb	r2, [r3, #2]
 8016800:	4b04      	ldr	r3, [pc, #16]	; (8016814 <MOUSE_Decode+0x30>)
 8016802:	705a      	strb	r2, [r3, #1]
  
  USR_MOUSE_ProcessData(&HID_MOUSE_Data);
 8016804:	4803      	ldr	r0, [pc, #12]	; (8016814 <MOUSE_Decode+0x30>)
 8016806:	f7ea faa9 	bl	8000d5c <USR_MOUSE_ProcessData>

}
 801680a:	bf00      	nop
 801680c:	3708      	adds	r7, #8
 801680e:	46bd      	mov	sp, r7
 8016810:	bd80      	pop	{r7, pc}
 8016812:	bf00      	nop
 8016814:	20003538 	.word	0x20003538

08016818 <USBH_CtlReq>:
  */
USBH_Status USBH_CtlReq     (USB_OTG_CORE_HANDLE *pdev, 
                             USBH_HOST           *phost, 
                             uint8_t             *buff,
                             uint16_t            length)
{
 8016818:	b580      	push	{r7, lr}
 801681a:	b086      	sub	sp, #24
 801681c:	af00      	add	r7, sp, #0
 801681e:	60f8      	str	r0, [r7, #12]
 8016820:	60b9      	str	r1, [r7, #8]
 8016822:	607a      	str	r2, [r7, #4]
 8016824:	807b      	strh	r3, [r7, #2]
  USBH_Status status;
  status = USBH_BUSY;
 8016826:	2301      	movs	r3, #1
 8016828:	75fb      	strb	r3, [r7, #23]
  
  switch (phost->RequestState)
 801682a:	68bb      	ldr	r3, [r7, #8]
 801682c:	78db      	ldrb	r3, [r3, #3]
 801682e:	2b01      	cmp	r3, #1
 8016830:	d002      	beq.n	8016838 <USBH_CtlReq+0x20>
 8016832:	2b02      	cmp	r3, #2
 8016834:	d00c      	beq.n	8016850 <USBH_CtlReq+0x38>
      status = USBH_NOT_SUPPORTED;
    }
    break;
    
  default:
    break; 
 8016836:	e02c      	b.n	8016892 <USBH_CtlReq+0x7a>
    USBH_SubmitSetupRequest(phost, buff, length);
 8016838:	887b      	ldrh	r3, [r7, #2]
 801683a:	461a      	mov	r2, r3
 801683c:	6879      	ldr	r1, [r7, #4]
 801683e:	68b8      	ldr	r0, [r7, #8]
 8016840:	f000 fa38 	bl	8016cb4 <USBH_SubmitSetupRequest>
    phost->RequestState = CMD_WAIT;
 8016844:	68bb      	ldr	r3, [r7, #8]
 8016846:	2202      	movs	r2, #2
 8016848:	70da      	strb	r2, [r3, #3]
    status = USBH_BUSY;
 801684a:	2301      	movs	r3, #1
 801684c:	75fb      	strb	r3, [r7, #23]
    break;
 801684e:	e020      	b.n	8016892 <USBH_CtlReq+0x7a>
     if (phost->Control.state == CTRL_COMPLETE ) 
 8016850:	68bb      	ldr	r3, [r7, #8]
 8016852:	7f1b      	ldrb	r3, [r3, #28]
 8016854:	2b0d      	cmp	r3, #13
 8016856:	d108      	bne.n	801686a <USBH_CtlReq+0x52>
      phost->RequestState = CMD_SEND;
 8016858:	68bb      	ldr	r3, [r7, #8]
 801685a:	2201      	movs	r2, #1
 801685c:	70da      	strb	r2, [r3, #3]
      phost->Control.state =CTRL_IDLE;  
 801685e:	68bb      	ldr	r3, [r7, #8]
 8016860:	2200      	movs	r2, #0
 8016862:	771a      	strb	r2, [r3, #28]
      status = USBH_OK;      
 8016864:	2300      	movs	r3, #0
 8016866:	75fb      	strb	r3, [r7, #23]
    break;
 8016868:	e012      	b.n	8016890 <USBH_CtlReq+0x78>
    else if  (phost->Control.state == CTRL_ERROR)
 801686a:	68bb      	ldr	r3, [r7, #8]
 801686c:	7f1b      	ldrb	r3, [r3, #28]
 801686e:	2b0b      	cmp	r3, #11
 8016870:	d105      	bne.n	801687e <USBH_CtlReq+0x66>
      phost->RequestState = CMD_SEND;
 8016872:	68bb      	ldr	r3, [r7, #8]
 8016874:	2201      	movs	r2, #1
 8016876:	70da      	strb	r2, [r3, #3]
      status = USBH_FAIL;
 8016878:	2302      	movs	r3, #2
 801687a:	75fb      	strb	r3, [r7, #23]
    break;
 801687c:	e008      	b.n	8016890 <USBH_CtlReq+0x78>
     else if  (phost->Control.state == CTRL_STALLED )
 801687e:	68bb      	ldr	r3, [r7, #8]
 8016880:	7f1b      	ldrb	r3, [r3, #28]
 8016882:	2b0c      	cmp	r3, #12
 8016884:	d104      	bne.n	8016890 <USBH_CtlReq+0x78>
      phost->RequestState = CMD_SEND;
 8016886:	68bb      	ldr	r3, [r7, #8]
 8016888:	2201      	movs	r2, #1
 801688a:	70da      	strb	r2, [r3, #3]
      status = USBH_NOT_SUPPORTED;
 801688c:	2303      	movs	r3, #3
 801688e:	75fb      	strb	r3, [r7, #23]
    break;
 8016890:	bf00      	nop
  }
  return status;
 8016892:	7dfb      	ldrb	r3, [r7, #23]
}
 8016894:	4618      	mov	r0, r3
 8016896:	3718      	adds	r7, #24
 8016898:	46bd      	mov	sp, r7
 801689a:	bd80      	pop	{r7, pc}

0801689c <USBH_CtlSendSetup>:
  * @param  hc_num: Host channel Number
  * @retval Status
  */
USBH_Status USBH_CtlSendSetup ( USB_OTG_CORE_HANDLE *pdev, 
                                uint8_t *buff, 
                                uint8_t hc_num){
 801689c:	b580      	push	{r7, lr}
 801689e:	b084      	sub	sp, #16
 80168a0:	af00      	add	r7, sp, #0
 80168a2:	60f8      	str	r0, [r7, #12]
 80168a4:	60b9      	str	r1, [r7, #8]
 80168a6:	4613      	mov	r3, r2
 80168a8:	71fb      	strb	r3, [r7, #7]
  pdev->host.hc[hc_num].ep_is_in = 0;
 80168aa:	79fb      	ldrb	r3, [r7, #7]
 80168ac:	68fa      	ldr	r2, [r7, #12]
 80168ae:	015b      	lsls	r3, r3, #5
 80168b0:	4413      	add	r3, r2
 80168b2:	f203 33ae 	addw	r3, r3, #942	; 0x3ae
 80168b6:	2200      	movs	r2, #0
 80168b8:	701a      	strb	r2, [r3, #0]
  pdev->host.hc[hc_num].data_pid = HC_PID_SETUP;   
 80168ba:	79fb      	ldrb	r3, [r7, #7]
 80168bc:	68fa      	ldr	r2, [r7, #12]
 80168be:	3315      	adds	r3, #21
 80168c0:	015b      	lsls	r3, r3, #5
 80168c2:	4413      	add	r3, r2
 80168c4:	f503 738a 	add.w	r3, r3, #276	; 0x114
 80168c8:	2203      	movs	r2, #3
 80168ca:	701a      	strb	r2, [r3, #0]
  pdev->host.hc[hc_num].xfer_buff = buff;
 80168cc:	79fb      	ldrb	r3, [r7, #7]
 80168ce:	68fa      	ldr	r2, [r7, #12]
 80168d0:	3315      	adds	r3, #21
 80168d2:	015b      	lsls	r3, r3, #5
 80168d4:	4413      	add	r3, r2
 80168d6:	f503 738c 	add.w	r3, r3, #280	; 0x118
 80168da:	68ba      	ldr	r2, [r7, #8]
 80168dc:	601a      	str	r2, [r3, #0]
  pdev->host.hc[hc_num].xfer_len = USBH_SETUP_PKT_SIZE;   
 80168de:	79fb      	ldrb	r3, [r7, #7]
 80168e0:	68fa      	ldr	r2, [r7, #12]
 80168e2:	015b      	lsls	r3, r3, #5
 80168e4:	4413      	add	r3, r2
 80168e6:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 80168ea:	2208      	movs	r2, #8
 80168ec:	601a      	str	r2, [r3, #0]

  return (USBH_Status)HCD_SubmitRequest (pdev , hc_num);   
 80168ee:	79fb      	ldrb	r3, [r7, #7]
 80168f0:	4619      	mov	r1, r3
 80168f2:	68f8      	ldr	r0, [r7, #12]
 80168f4:	f7fd fb61 	bl	8013fba <HCD_SubmitRequest>
 80168f8:	4603      	mov	r3, r0
 80168fa:	b2db      	uxtb	r3, r3
}
 80168fc:	4618      	mov	r0, r3
 80168fe:	3710      	adds	r7, #16
 8016900:	46bd      	mov	sp, r7
 8016902:	bd80      	pop	{r7, pc}

08016904 <USBH_CtlSendData>:
  */
USBH_Status USBH_CtlSendData ( USB_OTG_CORE_HANDLE *pdev, 
                                uint8_t *buff, 
                                uint16_t length,
                                uint8_t hc_num)
{
 8016904:	b580      	push	{r7, lr}
 8016906:	b084      	sub	sp, #16
 8016908:	af00      	add	r7, sp, #0
 801690a:	60f8      	str	r0, [r7, #12]
 801690c:	60b9      	str	r1, [r7, #8]
 801690e:	4611      	mov	r1, r2
 8016910:	461a      	mov	r2, r3
 8016912:	460b      	mov	r3, r1
 8016914:	80fb      	strh	r3, [r7, #6]
 8016916:	4613      	mov	r3, r2
 8016918:	717b      	strb	r3, [r7, #5]
  pdev->host.hc[hc_num].ep_is_in = 0;
 801691a:	797b      	ldrb	r3, [r7, #5]
 801691c:	68fa      	ldr	r2, [r7, #12]
 801691e:	015b      	lsls	r3, r3, #5
 8016920:	4413      	add	r3, r2
 8016922:	f203 33ae 	addw	r3, r3, #942	; 0x3ae
 8016926:	2200      	movs	r2, #0
 8016928:	701a      	strb	r2, [r3, #0]
  pdev->host.hc[hc_num].xfer_buff = buff;
 801692a:	797b      	ldrb	r3, [r7, #5]
 801692c:	68fa      	ldr	r2, [r7, #12]
 801692e:	3315      	adds	r3, #21
 8016930:	015b      	lsls	r3, r3, #5
 8016932:	4413      	add	r3, r2
 8016934:	f503 738c 	add.w	r3, r3, #280	; 0x118
 8016938:	68ba      	ldr	r2, [r7, #8]
 801693a:	601a      	str	r2, [r3, #0]
  pdev->host.hc[hc_num].xfer_len = length;
 801693c:	797b      	ldrb	r3, [r7, #5]
 801693e:	88fa      	ldrh	r2, [r7, #6]
 8016940:	68f9      	ldr	r1, [r7, #12]
 8016942:	015b      	lsls	r3, r3, #5
 8016944:	440b      	add	r3, r1
 8016946:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 801694a:	601a      	str	r2, [r3, #0]
 
  if ( length == 0 )
 801694c:	88fb      	ldrh	r3, [r7, #6]
 801694e:	2b00      	cmp	r3, #0
 8016950:	d107      	bne.n	8016962 <USBH_CtlSendData+0x5e>
  { /* For Status OUT stage, Length==0, Status Out PID = 1 */
    pdev->host.hc[hc_num].toggle_out = 1;   
 8016952:	797b      	ldrb	r3, [r7, #5]
 8016954:	68fa      	ldr	r2, [r7, #12]
 8016956:	331e      	adds	r3, #30
 8016958:	015b      	lsls	r3, r3, #5
 801695a:	4413      	add	r3, r2
 801695c:	3305      	adds	r3, #5
 801695e:	2201      	movs	r2, #1
 8016960:	701a      	strb	r2, [r3, #0]
  }
 
 /* Set the Data Toggle bit as per the Flag */
  if ( pdev->host.hc[hc_num].toggle_out == 0)
 8016962:	797b      	ldrb	r3, [r7, #5]
 8016964:	68fa      	ldr	r2, [r7, #12]
 8016966:	331e      	adds	r3, #30
 8016968:	015b      	lsls	r3, r3, #5
 801696a:	4413      	add	r3, r2
 801696c:	3305      	adds	r3, #5
 801696e:	781b      	ldrb	r3, [r3, #0]
 8016970:	2b00      	cmp	r3, #0
 8016972:	d109      	bne.n	8016988 <USBH_CtlSendData+0x84>
  { /* Put the PID 0 */
      pdev->host.hc[hc_num].data_pid = HC_PID_DATA0;    
 8016974:	797b      	ldrb	r3, [r7, #5]
 8016976:	68fa      	ldr	r2, [r7, #12]
 8016978:	3315      	adds	r3, #21
 801697a:	015b      	lsls	r3, r3, #5
 801697c:	4413      	add	r3, r2
 801697e:	f503 738a 	add.w	r3, r3, #276	; 0x114
 8016982:	2200      	movs	r2, #0
 8016984:	701a      	strb	r2, [r3, #0]
 8016986:	e008      	b.n	801699a <USBH_CtlSendData+0x96>
  }
 else
 { /* Put the PID 1 */
      pdev->host.hc[hc_num].data_pid = HC_PID_DATA1 ;
 8016988:	797b      	ldrb	r3, [r7, #5]
 801698a:	68fa      	ldr	r2, [r7, #12]
 801698c:	3315      	adds	r3, #21
 801698e:	015b      	lsls	r3, r3, #5
 8016990:	4413      	add	r3, r2
 8016992:	f503 738a 	add.w	r3, r3, #276	; 0x114
 8016996:	2202      	movs	r2, #2
 8016998:	701a      	strb	r2, [r3, #0]
 }

  HCD_SubmitRequest (pdev , hc_num);   
 801699a:	797b      	ldrb	r3, [r7, #5]
 801699c:	4619      	mov	r1, r3
 801699e:	68f8      	ldr	r0, [r7, #12]
 80169a0:	f7fd fb0b 	bl	8013fba <HCD_SubmitRequest>
   
  return USBH_OK;
 80169a4:	2300      	movs	r3, #0
}
 80169a6:	4618      	mov	r0, r3
 80169a8:	3710      	adds	r7, #16
 80169aa:	46bd      	mov	sp, r7
 80169ac:	bd80      	pop	{r7, pc}

080169ae <USBH_CtlReceiveData>:
  */
USBH_Status USBH_CtlReceiveData(USB_OTG_CORE_HANDLE *pdev, 
                                uint8_t* buff, 
                                uint16_t length,
                                uint8_t hc_num)
{
 80169ae:	b580      	push	{r7, lr}
 80169b0:	b084      	sub	sp, #16
 80169b2:	af00      	add	r7, sp, #0
 80169b4:	60f8      	str	r0, [r7, #12]
 80169b6:	60b9      	str	r1, [r7, #8]
 80169b8:	4611      	mov	r1, r2
 80169ba:	461a      	mov	r2, r3
 80169bc:	460b      	mov	r3, r1
 80169be:	80fb      	strh	r3, [r7, #6]
 80169c0:	4613      	mov	r3, r2
 80169c2:	717b      	strb	r3, [r7, #5]

  pdev->host.hc[hc_num].ep_is_in = 1;
 80169c4:	797b      	ldrb	r3, [r7, #5]
 80169c6:	68fa      	ldr	r2, [r7, #12]
 80169c8:	015b      	lsls	r3, r3, #5
 80169ca:	4413      	add	r3, r2
 80169cc:	f203 33ae 	addw	r3, r3, #942	; 0x3ae
 80169d0:	2201      	movs	r2, #1
 80169d2:	701a      	strb	r2, [r3, #0]
  pdev->host.hc[hc_num].data_pid = HC_PID_DATA1;
 80169d4:	797b      	ldrb	r3, [r7, #5]
 80169d6:	68fa      	ldr	r2, [r7, #12]
 80169d8:	3315      	adds	r3, #21
 80169da:	015b      	lsls	r3, r3, #5
 80169dc:	4413      	add	r3, r2
 80169de:	f503 738a 	add.w	r3, r3, #276	; 0x114
 80169e2:	2202      	movs	r2, #2
 80169e4:	701a      	strb	r2, [r3, #0]
  pdev->host.hc[hc_num].xfer_buff = buff;
 80169e6:	797b      	ldrb	r3, [r7, #5]
 80169e8:	68fa      	ldr	r2, [r7, #12]
 80169ea:	3315      	adds	r3, #21
 80169ec:	015b      	lsls	r3, r3, #5
 80169ee:	4413      	add	r3, r2
 80169f0:	f503 738c 	add.w	r3, r3, #280	; 0x118
 80169f4:	68ba      	ldr	r2, [r7, #8]
 80169f6:	601a      	str	r2, [r3, #0]
  pdev->host.hc[hc_num].xfer_len = length;  
 80169f8:	797b      	ldrb	r3, [r7, #5]
 80169fa:	88fa      	ldrh	r2, [r7, #6]
 80169fc:	68f9      	ldr	r1, [r7, #12]
 80169fe:	015b      	lsls	r3, r3, #5
 8016a00:	440b      	add	r3, r1
 8016a02:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 8016a06:	601a      	str	r2, [r3, #0]

  HCD_SubmitRequest (pdev , hc_num);   
 8016a08:	797b      	ldrb	r3, [r7, #5]
 8016a0a:	4619      	mov	r1, r3
 8016a0c:	68f8      	ldr	r0, [r7, #12]
 8016a0e:	f7fd fad4 	bl	8013fba <HCD_SubmitRequest>
  
  return USBH_OK;
 8016a12:	2300      	movs	r3, #0
  
}
 8016a14:	4618      	mov	r0, r3
 8016a16:	3710      	adds	r7, #16
 8016a18:	46bd      	mov	sp, r7
 8016a1a:	bd80      	pop	{r7, pc}

08016a1c <USBH_BulkSendData>:
  */
USBH_Status USBH_BulkSendData ( USB_OTG_CORE_HANDLE *pdev, 
                                uint8_t *buff, 
                                uint16_t length,
                                uint8_t hc_num)
{ 
 8016a1c:	b580      	push	{r7, lr}
 8016a1e:	b084      	sub	sp, #16
 8016a20:	af00      	add	r7, sp, #0
 8016a22:	60f8      	str	r0, [r7, #12]
 8016a24:	60b9      	str	r1, [r7, #8]
 8016a26:	4611      	mov	r1, r2
 8016a28:	461a      	mov	r2, r3
 8016a2a:	460b      	mov	r3, r1
 8016a2c:	80fb      	strh	r3, [r7, #6]
 8016a2e:	4613      	mov	r3, r2
 8016a30:	717b      	strb	r3, [r7, #5]
  pdev->host.hc[hc_num].ep_is_in = 0;
 8016a32:	797b      	ldrb	r3, [r7, #5]
 8016a34:	68fa      	ldr	r2, [r7, #12]
 8016a36:	015b      	lsls	r3, r3, #5
 8016a38:	4413      	add	r3, r2
 8016a3a:	f203 33ae 	addw	r3, r3, #942	; 0x3ae
 8016a3e:	2200      	movs	r2, #0
 8016a40:	701a      	strb	r2, [r3, #0]
  pdev->host.hc[hc_num].xfer_buff = buff;
 8016a42:	797b      	ldrb	r3, [r7, #5]
 8016a44:	68fa      	ldr	r2, [r7, #12]
 8016a46:	3315      	adds	r3, #21
 8016a48:	015b      	lsls	r3, r3, #5
 8016a4a:	4413      	add	r3, r2
 8016a4c:	f503 738c 	add.w	r3, r3, #280	; 0x118
 8016a50:	68ba      	ldr	r2, [r7, #8]
 8016a52:	601a      	str	r2, [r3, #0]
  pdev->host.hc[hc_num].xfer_len = length;  
 8016a54:	797b      	ldrb	r3, [r7, #5]
 8016a56:	88fa      	ldrh	r2, [r7, #6]
 8016a58:	68f9      	ldr	r1, [r7, #12]
 8016a5a:	015b      	lsls	r3, r3, #5
 8016a5c:	440b      	add	r3, r1
 8016a5e:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 8016a62:	601a      	str	r2, [r3, #0]

 /* Set the Data Toggle bit as per the Flag */
  if ( pdev->host.hc[hc_num].toggle_out == 0)
 8016a64:	797b      	ldrb	r3, [r7, #5]
 8016a66:	68fa      	ldr	r2, [r7, #12]
 8016a68:	331e      	adds	r3, #30
 8016a6a:	015b      	lsls	r3, r3, #5
 8016a6c:	4413      	add	r3, r2
 8016a6e:	3305      	adds	r3, #5
 8016a70:	781b      	ldrb	r3, [r3, #0]
 8016a72:	2b00      	cmp	r3, #0
 8016a74:	d109      	bne.n	8016a8a <USBH_BulkSendData+0x6e>
  { /* Put the PID 0 */
      pdev->host.hc[hc_num].data_pid = HC_PID_DATA0;    
 8016a76:	797b      	ldrb	r3, [r7, #5]
 8016a78:	68fa      	ldr	r2, [r7, #12]
 8016a7a:	3315      	adds	r3, #21
 8016a7c:	015b      	lsls	r3, r3, #5
 8016a7e:	4413      	add	r3, r2
 8016a80:	f503 738a 	add.w	r3, r3, #276	; 0x114
 8016a84:	2200      	movs	r2, #0
 8016a86:	701a      	strb	r2, [r3, #0]
 8016a88:	e008      	b.n	8016a9c <USBH_BulkSendData+0x80>
  }
 else
 { /* Put the PID 1 */
      pdev->host.hc[hc_num].data_pid = HC_PID_DATA1 ;
 8016a8a:	797b      	ldrb	r3, [r7, #5]
 8016a8c:	68fa      	ldr	r2, [r7, #12]
 8016a8e:	3315      	adds	r3, #21
 8016a90:	015b      	lsls	r3, r3, #5
 8016a92:	4413      	add	r3, r2
 8016a94:	f503 738a 	add.w	r3, r3, #276	; 0x114
 8016a98:	2202      	movs	r2, #2
 8016a9a:	701a      	strb	r2, [r3, #0]
 }

  HCD_SubmitRequest (pdev , hc_num);   
 8016a9c:	797b      	ldrb	r3, [r7, #5]
 8016a9e:	4619      	mov	r1, r3
 8016aa0:	68f8      	ldr	r0, [r7, #12]
 8016aa2:	f7fd fa8a 	bl	8013fba <HCD_SubmitRequest>
  return USBH_OK;
 8016aa6:	2300      	movs	r3, #0
}
 8016aa8:	4618      	mov	r0, r3
 8016aaa:	3710      	adds	r7, #16
 8016aac:	46bd      	mov	sp, r7
 8016aae:	bd80      	pop	{r7, pc}

08016ab0 <USBH_BulkReceiveData>:
  */
USBH_Status USBH_BulkReceiveData( USB_OTG_CORE_HANDLE *pdev, 
                                uint8_t *buff, 
                                uint16_t length,
                                uint8_t hc_num)
{
 8016ab0:	b580      	push	{r7, lr}
 8016ab2:	b084      	sub	sp, #16
 8016ab4:	af00      	add	r7, sp, #0
 8016ab6:	60f8      	str	r0, [r7, #12]
 8016ab8:	60b9      	str	r1, [r7, #8]
 8016aba:	4611      	mov	r1, r2
 8016abc:	461a      	mov	r2, r3
 8016abe:	460b      	mov	r3, r1
 8016ac0:	80fb      	strh	r3, [r7, #6]
 8016ac2:	4613      	mov	r3, r2
 8016ac4:	717b      	strb	r3, [r7, #5]
  pdev->host.hc[hc_num].ep_is_in = 1;   
 8016ac6:	797b      	ldrb	r3, [r7, #5]
 8016ac8:	68fa      	ldr	r2, [r7, #12]
 8016aca:	015b      	lsls	r3, r3, #5
 8016acc:	4413      	add	r3, r2
 8016ace:	f203 33ae 	addw	r3, r3, #942	; 0x3ae
 8016ad2:	2201      	movs	r2, #1
 8016ad4:	701a      	strb	r2, [r3, #0]
  pdev->host.hc[hc_num].xfer_buff = buff;
 8016ad6:	797b      	ldrb	r3, [r7, #5]
 8016ad8:	68fa      	ldr	r2, [r7, #12]
 8016ada:	3315      	adds	r3, #21
 8016adc:	015b      	lsls	r3, r3, #5
 8016ade:	4413      	add	r3, r2
 8016ae0:	f503 738c 	add.w	r3, r3, #280	; 0x118
 8016ae4:	68ba      	ldr	r2, [r7, #8]
 8016ae6:	601a      	str	r2, [r3, #0]
  pdev->host.hc[hc_num].xfer_len = length;
 8016ae8:	797b      	ldrb	r3, [r7, #5]
 8016aea:	88fa      	ldrh	r2, [r7, #6]
 8016aec:	68f9      	ldr	r1, [r7, #12]
 8016aee:	015b      	lsls	r3, r3, #5
 8016af0:	440b      	add	r3, r1
 8016af2:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 8016af6:	601a      	str	r2, [r3, #0]
  

  if( pdev->host.hc[hc_num].toggle_in == 0)
 8016af8:	797b      	ldrb	r3, [r7, #5]
 8016afa:	68fa      	ldr	r2, [r7, #12]
 8016afc:	331e      	adds	r3, #30
 8016afe:	015b      	lsls	r3, r3, #5
 8016b00:	4413      	add	r3, r2
 8016b02:	3304      	adds	r3, #4
 8016b04:	781b      	ldrb	r3, [r3, #0]
 8016b06:	2b00      	cmp	r3, #0
 8016b08:	d109      	bne.n	8016b1e <USBH_BulkReceiveData+0x6e>
  {
    pdev->host.hc[hc_num].data_pid = HC_PID_DATA0;
 8016b0a:	797b      	ldrb	r3, [r7, #5]
 8016b0c:	68fa      	ldr	r2, [r7, #12]
 8016b0e:	3315      	adds	r3, #21
 8016b10:	015b      	lsls	r3, r3, #5
 8016b12:	4413      	add	r3, r2
 8016b14:	f503 738a 	add.w	r3, r3, #276	; 0x114
 8016b18:	2200      	movs	r2, #0
 8016b1a:	701a      	strb	r2, [r3, #0]
 8016b1c:	e008      	b.n	8016b30 <USBH_BulkReceiveData+0x80>
  }
  else
  {
    pdev->host.hc[hc_num].data_pid = HC_PID_DATA1;
 8016b1e:	797b      	ldrb	r3, [r7, #5]
 8016b20:	68fa      	ldr	r2, [r7, #12]
 8016b22:	3315      	adds	r3, #21
 8016b24:	015b      	lsls	r3, r3, #5
 8016b26:	4413      	add	r3, r2
 8016b28:	f503 738a 	add.w	r3, r3, #276	; 0x114
 8016b2c:	2202      	movs	r2, #2
 8016b2e:	701a      	strb	r2, [r3, #0]
  }

  HCD_SubmitRequest (pdev , hc_num);  
 8016b30:	797b      	ldrb	r3, [r7, #5]
 8016b32:	4619      	mov	r1, r3
 8016b34:	68f8      	ldr	r0, [r7, #12]
 8016b36:	f7fd fa40 	bl	8013fba <HCD_SubmitRequest>
  return USBH_OK;
 8016b3a:	2300      	movs	r3, #0
}
 8016b3c:	4618      	mov	r0, r3
 8016b3e:	3710      	adds	r7, #16
 8016b40:	46bd      	mov	sp, r7
 8016b42:	bd80      	pop	{r7, pc}

08016b44 <USBH_InterruptReceiveData>:
  */
USBH_Status USBH_InterruptReceiveData( USB_OTG_CORE_HANDLE *pdev, 
                                uint8_t *buff, 
                                uint8_t length,
                                uint8_t hc_num)
{
 8016b44:	b580      	push	{r7, lr}
 8016b46:	b084      	sub	sp, #16
 8016b48:	af00      	add	r7, sp, #0
 8016b4a:	60f8      	str	r0, [r7, #12]
 8016b4c:	60b9      	str	r1, [r7, #8]
 8016b4e:	4611      	mov	r1, r2
 8016b50:	461a      	mov	r2, r3
 8016b52:	460b      	mov	r3, r1
 8016b54:	71fb      	strb	r3, [r7, #7]
 8016b56:	4613      	mov	r3, r2
 8016b58:	71bb      	strb	r3, [r7, #6]

  pdev->host.hc[hc_num].ep_is_in = 1;  
 8016b5a:	79bb      	ldrb	r3, [r7, #6]
 8016b5c:	68fa      	ldr	r2, [r7, #12]
 8016b5e:	015b      	lsls	r3, r3, #5
 8016b60:	4413      	add	r3, r2
 8016b62:	f203 33ae 	addw	r3, r3, #942	; 0x3ae
 8016b66:	2201      	movs	r2, #1
 8016b68:	701a      	strb	r2, [r3, #0]
  pdev->host.hc[hc_num].xfer_buff = buff;
 8016b6a:	79bb      	ldrb	r3, [r7, #6]
 8016b6c:	68fa      	ldr	r2, [r7, #12]
 8016b6e:	3315      	adds	r3, #21
 8016b70:	015b      	lsls	r3, r3, #5
 8016b72:	4413      	add	r3, r2
 8016b74:	f503 738c 	add.w	r3, r3, #280	; 0x118
 8016b78:	68ba      	ldr	r2, [r7, #8]
 8016b7a:	601a      	str	r2, [r3, #0]
  pdev->host.hc[hc_num].xfer_len = length;
 8016b7c:	79bb      	ldrb	r3, [r7, #6]
 8016b7e:	79fa      	ldrb	r2, [r7, #7]
 8016b80:	68f9      	ldr	r1, [r7, #12]
 8016b82:	015b      	lsls	r3, r3, #5
 8016b84:	440b      	add	r3, r1
 8016b86:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 8016b8a:	601a      	str	r2, [r3, #0]
  

  
  if(pdev->host.hc[hc_num].toggle_in == 0)
 8016b8c:	79bb      	ldrb	r3, [r7, #6]
 8016b8e:	68fa      	ldr	r2, [r7, #12]
 8016b90:	331e      	adds	r3, #30
 8016b92:	015b      	lsls	r3, r3, #5
 8016b94:	4413      	add	r3, r2
 8016b96:	3304      	adds	r3, #4
 8016b98:	781b      	ldrb	r3, [r3, #0]
 8016b9a:	2b00      	cmp	r3, #0
 8016b9c:	d109      	bne.n	8016bb2 <USBH_InterruptReceiveData+0x6e>
  {
    pdev->host.hc[hc_num].data_pid = HC_PID_DATA0;
 8016b9e:	79bb      	ldrb	r3, [r7, #6]
 8016ba0:	68fa      	ldr	r2, [r7, #12]
 8016ba2:	3315      	adds	r3, #21
 8016ba4:	015b      	lsls	r3, r3, #5
 8016ba6:	4413      	add	r3, r2
 8016ba8:	f503 738a 	add.w	r3, r3, #276	; 0x114
 8016bac:	2200      	movs	r2, #0
 8016bae:	701a      	strb	r2, [r3, #0]
 8016bb0:	e008      	b.n	8016bc4 <USBH_InterruptReceiveData+0x80>
  }
  else
  {
    pdev->host.hc[hc_num].data_pid = HC_PID_DATA1;
 8016bb2:	79bb      	ldrb	r3, [r7, #6]
 8016bb4:	68fa      	ldr	r2, [r7, #12]
 8016bb6:	3315      	adds	r3, #21
 8016bb8:	015b      	lsls	r3, r3, #5
 8016bba:	4413      	add	r3, r2
 8016bbc:	f503 738a 	add.w	r3, r3, #276	; 0x114
 8016bc0:	2202      	movs	r2, #2
 8016bc2:	701a      	strb	r2, [r3, #0]
  }

  /* toggle DATA PID */
  pdev->host.hc[hc_num].toggle_in ^= 1;  
 8016bc4:	79bb      	ldrb	r3, [r7, #6]
 8016bc6:	68fa      	ldr	r2, [r7, #12]
 8016bc8:	331e      	adds	r3, #30
 8016bca:	015b      	lsls	r3, r3, #5
 8016bcc:	4413      	add	r3, r2
 8016bce:	3304      	adds	r3, #4
 8016bd0:	781a      	ldrb	r2, [r3, #0]
 8016bd2:	79bb      	ldrb	r3, [r7, #6]
 8016bd4:	f082 0201 	eor.w	r2, r2, #1
 8016bd8:	b2d1      	uxtb	r1, r2
 8016bda:	68fa      	ldr	r2, [r7, #12]
 8016bdc:	331e      	adds	r3, #30
 8016bde:	015b      	lsls	r3, r3, #5
 8016be0:	4413      	add	r3, r2
 8016be2:	3304      	adds	r3, #4
 8016be4:	460a      	mov	r2, r1
 8016be6:	701a      	strb	r2, [r3, #0]
  
  HCD_SubmitRequest (pdev , hc_num);  
 8016be8:	79bb      	ldrb	r3, [r7, #6]
 8016bea:	4619      	mov	r1, r3
 8016bec:	68f8      	ldr	r0, [r7, #12]
 8016bee:	f7fd f9e4 	bl	8013fba <HCD_SubmitRequest>
  
  return USBH_OK;
 8016bf2:	2300      	movs	r3, #0
}
 8016bf4:	4618      	mov	r0, r3
 8016bf6:	3710      	adds	r7, #16
 8016bf8:	46bd      	mov	sp, r7
 8016bfa:	bd80      	pop	{r7, pc}

08016bfc <USBH_InterruptSendData>:
  */
USBH_Status USBH_InterruptSendData( USB_OTG_CORE_HANDLE *pdev, 
                                uint8_t *buff, 
                                uint8_t length,
                                uint8_t hc_num)
{
 8016bfc:	b580      	push	{r7, lr}
 8016bfe:	b084      	sub	sp, #16
 8016c00:	af00      	add	r7, sp, #0
 8016c02:	60f8      	str	r0, [r7, #12]
 8016c04:	60b9      	str	r1, [r7, #8]
 8016c06:	4611      	mov	r1, r2
 8016c08:	461a      	mov	r2, r3
 8016c0a:	460b      	mov	r3, r1
 8016c0c:	71fb      	strb	r3, [r7, #7]
 8016c0e:	4613      	mov	r3, r2
 8016c10:	71bb      	strb	r3, [r7, #6]

  pdev->host.hc[hc_num].ep_is_in = 0;  
 8016c12:	79bb      	ldrb	r3, [r7, #6]
 8016c14:	68fa      	ldr	r2, [r7, #12]
 8016c16:	015b      	lsls	r3, r3, #5
 8016c18:	4413      	add	r3, r2
 8016c1a:	f203 33ae 	addw	r3, r3, #942	; 0x3ae
 8016c1e:	2200      	movs	r2, #0
 8016c20:	701a      	strb	r2, [r3, #0]
  pdev->host.hc[hc_num].xfer_buff = buff;
 8016c22:	79bb      	ldrb	r3, [r7, #6]
 8016c24:	68fa      	ldr	r2, [r7, #12]
 8016c26:	3315      	adds	r3, #21
 8016c28:	015b      	lsls	r3, r3, #5
 8016c2a:	4413      	add	r3, r2
 8016c2c:	f503 738c 	add.w	r3, r3, #280	; 0x118
 8016c30:	68ba      	ldr	r2, [r7, #8]
 8016c32:	601a      	str	r2, [r3, #0]
  pdev->host.hc[hc_num].xfer_len = length;
 8016c34:	79bb      	ldrb	r3, [r7, #6]
 8016c36:	79fa      	ldrb	r2, [r7, #7]
 8016c38:	68f9      	ldr	r1, [r7, #12]
 8016c3a:	015b      	lsls	r3, r3, #5
 8016c3c:	440b      	add	r3, r1
 8016c3e:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 8016c42:	601a      	str	r2, [r3, #0]
  
  if(pdev->host.hc[hc_num].toggle_in == 0)
 8016c44:	79bb      	ldrb	r3, [r7, #6]
 8016c46:	68fa      	ldr	r2, [r7, #12]
 8016c48:	331e      	adds	r3, #30
 8016c4a:	015b      	lsls	r3, r3, #5
 8016c4c:	4413      	add	r3, r2
 8016c4e:	3304      	adds	r3, #4
 8016c50:	781b      	ldrb	r3, [r3, #0]
 8016c52:	2b00      	cmp	r3, #0
 8016c54:	d109      	bne.n	8016c6a <USBH_InterruptSendData+0x6e>
  {
    pdev->host.hc[hc_num].data_pid = HC_PID_DATA0;
 8016c56:	79bb      	ldrb	r3, [r7, #6]
 8016c58:	68fa      	ldr	r2, [r7, #12]
 8016c5a:	3315      	adds	r3, #21
 8016c5c:	015b      	lsls	r3, r3, #5
 8016c5e:	4413      	add	r3, r2
 8016c60:	f503 738a 	add.w	r3, r3, #276	; 0x114
 8016c64:	2200      	movs	r2, #0
 8016c66:	701a      	strb	r2, [r3, #0]
 8016c68:	e008      	b.n	8016c7c <USBH_InterruptSendData+0x80>
  }
  else
  {
    pdev->host.hc[hc_num].data_pid = HC_PID_DATA1;
 8016c6a:	79bb      	ldrb	r3, [r7, #6]
 8016c6c:	68fa      	ldr	r2, [r7, #12]
 8016c6e:	3315      	adds	r3, #21
 8016c70:	015b      	lsls	r3, r3, #5
 8016c72:	4413      	add	r3, r2
 8016c74:	f503 738a 	add.w	r3, r3, #276	; 0x114
 8016c78:	2202      	movs	r2, #2
 8016c7a:	701a      	strb	r2, [r3, #0]
  }

  pdev->host.hc[hc_num].toggle_in ^= 1;  
 8016c7c:	79bb      	ldrb	r3, [r7, #6]
 8016c7e:	68fa      	ldr	r2, [r7, #12]
 8016c80:	331e      	adds	r3, #30
 8016c82:	015b      	lsls	r3, r3, #5
 8016c84:	4413      	add	r3, r2
 8016c86:	3304      	adds	r3, #4
 8016c88:	781a      	ldrb	r2, [r3, #0]
 8016c8a:	79bb      	ldrb	r3, [r7, #6]
 8016c8c:	f082 0201 	eor.w	r2, r2, #1
 8016c90:	b2d1      	uxtb	r1, r2
 8016c92:	68fa      	ldr	r2, [r7, #12]
 8016c94:	331e      	adds	r3, #30
 8016c96:	015b      	lsls	r3, r3, #5
 8016c98:	4413      	add	r3, r2
 8016c9a:	3304      	adds	r3, #4
 8016c9c:	460a      	mov	r2, r1
 8016c9e:	701a      	strb	r2, [r3, #0]
  
  HCD_SubmitRequest (pdev , hc_num);  
 8016ca0:	79bb      	ldrb	r3, [r7, #6]
 8016ca2:	4619      	mov	r1, r3
 8016ca4:	68f8      	ldr	r0, [r7, #12]
 8016ca6:	f7fd f988 	bl	8013fba <HCD_SubmitRequest>
  
  return USBH_OK;
 8016caa:	2300      	movs	r3, #0
}
 8016cac:	4618      	mov	r0, r3
 8016cae:	3710      	adds	r7, #16
 8016cb0:	46bd      	mov	sp, r7
 8016cb2:	bd80      	pop	{r7, pc}

08016cb4 <USBH_SubmitSetupRequest>:
  * @retval Status. 
*/
static USBH_Status USBH_SubmitSetupRequest(USBH_HOST *phost,
                                           uint8_t* buff, 
                                           uint16_t length)
{
 8016cb4:	b480      	push	{r7}
 8016cb6:	b085      	sub	sp, #20
 8016cb8:	af00      	add	r7, sp, #0
 8016cba:	60f8      	str	r0, [r7, #12]
 8016cbc:	60b9      	str	r1, [r7, #8]
 8016cbe:	4613      	mov	r3, r2
 8016cc0:	80fb      	strh	r3, [r7, #6]
  
  /* Save Global State */
  phost->gStateBkp =   phost->gState; 
 8016cc2:	68fb      	ldr	r3, [r7, #12]
 8016cc4:	781a      	ldrb	r2, [r3, #0]
 8016cc6:	68fb      	ldr	r3, [r7, #12]
 8016cc8:	705a      	strb	r2, [r3, #1]
  
  /* Prepare the Transactions */
  phost->gState = HOST_CTRL_XFER;
 8016cca:	68fb      	ldr	r3, [r7, #12]
 8016ccc:	2207      	movs	r2, #7
 8016cce:	701a      	strb	r2, [r3, #0]
  phost->Control.buff = buff; 
 8016cd0:	68fb      	ldr	r3, [r7, #12]
 8016cd2:	68ba      	ldr	r2, [r7, #8]
 8016cd4:	609a      	str	r2, [r3, #8]
  phost->Control.length = length;
 8016cd6:	68fb      	ldr	r3, [r7, #12]
 8016cd8:	88fa      	ldrh	r2, [r7, #6]
 8016cda:	819a      	strh	r2, [r3, #12]
  phost->Control.state = CTRL_SETUP;  
 8016cdc:	68fb      	ldr	r3, [r7, #12]
 8016cde:	2201      	movs	r2, #1
 8016ce0:	771a      	strb	r2, [r3, #28]

  return USBH_OK;  
 8016ce2:	2300      	movs	r3, #0
}
 8016ce4:	4618      	mov	r0, r3
 8016ce6:	3714      	adds	r7, #20
 8016ce8:	46bd      	mov	sp, r7
 8016cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016cee:	4770      	bx	lr

08016cf0 <USBH_IsocReceiveData>:
  */
USBH_Status USBH_IsocReceiveData( USB_OTG_CORE_HANDLE *pdev, 
                                uint8_t *buff, 
                                uint32_t length,
                                uint8_t hc_num)
{    
 8016cf0:	b580      	push	{r7, lr}
 8016cf2:	b084      	sub	sp, #16
 8016cf4:	af00      	add	r7, sp, #0
 8016cf6:	60f8      	str	r0, [r7, #12]
 8016cf8:	60b9      	str	r1, [r7, #8]
 8016cfa:	607a      	str	r2, [r7, #4]
 8016cfc:	70fb      	strb	r3, [r7, #3]
  
  pdev->host.hc[hc_num].ep_is_in = 1;  
 8016cfe:	78fb      	ldrb	r3, [r7, #3]
 8016d00:	68fa      	ldr	r2, [r7, #12]
 8016d02:	015b      	lsls	r3, r3, #5
 8016d04:	4413      	add	r3, r2
 8016d06:	f203 33ae 	addw	r3, r3, #942	; 0x3ae
 8016d0a:	2201      	movs	r2, #1
 8016d0c:	701a      	strb	r2, [r3, #0]
  pdev->host.hc[hc_num].xfer_buff = buff;
 8016d0e:	78fb      	ldrb	r3, [r7, #3]
 8016d10:	68fa      	ldr	r2, [r7, #12]
 8016d12:	3315      	adds	r3, #21
 8016d14:	015b      	lsls	r3, r3, #5
 8016d16:	4413      	add	r3, r2
 8016d18:	f503 738c 	add.w	r3, r3, #280	; 0x118
 8016d1c:	68ba      	ldr	r2, [r7, #8]
 8016d1e:	601a      	str	r2, [r3, #0]
  pdev->host.hc[hc_num].xfer_len = length;
 8016d20:	78fb      	ldrb	r3, [r7, #3]
 8016d22:	68fa      	ldr	r2, [r7, #12]
 8016d24:	015b      	lsls	r3, r3, #5
 8016d26:	4413      	add	r3, r2
 8016d28:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 8016d2c:	687a      	ldr	r2, [r7, #4]
 8016d2e:	601a      	str	r2, [r3, #0]
  pdev->host.hc[hc_num].data_pid = HC_PID_DATA0;
 8016d30:	78fb      	ldrb	r3, [r7, #3]
 8016d32:	68fa      	ldr	r2, [r7, #12]
 8016d34:	3315      	adds	r3, #21
 8016d36:	015b      	lsls	r3, r3, #5
 8016d38:	4413      	add	r3, r2
 8016d3a:	f503 738a 	add.w	r3, r3, #276	; 0x114
 8016d3e:	2200      	movs	r2, #0
 8016d40:	701a      	strb	r2, [r3, #0]
  

  HCD_SubmitRequest (pdev , hc_num);  
 8016d42:	78fb      	ldrb	r3, [r7, #3]
 8016d44:	4619      	mov	r1, r3
 8016d46:	68f8      	ldr	r0, [r7, #12]
 8016d48:	f7fd f937 	bl	8013fba <HCD_SubmitRequest>
  
  return USBH_OK;
 8016d4c:	2300      	movs	r3, #0
}
 8016d4e:	4618      	mov	r0, r3
 8016d50:	3710      	adds	r7, #16
 8016d52:	46bd      	mov	sp, r7
 8016d54:	bd80      	pop	{r7, pc}

08016d56 <USBH_IsocSendData>:
  */
USBH_Status USBH_IsocSendData( USB_OTG_CORE_HANDLE *pdev, 
                                uint8_t *buff, 
                                uint32_t length,
                                uint8_t hc_num)
{
 8016d56:	b580      	push	{r7, lr}
 8016d58:	b084      	sub	sp, #16
 8016d5a:	af00      	add	r7, sp, #0
 8016d5c:	60f8      	str	r0, [r7, #12]
 8016d5e:	60b9      	str	r1, [r7, #8]
 8016d60:	607a      	str	r2, [r7, #4]
 8016d62:	70fb      	strb	r3, [r7, #3]
  
  pdev->host.hc[hc_num].ep_is_in = 0;  
 8016d64:	78fb      	ldrb	r3, [r7, #3]
 8016d66:	68fa      	ldr	r2, [r7, #12]
 8016d68:	015b      	lsls	r3, r3, #5
 8016d6a:	4413      	add	r3, r2
 8016d6c:	f203 33ae 	addw	r3, r3, #942	; 0x3ae
 8016d70:	2200      	movs	r2, #0
 8016d72:	701a      	strb	r2, [r3, #0]
  pdev->host.hc[hc_num].xfer_buff = buff;
 8016d74:	78fb      	ldrb	r3, [r7, #3]
 8016d76:	68fa      	ldr	r2, [r7, #12]
 8016d78:	3315      	adds	r3, #21
 8016d7a:	015b      	lsls	r3, r3, #5
 8016d7c:	4413      	add	r3, r2
 8016d7e:	f503 738c 	add.w	r3, r3, #280	; 0x118
 8016d82:	68ba      	ldr	r2, [r7, #8]
 8016d84:	601a      	str	r2, [r3, #0]
  pdev->host.hc[hc_num].xfer_len = length;
 8016d86:	78fb      	ldrb	r3, [r7, #3]
 8016d88:	68fa      	ldr	r2, [r7, #12]
 8016d8a:	015b      	lsls	r3, r3, #5
 8016d8c:	4413      	add	r3, r2
 8016d8e:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 8016d92:	687a      	ldr	r2, [r7, #4]
 8016d94:	601a      	str	r2, [r3, #0]
  pdev->host.hc[hc_num].data_pid = HC_PID_DATA0;
 8016d96:	78fb      	ldrb	r3, [r7, #3]
 8016d98:	68fa      	ldr	r2, [r7, #12]
 8016d9a:	3315      	adds	r3, #21
 8016d9c:	015b      	lsls	r3, r3, #5
 8016d9e:	4413      	add	r3, r2
 8016da0:	f503 738a 	add.w	r3, r3, #276	; 0x114
 8016da4:	2200      	movs	r2, #0
 8016da6:	701a      	strb	r2, [r3, #0]
  
  HCD_SubmitRequest (pdev , hc_num);  
 8016da8:	78fb      	ldrb	r3, [r7, #3]
 8016daa:	4619      	mov	r1, r3
 8016dac:	68f8      	ldr	r0, [r7, #12]
 8016dae:	f7fd f904 	bl	8013fba <HCD_SubmitRequest>
  
  return USBH_OK;
 8016db2:	2300      	movs	r3, #0
}
 8016db4:	4618      	mov	r0, r3
 8016db6:	3710      	adds	r7, #16
 8016db8:	46bd      	mov	sp, r7
 8016dba:	bd80      	pop	{r7, pc}

08016dbc <USBH_Get_DevDesc>:
* @retval Status
*/
USBH_Status USBH_Get_DevDesc(USB_OTG_CORE_HANDLE *pdev,
                             USBH_HOST *phost,
                             uint8_t length)
{
 8016dbc:	b580      	push	{r7, lr}
 8016dbe:	b088      	sub	sp, #32
 8016dc0:	af02      	add	r7, sp, #8
 8016dc2:	60f8      	str	r0, [r7, #12]
 8016dc4:	60b9      	str	r1, [r7, #8]
 8016dc6:	4613      	mov	r3, r2
 8016dc8:	71fb      	strb	r3, [r7, #7]
  
  if((status = USBH_GetDescriptor(pdev, 
                                  phost,
                                  USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,                          
                                  USB_DESC_DEVICE, 
                                  pdev->host.Rx_Buffer,
 8016dca:	68fb      	ldr	r3, [r7, #12]
 8016dcc:	f503 7388 	add.w	r3, r3, #272	; 0x110
  if((status = USBH_GetDescriptor(pdev, 
 8016dd0:	79fa      	ldrb	r2, [r7, #7]
 8016dd2:	b292      	uxth	r2, r2
 8016dd4:	9201      	str	r2, [sp, #4]
 8016dd6:	9300      	str	r3, [sp, #0]
 8016dd8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8016ddc:	2200      	movs	r2, #0
 8016dde:	68b9      	ldr	r1, [r7, #8]
 8016de0:	68f8      	ldr	r0, [r7, #12]
 8016de2:	f000 f885 	bl	8016ef0 <USBH_GetDescriptor>
 8016de6:	4603      	mov	r3, r0
 8016de8:	75fb      	strb	r3, [r7, #23]
 8016dea:	7dfb      	ldrb	r3, [r7, #23]
 8016dec:	2b00      	cmp	r3, #0
 8016dee:	d10a      	bne.n	8016e06 <USBH_Get_DevDesc+0x4a>
                                  length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */       
    USBH_ParseDevDesc(&phost->device_prop.Dev_Desc, pdev->host.Rx_Buffer, length);
 8016df0:	68bb      	ldr	r3, [r7, #8]
 8016df2:	f103 0022 	add.w	r0, r3, #34	; 0x22
 8016df6:	68fb      	ldr	r3, [r7, #12]
 8016df8:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8016dfc:	79fa      	ldrb	r2, [r7, #7]
 8016dfe:	b292      	uxth	r2, r2
 8016e00:	4619      	mov	r1, r3
 8016e02:	f000 f94d 	bl	80170a0 <USBH_ParseDevDesc>
  }
  return status;      
 8016e06:	7dfb      	ldrb	r3, [r7, #23]
}
 8016e08:	4618      	mov	r0, r3
 8016e0a:	3718      	adds	r7, #24
 8016e0c:	46bd      	mov	sp, r7
 8016e0e:	bd80      	pop	{r7, pc}

08016e10 <USBH_Get_CfgDesc>:
*/
USBH_Status USBH_Get_CfgDesc(USB_OTG_CORE_HANDLE *pdev, 
                             USBH_HOST           *phost,                      
                             uint16_t length)

{
 8016e10:	b590      	push	{r4, r7, lr}
 8016e12:	b089      	sub	sp, #36	; 0x24
 8016e14:	af02      	add	r7, sp, #8
 8016e16:	60f8      	str	r0, [r7, #12]
 8016e18:	60b9      	str	r1, [r7, #8]
 8016e1a:	4613      	mov	r3, r2
 8016e1c:	80fb      	strh	r3, [r7, #6]
  USBH_Status status;
  uint16_t index = 0;
 8016e1e:	2300      	movs	r3, #0
 8016e20:	82fb      	strh	r3, [r7, #22]
  
  if((status = USBH_GetDescriptor(pdev,
                                  phost,
                                  USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,                          
                                  USB_DESC_CONFIGURATION, 
                                  pdev->host.Rx_Buffer,
 8016e22:	68fb      	ldr	r3, [r7, #12]
 8016e24:	f503 7388 	add.w	r3, r3, #272	; 0x110
  if((status = USBH_GetDescriptor(pdev,
 8016e28:	88fa      	ldrh	r2, [r7, #6]
 8016e2a:	9201      	str	r2, [sp, #4]
 8016e2c:	9300      	str	r3, [sp, #0]
 8016e2e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8016e32:	2200      	movs	r2, #0
 8016e34:	68b9      	ldr	r1, [r7, #8]
 8016e36:	68f8      	ldr	r0, [r7, #12]
 8016e38:	f000 f85a 	bl	8016ef0 <USBH_GetDescriptor>
 8016e3c:	4603      	mov	r3, r0
 8016e3e:	757b      	strb	r3, [r7, #21]
 8016e40:	7d7b      	ldrb	r3, [r7, #21]
 8016e42:	2b00      	cmp	r3, #0
 8016e44:	d120      	bne.n	8016e88 <USBH_Get_CfgDesc+0x78>
                                  length)) == USBH_OK)
  {
    /*save Cfg descriptor for class parsing usage */
    for( ; index < length ; index ++)
 8016e46:	e00a      	b.n	8016e5e <USBH_Get_CfgDesc+0x4e>
    {
      USBH_CfgDesc[index] = pdev->host.Rx_Buffer[index];
 8016e48:	8afa      	ldrh	r2, [r7, #22]
 8016e4a:	8afb      	ldrh	r3, [r7, #22]
 8016e4c:	68f9      	ldr	r1, [r7, #12]
 8016e4e:	440a      	add	r2, r1
 8016e50:	f892 1110 	ldrb.w	r1, [r2, #272]	; 0x110
 8016e54:	4a0f      	ldr	r2, [pc, #60]	; (8016e94 <USBH_Get_CfgDesc+0x84>)
 8016e56:	54d1      	strb	r1, [r2, r3]
    for( ; index < length ; index ++)
 8016e58:	8afb      	ldrh	r3, [r7, #22]
 8016e5a:	3301      	adds	r3, #1
 8016e5c:	82fb      	strh	r3, [r7, #22]
 8016e5e:	8afa      	ldrh	r2, [r7, #22]
 8016e60:	88fb      	ldrh	r3, [r7, #6]
 8016e62:	429a      	cmp	r2, r3
 8016e64:	d3f0      	bcc.n	8016e48 <USBH_Get_CfgDesc+0x38>
    }
    
    /* Commands successfully sent and Response Received  */       
    USBH_ParseCfgDesc (&phost->device_prop.Cfg_Desc,
 8016e66:	68bb      	ldr	r3, [r7, #8]
 8016e68:	f103 0034 	add.w	r0, r3, #52	; 0x34
                       phost->device_prop.Itf_Desc,
 8016e6c:	68bb      	ldr	r3, [r7, #8]
 8016e6e:	f103 013e 	add.w	r1, r3, #62	; 0x3e
                       phost->device_prop.Ep_Desc, 
 8016e72:	68bb      	ldr	r3, [r7, #8]
 8016e74:	f103 0250 	add.w	r2, r3, #80	; 0x50
                       pdev->host.Rx_Buffer,
 8016e78:	68fb      	ldr	r3, [r7, #12]
 8016e7a:	f503 7488 	add.w	r4, r3, #272	; 0x110
    USBH_ParseCfgDesc (&phost->device_prop.Cfg_Desc,
 8016e7e:	88fb      	ldrh	r3, [r7, #6]
 8016e80:	9300      	str	r3, [sp, #0]
 8016e82:	4623      	mov	r3, r4
 8016e84:	f000 f980 	bl	8017188 <USBH_ParseCfgDesc>
                       length); 
    
  }
  return status;
 8016e88:	7d7b      	ldrb	r3, [r7, #21]
}
 8016e8a:	4618      	mov	r0, r3
 8016e8c:	371c      	adds	r7, #28
 8016e8e:	46bd      	mov	sp, r7
 8016e90:	bd90      	pop	{r4, r7, pc}
 8016e92:	bf00      	nop
 8016e94:	2000353c 	.word	0x2000353c

08016e98 <USBH_Get_StringDesc>:
USBH_Status USBH_Get_StringDesc(USB_OTG_CORE_HANDLE *pdev,
                                USBH_HOST *phost,
                                uint8_t string_index, 
                                uint8_t *buff, 
                                uint16_t length)
{
 8016e98:	b580      	push	{r7, lr}
 8016e9a:	b088      	sub	sp, #32
 8016e9c:	af02      	add	r7, sp, #8
 8016e9e:	60f8      	str	r0, [r7, #12]
 8016ea0:	60b9      	str	r1, [r7, #8]
 8016ea2:	603b      	str	r3, [r7, #0]
 8016ea4:	4613      	mov	r3, r2
 8016ea6:	71fb      	strb	r3, [r7, #7]
  USBH_Status status;
  
  if((status = USBH_GetDescriptor(pdev,
                                  phost,
                                  USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,                                    
                                  USB_DESC_STRING | string_index, 
 8016ea8:	79fb      	ldrb	r3, [r7, #7]
 8016eaa:	b21b      	sxth	r3, r3
 8016eac:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8016eb0:	b21b      	sxth	r3, r3
  if((status = USBH_GetDescriptor(pdev,
 8016eb2:	b299      	uxth	r1, r3
                                  pdev->host.Rx_Buffer,
 8016eb4:	68fb      	ldr	r3, [r7, #12]
 8016eb6:	f503 7388 	add.w	r3, r3, #272	; 0x110
  if((status = USBH_GetDescriptor(pdev,
 8016eba:	8c3a      	ldrh	r2, [r7, #32]
 8016ebc:	9201      	str	r2, [sp, #4]
 8016ebe:	9300      	str	r3, [sp, #0]
 8016ec0:	460b      	mov	r3, r1
 8016ec2:	2200      	movs	r2, #0
 8016ec4:	68b9      	ldr	r1, [r7, #8]
 8016ec6:	68f8      	ldr	r0, [r7, #12]
 8016ec8:	f000 f812 	bl	8016ef0 <USBH_GetDescriptor>
 8016ecc:	4603      	mov	r3, r0
 8016ece:	75fb      	strb	r3, [r7, #23]
 8016ed0:	7dfb      	ldrb	r3, [r7, #23]
 8016ed2:	2b00      	cmp	r3, #0
 8016ed4:	d107      	bne.n	8016ee6 <USBH_Get_StringDesc+0x4e>
                                  length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */       
    USBH_ParseStringDesc(pdev->host.Rx_Buffer,buff, length);    
 8016ed6:	68fb      	ldr	r3, [r7, #12]
 8016ed8:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8016edc:	8c3a      	ldrh	r2, [r7, #32]
 8016ede:	6839      	ldr	r1, [r7, #0]
 8016ee0:	4618      	mov	r0, r3
 8016ee2:	f000 fa90 	bl	8017406 <USBH_ParseStringDesc>
  }
  return status;
 8016ee6:	7dfb      	ldrb	r3, [r7, #23]
}
 8016ee8:	4618      	mov	r0, r3
 8016eea:	3718      	adds	r7, #24
 8016eec:	46bd      	mov	sp, r7
 8016eee:	bd80      	pop	{r7, pc}

08016ef0 <USBH_GetDescriptor>:
                               USBH_HOST           *phost,                                
                               uint8_t  req_type,
                               uint16_t value_idx, 
                               uint8_t* buff, 
                               uint16_t length )
{ 
 8016ef0:	b580      	push	{r7, lr}
 8016ef2:	b084      	sub	sp, #16
 8016ef4:	af00      	add	r7, sp, #0
 8016ef6:	60f8      	str	r0, [r7, #12]
 8016ef8:	60b9      	str	r1, [r7, #8]
 8016efa:	4611      	mov	r1, r2
 8016efc:	461a      	mov	r2, r3
 8016efe:	460b      	mov	r3, r1
 8016f00:	71fb      	strb	r3, [r7, #7]
 8016f02:	4613      	mov	r3, r2
 8016f04:	80bb      	strh	r3, [r7, #4]
  phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8016f06:	79fb      	ldrb	r3, [r7, #7]
 8016f08:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8016f0c:	b2da      	uxtb	r2, r3
 8016f0e:	68bb      	ldr	r3, [r7, #8]
 8016f10:	751a      	strb	r2, [r3, #20]
  phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8016f12:	68bb      	ldr	r3, [r7, #8]
 8016f14:	2206      	movs	r2, #6
 8016f16:	755a      	strb	r2, [r3, #21]
  phost->Control.setup.b.wValue.w = value_idx;
 8016f18:	68bb      	ldr	r3, [r7, #8]
 8016f1a:	88ba      	ldrh	r2, [r7, #4]
 8016f1c:	82da      	strh	r2, [r3, #22]
  
  if ((value_idx & 0xff00) == USB_DESC_STRING)
 8016f1e:	88bb      	ldrh	r3, [r7, #4]
 8016f20:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8016f24:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8016f28:	d104      	bne.n	8016f34 <USBH_GetDescriptor+0x44>
  {
    phost->Control.setup.b.wIndex.w = 0x0409;
 8016f2a:	68bb      	ldr	r3, [r7, #8]
 8016f2c:	f240 4209 	movw	r2, #1033	; 0x409
 8016f30:	831a      	strh	r2, [r3, #24]
 8016f32:	e002      	b.n	8016f3a <USBH_GetDescriptor+0x4a>
  }
  else
  {
    phost->Control.setup.b.wIndex.w = 0;
 8016f34:	68bb      	ldr	r3, [r7, #8]
 8016f36:	2200      	movs	r2, #0
 8016f38:	831a      	strh	r2, [r3, #24]
  }
  phost->Control.setup.b.wLength.w = length;           
 8016f3a:	68bb      	ldr	r3, [r7, #8]
 8016f3c:	8bba      	ldrh	r2, [r7, #28]
 8016f3e:	835a      	strh	r2, [r3, #26]
  return USBH_CtlReq(pdev, phost, buff , length );     
 8016f40:	8bbb      	ldrh	r3, [r7, #28]
 8016f42:	69ba      	ldr	r2, [r7, #24]
 8016f44:	68b9      	ldr	r1, [r7, #8]
 8016f46:	68f8      	ldr	r0, [r7, #12]
 8016f48:	f7ff fc66 	bl	8016818 <USBH_CtlReq>
 8016f4c:	4603      	mov	r3, r0
}
 8016f4e:	4618      	mov	r0, r3
 8016f50:	3710      	adds	r7, #16
 8016f52:	46bd      	mov	sp, r7
 8016f54:	bd80      	pop	{r7, pc}

08016f56 <USBH_SetAddress>:
* @retval Status
*/
USBH_Status USBH_SetAddress(USB_OTG_CORE_HANDLE *pdev, 
                            USBH_HOST *phost,
                            uint8_t DeviceAddress)
{
 8016f56:	b580      	push	{r7, lr}
 8016f58:	b084      	sub	sp, #16
 8016f5a:	af00      	add	r7, sp, #0
 8016f5c:	60f8      	str	r0, [r7, #12]
 8016f5e:	60b9      	str	r1, [r7, #8]
 8016f60:	4613      	mov	r3, r2
 8016f62:	71fb      	strb	r3, [r7, #7]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8016f64:	68bb      	ldr	r3, [r7, #8]
 8016f66:	2200      	movs	r2, #0
 8016f68:	751a      	strb	r2, [r3, #20]
    USB_REQ_TYPE_STANDARD;
  
  phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8016f6a:	68bb      	ldr	r3, [r7, #8]
 8016f6c:	2205      	movs	r2, #5
 8016f6e:	755a      	strb	r2, [r3, #21]
  
  phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8016f70:	79fb      	ldrb	r3, [r7, #7]
 8016f72:	b29a      	uxth	r2, r3
 8016f74:	68bb      	ldr	r3, [r7, #8]
 8016f76:	82da      	strh	r2, [r3, #22]
  phost->Control.setup.b.wIndex.w = 0;
 8016f78:	68bb      	ldr	r3, [r7, #8]
 8016f7a:	2200      	movs	r2, #0
 8016f7c:	831a      	strh	r2, [r3, #24]
  phost->Control.setup.b.wLength.w = 0;
 8016f7e:	68bb      	ldr	r3, [r7, #8]
 8016f80:	2200      	movs	r2, #0
 8016f82:	835a      	strh	r2, [r3, #26]
  
  return USBH_CtlReq(pdev, phost, 0 , 0 );
 8016f84:	2300      	movs	r3, #0
 8016f86:	2200      	movs	r2, #0
 8016f88:	68b9      	ldr	r1, [r7, #8]
 8016f8a:	68f8      	ldr	r0, [r7, #12]
 8016f8c:	f7ff fc44 	bl	8016818 <USBH_CtlReq>
 8016f90:	4603      	mov	r3, r0
}
 8016f92:	4618      	mov	r0, r3
 8016f94:	3710      	adds	r7, #16
 8016f96:	46bd      	mov	sp, r7
 8016f98:	bd80      	pop	{r7, pc}

08016f9a <USBH_SetCfg>:
* @retval Status
*/
USBH_Status USBH_SetCfg(USB_OTG_CORE_HANDLE *pdev, 
                        USBH_HOST *phost,
                        uint16_t cfg_idx)
{
 8016f9a:	b580      	push	{r7, lr}
 8016f9c:	b084      	sub	sp, #16
 8016f9e:	af00      	add	r7, sp, #0
 8016fa0:	60f8      	str	r0, [r7, #12]
 8016fa2:	60b9      	str	r1, [r7, #8]
 8016fa4:	4613      	mov	r3, r2
 8016fa6:	80fb      	strh	r3, [r7, #6]
  
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE |\
 8016fa8:	68bb      	ldr	r3, [r7, #8]
 8016faa:	2200      	movs	r2, #0
 8016fac:	751a      	strb	r2, [r3, #20]
    USB_REQ_TYPE_STANDARD;
  phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8016fae:	68bb      	ldr	r3, [r7, #8]
 8016fb0:	2209      	movs	r2, #9
 8016fb2:	755a      	strb	r2, [r3, #21]
  phost->Control.setup.b.wValue.w = cfg_idx;
 8016fb4:	68bb      	ldr	r3, [r7, #8]
 8016fb6:	88fa      	ldrh	r2, [r7, #6]
 8016fb8:	82da      	strh	r2, [r3, #22]
  phost->Control.setup.b.wIndex.w = 0;
 8016fba:	68bb      	ldr	r3, [r7, #8]
 8016fbc:	2200      	movs	r2, #0
 8016fbe:	831a      	strh	r2, [r3, #24]
  phost->Control.setup.b.wLength.w = 0;           
 8016fc0:	68bb      	ldr	r3, [r7, #8]
 8016fc2:	2200      	movs	r2, #0
 8016fc4:	835a      	strh	r2, [r3, #26]
  
  return USBH_CtlReq(pdev, phost, 0 , 0 );      
 8016fc6:	2300      	movs	r3, #0
 8016fc8:	2200      	movs	r2, #0
 8016fca:	68b9      	ldr	r1, [r7, #8]
 8016fcc:	68f8      	ldr	r0, [r7, #12]
 8016fce:	f7ff fc23 	bl	8016818 <USBH_CtlReq>
 8016fd2:	4603      	mov	r3, r0
}
 8016fd4:	4618      	mov	r0, r3
 8016fd6:	3710      	adds	r7, #16
 8016fd8:	46bd      	mov	sp, r7
 8016fda:	bd80      	pop	{r7, pc}

08016fdc <USBH_SetInterface>:
* @retval Status
*/
USBH_Status USBH_SetInterface(USB_OTG_CORE_HANDLE *pdev, 
                        USBH_HOST *phost,
                        uint8_t ep_num, uint8_t altSetting)
{
 8016fdc:	b580      	push	{r7, lr}
 8016fde:	b084      	sub	sp, #16
 8016fe0:	af00      	add	r7, sp, #0
 8016fe2:	60f8      	str	r0, [r7, #12]
 8016fe4:	60b9      	str	r1, [r7, #8]
 8016fe6:	4611      	mov	r1, r2
 8016fe8:	461a      	mov	r2, r3
 8016fea:	460b      	mov	r3, r1
 8016fec:	71fb      	strb	r3, [r7, #7]
 8016fee:	4613      	mov	r3, r2
 8016ff0:	71bb      	strb	r3, [r7, #6]
  
  
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_INTERFACE | \
 8016ff2:	68bb      	ldr	r3, [r7, #8]
 8016ff4:	2201      	movs	r2, #1
 8016ff6:	751a      	strb	r2, [r3, #20]
    USB_REQ_TYPE_STANDARD;
  
  phost->Control.setup.b.bRequest = USB_REQ_SET_INTERFACE;
 8016ff8:	68bb      	ldr	r3, [r7, #8]
 8016ffa:	220b      	movs	r2, #11
 8016ffc:	755a      	strb	r2, [r3, #21]
  phost->Control.setup.b.wValue.w = altSetting;
 8016ffe:	79bb      	ldrb	r3, [r7, #6]
 8017000:	b29a      	uxth	r2, r3
 8017002:	68bb      	ldr	r3, [r7, #8]
 8017004:	82da      	strh	r2, [r3, #22]
  phost->Control.setup.b.wIndex.w = ep_num;
 8017006:	79fb      	ldrb	r3, [r7, #7]
 8017008:	b29a      	uxth	r2, r3
 801700a:	68bb      	ldr	r3, [r7, #8]
 801700c:	831a      	strh	r2, [r3, #24]
  phost->Control.setup.b.wLength.w = 0;           
 801700e:	68bb      	ldr	r3, [r7, #8]
 8017010:	2200      	movs	r2, #0
 8017012:	835a      	strh	r2, [r3, #26]
 
  return USBH_CtlReq(pdev, phost, 0 , 0 );     
 8017014:	2300      	movs	r3, #0
 8017016:	2200      	movs	r2, #0
 8017018:	68b9      	ldr	r1, [r7, #8]
 801701a:	68f8      	ldr	r0, [r7, #12]
 801701c:	f7ff fbfc 	bl	8016818 <USBH_CtlReq>
 8017020:	4603      	mov	r3, r0
}
 8017022:	4618      	mov	r0, r3
 8017024:	3710      	adds	r7, #16
 8017026:	46bd      	mov	sp, r7
 8017028:	bd80      	pop	{r7, pc}

0801702a <USBH_ClrFeature>:
*/
USBH_Status USBH_ClrFeature(USB_OTG_CORE_HANDLE *pdev,
                            USBH_HOST *phost,
                            uint8_t ep_num, 
                            uint8_t hc_num) 
{
 801702a:	b580      	push	{r7, lr}
 801702c:	b084      	sub	sp, #16
 801702e:	af00      	add	r7, sp, #0
 8017030:	60f8      	str	r0, [r7, #12]
 8017032:	60b9      	str	r1, [r7, #8]
 8017034:	4611      	mov	r1, r2
 8017036:	461a      	mov	r2, r3
 8017038:	460b      	mov	r3, r1
 801703a:	71fb      	strb	r3, [r7, #7]
 801703c:	4613      	mov	r3, r2
 801703e:	71bb      	strb	r3, [r7, #6]
  
  phost->Control.setup.b.bmRequestType = USB_H2D | 
 8017040:	68bb      	ldr	r3, [r7, #8]
 8017042:	2202      	movs	r2, #2
 8017044:	751a      	strb	r2, [r3, #20]
                                         USB_REQ_RECIPIENT_ENDPOINT |
                                         USB_REQ_TYPE_STANDARD;
  
  phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8017046:	68bb      	ldr	r3, [r7, #8]
 8017048:	2201      	movs	r2, #1
 801704a:	755a      	strb	r2, [r3, #21]
  phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 801704c:	68bb      	ldr	r3, [r7, #8]
 801704e:	2200      	movs	r2, #0
 8017050:	82da      	strh	r2, [r3, #22]
  phost->Control.setup.b.wIndex.w = ep_num;
 8017052:	79fb      	ldrb	r3, [r7, #7]
 8017054:	b29a      	uxth	r2, r3
 8017056:	68bb      	ldr	r3, [r7, #8]
 8017058:	831a      	strh	r2, [r3, #24]
  phost->Control.setup.b.wLength.w = 0;           
 801705a:	68bb      	ldr	r3, [r7, #8]
 801705c:	2200      	movs	r2, #0
 801705e:	835a      	strh	r2, [r3, #26]
  
  if ((ep_num & USB_REQ_DIR_MASK ) == USB_D2H)
 8017060:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017064:	2b00      	cmp	r3, #0
 8017066:	da08      	bge.n	801707a <USBH_ClrFeature+0x50>
  { /* EP Type is IN */
    pdev->host.hc[hc_num].toggle_in = 0; 
 8017068:	79bb      	ldrb	r3, [r7, #6]
 801706a:	68fa      	ldr	r2, [r7, #12]
 801706c:	331e      	adds	r3, #30
 801706e:	015b      	lsls	r3, r3, #5
 8017070:	4413      	add	r3, r2
 8017072:	3304      	adds	r3, #4
 8017074:	2200      	movs	r2, #0
 8017076:	701a      	strb	r2, [r3, #0]
 8017078:	e007      	b.n	801708a <USBH_ClrFeature+0x60>
  }
  else
  {/* EP Type is OUT */
    pdev->host.hc[hc_num].toggle_out = 0; 
 801707a:	79bb      	ldrb	r3, [r7, #6]
 801707c:	68fa      	ldr	r2, [r7, #12]
 801707e:	331e      	adds	r3, #30
 8017080:	015b      	lsls	r3, r3, #5
 8017082:	4413      	add	r3, r2
 8017084:	3305      	adds	r3, #5
 8017086:	2200      	movs	r2, #0
 8017088:	701a      	strb	r2, [r3, #0]
  }
  
  return USBH_CtlReq(pdev, phost, 0 , 0 );   
 801708a:	2300      	movs	r3, #0
 801708c:	2200      	movs	r2, #0
 801708e:	68b9      	ldr	r1, [r7, #8]
 8017090:	68f8      	ldr	r0, [r7, #12]
 8017092:	f7ff fbc1 	bl	8016818 <USBH_CtlReq>
 8017096:	4603      	mov	r3, r0
}
 8017098:	4618      	mov	r0, r3
 801709a:	3710      	adds	r7, #16
 801709c:	46bd      	mov	sp, r7
 801709e:	bd80      	pop	{r7, pc}

080170a0 <USBH_ParseDevDesc>:
* @retval None
*/
static void  USBH_ParseDevDesc (USBH_DevDesc_TypeDef* dev_desc,
                                uint8_t *buf, 
                                uint16_t length)
{
 80170a0:	b480      	push	{r7}
 80170a2:	b085      	sub	sp, #20
 80170a4:	af00      	add	r7, sp, #0
 80170a6:	60f8      	str	r0, [r7, #12]
 80170a8:	60b9      	str	r1, [r7, #8]
 80170aa:	4613      	mov	r3, r2
 80170ac:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t  *) (buf +  0);
 80170ae:	68bb      	ldr	r3, [r7, #8]
 80170b0:	781a      	ldrb	r2, [r3, #0]
 80170b2:	68fb      	ldr	r3, [r7, #12]
 80170b4:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t  *) (buf +  1);
 80170b6:	68bb      	ldr	r3, [r7, #8]
 80170b8:	785a      	ldrb	r2, [r3, #1]
 80170ba:	68fb      	ldr	r3, [r7, #12]
 80170bc:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16 (buf +  2);
 80170be:	68bb      	ldr	r3, [r7, #8]
 80170c0:	3302      	adds	r3, #2
 80170c2:	781b      	ldrb	r3, [r3, #0]
 80170c4:	b29a      	uxth	r2, r3
 80170c6:	68bb      	ldr	r3, [r7, #8]
 80170c8:	3302      	adds	r3, #2
 80170ca:	3301      	adds	r3, #1
 80170cc:	781b      	ldrb	r3, [r3, #0]
 80170ce:	b29b      	uxth	r3, r3
 80170d0:	021b      	lsls	r3, r3, #8
 80170d2:	b29b      	uxth	r3, r3
 80170d4:	4413      	add	r3, r2
 80170d6:	b29a      	uxth	r2, r3
 80170d8:	68fb      	ldr	r3, [r7, #12]
 80170da:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t  *) (buf +  4);
 80170dc:	68bb      	ldr	r3, [r7, #8]
 80170de:	791a      	ldrb	r2, [r3, #4]
 80170e0:	68fb      	ldr	r3, [r7, #12]
 80170e2:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t  *) (buf +  5);
 80170e4:	68bb      	ldr	r3, [r7, #8]
 80170e6:	795a      	ldrb	r2, [r3, #5]
 80170e8:	68fb      	ldr	r3, [r7, #12]
 80170ea:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t  *) (buf +  6);
 80170ec:	68bb      	ldr	r3, [r7, #8]
 80170ee:	799a      	ldrb	r2, [r3, #6]
 80170f0:	68fb      	ldr	r3, [r7, #12]
 80170f2:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t  *) (buf +  7);
 80170f4:	68bb      	ldr	r3, [r7, #8]
 80170f6:	79da      	ldrb	r2, [r3, #7]
 80170f8:	68fb      	ldr	r3, [r7, #12]
 80170fa:	71da      	strb	r2, [r3, #7]
  
  if (length > 8)
 80170fc:	88fb      	ldrh	r3, [r7, #6]
 80170fe:	2b08      	cmp	r3, #8
 8017100:	d93c      	bls.n	801717c <USBH_ParseDevDesc+0xdc>
  { /* For 1st time after device connection, Host may issue only 8 bytes for 
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16 (buf +  8);
 8017102:	68bb      	ldr	r3, [r7, #8]
 8017104:	3308      	adds	r3, #8
 8017106:	781b      	ldrb	r3, [r3, #0]
 8017108:	b29a      	uxth	r2, r3
 801710a:	68bb      	ldr	r3, [r7, #8]
 801710c:	3308      	adds	r3, #8
 801710e:	3301      	adds	r3, #1
 8017110:	781b      	ldrb	r3, [r3, #0]
 8017112:	b29b      	uxth	r3, r3
 8017114:	021b      	lsls	r3, r3, #8
 8017116:	b29b      	uxth	r3, r3
 8017118:	4413      	add	r3, r2
 801711a:	b29a      	uxth	r2, r3
 801711c:	68fb      	ldr	r3, [r7, #12]
 801711e:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16 (buf + 10);
 8017120:	68bb      	ldr	r3, [r7, #8]
 8017122:	330a      	adds	r3, #10
 8017124:	781b      	ldrb	r3, [r3, #0]
 8017126:	b29a      	uxth	r2, r3
 8017128:	68bb      	ldr	r3, [r7, #8]
 801712a:	330a      	adds	r3, #10
 801712c:	3301      	adds	r3, #1
 801712e:	781b      	ldrb	r3, [r3, #0]
 8017130:	b29b      	uxth	r3, r3
 8017132:	021b      	lsls	r3, r3, #8
 8017134:	b29b      	uxth	r3, r3
 8017136:	4413      	add	r3, r2
 8017138:	b29a      	uxth	r2, r3
 801713a:	68fb      	ldr	r3, [r7, #12]
 801713c:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16 (buf + 12);
 801713e:	68bb      	ldr	r3, [r7, #8]
 8017140:	330c      	adds	r3, #12
 8017142:	781b      	ldrb	r3, [r3, #0]
 8017144:	b29a      	uxth	r2, r3
 8017146:	68bb      	ldr	r3, [r7, #8]
 8017148:	330c      	adds	r3, #12
 801714a:	3301      	adds	r3, #1
 801714c:	781b      	ldrb	r3, [r3, #0]
 801714e:	b29b      	uxth	r3, r3
 8017150:	021b      	lsls	r3, r3, #8
 8017152:	b29b      	uxth	r3, r3
 8017154:	4413      	add	r3, r2
 8017156:	b29a      	uxth	r2, r3
 8017158:	68fb      	ldr	r3, [r7, #12]
 801715a:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t  *) (buf + 14);
 801715c:	68bb      	ldr	r3, [r7, #8]
 801715e:	7b9a      	ldrb	r2, [r3, #14]
 8017160:	68fb      	ldr	r3, [r7, #12]
 8017162:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t  *) (buf + 15);
 8017164:	68bb      	ldr	r3, [r7, #8]
 8017166:	7bda      	ldrb	r2, [r3, #15]
 8017168:	68fb      	ldr	r3, [r7, #12]
 801716a:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t  *) (buf + 16);
 801716c:	68bb      	ldr	r3, [r7, #8]
 801716e:	7c1a      	ldrb	r2, [r3, #16]
 8017170:	68fb      	ldr	r3, [r7, #12]
 8017172:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t  *) (buf + 17);
 8017174:	68bb      	ldr	r3, [r7, #8]
 8017176:	7c5a      	ldrb	r2, [r3, #17]
 8017178:	68fb      	ldr	r3, [r7, #12]
 801717a:	745a      	strb	r2, [r3, #17]
  }
}
 801717c:	bf00      	nop
 801717e:	3714      	adds	r7, #20
 8017180:	46bd      	mov	sp, r7
 8017182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017186:	4770      	bx	lr

08017188 <USBH_ParseCfgDesc>:
static void  USBH_ParseCfgDesc (USBH_CfgDesc_TypeDef* cfg_desc,
                                USBH_InterfaceDesc_TypeDef* itf_desc,
                                USBH_EpDesc_TypeDef   ep_desc[][USBH_MAX_NUM_ENDPOINTS], 
                                uint8_t *buf, 
                                uint16_t length)
{  
 8017188:	b580      	push	{r7, lr}
 801718a:	b08c      	sub	sp, #48	; 0x30
 801718c:	af00      	add	r7, sp, #0
 801718e:	60f8      	str	r0, [r7, #12]
 8017190:	60b9      	str	r1, [r7, #8]
 8017192:	607a      	str	r2, [r7, #4]
 8017194:	603b      	str	r3, [r7, #0]
  USBH_InterfaceDesc_TypeDef    *pif ;
  USBH_InterfaceDesc_TypeDef    temp_pif ;  
  USBH_EpDesc_TypeDef           *pep;  
  USBH_DescHeader_t             *pdesc = (USBH_DescHeader_t *)buf;
 8017196:	683b      	ldr	r3, [r7, #0]
 8017198:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint16_t                      ptr;
  int8_t                        if_ix = 0;
 801719a:	2300      	movs	r3, #0
 801719c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  int8_t                        ep_ix = 0;  
 80171a0:	2300      	movs	r3, #0
 80171a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  static uint16_t               prev_ep_size = 0;
  static uint8_t                prev_itf = 0;  
  
  
  pdesc   = (USBH_DescHeader_t *)buf;
 80171a6:	683b      	ldr	r3, [r7, #0]
 80171a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t  *) (buf + 0);
 80171aa:	683b      	ldr	r3, [r7, #0]
 80171ac:	781a      	ldrb	r2, [r3, #0]
 80171ae:	68fb      	ldr	r3, [r7, #12]
 80171b0:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t  *) (buf + 1);
 80171b2:	683b      	ldr	r3, [r7, #0]
 80171b4:	785a      	ldrb	r2, [r3, #1]
 80171b6:	68fb      	ldr	r3, [r7, #12]
 80171b8:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16 (buf + 2);
 80171ba:	683b      	ldr	r3, [r7, #0]
 80171bc:	3302      	adds	r3, #2
 80171be:	781b      	ldrb	r3, [r3, #0]
 80171c0:	b29a      	uxth	r2, r3
 80171c2:	683b      	ldr	r3, [r7, #0]
 80171c4:	3302      	adds	r3, #2
 80171c6:	3301      	adds	r3, #1
 80171c8:	781b      	ldrb	r3, [r3, #0]
 80171ca:	b29b      	uxth	r3, r3
 80171cc:	021b      	lsls	r3, r3, #8
 80171ce:	b29b      	uxth	r3, r3
 80171d0:	4413      	add	r3, r2
 80171d2:	b29a      	uxth	r2, r3
 80171d4:	68fb      	ldr	r3, [r7, #12]
 80171d6:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t  *) (buf + 4);
 80171d8:	683b      	ldr	r3, [r7, #0]
 80171da:	791a      	ldrb	r2, [r3, #4]
 80171dc:	68fb      	ldr	r3, [r7, #12]
 80171de:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t  *) (buf + 5);
 80171e0:	683b      	ldr	r3, [r7, #0]
 80171e2:	795a      	ldrb	r2, [r3, #5]
 80171e4:	68fb      	ldr	r3, [r7, #12]
 80171e6:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t  *) (buf + 6);
 80171e8:	683b      	ldr	r3, [r7, #0]
 80171ea:	799a      	ldrb	r2, [r3, #6]
 80171ec:	68fb      	ldr	r3, [r7, #12]
 80171ee:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t  *) (buf + 7);
 80171f0:	683b      	ldr	r3, [r7, #0]
 80171f2:	79da      	ldrb	r2, [r3, #7]
 80171f4:	68fb      	ldr	r3, [r7, #12]
 80171f6:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t  *) (buf + 8);    
 80171f8:	683b      	ldr	r3, [r7, #0]
 80171fa:	7a1a      	ldrb	r2, [r3, #8]
 80171fc:	68fb      	ldr	r3, [r7, #12]
 80171fe:	721a      	strb	r2, [r3, #8]
  
  
  if (length > USB_CONFIGURATION_DESC_SIZE)
 8017200:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8017202:	2b09      	cmp	r3, #9
 8017204:	f240 809a 	bls.w	801733c <USBH_ParseCfgDesc+0x1b4>
  {
    ptr = USB_LEN_CFG_DESC;
 8017208:	2309      	movs	r3, #9
 801720a:	827b      	strh	r3, [r7, #18]
    
    if ( cfg_desc->bNumInterfaces <= USBH_MAX_NUM_INTERFACES) 
 801720c:	68fb      	ldr	r3, [r7, #12]
 801720e:	791b      	ldrb	r3, [r3, #4]
 8017210:	2b02      	cmp	r3, #2
 8017212:	f200 808d 	bhi.w	8017330 <USBH_ParseCfgDesc+0x1a8>
    {
      pif = (USBH_InterfaceDesc_TypeDef *)0;
 8017216:	2300      	movs	r3, #0
 8017218:	627b      	str	r3, [r7, #36]	; 0x24
      
      while (ptr < cfg_desc->wTotalLength ) 
 801721a:	e083      	b.n	8017324 <USBH_ParseCfgDesc+0x19c>
      {
        pdesc = USBH_GetNextDesc((uint8_t *)pdesc, &ptr);
 801721c:	f107 0312 	add.w	r3, r7, #18
 8017220:	4619      	mov	r1, r3
 8017222:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8017224:	f000 f922 	bl	801746c <USBH_GetNextDesc>
 8017228:	62f8      	str	r0, [r7, #44]	; 0x2c
        if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE) 
 801722a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801722c:	785b      	ldrb	r3, [r3, #1]
 801722e:	2b04      	cmp	r3, #4
 8017230:	d178      	bne.n	8017324 <USBH_ParseCfgDesc+0x19c>
        {
          if_ix             = *(((uint8_t *)pdesc ) + 2);
 8017232:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017234:	3302      	adds	r3, #2
 8017236:	781b      	ldrb	r3, [r3, #0]
 8017238:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
          pif               = &itf_desc[if_ix];
 801723c:	f997 202a 	ldrsb.w	r2, [r7, #42]	; 0x2a
 8017240:	4613      	mov	r3, r2
 8017242:	00db      	lsls	r3, r3, #3
 8017244:	4413      	add	r3, r2
 8017246:	68ba      	ldr	r2, [r7, #8]
 8017248:	4413      	add	r3, r2
 801724a:	627b      	str	r3, [r7, #36]	; 0x24
          
          if((*((uint8_t *)pdesc + 3)) < 3)
 801724c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801724e:	3303      	adds	r3, #3
 8017250:	781b      	ldrb	r3, [r3, #0]
 8017252:	2b02      	cmp	r3, #2
 8017254:	d866      	bhi.n	8017324 <USBH_ParseCfgDesc+0x19c>
          {
          USBH_ParseInterfaceDesc (&temp_pif, (uint8_t *)pdesc);            
 8017256:	f107 0314 	add.w	r3, r7, #20
 801725a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801725c:	4618      	mov	r0, r3
 801725e:	f000 f875 	bl	801734c <USBH_ParseInterfaceDesc>
          ep_ix = 0;
 8017262:	2300      	movs	r3, #0
 8017264:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
          
          /* Parse Ep descriptors relative to the current interface */
          if(temp_pif.bNumEndpoints <= USBH_MAX_NUM_ENDPOINTS)
 8017268:	7e3b      	ldrb	r3, [r7, #24]
 801726a:	2b02      	cmp	r3, #2
 801726c:	d85a      	bhi.n	8017324 <USBH_ParseCfgDesc+0x19c>
          {          
            while (ep_ix < temp_pif.bNumEndpoints) 
 801726e:	e054      	b.n	801731a <USBH_ParseCfgDesc+0x192>
            {
              pdesc = USBH_GetNextDesc((void* )pdesc, &ptr);
 8017270:	f107 0312 	add.w	r3, r7, #18
 8017274:	4619      	mov	r1, r3
 8017276:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8017278:	f000 f8f8 	bl	801746c <USBH_GetNextDesc>
 801727c:	62f8      	str	r0, [r7, #44]	; 0x2c
              if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT) 
 801727e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017280:	785b      	ldrb	r3, [r3, #1]
 8017282:	2b05      	cmp	r3, #5
 8017284:	d149      	bne.n	801731a <USBH_ParseCfgDesc+0x192>
              {  
                pep               = &ep_desc[if_ix][ep_ix];
 8017286:	f997 302a 	ldrsb.w	r3, [r7, #42]	; 0x2a
 801728a:	011b      	lsls	r3, r3, #4
 801728c:	687a      	ldr	r2, [r7, #4]
 801728e:	441a      	add	r2, r3
 8017290:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8017294:	00db      	lsls	r3, r3, #3
 8017296:	4413      	add	r3, r2
 8017298:	623b      	str	r3, [r7, #32]
                
                if(prev_itf != if_ix)
 801729a:	4b2a      	ldr	r3, [pc, #168]	; (8017344 <USBH_ParseCfgDesc+0x1bc>)
 801729c:	781b      	ldrb	r3, [r3, #0]
 801729e:	461a      	mov	r2, r3
 80172a0:	f997 302a 	ldrsb.w	r3, [r7, #42]	; 0x2a
 80172a4:	429a      	cmp	r2, r3
 80172a6:	d00a      	beq.n	80172be <USBH_ParseCfgDesc+0x136>
                {
                  prev_itf = if_ix;
 80172a8:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
 80172ac:	4b25      	ldr	r3, [pc, #148]	; (8017344 <USBH_ParseCfgDesc+0x1bc>)
 80172ae:	701a      	strb	r2, [r3, #0]
                  USBH_ParseInterfaceDesc (pif, (uint8_t *)&temp_pif); 
 80172b0:	f107 0314 	add.w	r3, r7, #20
 80172b4:	4619      	mov	r1, r3
 80172b6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80172b8:	f000 f848 	bl	801734c <USBH_ParseInterfaceDesc>
 80172bc:	e014      	b.n	80172e8 <USBH_ParseCfgDesc+0x160>
                }
                else
                {
                  if(prev_ep_size > LE16((uint8_t *)pdesc + 4))
 80172be:	4b22      	ldr	r3, [pc, #136]	; (8017348 <USBH_ParseCfgDesc+0x1c0>)
 80172c0:	881b      	ldrh	r3, [r3, #0]
 80172c2:	461a      	mov	r2, r3
 80172c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80172c6:	3304      	adds	r3, #4
 80172c8:	781b      	ldrb	r3, [r3, #0]
 80172ca:	4619      	mov	r1, r3
 80172cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80172ce:	3305      	adds	r3, #5
 80172d0:	781b      	ldrb	r3, [r3, #0]
 80172d2:	021b      	lsls	r3, r3, #8
 80172d4:	440b      	add	r3, r1
 80172d6:	429a      	cmp	r2, r3
 80172d8:	dd00      	ble.n	80172dc <USBH_ParseCfgDesc+0x154>
                  {
                    break;
 80172da:	e023      	b.n	8017324 <USBH_ParseCfgDesc+0x19c>
                  }
                  else
                  {
                    USBH_ParseInterfaceDesc (pif, (uint8_t *)&temp_pif);    
 80172dc:	f107 0314 	add.w	r3, r7, #20
 80172e0:	4619      	mov	r1, r3
 80172e2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80172e4:	f000 f832 	bl	801734c <USBH_ParseInterfaceDesc>
                  }
                }
                USBH_ParseEPDesc (pep, (uint8_t *)pdesc);
 80172e8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80172ea:	6a38      	ldr	r0, [r7, #32]
 80172ec:	f000 f85d 	bl	80173aa <USBH_ParseEPDesc>
                prev_ep_size = LE16((uint8_t *)pdesc + 4);
 80172f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80172f2:	3304      	adds	r3, #4
 80172f4:	781b      	ldrb	r3, [r3, #0]
 80172f6:	b29a      	uxth	r2, r3
 80172f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80172fa:	3305      	adds	r3, #5
 80172fc:	781b      	ldrb	r3, [r3, #0]
 80172fe:	b29b      	uxth	r3, r3
 8017300:	021b      	lsls	r3, r3, #8
 8017302:	b29b      	uxth	r3, r3
 8017304:	4413      	add	r3, r2
 8017306:	b29a      	uxth	r2, r3
 8017308:	4b0f      	ldr	r3, [pc, #60]	; (8017348 <USBH_ParseCfgDesc+0x1c0>)
 801730a:	801a      	strh	r2, [r3, #0]
                ep_ix++;
 801730c:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8017310:	b2db      	uxtb	r3, r3
 8017312:	3301      	adds	r3, #1
 8017314:	b2db      	uxtb	r3, r3
 8017316:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            while (ep_ix < temp_pif.bNumEndpoints) 
 801731a:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 801731e:	7e3a      	ldrb	r2, [r7, #24]
 8017320:	4293      	cmp	r3, r2
 8017322:	dba5      	blt.n	8017270 <USBH_ParseCfgDesc+0xe8>
      while (ptr < cfg_desc->wTotalLength ) 
 8017324:	68fb      	ldr	r3, [r7, #12]
 8017326:	885a      	ldrh	r2, [r3, #2]
 8017328:	8a7b      	ldrh	r3, [r7, #18]
 801732a:	429a      	cmp	r2, r3
 801732c:	f63f af76 	bhi.w	801721c <USBH_ParseCfgDesc+0x94>
          }
         }
        }
      }
    }
    prev_ep_size = 0;
 8017330:	4b05      	ldr	r3, [pc, #20]	; (8017348 <USBH_ParseCfgDesc+0x1c0>)
 8017332:	2200      	movs	r2, #0
 8017334:	801a      	strh	r2, [r3, #0]
    prev_itf = 0; 
 8017336:	4b03      	ldr	r3, [pc, #12]	; (8017344 <USBH_ParseCfgDesc+0x1bc>)
 8017338:	2200      	movs	r2, #0
 801733a:	701a      	strb	r2, [r3, #0]
  }  
}
 801733c:	bf00      	nop
 801733e:	3730      	adds	r7, #48	; 0x30
 8017340:	46bd      	mov	sp, r7
 8017342:	bd80      	pop	{r7, pc}
 8017344:	2000373c 	.word	0x2000373c
 8017348:	2000373e 	.word	0x2000373e

0801734c <USBH_ParseInterfaceDesc>:
* @param  buf: Buffer where the descriptor data is available
* @retval None
*/
static void  USBH_ParseInterfaceDesc (USBH_InterfaceDesc_TypeDef *if_descriptor, 
                                      uint8_t *buf)
{
 801734c:	b480      	push	{r7}
 801734e:	b083      	sub	sp, #12
 8017350:	af00      	add	r7, sp, #0
 8017352:	6078      	str	r0, [r7, #4]
 8017354:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t  *) (buf + 0);
 8017356:	683b      	ldr	r3, [r7, #0]
 8017358:	781a      	ldrb	r2, [r3, #0]
 801735a:	687b      	ldr	r3, [r7, #4]
 801735c:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t  *) (buf + 1);
 801735e:	683b      	ldr	r3, [r7, #0]
 8017360:	785a      	ldrb	r2, [r3, #1]
 8017362:	687b      	ldr	r3, [r7, #4]
 8017364:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t  *) (buf + 2);
 8017366:	683b      	ldr	r3, [r7, #0]
 8017368:	789a      	ldrb	r2, [r3, #2]
 801736a:	687b      	ldr	r3, [r7, #4]
 801736c:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t  *) (buf + 3);
 801736e:	683b      	ldr	r3, [r7, #0]
 8017370:	78da      	ldrb	r2, [r3, #3]
 8017372:	687b      	ldr	r3, [r7, #4]
 8017374:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t  *) (buf + 4);
 8017376:	683b      	ldr	r3, [r7, #0]
 8017378:	791a      	ldrb	r2, [r3, #4]
 801737a:	687b      	ldr	r3, [r7, #4]
 801737c:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t  *) (buf + 5);
 801737e:	683b      	ldr	r3, [r7, #0]
 8017380:	795a      	ldrb	r2, [r3, #5]
 8017382:	687b      	ldr	r3, [r7, #4]
 8017384:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t  *) (buf + 6);
 8017386:	683b      	ldr	r3, [r7, #0]
 8017388:	799a      	ldrb	r2, [r3, #6]
 801738a:	687b      	ldr	r3, [r7, #4]
 801738c:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t  *) (buf + 7);
 801738e:	683b      	ldr	r3, [r7, #0]
 8017390:	79da      	ldrb	r2, [r3, #7]
 8017392:	687b      	ldr	r3, [r7, #4]
 8017394:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t  *) (buf + 8);
 8017396:	683b      	ldr	r3, [r7, #0]
 8017398:	7a1a      	ldrb	r2, [r3, #8]
 801739a:	687b      	ldr	r3, [r7, #4]
 801739c:	721a      	strb	r2, [r3, #8]
}
 801739e:	bf00      	nop
 80173a0:	370c      	adds	r7, #12
 80173a2:	46bd      	mov	sp, r7
 80173a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80173a8:	4770      	bx	lr

080173aa <USBH_ParseEPDesc>:
* @param  buf: Buffer where the parsed descriptor stored
* @retval None
*/
static void  USBH_ParseEPDesc (USBH_EpDesc_TypeDef  *ep_descriptor, 
                               uint8_t *buf)
{
 80173aa:	b480      	push	{r7}
 80173ac:	b083      	sub	sp, #12
 80173ae:	af00      	add	r7, sp, #0
 80173b0:	6078      	str	r0, [r7, #4]
 80173b2:	6039      	str	r1, [r7, #0]
  
  ep_descriptor->bLength          = *(uint8_t  *) (buf + 0);
 80173b4:	683b      	ldr	r3, [r7, #0]
 80173b6:	781a      	ldrb	r2, [r3, #0]
 80173b8:	687b      	ldr	r3, [r7, #4]
 80173ba:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t  *) (buf + 1);
 80173bc:	683b      	ldr	r3, [r7, #0]
 80173be:	785a      	ldrb	r2, [r3, #1]
 80173c0:	687b      	ldr	r3, [r7, #4]
 80173c2:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t  *) (buf + 2);
 80173c4:	683b      	ldr	r3, [r7, #0]
 80173c6:	789a      	ldrb	r2, [r3, #2]
 80173c8:	687b      	ldr	r3, [r7, #4]
 80173ca:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t  *) (buf + 3);
 80173cc:	683b      	ldr	r3, [r7, #0]
 80173ce:	78da      	ldrb	r2, [r3, #3]
 80173d0:	687b      	ldr	r3, [r7, #4]
 80173d2:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16 (buf + 4);
 80173d4:	683b      	ldr	r3, [r7, #0]
 80173d6:	3304      	adds	r3, #4
 80173d8:	781b      	ldrb	r3, [r3, #0]
 80173da:	b29a      	uxth	r2, r3
 80173dc:	683b      	ldr	r3, [r7, #0]
 80173de:	3304      	adds	r3, #4
 80173e0:	3301      	adds	r3, #1
 80173e2:	781b      	ldrb	r3, [r3, #0]
 80173e4:	b29b      	uxth	r3, r3
 80173e6:	021b      	lsls	r3, r3, #8
 80173e8:	b29b      	uxth	r3, r3
 80173ea:	4413      	add	r3, r2
 80173ec:	b29a      	uxth	r2, r3
 80173ee:	687b      	ldr	r3, [r7, #4]
 80173f0:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t  *) (buf + 6);
 80173f2:	683b      	ldr	r3, [r7, #0]
 80173f4:	799a      	ldrb	r2, [r3, #6]
 80173f6:	687b      	ldr	r3, [r7, #4]
 80173f8:	719a      	strb	r2, [r3, #6]
}
 80173fa:	bf00      	nop
 80173fc:	370c      	adds	r7, #12
 80173fe:	46bd      	mov	sp, r7
 8017400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017404:	4770      	bx	lr

08017406 <USBH_ParseStringDesc>:
* @retval None
*/
static void USBH_ParseStringDesc (uint8_t* psrc, 
                                  uint8_t* pdest, 
                                  uint16_t length)
{
 8017406:	b480      	push	{r7}
 8017408:	b087      	sub	sp, #28
 801740a:	af00      	add	r7, sp, #0
 801740c:	60f8      	str	r0, [r7, #12]
 801740e:	60b9      	str	r1, [r7, #8]
 8017410:	4613      	mov	r3, r2
 8017412:	80fb      	strh	r3, [r7, #6]
  */
  
  /* Check which is lower size, the Size of string or the length of bytes read 
  from the device */
  
  if ( psrc[1] == USB_DESC_TYPE_STRING)
 8017414:	68fb      	ldr	r3, [r7, #12]
 8017416:	3301      	adds	r3, #1
 8017418:	781b      	ldrb	r3, [r3, #0]
 801741a:	2b03      	cmp	r3, #3
 801741c:	d120      	bne.n	8017460 <USBH_ParseStringDesc+0x5a>
  { /* Make sure the Descriptor is String Type */
    
    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */      
    strlength = ( ( (psrc[0]-2) <= length) ? (psrc[0]-2) :length); 
 801741e:	68fb      	ldr	r3, [r7, #12]
 8017420:	781b      	ldrb	r3, [r3, #0]
 8017422:	1e9a      	subs	r2, r3, #2
 8017424:	88fb      	ldrh	r3, [r7, #6]
 8017426:	4293      	cmp	r3, r2
 8017428:	bfa8      	it	ge
 801742a:	4613      	movge	r3, r2
 801742c:	82bb      	strh	r3, [r7, #20]
    psrc += 2; /* Adjust the offset ignoring the String Len and Descriptor type */
 801742e:	68fb      	ldr	r3, [r7, #12]
 8017430:	3302      	adds	r3, #2
 8017432:	60fb      	str	r3, [r7, #12]
    
    for (idx = 0; idx < strlength; idx+=2 )
 8017434:	2300      	movs	r3, #0
 8017436:	82fb      	strh	r3, [r7, #22]
 8017438:	e00b      	b.n	8017452 <USBH_ParseStringDesc+0x4c>
    {/* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 801743a:	8afb      	ldrh	r3, [r7, #22]
 801743c:	68fa      	ldr	r2, [r7, #12]
 801743e:	4413      	add	r3, r2
 8017440:	781a      	ldrb	r2, [r3, #0]
 8017442:	68bb      	ldr	r3, [r7, #8]
 8017444:	701a      	strb	r2, [r3, #0]
      pdest++;
 8017446:	68bb      	ldr	r3, [r7, #8]
 8017448:	3301      	adds	r3, #1
 801744a:	60bb      	str	r3, [r7, #8]
    for (idx = 0; idx < strlength; idx+=2 )
 801744c:	8afb      	ldrh	r3, [r7, #22]
 801744e:	3302      	adds	r3, #2
 8017450:	82fb      	strh	r3, [r7, #22]
 8017452:	8afa      	ldrh	r2, [r7, #22]
 8017454:	8abb      	ldrh	r3, [r7, #20]
 8017456:	429a      	cmp	r2, r3
 8017458:	d3ef      	bcc.n	801743a <USBH_ParseStringDesc+0x34>
    }  
    *pdest = 0; /* mark end of string */  
 801745a:	68bb      	ldr	r3, [r7, #8]
 801745c:	2200      	movs	r2, #0
 801745e:	701a      	strb	r2, [r3, #0]
  }
}
 8017460:	bf00      	nop
 8017462:	371c      	adds	r7, #28
 8017464:	46bd      	mov	sp, r7
 8017466:	f85d 7b04 	ldr.w	r7, [sp], #4
 801746a:	4770      	bx	lr

0801746c <USBH_GetNextDesc>:
* @param  buf: Buffer where the cfg descriptor is available
* @param  ptr: data popinter inside the cfg descriptor
* @retval next header
*/
USBH_DescHeader_t  *USBH_GetNextDesc (uint8_t   *pbuf, uint16_t  *ptr)
{
 801746c:	b480      	push	{r7}
 801746e:	b085      	sub	sp, #20
 8017470:	af00      	add	r7, sp, #0
 8017472:	6078      	str	r0, [r7, #4]
 8017474:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;
 
  *ptr += ((USBH_DescHeader_t *)pbuf)->bLength;  
 8017476:	683b      	ldr	r3, [r7, #0]
 8017478:	881a      	ldrh	r2, [r3, #0]
 801747a:	687b      	ldr	r3, [r7, #4]
 801747c:	781b      	ldrb	r3, [r3, #0]
 801747e:	b29b      	uxth	r3, r3
 8017480:	4413      	add	r3, r2
 8017482:	b29a      	uxth	r2, r3
 8017484:	683b      	ldr	r3, [r7, #0]
 8017486:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)((uint8_t *)pbuf + \
         ((USBH_DescHeader_t *)pbuf)->bLength);
 8017488:	687b      	ldr	r3, [r7, #4]
 801748a:	781b      	ldrb	r3, [r3, #0]
 801748c:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)((uint8_t *)pbuf + \
 801748e:	687b      	ldr	r3, [r7, #4]
 8017490:	4413      	add	r3, r2
 8017492:	60fb      	str	r3, [r7, #12]
 
  return(pnext);
 8017494:	68fb      	ldr	r3, [r7, #12]
}
 8017496:	4618      	mov	r0, r3
 8017498:	3714      	adds	r7, #20
 801749a:	46bd      	mov	sp, r7
 801749c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80174a0:	4770      	bx	lr
 80174a2:	bf00      	nop

080174a4 <InitTaskContext>:
 * @details    This function is called to initialize the stack frame of the 
 *             task being created.
 ******************************************************************************
 */
OS_STK *InitTaskContext(FUNCPtr task,void *param,OS_STK *pstk)
{
 80174a4:	b480      	push	{r7}
 80174a6:	b087      	sub	sp, #28
 80174a8:	af00      	add	r7, sp, #0
 80174aa:	60f8      	str	r0, [r7, #12]
 80174ac:	60b9      	str	r1, [r7, #8]
 80174ae:	607a      	str	r2, [r7, #4]
    OS_STK *context;
	context  = pstk;
 80174b0:	687b      	ldr	r3, [r7, #4]
 80174b2:	617b      	str	r3, [r7, #20]
#if CFG_CHIP_TYPE == 3
	context      = context - 18;
#endif
    *(context--) = (U32)0x01000000L;      /* xPSR	        */
 80174b4:	697b      	ldr	r3, [r7, #20]
 80174b6:	1f1a      	subs	r2, r3, #4
 80174b8:	617a      	str	r2, [r7, #20]
 80174ba:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80174be:	601a      	str	r2, [r3, #0]
	*(context--) = (U32)task;             /* Entry point of task.                         */
 80174c0:	697b      	ldr	r3, [r7, #20]
 80174c2:	1f1a      	subs	r2, r3, #4
 80174c4:	617a      	str	r2, [r7, #20]
 80174c6:	68fa      	ldr	r2, [r7, #12]
 80174c8:	601a      	str	r2, [r3, #0]
	*(context)   = (U32)0xFFFFFFFEL;
 80174ca:	697b      	ldr	r3, [r7, #20]
 80174cc:	f06f 0201 	mvn.w	r2, #1
 80174d0:	601a      	str	r2, [r3, #0]
    context      = context - 5;
 80174d2:	697b      	ldr	r3, [r7, #20]
 80174d4:	3b14      	subs	r3, #20
 80174d6:	617b      	str	r3, [r7, #20]
	*(context)   = (U32)param;            /* R0: argument */
 80174d8:	68ba      	ldr	r2, [r7, #8]
 80174da:	697b      	ldr	r3, [r7, #20]
 80174dc:	601a      	str	r2, [r3, #0]
	context      = context - 8;
 80174de:	697b      	ldr	r3, [r7, #20]
 80174e0:	3b20      	subs	r3, #32
 80174e2:	617b      	str	r3, [r7, #20]
#if CFG_CHIP_TYPE == 3
	context      = context - 16;
#endif
//    *(--context) = 0xfffffffd;          /* LR */
  	
    return (context);                   /* Returns location of new stack top. */
 80174e4:	697b      	ldr	r3, [r7, #20]
}
 80174e6:	4618      	mov	r0, r3
 80174e8:	371c      	adds	r7, #28
 80174ea:	46bd      	mov	sp, r7
 80174ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80174f0:	4770      	bx	lr

080174f2 <SysTick_Handler>:
 * @details    This is system tick interrupt headler.		 
 * @note       CoOS may schedule when exiting this ISR. 
 *******************************************************************************
 */ 
void SysTick_Handler(void)
{
 80174f2:	b598      	push	{r3, r4, r7, lr}
 80174f4:	af00      	add	r7, sp, #0
    OSSchedLock++;                  /* Lock scheduler.                        */
 80174f6:	4b20      	ldr	r3, [pc, #128]	; (8017578 <SysTick_Handler+0x86>)
 80174f8:	781b      	ldrb	r3, [r3, #0]
 80174fa:	b2db      	uxtb	r3, r3
 80174fc:	3301      	adds	r3, #1
 80174fe:	b2da      	uxtb	r2, r3
 8017500:	4b1d      	ldr	r3, [pc, #116]	; (8017578 <SysTick_Handler+0x86>)
 8017502:	701a      	strb	r2, [r3, #0]
    OSTickCnt++;                    /* Increment systerm time.                */
 8017504:	4b1d      	ldr	r3, [pc, #116]	; (801757c <SysTick_Handler+0x8a>)
 8017506:	e9d3 1200 	ldrd	r1, r2, [r3]
 801750a:	1c4b      	adds	r3, r1, #1
 801750c:	f142 0400 	adc.w	r4, r2, #0
 8017510:	4a1a      	ldr	r2, [pc, #104]	; (801757c <SysTick_Handler+0x8a>)
 8017512:	e9c2 3400 	strd	r3, r4, [r2]
#if CFG_TASK_WAITTING_EN >0    
    if(DlyList != Co_NULL)             /* Have task in delay list?               */
 8017516:	4b1a      	ldr	r3, [pc, #104]	; (8017580 <SysTick_Handler+0x8e>)
 8017518:	681b      	ldr	r3, [r3, #0]
 801751a:	2b00      	cmp	r3, #0
 801751c:	d010      	beq.n	8017540 <SysTick_Handler+0x4e>
    {
        if(DlyList->delayTick > 1)  /* Delay time > 1?                        */
 801751e:	4b18      	ldr	r3, [pc, #96]	; (8017580 <SysTick_Handler+0x8e>)
 8017520:	681b      	ldr	r3, [r3, #0]
 8017522:	6a1b      	ldr	r3, [r3, #32]
 8017524:	2b01      	cmp	r3, #1
 8017526:	d905      	bls.n	8017534 <SysTick_Handler+0x42>
        {
			DlyList->delayTick--;   /* Decrease delay time of the list head.  */         
 8017528:	4b15      	ldr	r3, [pc, #84]	; (8017580 <SysTick_Handler+0x8e>)
 801752a:	681b      	ldr	r3, [r3, #0]
 801752c:	6a1a      	ldr	r2, [r3, #32]
 801752e:	3a01      	subs	r2, #1
 8017530:	621a      	str	r2, [r3, #32]
 8017532:	e005      	b.n	8017540 <SysTick_Handler+0x4e>
        }
		else
		{
			DlyList->delayTick = 0;
 8017534:	4b12      	ldr	r3, [pc, #72]	; (8017580 <SysTick_Handler+0x8e>)
 8017536:	681b      	ldr	r3, [r3, #0]
 8017538:	2200      	movs	r2, #0
 801753a:	621a      	str	r2, [r3, #32]
			isr_TimeDispose();       /* Call hander for delay time list        */
 801753c:	f003 f94c 	bl	801a7d8 <isr_TimeDispose>
		}
    }
#endif
    
#if CFG_TMR_EN > 0	
    if(TmrList != Co_NULL)             /* Have timer in working?                 */
 8017540:	4b10      	ldr	r3, [pc, #64]	; (8017584 <SysTick_Handler+0x92>)
 8017542:	681b      	ldr	r3, [r3, #0]
 8017544:	2b00      	cmp	r3, #0
 8017546:	d010      	beq.n	801756a <SysTick_Handler+0x78>
    {
        if(TmrList->tmrCnt > 1)     /* Timer time > 1?                        */
 8017548:	4b0e      	ldr	r3, [pc, #56]	; (8017584 <SysTick_Handler+0x92>)
 801754a:	681b      	ldr	r3, [r3, #0]
 801754c:	685b      	ldr	r3, [r3, #4]
 801754e:	2b01      	cmp	r3, #1
 8017550:	d905      	bls.n	801755e <SysTick_Handler+0x6c>
        {
			TmrList->tmrCnt--;      /* Decrease timer time of the list head.  */        
 8017552:	4b0c      	ldr	r3, [pc, #48]	; (8017584 <SysTick_Handler+0x92>)
 8017554:	681b      	ldr	r3, [r3, #0]
 8017556:	685a      	ldr	r2, [r3, #4]
 8017558:	3a01      	subs	r2, #1
 801755a:	605a      	str	r2, [r3, #4]
 801755c:	e005      	b.n	801756a <SysTick_Handler+0x78>
        }
		else
		{
			TmrList->tmrCnt = 0;
 801755e:	4b09      	ldr	r3, [pc, #36]	; (8017584 <SysTick_Handler+0x92>)
 8017560:	681b      	ldr	r3, [r3, #0]
 8017562:	2200      	movs	r2, #0
 8017564:	605a      	str	r2, [r3, #4]
			isr_TmrDispose();         /* Call hander for timer list             */
 8017566:	f003 fca7 	bl	801aeb8 <isr_TmrDispose>
		}
    }	
#endif
	TaskSchedReq = Co_TRUE;
 801756a:	4b07      	ldr	r3, [pc, #28]	; (8017588 <SysTick_Handler+0x96>)
 801756c:	2201      	movs	r2, #1
 801756e:	701a      	strb	r2, [r3, #0]
    OsSchedUnlock();
 8017570:	f000 f83e 	bl	80175f0 <OsSchedUnlock>
}
 8017574:	bf00      	nop
 8017576:	bd98      	pop	{r3, r4, r7, pc}
 8017578:	20003749 	.word	0x20003749
 801757c:	20003740 	.word	0x20003740
 8017580:	2000d738 	.word	0x2000d738
 8017584:	2000d76c 	.word	0x2000d76c
 8017588:	2000374a 	.word	0x2000374a

0801758c <CoEnterISR>:
 *             interrupt handler code,and call CoExitISR() after your handler
 *             code and before exiting from ISR.	 
 *******************************************************************************
 */
void CoEnterISR(void)
{
 801758c:	b580      	push	{r7, lr}
 801758e:	af00      	add	r7, sp, #0
    Inc8(&OSIntNesting);                /* OSIntNesting increment             */
 8017590:	4802      	ldr	r0, [pc, #8]	; (801759c <CoEnterISR+0x10>)
 8017592:	f001 fd85 	bl	80190a0 <Inc8>
}
 8017596:	bf00      	nop
 8017598:	bd80      	pop	{r7, pc}
 801759a:	bf00      	nop
 801759c:	20003748 	.word	0x20003748

080175a0 <CoExitISR>:
 *
 * @note 
 *******************************************************************************
 */
void CoExitISR(void)
{
 80175a0:	b580      	push	{r7, lr}
 80175a2:	af00      	add	r7, sp, #0
    Dec8(&OSIntNesting);                /* OSIntNesting decrease              */
 80175a4:	480f      	ldr	r0, [pc, #60]	; (80175e4 <CoExitISR+0x44>)
 80175a6:	f001 fd93 	bl	80190d0 <Dec8>
    if( OSIntNesting == 0)              /* Is OSIntNesting == 0?              */
 80175aa:	4b0e      	ldr	r3, [pc, #56]	; (80175e4 <CoExitISR+0x44>)
 80175ac:	781b      	ldrb	r3, [r3, #0]
 80175ae:	b2db      	uxtb	r3, r3
 80175b0:	2b00      	cmp	r3, #0
 80175b2:	d114      	bne.n	80175de <CoExitISR+0x3e>
    {
        if(TaskSchedReq == Co_TRUE)
 80175b4:	4b0c      	ldr	r3, [pc, #48]	; (80175e8 <CoExitISR+0x48>)
 80175b6:	781b      	ldrb	r3, [r3, #0]
 80175b8:	b2db      	uxtb	r3, r3
 80175ba:	2b01      	cmp	r3, #1
 80175bc:	d10f      	bne.n	80175de <CoExitISR+0x3e>
        {
			OSSchedLock++;
 80175be:	4b0b      	ldr	r3, [pc, #44]	; (80175ec <CoExitISR+0x4c>)
 80175c0:	781b      	ldrb	r3, [r3, #0]
 80175c2:	b2db      	uxtb	r3, r3
 80175c4:	3301      	adds	r3, #1
 80175c6:	b2da      	uxtb	r2, r3
 80175c8:	4b08      	ldr	r3, [pc, #32]	; (80175ec <CoExitISR+0x4c>)
 80175ca:	701a      	strb	r2, [r3, #0]
            Schedule();                 /* Call task schedule                 */
 80175cc:	f002 fc78 	bl	8019ec0 <Schedule>
			OSSchedLock--;
 80175d0:	4b06      	ldr	r3, [pc, #24]	; (80175ec <CoExitISR+0x4c>)
 80175d2:	781b      	ldrb	r3, [r3, #0]
 80175d4:	b2db      	uxtb	r3, r3
 80175d6:	3b01      	subs	r3, #1
 80175d8:	b2da      	uxtb	r2, r3
 80175da:	4b04      	ldr	r3, [pc, #16]	; (80175ec <CoExitISR+0x4c>)
 80175dc:	701a      	strb	r2, [r3, #0]
        }
    }
}
 80175de:	bf00      	nop
 80175e0:	bd80      	pop	{r7, pc}
 80175e2:	bf00      	nop
 80175e4:	20003748 	.word	0x20003748
 80175e8:	2000374a 	.word	0x2000374a
 80175ec:	20003749 	.word	0x20003749

080175f0 <OsSchedUnlock>:
 *
 * @note 
 *******************************************************************************
 */
void OsSchedUnlock(void)
{
 80175f0:	b580      	push	{r7, lr}
 80175f2:	af00      	add	r7, sp, #0
    if(OSSchedLock == 1)                /* Is OSSchedLock == 0?               */
 80175f4:	4b0f      	ldr	r3, [pc, #60]	; (8017634 <OsSchedUnlock+0x44>)
 80175f6:	781b      	ldrb	r3, [r3, #0]
 80175f8:	b2db      	uxtb	r3, r3
 80175fa:	2b01      	cmp	r3, #1
 80175fc:	d110      	bne.n	8017620 <OsSchedUnlock+0x30>
    {
#if CFG_TASK_WAITTING_EN > 0
        if(IsrReq == Co_TRUE)
 80175fe:	4b0e      	ldr	r3, [pc, #56]	; (8017638 <OsSchedUnlock+0x48>)
 8017600:	781b      	ldrb	r3, [r3, #0]
 8017602:	2b01      	cmp	r3, #1
 8017604:	d101      	bne.n	801760a <OsSchedUnlock+0x1a>
        {
            RespondSRQ();               /* Respond service request            */	
 8017606:	f002 f9fd 	bl	8019a04 <RespondSRQ>
        }
#endif
        /* Judge task state change or higher PRI task coming in               */
        if(TaskSchedReq == Co_TRUE)
 801760a:	4b0c      	ldr	r3, [pc, #48]	; (801763c <OsSchedUnlock+0x4c>)
 801760c:	781b      	ldrb	r3, [r3, #0]
 801760e:	b2db      	uxtb	r3, r3
 8017610:	2b01      	cmp	r3, #1
 8017612:	d101      	bne.n	8017618 <OsSchedUnlock+0x28>
        {
            Schedule();                 /* Call task schedule                 */
 8017614:	f002 fc54 	bl	8019ec0 <Schedule>
        }
		OSSchedLock = 0;
 8017618:	4b06      	ldr	r3, [pc, #24]	; (8017634 <OsSchedUnlock+0x44>)
 801761a:	2200      	movs	r2, #0
 801761c:	701a      	strb	r2, [r3, #0]
    }
	else
	{
		OSSchedLock--; 	
	}
}
 801761e:	e006      	b.n	801762e <OsSchedUnlock+0x3e>
		OSSchedLock--; 	
 8017620:	4b04      	ldr	r3, [pc, #16]	; (8017634 <OsSchedUnlock+0x44>)
 8017622:	781b      	ldrb	r3, [r3, #0]
 8017624:	b2db      	uxtb	r3, r3
 8017626:	3b01      	subs	r3, #1
 8017628:	b2da      	uxtb	r2, r3
 801762a:	4b02      	ldr	r3, [pc, #8]	; (8017634 <OsSchedUnlock+0x44>)
 801762c:	701a      	strb	r2, [r3, #0]
}
 801762e:	bf00      	nop
 8017630:	bd80      	pop	{r7, pc}
 8017632:	bf00      	nop
 8017634:	20003749 	.word	0x20003749
 8017638:	2000d594 	.word	0x2000d594
 801763c:	2000374a 	.word	0x2000374a

08017640 <CoSchedLock>:
 *
 * @note 
 *******************************************************************************
 */
void CoSchedLock(void)
{									    
 8017640:	b480      	push	{r7}
 8017642:	af00      	add	r7, sp, #0
    OsSchedLock();                      /* Lock schedule                      */
 8017644:	4b05      	ldr	r3, [pc, #20]	; (801765c <CoSchedLock+0x1c>)
 8017646:	781b      	ldrb	r3, [r3, #0]
 8017648:	b2db      	uxtb	r3, r3
 801764a:	3301      	adds	r3, #1
 801764c:	b2da      	uxtb	r2, r3
 801764e:	4b03      	ldr	r3, [pc, #12]	; (801765c <CoSchedLock+0x1c>)
 8017650:	701a      	strb	r2, [r3, #0]
}
 8017652:	bf00      	nop
 8017654:	46bd      	mov	sp, r7
 8017656:	f85d 7b04 	ldr.w	r7, [sp], #4
 801765a:	4770      	bx	lr
 801765c:	20003749 	.word	0x20003749

08017660 <CoSchedUnlock>:
 *
 * @note 
 *******************************************************************************
 */
void CoSchedUnlock(void)
{
 8017660:	b580      	push	{r7, lr}
 8017662:	af00      	add	r7, sp, #0
    OsSchedUnlock();                    /* Unlock schedule                    */
 8017664:	f7ff ffc4 	bl	80175f0 <OsSchedUnlock>
}
 8017668:	bf00      	nop
 801766a:	bd80      	pop	{r7, pc}

0801766c <CoInitOS>:
 *            OsStart();            // Start multitask.
 * @endcode	
 *******************************************************************************		
 */
void CoInitOS(void)
{
 801766c:	b580      	push	{r7, lr}
 801766e:	af00      	add	r7, sp, #0
    InitSysTick();                /* Initialize system tick.                  */
 8017670:	4b16      	ldr	r3, [pc, #88]	; (80176cc <CoInitOS+0x60>)
 8017672:	4a17      	ldr	r2, [pc, #92]	; (80176d0 <CoInitOS+0x64>)
 8017674:	601a      	str	r2, [r3, #0]
 8017676:	4b17      	ldr	r3, [pc, #92]	; (80176d4 <CoInitOS+0x68>)
 8017678:	2207      	movs	r2, #7
 801767a:	601a      	str	r2, [r3, #0]
    InitInt();                    /* Initialize PendSV,SVC,SysTick interrupt  */	
 801767c:	4b16      	ldr	r3, [pc, #88]	; (80176d8 <CoInitOS+0x6c>)
 801767e:	681b      	ldr	r3, [r3, #0]
 8017680:	4a15      	ldr	r2, [pc, #84]	; (80176d8 <CoInitOS+0x6c>)
 8017682:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8017686:	6013      	str	r3, [r2, #0]
 8017688:	4b14      	ldr	r3, [pc, #80]	; (80176dc <CoInitOS+0x70>)
 801768a:	681b      	ldr	r3, [r3, #0]
 801768c:	4a13      	ldr	r2, [pc, #76]	; (80176dc <CoInitOS+0x70>)
 801768e:	ea6f 4303 	mvn.w	r3, r3, lsl #16
 8017692:	ea6f 4313 	mvn.w	r3, r3, lsr #16
 8017696:	6013      	str	r3, [r2, #0]
    CreateTCBList();              /* Create TCB list.                         */   
 8017698:	f002 fa34 	bl	8019b04 <CreateTCBList>
#if CFG_EVENT_EN > 0				    
    CreateEventList();            /* Create event control list.               */
 801769c:	f000 f84c 	bl	8017738 <CreateEventList>
#endif  
#if CFG_KHEAP_EN > 0
    CoCreateKheap();              /* Create kernel heap within user define    */
 80176a0:	f000 fef6 	bl	8018490 <CoCreateKheap>
#endif   
    OsSchedLock();                /* Lock Schedule                            */ 
 80176a4:	4b0e      	ldr	r3, [pc, #56]	; (80176e0 <CoInitOS+0x74>)
 80176a6:	781b      	ldrb	r3, [r3, #0]
 80176a8:	b2db      	uxtb	r3, r3
 80176aa:	3301      	adds	r3, #1
 80176ac:	b2da      	uxtb	r2, r3
 80176ae:	4b0c      	ldr	r3, [pc, #48]	; (80176e0 <CoInitOS+0x74>)
 80176b0:	701a      	strb	r2, [r3, #0]
                                  /* Create first task -- IDLE task.          */ 
    CoCreateTask(                      CoIdleTask,
 80176b2:	4b0c      	ldr	r3, [pc, #48]	; (80176e4 <CoInitOS+0x78>)
 80176b4:	f44f 52ca 	mov.w	r2, #6464	; 0x1940
 80176b8:	2100      	movs	r1, #0
 80176ba:	480b      	ldr	r0, [pc, #44]	; (80176e8 <CoInitOS+0x7c>)
 80176bc:	f002 fcca 	bl	801a054 <CreateTask>
                                  CFG_LOWEST_PRIO,
                 &idle_stk[CFG_IDLE_STACK_SIZE-1],
                              CFG_IDLE_STACK_SIZE
                 );
				                  /* Set PSP for CoIdleTask coming in */ 
	SetEnvironment(&idle_stk[CFG_IDLE_STACK_SIZE-1]);
 80176c0:	4808      	ldr	r0, [pc, #32]	; (80176e4 <CoInitOS+0x78>)
 80176c2:	f001 fd2b 	bl	801911c <SetEnvironment>
}
 80176c6:	bf00      	nop
 80176c8:	bd80      	pop	{r7, pc}
 80176ca:	bf00      	nop
 80176cc:	e000e014 	.word	0xe000e014
 80176d0:	000afc7f 	.word	0x000afc7f
 80176d4:	e000e010 	.word	0xe000e010
 80176d8:	e000ed1c 	.word	0xe000ed1c
 80176dc:	e000ed20 	.word	0xe000ed20
 80176e0:	20003749 	.word	0x20003749
 80176e4:	2000d718 	.word	0x2000d718
 80176e8:	08018479 	.word	0x08018479

080176ec <CoStartOS>:
 * @note       This function must be called to start OS when you use CoOS,and must
 *             call after CoOsInit().
 *******************************************************************************
 */
void CoStartOS(void)
{
 80176ec:	b580      	push	{r7, lr}
 80176ee:	af00      	add	r7, sp, #0
    TCBRunning  = &TCBTbl[0];           /* Get running task                     */
 80176f0:	4b09      	ldr	r3, [pc, #36]	; (8017718 <CoStartOS+0x2c>)
 80176f2:	4a0a      	ldr	r2, [pc, #40]	; (801771c <CoStartOS+0x30>)
 80176f4:	601a      	str	r2, [r3, #0]
    TCBNext     = TCBRunning;           /* Set next scheduled task as running task */
 80176f6:	4b08      	ldr	r3, [pc, #32]	; (8017718 <CoStartOS+0x2c>)
 80176f8:	681b      	ldr	r3, [r3, #0]
 80176fa:	4a09      	ldr	r2, [pc, #36]	; (8017720 <CoStartOS+0x34>)
 80176fc:	6013      	str	r3, [r2, #0]
    TCBRunning->state = TASK_RUNNING;   /* Set running task status to RUNNING   */
 80176fe:	4b06      	ldr	r3, [pc, #24]	; (8017718 <CoStartOS+0x2c>)
 8017700:	681b      	ldr	r3, [r3, #0]
 8017702:	2201      	movs	r2, #1
 8017704:	715a      	strb	r2, [r3, #5]
    RemoveFromTCBRdyList(TCBRunning);   /* Remove running task from READY list  */
 8017706:	4b04      	ldr	r3, [pc, #16]	; (8017718 <CoStartOS+0x2c>)
 8017708:	681b      	ldr	r3, [r3, #0]
 801770a:	4618      	mov	r0, r3
 801770c:	f002 fab2 	bl	8019c74 <RemoveFromTCBRdyList>
    OsSchedUnlock();					/* Enable Schedule,call task schedule   */
 8017710:	f7ff ff6e 	bl	80175f0 <OsSchedUnlock>
}
 8017714:	bf00      	nop
 8017716:	bd80      	pop	{r7, pc}
 8017718:	2000d728 	.word	0x2000d728
 801771c:	2000d598 	.word	0x2000d598
 8017720:	2000d724 	.word	0x2000d724

08017724 <CoGetOSVersion>:
 *             the return value corresponds to CooCox's version number multiplied
 *             by 100. In other words, version 1.02 would be returned as 102.         
 *******************************************************************************
 */
OS_VER CoGetOSVersion(void)
{
 8017724:	b480      	push	{r7}
 8017726:	af00      	add	r7, sp, #0
    return OS_VERSION;                  /* Get CooCox CoOS version            */
 8017728:	f44f 738b 	mov.w	r3, #278	; 0x116
}
 801772c:	4618      	mov	r0, r3
 801772e:	46bd      	mov	sp, r7
 8017730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017734:	4770      	bx	lr
 8017736:	bf00      	nop

08017738 <CreateEventList>:
 * @details    This function is called by OSInit() API to create a ECB list,supply
 *             a  pointer to next event control block that not used.	 				
 *******************************************************************************
 */
void CreateEventList(void)
{	
 8017738:	b480      	push	{r7}
 801773a:	b085      	sub	sp, #20
 801773c:	af00      	add	r7, sp, #0
    U8  i;
    P_ECB pecb1;
#if CFG_MAX_EVENT > 1
    P_ECB pecb2;
#endif
    i=0;
 801773e:	2300      	movs	r3, #0
 8017740:	73fb      	strb	r3, [r7, #15]
    pecb1 = &EventTbl[0];               /* Get first item                     */
 8017742:	4b19      	ldr	r3, [pc, #100]	; (80177a8 <CreateEventList+0x70>)
 8017744:	60bb      	str	r3, [r7, #8]
    pecb1->id        = i;               /* Assign ID.                         */
    pecb1->eventType = EVENT_TYPE_INVALID;  /* Sign that not to use.          */
#endif
    
#if CFG_MAX_EVENT > 1             /* Build event list for more than one item  */								   
    pecb2 = &EventTbl[1];
 8017746:	4b19      	ldr	r3, [pc, #100]	; (80177ac <CreateEventList+0x74>)
 8017748:	607b      	str	r3, [r7, #4]
    for(;i< (CFG_MAX_EVENT-1);i++ )
 801774a:	e014      	b.n	8017776 <CreateEventList+0x3e>
    {
        pecb1->eventPtr  = (void*)pecb2;      /* Set link for list            */
 801774c:	68bb      	ldr	r3, [r7, #8]
 801774e:	687a      	ldr	r2, [r7, #4]
 8017750:	601a      	str	r2, [r3, #0]
        pecb1->id        = i;                 /* Assign ID.                   */
 8017752:	68bb      	ldr	r3, [r7, #8]
 8017754:	7bfa      	ldrb	r2, [r7, #15]
 8017756:	711a      	strb	r2, [r3, #4]
        pecb1->eventType = EVENT_TYPE_INVALID;/* Sign that not to use.        */
 8017758:	68ba      	ldr	r2, [r7, #8]
 801775a:	7953      	ldrb	r3, [r2, #5]
 801775c:	2104      	movs	r1, #4
 801775e:	f361 0303 	bfi	r3, r1, #0, #4
 8017762:	7153      	strb	r3, [r2, #5]
        pecb1++;                              /* Get next item                */
 8017764:	68bb      	ldr	r3, [r7, #8]
 8017766:	3310      	adds	r3, #16
 8017768:	60bb      	str	r3, [r7, #8]
        pecb2++;	
 801776a:	687b      	ldr	r3, [r7, #4]
 801776c:	3310      	adds	r3, #16
 801776e:	607b      	str	r3, [r7, #4]
    for(;i< (CFG_MAX_EVENT-1);i++ )
 8017770:	7bfb      	ldrb	r3, [r7, #15]
 8017772:	3301      	adds	r3, #1
 8017774:	73fb      	strb	r3, [r7, #15]
 8017776:	7bfb      	ldrb	r3, [r7, #15]
 8017778:	2b12      	cmp	r3, #18
 801777a:	d9e7      	bls.n	801774c <CreateEventList+0x14>
    }
	pecb1->eventType = EVENT_TYPE_INVALID;    /* Sign that not to use.        */
 801777c:	68ba      	ldr	r2, [r7, #8]
 801777e:	7953      	ldrb	r3, [r2, #5]
 8017780:	2104      	movs	r1, #4
 8017782:	f361 0303 	bfi	r3, r1, #0, #4
 8017786:	7153      	strb	r3, [r2, #5]
    pecb1->eventPtr  = Co_NULL;                  /* Set link for last item       */
 8017788:	68bb      	ldr	r3, [r7, #8]
 801778a:	2200      	movs	r2, #0
 801778c:	601a      	str	r2, [r3, #0]
    pecb1->id        = i;	
 801778e:	68bb      	ldr	r3, [r7, #8]
 8017790:	7bfa      	ldrb	r2, [r7, #15]
 8017792:	711a      	strb	r2, [r3, #4]
#endif
    
    FreeEventList    = &EventTbl[0];          /* Set free event item          */	
 8017794:	4b06      	ldr	r3, [pc, #24]	; (80177b0 <CreateEventList+0x78>)
 8017796:	4a04      	ldr	r2, [pc, #16]	; (80177a8 <CreateEventList+0x70>)
 8017798:	601a      	str	r2, [r3, #0]
}
 801779a:	bf00      	nop
 801779c:	3714      	adds	r7, #20
 801779e:	46bd      	mov	sp, r7
 80177a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80177a4:	4770      	bx	lr
 80177a6:	bf00      	nop
 80177a8:	2000374c 	.word	0x2000374c
 80177ac:	2000375c 	.word	0x2000375c
 80177b0:	2000388c 	.word	0x2000388c

080177b4 <ReleaseECB>:
 * @details    This function is called to release a event control block when a 
 *             event be deleted.
 *******************************************************************************
 */
static void ReleaseECB(P_ECB pecb)
{
 80177b4:	b580      	push	{r7, lr}
 80177b6:	b082      	sub	sp, #8
 80177b8:	af00      	add	r7, sp, #0
 80177ba:	6078      	str	r0, [r7, #4]
    pecb->eventType = EVENT_TYPE_INVALID;     /* Sign that not to use.        */ 
 80177bc:	687a      	ldr	r2, [r7, #4]
 80177be:	7953      	ldrb	r3, [r2, #5]
 80177c0:	2104      	movs	r1, #4
 80177c2:	f361 0303 	bfi	r3, r1, #0, #4
 80177c6:	7153      	strb	r3, [r2, #5]
    OsSchedLock();                            /* Lock schedule                */
 80177c8:	4b09      	ldr	r3, [pc, #36]	; (80177f0 <ReleaseECB+0x3c>)
 80177ca:	781b      	ldrb	r3, [r3, #0]
 80177cc:	b2db      	uxtb	r3, r3
 80177ce:	3301      	adds	r3, #1
 80177d0:	b2da      	uxtb	r2, r3
 80177d2:	4b07      	ldr	r3, [pc, #28]	; (80177f0 <ReleaseECB+0x3c>)
 80177d4:	701a      	strb	r2, [r3, #0]
    pecb->eventPtr  = FreeEventList;          /* Release ECB that event hold  */
 80177d6:	4b07      	ldr	r3, [pc, #28]	; (80177f4 <ReleaseECB+0x40>)
 80177d8:	681a      	ldr	r2, [r3, #0]
 80177da:	687b      	ldr	r3, [r7, #4]
 80177dc:	601a      	str	r2, [r3, #0]
    FreeEventList   = pecb;                   /* Reset free event item        */
 80177de:	4a05      	ldr	r2, [pc, #20]	; (80177f4 <ReleaseECB+0x40>)
 80177e0:	687b      	ldr	r3, [r7, #4]
 80177e2:	6013      	str	r3, [r2, #0]
    OsSchedUnlock();                          /* Unlock schedule              */
 80177e4:	f7ff ff04 	bl	80175f0 <OsSchedUnlock>
}
 80177e8:	bf00      	nop
 80177ea:	3708      	adds	r7, #8
 80177ec:	46bd      	mov	sp, r7
 80177ee:	bd80      	pop	{r7, pc}
 80177f0:	20003749 	.word	0x20003749
 80177f4:	2000388c 	.word	0x2000388c

080177f8 <CreatEvent>:
 *
 * @note       This is a internal function of CooCox CoOS,User can't call.
 *******************************************************************************
 */
P_ECB CreatEvent(U8 eventType,U8 eventSortType,void* eventPtr)
{
 80177f8:	b580      	push	{r7, lr}
 80177fa:	b084      	sub	sp, #16
 80177fc:	af00      	add	r7, sp, #0
 80177fe:	4603      	mov	r3, r0
 8017800:	603a      	str	r2, [r7, #0]
 8017802:	71fb      	strb	r3, [r7, #7]
 8017804:	460b      	mov	r3, r1
 8017806:	71bb      	strb	r3, [r7, #6]
    P_ECB pecb;
    
    OsSchedLock();                      /* Lock schedule                      */
 8017808:	4b1a      	ldr	r3, [pc, #104]	; (8017874 <CreatEvent+0x7c>)
 801780a:	781b      	ldrb	r3, [r3, #0]
 801780c:	b2db      	uxtb	r3, r3
 801780e:	3301      	adds	r3, #1
 8017810:	b2da      	uxtb	r2, r3
 8017812:	4b18      	ldr	r3, [pc, #96]	; (8017874 <CreatEvent+0x7c>)
 8017814:	701a      	strb	r2, [r3, #0]
    if(FreeEventList == Co_NULL)           /* Is there no free evnet item        */
 8017816:	4b18      	ldr	r3, [pc, #96]	; (8017878 <CreatEvent+0x80>)
 8017818:	681b      	ldr	r3, [r3, #0]
 801781a:	2b00      	cmp	r3, #0
 801781c:	d103      	bne.n	8017826 <CreatEvent+0x2e>
    {
        OsSchedUnlock();                /* Yes,unlock schedule                */
 801781e:	f7ff fee7 	bl	80175f0 <OsSchedUnlock>
        return Co_NULL;                    /* Return error                       */
 8017822:	2300      	movs	r3, #0
 8017824:	e022      	b.n	801786c <CreatEvent+0x74>
    }
    pecb          = FreeEventList;/* Assign the free event item to this event */
 8017826:	4b14      	ldr	r3, [pc, #80]	; (8017878 <CreatEvent+0x80>)
 8017828:	681b      	ldr	r3, [r3, #0]
 801782a:	60fb      	str	r3, [r7, #12]
    FreeEventList = FreeEventList->eventPtr;  /* Reset free event item        */
 801782c:	4b12      	ldr	r3, [pc, #72]	; (8017878 <CreatEvent+0x80>)
 801782e:	681b      	ldr	r3, [r3, #0]
 8017830:	681b      	ldr	r3, [r3, #0]
 8017832:	4a11      	ldr	r2, [pc, #68]	; (8017878 <CreatEvent+0x80>)
 8017834:	6013      	str	r3, [r2, #0]
    OsSchedUnlock();                    /* Unlock schedul                     */
 8017836:	f7ff fedb 	bl	80175f0 <OsSchedUnlock>
    
    pecb->eventType     = eventType;    /* Initialize event item as user set  */
 801783a:	79fb      	ldrb	r3, [r7, #7]
 801783c:	f003 030f 	and.w	r3, r3, #15
 8017840:	b2d9      	uxtb	r1, r3
 8017842:	68fa      	ldr	r2, [r7, #12]
 8017844:	7953      	ldrb	r3, [r2, #5]
 8017846:	f361 0303 	bfi	r3, r1, #0, #4
 801784a:	7153      	strb	r3, [r2, #5]
    pecb->eventSortType = eventSortType;
 801784c:	79bb      	ldrb	r3, [r7, #6]
 801784e:	f003 030f 	and.w	r3, r3, #15
 8017852:	b2d9      	uxtb	r1, r3
 8017854:	68fa      	ldr	r2, [r7, #12]
 8017856:	7953      	ldrb	r3, [r2, #5]
 8017858:	f361 1307 	bfi	r3, r1, #4, #4
 801785c:	7153      	strb	r3, [r2, #5]
    pecb->eventPtr      = eventPtr;
 801785e:	68fb      	ldr	r3, [r7, #12]
 8017860:	683a      	ldr	r2, [r7, #0]
 8017862:	601a      	str	r2, [r3, #0]
    pecb->eventTCBList  = Co_NULL;
 8017864:	68fb      	ldr	r3, [r7, #12]
 8017866:	2200      	movs	r2, #0
 8017868:	60da      	str	r2, [r3, #12]
    return pecb;                        /* Return event item pointer          */
 801786a:	68fb      	ldr	r3, [r7, #12]
}
 801786c:	4618      	mov	r0, r3
 801786e:	3710      	adds	r7, #16
 8017870:	46bd      	mov	sp, r7
 8017872:	bd80      	pop	{r7, pc}
 8017874:	20003749 	.word	0x20003749
 8017878:	2000388c 	.word	0x2000388c

0801787c <DeleteEvent>:
 *
 * @note       This is a internal function of Coocox CoOS,user can't call.		
 *******************************************************************************
 */
StatusType DeleteEvent(P_ECB pecb,U8 opt)
{
 801787c:	b580      	push	{r7, lr}
 801787e:	b084      	sub	sp, #16
 8017880:	af00      	add	r7, sp, #0
 8017882:	6078      	str	r0, [r7, #4]
 8017884:	460b      	mov	r3, r1
 8017886:	70fb      	strb	r3, [r7, #3]
    P_OSTCB ptcb;
    if(opt == OPT_DEL_NO_PEND)          /* Do delete event when no task pend? */
 8017888:	78fb      	ldrb	r3, [r7, #3]
 801788a:	2b00      	cmp	r3, #0
 801788c:	d109      	bne.n	80178a2 <DeleteEvent+0x26>
    {
        if(pecb->eventTCBList != Co_NULL)  /* Yes,is there task pend this event? */
 801788e:	687b      	ldr	r3, [r7, #4]
 8017890:	68db      	ldr	r3, [r3, #12]
 8017892:	2b00      	cmp	r3, #0
 8017894:	d001      	beq.n	801789a <DeleteEvent+0x1e>
        {
            return E_TASK_WAITING;      /* Yes,error return                   */
 8017896:	2304      	movs	r3, #4
 8017898:	e030      	b.n	80178fc <DeleteEvent+0x80>
        }
        else
        {
            ReleaseECB(pecb);           /* No,release resource that event hold*/
 801789a:	6878      	ldr	r0, [r7, #4]
 801789c:	f7ff ff8a 	bl	80177b4 <ReleaseECB>
 80178a0:	e02b      	b.n	80178fa <DeleteEvent+0x7e>
        }
    }
    else if(opt == OPT_DEL_ANYWAY)      /* Do delete event anyway?            */
 80178a2:	78fb      	ldrb	r3, [r7, #3]
 80178a4:	2b01      	cmp	r3, #1
 80178a6:	d128      	bne.n	80178fa <DeleteEvent+0x7e>
    {
        OsSchedLock();                      /* Lock schedule                  */
 80178a8:	4b16      	ldr	r3, [pc, #88]	; (8017904 <DeleteEvent+0x88>)
 80178aa:	781b      	ldrb	r3, [r3, #0]
 80178ac:	b2db      	uxtb	r3, r3
 80178ae:	3301      	adds	r3, #1
 80178b0:	b2da      	uxtb	r2, r3
 80178b2:	4b14      	ldr	r3, [pc, #80]	; (8017904 <DeleteEvent+0x88>)
 80178b4:	701a      	strb	r2, [r3, #0]
        while(pecb->eventTCBList != Co_NULL)   /* Is there task pend this event? */
 80178b6:	e017      	b.n	80178e8 <DeleteEvent+0x6c>
        {                                   /* Yes,remove it                  */
            ptcb = pecb->eventTCBList;/* Get first task in event waiting list */
 80178b8:	687b      	ldr	r3, [r7, #4]
 80178ba:	68db      	ldr	r3, [r3, #12]
 80178bc:	60fb      	str	r3, [r7, #12]
            if(ptcb->delayTick != INVALID_VALUE) /* Is task in delay list?    */
 80178be:	68fb      	ldr	r3, [r7, #12]
 80178c0:	6a1b      	ldr	r3, [r3, #32]
 80178c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80178c6:	d002      	beq.n	80178ce <DeleteEvent+0x52>
            {
                RemoveDelayList(ptcb);    /* Yes,remove task from delay list  */
 80178c8:	68f8      	ldr	r0, [r7, #12]
 80178ca:	f002 fe15 	bl	801a4f8 <RemoveDelayList>
            }

            /* Set next item as event waiting list head */
            pecb->eventTCBList = ptcb->waitNext; 
 80178ce:	68fb      	ldr	r3, [r7, #12]
 80178d0:	695a      	ldr	r2, [r3, #20]
 80178d2:	687b      	ldr	r3, [r7, #4]
 80178d4:	60da      	str	r2, [r3, #12]
            ptcb->waitNext     = Co_NULL;  /* Clear link for event waiting list  */
 80178d6:	68fb      	ldr	r3, [r7, #12]
 80178d8:	2200      	movs	r2, #0
 80178da:	615a      	str	r2, [r3, #20]
            ptcb->eventID      = INVALID_ID;  /* Sign that not to use.        */
 80178dc:	68fb      	ldr	r3, [r7, #12]
 80178de:	22ff      	movs	r2, #255	; 0xff
 80178e0:	721a      	strb	r2, [r3, #8]

			InsertToTCBRdyList(ptcb);         /* Insert task into ready list  */
 80178e2:	68f8      	ldr	r0, [r7, #12]
 80178e4:	f002 f942 	bl	8019b6c <InsertToTCBRdyList>
        while(pecb->eventTCBList != Co_NULL)   /* Is there task pend this event? */
 80178e8:	687b      	ldr	r3, [r7, #4]
 80178ea:	68db      	ldr	r3, [r3, #12]
 80178ec:	2b00      	cmp	r3, #0
 80178ee:	d1e3      	bne.n	80178b8 <DeleteEvent+0x3c>
        }
        OsSchedUnlock();                  /* Unlock schedule                  */
 80178f0:	f7ff fe7e 	bl	80175f0 <OsSchedUnlock>
        ReleaseECB(pecb);                 /* Release resource that event hold */
 80178f4:	6878      	ldr	r0, [r7, #4]
 80178f6:	f7ff ff5d 	bl	80177b4 <ReleaseECB>
    }
    return E_OK;                          /* Return OK                        */
 80178fa:	2300      	movs	r3, #0
}
 80178fc:	4618      	mov	r0, r3
 80178fe:	3710      	adds	r7, #16
 8017900:	46bd      	mov	sp, r7
 8017902:	bd80      	pop	{r7, pc}
 8017904:	20003749 	.word	0x20003749

08017908 <EventTaskToWait>:
 *                                          as head,lowest priority as end.
 *                                          (Highest-->...-->Lowest-->Co_NULL)
 *******************************************************************************
 */
void EventTaskToWait(P_ECB pecb,P_OSTCB ptcb)
{
 8017908:	b580      	push	{r7, lr}
 801790a:	b084      	sub	sp, #16
 801790c:	af00      	add	r7, sp, #0
 801790e:	6078      	str	r0, [r7, #4]
 8017910:	6039      	str	r1, [r7, #0]
    P_OSTCB ptcb1;
#if (CFG_EVENT_SORT == 2) || (CFG_EVENT_SORT == 3)
    P_OSTCB ptcb2;
#endif
    
    OsSchedLock();                  /* Lock schedule                          */
 8017912:	4b3b      	ldr	r3, [pc, #236]	; (8017a00 <EventTaskToWait+0xf8>)
 8017914:	781b      	ldrb	r3, [r3, #0]
 8017916:	b2db      	uxtb	r3, r3
 8017918:	3301      	adds	r3, #1
 801791a:	b2da      	uxtb	r2, r3
 801791c:	4b38      	ldr	r3, [pc, #224]	; (8017a00 <EventTaskToWait+0xf8>)
 801791e:	701a      	strb	r2, [r3, #0]
    ptcb1 = pecb->eventTCBList;     /* Get first task in event waiting list   */
 8017920:	687b      	ldr	r3, [r7, #4]
 8017922:	68db      	ldr	r3, [r3, #12]
 8017924:	60fb      	str	r3, [r7, #12]
    ptcb->eventID = pecb->id;       /* Set event ID for task                  */
 8017926:	687b      	ldr	r3, [r7, #4]
 8017928:	791a      	ldrb	r2, [r3, #4]
 801792a:	683b      	ldr	r3, [r7, #0]
 801792c:	721a      	strb	r2, [r3, #8]
    
#if CFG_EVENT_SORT == 3             /* Does event waiting list sort as FIFO?  */
                              
    if(pecb->eventSortType == EVENT_SORT_TYPE_FIFO)	
 801792e:	687b      	ldr	r3, [r7, #4]
 8017930:	795b      	ldrb	r3, [r3, #5]
 8017932:	f023 030f 	bic.w	r3, r3, #15
 8017936:	b2db      	uxtb	r3, r3
 8017938:	2b10      	cmp	r3, #16
 801793a:	d114      	bne.n	8017966 <EventTaskToWait+0x5e>
#endif
    
#if (CFG_EVENT_SORT == 1) || (CFG_EVENT_SORT == 3)
    {
        if(ptcb1 == Co_NULL)                 /* Is no item in event waiting list?*/
 801793c:	68fb      	ldr	r3, [r7, #12]
 801793e:	2b00      	cmp	r3, #0
 8017940:	d106      	bne.n	8017950 <EventTaskToWait+0x48>
        {
            pecb->eventTCBList = ptcb;    /* Yes,set task as first item       */
 8017942:	687b      	ldr	r3, [r7, #4]
 8017944:	683a      	ldr	r2, [r7, #0]
 8017946:	60da      	str	r2, [r3, #12]
 8017948:	e04e      	b.n	80179e8 <EventTaskToWait+0xe0>
        }
        else
        {								
            while(ptcb1->waitNext != Co_NULL)/* No,insert task in last           */
            {
                ptcb1 = ptcb1->waitNext;	
 801794a:	68fb      	ldr	r3, [r7, #12]
 801794c:	695b      	ldr	r3, [r3, #20]
 801794e:	60fb      	str	r3, [r7, #12]
            while(ptcb1->waitNext != Co_NULL)/* No,insert task in last           */
 8017950:	68fb      	ldr	r3, [r7, #12]
 8017952:	695b      	ldr	r3, [r3, #20]
 8017954:	2b00      	cmp	r3, #0
 8017956:	d1f8      	bne.n	801794a <EventTaskToWait+0x42>
            }	
            ptcb1->waitNext = ptcb;       /* Set link for list                */
 8017958:	68fb      	ldr	r3, [r7, #12]
 801795a:	683a      	ldr	r2, [r7, #0]
 801795c:	615a      	str	r2, [r3, #20]
            ptcb->waitPrev  = ptcb1;	
 801795e:	683b      	ldr	r3, [r7, #0]
 8017960:	68fa      	ldr	r2, [r7, #12]
 8017962:	619a      	str	r2, [r3, #24]
 8017964:	e040      	b.n	80179e8 <EventTaskToWait+0xe0>
        }
    }
#endif
    
#if CFG_EVENT_SORT ==3 /* Does event waiting list sort as preemptive priority?*/                           
    else if(pecb->eventSortType == EVENT_SORT_TYPE_PRIO)
 8017966:	687b      	ldr	r3, [r7, #4]
 8017968:	795b      	ldrb	r3, [r3, #5]
 801796a:	f023 030f 	bic.w	r3, r3, #15
 801796e:	b2db      	uxtb	r3, r3
 8017970:	2b20      	cmp	r3, #32
 8017972:	d139      	bne.n	80179e8 <EventTaskToWait+0xe0>
#endif  
#if (CFG_EVENT_SORT == 2) || (CFG_EVENT_SORT == 3)
    {
        if(ptcb1 == Co_NULL)               /* Is no item in event waiting list?  */
 8017974:	68fb      	ldr	r3, [r7, #12]
 8017976:	2b00      	cmp	r3, #0
 8017978:	d103      	bne.n	8017982 <EventTaskToWait+0x7a>
        {
            pecb->eventTCBList = ptcb;  /* Yes,set task as first item         */
 801797a:	687b      	ldr	r3, [r7, #4]
 801797c:	683a      	ldr	r2, [r7, #0]
 801797e:	60da      	str	r2, [r3, #12]
 8017980:	e032      	b.n	80179e8 <EventTaskToWait+0xe0>
        }
        /* Is PRI of task higher than list first item?                        */
        else if(ptcb1->prio > ptcb->prio) 
 8017982:	68fb      	ldr	r3, [r7, #12]
 8017984:	791a      	ldrb	r2, [r3, #4]
 8017986:	683b      	ldr	r3, [r7, #0]
 8017988:	791b      	ldrb	r3, [r3, #4]
 801798a:	429a      	cmp	r2, r3
 801798c:	d909      	bls.n	80179a2 <EventTaskToWait+0x9a>
        {
            pecb->eventTCBList = ptcb;  /* Reset task as first item           */
 801798e:	687b      	ldr	r3, [r7, #4]
 8017990:	683a      	ldr	r2, [r7, #0]
 8017992:	60da      	str	r2, [r3, #12]
            ptcb->waitNext     = ptcb1; /* Set link for list                  */
 8017994:	683b      	ldr	r3, [r7, #0]
 8017996:	68fa      	ldr	r2, [r7, #12]
 8017998:	615a      	str	r2, [r3, #20]
            ptcb1->waitPrev    = ptcb;	
 801799a:	68fb      	ldr	r3, [r7, #12]
 801799c:	683a      	ldr	r2, [r7, #0]
 801799e:	619a      	str	r2, [r3, #24]
 80179a0:	e022      	b.n	80179e8 <EventTaskToWait+0xe0>
        }
        else                            /* No,find correct place to insert    */
        {								
            ptcb2 = ptcb1->waitNext;
 80179a2:	68fb      	ldr	r3, [r7, #12]
 80179a4:	695b      	ldr	r3, [r3, #20]
 80179a6:	60bb      	str	r3, [r7, #8]
            while(ptcb2 != Co_NULL)        /* Is last item?                      */
 80179a8:	e00a      	b.n	80179c0 <EventTaskToWait+0xb8>
            {	                          
                if(ptcb2->prio > ptcb->prio)  /* No,is correct place?         */
 80179aa:	68bb      	ldr	r3, [r7, #8]
 80179ac:	791a      	ldrb	r2, [r3, #4]
 80179ae:	683b      	ldr	r3, [r7, #0]
 80179b0:	791b      	ldrb	r3, [r3, #4]
 80179b2:	429a      	cmp	r2, r3
 80179b4:	d808      	bhi.n	80179c8 <EventTaskToWait+0xc0>
                { 
                    break;                    /* Yes,break Circulation        */
                }
                ptcb1 = ptcb2;                /* Save current item            */
 80179b6:	68bb      	ldr	r3, [r7, #8]
 80179b8:	60fb      	str	r3, [r7, #12]
                ptcb2 = ptcb2->waitNext;      /* Get next item                */
 80179ba:	68bb      	ldr	r3, [r7, #8]
 80179bc:	695b      	ldr	r3, [r3, #20]
 80179be:	60bb      	str	r3, [r7, #8]
            while(ptcb2 != Co_NULL)        /* Is last item?                      */
 80179c0:	68bb      	ldr	r3, [r7, #8]
 80179c2:	2b00      	cmp	r3, #0
 80179c4:	d1f1      	bne.n	80179aa <EventTaskToWait+0xa2>
 80179c6:	e000      	b.n	80179ca <EventTaskToWait+0xc2>
                    break;                    /* Yes,break Circulation        */
 80179c8:	bf00      	nop
            }
            ptcb1->waitNext = ptcb;           /* Set link for list            */
 80179ca:	68fb      	ldr	r3, [r7, #12]
 80179cc:	683a      	ldr	r2, [r7, #0]
 80179ce:	615a      	str	r2, [r3, #20]
            ptcb->waitPrev  = ptcb1;
 80179d0:	683b      	ldr	r3, [r7, #0]
 80179d2:	68fa      	ldr	r2, [r7, #12]
 80179d4:	619a      	str	r2, [r3, #24]
            ptcb->waitNext  = ptcb2;
 80179d6:	683b      	ldr	r3, [r7, #0]
 80179d8:	68ba      	ldr	r2, [r7, #8]
 80179da:	615a      	str	r2, [r3, #20]
            if(ptcb2 != Co_NULL)
 80179dc:	68bb      	ldr	r3, [r7, #8]
 80179de:	2b00      	cmp	r3, #0
 80179e0:	d002      	beq.n	80179e8 <EventTaskToWait+0xe0>
            {
                ptcb2->waitPrev = ptcb;	
 80179e2:	68bb      	ldr	r3, [r7, #8]
 80179e4:	683a      	ldr	r2, [r7, #0]
 80179e6:	619a      	str	r2, [r3, #24]
            }
        }		
    }
#endif
    ptcb->state = TASK_WAITING;     /* Set task status to TASK_WAITING state  */
 80179e8:	683b      	ldr	r3, [r7, #0]
 80179ea:	2202      	movs	r2, #2
 80179ec:	715a      	strb	r2, [r3, #5]
    TaskSchedReq = Co_TRUE;
 80179ee:	4b05      	ldr	r3, [pc, #20]	; (8017a04 <EventTaskToWait+0xfc>)
 80179f0:	2201      	movs	r2, #1
 80179f2:	701a      	strb	r2, [r3, #0]
    OsSchedUnlock();                /* Unlock schedule,and call task schedule */
 80179f4:	f7ff fdfc 	bl	80175f0 <OsSchedUnlock>
}
 80179f8:	bf00      	nop
 80179fa:	3710      	adds	r7, #16
 80179fc:	46bd      	mov	sp, r7
 80179fe:	bd80      	pop	{r7, pc}
 8017a00:	20003749 	.word	0x20003749
 8017a04:	2000374a 	.word	0x2000374a

08017a08 <EventTaskToRdy>:
 * @details    This function is called to remove a task from event wait list,and	 
 *             then insert it into the READY list.
 *******************************************************************************
 */
void EventTaskToRdy(P_ECB pecb)
{
 8017a08:	b580      	push	{r7, lr}
 8017a0a:	b084      	sub	sp, #16
 8017a0c:	af00      	add	r7, sp, #0
 8017a0e:	6078      	str	r0, [r7, #4]
    P_OSTCB ptcb;
#if CFG_QUEUE_EN >0
    P_QCB   pqcb;
#endif
    ptcb = pecb->eventTCBList;
 8017a10:	687b      	ldr	r3, [r7, #4]
 8017a12:	68db      	ldr	r3, [r3, #12]
 8017a14:	60fb      	str	r3, [r7, #12]
    if(ptcb == Co_NULL)
 8017a16:	68fb      	ldr	r3, [r7, #12]
 8017a18:	2b00      	cmp	r3, #0
 8017a1a:	d054      	beq.n	8017ac6 <EventTaskToRdy+0xbe>
        return;
    
    pecb->eventTCBList = ptcb->waitNext;/* Get first task in event waiting list*/
 8017a1c:	68fb      	ldr	r3, [r7, #12]
 8017a1e:	695a      	ldr	r2, [r3, #20]
 8017a20:	687b      	ldr	r3, [r7, #4]
 8017a22:	60da      	str	r2, [r3, #12]
    if(pecb->eventTCBList != Co_NULL)      /* Is no item in event waiting list?  */
 8017a24:	687b      	ldr	r3, [r7, #4]
 8017a26:	68db      	ldr	r3, [r3, #12]
 8017a28:	2b00      	cmp	r3, #0
 8017a2a:	d003      	beq.n	8017a34 <EventTaskToRdy+0x2c>
    {
        pecb->eventTCBList->waitPrev = Co_NULL; /* No,clear link for first item  */
 8017a2c:	687b      	ldr	r3, [r7, #4]
 8017a2e:	68db      	ldr	r3, [r3, #12]
 8017a30:	2200      	movs	r2, #0
 8017a32:	619a      	str	r2, [r3, #24]
    }
    
    ptcb->waitNext = Co_NULL;                /* Clear event waiting link for task*/
 8017a34:	68fb      	ldr	r3, [r7, #12]
 8017a36:	2200      	movs	r2, #0
 8017a38:	615a      	str	r2, [r3, #20]
    ptcb->eventID  = INVALID_ID;          /* Sign that not to use.            */
 8017a3a:	68fb      	ldr	r3, [r7, #12]
 8017a3c:	22ff      	movs	r2, #255	; 0xff
 8017a3e:	721a      	strb	r2, [r3, #8]
    
    if(ptcb->delayTick != INVALID_VALUE)  /* Is task in delay list?           */		         
 8017a40:	68fb      	ldr	r3, [r7, #12]
 8017a42:	6a1b      	ldr	r3, [r3, #32]
 8017a44:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8017a48:	d002      	beq.n	8017a50 <EventTaskToRdy+0x48>
    {
        RemoveDelayList(ptcb);            /* Yes,remove task from DELAY list  */
 8017a4a:	68f8      	ldr	r0, [r7, #12]
 8017a4c:	f002 fd54 	bl	801a4f8 <RemoveDelayList>
    }
#if CFG_MAILBOX_EN >0
    if(pecb->eventType == EVENT_TYPE_MBOX)/* Is it a mailbox event?           */
 8017a50:	687b      	ldr	r3, [r7, #4]
 8017a52:	795b      	ldrb	r3, [r3, #5]
 8017a54:	f003 030f 	and.w	r3, r3, #15
 8017a58:	b2db      	uxtb	r3, r3
 8017a5a:	2b02      	cmp	r3, #2
 8017a5c:	d107      	bne.n	8017a6e <EventTaskToRdy+0x66>
    {
        ptcb->pmail    = pecb->eventPtr;  /* Yes,send mail to task            */
 8017a5e:	687b      	ldr	r3, [r7, #4]
 8017a60:	681a      	ldr	r2, [r3, #0]
 8017a62:	68fb      	ldr	r3, [r7, #12]
 8017a64:	611a      	str	r2, [r3, #16]
        pecb->eventPtr = Co_NULL;            /* Clear event sign                 */
 8017a66:	687b      	ldr	r3, [r7, #4]
 8017a68:	2200      	movs	r2, #0
 8017a6a:	601a      	str	r2, [r3, #0]
 8017a6c:	e01e      	b.n	8017aac <EventTaskToRdy+0xa4>
        //pecb->eventCounter--;
    }
#endif
#if CFG_QUEUE_EN >0
    else if(pecb->eventType == EVENT_TYPE_QUEUE)  /* Is it a queue event?     */
 8017a6e:	687b      	ldr	r3, [r7, #4]
 8017a70:	795b      	ldrb	r3, [r3, #5]
 8017a72:	f003 030f 	and.w	r3, r3, #15
 8017a76:	b2db      	uxtb	r3, r3
 8017a78:	2b03      	cmp	r3, #3
 8017a7a:	d10c      	bne.n	8017a96 <EventTaskToRdy+0x8e>
    {										   
        pqcb        = (P_QCB)pecb->eventPtr;      /* Yes,get queue pointer    */
 8017a7c:	687b      	ldr	r3, [r7, #4]
 8017a7e:	681b      	ldr	r3, [r3, #0]
 8017a80:	60bb      	str	r3, [r7, #8]
        ptcb->pmail = *(pqcb->qStart + pqcb->head);   /* Send mail to task    */
 8017a82:	68bb      	ldr	r3, [r7, #8]
 8017a84:	681a      	ldr	r2, [r3, #0]
 8017a86:	68bb      	ldr	r3, [r7, #8]
 8017a88:	88db      	ldrh	r3, [r3, #6]
 8017a8a:	009b      	lsls	r3, r3, #2
 8017a8c:	4413      	add	r3, r2
 8017a8e:	681a      	ldr	r2, [r3, #0]
 8017a90:	68fb      	ldr	r3, [r7, #12]
 8017a92:	611a      	str	r2, [r3, #16]
 8017a94:	e00a      	b.n	8017aac <EventTaskToRdy+0xa4>
        //}
    }
#endif

#if CFG_SEM_EN >0
    else if(pecb->eventType == EVENT_TYPE_SEM)/* Is it a semaphore event?     */
 8017a96:	687b      	ldr	r3, [r7, #4]
 8017a98:	795b      	ldrb	r3, [r3, #5]
 8017a9a:	f003 030f 	and.w	r3, r3, #15
 8017a9e:	b2db      	uxtb	r3, r3
 8017aa0:	2b01      	cmp	r3, #1
 8017aa2:	d103      	bne.n	8017aac <EventTaskToRdy+0xa4>
    {
        //pecb->eventCounter--;                 /* Yes,clear event sign         */
        ptcb->pmail = (void*)0xffffffff;      /* Indicate task woke by event  */
 8017aa4:	68fb      	ldr	r3, [r7, #12]
 8017aa6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8017aaa:	611a      	str	r2, [r3, #16]
    }
#endif
	if(ptcb == TCBRunning)
 8017aac:	4b08      	ldr	r3, [pc, #32]	; (8017ad0 <EventTaskToRdy+0xc8>)
 8017aae:	681b      	ldr	r3, [r3, #0]
 8017ab0:	68fa      	ldr	r2, [r7, #12]
 8017ab2:	429a      	cmp	r2, r3
 8017ab4:	d103      	bne.n	8017abe <EventTaskToRdy+0xb6>
	{
		ptcb->state = TASK_RUNNING;
 8017ab6:	68fb      	ldr	r3, [r7, #12]
 8017ab8:	2201      	movs	r2, #1
 8017aba:	715a      	strb	r2, [r3, #5]
 8017abc:	e004      	b.n	8017ac8 <EventTaskToRdy+0xc0>
	} 
	else
	{
		InsertToTCBRdyList(ptcb);            /* Insert task into ready list  */
 8017abe:	68f8      	ldr	r0, [r7, #12]
 8017ac0:	f002 f854 	bl	8019b6c <InsertToTCBRdyList>
 8017ac4:	e000      	b.n	8017ac8 <EventTaskToRdy+0xc0>
        return;
 8017ac6:	bf00      	nop
	}
}
 8017ac8:	3710      	adds	r7, #16
 8017aca:	46bd      	mov	sp, r7
 8017acc:	bd80      	pop	{r7, pc}
 8017ace:	bf00      	nop
 8017ad0:	2000d728 	.word	0x2000d728

08017ad4 <RemoveEventWaittingList>:
 * @details    This function is called to remove a task from event wait list,and	 
 *             then insert it to the ready list.
 *******************************************************************************
 */
void RemoveEventWaittingList(P_OSTCB ptcb)
{
 8017ad4:	b480      	push	{r7}
 8017ad6:	b085      	sub	sp, #20
 8017ad8:	af00      	add	r7, sp, #0
 8017ada:	6078      	str	r0, [r7, #4]
    P_ECB pecb;
    pecb = &EventTbl[ptcb->eventID];    /* Get event control block            */
 8017adc:	687b      	ldr	r3, [r7, #4]
 8017ade:	7a1b      	ldrb	r3, [r3, #8]
 8017ae0:	011b      	lsls	r3, r3, #4
 8017ae2:	4a22      	ldr	r2, [pc, #136]	; (8017b6c <RemoveEventWaittingList+0x98>)
 8017ae4:	4413      	add	r3, r2
 8017ae6:	60fb      	str	r3, [r7, #12]
    
    /* Is there only one item in event waiting list?                          */
    if((ptcb->waitNext == Co_NULL) && (ptcb->waitPrev == Co_NULL))
 8017ae8:	687b      	ldr	r3, [r7, #4]
 8017aea:	695b      	ldr	r3, [r3, #20]
 8017aec:	2b00      	cmp	r3, #0
 8017aee:	d107      	bne.n	8017b00 <RemoveEventWaittingList+0x2c>
 8017af0:	687b      	ldr	r3, [r7, #4]
 8017af2:	699b      	ldr	r3, [r3, #24]
 8017af4:	2b00      	cmp	r3, #0
 8017af6:	d103      	bne.n	8017b00 <RemoveEventWaittingList+0x2c>
    {
        pecb->eventTCBList = Co_NULL;      /* Yes,set event waiting list as Co_NULL */
 8017af8:	68fb      	ldr	r3, [r7, #12]
 8017afa:	2200      	movs	r2, #0
 8017afc:	60da      	str	r2, [r3, #12]
 8017afe:	e02b      	b.n	8017b58 <RemoveEventWaittingList+0x84>
    }
    else if(ptcb->waitPrev == Co_NULL)/* Is the first item in event waiting list?*/
 8017b00:	687b      	ldr	r3, [r7, #4]
 8017b02:	699b      	ldr	r3, [r3, #24]
 8017b04:	2b00      	cmp	r3, #0
 8017b06:	d10b      	bne.n	8017b20 <RemoveEventWaittingList+0x4c>
    {
        /* Yes,remove task from list,and reset event waiting list             */
        ptcb->waitNext->waitPrev = Co_NULL;
 8017b08:	687b      	ldr	r3, [r7, #4]
 8017b0a:	695b      	ldr	r3, [r3, #20]
 8017b0c:	2200      	movs	r2, #0
 8017b0e:	619a      	str	r2, [r3, #24]
		pecb->eventTCBList = ptcb->waitNext;	
 8017b10:	687b      	ldr	r3, [r7, #4]
 8017b12:	695a      	ldr	r2, [r3, #20]
 8017b14:	68fb      	ldr	r3, [r7, #12]
 8017b16:	60da      	str	r2, [r3, #12]
        ptcb->waitNext = Co_NULL;
 8017b18:	687b      	ldr	r3, [r7, #4]
 8017b1a:	2200      	movs	r2, #0
 8017b1c:	615a      	str	r2, [r3, #20]
 8017b1e:	e01b      	b.n	8017b58 <RemoveEventWaittingList+0x84>
    }
    else if(ptcb->waitNext == Co_NULL)/* Is the last item in event waiting list? */
 8017b20:	687b      	ldr	r3, [r7, #4]
 8017b22:	695b      	ldr	r3, [r3, #20]
 8017b24:	2b00      	cmp	r3, #0
 8017b26:	d107      	bne.n	8017b38 <RemoveEventWaittingList+0x64>
    {
        ptcb->waitPrev->waitNext = Co_NULL;  /* Yes,remove task form list        */
 8017b28:	687b      	ldr	r3, [r7, #4]
 8017b2a:	699b      	ldr	r3, [r3, #24]
 8017b2c:	2200      	movs	r2, #0
 8017b2e:	615a      	str	r2, [r3, #20]
        ptcb->waitPrev = Co_NULL;
 8017b30:	687b      	ldr	r3, [r7, #4]
 8017b32:	2200      	movs	r2, #0
 8017b34:	619a      	str	r2, [r3, #24]
 8017b36:	e00f      	b.n	8017b58 <RemoveEventWaittingList+0x84>
    }
    else                                  /* No, remove task from list        */
    {										
        ptcb->waitPrev->waitNext = ptcb->waitNext;
 8017b38:	687b      	ldr	r3, [r7, #4]
 8017b3a:	699b      	ldr	r3, [r3, #24]
 8017b3c:	687a      	ldr	r2, [r7, #4]
 8017b3e:	6952      	ldr	r2, [r2, #20]
 8017b40:	615a      	str	r2, [r3, #20]
        ptcb->waitNext->waitPrev = ptcb->waitPrev;
 8017b42:	687b      	ldr	r3, [r7, #4]
 8017b44:	695b      	ldr	r3, [r3, #20]
 8017b46:	687a      	ldr	r2, [r7, #4]
 8017b48:	6992      	ldr	r2, [r2, #24]
 8017b4a:	619a      	str	r2, [r3, #24]
        ptcb->waitPrev = Co_NULL;
 8017b4c:	687b      	ldr	r3, [r7, #4]
 8017b4e:	2200      	movs	r2, #0
 8017b50:	619a      	str	r2, [r3, #24]
        ptcb->waitNext = Co_NULL;
 8017b52:	687b      	ldr	r3, [r7, #4]
 8017b54:	2200      	movs	r2, #0
 8017b56:	615a      	str	r2, [r3, #20]
    }
    ptcb->eventID  = INVALID_ID;          /* Sign that not to use.            */
 8017b58:	687b      	ldr	r3, [r7, #4]
 8017b5a:	22ff      	movs	r2, #255	; 0xff
 8017b5c:	721a      	strb	r2, [r3, #8]
}
 8017b5e:	bf00      	nop
 8017b60:	3714      	adds	r7, #20
 8017b62:	46bd      	mov	sp, r7
 8017b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b68:	4770      	bx	lr
 8017b6a:	bf00      	nop
 8017b6c:	2000374c 	.word	0x2000374c

08017b70 <CoCreateFlag>:
 * @details    This function use to create a event flag.	 
 * @note 
 *******************************************************************************
 */
OS_FlagID CoCreateFlag(BOOL bAutoReset,BOOL bInitialState)
{
 8017b70:	b580      	push	{r7, lr}
 8017b72:	b084      	sub	sp, #16
 8017b74:	af00      	add	r7, sp, #0
 8017b76:	4603      	mov	r3, r0
 8017b78:	460a      	mov	r2, r1
 8017b7a:	71fb      	strb	r3, [r7, #7]
 8017b7c:	4613      	mov	r3, r2
 8017b7e:	71bb      	strb	r3, [r7, #6]
    U8  i;
    OsSchedLock();
 8017b80:	4b1f      	ldr	r3, [pc, #124]	; (8017c00 <CoCreateFlag+0x90>)
 8017b82:	781b      	ldrb	r3, [r3, #0]
 8017b84:	b2db      	uxtb	r3, r3
 8017b86:	3301      	adds	r3, #1
 8017b88:	b2da      	uxtb	r2, r3
 8017b8a:	4b1d      	ldr	r3, [pc, #116]	; (8017c00 <CoCreateFlag+0x90>)
 8017b8c:	701a      	strb	r2, [r3, #0]
    
    for(i=0;i<FLAG_MAX_NUM;i++)
 8017b8e:	2300      	movs	r3, #0
 8017b90:	73fb      	strb	r3, [r7, #15]
 8017b92:	e02a      	b.n	8017bea <CoCreateFlag+0x7a>
    {
        /* Assign a free flag control block                                   */
        if((FlagCrl.flagActive&(1<<i)) == 0 )
 8017b94:	4b1b      	ldr	r3, [pc, #108]	; (8017c04 <CoCreateFlag+0x94>)
 8017b96:	689b      	ldr	r3, [r3, #8]
 8017b98:	7bfa      	ldrb	r2, [r7, #15]
 8017b9a:	2101      	movs	r1, #1
 8017b9c:	fa01 f202 	lsl.w	r2, r1, r2
 8017ba0:	4013      	ands	r3, r2
 8017ba2:	2b00      	cmp	r3, #0
 8017ba4:	d11e      	bne.n	8017be4 <CoCreateFlag+0x74>
        {
            FlagCrl.flagActive |= (1<<i);         /* Initialize active flag   */
 8017ba6:	4b17      	ldr	r3, [pc, #92]	; (8017c04 <CoCreateFlag+0x94>)
 8017ba8:	689b      	ldr	r3, [r3, #8]
 8017baa:	7bfa      	ldrb	r2, [r7, #15]
 8017bac:	2101      	movs	r1, #1
 8017bae:	fa01 f202 	lsl.w	r2, r1, r2
 8017bb2:	4313      	orrs	r3, r2
 8017bb4:	4a13      	ldr	r2, [pc, #76]	; (8017c04 <CoCreateFlag+0x94>)
 8017bb6:	6093      	str	r3, [r2, #8]
            FlagCrl.flagRdy    |= (bInitialState<<i);/* Initialize ready flag */
 8017bb8:	4b12      	ldr	r3, [pc, #72]	; (8017c04 <CoCreateFlag+0x94>)
 8017bba:	681b      	ldr	r3, [r3, #0]
 8017bbc:	79b9      	ldrb	r1, [r7, #6]
 8017bbe:	7bfa      	ldrb	r2, [r7, #15]
 8017bc0:	fa01 f202 	lsl.w	r2, r1, r2
 8017bc4:	4313      	orrs	r3, r2
 8017bc6:	4a0f      	ldr	r2, [pc, #60]	; (8017c04 <CoCreateFlag+0x94>)
 8017bc8:	6013      	str	r3, [r2, #0]
            FlagCrl.resetOpt   |= (bAutoReset<<i);/* Initialize reset option  */
 8017bca:	4b0e      	ldr	r3, [pc, #56]	; (8017c04 <CoCreateFlag+0x94>)
 8017bcc:	685b      	ldr	r3, [r3, #4]
 8017bce:	79f9      	ldrb	r1, [r7, #7]
 8017bd0:	7bfa      	ldrb	r2, [r7, #15]
 8017bd2:	fa01 f202 	lsl.w	r2, r1, r2
 8017bd6:	4313      	orrs	r3, r2
 8017bd8:	4a0a      	ldr	r2, [pc, #40]	; (8017c04 <CoCreateFlag+0x94>)
 8017bda:	6053      	str	r3, [r2, #4]
            OsSchedUnlock();
 8017bdc:	f7ff fd08 	bl	80175f0 <OsSchedUnlock>
            return i ;                  /* Return Flag ID                     */
 8017be0:	7bfb      	ldrb	r3, [r7, #15]
 8017be2:	e008      	b.n	8017bf6 <CoCreateFlag+0x86>
    for(i=0;i<FLAG_MAX_NUM;i++)
 8017be4:	7bfb      	ldrb	r3, [r7, #15]
 8017be6:	3301      	adds	r3, #1
 8017be8:	73fb      	strb	r3, [r7, #15]
 8017bea:	7bfb      	ldrb	r3, [r7, #15]
 8017bec:	2b1f      	cmp	r3, #31
 8017bee:	d9d1      	bls.n	8017b94 <CoCreateFlag+0x24>
        }	
    }
    OsSchedUnlock();
 8017bf0:	f7ff fcfe 	bl	80175f0 <OsSchedUnlock>
    
    return E_CREATE_FAIL;               /* There is no free flag control block*/	
 8017bf4:	23ff      	movs	r3, #255	; 0xff
}
 8017bf6:	4618      	mov	r0, r3
 8017bf8:	3710      	adds	r7, #16
 8017bfa:	46bd      	mov	sp, r7
 8017bfc:	bd80      	pop	{r7, pc}
 8017bfe:	bf00      	nop
 8017c00:	20003749 	.word	0x20003749
 8017c04:	20003890 	.word	0x20003890

08017c08 <CoDelFlag>:
 * @details    This function is called to delete a event flag.
 * @note 
 *******************************************************************************
 */
StatusType CoDelFlag(OS_FlagID id,U8 opt)
{
 8017c08:	b580      	push	{r7, lr}
 8017c0a:	b084      	sub	sp, #16
 8017c0c:	af00      	add	r7, sp, #0
 8017c0e:	4603      	mov	r3, r0
 8017c10:	460a      	mov	r2, r1
 8017c12:	71fb      	strb	r3, [r7, #7]
 8017c14:	4613      	mov	r3, r2
 8017c16:	71bb      	strb	r3, [r7, #6]
    P_FLAG_NODE pnode;
    P_FCB pfcb;
    pfcb  = &FlagCrl;
 8017c18:	4b3e      	ldr	r3, [pc, #248]	; (8017d14 <CoDelFlag+0x10c>)
 8017c1a:	60bb      	str	r3, [r7, #8]
    if(OSIntNesting > 0)                /* If be called from ISR              */
 8017c1c:	4b3e      	ldr	r3, [pc, #248]	; (8017d18 <CoDelFlag+0x110>)
 8017c1e:	781b      	ldrb	r3, [r3, #0]
 8017c20:	b2db      	uxtb	r3, r3
 8017c22:	2b00      	cmp	r3, #0
 8017c24:	d001      	beq.n	8017c2a <CoDelFlag+0x22>
    {
        return E_CALL;
 8017c26:	2303      	movs	r3, #3
 8017c28:	e070      	b.n	8017d0c <CoDelFlag+0x104>
    }
#if CFG_PAR_CHECKOUT_EN >0
    if((pfcb->flagActive&(1<<id)) == 0) /* Flag is valid or not               */
 8017c2a:	68bb      	ldr	r3, [r7, #8]
 8017c2c:	689b      	ldr	r3, [r3, #8]
 8017c2e:	79fa      	ldrb	r2, [r7, #7]
 8017c30:	2101      	movs	r1, #1
 8017c32:	fa01 f202 	lsl.w	r2, r1, r2
 8017c36:	4013      	ands	r3, r2
 8017c38:	2b00      	cmp	r3, #0
 8017c3a:	d101      	bne.n	8017c40 <CoDelFlag+0x38>
    {
        return E_INVALID_ID;	
 8017c3c:	2301      	movs	r3, #1
 8017c3e:	e065      	b.n	8017d0c <CoDelFlag+0x104>
    }
#endif
    OsSchedLock();
 8017c40:	4b36      	ldr	r3, [pc, #216]	; (8017d1c <CoDelFlag+0x114>)
 8017c42:	781b      	ldrb	r3, [r3, #0]
 8017c44:	b2db      	uxtb	r3, r3
 8017c46:	3301      	adds	r3, #1
 8017c48:	b2da      	uxtb	r2, r3
 8017c4a:	4b34      	ldr	r3, [pc, #208]	; (8017d1c <CoDelFlag+0x114>)
 8017c4c:	701a      	strb	r2, [r3, #0]
    pnode = pfcb->headNode;
 8017c4e:	68bb      	ldr	r3, [r7, #8]
 8017c50:	68db      	ldr	r3, [r3, #12]
 8017c52:	60fb      	str	r3, [r7, #12]
    
    while(pnode != Co_NULL)                /* Ready all tasks waiting for flags  */
 8017c54:	e036      	b.n	8017cc4 <CoDelFlag+0xbc>
    {
        if((pnode->waitFlags&(1<<id)) != 0) /* If no task is waiting on flags */
 8017c56:	68fb      	ldr	r3, [r7, #12]
 8017c58:	689b      	ldr	r3, [r3, #8]
 8017c5a:	79fa      	ldrb	r2, [r7, #7]
 8017c5c:	2101      	movs	r1, #1
 8017c5e:	fa01 f202 	lsl.w	r2, r1, r2
 8017c62:	4013      	ands	r3, r2
 8017c64:	2b00      	cmp	r3, #0
 8017c66:	d02a      	beq.n	8017cbe <CoDelFlag+0xb6>
    	  {
            if(opt == OPT_DEL_NO_PEND)      /* Delete flag if no task waiting */
 8017c68:	79bb      	ldrb	r3, [r7, #6]
 8017c6a:	2b00      	cmp	r3, #0
 8017c6c:	d103      	bne.n	8017c76 <CoDelFlag+0x6e>
            {
              	OsSchedUnlock();
 8017c6e:	f7ff fcbf 	bl	80175f0 <OsSchedUnlock>
               	return E_TASK_WAITING;
 8017c72:	2304      	movs	r3, #4
 8017c74:	e04a      	b.n	8017d0c <CoDelFlag+0x104>
            }
            else if (opt == OPT_DEL_ANYWAY) /* Always delete the flag         */
 8017c76:	79bb      	ldrb	r3, [r7, #6]
 8017c78:	2b01      	cmp	r3, #1
 8017c7a:	d120      	bne.n	8017cbe <CoDelFlag+0xb6>
            {
                if(pnode->waitType == OPT_WAIT_ALL)
 8017c7c:	68fb      	ldr	r3, [r7, #12]
 8017c7e:	7c1b      	ldrb	r3, [r3, #16]
 8017c80:	2b00      	cmp	r3, #0
 8017c82:	d117      	bne.n	8017cb4 <CoDelFlag+0xac>
                {
                    /* If the flag is only required by NODE                   */
                    if( pnode->waitFlags == (1<<id) )	
 8017c84:	68fb      	ldr	r3, [r7, #12]
 8017c86:	689b      	ldr	r3, [r3, #8]
 8017c88:	79fa      	ldrb	r2, [r7, #7]
 8017c8a:	2101      	movs	r1, #1
 8017c8c:	fa01 f202 	lsl.w	r2, r1, r2
 8017c90:	4293      	cmp	r3, r2
 8017c92:	d104      	bne.n	8017c9e <CoDelFlag+0x96>
                    {
                        /* Remove the NODE from waiting list                  */
                        pnode = RemoveFromLink(pnode); 	
 8017c94:	68f8      	ldr	r0, [r7, #12]
 8017c96:	f000 fb81 	bl	801839c <RemoveFromLink>
 8017c9a:	60f8      	str	r0, [r7, #12]
                        continue;	
 8017c9c:	e012      	b.n	8017cc4 <CoDelFlag+0xbc>
                    }	
                    else
                    {
                        pnode->waitFlags &= ~(1<<id);   /* Update waitflags   */
 8017c9e:	68fb      	ldr	r3, [r7, #12]
 8017ca0:	689b      	ldr	r3, [r3, #8]
 8017ca2:	79fa      	ldrb	r2, [r7, #7]
 8017ca4:	2101      	movs	r1, #1
 8017ca6:	fa01 f202 	lsl.w	r2, r1, r2
 8017caa:	43d2      	mvns	r2, r2
 8017cac:	401a      	ands	r2, r3
 8017cae:	68fb      	ldr	r3, [r7, #12]
 8017cb0:	609a      	str	r2, [r3, #8]
 8017cb2:	e004      	b.n	8017cbe <CoDelFlag+0xb6>
                    }		
                }
                else   							
                {
                    pnode = RemoveFromLink(pnode);
 8017cb4:	68f8      	ldr	r0, [r7, #12]
 8017cb6:	f000 fb71 	bl	801839c <RemoveFromLink>
 8017cba:	60f8      	str	r0, [r7, #12]
                    continue;	
 8017cbc:	e002      	b.n	8017cc4 <CoDelFlag+0xbc>
                }	
            }
        }	
        pnode = pnode->nextNode;		
 8017cbe:	68fb      	ldr	r3, [r7, #12]
 8017cc0:	681b      	ldr	r3, [r3, #0]
 8017cc2:	60fb      	str	r3, [r7, #12]
    while(pnode != Co_NULL)                /* Ready all tasks waiting for flags  */
 8017cc4:	68fb      	ldr	r3, [r7, #12]
 8017cc6:	2b00      	cmp	r3, #0
 8017cc8:	d1c5      	bne.n	8017c56 <CoDelFlag+0x4e>
    }
    
    /* Remove the flag from the flags list */
    pfcb->flagActive &= ~(1<<id);			
 8017cca:	68bb      	ldr	r3, [r7, #8]
 8017ccc:	689b      	ldr	r3, [r3, #8]
 8017cce:	79fa      	ldrb	r2, [r7, #7]
 8017cd0:	2101      	movs	r1, #1
 8017cd2:	fa01 f202 	lsl.w	r2, r1, r2
 8017cd6:	43d2      	mvns	r2, r2
 8017cd8:	401a      	ands	r2, r3
 8017cda:	68bb      	ldr	r3, [r7, #8]
 8017cdc:	609a      	str	r2, [r3, #8]
    pfcb->flagRdy    &= ~(1<<id);
 8017cde:	68bb      	ldr	r3, [r7, #8]
 8017ce0:	681b      	ldr	r3, [r3, #0]
 8017ce2:	79fa      	ldrb	r2, [r7, #7]
 8017ce4:	2101      	movs	r1, #1
 8017ce6:	fa01 f202 	lsl.w	r2, r1, r2
 8017cea:	43d2      	mvns	r2, r2
 8017cec:	401a      	ands	r2, r3
 8017cee:	68bb      	ldr	r3, [r7, #8]
 8017cf0:	601a      	str	r2, [r3, #0]
    pfcb->resetOpt   &= ~(1<<id);
 8017cf2:	68bb      	ldr	r3, [r7, #8]
 8017cf4:	685b      	ldr	r3, [r3, #4]
 8017cf6:	79fa      	ldrb	r2, [r7, #7]
 8017cf8:	2101      	movs	r1, #1
 8017cfa:	fa01 f202 	lsl.w	r2, r1, r2
 8017cfe:	43d2      	mvns	r2, r2
 8017d00:	401a      	ands	r2, r3
 8017d02:	68bb      	ldr	r3, [r7, #8]
 8017d04:	605a      	str	r2, [r3, #4]
    OsSchedUnlock();
 8017d06:	f7ff fc73 	bl	80175f0 <OsSchedUnlock>
    return E_OK;
 8017d0a:	2300      	movs	r3, #0
}
 8017d0c:	4618      	mov	r0, r3
 8017d0e:	3710      	adds	r7, #16
 8017d10:	46bd      	mov	sp, r7
 8017d12:	bd80      	pop	{r7, pc}
 8017d14:	20003890 	.word	0x20003890
 8017d18:	20003748 	.word	0x20003748
 8017d1c:	20003749 	.word	0x20003749

08017d20 <CoAcceptSingleFlag>:
 * @details    This fucntion is called to accept single flag
 * @note 
 *******************************************************************************
 */
StatusType CoAcceptSingleFlag(OS_FlagID id)
{
 8017d20:	b580      	push	{r7, lr}
 8017d22:	b084      	sub	sp, #16
 8017d24:	af00      	add	r7, sp, #0
 8017d26:	4603      	mov	r3, r0
 8017d28:	71fb      	strb	r3, [r7, #7]
    P_FCB pfcb;
    pfcb  = &FlagCrl;
 8017d2a:	4b1c      	ldr	r3, [pc, #112]	; (8017d9c <CoAcceptSingleFlag+0x7c>)
 8017d2c:	60fb      	str	r3, [r7, #12]
#if CFG_PAR_CHECKOUT_EN >0	
    if(id >= FLAG_MAX_NUM)              
 8017d2e:	79fb      	ldrb	r3, [r7, #7]
 8017d30:	2b1f      	cmp	r3, #31
 8017d32:	d901      	bls.n	8017d38 <CoAcceptSingleFlag+0x18>
    {
        return E_INVALID_ID;            /* Invalid 'id',return error          */
 8017d34:	2301      	movs	r3, #1
 8017d36:	e02c      	b.n	8017d92 <CoAcceptSingleFlag+0x72>
    }
    if((pfcb->flagActive&(1<<id)) == 0) 
 8017d38:	68fb      	ldr	r3, [r7, #12]
 8017d3a:	689b      	ldr	r3, [r3, #8]
 8017d3c:	79fa      	ldrb	r2, [r7, #7]
 8017d3e:	2101      	movs	r1, #1
 8017d40:	fa01 f202 	lsl.w	r2, r1, r2
 8017d44:	4013      	ands	r3, r2
 8017d46:	2b00      	cmp	r3, #0
 8017d48:	d101      	bne.n	8017d4e <CoAcceptSingleFlag+0x2e>
    {
        return E_INVALID_ID;            /* Flag is deactive,return error      */
 8017d4a:	2301      	movs	r3, #1
 8017d4c:	e021      	b.n	8017d92 <CoAcceptSingleFlag+0x72>
    }	
#endif
    if((pfcb->flagRdy&(1<<id)) != 0)    /* If the required flag is set        */
 8017d4e:	68fb      	ldr	r3, [r7, #12]
 8017d50:	681b      	ldr	r3, [r3, #0]
 8017d52:	79fa      	ldrb	r2, [r7, #7]
 8017d54:	2101      	movs	r1, #1
 8017d56:	fa01 f202 	lsl.w	r2, r1, r2
 8017d5a:	4013      	ands	r3, r2
 8017d5c:	2b00      	cmp	r3, #0
 8017d5e:	d017      	beq.n	8017d90 <CoAcceptSingleFlag+0x70>
    {
        OsSchedLock()
 8017d60:	4b0f      	ldr	r3, [pc, #60]	; (8017da0 <CoAcceptSingleFlag+0x80>)
 8017d62:	781b      	ldrb	r3, [r3, #0]
 8017d64:	b2db      	uxtb	r3, r3
 8017d66:	3301      	adds	r3, #1
 8017d68:	b2da      	uxtb	r2, r3
 8017d6a:	4b0d      	ldr	r3, [pc, #52]	; (8017da0 <CoAcceptSingleFlag+0x80>)
 8017d6c:	701a      	strb	r2, [r3, #0]
        pfcb->flagRdy &= ~((FlagCrl.resetOpt)&(1<<id)); /* Clear the flag     */
 8017d6e:	68fb      	ldr	r3, [r7, #12]
 8017d70:	681a      	ldr	r2, [r3, #0]
 8017d72:	4b0a      	ldr	r3, [pc, #40]	; (8017d9c <CoAcceptSingleFlag+0x7c>)
 8017d74:	685b      	ldr	r3, [r3, #4]
 8017d76:	79f9      	ldrb	r1, [r7, #7]
 8017d78:	2001      	movs	r0, #1
 8017d7a:	fa00 f101 	lsl.w	r1, r0, r1
 8017d7e:	400b      	ands	r3, r1
 8017d80:	43db      	mvns	r3, r3
 8017d82:	401a      	ands	r2, r3
 8017d84:	68fb      	ldr	r3, [r7, #12]
 8017d86:	601a      	str	r2, [r3, #0]
        OsSchedUnlock();
 8017d88:	f7ff fc32 	bl	80175f0 <OsSchedUnlock>
        return E_OK;
 8017d8c:	2300      	movs	r3, #0
 8017d8e:	e000      	b.n	8017d92 <CoAcceptSingleFlag+0x72>
    }
    else                                /* If the required flag is not set    */
    {
        return E_FLAG_NOT_READY;
 8017d90:	230c      	movs	r3, #12
    }
}
 8017d92:	4618      	mov	r0, r3
 8017d94:	3710      	adds	r7, #16
 8017d96:	46bd      	mov	sp, r7
 8017d98:	bd80      	pop	{r7, pc}
 8017d9a:	bf00      	nop
 8017d9c:	20003890 	.word	0x20003890
 8017da0:	20003749 	.word	0x20003749

08017da4 <CoAcceptMultipleFlags>:
 * @details    This fucntion is called to accept multiple flags. 
 * @note 
 *******************************************************************************
 */
U32 CoAcceptMultipleFlags(U32 flags,U8 waitType,StatusType *perr)
{
 8017da4:	b580      	push	{r7, lr}
 8017da6:	b086      	sub	sp, #24
 8017da8:	af00      	add	r7, sp, #0
 8017daa:	60f8      	str	r0, [r7, #12]
 8017dac:	460b      	mov	r3, r1
 8017dae:	607a      	str	r2, [r7, #4]
 8017db0:	72fb      	strb	r3, [r7, #11]
    U32  springFlag;
    P_FCB pfcb;
    pfcb  = &FlagCrl;
 8017db2:	4b29      	ldr	r3, [pc, #164]	; (8017e58 <CoAcceptMultipleFlags+0xb4>)
 8017db4:	617b      	str	r3, [r7, #20]
    
#if CFG_PAR_CHECKOUT_EN >0	
    if((flags&pfcb->flagActive) != flags )  /* Judge flag is active or not?   */    
 8017db6:	697b      	ldr	r3, [r7, #20]
 8017db8:	689a      	ldr	r2, [r3, #8]
 8017dba:	68fb      	ldr	r3, [r7, #12]
 8017dbc:	4013      	ands	r3, r2
 8017dbe:	68fa      	ldr	r2, [r7, #12]
 8017dc0:	429a      	cmp	r2, r3
 8017dc2:	d004      	beq.n	8017dce <CoAcceptMultipleFlags+0x2a>
    {
        *perr = E_INVALID_PARAMETER;        /* Invalid flags                  */
 8017dc4:	687b      	ldr	r3, [r7, #4]
 8017dc6:	2202      	movs	r2, #2
 8017dc8:	701a      	strb	r2, [r3, #0]
        return 0;
 8017dca:	2300      	movs	r3, #0
 8017dcc:	e040      	b.n	8017e50 <CoAcceptMultipleFlags+0xac>
    }
#endif
    
    springFlag = flags & pfcb->flagRdy;
 8017dce:	697b      	ldr	r3, [r7, #20]
 8017dd0:	681b      	ldr	r3, [r3, #0]
 8017dd2:	68fa      	ldr	r2, [r7, #12]
 8017dd4:	4013      	ands	r3, r2
 8017dd6:	613b      	str	r3, [r7, #16]
    
    OsSchedLock();
 8017dd8:	4b20      	ldr	r3, [pc, #128]	; (8017e5c <CoAcceptMultipleFlags+0xb8>)
 8017dda:	781b      	ldrb	r3, [r3, #0]
 8017ddc:	b2db      	uxtb	r3, r3
 8017dde:	3301      	adds	r3, #1
 8017de0:	b2da      	uxtb	r2, r3
 8017de2:	4b1e      	ldr	r3, [pc, #120]	; (8017e5c <CoAcceptMultipleFlags+0xb8>)
 8017de4:	701a      	strb	r2, [r3, #0]
    /* If any required flags are set */
    if( (springFlag != 0) && (waitType == OPT_WAIT_ANY) )	
 8017de6:	693b      	ldr	r3, [r7, #16]
 8017de8:	2b00      	cmp	r3, #0
 8017dea:	d013      	beq.n	8017e14 <CoAcceptMultipleFlags+0x70>
 8017dec:	7afb      	ldrb	r3, [r7, #11]
 8017dee:	2b01      	cmp	r3, #1
 8017df0:	d110      	bne.n	8017e14 <CoAcceptMultipleFlags+0x70>
    {
        
        pfcb->flagRdy &= ~(springFlag & pfcb->resetOpt);  /* Clear the flags  */
 8017df2:	697b      	ldr	r3, [r7, #20]
 8017df4:	681a      	ldr	r2, [r3, #0]
 8017df6:	697b      	ldr	r3, [r7, #20]
 8017df8:	6859      	ldr	r1, [r3, #4]
 8017dfa:	693b      	ldr	r3, [r7, #16]
 8017dfc:	400b      	ands	r3, r1
 8017dfe:	43db      	mvns	r3, r3
 8017e00:	401a      	ands	r2, r3
 8017e02:	697b      	ldr	r3, [r7, #20]
 8017e04:	601a      	str	r2, [r3, #0]
        OsSchedUnlock();
 8017e06:	f7ff fbf3 	bl	80175f0 <OsSchedUnlock>
        *perr = E_OK;
 8017e0a:	687b      	ldr	r3, [r7, #4]
 8017e0c:	2200      	movs	r2, #0
 8017e0e:	701a      	strb	r2, [r3, #0]
        return springFlag;
 8017e10:	693b      	ldr	r3, [r7, #16]
 8017e12:	e01d      	b.n	8017e50 <CoAcceptMultipleFlags+0xac>
    }
    
    /* If all required flags are set */
    if((springFlag == flags) && (waitType == OPT_WAIT_ALL))
 8017e14:	693a      	ldr	r2, [r7, #16]
 8017e16:	68fb      	ldr	r3, [r7, #12]
 8017e18:	429a      	cmp	r2, r3
 8017e1a:	d113      	bne.n	8017e44 <CoAcceptMultipleFlags+0xa0>
 8017e1c:	7afb      	ldrb	r3, [r7, #11]
 8017e1e:	2b00      	cmp	r3, #0
 8017e20:	d110      	bne.n	8017e44 <CoAcceptMultipleFlags+0xa0>
    {
        pfcb->flagRdy &= ~(springFlag&pfcb->resetOpt);    /* Clear the flags  */
 8017e22:	697b      	ldr	r3, [r7, #20]
 8017e24:	681a      	ldr	r2, [r3, #0]
 8017e26:	697b      	ldr	r3, [r7, #20]
 8017e28:	6859      	ldr	r1, [r3, #4]
 8017e2a:	693b      	ldr	r3, [r7, #16]
 8017e2c:	400b      	ands	r3, r1
 8017e2e:	43db      	mvns	r3, r3
 8017e30:	401a      	ands	r2, r3
 8017e32:	697b      	ldr	r3, [r7, #20]
 8017e34:	601a      	str	r2, [r3, #0]
        OsSchedUnlock();	
 8017e36:	f7ff fbdb 	bl	80175f0 <OsSchedUnlock>
        *perr = E_OK;					
 8017e3a:	687b      	ldr	r3, [r7, #4]
 8017e3c:	2200      	movs	r2, #0
 8017e3e:	701a      	strb	r2, [r3, #0]
        return springFlag;		 	
 8017e40:	693b      	ldr	r3, [r7, #16]
 8017e42:	e005      	b.n	8017e50 <CoAcceptMultipleFlags+0xac>
    }
    OsSchedUnlock();
 8017e44:	f7ff fbd4 	bl	80175f0 <OsSchedUnlock>
    *perr = E_FLAG_NOT_READY;		
 8017e48:	687b      	ldr	r3, [r7, #4]
 8017e4a:	220c      	movs	r2, #12
 8017e4c:	701a      	strb	r2, [r3, #0]
    return 0;
 8017e4e:	2300      	movs	r3, #0
}
 8017e50:	4618      	mov	r0, r3
 8017e52:	3718      	adds	r7, #24
 8017e54:	46bd      	mov	sp, r7
 8017e56:	bd80      	pop	{r7, pc}
 8017e58:	20003890 	.word	0x20003890
 8017e5c:	20003749 	.word	0x20003749

08017e60 <CoWaitForSingleFlag>:
 *                 or RUNNING state.  
 * @note 
 *******************************************************************************
 */
StatusType CoWaitForSingleFlag(OS_FlagID id,U32 timeout)
{
 8017e60:	b580      	push	{r7, lr}
 8017e62:	b08a      	sub	sp, #40	; 0x28
 8017e64:	af00      	add	r7, sp, #0
 8017e66:	4603      	mov	r3, r0
 8017e68:	6039      	str	r1, [r7, #0]
 8017e6a:	71fb      	strb	r3, [r7, #7]
    FLAG_NODE flagNode;
    P_FCB     pfcb;
    P_OSTCB   curTCB;
    
    if(OSIntNesting > 0)                /* See if the caller is ISR           */
 8017e6c:	4b54      	ldr	r3, [pc, #336]	; (8017fc0 <CoWaitForSingleFlag+0x160>)
 8017e6e:	781b      	ldrb	r3, [r3, #0]
 8017e70:	b2db      	uxtb	r3, r3
 8017e72:	2b00      	cmp	r3, #0
 8017e74:	d001      	beq.n	8017e7a <CoWaitForSingleFlag+0x1a>
    {
        return E_CALL;
 8017e76:	2303      	movs	r3, #3
 8017e78:	e09e      	b.n	8017fb8 <CoWaitForSingleFlag+0x158>
    }
    if(OSSchedLock != 0)                /* Schedule is lock?                  */
 8017e7a:	4b52      	ldr	r3, [pc, #328]	; (8017fc4 <CoWaitForSingleFlag+0x164>)
 8017e7c:	781b      	ldrb	r3, [r3, #0]
 8017e7e:	b2db      	uxtb	r3, r3
 8017e80:	2b00      	cmp	r3, #0
 8017e82:	d001      	beq.n	8017e88 <CoWaitForSingleFlag+0x28>
    {								 
        return E_OS_IN_LOCK;            /* Yes,error return                   */
 8017e84:	2315      	movs	r3, #21
 8017e86:	e097      	b.n	8017fb8 <CoWaitForSingleFlag+0x158>
    }	
    
#if CFG_PAR_CHECKOUT_EN >0	
    if(id >= FLAG_MAX_NUM)              /* Judge id is valid or not?          */  
 8017e88:	79fb      	ldrb	r3, [r7, #7]
 8017e8a:	2b1f      	cmp	r3, #31
 8017e8c:	d901      	bls.n	8017e92 <CoWaitForSingleFlag+0x32>
    {
        return E_INVALID_ID;            /* Invalid 'id'                       */      	
 8017e8e:	2301      	movs	r3, #1
 8017e90:	e092      	b.n	8017fb8 <CoWaitForSingleFlag+0x158>
    }
    if((FlagCrl.flagActive&(1<<id)) == 0 )/* Judge flag is active or not?       */
 8017e92:	4b4d      	ldr	r3, [pc, #308]	; (8017fc8 <CoWaitForSingleFlag+0x168>)
 8017e94:	689b      	ldr	r3, [r3, #8]
 8017e96:	79fa      	ldrb	r2, [r7, #7]
 8017e98:	2101      	movs	r1, #1
 8017e9a:	fa01 f202 	lsl.w	r2, r1, r2
 8017e9e:	4013      	ands	r3, r2
 8017ea0:	2b00      	cmp	r3, #0
 8017ea2:	d101      	bne.n	8017ea8 <CoWaitForSingleFlag+0x48>
    {
        return E_INVALID_ID;            /* Flag is deactive ,return error     */
 8017ea4:	2301      	movs	r3, #1
 8017ea6:	e087      	b.n	8017fb8 <CoWaitForSingleFlag+0x158>
    }	
#endif

   	OsSchedLock();
 8017ea8:	4b46      	ldr	r3, [pc, #280]	; (8017fc4 <CoWaitForSingleFlag+0x164>)
 8017eaa:	781b      	ldrb	r3, [r3, #0]
 8017eac:	b2db      	uxtb	r3, r3
 8017eae:	3301      	adds	r3, #1
 8017eb0:	b2da      	uxtb	r2, r3
 8017eb2:	4b44      	ldr	r3, [pc, #272]	; (8017fc4 <CoWaitForSingleFlag+0x164>)
 8017eb4:	701a      	strb	r2, [r3, #0]
	pfcb = &FlagCrl;
 8017eb6:	4b44      	ldr	r3, [pc, #272]	; (8017fc8 <CoWaitForSingleFlag+0x168>)
 8017eb8:	627b      	str	r3, [r7, #36]	; 0x24
    /* See if the required flag is set */
    if((pfcb->flagRdy&(1<<id)) != 0)    /* If the required flag is set        */
 8017eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017ebc:	681b      	ldr	r3, [r3, #0]
 8017ebe:	79fa      	ldrb	r2, [r7, #7]
 8017ec0:	2101      	movs	r1, #1
 8017ec2:	fa01 f202 	lsl.w	r2, r1, r2
 8017ec6:	4013      	ands	r3, r2
 8017ec8:	2b00      	cmp	r3, #0
 8017eca:	d00f      	beq.n	8017eec <CoWaitForSingleFlag+0x8c>
    {
        pfcb->flagRdy &= ~((pfcb->resetOpt&(1<<id))); /* Clear the flag       */
 8017ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017ece:	681a      	ldr	r2, [r3, #0]
 8017ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017ed2:	685b      	ldr	r3, [r3, #4]
 8017ed4:	79f9      	ldrb	r1, [r7, #7]
 8017ed6:	2001      	movs	r0, #1
 8017ed8:	fa00 f101 	lsl.w	r1, r0, r1
 8017edc:	400b      	ands	r3, r1
 8017ede:	43db      	mvns	r3, r3
 8017ee0:	401a      	ands	r2, r3
 8017ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017ee4:	601a      	str	r2, [r3, #0]
        OsSchedUnlock();
 8017ee6:	f7ff fb83 	bl	80175f0 <OsSchedUnlock>
 8017eea:	e064      	b.n	8017fb6 <CoWaitForSingleFlag+0x156>
    }
    else                                /* If the required flag is not set    */
    {
        curTCB = TCBRunning;
 8017eec:	4b37      	ldr	r3, [pc, #220]	; (8017fcc <CoWaitForSingleFlag+0x16c>)
 8017eee:	681b      	ldr	r3, [r3, #0]
 8017ef0:	623b      	str	r3, [r7, #32]
        if(timeout == 0)                /* If time-out is not configured      */
 8017ef2:	683b      	ldr	r3, [r7, #0]
 8017ef4:	2b00      	cmp	r3, #0
 8017ef6:	d12d      	bne.n	8017f54 <CoWaitForSingleFlag+0xf4>
        {
            /* Block task until the required flag is set                      */
            FlagBlock (&flagNode,(1<<id),OPT_WAIT_ONE);  
 8017ef8:	79fb      	ldrb	r3, [r7, #7]
 8017efa:	2201      	movs	r2, #1
 8017efc:	fa02 f303 	lsl.w	r3, r2, r3
 8017f00:	4619      	mov	r1, r3
 8017f02:	f107 030c 	add.w	r3, r7, #12
 8017f06:	2202      	movs	r2, #2
 8017f08:	4618      	mov	r0, r3
 8017f0a:	f000 fa09 	bl	8018320 <FlagBlock>
            curTCB->state  = TASK_WAITING;	
 8017f0e:	6a3b      	ldr	r3, [r7, #32]
 8017f10:	2202      	movs	r2, #2
 8017f12:	715a      	strb	r2, [r3, #5]
			TaskSchedReq   = Co_TRUE;
 8017f14:	4b2e      	ldr	r3, [pc, #184]	; (8017fd0 <CoWaitForSingleFlag+0x170>)
 8017f16:	2201      	movs	r2, #1
 8017f18:	701a      	strb	r2, [r3, #0]
            OsSchedUnlock();
 8017f1a:	f7ff fb69 	bl	80175f0 <OsSchedUnlock>
            
            /* The required flag is set and the task is in running state      */
            curTCB->pnode  = Co_NULL;
 8017f1e:	6a3b      	ldr	r3, [r7, #32]
 8017f20:	2200      	movs	r2, #0
 8017f22:	61da      	str	r2, [r3, #28]
            OsSchedLock();
 8017f24:	4b27      	ldr	r3, [pc, #156]	; (8017fc4 <CoWaitForSingleFlag+0x164>)
 8017f26:	781b      	ldrb	r3, [r3, #0]
 8017f28:	b2db      	uxtb	r3, r3
 8017f2a:	3301      	adds	r3, #1
 8017f2c:	b2da      	uxtb	r2, r3
 8017f2e:	4b25      	ldr	r3, [pc, #148]	; (8017fc4 <CoWaitForSingleFlag+0x164>)
 8017f30:	701a      	strb	r2, [r3, #0]
            
            /* Clear the required flag or not                                 */	
            pfcb->flagRdy &= ~((1<<id)&(pfcb->resetOpt)); 
 8017f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017f34:	681a      	ldr	r2, [r3, #0]
 8017f36:	79fb      	ldrb	r3, [r7, #7]
 8017f38:	2101      	movs	r1, #1
 8017f3a:	fa01 f303 	lsl.w	r3, r1, r3
 8017f3e:	4619      	mov	r1, r3
 8017f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017f42:	685b      	ldr	r3, [r3, #4]
 8017f44:	400b      	ands	r3, r1
 8017f46:	43db      	mvns	r3, r3
 8017f48:	401a      	ands	r2, r3
 8017f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017f4c:	601a      	str	r2, [r3, #0]
            OsSchedUnlock();
 8017f4e:	f7ff fb4f 	bl	80175f0 <OsSchedUnlock>
 8017f52:	e030      	b.n	8017fb6 <CoWaitForSingleFlag+0x156>
        }
        else                            /* If time-out is configured          */
        {
            /* Block task until the required flag is set or time-out occurs   */
            FlagBlock(&flagNode,(1<<id),OPT_WAIT_ONE);
 8017f54:	79fb      	ldrb	r3, [r7, #7]
 8017f56:	2201      	movs	r2, #1
 8017f58:	fa02 f303 	lsl.w	r3, r2, r3
 8017f5c:	4619      	mov	r1, r3
 8017f5e:	f107 030c 	add.w	r3, r7, #12
 8017f62:	2202      	movs	r2, #2
 8017f64:	4618      	mov	r0, r3
 8017f66:	f000 f9db 	bl	8018320 <FlagBlock>
            InsertDelayList(curTCB,timeout);
 8017f6a:	6839      	ldr	r1, [r7, #0]
 8017f6c:	6a38      	ldr	r0, [r7, #32]
 8017f6e:	f002 fa4b 	bl	801a408 <InsertDelayList>
            
            OsSchedUnlock();
 8017f72:	f7ff fb3d 	bl	80175f0 <OsSchedUnlock>
            if(curTCB->pnode == Co_NULL)     /* If time-out occurred             */
 8017f76:	6a3b      	ldr	r3, [r7, #32]
 8017f78:	69db      	ldr	r3, [r3, #28]
 8017f7a:	2b00      	cmp	r3, #0
 8017f7c:	d101      	bne.n	8017f82 <CoWaitForSingleFlag+0x122>
            {
                return E_TIMEOUT;		
 8017f7e:	2305      	movs	r3, #5
 8017f80:	e01a      	b.n	8017fb8 <CoWaitForSingleFlag+0x158>
            }
            else                          /* If flag is set                   */
            {
                curTCB->pnode = Co_NULL;
 8017f82:	6a3b      	ldr	r3, [r7, #32]
 8017f84:	2200      	movs	r2, #0
 8017f86:	61da      	str	r2, [r3, #28]
                OsSchedLock();
 8017f88:	4b0e      	ldr	r3, [pc, #56]	; (8017fc4 <CoWaitForSingleFlag+0x164>)
 8017f8a:	781b      	ldrb	r3, [r3, #0]
 8017f8c:	b2db      	uxtb	r3, r3
 8017f8e:	3301      	adds	r3, #1
 8017f90:	b2da      	uxtb	r2, r3
 8017f92:	4b0c      	ldr	r3, [pc, #48]	; (8017fc4 <CoWaitForSingleFlag+0x164>)
 8017f94:	701a      	strb	r2, [r3, #0]
                
                /* Clear the required flag or not                             */
                pfcb->flagRdy &= ~((1<<id)&(pfcb->resetOpt));	 
 8017f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017f98:	681a      	ldr	r2, [r3, #0]
 8017f9a:	79fb      	ldrb	r3, [r7, #7]
 8017f9c:	2101      	movs	r1, #1
 8017f9e:	fa01 f303 	lsl.w	r3, r1, r3
 8017fa2:	4619      	mov	r1, r3
 8017fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017fa6:	685b      	ldr	r3, [r3, #4]
 8017fa8:	400b      	ands	r3, r1
 8017faa:	43db      	mvns	r3, r3
 8017fac:	401a      	ands	r2, r3
 8017fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017fb0:	601a      	str	r2, [r3, #0]
                OsSchedUnlock();
 8017fb2:	f7ff fb1d 	bl	80175f0 <OsSchedUnlock>
            }	
        }
    }
    return E_OK;	
 8017fb6:	2300      	movs	r3, #0
}
 8017fb8:	4618      	mov	r0, r3
 8017fba:	3728      	adds	r7, #40	; 0x28
 8017fbc:	46bd      	mov	sp, r7
 8017fbe:	bd80      	pop	{r7, pc}
 8017fc0:	20003748 	.word	0x20003748
 8017fc4:	20003749 	.word	0x20003749
 8017fc8:	20003890 	.word	0x20003890
 8017fcc:	2000d728 	.word	0x2000d728
 8017fd0:	2000374a 	.word	0x2000374a

08017fd4 <CoWaitForMultipleFlags>:
 * @details    This function is called to pend a task for waitting multiple flag. 
 * @note 
 *******************************************************************************
 */
U32 CoWaitForMultipleFlags(U32 flags,U8 waitType,U32 timeout,StatusType *perr)
{
 8017fd4:	b580      	push	{r7, lr}
 8017fd6:	b08c      	sub	sp, #48	; 0x30
 8017fd8:	af00      	add	r7, sp, #0
 8017fda:	60f8      	str	r0, [r7, #12]
 8017fdc:	607a      	str	r2, [r7, #4]
 8017fde:	603b      	str	r3, [r7, #0]
 8017fe0:	460b      	mov	r3, r1
 8017fe2:	72fb      	strb	r3, [r7, #11]
    P_FCB     pfcb;
    FLAG_NODE flagNode;
    P_OSTCB   curTCB;
    
   
    if(OSIntNesting > 0)                /* If the caller is ISR               */
 8017fe4:	4b65      	ldr	r3, [pc, #404]	; (801817c <CoWaitForMultipleFlags+0x1a8>)
 8017fe6:	781b      	ldrb	r3, [r3, #0]
 8017fe8:	b2db      	uxtb	r3, r3
 8017fea:	2b00      	cmp	r3, #0
 8017fec:	d004      	beq.n	8017ff8 <CoWaitForMultipleFlags+0x24>
    {
        *perr = E_CALL;
 8017fee:	683b      	ldr	r3, [r7, #0]
 8017ff0:	2203      	movs	r2, #3
 8017ff2:	701a      	strb	r2, [r3, #0]
        return 0;
 8017ff4:	2300      	movs	r3, #0
 8017ff6:	e0bc      	b.n	8018172 <CoWaitForMultipleFlags+0x19e>
    }
    if(OSSchedLock != 0)                /* Schedule is lock?                  */
 8017ff8:	4b61      	ldr	r3, [pc, #388]	; (8018180 <CoWaitForMultipleFlags+0x1ac>)
 8017ffa:	781b      	ldrb	r3, [r3, #0]
 8017ffc:	b2db      	uxtb	r3, r3
 8017ffe:	2b00      	cmp	r3, #0
 8018000:	d004      	beq.n	801800c <CoWaitForMultipleFlags+0x38>
    {	
        *perr = E_OS_IN_LOCK;							 
 8018002:	683b      	ldr	r3, [r7, #0]
 8018004:	2215      	movs	r2, #21
 8018006:	701a      	strb	r2, [r3, #0]
        return 0;                       /* Yes,error return                   */
 8018008:	2300      	movs	r3, #0
 801800a:	e0b2      	b.n	8018172 <CoWaitForMultipleFlags+0x19e>
    }
#if CFG_PAR_CHECKOUT_EN >0  
    if( (flags&FlagCrl.flagActive) != flags )
 801800c:	4b5d      	ldr	r3, [pc, #372]	; (8018184 <CoWaitForMultipleFlags+0x1b0>)
 801800e:	689a      	ldr	r2, [r3, #8]
 8018010:	68fb      	ldr	r3, [r7, #12]
 8018012:	4013      	ands	r3, r2
 8018014:	68fa      	ldr	r2, [r7, #12]
 8018016:	429a      	cmp	r2, r3
 8018018:	d004      	beq.n	8018024 <CoWaitForMultipleFlags+0x50>
    {
        *perr = E_INVALID_PARAMETER;    /* Invalid 'flags'                    */
 801801a:	683b      	ldr	r3, [r7, #0]
 801801c:	2202      	movs	r2, #2
 801801e:	701a      	strb	r2, [r3, #0]
        return 0;
 8018020:	2300      	movs	r3, #0
 8018022:	e0a6      	b.n	8018172 <CoWaitForMultipleFlags+0x19e>
    }
#endif
    OsSchedLock();
 8018024:	4b56      	ldr	r3, [pc, #344]	; (8018180 <CoWaitForMultipleFlags+0x1ac>)
 8018026:	781b      	ldrb	r3, [r3, #0]
 8018028:	b2db      	uxtb	r3, r3
 801802a:	3301      	adds	r3, #1
 801802c:	b2da      	uxtb	r2, r3
 801802e:	4b54      	ldr	r3, [pc, #336]	; (8018180 <CoWaitForMultipleFlags+0x1ac>)
 8018030:	701a      	strb	r2, [r3, #0]
	pfcb = &FlagCrl;
 8018032:	4b54      	ldr	r3, [pc, #336]	; (8018184 <CoWaitForMultipleFlags+0x1b0>)
 8018034:	62fb      	str	r3, [r7, #44]	; 0x2c
    springFlag = flags & pfcb->flagRdy;
 8018036:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018038:	681b      	ldr	r3, [r3, #0]
 801803a:	68fa      	ldr	r2, [r7, #12]
 801803c:	4013      	ands	r3, r2
 801803e:	62bb      	str	r3, [r7, #40]	; 0x28
    
    /* If any required flags are set  */
    if((springFlag != 0) && (waitType == OPT_WAIT_ANY))
 8018040:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018042:	2b00      	cmp	r3, #0
 8018044:	d013      	beq.n	801806e <CoWaitForMultipleFlags+0x9a>
 8018046:	7afb      	ldrb	r3, [r7, #11]
 8018048:	2b01      	cmp	r3, #1
 801804a:	d110      	bne.n	801806e <CoWaitForMultipleFlags+0x9a>
    {
        pfcb->flagRdy &= ~(springFlag & pfcb->resetOpt);  /* Clear the flag   */
 801804c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801804e:	681a      	ldr	r2, [r3, #0]
 8018050:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018052:	6859      	ldr	r1, [r3, #4]
 8018054:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018056:	400b      	ands	r3, r1
 8018058:	43db      	mvns	r3, r3
 801805a:	401a      	ands	r2, r3
 801805c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801805e:	601a      	str	r2, [r3, #0]
        OsSchedUnlock();
 8018060:	f7ff fac6 	bl	80175f0 <OsSchedUnlock>
        *perr = E_OK;
 8018064:	683b      	ldr	r3, [r7, #0]
 8018066:	2200      	movs	r2, #0
 8018068:	701a      	strb	r2, [r3, #0]
        return springFlag;
 801806a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801806c:	e081      	b.n	8018172 <CoWaitForMultipleFlags+0x19e>
    }
    
    /* If all required flags are set */
    if( (springFlag == flags) && (waitType == OPT_WAIT_ALL) )  
 801806e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8018070:	68fb      	ldr	r3, [r7, #12]
 8018072:	429a      	cmp	r2, r3
 8018074:	d113      	bne.n	801809e <CoWaitForMultipleFlags+0xca>
 8018076:	7afb      	ldrb	r3, [r7, #11]
 8018078:	2b00      	cmp	r3, #0
 801807a:	d110      	bne.n	801809e <CoWaitForMultipleFlags+0xca>
    {
        pfcb->flagRdy &= ~(springFlag & pfcb->resetOpt);  /* Clear the flags  */
 801807c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801807e:	681a      	ldr	r2, [r3, #0]
 8018080:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018082:	6859      	ldr	r1, [r3, #4]
 8018084:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018086:	400b      	ands	r3, r1
 8018088:	43db      	mvns	r3, r3
 801808a:	401a      	ands	r2, r3
 801808c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801808e:	601a      	str	r2, [r3, #0]
        OsSchedUnlock();	
 8018090:	f7ff faae 	bl	80175f0 <OsSchedUnlock>
        *perr = E_OK;
 8018094:	683b      	ldr	r3, [r7, #0]
 8018096:	2200      	movs	r2, #0
 8018098:	701a      	strb	r2, [r3, #0]
        return springFlag;		 	
 801809a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801809c:	e069      	b.n	8018172 <CoWaitForMultipleFlags+0x19e>
    }
    
    curTCB = TCBRunning;
 801809e:	4b3a      	ldr	r3, [pc, #232]	; (8018188 <CoWaitForMultipleFlags+0x1b4>)
 80180a0:	681b      	ldr	r3, [r3, #0]
 80180a2:	627b      	str	r3, [r7, #36]	; 0x24
    if(timeout == 0)                    /* If time-out is not configured      */
 80180a4:	687b      	ldr	r3, [r7, #4]
 80180a6:	2b00      	cmp	r3, #0
 80180a8:	d12e      	bne.n	8018108 <CoWaitForMultipleFlags+0x134>
    {
        /* Block task until the required flag are set                         */
        FlagBlock(&flagNode,flags,waitType);
 80180aa:	7afa      	ldrb	r2, [r7, #11]
 80180ac:	f107 0310 	add.w	r3, r7, #16
 80180b0:	68f9      	ldr	r1, [r7, #12]
 80180b2:	4618      	mov	r0, r3
 80180b4:	f000 f934 	bl	8018320 <FlagBlock>
        curTCB->state  = TASK_WAITING;	
 80180b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80180ba:	2202      	movs	r2, #2
 80180bc:	715a      	strb	r2, [r3, #5]
		TaskSchedReq   = Co_TRUE;
 80180be:	4b33      	ldr	r3, [pc, #204]	; (801818c <CoWaitForMultipleFlags+0x1b8>)
 80180c0:	2201      	movs	r2, #1
 80180c2:	701a      	strb	r2, [r3, #0]
		OsSchedUnlock();
 80180c4:	f7ff fa94 	bl	80175f0 <OsSchedUnlock>
        
        curTCB->pnode  = Co_NULL;
 80180c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80180ca:	2200      	movs	r2, #0
 80180cc:	61da      	str	r2, [r3, #28]
        OsSchedLock();			 	
 80180ce:	4b2c      	ldr	r3, [pc, #176]	; (8018180 <CoWaitForMultipleFlags+0x1ac>)
 80180d0:	781b      	ldrb	r3, [r3, #0]
 80180d2:	b2db      	uxtb	r3, r3
 80180d4:	3301      	adds	r3, #1
 80180d6:	b2da      	uxtb	r2, r3
 80180d8:	4b29      	ldr	r3, [pc, #164]	; (8018180 <CoWaitForMultipleFlags+0x1ac>)
 80180da:	701a      	strb	r2, [r3, #0]
        springFlag     = flags & pfcb->flagRdy;		
 80180dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80180de:	681b      	ldr	r3, [r3, #0]
 80180e0:	68fa      	ldr	r2, [r7, #12]
 80180e2:	4013      	ands	r3, r2
 80180e4:	62bb      	str	r3, [r7, #40]	; 0x28
        pfcb->flagRdy &= ~(springFlag & pfcb->resetOpt);/* Clear the flags    */	
 80180e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80180e8:	681a      	ldr	r2, [r3, #0]
 80180ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80180ec:	6859      	ldr	r1, [r3, #4]
 80180ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80180f0:	400b      	ands	r3, r1
 80180f2:	43db      	mvns	r3, r3
 80180f4:	401a      	ands	r2, r3
 80180f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80180f8:	601a      	str	r2, [r3, #0]
        OsSchedUnlock();
 80180fa:	f7ff fa79 	bl	80175f0 <OsSchedUnlock>
        *perr = E_OK;
 80180fe:	683b      	ldr	r3, [r7, #0]
 8018100:	2200      	movs	r2, #0
 8018102:	701a      	strb	r2, [r3, #0]
        return springFlag;
 8018104:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018106:	e034      	b.n	8018172 <CoWaitForMultipleFlags+0x19e>
    }
    else                                /* If time-out is configured          */
    {
        /* Block task until the required flag are set or time-out occurred    */
        FlagBlock(&flagNode,flags,waitType);
 8018108:	7afa      	ldrb	r2, [r7, #11]
 801810a:	f107 0310 	add.w	r3, r7, #16
 801810e:	68f9      	ldr	r1, [r7, #12]
 8018110:	4618      	mov	r0, r3
 8018112:	f000 f905 	bl	8018320 <FlagBlock>
        InsertDelayList(curTCB,timeout);
 8018116:	6879      	ldr	r1, [r7, #4]
 8018118:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801811a:	f002 f975 	bl	801a408 <InsertDelayList>
        
        OsSchedUnlock();
 801811e:	f7ff fa67 	bl	80175f0 <OsSchedUnlock>
        if(curTCB->pnode == Co_NULL)       /* If time-out occurred               */
 8018122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018124:	69db      	ldr	r3, [r3, #28]
 8018126:	2b00      	cmp	r3, #0
 8018128:	d104      	bne.n	8018134 <CoWaitForMultipleFlags+0x160>
        {
            *perr = E_TIMEOUT;
 801812a:	683b      	ldr	r3, [r7, #0]
 801812c:	2205      	movs	r2, #5
 801812e:	701a      	strb	r2, [r3, #0]
            return 0;	
 8018130:	2300      	movs	r3, #0
 8018132:	e01e      	b.n	8018172 <CoWaitForMultipleFlags+0x19e>
        }
        else                            /* If the required flags are set      */
        {
            curTCB->pnode = Co_NULL;
 8018134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018136:	2200      	movs	r2, #0
 8018138:	61da      	str	r2, [r3, #28]
            OsSchedLock();
 801813a:	4b11      	ldr	r3, [pc, #68]	; (8018180 <CoWaitForMultipleFlags+0x1ac>)
 801813c:	781b      	ldrb	r3, [r3, #0]
 801813e:	b2db      	uxtb	r3, r3
 8018140:	3301      	adds	r3, #1
 8018142:	b2da      	uxtb	r2, r3
 8018144:	4b0e      	ldr	r3, [pc, #56]	; (8018180 <CoWaitForMultipleFlags+0x1ac>)
 8018146:	701a      	strb	r2, [r3, #0]
            springFlag    = flags & FlagCrl.flagRdy;
 8018148:	4b0e      	ldr	r3, [pc, #56]	; (8018184 <CoWaitForMultipleFlags+0x1b0>)
 801814a:	681b      	ldr	r3, [r3, #0]
 801814c:	68fa      	ldr	r2, [r7, #12]
 801814e:	4013      	ands	r3, r2
 8018150:	62bb      	str	r3, [r7, #40]	; 0x28
            
            /* Clear the required ready flags or not */
            pfcb->flagRdy &= ~(springFlag & pfcb->resetOpt);	
 8018152:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018154:	681a      	ldr	r2, [r3, #0]
 8018156:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018158:	6859      	ldr	r1, [r3, #4]
 801815a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801815c:	400b      	ands	r3, r1
 801815e:	43db      	mvns	r3, r3
 8018160:	401a      	ands	r2, r3
 8018162:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018164:	601a      	str	r2, [r3, #0]
            OsSchedUnlock();
 8018166:	f7ff fa43 	bl	80175f0 <OsSchedUnlock>
            *perr = E_OK;
 801816a:	683b      	ldr	r3, [r7, #0]
 801816c:	2200      	movs	r2, #0
 801816e:	701a      	strb	r2, [r3, #0]
            return springFlag;	
 8018170:	6abb      	ldr	r3, [r7, #40]	; 0x28
        }	
    }	
}
 8018172:	4618      	mov	r0, r3
 8018174:	3730      	adds	r7, #48	; 0x30
 8018176:	46bd      	mov	sp, r7
 8018178:	bd80      	pop	{r7, pc}
 801817a:	bf00      	nop
 801817c:	20003748 	.word	0x20003748
 8018180:	20003749 	.word	0x20003749
 8018184:	20003890 	.word	0x20003890
 8018188:	2000d728 	.word	0x2000d728
 801818c:	2000374a 	.word	0x2000374a

08018190 <CoClearFlag>:
 *
 * @note 
 *******************************************************************************
 */
StatusType CoClearFlag(OS_FlagID id)
{
 8018190:	b480      	push	{r7}
 8018192:	b085      	sub	sp, #20
 8018194:	af00      	add	r7, sp, #0
 8018196:	4603      	mov	r3, r0
 8018198:	71fb      	strb	r3, [r7, #7]
    P_FCB pfcb;
    pfcb = &FlagCrl;
 801819a:	4b11      	ldr	r3, [pc, #68]	; (80181e0 <CoClearFlag+0x50>)
 801819c:	60fb      	str	r3, [r7, #12]
#if CFG_PAR_CHECKOUT_EN >0
    if(id >= FLAG_MAX_NUM)                  
 801819e:	79fb      	ldrb	r3, [r7, #7]
 80181a0:	2b1f      	cmp	r3, #31
 80181a2:	d901      	bls.n	80181a8 <CoClearFlag+0x18>
    {
        return E_INVALID_ID;                /* Invalid id                     */	
 80181a4:	2301      	movs	r3, #1
 80181a6:	e015      	b.n	80181d4 <CoClearFlag+0x44>
    }
    if((pfcb->flagActive&(1<<id)) == 0)     
 80181a8:	68fb      	ldr	r3, [r7, #12]
 80181aa:	689b      	ldr	r3, [r3, #8]
 80181ac:	79fa      	ldrb	r2, [r7, #7]
 80181ae:	2101      	movs	r1, #1
 80181b0:	fa01 f202 	lsl.w	r2, r1, r2
 80181b4:	4013      	ands	r3, r2
 80181b6:	2b00      	cmp	r3, #0
 80181b8:	d101      	bne.n	80181be <CoClearFlag+0x2e>
    {
        return E_INVALID_ID;                /* Invalid flag                   */
 80181ba:	2301      	movs	r3, #1
 80181bc:	e00a      	b.n	80181d4 <CoClearFlag+0x44>
    }
#endif

    pfcb->flagRdy &= ~(1<<id);              /* Clear the flag                 */
 80181be:	68fb      	ldr	r3, [r7, #12]
 80181c0:	681b      	ldr	r3, [r3, #0]
 80181c2:	79fa      	ldrb	r2, [r7, #7]
 80181c4:	2101      	movs	r1, #1
 80181c6:	fa01 f202 	lsl.w	r2, r1, r2
 80181ca:	43d2      	mvns	r2, r2
 80181cc:	401a      	ands	r2, r3
 80181ce:	68fb      	ldr	r3, [r7, #12]
 80181d0:	601a      	str	r2, [r3, #0]
    return E_OK;
 80181d2:	2300      	movs	r3, #0
}
 80181d4:	4618      	mov	r0, r3
 80181d6:	3714      	adds	r7, #20
 80181d8:	46bd      	mov	sp, r7
 80181da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80181de:	4770      	bx	lr
 80181e0:	20003890 	.word	0x20003890

080181e4 <CoSetFlag>:
 * @details    This function is called to set a flag. 
 * @note 
 *******************************************************************************
 */
StatusType CoSetFlag(OS_FlagID id)
{
 80181e4:	b580      	push	{r7, lr}
 80181e6:	b084      	sub	sp, #16
 80181e8:	af00      	add	r7, sp, #0
 80181ea:	4603      	mov	r3, r0
 80181ec:	71fb      	strb	r3, [r7, #7]
    P_FLAG_NODE pnode;
    P_FCB pfcb;
    pfcb  = &FlagCrl;
 80181ee:	4b39      	ldr	r3, [pc, #228]	; (80182d4 <CoSetFlag+0xf0>)
 80181f0:	60bb      	str	r3, [r7, #8]
    
#if CFG_PAR_CHECKOUT_EN >0
    if(id >= FLAG_MAX_NUM)              /* Flag is valid or not               */							
 80181f2:	79fb      	ldrb	r3, [r7, #7]
 80181f4:	2b1f      	cmp	r3, #31
 80181f6:	d901      	bls.n	80181fc <CoSetFlag+0x18>
    {
        return E_INVALID_ID;            /* Invalid flag id                    */      	
 80181f8:	2301      	movs	r3, #1
 80181fa:	e066      	b.n	80182ca <CoSetFlag+0xe6>
    }
    if((pfcb->flagActive&(1<<id)) == 0)  
 80181fc:	68bb      	ldr	r3, [r7, #8]
 80181fe:	689b      	ldr	r3, [r3, #8]
 8018200:	79fa      	ldrb	r2, [r7, #7]
 8018202:	2101      	movs	r1, #1
 8018204:	fa01 f202 	lsl.w	r2, r1, r2
 8018208:	4013      	ands	r3, r2
 801820a:	2b00      	cmp	r3, #0
 801820c:	d101      	bne.n	8018212 <CoSetFlag+0x2e>
    {
        return E_INVALID_ID;            /* Flag is not exist                  */
 801820e:	2301      	movs	r3, #1
 8018210:	e05b      	b.n	80182ca <CoSetFlag+0xe6>
    }
#endif
    
    if((pfcb->flagRdy&(1<<id)) != 0)    /* Flag had already been set          */
 8018212:	68bb      	ldr	r3, [r7, #8]
 8018214:	681b      	ldr	r3, [r3, #0]
 8018216:	79fa      	ldrb	r2, [r7, #7]
 8018218:	2101      	movs	r1, #1
 801821a:	fa01 f202 	lsl.w	r2, r1, r2
 801821e:	4013      	ands	r3, r2
 8018220:	2b00      	cmp	r3, #0
 8018222:	d001      	beq.n	8018228 <CoSetFlag+0x44>
    {
    	return E_OK;
 8018224:	2300      	movs	r3, #0
 8018226:	e050      	b.n	80182ca <CoSetFlag+0xe6>
    }
    
    pfcb->flagRdy |= (1<<id);           /* Update the flags ready list        */
 8018228:	68bb      	ldr	r3, [r7, #8]
 801822a:	681b      	ldr	r3, [r3, #0]
 801822c:	79fa      	ldrb	r2, [r7, #7]
 801822e:	2101      	movs	r1, #1
 8018230:	fa01 f202 	lsl.w	r2, r1, r2
 8018234:	431a      	orrs	r2, r3
 8018236:	68bb      	ldr	r3, [r7, #8]
 8018238:	601a      	str	r2, [r3, #0]
    
    OsSchedLock();
 801823a:	4b27      	ldr	r3, [pc, #156]	; (80182d8 <CoSetFlag+0xf4>)
 801823c:	781b      	ldrb	r3, [r3, #0]
 801823e:	b2db      	uxtb	r3, r3
 8018240:	3301      	adds	r3, #1
 8018242:	b2da      	uxtb	r2, r3
 8018244:	4b24      	ldr	r3, [pc, #144]	; (80182d8 <CoSetFlag+0xf4>)
 8018246:	701a      	strb	r2, [r3, #0]
    pnode = pfcb->headNode;	  		
 8018248:	68bb      	ldr	r3, [r7, #8]
 801824a:	68db      	ldr	r3, [r3, #12]
 801824c:	60fb      	str	r3, [r7, #12]
    while(pnode != Co_NULL)
 801824e:	e032      	b.n	80182b6 <CoSetFlag+0xd2>
    {
        if(pnode->waitType == OPT_WAIT_ALL)   /* Extract all the bits we want */
 8018250:	68fb      	ldr	r3, [r7, #12]
 8018252:	7c1b      	ldrb	r3, [r3, #16]
 8018254:	2b00      	cmp	r3, #0
 8018256:	d116      	bne.n	8018286 <CoSetFlag+0xa2>
      	{			
            if((pnode->waitFlags&pfcb->flagRdy) == pnode->waitFlags)
 8018258:	68fb      	ldr	r3, [r7, #12]
 801825a:	689a      	ldr	r2, [r3, #8]
 801825c:	68bb      	ldr	r3, [r7, #8]
 801825e:	681b      	ldr	r3, [r3, #0]
 8018260:	401a      	ands	r2, r3
 8018262:	68fb      	ldr	r3, [r7, #12]
 8018264:	689b      	ldr	r3, [r3, #8]
 8018266:	429a      	cmp	r2, r3
 8018268:	d122      	bne.n	80182b0 <CoSetFlag+0xcc>
            {
               /* Remove the flag node from the wait list                    */
                pnode = RemoveFromLink(pnode);		
 801826a:	68f8      	ldr	r0, [r7, #12]
 801826c:	f000 f896 	bl	801839c <RemoveFromLink>
 8018270:	60f8      	str	r0, [r7, #12]
                if((pfcb->resetOpt&(1<<id)) != 0)/* If the flags is auto-reset*/	
 8018272:	68bb      	ldr	r3, [r7, #8]
 8018274:	685b      	ldr	r3, [r3, #4]
 8018276:	79fa      	ldrb	r2, [r7, #7]
 8018278:	2101      	movs	r1, #1
 801827a:	fa01 f202 	lsl.w	r2, r1, r2
 801827e:	4013      	ands	r3, r2
 8018280:	2b00      	cmp	r3, #0
 8018282:	d11c      	bne.n	80182be <CoSetFlag+0xda>
                {
                    break;							
                }
                continue;	
 8018284:	e017      	b.n	80182b6 <CoSetFlag+0xd2>
            }	
      	}
        else                           /* Extract only the bits we want       */	
      	{
            if( (pnode->waitFlags & pfcb->flagRdy) != 0)
 8018286:	68fb      	ldr	r3, [r7, #12]
 8018288:	689a      	ldr	r2, [r3, #8]
 801828a:	68bb      	ldr	r3, [r7, #8]
 801828c:	681b      	ldr	r3, [r3, #0]
 801828e:	4013      	ands	r3, r2
 8018290:	2b00      	cmp	r3, #0
 8018292:	d00d      	beq.n	80182b0 <CoSetFlag+0xcc>
            {
                /* Remove the flag node from the wait list                    */
                pnode = RemoveFromLink(pnode);	 	
 8018294:	68f8      	ldr	r0, [r7, #12]
 8018296:	f000 f881 	bl	801839c <RemoveFromLink>
 801829a:	60f8      	str	r0, [r7, #12]
                if((pfcb->resetOpt&(1<<id)) != 0)
 801829c:	68bb      	ldr	r3, [r7, #8]
 801829e:	685b      	ldr	r3, [r3, #4]
 80182a0:	79fa      	ldrb	r2, [r7, #7]
 80182a2:	2101      	movs	r1, #1
 80182a4:	fa01 f202 	lsl.w	r2, r1, r2
 80182a8:	4013      	ands	r3, r2
 80182aa:	2b00      	cmp	r3, #0
 80182ac:	d109      	bne.n	80182c2 <CoSetFlag+0xde>
                {
                    break;              /* The flags is auto-reset            */	
                }
                continue;
 80182ae:	e002      	b.n	80182b6 <CoSetFlag+0xd2>
            }	
      	}
      	pnode = pnode->nextNode;					
 80182b0:	68fb      	ldr	r3, [r7, #12]
 80182b2:	681b      	ldr	r3, [r3, #0]
 80182b4:	60fb      	str	r3, [r7, #12]
    while(pnode != Co_NULL)
 80182b6:	68fb      	ldr	r3, [r7, #12]
 80182b8:	2b00      	cmp	r3, #0
 80182ba:	d1c9      	bne.n	8018250 <CoSetFlag+0x6c>
 80182bc:	e002      	b.n	80182c4 <CoSetFlag+0xe0>
                    break;							
 80182be:	bf00      	nop
 80182c0:	e000      	b.n	80182c4 <CoSetFlag+0xe0>
                    break;              /* The flags is auto-reset            */	
 80182c2:	bf00      	nop
    }
    OsSchedUnlock();
 80182c4:	f7ff f994 	bl	80175f0 <OsSchedUnlock>
    return E_OK;
 80182c8:	2300      	movs	r3, #0
}
 80182ca:	4618      	mov	r0, r3
 80182cc:	3710      	adds	r7, #16
 80182ce:	46bd      	mov	sp, r7
 80182d0:	bd80      	pop	{r7, pc}
 80182d2:	bf00      	nop
 80182d4:	20003890 	.word	0x20003890
 80182d8:	20003749 	.word	0x20003749

080182dc <isr_SetFlag>:
 * @note 
 *******************************************************************************
 */
#if CFG_MAX_SERVICE_REQUEST > 0
StatusType isr_SetFlag(OS_FlagID id)
{
 80182dc:	b580      	push	{r7, lr}
 80182de:	b082      	sub	sp, #8
 80182e0:	af00      	add	r7, sp, #0
 80182e2:	4603      	mov	r3, r0
 80182e4:	71fb      	strb	r3, [r7, #7]
    if(OSSchedLock > 0)         /* If scheduler is locked,(the caller is ISR) */
 80182e6:	4b0d      	ldr	r3, [pc, #52]	; (801831c <isr_SetFlag+0x40>)
 80182e8:	781b      	ldrb	r3, [r3, #0]
 80182ea:	b2db      	uxtb	r3, r3
 80182ec:	2b00      	cmp	r3, #0
 80182ee:	d00c      	beq.n	801830a <isr_SetFlag+0x2e>
    {
        /* Insert the request into service request queue                      */
        if(InsertInSRQ(FLAG_REQ,id,Co_NULL) == Co_FALSE)
 80182f0:	79fb      	ldrb	r3, [r7, #7]
 80182f2:	2200      	movs	r2, #0
 80182f4:	4619      	mov	r1, r3
 80182f6:	2003      	movs	r0, #3
 80182f8:	f001 fb3e 	bl	8019978 <InsertInSRQ>
 80182fc:	4603      	mov	r3, r0
 80182fe:	2b00      	cmp	r3, #0
 8018300:	d101      	bne.n	8018306 <isr_SetFlag+0x2a>
        {
            return E_SEV_REQ_FULL;      /* The service requst queue is full   */
 8018302:	2312      	movs	r3, #18
 8018304:	e006      	b.n	8018314 <isr_SetFlag+0x38>
        }			
        else
        {
            return E_OK;   							
 8018306:	2300      	movs	r3, #0
 8018308:	e004      	b.n	8018314 <isr_SetFlag+0x38>
        }
    }
    else
    {
        return(CoSetFlag(id));          /* The caller is not ISR, set the flag*/
 801830a:	79fb      	ldrb	r3, [r7, #7]
 801830c:	4618      	mov	r0, r3
 801830e:	f7ff ff69 	bl	80181e4 <CoSetFlag>
 8018312:	4603      	mov	r3, r0
    }
}
 8018314:	4618      	mov	r0, r3
 8018316:	3708      	adds	r7, #8
 8018318:	46bd      	mov	sp, r7
 801831a:	bd80      	pop	{r7, pc}
 801831c:	20003749 	.word	0x20003749

08018320 <FlagBlock>:
 * @details    This function is called to block a task to wait a flag event.	 
 * @note 
 *******************************************************************************
 */
static void FlagBlock(P_FLAG_NODE pnode,U32 flags,U8 waitType)
{
 8018320:	b480      	push	{r7}
 8018322:	b087      	sub	sp, #28
 8018324:	af00      	add	r7, sp, #0
 8018326:	60f8      	str	r0, [r7, #12]
 8018328:	60b9      	str	r1, [r7, #8]
 801832a:	4613      	mov	r3, r2
 801832c:	71fb      	strb	r3, [r7, #7]
    P_FCB     pfcb;
    pfcb  = &FlagCrl;
 801832e:	4b19      	ldr	r3, [pc, #100]	; (8018394 <FlagBlock+0x74>)
 8018330:	617b      	str	r3, [r7, #20]
    
    TCBRunning->pnode = pnode;	
 8018332:	4b19      	ldr	r3, [pc, #100]	; (8018398 <FlagBlock+0x78>)
 8018334:	681b      	ldr	r3, [r3, #0]
 8018336:	68fa      	ldr	r2, [r7, #12]
 8018338:	61da      	str	r2, [r3, #28]
    pnode->waitTask   = TCBRunning;
 801833a:	4b17      	ldr	r3, [pc, #92]	; (8018398 <FlagBlock+0x78>)
 801833c:	681a      	ldr	r2, [r3, #0]
 801833e:	68fb      	ldr	r3, [r7, #12]
 8018340:	60da      	str	r2, [r3, #12]
    pnode->waitFlags  = flags;      /* Save the flags that we need to wait for*/
 8018342:	68fb      	ldr	r3, [r7, #12]
 8018344:	68ba      	ldr	r2, [r7, #8]
 8018346:	609a      	str	r2, [r3, #8]
    pnode->waitType   = waitType;   /* Save the type of wait                  */
 8018348:	68fb      	ldr	r3, [r7, #12]
 801834a:	79fa      	ldrb	r2, [r7, #7]
 801834c:	741a      	strb	r2, [r3, #16]
        
    if(pfcb->tailNode == Co_NULL)      /* If this is the first NODE to insert?   */
 801834e:	697b      	ldr	r3, [r7, #20]
 8018350:	691b      	ldr	r3, [r3, #16]
 8018352:	2b00      	cmp	r3, #0
 8018354:	d109      	bne.n	801836a <FlagBlock+0x4a>
    {
        pnode->nextNode = Co_NULL;
 8018356:	68fb      	ldr	r3, [r7, #12]
 8018358:	2200      	movs	r2, #0
 801835a:	601a      	str	r2, [r3, #0]
        pnode->prevNode = Co_NULL;
 801835c:	68fb      	ldr	r3, [r7, #12]
 801835e:	2200      	movs	r2, #0
 8018360:	605a      	str	r2, [r3, #4]
        pfcb->headNode  = pnode;    /* Insert the NODE to the head            */	
 8018362:	697b      	ldr	r3, [r7, #20]
 8018364:	68fa      	ldr	r2, [r7, #12]
 8018366:	60da      	str	r2, [r3, #12]
 8018368:	e00a      	b.n	8018380 <FlagBlock+0x60>
    }
    else                            /* If it is not the first NODE to insert? */
    {
        pfcb->tailNode->nextNode = pnode;   /* Insert the NODE to the tail    */
 801836a:	697b      	ldr	r3, [r7, #20]
 801836c:	691b      	ldr	r3, [r3, #16]
 801836e:	68fa      	ldr	r2, [r7, #12]
 8018370:	601a      	str	r2, [r3, #0]
        pnode->prevNode          = pfcb->tailNode;
 8018372:	697b      	ldr	r3, [r7, #20]
 8018374:	691a      	ldr	r2, [r3, #16]
 8018376:	68fb      	ldr	r3, [r7, #12]
 8018378:	605a      	str	r2, [r3, #4]
        pnode->nextNode          = Co_NULL;
 801837a:	68fb      	ldr	r3, [r7, #12]
 801837c:	2200      	movs	r2, #0
 801837e:	601a      	str	r2, [r3, #0]
    }
    pfcb->tailNode = pnode;
 8018380:	697b      	ldr	r3, [r7, #20]
 8018382:	68fa      	ldr	r2, [r7, #12]
 8018384:	611a      	str	r2, [r3, #16]
}
 8018386:	bf00      	nop
 8018388:	371c      	adds	r7, #28
 801838a:	46bd      	mov	sp, r7
 801838c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018390:	4770      	bx	lr
 8018392:	bf00      	nop
 8018394:	20003890 	.word	0x20003890
 8018398:	2000d728 	.word	0x2000d728

0801839c <RemoveFromLink>:
 * @details   This function is called to remove a flag node from the wait list.			 
 * @note 
 *******************************************************************************
 */
static P_FLAG_NODE RemoveFromLink(P_FLAG_NODE pnode)
{
 801839c:	b580      	push	{r7, lr}
 801839e:	b084      	sub	sp, #16
 80183a0:	af00      	add	r7, sp, #0
 80183a2:	6078      	str	r0, [r7, #4]
    P_OSTCB ptcb;
    
    RemoveLinkNode(pnode);            /* Remove the flag node from wait list. */			 
 80183a4:	6878      	ldr	r0, [r7, #4]
 80183a6:	f000 f823 	bl	80183f0 <RemoveLinkNode>
    ptcb = pnode->waitTask;
 80183aa:	687b      	ldr	r3, [r7, #4]
 80183ac:	68db      	ldr	r3, [r3, #12]
 80183ae:	60fb      	str	r3, [r7, #12]
    
    /* The task in the delay list */
    if(ptcb->delayTick != INVALID_VALUE)/* If the task is in tick delay list  */			         
 80183b0:	68fb      	ldr	r3, [r7, #12]
 80183b2:	6a1b      	ldr	r3, [r3, #32]
 80183b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80183b8:	d002      	beq.n	80183c0 <RemoveFromLink+0x24>
    {
        RemoveDelayList(ptcb);        /* Remove the task from tick delay list */	
 80183ba:	68f8      	ldr	r0, [r7, #12]
 80183bc:	f002 f89c 	bl	801a4f8 <RemoveDelayList>
    }
	
	ptcb->pnode = (void*)0xffffffff;
 80183c0:	68fb      	ldr	r3, [r7, #12]
 80183c2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80183c6:	61da      	str	r2, [r3, #28]

	if(ptcb == TCBRunning)
 80183c8:	4b08      	ldr	r3, [pc, #32]	; (80183ec <RemoveFromLink+0x50>)
 80183ca:	681b      	ldr	r3, [r3, #0]
 80183cc:	68fa      	ldr	r2, [r7, #12]
 80183ce:	429a      	cmp	r2, r3
 80183d0:	d103      	bne.n	80183da <RemoveFromLink+0x3e>
	{
		ptcb->state = TASK_RUNNING;
 80183d2:	68fb      	ldr	r3, [r7, #12]
 80183d4:	2201      	movs	r2, #1
 80183d6:	715a      	strb	r2, [r3, #5]
 80183d8:	e002      	b.n	80183e0 <RemoveFromLink+0x44>
	} 
	else
	{
		InsertToTCBRdyList(ptcb);         /* Insert the task to ready list        */	
 80183da:	68f8      	ldr	r0, [r7, #12]
 80183dc:	f001 fbc6 	bl	8019b6c <InsertToTCBRdyList>
	}   
    return (pnode->nextNode);	
 80183e0:	687b      	ldr	r3, [r7, #4]
 80183e2:	681b      	ldr	r3, [r3, #0]
}
 80183e4:	4618      	mov	r0, r3
 80183e6:	3710      	adds	r7, #16
 80183e8:	46bd      	mov	sp, r7
 80183ea:	bd80      	pop	{r7, pc}
 80183ec:	2000d728 	.word	0x2000d728

080183f0 <RemoveLinkNode>:
 * @details    This function is called to remove a flag node from the wait list.			 
 * @note 
 *******************************************************************************
 */
void RemoveLinkNode(P_FLAG_NODE pnode)
{
 80183f0:	b480      	push	{r7}
 80183f2:	b083      	sub	sp, #12
 80183f4:	af00      	add	r7, sp, #0
 80183f6:	6078      	str	r0, [r7, #4]
    /* If only one NODE in the list*/
    if((pnode->nextNode == Co_NULL) && (pnode->prevNode == Co_NULL))
 80183f8:	687b      	ldr	r3, [r7, #4]
 80183fa:	681b      	ldr	r3, [r3, #0]
 80183fc:	2b00      	cmp	r3, #0
 80183fe:	d10a      	bne.n	8018416 <RemoveLinkNode+0x26>
 8018400:	687b      	ldr	r3, [r7, #4]
 8018402:	685b      	ldr	r3, [r3, #4]
 8018404:	2b00      	cmp	r3, #0
 8018406:	d106      	bne.n	8018416 <RemoveLinkNode+0x26>
    {
        FlagCrl.headNode = Co_NULL;
 8018408:	4b1a      	ldr	r3, [pc, #104]	; (8018474 <RemoveLinkNode+0x84>)
 801840a:	2200      	movs	r2, #0
 801840c:	60da      	str	r2, [r3, #12]
        FlagCrl.tailNode = Co_NULL;
 801840e:	4b19      	ldr	r3, [pc, #100]	; (8018474 <RemoveLinkNode+0x84>)
 8018410:	2200      	movs	r2, #0
 8018412:	611a      	str	r2, [r3, #16]
 8018414:	e023      	b.n	801845e <RemoveLinkNode+0x6e>
    }
    else if(pnode->nextNode == Co_NULL)      /* If the NODE is tail              */
 8018416:	687b      	ldr	r3, [r7, #4]
 8018418:	681b      	ldr	r3, [r3, #0]
 801841a:	2b00      	cmp	r3, #0
 801841c:	d108      	bne.n	8018430 <RemoveLinkNode+0x40>
    {
        FlagCrl.tailNode          = pnode->prevNode;
 801841e:	687b      	ldr	r3, [r7, #4]
 8018420:	685b      	ldr	r3, [r3, #4]
 8018422:	4a14      	ldr	r2, [pc, #80]	; (8018474 <RemoveLinkNode+0x84>)
 8018424:	6113      	str	r3, [r2, #16]
        pnode->prevNode->nextNode = Co_NULL;
 8018426:	687b      	ldr	r3, [r7, #4]
 8018428:	685b      	ldr	r3, [r3, #4]
 801842a:	2200      	movs	r2, #0
 801842c:	601a      	str	r2, [r3, #0]
 801842e:	e016      	b.n	801845e <RemoveLinkNode+0x6e>
    }
    else if(pnode->prevNode == Co_NULL)      /* If the NODE is head              */
 8018430:	687b      	ldr	r3, [r7, #4]
 8018432:	685b      	ldr	r3, [r3, #4]
 8018434:	2b00      	cmp	r3, #0
 8018436:	d108      	bne.n	801844a <RemoveLinkNode+0x5a>
    {
        FlagCrl.headNode          = pnode->nextNode;
 8018438:	687b      	ldr	r3, [r7, #4]
 801843a:	681b      	ldr	r3, [r3, #0]
 801843c:	4a0d      	ldr	r2, [pc, #52]	; (8018474 <RemoveLinkNode+0x84>)
 801843e:	60d3      	str	r3, [r2, #12]
        pnode->nextNode->prevNode = Co_NULL;
 8018440:	687b      	ldr	r3, [r7, #4]
 8018442:	681b      	ldr	r3, [r3, #0]
 8018444:	2200      	movs	r2, #0
 8018446:	605a      	str	r2, [r3, #4]
 8018448:	e009      	b.n	801845e <RemoveLinkNode+0x6e>
    }
    else                                  /* The NODE is in the middle        */
    {
        pnode->nextNode->prevNode = pnode->prevNode;
 801844a:	687b      	ldr	r3, [r7, #4]
 801844c:	681b      	ldr	r3, [r3, #0]
 801844e:	687a      	ldr	r2, [r7, #4]
 8018450:	6852      	ldr	r2, [r2, #4]
 8018452:	605a      	str	r2, [r3, #4]
        pnode->prevNode->nextNode = pnode->nextNode;
 8018454:	687b      	ldr	r3, [r7, #4]
 8018456:	685b      	ldr	r3, [r3, #4]
 8018458:	687a      	ldr	r2, [r7, #4]
 801845a:	6812      	ldr	r2, [r2, #0]
 801845c:	601a      	str	r2, [r3, #0]
    }
    pnode->waitTask->pnode = Co_NULL;
 801845e:	687b      	ldr	r3, [r7, #4]
 8018460:	68db      	ldr	r3, [r3, #12]
 8018462:	2200      	movs	r2, #0
 8018464:	61da      	str	r2, [r3, #28]
}
 8018466:	bf00      	nop
 8018468:	370c      	adds	r7, #12
 801846a:	46bd      	mov	sp, r7
 801846c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018470:	4770      	bx	lr
 8018472:	bf00      	nop
 8018474:	20003890 	.word	0x20003890

08018478 <CoIdleTask>:
 * @par Description
 * @details    This function is system IDLE task code.	 
 *******************************************************************************
 */
void CoIdleTask(void* pdata)
{
 8018478:	b480      	push	{r7}
 801847a:	b083      	sub	sp, #12
 801847c:	af00      	add	r7, sp, #0
 801847e:	6078      	str	r0, [r7, #4]
		printf(", priority => %d\r\n", ptcb->prio);
		ptcb++;
	}
	
	printf("[%10s] Sleeping...\r\n", "system");*/
	for( ; ; )
 8018480:	e7fe      	b.n	8018480 <CoIdleTask+0x8>

08018482 <CoStkOverflowHook>:
 * @par Description
 * @details    This function is a hook for stack overflow.	 
 *******************************************************************************
 */
void CoStkOverflowHook(OS_TID taskID)
{
 8018482:	b480      	push	{r7}
 8018484:	b083      	sub	sp, #12
 8018486:	af00      	add	r7, sp, #0
 8018488:	4603      	mov	r3, r0
 801848a:	71fb      	strb	r3, [r7, #7]
    /* Process stack overflow  here */
    for(; ;) 
 801848c:	e7fe      	b.n	801848c <CoStkOverflowHook+0xa>
	...

08018490 <CoCreateKheap>:
 * @par Description
 * @details    This function is called to create kernel heap.
 *******************************************************************************
 */
void CoCreateKheap(void)
{
 8018490:	b480      	push	{r7}
 8018492:	af00      	add	r7, sp, #0
    Kheap.startAddr  = (U32)(KernelHeap); /* Initialize kernel heap control   */
 8018494:	4a0e      	ldr	r2, [pc, #56]	; (80184d0 <CoCreateKheap+0x40>)
 8018496:	4b0f      	ldr	r3, [pc, #60]	; (80184d4 <CoCreateKheap+0x44>)
 8018498:	601a      	str	r2, [r3, #0]
    Kheap.endAddr    = (U32)(KernelHeap) + KHEAP_SIZE*4;
 801849a:	4b0d      	ldr	r3, [pc, #52]	; (80184d0 <CoCreateKheap+0x40>)
 801849c:	f503 431c 	add.w	r3, r3, #39936	; 0x9c00
 80184a0:	3340      	adds	r3, #64	; 0x40
 80184a2:	4a0c      	ldr	r2, [pc, #48]	; (80184d4 <CoCreateKheap+0x44>)
 80184a4:	6053      	str	r3, [r2, #4]
    FMBlist          = (P_FMB)KernelHeap; /* Initialize free memory block list*/
 80184a6:	4b0c      	ldr	r3, [pc, #48]	; (80184d8 <CoCreateKheap+0x48>)
 80184a8:	4a09      	ldr	r2, [pc, #36]	; (80184d0 <CoCreateKheap+0x40>)
 80184aa:	601a      	str	r2, [r3, #0]
    FMBlist->nextFMB = Co_NULL;
 80184ac:	4b0a      	ldr	r3, [pc, #40]	; (80184d8 <CoCreateKheap+0x48>)
 80184ae:	681b      	ldr	r3, [r3, #0]
 80184b0:	2200      	movs	r2, #0
 80184b2:	601a      	str	r2, [r3, #0]
    FMBlist->nextUMB = Co_NULL;
 80184b4:	4b08      	ldr	r3, [pc, #32]	; (80184d8 <CoCreateKheap+0x48>)
 80184b6:	681b      	ldr	r3, [r3, #0]
 80184b8:	2200      	movs	r2, #0
 80184ba:	605a      	str	r2, [r3, #4]
    FMBlist->preUMB  = Co_NULL;
 80184bc:	4b06      	ldr	r3, [pc, #24]	; (80184d8 <CoCreateKheap+0x48>)
 80184be:	681b      	ldr	r3, [r3, #0]
 80184c0:	2200      	movs	r2, #0
 80184c2:	609a      	str	r2, [r3, #8]
}
 80184c4:	bf00      	nop
 80184c6:	46bd      	mov	sp, r7
 80184c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80184cc:	4770      	bx	lr
 80184ce:	bf00      	nop
 80184d0:	200038a4 	.word	0x200038a4
 80184d4:	2000d4e8 	.word	0x2000d4e8
 80184d8:	2000d4e4 	.word	0x2000d4e4

080184dc <CoKmalloc>:
 * @par Description
 * @details    This function is called to allocation size bytes of memory block.
 *******************************************************************************
 */
void* CoKmalloc(U32 size)
{
 80184dc:	b580      	push	{r7, lr}
 80184de:	b08a      	sub	sp, #40	; 0x28
 80184e0:	af00      	add	r7, sp, #0
 80184e2:	6078      	str	r0, [r7, #4]
    U8*   memAddr;
    U32   freeSize;
    U32   kheapAddr;
    
#if CFG_PAR_CHECKOUT_EN >0              /* Check validity of parameter        */
    if( size == 0 )
 80184e4:	687b      	ldr	r3, [r7, #4]
 80184e6:	2b00      	cmp	r3, #0
 80184e8:	d101      	bne.n	80184ee <CoKmalloc+0x12>
    {
        return Co_NULL;
 80184ea:	2300      	movs	r3, #0
 80184ec:	e0a2      	b.n	8018634 <CoKmalloc+0x158>
    }
#endif

    /* Word alignment,and add used memory head size */
    size      = (((size+3)>>2)<<2) + 8;
 80184ee:	687b      	ldr	r3, [r7, #4]
 80184f0:	3303      	adds	r3, #3
 80184f2:	f023 0303 	bic.w	r3, r3, #3
 80184f6:	3308      	adds	r3, #8
 80184f8:	607b      	str	r3, [r7, #4]
    kheapAddr = Kheap.endAddr;        /* Get the end address of kernel heap   */
 80184fa:	4b50      	ldr	r3, [pc, #320]	; (801863c <CoKmalloc+0x160>)
 80184fc:	685b      	ldr	r3, [r3, #4]
 80184fe:	61bb      	str	r3, [r7, #24]
    OsSchedLock();                    /* Lock schedule                        */
 8018500:	4b4f      	ldr	r3, [pc, #316]	; (8018640 <CoKmalloc+0x164>)
 8018502:	781b      	ldrb	r3, [r3, #0]
 8018504:	b2db      	uxtb	r3, r3
 8018506:	3301      	adds	r3, #1
 8018508:	b2da      	uxtb	r2, r3
 801850a:	4b4d      	ldr	r3, [pc, #308]	; (8018640 <CoKmalloc+0x164>)
 801850c:	701a      	strb	r2, [r3, #0]
    freeMB = FMBlist;                 /* Get first item of free memory list   */
 801850e:	4b4d      	ldr	r3, [pc, #308]	; (8018644 <CoKmalloc+0x168>)
 8018510:	681b      	ldr	r3, [r3, #0]
 8018512:	627b      	str	r3, [r7, #36]	; 0x24
    preFMB = Co_NULL;
 8018514:	2300      	movs	r3, #0
 8018516:	623b      	str	r3, [r7, #32]
    while(freeMB != Co_NULL )            /* Is out of free memory list?          */
 8018518:	e085      	b.n	8018626 <CoKmalloc+0x14a>
    {                                 /* No                                   */
        if(freeMB->nextUMB == Co_NULL)   /* Is last item of free memory list?    */
 801851a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801851c:	685b      	ldr	r3, [r3, #4]
 801851e:	2b00      	cmp	r3, #0
 8018520:	d104      	bne.n	801852c <CoKmalloc+0x50>
        {                             /* Yes,get size for this free item      */
            freeSize = kheapAddr - (U32)(freeMB);
 8018522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018524:	69ba      	ldr	r2, [r7, #24]
 8018526:	1ad3      	subs	r3, r2, r3
 8018528:	61fb      	str	r3, [r7, #28]
 801852a:	e006      	b.n	801853a <CoKmalloc+0x5e>
        }
        else                          /* No,get size for this free item       */
        {							   
            freeSize = (U32)(freeMB->nextUMB) -1 - (U32)(freeMB);	
 801852c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801852e:	685b      	ldr	r3, [r3, #4]
 8018530:	461a      	mov	r2, r3
 8018532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018534:	1ad3      	subs	r3, r2, r3
 8018536:	3b01      	subs	r3, #1
 8018538:	61fb      	str	r3, [r7, #28]
        }
        if(freeSize >= size)        /* If the size equal or greater than need */
 801853a:	69fa      	ldr	r2, [r7, #28]
 801853c:	687b      	ldr	r3, [r7, #4]
 801853e:	429a      	cmp	r2, r3
 8018540:	d36c      	bcc.n	801861c <CoKmalloc+0x140>
        {                           /* Yes,assign in this free memory         */
            usedMB=(P_UMB)freeMB;/* Get the address for used memory block head*/
 8018542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018544:	617b      	str	r3, [r7, #20]
            
            /* Get the address for used memory block                          */
            memAddr = (U8*)((U32)(usedMB) + 8);	
 8018546:	697b      	ldr	r3, [r7, #20]
 8018548:	3308      	adds	r3, #8
 801854a:	613b      	str	r3, [r7, #16]
            
            /* Is left size of free memory smaller than 12?                   */	 
            if((freeSize-size) < 12)	 
 801854c:	69fa      	ldr	r2, [r7, #28]
 801854e:	687b      	ldr	r3, [r7, #4]
 8018550:	1ad3      	subs	r3, r2, r3
 8018552:	2b0b      	cmp	r3, #11
 8018554:	d822      	bhi.n	801859c <CoKmalloc+0xc0>
            {		
                /* Yes,malloc together(12 is the size of the header information 
                   of free memory block ).                                    */
                if(preFMB != Co_NULL)/* Is first item of free memory block list? */
 8018556:	6a3b      	ldr	r3, [r7, #32]
 8018558:	2b00      	cmp	r3, #0
 801855a:	d004      	beq.n	8018566 <CoKmalloc+0x8a>
                {                             /* No,set the link for list     */
                    preFMB->nextFMB = freeMB->nextFMB;
 801855c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801855e:	681a      	ldr	r2, [r3, #0]
 8018560:	6a3b      	ldr	r3, [r7, #32]
 8018562:	601a      	str	r2, [r3, #0]
 8018564:	e003      	b.n	801856e <CoKmalloc+0x92>
                }
                else                          /* Yes,reset the first item     */
                {						
                    FMBlist = freeMB->nextFMB;		
 8018566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018568:	681b      	ldr	r3, [r3, #0]
 801856a:	4a36      	ldr	r2, [pc, #216]	; (8018644 <CoKmalloc+0x168>)
 801856c:	6013      	str	r3, [r2, #0]
                }
                
                if(freeMB->nextUMB != Co_NULL)   /* Is last item?                */
 801856e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018570:	685b      	ldr	r3, [r3, #4]
 8018572:	2b00      	cmp	r3, #0
 8018574:	d009      	beq.n	801858a <CoKmalloc+0xae>
                {                             /* No,set the link for list     */
                    tmpUMB = (P_UMB)((U32)(freeMB->nextUMB)-1); 
 8018576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018578:	685b      	ldr	r3, [r3, #4]
 801857a:	3b01      	subs	r3, #1
 801857c:	60bb      	str	r3, [r7, #8]
                    tmpUMB->preMB = (void*)((U32)usedMB|0x1);
 801857e:	697b      	ldr	r3, [r7, #20]
 8018580:	f043 0301 	orr.w	r3, r3, #1
 8018584:	461a      	mov	r2, r3
 8018586:	68bb      	ldr	r3, [r7, #8]
 8018588:	605a      	str	r2, [r3, #4]
                }
                
                usedMB->nextMB = freeMB->nextUMB;/* Set used memory block link*/
 801858a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801858c:	685a      	ldr	r2, [r3, #4]
 801858e:	697b      	ldr	r3, [r7, #20]
 8018590:	601a      	str	r2, [r3, #0]
                usedMB->preMB  = freeMB->preUMB;
 8018592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018594:	689a      	ldr	r2, [r3, #8]
 8018596:	697b      	ldr	r3, [r7, #20]
 8018598:	605a      	str	r2, [r3, #4]
 801859a:	e02d      	b.n	80185f8 <CoKmalloc+0x11c>
            }
            else                            /* No,the left size more than 12  */
            {		
                /* Get new free memory block address                          */
                newFMB = (P_FMB)((U32)(freeMB) + size);
 801859c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801859e:	687b      	ldr	r3, [r7, #4]
 80185a0:	4413      	add	r3, r2
 80185a2:	60fb      	str	r3, [r7, #12]
                
                if(preFMB != Co_NULL)/* Is first item of free memory block list? */
 80185a4:	6a3b      	ldr	r3, [r7, #32]
 80185a6:	2b00      	cmp	r3, #0
 80185a8:	d003      	beq.n	80185b2 <CoKmalloc+0xd6>
                {						
                    preFMB->nextFMB = newFMB; /* No,set the link for list     */		
 80185aa:	6a3b      	ldr	r3, [r7, #32]
 80185ac:	68fa      	ldr	r2, [r7, #12]
 80185ae:	601a      	str	r2, [r3, #0]
 80185b0:	e002      	b.n	80185b8 <CoKmalloc+0xdc>
                }	
                else
                {					    
                    FMBlist = newFMB;         /* Yes,reset the first item     */	
 80185b2:	4a24      	ldr	r2, [pc, #144]	; (8018644 <CoKmalloc+0x168>)
 80185b4:	68fb      	ldr	r3, [r7, #12]
 80185b6:	6013      	str	r3, [r2, #0]
                }
                
                /* Set link for new free memory block                         */
                newFMB->preUMB  = (P_UMB)((U32)usedMB|0x1);
 80185b8:	697b      	ldr	r3, [r7, #20]
 80185ba:	f043 0301 	orr.w	r3, r3, #1
 80185be:	461a      	mov	r2, r3
 80185c0:	68fb      	ldr	r3, [r7, #12]
 80185c2:	609a      	str	r2, [r3, #8]
                newFMB->nextUMB = freeMB->nextUMB;
 80185c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80185c6:	685a      	ldr	r2, [r3, #4]
 80185c8:	68fb      	ldr	r3, [r7, #12]
 80185ca:	605a      	str	r2, [r3, #4]
                newFMB->nextFMB = freeMB->nextFMB;
 80185cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80185ce:	681a      	ldr	r2, [r3, #0]
 80185d0:	68fb      	ldr	r3, [r7, #12]
 80185d2:	601a      	str	r2, [r3, #0]
                
                if(freeMB->nextUMB != Co_NULL) /* Is last item?                  */
 80185d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80185d6:	685b      	ldr	r3, [r3, #4]
 80185d8:	2b00      	cmp	r3, #0
 80185da:	d006      	beq.n	80185ea <CoKmalloc+0x10e>
                {                           /* No,set the link for list       */
                    tmpUMB = (P_UMB)((U32)(freeMB->nextUMB)-1); 
 80185dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80185de:	685b      	ldr	r3, [r3, #4]
 80185e0:	3b01      	subs	r3, #1
 80185e2:	60bb      	str	r3, [r7, #8]
                    tmpUMB->preMB = newFMB;
 80185e4:	68bb      	ldr	r3, [r7, #8]
 80185e6:	68fa      	ldr	r2, [r7, #12]
 80185e8:	605a      	str	r2, [r3, #4]
                }
                
                usedMB->nextMB = newFMB;    /* Set used memory block link     */
 80185ea:	697b      	ldr	r3, [r7, #20]
 80185ec:	68fa      	ldr	r2, [r7, #12]
 80185ee:	601a      	str	r2, [r3, #0]
                usedMB->preMB  = freeMB->preUMB;
 80185f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80185f2:	689a      	ldr	r2, [r3, #8]
 80185f4:	697b      	ldr	r3, [r7, #20]
 80185f6:	605a      	str	r2, [r3, #4]
            }
          
            if(freeMB->preUMB != Co_NULL)      /* Is first item?                 */
 80185f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80185fa:	689b      	ldr	r3, [r3, #8]
 80185fc:	2b00      	cmp	r3, #0
 80185fe:	d009      	beq.n	8018614 <CoKmalloc+0x138>
            {                               /* No,set the link for list       */
                tmpUMB = (P_UMB)((U32)(freeMB->preUMB)-1); 
 8018600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018602:	689b      	ldr	r3, [r3, #8]
 8018604:	3b01      	subs	r3, #1
 8018606:	60bb      	str	r3, [r7, #8]
                tmpUMB->nextMB = (void*)((U32)usedMB|0x1);
 8018608:	697b      	ldr	r3, [r7, #20]
 801860a:	f043 0301 	orr.w	r3, r3, #1
 801860e:	461a      	mov	r2, r3
 8018610:	68bb      	ldr	r3, [r7, #8]
 8018612:	601a      	str	r2, [r3, #0]
            }
          
            OsSchedUnlock();              /* Unlock schedule                  */
 8018614:	f7fe ffec 	bl	80175f0 <OsSchedUnlock>
            return memAddr;               /* Return used memory block address */
 8018618:	693b      	ldr	r3, [r7, #16]
 801861a:	e00b      	b.n	8018634 <CoKmalloc+0x158>
        }
        preFMB = freeMB;        /* Save current free memory block as previous */
 801861c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801861e:	623b      	str	r3, [r7, #32]
        freeMB = freeMB->nextFMB;         /* Get the next item as current item*/
 8018620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018622:	681b      	ldr	r3, [r3, #0]
 8018624:	627b      	str	r3, [r7, #36]	; 0x24
    while(freeMB != Co_NULL )            /* Is out of free memory list?          */
 8018626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018628:	2b00      	cmp	r3, #0
 801862a:	f47f af76 	bne.w	801851a <CoKmalloc+0x3e>
    }
    OsSchedUnlock();                      /* Unlock schedule                  */
 801862e:	f7fe ffdf 	bl	80175f0 <OsSchedUnlock>
    return Co_NULL;                          /* Error return                     */
 8018632:	2300      	movs	r3, #0
}
 8018634:	4618      	mov	r0, r3
 8018636:	3728      	adds	r7, #40	; 0x28
 8018638:	46bd      	mov	sp, r7
 801863a:	bd80      	pop	{r7, pc}
 801863c:	2000d4e8 	.word	0x2000d4e8
 8018640:	20003749 	.word	0x20003749
 8018644:	2000d4e4 	.word	0x2000d4e4

08018648 <CoKfree>:
 * @par Description
 * @details    This function is called to release memory block.
 *******************************************************************************
 */
void CoKfree(void* memBuf)
{
 8018648:	b580      	push	{r7, lr}
 801864a:	b088      	sub	sp, #32
 801864c:	af00      	add	r7, sp, #0
 801864e:	6078      	str	r0, [r7, #4]
    P_FMB    curFMB,nextFMB,preFMB;
    P_UMB    usedMB,nextUMB,preUMB;

#if CFG_PAR_CHECKOUT_EN >0              /* Check validity of parameter        */
    if(memBuf == Co_NULL)
 8018650:	687b      	ldr	r3, [r7, #4]
 8018652:	2b00      	cmp	r3, #0
 8018654:	f000 815e 	beq.w	8018914 <CoKfree+0x2cc>
    {
        return;
    }
#endif
    
    usedMB = (P_UMB)((U32)(memBuf)-8);
 8018658:	687b      	ldr	r3, [r7, #4]
 801865a:	3b08      	subs	r3, #8
 801865c:	60fb      	str	r3, [r7, #12]
    
#if CFG_PAR_CHECKOUT_EN >0              /* Check validity of parameter        */
    if((U32)(memBuf) < Kheap.startAddr)
 801865e:	4b8b      	ldr	r3, [pc, #556]	; (801888c <CoKfree+0x244>)
 8018660:	681a      	ldr	r2, [r3, #0]
 8018662:	687b      	ldr	r3, [r7, #4]
 8018664:	429a      	cmp	r2, r3
 8018666:	f200 8157 	bhi.w	8018918 <CoKfree+0x2d0>
    {
        return;
    }
    if((U32)(memBuf) > Kheap.endAddr)
 801866a:	4b88      	ldr	r3, [pc, #544]	; (801888c <CoKfree+0x244>)
 801866c:	685a      	ldr	r2, [r3, #4]
 801866e:	687b      	ldr	r3, [r7, #4]
 8018670:	429a      	cmp	r2, r3
 8018672:	f0c0 8153 	bcc.w	801891c <CoKfree+0x2d4>
        return;
    }
#endif
    
    
    OsSchedLock();                      /* Lock schedule                      */
 8018676:	4b86      	ldr	r3, [pc, #536]	; (8018890 <CoKfree+0x248>)
 8018678:	781b      	ldrb	r3, [r3, #0]
 801867a:	b2db      	uxtb	r3, r3
 801867c:	3301      	adds	r3, #1
 801867e:	b2da      	uxtb	r2, r3
 8018680:	4b83      	ldr	r3, [pc, #524]	; (8018890 <CoKfree+0x248>)
 8018682:	701a      	strb	r2, [r3, #0]

#if CFG_PAR_CHECKOUT_EN >0              /* Check UMB in list                  */ 
    if((U32)(usedMB) < (U32)(FMBlist))
 8018684:	68fb      	ldr	r3, [r7, #12]
 8018686:	4a83      	ldr	r2, [pc, #524]	; (8018894 <CoKfree+0x24c>)
 8018688:	6812      	ldr	r2, [r2, #0]
 801868a:	4293      	cmp	r3, r2
 801868c:	d214      	bcs.n	80186b8 <CoKfree+0x70>
    {
        preUMB = (P_UMB)((U32)(FMBlist->preUMB)-1);
 801868e:	4b81      	ldr	r3, [pc, #516]	; (8018894 <CoKfree+0x24c>)
 8018690:	681b      	ldr	r3, [r3, #0]
 8018692:	689b      	ldr	r3, [r3, #8]
 8018694:	3b01      	subs	r3, #1
 8018696:	613b      	str	r3, [r7, #16]
        while(preUMB != usedMB)	
 8018698:	e009      	b.n	80186ae <CoKfree+0x66>
        {
            if(preUMB == Co_NULL)
 801869a:	693b      	ldr	r3, [r7, #16]
 801869c:	2b00      	cmp	r3, #0
 801869e:	d102      	bne.n	80186a6 <CoKfree+0x5e>
            {
                OsSchedUnlock();
 80186a0:	f7fe ffa6 	bl	80175f0 <OsSchedUnlock>
                return;
 80186a4:	e13b      	b.n	801891e <CoKfree+0x2d6>
            }
            preUMB = (P_UMB)((U32)(preUMB->preMB)-1);	
 80186a6:	693b      	ldr	r3, [r7, #16]
 80186a8:	685b      	ldr	r3, [r3, #4]
 80186aa:	3b01      	subs	r3, #1
 80186ac:	613b      	str	r3, [r7, #16]
        while(preUMB != usedMB)	
 80186ae:	693a      	ldr	r2, [r7, #16]
 80186b0:	68fb      	ldr	r3, [r7, #12]
 80186b2:	429a      	cmp	r2, r3
 80186b4:	d1f1      	bne.n	801869a <CoKfree+0x52>
 80186b6:	e031      	b.n	801871c <CoKfree+0xd4>
        }
    }
    else
    {
        if(FMBlist == Co_NULL)
 80186b8:	4b76      	ldr	r3, [pc, #472]	; (8018894 <CoKfree+0x24c>)
 80186ba:	681b      	ldr	r3, [r3, #0]
 80186bc:	2b00      	cmp	r3, #0
 80186be:	d103      	bne.n	80186c8 <CoKfree+0x80>
        {
            nextUMB = (P_UMB)(Kheap.startAddr);	
 80186c0:	4b72      	ldr	r3, [pc, #456]	; (801888c <CoKfree+0x244>)
 80186c2:	681b      	ldr	r3, [r3, #0]
 80186c4:	617b      	str	r3, [r7, #20]
 80186c6:	e025      	b.n	8018714 <CoKfree+0xcc>
        }
        else
        {
            if(FMBlist->nextUMB != Co_NULL)
 80186c8:	4b72      	ldr	r3, [pc, #456]	; (8018894 <CoKfree+0x24c>)
 80186ca:	681b      	ldr	r3, [r3, #0]
 80186cc:	685b      	ldr	r3, [r3, #4]
 80186ce:	2b00      	cmp	r3, #0
 80186d0:	d005      	beq.n	80186de <CoKfree+0x96>
            {
                nextUMB = (P_UMB)((U32)(FMBlist->nextUMB)-1);	
 80186d2:	4b70      	ldr	r3, [pc, #448]	; (8018894 <CoKfree+0x24c>)
 80186d4:	681b      	ldr	r3, [r3, #0]
 80186d6:	685b      	ldr	r3, [r3, #4]
 80186d8:	3b01      	subs	r3, #1
 80186da:	617b      	str	r3, [r7, #20]
 80186dc:	e01a      	b.n	8018714 <CoKfree+0xcc>
            }
            else
            {
                nextUMB = Co_NULL;
 80186de:	2300      	movs	r3, #0
 80186e0:	617b      	str	r3, [r7, #20]
            }
        }
    	
        while(nextUMB != usedMB)	
 80186e2:	e017      	b.n	8018714 <CoKfree+0xcc>
        {
            if(nextUMB == Co_NULL)
 80186e4:	697b      	ldr	r3, [r7, #20]
 80186e6:	2b00      	cmp	r3, #0
 80186e8:	d102      	bne.n	80186f0 <CoKfree+0xa8>
            {
                OsSchedUnlock();
 80186ea:	f7fe ff81 	bl	80175f0 <OsSchedUnlock>
                return;
 80186ee:	e116      	b.n	801891e <CoKfree+0x2d6>
            }	
            if(((U32)(nextUMB->nextMB)&0x1) == 0)		
 80186f0:	697b      	ldr	r3, [r7, #20]
 80186f2:	681b      	ldr	r3, [r3, #0]
 80186f4:	f003 0301 	and.w	r3, r3, #1
 80186f8:	2b00      	cmp	r3, #0
 80186fa:	d107      	bne.n	801870c <CoKfree+0xc4>
            {
                nextFMB = (P_FMB)(nextUMB->nextMB);
 80186fc:	697b      	ldr	r3, [r7, #20]
 80186fe:	681b      	ldr	r3, [r3, #0]
 8018700:	61bb      	str	r3, [r7, #24]
                nextUMB = (P_UMB)((U32)(nextFMB->nextUMB)-1);		
 8018702:	69bb      	ldr	r3, [r7, #24]
 8018704:	685b      	ldr	r3, [r3, #4]
 8018706:	3b01      	subs	r3, #1
 8018708:	617b      	str	r3, [r7, #20]
 801870a:	e003      	b.n	8018714 <CoKfree+0xcc>
            }
            else
            {
                nextUMB = (P_UMB)((U32)(nextUMB->nextMB)-1);	
 801870c:	697b      	ldr	r3, [r7, #20]
 801870e:	681b      	ldr	r3, [r3, #0]
 8018710:	3b01      	subs	r3, #1
 8018712:	617b      	str	r3, [r7, #20]
        while(nextUMB != usedMB)	
 8018714:	697a      	ldr	r2, [r7, #20]
 8018716:	68fb      	ldr	r3, [r7, #12]
 8018718:	429a      	cmp	r2, r3
 801871a:	d1e3      	bne.n	80186e4 <CoKfree+0x9c>
    }
#endif
    
    
    /* Is between two free memory block? */	 
    if( (((U32)(usedMB->nextMB)&0x1) == 0) && (((U32)(usedMB->preMB)&0x1)==0) )	
 801871c:	68fb      	ldr	r3, [r7, #12]
 801871e:	681b      	ldr	r3, [r3, #0]
 8018720:	f003 0301 	and.w	r3, r3, #1
 8018724:	2b00      	cmp	r3, #0
 8018726:	d151      	bne.n	80187cc <CoKfree+0x184>
 8018728:	68fb      	ldr	r3, [r7, #12]
 801872a:	685b      	ldr	r3, [r3, #4]
 801872c:	f003 0301 	and.w	r3, r3, #1
 8018730:	2b00      	cmp	r3, #0
 8018732:	d14b      	bne.n	80187cc <CoKfree+0x184>
    {                             /* Yes,is the only one item in kernel heap? */
        if((usedMB->nextMB == Co_NULL) && (usedMB->preMB == Co_NULL))
 8018734:	68fb      	ldr	r3, [r7, #12]
 8018736:	681b      	ldr	r3, [r3, #0]
 8018738:	2b00      	cmp	r3, #0
 801873a:	d112      	bne.n	8018762 <CoKfree+0x11a>
 801873c:	68fb      	ldr	r3, [r7, #12]
 801873e:	685b      	ldr	r3, [r3, #4]
 8018740:	2b00      	cmp	r3, #0
 8018742:	d10e      	bne.n	8018762 <CoKfree+0x11a>
        {
            curFMB = (P_FMB)usedMB;       /* Yes,release this item            */
 8018744:	68fb      	ldr	r3, [r7, #12]
 8018746:	61fb      	str	r3, [r7, #28]
            curFMB->nextFMB = Co_NULL;
 8018748:	69fb      	ldr	r3, [r7, #28]
 801874a:	2200      	movs	r2, #0
 801874c:	601a      	str	r2, [r3, #0]
            curFMB->nextUMB = Co_NULL;
 801874e:	69fb      	ldr	r3, [r7, #28]
 8018750:	2200      	movs	r2, #0
 8018752:	605a      	str	r2, [r3, #4]
            curFMB->preUMB  = Co_NULL;
 8018754:	69fb      	ldr	r3, [r7, #28]
 8018756:	2200      	movs	r2, #0
 8018758:	609a      	str	r2, [r3, #8]
            FMBlist = curFMB;	
 801875a:	4a4e      	ldr	r2, [pc, #312]	; (8018894 <CoKfree+0x24c>)
 801875c:	69fb      	ldr	r3, [r7, #28]
 801875e:	6013      	str	r3, [r2, #0]
        if((usedMB->nextMB == Co_NULL) && (usedMB->preMB == Co_NULL))
 8018760:	e0bf      	b.n	80188e2 <CoKfree+0x29a>
        }
        else if(usedMB->preMB == Co_NULL)    /* Is the first item in kernel heap */
 8018762:	68fb      	ldr	r3, [r7, #12]
 8018764:	685b      	ldr	r3, [r3, #4]
 8018766:	2b00      	cmp	r3, #0
 8018768:	d113      	bne.n	8018792 <CoKfree+0x14a>
        {		
            /* Yes,release this item,and set link for list                    */						
            curFMB  = (P_FMB)usedMB; 
 801876a:	68fb      	ldr	r3, [r7, #12]
 801876c:	61fb      	str	r3, [r7, #28]
            nextFMB = (P_FMB)usedMB->nextMB;
 801876e:	68fb      	ldr	r3, [r7, #12]
 8018770:	681b      	ldr	r3, [r3, #0]
 8018772:	61bb      	str	r3, [r7, #24]
            
            curFMB->nextFMB = nextFMB->nextFMB;	
 8018774:	69bb      	ldr	r3, [r7, #24]
 8018776:	681a      	ldr	r2, [r3, #0]
 8018778:	69fb      	ldr	r3, [r7, #28]
 801877a:	601a      	str	r2, [r3, #0]
            curFMB->nextUMB = nextFMB->nextUMB;
 801877c:	69bb      	ldr	r3, [r7, #24]
 801877e:	685a      	ldr	r2, [r3, #4]
 8018780:	69fb      	ldr	r3, [r7, #28]
 8018782:	605a      	str	r2, [r3, #4]
            curFMB->preUMB  = Co_NULL;
 8018784:	69fb      	ldr	r3, [r7, #28]
 8018786:	2200      	movs	r2, #0
 8018788:	609a      	str	r2, [r3, #8]
            FMBlist         = curFMB;
 801878a:	4a42      	ldr	r2, [pc, #264]	; (8018894 <CoKfree+0x24c>)
 801878c:	69fb      	ldr	r3, [r7, #28]
 801878e:	6013      	str	r3, [r2, #0]
        if((usedMB->nextMB == Co_NULL) && (usedMB->preMB == Co_NULL))
 8018790:	e0a7      	b.n	80188e2 <CoKfree+0x29a>
        }
        else if(usedMB->nextMB == Co_NULL)   /* Is the last item in kernel heap  */
 8018792:	68fb      	ldr	r3, [r7, #12]
 8018794:	681b      	ldr	r3, [r3, #0]
 8018796:	2b00      	cmp	r3, #0
 8018798:	d109      	bne.n	80187ae <CoKfree+0x166>
        {                      /* Yes,release this item,and set link for list */
            curFMB = (P_FMB)(usedMB->preMB);	
 801879a:	68fb      	ldr	r3, [r7, #12]
 801879c:	685b      	ldr	r3, [r3, #4]
 801879e:	61fb      	str	r3, [r7, #28]
            curFMB->nextFMB = Co_NULL;
 80187a0:	69fb      	ldr	r3, [r7, #28]
 80187a2:	2200      	movs	r2, #0
 80187a4:	601a      	str	r2, [r3, #0]
            curFMB->nextUMB = Co_NULL;
 80187a6:	69fb      	ldr	r3, [r7, #28]
 80187a8:	2200      	movs	r2, #0
 80187aa:	605a      	str	r2, [r3, #4]
        if((usedMB->nextMB == Co_NULL) && (usedMB->preMB == Co_NULL))
 80187ac:	e099      	b.n	80188e2 <CoKfree+0x29a>
        }							    
        else                  /* All no,show this item between two normal FMB */
        {		
            /* release this item,and set link for list                        */						  
            nextFMB = (P_FMB)usedMB->nextMB;
 80187ae:	68fb      	ldr	r3, [r7, #12]
 80187b0:	681b      	ldr	r3, [r3, #0]
 80187b2:	61bb      	str	r3, [r7, #24]
            curFMB  = (P_FMB)(usedMB->preMB);	
 80187b4:	68fb      	ldr	r3, [r7, #12]
 80187b6:	685b      	ldr	r3, [r3, #4]
 80187b8:	61fb      	str	r3, [r7, #28]
            
            curFMB->nextFMB = nextFMB->nextFMB;
 80187ba:	69bb      	ldr	r3, [r7, #24]
 80187bc:	681a      	ldr	r2, [r3, #0]
 80187be:	69fb      	ldr	r3, [r7, #28]
 80187c0:	601a      	str	r2, [r3, #0]
            curFMB->nextUMB = nextFMB->nextUMB;
 80187c2:	69bb      	ldr	r3, [r7, #24]
 80187c4:	685a      	ldr	r2, [r3, #4]
 80187c6:	69fb      	ldr	r3, [r7, #28]
 80187c8:	605a      	str	r2, [r3, #4]
        if((usedMB->nextMB == Co_NULL) && (usedMB->preMB == Co_NULL))
 80187ca:	e08a      	b.n	80188e2 <CoKfree+0x29a>
        }
    }
    else if(((U32)(usedMB->preMB)&0x1) == 0)  /* Is between FMB and UMB?      */
 80187cc:	68fb      	ldr	r3, [r7, #12]
 80187ce:	685b      	ldr	r3, [r3, #4]
 80187d0:	f003 0301 	and.w	r3, r3, #1
 80187d4:	2b00      	cmp	r3, #0
 80187d6:	d120      	bne.n	801881a <CoKfree+0x1d2>
    {								   
        if(usedMB->preMB == Co_NULL)   /* Yes,is the first item in kernel heap?  */
 80187d8:	68fb      	ldr	r3, [r7, #12]
 80187da:	685b      	ldr	r3, [r3, #4]
 80187dc:	2b00      	cmp	r3, #0
 80187de:	d112      	bne.n	8018806 <CoKfree+0x1be>
        {
            /* Yes,release this item,and set link for list                    */
            curFMB          = (P_FMB)usedMB;      
 80187e0:	68fb      	ldr	r3, [r7, #12]
 80187e2:	61fb      	str	r3, [r7, #28]
            nextUMB         = (P_UMB)usedMB->nextMB;		
 80187e4:	68fb      	ldr	r3, [r7, #12]
 80187e6:	681b      	ldr	r3, [r3, #0]
 80187e8:	617b      	str	r3, [r7, #20]
            curFMB->nextUMB = nextUMB;
 80187ea:	69fb      	ldr	r3, [r7, #28]
 80187ec:	697a      	ldr	r2, [r7, #20]
 80187ee:	605a      	str	r2, [r3, #4]
            curFMB->preUMB  = Co_NULL;
 80187f0:	69fb      	ldr	r3, [r7, #28]
 80187f2:	2200      	movs	r2, #0
 80187f4:	609a      	str	r2, [r3, #8]
            curFMB->nextFMB = FMBlist;
 80187f6:	4b27      	ldr	r3, [pc, #156]	; (8018894 <CoKfree+0x24c>)
 80187f8:	681a      	ldr	r2, [r3, #0]
 80187fa:	69fb      	ldr	r3, [r7, #28]
 80187fc:	601a      	str	r2, [r3, #0]
            FMBlist         = curFMB;
 80187fe:	4a25      	ldr	r2, [pc, #148]	; (8018894 <CoKfree+0x24c>)
 8018800:	69fb      	ldr	r3, [r7, #28]
 8018802:	6013      	str	r3, [r2, #0]
 8018804:	e06d      	b.n	80188e2 <CoKfree+0x29a>
        }
        else                    /* No,release this item,and set link for list */
        {							      
            curFMB          = (P_FMB)usedMB->preMB;
 8018806:	68fb      	ldr	r3, [r7, #12]
 8018808:	685b      	ldr	r3, [r3, #4]
 801880a:	61fb      	str	r3, [r7, #28]
            nextUMB         = (P_UMB)usedMB->nextMB;
 801880c:	68fb      	ldr	r3, [r7, #12]
 801880e:	681b      	ldr	r3, [r3, #0]
 8018810:	617b      	str	r3, [r7, #20]
            curFMB->nextUMB = nextUMB;
 8018812:	69fb      	ldr	r3, [r7, #28]
 8018814:	697a      	ldr	r2, [r7, #20]
 8018816:	605a      	str	r2, [r3, #4]
 8018818:	e063      	b.n	80188e2 <CoKfree+0x29a>
        }
    
    }
    else if(((U32)(usedMB->nextMB)&0x1) == 0)   /* Is between UMB and FMB?    */
 801881a:	68fb      	ldr	r3, [r7, #12]
 801881c:	681b      	ldr	r3, [r3, #0]
 801881e:	f003 0301 	and.w	r3, r3, #1
 8018822:	2b00      	cmp	r3, #0
 8018824:	d138      	bne.n	8018898 <CoKfree+0x250>
    {                                           /* Yes                        */
        preUMB = (P_UMB)(usedMB->preMB);        /* Get previous UMB           */
 8018826:	68fb      	ldr	r3, [r7, #12]
 8018828:	685b      	ldr	r3, [r3, #4]
 801882a:	613b      	str	r3, [r7, #16]
        curFMB = (P_FMB)(usedMB);               /* new FMB                    */
 801882c:	68fb      	ldr	r3, [r7, #12]
 801882e:	61fb      	str	r3, [r7, #28]
        preFMB = GetPreFMB(usedMB);             /* Get previous FMB           */
 8018830:	68f8      	ldr	r0, [r7, #12]
 8018832:	f000 f879 	bl	8018928 <GetPreFMB>
 8018836:	60b8      	str	r0, [r7, #8]
        if(preFMB == Co_NULL)                      /* Is previous FMB==Co_NULL?     */
 8018838:	68bb      	ldr	r3, [r7, #8]
 801883a:	2b00      	cmp	r3, #0
 801883c:	d106      	bne.n	801884c <CoKfree+0x204>
        {	
            nextFMB = FMBlist;                  /* Yes,get next FMB           */ 
 801883e:	4b15      	ldr	r3, [pc, #84]	; (8018894 <CoKfree+0x24c>)
 8018840:	681b      	ldr	r3, [r3, #0]
 8018842:	61bb      	str	r3, [r7, #24]
            FMBlist = curFMB;   /* Reset new FMB as the first item of FMB list*/
 8018844:	4a13      	ldr	r2, [pc, #76]	; (8018894 <CoKfree+0x24c>)
 8018846:	69fb      	ldr	r3, [r7, #28]
 8018848:	6013      	str	r3, [r2, #0]
 801884a:	e005      	b.n	8018858 <CoKfree+0x210>
        }
        else
        {
            nextFMB = preFMB->nextFMB;          /* No,get next FMB            */
 801884c:	68bb      	ldr	r3, [r7, #8]
 801884e:	681b      	ldr	r3, [r3, #0]
 8018850:	61bb      	str	r3, [r7, #24]
            preFMB->nextFMB  = curFMB;          /* Set link for FMB list      */
 8018852:	68bb      	ldr	r3, [r7, #8]
 8018854:	69fa      	ldr	r2, [r7, #28]
 8018856:	601a      	str	r2, [r3, #0]
        }
        
        if(nextFMB == Co_NULL)           /* Is new FMB as last item of FMB list? */
 8018858:	69bb      	ldr	r3, [r7, #24]
 801885a:	2b00      	cmp	r3, #0
 801885c:	d109      	bne.n	8018872 <CoKfree+0x22a>
        {	
            curFMB->preUMB  = preUMB;           /* Yes,set link for list      */
 801885e:	69fb      	ldr	r3, [r7, #28]
 8018860:	693a      	ldr	r2, [r7, #16]
 8018862:	609a      	str	r2, [r3, #8]
            curFMB->nextUMB = Co_NULL;
 8018864:	69fb      	ldr	r3, [r7, #28]
 8018866:	2200      	movs	r2, #0
 8018868:	605a      	str	r2, [r3, #4]
            curFMB->nextFMB = Co_NULL;
 801886a:	69fb      	ldr	r3, [r7, #28]
 801886c:	2200      	movs	r2, #0
 801886e:	601a      	str	r2, [r3, #0]
 8018870:	e037      	b.n	80188e2 <CoKfree+0x29a>
        }	
        else
        {
            curFMB->preUMB  = preUMB;           /* No,set link for list       */
 8018872:	69fb      	ldr	r3, [r7, #28]
 8018874:	693a      	ldr	r2, [r7, #16]
 8018876:	609a      	str	r2, [r3, #8]
            curFMB->nextUMB = nextFMB->nextUMB;
 8018878:	69bb      	ldr	r3, [r7, #24]
 801887a:	685a      	ldr	r2, [r3, #4]
 801887c:	69fb      	ldr	r3, [r7, #28]
 801887e:	605a      	str	r2, [r3, #4]
            curFMB->nextFMB = nextFMB->nextFMB;	
 8018880:	69bb      	ldr	r3, [r7, #24]
 8018882:	681a      	ldr	r2, [r3, #0]
 8018884:	69fb      	ldr	r3, [r7, #28]
 8018886:	601a      	str	r2, [r3, #0]
 8018888:	e02b      	b.n	80188e2 <CoKfree+0x29a>
 801888a:	bf00      	nop
 801888c:	2000d4e8 	.word	0x2000d4e8
 8018890:	20003749 	.word	0x20003749
 8018894:	2000d4e4 	.word	0x2000d4e4
        }
    }
    else                                    /* All no,show UMB between two UMB*/
    {									  
        curFMB  = (P_FMB)(usedMB);          /* new FMB                        */
 8018898:	68fb      	ldr	r3, [r7, #12]
 801889a:	61fb      	str	r3, [r7, #28]
        preFMB  = GetPreFMB(usedMB);        /* Get previous FMB               */
 801889c:	68f8      	ldr	r0, [r7, #12]
 801889e:	f000 f843 	bl	8018928 <GetPreFMB>
 80188a2:	60b8      	str	r0, [r7, #8]
        preUMB  = (P_UMB)(usedMB->preMB);   /* Get previous UMB               */
 80188a4:	68fb      	ldr	r3, [r7, #12]
 80188a6:	685b      	ldr	r3, [r3, #4]
 80188a8:	613b      	str	r3, [r7, #16]
        nextUMB = (P_UMB)(usedMB->nextMB);  /* Get next UMB                   */
 80188aa:	68fb      	ldr	r3, [r7, #12]
 80188ac:	681b      	ldr	r3, [r3, #0]
 80188ae:	617b      	str	r3, [r7, #20]
        
        if(preFMB == Co_NULL )                 /* Is previous FMB==Co_NULL?         */
 80188b0:	68bb      	ldr	r3, [r7, #8]
 80188b2:	2b00      	cmp	r3, #0
 80188b4:	d106      	bne.n	80188c4 <CoKfree+0x27c>
        {
            nextFMB = FMBlist;              /* Yes,get next FMB               */
 80188b6:	4b1b      	ldr	r3, [pc, #108]	; (8018924 <CoKfree+0x2dc>)
 80188b8:	681b      	ldr	r3, [r3, #0]
 80188ba:	61bb      	str	r3, [r7, #24]
            FMBlist = curFMB;  /* Reset new FMB as the first item of FMB list */
 80188bc:	4a19      	ldr	r2, [pc, #100]	; (8018924 <CoKfree+0x2dc>)
 80188be:	69fb      	ldr	r3, [r7, #28]
 80188c0:	6013      	str	r3, [r2, #0]
 80188c2:	e005      	b.n	80188d0 <CoKfree+0x288>
      	}
      	else
      	{
            nextFMB = preFMB->nextFMB;      /* No,get next FMB                */
 80188c4:	68bb      	ldr	r3, [r7, #8]
 80188c6:	681b      	ldr	r3, [r3, #0]
 80188c8:	61bb      	str	r3, [r7, #24]
            preFMB->nextFMB = curFMB;       /* Set link for FMB list          */
 80188ca:	68bb      	ldr	r3, [r7, #8]
 80188cc:	69fa      	ldr	r2, [r7, #28]
 80188ce:	601a      	str	r2, [r3, #0]
      	}
      	
        curFMB->preUMB  = preUMB;           /* Set current FMB link for list  */
 80188d0:	69fb      	ldr	r3, [r7, #28]
 80188d2:	693a      	ldr	r2, [r7, #16]
 80188d4:	609a      	str	r2, [r3, #8]
        curFMB->nextUMB = nextUMB;
 80188d6:	69fb      	ldr	r3, [r7, #28]
 80188d8:	697a      	ldr	r2, [r7, #20]
 80188da:	605a      	str	r2, [r3, #4]
        curFMB->nextFMB = nextFMB;
 80188dc:	69fb      	ldr	r3, [r7, #28]
 80188de:	69ba      	ldr	r2, [r7, #24]
 80188e0:	601a      	str	r2, [r3, #0]
    }
    
    if(curFMB->preUMB != Co_NULL)/* Is current FMB as first item in kernel heap? */
 80188e2:	69fb      	ldr	r3, [r7, #28]
 80188e4:	689b      	ldr	r3, [r3, #8]
 80188e6:	2b00      	cmp	r3, #0
 80188e8:	d006      	beq.n	80188f8 <CoKfree+0x2b0>
    {                         /* No,set link for list                         */
      	preUMB = (P_UMB)((U32)(curFMB->preUMB)-1); 
 80188ea:	69fb      	ldr	r3, [r7, #28]
 80188ec:	689b      	ldr	r3, [r3, #8]
 80188ee:	3b01      	subs	r3, #1
 80188f0:	613b      	str	r3, [r7, #16]
      	preUMB->nextMB = (void*)curFMB;
 80188f2:	693b      	ldr	r3, [r7, #16]
 80188f4:	69fa      	ldr	r2, [r7, #28]
 80188f6:	601a      	str	r2, [r3, #0]
    }
    if(curFMB->nextUMB != Co_NULL)/* Is current FMB as last item in kernel heap? */
 80188f8:	69fb      	ldr	r3, [r7, #28]
 80188fa:	685b      	ldr	r3, [r3, #4]
 80188fc:	2b00      	cmp	r3, #0
 80188fe:	d006      	beq.n	801890e <CoKfree+0x2c6>
    {                          /* No,set link for list                        */
      	nextUMB = (P_UMB)((U32)(curFMB->nextUMB)-1); 
 8018900:	69fb      	ldr	r3, [r7, #28]
 8018902:	685b      	ldr	r3, [r3, #4]
 8018904:	3b01      	subs	r3, #1
 8018906:	617b      	str	r3, [r7, #20]
      	nextUMB->preMB = (void*)curFMB;		
 8018908:	697b      	ldr	r3, [r7, #20]
 801890a:	69fa      	ldr	r2, [r7, #28]
 801890c:	605a      	str	r2, [r3, #4]
    }
    OsSchedUnlock();           /* Unlock schedule                             */
 801890e:	f7fe fe6f 	bl	80175f0 <OsSchedUnlock>
 8018912:	e004      	b.n	801891e <CoKfree+0x2d6>
        return;
 8018914:	bf00      	nop
 8018916:	e002      	b.n	801891e <CoKfree+0x2d6>
        return;
 8018918:	bf00      	nop
 801891a:	e000      	b.n	801891e <CoKfree+0x2d6>
        return;
 801891c:	bf00      	nop
}
 801891e:	3720      	adds	r7, #32
 8018920:	46bd      	mov	sp, r7
 8018922:	bd80      	pop	{r7, pc}
 8018924:	2000d4e4 	.word	0x2000d4e4

08018928 <GetPreFMB>:
 * @par Description
 * @details    This function is called to get previous free memory block pointer.
 *******************************************************************************
 */
static P_FMB GetPreFMB(P_UMB usedMB)
{
 8018928:	b480      	push	{r7}
 801892a:	b085      	sub	sp, #20
 801892c:	af00      	add	r7, sp, #0
 801892e:	6078      	str	r0, [r7, #4]
    P_UMB preUMB;
    preUMB = usedMB;
 8018930:	687b      	ldr	r3, [r7, #4]
 8018932:	60fb      	str	r3, [r7, #12]
    while(((U32)(preUMB->preMB)&0x1))   /* Is previous MB as FMB?             */
 8018934:	e003      	b.n	801893e <GetPreFMB+0x16>
    {                                   /* No,get previous MB                 */
        preUMB = (P_UMB)((U32)(preUMB->preMB)-1);
 8018936:	68fb      	ldr	r3, [r7, #12]
 8018938:	685b      	ldr	r3, [r3, #4]
 801893a:	3b01      	subs	r3, #1
 801893c:	60fb      	str	r3, [r7, #12]
    while(((U32)(preUMB->preMB)&0x1))   /* Is previous MB as FMB?             */
 801893e:	68fb      	ldr	r3, [r7, #12]
 8018940:	685b      	ldr	r3, [r3, #4]
 8018942:	f003 0301 	and.w	r3, r3, #1
 8018946:	2b00      	cmp	r3, #0
 8018948:	d1f5      	bne.n	8018936 <GetPreFMB+0xe>
    }	
    return (P_FMB)(preUMB->preMB);      /* Yes,return previous MB             */
 801894a:	68fb      	ldr	r3, [r7, #12]
 801894c:	685b      	ldr	r3, [r3, #4]
}
 801894e:	4618      	mov	r0, r3
 8018950:	3714      	adds	r7, #20
 8018952:	46bd      	mov	sp, r7
 8018954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018958:	4770      	bx	lr
 801895a:	bf00      	nop

0801895c <CoCreateMbox>:
 * @details    This function is called to create a mailbox. 
 * @note 
 *******************************************************************************
 */
OS_EventID CoCreateMbox(U8 sortType)
{
 801895c:	b580      	push	{r7, lr}
 801895e:	b084      	sub	sp, #16
 8018960:	af00      	add	r7, sp, #0
 8018962:	4603      	mov	r3, r0
 8018964:	71fb      	strb	r3, [r7, #7]
    P_ECB pecb;
    
    /* Create a mailbox type event control block                              */
    pecb = CreatEvent(EVENT_TYPE_MBOX,sortType,Co_NULL);
 8018966:	79fb      	ldrb	r3, [r7, #7]
 8018968:	2200      	movs	r2, #0
 801896a:	4619      	mov	r1, r3
 801896c:	2002      	movs	r0, #2
 801896e:	f7fe ff43 	bl	80177f8 <CreatEvent>
 8018972:	60f8      	str	r0, [r7, #12]
    if(pecb == Co_NULL)                    /* If failed to create event block    */
 8018974:	68fb      	ldr	r3, [r7, #12]
 8018976:	2b00      	cmp	r3, #0
 8018978:	d101      	bne.n	801897e <CoCreateMbox+0x22>
    {
        return E_CREATE_FAIL;
 801897a:	23ff      	movs	r3, #255	; 0xff
 801897c:	e004      	b.n	8018988 <CoCreateMbox+0x2c>
    }
    pecb->eventCounter = 0;
 801897e:	68fb      	ldr	r3, [r7, #12]
 8018980:	2200      	movs	r2, #0
 8018982:	80da      	strh	r2, [r3, #6]
    return (pecb->id);      /* Create a mailbox successfully, return event ID */		
 8018984:	68fb      	ldr	r3, [r7, #12]
 8018986:	791b      	ldrb	r3, [r3, #4]
}
 8018988:	4618      	mov	r0, r3
 801898a:	3710      	adds	r7, #16
 801898c:	46bd      	mov	sp, r7
 801898e:	bd80      	pop	{r7, pc}

08018990 <CoDelMbox>:
 * @details    This function is called to delete a mailbox.	 
 * @note 
 *******************************************************************************
 */
StatusType CoDelMbox(OS_EventID id,U8 opt)
{
 8018990:	b580      	push	{r7, lr}
 8018992:	b084      	sub	sp, #16
 8018994:	af00      	add	r7, sp, #0
 8018996:	4603      	mov	r3, r0
 8018998:	460a      	mov	r2, r1
 801899a:	71fb      	strb	r3, [r7, #7]
 801899c:	4613      	mov	r3, r2
 801899e:	71bb      	strb	r3, [r7, #6]
    P_ECB pecb;
    
#if CFG_PAR_CHECKOUT_EN >0
    if(id >= CFG_MAX_EVENT)               /* Judge id is valid or not?        */ 
 80189a0:	79fb      	ldrb	r3, [r7, #7]
 80189a2:	2b13      	cmp	r3, #19
 80189a4:	d901      	bls.n	80189aa <CoDelMbox+0x1a>
    {
        return E_INVALID_ID;              /* Id is invalid ,return error      */
 80189a6:	2301      	movs	r3, #1
 80189a8:	e013      	b.n	80189d2 <CoDelMbox+0x42>
    }
#endif
    pecb = &EventTbl[id];
 80189aa:	79fb      	ldrb	r3, [r7, #7]
 80189ac:	011b      	lsls	r3, r3, #4
 80189ae:	4a0b      	ldr	r2, [pc, #44]	; (80189dc <CoDelMbox+0x4c>)
 80189b0:	4413      	add	r3, r2
 80189b2:	60fb      	str	r3, [r7, #12]
#if CFG_PAR_CHECKOUT_EN >0
    if(pecb->eventType != EVENT_TYPE_MBOX)/* Validate event control block type*/    
 80189b4:	68fb      	ldr	r3, [r7, #12]
 80189b6:	795b      	ldrb	r3, [r3, #5]
 80189b8:	f003 030f 	and.w	r3, r3, #15
 80189bc:	b2db      	uxtb	r3, r3
 80189be:	2b02      	cmp	r3, #2
 80189c0:	d001      	beq.n	80189c6 <CoDelMbox+0x36>
    {
        return E_INVALID_ID;              /* The event is not mailbox         */	
 80189c2:	2301      	movs	r3, #1
 80189c4:	e005      	b.n	80189d2 <CoDelMbox+0x42>
    }
#endif	
    return (DeleteEvent(pecb,opt)); /* Delete the mailbox event control block */
 80189c6:	79bb      	ldrb	r3, [r7, #6]
 80189c8:	4619      	mov	r1, r3
 80189ca:	68f8      	ldr	r0, [r7, #12]
 80189cc:	f7fe ff56 	bl	801787c <DeleteEvent>
 80189d0:	4603      	mov	r3, r0
}
 80189d2:	4618      	mov	r0, r3
 80189d4:	3710      	adds	r7, #16
 80189d6:	46bd      	mov	sp, r7
 80189d8:	bd80      	pop	{r7, pc}
 80189da:	bf00      	nop
 80189dc:	2000374c 	.word	0x2000374c

080189e0 <CoAcceptMail>:
 * @details    This function is called to accept a mailbox. 
 * @note 
 *******************************************************************************
 */
void* CoAcceptMail(OS_EventID id,StatusType* perr)
{
 80189e0:	b580      	push	{r7, lr}
 80189e2:	b084      	sub	sp, #16
 80189e4:	af00      	add	r7, sp, #0
 80189e6:	4603      	mov	r3, r0
 80189e8:	6039      	str	r1, [r7, #0]
 80189ea:	71fb      	strb	r3, [r7, #7]
    P_ECB pecb;
    void* pmail;
#if CFG_PAR_CHECKOUT_EN >0
    if(id >= CFG_MAX_EVENT)	                
 80189ec:	79fb      	ldrb	r3, [r7, #7]
 80189ee:	2b13      	cmp	r3, #19
 80189f0:	d904      	bls.n	80189fc <CoAcceptMail+0x1c>
    {
        *perr = E_INVALID_ID;             /* Invalid 'id'                     */
 80189f2:	683b      	ldr	r3, [r7, #0]
 80189f4:	2201      	movs	r2, #1
 80189f6:	701a      	strb	r2, [r3, #0]
        return Co_NULL;
 80189f8:	2300      	movs	r3, #0
 80189fa:	e031      	b.n	8018a60 <CoAcceptMail+0x80>
    }
#endif
    pecb = &EventTbl[id];
 80189fc:	79fb      	ldrb	r3, [r7, #7]
 80189fe:	011b      	lsls	r3, r3, #4
 8018a00:	4a19      	ldr	r2, [pc, #100]	; (8018a68 <CoAcceptMail+0x88>)
 8018a02:	4413      	add	r3, r2
 8018a04:	60fb      	str	r3, [r7, #12]
    
#if CFG_PAR_CHECKOUT_EN >0
    if(pecb->eventType != EVENT_TYPE_MBOX)/* Invalid event control block type */
 8018a06:	68fb      	ldr	r3, [r7, #12]
 8018a08:	795b      	ldrb	r3, [r3, #5]
 8018a0a:	f003 030f 	and.w	r3, r3, #15
 8018a0e:	b2db      	uxtb	r3, r3
 8018a10:	2b02      	cmp	r3, #2
 8018a12:	d004      	beq.n	8018a1e <CoAcceptMail+0x3e>
    {
        *perr = E_INVALID_ID;	
 8018a14:	683b      	ldr	r3, [r7, #0]
 8018a16:	2201      	movs	r2, #1
 8018a18:	701a      	strb	r2, [r3, #0]
        return Co_NULL;
 8018a1a:	2300      	movs	r3, #0
 8018a1c:	e020      	b.n	8018a60 <CoAcceptMail+0x80>
    }
#endif
	OsSchedLock();
 8018a1e:	4b13      	ldr	r3, [pc, #76]	; (8018a6c <CoAcceptMail+0x8c>)
 8018a20:	781b      	ldrb	r3, [r3, #0]
 8018a22:	b2db      	uxtb	r3, r3
 8018a24:	3301      	adds	r3, #1
 8018a26:	b2da      	uxtb	r2, r3
 8018a28:	4b10      	ldr	r3, [pc, #64]	; (8018a6c <CoAcceptMail+0x8c>)
 8018a2a:	701a      	strb	r2, [r3, #0]
    if(pecb->eventCounter == 1)             /* If there is already a message  */
 8018a2c:	68fb      	ldr	r3, [r7, #12]
 8018a2e:	88db      	ldrh	r3, [r3, #6]
 8018a30:	2b01      	cmp	r3, #1
 8018a32:	d10f      	bne.n	8018a54 <CoAcceptMail+0x74>
    {
        *perr = E_OK;
 8018a34:	683b      	ldr	r3, [r7, #0]
 8018a36:	2200      	movs	r2, #0
 8018a38:	701a      	strb	r2, [r3, #0]
        pmail = pecb->eventPtr;             /* Get the message                */
 8018a3a:	68fb      	ldr	r3, [r7, #12]
 8018a3c:	681b      	ldr	r3, [r3, #0]
 8018a3e:	60bb      	str	r3, [r7, #8]
        pecb->eventPtr     = Co_NULL;          /* Clear the mailbox              */
 8018a40:	68fb      	ldr	r3, [r7, #12]
 8018a42:	2200      	movs	r2, #0
 8018a44:	601a      	str	r2, [r3, #0]
        pecb->eventCounter = 0;
 8018a46:	68fb      	ldr	r3, [r7, #12]
 8018a48:	2200      	movs	r2, #0
 8018a4a:	80da      	strh	r2, [r3, #6]
		OsSchedUnlock();
 8018a4c:	f7fe fdd0 	bl	80175f0 <OsSchedUnlock>
        return pmail;                       /* Return the message received    */		
 8018a50:	68bb      	ldr	r3, [r7, #8]
 8018a52:	e005      	b.n	8018a60 <CoAcceptMail+0x80>
    }
    else                                    /* If the mailbox is empty        */
    {	
		OsSchedUnlock();
 8018a54:	f7fe fdcc 	bl	80175f0 <OsSchedUnlock>
        *perr = E_MBOX_EMPTY;               /* Mailbox is empty,return Co_NULL   */
 8018a58:	683b      	ldr	r3, [r7, #0]
 8018a5a:	220a      	movs	r2, #10
 8018a5c:	701a      	strb	r2, [r3, #0]
        return Co_NULL;
 8018a5e:	2300      	movs	r3, #0
    }
}
 8018a60:	4618      	mov	r0, r3
 8018a62:	3710      	adds	r7, #16
 8018a64:	46bd      	mov	sp, r7
 8018a66:	bd80      	pop	{r7, pc}
 8018a68:	2000374c 	.word	0x2000374c
 8018a6c:	20003749 	.word	0x20003749

08018a70 <CoPendMail>:
 * @details    This function is called to wait a mailbox.	 
 * @note 
 *******************************************************************************
 */
void* CoPendMail(OS_EventID id,U32 timeout,StatusType* perr)
{
 8018a70:	b580      	push	{r7, lr}
 8018a72:	b088      	sub	sp, #32
 8018a74:	af00      	add	r7, sp, #0
 8018a76:	4603      	mov	r3, r0
 8018a78:	60b9      	str	r1, [r7, #8]
 8018a7a:	607a      	str	r2, [r7, #4]
 8018a7c:	73fb      	strb	r3, [r7, #15]
    P_ECB pecb;
    void* pmail;
    P_OSTCB  curTCB;
     
    if(OSIntNesting > 0)                /* If the caller is ISR               */
 8018a7e:	4b4f      	ldr	r3, [pc, #316]	; (8018bbc <CoPendMail+0x14c>)
 8018a80:	781b      	ldrb	r3, [r3, #0]
 8018a82:	b2db      	uxtb	r3, r3
 8018a84:	2b00      	cmp	r3, #0
 8018a86:	d004      	beq.n	8018a92 <CoPendMail+0x22>
    {
        *perr = E_CALL;
 8018a88:	687b      	ldr	r3, [r7, #4]
 8018a8a:	2203      	movs	r2, #3
 8018a8c:	701a      	strb	r2, [r3, #0]
        return Co_NULL;
 8018a8e:	2300      	movs	r3, #0
 8018a90:	e090      	b.n	8018bb4 <CoPendMail+0x144>
    }
    
#if CFG_PAR_CHECKOUT_EN >0
    if(id >= CFG_MAX_EVENT)              
 8018a92:	7bfb      	ldrb	r3, [r7, #15]
 8018a94:	2b13      	cmp	r3, #19
 8018a96:	d904      	bls.n	8018aa2 <CoPendMail+0x32>
    {
        *perr = E_INVALID_ID;           /* Invalid 'id',retrun error          */
 8018a98:	687b      	ldr	r3, [r7, #4]
 8018a9a:	2201      	movs	r2, #1
 8018a9c:	701a      	strb	r2, [r3, #0]
        return Co_NULL;
 8018a9e:	2300      	movs	r3, #0
 8018aa0:	e088      	b.n	8018bb4 <CoPendMail+0x144>
    }
#endif

    pecb = &EventTbl[id];
 8018aa2:	7bfb      	ldrb	r3, [r7, #15]
 8018aa4:	011b      	lsls	r3, r3, #4
 8018aa6:	4a46      	ldr	r2, [pc, #280]	; (8018bc0 <CoPendMail+0x150>)
 8018aa8:	4413      	add	r3, r2
 8018aaa:	61fb      	str	r3, [r7, #28]
#if CFG_PAR_CHECKOUT_EN >0
    if(pecb->eventType != EVENT_TYPE_MBOX)
 8018aac:	69fb      	ldr	r3, [r7, #28]
 8018aae:	795b      	ldrb	r3, [r3, #5]
 8018ab0:	f003 030f 	and.w	r3, r3, #15
 8018ab4:	b2db      	uxtb	r3, r3
 8018ab6:	2b02      	cmp	r3, #2
 8018ab8:	d004      	beq.n	8018ac4 <CoPendMail+0x54>
    {
        *perr = E_INVALID_ID;       /* Invalid event type,not EVENT_TYPE_MBOX */
 8018aba:	687b      	ldr	r3, [r7, #4]
 8018abc:	2201      	movs	r2, #1
 8018abe:	701a      	strb	r2, [r3, #0]
        return Co_NULL;
 8018ac0:	2300      	movs	r3, #0
 8018ac2:	e077      	b.n	8018bb4 <CoPendMail+0x144>
    }
#endif

    if(OSSchedLock != 0)                /* Judge schedule is locked or not?   */
 8018ac4:	4b3f      	ldr	r3, [pc, #252]	; (8018bc4 <CoPendMail+0x154>)
 8018ac6:	781b      	ldrb	r3, [r3, #0]
 8018ac8:	b2db      	uxtb	r3, r3
 8018aca:	2b00      	cmp	r3, #0
 8018acc:	d004      	beq.n	8018ad8 <CoPendMail+0x68>
    {	
        *perr = E_OS_IN_LOCK;           /* Schedule is locked                 */								 
 8018ace:	687b      	ldr	r3, [r7, #4]
 8018ad0:	2215      	movs	r2, #21
 8018ad2:	701a      	strb	r2, [r3, #0]
        return Co_NULL;                    /* return Co_NULL                        */
 8018ad4:	2300      	movs	r3, #0
 8018ad6:	e06d      	b.n	8018bb4 <CoPendMail+0x144>
    }
    OsSchedLock();
 8018ad8:	4b3a      	ldr	r3, [pc, #232]	; (8018bc4 <CoPendMail+0x154>)
 8018ada:	781b      	ldrb	r3, [r3, #0]
 8018adc:	b2db      	uxtb	r3, r3
 8018ade:	3301      	adds	r3, #1
 8018ae0:	b2da      	uxtb	r2, r3
 8018ae2:	4b38      	ldr	r3, [pc, #224]	; (8018bc4 <CoPendMail+0x154>)
 8018ae4:	701a      	strb	r2, [r3, #0]
    if( pecb->eventCounter == 1)        /* If there is already a message      */
 8018ae6:	69fb      	ldr	r3, [r7, #28]
 8018ae8:	88db      	ldrh	r3, [r3, #6]
 8018aea:	2b01      	cmp	r3, #1
 8018aec:	d10f      	bne.n	8018b0e <CoPendMail+0x9e>
    {
        *perr = E_OK;
 8018aee:	687b      	ldr	r3, [r7, #4]
 8018af0:	2200      	movs	r2, #0
 8018af2:	701a      	strb	r2, [r3, #0]
        pmail = pecb->eventPtr;         /* Get the message                    */
 8018af4:	69fb      	ldr	r3, [r7, #28]
 8018af6:	681b      	ldr	r3, [r3, #0]
 8018af8:	617b      	str	r3, [r7, #20]
        pecb->eventPtr     = Co_NULL;      /* Clear the mailbox                  */
 8018afa:	69fb      	ldr	r3, [r7, #28]
 8018afc:	2200      	movs	r2, #0
 8018afe:	601a      	str	r2, [r3, #0]
        pecb->eventCounter = 0;
 8018b00:	69fb      	ldr	r3, [r7, #28]
 8018b02:	2200      	movs	r2, #0
 8018b04:	80da      	strh	r2, [r3, #6]
        OsSchedUnlock();
 8018b06:	f7fe fd73 	bl	80175f0 <OsSchedUnlock>
        return pmail;                   /* Return the message received        */
 8018b0a:	697b      	ldr	r3, [r7, #20]
 8018b0c:	e052      	b.n	8018bb4 <CoPendMail+0x144>
    }
    else                       /* If message is not available, task will pend */ 
    {
    	OsSchedUnlock();
 8018b0e:	f7fe fd6f 	bl	80175f0 <OsSchedUnlock>
        curTCB = TCBRunning;
 8018b12:	4b2d      	ldr	r3, [pc, #180]	; (8018bc8 <CoPendMail+0x158>)
 8018b14:	681b      	ldr	r3, [r3, #0]
 8018b16:	61bb      	str	r3, [r7, #24]
        if(timeout == 0)                /* If time-out is not configured      */
 8018b18:	68bb      	ldr	r3, [r7, #8]
 8018b1a:	2b00      	cmp	r3, #0
 8018b1c:	d11a      	bne.n	8018b54 <CoPendMail+0xe4>
        {
            EventTaskToWait(pecb,curTCB); /* Block task until event occurs    */
 8018b1e:	69b9      	ldr	r1, [r7, #24]
 8018b20:	69f8      	ldr	r0, [r7, #28]
 8018b22:	f7fe fef1 	bl	8017908 <EventTaskToWait>
            *perr = E_OK;
 8018b26:	687b      	ldr	r3, [r7, #4]
 8018b28:	2200      	movs	r2, #0
 8018b2a:	701a      	strb	r2, [r3, #0]
            
            /* Have recived a message or the mailbox have been deleted        */
            OsSchedLock();
 8018b2c:	4b25      	ldr	r3, [pc, #148]	; (8018bc4 <CoPendMail+0x154>)
 8018b2e:	781b      	ldrb	r3, [r3, #0]
 8018b30:	b2db      	uxtb	r3, r3
 8018b32:	3301      	adds	r3, #1
 8018b34:	b2da      	uxtb	r2, r3
 8018b36:	4b23      	ldr	r3, [pc, #140]	; (8018bc4 <CoPendMail+0x154>)
 8018b38:	701a      	strb	r2, [r3, #0]
            pmail = curTCB->pmail;    
 8018b3a:	69bb      	ldr	r3, [r7, #24]
 8018b3c:	691b      	ldr	r3, [r3, #16]
 8018b3e:	617b      	str	r3, [r7, #20]
            pecb->eventCounter = 0;               
 8018b40:	69fb      	ldr	r3, [r7, #28]
 8018b42:	2200      	movs	r2, #0
 8018b44:	80da      	strh	r2, [r3, #6]
            curTCB->pmail = Co_NULL;
 8018b46:	69bb      	ldr	r3, [r7, #24]
 8018b48:	2200      	movs	r2, #0
 8018b4a:	611a      	str	r2, [r3, #16]
            OsSchedUnlock(); 
 8018b4c:	f7fe fd50 	bl	80175f0 <OsSchedUnlock>
            return pmail;               /* Return received message or Co_NULL    */
 8018b50:	697b      	ldr	r3, [r7, #20]
 8018b52:	e02f      	b.n	8018bb4 <CoPendMail+0x144>
        }
        else                            /* If time-out is configured          */
        {
            OsSchedLock();
 8018b54:	4b1b      	ldr	r3, [pc, #108]	; (8018bc4 <CoPendMail+0x154>)
 8018b56:	781b      	ldrb	r3, [r3, #0]
 8018b58:	b2db      	uxtb	r3, r3
 8018b5a:	3301      	adds	r3, #1
 8018b5c:	b2da      	uxtb	r2, r3
 8018b5e:	4b19      	ldr	r3, [pc, #100]	; (8018bc4 <CoPendMail+0x154>)
 8018b60:	701a      	strb	r2, [r3, #0]
            
            /* Block task until event or timeout occurs                       */
            EventTaskToWait(pecb,curTCB);   
 8018b62:	69b9      	ldr	r1, [r7, #24]
 8018b64:	69f8      	ldr	r0, [r7, #28]
 8018b66:	f7fe fecf 	bl	8017908 <EventTaskToWait>
            InsertDelayList(curTCB,timeout);
 8018b6a:	68b9      	ldr	r1, [r7, #8]
 8018b6c:	69b8      	ldr	r0, [r7, #24]
 8018b6e:	f001 fc4b 	bl	801a408 <InsertDelayList>
            OsSchedUnlock();
 8018b72:	f7fe fd3d 	bl	80175f0 <OsSchedUnlock>
            if( curTCB->pmail == Co_NULL)  /* Time-out occurred                  */
 8018b76:	69bb      	ldr	r3, [r7, #24]
 8018b78:	691b      	ldr	r3, [r3, #16]
 8018b7a:	2b00      	cmp	r3, #0
 8018b7c:	d104      	bne.n	8018b88 <CoPendMail+0x118>
            {
                *perr = E_TIMEOUT;
 8018b7e:	687b      	ldr	r3, [r7, #4]
 8018b80:	2205      	movs	r2, #5
 8018b82:	701a      	strb	r2, [r3, #0]
                return Co_NULL;
 8018b84:	2300      	movs	r3, #0
 8018b86:	e015      	b.n	8018bb4 <CoPendMail+0x144>
            }
            else    /* Have recived a message or the mailbox have been deleted*/
            {
                *perr = E_OK;
 8018b88:	687b      	ldr	r3, [r7, #4]
 8018b8a:	2200      	movs	r2, #0
 8018b8c:	701a      	strb	r2, [r3, #0]
                
                OsSchedLock();
 8018b8e:	4b0d      	ldr	r3, [pc, #52]	; (8018bc4 <CoPendMail+0x154>)
 8018b90:	781b      	ldrb	r3, [r3, #0]
 8018b92:	b2db      	uxtb	r3, r3
 8018b94:	3301      	adds	r3, #1
 8018b96:	b2da      	uxtb	r2, r3
 8018b98:	4b0a      	ldr	r3, [pc, #40]	; (8018bc4 <CoPendMail+0x154>)
 8018b9a:	701a      	strb	r2, [r3, #0]
                pmail = curTCB->pmail;            
 8018b9c:	69bb      	ldr	r3, [r7, #24]
 8018b9e:	691b      	ldr	r3, [r3, #16]
 8018ba0:	617b      	str	r3, [r7, #20]
                pecb->eventCounter = 0;   
 8018ba2:	69fb      	ldr	r3, [r7, #28]
 8018ba4:	2200      	movs	r2, #0
 8018ba6:	80da      	strh	r2, [r3, #6]
                curTCB->pmail = Co_NULL;
 8018ba8:	69bb      	ldr	r3, [r7, #24]
 8018baa:	2200      	movs	r2, #0
 8018bac:	611a      	str	r2, [r3, #16]
                OsSchedUnlock(); 
 8018bae:	f7fe fd1f 	bl	80175f0 <OsSchedUnlock>
                
                return pmail;           /* Return received message or Co_NULL    */
 8018bb2:	697b      	ldr	r3, [r7, #20]
            }			
        }	
    }
}
 8018bb4:	4618      	mov	r0, r3
 8018bb6:	3720      	adds	r7, #32
 8018bb8:	46bd      	mov	sp, r7
 8018bba:	bd80      	pop	{r7, pc}
 8018bbc:	20003748 	.word	0x20003748
 8018bc0:	2000374c 	.word	0x2000374c
 8018bc4:	20003749 	.word	0x20003749
 8018bc8:	2000d728 	.word	0x2000d728

08018bcc <CoPostMail>:
 * @details    This function is called to post a mail. 
 * @note 
 *******************************************************************************
 */
StatusType CoPostMail(OS_EventID id,void* pmail)
{
 8018bcc:	b580      	push	{r7, lr}
 8018bce:	b084      	sub	sp, #16
 8018bd0:	af00      	add	r7, sp, #0
 8018bd2:	4603      	mov	r3, r0
 8018bd4:	6039      	str	r1, [r7, #0]
 8018bd6:	71fb      	strb	r3, [r7, #7]
    P_ECB pecb;
#if CFG_PAR_CHECKOUT_EN >0
    if(id >= CFG_MAX_EVENT)	                
 8018bd8:	79fb      	ldrb	r3, [r7, #7]
 8018bda:	2b13      	cmp	r3, #19
 8018bdc:	d901      	bls.n	8018be2 <CoPostMail+0x16>
    {
        return E_INVALID_ID;            /* Invalid id,return error            */
 8018bde:	2301      	movs	r3, #1
 8018be0:	e026      	b.n	8018c30 <CoPostMail+0x64>
    }
#endif

    pecb = &EventTbl[id];
 8018be2:	79fb      	ldrb	r3, [r7, #7]
 8018be4:	011b      	lsls	r3, r3, #4
 8018be6:	4a14      	ldr	r2, [pc, #80]	; (8018c38 <CoPostMail+0x6c>)
 8018be8:	4413      	add	r3, r2
 8018bea:	60fb      	str	r3, [r7, #12]
#if CFG_PAR_CHECKOUT_EN >0
    if(pecb->eventType != EVENT_TYPE_MBOX)/* Validate event control block type*/
 8018bec:	68fb      	ldr	r3, [r7, #12]
 8018bee:	795b      	ldrb	r3, [r3, #5]
 8018bf0:	f003 030f 	and.w	r3, r3, #15
 8018bf4:	b2db      	uxtb	r3, r3
 8018bf6:	2b02      	cmp	r3, #2
 8018bf8:	d001      	beq.n	8018bfe <CoPostMail+0x32>
    {
        return E_INVALID_ID;              /* Event is not mailbox,return error*/
 8018bfa:	2301      	movs	r3, #1
 8018bfc:	e018      	b.n	8018c30 <CoPostMail+0x64>
    }
#endif

    if(pecb->eventCounter == 0)   /* If mailbox doesn't already have a message*/	
 8018bfe:	68fb      	ldr	r3, [r7, #12]
 8018c00:	88db      	ldrh	r3, [r3, #6]
 8018c02:	2b00      	cmp	r3, #0
 8018c04:	d113      	bne.n	8018c2e <CoPostMail+0x62>
    {
        OsSchedLock();
 8018c06:	4b0d      	ldr	r3, [pc, #52]	; (8018c3c <CoPostMail+0x70>)
 8018c08:	781b      	ldrb	r3, [r3, #0]
 8018c0a:	b2db      	uxtb	r3, r3
 8018c0c:	3301      	adds	r3, #1
 8018c0e:	b2da      	uxtb	r2, r3
 8018c10:	4b0a      	ldr	r3, [pc, #40]	; (8018c3c <CoPostMail+0x70>)
 8018c12:	701a      	strb	r2, [r3, #0]
        pecb->eventPtr     = pmail;       /* Place message in mailbox         */
 8018c14:	68fb      	ldr	r3, [r7, #12]
 8018c16:	683a      	ldr	r2, [r7, #0]
 8018c18:	601a      	str	r2, [r3, #0]
        pecb->eventCounter = 1;
 8018c1a:	68fb      	ldr	r3, [r7, #12]
 8018c1c:	2201      	movs	r2, #1
 8018c1e:	80da      	strh	r2, [r3, #6]
        EventTaskToRdy(pecb);             /* Check waiting list               */
 8018c20:	68f8      	ldr	r0, [r7, #12]
 8018c22:	f7fe fef1 	bl	8017a08 <EventTaskToRdy>
        OsSchedUnlock();
 8018c26:	f7fe fce3 	bl	80175f0 <OsSchedUnlock>
        return E_OK;	
 8018c2a:	2300      	movs	r3, #0
 8018c2c:	e000      	b.n	8018c30 <CoPostMail+0x64>
    }
    else                          /* If there is already a message in mailbox */              
    {
        return E_MBOX_FULL;       /* Mailbox is full,and return "E_MBOX_FULL" */
 8018c2e:	2307      	movs	r3, #7
    }
}
 8018c30:	4618      	mov	r0, r3
 8018c32:	3710      	adds	r7, #16
 8018c34:	46bd      	mov	sp, r7
 8018c36:	bd80      	pop	{r7, pc}
 8018c38:	2000374c 	.word	0x2000374c
 8018c3c:	20003749 	.word	0x20003749

08018c40 <isr_PostMail>:
 * @note 
 *******************************************************************************
 */
#if CFG_MAX_SERVICE_REQUEST > 0
StatusType isr_PostMail(OS_EventID id,void* pmail)
{
 8018c40:	b580      	push	{r7, lr}
 8018c42:	b082      	sub	sp, #8
 8018c44:	af00      	add	r7, sp, #0
 8018c46:	4603      	mov	r3, r0
 8018c48:	6039      	str	r1, [r7, #0]
 8018c4a:	71fb      	strb	r3, [r7, #7]
    if(OSSchedLock > 0)         /* If scheduler is locked,(the caller is ISR) */
 8018c4c:	4b0d      	ldr	r3, [pc, #52]	; (8018c84 <isr_PostMail+0x44>)
 8018c4e:	781b      	ldrb	r3, [r3, #0]
 8018c50:	b2db      	uxtb	r3, r3
 8018c52:	2b00      	cmp	r3, #0
 8018c54:	d00c      	beq.n	8018c70 <isr_PostMail+0x30>
    {
        /* Insert the request into service request queue                      */
        if(InsertInSRQ(MBOX_REQ,id,pmail) == Co_FALSE)
 8018c56:	79fb      	ldrb	r3, [r7, #7]
 8018c58:	683a      	ldr	r2, [r7, #0]
 8018c5a:	4619      	mov	r1, r3
 8018c5c:	2002      	movs	r0, #2
 8018c5e:	f000 fe8b 	bl	8019978 <InsertInSRQ>
 8018c62:	4603      	mov	r3, r0
 8018c64:	2b00      	cmp	r3, #0
 8018c66:	d101      	bne.n	8018c6c <isr_PostMail+0x2c>
        {
            return E_SEV_REQ_FULL;        /* If service request queue is full */
 8018c68:	2312      	movs	r3, #18
 8018c6a:	e007      	b.n	8018c7c <isr_PostMail+0x3c>
        }			
        else                              /* Operate successfully             */
        {
            return E_OK;
 8018c6c:	2300      	movs	r3, #0
 8018c6e:	e005      	b.n	8018c7c <isr_PostMail+0x3c>
        }
    }
    else
    {
        return(CoPostMail(id,pmail));     /* Sends the message to the mailbox */ 
 8018c70:	79fb      	ldrb	r3, [r7, #7]
 8018c72:	6839      	ldr	r1, [r7, #0]
 8018c74:	4618      	mov	r0, r3
 8018c76:	f7ff ffa9 	bl	8018bcc <CoPostMail>
 8018c7a:	4603      	mov	r3, r0
    }
}
 8018c7c:	4618      	mov	r0, r3
 8018c7e:	3708      	adds	r7, #8
 8018c80:	46bd      	mov	sp, r7
 8018c82:	bd80      	pop	{r7, pc}
 8018c84:	20003749 	.word	0x20003749

08018c88 <CoCreateMutex>:
 * @details    This function is called to create a mutex. 
 * @note  		
 *******************************************************************************
 */
OS_MutexID CoCreateMutex(void)
{
 8018c88:	b580      	push	{r7, lr}
 8018c8a:	b082      	sub	sp, #8
 8018c8c:	af00      	add	r7, sp, #0
    OS_MutexID id;
    P_MUTEX pMutex;
    OsSchedLock();
 8018c8e:	4b18      	ldr	r3, [pc, #96]	; (8018cf0 <CoCreateMutex+0x68>)
 8018c90:	781b      	ldrb	r3, [r3, #0]
 8018c92:	b2db      	uxtb	r3, r3
 8018c94:	3301      	adds	r3, #1
 8018c96:	b2da      	uxtb	r2, r3
 8018c98:	4b15      	ldr	r3, [pc, #84]	; (8018cf0 <CoCreateMutex+0x68>)
 8018c9a:	701a      	strb	r2, [r3, #0]
    
    /* Assign a free mutex control block */
    if(MutexFreeID < CFG_MAX_MUTEX )
 8018c9c:	4b15      	ldr	r3, [pc, #84]	; (8018cf4 <CoCreateMutex+0x6c>)
 8018c9e:	781b      	ldrb	r3, [r3, #0]
 8018ca0:	2b09      	cmp	r3, #9
 8018ca2:	d81e      	bhi.n	8018ce2 <CoCreateMutex+0x5a>
    {
        id  = MutexFreeID++;
 8018ca4:	4b13      	ldr	r3, [pc, #76]	; (8018cf4 <CoCreateMutex+0x6c>)
 8018ca6:	781b      	ldrb	r3, [r3, #0]
 8018ca8:	1c5a      	adds	r2, r3, #1
 8018caa:	b2d1      	uxtb	r1, r2
 8018cac:	4a11      	ldr	r2, [pc, #68]	; (8018cf4 <CoCreateMutex+0x6c>)
 8018cae:	7011      	strb	r1, [r2, #0]
 8018cb0:	71fb      	strb	r3, [r7, #7]
        OsSchedUnlock();
 8018cb2:	f7fe fc9d 	bl	80175f0 <OsSchedUnlock>
        pMutex = &MutexTbl[id];
 8018cb6:	79fb      	ldrb	r3, [r7, #7]
 8018cb8:	00db      	lsls	r3, r3, #3
 8018cba:	4a0f      	ldr	r2, [pc, #60]	; (8018cf8 <CoCreateMutex+0x70>)
 8018cbc:	4413      	add	r3, r2
 8018cbe:	603b      	str	r3, [r7, #0]
        pMutex->hipriTaskID  = INVALID_ID;
 8018cc0:	683b      	ldr	r3, [r7, #0]
 8018cc2:	22ff      	movs	r2, #255	; 0xff
 8018cc4:	70da      	strb	r2, [r3, #3]
        pMutex->originalPrio = 0xff;
 8018cc6:	683b      	ldr	r3, [r7, #0]
 8018cc8:	22ff      	movs	r2, #255	; 0xff
 8018cca:	701a      	strb	r2, [r3, #0]
        pMutex->mutexFlag    = MUTEX_FREE;  /* Mutex is free,not was occupied */
 8018ccc:	683b      	ldr	r3, [r7, #0]
 8018cce:	2200      	movs	r2, #0
 8018cd0:	705a      	strb	r2, [r3, #1]
        pMutex->taskID       = INVALID_ID;
 8018cd2:	683b      	ldr	r3, [r7, #0]
 8018cd4:	22ff      	movs	r2, #255	; 0xff
 8018cd6:	709a      	strb	r2, [r3, #2]
        pMutex->waittingList = Co_NULL;
 8018cd8:	683b      	ldr	r3, [r7, #0]
 8018cda:	2200      	movs	r2, #0
 8018cdc:	605a      	str	r2, [r3, #4]
        return id;                      /* Return mutex ID                    */			
 8018cde:	79fb      	ldrb	r3, [r7, #7]
 8018ce0:	e002      	b.n	8018ce8 <CoCreateMutex+0x60>
    }	
    
    OsSchedUnlock();	 
 8018ce2:	f7fe fc85 	bl	80175f0 <OsSchedUnlock>
    return E_CREATE_FAIL;               /* No free mutex control block        */	
 8018ce6:	23ff      	movs	r3, #255	; 0xff
}
 8018ce8:	4618      	mov	r0, r3
 8018cea:	3708      	adds	r7, #8
 8018cec:	46bd      	mov	sp, r7
 8018cee:	bd80      	pop	{r7, pc}
 8018cf0:	20003749 	.word	0x20003749
 8018cf4:	2000d4f0 	.word	0x2000d4f0
 8018cf8:	2000d4f4 	.word	0x2000d4f4

08018cfc <CoEnterMutexSection>:
 * @details    This function is called when entering a critical area.	 
 * @note 
 *******************************************************************************
 */
StatusType CoEnterMutexSection(OS_MutexID mutexID)
{
 8018cfc:	b580      	push	{r7, lr}
 8018cfe:	b086      	sub	sp, #24
 8018d00:	af00      	add	r7, sp, #0
 8018d02:	4603      	mov	r3, r0
 8018d04:	71fb      	strb	r3, [r7, #7]

#if CFG_EVENT_EN >0
    P_ECB pecb;
#endif

    if(OSIntNesting > 0)                /* If the caller is ISR               */
 8018d06:	4b53      	ldr	r3, [pc, #332]	; (8018e54 <CoEnterMutexSection+0x158>)
 8018d08:	781b      	ldrb	r3, [r3, #0]
 8018d0a:	b2db      	uxtb	r3, r3
 8018d0c:	2b00      	cmp	r3, #0
 8018d0e:	d001      	beq.n	8018d14 <CoEnterMutexSection+0x18>
    {
        return E_CALL;
 8018d10:	2303      	movs	r3, #3
 8018d12:	e09b      	b.n	8018e4c <CoEnterMutexSection+0x150>
    }
    if(OSSchedLock != 0)                /* Is OS lock?                        */
 8018d14:	4b50      	ldr	r3, [pc, #320]	; (8018e58 <CoEnterMutexSection+0x15c>)
 8018d16:	781b      	ldrb	r3, [r3, #0]
 8018d18:	b2db      	uxtb	r3, r3
 8018d1a:	2b00      	cmp	r3, #0
 8018d1c:	d001      	beq.n	8018d22 <CoEnterMutexSection+0x26>
    {								 
        return E_OS_IN_LOCK;            /* Yes,error return                   */
 8018d1e:	2315      	movs	r3, #21
 8018d20:	e094      	b.n	8018e4c <CoEnterMutexSection+0x150>
    }	

#if CFG_PAR_CHECKOUT_EN >0
    if(mutexID >= MutexFreeID)          /* Invalid 'mutexID'                  */
 8018d22:	4b4e      	ldr	r3, [pc, #312]	; (8018e5c <CoEnterMutexSection+0x160>)
 8018d24:	781b      	ldrb	r3, [r3, #0]
 8018d26:	79fa      	ldrb	r2, [r7, #7]
 8018d28:	429a      	cmp	r2, r3
 8018d2a:	d301      	bcc.n	8018d30 <CoEnterMutexSection+0x34>
    {
        return E_INVALID_ID;	
 8018d2c:	2301      	movs	r3, #1
 8018d2e:	e08d      	b.n	8018e4c <CoEnterMutexSection+0x150>
    }
#endif

    OsSchedLock();
 8018d30:	4b49      	ldr	r3, [pc, #292]	; (8018e58 <CoEnterMutexSection+0x15c>)
 8018d32:	781b      	ldrb	r3, [r3, #0]
 8018d34:	b2db      	uxtb	r3, r3
 8018d36:	3301      	adds	r3, #1
 8018d38:	b2da      	uxtb	r2, r3
 8018d3a:	4b47      	ldr	r3, [pc, #284]	; (8018e58 <CoEnterMutexSection+0x15c>)
 8018d3c:	701a      	strb	r2, [r3, #0]
    pCurTcb = TCBRunning;
 8018d3e:	4b48      	ldr	r3, [pc, #288]	; (8018e60 <CoEnterMutexSection+0x164>)
 8018d40:	681b      	ldr	r3, [r3, #0]
 8018d42:	613b      	str	r3, [r7, #16]
    pMutex  = &MutexTbl[mutexID];
 8018d44:	79fb      	ldrb	r3, [r7, #7]
 8018d46:	00db      	lsls	r3, r3, #3
 8018d48:	4a46      	ldr	r2, [pc, #280]	; (8018e64 <CoEnterMutexSection+0x168>)
 8018d4a:	4413      	add	r3, r2
 8018d4c:	60fb      	str	r3, [r7, #12]
    
    pCurTcb->mutexID = mutexID;
 8018d4e:	693b      	ldr	r3, [r7, #16]
 8018d50:	79fa      	ldrb	r2, [r7, #7]
 8018d52:	71da      	strb	r2, [r3, #7]
    if(pMutex->mutexFlag == MUTEX_FREE)       /* If mutex is available        */	 
 8018d54:	68fb      	ldr	r3, [r7, #12]
 8018d56:	785b      	ldrb	r3, [r3, #1]
 8018d58:	2b00      	cmp	r3, #0
 8018d5a:	d10f      	bne.n	8018d7c <CoEnterMutexSection+0x80>
    {
        pMutex->originalPrio = pCurTcb->prio; /* Save priority of owning task */   
 8018d5c:	693b      	ldr	r3, [r7, #16]
 8018d5e:	791a      	ldrb	r2, [r3, #4]
 8018d60:	68fb      	ldr	r3, [r7, #12]
 8018d62:	701a      	strb	r2, [r3, #0]
        pMutex->taskID       = pCurTcb->taskID;   /* Acquire the resource     */
 8018d64:	693b      	ldr	r3, [r7, #16]
 8018d66:	799a      	ldrb	r2, [r3, #6]
 8018d68:	68fb      	ldr	r3, [r7, #12]
 8018d6a:	709a      	strb	r2, [r3, #2]
        pMutex->hipriTaskID  = pCurTcb->taskID;
 8018d6c:	693b      	ldr	r3, [r7, #16]
 8018d6e:	799a      	ldrb	r2, [r3, #6]
 8018d70:	68fb      	ldr	r3, [r7, #12]
 8018d72:	70da      	strb	r2, [r3, #3]
        pMutex->mutexFlag    = MUTEX_OCCUPY;      /* Occupy the mutex resource*/
 8018d74:	68fb      	ldr	r3, [r7, #12]
 8018d76:	2201      	movs	r2, #1
 8018d78:	705a      	strb	r2, [r3, #1]
 8018d7a:	e064      	b.n	8018e46 <CoEnterMutexSection+0x14a>
    }
    /* If the mutex resource had been occupied                                */
    else if(pMutex->mutexFlag == MUTEX_OCCUPY)	 	
 8018d7c:	68fb      	ldr	r3, [r7, #12]
 8018d7e:	785b      	ldrb	r3, [r3, #1]
 8018d80:	2b01      	cmp	r3, #1
 8018d82:	d160      	bne.n	8018e46 <CoEnterMutexSection+0x14a>
    {	
		ptcb = &TCBTbl[pMutex->taskID];
 8018d84:	68fb      	ldr	r3, [r7, #12]
 8018d86:	789b      	ldrb	r3, [r3, #2]
 8018d88:	461a      	mov	r2, r3
 8018d8a:	4613      	mov	r3, r2
 8018d8c:	005b      	lsls	r3, r3, #1
 8018d8e:	4413      	add	r3, r2
 8018d90:	011b      	lsls	r3, r3, #4
 8018d92:	4a35      	ldr	r2, [pc, #212]	; (8018e68 <CoEnterMutexSection+0x16c>)
 8018d94:	4413      	add	r3, r2
 8018d96:	617b      	str	r3, [r7, #20]
        if(ptcb->prio > pCurTcb->prio)  /* Need to promote priority of owner? */
 8018d98:	697b      	ldr	r3, [r7, #20]
 8018d9a:	791a      	ldrb	r2, [r3, #4]
 8018d9c:	693b      	ldr	r3, [r7, #16]
 8018d9e:	791b      	ldrb	r3, [r3, #4]
 8018da0:	429a      	cmp	r2, r3
 8018da2:	d92a      	bls.n	8018dfa <CoEnterMutexSection+0xfe>
        {
#if CFG_ORDER_LIST_SCHEDULE_EN ==0
			DeleteTaskPri(ptcb->prio);
			ActiveTaskPri(pCurTcb->prio);
#endif	
            ptcb->prio = pCurTcb->prio;	    /* Promote prio of owner          */
 8018da4:	693b      	ldr	r3, [r7, #16]
 8018da6:	791a      	ldrb	r2, [r3, #4]
 8018da8:	697b      	ldr	r3, [r7, #20]
 8018daa:	711a      	strb	r2, [r3, #4]
            
            /* Upgarde the highest priority about the mutex                   */
            pMutex->hipriTaskID	= pCurTcb->taskID;	
 8018dac:	693b      	ldr	r3, [r7, #16]
 8018dae:	799a      	ldrb	r2, [r3, #6]
 8018db0:	68fb      	ldr	r3, [r7, #12]
 8018db2:	70da      	strb	r2, [r3, #3]
            if(ptcb->state == TASK_READY)   /* If the task is ready to run    */
 8018db4:	697b      	ldr	r3, [r7, #20]
 8018db6:	795b      	ldrb	r3, [r3, #5]
 8018db8:	2b00      	cmp	r3, #0
 8018dba:	d106      	bne.n	8018dca <CoEnterMutexSection+0xce>
            {
                RemoveFromTCBRdyList(ptcb); /* Remove the task from READY list*/
 8018dbc:	6978      	ldr	r0, [r7, #20]
 8018dbe:	f000 ff59 	bl	8019c74 <RemoveFromTCBRdyList>
                InsertToTCBRdyList(ptcb);   /* Insert the task into READY list*/
 8018dc2:	6978      	ldr	r0, [r7, #20]
 8018dc4:	f000 fed2 	bl	8019b6c <InsertToTCBRdyList>
 8018dc8:	e017      	b.n	8018dfa <CoEnterMutexSection+0xfe>
            }
#if CFG_EVENT_EN >0
            /* If the task is waiting on a event                              */
            else if(ptcb->eventID != INVALID_ID) 
 8018dca:	697b      	ldr	r3, [r7, #20]
 8018dcc:	7a1b      	ldrb	r3, [r3, #8]
 8018dce:	2bff      	cmp	r3, #255	; 0xff
 8018dd0:	d013      	beq.n	8018dfa <CoEnterMutexSection+0xfe>
            {
                pecb = &EventTbl[ptcb->eventID];
 8018dd2:	697b      	ldr	r3, [r7, #20]
 8018dd4:	7a1b      	ldrb	r3, [r3, #8]
 8018dd6:	011b      	lsls	r3, r3, #4
 8018dd8:	4a24      	ldr	r2, [pc, #144]	; (8018e6c <CoEnterMutexSection+0x170>)
 8018dda:	4413      	add	r3, r2
 8018ddc:	60bb      	str	r3, [r7, #8]
                
                /* If the event waiting type is preemptive Priority           */
                if(pecb->eventSortType == EVENT_SORT_TYPE_PRIO)	
 8018dde:	68bb      	ldr	r3, [r7, #8]
 8018de0:	795b      	ldrb	r3, [r3, #5]
 8018de2:	f023 030f 	bic.w	r3, r3, #15
 8018de6:	b2db      	uxtb	r3, r3
 8018de8:	2b20      	cmp	r3, #32
 8018dea:	d106      	bne.n	8018dfa <CoEnterMutexSection+0xfe>
                {
                    /* Remove the task from event waiting list                */
                    RemoveEventWaittingList(ptcb);
 8018dec:	6978      	ldr	r0, [r7, #20]
 8018dee:	f7fe fe71 	bl	8017ad4 <RemoveEventWaittingList>
                    
                    /* Insert the task into event waiting list                */ 	
                    EventTaskToWait(pecb,ptcb);		
 8018df2:	6979      	ldr	r1, [r7, #20]
 8018df4:	68b8      	ldr	r0, [r7, #8]
 8018df6:	f7fe fd87 	bl	8017908 <EventTaskToWait>
                }	
            }
#endif	
        }
        
        pCurTcb->state   = TASK_WAITING;    /* Block current task             */
 8018dfa:	693b      	ldr	r3, [r7, #16]
 8018dfc:	2202      	movs	r2, #2
 8018dfe:	715a      	strb	r2, [r3, #5]
		TaskSchedReq     = Co_TRUE;
 8018e00:	4b1b      	ldr	r3, [pc, #108]	; (8018e70 <CoEnterMutexSection+0x174>)
 8018e02:	2201      	movs	r2, #1
 8018e04:	701a      	strb	r2, [r3, #0]
        pCurTcb->TCBnext = Co_NULL;
 8018e06:	693b      	ldr	r3, [r7, #16]
 8018e08:	2200      	movs	r2, #0
 8018e0a:	625a      	str	r2, [r3, #36]	; 0x24
        pCurTcb->TCBprev = Co_NULL;
 8018e0c:	693b      	ldr	r3, [r7, #16]
 8018e0e:	2200      	movs	r2, #0
 8018e10:	629a      	str	r2, [r3, #40]	; 0x28
        
        ptcb = pMutex->waittingList;
 8018e12:	68fb      	ldr	r3, [r7, #12]
 8018e14:	685b      	ldr	r3, [r3, #4]
 8018e16:	617b      	str	r3, [r7, #20]
        if(ptcb == Co_NULL)               /* If the event waiting list is empty  */
 8018e18:	697b      	ldr	r3, [r7, #20]
 8018e1a:	2b00      	cmp	r3, #0
 8018e1c:	d106      	bne.n	8018e2c <CoEnterMutexSection+0x130>
        {
            pMutex->waittingList = pCurTcb; /* Insert the task to head        */
 8018e1e:	68fb      	ldr	r3, [r7, #12]
 8018e20:	693a      	ldr	r2, [r7, #16]
 8018e22:	605a      	str	r2, [r3, #4]
 8018e24:	e00f      	b.n	8018e46 <CoEnterMutexSection+0x14a>
        }
        else                        /* If the event waiting list is not empty */
        {            	
            while(ptcb->TCBnext != Co_NULL)    /* Insert the task to tail        */
            {
                ptcb = ptcb->TCBnext;		
 8018e26:	697b      	ldr	r3, [r7, #20]
 8018e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018e2a:	617b      	str	r3, [r7, #20]
            while(ptcb->TCBnext != Co_NULL)    /* Insert the task to tail        */
 8018e2c:	697b      	ldr	r3, [r7, #20]
 8018e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018e30:	2b00      	cmp	r3, #0
 8018e32:	d1f8      	bne.n	8018e26 <CoEnterMutexSection+0x12a>
            }
            ptcb->TCBnext    = pCurTcb;
 8018e34:	697b      	ldr	r3, [r7, #20]
 8018e36:	693a      	ldr	r2, [r7, #16]
 8018e38:	625a      	str	r2, [r3, #36]	; 0x24
            pCurTcb->TCBprev = ptcb;
 8018e3a:	693b      	ldr	r3, [r7, #16]
 8018e3c:	697a      	ldr	r2, [r7, #20]
 8018e3e:	629a      	str	r2, [r3, #40]	; 0x28
            pCurTcb->TCBnext = Co_NULL;
 8018e40:	693b      	ldr	r3, [r7, #16]
 8018e42:	2200      	movs	r2, #0
 8018e44:	625a      	str	r2, [r3, #36]	; 0x24
        }
    }
    OsSchedUnlock();
 8018e46:	f7fe fbd3 	bl	80175f0 <OsSchedUnlock>
    return E_OK;			
 8018e4a:	2300      	movs	r3, #0
}
 8018e4c:	4618      	mov	r0, r3
 8018e4e:	3718      	adds	r7, #24
 8018e50:	46bd      	mov	sp, r7
 8018e52:	bd80      	pop	{r7, pc}
 8018e54:	20003748 	.word	0x20003748
 8018e58:	20003749 	.word	0x20003749
 8018e5c:	2000d4f0 	.word	0x2000d4f0
 8018e60:	2000d728 	.word	0x2000d728
 8018e64:	2000d4f4 	.word	0x2000d4f4
 8018e68:	2000d598 	.word	0x2000d598
 8018e6c:	2000374c 	.word	0x2000374c
 8018e70:	2000374a 	.word	0x2000374a

08018e74 <CoLeaveMutexSection>:
 * @details    This function must be called when exiting from a critical area.	
 * @note 
 *******************************************************************************
 */
StatusType CoLeaveMutexSection(OS_MutexID mutexID)
{
 8018e74:	b580      	push	{r7, lr}
 8018e76:	b086      	sub	sp, #24
 8018e78:	af00      	add	r7, sp, #0
 8018e7a:	4603      	mov	r3, r0
 8018e7c:	71fb      	strb	r3, [r7, #7]
    P_OSTCB ptcb;
    P_MUTEX pMutex;
    U8      prio;
    U8      taskID;
    
    if(OSIntNesting > 0)                /* If the caller is ISR               */
 8018e7e:	4b46      	ldr	r3, [pc, #280]	; (8018f98 <CoLeaveMutexSection+0x124>)
 8018e80:	781b      	ldrb	r3, [r3, #0]
 8018e82:	b2db      	uxtb	r3, r3
 8018e84:	2b00      	cmp	r3, #0
 8018e86:	d001      	beq.n	8018e8c <CoLeaveMutexSection+0x18>
    {
        return E_CALL;
 8018e88:	2303      	movs	r3, #3
 8018e8a:	e080      	b.n	8018f8e <CoLeaveMutexSection+0x11a>
    }

#if CFG_PAR_CHECKOUT_EN >0
    if(mutexID >= MutexFreeID)
 8018e8c:	4b43      	ldr	r3, [pc, #268]	; (8018f9c <CoLeaveMutexSection+0x128>)
 8018e8e:	781b      	ldrb	r3, [r3, #0]
 8018e90:	79fa      	ldrb	r2, [r7, #7]
 8018e92:	429a      	cmp	r2, r3
 8018e94:	d301      	bcc.n	8018e9a <CoLeaveMutexSection+0x26>
    {
        return E_INVALID_ID;            /* Invalid mutex id, return error     */
 8018e96:	2301      	movs	r3, #1
 8018e98:	e079      	b.n	8018f8e <CoLeaveMutexSection+0x11a>
    }
#endif	
    OsSchedLock();
 8018e9a:	4b41      	ldr	r3, [pc, #260]	; (8018fa0 <CoLeaveMutexSection+0x12c>)
 8018e9c:	781b      	ldrb	r3, [r3, #0]
 8018e9e:	b2db      	uxtb	r3, r3
 8018ea0:	3301      	adds	r3, #1
 8018ea2:	b2da      	uxtb	r2, r3
 8018ea4:	4b3e      	ldr	r3, [pc, #248]	; (8018fa0 <CoLeaveMutexSection+0x12c>)
 8018ea6:	701a      	strb	r2, [r3, #0]
    pMutex = &MutexTbl[mutexID];        /* Obtain point of mutex control block*/   
 8018ea8:	79fb      	ldrb	r3, [r7, #7]
 8018eaa:	00db      	lsls	r3, r3, #3
 8018eac:	4a3d      	ldr	r2, [pc, #244]	; (8018fa4 <CoLeaveMutexSection+0x130>)
 8018eae:	4413      	add	r3, r2
 8018eb0:	60fb      	str	r3, [r7, #12]
    ptcb = &TCBTbl[pMutex->taskID];
 8018eb2:	68fb      	ldr	r3, [r7, #12]
 8018eb4:	789b      	ldrb	r3, [r3, #2]
 8018eb6:	461a      	mov	r2, r3
 8018eb8:	4613      	mov	r3, r2
 8018eba:	005b      	lsls	r3, r3, #1
 8018ebc:	4413      	add	r3, r2
 8018ebe:	011b      	lsls	r3, r3, #4
 8018ec0:	4a39      	ldr	r2, [pc, #228]	; (8018fa8 <CoLeaveMutexSection+0x134>)
 8018ec2:	4413      	add	r3, r2
 8018ec4:	617b      	str	r3, [r7, #20]
	ptcb->mutexID = INVALID_ID;
 8018ec6:	697b      	ldr	r3, [r7, #20]
 8018ec8:	22ff      	movs	r2, #255	; 0xff
 8018eca:	71da      	strb	r2, [r3, #7]
	if(pMutex->waittingList == Co_NULL)    /* If the mutex waiting list is empty */
 8018ecc:	68fb      	ldr	r3, [r7, #12]
 8018ece:	685b      	ldr	r3, [r3, #4]
 8018ed0:	2b00      	cmp	r3, #0
 8018ed2:	d108      	bne.n	8018ee6 <CoLeaveMutexSection+0x72>
    {
        pMutex->mutexFlag = MUTEX_FREE; /* The mutex resource is available    */
 8018ed4:	68fb      	ldr	r3, [r7, #12]
 8018ed6:	2200      	movs	r2, #0
 8018ed8:	705a      	strb	r2, [r3, #1]
        pMutex->taskID    = INVALID_ID;
 8018eda:	68fb      	ldr	r3, [r7, #12]
 8018edc:	22ff      	movs	r2, #255	; 0xff
 8018ede:	709a      	strb	r2, [r3, #2]
        OsSchedUnlock();
 8018ee0:	f7fe fb86 	bl	80175f0 <OsSchedUnlock>
 8018ee4:	e052      	b.n	8018f8c <CoLeaveMutexSection+0x118>
    }	
    else              /* If there is at least one task waitting for the mutex */
    { 
        taskID = pMutex->taskID;        /* Get task ID of mutex owner         */
 8018ee6:	68fb      	ldr	r3, [r7, #12]
 8018ee8:	789b      	ldrb	r3, [r3, #2]
 8018eea:	72fb      	strb	r3, [r7, #11]
        
                                /* we havn't promoted current task's priority */
        if(pMutex->hipriTaskID == taskID)   
 8018eec:	68fb      	ldr	r3, [r7, #12]
 8018eee:	78db      	ldrb	r3, [r3, #3]
 8018ef0:	7afa      	ldrb	r2, [r7, #11]
 8018ef2:	429a      	cmp	r2, r3
 8018ef4:	d119      	bne.n	8018f2a <CoLeaveMutexSection+0xb6>
        {
            ptcb = pMutex->waittingList;/* Point to mutex first waiting task  */		
 8018ef6:	68fb      	ldr	r3, [r7, #12]
 8018ef8:	685b      	ldr	r3, [r3, #4]
 8018efa:	617b      	str	r3, [r7, #20]
            prio = ptcb->prio; 
 8018efc:	697b      	ldr	r3, [r7, #20]
 8018efe:	791b      	ldrb	r3, [r3, #4]
 8018f00:	74fb      	strb	r3, [r7, #19]
            while(ptcb != Co_NULL)         /* Find the highest priority task     */
 8018f02:	e00e      	b.n	8018f22 <CoLeaveMutexSection+0xae>
            {
                if(ptcb->prio < prio)  		
 8018f04:	697b      	ldr	r3, [r7, #20]
 8018f06:	791b      	ldrb	r3, [r3, #4]
 8018f08:	7cfa      	ldrb	r2, [r7, #19]
 8018f0a:	429a      	cmp	r2, r3
 8018f0c:	d906      	bls.n	8018f1c <CoLeaveMutexSection+0xa8>
                {
                    prio = ptcb->prio;
 8018f0e:	697b      	ldr	r3, [r7, #20]
 8018f10:	791b      	ldrb	r3, [r3, #4]
 8018f12:	74fb      	strb	r3, [r7, #19]
                    pMutex->hipriTaskID = ptcb->taskID;
 8018f14:	697b      	ldr	r3, [r7, #20]
 8018f16:	799a      	ldrb	r2, [r3, #6]
 8018f18:	68fb      	ldr	r3, [r7, #12]
 8018f1a:	70da      	strb	r2, [r3, #3]
                }
                ptcb = ptcb->TCBnext;					
 8018f1c:	697b      	ldr	r3, [r7, #20]
 8018f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018f20:	617b      	str	r3, [r7, #20]
            while(ptcb != Co_NULL)         /* Find the highest priority task     */
 8018f22:	697b      	ldr	r3, [r7, #20]
 8018f24:	2b00      	cmp	r3, #0
 8018f26:	d1ed      	bne.n	8018f04 <CoLeaveMutexSection+0x90>
 8018f28:	e009      	b.n	8018f3e <CoLeaveMutexSection+0xca>
            }
        }
        else                     /* we have promoted current task's priority  */
        {
			prio = TCBTbl[taskID].prio;
 8018f2a:	7afa      	ldrb	r2, [r7, #11]
 8018f2c:	491e      	ldr	r1, [pc, #120]	; (8018fa8 <CoLeaveMutexSection+0x134>)
 8018f2e:	4613      	mov	r3, r2
 8018f30:	005b      	lsls	r3, r3, #1
 8018f32:	4413      	add	r3, r2
 8018f34:	011b      	lsls	r3, r3, #4
 8018f36:	440b      	add	r3, r1
 8018f38:	3304      	adds	r3, #4
 8018f3a:	781b      	ldrb	r3, [r3, #0]
 8018f3c:	74fb      	strb	r3, [r7, #19]
        }
        
        /* Reset the task priority */
		pMutex->taskID = INVALID_ID;	
 8018f3e:	68fb      	ldr	r3, [r7, #12]
 8018f40:	22ff      	movs	r2, #255	; 0xff
 8018f42:	709a      	strb	r2, [r3, #2]
		CoSetPriority(taskID,pMutex->originalPrio);
 8018f44:	68fb      	ldr	r3, [r7, #12]
 8018f46:	781a      	ldrb	r2, [r3, #0]
 8018f48:	7afb      	ldrb	r3, [r7, #11]
 8018f4a:	4611      	mov	r1, r2
 8018f4c:	4618      	mov	r0, r3
 8018f4e:	f000 fed5 	bl	8019cfc <CoSetPriority>
        
        /* Find first task in waiting list ready to run  */	
        ptcb                 = pMutex->waittingList; 		
 8018f52:	68fb      	ldr	r3, [r7, #12]
 8018f54:	685b      	ldr	r3, [r3, #4]
 8018f56:	617b      	str	r3, [r7, #20]
        pMutex->waittingList = ptcb->TCBnext;	
 8018f58:	697b      	ldr	r3, [r7, #20]
 8018f5a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8018f5c:	68fb      	ldr	r3, [r7, #12]
 8018f5e:	605a      	str	r2, [r3, #4]
        pMutex->originalPrio = ptcb->prio;
 8018f60:	697b      	ldr	r3, [r7, #20]
 8018f62:	791a      	ldrb	r2, [r3, #4]
 8018f64:	68fb      	ldr	r3, [r7, #12]
 8018f66:	701a      	strb	r2, [r3, #0]
        pMutex->taskID       = ptcb->taskID;
 8018f68:	697b      	ldr	r3, [r7, #20]
 8018f6a:	799a      	ldrb	r2, [r3, #6]
 8018f6c:	68fb      	ldr	r3, [r7, #12]
 8018f6e:	709a      	strb	r2, [r3, #2]
			DeleteTaskPri(ptcb->prio);
			ActiveTaskPri(prio);			
		}
#endif	

        ptcb->prio           = prio;    /* Raise the task's priority          */       
 8018f70:	697b      	ldr	r3, [r7, #20]
 8018f72:	7cfa      	ldrb	r2, [r7, #19]
 8018f74:	711a      	strb	r2, [r3, #4]
        				   
        /* Insert the task which acquire the mutex into ready list.           */
        ptcb->TCBnext = Co_NULL;
 8018f76:	697b      	ldr	r3, [r7, #20]
 8018f78:	2200      	movs	r2, #0
 8018f7a:	625a      	str	r2, [r3, #36]	; 0x24
        ptcb->TCBprev = Co_NULL;
 8018f7c:	697b      	ldr	r3, [r7, #20]
 8018f7e:	2200      	movs	r2, #0
 8018f80:	629a      	str	r2, [r3, #40]	; 0x28

		InsertToTCBRdyList(ptcb);     /* Insert the task into the READY list  */
 8018f82:	6978      	ldr	r0, [r7, #20]
 8018f84:	f000 fdf2 	bl	8019b6c <InsertToTCBRdyList>
        OsSchedUnlock();
 8018f88:	f7fe fb32 	bl	80175f0 <OsSchedUnlock>
    }
    return E_OK;			
 8018f8c:	2300      	movs	r3, #0
}
 8018f8e:	4618      	mov	r0, r3
 8018f90:	3718      	adds	r7, #24
 8018f92:	46bd      	mov	sp, r7
 8018f94:	bd80      	pop	{r7, pc}
 8018f96:	bf00      	nop
 8018f98:	20003748 	.word	0x20003748
 8018f9c:	2000d4f0 	.word	0x2000d4f0
 8018fa0:	20003749 	.word	0x20003749
 8018fa4:	2000d4f4 	.word	0x2000d4f4
 8018fa8:	2000d598 	.word	0x2000d598

08018fac <RemoveMutexList>:
 * @details   This function be called when delete a task.	
 * @note 
 *******************************************************************************
 */
void RemoveMutexList(P_OSTCB ptcb)
{
 8018fac:	b580      	push	{r7, lr}
 8018fae:	b086      	sub	sp, #24
 8018fb0:	af00      	add	r7, sp, #0
 8018fb2:	6078      	str	r0, [r7, #4]
    U8 prio;
	OS_TID taskID;
    P_MUTEX pMutex;
    pMutex = &MutexTbl[ptcb->mutexID];
 8018fb4:	687b      	ldr	r3, [r7, #4]
 8018fb6:	79db      	ldrb	r3, [r3, #7]
 8018fb8:	00db      	lsls	r3, r3, #3
 8018fba:	4a38      	ldr	r2, [pc, #224]	; (801909c <RemoveMutexList+0xf0>)
 8018fbc:	4413      	add	r3, r2
 8018fbe:	613b      	str	r3, [r7, #16]
    
    /* If only one task waiting on mutex                                      */	
    if((ptcb->TCBnext ==Co_NULL) && (ptcb->TCBprev == Co_NULL))
 8018fc0:	687b      	ldr	r3, [r7, #4]
 8018fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018fc4:	2b00      	cmp	r3, #0
 8018fc6:	d107      	bne.n	8018fd8 <RemoveMutexList+0x2c>
 8018fc8:	687b      	ldr	r3, [r7, #4]
 8018fca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018fcc:	2b00      	cmp	r3, #0
 8018fce:	d103      	bne.n	8018fd8 <RemoveMutexList+0x2c>
    {
        pMutex->waittingList = Co_NULL;     /* Waiting list is empty             */
 8018fd0:	693b      	ldr	r3, [r7, #16]
 8018fd2:	2200      	movs	r2, #0
 8018fd4:	605a      	str	r2, [r3, #4]
 8018fd6:	e027      	b.n	8019028 <RemoveMutexList+0x7c>
    }
    else if(ptcb->TCBnext == Co_NULL)  /* If the task is the last of waiting list*/
 8018fd8:	687b      	ldr	r3, [r7, #4]
 8018fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018fdc:	2b00      	cmp	r3, #0
 8018fde:	d107      	bne.n	8018ff0 <RemoveMutexList+0x44>
    {
        /* Remove task from mutex waiting list                                */
        ptcb->TCBprev->TCBnext = Co_NULL;
 8018fe0:	687b      	ldr	r3, [r7, #4]
 8018fe2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018fe4:	2200      	movs	r2, #0
 8018fe6:	625a      	str	r2, [r3, #36]	; 0x24
        ptcb->TCBprev = Co_NULL;
 8018fe8:	687b      	ldr	r3, [r7, #4]
 8018fea:	2200      	movs	r2, #0
 8018fec:	629a      	str	r2, [r3, #40]	; 0x28
 8018fee:	e01b      	b.n	8019028 <RemoveMutexList+0x7c>
    }	
    else if(ptcb->TCBprev ==  Co_NULL)/* If the task is the first of waiting list*/
 8018ff0:	687b      	ldr	r3, [r7, #4]
 8018ff2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018ff4:	2b00      	cmp	r3, #0
 8018ff6:	d107      	bne.n	8019008 <RemoveMutexList+0x5c>
    {
        /* Remove task from waiting list                                      */
        ptcb->TCBnext->TCBprev = Co_NULL;
 8018ff8:	687b      	ldr	r3, [r7, #4]
 8018ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018ffc:	2200      	movs	r2, #0
 8018ffe:	629a      	str	r2, [r3, #40]	; 0x28
        ptcb->TCBnext = Co_NULL;
 8019000:	687b      	ldr	r3, [r7, #4]
 8019002:	2200      	movs	r2, #0
 8019004:	625a      	str	r2, [r3, #36]	; 0x24
 8019006:	e00f      	b.n	8019028 <RemoveMutexList+0x7c>
    }
    else                      /* If the task is in the middle of waiting list */
    {
        /* Remove task from wait list */
        ptcb->TCBnext->TCBprev = ptcb->TCBprev;
 8019008:	687b      	ldr	r3, [r7, #4]
 801900a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801900c:	687a      	ldr	r2, [r7, #4]
 801900e:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8019010:	629a      	str	r2, [r3, #40]	; 0x28
        ptcb->TCBprev->TCBnext = ptcb->TCBnext;
 8019012:	687b      	ldr	r3, [r7, #4]
 8019014:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019016:	687a      	ldr	r2, [r7, #4]
 8019018:	6a52      	ldr	r2, [r2, #36]	; 0x24
 801901a:	625a      	str	r2, [r3, #36]	; 0x24
        ptcb->TCBprev          = Co_NULL;
 801901c:	687b      	ldr	r3, [r7, #4]
 801901e:	2200      	movs	r2, #0
 8019020:	629a      	str	r2, [r3, #40]	; 0x28
        ptcb->TCBnext          = Co_NULL;
 8019022:	687b      	ldr	r3, [r7, #4]
 8019024:	2200      	movs	r2, #0
 8019026:	625a      	str	r2, [r3, #36]	; 0x24
    }
    
    ptcb->mutexID = INVALID_ID;
 8019028:	687b      	ldr	r3, [r7, #4]
 801902a:	22ff      	movs	r2, #255	; 0xff
 801902c:	71da      	strb	r2, [r3, #7]
    
    /* If the task have highest priority in mutex waiting list                */	
    if(pMutex->hipriTaskID == ptcb->taskID)						
 801902e:	693b      	ldr	r3, [r7, #16]
 8019030:	78da      	ldrb	r2, [r3, #3]
 8019032:	687b      	ldr	r3, [r7, #4]
 8019034:	799b      	ldrb	r3, [r3, #6]
 8019036:	429a      	cmp	r2, r3
 8019038:	d12b      	bne.n	8019092 <RemoveMutexList+0xe6>
    {
        ptcb = pMutex->waittingList;
 801903a:	693b      	ldr	r3, [r7, #16]
 801903c:	685b      	ldr	r3, [r3, #4]
 801903e:	607b      	str	r3, [r7, #4]
        prio = pMutex->originalPrio; 
 8019040:	693b      	ldr	r3, [r7, #16]
 8019042:	781b      	ldrb	r3, [r3, #0]
 8019044:	75fb      	strb	r3, [r7, #23]
        pMutex->hipriTaskID = pMutex->taskID;
 8019046:	693b      	ldr	r3, [r7, #16]
 8019048:	789a      	ldrb	r2, [r3, #2]
 801904a:	693b      	ldr	r3, [r7, #16]
 801904c:	70da      	strb	r2, [r3, #3]
        while(ptcb != Co_NULL)           /* Find task ID of highest priority task*/
 801904e:	e00e      	b.n	801906e <RemoveMutexList+0xc2>
        {
            if(ptcb->prio < prio)
 8019050:	687b      	ldr	r3, [r7, #4]
 8019052:	791b      	ldrb	r3, [r3, #4]
 8019054:	7dfa      	ldrb	r2, [r7, #23]
 8019056:	429a      	cmp	r2, r3
 8019058:	d906      	bls.n	8019068 <RemoveMutexList+0xbc>
            {
                prio = ptcb->prio;
 801905a:	687b      	ldr	r3, [r7, #4]
 801905c:	791b      	ldrb	r3, [r3, #4]
 801905e:	75fb      	strb	r3, [r7, #23]
                pMutex->hipriTaskID = ptcb->taskID;
 8019060:	687b      	ldr	r3, [r7, #4]
 8019062:	799a      	ldrb	r2, [r3, #6]
 8019064:	693b      	ldr	r3, [r7, #16]
 8019066:	70da      	strb	r2, [r3, #3]
            }
            ptcb = ptcb->TCBnext;			
 8019068:	687b      	ldr	r3, [r7, #4]
 801906a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801906c:	607b      	str	r3, [r7, #4]
        while(ptcb != Co_NULL)           /* Find task ID of highest priority task*/
 801906e:	687b      	ldr	r3, [r7, #4]
 8019070:	2b00      	cmp	r3, #0
 8019072:	d1ed      	bne.n	8019050 <RemoveMutexList+0xa4>
        }
		taskID = pMutex->taskID;
 8019074:	693b      	ldr	r3, [r7, #16]
 8019076:	789b      	ldrb	r3, [r3, #2]
 8019078:	73fb      	strb	r3, [r7, #15]
		pMutex->taskID = INVALID_ID;
 801907a:	693b      	ldr	r3, [r7, #16]
 801907c:	22ff      	movs	r2, #255	; 0xff
 801907e:	709a      	strb	r2, [r3, #2]
		CoSetPriority(taskID,prio);         /* Reset the mutex ower priority  */
 8019080:	7dfa      	ldrb	r2, [r7, #23]
 8019082:	7bfb      	ldrb	r3, [r7, #15]
 8019084:	4611      	mov	r1, r2
 8019086:	4618      	mov	r0, r3
 8019088:	f000 fe38 	bl	8019cfc <CoSetPriority>
		pMutex->taskID = taskID;
 801908c:	693b      	ldr	r3, [r7, #16]
 801908e:	7bfa      	ldrb	r2, [r7, #15]
 8019090:	709a      	strb	r2, [r3, #2]
    }
}
 8019092:	bf00      	nop
 8019094:	3718      	adds	r7, #24
 8019096:	46bd      	mov	sp, r7
 8019098:	bd80      	pop	{r7, pc}
 801909a:	bf00      	nop
 801909c:	2000d4f4 	.word	0x2000d4f4

080190a0 <Inc8>:
 * @details    This function is called to Plus a byte integers 
 *             and Saved into memory cell.
 ******************************************************************************
 */
U8 Inc8 (volatile U8 *data)
{
 80190a0:	b490      	push	{r4, r7}
 80190a2:	b082      	sub	sp, #8
 80190a4:	af00      	add	r7, sp, #0
 80190a6:	6078      	str	r0, [r7, #4]
  register U8  result = 0;
 80190a8:	2400      	movs	r4, #0
  
  __asm volatile 
 80190aa:	687b      	ldr	r3, [r7, #4]
 80190ac:	b402      	push	{r1}
 80190ae:	b672      	cpsid	i
 80190b0:	7819      	ldrb	r1, [r3, #0]
 80190b2:	f101 0101 	add.w	r1, r1, #1
 80190b6:	7019      	strb	r1, [r3, #0]
 80190b8:	b662      	cpsie	i
 80190ba:	f1a1 0101 	sub.w	r1, r1, #1
 80190be:	000b      	movs	r3, r1
 80190c0:	bc02      	pop	{r1}
 80190c2:	b2dc      	uxtb	r4, r3
      " MOVS    %0,R1    \n"
      " POP     {R1}     \n"
      :"=r"(result)
      :"r"(data)
  );
  return (result);
 80190c4:	4623      	mov	r3, r4
  
}
 80190c6:	4618      	mov	r0, r3
 80190c8:	3708      	adds	r7, #8
 80190ca:	46bd      	mov	sp, r7
 80190cc:	bc90      	pop	{r4, r7}
 80190ce:	4770      	bx	lr

080190d0 <Dec8>:
 * @details    This function is called to Decrease a byte integers 
 *             and Saved into memory cell.
 ******************************************************************************
 */
U8 Dec8 (volatile U8 *data)
{
 80190d0:	b490      	push	{r4, r7}
 80190d2:	b082      	sub	sp, #8
 80190d4:	af00      	add	r7, sp, #0
 80190d6:	6078      	str	r0, [r7, #4]
  register U8  result = 0;
 80190d8:	2400      	movs	r4, #0
  __asm volatile 
 80190da:	687b      	ldr	r3, [r7, #4]
 80190dc:	b402      	push	{r1}
 80190de:	b672      	cpsid	i
 80190e0:	7819      	ldrb	r1, [r3, #0]
 80190e2:	f1a1 0101 	sub.w	r1, r1, #1
 80190e6:	7019      	strb	r1, [r3, #0]
 80190e8:	b662      	cpsie	i
 80190ea:	000b      	movs	r3, r1
 80190ec:	bc02      	pop	{r1}
 80190ee:	b2dc      	uxtb	r4, r3
      " MOVS    %0,R1    \n"
      " POP     {R1}     \n"
      :"=r"(result)
      :"r"(data)
  ); 
  return (result); 
 80190f0:	4623      	mov	r3, r4
}
 80190f2:	4618      	mov	r0, r3
 80190f4:	3708      	adds	r7, #8
 80190f6:	46bd      	mov	sp, r7
 80190f8:	bc90      	pop	{r4, r7}
 80190fa:	4770      	bx	lr

080190fc <IRQ_ENABLE_RESTORE>:
 * @par Description
 * @details    This function is called to ENABLE Interrupt.
 ******************************************************************************
 */
void IRQ_ENABLE_RESTORE(void)
{ 
 80190fc:	b480      	push	{r7}
 80190fe:	af00      	add	r7, sp, #0
  __asm volatile 
 8019100:	b662      	cpsie	i
  (
      " CPSIE   I        \n"
  );	
  return;
 8019102:	bf00      	nop
}
 8019104:	46bd      	mov	sp, r7
 8019106:	f85d 7b04 	ldr.w	r7, [sp], #4
 801910a:	4770      	bx	lr

0801910c <IRQ_DISABLE_SAVE>:
 * @par Description
 * @details    This function is called to close Interrupt.
 ******************************************************************************
 */
void IRQ_DISABLE_SAVE(void)
{  
 801910c:	b480      	push	{r7}
 801910e:	af00      	add	r7, sp, #0
  __asm volatile 
 8019110:	b672      	cpsid	i
  (
      " CPSID   I        \n"
  );	
  return;
 8019112:	bf00      	nop
}
 8019114:	46bd      	mov	sp, r7
 8019116:	f85d 7b04 	ldr.w	r7, [sp], #4
 801911a:	4770      	bx	lr

0801911c <SetEnvironment>:
 *              for Coocox OS running.
 ******************************************************************************
 */
void SetEnvironment (OS_STK *pstk)
{
    __asm volatile
 801911c:	f1a0 001c 	sub.w	r0, r0, #28
 8019120:	f380 8809 	msr	PSP, r0
 8019124:	4770      	bx	lr
#endif
       " MSR    PSP,R0 \n"
       " BX      LR               \n"
    );
  
}
 8019126:	bf00      	nop

08019128 <SwitchContext>:
 *              Switch Context for task change
 ******************************************************************************
 */
void SwitchContext(void)
{
  __asm volatile
 8019128:	4b0f      	ldr	r3, [pc, #60]	; (8019168 <exitPendSV+0x10>)
 801912a:	681b      	ldr	r3, [r3, #0]
 801912c:	4a0f      	ldr	r2, [pc, #60]	; (801916c <exitPendSV+0x14>)
 801912e:	6811      	ldr	r1, [r2, #0]
 8019130:	6019      	str	r1, [r3, #0]
 8019132:	4770      	bx	lr
	  " LDR     R1,[R2]            \n"
      " STR     R1, [R3]           \n"
      " BX      LR               \n"   
  );
 
}
 8019134:	bf00      	nop

08019136 <PendSV_Handler>:

#if CFG_CHIP_TYPE == 1 || 3 == CFG_CHIP_TYPE
void PendSV_Handler(void)
{
////////debug block /////////////////////////
  __asm volatile
 8019136:	4b0e      	ldr	r3, [pc, #56]	; (8019170 <exitPendSV+0x18>)
 8019138:	6819      	ldr	r1, [r3, #0]
 801913a:	4a0e      	ldr	r2, [pc, #56]	; (8019174 <exitPendSV+0x1c>)
 801913c:	6812      	ldr	r2, [r2, #0]
 801913e:	4291      	cmp	r1, r2
 8019140:	d00a      	beq.n	8019158 <exitPendSV>
 8019142:	f3ef 8009 	mrs	r0, PSP
 8019146:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 801914a:	6008      	str	r0, [r1, #0]
 801914c:	601a      	str	r2, [r3, #0]
 801914e:	6810      	ldr	r0, [r2, #0]
 8019150:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8019154:	f380 8809 	msr	PSP, r0

08019158 <exitPendSV>:
 8019158:	4b07      	ldr	r3, [pc, #28]	; (8019178 <exitPendSV+0x20>)
 801915a:	2000      	movs	r0, #0
 801915c:	7018      	strb	r0, [r3, #0]
 801915e:	f04e 0e04 	orr.w	lr, lr, #4
 8019162:	4770      	bx	lr
#if CFG_CHIP_TYPE == 3
    " LDR    LR,=0xFFFFFFED \n"
#endif
    " BX     LR             \n"    // Exit interrupt
  );
}
 8019164:	bf00      	nop
 8019166:	0000      	.short	0x0000
 8019168:	20000104 	.word	0x20000104
 801916c:	20000108 	.word	0x20000108
 8019170:	2000d728 	.word	0x2000d728
 8019174:	2000d724 	.word	0x2000d724
 8019178:	20003749 	.word	0x20003749

0801917c <CoCreateQueue>:
 * @details    This function is called to create a queue. 
 * @note 
 *******************************************************************************
 */			 		   
OS_EventID CoCreateQueue(void **qStart, U16 size ,U8 sortType)
{
 801917c:	b580      	push	{r7, lr}
 801917e:	b084      	sub	sp, #16
 8019180:	af00      	add	r7, sp, #0
 8019182:	6078      	str	r0, [r7, #4]
 8019184:	460b      	mov	r3, r1
 8019186:	807b      	strh	r3, [r7, #2]
 8019188:	4613      	mov	r3, r2
 801918a:	707b      	strb	r3, [r7, #1]
    U8    i;  
    P_ECB pecb;

#if CFG_PAR_CHECKOUT_EN >0	
    if((qStart == Co_NULL) || (size == 0))
 801918c:	687b      	ldr	r3, [r7, #4]
 801918e:	2b00      	cmp	r3, #0
 8019190:	d002      	beq.n	8019198 <CoCreateQueue+0x1c>
 8019192:	887b      	ldrh	r3, [r7, #2]
 8019194:	2b00      	cmp	r3, #0
 8019196:	d101      	bne.n	801919c <CoCreateQueue+0x20>
    {
        return E_CREATE_FAIL;
 8019198:	23ff      	movs	r3, #255	; 0xff
 801919a:	e063      	b.n	8019264 <CoCreateQueue+0xe8>
    }
#endif

    OsSchedLock();
 801919c:	4b33      	ldr	r3, [pc, #204]	; (801926c <CoCreateQueue+0xf0>)
 801919e:	781b      	ldrb	r3, [r3, #0]
 80191a0:	b2db      	uxtb	r3, r3
 80191a2:	3301      	adds	r3, #1
 80191a4:	b2da      	uxtb	r2, r3
 80191a6:	4b31      	ldr	r3, [pc, #196]	; (801926c <CoCreateQueue+0xf0>)
 80191a8:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < CFG_MAX_QUEUE; i++)
 80191aa:	2300      	movs	r3, #0
 80191ac:	73fb      	strb	r3, [r7, #15]
 80191ae:	e053      	b.n	8019258 <CoCreateQueue+0xdc>
    {
        /* Assign a free QUEUE control block                                  */
        if((QueueIDVessel & (1 << i)) == 0)	
 80191b0:	7bfb      	ldrb	r3, [r7, #15]
 80191b2:	2201      	movs	r2, #1
 80191b4:	fa02 f303 	lsl.w	r3, r2, r3
 80191b8:	461a      	mov	r2, r3
 80191ba:	4b2d      	ldr	r3, [pc, #180]	; (8019270 <CoCreateQueue+0xf4>)
 80191bc:	681b      	ldr	r3, [r3, #0]
 80191be:	4013      	ands	r3, r2
 80191c0:	2b00      	cmp	r3, #0
 80191c2:	d146      	bne.n	8019252 <CoCreateQueue+0xd6>
        {
            QueueIDVessel |= (1<<i);		
 80191c4:	7bfb      	ldrb	r3, [r7, #15]
 80191c6:	2201      	movs	r2, #1
 80191c8:	fa02 f303 	lsl.w	r3, r2, r3
 80191cc:	461a      	mov	r2, r3
 80191ce:	4b28      	ldr	r3, [pc, #160]	; (8019270 <CoCreateQueue+0xf4>)
 80191d0:	681b      	ldr	r3, [r3, #0]
 80191d2:	4313      	orrs	r3, r2
 80191d4:	4a26      	ldr	r2, [pc, #152]	; (8019270 <CoCreateQueue+0xf4>)
 80191d6:	6013      	str	r3, [r2, #0]
            OsSchedUnlock();
 80191d8:	f7fe fa0a 	bl	80175f0 <OsSchedUnlock>
            
            QueueTbl[i].qStart   = qStart;  /* Initialize the queue           */
 80191dc:	7bfb      	ldrb	r3, [r7, #15]
 80191de:	4a25      	ldr	r2, [pc, #148]	; (8019274 <CoCreateQueue+0xf8>)
 80191e0:	011b      	lsls	r3, r3, #4
 80191e2:	4413      	add	r3, r2
 80191e4:	687a      	ldr	r2, [r7, #4]
 80191e6:	601a      	str	r2, [r3, #0]
            QueueTbl[i].id       = i;
 80191e8:	7bfb      	ldrb	r3, [r7, #15]
 80191ea:	4a22      	ldr	r2, [pc, #136]	; (8019274 <CoCreateQueue+0xf8>)
 80191ec:	011b      	lsls	r3, r3, #4
 80191ee:	4413      	add	r3, r2
 80191f0:	3304      	adds	r3, #4
 80191f2:	7bfa      	ldrb	r2, [r7, #15]
 80191f4:	701a      	strb	r2, [r3, #0]
            QueueTbl[i].head     = 0;
 80191f6:	7bfb      	ldrb	r3, [r7, #15]
 80191f8:	4a1e      	ldr	r2, [pc, #120]	; (8019274 <CoCreateQueue+0xf8>)
 80191fa:	011b      	lsls	r3, r3, #4
 80191fc:	4413      	add	r3, r2
 80191fe:	3306      	adds	r3, #6
 8019200:	2200      	movs	r2, #0
 8019202:	801a      	strh	r2, [r3, #0]
            QueueTbl[i].tail     = 0;
 8019204:	7bfb      	ldrb	r3, [r7, #15]
 8019206:	4a1b      	ldr	r2, [pc, #108]	; (8019274 <CoCreateQueue+0xf8>)
 8019208:	011b      	lsls	r3, r3, #4
 801920a:	4413      	add	r3, r2
 801920c:	3308      	adds	r3, #8
 801920e:	2200      	movs	r2, #0
 8019210:	801a      	strh	r2, [r3, #0]
            QueueTbl[i].qMaxSize = size; 
 8019212:	7bfb      	ldrb	r3, [r7, #15]
 8019214:	4a17      	ldr	r2, [pc, #92]	; (8019274 <CoCreateQueue+0xf8>)
 8019216:	011b      	lsls	r3, r3, #4
 8019218:	4413      	add	r3, r2
 801921a:	330a      	adds	r3, #10
 801921c:	887a      	ldrh	r2, [r7, #2]
 801921e:	801a      	strh	r2, [r3, #0]
            QueueTbl[i].qSize    = 0;
 8019220:	7bfb      	ldrb	r3, [r7, #15]
 8019222:	4a14      	ldr	r2, [pc, #80]	; (8019274 <CoCreateQueue+0xf8>)
 8019224:	011b      	lsls	r3, r3, #4
 8019226:	4413      	add	r3, r2
 8019228:	330c      	adds	r3, #12
 801922a:	2200      	movs	r2, #0
 801922c:	801a      	strh	r2, [r3, #0]
            
            /* Get a event control block and initial the event content        */
            pecb = CreatEvent(EVENT_TYPE_QUEUE,sortType,&QueueTbl[i]);
 801922e:	7bfb      	ldrb	r3, [r7, #15]
 8019230:	011b      	lsls	r3, r3, #4
 8019232:	4a10      	ldr	r2, [pc, #64]	; (8019274 <CoCreateQueue+0xf8>)
 8019234:	441a      	add	r2, r3
 8019236:	787b      	ldrb	r3, [r7, #1]
 8019238:	4619      	mov	r1, r3
 801923a:	2003      	movs	r0, #3
 801923c:	f7fe fadc 	bl	80177f8 <CreatEvent>
 8019240:	60b8      	str	r0, [r7, #8]
            
            if(pecb == Co_NULL )       /* If there is no free EVENT control block*/
 8019242:	68bb      	ldr	r3, [r7, #8]
 8019244:	2b00      	cmp	r3, #0
 8019246:	d101      	bne.n	801924c <CoCreateQueue+0xd0>
            {
                return E_CREATE_FAIL;
 8019248:	23ff      	movs	r3, #255	; 0xff
 801924a:	e00b      	b.n	8019264 <CoCreateQueue+0xe8>
            }
            return (pecb->id);		
 801924c:	68bb      	ldr	r3, [r7, #8]
 801924e:	791b      	ldrb	r3, [r3, #4]
 8019250:	e008      	b.n	8019264 <CoCreateQueue+0xe8>
    for(i = 0; i < CFG_MAX_QUEUE; i++)
 8019252:	7bfb      	ldrb	r3, [r7, #15]
 8019254:	3301      	adds	r3, #1
 8019256:	73fb      	strb	r3, [r7, #15]
 8019258:	7bfb      	ldrb	r3, [r7, #15]
 801925a:	2b01      	cmp	r3, #1
 801925c:	d9a8      	bls.n	80191b0 <CoCreateQueue+0x34>
        }
    }
    
    OsSchedUnlock();
 801925e:	f7fe f9c7 	bl	80175f0 <OsSchedUnlock>
    return E_CREATE_FAIL;             /* There is no free QUEUE control block */	
 8019262:	23ff      	movs	r3, #255	; 0xff
}
 8019264:	4618      	mov	r0, r3
 8019266:	3710      	adds	r7, #16
 8019268:	46bd      	mov	sp, r7
 801926a:	bd80      	pop	{r7, pc}
 801926c:	20003749 	.word	0x20003749
 8019270:	2000d564 	.word	0x2000d564
 8019274:	2000d544 	.word	0x2000d544

08019278 <CoDelQueue>:
 * @details    This function is called to delete a queue. 
 * @note 
 *******************************************************************************
 */
StatusType CoDelQueue(OS_EventID id,U8 opt)
{
 8019278:	b580      	push	{r7, lr}
 801927a:	b086      	sub	sp, #24
 801927c:	af00      	add	r7, sp, #0
 801927e:	4603      	mov	r3, r0
 8019280:	460a      	mov	r2, r1
 8019282:	71fb      	strb	r3, [r7, #7]
 8019284:	4613      	mov	r3, r2
 8019286:	71bb      	strb	r3, [r7, #6]
    P_ECB   pecb;
    P_QCB   pqcb;
    StatusType err;
#if CFG_PAR_CHECKOUT_EN >0      
    if(id >= CFG_MAX_EVENT)	                     
 8019288:	79fb      	ldrb	r3, [r7, #7]
 801928a:	2b13      	cmp	r3, #19
 801928c:	d901      	bls.n	8019292 <CoDelQueue+0x1a>
    {
        return E_INVALID_ID;            /* Invalid id,return error            */
 801928e:	2301      	movs	r3, #1
 8019290:	e038      	b.n	8019304 <CoDelQueue+0x8c>
    }
#endif

    pecb = &EventTbl[id];
 8019292:	79fb      	ldrb	r3, [r7, #7]
 8019294:	011b      	lsls	r3, r3, #4
 8019296:	4a1d      	ldr	r2, [pc, #116]	; (801930c <CoDelQueue+0x94>)
 8019298:	4413      	add	r3, r2
 801929a:	617b      	str	r3, [r7, #20]
#if CFG_PAR_CHECKOUT_EN >0
    if( pecb->eventType != EVENT_TYPE_QUEUE)
 801929c:	697b      	ldr	r3, [r7, #20]
 801929e:	795b      	ldrb	r3, [r3, #5]
 80192a0:	f003 030f 	and.w	r3, r3, #15
 80192a4:	b2db      	uxtb	r3, r3
 80192a6:	2b03      	cmp	r3, #3
 80192a8:	d001      	beq.n	80192ae <CoDelQueue+0x36>
    {
        return E_INVALID_ID;            /* The event is not queue,return error*/	
 80192aa:	2301      	movs	r3, #1
 80192ac:	e02a      	b.n	8019304 <CoDelQueue+0x8c>
    }
#endif
    pqcb = (P_QCB)pecb->eventPtr;       /* Point at queue control block       */
 80192ae:	697b      	ldr	r3, [r7, #20]
 80192b0:	681b      	ldr	r3, [r3, #0]
 80192b2:	613b      	str	r3, [r7, #16]
    err  = DeleteEvent(pecb,opt);       /* Delete the event control block     */
 80192b4:	79bb      	ldrb	r3, [r7, #6]
 80192b6:	4619      	mov	r1, r3
 80192b8:	6978      	ldr	r0, [r7, #20]
 80192ba:	f7fe fadf 	bl	801787c <DeleteEvent>
 80192be:	4603      	mov	r3, r0
 80192c0:	73fb      	strb	r3, [r7, #15]
    if(err == E_OK)                   /* If the event block have been deleted */
 80192c2:	7bfb      	ldrb	r3, [r7, #15]
 80192c4:	2b00      	cmp	r3, #0
 80192c6:	d11c      	bne.n	8019302 <CoDelQueue+0x8a>
    {
        QueueIDVessel &= ~((U32)(1<<(pqcb->id)));   /* Update free queue list             */
 80192c8:	693b      	ldr	r3, [r7, #16]
 80192ca:	791b      	ldrb	r3, [r3, #4]
 80192cc:	461a      	mov	r2, r3
 80192ce:	2301      	movs	r3, #1
 80192d0:	4093      	lsls	r3, r2
 80192d2:	43da      	mvns	r2, r3
 80192d4:	4b0e      	ldr	r3, [pc, #56]	; (8019310 <CoDelQueue+0x98>)
 80192d6:	681b      	ldr	r3, [r3, #0]
 80192d8:	4013      	ands	r3, r2
 80192da:	4a0d      	ldr	r2, [pc, #52]	; (8019310 <CoDelQueue+0x98>)
 80192dc:	6013      	str	r3, [r2, #0]
        pqcb->qStart   = Co_NULL;
 80192de:	693b      	ldr	r3, [r7, #16]
 80192e0:	2200      	movs	r2, #0
 80192e2:	601a      	str	r2, [r3, #0]
		    pqcb->id       = 0;
 80192e4:	693b      	ldr	r3, [r7, #16]
 80192e6:	2200      	movs	r2, #0
 80192e8:	711a      	strb	r2, [r3, #4]
        pqcb->head     = 0;
 80192ea:	693b      	ldr	r3, [r7, #16]
 80192ec:	2200      	movs	r2, #0
 80192ee:	80da      	strh	r2, [r3, #6]
        pqcb->tail     = 0;
 80192f0:	693b      	ldr	r3, [r7, #16]
 80192f2:	2200      	movs	r2, #0
 80192f4:	811a      	strh	r2, [r3, #8]
        pqcb->qMaxSize = 0;
 80192f6:	693b      	ldr	r3, [r7, #16]
 80192f8:	2200      	movs	r2, #0
 80192fa:	815a      	strh	r2, [r3, #10]
        pqcb->qSize    = 0;
 80192fc:	693b      	ldr	r3, [r7, #16]
 80192fe:	2200      	movs	r2, #0
 8019300:	819a      	strh	r2, [r3, #12]
    }
    return err;	
 8019302:	7bfb      	ldrb	r3, [r7, #15]
}
 8019304:	4618      	mov	r0, r3
 8019306:	3718      	adds	r7, #24
 8019308:	46bd      	mov	sp, r7
 801930a:	bd80      	pop	{r7, pc}
 801930c:	2000374c 	.word	0x2000374c
 8019310:	2000d564 	.word	0x2000d564

08019314 <CoAcceptQueueMail>:
 * @details    This function is called to accept a mail from queue.
 * @note 
 *******************************************************************************
 */
void* CoAcceptQueueMail(OS_EventID id,StatusType* perr)
{
 8019314:	b580      	push	{r7, lr}
 8019316:	b086      	sub	sp, #24
 8019318:	af00      	add	r7, sp, #0
 801931a:	4603      	mov	r3, r0
 801931c:	6039      	str	r1, [r7, #0]
 801931e:	71fb      	strb	r3, [r7, #7]
  P_ECB pecb;
  P_QCB pqcb;
  void* pmail;
#if CFG_PAR_CHECKOUT_EN >0
    if(id >= CFG_MAX_EVENT)             
 8019320:	79fb      	ldrb	r3, [r7, #7]
 8019322:	2b13      	cmp	r3, #19
 8019324:	d904      	bls.n	8019330 <CoAcceptQueueMail+0x1c>
    {
        *perr = E_INVALID_ID;           /* Invalid id,return error            */
 8019326:	683b      	ldr	r3, [r7, #0]
 8019328:	2201      	movs	r2, #1
 801932a:	701a      	strb	r2, [r3, #0]
        return Co_NULL;
 801932c:	2300      	movs	r3, #0
 801932e:	e048      	b.n	80193c2 <CoAcceptQueueMail+0xae>
    }
#endif

    pecb = &EventTbl[id];
 8019330:	79fb      	ldrb	r3, [r7, #7]
 8019332:	011b      	lsls	r3, r3, #4
 8019334:	4a25      	ldr	r2, [pc, #148]	; (80193cc <CoAcceptQueueMail+0xb8>)
 8019336:	4413      	add	r3, r2
 8019338:	617b      	str	r3, [r7, #20]
#if CFG_PAR_CHECKOUT_EN >0
    if(pecb->eventType != EVENT_TYPE_QUEUE)/* Invalid event control block type*/          		
 801933a:	697b      	ldr	r3, [r7, #20]
 801933c:	795b      	ldrb	r3, [r3, #5]
 801933e:	f003 030f 	and.w	r3, r3, #15
 8019342:	b2db      	uxtb	r3, r3
 8019344:	2b03      	cmp	r3, #3
 8019346:	d004      	beq.n	8019352 <CoAcceptQueueMail+0x3e>
    {
        *perr = E_INVALID_ID;
 8019348:	683b      	ldr	r3, [r7, #0]
 801934a:	2201      	movs	r2, #1
 801934c:	701a      	strb	r2, [r3, #0]
        return Co_NULL;
 801934e:	2300      	movs	r3, #0
 8019350:	e037      	b.n	80193c2 <CoAcceptQueueMail+0xae>
    }
#endif	
    pqcb = (P_QCB)pecb->eventPtr;       /* Point at queue control block       */
 8019352:	697b      	ldr	r3, [r7, #20]
 8019354:	681b      	ldr	r3, [r3, #0]
 8019356:	613b      	str	r3, [r7, #16]
	OsSchedLock();
 8019358:	4b1d      	ldr	r3, [pc, #116]	; (80193d0 <CoAcceptQueueMail+0xbc>)
 801935a:	781b      	ldrb	r3, [r3, #0]
 801935c:	b2db      	uxtb	r3, r3
 801935e:	3301      	adds	r3, #1
 8019360:	b2da      	uxtb	r2, r3
 8019362:	4b1b      	ldr	r3, [pc, #108]	; (80193d0 <CoAcceptQueueMail+0xbc>)
 8019364:	701a      	strb	r2, [r3, #0]
    if(pqcb->qSize != 0)            /* If there are any messages in the queue */
 8019366:	693b      	ldr	r3, [r7, #16]
 8019368:	899b      	ldrh	r3, [r3, #12]
 801936a:	2b00      	cmp	r3, #0
 801936c:	d023      	beq.n	80193b6 <CoAcceptQueueMail+0xa2>
    {
        /* Extract oldest message from the queue */
        pmail = *(pqcb->qStart + pqcb->head);  
 801936e:	693b      	ldr	r3, [r7, #16]
 8019370:	681a      	ldr	r2, [r3, #0]
 8019372:	693b      	ldr	r3, [r7, #16]
 8019374:	88db      	ldrh	r3, [r3, #6]
 8019376:	009b      	lsls	r3, r3, #2
 8019378:	4413      	add	r3, r2
 801937a:	681b      	ldr	r3, [r3, #0]
 801937c:	60fb      	str	r3, [r7, #12]
        pqcb->head++;                   /* Update the queue head              */ 
 801937e:	693b      	ldr	r3, [r7, #16]
 8019380:	88db      	ldrh	r3, [r3, #6]
 8019382:	3301      	adds	r3, #1
 8019384:	b29a      	uxth	r2, r3
 8019386:	693b      	ldr	r3, [r7, #16]
 8019388:	80da      	strh	r2, [r3, #6]
        pqcb->qSize--;          /* Update the number of messages in the queue */  
 801938a:	693b      	ldr	r3, [r7, #16]
 801938c:	899b      	ldrh	r3, [r3, #12]
 801938e:	3b01      	subs	r3, #1
 8019390:	b29a      	uxth	r2, r3
 8019392:	693b      	ldr	r3, [r7, #16]
 8019394:	819a      	strh	r2, [r3, #12]
        if(pqcb->head == pqcb->qMaxSize)
 8019396:	693b      	ldr	r3, [r7, #16]
 8019398:	88da      	ldrh	r2, [r3, #6]
 801939a:	693b      	ldr	r3, [r7, #16]
 801939c:	895b      	ldrh	r3, [r3, #10]
 801939e:	429a      	cmp	r2, r3
 80193a0:	d102      	bne.n	80193a8 <CoAcceptQueueMail+0x94>
        {
            pqcb->head = 0;	
 80193a2:	693b      	ldr	r3, [r7, #16]
 80193a4:	2200      	movs	r2, #0
 80193a6:	80da      	strh	r2, [r3, #6]
        }
		OsSchedUnlock();
 80193a8:	f7fe f922 	bl	80175f0 <OsSchedUnlock>
        *perr = E_OK;
 80193ac:	683b      	ldr	r3, [r7, #0]
 80193ae:	2200      	movs	r2, #0
 80193b0:	701a      	strb	r2, [r3, #0]
        return pmail;                   /* Return message received            */
 80193b2:	68fb      	ldr	r3, [r7, #12]
 80193b4:	e005      	b.n	80193c2 <CoAcceptQueueMail+0xae>
    }
    else                                /* If there is no message in the queue*/
    {
		OsSchedUnlock();
 80193b6:	f7fe f91b 	bl	80175f0 <OsSchedUnlock>
        *perr = E_QUEUE_EMPTY;                 
 80193ba:	683b      	ldr	r3, [r7, #0]
 80193bc:	220b      	movs	r2, #11
 80193be:	701a      	strb	r2, [r3, #0]
        return Co_NULL;                    /* Return Co_NULL                        */
 80193c0:	2300      	movs	r3, #0
    }	
}
 80193c2:	4618      	mov	r0, r3
 80193c4:	3718      	adds	r7, #24
 80193c6:	46bd      	mov	sp, r7
 80193c8:	bd80      	pop	{r7, pc}
 80193ca:	bf00      	nop
 80193cc:	2000374c 	.word	0x2000374c
 80193d0:	20003749 	.word	0x20003749

080193d4 <CoPendQueueMail>:
 * @details    This function is called to wait for a mail.		   	
 * @note 
 *******************************************************************************
 */
void* CoPendQueueMail(OS_EventID id,U32 timeout,StatusType* perr)
{
 80193d4:	b580      	push	{r7, lr}
 80193d6:	b088      	sub	sp, #32
 80193d8:	af00      	add	r7, sp, #0
 80193da:	4603      	mov	r3, r0
 80193dc:	60b9      	str	r1, [r7, #8]
 80193de:	607a      	str	r2, [r7, #4]
 80193e0:	73fb      	strb	r3, [r7, #15]
    P_ECB   pecb;
    P_QCB   pqcb;
    P_OSTCB curTCB;
    void*   pmail;
    if(OSIntNesting > 0)                /* If the caller is ISR               */
 80193e2:	4b6d      	ldr	r3, [pc, #436]	; (8019598 <CoPendQueueMail+0x1c4>)
 80193e4:	781b      	ldrb	r3, [r3, #0]
 80193e6:	b2db      	uxtb	r3, r3
 80193e8:	2b00      	cmp	r3, #0
 80193ea:	d004      	beq.n	80193f6 <CoPendQueueMail+0x22>
    {
        *perr = E_CALL;
 80193ec:	687b      	ldr	r3, [r7, #4]
 80193ee:	2203      	movs	r2, #3
 80193f0:	701a      	strb	r2, [r3, #0]
        return Co_NULL;
 80193f2:	2300      	movs	r3, #0
 80193f4:	e0cb      	b.n	801958e <CoPendQueueMail+0x1ba>
    }
#if CFG_PAR_CHECKOUT_EN >0
    if(id >= CFG_MAX_EVENT)	         
 80193f6:	7bfb      	ldrb	r3, [r7, #15]
 80193f8:	2b13      	cmp	r3, #19
 80193fa:	d904      	bls.n	8019406 <CoPendQueueMail+0x32>
    {
        *perr = E_INVALID_ID;           /* Invalid event id,return error      */
 80193fc:	687b      	ldr	r3, [r7, #4]
 80193fe:	2201      	movs	r2, #1
 8019400:	701a      	strb	r2, [r3, #0]
        return Co_NULL;
 8019402:	2300      	movs	r3, #0
 8019404:	e0c3      	b.n	801958e <CoPendQueueMail+0x1ba>
    }
#endif

    pecb = &EventTbl[id];
 8019406:	7bfb      	ldrb	r3, [r7, #15]
 8019408:	011b      	lsls	r3, r3, #4
 801940a:	4a64      	ldr	r2, [pc, #400]	; (801959c <CoPendQueueMail+0x1c8>)
 801940c:	4413      	add	r3, r2
 801940e:	61fb      	str	r3, [r7, #28]
#if CFG_PAR_CHECKOUT_EN >0
    if(pecb->eventType != EVENT_TYPE_QUEUE) /* The event type is not queue    */
 8019410:	69fb      	ldr	r3, [r7, #28]
 8019412:	795b      	ldrb	r3, [r3, #5]
 8019414:	f003 030f 	and.w	r3, r3, #15
 8019418:	b2db      	uxtb	r3, r3
 801941a:	2b03      	cmp	r3, #3
 801941c:	d004      	beq.n	8019428 <CoPendQueueMail+0x54>
    {
        *perr = E_INVALID_ID;
 801941e:	687b      	ldr	r3, [r7, #4]
 8019420:	2201      	movs	r2, #1
 8019422:	701a      	strb	r2, [r3, #0]
        return Co_NULL;
 8019424:	2300      	movs	r3, #0
 8019426:	e0b2      	b.n	801958e <CoPendQueueMail+0x1ba>
    }
#endif	
    if(OSSchedLock != 0)                /* Judge schedule is locked or not?   */
 8019428:	4b5d      	ldr	r3, [pc, #372]	; (80195a0 <CoPendQueueMail+0x1cc>)
 801942a:	781b      	ldrb	r3, [r3, #0]
 801942c:	b2db      	uxtb	r3, r3
 801942e:	2b00      	cmp	r3, #0
 8019430:	d004      	beq.n	801943c <CoPendQueueMail+0x68>
    {	
        *perr = E_OS_IN_LOCK;           /* Schedule is locked,return error    */								 
 8019432:	687b      	ldr	r3, [r7, #4]
 8019434:	2215      	movs	r2, #21
 8019436:	701a      	strb	r2, [r3, #0]
        return Co_NULL;
 8019438:	2300      	movs	r3, #0
 801943a:	e0a8      	b.n	801958e <CoPendQueueMail+0x1ba>
    }	
    pqcb = (P_QCB)pecb->eventPtr;       /* Point at queue control block       */
 801943c:	69fb      	ldr	r3, [r7, #28]
 801943e:	681b      	ldr	r3, [r3, #0]
 8019440:	61bb      	str	r3, [r7, #24]
    OsSchedLock();
 8019442:	4b57      	ldr	r3, [pc, #348]	; (80195a0 <CoPendQueueMail+0x1cc>)
 8019444:	781b      	ldrb	r3, [r3, #0]
 8019446:	b2db      	uxtb	r3, r3
 8019448:	3301      	adds	r3, #1
 801944a:	b2da      	uxtb	r2, r3
 801944c:	4b54      	ldr	r3, [pc, #336]	; (80195a0 <CoPendQueueMail+0x1cc>)
 801944e:	701a      	strb	r2, [r3, #0]
    if(pqcb->qSize != 0)            /* If there are any messages in the queue */
 8019450:	69bb      	ldr	r3, [r7, #24]
 8019452:	899b      	ldrh	r3, [r3, #12]
 8019454:	2b00      	cmp	r3, #0
 8019456:	d023      	beq.n	80194a0 <CoPendQueueMail+0xcc>
    {
        /* Extract oldest message from the queue                              */
        pmail = *(pqcb->qStart + pqcb->head);   
 8019458:	69bb      	ldr	r3, [r7, #24]
 801945a:	681a      	ldr	r2, [r3, #0]
 801945c:	69bb      	ldr	r3, [r7, #24]
 801945e:	88db      	ldrh	r3, [r3, #6]
 8019460:	009b      	lsls	r3, r3, #2
 8019462:	4413      	add	r3, r2
 8019464:	681b      	ldr	r3, [r3, #0]
 8019466:	613b      	str	r3, [r7, #16]
        pqcb->head++;                   /* Update the queue head              */ 
 8019468:	69bb      	ldr	r3, [r7, #24]
 801946a:	88db      	ldrh	r3, [r3, #6]
 801946c:	3301      	adds	r3, #1
 801946e:	b29a      	uxth	r2, r3
 8019470:	69bb      	ldr	r3, [r7, #24]
 8019472:	80da      	strh	r2, [r3, #6]
        pqcb->qSize--;          /* Update the number of messages in the queue */  
 8019474:	69bb      	ldr	r3, [r7, #24]
 8019476:	899b      	ldrh	r3, [r3, #12]
 8019478:	3b01      	subs	r3, #1
 801947a:	b29a      	uxth	r2, r3
 801947c:	69bb      	ldr	r3, [r7, #24]
 801947e:	819a      	strh	r2, [r3, #12]
        if(pqcb->head == pqcb->qMaxSize)/* Check queue head                   */
 8019480:	69bb      	ldr	r3, [r7, #24]
 8019482:	88da      	ldrh	r2, [r3, #6]
 8019484:	69bb      	ldr	r3, [r7, #24]
 8019486:	895b      	ldrh	r3, [r3, #10]
 8019488:	429a      	cmp	r2, r3
 801948a:	d102      	bne.n	8019492 <CoPendQueueMail+0xbe>
        {
            pqcb->head = 0;	
 801948c:	69bb      	ldr	r3, [r7, #24]
 801948e:	2200      	movs	r2, #0
 8019490:	80da      	strh	r2, [r3, #6]
        }
        OsSchedUnlock();
 8019492:	f7fe f8ad 	bl	80175f0 <OsSchedUnlock>
        *perr = E_OK;
 8019496:	687b      	ldr	r3, [r7, #4]
 8019498:	2200      	movs	r2, #0
 801949a:	701a      	strb	r2, [r3, #0]
        return pmail;                   /* Return message received            */
 801949c:	693b      	ldr	r3, [r7, #16]
 801949e:	e076      	b.n	801958e <CoPendQueueMail+0x1ba>
    }
    else                                /* If there is no message in the queue*/
    {
    	OsSchedUnlock();
 80194a0:	f7fe f8a6 	bl	80175f0 <OsSchedUnlock>
        curTCB = TCBRunning;
 80194a4:	4b3f      	ldr	r3, [pc, #252]	; (80195a4 <CoPendQueueMail+0x1d0>)
 80194a6:	681b      	ldr	r3, [r3, #0]
 80194a8:	617b      	str	r3, [r7, #20]
        if(timeout == 0)                /* If time-out is not configured      */
 80194aa:	68bb      	ldr	r3, [r7, #8]
 80194ac:	2b00      	cmp	r3, #0
 80194ae:	d12c      	bne.n	801950a <CoPendQueueMail+0x136>
        {
            /* Block current task until the event occur                       */
            EventTaskToWait(pecb,curTCB); 
 80194b0:	6979      	ldr	r1, [r7, #20]
 80194b2:	69f8      	ldr	r0, [r7, #28]
 80194b4:	f7fe fa28 	bl	8017908 <EventTaskToWait>
            
            /* Have recived message or the queue have been deleted            */
            OsSchedLock(); 
 80194b8:	4b39      	ldr	r3, [pc, #228]	; (80195a0 <CoPendQueueMail+0x1cc>)
 80194ba:	781b      	ldrb	r3, [r3, #0]
 80194bc:	b2db      	uxtb	r3, r3
 80194be:	3301      	adds	r3, #1
 80194c0:	b2da      	uxtb	r2, r3
 80194c2:	4b37      	ldr	r3, [pc, #220]	; (80195a0 <CoPendQueueMail+0x1cc>)
 80194c4:	701a      	strb	r2, [r3, #0]
            pmail = curTCB->pmail;              
 80194c6:	697b      	ldr	r3, [r7, #20]
 80194c8:	691b      	ldr	r3, [r3, #16]
 80194ca:	613b      	str	r3, [r7, #16]
            curTCB->pmail = Co_NULL;
 80194cc:	697b      	ldr	r3, [r7, #20]
 80194ce:	2200      	movs	r2, #0
 80194d0:	611a      	str	r2, [r3, #16]
            pqcb->head++;                             /* Clear event sign         */
 80194d2:	69bb      	ldr	r3, [r7, #24]
 80194d4:	88db      	ldrh	r3, [r3, #6]
 80194d6:	3301      	adds	r3, #1
 80194d8:	b29a      	uxth	r2, r3
 80194da:	69bb      	ldr	r3, [r7, #24]
 80194dc:	80da      	strh	r2, [r3, #6]
            pqcb->qSize--;
 80194de:	69bb      	ldr	r3, [r7, #24]
 80194e0:	899b      	ldrh	r3, [r3, #12]
 80194e2:	3b01      	subs	r3, #1
 80194e4:	b29a      	uxth	r2, r3
 80194e6:	69bb      	ldr	r3, [r7, #24]
 80194e8:	819a      	strh	r2, [r3, #12]
            if(pqcb->head == pqcb->qMaxSize)
 80194ea:	69bb      	ldr	r3, [r7, #24]
 80194ec:	88da      	ldrh	r2, [r3, #6]
 80194ee:	69bb      	ldr	r3, [r7, #24]
 80194f0:	895b      	ldrh	r3, [r3, #10]
 80194f2:	429a      	cmp	r2, r3
 80194f4:	d102      	bne.n	80194fc <CoPendQueueMail+0x128>
            {
                pqcb->head = 0;	
 80194f6:	69bb      	ldr	r3, [r7, #24]
 80194f8:	2200      	movs	r2, #0
 80194fa:	80da      	strh	r2, [r3, #6]
            }
            OsSchedUnlock();
 80194fc:	f7fe f878 	bl	80175f0 <OsSchedUnlock>
            *perr = E_OK;
 8019500:	687b      	ldr	r3, [r7, #4]
 8019502:	2200      	movs	r2, #0
 8019504:	701a      	strb	r2, [r3, #0]
            return pmail;               /* Return message received or Co_NULL    */
 8019506:	693b      	ldr	r3, [r7, #16]
 8019508:	e041      	b.n	801958e <CoPendQueueMail+0x1ba>
        }
        else                            /* If time-out is configured          */
        {
            OsSchedLock(); 
 801950a:	4b25      	ldr	r3, [pc, #148]	; (80195a0 <CoPendQueueMail+0x1cc>)
 801950c:	781b      	ldrb	r3, [r3, #0]
 801950e:	b2db      	uxtb	r3, r3
 8019510:	3301      	adds	r3, #1
 8019512:	b2da      	uxtb	r2, r3
 8019514:	4b22      	ldr	r3, [pc, #136]	; (80195a0 <CoPendQueueMail+0x1cc>)
 8019516:	701a      	strb	r2, [r3, #0]
            
            /* Block current task until event or timeout occurs               */           
            EventTaskToWait(pecb,curTCB);       
 8019518:	6979      	ldr	r1, [r7, #20]
 801951a:	69f8      	ldr	r0, [r7, #28]
 801951c:	f7fe f9f4 	bl	8017908 <EventTaskToWait>
            InsertDelayList(curTCB,timeout);
 8019520:	68b9      	ldr	r1, [r7, #8]
 8019522:	6978      	ldr	r0, [r7, #20]
 8019524:	f000 ff70 	bl	801a408 <InsertDelayList>
            OsSchedUnlock();
 8019528:	f7fe f862 	bl	80175f0 <OsSchedUnlock>
            if(curTCB->pmail == Co_NULL)   /* If time-out occurred               */
 801952c:	697b      	ldr	r3, [r7, #20]
 801952e:	691b      	ldr	r3, [r3, #16]
 8019530:	2b00      	cmp	r3, #0
 8019532:	d104      	bne.n	801953e <CoPendQueueMail+0x16a>
            {
                *perr = E_TIMEOUT;
 8019534:	687b      	ldr	r3, [r7, #4]
 8019536:	2205      	movs	r2, #5
 8019538:	701a      	strb	r2, [r3, #0]
                return Co_NULL;
 801953a:	2300      	movs	r3, #0
 801953c:	e027      	b.n	801958e <CoPendQueueMail+0x1ba>
            }
            else                        /* If event occured                   */
            {
                OsSchedLock();
 801953e:	4b18      	ldr	r3, [pc, #96]	; (80195a0 <CoPendQueueMail+0x1cc>)
 8019540:	781b      	ldrb	r3, [r3, #0]
 8019542:	b2db      	uxtb	r3, r3
 8019544:	3301      	adds	r3, #1
 8019546:	b2da      	uxtb	r2, r3
 8019548:	4b15      	ldr	r3, [pc, #84]	; (80195a0 <CoPendQueueMail+0x1cc>)
 801954a:	701a      	strb	r2, [r3, #0]
                pmail = curTCB->pmail;              
 801954c:	697b      	ldr	r3, [r7, #20]
 801954e:	691b      	ldr	r3, [r3, #16]
 8019550:	613b      	str	r3, [r7, #16]
                curTCB->pmail = Co_NULL;
 8019552:	697b      	ldr	r3, [r7, #20]
 8019554:	2200      	movs	r2, #0
 8019556:	611a      	str	r2, [r3, #16]
                pqcb->head++;                             /* Clear event sign         */
 8019558:	69bb      	ldr	r3, [r7, #24]
 801955a:	88db      	ldrh	r3, [r3, #6]
 801955c:	3301      	adds	r3, #1
 801955e:	b29a      	uxth	r2, r3
 8019560:	69bb      	ldr	r3, [r7, #24]
 8019562:	80da      	strh	r2, [r3, #6]
                pqcb->qSize--;
 8019564:	69bb      	ldr	r3, [r7, #24]
 8019566:	899b      	ldrh	r3, [r3, #12]
 8019568:	3b01      	subs	r3, #1
 801956a:	b29a      	uxth	r2, r3
 801956c:	69bb      	ldr	r3, [r7, #24]
 801956e:	819a      	strh	r2, [r3, #12]
                if(pqcb->head == pqcb->qMaxSize)
 8019570:	69bb      	ldr	r3, [r7, #24]
 8019572:	88da      	ldrh	r2, [r3, #6]
 8019574:	69bb      	ldr	r3, [r7, #24]
 8019576:	895b      	ldrh	r3, [r3, #10]
 8019578:	429a      	cmp	r2, r3
 801957a:	d102      	bne.n	8019582 <CoPendQueueMail+0x1ae>
                {
                    pqcb->head = 0;	
 801957c:	69bb      	ldr	r3, [r7, #24]
 801957e:	2200      	movs	r2, #0
 8019580:	80da      	strh	r2, [r3, #6]
                }
                OsSchedUnlock();
 8019582:	f7fe f835 	bl	80175f0 <OsSchedUnlock>
                *perr = E_OK;
 8019586:	687b      	ldr	r3, [r7, #4]
 8019588:	2200      	movs	r2, #0
 801958a:	701a      	strb	r2, [r3, #0]
                return pmail;           /* Return message received or Co_NULL    */
 801958c:	693b      	ldr	r3, [r7, #16]
            }				
        }	
    }
}
 801958e:	4618      	mov	r0, r3
 8019590:	3720      	adds	r7, #32
 8019592:	46bd      	mov	sp, r7
 8019594:	bd80      	pop	{r7, pc}
 8019596:	bf00      	nop
 8019598:	20003748 	.word	0x20003748
 801959c:	2000374c 	.word	0x2000374c
 80195a0:	20003749 	.word	0x20003749
 80195a4:	2000d728 	.word	0x2000d728

080195a8 <CoPostQueueMail>:
 * @details    This function is called to post a mail to queue.
 * @note 
 *******************************************************************************
 */
StatusType CoPostQueueMail(OS_EventID id,void* pmail)
{	
 80195a8:	b580      	push	{r7, lr}
 80195aa:	b084      	sub	sp, #16
 80195ac:	af00      	add	r7, sp, #0
 80195ae:	4603      	mov	r3, r0
 80195b0:	6039      	str	r1, [r7, #0]
 80195b2:	71fb      	strb	r3, [r7, #7]
    P_ECB pecb;
    P_QCB pqcb;
#if CFG_PAR_CHECKOUT_EN >0                     
    if(id >= CFG_MAX_EVENT)	
 80195b4:	79fb      	ldrb	r3, [r7, #7]
 80195b6:	2b13      	cmp	r3, #19
 80195b8:	d901      	bls.n	80195be <CoPostQueueMail+0x16>
    {
        return E_INVALID_ID;          
 80195ba:	2301      	movs	r3, #1
 80195bc:	e042      	b.n	8019644 <CoPostQueueMail+0x9c>
    }
#endif

    pecb = &EventTbl[id];
 80195be:	79fb      	ldrb	r3, [r7, #7]
 80195c0:	011b      	lsls	r3, r3, #4
 80195c2:	4a22      	ldr	r2, [pc, #136]	; (801964c <CoPostQueueMail+0xa4>)
 80195c4:	4413      	add	r3, r2
 80195c6:	60fb      	str	r3, [r7, #12]
#if CFG_PAR_CHECKOUT_EN >0
    if(pecb->eventType != EVENT_TYPE_QUEUE)   
 80195c8:	68fb      	ldr	r3, [r7, #12]
 80195ca:	795b      	ldrb	r3, [r3, #5]
 80195cc:	f003 030f 	and.w	r3, r3, #15
 80195d0:	b2db      	uxtb	r3, r3
 80195d2:	2b03      	cmp	r3, #3
 80195d4:	d001      	beq.n	80195da <CoPostQueueMail+0x32>
    {
        return E_INVALID_ID;            /* The event type isn't queue,return  */	
 80195d6:	2301      	movs	r3, #1
 80195d8:	e034      	b.n	8019644 <CoPostQueueMail+0x9c>
    }	
#endif
    pqcb = (P_QCB)pecb->eventPtr;	
 80195da:	68fb      	ldr	r3, [r7, #12]
 80195dc:	681b      	ldr	r3, [r3, #0]
 80195de:	60bb      	str	r3, [r7, #8]
    if(pqcb->qSize == pqcb->qMaxSize)   /* If queue is full                   */
 80195e0:	68bb      	ldr	r3, [r7, #8]
 80195e2:	899a      	ldrh	r2, [r3, #12]
 80195e4:	68bb      	ldr	r3, [r7, #8]
 80195e6:	895b      	ldrh	r3, [r3, #10]
 80195e8:	429a      	cmp	r2, r3
 80195ea:	d101      	bne.n	80195f0 <CoPostQueueMail+0x48>
    {
        return E_QUEUE_FULL;
 80195ec:	2308      	movs	r3, #8
 80195ee:	e029      	b.n	8019644 <CoPostQueueMail+0x9c>
    }
    else                                /* If queue is not full               */
    {
        OsSchedLock();
 80195f0:	4b17      	ldr	r3, [pc, #92]	; (8019650 <CoPostQueueMail+0xa8>)
 80195f2:	781b      	ldrb	r3, [r3, #0]
 80195f4:	b2db      	uxtb	r3, r3
 80195f6:	3301      	adds	r3, #1
 80195f8:	b2da      	uxtb	r2, r3
 80195fa:	4b15      	ldr	r3, [pc, #84]	; (8019650 <CoPostQueueMail+0xa8>)
 80195fc:	701a      	strb	r2, [r3, #0]
        *(pqcb->qStart + pqcb->tail) = pmail;   /* Insert message into queue  */
 80195fe:	68bb      	ldr	r3, [r7, #8]
 8019600:	681a      	ldr	r2, [r3, #0]
 8019602:	68bb      	ldr	r3, [r7, #8]
 8019604:	891b      	ldrh	r3, [r3, #8]
 8019606:	009b      	lsls	r3, r3, #2
 8019608:	4413      	add	r3, r2
 801960a:	683a      	ldr	r2, [r7, #0]
 801960c:	601a      	str	r2, [r3, #0]
        pqcb->tail++;                           /* Update queue tail          */
 801960e:	68bb      	ldr	r3, [r7, #8]
 8019610:	891b      	ldrh	r3, [r3, #8]
 8019612:	3301      	adds	r3, #1
 8019614:	b29a      	uxth	r2, r3
 8019616:	68bb      	ldr	r3, [r7, #8]
 8019618:	811a      	strh	r2, [r3, #8]
        pqcb->qSize++;          /* Update the number of messages in the queue */
 801961a:	68bb      	ldr	r3, [r7, #8]
 801961c:	899b      	ldrh	r3, [r3, #12]
 801961e:	3301      	adds	r3, #1
 8019620:	b29a      	uxth	r2, r3
 8019622:	68bb      	ldr	r3, [r7, #8]
 8019624:	819a      	strh	r2, [r3, #12]
        if(pqcb->tail == pqcb->qMaxSize)        /* Check queue tail           */   
 8019626:	68bb      	ldr	r3, [r7, #8]
 8019628:	891a      	ldrh	r2, [r3, #8]
 801962a:	68bb      	ldr	r3, [r7, #8]
 801962c:	895b      	ldrh	r3, [r3, #10]
 801962e:	429a      	cmp	r2, r3
 8019630:	d102      	bne.n	8019638 <CoPostQueueMail+0x90>
        {
            pqcb->tail = 0;	
 8019632:	68bb      	ldr	r3, [r7, #8]
 8019634:	2200      	movs	r2, #0
 8019636:	811a      	strh	r2, [r3, #8]
        }
        EventTaskToRdy(pecb);           /* Check the event waiting list       */
 8019638:	68f8      	ldr	r0, [r7, #12]
 801963a:	f7fe f9e5 	bl	8017a08 <EventTaskToRdy>
        OsSchedUnlock();
 801963e:	f7fd ffd7 	bl	80175f0 <OsSchedUnlock>
        return E_OK;
 8019642:	2300      	movs	r3, #0
    }
}
 8019644:	4618      	mov	r0, r3
 8019646:	3710      	adds	r7, #16
 8019648:	46bd      	mov	sp, r7
 801964a:	bd80      	pop	{r7, pc}
 801964c:	2000374c 	.word	0x2000374c
 8019650:	20003749 	.word	0x20003749

08019654 <isr_PostQueueMail>:
 * @note 				   
 *******************************************************************************
 */
#if CFG_MAX_SERVICE_REQUEST > 0
StatusType isr_PostQueueMail(OS_EventID id,void* pmail)
{
 8019654:	b580      	push	{r7, lr}
 8019656:	b082      	sub	sp, #8
 8019658:	af00      	add	r7, sp, #0
 801965a:	4603      	mov	r3, r0
 801965c:	6039      	str	r1, [r7, #0]
 801965e:	71fb      	strb	r3, [r7, #7]
    if(OSSchedLock > 0)         /* If scheduler is locked,(the caller is ISR) */
 8019660:	4b0d      	ldr	r3, [pc, #52]	; (8019698 <isr_PostQueueMail+0x44>)
 8019662:	781b      	ldrb	r3, [r3, #0]
 8019664:	b2db      	uxtb	r3, r3
 8019666:	2b00      	cmp	r3, #0
 8019668:	d00c      	beq.n	8019684 <isr_PostQueueMail+0x30>
    {
        /* Insert the request into service request queue                      */
        if(InsertInSRQ(QUEUE_REQ,id,pmail) == Co_FALSE)
 801966a:	79fb      	ldrb	r3, [r7, #7]
 801966c:	683a      	ldr	r2, [r7, #0]
 801966e:	4619      	mov	r1, r3
 8019670:	2004      	movs	r0, #4
 8019672:	f000 f981 	bl	8019978 <InsertInSRQ>
 8019676:	4603      	mov	r3, r0
 8019678:	2b00      	cmp	r3, #0
 801967a:	d101      	bne.n	8019680 <isr_PostQueueMail+0x2c>
        {
            return E_SEV_REQ_FULL;      /* If service request queue is full   */          
 801967c:	2312      	movs	r3, #18
 801967e:	e007      	b.n	8019690 <isr_PostQueueMail+0x3c>
        }			
        else  /* If the request have been inserted into service request queue */
        {
            return E_OK;
 8019680:	2300      	movs	r3, #0
 8019682:	e005      	b.n	8019690 <isr_PostQueueMail+0x3c>
        }
    }
    else                                /* The scheduler is unlocked          */
    {
        return(CoPostQueueMail(id,pmail));    /* Send the message to the queue*/ 
 8019684:	79fb      	ldrb	r3, [r7, #7]
 8019686:	6839      	ldr	r1, [r7, #0]
 8019688:	4618      	mov	r0, r3
 801968a:	f7ff ff8d 	bl	80195a8 <CoPostQueueMail>
 801968e:	4603      	mov	r3, r0
    }
}
 8019690:	4618      	mov	r0, r3
 8019692:	3708      	adds	r7, #8
 8019694:	46bd      	mov	sp, r7
 8019696:	bd80      	pop	{r7, pc}
 8019698:	20003749 	.word	0x20003749

0801969c <CoCreateSem>:
 * @par Description
 * @details    This function is called to create a semaphore. 
 *******************************************************************************
 */
OS_EventID CoCreateSem(U16 initCnt,U16 maxCnt,U8 sortType)
{
 801969c:	b580      	push	{r7, lr}
 801969e:	b084      	sub	sp, #16
 80196a0:	af00      	add	r7, sp, #0
 80196a2:	4603      	mov	r3, r0
 80196a4:	80fb      	strh	r3, [r7, #6]
 80196a6:	460b      	mov	r3, r1
 80196a8:	80bb      	strh	r3, [r7, #4]
 80196aa:	4613      	mov	r3, r2
 80196ac:	70fb      	strb	r3, [r7, #3]
    P_ECB pecb;
#if CFG_PAR_CHECKOUT_EN >0
    if(initCnt > maxCnt)    
 80196ae:	88fa      	ldrh	r2, [r7, #6]
 80196b0:	88bb      	ldrh	r3, [r7, #4]
 80196b2:	429a      	cmp	r2, r3
 80196b4:	d901      	bls.n	80196ba <CoCreateSem+0x1e>
    {
        return E_CREATE_FAIL;           /* Invalid 'initCnt' or 'maxCnt'      */	
 80196b6:	23ff      	movs	r3, #255	; 0xff
 80196b8:	e01b      	b.n	80196f2 <CoCreateSem+0x56>
    }
    
    if ((sortType != EVENT_SORT_TYPE_FIFO) && (sortType != EVENT_SORT_TYPE_PRIO))
 80196ba:	78fb      	ldrb	r3, [r7, #3]
 80196bc:	2b01      	cmp	r3, #1
 80196be:	d004      	beq.n	80196ca <CoCreateSem+0x2e>
 80196c0:	78fb      	ldrb	r3, [r7, #3]
 80196c2:	2b02      	cmp	r3, #2
 80196c4:	d001      	beq.n	80196ca <CoCreateSem+0x2e>
    {
        return E_CREATE_FAIL;           /* Illegal sort type,return error     */
 80196c6:	23ff      	movs	r3, #255	; 0xff
 80196c8:	e013      	b.n	80196f2 <CoCreateSem+0x56>
    }
#endif	
    
    /* Create a semaphore type event control block                            */
    pecb = CreatEvent(EVENT_TYPE_SEM,sortType,Co_NULL);
 80196ca:	78fb      	ldrb	r3, [r7, #3]
 80196cc:	2200      	movs	r2, #0
 80196ce:	4619      	mov	r1, r3
 80196d0:	2001      	movs	r0, #1
 80196d2:	f7fe f891 	bl	80177f8 <CreatEvent>
 80196d6:	60f8      	str	r0, [r7, #12]
    if(pecb == Co_NULL)                    /* If failed to create event block    */
 80196d8:	68fb      	ldr	r3, [r7, #12]
 80196da:	2b00      	cmp	r3, #0
 80196dc:	d101      	bne.n	80196e2 <CoCreateSem+0x46>
    {
        return E_CREATE_FAIL;
 80196de:	23ff      	movs	r3, #255	; 0xff
 80196e0:	e007      	b.n	80196f2 <CoCreateSem+0x56>
    }
    pecb->eventCounter        = initCnt;/* Initialize event block             */
 80196e2:	68fb      	ldr	r3, [r7, #12]
 80196e4:	88fa      	ldrh	r2, [r7, #6]
 80196e6:	80da      	strh	r2, [r3, #6]
    pecb->initialEventCounter = maxCnt;
 80196e8:	68fb      	ldr	r3, [r7, #12]
 80196ea:	88ba      	ldrh	r2, [r7, #4]
 80196ec:	811a      	strh	r2, [r3, #8]
    return (pecb->id);                  /* Return event id                    */
 80196ee:	68fb      	ldr	r3, [r7, #12]
 80196f0:	791b      	ldrb	r3, [r3, #4]
}
 80196f2:	4618      	mov	r0, r3
 80196f4:	3710      	adds	r7, #16
 80196f6:	46bd      	mov	sp, r7
 80196f8:	bd80      	pop	{r7, pc}

080196fa <CoDelSem>:
 *
 * @note 
 *******************************************************************************
 */
StatusType CoDelSem(OS_EventID id,U8 opt)
{
 80196fa:	b580      	push	{r7, lr}
 80196fc:	b084      	sub	sp, #16
 80196fe:	af00      	add	r7, sp, #0
 8019700:	4603      	mov	r3, r0
 8019702:	460a      	mov	r2, r1
 8019704:	71fb      	strb	r3, [r7, #7]
 8019706:	4613      	mov	r3, r2
 8019708:	71bb      	strb	r3, [r7, #6]
    P_ECB pecb;

#if CFG_PAR_CHECKOUT_EN >0
    if(id >= CFG_MAX_EVENT)	                 
 801970a:	79fb      	ldrb	r3, [r7, #7]
 801970c:	2b13      	cmp	r3, #19
 801970e:	d901      	bls.n	8019714 <CoDelSem+0x1a>
    {
        return E_INVALID_ID;
 8019710:	2301      	movs	r3, #1
 8019712:	e013      	b.n	801973c <CoDelSem+0x42>
    }
#endif

    pecb = &EventTbl[id];
 8019714:	79fb      	ldrb	r3, [r7, #7]
 8019716:	011b      	lsls	r3, r3, #4
 8019718:	4a0a      	ldr	r2, [pc, #40]	; (8019744 <CoDelSem+0x4a>)
 801971a:	4413      	add	r3, r2
 801971c:	60fb      	str	r3, [r7, #12]

#if CFG_PAR_CHECKOUT_EN >0
    if(pecb->eventType != EVENT_TYPE_SEM)  
 801971e:	68fb      	ldr	r3, [r7, #12]
 8019720:	795b      	ldrb	r3, [r3, #5]
 8019722:	f003 030f 	and.w	r3, r3, #15
 8019726:	b2db      	uxtb	r3, r3
 8019728:	2b01      	cmp	r3, #1
 801972a:	d001      	beq.n	8019730 <CoDelSem+0x36>
    {
        return E_INVALID_ID;             /* The event type is not semaphore   */	
 801972c:	2301      	movs	r3, #1
 801972e:	e005      	b.n	801973c <CoDelSem+0x42>
    }	
#endif

    return (DeleteEvent(pecb,opt));/* Delete the semaphore event control block*/
 8019730:	79bb      	ldrb	r3, [r7, #6]
 8019732:	4619      	mov	r1, r3
 8019734:	68f8      	ldr	r0, [r7, #12]
 8019736:	f7fe f8a1 	bl	801787c <DeleteEvent>
 801973a:	4603      	mov	r3, r0
}
 801973c:	4618      	mov	r0, r3
 801973e:	3710      	adds	r7, #16
 8019740:	46bd      	mov	sp, r7
 8019742:	bd80      	pop	{r7, pc}
 8019744:	2000374c 	.word	0x2000374c

08019748 <CoAcceptSem>:
 * @par Description
 * @details    This function is called accept a semaphore without waitting. 
 *******************************************************************************
 */
StatusType CoAcceptSem(OS_EventID id)
{
 8019748:	b580      	push	{r7, lr}
 801974a:	b084      	sub	sp, #16
 801974c:	af00      	add	r7, sp, #0
 801974e:	4603      	mov	r3, r0
 8019750:	71fb      	strb	r3, [r7, #7]
    P_ECB pecb;
#if CFG_PAR_CHECKOUT_EN >0
    if(id >= CFG_MAX_EVENT)	                 
 8019752:	79fb      	ldrb	r3, [r7, #7]
 8019754:	2b13      	cmp	r3, #19
 8019756:	d901      	bls.n	801975c <CoAcceptSem+0x14>
    {
        return E_INVALID_ID;
 8019758:	2301      	movs	r3, #1
 801975a:	e025      	b.n	80197a8 <CoAcceptSem+0x60>
    }
#endif

	pecb = &EventTbl[id];
 801975c:	79fb      	ldrb	r3, [r7, #7]
 801975e:	011b      	lsls	r3, r3, #4
 8019760:	4a13      	ldr	r2, [pc, #76]	; (80197b0 <CoAcceptSem+0x68>)
 8019762:	4413      	add	r3, r2
 8019764:	60fb      	str	r3, [r7, #12]
#if CFG_PAR_CHECKOUT_EN >0
    if( pecb->eventType != EVENT_TYPE_SEM)   
 8019766:	68fb      	ldr	r3, [r7, #12]
 8019768:	795b      	ldrb	r3, [r3, #5]
 801976a:	f003 030f 	and.w	r3, r3, #15
 801976e:	b2db      	uxtb	r3, r3
 8019770:	2b01      	cmp	r3, #1
 8019772:	d001      	beq.n	8019778 <CoAcceptSem+0x30>
    {
        return E_INVALID_ID;	
 8019774:	2301      	movs	r3, #1
 8019776:	e017      	b.n	80197a8 <CoAcceptSem+0x60>
    }
#endif
	OsSchedLock();
 8019778:	4b0e      	ldr	r3, [pc, #56]	; (80197b4 <CoAcceptSem+0x6c>)
 801977a:	781b      	ldrb	r3, [r3, #0]
 801977c:	b2db      	uxtb	r3, r3
 801977e:	3301      	adds	r3, #1
 8019780:	b2da      	uxtb	r2, r3
 8019782:	4b0c      	ldr	r3, [pc, #48]	; (80197b4 <CoAcceptSem+0x6c>)
 8019784:	701a      	strb	r2, [r3, #0]
    if(pecb->eventCounter > 0) /* If semaphore is positive,resource available */
 8019786:	68fb      	ldr	r3, [r7, #12]
 8019788:	88db      	ldrh	r3, [r3, #6]
 801978a:	2b00      	cmp	r3, #0
 801978c:	d009      	beq.n	80197a2 <CoAcceptSem+0x5a>
    {	
        pecb->eventCounter--;         /* Decrement semaphore only if positive */
 801978e:	68fb      	ldr	r3, [r7, #12]
 8019790:	88db      	ldrh	r3, [r3, #6]
 8019792:	3b01      	subs	r3, #1
 8019794:	b29a      	uxth	r2, r3
 8019796:	68fb      	ldr	r3, [r7, #12]
 8019798:	80da      	strh	r2, [r3, #6]
		OsSchedUnlock();
 801979a:	f7fd ff29 	bl	80175f0 <OsSchedUnlock>
        return E_OK;	
 801979e:	2300      	movs	r3, #0
 80197a0:	e002      	b.n	80197a8 <CoAcceptSem+0x60>
    }
    else                                /* Resource is not available          */
    {	
		OsSchedUnlock();
 80197a2:	f7fd ff25 	bl	80175f0 <OsSchedUnlock>
        return E_SEM_EMPTY;
 80197a6:	2309      	movs	r3, #9
    }	
}
 80197a8:	4618      	mov	r0, r3
 80197aa:	3710      	adds	r7, #16
 80197ac:	46bd      	mov	sp, r7
 80197ae:	bd80      	pop	{r7, pc}
 80197b0:	2000374c 	.word	0x2000374c
 80197b4:	20003749 	.word	0x20003749

080197b8 <CoPendSem>:
 * @details    This function is called to waits for a semaphore. 
 * @note       IF this function is called in ISR,nothing to do and return immediately.
 *******************************************************************************
 */
StatusType CoPendSem(OS_EventID id,U32 timeout)
{
 80197b8:	b580      	push	{r7, lr}
 80197ba:	b084      	sub	sp, #16
 80197bc:	af00      	add	r7, sp, #0
 80197be:	4603      	mov	r3, r0
 80197c0:	6039      	str	r1, [r7, #0]
 80197c2:	71fb      	strb	r3, [r7, #7]
    P_ECB 	 pecb;
    P_OSTCB  curTCB;
    if(OSIntNesting > 0)                /* If the caller is ISR               */
 80197c4:	4b39      	ldr	r3, [pc, #228]	; (80198ac <CoPendSem+0xf4>)
 80197c6:	781b      	ldrb	r3, [r3, #0]
 80197c8:	b2db      	uxtb	r3, r3
 80197ca:	2b00      	cmp	r3, #0
 80197cc:	d001      	beq.n	80197d2 <CoPendSem+0x1a>
    {
        return E_CALL;
 80197ce:	2303      	movs	r3, #3
 80197d0:	e068      	b.n	80198a4 <CoPendSem+0xec>
    }
#if CFG_PAR_CHECKOUT_EN >0
    if(id >= CFG_MAX_EVENT)	            
 80197d2:	79fb      	ldrb	r3, [r7, #7]
 80197d4:	2b13      	cmp	r3, #19
 80197d6:	d901      	bls.n	80197dc <CoPendSem+0x24>
    {
        return E_INVALID_ID;
 80197d8:	2301      	movs	r3, #1
 80197da:	e063      	b.n	80198a4 <CoPendSem+0xec>
    }
#endif

	  pecb = &EventTbl[id];
 80197dc:	79fb      	ldrb	r3, [r7, #7]
 80197de:	011b      	lsls	r3, r3, #4
 80197e0:	4a33      	ldr	r2, [pc, #204]	; (80198b0 <CoPendSem+0xf8>)
 80197e2:	4413      	add	r3, r2
 80197e4:	60fb      	str	r3, [r7, #12]
#if CFG_PAR_CHECKOUT_EN >0
    if(pecb->eventType != EVENT_TYPE_SEM)     
 80197e6:	68fb      	ldr	r3, [r7, #12]
 80197e8:	795b      	ldrb	r3, [r3, #5]
 80197ea:	f003 030f 	and.w	r3, r3, #15
 80197ee:	b2db      	uxtb	r3, r3
 80197f0:	2b01      	cmp	r3, #1
 80197f2:	d001      	beq.n	80197f8 <CoPendSem+0x40>
    {
       return E_INVALID_ID;	
 80197f4:	2301      	movs	r3, #1
 80197f6:	e055      	b.n	80198a4 <CoPendSem+0xec>
    }
#endif
    if(OSSchedLock != 0)                /* Schdule is locked?                 */
 80197f8:	4b2e      	ldr	r3, [pc, #184]	; (80198b4 <CoPendSem+0xfc>)
 80197fa:	781b      	ldrb	r3, [r3, #0]
 80197fc:	b2db      	uxtb	r3, r3
 80197fe:	2b00      	cmp	r3, #0
 8019800:	d001      	beq.n	8019806 <CoPendSem+0x4e>
    {
        return E_OS_IN_LOCK;            /* Yes,error return                   */
 8019802:	2315      	movs	r3, #21
 8019804:	e04e      	b.n	80198a4 <CoPendSem+0xec>
    }
    OsSchedLock();
 8019806:	4b2b      	ldr	r3, [pc, #172]	; (80198b4 <CoPendSem+0xfc>)
 8019808:	781b      	ldrb	r3, [r3, #0]
 801980a:	b2db      	uxtb	r3, r3
 801980c:	3301      	adds	r3, #1
 801980e:	b2da      	uxtb	r2, r3
 8019810:	4b28      	ldr	r3, [pc, #160]	; (80198b4 <CoPendSem+0xfc>)
 8019812:	701a      	strb	r2, [r3, #0]
    if(pecb->eventCounter > 0) /* If semaphore is positive,resource available */       
 8019814:	68fb      	ldr	r3, [r7, #12]
 8019816:	88db      	ldrh	r3, [r3, #6]
 8019818:	2b00      	cmp	r3, #0
 801981a:	d009      	beq.n	8019830 <CoPendSem+0x78>
    {	
        pecb->eventCounter--;         /* Decrement semaphore only if positive */
 801981c:	68fb      	ldr	r3, [r7, #12]
 801981e:	88db      	ldrh	r3, [r3, #6]
 8019820:	3b01      	subs	r3, #1
 8019822:	b29a      	uxth	r2, r3
 8019824:	68fb      	ldr	r3, [r7, #12]
 8019826:	80da      	strh	r2, [r3, #6]
        OsSchedUnlock();
 8019828:	f7fd fee2 	bl	80175f0 <OsSchedUnlock>
        return E_OK;	
 801982c:	2300      	movs	r3, #0
 801982e:	e039      	b.n	80198a4 <CoPendSem+0xec>
    }
    else                                /* Resource is not available          */
    {
        curTCB = TCBRunning;
 8019830:	4b21      	ldr	r3, [pc, #132]	; (80198b8 <CoPendSem+0x100>)
 8019832:	681b      	ldr	r3, [r3, #0]
 8019834:	60bb      	str	r3, [r7, #8]
        if(timeout == 0)                /* If time-out is not configured      */
 8019836:	683b      	ldr	r3, [r7, #0]
 8019838:	2b00      	cmp	r3, #0
 801983a:	d110      	bne.n	801985e <CoPendSem+0xa6>
        {
            EventTaskToWait(pecb,curTCB); /* Block task until event occurs    */ 
 801983c:	68b9      	ldr	r1, [r7, #8]
 801983e:	68f8      	ldr	r0, [r7, #12]
 8019840:	f7fe f862 	bl	8017908 <EventTaskToWait>
            pecb->eventCounter--;             
 8019844:	68fb      	ldr	r3, [r7, #12]
 8019846:	88db      	ldrh	r3, [r3, #6]
 8019848:	3b01      	subs	r3, #1
 801984a:	b29a      	uxth	r2, r3
 801984c:	68fb      	ldr	r3, [r7, #12]
 801984e:	80da      	strh	r2, [r3, #6]
            curTCB->pmail = Co_NULL;
 8019850:	68bb      	ldr	r3, [r7, #8]
 8019852:	2200      	movs	r2, #0
 8019854:	611a      	str	r2, [r3, #16]
            OsSchedUnlock();
 8019856:	f7fd fecb 	bl	80175f0 <OsSchedUnlock>
            return E_OK;
 801985a:	2300      	movs	r3, #0
 801985c:	e022      	b.n	80198a4 <CoPendSem+0xec>
        }
        else                            /* If time-out is configured          */
        {
            /* Block task until event or timeout occurs                       */
            EventTaskToWait(pecb,curTCB);
 801985e:	68b9      	ldr	r1, [r7, #8]
 8019860:	68f8      	ldr	r0, [r7, #12]
 8019862:	f7fe f851 	bl	8017908 <EventTaskToWait>
            InsertDelayList(curTCB,timeout);
 8019866:	6839      	ldr	r1, [r7, #0]
 8019868:	68b8      	ldr	r0, [r7, #8]
 801986a:	f000 fdcd 	bl	801a408 <InsertDelayList>
            
            OsSchedUnlock();
 801986e:	f7fd febf 	bl	80175f0 <OsSchedUnlock>
            if (curTCB->pmail == Co_NULL)  /* If pmail is Co_NULL, time-out occurred*/
 8019872:	68bb      	ldr	r3, [r7, #8]
 8019874:	691b      	ldr	r3, [r3, #16]
 8019876:	2b00      	cmp	r3, #0
 8019878:	d101      	bne.n	801987e <CoPendSem+0xc6>
            {
              return E_TIMEOUT;	
 801987a:	2305      	movs	r3, #5
 801987c:	e012      	b.n	80198a4 <CoPendSem+0xec>
            }                               
            else                  /* Event occurred or event have been deleted*/    
            {
                OsSchedLock();
 801987e:	4b0d      	ldr	r3, [pc, #52]	; (80198b4 <CoPendSem+0xfc>)
 8019880:	781b      	ldrb	r3, [r3, #0]
 8019882:	b2db      	uxtb	r3, r3
 8019884:	3301      	adds	r3, #1
 8019886:	b2da      	uxtb	r2, r3
 8019888:	4b0a      	ldr	r3, [pc, #40]	; (80198b4 <CoPendSem+0xfc>)
 801988a:	701a      	strb	r2, [r3, #0]
                curTCB->pmail = Co_NULL;
 801988c:	68bb      	ldr	r3, [r7, #8]
 801988e:	2200      	movs	r2, #0
 8019890:	611a      	str	r2, [r3, #16]
                pecb->eventCounter--; 
 8019892:	68fb      	ldr	r3, [r7, #12]
 8019894:	88db      	ldrh	r3, [r3, #6]
 8019896:	3b01      	subs	r3, #1
 8019898:	b29a      	uxth	r2, r3
 801989a:	68fb      	ldr	r3, [r7, #12]
 801989c:	80da      	strh	r2, [r3, #6]
                OsSchedUnlock();
 801989e:	f7fd fea7 	bl	80175f0 <OsSchedUnlock>
                return E_OK;	
 80198a2:	2300      	movs	r3, #0
            }				
        }		
    }
}
 80198a4:	4618      	mov	r0, r3
 80198a6:	3710      	adds	r7, #16
 80198a8:	46bd      	mov	sp, r7
 80198aa:	bd80      	pop	{r7, pc}
 80198ac:	20003748 	.word	0x20003748
 80198b0:	2000374c 	.word	0x2000374c
 80198b4:	20003749 	.word	0x20003749
 80198b8:	2000d728 	.word	0x2000d728

080198bc <CoPostSem>:
 *
 * @note 
 *******************************************************************************
 */
StatusType CoPostSem(OS_EventID id)
{
 80198bc:	b580      	push	{r7, lr}
 80198be:	b084      	sub	sp, #16
 80198c0:	af00      	add	r7, sp, #0
 80198c2:	4603      	mov	r3, r0
 80198c4:	71fb      	strb	r3, [r7, #7]
    P_ECB pecb;
#if CFG_PAR_CHECKOUT_EN >0
    if(id >= CFG_MAX_EVENT)	                  
 80198c6:	79fb      	ldrb	r3, [r7, #7]
 80198c8:	2b13      	cmp	r3, #19
 80198ca:	d901      	bls.n	80198d0 <CoPostSem+0x14>
    {
        return E_INVALID_ID;
 80198cc:	2301      	movs	r3, #1
 80198ce:	e028      	b.n	8019922 <CoPostSem+0x66>
    }
#endif

    pecb = &EventTbl[id];
 80198d0:	79fb      	ldrb	r3, [r7, #7]
 80198d2:	011b      	lsls	r3, r3, #4
 80198d4:	4a15      	ldr	r2, [pc, #84]	; (801992c <CoPostSem+0x70>)
 80198d6:	4413      	add	r3, r2
 80198d8:	60fb      	str	r3, [r7, #12]
#if CFG_PAR_CHECKOUT_EN >0
    if(pecb->eventType != EVENT_TYPE_SEM) /* Invalid event control block type */
 80198da:	68fb      	ldr	r3, [r7, #12]
 80198dc:	795b      	ldrb	r3, [r3, #5]
 80198de:	f003 030f 	and.w	r3, r3, #15
 80198e2:	b2db      	uxtb	r3, r3
 80198e4:	2b01      	cmp	r3, #1
 80198e6:	d001      	beq.n	80198ec <CoPostSem+0x30>
    {
        return E_INVALID_ID;	
 80198e8:	2301      	movs	r3, #1
 80198ea:	e01a      	b.n	8019922 <CoPostSem+0x66>
    }
#endif

    /* Make sure semaphore will not overflow */
    if(pecb->eventCounter == pecb->initialEventCounter) 
 80198ec:	68fb      	ldr	r3, [r7, #12]
 80198ee:	88da      	ldrh	r2, [r3, #6]
 80198f0:	68fb      	ldr	r3, [r7, #12]
 80198f2:	891b      	ldrh	r3, [r3, #8]
 80198f4:	429a      	cmp	r2, r3
 80198f6:	d101      	bne.n	80198fc <CoPostSem+0x40>
    {
        return E_SEM_FULL;    /* The counter of Semaphore reach the max number*/
 80198f8:	2306      	movs	r3, #6
 80198fa:	e012      	b.n	8019922 <CoPostSem+0x66>
    }
    OsSchedLock();
 80198fc:	4b0c      	ldr	r3, [pc, #48]	; (8019930 <CoPostSem+0x74>)
 80198fe:	781b      	ldrb	r3, [r3, #0]
 8019900:	b2db      	uxtb	r3, r3
 8019902:	3301      	adds	r3, #1
 8019904:	b2da      	uxtb	r2, r3
 8019906:	4b0a      	ldr	r3, [pc, #40]	; (8019930 <CoPostSem+0x74>)
 8019908:	701a      	strb	r2, [r3, #0]
    pecb->eventCounter++;     /* Increment semaphore count to register event  */
 801990a:	68fb      	ldr	r3, [r7, #12]
 801990c:	88db      	ldrh	r3, [r3, #6]
 801990e:	3301      	adds	r3, #1
 8019910:	b29a      	uxth	r2, r3
 8019912:	68fb      	ldr	r3, [r7, #12]
 8019914:	80da      	strh	r2, [r3, #6]
    EventTaskToRdy(pecb);     /* Check semaphore event waiting list           */
 8019916:	68f8      	ldr	r0, [r7, #12]
 8019918:	f7fe f876 	bl	8017a08 <EventTaskToRdy>
    OsSchedUnlock();
 801991c:	f7fd fe68 	bl	80175f0 <OsSchedUnlock>
    return E_OK;
 8019920:	2300      	movs	r3, #0
		
}
 8019922:	4618      	mov	r0, r3
 8019924:	3710      	adds	r7, #16
 8019926:	46bd      	mov	sp, r7
 8019928:	bd80      	pop	{r7, pc}
 801992a:	bf00      	nop
 801992c:	2000374c 	.word	0x2000374c
 8019930:	20003749 	.word	0x20003749

08019934 <isr_PostSem>:
 * @note 
 *******************************************************************************
 */
#if CFG_MAX_SERVICE_REQUEST > 0
StatusType isr_PostSem(OS_EventID id)
{
 8019934:	b580      	push	{r7, lr}
 8019936:	b082      	sub	sp, #8
 8019938:	af00      	add	r7, sp, #0
 801993a:	4603      	mov	r3, r0
 801993c:	71fb      	strb	r3, [r7, #7]
    if(OSSchedLock > 0)         /* If scheduler is locked,(the caller is ISR) */      
 801993e:	4b0d      	ldr	r3, [pc, #52]	; (8019974 <isr_PostSem+0x40>)
 8019940:	781b      	ldrb	r3, [r3, #0]
 8019942:	b2db      	uxtb	r3, r3
 8019944:	2b00      	cmp	r3, #0
 8019946:	d00c      	beq.n	8019962 <isr_PostSem+0x2e>
    {
        /* Initiate a post service handling request */
        if(InsertInSRQ(SEM_REQ,id,Co_NULL) == Co_FALSE)
 8019948:	79fb      	ldrb	r3, [r7, #7]
 801994a:	2200      	movs	r2, #0
 801994c:	4619      	mov	r1, r3
 801994e:	2001      	movs	r0, #1
 8019950:	f000 f812 	bl	8019978 <InsertInSRQ>
 8019954:	4603      	mov	r3, r0
 8019956:	2b00      	cmp	r3, #0
 8019958:	d101      	bne.n	801995e <isr_PostSem+0x2a>
        {
            return E_SEV_REQ_FULL;        /* If service request queue is full */
 801995a:	2312      	movs	r3, #18
 801995c:	e006      	b.n	801996c <isr_PostSem+0x38>
        }			
        else                              /* Operate successfully             */
        {
            return E_OK;                        
 801995e:	2300      	movs	r3, #0
 8019960:	e004      	b.n	801996c <isr_PostSem+0x38>
        }
    }
    else
    {
        return(CoPostSem(id));            /* Post semaphore                   */
 8019962:	79fb      	ldrb	r3, [r7, #7]
 8019964:	4618      	mov	r0, r3
 8019966:	f7ff ffa9 	bl	80198bc <CoPostSem>
 801996a:	4603      	mov	r3, r0
    }
}
 801996c:	4618      	mov	r0, r3
 801996e:	3708      	adds	r7, #8
 8019970:	46bd      	mov	sp, r7
 8019972:	bd80      	pop	{r7, pc}
 8019974:	20003749 	.word	0x20003749

08019978 <InsertInSRQ>:
 * @note 
 *******************************************************************************
 */
#if (CFG_MAX_SERVICE_REQUEST > 0)
BOOL InsertInSRQ(U8 type,U8 id,void* arg)
{
 8019978:	b580      	push	{r7, lr}
 801997a:	b084      	sub	sp, #16
 801997c:	af00      	add	r7, sp, #0
 801997e:	4603      	mov	r3, r0
 8019980:	603a      	str	r2, [r7, #0]
 8019982:	71fb      	strb	r3, [r7, #7]
 8019984:	460b      	mov	r3, r1
 8019986:	71bb      	strb	r3, [r7, #6]
    P_SQC   pcell;
	U8 cnt;
	U8 heed;
    IRQ_DISABLE_SAVE();
 8019988:	f7ff fbc0 	bl	801910c <IRQ_DISABLE_SAVE>
    if (ServiceReq.cnt >= CFG_MAX_SERVICE_REQUEST)
 801998c:	4b1a      	ldr	r3, [pc, #104]	; (80199f8 <InsertInSRQ+0x80>)
 801998e:	781b      	ldrb	r3, [r3, #0]
 8019990:	2b04      	cmp	r3, #4
 8019992:	d903      	bls.n	801999c <InsertInSRQ+0x24>
    {
        IRQ_ENABLE_RESTORE ();
 8019994:	f7ff fbb2 	bl	80190fc <IRQ_ENABLE_RESTORE>

        return Co_FALSE;                   /* Error return                       */
 8019998:	2300      	movs	r3, #0
 801999a:	e028      	b.n	80199ee <InsertInSRQ+0x76>
    }
	cnt = Inc8(&ServiceReq.cnt);
 801999c:	4816      	ldr	r0, [pc, #88]	; (80199f8 <InsertInSRQ+0x80>)
 801999e:	f7ff fb7f 	bl	80190a0 <Inc8>
 80199a2:	4603      	mov	r3, r0
 80199a4:	73fb      	strb	r3, [r7, #15]
	heed = ServiceReq.head;
 80199a6:	4b14      	ldr	r3, [pc, #80]	; (80199f8 <InsertInSRQ+0x80>)
 80199a8:	785b      	ldrb	r3, [r3, #1]
 80199aa:	73bb      	strb	r3, [r7, #14]
    IsrReq = Co_TRUE;
 80199ac:	4b13      	ldr	r3, [pc, #76]	; (80199fc <InsertInSRQ+0x84>)
 80199ae:	2201      	movs	r2, #1
 80199b0:	701a      	strb	r2, [r3, #0]
    pcell = &ServiceReq.cell[((cnt+heed)%CFG_MAX_SERVICE_REQUEST)];/*the tail */
 80199b2:	7bfa      	ldrb	r2, [r7, #15]
 80199b4:	7bbb      	ldrb	r3, [r7, #14]
 80199b6:	18d1      	adds	r1, r2, r3
 80199b8:	4b11      	ldr	r3, [pc, #68]	; (8019a00 <InsertInSRQ+0x88>)
 80199ba:	fb83 2301 	smull	r2, r3, r3, r1
 80199be:	105a      	asrs	r2, r3, #1
 80199c0:	17cb      	asrs	r3, r1, #31
 80199c2:	1ad2      	subs	r2, r2, r3
 80199c4:	4613      	mov	r3, r2
 80199c6:	009b      	lsls	r3, r3, #2
 80199c8:	4413      	add	r3, r2
 80199ca:	1aca      	subs	r2, r1, r3
 80199cc:	00d3      	lsls	r3, r2, #3
 80199ce:	4a0a      	ldr	r2, [pc, #40]	; (80199f8 <InsertInSRQ+0x80>)
 80199d0:	4413      	add	r3, r2
 80199d2:	3304      	adds	r3, #4
 80199d4:	60bb      	str	r3, [r7, #8]
    pcell->type = type;                 /* Save service request type,         */
 80199d6:	68bb      	ldr	r3, [r7, #8]
 80199d8:	79fa      	ldrb	r2, [r7, #7]
 80199da:	701a      	strb	r2, [r3, #0]
    pcell->id   = id;                   /* event id                           */
 80199dc:	68bb      	ldr	r3, [r7, #8]
 80199de:	79ba      	ldrb	r2, [r7, #6]
 80199e0:	705a      	strb	r2, [r3, #1]
    pcell->arg  = arg;                  /* and parameter                      */
 80199e2:	68bb      	ldr	r3, [r7, #8]
 80199e4:	683a      	ldr	r2, [r7, #0]
 80199e6:	605a      	str	r2, [r3, #4]
    IRQ_ENABLE_RESTORE ();
 80199e8:	f7ff fb88 	bl	80190fc <IRQ_ENABLE_RESTORE>

    return Co_TRUE;                        /* Return OK                          */
 80199ec:	2301      	movs	r3, #1
}
 80199ee:	4618      	mov	r0, r3
 80199f0:	3710      	adds	r7, #16
 80199f2:	46bd      	mov	sp, r7
 80199f4:	bd80      	pop	{r7, pc}
 80199f6:	bf00      	nop
 80199f8:	2000d568 	.word	0x2000d568
 80199fc:	2000d594 	.word	0x2000d594
 8019a00:	66666667 	.word	0x66666667

08019a04 <RespondSRQ>:
 *             request queue.
 * @note 
 *******************************************************************************
 */
void RespondSRQ(void)
{
 8019a04:	b580      	push	{r7, lr}
 8019a06:	b082      	sub	sp, #8
 8019a08:	af00      	add	r7, sp, #0
    SQC cell;

#endif

#if (CFG_TASK_WAITTING_EN > 0)
    if(TimeReq == Co_TRUE)                 /* Time delay request?                */
 8019a0a:	4b39      	ldr	r3, [pc, #228]	; (8019af0 <RespondSRQ+0xec>)
 8019a0c:	781b      	ldrb	r3, [r3, #0]
 8019a0e:	2b01      	cmp	r3, #1
 8019a10:	d104      	bne.n	8019a1c <RespondSRQ+0x18>
    {
        TimeDispose();                  /* Yes,call handler                   */
 8019a12:	f000 fea5 	bl	801a760 <TimeDispose>
        TimeReq = Co_FALSE;                /* Reset time delay request Co_FALSE     */
 8019a16:	4b36      	ldr	r3, [pc, #216]	; (8019af0 <RespondSRQ+0xec>)
 8019a18:	2200      	movs	r2, #0
 8019a1a:	701a      	strb	r2, [r3, #0]
    }
#endif
#if CFG_TMR_EN  > 0
    if(TimerReq == Co_TRUE)                /* Timer request?                     */
 8019a1c:	4b35      	ldr	r3, [pc, #212]	; (8019af4 <RespondSRQ+0xf0>)
 8019a1e:	781b      	ldrb	r3, [r3, #0]
 8019a20:	2b01      	cmp	r3, #1
 8019a22:	d152      	bne.n	8019aca <RespondSRQ+0xc6>
    {
        TmrDispose();                   /* Yes,call handler                   */
 8019a24:	f001 fa0c 	bl	801ae40 <TmrDispose>
        TimerReq = Co_FALSE;               /* Reset timer request Co_FALSE          */
 8019a28:	4b32      	ldr	r3, [pc, #200]	; (8019af4 <RespondSRQ+0xf0>)
 8019a2a:	2200      	movs	r2, #0
 8019a2c:	701a      	strb	r2, [r3, #0]
    }
#endif

#if CFG_MAX_SERVICE_REQUEST > 0

    while (ServiceReq.cnt != 0)
 8019a2e:	e04c      	b.n	8019aca <RespondSRQ+0xc6>
    {
        IRQ_DISABLE_SAVE ();            /* need to protect the following      */
 8019a30:	f7ff fb6c 	bl	801910c <IRQ_DISABLE_SAVE>
        cell = ServiceReq.cell[ServiceReq.head];  /* extract one cell         */
 8019a34:	4b30      	ldr	r3, [pc, #192]	; (8019af8 <RespondSRQ+0xf4>)
 8019a36:	785b      	ldrb	r3, [r3, #1]
 8019a38:	4a2f      	ldr	r2, [pc, #188]	; (8019af8 <RespondSRQ+0xf4>)
 8019a3a:	00db      	lsls	r3, r3, #3
 8019a3c:	4413      	add	r3, r2
 8019a3e:	463a      	mov	r2, r7
 8019a40:	3304      	adds	r3, #4
 8019a42:	e893 0003 	ldmia.w	r3, {r0, r1}
 8019a46:	e882 0003 	stmia.w	r2, {r0, r1}
        ServiceReq.head = (ServiceReq.head + 1) % /* move head (pop)          */
 8019a4a:	4b2b      	ldr	r3, [pc, #172]	; (8019af8 <RespondSRQ+0xf4>)
 8019a4c:	785b      	ldrb	r3, [r3, #1]
 8019a4e:	1c5a      	adds	r2, r3, #1
 8019a50:	4b2a      	ldr	r3, [pc, #168]	; (8019afc <RespondSRQ+0xf8>)
 8019a52:	fb83 1302 	smull	r1, r3, r3, r2
 8019a56:	1059      	asrs	r1, r3, #1
 8019a58:	17d3      	asrs	r3, r2, #31
 8019a5a:	1ac9      	subs	r1, r1, r3
 8019a5c:	460b      	mov	r3, r1
 8019a5e:	009b      	lsls	r3, r3, #2
 8019a60:	440b      	add	r3, r1
 8019a62:	1ad1      	subs	r1, r2, r3
 8019a64:	b2ca      	uxtb	r2, r1
 8019a66:	4b24      	ldr	r3, [pc, #144]	; (8019af8 <RespondSRQ+0xf4>)
 8019a68:	705a      	strb	r2, [r3, #1]
                     CFG_MAX_SERVICE_REQUEST;
        ServiceReq.cnt--;
 8019a6a:	4b23      	ldr	r3, [pc, #140]	; (8019af8 <RespondSRQ+0xf4>)
 8019a6c:	781b      	ldrb	r3, [r3, #0]
 8019a6e:	3b01      	subs	r3, #1
 8019a70:	b2da      	uxtb	r2, r3
 8019a72:	4b21      	ldr	r3, [pc, #132]	; (8019af8 <RespondSRQ+0xf4>)
 8019a74:	701a      	strb	r2, [r3, #0]
        IRQ_ENABLE_RESTORE ();          /* now use the cell copy              */
 8019a76:	f7ff fb41 	bl	80190fc <IRQ_ENABLE_RESTORE>

        switch(cell.type)               /* Judge service request type         */
 8019a7a:	783b      	ldrb	r3, [r7, #0]
 8019a7c:	3b01      	subs	r3, #1
 8019a7e:	2b03      	cmp	r3, #3
 8019a80:	d822      	bhi.n	8019ac8 <RespondSRQ+0xc4>
 8019a82:	a201      	add	r2, pc, #4	; (adr r2, 8019a88 <RespondSRQ+0x84>)
 8019a84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019a88:	08019a99 	.word	0x08019a99
 8019a8c:	08019aa3 	.word	0x08019aa3
 8019a90:	08019ab1 	.word	0x08019ab1
 8019a94:	08019abb 	.word	0x08019abb
        {
#if CFG_SEM_EN > 0
        case SEM_REQ:                   /* Semaphore post request,call handler*/
            CoPostSem(cell.id);
 8019a98:	787b      	ldrb	r3, [r7, #1]
 8019a9a:	4618      	mov	r0, r3
 8019a9c:	f7ff ff0e 	bl	80198bc <CoPostSem>
            break;
 8019aa0:	e013      	b.n	8019aca <RespondSRQ+0xc6>
#endif
#if CFG_MAILBOX_EN > 0
        case MBOX_REQ:                  /* Mailbox post request,call handler  */
            CoPostMail(cell.id, cell.arg);
 8019aa2:	787b      	ldrb	r3, [r7, #1]
 8019aa4:	687a      	ldr	r2, [r7, #4]
 8019aa6:	4611      	mov	r1, r2
 8019aa8:	4618      	mov	r0, r3
 8019aaa:	f7ff f88f 	bl	8018bcc <CoPostMail>
            break;
 8019aae:	e00c      	b.n	8019aca <RespondSRQ+0xc6>
#endif
#if CFG_FLAG_EN > 0
        case FLAG_REQ:                  /* Flag set request,call handler      */
            CoSetFlag(cell.id);
 8019ab0:	787b      	ldrb	r3, [r7, #1]
 8019ab2:	4618      	mov	r0, r3
 8019ab4:	f7fe fb96 	bl	80181e4 <CoSetFlag>
            break;
 8019ab8:	e007      	b.n	8019aca <RespondSRQ+0xc6>
#endif
#if CFG_QUEUE_EN > 0
        case QUEUE_REQ:                 /* Queue post request,call handler    */
            CoPostQueueMail(cell.id, cell.arg);
 8019aba:	787b      	ldrb	r3, [r7, #1]
 8019abc:	687a      	ldr	r2, [r7, #4]
 8019abe:	4611      	mov	r1, r2
 8019ac0:	4618      	mov	r0, r3
 8019ac2:	f7ff fd71 	bl	80195a8 <CoPostQueueMail>
            break;
 8019ac6:	e000      	b.n	8019aca <RespondSRQ+0xc6>
#endif
        default:                        /* Others,break                       */
            break;
 8019ac8:	bf00      	nop
    while (ServiceReq.cnt != 0)
 8019aca:	4b0b      	ldr	r3, [pc, #44]	; (8019af8 <RespondSRQ+0xf4>)
 8019acc:	781b      	ldrb	r3, [r3, #0]
 8019ace:	2b00      	cmp	r3, #0
 8019ad0:	d1ae      	bne.n	8019a30 <RespondSRQ+0x2c>
        }
    }
#endif
    IRQ_DISABLE_SAVE ();                /* need to protect the following      */
 8019ad2:	f7ff fb1b 	bl	801910c <IRQ_DISABLE_SAVE>

    if (ServiceReq.cnt == 0)            /* another item in the queue already? */
 8019ad6:	4b08      	ldr	r3, [pc, #32]	; (8019af8 <RespondSRQ+0xf4>)
 8019ad8:	781b      	ldrb	r3, [r3, #0]
 8019ada:	2b00      	cmp	r3, #0
 8019adc:	d102      	bne.n	8019ae4 <RespondSRQ+0xe0>
    {
        IsrReq = Co_FALSE;                 /* queue still empty here             */
 8019ade:	4b08      	ldr	r3, [pc, #32]	; (8019b00 <RespondSRQ+0xfc>)
 8019ae0:	2200      	movs	r2, #0
 8019ae2:	701a      	strb	r2, [r3, #0]
    }
    IRQ_ENABLE_RESTORE ();              /* now it is done and return          */
 8019ae4:	f7ff fb0a 	bl	80190fc <IRQ_ENABLE_RESTORE>
}
 8019ae8:	bf00      	nop
 8019aea:	3708      	adds	r7, #8
 8019aec:	46bd      	mov	sp, r7
 8019aee:	bd80      	pop	{r7, pc}
 8019af0:	2000d595 	.word	0x2000d595
 8019af4:	2000d596 	.word	0x2000d596
 8019af8:	2000d568 	.word	0x2000d568
 8019afc:	66666667 	.word	0x66666667
 8019b00:	2000d594 	.word	0x2000d594

08019b04 <CreateTCBList>:
 * @details    This function is called by CoOSInit() to initial the empty list	 
 *             of OS_TCBS,supply a pointer to free TCB.
 *******************************************************************************
 */
void CreateTCBList(void)
{	
 8019b04:	b480      	push	{r7}
 8019b06:	b085      	sub	sp, #20
 8019b08:	af00      	add	r7, sp, #0
    
#if CFG_ORDER_LIST_SCHEDULE_EN ==0
	PriNum = 0;
#endif

	ptcb1 = &TCBTbl[0];	                /* Build the free TCB list            */
 8019b0a:	4b15      	ldr	r3, [pc, #84]	; (8019b60 <CreateTCBList+0x5c>)
 8019b0c:	60bb      	str	r3, [r7, #8]
    ptcb2 = &TCBTbl[1];  
 8019b0e:	4b15      	ldr	r3, [pc, #84]	; (8019b64 <CreateTCBList+0x60>)
 8019b10:	607b      	str	r3, [r7, #4]
    for(i=0;i< (CFG_MAX_USER_TASKS+SYS_TASK_NUM-1);i++ )
 8019b12:	2300      	movs	r3, #0
 8019b14:	73fb      	strb	r3, [r7, #15]
 8019b16:	e011      	b.n	8019b3c <CreateTCBList+0x38>
    {
		ptcb1->taskID    = i;
 8019b18:	68bb      	ldr	r3, [r7, #8]
 8019b1a:	7bfa      	ldrb	r2, [r7, #15]
 8019b1c:	719a      	strb	r2, [r3, #6]
		ptcb1->state     = TASK_DORMANT;
 8019b1e:	68bb      	ldr	r3, [r7, #8]
 8019b20:	2203      	movs	r2, #3
 8019b22:	715a      	strb	r2, [r3, #5]
        ptcb1->TCBnext   = ptcb2;
 8019b24:	68bb      	ldr	r3, [r7, #8]
 8019b26:	687a      	ldr	r2, [r7, #4]
 8019b28:	625a      	str	r2, [r3, #36]	; 0x24
#if CFG_ORDER_LIST_SCHEDULE_EN ==0
		RdyTaskPri[i]    = INVALID_ID;
		ActivePri[i]	 = INVALID_ID;
#endif
        ptcb1++;
 8019b2a:	68bb      	ldr	r3, [r7, #8]
 8019b2c:	3330      	adds	r3, #48	; 0x30
 8019b2e:	60bb      	str	r3, [r7, #8]
        ptcb2++;	
 8019b30:	687b      	ldr	r3, [r7, #4]
 8019b32:	3330      	adds	r3, #48	; 0x30
 8019b34:	607b      	str	r3, [r7, #4]
    for(i=0;i< (CFG_MAX_USER_TASKS+SYS_TASK_NUM-1);i++ )
 8019b36:	7bfb      	ldrb	r3, [r7, #15]
 8019b38:	3301      	adds	r3, #1
 8019b3a:	73fb      	strb	r3, [r7, #15]
 8019b3c:	7bfb      	ldrb	r3, [r7, #15]
 8019b3e:	2b04      	cmp	r3, #4
 8019b40:	d9ea      	bls.n	8019b18 <CreateTCBList+0x14>
    }
#if CFG_ORDER_LIST_SCHEDULE_EN ==0
		ActivePri[i]	 = INVALID_ID;
#endif

	ptcb1->taskID    = i;	
 8019b42:	68bb      	ldr	r3, [r7, #8]
 8019b44:	7bfa      	ldrb	r2, [r7, #15]
 8019b46:	719a      	strb	r2, [r3, #6]
    ptcb1->TCBnext   = Co_NULL;
 8019b48:	68bb      	ldr	r3, [r7, #8]
 8019b4a:	2200      	movs	r2, #0
 8019b4c:	625a      	str	r2, [r3, #36]	; 0x24
    FreeTCB = &TCBTbl[0];         /* Initialize FreeTCB as head item of list  */			
 8019b4e:	4b06      	ldr	r3, [pc, #24]	; (8019b68 <CreateTCBList+0x64>)
 8019b50:	4a03      	ldr	r2, [pc, #12]	; (8019b60 <CreateTCBList+0x5c>)
 8019b52:	601a      	str	r2, [r3, #0]
}
 8019b54:	bf00      	nop
 8019b56:	3714      	adds	r7, #20
 8019b58:	46bd      	mov	sp, r7
 8019b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019b5e:	4770      	bx	lr
 8019b60:	2000d598 	.word	0x2000d598
 8019b64:	2000d5c8 	.word	0x2000d5c8
 8019b68:	2000d71c 	.word	0x2000d71c

08019b6c <InsertToTCBRdyList>:
 * @par Description
 * @details   This function is called to insert a task to the READY list. 
 *******************************************************************************
 */
void InsertToTCBRdyList(P_OSTCB tcbInsert)
{
 8019b6c:	e92d 0890 	stmdb	sp!, {r4, r7, fp}
 8019b70:	b087      	sub	sp, #28
 8019b72:	af00      	add	r7, sp, #0
 8019b74:	6078      	str	r0, [r7, #4]
#if CFG_ORDER_LIST_SCHEDULE_EN ==0
	U8  seqNum;
	U8  RdyTaskSeqNum;
#endif
    
    prio = tcbInsert->prio;             /* Get PRI of inserted task           */
 8019b76:	687b      	ldr	r3, [r7, #4]
 8019b78:	791b      	ldrb	r3, [r3, #4]
 8019b7a:	73fb      	strb	r3, [r7, #15]
    tcbInsert->state     = TASK_READY;  /* Set task as TASK_READY             */
 8019b7c:	687b      	ldr	r3, [r7, #4]
 8019b7e:	2200      	movs	r2, #0
 8019b80:	715a      	strb	r2, [r3, #5]

#if CFG_ROBIN_EN >0
	ptcb = TCBRunning;
 8019b82:	4b37      	ldr	r3, [pc, #220]	; (8019c60 <InsertToTCBRdyList+0xf4>)
 8019b84:	681b      	ldr	r3, [r3, #0]
 8019b86:	613b      	str	r3, [r7, #16]
    /* Set schedule time for the same PRI task as TCBRunning.                 */
    if(prio == ptcb->prio)  /* Is PRI of inserted task equal to running task? */
 8019b88:	693b      	ldr	r3, [r7, #16]
 8019b8a:	791b      	ldrb	r3, [r3, #4]
 8019b8c:	7bfa      	ldrb	r2, [r7, #15]
 8019b8e:	429a      	cmp	r2, r3
 8019b90:	d11f      	bne.n	8019bd2 <InsertToTCBRdyList+0x66>
    {
        if(ptcb != tcbInsert) /* Yes,is inserted task equal to running task?  */
 8019b92:	693a      	ldr	r2, [r7, #16]
 8019b94:	687b      	ldr	r3, [r7, #4]
 8019b96:	429a      	cmp	r2, r3
 8019b98:	d01b      	beq.n	8019bd2 <InsertToTCBRdyList+0x66>
        {
            if(ptcb != Co_NULL)            /* No,TCBRunning == Co_NULL?             */
 8019b9a:	693b      	ldr	r3, [r7, #16]
 8019b9c:	2b00      	cmp	r3, #0
 8019b9e:	d018      	beq.n	8019bd2 <InsertToTCBRdyList+0x66>
            {                           /* N0,OSCheckTime < OSTickCnt?        */
                if(OSCheckTime < OSTickCnt)	 
 8019ba0:	4b30      	ldr	r3, [pc, #192]	; (8019c64 <InsertToTCBRdyList+0xf8>)
 8019ba2:	e9d3 1200 	ldrd	r1, r2, [r3]
 8019ba6:	4b30      	ldr	r3, [pc, #192]	; (8019c68 <InsertToTCBRdyList+0xfc>)
 8019ba8:	e9d3 3400 	ldrd	r3, r4, [r3]
 8019bac:	42a2      	cmp	r2, r4
 8019bae:	bf08      	it	eq
 8019bb0:	4299      	cmpeq	r1, r3
 8019bb2:	d20e      	bcs.n	8019bd2 <InsertToTCBRdyList+0x66>
                {                       /* Yes,set OSCheckTime for task robin */
                    OSCheckTime = OSTickCnt + ptcb->timeSlice;	
 8019bb4:	693b      	ldr	r3, [r7, #16]
 8019bb6:	895b      	ldrh	r3, [r3, #10]
 8019bb8:	b299      	uxth	r1, r3
 8019bba:	f04f 0200 	mov.w	r2, #0
 8019bbe:	4b2a      	ldr	r3, [pc, #168]	; (8019c68 <InsertToTCBRdyList+0xfc>)
 8019bc0:	e9d3 bc00 	ldrd	fp, ip, [r3]
 8019bc4:	eb1b 0301 	adds.w	r3, fp, r1
 8019bc8:	eb4c 0402 	adc.w	r4, ip, r2
 8019bcc:	4a25      	ldr	r2, [pc, #148]	; (8019c64 <InsertToTCBRdyList+0xf8>)
 8019bce:	e9c2 3400 	strd	r3, r4, [r2]
	    ptcbNext->TCBprev  = tcbInsert;
	}


#else
    ptcb = TCBRdy;
 8019bd2:	4b26      	ldr	r3, [pc, #152]	; (8019c6c <InsertToTCBRdyList+0x100>)
 8019bd4:	681b      	ldr	r3, [r3, #0]
 8019bd6:	613b      	str	r3, [r7, #16]
    if (ptcb == Co_NULL)                   /* Is ready list Co_NULL?                */
 8019bd8:	693b      	ldr	r3, [r7, #16]
 8019bda:	2b00      	cmp	r3, #0
 8019bdc:	d106      	bne.n	8019bec <InsertToTCBRdyList+0x80>
    {
        TaskSchedReq = Co_TRUE;
 8019bde:	4b24      	ldr	r3, [pc, #144]	; (8019c70 <InsertToTCBRdyList+0x104>)
 8019be0:	2201      	movs	r2, #1
 8019be2:	701a      	strb	r2, [r3, #0]
        TCBRdy = tcbInsert;         /* Yse,set tcbInsert as head item of list */
 8019be4:	4a21      	ldr	r2, [pc, #132]	; (8019c6c <InsertToTCBRdyList+0x100>)
 8019be6:	687b      	ldr	r3, [r7, #4]
 8019be8:	6013      	str	r3, [r2, #0]
        {
            ptcbNext->TCBprev  = tcbInsert;
        }		
    }
#endif
}
 8019bea:	e033      	b.n	8019c54 <InsertToTCBRdyList+0xe8>
    else if (prio < ptcb->prio)/* Is PRI of inserted task higher than TCBRdy? */
 8019bec:	693b      	ldr	r3, [r7, #16]
 8019bee:	791b      	ldrb	r3, [r3, #4]
 8019bf0:	7bfa      	ldrb	r2, [r7, #15]
 8019bf2:	429a      	cmp	r2, r3
 8019bf4:	d20c      	bcs.n	8019c10 <InsertToTCBRdyList+0xa4>
        TaskSchedReq = Co_TRUE;
 8019bf6:	4b1e      	ldr	r3, [pc, #120]	; (8019c70 <InsertToTCBRdyList+0x104>)
 8019bf8:	2201      	movs	r2, #1
 8019bfa:	701a      	strb	r2, [r3, #0]
        tcbInsert->TCBnext = ptcb;  /* Yes,set tcbInsert as head item of list */
 8019bfc:	687b      	ldr	r3, [r7, #4]
 8019bfe:	693a      	ldr	r2, [r7, #16]
 8019c00:	625a      	str	r2, [r3, #36]	; 0x24
        ptcb->TCBprev  = tcbInsert;
 8019c02:	693b      	ldr	r3, [r7, #16]
 8019c04:	687a      	ldr	r2, [r7, #4]
 8019c06:	629a      	str	r2, [r3, #40]	; 0x28
        TCBRdy         = tcbInsert;
 8019c08:	4a18      	ldr	r2, [pc, #96]	; (8019c6c <InsertToTCBRdyList+0x100>)
 8019c0a:	687b      	ldr	r3, [r7, #4]
 8019c0c:	6013      	str	r3, [r2, #0]
}
 8019c0e:	e021      	b.n	8019c54 <InsertToTCBRdyList+0xe8>
        ptcbNext = ptcb->TCBnext;       /* Get next item                      */
 8019c10:	693b      	ldr	r3, [r7, #16]
 8019c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019c14:	617b      	str	r3, [r7, #20]
        while(ptcbNext != Co_NULL)         /* Is last item in ready list?        */
 8019c16:	e009      	b.n	8019c2c <InsertToTCBRdyList+0xc0>
            if(prio < ptcbNext->prio)   /* Is correct place?                  */
 8019c18:	697b      	ldr	r3, [r7, #20]
 8019c1a:	791b      	ldrb	r3, [r3, #4]
 8019c1c:	7bfa      	ldrb	r2, [r7, #15]
 8019c1e:	429a      	cmp	r2, r3
 8019c20:	d308      	bcc.n	8019c34 <InsertToTCBRdyList+0xc8>
            ptcb     = ptcbNext;        /* Save current item                  */
 8019c22:	697b      	ldr	r3, [r7, #20]
 8019c24:	613b      	str	r3, [r7, #16]
            ptcbNext = ptcbNext->TCBnext; /* Get next item                    */
 8019c26:	697b      	ldr	r3, [r7, #20]
 8019c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019c2a:	617b      	str	r3, [r7, #20]
        while(ptcbNext != Co_NULL)         /* Is last item in ready list?        */
 8019c2c:	697b      	ldr	r3, [r7, #20]
 8019c2e:	2b00      	cmp	r3, #0
 8019c30:	d1f2      	bne.n	8019c18 <InsertToTCBRdyList+0xac>
 8019c32:	e000      	b.n	8019c36 <InsertToTCBRdyList+0xca>
                break;                  /* Yes,break circulation              */
 8019c34:	bf00      	nop
        tcbInsert->TCBnext = ptcbNext;  /* Set link for list                  */
 8019c36:	687b      	ldr	r3, [r7, #4]
 8019c38:	697a      	ldr	r2, [r7, #20]
 8019c3a:	625a      	str	r2, [r3, #36]	; 0x24
        ptcb->TCBnext      = tcbInsert;
 8019c3c:	693b      	ldr	r3, [r7, #16]
 8019c3e:	687a      	ldr	r2, [r7, #4]
 8019c40:	625a      	str	r2, [r3, #36]	; 0x24
        tcbInsert->TCBprev = ptcb;
 8019c42:	687b      	ldr	r3, [r7, #4]
 8019c44:	693a      	ldr	r2, [r7, #16]
 8019c46:	629a      	str	r2, [r3, #40]	; 0x28
        if(ptcbNext != Co_NULL)
 8019c48:	697b      	ldr	r3, [r7, #20]
 8019c4a:	2b00      	cmp	r3, #0
 8019c4c:	d002      	beq.n	8019c54 <InsertToTCBRdyList+0xe8>
            ptcbNext->TCBprev  = tcbInsert;
 8019c4e:	697b      	ldr	r3, [r7, #20]
 8019c50:	687a      	ldr	r2, [r7, #4]
 8019c52:	629a      	str	r2, [r3, #40]	; 0x28
}
 8019c54:	bf00      	nop
 8019c56:	371c      	adds	r7, #28
 8019c58:	46bd      	mov	sp, r7
 8019c5a:	e8bd 0890 	ldmia.w	sp!, {r4, r7, fp}
 8019c5e:	4770      	bx	lr
 8019c60:	2000d728 	.word	0x2000d728
 8019c64:	2000d730 	.word	0x2000d730
 8019c68:	20003740 	.word	0x20003740
 8019c6c:	2000d720 	.word	0x2000d720
 8019c70:	2000374a 	.word	0x2000374a

08019c74 <RemoveFromTCBRdyList>:
 * @par Description
 * @details    This function is called to remove a task from the READY list.
 *******************************************************************************
 */
void RemoveFromTCBRdyList(P_OSTCB ptcb)
{
 8019c74:	b480      	push	{r7}
 8019c76:	b083      	sub	sp, #12
 8019c78:	af00      	add	r7, sp, #0
 8019c7a:	6078      	str	r0, [r7, #4]
	prio = ptcb->prio;
	GetPriSeqNum(prio,&seqNum);
#endif

    /* Is there only one item in READY list?                                  */
    if((ptcb->TCBnext == Co_NULL) && (ptcb->TCBprev == Co_NULL) )
 8019c7c:	687b      	ldr	r3, [r7, #4]
 8019c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019c80:	2b00      	cmp	r3, #0
 8019c82:	d107      	bne.n	8019c94 <RemoveFromTCBRdyList+0x20>
 8019c84:	687b      	ldr	r3, [r7, #4]
 8019c86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019c88:	2b00      	cmp	r3, #0
 8019c8a:	d103      	bne.n	8019c94 <RemoveFromTCBRdyList+0x20>
    {
        TCBRdy = Co_NULL;                  /* Yes,set READY list as Co_NULL         */
 8019c8c:	4b1a      	ldr	r3, [pc, #104]	; (8019cf8 <RemoveFromTCBRdyList+0x84>)
 8019c8e:	2200      	movs	r2, #0
 8019c90:	601a      	str	r2, [r3, #0]
		{
			RdyTaskPri[seqNum] = INVALID_ID;
			SetPrioSeqNumStatus(seqNum, 0);
		}
#endif
}
 8019c92:	e02b      	b.n	8019cec <RemoveFromTCBRdyList+0x78>
    else if(ptcb->TCBprev == Co_NULL)      /* Is the first item in READY list?   */
 8019c94:	687b      	ldr	r3, [r7, #4]
 8019c96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019c98:	2b00      	cmp	r3, #0
 8019c9a:	d10b      	bne.n	8019cb4 <RemoveFromTCBRdyList+0x40>
        TCBRdy = ptcb->TCBnext;		    
 8019c9c:	687b      	ldr	r3, [r7, #4]
 8019c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019ca0:	4a15      	ldr	r2, [pc, #84]	; (8019cf8 <RemoveFromTCBRdyList+0x84>)
 8019ca2:	6013      	str	r3, [r2, #0]
        ptcb->TCBnext   = Co_NULL;
 8019ca4:	687b      	ldr	r3, [r7, #4]
 8019ca6:	2200      	movs	r2, #0
 8019ca8:	625a      	str	r2, [r3, #36]	; 0x24
        TCBRdy->TCBprev = Co_NULL;
 8019caa:	4b13      	ldr	r3, [pc, #76]	; (8019cf8 <RemoveFromTCBRdyList+0x84>)
 8019cac:	681b      	ldr	r3, [r3, #0]
 8019cae:	2200      	movs	r2, #0
 8019cb0:	629a      	str	r2, [r3, #40]	; 0x28
}
 8019cb2:	e01b      	b.n	8019cec <RemoveFromTCBRdyList+0x78>
    else if( ptcb->TCBnext == Co_NULL)     /* Is the last item in READY list?    */
 8019cb4:	687b      	ldr	r3, [r7, #4]
 8019cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019cb8:	2b00      	cmp	r3, #0
 8019cba:	d107      	bne.n	8019ccc <RemoveFromTCBRdyList+0x58>
        ptcb->TCBprev->TCBnext = Co_NULL;
 8019cbc:	687b      	ldr	r3, [r7, #4]
 8019cbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019cc0:	2200      	movs	r2, #0
 8019cc2:	625a      	str	r2, [r3, #36]	; 0x24
        ptcb->TCBprev          = Co_NULL;
 8019cc4:	687b      	ldr	r3, [r7, #4]
 8019cc6:	2200      	movs	r2, #0
 8019cc8:	629a      	str	r2, [r3, #40]	; 0x28
}
 8019cca:	e00f      	b.n	8019cec <RemoveFromTCBRdyList+0x78>
        ptcb->TCBprev->TCBnext = ptcb->TCBnext;
 8019ccc:	687b      	ldr	r3, [r7, #4]
 8019cce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019cd0:	687a      	ldr	r2, [r7, #4]
 8019cd2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8019cd4:	625a      	str	r2, [r3, #36]	; 0x24
        ptcb->TCBnext->TCBprev = ptcb->TCBprev;
 8019cd6:	687b      	ldr	r3, [r7, #4]
 8019cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019cda:	687a      	ldr	r2, [r7, #4]
 8019cdc:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8019cde:	629a      	str	r2, [r3, #40]	; 0x28
        ptcb->TCBnext = Co_NULL;
 8019ce0:	687b      	ldr	r3, [r7, #4]
 8019ce2:	2200      	movs	r2, #0
 8019ce4:	625a      	str	r2, [r3, #36]	; 0x24
        ptcb->TCBprev = Co_NULL;
 8019ce6:	687b      	ldr	r3, [r7, #4]
 8019ce8:	2200      	movs	r2, #0
 8019cea:	629a      	str	r2, [r3, #40]	; 0x28
}
 8019cec:	bf00      	nop
 8019cee:	370c      	adds	r7, #12
 8019cf0:	46bd      	mov	sp, r7
 8019cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019cf6:	4770      	bx	lr
 8019cf8:	2000d720 	.word	0x2000d720

08019cfc <CoSetPriority>:
 * @par Description
 * @details    This function is called to change priority for a specify task. 	
 *******************************************************************************
 */
StatusType CoSetPriority(OS_TID taskID,U8 priority)
{			
 8019cfc:	b580      	push	{r7, lr}
 8019cfe:	b086      	sub	sp, #24
 8019d00:	af00      	add	r7, sp, #0
 8019d02:	4603      	mov	r3, r0
 8019d04:	460a      	mov	r2, r1
 8019d06:	71fb      	strb	r3, [r7, #7]
 8019d08:	4613      	mov	r3, r2
 8019d0a:	71bb      	strb	r3, [r7, #6]
#endif
#if CFG_EVENT_EN >0
    P_ECB pecb;
#endif

    if(taskID == 0)                     /* Is idle task?                      */
 8019d0c:	79fb      	ldrb	r3, [r7, #7]
 8019d0e:	2b00      	cmp	r3, #0
 8019d10:	d101      	bne.n	8019d16 <CoSetPriority+0x1a>
    {											 
        return E_PROTECTED_TASK;        /* Yes,error return                   */
 8019d12:	2314      	movs	r3, #20
 8019d14:	e0c3      	b.n	8019e9e <CoSetPriority+0x1a2>
    }   
	
#if CFG_PAR_CHECKOUT_EN >0              /* Check validity of parameter        */
    if(taskID >= CFG_MAX_USER_TASKS + SYS_TASK_NUM)
 8019d16:	79fb      	ldrb	r3, [r7, #7]
 8019d18:	2b05      	cmp	r3, #5
 8019d1a:	d901      	bls.n	8019d20 <CoSetPriority+0x24>
    {
        return E_INVALID_ID;
 8019d1c:	2301      	movs	r3, #1
 8019d1e:	e0be      	b.n	8019e9e <CoSetPriority+0x1a2>
    }
#endif
	ptcb = &TCBTbl[taskID];             /* Get TCB of task ID                 */
 8019d20:	79fa      	ldrb	r2, [r7, #7]
 8019d22:	4613      	mov	r3, r2
 8019d24:	005b      	lsls	r3, r3, #1
 8019d26:	4413      	add	r3, r2
 8019d28:	011b      	lsls	r3, r3, #4
 8019d2a:	4a5f      	ldr	r2, [pc, #380]	; (8019ea8 <CoSetPriority+0x1ac>)
 8019d2c:	4413      	add	r3, r2
 8019d2e:	617b      	str	r3, [r7, #20]
#if CFG_PAR_CHECKOUT_EN >0    
    if(ptcb->state == TASK_DORMANT)
 8019d30:	697b      	ldr	r3, [r7, #20]
 8019d32:	795b      	ldrb	r3, [r3, #5]
 8019d34:	2b03      	cmp	r3, #3
 8019d36:	d101      	bne.n	8019d3c <CoSetPriority+0x40>
    {
        return E_INVALID_ID;
 8019d38:	2301      	movs	r3, #1
 8019d3a:	e0b0      	b.n	8019e9e <CoSetPriority+0x1a2>
    }
    if(priority > CFG_LOWEST_PRIO)
 8019d3c:	79bb      	ldrb	r3, [r7, #6]
 8019d3e:	2b40      	cmp	r3, #64	; 0x40
 8019d40:	d901      	bls.n	8019d46 <CoSetPriority+0x4a>
    {
        return E_INVALID_ID;
 8019d42:	2301      	movs	r3, #1
 8019d44:	e0ab      	b.n	8019e9e <CoSetPriority+0x1a2>
    }
#endif

    if(ptcb->prio != priority)          /* Is PRI equal to original PRI?      */
 8019d46:	697b      	ldr	r3, [r7, #20]
 8019d48:	791b      	ldrb	r3, [r3, #4]
 8019d4a:	79ba      	ldrb	r2, [r7, #6]
 8019d4c:	429a      	cmp	r2, r3
 8019d4e:	f000 80a5 	beq.w	8019e9c <CoSetPriority+0x1a0>
    {                                   /* No                                 */
#if CFG_MUTEX_EN >0
        if(ptcb->mutexID != INVALID_ID)
 8019d52:	697b      	ldr	r3, [r7, #20]
 8019d54:	79db      	ldrb	r3, [r3, #7]
 8019d56:	2bff      	cmp	r3, #255	; 0xff
 8019d58:	d015      	beq.n	8019d86 <CoSetPriority+0x8a>
        {
            pMutex = &MutexTbl[ptcb->mutexID];
 8019d5a:	697b      	ldr	r3, [r7, #20]
 8019d5c:	79db      	ldrb	r3, [r3, #7]
 8019d5e:	00db      	lsls	r3, r3, #3
 8019d60:	4a52      	ldr	r2, [pc, #328]	; (8019eac <CoSetPriority+0x1b0>)
 8019d62:	4413      	add	r3, r2
 8019d64:	60fb      	str	r3, [r7, #12]
            if(pMutex->taskID == ptcb->taskID)  /* Task hold mutex?               */
 8019d66:	68fb      	ldr	r3, [r7, #12]
 8019d68:	789a      	ldrb	r2, [r3, #2]
 8019d6a:	697b      	ldr	r3, [r7, #20]
 8019d6c:	799b      	ldrb	r3, [r3, #6]
 8019d6e:	429a      	cmp	r2, r3
 8019d70:	d109      	bne.n	8019d86 <CoSetPriority+0x8a>
            {
                 pMutex->originalPrio= priority;/* Yes,change original PRI in mutex*/
 8019d72:	68fb      	ldr	r3, [r7, #12]
 8019d74:	79ba      	ldrb	r2, [r7, #6]
 8019d76:	701a      	strb	r2, [r3, #0]
                 if(ptcb->prio < priority)     /* Is task priority higher than set?*/
 8019d78:	697b      	ldr	r3, [r7, #20]
 8019d7a:	791b      	ldrb	r3, [r3, #4]
 8019d7c:	79ba      	ldrb	r2, [r7, #6]
 8019d7e:	429a      	cmp	r2, r3
 8019d80:	d901      	bls.n	8019d86 <CoSetPriority+0x8a>
                 {
                     return E_OK;                /* Yes,do nothing,return OK       */
 8019d82:	2300      	movs	r3, #0
 8019d84:	e08b      	b.n	8019e9e <CoSetPriority+0x1a2>
#if CFG_ORDER_LIST_SCHEDULE_EN ==0
		DeleteTaskPri(ptcb->prio);
		ActiveTaskPri(priority);	
#endif	

        ptcb->prio = priority;              /* Change task PRI                */
 8019d86:	697b      	ldr	r3, [r7, #20]
 8019d88:	79ba      	ldrb	r2, [r7, #6]
 8019d8a:	711a      	strb	r2, [r3, #4]
        if(ptcb->state == TASK_READY)       /* Is task in READY list?         */
 8019d8c:	697b      	ldr	r3, [r7, #20]
 8019d8e:	795b      	ldrb	r3, [r3, #5]
 8019d90:	2b00      	cmp	r3, #0
 8019d92:	d10f      	bne.n	8019db4 <CoSetPriority+0xb8>
        {
            OsSchedLock();                  /* Yes,reorder task in READY list */
 8019d94:	4b46      	ldr	r3, [pc, #280]	; (8019eb0 <CoSetPriority+0x1b4>)
 8019d96:	781b      	ldrb	r3, [r3, #0]
 8019d98:	b2db      	uxtb	r3, r3
 8019d9a:	3301      	adds	r3, #1
 8019d9c:	b2da      	uxtb	r2, r3
 8019d9e:	4b44      	ldr	r3, [pc, #272]	; (8019eb0 <CoSetPriority+0x1b4>)
 8019da0:	701a      	strb	r2, [r3, #0]
            RemoveFromTCBRdyList(ptcb);
 8019da2:	6978      	ldr	r0, [r7, #20]
 8019da4:	f7ff ff66 	bl	8019c74 <RemoveFromTCBRdyList>
            InsertToTCBRdyList(ptcb);	
 8019da8:	6978      	ldr	r0, [r7, #20]
 8019daa:	f7ff fedf 	bl	8019b6c <InsertToTCBRdyList>
            OsSchedUnlock();
 8019dae:	f7fd fc1f 	bl	80175f0 <OsSchedUnlock>
 8019db2:	e073      	b.n	8019e9c <CoSetPriority+0x1a0>
        }
        else if(ptcb->state == TASK_RUNNING)/* Is task running?               */
 8019db4:	697b      	ldr	r3, [r7, #20]
 8019db6:	795b      	ldrb	r3, [r3, #5]
 8019db8:	2b01      	cmp	r3, #1
 8019dba:	d113      	bne.n	8019de4 <CoSetPriority+0xe8>
        {
            if(ptcb->prio > TCBRdy->prio)   /* Yes,Is PRI higher than TCBRdy? */
 8019dbc:	697b      	ldr	r3, [r7, #20]
 8019dbe:	791a      	ldrb	r2, [r3, #4]
 8019dc0:	4b3c      	ldr	r3, [pc, #240]	; (8019eb4 <CoSetPriority+0x1b8>)
 8019dc2:	681b      	ldr	r3, [r3, #0]
 8019dc4:	791b      	ldrb	r3, [r3, #4]
 8019dc6:	429a      	cmp	r2, r3
 8019dc8:	d968      	bls.n	8019e9c <CoSetPriority+0x1a0>
            {
				OsSchedLock();              /* Yes,reorder task in READY list */
 8019dca:	4b39      	ldr	r3, [pc, #228]	; (8019eb0 <CoSetPriority+0x1b4>)
 8019dcc:	781b      	ldrb	r3, [r3, #0]
 8019dce:	b2db      	uxtb	r3, r3
 8019dd0:	3301      	adds	r3, #1
 8019dd2:	b2da      	uxtb	r2, r3
 8019dd4:	4b36      	ldr	r3, [pc, #216]	; (8019eb0 <CoSetPriority+0x1b4>)
 8019dd6:	701a      	strb	r2, [r3, #0]
				TaskSchedReq = Co_TRUE;
 8019dd8:	4b37      	ldr	r3, [pc, #220]	; (8019eb8 <CoSetPriority+0x1bc>)
 8019dda:	2201      	movs	r2, #1
 8019ddc:	701a      	strb	r2, [r3, #0]
                OsSchedUnlock();
 8019dde:	f7fd fc07 	bl	80175f0 <OsSchedUnlock>
 8019de2:	e05b      	b.n	8019e9c <CoSetPriority+0x1a0>
            }
        }
        else
        {                                   /* No,task in WAITING list        */
#if CFG_MUTEX_EN >0
            if(ptcb->mutexID != INVALID_ID) /* Is task in mutex WAITING list? */
 8019de4:	697b      	ldr	r3, [r7, #20]
 8019de6:	79db      	ldrb	r3, [r3, #7]
 8019de8:	2bff      	cmp	r3, #255	; 0xff
 8019dea:	d037      	beq.n	8019e5c <CoSetPriority+0x160>
            {
                /* Yes,reset the highest PRI in the list */
				OsSchedLock(); 
 8019dec:	4b30      	ldr	r3, [pc, #192]	; (8019eb0 <CoSetPriority+0x1b4>)
 8019dee:	781b      	ldrb	r3, [r3, #0]
 8019df0:	b2db      	uxtb	r3, r3
 8019df2:	3301      	adds	r3, #1
 8019df4:	b2da      	uxtb	r2, r3
 8019df6:	4b2e      	ldr	r3, [pc, #184]	; (8019eb0 <CoSetPriority+0x1b4>)
 8019df8:	701a      	strb	r2, [r3, #0]
				pMutex = &MutexTbl[ptcb->mutexID];
 8019dfa:	697b      	ldr	r3, [r7, #20]
 8019dfc:	79db      	ldrb	r3, [r3, #7]
 8019dfe:	00db      	lsls	r3, r3, #3
 8019e00:	4a2a      	ldr	r2, [pc, #168]	; (8019eac <CoSetPriority+0x1b0>)
 8019e02:	4413      	add	r3, r2
 8019e04:	60fb      	str	r3, [r7, #12]
                ptcb = pMutex->waittingList;  
 8019e06:	68fb      	ldr	r3, [r7, #12]
 8019e08:	685b      	ldr	r3, [r3, #4]
 8019e0a:	617b      	str	r3, [r7, #20]
                prio = pMutex->originalPrio; 
 8019e0c:	68fb      	ldr	r3, [r7, #12]
 8019e0e:	781b      	ldrb	r3, [r3, #0]
 8019e10:	74fb      	strb	r3, [r7, #19]
                pMutex->hipriTaskID = pMutex->taskID;
 8019e12:	68fb      	ldr	r3, [r7, #12]
 8019e14:	789a      	ldrb	r2, [r3, #2]
 8019e16:	68fb      	ldr	r3, [r7, #12]
 8019e18:	70da      	strb	r2, [r3, #3]
                while(ptcb != Co_NULL)
 8019e1a:	e00e      	b.n	8019e3a <CoSetPriority+0x13e>
                {
                    if(ptcb->prio < prio)
 8019e1c:	697b      	ldr	r3, [r7, #20]
 8019e1e:	791b      	ldrb	r3, [r3, #4]
 8019e20:	7cfa      	ldrb	r2, [r7, #19]
 8019e22:	429a      	cmp	r2, r3
 8019e24:	d906      	bls.n	8019e34 <CoSetPriority+0x138>
                    {
                        prio = ptcb->prio;
 8019e26:	697b      	ldr	r3, [r7, #20]
 8019e28:	791b      	ldrb	r3, [r3, #4]
 8019e2a:	74fb      	strb	r3, [r7, #19]
                        pMutex->hipriTaskID = ptcb->taskID;
 8019e2c:	697b      	ldr	r3, [r7, #20]
 8019e2e:	799a      	ldrb	r2, [r3, #6]
 8019e30:	68fb      	ldr	r3, [r7, #12]
 8019e32:	70da      	strb	r2, [r3, #3]
                    }
                    ptcb = ptcb->TCBnext;			
 8019e34:	697b      	ldr	r3, [r7, #20]
 8019e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019e38:	617b      	str	r3, [r7, #20]
                while(ptcb != Co_NULL)
 8019e3a:	697b      	ldr	r3, [r7, #20]
 8019e3c:	2b00      	cmp	r3, #0
 8019e3e:	d1ed      	bne.n	8019e1c <CoSetPriority+0x120>
                }
				OsSchedUnlock();
 8019e40:	f7fd fbd6 	bl	80175f0 <OsSchedUnlock>
                if(pMutex->originalPrio != prio)
 8019e44:	68fb      	ldr	r3, [r7, #12]
 8019e46:	781b      	ldrb	r3, [r3, #0]
 8019e48:	7cfa      	ldrb	r2, [r7, #19]
 8019e4a:	429a      	cmp	r2, r3
 8019e4c:	d006      	beq.n	8019e5c <CoSetPriority+0x160>
                {
                    CoSetPriority(pMutex->taskID,prio);	
 8019e4e:	68fb      	ldr	r3, [r7, #12]
 8019e50:	789b      	ldrb	r3, [r3, #2]
 8019e52:	7cfa      	ldrb	r2, [r7, #19]
 8019e54:	4611      	mov	r1, r2
 8019e56:	4618      	mov	r0, r3
 8019e58:	f7ff ff50 	bl	8019cfc <CoSetPriority>
                }	
            }
#endif

#if CFG_EVENT_EN >0
			ptcb = &TCBTbl[taskID];
 8019e5c:	79fa      	ldrb	r2, [r7, #7]
 8019e5e:	4613      	mov	r3, r2
 8019e60:	005b      	lsls	r3, r3, #1
 8019e62:	4413      	add	r3, r2
 8019e64:	011b      	lsls	r3, r3, #4
 8019e66:	4a10      	ldr	r2, [pc, #64]	; (8019ea8 <CoSetPriority+0x1ac>)
 8019e68:	4413      	add	r3, r2
 8019e6a:	617b      	str	r3, [r7, #20]
            if(ptcb->eventID != INVALID_ID) /* Is task in event WAITING list? */
 8019e6c:	697b      	ldr	r3, [r7, #20]
 8019e6e:	7a1b      	ldrb	r3, [r3, #8]
 8019e70:	2bff      	cmp	r3, #255	; 0xff
 8019e72:	d013      	beq.n	8019e9c <CoSetPriority+0x1a0>
            {								    
                pecb = &EventTbl[ptcb->eventID];
 8019e74:	697b      	ldr	r3, [r7, #20]
 8019e76:	7a1b      	ldrb	r3, [r3, #8]
 8019e78:	011b      	lsls	r3, r3, #4
 8019e7a:	4a10      	ldr	r2, [pc, #64]	; (8019ebc <CoSetPriority+0x1c0>)
 8019e7c:	4413      	add	r3, r2
 8019e7e:	60bb      	str	r3, [r7, #8]
                
                /* Yes,is event sort type as preemptive PRI?                  */
                if(pecb->eventSortType == EVENT_SORT_TYPE_PRIO)
 8019e80:	68bb      	ldr	r3, [r7, #8]
 8019e82:	795b      	ldrb	r3, [r3, #5]
 8019e84:	f023 030f 	bic.w	r3, r3, #15
 8019e88:	b2db      	uxtb	r3, r3
 8019e8a:	2b20      	cmp	r3, #32
 8019e8c:	d106      	bne.n	8019e9c <CoSetPriority+0x1a0>
                {	  
                    /* Yes,reorder task in the list                           */
                    RemoveEventWaittingList(ptcb);
 8019e8e:	6978      	ldr	r0, [r7, #20]
 8019e90:	f7fd fe20 	bl	8017ad4 <RemoveEventWaittingList>
                    EventTaskToWait(pecb,ptcb);
 8019e94:	6979      	ldr	r1, [r7, #20]
 8019e96:	68b8      	ldr	r0, [r7, #8]
 8019e98:	f7fd fd36 	bl	8017908 <EventTaskToWait>
                }	
            }
#endif
        }
    }
    return E_OK;
 8019e9c:	2300      	movs	r3, #0
}
 8019e9e:	4618      	mov	r0, r3
 8019ea0:	3718      	adds	r7, #24
 8019ea2:	46bd      	mov	sp, r7
 8019ea4:	bd80      	pop	{r7, pc}
 8019ea6:	bf00      	nop
 8019ea8:	2000d598 	.word	0x2000d598
 8019eac:	2000d4f4 	.word	0x2000d4f4
 8019eb0:	20003749 	.word	0x20003749
 8019eb4:	2000d720 	.word	0x2000d720
 8019eb8:	2000374a 	.word	0x2000374a
 8019ebc:	2000374c 	.word	0x2000374c

08019ec0 <Schedule>:
 * @details    This function is called by every where need to switch context,
 *             It is schedule function of OS kernel.
 *******************************************************************************
 */
void Schedule(void)
{
 8019ec0:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8019ec4:	b084      	sub	sp, #16
 8019ec6:	af00      	add	r7, sp, #0
    U8  RunPrio,RdyPrio;
    P_OSTCB pRdyTcb,pCurTcb;
   
	
    pCurTcb = TCBRunning;    
 8019ec8:	4b46      	ldr	r3, [pc, #280]	; (8019fe4 <Schedule+0x124>)
 8019eca:	681b      	ldr	r3, [r3, #0]
 8019ecc:	60fb      	str	r3, [r7, #12]
    pRdyTcb = TCBRdy;
 8019ece:	4b46      	ldr	r3, [pc, #280]	; (8019fe8 <Schedule+0x128>)
 8019ed0:	681b      	ldr	r3, [r3, #0]
 8019ed2:	60bb      	str	r3, [r7, #8]

	if((pRdyTcb==Co_NULL) || (pCurTcb != TCBNext) || (OSSchedLock >1) || (OSIntNesting >0))
 8019ed4:	68bb      	ldr	r3, [r7, #8]
 8019ed6:	2b00      	cmp	r3, #0
 8019ed8:	d07c      	beq.n	8019fd4 <Schedule+0x114>
 8019eda:	4b44      	ldr	r3, [pc, #272]	; (8019fec <Schedule+0x12c>)
 8019edc:	681b      	ldr	r3, [r3, #0]
 8019ede:	68fa      	ldr	r2, [r7, #12]
 8019ee0:	429a      	cmp	r2, r3
 8019ee2:	d177      	bne.n	8019fd4 <Schedule+0x114>
 8019ee4:	4b42      	ldr	r3, [pc, #264]	; (8019ff0 <Schedule+0x130>)
 8019ee6:	781b      	ldrb	r3, [r3, #0]
 8019ee8:	b2db      	uxtb	r3, r3
 8019eea:	2b01      	cmp	r3, #1
 8019eec:	d872      	bhi.n	8019fd4 <Schedule+0x114>
 8019eee:	4b41      	ldr	r3, [pc, #260]	; (8019ff4 <Schedule+0x134>)
 8019ef0:	781b      	ldrb	r3, [r3, #0]
 8019ef2:	b2db      	uxtb	r3, r3
 8019ef4:	2b00      	cmp	r3, #0
 8019ef6:	d16d      	bne.n	8019fd4 <Schedule+0x114>
	{
		return;
	}
    
	TaskSchedReq = Co_FALSE;
 8019ef8:	4b3f      	ldr	r3, [pc, #252]	; (8019ff8 <Schedule+0x138>)
 8019efa:	2200      	movs	r2, #0
 8019efc:	701a      	strb	r2, [r3, #0]
    RunPrio = pCurTcb->prio;
 8019efe:	68fb      	ldr	r3, [r7, #12]
 8019f00:	791b      	ldrb	r3, [r3, #4]
 8019f02:	71fb      	strb	r3, [r7, #7]
    RdyPrio = pRdyTcb->prio;
 8019f04:	68bb      	ldr	r3, [r7, #8]
 8019f06:	791b      	ldrb	r3, [r3, #4]
 8019f08:	71bb      	strb	r3, [r7, #6]

	/* Is Running task status was changed? */
    if(pCurTcb->state != TASK_RUNNING)	
 8019f0a:	68fb      	ldr	r3, [r7, #12]
 8019f0c:	795b      	ldrb	r3, [r3, #5]
 8019f0e:	2b01      	cmp	r3, #1
 8019f10:	d009      	beq.n	8019f26 <Schedule+0x66>
    {
        TCBNext        = pRdyTcb;   /* Yes,set TCBNext and reorder READY list */
 8019f12:	4a36      	ldr	r2, [pc, #216]	; (8019fec <Schedule+0x12c>)
 8019f14:	68bb      	ldr	r3, [r7, #8]
 8019f16:	6013      	str	r3, [r2, #0]
        pRdyTcb->state = TASK_RUNNING;
 8019f18:	68bb      	ldr	r3, [r7, #8]
 8019f1a:	2201      	movs	r2, #1
 8019f1c:	715a      	strb	r2, [r3, #5]
        RemoveFromTCBRdyList(pRdyTcb);
 8019f1e:	68b8      	ldr	r0, [r7, #8]
 8019f20:	f7ff fea8 	bl	8019c74 <RemoveFromTCBRdyList>
 8019f24:	e02a      	b.n	8019f7c <Schedule+0xbc>
    }

    else if(RdyPrio < RunPrio )     /* Is higher PRI task coming in?          */
 8019f26:	79ba      	ldrb	r2, [r7, #6]
 8019f28:	79fb      	ldrb	r3, [r7, #7]
 8019f2a:	429a      	cmp	r2, r3
 8019f2c:	d20c      	bcs.n	8019f48 <Schedule+0x88>
    {
        TCBNext        = pRdyTcb;   /* Yes,set TCBNext and reorder READY list */
 8019f2e:	4a2f      	ldr	r2, [pc, #188]	; (8019fec <Schedule+0x12c>)
 8019f30:	68bb      	ldr	r3, [r7, #8]
 8019f32:	6013      	str	r3, [r2, #0]
        InsertToTCBRdyList(pCurTcb);
 8019f34:	68f8      	ldr	r0, [r7, #12]
 8019f36:	f7ff fe19 	bl	8019b6c <InsertToTCBRdyList>
		RemoveFromTCBRdyList(pRdyTcb);
 8019f3a:	68b8      	ldr	r0, [r7, #8]
 8019f3c:	f7ff fe9a 	bl	8019c74 <RemoveFromTCBRdyList>
        pRdyTcb->state = TASK_RUNNING;
 8019f40:	68bb      	ldr	r3, [r7, #8]
 8019f42:	2201      	movs	r2, #1
 8019f44:	715a      	strb	r2, [r3, #5]
 8019f46:	e019      	b.n	8019f7c <Schedule+0xbc>
    }
    
#if CFG_ROBIN_EN >0                 /* Is time for robinning                  */                            
    else if((RunPrio == RdyPrio) && (OSCheckTime == OSTickCnt))
 8019f48:	79fa      	ldrb	r2, [r7, #7]
 8019f4a:	79bb      	ldrb	r3, [r7, #6]
 8019f4c:	429a      	cmp	r2, r3
 8019f4e:	d143      	bne.n	8019fd8 <Schedule+0x118>
 8019f50:	4b2a      	ldr	r3, [pc, #168]	; (8019ffc <Schedule+0x13c>)
 8019f52:	e9d3 1200 	ldrd	r1, r2, [r3]
 8019f56:	4b2a      	ldr	r3, [pc, #168]	; (801a000 <Schedule+0x140>)
 8019f58:	e9d3 3400 	ldrd	r3, r4, [r3]
 8019f5c:	42a2      	cmp	r2, r4
 8019f5e:	bf08      	it	eq
 8019f60:	4299      	cmpeq	r1, r3
 8019f62:	d139      	bne.n	8019fd8 <Schedule+0x118>
    {
        TCBNext        = pRdyTcb;   /* Yes,set TCBNext and reorder READY list */
 8019f64:	4a21      	ldr	r2, [pc, #132]	; (8019fec <Schedule+0x12c>)
 8019f66:	68bb      	ldr	r3, [r7, #8]
 8019f68:	6013      	str	r3, [r2, #0]
        InsertToTCBRdyList(pCurTcb);
 8019f6a:	68f8      	ldr	r0, [r7, #12]
 8019f6c:	f7ff fdfe 	bl	8019b6c <InsertToTCBRdyList>
		RemoveFromTCBRdyList(pRdyTcb);
 8019f70:	68b8      	ldr	r0, [r7, #8]
 8019f72:	f7ff fe7f 	bl	8019c74 <RemoveFromTCBRdyList>
        pRdyTcb->state = TASK_RUNNING;
 8019f76:	68bb      	ldr	r3, [r7, #8]
 8019f78:	2201      	movs	r2, #1
 8019f7a:	715a      	strb	r2, [r3, #5]
    {								    
        return;	
    }
    
#if CFG_ROBIN_EN >0
    if(TCBNext->prio == TCBRdy->prio)  /* Reset OSCheckTime for task robinnig */
 8019f7c:	4b1b      	ldr	r3, [pc, #108]	; (8019fec <Schedule+0x12c>)
 8019f7e:	681b      	ldr	r3, [r3, #0]
 8019f80:	791a      	ldrb	r2, [r3, #4]
 8019f82:	4b19      	ldr	r3, [pc, #100]	; (8019fe8 <Schedule+0x128>)
 8019f84:	681b      	ldr	r3, [r3, #0]
 8019f86:	791b      	ldrb	r3, [r3, #4]
 8019f88:	429a      	cmp	r2, r3
 8019f8a:	d10f      	bne.n	8019fac <Schedule+0xec>
        OSCheckTime = OSTickCnt + TCBNext->timeSlice;
 8019f8c:	4b17      	ldr	r3, [pc, #92]	; (8019fec <Schedule+0x12c>)
 8019f8e:	681b      	ldr	r3, [r3, #0]
 8019f90:	895b      	ldrh	r3, [r3, #10]
 8019f92:	b299      	uxth	r1, r3
 8019f94:	f04f 0200 	mov.w	r2, #0
 8019f98:	4b19      	ldr	r3, [pc, #100]	; (801a000 <Schedule+0x140>)
 8019f9a:	e9d3 bc00 	ldrd	fp, ip, [r3]
 8019f9e:	eb1b 0301 	adds.w	r3, fp, r1
 8019fa2:	eb4c 0402 	adc.w	r4, ip, r2
 8019fa6:	4a15      	ldr	r2, [pc, #84]	; (8019ffc <Schedule+0x13c>)
 8019fa8:	e9c2 3400 	strd	r3, r4, [r2]
#endif
    
  
#if CFG_STK_CHECKOUT_EN > 0                       /* Is stack overflow?       */
    if((pCurTcb->stkPtr < pCurTcb->stack)||(*(U32*)(pCurTcb->stack) != MAGIC_WORD))       
 8019fac:	68fb      	ldr	r3, [r7, #12]
 8019fae:	681a      	ldr	r2, [r3, #0]
 8019fb0:	68fb      	ldr	r3, [r7, #12]
 8019fb2:	68db      	ldr	r3, [r3, #12]
 8019fb4:	429a      	cmp	r2, r3
 8019fb6:	d305      	bcc.n	8019fc4 <Schedule+0x104>
 8019fb8:	68fb      	ldr	r3, [r7, #12]
 8019fba:	68db      	ldr	r3, [r3, #12]
 8019fbc:	681b      	ldr	r3, [r3, #0]
 8019fbe:	4a11      	ldr	r2, [pc, #68]	; (801a004 <Schedule+0x144>)
 8019fc0:	4293      	cmp	r3, r2
 8019fc2:	d004      	beq.n	8019fce <Schedule+0x10e>
    {									
        CoStkOverflowHook(pCurTcb->taskID);       /* Yes,call handler         */		
 8019fc4:	68fb      	ldr	r3, [r7, #12]
 8019fc6:	799b      	ldrb	r3, [r3, #6]
 8019fc8:	4618      	mov	r0, r3
 8019fca:	f7fe fa5a 	bl	8018482 <CoStkOverflowHook>
    }   
#endif
 	
    SwitchContext();                              /* Call task context switch */
 8019fce:	f7ff f8ab 	bl	8019128 <SwitchContext>
 8019fd2:	e002      	b.n	8019fda <Schedule+0x11a>
		return;
 8019fd4:	bf00      	nop
 8019fd6:	e000      	b.n	8019fda <Schedule+0x11a>
        return;	
 8019fd8:	bf00      	nop
}
 8019fda:	3710      	adds	r7, #16
 8019fdc:	46bd      	mov	sp, r7
 8019fde:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8019fe2:	bf00      	nop
 8019fe4:	2000d728 	.word	0x2000d728
 8019fe8:	2000d720 	.word	0x2000d720
 8019fec:	2000d724 	.word	0x2000d724
 8019ff0:	20003749 	.word	0x20003749
 8019ff4:	20003748 	.word	0x20003748
 8019ff8:	2000374a 	.word	0x2000374a
 8019ffc:	2000d730 	.word	0x2000d730
 801a000:	20003740 	.word	0x20003740
 801a004:	5a5aa5a5 	.word	0x5a5aa5a5

0801a008 <AssignTCB>:
 * @details    This function is called to assign a task control block for task 
 *              being created.
 *******************************************************************************
 */
static P_OSTCB AssignTCB(void)
{
 801a008:	b580      	push	{r7, lr}
 801a00a:	b082      	sub	sp, #8
 801a00c:	af00      	add	r7, sp, #0
    P_OSTCB	ptcb;
    
    OsSchedLock();                      /* Lock schedule                      */
 801a00e:	4b0f      	ldr	r3, [pc, #60]	; (801a04c <AssignTCB+0x44>)
 801a010:	781b      	ldrb	r3, [r3, #0]
 801a012:	b2db      	uxtb	r3, r3
 801a014:	3301      	adds	r3, #1
 801a016:	b2da      	uxtb	r2, r3
 801a018:	4b0c      	ldr	r3, [pc, #48]	; (801a04c <AssignTCB+0x44>)
 801a01a:	701a      	strb	r2, [r3, #0]
    if(FreeTCB == Co_NULL)                 /* Is there no free TCB               */
 801a01c:	4b0c      	ldr	r3, [pc, #48]	; (801a050 <AssignTCB+0x48>)
 801a01e:	681b      	ldr	r3, [r3, #0]
 801a020:	2b00      	cmp	r3, #0
 801a022:	d103      	bne.n	801a02c <AssignTCB+0x24>
    {
        OsSchedUnlock();                /* Yes,unlock schedule                */
 801a024:	f7fd fae4 	bl	80175f0 <OsSchedUnlock>
        return Co_NULL;                    /* Error return                       */
 801a028:	2300      	movs	r3, #0
 801a02a:	e00a      	b.n	801a042 <AssignTCB+0x3a>
    }	
	ptcb    = FreeTCB;          /* Yes,assgin free TCB for this task  */    
 801a02c:	4b08      	ldr	r3, [pc, #32]	; (801a050 <AssignTCB+0x48>)
 801a02e:	681b      	ldr	r3, [r3, #0]
 801a030:	607b      	str	r3, [r7, #4]
	/* Set next item as the head of free TCB list                     */
    FreeTCB = FreeTCB->TCBnext; 
 801a032:	4b07      	ldr	r3, [pc, #28]	; (801a050 <AssignTCB+0x48>)
 801a034:	681b      	ldr	r3, [r3, #0]
 801a036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a038:	4a05      	ldr	r2, [pc, #20]	; (801a050 <AssignTCB+0x48>)
 801a03a:	6013      	str	r3, [r2, #0]
	OsSchedUnlock();
 801a03c:	f7fd fad8 	bl	80175f0 <OsSchedUnlock>
	return ptcb;
 801a040:	687b      	ldr	r3, [r7, #4]
}
 801a042:	4618      	mov	r0, r3
 801a044:	3708      	adds	r7, #8
 801a046:	46bd      	mov	sp, r7
 801a048:	bd80      	pop	{r7, pc}
 801a04a:	bf00      	nop
 801a04c:	20003749 	.word	0x20003749
 801a050:	2000d71c 	.word	0x2000d71c

0801a054 <CreateTask>:
 * @details    This function is called by application to create a task,return a id 
 *             to mark this task.
 *******************************************************************************
 */
OS_TID CreateTask(FUNCPtr task,void *argv,U32 parameter,OS_STK *stk)
{
 801a054:	b580      	push	{r7, lr}
 801a056:	b088      	sub	sp, #32
 801a058:	af00      	add	r7, sp, #0
 801a05a:	60f8      	str	r0, [r7, #12]
 801a05c:	60b9      	str	r1, [r7, #8]
 801a05e:	607a      	str	r2, [r7, #4]
 801a060:	603b      	str	r3, [r7, #0]
    U16     timeSlice;
#endif
   
#if CFG_STK_CHECKOUT_EN >0              /* Check validity of parameter        */
    U16 sktSz;
    sktSz = (parameter&0xfff00)>>8;    
 801a062:	687b      	ldr	r3, [r7, #4]
 801a064:	0a1b      	lsrs	r3, r3, #8
 801a066:	b29b      	uxth	r3, r3
 801a068:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801a06c:	83bb      	strh	r3, [r7, #28]
#endif
    prio = parameter&0xff;
 801a06e:	687b      	ldr	r3, [r7, #4]
 801a070:	76fb      	strb	r3, [r7, #27]

#if CFG_PAR_CHECKOUT_EN >0              /* Check validity of parameter        */
    if(task == Co_NULL)
 801a072:	68fb      	ldr	r3, [r7, #12]
 801a074:	2b00      	cmp	r3, #0
 801a076:	d101      	bne.n	801a07c <CreateTask+0x28>
    {
        return E_CREATE_FAIL;
 801a078:	23ff      	movs	r3, #255	; 0xff
 801a07a:	e072      	b.n	801a162 <CreateTask+0x10e>
    }
    if(stk == Co_NULL)
 801a07c:	683b      	ldr	r3, [r7, #0]
 801a07e:	2b00      	cmp	r3, #0
 801a080:	d101      	bne.n	801a086 <CreateTask+0x32>
    {
        return E_CREATE_FAIL;
 801a082:	23ff      	movs	r3, #255	; 0xff
 801a084:	e06d      	b.n	801a162 <CreateTask+0x10e>
    }
    if(prio > CFG_LOWEST_PRIO)
 801a086:	7efb      	ldrb	r3, [r7, #27]
 801a088:	2b40      	cmp	r3, #64	; 0x40
 801a08a:	d901      	bls.n	801a090 <CreateTask+0x3c>
    {
        return E_CREATE_FAIL;		
 801a08c:	23ff      	movs	r3, #255	; 0xff
 801a08e:	e068      	b.n	801a162 <CreateTask+0x10e>
    }
#if CFG_STK_CHECKOUT_EN >0
    if(sktSz < 20)
 801a090:	8bbb      	ldrh	r3, [r7, #28]
 801a092:	2b13      	cmp	r3, #19
 801a094:	d801      	bhi.n	801a09a <CreateTask+0x46>
    {
        return E_CREATE_FAIL;		
 801a096:	23ff      	movs	r3, #255	; 0xff
 801a098:	e063      	b.n	801a162 <CreateTask+0x10e>
#if CFG_TASK_SCHEDULE_EN == 0
	if(TCBRunning != Co_NULL)
		 return E_CREATE_FAIL;	
#endif   

    stkTopPtr = InitTaskContext(task,argv,stk);   /* Initialize task context. */
 801a09a:	683a      	ldr	r2, [r7, #0]
 801a09c:	68b9      	ldr	r1, [r7, #8]
 801a09e:	68f8      	ldr	r0, [r7, #12]
 801a0a0:	f7fd fa00 	bl	80174a4 <InitTaskContext>
 801a0a4:	6178      	str	r0, [r7, #20]
    
    ptcb = AssignTCB();                 /* Get free TCB to use                */
 801a0a6:	f7ff ffaf 	bl	801a008 <AssignTCB>
 801a0aa:	6138      	str	r0, [r7, #16]
    
    if(ptcb == Co_NULL)                    /* Is free TCB equal to Co_NULL?         */
 801a0ac:	693b      	ldr	r3, [r7, #16]
 801a0ae:	2b00      	cmp	r3, #0
 801a0b0:	d101      	bne.n	801a0b6 <CreateTask+0x62>
    {
        return E_CREATE_FAIL;           /* Yes,error return                   */
 801a0b2:	23ff      	movs	r3, #255	; 0xff
 801a0b4:	e055      	b.n	801a162 <CreateTask+0x10e>
    }
    
    ptcb->stkPtr = stkTopPtr;           /* Initialize TCB as user set         */
 801a0b6:	693b      	ldr	r3, [r7, #16]
 801a0b8:	697a      	ldr	r2, [r7, #20]
 801a0ba:	601a      	str	r2, [r3, #0]
    ptcb->prio   = prio;
 801a0bc:	693b      	ldr	r3, [r7, #16]
 801a0be:	7efa      	ldrb	r2, [r7, #27]
 801a0c0:	711a      	strb	r2, [r3, #4]
#if CFG_STK_CHECKOUT_EN >0
    ptcb->stack = stk+1 - sktSz; /* Set bottom stack for stack overflow check */
 801a0c2:	8bba      	ldrh	r2, [r7, #28]
 801a0c4:	4613      	mov	r3, r2
 801a0c6:	079b      	lsls	r3, r3, #30
 801a0c8:	1a9b      	subs	r3, r3, r2
 801a0ca:	009b      	lsls	r3, r3, #2
 801a0cc:	3304      	adds	r3, #4
 801a0ce:	683a      	ldr	r2, [r7, #0]
 801a0d0:	441a      	add	r2, r3
 801a0d2:	693b      	ldr	r3, [r7, #16]
 801a0d4:	60da      	str	r2, [r3, #12]
    *(U32*)(ptcb->stack) = MAGIC_WORD;
 801a0d6:	693b      	ldr	r3, [r7, #16]
 801a0d8:	68db      	ldr	r3, [r3, #12]
 801a0da:	4a24      	ldr	r2, [pc, #144]	; (801a16c <CreateTask+0x118>)
 801a0dc:	601a      	str	r2, [r3, #0]
#endif	

#if CFG_TASK_WAITTING_EN >0
    ptcb->delayTick	= INVALID_VALUE;	
 801a0de:	693b      	ldr	r3, [r7, #16]
 801a0e0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801a0e4:	621a      	str	r2, [r3, #32]

#if CFG_TASK_SCHEDULE_EN == 0
	ptcb->taskFuc = task;
	ptcb->taskStk = stk;
#endif     
    ptcb->TCBnext = Co_NULL;               /* Initialize TCB link in READY list  */
 801a0e6:	693b      	ldr	r3, [r7, #16]
 801a0e8:	2200      	movs	r2, #0
 801a0ea:	625a      	str	r2, [r3, #36]	; 0x24
    ptcb->TCBprev = Co_NULL;
 801a0ec:	693b      	ldr	r3, [r7, #16]
 801a0ee:	2200      	movs	r2, #0
 801a0f0:	629a      	str	r2, [r3, #40]	; 0x28

#if CFG_ROBIN_EN >0						/* Set task time slice for task robin */
    timeSlice = (parameter&0x7fff0000)>>20; 
 801a0f2:	687b      	ldr	r3, [r7, #4]
 801a0f4:	0d1b      	lsrs	r3, r3, #20
 801a0f6:	b29b      	uxth	r3, r3
 801a0f8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801a0fc:	83fb      	strh	r3, [r7, #30]
    if(timeSlice == 0)
 801a0fe:	8bfb      	ldrh	r3, [r7, #30]
 801a100:	2b00      	cmp	r3, #0
 801a102:	d101      	bne.n	801a108 <CreateTask+0xb4>
    {
        timeSlice = CFG_TIME_SLICE;
 801a104:	230a      	movs	r3, #10
 801a106:	83fb      	strh	r3, [r7, #30]
    }
    ptcb->timeSlice = timeSlice;
 801a108:	693b      	ldr	r3, [r7, #16]
 801a10a:	8bfa      	ldrh	r2, [r7, #30]
 801a10c:	815a      	strh	r2, [r3, #10]
#endif

#if CFG_FLAG_EN > 0
    ptcb->pnode = Co_NULL;                 /* Initialize task as no flag waiting */
 801a10e:	693b      	ldr	r3, [r7, #16]
 801a110:	2200      	movs	r2, #0
 801a112:	61da      	str	r2, [r3, #28]
#endif

#if CFG_EVENT_EN > 0
    ptcb->eventID  = INVALID_ID;      	/* Initialize task as no event waiting*/
 801a114:	693b      	ldr	r3, [r7, #16]
 801a116:	22ff      	movs	r2, #255	; 0xff
 801a118:	721a      	strb	r2, [r3, #8]
    ptcb->pmail    = Co_NULL;
 801a11a:	693b      	ldr	r3, [r7, #16]
 801a11c:	2200      	movs	r2, #0
 801a11e:	611a      	str	r2, [r3, #16]
    ptcb->waitNext = Co_NULL;
 801a120:	693b      	ldr	r3, [r7, #16]
 801a122:	2200      	movs	r2, #0
 801a124:	615a      	str	r2, [r3, #20]
    ptcb->waitPrev = Co_NULL;
 801a126:	693b      	ldr	r3, [r7, #16]
 801a128:	2200      	movs	r2, #0
 801a12a:	619a      	str	r2, [r3, #24]
#endif

#if CFG_MUTEX_EN > 0
    /* Initialize task as no mutex holding or waiting                         */
    ptcb->mutexID = INVALID_ID; 
 801a12c:	693b      	ldr	r3, [r7, #16]
 801a12e:	22ff      	movs	r2, #255	; 0xff
 801a130:	71da      	strb	r2, [r3, #7]
#endif 

#if CFG_ORDER_LIST_SCHEDULE_EN ==0
	ActiveTaskPri(prio);	
#endif	
	ptcb->userData = Co_NULL;
 801a132:	693b      	ldr	r3, [r7, #16]
 801a134:	2200      	movs	r2, #0
 801a136:	62da      	str	r2, [r3, #44]	; 0x2c

	if((parameter>>31) == 0)			/* Is task in waitting state?         */
 801a138:	687b      	ldr	r3, [r7, #4]
 801a13a:	2b00      	cmp	r3, #0
 801a13c:	db0c      	blt.n	801a158 <CreateTask+0x104>
	{									/* No,set it into ready list          */
		OsSchedLock();                  /* Lock schedule                      */
 801a13e:	4b0c      	ldr	r3, [pc, #48]	; (801a170 <CreateTask+0x11c>)
 801a140:	781b      	ldrb	r3, [r3, #0]
 801a142:	b2db      	uxtb	r3, r3
 801a144:	3301      	adds	r3, #1
 801a146:	b2da      	uxtb	r2, r3
 801a148:	4b09      	ldr	r3, [pc, #36]	; (801a170 <CreateTask+0x11c>)
 801a14a:	701a      	strb	r2, [r3, #0]
		InsertToTCBRdyList(ptcb);       /* Insert into the READY list         */
 801a14c:	6938      	ldr	r0, [r7, #16]
 801a14e:	f7ff fd0d 	bl	8019b6c <InsertToTCBRdyList>
	    OsSchedUnlock();                /* Unlock schedule                    */
 801a152:	f7fd fa4d 	bl	80175f0 <OsSchedUnlock>
 801a156:	e002      	b.n	801a15e <CreateTask+0x10a>
	}
	else
	{									/* Yes,Set task status as TASK_WAITING*/
		ptcb->state   = TASK_WAITING;	
 801a158:	693b      	ldr	r3, [r7, #16]
 801a15a:	2202      	movs	r2, #2
 801a15c:	715a      	strb	r2, [r3, #5]
	}
    return ptcb->taskID;                /* Return task ID                     */
 801a15e:	693b      	ldr	r3, [r7, #16]
 801a160:	799b      	ldrb	r3, [r3, #6]
}
 801a162:	4618      	mov	r0, r3
 801a164:	3720      	adds	r7, #32
 801a166:	46bd      	mov	sp, r7
 801a168:	bd80      	pop	{r7, pc}
 801a16a:	bf00      	nop
 801a16c:	5a5aa5a5 	.word	0x5a5aa5a5
 801a170:	20003749 	.word	0x20003749

0801a174 <CoDelTask>:
 * @par Description
 * @details    This function is called to delete assign task.	 
 *******************************************************************************
 */
StatusType CoDelTask(OS_TID taskID)
{
 801a174:	b580      	push	{r7, lr}
 801a176:	b084      	sub	sp, #16
 801a178:	af00      	add	r7, sp, #0
 801a17a:	4603      	mov	r3, r0
 801a17c:	71fb      	strb	r3, [r7, #7]
    P_OSTCB ptcb;

#if CFG_PAR_CHECKOUT_EN >0              /* Check validity of parameter        */
    if(taskID >= CFG_MAX_USER_TASKS + SYS_TASK_NUM)
 801a17e:	79fb      	ldrb	r3, [r7, #7]
 801a180:	2b05      	cmp	r3, #5
 801a182:	d901      	bls.n	801a188 <CoDelTask+0x14>
    {
        return E_INVALID_ID;
 801a184:	2301      	movs	r3, #1
 801a186:	e077      	b.n	801a278 <CoDelTask+0x104>
    }
#endif
	ptcb = &TCBTbl[taskID];
 801a188:	79fa      	ldrb	r2, [r7, #7]
 801a18a:	4613      	mov	r3, r2
 801a18c:	005b      	lsls	r3, r3, #1
 801a18e:	4413      	add	r3, r2
 801a190:	011b      	lsls	r3, r3, #4
 801a192:	4a3b      	ldr	r2, [pc, #236]	; (801a280 <CoDelTask+0x10c>)
 801a194:	4413      	add	r3, r2
 801a196:	60fb      	str	r3, [r7, #12]
#if CFG_PAR_CHECKOUT_EN >0 
    if(ptcb->state == TASK_DORMANT)
 801a198:	68fb      	ldr	r3, [r7, #12]
 801a19a:	795b      	ldrb	r3, [r3, #5]
 801a19c:	2b03      	cmp	r3, #3
 801a19e:	d101      	bne.n	801a1a4 <CoDelTask+0x30>
    {
        return E_INVALID_ID;
 801a1a0:	2301      	movs	r3, #1
 801a1a2:	e069      	b.n	801a278 <CoDelTask+0x104>
    }
#endif
    if(taskID == 0)                     /* Is idle task?                      */
 801a1a4:	79fb      	ldrb	r3, [r7, #7]
 801a1a6:	2b00      	cmp	r3, #0
 801a1a8:	d101      	bne.n	801a1ae <CoDelTask+0x3a>
    {											 
        return E_PROTECTED_TASK;        /* Yes,error return                   */
 801a1aa:	2314      	movs	r3, #20
 801a1ac:	e064      	b.n	801a278 <CoDelTask+0x104>
    }    
    
    if(ptcb->state == TASK_RUNNING)     /* Is task running?                   */
 801a1ae:	68fb      	ldr	r3, [r7, #12]
 801a1b0:	795b      	ldrb	r3, [r3, #5]
 801a1b2:	2b01      	cmp	r3, #1
 801a1b4:	d106      	bne.n	801a1c4 <CoDelTask+0x50>
    {
        if(OSSchedLock != 0)            /* Yes,is OS lock?                    */
 801a1b6:	4b33      	ldr	r3, [pc, #204]	; (801a284 <CoDelTask+0x110>)
 801a1b8:	781b      	ldrb	r3, [r3, #0]
 801a1ba:	b2db      	uxtb	r3, r3
 801a1bc:	2b00      	cmp	r3, #0
 801a1be:	d001      	beq.n	801a1c4 <CoDelTask+0x50>
        {
            return E_OS_IN_LOCK;        /* Yes,error return                   */
 801a1c0:	2315      	movs	r3, #21
 801a1c2:	e059      	b.n	801a278 <CoDelTask+0x104>
        }	
    }
		
#if CFG_MUTEX_EN >0                     /* Do task hold mutex?                */
    if(ptcb->mutexID != INVALID_ID)
 801a1c4:	68fb      	ldr	r3, [r7, #12]
 801a1c6:	79db      	ldrb	r3, [r3, #7]
 801a1c8:	2bff      	cmp	r3, #255	; 0xff
 801a1ca:	d00e      	beq.n	801a1ea <CoDelTask+0x76>
	{
        if(MutexTbl[ptcb->mutexID].taskID == ptcb->taskID)
 801a1cc:	68fb      	ldr	r3, [r7, #12]
 801a1ce:	79db      	ldrb	r3, [r3, #7]
 801a1d0:	4a2d      	ldr	r2, [pc, #180]	; (801a288 <CoDelTask+0x114>)
 801a1d2:	00db      	lsls	r3, r3, #3
 801a1d4:	4413      	add	r3, r2
 801a1d6:	789a      	ldrb	r2, [r3, #2]
 801a1d8:	68fb      	ldr	r3, [r7, #12]
 801a1da:	799b      	ldrb	r3, [r3, #6]
 801a1dc:	429a      	cmp	r2, r3
 801a1de:	d104      	bne.n	801a1ea <CoDelTask+0x76>
        {                               /* Yes,leave the mutex                */
            CoLeaveMutexSection(ptcb->mutexID);
 801a1e0:	68fb      	ldr	r3, [r7, #12]
 801a1e2:	79db      	ldrb	r3, [r3, #7]
 801a1e4:	4618      	mov	r0, r3
 801a1e6:	f7fe fe45 	bl	8018e74 <CoLeaveMutexSection>
        }
    }
	
#endif	

    OsSchedLock();                      /* Lock schedule                      */
 801a1ea:	4b26      	ldr	r3, [pc, #152]	; (801a284 <CoDelTask+0x110>)
 801a1ec:	781b      	ldrb	r3, [r3, #0]
 801a1ee:	b2db      	uxtb	r3, r3
 801a1f0:	3301      	adds	r3, #1
 801a1f2:	b2da      	uxtb	r2, r3
 801a1f4:	4b23      	ldr	r3, [pc, #140]	; (801a284 <CoDelTask+0x110>)
 801a1f6:	701a      	strb	r2, [r3, #0]
    
    if(ptcb->state == TASK_READY)       /* Is task in READY list?             */
 801a1f8:	68fb      	ldr	r3, [r7, #12]
 801a1fa:	795b      	ldrb	r3, [r3, #5]
 801a1fc:	2b00      	cmp	r3, #0
 801a1fe:	d103      	bne.n	801a208 <CoDelTask+0x94>
    {
        RemoveFromTCBRdyList(ptcb);     /* Yes,remove task from the READY list*/
 801a200:	68f8      	ldr	r0, [r7, #12]
 801a202:	f7ff fd37 	bl	8019c74 <RemoveFromTCBRdyList>
 801a206:	e022      	b.n	801a24e <CoDelTask+0xda>
    }

#if CFG_TASK_WAITTING_EN > 0 
    else if(ptcb->state == TASK_WAITING)/* Is task in the WAITING list?       */
 801a208:	68fb      	ldr	r3, [r7, #12]
 801a20a:	795b      	ldrb	r3, [r3, #5]
 801a20c:	2b02      	cmp	r3, #2
 801a20e:	d11e      	bne.n	801a24e <CoDelTask+0xda>
    {
        /* Yes,Is task in delay list? */
        if(ptcb->delayTick != INVALID_VALUE)			         
 801a210:	68fb      	ldr	r3, [r7, #12]
 801a212:	6a1b      	ldr	r3, [r3, #32]
 801a214:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801a218:	d002      	beq.n	801a220 <CoDelTask+0xac>
        {
            RemoveDelayList(ptcb);      /* Yes,remove task from READY list    */
 801a21a:	68f8      	ldr	r0, [r7, #12]
 801a21c:	f000 f96c 	bl	801a4f8 <RemoveDelayList>
        }

#if CFG_EVENT_EN > 0
        if(ptcb->eventID != INVALID_ID) /* Is task in event waiting list?     */
 801a220:	68fb      	ldr	r3, [r7, #12]
 801a222:	7a1b      	ldrb	r3, [r3, #8]
 801a224:	2bff      	cmp	r3, #255	; 0xff
 801a226:	d002      	beq.n	801a22e <CoDelTask+0xba>
        {		
            /* Yes,remove task from event waiting list                        */
            RemoveEventWaittingList(ptcb);	
 801a228:	68f8      	ldr	r0, [r7, #12]
 801a22a:	f7fd fc53 	bl	8017ad4 <RemoveEventWaittingList>
        }
#endif

#if CFG_FLAG_EN > 0
        if(ptcb->pnode != Co_NULL)         /* Is task in flag waiting list?      */
 801a22e:	68fb      	ldr	r3, [r7, #12]
 801a230:	69db      	ldr	r3, [r3, #28]
 801a232:	2b00      	cmp	r3, #0
 801a234:	d004      	beq.n	801a240 <CoDelTask+0xcc>
        {
            /* Yes,remove task from flag waiting list                         */
            RemoveLinkNode(ptcb->pnode);	
 801a236:	68fb      	ldr	r3, [r7, #12]
 801a238:	69db      	ldr	r3, [r3, #28]
 801a23a:	4618      	mov	r0, r3
 801a23c:	f7fe f8d8 	bl	80183f0 <RemoveLinkNode>
        }
#endif

#if CFG_MUTEX_EN >0
        if(ptcb->mutexID != INVALID_ID) /* Is task in mutex waiting list?     */
 801a240:	68fb      	ldr	r3, [r7, #12]
 801a242:	79db      	ldrb	r3, [r3, #7]
 801a244:	2bff      	cmp	r3, #255	; 0xff
 801a246:	d002      	beq.n	801a24e <CoDelTask+0xda>
        {
            RemoveMutexList(ptcb);  /* Yes,remove task from mutex waiting list*/
 801a248:	68f8      	ldr	r0, [r7, #12]
 801a24a:	f7fe feaf 	bl	8018fac <RemoveMutexList>
        }
#endif
	  }
#endif
    ptcb->state   = TASK_DORMANT;       /* Release TCB                        */
 801a24e:	68fb      	ldr	r3, [r7, #12]
 801a250:	2203      	movs	r2, #3
 801a252:	715a      	strb	r2, [r3, #5]
	TaskSchedReq  = Co_TRUE;
 801a254:	4b0d      	ldr	r3, [pc, #52]	; (801a28c <CoDelTask+0x118>)
 801a256:	2201      	movs	r2, #1
 801a258:	701a      	strb	r2, [r3, #0]
	  
	CoKfree(ptcb->userData);
 801a25a:	68fb      	ldr	r3, [r7, #12]
 801a25c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a25e:	4618      	mov	r0, r3
 801a260:	f7fe f9f2 	bl	8018648 <CoKfree>
#if CFG_ORDER_LIST_SCHEDULE_EN ==0
	DeleteTaskPri(ptcb->prio);	
#endif	

#if CFG_TASK_SCHEDULE_EN >0
    ptcb->TCBnext = FreeTCB;
 801a264:	4b0a      	ldr	r3, [pc, #40]	; (801a290 <CoDelTask+0x11c>)
 801a266:	681a      	ldr	r2, [r3, #0]
 801a268:	68fb      	ldr	r3, [r7, #12]
 801a26a:	625a      	str	r2, [r3, #36]	; 0x24
    FreeTCB       = ptcb;
 801a26c:	4a08      	ldr	r2, [pc, #32]	; (801a290 <CoDelTask+0x11c>)
 801a26e:	68fb      	ldr	r3, [r7, #12]
 801a270:	6013      	str	r3, [r2, #0]
#endif
    OsSchedUnlock();                    /* Unlock schedule                    */
 801a272:	f7fd f9bd 	bl	80175f0 <OsSchedUnlock>
    return E_OK;                        /* return OK                          */
 801a276:	2300      	movs	r3, #0
}
 801a278:	4618      	mov	r0, r3
 801a27a:	3710      	adds	r7, #16
 801a27c:	46bd      	mov	sp, r7
 801a27e:	bd80      	pop	{r7, pc}
 801a280:	2000d598 	.word	0x2000d598
 801a284:	20003749 	.word	0x20003749
 801a288:	2000d4f4 	.word	0x2000d4f4
 801a28c:	2000374a 	.word	0x2000374a
 801a290:	2000d71c 	.word	0x2000d71c

0801a294 <CoExitTask>:
 * @par Description
 * @details    This function is called to exit current task.	 
 *******************************************************************************
 */
void CoExitTask(void)
{
 801a294:	b580      	push	{r7, lr}
 801a296:	af00      	add	r7, sp, #0
    CoDelTask(TCBRunning->taskID);      /* Call task delete function          */
 801a298:	4b03      	ldr	r3, [pc, #12]	; (801a2a8 <CoExitTask+0x14>)
 801a29a:	681b      	ldr	r3, [r3, #0]
 801a29c:	799b      	ldrb	r3, [r3, #6]
 801a29e:	4618      	mov	r0, r3
 801a2a0:	f7ff ff68 	bl	801a174 <CoDelTask>
}
 801a2a4:	bf00      	nop
 801a2a6:	bd80      	pop	{r7, pc}
 801a2a8:	2000d728 	.word	0x2000d728

0801a2ac <CoGetCurTaskID>:
 * @par Description
 * @details    This function is called to get current task id.	 
 *******************************************************************************
 */
OS_TID CoGetCurTaskID(void)
{
 801a2ac:	b480      	push	{r7}
 801a2ae:	af00      	add	r7, sp, #0
    return (TCBRunning->taskID);        /* Return running task ID             */
 801a2b0:	4b03      	ldr	r3, [pc, #12]	; (801a2c0 <CoGetCurTaskID+0x14>)
 801a2b2:	681b      	ldr	r3, [r3, #0]
 801a2b4:	799b      	ldrb	r3, [r3, #6]
}
 801a2b6:	4618      	mov	r0, r3
 801a2b8:	46bd      	mov	sp, r7
 801a2ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a2be:	4770      	bx	lr
 801a2c0:	2000d728 	.word	0x2000d728

0801a2c4 <CoSuspendTask>:
 * @par Description
 * @details    This function is called to exit current task.	 
 *******************************************************************************
 */
StatusType CoSuspendTask(OS_TID taskID)
{
 801a2c4:	b580      	push	{r7, lr}
 801a2c6:	b084      	sub	sp, #16
 801a2c8:	af00      	add	r7, sp, #0
 801a2ca:	4603      	mov	r3, r0
 801a2cc:	71fb      	strb	r3, [r7, #7]
    P_OSTCB ptcb;

	if(taskID == 0)                     /* Is idle task?                      */
 801a2ce:	79fb      	ldrb	r3, [r7, #7]
 801a2d0:	2b00      	cmp	r3, #0
 801a2d2:	d101      	bne.n	801a2d8 <CoSuspendTask+0x14>
    {											 
        return E_PROTECTED_TASK;        /* Yes,error return                   */
 801a2d4:	2314      	movs	r3, #20
 801a2d6:	e038      	b.n	801a34a <CoSuspendTask+0x86>
    }   
#if CFG_PAR_CHECKOUT_EN >0              /* Check validity of parameter        */
    if(taskID >= CFG_MAX_USER_TASKS + SYS_TASK_NUM)
 801a2d8:	79fb      	ldrb	r3, [r7, #7]
 801a2da:	2b05      	cmp	r3, #5
 801a2dc:	d901      	bls.n	801a2e2 <CoSuspendTask+0x1e>
    {
        return E_INVALID_ID;
 801a2de:	2301      	movs	r3, #1
 801a2e0:	e033      	b.n	801a34a <CoSuspendTask+0x86>
    }
#endif
	ptcb = &TCBTbl[taskID];
 801a2e2:	79fa      	ldrb	r2, [r7, #7]
 801a2e4:	4613      	mov	r3, r2
 801a2e6:	005b      	lsls	r3, r3, #1
 801a2e8:	4413      	add	r3, r2
 801a2ea:	011b      	lsls	r3, r3, #4
 801a2ec:	4a19      	ldr	r2, [pc, #100]	; (801a354 <CoSuspendTask+0x90>)
 801a2ee:	4413      	add	r3, r2
 801a2f0:	60fb      	str	r3, [r7, #12]
#if CFG_PAR_CHECKOUT_EN >0  
    if(ptcb->state == TASK_DORMANT)
 801a2f2:	68fb      	ldr	r3, [r7, #12]
 801a2f4:	795b      	ldrb	r3, [r3, #5]
 801a2f6:	2b03      	cmp	r3, #3
 801a2f8:	d101      	bne.n	801a2fe <CoSuspendTask+0x3a>
    {
        return E_INVALID_ID;
 801a2fa:	2301      	movs	r3, #1
 801a2fc:	e025      	b.n	801a34a <CoSuspendTask+0x86>
    }
#endif
    if(OSSchedLock != 0)
 801a2fe:	4b16      	ldr	r3, [pc, #88]	; (801a358 <CoSuspendTask+0x94>)
 801a300:	781b      	ldrb	r3, [r3, #0]
 801a302:	b2db      	uxtb	r3, r3
 801a304:	2b00      	cmp	r3, #0
 801a306:	d001      	beq.n	801a30c <CoSuspendTask+0x48>
    {
        return E_OS_IN_LOCK;
 801a308:	2315      	movs	r3, #21
 801a30a:	e01e      	b.n	801a34a <CoSuspendTask+0x86>
    }
    if(ptcb->state == TASK_WAITING)     /* Is task in WAITING list?           */
 801a30c:	68fb      	ldr	r3, [r7, #12]
 801a30e:	795b      	ldrb	r3, [r3, #5]
 801a310:	2b02      	cmp	r3, #2
 801a312:	d101      	bne.n	801a318 <CoSuspendTask+0x54>
    {
        return E_ALREADY_IN_WAITING;    /* Yes,error return                   */
 801a314:	230d      	movs	r3, #13
 801a316:	e018      	b.n	801a34a <CoSuspendTask+0x86>
    }
    
    OsSchedLock();	
 801a318:	4b0f      	ldr	r3, [pc, #60]	; (801a358 <CoSuspendTask+0x94>)
 801a31a:	781b      	ldrb	r3, [r3, #0]
 801a31c:	b2db      	uxtb	r3, r3
 801a31e:	3301      	adds	r3, #1
 801a320:	b2da      	uxtb	r2, r3
 801a322:	4b0d      	ldr	r3, [pc, #52]	; (801a358 <CoSuspendTask+0x94>)
 801a324:	701a      	strb	r2, [r3, #0]
    if(ptcb != TCBRunning)              /* Is runing task?                    */
 801a326:	4b0d      	ldr	r3, [pc, #52]	; (801a35c <CoSuspendTask+0x98>)
 801a328:	681b      	ldr	r3, [r3, #0]
 801a32a:	68fa      	ldr	r2, [r7, #12]
 801a32c:	429a      	cmp	r2, r3
 801a32e:	d003      	beq.n	801a338 <CoSuspendTask+0x74>
    {
        RemoveFromTCBRdyList(ptcb);     /* No,Remove task from READY list     */
 801a330:	68f8      	ldr	r0, [r7, #12]
 801a332:	f7ff fc9f 	bl	8019c74 <RemoveFromTCBRdyList>
 801a336:	e002      	b.n	801a33e <CoSuspendTask+0x7a>
    }
	else
	{
		TaskSchedReq = Co_TRUE;
 801a338:	4b09      	ldr	r3, [pc, #36]	; (801a360 <CoSuspendTask+0x9c>)
 801a33a:	2201      	movs	r2, #1
 801a33c:	701a      	strb	r2, [r3, #0]
	}

    ptcb->state = TASK_WAITING;	        /* Set task status as TASK_WAITING    */
 801a33e:	68fb      	ldr	r3, [r7, #12]
 801a340:	2202      	movs	r2, #2
 801a342:	715a      	strb	r2, [r3, #5]
    OsSchedUnlock();                    /* Call task schedule                 */
 801a344:	f7fd f954 	bl	80175f0 <OsSchedUnlock>
    return E_OK;                        /* Return OK                          */
 801a348:	2300      	movs	r3, #0
}
 801a34a:	4618      	mov	r0, r3
 801a34c:	3710      	adds	r7, #16
 801a34e:	46bd      	mov	sp, r7
 801a350:	bd80      	pop	{r7, pc}
 801a352:	bf00      	nop
 801a354:	2000d598 	.word	0x2000d598
 801a358:	20003749 	.word	0x20003749
 801a35c:	2000d728 	.word	0x2000d728
 801a360:	2000374a 	.word	0x2000374a

0801a364 <CoAwakeTask>:
 * @par Description
 * @details    This function is called to awake current task.	 
 *******************************************************************************
 */
StatusType CoAwakeTask(OS_TID taskID)
{
 801a364:	b580      	push	{r7, lr}
 801a366:	b084      	sub	sp, #16
 801a368:	af00      	add	r7, sp, #0
 801a36a:	4603      	mov	r3, r0
 801a36c:	71fb      	strb	r3, [r7, #7]
    P_OSTCB ptcb;
	
 	if(taskID == 0)                     /* Is idle task?                      */
 801a36e:	79fb      	ldrb	r3, [r7, #7]
 801a370:	2b00      	cmp	r3, #0
 801a372:	d101      	bne.n	801a378 <CoAwakeTask+0x14>
    {											 
        return E_PROTECTED_TASK;        /* Yes,error return                   */
 801a374:	2314      	movs	r3, #20
 801a376:	e03e      	b.n	801a3f6 <CoAwakeTask+0x92>
    } 
#if CFG_PAR_CHECKOUT_EN >0              /* Check validity of parameter        */
    if(taskID >= CFG_MAX_USER_TASKS + SYS_TASK_NUM)
 801a378:	79fb      	ldrb	r3, [r7, #7]
 801a37a:	2b05      	cmp	r3, #5
 801a37c:	d901      	bls.n	801a382 <CoAwakeTask+0x1e>
    {
        return E_INVALID_ID;
 801a37e:	2301      	movs	r3, #1
 801a380:	e039      	b.n	801a3f6 <CoAwakeTask+0x92>
    }
#endif
	ptcb = &TCBTbl[taskID];
 801a382:	79fa      	ldrb	r2, [r7, #7]
 801a384:	4613      	mov	r3, r2
 801a386:	005b      	lsls	r3, r3, #1
 801a388:	4413      	add	r3, r2
 801a38a:	011b      	lsls	r3, r3, #4
 801a38c:	4a1c      	ldr	r2, [pc, #112]	; (801a400 <CoAwakeTask+0x9c>)
 801a38e:	4413      	add	r3, r2
 801a390:	60fb      	str	r3, [r7, #12]
#if CFG_PAR_CHECKOUT_EN >0  
    if(ptcb->state == TASK_DORMANT)
 801a392:	68fb      	ldr	r3, [r7, #12]
 801a394:	795b      	ldrb	r3, [r3, #5]
 801a396:	2b03      	cmp	r3, #3
 801a398:	d101      	bne.n	801a39e <CoAwakeTask+0x3a>
    {
        return E_INVALID_ID;
 801a39a:	2301      	movs	r3, #1
 801a39c:	e02b      	b.n	801a3f6 <CoAwakeTask+0x92>
    }
#endif
    
    if(ptcb->state != TASK_WAITING)     /* Is task in WAITING list            */
 801a39e:	68fb      	ldr	r3, [r7, #12]
 801a3a0:	795b      	ldrb	r3, [r3, #5]
 801a3a2:	2b02      	cmp	r3, #2
 801a3a4:	d001      	beq.n	801a3aa <CoAwakeTask+0x46>
    {
        return E_TASK_NOT_WAITING;      /* No,error return                    */
 801a3a6:	230e      	movs	r3, #14
 801a3a8:	e025      	b.n	801a3f6 <CoAwakeTask+0x92>
    }	

#if CFG_TASK_WAITTING_EN > 0
    if(ptcb->delayTick != INVALID_VALUE)/* Is task in READY list              */
 801a3aa:	68fb      	ldr	r3, [r7, #12]
 801a3ac:	6a1b      	ldr	r3, [r3, #32]
 801a3ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801a3b2:	d001      	beq.n	801a3b8 <CoAwakeTask+0x54>
    {
        return E_TASK_WAIT_OTHER;       /* Yes,error return                   */
 801a3b4:	230f      	movs	r3, #15
 801a3b6:	e01e      	b.n	801a3f6 <CoAwakeTask+0x92>
    }

#if CFG_FLAG_EN > 0
    if(ptcb->pnode != Co_NULL)             /* Is task in flag waiting list       */
 801a3b8:	68fb      	ldr	r3, [r7, #12]
 801a3ba:	69db      	ldr	r3, [r3, #28]
 801a3bc:	2b00      	cmp	r3, #0
 801a3be:	d001      	beq.n	801a3c4 <CoAwakeTask+0x60>
    {
        return E_TASK_WAIT_OTHER;       /* Yes,error return                   */
 801a3c0:	230f      	movs	r3, #15
 801a3c2:	e018      	b.n	801a3f6 <CoAwakeTask+0x92>
    }
#endif

#if CFG_EVENT_EN>0
    if(ptcb->eventID != INVALID_ID)     /* Is task in event waiting list      */
 801a3c4:	68fb      	ldr	r3, [r7, #12]
 801a3c6:	7a1b      	ldrb	r3, [r3, #8]
 801a3c8:	2bff      	cmp	r3, #255	; 0xff
 801a3ca:	d001      	beq.n	801a3d0 <CoAwakeTask+0x6c>
    {
        return E_TASK_WAIT_OTHER;       /* Yes,error return                   */
 801a3cc:	230f      	movs	r3, #15
 801a3ce:	e012      	b.n	801a3f6 <CoAwakeTask+0x92>
    }
#endif	

#if CFG_MUTEX_EN > 0
    if(ptcb->mutexID != INVALID_ID)     /* Is task in mutex waiting list      */
 801a3d0:	68fb      	ldr	r3, [r7, #12]
 801a3d2:	79db      	ldrb	r3, [r3, #7]
 801a3d4:	2bff      	cmp	r3, #255	; 0xff
 801a3d6:	d001      	beq.n	801a3dc <CoAwakeTask+0x78>
    {
        return E_TASK_WAIT_OTHER;       /* Yes,error return                   */
 801a3d8:	230f      	movs	r3, #15
 801a3da:	e00c      	b.n	801a3f6 <CoAwakeTask+0x92>
#endif

#endif	  //CFG_TASK_WAITTING_EN

    /* All no,so WAITING state was set by CoSuspendTask()                     */
    OsSchedLock();                      /* Lock schedule                      */
 801a3dc:	4b09      	ldr	r3, [pc, #36]	; (801a404 <CoAwakeTask+0xa0>)
 801a3de:	781b      	ldrb	r3, [r3, #0]
 801a3e0:	b2db      	uxtb	r3, r3
 801a3e2:	3301      	adds	r3, #1
 801a3e4:	b2da      	uxtb	r2, r3
 801a3e6:	4b07      	ldr	r3, [pc, #28]	; (801a404 <CoAwakeTask+0xa0>)
 801a3e8:	701a      	strb	r2, [r3, #0]
	InsertToTCBRdyList(ptcb);           /* Insert the task into the READY list*/
 801a3ea:	68f8      	ldr	r0, [r7, #12]
 801a3ec:	f7ff fbbe 	bl	8019b6c <InsertToTCBRdyList>
    OsSchedUnlock();                    /* Unlock schedule                    */
 801a3f0:	f7fd f8fe 	bl	80175f0 <OsSchedUnlock>
    return E_OK;                        /* return OK                          */
 801a3f4:	2300      	movs	r3, #0
}
 801a3f6:	4618      	mov	r0, r3
 801a3f8:	3710      	adds	r7, #16
 801a3fa:	46bd      	mov	sp, r7
 801a3fc:	bd80      	pop	{r7, pc}
 801a3fe:	bf00      	nop
 801a400:	2000d598 	.word	0x2000d598
 801a404:	20003749 	.word	0x20003749

0801a408 <InsertDelayList>:
 * @par Description
 * @details    This function is called to insert task into DELAY list.
 *******************************************************************************
 */
void InsertDelayList(P_OSTCB ptcb,U32 ticks)
{
 801a408:	b480      	push	{r7}
 801a40a:	b085      	sub	sp, #20
 801a40c:	af00      	add	r7, sp, #0
 801a40e:	6078      	str	r0, [r7, #4]
 801a410:	6039      	str	r1, [r7, #0]
    S32 deltaTicks;
    P_OSTCB dlyNext;
    
    if(ticks == 0)                      /* Is delay tick == 0?                */
 801a412:	683b      	ldr	r3, [r7, #0]
 801a414:	2b00      	cmp	r3, #0
 801a416:	d065      	beq.n	801a4e4 <InsertDelayList+0xdc>
        return;                         /* Yes,do nothing,return              */
    if(DlyList == Co_NULL)                 /* Is no item in DELAY list?          */
 801a418:	4b35      	ldr	r3, [pc, #212]	; (801a4f0 <InsertDelayList+0xe8>)
 801a41a:	681b      	ldr	r3, [r3, #0]
 801a41c:	2b00      	cmp	r3, #0
 801a41e:	d106      	bne.n	801a42e <InsertDelayList+0x26>
    {
        ptcb->delayTick = ticks;        /* Yes,set this as first item         */
 801a420:	687b      	ldr	r3, [r7, #4]
 801a422:	683a      	ldr	r2, [r7, #0]
 801a424:	621a      	str	r2, [r3, #32]
        DlyList         = ptcb;
 801a426:	4a32      	ldr	r2, [pc, #200]	; (801a4f0 <InsertDelayList+0xe8>)
 801a428:	687b      	ldr	r3, [r7, #4]
 801a42a:	6013      	str	r3, [r2, #0]
 801a42c:	e053      	b.n	801a4d6 <InsertDelayList+0xce>
    }
    else
    {	
        /* No,find correct place ,and insert the task */
        dlyNext    = DlyList; 
 801a42e:	4b30      	ldr	r3, [pc, #192]	; (801a4f0 <InsertDelayList+0xe8>)
 801a430:	681b      	ldr	r3, [r3, #0]
 801a432:	60bb      	str	r3, [r7, #8]
        deltaTicks = ticks;             /* Get task delay ticks               */
 801a434:	683b      	ldr	r3, [r7, #0]
 801a436:	60fb      	str	r3, [r7, #12]
        
        /* Find correct place */
        while(dlyNext != Co_NULL)
 801a438:	e04a      	b.n	801a4d0 <InsertDelayList+0xc8>
        {		
            /* Get delta ticks with previous item */ 
            deltaTicks -= dlyNext->delayTick;  
 801a43a:	68fa      	ldr	r2, [r7, #12]
 801a43c:	68bb      	ldr	r3, [r7, #8]
 801a43e:	6a1b      	ldr	r3, [r3, #32]
 801a440:	1ad3      	subs	r3, r2, r3
 801a442:	60fb      	str	r3, [r7, #12]
            if(deltaTicks < 0)          /* Is delta ticks<0?                  */
 801a444:	68fb      	ldr	r3, [r7, #12]
 801a446:	2b00      	cmp	r3, #0
 801a448:	da2e      	bge.n	801a4a8 <InsertDelayList+0xa0>
            {	  
                /* Yes,get correct place */
                if(dlyNext->TCBprev != Co_NULL)   /* Is head item of DELAY list? */
 801a44a:	68bb      	ldr	r3, [r7, #8]
 801a44c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a44e:	2b00      	cmp	r3, #0
 801a450:	d00e      	beq.n	801a470 <InsertDelayList+0x68>
                {							   
                    dlyNext->TCBprev->TCBnext = ptcb;   /* No,insert into     */ 
 801a452:	68bb      	ldr	r3, [r7, #8]
 801a454:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a456:	687a      	ldr	r2, [r7, #4]
 801a458:	625a      	str	r2, [r3, #36]	; 0x24
                    ptcb->TCBprev             = dlyNext->TCBprev;
 801a45a:	68bb      	ldr	r3, [r7, #8]
 801a45c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801a45e:	687b      	ldr	r3, [r7, #4]
 801a460:	629a      	str	r2, [r3, #40]	; 0x28
                    ptcb->TCBnext             = dlyNext;
 801a462:	687b      	ldr	r3, [r7, #4]
 801a464:	68ba      	ldr	r2, [r7, #8]
 801a466:	625a      	str	r2, [r3, #36]	; 0x24
                    dlyNext->TCBprev          = ptcb;
 801a468:	68bb      	ldr	r3, [r7, #8]
 801a46a:	687a      	ldr	r2, [r7, #4]
 801a46c:	629a      	str	r2, [r3, #40]	; 0x28
 801a46e:	e00a      	b.n	801a486 <InsertDelayList+0x7e>
                }
                else                    /* Yes,set task as first item         */
                {							   
                    ptcb->TCBnext    = DlyList;
 801a470:	4b1f      	ldr	r3, [pc, #124]	; (801a4f0 <InsertDelayList+0xe8>)
 801a472:	681a      	ldr	r2, [r3, #0]
 801a474:	687b      	ldr	r3, [r7, #4]
 801a476:	625a      	str	r2, [r3, #36]	; 0x24
                    DlyList->TCBprev = ptcb;
 801a478:	4b1d      	ldr	r3, [pc, #116]	; (801a4f0 <InsertDelayList+0xe8>)
 801a47a:	681b      	ldr	r3, [r3, #0]
 801a47c:	687a      	ldr	r2, [r7, #4]
 801a47e:	629a      	str	r2, [r3, #40]	; 0x28
                    DlyList          = ptcb;
 801a480:	4a1b      	ldr	r2, [pc, #108]	; (801a4f0 <InsertDelayList+0xe8>)
 801a482:	687b      	ldr	r3, [r7, #4]
 801a484:	6013      	str	r3, [r2, #0]
                }
                ptcb->delayTick           = ptcb->TCBnext->delayTick+deltaTicks;
 801a486:	687b      	ldr	r3, [r7, #4]
 801a488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a48a:	6a1a      	ldr	r2, [r3, #32]
 801a48c:	68fb      	ldr	r3, [r7, #12]
 801a48e:	441a      	add	r2, r3
 801a490:	687b      	ldr	r3, [r7, #4]
 801a492:	621a      	str	r2, [r3, #32]
                ptcb->TCBnext->delayTick -= ptcb->delayTick; 
 801a494:	687b      	ldr	r3, [r7, #4]
 801a496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a498:	6a19      	ldr	r1, [r3, #32]
 801a49a:	687b      	ldr	r3, [r7, #4]
 801a49c:	6a1a      	ldr	r2, [r3, #32]
 801a49e:	687b      	ldr	r3, [r7, #4]
 801a4a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a4a2:	1a8a      	subs	r2, r1, r2
 801a4a4:	621a      	str	r2, [r3, #32]
                break;
 801a4a6:	e016      	b.n	801a4d6 <InsertDelayList+0xce>
            }
            /* Is last item in DELAY list? */
            else if((deltaTicks >= 0) && (dlyNext->TCBnext == Co_NULL) )
 801a4a8:	68fb      	ldr	r3, [r7, #12]
 801a4aa:	2b00      	cmp	r3, #0
 801a4ac:	db0d      	blt.n	801a4ca <InsertDelayList+0xc2>
 801a4ae:	68bb      	ldr	r3, [r7, #8]
 801a4b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a4b2:	2b00      	cmp	r3, #0
 801a4b4:	d109      	bne.n	801a4ca <InsertDelayList+0xc2>
            {								   
                ptcb->TCBprev    = dlyNext; /* Yes,insert into                */
 801a4b6:	687b      	ldr	r3, [r7, #4]
 801a4b8:	68ba      	ldr	r2, [r7, #8]
 801a4ba:	629a      	str	r2, [r3, #40]	; 0x28
                dlyNext->TCBnext = ptcb;	
 801a4bc:	68bb      	ldr	r3, [r7, #8]
 801a4be:	687a      	ldr	r2, [r7, #4]
 801a4c0:	625a      	str	r2, [r3, #36]	; 0x24
                ptcb->delayTick  = deltaTicks;
 801a4c2:	68fa      	ldr	r2, [r7, #12]
 801a4c4:	687b      	ldr	r3, [r7, #4]
 801a4c6:	621a      	str	r2, [r3, #32]
                break;
 801a4c8:	e005      	b.n	801a4d6 <InsertDelayList+0xce>
            }
            dlyNext = dlyNext->TCBnext; /* Get the next item in DELAY list    */
 801a4ca:	68bb      	ldr	r3, [r7, #8]
 801a4cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a4ce:	60bb      	str	r3, [r7, #8]
        while(dlyNext != Co_NULL)
 801a4d0:	68bb      	ldr	r3, [r7, #8]
 801a4d2:	2b00      	cmp	r3, #0
 801a4d4:	d1b1      	bne.n	801a43a <InsertDelayList+0x32>
        }
    }

    ptcb->state  = TASK_WAITING;        /* Set task status as TASK_WAITING    */
 801a4d6:	687b      	ldr	r3, [r7, #4]
 801a4d8:	2202      	movs	r2, #2
 801a4da:	715a      	strb	r2, [r3, #5]
    TaskSchedReq = Co_TRUE;
 801a4dc:	4b05      	ldr	r3, [pc, #20]	; (801a4f4 <InsertDelayList+0xec>)
 801a4de:	2201      	movs	r2, #1
 801a4e0:	701a      	strb	r2, [r3, #0]
 801a4e2:	e000      	b.n	801a4e6 <InsertDelayList+0xde>
        return;                         /* Yes,do nothing,return              */
 801a4e4:	bf00      	nop
}
 801a4e6:	3714      	adds	r7, #20
 801a4e8:	46bd      	mov	sp, r7
 801a4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a4ee:	4770      	bx	lr
 801a4f0:	2000d738 	.word	0x2000d738
 801a4f4:	2000374a 	.word	0x2000374a

0801a4f8 <RemoveDelayList>:
 * @par Description
 * @details    This function is called to remove task from the DELAY list.
 *******************************************************************************
 */
void RemoveDelayList(P_OSTCB ptcb)
{
 801a4f8:	b480      	push	{r7}
 801a4fa:	b083      	sub	sp, #12
 801a4fc:	af00      	add	r7, sp, #0
 801a4fe:	6078      	str	r0, [r7, #4]
    
    /* Is there only one item in the DELAY list?   */
    if((ptcb->TCBprev == Co_NULL) && ( ptcb->TCBnext == Co_NULL))
 801a500:	687b      	ldr	r3, [r7, #4]
 801a502:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a504:	2b00      	cmp	r3, #0
 801a506:	d107      	bne.n	801a518 <RemoveDelayList+0x20>
 801a508:	687b      	ldr	r3, [r7, #4]
 801a50a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a50c:	2b00      	cmp	r3, #0
 801a50e:	d103      	bne.n	801a518 <RemoveDelayList+0x20>
    {
        DlyList = Co_NULL;	                /* Yes,set DELAY list as Co_NULL         */
 801a510:	4b25      	ldr	r3, [pc, #148]	; (801a5a8 <RemoveDelayList+0xb0>)
 801a512:	2200      	movs	r2, #0
 801a514:	601a      	str	r2, [r3, #0]
 801a516:	e03d      	b.n	801a594 <RemoveDelayList+0x9c>
    }
    else if(ptcb->TCBprev == Co_NULL)      /* Is the first item in DELAY list?   */
 801a518:	687b      	ldr	r3, [r7, #4]
 801a51a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a51c:	2b00      	cmp	r3, #0
 801a51e:	d114      	bne.n	801a54a <RemoveDelayList+0x52>
    {   
	    /* Yes,remove task from the DELAY list,and reset the list             */
        DlyList	                  = ptcb->TCBnext;
 801a520:	687b      	ldr	r3, [r7, #4]
 801a522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a524:	4a20      	ldr	r2, [pc, #128]	; (801a5a8 <RemoveDelayList+0xb0>)
 801a526:	6013      	str	r3, [r2, #0]
        ptcb->TCBnext->delayTick += ptcb->delayTick;
 801a528:	687b      	ldr	r3, [r7, #4]
 801a52a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a52c:	6a19      	ldr	r1, [r3, #32]
 801a52e:	687b      	ldr	r3, [r7, #4]
 801a530:	6a1a      	ldr	r2, [r3, #32]
 801a532:	687b      	ldr	r3, [r7, #4]
 801a534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a536:	440a      	add	r2, r1
 801a538:	621a      	str	r2, [r3, #32]
        ptcb->TCBnext->TCBprev    = Co_NULL;
 801a53a:	687b      	ldr	r3, [r7, #4]
 801a53c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a53e:	2200      	movs	r2, #0
 801a540:	629a      	str	r2, [r3, #40]	; 0x28
        ptcb->TCBnext             = Co_NULL;
 801a542:	687b      	ldr	r3, [r7, #4]
 801a544:	2200      	movs	r2, #0
 801a546:	625a      	str	r2, [r3, #36]	; 0x24
 801a548:	e024      	b.n	801a594 <RemoveDelayList+0x9c>
        
    }
    else if(ptcb->TCBnext == Co_NULL)      /* Is the last item in DELAY list?    */
 801a54a:	687b      	ldr	r3, [r7, #4]
 801a54c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a54e:	2b00      	cmp	r3, #0
 801a550:	d107      	bne.n	801a562 <RemoveDelayList+0x6a>
    {									
        ptcb->TCBprev->TCBnext = Co_NULL;  /* Yes,remove task form DELAY list    */
 801a552:	687b      	ldr	r3, [r7, #4]
 801a554:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a556:	2200      	movs	r2, #0
 801a558:	625a      	str	r2, [r3, #36]	; 0x24
        ptcb->TCBprev          = Co_NULL;
 801a55a:	687b      	ldr	r3, [r7, #4]
 801a55c:	2200      	movs	r2, #0
 801a55e:	629a      	str	r2, [r3, #40]	; 0x28
 801a560:	e018      	b.n	801a594 <RemoveDelayList+0x9c>
    }
    else                                /* No, remove task from DELAY list    */
    {									
        ptcb->TCBprev->TCBnext    = ptcb->TCBnext;	
 801a562:	687b      	ldr	r3, [r7, #4]
 801a564:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a566:	687a      	ldr	r2, [r7, #4]
 801a568:	6a52      	ldr	r2, [r2, #36]	; 0x24
 801a56a:	625a      	str	r2, [r3, #36]	; 0x24
        ptcb->TCBnext->TCBprev    = ptcb->TCBprev;	
 801a56c:	687b      	ldr	r3, [r7, #4]
 801a56e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a570:	687a      	ldr	r2, [r7, #4]
 801a572:	6a92      	ldr	r2, [r2, #40]	; 0x28
 801a574:	629a      	str	r2, [r3, #40]	; 0x28
        ptcb->TCBnext->delayTick += ptcb->delayTick;
 801a576:	687b      	ldr	r3, [r7, #4]
 801a578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a57a:	6a19      	ldr	r1, [r3, #32]
 801a57c:	687b      	ldr	r3, [r7, #4]
 801a57e:	6a1a      	ldr	r2, [r3, #32]
 801a580:	687b      	ldr	r3, [r7, #4]
 801a582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a584:	440a      	add	r2, r1
 801a586:	621a      	str	r2, [r3, #32]
        ptcb->TCBnext     	      = Co_NULL;
 801a588:	687b      	ldr	r3, [r7, #4]
 801a58a:	2200      	movs	r2, #0
 801a58c:	625a      	str	r2, [r3, #36]	; 0x24
        ptcb->TCBprev             = Co_NULL;
 801a58e:	687b      	ldr	r3, [r7, #4]
 801a590:	2200      	movs	r2, #0
 801a592:	629a      	str	r2, [r3, #40]	; 0x28
    }
    ptcb->delayTick = INVALID_VALUE;  /* Set task delay tick value as invalid */		
 801a594:	687b      	ldr	r3, [r7, #4]
 801a596:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801a59a:	621a      	str	r2, [r3, #32]
}
 801a59c:	bf00      	nop
 801a59e:	370c      	adds	r7, #12
 801a5a0:	46bd      	mov	sp, r7
 801a5a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a5a6:	4770      	bx	lr
 801a5a8:	2000d738 	.word	0x2000d738

0801a5ac <CoGetOSTime>:
 * @par Description
 * @details    This function is called to obtain current system tick counter.
 *******************************************************************************
 */
U64 CoGetOSTime(void)
{
 801a5ac:	b490      	push	{r4, r7}
 801a5ae:	af00      	add	r7, sp, #0
    return OSTickCnt;                   /* Get system time(tick)              */
 801a5b0:	4b03      	ldr	r3, [pc, #12]	; (801a5c0 <CoGetOSTime+0x14>)
 801a5b2:	e9d3 3400 	ldrd	r3, r4, [r3]
}
 801a5b6:	4618      	mov	r0, r3
 801a5b8:	4621      	mov	r1, r4
 801a5ba:	46bd      	mov	sp, r7
 801a5bc:	bc90      	pop	{r4, r7}
 801a5be:	4770      	bx	lr
 801a5c0:	20003740 	.word	0x20003740

0801a5c4 <CoTickDelay>:
 *
 * @note       This function be called in ISR,do nothing and return immediately.
 *******************************************************************************	
 */
StatusType CoTickDelay(U32 ticks)
{
 801a5c4:	b580      	push	{r7, lr}
 801a5c6:	b082      	sub	sp, #8
 801a5c8:	af00      	add	r7, sp, #0
 801a5ca:	6078      	str	r0, [r7, #4]
    if(OSIntNesting >0)	                /* Is call in ISR?                    */
 801a5cc:	4b16      	ldr	r3, [pc, #88]	; (801a628 <CoTickDelay+0x64>)
 801a5ce:	781b      	ldrb	r3, [r3, #0]
 801a5d0:	b2db      	uxtb	r3, r3
 801a5d2:	2b00      	cmp	r3, #0
 801a5d4:	d001      	beq.n	801a5da <CoTickDelay+0x16>
    {
        return E_CALL;                  /* Yes,error return                   */
 801a5d6:	2303      	movs	r3, #3
 801a5d8:	e021      	b.n	801a61e <CoTickDelay+0x5a>
    }
    
    if(ticks == INVALID_VALUE)          /* Is tick==INVALID_VALUE?            */
 801a5da:	687b      	ldr	r3, [r7, #4]
 801a5dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801a5e0:	d101      	bne.n	801a5e6 <CoTickDelay+0x22>
    {
        return E_INVALID_PARAMETER;     /* Yes,error return                   */
 801a5e2:	2302      	movs	r3, #2
 801a5e4:	e01b      	b.n	801a61e <CoTickDelay+0x5a>
    }	
    if(ticks == 0)                      /* Is tick==0?                        */
 801a5e6:	687b      	ldr	r3, [r7, #4]
 801a5e8:	2b00      	cmp	r3, #0
 801a5ea:	d101      	bne.n	801a5f0 <CoTickDelay+0x2c>
    {
        return E_OK;                    /* Yes,do nothing ,return OK          */
 801a5ec:	2300      	movs	r3, #0
 801a5ee:	e016      	b.n	801a61e <CoTickDelay+0x5a>
    }
    if(OSSchedLock != 0)                /* Is OS lock?                        */
 801a5f0:	4b0e      	ldr	r3, [pc, #56]	; (801a62c <CoTickDelay+0x68>)
 801a5f2:	781b      	ldrb	r3, [r3, #0]
 801a5f4:	b2db      	uxtb	r3, r3
 801a5f6:	2b00      	cmp	r3, #0
 801a5f8:	d001      	beq.n	801a5fe <CoTickDelay+0x3a>
    {
        return E_OS_IN_LOCK;            /* Yes,error return                   */
 801a5fa:	2315      	movs	r3, #21
 801a5fc:	e00f      	b.n	801a61e <CoTickDelay+0x5a>
    }	
    OsSchedLock();                      /* Lock schedule                      */
 801a5fe:	4b0b      	ldr	r3, [pc, #44]	; (801a62c <CoTickDelay+0x68>)
 801a600:	781b      	ldrb	r3, [r3, #0]
 801a602:	b2db      	uxtb	r3, r3
 801a604:	3301      	adds	r3, #1
 801a606:	b2da      	uxtb	r2, r3
 801a608:	4b08      	ldr	r3, [pc, #32]	; (801a62c <CoTickDelay+0x68>)
 801a60a:	701a      	strb	r2, [r3, #0]
    InsertDelayList(TCBRunning,ticks);	/* Insert task in DELAY list          */
 801a60c:	4b08      	ldr	r3, [pc, #32]	; (801a630 <CoTickDelay+0x6c>)
 801a60e:	681b      	ldr	r3, [r3, #0]
 801a610:	6879      	ldr	r1, [r7, #4]
 801a612:	4618      	mov	r0, r3
 801a614:	f7ff fef8 	bl	801a408 <InsertDelayList>
    OsSchedUnlock();                /* Unlock schedule,and call task schedule */
 801a618:	f7fc ffea 	bl	80175f0 <OsSchedUnlock>
    return E_OK;                        /* Return OK                          */
 801a61c:	2300      	movs	r3, #0
}
 801a61e:	4618      	mov	r0, r3
 801a620:	3708      	adds	r7, #8
 801a622:	46bd      	mov	sp, r7
 801a624:	bd80      	pop	{r7, pc}
 801a626:	bf00      	nop
 801a628:	20003748 	.word	0x20003748
 801a62c:	20003749 	.word	0x20003749
 801a630:	2000d728 	.word	0x2000d728

0801a634 <CoResetTaskDelayTick>:
 * @par Description
 * @details    This function delay specify ticks for current task.
 ******************************************************************************* 	
 */
StatusType CoResetTaskDelayTick(OS_TID taskID,U32 ticks)
{
 801a634:	b580      	push	{r7, lr}
 801a636:	b084      	sub	sp, #16
 801a638:	af00      	add	r7, sp, #0
 801a63a:	4603      	mov	r3, r0
 801a63c:	6039      	str	r1, [r7, #0]
 801a63e:	71fb      	strb	r3, [r7, #7]
    P_OSTCB ptcb;
	

#if CFG_PAR_CHECKOUT_EN >0              /* Check validity of parameter        */
    if(taskID >= CFG_MAX_USER_TASKS + SYS_TASK_NUM)
 801a640:	79fb      	ldrb	r3, [r7, #7]
 801a642:	2b05      	cmp	r3, #5
 801a644:	d901      	bls.n	801a64a <CoResetTaskDelayTick+0x16>
    {
        return E_INVALID_ID;
 801a646:	2301      	movs	r3, #1
 801a648:	e02c      	b.n	801a6a4 <CoResetTaskDelayTick+0x70>
    }
#endif

	ptcb = &TCBTbl[taskID];
 801a64a:	79fa      	ldrb	r2, [r7, #7]
 801a64c:	4613      	mov	r3, r2
 801a64e:	005b      	lsls	r3, r3, #1
 801a650:	4413      	add	r3, r2
 801a652:	011b      	lsls	r3, r3, #4
 801a654:	4a15      	ldr	r2, [pc, #84]	; (801a6ac <CoResetTaskDelayTick+0x78>)
 801a656:	4413      	add	r3, r2
 801a658:	60fb      	str	r3, [r7, #12]
#if CFG_PAR_CHECKOUT_EN >0 
    if(ptcb->stkPtr == Co_NULL)
 801a65a:	68fb      	ldr	r3, [r7, #12]
 801a65c:	681b      	ldr	r3, [r3, #0]
 801a65e:	2b00      	cmp	r3, #0
 801a660:	d101      	bne.n	801a666 <CoResetTaskDelayTick+0x32>
    {
        return E_INVALID_ID;
 801a662:	2301      	movs	r3, #1
 801a664:	e01e      	b.n	801a6a4 <CoResetTaskDelayTick+0x70>
    }
#endif

    if(ptcb->delayTick == INVALID_VALUE)  /* Is tick==INVALID_VALUE?          */
 801a666:	68fb      	ldr	r3, [r7, #12]
 801a668:	6a1b      	ldr	r3, [r3, #32]
 801a66a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801a66e:	d101      	bne.n	801a674 <CoResetTaskDelayTick+0x40>
    {
        return E_NOT_IN_DELAY_LIST;       /* Yes,error return                 */
 801a670:	2311      	movs	r3, #17
 801a672:	e017      	b.n	801a6a4 <CoResetTaskDelayTick+0x70>
    }
    OsSchedLock();                        /* Lock schedule                    */
 801a674:	4b0e      	ldr	r3, [pc, #56]	; (801a6b0 <CoResetTaskDelayTick+0x7c>)
 801a676:	781b      	ldrb	r3, [r3, #0]
 801a678:	b2db      	uxtb	r3, r3
 801a67a:	3301      	adds	r3, #1
 801a67c:	b2da      	uxtb	r2, r3
 801a67e:	4b0c      	ldr	r3, [pc, #48]	; (801a6b0 <CoResetTaskDelayTick+0x7c>)
 801a680:	701a      	strb	r2, [r3, #0]
    RemoveDelayList(ptcb);                /* Remove task from the DELAY list  */
 801a682:	68f8      	ldr	r0, [r7, #12]
 801a684:	f7ff ff38 	bl	801a4f8 <RemoveDelayList>
    
    if(ticks == 0)                        /* Is delay tick==0?                */
 801a688:	683b      	ldr	r3, [r7, #0]
 801a68a:	2b00      	cmp	r3, #0
 801a68c:	d103      	bne.n	801a696 <CoResetTaskDelayTick+0x62>
    {
        InsertToTCBRdyList(ptcb);         /* Insert task into the DELAY list  */
 801a68e:	68f8      	ldr	r0, [r7, #12]
 801a690:	f7ff fa6c 	bl	8019b6c <InsertToTCBRdyList>
 801a694:	e003      	b.n	801a69e <CoResetTaskDelayTick+0x6a>
    }
    else
    {									
        InsertDelayList(ptcb,ticks);      /* No,insert task into DELAY list   */
 801a696:	6839      	ldr	r1, [r7, #0]
 801a698:	68f8      	ldr	r0, [r7, #12]
 801a69a:	f7ff feb5 	bl	801a408 <InsertDelayList>
    }
    OsSchedUnlock();                /* Unlock schedule,and call task schedule */
 801a69e:	f7fc ffa7 	bl	80175f0 <OsSchedUnlock>
    return E_OK;                          /* Return OK                        */
 801a6a2:	2300      	movs	r3, #0
}
 801a6a4:	4618      	mov	r0, r3
 801a6a6:	3710      	adds	r7, #16
 801a6a8:	46bd      	mov	sp, r7
 801a6aa:	bd80      	pop	{r7, pc}
 801a6ac:	2000d598 	.word	0x2000d598
 801a6b0:	20003749 	.word	0x20003749

0801a6b4 <CoTimeDelay>:
 * @note       If this function called in ISR,do nothing and return immediately.
 *******************************************************************************
 */
#if CFG_TIME_DELAY_EN >0
StatusType  CoTimeDelay(U8 hour,U8 minute,U8 sec,U16 millsec)
{
 801a6b4:	b590      	push	{r4, r7, lr}
 801a6b6:	b085      	sub	sp, #20
 801a6b8:	af00      	add	r7, sp, #0
 801a6ba:	4604      	mov	r4, r0
 801a6bc:	4608      	mov	r0, r1
 801a6be:	4611      	mov	r1, r2
 801a6c0:	461a      	mov	r2, r3
 801a6c2:	4623      	mov	r3, r4
 801a6c4:	71fb      	strb	r3, [r7, #7]
 801a6c6:	4603      	mov	r3, r0
 801a6c8:	71bb      	strb	r3, [r7, #6]
 801a6ca:	460b      	mov	r3, r1
 801a6cc:	717b      	strb	r3, [r7, #5]
 801a6ce:	4613      	mov	r3, r2
 801a6d0:	807b      	strh	r3, [r7, #2]
    U32	ticks;
#if CFG_PAR_CHECKOUT_EN >0              /* Check validity of parameter        */
    if(OSIntNesting > 0)
 801a6d2:	4b20      	ldr	r3, [pc, #128]	; (801a754 <CoTimeDelay+0xa0>)
 801a6d4:	781b      	ldrb	r3, [r3, #0]
 801a6d6:	b2db      	uxtb	r3, r3
 801a6d8:	2b00      	cmp	r3, #0
 801a6da:	d001      	beq.n	801a6e0 <CoTimeDelay+0x2c>
    {
        return E_CALL;
 801a6dc:	2303      	movs	r3, #3
 801a6de:	e034      	b.n	801a74a <CoTimeDelay+0x96>
    }
    if((minute > 59)||(sec > 59)||(millsec > 999))
 801a6e0:	79bb      	ldrb	r3, [r7, #6]
 801a6e2:	2b3b      	cmp	r3, #59	; 0x3b
 801a6e4:	d806      	bhi.n	801a6f4 <CoTimeDelay+0x40>
 801a6e6:	797b      	ldrb	r3, [r7, #5]
 801a6e8:	2b3b      	cmp	r3, #59	; 0x3b
 801a6ea:	d803      	bhi.n	801a6f4 <CoTimeDelay+0x40>
 801a6ec:	887b      	ldrh	r3, [r7, #2]
 801a6ee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801a6f2:	d301      	bcc.n	801a6f8 <CoTimeDelay+0x44>
        return E_INVALID_PARAMETER;
 801a6f4:	2302      	movs	r3, #2
 801a6f6:	e028      	b.n	801a74a <CoTimeDelay+0x96>
#endif
    if(OSSchedLock != 0)                /* Is OS lock?                        */
 801a6f8:	4b17      	ldr	r3, [pc, #92]	; (801a758 <CoTimeDelay+0xa4>)
 801a6fa:	781b      	ldrb	r3, [r3, #0]
 801a6fc:	b2db      	uxtb	r3, r3
 801a6fe:	2b00      	cmp	r3, #0
 801a700:	d001      	beq.n	801a706 <CoTimeDelay+0x52>
    {
        return E_OS_IN_LOCK;            /* Yes,error return                   */
 801a702:	2315      	movs	r3, #21
 801a704:	e021      	b.n	801a74a <CoTimeDelay+0x96>
    }	
    
    /* Get tick counter from time */
    ticks = ((hour*3600) + (minute*60) + (sec)) * (CFG_SYSTICK_FREQ)\
 801a706:	79fb      	ldrb	r3, [r7, #7]
 801a708:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 801a70c:	fb02 f103 	mul.w	r1, r2, r3
 801a710:	79ba      	ldrb	r2, [r7, #6]
 801a712:	4613      	mov	r3, r2
 801a714:	011b      	lsls	r3, r3, #4
 801a716:	1a9b      	subs	r3, r3, r2
 801a718:	009b      	lsls	r3, r3, #2
 801a71a:	18ca      	adds	r2, r1, r3
 801a71c:	797b      	ldrb	r3, [r7, #5]
 801a71e:	4413      	add	r3, r2
 801a720:	2264      	movs	r2, #100	; 0x64
 801a722:	fb02 f203 	mul.w	r2, r2, r3
            + (millsec*CFG_SYSTICK_FREQ + 500)/1000;
 801a726:	887b      	ldrh	r3, [r7, #2]
 801a728:	2164      	movs	r1, #100	; 0x64
 801a72a:	fb01 f303 	mul.w	r3, r1, r3
 801a72e:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 801a732:	490a      	ldr	r1, [pc, #40]	; (801a75c <CoTimeDelay+0xa8>)
 801a734:	fb81 0103 	smull	r0, r1, r1, r3
 801a738:	1189      	asrs	r1, r1, #6
 801a73a:	17db      	asrs	r3, r3, #31
 801a73c:	1acb      	subs	r3, r1, r3
 801a73e:	4413      	add	r3, r2
    ticks = ((hour*3600) + (minute*60) + (sec)) * (CFG_SYSTICK_FREQ)\
 801a740:	60fb      	str	r3, [r7, #12]
    
    CoTickDelay(ticks);                 /* Call tick delay                    */
 801a742:	68f8      	ldr	r0, [r7, #12]
 801a744:	f7ff ff3e 	bl	801a5c4 <CoTickDelay>
    return E_OK;                        /* Return OK                          */
 801a748:	2300      	movs	r3, #0
}
 801a74a:	4618      	mov	r0, r3
 801a74c:	3714      	adds	r7, #20
 801a74e:	46bd      	mov	sp, r7
 801a750:	bd90      	pop	{r4, r7, pc}
 801a752:	bf00      	nop
 801a754:	20003748 	.word	0x20003748
 801a758:	20003749 	.word	0x20003749
 801a75c:	10624dd3 	.word	0x10624dd3

0801a760 <TimeDispose>:
 * @par Description
 * @details    This function is called to dispose time delay of all task.  
 *******************************************************************************
 */
void TimeDispose(void)
{  
 801a760:	b580      	push	{r7, lr}
 801a762:	b082      	sub	sp, #8
 801a764:	af00      	add	r7, sp, #0
    P_OSTCB	dlyList;
    
    dlyList = DlyList;                  /* Get first item of DELAY list       */
 801a766:	4b1b      	ldr	r3, [pc, #108]	; (801a7d4 <TimeDispose+0x74>)
 801a768:	681b      	ldr	r3, [r3, #0]
 801a76a:	607b      	str	r3, [r7, #4]
    while((dlyList != Co_NULL) && (dlyList->delayTick == 0) )
 801a76c:	e026      	b.n	801a7bc <TimeDispose+0x5c>
    {	
    
#if CFG_EVENT_EN > 0
        if(dlyList->eventID != INVALID_ID) /* Is task in event waiting list?  */
 801a76e:	687b      	ldr	r3, [r7, #4]
 801a770:	7a1b      	ldrb	r3, [r3, #8]
 801a772:	2bff      	cmp	r3, #255	; 0xff
 801a774:	d002      	beq.n	801a77c <TimeDispose+0x1c>
        {								   
            RemoveEventWaittingList(dlyList); /* Yes,remove task from list    */	
 801a776:	6878      	ldr	r0, [r7, #4]
 801a778:	f7fd f9ac 	bl	8017ad4 <RemoveEventWaittingList>
        }
#endif

#if CFG_FLAG_EN  > 0
        if(dlyList->pnode != Co_NULL)          /* Is task in flag waiting list?  */
 801a77c:	687b      	ldr	r3, [r7, #4]
 801a77e:	69db      	ldr	r3, [r3, #28]
 801a780:	2b00      	cmp	r3, #0
 801a782:	d004      	beq.n	801a78e <TimeDispose+0x2e>
        {
            RemoveLinkNode(dlyList->pnode); /* Yes,remove task from list      */	
 801a784:	687b      	ldr	r3, [r7, #4]
 801a786:	69db      	ldr	r3, [r3, #28]
 801a788:	4618      	mov	r0, r3
 801a78a:	f7fd fe31 	bl	80183f0 <RemoveLinkNode>
        }
#endif
        dlyList->delayTick = INVALID_VALUE; /* Set delay tick value as invalid*/
 801a78e:	687b      	ldr	r3, [r7, #4]
 801a790:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801a794:	621a      	str	r2, [r3, #32]
        DlyList = dlyList->TCBnext; /* Get next item as the head of DELAY list*/
 801a796:	687b      	ldr	r3, [r7, #4]
 801a798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a79a:	4a0e      	ldr	r2, [pc, #56]	; (801a7d4 <TimeDispose+0x74>)
 801a79c:	6013      	str	r3, [r2, #0]
        dlyList->TCBnext   = Co_NULL;
 801a79e:	687b      	ldr	r3, [r7, #4]
 801a7a0:	2200      	movs	r2, #0
 801a7a2:	625a      	str	r2, [r3, #36]	; 0x24

		InsertToTCBRdyList(dlyList);        /* Insert task into READY list    */
 801a7a4:	6878      	ldr	r0, [r7, #4]
 801a7a6:	f7ff f9e1 	bl	8019b6c <InsertToTCBRdyList>
        
        dlyList = DlyList;                /* Get the first item of DELAY list */
 801a7aa:	4b0a      	ldr	r3, [pc, #40]	; (801a7d4 <TimeDispose+0x74>)
 801a7ac:	681b      	ldr	r3, [r3, #0]
 801a7ae:	607b      	str	r3, [r7, #4]
        if(dlyList != Co_NULL)                 /* Is DELAY list as Co_NULL?         */
 801a7b0:	687b      	ldr	r3, [r7, #4]
 801a7b2:	2b00      	cmp	r3, #0
 801a7b4:	d002      	beq.n	801a7bc <TimeDispose+0x5c>
        {
            dlyList->TCBprev = Co_NULL;        /* No,initialize the first item   */
 801a7b6:	687b      	ldr	r3, [r7, #4]
 801a7b8:	2200      	movs	r2, #0
 801a7ba:	629a      	str	r2, [r3, #40]	; 0x28
    while((dlyList != Co_NULL) && (dlyList->delayTick == 0) )
 801a7bc:	687b      	ldr	r3, [r7, #4]
 801a7be:	2b00      	cmp	r3, #0
 801a7c0:	d003      	beq.n	801a7ca <TimeDispose+0x6a>
 801a7c2:	687b      	ldr	r3, [r7, #4]
 801a7c4:	6a1b      	ldr	r3, [r3, #32]
 801a7c6:	2b00      	cmp	r3, #0
 801a7c8:	d0d1      	beq.n	801a76e <TimeDispose+0xe>
        }
    }
}
 801a7ca:	bf00      	nop
 801a7cc:	3708      	adds	r7, #8
 801a7ce:	46bd      	mov	sp, r7
 801a7d0:	bd80      	pop	{r7, pc}
 801a7d2:	bf00      	nop
 801a7d4:	2000d738 	.word	0x2000d738

0801a7d8 <isr_TimeDispose>:
 * @details    This function is called in systick interrupt to dispose time delay   
 *             of all task.
 *******************************************************************************
 */
void isr_TimeDispose(void)
{
 801a7d8:	b580      	push	{r7, lr}
 801a7da:	af00      	add	r7, sp, #0
    if(OSSchedLock > 1)                 /* Is schedule lock?                  */
 801a7dc:	4b07      	ldr	r3, [pc, #28]	; (801a7fc <isr_TimeDispose+0x24>)
 801a7de:	781b      	ldrb	r3, [r3, #0]
 801a7e0:	b2db      	uxtb	r3, r3
 801a7e2:	2b01      	cmp	r3, #1
 801a7e4:	d906      	bls.n	801a7f4 <isr_TimeDispose+0x1c>
    {
        IsrReq = Co_TRUE;
 801a7e6:	4b06      	ldr	r3, [pc, #24]	; (801a800 <isr_TimeDispose+0x28>)
 801a7e8:	2201      	movs	r2, #1
 801a7ea:	701a      	strb	r2, [r3, #0]
        TimeReq = Co_TRUE;                 /* Yes,set time request Co_TRUE          */
 801a7ec:	4b05      	ldr	r3, [pc, #20]	; (801a804 <isr_TimeDispose+0x2c>)
 801a7ee:	2201      	movs	r2, #1
 801a7f0:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        TimeDispose();                  /* No,call handler                    */
    }
}
 801a7f2:	e001      	b.n	801a7f8 <isr_TimeDispose+0x20>
        TimeDispose();                  /* No,call handler                    */
 801a7f4:	f7ff ffb4 	bl	801a760 <TimeDispose>
}
 801a7f8:	bf00      	nop
 801a7fa:	bd80      	pop	{r7, pc}
 801a7fc:	20003749 	.word	0x20003749
 801a800:	2000d594 	.word	0x2000d594
 801a804:	2000d595 	.word	0x2000d595

0801a808 <InsertTmrList>:
 * @par Description
 * @details    This function is called to insert a timer into the timer list.  
 *******************************************************************************
 */
static void InsertTmrList(OS_TCID tmrID)
{
 801a808:	b590      	push	{r4, r7, lr}
 801a80a:	b087      	sub	sp, #28
 801a80c:	af00      	add	r7, sp, #0
 801a80e:	4603      	mov	r3, r0
 801a810:	71fb      	strb	r3, [r7, #7]
    P_TmrCtrl pTmr;
    S32 deltaTicks;
    U32 tmrCnt;
    tmrCnt = TmrTbl[tmrID].tmrCnt;      /* Get timer time                     */
 801a812:	79fa      	ldrb	r2, [r7, #7]
 801a814:	4970      	ldr	r1, [pc, #448]	; (801a9d8 <InsertTmrList+0x1d0>)
 801a816:	4613      	mov	r3, r2
 801a818:	005b      	lsls	r3, r3, #1
 801a81a:	4413      	add	r3, r2
 801a81c:	00db      	lsls	r3, r3, #3
 801a81e:	440b      	add	r3, r1
 801a820:	3304      	adds	r3, #4
 801a822:	681b      	ldr	r3, [r3, #0]
 801a824:	60fb      	str	r3, [r7, #12]
    
    if(tmrCnt == 0)                     /* Is timer time==0?                  */
 801a826:	68fb      	ldr	r3, [r7, #12]
 801a828:	2b00      	cmp	r3, #0
 801a82a:	f000 80d1 	beq.w	801a9d0 <InsertTmrList+0x1c8>
    {
        return;                         /* Do nothing,return                  */
    }
    
    OsSchedLock();                      /* Lock schedule                      */
 801a82e:	4b6b      	ldr	r3, [pc, #428]	; (801a9dc <InsertTmrList+0x1d4>)
 801a830:	781b      	ldrb	r3, [r3, #0]
 801a832:	b2db      	uxtb	r3, r3
 801a834:	3301      	adds	r3, #1
 801a836:	b2da      	uxtb	r2, r3
 801a838:	4b68      	ldr	r3, [pc, #416]	; (801a9dc <InsertTmrList+0x1d4>)
 801a83a:	701a      	strb	r2, [r3, #0]
    if(TmrList == Co_NULL)                 /* Is no item in timer list?          */
 801a83c:	4b68      	ldr	r3, [pc, #416]	; (801a9e0 <InsertTmrList+0x1d8>)
 801a83e:	681b      	ldr	r3, [r3, #0]
 801a840:	2b00      	cmp	r3, #0
 801a842:	d109      	bne.n	801a858 <InsertTmrList+0x50>
    {
        TmrList = &TmrTbl[tmrID];       /* Yes,set this as first item         */
 801a844:	79fa      	ldrb	r2, [r7, #7]
 801a846:	4613      	mov	r3, r2
 801a848:	005b      	lsls	r3, r3, #1
 801a84a:	4413      	add	r3, r2
 801a84c:	00db      	lsls	r3, r3, #3
 801a84e:	4a62      	ldr	r2, [pc, #392]	; (801a9d8 <InsertTmrList+0x1d0>)
 801a850:	4413      	add	r3, r2
 801a852:	4a63      	ldr	r2, [pc, #396]	; (801a9e0 <InsertTmrList+0x1d8>)
 801a854:	6013      	str	r3, [r2, #0]
 801a856:	e0b8      	b.n	801a9ca <InsertTmrList+0x1c2>
    }
    else                  /* No,find correct place ,and insert inserted timer */
    {								    
      	pTmr       = TmrList; 
 801a858:	4b61      	ldr	r3, [pc, #388]	; (801a9e0 <InsertTmrList+0x1d8>)
 801a85a:	681b      	ldr	r3, [r3, #0]
 801a85c:	617b      	str	r3, [r7, #20]
      	deltaTicks = tmrCnt;            /* Get timer tick                     */
 801a85e:	68fb      	ldr	r3, [r7, #12]
 801a860:	613b      	str	r3, [r7, #16]
      	
      	/* find correct place */
      	while(pTmr != Co_NULL)
 801a862:	e0ae      	b.n	801a9c2 <InsertTmrList+0x1ba>
      	{				    
            deltaTicks -= pTmr->tmrCnt; /* Get ticks with previous item       */
 801a864:	693a      	ldr	r2, [r7, #16]
 801a866:	697b      	ldr	r3, [r7, #20]
 801a868:	685b      	ldr	r3, [r3, #4]
 801a86a:	1ad3      	subs	r3, r2, r3
 801a86c:	613b      	str	r3, [r7, #16]
            if(deltaTicks < 0)          /* Is delta ticks<0?                  */  
 801a86e:	693b      	ldr	r3, [r7, #16]
 801a870:	2b00      	cmp	r3, #0
 801a872:	da7e      	bge.n	801a972 <InsertTmrList+0x16a>
            {	
                /* Yes,get correct place */
                if(pTmr->tmrPrev!= Co_NULL)/* Is head item of timer list?        */
 801a874:	697b      	ldr	r3, [r7, #20]
 801a876:	695b      	ldr	r3, [r3, #20]
 801a878:	2b00      	cmp	r3, #0
 801a87a:	d028      	beq.n	801a8ce <InsertTmrList+0xc6>
                {	
                    /* No,insert into */
                    pTmr->tmrPrev->tmrNext = &TmrTbl[tmrID]; 
 801a87c:	79fa      	ldrb	r2, [r7, #7]
 801a87e:	697b      	ldr	r3, [r7, #20]
 801a880:	6959      	ldr	r1, [r3, #20]
 801a882:	4613      	mov	r3, r2
 801a884:	005b      	lsls	r3, r3, #1
 801a886:	4413      	add	r3, r2
 801a888:	00db      	lsls	r3, r3, #3
 801a88a:	4a53      	ldr	r2, [pc, #332]	; (801a9d8 <InsertTmrList+0x1d0>)
 801a88c:	4413      	add	r3, r2
 801a88e:	610b      	str	r3, [r1, #16]
                    TmrTbl[tmrID].tmrPrev  = pTmr->tmrPrev;
 801a890:	79fa      	ldrb	r2, [r7, #7]
 801a892:	697b      	ldr	r3, [r7, #20]
 801a894:	6959      	ldr	r1, [r3, #20]
 801a896:	4850      	ldr	r0, [pc, #320]	; (801a9d8 <InsertTmrList+0x1d0>)
 801a898:	4613      	mov	r3, r2
 801a89a:	005b      	lsls	r3, r3, #1
 801a89c:	4413      	add	r3, r2
 801a89e:	00db      	lsls	r3, r3, #3
 801a8a0:	4403      	add	r3, r0
 801a8a2:	3314      	adds	r3, #20
 801a8a4:	6019      	str	r1, [r3, #0]
                    TmrTbl[tmrID].tmrNext  = pTmr;
 801a8a6:	79fa      	ldrb	r2, [r7, #7]
 801a8a8:	494b      	ldr	r1, [pc, #300]	; (801a9d8 <InsertTmrList+0x1d0>)
 801a8aa:	4613      	mov	r3, r2
 801a8ac:	005b      	lsls	r3, r3, #1
 801a8ae:	4413      	add	r3, r2
 801a8b0:	00db      	lsls	r3, r3, #3
 801a8b2:	440b      	add	r3, r1
 801a8b4:	3310      	adds	r3, #16
 801a8b6:	697a      	ldr	r2, [r7, #20]
 801a8b8:	601a      	str	r2, [r3, #0]
                    pTmr->tmrPrev          = &TmrTbl[tmrID];
 801a8ba:	79fa      	ldrb	r2, [r7, #7]
 801a8bc:	4613      	mov	r3, r2
 801a8be:	005b      	lsls	r3, r3, #1
 801a8c0:	4413      	add	r3, r2
 801a8c2:	00db      	lsls	r3, r3, #3
 801a8c4:	4a44      	ldr	r2, [pc, #272]	; (801a9d8 <InsertTmrList+0x1d0>)
 801a8c6:	441a      	add	r2, r3
 801a8c8:	697b      	ldr	r3, [r7, #20]
 801a8ca:	615a      	str	r2, [r3, #20]
 801a8cc:	e01d      	b.n	801a90a <InsertTmrList+0x102>
                }
                else                    /* Yes,set task as first item         */ 	
                {
                    TmrTbl[tmrID].tmrNext = TmrList;
 801a8ce:	79fa      	ldrb	r2, [r7, #7]
 801a8d0:	4b43      	ldr	r3, [pc, #268]	; (801a9e0 <InsertTmrList+0x1d8>)
 801a8d2:	6819      	ldr	r1, [r3, #0]
 801a8d4:	4840      	ldr	r0, [pc, #256]	; (801a9d8 <InsertTmrList+0x1d0>)
 801a8d6:	4613      	mov	r3, r2
 801a8d8:	005b      	lsls	r3, r3, #1
 801a8da:	4413      	add	r3, r2
 801a8dc:	00db      	lsls	r3, r3, #3
 801a8de:	4403      	add	r3, r0
 801a8e0:	3310      	adds	r3, #16
 801a8e2:	6019      	str	r1, [r3, #0]
                    TmrList->tmrPrev      = &TmrTbl[tmrID];
 801a8e4:	79fa      	ldrb	r2, [r7, #7]
 801a8e6:	4b3e      	ldr	r3, [pc, #248]	; (801a9e0 <InsertTmrList+0x1d8>)
 801a8e8:	6819      	ldr	r1, [r3, #0]
 801a8ea:	4613      	mov	r3, r2
 801a8ec:	005b      	lsls	r3, r3, #1
 801a8ee:	4413      	add	r3, r2
 801a8f0:	00db      	lsls	r3, r3, #3
 801a8f2:	4a39      	ldr	r2, [pc, #228]	; (801a9d8 <InsertTmrList+0x1d0>)
 801a8f4:	4413      	add	r3, r2
 801a8f6:	614b      	str	r3, [r1, #20]
                    TmrList               = &TmrTbl[tmrID];
 801a8f8:	79fa      	ldrb	r2, [r7, #7]
 801a8fa:	4613      	mov	r3, r2
 801a8fc:	005b      	lsls	r3, r3, #1
 801a8fe:	4413      	add	r3, r2
 801a900:	00db      	lsls	r3, r3, #3
 801a902:	4a35      	ldr	r2, [pc, #212]	; (801a9d8 <InsertTmrList+0x1d0>)
 801a904:	4413      	add	r3, r2
 801a906:	4a36      	ldr	r2, [pc, #216]	; (801a9e0 <InsertTmrList+0x1d8>)
 801a908:	6013      	str	r3, [r2, #0]
                }
                TmrTbl[tmrID].tmrCnt            = TmrTbl[tmrID].tmrNext->tmrCnt+deltaTicks;
 801a90a:	79fa      	ldrb	r2, [r7, #7]
 801a90c:	4932      	ldr	r1, [pc, #200]	; (801a9d8 <InsertTmrList+0x1d0>)
 801a90e:	4613      	mov	r3, r2
 801a910:	005b      	lsls	r3, r3, #1
 801a912:	4413      	add	r3, r2
 801a914:	00db      	lsls	r3, r3, #3
 801a916:	440b      	add	r3, r1
 801a918:	3310      	adds	r3, #16
 801a91a:	681b      	ldr	r3, [r3, #0]
 801a91c:	6859      	ldr	r1, [r3, #4]
 801a91e:	693b      	ldr	r3, [r7, #16]
 801a920:	79fa      	ldrb	r2, [r7, #7]
 801a922:	4419      	add	r1, r3
 801a924:	482c      	ldr	r0, [pc, #176]	; (801a9d8 <InsertTmrList+0x1d0>)
 801a926:	4613      	mov	r3, r2
 801a928:	005b      	lsls	r3, r3, #1
 801a92a:	4413      	add	r3, r2
 801a92c:	00db      	lsls	r3, r3, #3
 801a92e:	4403      	add	r3, r0
 801a930:	3304      	adds	r3, #4
 801a932:	6019      	str	r1, [r3, #0]
                TmrTbl[tmrID].tmrNext->tmrCnt  -= TmrTbl[tmrID].tmrCnt; 
 801a934:	79fa      	ldrb	r2, [r7, #7]
 801a936:	4928      	ldr	r1, [pc, #160]	; (801a9d8 <InsertTmrList+0x1d0>)
 801a938:	4613      	mov	r3, r2
 801a93a:	005b      	lsls	r3, r3, #1
 801a93c:	4413      	add	r3, r2
 801a93e:	00db      	lsls	r3, r3, #3
 801a940:	440b      	add	r3, r1
 801a942:	3310      	adds	r3, #16
 801a944:	681b      	ldr	r3, [r3, #0]
 801a946:	6858      	ldr	r0, [r3, #4]
 801a948:	79fa      	ldrb	r2, [r7, #7]
 801a94a:	4923      	ldr	r1, [pc, #140]	; (801a9d8 <InsertTmrList+0x1d0>)
 801a94c:	4613      	mov	r3, r2
 801a94e:	005b      	lsls	r3, r3, #1
 801a950:	4413      	add	r3, r2
 801a952:	00db      	lsls	r3, r3, #3
 801a954:	440b      	add	r3, r1
 801a956:	3304      	adds	r3, #4
 801a958:	6819      	ldr	r1, [r3, #0]
 801a95a:	79fa      	ldrb	r2, [r7, #7]
 801a95c:	4c1e      	ldr	r4, [pc, #120]	; (801a9d8 <InsertTmrList+0x1d0>)
 801a95e:	4613      	mov	r3, r2
 801a960:	005b      	lsls	r3, r3, #1
 801a962:	4413      	add	r3, r2
 801a964:	00db      	lsls	r3, r3, #3
 801a966:	4423      	add	r3, r4
 801a968:	3310      	adds	r3, #16
 801a96a:	681b      	ldr	r3, [r3, #0]
 801a96c:	1a42      	subs	r2, r0, r1
 801a96e:	605a      	str	r2, [r3, #4]
                break;	
 801a970:	e02b      	b.n	801a9ca <InsertTmrList+0x1c2>
            }
            /* Is last item in list? */									
            else if((deltaTicks >= 0) && (pTmr->tmrNext == Co_NULL))
 801a972:	693b      	ldr	r3, [r7, #16]
 801a974:	2b00      	cmp	r3, #0
 801a976:	db21      	blt.n	801a9bc <InsertTmrList+0x1b4>
 801a978:	697b      	ldr	r3, [r7, #20]
 801a97a:	691b      	ldr	r3, [r3, #16]
 801a97c:	2b00      	cmp	r3, #0
 801a97e:	d11d      	bne.n	801a9bc <InsertTmrList+0x1b4>
            {	
                /* Yes,insert into */
                TmrTbl[tmrID].tmrPrev = pTmr;
 801a980:	79fa      	ldrb	r2, [r7, #7]
 801a982:	4915      	ldr	r1, [pc, #84]	; (801a9d8 <InsertTmrList+0x1d0>)
 801a984:	4613      	mov	r3, r2
 801a986:	005b      	lsls	r3, r3, #1
 801a988:	4413      	add	r3, r2
 801a98a:	00db      	lsls	r3, r3, #3
 801a98c:	440b      	add	r3, r1
 801a98e:	3314      	adds	r3, #20
 801a990:	697a      	ldr	r2, [r7, #20]
 801a992:	601a      	str	r2, [r3, #0]
                pTmr->tmrNext         = &TmrTbl[tmrID];	
 801a994:	79fa      	ldrb	r2, [r7, #7]
 801a996:	4613      	mov	r3, r2
 801a998:	005b      	lsls	r3, r3, #1
 801a99a:	4413      	add	r3, r2
 801a99c:	00db      	lsls	r3, r3, #3
 801a99e:	4a0e      	ldr	r2, [pc, #56]	; (801a9d8 <InsertTmrList+0x1d0>)
 801a9a0:	441a      	add	r2, r3
 801a9a2:	697b      	ldr	r3, [r7, #20]
 801a9a4:	611a      	str	r2, [r3, #16]
                TmrTbl[tmrID].tmrCnt  = deltaTicks;
 801a9a6:	79fa      	ldrb	r2, [r7, #7]
 801a9a8:	6939      	ldr	r1, [r7, #16]
 801a9aa:	480b      	ldr	r0, [pc, #44]	; (801a9d8 <InsertTmrList+0x1d0>)
 801a9ac:	4613      	mov	r3, r2
 801a9ae:	005b      	lsls	r3, r3, #1
 801a9b0:	4413      	add	r3, r2
 801a9b2:	00db      	lsls	r3, r3, #3
 801a9b4:	4403      	add	r3, r0
 801a9b6:	3304      	adds	r3, #4
 801a9b8:	6019      	str	r1, [r3, #0]
                break;	
 801a9ba:	e006      	b.n	801a9ca <InsertTmrList+0x1c2>
            }
            pTmr = pTmr->tmrNext;       /* Get the next item in timer list    */	
 801a9bc:	697b      	ldr	r3, [r7, #20]
 801a9be:	691b      	ldr	r3, [r3, #16]
 801a9c0:	617b      	str	r3, [r7, #20]
      	while(pTmr != Co_NULL)
 801a9c2:	697b      	ldr	r3, [r7, #20]
 801a9c4:	2b00      	cmp	r3, #0
 801a9c6:	f47f af4d 	bne.w	801a864 <InsertTmrList+0x5c>
      	}
    }
    OsSchedUnlock();                    /* Unlock schedule                    */
 801a9ca:	f7fc fe11 	bl	80175f0 <OsSchedUnlock>
 801a9ce:	e000      	b.n	801a9d2 <InsertTmrList+0x1ca>
        return;                         /* Do nothing,return                  */
 801a9d0:	bf00      	nop
}
 801a9d2:	371c      	adds	r7, #28
 801a9d4:	46bd      	mov	sp, r7
 801a9d6:	bd90      	pop	{r4, r7, pc}
 801a9d8:	2000d73c 	.word	0x2000d73c
 801a9dc:	20003749 	.word	0x20003749
 801a9e0:	2000d76c 	.word	0x2000d76c

0801a9e4 <RemoveTmrList>:
 * @par Description
 * @details    This function is called to remove a timer from the timer list. 
 *******************************************************************************
 */
static void RemoveTmrList(OS_TCID tmrID)
{
 801a9e4:	b580      	push	{r7, lr}
 801a9e6:	b084      	sub	sp, #16
 801a9e8:	af00      	add	r7, sp, #0
 801a9ea:	4603      	mov	r3, r0
 801a9ec:	71fb      	strb	r3, [r7, #7]
    P_TmrCtrl pTmr;
    
    pTmr = &TmrTbl[tmrID];
 801a9ee:	79fa      	ldrb	r2, [r7, #7]
 801a9f0:	4613      	mov	r3, r2
 801a9f2:	005b      	lsls	r3, r3, #1
 801a9f4:	4413      	add	r3, r2
 801a9f6:	00db      	lsls	r3, r3, #3
 801a9f8:	4a2c      	ldr	r2, [pc, #176]	; (801aaac <RemoveTmrList+0xc8>)
 801a9fa:	4413      	add	r3, r2
 801a9fc:	60fb      	str	r3, [r7, #12]
    
    OsSchedLock();                      /* Lock schedule                      */
 801a9fe:	4b2c      	ldr	r3, [pc, #176]	; (801aab0 <RemoveTmrList+0xcc>)
 801aa00:	781b      	ldrb	r3, [r3, #0]
 801aa02:	b2db      	uxtb	r3, r3
 801aa04:	3301      	adds	r3, #1
 801aa06:	b2da      	uxtb	r2, r3
 801aa08:	4b29      	ldr	r3, [pc, #164]	; (801aab0 <RemoveTmrList+0xcc>)
 801aa0a:	701a      	strb	r2, [r3, #0]
    
    /* Is there only one item in timer list?                                  */
    if((pTmr->tmrPrev == Co_NULL) && (pTmr->tmrNext == Co_NULL))
 801aa0c:	68fb      	ldr	r3, [r7, #12]
 801aa0e:	695b      	ldr	r3, [r3, #20]
 801aa10:	2b00      	cmp	r3, #0
 801aa12:	d107      	bne.n	801aa24 <RemoveTmrList+0x40>
 801aa14:	68fb      	ldr	r3, [r7, #12]
 801aa16:	691b      	ldr	r3, [r3, #16]
 801aa18:	2b00      	cmp	r3, #0
 801aa1a:	d103      	bne.n	801aa24 <RemoveTmrList+0x40>
    {		
        TmrList = Co_NULL;                 /* Yes,set timer list as Co_NULL         */
 801aa1c:	4b25      	ldr	r3, [pc, #148]	; (801aab4 <RemoveTmrList+0xd0>)
 801aa1e:	2200      	movs	r2, #0
 801aa20:	601a      	str	r2, [r3, #0]
 801aa22:	e03d      	b.n	801aaa0 <RemoveTmrList+0xbc>
    }
    else if(pTmr->tmrPrev == Co_NULL)      /* Is the first item in timer list?   */
 801aa24:	68fb      	ldr	r3, [r7, #12]
 801aa26:	695b      	ldr	r3, [r3, #20]
 801aa28:	2b00      	cmp	r3, #0
 801aa2a:	d114      	bne.n	801aa56 <RemoveTmrList+0x72>
    {   /* Yes,remove timer from list,and reset timer list                    */
        TmrList  = pTmr->tmrNext;
 801aa2c:	68fb      	ldr	r3, [r7, #12]
 801aa2e:	691b      	ldr	r3, [r3, #16]
 801aa30:	4a20      	ldr	r2, [pc, #128]	; (801aab4 <RemoveTmrList+0xd0>)
 801aa32:	6013      	str	r3, [r2, #0]
        TmrList->tmrPrev = Co_NULL;
 801aa34:	4b1f      	ldr	r3, [pc, #124]	; (801aab4 <RemoveTmrList+0xd0>)
 801aa36:	681b      	ldr	r3, [r3, #0]
 801aa38:	2200      	movs	r2, #0
 801aa3a:	615a      	str	r2, [r3, #20]
        pTmr->tmrNext->tmrCnt += pTmr->tmrCnt;
 801aa3c:	68fb      	ldr	r3, [r7, #12]
 801aa3e:	691b      	ldr	r3, [r3, #16]
 801aa40:	6859      	ldr	r1, [r3, #4]
 801aa42:	68fb      	ldr	r3, [r7, #12]
 801aa44:	685a      	ldr	r2, [r3, #4]
 801aa46:	68fb      	ldr	r3, [r7, #12]
 801aa48:	691b      	ldr	r3, [r3, #16]
 801aa4a:	440a      	add	r2, r1
 801aa4c:	605a      	str	r2, [r3, #4]
        pTmr->tmrNext    = Co_NULL;
 801aa4e:	68fb      	ldr	r3, [r7, #12]
 801aa50:	2200      	movs	r2, #0
 801aa52:	611a      	str	r2, [r3, #16]
 801aa54:	e024      	b.n	801aaa0 <RemoveTmrList+0xbc>
    }
    else if(pTmr->tmrNext == Co_NULL)      /* Is the last item in timer list?    */
 801aa56:	68fb      	ldr	r3, [r7, #12]
 801aa58:	691b      	ldr	r3, [r3, #16]
 801aa5a:	2b00      	cmp	r3, #0
 801aa5c:	d107      	bne.n	801aa6e <RemoveTmrList+0x8a>
    {
        /* Yes,remove timer form list */
        pTmr->tmrPrev->tmrNext = Co_NULL;
 801aa5e:	68fb      	ldr	r3, [r7, #12]
 801aa60:	695b      	ldr	r3, [r3, #20]
 801aa62:	2200      	movs	r2, #0
 801aa64:	611a      	str	r2, [r3, #16]
        pTmr->tmrPrev = Co_NULL;
 801aa66:	68fb      	ldr	r3, [r7, #12]
 801aa68:	2200      	movs	r2, #0
 801aa6a:	615a      	str	r2, [r3, #20]
 801aa6c:	e018      	b.n	801aaa0 <RemoveTmrList+0xbc>
    }
    else                                /* No, remove timer from list         */
    {
        pTmr->tmrPrev->tmrNext  =  pTmr->tmrNext;
 801aa6e:	68fb      	ldr	r3, [r7, #12]
 801aa70:	695b      	ldr	r3, [r3, #20]
 801aa72:	68fa      	ldr	r2, [r7, #12]
 801aa74:	6912      	ldr	r2, [r2, #16]
 801aa76:	611a      	str	r2, [r3, #16]
        pTmr->tmrNext->tmrPrev  =  pTmr->tmrPrev;
 801aa78:	68fb      	ldr	r3, [r7, #12]
 801aa7a:	691b      	ldr	r3, [r3, #16]
 801aa7c:	68fa      	ldr	r2, [r7, #12]
 801aa7e:	6952      	ldr	r2, [r2, #20]
 801aa80:	615a      	str	r2, [r3, #20]
        pTmr->tmrNext->tmrCnt  += pTmr->tmrCnt;
 801aa82:	68fb      	ldr	r3, [r7, #12]
 801aa84:	691b      	ldr	r3, [r3, #16]
 801aa86:	6859      	ldr	r1, [r3, #4]
 801aa88:	68fb      	ldr	r3, [r7, #12]
 801aa8a:	685a      	ldr	r2, [r3, #4]
 801aa8c:	68fb      	ldr	r3, [r7, #12]
 801aa8e:	691b      	ldr	r3, [r3, #16]
 801aa90:	440a      	add	r2, r1
 801aa92:	605a      	str	r2, [r3, #4]
        pTmr->tmrNext = Co_NULL;
 801aa94:	68fb      	ldr	r3, [r7, #12]
 801aa96:	2200      	movs	r2, #0
 801aa98:	611a      	str	r2, [r3, #16]
        pTmr->tmrPrev = Co_NULL;
 801aa9a:	68fb      	ldr	r3, [r7, #12]
 801aa9c:	2200      	movs	r2, #0
 801aa9e:	615a      	str	r2, [r3, #20]
    }
    OsSchedUnlock();                    /* Unlock schedule                    */
 801aaa0:	f7fc fda6 	bl	80175f0 <OsSchedUnlock>
}
 801aaa4:	bf00      	nop
 801aaa6:	3710      	adds	r7, #16
 801aaa8:	46bd      	mov	sp, r7
 801aaaa:	bd80      	pop	{r7, pc}
 801aaac:	2000d73c 	.word	0x2000d73c
 801aab0:	20003749 	.word	0x20003749
 801aab4:	2000d76c 	.word	0x2000d76c

0801aab8 <CoCreateTmr>:
 * @par Description
 * @details    This function is called to create a timer.
 *******************************************************************************
 */
OS_TCID CoCreateTmr(U8 tmrType, U32 tmrCnt, U32 tmrReload, vFUNCPtr func)
{
 801aab8:	b580      	push	{r7, lr}
 801aaba:	b086      	sub	sp, #24
 801aabc:	af00      	add	r7, sp, #0
 801aabe:	60b9      	str	r1, [r7, #8]
 801aac0:	607a      	str	r2, [r7, #4]
 801aac2:	603b      	str	r3, [r7, #0]
 801aac4:	4603      	mov	r3, r0
 801aac6:	73fb      	strb	r3, [r7, #15]
    U8 i;
#if CFG_PAR_CHECKOUT_EN >0              /* Check validity of parameter        */
    if((tmrType != TMR_TYPE_ONE_SHOT) && (tmrType != TMR_TYPE_PERIODIC))
 801aac8:	7bfb      	ldrb	r3, [r7, #15]
 801aaca:	2b00      	cmp	r3, #0
 801aacc:	d004      	beq.n	801aad8 <CoCreateTmr+0x20>
 801aace:	7bfb      	ldrb	r3, [r7, #15]
 801aad0:	2b01      	cmp	r3, #1
 801aad2:	d001      	beq.n	801aad8 <CoCreateTmr+0x20>
    {
        return E_CREATE_FAIL;	
 801aad4:	23ff      	movs	r3, #255	; 0xff
 801aad6:	e07e      	b.n	801abd6 <CoCreateTmr+0x11e>
    }
    if(func == Co_NULL)
 801aad8:	683b      	ldr	r3, [r7, #0]
 801aada:	2b00      	cmp	r3, #0
 801aadc:	d101      	bne.n	801aae2 <CoCreateTmr+0x2a>
    {
        return E_CREATE_FAIL;
 801aade:	23ff      	movs	r3, #255	; 0xff
 801aae0:	e079      	b.n	801abd6 <CoCreateTmr+0x11e>
    }
#endif
    OsSchedLock();                        /* Lock schedule                    */
 801aae2:	4b3f      	ldr	r3, [pc, #252]	; (801abe0 <CoCreateTmr+0x128>)
 801aae4:	781b      	ldrb	r3, [r3, #0]
 801aae6:	b2db      	uxtb	r3, r3
 801aae8:	3301      	adds	r3, #1
 801aaea:	b2da      	uxtb	r2, r3
 801aaec:	4b3c      	ldr	r3, [pc, #240]	; (801abe0 <CoCreateTmr+0x128>)
 801aaee:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < CFG_MAX_TMR; i++)
 801aaf0:	2300      	movs	r3, #0
 801aaf2:	75fb      	strb	r3, [r7, #23]
 801aaf4:	e069      	b.n	801abca <CoCreateTmr+0x112>
    {
        if((TmrIDVessel & (1 << i)) == 0) /* Is free timer ID?                */
 801aaf6:	7dfb      	ldrb	r3, [r7, #23]
 801aaf8:	2201      	movs	r2, #1
 801aafa:	fa02 f303 	lsl.w	r3, r2, r3
 801aafe:	461a      	mov	r2, r3
 801ab00:	4b38      	ldr	r3, [pc, #224]	; (801abe4 <CoCreateTmr+0x12c>)
 801ab02:	681b      	ldr	r3, [r3, #0]
 801ab04:	4013      	ands	r3, r2
 801ab06:	2b00      	cmp	r3, #0
 801ab08:	d15c      	bne.n	801abc4 <CoCreateTmr+0x10c>
        {
            TmrIDVessel |= (1<<i);        /* Yes,assign ID to this timer      */
 801ab0a:	7dfb      	ldrb	r3, [r7, #23]
 801ab0c:	2201      	movs	r2, #1
 801ab0e:	fa02 f303 	lsl.w	r3, r2, r3
 801ab12:	461a      	mov	r2, r3
 801ab14:	4b33      	ldr	r3, [pc, #204]	; (801abe4 <CoCreateTmr+0x12c>)
 801ab16:	681b      	ldr	r3, [r3, #0]
 801ab18:	4313      	orrs	r3, r2
 801ab1a:	4a32      	ldr	r2, [pc, #200]	; (801abe4 <CoCreateTmr+0x12c>)
 801ab1c:	6013      	str	r3, [r2, #0]
            OsSchedUnlock();              /* Unlock schedule                  */
 801ab1e:	f7fc fd67 	bl	80175f0 <OsSchedUnlock>
            TmrTbl[i].tmrID     = i;      /* Initialize timer as user set     */
 801ab22:	7dfa      	ldrb	r2, [r7, #23]
 801ab24:	4930      	ldr	r1, [pc, #192]	; (801abe8 <CoCreateTmr+0x130>)
 801ab26:	4613      	mov	r3, r2
 801ab28:	005b      	lsls	r3, r3, #1
 801ab2a:	4413      	add	r3, r2
 801ab2c:	00db      	lsls	r3, r3, #3
 801ab2e:	440b      	add	r3, r1
 801ab30:	7dfa      	ldrb	r2, [r7, #23]
 801ab32:	701a      	strb	r2, [r3, #0]
            TmrTbl[i].tmrType   = tmrType;	
 801ab34:	7dfa      	ldrb	r2, [r7, #23]
 801ab36:	492c      	ldr	r1, [pc, #176]	; (801abe8 <CoCreateTmr+0x130>)
 801ab38:	4613      	mov	r3, r2
 801ab3a:	005b      	lsls	r3, r3, #1
 801ab3c:	4413      	add	r3, r2
 801ab3e:	00db      	lsls	r3, r3, #3
 801ab40:	440b      	add	r3, r1
 801ab42:	3301      	adds	r3, #1
 801ab44:	7bfa      	ldrb	r2, [r7, #15]
 801ab46:	701a      	strb	r2, [r3, #0]
            TmrTbl[i].tmrState  = TMR_STATE_STOPPED;
 801ab48:	7dfa      	ldrb	r2, [r7, #23]
 801ab4a:	4927      	ldr	r1, [pc, #156]	; (801abe8 <CoCreateTmr+0x130>)
 801ab4c:	4613      	mov	r3, r2
 801ab4e:	005b      	lsls	r3, r3, #1
 801ab50:	4413      	add	r3, r2
 801ab52:	00db      	lsls	r3, r3, #3
 801ab54:	440b      	add	r3, r1
 801ab56:	3302      	adds	r3, #2
 801ab58:	2201      	movs	r2, #1
 801ab5a:	701a      	strb	r2, [r3, #0]
            TmrTbl[i].tmrCnt    = tmrCnt;
 801ab5c:	7dfa      	ldrb	r2, [r7, #23]
 801ab5e:	4922      	ldr	r1, [pc, #136]	; (801abe8 <CoCreateTmr+0x130>)
 801ab60:	4613      	mov	r3, r2
 801ab62:	005b      	lsls	r3, r3, #1
 801ab64:	4413      	add	r3, r2
 801ab66:	00db      	lsls	r3, r3, #3
 801ab68:	440b      	add	r3, r1
 801ab6a:	3304      	adds	r3, #4
 801ab6c:	68ba      	ldr	r2, [r7, #8]
 801ab6e:	601a      	str	r2, [r3, #0]
            TmrTbl[i].tmrReload	= tmrReload;
 801ab70:	7dfa      	ldrb	r2, [r7, #23]
 801ab72:	491d      	ldr	r1, [pc, #116]	; (801abe8 <CoCreateTmr+0x130>)
 801ab74:	4613      	mov	r3, r2
 801ab76:	005b      	lsls	r3, r3, #1
 801ab78:	4413      	add	r3, r2
 801ab7a:	00db      	lsls	r3, r3, #3
 801ab7c:	440b      	add	r3, r1
 801ab7e:	3308      	adds	r3, #8
 801ab80:	687a      	ldr	r2, [r7, #4]
 801ab82:	601a      	str	r2, [r3, #0]
            TmrTbl[i].tmrCallBack = func;
 801ab84:	7dfa      	ldrb	r2, [r7, #23]
 801ab86:	4918      	ldr	r1, [pc, #96]	; (801abe8 <CoCreateTmr+0x130>)
 801ab88:	4613      	mov	r3, r2
 801ab8a:	005b      	lsls	r3, r3, #1
 801ab8c:	4413      	add	r3, r2
 801ab8e:	00db      	lsls	r3, r3, #3
 801ab90:	440b      	add	r3, r1
 801ab92:	330c      	adds	r3, #12
 801ab94:	683a      	ldr	r2, [r7, #0]
 801ab96:	601a      	str	r2, [r3, #0]
            TmrTbl[i].tmrPrev   = Co_NULL;
 801ab98:	7dfa      	ldrb	r2, [r7, #23]
 801ab9a:	4913      	ldr	r1, [pc, #76]	; (801abe8 <CoCreateTmr+0x130>)
 801ab9c:	4613      	mov	r3, r2
 801ab9e:	005b      	lsls	r3, r3, #1
 801aba0:	4413      	add	r3, r2
 801aba2:	00db      	lsls	r3, r3, #3
 801aba4:	440b      	add	r3, r1
 801aba6:	3314      	adds	r3, #20
 801aba8:	2200      	movs	r2, #0
 801abaa:	601a      	str	r2, [r3, #0]
            TmrTbl[i].tmrNext   = Co_NULL;
 801abac:	7dfa      	ldrb	r2, [r7, #23]
 801abae:	490e      	ldr	r1, [pc, #56]	; (801abe8 <CoCreateTmr+0x130>)
 801abb0:	4613      	mov	r3, r2
 801abb2:	005b      	lsls	r3, r3, #1
 801abb4:	4413      	add	r3, r2
 801abb6:	00db      	lsls	r3, r3, #3
 801abb8:	440b      	add	r3, r1
 801abba:	3310      	adds	r3, #16
 801abbc:	2200      	movs	r2, #0
 801abbe:	601a      	str	r2, [r3, #0]
            return i;                     /* Return timer ID                  */
 801abc0:	7dfb      	ldrb	r3, [r7, #23]
 801abc2:	e008      	b.n	801abd6 <CoCreateTmr+0x11e>
    for(i = 0; i < CFG_MAX_TMR; i++)
 801abc4:	7dfb      	ldrb	r3, [r7, #23]
 801abc6:	3301      	adds	r3, #1
 801abc8:	75fb      	strb	r3, [r7, #23]
 801abca:	7dfb      	ldrb	r3, [r7, #23]
 801abcc:	2b01      	cmp	r3, #1
 801abce:	d992      	bls.n	801aaf6 <CoCreateTmr+0x3e>
        }
    }
    OsSchedUnlock();                      /* Unlock schedule                  */
 801abd0:	f7fc fd0e 	bl	80175f0 <OsSchedUnlock>
    return E_CREATE_FAIL;                 /* Error return                     */
 801abd4:	23ff      	movs	r3, #255	; 0xff
}
 801abd6:	4618      	mov	r0, r3
 801abd8:	3718      	adds	r7, #24
 801abda:	46bd      	mov	sp, r7
 801abdc:	bd80      	pop	{r7, pc}
 801abde:	bf00      	nop
 801abe0:	20003749 	.word	0x20003749
 801abe4:	2000d770 	.word	0x2000d770
 801abe8:	2000d73c 	.word	0x2000d73c

0801abec <CoStartTmr>:
 * @par Description
 * @details    This function is called to make a timer start countering. 
 *******************************************************************************
 */
StatusType CoStartTmr(OS_TCID tmrID)
{
 801abec:	b580      	push	{r7, lr}
 801abee:	b082      	sub	sp, #8
 801abf0:	af00      	add	r7, sp, #0
 801abf2:	4603      	mov	r3, r0
 801abf4:	71fb      	strb	r3, [r7, #7]
#if CFG_PAR_CHECKOUT_EN >0              /* Check validity of parameter        */
    if(tmrID >= CFG_MAX_TMR)
 801abf6:	79fb      	ldrb	r3, [r7, #7]
 801abf8:	2b01      	cmp	r3, #1
 801abfa:	d901      	bls.n	801ac00 <CoStartTmr+0x14>
    {
        return E_INVALID_ID;
 801abfc:	2301      	movs	r3, #1
 801abfe:	e027      	b.n	801ac50 <CoStartTmr+0x64>
    }
    if( (TmrIDVessel & (1<<tmrID)) == 0)
 801ac00:	79fb      	ldrb	r3, [r7, #7]
 801ac02:	2201      	movs	r2, #1
 801ac04:	fa02 f303 	lsl.w	r3, r2, r3
 801ac08:	461a      	mov	r2, r3
 801ac0a:	4b13      	ldr	r3, [pc, #76]	; (801ac58 <CoStartTmr+0x6c>)
 801ac0c:	681b      	ldr	r3, [r3, #0]
 801ac0e:	4013      	ands	r3, r2
 801ac10:	2b00      	cmp	r3, #0
 801ac12:	d101      	bne.n	801ac18 <CoStartTmr+0x2c>
    {
        return E_INVALID_ID;
 801ac14:	2301      	movs	r3, #1
 801ac16:	e01b      	b.n	801ac50 <CoStartTmr+0x64>
    }
#endif
    
    if(TmrTbl[tmrID].tmrState == TMR_STATE_RUNNING)   /* Is timer running?    */
 801ac18:	79fa      	ldrb	r2, [r7, #7]
 801ac1a:	4910      	ldr	r1, [pc, #64]	; (801ac5c <CoStartTmr+0x70>)
 801ac1c:	4613      	mov	r3, r2
 801ac1e:	005b      	lsls	r3, r3, #1
 801ac20:	4413      	add	r3, r2
 801ac22:	00db      	lsls	r3, r3, #3
 801ac24:	440b      	add	r3, r1
 801ac26:	3302      	adds	r3, #2
 801ac28:	781b      	ldrb	r3, [r3, #0]
 801ac2a:	2b00      	cmp	r3, #0
 801ac2c:	d101      	bne.n	801ac32 <CoStartTmr+0x46>
    {
        return E_OK;                              /* Yes,do nothing,return OK */
 801ac2e:	2300      	movs	r3, #0
 801ac30:	e00e      	b.n	801ac50 <CoStartTmr+0x64>
    }
    
    /* No,set timer status as TMR_STATE_RUNNING */
    TmrTbl[tmrID].tmrState = TMR_STATE_RUNNING; 
 801ac32:	79fa      	ldrb	r2, [r7, #7]
 801ac34:	4909      	ldr	r1, [pc, #36]	; (801ac5c <CoStartTmr+0x70>)
 801ac36:	4613      	mov	r3, r2
 801ac38:	005b      	lsls	r3, r3, #1
 801ac3a:	4413      	add	r3, r2
 801ac3c:	00db      	lsls	r3, r3, #3
 801ac3e:	440b      	add	r3, r1
 801ac40:	3302      	adds	r3, #2
 801ac42:	2200      	movs	r2, #0
 801ac44:	701a      	strb	r2, [r3, #0]
    InsertTmrList(tmrID);               /* Insert this timer into timer list  */
 801ac46:	79fb      	ldrb	r3, [r7, #7]
 801ac48:	4618      	mov	r0, r3
 801ac4a:	f7ff fddd 	bl	801a808 <InsertTmrList>
    return E_OK;                        /* Return OK                          */
 801ac4e:	2300      	movs	r3, #0
}
 801ac50:	4618      	mov	r0, r3
 801ac52:	3708      	adds	r7, #8
 801ac54:	46bd      	mov	sp, r7
 801ac56:	bd80      	pop	{r7, pc}
 801ac58:	2000d770 	.word	0x2000d770
 801ac5c:	2000d73c 	.word	0x2000d73c

0801ac60 <CoStopTmr>:
 * @par Description
 * @details    This function is called to stop a timer from counting. 
 *******************************************************************************
 */
StatusType CoStopTmr(OS_TCID tmrID)
{	
 801ac60:	b580      	push	{r7, lr}
 801ac62:	b082      	sub	sp, #8
 801ac64:	af00      	add	r7, sp, #0
 801ac66:	4603      	mov	r3, r0
 801ac68:	71fb      	strb	r3, [r7, #7]
#if CFG_PAR_CHECKOUT_EN >0              /* Check validity of parameter        */
    if(tmrID >= CFG_MAX_TMR)
 801ac6a:	79fb      	ldrb	r3, [r7, #7]
 801ac6c:	2b01      	cmp	r3, #1
 801ac6e:	d901      	bls.n	801ac74 <CoStopTmr+0x14>
    {
        return E_INVALID_ID;
 801ac70:	2301      	movs	r3, #1
 801ac72:	e027      	b.n	801acc4 <CoStopTmr+0x64>
    }
    if((TmrIDVessel & (1<<tmrID)) == 0)
 801ac74:	79fb      	ldrb	r3, [r7, #7]
 801ac76:	2201      	movs	r2, #1
 801ac78:	fa02 f303 	lsl.w	r3, r2, r3
 801ac7c:	461a      	mov	r2, r3
 801ac7e:	4b13      	ldr	r3, [pc, #76]	; (801accc <CoStopTmr+0x6c>)
 801ac80:	681b      	ldr	r3, [r3, #0]
 801ac82:	4013      	ands	r3, r2
 801ac84:	2b00      	cmp	r3, #0
 801ac86:	d101      	bne.n	801ac8c <CoStopTmr+0x2c>
    {
        return E_INVALID_ID;
 801ac88:	2301      	movs	r3, #1
 801ac8a:	e01b      	b.n	801acc4 <CoStopTmr+0x64>
    }
#endif
    
    
    if(TmrTbl[tmrID].tmrState == TMR_STATE_STOPPED)/* Does timer stop running?*/
 801ac8c:	79fa      	ldrb	r2, [r7, #7]
 801ac8e:	4910      	ldr	r1, [pc, #64]	; (801acd0 <CoStopTmr+0x70>)
 801ac90:	4613      	mov	r3, r2
 801ac92:	005b      	lsls	r3, r3, #1
 801ac94:	4413      	add	r3, r2
 801ac96:	00db      	lsls	r3, r3, #3
 801ac98:	440b      	add	r3, r1
 801ac9a:	3302      	adds	r3, #2
 801ac9c:	781b      	ldrb	r3, [r3, #0]
 801ac9e:	2b01      	cmp	r3, #1
 801aca0:	d101      	bne.n	801aca6 <CoStopTmr+0x46>
    {
        return E_OK;                    /* Yes,do nothing,return OK           */
 801aca2:	2300      	movs	r3, #0
 801aca4:	e00e      	b.n	801acc4 <CoStopTmr+0x64>
    }
    RemoveTmrList(tmrID);             /* No,remove this timer from timer list */
 801aca6:	79fb      	ldrb	r3, [r7, #7]
 801aca8:	4618      	mov	r0, r3
 801acaa:	f7ff fe9b 	bl	801a9e4 <RemoveTmrList>
    
    /* Set timer status as TMR_STATE_STOPPED  */
    TmrTbl[tmrID].tmrState = TMR_STATE_STOPPED;	
 801acae:	79fa      	ldrb	r2, [r7, #7]
 801acb0:	4907      	ldr	r1, [pc, #28]	; (801acd0 <CoStopTmr+0x70>)
 801acb2:	4613      	mov	r3, r2
 801acb4:	005b      	lsls	r3, r3, #1
 801acb6:	4413      	add	r3, r2
 801acb8:	00db      	lsls	r3, r3, #3
 801acba:	440b      	add	r3, r1
 801acbc:	3302      	adds	r3, #2
 801acbe:	2201      	movs	r2, #1
 801acc0:	701a      	strb	r2, [r3, #0]
    return E_OK;                        /* Return OK                          */
 801acc2:	2300      	movs	r3, #0
}
 801acc4:	4618      	mov	r0, r3
 801acc6:	3708      	adds	r7, #8
 801acc8:	46bd      	mov	sp, r7
 801acca:	bd80      	pop	{r7, pc}
 801accc:	2000d770 	.word	0x2000d770
 801acd0:	2000d73c 	.word	0x2000d73c

0801acd4 <CoDelTmr>:
 * @par Description
 * @details    This function is called to delete a timer which created before.	
 *******************************************************************************
 */
StatusType CoDelTmr(OS_TCID tmrID)
{
 801acd4:	b580      	push	{r7, lr}
 801acd6:	b082      	sub	sp, #8
 801acd8:	af00      	add	r7, sp, #0
 801acda:	4603      	mov	r3, r0
 801acdc:	71fb      	strb	r3, [r7, #7]
#if CFG_PAR_CHECKOUT_EN >0              /* Check validity of parameter        */
    if(tmrID >= CFG_MAX_TMR)
 801acde:	79fb      	ldrb	r3, [r7, #7]
 801ace0:	2b01      	cmp	r3, #1
 801ace2:	d901      	bls.n	801ace8 <CoDelTmr+0x14>
    {
        return E_INVALID_ID;
 801ace4:	2301      	movs	r3, #1
 801ace6:	e026      	b.n	801ad36 <CoDelTmr+0x62>
    }
    if( (TmrIDVessel & (1<<tmrID)) == 0)
 801ace8:	79fb      	ldrb	r3, [r7, #7]
 801acea:	2201      	movs	r2, #1
 801acec:	fa02 f303 	lsl.w	r3, r2, r3
 801acf0:	461a      	mov	r2, r3
 801acf2:	4b13      	ldr	r3, [pc, #76]	; (801ad40 <CoDelTmr+0x6c>)
 801acf4:	681b      	ldr	r3, [r3, #0]
 801acf6:	4013      	ands	r3, r2
 801acf8:	2b00      	cmp	r3, #0
 801acfa:	d101      	bne.n	801ad00 <CoDelTmr+0x2c>
    {
        return E_INVALID_ID;
 801acfc:	2301      	movs	r3, #1
 801acfe:	e01a      	b.n	801ad36 <CoDelTmr+0x62>
    }
#endif
	
    if(TmrTbl[tmrID].tmrState == TMR_STATE_RUNNING) /* Is timer running?      */
 801ad00:	79fa      	ldrb	r2, [r7, #7]
 801ad02:	4910      	ldr	r1, [pc, #64]	; (801ad44 <CoDelTmr+0x70>)
 801ad04:	4613      	mov	r3, r2
 801ad06:	005b      	lsls	r3, r3, #1
 801ad08:	4413      	add	r3, r2
 801ad0a:	00db      	lsls	r3, r3, #3
 801ad0c:	440b      	add	r3, r1
 801ad0e:	3302      	adds	r3, #2
 801ad10:	781b      	ldrb	r3, [r3, #0]
 801ad12:	2b00      	cmp	r3, #0
 801ad14:	d103      	bne.n	801ad1e <CoDelTmr+0x4a>
    {
        RemoveTmrList(tmrID);         /* Yes,remove this timer from timer list*/
 801ad16:	79fb      	ldrb	r3, [r7, #7]
 801ad18:	4618      	mov	r0, r3
 801ad1a:	f7ff fe63 	bl	801a9e4 <RemoveTmrList>
    }
    TmrIDVessel &=~(1<<tmrID);        /* Release resource that this timer hold*/
 801ad1e:	79fb      	ldrb	r3, [r7, #7]
 801ad20:	2201      	movs	r2, #1
 801ad22:	fa02 f303 	lsl.w	r3, r2, r3
 801ad26:	43db      	mvns	r3, r3
 801ad28:	461a      	mov	r2, r3
 801ad2a:	4b05      	ldr	r3, [pc, #20]	; (801ad40 <CoDelTmr+0x6c>)
 801ad2c:	681b      	ldr	r3, [r3, #0]
 801ad2e:	4013      	ands	r3, r2
 801ad30:	4a03      	ldr	r2, [pc, #12]	; (801ad40 <CoDelTmr+0x6c>)
 801ad32:	6013      	str	r3, [r2, #0]
    return E_OK;                      /* Return OK                            */
 801ad34:	2300      	movs	r3, #0
}
 801ad36:	4618      	mov	r0, r3
 801ad38:	3708      	adds	r7, #8
 801ad3a:	46bd      	mov	sp, r7
 801ad3c:	bd80      	pop	{r7, pc}
 801ad3e:	bf00      	nop
 801ad40:	2000d770 	.word	0x2000d770
 801ad44:	2000d73c 	.word	0x2000d73c

0801ad48 <CoGetCurTmrCnt>:
 * @par Description
 * @details    This function is called to obtain current counter of specify timer.
 *******************************************************************************
 */
U32 CoGetCurTmrCnt(OS_TCID tmrID,StatusType* perr)
{
 801ad48:	b480      	push	{r7}
 801ad4a:	b083      	sub	sp, #12
 801ad4c:	af00      	add	r7, sp, #0
 801ad4e:	4603      	mov	r3, r0
 801ad50:	6039      	str	r1, [r7, #0]
 801ad52:	71fb      	strb	r3, [r7, #7]
#if CFG_PAR_CHECKOUT_EN >0              /* Check validity of parameter        */
    if(tmrID >= CFG_MAX_TMR)
 801ad54:	79fb      	ldrb	r3, [r7, #7]
 801ad56:	2b01      	cmp	r3, #1
 801ad58:	d904      	bls.n	801ad64 <CoGetCurTmrCnt+0x1c>
    {
        *perr = E_INVALID_ID;
 801ad5a:	683b      	ldr	r3, [r7, #0]
 801ad5c:	2201      	movs	r2, #1
 801ad5e:	701a      	strb	r2, [r3, #0]
        return 0;
 801ad60:	2300      	movs	r3, #0
 801ad62:	e01a      	b.n	801ad9a <CoGetCurTmrCnt+0x52>
    }
    if((TmrIDVessel & (1<<tmrID)) == 0)
 801ad64:	79fb      	ldrb	r3, [r7, #7]
 801ad66:	2201      	movs	r2, #1
 801ad68:	fa02 f303 	lsl.w	r3, r2, r3
 801ad6c:	461a      	mov	r2, r3
 801ad6e:	4b0e      	ldr	r3, [pc, #56]	; (801ada8 <CoGetCurTmrCnt+0x60>)
 801ad70:	681b      	ldr	r3, [r3, #0]
 801ad72:	4013      	ands	r3, r2
 801ad74:	2b00      	cmp	r3, #0
 801ad76:	d104      	bne.n	801ad82 <CoGetCurTmrCnt+0x3a>
    {
        *perr = E_INVALID_ID;
 801ad78:	683b      	ldr	r3, [r7, #0]
 801ad7a:	2201      	movs	r2, #1
 801ad7c:	701a      	strb	r2, [r3, #0]
        return 0;
 801ad7e:	2300      	movs	r3, #0
 801ad80:	e00b      	b.n	801ad9a <CoGetCurTmrCnt+0x52>
    }
#endif
    *perr = E_OK;
 801ad82:	683b      	ldr	r3, [r7, #0]
 801ad84:	2200      	movs	r2, #0
 801ad86:	701a      	strb	r2, [r3, #0]
    return TmrTbl[tmrID].tmrCnt;        /* Return timer counter               */
 801ad88:	79fa      	ldrb	r2, [r7, #7]
 801ad8a:	4908      	ldr	r1, [pc, #32]	; (801adac <CoGetCurTmrCnt+0x64>)
 801ad8c:	4613      	mov	r3, r2
 801ad8e:	005b      	lsls	r3, r3, #1
 801ad90:	4413      	add	r3, r2
 801ad92:	00db      	lsls	r3, r3, #3
 801ad94:	440b      	add	r3, r1
 801ad96:	3304      	adds	r3, #4
 801ad98:	681b      	ldr	r3, [r3, #0]
}
 801ad9a:	4618      	mov	r0, r3
 801ad9c:	370c      	adds	r7, #12
 801ad9e:	46bd      	mov	sp, r7
 801ada0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ada4:	4770      	bx	lr
 801ada6:	bf00      	nop
 801ada8:	2000d770 	.word	0x2000d770
 801adac:	2000d73c 	.word	0x2000d73c

0801adb0 <CoSetTmrCnt>:
 * @par Description
 * @details    This function is called to set timer counter and reload value.
 *******************************************************************************
 */
StatusType CoSetTmrCnt(OS_TCID tmrID,U32 tmrCnt,U32 tmrReload)
{
 801adb0:	b580      	push	{r7, lr}
 801adb2:	b084      	sub	sp, #16
 801adb4:	af00      	add	r7, sp, #0
 801adb6:	4603      	mov	r3, r0
 801adb8:	60b9      	str	r1, [r7, #8]
 801adba:	607a      	str	r2, [r7, #4]
 801adbc:	73fb      	strb	r3, [r7, #15]
#if CFG_PAR_CHECKOUT_EN >0              /* Check validity of parameter        */
    if(tmrID >= CFG_MAX_TMR)
 801adbe:	7bfb      	ldrb	r3, [r7, #15]
 801adc0:	2b01      	cmp	r3, #1
 801adc2:	d901      	bls.n	801adc8 <CoSetTmrCnt+0x18>
    {
        return E_INVALID_ID;
 801adc4:	2301      	movs	r3, #1
 801adc6:	e033      	b.n	801ae30 <CoSetTmrCnt+0x80>
    }
    if( (TmrIDVessel & (1<<tmrID)) == 0)
 801adc8:	7bfb      	ldrb	r3, [r7, #15]
 801adca:	2201      	movs	r2, #1
 801adcc:	fa02 f303 	lsl.w	r3, r2, r3
 801add0:	461a      	mov	r2, r3
 801add2:	4b19      	ldr	r3, [pc, #100]	; (801ae38 <CoSetTmrCnt+0x88>)
 801add4:	681b      	ldr	r3, [r3, #0]
 801add6:	4013      	ands	r3, r2
 801add8:	2b00      	cmp	r3, #0
 801adda:	d101      	bne.n	801ade0 <CoSetTmrCnt+0x30>
    {
        return E_INVALID_ID;
 801addc:	2301      	movs	r3, #1
 801adde:	e027      	b.n	801ae30 <CoSetTmrCnt+0x80>
    }
#endif
    TmrTbl[tmrID].tmrCnt    = tmrCnt; /* Reset timer counter and reload value */
 801ade0:	7bfa      	ldrb	r2, [r7, #15]
 801ade2:	4916      	ldr	r1, [pc, #88]	; (801ae3c <CoSetTmrCnt+0x8c>)
 801ade4:	4613      	mov	r3, r2
 801ade6:	005b      	lsls	r3, r3, #1
 801ade8:	4413      	add	r3, r2
 801adea:	00db      	lsls	r3, r3, #3
 801adec:	440b      	add	r3, r1
 801adee:	3304      	adds	r3, #4
 801adf0:	68ba      	ldr	r2, [r7, #8]
 801adf2:	601a      	str	r2, [r3, #0]
    TmrTbl[tmrID].tmrReload = tmrReload;
 801adf4:	7bfa      	ldrb	r2, [r7, #15]
 801adf6:	4911      	ldr	r1, [pc, #68]	; (801ae3c <CoSetTmrCnt+0x8c>)
 801adf8:	4613      	mov	r3, r2
 801adfa:	005b      	lsls	r3, r3, #1
 801adfc:	4413      	add	r3, r2
 801adfe:	00db      	lsls	r3, r3, #3
 801ae00:	440b      	add	r3, r1
 801ae02:	3308      	adds	r3, #8
 801ae04:	687a      	ldr	r2, [r7, #4]
 801ae06:	601a      	str	r2, [r3, #0]
    								
    if(TmrTbl[tmrID].tmrState == TMR_STATE_RUNNING)   /* Is timer running?    */
 801ae08:	7bfa      	ldrb	r2, [r7, #15]
 801ae0a:	490c      	ldr	r1, [pc, #48]	; (801ae3c <CoSetTmrCnt+0x8c>)
 801ae0c:	4613      	mov	r3, r2
 801ae0e:	005b      	lsls	r3, r3, #1
 801ae10:	4413      	add	r3, r2
 801ae12:	00db      	lsls	r3, r3, #3
 801ae14:	440b      	add	r3, r1
 801ae16:	3302      	adds	r3, #2
 801ae18:	781b      	ldrb	r3, [r3, #0]
 801ae1a:	2b00      	cmp	r3, #0
 801ae1c:	d107      	bne.n	801ae2e <CoSetTmrCnt+0x7e>
    {
        RemoveTmrList(tmrID);           /* Yes,reorder timer in timer list    */
 801ae1e:	7bfb      	ldrb	r3, [r7, #15]
 801ae20:	4618      	mov	r0, r3
 801ae22:	f7ff fddf 	bl	801a9e4 <RemoveTmrList>
        InsertTmrList(tmrID);	
 801ae26:	7bfb      	ldrb	r3, [r7, #15]
 801ae28:	4618      	mov	r0, r3
 801ae2a:	f7ff fced 	bl	801a808 <InsertTmrList>
    }
    return E_OK;                        /* Return OK                          */
 801ae2e:	2300      	movs	r3, #0
}
 801ae30:	4618      	mov	r0, r3
 801ae32:	3710      	adds	r7, #16
 801ae34:	46bd      	mov	sp, r7
 801ae36:	bd80      	pop	{r7, pc}
 801ae38:	2000d770 	.word	0x2000d770
 801ae3c:	2000d73c 	.word	0x2000d73c

0801ae40 <TmrDispose>:
 * @par Description
 * @details    This function is called to dispose timer counter.
 *******************************************************************************
 */
void TmrDispose(void)
{
 801ae40:	b580      	push	{r7, lr}
 801ae42:	b082      	sub	sp, #8
 801ae44:	af00      	add	r7, sp, #0
    P_TmrCtrl	pTmr;
    
    pTmr = TmrList;                     /* Get first item of timer list       */
 801ae46:	4b1b      	ldr	r3, [pc, #108]	; (801aeb4 <TmrDispose+0x74>)
 801ae48:	681b      	ldr	r3, [r3, #0]
 801ae4a:	607b      	str	r3, [r7, #4]
    while((pTmr != Co_NULL) && (pTmr->tmrCnt == 0) )
 801ae4c:	e027      	b.n	801ae9e <TmrDispose+0x5e>
    {	
        if(pTmr->tmrType == TMR_TYPE_ONE_SHOT)    /* Is a One-shot timer?     */
 801ae4e:	687b      	ldr	r3, [r7, #4]
 801ae50:	785b      	ldrb	r3, [r3, #1]
 801ae52:	2b00      	cmp	r3, #0
 801ae54:	d10b      	bne.n	801ae6e <TmrDispose+0x2e>
        {
            /* Yes,remove this timer from timer list                          */
            RemoveTmrList(pTmr->tmrID);
 801ae56:	687b      	ldr	r3, [r7, #4]
 801ae58:	781b      	ldrb	r3, [r3, #0]
 801ae5a:	4618      	mov	r0, r3
 801ae5c:	f7ff fdc2 	bl	801a9e4 <RemoveTmrList>
            
            /* Set timer status as TMR_STATE_STOPPED                          */
            pTmr->tmrState = TMR_STATE_STOPPED;
 801ae60:	687b      	ldr	r3, [r7, #4]
 801ae62:	2201      	movs	r2, #1
 801ae64:	709a      	strb	r2, [r3, #2]
            (pTmr->tmrCallBack)();          /* Call timer callback function   */
 801ae66:	687b      	ldr	r3, [r7, #4]
 801ae68:	68db      	ldr	r3, [r3, #12]
 801ae6a:	4798      	blx	r3
 801ae6c:	e014      	b.n	801ae98 <TmrDispose+0x58>
        }
        else if(pTmr->tmrType == TMR_TYPE_PERIODIC)   /* Is a periodic timer? */
 801ae6e:	687b      	ldr	r3, [r7, #4]
 801ae70:	785b      	ldrb	r3, [r3, #1]
 801ae72:	2b01      	cmp	r3, #1
 801ae74:	d110      	bne.n	801ae98 <TmrDispose+0x58>
        {
            /* Yes,remove this timer from timer list                          */
            RemoveTmrList(pTmr->tmrID); 
 801ae76:	687b      	ldr	r3, [r7, #4]
 801ae78:	781b      	ldrb	r3, [r3, #0]
 801ae7a:	4618      	mov	r0, r3
 801ae7c:	f7ff fdb2 	bl	801a9e4 <RemoveTmrList>
            pTmr->tmrCnt = pTmr->tmrReload;   /* Reset timer tick             */
 801ae80:	687b      	ldr	r3, [r7, #4]
 801ae82:	689a      	ldr	r2, [r3, #8]
 801ae84:	687b      	ldr	r3, [r7, #4]
 801ae86:	605a      	str	r2, [r3, #4]
            InsertTmrList(pTmr->tmrID);       /* Insert timer into timer list */
 801ae88:	687b      	ldr	r3, [r7, #4]
 801ae8a:	781b      	ldrb	r3, [r3, #0]
 801ae8c:	4618      	mov	r0, r3
 801ae8e:	f7ff fcbb 	bl	801a808 <InsertTmrList>
            (pTmr->tmrCallBack)();            /* Call timer callback function */
 801ae92:	687b      	ldr	r3, [r7, #4]
 801ae94:	68db      	ldr	r3, [r3, #12]
 801ae96:	4798      	blx	r3
        }
        pTmr = TmrList;	                      /* Get first item of timer list */
 801ae98:	4b06      	ldr	r3, [pc, #24]	; (801aeb4 <TmrDispose+0x74>)
 801ae9a:	681b      	ldr	r3, [r3, #0]
 801ae9c:	607b      	str	r3, [r7, #4]
    while((pTmr != Co_NULL) && (pTmr->tmrCnt == 0) )
 801ae9e:	687b      	ldr	r3, [r7, #4]
 801aea0:	2b00      	cmp	r3, #0
 801aea2:	d003      	beq.n	801aeac <TmrDispose+0x6c>
 801aea4:	687b      	ldr	r3, [r7, #4]
 801aea6:	685b      	ldr	r3, [r3, #4]
 801aea8:	2b00      	cmp	r3, #0
 801aeaa:	d0d0      	beq.n	801ae4e <TmrDispose+0xe>
    }
}
 801aeac:	bf00      	nop
 801aeae:	3708      	adds	r7, #8
 801aeb0:	46bd      	mov	sp, r7
 801aeb2:	bd80      	pop	{r7, pc}
 801aeb4:	2000d76c 	.word	0x2000d76c

0801aeb8 <isr_TmrDispose>:
 * @par Description
 * @details    This function is called to dispose timer counter.
 *******************************************************************************
 */
void isr_TmrDispose(void)
{
 801aeb8:	b580      	push	{r7, lr}
 801aeba:	af00      	add	r7, sp, #0
    if(OSSchedLock > 1)                 /* Is schedule lock?                  */
 801aebc:	4b07      	ldr	r3, [pc, #28]	; (801aedc <isr_TmrDispose+0x24>)
 801aebe:	781b      	ldrb	r3, [r3, #0]
 801aec0:	b2db      	uxtb	r3, r3
 801aec2:	2b01      	cmp	r3, #1
 801aec4:	d906      	bls.n	801aed4 <isr_TmrDispose+0x1c>
    {
        IsrReq = Co_TRUE;
 801aec6:	4b06      	ldr	r3, [pc, #24]	; (801aee0 <isr_TmrDispose+0x28>)
 801aec8:	2201      	movs	r2, #1
 801aeca:	701a      	strb	r2, [r3, #0]
        TimerReq  = Co_TRUE;               /* Yes,set timer request true         */
 801aecc:	4b05      	ldr	r3, [pc, #20]	; (801aee4 <isr_TmrDispose+0x2c>)
 801aece:	2201      	movs	r2, #1
 801aed0:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        TmrDispose();                   /* No,call handler                    */
    }
}	 
 801aed2:	e001      	b.n	801aed8 <isr_TmrDispose+0x20>
        TmrDispose();                   /* No,call handler                    */
 801aed4:	f7ff ffb4 	bl	801ae40 <TmrDispose>
}	 
 801aed8:	bf00      	nop
 801aeda:	bd80      	pop	{r7, pc}
 801aedc:	20003749 	.word	0x20003749
 801aee0:	2000d594 	.word	0x2000d594
 801aee4:	2000d596 	.word	0x2000d596

0801aee8 <CoTickToTime>:
 * @details    This function is called to convert specify ticks to time format.	  	 	
 *******************************************************************************				
 */
#if CFG_TICK_TO_TIME_EN > 0
void CoTickToTime(U32 ticks,U8* hour,U8* minute,U8* sec,U16* millsec)
{
 801aee8:	b480      	push	{r7}
 801aeea:	b087      	sub	sp, #28
 801aeec:	af00      	add	r7, sp, #0
 801aeee:	60f8      	str	r0, [r7, #12]
 801aef0:	60b9      	str	r1, [r7, #8]
 801aef2:	607a      	str	r2, [r7, #4]
 801aef4:	603b      	str	r3, [r7, #0]
    U32 totalTime;
    
    /* Convert ticks to time*/
    totalTime = ticks * (1000/CFG_SYSTICK_FREQ);
 801aef6:	68fa      	ldr	r2, [r7, #12]
 801aef8:	4613      	mov	r3, r2
 801aefa:	009b      	lsls	r3, r3, #2
 801aefc:	4413      	add	r3, r2
 801aefe:	005b      	lsls	r3, r3, #1
 801af00:	617b      	str	r3, [r7, #20]
    *millsec  = totalTime%1000;
 801af02:	697a      	ldr	r2, [r7, #20]
 801af04:	4b20      	ldr	r3, [pc, #128]	; (801af88 <CoTickToTime+0xa0>)
 801af06:	fba3 1302 	umull	r1, r3, r3, r2
 801af0a:	099b      	lsrs	r3, r3, #6
 801af0c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 801af10:	fb01 f303 	mul.w	r3, r1, r3
 801af14:	1ad3      	subs	r3, r2, r3
 801af16:	b29a      	uxth	r2, r3
 801af18:	6a3b      	ldr	r3, [r7, #32]
 801af1a:	801a      	strh	r2, [r3, #0]
    totalTime = totalTime/1000;
 801af1c:	697b      	ldr	r3, [r7, #20]
 801af1e:	4a1a      	ldr	r2, [pc, #104]	; (801af88 <CoTickToTime+0xa0>)
 801af20:	fba2 2303 	umull	r2, r3, r2, r3
 801af24:	099b      	lsrs	r3, r3, #6
 801af26:	617b      	str	r3, [r7, #20]
    *sec      = totalTime%60;
 801af28:	6979      	ldr	r1, [r7, #20]
 801af2a:	4b18      	ldr	r3, [pc, #96]	; (801af8c <CoTickToTime+0xa4>)
 801af2c:	fba3 2301 	umull	r2, r3, r3, r1
 801af30:	095a      	lsrs	r2, r3, #5
 801af32:	4613      	mov	r3, r2
 801af34:	011b      	lsls	r3, r3, #4
 801af36:	1a9b      	subs	r3, r3, r2
 801af38:	009b      	lsls	r3, r3, #2
 801af3a:	1aca      	subs	r2, r1, r3
 801af3c:	b2d2      	uxtb	r2, r2
 801af3e:	683b      	ldr	r3, [r7, #0]
 801af40:	701a      	strb	r2, [r3, #0]
    totalTime = totalTime/60;
 801af42:	697b      	ldr	r3, [r7, #20]
 801af44:	4a11      	ldr	r2, [pc, #68]	; (801af8c <CoTickToTime+0xa4>)
 801af46:	fba2 2303 	umull	r2, r3, r2, r3
 801af4a:	095b      	lsrs	r3, r3, #5
 801af4c:	617b      	str	r3, [r7, #20]
    *minute   = totalTime%60;
 801af4e:	6979      	ldr	r1, [r7, #20]
 801af50:	4b0e      	ldr	r3, [pc, #56]	; (801af8c <CoTickToTime+0xa4>)
 801af52:	fba3 2301 	umull	r2, r3, r3, r1
 801af56:	095a      	lsrs	r2, r3, #5
 801af58:	4613      	mov	r3, r2
 801af5a:	011b      	lsls	r3, r3, #4
 801af5c:	1a9b      	subs	r3, r3, r2
 801af5e:	009b      	lsls	r3, r3, #2
 801af60:	1aca      	subs	r2, r1, r3
 801af62:	b2d2      	uxtb	r2, r2
 801af64:	687b      	ldr	r3, [r7, #4]
 801af66:	701a      	strb	r2, [r3, #0]
    totalTime = totalTime/60;
 801af68:	697b      	ldr	r3, [r7, #20]
 801af6a:	4a08      	ldr	r2, [pc, #32]	; (801af8c <CoTickToTime+0xa4>)
 801af6c:	fba2 2303 	umull	r2, r3, r2, r3
 801af70:	095b      	lsrs	r3, r3, #5
 801af72:	617b      	str	r3, [r7, #20]
    *hour     = totalTime;		
 801af74:	697b      	ldr	r3, [r7, #20]
 801af76:	b2da      	uxtb	r2, r3
 801af78:	68bb      	ldr	r3, [r7, #8]
 801af7a:	701a      	strb	r2, [r3, #0]
}
 801af7c:	bf00      	nop
 801af7e:	371c      	adds	r7, #28
 801af80:	46bd      	mov	sp, r7
 801af82:	f85d 7b04 	ldr.w	r7, [sp], #4
 801af86:	4770      	bx	lr
 801af88:	10624dd3 	.word	0x10624dd3
 801af8c:	88888889 	.word	0x88888889

0801af90 <CoTimeToTick>:
 * @details    This function is called to convert specify time to tick number. 		 
 *******************************************************************************
 */
#if CFG_TIME_TO_TICK_EN > 0
StatusType  CoTimeToTick(U8 hour,U8 minute,U8 sec,U16 millsec,U32* ticks)
{
 801af90:	b490      	push	{r4, r7}
 801af92:	b082      	sub	sp, #8
 801af94:	af00      	add	r7, sp, #0
 801af96:	4604      	mov	r4, r0
 801af98:	4608      	mov	r0, r1
 801af9a:	4611      	mov	r1, r2
 801af9c:	461a      	mov	r2, r3
 801af9e:	4623      	mov	r3, r4
 801afa0:	71fb      	strb	r3, [r7, #7]
 801afa2:	4603      	mov	r3, r0
 801afa4:	71bb      	strb	r3, [r7, #6]
 801afa6:	460b      	mov	r3, r1
 801afa8:	717b      	strb	r3, [r7, #5]
 801afaa:	4613      	mov	r3, r2
 801afac:	807b      	strh	r3, [r7, #2]
#if CFG_PAR_CHECKOUT_EN >0
    /* Validate arguments to be within range */
    if((minute > 59)||(sec > 59)||(millsec > 999))
 801afae:	79bb      	ldrb	r3, [r7, #6]
 801afb0:	2b3b      	cmp	r3, #59	; 0x3b
 801afb2:	d806      	bhi.n	801afc2 <CoTimeToTick+0x32>
 801afb4:	797b      	ldrb	r3, [r7, #5]
 801afb6:	2b3b      	cmp	r3, #59	; 0x3b
 801afb8:	d803      	bhi.n	801afc2 <CoTimeToTick+0x32>
 801afba:	887b      	ldrh	r3, [r7, #2]
 801afbc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801afc0:	d301      	bcc.n	801afc6 <CoTimeToTick+0x36>
        return E_INVALID_PARAMETER;
 801afc2:	2302      	movs	r3, #2
 801afc4:	e020      	b.n	801b008 <CoTimeToTick+0x78>
#endif

    /* Convert time to ticks */
    *ticks = ((hour*3600) + (minute*60) + (sec)) * (CFG_SYSTICK_FREQ)\
 801afc6:	79fb      	ldrb	r3, [r7, #7]
 801afc8:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 801afcc:	fb02 f103 	mul.w	r1, r2, r3
 801afd0:	79ba      	ldrb	r2, [r7, #6]
 801afd2:	4613      	mov	r3, r2
 801afd4:	011b      	lsls	r3, r3, #4
 801afd6:	1a9b      	subs	r3, r3, r2
 801afd8:	009b      	lsls	r3, r3, #2
 801afda:	18ca      	adds	r2, r1, r3
 801afdc:	797b      	ldrb	r3, [r7, #5]
 801afde:	4413      	add	r3, r2
 801afe0:	2264      	movs	r2, #100	; 0x64
 801afe2:	fb02 f203 	mul.w	r2, r2, r3
              + (millsec*CFG_SYSTICK_FREQ + 500)/1000;
 801afe6:	887b      	ldrh	r3, [r7, #2]
 801afe8:	2164      	movs	r1, #100	; 0x64
 801afea:	fb01 f303 	mul.w	r3, r1, r3
 801afee:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 801aff2:	4908      	ldr	r1, [pc, #32]	; (801b014 <CoTimeToTick+0x84>)
 801aff4:	fb81 0103 	smull	r0, r1, r1, r3
 801aff8:	1189      	asrs	r1, r1, #6
 801affa:	17db      	asrs	r3, r3, #31
 801affc:	1acb      	subs	r3, r1, r3
 801affe:	4413      	add	r3, r2
 801b000:	461a      	mov	r2, r3
    *ticks = ((hour*3600) + (minute*60) + (sec)) * (CFG_SYSTICK_FREQ)\
 801b002:	693b      	ldr	r3, [r7, #16]
 801b004:	601a      	str	r2, [r3, #0]
    return E_OK;
 801b006:	2300      	movs	r3, #0
}
 801b008:	4618      	mov	r0, r3
 801b00a:	3708      	adds	r7, #8
 801b00c:	46bd      	mov	sp, r7
 801b00e:	bc90      	pop	{r4, r7}
 801b010:	4770      	bx	lr
 801b012:	bf00      	nop
 801b014:	10624dd3 	.word	0x10624dd3

0801b018 <_cogui_app_init>:
 * @param[out] None
 * @retval     None 
 *******************************************************************************
 */
void _cogui_app_init(cogui_app_t *app)
{
 801b018:	b580      	push	{r7, lr}
 801b01a:	b082      	sub	sp, #8
 801b01c:	af00      	add	r7, sp, #0
 801b01e:	6078      	str	r0, [r7, #4]
    /* set all feild to zero first */
    cogui_memset(app, 0, sizeof(cogui_app_t));
 801b020:	f04f 0258 	mov.w	r2, #88	; 0x58
 801b024:	f04f 0300 	mov.w	r3, #0
 801b028:	2100      	movs	r1, #0
 801b02a:	6878      	ldr	r0, [r7, #4]
 801b02c:	f001 fc5e 	bl	801c8ec <cogui_memset>

    /* set app default event handler */
	app->handler = cogui_app_event_handler;
 801b030:	687b      	ldr	r3, [r7, #4]
 801b032:	4a03      	ldr	r2, [pc, #12]	; (801b040 <_cogui_app_init+0x28>)
 801b034:	651a      	str	r2, [r3, #80]	; 0x50
}
 801b036:	bf00      	nop
 801b038:	3708      	adds	r7, #8
 801b03a:	46bd      	mov	sp, r7
 801b03c:	bd80      	pop	{r7, pc}
 801b03e:	bf00      	nop
 801b040:	0801b451 	.word	0x0801b451

0801b044 <cogui_app_create>:
 * @retval     *app      The created application pointer. 
 * @retval     Co_NULL   If sync to server failed.
 *******************************************************************************
 */
cogui_app_t *cogui_app_create(char *title)
{
 801b044:	b580      	push	{r7, lr}
 801b046:	b092      	sub	sp, #72	; 0x48
 801b048:	af00      	add	r7, sp, #0
 801b04a:	6078      	str	r0, [r7, #4]
    cogui_app_t *app;
    cogui_app_t *srv_app;
    OS_TID tid = CoGetCurTaskID();
 801b04c:	f7ff f92e 	bl	801a2ac <CoGetCurTaskID>
 801b050:	4603      	mov	r3, r0
 801b052:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    struct cogui_event event;

    COGUI_ASSERT(tid != 0);
 801b056:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801b05a:	2b00      	cmp	r3, #0
 801b05c:	d104      	bne.n	801b068 <cogui_app_create+0x24>
 801b05e:	2231      	movs	r2, #49	; 0x31
 801b060:	4932      	ldr	r1, [pc, #200]	; (801b12c <cogui_app_create+0xe8>)
 801b062:	4833      	ldr	r0, [pc, #204]	; (801b130 <cogui_app_create+0xec>)
 801b064:	f002 f840 	bl	801d0e8 <cogui_assert_handler>
    COGUI_ASSERT(title != Co_NULL);
 801b068:	687b      	ldr	r3, [r7, #4]
 801b06a:	2b00      	cmp	r3, #0
 801b06c:	d104      	bne.n	801b078 <cogui_app_create+0x34>
 801b06e:	2232      	movs	r2, #50	; 0x32
 801b070:	492e      	ldr	r1, [pc, #184]	; (801b12c <cogui_app_create+0xe8>)
 801b072:	4830      	ldr	r0, [pc, #192]	; (801b134 <cogui_app_create+0xf0>)
 801b074:	f002 f838 	bl	801d0e8 <cogui_assert_handler>

    app = cogui_malloc(sizeof(cogui_app_t));
 801b078:	2058      	movs	r0, #88	; 0x58
 801b07a:	f001 fb35 	bl	801c6e8 <cogui_malloc>
 801b07e:	6438      	str	r0, [r7, #64]	; 0x40
    if (app == Co_NULL)
 801b080:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801b082:	2b00      	cmp	r3, #0
 801b084:	d101      	bne.n	801b08a <cogui_app_create+0x46>
        return Co_NULL;
 801b086:	2300      	movs	r3, #0
 801b088:	e04b      	b.n	801b122 <cogui_app_create+0xde>
    
    _cogui_app_init(app);
 801b08a:	6c38      	ldr	r0, [r7, #64]	; 0x40
 801b08c:	f7ff ffc4 	bl	801b018 <_cogui_app_init>

    /* filled meta data */
    app->tid = tid;
 801b090:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801b092:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 801b096:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    app->name = cogui_strdup((char *)title);
 801b09a:	6878      	ldr	r0, [r7, #4]
 801b09c:	f001 fd34 	bl	801cb08 <cogui_strdup>
 801b0a0:	4602      	mov	r2, r0
 801b0a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801b0a4:	605a      	str	r2, [r3, #4]
    app->mq = CoCreateMbox(EVENT_SORT_TYPE_PRIO);
 801b0a6:	2002      	movs	r0, #2
 801b0a8:	f7fd fc58 	bl	801895c <CoCreateMbox>
 801b0ac:	4603      	mov	r3, r0
 801b0ae:	461a      	mov	r2, r3
 801b0b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801b0b2:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

    srv_app = cogui_get_server();
 801b0b6:	f001 fae7 	bl	801c688 <cogui_get_server>
 801b0ba:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(srv_app == Co_NULL) {
 801b0bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801b0be:	2b00      	cmp	r3, #0
 801b0c0:	d10c      	bne.n	801b0dc <cogui_app_create+0x98>

        /* if we are creating server, just return here */
        TCBTbl[tid].userData = app;
 801b0c2:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 801b0c6:	491c      	ldr	r1, [pc, #112]	; (801b138 <cogui_app_create+0xf4>)
 801b0c8:	4613      	mov	r3, r2
 801b0ca:	005b      	lsls	r3, r3, #1
 801b0cc:	4413      	add	r3, r2
 801b0ce:	011b      	lsls	r3, r3, #4
 801b0d0:	440b      	add	r3, r1
 801b0d2:	332c      	adds	r3, #44	; 0x2c
 801b0d4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801b0d6:	601a      	str	r2, [r3, #0]
        return app;
 801b0d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801b0da:	e022      	b.n	801b122 <cogui_app_create+0xde>
    }
	
    /* if server is already created, sync with it */
    COGUI_EVENT_INIT(&event, COGUI_EVENT_APP_CREATE);
 801b0dc:	2300      	movs	r3, #0
 801b0de:	723b      	strb	r3, [r7, #8]
 801b0e0:	f000 f99e 	bl	801b420 <cogui_app_self>
 801b0e4:	4603      	mov	r3, r0
 801b0e6:	60fb      	str	r3, [r7, #12]
 801b0e8:	2300      	movs	r3, #0
 801b0ea:	743b      	strb	r3, [r7, #16]
    event.app = app;
 801b0ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801b0ee:	617b      	str	r3, [r7, #20]

    /* if server ack OK, return here */
    if(cogui_server_post_event_sync(&event) == GUI_E_OK) {
 801b0f0:	f107 0308 	add.w	r3, r7, #8
 801b0f4:	4618      	mov	r0, r3
 801b0f6:	f001 faad 	bl	801c654 <cogui_server_post_event_sync>
 801b0fa:	4603      	mov	r3, r0
 801b0fc:	2b17      	cmp	r3, #23
 801b0fe:	d10c      	bne.n	801b11a <cogui_app_create+0xd6>
        TCBTbl[tid].userData = app;
 801b100:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 801b104:	490c      	ldr	r1, [pc, #48]	; (801b138 <cogui_app_create+0xf4>)
 801b106:	4613      	mov	r3, r2
 801b108:	005b      	lsls	r3, r3, #1
 801b10a:	4413      	add	r3, r2
 801b10c:	011b      	lsls	r3, r3, #4
 801b10e:	440b      	add	r3, r1
 801b110:	332c      	adds	r3, #44	; 0x2c
 801b112:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801b114:	601a      	str	r2, [r3, #0]
        return app;
 801b116:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801b118:	e003      	b.n	801b122 <cogui_app_create+0xde>
    }

    /* if server not ack OK, free pointer and return Co_NULL */
    cogui_free(app);
 801b11a:	6c38      	ldr	r0, [r7, #64]	; 0x40
 801b11c:	f001 fafc 	bl	801c718 <cogui_free>
    return Co_NULL;
 801b120:	2300      	movs	r3, #0
}
 801b122:	4618      	mov	r0, r3
 801b124:	3748      	adds	r7, #72	; 0x48
 801b126:	46bd      	mov	sp, r7
 801b128:	bd80      	pop	{r7, pc}
 801b12a:	bf00      	nop
 801b12c:	08022b88 	.word	0x08022b88
 801b130:	08022a90 	.word	0x08022a90
 801b134:	08022a9c 	.word	0x08022a9c
 801b138:	2000d598 	.word	0x2000d598

0801b13c <cogui_app_delete>:
 * @param[out] None
 * @retval     None
 *******************************************************************************
 */
void cogui_app_delete(cogui_app_t *app)
{
 801b13c:	b580      	push	{r7, lr}
 801b13e:	b090      	sub	sp, #64	; 0x40
 801b140:	af00      	add	r7, sp, #0
 801b142:	6078      	str	r0, [r7, #4]
    COGUI_ASSERT(app != Co_NULL);
 801b144:	687b      	ldr	r3, [r7, #4]
 801b146:	2b00      	cmp	r3, #0
 801b148:	d104      	bne.n	801b154 <cogui_app_delete+0x18>
 801b14a:	2260      	movs	r2, #96	; 0x60
 801b14c:	4928      	ldr	r1, [pc, #160]	; (801b1f0 <cogui_app_delete+0xb4>)
 801b14e:	4829      	ldr	r0, [pc, #164]	; (801b1f4 <cogui_app_delete+0xb8>)
 801b150:	f001 ffca 	bl	801d0e8 <cogui_assert_handler>
    COGUI_ASSERT(app->tid);
 801b154:	687b      	ldr	r3, [r7, #4]
 801b156:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801b15a:	2b00      	cmp	r3, #0
 801b15c:	d104      	bne.n	801b168 <cogui_app_delete+0x2c>
 801b15e:	2261      	movs	r2, #97	; 0x61
 801b160:	4923      	ldr	r1, [pc, #140]	; (801b1f0 <cogui_app_delete+0xb4>)
 801b162:	4825      	ldr	r0, [pc, #148]	; (801b1f8 <cogui_app_delete+0xbc>)
 801b164:	f001 ffc0 	bl	801d0e8 <cogui_assert_handler>
    COGUI_ASSERT(app->mq);
 801b168:	687b      	ldr	r3, [r7, #4]
 801b16a:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 801b16e:	2b00      	cmp	r3, #0
 801b170:	d104      	bne.n	801b17c <cogui_app_delete+0x40>
 801b172:	2262      	movs	r2, #98	; 0x62
 801b174:	491e      	ldr	r1, [pc, #120]	; (801b1f0 <cogui_app_delete+0xb4>)
 801b176:	4821      	ldr	r0, [pc, #132]	; (801b1fc <cogui_app_delete+0xc0>)
 801b178:	f001 ffb6 	bl	801d0e8 <cogui_assert_handler>

    cogui_app_t *srv_app;
    struct cogui_event event;

    /* free application name buffer */
    cogui_free(app->name);
 801b17c:	687b      	ldr	r3, [r7, #4]
 801b17e:	685b      	ldr	r3, [r3, #4]
 801b180:	4618      	mov	r0, r3
 801b182:	f001 fac9 	bl	801c718 <cogui_free>
    app->name = Co_NULL;
 801b186:	687b      	ldr	r3, [r7, #4]
 801b188:	2200      	movs	r2, #0
 801b18a:	605a      	str	r2, [r3, #4]
	
    /* free event buffer */
    CoDelMbox(app->mq, OPT_DEL_ANYWAY);
 801b18c:	687b      	ldr	r3, [r7, #4]
 801b18e:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 801b192:	2101      	movs	r1, #1
 801b194:	4618      	mov	r0, r3
 801b196:	f7fd fbfb 	bl	8018990 <CoDelMbox>
    TCBTbl[app->tid].userData = 0;
 801b19a:	687b      	ldr	r3, [r7, #4]
 801b19c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801b1a0:	4619      	mov	r1, r3
 801b1a2:	4a17      	ldr	r2, [pc, #92]	; (801b200 <cogui_app_delete+0xc4>)
 801b1a4:	460b      	mov	r3, r1
 801b1a6:	005b      	lsls	r3, r3, #1
 801b1a8:	440b      	add	r3, r1
 801b1aa:	011b      	lsls	r3, r3, #4
 801b1ac:	4413      	add	r3, r2
 801b1ae:	332c      	adds	r3, #44	; 0x2c
 801b1b0:	2200      	movs	r2, #0
 801b1b2:	601a      	str	r2, [r3, #0]
	
    /* we should sync to server */
    srv_app = cogui_get_server();
 801b1b4:	f001 fa68 	bl	801c688 <cogui_get_server>
 801b1b8:	63f8      	str	r0, [r7, #60]	; 0x3c
    COGUI_EVENT_INIT(&event, COGUI_EVENT_APP_DELE);
 801b1ba:	2301      	movs	r3, #1
 801b1bc:	723b      	strb	r3, [r7, #8]
 801b1be:	f000 f92f 	bl	801b420 <cogui_app_self>
 801b1c2:	4603      	mov	r3, r0
 801b1c4:	60fb      	str	r3, [r7, #12]
 801b1c6:	2300      	movs	r3, #0
 801b1c8:	743b      	strb	r3, [r7, #16]
    event.app = app;
 801b1ca:	687b      	ldr	r3, [r7, #4]
 801b1cc:	617b      	str	r3, [r7, #20]

    /* if server not ack OK, just return */
    if(cogui_send_sync(srv_app, &event) != GUI_E_OK) {
 801b1ce:	f107 0308 	add.w	r3, r7, #8
 801b1d2:	4619      	mov	r1, r3
 801b1d4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801b1d6:	f001 fb01 	bl	801c7dc <cogui_send_sync>
 801b1da:	4603      	mov	r3, r0
 801b1dc:	2b17      	cmp	r3, #23
 801b1de:	d103      	bne.n	801b1e8 <cogui_app_delete+0xac>
       return;
    }
	
    /* if server ack OK, free application buffer */
	cogui_free(app);
 801b1e0:	6878      	ldr	r0, [r7, #4]
 801b1e2:	f001 fa99 	bl	801c718 <cogui_free>
 801b1e6:	e000      	b.n	801b1ea <cogui_app_delete+0xae>
       return;
 801b1e8:	bf00      	nop
}
 801b1ea:	3740      	adds	r7, #64	; 0x40
 801b1ec:	46bd      	mov	sp, r7
 801b1ee:	bd80      	pop	{r7, pc}
 801b1f0:	08022b9c 	.word	0x08022b9c
 801b1f4:	08022ab0 	.word	0x08022ab0
 801b1f8:	08022ac0 	.word	0x08022ac0
 801b1fc:	08022acc 	.word	0x08022acc
 801b200:	2000d598 	.word	0x2000d598

0801b204 <_cogui_app_event_loop>:
 * @param[out] None
 * @retval     None
 *******************************************************************************
 */
static void _cogui_app_event_loop(cogui_app_t *app)
{
 801b204:	b580      	push	{r7, lr}
 801b206:	b086      	sub	sp, #24
 801b208:	af00      	add	r7, sp, #0
 801b20a:	6078      	str	r0, [r7, #4]
    StatusType  result;
    co_uint16_t current_ref;
    co_int32_t loop_cnt = 0;
 801b20c:	2300      	movs	r3, #0
 801b20e:	617b      	str	r3, [r7, #20]
    struct cogui_event *event;

    event = (struct cogui_event *)app->event_buffer;
 801b210:	687b      	ldr	r3, [r7, #4]
 801b212:	3314      	adds	r3, #20
 801b214:	613b      	str	r3, [r7, #16]

    current_ref = ++app->ref_cnt;
 801b216:	687b      	ldr	r3, [r7, #4]
 801b218:	899b      	ldrh	r3, [r3, #12]
 801b21a:	3301      	adds	r3, #1
 801b21c:	b29a      	uxth	r2, r3
 801b21e:	687b      	ldr	r3, [r7, #4]
 801b220:	819a      	strh	r2, [r3, #12]
 801b222:	687b      	ldr	r3, [r7, #4]
 801b224:	899b      	ldrh	r3, [r3, #12]
 801b226:	81fb      	strh	r3, [r7, #14]
    while(current_ref <= app->ref_cnt) {
 801b228:	e024      	b.n	801b274 <_cogui_app_event_loop+0x70>
        cogui_printf("[%10s] App event loop #%d.\r\n", app->name, loop_cnt++);
 801b22a:	687b      	ldr	r3, [r7, #4]
 801b22c:	6859      	ldr	r1, [r3, #4]
 801b22e:	697b      	ldr	r3, [r7, #20]
 801b230:	1c5a      	adds	r2, r3, #1
 801b232:	617a      	str	r2, [r7, #20]
 801b234:	461a      	mov	r2, r3
 801b236:	4814      	ldr	r0, [pc, #80]	; (801b288 <_cogui_app_event_loop+0x84>)
 801b238:	f001 fd76 	bl	801cd28 <cogui_printf>
        result = cogui_recv(app->mq, event, 0);
 801b23c:	687b      	ldr	r3, [r7, #4]
 801b23e:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 801b242:	2200      	movs	r2, #0
 801b244:	6939      	ldr	r1, [r7, #16]
 801b246:	4618      	mov	r0, r3
 801b248:	f001 fb1a 	bl	801c880 <cogui_recv>
 801b24c:	4603      	mov	r3, r0
 801b24e:	737b      	strb	r3, [r7, #13]

        if(result == GUI_E_OK && event != Co_NULL) {
 801b250:	7b7b      	ldrb	r3, [r7, #13]
 801b252:	2b17      	cmp	r3, #23
 801b254:	d10e      	bne.n	801b274 <_cogui_app_event_loop+0x70>
 801b256:	693b      	ldr	r3, [r7, #16]
 801b258:	2b00      	cmp	r3, #0
 801b25a:	d00b      	beq.n	801b274 <_cogui_app_event_loop+0x70>
            cogui_printf("[%10s] Got a event no.%d\r\n", app->name, event->type);
 801b25c:	687b      	ldr	r3, [r7, #4]
 801b25e:	6859      	ldr	r1, [r3, #4]
 801b260:	693b      	ldr	r3, [r7, #16]
 801b262:	781b      	ldrb	r3, [r3, #0]
 801b264:	461a      	mov	r2, r3
 801b266:	4809      	ldr	r0, [pc, #36]	; (801b28c <_cogui_app_event_loop+0x88>)
 801b268:	f001 fd5e 	bl	801cd28 <cogui_printf>
            app->handler(event);
 801b26c:	687b      	ldr	r3, [r7, #4]
 801b26e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801b270:	6938      	ldr	r0, [r7, #16]
 801b272:	4798      	blx	r3
    while(current_ref <= app->ref_cnt) {
 801b274:	687b      	ldr	r3, [r7, #4]
 801b276:	899b      	ldrh	r3, [r3, #12]
 801b278:	89fa      	ldrh	r2, [r7, #14]
 801b27a:	429a      	cmp	r2, r3
 801b27c:	d9d5      	bls.n	801b22a <_cogui_app_event_loop+0x26>
        }
    }
}
 801b27e:	bf00      	nop
 801b280:	3718      	adds	r7, #24
 801b282:	46bd      	mov	sp, r7
 801b284:	bd80      	pop	{r7, pc}
 801b286:	bf00      	nop
 801b288:	08022ad4 	.word	0x08022ad4
 801b28c:	08022af4 	.word	0x08022af4

0801b290 <cogui_app_run>:

void cogui_app_run(cogui_app_t *app)
{
 801b290:	b580      	push	{r7, lr}
 801b292:	b090      	sub	sp, #64	; 0x40
 801b294:	af00      	add	r7, sp, #0
 801b296:	6078      	str	r0, [r7, #4]
    COGUI_ASSERT(app != Co_NULL);
 801b298:	687b      	ldr	r3, [r7, #4]
 801b29a:	2b00      	cmp	r3, #0
 801b29c:	d104      	bne.n	801b2a8 <cogui_app_run+0x18>
 801b29e:	229c      	movs	r2, #156	; 0x9c
 801b2a0:	4927      	ldr	r1, [pc, #156]	; (801b340 <cogui_app_run+0xb0>)
 801b2a2:	4828      	ldr	r0, [pc, #160]	; (801b344 <cogui_app_run+0xb4>)
 801b2a4:	f001 ff20 	bl	801d0e8 <cogui_assert_handler>
    COGUI_ASSERT(app->tid);
 801b2a8:	687b      	ldr	r3, [r7, #4]
 801b2aa:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801b2ae:	2b00      	cmp	r3, #0
 801b2b0:	d104      	bne.n	801b2bc <cogui_app_run+0x2c>
 801b2b2:	229d      	movs	r2, #157	; 0x9d
 801b2b4:	4922      	ldr	r1, [pc, #136]	; (801b340 <cogui_app_run+0xb0>)
 801b2b6:	4824      	ldr	r0, [pc, #144]	; (801b348 <cogui_app_run+0xb8>)
 801b2b8:	f001 ff16 	bl	801d0e8 <cogui_assert_handler>
    COGUI_ASSERT(TCBTbl[app->tid].userData);
 801b2bc:	687b      	ldr	r3, [r7, #4]
 801b2be:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801b2c2:	4619      	mov	r1, r3
 801b2c4:	4a21      	ldr	r2, [pc, #132]	; (801b34c <cogui_app_run+0xbc>)
 801b2c6:	460b      	mov	r3, r1
 801b2c8:	005b      	lsls	r3, r3, #1
 801b2ca:	440b      	add	r3, r1
 801b2cc:	011b      	lsls	r3, r3, #4
 801b2ce:	4413      	add	r3, r2
 801b2d0:	332c      	adds	r3, #44	; 0x2c
 801b2d2:	681b      	ldr	r3, [r3, #0]
 801b2d4:	2b00      	cmp	r3, #0
 801b2d6:	d104      	bne.n	801b2e2 <cogui_app_run+0x52>
 801b2d8:	229e      	movs	r2, #158	; 0x9e
 801b2da:	4919      	ldr	r1, [pc, #100]	; (801b340 <cogui_app_run+0xb0>)
 801b2dc:	481c      	ldr	r0, [pc, #112]	; (801b350 <cogui_app_run+0xc0>)
 801b2de:	f001 ff03 	bl	801d0e8 <cogui_assert_handler>

    if (app != cogui_get_server()){
 801b2e2:	f001 f9d1 	bl	801c688 <cogui_get_server>
 801b2e6:	4602      	mov	r2, r0
 801b2e8:	687b      	ldr	r3, [r7, #4]
 801b2ea:	4293      	cmp	r3, r2
 801b2ec:	d013      	beq.n	801b316 <cogui_app_run+0x86>
        struct cogui_event event;
        COGUI_EVENT_INIT(&event, COGUI_EVENT_PAINT);
 801b2ee:	230f      	movs	r3, #15
 801b2f0:	733b      	strb	r3, [r7, #12]
 801b2f2:	f000 f895 	bl	801b420 <cogui_app_self>
 801b2f6:	4603      	mov	r3, r0
 801b2f8:	613b      	str	r3, [r7, #16]
 801b2fa:	2300      	movs	r3, #0
 801b2fc:	753b      	strb	r3, [r7, #20]
        event.app = app;
 801b2fe:	687b      	ldr	r3, [r7, #4]
 801b300:	61bb      	str	r3, [r7, #24]

        cogui_send(cogui_get_server(), &event);
 801b302:	f001 f9c1 	bl	801c688 <cogui_get_server>
 801b306:	4602      	mov	r2, r0
 801b308:	f107 030c 	add.w	r3, r7, #12
 801b30c:	4619      	mov	r1, r3
 801b30e:	4610      	mov	r0, r2
 801b310:	f001 fa36 	bl	801c780 <cogui_send>
 801b314:	e00c      	b.n	801b330 <cogui_app_run+0xa0>
    }
    else {
        cogui_printf("[%10s] Create main window.\r\n", cogui_app_self()->name);
 801b316:	f000 f883 	bl	801b420 <cogui_app_self>
 801b31a:	4603      	mov	r3, r0
 801b31c:	685b      	ldr	r3, [r3, #4]
 801b31e:	4619      	mov	r1, r3
 801b320:	480c      	ldr	r0, [pc, #48]	; (801b354 <cogui_app_run+0xc4>)
 801b322:	f001 fd01 	bl	801cd28 <cogui_printf>
        main_page = cogui_main_window_create();
 801b326:	f002 ffcb 	bl	801e2c0 <cogui_main_window_create>
 801b32a:	4602      	mov	r2, r0
 801b32c:	4b0a      	ldr	r3, [pc, #40]	; (801b358 <cogui_app_run+0xc8>)
 801b32e:	601a      	str	r2, [r3, #0]
    }

    _cogui_app_event_loop(app);
 801b330:	6878      	ldr	r0, [r7, #4]
 801b332:	f7ff ff67 	bl	801b204 <_cogui_app_event_loop>
}
 801b336:	bf00      	nop
 801b338:	3740      	adds	r7, #64	; 0x40
 801b33a:	46bd      	mov	sp, r7
 801b33c:	bd80      	pop	{r7, pc}
 801b33e:	bf00      	nop
 801b340:	08022bb0 	.word	0x08022bb0
 801b344:	08022ab0 	.word	0x08022ab0
 801b348:	08022ac0 	.word	0x08022ac0
 801b34c:	2000d598 	.word	0x2000d598
 801b350:	08022b10 	.word	0x08022b10
 801b354:	08022b2c 	.word	0x08022b2c
 801b358:	2000d774 	.word	0x2000d774

0801b35c <cogui_app_exit>:

void cogui_app_exit(cogui_app_t *app, U16 code)
{
 801b35c:	b480      	push	{r7}
 801b35e:	b083      	sub	sp, #12
 801b360:	af00      	add	r7, sp, #0
 801b362:	6078      	str	r0, [r7, #4]
 801b364:	460b      	mov	r3, r1
 801b366:	807b      	strh	r3, [r7, #2]
    if (app->ref_cnt == 0) {
 801b368:	687b      	ldr	r3, [r7, #4]
 801b36a:	899b      	ldrh	r3, [r3, #12]
 801b36c:	2b00      	cmp	r3, #0
 801b36e:	d009      	beq.n	801b384 <cogui_app_exit+0x28>
        return;
    }
    
    app->ref_cnt--;
 801b370:	687b      	ldr	r3, [r7, #4]
 801b372:	899b      	ldrh	r3, [r3, #12]
 801b374:	3b01      	subs	r3, #1
 801b376:	b29a      	uxth	r2, r3
 801b378:	687b      	ldr	r3, [r7, #4]
 801b37a:	819a      	strh	r2, [r3, #12]
    app->exit_code = code;
 801b37c:	687b      	ldr	r3, [r7, #4]
 801b37e:	887a      	ldrh	r2, [r7, #2]
 801b380:	81da      	strh	r2, [r3, #14]
 801b382:	e000      	b.n	801b386 <cogui_app_exit+0x2a>
        return;
 801b384:	bf00      	nop
}
 801b386:	370c      	adds	r7, #12
 801b388:	46bd      	mov	sp, r7
 801b38a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b38e:	4770      	bx	lr

0801b390 <cogui_app_close>:

StatusType cogui_app_close(cogui_app_t *app)
{
 801b390:	b580      	push	{r7, lr}
 801b392:	b090      	sub	sp, #64	; 0x40
 801b394:	af00      	add	r7, sp, #0
 801b396:	6078      	str	r0, [r7, #4]
	struct cogui_event event;

    COGUI_EVENT_INIT(&event, COGUI_EVENT_APP_DELE);
 801b398:	2301      	movs	r3, #1
 801b39a:	733b      	strb	r3, [r7, #12]
 801b39c:	f000 f840 	bl	801b420 <cogui_app_self>
 801b3a0:	4603      	mov	r3, r0
 801b3a2:	613b      	str	r3, [r7, #16]
 801b3a4:	2300      	movs	r3, #0
 801b3a6:	753b      	strb	r3, [r7, #20]
    event.app = app;
 801b3a8:	687b      	ldr	r3, [r7, #4]
 801b3aa:	61bb      	str	r3, [r7, #24]

    return cogui_send(app, &event);
 801b3ac:	f107 030c 	add.w	r3, r7, #12
 801b3b0:	4619      	mov	r1, r3
 801b3b2:	6878      	ldr	r0, [r7, #4]
 801b3b4:	f001 f9e4 	bl	801c780 <cogui_send>
 801b3b8:	4603      	mov	r3, r0
}
 801b3ba:	4618      	mov	r0, r3
 801b3bc:	3740      	adds	r7, #64	; 0x40
 801b3be:	46bd      	mov	sp, r7
 801b3c0:	bd80      	pop	{r7, pc}

0801b3c2 <cogui_app_sleep>:

void cogui_app_sleep(cogui_app_t *app, U32 sleep_tick)
{
 801b3c2:	b580      	push	{r7, lr}
 801b3c4:	b082      	sub	sp, #8
 801b3c6:	af00      	add	r7, sp, #0
 801b3c8:	6078      	str	r0, [r7, #4]
 801b3ca:	6039      	str	r1, [r7, #0]
    COGUI_ASSERT(app != Co_NULL);
 801b3cc:	687b      	ldr	r3, [r7, #4]
 801b3ce:	2b00      	cmp	r3, #0
 801b3d0:	d104      	bne.n	801b3dc <cogui_app_sleep+0x1a>
 801b3d2:	22c5      	movs	r2, #197	; 0xc5
 801b3d4:	490e      	ldr	r1, [pc, #56]	; (801b410 <cogui_app_sleep+0x4e>)
 801b3d6:	480f      	ldr	r0, [pc, #60]	; (801b414 <cogui_app_sleep+0x52>)
 801b3d8:	f001 fe86 	bl	801d0e8 <cogui_assert_handler>
    COGUI_ASSERT(app->tid);
 801b3dc:	687b      	ldr	r3, [r7, #4]
 801b3de:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801b3e2:	2b00      	cmp	r3, #0
 801b3e4:	d104      	bne.n	801b3f0 <cogui_app_sleep+0x2e>
 801b3e6:	22c6      	movs	r2, #198	; 0xc6
 801b3e8:	4909      	ldr	r1, [pc, #36]	; (801b410 <cogui_app_sleep+0x4e>)
 801b3ea:	480b      	ldr	r0, [pc, #44]	; (801b418 <cogui_app_sleep+0x56>)
 801b3ec:	f001 fe7c 	bl	801d0e8 <cogui_assert_handler>
    COGUI_ASSERT(app->user_data);
 801b3f0:	687b      	ldr	r3, [r7, #4]
 801b3f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801b3f4:	2b00      	cmp	r3, #0
 801b3f6:	d104      	bne.n	801b402 <cogui_app_sleep+0x40>
 801b3f8:	22c7      	movs	r2, #199	; 0xc7
 801b3fa:	4905      	ldr	r1, [pc, #20]	; (801b410 <cogui_app_sleep+0x4e>)
 801b3fc:	4807      	ldr	r0, [pc, #28]	; (801b41c <cogui_app_sleep+0x5a>)
 801b3fe:	f001 fe73 	bl	801d0e8 <cogui_assert_handler>

    CoTickDelay(sleep_tick);
 801b402:	6838      	ldr	r0, [r7, #0]
 801b404:	f7ff f8de 	bl	801a5c4 <CoTickDelay>
}
 801b408:	bf00      	nop
 801b40a:	3708      	adds	r7, #8
 801b40c:	46bd      	mov	sp, r7
 801b40e:	bd80      	pop	{r7, pc}
 801b410:	08022bc0 	.word	0x08022bc0
 801b414:	08022ab0 	.word	0x08022ab0
 801b418:	08022ac0 	.word	0x08022ac0
 801b41c:	08022b4c 	.word	0x08022b4c

0801b420 <cogui_app_self>:
 * @param[out] None
 * @retval     *app      Current application pointer.
 *******************************************************************************
 */
cogui_app_t *cogui_app_self(void)
{
 801b420:	b580      	push	{r7, lr}
 801b422:	b082      	sub	sp, #8
 801b424:	af00      	add	r7, sp, #0
    cogui_app_t *app;
    OS_TID self;

    /* get current application in TCBTbl */
    self = CoGetCurTaskID();
 801b426:	f7fe ff41 	bl	801a2ac <CoGetCurTaskID>
 801b42a:	4603      	mov	r3, r0
 801b42c:	71fb      	strb	r3, [r7, #7]
    app  = (cogui_app_t *)TCBTbl[self].userData;
 801b42e:	79fa      	ldrb	r2, [r7, #7]
 801b430:	4906      	ldr	r1, [pc, #24]	; (801b44c <cogui_app_self+0x2c>)
 801b432:	4613      	mov	r3, r2
 801b434:	005b      	lsls	r3, r3, #1
 801b436:	4413      	add	r3, r2
 801b438:	011b      	lsls	r3, r3, #4
 801b43a:	440b      	add	r3, r1
 801b43c:	332c      	adds	r3, #44	; 0x2c
 801b43e:	681b      	ldr	r3, [r3, #0]
 801b440:	603b      	str	r3, [r7, #0]

    return app;
 801b442:	683b      	ldr	r3, [r7, #0]
}
 801b444:	4618      	mov	r0, r3
 801b446:	3708      	adds	r7, #8
 801b448:	46bd      	mov	sp, r7
 801b44a:	bd80      	pop	{r7, pc}
 801b44c:	2000d598 	.word	0x2000d598

0801b450 <cogui_app_event_handler>:
 * @retval     GUI_E_OK         Handle event successfully.
 * @retval     GUI_E_ERROR      Occured some error while handle event.
 *******************************************************************************
 */
static StatusType cogui_app_event_handler(struct cogui_event *event)
{
 801b450:	b580      	push	{r7, lr}
 801b452:	b084      	sub	sp, #16
 801b454:	af00      	add	r7, sp, #0
 801b456:	6078      	str	r0, [r7, #4]
	COGUI_ASSERT(event != Co_NULL);
 801b458:	687b      	ldr	r3, [r7, #4]
 801b45a:	2b00      	cmp	r3, #0
 801b45c:	d104      	bne.n	801b468 <cogui_app_event_handler+0x18>
 801b45e:	22eb      	movs	r2, #235	; 0xeb
 801b460:	491d      	ldr	r1, [pc, #116]	; (801b4d8 <cogui_app_event_handler+0x88>)
 801b462:	481e      	ldr	r0, [pc, #120]	; (801b4dc <cogui_app_event_handler+0x8c>)
 801b464:	f001 fe40 	bl	801d0e8 <cogui_assert_handler>

    cogui_printf("[%10s] Got event #%d.\r\n", cogui_app_self()->name, event->type);
 801b468:	f7ff ffda 	bl	801b420 <cogui_app_self>
 801b46c:	4603      	mov	r3, r0
 801b46e:	6859      	ldr	r1, [r3, #4]
 801b470:	687b      	ldr	r3, [r7, #4]
 801b472:	781b      	ldrb	r3, [r3, #0]
 801b474:	461a      	mov	r2, r3
 801b476:	481a      	ldr	r0, [pc, #104]	; (801b4e0 <cogui_app_event_handler+0x90>)
 801b478:	f001 fc56 	bl	801cd28 <cogui_printf>

    StatusType result = GUI_E_ERROR;
 801b47c:	2316      	movs	r3, #22
 801b47e:	73fb      	strb	r3, [r7, #15]

	switch (event->type)
 801b480:	687b      	ldr	r3, [r7, #4]
 801b482:	781b      	ldrb	r3, [r3, #0]
 801b484:	2b01      	cmp	r3, #1
 801b486:	d002      	beq.n	801b48e <cogui_app_event_handler+0x3e>
 801b488:	2b0f      	cmp	r3, #15
 801b48a:	d009      	beq.n	801b4a0 <cogui_app_event_handler+0x50>
 801b48c:	e01a      	b.n	801b4c4 <cogui_app_event_handler+0x74>
    {
	case COGUI_EVENT_APP_DELE:
		cogui_app_exit((event)->app, 0);
 801b48e:	687b      	ldr	r3, [r7, #4]
 801b490:	68db      	ldr	r3, [r3, #12]
 801b492:	2100      	movs	r1, #0
 801b494:	4618      	mov	r0, r3
 801b496:	f7ff ff61 	bl	801b35c <cogui_app_exit>
        result = GUI_E_OK;
 801b49a:	2317      	movs	r3, #23
 801b49c:	73fb      	strb	r3, [r7, #15]
		break;
 801b49e:	e015      	b.n	801b4cc <cogui_app_event_handler+0x7c>

	case COGUI_EVENT_PAINT:
        if (cogui_app_self()->optional_handler != Co_NULL) {
 801b4a0:	f7ff ffbe 	bl	801b420 <cogui_app_self>
 801b4a4:	4603      	mov	r3, r0
 801b4a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801b4a8:	2b00      	cmp	r3, #0
 801b4aa:	d008      	beq.n	801b4be <cogui_app_event_handler+0x6e>
            result = cogui_app_self()->optional_handler(event);
 801b4ac:	f7ff ffb8 	bl	801b420 <cogui_app_self>
 801b4b0:	4603      	mov	r3, r0
 801b4b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801b4b4:	6878      	ldr	r0, [r7, #4]
 801b4b6:	4798      	blx	r3
 801b4b8:	4603      	mov	r3, r0
 801b4ba:	73fb      	strb	r3, [r7, #15]
        }
        else {
            result = GUI_E_ERROR;
        }
        break;
 801b4bc:	e006      	b.n	801b4cc <cogui_app_event_handler+0x7c>
            result = GUI_E_ERROR;
 801b4be:	2316      	movs	r3, #22
 801b4c0:	73fb      	strb	r3, [r7, #15]
        break;
 801b4c2:	e003      	b.n	801b4cc <cogui_app_event_handler+0x7c>

	default:
		return result = GUI_E_ERROR;	
 801b4c4:	2316      	movs	r3, #22
 801b4c6:	73fb      	strb	r3, [r7, #15]
 801b4c8:	7bfb      	ldrb	r3, [r7, #15]
 801b4ca:	e000      	b.n	801b4ce <cogui_app_event_handler+0x7e>
	}
		
	return result;
 801b4cc:	7bfb      	ldrb	r3, [r7, #15]
}
 801b4ce:	4618      	mov	r0, r3
 801b4d0:	3710      	adds	r7, #16
 801b4d2:	46bd      	mov	sp, r7
 801b4d4:	bd80      	pop	{r7, pc}
 801b4d6:	bf00      	nop
 801b4d8:	08022bd0 	.word	0x08022bd0
 801b4dc:	08022b5c 	.word	0x08022b5c
 801b4e0:	08022b70 	.word	0x08022b70

0801b4e4 <cogui_dc_draw_line>:
 * @param[out] None
 * @retval     None
 *******************************************************************************
 */
void cogui_dc_draw_line(cogui_dc_t *dc, co_int32_t x1, co_int32_t x2, co_int32_t y1, co_int32_t y2)
{
 801b4e4:	b590      	push	{r4, r7, lr}
 801b4e6:	b085      	sub	sp, #20
 801b4e8:	af00      	add	r7, sp, #0
 801b4ea:	60f8      	str	r0, [r7, #12]
 801b4ec:	60b9      	str	r1, [r7, #8]
 801b4ee:	607a      	str	r2, [r7, #4]
 801b4f0:	603b      	str	r3, [r7, #0]
	COGUI_ASSERT(dc != Co_NULL);
 801b4f2:	68fb      	ldr	r3, [r7, #12]
 801b4f4:	2b00      	cmp	r3, #0
 801b4f6:	d104      	bne.n	801b502 <cogui_dc_draw_line+0x1e>
 801b4f8:	221a      	movs	r2, #26
 801b4fa:	4929      	ldr	r1, [pc, #164]	; (801b5a0 <cogui_dc_draw_line+0xbc>)
 801b4fc:	4829      	ldr	r0, [pc, #164]	; (801b5a4 <cogui_dc_draw_line+0xc0>)
 801b4fe:	f001 fdf3 	bl	801d0e8 <cogui_assert_handler>
	
    /* this is a line width 1 */
	if (x1 == x2)
 801b502:	68ba      	ldr	r2, [r7, #8]
 801b504:	687b      	ldr	r3, [r7, #4]
 801b506:	429a      	cmp	r2, r3
 801b508:	d108      	bne.n	801b51c <cogui_dc_draw_line+0x38>
		dc->engine->draw_vline(dc, x1, y1, y2);
 801b50a:	68fb      	ldr	r3, [r7, #12]
 801b50c:	685b      	ldr	r3, [r3, #4]
 801b50e:	689c      	ldr	r4, [r3, #8]
 801b510:	6a3b      	ldr	r3, [r7, #32]
 801b512:	683a      	ldr	r2, [r7, #0]
 801b514:	68b9      	ldr	r1, [r7, #8]
 801b516:	68f8      	ldr	r0, [r7, #12]
 801b518:	47a0      	blx	r4
		_int_comp(y1, y2);
		
		for( ; y1 < y2; y1++)
			dc->engine->draw_hline(dc, x1, x2, y1);
	}
}
 801b51a:	e03c      	b.n	801b596 <cogui_dc_draw_line+0xb2>
	else if (y1 == y2)
 801b51c:	683a      	ldr	r2, [r7, #0]
 801b51e:	6a3b      	ldr	r3, [r7, #32]
 801b520:	429a      	cmp	r2, r3
 801b522:	d108      	bne.n	801b536 <cogui_dc_draw_line+0x52>
		dc->engine->draw_hline(dc, x1, x2, y1);
 801b524:	68fb      	ldr	r3, [r7, #12]
 801b526:	685b      	ldr	r3, [r3, #4]
 801b528:	68dc      	ldr	r4, [r3, #12]
 801b52a:	683b      	ldr	r3, [r7, #0]
 801b52c:	687a      	ldr	r2, [r7, #4]
 801b52e:	68b9      	ldr	r1, [r7, #8]
 801b530:	68f8      	ldr	r0, [r7, #12]
 801b532:	47a0      	blx	r4
}
 801b534:	e02f      	b.n	801b596 <cogui_dc_draw_line+0xb2>
		_int_comp(x1, x2);
 801b536:	68ba      	ldr	r2, [r7, #8]
 801b538:	687b      	ldr	r3, [r7, #4]
 801b53a:	429a      	cmp	r2, r3
 801b53c:	dd0b      	ble.n	801b556 <cogui_dc_draw_line+0x72>
 801b53e:	68ba      	ldr	r2, [r7, #8]
 801b540:	687b      	ldr	r3, [r7, #4]
 801b542:	4053      	eors	r3, r2
 801b544:	60bb      	str	r3, [r7, #8]
 801b546:	687a      	ldr	r2, [r7, #4]
 801b548:	68bb      	ldr	r3, [r7, #8]
 801b54a:	4053      	eors	r3, r2
 801b54c:	607b      	str	r3, [r7, #4]
 801b54e:	68ba      	ldr	r2, [r7, #8]
 801b550:	687b      	ldr	r3, [r7, #4]
 801b552:	4053      	eors	r3, r2
 801b554:	60bb      	str	r3, [r7, #8]
		_int_comp(y1, y2);
 801b556:	683a      	ldr	r2, [r7, #0]
 801b558:	6a3b      	ldr	r3, [r7, #32]
 801b55a:	429a      	cmp	r2, r3
 801b55c:	dd17      	ble.n	801b58e <cogui_dc_draw_line+0xaa>
 801b55e:	683a      	ldr	r2, [r7, #0]
 801b560:	6a3b      	ldr	r3, [r7, #32]
 801b562:	4053      	eors	r3, r2
 801b564:	603b      	str	r3, [r7, #0]
 801b566:	6a3a      	ldr	r2, [r7, #32]
 801b568:	683b      	ldr	r3, [r7, #0]
 801b56a:	4053      	eors	r3, r2
 801b56c:	623b      	str	r3, [r7, #32]
 801b56e:	683a      	ldr	r2, [r7, #0]
 801b570:	6a3b      	ldr	r3, [r7, #32]
 801b572:	4053      	eors	r3, r2
 801b574:	603b      	str	r3, [r7, #0]
		for( ; y1 < y2; y1++)
 801b576:	e00a      	b.n	801b58e <cogui_dc_draw_line+0xaa>
			dc->engine->draw_hline(dc, x1, x2, y1);
 801b578:	68fb      	ldr	r3, [r7, #12]
 801b57a:	685b      	ldr	r3, [r3, #4]
 801b57c:	68dc      	ldr	r4, [r3, #12]
 801b57e:	683b      	ldr	r3, [r7, #0]
 801b580:	687a      	ldr	r2, [r7, #4]
 801b582:	68b9      	ldr	r1, [r7, #8]
 801b584:	68f8      	ldr	r0, [r7, #12]
 801b586:	47a0      	blx	r4
		for( ; y1 < y2; y1++)
 801b588:	683b      	ldr	r3, [r7, #0]
 801b58a:	3301      	adds	r3, #1
 801b58c:	603b      	str	r3, [r7, #0]
 801b58e:	683a      	ldr	r2, [r7, #0]
 801b590:	6a3b      	ldr	r3, [r7, #32]
 801b592:	429a      	cmp	r2, r3
 801b594:	dbf0      	blt.n	801b578 <cogui_dc_draw_line+0x94>
}
 801b596:	bf00      	nop
 801b598:	3714      	adds	r7, #20
 801b59a:	46bd      	mov	sp, r7
 801b59c:	bd90      	pop	{r4, r7, pc}
 801b59e:	bf00      	nop
 801b5a0:	08022c1c 	.word	0x08022c1c
 801b5a4:	08022bf8 	.word	0x08022bf8

0801b5a8 <cogui_dc_draw_rect>:
 * @param[out] None
 * @retval     None
 *******************************************************************************
 */
void cogui_dc_draw_rect(cogui_dc_t *dc, cogui_rect_t *rect)
{
 801b5a8:	b590      	push	{r4, r7, lr}
 801b5aa:	b087      	sub	sp, #28
 801b5ac:	af00      	add	r7, sp, #0
 801b5ae:	6078      	str	r0, [r7, #4]
 801b5b0:	6039      	str	r1, [r7, #0]
	COGUI_ASSERT(dc != Co_NULL);
 801b5b2:	687b      	ldr	r3, [r7, #4]
 801b5b4:	2b00      	cmp	r3, #0
 801b5b6:	d104      	bne.n	801b5c2 <cogui_dc_draw_rect+0x1a>
 801b5b8:	2237      	movs	r2, #55	; 0x37
 801b5ba:	491f      	ldr	r1, [pc, #124]	; (801b638 <cogui_dc_draw_rect+0x90>)
 801b5bc:	481f      	ldr	r0, [pc, #124]	; (801b63c <cogui_dc_draw_rect+0x94>)
 801b5be:	f001 fd93 	bl	801d0e8 <cogui_assert_handler>
	
	if (rect == Co_NULL)
 801b5c2:	683b      	ldr	r3, [r7, #0]
 801b5c4:	2b00      	cmp	r3, #0
 801b5c6:	d032      	beq.n	801b62e <cogui_dc_draw_rect+0x86>
		return;
	
	co_int32_t x1, x2, y1, y2;
	
	x1 = rect->x1;
 801b5c8:	683b      	ldr	r3, [r7, #0]
 801b5ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 801b5ce:	617b      	str	r3, [r7, #20]
	x2 = rect->x2;
 801b5d0:	683b      	ldr	r3, [r7, #0]
 801b5d2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801b5d6:	613b      	str	r3, [r7, #16]
	y1 = rect->y1;
 801b5d8:	683b      	ldr	r3, [r7, #0]
 801b5da:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801b5de:	60fb      	str	r3, [r7, #12]
	y2 = rect->y2;
 801b5e0:	683b      	ldr	r3, [r7, #0]
 801b5e2:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801b5e6:	60bb      	str	r3, [r7, #8]
	
    /* draw rectangle's 4 edges*/
	dc->engine->draw_vline(dc, x1,   y1, y2);
 801b5e8:	687b      	ldr	r3, [r7, #4]
 801b5ea:	685b      	ldr	r3, [r3, #4]
 801b5ec:	689c      	ldr	r4, [r3, #8]
 801b5ee:	68bb      	ldr	r3, [r7, #8]
 801b5f0:	68fa      	ldr	r2, [r7, #12]
 801b5f2:	6979      	ldr	r1, [r7, #20]
 801b5f4:	6878      	ldr	r0, [r7, #4]
 801b5f6:	47a0      	blx	r4
	dc->engine->draw_vline(dc, x2-1, y1, y2);
 801b5f8:	687b      	ldr	r3, [r7, #4]
 801b5fa:	685b      	ldr	r3, [r3, #4]
 801b5fc:	689c      	ldr	r4, [r3, #8]
 801b5fe:	693b      	ldr	r3, [r7, #16]
 801b600:	1e59      	subs	r1, r3, #1
 801b602:	68bb      	ldr	r3, [r7, #8]
 801b604:	68fa      	ldr	r2, [r7, #12]
 801b606:	6878      	ldr	r0, [r7, #4]
 801b608:	47a0      	blx	r4
	dc->engine->draw_hline(dc, x1,   x2, y1);
 801b60a:	687b      	ldr	r3, [r7, #4]
 801b60c:	685b      	ldr	r3, [r3, #4]
 801b60e:	68dc      	ldr	r4, [r3, #12]
 801b610:	68fb      	ldr	r3, [r7, #12]
 801b612:	693a      	ldr	r2, [r7, #16]
 801b614:	6979      	ldr	r1, [r7, #20]
 801b616:	6878      	ldr	r0, [r7, #4]
 801b618:	47a0      	blx	r4
	dc->engine->draw_hline(dc, x1,   x2, y2-1);
 801b61a:	687b      	ldr	r3, [r7, #4]
 801b61c:	685b      	ldr	r3, [r3, #4]
 801b61e:	68dc      	ldr	r4, [r3, #12]
 801b620:	68bb      	ldr	r3, [r7, #8]
 801b622:	3b01      	subs	r3, #1
 801b624:	693a      	ldr	r2, [r7, #16]
 801b626:	6979      	ldr	r1, [r7, #20]
 801b628:	6878      	ldr	r0, [r7, #4]
 801b62a:	47a0      	blx	r4
 801b62c:	e000      	b.n	801b630 <cogui_dc_draw_rect+0x88>
		return;
 801b62e:	bf00      	nop
}
 801b630:	371c      	adds	r7, #28
 801b632:	46bd      	mov	sp, r7
 801b634:	bd90      	pop	{r4, r7, pc}
 801b636:	bf00      	nop
 801b638:	08022c30 	.word	0x08022c30
 801b63c:	08022bf8 	.word	0x08022bf8

0801b640 <cogui_dc_fill_rect_forecolor>:
 * @details    This function is called to draw a solid rectangle and filled
 *             with foreground color.
 *******************************************************************************
 */
void cogui_dc_fill_rect_forecolor(cogui_dc_t *dc, cogui_rect_t *rect)
{
 801b640:	b590      	push	{r4, r7, lr}
 801b642:	b085      	sub	sp, #20
 801b644:	af00      	add	r7, sp, #0
 801b646:	6078      	str	r0, [r7, #4]
 801b648:	6039      	str	r1, [r7, #0]
	COGUI_ASSERT(dc != Co_NULL);
 801b64a:	687b      	ldr	r3, [r7, #4]
 801b64c:	2b00      	cmp	r3, #0
 801b64e:	d104      	bne.n	801b65a <cogui_dc_fill_rect_forecolor+0x1a>
 801b650:	2259      	movs	r2, #89	; 0x59
 801b652:	4915      	ldr	r1, [pc, #84]	; (801b6a8 <cogui_dc_fill_rect_forecolor+0x68>)
 801b654:	4815      	ldr	r0, [pc, #84]	; (801b6ac <cogui_dc_fill_rect_forecolor+0x6c>)
 801b656:	f001 fd47 	bl	801d0e8 <cogui_assert_handler>
	cogui_color_t save_color;
	
    /* Since the fill_rect interface will filled with background color, so we
     * should save the old background color and change background into current
     * foreground color */
	save_color      = COGUI_DC_BC(dc);
 801b65a:	6878      	ldr	r0, [r7, #4]
 801b65c:	f000 f9b8 	bl	801b9d0 <cogui_dc_get_gc>
 801b660:	4603      	mov	r3, r0
 801b662:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 801b666:	e9c7 3402 	strd	r3, r4, [r7, #8]
	COGUI_DC_BC(dc) = COGUI_DC_FC(dc);
 801b66a:	6878      	ldr	r0, [r7, #4]
 801b66c:	f000 f9b0 	bl	801b9d0 <cogui_dc_get_gc>
 801b670:	4604      	mov	r4, r0
 801b672:	6878      	ldr	r0, [r7, #4]
 801b674:	f000 f9ac 	bl	801b9d0 <cogui_dc_get_gc>
 801b678:	4602      	mov	r2, r0
 801b67a:	e9d4 3400 	ldrd	r3, r4, [r4]
 801b67e:	e9c2 3402 	strd	r3, r4, [r2, #8]
	
    /* call interface */
	dc->engine->fill_rect(dc, rect);
 801b682:	687b      	ldr	r3, [r7, #4]
 801b684:	685b      	ldr	r3, [r3, #4]
 801b686:	691b      	ldr	r3, [r3, #16]
 801b688:	6839      	ldr	r1, [r7, #0]
 801b68a:	6878      	ldr	r0, [r7, #4]
 801b68c:	4798      	blx	r3
	
    /* restore background color */
	COGUI_DC_BC(dc) = save_color;
 801b68e:	6878      	ldr	r0, [r7, #4]
 801b690:	f000 f99e 	bl	801b9d0 <cogui_dc_get_gc>
 801b694:	4602      	mov	r2, r0
 801b696:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 801b69a:	e9c2 3402 	strd	r3, r4, [r2, #8]
}
 801b69e:	bf00      	nop
 801b6a0:	3714      	adds	r7, #20
 801b6a2:	46bd      	mov	sp, r7
 801b6a4:	bd90      	pop	{r4, r7, pc}
 801b6a6:	bf00      	nop
 801b6a8:	08022c44 	.word	0x08022c44
 801b6ac:	08022bf8 	.word	0x08022bf8

0801b6b0 <cogui_dc_draw_shaded_rect>:

void cogui_dc_draw_shaded_rect(cogui_dc_t *dc, cogui_rect_t *rect, cogui_color_t c1, cogui_color_t c2)
{
 801b6b0:	b590      	push	{r4, r7, lr}
 801b6b2:	b085      	sub	sp, #20
 801b6b4:	af00      	add	r7, sp, #0
 801b6b6:	60f8      	str	r0, [r7, #12]
 801b6b8:	60b9      	str	r1, [r7, #8]
 801b6ba:	e9c7 2300 	strd	r2, r3, [r7]
	COGUI_ASSERT(dc != Co_NULL);
 801b6be:	68fb      	ldr	r3, [r7, #12]
 801b6c0:	2b00      	cmp	r3, #0
 801b6c2:	d104      	bne.n	801b6ce <cogui_dc_draw_shaded_rect+0x1e>
 801b6c4:	226c      	movs	r2, #108	; 0x6c
 801b6c6:	492c      	ldr	r1, [pc, #176]	; (801b778 <cogui_dc_draw_shaded_rect+0xc8>)
 801b6c8:	482c      	ldr	r0, [pc, #176]	; (801b77c <cogui_dc_draw_shaded_rect+0xcc>)
 801b6ca:	f001 fd0d 	bl	801d0e8 <cogui_assert_handler>
		
	COGUI_DC_FC(dc) = c1;
 801b6ce:	68f8      	ldr	r0, [r7, #12]
 801b6d0:	f000 f97e 	bl	801b9d0 <cogui_dc_get_gc>
 801b6d4:	4602      	mov	r2, r0
 801b6d6:	e9d7 3400 	ldrd	r3, r4, [r7]
 801b6da:	e9c2 3400 	strd	r3, r4, [r2]
	dc->engine->draw_vline(dc, rect->x1,   rect->y1, rect->y2);
 801b6de:	68fb      	ldr	r3, [r7, #12]
 801b6e0:	685b      	ldr	r3, [r3, #4]
 801b6e2:	689c      	ldr	r4, [r3, #8]
 801b6e4:	68bb      	ldr	r3, [r7, #8]
 801b6e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 801b6ea:	4619      	mov	r1, r3
 801b6ec:	68bb      	ldr	r3, [r7, #8]
 801b6ee:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801b6f2:	461a      	mov	r2, r3
 801b6f4:	68bb      	ldr	r3, [r7, #8]
 801b6f6:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801b6fa:	68f8      	ldr	r0, [r7, #12]
 801b6fc:	47a0      	blx	r4
	dc->engine->draw_hline(dc, rect->x1+1, rect->x2, rect->y1);
 801b6fe:	68fb      	ldr	r3, [r7, #12]
 801b700:	685b      	ldr	r3, [r3, #4]
 801b702:	68dc      	ldr	r4, [r3, #12]
 801b704:	68bb      	ldr	r3, [r7, #8]
 801b706:	f9b3 3000 	ldrsh.w	r3, [r3]
 801b70a:	1c59      	adds	r1, r3, #1
 801b70c:	68bb      	ldr	r3, [r7, #8]
 801b70e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801b712:	461a      	mov	r2, r3
 801b714:	68bb      	ldr	r3, [r7, #8]
 801b716:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801b71a:	68f8      	ldr	r0, [r7, #12]
 801b71c:	47a0      	blx	r4
	
	COGUI_DC_FC(dc) = c2;
 801b71e:	68f8      	ldr	r0, [r7, #12]
 801b720:	f000 f956 	bl	801b9d0 <cogui_dc_get_gc>
 801b724:	4602      	mov	r2, r0
 801b726:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 801b72a:	e9c2 3400 	strd	r3, r4, [r2]
	dc->engine->draw_vline(dc, rect->x2-1, rect->y1, rect->y2);
 801b72e:	68fb      	ldr	r3, [r7, #12]
 801b730:	685b      	ldr	r3, [r3, #4]
 801b732:	689c      	ldr	r4, [r3, #8]
 801b734:	68bb      	ldr	r3, [r7, #8]
 801b736:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801b73a:	1e59      	subs	r1, r3, #1
 801b73c:	68bb      	ldr	r3, [r7, #8]
 801b73e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801b742:	461a      	mov	r2, r3
 801b744:	68bb      	ldr	r3, [r7, #8]
 801b746:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801b74a:	68f8      	ldr	r0, [r7, #12]
 801b74c:	47a0      	blx	r4
	dc->engine->draw_hline(dc, rect->x1,   rect->x2, rect->y2-1);
 801b74e:	68fb      	ldr	r3, [r7, #12]
 801b750:	685b      	ldr	r3, [r3, #4]
 801b752:	68dc      	ldr	r4, [r3, #12]
 801b754:	68bb      	ldr	r3, [r7, #8]
 801b756:	f9b3 3000 	ldrsh.w	r3, [r3]
 801b75a:	4619      	mov	r1, r3
 801b75c:	68bb      	ldr	r3, [r7, #8]
 801b75e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801b762:	461a      	mov	r2, r3
 801b764:	68bb      	ldr	r3, [r7, #8]
 801b766:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801b76a:	3b01      	subs	r3, #1
 801b76c:	68f8      	ldr	r0, [r7, #12]
 801b76e:	47a0      	blx	r4
}
 801b770:	bf00      	nop
 801b772:	3714      	adds	r7, #20
 801b774:	46bd      	mov	sp, r7
 801b776:	bd90      	pop	{r4, r7, pc}
 801b778:	08022c64 	.word	0x08022c64
 801b77c:	08022bf8 	.word	0x08022bf8

0801b780 <cogui_dc_draw_border>:

void cogui_dc_draw_border(cogui_dc_t *dc, cogui_rect_t *rect)
{
 801b780:	b590      	push	{r4, r7, lr}
 801b782:	b087      	sub	sp, #28
 801b784:	af00      	add	r7, sp, #0
 801b786:	6078      	str	r0, [r7, #4]
 801b788:	6039      	str	r1, [r7, #0]
	cogui_rect_t r = *rect;
 801b78a:	683a      	ldr	r2, [r7, #0]
 801b78c:	f107 0308 	add.w	r3, r7, #8
 801b790:	6810      	ldr	r0, [r2, #0]
 801b792:	6851      	ldr	r1, [r2, #4]
 801b794:	c303      	stmia	r3!, {r0, r1}
	cogui_color_t save_color;
	
	COGUI_ASSERT(dc != Co_NULL);
 801b796:	687b      	ldr	r3, [r7, #4]
 801b798:	2b00      	cmp	r3, #0
 801b79a:	d104      	bne.n	801b7a6 <cogui_dc_draw_border+0x26>
 801b79c:	227c      	movs	r2, #124	; 0x7c
 801b79e:	4927      	ldr	r1, [pc, #156]	; (801b83c <cogui_dc_draw_border+0xbc>)
 801b7a0:	4827      	ldr	r0, [pc, #156]	; (801b840 <cogui_dc_draw_border+0xc0>)
 801b7a2:	f001 fca1 	bl	801d0e8 <cogui_assert_handler>
	
	if (rect == Co_NULL)
 801b7a6:	683b      	ldr	r3, [r7, #0]
 801b7a8:	2b00      	cmp	r3, #0
 801b7aa:	d042      	beq.n	801b832 <cogui_dc_draw_border+0xb2>
		return;
	
    save_color      = COGUI_DC_FC(dc);
 801b7ac:	6878      	ldr	r0, [r7, #4]
 801b7ae:	f000 f90f 	bl	801b9d0 <cogui_dc_get_gc>
 801b7b2:	4603      	mov	r3, r0
 801b7b4:	e9d3 3400 	ldrd	r3, r4, [r3]
 801b7b8:	e9c7 3404 	strd	r3, r4, [r7, #16]
	COGUI_DC_FC(dc) = COGUI_LIGHT_GRAY;
 801b7bc:	6878      	ldr	r0, [r7, #4]
 801b7be:	f000 f907 	bl	801b9d0 <cogui_dc_get_gc>
 801b7c2:	4602      	mov	r2, r0
 801b7c4:	f649 43f3 	movw	r3, #40179	; 0x9cf3
 801b7c8:	f04f 0400 	mov.w	r4, #0
 801b7cc:	e9c2 3400 	strd	r3, r4, [r2]

	cogui_dc_draw_rect(dc, &r);
 801b7d0:	f107 0308 	add.w	r3, r7, #8
 801b7d4:	4619      	mov	r1, r3
 801b7d6:	6878      	ldr	r0, [r7, #4]
 801b7d8:	f7ff fee6 	bl	801b5a8 <cogui_dc_draw_rect>

    COGUI_RECT_EXPAND(&r, -1);
 801b7dc:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801b7e0:	b29b      	uxth	r3, r3
 801b7e2:	3301      	adds	r3, #1
 801b7e4:	b29b      	uxth	r3, r3
 801b7e6:	b21b      	sxth	r3, r3
 801b7e8:	813b      	strh	r3, [r7, #8]
 801b7ea:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 801b7ee:	b29b      	uxth	r3, r3
 801b7f0:	3b01      	subs	r3, #1
 801b7f2:	b29b      	uxth	r3, r3
 801b7f4:	b21b      	sxth	r3, r3
 801b7f6:	817b      	strh	r3, [r7, #10]
 801b7f8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 801b7fc:	b29b      	uxth	r3, r3
 801b7fe:	3301      	adds	r3, #1
 801b800:	b29b      	uxth	r3, r3
 801b802:	b21b      	sxth	r3, r3
 801b804:	81bb      	strh	r3, [r7, #12]
 801b806:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801b80a:	b29b      	uxth	r3, r3
 801b80c:	3b01      	subs	r3, #1
 801b80e:	b29b      	uxth	r3, r3
 801b810:	b21b      	sxth	r3, r3
 801b812:	81fb      	strh	r3, [r7, #14]

	cogui_dc_draw_rect(dc, &r);
 801b814:	f107 0308 	add.w	r3, r7, #8
 801b818:	4619      	mov	r1, r3
 801b81a:	6878      	ldr	r0, [r7, #4]
 801b81c:	f7ff fec4 	bl	801b5a8 <cogui_dc_draw_rect>

    COGUI_DC_FC(dc) = save_color;
 801b820:	6878      	ldr	r0, [r7, #4]
 801b822:	f000 f8d5 	bl	801b9d0 <cogui_dc_get_gc>
 801b826:	4602      	mov	r2, r0
 801b828:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 801b82c:	e9c2 3400 	strd	r3, r4, [r2]
 801b830:	e000      	b.n	801b834 <cogui_dc_draw_border+0xb4>
		return;
 801b832:	bf00      	nop
}
 801b834:	371c      	adds	r7, #28
 801b836:	46bd      	mov	sp, r7
 801b838:	bd90      	pop	{r4, r7, pc}
 801b83a:	bf00      	nop
 801b83c:	08022c80 	.word	0x08022c80
 801b840:	08022bf8 	.word	0x08022bf8

0801b844 <cogui_dc_draw_text>:

void cogui_dc_draw_text(cogui_dc_t *dc, cogui_rect_t *rect, char *str)
{
 801b844:	b5b0      	push	{r4, r5, r7, lr}
 801b846:	b08c      	sub	sp, #48	; 0x30
 801b848:	af02      	add	r7, sp, #8
 801b84a:	60f8      	str	r0, [r7, #12]
 801b84c:	60b9      	str	r1, [r7, #8]
 801b84e:	607a      	str	r2, [r7, #4]
	COGUI_ASSERT(dc != Co_NULL);
 801b850:	68fb      	ldr	r3, [r7, #12]
 801b852:	2b00      	cmp	r3, #0
 801b854:	d104      	bne.n	801b860 <cogui_dc_draw_text+0x1c>
 801b856:	228f      	movs	r2, #143	; 0x8f
 801b858:	495b      	ldr	r1, [pc, #364]	; (801b9c8 <cogui_dc_draw_text+0x184>)
 801b85a:	485c      	ldr	r0, [pc, #368]	; (801b9cc <cogui_dc_draw_text+0x188>)
 801b85c:	f001 fc44 	bl	801d0e8 <cogui_assert_handler>

    /* pass if nothing to show */
    if (str == Co_NULL) {
 801b860:	687b      	ldr	r3, [r7, #4]
 801b862:	2b00      	cmp	r3, #0
 801b864:	f000 80ac 	beq.w	801b9c0 <cogui_dc_draw_text+0x17c>
        return;
    }

    co_uint16_t text_align = COGUI_DC_TA(dc);
 801b868:	68f8      	ldr	r0, [r7, #12]
 801b86a:	f000 f8b1 	bl	801b9d0 <cogui_dc_get_gc>
 801b86e:	4603      	mov	r3, r0
 801b870:	8a9b      	ldrh	r3, [r3, #20]
 801b872:	837b      	strh	r3, [r7, #26]
    co_int16_t  tx, ty;

    /* default style setting */
    if (text_align == COGUI_TEXT_ALIGN_NONE) {
 801b874:	8b7b      	ldrh	r3, [r7, #26]
 801b876:	2b00      	cmp	r3, #0
 801b878:	d103      	bne.n	801b882 <cogui_dc_draw_text+0x3e>
        tx = ty = 0;
 801b87a:	2300      	movs	r3, #0
 801b87c:	84bb      	strh	r3, [r7, #36]	; 0x24
 801b87e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801b880:	84fb      	strh	r3, [r7, #38]	; 0x26
    }

    co_uint32_t text_width = cogui_get_text_width(str, COGUI_DC_FONT(dc));
 801b882:	68f8      	ldr	r0, [r7, #12]
 801b884:	f000 f8a4 	bl	801b9d0 <cogui_dc_get_gc>
 801b888:	4603      	mov	r3, r0
 801b88a:	691b      	ldr	r3, [r3, #16]
 801b88c:	4619      	mov	r1, r3
 801b88e:	6878      	ldr	r0, [r7, #4]
 801b890:	f000 fc6b 	bl	801c16a <cogui_get_text_width>
 801b894:	6238      	str	r0, [r7, #32]
    co_uint32_t rect_width = COGUI_RECT_WIDTH(rect);
 801b896:	68bb      	ldr	r3, [r7, #8]
 801b898:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801b89c:	461a      	mov	r2, r3
 801b89e:	68bb      	ldr	r3, [r7, #8]
 801b8a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 801b8a4:	1ad3      	subs	r3, r2, r3
 801b8a6:	617b      	str	r3, [r7, #20]

    /* if text is too long, it will no longer align */
    if (text_width > rect_width) {
 801b8a8:	6a3a      	ldr	r2, [r7, #32]
 801b8aa:	697b      	ldr	r3, [r7, #20]
 801b8ac:	429a      	cmp	r2, r3
 801b8ae:	d901      	bls.n	801b8b4 <cogui_dc_draw_text+0x70>
        text_width = rect_width;
 801b8b0:	697b      	ldr	r3, [r7, #20]
 801b8b2:	623b      	str	r3, [r7, #32]
    }

    /* fixed text start point x */
    if (text_align & COGUI_TEXT_ALIGN_LEFT) {
 801b8b4:	8b7b      	ldrh	r3, [r7, #26]
 801b8b6:	f003 0301 	and.w	r3, r3, #1
 801b8ba:	2b00      	cmp	r3, #0
 801b8bc:	d002      	beq.n	801b8c4 <cogui_dc_draw_text+0x80>
        tx = 0;
 801b8be:	2300      	movs	r3, #0
 801b8c0:	84fb      	strh	r3, [r7, #38]	; 0x26
 801b8c2:	e01e      	b.n	801b902 <cogui_dc_draw_text+0xbe>
    }
    else if (text_align & COGUI_TEXT_ALIGN_CENTER) {
 801b8c4:	8b7b      	ldrh	r3, [r7, #26]
 801b8c6:	f003 0304 	and.w	r3, r3, #4
 801b8ca:	2b00      	cmp	r3, #0
 801b8cc:	d00d      	beq.n	801b8ea <cogui_dc_draw_text+0xa6>
        tx = rect_width - text_width;
 801b8ce:	697b      	ldr	r3, [r7, #20]
 801b8d0:	b29a      	uxth	r2, r3
 801b8d2:	6a3b      	ldr	r3, [r7, #32]
 801b8d4:	b29b      	uxth	r3, r3
 801b8d6:	1ad3      	subs	r3, r2, r3
 801b8d8:	b29b      	uxth	r3, r3
 801b8da:	84fb      	strh	r3, [r7, #38]	; 0x26
        tx /=2;
 801b8dc:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 801b8e0:	0fda      	lsrs	r2, r3, #31
 801b8e2:	4413      	add	r3, r2
 801b8e4:	105b      	asrs	r3, r3, #1
 801b8e6:	84fb      	strh	r3, [r7, #38]	; 0x26
 801b8e8:	e00b      	b.n	801b902 <cogui_dc_draw_text+0xbe>
    }
    else if (text_align & COGUI_TEXT_ALIGN_RIGHT) {
 801b8ea:	8b7b      	ldrh	r3, [r7, #26]
 801b8ec:	f003 0302 	and.w	r3, r3, #2
 801b8f0:	2b00      	cmp	r3, #0
 801b8f2:	d006      	beq.n	801b902 <cogui_dc_draw_text+0xbe>
        tx = rect_width - text_width;
 801b8f4:	697b      	ldr	r3, [r7, #20]
 801b8f6:	b29a      	uxth	r2, r3
 801b8f8:	6a3b      	ldr	r3, [r7, #32]
 801b8fa:	b29b      	uxth	r3, r3
 801b8fc:	1ad3      	subs	r3, r2, r3
 801b8fe:	b29b      	uxth	r3, r3
 801b900:	84fb      	strh	r3, [r7, #38]	; 0x26
    }

    co_uint32_t text_height = cogui_get_text_height(str, COGUI_DC_FONT(dc), rect);
 801b902:	68f8      	ldr	r0, [r7, #12]
 801b904:	f000 f864 	bl	801b9d0 <cogui_dc_get_gc>
 801b908:	4603      	mov	r3, r0
 801b90a:	691b      	ldr	r3, [r3, #16]
 801b90c:	68ba      	ldr	r2, [r7, #8]
 801b90e:	4619      	mov	r1, r3
 801b910:	6878      	ldr	r0, [r7, #4]
 801b912:	f000 fc57 	bl	801c1c4 <cogui_get_text_height>
 801b916:	61f8      	str	r0, [r7, #28]
    co_uint32_t rect_height = COGUI_RECT_HEIGHT(rect);
 801b918:	68bb      	ldr	r3, [r7, #8]
 801b91a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801b91e:	461a      	mov	r2, r3
 801b920:	68bb      	ldr	r3, [r7, #8]
 801b922:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801b926:	1ad3      	subs	r3, r2, r3
 801b928:	613b      	str	r3, [r7, #16]

    /* text overflow-y: hidden */
    if (text_height > rect_height) {
 801b92a:	69fa      	ldr	r2, [r7, #28]
 801b92c:	693b      	ldr	r3, [r7, #16]
 801b92e:	429a      	cmp	r2, r3
 801b930:	d901      	bls.n	801b936 <cogui_dc_draw_text+0xf2>
        text_height = rect_height;
 801b932:	693b      	ldr	r3, [r7, #16]
 801b934:	61fb      	str	r3, [r7, #28]
    } 

    /* fixed text start point y */
    if (text_align & COGUI_TEXT_ALIGN_TOP) {
 801b936:	8b7b      	ldrh	r3, [r7, #26]
 801b938:	f003 0308 	and.w	r3, r3, #8
 801b93c:	2b00      	cmp	r3, #0
 801b93e:	d002      	beq.n	801b946 <cogui_dc_draw_text+0x102>
        ty = 0;
 801b940:	2300      	movs	r3, #0
 801b942:	84bb      	strh	r3, [r7, #36]	; 0x24
 801b944:	e01e      	b.n	801b984 <cogui_dc_draw_text+0x140>
    }
    else if (text_align & COGUI_TEXT_ALIGN_MIDDLE) {
 801b946:	8b7b      	ldrh	r3, [r7, #26]
 801b948:	f003 0310 	and.w	r3, r3, #16
 801b94c:	2b00      	cmp	r3, #0
 801b94e:	d00d      	beq.n	801b96c <cogui_dc_draw_text+0x128>
        ty = rect_height - text_height;
 801b950:	693b      	ldr	r3, [r7, #16]
 801b952:	b29a      	uxth	r2, r3
 801b954:	69fb      	ldr	r3, [r7, #28]
 801b956:	b29b      	uxth	r3, r3
 801b958:	1ad3      	subs	r3, r2, r3
 801b95a:	b29b      	uxth	r3, r3
 801b95c:	84bb      	strh	r3, [r7, #36]	; 0x24
        ty/=2;
 801b95e:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 801b962:	0fda      	lsrs	r2, r3, #31
 801b964:	4413      	add	r3, r2
 801b966:	105b      	asrs	r3, r3, #1
 801b968:	84bb      	strh	r3, [r7, #36]	; 0x24
 801b96a:	e00b      	b.n	801b984 <cogui_dc_draw_text+0x140>
    }
    else if (text_align & COGUI_TEXT_ALIGN_BOTTOM) {
 801b96c:	8b7b      	ldrh	r3, [r7, #26]
 801b96e:	f003 0320 	and.w	r3, r3, #32
 801b972:	2b00      	cmp	r3, #0
 801b974:	d006      	beq.n	801b984 <cogui_dc_draw_text+0x140>
        ty = rect_height - text_height;
 801b976:	693b      	ldr	r3, [r7, #16]
 801b978:	b29a      	uxth	r2, r3
 801b97a:	69fb      	ldr	r3, [r7, #28]
 801b97c:	b29b      	uxth	r3, r3
 801b97e:	1ad3      	subs	r3, r2, r3
 801b980:	b29b      	uxth	r3, r3
 801b982:	84bb      	strh	r3, [r7, #36]	; 0x24
    }

    /* put text in the right place */
    cogui_lcd_puts(tx+rect->x1, ty+rect->y1, str, COGUI_DC_FONT(dc), dc, rect);
 801b984:	68bb      	ldr	r3, [r7, #8]
 801b986:	f9b3 3000 	ldrsh.w	r3, [r3]
 801b98a:	b29a      	uxth	r2, r3
 801b98c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801b98e:	4413      	add	r3, r2
 801b990:	b29c      	uxth	r4, r3
 801b992:	68bb      	ldr	r3, [r7, #8]
 801b994:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801b998:	b29a      	uxth	r2, r3
 801b99a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801b99c:	4413      	add	r3, r2
 801b99e:	b29d      	uxth	r5, r3
 801b9a0:	68f8      	ldr	r0, [r7, #12]
 801b9a2:	f000 f815 	bl	801b9d0 <cogui_dc_get_gc>
 801b9a6:	4603      	mov	r3, r0
 801b9a8:	691a      	ldr	r2, [r3, #16]
 801b9aa:	68bb      	ldr	r3, [r7, #8]
 801b9ac:	9301      	str	r3, [sp, #4]
 801b9ae:	68fb      	ldr	r3, [r7, #12]
 801b9b0:	9300      	str	r3, [sp, #0]
 801b9b2:	4613      	mov	r3, r2
 801b9b4:	687a      	ldr	r2, [r7, #4]
 801b9b6:	4629      	mov	r1, r5
 801b9b8:	4620      	mov	r0, r4
 801b9ba:	f000 fb49 	bl	801c050 <cogui_lcd_puts>
 801b9be:	e000      	b.n	801b9c2 <cogui_dc_draw_text+0x17e>
        return;
 801b9c0:	bf00      	nop
}
 801b9c2:	3728      	adds	r7, #40	; 0x28
 801b9c4:	46bd      	mov	sp, r7
 801b9c6:	bdb0      	pop	{r4, r5, r7, pc}
 801b9c8:	08022c98 	.word	0x08022c98
 801b9cc:	08022bf8 	.word	0x08022bf8

0801b9d0 <cogui_dc_get_gc>:
 * @details    This function is called to find graph context by giving DC 
 *             pointer.
 *******************************************************************************
 */
struct cogui_gc *cogui_dc_get_gc(cogui_dc_t *dc)
{
 801b9d0:	b580      	push	{r7, lr}
 801b9d2:	b084      	sub	sp, #16
 801b9d4:	af00      	add	r7, sp, #0
 801b9d6:	6078      	str	r0, [r7, #4]
	struct cogui_gc *gc = Co_NULL;
 801b9d8:	2300      	movs	r3, #0
 801b9da:	60fb      	str	r3, [r7, #12]
	
	COGUI_ASSERT(dc != Co_NULL);
 801b9dc:	687b      	ldr	r3, [r7, #4]
 801b9de:	2b00      	cmp	r3, #0
 801b9e0:	d104      	bne.n	801b9ec <cogui_dc_get_gc+0x1c>
 801b9e2:	22da      	movs	r2, #218	; 0xda
 801b9e4:	490a      	ldr	r1, [pc, #40]	; (801ba10 <cogui_dc_get_gc+0x40>)
 801b9e6:	480b      	ldr	r0, [pc, #44]	; (801ba14 <cogui_dc_get_gc+0x44>)
 801b9e8:	f001 fb7e 	bl	801d0e8 <cogui_assert_handler>
	
	switch(dc->type) {
 801b9ec:	687b      	ldr	r3, [r7, #4]
 801b9ee:	781b      	ldrb	r3, [r3, #0]
 801b9f0:	2b01      	cmp	r3, #1
 801b9f2:	d000      	beq.n	801b9f6 <cogui_dc_get_gc+0x26>
			break;
		}

		case COGUI_DC_BUFFER:
		default:
			break;
 801b9f4:	e006      	b.n	801ba04 <cogui_dc_get_gc+0x34>
			dchw = (struct cogui_dc_hw *)dc;
 801b9f6:	687b      	ldr	r3, [r7, #4]
 801b9f8:	60bb      	str	r3, [r7, #8]
			gc = &dchw->owner->gc;
 801b9fa:	68bb      	ldr	r3, [r7, #8]
 801b9fc:	689b      	ldr	r3, [r3, #8]
 801b9fe:	3330      	adds	r3, #48	; 0x30
 801ba00:	60fb      	str	r3, [r7, #12]
			break;
 801ba02:	bf00      	nop
	}
	
	return gc;
 801ba04:	68fb      	ldr	r3, [r7, #12]
}
 801ba06:	4618      	mov	r0, r3
 801ba08:	3710      	adds	r7, #16
 801ba0a:	46bd      	mov	sp, r7
 801ba0c:	bd80      	pop	{r7, pc}
 801ba0e:	bf00      	nop
 801ba10:	08022cac 	.word	0x08022cac
 801ba14:	08022bf8 	.word	0x08022bf8

0801ba18 <cogui_dc_get_owner>:
 * @details    This function is called to find owner widget by giving DC 
 *             pointer.
 *******************************************************************************
 */
struct cogui_widget *cogui_dc_get_owner(cogui_dc_t *dc)
{
 801ba18:	b580      	push	{r7, lr}
 801ba1a:	b084      	sub	sp, #16
 801ba1c:	af00      	add	r7, sp, #0
 801ba1e:	6078      	str	r0, [r7, #4]
	cogui_widget_t *owner = Co_NULL;
 801ba20:	2300      	movs	r3, #0
 801ba22:	60fb      	str	r3, [r7, #12]
	
	COGUI_ASSERT(dc != Co_NULL);
 801ba24:	687b      	ldr	r3, [r7, #4]
 801ba26:	2b00      	cmp	r3, #0
 801ba28:	d104      	bne.n	801ba34 <cogui_dc_get_owner+0x1c>
 801ba2a:	22fe      	movs	r2, #254	; 0xfe
 801ba2c:	4909      	ldr	r1, [pc, #36]	; (801ba54 <cogui_dc_get_owner+0x3c>)
 801ba2e:	480a      	ldr	r0, [pc, #40]	; (801ba58 <cogui_dc_get_owner+0x40>)
 801ba30:	f001 fb5a 	bl	801d0e8 <cogui_assert_handler>
	
	switch(dc->type) {
 801ba34:	687b      	ldr	r3, [r7, #4]
 801ba36:	781b      	ldrb	r3, [r3, #0]
 801ba38:	2b01      	cmp	r3, #1
 801ba3a:	d000      	beq.n	801ba3e <cogui_dc_get_owner+0x26>
			break;
		}

		case COGUI_DC_BUFFER:
		default:
			break;
 801ba3c:	e005      	b.n	801ba4a <cogui_dc_get_owner+0x32>
			dchw = (struct cogui_dc_hw *)dc;
 801ba3e:	687b      	ldr	r3, [r7, #4]
 801ba40:	60bb      	str	r3, [r7, #8]
			owner = dchw->owner;
 801ba42:	68bb      	ldr	r3, [r7, #8]
 801ba44:	689b      	ldr	r3, [r3, #8]
 801ba46:	60fb      	str	r3, [r7, #12]
			break;
 801ba48:	bf00      	nop
	}
	
	return owner;
 801ba4a:	68fb      	ldr	r3, [r7, #12]
}
 801ba4c:	4618      	mov	r0, r3
 801ba4e:	3710      	adds	r7, #16
 801ba50:	46bd      	mov	sp, r7
 801ba52:	bd80      	pop	{r7, pc}
 801ba54:	08022cbc 	.word	0x08022cbc
 801ba58:	08022bf8 	.word	0x08022bf8

0801ba5c <cogui_dc_begin_drawing>:
 * @details    This function is called to start drawing by create a DC engine
 *             for it.
 *******************************************************************************
 */
cogui_dc_t *cogui_dc_begin_drawing(cogui_widget_t *owner)
{
 801ba5c:	b580      	push	{r7, lr}
 801ba5e:	b084      	sub	sp, #16
 801ba60:	af00      	add	r7, sp, #0
 801ba62:	6078      	str	r0, [r7, #4]
    cogui_dc_t *dc;

    COGUI_ASSERT(owner != Co_NULL);
 801ba64:	687b      	ldr	r3, [r7, #4]
 801ba66:	2b00      	cmp	r3, #0
 801ba68:	d105      	bne.n	801ba76 <cogui_dc_begin_drawing+0x1a>
 801ba6a:	f44f 7291 	mov.w	r2, #290	; 0x122
 801ba6e:	4908      	ldr	r1, [pc, #32]	; (801ba90 <cogui_dc_begin_drawing+0x34>)
 801ba70:	4808      	ldr	r0, [pc, #32]	; (801ba94 <cogui_dc_begin_drawing+0x38>)
 801ba72:	f001 fb39 	bl	801d0e8 <cogui_assert_handler>

#if (COGUI_SCREEN_TYPE == 0)
    /* call hardware interface */
    dc = cogui_dc_hw_create(owner);
 801ba76:	6878      	ldr	r0, [r7, #4]
 801ba78:	f000 f828 	bl	801bacc <cogui_dc_hw_create>
 801ba7c:	60f8      	str	r0, [r7, #12]
#else
#endif

    /* put dc pointer into owner structure */
    owner->dc_engine = dc;
 801ba7e:	687b      	ldr	r3, [r7, #4]
 801ba80:	68fa      	ldr	r2, [r7, #12]
 801ba82:	629a      	str	r2, [r3, #40]	; 0x28

    return dc;
 801ba84:	68fb      	ldr	r3, [r7, #12]
}
 801ba86:	4618      	mov	r0, r3
 801ba88:	3710      	adds	r7, #16
 801ba8a:	46bd      	mov	sp, r7
 801ba8c:	bd80      	pop	{r7, pc}
 801ba8e:	bf00      	nop
 801ba90:	08022cd0 	.word	0x08022cd0
 801ba94:	08022c08 	.word	0x08022c08

0801ba98 <cogui_dc_end_drawing>:
 * @par Description
 * @details    This function is called to free a DC pointer.
 *******************************************************************************
 */
void cogui_dc_end_drawing(cogui_dc_t *dc)
{
 801ba98:	b580      	push	{r7, lr}
 801ba9a:	b082      	sub	sp, #8
 801ba9c:	af00      	add	r7, sp, #0
 801ba9e:	6078      	str	r0, [r7, #4]
    COGUI_ASSERT(dc != Co_NULL);
 801baa0:	687b      	ldr	r3, [r7, #4]
 801baa2:	2b00      	cmp	r3, #0
 801baa4:	d105      	bne.n	801bab2 <cogui_dc_end_drawing+0x1a>
 801baa6:	f240 123d 	movw	r2, #317	; 0x13d
 801baaa:	4906      	ldr	r1, [pc, #24]	; (801bac4 <cogui_dc_end_drawing+0x2c>)
 801baac:	4806      	ldr	r0, [pc, #24]	; (801bac8 <cogui_dc_end_drawing+0x30>)
 801baae:	f001 fb1b 	bl	801d0e8 <cogui_assert_handler>

    /* call DC's fini function */
    dc->engine->fini(dc);
 801bab2:	687b      	ldr	r3, [r7, #4]
 801bab4:	685b      	ldr	r3, [r3, #4]
 801bab6:	695b      	ldr	r3, [r3, #20]
 801bab8:	6878      	ldr	r0, [r7, #4]
 801baba:	4798      	blx	r3
}
 801babc:	bf00      	nop
 801babe:	3708      	adds	r7, #8
 801bac0:	46bd      	mov	sp, r7
 801bac2:	bd80      	pop	{r7, pc}
 801bac4:	08022ce8 	.word	0x08022ce8
 801bac8:	08022bf8 	.word	0x08022bf8

0801bacc <cogui_dc_hw_create>:
 * @param[out] None
 * @retval     *dc		DC pointer which we create     
 *******************************************************************************
 */
cogui_dc_t *cogui_dc_hw_create(cogui_widget_t *owner)
{
 801bacc:	b580      	push	{r7, lr}
 801bace:	b084      	sub	sp, #16
 801bad0:	af00      	add	r7, sp, #0
 801bad2:	6078      	str	r0, [r7, #4]
    struct cogui_dc_hw *dc;

    if (owner == Co_NULL)
 801bad4:	687b      	ldr	r3, [r7, #4]
 801bad6:	2b00      	cmp	r3, #0
 801bad8:	d101      	bne.n	801bade <cogui_dc_hw_create+0x12>
        return Co_NULL;
 801bada:	2300      	movs	r3, #0
 801badc:	e017      	b.n	801bb0e <cogui_dc_hw_create+0x42>

    dc = (struct cogui_dc_hw *) cogui_malloc(sizeof(struct cogui_dc_hw));
 801bade:	2010      	movs	r0, #16
 801bae0:	f000 fe02 	bl	801c6e8 <cogui_malloc>
 801bae4:	60f8      	str	r0, [r7, #12]
    if (dc) {
 801bae6:	68fb      	ldr	r3, [r7, #12]
 801bae8:	2b00      	cmp	r3, #0
 801baea:	d00f      	beq.n	801bb0c <cogui_dc_hw_create+0x40>
        dc->parent.type = COGUI_DC_HW;
 801baec:	68fb      	ldr	r3, [r7, #12]
 801baee:	2201      	movs	r2, #1
 801baf0:	701a      	strb	r2, [r3, #0]
        dc->parent.engine = &dc_hw_engine;
 801baf2:	68fb      	ldr	r3, [r7, #12]
 801baf4:	4a08      	ldr	r2, [pc, #32]	; (801bb18 <cogui_dc_hw_create+0x4c>)
 801baf6:	605a      	str	r2, [r3, #4]
        dc->owner = owner;
 801baf8:	68fb      	ldr	r3, [r7, #12]
 801bafa:	687a      	ldr	r2, [r7, #4]
 801bafc:	609a      	str	r2, [r3, #8]
        dc->hw_driver = cogui_graphic_driver_get_default();
 801bafe:	f000 fa8b 	bl	801c018 <cogui_graphic_driver_get_default>
 801bb02:	4602      	mov	r2, r0
 801bb04:	68fb      	ldr	r3, [r7, #12]
 801bb06:	60da      	str	r2, [r3, #12]
		
        return (cogui_dc_t *)dc;
 801bb08:	68fb      	ldr	r3, [r7, #12]
 801bb0a:	e000      	b.n	801bb0e <cogui_dc_hw_create+0x42>
    }

    return Co_NULL;
 801bb0c:	2300      	movs	r3, #0
}
 801bb0e:	4618      	mov	r0, r3
 801bb10:	3710      	adds	r7, #16
 801bb12:	46bd      	mov	sp, r7
 801bb14:	bd80      	pop	{r7, pc}
 801bb16:	bf00      	nop
 801bb18:	20000110 	.word	0x20000110

0801bb1c <cogui_dc_hw_fini>:
 * @retval     GUI_E_OK	    Finish successfully
 * @retval     GUI_E_ERROR	Something wrong with this DC
 *******************************************************************************
 */
static StatusType cogui_dc_hw_fini(cogui_dc_t *dc)
{
 801bb1c:	b580      	push	{r7, lr}
 801bb1e:	b082      	sub	sp, #8
 801bb20:	af00      	add	r7, sp, #0
 801bb22:	6078      	str	r0, [r7, #4]
    if (dc == Co_NULL || dc->type != COGUI_DC_HW)
 801bb24:	687b      	ldr	r3, [r7, #4]
 801bb26:	2b00      	cmp	r3, #0
 801bb28:	d003      	beq.n	801bb32 <cogui_dc_hw_fini+0x16>
 801bb2a:	687b      	ldr	r3, [r7, #4]
 801bb2c:	781b      	ldrb	r3, [r3, #0]
 801bb2e:	2b01      	cmp	r3, #1
 801bb30:	d001      	beq.n	801bb36 <cogui_dc_hw_fini+0x1a>
        return GUI_E_ERROR;
 801bb32:	2316      	movs	r3, #22
 801bb34:	e003      	b.n	801bb3e <cogui_dc_hw_fini+0x22>

    /* release hardware DC */
    cogui_free(dc);
 801bb36:	6878      	ldr	r0, [r7, #4]
 801bb38:	f000 fdee 	bl	801c718 <cogui_free>

    return GUI_E_OK;
 801bb3c:	2317      	movs	r3, #23
}
 801bb3e:	4618      	mov	r0, r3
 801bb40:	3708      	adds	r7, #8
 801bb42:	46bd      	mov	sp, r7
 801bb44:	bd80      	pop	{r7, pc}

0801bb46 <cogui_dc_hw_draw_point>:
 * @param[out] None
 * @retval     None
 *******************************************************************************
 */
static void cogui_dc_hw_draw_point(cogui_dc_t *self, co_int32_t x, co_int32_t y)
{
 801bb46:	b580      	push	{r7, lr}
 801bb48:	b086      	sub	sp, #24
 801bb4a:	af00      	add	r7, sp, #0
 801bb4c:	60f8      	str	r0, [r7, #12]
 801bb4e:	60b9      	str	r1, [r7, #8]
 801bb50:	607a      	str	r2, [r7, #4]
    struct cogui_dc_hw *dc;

    COGUI_ASSERT(self != Co_NULL);
 801bb52:	68fb      	ldr	r3, [r7, #12]
 801bb54:	2b00      	cmp	r3, #0
 801bb56:	d104      	bne.n	801bb62 <cogui_dc_hw_draw_point+0x1c>
 801bb58:	225c      	movs	r2, #92	; 0x5c
 801bb5a:	4920      	ldr	r1, [pc, #128]	; (801bbdc <cogui_dc_hw_draw_point+0x96>)
 801bb5c:	4820      	ldr	r0, [pc, #128]	; (801bbe0 <cogui_dc_hw_draw_point+0x9a>)
 801bb5e:	f001 fac3 	bl	801d0e8 <cogui_assert_handler>
    dc = (struct cogui_dc_hw *) self;
 801bb62:	68fb      	ldr	r3, [r7, #12]
 801bb64:	617b      	str	r3, [r7, #20]

    /* determine the point is vaild or not */
    if (x < 0 || y < 0)
 801bb66:	68bb      	ldr	r3, [r7, #8]
 801bb68:	2b00      	cmp	r3, #0
 801bb6a:	db2e      	blt.n	801bbca <cogui_dc_hw_draw_point+0x84>
 801bb6c:	687b      	ldr	r3, [r7, #4]
 801bb6e:	2b00      	cmp	r3, #0
 801bb70:	db2b      	blt.n	801bbca <cogui_dc_hw_draw_point+0x84>
        return;

    /* move x to logic x */
    x = x + dc->owner->extent.x1;
 801bb72:	697b      	ldr	r3, [r7, #20]
 801bb74:	689b      	ldr	r3, [r3, #8]
 801bb76:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 801bb7a:	461a      	mov	r2, r3
 801bb7c:	68bb      	ldr	r3, [r7, #8]
 801bb7e:	4413      	add	r3, r2
 801bb80:	60bb      	str	r3, [r7, #8]
    if (x >= dc->owner->extent.x2) 
 801bb82:	697b      	ldr	r3, [r7, #20]
 801bb84:	689b      	ldr	r3, [r3, #8]
 801bb86:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 801bb8a:	461a      	mov	r2, r3
 801bb8c:	68bb      	ldr	r3, [r7, #8]
 801bb8e:	4293      	cmp	r3, r2
 801bb90:	da1d      	bge.n	801bbce <cogui_dc_hw_draw_point+0x88>
        return;
    
    /* move y to logic y */
    y = y + dc->owner->extent.y1;
 801bb92:	697b      	ldr	r3, [r7, #20]
 801bb94:	689b      	ldr	r3, [r3, #8]
 801bb96:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 801bb9a:	461a      	mov	r2, r3
 801bb9c:	687b      	ldr	r3, [r7, #4]
 801bb9e:	4413      	add	r3, r2
 801bba0:	607b      	str	r3, [r7, #4]
    if (y >= dc->owner->extent.y2) 
 801bba2:	697b      	ldr	r3, [r7, #20]
 801bba4:	689b      	ldr	r3, [r3, #8]
 801bba6:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 801bbaa:	461a      	mov	r2, r3
 801bbac:	687b      	ldr	r3, [r7, #4]
 801bbae:	4293      	cmp	r3, r2
 801bbb0:	da0f      	bge.n	801bbd2 <cogui_dc_hw_draw_point+0x8c>
        return;

    /* draw this point */
    dc->hw_driver->ops->set_pixel(&(dc->owner->gc.foreground), x, y);
 801bbb2:	697b      	ldr	r3, [r7, #20]
 801bbb4:	68db      	ldr	r3, [r3, #12]
 801bbb6:	68db      	ldr	r3, [r3, #12]
 801bbb8:	681b      	ldr	r3, [r3, #0]
 801bbba:	697a      	ldr	r2, [r7, #20]
 801bbbc:	6892      	ldr	r2, [r2, #8]
 801bbbe:	f102 0030 	add.w	r0, r2, #48	; 0x30
 801bbc2:	687a      	ldr	r2, [r7, #4]
 801bbc4:	68b9      	ldr	r1, [r7, #8]
 801bbc6:	4798      	blx	r3
 801bbc8:	e004      	b.n	801bbd4 <cogui_dc_hw_draw_point+0x8e>
        return;
 801bbca:	bf00      	nop
 801bbcc:	e002      	b.n	801bbd4 <cogui_dc_hw_draw_point+0x8e>
        return;
 801bbce:	bf00      	nop
 801bbd0:	e000      	b.n	801bbd4 <cogui_dc_hw_draw_point+0x8e>
        return;
 801bbd2:	bf00      	nop
}
 801bbd4:	3718      	adds	r7, #24
 801bbd6:	46bd      	mov	sp, r7
 801bbd8:	bd80      	pop	{r7, pc}
 801bbda:	bf00      	nop
 801bbdc:	08022d18 	.word	0x08022d18
 801bbe0:	08022d00 	.word	0x08022d00

0801bbe4 <cogui_dc_hw_draw_color_point>:
 * @param[out] None
 * @retval     None
 *******************************************************************************
 */
static void cogui_dc_hw_draw_color_point(cogui_dc_t *self, co_int32_t x, co_int32_t y, cogui_color_t color)
{
 801bbe4:	b580      	push	{r7, lr}
 801bbe6:	b086      	sub	sp, #24
 801bbe8:	af00      	add	r7, sp, #0
 801bbea:	60f8      	str	r0, [r7, #12]
 801bbec:	60b9      	str	r1, [r7, #8]
 801bbee:	607a      	str	r2, [r7, #4]
    struct cogui_dc_hw *dc;

    COGUI_ASSERT(self != Co_NULL);
 801bbf0:	68fb      	ldr	r3, [r7, #12]
 801bbf2:	2b00      	cmp	r3, #0
 801bbf4:	d104      	bne.n	801bc00 <cogui_dc_hw_draw_color_point+0x1c>
 801bbf6:	2280      	movs	r2, #128	; 0x80
 801bbf8:	491e      	ldr	r1, [pc, #120]	; (801bc74 <cogui_dc_hw_draw_color_point+0x90>)
 801bbfa:	481f      	ldr	r0, [pc, #124]	; (801bc78 <cogui_dc_hw_draw_color_point+0x94>)
 801bbfc:	f001 fa74 	bl	801d0e8 <cogui_assert_handler>
    dc = (struct cogui_dc_hw *) self;
 801bc00:	68fb      	ldr	r3, [r7, #12]
 801bc02:	617b      	str	r3, [r7, #20]

    /* determine the point is vaild or not */
    if (x < 0 || y < 0)
 801bc04:	68bb      	ldr	r3, [r7, #8]
 801bc06:	2b00      	cmp	r3, #0
 801bc08:	db2c      	blt.n	801bc64 <cogui_dc_hw_draw_color_point+0x80>
 801bc0a:	687b      	ldr	r3, [r7, #4]
 801bc0c:	2b00      	cmp	r3, #0
 801bc0e:	db29      	blt.n	801bc64 <cogui_dc_hw_draw_color_point+0x80>
        return;

    /* move x to logic x */
    x = x + dc->owner->extent.x1;
 801bc10:	697b      	ldr	r3, [r7, #20]
 801bc12:	689b      	ldr	r3, [r3, #8]
 801bc14:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 801bc18:	461a      	mov	r2, r3
 801bc1a:	68bb      	ldr	r3, [r7, #8]
 801bc1c:	4413      	add	r3, r2
 801bc1e:	60bb      	str	r3, [r7, #8]
    if (x >= dc->owner->extent.x2)
 801bc20:	697b      	ldr	r3, [r7, #20]
 801bc22:	689b      	ldr	r3, [r3, #8]
 801bc24:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 801bc28:	461a      	mov	r2, r3
 801bc2a:	68bb      	ldr	r3, [r7, #8]
 801bc2c:	4293      	cmp	r3, r2
 801bc2e:	da1b      	bge.n	801bc68 <cogui_dc_hw_draw_color_point+0x84>
        return;
    
    /* move y to logic y */
    y = y + dc->owner->extent.y1;
 801bc30:	697b      	ldr	r3, [r7, #20]
 801bc32:	689b      	ldr	r3, [r3, #8]
 801bc34:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 801bc38:	461a      	mov	r2, r3
 801bc3a:	687b      	ldr	r3, [r7, #4]
 801bc3c:	4413      	add	r3, r2
 801bc3e:	607b      	str	r3, [r7, #4]
    if (y >= dc->owner->extent.y2)
 801bc40:	697b      	ldr	r3, [r7, #20]
 801bc42:	689b      	ldr	r3, [r3, #8]
 801bc44:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 801bc48:	461a      	mov	r2, r3
 801bc4a:	687b      	ldr	r3, [r7, #4]
 801bc4c:	4293      	cmp	r3, r2
 801bc4e:	da0d      	bge.n	801bc6c <cogui_dc_hw_draw_color_point+0x88>
        return;
    
    /* draw this point */
    dc->hw_driver->ops->set_pixel(&color, x, y);
 801bc50:	697b      	ldr	r3, [r7, #20]
 801bc52:	68db      	ldr	r3, [r3, #12]
 801bc54:	68db      	ldr	r3, [r3, #12]
 801bc56:	681b      	ldr	r3, [r3, #0]
 801bc58:	687a      	ldr	r2, [r7, #4]
 801bc5a:	68b9      	ldr	r1, [r7, #8]
 801bc5c:	f107 0020 	add.w	r0, r7, #32
 801bc60:	4798      	blx	r3
 801bc62:	e004      	b.n	801bc6e <cogui_dc_hw_draw_color_point+0x8a>
        return;
 801bc64:	bf00      	nop
 801bc66:	e002      	b.n	801bc6e <cogui_dc_hw_draw_color_point+0x8a>
        return;
 801bc68:	bf00      	nop
 801bc6a:	e000      	b.n	801bc6e <cogui_dc_hw_draw_color_point+0x8a>
        return;
 801bc6c:	bf00      	nop
}
 801bc6e:	3718      	adds	r7, #24
 801bc70:	46bd      	mov	sp, r7
 801bc72:	bd80      	pop	{r7, pc}
 801bc74:	08022d30 	.word	0x08022d30
 801bc78:	08022d00 	.word	0x08022d00

0801bc7c <cogui_dc_hw_draw_vline>:
 * @details    This function is called to draw a vertical line through hardware
 *             DC, this line is (y2-y1) height.
 *******************************************************************************
 */
static void cogui_dc_hw_draw_vline(cogui_dc_t *self, co_int32_t x, co_int32_t y1, co_int32_t y2)
{
 801bc7c:	b590      	push	{r4, r7, lr}
 801bc7e:	b087      	sub	sp, #28
 801bc80:	af00      	add	r7, sp, #0
 801bc82:	60f8      	str	r0, [r7, #12]
 801bc84:	60b9      	str	r1, [r7, #8]
 801bc86:	607a      	str	r2, [r7, #4]
 801bc88:	603b      	str	r3, [r7, #0]
    struct cogui_dc_hw *dc;

    COGUI_ASSERT(self != Co_NULL);
 801bc8a:	68fb      	ldr	r3, [r7, #12]
 801bc8c:	2b00      	cmp	r3, #0
 801bc8e:	d104      	bne.n	801bc9a <cogui_dc_hw_draw_vline+0x1e>
 801bc90:	22a8      	movs	r2, #168	; 0xa8
 801bc92:	493c      	ldr	r1, [pc, #240]	; (801bd84 <cogui_dc_hw_draw_vline+0x108>)
 801bc94:	483c      	ldr	r0, [pc, #240]	; (801bd88 <cogui_dc_hw_draw_vline+0x10c>)
 801bc96:	f001 fa27 	bl	801d0e8 <cogui_assert_handler>
    dc = (struct cogui_dc_hw *) self;
 801bc9a:	68fb      	ldr	r3, [r7, #12]
 801bc9c:	617b      	str	r3, [r7, #20]

    /* determine x is vaild or not */
    if (x < 0)
 801bc9e:	68bb      	ldr	r3, [r7, #8]
 801bca0:	2b00      	cmp	r3, #0
 801bca2:	db66      	blt.n	801bd72 <cogui_dc_hw_draw_vline+0xf6>
        return;

    /* move x to logic x */
    x = x + dc->owner->extent.x1;
 801bca4:	697b      	ldr	r3, [r7, #20]
 801bca6:	689b      	ldr	r3, [r3, #8]
 801bca8:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 801bcac:	461a      	mov	r2, r3
 801bcae:	68bb      	ldr	r3, [r7, #8]
 801bcb0:	4413      	add	r3, r2
 801bcb2:	60bb      	str	r3, [r7, #8]
    if (x >= dc->owner->extent.x2)
 801bcb4:	697b      	ldr	r3, [r7, #20]
 801bcb6:	689b      	ldr	r3, [r3, #8]
 801bcb8:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 801bcbc:	461a      	mov	r2, r3
 801bcbe:	68bb      	ldr	r3, [r7, #8]
 801bcc0:	4293      	cmp	r3, r2
 801bcc2:	da58      	bge.n	801bd76 <cogui_dc_hw_draw_vline+0xfa>
        return;

    /* move y1 and y2 to logic */    
    y1 = y1 + dc->owner->extent.y1;
 801bcc4:	697b      	ldr	r3, [r7, #20]
 801bcc6:	689b      	ldr	r3, [r3, #8]
 801bcc8:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 801bccc:	461a      	mov	r2, r3
 801bcce:	687b      	ldr	r3, [r7, #4]
 801bcd0:	4413      	add	r3, r2
 801bcd2:	607b      	str	r3, [r7, #4]
    y2 = y2 + dc->owner->extent.y1;
 801bcd4:	697b      	ldr	r3, [r7, #20]
 801bcd6:	689b      	ldr	r3, [r3, #8]
 801bcd8:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 801bcdc:	461a      	mov	r2, r3
 801bcde:	683b      	ldr	r3, [r7, #0]
 801bce0:	4413      	add	r3, r2
 801bce2:	603b      	str	r3, [r7, #0]

    /* y1 should less than y2 */
    if (y1 > y2)
 801bce4:	687a      	ldr	r2, [r7, #4]
 801bce6:	683b      	ldr	r3, [r7, #0]
 801bce8:	429a      	cmp	r2, r3
 801bcea:	dd0b      	ble.n	801bd04 <cogui_dc_hw_draw_vline+0x88>
        _int_swap(y1, y2);
 801bcec:	687a      	ldr	r2, [r7, #4]
 801bcee:	683b      	ldr	r3, [r7, #0]
 801bcf0:	4053      	eors	r3, r2
 801bcf2:	607b      	str	r3, [r7, #4]
 801bcf4:	683a      	ldr	r2, [r7, #0]
 801bcf6:	687b      	ldr	r3, [r7, #4]
 801bcf8:	4053      	eors	r3, r2
 801bcfa:	603b      	str	r3, [r7, #0]
 801bcfc:	687a      	ldr	r2, [r7, #4]
 801bcfe:	683b      	ldr	r3, [r7, #0]
 801bd00:	4053      	eors	r3, r2
 801bd02:	607b      	str	r3, [r7, #4]
    
    /* determine y1 and y2 are vaild or not */
    if (y1 > dc->owner->extent.y2 || y2 < dc->owner->extent.y1)
 801bd04:	697b      	ldr	r3, [r7, #20]
 801bd06:	689b      	ldr	r3, [r3, #8]
 801bd08:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 801bd0c:	461a      	mov	r2, r3
 801bd0e:	687b      	ldr	r3, [r7, #4]
 801bd10:	4293      	cmp	r3, r2
 801bd12:	dc32      	bgt.n	801bd7a <cogui_dc_hw_draw_vline+0xfe>
 801bd14:	697b      	ldr	r3, [r7, #20]
 801bd16:	689b      	ldr	r3, [r3, #8]
 801bd18:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 801bd1c:	461a      	mov	r2, r3
 801bd1e:	683b      	ldr	r3, [r7, #0]
 801bd20:	4293      	cmp	r3, r2
 801bd22:	db2a      	blt.n	801bd7a <cogui_dc_hw_draw_vline+0xfe>
        return;

    /* if the line is over extent, cut it */
    if (y1 < dc->owner->extent.y1)
 801bd24:	697b      	ldr	r3, [r7, #20]
 801bd26:	689b      	ldr	r3, [r3, #8]
 801bd28:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 801bd2c:	461a      	mov	r2, r3
 801bd2e:	687b      	ldr	r3, [r7, #4]
 801bd30:	4293      	cmp	r3, r2
 801bd32:	da04      	bge.n	801bd3e <cogui_dc_hw_draw_vline+0xc2>
        y1 = dc->owner->extent.y1;
 801bd34:	697b      	ldr	r3, [r7, #20]
 801bd36:	689b      	ldr	r3, [r3, #8]
 801bd38:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 801bd3c:	607b      	str	r3, [r7, #4]
    
    if (y2 > dc->owner->extent.y2)
 801bd3e:	697b      	ldr	r3, [r7, #20]
 801bd40:	689b      	ldr	r3, [r3, #8]
 801bd42:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 801bd46:	461a      	mov	r2, r3
 801bd48:	683b      	ldr	r3, [r7, #0]
 801bd4a:	4293      	cmp	r3, r2
 801bd4c:	dd04      	ble.n	801bd58 <cogui_dc_hw_draw_vline+0xdc>
        y2 = dc->owner->extent.y2;
 801bd4e:	697b      	ldr	r3, [r7, #20]
 801bd50:	689b      	ldr	r3, [r3, #8]
 801bd52:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 801bd56:	603b      	str	r3, [r7, #0]

    /* draw this line */
    dc->hw_driver->ops->draw_vline(&(dc->owner->gc.foreground), x, y1, y2);
 801bd58:	697b      	ldr	r3, [r7, #20]
 801bd5a:	68db      	ldr	r3, [r3, #12]
 801bd5c:	68db      	ldr	r3, [r3, #12]
 801bd5e:	68dc      	ldr	r4, [r3, #12]
 801bd60:	697b      	ldr	r3, [r7, #20]
 801bd62:	689b      	ldr	r3, [r3, #8]
 801bd64:	f103 0030 	add.w	r0, r3, #48	; 0x30
 801bd68:	683b      	ldr	r3, [r7, #0]
 801bd6a:	687a      	ldr	r2, [r7, #4]
 801bd6c:	68b9      	ldr	r1, [r7, #8]
 801bd6e:	47a0      	blx	r4
 801bd70:	e004      	b.n	801bd7c <cogui_dc_hw_draw_vline+0x100>
        return;
 801bd72:	bf00      	nop
 801bd74:	e002      	b.n	801bd7c <cogui_dc_hw_draw_vline+0x100>
        return;
 801bd76:	bf00      	nop
 801bd78:	e000      	b.n	801bd7c <cogui_dc_hw_draw_vline+0x100>
        return;
 801bd7a:	bf00      	nop
}
 801bd7c:	371c      	adds	r7, #28
 801bd7e:	46bd      	mov	sp, r7
 801bd80:	bd90      	pop	{r4, r7, pc}
 801bd82:	bf00      	nop
 801bd84:	08022d50 	.word	0x08022d50
 801bd88:	08022d00 	.word	0x08022d00

0801bd8c <cogui_dc_hw_draw_hline>:
 * @details    This function is called to draw a horizontal line through hardware
 *             DC, this line is (x2-x1) width.
 *******************************************************************************
 */
static void cogui_dc_hw_draw_hline(cogui_dc_t *self, co_int32_t x1, co_int32_t x2, co_int32_t y)
{
 801bd8c:	b590      	push	{r4, r7, lr}
 801bd8e:	b087      	sub	sp, #28
 801bd90:	af00      	add	r7, sp, #0
 801bd92:	60f8      	str	r0, [r7, #12]
 801bd94:	60b9      	str	r1, [r7, #8]
 801bd96:	607a      	str	r2, [r7, #4]
 801bd98:	603b      	str	r3, [r7, #0]
    struct cogui_dc_hw *dc;

    COGUI_ASSERT(self != Co_NULL);
 801bd9a:	68fb      	ldr	r3, [r7, #12]
 801bd9c:	2b00      	cmp	r3, #0
 801bd9e:	d104      	bne.n	801bdaa <cogui_dc_hw_draw_hline+0x1e>
 801bda0:	22de      	movs	r2, #222	; 0xde
 801bda2:	493c      	ldr	r1, [pc, #240]	; (801be94 <cogui_dc_hw_draw_hline+0x108>)
 801bda4:	483c      	ldr	r0, [pc, #240]	; (801be98 <cogui_dc_hw_draw_hline+0x10c>)
 801bda6:	f001 f99f 	bl	801d0e8 <cogui_assert_handler>
    dc = (struct cogui_dc_hw *) self;
 801bdaa:	68fb      	ldr	r3, [r7, #12]
 801bdac:	617b      	str	r3, [r7, #20]

    /* determine y is vaild or not */
    if (y < 0)
 801bdae:	683b      	ldr	r3, [r7, #0]
 801bdb0:	2b00      	cmp	r3, #0
 801bdb2:	db66      	blt.n	801be82 <cogui_dc_hw_draw_hline+0xf6>
        return;
    
    /* move y to logic y */
    y = y + dc->owner->extent.y1;
 801bdb4:	697b      	ldr	r3, [r7, #20]
 801bdb6:	689b      	ldr	r3, [r3, #8]
 801bdb8:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 801bdbc:	461a      	mov	r2, r3
 801bdbe:	683b      	ldr	r3, [r7, #0]
 801bdc0:	4413      	add	r3, r2
 801bdc2:	603b      	str	r3, [r7, #0]
    if (y >= dc->owner->extent.y2)
 801bdc4:	697b      	ldr	r3, [r7, #20]
 801bdc6:	689b      	ldr	r3, [r3, #8]
 801bdc8:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 801bdcc:	461a      	mov	r2, r3
 801bdce:	683b      	ldr	r3, [r7, #0]
 801bdd0:	4293      	cmp	r3, r2
 801bdd2:	da58      	bge.n	801be86 <cogui_dc_hw_draw_hline+0xfa>
        return;

    /* move x1 and x2 to logic */    
    x1 = x1 + dc->owner->extent.x1;
 801bdd4:	697b      	ldr	r3, [r7, #20]
 801bdd6:	689b      	ldr	r3, [r3, #8]
 801bdd8:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 801bddc:	461a      	mov	r2, r3
 801bdde:	68bb      	ldr	r3, [r7, #8]
 801bde0:	4413      	add	r3, r2
 801bde2:	60bb      	str	r3, [r7, #8]
    x2 = x2 + dc->owner->extent.x1;
 801bde4:	697b      	ldr	r3, [r7, #20]
 801bde6:	689b      	ldr	r3, [r3, #8]
 801bde8:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 801bdec:	461a      	mov	r2, r3
 801bdee:	687b      	ldr	r3, [r7, #4]
 801bdf0:	4413      	add	r3, r2
 801bdf2:	607b      	str	r3, [r7, #4]

    /* x1 should less than x2 */
    if (x1 > x2)
 801bdf4:	68ba      	ldr	r2, [r7, #8]
 801bdf6:	687b      	ldr	r3, [r7, #4]
 801bdf8:	429a      	cmp	r2, r3
 801bdfa:	dd0b      	ble.n	801be14 <cogui_dc_hw_draw_hline+0x88>
        _int_swap(x1, x2);
 801bdfc:	68ba      	ldr	r2, [r7, #8]
 801bdfe:	687b      	ldr	r3, [r7, #4]
 801be00:	4053      	eors	r3, r2
 801be02:	60bb      	str	r3, [r7, #8]
 801be04:	687a      	ldr	r2, [r7, #4]
 801be06:	68bb      	ldr	r3, [r7, #8]
 801be08:	4053      	eors	r3, r2
 801be0a:	607b      	str	r3, [r7, #4]
 801be0c:	68ba      	ldr	r2, [r7, #8]
 801be0e:	687b      	ldr	r3, [r7, #4]
 801be10:	4053      	eors	r3, r2
 801be12:	60bb      	str	r3, [r7, #8]
    
    /* determine x1 and x2 are vaild or not */
    if (x1 > dc->owner->extent.x2 || x2 < dc->owner->extent.x1)
 801be14:	697b      	ldr	r3, [r7, #20]
 801be16:	689b      	ldr	r3, [r3, #8]
 801be18:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 801be1c:	461a      	mov	r2, r3
 801be1e:	68bb      	ldr	r3, [r7, #8]
 801be20:	4293      	cmp	r3, r2
 801be22:	dc32      	bgt.n	801be8a <cogui_dc_hw_draw_hline+0xfe>
 801be24:	697b      	ldr	r3, [r7, #20]
 801be26:	689b      	ldr	r3, [r3, #8]
 801be28:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 801be2c:	461a      	mov	r2, r3
 801be2e:	687b      	ldr	r3, [r7, #4]
 801be30:	4293      	cmp	r3, r2
 801be32:	db2a      	blt.n	801be8a <cogui_dc_hw_draw_hline+0xfe>
        return;

    /* if the line is over extent, cut it */
    if (x1 < dc->owner->extent.x1)
 801be34:	697b      	ldr	r3, [r7, #20]
 801be36:	689b      	ldr	r3, [r3, #8]
 801be38:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 801be3c:	461a      	mov	r2, r3
 801be3e:	68bb      	ldr	r3, [r7, #8]
 801be40:	4293      	cmp	r3, r2
 801be42:	da04      	bge.n	801be4e <cogui_dc_hw_draw_hline+0xc2>
        x1 = dc->owner->extent.x1;
 801be44:	697b      	ldr	r3, [r7, #20]
 801be46:	689b      	ldr	r3, [r3, #8]
 801be48:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 801be4c:	60bb      	str	r3, [r7, #8]
    
    if (x2 > dc->owner->extent.x2)
 801be4e:	697b      	ldr	r3, [r7, #20]
 801be50:	689b      	ldr	r3, [r3, #8]
 801be52:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 801be56:	461a      	mov	r2, r3
 801be58:	687b      	ldr	r3, [r7, #4]
 801be5a:	4293      	cmp	r3, r2
 801be5c:	dd04      	ble.n	801be68 <cogui_dc_hw_draw_hline+0xdc>
        x2 = dc->owner->extent.x2;
 801be5e:	697b      	ldr	r3, [r7, #20]
 801be60:	689b      	ldr	r3, [r3, #8]
 801be62:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 801be66:	607b      	str	r3, [r7, #4]

    /* draw this line */
    dc->hw_driver->ops->draw_hline(&(dc->owner->gc.foreground), x1, x2, y);
 801be68:	697b      	ldr	r3, [r7, #20]
 801be6a:	68db      	ldr	r3, [r3, #12]
 801be6c:	68db      	ldr	r3, [r3, #12]
 801be6e:	689c      	ldr	r4, [r3, #8]
 801be70:	697b      	ldr	r3, [r7, #20]
 801be72:	689b      	ldr	r3, [r3, #8]
 801be74:	f103 0030 	add.w	r0, r3, #48	; 0x30
 801be78:	683b      	ldr	r3, [r7, #0]
 801be7a:	687a      	ldr	r2, [r7, #4]
 801be7c:	68b9      	ldr	r1, [r7, #8]
 801be7e:	47a0      	blx	r4
 801be80:	e004      	b.n	801be8c <cogui_dc_hw_draw_hline+0x100>
        return;
 801be82:	bf00      	nop
 801be84:	e002      	b.n	801be8c <cogui_dc_hw_draw_hline+0x100>
        return;
 801be86:	bf00      	nop
 801be88:	e000      	b.n	801be8c <cogui_dc_hw_draw_hline+0x100>
        return;
 801be8a:	bf00      	nop
}
 801be8c:	371c      	adds	r7, #28
 801be8e:	46bd      	mov	sp, r7
 801be90:	bd90      	pop	{r4, r7, pc}
 801be92:	bf00      	nop
 801be94:	08022d68 	.word	0x08022d68
 801be98:	08022d00 	.word	0x08022d00

0801be9c <cogui_dc_hw_fill_rect>:
 * @details    This function is called to filled a rectangle line through hardware
 *             DC, and choose graph context's background to fill.
 *******************************************************************************
 */
static void cogui_dc_hw_fill_rect(cogui_dc_t *self, cogui_rect_t *rect)
{
 801be9c:	b590      	push	{r4, r7, lr}
 801be9e:	b08b      	sub	sp, #44	; 0x2c
 801bea0:	af00      	add	r7, sp, #0
 801bea2:	6078      	str	r0, [r7, #4]
 801bea4:	6039      	str	r1, [r7, #0]
    cogui_color_t color;
    co_int32_t y1, y2, x1, x2;
    struct cogui_dc_hw *dc;

    COGUI_ASSERT(rect);
 801bea6:	683b      	ldr	r3, [r7, #0]
 801bea8:	2b00      	cmp	r3, #0
 801beaa:	d105      	bne.n	801beb8 <cogui_dc_hw_fill_rect+0x1c>
 801beac:	f44f 728a 	mov.w	r2, #276	; 0x114
 801beb0:	4956      	ldr	r1, [pc, #344]	; (801c00c <cogui_dc_hw_fill_rect+0x170>)
 801beb2:	4857      	ldr	r0, [pc, #348]	; (801c010 <cogui_dc_hw_fill_rect+0x174>)
 801beb4:	f001 f918 	bl	801d0e8 <cogui_assert_handler>
    COGUI_ASSERT(self != Co_NULL);
 801beb8:	687b      	ldr	r3, [r7, #4]
 801beba:	2b00      	cmp	r3, #0
 801bebc:	d105      	bne.n	801beca <cogui_dc_hw_fill_rect+0x2e>
 801bebe:	f240 1215 	movw	r2, #277	; 0x115
 801bec2:	4952      	ldr	r1, [pc, #328]	; (801c00c <cogui_dc_hw_fill_rect+0x170>)
 801bec4:	4853      	ldr	r0, [pc, #332]	; (801c014 <cogui_dc_hw_fill_rect+0x178>)
 801bec6:	f001 f90f 	bl	801d0e8 <cogui_assert_handler>
    dc = (struct cogui_dc_hw *) self;
 801beca:	687b      	ldr	r3, [r7, #4]
 801becc:	617b      	str	r3, [r7, #20]

    /* get background color */
    color = dc->owner->gc.background;
 801bece:	697b      	ldr	r3, [r7, #20]
 801bed0:	689b      	ldr	r3, [r3, #8]
 801bed2:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 801bed6:	e9c7 3402 	strd	r3, r4, [r7, #8]

    /* move to logic position */
    x1 = rect->x1 + dc->owner->extent.x1;
 801beda:	683b      	ldr	r3, [r7, #0]
 801bedc:	f9b3 3000 	ldrsh.w	r3, [r3]
 801bee0:	461a      	mov	r2, r3
 801bee2:	697b      	ldr	r3, [r7, #20]
 801bee4:	689b      	ldr	r3, [r3, #8]
 801bee6:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 801beea:	4413      	add	r3, r2
 801beec:	61fb      	str	r3, [r7, #28]
    if (x1 > dc->owner->extent.x2)
 801beee:	697b      	ldr	r3, [r7, #20]
 801bef0:	689b      	ldr	r3, [r3, #8]
 801bef2:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 801bef6:	461a      	mov	r2, r3
 801bef8:	69fb      	ldr	r3, [r7, #28]
 801befa:	4293      	cmp	r3, r2
 801befc:	dc7c      	bgt.n	801bff8 <cogui_dc_hw_fill_rect+0x15c>
        return;
    
    if (x1 < dc->owner->extent.x1)
 801befe:	697b      	ldr	r3, [r7, #20]
 801bf00:	689b      	ldr	r3, [r3, #8]
 801bf02:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 801bf06:	461a      	mov	r2, r3
 801bf08:	69fb      	ldr	r3, [r7, #28]
 801bf0a:	4293      	cmp	r3, r2
 801bf0c:	da04      	bge.n	801bf18 <cogui_dc_hw_fill_rect+0x7c>
        x1 = dc->owner->extent.x1;
 801bf0e:	697b      	ldr	r3, [r7, #20]
 801bf10:	689b      	ldr	r3, [r3, #8]
 801bf12:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 801bf16:	61fb      	str	r3, [r7, #28]
    
    x2 = rect->x2 + dc->owner->extent.x1;
 801bf18:	683b      	ldr	r3, [r7, #0]
 801bf1a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801bf1e:	461a      	mov	r2, r3
 801bf20:	697b      	ldr	r3, [r7, #20]
 801bf22:	689b      	ldr	r3, [r3, #8]
 801bf24:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 801bf28:	4413      	add	r3, r2
 801bf2a:	61bb      	str	r3, [r7, #24]
    if (x2 < dc->owner->extent.x1)
 801bf2c:	697b      	ldr	r3, [r7, #20]
 801bf2e:	689b      	ldr	r3, [r3, #8]
 801bf30:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 801bf34:	461a      	mov	r2, r3
 801bf36:	69bb      	ldr	r3, [r7, #24]
 801bf38:	4293      	cmp	r3, r2
 801bf3a:	db5f      	blt.n	801bffc <cogui_dc_hw_fill_rect+0x160>
        return;
    
    if (x2 > dc->owner->extent.x2)
 801bf3c:	697b      	ldr	r3, [r7, #20]
 801bf3e:	689b      	ldr	r3, [r3, #8]
 801bf40:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 801bf44:	461a      	mov	r2, r3
 801bf46:	69bb      	ldr	r3, [r7, #24]
 801bf48:	4293      	cmp	r3, r2
 801bf4a:	dd04      	ble.n	801bf56 <cogui_dc_hw_fill_rect+0xba>
        x2 = dc->owner->extent.x2;        
 801bf4c:	697b      	ldr	r3, [r7, #20]
 801bf4e:	689b      	ldr	r3, [r3, #8]
 801bf50:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 801bf54:	61bb      	str	r3, [r7, #24]
    

    y1 = rect->y1 + dc->owner->extent.y1;
 801bf56:	683b      	ldr	r3, [r7, #0]
 801bf58:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801bf5c:	461a      	mov	r2, r3
 801bf5e:	697b      	ldr	r3, [r7, #20]
 801bf60:	689b      	ldr	r3, [r3, #8]
 801bf62:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 801bf66:	4413      	add	r3, r2
 801bf68:	627b      	str	r3, [r7, #36]	; 0x24
    if (y1 > dc->owner->extent.y2)
 801bf6a:	697b      	ldr	r3, [r7, #20]
 801bf6c:	689b      	ldr	r3, [r3, #8]
 801bf6e:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 801bf72:	461a      	mov	r2, r3
 801bf74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bf76:	4293      	cmp	r3, r2
 801bf78:	dc42      	bgt.n	801c000 <cogui_dc_hw_fill_rect+0x164>
        return;
    
    if (y1 < dc->owner->extent.y1)
 801bf7a:	697b      	ldr	r3, [r7, #20]
 801bf7c:	689b      	ldr	r3, [r3, #8]
 801bf7e:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 801bf82:	461a      	mov	r2, r3
 801bf84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bf86:	4293      	cmp	r3, r2
 801bf88:	da04      	bge.n	801bf94 <cogui_dc_hw_fill_rect+0xf8>
        y1 = dc->owner->extent.y1;
 801bf8a:	697b      	ldr	r3, [r7, #20]
 801bf8c:	689b      	ldr	r3, [r3, #8]
 801bf8e:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 801bf92:	627b      	str	r3, [r7, #36]	; 0x24
    
    y2 = rect->y2 + dc->owner->extent.y1;
 801bf94:	683b      	ldr	r3, [r7, #0]
 801bf96:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801bf9a:	461a      	mov	r2, r3
 801bf9c:	697b      	ldr	r3, [r7, #20]
 801bf9e:	689b      	ldr	r3, [r3, #8]
 801bfa0:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 801bfa4:	4413      	add	r3, r2
 801bfa6:	623b      	str	r3, [r7, #32]
    if (y2 < dc->owner->extent.y1)
 801bfa8:	697b      	ldr	r3, [r7, #20]
 801bfaa:	689b      	ldr	r3, [r3, #8]
 801bfac:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 801bfb0:	461a      	mov	r2, r3
 801bfb2:	6a3b      	ldr	r3, [r7, #32]
 801bfb4:	4293      	cmp	r3, r2
 801bfb6:	db25      	blt.n	801c004 <cogui_dc_hw_fill_rect+0x168>
        return;
    
    if (y2 > dc->owner->extent.y2)
 801bfb8:	697b      	ldr	r3, [r7, #20]
 801bfba:	689b      	ldr	r3, [r3, #8]
 801bfbc:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 801bfc0:	461a      	mov	r2, r3
 801bfc2:	6a3b      	ldr	r3, [r7, #32]
 801bfc4:	4293      	cmp	r3, r2
 801bfc6:	dd12      	ble.n	801bfee <cogui_dc_hw_fill_rect+0x152>
        y2 = dc->owner->extent.y2;
 801bfc8:	697b      	ldr	r3, [r7, #20]
 801bfca:	689b      	ldr	r3, [r3, #8]
 801bfcc:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 801bfd0:	623b      	str	r3, [r7, #32]
    
    /* fille rectangle */
    for (; y1 < y2; y1++) {
 801bfd2:	e00c      	b.n	801bfee <cogui_dc_hw_fill_rect+0x152>
        dc->hw_driver->ops->draw_hline(&color, x1, x2, y1);
 801bfd4:	697b      	ldr	r3, [r7, #20]
 801bfd6:	68db      	ldr	r3, [r3, #12]
 801bfd8:	68db      	ldr	r3, [r3, #12]
 801bfda:	689c      	ldr	r4, [r3, #8]
 801bfdc:	f107 0008 	add.w	r0, r7, #8
 801bfe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bfe2:	69ba      	ldr	r2, [r7, #24]
 801bfe4:	69f9      	ldr	r1, [r7, #28]
 801bfe6:	47a0      	blx	r4
    for (; y1 < y2; y1++) {
 801bfe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bfea:	3301      	adds	r3, #1
 801bfec:	627b      	str	r3, [r7, #36]	; 0x24
 801bfee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801bff0:	6a3b      	ldr	r3, [r7, #32]
 801bff2:	429a      	cmp	r2, r3
 801bff4:	dbee      	blt.n	801bfd4 <cogui_dc_hw_fill_rect+0x138>
 801bff6:	e006      	b.n	801c006 <cogui_dc_hw_fill_rect+0x16a>
        return;
 801bff8:	bf00      	nop
 801bffa:	e004      	b.n	801c006 <cogui_dc_hw_fill_rect+0x16a>
        return;
 801bffc:	bf00      	nop
 801bffe:	e002      	b.n	801c006 <cogui_dc_hw_fill_rect+0x16a>
        return;
 801c000:	bf00      	nop
 801c002:	e000      	b.n	801c006 <cogui_dc_hw_fill_rect+0x16a>
        return;
 801c004:	bf00      	nop
    }
}
 801c006:	372c      	adds	r7, #44	; 0x2c
 801c008:	46bd      	mov	sp, r7
 801c00a:	bd90      	pop	{r4, r7, pc}
 801c00c:	08022d80 	.word	0x08022d80
 801c010:	08022d10 	.word	0x08022d10
 801c014:	08022d00 	.word	0x08022d00

0801c018 <cogui_graphic_driver_get_default>:

static cogui_graphic_driver_t _driver;
static cogui_graphic_driver_t *_current_driver = &_driver;

cogui_graphic_driver_t *cogui_graphic_driver_get_default()
{   
 801c018:	b480      	push	{r7}
 801c01a:	af00      	add	r7, sp, #0
    return _current_driver;
 801c01c:	4b03      	ldr	r3, [pc, #12]	; (801c02c <cogui_graphic_driver_get_default+0x14>)
 801c01e:	681b      	ldr	r3, [r3, #0]
}
 801c020:	4618      	mov	r0, r3
 801c022:	46bd      	mov	sp, r7
 801c024:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c028:	4770      	bx	lr
 801c02a:	bf00      	nop
 801c02c:	20000128 	.word	0x20000128

0801c030 <cogui_set_graphic_driver>:

void cogui_set_graphic_driver(cogui_graphic_driver_t *driver)
{
 801c030:	b480      	push	{r7}
 801c032:	b083      	sub	sp, #12
 801c034:	af00      	add	r7, sp, #0
 801c036:	6078      	str	r0, [r7, #4]
	_current_driver = driver;
 801c038:	4a04      	ldr	r2, [pc, #16]	; (801c04c <cogui_set_graphic_driver+0x1c>)
 801c03a:	687b      	ldr	r3, [r7, #4]
 801c03c:	6013      	str	r3, [r2, #0]
}
 801c03e:	bf00      	nop
 801c040:	370c      	adds	r7, #12
 801c042:	46bd      	mov	sp, r7
 801c044:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c048:	4770      	bx	lr
 801c04a:	bf00      	nop
 801c04c:	20000128 	.word	0x20000128

0801c050 <cogui_lcd_puts>:
 * @param[out] None
 * @retval     None 
 *******************************************************************************
 */
void cogui_lcd_puts(co_uint16_t x, co_uint16_t y, char *str, cogui_font_t *font, cogui_dc_t *dc, cogui_rect_t *rect)
{
 801c050:	b580      	push	{r7, lr}
 801c052:	b086      	sub	sp, #24
 801c054:	af02      	add	r7, sp, #8
 801c056:	60ba      	str	r2, [r7, #8]
 801c058:	607b      	str	r3, [r7, #4]
 801c05a:	4603      	mov	r3, r0
 801c05c:	81fb      	strh	r3, [r7, #14]
 801c05e:	460b      	mov	r3, r1
 801c060:	81bb      	strh	r3, [r7, #12]
    while (*str) {
 801c062:	e034      	b.n	801c0ce <cogui_lcd_puts+0x7e>
        if (*str == '\n') {
 801c064:	68bb      	ldr	r3, [r7, #8]
 801c066:	781b      	ldrb	r3, [r3, #0]
 801c068:	2b0a      	cmp	r3, #10
 801c06a:	d10c      	bne.n	801c086 <cogui_lcd_puts+0x36>
			y += font->height;
 801c06c:	687b      	ldr	r3, [r7, #4]
 801c06e:	88da      	ldrh	r2, [r3, #6]
 801c070:	89bb      	ldrh	r3, [r7, #12]
 801c072:	4413      	add	r3, r2
 801c074:	81bb      	strh	r3, [r7, #12]
            x = rect->x1;
 801c076:	69fb      	ldr	r3, [r7, #28]
 801c078:	f9b3 3000 	ldrsh.w	r3, [r3]
 801c07c:	81fb      	strh	r3, [r7, #14]
			
			str++;
 801c07e:	68bb      	ldr	r3, [r7, #8]
 801c080:	3301      	adds	r3, #1
 801c082:	60bb      	str	r3, [r7, #8]
			continue;
 801c084:	e023      	b.n	801c0ce <cogui_lcd_puts+0x7e>
		}

        cogui_lcd_putc(x, y, *str++, font, dc, rect);
 801c086:	68bb      	ldr	r3, [r7, #8]
 801c088:	1c5a      	adds	r2, r3, #1
 801c08a:	60ba      	str	r2, [r7, #8]
 801c08c:	781a      	ldrb	r2, [r3, #0]
 801c08e:	89b9      	ldrh	r1, [r7, #12]
 801c090:	89f8      	ldrh	r0, [r7, #14]
 801c092:	69fb      	ldr	r3, [r7, #28]
 801c094:	9301      	str	r3, [sp, #4]
 801c096:	69bb      	ldr	r3, [r7, #24]
 801c098:	9300      	str	r3, [sp, #0]
 801c09a:	687b      	ldr	r3, [r7, #4]
 801c09c:	f000 f81f 	bl	801c0de <cogui_lcd_putc>

        x += font->width;
 801c0a0:	687b      	ldr	r3, [r7, #4]
 801c0a2:	889a      	ldrh	r2, [r3, #4]
 801c0a4:	89fb      	ldrh	r3, [r7, #14]
 801c0a6:	4413      	add	r3, r2
 801c0a8:	81fb      	strh	r3, [r7, #14]

        if (x + font->width > rect->x2) {
 801c0aa:	89fb      	ldrh	r3, [r7, #14]
 801c0ac:	687a      	ldr	r2, [r7, #4]
 801c0ae:	8892      	ldrh	r2, [r2, #4]
 801c0b0:	4413      	add	r3, r2
 801c0b2:	69fa      	ldr	r2, [r7, #28]
 801c0b4:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 801c0b8:	4293      	cmp	r3, r2
 801c0ba:	dd08      	ble.n	801c0ce <cogui_lcd_puts+0x7e>
            y += font->height;
 801c0bc:	687b      	ldr	r3, [r7, #4]
 801c0be:	88da      	ldrh	r2, [r3, #6]
 801c0c0:	89bb      	ldrh	r3, [r7, #12]
 801c0c2:	4413      	add	r3, r2
 801c0c4:	81bb      	strh	r3, [r7, #12]
            x = rect->x1;
 801c0c6:	69fb      	ldr	r3, [r7, #28]
 801c0c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 801c0cc:	81fb      	strh	r3, [r7, #14]
    while (*str) {
 801c0ce:	68bb      	ldr	r3, [r7, #8]
 801c0d0:	781b      	ldrb	r3, [r3, #0]
 801c0d2:	2b00      	cmp	r3, #0
 801c0d4:	d1c6      	bne.n	801c064 <cogui_lcd_puts+0x14>
	    }
    }
}
 801c0d6:	bf00      	nop
 801c0d8:	3710      	adds	r7, #16
 801c0da:	46bd      	mov	sp, r7
 801c0dc:	bd80      	pop	{r7, pc}

0801c0de <cogui_lcd_putc>:
 * @param[out] None
 * @retval     None 
 *******************************************************************************
 */
void cogui_lcd_putc(co_uint16_t x, co_uint16_t y, char c, cogui_font_t *font, cogui_dc_t *dc, cogui_rect_t *rect)
{	
 801c0de:	b580      	push	{r7, lr}
 801c0e0:	b086      	sub	sp, #24
 801c0e2:	af00      	add	r7, sp, #0
 801c0e4:	607b      	str	r3, [r7, #4]
 801c0e6:	4603      	mov	r3, r0
 801c0e8:	81fb      	strh	r3, [r7, #14]
 801c0ea:	460b      	mov	r3, r1
 801c0ec:	81bb      	strh	r3, [r7, #12]
 801c0ee:	4613      	mov	r3, r2
 801c0f0:	72fb      	strb	r3, [r7, #11]
	co_uint16_t i, j, f;
	for ( i=0; i<font->height; i++) {
 801c0f2:	2300      	movs	r3, #0
 801c0f4:	82fb      	strh	r3, [r7, #22]
 801c0f6:	e02f      	b.n	801c158 <cogui_lcd_putc+0x7a>
		/* first element in font table is "space", which is 32 in ASCII */
		f = font->data[(c - 32)*font->height + i];
 801c0f8:	687b      	ldr	r3, [r7, #4]
 801c0fa:	689a      	ldr	r2, [r3, #8]
 801c0fc:	7afb      	ldrb	r3, [r7, #11]
 801c0fe:	3b20      	subs	r3, #32
 801c100:	6879      	ldr	r1, [r7, #4]
 801c102:	88c9      	ldrh	r1, [r1, #6]
 801c104:	fb01 f103 	mul.w	r1, r1, r3
 801c108:	8afb      	ldrh	r3, [r7, #22]
 801c10a:	440b      	add	r3, r1
 801c10c:	005b      	lsls	r3, r3, #1
 801c10e:	4413      	add	r3, r2
 801c110:	881b      	ldrh	r3, [r3, #0]
 801c112:	827b      	strh	r3, [r7, #18]
		for ( j=0; j<font->width; j++) {
 801c114:	2300      	movs	r3, #0
 801c116:	82bb      	strh	r3, [r7, #20]
 801c118:	e016      	b.n	801c148 <cogui_lcd_putc+0x6a>
			if ((f << j) & 0x8000) {
 801c11a:	8a7a      	ldrh	r2, [r7, #18]
 801c11c:	8abb      	ldrh	r3, [r7, #20]
 801c11e:	fa02 f303 	lsl.w	r3, r2, r3
 801c122:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801c126:	2b00      	cmp	r3, #0
 801c128:	d00b      	beq.n	801c142 <cogui_lcd_putc+0x64>
				dc->engine->draw_point(dc, x+j, y+i);
 801c12a:	6a3b      	ldr	r3, [r7, #32]
 801c12c:	685b      	ldr	r3, [r3, #4]
 801c12e:	681b      	ldr	r3, [r3, #0]
 801c130:	89f9      	ldrh	r1, [r7, #14]
 801c132:	8aba      	ldrh	r2, [r7, #20]
 801c134:	1888      	adds	r0, r1, r2
 801c136:	89b9      	ldrh	r1, [r7, #12]
 801c138:	8afa      	ldrh	r2, [r7, #22]
 801c13a:	440a      	add	r2, r1
 801c13c:	4601      	mov	r1, r0
 801c13e:	6a38      	ldr	r0, [r7, #32]
 801c140:	4798      	blx	r3
		for ( j=0; j<font->width; j++) {
 801c142:	8abb      	ldrh	r3, [r7, #20]
 801c144:	3301      	adds	r3, #1
 801c146:	82bb      	strh	r3, [r7, #20]
 801c148:	687b      	ldr	r3, [r7, #4]
 801c14a:	889b      	ldrh	r3, [r3, #4]
 801c14c:	8aba      	ldrh	r2, [r7, #20]
 801c14e:	429a      	cmp	r2, r3
 801c150:	d3e3      	bcc.n	801c11a <cogui_lcd_putc+0x3c>
	for ( i=0; i<font->height; i++) {
 801c152:	8afb      	ldrh	r3, [r7, #22]
 801c154:	3301      	adds	r3, #1
 801c156:	82fb      	strh	r3, [r7, #22]
 801c158:	687b      	ldr	r3, [r7, #4]
 801c15a:	88db      	ldrh	r3, [r3, #6]
 801c15c:	8afa      	ldrh	r2, [r7, #22]
 801c15e:	429a      	cmp	r2, r3
 801c160:	d3ca      	bcc.n	801c0f8 <cogui_lcd_putc+0x1a>
			}
		}
	}
}
 801c162:	bf00      	nop
 801c164:	3718      	adds	r7, #24
 801c166:	46bd      	mov	sp, r7
 801c168:	bd80      	pop	{r7, pc}

0801c16a <cogui_get_text_width>:
 * @param[out] None
 * @retval     text_width       Result of string widget.
 *******************************************************************************
 */
co_uint32_t cogui_get_text_width(char *str, cogui_font_t *font)
{
 801c16a:	b590      	push	{r4, r7, lr}
 801c16c:	b087      	sub	sp, #28
 801c16e:	af00      	add	r7, sp, #0
 801c170:	6078      	str	r0, [r7, #4]
 801c172:	6039      	str	r1, [r7, #0]
    COGUI_ASSERT(font != Co_NULL);
 801c174:	683b      	ldr	r3, [r7, #0]
 801c176:	2b00      	cmp	r3, #0
 801c178:	d104      	bne.n	801c184 <cogui_get_text_width+0x1a>
 801c17a:	2257      	movs	r2, #87	; 0x57
 801c17c:	490f      	ldr	r1, [pc, #60]	; (801c1bc <cogui_get_text_width+0x52>)
 801c17e:	4810      	ldr	r0, [pc, #64]	; (801c1c0 <cogui_get_text_width+0x56>)
 801c180:	f000 ffb2 	bl	801d0e8 <cogui_assert_handler>

    co_uint32_t text_width;
    co_uint64_t str_len = str != Co_NULL ? cogui_strlen(str) : 0;
 801c184:	687b      	ldr	r3, [r7, #4]
 801c186:	2b00      	cmp	r3, #0
 801c188:	d005      	beq.n	801c196 <cogui_get_text_width+0x2c>
 801c18a:	6878      	ldr	r0, [r7, #4]
 801c18c:	f000 fca3 	bl	801cad6 <cogui_strlen>
 801c190:	4603      	mov	r3, r0
 801c192:	460c      	mov	r4, r1
 801c194:	e003      	b.n	801c19e <cogui_get_text_width+0x34>
 801c196:	f04f 0300 	mov.w	r3, #0
 801c19a:	f04f 0400 	mov.w	r4, #0
 801c19e:	e9c7 3404 	strd	r3, r4, [r7, #16]

    /* compute text widget */
    text_width = str_len * font->width;
 801c1a2:	683b      	ldr	r3, [r7, #0]
 801c1a4:	889b      	ldrh	r3, [r3, #4]
 801c1a6:	461a      	mov	r2, r3
 801c1a8:	693b      	ldr	r3, [r7, #16]
 801c1aa:	fb03 f302 	mul.w	r3, r3, r2
 801c1ae:	60fb      	str	r3, [r7, #12]

    return text_width;
 801c1b0:	68fb      	ldr	r3, [r7, #12]
}
 801c1b2:	4618      	mov	r0, r3
 801c1b4:	371c      	adds	r7, #28
 801c1b6:	46bd      	mov	sp, r7
 801c1b8:	bd90      	pop	{r4, r7, pc}
 801c1ba:	bf00      	nop
 801c1bc:	08022db8 	.word	0x08022db8
 801c1c0:	08022d98 	.word	0x08022d98

0801c1c4 <cogui_get_text_height>:
 * @param[out] None
 * @retval     text_height      Result of string height.
 *******************************************************************************
 */
co_uint32_t cogui_get_text_height(char *str, cogui_font_t *font, cogui_rect_t *rect)
{
 801c1c4:	b580      	push	{r7, lr}
 801c1c6:	b088      	sub	sp, #32
 801c1c8:	af00      	add	r7, sp, #0
 801c1ca:	60f8      	str	r0, [r7, #12]
 801c1cc:	60b9      	str	r1, [r7, #8]
 801c1ce:	607a      	str	r2, [r7, #4]
    COGUI_ASSERT(rect != Co_NULL);
 801c1d0:	687b      	ldr	r3, [r7, #4]
 801c1d2:	2b00      	cmp	r3, #0
 801c1d4:	d104      	bne.n	801c1e0 <cogui_get_text_height+0x1c>
 801c1d6:	226e      	movs	r2, #110	; 0x6e
 801c1d8:	4915      	ldr	r1, [pc, #84]	; (801c230 <cogui_get_text_height+0x6c>)
 801c1da:	4816      	ldr	r0, [pc, #88]	; (801c234 <cogui_get_text_height+0x70>)
 801c1dc:	f000 ff84 	bl	801d0e8 <cogui_assert_handler>
    COGUI_ASSERT(font != Co_NULL);
 801c1e0:	68bb      	ldr	r3, [r7, #8]
 801c1e2:	2b00      	cmp	r3, #0
 801c1e4:	d104      	bne.n	801c1f0 <cogui_get_text_height+0x2c>
 801c1e6:	226f      	movs	r2, #111	; 0x6f
 801c1e8:	4911      	ldr	r1, [pc, #68]	; (801c230 <cogui_get_text_height+0x6c>)
 801c1ea:	4813      	ldr	r0, [pc, #76]	; (801c238 <cogui_get_text_height+0x74>)
 801c1ec:	f000 ff7c 	bl	801d0e8 <cogui_assert_handler>

    co_uint32_t rect_width = COGUI_RECT_WIDTH(rect);
 801c1f0:	687b      	ldr	r3, [r7, #4]
 801c1f2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801c1f6:	461a      	mov	r2, r3
 801c1f8:	687b      	ldr	r3, [r7, #4]
 801c1fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 801c1fe:	1ad3      	subs	r3, r2, r3
 801c200:	61fb      	str	r3, [r7, #28]
    co_uint32_t text_width;
    co_uint32_t text_height;
    co_uint32_t lines;

    /* how many lines does this text has in this rectangle */
    text_width = cogui_get_text_width(str, font);
 801c202:	68b9      	ldr	r1, [r7, #8]
 801c204:	68f8      	ldr	r0, [r7, #12]
 801c206:	f7ff ffb0 	bl	801c16a <cogui_get_text_width>
 801c20a:	61b8      	str	r0, [r7, #24]
    lines = text_width / rect_width + 1;
 801c20c:	69ba      	ldr	r2, [r7, #24]
 801c20e:	69fb      	ldr	r3, [r7, #28]
 801c210:	fbb2 f3f3 	udiv	r3, r2, r3
 801c214:	3301      	adds	r3, #1
 801c216:	617b      	str	r3, [r7, #20]

    /* compute text height */
    text_height = lines * font->height;
 801c218:	68bb      	ldr	r3, [r7, #8]
 801c21a:	88db      	ldrh	r3, [r3, #6]
 801c21c:	461a      	mov	r2, r3
 801c21e:	697b      	ldr	r3, [r7, #20]
 801c220:	fb02 f303 	mul.w	r3, r2, r3
 801c224:	613b      	str	r3, [r7, #16]

    return text_height;
 801c226:	693b      	ldr	r3, [r7, #16]
}
 801c228:	4618      	mov	r0, r3
 801c22a:	3720      	adds	r7, #32
 801c22c:	46bd      	mov	sp, r7
 801c22e:	bd80      	pop	{r7, pc}
 801c230:	08022dd0 	.word	0x08022dd0
 801c234:	08022da8 	.word	0x08022da8
 801c238:	08022d98 	.word	0x08022d98

0801c23c <_cogui_mouse_init>:

struct cogui_cursor *_cursor;
extern cogui_window_t *main_page;

void _cogui_mouse_init()
{
 801c23c:	b590      	push	{r4, r7, lr}
 801c23e:	b083      	sub	sp, #12
 801c240:	af02      	add	r7, sp, #8
    _cursor = cogui_malloc(sizeof(struct cogui_cursor));
 801c242:	200c      	movs	r0, #12
 801c244:	f000 fa50 	bl	801c6e8 <cogui_malloc>
 801c248:	4602      	mov	r2, r0
 801c24a:	4b19      	ldr	r3, [pc, #100]	; (801c2b0 <_cogui_mouse_init+0x74>)
 801c24c:	601a      	str	r2, [r3, #0]
    COGUI_ASSERT(_cursor != Co_NULL);
 801c24e:	4b18      	ldr	r3, [pc, #96]	; (801c2b0 <_cogui_mouse_init+0x74>)
 801c250:	681b      	ldr	r3, [r3, #0]
 801c252:	2b00      	cmp	r3, #0
 801c254:	d104      	bne.n	801c260 <_cogui_mouse_init+0x24>
 801c256:	2212      	movs	r2, #18
 801c258:	4916      	ldr	r1, [pc, #88]	; (801c2b4 <_cogui_mouse_init+0x78>)
 801c25a:	4817      	ldr	r0, [pc, #92]	; (801c2b8 <_cogui_mouse_init+0x7c>)
 801c25c:	f000 ff44 	bl	801d0e8 <cogui_assert_handler>

    _cursor->cursor_widget = cogui_widget_create(main_page);
 801c260:	4b16      	ldr	r3, [pc, #88]	; (801c2bc <_cogui_mouse_init+0x80>)
 801c262:	681a      	ldr	r2, [r3, #0]
 801c264:	4b12      	ldr	r3, [pc, #72]	; (801c2b0 <_cogui_mouse_init+0x74>)
 801c266:	681c      	ldr	r4, [r3, #0]
 801c268:	4610      	mov	r0, r2
 801c26a:	f001 f861 	bl	801d330 <cogui_widget_create>
 801c26e:	4603      	mov	r3, r0
 801c270:	60a3      	str	r3, [r4, #8]
	cogui_widget_set_rectangle(_cursor->cursor_widget, 0, 0, 241, 321);
 801c272:	4b0f      	ldr	r3, [pc, #60]	; (801c2b0 <_cogui_mouse_init+0x74>)
 801c274:	681b      	ldr	r3, [r3, #0]
 801c276:	6898      	ldr	r0, [r3, #8]
 801c278:	f240 1341 	movw	r3, #321	; 0x141
 801c27c:	9300      	str	r3, [sp, #0]
 801c27e:	23f1      	movs	r3, #241	; 0xf1
 801c280:	2200      	movs	r2, #0
 801c282:	2100      	movs	r1, #0
 801c284:	f001 fbbb 	bl	801d9fe <cogui_widget_set_rectangle>
	_cursor->cursor_widget->gc.foreground = COGUI_WHITE;
 801c288:	4b09      	ldr	r3, [pc, #36]	; (801c2b0 <_cogui_mouse_init+0x74>)
 801c28a:	681b      	ldr	r3, [r3, #0]
 801c28c:	689a      	ldr	r2, [r3, #8]
 801c28e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801c292:	f04f 0400 	mov.w	r4, #0
 801c296:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30

    cogui_mouse_set_position(105, 155);
 801c29a:	219b      	movs	r1, #155	; 0x9b
 801c29c:	2069      	movs	r0, #105	; 0x69
 801c29e:	f000 f80f 	bl	801c2c0 <cogui_mouse_set_position>
    cogui_mouse_set_speed(COGUI_MOUSE_SPEED_MIDDLE);
 801c2a2:	2004      	movs	r0, #4
 801c2a4:	f000 f82a 	bl	801c2fc <cogui_mouse_set_speed>
}
 801c2a8:	bf00      	nop
 801c2aa:	3704      	adds	r7, #4
 801c2ac:	46bd      	mov	sp, r7
 801c2ae:	bd90      	pop	{r4, r7, pc}
 801c2b0:	2000d78c 	.word	0x2000d78c
 801c2b4:	08022dfc 	.word	0x08022dfc
 801c2b8:	08022de8 	.word	0x08022de8
 801c2bc:	2000d774 	.word	0x2000d774

0801c2c0 <cogui_mouse_set_position>:

void cogui_mouse_set_position(co_uint16_t x, co_uint16_t y)
{
 801c2c0:	b580      	push	{r7, lr}
 801c2c2:	b082      	sub	sp, #8
 801c2c4:	af00      	add	r7, sp, #0
 801c2c6:	4603      	mov	r3, r0
 801c2c8:	460a      	mov	r2, r1
 801c2ca:	80fb      	strh	r3, [r7, #6]
 801c2cc:	4613      	mov	r3, r2
 801c2ce:	80bb      	strh	r3, [r7, #4]
    COGUI_CHECK_CURSOR();
 801c2d0:	4b09      	ldr	r3, [pc, #36]	; (801c2f8 <cogui_mouse_set_position+0x38>)
 801c2d2:	681b      	ldr	r3, [r3, #0]
 801c2d4:	2b00      	cmp	r3, #0
 801c2d6:	d101      	bne.n	801c2dc <cogui_mouse_set_position+0x1c>
 801c2d8:	f7ff ffb0 	bl	801c23c <_cogui_mouse_init>

    _cursor->cx = x;
 801c2dc:	4b06      	ldr	r3, [pc, #24]	; (801c2f8 <cogui_mouse_set_position+0x38>)
 801c2de:	681b      	ldr	r3, [r3, #0]
 801c2e0:	88fa      	ldrh	r2, [r7, #6]
 801c2e2:	801a      	strh	r2, [r3, #0]
    _cursor->cy = y;
 801c2e4:	4b04      	ldr	r3, [pc, #16]	; (801c2f8 <cogui_mouse_set_position+0x38>)
 801c2e6:	681b      	ldr	r3, [r3, #0]
 801c2e8:	88ba      	ldrh	r2, [r7, #4]
 801c2ea:	805a      	strh	r2, [r3, #2]
    
    cogui_mouse_show();
 801c2ec:	f000 f894 	bl	801c418 <cogui_mouse_show>
}
 801c2f0:	bf00      	nop
 801c2f2:	3708      	adds	r7, #8
 801c2f4:	46bd      	mov	sp, r7
 801c2f6:	bd80      	pop	{r7, pc}
 801c2f8:	2000d78c 	.word	0x2000d78c

0801c2fc <cogui_mouse_set_speed>:

void cogui_mouse_set_speed(co_uint8_t speed)
{
 801c2fc:	b580      	push	{r7, lr}
 801c2fe:	b082      	sub	sp, #8
 801c300:	af00      	add	r7, sp, #0
 801c302:	4603      	mov	r3, r0
 801c304:	71fb      	strb	r3, [r7, #7]
    COGUI_CHECK_CURSOR();
 801c306:	4b07      	ldr	r3, [pc, #28]	; (801c324 <cogui_mouse_set_speed+0x28>)
 801c308:	681b      	ldr	r3, [r3, #0]
 801c30a:	2b00      	cmp	r3, #0
 801c30c:	d101      	bne.n	801c312 <cogui_mouse_set_speed+0x16>
 801c30e:	f7ff ff95 	bl	801c23c <_cogui_mouse_init>

    _cursor->speed = speed;
 801c312:	4b04      	ldr	r3, [pc, #16]	; (801c324 <cogui_mouse_set_speed+0x28>)
 801c314:	681b      	ldr	r3, [r3, #0]
 801c316:	79fa      	ldrb	r2, [r7, #7]
 801c318:	711a      	strb	r2, [r3, #4]
}
 801c31a:	bf00      	nop
 801c31c:	3708      	adds	r7, #8
 801c31e:	46bd      	mov	sp, r7
 801c320:	bd80      	pop	{r7, pc}
 801c322:	bf00      	nop
 801c324:	2000d78c 	.word	0x2000d78c

0801c328 <cogui_mouse_move_to>:

void cogui_mouse_move_to(co_uint16_t x,co_uint16_t y)
{
 801c328:	b580      	push	{r7, lr}
 801c32a:	b082      	sub	sp, #8
 801c32c:	af00      	add	r7, sp, #0
 801c32e:	4603      	mov	r3, r0
 801c330:	460a      	mov	r2, r1
 801c332:	80fb      	strh	r3, [r7, #6]
 801c334:	4613      	mov	r3, r2
 801c336:	80bb      	strh	r3, [r7, #4]
    COGUI_CHECK_CURSOR();
 801c338:	4b0e      	ldr	r3, [pc, #56]	; (801c374 <cogui_mouse_move_to+0x4c>)
 801c33a:	681b      	ldr	r3, [r3, #0]
 801c33c:	2b00      	cmp	r3, #0
 801c33e:	d101      	bne.n	801c344 <cogui_mouse_move_to+0x1c>
 801c340:	f7ff ff7c 	bl	801c23c <_cogui_mouse_init>

    if (x > 230) {
 801c344:	88fb      	ldrh	r3, [r7, #6]
 801c346:	2be6      	cmp	r3, #230	; 0xe6
 801c348:	d901      	bls.n	801c34e <cogui_mouse_move_to+0x26>
        x = 230;
 801c34a:	23e6      	movs	r3, #230	; 0xe6
 801c34c:	80fb      	strh	r3, [r7, #6]
    }
    if (y > 310) {
 801c34e:	88bb      	ldrh	r3, [r7, #4]
 801c350:	f5b3 7f9b 	cmp.w	r3, #310	; 0x136
 801c354:	d902      	bls.n	801c35c <cogui_mouse_move_to+0x34>
        y = 310;
 801c356:	f44f 739b 	mov.w	r3, #310	; 0x136
 801c35a:	80bb      	strh	r3, [r7, #4]
    }

    cogui_mouse_restore();
 801c35c:	f000 f850 	bl	801c400 <cogui_mouse_restore>
    cogui_mouse_set_position(x, y);
 801c360:	88ba      	ldrh	r2, [r7, #4]
 801c362:	88fb      	ldrh	r3, [r7, #6]
 801c364:	4611      	mov	r1, r2
 801c366:	4618      	mov	r0, r3
 801c368:	f7ff ffaa 	bl	801c2c0 <cogui_mouse_set_position>
}
 801c36c:	bf00      	nop
 801c36e:	3708      	adds	r7, #8
 801c370:	46bd      	mov	sp, r7
 801c372:	bd80      	pop	{r7, pc}
 801c374:	2000d78c 	.word	0x2000d78c

0801c378 <cogui_mouse_move_delta>:

void cogui_mouse_move_delta(co_int32_t dx,co_int32_t dy)
{
 801c378:	b580      	push	{r7, lr}
 801c37a:	b084      	sub	sp, #16
 801c37c:	af00      	add	r7, sp, #0
 801c37e:	6078      	str	r0, [r7, #4]
 801c380:	6039      	str	r1, [r7, #0]
    COGUI_CHECK_CURSOR();
 801c382:	4b1e      	ldr	r3, [pc, #120]	; (801c3fc <cogui_mouse_move_delta+0x84>)
 801c384:	681b      	ldr	r3, [r3, #0]
 801c386:	2b00      	cmp	r3, #0
 801c388:	d101      	bne.n	801c38e <cogui_mouse_move_delta+0x16>
 801c38a:	f7ff ff57 	bl	801c23c <_cogui_mouse_init>
    
    co_int32_t x = _cursor->cx + dx/_cursor->speed;
 801c38e:	4b1b      	ldr	r3, [pc, #108]	; (801c3fc <cogui_mouse_move_delta+0x84>)
 801c390:	681b      	ldr	r3, [r3, #0]
 801c392:	881b      	ldrh	r3, [r3, #0]
 801c394:	461a      	mov	r2, r3
 801c396:	4b19      	ldr	r3, [pc, #100]	; (801c3fc <cogui_mouse_move_delta+0x84>)
 801c398:	681b      	ldr	r3, [r3, #0]
 801c39a:	791b      	ldrb	r3, [r3, #4]
 801c39c:	4619      	mov	r1, r3
 801c39e:	687b      	ldr	r3, [r7, #4]
 801c3a0:	fb93 f3f1 	sdiv	r3, r3, r1
 801c3a4:	4413      	add	r3, r2
 801c3a6:	60fb      	str	r3, [r7, #12]
    co_int32_t y = _cursor->cy + dy/_cursor->speed;
 801c3a8:	4b14      	ldr	r3, [pc, #80]	; (801c3fc <cogui_mouse_move_delta+0x84>)
 801c3aa:	681b      	ldr	r3, [r3, #0]
 801c3ac:	885b      	ldrh	r3, [r3, #2]
 801c3ae:	461a      	mov	r2, r3
 801c3b0:	4b12      	ldr	r3, [pc, #72]	; (801c3fc <cogui_mouse_move_delta+0x84>)
 801c3b2:	681b      	ldr	r3, [r3, #0]
 801c3b4:	791b      	ldrb	r3, [r3, #4]
 801c3b6:	4619      	mov	r1, r3
 801c3b8:	683b      	ldr	r3, [r7, #0]
 801c3ba:	fb93 f3f1 	sdiv	r3, r3, r1
 801c3be:	4413      	add	r3, r2
 801c3c0:	60bb      	str	r3, [r7, #8]

    if (x < 0) {
 801c3c2:	68fb      	ldr	r3, [r7, #12]
 801c3c4:	2b00      	cmp	r3, #0
 801c3c6:	da01      	bge.n	801c3cc <cogui_mouse_move_delta+0x54>
        x = 0;
 801c3c8:	2300      	movs	r3, #0
 801c3ca:	60fb      	str	r3, [r7, #12]
    }
    if (y < 0) {
 801c3cc:	68bb      	ldr	r3, [r7, #8]
 801c3ce:	2b00      	cmp	r3, #0
 801c3d0:	da01      	bge.n	801c3d6 <cogui_mouse_move_delta+0x5e>
        y = 0;
 801c3d2:	2300      	movs	r3, #0
 801c3d4:	60bb      	str	r3, [r7, #8]
    }

    if (x || y)
 801c3d6:	68fb      	ldr	r3, [r7, #12]
 801c3d8:	2b00      	cmp	r3, #0
 801c3da:	d102      	bne.n	801c3e2 <cogui_mouse_move_delta+0x6a>
 801c3dc:	68bb      	ldr	r3, [r7, #8]
 801c3de:	2b00      	cmp	r3, #0
 801c3e0:	d007      	beq.n	801c3f2 <cogui_mouse_move_delta+0x7a>
        cogui_mouse_move_to(x, y);
 801c3e2:	68fb      	ldr	r3, [r7, #12]
 801c3e4:	b29b      	uxth	r3, r3
 801c3e6:	68ba      	ldr	r2, [r7, #8]
 801c3e8:	b292      	uxth	r2, r2
 801c3ea:	4611      	mov	r1, r2
 801c3ec:	4618      	mov	r0, r3
 801c3ee:	f7ff ff9b 	bl	801c328 <cogui_mouse_move_to>
}
 801c3f2:	bf00      	nop
 801c3f4:	3710      	adds	r7, #16
 801c3f6:	46bd      	mov	sp, r7
 801c3f8:	bd80      	pop	{r7, pc}
 801c3fa:	bf00      	nop
 801c3fc:	2000d78c 	.word	0x2000d78c

0801c400 <cogui_mouse_restore>:

void cogui_mouse_restore(void)
{
 801c400:	b580      	push	{r7, lr}
 801c402:	af00      	add	r7, sp, #0
    COGUI_CHECK_CURSOR();
 801c404:	4b03      	ldr	r3, [pc, #12]	; (801c414 <cogui_mouse_restore+0x14>)
 801c406:	681b      	ldr	r3, [r3, #0]
 801c408:	2b00      	cmp	r3, #0
 801c40a:	d101      	bne.n	801c410 <cogui_mouse_restore+0x10>
 801c40c:	f7ff ff16 	bl	801c23c <_cogui_mouse_init>
}
 801c410:	bf00      	nop
 801c412:	bd80      	pop	{r7, pc}
 801c414:	2000d78c 	.word	0x2000d78c

0801c418 <cogui_mouse_show>:

void cogui_mouse_show(void)
{
 801c418:	b590      	push	{r4, r7, lr}
 801c41a:	b083      	sub	sp, #12
 801c41c:	af02      	add	r7, sp, #8
    COGUI_CHECK_CURSOR();
 801c41e:	4b11      	ldr	r3, [pc, #68]	; (801c464 <cogui_mouse_show+0x4c>)
 801c420:	681b      	ldr	r3, [r3, #0]
 801c422:	2b00      	cmp	r3, #0
 801c424:	d101      	bne.n	801c42a <cogui_mouse_show+0x12>
 801c426:	f7ff ff09 	bl	801c23c <_cogui_mouse_init>

    cogui_dc_draw_line(_cursor->cursor_widget->dc_engine, _cursor->cx,  _cursor->cx+10, _cursor->cy, _cursor->cy+10);
 801c42a:	4b0e      	ldr	r3, [pc, #56]	; (801c464 <cogui_mouse_show+0x4c>)
 801c42c:	681b      	ldr	r3, [r3, #0]
 801c42e:	689b      	ldr	r3, [r3, #8]
 801c430:	6a98      	ldr	r0, [r3, #40]	; 0x28
 801c432:	4b0c      	ldr	r3, [pc, #48]	; (801c464 <cogui_mouse_show+0x4c>)
 801c434:	681b      	ldr	r3, [r3, #0]
 801c436:	881b      	ldrh	r3, [r3, #0]
 801c438:	4619      	mov	r1, r3
 801c43a:	4b0a      	ldr	r3, [pc, #40]	; (801c464 <cogui_mouse_show+0x4c>)
 801c43c:	681b      	ldr	r3, [r3, #0]
 801c43e:	881b      	ldrh	r3, [r3, #0]
 801c440:	f103 020a 	add.w	r2, r3, #10
 801c444:	4b07      	ldr	r3, [pc, #28]	; (801c464 <cogui_mouse_show+0x4c>)
 801c446:	681b      	ldr	r3, [r3, #0]
 801c448:	885b      	ldrh	r3, [r3, #2]
 801c44a:	461c      	mov	r4, r3
 801c44c:	4b05      	ldr	r3, [pc, #20]	; (801c464 <cogui_mouse_show+0x4c>)
 801c44e:	681b      	ldr	r3, [r3, #0]
 801c450:	885b      	ldrh	r3, [r3, #2]
 801c452:	330a      	adds	r3, #10
 801c454:	9300      	str	r3, [sp, #0]
 801c456:	4623      	mov	r3, r4
 801c458:	f7ff f844 	bl	801b4e4 <cogui_dc_draw_line>
}
 801c45c:	bf00      	nop
 801c45e:	3704      	adds	r7, #4
 801c460:	46bd      	mov	sp, r7
 801c462:	bd90      	pop	{r4, r7, pc}
 801c464:	2000d78c 	.word	0x2000d78c

0801c468 <cogui_server_handler_mouse_btn>:

cogui_app_t *server_app = Co_NULL;
OS_STK   server_Stk[512]={0};

void cogui_server_handler_mouse_btn(struct cogui_event *event)
{
 801c468:	b580      	push	{r7, lr}
 801c46a:	b082      	sub	sp, #8
 801c46c:	af00      	add	r7, sp, #0
 801c46e:	6078      	str	r0, [r7, #4]
    /* the topwin contains current mouse */
    //P_TopWin win    = Co_NULL;

    COGUI_EVENT_INIT(event, COGUI_EVENT_MOUSE_BUTTON);
 801c470:	687b      	ldr	r3, [r7, #4]
 801c472:	220d      	movs	r2, #13
 801c474:	701a      	strb	r2, [r3, #0]
 801c476:	f7fe ffd3 	bl	801b420 <cogui_app_self>
 801c47a:	4602      	mov	r2, r0
 801c47c:	687b      	ldr	r3, [r7, #4]
 801c47e:	605a      	str	r2, [r3, #4]
 801c480:	687b      	ldr	r3, [r7, #4]
 801c482:	2200      	movs	r2, #0
 801c484:	721a      	strb	r2, [r3, #8]
        return;
    }

    event->win = win->wid;*/

    while(cogui_send(event->app, event) != E_OK){
 801c486:	e002      	b.n	801c48e <cogui_server_handler_mouse_btn+0x26>
        CoTickDelay(50);
 801c488:	2032      	movs	r0, #50	; 0x32
 801c48a:	f7fe f89b 	bl	801a5c4 <CoTickDelay>
    while(cogui_send(event->app, event) != E_OK){
 801c48e:	687b      	ldr	r3, [r7, #4]
 801c490:	68db      	ldr	r3, [r3, #12]
 801c492:	6879      	ldr	r1, [r7, #4]
 801c494:	4618      	mov	r0, r3
 801c496:	f000 f973 	bl	801c780 <cogui_send>
 801c49a:	4603      	mov	r3, r0
 801c49c:	2b00      	cmp	r3, #0
 801c49e:	d1f3      	bne.n	801c488 <cogui_server_handler_mouse_btn+0x20>
    }
}
 801c4a0:	bf00      	nop
 801c4a2:	3708      	adds	r7, #8
 801c4a4:	46bd      	mov	sp, r7
 801c4a6:	bd80      	pop	{r7, pc}

0801c4a8 <cogui_server_handler_mouse_motion>:

void cogui_server_handler_mouse_motion(struct cogui_event *event)
{
 801c4a8:	b580      	push	{r7, lr}
 801c4aa:	b082      	sub	sp, #8
 801c4ac:	af00      	add	r7, sp, #0
 801c4ae:	6078      	str	r0, [r7, #4]
    cogui_mouse_move_delta(event->dx, event->dy);
 801c4b0:	687b      	ldr	r3, [r7, #4]
 801c4b2:	695a      	ldr	r2, [r3, #20]
 801c4b4:	687b      	ldr	r3, [r7, #4]
 801c4b6:	699b      	ldr	r3, [r3, #24]
 801c4b8:	4619      	mov	r1, r3
 801c4ba:	4610      	mov	r0, r2
 801c4bc:	f7ff ff5c 	bl	801c378 <cogui_mouse_move_delta>
}
 801c4c0:	bf00      	nop
 801c4c2:	3708      	adds	r7, #8
 801c4c4:	46bd      	mov	sp, r7
 801c4c6:	bd80      	pop	{r7, pc}

0801c4c8 <cogui_server_event_kbd>:

void cogui_server_event_kbd(struct cogui_event *event)
{
 801c4c8:	b580      	push	{r7, lr}
 801c4ca:	b082      	sub	sp, #8
 801c4cc:	af00      	add	r7, sp, #0
 801c4ce:	6078      	str	r0, [r7, #4]
    /* the topwin contains current mouse */
    //P_TopWin win = Co_NULL;

    COGUI_EVENT_INIT(event, COGUI_EVENT_KBD);
 801c4d0:	687b      	ldr	r3, [r7, #4]
 801c4d2:	220e      	movs	r2, #14
 801c4d4:	701a      	strb	r2, [r3, #0]
 801c4d6:	f7fe ffa3 	bl	801b420 <cogui_app_self>
 801c4da:	4602      	mov	r2, r0
 801c4dc:	687b      	ldr	r3, [r7, #4]
 801c4de:	605a      	str	r2, [r3, #4]
 801c4e0:	687b      	ldr	r3, [r7, #4]
 801c4e2:	2200      	movs	r2, #0
 801c4e4:	721a      	strb	r2, [r3, #8]
        return;
    }

    event->win = win->wid;*/

    cogui_send(event->app, event);
 801c4e6:	687b      	ldr	r3, [r7, #4]
 801c4e8:	68db      	ldr	r3, [r3, #12]
 801c4ea:	6879      	ldr	r1, [r7, #4]
 801c4ec:	4618      	mov	r0, r3
 801c4ee:	f000 f947 	bl	801c780 <cogui_send>
}
 801c4f2:	bf00      	nop
 801c4f4:	3708      	adds	r7, #8
 801c4f6:	46bd      	mov	sp, r7
 801c4f8:	bd80      	pop	{r7, pc}

0801c4fa <cogui_server_event_handler>:

StatusType cogui_server_event_handler(struct cogui_event *event)
{
 801c4fa:	b580      	push	{r7, lr}
 801c4fc:	b084      	sub	sp, #16
 801c4fe:	af00      	add	r7, sp, #0
 801c500:	6078      	str	r0, [r7, #4]
    COGUI_ASSERT(event != Co_NULL);
 801c502:	687b      	ldr	r3, [r7, #4]
 801c504:	2b00      	cmp	r3, #0
 801c506:	d104      	bne.n	801c512 <cogui_server_event_handler+0x18>
 801c508:	223d      	movs	r2, #61	; 0x3d
 801c50a:	492c      	ldr	r1, [pc, #176]	; (801c5bc <cogui_server_event_handler+0xc2>)
 801c50c:	482c      	ldr	r0, [pc, #176]	; (801c5c0 <cogui_server_event_handler+0xc6>)
 801c50e:	f000 fdeb 	bl	801d0e8 <cogui_assert_handler>

    StatusType result = GUI_E_ERROR;
 801c512:	2316      	movs	r3, #22
 801c514:	73fb      	strb	r3, [r7, #15]

    switch (event->type)
 801c516:	687b      	ldr	r3, [r7, #4]
 801c518:	781b      	ldrb	r3, [r3, #0]
 801c51a:	2b0f      	cmp	r3, #15
 801c51c:	d848      	bhi.n	801c5b0 <cogui_server_event_handler+0xb6>
 801c51e:	a201      	add	r2, pc, #4	; (adr r2, 801c524 <cogui_server_event_handler+0x2a>)
 801c520:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801c524:	0801c565 	.word	0x0801c565
 801c528:	0801c565 	.word	0x0801c565
 801c52c:	0801c5b1 	.word	0x0801c5b1
 801c530:	0801c5b1 	.word	0x0801c5b1
 801c534:	0801c5b1 	.word	0x0801c5b1
 801c538:	0801c5b1 	.word	0x0801c5b1
 801c53c:	0801c5b1 	.word	0x0801c5b1
 801c540:	0801c5b1 	.word	0x0801c5b1
 801c544:	0801c5b1 	.word	0x0801c5b1
 801c548:	0801c58d 	.word	0x0801c58d
 801c54c:	0801c58d 	.word	0x0801c58d
 801c550:	0801c5b1 	.word	0x0801c5b1
 801c554:	0801c585 	.word	0x0801c585
 801c558:	0801c5b1 	.word	0x0801c5b1
 801c55c:	0801c5b1 	.word	0x0801c5b1
 801c560:	0801c573 	.word	0x0801c573
    {
	case COGUI_EVENT_APP_CREATE:
    case COGUI_EVENT_APP_DELE:
		result = cogui_ack(event, E_OK);
 801c564:	2100      	movs	r1, #0
 801c566:	6878      	ldr	r0, [r7, #4]
 801c568:	f000 f8e1 	bl	801c72e <cogui_ack>
 801c56c:	4603      	mov	r3, r0
 801c56e:	73fb      	strb	r3, [r7, #15]
		break;
 801c570:	e01f      	b.n	801c5b2 <cogui_server_event_handler+0xb8>

    case COGUI_EVENT_PAINT:
        result = cogui_send(event->sender, event);
 801c572:	687b      	ldr	r3, [r7, #4]
 801c574:	685b      	ldr	r3, [r3, #4]
 801c576:	6879      	ldr	r1, [r7, #4]
 801c578:	4618      	mov	r0, r3
 801c57a:	f000 f901 	bl	801c780 <cogui_send>
 801c57e:	4603      	mov	r3, r0
 801c580:	73fb      	strb	r3, [r7, #15]
        break;
 801c582:	e016      	b.n	801c5b2 <cogui_server_event_handler+0xb8>
        break;

    case COGUI_EVENT_MOUSE_MOTION:
        /* handle mouse motion event */
		
        cogui_server_handler_mouse_motion(event);
 801c584:	6878      	ldr	r0, [r7, #4]
 801c586:	f7ff ff8f 	bl	801c4a8 <cogui_server_handler_mouse_motion>
        break;
 801c58a:	e012      	b.n	801c5b2 <cogui_server_event_handler+0xb8>

    case COGUI_EVENT_WINDOW_CLOSE:
    case COGUI_EVENT_WINDOW_HIDE:
    {
        if (COGUI_WINDOW_IS_ENABLE(event->win)) {
 801c58c:	687b      	ldr	r3, [r7, #4]
 801c58e:	691b      	ldr	r3, [r3, #16]
 801c590:	68db      	ldr	r3, [r3, #12]
 801c592:	f003 0301 	and.w	r3, r3, #1
 801c596:	2b00      	cmp	r3, #0
 801c598:	d001      	beq.n	801c59e <cogui_server_event_handler+0xa4>
            result = GUI_E_ERROR;
 801c59a:	2316      	movs	r3, #22
 801c59c:	73fb      	strb	r3, [r7, #15]
        }

        result = cogui_window_show(server_app->win);    
 801c59e:	4b09      	ldr	r3, [pc, #36]	; (801c5c4 <cogui_server_event_handler+0xca>)
 801c5a0:	681b      	ldr	r3, [r3, #0]
 801c5a2:	691b      	ldr	r3, [r3, #16]
 801c5a4:	4618      	mov	r0, r3
 801c5a6:	f002 f92f 	bl	801e808 <cogui_window_show>
 801c5aa:	4603      	mov	r3, r0
 801c5ac:	73fb      	strb	r3, [r7, #15]
        break;
 801c5ae:	e000      	b.n	801c5b2 <cogui_server_event_handler+0xb8>
		
        //cogui_server_event_handler_kbd((struct cogui_event_kbd *)event);
        break;

    default:
        break;
 801c5b0:	bf00      	nop
    }

    return result;
 801c5b2:	7bfb      	ldrb	r3, [r7, #15]
}
 801c5b4:	4618      	mov	r0, r3
 801c5b6:	3710      	adds	r7, #16
 801c5b8:	46bd      	mov	sp, r7
 801c5ba:	bd80      	pop	{r7, pc}
 801c5bc:	08022e2c 	.word	0x08022e2c
 801c5c0:	08022e10 	.word	0x08022e10
 801c5c4:	2000d790 	.word	0x2000d790

0801c5c8 <cogui_server_entry>:

void cogui_server_entry(void *parameter)
{
 801c5c8:	b580      	push	{r7, lr}
 801c5ca:	b082      	sub	sp, #8
 801c5cc:	af00      	add	r7, sp, #0
 801c5ce:	6078      	str	r0, [r7, #4]
    server_app = cogui_app_create("Server");
 801c5d0:	4810      	ldr	r0, [pc, #64]	; (801c614 <cogui_server_entry+0x4c>)
 801c5d2:	f7fe fd37 	bl	801b044 <cogui_app_create>
 801c5d6:	4602      	mov	r2, r0
 801c5d8:	4b0f      	ldr	r3, [pc, #60]	; (801c618 <cogui_server_entry+0x50>)
 801c5da:	601a      	str	r2, [r3, #0]
    if(server_app == Co_NULL){
 801c5dc:	4b0e      	ldr	r3, [pc, #56]	; (801c618 <cogui_server_entry+0x50>)
 801c5de:	681b      	ldr	r3, [r3, #0]
 801c5e0:	2b00      	cmp	r3, #0
 801c5e2:	d013      	beq.n	801c60c <cogui_server_entry+0x44>
        return;
    }

    server_app->handler = cogui_server_event_handler;
 801c5e4:	4b0c      	ldr	r3, [pc, #48]	; (801c618 <cogui_server_entry+0x50>)
 801c5e6:	681b      	ldr	r3, [r3, #0]
 801c5e8:	4a0c      	ldr	r2, [pc, #48]	; (801c61c <cogui_server_entry+0x54>)
 801c5ea:	651a      	str	r2, [r3, #80]	; 0x50

    cogui_app_run(server_app);
 801c5ec:	4b0a      	ldr	r3, [pc, #40]	; (801c618 <cogui_server_entry+0x50>)
 801c5ee:	681b      	ldr	r3, [r3, #0]
 801c5f0:	4618      	mov	r0, r3
 801c5f2:	f7fe fe4d 	bl	801b290 <cogui_app_run>
    cogui_app_delete(server_app);
 801c5f6:	4b08      	ldr	r3, [pc, #32]	; (801c618 <cogui_server_entry+0x50>)
 801c5f8:	681b      	ldr	r3, [r3, #0]
 801c5fa:	4618      	mov	r0, r3
 801c5fc:	f7fe fd9e 	bl	801b13c <cogui_app_delete>
    server_app = Co_NULL;
 801c600:	4b05      	ldr	r3, [pc, #20]	; (801c618 <cogui_server_entry+0x50>)
 801c602:	2200      	movs	r2, #0
 801c604:	601a      	str	r2, [r3, #0]

    CoExitTask();
 801c606:	f7fd fe45 	bl	801a294 <CoExitTask>
 801c60a:	e000      	b.n	801c60e <cogui_server_entry+0x46>
        return;
 801c60c:	bf00      	nop
}
 801c60e:	3708      	adds	r7, #8
 801c610:	46bd      	mov	sp, r7
 801c612:	bd80      	pop	{r7, pc}
 801c614:	08022e24 	.word	0x08022e24
 801c618:	2000d790 	.word	0x2000d790
 801c61c:	0801c4fb 	.word	0x0801c4fb

0801c620 <cogui_server_post_event>:

StatusType cogui_server_post_event(struct cogui_event *event)
{
 801c620:	b580      	push	{r7, lr}
 801c622:	b084      	sub	sp, #16
 801c624:	af00      	add	r7, sp, #0
 801c626:	6078      	str	r0, [r7, #4]
    StatusType result;

    if (server_app != Co_NULL){
 801c628:	4b09      	ldr	r3, [pc, #36]	; (801c650 <cogui_server_post_event+0x30>)
 801c62a:	681b      	ldr	r3, [r3, #0]
 801c62c:	2b00      	cmp	r3, #0
 801c62e:	d008      	beq.n	801c642 <cogui_server_post_event+0x22>
        result = cogui_send(server_app, event);
 801c630:	4b07      	ldr	r3, [pc, #28]	; (801c650 <cogui_server_post_event+0x30>)
 801c632:	681b      	ldr	r3, [r3, #0]
 801c634:	6879      	ldr	r1, [r7, #4]
 801c636:	4618      	mov	r0, r3
 801c638:	f000 f8a2 	bl	801c780 <cogui_send>
 801c63c:	4603      	mov	r3, r0
 801c63e:	73fb      	strb	r3, [r7, #15]
 801c640:	e001      	b.n	801c646 <cogui_server_post_event+0x26>
    }
    else{
        result = GUI_E_ERROR;
 801c642:	2316      	movs	r3, #22
 801c644:	73fb      	strb	r3, [r7, #15]
    }

    return result;
 801c646:	7bfb      	ldrb	r3, [r7, #15]
}
 801c648:	4618      	mov	r0, r3
 801c64a:	3710      	adds	r7, #16
 801c64c:	46bd      	mov	sp, r7
 801c64e:	bd80      	pop	{r7, pc}
 801c650:	2000d790 	.word	0x2000d790

0801c654 <cogui_server_post_event_sync>:

StatusType cogui_server_post_event_sync(struct cogui_event *event)
{
 801c654:	b580      	push	{r7, lr}
 801c656:	b084      	sub	sp, #16
 801c658:	af00      	add	r7, sp, #0
 801c65a:	6078      	str	r0, [r7, #4]
    StatusType result;

    if (server_app != Co_NULL){
 801c65c:	4b09      	ldr	r3, [pc, #36]	; (801c684 <cogui_server_post_event_sync+0x30>)
 801c65e:	681b      	ldr	r3, [r3, #0]
 801c660:	2b00      	cmp	r3, #0
 801c662:	d008      	beq.n	801c676 <cogui_server_post_event_sync+0x22>
        result = cogui_send_sync(server_app, event);
 801c664:	4b07      	ldr	r3, [pc, #28]	; (801c684 <cogui_server_post_event_sync+0x30>)
 801c666:	681b      	ldr	r3, [r3, #0]
 801c668:	6879      	ldr	r1, [r7, #4]
 801c66a:	4618      	mov	r0, r3
 801c66c:	f000 f8b6 	bl	801c7dc <cogui_send_sync>
 801c670:	4603      	mov	r3, r0
 801c672:	73fb      	strb	r3, [r7, #15]
 801c674:	e001      	b.n	801c67a <cogui_server_post_event_sync+0x26>
    }
    else{
        result = GUI_E_ERROR;
 801c676:	2316      	movs	r3, #22
 801c678:	73fb      	strb	r3, [r7, #15]
    }

    return result;
 801c67a:	7bfb      	ldrb	r3, [r7, #15]
}
 801c67c:	4618      	mov	r0, r3
 801c67e:	3710      	adds	r7, #16
 801c680:	46bd      	mov	sp, r7
 801c682:	bd80      	pop	{r7, pc}
 801c684:	2000d790 	.word	0x2000d790

0801c688 <cogui_get_server>:


cogui_app_t *cogui_get_server(void)
{
 801c688:	b480      	push	{r7}
 801c68a:	af00      	add	r7, sp, #0
    return server_app;
 801c68c:	4b03      	ldr	r3, [pc, #12]	; (801c69c <cogui_get_server+0x14>)
 801c68e:	681b      	ldr	r3, [r3, #0]
}
 801c690:	4618      	mov	r0, r3
 801c692:	46bd      	mov	sp, r7
 801c694:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c698:	4770      	bx	lr
 801c69a:	bf00      	nop
 801c69c:	2000d790 	.word	0x2000d790

0801c6a0 <cogui_server_init>:

void cogui_server_init(void)
{
 801c6a0:	b580      	push	{r7, lr}
 801c6a2:	af00      	add	r7, sp, #0
    CoCreateTask(cogui_server_entry, (void *)0, 15,&server_Stk[511], 512);
 801c6a4:	4b03      	ldr	r3, [pc, #12]	; (801c6b4 <cogui_server_init+0x14>)
 801c6a6:	4a04      	ldr	r2, [pc, #16]	; (801c6b8 <cogui_server_init+0x18>)
 801c6a8:	2100      	movs	r1, #0
 801c6aa:	4804      	ldr	r0, [pc, #16]	; (801c6bc <cogui_server_init+0x1c>)
 801c6ac:	f7fd fcd2 	bl	801a054 <CreateTask>
}
 801c6b0:	bf00      	nop
 801c6b2:	bd80      	pop	{r7, pc}
 801c6b4:	2000df90 	.word	0x2000df90
 801c6b8:	0002000f 	.word	0x0002000f
 801c6bc:	0801c5c9 	.word	0x0801c5c9

0801c6c0 <cogui_system_init>:
 * @param[out] None
 * @retval     None
 *******************************************************************************
 */
void cogui_system_init(void)
{
 801c6c0:	b580      	push	{r7, lr}
 801c6c2:	af00      	add	r7, sp, #0
    cogui_printf("[%10s] Initial server...", "Server");
 801c6c4:	4905      	ldr	r1, [pc, #20]	; (801c6dc <cogui_system_init+0x1c>)
 801c6c6:	4806      	ldr	r0, [pc, #24]	; (801c6e0 <cogui_system_init+0x20>)
 801c6c8:	f000 fb2e 	bl	801cd28 <cogui_printf>
    cogui_server_init();
 801c6cc:	f7ff ffe8 	bl	801c6a0 <cogui_server_init>
    cogui_printf("\t\t\x1b[;32;1m[OK]\x1b[0;m\r\n");
 801c6d0:	4804      	ldr	r0, [pc, #16]	; (801c6e4 <cogui_system_init+0x24>)
 801c6d2:	f000 fb29 	bl	801cd28 <cogui_printf>
}
 801c6d6:	bf00      	nop
 801c6d8:	bd80      	pop	{r7, pc}
 801c6da:	bf00      	nop
 801c6dc:	08022eac 	.word	0x08022eac
 801c6e0:	08022eb4 	.word	0x08022eb4
 801c6e4:	08022ed0 	.word	0x08022ed0

0801c6e8 <cogui_malloc>:
 * @param[out] None
 * @retval     *ptr     Allocated memory pointer.
 *******************************************************************************
 */
void *cogui_malloc(U32 size)
{
 801c6e8:	b580      	push	{r7, lr}
 801c6ea:	b084      	sub	sp, #16
 801c6ec:	af00      	add	r7, sp, #0
 801c6ee:	6078      	str	r0, [r7, #4]
    void *ptr;
    
    ptr = CoKmalloc(size);
 801c6f0:	6878      	ldr	r0, [r7, #4]
 801c6f2:	f7fb fef3 	bl	80184dc <CoKmalloc>
 801c6f6:	60f8      	str	r0, [r7, #12]

    /* if malloc failed, print error message */
	if(ptr == Co_NULL){
 801c6f8:	68fb      	ldr	r3, [r7, #12]
 801c6fa:	2b00      	cmp	r3, #0
 801c6fc:	d103      	bne.n	801c706 <cogui_malloc+0x1e>
		cogui_printf("[%10s] out of memory\r\n", "system");
 801c6fe:	4904      	ldr	r1, [pc, #16]	; (801c710 <cogui_malloc+0x28>)
 801c700:	4804      	ldr	r0, [pc, #16]	; (801c714 <cogui_malloc+0x2c>)
 801c702:	f000 fb11 	bl	801cd28 <cogui_printf>
	}
	
    return ptr;
 801c706:	68fb      	ldr	r3, [r7, #12]
}
 801c708:	4618      	mov	r0, r3
 801c70a:	3710      	adds	r7, #16
 801c70c:	46bd      	mov	sp, r7
 801c70e:	bd80      	pop	{r7, pc}
 801c710:	08022ee8 	.word	0x08022ee8
 801c714:	08022ef0 	.word	0x08022ef0

0801c718 <cogui_free>:
 * @param[out] None
 * @retval     None
 *******************************************************************************
 */
void cogui_free(void* ptr)
{
 801c718:	b580      	push	{r7, lr}
 801c71a:	b082      	sub	sp, #8
 801c71c:	af00      	add	r7, sp, #0
 801c71e:	6078      	str	r0, [r7, #4]
    CoKfree(ptr);
 801c720:	6878      	ldr	r0, [r7, #4]
 801c722:	f7fb ff91 	bl	8018648 <CoKfree>
}
 801c726:	bf00      	nop
 801c728:	3708      	adds	r7, #8
 801c72a:	46bd      	mov	sp, r7
 801c72c:	bd80      	pop	{r7, pc}

0801c72e <cogui_ack>:
 * @param[out] None       
 * @retval     GUI_E_OK     Always return GUI_E_OK .  
 *******************************************************************************
 */
StatusType cogui_ack(struct cogui_event *event, StatusType status)
{
 801c72e:	b580      	push	{r7, lr}
 801c730:	b082      	sub	sp, #8
 801c732:	af00      	add	r7, sp, #0
 801c734:	6078      	str	r0, [r7, #4]
 801c736:	460b      	mov	r3, r1
 801c738:	70fb      	strb	r3, [r7, #3]
    COGUI_ASSERT(event != Co_NULL);
 801c73a:	687b      	ldr	r3, [r7, #4]
 801c73c:	2b00      	cmp	r3, #0
 801c73e:	d104      	bne.n	801c74a <cogui_ack+0x1c>
 801c740:	224a      	movs	r2, #74	; 0x4a
 801c742:	490c      	ldr	r1, [pc, #48]	; (801c774 <cogui_ack+0x46>)
 801c744:	480c      	ldr	r0, [pc, #48]	; (801c778 <cogui_ack+0x4a>)
 801c746:	f000 fccf 	bl	801d0e8 <cogui_assert_handler>
    COGUI_ASSERT(event->ack);
 801c74a:	687b      	ldr	r3, [r7, #4]
 801c74c:	7a1b      	ldrb	r3, [r3, #8]
 801c74e:	2b00      	cmp	r3, #0
 801c750:	d104      	bne.n	801c75c <cogui_ack+0x2e>
 801c752:	224b      	movs	r2, #75	; 0x4b
 801c754:	4907      	ldr	r1, [pc, #28]	; (801c774 <cogui_ack+0x46>)
 801c756:	4809      	ldr	r0, [pc, #36]	; (801c77c <cogui_ack+0x4e>)
 801c758:	f000 fcc6 	bl	801d0e8 <cogui_assert_handler>
	
    /* ACK status */
    CoPostMail(event->ack, (void *)&status);
 801c75c:	687b      	ldr	r3, [r7, #4]
 801c75e:	7a1b      	ldrb	r3, [r3, #8]
 801c760:	1cfa      	adds	r2, r7, #3
 801c762:	4611      	mov	r1, r2
 801c764:	4618      	mov	r0, r3
 801c766:	f7fc fa31 	bl	8018bcc <CoPostMail>

    return GUI_E_OK;
 801c76a:	2317      	movs	r3, #23
}
 801c76c:	4618      	mov	r0, r3
 801c76e:	3708      	adds	r7, #8
 801c770:	46bd      	mov	sp, r7
 801c772:	bd80      	pop	{r7, pc}
 801c774:	08022f88 	.word	0x08022f88
 801c778:	08022f08 	.word	0x08022f08
 801c77c:	08022f1c 	.word	0x08022f1c

0801c780 <cogui_send>:
 * @retval     GUI_E_OK         If send successfully.         
 * @retval     GUI_E_ERROR      If some error occurred.          
 *******************************************************************************
 */
StatusType cogui_send(cogui_app_t *app, struct cogui_event *event)
{
 801c780:	b580      	push	{r7, lr}
 801c782:	b084      	sub	sp, #16
 801c784:	af00      	add	r7, sp, #0
 801c786:	6078      	str	r0, [r7, #4]
 801c788:	6039      	str	r1, [r7, #0]
    StatusType result;

    COGUI_ASSERT(event != Co_NULL);
 801c78a:	683b      	ldr	r3, [r7, #0]
 801c78c:	2b00      	cmp	r3, #0
 801c78e:	d104      	bne.n	801c79a <cogui_send+0x1a>
 801c790:	2261      	movs	r2, #97	; 0x61
 801c792:	490f      	ldr	r1, [pc, #60]	; (801c7d0 <cogui_send+0x50>)
 801c794:	480f      	ldr	r0, [pc, #60]	; (801c7d4 <cogui_send+0x54>)
 801c796:	f000 fca7 	bl	801d0e8 <cogui_assert_handler>
    COGUI_ASSERT(app != Co_NULL);
 801c79a:	687b      	ldr	r3, [r7, #4]
 801c79c:	2b00      	cmp	r3, #0
 801c79e:	d104      	bne.n	801c7aa <cogui_send+0x2a>
 801c7a0:	2262      	movs	r2, #98	; 0x62
 801c7a2:	490b      	ldr	r1, [pc, #44]	; (801c7d0 <cogui_send+0x50>)
 801c7a4:	480c      	ldr	r0, [pc, #48]	; (801c7d8 <cogui_send+0x58>)
 801c7a6:	f000 fc9f 	bl	801d0e8 <cogui_assert_handler>

    /* send event to application */
    result = CoPostMail(app->mq, event);
 801c7aa:	687b      	ldr	r3, [r7, #4]
 801c7ac:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 801c7b0:	6839      	ldr	r1, [r7, #0]
 801c7b2:	4618      	mov	r0, r3
 801c7b4:	f7fc fa0a 	bl	8018bcc <CoPostMail>
 801c7b8:	4603      	mov	r3, r0
 801c7ba:	73fb      	strb	r3, [r7, #15]

    /* return result to GUI status type */
    COGUI_RETURN_TYPE(result);
 801c7bc:	7bfb      	ldrb	r3, [r7, #15]
 801c7be:	2b00      	cmp	r3, #0
 801c7c0:	d101      	bne.n	801c7c6 <cogui_send+0x46>
 801c7c2:	2317      	movs	r3, #23
 801c7c4:	e000      	b.n	801c7c8 <cogui_send+0x48>
 801c7c6:	2316      	movs	r3, #22
}
 801c7c8:	4618      	mov	r0, r3
 801c7ca:	3710      	adds	r7, #16
 801c7cc:	46bd      	mov	sp, r7
 801c7ce:	bd80      	pop	{r7, pc}
 801c7d0:	08022f94 	.word	0x08022f94
 801c7d4:	08022f08 	.word	0x08022f08
 801c7d8:	08022f28 	.word	0x08022f28

0801c7dc <cogui_send_sync>:
 * @retval     GUI_E_OK         If send successfully.         
 * @retval     GUI_E_ERROR      If some error occurred.          
 *******************************************************************************
 */
StatusType cogui_send_sync(cogui_app_t *app, struct cogui_event *event)
{
 801c7dc:	b580      	push	{r7, lr}
 801c7de:	b084      	sub	sp, #16
 801c7e0:	af00      	add	r7, sp, #0
 801c7e2:	6078      	str	r0, [r7, #4]
 801c7e4:	6039      	str	r1, [r7, #0]
    StatusType result;

    COGUI_ASSERT(event != Co_NULL);
 801c7e6:	683b      	ldr	r3, [r7, #0]
 801c7e8:	2b00      	cmp	r3, #0
 801c7ea:	d104      	bne.n	801c7f6 <cogui_send_sync+0x1a>
 801c7ec:	2279      	movs	r2, #121	; 0x79
 801c7ee:	4921      	ldr	r1, [pc, #132]	; (801c874 <cogui_send_sync+0x98>)
 801c7f0:	4821      	ldr	r0, [pc, #132]	; (801c878 <cogui_send_sync+0x9c>)
 801c7f2:	f000 fc79 	bl	801d0e8 <cogui_assert_handler>
    COGUI_ASSERT(app != Co_NULL);
 801c7f6:	687b      	ldr	r3, [r7, #4]
 801c7f8:	2b00      	cmp	r3, #0
 801c7fa:	d104      	bne.n	801c806 <cogui_send_sync+0x2a>
 801c7fc:	227a      	movs	r2, #122	; 0x7a
 801c7fe:	491d      	ldr	r1, [pc, #116]	; (801c874 <cogui_send_sync+0x98>)
 801c800:	481e      	ldr	r0, [pc, #120]	; (801c87c <cogui_send_sync+0xa0>)
 801c802:	f000 fc71 	bl	801d0e8 <cogui_assert_handler>

    /* create a mail box for acking */
    OS_EventID mq = CoCreateMbox(EVENT_SORT_TYPE_FIFO);
 801c806:	2001      	movs	r0, #1
 801c808:	f7fc f8a8 	bl	801895c <CoCreateMbox>
 801c80c:	4603      	mov	r3, r0
 801c80e:	73fb      	strb	r3, [r7, #15]
	event->ack = mq;
 801c810:	683b      	ldr	r3, [r7, #0]
 801c812:	7bfa      	ldrb	r2, [r7, #15]
 801c814:	721a      	strb	r2, [r3, #8]

    /* send event to application */
    result = CoPostMail(app->mq, event);
 801c816:	687b      	ldr	r3, [r7, #4]
 801c818:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 801c81c:	6839      	ldr	r1, [r7, #0]
 801c81e:	4618      	mov	r0, r3
 801c820:	f7fc f9d4 	bl	8018bcc <CoPostMail>
 801c824:	4603      	mov	r3, r0
 801c826:	73bb      	strb	r3, [r7, #14]
    
    /* if send event failed, return */
    if (result != E_OK){
 801c828:	7bbb      	ldrb	r3, [r7, #14]
 801c82a:	2b00      	cmp	r3, #0
 801c82c:	d00b      	beq.n	801c846 <cogui_send_sync+0x6a>
        CoDelMbox(mq, OPT_DEL_ANYWAY);
 801c82e:	7bfb      	ldrb	r3, [r7, #15]
 801c830:	2101      	movs	r1, #1
 801c832:	4618      	mov	r0, r3
 801c834:	f7fc f8ac 	bl	8018990 <CoDelMbox>
        COGUI_RETURN_TYPE(result);
 801c838:	7bbb      	ldrb	r3, [r7, #14]
 801c83a:	2b00      	cmp	r3, #0
 801c83c:	d101      	bne.n	801c842 <cogui_send_sync+0x66>
 801c83e:	2317      	movs	r3, #23
 801c840:	e014      	b.n	801c86c <cogui_send_sync+0x90>
 801c842:	2316      	movs	r3, #22
 801c844:	e012      	b.n	801c86c <cogui_send_sync+0x90>
    }

    /* wait forever for server ack */
    event = CoPendMail(mq, 0, &result);
 801c846:	f107 020e 	add.w	r2, r7, #14
 801c84a:	7bfb      	ldrb	r3, [r7, #15]
 801c84c:	2100      	movs	r1, #0
 801c84e:	4618      	mov	r0, r3
 801c850:	f7fc f90e 	bl	8018a70 <CoPendMail>
 801c854:	6038      	str	r0, [r7, #0]

    /* delete the mail box after receive ack */
    CoDelMbox(mq, OPT_DEL_ANYWAY);
 801c856:	7bfb      	ldrb	r3, [r7, #15]
 801c858:	2101      	movs	r1, #1
 801c85a:	4618      	mov	r0, r3
 801c85c:	f7fc f898 	bl	8018990 <CoDelMbox>

    /* return result to GUI status type */
    COGUI_RETURN_TYPE(result);
 801c860:	7bbb      	ldrb	r3, [r7, #14]
 801c862:	2b00      	cmp	r3, #0
 801c864:	d101      	bne.n	801c86a <cogui_send_sync+0x8e>
 801c866:	2317      	movs	r3, #23
 801c868:	e000      	b.n	801c86c <cogui_send_sync+0x90>
 801c86a:	2316      	movs	r3, #22
}
 801c86c:	4618      	mov	r0, r3
 801c86e:	3710      	adds	r7, #16
 801c870:	46bd      	mov	sp, r7
 801c872:	bd80      	pop	{r7, pc}
 801c874:	08022fa0 	.word	0x08022fa0
 801c878:	08022f08 	.word	0x08022f08
 801c87c:	08022f28 	.word	0x08022f28

0801c880 <cogui_recv>:
 * @retval     GUI_E_OK         Receive event successfully
 * @retval     GUI_E_ERROR      Something wrong when receiveing a event
 *******************************************************************************
 */
StatusType cogui_recv(OS_EventID mq, struct cogui_event *event, co_int32_t timeout)
{
 801c880:	b580      	push	{r7, lr}
 801c882:	b088      	sub	sp, #32
 801c884:	af00      	add	r7, sp, #0
 801c886:	4603      	mov	r3, r0
 801c888:	60b9      	str	r1, [r7, #8]
 801c88a:	607a      	str	r2, [r7, #4]
 801c88c:	73fb      	strb	r3, [r7, #15]
    StatusType result;
    cogui_app_t *app;
    struct cogui_event* buf;

    COGUI_ASSERT(event!=Co_NULL);
 801c88e:	68bb      	ldr	r3, [r7, #8]
 801c890:	2b00      	cmp	r3, #0
 801c892:	d104      	bne.n	801c89e <cogui_recv+0x1e>
 801c894:	22a3      	movs	r2, #163	; 0xa3
 801c896:	4913      	ldr	r1, [pc, #76]	; (801c8e4 <cogui_recv+0x64>)
 801c898:	4813      	ldr	r0, [pc, #76]	; (801c8e8 <cogui_recv+0x68>)
 801c89a:	f000 fc25 	bl	801d0e8 <cogui_assert_handler>

    /* check running applicate is vaild or not */
    app = cogui_app_self();
 801c89e:	f7fe fdbf 	bl	801b420 <cogui_app_self>
 801c8a2:	61f8      	str	r0, [r7, #28]
    if (app == Co_NULL) {
 801c8a4:	69fb      	ldr	r3, [r7, #28]
 801c8a6:	2b00      	cmp	r3, #0
 801c8a8:	d101      	bne.n	801c8ae <cogui_recv+0x2e>
        return GUI_E_APP_NULL;
 801c8aa:	2318      	movs	r3, #24
 801c8ac:	e015      	b.n	801c8da <cogui_recv+0x5a>
    }

    /* receive a event and copy to event pointer */
    buf = (struct cogui_event *)CoPendMail(mq, timeout, &result);
 801c8ae:	6879      	ldr	r1, [r7, #4]
 801c8b0:	f107 0217 	add.w	r2, r7, #23
 801c8b4:	7bfb      	ldrb	r3, [r7, #15]
 801c8b6:	4618      	mov	r0, r3
 801c8b8:	f7fc f8da 	bl	8018a70 <CoPendMail>
 801c8bc:	61b8      	str	r0, [r7, #24]
    cogui_memcpy(event, buf, sizeof(struct cogui_event));
 801c8be:	f04f 0234 	mov.w	r2, #52	; 0x34
 801c8c2:	f04f 0300 	mov.w	r3, #0
 801c8c6:	69b9      	ldr	r1, [r7, #24]
 801c8c8:	68b8      	ldr	r0, [r7, #8]
 801c8ca:	f000 f82f 	bl	801c92c <cogui_memcpy>

    /* return result to GUI status type */
    COGUI_RETURN_TYPE(result);
 801c8ce:	7dfb      	ldrb	r3, [r7, #23]
 801c8d0:	2b00      	cmp	r3, #0
 801c8d2:	d101      	bne.n	801c8d8 <cogui_recv+0x58>
 801c8d4:	2317      	movs	r3, #23
 801c8d6:	e000      	b.n	801c8da <cogui_recv+0x5a>
 801c8d8:	2316      	movs	r3, #22
}
 801c8da:	4618      	mov	r0, r3
 801c8dc:	3720      	adds	r7, #32
 801c8de:	46bd      	mov	sp, r7
 801c8e0:	bd80      	pop	{r7, pc}
 801c8e2:	bf00      	nop
 801c8e4:	08022fb0 	.word	0x08022fb0
 801c8e8:	08022f38 	.word	0x08022f38

0801c8ec <cogui_memset>:
 * @param[out] *buf             Result after setting.
 * @retval     *buf             Result after setting.
 *******************************************************************************
 */
void *cogui_memset(void *buf, int val, co_uint64_t size)
{
 801c8ec:	b490      	push	{r4, r7}
 801c8ee:	b086      	sub	sp, #24
 801c8f0:	af00      	add	r7, sp, #0
 801c8f2:	60f8      	str	r0, [r7, #12]
 801c8f4:	60b9      	str	r1, [r7, #8]
 801c8f6:	e9c7 2300 	strd	r2, r3, [r7]
    char *tmp = (char *)buf;
 801c8fa:	68fb      	ldr	r3, [r7, #12]
 801c8fc:	617b      	str	r3, [r7, #20]

    /* setting value one by one */
    while (size--) {
 801c8fe:	e005      	b.n	801c90c <cogui_memset+0x20>
        *tmp++ = val;
 801c900:	697b      	ldr	r3, [r7, #20]
 801c902:	1c5a      	adds	r2, r3, #1
 801c904:	617a      	str	r2, [r7, #20]
 801c906:	68ba      	ldr	r2, [r7, #8]
 801c908:	b2d2      	uxtb	r2, r2
 801c90a:	701a      	strb	r2, [r3, #0]
    while (size--) {
 801c90c:	e9d7 3400 	ldrd	r3, r4, [r7]
 801c910:	f113 31ff 	adds.w	r1, r3, #4294967295	; 0xffffffff
 801c914:	f144 32ff 	adc.w	r2, r4, #4294967295	; 0xffffffff
 801c918:	e9c7 1200 	strd	r1, r2, [r7]
 801c91c:	4323      	orrs	r3, r4
 801c91e:	d1ef      	bne.n	801c900 <cogui_memset+0x14>
    }

    return buf;
 801c920:	68fb      	ldr	r3, [r7, #12]
}
 801c922:	4618      	mov	r0, r3
 801c924:	3718      	adds	r7, #24
 801c926:	46bd      	mov	sp, r7
 801c928:	bc90      	pop	{r4, r7}
 801c92a:	4770      	bx	lr

0801c92c <cogui_memcpy>:
 * @param[out] *dest            Memory buffer to paste.
 * @retval     *dest            Result after pasting.
 *******************************************************************************
 */
void *cogui_memcpy(void *dest, const void *src, co_uint64_t size)
{
 801c92c:	b490      	push	{r4, r7}
 801c92e:	b086      	sub	sp, #24
 801c930:	af00      	add	r7, sp, #0
 801c932:	60f8      	str	r0, [r7, #12]
 801c934:	60b9      	str	r1, [r7, #8]
 801c936:	e9c7 2300 	strd	r2, r3, [r7]
    char *tar = (char *)dest;
 801c93a:	68fb      	ldr	r3, [r7, #12]
 801c93c:	617b      	str	r3, [r7, #20]
    char *tmp = (char *)src;
 801c93e:	68bb      	ldr	r3, [r7, #8]
 801c940:	613b      	str	r3, [r7, #16]

    /* pasting value one by one */
    while (size--) {
 801c942:	e007      	b.n	801c954 <cogui_memcpy+0x28>
        *tar++ = *tmp++; 
 801c944:	693a      	ldr	r2, [r7, #16]
 801c946:	1c53      	adds	r3, r2, #1
 801c948:	613b      	str	r3, [r7, #16]
 801c94a:	697b      	ldr	r3, [r7, #20]
 801c94c:	1c59      	adds	r1, r3, #1
 801c94e:	6179      	str	r1, [r7, #20]
 801c950:	7812      	ldrb	r2, [r2, #0]
 801c952:	701a      	strb	r2, [r3, #0]
    while (size--) {
 801c954:	e9d7 3400 	ldrd	r3, r4, [r7]
 801c958:	f113 31ff 	adds.w	r1, r3, #4294967295	; 0xffffffff
 801c95c:	f144 32ff 	adc.w	r2, r4, #4294967295	; 0xffffffff
 801c960:	e9c7 1200 	strd	r1, r2, [r7]
 801c964:	4323      	orrs	r3, r4
 801c966:	d1ed      	bne.n	801c944 <cogui_memcpy+0x18>
    }

    return dest;    
 801c968:	68fb      	ldr	r3, [r7, #12]
}
 801c96a:	4618      	mov	r0, r3
 801c96c:	3718      	adds	r7, #24
 801c96e:	46bd      	mov	sp, r7
 801c970:	bc90      	pop	{r4, r7}
 801c972:	4770      	bx	lr

0801c974 <cogui_memmove>:
 * @param[out] *dest            Destination of moving.
 * @retval     *dest            Result after moving.
 *******************************************************************************
 */
void *cogui_memmove(void *dest, const void *src, co_uint64_t size)
{
 801c974:	b490      	push	{r4, r7}
 801c976:	b086      	sub	sp, #24
 801c978:	af00      	add	r7, sp, #0
 801c97a:	60f8      	str	r0, [r7, #12]
 801c97c:	60b9      	str	r1, [r7, #8]
 801c97e:	e9c7 2300 	strd	r2, r3, [r7]
    char *ds = (char *)dest;
 801c982:	68fb      	ldr	r3, [r7, #12]
 801c984:	617b      	str	r3, [r7, #20]
    char *ss = (char *)src;
 801c986:	68bb      	ldr	r3, [r7, #8]
 801c988:	613b      	str	r3, [r7, #16]

    /* if destination is on the back of source, and the size will not overwrite */
    if (ss < ds && ds < ss + size) {
 801c98a:	693a      	ldr	r2, [r7, #16]
 801c98c:	697b      	ldr	r3, [r7, #20]
 801c98e:	429a      	cmp	r2, r3
 801c990:	d22b      	bcs.n	801c9ea <cogui_memmove+0x76>
 801c992:	683b      	ldr	r3, [r7, #0]
 801c994:	693a      	ldr	r2, [r7, #16]
 801c996:	4413      	add	r3, r2
 801c998:	697a      	ldr	r2, [r7, #20]
 801c99a:	429a      	cmp	r2, r3
 801c99c:	d225      	bcs.n	801c9ea <cogui_memmove+0x76>
        ds += size;
 801c99e:	683b      	ldr	r3, [r7, #0]
 801c9a0:	697a      	ldr	r2, [r7, #20]
 801c9a2:	4413      	add	r3, r2
 801c9a4:	617b      	str	r3, [r7, #20]
        ss += size;
 801c9a6:	683b      	ldr	r3, [r7, #0]
 801c9a8:	693a      	ldr	r2, [r7, #16]
 801c9aa:	4413      	add	r3, r2
 801c9ac:	613b      	str	r3, [r7, #16]

        /* moving from the last slot*/
        while (size--) {
 801c9ae:	e009      	b.n	801c9c4 <cogui_memmove+0x50>
            *(--ds) = *(--ss);
 801c9b0:	693b      	ldr	r3, [r7, #16]
 801c9b2:	3b01      	subs	r3, #1
 801c9b4:	613b      	str	r3, [r7, #16]
 801c9b6:	697b      	ldr	r3, [r7, #20]
 801c9b8:	3b01      	subs	r3, #1
 801c9ba:	617b      	str	r3, [r7, #20]
 801c9bc:	693b      	ldr	r3, [r7, #16]
 801c9be:	781a      	ldrb	r2, [r3, #0]
 801c9c0:	697b      	ldr	r3, [r7, #20]
 801c9c2:	701a      	strb	r2, [r3, #0]
        while (size--) {
 801c9c4:	e9d7 3400 	ldrd	r3, r4, [r7]
 801c9c8:	f113 31ff 	adds.w	r1, r3, #4294967295	; 0xffffffff
 801c9cc:	f144 32ff 	adc.w	r2, r4, #4294967295	; 0xffffffff
 801c9d0:	e9c7 1200 	strd	r1, r2, [r7]
 801c9d4:	4323      	orrs	r3, r4
 801c9d6:	d1eb      	bne.n	801c9b0 <cogui_memmove+0x3c>
    if (ss < ds && ds < ss + size) {
 801c9d8:	e011      	b.n	801c9fe <cogui_memmove+0x8a>
    }
    else {

        /* moving from the first slot */
        while (size--) {
            *ds++ = *ss++;
 801c9da:	693a      	ldr	r2, [r7, #16]
 801c9dc:	1c53      	adds	r3, r2, #1
 801c9de:	613b      	str	r3, [r7, #16]
 801c9e0:	697b      	ldr	r3, [r7, #20]
 801c9e2:	1c59      	adds	r1, r3, #1
 801c9e4:	6179      	str	r1, [r7, #20]
 801c9e6:	7812      	ldrb	r2, [r2, #0]
 801c9e8:	701a      	strb	r2, [r3, #0]
        while (size--) {
 801c9ea:	e9d7 3400 	ldrd	r3, r4, [r7]
 801c9ee:	f113 31ff 	adds.w	r1, r3, #4294967295	; 0xffffffff
 801c9f2:	f144 32ff 	adc.w	r2, r4, #4294967295	; 0xffffffff
 801c9f6:	e9c7 1200 	strd	r1, r2, [r7]
 801c9fa:	4323      	orrs	r3, r4
 801c9fc:	d1ed      	bne.n	801c9da <cogui_memmove+0x66>
        }
    }

    return dest;
 801c9fe:	68fb      	ldr	r3, [r7, #12]
}
 801ca00:	4618      	mov	r0, r3
 801ca02:	3718      	adds	r7, #24
 801ca04:	46bd      	mov	sp, r7
 801ca06:	bc90      	pop	{r4, r7}
 801ca08:	4770      	bx	lr

0801ca0a <cogui_memcmp>:
 * @param[out] None
 * @retval     res              Value of first different slot.
 *******************************************************************************
 */
co_int32_t cogui_memcmp(const void *buf1, const void *buf2, co_uint64_t size)
{
 801ca0a:	b490      	push	{r4, r7}
 801ca0c:	b088      	sub	sp, #32
 801ca0e:	af00      	add	r7, sp, #0
 801ca10:	60f8      	str	r0, [r7, #12]
 801ca12:	60b9      	str	r1, [r7, #8]
 801ca14:	e9c7 2300 	strd	r2, r3, [r7]
    const unsigned char *s1, *s2;
    int res = 0;
 801ca18:	2300      	movs	r3, #0
 801ca1a:	617b      	str	r3, [r7, #20]

    for (s1 = (const unsigned char *)buf1, s2 = (const unsigned char *)buf2; size > 0; ++s1, ++s2, --size) {
 801ca1c:	68fb      	ldr	r3, [r7, #12]
 801ca1e:	61fb      	str	r3, [r7, #28]
 801ca20:	68bb      	ldr	r3, [r7, #8]
 801ca22:	61bb      	str	r3, [r7, #24]
 801ca24:	e017      	b.n	801ca56 <cogui_memcmp+0x4c>

        /* if different is occurred */
        if ((res = *s1 - *s2) != 0) {
 801ca26:	69fb      	ldr	r3, [r7, #28]
 801ca28:	781b      	ldrb	r3, [r3, #0]
 801ca2a:	461a      	mov	r2, r3
 801ca2c:	69bb      	ldr	r3, [r7, #24]
 801ca2e:	781b      	ldrb	r3, [r3, #0]
 801ca30:	1ad3      	subs	r3, r2, r3
 801ca32:	617b      	str	r3, [r7, #20]
 801ca34:	697b      	ldr	r3, [r7, #20]
 801ca36:	2b00      	cmp	r3, #0
 801ca38:	d112      	bne.n	801ca60 <cogui_memcmp+0x56>
    for (s1 = (const unsigned char *)buf1, s2 = (const unsigned char *)buf2; size > 0; ++s1, ++s2, --size) {
 801ca3a:	69fb      	ldr	r3, [r7, #28]
 801ca3c:	3301      	adds	r3, #1
 801ca3e:	61fb      	str	r3, [r7, #28]
 801ca40:	69bb      	ldr	r3, [r7, #24]
 801ca42:	3301      	adds	r3, #1
 801ca44:	61bb      	str	r3, [r7, #24]
 801ca46:	e9d7 3400 	ldrd	r3, r4, [r7]
 801ca4a:	f113 31ff 	adds.w	r1, r3, #4294967295	; 0xffffffff
 801ca4e:	f144 32ff 	adc.w	r2, r4, #4294967295	; 0xffffffff
 801ca52:	e9c7 1200 	strd	r1, r2, [r7]
 801ca56:	e9d7 3400 	ldrd	r3, r4, [r7]
 801ca5a:	4323      	orrs	r3, r4
 801ca5c:	d1e3      	bne.n	801ca26 <cogui_memcmp+0x1c>
 801ca5e:	e000      	b.n	801ca62 <cogui_memcmp+0x58>
            break;
 801ca60:	bf00      	nop
        }
    }
     
    return res;
 801ca62:	697b      	ldr	r3, [r7, #20]
}
 801ca64:	4618      	mov	r0, r3
 801ca66:	3720      	adds	r7, #32
 801ca68:	46bd      	mov	sp, r7
 801ca6a:	bc90      	pop	{r4, r7}
 801ca6c:	4770      	bx	lr

0801ca6e <cogui_strstr>:
 * @retval     res              Where we first find the substring.
 * @retval     Co_NULL          If we found nothing.
 *******************************************************************************
 */
char *cogui_strstr(const char *src, const char *tar)
{
 801ca6e:	b590      	push	{r4, r7, lr}
 801ca70:	b085      	sub	sp, #20
 801ca72:	af00      	add	r7, sp, #0
 801ca74:	6078      	str	r0, [r7, #4]
 801ca76:	6039      	str	r1, [r7, #0]
    int ls, lt;

    /* if target is NULL, just return the start point of source */
    lt = cogui_strlen(src);
 801ca78:	6878      	ldr	r0, [r7, #4]
 801ca7a:	f000 f82c 	bl	801cad6 <cogui_strlen>
 801ca7e:	4603      	mov	r3, r0
 801ca80:	460c      	mov	r4, r1
 801ca82:	60bb      	str	r3, [r7, #8]
    if (!lt) {
 801ca84:	68bb      	ldr	r3, [r7, #8]
 801ca86:	2b00      	cmp	r3, #0
 801ca88:	d101      	bne.n	801ca8e <cogui_strstr+0x20>
        return (char *)src;
 801ca8a:	687b      	ldr	r3, [r7, #4]
 801ca8c:	e01f      	b.n	801cace <cogui_strstr+0x60>
    }

    /* only if target's length is shorten then source's length should search */
    ls = cogui_strlen(tar);
 801ca8e:	6838      	ldr	r0, [r7, #0]
 801ca90:	f000 f821 	bl	801cad6 <cogui_strlen>
 801ca94:	4603      	mov	r3, r0
 801ca96:	460c      	mov	r4, r1
 801ca98:	60fb      	str	r3, [r7, #12]
    while (ls >= lt) {
 801ca9a:	e013      	b.n	801cac4 <cogui_strstr+0x56>
        ls--;
 801ca9c:	68fb      	ldr	r3, [r7, #12]
 801ca9e:	3b01      	subs	r3, #1
 801caa0:	60fb      	str	r3, [r7, #12]

        /* if we found one, return occurred point */
        if (!cogui_memcmp(src, tar, lt)) {
 801caa2:	68bb      	ldr	r3, [r7, #8]
 801caa4:	ea4f 74e3 	mov.w	r4, r3, asr #31
 801caa8:	461a      	mov	r2, r3
 801caaa:	4623      	mov	r3, r4
 801caac:	6839      	ldr	r1, [r7, #0]
 801caae:	6878      	ldr	r0, [r7, #4]
 801cab0:	f7ff ffab 	bl	801ca0a <cogui_memcmp>
 801cab4:	4603      	mov	r3, r0
 801cab6:	2b00      	cmp	r3, #0
 801cab8:	d101      	bne.n	801cabe <cogui_strstr+0x50>
            return (char *)src;
 801caba:	687b      	ldr	r3, [r7, #4]
 801cabc:	e007      	b.n	801cace <cogui_strstr+0x60>
        }

        src++;
 801cabe:	687b      	ldr	r3, [r7, #4]
 801cac0:	3301      	adds	r3, #1
 801cac2:	607b      	str	r3, [r7, #4]
    while (ls >= lt) {
 801cac4:	68fa      	ldr	r2, [r7, #12]
 801cac6:	68bb      	ldr	r3, [r7, #8]
 801cac8:	429a      	cmp	r2, r3
 801caca:	dae7      	bge.n	801ca9c <cogui_strstr+0x2e>
    }     

    /* if we can't find substring, return Co_NULL */
    return Co_NULL;
 801cacc:	2300      	movs	r3, #0
}
 801cace:	4618      	mov	r0, r3
 801cad0:	3714      	adds	r7, #20
 801cad2:	46bd      	mov	sp, r7
 801cad4:	bd90      	pop	{r4, r7, pc}

0801cad6 <cogui_strlen>:
 * @param[out] None
 * @retval     length    Result of string length. 
 *******************************************************************************
 */
co_uint64_t cogui_strlen(const char *str)
{
 801cad6:	b490      	push	{r4, r7}
 801cad8:	b084      	sub	sp, #16
 801cada:	af00      	add	r7, sp, #0
 801cadc:	6078      	str	r0, [r7, #4]
    const char *s;

    /* goto the end of the string */
    for (s = str; *s != '\0'; ++s) {
 801cade:	687b      	ldr	r3, [r7, #4]
 801cae0:	60fb      	str	r3, [r7, #12]
 801cae2:	e002      	b.n	801caea <cogui_strlen+0x14>
 801cae4:	68fb      	ldr	r3, [r7, #12]
 801cae6:	3301      	adds	r3, #1
 801cae8:	60fb      	str	r3, [r7, #12]
 801caea:	68fb      	ldr	r3, [r7, #12]
 801caec:	781b      	ldrb	r3, [r3, #0]
 801caee:	2b00      	cmp	r3, #0
 801caf0:	d1f8      	bne.n	801cae4 <cogui_strlen+0xe>
        /* passing */
    }
    
    /* return memory address's differece */
    return s - str;
 801caf2:	68fa      	ldr	r2, [r7, #12]
 801caf4:	687b      	ldr	r3, [r7, #4]
 801caf6:	1ad3      	subs	r3, r2, r3
 801caf8:	ea4f 74e3 	mov.w	r4, r3, asr #31
}
 801cafc:	4618      	mov	r0, r3
 801cafe:	4621      	mov	r1, r4
 801cb00:	3710      	adds	r7, #16
 801cb02:	46bd      	mov	sp, r7
 801cb04:	bc90      	pop	{r4, r7}
 801cb06:	4770      	bx	lr

0801cb08 <cogui_strdup>:
 * @param[out] None
 * @retval     *tmp      Result of new string pointer.
 *******************************************************************************
 */
char *cogui_strdup(const char *str)
{   
 801cb08:	b590      	push	{r4, r7, lr}
 801cb0a:	b087      	sub	sp, #28
 801cb0c:	af00      	add	r7, sp, #0
 801cb0e:	6078      	str	r0, [r7, #4]
    /* allocate a memory for duplicate */
    co_uint64_t len = cogui_strlen(str) + 1; /* need to plus one for '/0' */
 801cb10:	6878      	ldr	r0, [r7, #4]
 801cb12:	f7ff ffe0 	bl	801cad6 <cogui_strlen>
 801cb16:	460a      	mov	r2, r1
 801cb18:	4601      	mov	r1, r0
 801cb1a:	1c4b      	adds	r3, r1, #1
 801cb1c:	f142 0400 	adc.w	r4, r2, #0
 801cb20:	e9c7 3404 	strd	r3, r4, [r7, #16]
    char *tmp =  (char *)cogui_malloc(len);
 801cb24:	693b      	ldr	r3, [r7, #16]
 801cb26:	4618      	mov	r0, r3
 801cb28:	f7ff fdde 	bl	801c6e8 <cogui_malloc>
 801cb2c:	60f8      	str	r0, [r7, #12]

    /* if allocate failed, return Co_NULL */
    if (tmp == Co_NULL) {
 801cb2e:	68fb      	ldr	r3, [r7, #12]
 801cb30:	2b00      	cmp	r3, #0
 801cb32:	d101      	bne.n	801cb38 <cogui_strdup+0x30>
        return tmp;
 801cb34:	68fb      	ldr	r3, [r7, #12]
 801cb36:	e006      	b.n	801cb46 <cogui_strdup+0x3e>
    }

    /* using cogui_memmove to finish the work */
    cogui_memmove(tmp, str, len);
 801cb38:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 801cb3c:	6879      	ldr	r1, [r7, #4]
 801cb3e:	68f8      	ldr	r0, [r7, #12]
 801cb40:	f7ff ff18 	bl	801c974 <cogui_memmove>

    return tmp;
 801cb44:	68fb      	ldr	r3, [r7, #12]
}
 801cb46:	4618      	mov	r0, r3
 801cb48:	371c      	adds	r7, #28
 801cb4a:	46bd      	mov	sp, r7
 801cb4c:	bd90      	pop	{r4, r7, pc}

0801cb4e <cogui_strncmp>:
 * @retval     val        Value of two strings difference on first occurred.
 * @retval     0          Return 0 if two strings are equal.
 *******************************************************************************
 */
co_int32_t cogui_strncmp(const char *str1, const char *str2, co_uint64_t len)
{
 801cb4e:	b490      	push	{r4, r7}
 801cb50:	b084      	sub	sp, #16
 801cb52:	af00      	add	r7, sp, #0
 801cb54:	60f8      	str	r0, [r7, #12]
 801cb56:	60b9      	str	r1, [r7, #8]
 801cb58:	e9c7 2300 	strd	r2, r3, [r7]
    /* if two strings value are different or out of range, will break this loop */
    for (; *str1 && *str1 == *str2 && len; str1++, str2++, len--) {
 801cb5c:	e00d      	b.n	801cb7a <cogui_strncmp+0x2c>
 801cb5e:	68fb      	ldr	r3, [r7, #12]
 801cb60:	3301      	adds	r3, #1
 801cb62:	60fb      	str	r3, [r7, #12]
 801cb64:	68bb      	ldr	r3, [r7, #8]
 801cb66:	3301      	adds	r3, #1
 801cb68:	60bb      	str	r3, [r7, #8]
 801cb6a:	e9d7 3400 	ldrd	r3, r4, [r7]
 801cb6e:	f113 31ff 	adds.w	r1, r3, #4294967295	; 0xffffffff
 801cb72:	f144 32ff 	adc.w	r2, r4, #4294967295	; 0xffffffff
 801cb76:	e9c7 1200 	strd	r1, r2, [r7]
 801cb7a:	68fb      	ldr	r3, [r7, #12]
 801cb7c:	781b      	ldrb	r3, [r3, #0]
 801cb7e:	2b00      	cmp	r3, #0
 801cb80:	d009      	beq.n	801cb96 <cogui_strncmp+0x48>
 801cb82:	68fb      	ldr	r3, [r7, #12]
 801cb84:	781a      	ldrb	r2, [r3, #0]
 801cb86:	68bb      	ldr	r3, [r7, #8]
 801cb88:	781b      	ldrb	r3, [r3, #0]
 801cb8a:	429a      	cmp	r2, r3
 801cb8c:	d103      	bne.n	801cb96 <cogui_strncmp+0x48>
 801cb8e:	e9d7 3400 	ldrd	r3, r4, [r7]
 801cb92:	4323      	orrs	r3, r4
 801cb94:	d1e3      	bne.n	801cb5e <cogui_strncmp+0x10>
        /* passing */
    }

    /* return differece of two strings value in current slot */
    return (*str1 - *str2);
 801cb96:	68fb      	ldr	r3, [r7, #12]
 801cb98:	781b      	ldrb	r3, [r3, #0]
 801cb9a:	461a      	mov	r2, r3
 801cb9c:	68bb      	ldr	r3, [r7, #8]
 801cb9e:	781b      	ldrb	r3, [r3, #0]
 801cba0:	1ad3      	subs	r3, r2, r3
}
 801cba2:	4618      	mov	r0, r3
 801cba4:	3710      	adds	r7, #16
 801cba6:	46bd      	mov	sp, r7
 801cba8:	bc90      	pop	{r4, r7}
 801cbaa:	4770      	bx	lr

0801cbac <cogui_strcmp>:
 * @retval     val        Value of two strings difference on first occurred.
 * @retval     0          Return 0 if two strings are equal.
 *******************************************************************************
 */
co_int32_t cogui_strcmp(const char *str1, const char *str2)
{
 801cbac:	b480      	push	{r7}
 801cbae:	b083      	sub	sp, #12
 801cbb0:	af00      	add	r7, sp, #0
 801cbb2:	6078      	str	r0, [r7, #4]
 801cbb4:	6039      	str	r1, [r7, #0]
    /* if two strings value are different, will break this loop */
    for (; *str1 && *str1 == *str2; str1++, str2++) {
 801cbb6:	e005      	b.n	801cbc4 <cogui_strcmp+0x18>
 801cbb8:	687b      	ldr	r3, [r7, #4]
 801cbba:	3301      	adds	r3, #1
 801cbbc:	607b      	str	r3, [r7, #4]
 801cbbe:	683b      	ldr	r3, [r7, #0]
 801cbc0:	3301      	adds	r3, #1
 801cbc2:	603b      	str	r3, [r7, #0]
 801cbc4:	687b      	ldr	r3, [r7, #4]
 801cbc6:	781b      	ldrb	r3, [r3, #0]
 801cbc8:	2b00      	cmp	r3, #0
 801cbca:	d005      	beq.n	801cbd8 <cogui_strcmp+0x2c>
 801cbcc:	687b      	ldr	r3, [r7, #4]
 801cbce:	781a      	ldrb	r2, [r3, #0]
 801cbd0:	683b      	ldr	r3, [r7, #0]
 801cbd2:	781b      	ldrb	r3, [r3, #0]
 801cbd4:	429a      	cmp	r2, r3
 801cbd6:	d0ef      	beq.n	801cbb8 <cogui_strcmp+0xc>
        /* passing */
    }

    /* return differece of two strings value in current slot */
    return (*str1 - *str2);
 801cbd8:	687b      	ldr	r3, [r7, #4]
 801cbda:	781b      	ldrb	r3, [r3, #0]
 801cbdc:	461a      	mov	r2, r3
 801cbde:	683b      	ldr	r3, [r7, #0]
 801cbe0:	781b      	ldrb	r3, [r3, #0]
 801cbe2:	1ad3      	subs	r3, r2, r3
}
 801cbe4:	4618      	mov	r0, r3
 801cbe6:	370c      	adds	r7, #12
 801cbe8:	46bd      	mov	sp, r7
 801cbea:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cbee:	4770      	bx	lr

0801cbf0 <cogui_pow>:
 * @param[out] None
 * @retval     sum      Result of x power by y. 
 *******************************************************************************
 */
co_uint64_t cogui_pow(co_int32_t base, co_int32_t exp)
{
 801cbf0:	b490      	push	{r4, r7}
 801cbf2:	b084      	sub	sp, #16
 801cbf4:	af00      	add	r7, sp, #0
 801cbf6:	6078      	str	r0, [r7, #4]
 801cbf8:	6039      	str	r1, [r7, #0]
    co_uint64_t sum = 1;
 801cbfa:	f04f 0301 	mov.w	r3, #1
 801cbfe:	f04f 0400 	mov.w	r4, #0
 801cc02:	e9c7 3402 	strd	r3, r4, [r7, #8]

    /* multiplicative base */
    while (exp--)
 801cc06:	e012      	b.n	801cc2e <cogui_pow+0x3e>
        sum *= base;
 801cc08:	687b      	ldr	r3, [r7, #4]
 801cc0a:	ea4f 74e3 	mov.w	r4, r3, asr #31
 801cc0e:	68fa      	ldr	r2, [r7, #12]
 801cc10:	fb03 f102 	mul.w	r1, r3, r2
 801cc14:	68ba      	ldr	r2, [r7, #8]
 801cc16:	fb04 f202 	mul.w	r2, r4, r2
 801cc1a:	440a      	add	r2, r1
 801cc1c:	68b9      	ldr	r1, [r7, #8]
 801cc1e:	fba1 3403 	umull	r3, r4, r1, r3
 801cc22:	4422      	add	r2, r4
 801cc24:	4614      	mov	r4, r2
 801cc26:	e9c7 3402 	strd	r3, r4, [r7, #8]
 801cc2a:	e9c7 3402 	strd	r3, r4, [r7, #8]
    while (exp--)
 801cc2e:	683b      	ldr	r3, [r7, #0]
 801cc30:	1e5a      	subs	r2, r3, #1
 801cc32:	603a      	str	r2, [r7, #0]
 801cc34:	2b00      	cmp	r3, #0
 801cc36:	d1e7      	bne.n	801cc08 <cogui_pow+0x18>

    return sum;
 801cc38:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
}
 801cc3c:	4618      	mov	r0, r3
 801cc3e:	4621      	mov	r1, r4
 801cc40:	3710      	adds	r7, #16
 801cc42:	46bd      	mov	sp, r7
 801cc44:	bc90      	pop	{r4, r7}
 801cc46:	4770      	bx	lr

0801cc48 <cogui_itoa>:
 * @param[out] *ss      Transform result.
 * @retval     None
 *******************************************************************************
 */
void cogui_itoa(co_int16_t n, char *ss)
{
 801cc48:	b480      	push	{r7}
 801cc4a:	b08b      	sub	sp, #44	; 0x2c
 801cc4c:	af00      	add	r7, sp, #0
 801cc4e:	4603      	mov	r3, r0
 801cc50:	6039      	str	r1, [r7, #0]
 801cc52:	80fb      	strh	r3, [r7, #6]
    int i, j, sign, k;
    char s[10];

    /* determine the signed */
    if((sign=n)<0)
 801cc54:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801cc58:	61bb      	str	r3, [r7, #24]
 801cc5a:	69bb      	ldr	r3, [r7, #24]
 801cc5c:	2b00      	cmp	r3, #0
 801cc5e:	da03      	bge.n	801cc68 <cogui_itoa+0x20>
        n=-n;
 801cc60:	88fb      	ldrh	r3, [r7, #6]
 801cc62:	425b      	negs	r3, r3
 801cc64:	b29b      	uxth	r3, r3
 801cc66:	80fb      	strh	r3, [r7, #6]

    i=0;
 801cc68:	2300      	movs	r3, #0
 801cc6a:	627b      	str	r3, [r7, #36]	; 0x24
    do{
        s[i++]=n%10+'0';
 801cc6c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 801cc70:	4b2c      	ldr	r3, [pc, #176]	; (801cd24 <cogui_itoa+0xdc>)
 801cc72:	fb83 1302 	smull	r1, r3, r3, r2
 801cc76:	1099      	asrs	r1, r3, #2
 801cc78:	17d3      	asrs	r3, r2, #31
 801cc7a:	1ac9      	subs	r1, r1, r3
 801cc7c:	460b      	mov	r3, r1
 801cc7e:	009b      	lsls	r3, r3, #2
 801cc80:	440b      	add	r3, r1
 801cc82:	005b      	lsls	r3, r3, #1
 801cc84:	1ad3      	subs	r3, r2, r3
 801cc86:	b21b      	sxth	r3, r3
 801cc88:	b2da      	uxtb	r2, r3
 801cc8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cc8c:	1c59      	adds	r1, r3, #1
 801cc8e:	6279      	str	r1, [r7, #36]	; 0x24
 801cc90:	3230      	adds	r2, #48	; 0x30
 801cc92:	b2d2      	uxtb	r2, r2
 801cc94:	f107 0128 	add.w	r1, r7, #40	; 0x28
 801cc98:	440b      	add	r3, r1
 801cc9a:	f803 2c1c 	strb.w	r2, [r3, #-28]
    }while ((n/=10)>0);
 801cc9e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801cca2:	4a20      	ldr	r2, [pc, #128]	; (801cd24 <cogui_itoa+0xdc>)
 801cca4:	fb82 1203 	smull	r1, r2, r2, r3
 801cca8:	1092      	asrs	r2, r2, #2
 801ccaa:	17db      	asrs	r3, r3, #31
 801ccac:	1ad3      	subs	r3, r2, r3
 801ccae:	80fb      	strh	r3, [r7, #6]
 801ccb0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801ccb4:	2b00      	cmp	r3, #0
 801ccb6:	dcd9      	bgt.n	801cc6c <cogui_itoa+0x24>

    /* add '-' if it is negative */
    if(sign<0)
 801ccb8:	69bb      	ldr	r3, [r7, #24]
 801ccba:	2b00      	cmp	r3, #0
 801ccbc:	da08      	bge.n	801ccd0 <cogui_itoa+0x88>
        s[i++]='-';
 801ccbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ccc0:	1c5a      	adds	r2, r3, #1
 801ccc2:	627a      	str	r2, [r7, #36]	; 0x24
 801ccc4:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801ccc8:	4413      	add	r3, r2
 801ccca:	222d      	movs	r2, #45	; 0x2d
 801cccc:	f803 2c1c 	strb.w	r2, [r3, #-28]

    /* add end character to the end of the string */
    s[i]='\0';
 801ccd0:	f107 020c 	add.w	r2, r7, #12
 801ccd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ccd6:	4413      	add	r3, r2
 801ccd8:	2200      	movs	r2, #0
 801ccda:	701a      	strb	r2, [r3, #0]

    /* reverse the result to real string */
    for(j=i-1, k=0; j>=0; j--, k++) {
 801ccdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ccde:	3b01      	subs	r3, #1
 801cce0:	623b      	str	r3, [r7, #32]
 801cce2:	2300      	movs	r3, #0
 801cce4:	61fb      	str	r3, [r7, #28]
 801cce6:	e00e      	b.n	801cd06 <cogui_itoa+0xbe>
        ss[k] = s[j];
 801cce8:	69fb      	ldr	r3, [r7, #28]
 801ccea:	683a      	ldr	r2, [r7, #0]
 801ccec:	4413      	add	r3, r2
 801ccee:	f107 010c 	add.w	r1, r7, #12
 801ccf2:	6a3a      	ldr	r2, [r7, #32]
 801ccf4:	440a      	add	r2, r1
 801ccf6:	7812      	ldrb	r2, [r2, #0]
 801ccf8:	701a      	strb	r2, [r3, #0]
    for(j=i-1, k=0; j>=0; j--, k++) {
 801ccfa:	6a3b      	ldr	r3, [r7, #32]
 801ccfc:	3b01      	subs	r3, #1
 801ccfe:	623b      	str	r3, [r7, #32]
 801cd00:	69fb      	ldr	r3, [r7, #28]
 801cd02:	3301      	adds	r3, #1
 801cd04:	61fb      	str	r3, [r7, #28]
 801cd06:	6a3b      	ldr	r3, [r7, #32]
 801cd08:	2b00      	cmp	r3, #0
 801cd0a:	daed      	bge.n	801cce8 <cogui_itoa+0xa0>
    }

    /* add end character to the end of the string */
    ss[k]='\0';
 801cd0c:	69fb      	ldr	r3, [r7, #28]
 801cd0e:	683a      	ldr	r2, [r7, #0]
 801cd10:	4413      	add	r3, r2
 801cd12:	2200      	movs	r2, #0
 801cd14:	701a      	strb	r2, [r3, #0]
}
 801cd16:	bf00      	nop
 801cd18:	372c      	adds	r7, #44	; 0x2c
 801cd1a:	46bd      	mov	sp, r7
 801cd1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cd20:	4770      	bx	lr
 801cd22:	bf00      	nop
 801cd24:	66666667 	.word	0x66666667

0801cd28 <cogui_printf>:
 * @retval     res     How long we print.
 *******************************************************************************
 */
#ifdef COGUI_DEBUG_PRINT
int cogui_printf(const char *str,...)
{
 801cd28:	b40f      	push	{r0, r1, r2, r3}
 801cd2a:	b5b0      	push	{r4, r5, r7, lr}
 801cd2c:	b08a      	sub	sp, #40	; 0x28
 801cd2e:	af00      	add	r7, sp, #0
	va_list ap;
    int val,r_val,space=0,align=0;
 801cd30:	2300      	movs	r3, #0
 801cd32:	61fb      	str	r3, [r7, #28]
 801cd34:	2300      	movs	r3, #0
 801cd36:	61bb      	str	r3, [r7, #24]
	char count, ch;
	char *s = Co_NULL;
 801cd38:	2300      	movs	r3, #0
 801cd3a:	613b      	str	r3, [r7, #16]
    int res = 0;
 801cd3c:	2300      	movs	r3, #0
 801cd3e:	60fb      	str	r3, [r7, #12]

    va_start(ap,str);
 801cd40:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801cd44:	603b      	str	r3, [r7, #0]
    while ('\0' != *str) { 
 801cd46:	e1be      	b.n	801d0c6 <cogui_printf+0x39e>
        space=0;
 801cd48:	2300      	movs	r3, #0
 801cd4a:	61fb      	str	r3, [r7, #28]
        align=0;
 801cd4c:	2300      	movs	r3, #0
 801cd4e:	61bb      	str	r3, [r7, #24]
        switch (*str)
 801cd50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801cd52:	781b      	ldrb	r3, [r3, #0]
 801cd54:	2b0d      	cmp	r3, #13
 801cd56:	f000 81a4 	beq.w	801d0a2 <cogui_printf+0x37a>
 801cd5a:	2b25      	cmp	r3, #37	; 0x25
 801cd5c:	d003      	beq.n	801cd66 <cogui_printf+0x3e>
 801cd5e:	2b0a      	cmp	r3, #10
 801cd60:	f000 8198 	beq.w	801d094 <cogui_printf+0x36c>
 801cd64:	e1a4      	b.n	801d0b0 <cogui_printf+0x388>
        {
            case '%':
                str++;
 801cd66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801cd68:	3301      	adds	r3, #1
 801cd6a:	63bb      	str	r3, [r7, #56]	; 0x38

                /* if add a minor symbol before data type, align by left */
                if (*str == '-') {
 801cd6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801cd6e:	781b      	ldrb	r3, [r3, #0]
 801cd70:	2b2d      	cmp	r3, #45	; 0x2d
 801cd72:	d114      	bne.n	801cd9e <cogui_printf+0x76>
                    align = 1;
 801cd74:	2301      	movs	r3, #1
 801cd76:	61bb      	str	r3, [r7, #24]
                    str++;
 801cd78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801cd7a:	3301      	adds	r3, #1
 801cd7c:	63bb      	str	r3, [r7, #56]	; 0x38
                }

                /* transform output length to integer */
                while (*str >= '0' && *str <= '9') {
 801cd7e:	e00e      	b.n	801cd9e <cogui_printf+0x76>
                    space *= 10;
 801cd80:	69fa      	ldr	r2, [r7, #28]
 801cd82:	4613      	mov	r3, r2
 801cd84:	009b      	lsls	r3, r3, #2
 801cd86:	4413      	add	r3, r2
 801cd88:	005b      	lsls	r3, r3, #1
 801cd8a:	61fb      	str	r3, [r7, #28]
                    space += *str - '0';
 801cd8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801cd8e:	781b      	ldrb	r3, [r3, #0]
 801cd90:	3b30      	subs	r3, #48	; 0x30
 801cd92:	69fa      	ldr	r2, [r7, #28]
 801cd94:	4413      	add	r3, r2
 801cd96:	61fb      	str	r3, [r7, #28]
                    str++;
 801cd98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801cd9a:	3301      	adds	r3, #1
 801cd9c:	63bb      	str	r3, [r7, #56]	; 0x38
                while (*str >= '0' && *str <= '9') {
 801cd9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801cda0:	781b      	ldrb	r3, [r3, #0]
 801cda2:	2b2f      	cmp	r3, #47	; 0x2f
 801cda4:	d903      	bls.n	801cdae <cogui_printf+0x86>
 801cda6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801cda8:	781b      	ldrb	r3, [r3, #0]
 801cdaa:	2b39      	cmp	r3, #57	; 0x39
 801cdac:	d9e8      	bls.n	801cd80 <cogui_printf+0x58>
                }

                switch (*str) {
 801cdae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801cdb0:	781b      	ldrb	r3, [r3, #0]
 801cdb2:	3b63      	subs	r3, #99	; 0x63
 801cdb4:	2b15      	cmp	r3, #21
 801cdb6:	f200 8169 	bhi.w	801d08c <cogui_printf+0x364>
 801cdba:	a201      	add	r2, pc, #4	; (adr r2, 801cdc0 <cogui_printf+0x98>)
 801cdbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801cdc0:	0801d075 	.word	0x0801d075
 801cdc4:	0801ce19 	.word	0x0801ce19
 801cdc8:	0801d08d 	.word	0x0801d08d
 801cdcc:	0801d08d 	.word	0x0801d08d
 801cdd0:	0801d08d 	.word	0x0801d08d
 801cdd4:	0801d08d 	.word	0x0801d08d
 801cdd8:	0801d08d 	.word	0x0801d08d
 801cddc:	0801d08d 	.word	0x0801d08d
 801cde0:	0801d08d 	.word	0x0801d08d
 801cde4:	0801d08d 	.word	0x0801d08d
 801cde8:	0801d08d 	.word	0x0801d08d
 801cdec:	0801d08d 	.word	0x0801d08d
 801cdf0:	0801d08d 	.word	0x0801d08d
 801cdf4:	0801cee7 	.word	0x0801cee7
 801cdf8:	0801d08d 	.word	0x0801d08d
 801cdfc:	0801d08d 	.word	0x0801d08d
 801ce00:	0801cfc1 	.word	0x0801cfc1
 801ce04:	0801d08d 	.word	0x0801d08d
 801ce08:	0801d08d 	.word	0x0801d08d
 801ce0c:	0801d08d 	.word	0x0801d08d
 801ce10:	0801d08d 	.word	0x0801d08d
 801ce14:	0801ceed 	.word	0x0801ceed

                    /* handle integer var */
                    case 'd':
                        val = va_arg(ap, int); 
 801ce18:	683b      	ldr	r3, [r7, #0]
 801ce1a:	1d1a      	adds	r2, r3, #4
 801ce1c:	603a      	str	r2, [r7, #0]
 801ce1e:	681b      	ldr	r3, [r3, #0]
 801ce20:	627b      	str	r3, [r7, #36]	; 0x24
 			            
                        /* if val is negative or zero */
                        if (val < 0) {
 801ce22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ce24:	2b00      	cmp	r3, #0
 801ce26:	da06      	bge.n	801ce36 <cogui_printf+0x10e>
                            cogui_putchar('-');
 801ce28:	202d      	movs	r0, #45	; 0x2d
 801ce2a:	f7e4 fa3f 	bl	80012ac <stm_print_char>
                            val = 0 - val;
 801ce2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ce30:	425b      	negs	r3, r3
 801ce32:	627b      	str	r3, [r7, #36]	; 0x24
 801ce34:	e005      	b.n	801ce42 <cogui_printf+0x11a>
                        }
                        else if (val == 0) {
 801ce36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ce38:	2b00      	cmp	r3, #0
 801ce3a:	d102      	bne.n	801ce42 <cogui_printf+0x11a>
                            cogui_putchar('0');
 801ce3c:	2030      	movs	r0, #48	; 0x30
 801ce3e:	f7e4 fa35 	bl	80012ac <stm_print_char>
                        }

                        // TODO
                        if (val < space*10) {
 801ce42:	69fa      	ldr	r2, [r7, #28]
 801ce44:	4613      	mov	r3, r2
 801ce46:	009b      	lsls	r3, r3, #2
 801ce48:	4413      	add	r3, r2
 801ce4a:	005b      	lsls	r3, r3, #1

                        }
                        
                        r_val = val; 
 801ce4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ce4e:	623b      	str	r3, [r7, #32]
                        count = 0; 
 801ce50:	2300      	movs	r3, #0
 801ce52:	75fb      	strb	r3, [r7, #23]
						while (r_val) {
 801ce54:	e00a      	b.n	801ce6c <cogui_printf+0x144>
                            count++;
 801ce56:	7dfb      	ldrb	r3, [r7, #23]
 801ce58:	3301      	adds	r3, #1
 801ce5a:	75fb      	strb	r3, [r7, #23]
                            r_val /= 10;
 801ce5c:	6a3b      	ldr	r3, [r7, #32]
 801ce5e:	4aa0      	ldr	r2, [pc, #640]	; (801d0e0 <cogui_printf+0x3b8>)
 801ce60:	fb82 1203 	smull	r1, r2, r2, r3
 801ce64:	1092      	asrs	r2, r2, #2
 801ce66:	17db      	asrs	r3, r3, #31
 801ce68:	1ad3      	subs	r3, r2, r3
 801ce6a:	623b      	str	r3, [r7, #32]
						while (r_val) {
 801ce6c:	6a3b      	ldr	r3, [r7, #32]
 801ce6e:	2b00      	cmp	r3, #0
 801ce70:	d1f1      	bne.n	801ce56 <cogui_printf+0x12e>
                        }
						res += count;
 801ce72:	7dfb      	ldrb	r3, [r7, #23]
 801ce74:	68fa      	ldr	r2, [r7, #12]
 801ce76:	4413      	add	r3, r2
 801ce78:	60fb      	str	r3, [r7, #12]
                        r_val = val; 
 801ce7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ce7c:	623b      	str	r3, [r7, #32]
                        while (count) { 
 801ce7e:	e02e      	b.n	801cede <cogui_printf+0x1b6>
                            ch = r_val / cogui_pow(10,count - 1);
 801ce80:	6a3b      	ldr	r3, [r7, #32]
 801ce82:	461c      	mov	r4, r3
 801ce84:	ea4f 75e4 	mov.w	r5, r4, asr #31
 801ce88:	7dfb      	ldrb	r3, [r7, #23]
 801ce8a:	3b01      	subs	r3, #1
 801ce8c:	4619      	mov	r1, r3
 801ce8e:	200a      	movs	r0, #10
 801ce90:	f7ff feae 	bl	801cbf0 <cogui_pow>
 801ce94:	4602      	mov	r2, r0
 801ce96:	460b      	mov	r3, r1
 801ce98:	4620      	mov	r0, r4
 801ce9a:	4629      	mov	r1, r5
 801ce9c:	f001 fe78 	bl	801eb90 <__aeabi_uldivmod>
 801cea0:	4603      	mov	r3, r0
 801cea2:	460c      	mov	r4, r1
 801cea4:	71fb      	strb	r3, [r7, #7]
							r_val %= cogui_pow(10, count - 1);
 801cea6:	7dfb      	ldrb	r3, [r7, #23]
 801cea8:	3b01      	subs	r3, #1
 801ceaa:	4619      	mov	r1, r3
 801ceac:	200a      	movs	r0, #10
 801ceae:	f7ff fe9f 	bl	801cbf0 <cogui_pow>
 801ceb2:	4604      	mov	r4, r0
 801ceb4:	460d      	mov	r5, r1
 801ceb6:	6a3b      	ldr	r3, [r7, #32]
 801ceb8:	4618      	mov	r0, r3
 801ceba:	ea4f 71e0 	mov.w	r1, r0, asr #31
 801cebe:	4622      	mov	r2, r4
 801cec0:	462b      	mov	r3, r5
 801cec2:	f001 fe65 	bl	801eb90 <__aeabi_uldivmod>
 801cec6:	461c      	mov	r4, r3
 801cec8:	4613      	mov	r3, r2
 801ceca:	623b      	str	r3, [r7, #32]
							cogui_putchar(ch + '0');
 801cecc:	79fb      	ldrb	r3, [r7, #7]
 801cece:	3330      	adds	r3, #48	; 0x30
 801ced0:	b2db      	uxtb	r3, r3
 801ced2:	4618      	mov	r0, r3
 801ced4:	f7e4 f9ea 	bl	80012ac <stm_print_char>
							count--;
 801ced8:	7dfb      	ldrb	r3, [r7, #23]
 801ceda:	3b01      	subs	r3, #1
 801cedc:	75fb      	strb	r3, [r7, #23]
                        while (count) { 
 801cede:	7dfb      	ldrb	r3, [r7, #23]
 801cee0:	2b00      	cmp	r3, #0
 801cee2:	d1cd      	bne.n	801ce80 <cogui_printf+0x158>
						}
                        break;
 801cee4:	e0d5      	b.n	801d092 <cogui_printf+0x36a>
                    
                    /* case p to pointer */
                    case 'p':
                        /* first print a "0x" */
                        cogui_putstr("0x");
 801cee6:	487f      	ldr	r0, [pc, #508]	; (801d0e4 <cogui_printf+0x3bc>)
 801cee8:	f7e4 f9f8 	bl	80012dc <stm_print_string>
                        /* remain work will finish with case 'x' */
                        
                    /* handle integer var with hex output */
                    case 'x':
                        val = va_arg(ap, int);
 801ceec:	683b      	ldr	r3, [r7, #0]
 801ceee:	1d1a      	adds	r2, r3, #4
 801cef0:	603a      	str	r2, [r7, #0]
 801cef2:	681b      	ldr	r3, [r3, #0]
 801cef4:	627b      	str	r3, [r7, #36]	; 0x24

                        /* if val is negative or zero */
                        if (val<0) {
 801cef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cef8:	2b00      	cmp	r3, #0
 801cefa:	da06      	bge.n	801cf0a <cogui_printf+0x1e2>
                            cogui_putchar('-');
 801cefc:	202d      	movs	r0, #45	; 0x2d
 801cefe:	f7e4 f9d5 	bl	80012ac <stm_print_char>
                            val = 0 - val;
 801cf02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cf04:	425b      	negs	r3, r3
 801cf06:	627b      	str	r3, [r7, #36]	; 0x24
 801cf08:	e005      	b.n	801cf16 <cogui_printf+0x1ee>
                        }
                        else if (val == 0) {
 801cf0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cf0c:	2b00      	cmp	r3, #0
 801cf0e:	d102      	bne.n	801cf16 <cogui_printf+0x1ee>
                            cogui_putchar('0');
 801cf10:	2030      	movs	r0, #48	; 0x30
 801cf12:	f7e4 f9cb 	bl	80012ac <stm_print_char>
                        }
                        
                        r_val = val; 
 801cf16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cf18:	623b      	str	r3, [r7, #32]
                        count = 0;
 801cf1a:	2300      	movs	r3, #0
 801cf1c:	75fb      	strb	r3, [r7, #23]
						while (r_val) {
 801cf1e:	e008      	b.n	801cf32 <cogui_printf+0x20a>
                            count++;
 801cf20:	7dfb      	ldrb	r3, [r7, #23]
 801cf22:	3301      	adds	r3, #1
 801cf24:	75fb      	strb	r3, [r7, #23]
                            r_val /= 16; 
 801cf26:	6a3b      	ldr	r3, [r7, #32]
 801cf28:	2b00      	cmp	r3, #0
 801cf2a:	da00      	bge.n	801cf2e <cogui_printf+0x206>
 801cf2c:	330f      	adds	r3, #15
 801cf2e:	111b      	asrs	r3, r3, #4
 801cf30:	623b      	str	r3, [r7, #32]
						while (r_val) {
 801cf32:	6a3b      	ldr	r3, [r7, #32]
 801cf34:	2b00      	cmp	r3, #0
 801cf36:	d1f3      	bne.n	801cf20 <cogui_printf+0x1f8>
                        }
                        res += count;
 801cf38:	7dfb      	ldrb	r3, [r7, #23]
 801cf3a:	68fa      	ldr	r2, [r7, #12]
 801cf3c:	4413      	add	r3, r2
 801cf3e:	60fb      	str	r3, [r7, #12]
                        r_val = val; 
 801cf40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cf42:	623b      	str	r3, [r7, #32]
                        while(count) { 
 801cf44:	e038      	b.n	801cfb8 <cogui_printf+0x290>
                            ch = r_val / cogui_pow(16, count - 1);
 801cf46:	6a3b      	ldr	r3, [r7, #32]
 801cf48:	461c      	mov	r4, r3
 801cf4a:	ea4f 75e4 	mov.w	r5, r4, asr #31
 801cf4e:	7dfb      	ldrb	r3, [r7, #23]
 801cf50:	3b01      	subs	r3, #1
 801cf52:	4619      	mov	r1, r3
 801cf54:	2010      	movs	r0, #16
 801cf56:	f7ff fe4b 	bl	801cbf0 <cogui_pow>
 801cf5a:	4602      	mov	r2, r0
 801cf5c:	460b      	mov	r3, r1
 801cf5e:	4620      	mov	r0, r4
 801cf60:	4629      	mov	r1, r5
 801cf62:	f001 fe15 	bl	801eb90 <__aeabi_uldivmod>
 801cf66:	4603      	mov	r3, r0
 801cf68:	460c      	mov	r4, r1
 801cf6a:	71fb      	strb	r3, [r7, #7]
							r_val %= cogui_pow(16, count - 1);
 801cf6c:	7dfb      	ldrb	r3, [r7, #23]
 801cf6e:	3b01      	subs	r3, #1
 801cf70:	4619      	mov	r1, r3
 801cf72:	2010      	movs	r0, #16
 801cf74:	f7ff fe3c 	bl	801cbf0 <cogui_pow>
 801cf78:	4604      	mov	r4, r0
 801cf7a:	460d      	mov	r5, r1
 801cf7c:	6a3b      	ldr	r3, [r7, #32]
 801cf7e:	4618      	mov	r0, r3
 801cf80:	ea4f 71e0 	mov.w	r1, r0, asr #31
 801cf84:	4622      	mov	r2, r4
 801cf86:	462b      	mov	r3, r5
 801cf88:	f001 fe02 	bl	801eb90 <__aeabi_uldivmod>
 801cf8c:	461c      	mov	r4, r3
 801cf8e:	4613      	mov	r3, r2
 801cf90:	623b      	str	r3, [r7, #32]

							if (ch <= 9) {
 801cf92:	79fb      	ldrb	r3, [r7, #7]
 801cf94:	2b09      	cmp	r3, #9
 801cf96:	d806      	bhi.n	801cfa6 <cogui_printf+0x27e>
                                cogui_putchar(ch + '0');
 801cf98:	79fb      	ldrb	r3, [r7, #7]
 801cf9a:	3330      	adds	r3, #48	; 0x30
 801cf9c:	b2db      	uxtb	r3, r3
 801cf9e:	4618      	mov	r0, r3
 801cfa0:	f7e4 f984 	bl	80012ac <stm_print_char>
 801cfa4:	e005      	b.n	801cfb2 <cogui_printf+0x28a>
                            }
                            else {
								cogui_putchar(ch - 10 + 'a');
 801cfa6:	79fb      	ldrb	r3, [r7, #7]
 801cfa8:	3357      	adds	r3, #87	; 0x57
 801cfaa:	b2db      	uxtb	r3, r3
 801cfac:	4618      	mov	r0, r3
 801cfae:	f7e4 f97d 	bl	80012ac <stm_print_char>
                            }

							count--;
 801cfb2:	7dfb      	ldrb	r3, [r7, #23]
 801cfb4:	3b01      	subs	r3, #1
 801cfb6:	75fb      	strb	r3, [r7, #23]
                        while(count) { 
 801cfb8:	7dfb      	ldrb	r3, [r7, #23]
 801cfba:	2b00      	cmp	r3, #0
 801cfbc:	d1c3      	bne.n	801cf46 <cogui_printf+0x21e>
						}
						break;
 801cfbe:	e068      	b.n	801d092 <cogui_printf+0x36a>

                    /* handle string var */
                    case 's':
						s = va_arg(ap, char *);
 801cfc0:	683b      	ldr	r3, [r7, #0]
 801cfc2:	1d1a      	adds	r2, r3, #4
 801cfc4:	603a      	str	r2, [r7, #0]
 801cfc6:	681b      	ldr	r3, [r3, #0]
 801cfc8:	613b      	str	r3, [r7, #16]
                        int len = cogui_strlen(s);
 801cfca:	6938      	ldr	r0, [r7, #16]
 801cfcc:	f7ff fd83 	bl	801cad6 <cogui_strlen>
 801cfd0:	4603      	mov	r3, r0
 801cfd2:	460c      	mov	r4, r1
 801cfd4:	60bb      	str	r3, [r7, #8]
                        
                        if (len < space && !align) {
 801cfd6:	68ba      	ldr	r2, [r7, #8]
 801cfd8:	69fb      	ldr	r3, [r7, #28]
 801cfda:	429a      	cmp	r2, r3
 801cfdc:	da10      	bge.n	801d000 <cogui_printf+0x2d8>
 801cfde:	69bb      	ldr	r3, [r7, #24]
 801cfe0:	2b00      	cmp	r3, #0
 801cfe2:	d10d      	bne.n	801d000 <cogui_printf+0x2d8>

                            while (len < space) {
 801cfe4:	e008      	b.n	801cff8 <cogui_printf+0x2d0>
                                cogui_putchar(' ');
 801cfe6:	2020      	movs	r0, #32
 801cfe8:	f7e4 f960 	bl	80012ac <stm_print_char>
                                space --;
 801cfec:	69fb      	ldr	r3, [r7, #28]
 801cfee:	3b01      	subs	r3, #1
 801cff0:	61fb      	str	r3, [r7, #28]
                                res ++;
 801cff2:	68fb      	ldr	r3, [r7, #12]
 801cff4:	3301      	adds	r3, #1
 801cff6:	60fb      	str	r3, [r7, #12]
                            while (len < space) {
 801cff8:	68ba      	ldr	r2, [r7, #8]
 801cffa:	69fb      	ldr	r3, [r7, #28]
 801cffc:	429a      	cmp	r2, r3
 801cffe:	dbf2      	blt.n	801cfe6 <cogui_printf+0x2be>
                            }
                        }
                        
                        if (len > space && space) {
 801d000:	68ba      	ldr	r2, [r7, #8]
 801d002:	69fb      	ldr	r3, [r7, #28]
 801d004:	429a      	cmp	r2, r3
 801d006:	dd13      	ble.n	801d030 <cogui_printf+0x308>
 801d008:	69fb      	ldr	r3, [r7, #28]
 801d00a:	2b00      	cmp	r3, #0
 801d00c:	d010      	beq.n	801d030 <cogui_printf+0x308>
                            while (space --) {
 801d00e:	e009      	b.n	801d024 <cogui_printf+0x2fc>
                                cogui_putchar(*s++);
 801d010:	693b      	ldr	r3, [r7, #16]
 801d012:	1c5a      	adds	r2, r3, #1
 801d014:	613a      	str	r2, [r7, #16]
 801d016:	781b      	ldrb	r3, [r3, #0]
 801d018:	4618      	mov	r0, r3
 801d01a:	f7e4 f947 	bl	80012ac <stm_print_char>
                                res++;
 801d01e:	68fb      	ldr	r3, [r7, #12]
 801d020:	3301      	adds	r3, #1
 801d022:	60fb      	str	r3, [r7, #12]
                            while (space --) {
 801d024:	69fb      	ldr	r3, [r7, #28]
 801d026:	1e5a      	subs	r2, r3, #1
 801d028:	61fa      	str	r2, [r7, #28]
 801d02a:	2b00      	cmp	r3, #0
 801d02c:	d1f0      	bne.n	801d010 <cogui_printf+0x2e8>
                        if (len > space && space) {
 801d02e:	e00b      	b.n	801d048 <cogui_printf+0x320>
                            }
                        }
                        else {
                            cogui_putstr(s);
 801d030:	6938      	ldr	r0, [r7, #16]
 801d032:	f7e4 f953 	bl	80012dc <stm_print_string>
                            res += cogui_strlen(s);                                
 801d036:	6938      	ldr	r0, [r7, #16]
 801d038:	f7ff fd4d 	bl	801cad6 <cogui_strlen>
 801d03c:	4603      	mov	r3, r0
 801d03e:	460c      	mov	r4, r1
 801d040:	461a      	mov	r2, r3
 801d042:	68fb      	ldr	r3, [r7, #12]
 801d044:	4413      	add	r3, r2
 801d046:	60fb      	str	r3, [r7, #12]
                        }
						

                        if (len < space && align) {
 801d048:	68ba      	ldr	r2, [r7, #8]
 801d04a:	69fb      	ldr	r3, [r7, #28]
 801d04c:	429a      	cmp	r2, r3
 801d04e:	da1f      	bge.n	801d090 <cogui_printf+0x368>
 801d050:	69bb      	ldr	r3, [r7, #24]
 801d052:	2b00      	cmp	r3, #0
 801d054:	d01c      	beq.n	801d090 <cogui_printf+0x368>

                            while (len < space) {
 801d056:	e008      	b.n	801d06a <cogui_printf+0x342>
                                cogui_putchar(' ');
 801d058:	2020      	movs	r0, #32
 801d05a:	f7e4 f927 	bl	80012ac <stm_print_char>
                                space --;
 801d05e:	69fb      	ldr	r3, [r7, #28]
 801d060:	3b01      	subs	r3, #1
 801d062:	61fb      	str	r3, [r7, #28]
                                res ++;
 801d064:	68fb      	ldr	r3, [r7, #12]
 801d066:	3301      	adds	r3, #1
 801d068:	60fb      	str	r3, [r7, #12]
                            while (len < space) {
 801d06a:	68ba      	ldr	r2, [r7, #8]
 801d06c:	69fb      	ldr	r3, [r7, #28]
 801d06e:	429a      	cmp	r2, r3
 801d070:	dbf2      	blt.n	801d058 <cogui_printf+0x330>
                            }
                        }
						break;
 801d072:	e00d      	b.n	801d090 <cogui_printf+0x368>
					
                    /* handle character var */
                    case 'c':
                        cogui_putchar( (char)va_arg(ap, int ));
 801d074:	683b      	ldr	r3, [r7, #0]
 801d076:	1d1a      	adds	r2, r3, #4
 801d078:	603a      	str	r2, [r7, #0]
 801d07a:	681b      	ldr	r3, [r3, #0]
 801d07c:	b2db      	uxtb	r3, r3
 801d07e:	4618      	mov	r0, r3
 801d080:	f7e4 f914 	bl	80012ac <stm_print_char>
						res += 1;
 801d084:	68fb      	ldr	r3, [r7, #12]
 801d086:	3301      	adds	r3, #1
 801d088:	60fb      	str	r3, [r7, #12]
                        break;
 801d08a:	e002      	b.n	801d092 <cogui_printf+0x36a>

                    default:
						break;
 801d08c:	bf00      	nop
 801d08e:	e017      	b.n	801d0c0 <cogui_printf+0x398>
						break;
 801d090:	bf00      	nop
				}
				break;
 801d092:	e015      	b.n	801d0c0 <cogui_printf+0x398>
            
            /* handle escape character: newline */
            case '\n':
				cogui_putchar('\n');
 801d094:	200a      	movs	r0, #10
 801d096:	f7e4 f909 	bl	80012ac <stm_print_char>
				res += 1;
 801d09a:	68fb      	ldr	r3, [r7, #12]
 801d09c:	3301      	adds	r3, #1
 801d09e:	60fb      	str	r3, [r7, #12]
				break;
 801d0a0:	e00e      	b.n	801d0c0 <cogui_printf+0x398>
			
            /* handle escape character: return */
			case '\r':
				cogui_putchar('\r');
 801d0a2:	200d      	movs	r0, #13
 801d0a4:	f7e4 f902 	bl	80012ac <stm_print_char>
				res += 1;
 801d0a8:	68fb      	ldr	r3, [r7, #12]
 801d0aa:	3301      	adds	r3, #1
 801d0ac:	60fb      	str	r3, [r7, #12]
				break;
 801d0ae:	e007      	b.n	801d0c0 <cogui_printf+0x398>
			
            /* just output character */
			default:
				cogui_putchar(*str);
 801d0b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d0b2:	781b      	ldrb	r3, [r3, #0]
 801d0b4:	4618      	mov	r0, r3
 801d0b6:	f7e4 f8f9 	bl	80012ac <stm_print_char>
				res += 1;
 801d0ba:	68fb      	ldr	r3, [r7, #12]
 801d0bc:	3301      	adds	r3, #1
 801d0be:	60fb      	str	r3, [r7, #12]
		}
		str++;
 801d0c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d0c2:	3301      	adds	r3, #1
 801d0c4:	63bb      	str	r3, [r7, #56]	; 0x38
    while ('\0' != *str) { 
 801d0c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d0c8:	781b      	ldrb	r3, [r3, #0]
 801d0ca:	2b00      	cmp	r3, #0
 801d0cc:	f47f ae3c 	bne.w	801cd48 <cogui_printf+0x20>
    }
    va_end(ap);

	return res;
 801d0d0:	68fb      	ldr	r3, [r7, #12]
}
 801d0d2:	4618      	mov	r0, r3
 801d0d4:	3728      	adds	r7, #40	; 0x28
 801d0d6:	46bd      	mov	sp, r7
 801d0d8:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 801d0dc:	b004      	add	sp, #16
 801d0de:	4770      	bx	lr
 801d0e0:	66666667 	.word	0x66666667
 801d0e4:	08022f48 	.word	0x08022f48

0801d0e8 <cogui_assert_handler>:
 * @param[out] None
 * @retval     None
 *******************************************************************************
 */
void cogui_assert_handler(const char *ex_string, const char *func, U32 line)
{
 801d0e8:	b580      	push	{r7, lr}
 801d0ea:	b086      	sub	sp, #24
 801d0ec:	af00      	add	r7, sp, #0
 801d0ee:	60f8      	str	r0, [r7, #12]
 801d0f0:	60b9      	str	r1, [r7, #8]
 801d0f2:	607a      	str	r2, [r7, #4]
    /* output message to screen */
    cogui_assert_failed_page(ex_string, line, func);
 801d0f4:	687b      	ldr	r3, [r7, #4]
 801d0f6:	b29b      	uxth	r3, r3
 801d0f8:	68ba      	ldr	r2, [r7, #8]
 801d0fa:	4619      	mov	r1, r3
 801d0fc:	68f8      	ldr	r0, [r7, #12]
 801d0fe:	f001 fc91 	bl	801ea24 <cogui_assert_failed_page>

	volatile char dummy = 0;
 801d102:	2300      	movs	r3, #0
 801d104:	75fb      	strb	r3, [r7, #23]

    /* print error message */
	cogui_printf("(%s) assertion failed at function: %s, line number: %d.\r\n", ex_string, func, line);
 801d106:	687b      	ldr	r3, [r7, #4]
 801d108:	68ba      	ldr	r2, [r7, #8]
 801d10a:	68f9      	ldr	r1, [r7, #12]
 801d10c:	4805      	ldr	r0, [pc, #20]	; (801d124 <cogui_assert_handler+0x3c>)
 801d10e:	f7ff fe0b 	bl	801cd28 <cogui_printf>

    /* loop forever */
	while(dummy == 0)
 801d112:	bf00      	nop
 801d114:	7dfb      	ldrb	r3, [r7, #23]
 801d116:	b2db      	uxtb	r3, r3
 801d118:	2b00      	cmp	r3, #0
 801d11a:	d0fb      	beq.n	801d114 <cogui_assert_handler+0x2c>
	{
        /* panic */
	}
}
 801d11c:	bf00      	nop
 801d11e:	3718      	adds	r7, #24
 801d120:	46bd      	mov	sp, r7
 801d122:	bd80      	pop	{r7, pc}
 801d124:	08022f4c 	.word	0x08022f4c

0801d128 <cogui_title_create>:
 *             window contain a minimal button, close button and title
 *             name field.
 *******************************************************************************
 */
void cogui_title_create(cogui_window_t *win)
{
 801d128:	b590      	push	{r4, r7, lr}
 801d12a:	b087      	sub	sp, #28
 801d12c:	af02      	add	r7, sp, #8
 801d12e:	6078      	str	r0, [r7, #4]
    cogui_widget_t *close_btn = cogui_widget_create(win);
 801d130:	6878      	ldr	r0, [r7, #4]
 801d132:	f000 f8fd 	bl	801d330 <cogui_widget_create>
 801d136:	60f8      	str	r0, [r7, #12]
    cogui_widget_t  *mini_btn = cogui_widget_create(win);
 801d138:	6878      	ldr	r0, [r7, #4]
 801d13a:	f000 f8f9 	bl	801d330 <cogui_widget_create>
 801d13e:	60b8      	str	r0, [r7, #8]

    /* filled default color scheme for title */
    win->title->gc.foreground = default_title_foreground;
 801d140:	687b      	ldr	r3, [r7, #4]
 801d142:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801d144:	f649 43f3 	movw	r3, #40179	; 0x9cf3
 801d148:	f04f 0400 	mov.w	r4, #0
 801d14c:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
    win->title->gc.background = default_title_background;
 801d150:	687b      	ldr	r3, [r7, #4]
 801d152:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801d154:	f04f 0300 	mov.w	r3, #0
 801d158:	f04f 0400 	mov.w	r4, #0
 801d15c:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
    close_btn->gc.foreground  = default_button_foreground;
 801d160:	f244 2308 	movw	r3, #16904	; 0x4208
 801d164:	f04f 0400 	mov.w	r4, #0
 801d168:	68fa      	ldr	r2, [r7, #12]
 801d16a:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
    mini_btn->gc.foreground   = default_button_foreground;
 801d16e:	f244 2308 	movw	r3, #16904	; 0x4208
 801d172:	f04f 0400 	mov.w	r4, #0
 801d176:	68ba      	ldr	r2, [r7, #8]
 801d178:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30

    /* enabled all three widgets */
    COGUI_WIDGET_ENABLE(win->title);
 801d17c:	687b      	ldr	r3, [r7, #4]
 801d17e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d180:	689a      	ldr	r2, [r3, #8]
 801d182:	687b      	ldr	r3, [r7, #4]
 801d184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d186:	f042 0201 	orr.w	r2, r2, #1
 801d18a:	609a      	str	r2, [r3, #8]
    COGUI_WIDGET_ENABLE(close_btn);
 801d18c:	68fb      	ldr	r3, [r7, #12]
 801d18e:	689b      	ldr	r3, [r3, #8]
 801d190:	f043 0201 	orr.w	r2, r3, #1
 801d194:	68fb      	ldr	r3, [r7, #12]
 801d196:	609a      	str	r2, [r3, #8]
    COGUI_WIDGET_ENABLE(mini_btn);
 801d198:	68bb      	ldr	r3, [r7, #8]
 801d19a:	689b      	ldr	r3, [r3, #8]
 801d19c:	f043 0201 	orr.w	r2, r3, #1
 801d1a0:	68bb      	ldr	r3, [r7, #8]
 801d1a2:	609a      	str	r2, [r3, #8]

    /* give this three widgets flags */
    win->title->flag |= COGUI_WIDGET_FLAG_TITLE | COGUI_WIDGET_FLAG_RECT | COGUI_WIDGET_FLAG_FILLED;
 801d1a4:	687b      	ldr	r3, [r7, #4]
 801d1a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d1a8:	689a      	ldr	r2, [r3, #8]
 801d1aa:	687b      	ldr	r3, [r7, #4]
 801d1ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d1ae:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 801d1b2:	609a      	str	r2, [r3, #8]
    close_btn->flag  |= COGUI_WIDGET_FLAG_TITLE;
 801d1b4:	68fb      	ldr	r3, [r7, #12]
 801d1b6:	689b      	ldr	r3, [r3, #8]
 801d1b8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 801d1bc:	68fb      	ldr	r3, [r7, #12]
 801d1be:	609a      	str	r2, [r3, #8]
    mini_btn->flag   |= COGUI_WIDGET_FLAG_TITLE;
 801d1c0:	68bb      	ldr	r3, [r7, #8]
 801d1c2:	689b      	ldr	r3, [r3, #8]
 801d1c4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 801d1c8:	68bb      	ldr	r3, [r7, #8]
 801d1ca:	609a      	str	r2, [r3, #8]

    /* set three widgets sizes */
    cogui_widget_set_rectangle(win->title, 65, 0, 240, COGUI_WINTITLE_HEIGHT);
 801d1cc:	687b      	ldr	r3, [r7, #4]
 801d1ce:	6a58      	ldr	r0, [r3, #36]	; 0x24
 801d1d0:	2328      	movs	r3, #40	; 0x28
 801d1d2:	9300      	str	r3, [sp, #0]
 801d1d4:	23f0      	movs	r3, #240	; 0xf0
 801d1d6:	2200      	movs	r2, #0
 801d1d8:	2141      	movs	r1, #65	; 0x41
 801d1da:	f000 fc10 	bl	801d9fe <cogui_widget_set_rectangle>
    cogui_widget_set_rectangle(close_btn, 8, 0, 20, 40);
 801d1de:	2328      	movs	r3, #40	; 0x28
 801d1e0:	9300      	str	r3, [sp, #0]
 801d1e2:	2314      	movs	r3, #20
 801d1e4:	2200      	movs	r2, #0
 801d1e6:	2108      	movs	r1, #8
 801d1e8:	68f8      	ldr	r0, [r7, #12]
 801d1ea:	f000 fc08 	bl	801d9fe <cogui_widget_set_rectangle>
    cogui_widget_set_rectangle(mini_btn, 32, 0, 20, 40);
 801d1ee:	2328      	movs	r3, #40	; 0x28
 801d1f0:	9300      	str	r3, [sp, #0]
 801d1f2:	2314      	movs	r3, #20
 801d1f4:	2200      	movs	r2, #0
 801d1f6:	2120      	movs	r1, #32
 801d1f8:	68b8      	ldr	r0, [r7, #8]
 801d1fa:	f000 fc00 	bl	801d9fe <cogui_widget_set_rectangle>

    /* set title font style */
    cogui_widget_set_text_align(win->title, COGUI_TEXT_ALIGN_LEFT|COGUI_TEXT_ALIGN_MIDDLE);
 801d1fe:	687b      	ldr	r3, [r7, #4]
 801d200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d202:	2111      	movs	r1, #17
 801d204:	4618      	mov	r0, r3
 801d206:	f000 fcdf 	bl	801dbc8 <cogui_widget_set_text_align>
    cogui_widget_set_font(win->title, &tm_font_16x26);
 801d20a:	687b      	ldr	r3, [r7, #4]
 801d20c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d20e:	4917      	ldr	r1, [pc, #92]	; (801d26c <cogui_title_create+0x144>)
 801d210:	4618      	mov	r0, r3
 801d212:	f000 fcb5 	bl	801db80 <cogui_widget_set_font>
    cogui_widget_set_text(win->title, win->title_name);
 801d216:	687b      	ldr	r3, [r7, #4]
 801d218:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801d21a:	687b      	ldr	r3, [r7, #4]
 801d21c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d21e:	4619      	mov	r1, r3
 801d220:	4610      	mov	r0, r2
 801d222:	f000 fced 	bl	801dc00 <cogui_widget_set_text>

    /* symbol "X" */
    cogui_widget_set_text_align(close_btn, COGUI_TEXT_ALIGN_CENTER|COGUI_TEXT_ALIGN_MIDDLE);
 801d226:	2114      	movs	r1, #20
 801d228:	68f8      	ldr	r0, [r7, #12]
 801d22a:	f000 fccd 	bl	801dbc8 <cogui_widget_set_text_align>
    cogui_widget_set_font(close_btn, &tm_symbol_16x16);
 801d22e:	4910      	ldr	r1, [pc, #64]	; (801d270 <cogui_title_create+0x148>)
 801d230:	68f8      	ldr	r0, [r7, #12]
 801d232:	f000 fca5 	bl	801db80 <cogui_widget_set_font>
    cogui_widget_set_text(close_btn, "!");
 801d236:	490f      	ldr	r1, [pc, #60]	; (801d274 <cogui_title_create+0x14c>)
 801d238:	68f8      	ldr	r0, [r7, #12]
 801d23a:	f000 fce1 	bl	801dc00 <cogui_widget_set_text>
    close_btn->gc.padding = COGUI_PADDING(0,2,0,0);
 801d23e:	68fa      	ldr	r2, [r7, #12]
 801d240:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 801d244:	f04f 0400 	mov.w	r4, #0
 801d248:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48

    /* symbol "-" */
    cogui_widget_set_text_align(mini_btn, COGUI_TEXT_ALIGN_CENTER|COGUI_TEXT_ALIGN_MIDDLE);
 801d24c:	2114      	movs	r1, #20
 801d24e:	68b8      	ldr	r0, [r7, #8]
 801d250:	f000 fcba 	bl	801dbc8 <cogui_widget_set_text_align>
    cogui_widget_set_font(mini_btn, &tm_symbol_16x16);
 801d254:	4906      	ldr	r1, [pc, #24]	; (801d270 <cogui_title_create+0x148>)
 801d256:	68b8      	ldr	r0, [r7, #8]
 801d258:	f000 fc92 	bl	801db80 <cogui_widget_set_font>
    cogui_widget_set_text(mini_btn, "\"");
 801d25c:	4906      	ldr	r1, [pc, #24]	; (801d278 <cogui_title_create+0x150>)
 801d25e:	68b8      	ldr	r0, [r7, #8]
 801d260:	f000 fcce 	bl	801dc00 <cogui_widget_set_text>
}
 801d264:	bf00      	nop
 801d266:	3714      	adds	r7, #20
 801d268:	46bd      	mov	sp, r7
 801d26a:	bd90      	pop	{r4, r7, pc}
 801d26c:	20000154 	.word	0x20000154
 801d270:	20000130 	.word	0x20000130
 801d274:	08022fd8 	.word	0x08022fd8
 801d278:	08022fdc 	.word	0x08022fdc

0801d27c <cogui_title_delete>:
 * @param[out] None
 * @retval     None 
 *******************************************************************************
 */
void cogui_title_delete(cogui_window_t *win)
{
 801d27c:	b580      	push	{r7, lr}
 801d27e:	b084      	sub	sp, #16
 801d280:	af00      	add	r7, sp, #0
 801d282:	6078      	str	r0, [r7, #4]
    /* delete two button */
    cogui_widget_t *close_btn = win->title->next;
 801d284:	687b      	ldr	r3, [r7, #4]
 801d286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d288:	681b      	ldr	r3, [r3, #0]
 801d28a:	60fb      	str	r3, [r7, #12]
    cogui_widget_t  *mini_btn = win->title->next->next;
 801d28c:	687b      	ldr	r3, [r7, #4]
 801d28e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d290:	681b      	ldr	r3, [r3, #0]
 801d292:	681b      	ldr	r3, [r3, #0]
 801d294:	60bb      	str	r3, [r7, #8]
    cogui_widget_delete(close_btn);
 801d296:	68f8      	ldr	r0, [r7, #12]
 801d298:	f000 f898 	bl	801d3cc <cogui_widget_delete>
    cogui_widget_delete(mini_btn);
 801d29c:	68b8      	ldr	r0, [r7, #8]
 801d29e:	f000 f895 	bl	801d3cc <cogui_widget_delete>

    /* title widget will delete at window deletion */
    COGUI_WIDGET_DISABLE(win->title);
 801d2a2:	687b      	ldr	r3, [r7, #4]
 801d2a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d2a6:	689a      	ldr	r2, [r3, #8]
 801d2a8:	687b      	ldr	r3, [r7, #4]
 801d2aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d2ac:	f022 0201 	bic.w	r2, r2, #1
 801d2b0:	609a      	str	r2, [r3, #8]
}
 801d2b2:	bf00      	nop
 801d2b4:	3710      	adds	r7, #16
 801d2b6:	46bd      	mov	sp, r7
 801d2b8:	bd80      	pop	{r7, pc}
 801d2ba:	bf00      	nop

0801d2bc <_cogui_widget_init>:
extern struct cogui_window *main_page;

StatusType cogui_widget_event_handler(cogui_widget_t *widget, struct cogui_event *event);

static void _cogui_widget_init(cogui_widget_t *widget)
{
 801d2bc:	b590      	push	{r4, r7, lr}
 801d2be:	b083      	sub	sp, #12
 801d2c0:	af00      	add	r7, sp, #0
 801d2c2:	6078      	str	r0, [r7, #4]
    cogui_memset(widget, 0, sizeof(cogui_widget_t));
 801d2c4:	f04f 0268 	mov.w	r2, #104	; 0x68
 801d2c8:	f04f 0300 	mov.w	r3, #0
 801d2cc:	2100      	movs	r1, #0
 801d2ce:	6878      	ldr	r0, [r7, #4]
 801d2d0:	f7ff fb0c 	bl	801c8ec <cogui_memset>

    /* init flag and type */
    widget->flag = COGUI_WIDGET_FLAG_INIT | COGUI_WIDGET_TYPE_INIT;
 801d2d4:	687b      	ldr	r3, [r7, #4]
 801d2d6:	2210      	movs	r2, #16
 801d2d8:	609a      	str	r2, [r3, #8]

    /* set default fore/background */
	widget->gc.foreground = default_foreground;
 801d2da:	4b11      	ldr	r3, [pc, #68]	; (801d320 <_cogui_widget_init+0x64>)
 801d2dc:	e9d3 3400 	ldrd	r3, r4, [r3]
 801d2e0:	687a      	ldr	r2, [r7, #4]
 801d2e2:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
	widget->gc.background = default_background;
 801d2e6:	4b0f      	ldr	r3, [pc, #60]	; (801d324 <_cogui_widget_init+0x68>)
 801d2e8:	e9d3 3400 	ldrd	r3, r4, [r3]
 801d2ec:	687a      	ldr	r2, [r7, #4]
 801d2ee:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
    widget->gc.font       = default_font;
 801d2f2:	4b0d      	ldr	r3, [pc, #52]	; (801d328 <_cogui_widget_init+0x6c>)
 801d2f4:	681a      	ldr	r2, [r3, #0]
 801d2f6:	687b      	ldr	r3, [r7, #4]
 801d2f8:	641a      	str	r2, [r3, #64]	; 0x40

    /* initial extent rectangle */
    COGUI_INIT_RECR(&widget->extent);
 801d2fa:	687b      	ldr	r3, [r7, #4]
 801d2fc:	2200      	movs	r2, #0
 801d2fe:	825a      	strh	r2, [r3, #18]
 801d300:	687b      	ldr	r3, [r7, #4]
 801d302:	2200      	movs	r2, #0
 801d304:	829a      	strh	r2, [r3, #20]
 801d306:	687b      	ldr	r3, [r7, #4]
 801d308:	2200      	movs	r2, #0
 801d30a:	82da      	strh	r2, [r3, #22]
 801d30c:	687b      	ldr	r3, [r7, #4]
 801d30e:	2200      	movs	r2, #0
 801d310:	831a      	strh	r2, [r3, #24]

    /* set event handler */
    widget->handler = cogui_widget_event_handler;
 801d312:	687b      	ldr	r3, [r7, #4]
 801d314:	4a05      	ldr	r2, [pc, #20]	; (801d32c <_cogui_widget_init+0x70>)
 801d316:	661a      	str	r2, [r3, #96]	; 0x60
}
 801d318:	bf00      	nop
 801d31a:	370c      	adds	r7, #12
 801d31c:	46bd      	mov	sp, r7
 801d31e:	bd90      	pop	{r4, r7, pc}
 801d320:	08022be8 	.word	0x08022be8
 801d324:	08022bf0 	.word	0x08022bf0
 801d328:	2000012c 	.word	0x2000012c
 801d32c:	0801e129 	.word	0x0801e129

0801d330 <cogui_widget_create>:

cogui_widget_t *cogui_widget_create(struct cogui_window *top)
{
 801d330:	b580      	push	{r7, lr}
 801d332:	b084      	sub	sp, #16
 801d334:	af00      	add	r7, sp, #0
 801d336:	6078      	str	r0, [r7, #4]
    cogui_widget_t *widget;

    COGUI_ASSERT(top != Co_NULL);
 801d338:	687b      	ldr	r3, [r7, #4]
 801d33a:	2b00      	cmp	r3, #0
 801d33c:	d104      	bne.n	801d348 <cogui_widget_create+0x18>
 801d33e:	222c      	movs	r2, #44	; 0x2c
 801d340:	491f      	ldr	r1, [pc, #124]	; (801d3c0 <cogui_widget_create+0x90>)
 801d342:	4820      	ldr	r0, [pc, #128]	; (801d3c4 <cogui_widget_create+0x94>)
 801d344:	f7ff fed0 	bl	801d0e8 <cogui_assert_handler>

    widget = cogui_malloc(sizeof(cogui_widget_t));
 801d348:	2068      	movs	r0, #104	; 0x68
 801d34a:	f7ff f9cd 	bl	801c6e8 <cogui_malloc>
 801d34e:	60f8      	str	r0, [r7, #12]
    if (widget == Co_NULL) {
 801d350:	68fb      	ldr	r3, [r7, #12]
 801d352:	2b00      	cmp	r3, #0
 801d354:	d101      	bne.n	801d35a <cogui_widget_create+0x2a>
        return Co_NULL;
 801d356:	2300      	movs	r3, #0
 801d358:	e02e      	b.n	801d3b8 <cogui_widget_create+0x88>
    }
    
    /* first initial structure data */
    _cogui_widget_init(widget);
 801d35a:	68f8      	ldr	r0, [r7, #12]
 801d35c:	f7ff ffae 	bl	801d2bc <_cogui_widget_init>

    /* set type to widget */
    widget->flag &= ~COGUI_WIDGET_TYPE_MASK;
 801d360:	68fb      	ldr	r3, [r7, #12]
 801d362:	689b      	ldr	r3, [r3, #8]
 801d364:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 801d368:	68fb      	ldr	r3, [r7, #12]
 801d36a:	609a      	str	r2, [r3, #8]
    widget->flag |= COGUI_WIDGET_TYPE_WIDGET;
 801d36c:	68fb      	ldr	r3, [r7, #12]
 801d36e:	689b      	ldr	r3, [r3, #8]
 801d370:	f043 0220 	orr.w	r2, r3, #32
 801d374:	68fb      	ldr	r3, [r7, #12]
 801d376:	609a      	str	r2, [r3, #8]

    /* create a dc engine */
    widget->dc_engine = cogui_dc_begin_drawing(widget);
 801d378:	68f8      	ldr	r0, [r7, #12]
 801d37a:	f7fe fb6f 	bl	801ba5c <cogui_dc_begin_drawing>
 801d37e:	4602      	mov	r2, r0
 801d380:	68fb      	ldr	r3, [r7, #12]
 801d382:	629a      	str	r2, [r3, #40]	; 0x28
    COGUI_ASSERT(widget->dc_engine != Co_NULL);
 801d384:	68fb      	ldr	r3, [r7, #12]
 801d386:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d388:	2b00      	cmp	r3, #0
 801d38a:	d104      	bne.n	801d396 <cogui_widget_create+0x66>
 801d38c:	223c      	movs	r2, #60	; 0x3c
 801d38e:	490c      	ldr	r1, [pc, #48]	; (801d3c0 <cogui_widget_create+0x90>)
 801d390:	480d      	ldr	r0, [pc, #52]	; (801d3c8 <cogui_widget_create+0x98>)
 801d392:	f7ff fea9 	bl	801d0e8 <cogui_assert_handler>

    widget->top = top;
 801d396:	68fb      	ldr	r3, [r7, #12]
 801d398:	687a      	ldr	r2, [r7, #4]
 801d39a:	605a      	str	r2, [r3, #4]
    widget->id  = top->widget_cnt++;
 801d39c:	687b      	ldr	r3, [r7, #4]
 801d39e:	699b      	ldr	r3, [r3, #24]
 801d3a0:	1c59      	adds	r1, r3, #1
 801d3a2:	687a      	ldr	r2, [r7, #4]
 801d3a4:	6191      	str	r1, [r2, #24]
 801d3a6:	68fa      	ldr	r2, [r7, #12]
 801d3a8:	60d3      	str	r3, [r2, #12]

    cogui_widget_list_insert(widget);
 801d3aa:	68f8      	ldr	r0, [r7, #12]
 801d3ac:	f000 f884 	bl	801d4b8 <cogui_widget_list_insert>

    top->focus_widget = widget;
 801d3b0:	687b      	ldr	r3, [r7, #4]
 801d3b2:	68fa      	ldr	r2, [r7, #12]
 801d3b4:	61da      	str	r2, [r3, #28]
    return widget;
 801d3b6:	68fb      	ldr	r3, [r7, #12]
}
 801d3b8:	4618      	mov	r0, r3
 801d3ba:	3710      	adds	r7, #16
 801d3bc:	46bd      	mov	sp, r7
 801d3be:	bd80      	pop	{r7, pc}
 801d3c0:	080258b4 	.word	0x080258b4
 801d3c4:	080257f8 	.word	0x080257f8
 801d3c8:	08025808 	.word	0x08025808

0801d3cc <cogui_widget_delete>:

void cogui_widget_delete(cogui_widget_t *widget)
{
 801d3cc:	b580      	push	{r7, lr}
 801d3ce:	b082      	sub	sp, #8
 801d3d0:	af00      	add	r7, sp, #0
 801d3d2:	6078      	str	r0, [r7, #4]
    cogui_widget_list_pop(widget->id, widget->top);
 801d3d4:	687b      	ldr	r3, [r7, #4]
 801d3d6:	68db      	ldr	r3, [r3, #12]
 801d3d8:	461a      	mov	r2, r3
 801d3da:	687b      	ldr	r3, [r7, #4]
 801d3dc:	685b      	ldr	r3, [r3, #4]
 801d3de:	4619      	mov	r1, r3
 801d3e0:	4610      	mov	r0, r2
 801d3e2:	f000 f8a5 	bl	801d530 <cogui_widget_list_pop>
    cogui_dc_end_drawing(widget->dc_engine);
 801d3e6:	687b      	ldr	r3, [r7, #4]
 801d3e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d3ea:	4618      	mov	r0, r3
 801d3ec:	f7fe fb54 	bl	801ba98 <cogui_dc_end_drawing>
    cogui_widget_clear_text(widget);
 801d3f0:	6878      	ldr	r0, [r7, #4]
 801d3f2:	f000 fc8d 	bl	801dd10 <cogui_widget_clear_text>

    if (widget->user_data) {
 801d3f6:	687b      	ldr	r3, [r7, #4]
 801d3f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801d3fa:	2b00      	cmp	r3, #0
 801d3fc:	d004      	beq.n	801d408 <cogui_widget_delete+0x3c>
        cogui_free(widget->user_data);
 801d3fe:	687b      	ldr	r3, [r7, #4]
 801d400:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801d402:	4618      	mov	r0, r3
 801d404:	f7ff f988 	bl	801c718 <cogui_free>
    }

    cogui_free(widget);
 801d408:	6878      	ldr	r0, [r7, #4]
 801d40a:	f7ff f985 	bl	801c718 <cogui_free>
}
 801d40e:	bf00      	nop
 801d410:	3708      	adds	r7, #8
 801d412:	46bd      	mov	sp, r7
 801d414:	bd80      	pop	{r7, pc}

0801d416 <cogui_widget_list_init>:
 * @details    This function is used to initial a screen list to a header node
 *             and a full screen widget, and refresh screen currently.    
 *******************************************************************************
 */
cogui_widget_t *cogui_widget_list_init(struct cogui_window *top)
{	
 801d416:	b590      	push	{r4, r7, lr}
 801d418:	b087      	sub	sp, #28
 801d41a:	af02      	add	r7, sp, #8
 801d41c:	6078      	str	r0, [r7, #4]
    /* create header node */
	cogui_widget_t *header = cogui_widget_create(top);
 801d41e:	6878      	ldr	r0, [r7, #4]
 801d420:	f7ff ff86 	bl	801d330 <cogui_widget_create>
 801d424:	60f8      	str	r0, [r7, #12]
    COGUI_ASSERT(header != Co_NULL);
 801d426:	68fb      	ldr	r3, [r7, #12]
 801d428:	2b00      	cmp	r3, #0
 801d42a:	d104      	bne.n	801d436 <cogui_widget_list_init+0x20>
 801d42c:	2264      	movs	r2, #100	; 0x64
 801d42e:	491e      	ldr	r1, [pc, #120]	; (801d4a8 <cogui_widget_list_init+0x92>)
 801d430:	481e      	ldr	r0, [pc, #120]	; (801d4ac <cogui_widget_list_init+0x96>)
 801d432:	f7ff fe59 	bl	801d0e8 <cogui_assert_handler>
    header->flag |= COGUI_WIDGET_FLAG_HEADER;
 801d436:	68fb      	ldr	r3, [r7, #12]
 801d438:	689b      	ldr	r3, [r3, #8]
 801d43a:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 801d43e:	68fb      	ldr	r3, [r7, #12]
 801d440:	609a      	str	r2, [r3, #8]
    
    /* first object should be a fill screen */
    cogui_widget_t *widget = cogui_widget_create(top);
 801d442:	6878      	ldr	r0, [r7, #4]
 801d444:	f7ff ff74 	bl	801d330 <cogui_widget_create>
 801d448:	60b8      	str	r0, [r7, #8]
    COGUI_ASSERT(widget != Co_NULL);	
 801d44a:	68bb      	ldr	r3, [r7, #8]
 801d44c:	2b00      	cmp	r3, #0
 801d44e:	d104      	bne.n	801d45a <cogui_widget_list_init+0x44>
 801d450:	2269      	movs	r2, #105	; 0x69
 801d452:	4915      	ldr	r1, [pc, #84]	; (801d4a8 <cogui_widget_list_init+0x92>)
 801d454:	4816      	ldr	r0, [pc, #88]	; (801d4b0 <cogui_widget_list_init+0x9a>)
 801d456:	f7ff fe47 	bl	801d0e8 <cogui_assert_handler>

    /* enabled it */
    widget->flag |= COGUI_WIDGET_FLAG_SHOWN;
 801d45a:	68bb      	ldr	r3, [r7, #8]
 801d45c:	689b      	ldr	r3, [r3, #8]
 801d45e:	f043 0201 	orr.w	r2, r3, #1
 801d462:	68bb      	ldr	r3, [r7, #8]
 801d464:	609a      	str	r2, [r3, #8]

    /* set as a full screen rectangle */
    widget->flag |= COGUI_WIDGET_FLAG_RECT | COGUI_WIDGET_FLAG_HEADER;
 801d466:	68bb      	ldr	r3, [r7, #8]
 801d468:	689b      	ldr	r3, [r3, #8]
 801d46a:	f443 4284 	orr.w	r2, r3, #16896	; 0x4200
 801d46e:	68bb      	ldr	r3, [r7, #8]
 801d470:	609a      	str	r2, [r3, #8]
    cogui_widget_set_rectangle(widget, 0, 0, COGUI_SCREEN_WIDTH, COGUI_SCREEN_HEIGHT);
 801d472:	f44f 73a0 	mov.w	r3, #320	; 0x140
 801d476:	9300      	str	r3, [sp, #0]
 801d478:	23f0      	movs	r3, #240	; 0xf0
 801d47a:	2200      	movs	r2, #0
 801d47c:	2100      	movs	r1, #0
 801d47e:	68b8      	ldr	r0, [r7, #8]
 801d480:	f000 fabd 	bl	801d9fe <cogui_widget_set_rectangle>

    /* this node should be filled by background */
    widget->gc.foreground = default_background;
 801d484:	4b0b      	ldr	r3, [pc, #44]	; (801d4b4 <cogui_widget_list_init+0x9e>)
 801d486:	e9d3 3400 	ldrd	r3, r4, [r3]
 801d48a:	68ba      	ldr	r2, [r7, #8]
 801d48c:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
    widget->flag |= COGUI_WIDGET_FLAG_FILLED;
 801d490:	68bb      	ldr	r3, [r7, #8]
 801d492:	689b      	ldr	r3, [r3, #8]
 801d494:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 801d498:	68bb      	ldr	r3, [r7, #8]
 801d49a:	609a      	str	r2, [r3, #8]

	return widget;
 801d49c:	68bb      	ldr	r3, [r7, #8]
}
 801d49e:	4618      	mov	r0, r3
 801d4a0:	3714      	adds	r7, #20
 801d4a2:	46bd      	mov	sp, r7
 801d4a4:	bd90      	pop	{r4, r7, pc}
 801d4a6:	bf00      	nop
 801d4a8:	080258c8 	.word	0x080258c8
 801d4ac:	08025828 	.word	0x08025828
 801d4b0:	0802583c 	.word	0x0802583c
 801d4b4:	08022bf0 	.word	0x08022bf0

0801d4b8 <cogui_widget_list_insert>:
 * @details    This function is used to insert a screen node into screen list
 *             and refresh screen currently.
 *******************************************************************************
 */
void cogui_widget_list_insert(cogui_widget_t *node)
{  
 801d4b8:	b580      	push	{r7, lr}
 801d4ba:	b084      	sub	sp, #16
 801d4bc:	af00      	add	r7, sp, #0
 801d4be:	6078      	str	r0, [r7, #4]
    COGUI_ASSERT(node != Co_NULL);
 801d4c0:	687b      	ldr	r3, [r7, #4]
 801d4c2:	2b00      	cmp	r3, #0
 801d4c4:	d104      	bne.n	801d4d0 <cogui_widget_list_insert+0x18>
 801d4c6:	2287      	movs	r2, #135	; 0x87
 801d4c8:	4916      	ldr	r1, [pc, #88]	; (801d524 <cogui_widget_list_insert+0x6c>)
 801d4ca:	4817      	ldr	r0, [pc, #92]	; (801d528 <cogui_widget_list_insert+0x70>)
 801d4cc:	f7ff fe0c 	bl	801d0e8 <cogui_assert_handler>

    struct cogui_window *top = node->top;
 801d4d0:	687b      	ldr	r3, [r7, #4]
 801d4d2:	685b      	ldr	r3, [r3, #4]
 801d4d4:	60bb      	str	r3, [r7, #8]
    COGUI_ASSERT(top != Co_NULL);
 801d4d6:	68bb      	ldr	r3, [r7, #8]
 801d4d8:	2b00      	cmp	r3, #0
 801d4da:	d104      	bne.n	801d4e6 <cogui_widget_list_insert+0x2e>
 801d4dc:	228a      	movs	r2, #138	; 0x8a
 801d4de:	4911      	ldr	r1, [pc, #68]	; (801d524 <cogui_widget_list_insert+0x6c>)
 801d4e0:	4812      	ldr	r0, [pc, #72]	; (801d52c <cogui_widget_list_insert+0x74>)
 801d4e2:	f7ff fe01 	bl	801d0e8 <cogui_assert_handler>

    /* if it is header node */
    if (top->widget_list == Co_NULL) {
 801d4e6:	68bb      	ldr	r3, [r7, #8]
 801d4e8:	685b      	ldr	r3, [r3, #4]
 801d4ea:	2b00      	cmp	r3, #0
 801d4ec:	d106      	bne.n	801d4fc <cogui_widget_list_insert+0x44>
        top->widget_list = node;
 801d4ee:	68bb      	ldr	r3, [r7, #8]
 801d4f0:	687a      	ldr	r2, [r7, #4]
 801d4f2:	605a      	str	r2, [r3, #4]
        node->next = Co_NULL;
 801d4f4:	687b      	ldr	r3, [r7, #4]
 801d4f6:	2200      	movs	r2, #0
 801d4f8:	601a      	str	r2, [r3, #0]
        return;
 801d4fa:	e010      	b.n	801d51e <cogui_widget_list_insert+0x66>
    }

    cogui_widget_t *list = top->widget_list;
 801d4fc:	68bb      	ldr	r3, [r7, #8]
 801d4fe:	685b      	ldr	r3, [r3, #4]
 801d500:	60fb      	str	r3, [r7, #12]

    while (list->next != Co_NULL)
 801d502:	e002      	b.n	801d50a <cogui_widget_list_insert+0x52>
        list = list->next;
 801d504:	68fb      	ldr	r3, [r7, #12]
 801d506:	681b      	ldr	r3, [r3, #0]
 801d508:	60fb      	str	r3, [r7, #12]
    while (list->next != Co_NULL)
 801d50a:	68fb      	ldr	r3, [r7, #12]
 801d50c:	681b      	ldr	r3, [r3, #0]
 801d50e:	2b00      	cmp	r3, #0
 801d510:	d1f8      	bne.n	801d504 <cogui_widget_list_insert+0x4c>

    list->next = node;
 801d512:	68fb      	ldr	r3, [r7, #12]
 801d514:	687a      	ldr	r2, [r7, #4]
 801d516:	601a      	str	r2, [r3, #0]
    node->next = Co_NULL;
 801d518:	687b      	ldr	r3, [r7, #4]
 801d51a:	2200      	movs	r2, #0
 801d51c:	601a      	str	r2, [r3, #0]
    
    /* after inserted, refresh screen */
    //cogui_screen_refresh(top);
}
 801d51e:	3710      	adds	r7, #16
 801d520:	46bd      	mov	sp, r7
 801d522:	bd80      	pop	{r7, pc}
 801d524:	080258e0 	.word	0x080258e0
 801d528:	08025850 	.word	0x08025850
 801d52c:	080257f8 	.word	0x080257f8

0801d530 <cogui_widget_list_pop>:
 * @details    This function is used to pop out a screen node from screen list
 *             and not delete it right now. 
 *******************************************************************************
 */
cogui_widget_t *cogui_widget_list_pop(co_uint32_t id, struct cogui_window *top)
{
 801d530:	b580      	push	{r7, lr}
 801d532:	b084      	sub	sp, #16
 801d534:	af00      	add	r7, sp, #0
 801d536:	6078      	str	r0, [r7, #4]
 801d538:	6039      	str	r1, [r7, #0]
    cogui_widget_t *list = top->widget_list->next;
 801d53a:	683b      	ldr	r3, [r7, #0]
 801d53c:	685b      	ldr	r3, [r3, #4]
 801d53e:	681b      	ldr	r3, [r3, #0]
 801d540:	60fb      	str	r3, [r7, #12]

    /* recursive from first node */
    while (list->next != Co_NULL) {
 801d542:	e018      	b.n	801d576 <cogui_widget_list_pop+0x46>
        if (list->next->id == id) {
 801d544:	68fb      	ldr	r3, [r7, #12]
 801d546:	681b      	ldr	r3, [r3, #0]
 801d548:	68db      	ldr	r3, [r3, #12]
 801d54a:	461a      	mov	r2, r3
 801d54c:	687b      	ldr	r3, [r7, #4]
 801d54e:	4293      	cmp	r3, r2
 801d550:	d10e      	bne.n	801d570 <cogui_widget_list_pop+0x40>
            cogui_widget_t *tmp_widget = list->next;
 801d552:	68fb      	ldr	r3, [r7, #12]
 801d554:	681b      	ldr	r3, [r3, #0]
 801d556:	60bb      	str	r3, [r7, #8]
            
            list->next = tmp_widget->next;
 801d558:	68bb      	ldr	r3, [r7, #8]
 801d55a:	681a      	ldr	r2, [r3, #0]
 801d55c:	68fb      	ldr	r3, [r7, #12]
 801d55e:	601a      	str	r2, [r3, #0]

            tmp_widget->next = Co_NULL;
 801d560:	68bb      	ldr	r3, [r7, #8]
 801d562:	2200      	movs	r2, #0
 801d564:	601a      	str	r2, [r3, #0]
            
			/* after pop function, refresh screen */
			cogui_screen_refresh(top);
 801d566:	6838      	ldr	r0, [r7, #0]
 801d568:	f000 f82d 	bl	801d5c6 <cogui_screen_refresh>
			
            return tmp_widget;
 801d56c:	68bb      	ldr	r3, [r7, #8]
 801d56e:	e007      	b.n	801d580 <cogui_widget_list_pop+0x50>
        }

        /* or move to next one */
        list = list->next;
 801d570:	68fb      	ldr	r3, [r7, #12]
 801d572:	681b      	ldr	r3, [r3, #0]
 801d574:	60fb      	str	r3, [r7, #12]
    while (list->next != Co_NULL) {
 801d576:	68fb      	ldr	r3, [r7, #12]
 801d578:	681b      	ldr	r3, [r3, #0]
 801d57a:	2b00      	cmp	r3, #0
 801d57c:	d1e2      	bne.n	801d544 <cogui_widget_list_pop+0x14>
    }

    return Co_NULL;
 801d57e:	2300      	movs	r3, #0
}
 801d580:	4618      	mov	r0, r3
 801d582:	3710      	adds	r7, #16
 801d584:	46bd      	mov	sp, r7
 801d586:	bd80      	pop	{r7, pc}

0801d588 <cogui_get_widget_node>:
 * @retval     screen_node  The result we found
 * @retval     Co_NULL      Or we did not find it
 *******************************************************************************
 */
cogui_widget_t *cogui_get_widget_node(co_uint32_t id, struct cogui_window *top)
{
 801d588:	b480      	push	{r7}
 801d58a:	b085      	sub	sp, #20
 801d58c:	af00      	add	r7, sp, #0
 801d58e:	6078      	str	r0, [r7, #4]
 801d590:	6039      	str	r1, [r7, #0]
    cogui_widget_t *list = top->widget_list->next;
 801d592:	683b      	ldr	r3, [r7, #0]
 801d594:	685b      	ldr	r3, [r3, #4]
 801d596:	681b      	ldr	r3, [r3, #0]
 801d598:	60fb      	str	r3, [r7, #12]

    /* recursive from first node */
    while (list != Co_NULL) {
 801d59a:	e00a      	b.n	801d5b2 <cogui_get_widget_node+0x2a>
        /* find the corrent one, return it */
        if (list->id == id) {
 801d59c:	68fb      	ldr	r3, [r7, #12]
 801d59e:	68db      	ldr	r3, [r3, #12]
 801d5a0:	461a      	mov	r2, r3
 801d5a2:	687b      	ldr	r3, [r7, #4]
 801d5a4:	4293      	cmp	r3, r2
 801d5a6:	d101      	bne.n	801d5ac <cogui_get_widget_node+0x24>
            return list;
 801d5a8:	68fb      	ldr	r3, [r7, #12]
 801d5aa:	e006      	b.n	801d5ba <cogui_get_widget_node+0x32>
        }

        /* or move to next one */
        list = list->next;
 801d5ac:	68fb      	ldr	r3, [r7, #12]
 801d5ae:	681b      	ldr	r3, [r3, #0]
 801d5b0:	60fb      	str	r3, [r7, #12]
    while (list != Co_NULL) {
 801d5b2:	68fb      	ldr	r3, [r7, #12]
 801d5b4:	2b00      	cmp	r3, #0
 801d5b6:	d1f1      	bne.n	801d59c <cogui_get_widget_node+0x14>
    }

    return Co_NULL;
 801d5b8:	2300      	movs	r3, #0
}
 801d5ba:	4618      	mov	r0, r3
 801d5bc:	3714      	adds	r7, #20
 801d5be:	46bd      	mov	sp, r7
 801d5c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d5c4:	4770      	bx	lr

0801d5c6 <cogui_screen_refresh>:
 * @par Description
 * @details    This function is called to refresh screen by list.
 *******************************************************************************
 */
StatusType cogui_screen_refresh(struct cogui_window *top)
{
 801d5c6:	b590      	push	{r4, r7, lr}
 801d5c8:	b089      	sub	sp, #36	; 0x24
 801d5ca:	af00      	add	r7, sp, #0
 801d5cc:	6078      	str	r0, [r7, #4]
    COGUI_ASSERT(top != Co_NULL);
 801d5ce:	687b      	ldr	r3, [r7, #4]
 801d5d0:	2b00      	cmp	r3, #0
 801d5d2:	d104      	bne.n	801d5de <cogui_screen_refresh+0x18>
 801d5d4:	22ed      	movs	r2, #237	; 0xed
 801d5d6:	4964      	ldr	r1, [pc, #400]	; (801d768 <cogui_screen_refresh+0x1a2>)
 801d5d8:	4864      	ldr	r0, [pc, #400]	; (801d76c <cogui_screen_refresh+0x1a6>)
 801d5da:	f7ff fd85 	bl	801d0e8 <cogui_assert_handler>

    if (!COGUI_WINDOW_IS_ENABLE(top) && top != main_page) {
 801d5de:	687b      	ldr	r3, [r7, #4]
 801d5e0:	68db      	ldr	r3, [r3, #12]
 801d5e2:	f003 0301 	and.w	r3, r3, #1
 801d5e6:	2b00      	cmp	r3, #0
 801d5e8:	d107      	bne.n	801d5fa <cogui_screen_refresh+0x34>
 801d5ea:	4b61      	ldr	r3, [pc, #388]	; (801d770 <cogui_screen_refresh+0x1aa>)
 801d5ec:	681b      	ldr	r3, [r3, #0]
 801d5ee:	687a      	ldr	r2, [r7, #4]
 801d5f0:	429a      	cmp	r2, r3
 801d5f2:	d002      	beq.n	801d5fa <cogui_screen_refresh+0x34>
        top = main_page;
 801d5f4:	4b5e      	ldr	r3, [pc, #376]	; (801d770 <cogui_screen_refresh+0x1aa>)
 801d5f6:	681b      	ldr	r3, [r3, #0]
 801d5f8:	607b      	str	r3, [r7, #4]
    }

    if (!COGUI_WINDOW_IS_ENABLE(top) && top == main_page) {
 801d5fa:	687b      	ldr	r3, [r7, #4]
 801d5fc:	68db      	ldr	r3, [r3, #12]
 801d5fe:	f003 0301 	and.w	r3, r3, #1
 801d602:	2b00      	cmp	r3, #0
 801d604:	d106      	bne.n	801d614 <cogui_screen_refresh+0x4e>
 801d606:	4b5a      	ldr	r3, [pc, #360]	; (801d770 <cogui_screen_refresh+0x1aa>)
 801d608:	681b      	ldr	r3, [r3, #0]
 801d60a:	687a      	ldr	r2, [r7, #4]
 801d60c:	429a      	cmp	r2, r3
 801d60e:	d101      	bne.n	801d614 <cogui_screen_refresh+0x4e>
        return GUI_E_ERROR;
 801d610:	2316      	movs	r3, #22
 801d612:	e0a4      	b.n	801d75e <cogui_screen_refresh+0x198>
    }

    cogui_widget_t *list = top->widget_list->next;
 801d614:	687b      	ldr	r3, [r7, #4]
 801d616:	685b      	ldr	r3, [r3, #4]
 801d618:	681b      	ldr	r3, [r3, #0]
 801d61a:	61fb      	str	r3, [r7, #28]

    while (list != Co_NULL) {
 801d61c:	e09a      	b.n	801d754 <cogui_screen_refresh+0x18e>
        /* if this node is disabled, skip it */
        if (!COGUI_WIDGET_IS_ENABLE(list)){
 801d61e:	69fb      	ldr	r3, [r7, #28]
 801d620:	689b      	ldr	r3, [r3, #8]
 801d622:	f003 0301 	and.w	r3, r3, #1
 801d626:	2b00      	cmp	r3, #0
 801d628:	d103      	bne.n	801d632 <cogui_screen_refresh+0x6c>
            list = list->next;
 801d62a:	69fb      	ldr	r3, [r7, #28]
 801d62c:	681b      	ldr	r3, [r3, #0]
 801d62e:	61fb      	str	r3, [r7, #28]
            continue;
 801d630:	e090      	b.n	801d754 <cogui_screen_refresh+0x18e>
        }

        /* draw shape if needed */
        if (list->flag & COGUI_WIDGET_FLAG_RECT) {
 801d632:	69fb      	ldr	r3, [r7, #28]
 801d634:	689b      	ldr	r3, [r3, #8]
 801d636:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801d63a:	2b00      	cmp	r3, #0
 801d63c:	d018      	beq.n	801d670 <cogui_screen_refresh+0xaa>
            if (list->flag & COGUI_WIDGET_FLAG_FILLED) {
 801d63e:	69fb      	ldr	r3, [r7, #28]
 801d640:	689b      	ldr	r3, [r3, #8]
 801d642:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801d646:	2b00      	cmp	r3, #0
 801d648:	d00a      	beq.n	801d660 <cogui_screen_refresh+0x9a>
                list->dc_engine->engine->fill_rect(list->dc_engine, &list->inner_extent);
 801d64a:	69fb      	ldr	r3, [r7, #28]
 801d64c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d64e:	685b      	ldr	r3, [r3, #4]
 801d650:	691b      	ldr	r3, [r3, #16]
 801d652:	69fa      	ldr	r2, [r7, #28]
 801d654:	6a90      	ldr	r0, [r2, #40]	; 0x28
 801d656:	69fa      	ldr	r2, [r7, #28]
 801d658:	321a      	adds	r2, #26
 801d65a:	4611      	mov	r1, r2
 801d65c:	4798      	blx	r3
 801d65e:	e007      	b.n	801d670 <cogui_screen_refresh+0xaa>
			}
            else {
                cogui_dc_draw_rect(list->dc_engine, &list->inner_extent);
 801d660:	69fb      	ldr	r3, [r7, #28]
 801d662:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801d664:	69fb      	ldr	r3, [r7, #28]
 801d666:	331a      	adds	r3, #26
 801d668:	4619      	mov	r1, r3
 801d66a:	4610      	mov	r0, r2
 801d66c:	f7fd ff9c 	bl	801b5a8 <cogui_dc_draw_rect>
            }
        }
        
        /* draw text if needed */
        if (list->flag & COGUI_WIDGET_FLAG_HAS_TEXT) {
 801d670:	69fb      	ldr	r3, [r7, #28]
 801d672:	689b      	ldr	r3, [r3, #8]
 801d674:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801d678:	2b00      	cmp	r3, #0
 801d67a:	d05a      	beq.n	801d732 <cogui_screen_refresh+0x16c>
            cogui_rect_t pr = list->inner_extent;
 801d67c:	69fa      	ldr	r2, [r7, #28]
 801d67e:	f107 0308 	add.w	r3, r7, #8
 801d682:	321a      	adds	r2, #26
 801d684:	6810      	ldr	r0, [r2, #0]
 801d686:	6851      	ldr	r1, [r2, #4]
 801d688:	c303      	stmia	r3!, {r0, r1}
            co_uint64_t padding = list->gc.padding;
 801d68a:	69fb      	ldr	r3, [r7, #28]
 801d68c:	e9d3 3412 	ldrd	r3, r4, [r3, #72]	; 0x48
 801d690:	e9c7 3404 	strd	r3, r4, [r7, #16]
            COGUI_RECT_PADDING(&pr, padding);
 801d694:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801d698:	b298      	uxth	r0, r3
 801d69a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 801d69e:	f04f 0300 	mov.w	r3, #0
 801d6a2:	f04f 0400 	mov.w	r4, #0
 801d6a6:	0a0b      	lsrs	r3, r1, #8
 801d6a8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 801d6ac:	0a14      	lsrs	r4, r2, #8
 801d6ae:	b29b      	uxth	r3, r3
 801d6b0:	b2db      	uxtb	r3, r3
 801d6b2:	b29b      	uxth	r3, r3
 801d6b4:	4403      	add	r3, r0
 801d6b6:	b29b      	uxth	r3, r3
 801d6b8:	b21b      	sxth	r3, r3
 801d6ba:	813b      	strh	r3, [r7, #8]
 801d6bc:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 801d6c0:	b29a      	uxth	r2, r3
 801d6c2:	8a3b      	ldrh	r3, [r7, #16]
 801d6c4:	b2db      	uxtb	r3, r3
 801d6c6:	b29b      	uxth	r3, r3
 801d6c8:	1ad3      	subs	r3, r2, r3
 801d6ca:	b29b      	uxth	r3, r3
 801d6cc:	b21b      	sxth	r3, r3
 801d6ce:	817b      	strh	r3, [r7, #10]
 801d6d0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 801d6d4:	b298      	uxth	r0, r3
 801d6d6:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 801d6da:	f04f 0300 	mov.w	r3, #0
 801d6de:	f04f 0400 	mov.w	r4, #0
 801d6e2:	0e0b      	lsrs	r3, r1, #24
 801d6e4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801d6e8:	0e14      	lsrs	r4, r2, #24
 801d6ea:	b29b      	uxth	r3, r3
 801d6ec:	b2db      	uxtb	r3, r3
 801d6ee:	b29b      	uxth	r3, r3
 801d6f0:	4403      	add	r3, r0
 801d6f2:	b29b      	uxth	r3, r3
 801d6f4:	b21b      	sxth	r3, r3
 801d6f6:	81bb      	strh	r3, [r7, #12]
 801d6f8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801d6fc:	b298      	uxth	r0, r3
 801d6fe:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 801d702:	f04f 0300 	mov.w	r3, #0
 801d706:	f04f 0400 	mov.w	r4, #0
 801d70a:	0c0b      	lsrs	r3, r1, #16
 801d70c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801d710:	0c14      	lsrs	r4, r2, #16
 801d712:	b29b      	uxth	r3, r3
 801d714:	b2db      	uxtb	r3, r3
 801d716:	b29b      	uxth	r3, r3
 801d718:	1ac3      	subs	r3, r0, r3
 801d71a:	b29b      	uxth	r3, r3
 801d71c:	b21b      	sxth	r3, r3
 801d71e:	81fb      	strh	r3, [r7, #14]

            cogui_dc_draw_text(list->dc_engine, &pr, list->text);
 801d720:	69fb      	ldr	r3, [r7, #28]
 801d722:	6a98      	ldr	r0, [r3, #40]	; 0x28
 801d724:	69fb      	ldr	r3, [r7, #28]
 801d726:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801d728:	f107 0308 	add.w	r3, r7, #8
 801d72c:	4619      	mov	r1, r3
 801d72e:	f7fe f889 	bl	801b844 <cogui_dc_draw_text>
        }

        /* draw border at last if needed */
        if (list->flag & COGUI_WIDGET_BORDER) {
 801d732:	69fb      	ldr	r3, [r7, #28]
 801d734:	689b      	ldr	r3, [r3, #8]
 801d736:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801d73a:	2b00      	cmp	r3, #0
 801d73c:	d007      	beq.n	801d74e <cogui_screen_refresh+0x188>
            cogui_dc_draw_border(list->dc_engine, &list->inner_extent);
 801d73e:	69fb      	ldr	r3, [r7, #28]
 801d740:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801d742:	69fb      	ldr	r3, [r7, #28]
 801d744:	331a      	adds	r3, #26
 801d746:	4619      	mov	r1, r3
 801d748:	4610      	mov	r0, r2
 801d74a:	f7fe f819 	bl	801b780 <cogui_dc_draw_border>
        }        

        /* go forward to next node */
        list = list->next;
 801d74e:	69fb      	ldr	r3, [r7, #28]
 801d750:	681b      	ldr	r3, [r3, #0]
 801d752:	61fb      	str	r3, [r7, #28]
    while (list != Co_NULL) {
 801d754:	69fb      	ldr	r3, [r7, #28]
 801d756:	2b00      	cmp	r3, #0
 801d758:	f47f af61 	bne.w	801d61e <cogui_screen_refresh+0x58>
    }

    return GUI_E_OK;
 801d75c:	2317      	movs	r3, #23
}
 801d75e:	4618      	mov	r0, r3
 801d760:	3724      	adds	r7, #36	; 0x24
 801d762:	46bd      	mov	sp, r7
 801d764:	bd90      	pop	{r4, r7, pc}
 801d766:	bf00      	nop
 801d768:	080258fc 	.word	0x080258fc
 801d76c:	080257f8 	.word	0x080257f8
 801d770:	2000d774 	.word	0x2000d774

0801d774 <cogui_widget_set_focus>:

void cogui_widget_set_focus(cogui_widget_t *widget, event_handler_ptr handler)
{
 801d774:	b580      	push	{r7, lr}
 801d776:	b082      	sub	sp, #8
 801d778:	af00      	add	r7, sp, #0
 801d77a:	6078      	str	r0, [r7, #4]
 801d77c:	6039      	str	r1, [r7, #0]
    COGUI_ASSERT(widget != Co_NULL);
 801d77e:	687b      	ldr	r3, [r7, #4]
 801d780:	2b00      	cmp	r3, #0
 801d782:	d105      	bne.n	801d790 <cogui_widget_set_focus+0x1c>
 801d784:	f240 1221 	movw	r2, #289	; 0x121
 801d788:	4905      	ldr	r1, [pc, #20]	; (801d7a0 <cogui_widget_set_focus+0x2c>)
 801d78a:	4806      	ldr	r0, [pc, #24]	; (801d7a4 <cogui_widget_set_focus+0x30>)
 801d78c:	f7ff fcac 	bl	801d0e8 <cogui_assert_handler>

    widget->on_focus_in = handler;
 801d790:	687b      	ldr	r3, [r7, #4]
 801d792:	683a      	ldr	r2, [r7, #0]
 801d794:	659a      	str	r2, [r3, #88]	; 0x58
}
 801d796:	bf00      	nop
 801d798:	3708      	adds	r7, #8
 801d79a:	46bd      	mov	sp, r7
 801d79c:	bd80      	pop	{r7, pc}
 801d79e:	bf00      	nop
 801d7a0:	08025914 	.word	0x08025914
 801d7a4:	0802583c 	.word	0x0802583c

0801d7a8 <cogui_widget_set_unfocus>:

void cogui_widget_set_unfocus(cogui_widget_t *widget, event_handler_ptr handler)
{
 801d7a8:	b580      	push	{r7, lr}
 801d7aa:	b082      	sub	sp, #8
 801d7ac:	af00      	add	r7, sp, #0
 801d7ae:	6078      	str	r0, [r7, #4]
 801d7b0:	6039      	str	r1, [r7, #0]
    COGUI_ASSERT(widget != Co_NULL);
 801d7b2:	687b      	ldr	r3, [r7, #4]
 801d7b4:	2b00      	cmp	r3, #0
 801d7b6:	d105      	bne.n	801d7c4 <cogui_widget_set_unfocus+0x1c>
 801d7b8:	f44f 7294 	mov.w	r2, #296	; 0x128
 801d7bc:	4905      	ldr	r1, [pc, #20]	; (801d7d4 <cogui_widget_set_unfocus+0x2c>)
 801d7be:	4806      	ldr	r0, [pc, #24]	; (801d7d8 <cogui_widget_set_unfocus+0x30>)
 801d7c0:	f7ff fc92 	bl	801d0e8 <cogui_assert_handler>
    
    widget->on_focus_out = handler;
 801d7c4:	687b      	ldr	r3, [r7, #4]
 801d7c6:	683a      	ldr	r2, [r7, #0]
 801d7c8:	65da      	str	r2, [r3, #92]	; 0x5c
}
 801d7ca:	bf00      	nop
 801d7cc:	3708      	adds	r7, #8
 801d7ce:	46bd      	mov	sp, r7
 801d7d0:	bd80      	pop	{r7, pc}
 801d7d2:	bf00      	nop
 801d7d4:	0802592c 	.word	0x0802592c
 801d7d8:	0802583c 	.word	0x0802583c

0801d7dc <cogui_widget_focus>:

void cogui_widget_focus(cogui_widget_t *widget)
{
 801d7dc:	b580      	push	{r7, lr}
 801d7de:	b082      	sub	sp, #8
 801d7e0:	af00      	add	r7, sp, #0
 801d7e2:	6078      	str	r0, [r7, #4]
    COGUI_ASSERT(widget != Co_NULL);
 801d7e4:	687b      	ldr	r3, [r7, #4]
 801d7e6:	2b00      	cmp	r3, #0
 801d7e8:	d105      	bne.n	801d7f6 <cogui_widget_focus+0x1a>
 801d7ea:	f240 122f 	movw	r2, #303	; 0x12f
 801d7ee:	4917      	ldr	r1, [pc, #92]	; (801d84c <cogui_widget_focus+0x70>)
 801d7f0:	4817      	ldr	r0, [pc, #92]	; (801d850 <cogui_widget_focus+0x74>)
 801d7f2:	f7ff fc79 	bl	801d0e8 <cogui_assert_handler>

    widget->flag |= COGUI_WIDGET_FLAG_FOCUS;
 801d7f6:	687b      	ldr	r3, [r7, #4]
 801d7f8:	689b      	ldr	r3, [r3, #8]
 801d7fa:	f043 0202 	orr.w	r2, r3, #2
 801d7fe:	687b      	ldr	r3, [r7, #4]
 801d800:	609a      	str	r2, [r3, #8]

    if (widget->top->focus_widget == widget) {
 801d802:	687b      	ldr	r3, [r7, #4]
 801d804:	685b      	ldr	r3, [r3, #4]
 801d806:	69db      	ldr	r3, [r3, #28]
 801d808:	687a      	ldr	r2, [r7, #4]
 801d80a:	429a      	cmp	r2, r3
 801d80c:	d105      	bne.n	801d81a <cogui_widget_focus+0x3e>
        cogui_screen_refresh(widget->top);
 801d80e:	687b      	ldr	r3, [r7, #4]
 801d810:	685b      	ldr	r3, [r3, #4]
 801d812:	4618      	mov	r0, r3
 801d814:	f7ff fed7 	bl	801d5c6 <cogui_screen_refresh>
        return;
 801d818:	e014      	b.n	801d844 <cogui_widget_focus+0x68>
    }
    else {
        widget->top->focus_widget = widget;
 801d81a:	687b      	ldr	r3, [r7, #4]
 801d81c:	685b      	ldr	r3, [r3, #4]
 801d81e:	687a      	ldr	r2, [r7, #4]
 801d820:	61da      	str	r2, [r3, #28]
    }

    /* put this node into last of the list */
    cogui_widget_list_pop(widget->id, widget->top);
 801d822:	687b      	ldr	r3, [r7, #4]
 801d824:	68db      	ldr	r3, [r3, #12]
 801d826:	461a      	mov	r2, r3
 801d828:	687b      	ldr	r3, [r7, #4]
 801d82a:	685b      	ldr	r3, [r3, #4]
 801d82c:	4619      	mov	r1, r3
 801d82e:	4610      	mov	r0, r2
 801d830:	f7ff fe7e 	bl	801d530 <cogui_widget_list_pop>
    cogui_widget_list_insert(widget);
 801d834:	6878      	ldr	r0, [r7, #4]
 801d836:	f7ff fe3f 	bl	801d4b8 <cogui_widget_list_insert>
    cogui_screen_refresh(widget->top);
 801d83a:	687b      	ldr	r3, [r7, #4]
 801d83c:	685b      	ldr	r3, [r3, #4]
 801d83e:	4618      	mov	r0, r3
 801d840:	f7ff fec1 	bl	801d5c6 <cogui_screen_refresh>
}
 801d844:	3708      	adds	r7, #8
 801d846:	46bd      	mov	sp, r7
 801d848:	bd80      	pop	{r7, pc}
 801d84a:	bf00      	nop
 801d84c:	08025948 	.word	0x08025948
 801d850:	0802583c 	.word	0x0802583c

0801d854 <cogui_widget_unfocus>:

void cogui_widget_unfocus(cogui_widget_t *widget)
{
 801d854:	b580      	push	{r7, lr}
 801d856:	b084      	sub	sp, #16
 801d858:	af00      	add	r7, sp, #0
 801d85a:	6078      	str	r0, [r7, #4]
    COGUI_ASSERT(widget != Co_NULL);
 801d85c:	687b      	ldr	r3, [r7, #4]
 801d85e:	2b00      	cmp	r3, #0
 801d860:	d105      	bne.n	801d86e <cogui_widget_unfocus+0x1a>
 801d862:	f240 1243 	movw	r2, #323	; 0x143
 801d866:	4918      	ldr	r1, [pc, #96]	; (801d8c8 <cogui_widget_unfocus+0x74>)
 801d868:	4818      	ldr	r0, [pc, #96]	; (801d8cc <cogui_widget_unfocus+0x78>)
 801d86a:	f7ff fc3d 	bl	801d0e8 <cogui_assert_handler>

    widget->flag &= ~COGUI_WIDGET_FLAG_FOCUS;
 801d86e:	687b      	ldr	r3, [r7, #4]
 801d870:	689b      	ldr	r3, [r3, #8]
 801d872:	f023 0202 	bic.w	r2, r3, #2
 801d876:	687b      	ldr	r3, [r7, #4]
 801d878:	609a      	str	r2, [r3, #8]

    cogui_widget_t *list = widget->top->widget_list;
 801d87a:	687b      	ldr	r3, [r7, #4]
 801d87c:	685b      	ldr	r3, [r3, #4]
 801d87e:	685b      	ldr	r3, [r3, #4]
 801d880:	60fb      	str	r3, [r7, #12]
	
    while(list->next != widget)
 801d882:	e002      	b.n	801d88a <cogui_widget_unfocus+0x36>
        list = list->next; /* it will stop at new focus widget */
 801d884:	68fb      	ldr	r3, [r7, #12]
 801d886:	681b      	ldr	r3, [r3, #0]
 801d888:	60fb      	str	r3, [r7, #12]
    while(list->next != widget)
 801d88a:	68fb      	ldr	r3, [r7, #12]
 801d88c:	681b      	ldr	r3, [r3, #0]
 801d88e:	687a      	ldr	r2, [r7, #4]
 801d890:	429a      	cmp	r2, r3
 801d892:	d1f7      	bne.n	801d884 <cogui_widget_unfocus+0x30>

    /* let new focus node insert into the list of the last */
    cogui_widget_list_pop(list->id, widget->top);
 801d894:	68fb      	ldr	r3, [r7, #12]
 801d896:	68db      	ldr	r3, [r3, #12]
 801d898:	461a      	mov	r2, r3
 801d89a:	687b      	ldr	r3, [r7, #4]
 801d89c:	685b      	ldr	r3, [r3, #4]
 801d89e:	4619      	mov	r1, r3
 801d8a0:	4610      	mov	r0, r2
 801d8a2:	f7ff fe45 	bl	801d530 <cogui_widget_list_pop>
    cogui_widget_list_insert(list);
 801d8a6:	68f8      	ldr	r0, [r7, #12]
 801d8a8:	f7ff fe06 	bl	801d4b8 <cogui_widget_list_insert>
    cogui_screen_refresh(widget->top);
 801d8ac:	687b      	ldr	r3, [r7, #4]
 801d8ae:	685b      	ldr	r3, [r3, #4]
 801d8b0:	4618      	mov	r0, r3
 801d8b2:	f7ff fe88 	bl	801d5c6 <cogui_screen_refresh>

    widget->top->focus_widget = list;
 801d8b6:	687b      	ldr	r3, [r7, #4]
 801d8b8:	685b      	ldr	r3, [r3, #4]
 801d8ba:	68fa      	ldr	r2, [r7, #12]
 801d8bc:	61da      	str	r2, [r3, #28]
}
 801d8be:	bf00      	nop
 801d8c0:	3710      	adds	r7, #16
 801d8c2:	46bd      	mov	sp, r7
 801d8c4:	bd80      	pop	{r7, pc}
 801d8c6:	bf00      	nop
 801d8c8:	0802595c 	.word	0x0802595c
 801d8cc:	0802583c 	.word	0x0802583c

0801d8d0 <cogui_widget_get_rect>:

void cogui_widget_get_rect(cogui_widget_t *widget, cogui_rect_t *rect)
{
 801d8d0:	b580      	push	{r7, lr}
 801d8d2:	b082      	sub	sp, #8
 801d8d4:	af00      	add	r7, sp, #0
 801d8d6:	6078      	str	r0, [r7, #4]
 801d8d8:	6039      	str	r1, [r7, #0]
    COGUI_ASSERT(widget != Co_NULL);
 801d8da:	687b      	ldr	r3, [r7, #4]
 801d8dc:	2b00      	cmp	r3, #0
 801d8de:	d105      	bne.n	801d8ec <cogui_widget_get_rect+0x1c>
 801d8e0:	f44f 72ab 	mov.w	r2, #342	; 0x156
 801d8e4:	4916      	ldr	r1, [pc, #88]	; (801d940 <cogui_widget_get_rect+0x70>)
 801d8e6:	4817      	ldr	r0, [pc, #92]	; (801d944 <cogui_widget_get_rect+0x74>)
 801d8e8:	f7ff fbfe 	bl	801d0e8 <cogui_assert_handler>

    if (rect != Co_NULL) {
 801d8ec:	683b      	ldr	r3, [r7, #0]
 801d8ee:	2b00      	cmp	r3, #0
 801d8f0:	d021      	beq.n	801d936 <cogui_widget_get_rect+0x66>
        rect->x1 = rect->y1 = 0;
 801d8f2:	683b      	ldr	r3, [r7, #0]
 801d8f4:	2200      	movs	r2, #0
 801d8f6:	809a      	strh	r2, [r3, #4]
 801d8f8:	683b      	ldr	r3, [r7, #0]
 801d8fa:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 801d8fe:	683b      	ldr	r3, [r7, #0]
 801d900:	801a      	strh	r2, [r3, #0]
        rect->x2 = widget->extent.x2 - widget->extent.x1;
 801d902:	687b      	ldr	r3, [r7, #4]
 801d904:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 801d908:	b29a      	uxth	r2, r3
 801d90a:	687b      	ldr	r3, [r7, #4]
 801d90c:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 801d910:	b29b      	uxth	r3, r3
 801d912:	1ad3      	subs	r3, r2, r3
 801d914:	b29b      	uxth	r3, r3
 801d916:	b21a      	sxth	r2, r3
 801d918:	683b      	ldr	r3, [r7, #0]
 801d91a:	805a      	strh	r2, [r3, #2]
        rect->y2 = widget->extent.y2 - widget->extent.y1;
 801d91c:	687b      	ldr	r3, [r7, #4]
 801d91e:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 801d922:	b29a      	uxth	r2, r3
 801d924:	687b      	ldr	r3, [r7, #4]
 801d926:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 801d92a:	b29b      	uxth	r3, r3
 801d92c:	1ad3      	subs	r3, r2, r3
 801d92e:	b29b      	uxth	r3, r3
 801d930:	b21a      	sxth	r2, r3
 801d932:	683b      	ldr	r3, [r7, #0]
 801d934:	80da      	strh	r2, [r3, #6]
    }
}
 801d936:	bf00      	nop
 801d938:	3708      	adds	r7, #8
 801d93a:	46bd      	mov	sp, r7
 801d93c:	bd80      	pop	{r7, pc}
 801d93e:	bf00      	nop
 801d940:	08025974 	.word	0x08025974
 801d944:	0802583c 	.word	0x0802583c

0801d948 <cogui_widget_get_extent>:

void cogui_widget_get_extent(cogui_widget_t *widget, cogui_rect_t *rect)
{
 801d948:	b580      	push	{r7, lr}
 801d94a:	b082      	sub	sp, #8
 801d94c:	af00      	add	r7, sp, #0
 801d94e:	6078      	str	r0, [r7, #4]
 801d950:	6039      	str	r1, [r7, #0]
    COGUI_ASSERT(widget != Co_NULL);
 801d952:	687b      	ldr	r3, [r7, #4]
 801d954:	2b00      	cmp	r3, #0
 801d956:	d105      	bne.n	801d964 <cogui_widget_get_extent+0x1c>
 801d958:	f240 1261 	movw	r2, #353	; 0x161
 801d95c:	490b      	ldr	r1, [pc, #44]	; (801d98c <cogui_widget_get_extent+0x44>)
 801d95e:	480c      	ldr	r0, [pc, #48]	; (801d990 <cogui_widget_get_extent+0x48>)
 801d960:	f7ff fbc2 	bl	801d0e8 <cogui_assert_handler>
    COGUI_ASSERT(rect != Co_NULL);
 801d964:	683b      	ldr	r3, [r7, #0]
 801d966:	2b00      	cmp	r3, #0
 801d968:	d105      	bne.n	801d976 <cogui_widget_get_extent+0x2e>
 801d96a:	f44f 72b1 	mov.w	r2, #354	; 0x162
 801d96e:	4907      	ldr	r1, [pc, #28]	; (801d98c <cogui_widget_get_extent+0x44>)
 801d970:	4808      	ldr	r0, [pc, #32]	; (801d994 <cogui_widget_get_extent+0x4c>)
 801d972:	f7ff fbb9 	bl	801d0e8 <cogui_assert_handler>

    *rect = widget->extent;
 801d976:	683a      	ldr	r2, [r7, #0]
 801d978:	687b      	ldr	r3, [r7, #4]
 801d97a:	3312      	adds	r3, #18
 801d97c:	6819      	ldr	r1, [r3, #0]
 801d97e:	685b      	ldr	r3, [r3, #4]
 801d980:	6011      	str	r1, [r2, #0]
 801d982:	6053      	str	r3, [r2, #4]
}
 801d984:	bf00      	nop
 801d986:	3708      	adds	r7, #8
 801d988:	46bd      	mov	sp, r7
 801d98a:	bd80      	pop	{r7, pc}
 801d98c:	0802598c 	.word	0x0802598c
 801d990:	0802583c 	.word	0x0802583c
 801d994:	08025860 	.word	0x08025860

0801d998 <cogui_widget_set_rect>:

static void cogui_widget_set_rect(cogui_widget_t *widget, cogui_rect_t *rect)
{
 801d998:	b480      	push	{r7}
 801d99a:	b083      	sub	sp, #12
 801d99c:	af00      	add	r7, sp, #0
 801d99e:	6078      	str	r0, [r7, #4]
 801d9a0:	6039      	str	r1, [r7, #0]
    if (widget == Co_NULL || rect == Co_NULL)
 801d9a2:	687b      	ldr	r3, [r7, #4]
 801d9a4:	2b00      	cmp	r3, #0
 801d9a6:	d024      	beq.n	801d9f2 <cogui_widget_set_rect+0x5a>
 801d9a8:	683b      	ldr	r3, [r7, #0]
 801d9aa:	2b00      	cmp	r3, #0
 801d9ac:	d021      	beq.n	801d9f2 <cogui_widget_set_rect+0x5a>
	    return;

    widget->extent = *rect;
 801d9ae:	687b      	ldr	r3, [r7, #4]
 801d9b0:	683a      	ldr	r2, [r7, #0]
 801d9b2:	3312      	adds	r3, #18
 801d9b4:	6811      	ldr	r1, [r2, #0]
 801d9b6:	6852      	ldr	r2, [r2, #4]
 801d9b8:	6019      	str	r1, [r3, #0]
 801d9ba:	605a      	str	r2, [r3, #4]

    widget->min_width  = widget->extent.x2 - widget->extent.x1;
 801d9bc:	687b      	ldr	r3, [r7, #4]
 801d9be:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 801d9c2:	b29a      	uxth	r2, r3
 801d9c4:	687b      	ldr	r3, [r7, #4]
 801d9c6:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 801d9ca:	b29b      	uxth	r3, r3
 801d9cc:	1ad3      	subs	r3, r2, r3
 801d9ce:	b29b      	uxth	r3, r3
 801d9d0:	b21a      	sxth	r2, r3
 801d9d2:	687b      	ldr	r3, [r7, #4]
 801d9d4:	845a      	strh	r2, [r3, #34]	; 0x22
    widget->min_height = widget->extent.y2 - widget->extent.y1;
 801d9d6:	687b      	ldr	r3, [r7, #4]
 801d9d8:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 801d9dc:	b29a      	uxth	r2, r3
 801d9de:	687b      	ldr	r3, [r7, #4]
 801d9e0:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 801d9e4:	b29b      	uxth	r3, r3
 801d9e6:	1ad3      	subs	r3, r2, r3
 801d9e8:	b29b      	uxth	r3, r3
 801d9ea:	b21a      	sxth	r2, r3
 801d9ec:	687b      	ldr	r3, [r7, #4]
 801d9ee:	849a      	strh	r2, [r3, #36]	; 0x24
 801d9f0:	e000      	b.n	801d9f4 <cogui_widget_set_rect+0x5c>
	    return;
 801d9f2:	bf00      	nop
}
 801d9f4:	370c      	adds	r7, #12
 801d9f6:	46bd      	mov	sp, r7
 801d9f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d9fc:	4770      	bx	lr

0801d9fe <cogui_widget_set_rectangle>:

void cogui_widget_set_rectangle(cogui_widget_t *widget, S32 x, S32 y, S32 width, S32 height)
{
 801d9fe:	b580      	push	{r7, lr}
 801da00:	b086      	sub	sp, #24
 801da02:	af00      	add	r7, sp, #0
 801da04:	60f8      	str	r0, [r7, #12]
 801da06:	60b9      	str	r1, [r7, #8]
 801da08:	607a      	str	r2, [r7, #4]
 801da0a:	603b      	str	r3, [r7, #0]
    if (!(widget->top->style & COGUI_WINDOW_STYLE_NO_TITLE) && !(widget->flag & COGUI_WIDGET_FLAG_TITLE) && !(widget->flag & COGUI_WIDGET_FLAG_HEADER) ) {
 801da0c:	68fb      	ldr	r3, [r7, #12]
 801da0e:	685b      	ldr	r3, [r3, #4]
 801da10:	895b      	ldrh	r3, [r3, #10]
 801da12:	f003 0301 	and.w	r3, r3, #1
 801da16:	2b00      	cmp	r3, #0
 801da18:	d110      	bne.n	801da3c <cogui_widget_set_rectangle+0x3e>
 801da1a:	68fb      	ldr	r3, [r7, #12]
 801da1c:	689b      	ldr	r3, [r3, #8]
 801da1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801da22:	2b00      	cmp	r3, #0
 801da24:	d10a      	bne.n	801da3c <cogui_widget_set_rectangle+0x3e>
 801da26:	68fb      	ldr	r3, [r7, #12]
 801da28:	689b      	ldr	r3, [r3, #8]
 801da2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801da2e:	2b00      	cmp	r3, #0
 801da30:	d104      	bne.n	801da3c <cogui_widget_set_rectangle+0x3e>
        if (y <= COGUI_WINTITLE_HEIGHT)
 801da32:	687b      	ldr	r3, [r7, #4]
 801da34:	2b28      	cmp	r3, #40	; 0x28
 801da36:	dc01      	bgt.n	801da3c <cogui_widget_set_rectangle+0x3e>
            y = COGUI_WINTITLE_HEIGHT+1;
 801da38:	2329      	movs	r3, #41	; 0x29
 801da3a:	607b      	str	r3, [r7, #4]
    }

    cogui_rect_t rect;

    COGUI_SET_RECT(&rect, x, y, width, height);
 801da3c:	68bb      	ldr	r3, [r7, #8]
 801da3e:	b21b      	sxth	r3, r3
 801da40:	823b      	strh	r3, [r7, #16]
 801da42:	68bb      	ldr	r3, [r7, #8]
 801da44:	b29a      	uxth	r2, r3
 801da46:	683b      	ldr	r3, [r7, #0]
 801da48:	b29b      	uxth	r3, r3
 801da4a:	4413      	add	r3, r2
 801da4c:	b29b      	uxth	r3, r3
 801da4e:	b21b      	sxth	r3, r3
 801da50:	827b      	strh	r3, [r7, #18]
 801da52:	687b      	ldr	r3, [r7, #4]
 801da54:	b21b      	sxth	r3, r3
 801da56:	82bb      	strh	r3, [r7, #20]
 801da58:	687b      	ldr	r3, [r7, #4]
 801da5a:	b29a      	uxth	r2, r3
 801da5c:	6a3b      	ldr	r3, [r7, #32]
 801da5e:	b29b      	uxth	r3, r3
 801da60:	4413      	add	r3, r2
 801da62:	b29b      	uxth	r3, r3
 801da64:	b21b      	sxth	r3, r3
 801da66:	82fb      	strh	r3, [r7, #22]
    cogui_widget_set_rect(widget, &rect);
 801da68:	f107 0310 	add.w	r3, r7, #16
 801da6c:	4619      	mov	r1, r3
 801da6e:	68f8      	ldr	r0, [r7, #12]
 801da70:	f7ff ff92 	bl	801d998 <cogui_widget_set_rect>

    COGUI_SET_RECT(&widget->inner_extent, 0, 0, width, height);
 801da74:	68fb      	ldr	r3, [r7, #12]
 801da76:	2200      	movs	r2, #0
 801da78:	835a      	strh	r2, [r3, #26]
 801da7a:	683b      	ldr	r3, [r7, #0]
 801da7c:	b21a      	sxth	r2, r3
 801da7e:	68fb      	ldr	r3, [r7, #12]
 801da80:	839a      	strh	r2, [r3, #28]
 801da82:	68fb      	ldr	r3, [r7, #12]
 801da84:	2200      	movs	r2, #0
 801da86:	83da      	strh	r2, [r3, #30]
 801da88:	6a3b      	ldr	r3, [r7, #32]
 801da8a:	b21a      	sxth	r2, r3
 801da8c:	68fb      	ldr	r3, [r7, #12]
 801da8e:	841a      	strh	r2, [r3, #32]
}
 801da90:	bf00      	nop
 801da92:	3718      	adds	r7, #24
 801da94:	46bd      	mov	sp, r7
 801da96:	bd80      	pop	{r7, pc}

0801da98 <cogui_widget_set_minsize>:

void cogui_widget_set_minsize(cogui_widget_t *widget, S32 width, S32 height)
{
 801da98:	b580      	push	{r7, lr}
 801da9a:	b084      	sub	sp, #16
 801da9c:	af00      	add	r7, sp, #0
 801da9e:	60f8      	str	r0, [r7, #12]
 801daa0:	60b9      	str	r1, [r7, #8]
 801daa2:	607a      	str	r2, [r7, #4]
    COGUI_ASSERT(widget != Co_NULL);
 801daa4:	68fb      	ldr	r3, [r7, #12]
 801daa6:	2b00      	cmp	r3, #0
 801daa8:	d105      	bne.n	801dab6 <cogui_widget_set_minsize+0x1e>
 801daaa:	f240 1283 	movw	r2, #387	; 0x183
 801daae:	4908      	ldr	r1, [pc, #32]	; (801dad0 <cogui_widget_set_minsize+0x38>)
 801dab0:	4808      	ldr	r0, [pc, #32]	; (801dad4 <cogui_widget_set_minsize+0x3c>)
 801dab2:	f7ff fb19 	bl	801d0e8 <cogui_assert_handler>

    widget->min_width = width;
 801dab6:	68bb      	ldr	r3, [r7, #8]
 801dab8:	b21a      	sxth	r2, r3
 801daba:	68fb      	ldr	r3, [r7, #12]
 801dabc:	845a      	strh	r2, [r3, #34]	; 0x22
    widget->min_height = height;
 801dabe:	687b      	ldr	r3, [r7, #4]
 801dac0:	b21a      	sxth	r2, r3
 801dac2:	68fb      	ldr	r3, [r7, #12]
 801dac4:	849a      	strh	r2, [r3, #36]	; 0x24
}
 801dac6:	bf00      	nop
 801dac8:	3710      	adds	r7, #16
 801daca:	46bd      	mov	sp, r7
 801dacc:	bd80      	pop	{r7, pc}
 801dace:	bf00      	nop
 801dad0:	080259a4 	.word	0x080259a4
 801dad4:	0802583c 	.word	0x0802583c

0801dad8 <cogui_widget_set_minwidth>:

void cogui_widget_set_minwidth(cogui_widget_t *widget, S32 width)
{
 801dad8:	b580      	push	{r7, lr}
 801dada:	b082      	sub	sp, #8
 801dadc:	af00      	add	r7, sp, #0
 801dade:	6078      	str	r0, [r7, #4]
 801dae0:	6039      	str	r1, [r7, #0]
    COGUI_ASSERT(widget != Co_NULL);
 801dae2:	687b      	ldr	r3, [r7, #4]
 801dae4:	2b00      	cmp	r3, #0
 801dae6:	d105      	bne.n	801daf4 <cogui_widget_set_minwidth+0x1c>
 801dae8:	f240 128b 	movw	r2, #395	; 0x18b
 801daec:	4905      	ldr	r1, [pc, #20]	; (801db04 <cogui_widget_set_minwidth+0x2c>)
 801daee:	4806      	ldr	r0, [pc, #24]	; (801db08 <cogui_widget_set_minwidth+0x30>)
 801daf0:	f7ff fafa 	bl	801d0e8 <cogui_assert_handler>

    widget->min_width = width;
 801daf4:	683b      	ldr	r3, [r7, #0]
 801daf6:	b21a      	sxth	r2, r3
 801daf8:	687b      	ldr	r3, [r7, #4]
 801dafa:	845a      	strh	r2, [r3, #34]	; 0x22
}
 801dafc:	bf00      	nop
 801dafe:	3708      	adds	r7, #8
 801db00:	46bd      	mov	sp, r7
 801db02:	bd80      	pop	{r7, pc}
 801db04:	080259c0 	.word	0x080259c0
 801db08:	0802583c 	.word	0x0802583c

0801db0c <cogui_widget_set_mingheight>:

void cogui_widget_set_mingheight(cogui_widget_t *widget, S32 height)
{
 801db0c:	b580      	push	{r7, lr}
 801db0e:	b082      	sub	sp, #8
 801db10:	af00      	add	r7, sp, #0
 801db12:	6078      	str	r0, [r7, #4]
 801db14:	6039      	str	r1, [r7, #0]
    COGUI_ASSERT(widget != Co_NULL);
 801db16:	687b      	ldr	r3, [r7, #4]
 801db18:	2b00      	cmp	r3, #0
 801db1a:	d105      	bne.n	801db28 <cogui_widget_set_mingheight+0x1c>
 801db1c:	f44f 72c9 	mov.w	r2, #402	; 0x192
 801db20:	4905      	ldr	r1, [pc, #20]	; (801db38 <cogui_widget_set_mingheight+0x2c>)
 801db22:	4806      	ldr	r0, [pc, #24]	; (801db3c <cogui_widget_set_mingheight+0x30>)
 801db24:	f7ff fae0 	bl	801d0e8 <cogui_assert_handler>

    widget->min_height = height;
 801db28:	683b      	ldr	r3, [r7, #0]
 801db2a:	b21a      	sxth	r2, r3
 801db2c:	687b      	ldr	r3, [r7, #4]
 801db2e:	849a      	strh	r2, [r3, #36]	; 0x24
}
 801db30:	bf00      	nop
 801db32:	3708      	adds	r7, #8
 801db34:	46bd      	mov	sp, r7
 801db36:	bd80      	pop	{r7, pc}
 801db38:	080259dc 	.word	0x080259dc
 801db3c:	0802583c 	.word	0x0802583c

0801db40 <cogui_widget_enable_border>:

void cogui_widget_enable_border(cogui_widget_t *widget)
{
 801db40:	b580      	push	{r7, lr}
 801db42:	b082      	sub	sp, #8
 801db44:	af00      	add	r7, sp, #0
 801db46:	6078      	str	r0, [r7, #4]
    COGUI_ASSERT(widget != Co_NULL);
 801db48:	687b      	ldr	r3, [r7, #4]
 801db4a:	2b00      	cmp	r3, #0
 801db4c:	d105      	bne.n	801db5a <cogui_widget_enable_border+0x1a>
 801db4e:	f240 1299 	movw	r2, #409	; 0x199
 801db52:	4909      	ldr	r1, [pc, #36]	; (801db78 <cogui_widget_enable_border+0x38>)
 801db54:	4809      	ldr	r0, [pc, #36]	; (801db7c <cogui_widget_enable_border+0x3c>)
 801db56:	f7ff fac7 	bl	801d0e8 <cogui_assert_handler>

    widget->flag |= COGUI_WIDGET_BORDER;
 801db5a:	687b      	ldr	r3, [r7, #4]
 801db5c:	689b      	ldr	r3, [r3, #8]
 801db5e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 801db62:	687b      	ldr	r3, [r7, #4]
 801db64:	609a      	str	r2, [r3, #8]

    cogui_screen_refresh(widget->top);
 801db66:	687b      	ldr	r3, [r7, #4]
 801db68:	685b      	ldr	r3, [r3, #4]
 801db6a:	4618      	mov	r0, r3
 801db6c:	f7ff fd2b 	bl	801d5c6 <cogui_screen_refresh>
}
 801db70:	bf00      	nop
 801db72:	3708      	adds	r7, #8
 801db74:	46bd      	mov	sp, r7
 801db76:	bd80      	pop	{r7, pc}
 801db78:	080259f8 	.word	0x080259f8
 801db7c:	0802583c 	.word	0x0802583c

0801db80 <cogui_widget_set_font>:

void cogui_widget_set_font(cogui_widget_t* widget, cogui_font_t *font)
{
 801db80:	b580      	push	{r7, lr}
 801db82:	b082      	sub	sp, #8
 801db84:	af00      	add	r7, sp, #0
 801db86:	6078      	str	r0, [r7, #4]
 801db88:	6039      	str	r1, [r7, #0]
    COGUI_ASSERT(widget != Co_NULL);
 801db8a:	687b      	ldr	r3, [r7, #4]
 801db8c:	2b00      	cmp	r3, #0
 801db8e:	d105      	bne.n	801db9c <cogui_widget_set_font+0x1c>
 801db90:	f44f 72d1 	mov.w	r2, #418	; 0x1a2
 801db94:	4909      	ldr	r1, [pc, #36]	; (801dbbc <cogui_widget_set_font+0x3c>)
 801db96:	480a      	ldr	r0, [pc, #40]	; (801dbc0 <cogui_widget_set_font+0x40>)
 801db98:	f7ff faa6 	bl	801d0e8 <cogui_assert_handler>
    COGUI_ASSERT(font != Co_NULL);
 801db9c:	683b      	ldr	r3, [r7, #0]
 801db9e:	2b00      	cmp	r3, #0
 801dba0:	d105      	bne.n	801dbae <cogui_widget_set_font+0x2e>
 801dba2:	f240 12a3 	movw	r2, #419	; 0x1a3
 801dba6:	4905      	ldr	r1, [pc, #20]	; (801dbbc <cogui_widget_set_font+0x3c>)
 801dba8:	4806      	ldr	r0, [pc, #24]	; (801dbc4 <cogui_widget_set_font+0x44>)
 801dbaa:	f7ff fa9d 	bl	801d0e8 <cogui_assert_handler>

    widget->gc.font = font;
 801dbae:	687b      	ldr	r3, [r7, #4]
 801dbb0:	683a      	ldr	r2, [r7, #0]
 801dbb2:	641a      	str	r2, [r3, #64]	; 0x40
}
 801dbb4:	bf00      	nop
 801dbb6:	3708      	adds	r7, #8
 801dbb8:	46bd      	mov	sp, r7
 801dbba:	bd80      	pop	{r7, pc}
 801dbbc:	08025a14 	.word	0x08025a14
 801dbc0:	0802583c 	.word	0x0802583c
 801dbc4:	08025870 	.word	0x08025870

0801dbc8 <cogui_widget_set_text_align>:

void cogui_widget_set_text_align(cogui_widget_t *widget, co_uint16_t style)
{
 801dbc8:	b580      	push	{r7, lr}
 801dbca:	b082      	sub	sp, #8
 801dbcc:	af00      	add	r7, sp, #0
 801dbce:	6078      	str	r0, [r7, #4]
 801dbd0:	460b      	mov	r3, r1
 801dbd2:	807b      	strh	r3, [r7, #2]
    COGUI_ASSERT(widget != Co_NULL);
 801dbd4:	687b      	ldr	r3, [r7, #4]
 801dbd6:	2b00      	cmp	r3, #0
 801dbd8:	d105      	bne.n	801dbe6 <cogui_widget_set_text_align+0x1e>
 801dbda:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 801dbde:	4906      	ldr	r1, [pc, #24]	; (801dbf8 <cogui_widget_set_text_align+0x30>)
 801dbe0:	4806      	ldr	r0, [pc, #24]	; (801dbfc <cogui_widget_set_text_align+0x34>)
 801dbe2:	f7ff fa81 	bl	801d0e8 <cogui_assert_handler>

    widget->gc.text_align = style;
 801dbe6:	687b      	ldr	r3, [r7, #4]
 801dbe8:	887a      	ldrh	r2, [r7, #2]
 801dbea:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
}
 801dbee:	bf00      	nop
 801dbf0:	3708      	adds	r7, #8
 801dbf2:	46bd      	mov	sp, r7
 801dbf4:	bd80      	pop	{r7, pc}
 801dbf6:	bf00      	nop
 801dbf8:	08025a2c 	.word	0x08025a2c
 801dbfc:	0802583c 	.word	0x0802583c

0801dc00 <cogui_widget_set_text>:

void cogui_widget_set_text(cogui_widget_t *widget, const char *text)
{
 801dc00:	b580      	push	{r7, lr}
 801dc02:	b082      	sub	sp, #8
 801dc04:	af00      	add	r7, sp, #0
 801dc06:	6078      	str	r0, [r7, #4]
 801dc08:	6039      	str	r1, [r7, #0]
    COGUI_ASSERT(widget != Co_NULL);
 801dc0a:	687b      	ldr	r3, [r7, #4]
 801dc0c:	2b00      	cmp	r3, #0
 801dc0e:	d105      	bne.n	801dc1c <cogui_widget_set_text+0x1c>
 801dc10:	f240 12b1 	movw	r2, #433	; 0x1b1
 801dc14:	4909      	ldr	r1, [pc, #36]	; (801dc3c <cogui_widget_set_text+0x3c>)
 801dc16:	480a      	ldr	r0, [pc, #40]	; (801dc40 <cogui_widget_set_text+0x40>)
 801dc18:	f7ff fa66 	bl	801d0e8 <cogui_assert_handler>

    widget->flag |= COGUI_WIDGET_FLAG_HAS_TEXT;
 801dc1c:	687b      	ldr	r3, [r7, #4]
 801dc1e:	689b      	ldr	r3, [r3, #8]
 801dc20:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 801dc24:	687b      	ldr	r3, [r7, #4]
 801dc26:	609a      	str	r2, [r3, #8]
    
    widget->text = cogui_strdup(text);
 801dc28:	6838      	ldr	r0, [r7, #0]
 801dc2a:	f7fe ff6d 	bl	801cb08 <cogui_strdup>
 801dc2e:	4602      	mov	r2, r0
 801dc30:	687b      	ldr	r3, [r7, #4]
 801dc32:	651a      	str	r2, [r3, #80]	; 0x50
}
 801dc34:	bf00      	nop
 801dc36:	3708      	adds	r7, #8
 801dc38:	46bd      	mov	sp, r7
 801dc3a:	bd80      	pop	{r7, pc}
 801dc3c:	08025a48 	.word	0x08025a48
 801dc40:	0802583c 	.word	0x0802583c

0801dc44 <cogui_widget_append_text>:

void cogui_widget_append_text(cogui_widget_t *widget, const char *text)
{
 801dc44:	b5f0      	push	{r4, r5, r6, r7, lr}
 801dc46:	b087      	sub	sp, #28
 801dc48:	af00      	add	r7, sp, #0
 801dc4a:	6078      	str	r0, [r7, #4]
 801dc4c:	6039      	str	r1, [r7, #0]
    COGUI_ASSERT(widget != Co_NULL);
 801dc4e:	687b      	ldr	r3, [r7, #4]
 801dc50:	2b00      	cmp	r3, #0
 801dc52:	d105      	bne.n	801dc60 <cogui_widget_append_text+0x1c>
 801dc54:	f44f 72dd 	mov.w	r2, #442	; 0x1ba
 801dc58:	492b      	ldr	r1, [pc, #172]	; (801dd08 <cogui_widget_append_text+0xc4>)
 801dc5a:	482c      	ldr	r0, [pc, #176]	; (801dd0c <cogui_widget_append_text+0xc8>)
 801dc5c:	f7ff fa44 	bl	801d0e8 <cogui_assert_handler>
    
    /* if this is first text, just call set_text to do finish work */
    if (!(widget->flag & COGUI_WIDGET_FLAG_HAS_TEXT)) {
 801dc60:	687b      	ldr	r3, [r7, #4]
 801dc62:	689b      	ldr	r3, [r3, #8]
 801dc64:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801dc68:	2b00      	cmp	r3, #0
 801dc6a:	d104      	bne.n	801dc76 <cogui_widget_append_text+0x32>
        cogui_widget_set_text(widget, text);
 801dc6c:	6839      	ldr	r1, [r7, #0]
 801dc6e:	6878      	ldr	r0, [r7, #4]
 801dc70:	f7ff ffc6 	bl	801dc00 <cogui_widget_set_text>
        return;
 801dc74:	e045      	b.n	801dd02 <cogui_widget_append_text+0xbe>
    }
    
    co_uint64_t len = cogui_strlen(text) + cogui_strlen(widget->text) + 1;
 801dc76:	6838      	ldr	r0, [r7, #0]
 801dc78:	f7fe ff2d 	bl	801cad6 <cogui_strlen>
 801dc7c:	4605      	mov	r5, r0
 801dc7e:	460e      	mov	r6, r1
 801dc80:	687b      	ldr	r3, [r7, #4]
 801dc82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801dc84:	4618      	mov	r0, r3
 801dc86:	f7fe ff26 	bl	801cad6 <cogui_strlen>
 801dc8a:	4603      	mov	r3, r0
 801dc8c:	460c      	mov	r4, r1
 801dc8e:	1959      	adds	r1, r3, r5
 801dc90:	eb44 0206 	adc.w	r2, r4, r6
 801dc94:	1c4b      	adds	r3, r1, #1
 801dc96:	f142 0400 	adc.w	r4, r2, #0
 801dc9a:	e9c7 3404 	strd	r3, r4, [r7, #16]
    char * new_text = (char *)cogui_malloc(len);
 801dc9e:	693b      	ldr	r3, [r7, #16]
 801dca0:	4618      	mov	r0, r3
 801dca2:	f7fe fd21 	bl	801c6e8 <cogui_malloc>
 801dca6:	60f8      	str	r0, [r7, #12]

    /* create new string and put 'text' on original text's end */
    cogui_memcpy(new_text, widget->text, cogui_strlen(widget->text));
 801dca8:	687b      	ldr	r3, [r7, #4]
 801dcaa:	6d1c      	ldr	r4, [r3, #80]	; 0x50
 801dcac:	687b      	ldr	r3, [r7, #4]
 801dcae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801dcb0:	4618      	mov	r0, r3
 801dcb2:	f7fe ff10 	bl	801cad6 <cogui_strlen>
 801dcb6:	4602      	mov	r2, r0
 801dcb8:	460b      	mov	r3, r1
 801dcba:	4621      	mov	r1, r4
 801dcbc:	68f8      	ldr	r0, [r7, #12]
 801dcbe:	f7fe fe35 	bl	801c92c <cogui_memcpy>
    cogui_memcpy(new_text+cogui_strlen(widget->text), text, cogui_strlen(text)+1);
 801dcc2:	687b      	ldr	r3, [r7, #4]
 801dcc4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801dcc6:	4618      	mov	r0, r3
 801dcc8:	f7fe ff05 	bl	801cad6 <cogui_strlen>
 801dccc:	4603      	mov	r3, r0
 801dcce:	460c      	mov	r4, r1
 801dcd0:	461a      	mov	r2, r3
 801dcd2:	68fb      	ldr	r3, [r7, #12]
 801dcd4:	189d      	adds	r5, r3, r2
 801dcd6:	6838      	ldr	r0, [r7, #0]
 801dcd8:	f7fe fefd 	bl	801cad6 <cogui_strlen>
 801dcdc:	460a      	mov	r2, r1
 801dcde:	4601      	mov	r1, r0
 801dce0:	1c4b      	adds	r3, r1, #1
 801dce2:	f142 0400 	adc.w	r4, r2, #0
 801dce6:	461a      	mov	r2, r3
 801dce8:	4623      	mov	r3, r4
 801dcea:	6839      	ldr	r1, [r7, #0]
 801dcec:	4628      	mov	r0, r5
 801dcee:	f7fe fe1d 	bl	801c92c <cogui_memcpy>

    /* after copy original text, free it */
    cogui_free(widget->text);
 801dcf2:	687b      	ldr	r3, [r7, #4]
 801dcf4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801dcf6:	4618      	mov	r0, r3
 801dcf8:	f7fe fd0e 	bl	801c718 <cogui_free>

    widget->text = new_text;
 801dcfc:	687b      	ldr	r3, [r7, #4]
 801dcfe:	68fa      	ldr	r2, [r7, #12]
 801dd00:	651a      	str	r2, [r3, #80]	; 0x50
}
 801dd02:	371c      	adds	r7, #28
 801dd04:	46bd      	mov	sp, r7
 801dd06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801dd08:	08025a60 	.word	0x08025a60
 801dd0c:	0802583c 	.word	0x0802583c

0801dd10 <cogui_widget_clear_text>:

void cogui_widget_clear_text(cogui_widget_t *widget)
{
 801dd10:	b580      	push	{r7, lr}
 801dd12:	b082      	sub	sp, #8
 801dd14:	af00      	add	r7, sp, #0
 801dd16:	6078      	str	r0, [r7, #4]
    widget->flag &= ~COGUI_WIDGET_FLAG_HAS_TEXT;
 801dd18:	687b      	ldr	r3, [r7, #4]
 801dd1a:	689b      	ldr	r3, [r3, #8]
 801dd1c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 801dd20:	687b      	ldr	r3, [r7, #4]
 801dd22:	609a      	str	r2, [r3, #8]

    /* free text pointer if needed */
    if (widget->text) {
 801dd24:	687b      	ldr	r3, [r7, #4]
 801dd26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801dd28:	2b00      	cmp	r3, #0
 801dd2a:	d004      	beq.n	801dd36 <cogui_widget_clear_text+0x26>
        cogui_free(widget->text);
 801dd2c:	687b      	ldr	r3, [r7, #4]
 801dd2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801dd30:	4618      	mov	r0, r3
 801dd32:	f7fe fcf1 	bl	801c718 <cogui_free>
    }
}
 801dd36:	bf00      	nop
 801dd38:	3708      	adds	r7, #8
 801dd3a:	46bd      	mov	sp, r7
 801dd3c:	bd80      	pop	{r7, pc}

0801dd3e <_cogui_widget_move>:

static void _cogui_widget_move(cogui_widget_t *widget, S32 dx, S32 dy)
{
 801dd3e:	b580      	push	{r7, lr}
 801dd40:	b084      	sub	sp, #16
 801dd42:	af00      	add	r7, sp, #0
 801dd44:	60f8      	str	r0, [r7, #12]
 801dd46:	60b9      	str	r1, [r7, #8]
 801dd48:	607a      	str	r2, [r7, #4]
    widget->extent.x1 += dx;
 801dd4a:	68fb      	ldr	r3, [r7, #12]
 801dd4c:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 801dd50:	b29a      	uxth	r2, r3
 801dd52:	68bb      	ldr	r3, [r7, #8]
 801dd54:	b29b      	uxth	r3, r3
 801dd56:	4413      	add	r3, r2
 801dd58:	b29b      	uxth	r3, r3
 801dd5a:	b21a      	sxth	r2, r3
 801dd5c:	68fb      	ldr	r3, [r7, #12]
 801dd5e:	825a      	strh	r2, [r3, #18]
    widget->extent.x2 += dx;
 801dd60:	68fb      	ldr	r3, [r7, #12]
 801dd62:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 801dd66:	b29a      	uxth	r2, r3
 801dd68:	68bb      	ldr	r3, [r7, #8]
 801dd6a:	b29b      	uxth	r3, r3
 801dd6c:	4413      	add	r3, r2
 801dd6e:	b29b      	uxth	r3, r3
 801dd70:	b21a      	sxth	r2, r3
 801dd72:	68fb      	ldr	r3, [r7, #12]
 801dd74:	829a      	strh	r2, [r3, #20]

    widget->extent.y1 += dy;
 801dd76:	68fb      	ldr	r3, [r7, #12]
 801dd78:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 801dd7c:	b29a      	uxth	r2, r3
 801dd7e:	687b      	ldr	r3, [r7, #4]
 801dd80:	b29b      	uxth	r3, r3
 801dd82:	4413      	add	r3, r2
 801dd84:	b29b      	uxth	r3, r3
 801dd86:	b21a      	sxth	r2, r3
 801dd88:	68fb      	ldr	r3, [r7, #12]
 801dd8a:	82da      	strh	r2, [r3, #22]
    widget->extent.y2 += dy;
 801dd8c:	68fb      	ldr	r3, [r7, #12]
 801dd8e:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 801dd92:	b29a      	uxth	r2, r3
 801dd94:	687b      	ldr	r3, [r7, #4]
 801dd96:	b29b      	uxth	r3, r3
 801dd98:	4413      	add	r3, r2
 801dd9a:	b29b      	uxth	r3, r3
 801dd9c:	b21a      	sxth	r2, r3
 801dd9e:	68fb      	ldr	r3, [r7, #12]
 801dda0:	831a      	strh	r2, [r3, #24]

	cogui_screen_refresh(widget->top);
 801dda2:	68fb      	ldr	r3, [r7, #12]
 801dda4:	685b      	ldr	r3, [r3, #4]
 801dda6:	4618      	mov	r0, r3
 801dda8:	f7ff fc0d 	bl	801d5c6 <cogui_screen_refresh>
}
 801ddac:	bf00      	nop
 801ddae:	3710      	adds	r7, #16
 801ddb0:	46bd      	mov	sp, r7
 801ddb2:	bd80      	pop	{r7, pc}

0801ddb4 <cogui_widget_move_to_logic>:

void cogui_widget_move_to_logic(cogui_widget_t *widget, S32 dx, S32 dy)
{
 801ddb4:	b580      	push	{r7, lr}
 801ddb6:	b084      	sub	sp, #16
 801ddb8:	af00      	add	r7, sp, #0
 801ddba:	60f8      	str	r0, [r7, #12]
 801ddbc:	60b9      	str	r1, [r7, #8]
 801ddbe:	607a      	str	r2, [r7, #4]
    if (widget == Co_NULL) {
 801ddc0:	68fb      	ldr	r3, [r7, #12]
 801ddc2:	2b00      	cmp	r3, #0
 801ddc4:	d005      	beq.n	801ddd2 <cogui_widget_move_to_logic+0x1e>
        return;
    }
	
	_cogui_widget_move(widget, dx, dy);
 801ddc6:	687a      	ldr	r2, [r7, #4]
 801ddc8:	68b9      	ldr	r1, [r7, #8]
 801ddca:	68f8      	ldr	r0, [r7, #12]
 801ddcc:	f7ff ffb7 	bl	801dd3e <_cogui_widget_move>
 801ddd0:	e000      	b.n	801ddd4 <cogui_widget_move_to_logic+0x20>
        return;
 801ddd2:	bf00      	nop
}
 801ddd4:	3710      	adds	r7, #16
 801ddd6:	46bd      	mov	sp, r7
 801ddd8:	bd80      	pop	{r7, pc}

0801ddda <cogui_widget_point_l2p>:

void cogui_widget_point_l2p(cogui_widget_t *widget, cogui_point_t *point)
{
 801ddda:	b580      	push	{r7, lr}
 801dddc:	b082      	sub	sp, #8
 801ddde:	af00      	add	r7, sp, #0
 801dde0:	6078      	str	r0, [r7, #4]
 801dde2:	6039      	str	r1, [r7, #0]
    COGUI_ASSERT(widget != Co_NULL);
 801dde4:	687b      	ldr	r3, [r7, #4]
 801dde6:	2b00      	cmp	r3, #0
 801dde8:	d105      	bne.n	801ddf6 <cogui_widget_point_l2p+0x1c>
 801ddea:	f240 12ef 	movw	r2, #495	; 0x1ef
 801ddee:	4912      	ldr	r1, [pc, #72]	; (801de38 <cogui_widget_point_l2p+0x5e>)
 801ddf0:	4812      	ldr	r0, [pc, #72]	; (801de3c <cogui_widget_point_l2p+0x62>)
 801ddf2:	f7ff f979 	bl	801d0e8 <cogui_assert_handler>

    if (point != Co_NULL) {
 801ddf6:	683b      	ldr	r3, [r7, #0]
 801ddf8:	2b00      	cmp	r3, #0
 801ddfa:	d019      	beq.n	801de30 <cogui_widget_point_l2p+0x56>
        point->x += widget->extent.x1;
 801ddfc:	683b      	ldr	r3, [r7, #0]
 801ddfe:	f9b3 3000 	ldrsh.w	r3, [r3]
 801de02:	b29a      	uxth	r2, r3
 801de04:	687b      	ldr	r3, [r7, #4]
 801de06:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 801de0a:	b29b      	uxth	r3, r3
 801de0c:	4413      	add	r3, r2
 801de0e:	b29b      	uxth	r3, r3
 801de10:	b21a      	sxth	r2, r3
 801de12:	683b      	ldr	r3, [r7, #0]
 801de14:	801a      	strh	r2, [r3, #0]
        point->y += widget->extent.y1;
 801de16:	683b      	ldr	r3, [r7, #0]
 801de18:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801de1c:	b29a      	uxth	r2, r3
 801de1e:	687b      	ldr	r3, [r7, #4]
 801de20:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 801de24:	b29b      	uxth	r3, r3
 801de26:	4413      	add	r3, r2
 801de28:	b29b      	uxth	r3, r3
 801de2a:	b21a      	sxth	r2, r3
 801de2c:	683b      	ldr	r3, [r7, #0]
 801de2e:	805a      	strh	r2, [r3, #2]
    }
}
 801de30:	bf00      	nop
 801de32:	3708      	adds	r7, #8
 801de34:	46bd      	mov	sp, r7
 801de36:	bd80      	pop	{r7, pc}
 801de38:	08025a7c 	.word	0x08025a7c
 801de3c:	0802583c 	.word	0x0802583c

0801de40 <cogui_widget_rect_l2p>:

void cogui_widget_rect_l2p(cogui_widget_t *widget, cogui_rect_t *rect)
{
 801de40:	b580      	push	{r7, lr}
 801de42:	b082      	sub	sp, #8
 801de44:	af00      	add	r7, sp, #0
 801de46:	6078      	str	r0, [r7, #4]
 801de48:	6039      	str	r1, [r7, #0]
    COGUI_ASSERT(widget != Co_NULL);
 801de4a:	687b      	ldr	r3, [r7, #4]
 801de4c:	2b00      	cmp	r3, #0
 801de4e:	d105      	bne.n	801de5c <cogui_widget_rect_l2p+0x1c>
 801de50:	f240 12f9 	movw	r2, #505	; 0x1f9
 801de54:	491f      	ldr	r1, [pc, #124]	; (801ded4 <cogui_widget_rect_l2p+0x94>)
 801de56:	4820      	ldr	r0, [pc, #128]	; (801ded8 <cogui_widget_rect_l2p+0x98>)
 801de58:	f7ff f946 	bl	801d0e8 <cogui_assert_handler>

    if (rect != Co_NULL) {
 801de5c:	683b      	ldr	r3, [r7, #0]
 801de5e:	2b00      	cmp	r3, #0
 801de60:	d033      	beq.n	801deca <cogui_widget_rect_l2p+0x8a>
        rect->x1 += widget->extent.x1;
 801de62:	683b      	ldr	r3, [r7, #0]
 801de64:	f9b3 3000 	ldrsh.w	r3, [r3]
 801de68:	b29a      	uxth	r2, r3
 801de6a:	687b      	ldr	r3, [r7, #4]
 801de6c:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 801de70:	b29b      	uxth	r3, r3
 801de72:	4413      	add	r3, r2
 801de74:	b29b      	uxth	r3, r3
 801de76:	b21a      	sxth	r2, r3
 801de78:	683b      	ldr	r3, [r7, #0]
 801de7a:	801a      	strh	r2, [r3, #0]
        rect->x2 += widget->extent.x1;
 801de7c:	683b      	ldr	r3, [r7, #0]
 801de7e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801de82:	b29a      	uxth	r2, r3
 801de84:	687b      	ldr	r3, [r7, #4]
 801de86:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 801de8a:	b29b      	uxth	r3, r3
 801de8c:	4413      	add	r3, r2
 801de8e:	b29b      	uxth	r3, r3
 801de90:	b21a      	sxth	r2, r3
 801de92:	683b      	ldr	r3, [r7, #0]
 801de94:	805a      	strh	r2, [r3, #2]

        rect->y1 += widget->extent.y1;
 801de96:	683b      	ldr	r3, [r7, #0]
 801de98:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801de9c:	b29a      	uxth	r2, r3
 801de9e:	687b      	ldr	r3, [r7, #4]
 801dea0:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 801dea4:	b29b      	uxth	r3, r3
 801dea6:	4413      	add	r3, r2
 801dea8:	b29b      	uxth	r3, r3
 801deaa:	b21a      	sxth	r2, r3
 801deac:	683b      	ldr	r3, [r7, #0]
 801deae:	809a      	strh	r2, [r3, #4]
        rect->y2 += widget->extent.y1;
 801deb0:	683b      	ldr	r3, [r7, #0]
 801deb2:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801deb6:	b29a      	uxth	r2, r3
 801deb8:	687b      	ldr	r3, [r7, #4]
 801deba:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 801debe:	b29b      	uxth	r3, r3
 801dec0:	4413      	add	r3, r2
 801dec2:	b29b      	uxth	r3, r3
 801dec4:	b21a      	sxth	r2, r3
 801dec6:	683b      	ldr	r3, [r7, #0]
 801dec8:	80da      	strh	r2, [r3, #6]
    }
}
 801deca:	bf00      	nop
 801decc:	3708      	adds	r7, #8
 801dece:	46bd      	mov	sp, r7
 801ded0:	bd80      	pop	{r7, pc}
 801ded2:	bf00      	nop
 801ded4:	08025a94 	.word	0x08025a94
 801ded8:	0802583c 	.word	0x0802583c

0801dedc <cogui_widget_point_p2l>:

void cogui_widget_point_p2l(cogui_widget_t *widget, cogui_point_t *point)
{
 801dedc:	b580      	push	{r7, lr}
 801dede:	b082      	sub	sp, #8
 801dee0:	af00      	add	r7, sp, #0
 801dee2:	6078      	str	r0, [r7, #4]
 801dee4:	6039      	str	r1, [r7, #0]
    COGUI_ASSERT(widget != Co_NULL);
 801dee6:	687b      	ldr	r3, [r7, #4]
 801dee8:	2b00      	cmp	r3, #0
 801deea:	d105      	bne.n	801def8 <cogui_widget_point_p2l+0x1c>
 801deec:	f240 2206 	movw	r2, #518	; 0x206
 801def0:	4912      	ldr	r1, [pc, #72]	; (801df3c <cogui_widget_point_p2l+0x60>)
 801def2:	4813      	ldr	r0, [pc, #76]	; (801df40 <cogui_widget_point_p2l+0x64>)
 801def4:	f7ff f8f8 	bl	801d0e8 <cogui_assert_handler>

    if (point != Co_NULL) {
 801def8:	683b      	ldr	r3, [r7, #0]
 801defa:	2b00      	cmp	r3, #0
 801defc:	d019      	beq.n	801df32 <cogui_widget_point_p2l+0x56>
        point->x -= widget->extent.x1;
 801defe:	683b      	ldr	r3, [r7, #0]
 801df00:	f9b3 3000 	ldrsh.w	r3, [r3]
 801df04:	b29a      	uxth	r2, r3
 801df06:	687b      	ldr	r3, [r7, #4]
 801df08:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 801df0c:	b29b      	uxth	r3, r3
 801df0e:	1ad3      	subs	r3, r2, r3
 801df10:	b29b      	uxth	r3, r3
 801df12:	b21a      	sxth	r2, r3
 801df14:	683b      	ldr	r3, [r7, #0]
 801df16:	801a      	strh	r2, [r3, #0]
        point->y -= widget->extent.y1;
 801df18:	683b      	ldr	r3, [r7, #0]
 801df1a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801df1e:	b29a      	uxth	r2, r3
 801df20:	687b      	ldr	r3, [r7, #4]
 801df22:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 801df26:	b29b      	uxth	r3, r3
 801df28:	1ad3      	subs	r3, r2, r3
 801df2a:	b29b      	uxth	r3, r3
 801df2c:	b21a      	sxth	r2, r3
 801df2e:	683b      	ldr	r3, [r7, #0]
 801df30:	805a      	strh	r2, [r3, #2]
    }    
}
 801df32:	bf00      	nop
 801df34:	3708      	adds	r7, #8
 801df36:	46bd      	mov	sp, r7
 801df38:	bd80      	pop	{r7, pc}
 801df3a:	bf00      	nop
 801df3c:	08025aac 	.word	0x08025aac
 801df40:	0802583c 	.word	0x0802583c

0801df44 <cogui_widget_rect_p2l>:

void cogui_widget_rect_p2l(cogui_widget_t *widget, cogui_rect_t *rect)
{
 801df44:	b580      	push	{r7, lr}
 801df46:	b082      	sub	sp, #8
 801df48:	af00      	add	r7, sp, #0
 801df4a:	6078      	str	r0, [r7, #4]
 801df4c:	6039      	str	r1, [r7, #0]
    COGUI_ASSERT(widget != Co_NULL);
 801df4e:	687b      	ldr	r3, [r7, #4]
 801df50:	2b00      	cmp	r3, #0
 801df52:	d105      	bne.n	801df60 <cogui_widget_rect_p2l+0x1c>
 801df54:	f44f 7204 	mov.w	r2, #528	; 0x210
 801df58:	491f      	ldr	r1, [pc, #124]	; (801dfd8 <cogui_widget_rect_p2l+0x94>)
 801df5a:	4820      	ldr	r0, [pc, #128]	; (801dfdc <cogui_widget_rect_p2l+0x98>)
 801df5c:	f7ff f8c4 	bl	801d0e8 <cogui_assert_handler>
    
    if (rect != Co_NULL) {
 801df60:	683b      	ldr	r3, [r7, #0]
 801df62:	2b00      	cmp	r3, #0
 801df64:	d033      	beq.n	801dfce <cogui_widget_rect_p2l+0x8a>
        rect->x1 -= widget->extent.x1;
 801df66:	683b      	ldr	r3, [r7, #0]
 801df68:	f9b3 3000 	ldrsh.w	r3, [r3]
 801df6c:	b29a      	uxth	r2, r3
 801df6e:	687b      	ldr	r3, [r7, #4]
 801df70:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 801df74:	b29b      	uxth	r3, r3
 801df76:	1ad3      	subs	r3, r2, r3
 801df78:	b29b      	uxth	r3, r3
 801df7a:	b21a      	sxth	r2, r3
 801df7c:	683b      	ldr	r3, [r7, #0]
 801df7e:	801a      	strh	r2, [r3, #0]
        rect->x2 -= widget->extent.x1;
 801df80:	683b      	ldr	r3, [r7, #0]
 801df82:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801df86:	b29a      	uxth	r2, r3
 801df88:	687b      	ldr	r3, [r7, #4]
 801df8a:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 801df8e:	b29b      	uxth	r3, r3
 801df90:	1ad3      	subs	r3, r2, r3
 801df92:	b29b      	uxth	r3, r3
 801df94:	b21a      	sxth	r2, r3
 801df96:	683b      	ldr	r3, [r7, #0]
 801df98:	805a      	strh	r2, [r3, #2]

        rect->y1 -= widget->extent.y1;
 801df9a:	683b      	ldr	r3, [r7, #0]
 801df9c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801dfa0:	b29a      	uxth	r2, r3
 801dfa2:	687b      	ldr	r3, [r7, #4]
 801dfa4:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 801dfa8:	b29b      	uxth	r3, r3
 801dfaa:	1ad3      	subs	r3, r2, r3
 801dfac:	b29b      	uxth	r3, r3
 801dfae:	b21a      	sxth	r2, r3
 801dfb0:	683b      	ldr	r3, [r7, #0]
 801dfb2:	809a      	strh	r2, [r3, #4]
        rect->y2 -= widget->extent.y1;
 801dfb4:	683b      	ldr	r3, [r7, #0]
 801dfb6:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801dfba:	b29a      	uxth	r2, r3
 801dfbc:	687b      	ldr	r3, [r7, #4]
 801dfbe:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 801dfc2:	b29b      	uxth	r3, r3
 801dfc4:	1ad3      	subs	r3, r2, r3
 801dfc6:	b29b      	uxth	r3, r3
 801dfc8:	b21a      	sxth	r2, r3
 801dfca:	683b      	ldr	r3, [r7, #0]
 801dfcc:	80da      	strh	r2, [r3, #6]
    }
}
 801dfce:	bf00      	nop
 801dfd0:	3708      	adds	r7, #8
 801dfd2:	46bd      	mov	sp, r7
 801dfd4:	bd80      	pop	{r7, pc}
 801dfd6:	bf00      	nop
 801dfd8:	08025ac4 	.word	0x08025ac4
 801dfdc:	0802583c 	.word	0x0802583c

0801dfe0 <cogui_widget_show>:

StatusType cogui_widget_show(cogui_widget_t *widget)
{
 801dfe0:	b580      	push	{r7, lr}
 801dfe2:	b090      	sub	sp, #64	; 0x40
 801dfe4:	af00      	add	r7, sp, #0
 801dfe6:	6078      	str	r0, [r7, #4]
    struct cogui_event event;
    COGUI_ASSERT(widget != Co_NULL);
 801dfe8:	687b      	ldr	r3, [r7, #4]
 801dfea:	2b00      	cmp	r3, #0
 801dfec:	d105      	bne.n	801dffa <cogui_widget_show+0x1a>
 801dfee:	f240 221e 	movw	r2, #542	; 0x21e
 801dff2:	4917      	ldr	r1, [pc, #92]	; (801e050 <cogui_widget_show+0x70>)
 801dff4:	4817      	ldr	r0, [pc, #92]	; (801e054 <cogui_widget_show+0x74>)
 801dff6:	f7ff f877 	bl	801d0e8 <cogui_assert_handler>

    StatusType result;

    if (widget->flag & COGUI_WIDGET_FLAG_SHOWN)
 801dffa:	687b      	ldr	r3, [r7, #4]
 801dffc:	689b      	ldr	r3, [r3, #8]
 801dffe:	f003 0301 	and.w	r3, r3, #1
 801e002:	2b00      	cmp	r3, #0
 801e004:	d001      	beq.n	801e00a <cogui_widget_show+0x2a>
        return GUI_E_ERROR;
 801e006:	2316      	movs	r3, #22
 801e008:	e01d      	b.n	801e046 <cogui_widget_show+0x66>

    widget->flag |= COGUI_WIDGET_FLAG_SHOWN;
 801e00a:	687b      	ldr	r3, [r7, #4]
 801e00c:	689b      	ldr	r3, [r3, #8]
 801e00e:	f043 0201 	orr.w	r2, r3, #1
 801e012:	687b      	ldr	r3, [r7, #4]
 801e014:	609a      	str	r2, [r3, #8]

    COGUI_EVENT_INIT(&event, COGUI_EVENT_WIDGET_SHOW);
 801e016:	2303      	movs	r3, #3
 801e018:	723b      	strb	r3, [r7, #8]
 801e01a:	f7fd fa01 	bl	801b420 <cogui_app_self>
 801e01e:	4603      	mov	r3, r0
 801e020:	60fb      	str	r3, [r7, #12]
 801e022:	2300      	movs	r3, #0
 801e024:	743b      	strb	r3, [r7, #16]

    if (widget->handler != Co_NULL)
 801e026:	687b      	ldr	r3, [r7, #4]
 801e028:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801e02a:	2b00      	cmp	r3, #0
 801e02c:	d009      	beq.n	801e042 <cogui_widget_show+0x62>
        result = widget->handler(widget, &event);
 801e02e:	687b      	ldr	r3, [r7, #4]
 801e030:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801e032:	f107 0208 	add.w	r2, r7, #8
 801e036:	4611      	mov	r1, r2
 801e038:	6878      	ldr	r0, [r7, #4]
 801e03a:	4798      	blx	r3
 801e03c:	4603      	mov	r3, r0
 801e03e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

    return result;
 801e042:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 801e046:	4618      	mov	r0, r3
 801e048:	3740      	adds	r7, #64	; 0x40
 801e04a:	46bd      	mov	sp, r7
 801e04c:	bd80      	pop	{r7, pc}
 801e04e:	bf00      	nop
 801e050:	08025adc 	.word	0x08025adc
 801e054:	0802583c 	.word	0x0802583c

0801e058 <cogui_widget_hide>:

StatusType cogui_widget_hide(cogui_widget_t *widget)
{
 801e058:	b580      	push	{r7, lr}
 801e05a:	b090      	sub	sp, #64	; 0x40
 801e05c:	af00      	add	r7, sp, #0
 801e05e:	6078      	str	r0, [r7, #4]
    struct cogui_event event;
    COGUI_ASSERT(widget != Co_NULL);
 801e060:	687b      	ldr	r3, [r7, #4]
 801e062:	2b00      	cmp	r3, #0
 801e064:	d105      	bne.n	801e072 <cogui_widget_hide+0x1a>
 801e066:	f240 2232 	movw	r2, #562	; 0x232
 801e06a:	4917      	ldr	r1, [pc, #92]	; (801e0c8 <cogui_widget_hide+0x70>)
 801e06c:	4817      	ldr	r0, [pc, #92]	; (801e0cc <cogui_widget_hide+0x74>)
 801e06e:	f7ff f83b 	bl	801d0e8 <cogui_assert_handler>

    StatusType result;

    if (!(widget->flag & COGUI_WIDGET_FLAG_SHOWN))
 801e072:	687b      	ldr	r3, [r7, #4]
 801e074:	689b      	ldr	r3, [r3, #8]
 801e076:	f003 0301 	and.w	r3, r3, #1
 801e07a:	2b00      	cmp	r3, #0
 801e07c:	d101      	bne.n	801e082 <cogui_widget_hide+0x2a>
        return GUI_E_ERROR;
 801e07e:	2316      	movs	r3, #22
 801e080:	e01d      	b.n	801e0be <cogui_widget_hide+0x66>
    
    widget->flag &= ~COGUI_WIDGET_FLAG_SHOWN;
 801e082:	687b      	ldr	r3, [r7, #4]
 801e084:	689b      	ldr	r3, [r3, #8]
 801e086:	f023 0201 	bic.w	r2, r3, #1
 801e08a:	687b      	ldr	r3, [r7, #4]
 801e08c:	609a      	str	r2, [r3, #8]

    COGUI_EVENT_INIT(&event, COGUI_EVENT_WIDGET_HIDE);
 801e08e:	2304      	movs	r3, #4
 801e090:	723b      	strb	r3, [r7, #8]
 801e092:	f7fd f9c5 	bl	801b420 <cogui_app_self>
 801e096:	4603      	mov	r3, r0
 801e098:	60fb      	str	r3, [r7, #12]
 801e09a:	2300      	movs	r3, #0
 801e09c:	743b      	strb	r3, [r7, #16]
    
    if (widget->handler != Co_NULL)
 801e09e:	687b      	ldr	r3, [r7, #4]
 801e0a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801e0a2:	2b00      	cmp	r3, #0
 801e0a4:	d009      	beq.n	801e0ba <cogui_widget_hide+0x62>
        result = widget->handler(widget, &event);
 801e0a6:	687b      	ldr	r3, [r7, #4]
 801e0a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801e0aa:	f107 0208 	add.w	r2, r7, #8
 801e0ae:	4611      	mov	r1, r2
 801e0b0:	6878      	ldr	r0, [r7, #4]
 801e0b2:	4798      	blx	r3
 801e0b4:	4603      	mov	r3, r0
 801e0b6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

    return result;
 801e0ba:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 801e0be:	4618      	mov	r0, r3
 801e0c0:	3740      	adds	r7, #64	; 0x40
 801e0c2:	46bd      	mov	sp, r7
 801e0c4:	bd80      	pop	{r7, pc}
 801e0c6:	bf00      	nop
 801e0c8:	08025af0 	.word	0x08025af0
 801e0cc:	0802583c 	.word	0x0802583c

0801e0d0 <cogui_widget_onshow>:

StatusType cogui_widget_onshow(cogui_widget_t *widget, struct cogui_event *event)
{
 801e0d0:	b580      	push	{r7, lr}
 801e0d2:	b082      	sub	sp, #8
 801e0d4:	af00      	add	r7, sp, #0
 801e0d6:	6078      	str	r0, [r7, #4]
 801e0d8:	6039      	str	r1, [r7, #0]
    if (!(widget->flag & COGUI_WIDGET_FLAG_SHOWN))
 801e0da:	687b      	ldr	r3, [r7, #4]
 801e0dc:	689b      	ldr	r3, [r3, #8]
 801e0de:	f003 0301 	and.w	r3, r3, #1
 801e0e2:	2b00      	cmp	r3, #0
 801e0e4:	d101      	bne.n	801e0ea <cogui_widget_onshow+0x1a>
        return GUI_E_ERROR;
 801e0e6:	2316      	movs	r3, #22
 801e0e8:	e003      	b.n	801e0f2 <cogui_widget_onshow+0x22>

    cogui_widget_focus(widget);
 801e0ea:	6878      	ldr	r0, [r7, #4]
 801e0ec:	f7ff fb76 	bl	801d7dc <cogui_widget_focus>

    return GUI_E_OK;
 801e0f0:	2317      	movs	r3, #23
}
 801e0f2:	4618      	mov	r0, r3
 801e0f4:	3708      	adds	r7, #8
 801e0f6:	46bd      	mov	sp, r7
 801e0f8:	bd80      	pop	{r7, pc}

0801e0fa <cogui_widget_onhide>:

StatusType cogui_widget_onhide(cogui_widget_t *widget, struct cogui_event *event)
{
 801e0fa:	b580      	push	{r7, lr}
 801e0fc:	b082      	sub	sp, #8
 801e0fe:	af00      	add	r7, sp, #0
 801e100:	6078      	str	r0, [r7, #4]
 801e102:	6039      	str	r1, [r7, #0]
    if (widget->flag & COGUI_WIDGET_FLAG_SHOWN) {
 801e104:	687b      	ldr	r3, [r7, #4]
 801e106:	689b      	ldr	r3, [r3, #8]
 801e108:	f003 0301 	and.w	r3, r3, #1
 801e10c:	2b00      	cmp	r3, #0
 801e10e:	d001      	beq.n	801e114 <cogui_widget_onhide+0x1a>
        return GUI_E_ERROR;
 801e110:	2316      	movs	r3, #22
 801e112:	e005      	b.n	801e120 <cogui_widget_onhide+0x26>
    }

	cogui_screen_refresh(widget->top);
 801e114:	687b      	ldr	r3, [r7, #4]
 801e116:	685b      	ldr	r3, [r3, #4]
 801e118:	4618      	mov	r0, r3
 801e11a:	f7ff fa54 	bl	801d5c6 <cogui_screen_refresh>

    return GUI_E_OK;
 801e11e:	2317      	movs	r3, #23
}
 801e120:	4618      	mov	r0, r3
 801e122:	3708      	adds	r7, #8
 801e124:	46bd      	mov	sp, r7
 801e126:	bd80      	pop	{r7, pc}

0801e128 <cogui_widget_event_handler>:

void cogui_widget_update(cogui_widget_t *widget);

StatusType cogui_widget_event_handler(cogui_widget_t *widget, struct cogui_event *event)
{
 801e128:	b580      	push	{r7, lr}
 801e12a:	b084      	sub	sp, #16
 801e12c:	af00      	add	r7, sp, #0
 801e12e:	6078      	str	r0, [r7, #4]
 801e130:	6039      	str	r1, [r7, #0]
    COGUI_ASSERT(widget != Co_NULL);
 801e132:	687b      	ldr	r3, [r7, #4]
 801e134:	2b00      	cmp	r3, #0
 801e136:	d105      	bne.n	801e144 <cogui_widget_event_handler+0x1c>
 801e138:	f44f 7217 	mov.w	r2, #604	; 0x25c
 801e13c:	4915      	ldr	r1, [pc, #84]	; (801e194 <cogui_widget_event_handler+0x6c>)
 801e13e:	4816      	ldr	r0, [pc, #88]	; (801e198 <cogui_widget_event_handler+0x70>)
 801e140:	f7fe ffd2 	bl	801d0e8 <cogui_assert_handler>
    COGUI_ASSERT(event != Co_NULL);
 801e144:	683b      	ldr	r3, [r7, #0]
 801e146:	2b00      	cmp	r3, #0
 801e148:	d105      	bne.n	801e156 <cogui_widget_event_handler+0x2e>
 801e14a:	f240 225d 	movw	r2, #605	; 0x25d
 801e14e:	4911      	ldr	r1, [pc, #68]	; (801e194 <cogui_widget_event_handler+0x6c>)
 801e150:	4812      	ldr	r0, [pc, #72]	; (801e19c <cogui_widget_event_handler+0x74>)
 801e152:	f7fe ffc9 	bl	801d0e8 <cogui_assert_handler>

    StatusType result = GUI_E_ERROR;
 801e156:	2316      	movs	r3, #22
 801e158:	73fb      	strb	r3, [r7, #15]

    switch (event->type)
 801e15a:	683b      	ldr	r3, [r7, #0]
 801e15c:	781b      	ldrb	r3, [r3, #0]
 801e15e:	2b03      	cmp	r3, #3
 801e160:	d002      	beq.n	801e168 <cogui_widget_event_handler+0x40>
 801e162:	2b04      	cmp	r3, #4
 801e164:	d008      	beq.n	801e178 <cogui_widget_event_handler+0x50>
 801e166:	e00f      	b.n	801e188 <cogui_widget_event_handler+0x60>
    {
    case COGUI_EVENT_WIDGET_SHOW:
        result = cogui_widget_onshow(widget, event);
 801e168:	6839      	ldr	r1, [r7, #0]
 801e16a:	6878      	ldr	r0, [r7, #4]
 801e16c:	f7ff ffb0 	bl	801e0d0 <cogui_widget_onshow>
 801e170:	4603      	mov	r3, r0
 801e172:	73fb      	strb	r3, [r7, #15]
        return result;
 801e174:	7bfb      	ldrb	r3, [r7, #15]
 801e176:	e008      	b.n	801e18a <cogui_widget_event_handler+0x62>

     case COGUI_EVENT_WIDGET_HIDE:
        result = cogui_widget_onhide(widget, event);
 801e178:	6839      	ldr	r1, [r7, #0]
 801e17a:	6878      	ldr	r0, [r7, #4]
 801e17c:	f7ff ffbd 	bl	801e0fa <cogui_widget_onhide>
 801e180:	4603      	mov	r3, r0
 801e182:	73fb      	strb	r3, [r7, #15]
        return result;
 801e184:	7bfb      	ldrb	r3, [r7, #15]
 801e186:	e000      	b.n	801e18a <cogui_widget_event_handler+0x62>
    }

	return result;
 801e188:	7bfb      	ldrb	r3, [r7, #15]
}
 801e18a:	4618      	mov	r0, r3
 801e18c:	3710      	adds	r7, #16
 801e18e:	46bd      	mov	sp, r7
 801e190:	bd80      	pop	{r7, pc}
 801e192:	bf00      	nop
 801e194:	08025b04 	.word	0x08025b04
 801e198:	0802583c 	.word	0x0802583c
 801e19c:	08025880 	.word	0x08025880

0801e1a0 <cogui_widget_list_print>:

#ifdef COGUI_DEBUG_PRINT
void cogui_widget_list_print(struct cogui_window *top)
{
 801e1a0:	b580      	push	{r7, lr}
 801e1a2:	b084      	sub	sp, #16
 801e1a4:	af00      	add	r7, sp, #0
 801e1a6:	6078      	str	r0, [r7, #4]
    cogui_widget_t *tmp = top->widget_list;
 801e1a8:	687b      	ldr	r3, [r7, #4]
 801e1aa:	685b      	ldr	r3, [r3, #4]
 801e1ac:	60fb      	str	r3, [r7, #12]
    
    cogui_printf("Widget list: ");
 801e1ae:	480b      	ldr	r0, [pc, #44]	; (801e1dc <cogui_widget_list_print+0x3c>)
 801e1b0:	f7fe fdba 	bl	801cd28 <cogui_printf>
    
    while (tmp != Co_NULL) {
 801e1b4:	e006      	b.n	801e1c4 <cogui_widget_list_print+0x24>
        cogui_printf("0x%x ", tmp);
 801e1b6:	68f9      	ldr	r1, [r7, #12]
 801e1b8:	4809      	ldr	r0, [pc, #36]	; (801e1e0 <cogui_widget_list_print+0x40>)
 801e1ba:	f7fe fdb5 	bl	801cd28 <cogui_printf>

        tmp = tmp->next;
 801e1be:	68fb      	ldr	r3, [r7, #12]
 801e1c0:	681b      	ldr	r3, [r3, #0]
 801e1c2:	60fb      	str	r3, [r7, #12]
    while (tmp != Co_NULL) {
 801e1c4:	68fb      	ldr	r3, [r7, #12]
 801e1c6:	2b00      	cmp	r3, #0
 801e1c8:	d1f5      	bne.n	801e1b6 <cogui_widget_list_print+0x16>
    }

    cogui_printf("0x%x\r\n", tmp);
 801e1ca:	68f9      	ldr	r1, [r7, #12]
 801e1cc:	4805      	ldr	r0, [pc, #20]	; (801e1e4 <cogui_widget_list_print+0x44>)
 801e1ce:	f7fe fdab 	bl	801cd28 <cogui_printf>
}
 801e1d2:	bf00      	nop
 801e1d4:	3710      	adds	r7, #16
 801e1d6:	46bd      	mov	sp, r7
 801e1d8:	bd80      	pop	{r7, pc}
 801e1da:	bf00      	nop
 801e1dc:	08025894 	.word	0x08025894
 801e1e0:	080258a4 	.word	0x080258a4
 801e1e4:	080258ac 	.word	0x080258ac

0801e1e8 <_cogui_window_init>:
static void cogui_main_page_app_uninstall(co_int16_t);

StatusType cogui_window_event_handler(struct cogui_window * win, struct cogui_event *event);

static void _cogui_window_init(cogui_window_t *win)
{
 801e1e8:	b580      	push	{r7, lr}
 801e1ea:	b082      	sub	sp, #8
 801e1ec:	af00      	add	r7, sp, #0
 801e1ee:	6078      	str	r0, [r7, #4]
    cogui_memset(win, 0, sizeof(cogui_window_t));
 801e1f0:	f04f 0248 	mov.w	r2, #72	; 0x48
 801e1f4:	f04f 0300 	mov.w	r3, #0
 801e1f8:	2100      	movs	r1, #0
 801e1fa:	6878      	ldr	r0, [r7, #4]
 801e1fc:	f7fe fb76 	bl	801c8ec <cogui_memset>

    win->app        = cogui_app_self();
 801e200:	f7fd f90e 	bl	801b420 <cogui_app_self>
 801e204:	4602      	mov	r2, r0
 801e206:	687b      	ldr	r3, [r7, #4]
 801e208:	621a      	str	r2, [r3, #32]
    win->app->win   = win;
 801e20a:	687b      	ldr	r3, [r7, #4]
 801e20c:	6a1b      	ldr	r3, [r3, #32]
 801e20e:	687a      	ldr	r2, [r7, #4]
 801e210:	611a      	str	r2, [r3, #16]

    win->title_name = cogui_app_self()->name;
 801e212:	f7fd f905 	bl	801b420 <cogui_app_self>
 801e216:	4603      	mov	r3, r0
 801e218:	685a      	ldr	r2, [r3, #4]
 801e21a:	687b      	ldr	r3, [r7, #4]
 801e21c:	629a      	str	r2, [r3, #40]	; 0x28

    win->flag       = COGUI_WINDOW_FLAG_INIT;
 801e21e:	687b      	ldr	r3, [r7, #4]
 801e220:	2200      	movs	r2, #0
 801e222:	60da      	str	r2, [r3, #12]
    win->handler    = cogui_window_event_handler;
 801e224:	687b      	ldr	r3, [r7, #4]
 801e226:	4a03      	ldr	r2, [pc, #12]	; (801e234 <_cogui_window_init+0x4c>)
 801e228:	645a      	str	r2, [r3, #68]	; 0x44
}
 801e22a:	bf00      	nop
 801e22c:	3708      	adds	r7, #8
 801e22e:	46bd      	mov	sp, r7
 801e230:	bd80      	pop	{r7, pc}
 801e232:	bf00      	nop
 801e234:	0801e9a5 	.word	0x0801e9a5

0801e238 <cogui_window_create>:

cogui_window_t *cogui_window_create(co_uint16_t style)
{
 801e238:	b580      	push	{r7, lr}
 801e23a:	b084      	sub	sp, #16
 801e23c:	af00      	add	r7, sp, #0
 801e23e:	4603      	mov	r3, r0
 801e240:	80fb      	strh	r3, [r7, #6]
    co_int16_t id = -1;
 801e242:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801e246:	81fb      	strh	r3, [r7, #14]
    if (main_page) {
 801e248:	4b1b      	ldr	r3, [pc, #108]	; (801e2b8 <cogui_window_create+0x80>)
 801e24a:	681b      	ldr	r3, [r3, #0]
 801e24c:	2b00      	cmp	r3, #0
 801e24e:	d008      	beq.n	801e262 <cogui_window_create+0x2a>
        id = cogui_main_page_app_install(cogui_app_self()->name);
 801e250:	f7fd f8e6 	bl	801b420 <cogui_app_self>
 801e254:	4603      	mov	r3, r0
 801e256:	685b      	ldr	r3, [r3, #4]
 801e258:	4618      	mov	r0, r3
 801e25a:	f000 f913 	bl	801e484 <cogui_main_page_app_install>
 801e25e:	4603      	mov	r3, r0
 801e260:	81fb      	strh	r3, [r7, #14]
    }

    cogui_window_t *win;
    win = cogui_malloc(sizeof(cogui_window_t));
 801e262:	2048      	movs	r0, #72	; 0x48
 801e264:	f7fe fa40 	bl	801c6e8 <cogui_malloc>
 801e268:	60b8      	str	r0, [r7, #8]
    if (win == Co_NULL)
 801e26a:	68bb      	ldr	r3, [r7, #8]
 801e26c:	2b00      	cmp	r3, #0
 801e26e:	d101      	bne.n	801e274 <cogui_window_create+0x3c>
        return Co_NULL;
 801e270:	2300      	movs	r3, #0
 801e272:	e01d      	b.n	801e2b0 <cogui_window_create+0x78>

    _cogui_window_init(win);
 801e274:	68b8      	ldr	r0, [r7, #8]
 801e276:	f7ff ffb7 	bl	801e1e8 <_cogui_window_init>

    cogui_widget_list_init(win);
 801e27a:	68b8      	ldr	r0, [r7, #8]
 801e27c:	f7ff f8cb 	bl	801d416 <cogui_widget_list_init>

    if (!(style & COGUI_WINDOW_STYLE_NO_TITLE)) {
 801e280:	88fb      	ldrh	r3, [r7, #6]
 801e282:	f003 0301 	and.w	r3, r3, #1
 801e286:	2b00      	cmp	r3, #0
 801e288:	d108      	bne.n	801e29c <cogui_window_create+0x64>
        win->title = cogui_widget_create(win);
 801e28a:	68b8      	ldr	r0, [r7, #8]
 801e28c:	f7ff f850 	bl	801d330 <cogui_widget_create>
 801e290:	4602      	mov	r2, r0
 801e292:	68bb      	ldr	r3, [r7, #8]
 801e294:	625a      	str	r2, [r3, #36]	; 0x24
        cogui_title_create(win);
 801e296:	68b8      	ldr	r0, [r7, #8]
 801e298:	f7fe ff46 	bl	801d128 <cogui_title_create>
    }

    win->style = style;
 801e29c:	68bb      	ldr	r3, [r7, #8]
 801e29e:	88fa      	ldrh	r2, [r7, #6]
 801e2a0:	815a      	strh	r2, [r3, #10]
    win->magic = COGUI_WINDOW_MAGIC;
 801e2a2:	68bb      	ldr	r3, [r7, #8]
 801e2a4:	4a05      	ldr	r2, [pc, #20]	; (801e2bc <cogui_window_create+0x84>)
 801e2a6:	601a      	str	r2, [r3, #0]
    win->id    = id;
 801e2a8:	68bb      	ldr	r3, [r7, #8]
 801e2aa:	89fa      	ldrh	r2, [r7, #14]
 801e2ac:	811a      	strh	r2, [r3, #8]

    return win;
 801e2ae:	68bb      	ldr	r3, [r7, #8]
}
 801e2b0:	4618      	mov	r0, r3
 801e2b2:	3710      	adds	r7, #16
 801e2b4:	46bd      	mov	sp, r7
 801e2b6:	bd80      	pop	{r7, pc}
 801e2b8:	2000d774 	.word	0x2000d774
 801e2bc:	57696e00 	.word	0x57696e00

0801e2c0 <cogui_main_window_create>:

cogui_window_t *cogui_main_window_create(void)
{
 801e2c0:	b590      	push	{r4, r7, lr}
 801e2c2:	b087      	sub	sp, #28
 801e2c4:	af02      	add	r7, sp, #8
    cogui_window_t *win     = cogui_window_create_without_title();
 801e2c6:	2001      	movs	r0, #1
 801e2c8:	f7ff ffb6 	bl	801e238 <cogui_window_create>
 801e2cc:	60b8      	str	r0, [r7, #8]
    cogui_widget_t *widget;
    co_uint16_t     i;

    widget = cogui_widget_create(win);
 801e2ce:	68b8      	ldr	r0, [r7, #8]
 801e2d0:	f7ff f82e 	bl	801d330 <cogui_widget_create>
 801e2d4:	6078      	str	r0, [r7, #4]
    cogui_widget_set_rectangle(widget, 0, 0, 240, 40);
 801e2d6:	2328      	movs	r3, #40	; 0x28
 801e2d8:	9300      	str	r3, [sp, #0]
 801e2da:	23f0      	movs	r3, #240	; 0xf0
 801e2dc:	2200      	movs	r2, #0
 801e2de:	2100      	movs	r1, #0
 801e2e0:	6878      	ldr	r0, [r7, #4]
 801e2e2:	f7ff fb8c 	bl	801d9fe <cogui_widget_set_rectangle>
    widget->gc.background = COGUI_BLACK;
 801e2e6:	687a      	ldr	r2, [r7, #4]
 801e2e8:	f04f 0300 	mov.w	r3, #0
 801e2ec:	f04f 0400 	mov.w	r4, #0
 801e2f0:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
    widget->flag |= COGUI_WIDGET_FLAG_RECT | COGUI_WIDGET_FLAG_FILLED;
 801e2f4:	687b      	ldr	r3, [r7, #4]
 801e2f6:	689b      	ldr	r3, [r3, #8]
 801e2f8:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 801e2fc:	687b      	ldr	r3, [r7, #4]
 801e2fe:	609a      	str	r2, [r3, #8]
    cogui_widget_set_text(widget, "CoOS");
 801e300:	495c      	ldr	r1, [pc, #368]	; (801e474 <cogui_main_window_create+0x1b4>)
 801e302:	6878      	ldr	r0, [r7, #4]
 801e304:	f7ff fc7c 	bl	801dc00 <cogui_widget_set_text>
    cogui_widget_set_font(widget, &tm_font_16x26);
 801e308:	495b      	ldr	r1, [pc, #364]	; (801e478 <cogui_main_window_create+0x1b8>)
 801e30a:	6878      	ldr	r0, [r7, #4]
 801e30c:	f7ff fc38 	bl	801db80 <cogui_widget_set_font>
    cogui_widget_set_text_align(widget, COGUI_TEXT_ALIGN_CENTER|COGUI_TEXT_ALIGN_MIDDLE);
 801e310:	2114      	movs	r1, #20
 801e312:	6878      	ldr	r0, [r7, #4]
 801e314:	f7ff fc58 	bl	801dbc8 <cogui_widget_set_text_align>
    COGUI_WIDGET_ENABLE(widget);
 801e318:	687b      	ldr	r3, [r7, #4]
 801e31a:	689b      	ldr	r3, [r3, #8]
 801e31c:	f043 0201 	orr.w	r2, r3, #1
 801e320:	687b      	ldr	r3, [r7, #4]
 801e322:	609a      	str	r2, [r3, #8]

    for ( i=0; i<9; i++) {
 801e324:	2300      	movs	r3, #0
 801e326:	81fb      	strh	r3, [r7, #14]
 801e328:	e097      	b.n	801e45a <cogui_main_window_create+0x19a>
        widget = cogui_widget_create(win);
 801e32a:	68b8      	ldr	r0, [r7, #8]
 801e32c:	f7ff f800 	bl	801d330 <cogui_widget_create>
 801e330:	6078      	str	r0, [r7, #4]
        cogui_widget_set_rectangle(widget, 15 + (i%3)*75 , 55 + (i/3)*88, 60, 60);
 801e332:	89fa      	ldrh	r2, [r7, #14]
 801e334:	4b51      	ldr	r3, [pc, #324]	; (801e47c <cogui_main_window_create+0x1bc>)
 801e336:	fba3 1302 	umull	r1, r3, r3, r2
 801e33a:	0859      	lsrs	r1, r3, #1
 801e33c:	460b      	mov	r3, r1
 801e33e:	005b      	lsls	r3, r3, #1
 801e340:	440b      	add	r3, r1
 801e342:	1ad3      	subs	r3, r2, r3
 801e344:	b29b      	uxth	r3, r3
 801e346:	461a      	mov	r2, r3
 801e348:	4613      	mov	r3, r2
 801e34a:	009b      	lsls	r3, r3, #2
 801e34c:	4413      	add	r3, r2
 801e34e:	011a      	lsls	r2, r3, #4
 801e350:	1ad3      	subs	r3, r2, r3
 801e352:	f103 010f 	add.w	r1, r3, #15
 801e356:	89fb      	ldrh	r3, [r7, #14]
 801e358:	4a48      	ldr	r2, [pc, #288]	; (801e47c <cogui_main_window_create+0x1bc>)
 801e35a:	fba2 2303 	umull	r2, r3, r2, r3
 801e35e:	085b      	lsrs	r3, r3, #1
 801e360:	b29b      	uxth	r3, r3
 801e362:	461a      	mov	r2, r3
 801e364:	2358      	movs	r3, #88	; 0x58
 801e366:	fb03 f302 	mul.w	r3, r3, r2
 801e36a:	f103 0237 	add.w	r2, r3, #55	; 0x37
 801e36e:	233c      	movs	r3, #60	; 0x3c
 801e370:	9300      	str	r3, [sp, #0]
 801e372:	233c      	movs	r3, #60	; 0x3c
 801e374:	6878      	ldr	r0, [r7, #4]
 801e376:	f7ff fb42 	bl	801d9fe <cogui_widget_set_rectangle>
        widget->gc.foreground = COGUI_GREEN; 
 801e37a:	687a      	ldr	r2, [r7, #4]
 801e37c:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 801e380:	f04f 0400 	mov.w	r4, #0
 801e384:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
        widget->flag |= COGUI_WIDGET_FLAG_RECT;
 801e388:	687b      	ldr	r3, [r7, #4]
 801e38a:	689b      	ldr	r3, [r3, #8]
 801e38c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 801e390:	687b      	ldr	r3, [r7, #4]
 801e392:	609a      	str	r2, [r3, #8]
        COGUI_WIDGET_ENABLE(widget);
 801e394:	687b      	ldr	r3, [r7, #4]
 801e396:	689b      	ldr	r3, [r3, #8]
 801e398:	f043 0201 	orr.w	r2, r3, #1
 801e39c:	687b      	ldr	r3, [r7, #4]
 801e39e:	609a      	str	r2, [r3, #8]
        cogui_widget_set_font(widget, &tm_font_16x26);
 801e3a0:	4935      	ldr	r1, [pc, #212]	; (801e478 <cogui_main_window_create+0x1b8>)
 801e3a2:	6878      	ldr	r0, [r7, #4]
 801e3a4:	f7ff fbec 	bl	801db80 <cogui_widget_set_font>
        cogui_widget_set_text_align(widget, COGUI_TEXT_ALIGN_CENTER|COGUI_TEXT_ALIGN_MIDDLE);
 801e3a8:	2114      	movs	r1, #20
 801e3aa:	6878      	ldr	r0, [r7, #4]
 801e3ac:	f7ff fc0c 	bl	801dbc8 <cogui_widget_set_text_align>

        main_app_table[i].app_icon = widget;
 801e3b0:	89fa      	ldrh	r2, [r7, #14]
 801e3b2:	4933      	ldr	r1, [pc, #204]	; (801e480 <cogui_main_window_create+0x1c0>)
 801e3b4:	4613      	mov	r3, r2
 801e3b6:	005b      	lsls	r3, r3, #1
 801e3b8:	4413      	add	r3, r2
 801e3ba:	009b      	lsls	r3, r3, #2
 801e3bc:	440b      	add	r3, r1
 801e3be:	687a      	ldr	r2, [r7, #4]
 801e3c0:	601a      	str	r2, [r3, #0]

        widget = cogui_widget_create(win);
 801e3c2:	68b8      	ldr	r0, [r7, #8]
 801e3c4:	f7fe ffb4 	bl	801d330 <cogui_widget_create>
 801e3c8:	6078      	str	r0, [r7, #4]
        cogui_widget_set_rectangle(widget, 15 + (i%3)*75 , 115 + (i/3)*88, 60, 13);
 801e3ca:	89fa      	ldrh	r2, [r7, #14]
 801e3cc:	4b2b      	ldr	r3, [pc, #172]	; (801e47c <cogui_main_window_create+0x1bc>)
 801e3ce:	fba3 1302 	umull	r1, r3, r3, r2
 801e3d2:	0859      	lsrs	r1, r3, #1
 801e3d4:	460b      	mov	r3, r1
 801e3d6:	005b      	lsls	r3, r3, #1
 801e3d8:	440b      	add	r3, r1
 801e3da:	1ad3      	subs	r3, r2, r3
 801e3dc:	b29b      	uxth	r3, r3
 801e3de:	461a      	mov	r2, r3
 801e3e0:	4613      	mov	r3, r2
 801e3e2:	009b      	lsls	r3, r3, #2
 801e3e4:	4413      	add	r3, r2
 801e3e6:	011a      	lsls	r2, r3, #4
 801e3e8:	1ad3      	subs	r3, r2, r3
 801e3ea:	f103 010f 	add.w	r1, r3, #15
 801e3ee:	89fb      	ldrh	r3, [r7, #14]
 801e3f0:	4a22      	ldr	r2, [pc, #136]	; (801e47c <cogui_main_window_create+0x1bc>)
 801e3f2:	fba2 2303 	umull	r2, r3, r2, r3
 801e3f6:	085b      	lsrs	r3, r3, #1
 801e3f8:	b29b      	uxth	r3, r3
 801e3fa:	461a      	mov	r2, r3
 801e3fc:	2358      	movs	r3, #88	; 0x58
 801e3fe:	fb03 f302 	mul.w	r3, r3, r2
 801e402:	f103 0273 	add.w	r2, r3, #115	; 0x73
 801e406:	230d      	movs	r3, #13
 801e408:	9300      	str	r3, [sp, #0]
 801e40a:	233c      	movs	r3, #60	; 0x3c
 801e40c:	6878      	ldr	r0, [r7, #4]
 801e40e:	f7ff faf6 	bl	801d9fe <cogui_widget_set_rectangle>
        widget->gc.foreground = COGUI_WHITE; 
 801e412:	687a      	ldr	r2, [r7, #4]
 801e414:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801e418:	f04f 0400 	mov.w	r4, #0
 801e41c:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
        widget->flag |= COGUI_WIDGET_FLAG_RECT| COGUI_WIDGET_FLAG_FILLED;
 801e420:	687b      	ldr	r3, [r7, #4]
 801e422:	689b      	ldr	r3, [r3, #8]
 801e424:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 801e428:	687b      	ldr	r3, [r7, #4]
 801e42a:	609a      	str	r2, [r3, #8]
        cogui_widget_set_text_align(widget, COGUI_TEXT_ALIGN_CENTER|COGUI_TEXT_ALIGN_MIDDLE);
 801e42c:	2114      	movs	r1, #20
 801e42e:	6878      	ldr	r0, [r7, #4]
 801e430:	f7ff fbca 	bl	801dbc8 <cogui_widget_set_text_align>
        COGUI_WIDGET_ENABLE(widget);
 801e434:	687b      	ldr	r3, [r7, #4]
 801e436:	689b      	ldr	r3, [r3, #8]
 801e438:	f043 0201 	orr.w	r2, r3, #1
 801e43c:	687b      	ldr	r3, [r7, #4]
 801e43e:	609a      	str	r2, [r3, #8]

        main_app_table[i].app_title_box = widget;
 801e440:	89fa      	ldrh	r2, [r7, #14]
 801e442:	490f      	ldr	r1, [pc, #60]	; (801e480 <cogui_main_window_create+0x1c0>)
 801e444:	4613      	mov	r3, r2
 801e446:	005b      	lsls	r3, r3, #1
 801e448:	4413      	add	r3, r2
 801e44a:	009b      	lsls	r3, r3, #2
 801e44c:	440b      	add	r3, r1
 801e44e:	3304      	adds	r3, #4
 801e450:	687a      	ldr	r2, [r7, #4]
 801e452:	601a      	str	r2, [r3, #0]
    for ( i=0; i<9; i++) {
 801e454:	89fb      	ldrh	r3, [r7, #14]
 801e456:	3301      	adds	r3, #1
 801e458:	81fb      	strh	r3, [r7, #14]
 801e45a:	89fb      	ldrh	r3, [r7, #14]
 801e45c:	2b08      	cmp	r3, #8
 801e45e:	f67f af64 	bls.w	801e32a <cogui_main_window_create+0x6a>
    }

    cogui_window_show(win);
 801e462:	68b8      	ldr	r0, [r7, #8]
 801e464:	f000 f9d0 	bl	801e808 <cogui_window_show>

    return win;
 801e468:	68bb      	ldr	r3, [r7, #8]
}
 801e46a:	4618      	mov	r0, r3
 801e46c:	3714      	adds	r7, #20
 801e46e:	46bd      	mov	sp, r7
 801e470:	bd90      	pop	{r4, r7, pc}
 801e472:	bf00      	nop
 801e474:	08025b20 	.word	0x08025b20
 801e478:	20000154 	.word	0x20000154
 801e47c:	aaaaaaab 	.word	0xaaaaaaab
 801e480:	2000df9c 	.word	0x2000df9c

0801e484 <cogui_main_page_app_install>:

static co_int16_t cogui_main_page_app_install(char* title)
{
 801e484:	b590      	push	{r4, r7, lr}
 801e486:	b085      	sub	sp, #20
 801e488:	af00      	add	r7, sp, #0
 801e48a:	6078      	str	r0, [r7, #4]
    if (current_app_install_cnt > 9) {
 801e48c:	4b2e      	ldr	r3, [pc, #184]	; (801e548 <cogui_main_page_app_install+0xc4>)
 801e48e:	f9b3 3000 	ldrsh.w	r3, [r3]
 801e492:	2b09      	cmp	r3, #9
 801e494:	dd01      	ble.n	801e49a <cogui_main_page_app_install+0x16>
        return GUI_E_ERROR;
 801e496:	2316      	movs	r3, #22
 801e498:	e052      	b.n	801e540 <cogui_main_page_app_install+0xbc>
    }

    cogui_widget_t *widget;
    char *icon_text = cogui_strdup(title);
 801e49a:	6878      	ldr	r0, [r7, #4]
 801e49c:	f7fe fb34 	bl	801cb08 <cogui_strdup>
 801e4a0:	60f8      	str	r0, [r7, #12]
    icon_text[1] = 0;
 801e4a2:	68fb      	ldr	r3, [r7, #12]
 801e4a4:	3301      	adds	r3, #1
 801e4a6:	2200      	movs	r2, #0
 801e4a8:	701a      	strb	r2, [r3, #0]
    widget = main_app_table[current_app_install_cnt].app_icon;
 801e4aa:	4b27      	ldr	r3, [pc, #156]	; (801e548 <cogui_main_page_app_install+0xc4>)
 801e4ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 801e4b0:	4619      	mov	r1, r3
 801e4b2:	4a26      	ldr	r2, [pc, #152]	; (801e54c <cogui_main_page_app_install+0xc8>)
 801e4b4:	460b      	mov	r3, r1
 801e4b6:	005b      	lsls	r3, r3, #1
 801e4b8:	440b      	add	r3, r1
 801e4ba:	009b      	lsls	r3, r3, #2
 801e4bc:	4413      	add	r3, r2
 801e4be:	681b      	ldr	r3, [r3, #0]
 801e4c0:	60bb      	str	r3, [r7, #8]
    cogui_widget_set_text(widget, icon_text);
 801e4c2:	68f9      	ldr	r1, [r7, #12]
 801e4c4:	68b8      	ldr	r0, [r7, #8]
 801e4c6:	f7ff fb9b 	bl	801dc00 <cogui_widget_set_text>

    widget->flag |= COGUI_WIDGET_FLAG_FILLED;
 801e4ca:	68bb      	ldr	r3, [r7, #8]
 801e4cc:	689b      	ldr	r3, [r3, #8]
 801e4ce:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 801e4d2:	68bb      	ldr	r3, [r7, #8]
 801e4d4:	609a      	str	r2, [r3, #8]
    widget->gc.background = COGUI_GREEN;
 801e4d6:	68ba      	ldr	r2, [r7, #8]
 801e4d8:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 801e4dc:	f04f 0400 	mov.w	r4, #0
 801e4e0:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
    widget->gc.foreground = COGUI_WHITE;
 801e4e4:	68ba      	ldr	r2, [r7, #8]
 801e4e6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801e4ea:	f04f 0400 	mov.w	r4, #0
 801e4ee:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30

    widget = main_app_table[current_app_install_cnt].app_title_box;
 801e4f2:	4b15      	ldr	r3, [pc, #84]	; (801e548 <cogui_main_page_app_install+0xc4>)
 801e4f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 801e4f8:	4619      	mov	r1, r3
 801e4fa:	4a14      	ldr	r2, [pc, #80]	; (801e54c <cogui_main_page_app_install+0xc8>)
 801e4fc:	460b      	mov	r3, r1
 801e4fe:	005b      	lsls	r3, r3, #1
 801e500:	440b      	add	r3, r1
 801e502:	009b      	lsls	r3, r3, #2
 801e504:	4413      	add	r3, r2
 801e506:	3304      	adds	r3, #4
 801e508:	681b      	ldr	r3, [r3, #0]
 801e50a:	60bb      	str	r3, [r7, #8]
    cogui_widget_set_text(widget, title);
 801e50c:	6879      	ldr	r1, [r7, #4]
 801e50e:	68b8      	ldr	r0, [r7, #8]
 801e510:	f7ff fb76 	bl	801dc00 <cogui_widget_set_text>

    main_app_table[current_app_install_cnt].title = title;
 801e514:	4b0c      	ldr	r3, [pc, #48]	; (801e548 <cogui_main_page_app_install+0xc4>)
 801e516:	f9b3 3000 	ldrsh.w	r3, [r3]
 801e51a:	4619      	mov	r1, r3
 801e51c:	4a0b      	ldr	r2, [pc, #44]	; (801e54c <cogui_main_page_app_install+0xc8>)
 801e51e:	460b      	mov	r3, r1
 801e520:	005b      	lsls	r3, r3, #1
 801e522:	440b      	add	r3, r1
 801e524:	009b      	lsls	r3, r3, #2
 801e526:	4413      	add	r3, r2
 801e528:	3308      	adds	r3, #8
 801e52a:	687a      	ldr	r2, [r7, #4]
 801e52c:	601a      	str	r2, [r3, #0]

    return current_app_install_cnt++;
 801e52e:	4b06      	ldr	r3, [pc, #24]	; (801e548 <cogui_main_page_app_install+0xc4>)
 801e530:	f9b3 3000 	ldrsh.w	r3, [r3]
 801e534:	b29a      	uxth	r2, r3
 801e536:	3201      	adds	r2, #1
 801e538:	b292      	uxth	r2, r2
 801e53a:	b211      	sxth	r1, r2
 801e53c:	4a02      	ldr	r2, [pc, #8]	; (801e548 <cogui_main_page_app_install+0xc4>)
 801e53e:	8011      	strh	r1, [r2, #0]
}
 801e540:	4618      	mov	r0, r3
 801e542:	3714      	adds	r7, #20
 801e544:	46bd      	mov	sp, r7
 801e546:	bd90      	pop	{r4, r7, pc}
 801e548:	2000df98 	.word	0x2000df98
 801e54c:	2000df9c 	.word	0x2000df9c

0801e550 <cogui_main_page_app_uninstall>:

static void cogui_main_page_app_uninstall(co_int16_t id)
{
 801e550:	b590      	push	{r4, r7, lr}
 801e552:	b085      	sub	sp, #20
 801e554:	af00      	add	r7, sp, #0
 801e556:	4603      	mov	r3, r0
 801e558:	80fb      	strh	r3, [r7, #6]
    COGUI_ASSERT((id < current_app_install_cnt) && (id >= 0));
 801e55a:	4b4d      	ldr	r3, [pc, #308]	; (801e690 <cogui_main_page_app_uninstall+0x140>)
 801e55c:	f9b3 3000 	ldrsh.w	r3, [r3]
 801e560:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 801e564:	429a      	cmp	r2, r3
 801e566:	da03      	bge.n	801e570 <cogui_main_page_app_uninstall+0x20>
 801e568:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801e56c:	2b00      	cmp	r3, #0
 801e56e:	da04      	bge.n	801e57a <cogui_main_page_app_uninstall+0x2a>
 801e570:	2283      	movs	r2, #131	; 0x83
 801e572:	4948      	ldr	r1, [pc, #288]	; (801e694 <cogui_main_page_app_uninstall+0x144>)
 801e574:	4848      	ldr	r0, [pc, #288]	; (801e698 <cogui_main_page_app_uninstall+0x148>)
 801e576:	f7fe fdb7 	bl	801d0e8 <cogui_assert_handler>

    main_app_table[id].app_icon->flag &= ~COGUI_WIDGET_FLAG_FILLED;
 801e57a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 801e57e:	4947      	ldr	r1, [pc, #284]	; (801e69c <cogui_main_page_app_uninstall+0x14c>)
 801e580:	4613      	mov	r3, r2
 801e582:	005b      	lsls	r3, r3, #1
 801e584:	4413      	add	r3, r2
 801e586:	009b      	lsls	r3, r3, #2
 801e588:	440b      	add	r3, r1
 801e58a:	681b      	ldr	r3, [r3, #0]
 801e58c:	6899      	ldr	r1, [r3, #8]
 801e58e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 801e592:	4842      	ldr	r0, [pc, #264]	; (801e69c <cogui_main_page_app_uninstall+0x14c>)
 801e594:	4613      	mov	r3, r2
 801e596:	005b      	lsls	r3, r3, #1
 801e598:	4413      	add	r3, r2
 801e59a:	009b      	lsls	r3, r3, #2
 801e59c:	4403      	add	r3, r0
 801e59e:	681b      	ldr	r3, [r3, #0]
 801e5a0:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 801e5a4:	609a      	str	r2, [r3, #8]
    main_app_table[id].title = Co_NULL;
 801e5a6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 801e5aa:	493c      	ldr	r1, [pc, #240]	; (801e69c <cogui_main_page_app_uninstall+0x14c>)
 801e5ac:	4613      	mov	r3, r2
 801e5ae:	005b      	lsls	r3, r3, #1
 801e5b0:	4413      	add	r3, r2
 801e5b2:	009b      	lsls	r3, r3, #2
 801e5b4:	440b      	add	r3, r1
 801e5b6:	3308      	adds	r3, #8
 801e5b8:	2200      	movs	r2, #0
 801e5ba:	601a      	str	r2, [r3, #0]

    cogui_widget_clear_text(main_app_table[id].app_icon);
 801e5bc:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 801e5c0:	4936      	ldr	r1, [pc, #216]	; (801e69c <cogui_main_page_app_uninstall+0x14c>)
 801e5c2:	4613      	mov	r3, r2
 801e5c4:	005b      	lsls	r3, r3, #1
 801e5c6:	4413      	add	r3, r2
 801e5c8:	009b      	lsls	r3, r3, #2
 801e5ca:	440b      	add	r3, r1
 801e5cc:	681b      	ldr	r3, [r3, #0]
 801e5ce:	4618      	mov	r0, r3
 801e5d0:	f7ff fb9e 	bl	801dd10 <cogui_widget_clear_text>
    cogui_widget_clear_text(main_app_table[id].app_title_box);
 801e5d4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 801e5d8:	4930      	ldr	r1, [pc, #192]	; (801e69c <cogui_main_page_app_uninstall+0x14c>)
 801e5da:	4613      	mov	r3, r2
 801e5dc:	005b      	lsls	r3, r3, #1
 801e5de:	4413      	add	r3, r2
 801e5e0:	009b      	lsls	r3, r3, #2
 801e5e2:	440b      	add	r3, r1
 801e5e4:	3304      	adds	r3, #4
 801e5e6:	681b      	ldr	r3, [r3, #0]
 801e5e8:	4618      	mov	r0, r3
 801e5ea:	f7ff fb91 	bl	801dd10 <cogui_widget_clear_text>

    cogui_widget_t *widget;    
    widget = main_app_table[current_app_install_cnt].app_icon;
 801e5ee:	4b28      	ldr	r3, [pc, #160]	; (801e690 <cogui_main_page_app_uninstall+0x140>)
 801e5f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 801e5f4:	4619      	mov	r1, r3
 801e5f6:	4a29      	ldr	r2, [pc, #164]	; (801e69c <cogui_main_page_app_uninstall+0x14c>)
 801e5f8:	460b      	mov	r3, r1
 801e5fa:	005b      	lsls	r3, r3, #1
 801e5fc:	440b      	add	r3, r1
 801e5fe:	009b      	lsls	r3, r3, #2
 801e600:	4413      	add	r3, r2
 801e602:	681b      	ldr	r3, [r3, #0]
 801e604:	60bb      	str	r3, [r7, #8]
    widget->gc.background = COGUI_BLACK;
 801e606:	68ba      	ldr	r2, [r7, #8]
 801e608:	f04f 0300 	mov.w	r3, #0
 801e60c:	f04f 0400 	mov.w	r4, #0
 801e610:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
    widget->gc.foreground = COGUI_GREEN;
 801e614:	68ba      	ldr	r2, [r7, #8]
 801e616:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 801e61a:	f04f 0400 	mov.w	r4, #0
 801e61e:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30

    /* if this app is not previous install app, we need to shift all app forward */
    if (id != --current_app_install_cnt) {
 801e622:	4b1b      	ldr	r3, [pc, #108]	; (801e690 <cogui_main_page_app_uninstall+0x140>)
 801e624:	f9b3 3000 	ldrsh.w	r3, [r3]
 801e628:	b29b      	uxth	r3, r3
 801e62a:	3b01      	subs	r3, #1
 801e62c:	b29b      	uxth	r3, r3
 801e62e:	b21a      	sxth	r2, r3
 801e630:	4b17      	ldr	r3, [pc, #92]	; (801e690 <cogui_main_page_app_uninstall+0x140>)
 801e632:	801a      	strh	r2, [r3, #0]
 801e634:	4b16      	ldr	r3, [pc, #88]	; (801e690 <cogui_main_page_app_uninstall+0x140>)
 801e636:	f9b3 3000 	ldrsh.w	r3, [r3]
 801e63a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 801e63e:	429a      	cmp	r2, r3
 801e640:	d022      	beq.n	801e688 <cogui_main_page_app_uninstall+0x138>
        co_uint16_t i;
        for ( i=id+1; i<=current_app_install_cnt; i++) {
 801e642:	88fb      	ldrh	r3, [r7, #6]
 801e644:	3301      	adds	r3, #1
 801e646:	81fb      	strh	r3, [r7, #14]
 801e648:	e018      	b.n	801e67c <cogui_main_page_app_uninstall+0x12c>
            cogui_memcpy(main_app_table+(i-1), main_app_table+i, sizeof(struct main_app_table));
 801e64a:	89fa      	ldrh	r2, [r7, #14]
 801e64c:	4613      	mov	r3, r2
 801e64e:	005b      	lsls	r3, r3, #1
 801e650:	4413      	add	r3, r2
 801e652:	009b      	lsls	r3, r3, #2
 801e654:	3b0c      	subs	r3, #12
 801e656:	4a11      	ldr	r2, [pc, #68]	; (801e69c <cogui_main_page_app_uninstall+0x14c>)
 801e658:	1898      	adds	r0, r3, r2
 801e65a:	89fa      	ldrh	r2, [r7, #14]
 801e65c:	4613      	mov	r3, r2
 801e65e:	005b      	lsls	r3, r3, #1
 801e660:	4413      	add	r3, r2
 801e662:	009b      	lsls	r3, r3, #2
 801e664:	461a      	mov	r2, r3
 801e666:	4b0d      	ldr	r3, [pc, #52]	; (801e69c <cogui_main_page_app_uninstall+0x14c>)
 801e668:	18d1      	adds	r1, r2, r3
 801e66a:	f04f 020c 	mov.w	r2, #12
 801e66e:	f04f 0300 	mov.w	r3, #0
 801e672:	f7fe f95b 	bl	801c92c <cogui_memcpy>
        for ( i=id+1; i<=current_app_install_cnt; i++) {
 801e676:	89fb      	ldrh	r3, [r7, #14]
 801e678:	3301      	adds	r3, #1
 801e67a:	81fb      	strh	r3, [r7, #14]
 801e67c:	89fb      	ldrh	r3, [r7, #14]
 801e67e:	4a04      	ldr	r2, [pc, #16]	; (801e690 <cogui_main_page_app_uninstall+0x140>)
 801e680:	f9b2 2000 	ldrsh.w	r2, [r2]
 801e684:	4293      	cmp	r3, r2
 801e686:	dde0      	ble.n	801e64a <cogui_main_page_app_uninstall+0xfa>
        }
    }
}   
 801e688:	bf00      	nop
 801e68a:	3714      	adds	r7, #20
 801e68c:	46bd      	mov	sp, r7
 801e68e:	bd90      	pop	{r4, r7, pc}
 801e690:	2000df98 	.word	0x2000df98
 801e694:	08025bcc 	.word	0x08025bcc
 801e698:	08025b28 	.word	0x08025b28
 801e69c:	2000df9c 	.word	0x2000df9c

0801e6a0 <cogui_window_delete>:

void cogui_window_delete(cogui_window_t *win)
{
 801e6a0:	b580      	push	{r7, lr}
 801e6a2:	b084      	sub	sp, #16
 801e6a4:	af00      	add	r7, sp, #0
 801e6a6:	6078      	str	r0, [r7, #4]
    /* remove magic code */
    win->magic = 0;
 801e6a8:	687b      	ldr	r3, [r7, #4]
 801e6aa:	2200      	movs	r2, #0
 801e6ac:	601a      	str	r2, [r3, #0]

    /* delete title widget */
    cogui_title_delete(win);
 801e6ae:	6878      	ldr	r0, [r7, #4]
 801e6b0:	f7fe fde4 	bl	801d27c <cogui_title_delete>
    cogui_widget_delete(win->title);
 801e6b4:	687b      	ldr	r3, [r7, #4]
 801e6b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e6b8:	4618      	mov	r0, r3
 801e6ba:	f7fe fe87 	bl	801d3cc <cogui_widget_delete>

    /* delete all widget */
    cogui_widget_t *tmp_widget = win->widget_list->next;
 801e6be:	687b      	ldr	r3, [r7, #4]
 801e6c0:	685b      	ldr	r3, [r3, #4]
 801e6c2:	681b      	ldr	r3, [r3, #0]
 801e6c4:	60fb      	str	r3, [r7, #12]
    cogui_widget_t *next_delete_widget = tmp_widget;
 801e6c6:	68fb      	ldr	r3, [r7, #12]
 801e6c8:	60bb      	str	r3, [r7, #8]
    while ((next_delete_widget = next_delete_widget->next) != Co_NULL) {
 801e6ca:	e004      	b.n	801e6d6 <cogui_window_delete+0x36>
        cogui_widget_delete(tmp_widget);
 801e6cc:	68f8      	ldr	r0, [r7, #12]
 801e6ce:	f7fe fe7d 	bl	801d3cc <cogui_widget_delete>
        tmp_widget = next_delete_widget;
 801e6d2:	68bb      	ldr	r3, [r7, #8]
 801e6d4:	60fb      	str	r3, [r7, #12]
    while ((next_delete_widget = next_delete_widget->next) != Co_NULL) {
 801e6d6:	68bb      	ldr	r3, [r7, #8]
 801e6d8:	681b      	ldr	r3, [r3, #0]
 801e6da:	60bb      	str	r3, [r7, #8]
 801e6dc:	68bb      	ldr	r3, [r7, #8]
 801e6de:	2b00      	cmp	r3, #0
 801e6e0:	d1f4      	bne.n	801e6cc <cogui_window_delete+0x2c>
    }

    /* last delete header widget */
    cogui_widget_delete(win->widget_list);
 801e6e2:	687b      	ldr	r3, [r7, #4]
 801e6e4:	685b      	ldr	r3, [r3, #4]
 801e6e6:	4618      	mov	r0, r3
 801e6e8:	f7fe fe70 	bl	801d3cc <cogui_widget_delete>

    /* remove window pointer in app structure */
    win->app->win = Co_NULL;
 801e6ec:	687b      	ldr	r3, [r7, #4]
 801e6ee:	6a1b      	ldr	r3, [r3, #32]
 801e6f0:	2200      	movs	r2, #0
 801e6f2:	611a      	str	r2, [r3, #16]

    /* free user data if need */
    if (win->user_data) {
 801e6f4:	687b      	ldr	r3, [r7, #4]
 801e6f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801e6f8:	2b00      	cmp	r3, #0
 801e6fa:	d004      	beq.n	801e706 <cogui_window_delete+0x66>
        cogui_free(win->user_data);
 801e6fc:	687b      	ldr	r3, [r7, #4]
 801e6fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801e700:	4618      	mov	r0, r3
 801e702:	f7fe f809 	bl	801c718 <cogui_free>
    }

    cogui_main_page_app_uninstall(win->id);
 801e706:	687b      	ldr	r3, [r7, #4]
 801e708:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 801e70c:	4618      	mov	r0, r3
 801e70e:	f7ff ff1f 	bl	801e550 <cogui_main_page_app_uninstall>

    /* free window */
    cogui_free(win);
 801e712:	6878      	ldr	r0, [r7, #4]
 801e714:	f7fe f800 	bl	801c718 <cogui_free>
}
 801e718:	bf00      	nop
 801e71a:	3710      	adds	r7, #16
 801e71c:	46bd      	mov	sp, r7
 801e71e:	bd80      	pop	{r7, pc}

0801e720 <cogui_window_close>:

StatusType cogui_window_close(cogui_window_t *win)
{
 801e720:	b580      	push	{r7, lr}
 801e722:	b090      	sub	sp, #64	; 0x40
 801e724:	af00      	add	r7, sp, #0
 801e726:	6078      	str	r0, [r7, #4]
    COGUI_ASSERT(win != Co_NULL);
 801e728:	687b      	ldr	r3, [r7, #4]
 801e72a:	2b00      	cmp	r3, #0
 801e72c:	d104      	bne.n	801e738 <cogui_window_close+0x18>
 801e72e:	22bd      	movs	r2, #189	; 0xbd
 801e730:	490f      	ldr	r1, [pc, #60]	; (801e770 <cogui_window_close+0x50>)
 801e732:	4810      	ldr	r0, [pc, #64]	; (801e774 <cogui_window_close+0x54>)
 801e734:	f7fe fcd8 	bl	801d0e8 <cogui_assert_handler>

    cogui_window_delete(win);
 801e738:	6878      	ldr	r0, [r7, #4]
 801e73a:	f7ff ffb1 	bl	801e6a0 <cogui_window_delete>

    struct cogui_event event;
    COGUI_EVENT_INIT(&event, COGUI_EVENT_WINDOW_CLOSE);
 801e73e:	230a      	movs	r3, #10
 801e740:	733b      	strb	r3, [r7, #12]
 801e742:	f7fc fe6d 	bl	801b420 <cogui_app_self>
 801e746:	4603      	mov	r3, r0
 801e748:	613b      	str	r3, [r7, #16]
 801e74a:	2300      	movs	r3, #0
 801e74c:	753b      	strb	r3, [r7, #20]
    event.win = win;
 801e74e:	687b      	ldr	r3, [r7, #4]
 801e750:	61fb      	str	r3, [r7, #28]

    return cogui_send(cogui_get_server(), &event);
 801e752:	f7fd ff99 	bl	801c688 <cogui_get_server>
 801e756:	4602      	mov	r2, r0
 801e758:	f107 030c 	add.w	r3, r7, #12
 801e75c:	4619      	mov	r1, r3
 801e75e:	4610      	mov	r0, r2
 801e760:	f7fe f80e 	bl	801c780 <cogui_send>
 801e764:	4603      	mov	r3, r0
}
 801e766:	4618      	mov	r0, r3
 801e768:	3740      	adds	r7, #64	; 0x40
 801e76a:	46bd      	mov	sp, r7
 801e76c:	bd80      	pop	{r7, pc}
 801e76e:	bf00      	nop
 801e770:	08025bec 	.word	0x08025bec
 801e774:	08025b54 	.word	0x08025b54

0801e778 <cogui_window_set_onactivate>:

void cogui_window_set_onactivate(cogui_window_t *win, event_handler_ptr handler)
{
 801e778:	b580      	push	{r7, lr}
 801e77a:	b082      	sub	sp, #8
 801e77c:	af00      	add	r7, sp, #0
 801e77e:	6078      	str	r0, [r7, #4]
 801e780:	6039      	str	r1, [r7, #0]
    COGUI_ASSERT(win != Co_NULL);
 801e782:	687b      	ldr	r3, [r7, #4]
 801e784:	2b00      	cmp	r3, #0
 801e786:	d104      	bne.n	801e792 <cogui_window_set_onactivate+0x1a>
 801e788:	22ca      	movs	r2, #202	; 0xca
 801e78a:	4905      	ldr	r1, [pc, #20]	; (801e7a0 <cogui_window_set_onactivate+0x28>)
 801e78c:	4805      	ldr	r0, [pc, #20]	; (801e7a4 <cogui_window_set_onactivate+0x2c>)
 801e78e:	f7fe fcab 	bl	801d0e8 <cogui_assert_handler>
    
    win->on_activate = handler;
 801e792:	687b      	ldr	r3, [r7, #4]
 801e794:	683a      	ldr	r2, [r7, #0]
 801e796:	635a      	str	r2, [r3, #52]	; 0x34
}
 801e798:	bf00      	nop
 801e79a:	3708      	adds	r7, #8
 801e79c:	46bd      	mov	sp, r7
 801e79e:	bd80      	pop	{r7, pc}
 801e7a0:	08025c00 	.word	0x08025c00
 801e7a4:	08025b54 	.word	0x08025b54

0801e7a8 <cogui_window_set_ondeactive>:

void cogui_window_set_ondeactive(cogui_window_t *win, event_handler_ptr handler)
{
 801e7a8:	b580      	push	{r7, lr}
 801e7aa:	b082      	sub	sp, #8
 801e7ac:	af00      	add	r7, sp, #0
 801e7ae:	6078      	str	r0, [r7, #4]
 801e7b0:	6039      	str	r1, [r7, #0]
    COGUI_ASSERT(win != Co_NULL);
 801e7b2:	687b      	ldr	r3, [r7, #4]
 801e7b4:	2b00      	cmp	r3, #0
 801e7b6:	d104      	bne.n	801e7c2 <cogui_window_set_ondeactive+0x1a>
 801e7b8:	22d1      	movs	r2, #209	; 0xd1
 801e7ba:	4905      	ldr	r1, [pc, #20]	; (801e7d0 <cogui_window_set_ondeactive+0x28>)
 801e7bc:	4805      	ldr	r0, [pc, #20]	; (801e7d4 <cogui_window_set_ondeactive+0x2c>)
 801e7be:	f7fe fc93 	bl	801d0e8 <cogui_assert_handler>
    
    win->on_deactivate = handler;
 801e7c2:	687b      	ldr	r3, [r7, #4]
 801e7c4:	683a      	ldr	r2, [r7, #0]
 801e7c6:	639a      	str	r2, [r3, #56]	; 0x38
}
 801e7c8:	bf00      	nop
 801e7ca:	3708      	adds	r7, #8
 801e7cc:	46bd      	mov	sp, r7
 801e7ce:	bd80      	pop	{r7, pc}
 801e7d0:	08025c1c 	.word	0x08025c1c
 801e7d4:	08025b54 	.word	0x08025b54

0801e7d8 <cogui_window_set_onkey>:


void cogui_window_set_onkey(cogui_window_t *win, event_handler_ptr handler)
{
 801e7d8:	b580      	push	{r7, lr}
 801e7da:	b082      	sub	sp, #8
 801e7dc:	af00      	add	r7, sp, #0
 801e7de:	6078      	str	r0, [r7, #4]
 801e7e0:	6039      	str	r1, [r7, #0]
    COGUI_ASSERT(win != Co_NULL);
 801e7e2:	687b      	ldr	r3, [r7, #4]
 801e7e4:	2b00      	cmp	r3, #0
 801e7e6:	d104      	bne.n	801e7f2 <cogui_window_set_onkey+0x1a>
 801e7e8:	22d9      	movs	r2, #217	; 0xd9
 801e7ea:	4905      	ldr	r1, [pc, #20]	; (801e800 <cogui_window_set_onkey+0x28>)
 801e7ec:	4805      	ldr	r0, [pc, #20]	; (801e804 <cogui_window_set_onkey+0x2c>)
 801e7ee:	f7fe fc7b 	bl	801d0e8 <cogui_assert_handler>
    
    win->on_key = handler;
 801e7f2:	687b      	ldr	r3, [r7, #4]
 801e7f4:	683a      	ldr	r2, [r7, #0]
 801e7f6:	63da      	str	r2, [r3, #60]	; 0x3c
}
 801e7f8:	bf00      	nop
 801e7fa:	3708      	adds	r7, #8
 801e7fc:	46bd      	mov	sp, r7
 801e7fe:	bd80      	pop	{r7, pc}
 801e800:	08025c38 	.word	0x08025c38
 801e804:	08025b54 	.word	0x08025b54

0801e808 <cogui_window_show>:

StatusType cogui_window_show(cogui_window_t *win)
{
 801e808:	b580      	push	{r7, lr}
 801e80a:	b090      	sub	sp, #64	; 0x40
 801e80c:	af00      	add	r7, sp, #0
 801e80e:	6078      	str	r0, [r7, #4]
    COGUI_ASSERT(win != Co_NULL);
 801e810:	687b      	ldr	r3, [r7, #4]
 801e812:	2b00      	cmp	r3, #0
 801e814:	d104      	bne.n	801e820 <cogui_window_show+0x18>
 801e816:	22e0      	movs	r2, #224	; 0xe0
 801e818:	491d      	ldr	r1, [pc, #116]	; (801e890 <cogui_window_show+0x88>)
 801e81a:	481e      	ldr	r0, [pc, #120]	; (801e894 <cogui_window_show+0x8c>)
 801e81c:	f7fe fc64 	bl	801d0e8 <cogui_assert_handler>
    struct cogui_event event;
    StatusType result;

    /* if this is not main page to show, first hide main page */
    if (win != main_page) {
 801e820:	4b1d      	ldr	r3, [pc, #116]	; (801e898 <cogui_window_show+0x90>)
 801e822:	681b      	ldr	r3, [r3, #0]
 801e824:	687a      	ldr	r2, [r7, #4]
 801e826:	429a      	cmp	r2, r3
 801e828:	d007      	beq.n	801e83a <cogui_window_show+0x32>
        COGUI_WINDOW_DISABLE(main_page);
 801e82a:	4b1b      	ldr	r3, [pc, #108]	; (801e898 <cogui_window_show+0x90>)
 801e82c:	681b      	ldr	r3, [r3, #0]
 801e82e:	68da      	ldr	r2, [r3, #12]
 801e830:	4b19      	ldr	r3, [pc, #100]	; (801e898 <cogui_window_show+0x90>)
 801e832:	681b      	ldr	r3, [r3, #0]
 801e834:	f022 0201 	bic.w	r2, r2, #1
 801e838:	60da      	str	r2, [r3, #12]
    }

    /* determine whether if window is need to show */
    if (COGUI_WINDOW_IS_ENABLE(win)) {
 801e83a:	687b      	ldr	r3, [r7, #4]
 801e83c:	68db      	ldr	r3, [r3, #12]
 801e83e:	f003 0301 	and.w	r3, r3, #1
 801e842:	2b00      	cmp	r3, #0
 801e844:	d001      	beq.n	801e84a <cogui_window_show+0x42>
        return GUI_E_ERROR;
 801e846:	2316      	movs	r3, #22
 801e848:	e01d      	b.n	801e886 <cogui_window_show+0x7e>
    }
    else {
        COGUI_WINDOW_ENABLE(win);
 801e84a:	687b      	ldr	r3, [r7, #4]
 801e84c:	68db      	ldr	r3, [r3, #12]
 801e84e:	f043 0201 	orr.w	r2, r3, #1
 801e852:	687b      	ldr	r3, [r7, #4]
 801e854:	60da      	str	r2, [r3, #12]
    }

    COGUI_EVENT_INIT(&event, COGUI_EVENT_WINDOW_SHOW);
 801e856:	2308      	movs	r3, #8
 801e858:	723b      	strb	r3, [r7, #8]
 801e85a:	f7fc fde1 	bl	801b420 <cogui_app_self>
 801e85e:	4603      	mov	r3, r0
 801e860:	60fb      	str	r3, [r7, #12]
 801e862:	2300      	movs	r3, #0
 801e864:	743b      	strb	r3, [r7, #16]

    if (win->handler != Co_NULL)
 801e866:	687b      	ldr	r3, [r7, #4]
 801e868:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801e86a:	2b00      	cmp	r3, #0
 801e86c:	d009      	beq.n	801e882 <cogui_window_show+0x7a>
        result = win->handler(win, &event);
 801e86e:	687b      	ldr	r3, [r7, #4]
 801e870:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801e872:	f107 0208 	add.w	r2, r7, #8
 801e876:	4611      	mov	r1, r2
 801e878:	6878      	ldr	r0, [r7, #4]
 801e87a:	4798      	blx	r3
 801e87c:	4603      	mov	r3, r0
 801e87e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

    return result;
 801e882:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 801e886:	4618      	mov	r0, r3
 801e888:	3740      	adds	r7, #64	; 0x40
 801e88a:	46bd      	mov	sp, r7
 801e88c:	bd80      	pop	{r7, pc}
 801e88e:	bf00      	nop
 801e890:	08025c50 	.word	0x08025c50
 801e894:	08025b54 	.word	0x08025b54
 801e898:	2000d774 	.word	0x2000d774

0801e89c <cogui_window_hide>:

StatusType cogui_window_hide(cogui_window_t *win)
{
 801e89c:	b580      	push	{r7, lr}
 801e89e:	b090      	sub	sp, #64	; 0x40
 801e8a0:	af00      	add	r7, sp, #0
 801e8a2:	6078      	str	r0, [r7, #4]
    COGUI_ASSERT(win != Co_NULL);
 801e8a4:	687b      	ldr	r3, [r7, #4]
 801e8a6:	2b00      	cmp	r3, #0
 801e8a8:	d104      	bne.n	801e8b4 <cogui_window_hide+0x18>
 801e8aa:	22fb      	movs	r2, #251	; 0xfb
 801e8ac:	4916      	ldr	r1, [pc, #88]	; (801e908 <cogui_window_hide+0x6c>)
 801e8ae:	4817      	ldr	r0, [pc, #92]	; (801e90c <cogui_window_hide+0x70>)
 801e8b0:	f7fe fc1a 	bl	801d0e8 <cogui_assert_handler>
    struct cogui_event event;
    StatusType result;

    /* determine whether if window is need to hide */
    if (!COGUI_WINDOW_IS_ENABLE(win)) {
 801e8b4:	687b      	ldr	r3, [r7, #4]
 801e8b6:	68db      	ldr	r3, [r3, #12]
 801e8b8:	f003 0301 	and.w	r3, r3, #1
 801e8bc:	2b00      	cmp	r3, #0
 801e8be:	d101      	bne.n	801e8c4 <cogui_window_hide+0x28>
        return GUI_E_ERROR;
 801e8c0:	2316      	movs	r3, #22
 801e8c2:	e01d      	b.n	801e900 <cogui_window_hide+0x64>
    }
    else {
        COGUI_WINDOW_DISABLE(win);
 801e8c4:	687b      	ldr	r3, [r7, #4]
 801e8c6:	68db      	ldr	r3, [r3, #12]
 801e8c8:	f023 0201 	bic.w	r2, r3, #1
 801e8cc:	687b      	ldr	r3, [r7, #4]
 801e8ce:	60da      	str	r2, [r3, #12]
    }

    COGUI_EVENT_INIT(&event, COGUI_EVENT_WINDOW_HIDE);
 801e8d0:	2309      	movs	r3, #9
 801e8d2:	723b      	strb	r3, [r7, #8]
 801e8d4:	f7fc fda4 	bl	801b420 <cogui_app_self>
 801e8d8:	4603      	mov	r3, r0
 801e8da:	60fb      	str	r3, [r7, #12]
 801e8dc:	2300      	movs	r3, #0
 801e8de:	743b      	strb	r3, [r7, #16]

    if (win->handler != Co_NULL)
 801e8e0:	687b      	ldr	r3, [r7, #4]
 801e8e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801e8e4:	2b00      	cmp	r3, #0
 801e8e6:	d009      	beq.n	801e8fc <cogui_window_hide+0x60>
        result = win->handler(win, &event);
 801e8e8:	687b      	ldr	r3, [r7, #4]
 801e8ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801e8ec:	f107 0208 	add.w	r2, r7, #8
 801e8f0:	4611      	mov	r1, r2
 801e8f2:	6878      	ldr	r0, [r7, #4]
 801e8f4:	4798      	blx	r3
 801e8f6:	4603      	mov	r3, r0
 801e8f8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

    return result;
 801e8fc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 801e900:	4618      	mov	r0, r3
 801e902:	3740      	adds	r7, #64	; 0x40
 801e904:	46bd      	mov	sp, r7
 801e906:	bd80      	pop	{r7, pc}
 801e908:	08025c64 	.word	0x08025c64
 801e90c:	08025b54 	.word	0x08025b54

0801e910 <cogui_window_onshow>:

StatusType cogui_window_onshow(cogui_window_t *win)
{
 801e910:	b580      	push	{r7, lr}
 801e912:	b082      	sub	sp, #8
 801e914:	af00      	add	r7, sp, #0
 801e916:	6078      	str	r0, [r7, #4]
    if (!COGUI_WINDOW_IS_ENABLE(win)) {
 801e918:	687b      	ldr	r3, [r7, #4]
 801e91a:	68db      	ldr	r3, [r3, #12]
 801e91c:	f003 0301 	and.w	r3, r3, #1
 801e920:	2b00      	cmp	r3, #0
 801e922:	d101      	bne.n	801e928 <cogui_window_onshow+0x18>
        return GUI_E_ERROR;
 801e924:	2316      	movs	r3, #22
 801e926:	e006      	b.n	801e936 <cogui_window_onshow+0x26>
    }

	cogui_screen_refresh(win);
 801e928:	6878      	ldr	r0, [r7, #4]
 801e92a:	f7fe fe4c 	bl	801d5c6 <cogui_screen_refresh>

    current_window = win;
 801e92e:	4a04      	ldr	r2, [pc, #16]	; (801e940 <cogui_window_onshow+0x30>)
 801e930:	687b      	ldr	r3, [r7, #4]
 801e932:	6013      	str	r3, [r2, #0]

    return GUI_E_OK;
 801e934:	2317      	movs	r3, #23
}
 801e936:	4618      	mov	r0, r3
 801e938:	3708      	adds	r7, #8
 801e93a:	46bd      	mov	sp, r7
 801e93c:	bd80      	pop	{r7, pc}
 801e93e:	bf00      	nop
 801e940:	2000df94 	.word	0x2000df94

0801e944 <cogui_window_onhide>:

StatusType cogui_window_onhide(cogui_window_t *win)
{
 801e944:	b580      	push	{r7, lr}
 801e946:	b090      	sub	sp, #64	; 0x40
 801e948:	af00      	add	r7, sp, #0
 801e94a:	6078      	str	r0, [r7, #4]
    if (COGUI_WINDOW_IS_ENABLE(win)) {
 801e94c:	687b      	ldr	r3, [r7, #4]
 801e94e:	68db      	ldr	r3, [r3, #12]
 801e950:	f003 0301 	and.w	r3, r3, #1
 801e954:	2b00      	cmp	r3, #0
 801e956:	d001      	beq.n	801e95c <cogui_window_onhide+0x18>
        return GUI_E_ERROR;
 801e958:	2316      	movs	r3, #22
 801e95a:	e013      	b.n	801e984 <cogui_window_onhide+0x40>
    }

    struct cogui_event event;
    COGUI_EVENT_INIT(&event, COGUI_EVENT_WINDOW_HIDE);
 801e95c:	2309      	movs	r3, #9
 801e95e:	733b      	strb	r3, [r7, #12]
 801e960:	f7fc fd5e 	bl	801b420 <cogui_app_self>
 801e964:	4603      	mov	r3, r0
 801e966:	613b      	str	r3, [r7, #16]
 801e968:	2300      	movs	r3, #0
 801e96a:	753b      	strb	r3, [r7, #20]
    event.win = win;
 801e96c:	687b      	ldr	r3, [r7, #4]
 801e96e:	61fb      	str	r3, [r7, #28]

    return cogui_send(cogui_get_server(), &event);
 801e970:	f7fd fe8a 	bl	801c688 <cogui_get_server>
 801e974:	4602      	mov	r2, r0
 801e976:	f107 030c 	add.w	r3, r7, #12
 801e97a:	4619      	mov	r1, r3
 801e97c:	4610      	mov	r0, r2
 801e97e:	f7fd feff 	bl	801c780 <cogui_send>
 801e982:	4603      	mov	r3, r0
}
 801e984:	4618      	mov	r0, r3
 801e986:	3740      	adds	r7, #64	; 0x40
 801e988:	46bd      	mov	sp, r7
 801e98a:	bd80      	pop	{r7, pc}

0801e98c <cogui_get_current_window>:

cogui_window_t *cogui_get_current_window()
{
 801e98c:	b580      	push	{r7, lr}
 801e98e:	b082      	sub	sp, #8
 801e990:	af00      	add	r7, sp, #0
    cogui_app_t *app = cogui_app_self();
 801e992:	f7fc fd45 	bl	801b420 <cogui_app_self>
 801e996:	6078      	str	r0, [r7, #4]

    return app->win;
 801e998:	687b      	ldr	r3, [r7, #4]
 801e99a:	691b      	ldr	r3, [r3, #16]
}
 801e99c:	4618      	mov	r0, r3
 801e99e:	3708      	adds	r7, #8
 801e9a0:	46bd      	mov	sp, r7
 801e9a2:	bd80      	pop	{r7, pc}

0801e9a4 <cogui_window_event_handler>:

StatusType cogui_window_event_handler(struct cogui_window *win, struct cogui_event *event)
{
 801e9a4:	b580      	push	{r7, lr}
 801e9a6:	b084      	sub	sp, #16
 801e9a8:	af00      	add	r7, sp, #0
 801e9aa:	6078      	str	r0, [r7, #4]
 801e9ac:	6039      	str	r1, [r7, #0]
    COGUI_ASSERT(win != Co_NULL);
 801e9ae:	687b      	ldr	r3, [r7, #4]
 801e9b0:	2b00      	cmp	r3, #0
 801e9b2:	d105      	bne.n	801e9c0 <cogui_window_event_handler+0x1c>
 801e9b4:	f44f 7299 	mov.w	r2, #306	; 0x132
 801e9b8:	4917      	ldr	r1, [pc, #92]	; (801ea18 <cogui_window_event_handler+0x74>)
 801e9ba:	4818      	ldr	r0, [pc, #96]	; (801ea1c <cogui_window_event_handler+0x78>)
 801e9bc:	f7fe fb94 	bl	801d0e8 <cogui_assert_handler>
    COGUI_ASSERT(event != Co_NULL);
 801e9c0:	683b      	ldr	r3, [r7, #0]
 801e9c2:	2b00      	cmp	r3, #0
 801e9c4:	d105      	bne.n	801e9d2 <cogui_window_event_handler+0x2e>
 801e9c6:	f240 1233 	movw	r2, #307	; 0x133
 801e9ca:	4913      	ldr	r1, [pc, #76]	; (801ea18 <cogui_window_event_handler+0x74>)
 801e9cc:	4814      	ldr	r0, [pc, #80]	; (801ea20 <cogui_window_event_handler+0x7c>)
 801e9ce:	f7fe fb8b 	bl	801d0e8 <cogui_assert_handler>

    StatusType result = GUI_E_ERROR;
 801e9d2:	2316      	movs	r3, #22
 801e9d4:	73fb      	strb	r3, [r7, #15]

    switch (event->type)
 801e9d6:	683b      	ldr	r3, [r7, #0]
 801e9d8:	781b      	ldrb	r3, [r3, #0]
 801e9da:	2b09      	cmp	r3, #9
 801e9dc:	d00a      	beq.n	801e9f4 <cogui_window_event_handler+0x50>
 801e9de:	2b0a      	cmp	r3, #10
 801e9e0:	d00e      	beq.n	801ea00 <cogui_window_event_handler+0x5c>
 801e9e2:	2b08      	cmp	r3, #8
 801e9e4:	d000      	beq.n	801e9e8 <cogui_window_event_handler+0x44>
    case COGUI_EVENT_WINDOW_CLOSE:
        result = cogui_window_close(win);
        break; 

    default:
        break;
 801e9e6:	e011      	b.n	801ea0c <cogui_window_event_handler+0x68>
        result = cogui_window_onshow(win);
 801e9e8:	6878      	ldr	r0, [r7, #4]
 801e9ea:	f7ff ff91 	bl	801e910 <cogui_window_onshow>
 801e9ee:	4603      	mov	r3, r0
 801e9f0:	73fb      	strb	r3, [r7, #15]
        break; 
 801e9f2:	e00b      	b.n	801ea0c <cogui_window_event_handler+0x68>
        result = cogui_window_onhide(win);
 801e9f4:	6878      	ldr	r0, [r7, #4]
 801e9f6:	f7ff ffa5 	bl	801e944 <cogui_window_onhide>
 801e9fa:	4603      	mov	r3, r0
 801e9fc:	73fb      	strb	r3, [r7, #15]
        break; 
 801e9fe:	e005      	b.n	801ea0c <cogui_window_event_handler+0x68>
        result = cogui_window_close(win);
 801ea00:	6878      	ldr	r0, [r7, #4]
 801ea02:	f7ff fe8d 	bl	801e720 <cogui_window_close>
 801ea06:	4603      	mov	r3, r0
 801ea08:	73fb      	strb	r3, [r7, #15]
        break; 
 801ea0a:	bf00      	nop
    }

	return result;
 801ea0c:	7bfb      	ldrb	r3, [r7, #15]
}
 801ea0e:	4618      	mov	r0, r3
 801ea10:	3710      	adds	r7, #16
 801ea12:	46bd      	mov	sp, r7
 801ea14:	bd80      	pop	{r7, pc}
 801ea16:	bf00      	nop
 801ea18:	08025c78 	.word	0x08025c78
 801ea1c:	08025b54 	.word	0x08025b54
 801ea20:	08025b64 	.word	0x08025b64

0801ea24 <cogui_assert_failed_page>:

void cogui_assert_failed_page(const char* ex, co_uint16_t line, const char* func)
{
 801ea24:	b590      	push	{r4, r7, lr}
 801ea26:	b08d      	sub	sp, #52	; 0x34
 801ea28:	af02      	add	r7, sp, #8
 801ea2a:	60f8      	str	r0, [r7, #12]
 801ea2c:	460b      	mov	r3, r1
 801ea2e:	607a      	str	r2, [r7, #4]
 801ea30:	817b      	strh	r3, [r7, #10]
    /* let full screen background set to blue */
    main_page->widget_list->next->gc.background = COGUI_BLUE;
 801ea32:	4b49      	ldr	r3, [pc, #292]	; (801eb58 <cogui_assert_failed_page+0x134>)
 801ea34:	681b      	ldr	r3, [r3, #0]
 801ea36:	685b      	ldr	r3, [r3, #4]
 801ea38:	681a      	ldr	r2, [r3, #0]
 801ea3a:	f04f 031f 	mov.w	r3, #31
 801ea3e:	f04f 0400 	mov.w	r4, #0
 801ea42:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
    main_page->widget_list->next->next = Co_NULL;
 801ea46:	4b44      	ldr	r3, [pc, #272]	; (801eb58 <cogui_assert_failed_page+0x134>)
 801ea48:	681b      	ldr	r3, [r3, #0]
 801ea4a:	685b      	ldr	r3, [r3, #4]
 801ea4c:	681b      	ldr	r3, [r3, #0]
 801ea4e:	2200      	movs	r2, #0
 801ea50:	601a      	str	r2, [r3, #0]

    cogui_window_show(main_page);
 801ea52:	4b41      	ldr	r3, [pc, #260]	; (801eb58 <cogui_assert_failed_page+0x134>)
 801ea54:	681b      	ldr	r3, [r3, #0]
 801ea56:	4618      	mov	r0, r3
 801ea58:	f7ff fed6 	bl	801e808 <cogui_window_show>
    /* create a widget to print error text */
    cogui_widget_t *widget;
    widget = cogui_widget_create(main_page);
 801ea5c:	4b3e      	ldr	r3, [pc, #248]	; (801eb58 <cogui_assert_failed_page+0x134>)
 801ea5e:	681b      	ldr	r3, [r3, #0]
 801ea60:	4618      	mov	r0, r3
 801ea62:	f7fe fc65 	bl	801d330 <cogui_widget_create>
 801ea66:	6278      	str	r0, [r7, #36]	; 0x24
    cogui_widget_set_rectangle(widget, 15 , 55, 60, 60);
 801ea68:	233c      	movs	r3, #60	; 0x3c
 801ea6a:	9300      	str	r3, [sp, #0]
 801ea6c:	233c      	movs	r3, #60	; 0x3c
 801ea6e:	2237      	movs	r2, #55	; 0x37
 801ea70:	210f      	movs	r1, #15
 801ea72:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801ea74:	f7fe ffc3 	bl	801d9fe <cogui_widget_set_rectangle>
    widget->gc.foreground = COGUI_WHITE; 
 801ea78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801ea7a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801ea7e:	f04f 0400 	mov.w	r4, #0
 801ea82:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
    cogui_widget_set_font(widget, &tm_font_16x26);
 801ea86:	4935      	ldr	r1, [pc, #212]	; (801eb5c <cogui_assert_failed_page+0x138>)
 801ea88:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801ea8a:	f7ff f879 	bl	801db80 <cogui_widget_set_font>

    widget->gc.padding = COGUI_PADDING(17, 0, 5, 0);
 801ea8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801ea90:	4b33      	ldr	r3, [pc, #204]	; (801eb60 <cogui_assert_failed_page+0x13c>)
 801ea92:	f04f 0400 	mov.w	r4, #0
 801ea96:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48

    /* set to error code */
    cogui_widget_set_text(widget, ":("); 
 801ea9a:	4932      	ldr	r1, [pc, #200]	; (801eb64 <cogui_assert_failed_page+0x140>)
 801ea9c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801ea9e:	f7ff f8af 	bl	801dc00 <cogui_widget_set_text>
    cogui_widget_show(widget);
 801eaa2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801eaa4:	f7ff fa9c 	bl	801dfe0 <cogui_widget_show>

    widget = cogui_widget_create(main_page);
 801eaa8:	4b2b      	ldr	r3, [pc, #172]	; (801eb58 <cogui_assert_failed_page+0x134>)
 801eaaa:	681b      	ldr	r3, [r3, #0]
 801eaac:	4618      	mov	r0, r3
 801eaae:	f7fe fc3f 	bl	801d330 <cogui_widget_create>
 801eab2:	6278      	str	r0, [r7, #36]	; 0x24
    cogui_widget_set_rectangle(widget, 20 , 120, 200, 200);
 801eab4:	23c8      	movs	r3, #200	; 0xc8
 801eab6:	9300      	str	r3, [sp, #0]
 801eab8:	23c8      	movs	r3, #200	; 0xc8
 801eaba:	2278      	movs	r2, #120	; 0x78
 801eabc:	2114      	movs	r1, #20
 801eabe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801eac0:	f7fe ff9d 	bl	801d9fe <cogui_widget_set_rectangle>
    cogui_widget_set_font(widget, &tm_font_11x18);
 801eac4:	4928      	ldr	r1, [pc, #160]	; (801eb68 <cogui_assert_failed_page+0x144>)
 801eac6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801eac8:	f7ff f85a 	bl	801db80 <cogui_widget_set_font>
    cogui_widget_set_text(widget, "Your computer ran into a problem.\n"); 
 801eacc:	4927      	ldr	r1, [pc, #156]	; (801eb6c <cogui_assert_failed_page+0x148>)
 801eace:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801ead0:	f7ff f896 	bl	801dc00 <cogui_widget_set_text>
    cogui_widget_show(widget);
 801ead4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801ead6:	f7ff fa83 	bl	801dfe0 <cogui_widget_show>

    widget = cogui_widget_create(main_page);
 801eada:	4b1f      	ldr	r3, [pc, #124]	; (801eb58 <cogui_assert_failed_page+0x134>)
 801eadc:	681b      	ldr	r3, [r3, #0]
 801eade:	4618      	mov	r0, r3
 801eae0:	f7fe fc26 	bl	801d330 <cogui_widget_create>
 801eae4:	6278      	str	r0, [r7, #36]	; 0x24
    cogui_widget_set_rectangle(widget, 20 , 170, 200, 150);
 801eae6:	2396      	movs	r3, #150	; 0x96
 801eae8:	9300      	str	r3, [sp, #0]
 801eaea:	23c8      	movs	r3, #200	; 0xc8
 801eaec:	22aa      	movs	r2, #170	; 0xaa
 801eaee:	2114      	movs	r1, #20
 801eaf0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801eaf2:	f7fe ff84 	bl	801d9fe <cogui_widget_set_rectangle>
    char *ex_str = cogui_strdup(ex);
 801eaf6:	68f8      	ldr	r0, [r7, #12]
 801eaf8:	f7fe f806 	bl	801cb08 <cogui_strdup>
 801eafc:	6238      	str	r0, [r7, #32]
    char *f_str = cogui_strdup(func);
 801eafe:	6878      	ldr	r0, [r7, #4]
 801eb00:	f7fe f802 	bl	801cb08 <cogui_strdup>
 801eb04:	61f8      	str	r0, [r7, #28]
    char l_str[10];
    cogui_itoa(line, l_str);
 801eb06:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 801eb0a:	f107 0210 	add.w	r2, r7, #16
 801eb0e:	4611      	mov	r1, r2
 801eb10:	4618      	mov	r0, r3
 801eb12:	f7fe f899 	bl	801cc48 <cogui_itoa>

    cogui_widget_set_text(widget, "Assert failed at\n"); 
 801eb16:	4916      	ldr	r1, [pc, #88]	; (801eb70 <cogui_assert_failed_page+0x14c>)
 801eb18:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801eb1a:	f7ff f871 	bl	801dc00 <cogui_widget_set_text>
    cogui_widget_append_text(widget, f_str);
 801eb1e:	69f9      	ldr	r1, [r7, #28]
 801eb20:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801eb22:	f7ff f88f 	bl	801dc44 <cogui_widget_append_text>
    cogui_widget_append_text(widget, "\nLine: ");
 801eb26:	4913      	ldr	r1, [pc, #76]	; (801eb74 <cogui_assert_failed_page+0x150>)
 801eb28:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801eb2a:	f7ff f88b 	bl	801dc44 <cogui_widget_append_text>
    cogui_widget_append_text(widget, l_str);
 801eb2e:	f107 0310 	add.w	r3, r7, #16
 801eb32:	4619      	mov	r1, r3
 801eb34:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801eb36:	f7ff f885 	bl	801dc44 <cogui_widget_append_text>
    cogui_widget_append_text(widget, "\nExpression: ");
 801eb3a:	490f      	ldr	r1, [pc, #60]	; (801eb78 <cogui_assert_failed_page+0x154>)
 801eb3c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801eb3e:	f7ff f881 	bl	801dc44 <cogui_widget_append_text>
    cogui_widget_append_text(widget, ex_str);
 801eb42:	6a39      	ldr	r1, [r7, #32]
 801eb44:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801eb46:	f7ff f87d 	bl	801dc44 <cogui_widget_append_text>
    cogui_widget_show(widget);
 801eb4a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801eb4c:	f7ff fa48 	bl	801dfe0 <cogui_widget_show>
}
 801eb50:	bf00      	nop
 801eb52:	372c      	adds	r7, #44	; 0x2c
 801eb54:	46bd      	mov	sp, r7
 801eb56:	bd90      	pop	{r4, r7, pc}
 801eb58:	2000d774 	.word	0x2000d774
 801eb5c:	20000154 	.word	0x20000154
 801eb60:	11000500 	.word	0x11000500
 801eb64:	08025b78 	.word	0x08025b78
 801eb68:	20000148 	.word	0x20000148
 801eb6c:	08025b7c 	.word	0x08025b7c
 801eb70:	08025ba0 	.word	0x08025ba0
 801eb74:	08025bb4 	.word	0x08025bb4
 801eb78:	08025bbc 	.word	0x08025bbc
 801eb7c:	08025cac 	.word	0x08025cac
 801eb80:	20000000 	.word	0x20000000
 801eb84:	20000594 	.word	0x20000594
 801eb88:	20000598 	.word	0x20000598
 801eb8c:	2000e02c 	.word	0x2000e02c

0801eb90 <__aeabi_uldivmod>:
 801eb90:	b953      	cbnz	r3, 801eba8 <__aeabi_uldivmod+0x18>
 801eb92:	b94a      	cbnz	r2, 801eba8 <__aeabi_uldivmod+0x18>
 801eb94:	2900      	cmp	r1, #0
 801eb96:	bf08      	it	eq
 801eb98:	2800      	cmpeq	r0, #0
 801eb9a:	bf1c      	itt	ne
 801eb9c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 801eba0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 801eba4:	f000 b972 	b.w	801ee8c <__aeabi_idiv0>
 801eba8:	f1ad 0c08 	sub.w	ip, sp, #8
 801ebac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 801ebb0:	f000 f806 	bl	801ebc0 <__udivmoddi4>
 801ebb4:	f8dd e004 	ldr.w	lr, [sp, #4]
 801ebb8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801ebbc:	b004      	add	sp, #16
 801ebbe:	4770      	bx	lr

0801ebc0 <__udivmoddi4>:
 801ebc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ebc4:	9e08      	ldr	r6, [sp, #32]
 801ebc6:	4604      	mov	r4, r0
 801ebc8:	4688      	mov	r8, r1
 801ebca:	2b00      	cmp	r3, #0
 801ebcc:	d14b      	bne.n	801ec66 <__udivmoddi4+0xa6>
 801ebce:	428a      	cmp	r2, r1
 801ebd0:	4615      	mov	r5, r2
 801ebd2:	d967      	bls.n	801eca4 <__udivmoddi4+0xe4>
 801ebd4:	fab2 f282 	clz	r2, r2
 801ebd8:	b14a      	cbz	r2, 801ebee <__udivmoddi4+0x2e>
 801ebda:	f1c2 0720 	rsb	r7, r2, #32
 801ebde:	fa01 f302 	lsl.w	r3, r1, r2
 801ebe2:	fa20 f707 	lsr.w	r7, r0, r7
 801ebe6:	4095      	lsls	r5, r2
 801ebe8:	ea47 0803 	orr.w	r8, r7, r3
 801ebec:	4094      	lsls	r4, r2
 801ebee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 801ebf2:	0c23      	lsrs	r3, r4, #16
 801ebf4:	fbb8 f7fe 	udiv	r7, r8, lr
 801ebf8:	fa1f fc85 	uxth.w	ip, r5
 801ebfc:	fb0e 8817 	mls	r8, lr, r7, r8
 801ec00:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 801ec04:	fb07 f10c 	mul.w	r1, r7, ip
 801ec08:	4299      	cmp	r1, r3
 801ec0a:	d909      	bls.n	801ec20 <__udivmoddi4+0x60>
 801ec0c:	18eb      	adds	r3, r5, r3
 801ec0e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 801ec12:	f080 811b 	bcs.w	801ee4c <__udivmoddi4+0x28c>
 801ec16:	4299      	cmp	r1, r3
 801ec18:	f240 8118 	bls.w	801ee4c <__udivmoddi4+0x28c>
 801ec1c:	3f02      	subs	r7, #2
 801ec1e:	442b      	add	r3, r5
 801ec20:	1a5b      	subs	r3, r3, r1
 801ec22:	b2a4      	uxth	r4, r4
 801ec24:	fbb3 f0fe 	udiv	r0, r3, lr
 801ec28:	fb0e 3310 	mls	r3, lr, r0, r3
 801ec2c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 801ec30:	fb00 fc0c 	mul.w	ip, r0, ip
 801ec34:	45a4      	cmp	ip, r4
 801ec36:	d909      	bls.n	801ec4c <__udivmoddi4+0x8c>
 801ec38:	192c      	adds	r4, r5, r4
 801ec3a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 801ec3e:	f080 8107 	bcs.w	801ee50 <__udivmoddi4+0x290>
 801ec42:	45a4      	cmp	ip, r4
 801ec44:	f240 8104 	bls.w	801ee50 <__udivmoddi4+0x290>
 801ec48:	3802      	subs	r0, #2
 801ec4a:	442c      	add	r4, r5
 801ec4c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 801ec50:	eba4 040c 	sub.w	r4, r4, ip
 801ec54:	2700      	movs	r7, #0
 801ec56:	b11e      	cbz	r6, 801ec60 <__udivmoddi4+0xa0>
 801ec58:	40d4      	lsrs	r4, r2
 801ec5a:	2300      	movs	r3, #0
 801ec5c:	e9c6 4300 	strd	r4, r3, [r6]
 801ec60:	4639      	mov	r1, r7
 801ec62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ec66:	428b      	cmp	r3, r1
 801ec68:	d909      	bls.n	801ec7e <__udivmoddi4+0xbe>
 801ec6a:	2e00      	cmp	r6, #0
 801ec6c:	f000 80eb 	beq.w	801ee46 <__udivmoddi4+0x286>
 801ec70:	2700      	movs	r7, #0
 801ec72:	e9c6 0100 	strd	r0, r1, [r6]
 801ec76:	4638      	mov	r0, r7
 801ec78:	4639      	mov	r1, r7
 801ec7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ec7e:	fab3 f783 	clz	r7, r3
 801ec82:	2f00      	cmp	r7, #0
 801ec84:	d147      	bne.n	801ed16 <__udivmoddi4+0x156>
 801ec86:	428b      	cmp	r3, r1
 801ec88:	d302      	bcc.n	801ec90 <__udivmoddi4+0xd0>
 801ec8a:	4282      	cmp	r2, r0
 801ec8c:	f200 80fa 	bhi.w	801ee84 <__udivmoddi4+0x2c4>
 801ec90:	1a84      	subs	r4, r0, r2
 801ec92:	eb61 0303 	sbc.w	r3, r1, r3
 801ec96:	2001      	movs	r0, #1
 801ec98:	4698      	mov	r8, r3
 801ec9a:	2e00      	cmp	r6, #0
 801ec9c:	d0e0      	beq.n	801ec60 <__udivmoddi4+0xa0>
 801ec9e:	e9c6 4800 	strd	r4, r8, [r6]
 801eca2:	e7dd      	b.n	801ec60 <__udivmoddi4+0xa0>
 801eca4:	b902      	cbnz	r2, 801eca8 <__udivmoddi4+0xe8>
 801eca6:	deff      	udf	#255	; 0xff
 801eca8:	fab2 f282 	clz	r2, r2
 801ecac:	2a00      	cmp	r2, #0
 801ecae:	f040 808f 	bne.w	801edd0 <__udivmoddi4+0x210>
 801ecb2:	1b49      	subs	r1, r1, r5
 801ecb4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 801ecb8:	fa1f f885 	uxth.w	r8, r5
 801ecbc:	2701      	movs	r7, #1
 801ecbe:	fbb1 fcfe 	udiv	ip, r1, lr
 801ecc2:	0c23      	lsrs	r3, r4, #16
 801ecc4:	fb0e 111c 	mls	r1, lr, ip, r1
 801ecc8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 801eccc:	fb08 f10c 	mul.w	r1, r8, ip
 801ecd0:	4299      	cmp	r1, r3
 801ecd2:	d907      	bls.n	801ece4 <__udivmoddi4+0x124>
 801ecd4:	18eb      	adds	r3, r5, r3
 801ecd6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 801ecda:	d202      	bcs.n	801ece2 <__udivmoddi4+0x122>
 801ecdc:	4299      	cmp	r1, r3
 801ecde:	f200 80cd 	bhi.w	801ee7c <__udivmoddi4+0x2bc>
 801ece2:	4684      	mov	ip, r0
 801ece4:	1a59      	subs	r1, r3, r1
 801ece6:	b2a3      	uxth	r3, r4
 801ece8:	fbb1 f0fe 	udiv	r0, r1, lr
 801ecec:	fb0e 1410 	mls	r4, lr, r0, r1
 801ecf0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 801ecf4:	fb08 f800 	mul.w	r8, r8, r0
 801ecf8:	45a0      	cmp	r8, r4
 801ecfa:	d907      	bls.n	801ed0c <__udivmoddi4+0x14c>
 801ecfc:	192c      	adds	r4, r5, r4
 801ecfe:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 801ed02:	d202      	bcs.n	801ed0a <__udivmoddi4+0x14a>
 801ed04:	45a0      	cmp	r8, r4
 801ed06:	f200 80b6 	bhi.w	801ee76 <__udivmoddi4+0x2b6>
 801ed0a:	4618      	mov	r0, r3
 801ed0c:	eba4 0408 	sub.w	r4, r4, r8
 801ed10:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 801ed14:	e79f      	b.n	801ec56 <__udivmoddi4+0x96>
 801ed16:	f1c7 0c20 	rsb	ip, r7, #32
 801ed1a:	40bb      	lsls	r3, r7
 801ed1c:	fa22 fe0c 	lsr.w	lr, r2, ip
 801ed20:	ea4e 0e03 	orr.w	lr, lr, r3
 801ed24:	fa01 f407 	lsl.w	r4, r1, r7
 801ed28:	fa20 f50c 	lsr.w	r5, r0, ip
 801ed2c:	fa21 f30c 	lsr.w	r3, r1, ip
 801ed30:	ea4f 481e 	mov.w	r8, lr, lsr #16
 801ed34:	4325      	orrs	r5, r4
 801ed36:	fbb3 f9f8 	udiv	r9, r3, r8
 801ed3a:	0c2c      	lsrs	r4, r5, #16
 801ed3c:	fb08 3319 	mls	r3, r8, r9, r3
 801ed40:	fa1f fa8e 	uxth.w	sl, lr
 801ed44:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 801ed48:	fb09 f40a 	mul.w	r4, r9, sl
 801ed4c:	429c      	cmp	r4, r3
 801ed4e:	fa02 f207 	lsl.w	r2, r2, r7
 801ed52:	fa00 f107 	lsl.w	r1, r0, r7
 801ed56:	d90b      	bls.n	801ed70 <__udivmoddi4+0x1b0>
 801ed58:	eb1e 0303 	adds.w	r3, lr, r3
 801ed5c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 801ed60:	f080 8087 	bcs.w	801ee72 <__udivmoddi4+0x2b2>
 801ed64:	429c      	cmp	r4, r3
 801ed66:	f240 8084 	bls.w	801ee72 <__udivmoddi4+0x2b2>
 801ed6a:	f1a9 0902 	sub.w	r9, r9, #2
 801ed6e:	4473      	add	r3, lr
 801ed70:	1b1b      	subs	r3, r3, r4
 801ed72:	b2ad      	uxth	r5, r5
 801ed74:	fbb3 f0f8 	udiv	r0, r3, r8
 801ed78:	fb08 3310 	mls	r3, r8, r0, r3
 801ed7c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 801ed80:	fb00 fa0a 	mul.w	sl, r0, sl
 801ed84:	45a2      	cmp	sl, r4
 801ed86:	d908      	bls.n	801ed9a <__udivmoddi4+0x1da>
 801ed88:	eb1e 0404 	adds.w	r4, lr, r4
 801ed8c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 801ed90:	d26b      	bcs.n	801ee6a <__udivmoddi4+0x2aa>
 801ed92:	45a2      	cmp	sl, r4
 801ed94:	d969      	bls.n	801ee6a <__udivmoddi4+0x2aa>
 801ed96:	3802      	subs	r0, #2
 801ed98:	4474      	add	r4, lr
 801ed9a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 801ed9e:	fba0 8902 	umull	r8, r9, r0, r2
 801eda2:	eba4 040a 	sub.w	r4, r4, sl
 801eda6:	454c      	cmp	r4, r9
 801eda8:	46c2      	mov	sl, r8
 801edaa:	464b      	mov	r3, r9
 801edac:	d354      	bcc.n	801ee58 <__udivmoddi4+0x298>
 801edae:	d051      	beq.n	801ee54 <__udivmoddi4+0x294>
 801edb0:	2e00      	cmp	r6, #0
 801edb2:	d069      	beq.n	801ee88 <__udivmoddi4+0x2c8>
 801edb4:	ebb1 050a 	subs.w	r5, r1, sl
 801edb8:	eb64 0403 	sbc.w	r4, r4, r3
 801edbc:	fa04 fc0c 	lsl.w	ip, r4, ip
 801edc0:	40fd      	lsrs	r5, r7
 801edc2:	40fc      	lsrs	r4, r7
 801edc4:	ea4c 0505 	orr.w	r5, ip, r5
 801edc8:	e9c6 5400 	strd	r5, r4, [r6]
 801edcc:	2700      	movs	r7, #0
 801edce:	e747      	b.n	801ec60 <__udivmoddi4+0xa0>
 801edd0:	f1c2 0320 	rsb	r3, r2, #32
 801edd4:	fa20 f703 	lsr.w	r7, r0, r3
 801edd8:	4095      	lsls	r5, r2
 801edda:	fa01 f002 	lsl.w	r0, r1, r2
 801edde:	fa21 f303 	lsr.w	r3, r1, r3
 801ede2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 801ede6:	4338      	orrs	r0, r7
 801ede8:	0c01      	lsrs	r1, r0, #16
 801edea:	fbb3 f7fe 	udiv	r7, r3, lr
 801edee:	fa1f f885 	uxth.w	r8, r5
 801edf2:	fb0e 3317 	mls	r3, lr, r7, r3
 801edf6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 801edfa:	fb07 f308 	mul.w	r3, r7, r8
 801edfe:	428b      	cmp	r3, r1
 801ee00:	fa04 f402 	lsl.w	r4, r4, r2
 801ee04:	d907      	bls.n	801ee16 <__udivmoddi4+0x256>
 801ee06:	1869      	adds	r1, r5, r1
 801ee08:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 801ee0c:	d22f      	bcs.n	801ee6e <__udivmoddi4+0x2ae>
 801ee0e:	428b      	cmp	r3, r1
 801ee10:	d92d      	bls.n	801ee6e <__udivmoddi4+0x2ae>
 801ee12:	3f02      	subs	r7, #2
 801ee14:	4429      	add	r1, r5
 801ee16:	1acb      	subs	r3, r1, r3
 801ee18:	b281      	uxth	r1, r0
 801ee1a:	fbb3 f0fe 	udiv	r0, r3, lr
 801ee1e:	fb0e 3310 	mls	r3, lr, r0, r3
 801ee22:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 801ee26:	fb00 f308 	mul.w	r3, r0, r8
 801ee2a:	428b      	cmp	r3, r1
 801ee2c:	d907      	bls.n	801ee3e <__udivmoddi4+0x27e>
 801ee2e:	1869      	adds	r1, r5, r1
 801ee30:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 801ee34:	d217      	bcs.n	801ee66 <__udivmoddi4+0x2a6>
 801ee36:	428b      	cmp	r3, r1
 801ee38:	d915      	bls.n	801ee66 <__udivmoddi4+0x2a6>
 801ee3a:	3802      	subs	r0, #2
 801ee3c:	4429      	add	r1, r5
 801ee3e:	1ac9      	subs	r1, r1, r3
 801ee40:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 801ee44:	e73b      	b.n	801ecbe <__udivmoddi4+0xfe>
 801ee46:	4637      	mov	r7, r6
 801ee48:	4630      	mov	r0, r6
 801ee4a:	e709      	b.n	801ec60 <__udivmoddi4+0xa0>
 801ee4c:	4607      	mov	r7, r0
 801ee4e:	e6e7      	b.n	801ec20 <__udivmoddi4+0x60>
 801ee50:	4618      	mov	r0, r3
 801ee52:	e6fb      	b.n	801ec4c <__udivmoddi4+0x8c>
 801ee54:	4541      	cmp	r1, r8
 801ee56:	d2ab      	bcs.n	801edb0 <__udivmoddi4+0x1f0>
 801ee58:	ebb8 0a02 	subs.w	sl, r8, r2
 801ee5c:	eb69 020e 	sbc.w	r2, r9, lr
 801ee60:	3801      	subs	r0, #1
 801ee62:	4613      	mov	r3, r2
 801ee64:	e7a4      	b.n	801edb0 <__udivmoddi4+0x1f0>
 801ee66:	4660      	mov	r0, ip
 801ee68:	e7e9      	b.n	801ee3e <__udivmoddi4+0x27e>
 801ee6a:	4618      	mov	r0, r3
 801ee6c:	e795      	b.n	801ed9a <__udivmoddi4+0x1da>
 801ee6e:	4667      	mov	r7, ip
 801ee70:	e7d1      	b.n	801ee16 <__udivmoddi4+0x256>
 801ee72:	4681      	mov	r9, r0
 801ee74:	e77c      	b.n	801ed70 <__udivmoddi4+0x1b0>
 801ee76:	3802      	subs	r0, #2
 801ee78:	442c      	add	r4, r5
 801ee7a:	e747      	b.n	801ed0c <__udivmoddi4+0x14c>
 801ee7c:	f1ac 0c02 	sub.w	ip, ip, #2
 801ee80:	442b      	add	r3, r5
 801ee82:	e72f      	b.n	801ece4 <__udivmoddi4+0x124>
 801ee84:	4638      	mov	r0, r7
 801ee86:	e708      	b.n	801ec9a <__udivmoddi4+0xda>
 801ee88:	4637      	mov	r7, r6
 801ee8a:	e6e9      	b.n	801ec60 <__udivmoddi4+0xa0>

0801ee8c <__aeabi_idiv0>:
 801ee8c:	4770      	bx	lr
 801ee8e:	bf00      	nop

0801ee90 <Reset_Handler>:
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 801ee90:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 801ee92:	e003      	b.n	801ee9c <LoopCopyDataInit>

0801ee94 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 801ee94:	4b0b      	ldr	r3, [pc, #44]	; (801eec4 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 801ee96:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 801ee98:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 801ee9a:	3104      	adds	r1, #4

0801ee9c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 801ee9c:	480a      	ldr	r0, [pc, #40]	; (801eec8 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 801ee9e:	4b0b      	ldr	r3, [pc, #44]	; (801eecc <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 801eea0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 801eea2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 801eea4:	d3f6      	bcc.n	801ee94 <CopyDataInit>
  ldr  r2, =_sbss
 801eea6:	4a0a      	ldr	r2, [pc, #40]	; (801eed0 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 801eea8:	e002      	b.n	801eeb0 <LoopFillZerobss>

0801eeaa <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 801eeaa:	2300      	movs	r3, #0
  str  r3, [r2], #4
 801eeac:	f842 3b04 	str.w	r3, [r2], #4

0801eeb0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 801eeb0:	4b08      	ldr	r3, [pc, #32]	; (801eed4 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 801eeb2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 801eeb4:	d3f9      	bcc.n	801eeaa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 801eeb6:	f7e2 fabd 	bl	8001434 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 801eeba:	f000 f81f 	bl	801eefc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 801eebe:	f7e1 fcdb 	bl	8000878 <main>
  bx  lr    
 801eec2:	4770      	bx	lr
  ldr  r3, =_sidata
 801eec4:	08025cac 	.word	0x08025cac
  ldr  r0, =_sdata
 801eec8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 801eecc:	20000594 	.word	0x20000594
  ldr  r2, =_sbss
 801eed0:	20000598 	.word	0x20000598
  ldr  r3, = _ebss
 801eed4:	2000e02c 	.word	0x2000e02c

0801eed8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 801eed8:	e7fe      	b.n	801eed8 <ADC_IRQHandler>
	...

0801eedc <exit>:
 801eedc:	b508      	push	{r3, lr}
 801eede:	2100      	movs	r1, #0
 801eee0:	4604      	mov	r4, r0
 801eee2:	f000 f883 	bl	801efec <__call_exitprocs>
 801eee6:	4b04      	ldr	r3, [pc, #16]	; (801eef8 <exit+0x1c>)
 801eee8:	6818      	ldr	r0, [r3, #0]
 801eeea:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 801eeec:	b103      	cbz	r3, 801eef0 <exit+0x14>
 801eeee:	4798      	blx	r3
 801eef0:	4620      	mov	r0, r4
 801eef2:	f000 f983 	bl	801f1fc <_exit>
 801eef6:	bf00      	nop
 801eef8:	08025c94 	.word	0x08025c94

0801eefc <__libc_init_array>:
 801eefc:	b570      	push	{r4, r5, r6, lr}
 801eefe:	4e0d      	ldr	r6, [pc, #52]	; (801ef34 <__libc_init_array+0x38>)
 801ef00:	4d0d      	ldr	r5, [pc, #52]	; (801ef38 <__libc_init_array+0x3c>)
 801ef02:	1b76      	subs	r6, r6, r5
 801ef04:	10b6      	asrs	r6, r6, #2
 801ef06:	d006      	beq.n	801ef16 <__libc_init_array+0x1a>
 801ef08:	2400      	movs	r4, #0
 801ef0a:	3401      	adds	r4, #1
 801ef0c:	f855 3b04 	ldr.w	r3, [r5], #4
 801ef10:	4798      	blx	r3
 801ef12:	42a6      	cmp	r6, r4
 801ef14:	d1f9      	bne.n	801ef0a <__libc_init_array+0xe>
 801ef16:	4e09      	ldr	r6, [pc, #36]	; (801ef3c <__libc_init_array+0x40>)
 801ef18:	4d09      	ldr	r5, [pc, #36]	; (801ef40 <__libc_init_array+0x44>)
 801ef1a:	1b76      	subs	r6, r6, r5
 801ef1c:	f000 f972 	bl	801f204 <_init>
 801ef20:	10b6      	asrs	r6, r6, #2
 801ef22:	d006      	beq.n	801ef32 <__libc_init_array+0x36>
 801ef24:	2400      	movs	r4, #0
 801ef26:	3401      	adds	r4, #1
 801ef28:	f855 3b04 	ldr.w	r3, [r5], #4
 801ef2c:	4798      	blx	r3
 801ef2e:	42a6      	cmp	r6, r4
 801ef30:	d1f9      	bne.n	801ef26 <__libc_init_array+0x2a>
 801ef32:	bd70      	pop	{r4, r5, r6, pc}
 801ef34:	08025ca0 	.word	0x08025ca0
 801ef38:	08025ca0 	.word	0x08025ca0
 801ef3c:	08025ca8 	.word	0x08025ca8
 801ef40:	08025ca0 	.word	0x08025ca0

0801ef44 <memset>:
 801ef44:	b4f0      	push	{r4, r5, r6, r7}
 801ef46:	0786      	lsls	r6, r0, #30
 801ef48:	d043      	beq.n	801efd2 <memset+0x8e>
 801ef4a:	1e54      	subs	r4, r2, #1
 801ef4c:	2a00      	cmp	r2, #0
 801ef4e:	d03e      	beq.n	801efce <memset+0x8a>
 801ef50:	b2ca      	uxtb	r2, r1
 801ef52:	4603      	mov	r3, r0
 801ef54:	e002      	b.n	801ef5c <memset+0x18>
 801ef56:	f114 34ff 	adds.w	r4, r4, #4294967295	; 0xffffffff
 801ef5a:	d338      	bcc.n	801efce <memset+0x8a>
 801ef5c:	f803 2b01 	strb.w	r2, [r3], #1
 801ef60:	079d      	lsls	r5, r3, #30
 801ef62:	d1f8      	bne.n	801ef56 <memset+0x12>
 801ef64:	2c03      	cmp	r4, #3
 801ef66:	d92b      	bls.n	801efc0 <memset+0x7c>
 801ef68:	b2cd      	uxtb	r5, r1
 801ef6a:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 801ef6e:	2c0f      	cmp	r4, #15
 801ef70:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 801ef74:	d916      	bls.n	801efa4 <memset+0x60>
 801ef76:	f1a4 0710 	sub.w	r7, r4, #16
 801ef7a:	093f      	lsrs	r7, r7, #4
 801ef7c:	f103 0620 	add.w	r6, r3, #32
 801ef80:	eb06 1607 	add.w	r6, r6, r7, lsl #4
 801ef84:	f103 0210 	add.w	r2, r3, #16
 801ef88:	e942 5504 	strd	r5, r5, [r2, #-16]
 801ef8c:	e942 5502 	strd	r5, r5, [r2, #-8]
 801ef90:	3210      	adds	r2, #16
 801ef92:	42b2      	cmp	r2, r6
 801ef94:	d1f8      	bne.n	801ef88 <memset+0x44>
 801ef96:	f004 040f 	and.w	r4, r4, #15
 801ef9a:	3701      	adds	r7, #1
 801ef9c:	2c03      	cmp	r4, #3
 801ef9e:	eb03 1307 	add.w	r3, r3, r7, lsl #4
 801efa2:	d90d      	bls.n	801efc0 <memset+0x7c>
 801efa4:	461e      	mov	r6, r3
 801efa6:	4622      	mov	r2, r4
 801efa8:	3a04      	subs	r2, #4
 801efaa:	2a03      	cmp	r2, #3
 801efac:	f846 5b04 	str.w	r5, [r6], #4
 801efb0:	d8fa      	bhi.n	801efa8 <memset+0x64>
 801efb2:	1f22      	subs	r2, r4, #4
 801efb4:	f022 0203 	bic.w	r2, r2, #3
 801efb8:	3204      	adds	r2, #4
 801efba:	4413      	add	r3, r2
 801efbc:	f004 0403 	and.w	r4, r4, #3
 801efc0:	b12c      	cbz	r4, 801efce <memset+0x8a>
 801efc2:	b2c9      	uxtb	r1, r1
 801efc4:	441c      	add	r4, r3
 801efc6:	f803 1b01 	strb.w	r1, [r3], #1
 801efca:	429c      	cmp	r4, r3
 801efcc:	d1fb      	bne.n	801efc6 <memset+0x82>
 801efce:	bcf0      	pop	{r4, r5, r6, r7}
 801efd0:	4770      	bx	lr
 801efd2:	4614      	mov	r4, r2
 801efd4:	4603      	mov	r3, r0
 801efd6:	e7c5      	b.n	801ef64 <memset+0x20>

0801efd8 <register_fini>:
 801efd8:	4b02      	ldr	r3, [pc, #8]	; (801efe4 <register_fini+0xc>)
 801efda:	b113      	cbz	r3, 801efe2 <register_fini+0xa>
 801efdc:	4802      	ldr	r0, [pc, #8]	; (801efe8 <register_fini+0x10>)
 801efde:	f000 b879 	b.w	801f0d4 <atexit>
 801efe2:	4770      	bx	lr
 801efe4:	00000000 	.word	0x00000000
 801efe8:	0801f0e1 	.word	0x0801f0e1

0801efec <__call_exitprocs>:
 801efec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801eff0:	4b35      	ldr	r3, [pc, #212]	; (801f0c8 <__call_exitprocs+0xdc>)
 801eff2:	b085      	sub	sp, #20
 801eff4:	460f      	mov	r7, r1
 801eff6:	9003      	str	r0, [sp, #12]
 801eff8:	6818      	ldr	r0, [r3, #0]
 801effa:	f000 f895 	bl	801f128 <__retarget_lock_acquire_recursive>
 801effe:	4b33      	ldr	r3, [pc, #204]	; (801f0cc <__call_exitprocs+0xe0>)
 801f000:	681b      	ldr	r3, [r3, #0]
 801f002:	9301      	str	r3, [sp, #4]
 801f004:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 801f008:	9302      	str	r3, [sp, #8]
 801f00a:	46b9      	mov	r9, r7
 801f00c:	9b01      	ldr	r3, [sp, #4]
 801f00e:	f8d3 6148 	ldr.w	r6, [r3, #328]	; 0x148
 801f012:	b33e      	cbz	r6, 801f064 <__call_exitprocs+0x78>
 801f014:	f8dd a008 	ldr.w	sl, [sp, #8]
 801f018:	f04f 0801 	mov.w	r8, #1
 801f01c:	6874      	ldr	r4, [r6, #4]
 801f01e:	1e65      	subs	r5, r4, #1
 801f020:	d40f      	bmi.n	801f042 <__call_exitprocs+0x56>
 801f022:	3401      	adds	r4, #1
 801f024:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 801f028:	2700      	movs	r7, #0
 801f02a:	f1b9 0f00 	cmp.w	r9, #0
 801f02e:	d020      	beq.n	801f072 <__call_exitprocs+0x86>
 801f030:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 801f034:	454b      	cmp	r3, r9
 801f036:	d01c      	beq.n	801f072 <__call_exitprocs+0x86>
 801f038:	3d01      	subs	r5, #1
 801f03a:	1c6b      	adds	r3, r5, #1
 801f03c:	f1a4 0404 	sub.w	r4, r4, #4
 801f040:	d1f3      	bne.n	801f02a <__call_exitprocs+0x3e>
 801f042:	4b23      	ldr	r3, [pc, #140]	; (801f0d0 <__call_exitprocs+0xe4>)
 801f044:	b173      	cbz	r3, 801f064 <__call_exitprocs+0x78>
 801f046:	e9d6 3200 	ldrd	r3, r2, [r6]
 801f04a:	2a00      	cmp	r2, #0
 801f04c:	d134      	bne.n	801f0b8 <__call_exitprocs+0xcc>
 801f04e:	2b00      	cmp	r3, #0
 801f050:	d032      	beq.n	801f0b8 <__call_exitprocs+0xcc>
 801f052:	4630      	mov	r0, r6
 801f054:	f8ca 3000 	str.w	r3, [sl]
 801f058:	f3af 8000 	nop.w
 801f05c:	f8da 6000 	ldr.w	r6, [sl]
 801f060:	2e00      	cmp	r6, #0
 801f062:	d1db      	bne.n	801f01c <__call_exitprocs+0x30>
 801f064:	4b18      	ldr	r3, [pc, #96]	; (801f0c8 <__call_exitprocs+0xdc>)
 801f066:	6818      	ldr	r0, [r3, #0]
 801f068:	b005      	add	sp, #20
 801f06a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f06e:	f000 b863 	b.w	801f138 <__retarget_lock_release_recursive>
 801f072:	6873      	ldr	r3, [r6, #4]
 801f074:	6822      	ldr	r2, [r4, #0]
 801f076:	3b01      	subs	r3, #1
 801f078:	42ab      	cmp	r3, r5
 801f07a:	bf0c      	ite	eq
 801f07c:	6075      	streq	r5, [r6, #4]
 801f07e:	6027      	strne	r7, [r4, #0]
 801f080:	2a00      	cmp	r2, #0
 801f082:	d0d9      	beq.n	801f038 <__call_exitprocs+0x4c>
 801f084:	f8d6 1188 	ldr.w	r1, [r6, #392]	; 0x188
 801f088:	f8d6 b004 	ldr.w	fp, [r6, #4]
 801f08c:	fa08 f305 	lsl.w	r3, r8, r5
 801f090:	420b      	tst	r3, r1
 801f092:	d108      	bne.n	801f0a6 <__call_exitprocs+0xba>
 801f094:	4790      	blx	r2
 801f096:	6873      	ldr	r3, [r6, #4]
 801f098:	455b      	cmp	r3, fp
 801f09a:	d1b7      	bne.n	801f00c <__call_exitprocs+0x20>
 801f09c:	f8da 3000 	ldr.w	r3, [sl]
 801f0a0:	42b3      	cmp	r3, r6
 801f0a2:	d0c9      	beq.n	801f038 <__call_exitprocs+0x4c>
 801f0a4:	e7b2      	b.n	801f00c <__call_exitprocs+0x20>
 801f0a6:	f8d6 018c 	ldr.w	r0, [r6, #396]	; 0x18c
 801f0aa:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 801f0ae:	4203      	tst	r3, r0
 801f0b0:	d107      	bne.n	801f0c2 <__call_exitprocs+0xd6>
 801f0b2:	9803      	ldr	r0, [sp, #12]
 801f0b4:	4790      	blx	r2
 801f0b6:	e7ee      	b.n	801f096 <__call_exitprocs+0xaa>
 801f0b8:	46b2      	mov	sl, r6
 801f0ba:	461e      	mov	r6, r3
 801f0bc:	2e00      	cmp	r6, #0
 801f0be:	d1ad      	bne.n	801f01c <__call_exitprocs+0x30>
 801f0c0:	e7d0      	b.n	801f064 <__call_exitprocs+0x78>
 801f0c2:	4608      	mov	r0, r1
 801f0c4:	4790      	blx	r2
 801f0c6:	e7e6      	b.n	801f096 <__call_exitprocs+0xaa>
 801f0c8:	20000590 	.word	0x20000590
 801f0cc:	08025c94 	.word	0x08025c94
 801f0d0:	00000000 	.word	0x00000000

0801f0d4 <atexit>:
 801f0d4:	2300      	movs	r3, #0
 801f0d6:	4601      	mov	r1, r0
 801f0d8:	461a      	mov	r2, r3
 801f0da:	4618      	mov	r0, r3
 801f0dc:	f000 b82e 	b.w	801f13c <__register_exitproc>

0801f0e0 <__libc_fini_array>:
 801f0e0:	b538      	push	{r3, r4, r5, lr}
 801f0e2:	4c0a      	ldr	r4, [pc, #40]	; (801f10c <__libc_fini_array+0x2c>)
 801f0e4:	4d0a      	ldr	r5, [pc, #40]	; (801f110 <__libc_fini_array+0x30>)
 801f0e6:	1b64      	subs	r4, r4, r5
 801f0e8:	10a4      	asrs	r4, r4, #2
 801f0ea:	d00a      	beq.n	801f102 <__libc_fini_array+0x22>
 801f0ec:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
 801f0f0:	3b01      	subs	r3, #1
 801f0f2:	eb05 0583 	add.w	r5, r5, r3, lsl #2
 801f0f6:	3c01      	subs	r4, #1
 801f0f8:	f855 3904 	ldr.w	r3, [r5], #-4
 801f0fc:	4798      	blx	r3
 801f0fe:	2c00      	cmp	r4, #0
 801f100:	d1f9      	bne.n	801f0f6 <__libc_fini_array+0x16>
 801f102:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801f106:	f000 b883 	b.w	801f210 <_fini>
 801f10a:	bf00      	nop
 801f10c:	08025cac 	.word	0x08025cac
 801f110:	08025ca8 	.word	0x08025ca8

0801f114 <__retarget_lock_init>:
 801f114:	4770      	bx	lr
 801f116:	bf00      	nop

0801f118 <__retarget_lock_init_recursive>:
 801f118:	4770      	bx	lr
 801f11a:	bf00      	nop

0801f11c <__retarget_lock_close>:
 801f11c:	4770      	bx	lr
 801f11e:	bf00      	nop

0801f120 <__retarget_lock_close_recursive>:
 801f120:	4770      	bx	lr
 801f122:	bf00      	nop

0801f124 <__retarget_lock_acquire>:
 801f124:	4770      	bx	lr
 801f126:	bf00      	nop

0801f128 <__retarget_lock_acquire_recursive>:
 801f128:	4770      	bx	lr
 801f12a:	bf00      	nop

0801f12c <__retarget_lock_try_acquire>:
 801f12c:	2001      	movs	r0, #1
 801f12e:	4770      	bx	lr

0801f130 <__retarget_lock_try_acquire_recursive>:
 801f130:	2001      	movs	r0, #1
 801f132:	4770      	bx	lr

0801f134 <__retarget_lock_release>:
 801f134:	4770      	bx	lr
 801f136:	bf00      	nop

0801f138 <__retarget_lock_release_recursive>:
 801f138:	4770      	bx	lr
 801f13a:	bf00      	nop

0801f13c <__register_exitproc>:
 801f13c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801f140:	4d2b      	ldr	r5, [pc, #172]	; (801f1f0 <__register_exitproc+0xb4>)
 801f142:	4606      	mov	r6, r0
 801f144:	6828      	ldr	r0, [r5, #0]
 801f146:	4698      	mov	r8, r3
 801f148:	460f      	mov	r7, r1
 801f14a:	4691      	mov	r9, r2
 801f14c:	f7ff ffec 	bl	801f128 <__retarget_lock_acquire_recursive>
 801f150:	4b28      	ldr	r3, [pc, #160]	; (801f1f4 <__register_exitproc+0xb8>)
 801f152:	681c      	ldr	r4, [r3, #0]
 801f154:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
 801f158:	2b00      	cmp	r3, #0
 801f15a:	d03d      	beq.n	801f1d8 <__register_exitproc+0x9c>
 801f15c:	685a      	ldr	r2, [r3, #4]
 801f15e:	2a1f      	cmp	r2, #31
 801f160:	dc0d      	bgt.n	801f17e <__register_exitproc+0x42>
 801f162:	f102 0c01 	add.w	ip, r2, #1
 801f166:	bb16      	cbnz	r6, 801f1ae <__register_exitproc+0x72>
 801f168:	3202      	adds	r2, #2
 801f16a:	f8c3 c004 	str.w	ip, [r3, #4]
 801f16e:	6828      	ldr	r0, [r5, #0]
 801f170:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
 801f174:	f7ff ffe0 	bl	801f138 <__retarget_lock_release_recursive>
 801f178:	2000      	movs	r0, #0
 801f17a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801f17e:	4b1e      	ldr	r3, [pc, #120]	; (801f1f8 <__register_exitproc+0xbc>)
 801f180:	b37b      	cbz	r3, 801f1e2 <__register_exitproc+0xa6>
 801f182:	f44f 70c8 	mov.w	r0, #400	; 0x190
 801f186:	f3af 8000 	nop.w
 801f18a:	4603      	mov	r3, r0
 801f18c:	b348      	cbz	r0, 801f1e2 <__register_exitproc+0xa6>
 801f18e:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
 801f192:	2100      	movs	r1, #0
 801f194:	e9c0 2100 	strd	r2, r1, [r0]
 801f198:	f04f 0c01 	mov.w	ip, #1
 801f19c:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
 801f1a0:	460a      	mov	r2, r1
 801f1a2:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
 801f1a6:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
 801f1aa:	2e00      	cmp	r6, #0
 801f1ac:	d0dc      	beq.n	801f168 <__register_exitproc+0x2c>
 801f1ae:	eb03 0182 	add.w	r1, r3, r2, lsl #2
 801f1b2:	2401      	movs	r4, #1
 801f1b4:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
 801f1b8:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
 801f1bc:	4094      	lsls	r4, r2
 801f1be:	4320      	orrs	r0, r4
 801f1c0:	2e02      	cmp	r6, #2
 801f1c2:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
 801f1c6:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
 801f1ca:	d1cd      	bne.n	801f168 <__register_exitproc+0x2c>
 801f1cc:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
 801f1d0:	430c      	orrs	r4, r1
 801f1d2:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
 801f1d6:	e7c7      	b.n	801f168 <__register_exitproc+0x2c>
 801f1d8:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
 801f1dc:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
 801f1e0:	e7bc      	b.n	801f15c <__register_exitproc+0x20>
 801f1e2:	6828      	ldr	r0, [r5, #0]
 801f1e4:	f7ff ffa8 	bl	801f138 <__retarget_lock_release_recursive>
 801f1e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801f1ec:	e7c5      	b.n	801f17a <__register_exitproc+0x3e>
 801f1ee:	bf00      	nop
 801f1f0:	20000590 	.word	0x20000590
 801f1f4:	08025c94 	.word	0x08025c94
 801f1f8:	00000000 	.word	0x00000000

0801f1fc <_exit>:
 801f1fc:	e7fe      	b.n	801f1fc <_exit>
 801f1fe:	bf00      	nop

0801f200 <__EH_FRAME_BEGIN__>:
 801f200:	0000 0000                                   ....

0801f204 <_init>:
 801f204:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f206:	bf00      	nop
 801f208:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801f20a:	bc08      	pop	{r3}
 801f20c:	469e      	mov	lr, r3
 801f20e:	4770      	bx	lr

0801f210 <_fini>:
 801f210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f212:	bf00      	nop
 801f214:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801f216:	bc08      	pop	{r3}
 801f218:	469e      	mov	lr, r3
 801f21a:	4770      	bx	lr
