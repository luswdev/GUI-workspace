
main.elf:     file format elf32-littlearm


Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000598 	.word	0x20000598
 80001c8:	00000000 	.word	0x00000000
 80001cc:	0801f30c 	.word	0x0801f30c

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	2000059c 	.word	0x2000059c
 80001e8:	0801f30c 	.word	0x0801f30c

080001ec <_mainCRTStartup>:
 80001ec:	4b15      	ldr	r3, [pc, #84]	; (8000244 <_mainCRTStartup+0x58>)
 80001ee:	2b00      	cmp	r3, #0
 80001f0:	bf08      	it	eq
 80001f2:	4b13      	ldreq	r3, [pc, #76]	; (8000240 <_mainCRTStartup+0x54>)
 80001f4:	469d      	mov	sp, r3
 80001f6:	f5a3 3a80 	sub.w	sl, r3, #65536	; 0x10000
 80001fa:	2100      	movs	r1, #0
 80001fc:	468b      	mov	fp, r1
 80001fe:	460f      	mov	r7, r1
 8000200:	4813      	ldr	r0, [pc, #76]	; (8000250 <_mainCRTStartup+0x64>)
 8000202:	4a14      	ldr	r2, [pc, #80]	; (8000254 <_mainCRTStartup+0x68>)
 8000204:	1a12      	subs	r2, r2, r0
 8000206:	f01e ff23 	bl	801f050 <memset>
 800020a:	4b0f      	ldr	r3, [pc, #60]	; (8000248 <_mainCRTStartup+0x5c>)
 800020c:	2b00      	cmp	r3, #0
 800020e:	d000      	beq.n	8000212 <_mainCRTStartup+0x26>
 8000210:	4798      	blx	r3
 8000212:	4b0e      	ldr	r3, [pc, #56]	; (800024c <_mainCRTStartup+0x60>)
 8000214:	2b00      	cmp	r3, #0
 8000216:	d000      	beq.n	800021a <_mainCRTStartup+0x2e>
 8000218:	4798      	blx	r3
 800021a:	2000      	movs	r0, #0
 800021c:	2100      	movs	r1, #0
 800021e:	0004      	movs	r4, r0
 8000220:	000d      	movs	r5, r1
 8000222:	480d      	ldr	r0, [pc, #52]	; (8000258 <_mainCRTStartup+0x6c>)
 8000224:	2800      	cmp	r0, #0
 8000226:	d002      	beq.n	800022e <_mainCRTStartup+0x42>
 8000228:	480c      	ldr	r0, [pc, #48]	; (800025c <_mainCRTStartup+0x70>)
 800022a:	f01e ffd9 	bl	801f1e0 <atexit>
 800022e:	f01e feeb 	bl	801f008 <__libc_init_array>
 8000232:	0020      	movs	r0, r4
 8000234:	0029      	movs	r1, r5
 8000236:	f000 fb15 	bl	8000864 <main>
 800023a:	f01e fed5 	bl	801efe8 <exit>
 800023e:	bf00      	nop
 8000240:	00080000 	.word	0x00080000
	...
 8000250:	20000598 	.word	0x20000598
 8000254:	2000e02c 	.word	0x2000e02c
 8000258:	0801f1e1 	.word	0x0801f1e1
 800025c:	0801f1ed 	.word	0x0801f1ed

08000260 <LCD_SetPixel>:
#include <cogui.h>
#include <stm32f429i_discovery_lcd.h>
#include <LCD.h>

void LCD_SetPixel(cogui_color_t *c, co_int32_t x, co_int32_t y)
{
 8000260:	b590      	push	{r4, r7, lr}
 8000262:	b085      	sub	sp, #20
 8000264:	af00      	add	r7, sp, #0
 8000266:	60f8      	str	r0, [r7, #12]
 8000268:	60b9      	str	r1, [r7, #8]
 800026a:	607a      	str	r2, [r7, #4]
	LCD_SetTextColor((co_uint16_t)*c);
 800026c:	68fb      	ldr	r3, [r7, #12]
 800026e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8000272:	b29b      	uxth	r3, r3
 8000274:	4618      	mov	r0, r3
 8000276:	f010 faf7 	bl	8010868 <LCD_SetTextColor>
	LCD_DrawLine(x, y, 1, LCD_DIR_HORIZONTAL);
 800027a:	68bb      	ldr	r3, [r7, #8]
 800027c:	b298      	uxth	r0, r3
 800027e:	687b      	ldr	r3, [r7, #4]
 8000280:	b299      	uxth	r1, r3
 8000282:	2300      	movs	r3, #0
 8000284:	2201      	movs	r2, #1
 8000286:	f010 fd48 	bl	8010d1a <LCD_DrawLine>
}
 800028a:	bf00      	nop
 800028c:	3714      	adds	r7, #20
 800028e:	46bd      	mov	sp, r7
 8000290:	bd90      	pop	{r4, r7, pc}

08000292 <LCD_GetPixel>:
	
void LCD_GetPixel(cogui_color_t *c, co_int32_t x, co_int32_t y) 
{
 8000292:	b480      	push	{r7}
 8000294:	b085      	sub	sp, #20
 8000296:	af00      	add	r7, sp, #0
 8000298:	60f8      	str	r0, [r7, #12]
 800029a:	60b9      	str	r1, [r7, #8]
 800029c:	607a      	str	r2, [r7, #4]
    
}
 800029e:	bf00      	nop
 80002a0:	3714      	adds	r7, #20
 80002a2:	46bd      	mov	sp, r7
 80002a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a8:	4770      	bx	lr

080002aa <LCD_DrawHLine>:

void LCD_DrawHLine(cogui_color_t *c, co_int32_t x1, co_int32_t x2, co_int32_t y)
{
 80002aa:	b590      	push	{r4, r7, lr}
 80002ac:	b085      	sub	sp, #20
 80002ae:	af00      	add	r7, sp, #0
 80002b0:	60f8      	str	r0, [r7, #12]
 80002b2:	60b9      	str	r1, [r7, #8]
 80002b4:	607a      	str	r2, [r7, #4]
 80002b6:	603b      	str	r3, [r7, #0]
	LCD_SetTextColor((co_uint16_t)*c);
 80002b8:	68fb      	ldr	r3, [r7, #12]
 80002ba:	e9d3 3400 	ldrd	r3, r4, [r3]
 80002be:	b29b      	uxth	r3, r3
 80002c0:	4618      	mov	r0, r3
 80002c2:	f010 fad1 	bl	8010868 <LCD_SetTextColor>
	LCD_DrawLine(x1, y, x2-x1, LCD_DIR_HORIZONTAL);
 80002c6:	68bb      	ldr	r3, [r7, #8]
 80002c8:	b298      	uxth	r0, r3
 80002ca:	683b      	ldr	r3, [r7, #0]
 80002cc:	b299      	uxth	r1, r3
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	b29a      	uxth	r2, r3
 80002d2:	68bb      	ldr	r3, [r7, #8]
 80002d4:	b29b      	uxth	r3, r3
 80002d6:	1ad3      	subs	r3, r2, r3
 80002d8:	b29a      	uxth	r2, r3
 80002da:	2300      	movs	r3, #0
 80002dc:	f010 fd1d 	bl	8010d1a <LCD_DrawLine>
}
 80002e0:	bf00      	nop
 80002e2:	3714      	adds	r7, #20
 80002e4:	46bd      	mov	sp, r7
 80002e6:	bd90      	pop	{r4, r7, pc}

080002e8 <LCD_DrawVLine>:

void LCD_DrawVLine(cogui_color_t *c, co_int32_t x , co_int32_t y1, co_int32_t y2)
{
 80002e8:	b590      	push	{r4, r7, lr}
 80002ea:	b085      	sub	sp, #20
 80002ec:	af00      	add	r7, sp, #0
 80002ee:	60f8      	str	r0, [r7, #12]
 80002f0:	60b9      	str	r1, [r7, #8]
 80002f2:	607a      	str	r2, [r7, #4]
 80002f4:	603b      	str	r3, [r7, #0]
	LCD_SetTextColor((co_uint16_t)*c);
 80002f6:	68fb      	ldr	r3, [r7, #12]
 80002f8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80002fc:	b29b      	uxth	r3, r3
 80002fe:	4618      	mov	r0, r3
 8000300:	f010 fab2 	bl	8010868 <LCD_SetTextColor>
	LCD_DrawLine(x, y1, y2-y1, LCD_DIR_VERTICAL);
 8000304:	68bb      	ldr	r3, [r7, #8]
 8000306:	b298      	uxth	r0, r3
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	b299      	uxth	r1, r3
 800030c:	683b      	ldr	r3, [r7, #0]
 800030e:	b29a      	uxth	r2, r3
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	b29b      	uxth	r3, r3
 8000314:	1ad3      	subs	r3, r2, r3
 8000316:	b29a      	uxth	r2, r3
 8000318:	2301      	movs	r3, #1
 800031a:	f010 fcfe 	bl	8010d1a <LCD_DrawLine>
}
 800031e:	bf00      	nop
 8000320:	3714      	adds	r7, #20
 8000322:	46bd      	mov	sp, r7
 8000324:	bd90      	pop	{r4, r7, pc}
	...

08000328 <wait_user_btn>:
};
#endif
#endif

void wait_user_btn(char *s)
{
 8000328:	b580      	push	{r7, lr}
 800032a:	b084      	sub	sp, #16
 800032c:	af00      	add	r7, sp, #0
 800032e:	6078      	str	r0, [r7, #4]
    co_uint16_t len;
	len = cogui_printf(">>>>> Press the USER BUTTON to %s <<<<<\r", s);
 8000330:	6879      	ldr	r1, [r7, #4]
 8000332:	4811      	ldr	r0, [pc, #68]	; (8000378 <wait_user_btn+0x50>)
 8000334:	f01c fd9a 	bl	801ce6c <cogui_printf>
 8000338:	4603      	mov	r3, r0
 800033a:	81fb      	strh	r3, [r7, #14]

	 /* Wait for User push-button is pressed */
    while (STM_EVAL_PBGetState(BUTTON_USER) != Bit_RESET) {
 800033c:	bf00      	nop
 800033e:	2000      	movs	r0, #0
 8000340:	f00d feee 	bl	800e120 <STM_EVAL_PBGetState>
 8000344:	4603      	mov	r3, r0
 8000346:	2b00      	cmp	r3, #0
 8000348:	d1f9      	bne.n	800033e <wait_user_btn+0x16>
    }
    
    /* Wait for User push-button is released */
    while (STM_EVAL_PBGetState(BUTTON_USER) != Bit_SET) {
 800034a:	bf00      	nop
 800034c:	2000      	movs	r0, #0
 800034e:	f00d fee7 	bl	800e120 <STM_EVAL_PBGetState>
 8000352:	4603      	mov	r3, r0
 8000354:	2b01      	cmp	r3, #1
 8000356:	d1f9      	bne.n	800034c <wait_user_btn+0x24>
    }

    /* clear ouput buffer with space */
    while (len --){
 8000358:	e002      	b.n	8000360 <wait_user_btn+0x38>
        cogui_printf(" ");
 800035a:	4808      	ldr	r0, [pc, #32]	; (800037c <wait_user_btn+0x54>)
 800035c:	f01c fd86 	bl	801ce6c <cogui_printf>
    while (len --){
 8000360:	89fb      	ldrh	r3, [r7, #14]
 8000362:	1e5a      	subs	r2, r3, #1
 8000364:	81fa      	strh	r2, [r7, #14]
 8000366:	2b00      	cmp	r3, #0
 8000368:	d1f7      	bne.n	800035a <wait_user_btn+0x32>
    }
    cogui_printf(" \r");
 800036a:	4805      	ldr	r0, [pc, #20]	; (8000380 <wait_user_btn+0x58>)
 800036c:	f01c fd7e 	bl	801ce6c <cogui_printf>
    
}
 8000370:	bf00      	nop
 8000372:	3710      	adds	r7, #16
 8000374:	46bd      	mov	sp, r7
 8000376:	bd80      	pop	{r7, pc}
 8000378:	0801f328 	.word	0x0801f328
 800037c:	0801f354 	.word	0x0801f354
 8000380:	0801f358 	.word	0x0801f358

08000384 <app_a_paint>:

#ifdef USE_GUI
void app_a_paint()
{
 8000384:	b590      	push	{r4, r7, lr}
 8000386:	b085      	sub	sp, #20
 8000388:	af02      	add	r7, sp, #8
	cogui_window_t *win = cogui_window_create_with_title();
 800038a:	f64f 70fe 	movw	r0, #65534	; 0xfffe
 800038e:	f01d ffd1 	bl	801e334 <cogui_window_create>
 8000392:	6078      	str	r0, [r7, #4]
	
	cogui_window_show(win);
 8000394:	6878      	ldr	r0, [r7, #4]
 8000396:	f01e fabb 	bl	801e910 <cogui_window_show>
	
	cogui_widget_t *test_wgt1 = cogui_widget_create(win);
 800039a:	6878      	ldr	r0, [r7, #4]
 800039c:	f01d f86a 	bl	801d474 <cogui_widget_create>
 80003a0:	6038      	str	r0, [r7, #0]
	cogui_widget_set_rectangle(test_wgt1, 100, 100, 100, 100);
 80003a2:	2364      	movs	r3, #100	; 0x64
 80003a4:	9300      	str	r3, [sp, #0]
 80003a6:	2364      	movs	r3, #100	; 0x64
 80003a8:	2264      	movs	r2, #100	; 0x64
 80003aa:	2164      	movs	r1, #100	; 0x64
 80003ac:	6838      	ldr	r0, [r7, #0]
 80003ae:	f01d fbc8 	bl	801db42 <cogui_widget_set_rectangle>
	test_wgt1->gc.background = COGUI_RED;
 80003b2:	683a      	ldr	r2, [r7, #0]
 80003b4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80003b8:	f04f 0400 	mov.w	r4, #0
 80003bc:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
	
	test_wgt1->flag |= COGUI_WIDGET_FLAG_RECT | COGUI_WIDGET_FLAG_FILLED;
 80003c0:	683b      	ldr	r3, [r7, #0]
 80003c2:	689b      	ldr	r3, [r3, #8]
 80003c4:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 80003c8:	683b      	ldr	r3, [r7, #0]
 80003ca:	609a      	str	r2, [r3, #8]

    cogui_widget_set_text(test_wgt1, "test");
 80003cc:	490b      	ldr	r1, [pc, #44]	; (80003fc <app_a_paint+0x78>)
 80003ce:	6838      	ldr	r0, [r7, #0]
 80003d0:	f01d fcb8 	bl	801dd44 <cogui_widget_set_text>
	
	print_result(cogui_widget_show(test_wgt1), "create widget 1");
 80003d4:	6838      	ldr	r0, [r7, #0]
 80003d6:	f01d fea5 	bl	801e124 <cogui_widget_show>
 80003da:	4603      	mov	r3, r0
 80003dc:	4908      	ldr	r1, [pc, #32]	; (8000400 <app_a_paint+0x7c>)
 80003de:	4618      	mov	r0, r3
 80003e0:	f000 ff8a 	bl	80012f8 <print_result>
	
	cogui_printf("[%10s] Paint ok.\r\n", cogui_app_self()->name);
 80003e4:	f01a ffde 	bl	801b3a4 <cogui_app_self>
 80003e8:	4603      	mov	r3, r0
 80003ea:	685b      	ldr	r3, [r3, #4]
 80003ec:	4619      	mov	r1, r3
 80003ee:	4805      	ldr	r0, [pc, #20]	; (8000404 <app_a_paint+0x80>)
 80003f0:	f01c fd3c 	bl	801ce6c <cogui_printf>
}
 80003f4:	bf00      	nop
 80003f6:	370c      	adds	r7, #12
 80003f8:	46bd      	mov	sp, r7
 80003fa:	bd90      	pop	{r4, r7, pc}
 80003fc:	0801f35c 	.word	0x0801f35c
 8000400:	0801f364 	.word	0x0801f364
 8000404:	0801f374 	.word	0x0801f374

08000408 <a_handler>:

StatusType a_handler(struct cogui_event *event)
{
 8000408:	b580      	push	{r7, lr}
 800040a:	b082      	sub	sp, #8
 800040c:	af00      	add	r7, sp, #0
 800040e:	6078      	str	r0, [r7, #4]
	COGUI_ASSERT(event != Co_NULL);
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	2b00      	cmp	r3, #0
 8000414:	d104      	bne.n	8000420 <a_handler+0x18>
 8000416:	225c      	movs	r2, #92	; 0x5c
 8000418:	4908      	ldr	r1, [pc, #32]	; (800043c <a_handler+0x34>)
 800041a:	4809      	ldr	r0, [pc, #36]	; (8000440 <a_handler+0x38>)
 800041c:	f01c ff06 	bl	801d22c <cogui_assert_handler>

	switch (event->type)
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	781b      	ldrb	r3, [r3, #0]
 8000424:	2b0f      	cmp	r3, #15
 8000426:	d104      	bne.n	8000432 <a_handler+0x2a>
    {
	case COGUI_EVENT_PAINT:
		 app_a_paint();
 8000428:	f7ff ffac 	bl	8000384 <app_a_paint>
		break;
 800042c:	bf00      	nop
	default:
		return Co_FALSE;
				
	}
		
	return Co_TRUE;
 800042e:	2301      	movs	r3, #1
 8000430:	e000      	b.n	8000434 <a_handler+0x2c>
		return Co_FALSE;
 8000432:	2300      	movs	r3, #0
}
 8000434:	4618      	mov	r0, r3
 8000436:	3708      	adds	r7, #8
 8000438:	46bd      	mov	sp, r7
 800043a:	bd80      	pop	{r7, pc}
 800043c:	0801fb0c 	.word	0x0801fb0c
 8000440:	0801f388 	.word	0x0801f388

08000444 <app_a>:

void app_a(void *par) 
{
 8000444:	b580      	push	{r7, lr}
 8000446:	b084      	sub	sp, #16
 8000448:	af00      	add	r7, sp, #0
 800044a:	6078      	str	r0, [r7, #4]
	cogui_app_t *app = cogui_app_create("app test");
 800044c:	480b      	ldr	r0, [pc, #44]	; (800047c <app_a+0x38>)
 800044e:	f01a fddd 	bl	801b00c <cogui_app_create>
 8000452:	60f8      	str	r0, [r7, #12]
	if (app == Co_NULL) {
 8000454:	68fb      	ldr	r3, [r7, #12]
 8000456:	2b00      	cmp	r3, #0
 8000458:	d00b      	beq.n	8000472 <app_a+0x2e>
		return;
	}
	
	app->optional_handler = a_handler; 
 800045a:	68fb      	ldr	r3, [r7, #12]
 800045c:	4a08      	ldr	r2, [pc, #32]	; (8000480 <app_a+0x3c>)
 800045e:	655a      	str	r2, [r3, #84]	; 0x54

	cogui_app_run(app);
 8000460:	68f8      	ldr	r0, [r7, #12]
 8000462:	f01a fee1 	bl	801b228 <cogui_app_run>
	cogui_app_delete(app);
 8000466:	68f8      	ldr	r0, [r7, #12]
 8000468:	f01a fe4c 	bl	801b104 <cogui_app_delete>
	
	CoExitTask();
 800046c:	f019 fef6 	bl	801a25c <CoExitTask>
 8000470:	e000      	b.n	8000474 <app_a+0x30>
		return;
 8000472:	bf00      	nop
}
 8000474:	3710      	adds	r7, #16
 8000476:	46bd      	mov	sp, r7
 8000478:	bd80      	pop	{r7, pc}
 800047a:	bf00      	nop
 800047c:	0801f39c 	.word	0x0801f39c
 8000480:	08000409 	.word	0x08000409

08000484 <app_b_paint>:

void app_b_paint()
{
 8000484:	b590      	push	{r4, r7, lr}
 8000486:	b085      	sub	sp, #20
 8000488:	af02      	add	r7, sp, #8
	cogui_window_t *win = cogui_window_create_with_title();
 800048a:	f64f 70fe 	movw	r0, #65534	; 0xfffe
 800048e:	f01d ff51 	bl	801e334 <cogui_window_create>
 8000492:	6078      	str	r0, [r7, #4]
	
	cogui_window_show(win);
 8000494:	6878      	ldr	r0, [r7, #4]
 8000496:	f01e fa3b 	bl	801e910 <cogui_window_show>

    /* widget 1: top-left */
    cogui_widget_t *font_ex = cogui_widget_create(win);
 800049a:	6878      	ldr	r0, [r7, #4]
 800049c:	f01c ffea 	bl	801d474 <cogui_widget_create>
 80004a0:	6038      	str	r0, [r7, #0]
	cogui_widget_set_rectangle(font_ex, 5, 45, 230, 50);
 80004a2:	2332      	movs	r3, #50	; 0x32
 80004a4:	9300      	str	r3, [sp, #0]
 80004a6:	23e6      	movs	r3, #230	; 0xe6
 80004a8:	222d      	movs	r2, #45	; 0x2d
 80004aa:	2105      	movs	r1, #5
 80004ac:	6838      	ldr	r0, [r7, #0]
 80004ae:	f01d fb48 	bl	801db42 <cogui_widget_set_rectangle>
	font_ex->gc.background = COGUI_BLUE;
 80004b2:	683a      	ldr	r2, [r7, #0]
 80004b4:	f04f 031f 	mov.w	r3, #31
 80004b8:	f04f 0400 	mov.w	r4, #0
 80004bc:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
	font_ex->flag |= COGUI_WIDGET_FLAG_RECT | COGUI_WIDGET_FLAG_FILLED;
 80004c0:	683b      	ldr	r3, [r7, #0]
 80004c2:	689b      	ldr	r3, [r3, #8]
 80004c4:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 80004c8:	683b      	ldr	r3, [r7, #0]
 80004ca:	609a      	str	r2, [r3, #8]
    font_ex->gc.padding = COGUI_PADDING_SIMPLE(5);
 80004cc:	683a      	ldr	r2, [r7, #0]
 80004ce:	f04f 3305 	mov.w	r3, #84215045	; 0x5050505
 80004d2:	f04f 0400 	mov.w	r4, #0
 80004d6:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48
    cogui_widget_set_text_align(font_ex, COGUI_TEXT_ALIGN_LEFT|COGUI_TEXT_ALIGN_TOP);
 80004da:	2109      	movs	r1, #9
 80004dc:	6838      	ldr	r0, [r7, #0]
 80004de:	f01d fc15 	bl	801dd0c <cogui_widget_set_text_align>
    cogui_widget_set_text(font_ex, "Text align left-top");
 80004e2:	4977      	ldr	r1, [pc, #476]	; (80006c0 <app_b_paint+0x23c>)
 80004e4:	6838      	ldr	r0, [r7, #0]
 80004e6:	f01d fc2d 	bl	801dd44 <cogui_widget_set_text>
	print_result(cogui_widget_show(font_ex), "create left-top example");
 80004ea:	6838      	ldr	r0, [r7, #0]
 80004ec:	f01d fe1a 	bl	801e124 <cogui_widget_show>
 80004f0:	4603      	mov	r3, r0
 80004f2:	4974      	ldr	r1, [pc, #464]	; (80006c4 <app_b_paint+0x240>)
 80004f4:	4618      	mov	r0, r3
 80004f6:	f000 feff 	bl	80012f8 <print_result>

    /* widget 2: middle-center */
    font_ex = cogui_widget_create(win);
 80004fa:	6878      	ldr	r0, [r7, #4]
 80004fc:	f01c ffba 	bl	801d474 <cogui_widget_create>
 8000500:	6038      	str	r0, [r7, #0]
	cogui_widget_set_rectangle(font_ex, 5, 100, 230, 50);
 8000502:	2332      	movs	r3, #50	; 0x32
 8000504:	9300      	str	r3, [sp, #0]
 8000506:	23e6      	movs	r3, #230	; 0xe6
 8000508:	2264      	movs	r2, #100	; 0x64
 800050a:	2105      	movs	r1, #5
 800050c:	6838      	ldr	r0, [r7, #0]
 800050e:	f01d fb18 	bl	801db42 <cogui_widget_set_rectangle>
	font_ex->gc.background = COGUI_RED;
 8000512:	683a      	ldr	r2, [r7, #0]
 8000514:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000518:	f04f 0400 	mov.w	r4, #0
 800051c:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
	font_ex->flag |= COGUI_WIDGET_FLAG_RECT | COGUI_WIDGET_FLAG_FILLED;
 8000520:	683b      	ldr	r3, [r7, #0]
 8000522:	689b      	ldr	r3, [r3, #8]
 8000524:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8000528:	683b      	ldr	r3, [r7, #0]
 800052a:	609a      	str	r2, [r3, #8]
    font_ex->gc.padding = COGUI_PADDING_SIMPLE(5);
 800052c:	683a      	ldr	r2, [r7, #0]
 800052e:	f04f 3305 	mov.w	r3, #84215045	; 0x5050505
 8000532:	f04f 0400 	mov.w	r4, #0
 8000536:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48
    cogui_widget_set_text_align(font_ex, COGUI_TEXT_ALIGN_CENTER|COGUI_TEXT_ALIGN_MIDDLE);
 800053a:	2114      	movs	r1, #20
 800053c:	6838      	ldr	r0, [r7, #0]
 800053e:	f01d fbe5 	bl	801dd0c <cogui_widget_set_text_align>
    cogui_widget_set_text(font_ex, "Text align middle-center");
 8000542:	4961      	ldr	r1, [pc, #388]	; (80006c8 <app_b_paint+0x244>)
 8000544:	6838      	ldr	r0, [r7, #0]
 8000546:	f01d fbfd 	bl	801dd44 <cogui_widget_set_text>
	print_result(cogui_widget_show(font_ex), "create middle-center example");
 800054a:	6838      	ldr	r0, [r7, #0]
 800054c:	f01d fdea 	bl	801e124 <cogui_widget_show>
 8000550:	4603      	mov	r3, r0
 8000552:	495e      	ldr	r1, [pc, #376]	; (80006cc <app_b_paint+0x248>)
 8000554:	4618      	mov	r0, r3
 8000556:	f000 fecf 	bl	80012f8 <print_result>

    /* widget 3: bottom-right */
    font_ex = cogui_widget_create(win);
 800055a:	6878      	ldr	r0, [r7, #4]
 800055c:	f01c ff8a 	bl	801d474 <cogui_widget_create>
 8000560:	6038      	str	r0, [r7, #0]
	cogui_widget_set_rectangle(font_ex, 5, 155, 230, 50);
 8000562:	2332      	movs	r3, #50	; 0x32
 8000564:	9300      	str	r3, [sp, #0]
 8000566:	23e6      	movs	r3, #230	; 0xe6
 8000568:	229b      	movs	r2, #155	; 0x9b
 800056a:	2105      	movs	r1, #5
 800056c:	6838      	ldr	r0, [r7, #0]
 800056e:	f01d fae8 	bl	801db42 <cogui_widget_set_rectangle>
	font_ex->gc.background = COGUI_GREEN;
 8000572:	683a      	ldr	r2, [r7, #0]
 8000574:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8000578:	f04f 0400 	mov.w	r4, #0
 800057c:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
	font_ex->gc.foreground = COGUI_DARK_GRAY;
 8000580:	683a      	ldr	r2, [r7, #0]
 8000582:	f244 2308 	movw	r3, #16904	; 0x4208
 8000586:	f04f 0400 	mov.w	r4, #0
 800058a:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
	font_ex->flag |= COGUI_WIDGET_FLAG_RECT | COGUI_WIDGET_FLAG_FILLED;
 800058e:	683b      	ldr	r3, [r7, #0]
 8000590:	689b      	ldr	r3, [r3, #8]
 8000592:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8000596:	683b      	ldr	r3, [r7, #0]
 8000598:	609a      	str	r2, [r3, #8]
    font_ex->gc.padding = COGUI_PADDING_SIMPLE(5);
 800059a:	683a      	ldr	r2, [r7, #0]
 800059c:	f04f 3305 	mov.w	r3, #84215045	; 0x5050505
 80005a0:	f04f 0400 	mov.w	r4, #0
 80005a4:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48
    cogui_widget_set_text_align(font_ex, COGUI_TEXT_ALIGN_BOTTOM|COGUI_TEXT_ALIGN_RIGHT);
 80005a8:	2122      	movs	r1, #34	; 0x22
 80005aa:	6838      	ldr	r0, [r7, #0]
 80005ac:	f01d fbae 	bl	801dd0c <cogui_widget_set_text_align>
    cogui_widget_set_text(font_ex, "Text align bottom-right");
 80005b0:	4947      	ldr	r1, [pc, #284]	; (80006d0 <app_b_paint+0x24c>)
 80005b2:	6838      	ldr	r0, [r7, #0]
 80005b4:	f01d fbc6 	bl	801dd44 <cogui_widget_set_text>
	print_result(cogui_widget_show(font_ex), "create bottom-right example");
 80005b8:	6838      	ldr	r0, [r7, #0]
 80005ba:	f01d fdb3 	bl	801e124 <cogui_widget_show>
 80005be:	4603      	mov	r3, r0
 80005c0:	4944      	ldr	r1, [pc, #272]	; (80006d4 <app_b_paint+0x250>)
 80005c2:	4618      	mov	r0, r3
 80005c4:	f000 fe98 	bl	80012f8 <print_result>

    /* widget 4: font size 11x18 */
    font_ex = cogui_widget_create(win);
 80005c8:	6878      	ldr	r0, [r7, #4]
 80005ca:	f01c ff53 	bl	801d474 <cogui_widget_create>
 80005ce:	6038      	str	r0, [r7, #0]
	cogui_widget_set_rectangle(font_ex, 5, 210, 230, 50);
 80005d0:	2332      	movs	r3, #50	; 0x32
 80005d2:	9300      	str	r3, [sp, #0]
 80005d4:	23e6      	movs	r3, #230	; 0xe6
 80005d6:	22d2      	movs	r2, #210	; 0xd2
 80005d8:	2105      	movs	r1, #5
 80005da:	6838      	ldr	r0, [r7, #0]
 80005dc:	f01d fab1 	bl	801db42 <cogui_widget_set_rectangle>
	font_ex->gc.background = COGUI_YELLOW;
 80005e0:	683a      	ldr	r2, [r7, #0]
 80005e2:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80005e6:	f04f 0400 	mov.w	r4, #0
 80005ea:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
	font_ex->gc.foreground = COGUI_DARK_GRAY;
 80005ee:	683a      	ldr	r2, [r7, #0]
 80005f0:	f244 2308 	movw	r3, #16904	; 0x4208
 80005f4:	f04f 0400 	mov.w	r4, #0
 80005f8:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
	font_ex->flag |= COGUI_WIDGET_FLAG_RECT | COGUI_WIDGET_FLAG_FILLED;
 80005fc:	683b      	ldr	r3, [r7, #0]
 80005fe:	689b      	ldr	r3, [r3, #8]
 8000600:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8000604:	683b      	ldr	r3, [r7, #0]
 8000606:	609a      	str	r2, [r3, #8]
    font_ex->gc.padding = COGUI_PADDING_SIMPLE(15);
 8000608:	683a      	ldr	r2, [r7, #0]
 800060a:	f04f 330f 	mov.w	r3, #252645135	; 0xf0f0f0f
 800060e:	f04f 0400 	mov.w	r4, #0
 8000612:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48
    cogui_widget_set_font(font_ex, &tm_font_11x18);
 8000616:	4930      	ldr	r1, [pc, #192]	; (80006d8 <app_b_paint+0x254>)
 8000618:	6838      	ldr	r0, [r7, #0]
 800061a:	f01d fb53 	bl	801dcc4 <cogui_widget_set_font>
    cogui_widget_set_text_align(font_ex, COGUI_TEXT_ALIGN_CENTER|COGUI_TEXT_ALIGN_MIDDLE);
 800061e:	2114      	movs	r1, #20
 8000620:	6838      	ldr	r0, [r7, #0]
 8000622:	f01d fb73 	bl	801dd0c <cogui_widget_set_text_align>
    cogui_widget_set_text(font_ex, "11x18");
 8000626:	492d      	ldr	r1, [pc, #180]	; (80006dc <app_b_paint+0x258>)
 8000628:	6838      	ldr	r0, [r7, #0]
 800062a:	f01d fb8b 	bl	801dd44 <cogui_widget_set_text>
	print_result(cogui_widget_show(font_ex), "create 11x18 example");
 800062e:	6838      	ldr	r0, [r7, #0]
 8000630:	f01d fd78 	bl	801e124 <cogui_widget_show>
 8000634:	4603      	mov	r3, r0
 8000636:	492a      	ldr	r1, [pc, #168]	; (80006e0 <app_b_paint+0x25c>)
 8000638:	4618      	mov	r0, r3
 800063a:	f000 fe5d 	bl	80012f8 <print_result>

    /* widget 5: font size 16x26 */
    font_ex = cogui_widget_create(win);
 800063e:	6878      	ldr	r0, [r7, #4]
 8000640:	f01c ff18 	bl	801d474 <cogui_widget_create>
 8000644:	6038      	str	r0, [r7, #0]
	cogui_widget_set_rectangle(font_ex, 5, 265, 230, 50);
 8000646:	2332      	movs	r3, #50	; 0x32
 8000648:	9300      	str	r3, [sp, #0]
 800064a:	23e6      	movs	r3, #230	; 0xe6
 800064c:	f240 1209 	movw	r2, #265	; 0x109
 8000650:	2105      	movs	r1, #5
 8000652:	6838      	ldr	r0, [r7, #0]
 8000654:	f01d fa75 	bl	801db42 <cogui_widget_set_rectangle>
	font_ex->gc.background = COGUI_PURPLE;
 8000658:	683a      	ldr	r2, [r7, #0]
 800065a:	f64f 031f 	movw	r3, #63519	; 0xf81f
 800065e:	f04f 0400 	mov.w	r4, #0
 8000662:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
	font_ex->flag |= COGUI_WIDGET_FLAG_RECT | COGUI_WIDGET_FLAG_FILLED;
 8000666:	683b      	ldr	r3, [r7, #0]
 8000668:	689b      	ldr	r3, [r3, #8]
 800066a:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 800066e:	683b      	ldr	r3, [r7, #0]
 8000670:	609a      	str	r2, [r3, #8]
    font_ex->gc.padding = COGUI_PADDING_SIMPLE(10);
 8000672:	683a      	ldr	r2, [r7, #0]
 8000674:	f04f 330a 	mov.w	r3, #168430090	; 0xa0a0a0a
 8000678:	f04f 0400 	mov.w	r4, #0
 800067c:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48
    cogui_widget_set_font(font_ex, &tm_font_16x26);
 8000680:	4918      	ldr	r1, [pc, #96]	; (80006e4 <app_b_paint+0x260>)
 8000682:	6838      	ldr	r0, [r7, #0]
 8000684:	f01d fb1e 	bl	801dcc4 <cogui_widget_set_font>
    cogui_widget_set_text_align(font_ex, COGUI_TEXT_ALIGN_CENTER|COGUI_TEXT_ALIGN_MIDDLE);
 8000688:	2114      	movs	r1, #20
 800068a:	6838      	ldr	r0, [r7, #0]
 800068c:	f01d fb3e 	bl	801dd0c <cogui_widget_set_text_align>
    cogui_widget_set_text(font_ex, "16x26");
 8000690:	4915      	ldr	r1, [pc, #84]	; (80006e8 <app_b_paint+0x264>)
 8000692:	6838      	ldr	r0, [r7, #0]
 8000694:	f01d fb56 	bl	801dd44 <cogui_widget_set_text>
	print_result(cogui_widget_show(font_ex), "create 16x26 example");
 8000698:	6838      	ldr	r0, [r7, #0]
 800069a:	f01d fd43 	bl	801e124 <cogui_widget_show>
 800069e:	4603      	mov	r3, r0
 80006a0:	4912      	ldr	r1, [pc, #72]	; (80006ec <app_b_paint+0x268>)
 80006a2:	4618      	mov	r0, r3
 80006a4:	f000 fe28 	bl	80012f8 <print_result>

	cogui_printf("[%10s] Paint ok.\r\n", cogui_app_self()->name);
 80006a8:	f01a fe7c 	bl	801b3a4 <cogui_app_self>
 80006ac:	4603      	mov	r3, r0
 80006ae:	685b      	ldr	r3, [r3, #4]
 80006b0:	4619      	mov	r1, r3
 80006b2:	480f      	ldr	r0, [pc, #60]	; (80006f0 <app_b_paint+0x26c>)
 80006b4:	f01c fbda 	bl	801ce6c <cogui_printf>
}
 80006b8:	bf00      	nop
 80006ba:	370c      	adds	r7, #12
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd90      	pop	{r4, r7, pc}
 80006c0:	0801f3a8 	.word	0x0801f3a8
 80006c4:	0801f3bc 	.word	0x0801f3bc
 80006c8:	0801f3d4 	.word	0x0801f3d4
 80006cc:	0801f3f0 	.word	0x0801f3f0
 80006d0:	0801f410 	.word	0x0801f410
 80006d4:	0801f428 	.word	0x0801f428
 80006d8:	2000014c 	.word	0x2000014c
 80006dc:	0801f444 	.word	0x0801f444
 80006e0:	0801f44c 	.word	0x0801f44c
 80006e4:	20000158 	.word	0x20000158
 80006e8:	0801f464 	.word	0x0801f464
 80006ec:	0801f46c 	.word	0x0801f46c
 80006f0:	0801f374 	.word	0x0801f374

080006f4 <b_handler>:

StatusType b_handler(struct cogui_event *event)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b082      	sub	sp, #8
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]
	COGUI_ASSERT(event != Co_NULL);
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d104      	bne.n	800070c <b_handler+0x18>
 8000702:	22bc      	movs	r2, #188	; 0xbc
 8000704:	4908      	ldr	r1, [pc, #32]	; (8000728 <b_handler+0x34>)
 8000706:	4809      	ldr	r0, [pc, #36]	; (800072c <b_handler+0x38>)
 8000708:	f01c fd90 	bl	801d22c <cogui_assert_handler>

	switch (event->type)
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	781b      	ldrb	r3, [r3, #0]
 8000710:	2b0f      	cmp	r3, #15
 8000712:	d104      	bne.n	800071e <b_handler+0x2a>
    {
	case COGUI_EVENT_PAINT:
		 app_b_paint();
 8000714:	f7ff feb6 	bl	8000484 <app_b_paint>
		break;
 8000718:	bf00      	nop
	default:
		return Co_FALSE;
				
	}
		
	return Co_TRUE;
 800071a:	2301      	movs	r3, #1
 800071c:	e000      	b.n	8000720 <b_handler+0x2c>
		return Co_FALSE;
 800071e:	2300      	movs	r3, #0
}
 8000720:	4618      	mov	r0, r3
 8000722:	3708      	adds	r7, #8
 8000724:	46bd      	mov	sp, r7
 8000726:	bd80      	pop	{r7, pc}
 8000728:	0801fb18 	.word	0x0801fb18
 800072c:	0801f388 	.word	0x0801f388

08000730 <app_b>:

void app_b(void *par) 
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b084      	sub	sp, #16
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
	cogui_app_t *app = cogui_app_create("Font Ex.");
 8000738:	480b      	ldr	r0, [pc, #44]	; (8000768 <app_b+0x38>)
 800073a:	f01a fc67 	bl	801b00c <cogui_app_create>
 800073e:	60f8      	str	r0, [r7, #12]
	if (app == Co_NULL) {
 8000740:	68fb      	ldr	r3, [r7, #12]
 8000742:	2b00      	cmp	r3, #0
 8000744:	d00b      	beq.n	800075e <app_b+0x2e>
		return;
	}
	
	app->optional_handler = b_handler; 
 8000746:	68fb      	ldr	r3, [r7, #12]
 8000748:	4a08      	ldr	r2, [pc, #32]	; (800076c <app_b+0x3c>)
 800074a:	655a      	str	r2, [r3, #84]	; 0x54
	cogui_app_run(app);
 800074c:	68f8      	ldr	r0, [r7, #12]
 800074e:	f01a fd6b 	bl	801b228 <cogui_app_run>
	cogui_app_delete(app);
 8000752:	68f8      	ldr	r0, [r7, #12]
 8000754:	f01a fcd6 	bl	801b104 <cogui_app_delete>
	
	CoExitTask();
 8000758:	f019 fd80 	bl	801a25c <CoExitTask>
 800075c:	e000      	b.n	8000760 <app_b+0x30>
		return;
 800075e:	bf00      	nop
}
 8000760:	3710      	adds	r7, #16
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	0801f484 	.word	0x0801f484
 800076c:	080006f5 	.word	0x080006f5

08000770 <usb_p>:
#endif

#ifdef USE_USB
void usb_p(void *par)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b082      	sub	sp, #8
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
    cogui_printf("[usb] start procress.\r\n");
 8000778:	4803      	ldr	r0, [pc, #12]	; (8000788 <usb_p+0x18>)
 800077a:	f01c fb77 	bl	801ce6c <cogui_printf>
    for(;;){
        USBH_Process(&USB_OTG_Core, &USB_Host);
 800077e:	4903      	ldr	r1, [pc, #12]	; (800078c <usb_p+0x1c>)
 8000780:	4803      	ldr	r0, [pc, #12]	; (8000790 <usb_p+0x20>)
 8000782:	f014 fe4c 	bl	801541e <USBH_Process>
 8000786:	e7fa      	b.n	800077e <usb_p+0xe>
 8000788:	0801f490 	.word	0x0801f490
 800078c:	200033e0 	.word	0x200033e0
 8000790:	20002e34 	.word	0x20002e34

08000794 <gui_init>:
    }
}    
#endif

void gui_init(void *par)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b082      	sub	sp, #8
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
	stm_print_string(GRN_BOLD"\t[OK]\t\t"ARESET"│\r\n");
 800079c:	481f      	ldr	r0, [pc, #124]	; (800081c <gui_init+0x88>)
 800079e:	f000 fd81 	bl	80012a4 <stm_print_string>
    stm_print_string("\t│\t\t\t\t\t\t\t\t\t\t│\r\n\t╰───────────────────────────────────────────────────────────────────────────────╯\r\n\r\n");
 80007a2:	481f      	ldr	r0, [pc, #124]	; (8000820 <gui_init+0x8c>)
 80007a4:	f000 fd7e 	bl	80012a4 <stm_print_string>
    	
#ifdef USE_GUI
	cogui_printf("[%10s] Set up grahpic driver...", "User");
 80007a8:	491e      	ldr	r1, [pc, #120]	; (8000824 <gui_init+0x90>)
 80007aa:	481f      	ldr	r0, [pc, #124]	; (8000828 <gui_init+0x94>)
 80007ac:	f01c fb5e 	bl	801ce6c <cogui_printf>
	cogui_set_graphic_driver(&driver_ops);
 80007b0:	481e      	ldr	r0, [pc, #120]	; (800082c <gui_init+0x98>)
 80007b2:	f01b fbf3 	bl	801bf9c <cogui_set_graphic_driver>
	cogui_printf(GRN_BOLD"\t[OK]\r\n"ARESET);
 80007b6:	481e      	ldr	r0, [pc, #120]	; (8000830 <gui_init+0x9c>)
 80007b8:	f01c fb58 	bl	801ce6c <cogui_printf>
	
	cogui_system_init();
 80007bc:	f01c f822 	bl	801c804 <cogui_system_init>
	
	cogui_printf("[%10s] Create a task \"app a\"...", "User");
 80007c0:	4918      	ldr	r1, [pc, #96]	; (8000824 <gui_init+0x90>)
 80007c2:	481c      	ldr	r0, [pc, #112]	; (8000834 <gui_init+0xa0>)
 80007c4:	f01c fb52 	bl	801ce6c <cogui_printf>
	CoCreateTask(app_a, (void *)0, 25, &app_a_stk[TASK_STK_SIZE-1], TASK_STK_SIZE);
 80007c8:	4b1b      	ldr	r3, [pc, #108]	; (8000838 <gui_init+0xa4>)
 80007ca:	4a1c      	ldr	r2, [pc, #112]	; (800083c <gui_init+0xa8>)
 80007cc:	2100      	movs	r1, #0
 80007ce:	481c      	ldr	r0, [pc, #112]	; (8000840 <gui_init+0xac>)
 80007d0:	f019 fc24 	bl	801a01c <CreateTask>
	cogui_printf(GRN_BOLD"\t[OK]\r\n"ARESET);
 80007d4:	4816      	ldr	r0, [pc, #88]	; (8000830 <gui_init+0x9c>)
 80007d6:	f01c fb49 	bl	801ce6c <cogui_printf>
	
	
	cogui_printf("[%10s] Create a task \"app b\"...", "User");
 80007da:	4912      	ldr	r1, [pc, #72]	; (8000824 <gui_init+0x90>)
 80007dc:	4819      	ldr	r0, [pc, #100]	; (8000844 <gui_init+0xb0>)
 80007de:	f01c fb45 	bl	801ce6c <cogui_printf>
	CoCreateTask(app_b, (void *)0, 30, &app_b_stk[TASK_STK_SIZE-1], TASK_STK_SIZE);
 80007e2:	4b19      	ldr	r3, [pc, #100]	; (8000848 <gui_init+0xb4>)
 80007e4:	4a19      	ldr	r2, [pc, #100]	; (800084c <gui_init+0xb8>)
 80007e6:	2100      	movs	r1, #0
 80007e8:	4819      	ldr	r0, [pc, #100]	; (8000850 <gui_init+0xbc>)
 80007ea:	f019 fc17 	bl	801a01c <CreateTask>
	cogui_printf(GRN_BOLD"\t[OK]\r\n"ARESET);
 80007ee:	4810      	ldr	r0, [pc, #64]	; (8000830 <gui_init+0x9c>)
 80007f0:	f01c fb3c 	bl	801ce6c <cogui_printf>

#ifdef USE_USB
    cogui_printf("[%10s] Create a task \"USB\"...", "User");
 80007f4:	490b      	ldr	r1, [pc, #44]	; (8000824 <gui_init+0x90>)
 80007f6:	4817      	ldr	r0, [pc, #92]	; (8000854 <gui_init+0xc0>)
 80007f8:	f01c fb38 	bl	801ce6c <cogui_printf>
	CoCreateTask(usb_p, (void *)0, 35, &usb_stk[TASK_STK_SIZE-1], TASK_STK_SIZE);
 80007fc:	4b16      	ldr	r3, [pc, #88]	; (8000858 <gui_init+0xc4>)
 80007fe:	4a17      	ldr	r2, [pc, #92]	; (800085c <gui_init+0xc8>)
 8000800:	2100      	movs	r1, #0
 8000802:	4817      	ldr	r0, [pc, #92]	; (8000860 <gui_init+0xcc>)
 8000804:	f019 fc0a 	bl	801a01c <CreateTask>
	cogui_printf(GRN_BOLD"\t[OK]\r\n"ARESET);
 8000808:	4809      	ldr	r0, [pc, #36]	; (8000830 <gui_init+0x9c>)
 800080a:	f01c fb2f 	bl	801ce6c <cogui_printf>
#endif

	CoExitTask();
 800080e:	f019 fd25 	bl	801a25c <CoExitTask>
#endif
}
 8000812:	bf00      	nop
 8000814:	3708      	adds	r7, #8
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	0801f4a8 	.word	0x0801f4a8
 8000820:	0801f4c4 	.word	0x0801f4c4
 8000824:	0801f5d0 	.word	0x0801f5d0
 8000828:	0801f5d8 	.word	0x0801f5d8
 800082c:	20000014 	.word	0x20000014
 8000830:	0801f5f8 	.word	0x0801f5f8
 8000834:	0801f610 	.word	0x0801f610
 8000838:	20001db0 	.word	0x20001db0
 800083c:	00020019 	.word	0x00020019
 8000840:	08000445 	.word	0x08000445
 8000844:	0801f630 	.word	0x0801f630
 8000848:	200025b0 	.word	0x200025b0
 800084c:	0002001e 	.word	0x0002001e
 8000850:	08000731 	.word	0x08000731
 8000854:	0801f650 	.word	0x0801f650
 8000858:	20002db0 	.word	0x20002db0
 800085c:	00020023 	.word	0x00020023
 8000860:	08000771 	.word	0x08000771

08000864 <main>:

int main(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b082      	sub	sp, #8
 8000868:	af02      	add	r7, sp, #8
    UART_Init();
 800086a:	f000 fb23 	bl	8000eb4 <UART_Init>

    stm_print_string("\r\n\r\n\t╭───────────────────────────────────────────────────────────────────────────────╮\r\n\t│\t\t\t\t\t\t\t\t\t\t│\r\n");
 800086e:	4843      	ldr	r0, [pc, #268]	; (800097c <main+0x118>)
 8000870:	f000 fd18 	bl	80012a4 <stm_print_string>
    stm_print_string("\t│\t\t\tSTM32F429 Discovery Board Initial\t\t\t│\r\n");
 8000874:	4842      	ldr	r0, [pc, #264]	; (8000980 <main+0x11c>)
 8000876:	f000 fd15 	bl	80012a4 <stm_print_string>
    stm_print_string("\t│\t\t      ─────────────────────────────────────\t\t\t│\r\n\t│\t\t\t\t\t\t\t\t\t\t│\r\n");
 800087a:	4842      	ldr	r0, [pc, #264]	; (8000984 <main+0x120>)
 800087c:	f000 fd12 	bl	80012a4 <stm_print_string>
    stm_print_string("\t│\t\t[sys] Initial system tick ..............");
    Delay_Init();
	stm_print_string(GRN_BOLD"\t[OK]\t\t"ARESET"│\r\n");
#endif

    stm_print_string("\t│\t\t[sys] Initial LED GPIO setting .........");
 8000880:	4841      	ldr	r0, [pc, #260]	; (8000988 <main+0x124>)
 8000882:	f000 fd0f 	bl	80012a4 <stm_print_string>
    LED_Init();
 8000886:	f000 fb6d 	bl	8000f64 <LED_Init>
	stm_print_string(GRN_BOLD"\t[OK]\t\t"ARESET"│\r\n");
 800088a:	4840      	ldr	r0, [pc, #256]	; (800098c <main+0x128>)
 800088c:	f000 fd0a 	bl	80012a4 <stm_print_string>

    stm_print_string("\t│\t\t[sys] Initial user btn setting .........");
 8000890:	483f      	ldr	r0, [pc, #252]	; (8000990 <main+0x12c>)
 8000892:	f000 fd07 	bl	80012a4 <stm_print_string>
	STM_EVAL_PBInit(BUTTON_USER, BUTTON_MODE_GPIO);
 8000896:	2100      	movs	r1, #0
 8000898:	2000      	movs	r0, #0
 800089a:	f00d fbf5 	bl	800e088 <STM_EVAL_PBInit>
	stm_print_string(GRN_BOLD"\t[OK]\t\t"ARESET"│\r\n");
 800089e:	483b      	ldr	r0, [pc, #236]	; (800098c <main+0x128>)
 80008a0:	f000 fd00 	bl	80012a4 <stm_print_string>

    stm_print_string("\t│\t\t[sys] Initial LCD setting ..............");
 80008a4:	483b      	ldr	r0, [pc, #236]	; (8000994 <main+0x130>)
 80008a6:	f000 fcfd 	bl	80012a4 <stm_print_string>
	LCD_Config();
 80008aa:	f000 fb81 	bl	8000fb0 <LCD_Config>
	stm_print_string(GRN_BOLD"\t[OK]\t\t"ARESET"│\r\n");
 80008ae:	4837      	ldr	r0, [pc, #220]	; (800098c <main+0x128>)
 80008b0:	f000 fcf8 	bl	80012a4 <stm_print_string>

    stm_print_string("\t│\t\t[sys] Enable Layer1 ....................");
 80008b4:	4838      	ldr	r0, [pc, #224]	; (8000998 <main+0x134>)
 80008b6:	f000 fcf5 	bl	80012a4 <stm_print_string>
    LTDC_LayerCmd(LTDC_Layer1, ENABLE);
 80008ba:	2101      	movs	r1, #1
 80008bc:	4837      	ldr	r0, [pc, #220]	; (800099c <main+0x138>)
 80008be:	f006 ffd8 	bl	8007872 <LTDC_LayerCmd>
	stm_print_string(GRN_BOLD"\t[OK]\t\t"ARESET"│\r\n");
 80008c2:	4832      	ldr	r0, [pc, #200]	; (800098c <main+0x128>)
 80008c4:	f000 fcee 	bl	80012a4 <stm_print_string>

    stm_print_string("\t│\t\t[sys] Reload configuration of Layer1 ...");
 80008c8:	4835      	ldr	r0, [pc, #212]	; (80009a0 <main+0x13c>)
 80008ca:	f000 fceb 	bl	80012a4 <stm_print_string>
    LTDC_ReloadConfig(LTDC_IMReload);
 80008ce:	2001      	movs	r0, #1
 80008d0:	f006 feea 	bl	80076a8 <LTDC_ReloadConfig>
	stm_print_string(GRN_BOLD"\t[OK]\t\t"ARESET"│\r\n");
 80008d4:	482d      	ldr	r0, [pc, #180]	; (800098c <main+0x128>)
 80008d6:	f000 fce5 	bl	80012a4 <stm_print_string>

    stm_print_string("\t│\t\t[sys] Enable The LCD ...................");
 80008da:	4832      	ldr	r0, [pc, #200]	; (80009a4 <main+0x140>)
 80008dc:	f000 fce2 	bl	80012a4 <stm_print_string>
    LTDC_Cmd(ENABLE);
 80008e0:	2001      	movs	r0, #1
 80008e2:	f006 fe56 	bl	8007592 <LTDC_Cmd>
	stm_print_string(GRN_BOLD"\t[OK]\t\t"ARESET"│\r\n");
 80008e6:	4829      	ldr	r0, [pc, #164]	; (800098c <main+0x128>)
 80008e8:	f000 fcdc 	bl	80012a4 <stm_print_string>

    stm_print_string("\t│\t\t[sys] Testing The LCD ..................");
 80008ec:	482e      	ldr	r0, [pc, #184]	; (80009a8 <main+0x144>)
 80008ee:	f000 fcd9 	bl	80012a4 <stm_print_string>
    LCD_SetLayer(LCD_BACKGROUND_LAYER);
 80008f2:	2000      	movs	r0, #0
 80008f4:	f00f ff66 	bl	80107c4 <LCD_SetLayer>
	LCD_Clear(COGUI_WHITE);
 80008f8:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80008fc:	f010 f83a 	bl	8010974 <LCD_Clear>
	LCD_SetLayer(LCD_FOREGROUND_LAYER);
 8000900:	2001      	movs	r0, #1
 8000902:	f00f ff5f 	bl	80107c4 <LCD_SetLayer>
	stm_print_string(GRN_BOLD"\t[OK]\t\t"ARESET"│\r\n");
 8000906:	4821      	ldr	r0, [pc, #132]	; (800098c <main+0x128>)
 8000908:	f000 fccc 	bl	80012a4 <stm_print_string>

#ifdef USE_USB
    stm_print_string("\t│\t\t[sys] Initial USB OTG ..................\t\t\t│\r\n");
 800090c:	4827      	ldr	r0, [pc, #156]	; (80009ac <main+0x148>)
 800090e:	f000 fcc9 	bl	80012a4 <stm_print_string>
    USBH_Init(&USB_OTG_Core, 
 8000912:	4b27      	ldr	r3, [pc, #156]	; (80009b0 <main+0x14c>)
 8000914:	9300      	str	r3, [sp, #0]
 8000916:	4b27      	ldr	r3, [pc, #156]	; (80009b4 <main+0x150>)
 8000918:	4a27      	ldr	r2, [pc, #156]	; (80009b8 <main+0x154>)
 800091a:	2100      	movs	r1, #0
 800091c:	4827      	ldr	r0, [pc, #156]	; (80009bc <main+0x158>)
 800091e:	f014 fd24 	bl	801536a <USBH_Init>
            USB_OTG_HS_CORE_ID,
#endif
            &USB_Host,
            &HID_cb, 
            &USBH_USR_cb);
	stm_print_string(UP_CUR GRN_BOLD"\t[OK]\t\t"ARESET"│\r\n");
 8000922:	4827      	ldr	r0, [pc, #156]	; (80009c0 <main+0x15c>)
 8000924:	f000 fcbe 	bl	80012a4 <stm_print_string>
	stm_print_string(GRN_BOLD"\t\t\t\t\t\t\t\t\t[OK]\t\t"ARESET"│\r\n");
 8000928:	4826      	ldr	r0, [pc, #152]	; (80009c4 <main+0x160>)
 800092a:	f000 fcbb 	bl	80012a4 <stm_print_string>
#endif

#ifdef USE_COOS
	stm_print_string("\t│\t\t[sys] Initial CoOS .....................");
 800092e:	4826      	ldr	r0, [pc, #152]	; (80009c8 <main+0x164>)
 8000930:	f000 fcb8 	bl	80012a4 <stm_print_string>
    CoInitOS();
 8000934:	f016 fe7e 	bl	8017634 <CoInitOS>
	stm_print_string(GRN_BOLD"\t[OK]\t\t"ARESET"│\r\n");
 8000938:	4814      	ldr	r0, [pc, #80]	; (800098c <main+0x128>)
 800093a:	f000 fcb3 	bl	80012a4 <stm_print_string>

	stm_print_string("\t│\t\t[sys] Create a task \"gui_init\" .........");
 800093e:	4823      	ldr	r0, [pc, #140]	; (80009cc <main+0x168>)
 8000940:	f000 fcb0 	bl	80012a4 <stm_print_string>
	CoCreateTask(gui_init, (void*)0, 10, &init_stk[TASK_STK_SIZE-1], TASK_STK_SIZE);
 8000944:	4b22      	ldr	r3, [pc, #136]	; (80009d0 <main+0x16c>)
 8000946:	4a23      	ldr	r2, [pc, #140]	; (80009d4 <main+0x170>)
 8000948:	2100      	movs	r1, #0
 800094a:	4823      	ldr	r0, [pc, #140]	; (80009d8 <main+0x174>)
 800094c:	f019 fb66 	bl	801a01c <CreateTask>
	stm_print_string(GRN_BOLD"\t[OK]\t\t"ARESET"│\r\n");
 8000950:	480e      	ldr	r0, [pc, #56]	; (800098c <main+0x128>)
 8000952:	f000 fca7 	bl	80012a4 <stm_print_string>

	stm_print_string("\t│\t\t[sys] Start CoOS .......................");
 8000956:	4821      	ldr	r0, [pc, #132]	; (80009dc <main+0x178>)
 8000958:	f000 fca4 	bl	80012a4 <stm_print_string>
    CoStartOS();
 800095c:	f016 feaa 	bl	80176b4 <CoStartOS>

	stm_print_string(RED_BOLD"\t│\t\t[sys] System initial failed!\r\n"ARESET);
 8000960:	481f      	ldr	r0, [pc, #124]	; (80009e0 <main+0x17c>)
 8000962:	f000 fc9f 	bl	80012a4 <stm_print_string>
#endif

    stm_print_string("\t│\t\t\t\t\t\t\t\t\t\t│\r\n\t╰───────────────────────────────────────────────────────────────────────────────╯\r\n\r\n");
 8000966:	481f      	ldr	r0, [pc, #124]	; (80009e4 <main+0x180>)
 8000968:	f000 fc9c 	bl	80012a4 <stm_print_string>

    STM_EVAL_LEDOff(LED3|LED4);
 800096c:	2001      	movs	r0, #1
 800096e:	f00d fb53 	bl	800e018 <STM_EVAL_LEDOff>
    
	for(;;){
#ifdef USE_USB
        USBH_Process(&USB_OTG_Core, &USB_Host);
 8000972:	4911      	ldr	r1, [pc, #68]	; (80009b8 <main+0x154>)
 8000974:	4811      	ldr	r0, [pc, #68]	; (80009bc <main+0x158>)
 8000976:	f014 fd52 	bl	801541e <USBH_Process>
 800097a:	e7fa      	b.n	8000972 <main+0x10e>
 800097c:	0801f670 	.word	0x0801f670
 8000980:	0801f780 	.word	0x0801f780
 8000984:	0801f7b4 	.word	0x0801f7b4
 8000988:	0801f84c 	.word	0x0801f84c
 800098c:	0801f4a8 	.word	0x0801f4a8
 8000990:	0801f87c 	.word	0x0801f87c
 8000994:	0801f8ac 	.word	0x0801f8ac
 8000998:	0801f8dc 	.word	0x0801f8dc
 800099c:	40016884 	.word	0x40016884
 80009a0:	0801f90c 	.word	0x0801f90c
 80009a4:	0801f93c 	.word	0x0801f93c
 80009a8:	0801f96c 	.word	0x0801f96c
 80009ac:	0801f99c 	.word	0x0801f99c
 80009b0:	20000028 	.word	0x20000028
 80009b4:	200000e4 	.word	0x200000e4
 80009b8:	200033e0 	.word	0x200033e0
 80009bc:	20002e34 	.word	0x20002e34
 80009c0:	0801f9d4 	.word	0x0801f9d4
 80009c4:	0801f9f4 	.word	0x0801f9f4
 80009c8:	0801fa18 	.word	0x0801fa18
 80009cc:	0801fa48 	.word	0x0801fa48
 80009d0:	20000db0 	.word	0x20000db0
 80009d4:	0002000a 	.word	0x0002000a
 80009d8:	08000795 	.word	0x08000795
 80009dc:	0801fa78 	.word	0x0801fa78
 80009e0:	0801faa8 	.word	0x0801faa8
 80009e4:	0801f4c4 	.word	0x0801f4c4

080009e8 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t* file, uint32_t line)
{ 
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b082      	sub	sp, #8
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
 80009f0:	6039      	str	r1, [r7, #0]
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */

    /* Infinite loop */
    while (1)
    {
        cogui_printf("Wrong parameters value: file %s on line %d\r\n", file, line);
 80009f2:	683a      	ldr	r2, [r7, #0]
 80009f4:	6879      	ldr	r1, [r7, #4]
 80009f6:	4802      	ldr	r0, [pc, #8]	; (8000a00 <assert_failed+0x18>)
 80009f8:	f01c fa38 	bl	801ce6c <cogui_printf>
 80009fc:	e7f9      	b.n	80009f2 <assert_failed+0xa>
 80009fe:	bf00      	nop
 8000a00:	0801fadc 	.word	0x0801fadc

08000a04 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0
}
 8000a08:	bf00      	nop
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a10:	4770      	bx	lr

08000a12 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8000a12:	b580      	push	{r7, lr}
 8000a14:	af00      	add	r7, sp, #0
    cogui_printf("Hard Fault exception!!!\r\n");
 8000a16:	4802      	ldr	r0, [pc, #8]	; (8000a20 <HardFault_Handler+0xe>)
 8000a18:	f01c fa28 	bl	801ce6c <cogui_printf>
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8000a1c:	e7fe      	b.n	8000a1c <HardFault_Handler+0xa>
 8000a1e:	bf00      	nop
 8000a20:	0801fb24 	.word	0x0801fb24

08000a24 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0
    cogui_printf("Memory Manage exception!!!\r\n");
 8000a28:	4801      	ldr	r0, [pc, #4]	; (8000a30 <MemManage_Handler+0xc>)
 8000a2a:	f01c fa1f 	bl	801ce6c <cogui_printf>
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8000a2e:	e7fe      	b.n	8000a2e <MemManage_Handler+0xa>
 8000a30:	0801fb40 	.word	0x0801fb40

08000a34 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0
    cogui_printf("Bus Fault exception!!!\r\n");
 8000a38:	4801      	ldr	r0, [pc, #4]	; (8000a40 <BusFault_Handler+0xc>)
 8000a3a:	f01c fa17 	bl	801ce6c <cogui_printf>
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8000a3e:	e7fe      	b.n	8000a3e <BusFault_Handler+0xa>
 8000a40:	0801fb60 	.word	0x0801fb60

08000a44 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	af00      	add	r7, sp, #0
    cogui_printf("Usage Fault exception!!!\r\n");
 8000a48:	4801      	ldr	r0, [pc, #4]	; (8000a50 <UsageFault_Handler+0xc>)
 8000a4a:	f01c fa0f 	bl	801ce6c <cogui_printf>
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8000a4e:	e7fe      	b.n	8000a4e <UsageFault_Handler+0xa>
 8000a50:	0801fb7c 	.word	0x0801fb7c

08000a54 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0
}
 8000a58:	bf00      	nop
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a60:	4770      	bx	lr

08000a62 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8000a62:	b480      	push	{r7}
 8000a64:	af00      	add	r7, sp, #0
}
 8000a66:	bf00      	nop
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6e:	4770      	bx	lr

08000a70 <USBH_USR_Init>:
  * @brief  Add the host lib initialization message to the console
  * @param  None
  * @retval None
  */
void USBH_USR_Init(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	af00      	add	r7, sp, #0
    if (USB_Host_status == USB_HOST_NOT_INIT) {
 8000a74:	4b06      	ldr	r3, [pc, #24]	; (8000a90 <USBH_USR_Init+0x20>)
 8000a76:	781b      	ldrb	r3, [r3, #0]
 8000a78:	b2db      	uxtb	r3, r3
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d102      	bne.n	8000a84 <USBH_USR_Init+0x14>
        cogui_printf("\t│\t\t[sys] Start initial usb host............");
 8000a7e:	4805      	ldr	r0, [pc, #20]	; (8000a94 <USBH_USR_Init+0x24>)
 8000a80:	f01c f9f4 	bl	801ce6c <cogui_printf>
    }

    USB_Host_status = USB_HOST_INIT;
 8000a84:	4b02      	ldr	r3, [pc, #8]	; (8000a90 <USBH_USR_Init+0x20>)
 8000a86:	2201      	movs	r2, #1
 8000a88:	701a      	strb	r2, [r3, #0]
}
 8000a8a:	bf00      	nop
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	20002db4 	.word	0x20002db4
 8000a94:	0801fd30 	.word	0x0801fd30

08000a98 <USBH_USR_DeviceAttached>:
  * @brief  Add the device attachement message to the console
  * @param  None
  * @retval None
  */
void USBH_USR_DeviceAttached(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	af00      	add	r7, sp, #0
    cogui_printf("[system] %s.\r\n", MSG_DEV_ATTACHED);
 8000a9c:	4905      	ldr	r1, [pc, #20]	; (8000ab4 <USBH_USR_DeviceAttached+0x1c>)
 8000a9e:	4806      	ldr	r0, [pc, #24]	; (8000ab8 <USBH_USR_DeviceAttached+0x20>)
 8000aa0:	f01c f9e4 	bl	801ce6c <cogui_printf>
    STM_EVAL_LEDOn(LED4);
 8000aa4:	2001      	movs	r0, #1
 8000aa6:	f00d fa9f 	bl	800dfe8 <STM_EVAL_LEDOn>

    USB_Host_status = USB_HOST_ATTACH;
 8000aaa:	4b04      	ldr	r3, [pc, #16]	; (8000abc <USBH_USR_DeviceAttached+0x24>)
 8000aac:	2202      	movs	r2, #2
 8000aae:	701a      	strb	r2, [r3, #0]
}
 8000ab0:	bf00      	nop
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	0801fbb4 	.word	0x0801fbb4
 8000ab8:	0801fd60 	.word	0x0801fd60
 8000abc:	20002db4 	.word	0x20002db4

08000ac0 <USBH_USR_UnrecoveredError>:
  * @brief  Add the unrecovered error message to the console
  * @param  None
  * @retval None
  */
void USBH_USR_UnrecoveredError (void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	af00      	add	r7, sp, #0
    cogui_printf("[system] %s.\r\n", MSG_UNREC_ERROR);
 8000ac4:	4902      	ldr	r1, [pc, #8]	; (8000ad0 <USBH_USR_UnrecoveredError+0x10>)
 8000ac6:	4803      	ldr	r0, [pc, #12]	; (8000ad4 <USBH_USR_UnrecoveredError+0x14>)
 8000ac8:	f01c f9d0 	bl	801ce6c <cogui_printf>
}
 8000acc:	bf00      	nop
 8000ace:	bd80      	pop	{r7, pc}
 8000ad0:	0801fd08 	.word	0x0801fd08
 8000ad4:	0801fd60 	.word	0x0801fd60

08000ad8 <USBH_USR_DeviceDisconnected>:
  *        USB associated resources
  * @param  None
  * @retval None
  */
void USBH_USR_DeviceDisconnected (void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	af00      	add	r7, sp, #0
    cogui_printf("[system] %s.\r\n", MSG_DEV_DISCONNECTED);
 8000adc:	4905      	ldr	r1, [pc, #20]	; (8000af4 <USBH_USR_DeviceDisconnected+0x1c>)
 8000ade:	4806      	ldr	r0, [pc, #24]	; (8000af8 <USBH_USR_DeviceDisconnected+0x20>)
 8000ae0:	f01c f9c4 	bl	801ce6c <cogui_printf>

    STM_EVAL_LEDOff(LED4);
 8000ae4:	2001      	movs	r0, #1
 8000ae6:	f00d fa97 	bl	800e018 <STM_EVAL_LEDOff>

    USB_Host_status = USB_HOST_DISCONNECT;
 8000aea:	4b04      	ldr	r3, [pc, #16]	; (8000afc <USBH_USR_DeviceDisconnected+0x24>)
 8000aec:	2203      	movs	r2, #3
 8000aee:	701a      	strb	r2, [r3, #0]
}
 8000af0:	bf00      	nop
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	0801fbc8 	.word	0x0801fbc8
 8000af8:	0801fd60 	.word	0x0801fd60
 8000afc:	20002db4 	.word	0x20002db4

08000b00 <USBH_USR_ResetDevice>:
  * @brief  callback of the device reset event
  * @param  None
  * @retval None
  */
void USBH_USR_ResetDevice(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
}
 8000b04:	bf00      	nop
 8000b06:	46bd      	mov	sp, r7
 8000b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0c:	4770      	bx	lr

08000b0e <USBH_USR_DeviceSpeedDetected>:
  * @brief  Add the device speed message to the console
  * @param  Device speed
  * @retval None
  */
void USBH_USR_DeviceSpeedDetected(uint8_t DeviceSpeed)
{
 8000b0e:	b580      	push	{r7, lr}
 8000b10:	b082      	sub	sp, #8
 8000b12:	af00      	add	r7, sp, #0
 8000b14:	4603      	mov	r3, r0
 8000b16:	71fb      	strb	r3, [r7, #7]
    if (DeviceSpeed == HPRT0_PRTSPD_HIGH_SPEED) {
 8000b18:	79fb      	ldrb	r3, [r7, #7]
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d104      	bne.n	8000b28 <USBH_USR_DeviceSpeedDetected+0x1a>
        cogui_printf("[system] %s.\r\n", MSG_DEV_HIGHSPEED);
 8000b1e:	490e      	ldr	r1, [pc, #56]	; (8000b58 <USBH_USR_DeviceSpeedDetected+0x4a>)
 8000b20:	480e      	ldr	r0, [pc, #56]	; (8000b5c <USBH_USR_DeviceSpeedDetected+0x4e>)
 8000b22:	f01c f9a3 	bl	801ce6c <cogui_printf>
        cogui_printf("[system] %s.\r\n", MSG_DEV_LOWSPEED);
	} 
    else {
		cogui_printf("[system] %s.\r\n", MSG_DEV_ERROR);
	}
}
 8000b26:	e013      	b.n	8000b50 <USBH_USR_DeviceSpeedDetected+0x42>
    else if (DeviceSpeed == HPRT0_PRTSPD_FULL_SPEED) {
 8000b28:	79fb      	ldrb	r3, [r7, #7]
 8000b2a:	2b01      	cmp	r3, #1
 8000b2c:	d104      	bne.n	8000b38 <USBH_USR_DeviceSpeedDetected+0x2a>
        cogui_printf("[system] %s.\r\n", MSG_DEV_FULLSPEED);
 8000b2e:	490c      	ldr	r1, [pc, #48]	; (8000b60 <USBH_USR_DeviceSpeedDetected+0x52>)
 8000b30:	480a      	ldr	r0, [pc, #40]	; (8000b5c <USBH_USR_DeviceSpeedDetected+0x4e>)
 8000b32:	f01c f99b 	bl	801ce6c <cogui_printf>
}
 8000b36:	e00b      	b.n	8000b50 <USBH_USR_DeviceSpeedDetected+0x42>
    else if (DeviceSpeed == HPRT0_PRTSPD_LOW_SPEED) {
 8000b38:	79fb      	ldrb	r3, [r7, #7]
 8000b3a:	2b02      	cmp	r3, #2
 8000b3c:	d104      	bne.n	8000b48 <USBH_USR_DeviceSpeedDetected+0x3a>
        cogui_printf("[system] %s.\r\n", MSG_DEV_LOWSPEED);
 8000b3e:	4909      	ldr	r1, [pc, #36]	; (8000b64 <USBH_USR_DeviceSpeedDetected+0x56>)
 8000b40:	4806      	ldr	r0, [pc, #24]	; (8000b5c <USBH_USR_DeviceSpeedDetected+0x4e>)
 8000b42:	f01c f993 	bl	801ce6c <cogui_printf>
}
 8000b46:	e003      	b.n	8000b50 <USBH_USR_DeviceSpeedDetected+0x42>
		cogui_printf("[system] %s.\r\n", MSG_DEV_ERROR);
 8000b48:	4907      	ldr	r1, [pc, #28]	; (8000b68 <USBH_USR_DeviceSpeedDetected+0x5a>)
 8000b4a:	4804      	ldr	r0, [pc, #16]	; (8000b5c <USBH_USR_DeviceSpeedDetected+0x4e>)
 8000b4c:	f01c f98e 	bl	801ce6c <cogui_printf>
}
 8000b50:	bf00      	nop
 8000b52:	3708      	adds	r7, #8
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	0801fbf4 	.word	0x0801fbf4
 8000b5c:	0801fd60 	.word	0x0801fd60
 8000b60:	0801fc10 	.word	0x0801fc10
 8000b64:	0801fc2c 	.word	0x0801fc2c
 8000b68:	0801fc48 	.word	0x0801fc48

08000b6c <USBH_USR_Device_DescAvailable>:
  * @brief  Add the USB device vendor and MFC Ids to the console
  * @param  device descriptor
  * @retval None
  */
void USBH_USR_Device_DescAvailable(void *DeviceDesc)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b084      	sub	sp, #16
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
    USBH_DevDesc_TypeDef *hs;
    hs = DeviceDesc;  
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	60fb      	str	r3, [r7, #12]
    
    cogui_printf("[system] VID : %d\r\n" , (uint32_t)(*hs).idVendor);
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	891b      	ldrh	r3, [r3, #8]
 8000b7c:	4619      	mov	r1, r3
 8000b7e:	4806      	ldr	r0, [pc, #24]	; (8000b98 <USBH_USR_Device_DescAvailable+0x2c>)
 8000b80:	f01c f974 	bl	801ce6c <cogui_printf>
    cogui_printf("[system] PID : %d\r\n" , (uint32_t)(*hs).idProduct); 
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	895b      	ldrh	r3, [r3, #10]
 8000b88:	4619      	mov	r1, r3
 8000b8a:	4804      	ldr	r0, [pc, #16]	; (8000b9c <USBH_USR_Device_DescAvailable+0x30>)
 8000b8c:	f01c f96e 	bl	801ce6c <cogui_printf>
}
 8000b90:	bf00      	nop
 8000b92:	3710      	adds	r7, #16
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd80      	pop	{r7, pc}
 8000b98:	0801fd70 	.word	0x0801fd70
 8000b9c:	0801fd84 	.word	0x0801fd84

08000ba0 <USBH_USR_DeviceAddressAssigned>:
  * @brief  Device addressed event callbacak
  * @param  None
  * @retval None
  */
void USBH_USR_DeviceAddressAssigned(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0
}
 8000ba4:	bf00      	nop
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bac:	4770      	bx	lr

08000bae <USBH_USR_Configuration_DescAvailable>:
  * @retval None
  */
void USBH_USR_Configuration_DescAvailable(USBH_CfgDesc_TypeDef * cfgDesc,
    USBH_InterfaceDesc_TypeDef *itfDesc,
    USBH_EpDesc_TypeDef *epDesc)
{
 8000bae:	b580      	push	{r7, lr}
 8000bb0:	b086      	sub	sp, #24
 8000bb2:	af00      	add	r7, sp, #0
 8000bb4:	60f8      	str	r0, [r7, #12]
 8000bb6:	60b9      	str	r1, [r7, #8]
 8000bb8:	607a      	str	r2, [r7, #4]
    USBH_InterfaceDesc_TypeDef *id;
  
    id = itfDesc;  
 8000bba:	68bb      	ldr	r3, [r7, #8]
 8000bbc:	617b      	str	r3, [r7, #20]
    
    if ((*id).bInterfaceClass  == 0x08) {
 8000bbe:	697b      	ldr	r3, [r7, #20]
 8000bc0:	795b      	ldrb	r3, [r3, #5]
 8000bc2:	2b08      	cmp	r3, #8
 8000bc4:	d104      	bne.n	8000bd0 <USBH_USR_Configuration_DescAvailable+0x22>
		cogui_printf("[system] %s.\r\n", MSG_MSC_CLASS);
 8000bc6:	4908      	ldr	r1, [pc, #32]	; (8000be8 <USBH_USR_Configuration_DescAvailable+0x3a>)
 8000bc8:	4808      	ldr	r0, [pc, #32]	; (8000bec <USBH_USR_Configuration_DescAvailable+0x3e>)
 8000bca:	f01c f94f 	bl	801ce6c <cogui_printf>
    } 
    else if ((*id).bInterfaceClass  == 0x03) {
        cogui_printf("[system] %s.\r\n", MSG_HID_CLASS);
    }   
}
 8000bce:	e007      	b.n	8000be0 <USBH_USR_Configuration_DescAvailable+0x32>
    else if ((*id).bInterfaceClass  == 0x03) {
 8000bd0:	697b      	ldr	r3, [r7, #20]
 8000bd2:	795b      	ldrb	r3, [r3, #5]
 8000bd4:	2b03      	cmp	r3, #3
 8000bd6:	d103      	bne.n	8000be0 <USBH_USR_Configuration_DescAvailable+0x32>
        cogui_printf("[system] %s.\r\n", MSG_HID_CLASS);
 8000bd8:	4905      	ldr	r1, [pc, #20]	; (8000bf0 <USBH_USR_Configuration_DescAvailable+0x42>)
 8000bda:	4804      	ldr	r0, [pc, #16]	; (8000bec <USBH_USR_Configuration_DescAvailable+0x3e>)
 8000bdc:	f01c f946 	bl	801ce6c <cogui_printf>
}
 8000be0:	bf00      	nop
 8000be2:	3718      	adds	r7, #24
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}
 8000be8:	0801fc58 	.word	0x0801fc58
 8000bec:	0801fd60 	.word	0x0801fd60
 8000bf0:	0801fc78 	.word	0x0801fc78

08000bf4 <USBH_USR_Manufacturer_String>:
  * @brief  Add the MFC String to the console
  * @param  Manufacturer String
  * @retval None
  */
void USBH_USR_Manufacturer_String(void *ManufacturerString)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b082      	sub	sp, #8
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
    cogui_printf("[system] Manufacturer : %s\r\n", (char *)ManufacturerString);
 8000bfc:	6879      	ldr	r1, [r7, #4]
 8000bfe:	4803      	ldr	r0, [pc, #12]	; (8000c0c <USBH_USR_Manufacturer_String+0x18>)
 8000c00:	f01c f934 	bl	801ce6c <cogui_printf>
}
 8000c04:	bf00      	nop
 8000c06:	3708      	adds	r7, #8
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bd80      	pop	{r7, pc}
 8000c0c:	0801fd98 	.word	0x0801fd98

08000c10 <USBH_USR_Product_String>:
  * @brief  Add the Product String to the console
  * @param  Product String
  * @retval None
  */
void USBH_USR_Product_String(void *ProductString)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b082      	sub	sp, #8
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
    cogui_printf("[system] Product : %s\r\n", (char *)ProductString);  
 8000c18:	6879      	ldr	r1, [r7, #4]
 8000c1a:	4803      	ldr	r0, [pc, #12]	; (8000c28 <USBH_USR_Product_String+0x18>)
 8000c1c:	f01c f926 	bl	801ce6c <cogui_printf>
}
 8000c20:	bf00      	nop
 8000c22:	3708      	adds	r7, #8
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	0801fdb8 	.word	0x0801fdb8

08000c2c <USBH_USR_SerialNum_String>:
  * @brief  Add the Srial Number String to the console
  * @param  SerialNum_String
  * @retval None
  */
void USBH_USR_SerialNum_String(void *SerialNumString)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b082      	sub	sp, #8
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
    cogui_printf("[system] Serial Number : %s\r\n", (char *)SerialNumString);    
 8000c34:	6879      	ldr	r1, [r7, #4]
 8000c36:	4803      	ldr	r0, [pc, #12]	; (8000c44 <USBH_USR_SerialNum_String+0x18>)
 8000c38:	f01c f918 	bl	801ce6c <cogui_printf>
}
 8000c3c:	bf00      	nop
 8000c3e:	3708      	adds	r7, #8
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	0801fdd0 	.word	0x0801fdd0

08000c48 <USBH_USR_EnumerationDone>:
  * @brief  Enumeration complete event callback
  * @param  None
  * @retval None
  */
void USBH_USR_EnumerationDone(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	af00      	add	r7, sp, #0
    cogui_printf("[system] %s.\r\n", MSG_DEV_ENUMERATED);
 8000c4c:	4902      	ldr	r1, [pc, #8]	; (8000c58 <USBH_USR_EnumerationDone+0x10>)
 8000c4e:	4803      	ldr	r0, [pc, #12]	; (8000c5c <USBH_USR_EnumerationDone+0x14>)
 8000c50:	f01c f90c 	bl	801ce6c <cogui_printf>
}
 8000c54:	bf00      	nop
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	0801fbdc 	.word	0x0801fbdc
 8000c5c:	0801fd60 	.word	0x0801fd60

08000c60 <USBH_USR_DeviceNotSupported>:
  * @brief  Device is not supported callback
  * @param  None
  * @retval None
  */
void USBH_USR_DeviceNotSupported(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	af00      	add	r7, sp, #0
    cogui_printf("[system] Device not supported.\r\n");
 8000c64:	4802      	ldr	r0, [pc, #8]	; (8000c70 <USBH_USR_DeviceNotSupported+0x10>)
 8000c66:	f01c f901 	bl	801ce6c <cogui_printf>
}
 8000c6a:	bf00      	nop
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	0801fdf0 	.word	0x0801fdf0

08000c74 <USBH_USR_UserInput>:
  * @brief  User Action for application state entry callback
  * @param  None
  * @retval USBH_USR_Status : User response for key button
  */
USBH_USR_Status USBH_USR_UserInput(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0
    return USBH_USR_RESP_OK;
 8000c78:	2301      	movs	r3, #1
}
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c82:	4770      	bx	lr

08000c84 <USBH_USR_OverCurrentDetected>:
  * @brief  Over Current Detected on VBUS
  * @param  None
  * @retval Staus
  */
void USBH_USR_OverCurrentDetected (void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	af00      	add	r7, sp, #0
    cogui_printf("[system] Overcurrent detected.\r\n");
 8000c88:	4802      	ldr	r0, [pc, #8]	; (8000c94 <USBH_USR_OverCurrentDetected+0x10>)
 8000c8a:	f01c f8ef 	bl	801ce6c <cogui_printf>
}
 8000c8e:	bf00      	nop
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	0801fe14 	.word	0x0801fe14

08000c98 <USBH_USR_DeInit>:
  * @brief  De-init User state and associated variables
  * @param  None
  * @retval None
  */
void USBH_USR_DeInit(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
}
 8000c9c:	bf00      	nop
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca4:	4770      	bx	lr

08000ca6 <USR_KEYBRD_Init>:

void  USR_KEYBRD_Init (void) 
{
 8000ca6:	b480      	push	{r7}
 8000ca8:	af00      	add	r7, sp, #0
}
 8000caa:	bf00      	nop
 8000cac:	46bd      	mov	sp, r7
 8000cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb2:	4770      	bx	lr

08000cb4 <USR_KEYBRD_ProcessData>:

void  USR_KEYBRD_ProcessData (uint8_t pbuf)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	b083      	sub	sp, #12
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	4603      	mov	r3, r0
 8000cbc:	71fb      	strb	r3, [r7, #7]
}
 8000cbe:	bf00      	nop
 8000cc0:	370c      	adds	r7, #12
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc8:	4770      	bx	lr

08000cca <update_cursor>:

int16_t mouse_event[3] = {0, 0, 0};
int16_t cursor[3] = {0,0,0};

void update_cursor(int16_t dx, int16_t dy, uint8_t btn)
{
 8000cca:	b580      	push	{r7, lr}
 8000ccc:	b090      	sub	sp, #64	; 0x40
 8000cce:	af00      	add	r7, sp, #0
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	80fb      	strh	r3, [r7, #6]
 8000cd4:	460b      	mov	r3, r1
 8000cd6:	80bb      	strh	r3, [r7, #4]
 8000cd8:	4613      	mov	r3, r2
 8000cda:	70fb      	strb	r3, [r7, #3]

    LCD_SetTextColor(COGUI_BLACK);
    LCD_DrawFullRect(cursor[0], cursor[1], 10, 10);     /* draw cursor                                          */
#else
    struct cogui_event event;
    COGUI_EVENT_INIT(&event, COGUI_EVENT_MOUSE_MOTION);
 8000cdc:	230c      	movs	r3, #12
 8000cde:	733b      	strb	r3, [r7, #12]
 8000ce0:	f01a fb60 	bl	801b3a4 <cogui_app_self>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	613b      	str	r3, [r7, #16]
 8000ce8:	2300      	movs	r3, #0
 8000cea:	753b      	strb	r3, [r7, #20]

    event.dx = dx;
 8000cec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000cf0:	623b      	str	r3, [r7, #32]
    event.dy = dy;
 8000cf2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000cf6:	627b      	str	r3, [r7, #36]	; 0x24

    cogui_send(cogui_get_server(), &event);
 8000cf8:	f01b fd68 	bl	801c7cc <cogui_get_server>
 8000cfc:	4602      	mov	r2, r0
 8000cfe:	f107 030c 	add.w	r3, r7, #12
 8000d02:	4619      	mov	r1, r3
 8000d04:	4610      	mov	r0, r2
 8000d06:	f01b fddd 	bl	801c8c4 <cogui_send>
#endif

    USB_Host_status = USB_HOST_MOUSE_IDLE;              /* set status back to idle                              */
 8000d0a:	4b03      	ldr	r3, [pc, #12]	; (8000d18 <update_cursor+0x4e>)
 8000d0c:	2209      	movs	r2, #9
 8000d0e:	701a      	strb	r2, [r3, #0]
}
 8000d10:	bf00      	nop
 8000d12:	3740      	adds	r7, #64	; 0x40
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	20002db4 	.word	0x20002db4

08000d1c <USR_MOUSE_Init>:

void  USR_MOUSE_Init (void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	af00      	add	r7, sp, #0
    cogui_printf("[system] Connect to a mouse.\r\n");
 8000d20:	4806      	ldr	r0, [pc, #24]	; (8000d3c <USR_MOUSE_Init+0x20>)
 8000d22:	f01c f8a3 	bl	801ce6c <cogui_printf>

    cursor[0] = 115;
 8000d26:	4b06      	ldr	r3, [pc, #24]	; (8000d40 <USR_MOUSE_Init+0x24>)
 8000d28:	2273      	movs	r2, #115	; 0x73
 8000d2a:	801a      	strh	r2, [r3, #0]
    cursor[1] = 155;
 8000d2c:	4b04      	ldr	r3, [pc, #16]	; (8000d40 <USR_MOUSE_Init+0x24>)
 8000d2e:	229b      	movs	r2, #155	; 0x9b
 8000d30:	805a      	strh	r2, [r3, #2]
    //update_cursor(0, 0, 0);                     /* set cursor position in middle of screen              */

    USB_Host_status = USB_HOST_MOUSE_CONNECT;
 8000d32:	4b04      	ldr	r3, [pc, #16]	; (8000d44 <USR_MOUSE_Init+0x28>)
 8000d34:	2204      	movs	r2, #4
 8000d36:	701a      	strb	r2, [r3, #0]
}
 8000d38:	bf00      	nop
 8000d3a:	bd80      	pop	{r7, pc}
 8000d3c:	0801fe38 	.word	0x0801fe38
 8000d40:	20002dc0 	.word	0x20002dc0
 8000d44:	20002db4 	.word	0x20002db4

08000d48 <USR_MOUSE_ProcessData>:

void  USR_MOUSE_ProcessData (HID_MOUSE_Data_TypeDef *data)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b082      	sub	sp, #8
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
    if (data->x || data->y) {
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	781b      	ldrb	r3, [r3, #0]
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d103      	bne.n	8000d60 <USR_MOUSE_ProcessData+0x18>
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	785b      	ldrb	r3, [r3, #1]
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d02b      	beq.n	8000db8 <USR_MOUSE_ProcessData+0x70>
        USB_Host_status = USB_HOST_MOUSE_MOVE;
 8000d60:	4b2c      	ldr	r3, [pc, #176]	; (8000e14 <USR_MOUSE_ProcessData+0xcc>)
 8000d62:	2205      	movs	r2, #5
 8000d64:	701a      	strb	r2, [r3, #0]

        if (data->x > 127) {
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	781b      	ldrb	r3, [r3, #0]
 8000d6a:	b25b      	sxtb	r3, r3
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	da09      	bge.n	8000d84 <USR_MOUSE_ProcessData+0x3c>
            mouse_event[0] = data->x - 256;
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	781b      	ldrb	r3, [r3, #0]
 8000d74:	b29b      	uxth	r3, r3
 8000d76:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8000d7a:	b29b      	uxth	r3, r3
 8000d7c:	b21a      	sxth	r2, r3
 8000d7e:	4b26      	ldr	r3, [pc, #152]	; (8000e18 <USR_MOUSE_ProcessData+0xd0>)
 8000d80:	801a      	strh	r2, [r3, #0]
 8000d82:	e004      	b.n	8000d8e <USR_MOUSE_ProcessData+0x46>
        }
        else {
            mouse_event[0] = data->x;
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	781b      	ldrb	r3, [r3, #0]
 8000d88:	b21a      	sxth	r2, r3
 8000d8a:	4b23      	ldr	r3, [pc, #140]	; (8000e18 <USR_MOUSE_ProcessData+0xd0>)
 8000d8c:	801a      	strh	r2, [r3, #0]
        }
        if (data->y > 127) {
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	785b      	ldrb	r3, [r3, #1]
 8000d92:	b25b      	sxtb	r3, r3
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	da09      	bge.n	8000dac <USR_MOUSE_ProcessData+0x64>
            mouse_event[1] = data->y - 256;
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	785b      	ldrb	r3, [r3, #1]
 8000d9c:	b29b      	uxth	r3, r3
 8000d9e:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8000da2:	b29b      	uxth	r3, r3
 8000da4:	b21a      	sxth	r2, r3
 8000da6:	4b1c      	ldr	r3, [pc, #112]	; (8000e18 <USR_MOUSE_ProcessData+0xd0>)
 8000da8:	805a      	strh	r2, [r3, #2]
        if (data->y > 127) {
 8000daa:	e01d      	b.n	8000de8 <USR_MOUSE_ProcessData+0xa0>
        }
        else {
            mouse_event[1] = data->y;
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	785b      	ldrb	r3, [r3, #1]
 8000db0:	b21a      	sxth	r2, r3
 8000db2:	4b19      	ldr	r3, [pc, #100]	; (8000e18 <USR_MOUSE_ProcessData+0xd0>)
 8000db4:	805a      	strh	r2, [r3, #2]
        if (data->y > 127) {
 8000db6:	e017      	b.n	8000de8 <USR_MOUSE_ProcessData+0xa0>
        }
    }
    else {
        mouse_event[0] = 0;
 8000db8:	4b17      	ldr	r3, [pc, #92]	; (8000e18 <USR_MOUSE_ProcessData+0xd0>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	801a      	strh	r2, [r3, #0]
        mouse_event[1] = 0;
 8000dbe:	4b16      	ldr	r3, [pc, #88]	; (8000e18 <USR_MOUSE_ProcessData+0xd0>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	805a      	strh	r2, [r3, #2]

        switch (data->button) {
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	78db      	ldrb	r3, [r3, #3]
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d004      	beq.n	8000dd6 <USR_MOUSE_ProcessData+0x8e>
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	db0a      	blt.n	8000de6 <USR_MOUSE_ProcessData+0x9e>
 8000dd0:	2b04      	cmp	r3, #4
 8000dd2:	dc08      	bgt.n	8000de6 <USR_MOUSE_ProcessData+0x9e>
 8000dd4:	e003      	b.n	8000dde <USR_MOUSE_ProcessData+0x96>
            case 0:
                USB_Host_status = USB_HOST_MOUSE_BUTTON_RELEASED;
 8000dd6:	4b0f      	ldr	r3, [pc, #60]	; (8000e14 <USR_MOUSE_ProcessData+0xcc>)
 8000dd8:	2207      	movs	r2, #7
 8000dda:	701a      	strb	r2, [r3, #0]
                break;
 8000ddc:	e004      	b.n	8000de8 <USR_MOUSE_ProcessData+0xa0>

            case 1:
            case 2:
            case 3:
            case 4:
                USB_Host_status = USB_HOST_MOUSE_BUTTON_PRESSED;
 8000dde:	4b0d      	ldr	r3, [pc, #52]	; (8000e14 <USR_MOUSE_ProcessData+0xcc>)
 8000de0:	2206      	movs	r2, #6
 8000de2:	701a      	strb	r2, [r3, #0]
                break;
 8000de4:	e000      	b.n	8000de8 <USR_MOUSE_ProcessData+0xa0>

            default:
                break;
 8000de6:	bf00      	nop
        }
    }

    mouse_event[2] = data->button;
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	78db      	ldrb	r3, [r3, #3]
 8000dec:	b21a      	sxth	r2, r3
 8000dee:	4b0a      	ldr	r3, [pc, #40]	; (8000e18 <USR_MOUSE_ProcessData+0xd0>)
 8000df0:	809a      	strh	r2, [r3, #4]

    update_cursor(mouse_event[0], mouse_event[1], mouse_event[2]);
 8000df2:	4b09      	ldr	r3, [pc, #36]	; (8000e18 <USR_MOUSE_ProcessData+0xd0>)
 8000df4:	f9b3 0000 	ldrsh.w	r0, [r3]
 8000df8:	4b07      	ldr	r3, [pc, #28]	; (8000e18 <USR_MOUSE_ProcessData+0xd0>)
 8000dfa:	f9b3 1002 	ldrsh.w	r1, [r3, #2]
 8000dfe:	4b06      	ldr	r3, [pc, #24]	; (8000e18 <USR_MOUSE_ProcessData+0xd0>)
 8000e00:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000e04:	b2db      	uxtb	r3, r3
 8000e06:	461a      	mov	r2, r3
 8000e08:	f7ff ff5f 	bl	8000cca <update_cursor>
}
 8000e0c:	bf00      	nop
 8000e0e:	3708      	adds	r7, #8
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	20002db4 	.word	0x20002db4
 8000e18:	20002db8 	.word	0x20002db8

08000e1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	b083      	sub	sp, #12
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	4603      	mov	r3, r0
 8000e24:	6039      	str	r1, [r7, #0]
 8000e26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	db0a      	blt.n	8000e46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	b2da      	uxtb	r2, r3
 8000e34:	490c      	ldr	r1, [pc, #48]	; (8000e68 <__NVIC_SetPriority+0x4c>)
 8000e36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e3a:	0112      	lsls	r2, r2, #4
 8000e3c:	b2d2      	uxtb	r2, r2
 8000e3e:	440b      	add	r3, r1
 8000e40:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e44:	e00a      	b.n	8000e5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	b2da      	uxtb	r2, r3
 8000e4a:	4908      	ldr	r1, [pc, #32]	; (8000e6c <__NVIC_SetPriority+0x50>)
 8000e4c:	79fb      	ldrb	r3, [r7, #7]
 8000e4e:	f003 030f 	and.w	r3, r3, #15
 8000e52:	3b04      	subs	r3, #4
 8000e54:	0112      	lsls	r2, r2, #4
 8000e56:	b2d2      	uxtb	r2, r2
 8000e58:	440b      	add	r3, r1
 8000e5a:	761a      	strb	r2, [r3, #24]
}
 8000e5c:	bf00      	nop
 8000e5e:	370c      	adds	r7, #12
 8000e60:	46bd      	mov	sp, r7
 8000e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e66:	4770      	bx	lr
 8000e68:	e000e100 	.word	0xe000e100
 8000e6c:	e000ed00 	.word	0xe000ed00

08000e70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b082      	sub	sp, #8
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	3b01      	subs	r3, #1
 8000e7c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e80:	d301      	bcc.n	8000e86 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e82:	2301      	movs	r3, #1
 8000e84:	e00f      	b.n	8000ea6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e86:	4a0a      	ldr	r2, [pc, #40]	; (8000eb0 <SysTick_Config+0x40>)
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	3b01      	subs	r3, #1
 8000e8c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e8e:	210f      	movs	r1, #15
 8000e90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000e94:	f7ff ffc2 	bl	8000e1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e98:	4b05      	ldr	r3, [pc, #20]	; (8000eb0 <SysTick_Config+0x40>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e9e:	4b04      	ldr	r3, [pc, #16]	; (8000eb0 <SysTick_Config+0x40>)
 8000ea0:	2207      	movs	r2, #7
 8000ea2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ea4:	2300      	movs	r3, #0
}
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	3708      	adds	r7, #8
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	e000e010 	.word	0xe000e010

08000eb4 <UART_Init>:
 * @param[out] None
 * @retval     None
 *******************************************************************************
 */
void UART_Init(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b086      	sub	sp, #24
 8000eb8:	af00      	add	r7, sp, #0
	USART_InitTypeDef USART_InitStructure;
    GPIO_InitTypeDef   GPIO_InitStructure;
	
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA,  ENABLE);  
 8000eba:	2101      	movs	r1, #1
 8000ebc:	2001      	movs	r0, #1
 8000ebe:	f007 fd2f 	bl	8008920 <RCC_AHB1PeriphClockCmd>
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);
 8000ec2:	2101      	movs	r1, #1
 8000ec4:	2010      	movs	r0, #16
 8000ec6:	f007 fdab 	bl	8008a20 <RCC_APB2PeriphClockCmd>
	
	GPIO_PinAFConfig(GPIOA, GPIO_PinSource9,  GPIO_AF_USART1);
 8000eca:	2207      	movs	r2, #7
 8000ecc:	2109      	movs	r1, #9
 8000ece:	4823      	ldr	r0, [pc, #140]	; (8000f5c <UART_Init+0xa8>)
 8000ed0:	f005 fcc5 	bl	800685e <GPIO_PinAFConfig>
    GPIO_PinAFConfig(GPIOA, GPIO_PinSource10, GPIO_AF_USART1);
 8000ed4:	2207      	movs	r2, #7
 8000ed6:	210a      	movs	r1, #10
 8000ed8:	4820      	ldr	r0, [pc, #128]	; (8000f5c <UART_Init+0xa8>)
 8000eda:	f005 fcc0 	bl	800685e <GPIO_PinAFConfig>
	
	GPIO_StructInit(&GPIO_InitStructure);
 8000ede:	463b      	mov	r3, r7
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	f005 fbdb 	bl	800669c <GPIO_StructInit>
    GPIO_InitStructure.GPIO_Pin 	= GPIO_Pin_9;
 8000ee6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000eea:	603b      	str	r3, [r7, #0]
    GPIO_InitStructure.GPIO_Mode 	= GPIO_Mode_AF;
 8000eec:	2302      	movs	r3, #2
 8000eee:	713b      	strb	r3, [r7, #4]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	71bb      	strb	r3, [r7, #6]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8000ef4:	2302      	movs	r3, #2
 8000ef6:	717b      	strb	r3, [r7, #5]
    GPIO_Init(GPIOA, &GPIO_InitStructure);
 8000ef8:	463b      	mov	r3, r7
 8000efa:	4619      	mov	r1, r3
 8000efc:	4817      	ldr	r0, [pc, #92]	; (8000f5c <UART_Init+0xa8>)
 8000efe:	f005 fb3f 	bl	8006580 <GPIO_Init>

    GPIO_InitStructure.GPIO_Pin  = GPIO_Pin_10;
 8000f02:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f06:	603b      	str	r3, [r7, #0]
  	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8000f08:	2302      	movs	r3, #2
 8000f0a:	713b      	strb	r3, [r7, #4]
    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	71fb      	strb	r3, [r7, #7]
    GPIO_Init(GPIOA, &GPIO_InitStructure);
 8000f10:	463b      	mov	r3, r7
 8000f12:	4619      	mov	r1, r3
 8000f14:	4811      	ldr	r0, [pc, #68]	; (8000f5c <UART_Init+0xa8>)
 8000f16:	f005 fb33 	bl	8006580 <GPIO_Init>
		
	USART_StructInit(&USART_InitStructure);
 8000f1a:	f107 0308 	add.w	r3, r7, #8
 8000f1e:	4618      	mov	r0, r3
 8000f20:	f00c fc26 	bl	800d770 <USART_StructInit>
	USART_InitStructure.USART_BaudRate            = 9600;
 8000f24:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8000f28:	60bb      	str	r3, [r7, #8]
	USART_InitStructure.USART_WordLength          = USART_WordLength_8b;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	81bb      	strh	r3, [r7, #12]
	USART_InitStructure.USART_StopBits            = USART_StopBits_1;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	81fb      	strh	r3, [r7, #14]
	USART_InitStructure.USART_Parity              = USART_Parity_No ;
 8000f32:	2300      	movs	r3, #0
 8000f34:	823b      	strh	r3, [r7, #16]
	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 8000f36:	2300      	movs	r3, #0
 8000f38:	82bb      	strh	r3, [r7, #20]
	USART_InitStructure.USART_Mode                = USART_Mode_Rx | USART_Mode_Tx;
 8000f3a:	230c      	movs	r3, #12
 8000f3c:	827b      	strh	r3, [r7, #18]
	USART_Init(USART1, &USART_InitStructure);
 8000f3e:	f107 0308 	add.w	r3, r7, #8
 8000f42:	4619      	mov	r1, r3
 8000f44:	4806      	ldr	r0, [pc, #24]	; (8000f60 <UART_Init+0xac>)
 8000f46:	f00c fb59 	bl	800d5fc <USART_Init>
			
	USART_Cmd(USART1, ENABLE);
 8000f4a:	2101      	movs	r1, #1
 8000f4c:	4804      	ldr	r0, [pc, #16]	; (8000f60 <UART_Init+0xac>)
 8000f4e:	f00c fc6d 	bl	800d82c <USART_Cmd>
}		
 8000f52:	bf00      	nop
 8000f54:	3718      	adds	r7, #24
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	40020000 	.word	0x40020000
 8000f60:	40011000 	.word	0x40011000

08000f64 <LED_Init>:
 * @param[out] None
 * @retval     None
 *******************************************************************************
 */
void LED_Init(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	af00      	add	r7, sp, #0
    STM_EVAL_LEDInit(LED3);
 8000f68:	2000      	movs	r0, #0
 8000f6a:	f00d f80f 	bl	800df8c <STM_EVAL_LEDInit>
    STM_EVAL_LEDInit(LED4);
 8000f6e:	2001      	movs	r0, #1
 8000f70:	f00d f80c 	bl	800df8c <STM_EVAL_LEDInit>
}
 8000f74:	bf00      	nop
 8000f76:	bd80      	pop	{r7, pc}

08000f78 <Delay_Init>:

void Delay_Init(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b084      	sub	sp, #16
 8000f7c:	af00      	add	r7, sp, #0
    RCC_ClocksTypeDef RCC_Clocks;
    RCC_GetClocksFreq(&RCC_Clocks);    /* get system clock */
 8000f7e:	463b      	mov	r3, r7
 8000f80:	4618      	mov	r0, r3
 8000f82:	f007 fb1d 	bl	80085c0 <RCC_GetClocksFreq>
    /* while loop takes 4 cycles */
    /* Enable SysTick for Delay function */
    if (SysTick_Config(SystemCoreClock / 1000)) //1ms
 8000f86:	4b08      	ldr	r3, [pc, #32]	; (8000fa8 <Delay_Init+0x30>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	4a08      	ldr	r2, [pc, #32]	; (8000fac <Delay_Init+0x34>)
 8000f8c:	fba2 2303 	umull	r2, r3, r2, r3
 8000f90:	099b      	lsrs	r3, r3, #6
 8000f92:	4618      	mov	r0, r3
 8000f94:	f7ff ff6c 	bl	8000e70 <SysTick_Config>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d000      	beq.n	8000fa0 <Delay_Init+0x28>
    { 
        /* Capture error */ 
        while (1);
 8000f9e:	e7fe      	b.n	8000f9e <Delay_Init+0x26>
    }
}
 8000fa0:	bf00      	nop
 8000fa2:	3710      	adds	r7, #16
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	20000070 	.word	0x20000070
 8000fac:	10624dd3 	.word	0x10624dd3

08000fb0 <LCD_Config>:
 * @param[out] None
 * @retval     None
 *******************************************************************************
 */
void LCD_Config(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b0a2      	sub	sp, #136	; 0x88
 8000fb4:	af00      	add	r7, sp, #0
    LTDC_InitTypeDef               LTDC_InitStruct;
    LTDC_Layer_InitTypeDef         LTDC_Layer_InitStruct;
    GPIO_InitTypeDef GPIO_InitStructure;
    
    RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, ENABLE);
 8000fb6:	2101      	movs	r1, #1
 8000fb8:	2008      	movs	r0, #8
 8000fba:	f007 fcb1 	bl	8008920 <RCC_AHB1PeriphClockCmd>
    
    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_13;
 8000fbe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fc2:	607b      	str	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8000fc4:	2302      	movs	r3, #2
 8000fc6:	727b      	strb	r3, [r7, #9]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8000fc8:	2301      	movs	r3, #1
 8000fca:	723b      	strb	r3, [r7, #8]
    GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	72bb      	strb	r3, [r7, #10]
    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	72fb      	strb	r3, [r7, #11]
    GPIO_Init(GPIOD, &GPIO_InitStructure);
 8000fd4:	1d3b      	adds	r3, r7, #4
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	4848      	ldr	r0, [pc, #288]	; (80010fc <LCD_Config+0x14c>)
 8000fda:	f005 fad1 	bl	8006580 <GPIO_Init>
    
    /* Configure the LCD Control pins ------------------------------------------*/
    LCD_CtrlLinesConfig();
 8000fde:	f011 fa1d 	bl	801241c <LCD_CtrlLinesConfig>
    LCD_ChipSelect(DISABLE);
 8000fe2:	2000      	movs	r0, #0
 8000fe4:	f00f fbd6 	bl	8010794 <LCD_ChipSelect>
    LCD_ChipSelect(ENABLE);
 8000fe8:	2001      	movs	r0, #1
 8000fea:	f00f fbd3 	bl	8010794 <LCD_ChipSelect>

    /* Configure the LCD_SPI interface -----------------------------------------*/
    LCD_SPIConfig(); 
 8000fee:	f011 fa53 	bl	8012498 <LCD_SPIConfig>
    
    /* Power on the LCD --------------------------------------------------------*/
    LCD_PowerOn();
 8000ff2:	f011 f8bd 	bl	8012170 <LCD_PowerOn>
        
    /* Enable the LTDC Clock */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_LTDC, ENABLE);
 8000ff6:	2101      	movs	r1, #1
 8000ff8:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8000ffc:	f007 fd10 	bl	8008a20 <RCC_APB2PeriphClockCmd>
    
    /* Enable the DMA2D Clock */
    RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA2D, ENABLE); 
 8001000:	2101      	movs	r1, #1
 8001002:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8001006:	f007 fc8b 	bl	8008920 <RCC_AHB1PeriphClockCmd>
    
    /* Configure the LCD Control pins */
    LCD_AF_GPIOConfig();  
 800100a:	f000 f87d 	bl	8001108 <LCD_AF_GPIOConfig>
    
    /* Configure the FMC Parallel interface : SDRAM is used as Frame Buffer for LCD */
    SDRAM_Init();
 800100e:	f011 fba3 	bl	8012758 <SDRAM_Init>
    /* Configure PLLSAI prescalers for LCD */
    /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
    /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAI_N = 192 Mhz */
    /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAI_R = 192/3 = 64 Mhz */
    /* LTDC clock frequency = PLLLCDCLK / RCC_PLLSAIDivR = 64/8 = 8 Mhz */
    RCC_PLLSAIConfig(192, 7, 3);
 8001012:	2203      	movs	r2, #3
 8001014:	2107      	movs	r1, #7
 8001016:	20c0      	movs	r0, #192	; 0xc0
 8001018:	f007 f9d6 	bl	80083c8 <RCC_PLLSAIConfig>
    RCC_LTDCCLKDivConfig(RCC_PLLSAIDivR_Div8);
 800101c:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001020:	f007 fc50 	bl	80088c4 <RCC_LTDCCLKDivConfig>
    
    /* Enable PLLSAI Clock */
    RCC_PLLSAICmd(ENABLE);
 8001024:	2001      	movs	r0, #1
 8001026:	f007 f9e9 	bl	80083fc <RCC_PLLSAICmd>
    /* Wait for PLLSAI activation */
    while(RCC_GetFlagStatus(RCC_FLAG_PLLSAIRDY) == RESET)
 800102a:	bf00      	nop
 800102c:	203d      	movs	r0, #61	; 0x3d
 800102e:	f007 fe7d 	bl	8008d2c <RCC_GetFlagStatus>
 8001032:	4603      	mov	r3, r0
 8001034:	2b00      	cmp	r3, #0
 8001036:	d0f9      	beq.n	800102c <LCD_Config+0x7c>
    }

/* LTDC Initialization -------------------------------------------------------*/

    /* Initialize the horizontal synchronization polarity as active low*/
    LTDC_InitStruct.LTDC_HSPolarity = LTDC_HSPolarity_AL;     
 8001038:	2300      	movs	r3, #0
 800103a:	64fb      	str	r3, [r7, #76]	; 0x4c
    /* Initialize the vertical synchronization polarity as active low */  
    LTDC_InitStruct.LTDC_VSPolarity = LTDC_VSPolarity_AL;     
 800103c:	2300      	movs	r3, #0
 800103e:	653b      	str	r3, [r7, #80]	; 0x50
    /* Initialize the data enable polarity as active low */ 
    LTDC_InitStruct.LTDC_DEPolarity = LTDC_DEPolarity_AL;     
 8001040:	2300      	movs	r3, #0
 8001042:	657b      	str	r3, [r7, #84]	; 0x54
    /* Initialize the pixel clock polarity as input pixel clock */ 
    LTDC_InitStruct.LTDC_PCPolarity = LTDC_PCPolarity_IPC;
 8001044:	2300      	movs	r3, #0
 8001046:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* Timing configuration */
        /* Configure horizontal synchronization width */     
    LTDC_InitStruct.LTDC_HorizontalSync = 9;
 8001048:	2309      	movs	r3, #9
 800104a:	65fb      	str	r3, [r7, #92]	; 0x5c
    /* Configure vertical synchronization height */
    LTDC_InitStruct.LTDC_VerticalSync = 1;
 800104c:	2301      	movs	r3, #1
 800104e:	663b      	str	r3, [r7, #96]	; 0x60
    /* Configure accumulated horizontal back porch */
    LTDC_InitStruct.LTDC_AccumulatedHBP = 29; 
 8001050:	231d      	movs	r3, #29
 8001052:	667b      	str	r3, [r7, #100]	; 0x64
    /* Configure accumulated vertical back porch */
    LTDC_InitStruct.LTDC_AccumulatedVBP = 3;  
 8001054:	2303      	movs	r3, #3
 8001056:	66bb      	str	r3, [r7, #104]	; 0x68
    /* Configure accumulated active width */  
    LTDC_InitStruct.LTDC_AccumulatedActiveW = 269;
 8001058:	f240 130d 	movw	r3, #269	; 0x10d
 800105c:	66fb      	str	r3, [r7, #108]	; 0x6c
    /* Configure accumulated active height */
    LTDC_InitStruct.LTDC_AccumulatedActiveH = 323;
 800105e:	f240 1343 	movw	r3, #323	; 0x143
 8001062:	673b      	str	r3, [r7, #112]	; 0x70
    /* Configure total width */
    LTDC_InitStruct.LTDC_TotalWidth = 279; 
 8001064:	f240 1317 	movw	r3, #279	; 0x117
 8001068:	677b      	str	r3, [r7, #116]	; 0x74
    /* Configure total height */
    LTDC_InitStruct.LTDC_TotalHeigh = 327;
 800106a:	f240 1347 	movw	r3, #327	; 0x147
 800106e:	67bb      	str	r3, [r7, #120]	; 0x78
    
    LTDC_Init(&LTDC_InitStruct);
 8001070:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001074:	4618      	mov	r0, r3
 8001076:	f006 f9bd 	bl	80073f4 <LTDC_Init>
    
    /* Configure R,G,B component values for LCD background color */                   
    LTDC_InitStruct.LTDC_BackgroundRedValue = 0;            
 800107a:	2300      	movs	r3, #0
 800107c:	67fb      	str	r3, [r7, #124]	; 0x7c
    LTDC_InitStruct.LTDC_BackgroundGreenValue = 0;          
 800107e:	2300      	movs	r3, #0
 8001080:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    LTDC_InitStruct.LTDC_BackgroundBlueValue = 0; 
 8001084:	2300      	movs	r3, #0
 8001086:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                
    LTDC_Init(&LTDC_InitStruct);
 800108a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800108e:	4618      	mov	r0, r3
 8001090:	f006 f9b0 	bl	80073f4 <LTDC_Init>
    /* In this case all the active display area is used to display a picture then :
        Horizontal start = horizontal synchronization + Horizontal back porch = 30 
        Horizontal stop = Horizontal start + window width -1 = 30 + 240 -1
        Vertical start   = vertical synchronization + vertical back porch     = 4
        Vertical stop   = Vertical start + window height -1  = 4 + 320 -1      */ 
    LTDC_Layer_InitStruct.LTDC_HorizontalStart = 30;
 8001094:	231e      	movs	r3, #30
 8001096:	60fb      	str	r3, [r7, #12]
    LTDC_Layer_InitStruct.LTDC_HorizontalStop = (240 + 30 - 1); 
 8001098:	f240 130d 	movw	r3, #269	; 0x10d
 800109c:	613b      	str	r3, [r7, #16]
    LTDC_Layer_InitStruct.LTDC_VerticalStart = 4;
 800109e:	2304      	movs	r3, #4
 80010a0:	617b      	str	r3, [r7, #20]
    LTDC_Layer_InitStruct.LTDC_VerticalStop = (320 + 4 - 1);
 80010a2:	f240 1343 	movw	r3, #323	; 0x143
 80010a6:	61bb      	str	r3, [r7, #24]
    
    /* Pixel Format configuration*/           
    LTDC_Layer_InitStruct.LTDC_PixelFormat = LTDC_Pixelformat_RGB565;
 80010a8:	2302      	movs	r3, #2
 80010aa:	61fb      	str	r3, [r7, #28]
    
    /* Alpha constant (255 totally opaque) */
    LTDC_Layer_InitStruct.LTDC_ConstantAlpha = 255; 
 80010ac:	23ff      	movs	r3, #255	; 0xff
 80010ae:	623b      	str	r3, [r7, #32]
    
    /* Configure blending factors */       
    LTDC_Layer_InitStruct.LTDC_BlendingFactor_1 = LTDC_BlendingFactor1_CA;    
 80010b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010b4:	637b      	str	r3, [r7, #52]	; 0x34
    LTDC_Layer_InitStruct.LTDC_BlendingFactor_2 = LTDC_BlendingFactor2_CA;  
 80010b6:	2305      	movs	r3, #5
 80010b8:	63bb      	str	r3, [r7, #56]	; 0x38
    
    /* Default Color configuration (configure A,R,G,B component values) */          
    LTDC_Layer_InitStruct.LTDC_DefaultColorBlue = 0;        
 80010ba:	2300      	movs	r3, #0
 80010bc:	627b      	str	r3, [r7, #36]	; 0x24
    LTDC_Layer_InitStruct.LTDC_DefaultColorGreen = 0;       
 80010be:	2300      	movs	r3, #0
 80010c0:	62bb      	str	r3, [r7, #40]	; 0x28
    LTDC_Layer_InitStruct.LTDC_DefaultColorRed = 0;         
 80010c2:	2300      	movs	r3, #0
 80010c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    LTDC_Layer_InitStruct.LTDC_DefaultColorAlpha = 0;   
 80010c6:	2300      	movs	r3, #0
 80010c8:	633b      	str	r3, [r7, #48]	; 0x30
    
    /* Input Address configuration */    
    LTDC_Layer_InitStruct.LTDC_CFBStartAdress = LCD_FRAME_BUFFER + BUFFER_OFFSET;
 80010ca:	4b0d      	ldr	r3, [pc, #52]	; (8001100 <LCD_Config+0x150>)
 80010cc:	63fb      	str	r3, [r7, #60]	; 0x3c
    /* the length of one line of pixels in bytes + 3 then :
        Line Lenth = Active high width x number of bytes per pixel + 3 
        Active high width         = 240 
        number of bytes per pixel = 2    (pixel_format : RGB565) 
    */
    LTDC_Layer_InitStruct.LTDC_CFBLineLength = ((240 * 2) + 3);
 80010ce:	f240 13e3 	movw	r3, #483	; 0x1e3
 80010d2:	643b      	str	r3, [r7, #64]	; 0x40
    
    /*  the pitch is the increment from the start of one line of pixels to the 
        start of the next line in bytes, then :
        Pitch = Active high width x number of bytes per pixel     
    */
    LTDC_Layer_InitStruct.LTDC_CFBPitch = (240 * 2);  
 80010d4:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80010d8:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* configure the number of lines */
    LTDC_Layer_InitStruct.LTDC_CFBLineNumber = 320;
 80010da:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80010de:	64bb      	str	r3, [r7, #72]	; 0x48
    
    LTDC_LayerInit(LTDC_Layer1, &LTDC_Layer_InitStruct);
 80010e0:	f107 030c 	add.w	r3, r7, #12
 80010e4:	4619      	mov	r1, r3
 80010e6:	4807      	ldr	r0, [pc, #28]	; (8001104 <LCD_Config+0x154>)
 80010e8:	f006 faee 	bl	80076c8 <LTDC_LayerInit>
    
    LTDC_DitherCmd(ENABLE);
 80010ec:	2001      	movs	r0, #1
 80010ee:	f006 fa6d 	bl	80075cc <LTDC_DitherCmd>
}
 80010f2:	bf00      	nop
 80010f4:	3788      	adds	r7, #136	; 0x88
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	40020c00 	.word	0x40020c00
 8001100:	d0050000 	.word	0xd0050000
 8001104:	40016884 	.word	0x40016884

08001108 <LCD_AF_GPIOConfig>:
 * @param[out] None
 * @retval     None
 *******************************************************************************
 */
void LCD_AF_GPIOConfig(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct;
    
    /* Enable GPIOI, GPIOJ, GPIOG, GPIOF, GPIOH AHB Clocks */
    RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA | RCC_AHB1Periph_GPIOB | \
 800110e:	2101      	movs	r1, #1
 8001110:	206f      	movs	r0, #111	; 0x6f
 8001112:	f007 fc05 	bl	8008920 <RCC_AHB1PeriphClockCmd>
            -----------------------------------------------------

    */

    /* GPIOA configuration */
    GPIO_PinAFConfig(GPIOA, GPIO_PinSource3, GPIO_AF_LTDC);
 8001116:	220e      	movs	r2, #14
 8001118:	2103      	movs	r1, #3
 800111a:	4850      	ldr	r0, [pc, #320]	; (800125c <LCD_AF_GPIOConfig+0x154>)
 800111c:	f005 fb9f 	bl	800685e <GPIO_PinAFConfig>
    GPIO_PinAFConfig(GPIOA, GPIO_PinSource4, GPIO_AF_LTDC);
 8001120:	220e      	movs	r2, #14
 8001122:	2104      	movs	r1, #4
 8001124:	484d      	ldr	r0, [pc, #308]	; (800125c <LCD_AF_GPIOConfig+0x154>)
 8001126:	f005 fb9a 	bl	800685e <GPIO_PinAFConfig>
    GPIO_PinAFConfig(GPIOA, GPIO_PinSource6, GPIO_AF_LTDC);
 800112a:	220e      	movs	r2, #14
 800112c:	2106      	movs	r1, #6
 800112e:	484b      	ldr	r0, [pc, #300]	; (800125c <LCD_AF_GPIOConfig+0x154>)
 8001130:	f005 fb95 	bl	800685e <GPIO_PinAFConfig>
    GPIO_PinAFConfig(GPIOA, GPIO_PinSource11, GPIO_AF_LTDC);
 8001134:	220e      	movs	r2, #14
 8001136:	210b      	movs	r1, #11
 8001138:	4848      	ldr	r0, [pc, #288]	; (800125c <LCD_AF_GPIOConfig+0x154>)
 800113a:	f005 fb90 	bl	800685e <GPIO_PinAFConfig>
    GPIO_PinAFConfig(GPIOA, GPIO_PinSource12, GPIO_AF_LTDC);
 800113e:	220e      	movs	r2, #14
 8001140:	210c      	movs	r1, #12
 8001142:	4846      	ldr	r0, [pc, #280]	; (800125c <LCD_AF_GPIOConfig+0x154>)
 8001144:	f005 fb8b 	bl	800685e <GPIO_PinAFConfig>

    GPIO_InitStruct.GPIO_Pin = GPIO_Pin_3 | GPIO_Pin_4 | GPIO_Pin_6 | \
 8001148:	f641 0358 	movw	r3, #6232	; 0x1858
 800114c:	603b      	str	r3, [r7, #0]
                                GPIO_Pin_11 | GPIO_Pin_12;
                                
    GPIO_InitStruct.GPIO_Speed = GPIO_Speed_50MHz;
 800114e:	2302      	movs	r3, #2
 8001150:	717b      	strb	r3, [r7, #5]
    GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AF;
 8001152:	2302      	movs	r3, #2
 8001154:	713b      	strb	r3, [r7, #4]
    GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
 8001156:	2300      	movs	r3, #0
 8001158:	71bb      	strb	r3, [r7, #6]
    GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_NOPULL;
 800115a:	2300      	movs	r3, #0
 800115c:	71fb      	strb	r3, [r7, #7]
    GPIO_Init(GPIOA, &GPIO_InitStruct);
 800115e:	463b      	mov	r3, r7
 8001160:	4619      	mov	r1, r3
 8001162:	483e      	ldr	r0, [pc, #248]	; (800125c <LCD_AF_GPIOConfig+0x154>)
 8001164:	f005 fa0c 	bl	8006580 <GPIO_Init>
    
    /* GPIOB configuration */  
    GPIO_PinAFConfig(GPIOB, GPIO_PinSource0, GPIO_AF_LTDC);
 8001168:	220e      	movs	r2, #14
 800116a:	2100      	movs	r1, #0
 800116c:	483c      	ldr	r0, [pc, #240]	; (8001260 <LCD_AF_GPIOConfig+0x158>)
 800116e:	f005 fb76 	bl	800685e <GPIO_PinAFConfig>
    GPIO_PinAFConfig(GPIOB, GPIO_PinSource1, GPIO_AF_LTDC);
 8001172:	220e      	movs	r2, #14
 8001174:	2101      	movs	r1, #1
 8001176:	483a      	ldr	r0, [pc, #232]	; (8001260 <LCD_AF_GPIOConfig+0x158>)
 8001178:	f005 fb71 	bl	800685e <GPIO_PinAFConfig>
    GPIO_PinAFConfig(GPIOB, GPIO_PinSource8, GPIO_AF_LTDC);
 800117c:	220e      	movs	r2, #14
 800117e:	2108      	movs	r1, #8
 8001180:	4837      	ldr	r0, [pc, #220]	; (8001260 <LCD_AF_GPIOConfig+0x158>)
 8001182:	f005 fb6c 	bl	800685e <GPIO_PinAFConfig>
    GPIO_PinAFConfig(GPIOB, GPIO_PinSource9, GPIO_AF_LTDC);
 8001186:	220e      	movs	r2, #14
 8001188:	2109      	movs	r1, #9
 800118a:	4835      	ldr	r0, [pc, #212]	; (8001260 <LCD_AF_GPIOConfig+0x158>)
 800118c:	f005 fb67 	bl	800685e <GPIO_PinAFConfig>
    GPIO_PinAFConfig(GPIOB, GPIO_PinSource10, GPIO_AF_LTDC);
 8001190:	220e      	movs	r2, #14
 8001192:	210a      	movs	r1, #10
 8001194:	4832      	ldr	r0, [pc, #200]	; (8001260 <LCD_AF_GPIOConfig+0x158>)
 8001196:	f005 fb62 	bl	800685e <GPIO_PinAFConfig>
    GPIO_PinAFConfig(GPIOB, GPIO_PinSource11, GPIO_AF_LTDC);
 800119a:	220e      	movs	r2, #14
 800119c:	210b      	movs	r1, #11
 800119e:	4830      	ldr	r0, [pc, #192]	; (8001260 <LCD_AF_GPIOConfig+0x158>)
 80011a0:	f005 fb5d 	bl	800685e <GPIO_PinAFConfig>

    GPIO_InitStruct.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_8 | \
 80011a4:	f640 7303 	movw	r3, #3843	; 0xf03
 80011a8:	603b      	str	r3, [r7, #0]
                                GPIO_Pin_9 | GPIO_Pin_10 | GPIO_Pin_11;
    
    GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011aa:	463b      	mov	r3, r7
 80011ac:	4619      	mov	r1, r3
 80011ae:	482c      	ldr	r0, [pc, #176]	; (8001260 <LCD_AF_GPIOConfig+0x158>)
 80011b0:	f005 f9e6 	bl	8006580 <GPIO_Init>

    /* GPIOC configuration */
    GPIO_PinAFConfig(GPIOC, GPIO_PinSource6, GPIO_AF_LTDC);
 80011b4:	220e      	movs	r2, #14
 80011b6:	2106      	movs	r1, #6
 80011b8:	482a      	ldr	r0, [pc, #168]	; (8001264 <LCD_AF_GPIOConfig+0x15c>)
 80011ba:	f005 fb50 	bl	800685e <GPIO_PinAFConfig>
    GPIO_PinAFConfig(GPIOC, GPIO_PinSource7, GPIO_AF_LTDC);
 80011be:	220e      	movs	r2, #14
 80011c0:	2107      	movs	r1, #7
 80011c2:	4828      	ldr	r0, [pc, #160]	; (8001264 <LCD_AF_GPIOConfig+0x15c>)
 80011c4:	f005 fb4b 	bl	800685e <GPIO_PinAFConfig>
    //  GPIO_PinAFConfig(GPIOC, GPIO_PinSource10, GPIO_AF_LTDC);
    
    GPIO_InitStruct.GPIO_Pin = GPIO_Pin_6 | GPIO_Pin_7;// | GPIO_Pin_10;
 80011c8:	23c0      	movs	r3, #192	; 0xc0
 80011ca:	603b      	str	r3, [r7, #0]
                                
    GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011cc:	463b      	mov	r3, r7
 80011ce:	4619      	mov	r1, r3
 80011d0:	4824      	ldr	r0, [pc, #144]	; (8001264 <LCD_AF_GPIOConfig+0x15c>)
 80011d2:	f005 f9d5 	bl	8006580 <GPIO_Init>

    /* GPIOD configuration */
    GPIO_PinAFConfig(GPIOD, GPIO_PinSource3, GPIO_AF_LTDC);
 80011d6:	220e      	movs	r2, #14
 80011d8:	2103      	movs	r1, #3
 80011da:	4823      	ldr	r0, [pc, #140]	; (8001268 <LCD_AF_GPIOConfig+0x160>)
 80011dc:	f005 fb3f 	bl	800685e <GPIO_PinAFConfig>
    GPIO_PinAFConfig(GPIOD, GPIO_PinSource6, GPIO_AF_LTDC);
 80011e0:	220e      	movs	r2, #14
 80011e2:	2106      	movs	r1, #6
 80011e4:	4820      	ldr	r0, [pc, #128]	; (8001268 <LCD_AF_GPIOConfig+0x160>)
 80011e6:	f005 fb3a 	bl	800685e <GPIO_PinAFConfig>
    
    GPIO_InitStruct.GPIO_Pin = GPIO_Pin_3 | GPIO_Pin_6;
 80011ea:	2348      	movs	r3, #72	; 0x48
 80011ec:	603b      	str	r3, [r7, #0]
                                
    GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011ee:	463b      	mov	r3, r7
 80011f0:	4619      	mov	r1, r3
 80011f2:	481d      	ldr	r0, [pc, #116]	; (8001268 <LCD_AF_GPIOConfig+0x160>)
 80011f4:	f005 f9c4 	bl	8006580 <GPIO_Init>
    
    /* GPIOF configuration */
    GPIO_PinAFConfig(GPIOF, GPIO_PinSource10, GPIO_AF_LTDC);
 80011f8:	220e      	movs	r2, #14
 80011fa:	210a      	movs	r1, #10
 80011fc:	481b      	ldr	r0, [pc, #108]	; (800126c <LCD_AF_GPIOConfig+0x164>)
 80011fe:	f005 fb2e 	bl	800685e <GPIO_PinAFConfig>
    
    GPIO_InitStruct.GPIO_Pin = GPIO_Pin_10;
 8001202:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001206:	603b      	str	r3, [r7, #0]
                                
    GPIO_Init(GPIOF, &GPIO_InitStruct);     
 8001208:	463b      	mov	r3, r7
 800120a:	4619      	mov	r1, r3
 800120c:	4817      	ldr	r0, [pc, #92]	; (800126c <LCD_AF_GPIOConfig+0x164>)
 800120e:	f005 f9b7 	bl	8006580 <GPIO_Init>

    /* GPIOG configuration */  
    GPIO_PinAFConfig(GPIOG, GPIO_PinSource6, GPIO_AF_LTDC);
 8001212:	220e      	movs	r2, #14
 8001214:	2106      	movs	r1, #6
 8001216:	4816      	ldr	r0, [pc, #88]	; (8001270 <LCD_AF_GPIOConfig+0x168>)
 8001218:	f005 fb21 	bl	800685e <GPIO_PinAFConfig>
    GPIO_PinAFConfig(GPIOG, GPIO_PinSource7, GPIO_AF_LTDC);
 800121c:	220e      	movs	r2, #14
 800121e:	2107      	movs	r1, #7
 8001220:	4813      	ldr	r0, [pc, #76]	; (8001270 <LCD_AF_GPIOConfig+0x168>)
 8001222:	f005 fb1c 	bl	800685e <GPIO_PinAFConfig>
    GPIO_PinAFConfig(GPIOG, GPIO_PinSource10, GPIO_AF_LTDC);
 8001226:	220e      	movs	r2, #14
 8001228:	210a      	movs	r1, #10
 800122a:	4811      	ldr	r0, [pc, #68]	; (8001270 <LCD_AF_GPIOConfig+0x168>)
 800122c:	f005 fb17 	bl	800685e <GPIO_PinAFConfig>
    GPIO_PinAFConfig(GPIOG, GPIO_PinSource11, GPIO_AF_LTDC);
 8001230:	220e      	movs	r2, #14
 8001232:	210b      	movs	r1, #11
 8001234:	480e      	ldr	r0, [pc, #56]	; (8001270 <LCD_AF_GPIOConfig+0x168>)
 8001236:	f005 fb12 	bl	800685e <GPIO_PinAFConfig>
    GPIO_PinAFConfig(GPIOG, GPIO_PinSource12, GPIO_AF_LTDC);
 800123a:	220e      	movs	r2, #14
 800123c:	210c      	movs	r1, #12
 800123e:	480c      	ldr	r0, [pc, #48]	; (8001270 <LCD_AF_GPIOConfig+0x168>)
 8001240:	f005 fb0d 	bl	800685e <GPIO_PinAFConfig>

    GPIO_InitStruct.GPIO_Pin = GPIO_Pin_6 | GPIO_Pin_7 | GPIO_Pin_10 | \
 8001244:	f44f 53e6 	mov.w	r3, #7360	; 0x1cc0
 8001248:	603b      	str	r3, [r7, #0]
                                GPIO_Pin_11 | GPIO_Pin_12;
    
    GPIO_Init(GPIOG, &GPIO_InitStruct);
 800124a:	463b      	mov	r3, r7
 800124c:	4619      	mov	r1, r3
 800124e:	4808      	ldr	r0, [pc, #32]	; (8001270 <LCD_AF_GPIOConfig+0x168>)
 8001250:	f005 f996 	bl	8006580 <GPIO_Init>
}
 8001254:	bf00      	nop
 8001256:	3708      	adds	r7, #8
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}
 800125c:	40020000 	.word	0x40020000
 8001260:	40020400 	.word	0x40020400
 8001264:	40020800 	.word	0x40020800
 8001268:	40020c00 	.word	0x40020c00
 800126c:	40021400 	.word	0x40021400
 8001270:	40021800 	.word	0x40021800

08001274 <stm_print_char>:
 * @param[out] None
 * @retval     None
 *******************************************************************************
 */
void stm_print_char(const char ch)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b082      	sub	sp, #8
 8001278:	af00      	add	r7, sp, #0
 800127a:	4603      	mov	r3, r0
 800127c:	71fb      	strb	r3, [r7, #7]
    USART1->DR = (uint8_t) ch;
 800127e:	4b08      	ldr	r3, [pc, #32]	; (80012a0 <stm_print_char+0x2c>)
 8001280:	79fa      	ldrb	r2, [r7, #7]
 8001282:	b292      	uxth	r2, r2
 8001284:	809a      	strh	r2, [r3, #4]

    while(USART_GetFlagStatus(USART1, USART_FLAG_TXE) == RESET);
 8001286:	bf00      	nop
 8001288:	2180      	movs	r1, #128	; 0x80
 800128a:	4805      	ldr	r0, [pc, #20]	; (80012a0 <stm_print_char+0x2c>)
 800128c:	f00c fd3c 	bl	800dd08 <USART_GetFlagStatus>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d0f8      	beq.n	8001288 <stm_print_char+0x14>
}
 8001296:	bf00      	nop
 8001298:	3708      	adds	r7, #8
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	40011000 	.word	0x40011000

080012a4 <stm_print_string>:
 * @param[out] None
 * @retval     None
 *******************************************************************************
 */
void stm_print_string(const char *str)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b082      	sub	sp, #8
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
    while (*str) {
 80012ac:	e01c      	b.n	80012e8 <stm_print_string+0x44>
        if (*str == '\n') {
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	781b      	ldrb	r3, [r3, #0]
 80012b2:	2b0a      	cmp	r3, #10
 80012b4:	d106      	bne.n	80012c4 <stm_print_string+0x20>
            stm_print_char('\n');
 80012b6:	200a      	movs	r0, #10
 80012b8:	f7ff ffdc 	bl	8001274 <stm_print_char>
            str++;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	3301      	adds	r3, #1
 80012c0:	607b      	str	r3, [r7, #4]
 80012c2:	e011      	b.n	80012e8 <stm_print_string+0x44>
        }
        else if (*str == '\r') {
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	781b      	ldrb	r3, [r3, #0]
 80012c8:	2b0d      	cmp	r3, #13
 80012ca:	d106      	bne.n	80012da <stm_print_string+0x36>
            stm_print_char('\r');
 80012cc:	200d      	movs	r0, #13
 80012ce:	f7ff ffd1 	bl	8001274 <stm_print_char>
            str++;
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	3301      	adds	r3, #1
 80012d6:	607b      	str	r3, [r7, #4]
 80012d8:	e006      	b.n	80012e8 <stm_print_string+0x44>
        }
        else {
            stm_print_char(*str++);
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	1c5a      	adds	r2, r3, #1
 80012de:	607a      	str	r2, [r7, #4]
 80012e0:	781b      	ldrb	r3, [r3, #0]
 80012e2:	4618      	mov	r0, r3
 80012e4:	f7ff ffc6 	bl	8001274 <stm_print_char>
    while (*str) {
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	781b      	ldrb	r3, [r3, #0]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d1de      	bne.n	80012ae <stm_print_string+0xa>
        }
    }
}
 80012f0:	bf00      	nop
 80012f2:	3708      	adds	r7, #8
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}

080012f8 <print_result>:
 * @param[in]  *str     Other message.
 * @param[out] None
 * @retval     None
 *******************************************************************************
 */
void print_result(StatusType r, char *str) {
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b082      	sub	sp, #8
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	4603      	mov	r3, r0
 8001300:	6039      	str	r1, [r7, #0]
 8001302:	71fb      	strb	r3, [r7, #7]
    cogui_printf("[%10s] %-40s => ", "User", str);
 8001304:	683a      	ldr	r2, [r7, #0]
 8001306:	490f      	ldr	r1, [pc, #60]	; (8001344 <print_result+0x4c>)
 8001308:	480f      	ldr	r0, [pc, #60]	; (8001348 <print_result+0x50>)
 800130a:	f01b fdaf 	bl	801ce6c <cogui_printf>
	switch (r) {
 800130e:	79fb      	ldrb	r3, [r7, #7]
 8001310:	2b17      	cmp	r3, #23
 8001312:	d007      	beq.n	8001324 <print_result+0x2c>
 8001314:	2b18      	cmp	r3, #24
 8001316:	d009      	beq.n	800132c <print_result+0x34>
 8001318:	2b16      	cmp	r3, #22
 800131a:	d10b      	bne.n	8001334 <print_result+0x3c>
		case GUI_E_ERROR:
			cogui_printf(RED_BOLD"GUI_E_ERROR\r\n"ARESET);
 800131c:	480b      	ldr	r0, [pc, #44]	; (800134c <print_result+0x54>)
 800131e:	f01b fda5 	bl	801ce6c <cogui_printf>
			break;
 8001322:	e00b      	b.n	800133c <print_result+0x44>
		
		case GUI_E_OK:
			cogui_printf(GRN_BOLD"GUI_E_OK\r\n"ARESET);
 8001324:	480a      	ldr	r0, [pc, #40]	; (8001350 <print_result+0x58>)
 8001326:	f01b fda1 	bl	801ce6c <cogui_printf>
			break;
 800132a:	e007      	b.n	800133c <print_result+0x44>
        
        case GUI_E_APP_NULL:
			cogui_printf(RED_BOLD"GUI_E_APP_NULL\r\n"ARESET);
 800132c:	4809      	ldr	r0, [pc, #36]	; (8001354 <print_result+0x5c>)
 800132e:	f01b fd9d 	bl	801ce6c <cogui_printf>
			break;
 8001332:	e003      	b.n	800133c <print_result+0x44>

        default:
            cogui_printf(MAN_BOLD"None\r\n"ARESET);
 8001334:	4808      	ldr	r0, [pc, #32]	; (8001358 <print_result+0x60>)
 8001336:	f01b fd99 	bl	801ce6c <cogui_printf>
            break;
 800133a:	bf00      	nop
	}	
}
 800133c:	bf00      	nop
 800133e:	3708      	adds	r7, #8
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}
 8001344:	0801fe58 	.word	0x0801fe58
 8001348:	0801fe60 	.word	0x0801fe60
 800134c:	0801fe74 	.word	0x0801fe74
 8001350:	0801fe90 	.word	0x0801fe90
 8001354:	0801fea8 	.word	0x0801fea8
 8001358:	0801fec8 	.word	0x0801fec8

0800135c <print_task_list>:
 * @param[out] None
 * @retval     None
 *******************************************************************************
 */
void print_task_list(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b082      	sub	sp, #8
 8001360:	af00      	add	r7, sp, #0
	extern OSTCB TCBTbl[CFG_MAX_USER_TASKS+SYS_TASK_NUM];
	P_OSTCB 	 ptcb;
	int i;
    
	ptcb = &TCBTbl[0];
 8001362:	4b1f      	ldr	r3, [pc, #124]	; (80013e0 <print_task_list+0x84>)
 8001364:	607b      	str	r3, [r7, #4]
	for ( i = 0; i < (CFG_MAX_USER_TASKS+SYS_TASK_NUM-1); i++ ) {
 8001366:	2300      	movs	r3, #0
 8001368:	603b      	str	r3, [r7, #0]
 800136a:	e032      	b.n	80013d2 <print_task_list+0x76>
		cogui_printf("Task %2d: state =>", ptcb->taskID);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	799b      	ldrb	r3, [r3, #6]
 8001370:	4619      	mov	r1, r3
 8001372:	481c      	ldr	r0, [pc, #112]	; (80013e4 <print_task_list+0x88>)
 8001374:	f01b fd7a 	bl	801ce6c <cogui_printf>
		switch (ptcb->state) {
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	795b      	ldrb	r3, [r3, #5]
 800137c:	2b03      	cmp	r3, #3
 800137e:	d81b      	bhi.n	80013b8 <print_task_list+0x5c>
 8001380:	a201      	add	r2, pc, #4	; (adr r2, 8001388 <print_task_list+0x2c>)
 8001382:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001386:	bf00      	nop
 8001388:	08001399 	.word	0x08001399
 800138c:	080013a1 	.word	0x080013a1
 8001390:	080013a9 	.word	0x080013a9
 8001394:	080013b1 	.word	0x080013b1
			case TASK_READY:
				cogui_printf(GRN_BOLD" TASK_READY  "ARESET);
 8001398:	4813      	ldr	r0, [pc, #76]	; (80013e8 <print_task_list+0x8c>)
 800139a:	f01b fd67 	bl	801ce6c <cogui_printf>
				break;
 800139e:	e00b      	b.n	80013b8 <print_task_list+0x5c>
		
			case TASK_RUNNING:
				cogui_printf(BLU_BOLD" TASK_RUNNING"ARESET);
 80013a0:	4812      	ldr	r0, [pc, #72]	; (80013ec <print_task_list+0x90>)
 80013a2:	f01b fd63 	bl	801ce6c <cogui_printf>
				break;
 80013a6:	e007      	b.n	80013b8 <print_task_list+0x5c>
			
			case TASK_WAITING:
				cogui_printf(YEL_BOLD" TASK_WAITING"ARESET);
 80013a8:	4811      	ldr	r0, [pc, #68]	; (80013f0 <print_task_list+0x94>)
 80013aa:	f01b fd5f 	bl	801ce6c <cogui_printf>
				break;
 80013ae:	e003      	b.n	80013b8 <print_task_list+0x5c>
			
			case TASK_DORMANT:
				cogui_printf(RED_BOLD" TASK_DORMANT"ARESET);
 80013b0:	4810      	ldr	r0, [pc, #64]	; (80013f4 <print_task_list+0x98>)
 80013b2:	f01b fd5b 	bl	801ce6c <cogui_printf>
				break;
 80013b6:	bf00      	nop
		}
		
		cogui_printf(", priority => %d (0x%p)\r\n", ptcb->prio, ptcb);
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	791b      	ldrb	r3, [r3, #4]
 80013bc:	687a      	ldr	r2, [r7, #4]
 80013be:	4619      	mov	r1, r3
 80013c0:	480d      	ldr	r0, [pc, #52]	; (80013f8 <print_task_list+0x9c>)
 80013c2:	f01b fd53 	bl	801ce6c <cogui_printf>
		ptcb++;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	3330      	adds	r3, #48	; 0x30
 80013ca:	607b      	str	r3, [r7, #4]
	for ( i = 0; i < (CFG_MAX_USER_TASKS+SYS_TASK_NUM-1); i++ ) {
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	3301      	adds	r3, #1
 80013d0:	603b      	str	r3, [r7, #0]
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	2b04      	cmp	r3, #4
 80013d6:	ddc9      	ble.n	800136c <print_task_list+0x10>
	}
}
 80013d8:	bf00      	nop
 80013da:	3708      	adds	r7, #8
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}
 80013e0:	2000d598 	.word	0x2000d598
 80013e4:	0801fedc 	.word	0x0801fedc
 80013e8:	0801fef0 	.word	0x0801fef0
 80013ec:	0801ff0c 	.word	0x0801ff0c
 80013f0:	0801ff28 	.word	0x0801ff28
 80013f4:	0801ff44 	.word	0x0801ff44
 80013f8:	0801ff60 	.word	0x0801ff60

080013fc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001400:	4b16      	ldr	r3, [pc, #88]	; (800145c <SystemInit+0x60>)
 8001402:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001406:	4a15      	ldr	r2, [pc, #84]	; (800145c <SystemInit+0x60>)
 8001408:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800140c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001410:	4b13      	ldr	r3, [pc, #76]	; (8001460 <SystemInit+0x64>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4a12      	ldr	r2, [pc, #72]	; (8001460 <SystemInit+0x64>)
 8001416:	f043 0301 	orr.w	r3, r3, #1
 800141a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800141c:	4b10      	ldr	r3, [pc, #64]	; (8001460 <SystemInit+0x64>)
 800141e:	2200      	movs	r2, #0
 8001420:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001422:	4b0f      	ldr	r3, [pc, #60]	; (8001460 <SystemInit+0x64>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	4a0e      	ldr	r2, [pc, #56]	; (8001460 <SystemInit+0x64>)
 8001428:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800142c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001430:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001432:	4b0b      	ldr	r3, [pc, #44]	; (8001460 <SystemInit+0x64>)
 8001434:	4a0b      	ldr	r2, [pc, #44]	; (8001464 <SystemInit+0x68>)
 8001436:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001438:	4b09      	ldr	r3, [pc, #36]	; (8001460 <SystemInit+0x64>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	4a08      	ldr	r2, [pc, #32]	; (8001460 <SystemInit+0x64>)
 800143e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001442:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001444:	4b06      	ldr	r3, [pc, #24]	; (8001460 <SystemInit+0x64>)
 8001446:	2200      	movs	r2, #0
 8001448:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSDRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 800144a:	f000 f889 	bl	8001560 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800144e:	4b03      	ldr	r3, [pc, #12]	; (800145c <SystemInit+0x60>)
 8001450:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001454:	609a      	str	r2, [r3, #8]
#endif
}
 8001456:	bf00      	nop
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	e000ed00 	.word	0xe000ed00
 8001460:	40023800 	.word	0x40023800
 8001464:	24003010 	.word	0x24003010

08001468 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8001468:	b480      	push	{r7}
 800146a:	b087      	sub	sp, #28
 800146c:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 800146e:	2300      	movs	r3, #0
 8001470:	613b      	str	r3, [r7, #16]
 8001472:	2300      	movs	r3, #0
 8001474:	617b      	str	r3, [r7, #20]
 8001476:	2302      	movs	r3, #2
 8001478:	60fb      	str	r3, [r7, #12]
 800147a:	2300      	movs	r3, #0
 800147c:	60bb      	str	r3, [r7, #8]
 800147e:	2302      	movs	r3, #2
 8001480:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8001482:	4b32      	ldr	r3, [pc, #200]	; (800154c <SystemCoreClockUpdate+0xe4>)
 8001484:	689b      	ldr	r3, [r3, #8]
 8001486:	f003 030c 	and.w	r3, r3, #12
 800148a:	613b      	str	r3, [r7, #16]

  switch (tmp)
 800148c:	693b      	ldr	r3, [r7, #16]
 800148e:	2b04      	cmp	r3, #4
 8001490:	d007      	beq.n	80014a2 <SystemCoreClockUpdate+0x3a>
 8001492:	2b08      	cmp	r3, #8
 8001494:	d009      	beq.n	80014aa <SystemCoreClockUpdate+0x42>
 8001496:	2b00      	cmp	r3, #0
 8001498:	d13d      	bne.n	8001516 <SystemCoreClockUpdate+0xae>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 800149a:	4b2d      	ldr	r3, [pc, #180]	; (8001550 <SystemCoreClockUpdate+0xe8>)
 800149c:	4a2d      	ldr	r2, [pc, #180]	; (8001554 <SystemCoreClockUpdate+0xec>)
 800149e:	601a      	str	r2, [r3, #0]
      break;
 80014a0:	e03d      	b.n	800151e <SystemCoreClockUpdate+0xb6>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 80014a2:	4b2b      	ldr	r3, [pc, #172]	; (8001550 <SystemCoreClockUpdate+0xe8>)
 80014a4:	4a2c      	ldr	r2, [pc, #176]	; (8001558 <SystemCoreClockUpdate+0xf0>)
 80014a6:	601a      	str	r2, [r3, #0]
      break;
 80014a8:	e039      	b.n	800151e <SystemCoreClockUpdate+0xb6>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 80014aa:	4b28      	ldr	r3, [pc, #160]	; (800154c <SystemCoreClockUpdate+0xe4>)
 80014ac:	685b      	ldr	r3, [r3, #4]
 80014ae:	0d9b      	lsrs	r3, r3, #22
 80014b0:	f003 0301 	and.w	r3, r3, #1
 80014b4:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80014b6:	4b25      	ldr	r3, [pc, #148]	; (800154c <SystemCoreClockUpdate+0xe4>)
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80014be:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 80014c0:	68bb      	ldr	r3, [r7, #8]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d00c      	beq.n	80014e0 <SystemCoreClockUpdate+0x78>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80014c6:	4a24      	ldr	r2, [pc, #144]	; (8001558 <SystemCoreClockUpdate+0xf0>)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80014ce:	4a1f      	ldr	r2, [pc, #124]	; (800154c <SystemCoreClockUpdate+0xe4>)
 80014d0:	6852      	ldr	r2, [r2, #4]
 80014d2:	0992      	lsrs	r2, r2, #6
 80014d4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80014d8:	fb02 f303 	mul.w	r3, r2, r3
 80014dc:	617b      	str	r3, [r7, #20]
 80014de:	e00b      	b.n	80014f8 <SystemCoreClockUpdate+0x90>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 80014e0:	4a1c      	ldr	r2, [pc, #112]	; (8001554 <SystemCoreClockUpdate+0xec>)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80014e8:	4a18      	ldr	r2, [pc, #96]	; (800154c <SystemCoreClockUpdate+0xe4>)
 80014ea:	6852      	ldr	r2, [r2, #4]
 80014ec:	0992      	lsrs	r2, r2, #6
 80014ee:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80014f2:	fb02 f303 	mul.w	r3, r2, r3
 80014f6:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 80014f8:	4b14      	ldr	r3, [pc, #80]	; (800154c <SystemCoreClockUpdate+0xe4>)
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	0c1b      	lsrs	r3, r3, #16
 80014fe:	f003 0303 	and.w	r3, r3, #3
 8001502:	3301      	adds	r3, #1
 8001504:	005b      	lsls	r3, r3, #1
 8001506:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 8001508:	697a      	ldr	r2, [r7, #20]
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001510:	4a0f      	ldr	r2, [pc, #60]	; (8001550 <SystemCoreClockUpdate+0xe8>)
 8001512:	6013      	str	r3, [r2, #0]
      break;
 8001514:	e003      	b.n	800151e <SystemCoreClockUpdate+0xb6>
    default:
      SystemCoreClock = HSI_VALUE;
 8001516:	4b0e      	ldr	r3, [pc, #56]	; (8001550 <SystemCoreClockUpdate+0xe8>)
 8001518:	4a0e      	ldr	r2, [pc, #56]	; (8001554 <SystemCoreClockUpdate+0xec>)
 800151a:	601a      	str	r2, [r3, #0]
      break;
 800151c:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 800151e:	4b0b      	ldr	r3, [pc, #44]	; (800154c <SystemCoreClockUpdate+0xe4>)
 8001520:	689b      	ldr	r3, [r3, #8]
 8001522:	091b      	lsrs	r3, r3, #4
 8001524:	f003 030f 	and.w	r3, r3, #15
 8001528:	4a0c      	ldr	r2, [pc, #48]	; (800155c <SystemCoreClockUpdate+0xf4>)
 800152a:	5cd3      	ldrb	r3, [r2, r3]
 800152c:	b2db      	uxtb	r3, r3
 800152e:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8001530:	4b07      	ldr	r3, [pc, #28]	; (8001550 <SystemCoreClockUpdate+0xe8>)
 8001532:	681a      	ldr	r2, [r3, #0]
 8001534:	693b      	ldr	r3, [r7, #16]
 8001536:	fa22 f303 	lsr.w	r3, r2, r3
 800153a:	4a05      	ldr	r2, [pc, #20]	; (8001550 <SystemCoreClockUpdate+0xe8>)
 800153c:	6013      	str	r3, [r2, #0]
}
 800153e:	bf00      	nop
 8001540:	371c      	adds	r7, #28
 8001542:	46bd      	mov	sp, r7
 8001544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001548:	4770      	bx	lr
 800154a:	bf00      	nop
 800154c:	40023800 	.word	0x40023800
 8001550:	20000070 	.word	0x20000070
 8001554:	00f42400 	.word	0x00f42400
 8001558:	007a1200 	.word	0x007a1200
 800155c:	20000074 	.word	0x20000074

08001560 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8001560:	b480      	push	{r7}
 8001562:	b083      	sub	sp, #12
 8001564:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8001566:	2300      	movs	r3, #0
 8001568:	607b      	str	r3, [r7, #4]
 800156a:	2300      	movs	r3, #0
 800156c:	603b      	str	r3, [r7, #0]
                   (RCC_PLLCFGR_PLLSRC_HSI) | (PLL_Q << 24);

#else /* PLL_SOURCE_HSE_BYPASS or PLL_SOURCE_HSE */

  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 800156e:	4b43      	ldr	r3, [pc, #268]	; (800167c <SetSysClock+0x11c>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	4a42      	ldr	r2, [pc, #264]	; (800167c <SetSysClock+0x11c>)
 8001574:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001578:	6013      	str	r3, [r2, #0]
  RCC->CR |= ((uint32_t)RCC_CR_HSEBYP);
#endif   /* PLL_SOURCE_HSE_BYPASS */
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 800157a:	4b40      	ldr	r3, [pc, #256]	; (800167c <SetSysClock+0x11c>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001582:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	3301      	adds	r3, #1
 8001588:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	2b00      	cmp	r3, #0
 800158e:	d103      	bne.n	8001598 <SetSysClock+0x38>
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8001596:	d1f0      	bne.n	800157a <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8001598:	4b38      	ldr	r3, [pc, #224]	; (800167c <SetSysClock+0x11c>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d002      	beq.n	80015aa <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 80015a4:	2301      	movs	r3, #1
 80015a6:	603b      	str	r3, [r7, #0]
 80015a8:	e001      	b.n	80015ae <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 80015aa:	2300      	movs	r3, #0
 80015ac:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	2b01      	cmp	r3, #1
 80015b2:	d102      	bne.n	80015ba <SetSysClock+0x5a>
  {
    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 80015b4:	4b31      	ldr	r3, [pc, #196]	; (800167c <SetSysClock+0x11c>)
 80015b6:	4a32      	ldr	r2, [pc, #200]	; (8001680 <SetSysClock+0x120>)
 80015b8:	605a      	str	r2, [r3, #4]
         configuration. User can add here some code to deal with this error */
  }
#endif /*PLL_SOURCE_HSI*/
  
      /* Select regulator voltage output Scale 1 mode, System frequency up to 180 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 80015ba:	4b30      	ldr	r3, [pc, #192]	; (800167c <SetSysClock+0x11c>)
 80015bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015be:	4a2f      	ldr	r2, [pc, #188]	; (800167c <SetSysClock+0x11c>)
 80015c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015c4:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 80015c6:	4b2f      	ldr	r3, [pc, #188]	; (8001684 <SetSysClock+0x124>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	4a2e      	ldr	r2, [pc, #184]	; (8001684 <SetSysClock+0x124>)
 80015cc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80015d0:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 80015d2:	4b2a      	ldr	r3, [pc, #168]	; (800167c <SetSysClock+0x11c>)
 80015d4:	4a29      	ldr	r2, [pc, #164]	; (800167c <SetSysClock+0x11c>)
 80015d6:	689b      	ldr	r3, [r3, #8]
 80015d8:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 80015da:	4b28      	ldr	r3, [pc, #160]	; (800167c <SetSysClock+0x11c>)
 80015dc:	689b      	ldr	r3, [r3, #8]
 80015de:	4a27      	ldr	r2, [pc, #156]	; (800167c <SetSysClock+0x11c>)
 80015e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80015e4:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 80015e6:	4b25      	ldr	r3, [pc, #148]	; (800167c <SetSysClock+0x11c>)
 80015e8:	689b      	ldr	r3, [r3, #8]
 80015ea:	4a24      	ldr	r2, [pc, #144]	; (800167c <SetSysClock+0x11c>)
 80015ec:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 80015f0:	6093      	str	r3, [r2, #8]

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 80015f2:	4b22      	ldr	r3, [pc, #136]	; (800167c <SetSysClock+0x11c>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4a21      	ldr	r2, [pc, #132]	; (800167c <SetSysClock+0x11c>)
 80015f8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80015fc:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 80015fe:	bf00      	nop
 8001600:	4b1e      	ldr	r3, [pc, #120]	; (800167c <SetSysClock+0x11c>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001608:	2b00      	cmp	r3, #0
 800160a:	d0f9      	beq.n	8001600 <SetSysClock+0xa0>
    {
    }

    /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
    PWR->CR |= PWR_CR_ODEN;
 800160c:	4b1d      	ldr	r3, [pc, #116]	; (8001684 <SetSysClock+0x124>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4a1c      	ldr	r2, [pc, #112]	; (8001684 <SetSysClock+0x124>)
 8001612:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001616:	6013      	str	r3, [r2, #0]
    while((PWR->CSR & PWR_CSR_ODRDY) == 0)
 8001618:	bf00      	nop
 800161a:	4b1a      	ldr	r3, [pc, #104]	; (8001684 <SetSysClock+0x124>)
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001622:	2b00      	cmp	r3, #0
 8001624:	d0f9      	beq.n	800161a <SetSysClock+0xba>
    {
    }
    PWR->CR |= PWR_CR_ODSWEN;
 8001626:	4b17      	ldr	r3, [pc, #92]	; (8001684 <SetSysClock+0x124>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4a16      	ldr	r2, [pc, #88]	; (8001684 <SetSysClock+0x124>)
 800162c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001630:	6013      	str	r3, [r2, #0]
    while((PWR->CSR & PWR_CSR_ODSWRDY) == 0)
 8001632:	bf00      	nop
 8001634:	4b13      	ldr	r3, [pc, #76]	; (8001684 <SetSysClock+0x124>)
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800163c:	2b00      	cmp	r3, #0
 800163e:	d0f9      	beq.n	8001634 <SetSysClock+0xd4>
    {
    } 
     
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8001640:	4b11      	ldr	r3, [pc, #68]	; (8001688 <SetSysClock+0x128>)
 8001642:	f240 7205 	movw	r2, #1797	; 0x705
 8001646:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8001648:	4b0c      	ldr	r3, [pc, #48]	; (800167c <SetSysClock+0x11c>)
 800164a:	689b      	ldr	r3, [r3, #8]
 800164c:	4a0b      	ldr	r2, [pc, #44]	; (800167c <SetSysClock+0x11c>)
 800164e:	f023 0303 	bic.w	r3, r3, #3
 8001652:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8001654:	4b09      	ldr	r3, [pc, #36]	; (800167c <SetSysClock+0x11c>)
 8001656:	689b      	ldr	r3, [r3, #8]
 8001658:	4a08      	ldr	r2, [pc, #32]	; (800167c <SetSysClock+0x11c>)
 800165a:	f043 0302 	orr.w	r3, r3, #2
 800165e:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL)
 8001660:	bf00      	nop
 8001662:	4b06      	ldr	r3, [pc, #24]	; (800167c <SetSysClock+0x11c>)
 8001664:	689b      	ldr	r3, [r3, #8]
 8001666:	f003 030c 	and.w	r3, r3, #12
 800166a:	2b08      	cmp	r3, #8
 800166c:	d1f9      	bne.n	8001662 <SetSysClock+0x102>
    {
    }
}
 800166e:	bf00      	nop
 8001670:	370c      	adds	r7, #12
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr
 800167a:	bf00      	nop
 800167c:	40023800 	.word	0x40023800
 8001680:	07405a08 	.word	0x07405a08
 8001684:	40007000 	.word	0x40007000
 8001688:	40023c00 	.word	0x40023c00

0800168c <NVIC_PriorityGroupConfig>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
 800168c:	b480      	push	{r7}
 800168e:	b083      	sub	sp, #12
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 8001694:	4a06      	ldr	r2, [pc, #24]	; (80016b0 <NVIC_PriorityGroupConfig+0x24>)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800169c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016a0:	60d3      	str	r3, [r2, #12]
}
 80016a2:	bf00      	nop
 80016a4:	370c      	adds	r7, #12
 80016a6:	46bd      	mov	sp, r7
 80016a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ac:	4770      	bx	lr
 80016ae:	bf00      	nop
 80016b0:	e000ed00 	.word	0xe000ed00

080016b4 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b085      	sub	sp, #20
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 80016bc:	2300      	movs	r3, #0
 80016be:	73fb      	strb	r3, [r7, #15]
 80016c0:	2300      	movs	r3, #0
 80016c2:	73bb      	strb	r3, [r7, #14]
 80016c4:	230f      	movs	r3, #15
 80016c6:	737b      	strb	r3, [r7, #13]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	78db      	ldrb	r3, [r3, #3]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d039      	beq.n	8001744 <NVIC_Init+0x90>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 80016d0:	4b27      	ldr	r3, [pc, #156]	; (8001770 <NVIC_Init+0xbc>)
 80016d2:	68db      	ldr	r3, [r3, #12]
 80016d4:	43db      	mvns	r3, r3
 80016d6:	0a1b      	lsrs	r3, r3, #8
 80016d8:	b2db      	uxtb	r3, r3
 80016da:	f003 0307 	and.w	r3, r3, #7
 80016de:	73fb      	strb	r3, [r7, #15]
    tmppre = (0x4 - tmppriority);
 80016e0:	7bfb      	ldrb	r3, [r7, #15]
 80016e2:	f1c3 0304 	rsb	r3, r3, #4
 80016e6:	73bb      	strb	r3, [r7, #14]
    tmpsub = tmpsub >> tmppriority;
 80016e8:	7b7a      	ldrb	r2, [r7, #13]
 80016ea:	7bfb      	ldrb	r3, [r7, #15]
 80016ec:	fa42 f303 	asr.w	r3, r2, r3
 80016f0:	737b      	strb	r3, [r7, #13]

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	785b      	ldrb	r3, [r3, #1]
 80016f6:	461a      	mov	r2, r3
 80016f8:	7bbb      	ldrb	r3, [r7, #14]
 80016fa:	fa02 f303 	lsl.w	r3, r2, r3
 80016fe:	73fb      	strb	r3, [r7, #15]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	789a      	ldrb	r2, [r3, #2]
 8001704:	7b7b      	ldrb	r3, [r7, #13]
 8001706:	4013      	ands	r3, r2
 8001708:	b2da      	uxtb	r2, r3
 800170a:	7bfb      	ldrb	r3, [r7, #15]
 800170c:	4313      	orrs	r3, r2
 800170e:	73fb      	strb	r3, [r7, #15]
        
    tmppriority = tmppriority << 0x04;
 8001710:	7bfb      	ldrb	r3, [r7, #15]
 8001712:	011b      	lsls	r3, r3, #4
 8001714:	73fb      	strb	r3, [r7, #15]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8001716:	4a17      	ldr	r2, [pc, #92]	; (8001774 <NVIC_Init+0xc0>)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	781b      	ldrb	r3, [r3, #0]
 800171c:	4413      	add	r3, r2
 800171e:	7bfa      	ldrb	r2, [r7, #15]
 8001720:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	781b      	ldrb	r3, [r3, #0]
 8001728:	f003 031f 	and.w	r3, r3, #31
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800172c:	4911      	ldr	r1, [pc, #68]	; (8001774 <NVIC_Init+0xc0>)
 800172e:	687a      	ldr	r2, [r7, #4]
 8001730:	7812      	ldrb	r2, [r2, #0]
 8001732:	0952      	lsrs	r2, r2, #5
 8001734:	b2d2      	uxtb	r2, r2
 8001736:	4610      	mov	r0, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8001738:	2201      	movs	r2, #1
 800173a:	fa02 f303 	lsl.w	r3, r2, r3
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800173e:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8001742:	e00f      	b.n	8001764 <NVIC_Init+0xb0>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	781b      	ldrb	r3, [r3, #0]
 8001748:	f003 031f 	and.w	r3, r3, #31
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800174c:	4909      	ldr	r1, [pc, #36]	; (8001774 <NVIC_Init+0xc0>)
 800174e:	687a      	ldr	r2, [r7, #4]
 8001750:	7812      	ldrb	r2, [r2, #0]
 8001752:	0952      	lsrs	r2, r2, #5
 8001754:	b2d2      	uxtb	r2, r2
 8001756:	4610      	mov	r0, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8001758:	2201      	movs	r2, #1
 800175a:	409a      	lsls	r2, r3
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800175c:	f100 0320 	add.w	r3, r0, #32
 8001760:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001764:	bf00      	nop
 8001766:	3714      	adds	r7, #20
 8001768:	46bd      	mov	sp, r7
 800176a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176e:	4770      	bx	lr
 8001770:	e000ed00 	.word	0xe000ed00
 8001774:	e000e100 	.word	0xe000e100

08001778 <NVIC_SetVectorTable>:
  *     @arg NVIC_VectTab_FLASH: Vector Table in internal FLASH.
  * @param  Offset: Vector Table base offset field. This value must be a multiple of 0x200.
  * @retval None
  */
void NVIC_SetVectorTable(uint32_t NVIC_VectTab, uint32_t Offset)
{ 
 8001778:	b480      	push	{r7}
 800177a:	b083      	sub	sp, #12
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
 8001780:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_VECTTAB(NVIC_VectTab));
  assert_param(IS_NVIC_OFFSET(Offset));  
   
  SCB->VTOR = NVIC_VectTab | (Offset & (uint32_t)0x1FFFFF80);
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 8001788:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800178c:	4904      	ldr	r1, [pc, #16]	; (80017a0 <NVIC_SetVectorTable+0x28>)
 800178e:	687a      	ldr	r2, [r7, #4]
 8001790:	4313      	orrs	r3, r2
 8001792:	608b      	str	r3, [r1, #8]
}
 8001794:	bf00      	nop
 8001796:	370c      	adds	r7, #12
 8001798:	46bd      	mov	sp, r7
 800179a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179e:	4770      	bx	lr
 80017a0:	e000ed00 	.word	0xe000ed00

080017a4 <NVIC_SystemLPConfig>:
  *     @arg NVIC_LP_SLEEPONEXIT: Low Power Sleep on Exit.
  * @param  NewState: new state of LP condition. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void NVIC_SystemLPConfig(uint8_t LowPowerMode, FunctionalState NewState)
{
 80017a4:	b480      	push	{r7}
 80017a6:	b083      	sub	sp, #12
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	4603      	mov	r3, r0
 80017ac:	460a      	mov	r2, r1
 80017ae:	71fb      	strb	r3, [r7, #7]
 80017b0:	4613      	mov	r3, r2
 80017b2:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if (NewState != DISABLE)
 80017b4:	79bb      	ldrb	r3, [r7, #6]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d006      	beq.n	80017c8 <NVIC_SystemLPConfig+0x24>
  {
    SCB->SCR |= LowPowerMode;
 80017ba:	4b0a      	ldr	r3, [pc, #40]	; (80017e4 <NVIC_SystemLPConfig+0x40>)
 80017bc:	691a      	ldr	r2, [r3, #16]
 80017be:	79fb      	ldrb	r3, [r7, #7]
 80017c0:	4908      	ldr	r1, [pc, #32]	; (80017e4 <NVIC_SystemLPConfig+0x40>)
 80017c2:	4313      	orrs	r3, r2
 80017c4:	610b      	str	r3, [r1, #16]
  }
  else
  {
    SCB->SCR &= (uint32_t)(~(uint32_t)LowPowerMode);
  }
}
 80017c6:	e006      	b.n	80017d6 <NVIC_SystemLPConfig+0x32>
    SCB->SCR &= (uint32_t)(~(uint32_t)LowPowerMode);
 80017c8:	4b06      	ldr	r3, [pc, #24]	; (80017e4 <NVIC_SystemLPConfig+0x40>)
 80017ca:	691a      	ldr	r2, [r3, #16]
 80017cc:	79fb      	ldrb	r3, [r7, #7]
 80017ce:	43db      	mvns	r3, r3
 80017d0:	4904      	ldr	r1, [pc, #16]	; (80017e4 <NVIC_SystemLPConfig+0x40>)
 80017d2:	4013      	ands	r3, r2
 80017d4:	610b      	str	r3, [r1, #16]
}
 80017d6:	bf00      	nop
 80017d8:	370c      	adds	r7, #12
 80017da:	46bd      	mov	sp, r7
 80017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e0:	4770      	bx	lr
 80017e2:	bf00      	nop
 80017e4:	e000ed00 	.word	0xe000ed00

080017e8 <SysTick_CLKSourceConfig>:
  *     @arg SysTick_CLKSource_HCLK_Div8: AHB clock divided by 8 selected as SysTick clock source.
  *     @arg SysTick_CLKSource_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource)
{
 80017e8:	b480      	push	{r7}
 80017ea:	b083      	sub	sp, #12
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	2b04      	cmp	r3, #4
 80017f4:	d106      	bne.n	8001804 <SysTick_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
 80017f6:	4b09      	ldr	r3, [pc, #36]	; (800181c <SysTick_CLKSourceConfig+0x34>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4a08      	ldr	r2, [pc, #32]	; (800181c <SysTick_CLKSourceConfig+0x34>)
 80017fc:	f043 0304 	orr.w	r3, r3, #4
 8001800:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
  }
}
 8001802:	e005      	b.n	8001810 <SysTick_CLKSourceConfig+0x28>
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
 8001804:	4b05      	ldr	r3, [pc, #20]	; (800181c <SysTick_CLKSourceConfig+0x34>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4a04      	ldr	r2, [pc, #16]	; (800181c <SysTick_CLKSourceConfig+0x34>)
 800180a:	f023 0304 	bic.w	r3, r3, #4
 800180e:	6013      	str	r3, [r2, #0]
}
 8001810:	bf00      	nop
 8001812:	370c      	adds	r7, #12
 8001814:	46bd      	mov	sp, r7
 8001816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181a:	4770      	bx	lr
 800181c:	e000e010 	.word	0xe000e010

08001820 <ADC_DeInit>:
  *         values.
  * @param  None
  * @retval None
  */
void ADC_DeInit(void)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	af00      	add	r7, sp, #0
  /* Enable all ADCs reset state */
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC, ENABLE);
 8001824:	2101      	movs	r1, #1
 8001826:	f44f 7080 	mov.w	r0, #256	; 0x100
 800182a:	f007 f999 	bl	8008b60 <RCC_APB2PeriphResetCmd>
  
  /* Release all ADCs from reset state */
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC, DISABLE);
 800182e:	2100      	movs	r1, #0
 8001830:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001834:	f007 f994 	bl	8008b60 <RCC_APB2PeriphResetCmd>
}
 8001838:	bf00      	nop
 800183a:	bd80      	pop	{r7, pc}

0800183c <ADC_Init>:
  * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure that contains
  *         the configuration information for the specified ADC peripheral.
  * @retval None
  */
void ADC_Init(ADC_TypeDef* ADCx, ADC_InitTypeDef* ADC_InitStruct)
{
 800183c:	b480      	push	{r7}
 800183e:	b085      	sub	sp, #20
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
 8001844:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0;
 8001846:	2300      	movs	r3, #0
 8001848:	60fb      	str	r3, [r7, #12]
  uint8_t tmpreg2 = 0;
 800184a:	2300      	movs	r3, #0
 800184c:	72fb      	strb	r3, [r7, #11]
  assert_param(IS_ADC_DATA_ALIGN(ADC_InitStruct->ADC_DataAlign)); 
  assert_param(IS_ADC_REGULAR_LENGTH(ADC_InitStruct->ADC_NbrOfConversion));
  
  /*---------------------------- ADCx CR1 Configuration -----------------*/
  /* Get the ADCx CR1 value */
  tmpreg1 = ADCx->CR1;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	60fb      	str	r3, [r7, #12]
  
  /* Clear RES and SCAN bits */
  tmpreg1 &= CR1_CLEAR_MASK;
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 800185a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800185e:	60fb      	str	r3, [r7, #12]
  
  /* Configure ADCx: scan conversion mode and resolution */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  /* Set RES bit according to ADC_Resolution value */ 
  tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | \
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	791b      	ldrb	r3, [r3, #4]
 8001864:	021a      	lsls	r2, r3, #8
                                   ADC_InitStruct->ADC_Resolution);
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	681b      	ldr	r3, [r3, #0]
  tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | \
 800186a:	4313      	orrs	r3, r2
 800186c:	68fa      	ldr	r2, [r7, #12]
 800186e:	4313      	orrs	r3, r2
 8001870:	60fb      	str	r3, [r7, #12]
  /* Write to ADCx CR1 */
  ADCx->CR1 = tmpreg1;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	68fa      	ldr	r2, [r7, #12]
 8001876:	605a      	str	r2, [r3, #4]
  /*---------------------------- ADCx CR2 Configuration -----------------*/
  /* Get the ADCx CR2 value */
  tmpreg1 = ADCx->CR2;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	689b      	ldr	r3, [r3, #8]
 800187c:	60fb      	str	r3, [r7, #12]
  
  /* Clear CONT, ALIGN, EXTEN and EXTSEL bits */
  tmpreg1 &= CR2_CLEAR_MASK;
 800187e:	68fa      	ldr	r2, [r7, #12]
 8001880:	4b18      	ldr	r3, [pc, #96]	; (80018e4 <ADC_Init+0xa8>)
 8001882:	4013      	ands	r3, r2
 8001884:	60fb      	str	r3, [r7, #12]
     continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	691a      	ldr	r2, [r3, #16]
                        ADC_InitStruct->ADC_ExternalTrigConv | 
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	68db      	ldr	r3, [r3, #12]
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 800188e:	431a      	orrs	r2, r3
                        ADC_InitStruct->ADC_ExternalTrigConvEdge | \
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	689b      	ldr	r3, [r3, #8]
                        ADC_InitStruct->ADC_ExternalTrigConv | 
 8001894:	431a      	orrs	r2, r3
                        ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	795b      	ldrb	r3, [r3, #5]
 800189a:	005b      	lsls	r3, r3, #1
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 800189c:	4313      	orrs	r3, r2
 800189e:	68fa      	ldr	r2, [r7, #12]
 80018a0:	4313      	orrs	r3, r2
 80018a2:	60fb      	str	r3, [r7, #12]
                        
  /* Write to ADCx CR2 */
  ADCx->CR2 = tmpreg1;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	68fa      	ldr	r2, [r7, #12]
 80018a8:	609a      	str	r2, [r3, #8]
  /*---------------------------- ADCx SQR1 Configuration -----------------*/
  /* Get the ADCx SQR1 value */
  tmpreg1 = ADCx->SQR1;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018ae:	60fb      	str	r3, [r7, #12]
  
  /* Clear L bits */
  tmpreg1 &= SQR1_L_RESET;
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80018b6:	60fb      	str	r3, [r7, #12]
  
  /* Configure ADCx: regular channel sequence length */
  /* Set L bits according to ADC_NbrOfConversion value */
  tmpreg2 |= (uint8_t)(ADC_InitStruct->ADC_NbrOfConversion - (uint8_t)1);
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	7d1b      	ldrb	r3, [r3, #20]
 80018bc:	3b01      	subs	r3, #1
 80018be:	b2da      	uxtb	r2, r3
 80018c0:	7afb      	ldrb	r3, [r7, #11]
 80018c2:	4313      	orrs	r3, r2
 80018c4:	72fb      	strb	r3, [r7, #11]
  tmpreg1 |= ((uint32_t)tmpreg2 << 20);
 80018c6:	7afb      	ldrb	r3, [r7, #11]
 80018c8:	051b      	lsls	r3, r3, #20
 80018ca:	68fa      	ldr	r2, [r7, #12]
 80018cc:	4313      	orrs	r3, r2
 80018ce:	60fb      	str	r3, [r7, #12]
  
  /* Write to ADCx SQR1 */
  ADCx->SQR1 = tmpreg1;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	68fa      	ldr	r2, [r7, #12]
 80018d4:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80018d6:	bf00      	nop
 80018d8:	3714      	adds	r7, #20
 80018da:	46bd      	mov	sp, r7
 80018dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e0:	4770      	bx	lr
 80018e2:	bf00      	nop
 80018e4:	c0fff7fd 	.word	0xc0fff7fd

080018e8 <ADC_StructInit>:
  * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure which will 
  *         be initialized.
  * @retval None
  */
void ADC_StructInit(ADC_InitTypeDef* ADC_InitStruct)
{
 80018e8:	b480      	push	{r7}
 80018ea:	b083      	sub	sp, #12
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  /* Initialize the ADC_Mode member */
  ADC_InitStruct->ADC_Resolution = ADC_Resolution_12b;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	2200      	movs	r2, #0
 80018f4:	601a      	str	r2, [r3, #0]

  /* initialize the ADC_ScanConvMode member */
  ADC_InitStruct->ADC_ScanConvMode = DISABLE;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	2200      	movs	r2, #0
 80018fa:	711a      	strb	r2, [r3, #4]

  /* Initialize the ADC_ContinuousConvMode member */
  ADC_InitStruct->ADC_ContinuousConvMode = DISABLE;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2200      	movs	r2, #0
 8001900:	715a      	strb	r2, [r3, #5]

  /* Initialize the ADC_ExternalTrigConvEdge member */
  ADC_InitStruct->ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_None;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	2200      	movs	r2, #0
 8001906:	609a      	str	r2, [r3, #8]

  /* Initialize the ADC_ExternalTrigConv member */
  ADC_InitStruct->ADC_ExternalTrigConv = ADC_ExternalTrigConv_T1_CC1;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	2200      	movs	r2, #0
 800190c:	60da      	str	r2, [r3, #12]

  /* Initialize the ADC_DataAlign member */
  ADC_InitStruct->ADC_DataAlign = ADC_DataAlign_Right;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	2200      	movs	r2, #0
 8001912:	611a      	str	r2, [r3, #16]

  /* Initialize the ADC_NbrOfConversion member */
  ADC_InitStruct->ADC_NbrOfConversion = 1;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	2201      	movs	r2, #1
 8001918:	751a      	strb	r2, [r3, #20]
}
 800191a:	bf00      	nop
 800191c:	370c      	adds	r7, #12
 800191e:	46bd      	mov	sp, r7
 8001920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001924:	4770      	bx	lr

08001926 <ADC_CommonInit>:
  * @param  ADC_CommonInitStruct: pointer to an ADC_CommonInitTypeDef structure 
  *         that contains the configuration information for  All ADCs peripherals.
  * @retval None
  */
void ADC_CommonInit(ADC_CommonInitTypeDef* ADC_CommonInitStruct)
{
 8001926:	b480      	push	{r7}
 8001928:	b085      	sub	sp, #20
 800192a:	af00      	add	r7, sp, #0
 800192c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0;
 800192e:	2300      	movs	r3, #0
 8001930:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_PRESCALER(ADC_CommonInitStruct->ADC_Prescaler));
  assert_param(IS_ADC_DMA_ACCESS_MODE(ADC_CommonInitStruct->ADC_DMAAccessMode));
  assert_param(IS_ADC_SAMPLING_DELAY(ADC_CommonInitStruct->ADC_TwoSamplingDelay));
  /*---------------------------- ADC CCR Configuration -----------------*/
  /* Get the ADC CCR value */
  tmpreg1 = ADC->CCR;
 8001932:	4b0f      	ldr	r3, [pc, #60]	; (8001970 <ADC_CommonInit+0x4a>)
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	60fb      	str	r3, [r7, #12]
  
  /* Clear MULTI, DELAY, DMA and ADCPRE bits */
  tmpreg1 &= CR_CLEAR_MASK;
 8001938:	68fa      	ldr	r2, [r7, #12]
 800193a:	4b0e      	ldr	r3, [pc, #56]	; (8001974 <ADC_CommonInit+0x4e>)
 800193c:	4013      	ands	r3, r2
 800193e:	60fb      	str	r3, [r7, #12]
     and DMA access mode for multimode */
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681a      	ldr	r2, [r3, #0]
                        ADC_CommonInitStruct->ADC_Prescaler | 
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	685b      	ldr	r3, [r3, #4]
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 8001948:	431a      	orrs	r2, r3
                        ADC_CommonInitStruct->ADC_DMAAccessMode | 
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	689b      	ldr	r3, [r3, #8]
                        ADC_CommonInitStruct->ADC_Prescaler | 
 800194e:	431a      	orrs	r2, r3
                        ADC_CommonInitStruct->ADC_TwoSamplingDelay);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	68db      	ldr	r3, [r3, #12]
                        ADC_CommonInitStruct->ADC_DMAAccessMode | 
 8001954:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 8001956:	68fa      	ldr	r2, [r7, #12]
 8001958:	4313      	orrs	r3, r2
 800195a:	60fb      	str	r3, [r7, #12]
                        
  /* Write to ADC CCR */
  ADC->CCR = tmpreg1;
 800195c:	4a04      	ldr	r2, [pc, #16]	; (8001970 <ADC_CommonInit+0x4a>)
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	6053      	str	r3, [r2, #4]
}
 8001962:	bf00      	nop
 8001964:	3714      	adds	r7, #20
 8001966:	46bd      	mov	sp, r7
 8001968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196c:	4770      	bx	lr
 800196e:	bf00      	nop
 8001970:	40012300 	.word	0x40012300
 8001974:	fffc30e0 	.word	0xfffc30e0

08001978 <ADC_CommonStructInit>:
  * @param  ADC_CommonInitStruct: pointer to an ADC_CommonInitTypeDef structure
  *         which will be initialized.
  * @retval None
  */
void ADC_CommonStructInit(ADC_CommonInitTypeDef* ADC_CommonInitStruct)
{
 8001978:	b480      	push	{r7}
 800197a:	b083      	sub	sp, #12
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  /* Initialize the ADC_Mode member */
  ADC_CommonInitStruct->ADC_Mode = ADC_Mode_Independent;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	2200      	movs	r2, #0
 8001984:	601a      	str	r2, [r3, #0]

  /* initialize the ADC_Prescaler member */
  ADC_CommonInitStruct->ADC_Prescaler = ADC_Prescaler_Div2;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	2200      	movs	r2, #0
 800198a:	605a      	str	r2, [r3, #4]

  /* Initialize the ADC_DMAAccessMode member */
  ADC_CommonInitStruct->ADC_DMAAccessMode = ADC_DMAAccessMode_Disabled;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2200      	movs	r2, #0
 8001990:	609a      	str	r2, [r3, #8]

  /* Initialize the ADC_TwoSamplingDelay member */
  ADC_CommonInitStruct->ADC_TwoSamplingDelay = ADC_TwoSamplingDelay_5Cycles;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	2200      	movs	r2, #0
 8001996:	60da      	str	r2, [r3, #12]
}
 8001998:	bf00      	nop
 800199a:	370c      	adds	r7, #12
 800199c:	46bd      	mov	sp, r7
 800199e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a2:	4770      	bx	lr

080019a4 <ADC_Cmd>:
  * @param  NewState: new state of the ADCx peripheral. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_Cmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b083      	sub	sp, #12
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
 80019ac:	460b      	mov	r3, r1
 80019ae:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80019b0:	78fb      	ldrb	r3, [r7, #3]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d006      	beq.n	80019c4 <ADC_Cmd+0x20>
  {
    /* Set the ADON bit to wake up the ADC from power down mode */
    ADCx->CR2 |= (uint32_t)ADC_CR2_ADON;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	689b      	ldr	r3, [r3, #8]
 80019ba:	f043 0201 	orr.w	r2, r3, #1
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	609a      	str	r2, [r3, #8]
  else
  {
    /* Disable the selected ADC peripheral */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_ADON);
  }
}
 80019c2:	e005      	b.n	80019d0 <ADC_Cmd+0x2c>
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_ADON);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	689b      	ldr	r3, [r3, #8]
 80019c8:	f023 0201 	bic.w	r2, r3, #1
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	609a      	str	r2, [r3, #8]
}
 80019d0:	bf00      	nop
 80019d2:	370c      	adds	r7, #12
 80019d4:	46bd      	mov	sp, r7
 80019d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019da:	4770      	bx	lr

080019dc <ADC_AnalogWatchdogCmd>:
  *            @arg ADC_AnalogWatchdog_AllRegAllInjecEnable: Analog watchdog on all regular and injected channels
  *            @arg ADC_AnalogWatchdog_None: No channel guarded by the analog watchdog
  * @retval None	  
  */
void ADC_AnalogWatchdogCmd(ADC_TypeDef* ADCx, uint32_t ADC_AnalogWatchdog)
{
 80019dc:	b480      	push	{r7}
 80019de:	b085      	sub	sp, #20
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
 80019e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80019e6:	2300      	movs	r3, #0
 80019e8:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_ANALOG_WATCHDOG(ADC_AnalogWatchdog));
  
  /* Get the old register value */
  tmpreg = ADCx->CR1;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	60fb      	str	r3, [r7, #12]
  
  /* Clear AWDEN, JAWDEN and AWDSGL bits */
  tmpreg &= CR1_AWDMode_RESET;
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80019f6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80019fa:	60fb      	str	r3, [r7, #12]
  
  /* Set the analog watchdog enable mode */
  tmpreg |= ADC_AnalogWatchdog;
 80019fc:	68fa      	ldr	r2, [r7, #12]
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	4313      	orrs	r3, r2
 8001a02:	60fb      	str	r3, [r7, #12]
  
  /* Store the new register value */
  ADCx->CR1 = tmpreg;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	68fa      	ldr	r2, [r7, #12]
 8001a08:	605a      	str	r2, [r3, #4]
}
 8001a0a:	bf00      	nop
 8001a0c:	3714      	adds	r7, #20
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a14:	4770      	bx	lr

08001a16 <ADC_AnalogWatchdogThresholdsConfig>:
  *          This parameter must be a 12-bit value.
  * @retval None
  */
void ADC_AnalogWatchdogThresholdsConfig(ADC_TypeDef* ADCx, uint16_t HighThreshold,
                                        uint16_t LowThreshold)
{
 8001a16:	b480      	push	{r7}
 8001a18:	b083      	sub	sp, #12
 8001a1a:	af00      	add	r7, sp, #0
 8001a1c:	6078      	str	r0, [r7, #4]
 8001a1e:	460b      	mov	r3, r1
 8001a20:	807b      	strh	r3, [r7, #2]
 8001a22:	4613      	mov	r3, r2
 8001a24:	803b      	strh	r3, [r7, #0]
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_THRESHOLD(HighThreshold));
  assert_param(IS_ADC_THRESHOLD(LowThreshold));
  
  /* Set the ADCx high threshold */
  ADCx->HTR = HighThreshold;
 8001a26:	887a      	ldrh	r2, [r7, #2]
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* Set the ADCx low threshold */
  ADCx->LTR = LowThreshold;
 8001a2c:	883a      	ldrh	r2, [r7, #0]
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001a32:	bf00      	nop
 8001a34:	370c      	adds	r7, #12
 8001a36:	46bd      	mov	sp, r7
 8001a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3c:	4770      	bx	lr

08001a3e <ADC_AnalogWatchdogSingleChannelConfig>:
  *            @arg ADC_Channel_17: ADC Channel17 selected
  *            @arg ADC_Channel_18: ADC Channel18 selected
  * @retval None
  */
void ADC_AnalogWatchdogSingleChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel)
{
 8001a3e:	b480      	push	{r7}
 8001a40:	b085      	sub	sp, #20
 8001a42:	af00      	add	r7, sp, #0
 8001a44:	6078      	str	r0, [r7, #4]
 8001a46:	460b      	mov	r3, r1
 8001a48:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpreg = 0;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  
  /* Get the old register value */
  tmpreg = ADCx->CR1;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	60fb      	str	r3, [r7, #12]
  
  /* Clear the Analog watchdog channel select bits */
  tmpreg &= CR1_AWDCH_RESET;
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	f023 031f 	bic.w	r3, r3, #31
 8001a5a:	60fb      	str	r3, [r7, #12]
  
  /* Set the Analog watchdog channel */
  tmpreg |= ADC_Channel;
 8001a5c:	78fb      	ldrb	r3, [r7, #3]
 8001a5e:	68fa      	ldr	r2, [r7, #12]
 8001a60:	4313      	orrs	r3, r2
 8001a62:	60fb      	str	r3, [r7, #12]
  
  /* Store the new register value */
  ADCx->CR1 = tmpreg;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	68fa      	ldr	r2, [r7, #12]
 8001a68:	605a      	str	r2, [r3, #4]
}
 8001a6a:	bf00      	nop
 8001a6c:	3714      	adds	r7, #20
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a74:	4770      	bx	lr

08001a76 <ADC_TempSensorVrefintCmd>:
  * @param  NewState: new state of the temperature sensor and Vrefint channels.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_TempSensorVrefintCmd(FunctionalState NewState)                
{
 8001a76:	b480      	push	{r7}
 8001a78:	b083      	sub	sp, #12
 8001a7a:	af00      	add	r7, sp, #0
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001a80:	79fb      	ldrb	r3, [r7, #7]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d006      	beq.n	8001a94 <ADC_TempSensorVrefintCmd+0x1e>
  {
    /* Enable the temperature sensor and Vrefint channel*/
    ADC->CCR |= (uint32_t)ADC_CCR_TSVREFE;
 8001a86:	4b09      	ldr	r3, [pc, #36]	; (8001aac <ADC_TempSensorVrefintCmd+0x36>)
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	4a08      	ldr	r2, [pc, #32]	; (8001aac <ADC_TempSensorVrefintCmd+0x36>)
 8001a8c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001a90:	6053      	str	r3, [r2, #4]
  else
  {
    /* Disable the temperature sensor and Vrefint channel*/
    ADC->CCR &= (uint32_t)(~ADC_CCR_TSVREFE);
  }
}
 8001a92:	e005      	b.n	8001aa0 <ADC_TempSensorVrefintCmd+0x2a>
    ADC->CCR &= (uint32_t)(~ADC_CCR_TSVREFE);
 8001a94:	4b05      	ldr	r3, [pc, #20]	; (8001aac <ADC_TempSensorVrefintCmd+0x36>)
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	4a04      	ldr	r2, [pc, #16]	; (8001aac <ADC_TempSensorVrefintCmd+0x36>)
 8001a9a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001a9e:	6053      	str	r3, [r2, #4]
}
 8001aa0:	bf00      	nop
 8001aa2:	370c      	adds	r7, #12
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aaa:	4770      	bx	lr
 8001aac:	40012300 	.word	0x40012300

08001ab0 <ADC_VBATCmd>:
  * @param  NewState: new state of the VBAT channel.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_VBATCmd(FunctionalState NewState)                             
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b083      	sub	sp, #12
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001aba:	79fb      	ldrb	r3, [r7, #7]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d006      	beq.n	8001ace <ADC_VBATCmd+0x1e>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= (uint32_t)ADC_CCR_VBATE;
 8001ac0:	4b09      	ldr	r3, [pc, #36]	; (8001ae8 <ADC_VBATCmd+0x38>)
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	4a08      	ldr	r2, [pc, #32]	; (8001ae8 <ADC_VBATCmd+0x38>)
 8001ac6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001aca:	6053      	str	r3, [r2, #4]
  else
  {
    /* Disable the VBAT channel*/
    ADC->CCR &= (uint32_t)(~ADC_CCR_VBATE);
  }
}
 8001acc:	e005      	b.n	8001ada <ADC_VBATCmd+0x2a>
    ADC->CCR &= (uint32_t)(~ADC_CCR_VBATE);
 8001ace:	4b06      	ldr	r3, [pc, #24]	; (8001ae8 <ADC_VBATCmd+0x38>)
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	4a05      	ldr	r2, [pc, #20]	; (8001ae8 <ADC_VBATCmd+0x38>)
 8001ad4:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001ad8:	6053      	str	r3, [r2, #4]
}
 8001ada:	bf00      	nop
 8001adc:	370c      	adds	r7, #12
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae4:	4770      	bx	lr
 8001ae6:	bf00      	nop
 8001ae8:	40012300 	.word	0x40012300

08001aec <ADC_RegularChannelConfig>:
  *            @arg ADC_SampleTime_144Cycles: Sample time equal to 144 cycles	
  *            @arg ADC_SampleTime_480Cycles: Sample time equal to 480 cycles	
  * @retval None
  */
void ADC_RegularChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b085      	sub	sp, #20
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
 8001af4:	4608      	mov	r0, r1
 8001af6:	4611      	mov	r1, r2
 8001af8:	461a      	mov	r2, r3
 8001afa:	4603      	mov	r3, r0
 8001afc:	70fb      	strb	r3, [r7, #3]
 8001afe:	460b      	mov	r3, r1
 8001b00:	70bb      	strb	r3, [r7, #2]
 8001b02:	4613      	mov	r3, r2
 8001b04:	707b      	strb	r3, [r7, #1]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
 8001b06:	2300      	movs	r3, #0
 8001b08:	60fb      	str	r3, [r7, #12]
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_REGULAR_RANK(Rank));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (ADC_Channel > ADC_Channel_9)
 8001b0e:	78fb      	ldrb	r3, [r7, #3]
 8001b10:	2b09      	cmp	r3, #9
 8001b12:	d923      	bls.n	8001b5c <ADC_RegularChannelConfig+0x70>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	68db      	ldr	r3, [r3, #12]
 8001b18:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SMPR1_SMP_SET << (3 * (ADC_Channel - 10));
 8001b1a:	78fb      	ldrb	r3, [r7, #3]
 8001b1c:	f1a3 020a 	sub.w	r2, r3, #10
 8001b20:	4613      	mov	r3, r2
 8001b22:	005b      	lsls	r3, r3, #1
 8001b24:	4413      	add	r3, r2
 8001b26:	2207      	movs	r2, #7
 8001b28:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2c:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 8001b2e:	68bb      	ldr	r3, [r7, #8]
 8001b30:	43db      	mvns	r3, r3
 8001b32:	68fa      	ldr	r2, [r7, #12]
 8001b34:	4013      	ands	r3, r2
 8001b36:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 10));
 8001b38:	7879      	ldrb	r1, [r7, #1]
 8001b3a:	78fb      	ldrb	r3, [r7, #3]
 8001b3c:	f1a3 020a 	sub.w	r2, r3, #10
 8001b40:	4613      	mov	r3, r2
 8001b42:	005b      	lsls	r3, r3, #1
 8001b44:	4413      	add	r3, r2
 8001b46:	fa01 f303 	lsl.w	r3, r1, r3
 8001b4a:	60bb      	str	r3, [r7, #8]
    
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 8001b4c:	68fa      	ldr	r2, [r7, #12]
 8001b4e:	68bb      	ldr	r3, [r7, #8]
 8001b50:	4313      	orrs	r3, r2
 8001b52:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SMPR1 = tmpreg1;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	68fa      	ldr	r2, [r7, #12]
 8001b58:	60da      	str	r2, [r3, #12]
 8001b5a:	e01e      	b.n	8001b9a <ADC_RegularChannelConfig+0xae>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	691b      	ldr	r3, [r3, #16]
 8001b60:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SMPR2_SMP_SET << (3 * ADC_Channel);
 8001b62:	78fa      	ldrb	r2, [r7, #3]
 8001b64:	4613      	mov	r3, r2
 8001b66:	005b      	lsls	r3, r3, #1
 8001b68:	4413      	add	r3, r2
 8001b6a:	2207      	movs	r2, #7
 8001b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b70:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 8001b72:	68bb      	ldr	r3, [r7, #8]
 8001b74:	43db      	mvns	r3, r3
 8001b76:	68fa      	ldr	r2, [r7, #12]
 8001b78:	4013      	ands	r3, r2
 8001b7a:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
 8001b7c:	7879      	ldrb	r1, [r7, #1]
 8001b7e:	78fa      	ldrb	r2, [r7, #3]
 8001b80:	4613      	mov	r3, r2
 8001b82:	005b      	lsls	r3, r3, #1
 8001b84:	4413      	add	r3, r2
 8001b86:	fa01 f303 	lsl.w	r3, r1, r3
 8001b8a:	60bb      	str	r3, [r7, #8]
    
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 8001b8c:	68fa      	ldr	r2, [r7, #12]
 8001b8e:	68bb      	ldr	r3, [r7, #8]
 8001b90:	4313      	orrs	r3, r2
 8001b92:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SMPR2 = tmpreg1;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	68fa      	ldr	r2, [r7, #12]
 8001b98:	611a      	str	r2, [r3, #16]
  }
  /* For Rank 1 to 6 */
  if (Rank < 7)
 8001b9a:	78bb      	ldrb	r3, [r7, #2]
 8001b9c:	2b06      	cmp	r3, #6
 8001b9e:	d821      	bhi.n	8001be4 <ADC_RegularChannelConfig+0xf8>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR3;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ba4:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SQR3_SQ_SET << (5 * (Rank - 1));
 8001ba6:	78bb      	ldrb	r3, [r7, #2]
 8001ba8:	1e5a      	subs	r2, r3, #1
 8001baa:	4613      	mov	r3, r2
 8001bac:	009b      	lsls	r3, r3, #2
 8001bae:	4413      	add	r3, r2
 8001bb0:	221f      	movs	r2, #31
 8001bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb6:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8001bb8:	68bb      	ldr	r3, [r7, #8]
 8001bba:	43db      	mvns	r3, r3
 8001bbc:	68fa      	ldr	r2, [r7, #12]
 8001bbe:	4013      	ands	r3, r2
 8001bc0:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 1));
 8001bc2:	78f9      	ldrb	r1, [r7, #3]
 8001bc4:	78bb      	ldrb	r3, [r7, #2]
 8001bc6:	1e5a      	subs	r2, r3, #1
 8001bc8:	4613      	mov	r3, r2
 8001bca:	009b      	lsls	r3, r3, #2
 8001bcc:	4413      	add	r3, r2
 8001bce:	fa01 f303 	lsl.w	r3, r1, r3
 8001bd2:	60bb      	str	r3, [r7, #8]
    
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8001bd4:	68fa      	ldr	r2, [r7, #12]
 8001bd6:	68bb      	ldr	r3, [r7, #8]
 8001bd8:	4313      	orrs	r3, r2
 8001bda:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SQR3 = tmpreg1;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	68fa      	ldr	r2, [r7, #12]
 8001be0:	635a      	str	r2, [r3, #52]	; 0x34
    tmpreg1 |= tmpreg2;
    
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
  }
}
 8001be2:	e047      	b.n	8001c74 <ADC_RegularChannelConfig+0x188>
  else if (Rank < 13)
 8001be4:	78bb      	ldrb	r3, [r7, #2]
 8001be6:	2b0c      	cmp	r3, #12
 8001be8:	d821      	bhi.n	8001c2e <ADC_RegularChannelConfig+0x142>
    tmpreg1 = ADCx->SQR2;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bee:	60fb      	str	r3, [r7, #12]
    tmpreg2 = SQR2_SQ_SET << (5 * (Rank - 7));
 8001bf0:	78bb      	ldrb	r3, [r7, #2]
 8001bf2:	1fda      	subs	r2, r3, #7
 8001bf4:	4613      	mov	r3, r2
 8001bf6:	009b      	lsls	r3, r3, #2
 8001bf8:	4413      	add	r3, r2
 8001bfa:	221f      	movs	r2, #31
 8001bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001c00:	60bb      	str	r3, [r7, #8]
    tmpreg1 &= ~tmpreg2;
 8001c02:	68bb      	ldr	r3, [r7, #8]
 8001c04:	43db      	mvns	r3, r3
 8001c06:	68fa      	ldr	r2, [r7, #12]
 8001c08:	4013      	ands	r3, r2
 8001c0a:	60fb      	str	r3, [r7, #12]
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 7));
 8001c0c:	78f9      	ldrb	r1, [r7, #3]
 8001c0e:	78bb      	ldrb	r3, [r7, #2]
 8001c10:	1fda      	subs	r2, r3, #7
 8001c12:	4613      	mov	r3, r2
 8001c14:	009b      	lsls	r3, r3, #2
 8001c16:	4413      	add	r3, r2
 8001c18:	fa01 f303 	lsl.w	r3, r1, r3
 8001c1c:	60bb      	str	r3, [r7, #8]
    tmpreg1 |= tmpreg2;
 8001c1e:	68fa      	ldr	r2, [r7, #12]
 8001c20:	68bb      	ldr	r3, [r7, #8]
 8001c22:	4313      	orrs	r3, r2
 8001c24:	60fb      	str	r3, [r7, #12]
    ADCx->SQR2 = tmpreg1;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	68fa      	ldr	r2, [r7, #12]
 8001c2a:	631a      	str	r2, [r3, #48]	; 0x30
}
 8001c2c:	e022      	b.n	8001c74 <ADC_RegularChannelConfig+0x188>
    tmpreg1 = ADCx->SQR1;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c32:	60fb      	str	r3, [r7, #12]
    tmpreg2 = SQR1_SQ_SET << (5 * (Rank - 13));
 8001c34:	78bb      	ldrb	r3, [r7, #2]
 8001c36:	f1a3 020d 	sub.w	r2, r3, #13
 8001c3a:	4613      	mov	r3, r2
 8001c3c:	009b      	lsls	r3, r3, #2
 8001c3e:	4413      	add	r3, r2
 8001c40:	221f      	movs	r2, #31
 8001c42:	fa02 f303 	lsl.w	r3, r2, r3
 8001c46:	60bb      	str	r3, [r7, #8]
    tmpreg1 &= ~tmpreg2;
 8001c48:	68bb      	ldr	r3, [r7, #8]
 8001c4a:	43db      	mvns	r3, r3
 8001c4c:	68fa      	ldr	r2, [r7, #12]
 8001c4e:	4013      	ands	r3, r2
 8001c50:	60fb      	str	r3, [r7, #12]
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 13));
 8001c52:	78f9      	ldrb	r1, [r7, #3]
 8001c54:	78bb      	ldrb	r3, [r7, #2]
 8001c56:	f1a3 020d 	sub.w	r2, r3, #13
 8001c5a:	4613      	mov	r3, r2
 8001c5c:	009b      	lsls	r3, r3, #2
 8001c5e:	4413      	add	r3, r2
 8001c60:	fa01 f303 	lsl.w	r3, r1, r3
 8001c64:	60bb      	str	r3, [r7, #8]
    tmpreg1 |= tmpreg2;
 8001c66:	68fa      	ldr	r2, [r7, #12]
 8001c68:	68bb      	ldr	r3, [r7, #8]
 8001c6a:	4313      	orrs	r3, r2
 8001c6c:	60fb      	str	r3, [r7, #12]
    ADCx->SQR1 = tmpreg1;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	68fa      	ldr	r2, [r7, #12]
 8001c72:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8001c74:	bf00      	nop
 8001c76:	3714      	adds	r7, #20
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7e:	4770      	bx	lr

08001c80 <ADC_SoftwareStartConv>:
  * @brief  Enables the selected ADC software start conversion of the regular channels.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval None
  */
void ADC_SoftwareStartConv(ADC_TypeDef* ADCx)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b083      	sub	sp, #12
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  
  /* Enable the selected ADC conversion for regular group */
  ADCx->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	689b      	ldr	r3, [r3, #8]
 8001c8c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	609a      	str	r2, [r3, #8]
}
 8001c94:	bf00      	nop
 8001c96:	370c      	adds	r7, #12
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9e:	4770      	bx	lr

08001ca0 <ADC_GetSoftwareStartConvStatus>:
  * @brief  Gets the selected ADC Software start regular conversion Status.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval The new state of ADC software start conversion (SET or RESET).
  */
FlagStatus ADC_GetSoftwareStartConvStatus(ADC_TypeDef* ADCx)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b085      	sub	sp, #20
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  
  /* Check the status of SWSTART bit */
  if ((ADCx->CR2 & ADC_CR2_SWSTART) != (uint32_t)RESET)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	689b      	ldr	r3, [r3, #8]
 8001cb0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d002      	beq.n	8001cbe <ADC_GetSoftwareStartConvStatus+0x1e>
  {
    /* SWSTART bit is set */
    bitstatus = SET;
 8001cb8:	2301      	movs	r3, #1
 8001cba:	73fb      	strb	r3, [r7, #15]
 8001cbc:	e001      	b.n	8001cc2 <ADC_GetSoftwareStartConvStatus+0x22>
  }
  else
  {
    /* SWSTART bit is reset */
    bitstatus = RESET;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return the SWSTART bit status */
  return  bitstatus;
 8001cc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	3714      	adds	r7, #20
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cce:	4770      	bx	lr

08001cd0 <ADC_EOCOnEachRegularChannelCmd>:
  * @param  NewState: new state of the selected ADC EOC flag rising
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_EOCOnEachRegularChannelCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b083      	sub	sp, #12
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
 8001cd8:	460b      	mov	r3, r1
 8001cda:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001cdc:	78fb      	ldrb	r3, [r7, #3]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d006      	beq.n	8001cf0 <ADC_EOCOnEachRegularChannelCmd+0x20>
  {
    /* Enable the selected ADC EOC rising on each regular channel conversion */
    ADCx->CR2 |= (uint32_t)ADC_CR2_EOCS;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	689b      	ldr	r3, [r3, #8]
 8001ce6:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	609a      	str	r2, [r3, #8]
  else
  {
    /* Disable the selected ADC EOC rising on each regular channel conversion */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_EOCS);
  }
}
 8001cee:	e005      	b.n	8001cfc <ADC_EOCOnEachRegularChannelCmd+0x2c>
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_EOCS);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	689b      	ldr	r3, [r3, #8]
 8001cf4:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	609a      	str	r2, [r3, #8]
}
 8001cfc:	bf00      	nop
 8001cfe:	370c      	adds	r7, #12
 8001d00:	46bd      	mov	sp, r7
 8001d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d06:	4770      	bx	lr

08001d08 <ADC_ContinuousModeCmd>:
  * @param  NewState: new state of the selected ADC continuous conversion mode
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_ContinuousModeCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b083      	sub	sp, #12
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
 8001d10:	460b      	mov	r3, r1
 8001d12:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001d14:	78fb      	ldrb	r3, [r7, #3]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d006      	beq.n	8001d28 <ADC_ContinuousModeCmd+0x20>
  {
    /* Enable the selected ADC continuous conversion mode */
    ADCx->CR2 |= (uint32_t)ADC_CR2_CONT;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	689b      	ldr	r3, [r3, #8]
 8001d1e:	f043 0202 	orr.w	r2, r3, #2
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	609a      	str	r2, [r3, #8]
  else
  {
    /* Disable the selected ADC continuous conversion mode */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_CONT);
  }
}
 8001d26:	e005      	b.n	8001d34 <ADC_ContinuousModeCmd+0x2c>
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_CONT);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	689b      	ldr	r3, [r3, #8]
 8001d2c:	f023 0202 	bic.w	r2, r3, #2
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	609a      	str	r2, [r3, #8]
}
 8001d34:	bf00      	nop
 8001d36:	370c      	adds	r7, #12
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3e:	4770      	bx	lr

08001d40 <ADC_DiscModeChannelCountConfig>:
  * @param  Number: specifies the discontinuous mode regular channel count value.
  *          This number must be between 1 and 8.
  * @retval None
  */
void ADC_DiscModeChannelCountConfig(ADC_TypeDef* ADCx, uint8_t Number)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b085      	sub	sp, #20
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
 8001d48:	460b      	mov	r3, r1
 8001d4a:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpreg1 = 0;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg2 = 0;
 8001d50:	2300      	movs	r3, #0
 8001d52:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_REGULAR_DISC_NUMBER(Number));
  
  /* Get the old register value */
  tmpreg1 = ADCx->CR1;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	60fb      	str	r3, [r7, #12]
  
  /* Clear the old discontinuous mode channel count */
  tmpreg1 &= CR1_DISCNUM_RESET;
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001d60:	60fb      	str	r3, [r7, #12]
  
  /* Set the discontinuous mode channel count */
  tmpreg2 = Number - 1;
 8001d62:	78fb      	ldrb	r3, [r7, #3]
 8001d64:	3b01      	subs	r3, #1
 8001d66:	60bb      	str	r3, [r7, #8]
  tmpreg1 |= tmpreg2 << 13;
 8001d68:	68bb      	ldr	r3, [r7, #8]
 8001d6a:	035b      	lsls	r3, r3, #13
 8001d6c:	68fa      	ldr	r2, [r7, #12]
 8001d6e:	4313      	orrs	r3, r2
 8001d70:	60fb      	str	r3, [r7, #12]
  
  /* Store the new register value */
  ADCx->CR1 = tmpreg1;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	68fa      	ldr	r2, [r7, #12]
 8001d76:	605a      	str	r2, [r3, #4]
}
 8001d78:	bf00      	nop
 8001d7a:	3714      	adds	r7, #20
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d82:	4770      	bx	lr

08001d84 <ADC_DiscModeCmd>:
  *         regular group channel.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_DiscModeCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b083      	sub	sp, #12
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
 8001d8c:	460b      	mov	r3, r1
 8001d8e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001d90:	78fb      	ldrb	r3, [r7, #3]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d006      	beq.n	8001da4 <ADC_DiscModeCmd+0x20>
  {
    /* Enable the selected ADC regular discontinuous mode */
    ADCx->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	605a      	str	r2, [r3, #4]
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    ADCx->CR1 &= (uint32_t)(~ADC_CR1_DISCEN);
  }
}
 8001da2:	e005      	b.n	8001db0 <ADC_DiscModeCmd+0x2c>
    ADCx->CR1 &= (uint32_t)(~ADC_CR1_DISCEN);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	605a      	str	r2, [r3, #4]
}
 8001db0:	bf00      	nop
 8001db2:	370c      	adds	r7, #12
 8001db4:	46bd      	mov	sp, r7
 8001db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dba:	4770      	bx	lr

08001dbc <ADC_GetConversionValue>:
  * @brief  Returns the last ADCx conversion result data for regular channel.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval The Data conversion value.
  */
uint16_t ADC_GetConversionValue(ADC_TypeDef* ADCx)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b083      	sub	sp, #12
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  
  /* Return the selected ADC conversion value */
  return (uint16_t) ADCx->DR;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dc8:	b29b      	uxth	r3, r3
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	370c      	adds	r7, #12
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd4:	4770      	bx	lr

08001dd6 <ADC_GetMultiModeConversionValue>:
  * @note   In triple mode, the value returned by this function is as following
  *           Data[15:0] : these bits contain alternatively the regular data of ADC1, ADC3 and ADC2.
  *           Data[31:16]: these bits contain alternatively the regular data of ADC2, ADC1 and ADC3.           
  */
uint32_t ADC_GetMultiModeConversionValue(void)
{
 8001dd6:	b480      	push	{r7}
 8001dd8:	af00      	add	r7, sp, #0
  /* Return the multi mode conversion value */
  return (*(__IO uint32_t *) CDR_ADDRESS);
 8001dda:	4b03      	ldr	r3, [pc, #12]	; (8001de8 <ADC_GetMultiModeConversionValue+0x12>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
}
 8001dde:	4618      	mov	r0, r3
 8001de0:	46bd      	mov	sp, r7
 8001de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de6:	4770      	bx	lr
 8001de8:	40012308 	.word	0x40012308

08001dec <ADC_DMACmd>:
  * @param  NewState: new state of the selected ADC DMA transfer.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_DMACmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8001dec:	b480      	push	{r7}
 8001dee:	b083      	sub	sp, #12
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
 8001df4:	460b      	mov	r3, r1
 8001df6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001df8:	78fb      	ldrb	r3, [r7, #3]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d006      	beq.n	8001e0c <ADC_DMACmd+0x20>
  {
    /* Enable the selected ADC DMA request */
    ADCx->CR2 |= (uint32_t)ADC_CR2_DMA;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	689b      	ldr	r3, [r3, #8]
 8001e02:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	609a      	str	r2, [r3, #8]
  else
  {
    /* Disable the selected ADC DMA request */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_DMA);
  }
}
 8001e0a:	e005      	b.n	8001e18 <ADC_DMACmd+0x2c>
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_DMA);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	689b      	ldr	r3, [r3, #8]
 8001e10:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	609a      	str	r2, [r3, #8]
}
 8001e18:	bf00      	nop
 8001e1a:	370c      	adds	r7, #12
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e22:	4770      	bx	lr

08001e24 <ADC_DMARequestAfterLastTransferCmd>:
  * @param  NewState: new state of the selected ADC DMA request after last transfer.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_DMARequestAfterLastTransferCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8001e24:	b480      	push	{r7}
 8001e26:	b083      	sub	sp, #12
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
 8001e2c:	460b      	mov	r3, r1
 8001e2e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001e30:	78fb      	ldrb	r3, [r7, #3]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d006      	beq.n	8001e44 <ADC_DMARequestAfterLastTransferCmd+0x20>
  {
    /* Enable the selected ADC DMA request after last transfer */
    ADCx->CR2 |= (uint32_t)ADC_CR2_DDS;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	689b      	ldr	r3, [r3, #8]
 8001e3a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	609a      	str	r2, [r3, #8]
  else
  {
    /* Disable the selected ADC DMA request after last transfer */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_DDS);
  }
}
 8001e42:	e005      	b.n	8001e50 <ADC_DMARequestAfterLastTransferCmd+0x2c>
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_DDS);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	689b      	ldr	r3, [r3, #8]
 8001e48:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	609a      	str	r2, [r3, #8]
}
 8001e50:	bf00      	nop
 8001e52:	370c      	adds	r7, #12
 8001e54:	46bd      	mov	sp, r7
 8001e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5a:	4770      	bx	lr

08001e5c <ADC_MultiModeDMARequestAfterLastTransferCmd>:
  *         by ADC_CommonInitStruct.ADC_DMAAccessMode structure member) is 
  *          ADC_DMAAccessMode_1, ADC_DMAAccessMode_2 or ADC_DMAAccessMode_3.     
  * @retval None
  */
void ADC_MultiModeDMARequestAfterLastTransferCmd(FunctionalState NewState)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b083      	sub	sp, #12
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	4603      	mov	r3, r0
 8001e64:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001e66:	79fb      	ldrb	r3, [r7, #7]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d006      	beq.n	8001e7a <ADC_MultiModeDMARequestAfterLastTransferCmd+0x1e>
  {
    /* Enable the selected ADC DMA request after last transfer */
    ADC->CCR |= (uint32_t)ADC_CCR_DDS;
 8001e6c:	4b09      	ldr	r3, [pc, #36]	; (8001e94 <ADC_MultiModeDMARequestAfterLastTransferCmd+0x38>)
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	4a08      	ldr	r2, [pc, #32]	; (8001e94 <ADC_MultiModeDMARequestAfterLastTransferCmd+0x38>)
 8001e72:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001e76:	6053      	str	r3, [r2, #4]
  else
  {
    /* Disable the selected ADC DMA request after last transfer */
    ADC->CCR &= (uint32_t)(~ADC_CCR_DDS);
  }
}
 8001e78:	e005      	b.n	8001e86 <ADC_MultiModeDMARequestAfterLastTransferCmd+0x2a>
    ADC->CCR &= (uint32_t)(~ADC_CCR_DDS);
 8001e7a:	4b06      	ldr	r3, [pc, #24]	; (8001e94 <ADC_MultiModeDMARequestAfterLastTransferCmd+0x38>)
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	4a05      	ldr	r2, [pc, #20]	; (8001e94 <ADC_MultiModeDMARequestAfterLastTransferCmd+0x38>)
 8001e80:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001e84:	6053      	str	r3, [r2, #4]
}
 8001e86:	bf00      	nop
 8001e88:	370c      	adds	r7, #12
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e90:	4770      	bx	lr
 8001e92:	bf00      	nop
 8001e94:	40012300 	.word	0x40012300

08001e98 <ADC_InjectedChannelConfig>:
  *            @arg ADC_SampleTime_144Cycles: Sample time equal to 144 cycles	
  *            @arg ADC_SampleTime_480Cycles: Sample time equal to 480 cycles	
  * @retval None
  */
void ADC_InjectedChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b087      	sub	sp, #28
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
 8001ea0:	4608      	mov	r0, r1
 8001ea2:	4611      	mov	r1, r2
 8001ea4:	461a      	mov	r2, r3
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	70fb      	strb	r3, [r7, #3]
 8001eaa:	460b      	mov	r3, r1
 8001eac:	70bb      	strb	r3, [r7, #2]
 8001eae:	4613      	mov	r3, r2
 8001eb0:	707b      	strb	r3, [r7, #1]
  uint32_t tmpreg1 = 0, tmpreg2 = 0, tmpreg3 = 0;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	617b      	str	r3, [r7, #20]
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	613b      	str	r3, [r7, #16]
 8001eba:	2300      	movs	r3, #0
 8001ebc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_INJECTED_RANK(Rank));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (ADC_Channel > ADC_Channel_9)
 8001ebe:	78fb      	ldrb	r3, [r7, #3]
 8001ec0:	2b09      	cmp	r3, #9
 8001ec2:	d923      	bls.n	8001f0c <ADC_InjectedChannelConfig+0x74>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	68db      	ldr	r3, [r3, #12]
 8001ec8:	617b      	str	r3, [r7, #20]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR1_SMP_SET << (3*(ADC_Channel - 10));
 8001eca:	78fb      	ldrb	r3, [r7, #3]
 8001ecc:	f1a3 020a 	sub.w	r2, r3, #10
 8001ed0:	4613      	mov	r3, r2
 8001ed2:	005b      	lsls	r3, r3, #1
 8001ed4:	4413      	add	r3, r2
 8001ed6:	2207      	movs	r2, #7
 8001ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8001edc:	613b      	str	r3, [r7, #16]
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 8001ede:	693b      	ldr	r3, [r7, #16]
 8001ee0:	43db      	mvns	r3, r3
 8001ee2:	697a      	ldr	r2, [r7, #20]
 8001ee4:	4013      	ands	r3, r2
 8001ee6:	617b      	str	r3, [r7, #20]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3*(ADC_Channel - 10));
 8001ee8:	7879      	ldrb	r1, [r7, #1]
 8001eea:	78fb      	ldrb	r3, [r7, #3]
 8001eec:	f1a3 020a 	sub.w	r2, r3, #10
 8001ef0:	4613      	mov	r3, r2
 8001ef2:	005b      	lsls	r3, r3, #1
 8001ef4:	4413      	add	r3, r2
 8001ef6:	fa01 f303 	lsl.w	r3, r1, r3
 8001efa:	613b      	str	r3, [r7, #16]
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 8001efc:	697a      	ldr	r2, [r7, #20]
 8001efe:	693b      	ldr	r3, [r7, #16]
 8001f00:	4313      	orrs	r3, r2
 8001f02:	617b      	str	r3, [r7, #20]
    /* Store the new register value */
    ADCx->SMPR1 = tmpreg1;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	697a      	ldr	r2, [r7, #20]
 8001f08:	60da      	str	r2, [r3, #12]
 8001f0a:	e01e      	b.n	8001f4a <ADC_InjectedChannelConfig+0xb2>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	691b      	ldr	r3, [r3, #16]
 8001f10:	617b      	str	r3, [r7, #20]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR2_SMP_SET << (3 * ADC_Channel);
 8001f12:	78fa      	ldrb	r2, [r7, #3]
 8001f14:	4613      	mov	r3, r2
 8001f16:	005b      	lsls	r3, r3, #1
 8001f18:	4413      	add	r3, r2
 8001f1a:	2207      	movs	r2, #7
 8001f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f20:	613b      	str	r3, [r7, #16]
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 8001f22:	693b      	ldr	r3, [r7, #16]
 8001f24:	43db      	mvns	r3, r3
 8001f26:	697a      	ldr	r2, [r7, #20]
 8001f28:	4013      	ands	r3, r2
 8001f2a:	617b      	str	r3, [r7, #20]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
 8001f2c:	7879      	ldrb	r1, [r7, #1]
 8001f2e:	78fa      	ldrb	r2, [r7, #3]
 8001f30:	4613      	mov	r3, r2
 8001f32:	005b      	lsls	r3, r3, #1
 8001f34:	4413      	add	r3, r2
 8001f36:	fa01 f303 	lsl.w	r3, r1, r3
 8001f3a:	613b      	str	r3, [r7, #16]
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 8001f3c:	697a      	ldr	r2, [r7, #20]
 8001f3e:	693b      	ldr	r3, [r7, #16]
 8001f40:	4313      	orrs	r3, r2
 8001f42:	617b      	str	r3, [r7, #20]
    /* Store the new register value */
    ADCx->SMPR2 = tmpreg1;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	697a      	ldr	r2, [r7, #20]
 8001f48:	611a      	str	r2, [r3, #16]
  }
  /* Rank configuration */
  /* Get the old register value */
  tmpreg1 = ADCx->JSQR;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f4e:	617b      	str	r3, [r7, #20]
  /* Get JL value: Number = JL+1 */
  tmpreg3 =  (tmpreg1 & JSQR_JL_SET)>> 20;
 8001f50:	697b      	ldr	r3, [r7, #20]
 8001f52:	0d1b      	lsrs	r3, r3, #20
 8001f54:	f003 0303 	and.w	r3, r3, #3
 8001f58:	60fb      	str	r3, [r7, #12]
  /* Calculate the mask to clear: ((Rank-1)+(4-JL-1)) */
  tmpreg2 = JSQR_JSQ_SET << (5 * (uint8_t)((Rank + 3) - (tmpreg3 + 1)));
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	b2db      	uxtb	r3, r3
 8001f5e:	78ba      	ldrb	r2, [r7, #2]
 8001f60:	1ad3      	subs	r3, r2, r3
 8001f62:	b2db      	uxtb	r3, r3
 8001f64:	3302      	adds	r3, #2
 8001f66:	b2db      	uxtb	r3, r3
 8001f68:	461a      	mov	r2, r3
 8001f6a:	4613      	mov	r3, r2
 8001f6c:	009b      	lsls	r3, r3, #2
 8001f6e:	4413      	add	r3, r2
 8001f70:	221f      	movs	r2, #31
 8001f72:	fa02 f303 	lsl.w	r3, r2, r3
 8001f76:	613b      	str	r3, [r7, #16]
  /* Clear the old JSQx bits for the selected rank */
  tmpreg1 &= ~tmpreg2;
 8001f78:	693b      	ldr	r3, [r7, #16]
 8001f7a:	43db      	mvns	r3, r3
 8001f7c:	697a      	ldr	r2, [r7, #20]
 8001f7e:	4013      	ands	r3, r2
 8001f80:	617b      	str	r3, [r7, #20]
  /* Calculate the mask to set: ((Rank-1)+(4-JL-1)) */
  tmpreg2 = (uint32_t)ADC_Channel << (5 * (uint8_t)((Rank + 3) - (tmpreg3 + 1)));
 8001f82:	78fa      	ldrb	r2, [r7, #3]
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	b2db      	uxtb	r3, r3
 8001f88:	78b9      	ldrb	r1, [r7, #2]
 8001f8a:	1acb      	subs	r3, r1, r3
 8001f8c:	b2db      	uxtb	r3, r3
 8001f8e:	3302      	adds	r3, #2
 8001f90:	b2db      	uxtb	r3, r3
 8001f92:	4619      	mov	r1, r3
 8001f94:	460b      	mov	r3, r1
 8001f96:	009b      	lsls	r3, r3, #2
 8001f98:	440b      	add	r3, r1
 8001f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9e:	613b      	str	r3, [r7, #16]
  /* Set the JSQx bits for the selected rank */
  tmpreg1 |= tmpreg2;
 8001fa0:	697a      	ldr	r2, [r7, #20]
 8001fa2:	693b      	ldr	r3, [r7, #16]
 8001fa4:	4313      	orrs	r3, r2
 8001fa6:	617b      	str	r3, [r7, #20]
  /* Store the new register value */
  ADCx->JSQR = tmpreg1;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	697a      	ldr	r2, [r7, #20]
 8001fac:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001fae:	bf00      	nop
 8001fb0:	371c      	adds	r7, #28
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb8:	4770      	bx	lr

08001fba <ADC_InjectedSequencerLengthConfig>:
  * @param  Length: The sequencer length. 
  *          This parameter must be a number between 1 to 4.
  * @retval None
  */
void ADC_InjectedSequencerLengthConfig(ADC_TypeDef* ADCx, uint8_t Length)
{
 8001fba:	b480      	push	{r7}
 8001fbc:	b085      	sub	sp, #20
 8001fbe:	af00      	add	r7, sp, #0
 8001fc0:	6078      	str	r0, [r7, #4]
 8001fc2:	460b      	mov	r3, r1
 8001fc4:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpreg1 = 0;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg2 = 0;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_INJECTED_LENGTH(Length));
  
  /* Get the old register value */
  tmpreg1 = ADCx->JSQR;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fd2:	60fb      	str	r3, [r7, #12]
  
  /* Clear the old injected sequence length JL bits */
  tmpreg1 &= JSQR_JL_RESET;
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8001fda:	60fb      	str	r3, [r7, #12]
  
  /* Set the injected sequence length JL bits */
  tmpreg2 = Length - 1; 
 8001fdc:	78fb      	ldrb	r3, [r7, #3]
 8001fde:	3b01      	subs	r3, #1
 8001fe0:	60bb      	str	r3, [r7, #8]
  tmpreg1 |= tmpreg2 << 20;
 8001fe2:	68bb      	ldr	r3, [r7, #8]
 8001fe4:	051b      	lsls	r3, r3, #20
 8001fe6:	68fa      	ldr	r2, [r7, #12]
 8001fe8:	4313      	orrs	r3, r2
 8001fea:	60fb      	str	r3, [r7, #12]
  
  /* Store the new register value */
  ADCx->JSQR = tmpreg1;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	68fa      	ldr	r2, [r7, #12]
 8001ff0:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001ff2:	bf00      	nop
 8001ff4:	3714      	adds	r7, #20
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffc:	4770      	bx	lr

08001ffe <ADC_SetInjectedOffset>:
  * @param  Offset: the offset value for the selected ADC injected channel
  *          This parameter must be a 12bit value.
  * @retval None
  */
void ADC_SetInjectedOffset(ADC_TypeDef* ADCx, uint8_t ADC_InjectedChannel, uint16_t Offset)
{
 8001ffe:	b480      	push	{r7}
 8002000:	b085      	sub	sp, #20
 8002002:	af00      	add	r7, sp, #0
 8002004:	6078      	str	r0, [r7, #4]
 8002006:	460b      	mov	r3, r1
 8002008:	70fb      	strb	r3, [r7, #3]
 800200a:	4613      	mov	r3, r2
 800200c:	803b      	strh	r3, [r7, #0]
    __IO uint32_t tmp = 0;
 800200e:	2300      	movs	r3, #0
 8002010:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_INJECTED_CHANNEL(ADC_InjectedChannel));
  assert_param(IS_ADC_OFFSET(Offset));
  
  tmp = (uint32_t)ADCx;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	60fb      	str	r3, [r7, #12]
  tmp += ADC_InjectedChannel;
 8002016:	78fa      	ldrb	r2, [r7, #3]
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	4413      	add	r3, r2
 800201c:	60fb      	str	r3, [r7, #12]
  
  /* Set the selected injected channel data offset */
 *(__IO uint32_t *) tmp = (uint32_t)Offset;
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	461a      	mov	r2, r3
 8002022:	883b      	ldrh	r3, [r7, #0]
 8002024:	6013      	str	r3, [r2, #0]
}
 8002026:	bf00      	nop
 8002028:	3714      	adds	r7, #20
 800202a:	46bd      	mov	sp, r7
 800202c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002030:	4770      	bx	lr

08002032 <ADC_ExternalTrigInjectedConvConfig>:
  *            @arg ADC_ExternalTrigInjecConv_T8_CC4: Timer8 capture compare4 selected 
  *            @arg ADC_ExternalTrigInjecConv_Ext_IT15: External interrupt line 15 event selected                          
  * @retval None
  */
void ADC_ExternalTrigInjectedConvConfig(ADC_TypeDef* ADCx, uint32_t ADC_ExternalTrigInjecConv)
{
 8002032:	b480      	push	{r7}
 8002034:	b085      	sub	sp, #20
 8002036:	af00      	add	r7, sp, #0
 8002038:	6078      	str	r0, [r7, #4]
 800203a:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800203c:	2300      	movs	r3, #0
 800203e:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_EXT_INJEC_TRIG(ADC_ExternalTrigInjecConv));
  
  /* Get the old register value */
  tmpreg = ADCx->CR2;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	689b      	ldr	r3, [r3, #8]
 8002044:	60fb      	str	r3, [r7, #12]
  
  /* Clear the old external event selection for injected group */
  tmpreg &= CR2_JEXTSEL_RESET;
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 800204c:	60fb      	str	r3, [r7, #12]
  
  /* Set the external event selection for injected group */
  tmpreg |= ADC_ExternalTrigInjecConv;
 800204e:	68fa      	ldr	r2, [r7, #12]
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	4313      	orrs	r3, r2
 8002054:	60fb      	str	r3, [r7, #12]
  
  /* Store the new register value */
  ADCx->CR2 = tmpreg;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	68fa      	ldr	r2, [r7, #12]
 800205a:	609a      	str	r2, [r3, #8]
}
 800205c:	bf00      	nop
 800205e:	3714      	adds	r7, #20
 8002060:	46bd      	mov	sp, r7
 8002062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002066:	4770      	bx	lr

08002068 <ADC_ExternalTrigInjectedConvEdgeConfig>:
  *            @arg ADC_ExternalTrigInjecConvEdge_RisingFalling: detection on both rising 
  *                                                               and falling edge
  * @retval None
  */
void ADC_ExternalTrigInjectedConvEdgeConfig(ADC_TypeDef* ADCx, uint32_t ADC_ExternalTrigInjecConvEdge)
{
 8002068:	b480      	push	{r7}
 800206a:	b085      	sub	sp, #20
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
 8002070:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8002072:	2300      	movs	r3, #0
 8002074:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_EXT_INJEC_TRIG_EDGE(ADC_ExternalTrigInjecConvEdge));
  /* Get the old register value */
  tmpreg = ADCx->CR2;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	689b      	ldr	r3, [r3, #8]
 800207a:	60fb      	str	r3, [r7, #12]
  /* Clear the old external trigger edge for injected group */
  tmpreg &= CR2_JEXTEN_RESET;
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8002082:	60fb      	str	r3, [r7, #12]
  /* Set the new external trigger edge for injected group */
  tmpreg |= ADC_ExternalTrigInjecConvEdge;
 8002084:	68fa      	ldr	r2, [r7, #12]
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	4313      	orrs	r3, r2
 800208a:	60fb      	str	r3, [r7, #12]
  /* Store the new register value */
  ADCx->CR2 = tmpreg;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	68fa      	ldr	r2, [r7, #12]
 8002090:	609a      	str	r2, [r3, #8]
}
 8002092:	bf00      	nop
 8002094:	3714      	adds	r7, #20
 8002096:	46bd      	mov	sp, r7
 8002098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209c:	4770      	bx	lr

0800209e <ADC_SoftwareStartInjectedConv>:
  * @brief  Enables the selected ADC software start conversion of the injected channels.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval None
  */
void ADC_SoftwareStartInjectedConv(ADC_TypeDef* ADCx)
{
 800209e:	b480      	push	{r7}
 80020a0:	b083      	sub	sp, #12
 80020a2:	af00      	add	r7, sp, #0
 80020a4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Enable the selected ADC conversion for injected group */
  ADCx->CR2 |= (uint32_t)ADC_CR2_JSWSTART;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	689b      	ldr	r3, [r3, #8]
 80020aa:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	609a      	str	r2, [r3, #8]
}
 80020b2:	bf00      	nop
 80020b4:	370c      	adds	r7, #12
 80020b6:	46bd      	mov	sp, r7
 80020b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020bc:	4770      	bx	lr

080020be <ADC_GetSoftwareStartInjectedConvCmdStatus>:
  * @brief  Gets the selected ADC Software start injected conversion Status.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval The new state of ADC software start injected conversion (SET or RESET).
  */
FlagStatus ADC_GetSoftwareStartInjectedConvCmdStatus(ADC_TypeDef* ADCx)
{
 80020be:	b480      	push	{r7}
 80020c0:	b085      	sub	sp, #20
 80020c2:	af00      	add	r7, sp, #0
 80020c4:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 80020c6:	2300      	movs	r3, #0
 80020c8:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  
  /* Check the status of JSWSTART bit */
  if ((ADCx->CR2 & ADC_CR2_JSWSTART) != (uint32_t)RESET)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	689b      	ldr	r3, [r3, #8]
 80020ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d002      	beq.n	80020dc <ADC_GetSoftwareStartInjectedConvCmdStatus+0x1e>
  {
    /* JSWSTART bit is set */
    bitstatus = SET;
 80020d6:	2301      	movs	r3, #1
 80020d8:	73fb      	strb	r3, [r7, #15]
 80020da:	e001      	b.n	80020e0 <ADC_GetSoftwareStartInjectedConvCmdStatus+0x22>
  }
  else
  {
    /* JSWSTART bit is reset */
    bitstatus = RESET;
 80020dc:	2300      	movs	r3, #0
 80020de:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the JSWSTART bit status */
  return  bitstatus;
 80020e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80020e2:	4618      	mov	r0, r3
 80020e4:	3714      	adds	r7, #20
 80020e6:	46bd      	mov	sp, r7
 80020e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ec:	4770      	bx	lr

080020ee <ADC_AutoInjectedConvCmd>:
  * @param  NewState: new state of the selected ADC auto injected conversion
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_AutoInjectedConvCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 80020ee:	b480      	push	{r7}
 80020f0:	b083      	sub	sp, #12
 80020f2:	af00      	add	r7, sp, #0
 80020f4:	6078      	str	r0, [r7, #4]
 80020f6:	460b      	mov	r3, r1
 80020f8:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80020fa:	78fb      	ldrb	r3, [r7, #3]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d006      	beq.n	800210e <ADC_AutoInjectedConvCmd+0x20>
  {
    /* Enable the selected ADC automatic injected group conversion */
    ADCx->CR1 |= (uint32_t)ADC_CR1_JAUTO;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	605a      	str	r2, [r3, #4]
  else
  {
    /* Disable the selected ADC automatic injected group conversion */
    ADCx->CR1 &= (uint32_t)(~ADC_CR1_JAUTO);
  }
}
 800210c:	e005      	b.n	800211a <ADC_AutoInjectedConvCmd+0x2c>
    ADCx->CR1 &= (uint32_t)(~ADC_CR1_JAUTO);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	605a      	str	r2, [r3, #4]
}
 800211a:	bf00      	nop
 800211c:	370c      	adds	r7, #12
 800211e:	46bd      	mov	sp, r7
 8002120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002124:	4770      	bx	lr

08002126 <ADC_InjectedDiscModeCmd>:
  *         group channel.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_InjectedDiscModeCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8002126:	b480      	push	{r7}
 8002128:	b083      	sub	sp, #12
 800212a:	af00      	add	r7, sp, #0
 800212c:	6078      	str	r0, [r7, #4]
 800212e:	460b      	mov	r3, r1
 8002130:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8002132:	78fb      	ldrb	r3, [r7, #3]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d006      	beq.n	8002146 <ADC_InjectedDiscModeCmd+0x20>
  {
    /* Enable the selected ADC injected discontinuous mode */
    ADCx->CR1 |= (uint32_t)ADC_CR1_JDISCEN;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	605a      	str	r2, [r3, #4]
  else
  {
    /* Disable the selected ADC injected discontinuous mode */
    ADCx->CR1 &= (uint32_t)(~ADC_CR1_JDISCEN);
  }
}
 8002144:	e005      	b.n	8002152 <ADC_InjectedDiscModeCmd+0x2c>
    ADCx->CR1 &= (uint32_t)(~ADC_CR1_JDISCEN);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	605a      	str	r2, [r3, #4]
}
 8002152:	bf00      	nop
 8002154:	370c      	adds	r7, #12
 8002156:	46bd      	mov	sp, r7
 8002158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215c:	4770      	bx	lr

0800215e <ADC_GetInjectedConversionValue>:
  *            @arg ADC_InjectedChannel_3: Injected Channel3 selected
  *            @arg ADC_InjectedChannel_4: Injected Channel4 selected
  * @retval The Data conversion value.
  */
uint16_t ADC_GetInjectedConversionValue(ADC_TypeDef* ADCx, uint8_t ADC_InjectedChannel)
{
 800215e:	b480      	push	{r7}
 8002160:	b085      	sub	sp, #20
 8002162:	af00      	add	r7, sp, #0
 8002164:	6078      	str	r0, [r7, #4]
 8002166:	460b      	mov	r3, r1
 8002168:	70fb      	strb	r3, [r7, #3]
  __IO uint32_t tmp = 0;
 800216a:	2300      	movs	r3, #0
 800216c:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_INJECTED_CHANNEL(ADC_InjectedChannel));

  tmp = (uint32_t)ADCx;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	60fb      	str	r3, [r7, #12]
  tmp += ADC_InjectedChannel + JDR_OFFSET;
 8002172:	78fa      	ldrb	r2, [r7, #3]
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	4413      	add	r3, r2
 8002178:	3328      	adds	r3, #40	; 0x28
 800217a:	60fb      	str	r3, [r7, #12]
  
  /* Returns the selected injected channel conversion data value */
  return (uint16_t) (*(__IO uint32_t*)  tmp); 
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	b29b      	uxth	r3, r3
}
 8002182:	4618      	mov	r0, r3
 8002184:	3714      	adds	r7, #20
 8002186:	46bd      	mov	sp, r7
 8002188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218c:	4770      	bx	lr

0800218e <ADC_ITConfig>:
  * @param  NewState: new state of the specified ADC interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_ITConfig(ADC_TypeDef* ADCx, uint16_t ADC_IT, FunctionalState NewState)  
{
 800218e:	b480      	push	{r7}
 8002190:	b085      	sub	sp, #20
 8002192:	af00      	add	r7, sp, #0
 8002194:	6078      	str	r0, [r7, #4]
 8002196:	460b      	mov	r3, r1
 8002198:	807b      	strh	r3, [r7, #2]
 800219a:	4613      	mov	r3, r2
 800219c:	707b      	strb	r3, [r7, #1]
  uint32_t itmask = 0;
 800219e:	2300      	movs	r3, #0
 80021a0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_ADC_IT(ADC_IT)); 

  /* Get the ADC IT index */
  itmask = (uint8_t)ADC_IT;
 80021a2:	887b      	ldrh	r3, [r7, #2]
 80021a4:	b2db      	uxtb	r3, r3
 80021a6:	60fb      	str	r3, [r7, #12]
  itmask = (uint32_t)0x01 << itmask;    
 80021a8:	2201      	movs	r2, #1
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	fa02 f303 	lsl.w	r3, r2, r3
 80021b0:	60fb      	str	r3, [r7, #12]

  if (NewState != DISABLE)
 80021b2:	787b      	ldrb	r3, [r7, #1]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d006      	beq.n	80021c6 <ADC_ITConfig+0x38>
  {
    /* Enable the selected ADC interrupts */
    ADCx->CR1 |= itmask;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	685a      	ldr	r2, [r3, #4]
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	431a      	orrs	r2, r3
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	605a      	str	r2, [r3, #4]
  else
  {
    /* Disable the selected ADC interrupts */
    ADCx->CR1 &= (~(uint32_t)itmask);
  }
}
 80021c4:	e006      	b.n	80021d4 <ADC_ITConfig+0x46>
    ADCx->CR1 &= (~(uint32_t)itmask);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	685a      	ldr	r2, [r3, #4]
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	43db      	mvns	r3, r3
 80021ce:	401a      	ands	r2, r3
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	605a      	str	r2, [r3, #4]
}
 80021d4:	bf00      	nop
 80021d6:	3714      	adds	r7, #20
 80021d8:	46bd      	mov	sp, r7
 80021da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021de:	4770      	bx	lr

080021e0 <ADC_GetFlagStatus>:
  *            @arg ADC_FLAG_STRT: Start of regular group conversion flag
  *            @arg ADC_FLAG_OVR: Overrun flag                                                 
  * @retval The new state of ADC_FLAG (SET or RESET).
  */
FlagStatus ADC_GetFlagStatus(ADC_TypeDef* ADCx, uint8_t ADC_FLAG)
{
 80021e0:	b480      	push	{r7}
 80021e2:	b085      	sub	sp, #20
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
 80021e8:	460b      	mov	r3, r1
 80021ea:	70fb      	strb	r3, [r7, #3]
  FlagStatus bitstatus = RESET;
 80021ec:	2300      	movs	r3, #0
 80021ee:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_GET_FLAG(ADC_FLAG));

  /* Check the status of the specified ADC flag */
  if ((ADCx->SR & ADC_FLAG) != (uint8_t)RESET)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681a      	ldr	r2, [r3, #0]
 80021f4:	78fb      	ldrb	r3, [r7, #3]
 80021f6:	4013      	ands	r3, r2
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d002      	beq.n	8002202 <ADC_GetFlagStatus+0x22>
  {
    /* ADC_FLAG is set */
    bitstatus = SET;
 80021fc:	2301      	movs	r3, #1
 80021fe:	73fb      	strb	r3, [r7, #15]
 8002200:	e001      	b.n	8002206 <ADC_GetFlagStatus+0x26>
  }
  else
  {
    /* ADC_FLAG is reset */
    bitstatus = RESET;
 8002202:	2300      	movs	r3, #0
 8002204:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the ADC_FLAG status */
  return  bitstatus;
 8002206:	7bfb      	ldrb	r3, [r7, #15]
}
 8002208:	4618      	mov	r0, r3
 800220a:	3714      	adds	r7, #20
 800220c:	46bd      	mov	sp, r7
 800220e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002212:	4770      	bx	lr

08002214 <ADC_ClearFlag>:
  *            @arg ADC_FLAG_STRT: Start of regular group conversion flag
  *            @arg ADC_FLAG_OVR: Overrun flag                          
  * @retval None
  */
void ADC_ClearFlag(ADC_TypeDef* ADCx, uint8_t ADC_FLAG)
{
 8002214:	b480      	push	{r7}
 8002216:	b083      	sub	sp, #12
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
 800221c:	460b      	mov	r3, r1
 800221e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CLEAR_FLAG(ADC_FLAG));

  /* Clear the selected ADC flags */
  ADCx->SR = ~(uint32_t)ADC_FLAG;
 8002220:	78fb      	ldrb	r3, [r7, #3]
 8002222:	43da      	mvns	r2, r3
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	601a      	str	r2, [r3, #0]
}
 8002228:	bf00      	nop
 800222a:	370c      	adds	r7, #12
 800222c:	46bd      	mov	sp, r7
 800222e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002232:	4770      	bx	lr

08002234 <ADC_GetITStatus>:
  *            @arg ADC_IT_JEOC: End of injected conversion interrupt mask
  *            @arg ADC_IT_OVR: Overrun interrupt mask                        
  * @retval The new state of ADC_IT (SET or RESET).
  */
ITStatus ADC_GetITStatus(ADC_TypeDef* ADCx, uint16_t ADC_IT)
{
 8002234:	b480      	push	{r7}
 8002236:	b087      	sub	sp, #28
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
 800223c:	460b      	mov	r3, r1
 800223e:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET;
 8002240:	2300      	movs	r3, #0
 8002242:	75fb      	strb	r3, [r7, #23]
  uint32_t itmask = 0, enablestatus = 0;
 8002244:	2300      	movs	r3, #0
 8002246:	613b      	str	r3, [r7, #16]
 8002248:	2300      	movs	r3, #0
 800224a:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_IT(ADC_IT));

  /* Get the ADC IT index */
  itmask = ADC_IT >> 8;
 800224c:	887b      	ldrh	r3, [r7, #2]
 800224e:	0a1b      	lsrs	r3, r3, #8
 8002250:	b29b      	uxth	r3, r3
 8002252:	613b      	str	r3, [r7, #16]

  /* Get the ADC_IT enable bit status */
  enablestatus = (ADCx->CR1 & ((uint32_t)0x01 << (uint8_t)ADC_IT)) ;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	685a      	ldr	r2, [r3, #4]
 8002258:	887b      	ldrh	r3, [r7, #2]
 800225a:	b2db      	uxtb	r3, r3
 800225c:	4619      	mov	r1, r3
 800225e:	2301      	movs	r3, #1
 8002260:	408b      	lsls	r3, r1
 8002262:	4013      	ands	r3, r2
 8002264:	60fb      	str	r3, [r7, #12]

  /* Check the status of the specified ADC interrupt */
  if (((ADCx->SR & itmask) != (uint32_t)RESET) && enablestatus)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681a      	ldr	r2, [r3, #0]
 800226a:	693b      	ldr	r3, [r7, #16]
 800226c:	4013      	ands	r3, r2
 800226e:	2b00      	cmp	r3, #0
 8002270:	d005      	beq.n	800227e <ADC_GetITStatus+0x4a>
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d002      	beq.n	800227e <ADC_GetITStatus+0x4a>
  {
    /* ADC_IT is set */
    bitstatus = SET;
 8002278:	2301      	movs	r3, #1
 800227a:	75fb      	strb	r3, [r7, #23]
 800227c:	e001      	b.n	8002282 <ADC_GetITStatus+0x4e>
  }
  else
  {
    /* ADC_IT is reset */
    bitstatus = RESET;
 800227e:	2300      	movs	r3, #0
 8002280:	75fb      	strb	r3, [r7, #23]
  }
  /* Return the ADC_IT status */
  return  bitstatus;
 8002282:	7dfb      	ldrb	r3, [r7, #23]
}
 8002284:	4618      	mov	r0, r3
 8002286:	371c      	adds	r7, #28
 8002288:	46bd      	mov	sp, r7
 800228a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228e:	4770      	bx	lr

08002290 <ADC_ClearITPendingBit>:
  *            @arg ADC_IT_JEOC: End of injected conversion interrupt mask
  *            @arg ADC_IT_OVR: Overrun interrupt mask                         
  * @retval None
  */
void ADC_ClearITPendingBit(ADC_TypeDef* ADCx, uint16_t ADC_IT)
{
 8002290:	b480      	push	{r7}
 8002292:	b085      	sub	sp, #20
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
 8002298:	460b      	mov	r3, r1
 800229a:	807b      	strh	r3, [r7, #2]
  uint8_t itmask = 0;
 800229c:	2300      	movs	r3, #0
 800229e:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_IT(ADC_IT)); 
  /* Get the ADC IT index */
  itmask = (uint8_t)(ADC_IT >> 8);
 80022a0:	887b      	ldrh	r3, [r7, #2]
 80022a2:	0a1b      	lsrs	r3, r3, #8
 80022a4:	b29b      	uxth	r3, r3
 80022a6:	73fb      	strb	r3, [r7, #15]
  /* Clear the selected ADC interrupt pending bits */
  ADCx->SR = ~(uint32_t)itmask;
 80022a8:	7bfb      	ldrb	r3, [r7, #15]
 80022aa:	43da      	mvns	r2, r3
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	601a      	str	r2, [r3, #0]
}                    
 80022b0:	bf00      	nop
 80022b2:	3714      	adds	r7, #20
 80022b4:	46bd      	mov	sp, r7
 80022b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ba:	4770      	bx	lr

080022bc <CAN_DeInit>:
  * @brief  Deinitializes the CAN peripheral registers to their default reset values.
  * @param  CANx: where x can be 1 or 2 to select the CAN peripheral.
  * @retval None.
  */
void CAN_DeInit(CAN_TypeDef* CANx)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b082      	sub	sp, #8
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
 
  if (CANx == CAN1)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	4a0e      	ldr	r2, [pc, #56]	; (8002300 <CAN_DeInit+0x44>)
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d10a      	bne.n	80022e2 <CAN_DeInit+0x26>
  {
    /* Enable CAN1 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN1, ENABLE);
 80022cc:	2101      	movs	r1, #1
 80022ce:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 80022d2:	f006 fc25 	bl	8008b20 <RCC_APB1PeriphResetCmd>
    /* Release CAN1 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN1, DISABLE);
 80022d6:	2100      	movs	r1, #0
 80022d8:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 80022dc:	f006 fc20 	bl	8008b20 <RCC_APB1PeriphResetCmd>
    /* Enable CAN2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN2, ENABLE);
    /* Release CAN2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN2, DISABLE);
  }
}
 80022e0:	e009      	b.n	80022f6 <CAN_DeInit+0x3a>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN2, ENABLE);
 80022e2:	2101      	movs	r1, #1
 80022e4:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 80022e8:	f006 fc1a 	bl	8008b20 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN2, DISABLE);
 80022ec:	2100      	movs	r1, #0
 80022ee:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 80022f2:	f006 fc15 	bl	8008b20 <RCC_APB1PeriphResetCmd>
}
 80022f6:	bf00      	nop
 80022f8:	3708      	adds	r7, #8
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}
 80022fe:	bf00      	nop
 8002300:	40006400 	.word	0x40006400

08002304 <CAN_Init>:
  *         the configuration information for the CAN peripheral.
  * @retval Constant indicates initialization succeed which will be 
  *         CAN_InitStatus_Failed or CAN_InitStatus_Success.
  */
uint8_t CAN_Init(CAN_TypeDef* CANx, CAN_InitTypeDef* CAN_InitStruct)
{
 8002304:	b480      	push	{r7}
 8002306:	b085      	sub	sp, #20
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
 800230c:	6039      	str	r1, [r7, #0]
  uint8_t InitStatus = CAN_InitStatus_Failed;
 800230e:	2300      	movs	r3, #0
 8002310:	73fb      	strb	r3, [r7, #15]
  uint32_t wait_ack = 0x00000000;
 8002312:	2300      	movs	r3, #0
 8002314:	60bb      	str	r3, [r7, #8]
  assert_param(IS_CAN_BS1(CAN_InitStruct->CAN_BS1));
  assert_param(IS_CAN_BS2(CAN_InitStruct->CAN_BS2));
  assert_param(IS_CAN_PRESCALER(CAN_InitStruct->CAN_Prescaler));

  /* Exit from sleep mode */
  CANx->MCR &= (~(uint32_t)CAN_MCR_SLEEP);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f023 0202 	bic.w	r2, r3, #2
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	601a      	str	r2, [r3, #0]

  /* Request initialisation */
  CANx->MCR |= CAN_MCR_INRQ ;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f043 0201 	orr.w	r2, r3, #1
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	601a      	str	r2, [r3, #0]

  /* Wait the acknowledge */
  while (((CANx->MSR & CAN_MSR_INAK) != CAN_MSR_INAK) && (wait_ack != INAK_TIMEOUT))
 800232e:	e002      	b.n	8002336 <CAN_Init+0x32>
  {
    wait_ack++;
 8002330:	68bb      	ldr	r3, [r7, #8]
 8002332:	3301      	adds	r3, #1
 8002334:	60bb      	str	r3, [r7, #8]
  while (((CANx->MSR & CAN_MSR_INAK) != CAN_MSR_INAK) && (wait_ack != INAK_TIMEOUT))
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	f003 0301 	and.w	r3, r3, #1
 800233e:	2b01      	cmp	r3, #1
 8002340:	d004      	beq.n	800234c <CAN_Init+0x48>
 8002342:	68bb      	ldr	r3, [r7, #8]
 8002344:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002348:	4293      	cmp	r3, r2
 800234a:	d1f1      	bne.n	8002330 <CAN_Init+0x2c>
  }

  /* Check acknowledge */
  if ((CANx->MSR & CAN_MSR_INAK) != CAN_MSR_INAK)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	f003 0301 	and.w	r3, r3, #1
 8002354:	2b01      	cmp	r3, #1
 8002356:	d002      	beq.n	800235e <CAN_Init+0x5a>
  {
    InitStatus = CAN_InitStatus_Failed;
 8002358:	2300      	movs	r3, #0
 800235a:	73fb      	strb	r3, [r7, #15]
 800235c:	e09c      	b.n	8002498 <CAN_Init+0x194>
  }
  else 
  {
    /* Set the time triggered communication mode */
    if (CAN_InitStruct->CAN_TTCM == ENABLE)
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	799b      	ldrb	r3, [r3, #6]
 8002362:	2b01      	cmp	r3, #1
 8002364:	d106      	bne.n	8002374 <CAN_Init+0x70>
    {
      CANx->MCR |= CAN_MCR_TTCM;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	601a      	str	r2, [r3, #0]
 8002372:	e005      	b.n	8002380 <CAN_Init+0x7c>
    }
    else
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_TTCM;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	601a      	str	r2, [r3, #0]
    }

    /* Set the automatic bus-off management */
    if (CAN_InitStruct->CAN_ABOM == ENABLE)
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	79db      	ldrb	r3, [r3, #7]
 8002384:	2b01      	cmp	r3, #1
 8002386:	d106      	bne.n	8002396 <CAN_Init+0x92>
    {
      CANx->MCR |= CAN_MCR_ABOM;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	601a      	str	r2, [r3, #0]
 8002394:	e005      	b.n	80023a2 <CAN_Init+0x9e>
    }
    else
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_ABOM;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	601a      	str	r2, [r3, #0]
    }

    /* Set the automatic wake-up mode */
    if (CAN_InitStruct->CAN_AWUM == ENABLE)
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	7a1b      	ldrb	r3, [r3, #8]
 80023a6:	2b01      	cmp	r3, #1
 80023a8:	d106      	bne.n	80023b8 <CAN_Init+0xb4>
    {
      CANx->MCR |= CAN_MCR_AWUM;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f043 0220 	orr.w	r2, r3, #32
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	601a      	str	r2, [r3, #0]
 80023b6:	e005      	b.n	80023c4 <CAN_Init+0xc0>
    }
    else
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_AWUM;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f023 0220 	bic.w	r2, r3, #32
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	601a      	str	r2, [r3, #0]
    }

    /* Set the no automatic retransmission */
    if (CAN_InitStruct->CAN_NART == ENABLE)
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	7a5b      	ldrb	r3, [r3, #9]
 80023c8:	2b01      	cmp	r3, #1
 80023ca:	d106      	bne.n	80023da <CAN_Init+0xd6>
    {
      CANx->MCR |= CAN_MCR_NART;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f043 0210 	orr.w	r2, r3, #16
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	601a      	str	r2, [r3, #0]
 80023d8:	e005      	b.n	80023e6 <CAN_Init+0xe2>
    }
    else
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_NART;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f023 0210 	bic.w	r2, r3, #16
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	601a      	str	r2, [r3, #0]
    }

    /* Set the receive FIFO locked mode */
    if (CAN_InitStruct->CAN_RFLM == ENABLE)
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	7a9b      	ldrb	r3, [r3, #10]
 80023ea:	2b01      	cmp	r3, #1
 80023ec:	d106      	bne.n	80023fc <CAN_Init+0xf8>
    {
      CANx->MCR |= CAN_MCR_RFLM;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f043 0208 	orr.w	r2, r3, #8
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	601a      	str	r2, [r3, #0]
 80023fa:	e005      	b.n	8002408 <CAN_Init+0x104>
    }
    else
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_RFLM;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f023 0208 	bic.w	r2, r3, #8
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	601a      	str	r2, [r3, #0]
    }

    /* Set the transmit FIFO priority */
    if (CAN_InitStruct->CAN_TXFP == ENABLE)
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	7adb      	ldrb	r3, [r3, #11]
 800240c:	2b01      	cmp	r3, #1
 800240e:	d106      	bne.n	800241e <CAN_Init+0x11a>
    {
      CANx->MCR |= CAN_MCR_TXFP;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f043 0204 	orr.w	r2, r3, #4
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	601a      	str	r2, [r3, #0]
 800241c:	e005      	b.n	800242a <CAN_Init+0x126>
    }
    else
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_TXFP;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f023 0204 	bic.w	r2, r3, #4
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	601a      	str	r2, [r3, #0]
    }

    /* Set the bit timing register */
    CANx->BTR = (uint32_t)((uint32_t)CAN_InitStruct->CAN_Mode << 30) | \
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	789b      	ldrb	r3, [r3, #2]
 800242e:	079a      	lsls	r2, r3, #30
                ((uint32_t)CAN_InitStruct->CAN_SJW << 24) | \
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	78db      	ldrb	r3, [r3, #3]
 8002434:	061b      	lsls	r3, r3, #24
    CANx->BTR = (uint32_t)((uint32_t)CAN_InitStruct->CAN_Mode << 30) | \
 8002436:	431a      	orrs	r2, r3
                ((uint32_t)CAN_InitStruct->CAN_BS1 << 16) | \
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	791b      	ldrb	r3, [r3, #4]
 800243c:	041b      	lsls	r3, r3, #16
                ((uint32_t)CAN_InitStruct->CAN_SJW << 24) | \
 800243e:	431a      	orrs	r2, r3
                ((uint32_t)CAN_InitStruct->CAN_BS2 << 20) | \
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	795b      	ldrb	r3, [r3, #5]
 8002444:	051b      	lsls	r3, r3, #20
                ((uint32_t)CAN_InitStruct->CAN_BS1 << 16) | \
 8002446:	431a      	orrs	r2, r3
               ((uint32_t)CAN_InitStruct->CAN_Prescaler - 1);
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	881b      	ldrh	r3, [r3, #0]
 800244c:	3b01      	subs	r3, #1
                ((uint32_t)CAN_InitStruct->CAN_BS2 << 20) | \
 800244e:	431a      	orrs	r2, r3
    CANx->BTR = (uint32_t)((uint32_t)CAN_InitStruct->CAN_Mode << 30) | \
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	61da      	str	r2, [r3, #28]

    /* Request leave initialisation */
    CANx->MCR &= ~(uint32_t)CAN_MCR_INRQ;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f023 0201 	bic.w	r2, r3, #1
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	601a      	str	r2, [r3, #0]

   /* Wait the acknowledge */
   wait_ack = 0;
 8002460:	2300      	movs	r3, #0
 8002462:	60bb      	str	r3, [r7, #8]

   while (((CANx->MSR & CAN_MSR_INAK) == CAN_MSR_INAK) && (wait_ack != INAK_TIMEOUT))
 8002464:	e002      	b.n	800246c <CAN_Init+0x168>
   {
     wait_ack++;
 8002466:	68bb      	ldr	r3, [r7, #8]
 8002468:	3301      	adds	r3, #1
 800246a:	60bb      	str	r3, [r7, #8]
   while (((CANx->MSR & CAN_MSR_INAK) == CAN_MSR_INAK) && (wait_ack != INAK_TIMEOUT))
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	f003 0301 	and.w	r3, r3, #1
 8002474:	2b01      	cmp	r3, #1
 8002476:	d104      	bne.n	8002482 <CAN_Init+0x17e>
 8002478:	68bb      	ldr	r3, [r7, #8]
 800247a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800247e:	4293      	cmp	r3, r2
 8002480:	d1f1      	bne.n	8002466 <CAN_Init+0x162>
   }

    /* ...and check acknowledged */
    if ((CANx->MSR & CAN_MSR_INAK) == CAN_MSR_INAK)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	f003 0301 	and.w	r3, r3, #1
 800248a:	2b01      	cmp	r3, #1
 800248c:	d102      	bne.n	8002494 <CAN_Init+0x190>
    {
      InitStatus = CAN_InitStatus_Failed;
 800248e:	2300      	movs	r3, #0
 8002490:	73fb      	strb	r3, [r7, #15]
 8002492:	e001      	b.n	8002498 <CAN_Init+0x194>
    }
    else
    {
      InitStatus = CAN_InitStatus_Success ;
 8002494:	2301      	movs	r3, #1
 8002496:	73fb      	strb	r3, [r7, #15]
    }
  }

  /* At this step, return the status of initialization */
  return InitStatus;
 8002498:	7bfb      	ldrb	r3, [r7, #15]
}
 800249a:	4618      	mov	r0, r3
 800249c:	3714      	adds	r7, #20
 800249e:	46bd      	mov	sp, r7
 80024a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a4:	4770      	bx	lr

080024a6 <CAN_FilterInit>:
  * @param  CAN_FilterInitStruct: pointer to a CAN_FilterInitTypeDef structure that
  *         contains the configuration information.
  * @retval None
  */
void CAN_FilterInit(CAN_FilterInitTypeDef* CAN_FilterInitStruct)
{
 80024a6:	b490      	push	{r4, r7}
 80024a8:	b084      	sub	sp, #16
 80024aa:	af00      	add	r7, sp, #0
 80024ac:	6078      	str	r0, [r7, #4]
  uint32_t filter_number_bit_pos = 0;
 80024ae:	2300      	movs	r3, #0
 80024b0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_CAN_FILTER_MODE(CAN_FilterInitStruct->CAN_FilterMode));
  assert_param(IS_CAN_FILTER_SCALE(CAN_FilterInitStruct->CAN_FilterScale));
  assert_param(IS_CAN_FILTER_FIFO(CAN_FilterInitStruct->CAN_FilterFIFOAssignment));
  assert_param(IS_FUNCTIONAL_STATE(CAN_FilterInitStruct->CAN_FilterActivation));

  filter_number_bit_pos = ((uint32_t)1) << CAN_FilterInitStruct->CAN_FilterNumber;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	7a9b      	ldrb	r3, [r3, #10]
 80024b6:	461a      	mov	r2, r3
 80024b8:	2301      	movs	r3, #1
 80024ba:	4093      	lsls	r3, r2
 80024bc:	60fb      	str	r3, [r7, #12]

  /* Initialisation mode for the filter */
  CAN1->FMR |= FMR_FINIT;
 80024be:	4b5a      	ldr	r3, [pc, #360]	; (8002628 <CAN_FilterInit+0x182>)
 80024c0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80024c4:	4a58      	ldr	r2, [pc, #352]	; (8002628 <CAN_FilterInit+0x182>)
 80024c6:	f043 0301 	orr.w	r3, r3, #1
 80024ca:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

  /* Filter Deactivation */
  CAN1->FA1R &= ~(uint32_t)filter_number_bit_pos;
 80024ce:	4b56      	ldr	r3, [pc, #344]	; (8002628 <CAN_FilterInit+0x182>)
 80024d0:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	43db      	mvns	r3, r3
 80024d8:	4953      	ldr	r1, [pc, #332]	; (8002628 <CAN_FilterInit+0x182>)
 80024da:	4013      	ands	r3, r2
 80024dc:	f8c1 321c 	str.w	r3, [r1, #540]	; 0x21c

  /* Filter Scale */
  if (CAN_FilterInitStruct->CAN_FilterScale == CAN_FilterScale_16bit)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	7b1b      	ldrb	r3, [r3, #12]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d129      	bne.n	800253c <CAN_FilterInit+0x96>
  {
    /* 16-bit scale for the filter */
    CAN1->FS1R &= ~(uint32_t)filter_number_bit_pos;
 80024e8:	4b4f      	ldr	r3, [pc, #316]	; (8002628 <CAN_FilterInit+0x182>)
 80024ea:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	43db      	mvns	r3, r3
 80024f2:	494d      	ldr	r1, [pc, #308]	; (8002628 <CAN_FilterInit+0x182>)
 80024f4:	4013      	ands	r3, r2
 80024f6:	f8c1 320c 	str.w	r3, [r1, #524]	; 0x20c

    /* First 16-bit identifier and First 16-bit mask */
    /* Or First 16-bit identifier and Second 16-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow) << 16) |
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	88db      	ldrh	r3, [r3, #6]
 80024fe:	041b      	lsls	r3, r3, #16
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);
 8002500:	687a      	ldr	r2, [r7, #4]
 8002502:	8852      	ldrh	r2, [r2, #2]
 8002504:	4614      	mov	r4, r2
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
 8002506:	4948      	ldr	r1, [pc, #288]	; (8002628 <CAN_FilterInit+0x182>)
 8002508:	687a      	ldr	r2, [r7, #4]
 800250a:	7a92      	ldrb	r2, [r2, #10]
 800250c:	4610      	mov	r0, r2
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow) << 16) |
 800250e:	ea43 0204 	orr.w	r2, r3, r4
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
 8002512:	f100 0348 	add.w	r3, r0, #72	; 0x48
 8002516:	f841 2033 	str.w	r2, [r1, r3, lsl #3]

    /* Second 16-bit identifier and Second 16-bit mask */
    /* Or Third 16-bit identifier and Fourth 16-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	889b      	ldrh	r3, [r3, #4]
 800251e:	041b      	lsls	r3, r3, #16
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh);
 8002520:	687a      	ldr	r2, [r7, #4]
 8002522:	8812      	ldrh	r2, [r2, #0]
 8002524:	4614      	mov	r4, r2
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
 8002526:	4940      	ldr	r1, [pc, #256]	; (8002628 <CAN_FilterInit+0x182>)
 8002528:	687a      	ldr	r2, [r7, #4]
 800252a:	7a92      	ldrb	r2, [r2, #10]
 800252c:	4610      	mov	r0, r2
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
 800252e:	ea43 0204 	orr.w	r2, r3, r4
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
 8002532:	f100 0348 	add.w	r3, r0, #72	; 0x48
 8002536:	00db      	lsls	r3, r3, #3
 8002538:	440b      	add	r3, r1
 800253a:	605a      	str	r2, [r3, #4]
  }

  if (CAN_FilterInitStruct->CAN_FilterScale == CAN_FilterScale_32bit)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	7b1b      	ldrb	r3, [r3, #12]
 8002540:	2b01      	cmp	r3, #1
 8002542:	d128      	bne.n	8002596 <CAN_FilterInit+0xf0>
  {
    /* 32-bit scale for the filter */
    CAN1->FS1R |= filter_number_bit_pos;
 8002544:	4b38      	ldr	r3, [pc, #224]	; (8002628 <CAN_FilterInit+0x182>)
 8002546:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800254a:	4937      	ldr	r1, [pc, #220]	; (8002628 <CAN_FilterInit+0x182>)
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	4313      	orrs	r3, r2
 8002550:	f8c1 320c 	str.w	r3, [r1, #524]	; 0x20c
    /* 32-bit identifier or First 32-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh) << 16) |
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	881b      	ldrh	r3, [r3, #0]
 8002558:	041b      	lsls	r3, r3, #16
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);
 800255a:	687a      	ldr	r2, [r7, #4]
 800255c:	8852      	ldrh	r2, [r2, #2]
 800255e:	4614      	mov	r4, r2
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
 8002560:	4931      	ldr	r1, [pc, #196]	; (8002628 <CAN_FilterInit+0x182>)
 8002562:	687a      	ldr	r2, [r7, #4]
 8002564:	7a92      	ldrb	r2, [r2, #10]
 8002566:	4610      	mov	r0, r2
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh) << 16) |
 8002568:	ea43 0204 	orr.w	r2, r3, r4
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
 800256c:	f100 0348 	add.w	r3, r0, #72	; 0x48
 8002570:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    /* 32-bit mask or Second 32-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	889b      	ldrh	r3, [r3, #4]
 8002578:	041b      	lsls	r3, r3, #16
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow);
 800257a:	687a      	ldr	r2, [r7, #4]
 800257c:	88d2      	ldrh	r2, [r2, #6]
 800257e:	4614      	mov	r4, r2
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
 8002580:	4929      	ldr	r1, [pc, #164]	; (8002628 <CAN_FilterInit+0x182>)
 8002582:	687a      	ldr	r2, [r7, #4]
 8002584:	7a92      	ldrb	r2, [r2, #10]
 8002586:	4610      	mov	r0, r2
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
 8002588:	ea43 0204 	orr.w	r2, r3, r4
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
 800258c:	f100 0348 	add.w	r3, r0, #72	; 0x48
 8002590:	00db      	lsls	r3, r3, #3
 8002592:	440b      	add	r3, r1
 8002594:	605a      	str	r2, [r3, #4]
  }

  /* Filter Mode */
  if (CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdMask)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	7adb      	ldrb	r3, [r3, #11]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d109      	bne.n	80025b2 <CAN_FilterInit+0x10c>
  {
    /*Id/Mask mode for the filter*/
    CAN1->FM1R &= ~(uint32_t)filter_number_bit_pos;
 800259e:	4b22      	ldr	r3, [pc, #136]	; (8002628 <CAN_FilterInit+0x182>)
 80025a0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	43db      	mvns	r3, r3
 80025a8:	491f      	ldr	r1, [pc, #124]	; (8002628 <CAN_FilterInit+0x182>)
 80025aa:	4013      	ands	r3, r2
 80025ac:	f8c1 3204 	str.w	r3, [r1, #516]	; 0x204
 80025b0:	e007      	b.n	80025c2 <CAN_FilterInit+0x11c>
  }
  else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
  {
    /*Identifier list mode for the filter*/
    CAN1->FM1R |= (uint32_t)filter_number_bit_pos;
 80025b2:	4b1d      	ldr	r3, [pc, #116]	; (8002628 <CAN_FilterInit+0x182>)
 80025b4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80025b8:	491b      	ldr	r1, [pc, #108]	; (8002628 <CAN_FilterInit+0x182>)
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	4313      	orrs	r3, r2
 80025be:	f8c1 3204 	str.w	r3, [r1, #516]	; 0x204
  }

  /* Filter FIFO assignment */
  if (CAN_FilterInitStruct->CAN_FilterFIFOAssignment == CAN_Filter_FIFO0)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	891b      	ldrh	r3, [r3, #8]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d108      	bne.n	80025dc <CAN_FilterInit+0x136>
  {
    /* FIFO 0 assignation for the filter */
    CAN1->FFA1R &= ~(uint32_t)filter_number_bit_pos;
 80025ca:	4b17      	ldr	r3, [pc, #92]	; (8002628 <CAN_FilterInit+0x182>)
 80025cc:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	43db      	mvns	r3, r3
 80025d4:	4914      	ldr	r1, [pc, #80]	; (8002628 <CAN_FilterInit+0x182>)
 80025d6:	4013      	ands	r3, r2
 80025d8:	f8c1 3214 	str.w	r3, [r1, #532]	; 0x214
  }

  if (CAN_FilterInitStruct->CAN_FilterFIFOAssignment == CAN_Filter_FIFO1)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	891b      	ldrh	r3, [r3, #8]
 80025e0:	2b01      	cmp	r3, #1
 80025e2:	d107      	bne.n	80025f4 <CAN_FilterInit+0x14e>
  {
    /* FIFO 1 assignation for the filter */
    CAN1->FFA1R |= (uint32_t)filter_number_bit_pos;
 80025e4:	4b10      	ldr	r3, [pc, #64]	; (8002628 <CAN_FilterInit+0x182>)
 80025e6:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80025ea:	490f      	ldr	r1, [pc, #60]	; (8002628 <CAN_FilterInit+0x182>)
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	4313      	orrs	r3, r2
 80025f0:	f8c1 3214 	str.w	r3, [r1, #532]	; 0x214
  }
  
  /* Filter activation */
  if (CAN_FilterInitStruct->CAN_FilterActivation == ENABLE)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	7b5b      	ldrb	r3, [r3, #13]
 80025f8:	2b01      	cmp	r3, #1
 80025fa:	d107      	bne.n	800260c <CAN_FilterInit+0x166>
  {
    CAN1->FA1R |= filter_number_bit_pos;
 80025fc:	4b0a      	ldr	r3, [pc, #40]	; (8002628 <CAN_FilterInit+0x182>)
 80025fe:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002602:	4909      	ldr	r1, [pc, #36]	; (8002628 <CAN_FilterInit+0x182>)
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	4313      	orrs	r3, r2
 8002608:	f8c1 321c 	str.w	r3, [r1, #540]	; 0x21c
  }

  /* Leave the initialisation mode for the filter */
  CAN1->FMR &= ~FMR_FINIT;
 800260c:	4b06      	ldr	r3, [pc, #24]	; (8002628 <CAN_FilterInit+0x182>)
 800260e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002612:	4a05      	ldr	r2, [pc, #20]	; (8002628 <CAN_FilterInit+0x182>)
 8002614:	f023 0301 	bic.w	r3, r3, #1
 8002618:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
 800261c:	bf00      	nop
 800261e:	3710      	adds	r7, #16
 8002620:	46bd      	mov	sp, r7
 8002622:	bc90      	pop	{r4, r7}
 8002624:	4770      	bx	lr
 8002626:	bf00      	nop
 8002628:	40006400 	.word	0x40006400

0800262c <CAN_StructInit>:
  * @brief  Fills each CAN_InitStruct member with its default value.
  * @param  CAN_InitStruct: pointer to a CAN_InitTypeDef structure which ill be initialized.
  * @retval None
  */
void CAN_StructInit(CAN_InitTypeDef* CAN_InitStruct)
{
 800262c:	b480      	push	{r7}
 800262e:	b083      	sub	sp, #12
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  /* Reset CAN init structure parameters values */
  
  /* Initialize the time triggered communication mode */
  CAN_InitStruct->CAN_TTCM = DISABLE;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2200      	movs	r2, #0
 8002638:	719a      	strb	r2, [r3, #6]
  
  /* Initialize the automatic bus-off management */
  CAN_InitStruct->CAN_ABOM = DISABLE;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2200      	movs	r2, #0
 800263e:	71da      	strb	r2, [r3, #7]
  
  /* Initialize the automatic wake-up mode */
  CAN_InitStruct->CAN_AWUM = DISABLE;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2200      	movs	r2, #0
 8002644:	721a      	strb	r2, [r3, #8]
  
  /* Initialize the no automatic retransmission */
  CAN_InitStruct->CAN_NART = DISABLE;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2200      	movs	r2, #0
 800264a:	725a      	strb	r2, [r3, #9]
  
  /* Initialize the receive FIFO locked mode */
  CAN_InitStruct->CAN_RFLM = DISABLE;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2200      	movs	r2, #0
 8002650:	729a      	strb	r2, [r3, #10]
  
  /* Initialize the transmit FIFO priority */
  CAN_InitStruct->CAN_TXFP = DISABLE;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2200      	movs	r2, #0
 8002656:	72da      	strb	r2, [r3, #11]
  
  /* Initialize the CAN_Mode member */
  CAN_InitStruct->CAN_Mode = CAN_Mode_Normal;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2200      	movs	r2, #0
 800265c:	709a      	strb	r2, [r3, #2]
  
  /* Initialize the CAN_SJW member */
  CAN_InitStruct->CAN_SJW = CAN_SJW_1tq;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2200      	movs	r2, #0
 8002662:	70da      	strb	r2, [r3, #3]
  
  /* Initialize the CAN_BS1 member */
  CAN_InitStruct->CAN_BS1 = CAN_BS1_4tq;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2203      	movs	r2, #3
 8002668:	711a      	strb	r2, [r3, #4]
  
  /* Initialize the CAN_BS2 member */
  CAN_InitStruct->CAN_BS2 = CAN_BS2_3tq;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2202      	movs	r2, #2
 800266e:	715a      	strb	r2, [r3, #5]
  
  /* Initialize the CAN_Prescaler member */
  CAN_InitStruct->CAN_Prescaler = 1;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2201      	movs	r2, #1
 8002674:	801a      	strh	r2, [r3, #0]
}
 8002676:	bf00      	nop
 8002678:	370c      	adds	r7, #12
 800267a:	46bd      	mov	sp, r7
 800267c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002680:	4770      	bx	lr

08002682 <CAN_SlaveStartBank>:
  * @brief  Select the start bank filter for slave CAN.
  * @param  CAN_BankNumber: Select the start slave bank filter from 1..27.
  * @retval None
  */
void CAN_SlaveStartBank(uint8_t CAN_BankNumber) 
{
 8002682:	b480      	push	{r7}
 8002684:	b083      	sub	sp, #12
 8002686:	af00      	add	r7, sp, #0
 8002688:	4603      	mov	r3, r0
 800268a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_CAN_BANKNUMBER(CAN_BankNumber));
  
  /* Enter Initialisation mode for the filter */
  CAN1->FMR |= FMR_FINIT;
 800268c:	4b14      	ldr	r3, [pc, #80]	; (80026e0 <CAN_SlaveStartBank+0x5e>)
 800268e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002692:	4a13      	ldr	r2, [pc, #76]	; (80026e0 <CAN_SlaveStartBank+0x5e>)
 8002694:	f043 0301 	orr.w	r3, r3, #1
 8002698:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
  
  /* Select the start slave bank */
  CAN1->FMR &= (uint32_t)0xFFFFC0F1 ;
 800269c:	4b10      	ldr	r3, [pc, #64]	; (80026e0 <CAN_SlaveStartBank+0x5e>)
 800269e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80026a2:	4a0f      	ldr	r2, [pc, #60]	; (80026e0 <CAN_SlaveStartBank+0x5e>)
 80026a4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80026a8:	f023 030e 	bic.w	r3, r3, #14
 80026ac:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
  CAN1->FMR |= (uint32_t)(CAN_BankNumber)<<8;
 80026b0:	4b0b      	ldr	r3, [pc, #44]	; (80026e0 <CAN_SlaveStartBank+0x5e>)
 80026b2:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80026b6:	79fb      	ldrb	r3, [r7, #7]
 80026b8:	021b      	lsls	r3, r3, #8
 80026ba:	4909      	ldr	r1, [pc, #36]	; (80026e0 <CAN_SlaveStartBank+0x5e>)
 80026bc:	4313      	orrs	r3, r2
 80026be:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200
  
  /* Leave Initialisation mode for the filter */
  CAN1->FMR &= ~FMR_FINIT;
 80026c2:	4b07      	ldr	r3, [pc, #28]	; (80026e0 <CAN_SlaveStartBank+0x5e>)
 80026c4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80026c8:	4a05      	ldr	r2, [pc, #20]	; (80026e0 <CAN_SlaveStartBank+0x5e>)
 80026ca:	f023 0301 	bic.w	r3, r3, #1
 80026ce:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
 80026d2:	bf00      	nop
 80026d4:	370c      	adds	r7, #12
 80026d6:	46bd      	mov	sp, r7
 80026d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026dc:	4770      	bx	lr
 80026de:	bf00      	nop
 80026e0:	40006400 	.word	0x40006400

080026e4 <CAN_DBGFreeze>:
  *          during debug. Reception FIFOs can still be accessed/controlled normally) 
  *          or DISABLE (CAN is working during debug).
  * @retval None
  */
void CAN_DBGFreeze(CAN_TypeDef* CANx, FunctionalState NewState)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b083      	sub	sp, #12
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
 80026ec:	460b      	mov	r3, r1
 80026ee:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80026f0:	78fb      	ldrb	r3, [r7, #3]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d006      	beq.n	8002704 <CAN_DBGFreeze+0x20>
  {
    /* Enable Debug Freeze  */
    CANx->MCR |= MCR_DBF;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable Debug Freeze */
    CANx->MCR &= ~MCR_DBF;
  }
}
 8002702:	e005      	b.n	8002710 <CAN_DBGFreeze+0x2c>
    CANx->MCR &= ~MCR_DBF;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	601a      	str	r2, [r3, #0]
}
 8002710:	bf00      	nop
 8002712:	370c      	adds	r7, #12
 8002714:	46bd      	mov	sp, r7
 8002716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271a:	4770      	bx	lr

0800271c <CAN_TTComModeCmd>:
  *         data bytes of the 8-byte message: TIME[7:0] in data byte 6 and TIME[15:8] 
  *         in data byte 7. 
  * @retval None
  */
void CAN_TTComModeCmd(CAN_TypeDef* CANx, FunctionalState NewState)
{
 800271c:	b480      	push	{r7}
 800271e:	b083      	sub	sp, #12
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
 8002724:	460b      	mov	r3, r1
 8002726:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8002728:	78fb      	ldrb	r3, [r7, #3]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d01e      	beq.n	800276c <CAN_TTComModeCmd+0x50>
  {
    /* Enable the TTCM mode */
    CANx->MCR |= CAN_MCR_TTCM;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	601a      	str	r2, [r3, #0]

    /* Set TGT bits */
    CANx->sTxMailBox[0].TDTR |= ((uint32_t)CAN_TDT0R_TGT);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
 8002740:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    CANx->sTxMailBox[1].TDTR |= ((uint32_t)CAN_TDT1R_TGT);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 8002750:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
    CANx->sTxMailBox[2].TDTR |= ((uint32_t)CAN_TDT2R_TGT);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8002760:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
    /* Reset TGT bits */
    CANx->sTxMailBox[0].TDTR &= ((uint32_t)~CAN_TDT0R_TGT);
    CANx->sTxMailBox[1].TDTR &= ((uint32_t)~CAN_TDT1R_TGT);
    CANx->sTxMailBox[2].TDTR &= ((uint32_t)~CAN_TDT2R_TGT);
  }
}
 800276a:	e01d      	b.n	80027a8 <CAN_TTComModeCmd+0x8c>
    CANx->MCR &= (uint32_t)(~(uint32_t)CAN_MCR_TTCM);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	601a      	str	r2, [r3, #0]
    CANx->sTxMailBox[0].TDTR &= ((uint32_t)~CAN_TDT0R_TGT);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
 800277e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    CANx->sTxMailBox[1].TDTR &= ((uint32_t)~CAN_TDT1R_TGT);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 800278e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
    CANx->sTxMailBox[2].TDTR &= ((uint32_t)~CAN_TDT2R_TGT);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 800279e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
}
 80027a8:	bf00      	nop
 80027aa:	370c      	adds	r7, #12
 80027ac:	46bd      	mov	sp, r7
 80027ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b2:	4770      	bx	lr

080027b4 <CAN_Transmit>:
  * @param  TxMessage: pointer to a structure which contains CAN Id, CAN DLC and CAN data.
  * @retval The number of the mailbox that is used for transmission or
  *         CAN_TxStatus_NoMailBox if there is no empty mailbox.
  */
uint8_t CAN_Transmit(CAN_TypeDef* CANx, CanTxMsg* TxMessage)
{
 80027b4:	b480      	push	{r7}
 80027b6:	b085      	sub	sp, #20
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
 80027bc:	6039      	str	r1, [r7, #0]
  uint8_t transmit_mailbox = 0;
 80027be:	2300      	movs	r3, #0
 80027c0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_CAN_IDTYPE(TxMessage->IDE));
  assert_param(IS_CAN_RTR(TxMessage->RTR));
  assert_param(IS_CAN_DLC(TxMessage->DLC));

  /* Select one empty transmit mailbox */
  if ((CANx->TSR&CAN_TSR_TME0) == CAN_TSR_TME0)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	689b      	ldr	r3, [r3, #8]
 80027c6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80027ca:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80027ce:	d102      	bne.n	80027d6 <CAN_Transmit+0x22>
  {
    transmit_mailbox = 0;
 80027d0:	2300      	movs	r3, #0
 80027d2:	73fb      	strb	r3, [r7, #15]
 80027d4:	e015      	b.n	8002802 <CAN_Transmit+0x4e>
  }
  else if ((CANx->TSR&CAN_TSR_TME1) == CAN_TSR_TME1)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	689b      	ldr	r3, [r3, #8]
 80027da:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80027de:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80027e2:	d102      	bne.n	80027ea <CAN_Transmit+0x36>
  {
    transmit_mailbox = 1;
 80027e4:	2301      	movs	r3, #1
 80027e6:	73fb      	strb	r3, [r7, #15]
 80027e8:	e00b      	b.n	8002802 <CAN_Transmit+0x4e>
  }
  else if ((CANx->TSR&CAN_TSR_TME2) == CAN_TSR_TME2)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	689b      	ldr	r3, [r3, #8]
 80027ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027f2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80027f6:	d102      	bne.n	80027fe <CAN_Transmit+0x4a>
  {
    transmit_mailbox = 2;
 80027f8:	2302      	movs	r3, #2
 80027fa:	73fb      	strb	r3, [r7, #15]
 80027fc:	e001      	b.n	8002802 <CAN_Transmit+0x4e>
  }
  else
  {
    transmit_mailbox = CAN_TxStatus_NoMailBox;
 80027fe:	2304      	movs	r3, #4
 8002800:	73fb      	strb	r3, [r7, #15]
  }

  if (transmit_mailbox != CAN_TxStatus_NoMailBox)
 8002802:	7bfb      	ldrb	r3, [r7, #15]
 8002804:	2b04      	cmp	r3, #4
 8002806:	f000 809f 	beq.w	8002948 <CAN_Transmit+0x194>
  {
    /* Set up the Id */
    CANx->sTxMailBox[transmit_mailbox].TIR &= TMIDxR_TXRQ;
 800280a:	7bfb      	ldrb	r3, [r7, #15]
 800280c:	687a      	ldr	r2, [r7, #4]
 800280e:	3318      	adds	r3, #24
 8002810:	011b      	lsls	r3, r3, #4
 8002812:	4413      	add	r3, r2
 8002814:	681a      	ldr	r2, [r3, #0]
 8002816:	7bfb      	ldrb	r3, [r7, #15]
 8002818:	f002 0201 	and.w	r2, r2, #1
 800281c:	6879      	ldr	r1, [r7, #4]
 800281e:	3318      	adds	r3, #24
 8002820:	011b      	lsls	r3, r3, #4
 8002822:	440b      	add	r3, r1
 8002824:	601a      	str	r2, [r3, #0]
    if (TxMessage->IDE == CAN_Id_Standard)
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	7a1b      	ldrb	r3, [r3, #8]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d113      	bne.n	8002856 <CAN_Transmit+0xa2>
    {
      assert_param(IS_CAN_STDID(TxMessage->StdId));  
      CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->StdId << 21) | \
 800282e:	7bfb      	ldrb	r3, [r7, #15]
 8002830:	687a      	ldr	r2, [r7, #4]
 8002832:	3318      	adds	r3, #24
 8002834:	011b      	lsls	r3, r3, #4
 8002836:	4413      	add	r3, r2
 8002838:	6819      	ldr	r1, [r3, #0]
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	055b      	lsls	r3, r3, #21
                                                  TxMessage->RTR);
 8002840:	683a      	ldr	r2, [r7, #0]
 8002842:	7a52      	ldrb	r2, [r2, #9]
      CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->StdId << 21) | \
 8002844:	431a      	orrs	r2, r3
 8002846:	7bfb      	ldrb	r3, [r7, #15]
 8002848:	430a      	orrs	r2, r1
 800284a:	6879      	ldr	r1, [r7, #4]
 800284c:	3318      	adds	r3, #24
 800284e:	011b      	lsls	r3, r3, #4
 8002850:	440b      	add	r3, r1
 8002852:	601a      	str	r2, [r3, #0]
 8002854:	e015      	b.n	8002882 <CAN_Transmit+0xce>
    }
    else
    {
      assert_param(IS_CAN_EXTID(TxMessage->ExtId));
      CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->ExtId << 3) | \
 8002856:	7bfb      	ldrb	r3, [r7, #15]
 8002858:	687a      	ldr	r2, [r7, #4]
 800285a:	3318      	adds	r3, #24
 800285c:	011b      	lsls	r3, r3, #4
 800285e:	4413      	add	r3, r2
 8002860:	6819      	ldr	r1, [r3, #0]
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	00db      	lsls	r3, r3, #3
                                                  TxMessage->IDE | \
 8002868:	683a      	ldr	r2, [r7, #0]
 800286a:	7a12      	ldrb	r2, [r2, #8]
      CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->ExtId << 3) | \
 800286c:	4313      	orrs	r3, r2
                                                  TxMessage->RTR);
 800286e:	683a      	ldr	r2, [r7, #0]
 8002870:	7a52      	ldrb	r2, [r2, #9]
                                                  TxMessage->IDE | \
 8002872:	431a      	orrs	r2, r3
      CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->ExtId << 3) | \
 8002874:	7bfb      	ldrb	r3, [r7, #15]
 8002876:	430a      	orrs	r2, r1
 8002878:	6879      	ldr	r1, [r7, #4]
 800287a:	3318      	adds	r3, #24
 800287c:	011b      	lsls	r3, r3, #4
 800287e:	440b      	add	r3, r1
 8002880:	601a      	str	r2, [r3, #0]
    }
    
    /* Set up the DLC */
    TxMessage->DLC &= (uint8_t)0x0000000F;
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	7a9b      	ldrb	r3, [r3, #10]
 8002886:	f003 030f 	and.w	r3, r3, #15
 800288a:	b2da      	uxtb	r2, r3
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	729a      	strb	r2, [r3, #10]
    CANx->sTxMailBox[transmit_mailbox].TDTR &= (uint32_t)0xFFFFFFF0;
 8002890:	7bfb      	ldrb	r3, [r7, #15]
 8002892:	687a      	ldr	r2, [r7, #4]
 8002894:	3318      	adds	r3, #24
 8002896:	011b      	lsls	r3, r3, #4
 8002898:	4413      	add	r3, r2
 800289a:	3304      	adds	r3, #4
 800289c:	681a      	ldr	r2, [r3, #0]
 800289e:	7bfb      	ldrb	r3, [r7, #15]
 80028a0:	f022 020f 	bic.w	r2, r2, #15
 80028a4:	6879      	ldr	r1, [r7, #4]
 80028a6:	3318      	adds	r3, #24
 80028a8:	011b      	lsls	r3, r3, #4
 80028aa:	440b      	add	r3, r1
 80028ac:	3304      	adds	r3, #4
 80028ae:	601a      	str	r2, [r3, #0]
    CANx->sTxMailBox[transmit_mailbox].TDTR |= TxMessage->DLC;
 80028b0:	7bfb      	ldrb	r3, [r7, #15]
 80028b2:	687a      	ldr	r2, [r7, #4]
 80028b4:	3318      	adds	r3, #24
 80028b6:	011b      	lsls	r3, r3, #4
 80028b8:	4413      	add	r3, r2
 80028ba:	3304      	adds	r3, #4
 80028bc:	681a      	ldr	r2, [r3, #0]
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	7a9b      	ldrb	r3, [r3, #10]
 80028c2:	4619      	mov	r1, r3
 80028c4:	7bfb      	ldrb	r3, [r7, #15]
 80028c6:	430a      	orrs	r2, r1
 80028c8:	6879      	ldr	r1, [r7, #4]
 80028ca:	3318      	adds	r3, #24
 80028cc:	011b      	lsls	r3, r3, #4
 80028ce:	440b      	add	r3, r1
 80028d0:	3304      	adds	r3, #4
 80028d2:	601a      	str	r2, [r3, #0]

    /* Set up the data field */
    CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	7b9b      	ldrb	r3, [r3, #14]
 80028d8:	061a      	lsls	r2, r3, #24
                                             ((uint32_t)TxMessage->Data[2] << 16) |
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	7b5b      	ldrb	r3, [r3, #13]
 80028de:	041b      	lsls	r3, r3, #16
    CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
 80028e0:	431a      	orrs	r2, r3
                                             ((uint32_t)TxMessage->Data[1] << 8) | 
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	7b1b      	ldrb	r3, [r3, #12]
 80028e6:	021b      	lsls	r3, r3, #8
                                             ((uint32_t)TxMessage->Data[2] << 16) |
 80028e8:	431a      	orrs	r2, r3
                                             ((uint32_t)TxMessage->Data[0]));
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	7adb      	ldrb	r3, [r3, #11]
 80028ee:	4619      	mov	r1, r3
    CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
 80028f0:	7bfb      	ldrb	r3, [r7, #15]
                                             ((uint32_t)TxMessage->Data[1] << 8) | 
 80028f2:	430a      	orrs	r2, r1
    CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
 80028f4:	6879      	ldr	r1, [r7, #4]
 80028f6:	011b      	lsls	r3, r3, #4
 80028f8:	440b      	add	r3, r1
 80028fa:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80028fe:	601a      	str	r2, [r3, #0]
    CANx->sTxMailBox[transmit_mailbox].TDHR = (((uint32_t)TxMessage->Data[7] << 24) | 
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	7c9b      	ldrb	r3, [r3, #18]
 8002904:	061a      	lsls	r2, r3, #24
                                             ((uint32_t)TxMessage->Data[6] << 16) |
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	7c5b      	ldrb	r3, [r3, #17]
 800290a:	041b      	lsls	r3, r3, #16
    CANx->sTxMailBox[transmit_mailbox].TDHR = (((uint32_t)TxMessage->Data[7] << 24) | 
 800290c:	431a      	orrs	r2, r3
                                             ((uint32_t)TxMessage->Data[5] << 8) |
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	7c1b      	ldrb	r3, [r3, #16]
 8002912:	021b      	lsls	r3, r3, #8
                                             ((uint32_t)TxMessage->Data[6] << 16) |
 8002914:	431a      	orrs	r2, r3
                                             ((uint32_t)TxMessage->Data[4]));
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	7bdb      	ldrb	r3, [r3, #15]
 800291a:	4619      	mov	r1, r3
    CANx->sTxMailBox[transmit_mailbox].TDHR = (((uint32_t)TxMessage->Data[7] << 24) | 
 800291c:	7bfb      	ldrb	r3, [r7, #15]
                                             ((uint32_t)TxMessage->Data[5] << 8) |
 800291e:	430a      	orrs	r2, r1
    CANx->sTxMailBox[transmit_mailbox].TDHR = (((uint32_t)TxMessage->Data[7] << 24) | 
 8002920:	6879      	ldr	r1, [r7, #4]
 8002922:	011b      	lsls	r3, r3, #4
 8002924:	440b      	add	r3, r1
 8002926:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800292a:	601a      	str	r2, [r3, #0]
    /* Request transmission */
    CANx->sTxMailBox[transmit_mailbox].TIR |= TMIDxR_TXRQ;
 800292c:	7bfb      	ldrb	r3, [r7, #15]
 800292e:	687a      	ldr	r2, [r7, #4]
 8002930:	3318      	adds	r3, #24
 8002932:	011b      	lsls	r3, r3, #4
 8002934:	4413      	add	r3, r2
 8002936:	681a      	ldr	r2, [r3, #0]
 8002938:	7bfb      	ldrb	r3, [r7, #15]
 800293a:	f042 0201 	orr.w	r2, r2, #1
 800293e:	6879      	ldr	r1, [r7, #4]
 8002940:	3318      	adds	r3, #24
 8002942:	011b      	lsls	r3, r3, #4
 8002944:	440b      	add	r3, r1
 8002946:	601a      	str	r2, [r3, #0]
  }
  return transmit_mailbox;
 8002948:	7bfb      	ldrb	r3, [r7, #15]
}
 800294a:	4618      	mov	r0, r3
 800294c:	3714      	adds	r7, #20
 800294e:	46bd      	mov	sp, r7
 8002950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002954:	4770      	bx	lr

08002956 <CAN_TransmitStatus>:
  * @param  TransmitMailbox: the number of the mailbox that is used for transmission.
  * @retval CAN_TxStatus_Ok if the CAN driver transmits the message, 
  *         CAN_TxStatus_Failed in an other case.
  */
uint8_t CAN_TransmitStatus(CAN_TypeDef* CANx, uint8_t TransmitMailbox)
{
 8002956:	b480      	push	{r7}
 8002958:	b085      	sub	sp, #20
 800295a:	af00      	add	r7, sp, #0
 800295c:	6078      	str	r0, [r7, #4]
 800295e:	460b      	mov	r3, r1
 8002960:	70fb      	strb	r3, [r7, #3]
  uint32_t state = 0;
 8002962:	2300      	movs	r3, #0
 8002964:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_TRANSMITMAILBOX(TransmitMailbox));
 
  switch (TransmitMailbox)
 8002966:	78fb      	ldrb	r3, [r7, #3]
 8002968:	2b01      	cmp	r3, #1
 800296a:	d009      	beq.n	8002980 <CAN_TransmitStatus+0x2a>
 800296c:	2b02      	cmp	r3, #2
 800296e:	d00d      	beq.n	800298c <CAN_TransmitStatus+0x36>
 8002970:	2b00      	cmp	r3, #0
 8002972:	d111      	bne.n	8002998 <CAN_TransmitStatus+0x42>
  {
    case (CAN_TXMAILBOX_0): 
      state =   CANx->TSR &  (CAN_TSR_RQCP0 | CAN_TSR_TXOK0 | CAN_TSR_TME0);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	689a      	ldr	r2, [r3, #8]
 8002978:	4b26      	ldr	r3, [pc, #152]	; (8002a14 <CAN_TransmitStatus+0xbe>)
 800297a:	4013      	ands	r3, r2
 800297c:	60fb      	str	r3, [r7, #12]
      break;
 800297e:	e00e      	b.n	800299e <CAN_TransmitStatus+0x48>
    case (CAN_TXMAILBOX_1): 
      state =   CANx->TSR &  (CAN_TSR_RQCP1 | CAN_TSR_TXOK1 | CAN_TSR_TME1);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	689a      	ldr	r2, [r3, #8]
 8002984:	4b24      	ldr	r3, [pc, #144]	; (8002a18 <CAN_TransmitStatus+0xc2>)
 8002986:	4013      	ands	r3, r2
 8002988:	60fb      	str	r3, [r7, #12]
      break;
 800298a:	e008      	b.n	800299e <CAN_TransmitStatus+0x48>
    case (CAN_TXMAILBOX_2): 
      state =   CANx->TSR &  (CAN_TSR_RQCP2 | CAN_TSR_TXOK2 | CAN_TSR_TME2);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	689a      	ldr	r2, [r3, #8]
 8002990:	4b22      	ldr	r3, [pc, #136]	; (8002a1c <CAN_TransmitStatus+0xc6>)
 8002992:	4013      	ands	r3, r2
 8002994:	60fb      	str	r3, [r7, #12]
      break;
 8002996:	e002      	b.n	800299e <CAN_TransmitStatus+0x48>
    default:
      state = CAN_TxStatus_Failed;
 8002998:	2300      	movs	r3, #0
 800299a:	60fb      	str	r3, [r7, #12]
      break;
 800299c:	bf00      	nop
  }
  switch (state)
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	4a1f      	ldr	r2, [pc, #124]	; (8002a20 <CAN_TransmitStatus+0xca>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d01b      	beq.n	80029de <CAN_TransmitStatus+0x88>
 80029a6:	4a1e      	ldr	r2, [pc, #120]	; (8002a20 <CAN_TransmitStatus+0xca>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d808      	bhi.n	80029be <CAN_TransmitStatus+0x68>
 80029ac:	4a1d      	ldr	r2, [pc, #116]	; (8002a24 <CAN_TransmitStatus+0xce>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d012      	beq.n	80029d8 <CAN_TransmitStatus+0x82>
 80029b2:	4a18      	ldr	r2, [pc, #96]	; (8002a14 <CAN_TransmitStatus+0xbe>)
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d018      	beq.n	80029ea <CAN_TransmitStatus+0x94>
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d00a      	beq.n	80029d2 <CAN_TransmitStatus+0x7c>
 80029bc:	e01e      	b.n	80029fc <CAN_TransmitStatus+0xa6>
 80029be:	4a1a      	ldr	r2, [pc, #104]	; (8002a28 <CAN_TransmitStatus+0xd2>)
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d00f      	beq.n	80029e4 <CAN_TransmitStatus+0x8e>
 80029c4:	4a15      	ldr	r2, [pc, #84]	; (8002a1c <CAN_TransmitStatus+0xc6>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d015      	beq.n	80029f6 <CAN_TransmitStatus+0xa0>
 80029ca:	4a13      	ldr	r2, [pc, #76]	; (8002a18 <CAN_TransmitStatus+0xc2>)
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d00f      	beq.n	80029f0 <CAN_TransmitStatus+0x9a>
 80029d0:	e014      	b.n	80029fc <CAN_TransmitStatus+0xa6>
  {
      /* transmit pending  */
    case (0x0): state = CAN_TxStatus_Pending;
 80029d2:	2302      	movs	r3, #2
 80029d4:	60fb      	str	r3, [r7, #12]
      break;
 80029d6:	e014      	b.n	8002a02 <CAN_TransmitStatus+0xac>
      /* transmit failed  */
     case (CAN_TSR_RQCP0 | CAN_TSR_TME0): state = CAN_TxStatus_Failed;
 80029d8:	2300      	movs	r3, #0
 80029da:	60fb      	str	r3, [r7, #12]
      break;
 80029dc:	e011      	b.n	8002a02 <CAN_TransmitStatus+0xac>
     case (CAN_TSR_RQCP1 | CAN_TSR_TME1): state = CAN_TxStatus_Failed;
 80029de:	2300      	movs	r3, #0
 80029e0:	60fb      	str	r3, [r7, #12]
      break;
 80029e2:	e00e      	b.n	8002a02 <CAN_TransmitStatus+0xac>
     case (CAN_TSR_RQCP2 | CAN_TSR_TME2): state = CAN_TxStatus_Failed;
 80029e4:	2300      	movs	r3, #0
 80029e6:	60fb      	str	r3, [r7, #12]
      break;
 80029e8:	e00b      	b.n	8002a02 <CAN_TransmitStatus+0xac>
      /* transmit succeeded  */
    case (CAN_TSR_RQCP0 | CAN_TSR_TXOK0 | CAN_TSR_TME0):state = CAN_TxStatus_Ok;
 80029ea:	2301      	movs	r3, #1
 80029ec:	60fb      	str	r3, [r7, #12]
      break;
 80029ee:	e008      	b.n	8002a02 <CAN_TransmitStatus+0xac>
    case (CAN_TSR_RQCP1 | CAN_TSR_TXOK1 | CAN_TSR_TME1):state = CAN_TxStatus_Ok;
 80029f0:	2301      	movs	r3, #1
 80029f2:	60fb      	str	r3, [r7, #12]
      break;
 80029f4:	e005      	b.n	8002a02 <CAN_TransmitStatus+0xac>
    case (CAN_TSR_RQCP2 | CAN_TSR_TXOK2 | CAN_TSR_TME2):state = CAN_TxStatus_Ok;
 80029f6:	2301      	movs	r3, #1
 80029f8:	60fb      	str	r3, [r7, #12]
      break;
 80029fa:	e002      	b.n	8002a02 <CAN_TransmitStatus+0xac>
    default: state = CAN_TxStatus_Failed;
 80029fc:	2300      	movs	r3, #0
 80029fe:	60fb      	str	r3, [r7, #12]
      break;
 8002a00:	bf00      	nop
  }
  return (uint8_t) state;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	b2db      	uxtb	r3, r3
}
 8002a06:	4618      	mov	r0, r3
 8002a08:	3714      	adds	r7, #20
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a10:	4770      	bx	lr
 8002a12:	bf00      	nop
 8002a14:	04000003 	.word	0x04000003
 8002a18:	08000300 	.word	0x08000300
 8002a1c:	10030000 	.word	0x10030000
 8002a20:	08000100 	.word	0x08000100
 8002a24:	04000001 	.word	0x04000001
 8002a28:	10010000 	.word	0x10010000

08002a2c <CAN_CancelTransmit>:
  * @param  CANx: where x can be 1 or 2 to select the CAN peripheral.
  * @param  Mailbox: Mailbox number.
  * @retval None
  */
void CAN_CancelTransmit(CAN_TypeDef* CANx, uint8_t Mailbox)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	b083      	sub	sp, #12
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
 8002a34:	460b      	mov	r3, r1
 8002a36:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_TRANSMITMAILBOX(Mailbox));
  /* abort transmission */
  switch (Mailbox)
 8002a38:	78fb      	ldrb	r3, [r7, #3]
 8002a3a:	2b01      	cmp	r3, #1
 8002a3c:	d00b      	beq.n	8002a56 <CAN_CancelTransmit+0x2a>
 8002a3e:	2b02      	cmp	r3, #2
 8002a40:	d010      	beq.n	8002a64 <CAN_CancelTransmit+0x38>
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d000      	beq.n	8002a48 <CAN_CancelTransmit+0x1c>
    case (CAN_TXMAILBOX_1): CANx->TSR |= CAN_TSR_ABRQ1;
      break;
    case (CAN_TXMAILBOX_2): CANx->TSR |= CAN_TSR_ABRQ2;
      break;
    default:
      break;
 8002a46:	e014      	b.n	8002a72 <CAN_CancelTransmit+0x46>
    case (CAN_TXMAILBOX_0): CANx->TSR |= CAN_TSR_ABRQ0;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	689b      	ldr	r3, [r3, #8]
 8002a4c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	609a      	str	r2, [r3, #8]
      break;
 8002a54:	e00d      	b.n	8002a72 <CAN_CancelTransmit+0x46>
    case (CAN_TXMAILBOX_1): CANx->TSR |= CAN_TSR_ABRQ1;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	689b      	ldr	r3, [r3, #8]
 8002a5a:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	609a      	str	r2, [r3, #8]
      break;
 8002a62:	e006      	b.n	8002a72 <CAN_CancelTransmit+0x46>
    case (CAN_TXMAILBOX_2): CANx->TSR |= CAN_TSR_ABRQ2;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	689b      	ldr	r3, [r3, #8]
 8002a68:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	609a      	str	r2, [r3, #8]
      break;
 8002a70:	bf00      	nop
  }
}
 8002a72:	bf00      	nop
 8002a74:	370c      	adds	r7, #12
 8002a76:	46bd      	mov	sp, r7
 8002a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7c:	4770      	bx	lr

08002a7e <CAN_Receive>:
  * @param  RxMessage: pointer to a structure receive frame which contains CAN Id,
  *         CAN DLC, CAN data and FMI number.
  * @retval None
  */
void CAN_Receive(CAN_TypeDef* CANx, uint8_t FIFONumber, CanRxMsg* RxMessage)
{
 8002a7e:	b480      	push	{r7}
 8002a80:	b085      	sub	sp, #20
 8002a82:	af00      	add	r7, sp, #0
 8002a84:	60f8      	str	r0, [r7, #12]
 8002a86:	460b      	mov	r3, r1
 8002a88:	607a      	str	r2, [r7, #4]
 8002a8a:	72fb      	strb	r3, [r7, #11]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_FIFO(FIFONumber));
  /* Get the Id */
  RxMessage->IDE = (uint8_t)0x04 & CANx->sFIFOMailBox[FIFONumber].RIR;
 8002a8c:	7afb      	ldrb	r3, [r7, #11]
 8002a8e:	68fa      	ldr	r2, [r7, #12]
 8002a90:	331b      	adds	r3, #27
 8002a92:	011b      	lsls	r3, r3, #4
 8002a94:	4413      	add	r3, r2
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	b2db      	uxtb	r3, r3
 8002a9a:	f003 0304 	and.w	r3, r3, #4
 8002a9e:	b2da      	uxtb	r2, r3
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	721a      	strb	r2, [r3, #8]
  if (RxMessage->IDE == CAN_Id_Standard)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	7a1b      	ldrb	r3, [r3, #8]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d10b      	bne.n	8002ac4 <CAN_Receive+0x46>
  {
    RxMessage->StdId = (uint32_t)0x000007FF & (CANx->sFIFOMailBox[FIFONumber].RIR >> 21);
 8002aac:	7afb      	ldrb	r3, [r7, #11]
 8002aae:	68fa      	ldr	r2, [r7, #12]
 8002ab0:	331b      	adds	r3, #27
 8002ab2:	011b      	lsls	r3, r3, #4
 8002ab4:	4413      	add	r3, r2
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	0d5b      	lsrs	r3, r3, #21
 8002aba:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	601a      	str	r2, [r3, #0]
 8002ac2:	e00a      	b.n	8002ada <CAN_Receive+0x5c>
  }
  else
  {
    RxMessage->ExtId = (uint32_t)0x1FFFFFFF & (CANx->sFIFOMailBox[FIFONumber].RIR >> 3);
 8002ac4:	7afb      	ldrb	r3, [r7, #11]
 8002ac6:	68fa      	ldr	r2, [r7, #12]
 8002ac8:	331b      	adds	r3, #27
 8002aca:	011b      	lsls	r3, r3, #4
 8002acc:	4413      	add	r3, r2
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	08db      	lsrs	r3, r3, #3
 8002ad2:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	605a      	str	r2, [r3, #4]
  }
  
  RxMessage->RTR = (uint8_t)0x02 & CANx->sFIFOMailBox[FIFONumber].RIR;
 8002ada:	7afb      	ldrb	r3, [r7, #11]
 8002adc:	68fa      	ldr	r2, [r7, #12]
 8002ade:	331b      	adds	r3, #27
 8002ae0:	011b      	lsls	r3, r3, #4
 8002ae2:	4413      	add	r3, r2
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	b2db      	uxtb	r3, r3
 8002ae8:	f003 0302 	and.w	r3, r3, #2
 8002aec:	b2da      	uxtb	r2, r3
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	725a      	strb	r2, [r3, #9]
  /* Get the DLC */
  RxMessage->DLC = (uint8_t)0x0F & CANx->sFIFOMailBox[FIFONumber].RDTR;
 8002af2:	7afb      	ldrb	r3, [r7, #11]
 8002af4:	68fa      	ldr	r2, [r7, #12]
 8002af6:	331b      	adds	r3, #27
 8002af8:	011b      	lsls	r3, r3, #4
 8002afa:	4413      	add	r3, r2
 8002afc:	3304      	adds	r3, #4
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	b2db      	uxtb	r3, r3
 8002b02:	f003 030f 	and.w	r3, r3, #15
 8002b06:	b2da      	uxtb	r2, r3
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	729a      	strb	r2, [r3, #10]
  /* Get the FMI */
  RxMessage->FMI = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDTR >> 8);
 8002b0c:	7afb      	ldrb	r3, [r7, #11]
 8002b0e:	68fa      	ldr	r2, [r7, #12]
 8002b10:	331b      	adds	r3, #27
 8002b12:	011b      	lsls	r3, r3, #4
 8002b14:	4413      	add	r3, r2
 8002b16:	3304      	adds	r3, #4
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	0a1b      	lsrs	r3, r3, #8
 8002b1c:	b2da      	uxtb	r2, r3
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	74da      	strb	r2, [r3, #19]
  /* Get the data field */
  RxMessage->Data[0] = (uint8_t)0xFF & CANx->sFIFOMailBox[FIFONumber].RDLR;
 8002b22:	7afb      	ldrb	r3, [r7, #11]
 8002b24:	68fa      	ldr	r2, [r7, #12]
 8002b26:	011b      	lsls	r3, r3, #4
 8002b28:	4413      	add	r3, r2
 8002b2a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	b2da      	uxtb	r2, r3
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	72da      	strb	r2, [r3, #11]
  RxMessage->Data[1] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 8);
 8002b36:	7afb      	ldrb	r3, [r7, #11]
 8002b38:	68fa      	ldr	r2, [r7, #12]
 8002b3a:	011b      	lsls	r3, r3, #4
 8002b3c:	4413      	add	r3, r2
 8002b3e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	0a1b      	lsrs	r3, r3, #8
 8002b46:	b2da      	uxtb	r2, r3
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	731a      	strb	r2, [r3, #12]
  RxMessage->Data[2] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 16);
 8002b4c:	7afb      	ldrb	r3, [r7, #11]
 8002b4e:	68fa      	ldr	r2, [r7, #12]
 8002b50:	011b      	lsls	r3, r3, #4
 8002b52:	4413      	add	r3, r2
 8002b54:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	0c1b      	lsrs	r3, r3, #16
 8002b5c:	b2da      	uxtb	r2, r3
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	735a      	strb	r2, [r3, #13]
  RxMessage->Data[3] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 24);
 8002b62:	7afb      	ldrb	r3, [r7, #11]
 8002b64:	68fa      	ldr	r2, [r7, #12]
 8002b66:	011b      	lsls	r3, r3, #4
 8002b68:	4413      	add	r3, r2
 8002b6a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	0e1b      	lsrs	r3, r3, #24
 8002b72:	b2da      	uxtb	r2, r3
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	739a      	strb	r2, [r3, #14]
  RxMessage->Data[4] = (uint8_t)0xFF & CANx->sFIFOMailBox[FIFONumber].RDHR;
 8002b78:	7afb      	ldrb	r3, [r7, #11]
 8002b7a:	68fa      	ldr	r2, [r7, #12]
 8002b7c:	011b      	lsls	r3, r3, #4
 8002b7e:	4413      	add	r3, r2
 8002b80:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	b2da      	uxtb	r2, r3
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	73da      	strb	r2, [r3, #15]
  RxMessage->Data[5] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 8);
 8002b8c:	7afb      	ldrb	r3, [r7, #11]
 8002b8e:	68fa      	ldr	r2, [r7, #12]
 8002b90:	011b      	lsls	r3, r3, #4
 8002b92:	4413      	add	r3, r2
 8002b94:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	0a1b      	lsrs	r3, r3, #8
 8002b9c:	b2da      	uxtb	r2, r3
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	741a      	strb	r2, [r3, #16]
  RxMessage->Data[6] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 16);
 8002ba2:	7afb      	ldrb	r3, [r7, #11]
 8002ba4:	68fa      	ldr	r2, [r7, #12]
 8002ba6:	011b      	lsls	r3, r3, #4
 8002ba8:	4413      	add	r3, r2
 8002baa:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	0c1b      	lsrs	r3, r3, #16
 8002bb2:	b2da      	uxtb	r2, r3
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	745a      	strb	r2, [r3, #17]
  RxMessage->Data[7] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 24);
 8002bb8:	7afb      	ldrb	r3, [r7, #11]
 8002bba:	68fa      	ldr	r2, [r7, #12]
 8002bbc:	011b      	lsls	r3, r3, #4
 8002bbe:	4413      	add	r3, r2
 8002bc0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	0e1b      	lsrs	r3, r3, #24
 8002bc8:	b2da      	uxtb	r2, r3
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	749a      	strb	r2, [r3, #18]
  /* Release the FIFO */
  /* Release FIFO0 */
  if (FIFONumber == CAN_FIFO0)
 8002bce:	7afb      	ldrb	r3, [r7, #11]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d106      	bne.n	8002be2 <CAN_Receive+0x164>
  {
    CANx->RF0R |= CAN_RF0R_RFOM0;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	68db      	ldr	r3, [r3, #12]
 8002bd8:	f043 0220 	orr.w	r2, r3, #32
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	60da      	str	r2, [r3, #12]
  /* Release FIFO1 */
  else /* FIFONumber == CAN_FIFO1 */
  {
    CANx->RF1R |= CAN_RF1R_RFOM1;
  }
}
 8002be0:	e005      	b.n	8002bee <CAN_Receive+0x170>
    CANx->RF1R |= CAN_RF1R_RFOM1;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	691b      	ldr	r3, [r3, #16]
 8002be6:	f043 0220 	orr.w	r2, r3, #32
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	611a      	str	r2, [r3, #16]
}
 8002bee:	bf00      	nop
 8002bf0:	3714      	adds	r7, #20
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf8:	4770      	bx	lr

08002bfa <CAN_FIFORelease>:
  * @param  CANx: where x can be 1 or 2 to select the CAN peripheral.
  * @param  FIFONumber: FIFO to release, CAN_FIFO0 or CAN_FIFO1.
  * @retval None
  */
void CAN_FIFORelease(CAN_TypeDef* CANx, uint8_t FIFONumber)
{
 8002bfa:	b480      	push	{r7}
 8002bfc:	b083      	sub	sp, #12
 8002bfe:	af00      	add	r7, sp, #0
 8002c00:	6078      	str	r0, [r7, #4]
 8002c02:	460b      	mov	r3, r1
 8002c04:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_FIFO(FIFONumber));
  /* Release FIFO0 */
  if (FIFONumber == CAN_FIFO0)
 8002c06:	78fb      	ldrb	r3, [r7, #3]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d106      	bne.n	8002c1a <CAN_FIFORelease+0x20>
  {
    CANx->RF0R |= CAN_RF0R_RFOM0;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	68db      	ldr	r3, [r3, #12]
 8002c10:	f043 0220 	orr.w	r2, r3, #32
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	60da      	str	r2, [r3, #12]
  /* Release FIFO1 */
  else /* FIFONumber == CAN_FIFO1 */
  {
    CANx->RF1R |= CAN_RF1R_RFOM1;
  }
}
 8002c18:	e005      	b.n	8002c26 <CAN_FIFORelease+0x2c>
    CANx->RF1R |= CAN_RF1R_RFOM1;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	691b      	ldr	r3, [r3, #16]
 8002c1e:	f043 0220 	orr.w	r2, r3, #32
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	611a      	str	r2, [r3, #16]
}
 8002c26:	bf00      	nop
 8002c28:	370c      	adds	r7, #12
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c30:	4770      	bx	lr

08002c32 <CAN_MessagePending>:
  * @param  CANx: where x can be 1 or 2 to select the CAN peripheral.
  * @param  FIFONumber: Receive FIFO number, CAN_FIFO0 or CAN_FIFO1.
  * @retval NbMessage : which is the number of pending message.
  */
uint8_t CAN_MessagePending(CAN_TypeDef* CANx, uint8_t FIFONumber)
{
 8002c32:	b480      	push	{r7}
 8002c34:	b085      	sub	sp, #20
 8002c36:	af00      	add	r7, sp, #0
 8002c38:	6078      	str	r0, [r7, #4]
 8002c3a:	460b      	mov	r3, r1
 8002c3c:	70fb      	strb	r3, [r7, #3]
  uint8_t message_pending=0;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_FIFO(FIFONumber));
  if (FIFONumber == CAN_FIFO0)
 8002c42:	78fb      	ldrb	r3, [r7, #3]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d106      	bne.n	8002c56 <CAN_MessagePending+0x24>
  {
    message_pending = (uint8_t)(CANx->RF0R&(uint32_t)0x03);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	68db      	ldr	r3, [r3, #12]
 8002c4c:	b2db      	uxtb	r3, r3
 8002c4e:	f003 0303 	and.w	r3, r3, #3
 8002c52:	73fb      	strb	r3, [r7, #15]
 8002c54:	e00b      	b.n	8002c6e <CAN_MessagePending+0x3c>
  }
  else if (FIFONumber == CAN_FIFO1)
 8002c56:	78fb      	ldrb	r3, [r7, #3]
 8002c58:	2b01      	cmp	r3, #1
 8002c5a:	d106      	bne.n	8002c6a <CAN_MessagePending+0x38>
  {
    message_pending = (uint8_t)(CANx->RF1R&(uint32_t)0x03);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	691b      	ldr	r3, [r3, #16]
 8002c60:	b2db      	uxtb	r3, r3
 8002c62:	f003 0303 	and.w	r3, r3, #3
 8002c66:	73fb      	strb	r3, [r7, #15]
 8002c68:	e001      	b.n	8002c6e <CAN_MessagePending+0x3c>
  }
  else
  {
    message_pending = 0;
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	73fb      	strb	r3, [r7, #15]
  }
  return message_pending;
 8002c6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c70:	4618      	mov	r0, r3
 8002c72:	3714      	adds	r7, #20
 8002c74:	46bd      	mov	sp, r7
 8002c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7a:	4770      	bx	lr

08002c7c <CAN_OperatingModeRequest>:
  * @retval status of the requested mode which can be 
  *         - CAN_ModeStatus_Failed:  CAN failed entering the specific mode 
  *         - CAN_ModeStatus_Success: CAN Succeed entering the specific mode 
  */
uint8_t CAN_OperatingModeRequest(CAN_TypeDef* CANx, uint8_t CAN_OperatingMode)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	b085      	sub	sp, #20
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
 8002c84:	460b      	mov	r3, r1
 8002c86:	70fb      	strb	r3, [r7, #3]
  uint8_t status = CAN_ModeStatus_Failed;
 8002c88:	2300      	movs	r3, #0
 8002c8a:	73fb      	strb	r3, [r7, #15]
  
  /* Timeout for INAK or also for SLAK bits*/
  uint32_t timeout = INAK_TIMEOUT; 
 8002c8c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002c90:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_OPERATING_MODE(CAN_OperatingMode));

  if (CAN_OperatingMode == CAN_OperatingMode_Initialization)
 8002c92:	78fb      	ldrb	r3, [r7, #3]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d120      	bne.n	8002cda <CAN_OperatingModeRequest+0x5e>
  {
    /* Request initialisation */
    CANx->MCR = (uint32_t)((CANx->MCR & (uint32_t)(~(uint32_t)CAN_MCR_SLEEP)) | CAN_MCR_INRQ);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f023 0303 	bic.w	r3, r3, #3
 8002ca0:	f043 0201 	orr.w	r2, r3, #1
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	601a      	str	r2, [r3, #0]

    /* Wait the acknowledge */
    while (((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_INAK) && (timeout != 0))
 8002ca8:	e002      	b.n	8002cb0 <CAN_OperatingModeRequest+0x34>
    {
      timeout--;
 8002caa:	68bb      	ldr	r3, [r7, #8]
 8002cac:	3b01      	subs	r3, #1
 8002cae:	60bb      	str	r3, [r7, #8]
    while (((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_INAK) && (timeout != 0))
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	f003 0303 	and.w	r3, r3, #3
 8002cb8:	2b01      	cmp	r3, #1
 8002cba:	d002      	beq.n	8002cc2 <CAN_OperatingModeRequest+0x46>
 8002cbc:	68bb      	ldr	r3, [r7, #8]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d1f3      	bne.n	8002caa <CAN_OperatingModeRequest+0x2e>
    }
    if ((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_INAK)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	f003 0303 	and.w	r3, r3, #3
 8002cca:	2b01      	cmp	r3, #1
 8002ccc:	d002      	beq.n	8002cd4 <CAN_OperatingModeRequest+0x58>
    {
      status = CAN_ModeStatus_Failed;
 8002cce:	2300      	movs	r3, #0
 8002cd0:	73fb      	strb	r3, [r7, #15]
 8002cd2:	e04a      	b.n	8002d6a <CAN_OperatingModeRequest+0xee>
    }
    else
    {
      status = CAN_ModeStatus_Success;
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	73fb      	strb	r3, [r7, #15]
 8002cd8:	e047      	b.n	8002d6a <CAN_OperatingModeRequest+0xee>
    }
  }
  else  if (CAN_OperatingMode == CAN_OperatingMode_Normal)
 8002cda:	78fb      	ldrb	r3, [r7, #3]
 8002cdc:	2b01      	cmp	r3, #1
 8002cde:	d11e      	bne.n	8002d1e <CAN_OperatingModeRequest+0xa2>
  {
    /* Request leave initialisation and sleep mode  and enter Normal mode */
    CANx->MCR &= (uint32_t)(~(CAN_MCR_SLEEP|CAN_MCR_INRQ));
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f023 0203 	bic.w	r2, r3, #3
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	601a      	str	r2, [r3, #0]

    /* Wait the acknowledge */
    while (((CANx->MSR & CAN_MODE_MASK) != 0) && (timeout!=0))
 8002cec:	e002      	b.n	8002cf4 <CAN_OperatingModeRequest+0x78>
    {
      timeout--;
 8002cee:	68bb      	ldr	r3, [r7, #8]
 8002cf0:	3b01      	subs	r3, #1
 8002cf2:	60bb      	str	r3, [r7, #8]
    while (((CANx->MSR & CAN_MODE_MASK) != 0) && (timeout!=0))
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	f003 0303 	and.w	r3, r3, #3
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d002      	beq.n	8002d06 <CAN_OperatingModeRequest+0x8a>
 8002d00:	68bb      	ldr	r3, [r7, #8]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d1f3      	bne.n	8002cee <CAN_OperatingModeRequest+0x72>
    }
    if ((CANx->MSR & CAN_MODE_MASK) != 0)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	f003 0303 	and.w	r3, r3, #3
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d002      	beq.n	8002d18 <CAN_OperatingModeRequest+0x9c>
    {
      status = CAN_ModeStatus_Failed;
 8002d12:	2300      	movs	r3, #0
 8002d14:	73fb      	strb	r3, [r7, #15]
 8002d16:	e028      	b.n	8002d6a <CAN_OperatingModeRequest+0xee>
    }
    else
    {
      status = CAN_ModeStatus_Success;
 8002d18:	2301      	movs	r3, #1
 8002d1a:	73fb      	strb	r3, [r7, #15]
 8002d1c:	e025      	b.n	8002d6a <CAN_OperatingModeRequest+0xee>
    }
  }
  else  if (CAN_OperatingMode == CAN_OperatingMode_Sleep)
 8002d1e:	78fb      	ldrb	r3, [r7, #3]
 8002d20:	2b02      	cmp	r3, #2
 8002d22:	d120      	bne.n	8002d66 <CAN_OperatingModeRequest+0xea>
  {
    /* Request Sleep mode */
    CANx->MCR = (uint32_t)((CANx->MCR & (uint32_t)(~(uint32_t)CAN_MCR_INRQ)) | CAN_MCR_SLEEP);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f023 0303 	bic.w	r3, r3, #3
 8002d2c:	f043 0202 	orr.w	r2, r3, #2
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	601a      	str	r2, [r3, #0]

    /* Wait the acknowledge */
    while (((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_SLAK) && (timeout!=0))
 8002d34:	e002      	b.n	8002d3c <CAN_OperatingModeRequest+0xc0>
    {
      timeout--;
 8002d36:	68bb      	ldr	r3, [r7, #8]
 8002d38:	3b01      	subs	r3, #1
 8002d3a:	60bb      	str	r3, [r7, #8]
    while (((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_SLAK) && (timeout!=0))
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	f003 0303 	and.w	r3, r3, #3
 8002d44:	2b02      	cmp	r3, #2
 8002d46:	d002      	beq.n	8002d4e <CAN_OperatingModeRequest+0xd2>
 8002d48:	68bb      	ldr	r3, [r7, #8]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d1f3      	bne.n	8002d36 <CAN_OperatingModeRequest+0xba>
    }
    if ((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_SLAK)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	f003 0303 	and.w	r3, r3, #3
 8002d56:	2b02      	cmp	r3, #2
 8002d58:	d002      	beq.n	8002d60 <CAN_OperatingModeRequest+0xe4>
    {
      status = CAN_ModeStatus_Failed;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	73fb      	strb	r3, [r7, #15]
 8002d5e:	e004      	b.n	8002d6a <CAN_OperatingModeRequest+0xee>
    }
    else
    {
      status = CAN_ModeStatus_Success;
 8002d60:	2301      	movs	r3, #1
 8002d62:	73fb      	strb	r3, [r7, #15]
 8002d64:	e001      	b.n	8002d6a <CAN_OperatingModeRequest+0xee>
    }
  }
  else
  {
    status = CAN_ModeStatus_Failed;
 8002d66:	2300      	movs	r3, #0
 8002d68:	73fb      	strb	r3, [r7, #15]
  }

  return  (uint8_t) status;
 8002d6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	3714      	adds	r7, #20
 8002d70:	46bd      	mov	sp, r7
 8002d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d76:	4770      	bx	lr

08002d78 <CAN_Sleep>:
  * @brief  Enters the Sleep (low power) mode.
  * @param  CANx: where x can be 1 or 2 to select the CAN peripheral.
  * @retval CAN_Sleep_Ok if sleep entered, CAN_Sleep_Failed otherwise.
  */
uint8_t CAN_Sleep(CAN_TypeDef* CANx)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	b085      	sub	sp, #20
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
  uint8_t sleepstatus = CAN_Sleep_Failed;
 8002d80:	2300      	movs	r3, #0
 8002d82:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
    
  /* Request Sleep mode */
   CANx->MCR = (((CANx->MCR) & (uint32_t)(~(uint32_t)CAN_MCR_INRQ)) | CAN_MCR_SLEEP);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f023 0303 	bic.w	r3, r3, #3
 8002d8c:	f043 0202 	orr.w	r2, r3, #2
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	601a      	str	r2, [r3, #0]
   
  /* Sleep mode status */
  if ((CANx->MSR & (CAN_MSR_SLAK|CAN_MSR_INAK)) == CAN_MSR_SLAK)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	f003 0303 	and.w	r3, r3, #3
 8002d9c:	2b02      	cmp	r3, #2
 8002d9e:	d101      	bne.n	8002da4 <CAN_Sleep+0x2c>
  {
    /* Sleep mode not entered */
    sleepstatus =  CAN_Sleep_Ok;
 8002da0:	2301      	movs	r3, #1
 8002da2:	73fb      	strb	r3, [r7, #15]
  }
  /* return sleep mode status */
   return (uint8_t)sleepstatus;
 8002da4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002da6:	4618      	mov	r0, r3
 8002da8:	3714      	adds	r7, #20
 8002daa:	46bd      	mov	sp, r7
 8002dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db0:	4770      	bx	lr

08002db2 <CAN_WakeUp>:
  * @brief  Wakes up the CAN peripheral from sleep mode .
  * @param  CANx: where x can be 1 or 2 to select the CAN peripheral.
  * @retval CAN_WakeUp_Ok if sleep mode left, CAN_WakeUp_Failed otherwise.
  */
uint8_t CAN_WakeUp(CAN_TypeDef* CANx)
{
 8002db2:	b480      	push	{r7}
 8002db4:	b085      	sub	sp, #20
 8002db6:	af00      	add	r7, sp, #0
 8002db8:	6078      	str	r0, [r7, #4]
  uint32_t wait_slak = SLAK_TIMEOUT;
 8002dba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002dbe:	60fb      	str	r3, [r7, #12]
  uint8_t wakeupstatus = CAN_WakeUp_Failed;
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	72fb      	strb	r3, [r7, #11]
  
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
    
  /* Wake up request */
  CANx->MCR &= ~(uint32_t)CAN_MCR_SLEEP;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f023 0202 	bic.w	r2, r3, #2
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	601a      	str	r2, [r3, #0]
    
  /* Sleep mode status */
  while(((CANx->MSR & CAN_MSR_SLAK) == CAN_MSR_SLAK)&&(wait_slak!=0x00))
 8002dd0:	e002      	b.n	8002dd8 <CAN_WakeUp+0x26>
  {
   wait_slak--;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	3b01      	subs	r3, #1
 8002dd6:	60fb      	str	r3, [r7, #12]
  while(((CANx->MSR & CAN_MSR_SLAK) == CAN_MSR_SLAK)&&(wait_slak!=0x00))
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	f003 0302 	and.w	r3, r3, #2
 8002de0:	2b02      	cmp	r3, #2
 8002de2:	d102      	bne.n	8002dea <CAN_WakeUp+0x38>
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d1f3      	bne.n	8002dd2 <CAN_WakeUp+0x20>
  }
  if((CANx->MSR & CAN_MSR_SLAK) != CAN_MSR_SLAK)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	f003 0302 	and.w	r3, r3, #2
 8002df2:	2b02      	cmp	r3, #2
 8002df4:	d001      	beq.n	8002dfa <CAN_WakeUp+0x48>
  {
   /* wake up done : Sleep mode exited */
    wakeupstatus = CAN_WakeUp_Ok;
 8002df6:	2301      	movs	r3, #1
 8002df8:	72fb      	strb	r3, [r7, #11]
  }
  /* return wakeup status */
  return (uint8_t)wakeupstatus;
 8002dfa:	7afb      	ldrb	r3, [r7, #11]
}
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	3714      	adds	r7, #20
 8002e00:	46bd      	mov	sp, r7
 8002e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e06:	4770      	bx	lr

08002e08 <CAN_GetLastErrorCode>:
  *          - CAN_ERRORCODE_BitDominantErr: Bit Dominant Error
  *          - CAN_ERRORCODE_CRCErr: CRC Error
  *          - CAN_ERRORCODE_SoftwareSetErr: Software Set Error  
  */
uint8_t CAN_GetLastErrorCode(CAN_TypeDef* CANx)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	b085      	sub	sp, #20
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  uint8_t errorcode=0;
 8002e10:	2300      	movs	r3, #0
 8002e12:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  
  /* Get the error code*/
  errorcode = (((uint8_t)CANx->ESR) & (uint8_t)CAN_ESR_LEC);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	699b      	ldr	r3, [r3, #24]
 8002e18:	b2db      	uxtb	r3, r3
 8002e1a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002e1e:	73fb      	strb	r3, [r7, #15]
  
  /* Return the error code*/
  return errorcode;
 8002e20:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e22:	4618      	mov	r0, r3
 8002e24:	3714      	adds	r7, #20
 8002e26:	46bd      	mov	sp, r7
 8002e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2c:	4770      	bx	lr

08002e2e <CAN_GetReceiveErrorCounter>:
  *         error passive state.  
  * @param  CANx: where x can be 1 or 2 to to select the CAN peripheral.  
  * @retval CAN Receive Error Counter. 
  */
uint8_t CAN_GetReceiveErrorCounter(CAN_TypeDef* CANx)
{
 8002e2e:	b480      	push	{r7}
 8002e30:	b085      	sub	sp, #20
 8002e32:	af00      	add	r7, sp, #0
 8002e34:	6078      	str	r0, [r7, #4]
  uint8_t counter=0;
 8002e36:	2300      	movs	r3, #0
 8002e38:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  
  /* Get the Receive Error Counter*/
  counter = (uint8_t)((CANx->ESR & CAN_ESR_REC)>> 24);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	699b      	ldr	r3, [r3, #24]
 8002e3e:	0e1b      	lsrs	r3, r3, #24
 8002e40:	73fb      	strb	r3, [r7, #15]
  
  /* Return the Receive Error Counter*/
  return counter;
 8002e42:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e44:	4618      	mov	r0, r3
 8002e46:	3714      	adds	r7, #20
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4e:	4770      	bx	lr

08002e50 <CAN_GetLSBTransmitErrorCounter>:
  * @brief  Returns the LSB of the 9-bit CANx Transmit Error Counter(TEC).
  * @param  CANx: where x can be 1 or 2 to to select the CAN peripheral.
  * @retval LSB of the 9-bit CAN Transmit Error Counter. 
  */
uint8_t CAN_GetLSBTransmitErrorCounter(CAN_TypeDef* CANx)
{
 8002e50:	b480      	push	{r7}
 8002e52:	b085      	sub	sp, #20
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
  uint8_t counter=0;
 8002e58:	2300      	movs	r3, #0
 8002e5a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  
  /* Get the LSB of the 9-bit CANx Transmit Error Counter(TEC) */
  counter = (uint8_t)((CANx->ESR & CAN_ESR_TEC)>> 16);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	699b      	ldr	r3, [r3, #24]
 8002e60:	0c1b      	lsrs	r3, r3, #16
 8002e62:	73fb      	strb	r3, [r7, #15]
  
  /* Return the LSB of the 9-bit CANx Transmit Error Counter(TEC) */
  return counter;
 8002e64:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e66:	4618      	mov	r0, r3
 8002e68:	3714      	adds	r7, #20
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e70:	4770      	bx	lr

08002e72 <CAN_ITConfig>:
  * @param  NewState: new state of the CAN interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void CAN_ITConfig(CAN_TypeDef* CANx, uint32_t CAN_IT, FunctionalState NewState)
{
 8002e72:	b480      	push	{r7}
 8002e74:	b085      	sub	sp, #20
 8002e76:	af00      	add	r7, sp, #0
 8002e78:	60f8      	str	r0, [r7, #12]
 8002e7a:	60b9      	str	r1, [r7, #8]
 8002e7c:	4613      	mov	r3, r2
 8002e7e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_IT(CAN_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8002e80:	79fb      	ldrb	r3, [r7, #7]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d006      	beq.n	8002e94 <CAN_ITConfig+0x22>
  {
    /* Enable the selected CANx interrupt */
    CANx->IER |= CAN_IT;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	695a      	ldr	r2, [r3, #20]
 8002e8a:	68bb      	ldr	r3, [r7, #8]
 8002e8c:	431a      	orrs	r2, r3
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	615a      	str	r2, [r3, #20]
  else
  {
    /* Disable the selected CANx interrupt */
    CANx->IER &= ~CAN_IT;
  }
}
 8002e92:	e006      	b.n	8002ea2 <CAN_ITConfig+0x30>
    CANx->IER &= ~CAN_IT;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	695a      	ldr	r2, [r3, #20]
 8002e98:	68bb      	ldr	r3, [r7, #8]
 8002e9a:	43db      	mvns	r3, r3
 8002e9c:	401a      	ands	r2, r3
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	615a      	str	r2, [r3, #20]
}
 8002ea2:	bf00      	nop
 8002ea4:	3714      	adds	r7, #20
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eac:	4770      	bx	lr

08002eae <CAN_GetFlagStatus>:
  *            @arg CAN_FLAG_BOF: Bus-Off Flag    
  *            @arg CAN_FLAG_LEC: Last error code Flag      
  * @retval The new state of CAN_FLAG (SET or RESET).
  */
FlagStatus CAN_GetFlagStatus(CAN_TypeDef* CANx, uint32_t CAN_FLAG)
{
 8002eae:	b480      	push	{r7}
 8002eb0:	b085      	sub	sp, #20
 8002eb2:	af00      	add	r7, sp, #0
 8002eb4:	6078      	str	r0, [r7, #4]
 8002eb6:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 8002eb8:	2300      	movs	r3, #0
 8002eba:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_GET_FLAG(CAN_FLAG));
  

  if((CAN_FLAG & CAN_FLAGS_ESR) != (uint32_t)RESET)
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d00d      	beq.n	8002ee2 <CAN_GetFlagStatus+0x34>
  { 
    /* Check the status of the specified CAN flag */
    if ((CANx->ESR & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	699a      	ldr	r2, [r3, #24]
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	4013      	ands	r3, r2
 8002ece:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d002      	beq.n	8002edc <CAN_GetFlagStatus+0x2e>
    { 
      /* CAN_FLAG is set */
      bitstatus = SET;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	73fb      	strb	r3, [r7, #15]
 8002eda:	e048      	b.n	8002f6e <CAN_GetFlagStatus+0xc0>
    }
    else
    { 
      /* CAN_FLAG is reset */
      bitstatus = RESET;
 8002edc:	2300      	movs	r3, #0
 8002ede:	73fb      	strb	r3, [r7, #15]
 8002ee0:	e045      	b.n	8002f6e <CAN_GetFlagStatus+0xc0>
    }
  }
  else if((CAN_FLAG & CAN_FLAGS_MSR) != (uint32_t)RESET)
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d00d      	beq.n	8002f08 <CAN_GetFlagStatus+0x5a>
  { 
    /* Check the status of the specified CAN flag */
    if ((CANx->MSR & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	685a      	ldr	r2, [r3, #4]
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	4013      	ands	r3, r2
 8002ef4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d002      	beq.n	8002f02 <CAN_GetFlagStatus+0x54>
    { 
      /* CAN_FLAG is set */
      bitstatus = SET;
 8002efc:	2301      	movs	r3, #1
 8002efe:	73fb      	strb	r3, [r7, #15]
 8002f00:	e035      	b.n	8002f6e <CAN_GetFlagStatus+0xc0>
    }
    else
    { 
      /* CAN_FLAG is reset */
      bitstatus = RESET;
 8002f02:	2300      	movs	r3, #0
 8002f04:	73fb      	strb	r3, [r7, #15]
 8002f06:	e032      	b.n	8002f6e <CAN_GetFlagStatus+0xc0>
    }
  }
  else if((CAN_FLAG & CAN_FLAGS_TSR) != (uint32_t)RESET)
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d00d      	beq.n	8002f2e <CAN_GetFlagStatus+0x80>
  { 
    /* Check the status of the specified CAN flag */
    if ((CANx->TSR & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	689a      	ldr	r2, [r3, #8]
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	4013      	ands	r3, r2
 8002f1a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d002      	beq.n	8002f28 <CAN_GetFlagStatus+0x7a>
    { 
      /* CAN_FLAG is set */
      bitstatus = SET;
 8002f22:	2301      	movs	r3, #1
 8002f24:	73fb      	strb	r3, [r7, #15]
 8002f26:	e022      	b.n	8002f6e <CAN_GetFlagStatus+0xc0>
    }
    else
    { 
      /* CAN_FLAG is reset */
      bitstatus = RESET;
 8002f28:	2300      	movs	r3, #0
 8002f2a:	73fb      	strb	r3, [r7, #15]
 8002f2c:	e01f      	b.n	8002f6e <CAN_GetFlagStatus+0xc0>
    }
  }
  else if((CAN_FLAG & CAN_FLAGS_RF0R) != (uint32_t)RESET)
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d00d      	beq.n	8002f54 <CAN_GetFlagStatus+0xa6>
  { 
    /* Check the status of the specified CAN flag */
    if ((CANx->RF0R & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	68da      	ldr	r2, [r3, #12]
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	4013      	ands	r3, r2
 8002f40:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d002      	beq.n	8002f4e <CAN_GetFlagStatus+0xa0>
    { 
      /* CAN_FLAG is set */
      bitstatus = SET;
 8002f48:	2301      	movs	r3, #1
 8002f4a:	73fb      	strb	r3, [r7, #15]
 8002f4c:	e00f      	b.n	8002f6e <CAN_GetFlagStatus+0xc0>
    }
    else
    { 
      /* CAN_FLAG is reset */
      bitstatus = RESET;
 8002f4e:	2300      	movs	r3, #0
 8002f50:	73fb      	strb	r3, [r7, #15]
 8002f52:	e00c      	b.n	8002f6e <CAN_GetFlagStatus+0xc0>
    }
  }
  else /* If(CAN_FLAG & CAN_FLAGS_RF1R != (uint32_t)RESET) */
  { 
    /* Check the status of the specified CAN flag */
    if ((uint32_t)(CANx->RF1R & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	691a      	ldr	r2, [r3, #16]
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	4013      	ands	r3, r2
 8002f5c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d002      	beq.n	8002f6a <CAN_GetFlagStatus+0xbc>
    { 
      /* CAN_FLAG is set */
      bitstatus = SET;
 8002f64:	2301      	movs	r3, #1
 8002f66:	73fb      	strb	r3, [r7, #15]
 8002f68:	e001      	b.n	8002f6e <CAN_GetFlagStatus+0xc0>
    }
    else
    { 
      /* CAN_FLAG is reset */
      bitstatus = RESET;
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	73fb      	strb	r3, [r7, #15]
    }
  }
  /* Return the CAN_FLAG status */
  return  bitstatus;
 8002f6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f70:	4618      	mov	r0, r3
 8002f72:	3714      	adds	r7, #20
 8002f74:	46bd      	mov	sp, r7
 8002f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7a:	4770      	bx	lr

08002f7c <CAN_ClearFlag>:
  *            @arg CAN_FLAG_SLAK: Sleep acknowledge Flag    
  *            @arg CAN_FLAG_LEC: Last error code Flag        
  * @retval None
  */
void CAN_ClearFlag(CAN_TypeDef* CANx, uint32_t CAN_FLAG)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	b085      	sub	sp, #20
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
 8002f84:	6039      	str	r1, [r7, #0]
  uint32_t flagtmp=0;
 8002f86:	2300      	movs	r3, #0
 8002f88:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_CLEAR_FLAG(CAN_FLAG));
  
  if (CAN_FLAG == CAN_FLAG_LEC) /* ESR register */
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	4a17      	ldr	r2, [pc, #92]	; (8002fec <CAN_ClearFlag+0x70>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d103      	bne.n	8002f9a <CAN_ClearFlag+0x1e>
  {
    /* Clear the selected CAN flags */
    CANx->ESR = (uint32_t)RESET;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2200      	movs	r2, #0
 8002f96:	619a      	str	r2, [r3, #24]
    {
      /* Operating mode Flags */
      CANx->MSR = (uint32_t)(flagtmp);
    }
  }
}
 8002f98:	e021      	b.n	8002fde <CAN_ClearFlag+0x62>
    flagtmp = CAN_FLAG & 0x000FFFFF;
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002fa0:	60fb      	str	r3, [r7, #12]
    if ((CAN_FLAG & CAN_FLAGS_RF0R)!=(uint32_t)RESET)
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d003      	beq.n	8002fb4 <CAN_ClearFlag+0x38>
      CANx->RF0R = (uint32_t)(flagtmp);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	68fa      	ldr	r2, [r7, #12]
 8002fb0:	60da      	str	r2, [r3, #12]
}
 8002fb2:	e014      	b.n	8002fde <CAN_ClearFlag+0x62>
    else if ((CAN_FLAG & CAN_FLAGS_RF1R)!=(uint32_t)RESET)
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d003      	beq.n	8002fc6 <CAN_ClearFlag+0x4a>
      CANx->RF1R = (uint32_t)(flagtmp);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	68fa      	ldr	r2, [r7, #12]
 8002fc2:	611a      	str	r2, [r3, #16]
}
 8002fc4:	e00b      	b.n	8002fde <CAN_ClearFlag+0x62>
    else if ((CAN_FLAG & CAN_FLAGS_TSR)!=(uint32_t)RESET)
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d003      	beq.n	8002fd8 <CAN_ClearFlag+0x5c>
      CANx->TSR = (uint32_t)(flagtmp);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	68fa      	ldr	r2, [r7, #12]
 8002fd4:	609a      	str	r2, [r3, #8]
}
 8002fd6:	e002      	b.n	8002fde <CAN_ClearFlag+0x62>
      CANx->MSR = (uint32_t)(flagtmp);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	68fa      	ldr	r2, [r7, #12]
 8002fdc:	605a      	str	r2, [r3, #4]
}
 8002fde:	bf00      	nop
 8002fe0:	3714      	adds	r7, #20
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe8:	4770      	bx	lr
 8002fea:	bf00      	nop
 8002fec:	30f00070 	.word	0x30f00070

08002ff0 <CAN_GetITStatus>:
  *            @arg CAN_IT_LEC: Last error code Interrupt
  *            @arg CAN_IT_ERR: Error Interrupt
  * @retval The current state of CAN_IT (SET or RESET).
  */
ITStatus CAN_GetITStatus(CAN_TypeDef* CANx, uint32_t CAN_IT)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b084      	sub	sp, #16
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
 8002ff8:	6039      	str	r1, [r7, #0]
  ITStatus itstatus = RESET;
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_IT(CAN_IT));
  
  /* check the interrupt enable bit */
 if((CANx->IER & CAN_IT) != RESET)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	695a      	ldr	r2, [r3, #20]
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	4013      	ands	r3, r2
 8003006:	2b00      	cmp	r3, #0
 8003008:	f000 80b2 	beq.w	8003170 <CAN_GetITStatus+0x180>
 {
   /* in case the Interrupt is enabled, .... */
    switch (CAN_IT)
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	2b40      	cmp	r3, #64	; 0x40
 8003010:	d062      	beq.n	80030d8 <CAN_GetITStatus+0xe8>
 8003012:	2b40      	cmp	r3, #64	; 0x40
 8003014:	d80f      	bhi.n	8003036 <CAN_GetITStatus+0x46>
 8003016:	2b04      	cmp	r3, #4
 8003018:	d03a      	beq.n	8003090 <CAN_GetITStatus+0xa0>
 800301a:	2b04      	cmp	r3, #4
 800301c:	d804      	bhi.n	8003028 <CAN_GetITStatus+0x38>
 800301e:	2b01      	cmp	r3, #1
 8003020:	d024      	beq.n	800306c <CAN_GetITStatus+0x7c>
 8003022:	2b02      	cmp	r3, #2
 8003024:	d02b      	beq.n	800307e <CAN_GetITStatus+0x8e>
 8003026:	e09f      	b.n	8003168 <CAN_GetITStatus+0x178>
 8003028:	2b10      	cmp	r3, #16
 800302a:	d043      	beq.n	80030b4 <CAN_GetITStatus+0xc4>
 800302c:	2b20      	cmp	r3, #32
 800302e:	d04a      	beq.n	80030c6 <CAN_GetITStatus+0xd6>
 8003030:	2b08      	cmp	r3, #8
 8003032:	d036      	beq.n	80030a2 <CAN_GetITStatus+0xb2>
 8003034:	e098      	b.n	8003168 <CAN_GetITStatus+0x178>
 8003036:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800303a:	f000 8083 	beq.w	8003144 <CAN_GetITStatus+0x154>
 800303e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003042:	d809      	bhi.n	8003058 <CAN_GetITStatus+0x68>
 8003044:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003048:	d06a      	beq.n	8003120 <CAN_GetITStatus+0x130>
 800304a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800304e:	d070      	beq.n	8003132 <CAN_GetITStatus+0x142>
 8003050:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003054:	d05b      	beq.n	800310e <CAN_GetITStatus+0x11e>
 8003056:	e087      	b.n	8003168 <CAN_GetITStatus+0x178>
 8003058:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800305c:	d045      	beq.n	80030ea <CAN_GetITStatus+0xfa>
 800305e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003062:	d04b      	beq.n	80030fc <CAN_GetITStatus+0x10c>
 8003064:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003068:	d075      	beq.n	8003156 <CAN_GetITStatus+0x166>
 800306a:	e07d      	b.n	8003168 <CAN_GetITStatus+0x178>
    {
      case CAN_IT_TME:
        /* Check CAN_TSR_RQCPx bits */
        itstatus = CheckITStatus(CANx->TSR, CAN_TSR_RQCP0|CAN_TSR_RQCP1|CAN_TSR_RQCP2);  
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	689b      	ldr	r3, [r3, #8]
 8003070:	4943      	ldr	r1, [pc, #268]	; (8003180 <CAN_GetITStatus+0x190>)
 8003072:	4618      	mov	r0, r3
 8003074:	f000 f8f6 	bl	8003264 <CheckITStatus>
 8003078:	4603      	mov	r3, r0
 800307a:	73fb      	strb	r3, [r7, #15]
        break;
 800307c:	e07a      	b.n	8003174 <CAN_GetITStatus+0x184>
      case CAN_IT_FMP0:
        /* Check CAN_RF0R_FMP0 bit */
        itstatus = CheckITStatus(CANx->RF0R, CAN_RF0R_FMP0);  
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	68db      	ldr	r3, [r3, #12]
 8003082:	2103      	movs	r1, #3
 8003084:	4618      	mov	r0, r3
 8003086:	f000 f8ed 	bl	8003264 <CheckITStatus>
 800308a:	4603      	mov	r3, r0
 800308c:	73fb      	strb	r3, [r7, #15]
        break;
 800308e:	e071      	b.n	8003174 <CAN_GetITStatus+0x184>
      case CAN_IT_FF0:
        /* Check CAN_RF0R_FULL0 bit */
        itstatus = CheckITStatus(CANx->RF0R, CAN_RF0R_FULL0);  
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	68db      	ldr	r3, [r3, #12]
 8003094:	2108      	movs	r1, #8
 8003096:	4618      	mov	r0, r3
 8003098:	f000 f8e4 	bl	8003264 <CheckITStatus>
 800309c:	4603      	mov	r3, r0
 800309e:	73fb      	strb	r3, [r7, #15]
        break;
 80030a0:	e068      	b.n	8003174 <CAN_GetITStatus+0x184>
      case CAN_IT_FOV0:
        /* Check CAN_RF0R_FOVR0 bit */
        itstatus = CheckITStatus(CANx->RF0R, CAN_RF0R_FOVR0);  
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	68db      	ldr	r3, [r3, #12]
 80030a6:	2110      	movs	r1, #16
 80030a8:	4618      	mov	r0, r3
 80030aa:	f000 f8db 	bl	8003264 <CheckITStatus>
 80030ae:	4603      	mov	r3, r0
 80030b0:	73fb      	strb	r3, [r7, #15]
        break;
 80030b2:	e05f      	b.n	8003174 <CAN_GetITStatus+0x184>
      case CAN_IT_FMP1:
        /* Check CAN_RF1R_FMP1 bit */
        itstatus = CheckITStatus(CANx->RF1R, CAN_RF1R_FMP1);  
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	691b      	ldr	r3, [r3, #16]
 80030b8:	2103      	movs	r1, #3
 80030ba:	4618      	mov	r0, r3
 80030bc:	f000 f8d2 	bl	8003264 <CheckITStatus>
 80030c0:	4603      	mov	r3, r0
 80030c2:	73fb      	strb	r3, [r7, #15]
        break;
 80030c4:	e056      	b.n	8003174 <CAN_GetITStatus+0x184>
      case CAN_IT_FF1:
        /* Check CAN_RF1R_FULL1 bit */
        itstatus = CheckITStatus(CANx->RF1R, CAN_RF1R_FULL1);  
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	691b      	ldr	r3, [r3, #16]
 80030ca:	2108      	movs	r1, #8
 80030cc:	4618      	mov	r0, r3
 80030ce:	f000 f8c9 	bl	8003264 <CheckITStatus>
 80030d2:	4603      	mov	r3, r0
 80030d4:	73fb      	strb	r3, [r7, #15]
        break;
 80030d6:	e04d      	b.n	8003174 <CAN_GetITStatus+0x184>
      case CAN_IT_FOV1:
        /* Check CAN_RF1R_FOVR1 bit */
        itstatus = CheckITStatus(CANx->RF1R, CAN_RF1R_FOVR1);  
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	691b      	ldr	r3, [r3, #16]
 80030dc:	2110      	movs	r1, #16
 80030de:	4618      	mov	r0, r3
 80030e0:	f000 f8c0 	bl	8003264 <CheckITStatus>
 80030e4:	4603      	mov	r3, r0
 80030e6:	73fb      	strb	r3, [r7, #15]
        break;
 80030e8:	e044      	b.n	8003174 <CAN_GetITStatus+0x184>
      case CAN_IT_WKU:
        /* Check CAN_MSR_WKUI bit */
        itstatus = CheckITStatus(CANx->MSR, CAN_MSR_WKUI);  
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	2108      	movs	r1, #8
 80030f0:	4618      	mov	r0, r3
 80030f2:	f000 f8b7 	bl	8003264 <CheckITStatus>
 80030f6:	4603      	mov	r3, r0
 80030f8:	73fb      	strb	r3, [r7, #15]
        break;
 80030fa:	e03b      	b.n	8003174 <CAN_GetITStatus+0x184>
      case CAN_IT_SLK:
        /* Check CAN_MSR_SLAKI bit */
        itstatus = CheckITStatus(CANx->MSR, CAN_MSR_SLAKI);  
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	2110      	movs	r1, #16
 8003102:	4618      	mov	r0, r3
 8003104:	f000 f8ae 	bl	8003264 <CheckITStatus>
 8003108:	4603      	mov	r3, r0
 800310a:	73fb      	strb	r3, [r7, #15]
        break;
 800310c:	e032      	b.n	8003174 <CAN_GetITStatus+0x184>
      case CAN_IT_EWG:
        /* Check CAN_ESR_EWGF bit */
        itstatus = CheckITStatus(CANx->ESR, CAN_ESR_EWGF);  
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	699b      	ldr	r3, [r3, #24]
 8003112:	2101      	movs	r1, #1
 8003114:	4618      	mov	r0, r3
 8003116:	f000 f8a5 	bl	8003264 <CheckITStatus>
 800311a:	4603      	mov	r3, r0
 800311c:	73fb      	strb	r3, [r7, #15]
        break;
 800311e:	e029      	b.n	8003174 <CAN_GetITStatus+0x184>
      case CAN_IT_EPV:
        /* Check CAN_ESR_EPVF bit */
        itstatus = CheckITStatus(CANx->ESR, CAN_ESR_EPVF);  
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	699b      	ldr	r3, [r3, #24]
 8003124:	2102      	movs	r1, #2
 8003126:	4618      	mov	r0, r3
 8003128:	f000 f89c 	bl	8003264 <CheckITStatus>
 800312c:	4603      	mov	r3, r0
 800312e:	73fb      	strb	r3, [r7, #15]
        break;
 8003130:	e020      	b.n	8003174 <CAN_GetITStatus+0x184>
      case CAN_IT_BOF:
        /* Check CAN_ESR_BOFF bit */
        itstatus = CheckITStatus(CANx->ESR, CAN_ESR_BOFF);  
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	699b      	ldr	r3, [r3, #24]
 8003136:	2104      	movs	r1, #4
 8003138:	4618      	mov	r0, r3
 800313a:	f000 f893 	bl	8003264 <CheckITStatus>
 800313e:	4603      	mov	r3, r0
 8003140:	73fb      	strb	r3, [r7, #15]
        break;
 8003142:	e017      	b.n	8003174 <CAN_GetITStatus+0x184>
      case CAN_IT_LEC:
        /* Check CAN_ESR_LEC bit */
        itstatus = CheckITStatus(CANx->ESR, CAN_ESR_LEC);  
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	699b      	ldr	r3, [r3, #24]
 8003148:	2170      	movs	r1, #112	; 0x70
 800314a:	4618      	mov	r0, r3
 800314c:	f000 f88a 	bl	8003264 <CheckITStatus>
 8003150:	4603      	mov	r3, r0
 8003152:	73fb      	strb	r3, [r7, #15]
        break;
 8003154:	e00e      	b.n	8003174 <CAN_GetITStatus+0x184>
      case CAN_IT_ERR:
        /* Check CAN_MSR_ERRI bit */ 
        itstatus = CheckITStatus(CANx->MSR, CAN_MSR_ERRI); 
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	2104      	movs	r1, #4
 800315c:	4618      	mov	r0, r3
 800315e:	f000 f881 	bl	8003264 <CheckITStatus>
 8003162:	4603      	mov	r3, r0
 8003164:	73fb      	strb	r3, [r7, #15]
        break;
 8003166:	e005      	b.n	8003174 <CAN_GetITStatus+0x184>
      default:
        /* in case of error, return RESET */
        itstatus = RESET;
 8003168:	2300      	movs	r3, #0
 800316a:	73fb      	strb	r3, [r7, #15]
        break;
 800316c:	bf00      	nop
 800316e:	e001      	b.n	8003174 <CAN_GetITStatus+0x184>
    }
  }
  else
  {
   /* in case the Interrupt is not enabled, return RESET */
    itstatus  = RESET;
 8003170:	2300      	movs	r3, #0
 8003172:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return the CAN_IT status */
  return  itstatus;
 8003174:	7bfb      	ldrb	r3, [r7, #15]
}
 8003176:	4618      	mov	r0, r3
 8003178:	3710      	adds	r7, #16
 800317a:	46bd      	mov	sp, r7
 800317c:	bd80      	pop	{r7, pc}
 800317e:	bf00      	nop
 8003180:	00010101 	.word	0x00010101

08003184 <CAN_ClearITPendingBit>:
  *            @arg CAN_IT_LEC: Last error code Interrupt
  *            @arg CAN_IT_ERR: Error Interrupt 
  * @retval None
  */
void CAN_ClearITPendingBit(CAN_TypeDef* CANx, uint32_t CAN_IT)
{
 8003184:	b480      	push	{r7}
 8003186:	b083      	sub	sp, #12
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
 800318c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_CLEAR_IT(CAN_IT));

  switch (CAN_IT)
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003194:	d043      	beq.n	800321e <CAN_ClearITPendingBit+0x9a>
 8003196:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800319a:	d80d      	bhi.n	80031b8 <CAN_ClearITPendingBit+0x34>
 800319c:	2b08      	cmp	r3, #8
 800319e:	d02a      	beq.n	80031f6 <CAN_ClearITPendingBit+0x72>
 80031a0:	2b08      	cmp	r3, #8
 80031a2:	d804      	bhi.n	80031ae <CAN_ClearITPendingBit+0x2a>
 80031a4:	2b01      	cmp	r3, #1
 80031a6:	d01e      	beq.n	80031e6 <CAN_ClearITPendingBit+0x62>
 80031a8:	2b04      	cmp	r3, #4
 80031aa:	d020      	beq.n	80031ee <CAN_ClearITPendingBit+0x6a>
      /* Clear CAN_MSR_ERRI (rc_w1) */
      CANx->MSR = CAN_MSR_ERRI; 
       /* @note BOFF, EPVF and EWGF Flags are cleared by hardware depending on the CAN Bus status*/
       break;
    default:
       break;
 80031ac:	e051      	b.n	8003252 <CAN_ClearITPendingBit+0xce>
  switch (CAN_IT)
 80031ae:	2b20      	cmp	r3, #32
 80031b0:	d025      	beq.n	80031fe <CAN_ClearITPendingBit+0x7a>
 80031b2:	2b40      	cmp	r3, #64	; 0x40
 80031b4:	d027      	beq.n	8003206 <CAN_ClearITPendingBit+0x82>
       break;
 80031b6:	e04c      	b.n	8003252 <CAN_ClearITPendingBit+0xce>
  switch (CAN_IT)
 80031b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80031bc:	d03b      	beq.n	8003236 <CAN_ClearITPendingBit+0xb2>
 80031be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80031c2:	d806      	bhi.n	80031d2 <CAN_ClearITPendingBit+0x4e>
 80031c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80031c8:	d02d      	beq.n	8003226 <CAN_ClearITPendingBit+0xa2>
 80031ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031ce:	d02e      	beq.n	800322e <CAN_ClearITPendingBit+0xaa>
       break;
 80031d0:	e03f      	b.n	8003252 <CAN_ClearITPendingBit+0xce>
  switch (CAN_IT)
 80031d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031d6:	d01a      	beq.n	800320e <CAN_ClearITPendingBit+0x8a>
 80031d8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80031dc:	d01b      	beq.n	8003216 <CAN_ClearITPendingBit+0x92>
 80031de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80031e2:	d02f      	beq.n	8003244 <CAN_ClearITPendingBit+0xc0>
       break;
 80031e4:	e035      	b.n	8003252 <CAN_ClearITPendingBit+0xce>
      CANx->TSR = CAN_TSR_RQCP0|CAN_TSR_RQCP1|CAN_TSR_RQCP2;  
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	4a1d      	ldr	r2, [pc, #116]	; (8003260 <CAN_ClearITPendingBit+0xdc>)
 80031ea:	609a      	str	r2, [r3, #8]
      break;
 80031ec:	e031      	b.n	8003252 <CAN_ClearITPendingBit+0xce>
      CANx->RF0R = CAN_RF0R_FULL0; 
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2208      	movs	r2, #8
 80031f2:	60da      	str	r2, [r3, #12]
      break;
 80031f4:	e02d      	b.n	8003252 <CAN_ClearITPendingBit+0xce>
      CANx->RF0R = CAN_RF0R_FOVR0; 
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2210      	movs	r2, #16
 80031fa:	60da      	str	r2, [r3, #12]
      break;
 80031fc:	e029      	b.n	8003252 <CAN_ClearITPendingBit+0xce>
      CANx->RF1R = CAN_RF1R_FULL1;  
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2208      	movs	r2, #8
 8003202:	611a      	str	r2, [r3, #16]
      break;
 8003204:	e025      	b.n	8003252 <CAN_ClearITPendingBit+0xce>
      CANx->RF1R = CAN_RF1R_FOVR1; 
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2210      	movs	r2, #16
 800320a:	611a      	str	r2, [r3, #16]
      break;
 800320c:	e021      	b.n	8003252 <CAN_ClearITPendingBit+0xce>
      CANx->MSR = CAN_MSR_WKUI;  
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2208      	movs	r2, #8
 8003212:	605a      	str	r2, [r3, #4]
      break;
 8003214:	e01d      	b.n	8003252 <CAN_ClearITPendingBit+0xce>
      CANx->MSR = CAN_MSR_SLAKI;   
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2210      	movs	r2, #16
 800321a:	605a      	str	r2, [r3, #4]
      break;
 800321c:	e019      	b.n	8003252 <CAN_ClearITPendingBit+0xce>
      CANx->MSR = CAN_MSR_ERRI;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2204      	movs	r2, #4
 8003222:	605a      	str	r2, [r3, #4]
      break;
 8003224:	e015      	b.n	8003252 <CAN_ClearITPendingBit+0xce>
      CANx->MSR = CAN_MSR_ERRI; 
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2204      	movs	r2, #4
 800322a:	605a      	str	r2, [r3, #4]
      break;
 800322c:	e011      	b.n	8003252 <CAN_ClearITPendingBit+0xce>
      CANx->MSR = CAN_MSR_ERRI; 
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2204      	movs	r2, #4
 8003232:	605a      	str	r2, [r3, #4]
       break;
 8003234:	e00d      	b.n	8003252 <CAN_ClearITPendingBit+0xce>
      CANx->ESR = RESET; 
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2200      	movs	r2, #0
 800323a:	619a      	str	r2, [r3, #24]
      CANx->MSR = CAN_MSR_ERRI; 
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2204      	movs	r2, #4
 8003240:	605a      	str	r2, [r3, #4]
      break;
 8003242:	e006      	b.n	8003252 <CAN_ClearITPendingBit+0xce>
      CANx->ESR = RESET; 
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2200      	movs	r2, #0
 8003248:	619a      	str	r2, [r3, #24]
      CANx->MSR = CAN_MSR_ERRI; 
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2204      	movs	r2, #4
 800324e:	605a      	str	r2, [r3, #4]
       break;
 8003250:	bf00      	nop
   }
}
 8003252:	bf00      	nop
 8003254:	370c      	adds	r7, #12
 8003256:	46bd      	mov	sp, r7
 8003258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325c:	4770      	bx	lr
 800325e:	bf00      	nop
 8003260:	00010101 	.word	0x00010101

08003264 <CheckITStatus>:
  * @param  CAN_Reg: specifies the CAN interrupt register to check.
  * @param  It_Bit: specifies the interrupt source bit to check.
  * @retval The new state of the CAN Interrupt (SET or RESET).
  */
static ITStatus CheckITStatus(uint32_t CAN_Reg, uint32_t It_Bit)
{
 8003264:	b480      	push	{r7}
 8003266:	b085      	sub	sp, #20
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
 800326c:	6039      	str	r1, [r7, #0]
  ITStatus pendingbitstatus = RESET;
 800326e:	2300      	movs	r3, #0
 8003270:	73fb      	strb	r3, [r7, #15]
  
  if ((CAN_Reg & It_Bit) != (uint32_t)RESET)
 8003272:	687a      	ldr	r2, [r7, #4]
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	4013      	ands	r3, r2
 8003278:	2b00      	cmp	r3, #0
 800327a:	d002      	beq.n	8003282 <CheckITStatus+0x1e>
  {
    /* CAN_IT is set */
    pendingbitstatus = SET;
 800327c:	2301      	movs	r3, #1
 800327e:	73fb      	strb	r3, [r7, #15]
 8003280:	e001      	b.n	8003286 <CheckITStatus+0x22>
  }
  else
  {
    /* CAN_IT is reset */
    pendingbitstatus = RESET;
 8003282:	2300      	movs	r3, #0
 8003284:	73fb      	strb	r3, [r7, #15]
  }
  return pendingbitstatus;
 8003286:	7bfb      	ldrb	r3, [r7, #15]
}
 8003288:	4618      	mov	r0, r3
 800328a:	3714      	adds	r7, #20
 800328c:	46bd      	mov	sp, r7
 800328e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003292:	4770      	bx	lr

08003294 <DAC_DeInit>:
  * @brief  Deinitializes the DAC peripheral registers to their default reset values.
  * @param  None
  * @retval None
  */
void DAC_DeInit(void)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	af00      	add	r7, sp, #0
  /* Enable DAC reset state */
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_DAC, ENABLE);
 8003298:	2101      	movs	r1, #1
 800329a:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 800329e:	f005 fc3f 	bl	8008b20 <RCC_APB1PeriphResetCmd>
  /* Release DAC from reset state */
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_DAC, DISABLE);
 80032a2:	2100      	movs	r1, #0
 80032a4:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 80032a8:	f005 fc3a 	bl	8008b20 <RCC_APB1PeriphResetCmd>
}
 80032ac:	bf00      	nop
 80032ae:	bd80      	pop	{r7, pc}

080032b0 <DAC_Init>:
  * @param  DAC_InitStruct: pointer to a DAC_InitTypeDef structure that contains
  *         the configuration information for the  specified DAC channel.
  * @retval None
  */
void DAC_Init(uint32_t DAC_Channel, DAC_InitTypeDef* DAC_InitStruct)
{
 80032b0:	b480      	push	{r7}
 80032b2:	b085      	sub	sp, #20
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
 80032b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
 80032ba:	2300      	movs	r3, #0
 80032bc:	60fb      	str	r3, [r7, #12]
 80032be:	2300      	movs	r3, #0
 80032c0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_DAC_LFSR_UNMASK_TRIANGLE_AMPLITUDE(DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(DAC_InitStruct->DAC_OutputBuffer));

/*---------------------------- DAC CR Configuration --------------------------*/
  /* Get the DAC CR value */
  tmpreg1 = DAC->CR;
 80032c2:	4b14      	ldr	r3, [pc, #80]	; (8003314 <DAC_Init+0x64>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	60fb      	str	r3, [r7, #12]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(CR_CLEAR_MASK << DAC_Channel);
 80032c8:	f640 72fe 	movw	r2, #4094	; 0xffe
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	fa02 f303 	lsl.w	r3, r2, r3
 80032d2:	43db      	mvns	r3, r3
 80032d4:	68fa      	ldr	r2, [r7, #12]
 80032d6:	4013      	ands	r3, r2
 80032d8:	60fb      	str	r3, [r7, #12]
     wave generation, mask/amplitude for wave generation */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set WAVEx bits according to DAC_WaveGeneration value */
  /* Set MAMPx bits according to DAC_LFSRUnmask_TriangleAmplitude value */ 
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (DAC_InitStruct->DAC_Trigger | DAC_InitStruct->DAC_WaveGeneration |
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	681a      	ldr	r2, [r3, #0]
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	431a      	orrs	r2, r3
             DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude | \
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	689b      	ldr	r3, [r3, #8]
  tmpreg2 = (DAC_InitStruct->DAC_Trigger | DAC_InitStruct->DAC_WaveGeneration |
 80032e8:	431a      	orrs	r2, r3
             DAC_InitStruct->DAC_OutputBuffer);
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	68db      	ldr	r3, [r3, #12]
  tmpreg2 = (DAC_InitStruct->DAC_Trigger | DAC_InitStruct->DAC_WaveGeneration |
 80032ee:	4313      	orrs	r3, r2
 80032f0:	60bb      	str	r3, [r7, #8]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << DAC_Channel;
 80032f2:	68ba      	ldr	r2, [r7, #8]
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	fa02 f303 	lsl.w	r3, r2, r3
 80032fa:	68fa      	ldr	r2, [r7, #12]
 80032fc:	4313      	orrs	r3, r2
 80032fe:	60fb      	str	r3, [r7, #12]
  /* Write to DAC CR */
  DAC->CR = tmpreg1;
 8003300:	4a04      	ldr	r2, [pc, #16]	; (8003314 <DAC_Init+0x64>)
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	6013      	str	r3, [r2, #0]
}
 8003306:	bf00      	nop
 8003308:	3714      	adds	r7, #20
 800330a:	46bd      	mov	sp, r7
 800330c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003310:	4770      	bx	lr
 8003312:	bf00      	nop
 8003314:	40007400 	.word	0x40007400

08003318 <DAC_StructInit>:
  * @param  DAC_InitStruct: pointer to a DAC_InitTypeDef structure which will 
  *         be initialized.
  * @retval None
  */
void DAC_StructInit(DAC_InitTypeDef* DAC_InitStruct)
{
 8003318:	b480      	push	{r7}
 800331a:	b083      	sub	sp, #12
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
/*--------------- Reset DAC init structure parameters values -----------------*/
  /* Initialize the DAC_Trigger member */
  DAC_InitStruct->DAC_Trigger = DAC_Trigger_None;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2200      	movs	r2, #0
 8003324:	601a      	str	r2, [r3, #0]
  /* Initialize the DAC_WaveGeneration member */
  DAC_InitStruct->DAC_WaveGeneration = DAC_WaveGeneration_None;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2200      	movs	r2, #0
 800332a:	605a      	str	r2, [r3, #4]
  /* Initialize the DAC_LFSRUnmask_TriangleAmplitude member */
  DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude = DAC_LFSRUnmask_Bit0;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2200      	movs	r2, #0
 8003330:	609a      	str	r2, [r3, #8]
  /* Initialize the DAC_OutputBuffer member */
  DAC_InitStruct->DAC_OutputBuffer = DAC_OutputBuffer_Enable;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2200      	movs	r2, #0
 8003336:	60da      	str	r2, [r3, #12]
}
 8003338:	bf00      	nop
 800333a:	370c      	adds	r7, #12
 800333c:	46bd      	mov	sp, r7
 800333e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003342:	4770      	bx	lr

08003344 <DAC_Cmd>:
  *          This parameter can be: ENABLE or DISABLE.
  * @note   When the DAC channel is enabled the trigger source can no more be modified.
  * @retval None
  */
void DAC_Cmd(uint32_t DAC_Channel, FunctionalState NewState)
{
 8003344:	b480      	push	{r7}
 8003346:	b083      	sub	sp, #12
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
 800334c:	460b      	mov	r3, r1
 800334e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8003350:	78fb      	ldrb	r3, [r7, #3]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d009      	beq.n	800336a <DAC_Cmd+0x26>
  {
    /* Enable the selected DAC channel */
    DAC->CR |= (DAC_CR_EN1 << DAC_Channel);
 8003356:	4b0d      	ldr	r3, [pc, #52]	; (800338c <DAC_Cmd+0x48>)
 8003358:	681a      	ldr	r2, [r3, #0]
 800335a:	2101      	movs	r1, #1
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	fa01 f303 	lsl.w	r3, r1, r3
 8003362:	490a      	ldr	r1, [pc, #40]	; (800338c <DAC_Cmd+0x48>)
 8003364:	4313      	orrs	r3, r2
 8003366:	600b      	str	r3, [r1, #0]
  else
  {
    /* Disable the selected DAC channel */
    DAC->CR &= (~(DAC_CR_EN1 << DAC_Channel));
  }
}
 8003368:	e009      	b.n	800337e <DAC_Cmd+0x3a>
    DAC->CR &= (~(DAC_CR_EN1 << DAC_Channel));
 800336a:	4b08      	ldr	r3, [pc, #32]	; (800338c <DAC_Cmd+0x48>)
 800336c:	681a      	ldr	r2, [r3, #0]
 800336e:	2101      	movs	r1, #1
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	fa01 f303 	lsl.w	r3, r1, r3
 8003376:	43db      	mvns	r3, r3
 8003378:	4904      	ldr	r1, [pc, #16]	; (800338c <DAC_Cmd+0x48>)
 800337a:	4013      	ands	r3, r2
 800337c:	600b      	str	r3, [r1, #0]
}
 800337e:	bf00      	nop
 8003380:	370c      	adds	r7, #12
 8003382:	46bd      	mov	sp, r7
 8003384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003388:	4770      	bx	lr
 800338a:	bf00      	nop
 800338c:	40007400 	.word	0x40007400

08003390 <DAC_SoftwareTriggerCmd>:
  * @param  NewState: new state of the selected DAC channel software trigger.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DAC_SoftwareTriggerCmd(uint32_t DAC_Channel, FunctionalState NewState)
{
 8003390:	b480      	push	{r7}
 8003392:	b083      	sub	sp, #12
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
 8003398:	460b      	mov	r3, r1
 800339a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800339c:	78fb      	ldrb	r3, [r7, #3]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d00a      	beq.n	80033b8 <DAC_SoftwareTriggerCmd+0x28>
  {
    /* Enable software trigger for the selected DAC channel */
    DAC->SWTRIGR |= (uint32_t)DAC_SWTRIGR_SWTRIG1 << (DAC_Channel >> 4);
 80033a2:	4b0e      	ldr	r3, [pc, #56]	; (80033dc <DAC_SoftwareTriggerCmd+0x4c>)
 80033a4:	685a      	ldr	r2, [r3, #4]
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	091b      	lsrs	r3, r3, #4
 80033aa:	2101      	movs	r1, #1
 80033ac:	fa01 f303 	lsl.w	r3, r1, r3
 80033b0:	490a      	ldr	r1, [pc, #40]	; (80033dc <DAC_SoftwareTriggerCmd+0x4c>)
 80033b2:	4313      	orrs	r3, r2
 80033b4:	604b      	str	r3, [r1, #4]
  else
  {
    /* Disable software trigger for the selected DAC channel */
    DAC->SWTRIGR &= ~((uint32_t)DAC_SWTRIGR_SWTRIG1 << (DAC_Channel >> 4));
  }
}
 80033b6:	e00a      	b.n	80033ce <DAC_SoftwareTriggerCmd+0x3e>
    DAC->SWTRIGR &= ~((uint32_t)DAC_SWTRIGR_SWTRIG1 << (DAC_Channel >> 4));
 80033b8:	4b08      	ldr	r3, [pc, #32]	; (80033dc <DAC_SoftwareTriggerCmd+0x4c>)
 80033ba:	685a      	ldr	r2, [r3, #4]
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	091b      	lsrs	r3, r3, #4
 80033c0:	2101      	movs	r1, #1
 80033c2:	fa01 f303 	lsl.w	r3, r1, r3
 80033c6:	43db      	mvns	r3, r3
 80033c8:	4904      	ldr	r1, [pc, #16]	; (80033dc <DAC_SoftwareTriggerCmd+0x4c>)
 80033ca:	4013      	ands	r3, r2
 80033cc:	604b      	str	r3, [r1, #4]
}
 80033ce:	bf00      	nop
 80033d0:	370c      	adds	r7, #12
 80033d2:	46bd      	mov	sp, r7
 80033d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d8:	4770      	bx	lr
 80033da:	bf00      	nop
 80033dc:	40007400 	.word	0x40007400

080033e0 <DAC_DualSoftwareTriggerCmd>:
  * @param  NewState: new state of the DAC channels software triggers.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DAC_DualSoftwareTriggerCmd(FunctionalState NewState)
{
 80033e0:	b480      	push	{r7}
 80033e2:	b083      	sub	sp, #12
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	4603      	mov	r3, r0
 80033e8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80033ea:	79fb      	ldrb	r3, [r7, #7]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d006      	beq.n	80033fe <DAC_DualSoftwareTriggerCmd+0x1e>
  {
    /* Enable software trigger for both DAC channels */
    DAC->SWTRIGR |= DUAL_SWTRIG_SET;
 80033f0:	4b09      	ldr	r3, [pc, #36]	; (8003418 <DAC_DualSoftwareTriggerCmd+0x38>)
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	4a08      	ldr	r2, [pc, #32]	; (8003418 <DAC_DualSoftwareTriggerCmd+0x38>)
 80033f6:	f043 0303 	orr.w	r3, r3, #3
 80033fa:	6053      	str	r3, [r2, #4]
  else
  {
    /* Disable software trigger for both DAC channels */
    DAC->SWTRIGR &= DUAL_SWTRIG_RESET;
  }
}
 80033fc:	e005      	b.n	800340a <DAC_DualSoftwareTriggerCmd+0x2a>
    DAC->SWTRIGR &= DUAL_SWTRIG_RESET;
 80033fe:	4b06      	ldr	r3, [pc, #24]	; (8003418 <DAC_DualSoftwareTriggerCmd+0x38>)
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	4a05      	ldr	r2, [pc, #20]	; (8003418 <DAC_DualSoftwareTriggerCmd+0x38>)
 8003404:	f023 0303 	bic.w	r3, r3, #3
 8003408:	6053      	str	r3, [r2, #4]
}
 800340a:	bf00      	nop
 800340c:	370c      	adds	r7, #12
 800340e:	46bd      	mov	sp, r7
 8003410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003414:	4770      	bx	lr
 8003416:	bf00      	nop
 8003418:	40007400 	.word	0x40007400

0800341c <DAC_WaveGenerationCmd>:
  * @param  NewState: new state of the selected DAC channel wave generation.
  *          This parameter can be: ENABLE or DISABLE.  
  * @retval None
  */
void DAC_WaveGenerationCmd(uint32_t DAC_Channel, uint32_t DAC_Wave, FunctionalState NewState)
{
 800341c:	b480      	push	{r7}
 800341e:	b085      	sub	sp, #20
 8003420:	af00      	add	r7, sp, #0
 8003422:	60f8      	str	r0, [r7, #12]
 8003424:	60b9      	str	r1, [r7, #8]
 8003426:	4613      	mov	r3, r2
 8003428:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_DAC_WAVE(DAC_Wave)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800342a:	79fb      	ldrb	r3, [r7, #7]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d009      	beq.n	8003444 <DAC_WaveGenerationCmd+0x28>
  {
    /* Enable the selected wave generation for the selected DAC channel */
    DAC->CR |= DAC_Wave << DAC_Channel;
 8003430:	4b0c      	ldr	r3, [pc, #48]	; (8003464 <DAC_WaveGenerationCmd+0x48>)
 8003432:	681a      	ldr	r2, [r3, #0]
 8003434:	68b9      	ldr	r1, [r7, #8]
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	fa01 f303 	lsl.w	r3, r1, r3
 800343c:	4909      	ldr	r1, [pc, #36]	; (8003464 <DAC_WaveGenerationCmd+0x48>)
 800343e:	4313      	orrs	r3, r2
 8003440:	600b      	str	r3, [r1, #0]
  else
  {
    /* Disable the selected wave generation for the selected DAC channel */
    DAC->CR &= ~(DAC_Wave << DAC_Channel);
  }
}
 8003442:	e009      	b.n	8003458 <DAC_WaveGenerationCmd+0x3c>
    DAC->CR &= ~(DAC_Wave << DAC_Channel);
 8003444:	4b07      	ldr	r3, [pc, #28]	; (8003464 <DAC_WaveGenerationCmd+0x48>)
 8003446:	681a      	ldr	r2, [r3, #0]
 8003448:	68b9      	ldr	r1, [r7, #8]
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	fa01 f303 	lsl.w	r3, r1, r3
 8003450:	43db      	mvns	r3, r3
 8003452:	4904      	ldr	r1, [pc, #16]	; (8003464 <DAC_WaveGenerationCmd+0x48>)
 8003454:	4013      	ands	r3, r2
 8003456:	600b      	str	r3, [r1, #0]
}
 8003458:	bf00      	nop
 800345a:	3714      	adds	r7, #20
 800345c:	46bd      	mov	sp, r7
 800345e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003462:	4770      	bx	lr
 8003464:	40007400 	.word	0x40007400

08003468 <DAC_SetChannel1Data>:
  *            @arg DAC_Align_12b_R: 12bit right data alignment selected
  * @param  Data: Data to be loaded in the selected data holding register.
  * @retval None
  */
void DAC_SetChannel1Data(uint32_t DAC_Align, uint16_t Data)
{  
 8003468:	b480      	push	{r7}
 800346a:	b085      	sub	sp, #20
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
 8003470:	460b      	mov	r3, r1
 8003472:	807b      	strh	r3, [r7, #2]
  __IO uint32_t tmp = 0;
 8003474:	2300      	movs	r3, #0
 8003476:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_DAC_ALIGN(DAC_Align));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)DAC_BASE; 
 8003478:	4b08      	ldr	r3, [pc, #32]	; (800349c <DAC_SetChannel1Data+0x34>)
 800347a:	60fb      	str	r3, [r7, #12]
  tmp += DHR12R1_OFFSET + DAC_Align;
 800347c:	68fa      	ldr	r2, [r7, #12]
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	4413      	add	r3, r2
 8003482:	3308      	adds	r3, #8
 8003484:	60fb      	str	r3, [r7, #12]

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	461a      	mov	r2, r3
 800348a:	887b      	ldrh	r3, [r7, #2]
 800348c:	6013      	str	r3, [r2, #0]
}
 800348e:	bf00      	nop
 8003490:	3714      	adds	r7, #20
 8003492:	46bd      	mov	sp, r7
 8003494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003498:	4770      	bx	lr
 800349a:	bf00      	nop
 800349c:	40007400 	.word	0x40007400

080034a0 <DAC_SetChannel2Data>:
  *            @arg DAC_Align_12b_R: 12bit right data alignment selected
  * @param  Data: Data to be loaded in the selected data holding register.
  * @retval None
  */
void DAC_SetChannel2Data(uint32_t DAC_Align, uint16_t Data)
{
 80034a0:	b480      	push	{r7}
 80034a2:	b085      	sub	sp, #20
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
 80034a8:	460b      	mov	r3, r1
 80034aa:	807b      	strh	r3, [r7, #2]
  __IO uint32_t tmp = 0;
 80034ac:	2300      	movs	r3, #0
 80034ae:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_DAC_ALIGN(DAC_Align));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)DAC_BASE;
 80034b0:	4b08      	ldr	r3, [pc, #32]	; (80034d4 <DAC_SetChannel2Data+0x34>)
 80034b2:	60fb      	str	r3, [r7, #12]
  tmp += DHR12R2_OFFSET + DAC_Align;
 80034b4:	68fa      	ldr	r2, [r7, #12]
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	4413      	add	r3, r2
 80034ba:	3314      	adds	r3, #20
 80034bc:	60fb      	str	r3, [r7, #12]

  /* Set the DAC channel2 selected data holding register */
  *(__IO uint32_t *)tmp = Data;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	461a      	mov	r2, r3
 80034c2:	887b      	ldrh	r3, [r7, #2]
 80034c4:	6013      	str	r3, [r2, #0]
}
 80034c6:	bf00      	nop
 80034c8:	3714      	adds	r7, #20
 80034ca:	46bd      	mov	sp, r7
 80034cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d0:	4770      	bx	lr
 80034d2:	bf00      	nop
 80034d4:	40007400 	.word	0x40007400

080034d8 <DAC_SetDualChannelData>:
  * @note   In dual mode, a unique register access is required to write in both
  *          DAC channels at the same time.
  * @retval None
  */
void DAC_SetDualChannelData(uint32_t DAC_Align, uint16_t Data2, uint16_t Data1)
{
 80034d8:	b480      	push	{r7}
 80034da:	b085      	sub	sp, #20
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
 80034e0:	460b      	mov	r3, r1
 80034e2:	807b      	strh	r3, [r7, #2]
 80034e4:	4613      	mov	r3, r2
 80034e6:	803b      	strh	r3, [r7, #0]
  uint32_t data = 0, tmp = 0;
 80034e8:	2300      	movs	r3, #0
 80034ea:	60fb      	str	r3, [r7, #12]
 80034ec:	2300      	movs	r3, #0
 80034ee:	60bb      	str	r3, [r7, #8]
  assert_param(IS_DAC_ALIGN(DAC_Align));
  assert_param(IS_DAC_DATA(Data1));
  assert_param(IS_DAC_DATA(Data2));
  
  /* Calculate and set dual DAC data holding register value */
  if (DAC_Align == DAC_Align_8b_R)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2b08      	cmp	r3, #8
 80034f4:	d105      	bne.n	8003502 <DAC_SetDualChannelData+0x2a>
  {
    data = ((uint32_t)Data2 << 8) | Data1; 
 80034f6:	887b      	ldrh	r3, [r7, #2]
 80034f8:	021a      	lsls	r2, r3, #8
 80034fa:	883b      	ldrh	r3, [r7, #0]
 80034fc:	4313      	orrs	r3, r2
 80034fe:	60fb      	str	r3, [r7, #12]
 8003500:	e004      	b.n	800350c <DAC_SetDualChannelData+0x34>
  }
  else
  {
    data = ((uint32_t)Data2 << 16) | Data1;
 8003502:	887b      	ldrh	r3, [r7, #2]
 8003504:	041a      	lsls	r2, r3, #16
 8003506:	883b      	ldrh	r3, [r7, #0]
 8003508:	4313      	orrs	r3, r2
 800350a:	60fb      	str	r3, [r7, #12]
  }
  
  tmp = (uint32_t)DAC_BASE;
 800350c:	4b07      	ldr	r3, [pc, #28]	; (800352c <DAC_SetDualChannelData+0x54>)
 800350e:	60bb      	str	r3, [r7, #8]
  tmp += DHR12RD_OFFSET + DAC_Align;
 8003510:	687a      	ldr	r2, [r7, #4]
 8003512:	68bb      	ldr	r3, [r7, #8]
 8003514:	4413      	add	r3, r2
 8003516:	3320      	adds	r3, #32
 8003518:	60bb      	str	r3, [r7, #8]

  /* Set the dual DAC selected data holding register */
  *(__IO uint32_t *)tmp = data;
 800351a:	68bb      	ldr	r3, [r7, #8]
 800351c:	68fa      	ldr	r2, [r7, #12]
 800351e:	601a      	str	r2, [r3, #0]
}
 8003520:	bf00      	nop
 8003522:	3714      	adds	r7, #20
 8003524:	46bd      	mov	sp, r7
 8003526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352a:	4770      	bx	lr
 800352c:	40007400 	.word	0x40007400

08003530 <DAC_GetDataOutputValue>:
  *            @arg DAC_Channel_1: DAC Channel1 selected
  *            @arg DAC_Channel_2: DAC Channel2 selected
  * @retval The selected DAC channel data output value.
  */
uint16_t DAC_GetDataOutputValue(uint32_t DAC_Channel)
{
 8003530:	b480      	push	{r7}
 8003532:	b085      	sub	sp, #20
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmp = 0;
 8003538:	2300      	movs	r3, #0
 800353a:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  
  tmp = (uint32_t) DAC_BASE ;
 800353c:	4b08      	ldr	r3, [pc, #32]	; (8003560 <DAC_GetDataOutputValue+0x30>)
 800353e:	60fb      	str	r3, [r7, #12]
  tmp += DOR_OFFSET + ((uint32_t)DAC_Channel >> 2);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	089a      	lsrs	r2, r3, #2
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	4413      	add	r3, r2
 8003548:	332c      	adds	r3, #44	; 0x2c
 800354a:	60fb      	str	r3, [r7, #12]
  
  /* Returns the DAC channel data output register value */
  return (uint16_t) (*(__IO uint32_t*) tmp);
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	b29b      	uxth	r3, r3
}
 8003552:	4618      	mov	r0, r3
 8003554:	3714      	adds	r7, #20
 8003556:	46bd      	mov	sp, r7
 8003558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355c:	4770      	bx	lr
 800355e:	bf00      	nop
 8003560:	40007400 	.word	0x40007400

08003564 <DAC_DMACmd>:
  * @note   The DAC channel2 is mapped on DMA1 Stream 6 channel7 which must be
  *          already configured.    
  * @retval None
  */
void DAC_DMACmd(uint32_t DAC_Channel, FunctionalState NewState)
{
 8003564:	b480      	push	{r7}
 8003566:	b083      	sub	sp, #12
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
 800356c:	460b      	mov	r3, r1
 800356e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8003570:	78fb      	ldrb	r3, [r7, #3]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d00a      	beq.n	800358c <DAC_DMACmd+0x28>
  {
    /* Enable the selected DAC channel DMA request */
    DAC->CR |= (DAC_CR_DMAEN1 << DAC_Channel);
 8003576:	4b0e      	ldr	r3, [pc, #56]	; (80035b0 <DAC_DMACmd+0x4c>)
 8003578:	681a      	ldr	r2, [r3, #0]
 800357a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	fa01 f303 	lsl.w	r3, r1, r3
 8003584:	490a      	ldr	r1, [pc, #40]	; (80035b0 <DAC_DMACmd+0x4c>)
 8003586:	4313      	orrs	r3, r2
 8003588:	600b      	str	r3, [r1, #0]
  else
  {
    /* Disable the selected DAC channel DMA request */
    DAC->CR &= (~(DAC_CR_DMAEN1 << DAC_Channel));
  }
}
 800358a:	e00a      	b.n	80035a2 <DAC_DMACmd+0x3e>
    DAC->CR &= (~(DAC_CR_DMAEN1 << DAC_Channel));
 800358c:	4b08      	ldr	r3, [pc, #32]	; (80035b0 <DAC_DMACmd+0x4c>)
 800358e:	681a      	ldr	r2, [r3, #0]
 8003590:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	fa01 f303 	lsl.w	r3, r1, r3
 800359a:	43db      	mvns	r3, r3
 800359c:	4904      	ldr	r1, [pc, #16]	; (80035b0 <DAC_DMACmd+0x4c>)
 800359e:	4013      	ands	r3, r2
 80035a0:	600b      	str	r3, [r1, #0]
}
 80035a2:	bf00      	nop
 80035a4:	370c      	adds	r7, #12
 80035a6:	46bd      	mov	sp, r7
 80035a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ac:	4770      	bx	lr
 80035ae:	bf00      	nop
 80035b0:	40007400 	.word	0x40007400

080035b4 <DAC_ITConfig>:
  * @param  NewState: new state of the specified DAC interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */ 
void DAC_ITConfig(uint32_t DAC_Channel, uint32_t DAC_IT, FunctionalState NewState)  
{
 80035b4:	b480      	push	{r7}
 80035b6:	b085      	sub	sp, #20
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	60f8      	str	r0, [r7, #12]
 80035bc:	60b9      	str	r1, [r7, #8]
 80035be:	4613      	mov	r3, r2
 80035c0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_DAC_IT(DAC_IT)); 

  if (NewState != DISABLE)
 80035c2:	79fb      	ldrb	r3, [r7, #7]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d009      	beq.n	80035dc <DAC_ITConfig+0x28>
  {
    /* Enable the selected DAC interrupts */
    DAC->CR |=  (DAC_IT << DAC_Channel);
 80035c8:	4b0c      	ldr	r3, [pc, #48]	; (80035fc <DAC_ITConfig+0x48>)
 80035ca:	681a      	ldr	r2, [r3, #0]
 80035cc:	68b9      	ldr	r1, [r7, #8]
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	fa01 f303 	lsl.w	r3, r1, r3
 80035d4:	4909      	ldr	r1, [pc, #36]	; (80035fc <DAC_ITConfig+0x48>)
 80035d6:	4313      	orrs	r3, r2
 80035d8:	600b      	str	r3, [r1, #0]
  else
  {
    /* Disable the selected DAC interrupts */
    DAC->CR &= (~(uint32_t)(DAC_IT << DAC_Channel));
  }
}
 80035da:	e009      	b.n	80035f0 <DAC_ITConfig+0x3c>
    DAC->CR &= (~(uint32_t)(DAC_IT << DAC_Channel));
 80035dc:	4b07      	ldr	r3, [pc, #28]	; (80035fc <DAC_ITConfig+0x48>)
 80035de:	681a      	ldr	r2, [r3, #0]
 80035e0:	68b9      	ldr	r1, [r7, #8]
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	fa01 f303 	lsl.w	r3, r1, r3
 80035e8:	43db      	mvns	r3, r3
 80035ea:	4904      	ldr	r1, [pc, #16]	; (80035fc <DAC_ITConfig+0x48>)
 80035ec:	4013      	ands	r3, r2
 80035ee:	600b      	str	r3, [r1, #0]
}
 80035f0:	bf00      	nop
 80035f2:	3714      	adds	r7, #20
 80035f4:	46bd      	mov	sp, r7
 80035f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fa:	4770      	bx	lr
 80035fc:	40007400 	.word	0x40007400

08003600 <DAC_GetFlagStatus>:
  * @note   The DMA underrun occurs when a second external trigger arrives before the 
  *         acknowledgement for the first external trigger is received (first request).
  * @retval The new state of DAC_FLAG (SET or RESET).
  */
FlagStatus DAC_GetFlagStatus(uint32_t DAC_Channel, uint32_t DAC_FLAG)
{
 8003600:	b480      	push	{r7}
 8003602:	b085      	sub	sp, #20
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
 8003608:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 800360a:	2300      	movs	r3, #0
 800360c:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_DAC_FLAG(DAC_FLAG));

  /* Check the status of the specified DAC flag */
  if ((DAC->SR & (DAC_FLAG << DAC_Channel)) != (uint8_t)RESET)
 800360e:	4b0a      	ldr	r3, [pc, #40]	; (8003638 <DAC_GetFlagStatus+0x38>)
 8003610:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003612:	6839      	ldr	r1, [r7, #0]
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	fa01 f303 	lsl.w	r3, r1, r3
 800361a:	4013      	ands	r3, r2
 800361c:	2b00      	cmp	r3, #0
 800361e:	d002      	beq.n	8003626 <DAC_GetFlagStatus+0x26>
  {
    /* DAC_FLAG is set */
    bitstatus = SET;
 8003620:	2301      	movs	r3, #1
 8003622:	73fb      	strb	r3, [r7, #15]
 8003624:	e001      	b.n	800362a <DAC_GetFlagStatus+0x2a>
  }
  else
  {
    /* DAC_FLAG is reset */
    bitstatus = RESET;
 8003626:	2300      	movs	r3, #0
 8003628:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the DAC_FLAG status */
  return  bitstatus;
 800362a:	7bfb      	ldrb	r3, [r7, #15]
}
 800362c:	4618      	mov	r0, r3
 800362e:	3714      	adds	r7, #20
 8003630:	46bd      	mov	sp, r7
 8003632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003636:	4770      	bx	lr
 8003638:	40007400 	.word	0x40007400

0800363c <DAC_ClearFlag>:
  * @note   The DMA underrun occurs when a second external trigger arrives before the 
  *         acknowledgement for the first external trigger is received (first request).                           
  * @retval None
  */
void DAC_ClearFlag(uint32_t DAC_Channel, uint32_t DAC_FLAG)
{
 800363c:	b480      	push	{r7}
 800363e:	b083      	sub	sp, #12
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
 8003644:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_DAC_FLAG(DAC_FLAG));

  /* Clear the selected DAC flags */
  DAC->SR = (DAC_FLAG << DAC_Channel);
 8003646:	4906      	ldr	r1, [pc, #24]	; (8003660 <DAC_ClearFlag+0x24>)
 8003648:	683a      	ldr	r2, [r7, #0]
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	fa02 f303 	lsl.w	r3, r2, r3
 8003650:	634b      	str	r3, [r1, #52]	; 0x34
}
 8003652:	bf00      	nop
 8003654:	370c      	adds	r7, #12
 8003656:	46bd      	mov	sp, r7
 8003658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365c:	4770      	bx	lr
 800365e:	bf00      	nop
 8003660:	40007400 	.word	0x40007400

08003664 <DAC_GetITStatus>:
  * @note   The DMA underrun occurs when a second external trigger arrives before the 
  *         acknowledgement for the first external trigger is received (first request).
  * @retval The new state of DAC_IT (SET or RESET).
  */
ITStatus DAC_GetITStatus(uint32_t DAC_Channel, uint32_t DAC_IT)
{
 8003664:	b480      	push	{r7}
 8003666:	b085      	sub	sp, #20
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
 800366c:	6039      	str	r1, [r7, #0]
  ITStatus bitstatus = RESET;
 800366e:	2300      	movs	r3, #0
 8003670:	73fb      	strb	r3, [r7, #15]
  uint32_t enablestatus = 0;
 8003672:	2300      	movs	r3, #0
 8003674:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_DAC_IT(DAC_IT));

  /* Get the DAC_IT enable bit status */
  enablestatus = (DAC->CR & (DAC_IT << DAC_Channel)) ;
 8003676:	4b10      	ldr	r3, [pc, #64]	; (80036b8 <DAC_GetITStatus+0x54>)
 8003678:	681a      	ldr	r2, [r3, #0]
 800367a:	6839      	ldr	r1, [r7, #0]
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	fa01 f303 	lsl.w	r3, r1, r3
 8003682:	4013      	ands	r3, r2
 8003684:	60bb      	str	r3, [r7, #8]
  
  /* Check the status of the specified DAC interrupt */
  if (((DAC->SR & (DAC_IT << DAC_Channel)) != (uint32_t)RESET) && enablestatus)
 8003686:	4b0c      	ldr	r3, [pc, #48]	; (80036b8 <DAC_GetITStatus+0x54>)
 8003688:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800368a:	6839      	ldr	r1, [r7, #0]
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	fa01 f303 	lsl.w	r3, r1, r3
 8003692:	4013      	ands	r3, r2
 8003694:	2b00      	cmp	r3, #0
 8003696:	d005      	beq.n	80036a4 <DAC_GetITStatus+0x40>
 8003698:	68bb      	ldr	r3, [r7, #8]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d002      	beq.n	80036a4 <DAC_GetITStatus+0x40>
  {
    /* DAC_IT is set */
    bitstatus = SET;
 800369e:	2301      	movs	r3, #1
 80036a0:	73fb      	strb	r3, [r7, #15]
 80036a2:	e001      	b.n	80036a8 <DAC_GetITStatus+0x44>
  }
  else
  {
    /* DAC_IT is reset */
    bitstatus = RESET;
 80036a4:	2300      	movs	r3, #0
 80036a6:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the DAC_IT status */
  return  bitstatus;
 80036a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80036aa:	4618      	mov	r0, r3
 80036ac:	3714      	adds	r7, #20
 80036ae:	46bd      	mov	sp, r7
 80036b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b4:	4770      	bx	lr
 80036b6:	bf00      	nop
 80036b8:	40007400 	.word	0x40007400

080036bc <DAC_ClearITPendingBit>:
  * @note   The DMA underrun occurs when a second external trigger arrives before the 
  *         acknowledgement for the first external trigger is received (first request).                           
  * @retval None
  */
void DAC_ClearITPendingBit(uint32_t DAC_Channel, uint32_t DAC_IT)
{
 80036bc:	b480      	push	{r7}
 80036be:	b083      	sub	sp, #12
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
 80036c4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_DAC_IT(DAC_IT)); 

  /* Clear the selected DAC interrupt pending bits */
  DAC->SR = (DAC_IT << DAC_Channel);
 80036c6:	4906      	ldr	r1, [pc, #24]	; (80036e0 <DAC_ClearITPendingBit+0x24>)
 80036c8:	683a      	ldr	r2, [r7, #0]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	fa02 f303 	lsl.w	r3, r2, r3
 80036d0:	634b      	str	r3, [r1, #52]	; 0x34
}
 80036d2:	bf00      	nop
 80036d4:	370c      	adds	r7, #12
 80036d6:	46bd      	mov	sp, r7
 80036d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036dc:	4770      	bx	lr
 80036de:	bf00      	nop
 80036e0:	40007400 	.word	0x40007400

080036e4 <DBGMCU_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @param  None
  * @retval Device revision identifier
  */
uint32_t DBGMCU_GetREVID(void)
{
 80036e4:	b480      	push	{r7}
 80036e6:	af00      	add	r7, sp, #0
   return(DBGMCU->IDCODE >> 16);
 80036e8:	4b03      	ldr	r3, [pc, #12]	; (80036f8 <DBGMCU_GetREVID+0x14>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	0c1b      	lsrs	r3, r3, #16
}
 80036ee:	4618      	mov	r0, r3
 80036f0:	46bd      	mov	sp, r7
 80036f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f6:	4770      	bx	lr
 80036f8:	e0042000 	.word	0xe0042000

080036fc <DBGMCU_GetDEVID>:
  * @brief  Returns the device identifier.
  * @param  None
  * @retval Device identifier
  */
uint32_t DBGMCU_GetDEVID(void)
{
 80036fc:	b480      	push	{r7}
 80036fe:	af00      	add	r7, sp, #0
   return(DBGMCU->IDCODE & IDCODE_DEVID_MASK);
 8003700:	4b04      	ldr	r3, [pc, #16]	; (8003714 <DBGMCU_GetDEVID+0x18>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 8003708:	4618      	mov	r0, r3
 800370a:	46bd      	mov	sp, r7
 800370c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003710:	4770      	bx	lr
 8003712:	bf00      	nop
 8003714:	e0042000 	.word	0xe0042000

08003718 <DBGMCU_Config>:
  * @param  NewState: new state of the specified low power mode in Debug mode.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DBGMCU_Config(uint32_t DBGMCU_Periph, FunctionalState NewState)
{
 8003718:	b480      	push	{r7}
 800371a:	b083      	sub	sp, #12
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
 8003720:	460b      	mov	r3, r1
 8003722:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DBGMCU_PERIPH(DBGMCU_Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8003724:	78fb      	ldrb	r3, [r7, #3]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d006      	beq.n	8003738 <DBGMCU_Config+0x20>
  {
    DBGMCU->CR |= DBGMCU_Periph;
 800372a:	4b0a      	ldr	r3, [pc, #40]	; (8003754 <DBGMCU_Config+0x3c>)
 800372c:	685a      	ldr	r2, [r3, #4]
 800372e:	4909      	ldr	r1, [pc, #36]	; (8003754 <DBGMCU_Config+0x3c>)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	4313      	orrs	r3, r2
 8003734:	604b      	str	r3, [r1, #4]
  }
  else
  {
    DBGMCU->CR &= ~DBGMCU_Periph;
  }
}
 8003736:	e006      	b.n	8003746 <DBGMCU_Config+0x2e>
    DBGMCU->CR &= ~DBGMCU_Periph;
 8003738:	4b06      	ldr	r3, [pc, #24]	; (8003754 <DBGMCU_Config+0x3c>)
 800373a:	685a      	ldr	r2, [r3, #4]
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	43db      	mvns	r3, r3
 8003740:	4904      	ldr	r1, [pc, #16]	; (8003754 <DBGMCU_Config+0x3c>)
 8003742:	4013      	ands	r3, r2
 8003744:	604b      	str	r3, [r1, #4]
}
 8003746:	bf00      	nop
 8003748:	370c      	adds	r7, #12
 800374a:	46bd      	mov	sp, r7
 800374c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003750:	4770      	bx	lr
 8003752:	bf00      	nop
 8003754:	e0042000 	.word	0xe0042000

08003758 <DBGMCU_APB1PeriphConfig>:
  *     @arg DBGMCU_CAN1_STOP: Debug CAN2 stopped when Core is halted        
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DBGMCU_APB1PeriphConfig(uint32_t DBGMCU_Periph, FunctionalState NewState)
{
 8003758:	b480      	push	{r7}
 800375a:	b083      	sub	sp, #12
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
 8003760:	460b      	mov	r3, r1
 8003762:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DBGMCU_APB1PERIPH(DBGMCU_Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8003764:	78fb      	ldrb	r3, [r7, #3]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d006      	beq.n	8003778 <DBGMCU_APB1PeriphConfig+0x20>
  {
    DBGMCU->APB1FZ |= DBGMCU_Periph;
 800376a:	4b0a      	ldr	r3, [pc, #40]	; (8003794 <DBGMCU_APB1PeriphConfig+0x3c>)
 800376c:	689a      	ldr	r2, [r3, #8]
 800376e:	4909      	ldr	r1, [pc, #36]	; (8003794 <DBGMCU_APB1PeriphConfig+0x3c>)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	4313      	orrs	r3, r2
 8003774:	608b      	str	r3, [r1, #8]
  }
  else
  {
    DBGMCU->APB1FZ &= ~DBGMCU_Periph;
  }
}
 8003776:	e006      	b.n	8003786 <DBGMCU_APB1PeriphConfig+0x2e>
    DBGMCU->APB1FZ &= ~DBGMCU_Periph;
 8003778:	4b06      	ldr	r3, [pc, #24]	; (8003794 <DBGMCU_APB1PeriphConfig+0x3c>)
 800377a:	689a      	ldr	r2, [r3, #8]
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	43db      	mvns	r3, r3
 8003780:	4904      	ldr	r1, [pc, #16]	; (8003794 <DBGMCU_APB1PeriphConfig+0x3c>)
 8003782:	4013      	ands	r3, r2
 8003784:	608b      	str	r3, [r1, #8]
}
 8003786:	bf00      	nop
 8003788:	370c      	adds	r7, #12
 800378a:	46bd      	mov	sp, r7
 800378c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003790:	4770      	bx	lr
 8003792:	bf00      	nop
 8003794:	e0042000 	.word	0xe0042000

08003798 <DBGMCU_APB2PeriphConfig>:
  * @param  NewState: new state of the specified peripheral in Debug mode.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DBGMCU_APB2PeriphConfig(uint32_t DBGMCU_Periph, FunctionalState NewState)
{
 8003798:	b480      	push	{r7}
 800379a:	b083      	sub	sp, #12
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
 80037a0:	460b      	mov	r3, r1
 80037a2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DBGMCU_APB2PERIPH(DBGMCU_Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80037a4:	78fb      	ldrb	r3, [r7, #3]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d006      	beq.n	80037b8 <DBGMCU_APB2PeriphConfig+0x20>
  {
    DBGMCU->APB2FZ |= DBGMCU_Periph;
 80037aa:	4b0a      	ldr	r3, [pc, #40]	; (80037d4 <DBGMCU_APB2PeriphConfig+0x3c>)
 80037ac:	68da      	ldr	r2, [r3, #12]
 80037ae:	4909      	ldr	r1, [pc, #36]	; (80037d4 <DBGMCU_APB2PeriphConfig+0x3c>)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	4313      	orrs	r3, r2
 80037b4:	60cb      	str	r3, [r1, #12]
  }
  else
  {
    DBGMCU->APB2FZ &= ~DBGMCU_Periph;
  }
}
 80037b6:	e006      	b.n	80037c6 <DBGMCU_APB2PeriphConfig+0x2e>
    DBGMCU->APB2FZ &= ~DBGMCU_Periph;
 80037b8:	4b06      	ldr	r3, [pc, #24]	; (80037d4 <DBGMCU_APB2PeriphConfig+0x3c>)
 80037ba:	68da      	ldr	r2, [r3, #12]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	43db      	mvns	r3, r3
 80037c0:	4904      	ldr	r1, [pc, #16]	; (80037d4 <DBGMCU_APB2PeriphConfig+0x3c>)
 80037c2:	4013      	ands	r3, r2
 80037c4:	60cb      	str	r3, [r1, #12]
}
 80037c6:	bf00      	nop
 80037c8:	370c      	adds	r7, #12
 80037ca:	46bd      	mov	sp, r7
 80037cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d0:	4770      	bx	lr
 80037d2:	bf00      	nop
 80037d4:	e0042000 	.word	0xe0042000

080037d8 <DCMI_DeInit>:
  * @brief  Deinitializes the DCMI registers to their default reset values.
  * @param  None
  * @retval None
  */
void DCMI_DeInit(void)
{
 80037d8:	b480      	push	{r7}
 80037da:	af00      	add	r7, sp, #0
  DCMI->CR = 0x0;
 80037dc:	4b0c      	ldr	r3, [pc, #48]	; (8003810 <DCMI_DeInit+0x38>)
 80037de:	2200      	movs	r2, #0
 80037e0:	601a      	str	r2, [r3, #0]
  DCMI->IER = 0x0;
 80037e2:	4b0b      	ldr	r3, [pc, #44]	; (8003810 <DCMI_DeInit+0x38>)
 80037e4:	2200      	movs	r2, #0
 80037e6:	60da      	str	r2, [r3, #12]
  DCMI->ICR = 0x1F;
 80037e8:	4b09      	ldr	r3, [pc, #36]	; (8003810 <DCMI_DeInit+0x38>)
 80037ea:	221f      	movs	r2, #31
 80037ec:	615a      	str	r2, [r3, #20]
  DCMI->ESCR = 0x0;
 80037ee:	4b08      	ldr	r3, [pc, #32]	; (8003810 <DCMI_DeInit+0x38>)
 80037f0:	2200      	movs	r2, #0
 80037f2:	619a      	str	r2, [r3, #24]
  DCMI->ESUR = 0x0;
 80037f4:	4b06      	ldr	r3, [pc, #24]	; (8003810 <DCMI_DeInit+0x38>)
 80037f6:	2200      	movs	r2, #0
 80037f8:	61da      	str	r2, [r3, #28]
  DCMI->CWSTRTR = 0x0;
 80037fa:	4b05      	ldr	r3, [pc, #20]	; (8003810 <DCMI_DeInit+0x38>)
 80037fc:	2200      	movs	r2, #0
 80037fe:	621a      	str	r2, [r3, #32]
  DCMI->CWSIZER = 0x0;
 8003800:	4b03      	ldr	r3, [pc, #12]	; (8003810 <DCMI_DeInit+0x38>)
 8003802:	2200      	movs	r2, #0
 8003804:	625a      	str	r2, [r3, #36]	; 0x24
}
 8003806:	bf00      	nop
 8003808:	46bd      	mov	sp, r7
 800380a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380e:	4770      	bx	lr
 8003810:	50050000 	.word	0x50050000

08003814 <DCMI_Init>:
  * @param  DCMI_InitStruct: pointer to a DCMI_InitTypeDef structure that contains 
  *         the configuration information for the DCMI.
  * @retval None
  */
void DCMI_Init(DCMI_InitTypeDef* DCMI_InitStruct)
{
 8003814:	b480      	push	{r7}
 8003816:	b085      	sub	sp, #20
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
  uint32_t temp = 0x0;
 800381c:	2300      	movs	r3, #0
 800381e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_DCMI_CAPTURE_RATE(DCMI_InitStruct->DCMI_CaptureRate));
  assert_param(IS_DCMI_EXTENDED_DATA(DCMI_InitStruct->DCMI_ExtendedDataMode));

  /* The DCMI configuration registers should be programmed correctly before 
  enabling the CR_ENABLE Bit and the CR_CAPTURE Bit */
  DCMI->CR &= ~(DCMI_CR_ENABLE | DCMI_CR_CAPTURE);
 8003820:	4b1b      	ldr	r3, [pc, #108]	; (8003890 <DCMI_Init+0x7c>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4a1a      	ldr	r2, [pc, #104]	; (8003890 <DCMI_Init+0x7c>)
 8003826:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800382a:	f023 0301 	bic.w	r3, r3, #1
 800382e:	6013      	str	r3, [r2, #0]
   
  /* Reset the old DCMI configuration */
  temp = DCMI->CR;
 8003830:	4b17      	ldr	r3, [pc, #92]	; (8003890 <DCMI_Init+0x7c>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	60fb      	str	r3, [r7, #12]
  
  temp &= ~((uint32_t)DCMI_CR_CM     | DCMI_CR_ESS   | DCMI_CR_PCKPOL |
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800383c:	f023 0302 	bic.w	r3, r3, #2
 8003840:	60fb      	str	r3, [r7, #12]
                      DCMI_CR_HSPOL  | DCMI_CR_VSPOL | DCMI_CR_FCRC_0 | 
                      DCMI_CR_FCRC_1 | DCMI_CR_EDM_0 | DCMI_CR_EDM_1); 
                  
  /* Sets the new configuration of the DCMI peripheral */
  temp |= ((uint32_t)DCMI_InitStruct->DCMI_CaptureMode |
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	881a      	ldrh	r2, [r3, #0]
                     DCMI_InitStruct->DCMI_SynchroMode |
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	885b      	ldrh	r3, [r3, #2]
                     DCMI_InitStruct->DCMI_PCKPolarity |
                     DCMI_InitStruct->DCMI_VSPolarity |
                     DCMI_InitStruct->DCMI_HSPolarity |
                     DCMI_InitStruct->DCMI_CaptureRate |
 800384a:	4313      	orrs	r3, r2
 800384c:	b29a      	uxth	r2, r3
                     DCMI_InitStruct->DCMI_PCKPolarity |
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	889b      	ldrh	r3, [r3, #4]
                     DCMI_InitStruct->DCMI_CaptureRate |
 8003852:	4313      	orrs	r3, r2
 8003854:	b29a      	uxth	r2, r3
                     DCMI_InitStruct->DCMI_VSPolarity |
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	88db      	ldrh	r3, [r3, #6]
                     DCMI_InitStruct->DCMI_CaptureRate |
 800385a:	4313      	orrs	r3, r2
 800385c:	b29a      	uxth	r2, r3
                     DCMI_InitStruct->DCMI_HSPolarity |
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	891b      	ldrh	r3, [r3, #8]
                     DCMI_InitStruct->DCMI_CaptureRate |
 8003862:	4313      	orrs	r3, r2
 8003864:	b29a      	uxth	r2, r3
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	895b      	ldrh	r3, [r3, #10]
 800386a:	4313      	orrs	r3, r2
 800386c:	b29a      	uxth	r2, r3
                     DCMI_InitStruct->DCMI_ExtendedDataMode);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	899b      	ldrh	r3, [r3, #12]
                     DCMI_InitStruct->DCMI_CaptureRate |
 8003872:	4313      	orrs	r3, r2
 8003874:	b29b      	uxth	r3, r3
 8003876:	461a      	mov	r2, r3
  temp |= ((uint32_t)DCMI_InitStruct->DCMI_CaptureMode |
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	4313      	orrs	r3, r2
 800387c:	60fb      	str	r3, [r7, #12]

  DCMI->CR = temp;                              
 800387e:	4a04      	ldr	r2, [pc, #16]	; (8003890 <DCMI_Init+0x7c>)
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	6013      	str	r3, [r2, #0]
}
 8003884:	bf00      	nop
 8003886:	3714      	adds	r7, #20
 8003888:	46bd      	mov	sp, r7
 800388a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388e:	4770      	bx	lr
 8003890:	50050000 	.word	0x50050000

08003894 <DCMI_StructInit>:
  * @param  DCMI_InitStruct : pointer to a DCMI_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void DCMI_StructInit(DCMI_InitTypeDef* DCMI_InitStruct)
{
 8003894:	b480      	push	{r7}
 8003896:	b083      	sub	sp, #12
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  DCMI_InitStruct->DCMI_CaptureMode = DCMI_CaptureMode_Continuous;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2200      	movs	r2, #0
 80038a0:	801a      	strh	r2, [r3, #0]
  DCMI_InitStruct->DCMI_SynchroMode = DCMI_SynchroMode_Hardware;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2200      	movs	r2, #0
 80038a6:	805a      	strh	r2, [r3, #2]
  DCMI_InitStruct->DCMI_PCKPolarity = DCMI_PCKPolarity_Falling;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2200      	movs	r2, #0
 80038ac:	809a      	strh	r2, [r3, #4]
  DCMI_InitStruct->DCMI_VSPolarity = DCMI_VSPolarity_Low;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2200      	movs	r2, #0
 80038b2:	80da      	strh	r2, [r3, #6]
  DCMI_InitStruct->DCMI_HSPolarity = DCMI_HSPolarity_Low;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2200      	movs	r2, #0
 80038b8:	811a      	strh	r2, [r3, #8]
  DCMI_InitStruct->DCMI_CaptureRate = DCMI_CaptureRate_All_Frame;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2200      	movs	r2, #0
 80038be:	815a      	strh	r2, [r3, #10]
  DCMI_InitStruct->DCMI_ExtendedDataMode = DCMI_ExtendedDataMode_8b;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2200      	movs	r2, #0
 80038c4:	819a      	strh	r2, [r3, #12]
}
 80038c6:	bf00      	nop
 80038c8:	370c      	adds	r7, #12
 80038ca:	46bd      	mov	sp, r7
 80038cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d0:	4770      	bx	lr

080038d2 <DCMI_CROPConfig>:
  * @param  DCMI_CROPInitStruct:  pointer to a DCMI_CROPInitTypeDef structure that 
  *         contains the configuration information for the DCMI peripheral CROP mode.
  * @retval None
  */
void DCMI_CROPConfig(DCMI_CROPInitTypeDef* DCMI_CROPInitStruct)
{  
 80038d2:	b480      	push	{r7}
 80038d4:	b083      	sub	sp, #12
 80038d6:	af00      	add	r7, sp, #0
 80038d8:	6078      	str	r0, [r7, #4]
  /* Sets the CROP window coordinates */
  DCMI->CWSTRTR = (uint32_t)((uint32_t)DCMI_CROPInitStruct->DCMI_HorizontalOffsetCount |
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	885b      	ldrh	r3, [r3, #2]
 80038de:	4619      	mov	r1, r3
                  ((uint32_t)DCMI_CROPInitStruct->DCMI_VerticalStartLine << 16));
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	881b      	ldrh	r3, [r3, #0]
 80038e4:	041b      	lsls	r3, r3, #16
  DCMI->CWSTRTR = (uint32_t)((uint32_t)DCMI_CROPInitStruct->DCMI_HorizontalOffsetCount |
 80038e6:	4a09      	ldr	r2, [pc, #36]	; (800390c <DCMI_CROPConfig+0x3a>)
 80038e8:	430b      	orrs	r3, r1
 80038ea:	6213      	str	r3, [r2, #32]

  /* Sets the CROP window size */
  DCMI->CWSIZER = (uint32_t)(DCMI_CROPInitStruct->DCMI_CaptureCount |
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	88db      	ldrh	r3, [r3, #6]
 80038f0:	4619      	mov	r1, r3
                  ((uint32_t)DCMI_CROPInitStruct->DCMI_VerticalLineCount << 16));
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	889b      	ldrh	r3, [r3, #4]
 80038f6:	041b      	lsls	r3, r3, #16
  DCMI->CWSIZER = (uint32_t)(DCMI_CROPInitStruct->DCMI_CaptureCount |
 80038f8:	4a04      	ldr	r2, [pc, #16]	; (800390c <DCMI_CROPConfig+0x3a>)
 80038fa:	430b      	orrs	r3, r1
 80038fc:	6253      	str	r3, [r2, #36]	; 0x24
}
 80038fe:	bf00      	nop
 8003900:	370c      	adds	r7, #12
 8003902:	46bd      	mov	sp, r7
 8003904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003908:	4770      	bx	lr
 800390a:	bf00      	nop
 800390c:	50050000 	.word	0x50050000

08003910 <DCMI_CROPCmd>:
  * @param  NewState: new state of the DCMI Crop feature. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DCMI_CROPCmd(FunctionalState NewState)
{
 8003910:	b480      	push	{r7}
 8003912:	b083      	sub	sp, #12
 8003914:	af00      	add	r7, sp, #0
 8003916:	4603      	mov	r3, r0
 8003918:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
 800391a:	79fb      	ldrb	r3, [r7, #7]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d006      	beq.n	800392e <DCMI_CROPCmd+0x1e>
  {
    /* Enable the DCMI Crop feature */
    DCMI->CR |= (uint32_t)DCMI_CR_CROP;
 8003920:	4b09      	ldr	r3, [pc, #36]	; (8003948 <DCMI_CROPCmd+0x38>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4a08      	ldr	r2, [pc, #32]	; (8003948 <DCMI_CROPCmd+0x38>)
 8003926:	f043 0304 	orr.w	r3, r3, #4
 800392a:	6013      	str	r3, [r2, #0]
  else
  {
    /* Disable the DCMI Crop feature */
    DCMI->CR &= ~(uint32_t)DCMI_CR_CROP;
  }
}
 800392c:	e005      	b.n	800393a <DCMI_CROPCmd+0x2a>
    DCMI->CR &= ~(uint32_t)DCMI_CR_CROP;
 800392e:	4b06      	ldr	r3, [pc, #24]	; (8003948 <DCMI_CROPCmd+0x38>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4a05      	ldr	r2, [pc, #20]	; (8003948 <DCMI_CROPCmd+0x38>)
 8003934:	f023 0304 	bic.w	r3, r3, #4
 8003938:	6013      	str	r3, [r2, #0]
}
 800393a:	bf00      	nop
 800393c:	370c      	adds	r7, #12
 800393e:	46bd      	mov	sp, r7
 8003940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003944:	4770      	bx	lr
 8003946:	bf00      	nop
 8003948:	50050000 	.word	0x50050000

0800394c <DCMI_SetEmbeddedSynchroCodes>:
  * @param  DCMI_CodesInitTypeDef: pointer to a DCMI_CodesInitTypeDef structure that
  *         contains the embedded synchronization codes for the DCMI peripheral.
  * @retval None
  */
void DCMI_SetEmbeddedSynchroCodes(DCMI_CodesInitTypeDef* DCMI_CodesInitStruct)
{
 800394c:	b480      	push	{r7}
 800394e:	b083      	sub	sp, #12
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
  DCMI->ESCR = (uint32_t)(DCMI_CodesInitStruct->DCMI_FrameStartCode |
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	781b      	ldrb	r3, [r3, #0]
 8003958:	461a      	mov	r2, r3
                          ((uint32_t)DCMI_CodesInitStruct->DCMI_LineStartCode << 8)|
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	785b      	ldrb	r3, [r3, #1]
 800395e:	021b      	lsls	r3, r3, #8
  DCMI->ESCR = (uint32_t)(DCMI_CodesInitStruct->DCMI_FrameStartCode |
 8003960:	431a      	orrs	r2, r3
                          ((uint32_t)DCMI_CodesInitStruct->DCMI_LineEndCode << 16)|
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	789b      	ldrb	r3, [r3, #2]
 8003966:	041b      	lsls	r3, r3, #16
                          ((uint32_t)DCMI_CodesInitStruct->DCMI_LineStartCode << 8)|
 8003968:	431a      	orrs	r2, r3
                          ((uint32_t)DCMI_CodesInitStruct->DCMI_FrameEndCode << 24));
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	78db      	ldrb	r3, [r3, #3]
 800396e:	061b      	lsls	r3, r3, #24
  DCMI->ESCR = (uint32_t)(DCMI_CodesInitStruct->DCMI_FrameStartCode |
 8003970:	4904      	ldr	r1, [pc, #16]	; (8003984 <DCMI_SetEmbeddedSynchroCodes+0x38>)
 8003972:	4313      	orrs	r3, r2
 8003974:	618b      	str	r3, [r1, #24]
}
 8003976:	bf00      	nop
 8003978:	370c      	adds	r7, #12
 800397a:	46bd      	mov	sp, r7
 800397c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003980:	4770      	bx	lr
 8003982:	bf00      	nop
 8003984:	50050000 	.word	0x50050000

08003988 <DCMI_JPEGCmd>:
  * @param  NewState: new state of the DCMI JPEG format. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DCMI_JPEGCmd(FunctionalState NewState)
{
 8003988:	b480      	push	{r7}
 800398a:	b083      	sub	sp, #12
 800398c:	af00      	add	r7, sp, #0
 800398e:	4603      	mov	r3, r0
 8003990:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
 
  if (NewState != DISABLE)
 8003992:	79fb      	ldrb	r3, [r7, #7]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d006      	beq.n	80039a6 <DCMI_JPEGCmd+0x1e>
  {
    /* Enable the DCMI JPEG format */
    DCMI->CR |= (uint32_t)DCMI_CR_JPEG;
 8003998:	4b09      	ldr	r3, [pc, #36]	; (80039c0 <DCMI_JPEGCmd+0x38>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4a08      	ldr	r2, [pc, #32]	; (80039c0 <DCMI_JPEGCmd+0x38>)
 800399e:	f043 0308 	orr.w	r3, r3, #8
 80039a2:	6013      	str	r3, [r2, #0]
  else
  {
    /* Disable the DCMI JPEG format */
    DCMI->CR &= ~(uint32_t)DCMI_CR_JPEG;
  }
}
 80039a4:	e005      	b.n	80039b2 <DCMI_JPEGCmd+0x2a>
    DCMI->CR &= ~(uint32_t)DCMI_CR_JPEG;
 80039a6:	4b06      	ldr	r3, [pc, #24]	; (80039c0 <DCMI_JPEGCmd+0x38>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4a05      	ldr	r2, [pc, #20]	; (80039c0 <DCMI_JPEGCmd+0x38>)
 80039ac:	f023 0308 	bic.w	r3, r3, #8
 80039b0:	6013      	str	r3, [r2, #0]
}
 80039b2:	bf00      	nop
 80039b4:	370c      	adds	r7, #12
 80039b6:	46bd      	mov	sp, r7
 80039b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039bc:	4770      	bx	lr
 80039be:	bf00      	nop
 80039c0:	50050000 	.word	0x50050000

080039c4 <DCMI_Cmd>:
  * @param  NewState: new state of the DCMI interface. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DCMI_Cmd(FunctionalState NewState)
{
 80039c4:	b480      	push	{r7}
 80039c6:	b083      	sub	sp, #12
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	4603      	mov	r3, r0
 80039cc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80039ce:	79fb      	ldrb	r3, [r7, #7]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d006      	beq.n	80039e2 <DCMI_Cmd+0x1e>
  {
    /* Enable the DCMI by setting ENABLE bit */
    DCMI->CR |= (uint32_t)DCMI_CR_ENABLE;
 80039d4:	4b09      	ldr	r3, [pc, #36]	; (80039fc <DCMI_Cmd+0x38>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4a08      	ldr	r2, [pc, #32]	; (80039fc <DCMI_Cmd+0x38>)
 80039da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80039de:	6013      	str	r3, [r2, #0]
  else
  {
    /* Disable the DCMI by clearing ENABLE bit */
    DCMI->CR &= ~(uint32_t)DCMI_CR_ENABLE;
  }
}
 80039e0:	e005      	b.n	80039ee <DCMI_Cmd+0x2a>
    DCMI->CR &= ~(uint32_t)DCMI_CR_ENABLE;
 80039e2:	4b06      	ldr	r3, [pc, #24]	; (80039fc <DCMI_Cmd+0x38>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4a05      	ldr	r2, [pc, #20]	; (80039fc <DCMI_Cmd+0x38>)
 80039e8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80039ec:	6013      	str	r3, [r2, #0]
}
 80039ee:	bf00      	nop
 80039f0:	370c      	adds	r7, #12
 80039f2:	46bd      	mov	sp, r7
 80039f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f8:	4770      	bx	lr
 80039fa:	bf00      	nop
 80039fc:	50050000 	.word	0x50050000

08003a00 <DCMI_CaptureCmd>:
  * @param  NewState: new state of the DCMI capture. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DCMI_CaptureCmd(FunctionalState NewState)
{
 8003a00:	b480      	push	{r7}
 8003a02:	b083      	sub	sp, #12
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	4603      	mov	r3, r0
 8003a08:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
 8003a0a:	79fb      	ldrb	r3, [r7, #7]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d006      	beq.n	8003a1e <DCMI_CaptureCmd+0x1e>
  {
    /* Enable the DCMI Capture */
    DCMI->CR |= (uint32_t)DCMI_CR_CAPTURE;
 8003a10:	4b09      	ldr	r3, [pc, #36]	; (8003a38 <DCMI_CaptureCmd+0x38>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4a08      	ldr	r2, [pc, #32]	; (8003a38 <DCMI_CaptureCmd+0x38>)
 8003a16:	f043 0301 	orr.w	r3, r3, #1
 8003a1a:	6013      	str	r3, [r2, #0]
  else
  {
    /* Disable the DCMI Capture */
    DCMI->CR &= ~(uint32_t)DCMI_CR_CAPTURE;
  }
}
 8003a1c:	e005      	b.n	8003a2a <DCMI_CaptureCmd+0x2a>
    DCMI->CR &= ~(uint32_t)DCMI_CR_CAPTURE;
 8003a1e:	4b06      	ldr	r3, [pc, #24]	; (8003a38 <DCMI_CaptureCmd+0x38>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4a05      	ldr	r2, [pc, #20]	; (8003a38 <DCMI_CaptureCmd+0x38>)
 8003a24:	f023 0301 	bic.w	r3, r3, #1
 8003a28:	6013      	str	r3, [r2, #0]
}
 8003a2a:	bf00      	nop
 8003a2c:	370c      	adds	r7, #12
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a34:	4770      	bx	lr
 8003a36:	bf00      	nop
 8003a38:	50050000 	.word	0x50050000

08003a3c <DCMI_ReadData>:
  * @brief  Reads the data stored in the DR register.
  * @param  None 
  * @retval Data register value
  */
uint32_t DCMI_ReadData(void)
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	af00      	add	r7, sp, #0
  return DCMI->DR;
 8003a40:	4b03      	ldr	r3, [pc, #12]	; (8003a50 <DCMI_ReadData+0x14>)
 8003a42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 8003a44:	4618      	mov	r0, r3
 8003a46:	46bd      	mov	sp, r7
 8003a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4c:	4770      	bx	lr
 8003a4e:	bf00      	nop
 8003a50:	50050000 	.word	0x50050000

08003a54 <DCMI_ITConfig>:
  * @param  NewState: new state of the specified DCMI interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DCMI_ITConfig(uint16_t DCMI_IT, FunctionalState NewState)
{
 8003a54:	b480      	push	{r7}
 8003a56:	b083      	sub	sp, #12
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	460a      	mov	r2, r1
 8003a5e:	80fb      	strh	r3, [r7, #6]
 8003a60:	4613      	mov	r3, r2
 8003a62:	717b      	strb	r3, [r7, #5]
  /* Check the parameters */
  assert_param(IS_DCMI_CONFIG_IT(DCMI_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8003a64:	797b      	ldrb	r3, [r7, #5]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d006      	beq.n	8003a78 <DCMI_ITConfig+0x24>
  {
    /* Enable the Interrupt sources */
    DCMI->IER |= DCMI_IT;
 8003a6a:	4b0b      	ldr	r3, [pc, #44]	; (8003a98 <DCMI_ITConfig+0x44>)
 8003a6c:	68da      	ldr	r2, [r3, #12]
 8003a6e:	88fb      	ldrh	r3, [r7, #6]
 8003a70:	4909      	ldr	r1, [pc, #36]	; (8003a98 <DCMI_ITConfig+0x44>)
 8003a72:	4313      	orrs	r3, r2
 8003a74:	60cb      	str	r3, [r1, #12]
  else
  {
    /* Disable the Interrupt sources */
    DCMI->IER &= (uint16_t)(~DCMI_IT);
  }  
}
 8003a76:	e008      	b.n	8003a8a <DCMI_ITConfig+0x36>
    DCMI->IER &= (uint16_t)(~DCMI_IT);
 8003a78:	4b07      	ldr	r3, [pc, #28]	; (8003a98 <DCMI_ITConfig+0x44>)
 8003a7a:	68db      	ldr	r3, [r3, #12]
 8003a7c:	88fa      	ldrh	r2, [r7, #6]
 8003a7e:	43d2      	mvns	r2, r2
 8003a80:	b292      	uxth	r2, r2
 8003a82:	4611      	mov	r1, r2
 8003a84:	4a04      	ldr	r2, [pc, #16]	; (8003a98 <DCMI_ITConfig+0x44>)
 8003a86:	400b      	ands	r3, r1
 8003a88:	60d3      	str	r3, [r2, #12]
}
 8003a8a:	bf00      	nop
 8003a8c:	370c      	adds	r7, #12
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a94:	4770      	bx	lr
 8003a96:	bf00      	nop
 8003a98:	50050000 	.word	0x50050000

08003a9c <DCMI_GetFlagStatus>:
  *            @arg DCMI_FLAG_VSYNC: VSYNC flag mask
  *            @arg DCMI_FLAG_FNE: Fifo not empty flag mask
  * @retval The new state of DCMI_FLAG (SET or RESET).
  */
FlagStatus DCMI_GetFlagStatus(uint16_t DCMI_FLAG)
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	b087      	sub	sp, #28
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	80fb      	strh	r3, [r7, #6]
  FlagStatus bitstatus = RESET;
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	75fb      	strb	r3, [r7, #23]
  uint32_t dcmireg, tempreg = 0;
 8003aaa:	2300      	movs	r3, #0
 8003aac:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_DCMI_GET_FLAG(DCMI_FLAG));
  
  /* Get the DCMI register index */
  dcmireg = (((uint16_t)DCMI_FLAG) >> 12);
 8003aae:	88fb      	ldrh	r3, [r7, #6]
 8003ab0:	0b1b      	lsrs	r3, r3, #12
 8003ab2:	b29b      	uxth	r3, r3
 8003ab4:	60fb      	str	r3, [r7, #12]
  
  if (dcmireg == 0x00) /* The FLAG is in RISR register */
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d103      	bne.n	8003ac4 <DCMI_GetFlagStatus+0x28>
  {
    tempreg= DCMI->RISR;
 8003abc:	4b0f      	ldr	r3, [pc, #60]	; (8003afc <DCMI_GetFlagStatus+0x60>)
 8003abe:	689b      	ldr	r3, [r3, #8]
 8003ac0:	613b      	str	r3, [r7, #16]
 8003ac2:	e009      	b.n	8003ad8 <DCMI_GetFlagStatus+0x3c>
  }
  else if (dcmireg == 0x02) /* The FLAG is in SR register */
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	2b02      	cmp	r3, #2
 8003ac8:	d103      	bne.n	8003ad2 <DCMI_GetFlagStatus+0x36>
  {
    tempreg = DCMI->SR;
 8003aca:	4b0c      	ldr	r3, [pc, #48]	; (8003afc <DCMI_GetFlagStatus+0x60>)
 8003acc:	685b      	ldr	r3, [r3, #4]
 8003ace:	613b      	str	r3, [r7, #16]
 8003ad0:	e002      	b.n	8003ad8 <DCMI_GetFlagStatus+0x3c>
  }
  else /* The FLAG is in MISR register */
  {
    tempreg = DCMI->MISR;
 8003ad2:	4b0a      	ldr	r3, [pc, #40]	; (8003afc <DCMI_GetFlagStatus+0x60>)
 8003ad4:	691b      	ldr	r3, [r3, #16]
 8003ad6:	613b      	str	r3, [r7, #16]
  }
  
  if ((tempreg & DCMI_FLAG) != (uint16_t)RESET )
 8003ad8:	88fa      	ldrh	r2, [r7, #6]
 8003ada:	693b      	ldr	r3, [r7, #16]
 8003adc:	4013      	ands	r3, r2
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d002      	beq.n	8003ae8 <DCMI_GetFlagStatus+0x4c>
  {
    bitstatus = SET;
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	75fb      	strb	r3, [r7, #23]
 8003ae6:	e001      	b.n	8003aec <DCMI_GetFlagStatus+0x50>
  }
  else
  {
    bitstatus = RESET;
 8003ae8:	2300      	movs	r3, #0
 8003aea:	75fb      	strb	r3, [r7, #23]
  }
  /* Return the DCMI_FLAG status */
  return  bitstatus;
 8003aec:	7dfb      	ldrb	r3, [r7, #23]
}
 8003aee:	4618      	mov	r0, r3
 8003af0:	371c      	adds	r7, #28
 8003af2:	46bd      	mov	sp, r7
 8003af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af8:	4770      	bx	lr
 8003afa:	bf00      	nop
 8003afc:	50050000 	.word	0x50050000

08003b00 <DCMI_ClearFlag>:
  *            @arg DCMI_FLAG_VSYNCRI: VSYNC Raw flag mask
  *            @arg DCMI_FLAG_LINERI: Line Raw flag mask
  * @retval None
  */
void DCMI_ClearFlag(uint16_t DCMI_FLAG)
{
 8003b00:	b480      	push	{r7}
 8003b02:	b083      	sub	sp, #12
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	4603      	mov	r3, r0
 8003b08:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_DCMI_CLEAR_FLAG(DCMI_FLAG));
  
  /* Clear the flag by writing in the ICR register 1 in the corresponding 
  Flag position*/
  
  DCMI->ICR = DCMI_FLAG;
 8003b0a:	4a04      	ldr	r2, [pc, #16]	; (8003b1c <DCMI_ClearFlag+0x1c>)
 8003b0c:	88fb      	ldrh	r3, [r7, #6]
 8003b0e:	6153      	str	r3, [r2, #20]
}
 8003b10:	bf00      	nop
 8003b12:	370c      	adds	r7, #12
 8003b14:	46bd      	mov	sp, r7
 8003b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1a:	4770      	bx	lr
 8003b1c:	50050000 	.word	0x50050000

08003b20 <DCMI_GetITStatus>:
  *            @arg DCMI_IT_VSYNC: VSYNC interrupt mask
  *            @arg DCMI_IT_LINE: Line interrupt mask
  * @retval The new state of DCMI_IT (SET or RESET).
  */
ITStatus DCMI_GetITStatus(uint16_t DCMI_IT)
{
 8003b20:	b480      	push	{r7}
 8003b22:	b085      	sub	sp, #20
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	4603      	mov	r3, r0
 8003b28:	80fb      	strh	r3, [r7, #6]
  ITStatus bitstatus = RESET;
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	73fb      	strb	r3, [r7, #15]
  uint32_t itstatus = 0;
 8003b2e:	2300      	movs	r3, #0
 8003b30:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_DCMI_GET_IT(DCMI_IT));
  
  itstatus = DCMI->MISR & DCMI_IT; /* Only masked interrupts are checked */
 8003b32:	4b0a      	ldr	r3, [pc, #40]	; (8003b5c <DCMI_GetITStatus+0x3c>)
 8003b34:	691a      	ldr	r2, [r3, #16]
 8003b36:	88fb      	ldrh	r3, [r7, #6]
 8003b38:	4013      	ands	r3, r2
 8003b3a:	60bb      	str	r3, [r7, #8]
  
  if ((itstatus != (uint16_t)RESET))
 8003b3c:	68bb      	ldr	r3, [r7, #8]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d002      	beq.n	8003b48 <DCMI_GetITStatus+0x28>
  {
    bitstatus = SET;
 8003b42:	2301      	movs	r3, #1
 8003b44:	73fb      	strb	r3, [r7, #15]
 8003b46:	e001      	b.n	8003b4c <DCMI_GetITStatus+0x2c>
  }
  else
  {
    bitstatus = RESET;
 8003b48:	2300      	movs	r3, #0
 8003b4a:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003b4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b4e:	4618      	mov	r0, r3
 8003b50:	3714      	adds	r7, #20
 8003b52:	46bd      	mov	sp, r7
 8003b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b58:	4770      	bx	lr
 8003b5a:	bf00      	nop
 8003b5c:	50050000 	.word	0x50050000

08003b60 <DCMI_ClearITPendingBit>:
  *            @arg DCMI_IT_VSYNC: VSYNC interrupt mask
  *            @arg DCMI_IT_LINE: Line interrupt mask
  * @retval None
  */
void DCMI_ClearITPendingBit(uint16_t DCMI_IT)
{
 8003b60:	b480      	push	{r7}
 8003b62:	b083      	sub	sp, #12
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	4603      	mov	r3, r0
 8003b68:	80fb      	strh	r3, [r7, #6]
  /* Clear the interrupt pending Bit by writing in the ICR register 1 in the 
  corresponding pending Bit position*/
  
  DCMI->ICR = DCMI_IT;
 8003b6a:	4a04      	ldr	r2, [pc, #16]	; (8003b7c <DCMI_ClearITPendingBit+0x1c>)
 8003b6c:	88fb      	ldrh	r3, [r7, #6]
 8003b6e:	6153      	str	r3, [r2, #20]
}
 8003b70:	bf00      	nop
 8003b72:	370c      	adds	r7, #12
 8003b74:	46bd      	mov	sp, r7
 8003b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7a:	4770      	bx	lr
 8003b7c:	50050000 	.word	0x50050000

08003b80 <DMA_DeInit>:
  * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
  *         to 7 to select the DMA Stream.
  * @retval None
  */
void DMA_DeInit(DMA_Stream_TypeDef* DMAy_Streamx)
{
 8003b80:	b480      	push	{r7}
 8003b82:	b083      	sub	sp, #12
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  /* Disable the selected DMAy Streamx */
  DMAy_Streamx->CR &= ~((uint32_t)DMA_SxCR_EN);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f023 0201 	bic.w	r2, r3, #1
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	601a      	str	r2, [r3, #0]

  /* Reset DMAy Streamx control register */
  DMAy_Streamx->CR  = 0;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2200      	movs	r2, #0
 8003b98:	601a      	str	r2, [r3, #0]
  
  /* Reset DMAy Streamx Number of Data to Transfer register */
  DMAy_Streamx->NDTR = 0;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	605a      	str	r2, [r3, #4]
  
  /* Reset DMAy Streamx peripheral address register */
  DMAy_Streamx->PAR  = 0;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	609a      	str	r2, [r3, #8]
  
  /* Reset DMAy Streamx memory 0 address register */
  DMAy_Streamx->M0AR = 0;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2200      	movs	r2, #0
 8003baa:	60da      	str	r2, [r3, #12]

  /* Reset DMAy Streamx memory 1 address register */
  DMAy_Streamx->M1AR = 0;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2200      	movs	r2, #0
 8003bb0:	611a      	str	r2, [r3, #16]

  /* Reset DMAy Streamx FIFO control register */
  DMAy_Streamx->FCR = (uint32_t)0x00000021; 
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2221      	movs	r2, #33	; 0x21
 8003bb6:	615a      	str	r2, [r3, #20]

  /* Reset interrupt pending bits for the selected stream */
  if (DMAy_Streamx == DMA1_Stream0)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	4a46      	ldr	r2, [pc, #280]	; (8003cd4 <DMA_DeInit+0x154>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d103      	bne.n	8003bc8 <DMA_DeInit+0x48>
  {
    /* Reset interrupt pending bits for DMA1 Stream0 */
    DMA1->LIFCR = DMA_Stream0_IT_MASK;
 8003bc0:	4b45      	ldr	r3, [pc, #276]	; (8003cd8 <DMA_DeInit+0x158>)
 8003bc2:	223d      	movs	r2, #61	; 0x3d
 8003bc4:	609a      	str	r2, [r3, #8]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 8003bc6:	e07e      	b.n	8003cc6 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream1)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	4a44      	ldr	r2, [pc, #272]	; (8003cdc <DMA_DeInit+0x15c>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d104      	bne.n	8003bda <DMA_DeInit+0x5a>
    DMA1->LIFCR = DMA_Stream1_IT_MASK;
 8003bd0:	4b41      	ldr	r3, [pc, #260]	; (8003cd8 <DMA_DeInit+0x158>)
 8003bd2:	f44f 6274 	mov.w	r2, #3904	; 0xf40
 8003bd6:	609a      	str	r2, [r3, #8]
}
 8003bd8:	e075      	b.n	8003cc6 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream2)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	4a40      	ldr	r2, [pc, #256]	; (8003ce0 <DMA_DeInit+0x160>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d104      	bne.n	8003bec <DMA_DeInit+0x6c>
    DMA1->LIFCR = DMA_Stream2_IT_MASK;
 8003be2:	4b3d      	ldr	r3, [pc, #244]	; (8003cd8 <DMA_DeInit+0x158>)
 8003be4:	f44f 1274 	mov.w	r2, #3997696	; 0x3d0000
 8003be8:	609a      	str	r2, [r3, #8]
}
 8003bea:	e06c      	b.n	8003cc6 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream3)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	4a3d      	ldr	r2, [pc, #244]	; (8003ce4 <DMA_DeInit+0x164>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d104      	bne.n	8003bfe <DMA_DeInit+0x7e>
    DMA1->LIFCR = DMA_Stream3_IT_MASK;
 8003bf4:	4b38      	ldr	r3, [pc, #224]	; (8003cd8 <DMA_DeInit+0x158>)
 8003bf6:	f04f 6274 	mov.w	r2, #255852544	; 0xf400000
 8003bfa:	609a      	str	r2, [r3, #8]
}
 8003bfc:	e063      	b.n	8003cc6 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream4)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	4a39      	ldr	r2, [pc, #228]	; (8003ce8 <DMA_DeInit+0x168>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d103      	bne.n	8003c0e <DMA_DeInit+0x8e>
    DMA1->HIFCR = DMA_Stream4_IT_MASK;
 8003c06:	4b34      	ldr	r3, [pc, #208]	; (8003cd8 <DMA_DeInit+0x158>)
 8003c08:	4a38      	ldr	r2, [pc, #224]	; (8003cec <DMA_DeInit+0x16c>)
 8003c0a:	60da      	str	r2, [r3, #12]
}
 8003c0c:	e05b      	b.n	8003cc6 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream5)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	4a37      	ldr	r2, [pc, #220]	; (8003cf0 <DMA_DeInit+0x170>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d103      	bne.n	8003c1e <DMA_DeInit+0x9e>
    DMA1->HIFCR = DMA_Stream5_IT_MASK;
 8003c16:	4b30      	ldr	r3, [pc, #192]	; (8003cd8 <DMA_DeInit+0x158>)
 8003c18:	4a36      	ldr	r2, [pc, #216]	; (8003cf4 <DMA_DeInit+0x174>)
 8003c1a:	60da      	str	r2, [r3, #12]
}
 8003c1c:	e053      	b.n	8003cc6 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream6)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	4a35      	ldr	r2, [pc, #212]	; (8003cf8 <DMA_DeInit+0x178>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d103      	bne.n	8003c2e <DMA_DeInit+0xae>
    DMA1->HIFCR = (uint32_t)DMA_Stream6_IT_MASK;
 8003c26:	4b2c      	ldr	r3, [pc, #176]	; (8003cd8 <DMA_DeInit+0x158>)
 8003c28:	4a34      	ldr	r2, [pc, #208]	; (8003cfc <DMA_DeInit+0x17c>)
 8003c2a:	60da      	str	r2, [r3, #12]
}
 8003c2c:	e04b      	b.n	8003cc6 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream7)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	4a33      	ldr	r2, [pc, #204]	; (8003d00 <DMA_DeInit+0x180>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d104      	bne.n	8003c40 <DMA_DeInit+0xc0>
    DMA1->HIFCR = DMA_Stream7_IT_MASK;
 8003c36:	4b28      	ldr	r3, [pc, #160]	; (8003cd8 <DMA_DeInit+0x158>)
 8003c38:	f04f 523d 	mov.w	r2, #792723456	; 0x2f400000
 8003c3c:	60da      	str	r2, [r3, #12]
}
 8003c3e:	e042      	b.n	8003cc6 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream0)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	4a30      	ldr	r2, [pc, #192]	; (8003d04 <DMA_DeInit+0x184>)
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d103      	bne.n	8003c50 <DMA_DeInit+0xd0>
    DMA2->LIFCR = DMA_Stream0_IT_MASK;
 8003c48:	4b2f      	ldr	r3, [pc, #188]	; (8003d08 <DMA_DeInit+0x188>)
 8003c4a:	223d      	movs	r2, #61	; 0x3d
 8003c4c:	609a      	str	r2, [r3, #8]
}
 8003c4e:	e03a      	b.n	8003cc6 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream1)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	4a2e      	ldr	r2, [pc, #184]	; (8003d0c <DMA_DeInit+0x18c>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d104      	bne.n	8003c62 <DMA_DeInit+0xe2>
    DMA2->LIFCR = DMA_Stream1_IT_MASK;
 8003c58:	4b2b      	ldr	r3, [pc, #172]	; (8003d08 <DMA_DeInit+0x188>)
 8003c5a:	f44f 6274 	mov.w	r2, #3904	; 0xf40
 8003c5e:	609a      	str	r2, [r3, #8]
}
 8003c60:	e031      	b.n	8003cc6 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream2)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	4a2a      	ldr	r2, [pc, #168]	; (8003d10 <DMA_DeInit+0x190>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d104      	bne.n	8003c74 <DMA_DeInit+0xf4>
    DMA2->LIFCR = DMA_Stream2_IT_MASK;
 8003c6a:	4b27      	ldr	r3, [pc, #156]	; (8003d08 <DMA_DeInit+0x188>)
 8003c6c:	f44f 1274 	mov.w	r2, #3997696	; 0x3d0000
 8003c70:	609a      	str	r2, [r3, #8]
}
 8003c72:	e028      	b.n	8003cc6 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream3)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	4a27      	ldr	r2, [pc, #156]	; (8003d14 <DMA_DeInit+0x194>)
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d104      	bne.n	8003c86 <DMA_DeInit+0x106>
    DMA2->LIFCR = DMA_Stream3_IT_MASK;
 8003c7c:	4b22      	ldr	r3, [pc, #136]	; (8003d08 <DMA_DeInit+0x188>)
 8003c7e:	f04f 6274 	mov.w	r2, #255852544	; 0xf400000
 8003c82:	609a      	str	r2, [r3, #8]
}
 8003c84:	e01f      	b.n	8003cc6 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream4)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	4a23      	ldr	r2, [pc, #140]	; (8003d18 <DMA_DeInit+0x198>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d103      	bne.n	8003c96 <DMA_DeInit+0x116>
    DMA2->HIFCR = DMA_Stream4_IT_MASK;
 8003c8e:	4b1e      	ldr	r3, [pc, #120]	; (8003d08 <DMA_DeInit+0x188>)
 8003c90:	4a16      	ldr	r2, [pc, #88]	; (8003cec <DMA_DeInit+0x16c>)
 8003c92:	60da      	str	r2, [r3, #12]
}
 8003c94:	e017      	b.n	8003cc6 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream5)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	4a20      	ldr	r2, [pc, #128]	; (8003d1c <DMA_DeInit+0x19c>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d103      	bne.n	8003ca6 <DMA_DeInit+0x126>
    DMA2->HIFCR = DMA_Stream5_IT_MASK;
 8003c9e:	4b1a      	ldr	r3, [pc, #104]	; (8003d08 <DMA_DeInit+0x188>)
 8003ca0:	4a14      	ldr	r2, [pc, #80]	; (8003cf4 <DMA_DeInit+0x174>)
 8003ca2:	60da      	str	r2, [r3, #12]
}
 8003ca4:	e00f      	b.n	8003cc6 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream6)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	4a1d      	ldr	r2, [pc, #116]	; (8003d20 <DMA_DeInit+0x1a0>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d103      	bne.n	8003cb6 <DMA_DeInit+0x136>
    DMA2->HIFCR = DMA_Stream6_IT_MASK;
 8003cae:	4b16      	ldr	r3, [pc, #88]	; (8003d08 <DMA_DeInit+0x188>)
 8003cb0:	4a12      	ldr	r2, [pc, #72]	; (8003cfc <DMA_DeInit+0x17c>)
 8003cb2:	60da      	str	r2, [r3, #12]
}
 8003cb4:	e007      	b.n	8003cc6 <DMA_DeInit+0x146>
    if (DMAy_Streamx == DMA2_Stream7)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	4a1a      	ldr	r2, [pc, #104]	; (8003d24 <DMA_DeInit+0x1a4>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d103      	bne.n	8003cc6 <DMA_DeInit+0x146>
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
 8003cbe:	4b12      	ldr	r3, [pc, #72]	; (8003d08 <DMA_DeInit+0x188>)
 8003cc0:	f04f 523d 	mov.w	r2, #792723456	; 0x2f400000
 8003cc4:	60da      	str	r2, [r3, #12]
}
 8003cc6:	bf00      	nop
 8003cc8:	370c      	adds	r7, #12
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd0:	4770      	bx	lr
 8003cd2:	bf00      	nop
 8003cd4:	40026010 	.word	0x40026010
 8003cd8:	40026000 	.word	0x40026000
 8003cdc:	40026028 	.word	0x40026028
 8003ce0:	40026040 	.word	0x40026040
 8003ce4:	40026058 	.word	0x40026058
 8003ce8:	40026070 	.word	0x40026070
 8003cec:	2000003d 	.word	0x2000003d
 8003cf0:	40026088 	.word	0x40026088
 8003cf4:	20000f40 	.word	0x20000f40
 8003cf8:	400260a0 	.word	0x400260a0
 8003cfc:	203d0000 	.word	0x203d0000
 8003d00:	400260b8 	.word	0x400260b8
 8003d04:	40026410 	.word	0x40026410
 8003d08:	40026400 	.word	0x40026400
 8003d0c:	40026428 	.word	0x40026428
 8003d10:	40026440 	.word	0x40026440
 8003d14:	40026458 	.word	0x40026458
 8003d18:	40026470 	.word	0x40026470
 8003d1c:	40026488 	.word	0x40026488
 8003d20:	400264a0 	.word	0x400264a0
 8003d24:	400264b8 	.word	0x400264b8

08003d28 <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that contains
  *         the configuration information for the specified DMA Stream.  
  * @retval None
  */
void DMA_Init(DMA_Stream_TypeDef* DMAy_Streamx, DMA_InitTypeDef* DMA_InitStruct)
{
 8003d28:	b480      	push	{r7}
 8003d2a:	b085      	sub	sp, #20
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
 8003d30:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8003d32:	2300      	movs	r3, #0
 8003d34:	60fb      	str	r3, [r7, #12]
  assert_param(IS_DMA_MEMORY_BURST(DMA_InitStruct->DMA_MemoryBurst));
  assert_param(IS_DMA_PERIPHERAL_BURST(DMA_InitStruct->DMA_PeripheralBurst));

  /*------------------------- DMAy Streamx CR Configuration ------------------*/
  /* Get the DMAy_Streamx CR value */
  tmpreg = DMAy_Streamx->CR;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	60fb      	str	r3, [r7, #12]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003d3c:	68fa      	ldr	r2, [r7, #12]
 8003d3e:	4b25      	ldr	r3, [pc, #148]	; (8003dd4 <DMA_Init+0xac>)
 8003d40:	4013      	ands	r3, r2
 8003d42:	60fb      	str	r3, [r7, #12]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	681a      	ldr	r2, [r3, #0]
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	68db      	ldr	r3, [r3, #12]
 8003d4c:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	695b      	ldr	r3, [r3, #20]
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8003d52:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	699b      	ldr	r3, [r3, #24]
 8003d58:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	69db      	ldr	r3, [r3, #28]
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8003d5e:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	6a1b      	ldr	r3, [r3, #32]
 8003d64:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8003d6a:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d70:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8003d76:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d7c:	4313      	orrs	r3, r2
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8003d7e:	68fa      	ldr	r2, [r7, #12]
 8003d80:	4313      	orrs	r3, r2
 8003d82:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR register */
  DMAy_Streamx->CR = tmpreg;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	68fa      	ldr	r2, [r7, #12]
 8003d88:	601a      	str	r2, [r3, #0]

  /*------------------------- DMAy Streamx FCR Configuration -----------------*/
  /* Get the DMAy_Streamx FCR value */
  tmpreg = DMAy_Streamx->FCR;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	695b      	ldr	r3, [r3, #20]
 8003d8e:	60fb      	str	r3, [r7, #12]

  /* Clear DMDIS and FTH bits */
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	f023 0307 	bic.w	r3, r3, #7
 8003d96:	60fb      	str	r3, [r7, #12]

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003da0:	4313      	orrs	r3, r2
 8003da2:	68fa      	ldr	r2, [r7, #12]
 8003da4:	4313      	orrs	r3, r2
 8003da6:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR */
  DMAy_Streamx->FCR = tmpreg;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	68fa      	ldr	r2, [r7, #12]
 8003dac:	615a      	str	r2, [r3, #20]

  /*------------------------- DMAy Streamx NDTR Configuration ----------------*/
  /* Write to DMAy Streamx NDTR register */
  DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	691a      	ldr	r2, [r3, #16]
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	605a      	str	r2, [r3, #4]

  /*------------------------- DMAy Streamx PAR Configuration -----------------*/
  /* Write to DMAy Streamx PAR */
  DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	685a      	ldr	r2, [r3, #4]
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	609a      	str	r2, [r3, #8]

  /*------------------------- DMAy Streamx M0AR Configuration ----------------*/
  /* Write to DMAy Streamx M0AR */
  DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	689a      	ldr	r2, [r3, #8]
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	60da      	str	r2, [r3, #12]
}
 8003dc6:	bf00      	nop
 8003dc8:	3714      	adds	r7, #20
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd0:	4770      	bx	lr
 8003dd2:	bf00      	nop
 8003dd4:	f01c803f 	.word	0xf01c803f

08003dd8 <DMA_StructInit>:
  * @param  DMA_InitStruct : pointer to a DMA_InitTypeDef structure which will 
  *         be initialized.
  * @retval None
  */
void DMA_StructInit(DMA_InitTypeDef* DMA_InitStruct)
{
 8003dd8:	b480      	push	{r7}
 8003dda:	b083      	sub	sp, #12
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
  /*-------------- Reset DMA init structure parameters values ----------------*/
  /* Initialize the DMA_Channel member */
  DMA_InitStruct->DMA_Channel = 0;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2200      	movs	r2, #0
 8003de4:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA_PeripheralBaseAddr member */
  DMA_InitStruct->DMA_PeripheralBaseAddr = 0;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2200      	movs	r2, #0
 8003dea:	605a      	str	r2, [r3, #4]

  /* Initialize the DMA_Memory0BaseAddr member */
  DMA_InitStruct->DMA_Memory0BaseAddr = 0;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2200      	movs	r2, #0
 8003df0:	609a      	str	r2, [r3, #8]

  /* Initialize the DMA_DIR member */
  DMA_InitStruct->DMA_DIR = DMA_DIR_PeripheralToMemory;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2200      	movs	r2, #0
 8003df6:	60da      	str	r2, [r3, #12]

  /* Initialize the DMA_BufferSize member */
  DMA_InitStruct->DMA_BufferSize = 0;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	611a      	str	r2, [r3, #16]

  /* Initialize the DMA_PeripheralInc member */
  DMA_InitStruct->DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2200      	movs	r2, #0
 8003e02:	615a      	str	r2, [r3, #20]

  /* Initialize the DMA_MemoryInc member */
  DMA_InitStruct->DMA_MemoryInc = DMA_MemoryInc_Disable;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2200      	movs	r2, #0
 8003e08:	619a      	str	r2, [r3, #24]

  /* Initialize the DMA_PeripheralDataSize member */
  DMA_InitStruct->DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	61da      	str	r2, [r3, #28]

  /* Initialize the DMA_MemoryDataSize member */
  DMA_InitStruct->DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2200      	movs	r2, #0
 8003e14:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA_Mode member */
  DMA_InitStruct->DMA_Mode = DMA_Mode_Normal;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2200      	movs	r2, #0
 8003e1a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the DMA_Priority member */
  DMA_InitStruct->DMA_Priority = DMA_Priority_Low;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2200      	movs	r2, #0
 8003e20:	629a      	str	r2, [r3, #40]	; 0x28

  /* Initialize the DMA_FIFOMode member */
  DMA_InitStruct->DMA_FIFOMode = DMA_FIFOMode_Disable;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2200      	movs	r2, #0
 8003e26:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the DMA_FIFOThreshold member */
  DMA_InitStruct->DMA_FIFOThreshold = DMA_FIFOThreshold_1QuarterFull;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the DMA_MemoryBurst member */
  DMA_InitStruct->DMA_MemoryBurst = DMA_MemoryBurst_Single;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2200      	movs	r2, #0
 8003e32:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the DMA_PeripheralBurst member */
  DMA_InitStruct->DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2200      	movs	r2, #0
 8003e38:	639a      	str	r2, [r3, #56]	; 0x38
}
 8003e3a:	bf00      	nop
 8003e3c:	370c      	adds	r7, #12
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e44:	4770      	bx	lr

08003e46 <DMA_Cmd>:
  *        this single data is finished.            
  *    
  * @retval None
  */
void DMA_Cmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
{
 8003e46:	b480      	push	{r7}
 8003e48:	b083      	sub	sp, #12
 8003e4a:	af00      	add	r7, sp, #0
 8003e4c:	6078      	str	r0, [r7, #4]
 8003e4e:	460b      	mov	r3, r1
 8003e50:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8003e52:	78fb      	ldrb	r3, [r7, #3]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d006      	beq.n	8003e66 <DMA_Cmd+0x20>
  {
    /* Enable the selected DMAy Streamx by setting EN bit */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f043 0201 	orr.w	r2, r3, #1
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
  }
}
 8003e64:	e005      	b.n	8003e72 <DMA_Cmd+0x2c>
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f023 0201 	bic.w	r2, r3, #1
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	601a      	str	r2, [r3, #0]
}
 8003e72:	bf00      	nop
 8003e74:	370c      	adds	r7, #12
 8003e76:	46bd      	mov	sp, r7
 8003e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7c:	4770      	bx	lr

08003e7e <DMA_PeriphIncOffsetSizeConfig>:
  *            @arg DMA_PINCOS_WordAligned: Peripheral address increment offset is 
  *                                         fixed to 4 (32-bit aligned addresses). 
  * @retval None
  */
void DMA_PeriphIncOffsetSizeConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_Pincos)
{
 8003e7e:	b480      	push	{r7}
 8003e80:	b083      	sub	sp, #12
 8003e82:	af00      	add	r7, sp, #0
 8003e84:	6078      	str	r0, [r7, #4]
 8003e86:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_PINCOS_SIZE(DMA_Pincos));

  /* Check the needed Peripheral increment offset */
  if(DMA_Pincos != DMA_PINCOS_Psize)
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d006      	beq.n	8003e9c <DMA_PeriphIncOffsetSizeConfig+0x1e>
  {
    /* Configure DMA_SxCR_PINCOS bit with the input parameter */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_PINCOS;     
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear the PINCOS bit: Peripheral address incremented according to PSIZE */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_PINCOS;    
  }
}
 8003e9a:	e005      	b.n	8003ea8 <DMA_PeriphIncOffsetSizeConfig+0x2a>
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_PINCOS;    
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	601a      	str	r2, [r3, #0]
}
 8003ea8:	bf00      	nop
 8003eaa:	370c      	adds	r7, #12
 8003eac:	46bd      	mov	sp, r7
 8003eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb2:	4770      	bx	lr

08003eb4 <DMA_FlowControllerConfig>:
  *            @arg DMA_FlowCtrl_Peripheral: DMAy_Streamx transactions flow controller 
  *                                          is the peripheral.    
  * @retval None
  */
void DMA_FlowControllerConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FlowCtrl)
{
 8003eb4:	b480      	push	{r7}
 8003eb6:	b083      	sub	sp, #12
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
 8003ebc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_FLOW_CTRL(DMA_FlowCtrl));

  /* Check the needed flow controller  */
  if(DMA_FlowCtrl != DMA_FlowCtrl_Memory)
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d006      	beq.n	8003ed2 <DMA_FlowControllerConfig+0x1e>
  {
    /* Configure DMA_SxCR_PFCTRL bit with the input parameter */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_PFCTRL;   
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f043 0220 	orr.w	r2, r3, #32
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear the PFCTRL bit: Memory is the flow controller */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_PFCTRL;    
  }
}
 8003ed0:	e005      	b.n	8003ede <DMA_FlowControllerConfig+0x2a>
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_PFCTRL;    
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f023 0220 	bic.w	r2, r3, #32
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	601a      	str	r2, [r3, #0]
}
 8003ede:	bf00      	nop
 8003ee0:	370c      	adds	r7, #12
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee8:	4770      	bx	lr

08003eea <DMA_SetCurrDataCounter>:
  *         DMAy_SxPAR register is considered as Peripheral.
  *      
  * @retval The number of remaining data units in the current DMAy Streamx transfer.
  */
void DMA_SetCurrDataCounter(DMA_Stream_TypeDef* DMAy_Streamx, uint16_t Counter)
{
 8003eea:	b480      	push	{r7}
 8003eec:	b083      	sub	sp, #12
 8003eee:	af00      	add	r7, sp, #0
 8003ef0:	6078      	str	r0, [r7, #4]
 8003ef2:	460b      	mov	r3, r1
 8003ef4:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  /* Write the number of data units to be transferred */
  DMAy_Streamx->NDTR = (uint16_t)Counter;
 8003ef6:	887a      	ldrh	r2, [r7, #2]
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	605a      	str	r2, [r3, #4]
}
 8003efc:	bf00      	nop
 8003efe:	370c      	adds	r7, #12
 8003f00:	46bd      	mov	sp, r7
 8003f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f06:	4770      	bx	lr

08003f08 <DMA_GetCurrDataCounter>:
  * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
  *          to 7 to select the DMA Stream.
  * @retval The number of remaining data units in the current DMAy Streamx transfer.
  */
uint16_t DMA_GetCurrDataCounter(DMA_Stream_TypeDef* DMAy_Streamx)
{
 8003f08:	b480      	push	{r7}
 8003f0a:	b083      	sub	sp, #12
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  /* Return the number of remaining data units for DMAy Streamx */
  return ((uint16_t)(DMAy_Streamx->NDTR));
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	b29b      	uxth	r3, r3
}
 8003f16:	4618      	mov	r0, r3
 8003f18:	370c      	adds	r7, #12
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f20:	4770      	bx	lr

08003f22 <DMA_DoubleBufferModeConfig>:
  *   
  * @retval None
  */
void DMA_DoubleBufferModeConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t Memory1BaseAddr,
                                uint32_t DMA_CurrentMemory)
{  
 8003f22:	b480      	push	{r7}
 8003f24:	b085      	sub	sp, #20
 8003f26:	af00      	add	r7, sp, #0
 8003f28:	60f8      	str	r0, [r7, #12]
 8003f2a:	60b9      	str	r1, [r7, #8]
 8003f2c:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CURRENT_MEM(DMA_CurrentMemory));

  if (DMA_CurrentMemory != DMA_Memory_0)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d006      	beq.n	8003f42 <DMA_DoubleBufferModeConfig+0x20>
  {
    /* Set Memory 1 as current memory address */
    DMAy_Streamx->CR |= (uint32_t)(DMA_SxCR_CT);    
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	601a      	str	r2, [r3, #0]
 8003f40:	e005      	b.n	8003f4e <DMA_DoubleBufferModeConfig+0x2c>
  }
  else
  {
    /* Set Memory 0 as current memory address */
    DMAy_Streamx->CR &= ~(uint32_t)(DMA_SxCR_CT);    
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	601a      	str	r2, [r3, #0]
  }

  /* Write to DMAy Streamx M1AR */
  DMAy_Streamx->M1AR = Memory1BaseAddr;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	68ba      	ldr	r2, [r7, #8]
 8003f52:	611a      	str	r2, [r3, #16]
}
 8003f54:	bf00      	nop
 8003f56:	3714      	adds	r7, #20
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5e:	4770      	bx	lr

08003f60 <DMA_DoubleBufferModeCmd>:
  * @param  NewState: new state of the DMAy Streamx double buffer mode. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DMA_DoubleBufferModeCmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
{  
 8003f60:	b480      	push	{r7}
 8003f62:	b083      	sub	sp, #12
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
 8003f68:	460b      	mov	r3, r1
 8003f6a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Configure the Double Buffer mode */
  if (NewState != DISABLE)
 8003f6c:	78fb      	ldrb	r3, [r7, #3]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d006      	beq.n	8003f80 <DMA_DoubleBufferModeCmd+0x20>
  {
    /* Enable the Double buffer mode */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_DBM;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the Double buffer mode */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_DBM;
  }
}
 8003f7e:	e005      	b.n	8003f8c <DMA_DoubleBufferModeCmd+0x2c>
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_DBM;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	601a      	str	r2, [r3, #0]
}
 8003f8c:	bf00      	nop
 8003f8e:	370c      	adds	r7, #12
 8003f90:	46bd      	mov	sp, r7
 8003f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f96:	4770      	bx	lr

08003f98 <DMA_MemoryTargetConfig>:
  *  
  * @retval None
  */
void DMA_MemoryTargetConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t MemoryBaseAddr,
                           uint32_t DMA_MemoryTarget)
{
 8003f98:	b480      	push	{r7}
 8003f9a:	b085      	sub	sp, #20
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	60f8      	str	r0, [r7, #12]
 8003fa0:	60b9      	str	r1, [r7, #8]
 8003fa2:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CURRENT_MEM(DMA_MemoryTarget));
    
  /* Check the Memory target to be configured */
  if (DMA_MemoryTarget != DMA_Memory_0)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d003      	beq.n	8003fb2 <DMA_MemoryTargetConfig+0x1a>
  {
    /* Write to DMAy Streamx M1AR */
    DMAy_Streamx->M1AR = MemoryBaseAddr;    
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	68ba      	ldr	r2, [r7, #8]
 8003fae:	611a      	str	r2, [r3, #16]
  else
  {
    /* Write to DMAy Streamx M0AR */
    DMAy_Streamx->M0AR = MemoryBaseAddr;  
  }
}
 8003fb0:	e002      	b.n	8003fb8 <DMA_MemoryTargetConfig+0x20>
    DMAy_Streamx->M0AR = MemoryBaseAddr;  
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	68ba      	ldr	r2, [r7, #8]
 8003fb6:	60da      	str	r2, [r3, #12]
}
 8003fb8:	bf00      	nop
 8003fba:	3714      	adds	r7, #20
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc2:	4770      	bx	lr

08003fc4 <DMA_GetCurrentMemoryTarget>:
  * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
  *          to 7 to select the DMA Stream.
  * @retval The memory target number: 0 for Memory0 or 1 for Memory1. 
  */
uint32_t DMA_GetCurrentMemoryTarget(DMA_Stream_TypeDef* DMAy_Streamx)
{
 8003fc4:	b480      	push	{r7}
 8003fc6:	b085      	sub	sp, #20
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
 8003fcc:	2300      	movs	r3, #0
 8003fce:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  /* Get the current memory target */
  if ((DMAy_Streamx->CR & DMA_SxCR_CT) != 0)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d002      	beq.n	8003fe2 <DMA_GetCurrentMemoryTarget+0x1e>
  {
    /* Current memory buffer used is Memory 1 */
    tmp = 1;
 8003fdc:	2301      	movs	r3, #1
 8003fde:	60fb      	str	r3, [r7, #12]
 8003fe0:	e001      	b.n	8003fe6 <DMA_GetCurrentMemoryTarget+0x22>
  }  
  else
  {
    /* Current memory buffer used is Memory 0 */
    tmp = 0;    
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	60fb      	str	r3, [r7, #12]
  }
  return tmp;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
}
 8003fe8:	4618      	mov	r0, r3
 8003fea:	3714      	adds	r7, #20
 8003fec:	46bd      	mov	sp, r7
 8003fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff2:	4770      	bx	lr

08003ff4 <DMA_GetCmdStatus>:
  *          of this single data is finished.  
  *      
  * @retval Current state of the DMAy Streamx (ENABLE or DISABLE).
  */
FunctionalState DMA_GetCmdStatus(DMA_Stream_TypeDef* DMAy_Streamx)
{
 8003ff4:	b480      	push	{r7}
 8003ff6:	b085      	sub	sp, #20
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
  FunctionalState state = DISABLE;
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  if ((DMAy_Streamx->CR & (uint32_t)DMA_SxCR_EN) != 0)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f003 0301 	and.w	r3, r3, #1
 8004008:	2b00      	cmp	r3, #0
 800400a:	d002      	beq.n	8004012 <DMA_GetCmdStatus+0x1e>
  {
    /* The selected DMAy Streamx EN bit is set (DMA is still transferring) */
    state = ENABLE;
 800400c:	2301      	movs	r3, #1
 800400e:	73fb      	strb	r3, [r7, #15]
 8004010:	e001      	b.n	8004016 <DMA_GetCmdStatus+0x22>
  }
  else
  {
    /* The selected DMAy Streamx EN bit is cleared (DMA is disabled and 
        all transfers are complete) */
    state = DISABLE;
 8004012:	2300      	movs	r3, #0
 8004014:	73fb      	strb	r3, [r7, #15]
  }
  return state;
 8004016:	7bfb      	ldrb	r3, [r7, #15]
}
 8004018:	4618      	mov	r0, r3
 800401a:	3714      	adds	r7, #20
 800401c:	46bd      	mov	sp, r7
 800401e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004022:	4770      	bx	lr

08004024 <DMA_GetFIFOStatus>:
  *           - DMA_FIFOStatus_3QuartersFull: if more than 3 quarters-full.
  *           - DMA_FIFOStatus_Empty: when FIFO is empty
  *           - DMA_FIFOStatus_Full: when FIFO is full
  */
uint32_t DMA_GetFIFOStatus(DMA_Stream_TypeDef* DMAy_Streamx)
{
 8004024:	b480      	push	{r7}
 8004026:	b085      	sub	sp, #20
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800402c:	2300      	movs	r3, #0
 800402e:	60fb      	str	r3, [r7, #12]
 
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  
  /* Get the FIFO level bits */
  tmpreg = (uint32_t)((DMAy_Streamx->FCR & DMA_SxFCR_FS));
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	695b      	ldr	r3, [r3, #20]
 8004034:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004038:	60fb      	str	r3, [r7, #12]
  
  return tmpreg;
 800403a:	68fb      	ldr	r3, [r7, #12]
}
 800403c:	4618      	mov	r0, r3
 800403e:	3714      	adds	r7, #20
 8004040:	46bd      	mov	sp, r7
 8004042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004046:	4770      	bx	lr

08004048 <DMA_GetFlagStatus>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval The new state of DMA_FLAG (SET or RESET).
  */
FlagStatus DMA_GetFlagStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 8004048:	b480      	push	{r7}
 800404a:	b087      	sub	sp, #28
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
 8004050:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 8004052:	2300      	movs	r3, #0
 8004054:	75fb      	strb	r3, [r7, #23]
  DMA_TypeDef* DMAy;
  uint32_t tmpreg = 0;
 8004056:	2300      	movs	r3, #0
 8004058:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_GET_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	4a15      	ldr	r2, [pc, #84]	; (80040b4 <DMA_GetFlagStatus+0x6c>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d802      	bhi.n	8004068 <DMA_GetFlagStatus+0x20>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8004062:	4b15      	ldr	r3, [pc, #84]	; (80040b8 <DMA_GetFlagStatus+0x70>)
 8004064:	613b      	str	r3, [r7, #16]
 8004066:	e001      	b.n	800406c <DMA_GetFlagStatus+0x24>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8004068:	4b14      	ldr	r3, [pc, #80]	; (80040bc <DMA_GetFlagStatus+0x74>)
 800406a:	613b      	str	r3, [r7, #16]
  }

  /* Check if the flag is in HISR or LISR */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004072:	2b00      	cmp	r3, #0
 8004074:	d003      	beq.n	800407e <DMA_GetFlagStatus+0x36>
  {
    /* Get DMAy HISR register value */
    tmpreg = DMAy->HISR;
 8004076:	693b      	ldr	r3, [r7, #16]
 8004078:	685b      	ldr	r3, [r3, #4]
 800407a:	60fb      	str	r3, [r7, #12]
 800407c:	e002      	b.n	8004084 <DMA_GetFlagStatus+0x3c>
  }
  else
  {
    /* Get DMAy LISR register value */
    tmpreg = DMAy->LISR;
 800407e:	693b      	ldr	r3, [r7, #16]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	60fb      	str	r3, [r7, #12]
  }   
 
  /* Mask the reserved bits */
  tmpreg &= (uint32_t)RESERVED_MASK;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 800408a:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 800408e:	60fb      	str	r3, [r7, #12]

  /* Check the status of the specified DMA flag */
  if ((tmpreg & DMA_FLAG) != (uint32_t)RESET)
 8004090:	68fa      	ldr	r2, [r7, #12]
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	4013      	ands	r3, r2
 8004096:	2b00      	cmp	r3, #0
 8004098:	d002      	beq.n	80040a0 <DMA_GetFlagStatus+0x58>
  {
    /* DMA_FLAG is set */
    bitstatus = SET;
 800409a:	2301      	movs	r3, #1
 800409c:	75fb      	strb	r3, [r7, #23]
 800409e:	e001      	b.n	80040a4 <DMA_GetFlagStatus+0x5c>
  }
  else
  {
    /* DMA_FLAG is reset */
    bitstatus = RESET;
 80040a0:	2300      	movs	r3, #0
 80040a2:	75fb      	strb	r3, [r7, #23]
  }

  /* Return the DMA_FLAG status */
  return  bitstatus;
 80040a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80040a6:	4618      	mov	r0, r3
 80040a8:	371c      	adds	r7, #28
 80040aa:	46bd      	mov	sp, r7
 80040ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b0:	4770      	bx	lr
 80040b2:	bf00      	nop
 80040b4:	4002640f 	.word	0x4002640f
 80040b8:	40026000 	.word	0x40026000
 80040bc:	40026400 	.word	0x40026400

080040c0 <DMA_ClearFlag>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.   
  * @retval None
  */
void DMA_ClearFlag(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 80040c0:	b480      	push	{r7}
 80040c2:	b085      	sub	sp, #20
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
 80040c8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CLEAR_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	4a10      	ldr	r2, [pc, #64]	; (8004110 <DMA_ClearFlag+0x50>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d802      	bhi.n	80040d8 <DMA_ClearFlag+0x18>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 80040d2:	4b10      	ldr	r3, [pc, #64]	; (8004114 <DMA_ClearFlag+0x54>)
 80040d4:	60fb      	str	r3, [r7, #12]
 80040d6:	e001      	b.n	80040dc <DMA_ClearFlag+0x1c>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 80040d8:	4b0f      	ldr	r3, [pc, #60]	; (8004118 <DMA_ClearFlag+0x58>)
 80040da:	60fb      	str	r3, [r7, #12]
  }

  /* Check if LIFCR or HIFCR register is targeted */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d007      	beq.n	80040f6 <DMA_ClearFlag+0x36>
  {
    /* Set DMAy HIFCR register clear flag bits */
    DMAy->HIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 80040ec:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 80040f0:	68fa      	ldr	r2, [r7, #12]
 80040f2:	60d3      	str	r3, [r2, #12]
  else 
  {
    /* Set DMAy LIFCR register clear flag bits */
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
  }    
}
 80040f4:	e006      	b.n	8004104 <DMA_ClearFlag+0x44>
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 80040fc:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8004100:	68fa      	ldr	r2, [r7, #12]
 8004102:	6093      	str	r3, [r2, #8]
}
 8004104:	bf00      	nop
 8004106:	3714      	adds	r7, #20
 8004108:	46bd      	mov	sp, r7
 800410a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410e:	4770      	bx	lr
 8004110:	4002640f 	.word	0x4002640f
 8004114:	40026000 	.word	0x40026000
 8004118:	40026400 	.word	0x40026400

0800411c <DMA_ITConfig>:
  * @param  NewState: new state of the specified DMA interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DMA_ITConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT, FunctionalState NewState)
{
 800411c:	b480      	push	{r7}
 800411e:	b085      	sub	sp, #20
 8004120:	af00      	add	r7, sp, #0
 8004122:	60f8      	str	r0, [r7, #12]
 8004124:	60b9      	str	r1, [r7, #8]
 8004126:	4613      	mov	r3, r2
 8004128:	71fb      	strb	r3, [r7, #7]
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CONFIG_IT(DMA_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Check if the DMA_IT parameter contains a FIFO interrupt */
  if ((DMA_IT & DMA_IT_FE) != 0)
 800412a:	68bb      	ldr	r3, [r7, #8]
 800412c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004130:	2b00      	cmp	r3, #0
 8004132:	d00f      	beq.n	8004154 <DMA_ITConfig+0x38>
  {
    if (NewState != DISABLE)
 8004134:	79fb      	ldrb	r3, [r7, #7]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d006      	beq.n	8004148 <DMA_ITConfig+0x2c>
    {
      /* Enable the selected DMA FIFO interrupts */
      DMAy_Streamx->FCR |= (uint32_t)DMA_IT_FE;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	695b      	ldr	r3, [r3, #20]
 800413e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	615a      	str	r2, [r3, #20]
 8004146:	e005      	b.n	8004154 <DMA_ITConfig+0x38>
    }    
    else 
    {
      /* Disable the selected DMA FIFO interrupts */
      DMAy_Streamx->FCR &= ~(uint32_t)DMA_IT_FE;  
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	695b      	ldr	r3, [r3, #20]
 800414c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	615a      	str	r2, [r3, #20]
    }
  }

  /* Check if the DMA_IT parameter contains a Transfer interrupt */
  if (DMA_IT != DMA_IT_FE)
 8004154:	68bb      	ldr	r3, [r7, #8]
 8004156:	2b80      	cmp	r3, #128	; 0x80
 8004158:	d014      	beq.n	8004184 <DMA_ITConfig+0x68>
  {
    if (NewState != DISABLE)
 800415a:	79fb      	ldrb	r3, [r7, #7]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d008      	beq.n	8004172 <DMA_ITConfig+0x56>
    {
      /* Enable the selected DMA transfer interrupts */
      DMAy_Streamx->CR |= (uint32_t)(DMA_IT  & TRANSFER_IT_ENABLE_MASK);
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681a      	ldr	r2, [r3, #0]
 8004164:	68bb      	ldr	r3, [r7, #8]
 8004166:	f003 031e 	and.w	r3, r3, #30
 800416a:	431a      	orrs	r2, r3
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	601a      	str	r2, [r3, #0]
    {
      /* Disable the selected DMA transfer interrupts */
      DMAy_Streamx->CR &= ~(uint32_t)(DMA_IT & TRANSFER_IT_ENABLE_MASK);
    }    
  }
}
 8004170:	e008      	b.n	8004184 <DMA_ITConfig+0x68>
      DMAy_Streamx->CR &= ~(uint32_t)(DMA_IT & TRANSFER_IT_ENABLE_MASK);
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681a      	ldr	r2, [r3, #0]
 8004176:	68bb      	ldr	r3, [r7, #8]
 8004178:	f003 031e 	and.w	r3, r3, #30
 800417c:	43db      	mvns	r3, r3
 800417e:	401a      	ands	r2, r3
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	601a      	str	r2, [r3, #0]
}
 8004184:	bf00      	nop
 8004186:	3714      	adds	r7, #20
 8004188:	46bd      	mov	sp, r7
 800418a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418e:	4770      	bx	lr

08004190 <DMA_GetITStatus>:
  *            @arg DMA_IT_FEIFx:  Streamx FIFO error interrupt
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval The new state of DMA_IT (SET or RESET).
  */
ITStatus DMA_GetITStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT)
{
 8004190:	b480      	push	{r7}
 8004192:	b087      	sub	sp, #28
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
 8004198:	6039      	str	r1, [r7, #0]
  ITStatus bitstatus = RESET;
 800419a:	2300      	movs	r3, #0
 800419c:	75fb      	strb	r3, [r7, #23]
  DMA_TypeDef* DMAy;
  uint32_t tmpreg = 0, enablestatus = 0;
 800419e:	2300      	movs	r3, #0
 80041a0:	60fb      	str	r3, [r7, #12]
 80041a2:	2300      	movs	r3, #0
 80041a4:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_GET_IT(DMA_IT));
 
  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	4a22      	ldr	r2, [pc, #136]	; (8004234 <DMA_GetITStatus+0xa4>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d802      	bhi.n	80041b4 <DMA_GetITStatus+0x24>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 80041ae:	4b22      	ldr	r3, [pc, #136]	; (8004238 <DMA_GetITStatus+0xa8>)
 80041b0:	613b      	str	r3, [r7, #16]
 80041b2:	e001      	b.n	80041b8 <DMA_GetITStatus+0x28>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 80041b4:	4b21      	ldr	r3, [pc, #132]	; (800423c <DMA_GetITStatus+0xac>)
 80041b6:	613b      	str	r3, [r7, #16]
  }

  /* Check if the interrupt enable bit is in the CR or FCR register */
  if ((DMA_IT & TRANSFER_IT_MASK) != (uint32_t)RESET)
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 80041be:	f023 13c3 	bic.w	r3, r3, #12779715	; 0xc300c3
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d00a      	beq.n	80041dc <DMA_GetITStatus+0x4c>
  {
    /* Get the interrupt enable position mask in CR register */
    tmpreg = (uint32_t)((DMA_IT >> 11) & TRANSFER_IT_ENABLE_MASK);   
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	0adb      	lsrs	r3, r3, #11
 80041ca:	f003 031e 	and.w	r3, r3, #30
 80041ce:	60fb      	str	r3, [r7, #12]
    
    /* Check the enable bit in CR register */
    enablestatus = (uint32_t)(DMAy_Streamx->CR & tmpreg);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	68fa      	ldr	r2, [r7, #12]
 80041d6:	4013      	ands	r3, r2
 80041d8:	60bb      	str	r3, [r7, #8]
 80041da:	e004      	b.n	80041e6 <DMA_GetITStatus+0x56>
  }
  else 
  {
    /* Check the enable bit in FCR register */
    enablestatus = (uint32_t)(DMAy_Streamx->FCR & DMA_IT_FE); 
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	695b      	ldr	r3, [r3, #20]
 80041e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041e4:	60bb      	str	r3, [r7, #8]
  }
 
  /* Check if the interrupt pending flag is in LISR or HISR */
  if ((DMA_IT & HIGH_ISR_MASK) != (uint32_t)RESET)
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d003      	beq.n	80041f8 <DMA_GetITStatus+0x68>
  {
    /* Get DMAy HISR register value */
    tmpreg = DMAy->HISR ;
 80041f0:	693b      	ldr	r3, [r7, #16]
 80041f2:	685b      	ldr	r3, [r3, #4]
 80041f4:	60fb      	str	r3, [r7, #12]
 80041f6:	e002      	b.n	80041fe <DMA_GetITStatus+0x6e>
  }
  else
  {
    /* Get DMAy LISR register value */
    tmpreg = DMAy->LISR ;
 80041f8:	693b      	ldr	r3, [r7, #16]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	60fb      	str	r3, [r7, #12]
  } 

  /* mask all reserved bits */
  tmpreg &= (uint32_t)RESERVED_MASK;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8004204:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8004208:	60fb      	str	r3, [r7, #12]

  /* Check the status of the specified DMA interrupt */
  if (((tmpreg & DMA_IT) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
 800420a:	68fa      	ldr	r2, [r7, #12]
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	4013      	ands	r3, r2
 8004210:	2b00      	cmp	r3, #0
 8004212:	d005      	beq.n	8004220 <DMA_GetITStatus+0x90>
 8004214:	68bb      	ldr	r3, [r7, #8]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d002      	beq.n	8004220 <DMA_GetITStatus+0x90>
  {
    /* DMA_IT is set */
    bitstatus = SET;
 800421a:	2301      	movs	r3, #1
 800421c:	75fb      	strb	r3, [r7, #23]
 800421e:	e001      	b.n	8004224 <DMA_GetITStatus+0x94>
  }
  else
  {
    /* DMA_IT is reset */
    bitstatus = RESET;
 8004220:	2300      	movs	r3, #0
 8004222:	75fb      	strb	r3, [r7, #23]
  }

  /* Return the DMA_IT status */
  return  bitstatus;
 8004224:	7dfb      	ldrb	r3, [r7, #23]
}
 8004226:	4618      	mov	r0, r3
 8004228:	371c      	adds	r7, #28
 800422a:	46bd      	mov	sp, r7
 800422c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004230:	4770      	bx	lr
 8004232:	bf00      	nop
 8004234:	4002640f 	.word	0x4002640f
 8004238:	40026000 	.word	0x40026000
 800423c:	40026400 	.word	0x40026400

08004240 <DMA_ClearITPendingBit>:
  *            @arg DMA_IT_FEIFx:  Streamx FIFO error interrupt
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval None
  */
void DMA_ClearITPendingBit(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT)
{
 8004240:	b480      	push	{r7}
 8004242:	b085      	sub	sp, #20
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
 8004248:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CLEAR_IT(DMA_IT));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	4a10      	ldr	r2, [pc, #64]	; (8004290 <DMA_ClearITPendingBit+0x50>)
 800424e:	4293      	cmp	r3, r2
 8004250:	d802      	bhi.n	8004258 <DMA_ClearITPendingBit+0x18>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8004252:	4b10      	ldr	r3, [pc, #64]	; (8004294 <DMA_ClearITPendingBit+0x54>)
 8004254:	60fb      	str	r3, [r7, #12]
 8004256:	e001      	b.n	800425c <DMA_ClearITPendingBit+0x1c>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8004258:	4b0f      	ldr	r3, [pc, #60]	; (8004298 <DMA_ClearITPendingBit+0x58>)
 800425a:	60fb      	str	r3, [r7, #12]
  }

  /* Check if LIFCR or HIFCR register is targeted */
  if ((DMA_IT & HIGH_ISR_MASK) != (uint32_t)RESET)
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004262:	2b00      	cmp	r3, #0
 8004264:	d007      	beq.n	8004276 <DMA_ClearITPendingBit+0x36>
  {
    /* Set DMAy HIFCR register clear interrupt bits */
    DMAy->HIFCR = (uint32_t)(DMA_IT & RESERVED_MASK);
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 800426c:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8004270:	68fa      	ldr	r2, [r7, #12]
 8004272:	60d3      	str	r3, [r2, #12]
  else 
  {
    /* Set DMAy LIFCR register clear interrupt bits */
    DMAy->LIFCR = (uint32_t)(DMA_IT & RESERVED_MASK);
  }   
}
 8004274:	e006      	b.n	8004284 <DMA_ClearITPendingBit+0x44>
    DMAy->LIFCR = (uint32_t)(DMA_IT & RESERVED_MASK);
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 800427c:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8004280:	68fa      	ldr	r2, [r7, #12]
 8004282:	6093      	str	r3, [r2, #8]
}
 8004284:	bf00      	nop
 8004286:	3714      	adds	r7, #20
 8004288:	46bd      	mov	sp, r7
 800428a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428e:	4770      	bx	lr
 8004290:	4002640f 	.word	0x4002640f
 8004294:	40026000 	.word	0x40026000
 8004298:	40026400 	.word	0x40026400

0800429c <DMA2D_DeInit>:
  * @param  None
  * @retval None
  */

void DMA2D_DeInit(void)
{
 800429c:	b580      	push	{r7, lr}
 800429e:	af00      	add	r7, sp, #0
  /* Enable DMA2D reset state */
  RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_DMA2D, ENABLE);
 80042a0:	2101      	movs	r1, #1
 80042a2:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80042a6:	f004 fbdb 	bl	8008a60 <RCC_AHB1PeriphResetCmd>
  /* Release DMA2D from reset state */
  RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_DMA2D, DISABLE);
 80042aa:	2100      	movs	r1, #0
 80042ac:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80042b0:	f004 fbd6 	bl	8008a60 <RCC_AHB1PeriphResetCmd>
}
 80042b4:	bf00      	nop
 80042b6:	bd80      	pop	{r7, pc}

080042b8 <DMA2D_Init>:
  * @param  DMA2D_InitStruct: pointer to a DMA2D_InitTypeDef structure that contains
  *         the configuration information for the specified DMA2D peripheral.
  * @retval None
  */
void DMA2D_Init(DMA2D_InitTypeDef* DMA2D_InitStruct)
{
 80042b8:	b480      	push	{r7}
 80042ba:	b087      	sub	sp, #28
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]

  uint32_t outgreen = 0;
 80042c0:	2300      	movs	r3, #0
 80042c2:	617b      	str	r3, [r7, #20]
  uint32_t outred   = 0;
 80042c4:	2300      	movs	r3, #0
 80042c6:	613b      	str	r3, [r7, #16]
  uint32_t outalpha = 0;
 80042c8:	2300      	movs	r3, #0
 80042ca:	60fb      	str	r3, [r7, #12]
  uint32_t pixline  = 0;
 80042cc:	2300      	movs	r3, #0
 80042ce:	60bb      	str	r3, [r7, #8]
  assert_param(IS_DMA2D_OUTPUT_OFFSET(DMA2D_InitStruct->DMA2D_OutputOffset));
  assert_param(IS_DMA2D_LINE(DMA2D_InitStruct->DMA2D_NumberOfLine));
  assert_param(IS_DMA2D_PIXEL(DMA2D_InitStruct->DMA2D_PixelPerLine));

  /* Configures the DMA2D operation mode */
  DMA2D->CR &= (uint32_t)CR_MASK;
 80042d0:	4b50      	ldr	r3, [pc, #320]	; (8004414 <DMA2D_Init+0x15c>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4a4f      	ldr	r2, [pc, #316]	; (8004414 <DMA2D_Init+0x15c>)
 80042d6:	f023 1303 	bic.w	r3, r3, #196611	; 0x30003
 80042da:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 80042de:	6013      	str	r3, [r2, #0]
  DMA2D->CR |= (DMA2D_InitStruct->DMA2D_Mode);
 80042e0:	4b4c      	ldr	r3, [pc, #304]	; (8004414 <DMA2D_Init+0x15c>)
 80042e2:	681a      	ldr	r2, [r3, #0]
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	494a      	ldr	r1, [pc, #296]	; (8004414 <DMA2D_Init+0x15c>)
 80042ea:	4313      	orrs	r3, r2
 80042ec:	600b      	str	r3, [r1, #0]

  /* Configures the color mode of the output image */
  DMA2D->OPFCCR &= ~(uint32_t)DMA2D_OPFCCR_CM;
 80042ee:	4b49      	ldr	r3, [pc, #292]	; (8004414 <DMA2D_Init+0x15c>)
 80042f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042f2:	4a48      	ldr	r2, [pc, #288]	; (8004414 <DMA2D_Init+0x15c>)
 80042f4:	f023 0307 	bic.w	r3, r3, #7
 80042f8:	6353      	str	r3, [r2, #52]	; 0x34
  DMA2D->OPFCCR |= (DMA2D_InitStruct->DMA2D_CMode);
 80042fa:	4b46      	ldr	r3, [pc, #280]	; (8004414 <DMA2D_Init+0x15c>)
 80042fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	685b      	ldr	r3, [r3, #4]
 8004302:	4944      	ldr	r1, [pc, #272]	; (8004414 <DMA2D_Init+0x15c>)
 8004304:	4313      	orrs	r3, r2
 8004306:	634b      	str	r3, [r1, #52]	; 0x34

  /* Configures the output color */

  if (DMA2D_InitStruct->DMA2D_CMode == DMA2D_ARGB8888)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	685b      	ldr	r3, [r3, #4]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d10c      	bne.n	800432a <DMA2D_Init+0x72>
  {
    outgreen = DMA2D_InitStruct->DMA2D_OutputGreen << 8;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	68db      	ldr	r3, [r3, #12]
 8004314:	021b      	lsls	r3, r3, #8
 8004316:	617b      	str	r3, [r7, #20]
    outred = DMA2D_InitStruct->DMA2D_OutputRed << 16;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	691b      	ldr	r3, [r3, #16]
 800431c:	041b      	lsls	r3, r3, #16
 800431e:	613b      	str	r3, [r7, #16]
    outalpha = DMA2D_InitStruct->DMA2D_OutputAlpha << 24;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	695b      	ldr	r3, [r3, #20]
 8004324:	061b      	lsls	r3, r3, #24
 8004326:	60fb      	str	r3, [r7, #12]
 8004328:	e03a      	b.n	80043a0 <DMA2D_Init+0xe8>
  }
  else
  
    if (DMA2D_InitStruct->DMA2D_CMode == DMA2D_RGB888)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	685b      	ldr	r3, [r3, #4]
 800432e:	2b01      	cmp	r3, #1
 8004330:	d10a      	bne.n	8004348 <DMA2D_Init+0x90>
    {
      outgreen = DMA2D_InitStruct->DMA2D_OutputGreen << 8;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	68db      	ldr	r3, [r3, #12]
 8004336:	021b      	lsls	r3, r3, #8
 8004338:	617b      	str	r3, [r7, #20]
      outred = DMA2D_InitStruct->DMA2D_OutputRed << 16;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	691b      	ldr	r3, [r3, #16]
 800433e:	041b      	lsls	r3, r3, #16
 8004340:	613b      	str	r3, [r7, #16]
      outalpha = (uint32_t)0x00000000;
 8004342:	2300      	movs	r3, #0
 8004344:	60fb      	str	r3, [r7, #12]
 8004346:	e02b      	b.n	80043a0 <DMA2D_Init+0xe8>
    }
     
  else

    if (DMA2D_InitStruct->DMA2D_CMode == DMA2D_RGB565)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	685b      	ldr	r3, [r3, #4]
 800434c:	2b02      	cmp	r3, #2
 800434e:	d10a      	bne.n	8004366 <DMA2D_Init+0xae>
    {
      outgreen = DMA2D_InitStruct->DMA2D_OutputGreen << 5;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	68db      	ldr	r3, [r3, #12]
 8004354:	015b      	lsls	r3, r3, #5
 8004356:	617b      	str	r3, [r7, #20]
      outred = DMA2D_InitStruct->DMA2D_OutputRed << 11;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	691b      	ldr	r3, [r3, #16]
 800435c:	02db      	lsls	r3, r3, #11
 800435e:	613b      	str	r3, [r7, #16]
      outalpha = (uint32_t)0x00000000;
 8004360:	2300      	movs	r3, #0
 8004362:	60fb      	str	r3, [r7, #12]
 8004364:	e01c      	b.n	80043a0 <DMA2D_Init+0xe8>
    }

  else

    if (DMA2D_InitStruct->DMA2D_CMode == DMA2D_ARGB1555)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	685b      	ldr	r3, [r3, #4]
 800436a:	2b03      	cmp	r3, #3
 800436c:	d10c      	bne.n	8004388 <DMA2D_Init+0xd0>
    {  
      outgreen = DMA2D_InitStruct->DMA2D_OutputGreen << 5;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	68db      	ldr	r3, [r3, #12]
 8004372:	015b      	lsls	r3, r3, #5
 8004374:	617b      	str	r3, [r7, #20]
      outred = DMA2D_InitStruct->DMA2D_OutputRed << 10;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	691b      	ldr	r3, [r3, #16]
 800437a:	029b      	lsls	r3, r3, #10
 800437c:	613b      	str	r3, [r7, #16]
      outalpha = DMA2D_InitStruct->DMA2D_OutputAlpha << 15;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	695b      	ldr	r3, [r3, #20]
 8004382:	03db      	lsls	r3, r3, #15
 8004384:	60fb      	str	r3, [r7, #12]
 8004386:	e00b      	b.n	80043a0 <DMA2D_Init+0xe8>
    }

  else /* DMA2D_CMode = DMA2D_ARGB4444 */
  {
    outgreen = DMA2D_InitStruct->DMA2D_OutputGreen << 4;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	68db      	ldr	r3, [r3, #12]
 800438c:	011b      	lsls	r3, r3, #4
 800438e:	617b      	str	r3, [r7, #20]
    outred = DMA2D_InitStruct->DMA2D_OutputRed << 8;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	691b      	ldr	r3, [r3, #16]
 8004394:	021b      	lsls	r3, r3, #8
 8004396:	613b      	str	r3, [r7, #16]
    outalpha = DMA2D_InitStruct->DMA2D_OutputAlpha << 12;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	695b      	ldr	r3, [r3, #20]
 800439c:	031b      	lsls	r3, r3, #12
 800439e:	60fb      	str	r3, [r7, #12]
  }  
  DMA2D->OCOLR |= ((outgreen) | (outred) | (DMA2D_InitStruct->DMA2D_OutputBlue) | (outalpha));
 80043a0:	4b1c      	ldr	r3, [pc, #112]	; (8004414 <DMA2D_Init+0x15c>)
 80043a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80043a4:	6979      	ldr	r1, [r7, #20]
 80043a6:	693b      	ldr	r3, [r7, #16]
 80043a8:	4319      	orrs	r1, r3
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	689b      	ldr	r3, [r3, #8]
 80043ae:	4319      	orrs	r1, r3
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	430b      	orrs	r3, r1
 80043b4:	4917      	ldr	r1, [pc, #92]	; (8004414 <DMA2D_Init+0x15c>)
 80043b6:	4313      	orrs	r3, r2
 80043b8:	638b      	str	r3, [r1, #56]	; 0x38

  /* Configures the output memory address */
  DMA2D->OMAR = (DMA2D_InitStruct->DMA2D_OutputMemoryAdd);
 80043ba:	4a16      	ldr	r2, [pc, #88]	; (8004414 <DMA2D_Init+0x15c>)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	699b      	ldr	r3, [r3, #24]
 80043c0:	63d3      	str	r3, [r2, #60]	; 0x3c

  /* Configure  the line Offset */
  DMA2D->OOR &= ~(uint32_t)DMA2D_OOR_LO;
 80043c2:	4b14      	ldr	r3, [pc, #80]	; (8004414 <DMA2D_Init+0x15c>)
 80043c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043c6:	4a13      	ldr	r2, [pc, #76]	; (8004414 <DMA2D_Init+0x15c>)
 80043c8:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80043cc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80043d0:	6413      	str	r3, [r2, #64]	; 0x40
  DMA2D->OOR |= (DMA2D_InitStruct->DMA2D_OutputOffset);
 80043d2:	4b10      	ldr	r3, [pc, #64]	; (8004414 <DMA2D_Init+0x15c>)
 80043d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	69db      	ldr	r3, [r3, #28]
 80043da:	490e      	ldr	r1, [pc, #56]	; (8004414 <DMA2D_Init+0x15c>)
 80043dc:	4313      	orrs	r3, r2
 80043de:	640b      	str	r3, [r1, #64]	; 0x40

  /* Configure the number of line and pixel per line */
  pixline = DMA2D_InitStruct->DMA2D_PixelPerLine << 16; 
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043e4:	041b      	lsls	r3, r3, #16
 80043e6:	60bb      	str	r3, [r7, #8]
  DMA2D->NLR &= ~(DMA2D_NLR_NL | DMA2D_NLR_PL);
 80043e8:	4b0a      	ldr	r3, [pc, #40]	; (8004414 <DMA2D_Init+0x15c>)
 80043ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043ec:	4a09      	ldr	r2, [pc, #36]	; (8004414 <DMA2D_Init+0x15c>)
 80043ee:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80043f2:	6453      	str	r3, [r2, #68]	; 0x44
  DMA2D->NLR |= ((DMA2D_InitStruct->DMA2D_NumberOfLine) | (pixline));
 80043f4:	4b07      	ldr	r3, [pc, #28]	; (8004414 <DMA2D_Init+0x15c>)
 80043f6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6a19      	ldr	r1, [r3, #32]
 80043fc:	68bb      	ldr	r3, [r7, #8]
 80043fe:	430b      	orrs	r3, r1
 8004400:	4904      	ldr	r1, [pc, #16]	; (8004414 <DMA2D_Init+0x15c>)
 8004402:	4313      	orrs	r3, r2
 8004404:	644b      	str	r3, [r1, #68]	; 0x44
  * @brief  Fills each DMA2D_InitStruct member with its default value.
  * @param  DMA2D_InitStruct: pointer to a DMA2D_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
}
 8004406:	bf00      	nop
 8004408:	371c      	adds	r7, #28
 800440a:	46bd      	mov	sp, r7
 800440c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004410:	4770      	bx	lr
 8004412:	bf00      	nop
 8004414:	4002b000 	.word	0x4002b000

08004418 <DMA2D_StructInit>:
void DMA2D_StructInit(DMA2D_InitTypeDef* DMA2D_InitStruct)
{
 8004418:	b480      	push	{r7}
 800441a:	b083      	sub	sp, #12
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
  /* Initialize the transfer mode member */
  DMA2D_InitStruct->DMA2D_Mode = DMA2D_M2M;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2200      	movs	r2, #0
 8004424:	601a      	str	r2, [r3, #0]

  /* Initialize the output color mode members */
  DMA2D_InitStruct->DMA2D_CMode = DMA2D_ARGB8888;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2200      	movs	r2, #0
 800442a:	605a      	str	r2, [r3, #4]

  /* Initialize the alpha and RGB values */
  DMA2D_InitStruct->DMA2D_OutputGreen = 0x00;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2200      	movs	r2, #0
 8004430:	60da      	str	r2, [r3, #12]
  DMA2D_InitStruct->DMA2D_OutputBlue = 0x00;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2200      	movs	r2, #0
 8004436:	609a      	str	r2, [r3, #8]
  DMA2D_InitStruct->DMA2D_OutputRed = 0x00;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2200      	movs	r2, #0
 800443c:	611a      	str	r2, [r3, #16]
  DMA2D_InitStruct->DMA2D_OutputAlpha = 0x00;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2200      	movs	r2, #0
 8004442:	615a      	str	r2, [r3, #20]

  /* Initialize the output memory address */
  DMA2D_InitStruct->DMA2D_OutputMemoryAdd = 0x00;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2200      	movs	r2, #0
 8004448:	619a      	str	r2, [r3, #24]

  /* Initialize the output offset */
  DMA2D_InitStruct->DMA2D_OutputOffset = 0x00;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2200      	movs	r2, #0
 800444e:	61da      	str	r2, [r3, #28]

  /* Initialize the number of line and the number of pixel per line */
  DMA2D_InitStruct->DMA2D_NumberOfLine = 0x00;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2200      	movs	r2, #0
 8004454:	621a      	str	r2, [r3, #32]
  DMA2D_InitStruct->DMA2D_PixelPerLine = 0x00;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2200      	movs	r2, #0
 800445a:	625a      	str	r2, [r3, #36]	; 0x24
}
 800445c:	bf00      	nop
 800445e:	370c      	adds	r7, #12
 8004460:	46bd      	mov	sp, r7
 8004462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004466:	4770      	bx	lr

08004468 <DMA2D_StartTransfer>:
  * @param 
  * @retval None
  */

void DMA2D_StartTransfer(void)
{
 8004468:	b480      	push	{r7}
 800446a:	af00      	add	r7, sp, #0
    /* Start DMA2D transfer by setting START bit */
    DMA2D->CR |= (uint32_t)DMA2D_CR_START;
 800446c:	4b05      	ldr	r3, [pc, #20]	; (8004484 <DMA2D_StartTransfer+0x1c>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	4a04      	ldr	r2, [pc, #16]	; (8004484 <DMA2D_StartTransfer+0x1c>)
 8004472:	f043 0301 	orr.w	r3, r3, #1
 8004476:	6013      	str	r3, [r2, #0]
}
 8004478:	bf00      	nop
 800447a:	46bd      	mov	sp, r7
 800447c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004480:	4770      	bx	lr
 8004482:	bf00      	nop
 8004484:	4002b000 	.word	0x4002b000

08004488 <DMA2D_AbortTransfer>:
  * @param
  * @retval None
  */

void DMA2D_AbortTransfer(void)
{
 8004488:	b480      	push	{r7}
 800448a:	af00      	add	r7, sp, #0
    /* Start DMA2D transfer by setting START bit */
    DMA2D->CR |= (uint32_t)DMA2D_CR_ABORT;
 800448c:	4b05      	ldr	r3, [pc, #20]	; (80044a4 <DMA2D_AbortTransfer+0x1c>)
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4a04      	ldr	r2, [pc, #16]	; (80044a4 <DMA2D_AbortTransfer+0x1c>)
 8004492:	f043 0304 	orr.w	r3, r3, #4
 8004496:	6013      	str	r3, [r2, #0]

}
 8004498:	bf00      	nop
 800449a:	46bd      	mov	sp, r7
 800449c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a0:	4770      	bx	lr
 80044a2:	bf00      	nop
 80044a4:	4002b000 	.word	0x4002b000

080044a8 <DMA2D_Suspend>:
  * @param  NewState: new state of the DMA2D peripheral.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DMA2D_Suspend(FunctionalState NewState)
{
 80044a8:	b480      	push	{r7}
 80044aa:	b083      	sub	sp, #12
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	4603      	mov	r3, r0
 80044b0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80044b2:	79fb      	ldrb	r3, [r7, #7]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d006      	beq.n	80044c6 <DMA2D_Suspend+0x1e>
  {
    /* Suspend DMA2D transfer by setting STOP bit */
    DMA2D->CR |= (uint32_t)DMA2D_CR_SUSP;
 80044b8:	4b09      	ldr	r3, [pc, #36]	; (80044e0 <DMA2D_Suspend+0x38>)
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	4a08      	ldr	r2, [pc, #32]	; (80044e0 <DMA2D_Suspend+0x38>)
 80044be:	f043 0302 	orr.w	r3, r3, #2
 80044c2:	6013      	str	r3, [r2, #0]
  else
  {
    /* Continue DMA2D transfer by clearing STOP bit */
    DMA2D->CR &= ~(uint32_t)DMA2D_CR_SUSP;
  }
}
 80044c4:	e005      	b.n	80044d2 <DMA2D_Suspend+0x2a>
    DMA2D->CR &= ~(uint32_t)DMA2D_CR_SUSP;
 80044c6:	4b06      	ldr	r3, [pc, #24]	; (80044e0 <DMA2D_Suspend+0x38>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	4a05      	ldr	r2, [pc, #20]	; (80044e0 <DMA2D_Suspend+0x38>)
 80044cc:	f023 0302 	bic.w	r3, r3, #2
 80044d0:	6013      	str	r3, [r2, #0]
}
 80044d2:	bf00      	nop
 80044d4:	370c      	adds	r7, #12
 80044d6:	46bd      	mov	sp, r7
 80044d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044dc:	4770      	bx	lr
 80044de:	bf00      	nop
 80044e0:	4002b000 	.word	0x4002b000

080044e4 <DMA2D_FGConfig>:
  * @param  DMA2D_FGStruct: pointer to a DMA2D_FGTypeDef structure that contains
  *         the configuration information for the specified Background.
  * @retval None
  */
void DMA2D_FGConfig(DMA2D_FG_InitTypeDef* DMA2D_FG_InitStruct)
{
 80044e4:	b480      	push	{r7}
 80044e6:	b089      	sub	sp, #36	; 0x24
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]

  uint32_t fg_clutcolormode = 0;
 80044ec:	2300      	movs	r3, #0
 80044ee:	61fb      	str	r3, [r7, #28]
  uint32_t fg_clutsize = 0;
 80044f0:	2300      	movs	r3, #0
 80044f2:	61bb      	str	r3, [r7, #24]
  uint32_t fg_alpha_mode = 0;
 80044f4:	2300      	movs	r3, #0
 80044f6:	617b      	str	r3, [r7, #20]
  uint32_t fg_alphavalue = 0;
 80044f8:	2300      	movs	r3, #0
 80044fa:	613b      	str	r3, [r7, #16]
  uint32_t fg_colorgreen = 0;
 80044fc:	2300      	movs	r3, #0
 80044fe:	60fb      	str	r3, [r7, #12]
  uint32_t fg_colorred = 0;
 8004500:	2300      	movs	r3, #0
 8004502:	60bb      	str	r3, [r7, #8]
  assert_param(IS_DMA2D_FGC_BLUE(DMA2D_FG_InitStruct->DMA2D_FGC_BLUE));
  assert_param(IS_DMA2D_FGC_GREEN(DMA2D_FG_InitStruct->DMA2D_FGC_GREEN));
  assert_param(IS_DMA2D_FGC_RED(DMA2D_FG_InitStruct->DMA2D_FGC_RED));

  /* Configures the FG memory address */
  DMA2D->FGMAR = (DMA2D_FG_InitStruct->DMA2D_FGMA);
 8004504:	4a2d      	ldr	r2, [pc, #180]	; (80045bc <DMA2D_FGConfig+0xd8>)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	60d3      	str	r3, [r2, #12]

  /* Configures the FG offset */
  DMA2D->FGOR &= ~(uint32_t)DMA2D_FGOR_LO;
 800450c:	4b2b      	ldr	r3, [pc, #172]	; (80045bc <DMA2D_FGConfig+0xd8>)
 800450e:	691b      	ldr	r3, [r3, #16]
 8004510:	4a2a      	ldr	r2, [pc, #168]	; (80045bc <DMA2D_FGConfig+0xd8>)
 8004512:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8004516:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800451a:	6113      	str	r3, [r2, #16]
  DMA2D->FGOR |= (DMA2D_FG_InitStruct->DMA2D_FGO);
 800451c:	4b27      	ldr	r3, [pc, #156]	; (80045bc <DMA2D_FGConfig+0xd8>)
 800451e:	691a      	ldr	r2, [r3, #16]
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	685b      	ldr	r3, [r3, #4]
 8004524:	4925      	ldr	r1, [pc, #148]	; (80045bc <DMA2D_FGConfig+0xd8>)
 8004526:	4313      	orrs	r3, r2
 8004528:	610b      	str	r3, [r1, #16]

  /* Configures foreground Pixel Format Convertor */
  DMA2D->FGPFCCR &= (uint32_t)PFCCR_MASK;
 800452a:	4b24      	ldr	r3, [pc, #144]	; (80045bc <DMA2D_FGConfig+0xd8>)
 800452c:	69da      	ldr	r2, [r3, #28]
 800452e:	4923      	ldr	r1, [pc, #140]	; (80045bc <DMA2D_FGConfig+0xd8>)
 8004530:	4b23      	ldr	r3, [pc, #140]	; (80045c0 <DMA2D_FGConfig+0xdc>)
 8004532:	4013      	ands	r3, r2
 8004534:	61cb      	str	r3, [r1, #28]
  fg_clutcolormode = DMA2D_FG_InitStruct->DMA2D_FG_CLUT_CM << 4;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	68db      	ldr	r3, [r3, #12]
 800453a:	011b      	lsls	r3, r3, #4
 800453c:	61fb      	str	r3, [r7, #28]
  fg_clutsize = DMA2D_FG_InitStruct->DMA2D_FG_CLUT_SIZE << 8;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	691b      	ldr	r3, [r3, #16]
 8004542:	021b      	lsls	r3, r3, #8
 8004544:	61bb      	str	r3, [r7, #24]
  fg_alpha_mode = DMA2D_FG_InitStruct->DMA2D_FGPFC_ALPHA_MODE << 16;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	695b      	ldr	r3, [r3, #20]
 800454a:	041b      	lsls	r3, r3, #16
 800454c:	617b      	str	r3, [r7, #20]
  fg_alphavalue = DMA2D_FG_InitStruct->DMA2D_FGPFC_ALPHA_VALUE << 24;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	699b      	ldr	r3, [r3, #24]
 8004552:	061b      	lsls	r3, r3, #24
 8004554:	613b      	str	r3, [r7, #16]
  DMA2D->FGPFCCR |= (DMA2D_FG_InitStruct->DMA2D_FGCM | fg_clutcolormode | fg_clutsize | \
 8004556:	4b19      	ldr	r3, [pc, #100]	; (80045bc <DMA2D_FGConfig+0xd8>)
 8004558:	69da      	ldr	r2, [r3, #28]
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6899      	ldr	r1, [r3, #8]
 800455e:	69fb      	ldr	r3, [r7, #28]
 8004560:	4319      	orrs	r1, r3
 8004562:	69bb      	ldr	r3, [r7, #24]
 8004564:	4319      	orrs	r1, r3
 8004566:	697b      	ldr	r3, [r7, #20]
 8004568:	4319      	orrs	r1, r3
                    fg_alpha_mode | fg_alphavalue);
 800456a:	693b      	ldr	r3, [r7, #16]
 800456c:	430b      	orrs	r3, r1
  DMA2D->FGPFCCR |= (DMA2D_FG_InitStruct->DMA2D_FGCM | fg_clutcolormode | fg_clutsize | \
 800456e:	4913      	ldr	r1, [pc, #76]	; (80045bc <DMA2D_FGConfig+0xd8>)
 8004570:	4313      	orrs	r3, r2
 8004572:	61cb      	str	r3, [r1, #28]

  /* Configures foreground color */
  DMA2D->FGCOLR &= ~(DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | DMA2D_FGCOLR_RED);
 8004574:	4b11      	ldr	r3, [pc, #68]	; (80045bc <DMA2D_FGConfig+0xd8>)
 8004576:	6a1b      	ldr	r3, [r3, #32]
 8004578:	4a10      	ldr	r2, [pc, #64]	; (80045bc <DMA2D_FGConfig+0xd8>)
 800457a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800457e:	6213      	str	r3, [r2, #32]
  fg_colorgreen = DMA2D_FG_InitStruct->DMA2D_FGC_GREEN << 8;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6a1b      	ldr	r3, [r3, #32]
 8004584:	021b      	lsls	r3, r3, #8
 8004586:	60fb      	str	r3, [r7, #12]
  fg_colorred = DMA2D_FG_InitStruct->DMA2D_FGC_RED << 16;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800458c:	041b      	lsls	r3, r3, #16
 800458e:	60bb      	str	r3, [r7, #8]
  DMA2D->FGCOLR |= (DMA2D_FG_InitStruct->DMA2D_FGC_BLUE | fg_colorgreen | fg_colorred);
 8004590:	4b0a      	ldr	r3, [pc, #40]	; (80045bc <DMA2D_FGConfig+0xd8>)
 8004592:	6a1a      	ldr	r2, [r3, #32]
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	69d9      	ldr	r1, [r3, #28]
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	4319      	orrs	r1, r3
 800459c:	68bb      	ldr	r3, [r7, #8]
 800459e:	430b      	orrs	r3, r1
 80045a0:	4906      	ldr	r1, [pc, #24]	; (80045bc <DMA2D_FGConfig+0xd8>)
 80045a2:	4313      	orrs	r3, r2
 80045a4:	620b      	str	r3, [r1, #32]

  /* Configures foreground CLUT memory address */
  DMA2D->FGCMAR = DMA2D_FG_InitStruct->DMA2D_FGCMAR;
 80045a6:	4a05      	ldr	r2, [pc, #20]	; (80045bc <DMA2D_FGConfig+0xd8>)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045ac:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 80045ae:	bf00      	nop
 80045b0:	3724      	adds	r7, #36	; 0x24
 80045b2:	46bd      	mov	sp, r7
 80045b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b8:	4770      	bx	lr
 80045ba:	bf00      	nop
 80045bc:	4002b000 	.word	0x4002b000
 80045c0:	00fc00c0 	.word	0x00fc00c0

080045c4 <DMA2D_FG_StructInit>:
  * @param  DMA2D_FGStruct: pointer to a DMA2D_FGTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void DMA2D_FG_StructInit(DMA2D_FG_InitTypeDef* DMA2D_FG_InitStruct)
{
 80045c4:	b480      	push	{r7}
 80045c6:	b083      	sub	sp, #12
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
  /*!< Initialize the DMA2D foreground memory address */
  DMA2D_FG_InitStruct->DMA2D_FGMA = 0x00;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2200      	movs	r2, #0
 80045d0:	601a      	str	r2, [r3, #0]

  /*!< Initialize the DMA2D foreground offset */
  DMA2D_FG_InitStruct->DMA2D_FGO = 0x00;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2200      	movs	r2, #0
 80045d6:	605a      	str	r2, [r3, #4]

  /*!< Initialize the DMA2D foreground color mode */
  DMA2D_FG_InitStruct->DMA2D_FGCM = CM_ARGB8888;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2200      	movs	r2, #0
 80045dc:	609a      	str	r2, [r3, #8]

  /*!< Initialize the DMA2D foreground CLUT color mode */
  DMA2D_FG_InitStruct->DMA2D_FG_CLUT_CM = CLUT_CM_ARGB8888;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2200      	movs	r2, #0
 80045e2:	60da      	str	r2, [r3, #12]

  /*!< Initialize the DMA2D foreground CLUT size */
  DMA2D_FG_InitStruct->DMA2D_FG_CLUT_SIZE = 0x00;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2200      	movs	r2, #0
 80045e8:	611a      	str	r2, [r3, #16]

  /*!< Initialize the DMA2D foreground alpha mode */
  DMA2D_FG_InitStruct->DMA2D_FGPFC_ALPHA_MODE = NO_MODIF_ALPHA_VALUE;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2200      	movs	r2, #0
 80045ee:	615a      	str	r2, [r3, #20]

  /*!< Initialize the DMA2D foreground alpha value */
  DMA2D_FG_InitStruct->DMA2D_FGPFC_ALPHA_VALUE = 0x00;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2200      	movs	r2, #0
 80045f4:	619a      	str	r2, [r3, #24]

  /*!< Initialize the DMA2D foreground blue value */
  DMA2D_FG_InitStruct->DMA2D_FGC_BLUE = 0x00;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	2200      	movs	r2, #0
 80045fa:	61da      	str	r2, [r3, #28]

  /*!< Initialize the DMA2D foreground green value */
  DMA2D_FG_InitStruct->DMA2D_FGC_GREEN = 0x00;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2200      	movs	r2, #0
 8004600:	621a      	str	r2, [r3, #32]

  /*!< Initialize the DMA2D foreground red value */
  DMA2D_FG_InitStruct->DMA2D_FGC_RED = 0x00;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2200      	movs	r2, #0
 8004606:	625a      	str	r2, [r3, #36]	; 0x24

  /*!< Initialize the DMA2D foreground CLUT memory address */
  DMA2D_FG_InitStruct->DMA2D_FGCMAR = 0x00;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2200      	movs	r2, #0
 800460c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800460e:	bf00      	nop
 8004610:	370c      	adds	r7, #12
 8004612:	46bd      	mov	sp, r7
 8004614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004618:	4770      	bx	lr

0800461a <DMA2D_BGConfig>:
  * @param  DMA2D_BGStruct: pointer to a DMA2D_BGTypeDef structure that contains
  *         the configuration information for the specified Background.
  * @retval None
  */
void DMA2D_BGConfig(DMA2D_BG_InitTypeDef* DMA2D_BG_InitStruct)
{
 800461a:	b480      	push	{r7}
 800461c:	b089      	sub	sp, #36	; 0x24
 800461e:	af00      	add	r7, sp, #0
 8004620:	6078      	str	r0, [r7, #4]

  uint32_t bg_clutcolormode = 0;
 8004622:	2300      	movs	r3, #0
 8004624:	61fb      	str	r3, [r7, #28]
  uint32_t bg_clutsize = 0;
 8004626:	2300      	movs	r3, #0
 8004628:	61bb      	str	r3, [r7, #24]
  uint32_t bg_alpha_mode = 0;
 800462a:	2300      	movs	r3, #0
 800462c:	617b      	str	r3, [r7, #20]
  uint32_t bg_alphavalue = 0;
 800462e:	2300      	movs	r3, #0
 8004630:	613b      	str	r3, [r7, #16]
  uint32_t bg_colorgreen = 0;
 8004632:	2300      	movs	r3, #0
 8004634:	60fb      	str	r3, [r7, #12]
  uint32_t bg_colorred = 0;
 8004636:	2300      	movs	r3, #0
 8004638:	60bb      	str	r3, [r7, #8]
  assert_param(IS_DMA2D_BGC_BLUE(DMA2D_BG_InitStruct->DMA2D_BGC_BLUE));
  assert_param(IS_DMA2D_BGC_GREEN(DMA2D_BG_InitStruct->DMA2D_BGC_GREEN));
  assert_param(IS_DMA2D_BGC_RED(DMA2D_BG_InitStruct->DMA2D_BGC_RED));

  /* Configures the BG memory address */
  DMA2D->BGMAR = (DMA2D_BG_InitStruct->DMA2D_BGMA);
 800463a:	4a2d      	ldr	r2, [pc, #180]	; (80046f0 <DMA2D_BGConfig+0xd6>)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	6153      	str	r3, [r2, #20]

  /* Configures the BG offset */
  DMA2D->BGOR &= ~(uint32_t)DMA2D_BGOR_LO;
 8004642:	4b2b      	ldr	r3, [pc, #172]	; (80046f0 <DMA2D_BGConfig+0xd6>)
 8004644:	699b      	ldr	r3, [r3, #24]
 8004646:	4a2a      	ldr	r2, [pc, #168]	; (80046f0 <DMA2D_BGConfig+0xd6>)
 8004648:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800464c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004650:	6193      	str	r3, [r2, #24]
  DMA2D->BGOR |= (DMA2D_BG_InitStruct->DMA2D_BGO);
 8004652:	4b27      	ldr	r3, [pc, #156]	; (80046f0 <DMA2D_BGConfig+0xd6>)
 8004654:	699a      	ldr	r2, [r3, #24]
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	685b      	ldr	r3, [r3, #4]
 800465a:	4925      	ldr	r1, [pc, #148]	; (80046f0 <DMA2D_BGConfig+0xd6>)
 800465c:	4313      	orrs	r3, r2
 800465e:	618b      	str	r3, [r1, #24]

  /* Configures background Pixel Format Convertor */
  DMA2D->BGPFCCR &= (uint32_t)PFCCR_MASK;
 8004660:	4b23      	ldr	r3, [pc, #140]	; (80046f0 <DMA2D_BGConfig+0xd6>)
 8004662:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004664:	4922      	ldr	r1, [pc, #136]	; (80046f0 <DMA2D_BGConfig+0xd6>)
 8004666:	4b23      	ldr	r3, [pc, #140]	; (80046f4 <DMA2D_BGConfig+0xda>)
 8004668:	4013      	ands	r3, r2
 800466a:	624b      	str	r3, [r1, #36]	; 0x24
  bg_clutcolormode = DMA2D_BG_InitStruct->DMA2D_BG_CLUT_CM << 4;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	68db      	ldr	r3, [r3, #12]
 8004670:	011b      	lsls	r3, r3, #4
 8004672:	61fb      	str	r3, [r7, #28]
  bg_clutsize = DMA2D_BG_InitStruct->DMA2D_BG_CLUT_SIZE << 8;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	691b      	ldr	r3, [r3, #16]
 8004678:	021b      	lsls	r3, r3, #8
 800467a:	61bb      	str	r3, [r7, #24]
  bg_alpha_mode = DMA2D_BG_InitStruct->DMA2D_BGPFC_ALPHA_MODE << 16;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	695b      	ldr	r3, [r3, #20]
 8004680:	041b      	lsls	r3, r3, #16
 8004682:	617b      	str	r3, [r7, #20]
  bg_alphavalue = DMA2D_BG_InitStruct->DMA2D_BGPFC_ALPHA_VALUE << 24;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	699b      	ldr	r3, [r3, #24]
 8004688:	061b      	lsls	r3, r3, #24
 800468a:	613b      	str	r3, [r7, #16]
  DMA2D->BGPFCCR |= (DMA2D_BG_InitStruct->DMA2D_BGCM | bg_clutcolormode | bg_clutsize | \
 800468c:	4b18      	ldr	r3, [pc, #96]	; (80046f0 <DMA2D_BGConfig+0xd6>)
 800468e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6899      	ldr	r1, [r3, #8]
 8004694:	69fb      	ldr	r3, [r7, #28]
 8004696:	4319      	orrs	r1, r3
 8004698:	69bb      	ldr	r3, [r7, #24]
 800469a:	4319      	orrs	r1, r3
 800469c:	697b      	ldr	r3, [r7, #20]
 800469e:	4319      	orrs	r1, r3
                    bg_alpha_mode | bg_alphavalue);
 80046a0:	693b      	ldr	r3, [r7, #16]
 80046a2:	430b      	orrs	r3, r1
  DMA2D->BGPFCCR |= (DMA2D_BG_InitStruct->DMA2D_BGCM | bg_clutcolormode | bg_clutsize | \
 80046a4:	4912      	ldr	r1, [pc, #72]	; (80046f0 <DMA2D_BGConfig+0xd6>)
 80046a6:	4313      	orrs	r3, r2
 80046a8:	624b      	str	r3, [r1, #36]	; 0x24

  /* Configures background color */
  DMA2D->BGCOLR &= ~(DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | DMA2D_BGCOLR_RED);
 80046aa:	4b11      	ldr	r3, [pc, #68]	; (80046f0 <DMA2D_BGConfig+0xd6>)
 80046ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046ae:	4a10      	ldr	r2, [pc, #64]	; (80046f0 <DMA2D_BGConfig+0xd6>)
 80046b0:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80046b4:	6293      	str	r3, [r2, #40]	; 0x28
  bg_colorgreen = DMA2D_BG_InitStruct->DMA2D_BGC_GREEN << 8;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6a1b      	ldr	r3, [r3, #32]
 80046ba:	021b      	lsls	r3, r3, #8
 80046bc:	60fb      	str	r3, [r7, #12]
  bg_colorred = DMA2D_BG_InitStruct->DMA2D_BGC_RED << 16;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046c2:	041b      	lsls	r3, r3, #16
 80046c4:	60bb      	str	r3, [r7, #8]
  DMA2D->BGCOLR |= (DMA2D_BG_InitStruct->DMA2D_BGC_BLUE | bg_colorgreen | bg_colorred);
 80046c6:	4b0a      	ldr	r3, [pc, #40]	; (80046f0 <DMA2D_BGConfig+0xd6>)
 80046c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	69d9      	ldr	r1, [r3, #28]
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	4319      	orrs	r1, r3
 80046d2:	68bb      	ldr	r3, [r7, #8]
 80046d4:	430b      	orrs	r3, r1
 80046d6:	4906      	ldr	r1, [pc, #24]	; (80046f0 <DMA2D_BGConfig+0xd6>)
 80046d8:	4313      	orrs	r3, r2
 80046da:	628b      	str	r3, [r1, #40]	; 0x28
  
  /* Configures background CLUT memory address */
  DMA2D->BGCMAR = DMA2D_BG_InitStruct->DMA2D_BGCMAR;
 80046dc:	4a04      	ldr	r2, [pc, #16]	; (80046f0 <DMA2D_BGConfig+0xd6>)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046e2:	6313      	str	r3, [r2, #48]	; 0x30

}
 80046e4:	bf00      	nop
 80046e6:	3724      	adds	r7, #36	; 0x24
 80046e8:	46bd      	mov	sp, r7
 80046ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ee:	4770      	bx	lr
 80046f0:	4002b000 	.word	0x4002b000
 80046f4:	00fc00c0 	.word	0x00fc00c0

080046f8 <DMA2D_BG_StructInit>:
  * @param  DMA2D_BGStruct: pointer to a DMA2D_BGTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void DMA2D_BG_StructInit(DMA2D_BG_InitTypeDef* DMA2D_BG_InitStruct)
{
 80046f8:	b480      	push	{r7}
 80046fa:	b083      	sub	sp, #12
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
  /*!< Initialize the DMA2D background memory address */
  DMA2D_BG_InitStruct->DMA2D_BGMA = 0x00;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2200      	movs	r2, #0
 8004704:	601a      	str	r2, [r3, #0]

  /*!< Initialize the DMA2D background offset */
  DMA2D_BG_InitStruct->DMA2D_BGO = 0x00;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2200      	movs	r2, #0
 800470a:	605a      	str	r2, [r3, #4]

  /*!< Initialize the DMA2D background color mode */
  DMA2D_BG_InitStruct->DMA2D_BGCM = CM_ARGB8888;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2200      	movs	r2, #0
 8004710:	609a      	str	r2, [r3, #8]

  /*!< Initialize the DMA2D background CLUT color mode */
  DMA2D_BG_InitStruct->DMA2D_BG_CLUT_CM = CLUT_CM_ARGB8888;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2200      	movs	r2, #0
 8004716:	60da      	str	r2, [r3, #12]

  /*!< Initialize the DMA2D background CLUT size */
  DMA2D_BG_InitStruct->DMA2D_BG_CLUT_SIZE = 0x00;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2200      	movs	r2, #0
 800471c:	611a      	str	r2, [r3, #16]

  /*!< Initialize the DMA2D background alpha mode */
  DMA2D_BG_InitStruct->DMA2D_BGPFC_ALPHA_MODE = NO_MODIF_ALPHA_VALUE;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2200      	movs	r2, #0
 8004722:	615a      	str	r2, [r3, #20]

  /*!< Initialize the DMA2D background alpha value */
  DMA2D_BG_InitStruct->DMA2D_BGPFC_ALPHA_VALUE = 0x00;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2200      	movs	r2, #0
 8004728:	619a      	str	r2, [r3, #24]

  /*!< Initialize the DMA2D background blue value */
  DMA2D_BG_InitStruct->DMA2D_BGC_BLUE = 0x00;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2200      	movs	r2, #0
 800472e:	61da      	str	r2, [r3, #28]

  /*!< Initialize the DMA2D background green value */
  DMA2D_BG_InitStruct->DMA2D_BGC_GREEN = 0x00;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2200      	movs	r2, #0
 8004734:	621a      	str	r2, [r3, #32]

  /*!< Initialize the DMA2D background red value */
  DMA2D_BG_InitStruct->DMA2D_BGC_RED = 0x00;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2200      	movs	r2, #0
 800473a:	625a      	str	r2, [r3, #36]	; 0x24

  /*!< Initialize the DMA2D background CLUT memory address */
  DMA2D_BG_InitStruct->DMA2D_BGCMAR = 0x00;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2200      	movs	r2, #0
 8004740:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004742:	bf00      	nop
 8004744:	370c      	adds	r7, #12
 8004746:	46bd      	mov	sp, r7
 8004748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474c:	4770      	bx	lr

0800474e <DMA2D_FGStart>:
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */

void DMA2D_FGStart(FunctionalState NewState) 
{
 800474e:	b480      	push	{r7}
 8004750:	b083      	sub	sp, #12
 8004752:	af00      	add	r7, sp, #0
 8004754:	4603      	mov	r3, r0
 8004756:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8004758:	79fb      	ldrb	r3, [r7, #7]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d006      	beq.n	800476c <DMA2D_FGStart+0x1e>
  {
    /* Start the automatic loading of the CLUT */
    DMA2D->FGPFCCR |= DMA2D_FGPFCCR_START;
 800475e:	4b09      	ldr	r3, [pc, #36]	; (8004784 <DMA2D_FGStart+0x36>)
 8004760:	69db      	ldr	r3, [r3, #28]
 8004762:	4a08      	ldr	r2, [pc, #32]	; (8004784 <DMA2D_FGStart+0x36>)
 8004764:	f043 0320 	orr.w	r3, r3, #32
 8004768:	61d3      	str	r3, [r2, #28]
  else
  {
    /* abort the transfer */
    DMA2D->FGPFCCR &= (uint32_t)~DMA2D_FGPFCCR_START;
  }
}
 800476a:	e005      	b.n	8004778 <DMA2D_FGStart+0x2a>
    DMA2D->FGPFCCR &= (uint32_t)~DMA2D_FGPFCCR_START;
 800476c:	4b05      	ldr	r3, [pc, #20]	; (8004784 <DMA2D_FGStart+0x36>)
 800476e:	69db      	ldr	r3, [r3, #28]
 8004770:	4a04      	ldr	r2, [pc, #16]	; (8004784 <DMA2D_FGStart+0x36>)
 8004772:	f023 0320 	bic.w	r3, r3, #32
 8004776:	61d3      	str	r3, [r2, #28]
}
 8004778:	bf00      	nop
 800477a:	370c      	adds	r7, #12
 800477c:	46bd      	mov	sp, r7
 800477e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004782:	4770      	bx	lr
 8004784:	4002b000 	.word	0x4002b000

08004788 <DMA2D_BGStart>:
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
  
void DMA2D_BGStart(FunctionalState NewState) 
{
 8004788:	b480      	push	{r7}
 800478a:	b083      	sub	sp, #12
 800478c:	af00      	add	r7, sp, #0
 800478e:	4603      	mov	r3, r0
 8004790:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8004792:	79fb      	ldrb	r3, [r7, #7]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d006      	beq.n	80047a6 <DMA2D_BGStart+0x1e>
  {
    /* Start the automatic loading of the CLUT */
    DMA2D->BGPFCCR |= DMA2D_BGPFCCR_START;
 8004798:	4b09      	ldr	r3, [pc, #36]	; (80047c0 <DMA2D_BGStart+0x38>)
 800479a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800479c:	4a08      	ldr	r2, [pc, #32]	; (80047c0 <DMA2D_BGStart+0x38>)
 800479e:	f043 0320 	orr.w	r3, r3, #32
 80047a2:	6253      	str	r3, [r2, #36]	; 0x24
  else
  {
    /* abort the transfer */
    DMA2D->BGPFCCR &= (uint32_t)~DMA2D_BGPFCCR_START;
  }
}
 80047a4:	e005      	b.n	80047b2 <DMA2D_BGStart+0x2a>
    DMA2D->BGPFCCR &= (uint32_t)~DMA2D_BGPFCCR_START;
 80047a6:	4b06      	ldr	r3, [pc, #24]	; (80047c0 <DMA2D_BGStart+0x38>)
 80047a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047aa:	4a05      	ldr	r2, [pc, #20]	; (80047c0 <DMA2D_BGStart+0x38>)
 80047ac:	f023 0320 	bic.w	r3, r3, #32
 80047b0:	6253      	str	r3, [r2, #36]	; 0x24
}
 80047b2:	bf00      	nop
 80047b4:	370c      	adds	r7, #12
 80047b6:	46bd      	mov	sp, r7
 80047b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047bc:	4770      	bx	lr
 80047be:	bf00      	nop
 80047c0:	4002b000 	.word	0x4002b000

080047c4 <DMA2D_DeadTimeConfig>:
  * @param  DMA2D_DeadTime: specifies the DMA2D dead time.
  *   This parameter can be one of the following values:
  * @retval None
  */
void DMA2D_DeadTimeConfig(uint32_t DMA2D_DeadTime, FunctionalState NewState)
{
 80047c4:	b480      	push	{r7}
 80047c6:	b085      	sub	sp, #20
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
 80047cc:	460b      	mov	r3, r1
 80047ce:	70fb      	strb	r3, [r7, #3]

  /* Check the parameters */
  assert_param(IS_DMA2D_DEAD_TIME(DMA2D_DeadTime));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80047d0:	78fb      	ldrb	r3, [r7, #3]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d013      	beq.n	80047fe <DMA2D_DeadTimeConfig+0x3a>
  {
    /* Enable and Configures the dead time */
    DMA2D->AMTCR &= (uint32_t)DEAD_MASK;
 80047d6:	4b10      	ldr	r3, [pc, #64]	; (8004818 <DMA2D_DeadTimeConfig+0x54>)
 80047d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047da:	4a0f      	ldr	r2, [pc, #60]	; (8004818 <DMA2D_DeadTimeConfig+0x54>)
 80047dc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80047e0:	f023 0301 	bic.w	r3, r3, #1
 80047e4:	64d3      	str	r3, [r2, #76]	; 0x4c
    DeadTime = DMA2D_DeadTime << 8;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	021b      	lsls	r3, r3, #8
 80047ea:	60fb      	str	r3, [r7, #12]
    DMA2D->AMTCR |= (DeadTime | DMA2D_AMTCR_EN);
 80047ec:	4b0a      	ldr	r3, [pc, #40]	; (8004818 <DMA2D_DeadTimeConfig+0x54>)
 80047ee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	4313      	orrs	r3, r2
 80047f4:	4a08      	ldr	r2, [pc, #32]	; (8004818 <DMA2D_DeadTimeConfig+0x54>)
 80047f6:	f043 0301 	orr.w	r3, r3, #1
 80047fa:	64d3      	str	r3, [r2, #76]	; 0x4c
  }
  else
  {
     DMA2D->AMTCR &= ~(uint32_t)DMA2D_AMTCR_EN;
  }
}
 80047fc:	e005      	b.n	800480a <DMA2D_DeadTimeConfig+0x46>
     DMA2D->AMTCR &= ~(uint32_t)DMA2D_AMTCR_EN;
 80047fe:	4b06      	ldr	r3, [pc, #24]	; (8004818 <DMA2D_DeadTimeConfig+0x54>)
 8004800:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004802:	4a05      	ldr	r2, [pc, #20]	; (8004818 <DMA2D_DeadTimeConfig+0x54>)
 8004804:	f023 0301 	bic.w	r3, r3, #1
 8004808:	64d3      	str	r3, [r2, #76]	; 0x4c
}
 800480a:	bf00      	nop
 800480c:	3714      	adds	r7, #20
 800480e:	46bd      	mov	sp, r7
 8004810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004814:	4770      	bx	lr
 8004816:	bf00      	nop
 8004818:	4002b000 	.word	0x4002b000

0800481c <DMA2D_LineWatermarkConfig>:
  * @param  DMA2D_LWatermarkConfig: Line Watermark configuration.
  * @retval None
  */

void DMA2D_LineWatermarkConfig(uint32_t DMA2D_LWatermarkConfig)
{
 800481c:	b480      	push	{r7}
 800481e:	b083      	sub	sp, #12
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA2D_LineWatermark(DMA2D_LWatermarkConfig));

  /* Sets the Line watermark configuration */
  DMA2D->LWR = (uint32_t)DMA2D_LWatermarkConfig;
 8004824:	4a04      	ldr	r2, [pc, #16]	; (8004838 <DMA2D_LineWatermarkConfig+0x1c>)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6493      	str	r3, [r2, #72]	; 0x48
}
 800482a:	bf00      	nop
 800482c:	370c      	adds	r7, #12
 800482e:	46bd      	mov	sp, r7
 8004830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004834:	4770      	bx	lr
 8004836:	bf00      	nop
 8004838:	4002b000 	.word	0x4002b000

0800483c <DMA2D_ITConfig>:
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */

void DMA2D_ITConfig(uint32_t DMA2D_IT, FunctionalState NewState)
{
 800483c:	b480      	push	{r7}
 800483e:	b083      	sub	sp, #12
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
 8004844:	460b      	mov	r3, r1
 8004846:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA2D_IT(DMA2D_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8004848:	78fb      	ldrb	r3, [r7, #3]
 800484a:	2b00      	cmp	r3, #0
 800484c:	d006      	beq.n	800485c <DMA2D_ITConfig+0x20>
  {
    /* Enable the selected DMA2D interrupts */
    DMA2D->CR |= DMA2D_IT;
 800484e:	4b0a      	ldr	r3, [pc, #40]	; (8004878 <DMA2D_ITConfig+0x3c>)
 8004850:	681a      	ldr	r2, [r3, #0]
 8004852:	4909      	ldr	r1, [pc, #36]	; (8004878 <DMA2D_ITConfig+0x3c>)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	4313      	orrs	r3, r2
 8004858:	600b      	str	r3, [r1, #0]
  else
  {
    /* Disable the selected DMA2D interrupts */
    DMA2D->CR &= (uint32_t)~DMA2D_IT;
  }
}
 800485a:	e006      	b.n	800486a <DMA2D_ITConfig+0x2e>
    DMA2D->CR &= (uint32_t)~DMA2D_IT;
 800485c:	4b06      	ldr	r3, [pc, #24]	; (8004878 <DMA2D_ITConfig+0x3c>)
 800485e:	681a      	ldr	r2, [r3, #0]
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	43db      	mvns	r3, r3
 8004864:	4904      	ldr	r1, [pc, #16]	; (8004878 <DMA2D_ITConfig+0x3c>)
 8004866:	4013      	ands	r3, r2
 8004868:	600b      	str	r3, [r1, #0]
}
 800486a:	bf00      	nop
 800486c:	370c      	adds	r7, #12
 800486e:	46bd      	mov	sp, r7
 8004870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004874:	4770      	bx	lr
 8004876:	bf00      	nop
 8004878:	4002b000 	.word	0x4002b000

0800487c <DMA2D_GetFlagStatus>:
  *     @arg DMA2D_FLAG_TE:   Transfer Error interrupt flag.
  * @retval The new state of DMA2D_FLAG (SET or RESET).
  */

FlagStatus DMA2D_GetFlagStatus(uint32_t DMA2D_FLAG)
{
 800487c:	b480      	push	{r7}
 800487e:	b085      	sub	sp, #20
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 8004884:	2300      	movs	r3, #0
 8004886:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_DMA2D_GET_FLAG(DMA2D_FLAG));
  
  /* Check the status of the specified DMA2D flag */
  if (((DMA2D->ISR) & DMA2D_FLAG) != (uint32_t)RESET)
 8004888:	4b08      	ldr	r3, [pc, #32]	; (80048ac <DMA2D_GetFlagStatus+0x30>)
 800488a:	685a      	ldr	r2, [r3, #4]
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	4013      	ands	r3, r2
 8004890:	2b00      	cmp	r3, #0
 8004892:	d002      	beq.n	800489a <DMA2D_GetFlagStatus+0x1e>
  {
    /* DMA2D_FLAG is set */
    bitstatus = SET;
 8004894:	2301      	movs	r3, #1
 8004896:	73fb      	strb	r3, [r7, #15]
 8004898:	e001      	b.n	800489e <DMA2D_GetFlagStatus+0x22>
  }
  else
  {
    /* DMA2D_FLAG is reset */
    bitstatus = RESET;
 800489a:	2300      	movs	r3, #0
 800489c:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the DMA2D_FLAG status */
  return bitstatus;
 800489e:	7bfb      	ldrb	r3, [r7, #15]
}
 80048a0:	4618      	mov	r0, r3
 80048a2:	3714      	adds	r7, #20
 80048a4:	46bd      	mov	sp, r7
 80048a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048aa:	4770      	bx	lr
 80048ac:	4002b000 	.word	0x4002b000

080048b0 <DMA2D_ClearFlag>:
  *     @arg DMA2D_FLAG_TC:   Transfer Complete interrupt flag.
  *     @arg DMA2D_FLAG_TE:   Transfer Error interrupt flag.
  * @retval None
  */
void DMA2D_ClearFlag(uint32_t DMA2D_FLAG)
{
 80048b0:	b480      	push	{r7}
 80048b2:	b083      	sub	sp, #12
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA2D_GET_FLAG(DMA2D_FLAG));
    
  /* Clear the corresponding DMA2D flag */
  DMA2D->IFCR = (uint32_t)DMA2D_FLAG;
 80048b8:	4a04      	ldr	r2, [pc, #16]	; (80048cc <DMA2D_ClearFlag+0x1c>)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6093      	str	r3, [r2, #8]
}
 80048be:	bf00      	nop
 80048c0:	370c      	adds	r7, #12
 80048c2:	46bd      	mov	sp, r7
 80048c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c8:	4770      	bx	lr
 80048ca:	bf00      	nop
 80048cc:	4002b000 	.word	0x4002b000

080048d0 <DMA2D_GetITStatus>:
  *     @arg DMA2D_IT_TC:   Transfer Complete interrupt enable.
  *     @arg DMA2D_IT_TE:   Transfer Error interrupt enable.
  * @retval The new state of the DMA2D_IT (SET or RESET).
  */
ITStatus DMA2D_GetITStatus(uint32_t DMA2D_IT)
{
 80048d0:	b480      	push	{r7}
 80048d2:	b085      	sub	sp, #20
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
 80048d8:	2300      	movs	r3, #0
 80048da:	73fb      	strb	r3, [r7, #15]
  uint32_t DMA2D_IT_FLAG = DMA2D_IT >> 8;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	0a1b      	lsrs	r3, r3, #8
 80048e0:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_DMA2D_IT(DMA2D_IT));

  if ((DMA2D->ISR & DMA2D_IT_FLAG) != (uint32_t)RESET)
 80048e2:	4b10      	ldr	r3, [pc, #64]	; (8004924 <DMA2D_GetITStatus+0x54>)
 80048e4:	685a      	ldr	r2, [r3, #4]
 80048e6:	68bb      	ldr	r3, [r7, #8]
 80048e8:	4013      	ands	r3, r2
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d002      	beq.n	80048f4 <DMA2D_GetITStatus+0x24>
  {
    bitstatus = SET;
 80048ee:	2301      	movs	r3, #1
 80048f0:	73fb      	strb	r3, [r7, #15]
 80048f2:	e001      	b.n	80048f8 <DMA2D_GetITStatus+0x28>
  }
  else
  {
    bitstatus = RESET;
 80048f4:	2300      	movs	r3, #0
 80048f6:	73fb      	strb	r3, [r7, #15]
  }
  
  if (((DMA2D->CR & DMA2D_IT) != (uint32_t)RESET) && (bitstatus != (uint32_t)RESET))
 80048f8:	4b0a      	ldr	r3, [pc, #40]	; (8004924 <DMA2D_GetITStatus+0x54>)
 80048fa:	681a      	ldr	r2, [r3, #0]
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	4013      	ands	r3, r2
 8004900:	2b00      	cmp	r3, #0
 8004902:	d005      	beq.n	8004910 <DMA2D_GetITStatus+0x40>
 8004904:	7bfb      	ldrb	r3, [r7, #15]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d002      	beq.n	8004910 <DMA2D_GetITStatus+0x40>
  {
    bitstatus = SET;
 800490a:	2301      	movs	r3, #1
 800490c:	73fb      	strb	r3, [r7, #15]
 800490e:	e001      	b.n	8004914 <DMA2D_GetITStatus+0x44>
  }
  else
  {
    bitstatus = RESET;
 8004910:	2300      	movs	r3, #0
 8004912:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004914:	7bfb      	ldrb	r3, [r7, #15]
}
 8004916:	4618      	mov	r0, r3
 8004918:	3714      	adds	r7, #20
 800491a:	46bd      	mov	sp, r7
 800491c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004920:	4770      	bx	lr
 8004922:	bf00      	nop
 8004924:	4002b000 	.word	0x4002b000

08004928 <DMA2D_ClearITPendingBit>:
  *     @arg DMA2D_IT_TC:   Transfer Complete interrupt.
  *     @arg DMA2D_IT_TE:   Transfer Error interrupt.
  * @retval None
  */
void DMA2D_ClearITPendingBit(uint32_t DMA2D_IT)
{
 8004928:	b480      	push	{r7}
 800492a:	b083      	sub	sp, #12
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA2D_IT(DMA2D_IT));
  DMA2D_IT = DMA2D_IT >> 8;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	0a1b      	lsrs	r3, r3, #8
 8004934:	607b      	str	r3, [r7, #4]
    
  /* Clear the corresponding DMA2D Interrupt */
  DMA2D->IFCR = (uint32_t)DMA2D_IT;
 8004936:	4a04      	ldr	r2, [pc, #16]	; (8004948 <DMA2D_ClearITPendingBit+0x20>)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6093      	str	r3, [r2, #8]
}
 800493c:	bf00      	nop
 800493e:	370c      	adds	r7, #12
 8004940:	46bd      	mov	sp, r7
 8004942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004946:	4770      	bx	lr
 8004948:	4002b000 	.word	0x4002b000

0800494c <EXTI_DeInit>:
  * @brief  Deinitializes the EXTI peripheral registers to their default reset values.
  * @param  None
  * @retval None
  */
void EXTI_DeInit(void)
{
 800494c:	b480      	push	{r7}
 800494e:	af00      	add	r7, sp, #0
  EXTI->IMR = 0x00000000;
 8004950:	4b09      	ldr	r3, [pc, #36]	; (8004978 <EXTI_DeInit+0x2c>)
 8004952:	2200      	movs	r2, #0
 8004954:	601a      	str	r2, [r3, #0]
  EXTI->EMR = 0x00000000;
 8004956:	4b08      	ldr	r3, [pc, #32]	; (8004978 <EXTI_DeInit+0x2c>)
 8004958:	2200      	movs	r2, #0
 800495a:	605a      	str	r2, [r3, #4]
  EXTI->RTSR = 0x00000000;
 800495c:	4b06      	ldr	r3, [pc, #24]	; (8004978 <EXTI_DeInit+0x2c>)
 800495e:	2200      	movs	r2, #0
 8004960:	609a      	str	r2, [r3, #8]
  EXTI->FTSR = 0x00000000;
 8004962:	4b05      	ldr	r3, [pc, #20]	; (8004978 <EXTI_DeInit+0x2c>)
 8004964:	2200      	movs	r2, #0
 8004966:	60da      	str	r2, [r3, #12]
  EXTI->PR = 0x007FFFFF;
 8004968:	4b03      	ldr	r3, [pc, #12]	; (8004978 <EXTI_DeInit+0x2c>)
 800496a:	4a04      	ldr	r2, [pc, #16]	; (800497c <EXTI_DeInit+0x30>)
 800496c:	615a      	str	r2, [r3, #20]
}
 800496e:	bf00      	nop
 8004970:	46bd      	mov	sp, r7
 8004972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004976:	4770      	bx	lr
 8004978:	40013c00 	.word	0x40013c00
 800497c:	007fffff 	.word	0x007fffff

08004980 <EXTI_Init>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure
  *         that contains the configuration information for the EXTI peripheral.
  * @retval None
  */
void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
{
 8004980:	b480      	push	{r7}
 8004982:	b085      	sub	sp, #20
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
 8004988:	2300      	movs	r3, #0
 800498a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_EXTI_MODE(EXTI_InitStruct->EXTI_Mode));
  assert_param(IS_EXTI_TRIGGER(EXTI_InitStruct->EXTI_Trigger));
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));  
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
 800498c:	4b34      	ldr	r3, [pc, #208]	; (8004a60 <EXTI_Init+0xe0>)
 800498e:	60fb      	str	r3, [r7, #12]
     
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	799b      	ldrb	r3, [r3, #6]
 8004994:	2b00      	cmp	r3, #0
 8004996:	d04f      	beq.n	8004a38 <EXTI_Init+0xb8>
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
 8004998:	4b31      	ldr	r3, [pc, #196]	; (8004a60 <EXTI_Init+0xe0>)
 800499a:	681a      	ldr	r2, [r3, #0]
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	43db      	mvns	r3, r3
 80049a2:	492f      	ldr	r1, [pc, #188]	; (8004a60 <EXTI_Init+0xe0>)
 80049a4:	4013      	ands	r3, r2
 80049a6:	600b      	str	r3, [r1, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
 80049a8:	4b2d      	ldr	r3, [pc, #180]	; (8004a60 <EXTI_Init+0xe0>)
 80049aa:	685a      	ldr	r2, [r3, #4]
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	43db      	mvns	r3, r3
 80049b2:	492b      	ldr	r1, [pc, #172]	; (8004a60 <EXTI_Init+0xe0>)
 80049b4:	4013      	ands	r3, r2
 80049b6:	604b      	str	r3, [r1, #4]
    
    tmp += EXTI_InitStruct->EXTI_Mode;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	791b      	ldrb	r3, [r3, #4]
 80049bc:	461a      	mov	r2, r3
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	4413      	add	r3, r2
 80049c2:	60fb      	str	r3, [r7, #12]

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	6819      	ldr	r1, [r3, #0]
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681a      	ldr	r2, [r3, #0]
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	430a      	orrs	r2, r1
 80049d0:	601a      	str	r2, [r3, #0]

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
 80049d2:	4b23      	ldr	r3, [pc, #140]	; (8004a60 <EXTI_Init+0xe0>)
 80049d4:	689a      	ldr	r2, [r3, #8]
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	43db      	mvns	r3, r3
 80049dc:	4920      	ldr	r1, [pc, #128]	; (8004a60 <EXTI_Init+0xe0>)
 80049de:	4013      	ands	r3, r2
 80049e0:	608b      	str	r3, [r1, #8]
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
 80049e2:	4b1f      	ldr	r3, [pc, #124]	; (8004a60 <EXTI_Init+0xe0>)
 80049e4:	68da      	ldr	r2, [r3, #12]
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	43db      	mvns	r3, r3
 80049ec:	491c      	ldr	r1, [pc, #112]	; (8004a60 <EXTI_Init+0xe0>)
 80049ee:	4013      	ands	r3, r2
 80049f0:	60cb      	str	r3, [r1, #12]
    
    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	795b      	ldrb	r3, [r3, #5]
 80049f6:	2b10      	cmp	r3, #16
 80049f8:	d10e      	bne.n	8004a18 <EXTI_Init+0x98>
    {
      /* Rising Falling edge */
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
 80049fa:	4b19      	ldr	r3, [pc, #100]	; (8004a60 <EXTI_Init+0xe0>)
 80049fc:	689a      	ldr	r2, [r3, #8]
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	4917      	ldr	r1, [pc, #92]	; (8004a60 <EXTI_Init+0xe0>)
 8004a04:	4313      	orrs	r3, r2
 8004a06:	608b      	str	r3, [r1, #8]
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
 8004a08:	4b15      	ldr	r3, [pc, #84]	; (8004a60 <EXTI_Init+0xe0>)
 8004a0a:	68da      	ldr	r2, [r3, #12]
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	4913      	ldr	r1, [pc, #76]	; (8004a60 <EXTI_Init+0xe0>)
 8004a12:	4313      	orrs	r3, r2
 8004a14:	60cb      	str	r3, [r1, #12]
    tmp += EXTI_InitStruct->EXTI_Mode;

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
  }
}
 8004a16:	e01d      	b.n	8004a54 <EXTI_Init+0xd4>
      tmp = (uint32_t)EXTI_BASE;
 8004a18:	4b11      	ldr	r3, [pc, #68]	; (8004a60 <EXTI_Init+0xe0>)
 8004a1a:	60fb      	str	r3, [r7, #12]
      tmp += EXTI_InitStruct->EXTI_Trigger;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	795b      	ldrb	r3, [r3, #5]
 8004a20:	461a      	mov	r2, r3
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	4413      	add	r3, r2
 8004a26:	60fb      	str	r3, [r7, #12]
      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	6819      	ldr	r1, [r3, #0]
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681a      	ldr	r2, [r3, #0]
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	430a      	orrs	r2, r1
 8004a34:	601a      	str	r2, [r3, #0]
}
 8004a36:	e00d      	b.n	8004a54 <EXTI_Init+0xd4>
    tmp += EXTI_InitStruct->EXTI_Mode;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	791b      	ldrb	r3, [r3, #4]
 8004a3c:	461a      	mov	r2, r3
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	4413      	add	r3, r2
 8004a42:	60fb      	str	r3, [r7, #12]
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	6819      	ldr	r1, [r3, #0]
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	43da      	mvns	r2, r3
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	400a      	ands	r2, r1
 8004a52:	601a      	str	r2, [r3, #0]
}
 8004a54:	bf00      	nop
 8004a56:	3714      	adds	r7, #20
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5e:	4770      	bx	lr
 8004a60:	40013c00 	.word	0x40013c00

08004a64 <EXTI_StructInit>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void EXTI_StructInit(EXTI_InitTypeDef* EXTI_InitStruct)
{
 8004a64:	b480      	push	{r7}
 8004a66:	b083      	sub	sp, #12
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
  EXTI_InitStruct->EXTI_Line = EXTI_LINENONE;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2200      	movs	r2, #0
 8004a70:	601a      	str	r2, [r3, #0]
  EXTI_InitStruct->EXTI_Mode = EXTI_Mode_Interrupt;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2200      	movs	r2, #0
 8004a76:	711a      	strb	r2, [r3, #4]
  EXTI_InitStruct->EXTI_Trigger = EXTI_Trigger_Falling;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	220c      	movs	r2, #12
 8004a7c:	715a      	strb	r2, [r3, #5]
  EXTI_InitStruct->EXTI_LineCmd = DISABLE;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2200      	movs	r2, #0
 8004a82:	719a      	strb	r2, [r3, #6]
}
 8004a84:	bf00      	nop
 8004a86:	370c      	adds	r7, #12
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8e:	4770      	bx	lr

08004a90 <EXTI_GenerateSWInterrupt>:
  *         will be generated.
  *         This parameter can be any combination of EXTI_Linex where x can be (0..22)
  * @retval None
  */
void EXTI_GenerateSWInterrupt(uint32_t EXTI_Line)
{
 8004a90:	b480      	push	{r7}
 8004a92:	b083      	sub	sp, #12
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->SWIER |= EXTI_Line;
 8004a98:	4b05      	ldr	r3, [pc, #20]	; (8004ab0 <EXTI_GenerateSWInterrupt+0x20>)
 8004a9a:	691a      	ldr	r2, [r3, #16]
 8004a9c:	4904      	ldr	r1, [pc, #16]	; (8004ab0 <EXTI_GenerateSWInterrupt+0x20>)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	4313      	orrs	r3, r2
 8004aa2:	610b      	str	r3, [r1, #16]
}
 8004aa4:	bf00      	nop
 8004aa6:	370c      	adds	r7, #12
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aae:	4770      	bx	lr
 8004ab0:	40013c00 	.word	0x40013c00

08004ab4 <EXTI_GetFlagStatus>:
  * @param  EXTI_Line: specifies the EXTI line flag to check.
  *          This parameter can be EXTI_Linex where x can be(0..22)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
FlagStatus EXTI_GetFlagStatus(uint32_t EXTI_Line)
{
 8004ab4:	b480      	push	{r7}
 8004ab6:	b085      	sub	sp, #20
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 8004abc:	2300      	movs	r3, #0
 8004abe:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  if ((EXTI->PR & EXTI_Line) != (uint32_t)RESET)
 8004ac0:	4b08      	ldr	r3, [pc, #32]	; (8004ae4 <EXTI_GetFlagStatus+0x30>)
 8004ac2:	695a      	ldr	r2, [r3, #20]
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	4013      	ands	r3, r2
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d002      	beq.n	8004ad2 <EXTI_GetFlagStatus+0x1e>
  {
    bitstatus = SET;
 8004acc:	2301      	movs	r3, #1
 8004ace:	73fb      	strb	r3, [r7, #15]
 8004ad0:	e001      	b.n	8004ad6 <EXTI_GetFlagStatus+0x22>
  }
  else
  {
    bitstatus = RESET;
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004ad6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ad8:	4618      	mov	r0, r3
 8004ada:	3714      	adds	r7, #20
 8004adc:	46bd      	mov	sp, r7
 8004ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae2:	4770      	bx	lr
 8004ae4:	40013c00 	.word	0x40013c00

08004ae8 <EXTI_ClearFlag>:
  * @param  EXTI_Line: specifies the EXTI lines flags to clear.
  *          This parameter can be any combination of EXTI_Linex where x can be (0..22)
  * @retval None
  */
void EXTI_ClearFlag(uint32_t EXTI_Line)
{
 8004ae8:	b480      	push	{r7}
 8004aea:	b083      	sub	sp, #12
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 8004af0:	4a04      	ldr	r2, [pc, #16]	; (8004b04 <EXTI_ClearFlag+0x1c>)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6153      	str	r3, [r2, #20]
}
 8004af6:	bf00      	nop
 8004af8:	370c      	adds	r7, #12
 8004afa:	46bd      	mov	sp, r7
 8004afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b00:	4770      	bx	lr
 8004b02:	bf00      	nop
 8004b04:	40013c00 	.word	0x40013c00

08004b08 <EXTI_GetITStatus>:
  * @param  EXTI_Line: specifies the EXTI line to check.
  *          This parameter can be EXTI_Linex where x can be(0..22)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITStatus(uint32_t EXTI_Line)
{
 8004b08:	b480      	push	{r7}
 8004b0a:	b085      	sub	sp, #20
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 8004b10:	2300      	movs	r3, #0
 8004b12:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  if ((EXTI->PR & EXTI_Line) != (uint32_t)RESET)
 8004b14:	4b08      	ldr	r3, [pc, #32]	; (8004b38 <EXTI_GetITStatus+0x30>)
 8004b16:	695a      	ldr	r2, [r3, #20]
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	4013      	ands	r3, r2
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d002      	beq.n	8004b26 <EXTI_GetITStatus+0x1e>
  {
    bitstatus = SET;
 8004b20:	2301      	movs	r3, #1
 8004b22:	73fb      	strb	r3, [r7, #15]
 8004b24:	e001      	b.n	8004b2a <EXTI_GetITStatus+0x22>
  }
  else
  {
    bitstatus = RESET;
 8004b26:	2300      	movs	r3, #0
 8004b28:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004b2a:	7bfb      	ldrb	r3, [r7, #15]
  
}
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	3714      	adds	r7, #20
 8004b30:	46bd      	mov	sp, r7
 8004b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b36:	4770      	bx	lr
 8004b38:	40013c00 	.word	0x40013c00

08004b3c <EXTI_ClearITPendingBit>:
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *          This parameter can be any combination of EXTI_Linex where x can be (0..22)
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
 8004b3c:	b480      	push	{r7}
 8004b3e:	b083      	sub	sp, #12
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 8004b44:	4a04      	ldr	r2, [pc, #16]	; (8004b58 <EXTI_ClearITPendingBit+0x1c>)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6153      	str	r3, [r2, #20]
}
 8004b4a:	bf00      	nop
 8004b4c:	370c      	adds	r7, #12
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b54:	4770      	bx	lr
 8004b56:	bf00      	nop
 8004b58:	40013c00 	.word	0x40013c00

08004b5c <FLASH_SetLatency>:
  *       FLASH_Latency_0 and FLASH_Latency_15. 
  *         
  * @retval None
  */
void FLASH_SetLatency(uint32_t FLASH_Latency)
{
 8004b5c:	b480      	push	{r7}
 8004b5e:	b083      	sub	sp, #12
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_LATENCY(FLASH_Latency));
  
  /* Perform Byte access to FLASH_ACR[8:0] to set the Latency value */
  *(__IO uint8_t *)ACR_BYTE0_ADDRESS = (uint8_t)FLASH_Latency;
 8004b64:	4b04      	ldr	r3, [pc, #16]	; (8004b78 <FLASH_SetLatency+0x1c>)
 8004b66:	687a      	ldr	r2, [r7, #4]
 8004b68:	b2d2      	uxtb	r2, r2
 8004b6a:	701a      	strb	r2, [r3, #0]
}
 8004b6c:	bf00      	nop
 8004b6e:	370c      	adds	r7, #12
 8004b70:	46bd      	mov	sp, r7
 8004b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b76:	4770      	bx	lr
 8004b78:	40023c00 	.word	0x40023c00

08004b7c <FLASH_PrefetchBufferCmd>:
  * @param  NewState: new state of the Prefetch Buffer.
  *          This parameter  can be: ENABLE or DISABLE.
  * @retval None
  */
void FLASH_PrefetchBufferCmd(FunctionalState NewState)
{
 8004b7c:	b480      	push	{r7}
 8004b7e:	b083      	sub	sp, #12
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	4603      	mov	r3, r0
 8004b84:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  /* Enable or disable the Prefetch Buffer */
  if(NewState != DISABLE)
 8004b86:	79fb      	ldrb	r3, [r7, #7]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d006      	beq.n	8004b9a <FLASH_PrefetchBufferCmd+0x1e>
  {
    FLASH->ACR |= FLASH_ACR_PRFTEN;
 8004b8c:	4b09      	ldr	r3, [pc, #36]	; (8004bb4 <FLASH_PrefetchBufferCmd+0x38>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4a08      	ldr	r2, [pc, #32]	; (8004bb4 <FLASH_PrefetchBufferCmd+0x38>)
 8004b92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b96:	6013      	str	r3, [r2, #0]
  }
  else
  {
    FLASH->ACR &= (~FLASH_ACR_PRFTEN);
  }
}
 8004b98:	e005      	b.n	8004ba6 <FLASH_PrefetchBufferCmd+0x2a>
    FLASH->ACR &= (~FLASH_ACR_PRFTEN);
 8004b9a:	4b06      	ldr	r3, [pc, #24]	; (8004bb4 <FLASH_PrefetchBufferCmd+0x38>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	4a05      	ldr	r2, [pc, #20]	; (8004bb4 <FLASH_PrefetchBufferCmd+0x38>)
 8004ba0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ba4:	6013      	str	r3, [r2, #0]
}
 8004ba6:	bf00      	nop
 8004ba8:	370c      	adds	r7, #12
 8004baa:	46bd      	mov	sp, r7
 8004bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb0:	4770      	bx	lr
 8004bb2:	bf00      	nop
 8004bb4:	40023c00 	.word	0x40023c00

08004bb8 <FLASH_InstructionCacheCmd>:
  * @param  NewState: new state of the Instruction Cache.
  *          This parameter  can be: ENABLE or DISABLE.
  * @retval None
  */
void FLASH_InstructionCacheCmd(FunctionalState NewState)
{
 8004bb8:	b480      	push	{r7}
 8004bba:	b083      	sub	sp, #12
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	4603      	mov	r3, r0
 8004bc0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if(NewState != DISABLE)
 8004bc2:	79fb      	ldrb	r3, [r7, #7]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d006      	beq.n	8004bd6 <FLASH_InstructionCacheCmd+0x1e>
  {
    FLASH->ACR |= FLASH_ACR_ICEN;
 8004bc8:	4b09      	ldr	r3, [pc, #36]	; (8004bf0 <FLASH_InstructionCacheCmd+0x38>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	4a08      	ldr	r2, [pc, #32]	; (8004bf0 <FLASH_InstructionCacheCmd+0x38>)
 8004bce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004bd2:	6013      	str	r3, [r2, #0]
  }
  else
  {
    FLASH->ACR &= (~FLASH_ACR_ICEN);
  }
}
 8004bd4:	e005      	b.n	8004be2 <FLASH_InstructionCacheCmd+0x2a>
    FLASH->ACR &= (~FLASH_ACR_ICEN);
 8004bd6:	4b06      	ldr	r3, [pc, #24]	; (8004bf0 <FLASH_InstructionCacheCmd+0x38>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	4a05      	ldr	r2, [pc, #20]	; (8004bf0 <FLASH_InstructionCacheCmd+0x38>)
 8004bdc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004be0:	6013      	str	r3, [r2, #0]
}
 8004be2:	bf00      	nop
 8004be4:	370c      	adds	r7, #12
 8004be6:	46bd      	mov	sp, r7
 8004be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bec:	4770      	bx	lr
 8004bee:	bf00      	nop
 8004bf0:	40023c00 	.word	0x40023c00

08004bf4 <FLASH_DataCacheCmd>:
  * @param  NewState: new state of the Data Cache.
  *          This parameter  can be: ENABLE or DISABLE.
  * @retval None
  */
void FLASH_DataCacheCmd(FunctionalState NewState)
{
 8004bf4:	b480      	push	{r7}
 8004bf6:	b083      	sub	sp, #12
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	4603      	mov	r3, r0
 8004bfc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if(NewState != DISABLE)
 8004bfe:	79fb      	ldrb	r3, [r7, #7]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d006      	beq.n	8004c12 <FLASH_DataCacheCmd+0x1e>
  {
    FLASH->ACR |= FLASH_ACR_DCEN;
 8004c04:	4b09      	ldr	r3, [pc, #36]	; (8004c2c <FLASH_DataCacheCmd+0x38>)
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	4a08      	ldr	r2, [pc, #32]	; (8004c2c <FLASH_DataCacheCmd+0x38>)
 8004c0a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004c0e:	6013      	str	r3, [r2, #0]
  }
  else
  {
    FLASH->ACR &= (~FLASH_ACR_DCEN);
  }
}
 8004c10:	e005      	b.n	8004c1e <FLASH_DataCacheCmd+0x2a>
    FLASH->ACR &= (~FLASH_ACR_DCEN);
 8004c12:	4b06      	ldr	r3, [pc, #24]	; (8004c2c <FLASH_DataCacheCmd+0x38>)
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	4a05      	ldr	r2, [pc, #20]	; (8004c2c <FLASH_DataCacheCmd+0x38>)
 8004c18:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004c1c:	6013      	str	r3, [r2, #0]
}
 8004c1e:	bf00      	nop
 8004c20:	370c      	adds	r7, #12
 8004c22:	46bd      	mov	sp, r7
 8004c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c28:	4770      	bx	lr
 8004c2a:	bf00      	nop
 8004c2c:	40023c00 	.word	0x40023c00

08004c30 <FLASH_InstructionCacheReset>:
  * @note   This function must be used only when the Instruction Cache is disabled.  
  * @param  None
  * @retval None
  */
void FLASH_InstructionCacheReset(void)
{
 8004c30:	b480      	push	{r7}
 8004c32:	af00      	add	r7, sp, #0
  FLASH->ACR |= FLASH_ACR_ICRST;
 8004c34:	4b05      	ldr	r3, [pc, #20]	; (8004c4c <FLASH_InstructionCacheReset+0x1c>)
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	4a04      	ldr	r2, [pc, #16]	; (8004c4c <FLASH_InstructionCacheReset+0x1c>)
 8004c3a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004c3e:	6013      	str	r3, [r2, #0]
}
 8004c40:	bf00      	nop
 8004c42:	46bd      	mov	sp, r7
 8004c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c48:	4770      	bx	lr
 8004c4a:	bf00      	nop
 8004c4c:	40023c00 	.word	0x40023c00

08004c50 <FLASH_DataCacheReset>:
  * @note   This function must be used only when the Data Cache is disabled.  
  * @param  None
  * @retval None
  */
void FLASH_DataCacheReset(void)
{
 8004c50:	b480      	push	{r7}
 8004c52:	af00      	add	r7, sp, #0
  FLASH->ACR |= FLASH_ACR_DCRST;
 8004c54:	4b05      	ldr	r3, [pc, #20]	; (8004c6c <FLASH_DataCacheReset+0x1c>)
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	4a04      	ldr	r2, [pc, #16]	; (8004c6c <FLASH_DataCacheReset+0x1c>)
 8004c5a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004c5e:	6013      	str	r3, [r2, #0]
}
 8004c60:	bf00      	nop
 8004c62:	46bd      	mov	sp, r7
 8004c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c68:	4770      	bx	lr
 8004c6a:	bf00      	nop
 8004c6c:	40023c00 	.word	0x40023c00

08004c70 <FLASH_Unlock>:
  * @brief  Unlocks the FLASH control register access
  * @param  None
  * @retval None
  */
void FLASH_Unlock(void)
{
 8004c70:	b480      	push	{r7}
 8004c72:	af00      	add	r7, sp, #0
  if((FLASH->CR & FLASH_CR_LOCK) != RESET)
 8004c74:	4b07      	ldr	r3, [pc, #28]	; (8004c94 <FLASH_Unlock+0x24>)
 8004c76:	691b      	ldr	r3, [r3, #16]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	da05      	bge.n	8004c88 <FLASH_Unlock+0x18>
  {
    /* Authorize the FLASH Registers access */
    FLASH->KEYR = FLASH_KEY1;
 8004c7c:	4b05      	ldr	r3, [pc, #20]	; (8004c94 <FLASH_Unlock+0x24>)
 8004c7e:	4a06      	ldr	r2, [pc, #24]	; (8004c98 <FLASH_Unlock+0x28>)
 8004c80:	605a      	str	r2, [r3, #4]
    FLASH->KEYR = FLASH_KEY2;
 8004c82:	4b04      	ldr	r3, [pc, #16]	; (8004c94 <FLASH_Unlock+0x24>)
 8004c84:	4a05      	ldr	r2, [pc, #20]	; (8004c9c <FLASH_Unlock+0x2c>)
 8004c86:	605a      	str	r2, [r3, #4]
  }  
}
 8004c88:	bf00      	nop
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c90:	4770      	bx	lr
 8004c92:	bf00      	nop
 8004c94:	40023c00 	.word	0x40023c00
 8004c98:	45670123 	.word	0x45670123
 8004c9c:	cdef89ab 	.word	0xcdef89ab

08004ca0 <FLASH_Lock>:
  * @brief  Locks the FLASH control register access
  * @param  None
  * @retval None
  */
void FLASH_Lock(void)
{
 8004ca0:	b480      	push	{r7}
 8004ca2:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8004ca4:	4b05      	ldr	r3, [pc, #20]	; (8004cbc <FLASH_Lock+0x1c>)
 8004ca6:	691b      	ldr	r3, [r3, #16]
 8004ca8:	4a04      	ldr	r2, [pc, #16]	; (8004cbc <FLASH_Lock+0x1c>)
 8004caa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004cae:	6113      	str	r3, [r2, #16]
}
 8004cb0:	bf00      	nop
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb8:	4770      	bx	lr
 8004cba:	bf00      	nop
 8004cbc:	40023c00 	.word	0x40023c00

08004cc0 <FLASH_EraseSector>:
  *       
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
  *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
  */
FLASH_Status FLASH_EraseSector(uint32_t FLASH_Sector, uint8_t VoltageRange)
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b084      	sub	sp, #16
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
 8004cc8:	460b      	mov	r3, r1
 8004cca:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0x0;
 8004ccc:	2300      	movs	r3, #0
 8004cce:	60fb      	str	r3, [r7, #12]
  FLASH_Status status = FLASH_COMPLETE;
 8004cd0:	2309      	movs	r3, #9
 8004cd2:	72fb      	strb	r3, [r7, #11]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(FLASH_Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == VoltageRange_1)
 8004cd4:	78fb      	ldrb	r3, [r7, #3]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d102      	bne.n	8004ce0 <FLASH_EraseSector+0x20>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 8004cda:	2300      	movs	r3, #0
 8004cdc:	60fb      	str	r3, [r7, #12]
 8004cde:	e010      	b.n	8004d02 <FLASH_EraseSector+0x42>
  }
  else if(VoltageRange == VoltageRange_2)
 8004ce0:	78fb      	ldrb	r3, [r7, #3]
 8004ce2:	2b01      	cmp	r3, #1
 8004ce4:	d103      	bne.n	8004cee <FLASH_EraseSector+0x2e>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8004ce6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004cea:	60fb      	str	r3, [r7, #12]
 8004cec:	e009      	b.n	8004d02 <FLASH_EraseSector+0x42>
  }
  else if(VoltageRange == VoltageRange_3)
 8004cee:	78fb      	ldrb	r3, [r7, #3]
 8004cf0:	2b02      	cmp	r3, #2
 8004cf2:	d103      	bne.n	8004cfc <FLASH_EraseSector+0x3c>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8004cf4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004cf8:	60fb      	str	r3, [r7, #12]
 8004cfa:	e002      	b.n	8004d02 <FLASH_EraseSector+0x42>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8004cfc:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004d00:	60fb      	str	r3, [r7, #12]
  }
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation();
 8004d02:	f000 fc8b 	bl	800561c <FLASH_WaitForLastOperation>
 8004d06:	4603      	mov	r3, r0
 8004d08:	72fb      	strb	r3, [r7, #11]
  
  if(status == FLASH_COMPLETE)
 8004d0a:	7afb      	ldrb	r3, [r7, #11]
 8004d0c:	2b09      	cmp	r3, #9
 8004d0e:	d12f      	bne.n	8004d70 <FLASH_EraseSector+0xb0>
  { 
    /* if the previous operation is completed, proceed to erase the sector */
    FLASH->CR &= CR_PSIZE_MASK;
 8004d10:	4b1a      	ldr	r3, [pc, #104]	; (8004d7c <FLASH_EraseSector+0xbc>)
 8004d12:	691b      	ldr	r3, [r3, #16]
 8004d14:	4a19      	ldr	r2, [pc, #100]	; (8004d7c <FLASH_EraseSector+0xbc>)
 8004d16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d1a:	6113      	str	r3, [r2, #16]
    FLASH->CR |= tmp_psize;
 8004d1c:	4b17      	ldr	r3, [pc, #92]	; (8004d7c <FLASH_EraseSector+0xbc>)
 8004d1e:	691a      	ldr	r2, [r3, #16]
 8004d20:	4916      	ldr	r1, [pc, #88]	; (8004d7c <FLASH_EraseSector+0xbc>)
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	4313      	orrs	r3, r2
 8004d26:	610b      	str	r3, [r1, #16]
    FLASH->CR &= SECTOR_MASK;
 8004d28:	4b14      	ldr	r3, [pc, #80]	; (8004d7c <FLASH_EraseSector+0xbc>)
 8004d2a:	691b      	ldr	r3, [r3, #16]
 8004d2c:	4a13      	ldr	r2, [pc, #76]	; (8004d7c <FLASH_EraseSector+0xbc>)
 8004d2e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8004d32:	6113      	str	r3, [r2, #16]
    FLASH->CR |= FLASH_CR_SER | FLASH_Sector;
 8004d34:	4b11      	ldr	r3, [pc, #68]	; (8004d7c <FLASH_EraseSector+0xbc>)
 8004d36:	691a      	ldr	r2, [r3, #16]
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	4313      	orrs	r3, r2
 8004d3c:	4a0f      	ldr	r2, [pc, #60]	; (8004d7c <FLASH_EraseSector+0xbc>)
 8004d3e:	f043 0302 	orr.w	r3, r3, #2
 8004d42:	6113      	str	r3, [r2, #16]
    FLASH->CR |= FLASH_CR_STRT;
 8004d44:	4b0d      	ldr	r3, [pc, #52]	; (8004d7c <FLASH_EraseSector+0xbc>)
 8004d46:	691b      	ldr	r3, [r3, #16]
 8004d48:	4a0c      	ldr	r2, [pc, #48]	; (8004d7c <FLASH_EraseSector+0xbc>)
 8004d4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d4e:	6113      	str	r3, [r2, #16]
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation();
 8004d50:	f000 fc64 	bl	800561c <FLASH_WaitForLastOperation>
 8004d54:	4603      	mov	r3, r0
 8004d56:	72fb      	strb	r3, [r7, #11]
    
    /* if the erase operation is completed, disable the SER Bit */
    FLASH->CR &= (~FLASH_CR_SER);
 8004d58:	4b08      	ldr	r3, [pc, #32]	; (8004d7c <FLASH_EraseSector+0xbc>)
 8004d5a:	691b      	ldr	r3, [r3, #16]
 8004d5c:	4a07      	ldr	r2, [pc, #28]	; (8004d7c <FLASH_EraseSector+0xbc>)
 8004d5e:	f023 0302 	bic.w	r3, r3, #2
 8004d62:	6113      	str	r3, [r2, #16]
    FLASH->CR &= SECTOR_MASK; 
 8004d64:	4b05      	ldr	r3, [pc, #20]	; (8004d7c <FLASH_EraseSector+0xbc>)
 8004d66:	691b      	ldr	r3, [r3, #16]
 8004d68:	4a04      	ldr	r2, [pc, #16]	; (8004d7c <FLASH_EraseSector+0xbc>)
 8004d6a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8004d6e:	6113      	str	r3, [r2, #16]
  }
  /* Return the Erase Status */
  return status;
 8004d70:	7afb      	ldrb	r3, [r7, #11]
}
 8004d72:	4618      	mov	r0, r3
 8004d74:	3710      	adds	r7, #16
 8004d76:	46bd      	mov	sp, r7
 8004d78:	bd80      	pop	{r7, pc}
 8004d7a:	bf00      	nop
 8004d7c:	40023c00 	.word	0x40023c00

08004d80 <FLASH_EraseAllSectors>:
  *       
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
  *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
  */
FLASH_Status FLASH_EraseAllSectors(uint8_t VoltageRange)
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b084      	sub	sp, #16
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	4603      	mov	r3, r0
 8004d88:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp_psize = 0x0;
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	60fb      	str	r3, [r7, #12]
  FLASH_Status status = FLASH_COMPLETE;
 8004d8e:	2309      	movs	r3, #9
 8004d90:	72fb      	strb	r3, [r7, #11]
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation();
 8004d92:	f000 fc43 	bl	800561c <FLASH_WaitForLastOperation>
 8004d96:	4603      	mov	r3, r0
 8004d98:	72fb      	strb	r3, [r7, #11]
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == VoltageRange_1)
 8004d9a:	79fb      	ldrb	r3, [r7, #7]
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d102      	bne.n	8004da6 <FLASH_EraseAllSectors+0x26>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 8004da0:	2300      	movs	r3, #0
 8004da2:	60fb      	str	r3, [r7, #12]
 8004da4:	e010      	b.n	8004dc8 <FLASH_EraseAllSectors+0x48>
  }
  else if(VoltageRange == VoltageRange_2)
 8004da6:	79fb      	ldrb	r3, [r7, #7]
 8004da8:	2b01      	cmp	r3, #1
 8004daa:	d103      	bne.n	8004db4 <FLASH_EraseAllSectors+0x34>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8004dac:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004db0:	60fb      	str	r3, [r7, #12]
 8004db2:	e009      	b.n	8004dc8 <FLASH_EraseAllSectors+0x48>
  }
  else if(VoltageRange == VoltageRange_3)
 8004db4:	79fb      	ldrb	r3, [r7, #7]
 8004db6:	2b02      	cmp	r3, #2
 8004db8:	d103      	bne.n	8004dc2 <FLASH_EraseAllSectors+0x42>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8004dba:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004dbe:	60fb      	str	r3, [r7, #12]
 8004dc0:	e002      	b.n	8004dc8 <FLASH_EraseAllSectors+0x48>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8004dc2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004dc6:	60fb      	str	r3, [r7, #12]
  }  
  if(status == FLASH_COMPLETE)
 8004dc8:	7afb      	ldrb	r3, [r7, #11]
 8004dca:	2b09      	cmp	r3, #9
 8004dcc:	d125      	bne.n	8004e1a <FLASH_EraseAllSectors+0x9a>
  {
    /* if the previous operation is completed, proceed to erase all sectors */
#if defined (STM32F427_437xx) || defined (STM32F429_439xx)    
    FLASH->CR &= CR_PSIZE_MASK;
 8004dce:	4b15      	ldr	r3, [pc, #84]	; (8004e24 <FLASH_EraseAllSectors+0xa4>)
 8004dd0:	691b      	ldr	r3, [r3, #16]
 8004dd2:	4a14      	ldr	r2, [pc, #80]	; (8004e24 <FLASH_EraseAllSectors+0xa4>)
 8004dd4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004dd8:	6113      	str	r3, [r2, #16]
    FLASH->CR |= tmp_psize;
 8004dda:	4b12      	ldr	r3, [pc, #72]	; (8004e24 <FLASH_EraseAllSectors+0xa4>)
 8004ddc:	691a      	ldr	r2, [r3, #16]
 8004dde:	4911      	ldr	r1, [pc, #68]	; (8004e24 <FLASH_EraseAllSectors+0xa4>)
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	4313      	orrs	r3, r2
 8004de4:	610b      	str	r3, [r1, #16]
    FLASH->CR |= (FLASH_CR_MER1 | FLASH_CR_MER2);
 8004de6:	4b0f      	ldr	r3, [pc, #60]	; (8004e24 <FLASH_EraseAllSectors+0xa4>)
 8004de8:	691b      	ldr	r3, [r3, #16]
 8004dea:	4a0e      	ldr	r2, [pc, #56]	; (8004e24 <FLASH_EraseAllSectors+0xa4>)
 8004dec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004df0:	f043 0304 	orr.w	r3, r3, #4
 8004df4:	6113      	str	r3, [r2, #16]
    FLASH->CR |= FLASH_CR_STRT;
 8004df6:	4b0b      	ldr	r3, [pc, #44]	; (8004e24 <FLASH_EraseAllSectors+0xa4>)
 8004df8:	691b      	ldr	r3, [r3, #16]
 8004dfa:	4a0a      	ldr	r2, [pc, #40]	; (8004e24 <FLASH_EraseAllSectors+0xa4>)
 8004dfc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e00:	6113      	str	r3, [r2, #16]
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation();
 8004e02:	f000 fc0b 	bl	800561c <FLASH_WaitForLastOperation>
 8004e06:	4603      	mov	r3, r0
 8004e08:	72fb      	strb	r3, [r7, #11]

    /* if the erase operation is completed, disable the MER Bit */
    FLASH->CR &= ~(FLASH_CR_MER1 | FLASH_CR_MER2);
 8004e0a:	4b06      	ldr	r3, [pc, #24]	; (8004e24 <FLASH_EraseAllSectors+0xa4>)
 8004e0c:	691b      	ldr	r3, [r3, #16]
 8004e0e:	4a05      	ldr	r2, [pc, #20]	; (8004e24 <FLASH_EraseAllSectors+0xa4>)
 8004e10:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004e14:	f023 0304 	bic.w	r3, r3, #4
 8004e18:	6113      	str	r3, [r2, #16]
    FLASH->CR &= (~FLASH_CR_MER);
#endif /* STM32F40_41xxx || STM32F401xx */

  }   
  /* Return the Erase Status */
  return status;
 8004e1a:	7afb      	ldrb	r3, [r7, #11]
}
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	3710      	adds	r7, #16
 8004e20:	46bd      	mov	sp, r7
 8004e22:	bd80      	pop	{r7, pc}
 8004e24:	40023c00 	.word	0x40023c00

08004e28 <FLASH_EraseAllBank1Sectors>:
  *       
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
  *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
  */
FLASH_Status FLASH_EraseAllBank1Sectors(uint8_t VoltageRange)
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b084      	sub	sp, #16
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	4603      	mov	r3, r0
 8004e30:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp_psize = 0x0;
 8004e32:	2300      	movs	r3, #0
 8004e34:	60fb      	str	r3, [r7, #12]
  FLASH_Status status = FLASH_COMPLETE;
 8004e36:	2309      	movs	r3, #9
 8004e38:	72fb      	strb	r3, [r7, #11]
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation();
 8004e3a:	f000 fbef 	bl	800561c <FLASH_WaitForLastOperation>
 8004e3e:	4603      	mov	r3, r0
 8004e40:	72fb      	strb	r3, [r7, #11]
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == VoltageRange_1)
 8004e42:	79fb      	ldrb	r3, [r7, #7]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d102      	bne.n	8004e4e <FLASH_EraseAllBank1Sectors+0x26>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 8004e48:	2300      	movs	r3, #0
 8004e4a:	60fb      	str	r3, [r7, #12]
 8004e4c:	e010      	b.n	8004e70 <FLASH_EraseAllBank1Sectors+0x48>
  }
  else if(VoltageRange == VoltageRange_2)
 8004e4e:	79fb      	ldrb	r3, [r7, #7]
 8004e50:	2b01      	cmp	r3, #1
 8004e52:	d103      	bne.n	8004e5c <FLASH_EraseAllBank1Sectors+0x34>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8004e54:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004e58:	60fb      	str	r3, [r7, #12]
 8004e5a:	e009      	b.n	8004e70 <FLASH_EraseAllBank1Sectors+0x48>
  }
  else if(VoltageRange == VoltageRange_3)
 8004e5c:	79fb      	ldrb	r3, [r7, #7]
 8004e5e:	2b02      	cmp	r3, #2
 8004e60:	d103      	bne.n	8004e6a <FLASH_EraseAllBank1Sectors+0x42>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8004e62:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004e66:	60fb      	str	r3, [r7, #12]
 8004e68:	e002      	b.n	8004e70 <FLASH_EraseAllBank1Sectors+0x48>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8004e6a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004e6e:	60fb      	str	r3, [r7, #12]
  }  
  if(status == FLASH_COMPLETE)
 8004e70:	7afb      	ldrb	r3, [r7, #11]
 8004e72:	2b09      	cmp	r3, #9
 8004e74:	d121      	bne.n	8004eba <FLASH_EraseAllBank1Sectors+0x92>
  {
    /* if the previous operation is completed, proceed to erase all sectors */
     FLASH->CR &= CR_PSIZE_MASK;
 8004e76:	4b13      	ldr	r3, [pc, #76]	; (8004ec4 <FLASH_EraseAllBank1Sectors+0x9c>)
 8004e78:	691b      	ldr	r3, [r3, #16]
 8004e7a:	4a12      	ldr	r2, [pc, #72]	; (8004ec4 <FLASH_EraseAllBank1Sectors+0x9c>)
 8004e7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e80:	6113      	str	r3, [r2, #16]
     FLASH->CR |= tmp_psize;
 8004e82:	4b10      	ldr	r3, [pc, #64]	; (8004ec4 <FLASH_EraseAllBank1Sectors+0x9c>)
 8004e84:	691a      	ldr	r2, [r3, #16]
 8004e86:	490f      	ldr	r1, [pc, #60]	; (8004ec4 <FLASH_EraseAllBank1Sectors+0x9c>)
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	4313      	orrs	r3, r2
 8004e8c:	610b      	str	r3, [r1, #16]
     FLASH->CR |= FLASH_CR_MER1;
 8004e8e:	4b0d      	ldr	r3, [pc, #52]	; (8004ec4 <FLASH_EraseAllBank1Sectors+0x9c>)
 8004e90:	691b      	ldr	r3, [r3, #16]
 8004e92:	4a0c      	ldr	r2, [pc, #48]	; (8004ec4 <FLASH_EraseAllBank1Sectors+0x9c>)
 8004e94:	f043 0304 	orr.w	r3, r3, #4
 8004e98:	6113      	str	r3, [r2, #16]
     FLASH->CR |= FLASH_CR_STRT;
 8004e9a:	4b0a      	ldr	r3, [pc, #40]	; (8004ec4 <FLASH_EraseAllBank1Sectors+0x9c>)
 8004e9c:	691b      	ldr	r3, [r3, #16]
 8004e9e:	4a09      	ldr	r2, [pc, #36]	; (8004ec4 <FLASH_EraseAllBank1Sectors+0x9c>)
 8004ea0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ea4:	6113      	str	r3, [r2, #16]
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation();
 8004ea6:	f000 fbb9 	bl	800561c <FLASH_WaitForLastOperation>
 8004eaa:	4603      	mov	r3, r0
 8004eac:	72fb      	strb	r3, [r7, #11]

    /* if the erase operation is completed, disable the MER Bit */
    FLASH->CR &= (~FLASH_CR_MER1);
 8004eae:	4b05      	ldr	r3, [pc, #20]	; (8004ec4 <FLASH_EraseAllBank1Sectors+0x9c>)
 8004eb0:	691b      	ldr	r3, [r3, #16]
 8004eb2:	4a04      	ldr	r2, [pc, #16]	; (8004ec4 <FLASH_EraseAllBank1Sectors+0x9c>)
 8004eb4:	f023 0304 	bic.w	r3, r3, #4
 8004eb8:	6113      	str	r3, [r2, #16]

  }   
  /* Return the Erase Status */
  return status;
 8004eba:	7afb      	ldrb	r3, [r7, #11]
}
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	3710      	adds	r7, #16
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	bd80      	pop	{r7, pc}
 8004ec4:	40023c00 	.word	0x40023c00

08004ec8 <FLASH_EraseAllBank2Sectors>:
  *       
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
  *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
  */
FLASH_Status FLASH_EraseAllBank2Sectors(uint8_t VoltageRange)
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b084      	sub	sp, #16
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	4603      	mov	r3, r0
 8004ed0:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp_psize = 0x0;
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	60fb      	str	r3, [r7, #12]
  FLASH_Status status = FLASH_COMPLETE;
 8004ed6:	2309      	movs	r3, #9
 8004ed8:	72fb      	strb	r3, [r7, #11]
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation();
 8004eda:	f000 fb9f 	bl	800561c <FLASH_WaitForLastOperation>
 8004ede:	4603      	mov	r3, r0
 8004ee0:	72fb      	strb	r3, [r7, #11]
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == VoltageRange_1)
 8004ee2:	79fb      	ldrb	r3, [r7, #7]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d102      	bne.n	8004eee <FLASH_EraseAllBank2Sectors+0x26>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 8004ee8:	2300      	movs	r3, #0
 8004eea:	60fb      	str	r3, [r7, #12]
 8004eec:	e010      	b.n	8004f10 <FLASH_EraseAllBank2Sectors+0x48>
  }
  else if(VoltageRange == VoltageRange_2)
 8004eee:	79fb      	ldrb	r3, [r7, #7]
 8004ef0:	2b01      	cmp	r3, #1
 8004ef2:	d103      	bne.n	8004efc <FLASH_EraseAllBank2Sectors+0x34>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8004ef4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004ef8:	60fb      	str	r3, [r7, #12]
 8004efa:	e009      	b.n	8004f10 <FLASH_EraseAllBank2Sectors+0x48>
  }
  else if(VoltageRange == VoltageRange_3)
 8004efc:	79fb      	ldrb	r3, [r7, #7]
 8004efe:	2b02      	cmp	r3, #2
 8004f00:	d103      	bne.n	8004f0a <FLASH_EraseAllBank2Sectors+0x42>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8004f02:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004f06:	60fb      	str	r3, [r7, #12]
 8004f08:	e002      	b.n	8004f10 <FLASH_EraseAllBank2Sectors+0x48>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8004f0a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004f0e:	60fb      	str	r3, [r7, #12]
  }  
  if(status == FLASH_COMPLETE)
 8004f10:	7afb      	ldrb	r3, [r7, #11]
 8004f12:	2b09      	cmp	r3, #9
 8004f14:	d121      	bne.n	8004f5a <FLASH_EraseAllBank2Sectors+0x92>
  {
    /* if the previous operation is completed, proceed to erase all sectors */
     FLASH->CR &= CR_PSIZE_MASK;
 8004f16:	4b13      	ldr	r3, [pc, #76]	; (8004f64 <FLASH_EraseAllBank2Sectors+0x9c>)
 8004f18:	691b      	ldr	r3, [r3, #16]
 8004f1a:	4a12      	ldr	r2, [pc, #72]	; (8004f64 <FLASH_EraseAllBank2Sectors+0x9c>)
 8004f1c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f20:	6113      	str	r3, [r2, #16]
     FLASH->CR |= tmp_psize;
 8004f22:	4b10      	ldr	r3, [pc, #64]	; (8004f64 <FLASH_EraseAllBank2Sectors+0x9c>)
 8004f24:	691a      	ldr	r2, [r3, #16]
 8004f26:	490f      	ldr	r1, [pc, #60]	; (8004f64 <FLASH_EraseAllBank2Sectors+0x9c>)
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	4313      	orrs	r3, r2
 8004f2c:	610b      	str	r3, [r1, #16]
     FLASH->CR |= FLASH_CR_MER2;
 8004f2e:	4b0d      	ldr	r3, [pc, #52]	; (8004f64 <FLASH_EraseAllBank2Sectors+0x9c>)
 8004f30:	691b      	ldr	r3, [r3, #16]
 8004f32:	4a0c      	ldr	r2, [pc, #48]	; (8004f64 <FLASH_EraseAllBank2Sectors+0x9c>)
 8004f34:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f38:	6113      	str	r3, [r2, #16]
     FLASH->CR |= FLASH_CR_STRT;
 8004f3a:	4b0a      	ldr	r3, [pc, #40]	; (8004f64 <FLASH_EraseAllBank2Sectors+0x9c>)
 8004f3c:	691b      	ldr	r3, [r3, #16]
 8004f3e:	4a09      	ldr	r2, [pc, #36]	; (8004f64 <FLASH_EraseAllBank2Sectors+0x9c>)
 8004f40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f44:	6113      	str	r3, [r2, #16]
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation();
 8004f46:	f000 fb69 	bl	800561c <FLASH_WaitForLastOperation>
 8004f4a:	4603      	mov	r3, r0
 8004f4c:	72fb      	strb	r3, [r7, #11]

    /* if the erase operation is completed, disable the MER Bit */
    FLASH->CR &= (~FLASH_CR_MER2);
 8004f4e:	4b05      	ldr	r3, [pc, #20]	; (8004f64 <FLASH_EraseAllBank2Sectors+0x9c>)
 8004f50:	691b      	ldr	r3, [r3, #16]
 8004f52:	4a04      	ldr	r2, [pc, #16]	; (8004f64 <FLASH_EraseAllBank2Sectors+0x9c>)
 8004f54:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004f58:	6113      	str	r3, [r2, #16]

  }   
  /* Return the Erase Status */
  return status;
 8004f5a:	7afb      	ldrb	r3, [r7, #11]
}
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	3710      	adds	r7, #16
 8004f60:	46bd      	mov	sp, r7
 8004f62:	bd80      	pop	{r7, pc}
 8004f64:	40023c00 	.word	0x40023c00

08004f68 <FLASH_ProgramDoubleWord>:
  * @param  Data: specifies the data to be programmed.
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
  *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
  */
FLASH_Status FLASH_ProgramDoubleWord(uint32_t Address, uint64_t Data)
{
 8004f68:	b590      	push	{r4, r7, lr}
 8004f6a:	b087      	sub	sp, #28
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	60f8      	str	r0, [r7, #12]
 8004f70:	e9c7 2300 	strd	r2, r3, [r7]
  FLASH_Status status = FLASH_COMPLETE;
 8004f74:	2309      	movs	r3, #9
 8004f76:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation();
 8004f78:	f000 fb50 	bl	800561c <FLASH_WaitForLastOperation>
 8004f7c:	4603      	mov	r3, r0
 8004f7e:	75fb      	strb	r3, [r7, #23]
  
  if(status == FLASH_COMPLETE)
 8004f80:	7dfb      	ldrb	r3, [r7, #23]
 8004f82:	2b09      	cmp	r3, #9
 8004f84:	d120      	bne.n	8004fc8 <FLASH_ProgramDoubleWord+0x60>
  {
    /* if the previous operation is completed, proceed to program the new data */
    FLASH->CR &= CR_PSIZE_MASK;
 8004f86:	4b13      	ldr	r3, [pc, #76]	; (8004fd4 <FLASH_ProgramDoubleWord+0x6c>)
 8004f88:	691b      	ldr	r3, [r3, #16]
 8004f8a:	4a12      	ldr	r2, [pc, #72]	; (8004fd4 <FLASH_ProgramDoubleWord+0x6c>)
 8004f8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f90:	6113      	str	r3, [r2, #16]
    FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8004f92:	4b10      	ldr	r3, [pc, #64]	; (8004fd4 <FLASH_ProgramDoubleWord+0x6c>)
 8004f94:	691b      	ldr	r3, [r3, #16]
 8004f96:	4a0f      	ldr	r2, [pc, #60]	; (8004fd4 <FLASH_ProgramDoubleWord+0x6c>)
 8004f98:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8004f9c:	6113      	str	r3, [r2, #16]
    FLASH->CR |= FLASH_CR_PG;
 8004f9e:	4b0d      	ldr	r3, [pc, #52]	; (8004fd4 <FLASH_ProgramDoubleWord+0x6c>)
 8004fa0:	691b      	ldr	r3, [r3, #16]
 8004fa2:	4a0c      	ldr	r2, [pc, #48]	; (8004fd4 <FLASH_ProgramDoubleWord+0x6c>)
 8004fa4:	f043 0301 	orr.w	r3, r3, #1
 8004fa8:	6113      	str	r3, [r2, #16]
  
    *(__IO uint64_t*)Address = Data;
 8004faa:	68fa      	ldr	r2, [r7, #12]
 8004fac:	e9d7 3400 	ldrd	r3, r4, [r7]
 8004fb0:	e9c2 3400 	strd	r3, r4, [r2]
        
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation();
 8004fb4:	f000 fb32 	bl	800561c <FLASH_WaitForLastOperation>
 8004fb8:	4603      	mov	r3, r0
 8004fba:	75fb      	strb	r3, [r7, #23]

    /* if the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 8004fbc:	4b05      	ldr	r3, [pc, #20]	; (8004fd4 <FLASH_ProgramDoubleWord+0x6c>)
 8004fbe:	691b      	ldr	r3, [r3, #16]
 8004fc0:	4a04      	ldr	r2, [pc, #16]	; (8004fd4 <FLASH_ProgramDoubleWord+0x6c>)
 8004fc2:	f023 0301 	bic.w	r3, r3, #1
 8004fc6:	6113      	str	r3, [r2, #16]
  } 
  /* Return the Program Status */
  return status;
 8004fc8:	7dfb      	ldrb	r3, [r7, #23]
}
 8004fca:	4618      	mov	r0, r3
 8004fcc:	371c      	adds	r7, #28
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	bd90      	pop	{r4, r7, pc}
 8004fd2:	bf00      	nop
 8004fd4:	40023c00 	.word	0x40023c00

08004fd8 <FLASH_ProgramWord>:
  * @param  Data: specifies the data to be programmed.
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
  *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
  */
FLASH_Status FLASH_ProgramWord(uint32_t Address, uint32_t Data)
{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b084      	sub	sp, #16
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
 8004fe0:	6039      	str	r1, [r7, #0]
  FLASH_Status status = FLASH_COMPLETE;
 8004fe2:	2309      	movs	r3, #9
 8004fe4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation();
 8004fe6:	f000 fb19 	bl	800561c <FLASH_WaitForLastOperation>
 8004fea:	4603      	mov	r3, r0
 8004fec:	73fb      	strb	r3, [r7, #15]
  
  if(status == FLASH_COMPLETE)
 8004fee:	7bfb      	ldrb	r3, [r7, #15]
 8004ff0:	2b09      	cmp	r3, #9
 8004ff2:	d11e      	bne.n	8005032 <FLASH_ProgramWord+0x5a>
  {
    /* if the previous operation is completed, proceed to program the new data */
    FLASH->CR &= CR_PSIZE_MASK;
 8004ff4:	4b11      	ldr	r3, [pc, #68]	; (800503c <FLASH_ProgramWord+0x64>)
 8004ff6:	691b      	ldr	r3, [r3, #16]
 8004ff8:	4a10      	ldr	r2, [pc, #64]	; (800503c <FLASH_ProgramWord+0x64>)
 8004ffa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ffe:	6113      	str	r3, [r2, #16]
    FLASH->CR |= FLASH_PSIZE_WORD;
 8005000:	4b0e      	ldr	r3, [pc, #56]	; (800503c <FLASH_ProgramWord+0x64>)
 8005002:	691b      	ldr	r3, [r3, #16]
 8005004:	4a0d      	ldr	r2, [pc, #52]	; (800503c <FLASH_ProgramWord+0x64>)
 8005006:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800500a:	6113      	str	r3, [r2, #16]
    FLASH->CR |= FLASH_CR_PG;
 800500c:	4b0b      	ldr	r3, [pc, #44]	; (800503c <FLASH_ProgramWord+0x64>)
 800500e:	691b      	ldr	r3, [r3, #16]
 8005010:	4a0a      	ldr	r2, [pc, #40]	; (800503c <FLASH_ProgramWord+0x64>)
 8005012:	f043 0301 	orr.w	r3, r3, #1
 8005016:	6113      	str	r3, [r2, #16]
  
    *(__IO uint32_t*)Address = Data;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	683a      	ldr	r2, [r7, #0]
 800501c:	601a      	str	r2, [r3, #0]
        
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation();
 800501e:	f000 fafd 	bl	800561c <FLASH_WaitForLastOperation>
 8005022:	4603      	mov	r3, r0
 8005024:	73fb      	strb	r3, [r7, #15]

    /* if the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 8005026:	4b05      	ldr	r3, [pc, #20]	; (800503c <FLASH_ProgramWord+0x64>)
 8005028:	691b      	ldr	r3, [r3, #16]
 800502a:	4a04      	ldr	r2, [pc, #16]	; (800503c <FLASH_ProgramWord+0x64>)
 800502c:	f023 0301 	bic.w	r3, r3, #1
 8005030:	6113      	str	r3, [r2, #16]
  } 
  /* Return the Program Status */
  return status;
 8005032:	7bfb      	ldrb	r3, [r7, #15]
}
 8005034:	4618      	mov	r0, r3
 8005036:	3710      	adds	r7, #16
 8005038:	46bd      	mov	sp, r7
 800503a:	bd80      	pop	{r7, pc}
 800503c:	40023c00 	.word	0x40023c00

08005040 <FLASH_ProgramHalfWord>:
  * @param  Data: specifies the data to be programmed.
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
  *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
  */
FLASH_Status FLASH_ProgramHalfWord(uint32_t Address, uint16_t Data)
{
 8005040:	b580      	push	{r7, lr}
 8005042:	b084      	sub	sp, #16
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
 8005048:	460b      	mov	r3, r1
 800504a:	807b      	strh	r3, [r7, #2]
  FLASH_Status status = FLASH_COMPLETE;
 800504c:	2309      	movs	r3, #9
 800504e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation();
 8005050:	f000 fae4 	bl	800561c <FLASH_WaitForLastOperation>
 8005054:	4603      	mov	r3, r0
 8005056:	73fb      	strb	r3, [r7, #15]
  
  if(status == FLASH_COMPLETE)
 8005058:	7bfb      	ldrb	r3, [r7, #15]
 800505a:	2b09      	cmp	r3, #9
 800505c:	d11e      	bne.n	800509c <FLASH_ProgramHalfWord+0x5c>
  {
    /* if the previous operation is completed, proceed to program the new data */
    FLASH->CR &= CR_PSIZE_MASK;
 800505e:	4b12      	ldr	r3, [pc, #72]	; (80050a8 <FLASH_ProgramHalfWord+0x68>)
 8005060:	691b      	ldr	r3, [r3, #16]
 8005062:	4a11      	ldr	r2, [pc, #68]	; (80050a8 <FLASH_ProgramHalfWord+0x68>)
 8005064:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005068:	6113      	str	r3, [r2, #16]
    FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 800506a:	4b0f      	ldr	r3, [pc, #60]	; (80050a8 <FLASH_ProgramHalfWord+0x68>)
 800506c:	691b      	ldr	r3, [r3, #16]
 800506e:	4a0e      	ldr	r2, [pc, #56]	; (80050a8 <FLASH_ProgramHalfWord+0x68>)
 8005070:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005074:	6113      	str	r3, [r2, #16]
    FLASH->CR |= FLASH_CR_PG;
 8005076:	4b0c      	ldr	r3, [pc, #48]	; (80050a8 <FLASH_ProgramHalfWord+0x68>)
 8005078:	691b      	ldr	r3, [r3, #16]
 800507a:	4a0b      	ldr	r2, [pc, #44]	; (80050a8 <FLASH_ProgramHalfWord+0x68>)
 800507c:	f043 0301 	orr.w	r3, r3, #1
 8005080:	6113      	str	r3, [r2, #16]
  
    *(__IO uint16_t*)Address = Data;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	887a      	ldrh	r2, [r7, #2]
 8005086:	801a      	strh	r2, [r3, #0]
        
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation();
 8005088:	f000 fac8 	bl	800561c <FLASH_WaitForLastOperation>
 800508c:	4603      	mov	r3, r0
 800508e:	73fb      	strb	r3, [r7, #15]

    /* if the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 8005090:	4b05      	ldr	r3, [pc, #20]	; (80050a8 <FLASH_ProgramHalfWord+0x68>)
 8005092:	691b      	ldr	r3, [r3, #16]
 8005094:	4a04      	ldr	r2, [pc, #16]	; (80050a8 <FLASH_ProgramHalfWord+0x68>)
 8005096:	f023 0301 	bic.w	r3, r3, #1
 800509a:	6113      	str	r3, [r2, #16]
  } 
  /* Return the Program Status */
  return status;
 800509c:	7bfb      	ldrb	r3, [r7, #15]
}
 800509e:	4618      	mov	r0, r3
 80050a0:	3710      	adds	r7, #16
 80050a2:	46bd      	mov	sp, r7
 80050a4:	bd80      	pop	{r7, pc}
 80050a6:	bf00      	nop
 80050a8:	40023c00 	.word	0x40023c00

080050ac <FLASH_ProgramByte>:
  * @param  Data: specifies the data to be programmed.
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
  *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
  */
FLASH_Status FLASH_ProgramByte(uint32_t Address, uint8_t Data)
{
 80050ac:	b580      	push	{r7, lr}
 80050ae:	b084      	sub	sp, #16
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
 80050b4:	460b      	mov	r3, r1
 80050b6:	70fb      	strb	r3, [r7, #3]
  FLASH_Status status = FLASH_COMPLETE;
 80050b8:	2309      	movs	r3, #9
 80050ba:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation();
 80050bc:	f000 faae 	bl	800561c <FLASH_WaitForLastOperation>
 80050c0:	4603      	mov	r3, r0
 80050c2:	73fb      	strb	r3, [r7, #15]
  
  if(status == FLASH_COMPLETE)
 80050c4:	7bfb      	ldrb	r3, [r7, #15]
 80050c6:	2b09      	cmp	r3, #9
 80050c8:	d11c      	bne.n	8005104 <FLASH_ProgramByte+0x58>
  {
    /* if the previous operation is completed, proceed to program the new data */
    FLASH->CR &= CR_PSIZE_MASK;
 80050ca:	4b11      	ldr	r3, [pc, #68]	; (8005110 <FLASH_ProgramByte+0x64>)
 80050cc:	691b      	ldr	r3, [r3, #16]
 80050ce:	4a10      	ldr	r2, [pc, #64]	; (8005110 <FLASH_ProgramByte+0x64>)
 80050d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050d4:	6113      	str	r3, [r2, #16]
    FLASH->CR |= FLASH_PSIZE_BYTE;
 80050d6:	4b0e      	ldr	r3, [pc, #56]	; (8005110 <FLASH_ProgramByte+0x64>)
 80050d8:	4a0d      	ldr	r2, [pc, #52]	; (8005110 <FLASH_ProgramByte+0x64>)
 80050da:	691b      	ldr	r3, [r3, #16]
 80050dc:	6113      	str	r3, [r2, #16]
    FLASH->CR |= FLASH_CR_PG;
 80050de:	4b0c      	ldr	r3, [pc, #48]	; (8005110 <FLASH_ProgramByte+0x64>)
 80050e0:	691b      	ldr	r3, [r3, #16]
 80050e2:	4a0b      	ldr	r2, [pc, #44]	; (8005110 <FLASH_ProgramByte+0x64>)
 80050e4:	f043 0301 	orr.w	r3, r3, #1
 80050e8:	6113      	str	r3, [r2, #16]
  
    *(__IO uint8_t*)Address = Data;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	78fa      	ldrb	r2, [r7, #3]
 80050ee:	701a      	strb	r2, [r3, #0]
        
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation();
 80050f0:	f000 fa94 	bl	800561c <FLASH_WaitForLastOperation>
 80050f4:	4603      	mov	r3, r0
 80050f6:	73fb      	strb	r3, [r7, #15]

    /* if the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 80050f8:	4b05      	ldr	r3, [pc, #20]	; (8005110 <FLASH_ProgramByte+0x64>)
 80050fa:	691b      	ldr	r3, [r3, #16]
 80050fc:	4a04      	ldr	r2, [pc, #16]	; (8005110 <FLASH_ProgramByte+0x64>)
 80050fe:	f023 0301 	bic.w	r3, r3, #1
 8005102:	6113      	str	r3, [r2, #16]
  } 

  /* Return the Program Status */
  return status;
 8005104:	7bfb      	ldrb	r3, [r7, #15]
}
 8005106:	4618      	mov	r0, r3
 8005108:	3710      	adds	r7, #16
 800510a:	46bd      	mov	sp, r7
 800510c:	bd80      	pop	{r7, pc}
 800510e:	bf00      	nop
 8005110:	40023c00 	.word	0x40023c00

08005114 <FLASH_OB_Unlock>:
  * @brief  Unlocks the FLASH Option Control Registers access.
  * @param  None
  * @retval None
  */
void FLASH_OB_Unlock(void)
{
 8005114:	b480      	push	{r7}
 8005116:	af00      	add	r7, sp, #0
  if((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != RESET)
 8005118:	4b08      	ldr	r3, [pc, #32]	; (800513c <FLASH_OB_Unlock+0x28>)
 800511a:	695b      	ldr	r3, [r3, #20]
 800511c:	f003 0301 	and.w	r3, r3, #1
 8005120:	2b00      	cmp	r3, #0
 8005122:	d005      	beq.n	8005130 <FLASH_OB_Unlock+0x1c>
  {
    /* Authorizes the Option Byte register programming */
    FLASH->OPTKEYR = FLASH_OPT_KEY1;
 8005124:	4b05      	ldr	r3, [pc, #20]	; (800513c <FLASH_OB_Unlock+0x28>)
 8005126:	4a06      	ldr	r2, [pc, #24]	; (8005140 <FLASH_OB_Unlock+0x2c>)
 8005128:	609a      	str	r2, [r3, #8]
    FLASH->OPTKEYR = FLASH_OPT_KEY2;
 800512a:	4b04      	ldr	r3, [pc, #16]	; (800513c <FLASH_OB_Unlock+0x28>)
 800512c:	4a05      	ldr	r2, [pc, #20]	; (8005144 <FLASH_OB_Unlock+0x30>)
 800512e:	609a      	str	r2, [r3, #8]
  }  
}
 8005130:	bf00      	nop
 8005132:	46bd      	mov	sp, r7
 8005134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005138:	4770      	bx	lr
 800513a:	bf00      	nop
 800513c:	40023c00 	.word	0x40023c00
 8005140:	08192a3b 	.word	0x08192a3b
 8005144:	4c5d6e7f 	.word	0x4c5d6e7f

08005148 <FLASH_OB_Lock>:
  * @brief  Locks the FLASH Option Control Registers access.
  * @param  None
  * @retval None
  */
void FLASH_OB_Lock(void)
{
 8005148:	b480      	push	{r7}
 800514a:	af00      	add	r7, sp, #0
  /* Set the OPTLOCK Bit to lock the FLASH Option Byte Registers access */
  FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 800514c:	4b05      	ldr	r3, [pc, #20]	; (8005164 <FLASH_OB_Lock+0x1c>)
 800514e:	695b      	ldr	r3, [r3, #20]
 8005150:	4a04      	ldr	r2, [pc, #16]	; (8005164 <FLASH_OB_Lock+0x1c>)
 8005152:	f043 0301 	orr.w	r3, r3, #1
 8005156:	6153      	str	r3, [r2, #20]
}
 8005158:	bf00      	nop
 800515a:	46bd      	mov	sp, r7
 800515c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005160:	4770      	bx	lr
 8005162:	bf00      	nop
 8005164:	40023c00 	.word	0x40023c00

08005168 <FLASH_OB_WRPConfig>:
  * @param  Newstate: new state of the Write Protection.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None  
  */
void FLASH_OB_WRPConfig(uint32_t OB_WRP, FunctionalState NewState)
{ 
 8005168:	b580      	push	{r7, lr}
 800516a:	b084      	sub	sp, #16
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
 8005170:	460b      	mov	r3, r1
 8005172:	70fb      	strb	r3, [r7, #3]
  FLASH_Status status = FLASH_COMPLETE;
 8005174:	2309      	movs	r3, #9
 8005176:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_OB_WRP(OB_WRP));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  status = FLASH_WaitForLastOperation();
 8005178:	f000 fa50 	bl	800561c <FLASH_WaitForLastOperation>
 800517c:	4603      	mov	r3, r0
 800517e:	73fb      	strb	r3, [r7, #15]

  if(status == FLASH_COMPLETE)
 8005180:	7bfb      	ldrb	r3, [r7, #15]
 8005182:	2b09      	cmp	r3, #9
 8005184:	d117      	bne.n	80051b6 <FLASH_OB_WRPConfig+0x4e>
  { 
    if(NewState != DISABLE)
 8005186:	78fb      	ldrb	r3, [r7, #3]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d00b      	beq.n	80051a4 <FLASH_OB_WRPConfig+0x3c>
    {
      *(__IO uint16_t*)OPTCR_BYTE2_ADDRESS &= (~OB_WRP);
 800518c:	4b0c      	ldr	r3, [pc, #48]	; (80051c0 <FLASH_OB_WRPConfig+0x58>)
 800518e:	881b      	ldrh	r3, [r3, #0]
 8005190:	b29a      	uxth	r2, r3
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	b29b      	uxth	r3, r3
 8005196:	43db      	mvns	r3, r3
 8005198:	b29b      	uxth	r3, r3
 800519a:	4909      	ldr	r1, [pc, #36]	; (80051c0 <FLASH_OB_WRPConfig+0x58>)
 800519c:	4013      	ands	r3, r2
 800519e:	b29b      	uxth	r3, r3
 80051a0:	800b      	strh	r3, [r1, #0]
    else
    {
      *(__IO uint16_t*)OPTCR_BYTE2_ADDRESS |= (uint16_t)OB_WRP;
    }
  }
}
 80051a2:	e008      	b.n	80051b6 <FLASH_OB_WRPConfig+0x4e>
      *(__IO uint16_t*)OPTCR_BYTE2_ADDRESS |= (uint16_t)OB_WRP;
 80051a4:	4b06      	ldr	r3, [pc, #24]	; (80051c0 <FLASH_OB_WRPConfig+0x58>)
 80051a6:	881b      	ldrh	r3, [r3, #0]
 80051a8:	b29a      	uxth	r2, r3
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	b29b      	uxth	r3, r3
 80051ae:	4904      	ldr	r1, [pc, #16]	; (80051c0 <FLASH_OB_WRPConfig+0x58>)
 80051b0:	4313      	orrs	r3, r2
 80051b2:	b29b      	uxth	r3, r3
 80051b4:	800b      	strh	r3, [r1, #0]
}
 80051b6:	bf00      	nop
 80051b8:	3710      	adds	r7, #16
 80051ba:	46bd      	mov	sp, r7
 80051bc:	bd80      	pop	{r7, pc}
 80051be:	bf00      	nop
 80051c0:	40023c16 	.word	0x40023c16

080051c4 <FLASH_OB_WRP1Config>:
  * @param  Newstate: new state of the Write Protection.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None  
  */
void FLASH_OB_WRP1Config(uint32_t OB_WRP, FunctionalState NewState)
{ 
 80051c4:	b580      	push	{r7, lr}
 80051c6:	b084      	sub	sp, #16
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
 80051cc:	460b      	mov	r3, r1
 80051ce:	70fb      	strb	r3, [r7, #3]
  FLASH_Status status = FLASH_COMPLETE;
 80051d0:	2309      	movs	r3, #9
 80051d2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_OB_WRP(OB_WRP));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  status = FLASH_WaitForLastOperation();
 80051d4:	f000 fa22 	bl	800561c <FLASH_WaitForLastOperation>
 80051d8:	4603      	mov	r3, r0
 80051da:	73fb      	strb	r3, [r7, #15]

  if(status == FLASH_COMPLETE)
 80051dc:	7bfb      	ldrb	r3, [r7, #15]
 80051de:	2b09      	cmp	r3, #9
 80051e0:	d117      	bne.n	8005212 <FLASH_OB_WRP1Config+0x4e>
  { 
    if(NewState != DISABLE)
 80051e2:	78fb      	ldrb	r3, [r7, #3]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d00b      	beq.n	8005200 <FLASH_OB_WRP1Config+0x3c>
    {
      *(__IO uint16_t*)OPTCR1_BYTE2_ADDRESS &= (~OB_WRP);
 80051e8:	4b0c      	ldr	r3, [pc, #48]	; (800521c <FLASH_OB_WRP1Config+0x58>)
 80051ea:	881b      	ldrh	r3, [r3, #0]
 80051ec:	b29a      	uxth	r2, r3
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	b29b      	uxth	r3, r3
 80051f2:	43db      	mvns	r3, r3
 80051f4:	b29b      	uxth	r3, r3
 80051f6:	4909      	ldr	r1, [pc, #36]	; (800521c <FLASH_OB_WRP1Config+0x58>)
 80051f8:	4013      	ands	r3, r2
 80051fa:	b29b      	uxth	r3, r3
 80051fc:	800b      	strh	r3, [r1, #0]
    else
    {
      *(__IO uint16_t*)OPTCR1_BYTE2_ADDRESS |= (uint16_t)OB_WRP;
    }
  }
}
 80051fe:	e008      	b.n	8005212 <FLASH_OB_WRP1Config+0x4e>
      *(__IO uint16_t*)OPTCR1_BYTE2_ADDRESS |= (uint16_t)OB_WRP;
 8005200:	4b06      	ldr	r3, [pc, #24]	; (800521c <FLASH_OB_WRP1Config+0x58>)
 8005202:	881b      	ldrh	r3, [r3, #0]
 8005204:	b29a      	uxth	r2, r3
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	b29b      	uxth	r3, r3
 800520a:	4904      	ldr	r1, [pc, #16]	; (800521c <FLASH_OB_WRP1Config+0x58>)
 800520c:	4313      	orrs	r3, r2
 800520e:	b29b      	uxth	r3, r3
 8005210:	800b      	strh	r3, [r1, #0]
}
 8005212:	bf00      	nop
 8005214:	3710      	adds	r7, #16
 8005216:	46bd      	mov	sp, r7
 8005218:	bd80      	pop	{r7, pc}
 800521a:	bf00      	nop
 800521c:	40023c1a 	.word	0x40023c1a

08005220 <FLASH_OB_PCROPSelectionConfig>:
  *            @arg OB_PcROP_Disable: nWRPi control the write protection of respective user sectors.
  *            @arg OB_PcROP_Enable: nWRPi control the  read&write protection (PCROP) of respective user sectors.
  * @retval None
  */
void FLASH_OB_PCROPSelectionConfig(uint8_t OB_PcROP)
{  
 8005220:	b480      	push	{r7}
 8005222:	b085      	sub	sp, #20
 8005224:	af00      	add	r7, sp, #0
 8005226:	4603      	mov	r3, r0
 8005228:	71fb      	strb	r3, [r7, #7]
  uint8_t optiontmp = 0xFF;
 800522a:	23ff      	movs	r3, #255	; 0xff
 800522c:	73fb      	strb	r3, [r7, #15]
      
  /* Check the parameters */
  assert_param(IS_OB_PCROP_SELECT(OB_PcROP));
  
  /* Mask SPRMOD bit */
  optiontmp =  (uint8_t)((*(__IO uint8_t *)OPTCR_BYTE3_ADDRESS) & (uint8_t)0x7F); 
 800522e:	4b09      	ldr	r3, [pc, #36]	; (8005254 <FLASH_OB_PCROPSelectionConfig+0x34>)
 8005230:	781b      	ldrb	r3, [r3, #0]
 8005232:	b2db      	uxtb	r3, r3
 8005234:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005238:	73fb      	strb	r3, [r7, #15]
  /* Update Option Byte */
  *(__IO uint8_t *)OPTCR_BYTE3_ADDRESS = (uint8_t)(OB_PcROP | optiontmp); 
 800523a:	4906      	ldr	r1, [pc, #24]	; (8005254 <FLASH_OB_PCROPSelectionConfig+0x34>)
 800523c:	79fa      	ldrb	r2, [r7, #7]
 800523e:	7bfb      	ldrb	r3, [r7, #15]
 8005240:	4313      	orrs	r3, r2
 8005242:	b2db      	uxtb	r3, r3
 8005244:	700b      	strb	r3, [r1, #0]
    
}
 8005246:	bf00      	nop
 8005248:	3714      	adds	r7, #20
 800524a:	46bd      	mov	sp, r7
 800524c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005250:	4770      	bx	lr
 8005252:	bf00      	nop
 8005254:	40023c17 	.word	0x40023c17

08005258 <FLASH_OB_PCROPConfig>:
  * @param  Newstate: new state of the Write Protection.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None  
  */
void FLASH_OB_PCROPConfig(uint32_t OB_PCROP, FunctionalState NewState)
{ 
 8005258:	b580      	push	{r7, lr}
 800525a:	b084      	sub	sp, #16
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
 8005260:	460b      	mov	r3, r1
 8005262:	70fb      	strb	r3, [r7, #3]
  FLASH_Status status = FLASH_COMPLETE;
 8005264:	2309      	movs	r3, #9
 8005266:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_OB_PCROP(OB_PCROP));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  status = FLASH_WaitForLastOperation();
 8005268:	f000 f9d8 	bl	800561c <FLASH_WaitForLastOperation>
 800526c:	4603      	mov	r3, r0
 800526e:	73fb      	strb	r3, [r7, #15]

  if(status == FLASH_COMPLETE)
 8005270:	7bfb      	ldrb	r3, [r7, #15]
 8005272:	2b09      	cmp	r3, #9
 8005274:	d117      	bne.n	80052a6 <FLASH_OB_PCROPConfig+0x4e>
  { 
    if(NewState != DISABLE)
 8005276:	78fb      	ldrb	r3, [r7, #3]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d009      	beq.n	8005290 <FLASH_OB_PCROPConfig+0x38>
    {
      *(__IO uint16_t*)OPTCR_BYTE2_ADDRESS |= (uint16_t)OB_PCROP;    
 800527c:	4b0c      	ldr	r3, [pc, #48]	; (80052b0 <FLASH_OB_PCROPConfig+0x58>)
 800527e:	881b      	ldrh	r3, [r3, #0]
 8005280:	b29a      	uxth	r2, r3
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	b29b      	uxth	r3, r3
 8005286:	490a      	ldr	r1, [pc, #40]	; (80052b0 <FLASH_OB_PCROPConfig+0x58>)
 8005288:	4313      	orrs	r3, r2
 800528a:	b29b      	uxth	r3, r3
 800528c:	800b      	strh	r3, [r1, #0]
    else
    {
      *(__IO uint16_t*)OPTCR_BYTE2_ADDRESS &= (~OB_PCROP);
    }
  }
}
 800528e:	e00a      	b.n	80052a6 <FLASH_OB_PCROPConfig+0x4e>
      *(__IO uint16_t*)OPTCR_BYTE2_ADDRESS &= (~OB_PCROP);
 8005290:	4b07      	ldr	r3, [pc, #28]	; (80052b0 <FLASH_OB_PCROPConfig+0x58>)
 8005292:	881b      	ldrh	r3, [r3, #0]
 8005294:	b29a      	uxth	r2, r3
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	b29b      	uxth	r3, r3
 800529a:	43db      	mvns	r3, r3
 800529c:	b29b      	uxth	r3, r3
 800529e:	4904      	ldr	r1, [pc, #16]	; (80052b0 <FLASH_OB_PCROPConfig+0x58>)
 80052a0:	4013      	ands	r3, r2
 80052a2:	b29b      	uxth	r3, r3
 80052a4:	800b      	strh	r3, [r1, #0]
}
 80052a6:	bf00      	nop
 80052a8:	3710      	adds	r7, #16
 80052aa:	46bd      	mov	sp, r7
 80052ac:	bd80      	pop	{r7, pc}
 80052ae:	bf00      	nop
 80052b0:	40023c16 	.word	0x40023c16

080052b4 <FLASH_OB_PCROP1Config>:
  * @param  Newstate: new state of the Write Protection.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None  
  */
void FLASH_OB_PCROP1Config(uint32_t OB_PCROP, FunctionalState NewState)
{ 
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b084      	sub	sp, #16
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
 80052bc:	460b      	mov	r3, r1
 80052be:	70fb      	strb	r3, [r7, #3]
  FLASH_Status status = FLASH_COMPLETE;
 80052c0:	2309      	movs	r3, #9
 80052c2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_OB_PCROP(OB_PCROP));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  status = FLASH_WaitForLastOperation();
 80052c4:	f000 f9aa 	bl	800561c <FLASH_WaitForLastOperation>
 80052c8:	4603      	mov	r3, r0
 80052ca:	73fb      	strb	r3, [r7, #15]

  if(status == FLASH_COMPLETE)
 80052cc:	7bfb      	ldrb	r3, [r7, #15]
 80052ce:	2b09      	cmp	r3, #9
 80052d0:	d117      	bne.n	8005302 <FLASH_OB_PCROP1Config+0x4e>
  { 
    if(NewState != DISABLE)
 80052d2:	78fb      	ldrb	r3, [r7, #3]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d009      	beq.n	80052ec <FLASH_OB_PCROP1Config+0x38>
    {
      *(__IO uint16_t*)OPTCR1_BYTE2_ADDRESS |= (uint16_t)OB_PCROP;
 80052d8:	4b0c      	ldr	r3, [pc, #48]	; (800530c <FLASH_OB_PCROP1Config+0x58>)
 80052da:	881b      	ldrh	r3, [r3, #0]
 80052dc:	b29a      	uxth	r2, r3
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	b29b      	uxth	r3, r3
 80052e2:	490a      	ldr	r1, [pc, #40]	; (800530c <FLASH_OB_PCROP1Config+0x58>)
 80052e4:	4313      	orrs	r3, r2
 80052e6:	b29b      	uxth	r3, r3
 80052e8:	800b      	strh	r3, [r1, #0]
    else
    {
      *(__IO uint16_t*)OPTCR1_BYTE2_ADDRESS &= (~OB_PCROP);
    }
  }
}
 80052ea:	e00a      	b.n	8005302 <FLASH_OB_PCROP1Config+0x4e>
      *(__IO uint16_t*)OPTCR1_BYTE2_ADDRESS &= (~OB_PCROP);
 80052ec:	4b07      	ldr	r3, [pc, #28]	; (800530c <FLASH_OB_PCROP1Config+0x58>)
 80052ee:	881b      	ldrh	r3, [r3, #0]
 80052f0:	b29a      	uxth	r2, r3
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	b29b      	uxth	r3, r3
 80052f6:	43db      	mvns	r3, r3
 80052f8:	b29b      	uxth	r3, r3
 80052fa:	4904      	ldr	r1, [pc, #16]	; (800530c <FLASH_OB_PCROP1Config+0x58>)
 80052fc:	4013      	ands	r3, r2
 80052fe:	b29b      	uxth	r3, r3
 8005300:	800b      	strh	r3, [r1, #0]
}
 8005302:	bf00      	nop
 8005304:	3710      	adds	r7, #16
 8005306:	46bd      	mov	sp, r7
 8005308:	bd80      	pop	{r7, pc}
 800530a:	bf00      	nop
 800530c:	40023c1a 	.word	0x40023c1a

08005310 <FLASH_OB_RDPConfig>:
  * /!\ Warning /!\ When enabling OB_RDP level 2 it's no more possible to go back to level 1 or 0
  *    
  * @retval None
  */
void FLASH_OB_RDPConfig(uint8_t OB_RDP)
{
 8005310:	b580      	push	{r7, lr}
 8005312:	b084      	sub	sp, #16
 8005314:	af00      	add	r7, sp, #0
 8005316:	4603      	mov	r3, r0
 8005318:	71fb      	strb	r3, [r7, #7]
  FLASH_Status status = FLASH_COMPLETE;
 800531a:	2309      	movs	r3, #9
 800531c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_OB_RDP(OB_RDP));

  status = FLASH_WaitForLastOperation();
 800531e:	f000 f97d 	bl	800561c <FLASH_WaitForLastOperation>
 8005322:	4603      	mov	r3, r0
 8005324:	73fb      	strb	r3, [r7, #15]

  if(status == FLASH_COMPLETE)
 8005326:	7bfb      	ldrb	r3, [r7, #15]
 8005328:	2b09      	cmp	r3, #9
 800532a:	d102      	bne.n	8005332 <FLASH_OB_RDPConfig+0x22>
  {
    *(__IO uint8_t*)OPTCR_BYTE1_ADDRESS = OB_RDP;
 800532c:	4a03      	ldr	r2, [pc, #12]	; (800533c <FLASH_OB_RDPConfig+0x2c>)
 800532e:	79fb      	ldrb	r3, [r7, #7]
 8005330:	7013      	strb	r3, [r2, #0]

  }
}
 8005332:	bf00      	nop
 8005334:	3710      	adds	r7, #16
 8005336:	46bd      	mov	sp, r7
 8005338:	bd80      	pop	{r7, pc}
 800533a:	bf00      	nop
 800533c:	40023c15 	.word	0x40023c15

08005340 <FLASH_OB_UserConfig>:
  *            @arg OB_STDBY_NoRST: No reset generated when entering in STANDBY
  *            @arg OB_STDBY_RST: Reset generated when entering in STANDBY
  * @retval None
  */
void FLASH_OB_UserConfig(uint8_t OB_IWDG, uint8_t OB_STOP, uint8_t OB_STDBY)
{
 8005340:	b580      	push	{r7, lr}
 8005342:	b084      	sub	sp, #16
 8005344:	af00      	add	r7, sp, #0
 8005346:	4603      	mov	r3, r0
 8005348:	71fb      	strb	r3, [r7, #7]
 800534a:	460b      	mov	r3, r1
 800534c:	71bb      	strb	r3, [r7, #6]
 800534e:	4613      	mov	r3, r2
 8005350:	717b      	strb	r3, [r7, #5]
  uint8_t optiontmp = 0xFF;
 8005352:	23ff      	movs	r3, #255	; 0xff
 8005354:	73fb      	strb	r3, [r7, #15]
  FLASH_Status status = FLASH_COMPLETE; 
 8005356:	2309      	movs	r3, #9
 8005358:	73bb      	strb	r3, [r7, #14]
  assert_param(IS_OB_IWDG_SOURCE(OB_IWDG));
  assert_param(IS_OB_STOP_SOURCE(OB_STOP));
  assert_param(IS_OB_STDBY_SOURCE(OB_STDBY));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation();
 800535a:	f000 f95f 	bl	800561c <FLASH_WaitForLastOperation>
 800535e:	4603      	mov	r3, r0
 8005360:	73bb      	strb	r3, [r7, #14]
  
  if(status == FLASH_COMPLETE)
 8005362:	7bbb      	ldrb	r3, [r7, #14]
 8005364:	2b09      	cmp	r3, #9
 8005366:	d111      	bne.n	800538c <FLASH_OB_UserConfig+0x4c>
  { 
#if defined (STM32F427_437xx) || defined (STM32F429_439xx)     
    /* Mask OPTLOCK, OPTSTRT, BOR_LEV and BFB2 bits */
    optiontmp =  (uint8_t)((*(__IO uint8_t *)OPTCR_BYTE0_ADDRESS) & (uint8_t)0x1F);
 8005368:	4b0a      	ldr	r3, [pc, #40]	; (8005394 <FLASH_OB_UserConfig+0x54>)
 800536a:	781b      	ldrb	r3, [r3, #0]
 800536c:	b2db      	uxtb	r3, r3
 800536e:	f003 031f 	and.w	r3, r3, #31
 8005372:	73fb      	strb	r3, [r7, #15]
    /* Mask OPTLOCK, OPTSTRT and BOR_LEV bits */
    optiontmp =  (uint8_t)((*(__IO uint8_t *)OPTCR_BYTE0_ADDRESS) & (uint8_t)0x0F); 
#endif /* STM32F40_41xxx || STM32F401xx */ 

    /* Update User Option Byte */
    *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS = OB_IWDG | (uint8_t)(OB_STDBY | (uint8_t)(OB_STOP | ((uint8_t)optiontmp))); 
 8005374:	79ba      	ldrb	r2, [r7, #6]
 8005376:	7bfb      	ldrb	r3, [r7, #15]
 8005378:	4313      	orrs	r3, r2
 800537a:	b2da      	uxtb	r2, r3
 800537c:	797b      	ldrb	r3, [r7, #5]
 800537e:	4313      	orrs	r3, r2
 8005380:	b2da      	uxtb	r2, r3
 8005382:	4904      	ldr	r1, [pc, #16]	; (8005394 <FLASH_OB_UserConfig+0x54>)
 8005384:	79fb      	ldrb	r3, [r7, #7]
 8005386:	4313      	orrs	r3, r2
 8005388:	b2db      	uxtb	r3, r3
 800538a:	700b      	strb	r3, [r1, #0]
  }  
}
 800538c:	bf00      	nop
 800538e:	3710      	adds	r7, #16
 8005390:	46bd      	mov	sp, r7
 8005392:	bd80      	pop	{r7, pc}
 8005394:	40023c14 	.word	0x40023c14

08005398 <FLASH_OB_BootConfig>:
  *            @arg OB_Dual_BootEnabled: Dual Bank Boot Enable
  *            @arg OB_Dual_BootDisabled: Dual Bank Boot Disabled
  * @retval None
  */
void FLASH_OB_BootConfig(uint8_t OB_BOOT)
{
 8005398:	b480      	push	{r7}
 800539a:	b083      	sub	sp, #12
 800539c:	af00      	add	r7, sp, #0
 800539e:	4603      	mov	r3, r0
 80053a0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_OB_BOOT(OB_BOOT));

  /* Set Dual Bank Boot */
  *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS &= (~FLASH_OPTCR_BFB2);
 80053a2:	4b0b      	ldr	r3, [pc, #44]	; (80053d0 <FLASH_OB_BootConfig+0x38>)
 80053a4:	781b      	ldrb	r3, [r3, #0]
 80053a6:	b2db      	uxtb	r3, r3
 80053a8:	4a09      	ldr	r2, [pc, #36]	; (80053d0 <FLASH_OB_BootConfig+0x38>)
 80053aa:	f023 0310 	bic.w	r3, r3, #16
 80053ae:	b2db      	uxtb	r3, r3
 80053b0:	7013      	strb	r3, [r2, #0]
  *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS |= OB_BOOT;
 80053b2:	4b07      	ldr	r3, [pc, #28]	; (80053d0 <FLASH_OB_BootConfig+0x38>)
 80053b4:	781b      	ldrb	r3, [r3, #0]
 80053b6:	b2da      	uxtb	r2, r3
 80053b8:	4905      	ldr	r1, [pc, #20]	; (80053d0 <FLASH_OB_BootConfig+0x38>)
 80053ba:	79fb      	ldrb	r3, [r7, #7]
 80053bc:	4313      	orrs	r3, r2
 80053be:	b2db      	uxtb	r3, r3
 80053c0:	700b      	strb	r3, [r1, #0]

}
 80053c2:	bf00      	nop
 80053c4:	370c      	adds	r7, #12
 80053c6:	46bd      	mov	sp, r7
 80053c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053cc:	4770      	bx	lr
 80053ce:	bf00      	nop
 80053d0:	40023c14 	.word	0x40023c14

080053d4 <FLASH_OB_BORConfig>:
  *            @arg OB_BOR_LEVEL1: Supply voltage ranges from 2.1 to 2.4 V
  *            @arg OB_BOR_OFF: Supply voltage ranges from 1.62 to 2.1 V
  * @retval None
  */
void FLASH_OB_BORConfig(uint8_t OB_BOR)
{
 80053d4:	b480      	push	{r7}
 80053d6:	b083      	sub	sp, #12
 80053d8:	af00      	add	r7, sp, #0
 80053da:	4603      	mov	r3, r0
 80053dc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_OB_BOR(OB_BOR));

  /* Set the BOR Level */
  *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS &= (~FLASH_OPTCR_BOR_LEV);
 80053de:	4b0b      	ldr	r3, [pc, #44]	; (800540c <FLASH_OB_BORConfig+0x38>)
 80053e0:	781b      	ldrb	r3, [r3, #0]
 80053e2:	b2db      	uxtb	r3, r3
 80053e4:	4a09      	ldr	r2, [pc, #36]	; (800540c <FLASH_OB_BORConfig+0x38>)
 80053e6:	f023 030c 	bic.w	r3, r3, #12
 80053ea:	b2db      	uxtb	r3, r3
 80053ec:	7013      	strb	r3, [r2, #0]
  *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS |= OB_BOR;
 80053ee:	4b07      	ldr	r3, [pc, #28]	; (800540c <FLASH_OB_BORConfig+0x38>)
 80053f0:	781b      	ldrb	r3, [r3, #0]
 80053f2:	b2da      	uxtb	r2, r3
 80053f4:	4905      	ldr	r1, [pc, #20]	; (800540c <FLASH_OB_BORConfig+0x38>)
 80053f6:	79fb      	ldrb	r3, [r7, #7]
 80053f8:	4313      	orrs	r3, r2
 80053fa:	b2db      	uxtb	r3, r3
 80053fc:	700b      	strb	r3, [r1, #0]

}
 80053fe:	bf00      	nop
 8005400:	370c      	adds	r7, #12
 8005402:	46bd      	mov	sp, r7
 8005404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005408:	4770      	bx	lr
 800540a:	bf00      	nop
 800540c:	40023c14 	.word	0x40023c14

08005410 <FLASH_OB_Launch>:
  * @param  None
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
  *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
  */
FLASH_Status FLASH_OB_Launch(void)
{
 8005410:	b580      	push	{r7, lr}
 8005412:	b082      	sub	sp, #8
 8005414:	af00      	add	r7, sp, #0
  FLASH_Status status = FLASH_COMPLETE;
 8005416:	2309      	movs	r3, #9
 8005418:	71fb      	strb	r3, [r7, #7]

  /* Set the OPTSTRT bit in OPTCR register */
  *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS |= FLASH_OPTCR_OPTSTRT;
 800541a:	4b08      	ldr	r3, [pc, #32]	; (800543c <FLASH_OB_Launch+0x2c>)
 800541c:	781b      	ldrb	r3, [r3, #0]
 800541e:	b2db      	uxtb	r3, r3
 8005420:	4a06      	ldr	r2, [pc, #24]	; (800543c <FLASH_OB_Launch+0x2c>)
 8005422:	f043 0302 	orr.w	r3, r3, #2
 8005426:	b2db      	uxtb	r3, r3
 8005428:	7013      	strb	r3, [r2, #0]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation();
 800542a:	f000 f8f7 	bl	800561c <FLASH_WaitForLastOperation>
 800542e:	4603      	mov	r3, r0
 8005430:	71fb      	strb	r3, [r7, #7]

  return status;
 8005432:	79fb      	ldrb	r3, [r7, #7]
}
 8005434:	4618      	mov	r0, r3
 8005436:	3708      	adds	r7, #8
 8005438:	46bd      	mov	sp, r7
 800543a:	bd80      	pop	{r7, pc}
 800543c:	40023c14 	.word	0x40023c14

08005440 <FLASH_OB_GetUser>:
  * @param  None
  * @retval The FLASH User Option Bytes values: IWDG_SW(Bit0), RST_STOP(Bit1)
  *         and RST_STDBY(Bit2).
  */
uint8_t FLASH_OB_GetUser(void)
{
 8005440:	b480      	push	{r7}
 8005442:	af00      	add	r7, sp, #0
  /* Return the User Option Byte */
  return (uint8_t)(FLASH->OPTCR >> 5);
 8005444:	4b04      	ldr	r3, [pc, #16]	; (8005458 <FLASH_OB_GetUser+0x18>)
 8005446:	695b      	ldr	r3, [r3, #20]
 8005448:	095b      	lsrs	r3, r3, #5
 800544a:	b2db      	uxtb	r3, r3
}
 800544c:	4618      	mov	r0, r3
 800544e:	46bd      	mov	sp, r7
 8005450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005454:	4770      	bx	lr
 8005456:	bf00      	nop
 8005458:	40023c00 	.word	0x40023c00

0800545c <FLASH_OB_GetWRP>:
  * @brief  Returns the FLASH Write Protection Option Bytes value.
  * @param  None
  * @retval The FLASH Write Protection  Option Bytes value
  */
uint16_t FLASH_OB_GetWRP(void)
{
 800545c:	b480      	push	{r7}
 800545e:	af00      	add	r7, sp, #0
  /* Return the FLASH write protection Register value */
  return (*(__IO uint16_t *)(OPTCR_BYTE2_ADDRESS));
 8005460:	4b03      	ldr	r3, [pc, #12]	; (8005470 <FLASH_OB_GetWRP+0x14>)
 8005462:	881b      	ldrh	r3, [r3, #0]
 8005464:	b29b      	uxth	r3, r3
}
 8005466:	4618      	mov	r0, r3
 8005468:	46bd      	mov	sp, r7
 800546a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546e:	4770      	bx	lr
 8005470:	40023c16 	.word	0x40023c16

08005474 <FLASH_OB_GetWRP1>:
  *   
  * @param  None
  * @retval The FLASH Write Protection  Option Bytes value
  */
uint16_t FLASH_OB_GetWRP1(void)
{
 8005474:	b480      	push	{r7}
 8005476:	af00      	add	r7, sp, #0
  /* Return the FLASH write protection Register value */
  return (*(__IO uint16_t *)(OPTCR1_BYTE2_ADDRESS));
 8005478:	4b03      	ldr	r3, [pc, #12]	; (8005488 <FLASH_OB_GetWRP1+0x14>)
 800547a:	881b      	ldrh	r3, [r3, #0]
 800547c:	b29b      	uxth	r3, r3
}
 800547e:	4618      	mov	r0, r3
 8005480:	46bd      	mov	sp, r7
 8005482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005486:	4770      	bx	lr
 8005488:	40023c1a 	.word	0x40023c1a

0800548c <FLASH_OB_GetPCROP>:
  *   
  * @param  None
  * @retval The FLASH PC Read/Write Protection Option Bytes value
  */
uint16_t FLASH_OB_GetPCROP(void)
{
 800548c:	b480      	push	{r7}
 800548e:	af00      	add	r7, sp, #0
  /* Return the FLASH PC Read/write protection Register value */
  return (*(__IO uint16_t *)(OPTCR_BYTE2_ADDRESS));
 8005490:	4b03      	ldr	r3, [pc, #12]	; (80054a0 <FLASH_OB_GetPCROP+0x14>)
 8005492:	881b      	ldrh	r3, [r3, #0]
 8005494:	b29b      	uxth	r3, r3
}
 8005496:	4618      	mov	r0, r3
 8005498:	46bd      	mov	sp, r7
 800549a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549e:	4770      	bx	lr
 80054a0:	40023c16 	.word	0x40023c16

080054a4 <FLASH_OB_GetPCROP1>:
  *     
  * @param  None
  * @retval The FLASH PC Read/Write Protection Option Bytes value
  */
uint16_t FLASH_OB_GetPCROP1(void)
{
 80054a4:	b480      	push	{r7}
 80054a6:	af00      	add	r7, sp, #0
  /* Return the FLASH write protection Register value */
  return (*(__IO uint16_t *)(OPTCR1_BYTE2_ADDRESS));
 80054a8:	4b03      	ldr	r3, [pc, #12]	; (80054b8 <FLASH_OB_GetPCROP1+0x14>)
 80054aa:	881b      	ldrh	r3, [r3, #0]
 80054ac:	b29b      	uxth	r3, r3
}
 80054ae:	4618      	mov	r0, r3
 80054b0:	46bd      	mov	sp, r7
 80054b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b6:	4770      	bx	lr
 80054b8:	40023c1a 	.word	0x40023c1a

080054bc <FLASH_OB_GetRDP>:
  * @retval FLASH ReadOut Protection Status:
  *           - SET, when OB_RDP_Level_1 or OB_RDP_Level_2 is set
  *           - RESET, when OB_RDP_Level_0 is set
  */
FlagStatus FLASH_OB_GetRDP(void)
{
 80054bc:	b480      	push	{r7}
 80054be:	b083      	sub	sp, #12
 80054c0:	af00      	add	r7, sp, #0
  FlagStatus readstatus = RESET;
 80054c2:	2300      	movs	r3, #0
 80054c4:	71fb      	strb	r3, [r7, #7]

  if ((*(__IO uint8_t*)(OPTCR_BYTE1_ADDRESS) != (uint8_t)OB_RDP_Level_0))
 80054c6:	4b08      	ldr	r3, [pc, #32]	; (80054e8 <FLASH_OB_GetRDP+0x2c>)
 80054c8:	781b      	ldrb	r3, [r3, #0]
 80054ca:	b2db      	uxtb	r3, r3
 80054cc:	2baa      	cmp	r3, #170	; 0xaa
 80054ce:	d002      	beq.n	80054d6 <FLASH_OB_GetRDP+0x1a>
  {
    readstatus = SET;
 80054d0:	2301      	movs	r3, #1
 80054d2:	71fb      	strb	r3, [r7, #7]
 80054d4:	e001      	b.n	80054da <FLASH_OB_GetRDP+0x1e>
  }
  else
  {
    readstatus = RESET;
 80054d6:	2300      	movs	r3, #0
 80054d8:	71fb      	strb	r3, [r7, #7]
  }
  return readstatus;
 80054da:	79fb      	ldrb	r3, [r7, #7]
}
 80054dc:	4618      	mov	r0, r3
 80054de:	370c      	adds	r7, #12
 80054e0:	46bd      	mov	sp, r7
 80054e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e6:	4770      	bx	lr
 80054e8:	40023c15 	.word	0x40023c15

080054ec <FLASH_OB_GetBOR>:
  *           - OB_BOR_LEVEL2: Supply voltage ranges from 2.4 to 2.7 V
  *           - OB_BOR_LEVEL1: Supply voltage ranges from 2.1 to 2.4 V
  *           - OB_BOR_OFF   : Supply voltage ranges from 1.62 to 2.1 V  
  */
uint8_t FLASH_OB_GetBOR(void)
{
 80054ec:	b480      	push	{r7}
 80054ee:	af00      	add	r7, sp, #0
  /* Return the FLASH BOR level */
  return (uint8_t)(*(__IO uint8_t *)(OPTCR_BYTE0_ADDRESS) & (uint8_t)0x0C);
 80054f0:	4b05      	ldr	r3, [pc, #20]	; (8005508 <FLASH_OB_GetBOR+0x1c>)
 80054f2:	781b      	ldrb	r3, [r3, #0]
 80054f4:	b2db      	uxtb	r3, r3
 80054f6:	f003 030c 	and.w	r3, r3, #12
 80054fa:	b2db      	uxtb	r3, r3
}
 80054fc:	4618      	mov	r0, r3
 80054fe:	46bd      	mov	sp, r7
 8005500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005504:	4770      	bx	lr
 8005506:	bf00      	nop
 8005508:	40023c14 	.word	0x40023c14

0800550c <FLASH_ITConfig>:
  *            @arg FLASH_IT_ERR: FLASH Error Interrupt
  *            @arg FLASH_IT_EOP: FLASH end of operation Interrupt
  * @retval None 
  */
void FLASH_ITConfig(uint32_t FLASH_IT, FunctionalState NewState)
{
 800550c:	b480      	push	{r7}
 800550e:	b083      	sub	sp, #12
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
 8005514:	460b      	mov	r3, r1
 8005516:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_IT(FLASH_IT)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if(NewState != DISABLE)
 8005518:	78fb      	ldrb	r3, [r7, #3]
 800551a:	2b00      	cmp	r3, #0
 800551c:	d006      	beq.n	800552c <FLASH_ITConfig+0x20>
  {
    /* Enable the interrupt sources */
    FLASH->CR |= FLASH_IT;
 800551e:	4b0a      	ldr	r3, [pc, #40]	; (8005548 <FLASH_ITConfig+0x3c>)
 8005520:	691a      	ldr	r2, [r3, #16]
 8005522:	4909      	ldr	r1, [pc, #36]	; (8005548 <FLASH_ITConfig+0x3c>)
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	4313      	orrs	r3, r2
 8005528:	610b      	str	r3, [r1, #16]
  else
  {
    /* Disable the interrupt sources */
    FLASH->CR &= ~(uint32_t)FLASH_IT;
  }
}
 800552a:	e006      	b.n	800553a <FLASH_ITConfig+0x2e>
    FLASH->CR &= ~(uint32_t)FLASH_IT;
 800552c:	4b06      	ldr	r3, [pc, #24]	; (8005548 <FLASH_ITConfig+0x3c>)
 800552e:	691a      	ldr	r2, [r3, #16]
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	43db      	mvns	r3, r3
 8005534:	4904      	ldr	r1, [pc, #16]	; (8005548 <FLASH_ITConfig+0x3c>)
 8005536:	4013      	ands	r3, r2
 8005538:	610b      	str	r3, [r1, #16]
}
 800553a:	bf00      	nop
 800553c:	370c      	adds	r7, #12
 800553e:	46bd      	mov	sp, r7
 8005540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005544:	4770      	bx	lr
 8005546:	bf00      	nop
 8005548:	40023c00 	.word	0x40023c00

0800554c <FLASH_GetFlagStatus>:
  *            @arg FLASH_FLAG_RDERR: FLASH (PCROP) Read Protection error flag (STM32F42/43xxx and STM32F401xx devices) 
  *            @arg FLASH_FLAG_BSY: FLASH Busy flag
  * @retval The new state of FLASH_FLAG (SET or RESET).
  */
FlagStatus FLASH_GetFlagStatus(uint32_t FLASH_FLAG)
{
 800554c:	b480      	push	{r7}
 800554e:	b085      	sub	sp, #20
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 8005554:	2300      	movs	r3, #0
 8005556:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_FLASH_GET_FLAG(FLASH_FLAG));

  if((FLASH->SR & FLASH_FLAG) != (uint32_t)RESET)
 8005558:	4b08      	ldr	r3, [pc, #32]	; (800557c <FLASH_GetFlagStatus+0x30>)
 800555a:	68da      	ldr	r2, [r3, #12]
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	4013      	ands	r3, r2
 8005560:	2b00      	cmp	r3, #0
 8005562:	d002      	beq.n	800556a <FLASH_GetFlagStatus+0x1e>
  {
    bitstatus = SET;
 8005564:	2301      	movs	r3, #1
 8005566:	73fb      	strb	r3, [r7, #15]
 8005568:	e001      	b.n	800556e <FLASH_GetFlagStatus+0x22>
  }
  else
  {
    bitstatus = RESET;
 800556a:	2300      	movs	r3, #0
 800556c:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the new state of FLASH_FLAG (SET or RESET) */
  return bitstatus; 
 800556e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005570:	4618      	mov	r0, r3
 8005572:	3714      	adds	r7, #20
 8005574:	46bd      	mov	sp, r7
 8005576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557a:	4770      	bx	lr
 800557c:	40023c00 	.word	0x40023c00

08005580 <FLASH_ClearFlag>:
  *            @arg FLASH_FLAG_PGSERR: FLASH Programming Sequence error flag
  *            @arg FLASH_FLAG_RDERR: FLASH Read Protection error flag (STM32F42/43xxx and STM32F401xx devices)   
  * @retval None
  */
void FLASH_ClearFlag(uint32_t FLASH_FLAG)
{
 8005580:	b480      	push	{r7}
 8005582:	b083      	sub	sp, #12
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_CLEAR_FLAG(FLASH_FLAG));
  
  /* Clear the flags */
  FLASH->SR = FLASH_FLAG;
 8005588:	4a04      	ldr	r2, [pc, #16]	; (800559c <FLASH_ClearFlag+0x1c>)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	60d3      	str	r3, [r2, #12]
}
 800558e:	bf00      	nop
 8005590:	370c      	adds	r7, #12
 8005592:	46bd      	mov	sp, r7
 8005594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005598:	4770      	bx	lr
 800559a:	bf00      	nop
 800559c:	40023c00 	.word	0x40023c00

080055a0 <FLASH_GetStatus>:
  * @param  None
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
  *                       FLASH_ERROR_WRP, FLASH_ERROR_RD, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
  */
FLASH_Status FLASH_GetStatus(void)
{
 80055a0:	b480      	push	{r7}
 80055a2:	b083      	sub	sp, #12
 80055a4:	af00      	add	r7, sp, #0
  FLASH_Status flashstatus = FLASH_COMPLETE;
 80055a6:	2309      	movs	r3, #9
 80055a8:	71fb      	strb	r3, [r7, #7]
  
  if((FLASH->SR & FLASH_FLAG_BSY) == FLASH_FLAG_BSY) 
 80055aa:	4b1b      	ldr	r3, [pc, #108]	; (8005618 <FLASH_GetStatus+0x78>)
 80055ac:	68db      	ldr	r3, [r3, #12]
 80055ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80055b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055b6:	d102      	bne.n	80055be <FLASH_GetStatus+0x1e>
  {
    flashstatus = FLASH_BUSY;
 80055b8:	2301      	movs	r3, #1
 80055ba:	71fb      	strb	r3, [r7, #7]
 80055bc:	e025      	b.n	800560a <FLASH_GetStatus+0x6a>
  }
  else 
  {  
    if((FLASH->SR & FLASH_FLAG_WRPERR) != (uint32_t)0x00)
 80055be:	4b16      	ldr	r3, [pc, #88]	; (8005618 <FLASH_GetStatus+0x78>)
 80055c0:	68db      	ldr	r3, [r3, #12]
 80055c2:	f003 0310 	and.w	r3, r3, #16
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d002      	beq.n	80055d0 <FLASH_GetStatus+0x30>
    { 
      flashstatus = FLASH_ERROR_WRP;
 80055ca:	2306      	movs	r3, #6
 80055cc:	71fb      	strb	r3, [r7, #7]
 80055ce:	e01c      	b.n	800560a <FLASH_GetStatus+0x6a>
    }
    else
    {
      if((FLASH->SR & FLASH_FLAG_RDERR) != (uint32_t)0x00)
 80055d0:	4b11      	ldr	r3, [pc, #68]	; (8005618 <FLASH_GetStatus+0x78>)
 80055d2:	68db      	ldr	r3, [r3, #12]
 80055d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d002      	beq.n	80055e2 <FLASH_GetStatus+0x42>
      { 
        flashstatus = FLASH_ERROR_RD;
 80055dc:	2302      	movs	r3, #2
 80055de:	71fb      	strb	r3, [r7, #7]
 80055e0:	e013      	b.n	800560a <FLASH_GetStatus+0x6a>
      } 
      else 
      {
        if((FLASH->SR & (uint32_t)0xEF) != (uint32_t)0x00)
 80055e2:	4b0d      	ldr	r3, [pc, #52]	; (8005618 <FLASH_GetStatus+0x78>)
 80055e4:	68db      	ldr	r3, [r3, #12]
 80055e6:	f003 03ef 	and.w	r3, r3, #239	; 0xef
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d002      	beq.n	80055f4 <FLASH_GetStatus+0x54>
        {
          flashstatus = FLASH_ERROR_PROGRAM; 
 80055ee:	2307      	movs	r3, #7
 80055f0:	71fb      	strb	r3, [r7, #7]
 80055f2:	e00a      	b.n	800560a <FLASH_GetStatus+0x6a>
        }
        else
        {
          if((FLASH->SR & FLASH_FLAG_OPERR) != (uint32_t)0x00)
 80055f4:	4b08      	ldr	r3, [pc, #32]	; (8005618 <FLASH_GetStatus+0x78>)
 80055f6:	68db      	ldr	r3, [r3, #12]
 80055f8:	f003 0302 	and.w	r3, r3, #2
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d002      	beq.n	8005606 <FLASH_GetStatus+0x66>
          {
            flashstatus = FLASH_ERROR_OPERATION;
 8005600:	2308      	movs	r3, #8
 8005602:	71fb      	strb	r3, [r7, #7]
 8005604:	e001      	b.n	800560a <FLASH_GetStatus+0x6a>
          }
          else
          {
            flashstatus = FLASH_COMPLETE;
 8005606:	2309      	movs	r3, #9
 8005608:	71fb      	strb	r3, [r7, #7]
        }
      }
    }
  }
  /* Return the FLASH Status */
  return flashstatus;
 800560a:	79fb      	ldrb	r3, [r7, #7]
}
 800560c:	4618      	mov	r0, r3
 800560e:	370c      	adds	r7, #12
 8005610:	46bd      	mov	sp, r7
 8005612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005616:	4770      	bx	lr
 8005618:	40023c00 	.word	0x40023c00

0800561c <FLASH_WaitForLastOperation>:
  * @param  None
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
  *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
  */
FLASH_Status FLASH_WaitForLastOperation(void)
{ 
 800561c:	b580      	push	{r7, lr}
 800561e:	b082      	sub	sp, #8
 8005620:	af00      	add	r7, sp, #0
  __IO FLASH_Status status = FLASH_COMPLETE;
 8005622:	2309      	movs	r3, #9
 8005624:	71fb      	strb	r3, [r7, #7]
   
  /* Check for the FLASH Status */
  status = FLASH_GetStatus();
 8005626:	f7ff ffbb 	bl	80055a0 <FLASH_GetStatus>
 800562a:	4603      	mov	r3, r0
 800562c:	71fb      	strb	r3, [r7, #7]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  while(status == FLASH_BUSY)
 800562e:	e003      	b.n	8005638 <FLASH_WaitForLastOperation+0x1c>
  {
    status = FLASH_GetStatus();
 8005630:	f7ff ffb6 	bl	80055a0 <FLASH_GetStatus>
 8005634:	4603      	mov	r3, r0
 8005636:	71fb      	strb	r3, [r7, #7]
  while(status == FLASH_BUSY)
 8005638:	79fb      	ldrb	r3, [r7, #7]
 800563a:	b2db      	uxtb	r3, r3
 800563c:	2b01      	cmp	r3, #1
 800563e:	d0f7      	beq.n	8005630 <FLASH_WaitForLastOperation+0x14>
  }
  /* Return the operation status */
  return status;
 8005640:	79fb      	ldrb	r3, [r7, #7]
 8005642:	b2db      	uxtb	r3, r3
}
 8005644:	4618      	mov	r0, r3
 8005646:	3708      	adds	r7, #8
 8005648:	46bd      	mov	sp, r7
 800564a:	bd80      	pop	{r7, pc}

0800564c <FMC_NORSRAMDeInit>:
  *            @arg FMC_Bank1_NORSRAM3: FMC Bank1 NOR/SRAM3 
  *            @arg FMC_Bank1_NORSRAM4: FMC Bank1 NOR/SRAM4 
  * @retval None
  */
void FMC_NORSRAMDeInit(uint32_t FMC_Bank)
{
 800564c:	b480      	push	{r7}
 800564e:	b083      	sub	sp, #12
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_FMC_NORSRAM_BANK(FMC_Bank));
  
  /* FMC_Bank1_NORSRAM1 */
  if(FMC_Bank == FMC_Bank1_NORSRAM1)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2b00      	cmp	r3, #0
 8005658:	d107      	bne.n	800566a <FMC_NORSRAMDeInit+0x1e>
  {
    FMC_Bank1->BTCR[FMC_Bank] = 0x000030DB;    
 800565a:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	f243 01db 	movw	r1, #12507	; 0x30db
 8005664:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8005668:	e006      	b.n	8005678 <FMC_NORSRAMDeInit+0x2c>
  }
  /* FMC_Bank1_NORSRAM2,  FMC_Bank1_NORSRAM3 or FMC_Bank1_NORSRAM4 */
  else
  {   
    FMC_Bank1->BTCR[FMC_Bank] = 0x000030D2; 
 800566a:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	f243 01d2 	movw	r1, #12498	; 0x30d2
 8005674:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  }
  FMC_Bank1->BTCR[FMC_Bank + 1] = 0x0FFFFFFF;
 8005678:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	3301      	adds	r3, #1
 8005680:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8005684:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  FMC_Bank1E->BWTR[FMC_Bank] = 0x0FFFFFFF;  
 8005688:	4a05      	ldr	r2, [pc, #20]	; (80056a0 <FMC_NORSRAMDeInit+0x54>)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8005690:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8005694:	bf00      	nop
 8005696:	370c      	adds	r7, #12
 8005698:	46bd      	mov	sp, r7
 800569a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569e:	4770      	bx	lr
 80056a0:	a0000104 	.word	0xa0000104

080056a4 <FMC_NORSRAMInit>:
  *         that contains the configuration information for the FMC NOR/SRAM 
  *         specified Banks.                       
  * @retval None
  */
void FMC_NORSRAMInit(FMC_NORSRAMInitTypeDef* FMC_NORSRAMInitStruct)
{
 80056a4:	b480      	push	{r7}
 80056a6:	b085      	sub	sp, #20
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpr = 0;
 80056ac:	2300      	movs	r3, #0
 80056ae:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FMC_DATA_LATENCY(FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_DataLatency));
  assert_param(IS_FMC_ACCESS_MODE(FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AccessMode)); 
  
  /* NOR/SRAM Bank control register configuration */ 
  FMC_Bank1->BTCR[FMC_NORSRAMInitStruct->FMC_Bank] =   
            (uint32_t)FMC_NORSRAMInitStruct->FMC_DataAddressMux |
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	685a      	ldr	r2, [r3, #4]
            FMC_NORSRAMInitStruct->FMC_MemoryType |
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	689b      	ldr	r3, [r3, #8]
            (uint32_t)FMC_NORSRAMInitStruct->FMC_DataAddressMux |
 80056b8:	431a      	orrs	r2, r3
            FMC_NORSRAMInitStruct->FMC_MemoryDataWidth |
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	68db      	ldr	r3, [r3, #12]
            FMC_NORSRAMInitStruct->FMC_MemoryType |
 80056be:	431a      	orrs	r2, r3
            FMC_NORSRAMInitStruct->FMC_BurstAccessMode |
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	691b      	ldr	r3, [r3, #16]
            FMC_NORSRAMInitStruct->FMC_MemoryDataWidth |
 80056c4:	431a      	orrs	r2, r3
            FMC_NORSRAMInitStruct->FMC_WaitSignalPolarity |
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	695b      	ldr	r3, [r3, #20]
            FMC_NORSRAMInitStruct->FMC_BurstAccessMode |
 80056ca:	431a      	orrs	r2, r3
            FMC_NORSRAMInitStruct->FMC_WrapMode |
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	699b      	ldr	r3, [r3, #24]
            FMC_NORSRAMInitStruct->FMC_WaitSignalPolarity |
 80056d0:	431a      	orrs	r2, r3
            FMC_NORSRAMInitStruct->FMC_WaitSignalActive |
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	69db      	ldr	r3, [r3, #28]
            FMC_NORSRAMInitStruct->FMC_WrapMode |
 80056d6:	431a      	orrs	r2, r3
            FMC_NORSRAMInitStruct->FMC_WriteOperation |
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	6a1b      	ldr	r3, [r3, #32]
            FMC_NORSRAMInitStruct->FMC_WaitSignalActive |
 80056dc:	431a      	orrs	r2, r3
            FMC_NORSRAMInitStruct->FMC_WaitSignal |
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
            FMC_NORSRAMInitStruct->FMC_WriteOperation |
 80056e2:	431a      	orrs	r2, r3
            FMC_NORSRAMInitStruct->FMC_ExtendedMode |
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
            FMC_NORSRAMInitStruct->FMC_WaitSignal |
 80056e8:	431a      	orrs	r2, r3
            FMC_NORSRAMInitStruct->FMC_AsynchronousWait |
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            FMC_NORSRAMInitStruct->FMC_ExtendedMode |
 80056ee:	431a      	orrs	r2, r3
            FMC_NORSRAMInitStruct->FMC_WriteBurst |
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            FMC_NORSRAMInitStruct->FMC_AsynchronousWait |
 80056f4:	ea42 0103 	orr.w	r1, r2, r3
            FMC_NORSRAMInitStruct->FMC_ContinousClock;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
  FMC_Bank1->BTCR[FMC_NORSRAMInitStruct->FMC_Bank] =   
 80056fc:	f04f 4020 	mov.w	r0, #2684354560	; 0xa0000000
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
            FMC_NORSRAMInitStruct->FMC_WriteBurst |
 8005704:	430a      	orrs	r2, r1
  FMC_Bank1->BTCR[FMC_NORSRAMInitStruct->FMC_Bank] =   
 8005706:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

            
  if(FMC_NORSRAMInitStruct->FMC_MemoryType == FMC_MemoryType_NOR)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	689b      	ldr	r3, [r3, #8]
 800570e:	2b08      	cmp	r3, #8
 8005710:	d10d      	bne.n	800572e <FMC_NORSRAMInit+0x8a>
  {
    FMC_Bank1->BTCR[FMC_NORSRAMInitStruct->FMC_Bank] |= (uint32_t)BCR_FACCEN_SET;
 8005712:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800571e:	f04f 4120 	mov.w	r1, #2684354560	; 0xa0000000
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800572a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }

  /* Configure Continuous clock feature when bank2..4 is used */
  if((FMC_NORSRAMInitStruct->FMC_ContinousClock == FMC_CClock_SyncAsync) && (FMC_NORSRAMInitStruct->FMC_Bank != FMC_Bank1_NORSRAM1))
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005732:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005736:	d124      	bne.n	8005782 <FMC_NORSRAMInit+0xde>
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	2b00      	cmp	r3, #0
 800573e:	d020      	beq.n	8005782 <FMC_NORSRAMInit+0xde>
  {
    tmpr = (uint32_t)((FMC_Bank1->BTCR[FMC_Bank1_NORSRAM1+1]) & ~(((uint32_t)0x0F) << 20));    
 8005740:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 8005744:	685b      	ldr	r3, [r3, #4]
 8005746:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800574a:	60fb      	str	r3, [r7, #12]
    
    FMC_Bank1->BTCR[FMC_Bank1_NORSRAM1]  |= FMC_NORSRAMInitStruct->FMC_ContinousClock;
 800574c:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 8005750:	681a      	ldr	r2, [r3, #0]
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005756:	f04f 4120 	mov.w	r1, #2684354560	; 0xa0000000
 800575a:	4313      	orrs	r3, r2
 800575c:	600b      	str	r3, [r1, #0]
    FMC_Bank1->BTCR[FMC_Bank1_NORSRAM1]  |= FMC_BurstAccessMode_Enable;
 800575e:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8005768:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800576c:	6013      	str	r3, [r2, #0]
    FMC_Bank1->BTCR[FMC_Bank1_NORSRAM1+1] = (uint32_t)(tmpr | (((FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_CLKDivision)-1) << 20));
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005772:	691b      	ldr	r3, [r3, #16]
 8005774:	3b01      	subs	r3, #1
 8005776:	051a      	lsls	r2, r3, #20
 8005778:	f04f 4120 	mov.w	r1, #2684354560	; 0xa0000000
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	4313      	orrs	r3, r2
 8005780:	604b      	str	r3, [r1, #4]
  }
  
  /* NOR/SRAM Bank timing register configuration */
  FMC_Bank1->BTCR[FMC_NORSRAMInitStruct->FMC_Bank+1] =   
            (uint32_t)FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AddressSetupTime |
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005786:	681a      	ldr	r2, [r3, #0]
            (FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AddressHoldTime << 4) |
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800578c:	685b      	ldr	r3, [r3, #4]
 800578e:	011b      	lsls	r3, r3, #4
            (uint32_t)FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AddressSetupTime |
 8005790:	431a      	orrs	r2, r3
            (FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_DataSetupTime << 8) |
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005796:	689b      	ldr	r3, [r3, #8]
 8005798:	021b      	lsls	r3, r3, #8
            (FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AddressHoldTime << 4) |
 800579a:	431a      	orrs	r2, r3
            (FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_BusTurnAroundDuration << 16) |
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057a0:	68db      	ldr	r3, [r3, #12]
 80057a2:	041b      	lsls	r3, r3, #16
            (FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_DataSetupTime << 8) |
 80057a4:	431a      	orrs	r2, r3
            ((FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_CLKDivision) << 20) |
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057aa:	691b      	ldr	r3, [r3, #16]
 80057ac:	051b      	lsls	r3, r3, #20
            (FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_BusTurnAroundDuration << 16) |
 80057ae:	431a      	orrs	r2, r3
            ((FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_DataLatency) << 24) |
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057b4:	695b      	ldr	r3, [r3, #20]
 80057b6:	061b      	lsls	r3, r3, #24
            ((FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_CLKDivision) << 20) |
 80057b8:	ea42 0103 	orr.w	r1, r2, r3
             FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AccessMode;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057c0:	699a      	ldr	r2, [r3, #24]
  FMC_Bank1->BTCR[FMC_NORSRAMInitStruct->FMC_Bank+1] =   
 80057c2:	f04f 4020 	mov.w	r0, #2684354560	; 0xa0000000
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	3301      	adds	r3, #1
            ((FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_DataLatency) << 24) |
 80057cc:	430a      	orrs	r2, r1
  FMC_Bank1->BTCR[FMC_NORSRAMInitStruct->FMC_Bank+1] =   
 80057ce:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
     
  /* NOR/SRAM Bank timing register for write configuration, if extended mode is used */
  if(FMC_NORSRAMInitStruct->FMC_ExtendedMode == FMC_ExtendedMode_Enable)
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057d6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80057da:	d121      	bne.n	8005820 <FMC_NORSRAMInit+0x17c>
    assert_param(IS_FMC_CLK_DIV(FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_CLKDivision));
    assert_param(IS_FMC_DATA_LATENCY(FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_DataLatency));
    assert_param(IS_FMC_ACCESS_MODE(FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_AccessMode));
    
    FMC_Bank1E->BWTR[FMC_NORSRAMInitStruct->FMC_Bank] =   
               (uint32_t)FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_AddressSetupTime |
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057e0:	681a      	ldr	r2, [r3, #0]
               (FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_AddressHoldTime << 4 )|
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057e6:	685b      	ldr	r3, [r3, #4]
 80057e8:	011b      	lsls	r3, r3, #4
               (uint32_t)FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_AddressSetupTime |
 80057ea:	431a      	orrs	r2, r3
               (FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_DataSetupTime << 8) |
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057f0:	689b      	ldr	r3, [r3, #8]
 80057f2:	021b      	lsls	r3, r3, #8
               (FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_AddressHoldTime << 4 )|
 80057f4:	431a      	orrs	r2, r3
               ((FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_CLKDivision) << 20) |
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057fa:	691b      	ldr	r3, [r3, #16]
 80057fc:	051b      	lsls	r3, r3, #20
               (FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_DataSetupTime << 8) |
 80057fe:	431a      	orrs	r2, r3
               ((FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_DataLatency) << 24) |
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005804:	695b      	ldr	r3, [r3, #20]
 8005806:	061b      	lsls	r3, r3, #24
               ((FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_CLKDivision) << 20) |
 8005808:	ea42 0103 	orr.w	r1, r2, r3
               FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_AccessMode;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005810:	699a      	ldr	r2, [r3, #24]
    FMC_Bank1E->BWTR[FMC_NORSRAMInitStruct->FMC_Bank] =   
 8005812:	480a      	ldr	r0, [pc, #40]	; (800583c <FMC_NORSRAMInit+0x198>)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
               ((FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_DataLatency) << 24) |
 8005818:	430a      	orrs	r2, r1
    FMC_Bank1E->BWTR[FMC_NORSRAMInitStruct->FMC_Bank] =   
 800581a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
  else
  {
    FMC_Bank1E->BWTR[FMC_NORSRAMInitStruct->FMC_Bank] = 0x0FFFFFFF;
  }
  
}
 800581e:	e006      	b.n	800582e <FMC_NORSRAMInit+0x18a>
    FMC_Bank1E->BWTR[FMC_NORSRAMInitStruct->FMC_Bank] = 0x0FFFFFFF;
 8005820:	4a06      	ldr	r2, [pc, #24]	; (800583c <FMC_NORSRAMInit+0x198>)
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800582a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 800582e:	bf00      	nop
 8005830:	3714      	adds	r7, #20
 8005832:	46bd      	mov	sp, r7
 8005834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005838:	4770      	bx	lr
 800583a:	bf00      	nop
 800583c:	a0000104 	.word	0xa0000104

08005840 <FMC_NORSRAMStructInit>:
  * @param  FMC_NORSRAMInitStruct: pointer to a FMC_NORSRAMInitTypeDef structure 
  *         which will be initialized.
  * @retval None
  */
void FMC_NORSRAMStructInit(FMC_NORSRAMInitTypeDef* FMC_NORSRAMInitStruct)
{  
 8005840:	b480      	push	{r7}
 8005842:	b083      	sub	sp, #12
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
  /* Reset NOR/SRAM Init structure parameters values */
  FMC_NORSRAMInitStruct->FMC_Bank = FMC_Bank1_NORSRAM1;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2200      	movs	r2, #0
 800584c:	601a      	str	r2, [r3, #0]
  FMC_NORSRAMInitStruct->FMC_DataAddressMux = FMC_DataAddressMux_Enable;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	2202      	movs	r2, #2
 8005852:	605a      	str	r2, [r3, #4]
  FMC_NORSRAMInitStruct->FMC_MemoryType = FMC_MemoryType_SRAM;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2200      	movs	r2, #0
 8005858:	609a      	str	r2, [r3, #8]
  FMC_NORSRAMInitStruct->FMC_MemoryDataWidth = FMC_NORSRAM_MemoryDataWidth_16b;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	2210      	movs	r2, #16
 800585e:	60da      	str	r2, [r3, #12]
  FMC_NORSRAMInitStruct->FMC_BurstAccessMode = FMC_BurstAccessMode_Disable;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2200      	movs	r2, #0
 8005864:	611a      	str	r2, [r3, #16]
  FMC_NORSRAMInitStruct->FMC_AsynchronousWait = FMC_AsynchronousWait_Disable;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	2200      	movs	r2, #0
 800586a:	62da      	str	r2, [r3, #44]	; 0x2c
  FMC_NORSRAMInitStruct->FMC_WaitSignalPolarity = FMC_WaitSignalPolarity_Low;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2200      	movs	r2, #0
 8005870:	615a      	str	r2, [r3, #20]
  FMC_NORSRAMInitStruct->FMC_WrapMode = FMC_WrapMode_Disable;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	2200      	movs	r2, #0
 8005876:	619a      	str	r2, [r3, #24]
  FMC_NORSRAMInitStruct->FMC_WaitSignalActive = FMC_WaitSignalActive_BeforeWaitState;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2200      	movs	r2, #0
 800587c:	61da      	str	r2, [r3, #28]
  FMC_NORSRAMInitStruct->FMC_WriteOperation = FMC_WriteOperation_Enable;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005884:	621a      	str	r2, [r3, #32]
  FMC_NORSRAMInitStruct->FMC_WaitSignal = FMC_WaitSignal_Enable;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800588c:	625a      	str	r2, [r3, #36]	; 0x24
  FMC_NORSRAMInitStruct->FMC_ExtendedMode = FMC_ExtendedMode_Disable;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	2200      	movs	r2, #0
 8005892:	629a      	str	r2, [r3, #40]	; 0x28
  FMC_NORSRAMInitStruct->FMC_WriteBurst = FMC_WriteBurst_Disable;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2200      	movs	r2, #0
 8005898:	631a      	str	r2, [r3, #48]	; 0x30
  FMC_NORSRAMInitStruct->FMC_ContinousClock = FMC_CClock_SyncOnly;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	2200      	movs	r2, #0
 800589e:	635a      	str	r2, [r3, #52]	; 0x34
  
  FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AddressSetupTime = 15;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058a4:	220f      	movs	r2, #15
 80058a6:	601a      	str	r2, [r3, #0]
  FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AddressHoldTime = 15;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058ac:	220f      	movs	r2, #15
 80058ae:	605a      	str	r2, [r3, #4]
  FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_DataSetupTime = 255;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058b4:	22ff      	movs	r2, #255	; 0xff
 80058b6:	609a      	str	r2, [r3, #8]
  FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_BusTurnAroundDuration = 15;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058bc:	220f      	movs	r2, #15
 80058be:	60da      	str	r2, [r3, #12]
  FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_CLKDivision = 15;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058c4:	220f      	movs	r2, #15
 80058c6:	611a      	str	r2, [r3, #16]
  FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_DataLatency = 15;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058cc:	220f      	movs	r2, #15
 80058ce:	615a      	str	r2, [r3, #20]
  FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AccessMode = FMC_AccessMode_A; 
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058d4:	2200      	movs	r2, #0
 80058d6:	619a      	str	r2, [r3, #24]
  FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_AddressSetupTime = 15;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058dc:	220f      	movs	r2, #15
 80058de:	601a      	str	r2, [r3, #0]
  FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_AddressHoldTime = 15;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058e4:	220f      	movs	r2, #15
 80058e6:	605a      	str	r2, [r3, #4]
  FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_DataSetupTime = 255;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058ec:	22ff      	movs	r2, #255	; 0xff
 80058ee:	609a      	str	r2, [r3, #8]
  FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_BusTurnAroundDuration = 15;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058f4:	220f      	movs	r2, #15
 80058f6:	60da      	str	r2, [r3, #12]
  FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_CLKDivision = 15;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058fc:	220f      	movs	r2, #15
 80058fe:	611a      	str	r2, [r3, #16]
  FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_DataLatency = 15;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005904:	220f      	movs	r2, #15
 8005906:	615a      	str	r2, [r3, #20]
  FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_AccessMode = FMC_AccessMode_A;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800590c:	2200      	movs	r2, #0
 800590e:	619a      	str	r2, [r3, #24]
}
 8005910:	bf00      	nop
 8005912:	370c      	adds	r7, #12
 8005914:	46bd      	mov	sp, r7
 8005916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591a:	4770      	bx	lr

0800591c <FMC_NORSRAMCmd>:
  *            @arg FMC_Bank1_NORSRAM4: FMC Bank1 NOR/SRAM4 
  * @param  NewState: new state of the FMC_Bank. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void FMC_NORSRAMCmd(uint32_t FMC_Bank, FunctionalState NewState)
{
 800591c:	b480      	push	{r7}
 800591e:	b083      	sub	sp, #12
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
 8005924:	460b      	mov	r3, r1
 8005926:	70fb      	strb	r3, [r7, #3]
  assert_param(IS_FMC_NORSRAM_BANK(FMC_Bank));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8005928:	78fb      	ldrb	r3, [r7, #3]
 800592a:	2b00      	cmp	r3, #0
 800592c:	d00c      	beq.n	8005948 <FMC_NORSRAMCmd+0x2c>
  {
    /* Enable the selected NOR/SRAM Bank by setting the PBKEN bit in the BCRx register */
    FMC_Bank1->BTCR[FMC_Bank] |= BCR_MBKEN_SET;
 800592e:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005938:	f04f 4120 	mov.w	r1, #2684354560	; 0xa0000000
 800593c:	f043 0201 	orr.w	r2, r3, #1
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  else
  {
    /* Disable the selected NOR/SRAM Bank by clearing the PBKEN bit in the BCRx register */
    FMC_Bank1->BTCR[FMC_Bank] &= BCR_MBKEN_RESET;
  }
}
 8005946:	e00b      	b.n	8005960 <FMC_NORSRAMCmd+0x44>
    FMC_Bank1->BTCR[FMC_Bank] &= BCR_MBKEN_RESET;
 8005948:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005952:	f04f 4120 	mov.w	r1, #2684354560	; 0xa0000000
 8005956:	4b05      	ldr	r3, [pc, #20]	; (800596c <FMC_NORSRAMCmd+0x50>)
 8005958:	4013      	ands	r3, r2
 800595a:	687a      	ldr	r2, [r7, #4]
 800595c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
}
 8005960:	bf00      	nop
 8005962:	370c      	adds	r7, #12
 8005964:	46bd      	mov	sp, r7
 8005966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596a:	4770      	bx	lr
 800596c:	000ffffe 	.word	0x000ffffe

08005970 <FMC_NANDDeInit>:
  *            @arg FMC_Bank2_NAND: FMC Bank2 NAND 
  *            @arg FMC_Bank3_NAND: FMC Bank3 NAND 
  * @retval None
  */
void FMC_NANDDeInit(uint32_t FMC_Bank)
{
 8005970:	b480      	push	{r7}
 8005972:	b083      	sub	sp, #12
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_FMC_NAND_BANK(FMC_Bank));
  
  if(FMC_Bank == FMC_Bank2_NAND)
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2b10      	cmp	r3, #16
 800597c:	d10e      	bne.n	800599c <FMC_NANDDeInit+0x2c>
  {
    /* Set the FMC_Bank2 registers to their reset values */
    FMC_Bank2->PCR2 = 0x00000018;
 800597e:	4b11      	ldr	r3, [pc, #68]	; (80059c4 <FMC_NANDDeInit+0x54>)
 8005980:	2218      	movs	r2, #24
 8005982:	601a      	str	r2, [r3, #0]
    FMC_Bank2->SR2 = 0x00000040;
 8005984:	4b0f      	ldr	r3, [pc, #60]	; (80059c4 <FMC_NANDDeInit+0x54>)
 8005986:	2240      	movs	r2, #64	; 0x40
 8005988:	605a      	str	r2, [r3, #4]
    FMC_Bank2->PMEM2 = 0xFCFCFCFC;
 800598a:	4b0e      	ldr	r3, [pc, #56]	; (80059c4 <FMC_NANDDeInit+0x54>)
 800598c:	f04f 32fc 	mov.w	r2, #4244438268	; 0xfcfcfcfc
 8005990:	609a      	str	r2, [r3, #8]
    FMC_Bank2->PATT2 = 0xFCFCFCFC;  
 8005992:	4b0c      	ldr	r3, [pc, #48]	; (80059c4 <FMC_NANDDeInit+0x54>)
 8005994:	f04f 32fc 	mov.w	r2, #4244438268	; 0xfcfcfcfc
 8005998:	60da      	str	r2, [r3, #12]
    FMC_Bank3->PCR3 = 0x00000018;
    FMC_Bank3->SR3 = 0x00000040;
    FMC_Bank3->PMEM3 = 0xFCFCFCFC;
    FMC_Bank3->PATT3 = 0xFCFCFCFC; 
  }  
}
 800599a:	e00d      	b.n	80059b8 <FMC_NANDDeInit+0x48>
    FMC_Bank3->PCR3 = 0x00000018;
 800599c:	4b0a      	ldr	r3, [pc, #40]	; (80059c8 <FMC_NANDDeInit+0x58>)
 800599e:	2218      	movs	r2, #24
 80059a0:	601a      	str	r2, [r3, #0]
    FMC_Bank3->SR3 = 0x00000040;
 80059a2:	4b09      	ldr	r3, [pc, #36]	; (80059c8 <FMC_NANDDeInit+0x58>)
 80059a4:	2240      	movs	r2, #64	; 0x40
 80059a6:	605a      	str	r2, [r3, #4]
    FMC_Bank3->PMEM3 = 0xFCFCFCFC;
 80059a8:	4b07      	ldr	r3, [pc, #28]	; (80059c8 <FMC_NANDDeInit+0x58>)
 80059aa:	f04f 32fc 	mov.w	r2, #4244438268	; 0xfcfcfcfc
 80059ae:	609a      	str	r2, [r3, #8]
    FMC_Bank3->PATT3 = 0xFCFCFCFC; 
 80059b0:	4b05      	ldr	r3, [pc, #20]	; (80059c8 <FMC_NANDDeInit+0x58>)
 80059b2:	f04f 32fc 	mov.w	r2, #4244438268	; 0xfcfcfcfc
 80059b6:	60da      	str	r2, [r3, #12]
}
 80059b8:	bf00      	nop
 80059ba:	370c      	adds	r7, #12
 80059bc:	46bd      	mov	sp, r7
 80059be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c2:	4770      	bx	lr
 80059c4:	a0000060 	.word	0xa0000060
 80059c8:	a0000080 	.word	0xa0000080

080059cc <FMC_NANDInit>:
  * @param  FMC_NANDInitStruct : pointer to a FMC_NANDInitTypeDef structure that
  *         contains the configuration information for the FMC NAND specified Banks.                       
  * @retval None
  */
void FMC_NANDInit(FMC_NANDInitTypeDef* FMC_NANDInitStruct)
{
 80059cc:	b480      	push	{r7}
 80059ce:	b087      	sub	sp, #28
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
  uint32_t tmppcr = 0x00000000, tmppmem = 0x00000000, tmppatt = 0x00000000; 
 80059d4:	2300      	movs	r3, #0
 80059d6:	617b      	str	r3, [r7, #20]
 80059d8:	2300      	movs	r3, #0
 80059da:	613b      	str	r3, [r7, #16]
 80059dc:	2300      	movs	r3, #0
 80059de:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FMC_WAIT_TIME(FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_WaitSetupTime));
  assert_param(IS_FMC_HOLD_TIME(FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HoldSetupTime));
  assert_param(IS_FMC_HIZ_TIME(FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HiZSetupTime));
  
  /* Set the tmppcr value according to FMC_NANDInitStruct parameters */
  tmppcr = (uint32_t)FMC_NANDInitStruct->FMC_Waitfeature |
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	685a      	ldr	r2, [r3, #4]
            PCR_MEMORYTYPE_NAND |
            FMC_NANDInitStruct->FMC_MemoryDataWidth |
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	689b      	ldr	r3, [r3, #8]
            PCR_MEMORYTYPE_NAND |
 80059e8:	431a      	orrs	r2, r3
            FMC_NANDInitStruct->FMC_ECC |
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	68db      	ldr	r3, [r3, #12]
            FMC_NANDInitStruct->FMC_MemoryDataWidth |
 80059ee:	431a      	orrs	r2, r3
            FMC_NANDInitStruct->FMC_ECCPageSize |
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	691b      	ldr	r3, [r3, #16]
            FMC_NANDInitStruct->FMC_ECC |
 80059f4:	431a      	orrs	r2, r3
            (FMC_NANDInitStruct->FMC_TCLRSetupTime << 9 )|
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	695b      	ldr	r3, [r3, #20]
 80059fa:	025b      	lsls	r3, r3, #9
            FMC_NANDInitStruct->FMC_ECCPageSize |
 80059fc:	431a      	orrs	r2, r3
            (FMC_NANDInitStruct->FMC_TARSetupTime << 13);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	699b      	ldr	r3, [r3, #24]
 8005a02:	035b      	lsls	r3, r3, #13
            (FMC_NANDInitStruct->FMC_TCLRSetupTime << 9 )|
 8005a04:	4313      	orrs	r3, r2
  tmppcr = (uint32_t)FMC_NANDInitStruct->FMC_Waitfeature |
 8005a06:	f043 0308 	orr.w	r3, r3, #8
 8005a0a:	617b      	str	r3, [r7, #20]
            
  /* Set tmppmem value according to FMC_CommonSpaceTimingStructure parameters */
  tmppmem = (uint32_t)FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_SetupTime |
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	69db      	ldr	r3, [r3, #28]
 8005a10:	681a      	ldr	r2, [r3, #0]
            (FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_WaitSetupTime << 8) |
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	69db      	ldr	r3, [r3, #28]
 8005a16:	685b      	ldr	r3, [r3, #4]
 8005a18:	021b      	lsls	r3, r3, #8
  tmppmem = (uint32_t)FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_SetupTime |
 8005a1a:	431a      	orrs	r2, r3
            (FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HoldSetupTime << 16)|
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	69db      	ldr	r3, [r3, #28]
 8005a20:	689b      	ldr	r3, [r3, #8]
 8005a22:	041b      	lsls	r3, r3, #16
            (FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_WaitSetupTime << 8) |
 8005a24:	431a      	orrs	r2, r3
            (FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HiZSetupTime << 24); 
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	69db      	ldr	r3, [r3, #28]
 8005a2a:	68db      	ldr	r3, [r3, #12]
 8005a2c:	061b      	lsls	r3, r3, #24
  tmppmem = (uint32_t)FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_SetupTime |
 8005a2e:	4313      	orrs	r3, r2
 8005a30:	613b      	str	r3, [r7, #16]
            
  /* Set tmppatt value according to FMC_AttributeSpaceTimingStructure parameters */
  tmppatt = (uint32_t)FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_SetupTime |
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6a1b      	ldr	r3, [r3, #32]
 8005a36:	681a      	ldr	r2, [r3, #0]
            (FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_WaitSetupTime << 8) |
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	6a1b      	ldr	r3, [r3, #32]
 8005a3c:	685b      	ldr	r3, [r3, #4]
 8005a3e:	021b      	lsls	r3, r3, #8
  tmppatt = (uint32_t)FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_SetupTime |
 8005a40:	431a      	orrs	r2, r3
            (FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HoldSetupTime << 16)|
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6a1b      	ldr	r3, [r3, #32]
 8005a46:	689b      	ldr	r3, [r3, #8]
 8005a48:	041b      	lsls	r3, r3, #16
            (FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_WaitSetupTime << 8) |
 8005a4a:	431a      	orrs	r2, r3
            (FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HiZSetupTime << 24);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	6a1b      	ldr	r3, [r3, #32]
 8005a50:	68db      	ldr	r3, [r3, #12]
 8005a52:	061b      	lsls	r3, r3, #24
  tmppatt = (uint32_t)FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_SetupTime |
 8005a54:	4313      	orrs	r3, r2
 8005a56:	60fb      	str	r3, [r7, #12]
  
  if(FMC_NANDInitStruct->FMC_Bank == FMC_Bank2_NAND)
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	2b10      	cmp	r3, #16
 8005a5e:	d109      	bne.n	8005a74 <FMC_NANDInit+0xa8>
  {
    /* FMC_Bank2_NAND registers configuration */
    FMC_Bank2->PCR2 = tmppcr;
 8005a60:	4a0c      	ldr	r2, [pc, #48]	; (8005a94 <FMC_NANDInit+0xc8>)
 8005a62:	697b      	ldr	r3, [r7, #20]
 8005a64:	6013      	str	r3, [r2, #0]
    FMC_Bank2->PMEM2 = tmppmem;
 8005a66:	4a0b      	ldr	r2, [pc, #44]	; (8005a94 <FMC_NANDInit+0xc8>)
 8005a68:	693b      	ldr	r3, [r7, #16]
 8005a6a:	6093      	str	r3, [r2, #8]
    FMC_Bank2->PATT2 = tmppatt;
 8005a6c:	4a09      	ldr	r2, [pc, #36]	; (8005a94 <FMC_NANDInit+0xc8>)
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	60d3      	str	r3, [r2, #12]
    /* FMC_Bank3_NAND registers configuration */
    FMC_Bank3->PCR3 = tmppcr;
    FMC_Bank3->PMEM3 = tmppmem;
    FMC_Bank3->PATT3 = tmppatt;
  }
}
 8005a72:	e008      	b.n	8005a86 <FMC_NANDInit+0xba>
    FMC_Bank3->PCR3 = tmppcr;
 8005a74:	4a08      	ldr	r2, [pc, #32]	; (8005a98 <FMC_NANDInit+0xcc>)
 8005a76:	697b      	ldr	r3, [r7, #20]
 8005a78:	6013      	str	r3, [r2, #0]
    FMC_Bank3->PMEM3 = tmppmem;
 8005a7a:	4a07      	ldr	r2, [pc, #28]	; (8005a98 <FMC_NANDInit+0xcc>)
 8005a7c:	693b      	ldr	r3, [r7, #16]
 8005a7e:	6093      	str	r3, [r2, #8]
    FMC_Bank3->PATT3 = tmppatt;
 8005a80:	4a05      	ldr	r2, [pc, #20]	; (8005a98 <FMC_NANDInit+0xcc>)
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	60d3      	str	r3, [r2, #12]
}
 8005a86:	bf00      	nop
 8005a88:	371c      	adds	r7, #28
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a90:	4770      	bx	lr
 8005a92:	bf00      	nop
 8005a94:	a0000060 	.word	0xa0000060
 8005a98:	a0000080 	.word	0xa0000080

08005a9c <FMC_NANDStructInit>:
  * @param  FMC_NANDInitStruct: pointer to a FMC_NANDInitTypeDef structure which
  *         will be initialized.
  * @retval None
  */
void FMC_NANDStructInit(FMC_NANDInitTypeDef* FMC_NANDInitStruct)
{ 
 8005a9c:	b480      	push	{r7}
 8005a9e:	b083      	sub	sp, #12
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
  /* Reset NAND Init structure parameters values */
  FMC_NANDInitStruct->FMC_Bank = FMC_Bank2_NAND;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2210      	movs	r2, #16
 8005aa8:	601a      	str	r2, [r3, #0]
  FMC_NANDInitStruct->FMC_Waitfeature = FMC_Waitfeature_Disable;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	2200      	movs	r2, #0
 8005aae:	605a      	str	r2, [r3, #4]
  FMC_NANDInitStruct->FMC_MemoryDataWidth = FMC_NAND_MemoryDataWidth_16b;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2210      	movs	r2, #16
 8005ab4:	609a      	str	r2, [r3, #8]
  FMC_NANDInitStruct->FMC_ECC = FMC_ECC_Disable;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	2200      	movs	r2, #0
 8005aba:	60da      	str	r2, [r3, #12]
  FMC_NANDInitStruct->FMC_ECCPageSize = FMC_ECCPageSize_256Bytes;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2200      	movs	r2, #0
 8005ac0:	611a      	str	r2, [r3, #16]
  FMC_NANDInitStruct->FMC_TCLRSetupTime = 0x0;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	615a      	str	r2, [r3, #20]
  FMC_NANDInitStruct->FMC_TARSetupTime = 0x0;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2200      	movs	r2, #0
 8005acc:	619a      	str	r2, [r3, #24]
  FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_SetupTime = 252;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	69db      	ldr	r3, [r3, #28]
 8005ad2:	22fc      	movs	r2, #252	; 0xfc
 8005ad4:	601a      	str	r2, [r3, #0]
  FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_WaitSetupTime = 252;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	69db      	ldr	r3, [r3, #28]
 8005ada:	22fc      	movs	r2, #252	; 0xfc
 8005adc:	605a      	str	r2, [r3, #4]
  FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HoldSetupTime = 252;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	69db      	ldr	r3, [r3, #28]
 8005ae2:	22fc      	movs	r2, #252	; 0xfc
 8005ae4:	609a      	str	r2, [r3, #8]
  FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HiZSetupTime = 252;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	69db      	ldr	r3, [r3, #28]
 8005aea:	22fc      	movs	r2, #252	; 0xfc
 8005aec:	60da      	str	r2, [r3, #12]
  FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_SetupTime = 252;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6a1b      	ldr	r3, [r3, #32]
 8005af2:	22fc      	movs	r2, #252	; 0xfc
 8005af4:	601a      	str	r2, [r3, #0]
  FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_WaitSetupTime = 252;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6a1b      	ldr	r3, [r3, #32]
 8005afa:	22fc      	movs	r2, #252	; 0xfc
 8005afc:	605a      	str	r2, [r3, #4]
  FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HoldSetupTime = 252;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	6a1b      	ldr	r3, [r3, #32]
 8005b02:	22fc      	movs	r2, #252	; 0xfc
 8005b04:	609a      	str	r2, [r3, #8]
  FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HiZSetupTime = 252;	  
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	6a1b      	ldr	r3, [r3, #32]
 8005b0a:	22fc      	movs	r2, #252	; 0xfc
 8005b0c:	60da      	str	r2, [r3, #12]
}
 8005b0e:	bf00      	nop
 8005b10:	370c      	adds	r7, #12
 8005b12:	46bd      	mov	sp, r7
 8005b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b18:	4770      	bx	lr

08005b1a <FMC_NANDCmd>:
  *            @arg FMC_Bank3_NAND: FMC Bank3 NAND
  * @param  NewState: new state of the FMC_Bank. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void FMC_NANDCmd(uint32_t FMC_Bank, FunctionalState NewState)
{
 8005b1a:	b480      	push	{r7}
 8005b1c:	b083      	sub	sp, #12
 8005b1e:	af00      	add	r7, sp, #0
 8005b20:	6078      	str	r0, [r7, #4]
 8005b22:	460b      	mov	r3, r1
 8005b24:	70fb      	strb	r3, [r7, #3]
  assert_param(IS_FMC_NAND_BANK(FMC_Bank));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8005b26:	78fb      	ldrb	r3, [r7, #3]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d010      	beq.n	8005b4e <FMC_NANDCmd+0x34>
  {
    /* Enable the selected NAND Bank by setting the PBKEN bit in the PCRx register */
    if(FMC_Bank == FMC_Bank2_NAND)
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2b10      	cmp	r3, #16
 8005b30:	d106      	bne.n	8005b40 <FMC_NANDCmd+0x26>
    {
      FMC_Bank2->PCR2 |= PCR_PBKEN_SET;
 8005b32:	4b12      	ldr	r3, [pc, #72]	; (8005b7c <FMC_NANDCmd+0x62>)
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	4a11      	ldr	r2, [pc, #68]	; (8005b7c <FMC_NANDCmd+0x62>)
 8005b38:	f043 0304 	orr.w	r3, r3, #4
 8005b3c:	6013      	str	r3, [r2, #0]
    else
    {
      FMC_Bank3->PCR3 &= PCR_PBKEN_RESET;
    }
  }
}
 8005b3e:	e016      	b.n	8005b6e <FMC_NANDCmd+0x54>
      FMC_Bank3->PCR3 |= PCR_PBKEN_SET;
 8005b40:	4b0f      	ldr	r3, [pc, #60]	; (8005b80 <FMC_NANDCmd+0x66>)
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	4a0e      	ldr	r2, [pc, #56]	; (8005b80 <FMC_NANDCmd+0x66>)
 8005b46:	f043 0304 	orr.w	r3, r3, #4
 8005b4a:	6013      	str	r3, [r2, #0]
}
 8005b4c:	e00f      	b.n	8005b6e <FMC_NANDCmd+0x54>
    if(FMC_Bank == FMC_Bank2_NAND)
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	2b10      	cmp	r3, #16
 8005b52:	d106      	bne.n	8005b62 <FMC_NANDCmd+0x48>
      FMC_Bank2->PCR2 &= PCR_PBKEN_RESET;
 8005b54:	4b09      	ldr	r3, [pc, #36]	; (8005b7c <FMC_NANDCmd+0x62>)
 8005b56:	681a      	ldr	r2, [r3, #0]
 8005b58:	4908      	ldr	r1, [pc, #32]	; (8005b7c <FMC_NANDCmd+0x62>)
 8005b5a:	4b0a      	ldr	r3, [pc, #40]	; (8005b84 <FMC_NANDCmd+0x6a>)
 8005b5c:	4013      	ands	r3, r2
 8005b5e:	600b      	str	r3, [r1, #0]
}
 8005b60:	e005      	b.n	8005b6e <FMC_NANDCmd+0x54>
      FMC_Bank3->PCR3 &= PCR_PBKEN_RESET;
 8005b62:	4b07      	ldr	r3, [pc, #28]	; (8005b80 <FMC_NANDCmd+0x66>)
 8005b64:	681a      	ldr	r2, [r3, #0]
 8005b66:	4906      	ldr	r1, [pc, #24]	; (8005b80 <FMC_NANDCmd+0x66>)
 8005b68:	4b06      	ldr	r3, [pc, #24]	; (8005b84 <FMC_NANDCmd+0x6a>)
 8005b6a:	4013      	ands	r3, r2
 8005b6c:	600b      	str	r3, [r1, #0]
}
 8005b6e:	bf00      	nop
 8005b70:	370c      	adds	r7, #12
 8005b72:	46bd      	mov	sp, r7
 8005b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b78:	4770      	bx	lr
 8005b7a:	bf00      	nop
 8005b7c:	a0000060 	.word	0xa0000060
 8005b80:	a0000080 	.word	0xa0000080
 8005b84:	000ffffb 	.word	0x000ffffb

08005b88 <FMC_NANDECCCmd>:
  * @param  NewState: new state of the FMC NAND ECC feature.  
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void FMC_NANDECCCmd(uint32_t FMC_Bank, FunctionalState NewState)
{
 8005b88:	b480      	push	{r7}
 8005b8a:	b083      	sub	sp, #12
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]
 8005b90:	460b      	mov	r3, r1
 8005b92:	70fb      	strb	r3, [r7, #3]
  assert_param(IS_FMC_NAND_BANK(FMC_Bank));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8005b94:	78fb      	ldrb	r3, [r7, #3]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d010      	beq.n	8005bbc <FMC_NANDECCCmd+0x34>
  {
    /* Enable the selected NAND Bank ECC function by setting the ECCEN bit in the PCRx register */
    if(FMC_Bank == FMC_Bank2_NAND)
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2b10      	cmp	r3, #16
 8005b9e:	d106      	bne.n	8005bae <FMC_NANDECCCmd+0x26>
    {
      FMC_Bank2->PCR2 |= PCR_ECCEN_SET;
 8005ba0:	4b11      	ldr	r3, [pc, #68]	; (8005be8 <FMC_NANDECCCmd+0x60>)
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	4a10      	ldr	r2, [pc, #64]	; (8005be8 <FMC_NANDECCCmd+0x60>)
 8005ba6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005baa:	6013      	str	r3, [r2, #0]
    else
    {
      FMC_Bank3->PCR3 &= PCR_ECCEN_RESET;
    }
  }
}
 8005bac:	e016      	b.n	8005bdc <FMC_NANDECCCmd+0x54>
      FMC_Bank3->PCR3 |= PCR_ECCEN_SET;
 8005bae:	4b0f      	ldr	r3, [pc, #60]	; (8005bec <FMC_NANDECCCmd+0x64>)
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	4a0e      	ldr	r2, [pc, #56]	; (8005bec <FMC_NANDECCCmd+0x64>)
 8005bb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005bb8:	6013      	str	r3, [r2, #0]
}
 8005bba:	e00f      	b.n	8005bdc <FMC_NANDECCCmd+0x54>
    if(FMC_Bank == FMC_Bank2_NAND)
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2b10      	cmp	r3, #16
 8005bc0:	d106      	bne.n	8005bd0 <FMC_NANDECCCmd+0x48>
      FMC_Bank2->PCR2 &= PCR_ECCEN_RESET;
 8005bc2:	4b09      	ldr	r3, [pc, #36]	; (8005be8 <FMC_NANDECCCmd+0x60>)
 8005bc4:	681a      	ldr	r2, [r3, #0]
 8005bc6:	4908      	ldr	r1, [pc, #32]	; (8005be8 <FMC_NANDECCCmd+0x60>)
 8005bc8:	4b09      	ldr	r3, [pc, #36]	; (8005bf0 <FMC_NANDECCCmd+0x68>)
 8005bca:	4013      	ands	r3, r2
 8005bcc:	600b      	str	r3, [r1, #0]
}
 8005bce:	e005      	b.n	8005bdc <FMC_NANDECCCmd+0x54>
      FMC_Bank3->PCR3 &= PCR_ECCEN_RESET;
 8005bd0:	4b06      	ldr	r3, [pc, #24]	; (8005bec <FMC_NANDECCCmd+0x64>)
 8005bd2:	681a      	ldr	r2, [r3, #0]
 8005bd4:	4905      	ldr	r1, [pc, #20]	; (8005bec <FMC_NANDECCCmd+0x64>)
 8005bd6:	4b06      	ldr	r3, [pc, #24]	; (8005bf0 <FMC_NANDECCCmd+0x68>)
 8005bd8:	4013      	ands	r3, r2
 8005bda:	600b      	str	r3, [r1, #0]
}
 8005bdc:	bf00      	nop
 8005bde:	370c      	adds	r7, #12
 8005be0:	46bd      	mov	sp, r7
 8005be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be6:	4770      	bx	lr
 8005be8:	a0000060 	.word	0xa0000060
 8005bec:	a0000080 	.word	0xa0000080
 8005bf0:	000fffbf 	.word	0x000fffbf

08005bf4 <FMC_GetECC>:
  *            @arg FMC_Bank2_NAND: FMC Bank2 NAND 
  *            @arg FMC_Bank3_NAND: FMC Bank3 NAND
  * @retval The Error Correction Code (ECC) value.
  */
uint32_t FMC_GetECC(uint32_t FMC_Bank)
{
 8005bf4:	b480      	push	{r7}
 8005bf6:	b085      	sub	sp, #20
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	6078      	str	r0, [r7, #4]
  uint32_t eccval = 0x00000000;
 8005bfc:	2300      	movs	r3, #0
 8005bfe:	60fb      	str	r3, [r7, #12]
  
  if(FMC_Bank == FMC_Bank2_NAND)
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2b10      	cmp	r3, #16
 8005c04:	d103      	bne.n	8005c0e <FMC_GetECC+0x1a>
  {
    /* Get the ECCR2 register value */
    eccval = FMC_Bank2->ECCR2;
 8005c06:	4b07      	ldr	r3, [pc, #28]	; (8005c24 <FMC_GetECC+0x30>)
 8005c08:	695b      	ldr	r3, [r3, #20]
 8005c0a:	60fb      	str	r3, [r7, #12]
 8005c0c:	e002      	b.n	8005c14 <FMC_GetECC+0x20>
  }
  else
  {
    /* Get the ECCR3 register value */
    eccval = FMC_Bank3->ECCR3;
 8005c0e:	4b06      	ldr	r3, [pc, #24]	; (8005c28 <FMC_GetECC+0x34>)
 8005c10:	695b      	ldr	r3, [r3, #20]
 8005c12:	60fb      	str	r3, [r7, #12]
  }
  /* Return the error correction code value */
  return(eccval);
 8005c14:	68fb      	ldr	r3, [r7, #12]
}
 8005c16:	4618      	mov	r0, r3
 8005c18:	3714      	adds	r7, #20
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c20:	4770      	bx	lr
 8005c22:	bf00      	nop
 8005c24:	a0000060 	.word	0xa0000060
 8005c28:	a0000080 	.word	0xa0000080

08005c2c <FMC_PCCARDDeInit>:
  * @brief  De-initializes the FMC PCCARD Bank registers to their default reset values.
  * @param  None                       
  * @retval None
  */
void FMC_PCCARDDeInit(void)
{
 8005c2c:	b480      	push	{r7}
 8005c2e:	af00      	add	r7, sp, #0
  /* Set the FMC_Bank4 registers to their reset values */
  FMC_Bank4->PCR4 = 0x00000018; 
 8005c30:	4b0b      	ldr	r3, [pc, #44]	; (8005c60 <FMC_PCCARDDeInit+0x34>)
 8005c32:	2218      	movs	r2, #24
 8005c34:	601a      	str	r2, [r3, #0]
  FMC_Bank4->SR4 = 0x00000000;	
 8005c36:	4b0a      	ldr	r3, [pc, #40]	; (8005c60 <FMC_PCCARDDeInit+0x34>)
 8005c38:	2200      	movs	r2, #0
 8005c3a:	605a      	str	r2, [r3, #4]
  FMC_Bank4->PMEM4 = 0xFCFCFCFC;
 8005c3c:	4b08      	ldr	r3, [pc, #32]	; (8005c60 <FMC_PCCARDDeInit+0x34>)
 8005c3e:	f04f 32fc 	mov.w	r2, #4244438268	; 0xfcfcfcfc
 8005c42:	609a      	str	r2, [r3, #8]
  FMC_Bank4->PATT4 = 0xFCFCFCFC;
 8005c44:	4b06      	ldr	r3, [pc, #24]	; (8005c60 <FMC_PCCARDDeInit+0x34>)
 8005c46:	f04f 32fc 	mov.w	r2, #4244438268	; 0xfcfcfcfc
 8005c4a:	60da      	str	r2, [r3, #12]
  FMC_Bank4->PIO4 = 0xFCFCFCFC;
 8005c4c:	4b04      	ldr	r3, [pc, #16]	; (8005c60 <FMC_PCCARDDeInit+0x34>)
 8005c4e:	f04f 32fc 	mov.w	r2, #4244438268	; 0xfcfcfcfc
 8005c52:	611a      	str	r2, [r3, #16]
}
 8005c54:	bf00      	nop
 8005c56:	46bd      	mov	sp, r7
 8005c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5c:	4770      	bx	lr
 8005c5e:	bf00      	nop
 8005c60:	a00000a0 	.word	0xa00000a0

08005c64 <FMC_PCCARDInit>:
  * @param  FMC_PCCARDInitStruct : pointer to a FMC_PCCARDInitTypeDef structure
  *         that contains the configuration information for the FMC PCCARD Bank.                       
  * @retval None
  */
void FMC_PCCARDInit(FMC_PCCARDInitTypeDef* FMC_PCCARDInitStruct)
{
 8005c64:	b480      	push	{r7}
 8005c66:	b083      	sub	sp, #12
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
  assert_param(IS_FMC_WAIT_TIME(FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_WaitSetupTime));
  assert_param(IS_FMC_HOLD_TIME(FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_HoldSetupTime));
  assert_param(IS_FMC_HIZ_TIME(FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_HiZSetupTime));
  
  /* Set the PCR4 register value according to FMC_PCCARDInitStruct parameters */
  FMC_Bank4->PCR4 = (uint32_t)FMC_PCCARDInitStruct->FMC_Waitfeature |
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681a      	ldr	r2, [r3, #0]
                     FMC_NAND_MemoryDataWidth_16b |  
                     (FMC_PCCARDInitStruct->FMC_TCLRSetupTime << 9) |
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	685b      	ldr	r3, [r3, #4]
 8005c74:	025b      	lsls	r3, r3, #9
                     FMC_NAND_MemoryDataWidth_16b |  
 8005c76:	431a      	orrs	r2, r3
                     (FMC_PCCARDInitStruct->FMC_TARSetupTime << 13);
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	689b      	ldr	r3, [r3, #8]
 8005c7c:	035b      	lsls	r3, r3, #13
                     (FMC_PCCARDInitStruct->FMC_TCLRSetupTime << 9) |
 8005c7e:	4313      	orrs	r3, r2
  FMC_Bank4->PCR4 = (uint32_t)FMC_PCCARDInitStruct->FMC_Waitfeature |
 8005c80:	4a22      	ldr	r2, [pc, #136]	; (8005d0c <FMC_PCCARDInit+0xa8>)
                     (FMC_PCCARDInitStruct->FMC_TCLRSetupTime << 9) |
 8005c82:	f043 0310 	orr.w	r3, r3, #16
  FMC_Bank4->PCR4 = (uint32_t)FMC_PCCARDInitStruct->FMC_Waitfeature |
 8005c86:	6013      	str	r3, [r2, #0]
            
  /* Set PMEM4 register value according to FMC_CommonSpaceTimingStructure parameters */
  FMC_Bank4->PMEM4 = (uint32_t)FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_SetupTime |
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	68db      	ldr	r3, [r3, #12]
 8005c8c:	681a      	ldr	r2, [r3, #0]
                      (FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_WaitSetupTime << 8) |
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	68db      	ldr	r3, [r3, #12]
 8005c92:	685b      	ldr	r3, [r3, #4]
 8005c94:	021b      	lsls	r3, r3, #8
  FMC_Bank4->PMEM4 = (uint32_t)FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_SetupTime |
 8005c96:	431a      	orrs	r2, r3
                      (FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HoldSetupTime << 16)|
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	68db      	ldr	r3, [r3, #12]
 8005c9c:	689b      	ldr	r3, [r3, #8]
 8005c9e:	041b      	lsls	r3, r3, #16
                      (FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_WaitSetupTime << 8) |
 8005ca0:	431a      	orrs	r2, r3
                      (FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HiZSetupTime << 24); 
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	68db      	ldr	r3, [r3, #12]
 8005ca6:	68db      	ldr	r3, [r3, #12]
 8005ca8:	061b      	lsls	r3, r3, #24
  FMC_Bank4->PMEM4 = (uint32_t)FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_SetupTime |
 8005caa:	4918      	ldr	r1, [pc, #96]	; (8005d0c <FMC_PCCARDInit+0xa8>)
                      (FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HoldSetupTime << 16)|
 8005cac:	4313      	orrs	r3, r2
  FMC_Bank4->PMEM4 = (uint32_t)FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_SetupTime |
 8005cae:	608b      	str	r3, [r1, #8]
            
  /* Set PATT4 register value according to FMC_AttributeSpaceTimingStructure parameters */
  FMC_Bank4->PATT4 = (uint32_t)FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_SetupTime |
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	691b      	ldr	r3, [r3, #16]
 8005cb4:	681a      	ldr	r2, [r3, #0]
                      (FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_WaitSetupTime << 8) |
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	691b      	ldr	r3, [r3, #16]
 8005cba:	685b      	ldr	r3, [r3, #4]
 8005cbc:	021b      	lsls	r3, r3, #8
  FMC_Bank4->PATT4 = (uint32_t)FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_SetupTime |
 8005cbe:	431a      	orrs	r2, r3
                      (FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HoldSetupTime << 16)|
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	691b      	ldr	r3, [r3, #16]
 8005cc4:	689b      	ldr	r3, [r3, #8]
 8005cc6:	041b      	lsls	r3, r3, #16
                      (FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_WaitSetupTime << 8) |
 8005cc8:	431a      	orrs	r2, r3
                      (FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HiZSetupTime << 24);	
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	691b      	ldr	r3, [r3, #16]
 8005cce:	68db      	ldr	r3, [r3, #12]
 8005cd0:	061b      	lsls	r3, r3, #24
  FMC_Bank4->PATT4 = (uint32_t)FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_SetupTime |
 8005cd2:	490e      	ldr	r1, [pc, #56]	; (8005d0c <FMC_PCCARDInit+0xa8>)
                      (FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HoldSetupTime << 16)|
 8005cd4:	4313      	orrs	r3, r2
  FMC_Bank4->PATT4 = (uint32_t)FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_SetupTime |
 8005cd6:	60cb      	str	r3, [r1, #12]
            
  /* Set PIO4 register value according to FMC_IOSpaceTimingStructure parameters */
  FMC_Bank4->PIO4 = (uint32_t)FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_SetupTime |
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	695b      	ldr	r3, [r3, #20]
 8005cdc:	681a      	ldr	r2, [r3, #0]
                     (FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_WaitSetupTime << 8) |
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	695b      	ldr	r3, [r3, #20]
 8005ce2:	685b      	ldr	r3, [r3, #4]
 8005ce4:	021b      	lsls	r3, r3, #8
  FMC_Bank4->PIO4 = (uint32_t)FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_SetupTime |
 8005ce6:	431a      	orrs	r2, r3
                     (FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_HoldSetupTime << 16)|
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	695b      	ldr	r3, [r3, #20]
 8005cec:	689b      	ldr	r3, [r3, #8]
 8005cee:	041b      	lsls	r3, r3, #16
                     (FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_WaitSetupTime << 8) |
 8005cf0:	431a      	orrs	r2, r3
                     (FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_HiZSetupTime << 24);             
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	695b      	ldr	r3, [r3, #20]
 8005cf6:	68db      	ldr	r3, [r3, #12]
 8005cf8:	061b      	lsls	r3, r3, #24
  FMC_Bank4->PIO4 = (uint32_t)FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_SetupTime |
 8005cfa:	4904      	ldr	r1, [pc, #16]	; (8005d0c <FMC_PCCARDInit+0xa8>)
                     (FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_HoldSetupTime << 16)|
 8005cfc:	4313      	orrs	r3, r2
  FMC_Bank4->PIO4 = (uint32_t)FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_SetupTime |
 8005cfe:	610b      	str	r3, [r1, #16]
}
 8005d00:	bf00      	nop
 8005d02:	370c      	adds	r7, #12
 8005d04:	46bd      	mov	sp, r7
 8005d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0a:	4770      	bx	lr
 8005d0c:	a00000a0 	.word	0xa00000a0

08005d10 <FMC_PCCARDStructInit>:
  * @param  FMC_PCCARDInitStruct: pointer to a FMC_PCCARDInitTypeDef structure
  *         which will be initialized.
  * @retval None
  */
void FMC_PCCARDStructInit(FMC_PCCARDInitTypeDef* FMC_PCCARDInitStruct)
{
 8005d10:	b480      	push	{r7}
 8005d12:	b083      	sub	sp, #12
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
  /* Reset PCCARD Init structure parameters values */
  FMC_PCCARDInitStruct->FMC_Waitfeature = FMC_Waitfeature_Disable;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	601a      	str	r2, [r3, #0]
  FMC_PCCARDInitStruct->FMC_TCLRSetupTime = 0;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	2200      	movs	r2, #0
 8005d22:	605a      	str	r2, [r3, #4]
  FMC_PCCARDInitStruct->FMC_TARSetupTime = 0;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2200      	movs	r2, #0
 8005d28:	609a      	str	r2, [r3, #8]
  FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_SetupTime = 252;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	68db      	ldr	r3, [r3, #12]
 8005d2e:	22fc      	movs	r2, #252	; 0xfc
 8005d30:	601a      	str	r2, [r3, #0]
  FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_WaitSetupTime = 252;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	68db      	ldr	r3, [r3, #12]
 8005d36:	22fc      	movs	r2, #252	; 0xfc
 8005d38:	605a      	str	r2, [r3, #4]
  FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HoldSetupTime = 252;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	68db      	ldr	r3, [r3, #12]
 8005d3e:	22fc      	movs	r2, #252	; 0xfc
 8005d40:	609a      	str	r2, [r3, #8]
  FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HiZSetupTime = 252;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	68db      	ldr	r3, [r3, #12]
 8005d46:	22fc      	movs	r2, #252	; 0xfc
 8005d48:	60da      	str	r2, [r3, #12]
  FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_SetupTime = 252;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	691b      	ldr	r3, [r3, #16]
 8005d4e:	22fc      	movs	r2, #252	; 0xfc
 8005d50:	601a      	str	r2, [r3, #0]
  FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_WaitSetupTime = 252;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	691b      	ldr	r3, [r3, #16]
 8005d56:	22fc      	movs	r2, #252	; 0xfc
 8005d58:	605a      	str	r2, [r3, #4]
  FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HoldSetupTime = 252;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	691b      	ldr	r3, [r3, #16]
 8005d5e:	22fc      	movs	r2, #252	; 0xfc
 8005d60:	609a      	str	r2, [r3, #8]
  FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HiZSetupTime = 252;	
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	691b      	ldr	r3, [r3, #16]
 8005d66:	22fc      	movs	r2, #252	; 0xfc
 8005d68:	60da      	str	r2, [r3, #12]
  FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_SetupTime = 252;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	695b      	ldr	r3, [r3, #20]
 8005d6e:	22fc      	movs	r2, #252	; 0xfc
 8005d70:	601a      	str	r2, [r3, #0]
  FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_WaitSetupTime = 252;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	695b      	ldr	r3, [r3, #20]
 8005d76:	22fc      	movs	r2, #252	; 0xfc
 8005d78:	605a      	str	r2, [r3, #4]
  FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_HoldSetupTime = 252;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	695b      	ldr	r3, [r3, #20]
 8005d7e:	22fc      	movs	r2, #252	; 0xfc
 8005d80:	609a      	str	r2, [r3, #8]
  FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_HiZSetupTime = 252;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	695b      	ldr	r3, [r3, #20]
 8005d86:	22fc      	movs	r2, #252	; 0xfc
 8005d88:	60da      	str	r2, [r3, #12]
}
 8005d8a:	bf00      	nop
 8005d8c:	370c      	adds	r7, #12
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d94:	4770      	bx	lr

08005d96 <FMC_PCCARDCmd>:
  * @param  NewState: new state of the PCCARD Memory Bank.  
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void FMC_PCCARDCmd(FunctionalState NewState)
{
 8005d96:	b480      	push	{r7}
 8005d98:	b083      	sub	sp, #12
 8005d9a:	af00      	add	r7, sp, #0
 8005d9c:	4603      	mov	r3, r0
 8005d9e:	71fb      	strb	r3, [r7, #7]
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8005da0:	79fb      	ldrb	r3, [r7, #7]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d006      	beq.n	8005db4 <FMC_PCCARDCmd+0x1e>
  {
    /* Enable the PCCARD Bank by setting the PBKEN bit in the PCR4 register */
    FMC_Bank4->PCR4 |= PCR_PBKEN_SET;
 8005da6:	4b09      	ldr	r3, [pc, #36]	; (8005dcc <FMC_PCCARDCmd+0x36>)
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	4a08      	ldr	r2, [pc, #32]	; (8005dcc <FMC_PCCARDCmd+0x36>)
 8005dac:	f043 0304 	orr.w	r3, r3, #4
 8005db0:	6013      	str	r3, [r2, #0]
  else
  {
    /* Disable the PCCARD Bank by clearing the PBKEN bit in the PCR4 register */
    FMC_Bank4->PCR4 &= PCR_PBKEN_RESET;
  }
}
 8005db2:	e005      	b.n	8005dc0 <FMC_PCCARDCmd+0x2a>
    FMC_Bank4->PCR4 &= PCR_PBKEN_RESET;
 8005db4:	4b05      	ldr	r3, [pc, #20]	; (8005dcc <FMC_PCCARDCmd+0x36>)
 8005db6:	681a      	ldr	r2, [r3, #0]
 8005db8:	4904      	ldr	r1, [pc, #16]	; (8005dcc <FMC_PCCARDCmd+0x36>)
 8005dba:	4b05      	ldr	r3, [pc, #20]	; (8005dd0 <FMC_PCCARDCmd+0x3a>)
 8005dbc:	4013      	ands	r3, r2
 8005dbe:	600b      	str	r3, [r1, #0]
}
 8005dc0:	bf00      	nop
 8005dc2:	370c      	adds	r7, #12
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dca:	4770      	bx	lr
 8005dcc:	a00000a0 	.word	0xa00000a0
 8005dd0:	000ffffb 	.word	0x000ffffb

08005dd4 <FMC_SDRAMDeInit>:
  *            @arg FMC_Bank1_SDRAM: FMC Bank1 SDRAM 
  *            @arg FMC_Bank2_SDRAM: FMC Bank2 SDRAM 
  * @retval None
  */
void FMC_SDRAMDeInit(uint32_t FMC_Bank)
{
 8005dd4:	b480      	push	{r7}
 8005dd6:	b083      	sub	sp, #12
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_FMC_SDRAM_BANK(FMC_Bank));
  
  FMC_Bank5_6->SDCR[FMC_Bank] = 0x000002D0;
 8005ddc:	4a0d      	ldr	r2, [pc, #52]	; (8005e14 <FMC_SDRAMDeInit+0x40>)
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	f44f 7134 	mov.w	r1, #720	; 0x2d0
 8005de4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  FMC_Bank5_6->SDTR[FMC_Bank] = 0x0FFFFFFF;    
 8005de8:	4a0a      	ldr	r2, [pc, #40]	; (8005e14 <FMC_SDRAMDeInit+0x40>)
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	3302      	adds	r3, #2
 8005dee:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8005df2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  FMC_Bank5_6->SDCMR = 0x00000000;
 8005df6:	4b07      	ldr	r3, [pc, #28]	; (8005e14 <FMC_SDRAMDeInit+0x40>)
 8005df8:	2200      	movs	r2, #0
 8005dfa:	611a      	str	r2, [r3, #16]
  FMC_Bank5_6->SDRTR = 0x00000000;
 8005dfc:	4b05      	ldr	r3, [pc, #20]	; (8005e14 <FMC_SDRAMDeInit+0x40>)
 8005dfe:	2200      	movs	r2, #0
 8005e00:	615a      	str	r2, [r3, #20]
  FMC_Bank5_6->SDSR = 0x00000000; 
 8005e02:	4b04      	ldr	r3, [pc, #16]	; (8005e14 <FMC_SDRAMDeInit+0x40>)
 8005e04:	2200      	movs	r2, #0
 8005e06:	619a      	str	r2, [r3, #24]
}  
 8005e08:	bf00      	nop
 8005e0a:	370c      	adds	r7, #12
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e12:	4770      	bx	lr
 8005e14:	a0000140 	.word	0xa0000140

08005e18 <FMC_SDRAMInit>:
  *         that contains the configuration information for the FMC SDRAM 
  *         specified Banks.                       
  * @retval None
  */
void FMC_SDRAMInit(FMC_SDRAMInitTypeDef* FMC_SDRAMInitStruct)
{ 
 8005e18:	b480      	push	{r7}
 8005e1a:	b087      	sub	sp, #28
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]
  /* temporary registers */
  uint32_t tmpr1 = 0;
 8005e20:	2300      	movs	r3, #0
 8005e22:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 8005e24:	2300      	movs	r3, #0
 8005e26:	613b      	str	r3, [r7, #16]
  uint32_t tmpr3 = 0;
 8005e28:	2300      	movs	r3, #0
 8005e2a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr4 = 0;
 8005e2c:	2300      	movs	r3, #0
 8005e2e:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_WRITE_RECOVERY_TIME(FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_WriteRecoveryTime)); 
  assert_param(IS_FMC_RP_DELAY(FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RPDelay)); 
  assert_param(IS_FMC_RCD_DELAY(FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RCDDelay));    
  
  /* SDRAM bank control register configuration */ 
  tmpr1 =   (uint32_t)FMC_SDRAMInitStruct->FMC_ColumnBitsNumber |
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	685a      	ldr	r2, [r3, #4]
             FMC_SDRAMInitStruct->FMC_RowBitsNumber |
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	689b      	ldr	r3, [r3, #8]
  tmpr1 =   (uint32_t)FMC_SDRAMInitStruct->FMC_ColumnBitsNumber |
 8005e38:	431a      	orrs	r2, r3
             FMC_SDRAMInitStruct->FMC_SDMemoryDataWidth |
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	68db      	ldr	r3, [r3, #12]
             FMC_SDRAMInitStruct->FMC_RowBitsNumber |
 8005e3e:	431a      	orrs	r2, r3
             FMC_SDRAMInitStruct->FMC_InternalBankNumber |           
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	691b      	ldr	r3, [r3, #16]
             FMC_SDRAMInitStruct->FMC_SDMemoryDataWidth |
 8005e44:	431a      	orrs	r2, r3
             FMC_SDRAMInitStruct->FMC_CASLatency |
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	695b      	ldr	r3, [r3, #20]
             FMC_SDRAMInitStruct->FMC_InternalBankNumber |           
 8005e4a:	431a      	orrs	r2, r3
             FMC_SDRAMInitStruct->FMC_WriteProtection |
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	699b      	ldr	r3, [r3, #24]
             FMC_SDRAMInitStruct->FMC_CASLatency |
 8005e50:	431a      	orrs	r2, r3
             FMC_SDRAMInitStruct->FMC_SDClockPeriod |
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	69db      	ldr	r3, [r3, #28]
             FMC_SDRAMInitStruct->FMC_WriteProtection |
 8005e56:	431a      	orrs	r2, r3
             FMC_SDRAMInitStruct->FMC_ReadBurst | 
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	6a1b      	ldr	r3, [r3, #32]
             FMC_SDRAMInitStruct->FMC_SDClockPeriod |
 8005e5c:	431a      	orrs	r2, r3
             FMC_SDRAMInitStruct->FMC_ReadPipeDelay;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  tmpr1 =   (uint32_t)FMC_SDRAMInitStruct->FMC_ColumnBitsNumber |
 8005e62:	4313      	orrs	r3, r2
 8005e64:	617b      	str	r3, [r7, #20]
            
  if(FMC_SDRAMInitStruct->FMC_Bank == FMC_Bank1_SDRAM )
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d106      	bne.n	8005e7c <FMC_SDRAMInit+0x64>
  {
    FMC_Bank5_6->SDCR[FMC_SDRAMInitStruct->FMC_Bank] = tmpr1;
 8005e6e:	4940      	ldr	r1, [pc, #256]	; (8005f70 <FMC_SDRAMInit+0x158>)
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	697a      	ldr	r2, [r7, #20]
 8005e76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8005e7a:	e011      	b.n	8005ea0 <FMC_SDRAMInit+0x88>
  }
  else   /* SDCR2 "don't care" bits configuration */
  {
    tmpr3 = (uint32_t)FMC_SDRAMInitStruct->FMC_SDClockPeriod |
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	69da      	ldr	r2, [r3, #28]
             FMC_SDRAMInitStruct->FMC_ReadBurst | 
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	6a1b      	ldr	r3, [r3, #32]
    tmpr3 = (uint32_t)FMC_SDRAMInitStruct->FMC_SDClockPeriod |
 8005e84:	431a      	orrs	r2, r3
             FMC_SDRAMInitStruct->FMC_ReadPipeDelay;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    tmpr3 = (uint32_t)FMC_SDRAMInitStruct->FMC_SDClockPeriod |
 8005e8a:	4313      	orrs	r3, r2
 8005e8c:	60fb      	str	r3, [r7, #12]
    
    FMC_Bank5_6->SDCR[FMC_Bank1_SDRAM] = tmpr3;
 8005e8e:	4a38      	ldr	r2, [pc, #224]	; (8005f70 <FMC_SDRAMInit+0x158>)
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	6013      	str	r3, [r2, #0]
    FMC_Bank5_6->SDCR[FMC_SDRAMInitStruct->FMC_Bank] = tmpr1;
 8005e94:	4936      	ldr	r1, [pc, #216]	; (8005f70 <FMC_SDRAMInit+0x158>)
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	697a      	ldr	r2, [r7, #20]
 8005e9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
  /* SDRAM bank timing register configuration */
  if(FMC_SDRAMInitStruct->FMC_Bank == FMC_Bank1_SDRAM )
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d130      	bne.n	8005f0a <FMC_SDRAMInit+0xf2>
  {
    tmpr2 =   (uint32_t)((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_LoadToActiveDelay)-1) |
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	1e5a      	subs	r2, r3, #1
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_ExitSelfRefreshDelay)-1) << 4) |
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005eb4:	685b      	ldr	r3, [r3, #4]
 8005eb6:	3b01      	subs	r3, #1
 8005eb8:	011b      	lsls	r3, r3, #4
    tmpr2 =   (uint32_t)((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_LoadToActiveDelay)-1) |
 8005eba:	431a      	orrs	r2, r3
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_SelfRefreshTime)-1) << 8) |
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ec0:	689b      	ldr	r3, [r3, #8]
 8005ec2:	3b01      	subs	r3, #1
 8005ec4:	021b      	lsls	r3, r3, #8
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_ExitSelfRefreshDelay)-1) << 4) |
 8005ec6:	431a      	orrs	r2, r3
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RowCycleDelay)-1) << 12) |
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ecc:	68db      	ldr	r3, [r3, #12]
 8005ece:	3b01      	subs	r3, #1
 8005ed0:	031b      	lsls	r3, r3, #12
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_SelfRefreshTime)-1) << 8) |
 8005ed2:	431a      	orrs	r2, r3
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_WriteRecoveryTime)-1) << 16) |
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ed8:	691b      	ldr	r3, [r3, #16]
 8005eda:	3b01      	subs	r3, #1
 8005edc:	041b      	lsls	r3, r3, #16
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RowCycleDelay)-1) << 12) |
 8005ede:	431a      	orrs	r2, r3
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RPDelay)-1) << 20) |
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ee4:	695b      	ldr	r3, [r3, #20]
 8005ee6:	3b01      	subs	r3, #1
 8005ee8:	051b      	lsls	r3, r3, #20
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_WriteRecoveryTime)-1) << 16) |
 8005eea:	431a      	orrs	r2, r3
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RCDDelay)-1) << 24);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ef0:	699b      	ldr	r3, [r3, #24]
 8005ef2:	3b01      	subs	r3, #1
 8005ef4:	061b      	lsls	r3, r3, #24
    tmpr2 =   (uint32_t)((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_LoadToActiveDelay)-1) |
 8005ef6:	4313      	orrs	r3, r2
 8005ef8:	613b      	str	r3, [r7, #16]
            
            FMC_Bank5_6->SDTR[FMC_SDRAMInitStruct->FMC_Bank] = tmpr2;
 8005efa:	491d      	ldr	r1, [pc, #116]	; (8005f70 <FMC_SDRAMInit+0x158>)
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	3302      	adds	r3, #2
 8005f02:	693a      	ldr	r2, [r7, #16]
 8005f04:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            
            FMC_Bank5_6->SDTR[FMC_Bank1_SDRAM] = tmpr4;
            FMC_Bank5_6->SDTR[FMC_SDRAMInitStruct->FMC_Bank] = tmpr2;
  }
  
}
 8005f08:	e02c      	b.n	8005f64 <FMC_SDRAMInit+0x14c>
    tmpr2 =   (uint32_t)((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_LoadToActiveDelay)-1) |
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	1e5a      	subs	r2, r3, #1
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_ExitSelfRefreshDelay)-1) << 4) |
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f16:	685b      	ldr	r3, [r3, #4]
 8005f18:	3b01      	subs	r3, #1
 8005f1a:	011b      	lsls	r3, r3, #4
    tmpr2 =   (uint32_t)((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_LoadToActiveDelay)-1) |
 8005f1c:	431a      	orrs	r2, r3
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_SelfRefreshTime)-1) << 8) |
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f22:	689b      	ldr	r3, [r3, #8]
 8005f24:	3b01      	subs	r3, #1
 8005f26:	021b      	lsls	r3, r3, #8
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_ExitSelfRefreshDelay)-1) << 4) |
 8005f28:	431a      	orrs	r2, r3
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_WriteRecoveryTime)-1) << 16);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f2e:	691b      	ldr	r3, [r3, #16]
 8005f30:	3b01      	subs	r3, #1
 8005f32:	041b      	lsls	r3, r3, #16
    tmpr2 =   (uint32_t)((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_LoadToActiveDelay)-1) |
 8005f34:	4313      	orrs	r3, r2
 8005f36:	613b      	str	r3, [r7, #16]
    tmpr4 =   (uint32_t)(((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RowCycleDelay)-1) << 12) |
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f3c:	68db      	ldr	r3, [r3, #12]
 8005f3e:	3b01      	subs	r3, #1
 8005f40:	031a      	lsls	r2, r3, #12
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RPDelay)-1) << 20);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f46:	695b      	ldr	r3, [r3, #20]
 8005f48:	3b01      	subs	r3, #1
 8005f4a:	051b      	lsls	r3, r3, #20
    tmpr4 =   (uint32_t)(((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RowCycleDelay)-1) << 12) |
 8005f4c:	4313      	orrs	r3, r2
 8005f4e:	60bb      	str	r3, [r7, #8]
            FMC_Bank5_6->SDTR[FMC_Bank1_SDRAM] = tmpr4;
 8005f50:	4a07      	ldr	r2, [pc, #28]	; (8005f70 <FMC_SDRAMInit+0x158>)
 8005f52:	68bb      	ldr	r3, [r7, #8]
 8005f54:	6093      	str	r3, [r2, #8]
            FMC_Bank5_6->SDTR[FMC_SDRAMInitStruct->FMC_Bank] = tmpr2;
 8005f56:	4906      	ldr	r1, [pc, #24]	; (8005f70 <FMC_SDRAMInit+0x158>)
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	3302      	adds	r3, #2
 8005f5e:	693a      	ldr	r2, [r7, #16]
 8005f60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8005f64:	bf00      	nop
 8005f66:	371c      	adds	r7, #28
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6e:	4770      	bx	lr
 8005f70:	a0000140 	.word	0xa0000140

08005f74 <FMC_SDRAMStructInit>:
  * @param  FMC_SDRAMInitStruct: pointer to a FMC_SDRAMInitTypeDef structure 
  *         which will be initialized.
  * @retval None
  */
void FMC_SDRAMStructInit(FMC_SDRAMInitTypeDef* FMC_SDRAMInitStruct)  
{  
 8005f74:	b480      	push	{r7}
 8005f76:	b083      	sub	sp, #12
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]
  /* Reset SDRAM Init structure parameters values */
  FMC_SDRAMInitStruct->FMC_Bank = FMC_Bank1_SDRAM;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2200      	movs	r2, #0
 8005f80:	601a      	str	r2, [r3, #0]
  FMC_SDRAMInitStruct->FMC_ColumnBitsNumber = FMC_ColumnBits_Number_8b;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	2200      	movs	r2, #0
 8005f86:	605a      	str	r2, [r3, #4]
  FMC_SDRAMInitStruct->FMC_RowBitsNumber = FMC_RowBits_Number_11b; 
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	609a      	str	r2, [r3, #8]
  FMC_SDRAMInitStruct->FMC_SDMemoryDataWidth = FMC_SDMemory_Width_16b;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	2210      	movs	r2, #16
 8005f92:	60da      	str	r2, [r3, #12]
  FMC_SDRAMInitStruct->FMC_InternalBankNumber = FMC_InternalBank_Number_4; 
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2240      	movs	r2, #64	; 0x40
 8005f98:	611a      	str	r2, [r3, #16]
  FMC_SDRAMInitStruct->FMC_CASLatency = FMC_CAS_Latency_1;  
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	2280      	movs	r2, #128	; 0x80
 8005f9e:	615a      	str	r2, [r3, #20]
  FMC_SDRAMInitStruct->FMC_WriteProtection = FMC_Write_Protection_Enable;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005fa6:	619a      	str	r2, [r3, #24]
  FMC_SDRAMInitStruct->FMC_SDClockPeriod = FMC_SDClock_Disable;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	2200      	movs	r2, #0
 8005fac:	61da      	str	r2, [r3, #28]
  FMC_SDRAMInitStruct->FMC_ReadBurst = FMC_Read_Burst_Disable;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	621a      	str	r2, [r3, #32]
  FMC_SDRAMInitStruct->FMC_ReadPipeDelay = FMC_ReadPipe_Delay_0; 
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	625a      	str	r2, [r3, #36]	; 0x24
   
  FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_LoadToActiveDelay = 16;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fbe:	2210      	movs	r2, #16
 8005fc0:	601a      	str	r2, [r3, #0]
  FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_ExitSelfRefreshDelay = 16;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fc6:	2210      	movs	r2, #16
 8005fc8:	605a      	str	r2, [r3, #4]
  FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_SelfRefreshTime = 16;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fce:	2210      	movs	r2, #16
 8005fd0:	609a      	str	r2, [r3, #8]
  FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RowCycleDelay = 16;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fd6:	2210      	movs	r2, #16
 8005fd8:	60da      	str	r2, [r3, #12]
  FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_WriteRecoveryTime = 16;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fde:	2210      	movs	r2, #16
 8005fe0:	611a      	str	r2, [r3, #16]
  FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RPDelay = 16;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fe6:	2210      	movs	r2, #16
 8005fe8:	615a      	str	r2, [r3, #20]
  FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RCDDelay = 16;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fee:	2210      	movs	r2, #16
 8005ff0:	619a      	str	r2, [r3, #24]
  
}
 8005ff2:	bf00      	nop
 8005ff4:	370c      	adds	r7, #12
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffc:	4770      	bx	lr

08005ffe <FMC_SDRAMCmdConfig>:
  * @param  FMC_SDRAMCommandStruct: pointer to a FMC_SDRAMCommandTypeDef structure 
  *         which will be configured.
  * @retval None
  */
void FMC_SDRAMCmdConfig(FMC_SDRAMCommandTypeDef* FMC_SDRAMCommandStruct)
{
 8005ffe:	b480      	push	{r7}
 8006000:	b085      	sub	sp, #20
 8006002:	af00      	add	r7, sp, #0
 8006004:	6078      	str	r0, [r7, #4]
  uint32_t tmpr = 0x0;
 8006006:	2300      	movs	r3, #0
 8006008:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FMC_COMMAND_MODE(FMC_SDRAMCommandStruct->FMC_CommandMode));
  assert_param(IS_FMC_COMMAND_TARGET(FMC_SDRAMCommandStruct->FMC_CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(FMC_SDRAMCommandStruct->FMC_AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(FMC_SDRAMCommandStruct->FMC_ModeRegisterDefinition));
  
  tmpr =   (uint32_t)(FMC_SDRAMCommandStruct->FMC_CommandMode |
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681a      	ldr	r2, [r3, #0]
                      FMC_SDRAMCommandStruct->FMC_CommandTarget |
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	685b      	ldr	r3, [r3, #4]
  tmpr =   (uint32_t)(FMC_SDRAMCommandStruct->FMC_CommandMode |
 8006012:	431a      	orrs	r2, r3
                     (((FMC_SDRAMCommandStruct->FMC_AutoRefreshNumber)-1)<<5) |
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	689b      	ldr	r3, [r3, #8]
 8006018:	3b01      	subs	r3, #1
 800601a:	015b      	lsls	r3, r3, #5
                      FMC_SDRAMCommandStruct->FMC_CommandTarget |
 800601c:	431a      	orrs	r2, r3
                     ((FMC_SDRAMCommandStruct->FMC_ModeRegisterDefinition)<<9));
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	68db      	ldr	r3, [r3, #12]
 8006022:	025b      	lsls	r3, r3, #9
  tmpr =   (uint32_t)(FMC_SDRAMCommandStruct->FMC_CommandMode |
 8006024:	4313      	orrs	r3, r2
 8006026:	60fb      	str	r3, [r7, #12]
  
  FMC_Bank5_6->SDCMR = tmpr;
 8006028:	4a04      	ldr	r2, [pc, #16]	; (800603c <FMC_SDRAMCmdConfig+0x3e>)
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	6113      	str	r3, [r2, #16]

}
 800602e:	bf00      	nop
 8006030:	3714      	adds	r7, #20
 8006032:	46bd      	mov	sp, r7
 8006034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006038:	4770      	bx	lr
 800603a:	bf00      	nop
 800603c:	a0000140 	.word	0xa0000140

08006040 <FMC_GetModeStatus>:
  * @param  SDRAM_Bank: Defines the FMC SDRAM bank. This parameter can be 
  *                     FMC_Bank1_SDRAM or FMC_Bank2_SDRAM. 
  * @retval The FMC SDRAM bank mode status         
  */
uint32_t FMC_GetModeStatus(uint32_t SDRAM_Bank)
{
 8006040:	b480      	push	{r7}
 8006042:	b085      	sub	sp, #20
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8006048:	2300      	movs	r3, #0
 800604a:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameter */
  assert_param(IS_FMC_SDRAM_BANK(SDRAM_Bank));

  /* Get the busy flag status */
  if(SDRAM_Bank == FMC_Bank1_SDRAM)
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2b00      	cmp	r3, #0
 8006050:	d105      	bne.n	800605e <FMC_GetModeStatus+0x1e>
  {
    tmpreg = (uint32_t)(FMC_Bank5_6->SDSR & FMC_SDSR_MODES1); 
 8006052:	4b09      	ldr	r3, [pc, #36]	; (8006078 <FMC_GetModeStatus+0x38>)
 8006054:	699b      	ldr	r3, [r3, #24]
 8006056:	f003 0306 	and.w	r3, r3, #6
 800605a:	60fb      	str	r3, [r7, #12]
 800605c:	e005      	b.n	800606a <FMC_GetModeStatus+0x2a>
  }
  else
  {
    tmpreg = ((uint32_t)(FMC_Bank5_6->SDSR & FMC_SDSR_MODES2) >> 2);
 800605e:	4b06      	ldr	r3, [pc, #24]	; (8006078 <FMC_GetModeStatus+0x38>)
 8006060:	699b      	ldr	r3, [r3, #24]
 8006062:	089b      	lsrs	r3, r3, #2
 8006064:	f003 0306 	and.w	r3, r3, #6
 8006068:	60fb      	str	r3, [r7, #12]
  }
  
  /* Return the mode status */
  return tmpreg;
 800606a:	68fb      	ldr	r3, [r7, #12]
}
 800606c:	4618      	mov	r0, r3
 800606e:	3714      	adds	r7, #20
 8006070:	46bd      	mov	sp, r7
 8006072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006076:	4770      	bx	lr
 8006078:	a0000140 	.word	0xa0000140

0800607c <FMC_SetRefreshCount>:
  * @brief  defines the SDRAM Memory Refresh rate.
  * @param  FMC_Count: specifies the Refresh timer count.       
  * @retval None
  */
void FMC_SetRefreshCount(uint32_t FMC_Count)
{
 800607c:	b480      	push	{r7}
 800607e:	b083      	sub	sp, #12
 8006080:	af00      	add	r7, sp, #0
 8006082:	6078      	str	r0, [r7, #4]
  /* check the parameters */
  assert_param(IS_FMC_REFRESH_COUNT(FMC_Count));
  
  FMC_Bank5_6->SDRTR |= (FMC_Count<<1);
 8006084:	4b06      	ldr	r3, [pc, #24]	; (80060a0 <FMC_SetRefreshCount+0x24>)
 8006086:	695a      	ldr	r2, [r3, #20]
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	005b      	lsls	r3, r3, #1
 800608c:	4904      	ldr	r1, [pc, #16]	; (80060a0 <FMC_SetRefreshCount+0x24>)
 800608e:	4313      	orrs	r3, r2
 8006090:	614b      	str	r3, [r1, #20]
   
}
 8006092:	bf00      	nop
 8006094:	370c      	adds	r7, #12
 8006096:	46bd      	mov	sp, r7
 8006098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609c:	4770      	bx	lr
 800609e:	bf00      	nop
 80060a0:	a0000140 	.word	0xa0000140

080060a4 <FMC_SetAutoRefresh_Number>:
  * @brief  Sets the Number of consecutive SDRAM Memory auto Refresh commands.
  * @param  FMC_Number: specifies the auto Refresh number.       
  * @retval None
  */
void FMC_SetAutoRefresh_Number(uint32_t FMC_Number)
{
 80060a4:	b480      	push	{r7}
 80060a6:	b083      	sub	sp, #12
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	6078      	str	r0, [r7, #4]
  /* check the parameters */
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(FMC_Number));
  
  FMC_Bank5_6->SDCMR |= (FMC_Number << 5);   
 80060ac:	4b06      	ldr	r3, [pc, #24]	; (80060c8 <FMC_SetAutoRefresh_Number+0x24>)
 80060ae:	691a      	ldr	r2, [r3, #16]
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	015b      	lsls	r3, r3, #5
 80060b4:	4904      	ldr	r1, [pc, #16]	; (80060c8 <FMC_SetAutoRefresh_Number+0x24>)
 80060b6:	4313      	orrs	r3, r2
 80060b8:	610b      	str	r3, [r1, #16]
}
 80060ba:	bf00      	nop
 80060bc:	370c      	adds	r7, #12
 80060be:	46bd      	mov	sp, r7
 80060c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c4:	4770      	bx	lr
 80060c6:	bf00      	nop
 80060c8:	a0000140 	.word	0xa0000140

080060cc <FMC_SDRAMWriteProtectionConfig>:
  * @param  NewState: new state of the write protection flag.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void FMC_SDRAMWriteProtectionConfig(uint32_t SDRAM_Bank, FunctionalState NewState)
{
 80060cc:	b480      	push	{r7}
 80060ce:	b083      	sub	sp, #12
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
 80060d4:	460b      	mov	r3, r1
 80060d6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameter */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_FMC_SDRAM_BANK(SDRAM_Bank));
  
  if (NewState != DISABLE)
 80060d8:	78fb      	ldrb	r3, [r7, #3]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d00a      	beq.n	80060f4 <FMC_SDRAMWriteProtectionConfig+0x28>
  {
    FMC_Bank5_6->SDCR[SDRAM_Bank] |= FMC_Write_Protection_Enable;    
 80060de:	4a0e      	ldr	r2, [pc, #56]	; (8006118 <FMC_SDRAMWriteProtectionConfig+0x4c>)
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80060e6:	490c      	ldr	r1, [pc, #48]	; (8006118 <FMC_SDRAMWriteProtectionConfig+0x4c>)
 80060e8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  else
  {
    FMC_Bank5_6->SDCR[SDRAM_Bank] &= SDCR_WriteProtection_RESET;
  } 
  
}
 80060f2:	e00a      	b.n	800610a <FMC_SDRAMWriteProtectionConfig+0x3e>
    FMC_Bank5_6->SDCR[SDRAM_Bank] &= SDCR_WriteProtection_RESET;
 80060f4:	4a08      	ldr	r2, [pc, #32]	; (8006118 <FMC_SDRAMWriteProtectionConfig+0x4c>)
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80060fc:	4906      	ldr	r1, [pc, #24]	; (8006118 <FMC_SDRAMWriteProtectionConfig+0x4c>)
 80060fe:	f647 53ff 	movw	r3, #32255	; 0x7dff
 8006102:	4013      	ands	r3, r2
 8006104:	687a      	ldr	r2, [r7, #4]
 8006106:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
}
 800610a:	bf00      	nop
 800610c:	370c      	adds	r7, #12
 800610e:	46bd      	mov	sp, r7
 8006110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006114:	4770      	bx	lr
 8006116:	bf00      	nop
 8006118:	a0000140 	.word	0xa0000140

0800611c <FMC_ITConfig>:
  * @param  NewState: new state of the specified FMC interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void FMC_ITConfig(uint32_t FMC_Bank, uint32_t FMC_IT, FunctionalState NewState)
{
 800611c:	b480      	push	{r7}
 800611e:	b085      	sub	sp, #20
 8006120:	af00      	add	r7, sp, #0
 8006122:	60f8      	str	r0, [r7, #12]
 8006124:	60b9      	str	r1, [r7, #8]
 8006126:	4613      	mov	r3, r2
 8006128:	71fb      	strb	r3, [r7, #7]
  assert_param(IS_FMC_IT_BANK(FMC_Bank));
  assert_param(IS_FMC_IT(FMC_IT));	
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800612a:	79fb      	ldrb	r3, [r7, #7]
 800612c:	2b00      	cmp	r3, #0
 800612e:	d026      	beq.n	800617e <FMC_ITConfig+0x62>
  {
    /* Enable the selected FMC_Bank2 interrupts */
    if(FMC_Bank == FMC_Bank2_NAND)
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	2b10      	cmp	r3, #16
 8006134:	d106      	bne.n	8006144 <FMC_ITConfig+0x28>
    {
      FMC_Bank2->SR2 |= FMC_IT;
 8006136:	4b2a      	ldr	r3, [pc, #168]	; (80061e0 <FMC_ITConfig+0xc4>)
 8006138:	685a      	ldr	r2, [r3, #4]
 800613a:	4929      	ldr	r1, [pc, #164]	; (80061e0 <FMC_ITConfig+0xc4>)
 800613c:	68bb      	ldr	r3, [r7, #8]
 800613e:	4313      	orrs	r3, r2
 8006140:	604b      	str	r3, [r1, #4]
    {
      /* Disables the interrupt if the refresh error flag is not set */
      FMC_Bank5_6->SDRTR &= (uint32_t)~FMC_IT; 
    }
  }
}
 8006142:	e046      	b.n	80061d2 <FMC_ITConfig+0xb6>
    else if (FMC_Bank == FMC_Bank3_NAND)
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800614a:	d106      	bne.n	800615a <FMC_ITConfig+0x3e>
      FMC_Bank3->SR3 |= FMC_IT;
 800614c:	4b25      	ldr	r3, [pc, #148]	; (80061e4 <FMC_ITConfig+0xc8>)
 800614e:	685a      	ldr	r2, [r3, #4]
 8006150:	4924      	ldr	r1, [pc, #144]	; (80061e4 <FMC_ITConfig+0xc8>)
 8006152:	68bb      	ldr	r3, [r7, #8]
 8006154:	4313      	orrs	r3, r2
 8006156:	604b      	str	r3, [r1, #4]
}
 8006158:	e03b      	b.n	80061d2 <FMC_ITConfig+0xb6>
    else if (FMC_Bank == FMC_Bank4_PCCARD)
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006160:	d106      	bne.n	8006170 <FMC_ITConfig+0x54>
      FMC_Bank4->SR4 |= FMC_IT;    
 8006162:	4b21      	ldr	r3, [pc, #132]	; (80061e8 <FMC_ITConfig+0xcc>)
 8006164:	685a      	ldr	r2, [r3, #4]
 8006166:	4920      	ldr	r1, [pc, #128]	; (80061e8 <FMC_ITConfig+0xcc>)
 8006168:	68bb      	ldr	r3, [r7, #8]
 800616a:	4313      	orrs	r3, r2
 800616c:	604b      	str	r3, [r1, #4]
}
 800616e:	e030      	b.n	80061d2 <FMC_ITConfig+0xb6>
      FMC_Bank5_6->SDRTR |= FMC_IT; 
 8006170:	4b1e      	ldr	r3, [pc, #120]	; (80061ec <FMC_ITConfig+0xd0>)
 8006172:	695a      	ldr	r2, [r3, #20]
 8006174:	491d      	ldr	r1, [pc, #116]	; (80061ec <FMC_ITConfig+0xd0>)
 8006176:	68bb      	ldr	r3, [r7, #8]
 8006178:	4313      	orrs	r3, r2
 800617a:	614b      	str	r3, [r1, #20]
}
 800617c:	e029      	b.n	80061d2 <FMC_ITConfig+0xb6>
    if(FMC_Bank == FMC_Bank2_NAND)
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	2b10      	cmp	r3, #16
 8006182:	d107      	bne.n	8006194 <FMC_ITConfig+0x78>
      FMC_Bank2->SR2 &= (uint32_t)~FMC_IT;
 8006184:	4b16      	ldr	r3, [pc, #88]	; (80061e0 <FMC_ITConfig+0xc4>)
 8006186:	685a      	ldr	r2, [r3, #4]
 8006188:	68bb      	ldr	r3, [r7, #8]
 800618a:	43db      	mvns	r3, r3
 800618c:	4914      	ldr	r1, [pc, #80]	; (80061e0 <FMC_ITConfig+0xc4>)
 800618e:	4013      	ands	r3, r2
 8006190:	604b      	str	r3, [r1, #4]
}
 8006192:	e01e      	b.n	80061d2 <FMC_ITConfig+0xb6>
    else if (FMC_Bank == FMC_Bank3_NAND)
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800619a:	d107      	bne.n	80061ac <FMC_ITConfig+0x90>
      FMC_Bank3->SR3 &= (uint32_t)~FMC_IT;
 800619c:	4b11      	ldr	r3, [pc, #68]	; (80061e4 <FMC_ITConfig+0xc8>)
 800619e:	685a      	ldr	r2, [r3, #4]
 80061a0:	68bb      	ldr	r3, [r7, #8]
 80061a2:	43db      	mvns	r3, r3
 80061a4:	490f      	ldr	r1, [pc, #60]	; (80061e4 <FMC_ITConfig+0xc8>)
 80061a6:	4013      	ands	r3, r2
 80061a8:	604b      	str	r3, [r1, #4]
}
 80061aa:	e012      	b.n	80061d2 <FMC_ITConfig+0xb6>
    else if(FMC_Bank == FMC_Bank4_PCCARD)
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061b2:	d107      	bne.n	80061c4 <FMC_ITConfig+0xa8>
      FMC_Bank4->SR4 &= (uint32_t)~FMC_IT;    
 80061b4:	4b0c      	ldr	r3, [pc, #48]	; (80061e8 <FMC_ITConfig+0xcc>)
 80061b6:	685a      	ldr	r2, [r3, #4]
 80061b8:	68bb      	ldr	r3, [r7, #8]
 80061ba:	43db      	mvns	r3, r3
 80061bc:	490a      	ldr	r1, [pc, #40]	; (80061e8 <FMC_ITConfig+0xcc>)
 80061be:	4013      	ands	r3, r2
 80061c0:	604b      	str	r3, [r1, #4]
}
 80061c2:	e006      	b.n	80061d2 <FMC_ITConfig+0xb6>
      FMC_Bank5_6->SDRTR &= (uint32_t)~FMC_IT; 
 80061c4:	4b09      	ldr	r3, [pc, #36]	; (80061ec <FMC_ITConfig+0xd0>)
 80061c6:	695a      	ldr	r2, [r3, #20]
 80061c8:	68bb      	ldr	r3, [r7, #8]
 80061ca:	43db      	mvns	r3, r3
 80061cc:	4907      	ldr	r1, [pc, #28]	; (80061ec <FMC_ITConfig+0xd0>)
 80061ce:	4013      	ands	r3, r2
 80061d0:	614b      	str	r3, [r1, #20]
}
 80061d2:	bf00      	nop
 80061d4:	3714      	adds	r7, #20
 80061d6:	46bd      	mov	sp, r7
 80061d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061dc:	4770      	bx	lr
 80061de:	bf00      	nop
 80061e0:	a0000060 	.word	0xa0000060
 80061e4:	a0000080 	.word	0xa0000080
 80061e8:	a00000a0 	.word	0xa00000a0
 80061ec:	a0000140 	.word	0xa0000140

080061f0 <FMC_GetFlagStatus>:
  *            @arg FMC_FLAG_Refresh: Refresh error Flag.
  *            @arg FMC_FLAG_Busy: Busy status Flag.     
  * @retval The new state of FMC_FLAG (SET or RESET).
  */
FlagStatus FMC_GetFlagStatus(uint32_t FMC_Bank, uint32_t FMC_FLAG)
{
 80061f0:	b480      	push	{r7}
 80061f2:	b085      	sub	sp, #20
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	6078      	str	r0, [r7, #4]
 80061f8:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 80061fa:	2300      	movs	r3, #0
 80061fc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsr = 0x00000000;
 80061fe:	2300      	movs	r3, #0
 8006200:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_FMC_GETFLAG_BANK(FMC_Bank));
  assert_param(IS_FMC_GET_FLAG(FMC_FLAG));
  
  if(FMC_Bank == FMC_Bank2_NAND)
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	2b10      	cmp	r3, #16
 8006206:	d103      	bne.n	8006210 <FMC_GetFlagStatus+0x20>
  {
    tmpsr = FMC_Bank2->SR2;
 8006208:	4b14      	ldr	r3, [pc, #80]	; (800625c <FMC_GetFlagStatus+0x6c>)
 800620a:	685b      	ldr	r3, [r3, #4]
 800620c:	60bb      	str	r3, [r7, #8]
 800620e:	e012      	b.n	8006236 <FMC_GetFlagStatus+0x46>
  }  
  else if(FMC_Bank == FMC_Bank3_NAND)
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006216:	d103      	bne.n	8006220 <FMC_GetFlagStatus+0x30>
  {
    tmpsr = FMC_Bank3->SR3;
 8006218:	4b11      	ldr	r3, [pc, #68]	; (8006260 <FMC_GetFlagStatus+0x70>)
 800621a:	685b      	ldr	r3, [r3, #4]
 800621c:	60bb      	str	r3, [r7, #8]
 800621e:	e00a      	b.n	8006236 <FMC_GetFlagStatus+0x46>
  }
  else if(FMC_Bank == FMC_Bank4_PCCARD)
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006226:	d103      	bne.n	8006230 <FMC_GetFlagStatus+0x40>
  {
    tmpsr = FMC_Bank4->SR4;
 8006228:	4b0e      	ldr	r3, [pc, #56]	; (8006264 <FMC_GetFlagStatus+0x74>)
 800622a:	685b      	ldr	r3, [r3, #4]
 800622c:	60bb      	str	r3, [r7, #8]
 800622e:	e002      	b.n	8006236 <FMC_GetFlagStatus+0x46>
  }
  else 
  {
    tmpsr = FMC_Bank5_6->SDSR;
 8006230:	4b0d      	ldr	r3, [pc, #52]	; (8006268 <FMC_GetFlagStatus+0x78>)
 8006232:	699b      	ldr	r3, [r3, #24]
 8006234:	60bb      	str	r3, [r7, #8]
  }
  
  /* Get the flag status */
  if ((tmpsr & FMC_FLAG) != FMC_FLAG )
 8006236:	68ba      	ldr	r2, [r7, #8]
 8006238:	683b      	ldr	r3, [r7, #0]
 800623a:	4013      	ands	r3, r2
 800623c:	683a      	ldr	r2, [r7, #0]
 800623e:	429a      	cmp	r2, r3
 8006240:	d002      	beq.n	8006248 <FMC_GetFlagStatus+0x58>
  {
    bitstatus = RESET;
 8006242:	2300      	movs	r3, #0
 8006244:	73fb      	strb	r3, [r7, #15]
 8006246:	e001      	b.n	800624c <FMC_GetFlagStatus+0x5c>
  }
  else
  {
    bitstatus = SET;
 8006248:	2301      	movs	r3, #1
 800624a:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the flag status */
  return bitstatus;
 800624c:	7bfb      	ldrb	r3, [r7, #15]
}
 800624e:	4618      	mov	r0, r3
 8006250:	3714      	adds	r7, #20
 8006252:	46bd      	mov	sp, r7
 8006254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006258:	4770      	bx	lr
 800625a:	bf00      	nop
 800625c:	a0000060 	.word	0xa0000060
 8006260:	a0000080 	.word	0xa0000080
 8006264:	a00000a0 	.word	0xa00000a0
 8006268:	a0000140 	.word	0xa0000140

0800626c <FMC_ClearFlag>:
  *            @arg FMC_FLAG_FallingEdge: Falling edge detection Flag.
  *            @arg FMC_FLAG_Refresh: Refresh error Flag.  
  * @retval None
  */
void FMC_ClearFlag(uint32_t FMC_Bank, uint32_t FMC_FLAG)
{
 800626c:	b480      	push	{r7}
 800626e:	b083      	sub	sp, #12
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
 8006274:	6039      	str	r1, [r7, #0]
 /* Check the parameters */
  assert_param(IS_FMC_GETFLAG_BANK(FMC_Bank));
  assert_param(IS_FMC_CLEAR_FLAG(FMC_FLAG)) ;
    
  if(FMC_Bank == FMC_Bank2_NAND)
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	2b10      	cmp	r3, #16
 800627a:	d107      	bne.n	800628c <FMC_ClearFlag+0x20>
  {
    FMC_Bank2->SR2 &= (~FMC_FLAG); 
 800627c:	4b16      	ldr	r3, [pc, #88]	; (80062d8 <FMC_ClearFlag+0x6c>)
 800627e:	685a      	ldr	r2, [r3, #4]
 8006280:	683b      	ldr	r3, [r7, #0]
 8006282:	43db      	mvns	r3, r3
 8006284:	4914      	ldr	r1, [pc, #80]	; (80062d8 <FMC_ClearFlag+0x6c>)
 8006286:	4013      	ands	r3, r2
 8006288:	604b      	str	r3, [r1, #4]
  else
  {
    FMC_Bank5_6->SDRTR &= (~FMC_FLAG);
  }
  
}
 800628a:	e01e      	b.n	80062ca <FMC_ClearFlag+0x5e>
  else if(FMC_Bank == FMC_Bank3_NAND)
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006292:	d107      	bne.n	80062a4 <FMC_ClearFlag+0x38>
    FMC_Bank3->SR3 &= (~FMC_FLAG);
 8006294:	4b11      	ldr	r3, [pc, #68]	; (80062dc <FMC_ClearFlag+0x70>)
 8006296:	685a      	ldr	r2, [r3, #4]
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	43db      	mvns	r3, r3
 800629c:	490f      	ldr	r1, [pc, #60]	; (80062dc <FMC_ClearFlag+0x70>)
 800629e:	4013      	ands	r3, r2
 80062a0:	604b      	str	r3, [r1, #4]
}
 80062a2:	e012      	b.n	80062ca <FMC_ClearFlag+0x5e>
  else if(FMC_Bank == FMC_Bank4_PCCARD)
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062aa:	d107      	bne.n	80062bc <FMC_ClearFlag+0x50>
    FMC_Bank4->SR4 &= (~FMC_FLAG);
 80062ac:	4b0c      	ldr	r3, [pc, #48]	; (80062e0 <FMC_ClearFlag+0x74>)
 80062ae:	685a      	ldr	r2, [r3, #4]
 80062b0:	683b      	ldr	r3, [r7, #0]
 80062b2:	43db      	mvns	r3, r3
 80062b4:	490a      	ldr	r1, [pc, #40]	; (80062e0 <FMC_ClearFlag+0x74>)
 80062b6:	4013      	ands	r3, r2
 80062b8:	604b      	str	r3, [r1, #4]
}
 80062ba:	e006      	b.n	80062ca <FMC_ClearFlag+0x5e>
    FMC_Bank5_6->SDRTR &= (~FMC_FLAG);
 80062bc:	4b09      	ldr	r3, [pc, #36]	; (80062e4 <FMC_ClearFlag+0x78>)
 80062be:	695a      	ldr	r2, [r3, #20]
 80062c0:	683b      	ldr	r3, [r7, #0]
 80062c2:	43db      	mvns	r3, r3
 80062c4:	4907      	ldr	r1, [pc, #28]	; (80062e4 <FMC_ClearFlag+0x78>)
 80062c6:	4013      	ands	r3, r2
 80062c8:	614b      	str	r3, [r1, #20]
}
 80062ca:	bf00      	nop
 80062cc:	370c      	adds	r7, #12
 80062ce:	46bd      	mov	sp, r7
 80062d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d4:	4770      	bx	lr
 80062d6:	bf00      	nop
 80062d8:	a0000060 	.word	0xa0000060
 80062dc:	a0000080 	.word	0xa0000080
 80062e0:	a00000a0 	.word	0xa00000a0
 80062e4:	a0000140 	.word	0xa0000140

080062e8 <FMC_GetITStatus>:
  *            @arg FMC_IT_FallingEdge: Falling edge detection interrupt.
  *            @arg FMC_IT_Refresh: Refresh error detection interrupt.    
  * @retval The new state of FMC_IT (SET or RESET).
  */
ITStatus FMC_GetITStatus(uint32_t FMC_Bank, uint32_t FMC_IT)
{
 80062e8:	b480      	push	{r7}
 80062ea:	b089      	sub	sp, #36	; 0x24
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
 80062f0:	6039      	str	r1, [r7, #0]
  ITStatus bitstatus = RESET;
 80062f2:	2300      	movs	r3, #0
 80062f4:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpsr = 0x0;
 80062f6:	2300      	movs	r3, #0
 80062f8:	61bb      	str	r3, [r7, #24]
  uint32_t tmpsr2 = 0x0;
 80062fa:	2300      	movs	r3, #0
 80062fc:	617b      	str	r3, [r7, #20]
  uint32_t itstatus = 0x0;
 80062fe:	2300      	movs	r3, #0
 8006300:	613b      	str	r3, [r7, #16]
  uint32_t itenable = 0x0; 
 8006302:	2300      	movs	r3, #0
 8006304:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_FMC_IT_BANK(FMC_Bank));
  assert_param(IS_FMC_GET_IT(FMC_IT));
  
  if(FMC_Bank == FMC_Bank2_NAND)
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	2b10      	cmp	r3, #16
 800630a:	d103      	bne.n	8006314 <FMC_GetITStatus+0x2c>
  {
    tmpsr = FMC_Bank2->SR2;
 800630c:	4b1f      	ldr	r3, [pc, #124]	; (800638c <FMC_GetITStatus+0xa4>)
 800630e:	685b      	ldr	r3, [r3, #4]
 8006310:	61bb      	str	r3, [r7, #24]
 8006312:	e015      	b.n	8006340 <FMC_GetITStatus+0x58>
  }  
  else if(FMC_Bank == FMC_Bank3_NAND)
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800631a:	d103      	bne.n	8006324 <FMC_GetITStatus+0x3c>
  {
    tmpsr = FMC_Bank3->SR3;
 800631c:	4b1c      	ldr	r3, [pc, #112]	; (8006390 <FMC_GetITStatus+0xa8>)
 800631e:	685b      	ldr	r3, [r3, #4]
 8006320:	61bb      	str	r3, [r7, #24]
 8006322:	e00d      	b.n	8006340 <FMC_GetITStatus+0x58>
  }
  else if(FMC_Bank == FMC_Bank4_PCCARD)
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800632a:	d103      	bne.n	8006334 <FMC_GetITStatus+0x4c>
  {
    tmpsr = FMC_Bank4->SR4;
 800632c:	4b19      	ldr	r3, [pc, #100]	; (8006394 <FMC_GetITStatus+0xac>)
 800632e:	685b      	ldr	r3, [r3, #4]
 8006330:	61bb      	str	r3, [r7, #24]
 8006332:	e005      	b.n	8006340 <FMC_GetITStatus+0x58>
  }
  /* FMC_Bank5_6 SDRAM*/
  else
  {
    tmpsr = FMC_Bank5_6->SDRTR;
 8006334:	4b18      	ldr	r3, [pc, #96]	; (8006398 <FMC_GetITStatus+0xb0>)
 8006336:	695b      	ldr	r3, [r3, #20]
 8006338:	61bb      	str	r3, [r7, #24]
    tmpsr2 = FMC_Bank5_6->SDSR;
 800633a:	4b17      	ldr	r3, [pc, #92]	; (8006398 <FMC_GetITStatus+0xb0>)
 800633c:	699b      	ldr	r3, [r3, #24]
 800633e:	617b      	str	r3, [r7, #20]
  } 
  
  /* get the IT enable bit status*/
  itenable = tmpsr & FMC_IT;
 8006340:	69ba      	ldr	r2, [r7, #24]
 8006342:	683b      	ldr	r3, [r7, #0]
 8006344:	4013      	ands	r3, r2
 8006346:	60fb      	str	r3, [r7, #12]
  
  /* get the corresponding IT Flag status*/
  if((FMC_Bank == FMC_Bank1_SDRAM) || (FMC_Bank == FMC_Bank2_SDRAM))
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2b00      	cmp	r3, #0
 800634c:	d002      	beq.n	8006354 <FMC_GetITStatus+0x6c>
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	2b01      	cmp	r3, #1
 8006352:	d104      	bne.n	800635e <FMC_GetITStatus+0x76>
  {
    itstatus = tmpsr2 & FMC_SDSR_RE;  
 8006354:	697b      	ldr	r3, [r7, #20]
 8006356:	f003 0301 	and.w	r3, r3, #1
 800635a:	613b      	str	r3, [r7, #16]
 800635c:	e004      	b.n	8006368 <FMC_GetITStatus+0x80>
  }           
  else
  {
    itstatus = tmpsr & (FMC_IT >> 3);  
 800635e:	683b      	ldr	r3, [r7, #0]
 8006360:	08db      	lsrs	r3, r3, #3
 8006362:	69ba      	ldr	r2, [r7, #24]
 8006364:	4013      	ands	r3, r2
 8006366:	613b      	str	r3, [r7, #16]
  }  
  
  if ((itstatus != (uint32_t)RESET)  && (itenable != (uint32_t)RESET))
 8006368:	693b      	ldr	r3, [r7, #16]
 800636a:	2b00      	cmp	r3, #0
 800636c:	d005      	beq.n	800637a <FMC_GetITStatus+0x92>
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	2b00      	cmp	r3, #0
 8006372:	d002      	beq.n	800637a <FMC_GetITStatus+0x92>
  {
    bitstatus = SET;
 8006374:	2301      	movs	r3, #1
 8006376:	77fb      	strb	r3, [r7, #31]
 8006378:	e001      	b.n	800637e <FMC_GetITStatus+0x96>
  }
  else
  {
    bitstatus = RESET;
 800637a:	2300      	movs	r3, #0
 800637c:	77fb      	strb	r3, [r7, #31]
  }
  return bitstatus; 
 800637e:	7ffb      	ldrb	r3, [r7, #31]
}
 8006380:	4618      	mov	r0, r3
 8006382:	3724      	adds	r7, #36	; 0x24
 8006384:	46bd      	mov	sp, r7
 8006386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638a:	4770      	bx	lr
 800638c:	a0000060 	.word	0xa0000060
 8006390:	a0000080 	.word	0xa0000080
 8006394:	a00000a0 	.word	0xa00000a0
 8006398:	a0000140 	.word	0xa0000140

0800639c <FMC_ClearITPendingBit>:
  *            @arg FMC_IT_FallingEdge: Falling edge detection interrupt.
  *            @arg FMC_IT_Refresh: Refresh error detection interrupt.  
  * @retval None
  */
void FMC_ClearITPendingBit(uint32_t FMC_Bank, uint32_t FMC_IT)
{
 800639c:	b480      	push	{r7}
 800639e:	b083      	sub	sp, #12
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
 80063a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_IT_BANK(FMC_Bank));
  assert_param(IS_FMC_IT(FMC_IT));
    
  if(FMC_Bank == FMC_Bank2_NAND)
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	2b10      	cmp	r3, #16
 80063aa:	d108      	bne.n	80063be <FMC_ClearITPendingBit+0x22>
  {
    FMC_Bank2->SR2 &= ~(FMC_IT >> 3); 
 80063ac:	4b17      	ldr	r3, [pc, #92]	; (800640c <FMC_ClearITPendingBit+0x70>)
 80063ae:	685a      	ldr	r2, [r3, #4]
 80063b0:	683b      	ldr	r3, [r7, #0]
 80063b2:	08db      	lsrs	r3, r3, #3
 80063b4:	43db      	mvns	r3, r3
 80063b6:	4915      	ldr	r1, [pc, #84]	; (800640c <FMC_ClearITPendingBit+0x70>)
 80063b8:	4013      	ands	r3, r2
 80063ba:	604b      	str	r3, [r1, #4]
  /* FMC_Bank5_6 SDRAM*/
  else
  {
    FMC_Bank5_6->SDRTR |= FMC_SDRTR_CRE;
  }
}
 80063bc:	e01f      	b.n	80063fe <FMC_ClearITPendingBit+0x62>
  else if(FMC_Bank == FMC_Bank3_NAND)
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80063c4:	d108      	bne.n	80063d8 <FMC_ClearITPendingBit+0x3c>
    FMC_Bank3->SR3 &= ~(FMC_IT >> 3);
 80063c6:	4b12      	ldr	r3, [pc, #72]	; (8006410 <FMC_ClearITPendingBit+0x74>)
 80063c8:	685a      	ldr	r2, [r3, #4]
 80063ca:	683b      	ldr	r3, [r7, #0]
 80063cc:	08db      	lsrs	r3, r3, #3
 80063ce:	43db      	mvns	r3, r3
 80063d0:	490f      	ldr	r1, [pc, #60]	; (8006410 <FMC_ClearITPendingBit+0x74>)
 80063d2:	4013      	ands	r3, r2
 80063d4:	604b      	str	r3, [r1, #4]
}
 80063d6:	e012      	b.n	80063fe <FMC_ClearITPendingBit+0x62>
  else if(FMC_Bank == FMC_Bank4_PCCARD)
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063de:	d108      	bne.n	80063f2 <FMC_ClearITPendingBit+0x56>
    FMC_Bank4->SR4 &= ~(FMC_IT >> 3);
 80063e0:	4b0c      	ldr	r3, [pc, #48]	; (8006414 <FMC_ClearITPendingBit+0x78>)
 80063e2:	685a      	ldr	r2, [r3, #4]
 80063e4:	683b      	ldr	r3, [r7, #0]
 80063e6:	08db      	lsrs	r3, r3, #3
 80063e8:	43db      	mvns	r3, r3
 80063ea:	490a      	ldr	r1, [pc, #40]	; (8006414 <FMC_ClearITPendingBit+0x78>)
 80063ec:	4013      	ands	r3, r2
 80063ee:	604b      	str	r3, [r1, #4]
}
 80063f0:	e005      	b.n	80063fe <FMC_ClearITPendingBit+0x62>
    FMC_Bank5_6->SDRTR |= FMC_SDRTR_CRE;
 80063f2:	4b09      	ldr	r3, [pc, #36]	; (8006418 <FMC_ClearITPendingBit+0x7c>)
 80063f4:	695b      	ldr	r3, [r3, #20]
 80063f6:	4a08      	ldr	r2, [pc, #32]	; (8006418 <FMC_ClearITPendingBit+0x7c>)
 80063f8:	f043 0301 	orr.w	r3, r3, #1
 80063fc:	6153      	str	r3, [r2, #20]
}
 80063fe:	bf00      	nop
 8006400:	370c      	adds	r7, #12
 8006402:	46bd      	mov	sp, r7
 8006404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006408:	4770      	bx	lr
 800640a:	bf00      	nop
 800640c:	a0000060 	.word	0xa0000060
 8006410:	a0000080 	.word	0xa0000080
 8006414:	a00000a0 	.word	0xa00000a0
 8006418:	a0000140 	.word	0xa0000140

0800641c <GPIO_DeInit>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F42xxx/43xxx devices.
  *                      x can be (A, B, C, D and H) to select the GPIO peripheral for STM32F401xx devices.  
  * @retval None
  */
void GPIO_DeInit(GPIO_TypeDef* GPIOx)
{
 800641c:	b580      	push	{r7, lr}
 800641e:	b082      	sub	sp, #8
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  if (GPIOx == GPIOA)
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	4a4b      	ldr	r2, [pc, #300]	; (8006554 <GPIO_DeInit+0x138>)
 8006428:	4293      	cmp	r3, r2
 800642a:	d108      	bne.n	800643e <GPIO_DeInit+0x22>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 800642c:	2101      	movs	r1, #1
 800642e:	2001      	movs	r0, #1
 8006430:	f002 fb16 	bl	8008a60 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, DISABLE);
 8006434:	2100      	movs	r1, #0
 8006436:	2001      	movs	r0, #1
 8006438:	f002 fb12 	bl	8008a60 <RCC_AHB1PeriphResetCmd>
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, DISABLE);
    }
  }
}
 800643c:	e086      	b.n	800654c <GPIO_DeInit+0x130>
  else if (GPIOx == GPIOB)
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	4a45      	ldr	r2, [pc, #276]	; (8006558 <GPIO_DeInit+0x13c>)
 8006442:	4293      	cmp	r3, r2
 8006444:	d108      	bne.n	8006458 <GPIO_DeInit+0x3c>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 8006446:	2101      	movs	r1, #1
 8006448:	2002      	movs	r0, #2
 800644a:	f002 fb09 	bl	8008a60 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, DISABLE);
 800644e:	2100      	movs	r1, #0
 8006450:	2002      	movs	r0, #2
 8006452:	f002 fb05 	bl	8008a60 <RCC_AHB1PeriphResetCmd>
}
 8006456:	e079      	b.n	800654c <GPIO_DeInit+0x130>
  else if (GPIOx == GPIOC)
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	4a40      	ldr	r2, [pc, #256]	; (800655c <GPIO_DeInit+0x140>)
 800645c:	4293      	cmp	r3, r2
 800645e:	d108      	bne.n	8006472 <GPIO_DeInit+0x56>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, ENABLE);
 8006460:	2101      	movs	r1, #1
 8006462:	2004      	movs	r0, #4
 8006464:	f002 fafc 	bl	8008a60 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, DISABLE);
 8006468:	2100      	movs	r1, #0
 800646a:	2004      	movs	r0, #4
 800646c:	f002 faf8 	bl	8008a60 <RCC_AHB1PeriphResetCmd>
}
 8006470:	e06c      	b.n	800654c <GPIO_DeInit+0x130>
  else if (GPIOx == GPIOD)
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	4a3a      	ldr	r2, [pc, #232]	; (8006560 <GPIO_DeInit+0x144>)
 8006476:	4293      	cmp	r3, r2
 8006478:	d108      	bne.n	800648c <GPIO_DeInit+0x70>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, ENABLE);
 800647a:	2101      	movs	r1, #1
 800647c:	2008      	movs	r0, #8
 800647e:	f002 faef 	bl	8008a60 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, DISABLE);
 8006482:	2100      	movs	r1, #0
 8006484:	2008      	movs	r0, #8
 8006486:	f002 faeb 	bl	8008a60 <RCC_AHB1PeriphResetCmd>
}
 800648a:	e05f      	b.n	800654c <GPIO_DeInit+0x130>
  else if (GPIOx == GPIOE)
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	4a35      	ldr	r2, [pc, #212]	; (8006564 <GPIO_DeInit+0x148>)
 8006490:	4293      	cmp	r3, r2
 8006492:	d108      	bne.n	80064a6 <GPIO_DeInit+0x8a>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, ENABLE);
 8006494:	2101      	movs	r1, #1
 8006496:	2010      	movs	r0, #16
 8006498:	f002 fae2 	bl	8008a60 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, DISABLE);
 800649c:	2100      	movs	r1, #0
 800649e:	2010      	movs	r0, #16
 80064a0:	f002 fade 	bl	8008a60 <RCC_AHB1PeriphResetCmd>
}
 80064a4:	e052      	b.n	800654c <GPIO_DeInit+0x130>
  else if (GPIOx == GPIOF)
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	4a2f      	ldr	r2, [pc, #188]	; (8006568 <GPIO_DeInit+0x14c>)
 80064aa:	4293      	cmp	r3, r2
 80064ac:	d108      	bne.n	80064c0 <GPIO_DeInit+0xa4>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, ENABLE);
 80064ae:	2101      	movs	r1, #1
 80064b0:	2020      	movs	r0, #32
 80064b2:	f002 fad5 	bl	8008a60 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, DISABLE);
 80064b6:	2100      	movs	r1, #0
 80064b8:	2020      	movs	r0, #32
 80064ba:	f002 fad1 	bl	8008a60 <RCC_AHB1PeriphResetCmd>
}
 80064be:	e045      	b.n	800654c <GPIO_DeInit+0x130>
  else if (GPIOx == GPIOG)
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	4a2a      	ldr	r2, [pc, #168]	; (800656c <GPIO_DeInit+0x150>)
 80064c4:	4293      	cmp	r3, r2
 80064c6:	d108      	bne.n	80064da <GPIO_DeInit+0xbe>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, ENABLE);
 80064c8:	2101      	movs	r1, #1
 80064ca:	2040      	movs	r0, #64	; 0x40
 80064cc:	f002 fac8 	bl	8008a60 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, DISABLE);
 80064d0:	2100      	movs	r1, #0
 80064d2:	2040      	movs	r0, #64	; 0x40
 80064d4:	f002 fac4 	bl	8008a60 <RCC_AHB1PeriphResetCmd>
}
 80064d8:	e038      	b.n	800654c <GPIO_DeInit+0x130>
  else if (GPIOx == GPIOH)
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	4a24      	ldr	r2, [pc, #144]	; (8006570 <GPIO_DeInit+0x154>)
 80064de:	4293      	cmp	r3, r2
 80064e0:	d108      	bne.n	80064f4 <GPIO_DeInit+0xd8>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, ENABLE);
 80064e2:	2101      	movs	r1, #1
 80064e4:	2080      	movs	r0, #128	; 0x80
 80064e6:	f002 fabb 	bl	8008a60 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, DISABLE);
 80064ea:	2100      	movs	r1, #0
 80064ec:	2080      	movs	r0, #128	; 0x80
 80064ee:	f002 fab7 	bl	8008a60 <RCC_AHB1PeriphResetCmd>
}
 80064f2:	e02b      	b.n	800654c <GPIO_DeInit+0x130>
  else if (GPIOx == GPIOI)
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	4a1f      	ldr	r2, [pc, #124]	; (8006574 <GPIO_DeInit+0x158>)
 80064f8:	4293      	cmp	r3, r2
 80064fa:	d10a      	bne.n	8006512 <GPIO_DeInit+0xf6>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
 80064fc:	2101      	movs	r1, #1
 80064fe:	f44f 7080 	mov.w	r0, #256	; 0x100
 8006502:	f002 faad 	bl	8008a60 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
 8006506:	2100      	movs	r1, #0
 8006508:	f44f 7080 	mov.w	r0, #256	; 0x100
 800650c:	f002 faa8 	bl	8008a60 <RCC_AHB1PeriphResetCmd>
}
 8006510:	e01c      	b.n	800654c <GPIO_DeInit+0x130>
  else if (GPIOx == GPIOJ)
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	4a18      	ldr	r2, [pc, #96]	; (8006578 <GPIO_DeInit+0x15c>)
 8006516:	4293      	cmp	r3, r2
 8006518:	d10a      	bne.n	8006530 <GPIO_DeInit+0x114>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOJ, ENABLE);
 800651a:	2101      	movs	r1, #1
 800651c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8006520:	f002 fa9e 	bl	8008a60 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOJ, DISABLE);
 8006524:	2100      	movs	r1, #0
 8006526:	f44f 7000 	mov.w	r0, #512	; 0x200
 800652a:	f002 fa99 	bl	8008a60 <RCC_AHB1PeriphResetCmd>
}
 800652e:	e00d      	b.n	800654c <GPIO_DeInit+0x130>
    if (GPIOx == GPIOK)
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	4a12      	ldr	r2, [pc, #72]	; (800657c <GPIO_DeInit+0x160>)
 8006534:	4293      	cmp	r3, r2
 8006536:	d109      	bne.n	800654c <GPIO_DeInit+0x130>
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, ENABLE);
 8006538:	2101      	movs	r1, #1
 800653a:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800653e:	f002 fa8f 	bl	8008a60 <RCC_AHB1PeriphResetCmd>
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, DISABLE);
 8006542:	2100      	movs	r1, #0
 8006544:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8006548:	f002 fa8a 	bl	8008a60 <RCC_AHB1PeriphResetCmd>
}
 800654c:	bf00      	nop
 800654e:	3708      	adds	r7, #8
 8006550:	46bd      	mov	sp, r7
 8006552:	bd80      	pop	{r7, pc}
 8006554:	40020000 	.word	0x40020000
 8006558:	40020400 	.word	0x40020400
 800655c:	40020800 	.word	0x40020800
 8006560:	40020c00 	.word	0x40020c00
 8006564:	40021000 	.word	0x40021000
 8006568:	40021400 	.word	0x40021400
 800656c:	40021800 	.word	0x40021800
 8006570:	40021c00 	.word	0x40021c00
 8006574:	40022000 	.word	0x40022000
 8006578:	40022400 	.word	0x40022400
 800657c:	40022800 	.word	0x40022800

08006580 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8006580:	b480      	push	{r7}
 8006582:	b087      	sub	sp, #28
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]
 8006588:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 800658a:	2300      	movs	r3, #0
 800658c:	617b      	str	r3, [r7, #20]
 800658e:	2300      	movs	r3, #0
 8006590:	613b      	str	r3, [r7, #16]
 8006592:	2300      	movs	r3, #0
 8006594:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8006596:	2300      	movs	r3, #0
 8006598:	617b      	str	r3, [r7, #20]
 800659a:	e076      	b.n	800668a <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 800659c:	2201      	movs	r2, #1
 800659e:	697b      	ldr	r3, [r7, #20]
 80065a0:	fa02 f303 	lsl.w	r3, r2, r3
 80065a4:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 80065a6:	683b      	ldr	r3, [r7, #0]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	693a      	ldr	r2, [r7, #16]
 80065ac:	4013      	ands	r3, r2
 80065ae:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 80065b0:	68fa      	ldr	r2, [r7, #12]
 80065b2:	693b      	ldr	r3, [r7, #16]
 80065b4:	429a      	cmp	r2, r3
 80065b6:	d165      	bne.n	8006684 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681a      	ldr	r2, [r3, #0]
 80065bc:	697b      	ldr	r3, [r7, #20]
 80065be:	005b      	lsls	r3, r3, #1
 80065c0:	2103      	movs	r1, #3
 80065c2:	fa01 f303 	lsl.w	r3, r1, r3
 80065c6:	43db      	mvns	r3, r3
 80065c8:	401a      	ands	r2, r3
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681a      	ldr	r2, [r3, #0]
 80065d2:	683b      	ldr	r3, [r7, #0]
 80065d4:	791b      	ldrb	r3, [r3, #4]
 80065d6:	4619      	mov	r1, r3
 80065d8:	697b      	ldr	r3, [r7, #20]
 80065da:	005b      	lsls	r3, r3, #1
 80065dc:	fa01 f303 	lsl.w	r3, r1, r3
 80065e0:	431a      	orrs	r2, r3
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 80065e6:	683b      	ldr	r3, [r7, #0]
 80065e8:	791b      	ldrb	r3, [r3, #4]
 80065ea:	2b01      	cmp	r3, #1
 80065ec:	d003      	beq.n	80065f6 <GPIO_Init+0x76>
 80065ee:	683b      	ldr	r3, [r7, #0]
 80065f0:	791b      	ldrb	r3, [r3, #4]
 80065f2:	2b02      	cmp	r3, #2
 80065f4:	d12e      	bne.n	8006654 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	689a      	ldr	r2, [r3, #8]
 80065fa:	697b      	ldr	r3, [r7, #20]
 80065fc:	005b      	lsls	r3, r3, #1
 80065fe:	2103      	movs	r1, #3
 8006600:	fa01 f303 	lsl.w	r3, r1, r3
 8006604:	43db      	mvns	r3, r3
 8006606:	401a      	ands	r2, r3
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	689a      	ldr	r2, [r3, #8]
 8006610:	683b      	ldr	r3, [r7, #0]
 8006612:	795b      	ldrb	r3, [r3, #5]
 8006614:	4619      	mov	r1, r3
 8006616:	697b      	ldr	r3, [r7, #20]
 8006618:	005b      	lsls	r3, r3, #1
 800661a:	fa01 f303 	lsl.w	r3, r1, r3
 800661e:	431a      	orrs	r2, r3
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	685a      	ldr	r2, [r3, #4]
 8006628:	697b      	ldr	r3, [r7, #20]
 800662a:	b29b      	uxth	r3, r3
 800662c:	4619      	mov	r1, r3
 800662e:	2301      	movs	r3, #1
 8006630:	408b      	lsls	r3, r1
 8006632:	43db      	mvns	r3, r3
 8006634:	401a      	ands	r2, r3
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	685b      	ldr	r3, [r3, #4]
 800663e:	683a      	ldr	r2, [r7, #0]
 8006640:	7992      	ldrb	r2, [r2, #6]
 8006642:	4611      	mov	r1, r2
 8006644:	697a      	ldr	r2, [r7, #20]
 8006646:	b292      	uxth	r2, r2
 8006648:	fa01 f202 	lsl.w	r2, r1, r2
 800664c:	b292      	uxth	r2, r2
 800664e:	431a      	orrs	r2, r3
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	68da      	ldr	r2, [r3, #12]
 8006658:	697b      	ldr	r3, [r7, #20]
 800665a:	b29b      	uxth	r3, r3
 800665c:	005b      	lsls	r3, r3, #1
 800665e:	2103      	movs	r1, #3
 8006660:	fa01 f303 	lsl.w	r3, r1, r3
 8006664:	43db      	mvns	r3, r3
 8006666:	401a      	ands	r2, r3
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	68da      	ldr	r2, [r3, #12]
 8006670:	683b      	ldr	r3, [r7, #0]
 8006672:	79db      	ldrb	r3, [r3, #7]
 8006674:	4619      	mov	r1, r3
 8006676:	697b      	ldr	r3, [r7, #20]
 8006678:	005b      	lsls	r3, r3, #1
 800667a:	fa01 f303 	lsl.w	r3, r1, r3
 800667e:	431a      	orrs	r2, r3
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8006684:	697b      	ldr	r3, [r7, #20]
 8006686:	3301      	adds	r3, #1
 8006688:	617b      	str	r3, [r7, #20]
 800668a:	697b      	ldr	r3, [r7, #20]
 800668c:	2b0f      	cmp	r3, #15
 800668e:	d985      	bls.n	800659c <GPIO_Init+0x1c>
    }
  }
}
 8006690:	bf00      	nop
 8006692:	371c      	adds	r7, #28
 8006694:	46bd      	mov	sp, r7
 8006696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669a:	4770      	bx	lr

0800669c <GPIO_StructInit>:
  * @brief  Fills each GPIO_InitStruct member with its default value.
  * @param  GPIO_InitStruct : pointer to a GPIO_InitTypeDef structure which will be initialized.
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
 800669c:	b480      	push	{r7}
 800669e:	b083      	sub	sp, #12
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80066aa:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2200      	movs	r2, #0
 80066b0:	711a      	strb	r2, [r3, #4]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	2200      	movs	r2, #0
 80066b6:	715a      	strb	r2, [r3, #5]
  GPIO_InitStruct->GPIO_OType = GPIO_OType_PP;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2200      	movs	r2, #0
 80066bc:	719a      	strb	r2, [r3, #6]
  GPIO_InitStruct->GPIO_PuPd = GPIO_PuPd_NOPULL;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	2200      	movs	r2, #0
 80066c2:	71da      	strb	r2, [r3, #7]
}
 80066c4:	bf00      	nop
 80066c6:	370c      	adds	r7, #12
 80066c8:	46bd      	mov	sp, r7
 80066ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ce:	4770      	bx	lr

080066d0 <GPIO_PinLockConfig>:
  * @param  GPIO_Pin: specifies the port bit to be locked.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_PinLockConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80066d0:	b480      	push	{r7}
 80066d2:	b085      	sub	sp, #20
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
 80066d8:	460b      	mov	r3, r1
 80066da:	807b      	strh	r3, [r7, #2]
  __IO uint32_t tmp = 0x00010000;
 80066dc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80066e0:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  tmp |= GPIO_Pin;
 80066e2:	887a      	ldrh	r2, [r7, #2]
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	4313      	orrs	r3, r2
 80066e8:	60fb      	str	r3, [r7, #12]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 80066ea:	68fa      	ldr	r2, [r7, #12]
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	61da      	str	r2, [r3, #28]
  /* Reset LCKK bit */
  GPIOx->LCKR =  GPIO_Pin;
 80066f0:	887a      	ldrh	r2, [r7, #2]
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	61da      	str	r2, [r3, #28]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 80066f6:	68fa      	ldr	r2, [r7, #12]
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	61da      	str	r2, [r3, #28]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	69db      	ldr	r3, [r3, #28]
 8006700:	60fb      	str	r3, [r7, #12]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	69db      	ldr	r3, [r3, #28]
 8006706:	60fb      	str	r3, [r7, #12]
}
 8006708:	bf00      	nop
 800670a:	3714      	adds	r7, #20
 800670c:	46bd      	mov	sp, r7
 800670e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006712:	4770      	bx	lr

08006714 <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006714:	b480      	push	{r7}
 8006716:	b085      	sub	sp, #20
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]
 800671c:	460b      	mov	r3, r1
 800671e:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 8006720:	2300      	movs	r3, #0
 8006722:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	691a      	ldr	r2, [r3, #16]
 8006728:	887b      	ldrh	r3, [r7, #2]
 800672a:	4013      	ands	r3, r2
 800672c:	2b00      	cmp	r3, #0
 800672e:	d002      	beq.n	8006736 <GPIO_ReadInputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
 8006730:	2301      	movs	r3, #1
 8006732:	73fb      	strb	r3, [r7, #15]
 8006734:	e001      	b.n	800673a <GPIO_ReadInputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 8006736:	2300      	movs	r3, #0
 8006738:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800673a:	7bfb      	ldrb	r3, [r7, #15]
}
 800673c:	4618      	mov	r0, r3
 800673e:	3714      	adds	r7, #20
 8006740:	46bd      	mov	sp, r7
 8006742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006746:	4770      	bx	lr

08006748 <GPIO_ReadInputData>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F42xxx/43xxx devices.
  *                      x can be (A, B, C, D and H) to select the GPIO peripheral for STM32F401xx devices. 
  * @retval GPIO input data port value.
  */
uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
{
 8006748:	b480      	push	{r7}
 800674a:	b083      	sub	sp, #12
 800674c:	af00      	add	r7, sp, #0
 800674e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->IDR);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	691b      	ldr	r3, [r3, #16]
 8006754:	b29b      	uxth	r3, r3
}
 8006756:	4618      	mov	r0, r3
 8006758:	370c      	adds	r7, #12
 800675a:	46bd      	mov	sp, r7
 800675c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006760:	4770      	bx	lr

08006762 <GPIO_ReadOutputDataBit>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *          This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The output port pin value.
  */
uint8_t GPIO_ReadOutputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006762:	b480      	push	{r7}
 8006764:	b085      	sub	sp, #20
 8006766:	af00      	add	r7, sp, #0
 8006768:	6078      	str	r0, [r7, #4]
 800676a:	460b      	mov	r3, r1
 800676c:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 800676e:	2300      	movs	r3, #0
 8006770:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if (((GPIOx->ODR) & GPIO_Pin) != (uint32_t)Bit_RESET)
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	695a      	ldr	r2, [r3, #20]
 8006776:	887b      	ldrh	r3, [r7, #2]
 8006778:	4013      	ands	r3, r2
 800677a:	2b00      	cmp	r3, #0
 800677c:	d002      	beq.n	8006784 <GPIO_ReadOutputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
 800677e:	2301      	movs	r3, #1
 8006780:	73fb      	strb	r3, [r7, #15]
 8006782:	e001      	b.n	8006788 <GPIO_ReadOutputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 8006784:	2300      	movs	r3, #0
 8006786:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006788:	7bfb      	ldrb	r3, [r7, #15]
}
 800678a:	4618      	mov	r0, r3
 800678c:	3714      	adds	r7, #20
 800678e:	46bd      	mov	sp, r7
 8006790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006794:	4770      	bx	lr

08006796 <GPIO_ReadOutputData>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F42xxx/43xxx devices.
  *                      x can be (A, B, C, D and H) to select the GPIO peripheral for STM32F401xx devices. 
  * @retval GPIO output data port value.
  */
uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
{
 8006796:	b480      	push	{r7}
 8006798:	b083      	sub	sp, #12
 800679a:	af00      	add	r7, sp, #0
 800679c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->ODR);
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	695b      	ldr	r3, [r3, #20]
 80067a2:	b29b      	uxth	r3, r3
}
 80067a4:	4618      	mov	r0, r3
 80067a6:	370c      	adds	r7, #12
 80067a8:	46bd      	mov	sp, r7
 80067aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ae:	4770      	bx	lr

080067b0 <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80067b0:	b480      	push	{r7}
 80067b2:	b083      	sub	sp, #12
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	6078      	str	r0, [r7, #4]
 80067b8:	460b      	mov	r3, r1
 80067ba:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRL = GPIO_Pin;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	887a      	ldrh	r2, [r7, #2]
 80067c0:	831a      	strh	r2, [r3, #24]
}
 80067c2:	bf00      	nop
 80067c4:	370c      	adds	r7, #12
 80067c6:	46bd      	mov	sp, r7
 80067c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067cc:	4770      	bx	lr

080067ce <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80067ce:	b480      	push	{r7}
 80067d0:	b083      	sub	sp, #12
 80067d2:	af00      	add	r7, sp, #0
 80067d4:	6078      	str	r0, [r7, #4]
 80067d6:	460b      	mov	r3, r1
 80067d8:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRH = GPIO_Pin;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	887a      	ldrh	r2, [r7, #2]
 80067de:	835a      	strh	r2, [r3, #26]
}
 80067e0:	bf00      	nop
 80067e2:	370c      	adds	r7, #12
 80067e4:	46bd      	mov	sp, r7
 80067e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ea:	4770      	bx	lr

080067ec <GPIO_WriteBit>:
  *            @arg Bit_RESET: to clear the port pin
  *            @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
 80067ec:	b480      	push	{r7}
 80067ee:	b083      	sub	sp, #12
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
 80067f4:	460b      	mov	r3, r1
 80067f6:	807b      	strh	r3, [r7, #2]
 80067f8:	4613      	mov	r3, r2
 80067fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
 80067fc:	787b      	ldrb	r3, [r7, #1]
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d003      	beq.n	800680a <GPIO_WriteBit+0x1e>
  {
    GPIOx->BSRRL = GPIO_Pin;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	887a      	ldrh	r2, [r7, #2]
 8006806:	831a      	strh	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRRH = GPIO_Pin ;
  }
}
 8006808:	e002      	b.n	8006810 <GPIO_WriteBit+0x24>
    GPIOx->BSRRH = GPIO_Pin ;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	887a      	ldrh	r2, [r7, #2]
 800680e:	835a      	strh	r2, [r3, #26]
}
 8006810:	bf00      	nop
 8006812:	370c      	adds	r7, #12
 8006814:	46bd      	mov	sp, r7
 8006816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681a:	4770      	bx	lr

0800681c <GPIO_Write>:
  *                      x can be (A, B, C, D and H) to select the GPIO peripheral for STM32F401xx devices. 
  * @param  PortVal: specifies the value to be written to the port output data register.
  * @retval None
  */
void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal)
{
 800681c:	b480      	push	{r7}
 800681e:	b083      	sub	sp, #12
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]
 8006824:	460b      	mov	r3, r1
 8006826:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR = PortVal;
 8006828:	887a      	ldrh	r2, [r7, #2]
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	615a      	str	r2, [r3, #20]
}
 800682e:	bf00      	nop
 8006830:	370c      	adds	r7, #12
 8006832:	46bd      	mov	sp, r7
 8006834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006838:	4770      	bx	lr

0800683a <GPIO_ToggleBits>:
  *                      x can be (A, B, C, D and H) to select the GPIO peripheral for STM32F401xx devices. 
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void GPIO_ToggleBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800683a:	b480      	push	{r7}
 800683c:	b083      	sub	sp, #12
 800683e:	af00      	add	r7, sp, #0
 8006840:	6078      	str	r0, [r7, #4]
 8006842:	460b      	mov	r3, r1
 8006844:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR ^= GPIO_Pin;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	695a      	ldr	r2, [r3, #20]
 800684a:	887b      	ldrh	r3, [r7, #2]
 800684c:	405a      	eors	r2, r3
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	615a      	str	r2, [r3, #20]
}
 8006852:	bf00      	nop
 8006854:	370c      	adds	r7, #12
 8006856:	46bd      	mov	sp, r7
 8006858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685c:	4770      	bx	lr

0800685e <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_LTDC: Connect LTDC pins to AF14 for STM32F429xx/439xx devices. 
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 800685e:	b480      	push	{r7}
 8006860:	b085      	sub	sp, #20
 8006862:	af00      	add	r7, sp, #0
 8006864:	6078      	str	r0, [r7, #4]
 8006866:	460b      	mov	r3, r1
 8006868:	807b      	strh	r3, [r7, #2]
 800686a:	4613      	mov	r3, r2
 800686c:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 800686e:	2300      	movs	r3, #0
 8006870:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 8006872:	2300      	movs	r3, #0
 8006874:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8006876:	787a      	ldrb	r2, [r7, #1]
 8006878:	887b      	ldrh	r3, [r7, #2]
 800687a:	f003 0307 	and.w	r3, r3, #7
 800687e:	009b      	lsls	r3, r3, #2
 8006880:	fa02 f303 	lsl.w	r3, r2, r3
 8006884:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8006886:	887b      	ldrh	r3, [r7, #2]
 8006888:	08db      	lsrs	r3, r3, #3
 800688a:	b29b      	uxth	r3, r3
 800688c:	461a      	mov	r2, r3
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	3208      	adds	r2, #8
 8006892:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006896:	887b      	ldrh	r3, [r7, #2]
 8006898:	f003 0307 	and.w	r3, r3, #7
 800689c:	009b      	lsls	r3, r3, #2
 800689e:	210f      	movs	r1, #15
 80068a0:	fa01 f303 	lsl.w	r3, r1, r3
 80068a4:	43db      	mvns	r3, r3
 80068a6:	8879      	ldrh	r1, [r7, #2]
 80068a8:	08c9      	lsrs	r1, r1, #3
 80068aa:	b289      	uxth	r1, r1
 80068ac:	4608      	mov	r0, r1
 80068ae:	ea02 0103 	and.w	r1, r2, r3
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	f100 0208 	add.w	r2, r0, #8
 80068b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 80068bc:	887b      	ldrh	r3, [r7, #2]
 80068be:	08db      	lsrs	r3, r3, #3
 80068c0:	b29b      	uxth	r3, r3
 80068c2:	461a      	mov	r2, r3
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	3208      	adds	r2, #8
 80068c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068cc:	68fa      	ldr	r2, [r7, #12]
 80068ce:	4313      	orrs	r3, r2
 80068d0:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 80068d2:	887b      	ldrh	r3, [r7, #2]
 80068d4:	08db      	lsrs	r3, r3, #3
 80068d6:	b29b      	uxth	r3, r3
 80068d8:	461a      	mov	r2, r3
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	3208      	adds	r2, #8
 80068de:	68b9      	ldr	r1, [r7, #8]
 80068e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 80068e4:	bf00      	nop
 80068e6:	3714      	adds	r7, #20
 80068e8:	46bd      	mov	sp, r7
 80068ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ee:	4770      	bx	lr

080068f0 <I2C_DeInit>:
  * @brief  Deinitialize the I2Cx peripheral registers to their default reset values.
  * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
  * @retval None
  */
void I2C_DeInit(I2C_TypeDef* I2Cx)
{
 80068f0:	b580      	push	{r7, lr}
 80068f2:	b082      	sub	sp, #8
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  if (I2Cx == I2C1)
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	4a17      	ldr	r2, [pc, #92]	; (8006958 <I2C_DeInit+0x68>)
 80068fc:	4293      	cmp	r3, r2
 80068fe:	d10a      	bne.n	8006916 <I2C_DeInit+0x26>
  {
    /* Enable I2C1 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, ENABLE);
 8006900:	2101      	movs	r1, #1
 8006902:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8006906:	f002 f90b 	bl	8008b20 <RCC_APB1PeriphResetCmd>
    /* Release I2C1 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, DISABLE);    
 800690a:	2100      	movs	r1, #0
 800690c:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8006910:	f002 f906 	bl	8008b20 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, ENABLE);
      /* Release I2C3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, DISABLE);     
    }
  }
}
 8006914:	e01c      	b.n	8006950 <I2C_DeInit+0x60>
  else if (I2Cx == I2C2)
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	4a10      	ldr	r2, [pc, #64]	; (800695c <I2C_DeInit+0x6c>)
 800691a:	4293      	cmp	r3, r2
 800691c:	d10a      	bne.n	8006934 <I2C_DeInit+0x44>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, ENABLE);
 800691e:	2101      	movs	r1, #1
 8006920:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8006924:	f002 f8fc 	bl	8008b20 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, DISABLE);      
 8006928:	2100      	movs	r1, #0
 800692a:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 800692e:	f002 f8f7 	bl	8008b20 <RCC_APB1PeriphResetCmd>
}
 8006932:	e00d      	b.n	8006950 <I2C_DeInit+0x60>
    if (I2Cx == I2C3)
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	4a0a      	ldr	r2, [pc, #40]	; (8006960 <I2C_DeInit+0x70>)
 8006938:	4293      	cmp	r3, r2
 800693a:	d109      	bne.n	8006950 <I2C_DeInit+0x60>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, ENABLE);
 800693c:	2101      	movs	r1, #1
 800693e:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8006942:	f002 f8ed 	bl	8008b20 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, DISABLE);     
 8006946:	2100      	movs	r1, #0
 8006948:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 800694c:	f002 f8e8 	bl	8008b20 <RCC_APB1PeriphResetCmd>
}
 8006950:	bf00      	nop
 8006952:	3708      	adds	r7, #8
 8006954:	46bd      	mov	sp, r7
 8006956:	bd80      	pop	{r7, pc}
 8006958:	40005400 	.word	0x40005400
 800695c:	40005800 	.word	0x40005800
 8006960:	40005c00 	.word	0x40005c00

08006964 <I2C_Init>:
  * @param  I2C_InitStruct: pointer to a I2C_InitTypeDef structure that contains 
  *         the configuration information for the specified I2C peripheral.
  * @retval None
  */
void I2C_Init(I2C_TypeDef* I2Cx, I2C_InitTypeDef* I2C_InitStruct)
{
 8006964:	b580      	push	{r7, lr}
 8006966:	b08a      	sub	sp, #40	; 0x28
 8006968:	af00      	add	r7, sp, #0
 800696a:	6078      	str	r0, [r7, #4]
 800696c:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0, freqrange = 0;
 800696e:	2300      	movs	r3, #0
 8006970:	84fb      	strh	r3, [r7, #38]	; 0x26
 8006972:	2300      	movs	r3, #0
 8006974:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t result = 0x04;
 8006976:	2304      	movs	r3, #4
 8006978:	84bb      	strh	r3, [r7, #36]	; 0x24
  uint32_t pclk1 = 8000000;
 800697a:	4b57      	ldr	r3, [pc, #348]	; (8006ad8 <I2C_Init+0x174>)
 800697c:	61fb      	str	r3, [r7, #28]
  assert_param(IS_I2C_ACK_STATE(I2C_InitStruct->I2C_Ack));
  assert_param(IS_I2C_ACKNOWLEDGE_ADDRESS(I2C_InitStruct->I2C_AcknowledgedAddress));

/*---------------------------- I2Cx CR2 Configuration ------------------------*/
  /* Get the I2Cx CR2 value */
  tmpreg = I2Cx->CR2;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	889b      	ldrh	r3, [r3, #4]
 8006982:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Clear frequency FREQ[5:0] bits */
  tmpreg &= (uint16_t)~((uint16_t)I2C_CR2_FREQ);
 8006984:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006986:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800698a:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Get pclk1 frequency value */
  RCC_GetClocksFreq(&rcc_clocks);
 800698c:	f107 030c 	add.w	r3, r7, #12
 8006990:	4618      	mov	r0, r3
 8006992:	f001 fe15 	bl	80085c0 <RCC_GetClocksFreq>
  pclk1 = rcc_clocks.PCLK1_Frequency;
 8006996:	697b      	ldr	r3, [r7, #20]
 8006998:	61fb      	str	r3, [r7, #28]
  /* Set frequency bits depending on pclk1 value */
  freqrange = (uint16_t)(pclk1 / 1000000);
 800699a:	69fb      	ldr	r3, [r7, #28]
 800699c:	4a4f      	ldr	r2, [pc, #316]	; (8006adc <I2C_Init+0x178>)
 800699e:	fba2 2303 	umull	r2, r3, r2, r3
 80069a2:	0c9b      	lsrs	r3, r3, #18
 80069a4:	847b      	strh	r3, [r7, #34]	; 0x22
  tmpreg |= freqrange;
 80069a6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80069a8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80069aa:	4313      	orrs	r3, r2
 80069ac:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Write to I2Cx CR2 */
  I2Cx->CR2 = tmpreg;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80069b2:	809a      	strh	r2, [r3, #4]

/*---------------------------- I2Cx CCR Configuration ------------------------*/
  /* Disable the selected I2C peripheral to configure TRISE */
  I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	881b      	ldrh	r3, [r3, #0]
 80069b8:	b29b      	uxth	r3, r3
 80069ba:	f023 0301 	bic.w	r3, r3, #1
 80069be:	b29a      	uxth	r2, r3
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	801a      	strh	r2, [r3, #0]
  /* Reset tmpreg value */
  /* Clear F/S, DUTY and CCR[11:0] bits */
  tmpreg = 0;
 80069c4:	2300      	movs	r3, #0
 80069c6:	84fb      	strh	r3, [r7, #38]	; 0x26

  /* Configure speed in standard mode */
  if (I2C_InitStruct->I2C_ClockSpeed <= 100000)
 80069c8:	683b      	ldr	r3, [r7, #0]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	4a44      	ldr	r2, [pc, #272]	; (8006ae0 <I2C_Init+0x17c>)
 80069ce:	4293      	cmp	r3, r2
 80069d0:	d815      	bhi.n	80069fe <I2C_Init+0x9a>
  {
    /* Standard mode speed calculate */
    result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed << 1));
 80069d2:	683b      	ldr	r3, [r7, #0]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	005b      	lsls	r3, r3, #1
 80069d8:	69fa      	ldr	r2, [r7, #28]
 80069da:	fbb2 f3f3 	udiv	r3, r2, r3
 80069de:	84bb      	strh	r3, [r7, #36]	; 0x24
    /* Test if CCR value is under 0x4*/
    if (result < 0x04)
 80069e0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80069e2:	2b03      	cmp	r3, #3
 80069e4:	d801      	bhi.n	80069ea <I2C_Init+0x86>
    {
      /* Set minimum allowed value */
      result = 0x04;  
 80069e6:	2304      	movs	r3, #4
 80069e8:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    /* Set speed value for standard mode */
    tmpreg |= result;	  
 80069ea:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80069ec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80069ee:	4313      	orrs	r3, r2
 80069f0:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* Set Maximum Rise Time for standard mode */
    I2Cx->TRISE = freqrange + 1; 
 80069f2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80069f4:	3301      	adds	r3, #1
 80069f6:	b29a      	uxth	r2, r3
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	841a      	strh	r2, [r3, #32]
 80069fc:	e040      	b.n	8006a80 <I2C_Init+0x11c>
  /* Configure speed in fast mode */
  /* To use the I2C at 400 KHz (in fast mode), the PCLK1 frequency (I2C peripheral
     input clock) must be a multiple of 10 MHz */
  else /*(I2C_InitStruct->I2C_ClockSpeed <= 400000)*/
  {
    if (I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_2)
 80069fe:	683b      	ldr	r3, [r7, #0]
 8006a00:	88db      	ldrh	r3, [r3, #6]
 8006a02:	f64b 72ff 	movw	r2, #49151	; 0xbfff
 8006a06:	4293      	cmp	r3, r2
 8006a08:	d109      	bne.n	8006a1e <I2C_Init+0xba>
    {
      /* Fast mode speed calculate: Tlow/Thigh = 2 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 3));
 8006a0a:	683b      	ldr	r3, [r7, #0]
 8006a0c:	681a      	ldr	r2, [r3, #0]
 8006a0e:	4613      	mov	r3, r2
 8006a10:	005b      	lsls	r3, r3, #1
 8006a12:	4413      	add	r3, r2
 8006a14:	69fa      	ldr	r2, [r7, #28]
 8006a16:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a1a:	84bb      	strh	r3, [r7, #36]	; 0x24
 8006a1c:	e00e      	b.n	8006a3c <I2C_Init+0xd8>
    }
    else /*I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_16_9*/
    {
      /* Fast mode speed calculate: Tlow/Thigh = 16/9 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 25));
 8006a1e:	683b      	ldr	r3, [r7, #0]
 8006a20:	681a      	ldr	r2, [r3, #0]
 8006a22:	4613      	mov	r3, r2
 8006a24:	009b      	lsls	r3, r3, #2
 8006a26:	4413      	add	r3, r2
 8006a28:	009a      	lsls	r2, r3, #2
 8006a2a:	4413      	add	r3, r2
 8006a2c:	69fa      	ldr	r2, [r7, #28]
 8006a2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a32:	84bb      	strh	r3, [r7, #36]	; 0x24
      /* Set DUTY bit */
      result |= I2C_DutyCycle_16_9;
 8006a34:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006a36:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006a3a:	84bb      	strh	r3, [r7, #36]	; 0x24
    }

    /* Test if CCR value is under 0x1*/
    if ((result & I2C_CCR_CCR) == 0)
 8006a3c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006a3e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d103      	bne.n	8006a4e <I2C_Init+0xea>
    {
      /* Set minimum allowed value */
      result |= (uint16_t)0x0001;  
 8006a46:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006a48:	f043 0301 	orr.w	r3, r3, #1
 8006a4c:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    /* Set speed value and set F/S bit for fast mode */
    tmpreg |= (uint16_t)(result | I2C_CCR_FS);
 8006a4e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006a50:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006a52:	4313      	orrs	r3, r2
 8006a54:	b29b      	uxth	r3, r3
 8006a56:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a5a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a5e:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* Set Maximum Rise Time for fast mode */
    I2Cx->TRISE = (uint16_t)(((freqrange * (uint16_t)300) / (uint16_t)1000) + (uint16_t)1);  
 8006a60:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006a62:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006a66:	fb02 f303 	mul.w	r3, r2, r3
 8006a6a:	4a1e      	ldr	r2, [pc, #120]	; (8006ae4 <I2C_Init+0x180>)
 8006a6c:	fb82 1203 	smull	r1, r2, r2, r3
 8006a70:	1192      	asrs	r2, r2, #6
 8006a72:	17db      	asrs	r3, r3, #31
 8006a74:	1ad3      	subs	r3, r2, r3
 8006a76:	b29b      	uxth	r3, r3
 8006a78:	3301      	adds	r3, #1
 8006a7a:	b29a      	uxth	r2, r3
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	841a      	strh	r2, [r3, #32]
  }

  /* Write to I2Cx CCR */
  I2Cx->CCR = tmpreg;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006a84:	839a      	strh	r2, [r3, #28]
  /* Enable the selected I2C peripheral */
  I2Cx->CR1 |= I2C_CR1_PE;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	881b      	ldrh	r3, [r3, #0]
 8006a8a:	b29b      	uxth	r3, r3
 8006a8c:	f043 0301 	orr.w	r3, r3, #1
 8006a90:	b29a      	uxth	r2, r3
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	801a      	strh	r2, [r3, #0]

/*---------------------------- I2Cx CR1 Configuration ------------------------*/
  /* Get the I2Cx CR1 value */
  tmpreg = I2Cx->CR1;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	881b      	ldrh	r3, [r3, #0]
 8006a9a:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Clear ACK, SMBTYPE and  SMBUS bits */
  tmpreg &= CR1_CLEAR_MASK;
 8006a9c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006a9e:	f423 6381 	bic.w	r3, r3, #1032	; 0x408
 8006aa2:	f023 0302 	bic.w	r3, r3, #2
 8006aa6:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Configure I2Cx: mode and acknowledgement */
  /* Set SMBTYPE and SMBUS bits according to I2C_Mode value */
  /* Set ACK bit according to I2C_Ack value */
  tmpreg |= (uint16_t)((uint32_t)I2C_InitStruct->I2C_Mode | I2C_InitStruct->I2C_Ack);
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	889a      	ldrh	r2, [r3, #4]
 8006aac:	683b      	ldr	r3, [r7, #0]
 8006aae:	895b      	ldrh	r3, [r3, #10]
 8006ab0:	4313      	orrs	r3, r2
 8006ab2:	b29a      	uxth	r2, r3
 8006ab4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006ab6:	4313      	orrs	r3, r2
 8006ab8:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Write to I2Cx CR1 */
  I2Cx->CR1 = tmpreg;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006abe:	801a      	strh	r2, [r3, #0]

/*---------------------------- I2Cx OAR1 Configuration -----------------------*/
  /* Set I2Cx Own Address1 and acknowledged address */
  I2Cx->OAR1 = (I2C_InitStruct->I2C_AcknowledgedAddress | I2C_InitStruct->I2C_OwnAddress1);
 8006ac0:	683b      	ldr	r3, [r7, #0]
 8006ac2:	899a      	ldrh	r2, [r3, #12]
 8006ac4:	683b      	ldr	r3, [r7, #0]
 8006ac6:	891b      	ldrh	r3, [r3, #8]
 8006ac8:	4313      	orrs	r3, r2
 8006aca:	b29a      	uxth	r2, r3
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	811a      	strh	r2, [r3, #8]
}
 8006ad0:	bf00      	nop
 8006ad2:	3728      	adds	r7, #40	; 0x28
 8006ad4:	46bd      	mov	sp, r7
 8006ad6:	bd80      	pop	{r7, pc}
 8006ad8:	007a1200 	.word	0x007a1200
 8006adc:	431bde83 	.word	0x431bde83
 8006ae0:	000186a0 	.word	0x000186a0
 8006ae4:	10624dd3 	.word	0x10624dd3

08006ae8 <I2C_StructInit>:
  * @brief  Fills each I2C_InitStruct member with its default value.
  * @param  I2C_InitStruct: pointer to an I2C_InitTypeDef structure which will be initialized.
  * @retval None
  */
void I2C_StructInit(I2C_InitTypeDef* I2C_InitStruct)
{
 8006ae8:	b480      	push	{r7}
 8006aea:	b083      	sub	sp, #12
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	6078      	str	r0, [r7, #4]
/*---------------- Reset I2C init structure parameters values ----------------*/
  /* initialize the I2C_ClockSpeed member */
  I2C_InitStruct->I2C_ClockSpeed = 5000;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	f241 3288 	movw	r2, #5000	; 0x1388
 8006af6:	601a      	str	r2, [r3, #0]
  /* Initialize the I2C_Mode member */
  I2C_InitStruct->I2C_Mode = I2C_Mode_I2C;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	2200      	movs	r2, #0
 8006afc:	809a      	strh	r2, [r3, #4]
  /* Initialize the I2C_DutyCycle member */
  I2C_InitStruct->I2C_DutyCycle = I2C_DutyCycle_2;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	f64b 72ff 	movw	r2, #49151	; 0xbfff
 8006b04:	80da      	strh	r2, [r3, #6]
  /* Initialize the I2C_OwnAddress1 member */
  I2C_InitStruct->I2C_OwnAddress1 = 0;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	2200      	movs	r2, #0
 8006b0a:	811a      	strh	r2, [r3, #8]
  /* Initialize the I2C_Ack member */
  I2C_InitStruct->I2C_Ack = I2C_Ack_Disable;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	2200      	movs	r2, #0
 8006b10:	815a      	strh	r2, [r3, #10]
  /* Initialize the I2C_AcknowledgedAddress member */
  I2C_InitStruct->I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006b18:	819a      	strh	r2, [r3, #12]
}
 8006b1a:	bf00      	nop
 8006b1c:	370c      	adds	r7, #12
 8006b1e:	46bd      	mov	sp, r7
 8006b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b24:	4770      	bx	lr

08006b26 <I2C_Cmd>:
  * @param  NewState: new state of the I2Cx peripheral. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_Cmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8006b26:	b480      	push	{r7}
 8006b28:	b083      	sub	sp, #12
 8006b2a:	af00      	add	r7, sp, #0
 8006b2c:	6078      	str	r0, [r7, #4]
 8006b2e:	460b      	mov	r3, r1
 8006b30:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8006b32:	78fb      	ldrb	r3, [r7, #3]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d008      	beq.n	8006b4a <I2C_Cmd+0x24>
  {
    /* Enable the selected I2C peripheral */
    I2Cx->CR1 |= I2C_CR1_PE;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	881b      	ldrh	r3, [r3, #0]
 8006b3c:	b29b      	uxth	r3, r3
 8006b3e:	f043 0301 	orr.w	r3, r3, #1
 8006b42:	b29a      	uxth	r2, r3
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the selected I2C peripheral */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
  }
}
 8006b48:	e007      	b.n	8006b5a <I2C_Cmd+0x34>
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	881b      	ldrh	r3, [r3, #0]
 8006b4e:	b29b      	uxth	r3, r3
 8006b50:	f023 0301 	bic.w	r3, r3, #1
 8006b54:	b29a      	uxth	r2, r3
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	801a      	strh	r2, [r3, #0]
}
 8006b5a:	bf00      	nop
 8006b5c:	370c      	adds	r7, #12
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b64:	4770      	bx	lr

08006b66 <I2C_AnalogFilterCmd>:
  * @note   This function should be called before initializing and enabling
            the I2C Peripheral.
  * @retval None
  */
void I2C_AnalogFilterCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8006b66:	b480      	push	{r7}
 8006b68:	b083      	sub	sp, #12
 8006b6a:	af00      	add	r7, sp, #0
 8006b6c:	6078      	str	r0, [r7, #4]
 8006b6e:	460b      	mov	r3, r1
 8006b70:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8006b72:	78fb      	ldrb	r3, [r7, #3]
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d008      	beq.n	8006b8a <I2C_AnalogFilterCmd+0x24>
  {
    /* Enable the analog filter */
    I2Cx->FLTR &= (uint16_t)~((uint16_t)I2C_FLTR_ANOFF);    
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006b7c:	b29b      	uxth	r3, r3
 8006b7e:	f023 0310 	bic.w	r3, r3, #16
 8006b82:	b29a      	uxth	r2, r3
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	849a      	strh	r2, [r3, #36]	; 0x24
  else
  {
    /* Disable the analog filter */
    I2Cx->FLTR |= I2C_FLTR_ANOFF;
  }
}
 8006b88:	e007      	b.n	8006b9a <I2C_AnalogFilterCmd+0x34>
    I2Cx->FLTR |= I2C_FLTR_ANOFF;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006b8e:	b29b      	uxth	r3, r3
 8006b90:	f043 0310 	orr.w	r3, r3, #16
 8006b94:	b29a      	uxth	r2, r3
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	849a      	strh	r2, [r3, #36]	; 0x24
}
 8006b9a:	bf00      	nop
 8006b9c:	370c      	adds	r7, #12
 8006b9e:	46bd      	mov	sp, r7
 8006ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba4:	4770      	bx	lr

08006ba6 <I2C_DigitalFilterConfig>:
  * @note   This function should be called before initializing and enabling
            the I2C Peripheral.
  * @retval None
  */
void I2C_DigitalFilterConfig(I2C_TypeDef* I2Cx, uint16_t I2C_DigitalFilter)
{
 8006ba6:	b480      	push	{r7}
 8006ba8:	b085      	sub	sp, #20
 8006baa:	af00      	add	r7, sp, #0
 8006bac:	6078      	str	r0, [r7, #4]
 8006bae:	460b      	mov	r3, r1
 8006bb0:	807b      	strh	r3, [r7, #2]
  uint16_t tmpreg = 0;
 8006bb2:	2300      	movs	r3, #0
 8006bb4:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_DIGITAL_FILTER(I2C_DigitalFilter));
  
  /* Get the old register value */
  tmpreg = I2Cx->FLTR;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006bba:	81fb      	strh	r3, [r7, #14]
  
  /* Reset I2Cx DNF bit [3:0] */
  tmpreg &= (uint16_t)~((uint16_t)I2C_FLTR_DNF);
 8006bbc:	89fb      	ldrh	r3, [r7, #14]
 8006bbe:	f023 030f 	bic.w	r3, r3, #15
 8006bc2:	81fb      	strh	r3, [r7, #14]
  
  /* Set I2Cx DNF coefficient */
  tmpreg |= (uint16_t)((uint16_t)I2C_DigitalFilter & I2C_FLTR_DNF);
 8006bc4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006bc8:	f003 030f 	and.w	r3, r3, #15
 8006bcc:	b21a      	sxth	r2, r3
 8006bce:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006bd2:	4313      	orrs	r3, r2
 8006bd4:	b21b      	sxth	r3, r3
 8006bd6:	81fb      	strh	r3, [r7, #14]
  
  /* Store the new register value */
  I2Cx->FLTR = tmpreg;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	89fa      	ldrh	r2, [r7, #14]
 8006bdc:	849a      	strh	r2, [r3, #36]	; 0x24
}
 8006bde:	bf00      	nop
 8006be0:	3714      	adds	r7, #20
 8006be2:	46bd      	mov	sp, r7
 8006be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be8:	4770      	bx	lr

08006bea <I2C_GenerateSTART>:
  * @param  NewState: new state of the I2C START condition generation.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_GenerateSTART(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8006bea:	b480      	push	{r7}
 8006bec:	b083      	sub	sp, #12
 8006bee:	af00      	add	r7, sp, #0
 8006bf0:	6078      	str	r0, [r7, #4]
 8006bf2:	460b      	mov	r3, r1
 8006bf4:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8006bf6:	78fb      	ldrb	r3, [r7, #3]
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d008      	beq.n	8006c0e <I2C_GenerateSTART+0x24>
  {
    /* Generate a START condition */
    I2Cx->CR1 |= I2C_CR1_START;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	881b      	ldrh	r3, [r3, #0]
 8006c00:	b29b      	uxth	r3, r3
 8006c02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006c06:	b29a      	uxth	r2, r3
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the START condition generation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_START);
  }
}
 8006c0c:	e007      	b.n	8006c1e <I2C_GenerateSTART+0x34>
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_START);
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	881b      	ldrh	r3, [r3, #0]
 8006c12:	b29b      	uxth	r3, r3
 8006c14:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006c18:	b29a      	uxth	r2, r3
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	801a      	strh	r2, [r3, #0]
}
 8006c1e:	bf00      	nop
 8006c20:	370c      	adds	r7, #12
 8006c22:	46bd      	mov	sp, r7
 8006c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c28:	4770      	bx	lr

08006c2a <I2C_GenerateSTOP>:
  * @param  NewState: new state of the I2C STOP condition generation.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_GenerateSTOP(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8006c2a:	b480      	push	{r7}
 8006c2c:	b083      	sub	sp, #12
 8006c2e:	af00      	add	r7, sp, #0
 8006c30:	6078      	str	r0, [r7, #4]
 8006c32:	460b      	mov	r3, r1
 8006c34:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8006c36:	78fb      	ldrb	r3, [r7, #3]
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d008      	beq.n	8006c4e <I2C_GenerateSTOP+0x24>
  {
    /* Generate a STOP condition */
    I2Cx->CR1 |= I2C_CR1_STOP;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	881b      	ldrh	r3, [r3, #0]
 8006c40:	b29b      	uxth	r3, r3
 8006c42:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006c46:	b29a      	uxth	r2, r3
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the STOP condition generation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_STOP);
  }
}
 8006c4c:	e007      	b.n	8006c5e <I2C_GenerateSTOP+0x34>
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_STOP);
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	881b      	ldrh	r3, [r3, #0]
 8006c52:	b29b      	uxth	r3, r3
 8006c54:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006c58:	b29a      	uxth	r2, r3
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	801a      	strh	r2, [r3, #0]
}
 8006c5e:	bf00      	nop
 8006c60:	370c      	adds	r7, #12
 8006c62:	46bd      	mov	sp, r7
 8006c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c68:	4770      	bx	lr

08006c6a <I2C_Send7bitAddress>:
  *            @arg I2C_Direction_Transmitter: Transmitter mode
  *            @arg I2C_Direction_Receiver: Receiver mode
  * @retval None.
  */
void I2C_Send7bitAddress(I2C_TypeDef* I2Cx, uint8_t Address, uint8_t I2C_Direction)
{
 8006c6a:	b480      	push	{r7}
 8006c6c:	b083      	sub	sp, #12
 8006c6e:	af00      	add	r7, sp, #0
 8006c70:	6078      	str	r0, [r7, #4]
 8006c72:	460b      	mov	r3, r1
 8006c74:	70fb      	strb	r3, [r7, #3]
 8006c76:	4613      	mov	r3, r2
 8006c78:	70bb      	strb	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_DIRECTION(I2C_Direction));
  /* Test on the direction to set/reset the read/write bit */
  if (I2C_Direction != I2C_Direction_Transmitter)
 8006c7a:	78bb      	ldrb	r3, [r7, #2]
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d004      	beq.n	8006c8a <I2C_Send7bitAddress+0x20>
  {
    /* Set the address bit0 for read */
    Address |= I2C_OAR1_ADD0;
 8006c80:	78fb      	ldrb	r3, [r7, #3]
 8006c82:	f043 0301 	orr.w	r3, r3, #1
 8006c86:	70fb      	strb	r3, [r7, #3]
 8006c88:	e003      	b.n	8006c92 <I2C_Send7bitAddress+0x28>
  }
  else
  {
    /* Reset the address bit0 for write */
    Address &= (uint8_t)~((uint8_t)I2C_OAR1_ADD0);
 8006c8a:	78fb      	ldrb	r3, [r7, #3]
 8006c8c:	f023 0301 	bic.w	r3, r3, #1
 8006c90:	70fb      	strb	r3, [r7, #3]
  }
  /* Send the address */
  I2Cx->DR = Address;
 8006c92:	78fb      	ldrb	r3, [r7, #3]
 8006c94:	b29a      	uxth	r2, r3
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	821a      	strh	r2, [r3, #16]
}
 8006c9a:	bf00      	nop
 8006c9c:	370c      	adds	r7, #12
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca4:	4770      	bx	lr

08006ca6 <I2C_AcknowledgeConfig>:
  * @param  NewState: new state of the I2C Acknowledgement.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_AcknowledgeConfig(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8006ca6:	b480      	push	{r7}
 8006ca8:	b083      	sub	sp, #12
 8006caa:	af00      	add	r7, sp, #0
 8006cac:	6078      	str	r0, [r7, #4]
 8006cae:	460b      	mov	r3, r1
 8006cb0:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8006cb2:	78fb      	ldrb	r3, [r7, #3]
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d008      	beq.n	8006cca <I2C_AcknowledgeConfig+0x24>
  {
    /* Enable the acknowledgement */
    I2Cx->CR1 |= I2C_CR1_ACK;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	881b      	ldrh	r3, [r3, #0]
 8006cbc:	b29b      	uxth	r3, r3
 8006cbe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006cc2:	b29a      	uxth	r2, r3
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the acknowledgement */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ACK);
  }
}
 8006cc8:	e007      	b.n	8006cda <I2C_AcknowledgeConfig+0x34>
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ACK);
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	881b      	ldrh	r3, [r3, #0]
 8006cce:	b29b      	uxth	r3, r3
 8006cd0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006cd4:	b29a      	uxth	r2, r3
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	801a      	strh	r2, [r3, #0]
}
 8006cda:	bf00      	nop
 8006cdc:	370c      	adds	r7, #12
 8006cde:	46bd      	mov	sp, r7
 8006ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce4:	4770      	bx	lr

08006ce6 <I2C_OwnAddress2Config>:
  * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
  * @param  Address: specifies the 7bit I2C own address2.
  * @retval None.
  */
void I2C_OwnAddress2Config(I2C_TypeDef* I2Cx, uint8_t Address)
{
 8006ce6:	b480      	push	{r7}
 8006ce8:	b085      	sub	sp, #20
 8006cea:	af00      	add	r7, sp, #0
 8006cec:	6078      	str	r0, [r7, #4]
 8006cee:	460b      	mov	r3, r1
 8006cf0:	70fb      	strb	r3, [r7, #3]
  uint16_t tmpreg = 0;
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  /* Get the old register value */
  tmpreg = I2Cx->OAR2;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	899b      	ldrh	r3, [r3, #12]
 8006cfa:	81fb      	strh	r3, [r7, #14]

  /* Reset I2Cx Own address2 bit [7:1] */
  tmpreg &= (uint16_t)~((uint16_t)I2C_OAR2_ADD2);
 8006cfc:	89fb      	ldrh	r3, [r7, #14]
 8006cfe:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 8006d02:	81fb      	strh	r3, [r7, #14]

  /* Set I2Cx Own address2 */
  tmpreg |= (uint16_t)((uint16_t)Address & (uint16_t)0x00FE);
 8006d04:	78fb      	ldrb	r3, [r7, #3]
 8006d06:	b21b      	sxth	r3, r3
 8006d08:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8006d0c:	b21a      	sxth	r2, r3
 8006d0e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006d12:	4313      	orrs	r3, r2
 8006d14:	b21b      	sxth	r3, r3
 8006d16:	81fb      	strh	r3, [r7, #14]

  /* Store the new register value */
  I2Cx->OAR2 = tmpreg;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	89fa      	ldrh	r2, [r7, #14]
 8006d1c:	819a      	strh	r2, [r3, #12]
}
 8006d1e:	bf00      	nop
 8006d20:	3714      	adds	r7, #20
 8006d22:	46bd      	mov	sp, r7
 8006d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d28:	4770      	bx	lr

08006d2a <I2C_DualAddressCmd>:
  * @param  NewState: new state of the I2C dual addressing mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_DualAddressCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8006d2a:	b480      	push	{r7}
 8006d2c:	b083      	sub	sp, #12
 8006d2e:	af00      	add	r7, sp, #0
 8006d30:	6078      	str	r0, [r7, #4]
 8006d32:	460b      	mov	r3, r1
 8006d34:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8006d36:	78fb      	ldrb	r3, [r7, #3]
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d008      	beq.n	8006d4e <I2C_DualAddressCmd+0x24>
  {
    /* Enable dual addressing mode */
    I2Cx->OAR2 |= I2C_OAR2_ENDUAL;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	899b      	ldrh	r3, [r3, #12]
 8006d40:	b29b      	uxth	r3, r3
 8006d42:	f043 0301 	orr.w	r3, r3, #1
 8006d46:	b29a      	uxth	r2, r3
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable dual addressing mode */
    I2Cx->OAR2 &= (uint16_t)~((uint16_t)I2C_OAR2_ENDUAL);
  }
}
 8006d4c:	e007      	b.n	8006d5e <I2C_DualAddressCmd+0x34>
    I2Cx->OAR2 &= (uint16_t)~((uint16_t)I2C_OAR2_ENDUAL);
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	899b      	ldrh	r3, [r3, #12]
 8006d52:	b29b      	uxth	r3, r3
 8006d54:	f023 0301 	bic.w	r3, r3, #1
 8006d58:	b29a      	uxth	r2, r3
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	819a      	strh	r2, [r3, #12]
}
 8006d5e:	bf00      	nop
 8006d60:	370c      	adds	r7, #12
 8006d62:	46bd      	mov	sp, r7
 8006d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d68:	4770      	bx	lr

08006d6a <I2C_GeneralCallCmd>:
  * @param  NewState: new state of the I2C General call.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_GeneralCallCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8006d6a:	b480      	push	{r7}
 8006d6c:	b083      	sub	sp, #12
 8006d6e:	af00      	add	r7, sp, #0
 8006d70:	6078      	str	r0, [r7, #4]
 8006d72:	460b      	mov	r3, r1
 8006d74:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8006d76:	78fb      	ldrb	r3, [r7, #3]
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d008      	beq.n	8006d8e <I2C_GeneralCallCmd+0x24>
  {
    /* Enable generall call */
    I2Cx->CR1 |= I2C_CR1_ENGC;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	881b      	ldrh	r3, [r3, #0]
 8006d80:	b29b      	uxth	r3, r3
 8006d82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006d86:	b29a      	uxth	r2, r3
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable generall call */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ENGC);
  }
}
 8006d8c:	e007      	b.n	8006d9e <I2C_GeneralCallCmd+0x34>
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ENGC);
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	881b      	ldrh	r3, [r3, #0]
 8006d92:	b29b      	uxth	r3, r3
 8006d94:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d98:	b29a      	uxth	r2, r3
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	801a      	strh	r2, [r3, #0]
}
 8006d9e:	bf00      	nop
 8006da0:	370c      	adds	r7, #12
 8006da2:	46bd      	mov	sp, r7
 8006da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da8:	4770      	bx	lr

08006daa <I2C_SoftwareResetCmd>:
  * @param  NewState: new state of the I2C software reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_SoftwareResetCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8006daa:	b480      	push	{r7}
 8006dac:	b083      	sub	sp, #12
 8006dae:	af00      	add	r7, sp, #0
 8006db0:	6078      	str	r0, [r7, #4]
 8006db2:	460b      	mov	r3, r1
 8006db4:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8006db6:	78fb      	ldrb	r3, [r7, #3]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d00a      	beq.n	8006dd2 <I2C_SoftwareResetCmd+0x28>
  {
    /* Peripheral under reset */
    I2Cx->CR1 |= I2C_CR1_SWRST;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	881b      	ldrh	r3, [r3, #0]
 8006dc0:	b29b      	uxth	r3, r3
 8006dc2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006dc6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006dca:	b29a      	uxth	r2, r3
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Peripheral not under reset */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_SWRST);
  }
}
 8006dd0:	e007      	b.n	8006de2 <I2C_SoftwareResetCmd+0x38>
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_SWRST);
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	881b      	ldrh	r3, [r3, #0]
 8006dd6:	b29b      	uxth	r3, r3
 8006dd8:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8006ddc:	b29a      	uxth	r2, r3
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	801a      	strh	r2, [r3, #0]
}
 8006de2:	bf00      	nop
 8006de4:	370c      	adds	r7, #12
 8006de6:	46bd      	mov	sp, r7
 8006de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dec:	4770      	bx	lr

08006dee <I2C_StretchClockCmd>:
  * @param  NewState: new state of the I2Cx Clock stretching.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_StretchClockCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8006dee:	b480      	push	{r7}
 8006df0:	b083      	sub	sp, #12
 8006df2:	af00      	add	r7, sp, #0
 8006df4:	6078      	str	r0, [r7, #4]
 8006df6:	460b      	mov	r3, r1
 8006df8:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState == DISABLE)
 8006dfa:	78fb      	ldrb	r3, [r7, #3]
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d108      	bne.n	8006e12 <I2C_StretchClockCmd+0x24>
  {
    /* Enable the selected I2C Clock stretching */
    I2Cx->CR1 |= I2C_CR1_NOSTRETCH;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	881b      	ldrh	r3, [r3, #0]
 8006e04:	b29b      	uxth	r3, r3
 8006e06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e0a:	b29a      	uxth	r2, r3
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the selected I2C Clock stretching */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_NOSTRETCH);
  }
}
 8006e10:	e007      	b.n	8006e22 <I2C_StretchClockCmd+0x34>
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_NOSTRETCH);
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	881b      	ldrh	r3, [r3, #0]
 8006e16:	b29b      	uxth	r3, r3
 8006e18:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006e1c:	b29a      	uxth	r2, r3
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	801a      	strh	r2, [r3, #0]
}
 8006e22:	bf00      	nop
 8006e24:	370c      	adds	r7, #12
 8006e26:	46bd      	mov	sp, r7
 8006e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2c:	4770      	bx	lr

08006e2e <I2C_FastModeDutyCycleConfig>:
  *            @arg I2C_DutyCycle_2: I2C fast mode Tlow/Thigh = 2
  *            @arg I2C_DutyCycle_16_9: I2C fast mode Tlow/Thigh = 16/9
  * @retval None
  */
void I2C_FastModeDutyCycleConfig(I2C_TypeDef* I2Cx, uint16_t I2C_DutyCycle)
{
 8006e2e:	b480      	push	{r7}
 8006e30:	b083      	sub	sp, #12
 8006e32:	af00      	add	r7, sp, #0
 8006e34:	6078      	str	r0, [r7, #4]
 8006e36:	460b      	mov	r3, r1
 8006e38:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_DUTY_CYCLE(I2C_DutyCycle));
  if (I2C_DutyCycle != I2C_DutyCycle_16_9)
 8006e3a:	887b      	ldrh	r3, [r7, #2]
 8006e3c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006e40:	d008      	beq.n	8006e54 <I2C_FastModeDutyCycleConfig+0x26>
  {
    /* I2C fast mode Tlow/Thigh=2 */
    I2Cx->CCR &= I2C_DutyCycle_2;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	8b9b      	ldrh	r3, [r3, #28]
 8006e46:	b29b      	uxth	r3, r3
 8006e48:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006e4c:	b29a      	uxth	r2, r3
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	839a      	strh	r2, [r3, #28]
  else
  {
    /* I2C fast mode Tlow/Thigh=16/9 */
    I2Cx->CCR |= I2C_DutyCycle_16_9;
  }
}
 8006e52:	e007      	b.n	8006e64 <I2C_FastModeDutyCycleConfig+0x36>
    I2Cx->CCR |= I2C_DutyCycle_16_9;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	8b9b      	ldrh	r3, [r3, #28]
 8006e58:	b29b      	uxth	r3, r3
 8006e5a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006e5e:	b29a      	uxth	r2, r3
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	839a      	strh	r2, [r3, #28]
}
 8006e64:	bf00      	nop
 8006e66:	370c      	adds	r7, #12
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6e:	4770      	bx	lr

08006e70 <I2C_NACKPositionConfig>:
  *          is intended to used in SMBUS mode. 
  *            
  * @retval None
  */
void I2C_NACKPositionConfig(I2C_TypeDef* I2Cx, uint16_t I2C_NACKPosition)
{
 8006e70:	b480      	push	{r7}
 8006e72:	b083      	sub	sp, #12
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]
 8006e78:	460b      	mov	r3, r1
 8006e7a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_NACK_POSITION(I2C_NACKPosition));
  
  /* Check the input parameter */
  if (I2C_NACKPosition == I2C_NACKPosition_Next)
 8006e7c:	887b      	ldrh	r3, [r7, #2]
 8006e7e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e82:	d108      	bne.n	8006e96 <I2C_NACKPositionConfig+0x26>
  {
    /* Next byte in shift register is the last received byte */
    I2Cx->CR1 |= I2C_NACKPosition_Next;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	881b      	ldrh	r3, [r3, #0]
 8006e88:	b29b      	uxth	r3, r3
 8006e8a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006e8e:	b29a      	uxth	r2, r3
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Current byte in shift register is the last received byte */
    I2Cx->CR1 &= I2C_NACKPosition_Current;
  }
}
 8006e94:	e007      	b.n	8006ea6 <I2C_NACKPositionConfig+0x36>
    I2Cx->CR1 &= I2C_NACKPosition_Current;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	881b      	ldrh	r3, [r3, #0]
 8006e9a:	b29b      	uxth	r3, r3
 8006e9c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006ea0:	b29a      	uxth	r2, r3
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	801a      	strh	r2, [r3, #0]
}
 8006ea6:	bf00      	nop
 8006ea8:	370c      	adds	r7, #12
 8006eaa:	46bd      	mov	sp, r7
 8006eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb0:	4770      	bx	lr

08006eb2 <I2C_SMBusAlertConfig>:
  *            @arg I2C_SMBusAlert_Low: SMBAlert pin driven low
  *            @arg I2C_SMBusAlert_High: SMBAlert pin driven high
  * @retval None
  */
void I2C_SMBusAlertConfig(I2C_TypeDef* I2Cx, uint16_t I2C_SMBusAlert)
{
 8006eb2:	b480      	push	{r7}
 8006eb4:	b083      	sub	sp, #12
 8006eb6:	af00      	add	r7, sp, #0
 8006eb8:	6078      	str	r0, [r7, #4]
 8006eba:	460b      	mov	r3, r1
 8006ebc:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_SMBUS_ALERT(I2C_SMBusAlert));
  if (I2C_SMBusAlert == I2C_SMBusAlert_Low)
 8006ebe:	887b      	ldrh	r3, [r7, #2]
 8006ec0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ec4:	d108      	bne.n	8006ed8 <I2C_SMBusAlertConfig+0x26>
  {
    /* Drive the SMBusAlert pin Low */
    I2Cx->CR1 |= I2C_SMBusAlert_Low;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	881b      	ldrh	r3, [r3, #0]
 8006eca:	b29b      	uxth	r3, r3
 8006ecc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006ed0:	b29a      	uxth	r2, r3
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Drive the SMBusAlert pin High  */
    I2Cx->CR1 &= I2C_SMBusAlert_High;
  }
}
 8006ed6:	e007      	b.n	8006ee8 <I2C_SMBusAlertConfig+0x36>
    I2Cx->CR1 &= I2C_SMBusAlert_High;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	881b      	ldrh	r3, [r3, #0]
 8006edc:	b29b      	uxth	r3, r3
 8006ede:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006ee2:	b29a      	uxth	r2, r3
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	801a      	strh	r2, [r3, #0]
}
 8006ee8:	bf00      	nop
 8006eea:	370c      	adds	r7, #12
 8006eec:	46bd      	mov	sp, r7
 8006eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef2:	4770      	bx	lr

08006ef4 <I2C_ARPCmd>:
  * @param  NewState: new state of the I2Cx ARP. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_ARPCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8006ef4:	b480      	push	{r7}
 8006ef6:	b083      	sub	sp, #12
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	6078      	str	r0, [r7, #4]
 8006efc:	460b      	mov	r3, r1
 8006efe:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8006f00:	78fb      	ldrb	r3, [r7, #3]
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d008      	beq.n	8006f18 <I2C_ARPCmd+0x24>
  {
    /* Enable the selected I2C ARP */
    I2Cx->CR1 |= I2C_CR1_ENARP;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	881b      	ldrh	r3, [r3, #0]
 8006f0a:	b29b      	uxth	r3, r3
 8006f0c:	f043 0310 	orr.w	r3, r3, #16
 8006f10:	b29a      	uxth	r2, r3
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the selected I2C ARP */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ENARP);
  }
}
 8006f16:	e007      	b.n	8006f28 <I2C_ARPCmd+0x34>
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ENARP);
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	881b      	ldrh	r3, [r3, #0]
 8006f1c:	b29b      	uxth	r3, r3
 8006f1e:	f023 0310 	bic.w	r3, r3, #16
 8006f22:	b29a      	uxth	r2, r3
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	801a      	strh	r2, [r3, #0]
}
 8006f28:	bf00      	nop
 8006f2a:	370c      	adds	r7, #12
 8006f2c:	46bd      	mov	sp, r7
 8006f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f32:	4770      	bx	lr

08006f34 <I2C_SendData>:
  * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
  * @param  Data: Byte to be transmitted..
  * @retval None
  */
void I2C_SendData(I2C_TypeDef* I2Cx, uint8_t Data)
{
 8006f34:	b480      	push	{r7}
 8006f36:	b083      	sub	sp, #12
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	6078      	str	r0, [r7, #4]
 8006f3c:	460b      	mov	r3, r1
 8006f3e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Write in the DR register the data to be sent */
  I2Cx->DR = Data;
 8006f40:	78fb      	ldrb	r3, [r7, #3]
 8006f42:	b29a      	uxth	r2, r3
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	821a      	strh	r2, [r3, #16]
}
 8006f48:	bf00      	nop
 8006f4a:	370c      	adds	r7, #12
 8006f4c:	46bd      	mov	sp, r7
 8006f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f52:	4770      	bx	lr

08006f54 <I2C_ReceiveData>:
  * @brief  Returns the most recent received data by the I2Cx peripheral.
  * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
  * @retval The value of the received data.
  */
uint8_t I2C_ReceiveData(I2C_TypeDef* I2Cx)
{
 8006f54:	b480      	push	{r7}
 8006f56:	b083      	sub	sp, #12
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Return the data in the DR register */
  return (uint8_t)I2Cx->DR;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	8a1b      	ldrh	r3, [r3, #16]
 8006f60:	b29b      	uxth	r3, r3
 8006f62:	b2db      	uxtb	r3, r3
}
 8006f64:	4618      	mov	r0, r3
 8006f66:	370c      	adds	r7, #12
 8006f68:	46bd      	mov	sp, r7
 8006f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6e:	4770      	bx	lr

08006f70 <I2C_TransmitPEC>:
  * @param  NewState: new state of the I2C PEC transmission.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_TransmitPEC(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8006f70:	b480      	push	{r7}
 8006f72:	b083      	sub	sp, #12
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]
 8006f78:	460b      	mov	r3, r1
 8006f7a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8006f7c:	78fb      	ldrb	r3, [r7, #3]
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d008      	beq.n	8006f94 <I2C_TransmitPEC+0x24>
  {
    /* Enable the selected I2C PEC transmission */
    I2Cx->CR1 |= I2C_CR1_PEC;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	881b      	ldrh	r3, [r3, #0]
 8006f86:	b29b      	uxth	r3, r3
 8006f88:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006f8c:	b29a      	uxth	r2, r3
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the selected I2C PEC transmission */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PEC);
  }
}
 8006f92:	e007      	b.n	8006fa4 <I2C_TransmitPEC+0x34>
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PEC);
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	881b      	ldrh	r3, [r3, #0]
 8006f98:	b29b      	uxth	r3, r3
 8006f9a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006f9e:	b29a      	uxth	r2, r3
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	801a      	strh	r2, [r3, #0]
}
 8006fa4:	bf00      	nop
 8006fa6:	370c      	adds	r7, #12
 8006fa8:	46bd      	mov	sp, r7
 8006faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fae:	4770      	bx	lr

08006fb0 <I2C_PECPositionConfig>:
  *          is intended to used in I2C mode.
  *                
  * @retval None
  */
void I2C_PECPositionConfig(I2C_TypeDef* I2Cx, uint16_t I2C_PECPosition)
{
 8006fb0:	b480      	push	{r7}
 8006fb2:	b083      	sub	sp, #12
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	6078      	str	r0, [r7, #4]
 8006fb8:	460b      	mov	r3, r1
 8006fba:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_PEC_POSITION(I2C_PECPosition));
  if (I2C_PECPosition == I2C_PECPosition_Next)
 8006fbc:	887b      	ldrh	r3, [r7, #2]
 8006fbe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006fc2:	d108      	bne.n	8006fd6 <I2C_PECPositionConfig+0x26>
  {
    /* Next byte in shift register is PEC */
    I2Cx->CR1 |= I2C_PECPosition_Next;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	881b      	ldrh	r3, [r3, #0]
 8006fc8:	b29b      	uxth	r3, r3
 8006fca:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006fce:	b29a      	uxth	r2, r3
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Current byte in shift register is PEC */
    I2Cx->CR1 &= I2C_PECPosition_Current;
  }
}
 8006fd4:	e007      	b.n	8006fe6 <I2C_PECPositionConfig+0x36>
    I2Cx->CR1 &= I2C_PECPosition_Current;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	881b      	ldrh	r3, [r3, #0]
 8006fda:	b29b      	uxth	r3, r3
 8006fdc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006fe0:	b29a      	uxth	r2, r3
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	801a      	strh	r2, [r3, #0]
}
 8006fe6:	bf00      	nop
 8006fe8:	370c      	adds	r7, #12
 8006fea:	46bd      	mov	sp, r7
 8006fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff0:	4770      	bx	lr

08006ff2 <I2C_CalculatePEC>:
  * @param  NewState: new state of the I2Cx PEC value calculation.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_CalculatePEC(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8006ff2:	b480      	push	{r7}
 8006ff4:	b083      	sub	sp, #12
 8006ff6:	af00      	add	r7, sp, #0
 8006ff8:	6078      	str	r0, [r7, #4]
 8006ffa:	460b      	mov	r3, r1
 8006ffc:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8006ffe:	78fb      	ldrb	r3, [r7, #3]
 8007000:	2b00      	cmp	r3, #0
 8007002:	d008      	beq.n	8007016 <I2C_CalculatePEC+0x24>
  {
    /* Enable the selected I2C PEC calculation */
    I2Cx->CR1 |= I2C_CR1_ENPEC;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	881b      	ldrh	r3, [r3, #0]
 8007008:	b29b      	uxth	r3, r3
 800700a:	f043 0320 	orr.w	r3, r3, #32
 800700e:	b29a      	uxth	r2, r3
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the selected I2C PEC calculation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ENPEC);
  }
}
 8007014:	e007      	b.n	8007026 <I2C_CalculatePEC+0x34>
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ENPEC);
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	881b      	ldrh	r3, [r3, #0]
 800701a:	b29b      	uxth	r3, r3
 800701c:	f023 0320 	bic.w	r3, r3, #32
 8007020:	b29a      	uxth	r2, r3
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	801a      	strh	r2, [r3, #0]
}
 8007026:	bf00      	nop
 8007028:	370c      	adds	r7, #12
 800702a:	46bd      	mov	sp, r7
 800702c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007030:	4770      	bx	lr

08007032 <I2C_GetPEC>:
  * @brief  Returns the PEC value for the specified I2C.
  * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
  * @retval The PEC value.
  */
uint8_t I2C_GetPEC(I2C_TypeDef* I2Cx)
{
 8007032:	b480      	push	{r7}
 8007034:	b083      	sub	sp, #12
 8007036:	af00      	add	r7, sp, #0
 8007038:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Return the selected I2C PEC value */
  return ((I2Cx->SR2) >> 8);
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	8b1b      	ldrh	r3, [r3, #24]
 800703e:	b29b      	uxth	r3, r3
 8007040:	0a1b      	lsrs	r3, r3, #8
 8007042:	b29b      	uxth	r3, r3
 8007044:	b2db      	uxtb	r3, r3
}
 8007046:	4618      	mov	r0, r3
 8007048:	370c      	adds	r7, #12
 800704a:	46bd      	mov	sp, r7
 800704c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007050:	4770      	bx	lr

08007052 <I2C_DMACmd>:
  * @param  NewState: new state of the I2C DMA transfer.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_DMACmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8007052:	b480      	push	{r7}
 8007054:	b083      	sub	sp, #12
 8007056:	af00      	add	r7, sp, #0
 8007058:	6078      	str	r0, [r7, #4]
 800705a:	460b      	mov	r3, r1
 800705c:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800705e:	78fb      	ldrb	r3, [r7, #3]
 8007060:	2b00      	cmp	r3, #0
 8007062:	d008      	beq.n	8007076 <I2C_DMACmd+0x24>
  {
    /* Enable the selected I2C DMA requests */
    I2Cx->CR2 |= I2C_CR2_DMAEN;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	889b      	ldrh	r3, [r3, #4]
 8007068:	b29b      	uxth	r3, r3
 800706a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800706e:	b29a      	uxth	r2, r3
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	809a      	strh	r2, [r3, #4]
  else
  {
    /* Disable the selected I2C DMA requests */
    I2Cx->CR2 &= (uint16_t)~((uint16_t)I2C_CR2_DMAEN);
  }
}
 8007074:	e007      	b.n	8007086 <I2C_DMACmd+0x34>
    I2Cx->CR2 &= (uint16_t)~((uint16_t)I2C_CR2_DMAEN);
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	889b      	ldrh	r3, [r3, #4]
 800707a:	b29b      	uxth	r3, r3
 800707c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007080:	b29a      	uxth	r2, r3
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	809a      	strh	r2, [r3, #4]
}
 8007086:	bf00      	nop
 8007088:	370c      	adds	r7, #12
 800708a:	46bd      	mov	sp, r7
 800708c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007090:	4770      	bx	lr

08007092 <I2C_DMALastTransferCmd>:
  * @param  NewState: new state of the I2C DMA last transfer.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_DMALastTransferCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8007092:	b480      	push	{r7}
 8007094:	b083      	sub	sp, #12
 8007096:	af00      	add	r7, sp, #0
 8007098:	6078      	str	r0, [r7, #4]
 800709a:	460b      	mov	r3, r1
 800709c:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800709e:	78fb      	ldrb	r3, [r7, #3]
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d008      	beq.n	80070b6 <I2C_DMALastTransferCmd+0x24>
  {
    /* Next DMA transfer is the last transfer */
    I2Cx->CR2 |= I2C_CR2_LAST;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	889b      	ldrh	r3, [r3, #4]
 80070a8:	b29b      	uxth	r3, r3
 80070aa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80070ae:	b29a      	uxth	r2, r3
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	809a      	strh	r2, [r3, #4]
  else
  {
    /* Next DMA transfer is not the last transfer */
    I2Cx->CR2 &= (uint16_t)~((uint16_t)I2C_CR2_LAST);
  }
}
 80070b4:	e007      	b.n	80070c6 <I2C_DMALastTransferCmd+0x34>
    I2Cx->CR2 &= (uint16_t)~((uint16_t)I2C_CR2_LAST);
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	889b      	ldrh	r3, [r3, #4]
 80070ba:	b29b      	uxth	r3, r3
 80070bc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80070c0:	b29a      	uxth	r2, r3
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	809a      	strh	r2, [r3, #4]
}
 80070c6:	bf00      	nop
 80070c8:	370c      	adds	r7, #12
 80070ca:	46bd      	mov	sp, r7
 80070cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d0:	4770      	bx	lr

080070d2 <I2C_ReadRegister>:
  *            @arg I2C_Register_CCR:   CCR register.
  *            @arg I2C_Register_TRISE: TRISE register.
  * @retval The value of the read register.
  */
uint16_t I2C_ReadRegister(I2C_TypeDef* I2Cx, uint8_t I2C_Register)
{
 80070d2:	b480      	push	{r7}
 80070d4:	b085      	sub	sp, #20
 80070d6:	af00      	add	r7, sp, #0
 80070d8:	6078      	str	r0, [r7, #4]
 80070da:	460b      	mov	r3, r1
 80070dc:	70fb      	strb	r3, [r7, #3]
  __IO uint32_t tmp = 0;
 80070de:	2300      	movs	r3, #0
 80070e0:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_REGISTER(I2C_Register));

  tmp = (uint32_t) I2Cx;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	60fb      	str	r3, [r7, #12]
  tmp += I2C_Register;
 80070e6:	78fa      	ldrb	r2, [r7, #3]
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	4413      	add	r3, r2
 80070ec:	60fb      	str	r3, [r7, #12]

  /* Return the selected register value */
  return (*(__IO uint16_t *) tmp);
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	881b      	ldrh	r3, [r3, #0]
 80070f2:	b29b      	uxth	r3, r3
}
 80070f4:	4618      	mov	r0, r3
 80070f6:	3714      	adds	r7, #20
 80070f8:	46bd      	mov	sp, r7
 80070fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fe:	4770      	bx	lr

08007100 <I2C_ITConfig>:
  * @param  NewState: new state of the specified I2C interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_ITConfig(I2C_TypeDef* I2Cx, uint16_t I2C_IT, FunctionalState NewState)
{
 8007100:	b480      	push	{r7}
 8007102:	b083      	sub	sp, #12
 8007104:	af00      	add	r7, sp, #0
 8007106:	6078      	str	r0, [r7, #4]
 8007108:	460b      	mov	r3, r1
 800710a:	807b      	strh	r3, [r7, #2]
 800710c:	4613      	mov	r3, r2
 800710e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_I2C_CONFIG_IT(I2C_IT));
  
  if (NewState != DISABLE)
 8007110:	787b      	ldrb	r3, [r7, #1]
 8007112:	2b00      	cmp	r3, #0
 8007114:	d008      	beq.n	8007128 <I2C_ITConfig+0x28>
  {
    /* Enable the selected I2C interrupts */
    I2Cx->CR2 |= I2C_IT;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	889b      	ldrh	r3, [r3, #4]
 800711a:	b29a      	uxth	r2, r3
 800711c:	887b      	ldrh	r3, [r7, #2]
 800711e:	4313      	orrs	r3, r2
 8007120:	b29a      	uxth	r2, r3
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	809a      	strh	r2, [r3, #4]
  else
  {
    /* Disable the selected I2C interrupts */
    I2Cx->CR2 &= (uint16_t)~I2C_IT;
  }
}
 8007126:	e009      	b.n	800713c <I2C_ITConfig+0x3c>
    I2Cx->CR2 &= (uint16_t)~I2C_IT;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	889b      	ldrh	r3, [r3, #4]
 800712c:	b29a      	uxth	r2, r3
 800712e:	887b      	ldrh	r3, [r7, #2]
 8007130:	43db      	mvns	r3, r3
 8007132:	b29b      	uxth	r3, r3
 8007134:	4013      	ands	r3, r2
 8007136:	b29a      	uxth	r2, r3
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	809a      	strh	r2, [r3, #4]
}
 800713c:	bf00      	nop
 800713e:	370c      	adds	r7, #12
 8007140:	46bd      	mov	sp, r7
 8007142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007146:	4770      	bx	lr

08007148 <I2C_CheckEvent>:
  * @retval An ErrorStatus enumeration value:
  *           - SUCCESS: Last event is equal to the I2C_EVENT
  *           - ERROR: Last event is different from the I2C_EVENT
  */
ErrorStatus I2C_CheckEvent(I2C_TypeDef* I2Cx, uint32_t I2C_EVENT)
{
 8007148:	b480      	push	{r7}
 800714a:	b087      	sub	sp, #28
 800714c:	af00      	add	r7, sp, #0
 800714e:	6078      	str	r0, [r7, #4]
 8007150:	6039      	str	r1, [r7, #0]
  uint32_t lastevent = 0;
 8007152:	2300      	movs	r3, #0
 8007154:	613b      	str	r3, [r7, #16]
  uint32_t flag1 = 0, flag2 = 0;
 8007156:	2300      	movs	r3, #0
 8007158:	60fb      	str	r3, [r7, #12]
 800715a:	2300      	movs	r3, #0
 800715c:	60bb      	str	r3, [r7, #8]
  ErrorStatus status = ERROR;
 800715e:	2300      	movs	r3, #0
 8007160:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_EVENT(I2C_EVENT));

  /* Read the I2Cx status register */
  flag1 = I2Cx->SR1;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	8a9b      	ldrh	r3, [r3, #20]
 8007166:	b29b      	uxth	r3, r3
 8007168:	60fb      	str	r3, [r7, #12]
  flag2 = I2Cx->SR2;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	8b1b      	ldrh	r3, [r3, #24]
 800716e:	b29b      	uxth	r3, r3
 8007170:	60bb      	str	r3, [r7, #8]
  flag2 = flag2 << 16;
 8007172:	68bb      	ldr	r3, [r7, #8]
 8007174:	041b      	lsls	r3, r3, #16
 8007176:	60bb      	str	r3, [r7, #8]

  /* Get the last event value from I2C status register */
  lastevent = (flag1 | flag2) & FLAG_MASK;
 8007178:	68fa      	ldr	r2, [r7, #12]
 800717a:	68bb      	ldr	r3, [r7, #8]
 800717c:	4313      	orrs	r3, r2
 800717e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007182:	613b      	str	r3, [r7, #16]

  /* Check whether the last event contains the I2C_EVENT */
  if ((lastevent & I2C_EVENT) == I2C_EVENT)
 8007184:	693a      	ldr	r2, [r7, #16]
 8007186:	683b      	ldr	r3, [r7, #0]
 8007188:	4013      	ands	r3, r2
 800718a:	683a      	ldr	r2, [r7, #0]
 800718c:	429a      	cmp	r2, r3
 800718e:	d102      	bne.n	8007196 <I2C_CheckEvent+0x4e>
  {
    /* SUCCESS: last event is equal to I2C_EVENT */
    status = SUCCESS;
 8007190:	2301      	movs	r3, #1
 8007192:	75fb      	strb	r3, [r7, #23]
 8007194:	e001      	b.n	800719a <I2C_CheckEvent+0x52>
  }
  else
  {
    /* ERROR: last event is different from I2C_EVENT */
    status = ERROR;
 8007196:	2300      	movs	r3, #0
 8007198:	75fb      	strb	r3, [r7, #23]
  }
  /* Return status */
  return status;
 800719a:	7dfb      	ldrb	r3, [r7, #23]
}
 800719c:	4618      	mov	r0, r3
 800719e:	371c      	adds	r7, #28
 80071a0:	46bd      	mov	sp, r7
 80071a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a6:	4770      	bx	lr

080071a8 <I2C_GetLastEvent>:
  *         in stm32f4xx_i2c.h file.
  *    
  * @retval The last event
  */
uint32_t I2C_GetLastEvent(I2C_TypeDef* I2Cx)
{
 80071a8:	b480      	push	{r7}
 80071aa:	b087      	sub	sp, #28
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	6078      	str	r0, [r7, #4]
  uint32_t lastevent = 0;
 80071b0:	2300      	movs	r3, #0
 80071b2:	617b      	str	r3, [r7, #20]
  uint32_t flag1 = 0, flag2 = 0;
 80071b4:	2300      	movs	r3, #0
 80071b6:	613b      	str	r3, [r7, #16]
 80071b8:	2300      	movs	r3, #0
 80071ba:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  /* Read the I2Cx status register */
  flag1 = I2Cx->SR1;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	8a9b      	ldrh	r3, [r3, #20]
 80071c0:	b29b      	uxth	r3, r3
 80071c2:	613b      	str	r3, [r7, #16]
  flag2 = I2Cx->SR2;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	8b1b      	ldrh	r3, [r3, #24]
 80071c8:	b29b      	uxth	r3, r3
 80071ca:	60fb      	str	r3, [r7, #12]
  flag2 = flag2 << 16;
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	041b      	lsls	r3, r3, #16
 80071d0:	60fb      	str	r3, [r7, #12]

  /* Get the last event value from I2C status register */
  lastevent = (flag1 | flag2) & FLAG_MASK;
 80071d2:	693a      	ldr	r2, [r7, #16]
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	4313      	orrs	r3, r2
 80071d8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80071dc:	617b      	str	r3, [r7, #20]

  /* Return status */
  return lastevent;
 80071de:	697b      	ldr	r3, [r7, #20]
}
 80071e0:	4618      	mov	r0, r3
 80071e2:	371c      	adds	r7, #28
 80071e4:	46bd      	mov	sp, r7
 80071e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ea:	4770      	bx	lr

080071ec <I2C_GetFlagStatus>:
  *                                Address matched flag (Slave mode)"ENDAD"
  *            @arg I2C_FLAG_SB: Start bit flag (Master mode)
  * @retval The new state of I2C_FLAG (SET or RESET).
  */
FlagStatus I2C_GetFlagStatus(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG)
{
 80071ec:	b480      	push	{r7}
 80071ee:	b087      	sub	sp, #28
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	6078      	str	r0, [r7, #4]
 80071f4:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 80071f6:	2300      	movs	r3, #0
 80071f8:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t i2creg = 0, i2cxbase = 0;
 80071fa:	2300      	movs	r3, #0
 80071fc:	613b      	str	r3, [r7, #16]
 80071fe:	2300      	movs	r3, #0
 8007200:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_FLAG(I2C_FLAG));

  /* Get the I2Cx peripheral base address */
  i2cxbase = (uint32_t)I2Cx;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	60fb      	str	r3, [r7, #12]
  
  /* Read flag register index */
  i2creg = I2C_FLAG >> 28;
 8007206:	683b      	ldr	r3, [r7, #0]
 8007208:	0f1b      	lsrs	r3, r3, #28
 800720a:	613b      	str	r3, [r7, #16]
  
  /* Get bit[23:0] of the flag */
  I2C_FLAG &= FLAG_MASK;
 800720c:	683b      	ldr	r3, [r7, #0]
 800720e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007212:	603b      	str	r3, [r7, #0]
  
  if(i2creg != 0)
 8007214:	693b      	ldr	r3, [r7, #16]
 8007216:	2b00      	cmp	r3, #0
 8007218:	d003      	beq.n	8007222 <I2C_GetFlagStatus+0x36>
  {
    /* Get the I2Cx SR1 register address */
    i2cxbase += 0x14;
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	3314      	adds	r3, #20
 800721e:	60fb      	str	r3, [r7, #12]
 8007220:	e005      	b.n	800722e <I2C_GetFlagStatus+0x42>
  }
  else
  {
    /* Flag in I2Cx SR2 Register */
    I2C_FLAG = (uint32_t)(I2C_FLAG >> 16);
 8007222:	683b      	ldr	r3, [r7, #0]
 8007224:	0c1b      	lsrs	r3, r3, #16
 8007226:	603b      	str	r3, [r7, #0]
    /* Get the I2Cx SR2 register address */
    i2cxbase += 0x18;
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	3318      	adds	r3, #24
 800722c:	60fb      	str	r3, [r7, #12]
  }
  
  if(((*(__IO uint32_t *)i2cxbase) & I2C_FLAG) != (uint32_t)RESET)
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	681a      	ldr	r2, [r3, #0]
 8007232:	683b      	ldr	r3, [r7, #0]
 8007234:	4013      	ands	r3, r2
 8007236:	2b00      	cmp	r3, #0
 8007238:	d002      	beq.n	8007240 <I2C_GetFlagStatus+0x54>
  {
    /* I2C_FLAG is set */
    bitstatus = SET;
 800723a:	2301      	movs	r3, #1
 800723c:	75fb      	strb	r3, [r7, #23]
 800723e:	e001      	b.n	8007244 <I2C_GetFlagStatus+0x58>
  }
  else
  {
    /* I2C_FLAG is reset */
    bitstatus = RESET;
 8007240:	2300      	movs	r3, #0
 8007242:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return the I2C_FLAG status */
  return  bitstatus;
 8007244:	7dfb      	ldrb	r3, [r7, #23]
}
 8007246:	4618      	mov	r0, r3
 8007248:	371c      	adds	r7, #28
 800724a:	46bd      	mov	sp, r7
 800724c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007250:	4770      	bx	lr

08007252 <I2C_ClearFlag>:
  *          register (I2C_SendData()).
  *  
  * @retval None
  */
void I2C_ClearFlag(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG)
{
 8007252:	b480      	push	{r7}
 8007254:	b085      	sub	sp, #20
 8007256:	af00      	add	r7, sp, #0
 8007258:	6078      	str	r0, [r7, #4]
 800725a:	6039      	str	r1, [r7, #0]
  uint32_t flagpos = 0;
 800725c:	2300      	movs	r3, #0
 800725e:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_CLEAR_FLAG(I2C_FLAG));
  /* Get the I2C flag position */
  flagpos = I2C_FLAG & FLAG_MASK;
 8007260:	683b      	ldr	r3, [r7, #0]
 8007262:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007266:	60fb      	str	r3, [r7, #12]
  /* Clear the selected I2C flag */
  I2Cx->SR1 = (uint16_t)~flagpos;
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	b29b      	uxth	r3, r3
 800726c:	43db      	mvns	r3, r3
 800726e:	b29a      	uxth	r2, r3
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	829a      	strh	r2, [r3, #20]
}
 8007274:	bf00      	nop
 8007276:	3714      	adds	r7, #20
 8007278:	46bd      	mov	sp, r7
 800727a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800727e:	4770      	bx	lr

08007280 <I2C_GetITStatus>:
  *                              Address matched flag (Slave mode)"ENDAD"
  *            @arg I2C_IT_SB: Start bit flag (Master mode)
  * @retval The new state of I2C_IT (SET or RESET).
  */
ITStatus I2C_GetITStatus(I2C_TypeDef* I2Cx, uint32_t I2C_IT)
{
 8007280:	b480      	push	{r7}
 8007282:	b085      	sub	sp, #20
 8007284:	af00      	add	r7, sp, #0
 8007286:	6078      	str	r0, [r7, #4]
 8007288:	6039      	str	r1, [r7, #0]
  ITStatus bitstatus = RESET;
 800728a:	2300      	movs	r3, #0
 800728c:	73fb      	strb	r3, [r7, #15]
  uint32_t enablestatus = 0;
 800728e:	2300      	movs	r3, #0
 8007290:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_IT(I2C_IT));

  /* Check if the interrupt source is enabled or not */
  enablestatus = (uint32_t)(((I2C_IT & ITEN_MASK) >> 16) & (I2Cx->CR2)) ;
 8007292:	683b      	ldr	r3, [r7, #0]
 8007294:	0c1b      	lsrs	r3, r3, #16
 8007296:	687a      	ldr	r2, [r7, #4]
 8007298:	8892      	ldrh	r2, [r2, #4]
 800729a:	b292      	uxth	r2, r2
 800729c:	4013      	ands	r3, r2
 800729e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80072a2:	60bb      	str	r3, [r7, #8]
  
  /* Get bit[23:0] of the flag */
  I2C_IT &= FLAG_MASK;
 80072a4:	683b      	ldr	r3, [r7, #0]
 80072a6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80072aa:	603b      	str	r3, [r7, #0]

  /* Check the status of the specified I2C flag */
  if (((I2Cx->SR1 & I2C_IT) != (uint32_t)RESET) && enablestatus)
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	8a9b      	ldrh	r3, [r3, #20]
 80072b0:	b29b      	uxth	r3, r3
 80072b2:	461a      	mov	r2, r3
 80072b4:	683b      	ldr	r3, [r7, #0]
 80072b6:	4013      	ands	r3, r2
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d005      	beq.n	80072c8 <I2C_GetITStatus+0x48>
 80072bc:	68bb      	ldr	r3, [r7, #8]
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d002      	beq.n	80072c8 <I2C_GetITStatus+0x48>
  {
    /* I2C_IT is set */
    bitstatus = SET;
 80072c2:	2301      	movs	r3, #1
 80072c4:	73fb      	strb	r3, [r7, #15]
 80072c6:	e001      	b.n	80072cc <I2C_GetITStatus+0x4c>
  }
  else
  {
    /* I2C_IT is reset */
    bitstatus = RESET;
 80072c8:	2300      	movs	r3, #0
 80072ca:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the I2C_IT status */
  return  bitstatus;
 80072cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80072ce:	4618      	mov	r0, r3
 80072d0:	3714      	adds	r7, #20
 80072d2:	46bd      	mov	sp, r7
 80072d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d8:	4770      	bx	lr

080072da <I2C_ClearITPendingBit>:
  *          I2C_SR1 register (I2C_GetITStatus()) followed by a write operation to 
  *          I2C_DR register (I2C_SendData()).
  * @retval None
  */
void I2C_ClearITPendingBit(I2C_TypeDef* I2Cx, uint32_t I2C_IT)
{
 80072da:	b480      	push	{r7}
 80072dc:	b085      	sub	sp, #20
 80072de:	af00      	add	r7, sp, #0
 80072e0:	6078      	str	r0, [r7, #4]
 80072e2:	6039      	str	r1, [r7, #0]
  uint32_t flagpos = 0;
 80072e4:	2300      	movs	r3, #0
 80072e6:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_CLEAR_IT(I2C_IT));

  /* Get the I2C flag position */
  flagpos = I2C_IT & FLAG_MASK;
 80072e8:	683b      	ldr	r3, [r7, #0]
 80072ea:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80072ee:	60fb      	str	r3, [r7, #12]

  /* Clear the selected I2C flag */
  I2Cx->SR1 = (uint16_t)~flagpos;
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	b29b      	uxth	r3, r3
 80072f4:	43db      	mvns	r3, r3
 80072f6:	b29a      	uxth	r2, r3
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	829a      	strh	r2, [r3, #20]
}
 80072fc:	bf00      	nop
 80072fe:	3714      	adds	r7, #20
 8007300:	46bd      	mov	sp, r7
 8007302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007306:	4770      	bx	lr

08007308 <IWDG_WriteAccessCmd>:
  *            @arg IWDG_WriteAccess_Enable: Enable write access to IWDG_PR and IWDG_RLR registers
  *            @arg IWDG_WriteAccess_Disable: Disable write access to IWDG_PR and IWDG_RLR registers
  * @retval None
  */
void IWDG_WriteAccessCmd(uint16_t IWDG_WriteAccess)
{
 8007308:	b480      	push	{r7}
 800730a:	b083      	sub	sp, #12
 800730c:	af00      	add	r7, sp, #0
 800730e:	4603      	mov	r3, r0
 8007310:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_IWDG_WRITE_ACCESS(IWDG_WriteAccess));
  IWDG->KR = IWDG_WriteAccess;
 8007312:	4a04      	ldr	r2, [pc, #16]	; (8007324 <IWDG_WriteAccessCmd+0x1c>)
 8007314:	88fb      	ldrh	r3, [r7, #6]
 8007316:	6013      	str	r3, [r2, #0]
}
 8007318:	bf00      	nop
 800731a:	370c      	adds	r7, #12
 800731c:	46bd      	mov	sp, r7
 800731e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007322:	4770      	bx	lr
 8007324:	40003000 	.word	0x40003000

08007328 <IWDG_SetPrescaler>:
  *            @arg IWDG_Prescaler_128: IWDG prescaler set to 128
  *            @arg IWDG_Prescaler_256: IWDG prescaler set to 256
  * @retval None
  */
void IWDG_SetPrescaler(uint8_t IWDG_Prescaler)
{
 8007328:	b480      	push	{r7}
 800732a:	b083      	sub	sp, #12
 800732c:	af00      	add	r7, sp, #0
 800732e:	4603      	mov	r3, r0
 8007330:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_IWDG_PRESCALER(IWDG_Prescaler));
  IWDG->PR = IWDG_Prescaler;
 8007332:	4a04      	ldr	r2, [pc, #16]	; (8007344 <IWDG_SetPrescaler+0x1c>)
 8007334:	79fb      	ldrb	r3, [r7, #7]
 8007336:	6053      	str	r3, [r2, #4]
}
 8007338:	bf00      	nop
 800733a:	370c      	adds	r7, #12
 800733c:	46bd      	mov	sp, r7
 800733e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007342:	4770      	bx	lr
 8007344:	40003000 	.word	0x40003000

08007348 <IWDG_SetReload>:
  * @param  Reload: specifies the IWDG Reload value.
  *          This parameter must be a number between 0 and 0x0FFF.
  * @retval None
  */
void IWDG_SetReload(uint16_t Reload)
{
 8007348:	b480      	push	{r7}
 800734a:	b083      	sub	sp, #12
 800734c:	af00      	add	r7, sp, #0
 800734e:	4603      	mov	r3, r0
 8007350:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_IWDG_RELOAD(Reload));
  IWDG->RLR = Reload;
 8007352:	4a04      	ldr	r2, [pc, #16]	; (8007364 <IWDG_SetReload+0x1c>)
 8007354:	88fb      	ldrh	r3, [r7, #6]
 8007356:	6093      	str	r3, [r2, #8]
}
 8007358:	bf00      	nop
 800735a:	370c      	adds	r7, #12
 800735c:	46bd      	mov	sp, r7
 800735e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007362:	4770      	bx	lr
 8007364:	40003000 	.word	0x40003000

08007368 <IWDG_ReloadCounter>:
  *         (write access to IWDG_PR and IWDG_RLR registers disabled).
  * @param  None
  * @retval None
  */
void IWDG_ReloadCounter(void)
{
 8007368:	b480      	push	{r7}
 800736a:	af00      	add	r7, sp, #0
  IWDG->KR = KR_KEY_RELOAD;
 800736c:	4b04      	ldr	r3, [pc, #16]	; (8007380 <IWDG_ReloadCounter+0x18>)
 800736e:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8007372:	601a      	str	r2, [r3, #0]
}
 8007374:	bf00      	nop
 8007376:	46bd      	mov	sp, r7
 8007378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737c:	4770      	bx	lr
 800737e:	bf00      	nop
 8007380:	40003000 	.word	0x40003000

08007384 <IWDG_Enable>:
  * @brief  Enables IWDG (write access to IWDG_PR and IWDG_RLR registers disabled).
  * @param  None
  * @retval None
  */
void IWDG_Enable(void)
{
 8007384:	b480      	push	{r7}
 8007386:	af00      	add	r7, sp, #0
  IWDG->KR = KR_KEY_ENABLE;
 8007388:	4b04      	ldr	r3, [pc, #16]	; (800739c <IWDG_Enable+0x18>)
 800738a:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 800738e:	601a      	str	r2, [r3, #0]
}
 8007390:	bf00      	nop
 8007392:	46bd      	mov	sp, r7
 8007394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007398:	4770      	bx	lr
 800739a:	bf00      	nop
 800739c:	40003000 	.word	0x40003000

080073a0 <IWDG_GetFlagStatus>:
  *            @arg IWDG_FLAG_PVU: Prescaler Value Update on going
  *            @arg IWDG_FLAG_RVU: Reload Value Update on going
  * @retval The new state of IWDG_FLAG (SET or RESET).
  */
FlagStatus IWDG_GetFlagStatus(uint16_t IWDG_FLAG)
{
 80073a0:	b480      	push	{r7}
 80073a2:	b085      	sub	sp, #20
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	4603      	mov	r3, r0
 80073a8:	80fb      	strh	r3, [r7, #6]
  FlagStatus bitstatus = RESET;
 80073aa:	2300      	movs	r3, #0
 80073ac:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_IWDG_FLAG(IWDG_FLAG));
  if ((IWDG->SR & IWDG_FLAG) != (uint32_t)RESET)
 80073ae:	4b09      	ldr	r3, [pc, #36]	; (80073d4 <IWDG_GetFlagStatus+0x34>)
 80073b0:	68da      	ldr	r2, [r3, #12]
 80073b2:	88fb      	ldrh	r3, [r7, #6]
 80073b4:	4013      	ands	r3, r2
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d002      	beq.n	80073c0 <IWDG_GetFlagStatus+0x20>
  {
    bitstatus = SET;
 80073ba:	2301      	movs	r3, #1
 80073bc:	73fb      	strb	r3, [r7, #15]
 80073be:	e001      	b.n	80073c4 <IWDG_GetFlagStatus+0x24>
  }
  else
  {
    bitstatus = RESET;
 80073c0:	2300      	movs	r3, #0
 80073c2:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the flag status */
  return bitstatus;
 80073c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80073c6:	4618      	mov	r0, r3
 80073c8:	3714      	adds	r7, #20
 80073ca:	46bd      	mov	sp, r7
 80073cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d0:	4770      	bx	lr
 80073d2:	bf00      	nop
 80073d4:	40003000 	.word	0x40003000

080073d8 <LTDC_DeInit>:
  * @param  None
  * @retval None
  */

void LTDC_DeInit(void)
{
 80073d8:	b580      	push	{r7, lr}
 80073da:	af00      	add	r7, sp, #0
  /* Enable LTDC reset state */
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_LTDC, ENABLE);
 80073dc:	2101      	movs	r1, #1
 80073de:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 80073e2:	f001 fbbd 	bl	8008b60 <RCC_APB2PeriphResetCmd>
  /* Release LTDC from reset state */
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_LTDC, DISABLE);
 80073e6:	2100      	movs	r1, #0
 80073e8:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 80073ec:	f001 fbb8 	bl	8008b60 <RCC_APB2PeriphResetCmd>
}
 80073f0:	bf00      	nop
 80073f2:	bd80      	pop	{r7, pc}

080073f4 <LTDC_Init>:
  *         the configuration information for the specified LTDC peripheral.
  * @retval None
  */

void LTDC_Init(LTDC_InitTypeDef* LTDC_InitStruct)
{
 80073f4:	b480      	push	{r7}
 80073f6:	b089      	sub	sp, #36	; 0x24
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	6078      	str	r0, [r7, #4]
  uint32_t horizontalsync = 0;
 80073fc:	2300      	movs	r3, #0
 80073fe:	61fb      	str	r3, [r7, #28]
  uint32_t accumulatedHBP = 0;
 8007400:	2300      	movs	r3, #0
 8007402:	61bb      	str	r3, [r7, #24]
  uint32_t accumulatedactiveW = 0;
 8007404:	2300      	movs	r3, #0
 8007406:	617b      	str	r3, [r7, #20]
  uint32_t totalwidth = 0;
 8007408:	2300      	movs	r3, #0
 800740a:	613b      	str	r3, [r7, #16]
  uint32_t backgreen = 0;
 800740c:	2300      	movs	r3, #0
 800740e:	60fb      	str	r3, [r7, #12]
  uint32_t backred = 0;
 8007410:	2300      	movs	r3, #0
 8007412:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LTDC_BackBlueValue(LTDC_InitStruct->LTDC_BackgroundBlueValue));
  assert_param(IS_LTDC_BackGreenValue(LTDC_InitStruct->LTDC_BackgroundGreenValue));
  assert_param(IS_LTDC_BackRedValue(LTDC_InitStruct->LTDC_BackgroundRedValue));

  /* Sets Synchronization size */
  LTDC->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8007414:	4b40      	ldr	r3, [pc, #256]	; (8007518 <LTDC_Init+0x124>)
 8007416:	689a      	ldr	r2, [r3, #8]
 8007418:	493f      	ldr	r1, [pc, #252]	; (8007518 <LTDC_Init+0x124>)
 800741a:	4b40      	ldr	r3, [pc, #256]	; (800751c <LTDC_Init+0x128>)
 800741c:	4013      	ands	r3, r2
 800741e:	608b      	str	r3, [r1, #8]
  horizontalsync = (LTDC_InitStruct->LTDC_HorizontalSync << 16);
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	691b      	ldr	r3, [r3, #16]
 8007424:	041b      	lsls	r3, r3, #16
 8007426:	61fb      	str	r3, [r7, #28]
  LTDC->SSCR |= (horizontalsync | LTDC_InitStruct->LTDC_VerticalSync);
 8007428:	4b3b      	ldr	r3, [pc, #236]	; (8007518 <LTDC_Init+0x124>)
 800742a:	689a      	ldr	r2, [r3, #8]
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	6959      	ldr	r1, [r3, #20]
 8007430:	69fb      	ldr	r3, [r7, #28]
 8007432:	430b      	orrs	r3, r1
 8007434:	4938      	ldr	r1, [pc, #224]	; (8007518 <LTDC_Init+0x124>)
 8007436:	4313      	orrs	r3, r2
 8007438:	608b      	str	r3, [r1, #8]

  /* Sets Accumulated Back porch */
  LTDC->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800743a:	4b37      	ldr	r3, [pc, #220]	; (8007518 <LTDC_Init+0x124>)
 800743c:	68da      	ldr	r2, [r3, #12]
 800743e:	4936      	ldr	r1, [pc, #216]	; (8007518 <LTDC_Init+0x124>)
 8007440:	4b36      	ldr	r3, [pc, #216]	; (800751c <LTDC_Init+0x128>)
 8007442:	4013      	ands	r3, r2
 8007444:	60cb      	str	r3, [r1, #12]
  accumulatedHBP = (LTDC_InitStruct->LTDC_AccumulatedHBP << 16);
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	699b      	ldr	r3, [r3, #24]
 800744a:	041b      	lsls	r3, r3, #16
 800744c:	61bb      	str	r3, [r7, #24]
  LTDC->BPCR |= (accumulatedHBP | LTDC_InitStruct->LTDC_AccumulatedVBP);
 800744e:	4b32      	ldr	r3, [pc, #200]	; (8007518 <LTDC_Init+0x124>)
 8007450:	68da      	ldr	r2, [r3, #12]
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	69d9      	ldr	r1, [r3, #28]
 8007456:	69bb      	ldr	r3, [r7, #24]
 8007458:	430b      	orrs	r3, r1
 800745a:	492f      	ldr	r1, [pc, #188]	; (8007518 <LTDC_Init+0x124>)
 800745c:	4313      	orrs	r3, r2
 800745e:	60cb      	str	r3, [r1, #12]

  /* Sets Accumulated Active Width */
  LTDC->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8007460:	4b2d      	ldr	r3, [pc, #180]	; (8007518 <LTDC_Init+0x124>)
 8007462:	691a      	ldr	r2, [r3, #16]
 8007464:	492c      	ldr	r1, [pc, #176]	; (8007518 <LTDC_Init+0x124>)
 8007466:	4b2d      	ldr	r3, [pc, #180]	; (800751c <LTDC_Init+0x128>)
 8007468:	4013      	ands	r3, r2
 800746a:	610b      	str	r3, [r1, #16]
  accumulatedactiveW = (LTDC_InitStruct->LTDC_AccumulatedActiveW << 16);
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	6a1b      	ldr	r3, [r3, #32]
 8007470:	041b      	lsls	r3, r3, #16
 8007472:	617b      	str	r3, [r7, #20]
  LTDC->AWCR |= (accumulatedactiveW | LTDC_InitStruct->LTDC_AccumulatedActiveH);
 8007474:	4b28      	ldr	r3, [pc, #160]	; (8007518 <LTDC_Init+0x124>)
 8007476:	691a      	ldr	r2, [r3, #16]
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800747c:	697b      	ldr	r3, [r7, #20]
 800747e:	430b      	orrs	r3, r1
 8007480:	4925      	ldr	r1, [pc, #148]	; (8007518 <LTDC_Init+0x124>)
 8007482:	4313      	orrs	r3, r2
 8007484:	610b      	str	r3, [r1, #16]

  /* Sets Total Width */
  LTDC->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8007486:	4b24      	ldr	r3, [pc, #144]	; (8007518 <LTDC_Init+0x124>)
 8007488:	695a      	ldr	r2, [r3, #20]
 800748a:	4923      	ldr	r1, [pc, #140]	; (8007518 <LTDC_Init+0x124>)
 800748c:	4b23      	ldr	r3, [pc, #140]	; (800751c <LTDC_Init+0x128>)
 800748e:	4013      	ands	r3, r2
 8007490:	614b      	str	r3, [r1, #20]
  totalwidth = (LTDC_InitStruct->LTDC_TotalWidth << 16);
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007496:	041b      	lsls	r3, r3, #16
 8007498:	613b      	str	r3, [r7, #16]
  LTDC->TWCR |= (totalwidth | LTDC_InitStruct->LTDC_TotalHeigh);
 800749a:	4b1f      	ldr	r3, [pc, #124]	; (8007518 <LTDC_Init+0x124>)
 800749c:	695a      	ldr	r2, [r3, #20]
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80074a2:	693b      	ldr	r3, [r7, #16]
 80074a4:	430b      	orrs	r3, r1
 80074a6:	491c      	ldr	r1, [pc, #112]	; (8007518 <LTDC_Init+0x124>)
 80074a8:	4313      	orrs	r3, r2
 80074aa:	614b      	str	r3, [r1, #20]

  LTDC->GCR &= (uint32_t)GCR_MASK;
 80074ac:	4b1a      	ldr	r3, [pc, #104]	; (8007518 <LTDC_Init+0x124>)
 80074ae:	699a      	ldr	r2, [r3, #24]
 80074b0:	4919      	ldr	r1, [pc, #100]	; (8007518 <LTDC_Init+0x124>)
 80074b2:	4b1b      	ldr	r3, [pc, #108]	; (8007520 <LTDC_Init+0x12c>)
 80074b4:	4013      	ands	r3, r2
 80074b6:	618b      	str	r3, [r1, #24]
  LTDC->GCR |=  (uint32_t)(LTDC_InitStruct->LTDC_HSPolarity | LTDC_InitStruct->LTDC_VSPolarity | \
 80074b8:	4b17      	ldr	r3, [pc, #92]	; (8007518 <LTDC_Init+0x124>)
 80074ba:	699a      	ldr	r2, [r3, #24]
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	6819      	ldr	r1, [r3, #0]
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	685b      	ldr	r3, [r3, #4]
 80074c4:	4319      	orrs	r1, r3
                           LTDC_InitStruct->LTDC_DEPolarity | LTDC_InitStruct->LTDC_PCPolarity);
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	689b      	ldr	r3, [r3, #8]
  LTDC->GCR |=  (uint32_t)(LTDC_InitStruct->LTDC_HSPolarity | LTDC_InitStruct->LTDC_VSPolarity | \
 80074ca:	4319      	orrs	r1, r3
                           LTDC_InitStruct->LTDC_DEPolarity | LTDC_InitStruct->LTDC_PCPolarity);
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	68db      	ldr	r3, [r3, #12]
 80074d0:	430b      	orrs	r3, r1
  LTDC->GCR |=  (uint32_t)(LTDC_InitStruct->LTDC_HSPolarity | LTDC_InitStruct->LTDC_VSPolarity | \
 80074d2:	4911      	ldr	r1, [pc, #68]	; (8007518 <LTDC_Init+0x124>)
 80074d4:	4313      	orrs	r3, r2
 80074d6:	618b      	str	r3, [r1, #24]

  /* sets the background color value */
  backgreen = (LTDC_InitStruct->LTDC_BackgroundGreenValue << 8);
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074dc:	021b      	lsls	r3, r3, #8
 80074de:	60fb      	str	r3, [r7, #12]
  backred = (LTDC_InitStruct->LTDC_BackgroundRedValue << 16);
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074e4:	041b      	lsls	r3, r3, #16
 80074e6:	60bb      	str	r3, [r7, #8]

  LTDC->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80074e8:	4b0b      	ldr	r3, [pc, #44]	; (8007518 <LTDC_Init+0x124>)
 80074ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074ec:	4a0a      	ldr	r2, [pc, #40]	; (8007518 <LTDC_Init+0x124>)
 80074ee:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80074f2:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC->BCCR |= (backred | backgreen | LTDC_InitStruct->LTDC_BackgroundBlueValue);
 80074f4:	4b08      	ldr	r3, [pc, #32]	; (8007518 <LTDC_Init+0x124>)
 80074f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074f8:	68b9      	ldr	r1, [r7, #8]
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	4319      	orrs	r1, r3
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007502:	430b      	orrs	r3, r1
 8007504:	4904      	ldr	r1, [pc, #16]	; (8007518 <LTDC_Init+0x124>)
 8007506:	4313      	orrs	r3, r2
 8007508:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 800750a:	bf00      	nop
 800750c:	3724      	adds	r7, #36	; 0x24
 800750e:	46bd      	mov	sp, r7
 8007510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007514:	4770      	bx	lr
 8007516:	bf00      	nop
 8007518:	40016800 	.word	0x40016800
 800751c:	f000f800 	.word	0xf000f800
 8007520:	0ffe888f 	.word	0x0ffe888f

08007524 <LTDC_StructInit>:
  *         be initialized.
  * @retval None
  */

void LTDC_StructInit(LTDC_InitTypeDef* LTDC_InitStruct)
{
 8007524:	b480      	push	{r7}
 8007526:	b083      	sub	sp, #12
 8007528:	af00      	add	r7, sp, #0
 800752a:	6078      	str	r0, [r7, #4]
  /*--------------- Reset LTDC init structure parameters values ----------------*/
  LTDC_InitStruct->LTDC_HSPolarity = LTDC_HSPolarity_AL;      /*!< Initialize the LTDC_HSPolarity member */ 
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	2200      	movs	r2, #0
 8007530:	601a      	str	r2, [r3, #0]
  LTDC_InitStruct->LTDC_VSPolarity = LTDC_VSPolarity_AL;      /*!< Initialize the LTDC_VSPolarity member */
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	2200      	movs	r2, #0
 8007536:	605a      	str	r2, [r3, #4]
  LTDC_InitStruct->LTDC_DEPolarity = LTDC_DEPolarity_AL;      /*!< Initialize the LTDC_DEPolarity member */
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	2200      	movs	r2, #0
 800753c:	609a      	str	r2, [r3, #8]
  LTDC_InitStruct->LTDC_PCPolarity = LTDC_PCPolarity_IPC;     /*!< Initialize the LTDC_PCPolarity member */
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	2200      	movs	r2, #0
 8007542:	60da      	str	r2, [r3, #12]
  LTDC_InitStruct->LTDC_HorizontalSync = 0x00;                /*!< Initialize the LTDC_HorizontalSync member */
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	2200      	movs	r2, #0
 8007548:	611a      	str	r2, [r3, #16]
  LTDC_InitStruct->LTDC_VerticalSync = 0x00;                  /*!< Initialize the LTDC_VerticalSync member */
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	2200      	movs	r2, #0
 800754e:	615a      	str	r2, [r3, #20]
  LTDC_InitStruct->LTDC_AccumulatedHBP = 0x00;                /*!< Initialize the LTDC_AccumulatedHBP member */
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	2200      	movs	r2, #0
 8007554:	619a      	str	r2, [r3, #24]
  LTDC_InitStruct->LTDC_AccumulatedVBP = 0x00;                /*!< Initialize the LTDC_AccumulatedVBP member */
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	2200      	movs	r2, #0
 800755a:	61da      	str	r2, [r3, #28]
  LTDC_InitStruct->LTDC_AccumulatedActiveW = 0x00;            /*!< Initialize the LTDC_AccumulatedActiveW member */
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	2200      	movs	r2, #0
 8007560:	621a      	str	r2, [r3, #32]
  LTDC_InitStruct->LTDC_AccumulatedActiveH = 0x00;            /*!< Initialize the LTDC_AccumulatedActiveH member */
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	2200      	movs	r2, #0
 8007566:	625a      	str	r2, [r3, #36]	; 0x24
  LTDC_InitStruct->LTDC_TotalWidth = 0x00;                    /*!< Initialize the LTDC_TotalWidth member */
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	2200      	movs	r2, #0
 800756c:	629a      	str	r2, [r3, #40]	; 0x28
  LTDC_InitStruct->LTDC_TotalHeigh = 0x00;                    /*!< Initialize the LTDC_TotalHeigh member */
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	2200      	movs	r2, #0
 8007572:	62da      	str	r2, [r3, #44]	; 0x2c
  LTDC_InitStruct->LTDC_BackgroundRedValue = 0x00;            /*!< Initialize the LTDC_BackgroundRedValue member */
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	2200      	movs	r2, #0
 8007578:	631a      	str	r2, [r3, #48]	; 0x30
  LTDC_InitStruct->LTDC_BackgroundGreenValue = 0x00;          /*!< Initialize the LTDC_BackgroundGreenValue member */
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	2200      	movs	r2, #0
 800757e:	635a      	str	r2, [r3, #52]	; 0x34
  LTDC_InitStruct->LTDC_BackgroundBlueValue = 0x00;           /*!< Initialize the LTDC_BackgroundBlueValue member */
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	2200      	movs	r2, #0
 8007584:	639a      	str	r2, [r3, #56]	; 0x38
}
 8007586:	bf00      	nop
 8007588:	370c      	adds	r7, #12
 800758a:	46bd      	mov	sp, r7
 800758c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007590:	4770      	bx	lr

08007592 <LTDC_Cmd>:
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */

void LTDC_Cmd(FunctionalState NewState)
{
 8007592:	b480      	push	{r7}
 8007594:	b083      	sub	sp, #12
 8007596:	af00      	add	r7, sp, #0
 8007598:	4603      	mov	r3, r0
 800759a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800759c:	79fb      	ldrb	r3, [r7, #7]
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d006      	beq.n	80075b0 <LTDC_Cmd+0x1e>
  {
    /* Enable LTDC by setting LTDCEN bit */
    LTDC->GCR |= (uint32_t)LTDC_GCR_LTDCEN;
 80075a2:	4b09      	ldr	r3, [pc, #36]	; (80075c8 <LTDC_Cmd+0x36>)
 80075a4:	699b      	ldr	r3, [r3, #24]
 80075a6:	4a08      	ldr	r2, [pc, #32]	; (80075c8 <LTDC_Cmd+0x36>)
 80075a8:	f043 0301 	orr.w	r3, r3, #1
 80075ac:	6193      	str	r3, [r2, #24]
  else
  {
    /* Disable LTDC by clearing LTDCEN bit */
    LTDC->GCR &= ~(uint32_t)LTDC_GCR_LTDCEN;
  }
}
 80075ae:	e005      	b.n	80075bc <LTDC_Cmd+0x2a>
    LTDC->GCR &= ~(uint32_t)LTDC_GCR_LTDCEN;
 80075b0:	4b05      	ldr	r3, [pc, #20]	; (80075c8 <LTDC_Cmd+0x36>)
 80075b2:	699b      	ldr	r3, [r3, #24]
 80075b4:	4a04      	ldr	r2, [pc, #16]	; (80075c8 <LTDC_Cmd+0x36>)
 80075b6:	f023 0301 	bic.w	r3, r3, #1
 80075ba:	6193      	str	r3, [r2, #24]
}
 80075bc:	bf00      	nop
 80075be:	370c      	adds	r7, #12
 80075c0:	46bd      	mov	sp, r7
 80075c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c6:	4770      	bx	lr
 80075c8:	40016800 	.word	0x40016800

080075cc <LTDC_DitherCmd>:
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */

void LTDC_DitherCmd(FunctionalState NewState)
{
 80075cc:	b480      	push	{r7}
 80075ce:	b083      	sub	sp, #12
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	4603      	mov	r3, r0
 80075d4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80075d6:	79fb      	ldrb	r3, [r7, #7]
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d006      	beq.n	80075ea <LTDC_DitherCmd+0x1e>
  {
    /* Enable Dither by setting DTEN bit */
    LTDC->GCR |= (uint32_t)LTDC_GCR_DTEN;
 80075dc:	4b09      	ldr	r3, [pc, #36]	; (8007604 <LTDC_DitherCmd+0x38>)
 80075de:	699b      	ldr	r3, [r3, #24]
 80075e0:	4a08      	ldr	r2, [pc, #32]	; (8007604 <LTDC_DitherCmd+0x38>)
 80075e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80075e6:	6193      	str	r3, [r2, #24]
  else
  {
    /* Disable Dither by clearing DTEN bit */
    LTDC->GCR &= ~(uint32_t)LTDC_GCR_DTEN;
  }
}
 80075e8:	e005      	b.n	80075f6 <LTDC_DitherCmd+0x2a>
    LTDC->GCR &= ~(uint32_t)LTDC_GCR_DTEN;
 80075ea:	4b06      	ldr	r3, [pc, #24]	; (8007604 <LTDC_DitherCmd+0x38>)
 80075ec:	699b      	ldr	r3, [r3, #24]
 80075ee:	4a05      	ldr	r2, [pc, #20]	; (8007604 <LTDC_DitherCmd+0x38>)
 80075f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80075f4:	6193      	str	r3, [r2, #24]
}
 80075f6:	bf00      	nop
 80075f8:	370c      	adds	r7, #12
 80075fa:	46bd      	mov	sp, r7
 80075fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007600:	4770      	bx	lr
 8007602:	bf00      	nop
 8007604:	40016800 	.word	0x40016800

08007608 <LTDC_GetRGBWidth>:
  *         the Dither RGB width.
  * @retval None
  */

LTDC_RGBTypeDef LTDC_GetRGBWidth(void)
{
 8007608:	b490      	push	{r4, r7}
 800760a:	b086      	sub	sp, #24
 800760c:	af00      	add	r7, sp, #0
 800760e:	6078      	str	r0, [r7, #4]
  LTDC_RGBTypeDef LTDC_RGB_InitStruct;

  LTDC->GCR &= (uint32_t)GCR_MASK;
 8007610:	4b12      	ldr	r3, [pc, #72]	; (800765c <LTDC_GetRGBWidth+0x54>)
 8007612:	699a      	ldr	r2, [r3, #24]
 8007614:	4911      	ldr	r1, [pc, #68]	; (800765c <LTDC_GetRGBWidth+0x54>)
 8007616:	4b12      	ldr	r3, [pc, #72]	; (8007660 <LTDC_GetRGBWidth+0x58>)
 8007618:	4013      	ands	r3, r2
 800761a:	618b      	str	r3, [r1, #24]

  LTDC_RGB_InitStruct.LTDC_BlueWidth = (uint32_t)((LTDC->GCR >> 4) & 0x7);
 800761c:	4b0f      	ldr	r3, [pc, #60]	; (800765c <LTDC_GetRGBWidth+0x54>)
 800761e:	699b      	ldr	r3, [r3, #24]
 8007620:	091b      	lsrs	r3, r3, #4
 8007622:	f003 0307 	and.w	r3, r3, #7
 8007626:	60fb      	str	r3, [r7, #12]
  LTDC_RGB_InitStruct.LTDC_GreenWidth = (uint32_t)((LTDC->GCR >> 8) & 0x7);
 8007628:	4b0c      	ldr	r3, [pc, #48]	; (800765c <LTDC_GetRGBWidth+0x54>)
 800762a:	699b      	ldr	r3, [r3, #24]
 800762c:	0a1b      	lsrs	r3, r3, #8
 800762e:	f003 0307 	and.w	r3, r3, #7
 8007632:	613b      	str	r3, [r7, #16]
  LTDC_RGB_InitStruct.LTDC_RedWidth = (uint32_t)((LTDC->GCR >> 12) & 0x7);
 8007634:	4b09      	ldr	r3, [pc, #36]	; (800765c <LTDC_GetRGBWidth+0x54>)
 8007636:	699b      	ldr	r3, [r3, #24]
 8007638:	0b1b      	lsrs	r3, r3, #12
 800763a:	f003 0307 	and.w	r3, r3, #7
 800763e:	617b      	str	r3, [r7, #20]

  return LTDC_RGB_InitStruct;
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	461c      	mov	r4, r3
 8007644:	f107 030c 	add.w	r3, r7, #12
 8007648:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800764c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8007650:	6878      	ldr	r0, [r7, #4]
 8007652:	3718      	adds	r7, #24
 8007654:	46bd      	mov	sp, r7
 8007656:	bc90      	pop	{r4, r7}
 8007658:	4770      	bx	lr
 800765a:	bf00      	nop
 800765c:	40016800 	.word	0x40016800
 8007660:	0ffe888f 	.word	0x0ffe888f

08007664 <LTDC_RGBStructInit>:
  *         be initialized.
  * @retval None
  */

void LTDC_RGBStructInit(LTDC_RGBTypeDef* LTDC_RGB_InitStruct)
{
 8007664:	b480      	push	{r7}
 8007666:	b083      	sub	sp, #12
 8007668:	af00      	add	r7, sp, #0
 800766a:	6078      	str	r0, [r7, #4]
  LTDC_RGB_InitStruct->LTDC_BlueWidth = 0x02;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	2202      	movs	r2, #2
 8007670:	601a      	str	r2, [r3, #0]
  LTDC_RGB_InitStruct->LTDC_GreenWidth = 0x02;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	2202      	movs	r2, #2
 8007676:	605a      	str	r2, [r3, #4]
  LTDC_RGB_InitStruct->LTDC_RedWidth = 0x02;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	2202      	movs	r2, #2
 800767c:	609a      	str	r2, [r3, #8]
}
 800767e:	bf00      	nop
 8007680:	370c      	adds	r7, #12
 8007682:	46bd      	mov	sp, r7
 8007684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007688:	4770      	bx	lr

0800768a <LTDC_LIPConfig>:
  * @param  LTDC_LIPositionConfig: Line Interrupt Position.
  * @retval None
  */

void LTDC_LIPConfig(uint32_t LTDC_LIPositionConfig)
{
 800768a:	b480      	push	{r7}
 800768c:	b083      	sub	sp, #12
 800768e:	af00      	add	r7, sp, #0
 8007690:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_LTDC_LIPOS(LTDC_LIPositionConfig));

  /* Sets the Line Interrupt position */
  LTDC->LIPCR = (uint32_t)LTDC_LIPositionConfig;
 8007692:	4a04      	ldr	r2, [pc, #16]	; (80076a4 <LTDC_LIPConfig+0x1a>)
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	6413      	str	r3, [r2, #64]	; 0x40
}
 8007698:	bf00      	nop
 800769a:	370c      	adds	r7, #12
 800769c:	46bd      	mov	sp, r7
 800769e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a2:	4770      	bx	lr
 80076a4:	40016800 	.word	0x40016800

080076a8 <LTDC_ReloadConfig>:
  *     @arg LTDC_VBReload: Immediate reload.  
  * @retval None
  */

void LTDC_ReloadConfig(uint32_t LTDC_Reload)
{
 80076a8:	b480      	push	{r7}
 80076aa:	b083      	sub	sp, #12
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_LTDC_RELOAD(LTDC_Reload));

  /* Sets the Reload type */
  LTDC->SRCR = (uint32_t)LTDC_Reload;
 80076b0:	4a04      	ldr	r2, [pc, #16]	; (80076c4 <LTDC_ReloadConfig+0x1c>)
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	6253      	str	r3, [r2, #36]	; 0x24
}
 80076b6:	bf00      	nop
 80076b8:	370c      	adds	r7, #12
 80076ba:	46bd      	mov	sp, r7
 80076bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c0:	4770      	bx	lr
 80076c2:	bf00      	nop
 80076c4:	40016800 	.word	0x40016800

080076c8 <LTDC_LayerInit>:
  *         the configuration information for the specified LTDC peripheral.
  * @retval None
  */

void LTDC_LayerInit(LTDC_Layer_TypeDef* LTDC_Layerx, LTDC_Layer_InitTypeDef* LTDC_Layer_InitStruct)
{
 80076c8:	b480      	push	{r7}
 80076ca:	b089      	sub	sp, #36	; 0x24
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	6078      	str	r0, [r7, #4]
 80076d0:	6039      	str	r1, [r7, #0]

  uint32_t whsppos = 0;
 80076d2:	2300      	movs	r3, #0
 80076d4:	61fb      	str	r3, [r7, #28]
  uint32_t wvsppos = 0;
 80076d6:	2300      	movs	r3, #0
 80076d8:	61bb      	str	r3, [r7, #24]
  uint32_t dcgreen = 0;
 80076da:	2300      	movs	r3, #0
 80076dc:	617b      	str	r3, [r7, #20]
  uint32_t dcred = 0;
 80076de:	2300      	movs	r3, #0
 80076e0:	613b      	str	r3, [r7, #16]
  uint32_t dcalpha = 0;
 80076e2:	2300      	movs	r3, #0
 80076e4:	60fb      	str	r3, [r7, #12]
  uint32_t cfbp = 0;
 80076e6:	2300      	movs	r3, #0
 80076e8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LTDC_CFBP(LTDC_Layer_InitStruct->LTDC_CFBPitch));
  assert_param(IS_LTDC_CFBLL(LTDC_Layer_InitStruct->LTDC_CFBLineLength));
  assert_param(IS_LTDC_CFBLNBR(LTDC_Layer_InitStruct->LTDC_CFBLineNumber));

  /* Configures the horizontal start and stop position */
  whsppos = LTDC_Layer_InitStruct->LTDC_HorizontalStop << 16;
 80076ea:	683b      	ldr	r3, [r7, #0]
 80076ec:	685b      	ldr	r3, [r3, #4]
 80076ee:	041b      	lsls	r3, r3, #16
 80076f0:	61fb      	str	r3, [r7, #28]
  LTDC_Layerx->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	685b      	ldr	r3, [r3, #4]
 80076f6:	f403 4270 	and.w	r2, r3, #61440	; 0xf000
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	605a      	str	r2, [r3, #4]
  LTDC_Layerx->WHPCR = (LTDC_Layer_InitStruct->LTDC_HorizontalStart | whsppos);
 80076fe:	683b      	ldr	r3, [r7, #0]
 8007700:	681a      	ldr	r2, [r3, #0]
 8007702:	69fb      	ldr	r3, [r7, #28]
 8007704:	431a      	orrs	r2, r3
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	605a      	str	r2, [r3, #4]

  /* Configures the vertical start and stop position */
  wvsppos = LTDC_Layer_InitStruct->LTDC_VerticalStop << 16;
 800770a:	683b      	ldr	r3, [r7, #0]
 800770c:	68db      	ldr	r3, [r3, #12]
 800770e:	041b      	lsls	r3, r3, #16
 8007710:	61bb      	str	r3, [r7, #24]
  LTDC_Layerx->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	689b      	ldr	r3, [r3, #8]
 8007716:	f403 4270 	and.w	r2, r3, #61440	; 0xf000
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	609a      	str	r2, [r3, #8]
  LTDC_Layerx->WVPCR  = (LTDC_Layer_InitStruct->LTDC_VerticalStart | wvsppos);
 800771e:	683b      	ldr	r3, [r7, #0]
 8007720:	689a      	ldr	r2, [r3, #8]
 8007722:	69bb      	ldr	r3, [r7, #24]
 8007724:	431a      	orrs	r2, r3
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	609a      	str	r2, [r3, #8]

  /* Specifies the pixel format */
  LTDC_Layerx->PFCR &= ~(LTDC_LxPFCR_PF);
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	691b      	ldr	r3, [r3, #16]
 800772e:	f023 0207 	bic.w	r2, r3, #7
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	611a      	str	r2, [r3, #16]
  LTDC_Layerx->PFCR = (LTDC_Layer_InitStruct->LTDC_PixelFormat);
 8007736:	683b      	ldr	r3, [r7, #0]
 8007738:	691a      	ldr	r2, [r3, #16]
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	611a      	str	r2, [r3, #16]

  /* Configures the default color values */
  dcgreen = (LTDC_Layer_InitStruct->LTDC_DefaultColorGreen << 8);
 800773e:	683b      	ldr	r3, [r7, #0]
 8007740:	69db      	ldr	r3, [r3, #28]
 8007742:	021b      	lsls	r3, r3, #8
 8007744:	617b      	str	r3, [r7, #20]
  dcred = (LTDC_Layer_InitStruct->LTDC_DefaultColorRed << 16);
 8007746:	683b      	ldr	r3, [r7, #0]
 8007748:	6a1b      	ldr	r3, [r3, #32]
 800774a:	041b      	lsls	r3, r3, #16
 800774c:	613b      	str	r3, [r7, #16]
  dcalpha = (LTDC_Layer_InitStruct->LTDC_DefaultColorAlpha << 24);
 800774e:	683b      	ldr	r3, [r7, #0]
 8007750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007752:	061b      	lsls	r3, r3, #24
 8007754:	60fb      	str	r3, [r7, #12]
  LTDC_Layerx->DCCR &=  ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	699b      	ldr	r3, [r3, #24]
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	2200      	movs	r2, #0
 800775e:	619a      	str	r2, [r3, #24]
  LTDC_Layerx->DCCR = (LTDC_Layer_InitStruct->LTDC_DefaultColorBlue | dcgreen | \
 8007760:	683b      	ldr	r3, [r7, #0]
 8007762:	699a      	ldr	r2, [r3, #24]
 8007764:	697b      	ldr	r3, [r7, #20]
 8007766:	431a      	orrs	r2, r3
 8007768:	693b      	ldr	r3, [r7, #16]
 800776a:	431a      	orrs	r2, r3
                        dcred | dcalpha);
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	431a      	orrs	r2, r3
  LTDC_Layerx->DCCR = (LTDC_Layer_InitStruct->LTDC_DefaultColorBlue | dcgreen | \
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	619a      	str	r2, [r3, #24]

  /* Specifies the constant alpha value */      
  LTDC_Layerx->CACR &= ~(LTDC_LxCACR_CONSTA);
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	695b      	ldr	r3, [r3, #20]
 8007778:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	615a      	str	r2, [r3, #20]
  LTDC_Layerx->CACR = (LTDC_Layer_InitStruct->LTDC_ConstantAlpha);
 8007780:	683b      	ldr	r3, [r7, #0]
 8007782:	695a      	ldr	r2, [r3, #20]
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	615a      	str	r2, [r3, #20]

  /* Specifies the blending factors */
  LTDC_Layerx->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	69db      	ldr	r3, [r3, #28]
 800778c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8007790:	f023 0307 	bic.w	r3, r3, #7
 8007794:	687a      	ldr	r2, [r7, #4]
 8007796:	61d3      	str	r3, [r2, #28]
  LTDC_Layerx->BFCR = (LTDC_Layer_InitStruct->LTDC_BlendingFactor_1 | LTDC_Layer_InitStruct->LTDC_BlendingFactor_2);
 8007798:	683b      	ldr	r3, [r7, #0]
 800779a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800779c:	683b      	ldr	r3, [r7, #0]
 800779e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077a0:	431a      	orrs	r2, r3
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	61da      	str	r2, [r3, #28]

  /* Configures the color frame buffer start address */
  LTDC_Layerx->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	2200      	movs	r2, #0
 80077ae:	629a      	str	r2, [r3, #40]	; 0x28
  LTDC_Layerx->CFBAR = (LTDC_Layer_InitStruct->LTDC_CFBStartAdress);
 80077b0:	683b      	ldr	r3, [r7, #0]
 80077b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	629a      	str	r2, [r3, #40]	; 0x28

  /* Configures the color frame buffer pitch in byte */
  cfbp = (LTDC_Layer_InitStruct->LTDC_CFBPitch << 16);
 80077b8:	683b      	ldr	r3, [r7, #0]
 80077ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077bc:	041b      	lsls	r3, r3, #16
 80077be:	60bb      	str	r3, [r7, #8]
  LTDC_Layerx->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077c4:	f003 22e0 	and.w	r2, r3, #3758153728	; 0xe000e000
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	62da      	str	r2, [r3, #44]	; 0x2c
  LTDC_Layerx->CFBLR  = (LTDC_Layer_InitStruct->LTDC_CFBLineLength | cfbp);
 80077cc:	683b      	ldr	r3, [r7, #0]
 80077ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80077d0:	68bb      	ldr	r3, [r7, #8]
 80077d2:	431a      	orrs	r2, r3
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Configures the frame buffer line number */
  LTDC_Layerx->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077dc:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80077e0:	f023 0307 	bic.w	r3, r3, #7
 80077e4:	687a      	ldr	r2, [r7, #4]
 80077e6:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_Layerx->CFBLNR  = (LTDC_Layer_InitStruct->LTDC_CFBLineNumber);
 80077e8:	683b      	ldr	r3, [r7, #0]
 80077ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	631a      	str	r2, [r3, #48]	; 0x30

}
 80077f0:	bf00      	nop
 80077f2:	3724      	adds	r7, #36	; 0x24
 80077f4:	46bd      	mov	sp, r7
 80077f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077fa:	4770      	bx	lr

080077fc <LTDC_LayerStructInit>:
  *         be initialized.
  * @retval None
  */

void LTDC_LayerStructInit(LTDC_Layer_InitTypeDef * LTDC_Layer_InitStruct)
{
 80077fc:	b480      	push	{r7}
 80077fe:	b083      	sub	sp, #12
 8007800:	af00      	add	r7, sp, #0
 8007802:	6078      	str	r0, [r7, #4]
  /*--------------- Reset Layer structure parameters values -------------------*/

  /*!< Initialize the horizontal limit member */
  LTDC_Layer_InitStruct->LTDC_HorizontalStart = 0x00;
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	2200      	movs	r2, #0
 8007808:	601a      	str	r2, [r3, #0]
  LTDC_Layer_InitStruct->LTDC_HorizontalStop = 0x00;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	2200      	movs	r2, #0
 800780e:	605a      	str	r2, [r3, #4]

  /*!< Initialize the vertical limit member */
  LTDC_Layer_InitStruct->LTDC_VerticalStart = 0x00;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	2200      	movs	r2, #0
 8007814:	609a      	str	r2, [r3, #8]
  LTDC_Layer_InitStruct->LTDC_VerticalStop = 0x00;
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	2200      	movs	r2, #0
 800781a:	60da      	str	r2, [r3, #12]

  /*!< Initialize the pixel format member */
  LTDC_Layer_InitStruct->LTDC_PixelFormat = LTDC_Pixelformat_ARGB8888;
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	2200      	movs	r2, #0
 8007820:	611a      	str	r2, [r3, #16]

  /*!< Initialize the constant alpha value */
  LTDC_Layer_InitStruct->LTDC_ConstantAlpha = 0xFF;
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	22ff      	movs	r2, #255	; 0xff
 8007826:	615a      	str	r2, [r3, #20]

  /*!< Initialize the default color values */
  LTDC_Layer_InitStruct->LTDC_DefaultColorBlue = 0x00;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	2200      	movs	r2, #0
 800782c:	619a      	str	r2, [r3, #24]
  LTDC_Layer_InitStruct->LTDC_DefaultColorGreen = 0x00;
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	2200      	movs	r2, #0
 8007832:	61da      	str	r2, [r3, #28]
  LTDC_Layer_InitStruct->LTDC_DefaultColorRed = 0x00;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	2200      	movs	r2, #0
 8007838:	621a      	str	r2, [r3, #32]
  LTDC_Layer_InitStruct->LTDC_DefaultColorAlpha = 0x00;
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	2200      	movs	r2, #0
 800783e:	625a      	str	r2, [r3, #36]	; 0x24

  /*!< Initialize the blending factors */
  LTDC_Layer_InitStruct->LTDC_BlendingFactor_1 = LTDC_BlendingFactor1_PAxCA;
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8007846:	629a      	str	r2, [r3, #40]	; 0x28
  LTDC_Layer_InitStruct->LTDC_BlendingFactor_2 = LTDC_BlendingFactor2_PAxCA;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	2207      	movs	r2, #7
 800784c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*!< Initialize the frame buffer start address */
  LTDC_Layer_InitStruct->LTDC_CFBStartAdress = 0x00;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	2200      	movs	r2, #0
 8007852:	631a      	str	r2, [r3, #48]	; 0x30

  /*!< Initialize the frame buffer pitch and line length */
  LTDC_Layer_InitStruct->LTDC_CFBLineLength = 0x00;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	2200      	movs	r2, #0
 8007858:	635a      	str	r2, [r3, #52]	; 0x34
  LTDC_Layer_InitStruct->LTDC_CFBPitch = 0x00;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	2200      	movs	r2, #0
 800785e:	639a      	str	r2, [r3, #56]	; 0x38

  /*!< Initialize the frame buffer line number */
  LTDC_Layer_InitStruct->LTDC_CFBLineNumber = 0x00;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	2200      	movs	r2, #0
 8007864:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8007866:	bf00      	nop
 8007868:	370c      	adds	r7, #12
 800786a:	46bd      	mov	sp, r7
 800786c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007870:	4770      	bx	lr

08007872 <LTDC_LayerCmd>:
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */

void LTDC_LayerCmd(LTDC_Layer_TypeDef* LTDC_Layerx, FunctionalState NewState)
{
 8007872:	b480      	push	{r7}
 8007874:	b083      	sub	sp, #12
 8007876:	af00      	add	r7, sp, #0
 8007878:	6078      	str	r0, [r7, #4]
 800787a:	460b      	mov	r3, r1
 800787c:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800787e:	78fb      	ldrb	r3, [r7, #3]
 8007880:	2b00      	cmp	r3, #0
 8007882:	d006      	beq.n	8007892 <LTDC_LayerCmd+0x20>
  {
    /* Enable LTDC_Layer by setting LEN bit */
    LTDC_Layerx->CR |= (uint32_t)LTDC_LxCR_LEN;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	f043 0201 	orr.w	r2, r3, #1
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable LTDC_Layer by clearing LEN bit */
    LTDC_Layerx->CR &= ~(uint32_t)LTDC_LxCR_LEN;
  }
}
 8007890:	e005      	b.n	800789e <LTDC_LayerCmd+0x2c>
    LTDC_Layerx->CR &= ~(uint32_t)LTDC_LxCR_LEN;
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	f023 0201 	bic.w	r2, r3, #1
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	601a      	str	r2, [r3, #0]
}
 800789e:	bf00      	nop
 80078a0:	370c      	adds	r7, #12
 80078a2:	46bd      	mov	sp, r7
 80078a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a8:	4770      	bx	lr

080078aa <LTDC_GetPosStatus>:
  *         the current position.
  * @retval None
  */

LTDC_PosTypeDef LTDC_GetPosStatus(void)
{
 80078aa:	b480      	push	{r7}
 80078ac:	b085      	sub	sp, #20
 80078ae:	af00      	add	r7, sp, #0
 80078b0:	6078      	str	r0, [r7, #4]
  LTDC_PosTypeDef LTDC_Pos_InitStruct;

  LTDC->CPSR &= ~(LTDC_CPSR_CYPOS | LTDC_CPSR_CXPOS);
 80078b2:	4b0d      	ldr	r3, [pc, #52]	; (80078e8 <LTDC_GetPosStatus+0x3e>)
 80078b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078b6:	4b0c      	ldr	r3, [pc, #48]	; (80078e8 <LTDC_GetPosStatus+0x3e>)
 80078b8:	2200      	movs	r2, #0
 80078ba:	645a      	str	r2, [r3, #68]	; 0x44

  LTDC_Pos_InitStruct.LTDC_POSX = (uint32_t)(LTDC->CPSR >> 16);
 80078bc:	4b0a      	ldr	r3, [pc, #40]	; (80078e8 <LTDC_GetPosStatus+0x3e>)
 80078be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078c0:	0c1b      	lsrs	r3, r3, #16
 80078c2:	60bb      	str	r3, [r7, #8]
  LTDC_Pos_InitStruct.LTDC_POSY = (uint32_t)(LTDC->CPSR & 0xFFFF);
 80078c4:	4b08      	ldr	r3, [pc, #32]	; (80078e8 <LTDC_GetPosStatus+0x3e>)
 80078c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078c8:	b29b      	uxth	r3, r3
 80078ca:	60fb      	str	r3, [r7, #12]

  return LTDC_Pos_InitStruct;
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	461a      	mov	r2, r3
 80078d0:	f107 0308 	add.w	r3, r7, #8
 80078d4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80078d8:	e882 0003 	stmia.w	r2, {r0, r1}
}
 80078dc:	6878      	ldr	r0, [r7, #4]
 80078de:	3714      	adds	r7, #20
 80078e0:	46bd      	mov	sp, r7
 80078e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e6:	4770      	bx	lr
 80078e8:	40016800 	.word	0x40016800

080078ec <LTDC_PosStructInit>:
  *         be initialized.
  * @retval None
  */

void LTDC_PosStructInit(LTDC_PosTypeDef* LTDC_Pos_InitStruct)
{
 80078ec:	b480      	push	{r7}
 80078ee:	b083      	sub	sp, #12
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	6078      	str	r0, [r7, #4]
  LTDC_Pos_InitStruct->LTDC_POSX = 0x00;
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	2200      	movs	r2, #0
 80078f8:	601a      	str	r2, [r3, #0]
  LTDC_Pos_InitStruct->LTDC_POSY = 0x00;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	2200      	movs	r2, #0
 80078fe:	605a      	str	r2, [r3, #4]
}
 8007900:	bf00      	nop
 8007902:	370c      	adds	r7, #12
 8007904:	46bd      	mov	sp, r7
 8007906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800790a:	4770      	bx	lr

0800790c <LTDC_GetCDStatus>:
  *     @arg LTDC_CD_HSYNC:  Horizontal Synchronization current status.
  * @retval The new state of LTDC_CD (SET or RESET).
  */

FlagStatus LTDC_GetCDStatus(uint32_t LTDC_CD)
{
 800790c:	b480      	push	{r7}
 800790e:	b085      	sub	sp, #20
 8007910:	af00      	add	r7, sp, #0
 8007912:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus;

  /* Check the parameters */
  assert_param(IS_LTDC_GET_CD(LTDC_CD));

  if ((LTDC->CDSR & LTDC_CD) != (uint32_t)RESET)
 8007914:	4b08      	ldr	r3, [pc, #32]	; (8007938 <LTDC_GetCDStatus+0x2c>)
 8007916:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	4013      	ands	r3, r2
 800791c:	2b00      	cmp	r3, #0
 800791e:	d002      	beq.n	8007926 <LTDC_GetCDStatus+0x1a>
  {
    bitstatus = SET;
 8007920:	2301      	movs	r3, #1
 8007922:	73fb      	strb	r3, [r7, #15]
 8007924:	e001      	b.n	800792a <LTDC_GetCDStatus+0x1e>
  }
  else
  {
    bitstatus = RESET;
 8007926:	2300      	movs	r3, #0
 8007928:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800792a:	7bfb      	ldrb	r3, [r7, #15]
}
 800792c:	4618      	mov	r0, r3
 800792e:	3714      	adds	r7, #20
 8007930:	46bd      	mov	sp, r7
 8007932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007936:	4770      	bx	lr
 8007938:	40016800 	.word	0x40016800

0800793c <LTDC_ColorKeyingConfig>:
  *         one of the following values: LTDC_Layer1, LTDC_Layer2   
  * @retval None
  */

void LTDC_ColorKeyingConfig(LTDC_Layer_TypeDef* LTDC_Layerx, LTDC_ColorKeying_InitTypeDef* LTDC_colorkeying_InitStruct, FunctionalState NewState)
{ 
 800793c:	b480      	push	{r7}
 800793e:	b087      	sub	sp, #28
 8007940:	af00      	add	r7, sp, #0
 8007942:	60f8      	str	r0, [r7, #12]
 8007944:	60b9      	str	r1, [r7, #8]
 8007946:	4613      	mov	r3, r2
 8007948:	71fb      	strb	r3, [r7, #7]
  uint32_t ckgreen = 0;
 800794a:	2300      	movs	r3, #0
 800794c:	617b      	str	r3, [r7, #20]
  uint32_t ckred = 0;
 800794e:	2300      	movs	r3, #0
 8007950:	613b      	str	r3, [r7, #16]
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_LTDC_CKEYING(LTDC_colorkeying_InitStruct->LTDC_ColorKeyBlue));
  assert_param(IS_LTDC_CKEYING(LTDC_colorkeying_InitStruct->LTDC_ColorKeyGreen));
  assert_param(IS_LTDC_CKEYING(LTDC_colorkeying_InitStruct->LTDC_ColorKeyRed));
  
  if (NewState != DISABLE)
 8007952:	79fb      	ldrb	r3, [r7, #7]
 8007954:	2b00      	cmp	r3, #0
 8007956:	d01f      	beq.n	8007998 <LTDC_ColorKeyingConfig+0x5c>
  {
    /* Enable LTDC color keying by setting COLKEN bit */
    LTDC_Layerx->CR |= (uint32_t)LTDC_LxCR_COLKEN;
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	f043 0202 	orr.w	r2, r3, #2
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	601a      	str	r2, [r3, #0]
    
    /* Sets the color keying values */
    ckgreen = (LTDC_colorkeying_InitStruct->LTDC_ColorKeyGreen << 8);
 8007964:	68bb      	ldr	r3, [r7, #8]
 8007966:	685b      	ldr	r3, [r3, #4]
 8007968:	021b      	lsls	r3, r3, #8
 800796a:	617b      	str	r3, [r7, #20]
    ckred = (LTDC_colorkeying_InitStruct->LTDC_ColorKeyRed << 16);
 800796c:	68bb      	ldr	r3, [r7, #8]
 800796e:	689b      	ldr	r3, [r3, #8]
 8007970:	041b      	lsls	r3, r3, #16
 8007972:	613b      	str	r3, [r7, #16]
    LTDC_Layerx->CKCR  &= ~(LTDC_LxCKCR_CKBLUE | LTDC_LxCKCR_CKGREEN | LTDC_LxCKCR_CKRED);
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	68db      	ldr	r3, [r3, #12]
 8007978:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	60da      	str	r2, [r3, #12]
    LTDC_Layerx->CKCR |= (LTDC_colorkeying_InitStruct->LTDC_ColorKeyBlue | ckgreen | ckred);
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	68da      	ldr	r2, [r3, #12]
 8007984:	68bb      	ldr	r3, [r7, #8]
 8007986:	6819      	ldr	r1, [r3, #0]
 8007988:	697b      	ldr	r3, [r7, #20]
 800798a:	4319      	orrs	r1, r3
 800798c:	693b      	ldr	r3, [r7, #16]
 800798e:	430b      	orrs	r3, r1
 8007990:	431a      	orrs	r2, r3
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	60da      	str	r2, [r3, #12]
 8007996:	e005      	b.n	80079a4 <LTDC_ColorKeyingConfig+0x68>
  }
  else
  {
    /* Disable LTDC color keying by clearing COLKEN bit */
    LTDC_Layerx->CR &= ~(uint32_t)LTDC_LxCR_COLKEN;
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	f023 0202 	bic.w	r2, r3, #2
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	601a      	str	r2, [r3, #0]
  }
  
  /* Reload shadow register */
  LTDC->SRCR = LTDC_IMReload;
 80079a4:	4b04      	ldr	r3, [pc, #16]	; (80079b8 <LTDC_ColorKeyingConfig+0x7c>)
 80079a6:	2201      	movs	r2, #1
 80079a8:	625a      	str	r2, [r3, #36]	; 0x24
}
 80079aa:	bf00      	nop
 80079ac:	371c      	adds	r7, #28
 80079ae:	46bd      	mov	sp, r7
 80079b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b4:	4770      	bx	lr
 80079b6:	bf00      	nop
 80079b8:	40016800 	.word	0x40016800

080079bc <LTDC_ColorKeyingStructInit>:
  *         be initialized.
  * @retval None
  */

void LTDC_ColorKeyingStructInit(LTDC_ColorKeying_InitTypeDef* LTDC_colorkeying_InitStruct)
{
 80079bc:	b480      	push	{r7}
 80079be:	b083      	sub	sp, #12
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	6078      	str	r0, [r7, #4]
  /*!< Initialize the color keying values */
  LTDC_colorkeying_InitStruct->LTDC_ColorKeyBlue = 0x00;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	2200      	movs	r2, #0
 80079c8:	601a      	str	r2, [r3, #0]
  LTDC_colorkeying_InitStruct->LTDC_ColorKeyGreen = 0x00;
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	2200      	movs	r2, #0
 80079ce:	605a      	str	r2, [r3, #4]
  LTDC_colorkeying_InitStruct->LTDC_ColorKeyRed = 0x00;
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	2200      	movs	r2, #0
 80079d4:	609a      	str	r2, [r3, #8]
}
 80079d6:	bf00      	nop
 80079d8:	370c      	adds	r7, #12
 80079da:	46bd      	mov	sp, r7
 80079dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e0:	4770      	bx	lr

080079e2 <LTDC_CLUTCmd>:
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */

void LTDC_CLUTCmd(LTDC_Layer_TypeDef* LTDC_Layerx, FunctionalState NewState)
{
 80079e2:	b480      	push	{r7}
 80079e4:	b083      	sub	sp, #12
 80079e6:	af00      	add	r7, sp, #0
 80079e8:	6078      	str	r0, [r7, #4]
 80079ea:	460b      	mov	r3, r1
 80079ec:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80079ee:	78fb      	ldrb	r3, [r7, #3]
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d006      	beq.n	8007a02 <LTDC_CLUTCmd+0x20>
  {
    /* Enable CLUT by setting CLUTEN bit */
    LTDC_Layerx->CR |= (uint32_t)LTDC_LxCR_CLUTEN;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	f043 0210 	orr.w	r2, r3, #16
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	601a      	str	r2, [r3, #0]
 8007a00:	e005      	b.n	8007a0e <LTDC_CLUTCmd+0x2c>
  }
  else
  {
    /* Disable CLUT by clearing CLUTEN bit */
    LTDC_Layerx->CR &= ~(uint32_t)LTDC_LxCR_CLUTEN;
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	f023 0210 	bic.w	r2, r3, #16
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	601a      	str	r2, [r3, #0]
  }
  
  /* Reload shadow register */
  LTDC->SRCR = LTDC_IMReload;
 8007a0e:	4b04      	ldr	r3, [pc, #16]	; (8007a20 <LTDC_CLUTCmd+0x3e>)
 8007a10:	2201      	movs	r2, #1
 8007a12:	625a      	str	r2, [r3, #36]	; 0x24
}
 8007a14:	bf00      	nop
 8007a16:	370c      	adds	r7, #12
 8007a18:	46bd      	mov	sp, r7
 8007a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a1e:	4770      	bx	lr
 8007a20:	40016800 	.word	0x40016800

08007a24 <LTDC_CLUTInit>:
  *         one of the following values: LTDC_Layer1, LTDC_Layer2   
  * @retval None
  */

void LTDC_CLUTInit(LTDC_Layer_TypeDef* LTDC_Layerx, LTDC_CLUT_InitTypeDef* LTDC_CLUT_InitStruct)
{  
 8007a24:	b480      	push	{r7}
 8007a26:	b087      	sub	sp, #28
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	6078      	str	r0, [r7, #4]
 8007a2c:	6039      	str	r1, [r7, #0]
  uint32_t green = 0;
 8007a2e:	2300      	movs	r3, #0
 8007a30:	617b      	str	r3, [r7, #20]
  uint32_t red = 0;
 8007a32:	2300      	movs	r3, #0
 8007a34:	613b      	str	r3, [r7, #16]
  uint32_t clutadd = 0;
 8007a36:	2300      	movs	r3, #0
 8007a38:	60fb      	str	r3, [r7, #12]
  assert_param(IS_LTDC_CLUTWR(LTDC_CLUT_InitStruct->LTDC_RedValue));
  assert_param(IS_LTDC_CLUTWR(LTDC_CLUT_InitStruct->LTDC_GreenValue));
  assert_param(IS_LTDC_CLUTWR(LTDC_CLUT_InitStruct->LTDC_BlueValue));
    
  /* Specifies the CLUT address and RGB value */
  green = (LTDC_CLUT_InitStruct->LTDC_GreenValue << 8);
 8007a3a:	683b      	ldr	r3, [r7, #0]
 8007a3c:	689b      	ldr	r3, [r3, #8]
 8007a3e:	021b      	lsls	r3, r3, #8
 8007a40:	617b      	str	r3, [r7, #20]
  red = (LTDC_CLUT_InitStruct->LTDC_RedValue << 16);
 8007a42:	683b      	ldr	r3, [r7, #0]
 8007a44:	68db      	ldr	r3, [r3, #12]
 8007a46:	041b      	lsls	r3, r3, #16
 8007a48:	613b      	str	r3, [r7, #16]
  clutadd = (LTDC_CLUT_InitStruct->LTDC_CLUTAdress << 24);
 8007a4a:	683b      	ldr	r3, [r7, #0]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	061b      	lsls	r3, r3, #24
 8007a50:	60fb      	str	r3, [r7, #12]
  LTDC_Layerx->CLUTWR  = (clutadd | LTDC_CLUT_InitStruct->LTDC_BlueValue | \
 8007a52:	683b      	ldr	r3, [r7, #0]
 8007a54:	685a      	ldr	r2, [r3, #4]
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	431a      	orrs	r2, r3
 8007a5a:	697b      	ldr	r3, [r7, #20]
 8007a5c:	431a      	orrs	r2, r3
                              green | red);
 8007a5e:	693b      	ldr	r3, [r7, #16]
 8007a60:	431a      	orrs	r2, r3
  LTDC_Layerx->CLUTWR  = (clutadd | LTDC_CLUT_InitStruct->LTDC_BlueValue | \
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	641a      	str	r2, [r3, #64]	; 0x40
}
 8007a66:	bf00      	nop
 8007a68:	371c      	adds	r7, #28
 8007a6a:	46bd      	mov	sp, r7
 8007a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a70:	4770      	bx	lr

08007a72 <LTDC_CLUTStructInit>:
  *         be initialized.
  * @retval None
  */

void LTDC_CLUTStructInit(LTDC_CLUT_InitTypeDef* LTDC_CLUT_InitStruct)
{
 8007a72:	b480      	push	{r7}
 8007a74:	b083      	sub	sp, #12
 8007a76:	af00      	add	r7, sp, #0
 8007a78:	6078      	str	r0, [r7, #4]
  /*!< Initialize the CLUT adress and RGB values */
  LTDC_CLUT_InitStruct->LTDC_CLUTAdress = 0x00;
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	2200      	movs	r2, #0
 8007a7e:	601a      	str	r2, [r3, #0]
  LTDC_CLUT_InitStruct->LTDC_BlueValue = 0x00;
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	2200      	movs	r2, #0
 8007a84:	605a      	str	r2, [r3, #4]
  LTDC_CLUT_InitStruct->LTDC_GreenValue = 0x00;
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	2200      	movs	r2, #0
 8007a8a:	609a      	str	r2, [r3, #8]
  LTDC_CLUT_InitStruct->LTDC_RedValue = 0x00;
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	2200      	movs	r2, #0
 8007a90:	60da      	str	r2, [r3, #12]
}
 8007a92:	bf00      	nop
 8007a94:	370c      	adds	r7, #12
 8007a96:	46bd      	mov	sp, r7
 8007a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a9c:	4770      	bx	lr

08007a9e <LTDC_LayerPosition>:
  * @retval Reload of the shadow registers values must be applied after layer 
  *         position reconfiguration.
  */

void LTDC_LayerPosition(LTDC_Layer_TypeDef* LTDC_Layerx, uint16_t OffsetX, uint16_t OffsetY)
{
 8007a9e:	b480      	push	{r7}
 8007aa0:	b089      	sub	sp, #36	; 0x24
 8007aa2:	af00      	add	r7, sp, #0
 8007aa4:	6078      	str	r0, [r7, #4]
 8007aa6:	460b      	mov	r3, r1
 8007aa8:	807b      	strh	r3, [r7, #2]
 8007aaa:	4613      	mov	r3, r2
 8007aac:	803b      	strh	r3, [r7, #0]
  uint32_t horizontal_start;
  uint32_t horizontal_stop;
  uint32_t vertical_start;
  uint32_t vertical_stop;
  
  LTDC_Layerx->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	685b      	ldr	r3, [r3, #4]
 8007ab2:	f403 4270 	and.w	r2, r3, #61440	; 0xf000
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	605a      	str	r2, [r3, #4]
  LTDC_Layerx->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	689b      	ldr	r3, [r3, #8]
 8007abe:	f403 4270 	and.w	r2, r3, #61440	; 0xf000
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	609a      	str	r2, [r3, #8]
  
  /* Reconfigures the horizontal and vertical start position */
  tempreg = LTDC->BPCR;
 8007ac6:	4b2c      	ldr	r3, [pc, #176]	; (8007b78 <LTDC_LayerPosition+0xda>)
 8007ac8:	68db      	ldr	r3, [r3, #12]
 8007aca:	61bb      	str	r3, [r7, #24]
  horizontal_start = (tempreg >> 16) + 1 + OffsetX;
 8007acc:	69bb      	ldr	r3, [r7, #24]
 8007ace:	0c1a      	lsrs	r2, r3, #16
 8007ad0:	887b      	ldrh	r3, [r7, #2]
 8007ad2:	4413      	add	r3, r2
 8007ad4:	3301      	adds	r3, #1
 8007ad6:	617b      	str	r3, [r7, #20]
  vertical_start = (tempreg & 0xFFFF) + 1 + OffsetY;
 8007ad8:	69bb      	ldr	r3, [r7, #24]
 8007ada:	b29a      	uxth	r2, r3
 8007adc:	883b      	ldrh	r3, [r7, #0]
 8007ade:	4413      	add	r3, r2
 8007ae0:	3301      	adds	r3, #1
 8007ae2:	613b      	str	r3, [r7, #16]
  
  /* Reconfigures the horizontal and vertical stop position */
  /* Get the number of byte per pixel */
  
  tempreg = LTDC_Layerx->PFCR;
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	691b      	ldr	r3, [r3, #16]
 8007ae8:	61bb      	str	r3, [r7, #24]
  
  if (tempreg == LTDC_Pixelformat_ARGB8888)
 8007aea:	69bb      	ldr	r3, [r7, #24]
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d102      	bne.n	8007af6 <LTDC_LayerPosition+0x58>
  {
    temp = 4;
 8007af0:	2304      	movs	r3, #4
 8007af2:	61fb      	str	r3, [r7, #28]
 8007af4:	e016      	b.n	8007b24 <LTDC_LayerPosition+0x86>
  }
  else if (tempreg == LTDC_Pixelformat_RGB888)
 8007af6:	69bb      	ldr	r3, [r7, #24]
 8007af8:	2b01      	cmp	r3, #1
 8007afa:	d102      	bne.n	8007b02 <LTDC_LayerPosition+0x64>
  {
    temp = 3;
 8007afc:	2303      	movs	r3, #3
 8007afe:	61fb      	str	r3, [r7, #28]
 8007b00:	e010      	b.n	8007b24 <LTDC_LayerPosition+0x86>
  }
  else if ((tempreg == LTDC_Pixelformat_ARGB4444) || 
 8007b02:	69bb      	ldr	r3, [r7, #24]
 8007b04:	2b04      	cmp	r3, #4
 8007b06:	d008      	beq.n	8007b1a <LTDC_LayerPosition+0x7c>
 8007b08:	69bb      	ldr	r3, [r7, #24]
 8007b0a:	2b02      	cmp	r3, #2
 8007b0c:	d005      	beq.n	8007b1a <LTDC_LayerPosition+0x7c>
          (tempreg == LTDC_Pixelformat_RGB565)    ||  
 8007b0e:	69bb      	ldr	r3, [r7, #24]
 8007b10:	2b03      	cmp	r3, #3
 8007b12:	d002      	beq.n	8007b1a <LTDC_LayerPosition+0x7c>
          (tempreg == LTDC_Pixelformat_ARGB1555)  ||
 8007b14:	69bb      	ldr	r3, [r7, #24]
 8007b16:	2b07      	cmp	r3, #7
 8007b18:	d102      	bne.n	8007b20 <LTDC_LayerPosition+0x82>
          (tempreg == LTDC_Pixelformat_AL88))
  {
    temp = 2;  
 8007b1a:	2302      	movs	r3, #2
 8007b1c:	61fb      	str	r3, [r7, #28]
 8007b1e:	e001      	b.n	8007b24 <LTDC_LayerPosition+0x86>
  }
  else
  {
    temp = 1;
 8007b20:	2301      	movs	r3, #1
 8007b22:	61fb      	str	r3, [r7, #28]
  }  
    
  tempreg = LTDC_Layerx->CFBLR;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b28:	61bb      	str	r3, [r7, #24]
  horizontal_stop = (((tempreg & 0x1FFF) - 3)/temp) + horizontal_start - 1;
 8007b2a:	69bb      	ldr	r3, [r7, #24]
 8007b2c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007b30:	1eda      	subs	r2, r3, #3
 8007b32:	69fb      	ldr	r3, [r7, #28]
 8007b34:	fbb2 f2f3 	udiv	r2, r2, r3
 8007b38:	697b      	ldr	r3, [r7, #20]
 8007b3a:	4413      	add	r3, r2
 8007b3c:	3b01      	subs	r3, #1
 8007b3e:	60fb      	str	r3, [r7, #12]
  
  tempreg = LTDC_Layerx->CFBLNR;
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b44:	61bb      	str	r3, [r7, #24]
  vertical_stop = (tempreg & 0x7FF) + vertical_start - 1;  
 8007b46:	69bb      	ldr	r3, [r7, #24]
 8007b48:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8007b4c:	693b      	ldr	r3, [r7, #16]
 8007b4e:	4413      	add	r3, r2
 8007b50:	3b01      	subs	r3, #1
 8007b52:	60bb      	str	r3, [r7, #8]
  
  LTDC_Layerx->WHPCR = horizontal_start | (horizontal_stop << 16);
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	041a      	lsls	r2, r3, #16
 8007b58:	697b      	ldr	r3, [r7, #20]
 8007b5a:	431a      	orrs	r2, r3
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	605a      	str	r2, [r3, #4]
  LTDC_Layerx->WVPCR = vertical_start | (vertical_stop << 16);  
 8007b60:	68bb      	ldr	r3, [r7, #8]
 8007b62:	041a      	lsls	r2, r3, #16
 8007b64:	693b      	ldr	r3, [r7, #16]
 8007b66:	431a      	orrs	r2, r3
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	609a      	str	r2, [r3, #8]
}
 8007b6c:	bf00      	nop
 8007b6e:	3724      	adds	r7, #36	; 0x24
 8007b70:	46bd      	mov	sp, r7
 8007b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b76:	4770      	bx	lr
 8007b78:	40016800 	.word	0x40016800

08007b7c <LTDC_LayerAlpha>:
  * @retval Reload of the shadow registers values must be applied after constant 
  *         alpha reconfiguration.         
  */

void LTDC_LayerAlpha(LTDC_Layer_TypeDef* LTDC_Layerx, uint8_t ConstantAlpha)
{  
 8007b7c:	b480      	push	{r7}
 8007b7e:	b083      	sub	sp, #12
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	6078      	str	r0, [r7, #4]
 8007b84:	460b      	mov	r3, r1
 8007b86:	70fb      	strb	r3, [r7, #3]
  /* reconfigure the constant alpha value */      
  LTDC_Layerx->CACR = ConstantAlpha;
 8007b88:	78fa      	ldrb	r2, [r7, #3]
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	615a      	str	r2, [r3, #20]
}
 8007b8e:	bf00      	nop
 8007b90:	370c      	adds	r7, #12
 8007b92:	46bd      	mov	sp, r7
 8007b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b98:	4770      	bx	lr

08007b9a <LTDC_LayerAddress>:
  * @retval Reload of the shadow registers values must be applied after layer 
  *         address reconfiguration.
  */

void LTDC_LayerAddress(LTDC_Layer_TypeDef* LTDC_Layerx, uint32_t Address)
{
 8007b9a:	b480      	push	{r7}
 8007b9c:	b083      	sub	sp, #12
 8007b9e:	af00      	add	r7, sp, #0
 8007ba0:	6078      	str	r0, [r7, #4]
 8007ba2:	6039      	str	r1, [r7, #0]
  /* Reconfigures the color frame buffer start address */
  LTDC_Layerx->CFBAR = Address;
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	683a      	ldr	r2, [r7, #0]
 8007ba8:	629a      	str	r2, [r3, #40]	; 0x28
}
 8007baa:	bf00      	nop
 8007bac:	370c      	adds	r7, #12
 8007bae:	46bd      	mov	sp, r7
 8007bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb4:	4770      	bx	lr

08007bb6 <LTDC_LayerSize>:
  * @retval Reload of the shadow registers values must be applied after layer 
  *         size reconfiguration.
  */

void LTDC_LayerSize(LTDC_Layer_TypeDef* LTDC_Layerx, uint32_t Width, uint32_t Height)
{
 8007bb6:	b480      	push	{r7}
 8007bb8:	b08b      	sub	sp, #44	; 0x2c
 8007bba:	af00      	add	r7, sp, #0
 8007bbc:	60f8      	str	r0, [r7, #12]
 8007bbe:	60b9      	str	r1, [r7, #8]
 8007bc0:	607a      	str	r2, [r7, #4]
  uint32_t horizontal_start;
  uint32_t horizontal_stop;
  uint32_t vertical_start;
  uint32_t vertical_stop;  
  
  tempreg = LTDC_Layerx->PFCR;
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	691b      	ldr	r3, [r3, #16]
 8007bc6:	623b      	str	r3, [r7, #32]
  
  if (tempreg == LTDC_Pixelformat_ARGB8888)
 8007bc8:	6a3b      	ldr	r3, [r7, #32]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d103      	bne.n	8007bd6 <LTDC_LayerSize+0x20>
  {
    temp = 4;
 8007bce:	2304      	movs	r3, #4
 8007bd0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007bd4:	e019      	b.n	8007c0a <LTDC_LayerSize+0x54>
  }
  else if (tempreg == LTDC_Pixelformat_RGB888)
 8007bd6:	6a3b      	ldr	r3, [r7, #32]
 8007bd8:	2b01      	cmp	r3, #1
 8007bda:	d103      	bne.n	8007be4 <LTDC_LayerSize+0x2e>
  {
    temp = 3;
 8007bdc:	2303      	movs	r3, #3
 8007bde:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007be2:	e012      	b.n	8007c0a <LTDC_LayerSize+0x54>
  }
  else if ((tempreg == LTDC_Pixelformat_ARGB4444) || \
 8007be4:	6a3b      	ldr	r3, [r7, #32]
 8007be6:	2b04      	cmp	r3, #4
 8007be8:	d008      	beq.n	8007bfc <LTDC_LayerSize+0x46>
 8007bea:	6a3b      	ldr	r3, [r7, #32]
 8007bec:	2b02      	cmp	r3, #2
 8007bee:	d005      	beq.n	8007bfc <LTDC_LayerSize+0x46>
          (tempreg == LTDC_Pixelformat_RGB565)    || \
 8007bf0:	6a3b      	ldr	r3, [r7, #32]
 8007bf2:	2b03      	cmp	r3, #3
 8007bf4:	d002      	beq.n	8007bfc <LTDC_LayerSize+0x46>
          (tempreg == LTDC_Pixelformat_ARGB1555)  || \
 8007bf6:	6a3b      	ldr	r3, [r7, #32]
 8007bf8:	2b07      	cmp	r3, #7
 8007bfa:	d103      	bne.n	8007c04 <LTDC_LayerSize+0x4e>
          (tempreg == LTDC_Pixelformat_AL88))
  {
    temp = 2;  
 8007bfc:	2302      	movs	r3, #2
 8007bfe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007c02:	e002      	b.n	8007c0a <LTDC_LayerSize+0x54>
  }
  else
  {
    temp = 1;
 8007c04:	2301      	movs	r3, #1
 8007c06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* update horizontal and vertical stop */
  tempreg = LTDC_Layerx->WHPCR;
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	685b      	ldr	r3, [r3, #4]
 8007c0e:	623b      	str	r3, [r7, #32]
  horizontal_start = (tempreg & 0x1FFF);
 8007c10:	6a3b      	ldr	r3, [r7, #32]
 8007c12:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007c16:	61fb      	str	r3, [r7, #28]
  horizontal_stop = Width + horizontal_start - 1;  
 8007c18:	68ba      	ldr	r2, [r7, #8]
 8007c1a:	69fb      	ldr	r3, [r7, #28]
 8007c1c:	4413      	add	r3, r2
 8007c1e:	3b01      	subs	r3, #1
 8007c20:	61bb      	str	r3, [r7, #24]

  tempreg = LTDC_Layerx->WVPCR;
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	689b      	ldr	r3, [r3, #8]
 8007c26:	623b      	str	r3, [r7, #32]
  vertical_start = (tempreg & 0x1FFF);
 8007c28:	6a3b      	ldr	r3, [r7, #32]
 8007c2a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007c2e:	617b      	str	r3, [r7, #20]
  vertical_stop = Height + vertical_start - 1;  
 8007c30:	687a      	ldr	r2, [r7, #4]
 8007c32:	697b      	ldr	r3, [r7, #20]
 8007c34:	4413      	add	r3, r2
 8007c36:	3b01      	subs	r3, #1
 8007c38:	613b      	str	r3, [r7, #16]
  
  LTDC_Layerx->WHPCR = horizontal_start | (horizontal_stop << 16);
 8007c3a:	69bb      	ldr	r3, [r7, #24]
 8007c3c:	041a      	lsls	r2, r3, #16
 8007c3e:	69fb      	ldr	r3, [r7, #28]
 8007c40:	431a      	orrs	r2, r3
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	605a      	str	r2, [r3, #4]
  LTDC_Layerx->WVPCR = vertical_start | (vertical_stop << 16);  
 8007c46:	693b      	ldr	r3, [r7, #16]
 8007c48:	041a      	lsls	r2, r3, #16
 8007c4a:	697b      	ldr	r3, [r7, #20]
 8007c4c:	431a      	orrs	r2, r3
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	609a      	str	r2, [r3, #8]

  /* Reconfigures the color frame buffer pitch in byte */
  LTDC_Layerx->CFBLR  = ((Width * temp) << 16) | ((Width * temp) + 3);  
 8007c52:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007c56:	68ba      	ldr	r2, [r7, #8]
 8007c58:	fb02 f303 	mul.w	r3, r2, r3
 8007c5c:	041a      	lsls	r2, r3, #16
 8007c5e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007c62:	68b9      	ldr	r1, [r7, #8]
 8007c64:	fb01 f303 	mul.w	r3, r1, r3
 8007c68:	3303      	adds	r3, #3
 8007c6a:	431a      	orrs	r2, r3
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reconfigures the frame buffer line number */
  LTDC_Layerx->CFBLNR  = Height;  
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	687a      	ldr	r2, [r7, #4]
 8007c74:	631a      	str	r2, [r3, #48]	; 0x30
  
}
 8007c76:	bf00      	nop
 8007c78:	372c      	adds	r7, #44	; 0x2c
 8007c7a:	46bd      	mov	sp, r7
 8007c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c80:	4770      	bx	lr

08007c82 <LTDC_LayerPixelFormat>:
  * @retval Reload of the shadow registers values must be applied after layer 
  *         pixel format reconfiguration.
  */

void LTDC_LayerPixelFormat(LTDC_Layer_TypeDef* LTDC_Layerx, uint32_t PixelFormat)
{
 8007c82:	b480      	push	{r7}
 8007c84:	b085      	sub	sp, #20
 8007c86:	af00      	add	r7, sp, #0
 8007c88:	6078      	str	r0, [r7, #4]
 8007c8a:	6039      	str	r1, [r7, #0]

  uint8_t temp;
  uint32_t tempreg;
  
  tempreg = LTDC_Layerx->PFCR;
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	691b      	ldr	r3, [r3, #16]
 8007c90:	60bb      	str	r3, [r7, #8]
  
  if (tempreg == LTDC_Pixelformat_ARGB8888)
 8007c92:	68bb      	ldr	r3, [r7, #8]
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d102      	bne.n	8007c9e <LTDC_LayerPixelFormat+0x1c>
  {
    temp = 4;
 8007c98:	2304      	movs	r3, #4
 8007c9a:	73fb      	strb	r3, [r7, #15]
 8007c9c:	e016      	b.n	8007ccc <LTDC_LayerPixelFormat+0x4a>
  }
  else if (tempreg == LTDC_Pixelformat_RGB888)
 8007c9e:	68bb      	ldr	r3, [r7, #8]
 8007ca0:	2b01      	cmp	r3, #1
 8007ca2:	d102      	bne.n	8007caa <LTDC_LayerPixelFormat+0x28>
  {
    temp = 3;
 8007ca4:	2303      	movs	r3, #3
 8007ca6:	73fb      	strb	r3, [r7, #15]
 8007ca8:	e010      	b.n	8007ccc <LTDC_LayerPixelFormat+0x4a>
  }
  else if ((tempreg == LTDC_Pixelformat_ARGB4444) || \
 8007caa:	68bb      	ldr	r3, [r7, #8]
 8007cac:	2b04      	cmp	r3, #4
 8007cae:	d008      	beq.n	8007cc2 <LTDC_LayerPixelFormat+0x40>
 8007cb0:	68bb      	ldr	r3, [r7, #8]
 8007cb2:	2b02      	cmp	r3, #2
 8007cb4:	d005      	beq.n	8007cc2 <LTDC_LayerPixelFormat+0x40>
          (tempreg == LTDC_Pixelformat_RGB565)    || \
 8007cb6:	68bb      	ldr	r3, [r7, #8]
 8007cb8:	2b03      	cmp	r3, #3
 8007cba:	d002      	beq.n	8007cc2 <LTDC_LayerPixelFormat+0x40>
          (tempreg == LTDC_Pixelformat_ARGB1555)  || \
 8007cbc:	68bb      	ldr	r3, [r7, #8]
 8007cbe:	2b07      	cmp	r3, #7
 8007cc0:	d102      	bne.n	8007cc8 <LTDC_LayerPixelFormat+0x46>
          (tempreg == LTDC_Pixelformat_AL88))  
  {
    temp = 2;  
 8007cc2:	2302      	movs	r3, #2
 8007cc4:	73fb      	strb	r3, [r7, #15]
 8007cc6:	e001      	b.n	8007ccc <LTDC_LayerPixelFormat+0x4a>
  }
  else
  {
    temp = 1;
 8007cc8:	2301      	movs	r3, #1
 8007cca:	73fb      	strb	r3, [r7, #15]
  }
  
  tempreg = (LTDC_Layerx->CFBLR >> 16);
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cd0:	0c1b      	lsrs	r3, r3, #16
 8007cd2:	60bb      	str	r3, [r7, #8]
  tempreg = (tempreg / temp); 
 8007cd4:	7bfb      	ldrb	r3, [r7, #15]
 8007cd6:	68ba      	ldr	r2, [r7, #8]
 8007cd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8007cdc:	60bb      	str	r3, [r7, #8]
  
  if (PixelFormat == LTDC_Pixelformat_ARGB8888)
 8007cde:	683b      	ldr	r3, [r7, #0]
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d102      	bne.n	8007cea <LTDC_LayerPixelFormat+0x68>
  {
    temp = 4;
 8007ce4:	2304      	movs	r3, #4
 8007ce6:	73fb      	strb	r3, [r7, #15]
 8007ce8:	e016      	b.n	8007d18 <LTDC_LayerPixelFormat+0x96>
  }
  else if (PixelFormat == LTDC_Pixelformat_RGB888)
 8007cea:	683b      	ldr	r3, [r7, #0]
 8007cec:	2b01      	cmp	r3, #1
 8007cee:	d102      	bne.n	8007cf6 <LTDC_LayerPixelFormat+0x74>
  {
    temp = 3;
 8007cf0:	2303      	movs	r3, #3
 8007cf2:	73fb      	strb	r3, [r7, #15]
 8007cf4:	e010      	b.n	8007d18 <LTDC_LayerPixelFormat+0x96>
  }
  else if ((PixelFormat == LTDC_Pixelformat_ARGB4444) || \
 8007cf6:	683b      	ldr	r3, [r7, #0]
 8007cf8:	2b04      	cmp	r3, #4
 8007cfa:	d008      	beq.n	8007d0e <LTDC_LayerPixelFormat+0x8c>
 8007cfc:	683b      	ldr	r3, [r7, #0]
 8007cfe:	2b02      	cmp	r3, #2
 8007d00:	d005      	beq.n	8007d0e <LTDC_LayerPixelFormat+0x8c>
          (PixelFormat == LTDC_Pixelformat_RGB565)    || \
 8007d02:	683b      	ldr	r3, [r7, #0]
 8007d04:	2b03      	cmp	r3, #3
 8007d06:	d002      	beq.n	8007d0e <LTDC_LayerPixelFormat+0x8c>
          (PixelFormat == LTDC_Pixelformat_ARGB1555)  || \
 8007d08:	683b      	ldr	r3, [r7, #0]
 8007d0a:	2b07      	cmp	r3, #7
 8007d0c:	d102      	bne.n	8007d14 <LTDC_LayerPixelFormat+0x92>
          (PixelFormat == LTDC_Pixelformat_AL88))
  {
    temp = 2;  
 8007d0e:	2302      	movs	r3, #2
 8007d10:	73fb      	strb	r3, [r7, #15]
 8007d12:	e001      	b.n	8007d18 <LTDC_LayerPixelFormat+0x96>
  }
  else
  {
    temp = 1;
 8007d14:	2301      	movs	r3, #1
 8007d16:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Reconfigures the color frame buffer pitch in byte */
  LTDC_Layerx->CFBLR  = ((tempreg * temp) << 16) | ((tempreg * temp) + 3);  
 8007d18:	7bfb      	ldrb	r3, [r7, #15]
 8007d1a:	68ba      	ldr	r2, [r7, #8]
 8007d1c:	fb02 f303 	mul.w	r3, r2, r3
 8007d20:	041a      	lsls	r2, r3, #16
 8007d22:	7bfb      	ldrb	r3, [r7, #15]
 8007d24:	68b9      	ldr	r1, [r7, #8]
 8007d26:	fb01 f303 	mul.w	r3, r1, r3
 8007d2a:	3303      	adds	r3, #3
 8007d2c:	431a      	orrs	r2, r3
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reconfigures the color frame buffer start address */
  LTDC_Layerx->PFCR = PixelFormat;
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	683a      	ldr	r2, [r7, #0]
 8007d36:	611a      	str	r2, [r3, #16]
    
}
 8007d38:	bf00      	nop
 8007d3a:	3714      	adds	r7, #20
 8007d3c:	46bd      	mov	sp, r7
 8007d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d42:	4770      	bx	lr

08007d44 <LTDC_ITConfig>:
  * @param NewState: new state of the specified LTDC interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void LTDC_ITConfig(uint32_t LTDC_IT, FunctionalState NewState)
{
 8007d44:	b480      	push	{r7}
 8007d46:	b083      	sub	sp, #12
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	6078      	str	r0, [r7, #4]
 8007d4c:	460b      	mov	r3, r1
 8007d4e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_LTDC_IT(LTDC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8007d50:	78fb      	ldrb	r3, [r7, #3]
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d006      	beq.n	8007d64 <LTDC_ITConfig+0x20>
  {
    LTDC->IER |= LTDC_IT;
 8007d56:	4b0a      	ldr	r3, [pc, #40]	; (8007d80 <LTDC_ITConfig+0x3c>)
 8007d58:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007d5a:	4909      	ldr	r1, [pc, #36]	; (8007d80 <LTDC_ITConfig+0x3c>)
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	4313      	orrs	r3, r2
 8007d60:	634b      	str	r3, [r1, #52]	; 0x34
  }
  else
  {
    LTDC->IER &= (uint32_t)~LTDC_IT;
  }
}
 8007d62:	e006      	b.n	8007d72 <LTDC_ITConfig+0x2e>
    LTDC->IER &= (uint32_t)~LTDC_IT;
 8007d64:	4b06      	ldr	r3, [pc, #24]	; (8007d80 <LTDC_ITConfig+0x3c>)
 8007d66:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	43db      	mvns	r3, r3
 8007d6c:	4904      	ldr	r1, [pc, #16]	; (8007d80 <LTDC_ITConfig+0x3c>)
 8007d6e:	4013      	ands	r3, r2
 8007d70:	634b      	str	r3, [r1, #52]	; 0x34
}
 8007d72:	bf00      	nop
 8007d74:	370c      	adds	r7, #12
 8007d76:	46bd      	mov	sp, r7
 8007d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7c:	4770      	bx	lr
 8007d7e:	bf00      	nop
 8007d80:	40016800 	.word	0x40016800

08007d84 <LTDC_GetFlagStatus>:
  *     @arg LTDC_FLAG_TERR: Transfer Error Interrupt flag.
  *     @arg LTDC_FLAG_RR:   Register Reload interrupt flag.
  * @retval The new state of LTDC_FLAG (SET or RESET).
  */
FlagStatus LTDC_GetFlagStatus(uint32_t LTDC_FLAG)
{
 8007d84:	b480      	push	{r7}
 8007d86:	b085      	sub	sp, #20
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 8007d8c:	2300      	movs	r3, #0
 8007d8e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_LTDC_FLAG(LTDC_FLAG));

  if ((LTDC->ISR & LTDC_FLAG) != (uint32_t)RESET)
 8007d90:	4b08      	ldr	r3, [pc, #32]	; (8007db4 <LTDC_GetFlagStatus+0x30>)
 8007d92:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	4013      	ands	r3, r2
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d002      	beq.n	8007da2 <LTDC_GetFlagStatus+0x1e>
  {
    bitstatus = SET;
 8007d9c:	2301      	movs	r3, #1
 8007d9e:	73fb      	strb	r3, [r7, #15]
 8007da0:	e001      	b.n	8007da6 <LTDC_GetFlagStatus+0x22>
  }
  else
  {
    bitstatus = RESET;
 8007da2:	2300      	movs	r3, #0
 8007da4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007da6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007da8:	4618      	mov	r0, r3
 8007daa:	3714      	adds	r7, #20
 8007dac:	46bd      	mov	sp, r7
 8007dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db2:	4770      	bx	lr
 8007db4:	40016800 	.word	0x40016800

08007db8 <LTDC_ClearFlag>:
  *     @arg LTDC_FLAG_TERR: Transfer Error Interrupt flag.
  *     @arg LTDC_FLAG_RR:   Register Reload interrupt flag.  
  * @retval None
  */
void LTDC_ClearFlag(uint32_t LTDC_FLAG)
{
 8007db8:	b480      	push	{r7}
 8007dba:	b083      	sub	sp, #12
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_LTDC_FLAG(LTDC_FLAG));

  /* Clear the corresponding LTDC flag */
  LTDC->ICR = (uint32_t)LTDC_FLAG;
 8007dc0:	4a04      	ldr	r2, [pc, #16]	; (8007dd4 <LTDC_ClearFlag+0x1c>)
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8007dc6:	bf00      	nop
 8007dc8:	370c      	adds	r7, #12
 8007dca:	46bd      	mov	sp, r7
 8007dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd0:	4770      	bx	lr
 8007dd2:	bf00      	nop
 8007dd4:	40016800 	.word	0x40016800

08007dd8 <LTDC_GetITStatus>:
  *     @arg LTDC_IT_TERR: Transfer Error Interrupt Enable.
  *     @arg LTDC_IT_RR:   Register Reload interrupt Enable.
  * @retval The new state of the LTDC_IT (SET or RESET).
  */
ITStatus LTDC_GetITStatus(uint32_t LTDC_IT)
{
 8007dd8:	b480      	push	{r7}
 8007dda:	b085      	sub	sp, #20
 8007ddc:	af00      	add	r7, sp, #0
 8007dde:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
 8007de0:	2300      	movs	r3, #0
 8007de2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_LTDC_IT(LTDC_IT));

  if ((LTDC->ISR & LTDC_IT) != (uint32_t)RESET)
 8007de4:	4b0f      	ldr	r3, [pc, #60]	; (8007e24 <LTDC_GetITStatus+0x4c>)
 8007de6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	4013      	ands	r3, r2
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d002      	beq.n	8007df6 <LTDC_GetITStatus+0x1e>
  {
    bitstatus = SET;
 8007df0:	2301      	movs	r3, #1
 8007df2:	73fb      	strb	r3, [r7, #15]
 8007df4:	e001      	b.n	8007dfa <LTDC_GetITStatus+0x22>
  }
  else
  {
    bitstatus = RESET;
 8007df6:	2300      	movs	r3, #0
 8007df8:	73fb      	strb	r3, [r7, #15]
  }

  if (((LTDC->IER & LTDC_IT) != (uint32_t)RESET) && (bitstatus != (uint32_t)RESET))
 8007dfa:	4b0a      	ldr	r3, [pc, #40]	; (8007e24 <LTDC_GetITStatus+0x4c>)
 8007dfc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	4013      	ands	r3, r2
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d005      	beq.n	8007e12 <LTDC_GetITStatus+0x3a>
 8007e06:	7bfb      	ldrb	r3, [r7, #15]
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d002      	beq.n	8007e12 <LTDC_GetITStatus+0x3a>
  {
    bitstatus = SET;
 8007e0c:	2301      	movs	r3, #1
 8007e0e:	73fb      	strb	r3, [r7, #15]
 8007e10:	e001      	b.n	8007e16 <LTDC_GetITStatus+0x3e>
  }
  else
  {
    bitstatus = RESET;
 8007e12:	2300      	movs	r3, #0
 8007e14:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007e16:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e18:	4618      	mov	r0, r3
 8007e1a:	3714      	adds	r7, #20
 8007e1c:	46bd      	mov	sp, r7
 8007e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e22:	4770      	bx	lr
 8007e24:	40016800 	.word	0x40016800

08007e28 <LTDC_ClearITPendingBit>:
  *     @arg LTDC_IT_TERRIE: Transfer Error Interrupt.
  *     @arg LTDC_IT_RRIE:   Register Reload interrupt.
  * @retval None
  */
void LTDC_ClearITPendingBit(uint32_t LTDC_IT)
{
 8007e28:	b480      	push	{r7}
 8007e2a:	b083      	sub	sp, #12
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_LTDC_IT(LTDC_IT));

  /* Clear the corresponding LTDC Interrupt */
  LTDC->ICR = (uint32_t)LTDC_IT;
 8007e30:	4a04      	ldr	r2, [pc, #16]	; (8007e44 <LTDC_ClearITPendingBit+0x1c>)
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8007e36:	bf00      	nop
 8007e38:	370c      	adds	r7, #12
 8007e3a:	46bd      	mov	sp, r7
 8007e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e40:	4770      	bx	lr
 8007e42:	bf00      	nop
 8007e44:	40016800 	.word	0x40016800

08007e48 <PWR_DeInit>:
  * @brief  Deinitializes the PWR peripheral registers to their default reset values.     
  * @param  None
  * @retval None
  */
void PWR_DeInit(void)
{
 8007e48:	b580      	push	{r7, lr}
 8007e4a:	af00      	add	r7, sp, #0
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_PWR, ENABLE);
 8007e4c:	2101      	movs	r1, #1
 8007e4e:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8007e52:	f000 fe65 	bl	8008b20 <RCC_APB1PeriphResetCmd>
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_PWR, DISABLE);
 8007e56:	2100      	movs	r1, #0
 8007e58:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8007e5c:	f000 fe60 	bl	8008b20 <RCC_APB1PeriphResetCmd>
}
 8007e60:	bf00      	nop
 8007e62:	bd80      	pop	{r7, pc}

08007e64 <PWR_BackupAccessCmd>:
  * @param  NewState: new state of the access to the backup domain.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void PWR_BackupAccessCmd(FunctionalState NewState)
{
 8007e64:	b480      	push	{r7}
 8007e66:	b083      	sub	sp, #12
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	4603      	mov	r3, r0
 8007e6c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)NewState;
 8007e6e:	4a04      	ldr	r2, [pc, #16]	; (8007e80 <PWR_BackupAccessCmd+0x1c>)
 8007e70:	79fb      	ldrb	r3, [r7, #7]
 8007e72:	6013      	str	r3, [r2, #0]
}
 8007e74:	bf00      	nop
 8007e76:	370c      	adds	r7, #12
 8007e78:	46bd      	mov	sp, r7
 8007e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e7e:	4770      	bx	lr
 8007e80:	420e0020 	.word	0x420e0020

08007e84 <PWR_PVDLevelConfig>:
  *         more details about the voltage threshold corresponding to each 
  *         detection level.
  * @retval None
  */
void PWR_PVDLevelConfig(uint32_t PWR_PVDLevel)
{
 8007e84:	b480      	push	{r7}
 8007e86:	b085      	sub	sp, #20
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8007e8c:	2300      	movs	r3, #0
 8007e8e:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_PWR_PVD_LEVEL(PWR_PVDLevel));
  
  tmpreg = PWR->CR;
 8007e90:	4b09      	ldr	r3, [pc, #36]	; (8007eb8 <PWR_PVDLevelConfig+0x34>)
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	60fb      	str	r3, [r7, #12]
  
  /* Clear PLS[7:5] bits */
  tmpreg &= CR_PLS_MASK;
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8007e9c:	60fb      	str	r3, [r7, #12]
  
  /* Set PLS[7:5] bits according to PWR_PVDLevel value */
  tmpreg |= PWR_PVDLevel;
 8007e9e:	68fa      	ldr	r2, [r7, #12]
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	4313      	orrs	r3, r2
 8007ea4:	60fb      	str	r3, [r7, #12]
  
  /* Store the new value */
  PWR->CR = tmpreg;
 8007ea6:	4a04      	ldr	r2, [pc, #16]	; (8007eb8 <PWR_PVDLevelConfig+0x34>)
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	6013      	str	r3, [r2, #0]
}
 8007eac:	bf00      	nop
 8007eae:	3714      	adds	r7, #20
 8007eb0:	46bd      	mov	sp, r7
 8007eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb6:	4770      	bx	lr
 8007eb8:	40007000 	.word	0x40007000

08007ebc <PWR_PVDCmd>:
  * @param  NewState: new state of the PVD.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void PWR_PVDCmd(FunctionalState NewState)
{
 8007ebc:	b480      	push	{r7}
 8007ebe:	b083      	sub	sp, #12
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	4603      	mov	r3, r0
 8007ec4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) CR_PVDE_BB = (uint32_t)NewState;
 8007ec6:	4a04      	ldr	r2, [pc, #16]	; (8007ed8 <PWR_PVDCmd+0x1c>)
 8007ec8:	79fb      	ldrb	r3, [r7, #7]
 8007eca:	6013      	str	r3, [r2, #0]
}
 8007ecc:	bf00      	nop
 8007ece:	370c      	adds	r7, #12
 8007ed0:	46bd      	mov	sp, r7
 8007ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed6:	4770      	bx	lr
 8007ed8:	420e0010 	.word	0x420e0010

08007edc <PWR_WakeUpPinCmd>:
  * @param  NewState: new state of the WakeUp Pin functionality.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void PWR_WakeUpPinCmd(FunctionalState NewState)
{
 8007edc:	b480      	push	{r7}
 8007ede:	b083      	sub	sp, #12
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	4603      	mov	r3, r0
 8007ee4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CSR_EWUP_BB = (uint32_t)NewState;
 8007ee6:	4a04      	ldr	r2, [pc, #16]	; (8007ef8 <PWR_WakeUpPinCmd+0x1c>)
 8007ee8:	79fb      	ldrb	r3, [r7, #7]
 8007eea:	6013      	str	r3, [r2, #0]
}
 8007eec:	bf00      	nop
 8007eee:	370c      	adds	r7, #12
 8007ef0:	46bd      	mov	sp, r7
 8007ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef6:	4770      	bx	lr
 8007ef8:	420e00a0 	.word	0x420e00a0

08007efc <PWR_BackupRegulatorCmd>:
  * @param  NewState: new state of the Backup Regulator.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void PWR_BackupRegulatorCmd(FunctionalState NewState)
{
 8007efc:	b480      	push	{r7}
 8007efe:	b083      	sub	sp, #12
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	4603      	mov	r3, r0
 8007f04:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CSR_BRE_BB = (uint32_t)NewState;
 8007f06:	4a04      	ldr	r2, [pc, #16]	; (8007f18 <PWR_BackupRegulatorCmd+0x1c>)
 8007f08:	79fb      	ldrb	r3, [r7, #7]
 8007f0a:	6013      	str	r3, [r2, #0]
}
 8007f0c:	bf00      	nop
 8007f0e:	370c      	adds	r7, #12
 8007f10:	46bd      	mov	sp, r7
 8007f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f16:	4770      	bx	lr
 8007f18:	420e00a4 	.word	0x420e00a4

08007f1c <PWR_MainRegulatorModeConfig>:
  *            @arg PWR_Regulator_Voltage_Scale3: Regulator voltage output Scale 3 mode, 
  *                                                System frequency up to 120 MHz (only for STM32F42xxx/43xxx devices)
  * @retval None
  */
void PWR_MainRegulatorModeConfig(uint32_t PWR_Regulator_Voltage)
{
 8007f1c:	b480      	push	{r7}
 8007f1e:	b085      	sub	sp, #20
 8007f20:	af00      	add	r7, sp, #0
 8007f22:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8007f24:	2300      	movs	r3, #0
 8007f26:	60fb      	str	r3, [r7, #12]
	
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR_VOLTAGE(PWR_Regulator_Voltage));

  tmpreg = PWR->CR;
 8007f28:	4b09      	ldr	r3, [pc, #36]	; (8007f50 <PWR_MainRegulatorModeConfig+0x34>)
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	60fb      	str	r3, [r7, #12]
  
  /* Clear VOS[15:14] bits */
  tmpreg &= CR_VOS_MASK;
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8007f34:	60fb      	str	r3, [r7, #12]
  
  /* Set VOS[15:14] bits according to PWR_Regulator_Voltage value */
  tmpreg |= PWR_Regulator_Voltage;
 8007f36:	68fa      	ldr	r2, [r7, #12]
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	4313      	orrs	r3, r2
 8007f3c:	60fb      	str	r3, [r7, #12]
  
  /* Store the new value */
  PWR->CR = tmpreg;
 8007f3e:	4a04      	ldr	r2, [pc, #16]	; (8007f50 <PWR_MainRegulatorModeConfig+0x34>)
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	6013      	str	r3, [r2, #0]
}
 8007f44:	bf00      	nop
 8007f46:	3714      	adds	r7, #20
 8007f48:	46bd      	mov	sp, r7
 8007f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f4e:	4770      	bx	lr
 8007f50:	40007000 	.word	0x40007000

08007f54 <PWR_OverDriveCmd>:
  * @param  NewState: new state of the Over Drive mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void PWR_OverDriveCmd(FunctionalState NewState)
{
 8007f54:	b480      	push	{r7}
 8007f56:	b083      	sub	sp, #12
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	4603      	mov	r3, r0
 8007f5c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  /* Set/Reset the ODEN bit to enable/disable the Over Drive mode */
  *(__IO uint32_t *) CR_ODEN_BB = (uint32_t)NewState;
 8007f5e:	4a04      	ldr	r2, [pc, #16]	; (8007f70 <PWR_OverDriveCmd+0x1c>)
 8007f60:	79fb      	ldrb	r3, [r7, #7]
 8007f62:	6013      	str	r3, [r2, #0]
}
 8007f64:	bf00      	nop
 8007f66:	370c      	adds	r7, #12
 8007f68:	46bd      	mov	sp, r7
 8007f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f6e:	4770      	bx	lr
 8007f70:	420e0040 	.word	0x420e0040

08007f74 <PWR_OverDriveSWCmd>:
  * @param  NewState: new state of the Over Drive switching mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void PWR_OverDriveSWCmd(FunctionalState NewState)
{
 8007f74:	b480      	push	{r7}
 8007f76:	b083      	sub	sp, #12
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	4603      	mov	r3, r0
 8007f7c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Set/Reset the ODSWEN bit to enable/disable the Over Drive switching mode */
  *(__IO uint32_t *) CR_ODSWEN_BB = (uint32_t)NewState;
 8007f7e:	4a04      	ldr	r2, [pc, #16]	; (8007f90 <PWR_OverDriveSWCmd+0x1c>)
 8007f80:	79fb      	ldrb	r3, [r7, #7]
 8007f82:	6013      	str	r3, [r2, #0]
}
 8007f84:	bf00      	nop
 8007f86:	370c      	adds	r7, #12
 8007f88:	46bd      	mov	sp, r7
 8007f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f8e:	4770      	bx	lr
 8007f90:	420e0044 	.word	0x420e0044

08007f94 <PWR_UnderDriveCmd>:
  * @param  NewState: new state of the Under Drive mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void PWR_UnderDriveCmd(FunctionalState NewState)
{
 8007f94:	b480      	push	{r7}
 8007f96:	b083      	sub	sp, #12
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	4603      	mov	r3, r0
 8007f9c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8007f9e:	79fb      	ldrb	r3, [r7, #7]
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d006      	beq.n	8007fb2 <PWR_UnderDriveCmd+0x1e>
  {
    /* Set the UDEN[1:0] bits to enable the Under Drive mode */
    PWR->CR |= (uint32_t)PWR_CR_UDEN;
 8007fa4:	4b09      	ldr	r3, [pc, #36]	; (8007fcc <PWR_UnderDriveCmd+0x38>)
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	4a08      	ldr	r2, [pc, #32]	; (8007fcc <PWR_UnderDriveCmd+0x38>)
 8007faa:	f443 2340 	orr.w	r3, r3, #786432	; 0xc0000
 8007fae:	6013      	str	r3, [r2, #0]
  else
  {
    /* Reset the UDEN[1:0] bits to disable the Under Drive mode */
    PWR->CR &= (uint32_t)(~PWR_CR_UDEN);
  }
}
 8007fb0:	e005      	b.n	8007fbe <PWR_UnderDriveCmd+0x2a>
    PWR->CR &= (uint32_t)(~PWR_CR_UDEN);
 8007fb2:	4b06      	ldr	r3, [pc, #24]	; (8007fcc <PWR_UnderDriveCmd+0x38>)
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	4a05      	ldr	r2, [pc, #20]	; (8007fcc <PWR_UnderDriveCmd+0x38>)
 8007fb8:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8007fbc:	6013      	str	r3, [r2, #0]
}
 8007fbe:	bf00      	nop
 8007fc0:	370c      	adds	r7, #12
 8007fc2:	46bd      	mov	sp, r7
 8007fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc8:	4770      	bx	lr
 8007fca:	bf00      	nop
 8007fcc:	40007000 	.word	0x40007000

08007fd0 <PWR_FlashPowerDownCmd>:
  * @param  NewState: new state of the Flash power mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void PWR_FlashPowerDownCmd(FunctionalState NewState)
{
 8007fd0:	b480      	push	{r7}
 8007fd2:	b083      	sub	sp, #12
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	4603      	mov	r3, r0
 8007fd8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_FPDS_BB = (uint32_t)NewState;
 8007fda:	4a04      	ldr	r2, [pc, #16]	; (8007fec <PWR_FlashPowerDownCmd+0x1c>)
 8007fdc:	79fb      	ldrb	r3, [r7, #7]
 8007fde:	6013      	str	r3, [r2, #0]
}
 8007fe0:	bf00      	nop
 8007fe2:	370c      	adds	r7, #12
 8007fe4:	46bd      	mov	sp, r7
 8007fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fea:	4770      	bx	lr
 8007fec:	420e0024 	.word	0x420e0024

08007ff0 <PWR_EnterSTOPMode>:
  *            @arg PWR_STOPEntry_WFI: enter STOP mode with WFI instruction
  *            @arg PWR_STOPEntry_WFE: enter STOP mode with WFE instruction
  * @retval None
  */
void PWR_EnterSTOPMode(uint32_t PWR_Regulator, uint8_t PWR_STOPEntry)
{
 8007ff0:	b480      	push	{r7}
 8007ff2:	b085      	sub	sp, #20
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	6078      	str	r0, [r7, #4]
 8007ff8:	460b      	mov	r3, r1
 8007ffa:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpreg = 0;
 8007ffc:	2300      	movs	r3, #0
 8007ffe:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(PWR_Regulator));
  assert_param(IS_PWR_STOP_ENTRY(PWR_STOPEntry));
  
  /* Select the regulator state in STOP mode ---------------------------------*/
  tmpreg = PWR->CR;
 8008000:	4b13      	ldr	r3, [pc, #76]	; (8008050 <PWR_EnterSTOPMode+0x60>)
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	60fb      	str	r3, [r7, #12]
  /* Clear PDDS and LPDS bits */
  tmpreg &= CR_DS_MASK;
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800800c:	f023 0303 	bic.w	r3, r3, #3
 8008010:	60fb      	str	r3, [r7, #12]
  
  /* Set LPDS, MRLVDS and LPLVDS bits according to PWR_Regulator value */
  tmpreg |= PWR_Regulator;
 8008012:	68fa      	ldr	r2, [r7, #12]
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	4313      	orrs	r3, r2
 8008018:	60fb      	str	r3, [r7, #12]
  
  /* Store the new value */
  PWR->CR = tmpreg;
 800801a:	4a0d      	ldr	r2, [pc, #52]	; (8008050 <PWR_EnterSTOPMode+0x60>)
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	6013      	str	r3, [r2, #0]
  
  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
 8008020:	4b0c      	ldr	r3, [pc, #48]	; (8008054 <PWR_EnterSTOPMode+0x64>)
 8008022:	691b      	ldr	r3, [r3, #16]
 8008024:	4a0b      	ldr	r2, [pc, #44]	; (8008054 <PWR_EnterSTOPMode+0x64>)
 8008026:	f043 0304 	orr.w	r3, r3, #4
 800802a:	6113      	str	r3, [r2, #16]
  
  /* Select STOP mode entry --------------------------------------------------*/
  if(PWR_STOPEntry == PWR_STOPEntry_WFI)
 800802c:	78fb      	ldrb	r3, [r7, #3]
 800802e:	2b01      	cmp	r3, #1
 8008030:	d101      	bne.n	8008036 <PWR_EnterSTOPMode+0x46>
  {   
    /* Request Wait For Interrupt */
    __WFI();
 8008032:	bf30      	wfi
 8008034:	e000      	b.n	8008038 <PWR_EnterSTOPMode+0x48>
  }
  else
  {
    /* Request Wait For Event */
    __WFE();
 8008036:	bf20      	wfe
  }
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  SCB->SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP_Msk);  
 8008038:	4b06      	ldr	r3, [pc, #24]	; (8008054 <PWR_EnterSTOPMode+0x64>)
 800803a:	691b      	ldr	r3, [r3, #16]
 800803c:	4a05      	ldr	r2, [pc, #20]	; (8008054 <PWR_EnterSTOPMode+0x64>)
 800803e:	f023 0304 	bic.w	r3, r3, #4
 8008042:	6113      	str	r3, [r2, #16]
}
 8008044:	bf00      	nop
 8008046:	3714      	adds	r7, #20
 8008048:	46bd      	mov	sp, r7
 800804a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800804e:	4770      	bx	lr
 8008050:	40007000 	.word	0x40007000
 8008054:	e000ed00 	.word	0xe000ed00

08008058 <PWR_EnterUnderDriveSTOPMode>:
  *            @arg PWR_STOPEntry_WFI: enter STOP mode with WFI instruction
  *            @arg PWR_STOPEntry_WFE: enter STOP mode with WFE instruction
  * @retval None
  */
void PWR_EnterUnderDriveSTOPMode(uint32_t PWR_Regulator, uint8_t PWR_STOPEntry)
{
 8008058:	b480      	push	{r7}
 800805a:	b085      	sub	sp, #20
 800805c:	af00      	add	r7, sp, #0
 800805e:	6078      	str	r0, [r7, #4]
 8008060:	460b      	mov	r3, r1
 8008062:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpreg = 0;
 8008064:	2300      	movs	r3, #0
 8008066:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR_UNDERDRIVE(PWR_Regulator));
  assert_param(IS_PWR_STOP_ENTRY(PWR_STOPEntry));
  
  /* Select the regulator state in STOP mode ---------------------------------*/
  tmpreg = PWR->CR;
 8008068:	4b13      	ldr	r3, [pc, #76]	; (80080b8 <PWR_EnterUnderDriveSTOPMode+0x60>)
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	60fb      	str	r3, [r7, #12]
  /* Clear PDDS and LPDS bits */
  tmpreg &= CR_DS_MASK;
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8008074:	f023 0303 	bic.w	r3, r3, #3
 8008078:	60fb      	str	r3, [r7, #12]
  
  /* Set LPDS, MRLUDS and LPLUDS bits according to PWR_Regulator value */
  tmpreg |= PWR_Regulator;
 800807a:	68fa      	ldr	r2, [r7, #12]
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	4313      	orrs	r3, r2
 8008080:	60fb      	str	r3, [r7, #12]
  
  /* Store the new value */
  PWR->CR = tmpreg;
 8008082:	4a0d      	ldr	r2, [pc, #52]	; (80080b8 <PWR_EnterUnderDriveSTOPMode+0x60>)
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	6013      	str	r3, [r2, #0]
  
  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
 8008088:	4b0c      	ldr	r3, [pc, #48]	; (80080bc <PWR_EnterUnderDriveSTOPMode+0x64>)
 800808a:	691b      	ldr	r3, [r3, #16]
 800808c:	4a0b      	ldr	r2, [pc, #44]	; (80080bc <PWR_EnterUnderDriveSTOPMode+0x64>)
 800808e:	f043 0304 	orr.w	r3, r3, #4
 8008092:	6113      	str	r3, [r2, #16]
  
  /* Select STOP mode entry --------------------------------------------------*/
  if(PWR_STOPEntry == PWR_STOPEntry_WFI)
 8008094:	78fb      	ldrb	r3, [r7, #3]
 8008096:	2b01      	cmp	r3, #1
 8008098:	d101      	bne.n	800809e <PWR_EnterUnderDriveSTOPMode+0x46>
  {   
    /* Request Wait For Interrupt */
    __WFI();
 800809a:	bf30      	wfi
 800809c:	e000      	b.n	80080a0 <PWR_EnterUnderDriveSTOPMode+0x48>
  }
  else
  {
    /* Request Wait For Event */
    __WFE();
 800809e:	bf20      	wfe
  }
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  SCB->SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP_Msk);  
 80080a0:	4b06      	ldr	r3, [pc, #24]	; (80080bc <PWR_EnterUnderDriveSTOPMode+0x64>)
 80080a2:	691b      	ldr	r3, [r3, #16]
 80080a4:	4a05      	ldr	r2, [pc, #20]	; (80080bc <PWR_EnterUnderDriveSTOPMode+0x64>)
 80080a6:	f023 0304 	bic.w	r3, r3, #4
 80080aa:	6113      	str	r3, [r2, #16]
}
 80080ac:	bf00      	nop
 80080ae:	3714      	adds	r7, #20
 80080b0:	46bd      	mov	sp, r7
 80080b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b6:	4770      	bx	lr
 80080b8:	40007000 	.word	0x40007000
 80080bc:	e000ed00 	.word	0xe000ed00

080080c0 <PWR_EnterSTANDBYMode>:
  *          - WKUP pin 1 (PA0) if enabled.       
  * @param  None
  * @retval None
  */
void PWR_EnterSTANDBYMode(void)
{
 80080c0:	b480      	push	{r7}
 80080c2:	af00      	add	r7, sp, #0
  /* Clear Wakeup flag */
  PWR->CR |= PWR_CR_CWUF;
 80080c4:	4b0b      	ldr	r3, [pc, #44]	; (80080f4 <PWR_EnterSTANDBYMode+0x34>)
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	4a0a      	ldr	r2, [pc, #40]	; (80080f4 <PWR_EnterSTANDBYMode+0x34>)
 80080ca:	f043 0304 	orr.w	r3, r3, #4
 80080ce:	6013      	str	r3, [r2, #0]
  
  /* Select STANDBY mode */
  PWR->CR |= PWR_CR_PDDS;
 80080d0:	4b08      	ldr	r3, [pc, #32]	; (80080f4 <PWR_EnterSTANDBYMode+0x34>)
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	4a07      	ldr	r2, [pc, #28]	; (80080f4 <PWR_EnterSTANDBYMode+0x34>)
 80080d6:	f043 0302 	orr.w	r3, r3, #2
 80080da:	6013      	str	r3, [r2, #0]
  
  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
 80080dc:	4b06      	ldr	r3, [pc, #24]	; (80080f8 <PWR_EnterSTANDBYMode+0x38>)
 80080de:	691b      	ldr	r3, [r3, #16]
 80080e0:	4a05      	ldr	r2, [pc, #20]	; (80080f8 <PWR_EnterSTANDBYMode+0x38>)
 80080e2:	f043 0304 	orr.w	r3, r3, #4
 80080e6:	6113      	str	r3, [r2, #16]
/* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM   )
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 80080e8:	bf30      	wfi
}
 80080ea:	bf00      	nop
 80080ec:	46bd      	mov	sp, r7
 80080ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f2:	4770      	bx	lr
 80080f4:	40007000 	.word	0x40007000
 80080f8:	e000ed00 	.word	0xe000ed00

080080fc <PWR_GetFlagStatus>:
  *            @arg PWR_FLAG_UDRDY: This flag indicates that the Under-drive mode
  *                 is enabled in Stop mode (STM32F42xxx/43xxx devices)
  * @retval The new state of PWR_FLAG (SET or RESET).
  */
FlagStatus PWR_GetFlagStatus(uint32_t PWR_FLAG)
{
 80080fc:	b480      	push	{r7}
 80080fe:	b085      	sub	sp, #20
 8008100:	af00      	add	r7, sp, #0
 8008102:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 8008104:	2300      	movs	r3, #0
 8008106:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_PWR_GET_FLAG(PWR_FLAG));
  
  if ((PWR->CSR & PWR_FLAG) != (uint32_t)RESET)
 8008108:	4b08      	ldr	r3, [pc, #32]	; (800812c <PWR_GetFlagStatus+0x30>)
 800810a:	685a      	ldr	r2, [r3, #4]
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	4013      	ands	r3, r2
 8008110:	2b00      	cmp	r3, #0
 8008112:	d002      	beq.n	800811a <PWR_GetFlagStatus+0x1e>
  {
    bitstatus = SET;
 8008114:	2301      	movs	r3, #1
 8008116:	73fb      	strb	r3, [r7, #15]
 8008118:	e001      	b.n	800811e <PWR_GetFlagStatus+0x22>
  }
  else
  {
    bitstatus = RESET;
 800811a:	2300      	movs	r3, #0
 800811c:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the flag status */
  return bitstatus;
 800811e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008120:	4618      	mov	r0, r3
 8008122:	3714      	adds	r7, #20
 8008124:	46bd      	mov	sp, r7
 8008126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800812a:	4770      	bx	lr
 800812c:	40007000 	.word	0x40007000

08008130 <PWR_ClearFlag>:
  *            @arg PWR_FLAG_SB: StandBy flag
  *            @arg PWR_FLAG_UDRDY: Under-drive ready flag (STM32F42xxx/43xxx devices)
  * @retval None
  */
void PWR_ClearFlag(uint32_t PWR_FLAG)
{
 8008130:	b480      	push	{r7}
 8008132:	b083      	sub	sp, #12
 8008134:	af00      	add	r7, sp, #0
 8008136:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_CLEAR_FLAG(PWR_FLAG));
  
#if defined (STM32F427_437xx) || defined (STM32F429_439xx)
  if (PWR_FLAG != PWR_FLAG_UDRDY)
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800813e:	d007      	beq.n	8008150 <PWR_ClearFlag+0x20>
  {
    PWR->CR |=  PWR_FLAG << 2;
 8008140:	4b09      	ldr	r3, [pc, #36]	; (8008168 <PWR_ClearFlag+0x38>)
 8008142:	681a      	ldr	r2, [r3, #0]
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	009b      	lsls	r3, r3, #2
 8008148:	4907      	ldr	r1, [pc, #28]	; (8008168 <PWR_ClearFlag+0x38>)
 800814a:	4313      	orrs	r3, r2
 800814c:	600b      	str	r3, [r1, #0]
#endif /* STM32F427_437xx ||  STM32F429_439xx */

#if defined (STM32F40_41xxx) || defined (STM32F401xx) 
  PWR->CR |=  PWR_FLAG << 2;
#endif /* STM32F40_41xxx */
}
 800814e:	e005      	b.n	800815c <PWR_ClearFlag+0x2c>
    PWR->CSR |= PWR_FLAG_UDRDY;
 8008150:	4b05      	ldr	r3, [pc, #20]	; (8008168 <PWR_ClearFlag+0x38>)
 8008152:	685b      	ldr	r3, [r3, #4]
 8008154:	4a04      	ldr	r2, [pc, #16]	; (8008168 <PWR_ClearFlag+0x38>)
 8008156:	f443 2340 	orr.w	r3, r3, #786432	; 0xc0000
 800815a:	6053      	str	r3, [r2, #4]
}
 800815c:	bf00      	nop
 800815e:	370c      	adds	r7, #12
 8008160:	46bd      	mov	sp, r7
 8008162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008166:	4770      	bx	lr
 8008168:	40007000 	.word	0x40007000

0800816c <RCC_DeInit>:
  *            - LSI, LSE and RTC clocks 
  * @param  None
  * @retval None
  */
void RCC_DeInit(void)
{
 800816c:	b480      	push	{r7}
 800816e:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8008170:	4b16      	ldr	r3, [pc, #88]	; (80081cc <RCC_DeInit+0x60>)
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	4a15      	ldr	r2, [pc, #84]	; (80081cc <RCC_DeInit+0x60>)
 8008176:	f043 0301 	orr.w	r3, r3, #1
 800817a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800817c:	4b13      	ldr	r3, [pc, #76]	; (80081cc <RCC_DeInit+0x60>)
 800817e:	2200      	movs	r2, #0
 8008180:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON, PLLON, PLLI2S and PLLSAI(STM32F42/43xxx devices) bits */
  RCC->CR &= (uint32_t)0xEAF6FFFF;
 8008182:	4b12      	ldr	r3, [pc, #72]	; (80081cc <RCC_DeInit+0x60>)
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	4a11      	ldr	r2, [pc, #68]	; (80081cc <RCC_DeInit+0x60>)
 8008188:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 800818c:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8008190:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8008192:	4b0e      	ldr	r3, [pc, #56]	; (80081cc <RCC_DeInit+0x60>)
 8008194:	4a0e      	ldr	r2, [pc, #56]	; (80081d0 <RCC_DeInit+0x64>)
 8008196:	605a      	str	r2, [r3, #4]

  /* Reset PLLI2SCFGR register */
  RCC->PLLI2SCFGR = 0x20003000;
 8008198:	4b0c      	ldr	r3, [pc, #48]	; (80081cc <RCC_DeInit+0x60>)
 800819a:	4a0e      	ldr	r2, [pc, #56]	; (80081d4 <RCC_DeInit+0x68>)
 800819c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset PLLSAICFGR register, only available for STM32F42/43xxx devices */
  RCC->PLLSAICFGR = 0x24003000;
 80081a0:	4b0a      	ldr	r3, [pc, #40]	; (80081cc <RCC_DeInit+0x60>)
 80081a2:	4a0d      	ldr	r2, [pc, #52]	; (80081d8 <RCC_DeInit+0x6c>)
 80081a4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 
  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80081a8:	4b08      	ldr	r3, [pc, #32]	; (80081cc <RCC_DeInit+0x60>)
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	4a07      	ldr	r2, [pc, #28]	; (80081cc <RCC_DeInit+0x60>)
 80081ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80081b2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80081b4:	4b05      	ldr	r3, [pc, #20]	; (80081cc <RCC_DeInit+0x60>)
 80081b6:	2200      	movs	r2, #0
 80081b8:	60da      	str	r2, [r3, #12]

  /* Disable Timers clock prescalers selection, only available for STM32F42/43xxx devices */
  RCC->DCKCFGR = 0x00000000; 
 80081ba:	4b04      	ldr	r3, [pc, #16]	; (80081cc <RCC_DeInit+0x60>)
 80081bc:	2200      	movs	r2, #0
 80081be:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

}
 80081c2:	bf00      	nop
 80081c4:	46bd      	mov	sp, r7
 80081c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ca:	4770      	bx	lr
 80081cc:	40023800 	.word	0x40023800
 80081d0:	24003010 	.word	0x24003010
 80081d4:	20003000 	.word	0x20003000
 80081d8:	24003000 	.word	0x24003000

080081dc <RCC_HSEConfig>:
  *            @arg RCC_HSE_ON: turn ON the HSE oscillator
  *            @arg RCC_HSE_Bypass: HSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_HSEConfig(uint8_t RCC_HSE)
{
 80081dc:	b480      	push	{r7}
 80081de:	b083      	sub	sp, #12
 80081e0:	af00      	add	r7, sp, #0
 80081e2:	4603      	mov	r3, r0
 80081e4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));

  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE_OFF;
 80081e6:	4b06      	ldr	r3, [pc, #24]	; (8008200 <RCC_HSEConfig+0x24>)
 80081e8:	2200      	movs	r2, #0
 80081ea:	701a      	strb	r2, [r3, #0]

  /* Set the new HSE configuration -------------------------------------------*/
  *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE;
 80081ec:	4a04      	ldr	r2, [pc, #16]	; (8008200 <RCC_HSEConfig+0x24>)
 80081ee:	79fb      	ldrb	r3, [r7, #7]
 80081f0:	7013      	strb	r3, [r2, #0]
}
 80081f2:	bf00      	nop
 80081f4:	370c      	adds	r7, #12
 80081f6:	46bd      	mov	sp, r7
 80081f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081fc:	4770      	bx	lr
 80081fe:	bf00      	nop
 8008200:	40023802 	.word	0x40023802

08008204 <RCC_WaitForHSEStartUp>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: HSE oscillator is stable and ready to use
  *          - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
 8008204:	b580      	push	{r7, lr}
 8008206:	b082      	sub	sp, #8
 8008208:	af00      	add	r7, sp, #0
  __IO uint32_t startupcounter = 0;
 800820a:	2300      	movs	r3, #0
 800820c:	603b      	str	r3, [r7, #0]
  ErrorStatus status = ERROR;
 800820e:	2300      	movs	r3, #0
 8008210:	71fb      	strb	r3, [r7, #7]
  FlagStatus hsestatus = RESET;
 8008212:	2300      	movs	r3, #0
 8008214:	71bb      	strb	r3, [r7, #6]
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    hsestatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
 8008216:	2031      	movs	r0, #49	; 0x31
 8008218:	f000 fd88 	bl	8008d2c <RCC_GetFlagStatus>
 800821c:	4603      	mov	r3, r0
 800821e:	71bb      	strb	r3, [r7, #6]
    startupcounter++;
 8008220:	683b      	ldr	r3, [r7, #0]
 8008222:	3301      	adds	r3, #1
 8008224:	603b      	str	r3, [r7, #0]
  } while((startupcounter != HSE_STARTUP_TIMEOUT) && (hsestatus == RESET));
 8008226:	683b      	ldr	r3, [r7, #0]
 8008228:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800822c:	d002      	beq.n	8008234 <RCC_WaitForHSEStartUp+0x30>
 800822e:	79bb      	ldrb	r3, [r7, #6]
 8008230:	2b00      	cmp	r3, #0
 8008232:	d0f0      	beq.n	8008216 <RCC_WaitForHSEStartUp+0x12>

  if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
 8008234:	2031      	movs	r0, #49	; 0x31
 8008236:	f000 fd79 	bl	8008d2c <RCC_GetFlagStatus>
 800823a:	4603      	mov	r3, r0
 800823c:	2b00      	cmp	r3, #0
 800823e:	d002      	beq.n	8008246 <RCC_WaitForHSEStartUp+0x42>
  {
    status = SUCCESS;
 8008240:	2301      	movs	r3, #1
 8008242:	71fb      	strb	r3, [r7, #7]
 8008244:	e001      	b.n	800824a <RCC_WaitForHSEStartUp+0x46>
  }
  else
  {
    status = ERROR;
 8008246:	2300      	movs	r3, #0
 8008248:	71fb      	strb	r3, [r7, #7]
  }
  return (status);
 800824a:	79fb      	ldrb	r3, [r7, #7]
}
 800824c:	4618      	mov	r0, r3
 800824e:	3708      	adds	r7, #8
 8008250:	46bd      	mov	sp, r7
 8008252:	bd80      	pop	{r7, pc}

08008254 <RCC_AdjustHSICalibrationValue>:
  * @param  HSICalibrationValue: specifies the calibration trimming value.
  *         This parameter must be a number between 0 and 0x1F.
  * @retval None
  */
void RCC_AdjustHSICalibrationValue(uint8_t HSICalibrationValue)
{
 8008254:	b480      	push	{r7}
 8008256:	b085      	sub	sp, #20
 8008258:	af00      	add	r7, sp, #0
 800825a:	4603      	mov	r3, r0
 800825c:	71fb      	strb	r3, [r7, #7]
  uint32_t tmpreg = 0;
 800825e:	2300      	movs	r3, #0
 8008260:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_CALIBRATION_VALUE(HSICalibrationValue));

  tmpreg = RCC->CR;
 8008262:	4b0a      	ldr	r3, [pc, #40]	; (800828c <RCC_AdjustHSICalibrationValue+0x38>)
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	60fb      	str	r3, [r7, #12]

  /* Clear HSITRIM[4:0] bits */
  tmpreg &= ~RCC_CR_HSITRIM;
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800826e:	60fb      	str	r3, [r7, #12]

  /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
  tmpreg |= (uint32_t)HSICalibrationValue << 3;
 8008270:	79fb      	ldrb	r3, [r7, #7]
 8008272:	00db      	lsls	r3, r3, #3
 8008274:	68fa      	ldr	r2, [r7, #12]
 8008276:	4313      	orrs	r3, r2
 8008278:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CR = tmpreg;
 800827a:	4a04      	ldr	r2, [pc, #16]	; (800828c <RCC_AdjustHSICalibrationValue+0x38>)
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	6013      	str	r3, [r2, #0]
}
 8008280:	bf00      	nop
 8008282:	3714      	adds	r7, #20
 8008284:	46bd      	mov	sp, r7
 8008286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800828a:	4770      	bx	lr
 800828c:	40023800 	.word	0x40023800

08008290 <RCC_HSICmd>:
  * @note   When the HSI is stopped, HSIRDY flag goes low after 6 HSI oscillator
  *         clock cycles.  
  * @retval None
  */
void RCC_HSICmd(FunctionalState NewState)
{
 8008290:	b480      	push	{r7}
 8008292:	b083      	sub	sp, #12
 8008294:	af00      	add	r7, sp, #0
 8008296:	4603      	mov	r3, r0
 8008298:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
 800829a:	4a04      	ldr	r2, [pc, #16]	; (80082ac <RCC_HSICmd+0x1c>)
 800829c:	79fb      	ldrb	r3, [r7, #7]
 800829e:	6013      	str	r3, [r2, #0]
}
 80082a0:	bf00      	nop
 80082a2:	370c      	adds	r7, #12
 80082a4:	46bd      	mov	sp, r7
 80082a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082aa:	4770      	bx	lr
 80082ac:	42470000 	.word	0x42470000

080082b0 <RCC_LSEConfig>:
  *            @arg RCC_LSE_ON: turn ON the LSE oscillator
  *            @arg RCC_LSE_Bypass: LSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_LSEConfig(uint8_t RCC_LSE)
{
 80082b0:	b480      	push	{r7}
 80082b2:	b083      	sub	sp, #12
 80082b4:	af00      	add	r7, sp, #0
 80082b6:	4603      	mov	r3, r0
 80082b8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));

  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 80082ba:	4b0d      	ldr	r3, [pc, #52]	; (80082f0 <RCC_LSEConfig+0x40>)
 80082bc:	2200      	movs	r2, #0
 80082be:	701a      	strb	r2, [r3, #0]

  /* Reset LSEBYP bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 80082c0:	4b0b      	ldr	r3, [pc, #44]	; (80082f0 <RCC_LSEConfig+0x40>)
 80082c2:	2200      	movs	r2, #0
 80082c4:	701a      	strb	r2, [r3, #0]

  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch (RCC_LSE)
 80082c6:	79fb      	ldrb	r3, [r7, #7]
 80082c8:	2b01      	cmp	r3, #1
 80082ca:	d002      	beq.n	80082d2 <RCC_LSEConfig+0x22>
 80082cc:	2b04      	cmp	r3, #4
 80082ce:	d004      	beq.n	80082da <RCC_LSEConfig+0x2a>
    case RCC_LSE_Bypass:
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
      break;
    default:
      break;
 80082d0:	e007      	b.n	80082e2 <RCC_LSEConfig+0x32>
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
 80082d2:	4b07      	ldr	r3, [pc, #28]	; (80082f0 <RCC_LSEConfig+0x40>)
 80082d4:	2201      	movs	r2, #1
 80082d6:	701a      	strb	r2, [r3, #0]
      break;
 80082d8:	e003      	b.n	80082e2 <RCC_LSEConfig+0x32>
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
 80082da:	4b05      	ldr	r3, [pc, #20]	; (80082f0 <RCC_LSEConfig+0x40>)
 80082dc:	2205      	movs	r2, #5
 80082de:	701a      	strb	r2, [r3, #0]
      break;
 80082e0:	bf00      	nop
  }
}
 80082e2:	bf00      	nop
 80082e4:	370c      	adds	r7, #12
 80082e6:	46bd      	mov	sp, r7
 80082e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ec:	4770      	bx	lr
 80082ee:	bf00      	nop
 80082f0:	40023870 	.word	0x40023870

080082f4 <RCC_LSICmd>:
  * @note   When the LSI is stopped, LSIRDY flag goes low after 6 LSI oscillator
  *         clock cycles. 
  * @retval None
  */
void RCC_LSICmd(FunctionalState NewState)
{
 80082f4:	b480      	push	{r7}
 80082f6:	b083      	sub	sp, #12
 80082f8:	af00      	add	r7, sp, #0
 80082fa:	4603      	mov	r3, r0
 80082fc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
 80082fe:	4a04      	ldr	r2, [pc, #16]	; (8008310 <RCC_LSICmd+0x1c>)
 8008300:	79fb      	ldrb	r3, [r7, #7]
 8008302:	6013      	str	r3, [r2, #0]
}
 8008304:	bf00      	nop
 8008306:	370c      	adds	r7, #12
 8008308:	46bd      	mov	sp, r7
 800830a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800830e:	4770      	bx	lr
 8008310:	42470e80 	.word	0x42470e80

08008314 <RCC_PLLConfig>:
  *         correctly.
  *   
  * @retval None
  */
void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP, uint32_t PLLQ)
{
 8008314:	b480      	push	{r7}
 8008316:	b085      	sub	sp, #20
 8008318:	af00      	add	r7, sp, #0
 800831a:	60f8      	str	r0, [r7, #12]
 800831c:	60b9      	str	r1, [r7, #8]
 800831e:	607a      	str	r2, [r7, #4]
 8008320:	603b      	str	r3, [r7, #0]
  assert_param(IS_RCC_PLLM_VALUE(PLLM));
  assert_param(IS_RCC_PLLN_VALUE(PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLP));
  assert_param(IS_RCC_PLLQ_VALUE(PLLQ));

  RCC->PLLCFGR = PLLM | (PLLN << 6) | (((PLLP >> 1) -1) << 16) | (RCC_PLLSource) |
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	019a      	lsls	r2, r3, #6
 8008326:	68bb      	ldr	r3, [r7, #8]
 8008328:	431a      	orrs	r2, r3
 800832a:	683b      	ldr	r3, [r7, #0]
 800832c:	085b      	lsrs	r3, r3, #1
 800832e:	3b01      	subs	r3, #1
 8008330:	041b      	lsls	r3, r3, #16
 8008332:	431a      	orrs	r2, r3
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	431a      	orrs	r2, r3
                 (PLLQ << 24);
 8008338:	69bb      	ldr	r3, [r7, #24]
 800833a:	061b      	lsls	r3, r3, #24
  RCC->PLLCFGR = PLLM | (PLLN << 6) | (((PLLP >> 1) -1) << 16) | (RCC_PLLSource) |
 800833c:	4904      	ldr	r1, [pc, #16]	; (8008350 <RCC_PLLConfig+0x3c>)
 800833e:	4313      	orrs	r3, r2
 8008340:	604b      	str	r3, [r1, #4]
}
 8008342:	bf00      	nop
 8008344:	3714      	adds	r7, #20
 8008346:	46bd      	mov	sp, r7
 8008348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800834c:	4770      	bx	lr
 800834e:	bf00      	nop
 8008350:	40023800 	.word	0x40023800

08008354 <RCC_PLLCmd>:
  * @note   The main PLL is disabled by hardware when entering STOP and STANDBY modes.
  * @param  NewState: new state of the main PLL. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLCmd(FunctionalState NewState)
{
 8008354:	b480      	push	{r7}
 8008356:	b083      	sub	sp, #12
 8008358:	af00      	add	r7, sp, #0
 800835a:	4603      	mov	r3, r0
 800835c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
 800835e:	4a04      	ldr	r2, [pc, #16]	; (8008370 <RCC_PLLCmd+0x1c>)
 8008360:	79fb      	ldrb	r3, [r7, #7]
 8008362:	6013      	str	r3, [r2, #0]
}
 8008364:	bf00      	nop
 8008366:	370c      	adds	r7, #12
 8008368:	46bd      	mov	sp, r7
 800836a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800836e:	4770      	bx	lr
 8008370:	42470060 	.word	0x42470060

08008374 <RCC_PLLI2SConfig>:
  * @note   the PLLI2SR parameter is only available with STM32F42xxx/43xxx devices.  
  *   
  * @retval None
  */
void RCC_PLLI2SConfig(uint32_t PLLI2SN, uint32_t PLLI2SQ, uint32_t PLLI2SR)
{
 8008374:	b480      	push	{r7}
 8008376:	b085      	sub	sp, #20
 8008378:	af00      	add	r7, sp, #0
 800837a:	60f8      	str	r0, [r7, #12]
 800837c:	60b9      	str	r1, [r7, #8]
 800837e:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_PLLI2SN_VALUE(PLLI2SN));
  assert_param(IS_RCC_PLLI2SQ_VALUE(PLLI2SQ));
  assert_param(IS_RCC_PLLI2SR_VALUE(PLLI2SR));

  RCC->PLLI2SCFGR = (PLLI2SN << 6) | (PLLI2SQ << 24) | (PLLI2SR << 28);
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	019a      	lsls	r2, r3, #6
 8008384:	68bb      	ldr	r3, [r7, #8]
 8008386:	061b      	lsls	r3, r3, #24
 8008388:	431a      	orrs	r2, r3
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	071b      	lsls	r3, r3, #28
 800838e:	4905      	ldr	r1, [pc, #20]	; (80083a4 <RCC_PLLI2SConfig+0x30>)
 8008390:	4313      	orrs	r3, r2
 8008392:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
}
 8008396:	bf00      	nop
 8008398:	3714      	adds	r7, #20
 800839a:	46bd      	mov	sp, r7
 800839c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a0:	4770      	bx	lr
 80083a2:	bf00      	nop
 80083a4:	40023800 	.word	0x40023800

080083a8 <RCC_PLLI2SCmd>:
  * @note   The PLLI2S is disabled by hardware when entering STOP and STANDBY modes.  
  * @param  NewState: new state of the PLLI2S. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLI2SCmd(FunctionalState NewState)
{
 80083a8:	b480      	push	{r7}
 80083aa:	b083      	sub	sp, #12
 80083ac:	af00      	add	r7, sp, #0
 80083ae:	4603      	mov	r3, r0
 80083b0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLI2SON_BB = (uint32_t)NewState;
 80083b2:	4a04      	ldr	r2, [pc, #16]	; (80083c4 <RCC_PLLI2SCmd+0x1c>)
 80083b4:	79fb      	ldrb	r3, [r7, #7]
 80083b6:	6013      	str	r3, [r2, #0]
}
 80083b8:	bf00      	nop
 80083ba:	370c      	adds	r7, #12
 80083bc:	46bd      	mov	sp, r7
 80083be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c2:	4770      	bx	lr
 80083c4:	42470068 	.word	0x42470068

080083c8 <RCC_PLLSAIConfig>:
  *          This parameter must be a number between 2 and 7.
  *   
  * @retval None
  */
void RCC_PLLSAIConfig(uint32_t PLLSAIN, uint32_t PLLSAIQ, uint32_t PLLSAIR)
{
 80083c8:	b480      	push	{r7}
 80083ca:	b085      	sub	sp, #20
 80083cc:	af00      	add	r7, sp, #0
 80083ce:	60f8      	str	r0, [r7, #12]
 80083d0:	60b9      	str	r1, [r7, #8]
 80083d2:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_PLLSAIN_VALUE(PLLSAIN));
  assert_param(IS_RCC_PLLSAIR_VALUE(PLLSAIR));

  RCC->PLLSAICFGR = (PLLSAIN << 6) | (PLLSAIQ << 24) | (PLLSAIR << 28);
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	019a      	lsls	r2, r3, #6
 80083d8:	68bb      	ldr	r3, [r7, #8]
 80083da:	061b      	lsls	r3, r3, #24
 80083dc:	431a      	orrs	r2, r3
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	071b      	lsls	r3, r3, #28
 80083e2:	4905      	ldr	r1, [pc, #20]	; (80083f8 <RCC_PLLSAIConfig+0x30>)
 80083e4:	4313      	orrs	r3, r2
 80083e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80083ea:	bf00      	nop
 80083ec:	3714      	adds	r7, #20
 80083ee:	46bd      	mov	sp, r7
 80083f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f4:	4770      	bx	lr
 80083f6:	bf00      	nop
 80083f8:	40023800 	.word	0x40023800

080083fc <RCC_PLLSAICmd>:
  * @note   The PLLSAI is disabled by hardware when entering STOP and STANDBY modes.  
  * @param  NewState: new state of the PLLSAI. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLSAICmd(FunctionalState NewState)
{
 80083fc:	b480      	push	{r7}
 80083fe:	b083      	sub	sp, #12
 8008400:	af00      	add	r7, sp, #0
 8008402:	4603      	mov	r3, r0
 8008404:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLSAION_BB = (uint32_t)NewState;
 8008406:	4a04      	ldr	r2, [pc, #16]	; (8008418 <RCC_PLLSAICmd+0x1c>)
 8008408:	79fb      	ldrb	r3, [r7, #7]
 800840a:	6013      	str	r3, [r2, #0]
}
 800840c:	bf00      	nop
 800840e:	370c      	adds	r7, #12
 8008410:	46bd      	mov	sp, r7
 8008412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008416:	4770      	bx	lr
 8008418:	42470070 	.word	0x42470070

0800841c <RCC_ClockSecuritySystemCmd>:
  * @param  NewState: new state of the Clock Security System.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
{
 800841c:	b480      	push	{r7}
 800841e:	b083      	sub	sp, #12
 8008420:	af00      	add	r7, sp, #0
 8008422:	4603      	mov	r3, r0
 8008424:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
 8008426:	4a04      	ldr	r2, [pc, #16]	; (8008438 <RCC_ClockSecuritySystemCmd+0x1c>)
 8008428:	79fb      	ldrb	r3, [r7, #7]
 800842a:	6013      	str	r3, [r2, #0]
}
 800842c:	bf00      	nop
 800842e:	370c      	adds	r7, #12
 8008430:	46bd      	mov	sp, r7
 8008432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008436:	4770      	bx	lr
 8008438:	4247004c 	.word	0x4247004c

0800843c <RCC_MCO1Config>:
  *            @arg RCC_MCO1Div_4: division by 4 applied to MCO1 clock
  *            @arg RCC_MCO1Div_5: division by 5 applied to MCO1 clock
  * @retval None
  */
void RCC_MCO1Config(uint32_t RCC_MCO1Source, uint32_t RCC_MCO1Div)
{
 800843c:	b480      	push	{r7}
 800843e:	b085      	sub	sp, #20
 8008440:	af00      	add	r7, sp, #0
 8008442:	6078      	str	r0, [r7, #4]
 8008444:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8008446:	2300      	movs	r3, #0
 8008448:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_MCO1SOURCE(RCC_MCO1Source));
  assert_param(IS_RCC_MCO1DIV(RCC_MCO1Div));  

  tmpreg = RCC->CFGR;
 800844a:	4b0b      	ldr	r3, [pc, #44]	; (8008478 <RCC_MCO1Config+0x3c>)
 800844c:	689b      	ldr	r3, [r3, #8]
 800844e:	60fb      	str	r3, [r7, #12]

  /* Clear MCO1[1:0] and MCO1PRE[2:0] bits */
  tmpreg &= CFGR_MCO1_RESET_MASK;
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	f023 63ec 	bic.w	r3, r3, #123731968	; 0x7600000
 8008456:	60fb      	str	r3, [r7, #12]

  /* Select MCO1 clock source and prescaler */
  tmpreg |= RCC_MCO1Source | RCC_MCO1Div;
 8008458:	687a      	ldr	r2, [r7, #4]
 800845a:	683b      	ldr	r3, [r7, #0]
 800845c:	4313      	orrs	r3, r2
 800845e:	68fa      	ldr	r2, [r7, #12]
 8008460:	4313      	orrs	r3, r2
 8008462:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;  
 8008464:	4a04      	ldr	r2, [pc, #16]	; (8008478 <RCC_MCO1Config+0x3c>)
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	6093      	str	r3, [r2, #8]
}
 800846a:	bf00      	nop
 800846c:	3714      	adds	r7, #20
 800846e:	46bd      	mov	sp, r7
 8008470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008474:	4770      	bx	lr
 8008476:	bf00      	nop
 8008478:	40023800 	.word	0x40023800

0800847c <RCC_MCO2Config>:
  *            @arg RCC_MCO2Div_4: division by 4 applied to MCO2 clock
  *            @arg RCC_MCO2Div_5: division by 5 applied to MCO2 clock
  * @retval None
  */
void RCC_MCO2Config(uint32_t RCC_MCO2Source, uint32_t RCC_MCO2Div)
{
 800847c:	b480      	push	{r7}
 800847e:	b085      	sub	sp, #20
 8008480:	af00      	add	r7, sp, #0
 8008482:	6078      	str	r0, [r7, #4]
 8008484:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8008486:	2300      	movs	r3, #0
 8008488:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_MCO2SOURCE(RCC_MCO2Source));
  assert_param(IS_RCC_MCO2DIV(RCC_MCO2Div));
  
  tmpreg = RCC->CFGR;
 800848a:	4b0b      	ldr	r3, [pc, #44]	; (80084b8 <RCC_MCO2Config+0x3c>)
 800848c:	689b      	ldr	r3, [r3, #8]
 800848e:	60fb      	str	r3, [r7, #12]
  
  /* Clear MCO2 and MCO2PRE[2:0] bits */
  tmpreg &= CFGR_MCO2_RESET_MASK;
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8008496:	60fb      	str	r3, [r7, #12]

  /* Select MCO2 clock source and prescaler */
  tmpreg |= RCC_MCO2Source | RCC_MCO2Div;
 8008498:	687a      	ldr	r2, [r7, #4]
 800849a:	683b      	ldr	r3, [r7, #0]
 800849c:	4313      	orrs	r3, r2
 800849e:	68fa      	ldr	r2, [r7, #12]
 80084a0:	4313      	orrs	r3, r2
 80084a2:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;  
 80084a4:	4a04      	ldr	r2, [pc, #16]	; (80084b8 <RCC_MCO2Config+0x3c>)
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	6093      	str	r3, [r2, #8]
}
 80084aa:	bf00      	nop
 80084ac:	3714      	adds	r7, #20
 80084ae:	46bd      	mov	sp, r7
 80084b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b4:	4770      	bx	lr
 80084b6:	bf00      	nop
 80084b8:	40023800 	.word	0x40023800

080084bc <RCC_SYSCLKConfig>:
  *            @arg RCC_SYSCLKSource_HSE:    HSE selected as system clock source
  *            @arg RCC_SYSCLKSource_PLLCLK: PLL selected as system clock source
  * @retval None
  */
void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
{
 80084bc:	b480      	push	{r7}
 80084be:	b085      	sub	sp, #20
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 80084c4:	2300      	movs	r3, #0
 80084c6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));

  tmpreg = RCC->CFGR;
 80084c8:	4b09      	ldr	r3, [pc, #36]	; (80084f0 <RCC_SYSCLKConfig+0x34>)
 80084ca:	689b      	ldr	r3, [r3, #8]
 80084cc:	60fb      	str	r3, [r7, #12]

  /* Clear SW[1:0] bits */
  tmpreg &= ~RCC_CFGR_SW;
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	f023 0303 	bic.w	r3, r3, #3
 80084d4:	60fb      	str	r3, [r7, #12]

  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
 80084d6:	68fa      	ldr	r2, [r7, #12]
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	4313      	orrs	r3, r2
 80084dc:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
 80084de:	4a04      	ldr	r2, [pc, #16]	; (80084f0 <RCC_SYSCLKConfig+0x34>)
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	6093      	str	r3, [r2, #8]
}
 80084e4:	bf00      	nop
 80084e6:	3714      	adds	r7, #20
 80084e8:	46bd      	mov	sp, r7
 80084ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ee:	4770      	bx	lr
 80084f0:	40023800 	.word	0x40023800

080084f4 <RCC_GetSYSCLKSource>:
  *              - 0x00: HSI used as system clock
  *              - 0x04: HSE used as system clock
  *              - 0x08: PLL used as system clock
  */
uint8_t RCC_GetSYSCLKSource(void)
{
 80084f4:	b480      	push	{r7}
 80084f6:	af00      	add	r7, sp, #0
  return ((uint8_t)(RCC->CFGR & RCC_CFGR_SWS));
 80084f8:	4b05      	ldr	r3, [pc, #20]	; (8008510 <RCC_GetSYSCLKSource+0x1c>)
 80084fa:	689b      	ldr	r3, [r3, #8]
 80084fc:	b2db      	uxtb	r3, r3
 80084fe:	f003 030c 	and.w	r3, r3, #12
 8008502:	b2db      	uxtb	r3, r3
}
 8008504:	4618      	mov	r0, r3
 8008506:	46bd      	mov	sp, r7
 8008508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800850c:	4770      	bx	lr
 800850e:	bf00      	nop
 8008510:	40023800 	.word	0x40023800

08008514 <RCC_HCLKConfig>:
  *            @arg RCC_SYSCLK_Div256: AHB clock = SYSCLK/256
  *            @arg RCC_SYSCLK_Div512: AHB clock = SYSCLK/512
  * @retval None
  */
void RCC_HCLKConfig(uint32_t RCC_SYSCLK)
{
 8008514:	b480      	push	{r7}
 8008516:	b085      	sub	sp, #20
 8008518:	af00      	add	r7, sp, #0
 800851a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800851c:	2300      	movs	r3, #0
 800851e:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));

  tmpreg = RCC->CFGR;
 8008520:	4b09      	ldr	r3, [pc, #36]	; (8008548 <RCC_HCLKConfig+0x34>)
 8008522:	689b      	ldr	r3, [r3, #8]
 8008524:	60fb      	str	r3, [r7, #12]

  /* Clear HPRE[3:0] bits */
  tmpreg &= ~RCC_CFGR_HPRE;
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800852c:	60fb      	str	r3, [r7, #12]

  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
 800852e:	68fa      	ldr	r2, [r7, #12]
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	4313      	orrs	r3, r2
 8008534:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8008536:	4a04      	ldr	r2, [pc, #16]	; (8008548 <RCC_HCLKConfig+0x34>)
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	6093      	str	r3, [r2, #8]
}
 800853c:	bf00      	nop
 800853e:	3714      	adds	r7, #20
 8008540:	46bd      	mov	sp, r7
 8008542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008546:	4770      	bx	lr
 8008548:	40023800 	.word	0x40023800

0800854c <RCC_PCLK1Config>:
  *            @arg RCC_HCLK_Div8:  APB1 clock = HCLK/8
  *            @arg RCC_HCLK_Div16: APB1 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK1Config(uint32_t RCC_HCLK)
{
 800854c:	b480      	push	{r7}
 800854e:	b085      	sub	sp, #20
 8008550:	af00      	add	r7, sp, #0
 8008552:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8008554:	2300      	movs	r3, #0
 8008556:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
 8008558:	4b09      	ldr	r3, [pc, #36]	; (8008580 <RCC_PCLK1Config+0x34>)
 800855a:	689b      	ldr	r3, [r3, #8]
 800855c:	60fb      	str	r3, [r7, #12]

  /* Clear PPRE1[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE1;
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8008564:	60fb      	str	r3, [r7, #12]

  /* Set PPRE1[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
 8008566:	68fa      	ldr	r2, [r7, #12]
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	4313      	orrs	r3, r2
 800856c:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
 800856e:	4a04      	ldr	r2, [pc, #16]	; (8008580 <RCC_PCLK1Config+0x34>)
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	6093      	str	r3, [r2, #8]
}
 8008574:	bf00      	nop
 8008576:	3714      	adds	r7, #20
 8008578:	46bd      	mov	sp, r7
 800857a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800857e:	4770      	bx	lr
 8008580:	40023800 	.word	0x40023800

08008584 <RCC_PCLK2Config>:
  *            @arg RCC_HCLK_Div8:  APB2 clock = HCLK/8
  *            @arg RCC_HCLK_Div16: APB2 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK2Config(uint32_t RCC_HCLK)
{
 8008584:	b480      	push	{r7}
 8008586:	b085      	sub	sp, #20
 8008588:	af00      	add	r7, sp, #0
 800858a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800858c:	2300      	movs	r3, #0
 800858e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
 8008590:	4b0a      	ldr	r3, [pc, #40]	; (80085bc <RCC_PCLK2Config+0x38>)
 8008592:	689b      	ldr	r3, [r3, #8]
 8008594:	60fb      	str	r3, [r7, #12]

  /* Clear PPRE2[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE2;
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800859c:	60fb      	str	r3, [r7, #12]

  /* Set PPRE2[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK << 3;
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	00db      	lsls	r3, r3, #3
 80085a2:	68fa      	ldr	r2, [r7, #12]
 80085a4:	4313      	orrs	r3, r2
 80085a6:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
 80085a8:	4a04      	ldr	r2, [pc, #16]	; (80085bc <RCC_PCLK2Config+0x38>)
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	6093      	str	r3, [r2, #8]
}
 80085ae:	bf00      	nop
 80085b0:	3714      	adds	r7, #20
 80085b2:	46bd      	mov	sp, r7
 80085b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b8:	4770      	bx	lr
 80085ba:	bf00      	nop
 80085bc:	40023800 	.word	0x40023800

080085c0 <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 80085c0:	b480      	push	{r7}
 80085c2:	b089      	sub	sp, #36	; 0x24
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 80085c8:	2300      	movs	r3, #0
 80085ca:	61bb      	str	r3, [r7, #24]
 80085cc:	2300      	movs	r3, #0
 80085ce:	617b      	str	r3, [r7, #20]
 80085d0:	2300      	movs	r3, #0
 80085d2:	61fb      	str	r3, [r7, #28]
 80085d4:	2302      	movs	r3, #2
 80085d6:	613b      	str	r3, [r7, #16]
 80085d8:	2300      	movs	r3, #0
 80085da:	60fb      	str	r3, [r7, #12]
 80085dc:	2302      	movs	r3, #2
 80085de:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80085e0:	4b47      	ldr	r3, [pc, #284]	; (8008700 <RCC_GetClocksFreq+0x140>)
 80085e2:	689b      	ldr	r3, [r3, #8]
 80085e4:	f003 030c 	and.w	r3, r3, #12
 80085e8:	61bb      	str	r3, [r7, #24]

  switch (tmp)
 80085ea:	69bb      	ldr	r3, [r7, #24]
 80085ec:	2b04      	cmp	r3, #4
 80085ee:	d007      	beq.n	8008600 <RCC_GetClocksFreq+0x40>
 80085f0:	2b08      	cmp	r3, #8
 80085f2:	d009      	beq.n	8008608 <RCC_GetClocksFreq+0x48>
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d13d      	bne.n	8008674 <RCC_GetClocksFreq+0xb4>
  {
    case 0x00:  /* HSI used as system clock source */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	4a42      	ldr	r2, [pc, #264]	; (8008704 <RCC_GetClocksFreq+0x144>)
 80085fc:	601a      	str	r2, [r3, #0]
      break;
 80085fe:	e03d      	b.n	800867c <RCC_GetClocksFreq+0xbc>
    case 0x04:  /* HSE used as system clock  source */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	4a41      	ldr	r2, [pc, #260]	; (8008708 <RCC_GetClocksFreq+0x148>)
 8008604:	601a      	str	r2, [r3, #0]
      break;
 8008606:	e039      	b.n	800867c <RCC_GetClocksFreq+0xbc>
    case 0x08:  /* PLL used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8008608:	4b3d      	ldr	r3, [pc, #244]	; (8008700 <RCC_GetClocksFreq+0x140>)
 800860a:	685b      	ldr	r3, [r3, #4]
 800860c:	0d9b      	lsrs	r3, r3, #22
 800860e:	f003 0301 	and.w	r3, r3, #1
 8008612:	60fb      	str	r3, [r7, #12]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008614:	4b3a      	ldr	r3, [pc, #232]	; (8008700 <RCC_GetClocksFreq+0x140>)
 8008616:	685b      	ldr	r3, [r3, #4]
 8008618:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800861c:	60bb      	str	r3, [r7, #8]
      
      if (pllsource != 0)
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	2b00      	cmp	r3, #0
 8008622:	d00c      	beq.n	800863e <RCC_GetClocksFreq+0x7e>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8008624:	4a38      	ldr	r2, [pc, #224]	; (8008708 <RCC_GetClocksFreq+0x148>)
 8008626:	68bb      	ldr	r3, [r7, #8]
 8008628:	fbb2 f3f3 	udiv	r3, r2, r3
 800862c:	4a34      	ldr	r2, [pc, #208]	; (8008700 <RCC_GetClocksFreq+0x140>)
 800862e:	6852      	ldr	r2, [r2, #4]
 8008630:	0992      	lsrs	r2, r2, #6
 8008632:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008636:	fb02 f303 	mul.w	r3, r2, r3
 800863a:	61fb      	str	r3, [r7, #28]
 800863c:	e00b      	b.n	8008656 <RCC_GetClocksFreq+0x96>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 800863e:	4a31      	ldr	r2, [pc, #196]	; (8008704 <RCC_GetClocksFreq+0x144>)
 8008640:	68bb      	ldr	r3, [r7, #8]
 8008642:	fbb2 f3f3 	udiv	r3, r2, r3
 8008646:	4a2e      	ldr	r2, [pc, #184]	; (8008700 <RCC_GetClocksFreq+0x140>)
 8008648:	6852      	ldr	r2, [r2, #4]
 800864a:	0992      	lsrs	r2, r2, #6
 800864c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008650:	fb02 f303 	mul.w	r3, r2, r3
 8008654:	61fb      	str	r3, [r7, #28]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8008656:	4b2a      	ldr	r3, [pc, #168]	; (8008700 <RCC_GetClocksFreq+0x140>)
 8008658:	685b      	ldr	r3, [r3, #4]
 800865a:	0c1b      	lsrs	r3, r3, #16
 800865c:	f003 0303 	and.w	r3, r3, #3
 8008660:	3301      	adds	r3, #1
 8008662:	005b      	lsls	r3, r3, #1
 8008664:	613b      	str	r3, [r7, #16]
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 8008666:	69fa      	ldr	r2, [r7, #28]
 8008668:	693b      	ldr	r3, [r7, #16]
 800866a:	fbb2 f2f3 	udiv	r2, r2, r3
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	601a      	str	r2, [r3, #0]
      break;
 8008672:	e003      	b.n	800867c <RCC_GetClocksFreq+0xbc>
    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	4a23      	ldr	r2, [pc, #140]	; (8008704 <RCC_GetClocksFreq+0x144>)
 8008678:	601a      	str	r2, [r3, #0]
      break;
 800867a:	bf00      	nop
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 800867c:	4b20      	ldr	r3, [pc, #128]	; (8008700 <RCC_GetClocksFreq+0x140>)
 800867e:	689b      	ldr	r3, [r3, #8]
 8008680:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008684:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 4;
 8008686:	69bb      	ldr	r3, [r7, #24]
 8008688:	091b      	lsrs	r3, r3, #4
 800868a:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 800868c:	4a1f      	ldr	r2, [pc, #124]	; (800870c <RCC_GetClocksFreq+0x14c>)
 800868e:	69bb      	ldr	r3, [r7, #24]
 8008690:	4413      	add	r3, r2
 8008692:	781b      	ldrb	r3, [r3, #0]
 8008694:	b2db      	uxtb	r3, r3
 8008696:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681a      	ldr	r2, [r3, #0]
 800869c:	697b      	ldr	r3, [r7, #20]
 800869e:	40da      	lsrs	r2, r3
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 80086a4:	4b16      	ldr	r3, [pc, #88]	; (8008700 <RCC_GetClocksFreq+0x140>)
 80086a6:	689b      	ldr	r3, [r3, #8]
 80086a8:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 80086ac:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 10;
 80086ae:	69bb      	ldr	r3, [r7, #24]
 80086b0:	0a9b      	lsrs	r3, r3, #10
 80086b2:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 80086b4:	4a15      	ldr	r2, [pc, #84]	; (800870c <RCC_GetClocksFreq+0x14c>)
 80086b6:	69bb      	ldr	r3, [r7, #24]
 80086b8:	4413      	add	r3, r2
 80086ba:	781b      	ldrb	r3, [r3, #0]
 80086bc:	b2db      	uxtb	r3, r3
 80086be:	617b      	str	r3, [r7, #20]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	685a      	ldr	r2, [r3, #4]
 80086c4:	697b      	ldr	r3, [r7, #20]
 80086c6:	40da      	lsrs	r2, r3
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 80086cc:	4b0c      	ldr	r3, [pc, #48]	; (8008700 <RCC_GetClocksFreq+0x140>)
 80086ce:	689b      	ldr	r3, [r3, #8]
 80086d0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80086d4:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 13;
 80086d6:	69bb      	ldr	r3, [r7, #24]
 80086d8:	0b5b      	lsrs	r3, r3, #13
 80086da:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 80086dc:	4a0b      	ldr	r2, [pc, #44]	; (800870c <RCC_GetClocksFreq+0x14c>)
 80086de:	69bb      	ldr	r3, [r7, #24]
 80086e0:	4413      	add	r3, r2
 80086e2:	781b      	ldrb	r3, [r3, #0]
 80086e4:	b2db      	uxtb	r3, r3
 80086e6:	617b      	str	r3, [r7, #20]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	685a      	ldr	r2, [r3, #4]
 80086ec:	697b      	ldr	r3, [r7, #20]
 80086ee:	40da      	lsrs	r2, r3
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	60da      	str	r2, [r3, #12]
}
 80086f4:	bf00      	nop
 80086f6:	3724      	adds	r7, #36	; 0x24
 80086f8:	46bd      	mov	sp, r7
 80086fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086fe:	4770      	bx	lr
 8008700:	40023800 	.word	0x40023800
 8008704:	00f42400 	.word	0x00f42400
 8008708:	007a1200 	.word	0x007a1200
 800870c:	20000084 	.word	0x20000084

08008710 <RCC_RTCCLKConfig>:
  *         RTC clock source).
  *  
  * @retval None
  */
void RCC_RTCCLKConfig(uint32_t RCC_RTCCLKSource)
{
 8008710:	b480      	push	{r7}
 8008712:	b085      	sub	sp, #20
 8008714:	af00      	add	r7, sp, #0
 8008716:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8008718:	2300      	movs	r3, #0
 800871a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));

  if ((RCC_RTCCLKSource & 0x00000300) == 0x00000300)
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008722:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008726:	d111      	bne.n	800874c <RCC_RTCCLKConfig+0x3c>
  { /* If HSE is selected as RTC clock source, configure HSE division factor for RTC clock */
    tmpreg = RCC->CFGR;
 8008728:	4b0f      	ldr	r3, [pc, #60]	; (8008768 <RCC_RTCCLKConfig+0x58>)
 800872a:	689b      	ldr	r3, [r3, #8]
 800872c:	60fb      	str	r3, [r7, #12]

    /* Clear RTCPRE[4:0] bits */
    tmpreg &= ~RCC_CFGR_RTCPRE;
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8008734:	60fb      	str	r3, [r7, #12]

    /* Configure HSE division factor for RTC clock */
    tmpreg |= (RCC_RTCCLKSource & 0xFFFFCFF);
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800873c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008740:	68fa      	ldr	r2, [r7, #12]
 8008742:	4313      	orrs	r3, r2
 8008744:	60fb      	str	r3, [r7, #12]

    /* Store the new value */
    RCC->CFGR = tmpreg;
 8008746:	4a08      	ldr	r2, [pc, #32]	; (8008768 <RCC_RTCCLKConfig+0x58>)
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	6093      	str	r3, [r2, #8]
  }
    
  /* Select the RTC clock source */
  RCC->BDCR |= (RCC_RTCCLKSource & 0x00000FFF);
 800874c:	4b06      	ldr	r3, [pc, #24]	; (8008768 <RCC_RTCCLKConfig+0x58>)
 800874e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008756:	4904      	ldr	r1, [pc, #16]	; (8008768 <RCC_RTCCLKConfig+0x58>)
 8008758:	4313      	orrs	r3, r2
 800875a:	670b      	str	r3, [r1, #112]	; 0x70
}
 800875c:	bf00      	nop
 800875e:	3714      	adds	r7, #20
 8008760:	46bd      	mov	sp, r7
 8008762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008766:	4770      	bx	lr
 8008768:	40023800 	.word	0x40023800

0800876c <RCC_RTCCLKCmd>:
  *         using the RCC_RTCCLKConfig function.
  * @param  NewState: new state of the RTC clock. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_RTCCLKCmd(FunctionalState NewState)
{
 800876c:	b480      	push	{r7}
 800876e:	b083      	sub	sp, #12
 8008770:	af00      	add	r7, sp, #0
 8008772:	4603      	mov	r3, r0
 8008774:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
 8008776:	4a04      	ldr	r2, [pc, #16]	; (8008788 <RCC_RTCCLKCmd+0x1c>)
 8008778:	79fb      	ldrb	r3, [r7, #7]
 800877a:	6013      	str	r3, [r2, #0]
}
 800877c:	bf00      	nop
 800877e:	370c      	adds	r7, #12
 8008780:	46bd      	mov	sp, r7
 8008782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008786:	4770      	bx	lr
 8008788:	42470e3c 	.word	0x42470e3c

0800878c <RCC_BackupResetCmd>:
  * @param  NewState: new state of the Backup domain reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_BackupResetCmd(FunctionalState NewState)
{
 800878c:	b480      	push	{r7}
 800878e:	b083      	sub	sp, #12
 8008790:	af00      	add	r7, sp, #0
 8008792:	4603      	mov	r3, r0
 8008794:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
 8008796:	4a04      	ldr	r2, [pc, #16]	; (80087a8 <RCC_BackupResetCmd+0x1c>)
 8008798:	79fb      	ldrb	r3, [r7, #7]
 800879a:	6013      	str	r3, [r2, #0]
}
 800879c:	bf00      	nop
 800879e:	370c      	adds	r7, #12
 80087a0:	46bd      	mov	sp, r7
 80087a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a6:	4770      	bx	lr
 80087a8:	42470e40 	.word	0x42470e40

080087ac <RCC_I2SCLKConfig>:
  *            @arg RCC_I2S2CLKSource_Ext: External clock mapped on the I2S_CKIN pin
  *                                        used as I2S clock source
  * @retval None
  */
void RCC_I2SCLKConfig(uint32_t RCC_I2SCLKSource)
{
 80087ac:	b480      	push	{r7}
 80087ae:	b083      	sub	sp, #12
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_I2SCLK_SOURCE(RCC_I2SCLKSource));

  *(__IO uint32_t *) CFGR_I2SSRC_BB = RCC_I2SCLKSource;
 80087b4:	4a04      	ldr	r2, [pc, #16]	; (80087c8 <RCC_I2SCLKConfig+0x1c>)
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	6013      	str	r3, [r2, #0]
}
 80087ba:	bf00      	nop
 80087bc:	370c      	adds	r7, #12
 80087be:	46bd      	mov	sp, r7
 80087c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c4:	4770      	bx	lr
 80087c6:	bf00      	nop
 80087c8:	4247015c 	.word	0x4247015c

080087cc <RCC_SAIPLLI2SClkDivConfig>:
  *          SAI1 clock frequency = f(PLLI2S_Q) / RCC_PLLI2SDivQ 
  *              
  * @retval None
  */
void RCC_SAIPLLI2SClkDivConfig(uint32_t RCC_PLLI2SDivQ)  
{
 80087cc:	b480      	push	{r7}
 80087ce:	b085      	sub	sp, #20
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 80087d4:	2300      	movs	r3, #0
 80087d6:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(RCC_PLLI2SDivQ));
  
  tmpreg = RCC->DCKCFGR;
 80087d8:	4b0b      	ldr	r3, [pc, #44]	; (8008808 <RCC_SAIPLLI2SClkDivConfig+0x3c>)
 80087da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80087de:	60fb      	str	r3, [r7, #12]

  /* Clear PLLI2SDIVQ[4:0] bits */
  tmpreg &= ~(RCC_DCKCFGR_PLLI2SDIVQ);
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	f023 031f 	bic.w	r3, r3, #31
 80087e6:	60fb      	str	r3, [r7, #12]

  /* Set PLLI2SDIVQ values */
  tmpreg |= (RCC_PLLI2SDivQ - 1);
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	3b01      	subs	r3, #1
 80087ec:	68fa      	ldr	r2, [r7, #12]
 80087ee:	4313      	orrs	r3, r2
 80087f0:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
 80087f2:	4a05      	ldr	r2, [pc, #20]	; (8008808 <RCC_SAIPLLI2SClkDivConfig+0x3c>)
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
}
 80087fa:	bf00      	nop
 80087fc:	3714      	adds	r7, #20
 80087fe:	46bd      	mov	sp, r7
 8008800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008804:	4770      	bx	lr
 8008806:	bf00      	nop
 8008808:	40023800 	.word	0x40023800

0800880c <RCC_SAIPLLSAIClkDivConfig>:
  *          SAI1 clock frequency = f(PLLSAI_Q) / RCC_PLLSAIDivQ  
  *              
  * @retval None
  */
void RCC_SAIPLLSAIClkDivConfig(uint32_t RCC_PLLSAIDivQ)  
{
 800880c:	b480      	push	{r7}
 800880e:	b085      	sub	sp, #20
 8008810:	af00      	add	r7, sp, #0
 8008812:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8008814:	2300      	movs	r3, #0
 8008816:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(RCC_PLLSAIDivQ));
  
  tmpreg = RCC->DCKCFGR;
 8008818:	4b0b      	ldr	r3, [pc, #44]	; (8008848 <RCC_SAIPLLSAIClkDivConfig+0x3c>)
 800881a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800881e:	60fb      	str	r3, [r7, #12]

  /* Clear PLLI2SDIVQ[4:0] and PLLSAIDIVQ[4:0] bits */
  tmpreg &= ~(RCC_DCKCFGR_PLLSAIDIVQ);
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8008826:	60fb      	str	r3, [r7, #12]

  /* Set PLLSAIDIVQ values */
  tmpreg |= ((RCC_PLLSAIDivQ - 1) << 8);
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	3b01      	subs	r3, #1
 800882c:	021b      	lsls	r3, r3, #8
 800882e:	68fa      	ldr	r2, [r7, #12]
 8008830:	4313      	orrs	r3, r2
 8008832:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
 8008834:	4a04      	ldr	r2, [pc, #16]	; (8008848 <RCC_SAIPLLSAIClkDivConfig+0x3c>)
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
}
 800883c:	bf00      	nop
 800883e:	3714      	adds	r7, #20
 8008840:	46bd      	mov	sp, r7
 8008842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008846:	4770      	bx	lr
 8008848:	40023800 	.word	0x40023800

0800884c <RCC_SAIBlockACLKConfig>:
  *            @arg RCC_SAIACLKSource_Ext: External clock mapped on the I2S_CKIN pin
  *                                        used as SAI1 Block A clock
  * @retval None
  */
void RCC_SAIBlockACLKConfig(uint32_t RCC_SAIBlockACLKSource)
{
 800884c:	b480      	push	{r7}
 800884e:	b085      	sub	sp, #20
 8008850:	af00      	add	r7, sp, #0
 8008852:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8008854:	2300      	movs	r3, #0
 8008856:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_SAIACLK_SOURCE(RCC_SAIBlockACLKSource));
  
  tmpreg = RCC->DCKCFGR;
 8008858:	4b0a      	ldr	r3, [pc, #40]	; (8008884 <RCC_SAIBlockACLKConfig+0x38>)
 800885a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800885e:	60fb      	str	r3, [r7, #12]

  /* Clear RCC_DCKCFGR_SAI1ASRC[1:0] bits */
  tmpreg &= ~RCC_DCKCFGR_SAI1ASRC;
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8008866:	60fb      	str	r3, [r7, #12]

  /* Set SAI Block A source selection value */
  tmpreg |= RCC_SAIBlockACLKSource;
 8008868:	68fa      	ldr	r2, [r7, #12]
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	4313      	orrs	r3, r2
 800886e:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
 8008870:	4a04      	ldr	r2, [pc, #16]	; (8008884 <RCC_SAIBlockACLKConfig+0x38>)
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
}
 8008878:	bf00      	nop
 800887a:	3714      	adds	r7, #20
 800887c:	46bd      	mov	sp, r7
 800887e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008882:	4770      	bx	lr
 8008884:	40023800 	.word	0x40023800

08008888 <RCC_SAIBlockBCLKConfig>:
  *            @arg RCC_SAIBCLKSource_Ext: External clock mapped on the I2S_CKIN pin
  *                                        used as SAI1 Block B clock
  * @retval None
  */
void RCC_SAIBlockBCLKConfig(uint32_t RCC_SAIBlockBCLKSource)
{
 8008888:	b480      	push	{r7}
 800888a:	b085      	sub	sp, #20
 800888c:	af00      	add	r7, sp, #0
 800888e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8008890:	2300      	movs	r3, #0
 8008892:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_SAIBCLK_SOURCE(RCC_SAIBlockBCLKSource));
  
  tmpreg = RCC->DCKCFGR;
 8008894:	4b0a      	ldr	r3, [pc, #40]	; (80088c0 <RCC_SAIBlockBCLKConfig+0x38>)
 8008896:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800889a:	60fb      	str	r3, [r7, #12]

  /* Clear RCC_DCKCFGR_SAI1BSRC[1:0] bits */
  tmpreg &= ~RCC_DCKCFGR_SAI1BSRC;
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80088a2:	60fb      	str	r3, [r7, #12]

  /* Set SAI Block B source selection value */
  tmpreg |= RCC_SAIBlockBCLKSource;
 80088a4:	68fa      	ldr	r2, [r7, #12]
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	4313      	orrs	r3, r2
 80088aa:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
 80088ac:	4a04      	ldr	r2, [pc, #16]	; (80088c0 <RCC_SAIBlockBCLKConfig+0x38>)
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
}
 80088b4:	bf00      	nop
 80088b6:	3714      	adds	r7, #20
 80088b8:	46bd      	mov	sp, r7
 80088ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088be:	4770      	bx	lr
 80088c0:	40023800 	.word	0x40023800

080088c4 <RCC_LTDCCLKDivConfig>:
  *          LTDC clock frequency = f(PLLSAI_R) / RCC_PLLSAIDivR  
  *            
  * @retval None
  */
void RCC_LTDCCLKDivConfig(uint32_t RCC_PLLSAIDivR)
{
 80088c4:	b480      	push	{r7}
 80088c6:	b085      	sub	sp, #20
 80088c8:	af00      	add	r7, sp, #0
 80088ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 80088cc:	2300      	movs	r3, #0
 80088ce:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_PLLSAI_DIVR_VALUE(RCC_PLLSAIDivR));
  
  tmpreg = RCC->DCKCFGR;
 80088d0:	4b0a      	ldr	r3, [pc, #40]	; (80088fc <RCC_LTDCCLKDivConfig+0x38>)
 80088d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80088d6:	60fb      	str	r3, [r7, #12]

  /* Clear PLLSAIDIVR[2:0] bits */
  tmpreg &= ~RCC_DCKCFGR_PLLSAIDIVR;
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80088de:	60fb      	str	r3, [r7, #12]

  /* Set PLLSAIDIVR values */
  tmpreg |= RCC_PLLSAIDivR;
 80088e0:	68fa      	ldr	r2, [r7, #12]
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	4313      	orrs	r3, r2
 80088e6:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
 80088e8:	4a04      	ldr	r2, [pc, #16]	; (80088fc <RCC_LTDCCLKDivConfig+0x38>)
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
}
 80088f0:	bf00      	nop
 80088f2:	3714      	adds	r7, #20
 80088f4:	46bd      	mov	sp, r7
 80088f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088fa:	4770      	bx	lr
 80088fc:	40023800 	.word	0x40023800

08008900 <RCC_TIMCLKPresConfig>:
  *                 else it is equal to [(HPRE * PPREx) / 4] if PPREx is corresponding 
  *                 to division by 8 or more.
  * @retval None
  */
void RCC_TIMCLKPresConfig(uint32_t RCC_TIMCLKPrescaler)
{
 8008900:	b480      	push	{r7}
 8008902:	b083      	sub	sp, #12
 8008904:	af00      	add	r7, sp, #0
 8008906:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_TIMCLK_PRESCALER(RCC_TIMCLKPrescaler));

  *(__IO uint32_t *) DCKCFGR_TIMPRE_BB = RCC_TIMCLKPrescaler;
 8008908:	4a04      	ldr	r2, [pc, #16]	; (800891c <RCC_TIMCLKPresConfig+0x1c>)
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	6013      	str	r3, [r2, #0]
  
}
 800890e:	bf00      	nop
 8008910:	370c      	adds	r7, #12
 8008912:	46bd      	mov	sp, r7
 8008914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008918:	4770      	bx	lr
 800891a:	bf00      	nop
 800891c:	424711e0 	.word	0x424711e0

08008920 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8008920:	b480      	push	{r7}
 8008922:	b083      	sub	sp, #12
 8008924:	af00      	add	r7, sp, #0
 8008926:	6078      	str	r0, [r7, #4]
 8008928:	460b      	mov	r3, r1
 800892a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800892c:	78fb      	ldrb	r3, [r7, #3]
 800892e:	2b00      	cmp	r3, #0
 8008930:	d006      	beq.n	8008940 <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8008932:	4b0a      	ldr	r3, [pc, #40]	; (800895c <RCC_AHB1PeriphClockCmd+0x3c>)
 8008934:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008936:	4909      	ldr	r1, [pc, #36]	; (800895c <RCC_AHB1PeriphClockCmd+0x3c>)
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	4313      	orrs	r3, r2
 800893c:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 800893e:	e006      	b.n	800894e <RCC_AHB1PeriphClockCmd+0x2e>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8008940:	4b06      	ldr	r3, [pc, #24]	; (800895c <RCC_AHB1PeriphClockCmd+0x3c>)
 8008942:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	43db      	mvns	r3, r3
 8008948:	4904      	ldr	r1, [pc, #16]	; (800895c <RCC_AHB1PeriphClockCmd+0x3c>)
 800894a:	4013      	ands	r3, r2
 800894c:	630b      	str	r3, [r1, #48]	; 0x30
}
 800894e:	bf00      	nop
 8008950:	370c      	adds	r7, #12
 8008952:	46bd      	mov	sp, r7
 8008954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008958:	4770      	bx	lr
 800895a:	bf00      	nop
 800895c:	40023800 	.word	0x40023800

08008960 <RCC_AHB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB2PeriphClockCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
 8008960:	b480      	push	{r7}
 8008962:	b083      	sub	sp, #12
 8008964:	af00      	add	r7, sp, #0
 8008966:	6078      	str	r0, [r7, #4]
 8008968:	460b      	mov	r3, r1
 800896a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800896c:	78fb      	ldrb	r3, [r7, #3]
 800896e:	2b00      	cmp	r3, #0
 8008970:	d006      	beq.n	8008980 <RCC_AHB2PeriphClockCmd+0x20>
  {
    RCC->AHB2ENR |= RCC_AHB2Periph;
 8008972:	4b0a      	ldr	r3, [pc, #40]	; (800899c <RCC_AHB2PeriphClockCmd+0x3c>)
 8008974:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008976:	4909      	ldr	r1, [pc, #36]	; (800899c <RCC_AHB2PeriphClockCmd+0x3c>)
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	4313      	orrs	r3, r2
 800897c:	634b      	str	r3, [r1, #52]	; 0x34
  }
  else
  {
    RCC->AHB2ENR &= ~RCC_AHB2Periph;
  }
}
 800897e:	e006      	b.n	800898e <RCC_AHB2PeriphClockCmd+0x2e>
    RCC->AHB2ENR &= ~RCC_AHB2Periph;
 8008980:	4b06      	ldr	r3, [pc, #24]	; (800899c <RCC_AHB2PeriphClockCmd+0x3c>)
 8008982:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	43db      	mvns	r3, r3
 8008988:	4904      	ldr	r1, [pc, #16]	; (800899c <RCC_AHB2PeriphClockCmd+0x3c>)
 800898a:	4013      	ands	r3, r2
 800898c:	634b      	str	r3, [r1, #52]	; 0x34
}
 800898e:	bf00      	nop
 8008990:	370c      	adds	r7, #12
 8008992:	46bd      	mov	sp, r7
 8008994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008998:	4770      	bx	lr
 800899a:	bf00      	nop
 800899c:	40023800 	.word	0x40023800

080089a0 <RCC_AHB3PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB3PeriphClockCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
 80089a0:	b480      	push	{r7}
 80089a2:	b083      	sub	sp, #12
 80089a4:	af00      	add	r7, sp, #0
 80089a6:	6078      	str	r0, [r7, #4]
 80089a8:	460b      	mov	r3, r1
 80089aa:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80089ac:	78fb      	ldrb	r3, [r7, #3]
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d006      	beq.n	80089c0 <RCC_AHB3PeriphClockCmd+0x20>
  {
    RCC->AHB3ENR |= RCC_AHB3Periph;
 80089b2:	4b0a      	ldr	r3, [pc, #40]	; (80089dc <RCC_AHB3PeriphClockCmd+0x3c>)
 80089b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80089b6:	4909      	ldr	r1, [pc, #36]	; (80089dc <RCC_AHB3PeriphClockCmd+0x3c>)
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	4313      	orrs	r3, r2
 80089bc:	638b      	str	r3, [r1, #56]	; 0x38
  }
  else
  {
    RCC->AHB3ENR &= ~RCC_AHB3Periph;
  }
}
 80089be:	e006      	b.n	80089ce <RCC_AHB3PeriphClockCmd+0x2e>
    RCC->AHB3ENR &= ~RCC_AHB3Periph;
 80089c0:	4b06      	ldr	r3, [pc, #24]	; (80089dc <RCC_AHB3PeriphClockCmd+0x3c>)
 80089c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	43db      	mvns	r3, r3
 80089c8:	4904      	ldr	r1, [pc, #16]	; (80089dc <RCC_AHB3PeriphClockCmd+0x3c>)
 80089ca:	4013      	ands	r3, r2
 80089cc:	638b      	str	r3, [r1, #56]	; 0x38
}
 80089ce:	bf00      	nop
 80089d0:	370c      	adds	r7, #12
 80089d2:	46bd      	mov	sp, r7
 80089d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d8:	4770      	bx	lr
 80089da:	bf00      	nop
 80089dc:	40023800 	.word	0x40023800

080089e0 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 80089e0:	b480      	push	{r7}
 80089e2:	b083      	sub	sp, #12
 80089e4:	af00      	add	r7, sp, #0
 80089e6:	6078      	str	r0, [r7, #4]
 80089e8:	460b      	mov	r3, r1
 80089ea:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80089ec:	78fb      	ldrb	r3, [r7, #3]
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d006      	beq.n	8008a00 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 80089f2:	4b0a      	ldr	r3, [pc, #40]	; (8008a1c <RCC_APB1PeriphClockCmd+0x3c>)
 80089f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80089f6:	4909      	ldr	r1, [pc, #36]	; (8008a1c <RCC_APB1PeriphClockCmd+0x3c>)
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	4313      	orrs	r3, r2
 80089fc:	640b      	str	r3, [r1, #64]	; 0x40
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 80089fe:	e006      	b.n	8008a0e <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8008a00:	4b06      	ldr	r3, [pc, #24]	; (8008a1c <RCC_APB1PeriphClockCmd+0x3c>)
 8008a02:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	43db      	mvns	r3, r3
 8008a08:	4904      	ldr	r1, [pc, #16]	; (8008a1c <RCC_APB1PeriphClockCmd+0x3c>)
 8008a0a:	4013      	ands	r3, r2
 8008a0c:	640b      	str	r3, [r1, #64]	; 0x40
}
 8008a0e:	bf00      	nop
 8008a10:	370c      	adds	r7, #12
 8008a12:	46bd      	mov	sp, r7
 8008a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a18:	4770      	bx	lr
 8008a1a:	bf00      	nop
 8008a1c:	40023800 	.word	0x40023800

08008a20 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8008a20:	b480      	push	{r7}
 8008a22:	b083      	sub	sp, #12
 8008a24:	af00      	add	r7, sp, #0
 8008a26:	6078      	str	r0, [r7, #4]
 8008a28:	460b      	mov	r3, r1
 8008a2a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8008a2c:	78fb      	ldrb	r3, [r7, #3]
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d006      	beq.n	8008a40 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8008a32:	4b0a      	ldr	r3, [pc, #40]	; (8008a5c <RCC_APB2PeriphClockCmd+0x3c>)
 8008a34:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008a36:	4909      	ldr	r1, [pc, #36]	; (8008a5c <RCC_APB2PeriphClockCmd+0x3c>)
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	4313      	orrs	r3, r2
 8008a3c:	644b      	str	r3, [r1, #68]	; 0x44
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 8008a3e:	e006      	b.n	8008a4e <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8008a40:	4b06      	ldr	r3, [pc, #24]	; (8008a5c <RCC_APB2PeriphClockCmd+0x3c>)
 8008a42:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	43db      	mvns	r3, r3
 8008a48:	4904      	ldr	r1, [pc, #16]	; (8008a5c <RCC_APB2PeriphClockCmd+0x3c>)
 8008a4a:	4013      	ands	r3, r2
 8008a4c:	644b      	str	r3, [r1, #68]	; 0x44
}
 8008a4e:	bf00      	nop
 8008a50:	370c      	adds	r7, #12
 8008a52:	46bd      	mov	sp, r7
 8008a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a58:	4770      	bx	lr
 8008a5a:	bf00      	nop
 8008a5c:	40023800 	.word	0x40023800

08008a60 <RCC_AHB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphResetCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8008a60:	b480      	push	{r7}
 8008a62:	b083      	sub	sp, #12
 8008a64:	af00      	add	r7, sp, #0
 8008a66:	6078      	str	r0, [r7, #4]
 8008a68:	460b      	mov	r3, r1
 8008a6a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_RESET_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8008a6c:	78fb      	ldrb	r3, [r7, #3]
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d006      	beq.n	8008a80 <RCC_AHB1PeriphResetCmd+0x20>
  {
    RCC->AHB1RSTR |= RCC_AHB1Periph;
 8008a72:	4b0a      	ldr	r3, [pc, #40]	; (8008a9c <RCC_AHB1PeriphResetCmd+0x3c>)
 8008a74:	691a      	ldr	r2, [r3, #16]
 8008a76:	4909      	ldr	r1, [pc, #36]	; (8008a9c <RCC_AHB1PeriphResetCmd+0x3c>)
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	4313      	orrs	r3, r2
 8008a7c:	610b      	str	r3, [r1, #16]
  }
  else
  {
    RCC->AHB1RSTR &= ~RCC_AHB1Periph;
  }
}
 8008a7e:	e006      	b.n	8008a8e <RCC_AHB1PeriphResetCmd+0x2e>
    RCC->AHB1RSTR &= ~RCC_AHB1Periph;
 8008a80:	4b06      	ldr	r3, [pc, #24]	; (8008a9c <RCC_AHB1PeriphResetCmd+0x3c>)
 8008a82:	691a      	ldr	r2, [r3, #16]
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	43db      	mvns	r3, r3
 8008a88:	4904      	ldr	r1, [pc, #16]	; (8008a9c <RCC_AHB1PeriphResetCmd+0x3c>)
 8008a8a:	4013      	ands	r3, r2
 8008a8c:	610b      	str	r3, [r1, #16]
}
 8008a8e:	bf00      	nop
 8008a90:	370c      	adds	r7, #12
 8008a92:	46bd      	mov	sp, r7
 8008a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a98:	4770      	bx	lr
 8008a9a:	bf00      	nop
 8008a9c:	40023800 	.word	0x40023800

08008aa0 <RCC_AHB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB2PeriphResetCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
 8008aa0:	b480      	push	{r7}
 8008aa2:	b083      	sub	sp, #12
 8008aa4:	af00      	add	r7, sp, #0
 8008aa6:	6078      	str	r0, [r7, #4]
 8008aa8:	460b      	mov	r3, r1
 8008aaa:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8008aac:	78fb      	ldrb	r3, [r7, #3]
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d006      	beq.n	8008ac0 <RCC_AHB2PeriphResetCmd+0x20>
  {
    RCC->AHB2RSTR |= RCC_AHB2Periph;
 8008ab2:	4b0a      	ldr	r3, [pc, #40]	; (8008adc <RCC_AHB2PeriphResetCmd+0x3c>)
 8008ab4:	695a      	ldr	r2, [r3, #20]
 8008ab6:	4909      	ldr	r1, [pc, #36]	; (8008adc <RCC_AHB2PeriphResetCmd+0x3c>)
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	4313      	orrs	r3, r2
 8008abc:	614b      	str	r3, [r1, #20]
  }
  else
  {
    RCC->AHB2RSTR &= ~RCC_AHB2Periph;
  }
}
 8008abe:	e006      	b.n	8008ace <RCC_AHB2PeriphResetCmd+0x2e>
    RCC->AHB2RSTR &= ~RCC_AHB2Periph;
 8008ac0:	4b06      	ldr	r3, [pc, #24]	; (8008adc <RCC_AHB2PeriphResetCmd+0x3c>)
 8008ac2:	695a      	ldr	r2, [r3, #20]
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	43db      	mvns	r3, r3
 8008ac8:	4904      	ldr	r1, [pc, #16]	; (8008adc <RCC_AHB2PeriphResetCmd+0x3c>)
 8008aca:	4013      	ands	r3, r2
 8008acc:	614b      	str	r3, [r1, #20]
}
 8008ace:	bf00      	nop
 8008ad0:	370c      	adds	r7, #12
 8008ad2:	46bd      	mov	sp, r7
 8008ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad8:	4770      	bx	lr
 8008ada:	bf00      	nop
 8008adc:	40023800 	.word	0x40023800

08008ae0 <RCC_AHB3PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB3PeriphResetCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
 8008ae0:	b480      	push	{r7}
 8008ae2:	b083      	sub	sp, #12
 8008ae4:	af00      	add	r7, sp, #0
 8008ae6:	6078      	str	r0, [r7, #4]
 8008ae8:	460b      	mov	r3, r1
 8008aea:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8008aec:	78fb      	ldrb	r3, [r7, #3]
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d006      	beq.n	8008b00 <RCC_AHB3PeriphResetCmd+0x20>
  {
    RCC->AHB3RSTR |= RCC_AHB3Periph;
 8008af2:	4b0a      	ldr	r3, [pc, #40]	; (8008b1c <RCC_AHB3PeriphResetCmd+0x3c>)
 8008af4:	699a      	ldr	r2, [r3, #24]
 8008af6:	4909      	ldr	r1, [pc, #36]	; (8008b1c <RCC_AHB3PeriphResetCmd+0x3c>)
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	4313      	orrs	r3, r2
 8008afc:	618b      	str	r3, [r1, #24]
  }
  else
  {
    RCC->AHB3RSTR &= ~RCC_AHB3Periph;
  }
}
 8008afe:	e006      	b.n	8008b0e <RCC_AHB3PeriphResetCmd+0x2e>
    RCC->AHB3RSTR &= ~RCC_AHB3Periph;
 8008b00:	4b06      	ldr	r3, [pc, #24]	; (8008b1c <RCC_AHB3PeriphResetCmd+0x3c>)
 8008b02:	699a      	ldr	r2, [r3, #24]
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	43db      	mvns	r3, r3
 8008b08:	4904      	ldr	r1, [pc, #16]	; (8008b1c <RCC_AHB3PeriphResetCmd+0x3c>)
 8008b0a:	4013      	ands	r3, r2
 8008b0c:	618b      	str	r3, [r1, #24]
}
 8008b0e:	bf00      	nop
 8008b10:	370c      	adds	r7, #12
 8008b12:	46bd      	mov	sp, r7
 8008b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b18:	4770      	bx	lr
 8008b1a:	bf00      	nop
 8008b1c:	40023800 	.word	0x40023800

08008b20 <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8008b20:	b480      	push	{r7}
 8008b22:	b083      	sub	sp, #12
 8008b24:	af00      	add	r7, sp, #0
 8008b26:	6078      	str	r0, [r7, #4]
 8008b28:	460b      	mov	r3, r1
 8008b2a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8008b2c:	78fb      	ldrb	r3, [r7, #3]
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d006      	beq.n	8008b40 <RCC_APB1PeriphResetCmd+0x20>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 8008b32:	4b0a      	ldr	r3, [pc, #40]	; (8008b5c <RCC_APB1PeriphResetCmd+0x3c>)
 8008b34:	6a1a      	ldr	r2, [r3, #32]
 8008b36:	4909      	ldr	r1, [pc, #36]	; (8008b5c <RCC_APB1PeriphResetCmd+0x3c>)
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	4313      	orrs	r3, r2
 8008b3c:	620b      	str	r3, [r1, #32]
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
  }
}
 8008b3e:	e006      	b.n	8008b4e <RCC_APB1PeriphResetCmd+0x2e>
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 8008b40:	4b06      	ldr	r3, [pc, #24]	; (8008b5c <RCC_APB1PeriphResetCmd+0x3c>)
 8008b42:	6a1a      	ldr	r2, [r3, #32]
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	43db      	mvns	r3, r3
 8008b48:	4904      	ldr	r1, [pc, #16]	; (8008b5c <RCC_APB1PeriphResetCmd+0x3c>)
 8008b4a:	4013      	ands	r3, r2
 8008b4c:	620b      	str	r3, [r1, #32]
}
 8008b4e:	bf00      	nop
 8008b50:	370c      	adds	r7, #12
 8008b52:	46bd      	mov	sp, r7
 8008b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b58:	4770      	bx	lr
 8008b5a:	bf00      	nop
 8008b5c:	40023800 	.word	0x40023800

08008b60 <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8008b60:	b480      	push	{r7}
 8008b62:	b083      	sub	sp, #12
 8008b64:	af00      	add	r7, sp, #0
 8008b66:	6078      	str	r0, [r7, #4]
 8008b68:	460b      	mov	r3, r1
 8008b6a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8008b6c:	78fb      	ldrb	r3, [r7, #3]
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d006      	beq.n	8008b80 <RCC_APB2PeriphResetCmd+0x20>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 8008b72:	4b0a      	ldr	r3, [pc, #40]	; (8008b9c <RCC_APB2PeriphResetCmd+0x3c>)
 8008b74:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008b76:	4909      	ldr	r1, [pc, #36]	; (8008b9c <RCC_APB2PeriphResetCmd+0x3c>)
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	4313      	orrs	r3, r2
 8008b7c:	624b      	str	r3, [r1, #36]	; 0x24
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
  }
}
 8008b7e:	e006      	b.n	8008b8e <RCC_APB2PeriphResetCmd+0x2e>
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 8008b80:	4b06      	ldr	r3, [pc, #24]	; (8008b9c <RCC_APB2PeriphResetCmd+0x3c>)
 8008b82:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	43db      	mvns	r3, r3
 8008b88:	4904      	ldr	r1, [pc, #16]	; (8008b9c <RCC_APB2PeriphResetCmd+0x3c>)
 8008b8a:	4013      	ands	r3, r2
 8008b8c:	624b      	str	r3, [r1, #36]	; 0x24
}
 8008b8e:	bf00      	nop
 8008b90:	370c      	adds	r7, #12
 8008b92:	46bd      	mov	sp, r7
 8008b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b98:	4770      	bx	lr
 8008b9a:	bf00      	nop
 8008b9c:	40023800 	.word	0x40023800

08008ba0 <RCC_AHB1PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockLPModeCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8008ba0:	b480      	push	{r7}
 8008ba2:	b083      	sub	sp, #12
 8008ba4:	af00      	add	r7, sp, #0
 8008ba6:	6078      	str	r0, [r7, #4]
 8008ba8:	460b      	mov	r3, r1
 8008baa:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_LPMODE_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8008bac:	78fb      	ldrb	r3, [r7, #3]
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d006      	beq.n	8008bc0 <RCC_AHB1PeriphClockLPModeCmd+0x20>
  {
    RCC->AHB1LPENR |= RCC_AHB1Periph;
 8008bb2:	4b0a      	ldr	r3, [pc, #40]	; (8008bdc <RCC_AHB1PeriphClockLPModeCmd+0x3c>)
 8008bb4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008bb6:	4909      	ldr	r1, [pc, #36]	; (8008bdc <RCC_AHB1PeriphClockLPModeCmd+0x3c>)
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	4313      	orrs	r3, r2
 8008bbc:	650b      	str	r3, [r1, #80]	; 0x50
  }
  else
  {
    RCC->AHB1LPENR &= ~RCC_AHB1Periph;
  }
}
 8008bbe:	e006      	b.n	8008bce <RCC_AHB1PeriphClockLPModeCmd+0x2e>
    RCC->AHB1LPENR &= ~RCC_AHB1Periph;
 8008bc0:	4b06      	ldr	r3, [pc, #24]	; (8008bdc <RCC_AHB1PeriphClockLPModeCmd+0x3c>)
 8008bc2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	43db      	mvns	r3, r3
 8008bc8:	4904      	ldr	r1, [pc, #16]	; (8008bdc <RCC_AHB1PeriphClockLPModeCmd+0x3c>)
 8008bca:	4013      	ands	r3, r2
 8008bcc:	650b      	str	r3, [r1, #80]	; 0x50
}
 8008bce:	bf00      	nop
 8008bd0:	370c      	adds	r7, #12
 8008bd2:	46bd      	mov	sp, r7
 8008bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd8:	4770      	bx	lr
 8008bda:	bf00      	nop
 8008bdc:	40023800 	.word	0x40023800

08008be0 <RCC_AHB2PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB2PeriphClockLPModeCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
 8008be0:	b480      	push	{r7}
 8008be2:	b083      	sub	sp, #12
 8008be4:	af00      	add	r7, sp, #0
 8008be6:	6078      	str	r0, [r7, #4]
 8008be8:	460b      	mov	r3, r1
 8008bea:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8008bec:	78fb      	ldrb	r3, [r7, #3]
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d006      	beq.n	8008c00 <RCC_AHB2PeriphClockLPModeCmd+0x20>
  {
    RCC->AHB2LPENR |= RCC_AHB2Periph;
 8008bf2:	4b0a      	ldr	r3, [pc, #40]	; (8008c1c <RCC_AHB2PeriphClockLPModeCmd+0x3c>)
 8008bf4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008bf6:	4909      	ldr	r1, [pc, #36]	; (8008c1c <RCC_AHB2PeriphClockLPModeCmd+0x3c>)
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	4313      	orrs	r3, r2
 8008bfc:	654b      	str	r3, [r1, #84]	; 0x54
  }
  else
  {
    RCC->AHB2LPENR &= ~RCC_AHB2Periph;
  }
}
 8008bfe:	e006      	b.n	8008c0e <RCC_AHB2PeriphClockLPModeCmd+0x2e>
    RCC->AHB2LPENR &= ~RCC_AHB2Periph;
 8008c00:	4b06      	ldr	r3, [pc, #24]	; (8008c1c <RCC_AHB2PeriphClockLPModeCmd+0x3c>)
 8008c02:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	43db      	mvns	r3, r3
 8008c08:	4904      	ldr	r1, [pc, #16]	; (8008c1c <RCC_AHB2PeriphClockLPModeCmd+0x3c>)
 8008c0a:	4013      	ands	r3, r2
 8008c0c:	654b      	str	r3, [r1, #84]	; 0x54
}
 8008c0e:	bf00      	nop
 8008c10:	370c      	adds	r7, #12
 8008c12:	46bd      	mov	sp, r7
 8008c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c18:	4770      	bx	lr
 8008c1a:	bf00      	nop
 8008c1c:	40023800 	.word	0x40023800

08008c20 <RCC_AHB3PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB3PeriphClockLPModeCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
 8008c20:	b480      	push	{r7}
 8008c22:	b083      	sub	sp, #12
 8008c24:	af00      	add	r7, sp, #0
 8008c26:	6078      	str	r0, [r7, #4]
 8008c28:	460b      	mov	r3, r1
 8008c2a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8008c2c:	78fb      	ldrb	r3, [r7, #3]
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d006      	beq.n	8008c40 <RCC_AHB3PeriphClockLPModeCmd+0x20>
  {
    RCC->AHB3LPENR |= RCC_AHB3Periph;
 8008c32:	4b0a      	ldr	r3, [pc, #40]	; (8008c5c <RCC_AHB3PeriphClockLPModeCmd+0x3c>)
 8008c34:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008c36:	4909      	ldr	r1, [pc, #36]	; (8008c5c <RCC_AHB3PeriphClockLPModeCmd+0x3c>)
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	4313      	orrs	r3, r2
 8008c3c:	658b      	str	r3, [r1, #88]	; 0x58
  }
  else
  {
    RCC->AHB3LPENR &= ~RCC_AHB3Periph;
  }
}
 8008c3e:	e006      	b.n	8008c4e <RCC_AHB3PeriphClockLPModeCmd+0x2e>
    RCC->AHB3LPENR &= ~RCC_AHB3Periph;
 8008c40:	4b06      	ldr	r3, [pc, #24]	; (8008c5c <RCC_AHB3PeriphClockLPModeCmd+0x3c>)
 8008c42:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	43db      	mvns	r3, r3
 8008c48:	4904      	ldr	r1, [pc, #16]	; (8008c5c <RCC_AHB3PeriphClockLPModeCmd+0x3c>)
 8008c4a:	4013      	ands	r3, r2
 8008c4c:	658b      	str	r3, [r1, #88]	; 0x58
}
 8008c4e:	bf00      	nop
 8008c50:	370c      	adds	r7, #12
 8008c52:	46bd      	mov	sp, r7
 8008c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c58:	4770      	bx	lr
 8008c5a:	bf00      	nop
 8008c5c:	40023800 	.word	0x40023800

08008c60 <RCC_APB1PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockLPModeCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8008c60:	b480      	push	{r7}
 8008c62:	b083      	sub	sp, #12
 8008c64:	af00      	add	r7, sp, #0
 8008c66:	6078      	str	r0, [r7, #4]
 8008c68:	460b      	mov	r3, r1
 8008c6a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8008c6c:	78fb      	ldrb	r3, [r7, #3]
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d006      	beq.n	8008c80 <RCC_APB1PeriphClockLPModeCmd+0x20>
  {
    RCC->APB1LPENR |= RCC_APB1Periph;
 8008c72:	4b0a      	ldr	r3, [pc, #40]	; (8008c9c <RCC_APB1PeriphClockLPModeCmd+0x3c>)
 8008c74:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8008c76:	4909      	ldr	r1, [pc, #36]	; (8008c9c <RCC_APB1PeriphClockLPModeCmd+0x3c>)
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	4313      	orrs	r3, r2
 8008c7c:	660b      	str	r3, [r1, #96]	; 0x60
  }
  else
  {
    RCC->APB1LPENR &= ~RCC_APB1Periph;
  }
}
 8008c7e:	e006      	b.n	8008c8e <RCC_APB1PeriphClockLPModeCmd+0x2e>
    RCC->APB1LPENR &= ~RCC_APB1Periph;
 8008c80:	4b06      	ldr	r3, [pc, #24]	; (8008c9c <RCC_APB1PeriphClockLPModeCmd+0x3c>)
 8008c82:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	43db      	mvns	r3, r3
 8008c88:	4904      	ldr	r1, [pc, #16]	; (8008c9c <RCC_APB1PeriphClockLPModeCmd+0x3c>)
 8008c8a:	4013      	ands	r3, r2
 8008c8c:	660b      	str	r3, [r1, #96]	; 0x60
}
 8008c8e:	bf00      	nop
 8008c90:	370c      	adds	r7, #12
 8008c92:	46bd      	mov	sp, r7
 8008c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c98:	4770      	bx	lr
 8008c9a:	bf00      	nop
 8008c9c:	40023800 	.word	0x40023800

08008ca0 <RCC_APB2PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockLPModeCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8008ca0:	b480      	push	{r7}
 8008ca2:	b083      	sub	sp, #12
 8008ca4:	af00      	add	r7, sp, #0
 8008ca6:	6078      	str	r0, [r7, #4]
 8008ca8:	460b      	mov	r3, r1
 8008caa:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8008cac:	78fb      	ldrb	r3, [r7, #3]
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d006      	beq.n	8008cc0 <RCC_APB2PeriphClockLPModeCmd+0x20>
  {
    RCC->APB2LPENR |= RCC_APB2Periph;
 8008cb2:	4b0a      	ldr	r3, [pc, #40]	; (8008cdc <RCC_APB2PeriphClockLPModeCmd+0x3c>)
 8008cb4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8008cb6:	4909      	ldr	r1, [pc, #36]	; (8008cdc <RCC_APB2PeriphClockLPModeCmd+0x3c>)
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	4313      	orrs	r3, r2
 8008cbc:	664b      	str	r3, [r1, #100]	; 0x64
  }
  else
  {
    RCC->APB2LPENR &= ~RCC_APB2Periph;
  }
}
 8008cbe:	e006      	b.n	8008cce <RCC_APB2PeriphClockLPModeCmd+0x2e>
    RCC->APB2LPENR &= ~RCC_APB2Periph;
 8008cc0:	4b06      	ldr	r3, [pc, #24]	; (8008cdc <RCC_APB2PeriphClockLPModeCmd+0x3c>)
 8008cc2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	43db      	mvns	r3, r3
 8008cc8:	4904      	ldr	r1, [pc, #16]	; (8008cdc <RCC_APB2PeriphClockLPModeCmd+0x3c>)
 8008cca:	4013      	ands	r3, r2
 8008ccc:	664b      	str	r3, [r1, #100]	; 0x64
}
 8008cce:	bf00      	nop
 8008cd0:	370c      	adds	r7, #12
 8008cd2:	46bd      	mov	sp, r7
 8008cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd8:	4770      	bx	lr
 8008cda:	bf00      	nop
 8008cdc:	40023800 	.word	0x40023800

08008ce0 <RCC_ITConfig>:
  * @param  NewState: new state of the specified RCC interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
{
 8008ce0:	b480      	push	{r7}
 8008ce2:	b083      	sub	sp, #12
 8008ce4:	af00      	add	r7, sp, #0
 8008ce6:	4603      	mov	r3, r0
 8008ce8:	460a      	mov	r2, r1
 8008cea:	71fb      	strb	r3, [r7, #7]
 8008cec:	4613      	mov	r3, r2
 8008cee:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8008cf0:	79bb      	ldrb	r3, [r7, #6]
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d008      	beq.n	8008d08 <RCC_ITConfig+0x28>
  {
    /* Perform Byte access to RCC_CIR[14:8] bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
 8008cf6:	4b0c      	ldr	r3, [pc, #48]	; (8008d28 <RCC_ITConfig+0x48>)
 8008cf8:	781b      	ldrb	r3, [r3, #0]
 8008cfa:	b2da      	uxtb	r2, r3
 8008cfc:	490a      	ldr	r1, [pc, #40]	; (8008d28 <RCC_ITConfig+0x48>)
 8008cfe:	79fb      	ldrb	r3, [r7, #7]
 8008d00:	4313      	orrs	r3, r2
 8008d02:	b2db      	uxtb	r3, r3
 8008d04:	700b      	strb	r3, [r1, #0]
  else
  {
    /* Perform Byte access to RCC_CIR[14:8] bits to disable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
  }
}
 8008d06:	e009      	b.n	8008d1c <RCC_ITConfig+0x3c>
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
 8008d08:	4b07      	ldr	r3, [pc, #28]	; (8008d28 <RCC_ITConfig+0x48>)
 8008d0a:	781b      	ldrb	r3, [r3, #0]
 8008d0c:	b2da      	uxtb	r2, r3
 8008d0e:	79fb      	ldrb	r3, [r7, #7]
 8008d10:	43db      	mvns	r3, r3
 8008d12:	b2db      	uxtb	r3, r3
 8008d14:	4904      	ldr	r1, [pc, #16]	; (8008d28 <RCC_ITConfig+0x48>)
 8008d16:	4013      	ands	r3, r2
 8008d18:	b2db      	uxtb	r3, r3
 8008d1a:	700b      	strb	r3, [r1, #0]
}
 8008d1c:	bf00      	nop
 8008d1e:	370c      	adds	r7, #12
 8008d20:	46bd      	mov	sp, r7
 8008d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d26:	4770      	bx	lr
 8008d28:	4002380d 	.word	0x4002380d

08008d2c <RCC_GetFlagStatus>:
  *            @arg RCC_FLAG_WWDGRST: Window Watchdog reset
  *            @arg RCC_FLAG_LPWRRST: Low Power reset
  * @retval The new state of RCC_FLAG (SET or RESET).
  */
FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
{
 8008d2c:	b480      	push	{r7}
 8008d2e:	b087      	sub	sp, #28
 8008d30:	af00      	add	r7, sp, #0
 8008d32:	4603      	mov	r3, r0
 8008d34:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0;
 8008d36:	2300      	movs	r3, #0
 8008d38:	60fb      	str	r3, [r7, #12]
  uint32_t statusreg = 0;
 8008d3a:	2300      	movs	r3, #0
 8008d3c:	617b      	str	r3, [r7, #20]
  FlagStatus bitstatus = RESET;
 8008d3e:	2300      	movs	r3, #0
 8008d40:	74fb      	strb	r3, [r7, #19]

  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
 8008d42:	79fb      	ldrb	r3, [r7, #7]
 8008d44:	095b      	lsrs	r3, r3, #5
 8008d46:	b2db      	uxtb	r3, r3
 8008d48:	60fb      	str	r3, [r7, #12]
  if (tmp == 1)               /* The flag to check is in CR register */
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	2b01      	cmp	r3, #1
 8008d4e:	d103      	bne.n	8008d58 <RCC_GetFlagStatus+0x2c>
  {
    statusreg = RCC->CR;
 8008d50:	4b12      	ldr	r3, [pc, #72]	; (8008d9c <RCC_GetFlagStatus+0x70>)
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	617b      	str	r3, [r7, #20]
 8008d56:	e009      	b.n	8008d6c <RCC_GetFlagStatus+0x40>
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	2b02      	cmp	r3, #2
 8008d5c:	d103      	bne.n	8008d66 <RCC_GetFlagStatus+0x3a>
  {
    statusreg = RCC->BDCR;
 8008d5e:	4b0f      	ldr	r3, [pc, #60]	; (8008d9c <RCC_GetFlagStatus+0x70>)
 8008d60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d62:	617b      	str	r3, [r7, #20]
 8008d64:	e002      	b.n	8008d6c <RCC_GetFlagStatus+0x40>
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
 8008d66:	4b0d      	ldr	r3, [pc, #52]	; (8008d9c <RCC_GetFlagStatus+0x70>)
 8008d68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008d6a:	617b      	str	r3, [r7, #20]
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_MASK;
 8008d6c:	79fb      	ldrb	r3, [r7, #7]
 8008d6e:	f003 031f 	and.w	r3, r3, #31
 8008d72:	60fb      	str	r3, [r7, #12]
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 8008d74:	697a      	ldr	r2, [r7, #20]
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	fa22 f303 	lsr.w	r3, r2, r3
 8008d7c:	f003 0301 	and.w	r3, r3, #1
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d002      	beq.n	8008d8a <RCC_GetFlagStatus+0x5e>
  {
    bitstatus = SET;
 8008d84:	2301      	movs	r3, #1
 8008d86:	74fb      	strb	r3, [r7, #19]
 8008d88:	e001      	b.n	8008d8e <RCC_GetFlagStatus+0x62>
  }
  else
  {
    bitstatus = RESET;
 8008d8a:	2300      	movs	r3, #0
 8008d8c:	74fb      	strb	r3, [r7, #19]
  }
  /* Return the flag status */
  return bitstatus;
 8008d8e:	7cfb      	ldrb	r3, [r7, #19]
}
 8008d90:	4618      	mov	r0, r3
 8008d92:	371c      	adds	r7, #28
 8008d94:	46bd      	mov	sp, r7
 8008d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d9a:	4770      	bx	lr
 8008d9c:	40023800 	.word	0x40023800

08008da0 <RCC_ClearFlag>:
  *         RCC_FLAG_IWDGRST, RCC_FLAG_WWDGRST, RCC_FLAG_LPWRRST
  * @param  None
  * @retval None
  */
void RCC_ClearFlag(void)
{
 8008da0:	b480      	push	{r7}
 8008da2:	af00      	add	r7, sp, #0
  /* Set RMVF bit to clear the reset flags */
  RCC->CSR |= RCC_CSR_RMVF;
 8008da4:	4b05      	ldr	r3, [pc, #20]	; (8008dbc <RCC_ClearFlag+0x1c>)
 8008da6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008da8:	4a04      	ldr	r2, [pc, #16]	; (8008dbc <RCC_ClearFlag+0x1c>)
 8008daa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008dae:	6753      	str	r3, [r2, #116]	; 0x74
}
 8008db0:	bf00      	nop
 8008db2:	46bd      	mov	sp, r7
 8008db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db8:	4770      	bx	lr
 8008dba:	bf00      	nop
 8008dbc:	40023800 	.word	0x40023800

08008dc0 <RCC_GetITStatus>:
  *            @arg RCC_IT_PLLSAIRDY: PLLSAI clock ready interrupt (only for STM32F42xxx/43xxx devices)    
  *            @arg RCC_IT_CSS: Clock Security System interrupt
  * @retval The new state of RCC_IT (SET or RESET).
  */
ITStatus RCC_GetITStatus(uint8_t RCC_IT)
{
 8008dc0:	b480      	push	{r7}
 8008dc2:	b085      	sub	sp, #20
 8008dc4:	af00      	add	r7, sp, #0
 8008dc6:	4603      	mov	r3, r0
 8008dc8:	71fb      	strb	r3, [r7, #7]
  ITStatus bitstatus = RESET;
 8008dca:	2300      	movs	r3, #0
 8008dcc:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_RCC_GET_IT(RCC_IT));

  /* Check the status of the specified RCC interrupt */
  if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
 8008dce:	4b09      	ldr	r3, [pc, #36]	; (8008df4 <RCC_GetITStatus+0x34>)
 8008dd0:	68da      	ldr	r2, [r3, #12]
 8008dd2:	79fb      	ldrb	r3, [r7, #7]
 8008dd4:	4013      	ands	r3, r2
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d002      	beq.n	8008de0 <RCC_GetITStatus+0x20>
  {
    bitstatus = SET;
 8008dda:	2301      	movs	r3, #1
 8008ddc:	73fb      	strb	r3, [r7, #15]
 8008dde:	e001      	b.n	8008de4 <RCC_GetITStatus+0x24>
  }
  else
  {
    bitstatus = RESET;
 8008de0:	2300      	movs	r3, #0
 8008de2:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the RCC_IT status */
  return  bitstatus;
 8008de4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008de6:	4618      	mov	r0, r3
 8008de8:	3714      	adds	r7, #20
 8008dea:	46bd      	mov	sp, r7
 8008dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df0:	4770      	bx	lr
 8008df2:	bf00      	nop
 8008df4:	40023800 	.word	0x40023800

08008df8 <RCC_ClearITPendingBit>:
  *            @arg RCC_IT_PLLSAIRDY: PLLSAI ready interrupt (only for STM32F42xxx/43xxx devices)   
  *            @arg RCC_IT_CSS: Clock Security System interrupt
  * @retval None
  */
void RCC_ClearITPendingBit(uint8_t RCC_IT)
{
 8008df8:	b480      	push	{r7}
 8008dfa:	b083      	sub	sp, #12
 8008dfc:	af00      	add	r7, sp, #0
 8008dfe:	4603      	mov	r3, r0
 8008e00:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_CLEAR_IT(RCC_IT));

  /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
     pending bits */
  *(__IO uint8_t *) CIR_BYTE3_ADDRESS = RCC_IT;
 8008e02:	4a04      	ldr	r2, [pc, #16]	; (8008e14 <RCC_ClearITPendingBit+0x1c>)
 8008e04:	79fb      	ldrb	r3, [r7, #7]
 8008e06:	7013      	strb	r3, [r2, #0]
}
 8008e08:	bf00      	nop
 8008e0a:	370c      	adds	r7, #12
 8008e0c:	46bd      	mov	sp, r7
 8008e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e12:	4770      	bx	lr
 8008e14:	4002380e 	.word	0x4002380e

08008e18 <RNG_DeInit>:
  * @brief  De-initializes the RNG peripheral registers to their default reset values.
  * @param  None
  * @retval None
  */
void RNG_DeInit(void)
{
 8008e18:	b580      	push	{r7, lr}
 8008e1a:	af00      	add	r7, sp, #0
  /* Enable RNG reset state */
  RCC_AHB2PeriphResetCmd(RCC_AHB2Periph_RNG, ENABLE);
 8008e1c:	2101      	movs	r1, #1
 8008e1e:	2040      	movs	r0, #64	; 0x40
 8008e20:	f7ff fe3e 	bl	8008aa0 <RCC_AHB2PeriphResetCmd>

  /* Release RNG from reset state */
  RCC_AHB2PeriphResetCmd(RCC_AHB2Periph_RNG, DISABLE);
 8008e24:	2100      	movs	r1, #0
 8008e26:	2040      	movs	r0, #64	; 0x40
 8008e28:	f7ff fe3a 	bl	8008aa0 <RCC_AHB2PeriphResetCmd>
}
 8008e2c:	bf00      	nop
 8008e2e:	bd80      	pop	{r7, pc}

08008e30 <RNG_Cmd>:
  * @param  NewState: new state of the RNG peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RNG_Cmd(FunctionalState NewState)
{
 8008e30:	b480      	push	{r7}
 8008e32:	b083      	sub	sp, #12
 8008e34:	af00      	add	r7, sp, #0
 8008e36:	4603      	mov	r3, r0
 8008e38:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8008e3a:	79fb      	ldrb	r3, [r7, #7]
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d006      	beq.n	8008e4e <RNG_Cmd+0x1e>
  {
    /* Enable the RNG */
    RNG->CR |= RNG_CR_RNGEN;
 8008e40:	4b09      	ldr	r3, [pc, #36]	; (8008e68 <RNG_Cmd+0x38>)
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	4a08      	ldr	r2, [pc, #32]	; (8008e68 <RNG_Cmd+0x38>)
 8008e46:	f043 0304 	orr.w	r3, r3, #4
 8008e4a:	6013      	str	r3, [r2, #0]
  else
  {
    /* Disable the RNG */
    RNG->CR &= ~RNG_CR_RNGEN;
  }
}
 8008e4c:	e005      	b.n	8008e5a <RNG_Cmd+0x2a>
    RNG->CR &= ~RNG_CR_RNGEN;
 8008e4e:	4b06      	ldr	r3, [pc, #24]	; (8008e68 <RNG_Cmd+0x38>)
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	4a05      	ldr	r2, [pc, #20]	; (8008e68 <RNG_Cmd+0x38>)
 8008e54:	f023 0304 	bic.w	r3, r3, #4
 8008e58:	6013      	str	r3, [r2, #0]
}
 8008e5a:	bf00      	nop
 8008e5c:	370c      	adds	r7, #12
 8008e5e:	46bd      	mov	sp, r7
 8008e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e64:	4770      	bx	lr
 8008e66:	bf00      	nop
 8008e68:	50060800 	.word	0x50060800

08008e6c <RNG_GetRandomNumber>:
  *         
  * @param  None
  * @retval 32-bit random number.
  */
uint32_t RNG_GetRandomNumber(void)
{
 8008e6c:	b480      	push	{r7}
 8008e6e:	af00      	add	r7, sp, #0
  /* Return the 32 bit random number from the DR register */
  return RNG->DR;
 8008e70:	4b03      	ldr	r3, [pc, #12]	; (8008e80 <RNG_GetRandomNumber+0x14>)
 8008e72:	689b      	ldr	r3, [r3, #8]
}
 8008e74:	4618      	mov	r0, r3
 8008e76:	46bd      	mov	sp, r7
 8008e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e7c:	4770      	bx	lr
 8008e7e:	bf00      	nop
 8008e80:	50060800 	.word	0x50060800

08008e84 <RNG_ITConfig>:
  * @param  NewState: new state of the RNG interrupt.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RNG_ITConfig(FunctionalState NewState)
{
 8008e84:	b480      	push	{r7}
 8008e86:	b083      	sub	sp, #12
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	4603      	mov	r3, r0
 8008e8c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8008e8e:	79fb      	ldrb	r3, [r7, #7]
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d006      	beq.n	8008ea2 <RNG_ITConfig+0x1e>
  {
    /* Enable the RNG interrupt */
    RNG->CR |= RNG_CR_IE;
 8008e94:	4b09      	ldr	r3, [pc, #36]	; (8008ebc <RNG_ITConfig+0x38>)
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	4a08      	ldr	r2, [pc, #32]	; (8008ebc <RNG_ITConfig+0x38>)
 8008e9a:	f043 0308 	orr.w	r3, r3, #8
 8008e9e:	6013      	str	r3, [r2, #0]
  else
  {
    /* Disable the RNG interrupt */
    RNG->CR &= ~RNG_CR_IE;
  }
}
 8008ea0:	e005      	b.n	8008eae <RNG_ITConfig+0x2a>
    RNG->CR &= ~RNG_CR_IE;
 8008ea2:	4b06      	ldr	r3, [pc, #24]	; (8008ebc <RNG_ITConfig+0x38>)
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	4a05      	ldr	r2, [pc, #20]	; (8008ebc <RNG_ITConfig+0x38>)
 8008ea8:	f023 0308 	bic.w	r3, r3, #8
 8008eac:	6013      	str	r3, [r2, #0]
}
 8008eae:	bf00      	nop
 8008eb0:	370c      	adds	r7, #12
 8008eb2:	46bd      	mov	sp, r7
 8008eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb8:	4770      	bx	lr
 8008eba:	bf00      	nop
 8008ebc:	50060800 	.word	0x50060800

08008ec0 <RNG_GetFlagStatus>:
  *            @arg RNG_FLAG_CECS: Clock Error Current flag.
  *            @arg RNG_FLAG_SECS: Seed Error Current flag.
  * @retval The new state of RNG_FLAG (SET or RESET).
  */
FlagStatus RNG_GetFlagStatus(uint8_t RNG_FLAG)
{
 8008ec0:	b480      	push	{r7}
 8008ec2:	b085      	sub	sp, #20
 8008ec4:	af00      	add	r7, sp, #0
 8008ec6:	4603      	mov	r3, r0
 8008ec8:	71fb      	strb	r3, [r7, #7]
  FlagStatus bitstatus = RESET;
 8008eca:	2300      	movs	r3, #0
 8008ecc:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_RNG_GET_FLAG(RNG_FLAG));

  /* Check the status of the specified RNG flag */
  if ((RNG->SR & RNG_FLAG) != (uint8_t)RESET)
 8008ece:	4b09      	ldr	r3, [pc, #36]	; (8008ef4 <RNG_GetFlagStatus+0x34>)
 8008ed0:	685a      	ldr	r2, [r3, #4]
 8008ed2:	79fb      	ldrb	r3, [r7, #7]
 8008ed4:	4013      	ands	r3, r2
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d002      	beq.n	8008ee0 <RNG_GetFlagStatus+0x20>
  {
    /* RNG_FLAG is set */
    bitstatus = SET;
 8008eda:	2301      	movs	r3, #1
 8008edc:	73fb      	strb	r3, [r7, #15]
 8008ede:	e001      	b.n	8008ee4 <RNG_GetFlagStatus+0x24>
  }
  else
  {
    /* RNG_FLAG is reset */
    bitstatus = RESET;
 8008ee0:	2300      	movs	r3, #0
 8008ee2:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the RNG_FLAG status */
  return  bitstatus;
 8008ee4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ee6:	4618      	mov	r0, r3
 8008ee8:	3714      	adds	r7, #20
 8008eea:	46bd      	mov	sp, r7
 8008eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef0:	4770      	bx	lr
 8008ef2:	bf00      	nop
 8008ef4:	50060800 	.word	0x50060800

08008ef8 <RNG_ClearFlag>:
  *         This flag is cleared only by reading the Random number data (using 
  *         RNG_GetRandomNumber() function).                           
  * @retval None
  */
void RNG_ClearFlag(uint8_t RNG_FLAG)
{
 8008ef8:	b480      	push	{r7}
 8008efa:	b083      	sub	sp, #12
 8008efc:	af00      	add	r7, sp, #0
 8008efe:	4603      	mov	r3, r0
 8008f00:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RNG_CLEAR_FLAG(RNG_FLAG));
  /* Clear the selected RNG flags */
  RNG->SR = ~(uint32_t)(((uint32_t)RNG_FLAG) << 4);
 8008f02:	79fb      	ldrb	r3, [r7, #7]
 8008f04:	011b      	lsls	r3, r3, #4
 8008f06:	4a04      	ldr	r2, [pc, #16]	; (8008f18 <RNG_ClearFlag+0x20>)
 8008f08:	43db      	mvns	r3, r3
 8008f0a:	6053      	str	r3, [r2, #4]
}
 8008f0c:	bf00      	nop
 8008f0e:	370c      	adds	r7, #12
 8008f10:	46bd      	mov	sp, r7
 8008f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f16:	4770      	bx	lr
 8008f18:	50060800 	.word	0x50060800

08008f1c <RNG_GetITStatus>:
  *            @arg RNG_IT_CEI: Clock Error Interrupt.
  *            @arg RNG_IT_SEI: Seed Error Interrupt.                   
  * @retval The new state of RNG_IT (SET or RESET).
  */
ITStatus RNG_GetITStatus(uint8_t RNG_IT)
{
 8008f1c:	b480      	push	{r7}
 8008f1e:	b085      	sub	sp, #20
 8008f20:	af00      	add	r7, sp, #0
 8008f22:	4603      	mov	r3, r0
 8008f24:	71fb      	strb	r3, [r7, #7]
  ITStatus bitstatus = RESET;
 8008f26:	2300      	movs	r3, #0
 8008f28:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_RNG_GET_IT(RNG_IT));

  /* Check the status of the specified RNG interrupt */
  if ((RNG->SR & RNG_IT) != (uint8_t)RESET)
 8008f2a:	4b09      	ldr	r3, [pc, #36]	; (8008f50 <RNG_GetITStatus+0x34>)
 8008f2c:	685a      	ldr	r2, [r3, #4]
 8008f2e:	79fb      	ldrb	r3, [r7, #7]
 8008f30:	4013      	ands	r3, r2
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d002      	beq.n	8008f3c <RNG_GetITStatus+0x20>
  {
    /* RNG_IT is set */
    bitstatus = SET;
 8008f36:	2301      	movs	r3, #1
 8008f38:	73fb      	strb	r3, [r7, #15]
 8008f3a:	e001      	b.n	8008f40 <RNG_GetITStatus+0x24>
  }
  else
  {
    /* RNG_IT is reset */
    bitstatus = RESET;
 8008f3c:	2300      	movs	r3, #0
 8008f3e:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the RNG_IT status */
  return bitstatus;
 8008f40:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f42:	4618      	mov	r0, r3
 8008f44:	3714      	adds	r7, #20
 8008f46:	46bd      	mov	sp, r7
 8008f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f4c:	4770      	bx	lr
 8008f4e:	bf00      	nop
 8008f50:	50060800 	.word	0x50060800

08008f54 <RNG_ClearITPendingBit>:
  *            @arg RNG_IT_CEI: Clock Error Interrupt.
  *            @arg RNG_IT_SEI: Seed Error Interrupt.
  * @retval None
  */
void RNG_ClearITPendingBit(uint8_t RNG_IT)
{
 8008f54:	b480      	push	{r7}
 8008f56:	b083      	sub	sp, #12
 8008f58:	af00      	add	r7, sp, #0
 8008f5a:	4603      	mov	r3, r0
 8008f5c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RNG_IT(RNG_IT));

  /* Clear the selected RNG interrupt pending bit */
  RNG->SR = (uint8_t)~RNG_IT;
 8008f5e:	79fb      	ldrb	r3, [r7, #7]
 8008f60:	43db      	mvns	r3, r3
 8008f62:	b2da      	uxtb	r2, r3
 8008f64:	4b03      	ldr	r3, [pc, #12]	; (8008f74 <RNG_ClearITPendingBit+0x20>)
 8008f66:	605a      	str	r2, [r3, #4]
}
 8008f68:	bf00      	nop
 8008f6a:	370c      	adds	r7, #12
 8008f6c:	46bd      	mov	sp, r7
 8008f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f72:	4770      	bx	lr
 8008f74:	50060800 	.word	0x50060800

08008f78 <RTC_DeInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC registers are deinitialized
  *          - ERROR: RTC registers are not deinitialized
  */
ErrorStatus RTC_DeInit(void)
{
 8008f78:	b580      	push	{r7, lr}
 8008f7a:	b084      	sub	sp, #16
 8008f7c:	af00      	add	r7, sp, #0
  __IO uint32_t wutcounter = 0x00;
 8008f7e:	2300      	movs	r3, #0
 8008f80:	607b      	str	r3, [r7, #4]
  uint32_t wutwfstatus = 0x00;
 8008f82:	2300      	movs	r3, #0
 8008f84:	60bb      	str	r3, [r7, #8]
  ErrorStatus status = ERROR;
 8008f86:	2300      	movs	r3, #0
 8008f88:	73fb      	strb	r3, [r7, #15]
  
  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8008f8a:	4b36      	ldr	r3, [pc, #216]	; (8009064 <RTC_DeInit+0xec>)
 8008f8c:	22ca      	movs	r2, #202	; 0xca
 8008f8e:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 8008f90:	4b34      	ldr	r3, [pc, #208]	; (8009064 <RTC_DeInit+0xec>)
 8008f92:	2253      	movs	r2, #83	; 0x53
 8008f94:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode() == ERROR)
 8008f96:	f000 f8d3 	bl	8009140 <RTC_EnterInitMode>
 8008f9a:	4603      	mov	r3, r0
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d102      	bne.n	8008fa6 <RTC_DeInit+0x2e>
  {
    status = ERROR;
 8008fa0:	2300      	movs	r3, #0
 8008fa2:	73fb      	strb	r3, [r7, #15]
 8008fa4:	e055      	b.n	8009052 <RTC_DeInit+0xda>
  }  
  else
  {
    /* Reset TR, DR and CR registers */
    RTC->TR = (uint32_t)0x00000000;
 8008fa6:	4b2f      	ldr	r3, [pc, #188]	; (8009064 <RTC_DeInit+0xec>)
 8008fa8:	2200      	movs	r2, #0
 8008faa:	601a      	str	r2, [r3, #0]
    RTC->DR = (uint32_t)0x00002101;
 8008fac:	4b2d      	ldr	r3, [pc, #180]	; (8009064 <RTC_DeInit+0xec>)
 8008fae:	f242 1201 	movw	r2, #8449	; 0x2101
 8008fb2:	605a      	str	r2, [r3, #4]
    /* Reset All CR bits except CR[2:0] */
    RTC->CR &= (uint32_t)0x00000007;
 8008fb4:	4b2b      	ldr	r3, [pc, #172]	; (8009064 <RTC_DeInit+0xec>)
 8008fb6:	689b      	ldr	r3, [r3, #8]
 8008fb8:	4a2a      	ldr	r2, [pc, #168]	; (8009064 <RTC_DeInit+0xec>)
 8008fba:	f003 0307 	and.w	r3, r3, #7
 8008fbe:	6093      	str	r3, [r2, #8]
  
    /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
    do
    {
      wutwfstatus = RTC->ISR & RTC_ISR_WUTWF;
 8008fc0:	4b28      	ldr	r3, [pc, #160]	; (8009064 <RTC_DeInit+0xec>)
 8008fc2:	68db      	ldr	r3, [r3, #12]
 8008fc4:	f003 0304 	and.w	r3, r3, #4
 8008fc8:	60bb      	str	r3, [r7, #8]
      wutcounter++;  
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	3301      	adds	r3, #1
 8008fce:	607b      	str	r3, [r7, #4]
    } while((wutcounter != INITMODE_TIMEOUT) && (wutwfstatus == 0x00));
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008fd6:	d002      	beq.n	8008fde <RTC_DeInit+0x66>
 8008fd8:	68bb      	ldr	r3, [r7, #8]
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d0f0      	beq.n	8008fc0 <RTC_DeInit+0x48>
    
    if ((RTC->ISR & RTC_ISR_WUTWF) == RESET)
 8008fde:	4b21      	ldr	r3, [pc, #132]	; (8009064 <RTC_DeInit+0xec>)
 8008fe0:	68db      	ldr	r3, [r3, #12]
 8008fe2:	f003 0304 	and.w	r3, r3, #4
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d102      	bne.n	8008ff0 <RTC_DeInit+0x78>
    {
      status = ERROR;
 8008fea:	2300      	movs	r3, #0
 8008fec:	73fb      	strb	r3, [r7, #15]
 8008fee:	e030      	b.n	8009052 <RTC_DeInit+0xda>
    }
    else
    {
      /* Reset all RTC CR register bits */
      RTC->CR &= (uint32_t)0x00000000;
 8008ff0:	4b1c      	ldr	r3, [pc, #112]	; (8009064 <RTC_DeInit+0xec>)
 8008ff2:	689b      	ldr	r3, [r3, #8]
 8008ff4:	4b1b      	ldr	r3, [pc, #108]	; (8009064 <RTC_DeInit+0xec>)
 8008ff6:	2200      	movs	r2, #0
 8008ff8:	609a      	str	r2, [r3, #8]
      RTC->WUTR = (uint32_t)0x0000FFFF;
 8008ffa:	4b1a      	ldr	r3, [pc, #104]	; (8009064 <RTC_DeInit+0xec>)
 8008ffc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009000:	615a      	str	r2, [r3, #20]
      RTC->PRER = (uint32_t)0x007F00FF;
 8009002:	4b18      	ldr	r3, [pc, #96]	; (8009064 <RTC_DeInit+0xec>)
 8009004:	4a18      	ldr	r2, [pc, #96]	; (8009068 <RTC_DeInit+0xf0>)
 8009006:	611a      	str	r2, [r3, #16]
      RTC->CALIBR = (uint32_t)0x00000000;
 8009008:	4b16      	ldr	r3, [pc, #88]	; (8009064 <RTC_DeInit+0xec>)
 800900a:	2200      	movs	r2, #0
 800900c:	619a      	str	r2, [r3, #24]
      RTC->ALRMAR = (uint32_t)0x00000000;        
 800900e:	4b15      	ldr	r3, [pc, #84]	; (8009064 <RTC_DeInit+0xec>)
 8009010:	2200      	movs	r2, #0
 8009012:	61da      	str	r2, [r3, #28]
      RTC->ALRMBR = (uint32_t)0x00000000;
 8009014:	4b13      	ldr	r3, [pc, #76]	; (8009064 <RTC_DeInit+0xec>)
 8009016:	2200      	movs	r2, #0
 8009018:	621a      	str	r2, [r3, #32]
      RTC->SHIFTR = (uint32_t)0x00000000;
 800901a:	4b12      	ldr	r3, [pc, #72]	; (8009064 <RTC_DeInit+0xec>)
 800901c:	2200      	movs	r2, #0
 800901e:	62da      	str	r2, [r3, #44]	; 0x2c
      RTC->CALR = (uint32_t)0x00000000;
 8009020:	4b10      	ldr	r3, [pc, #64]	; (8009064 <RTC_DeInit+0xec>)
 8009022:	2200      	movs	r2, #0
 8009024:	63da      	str	r2, [r3, #60]	; 0x3c
      RTC->ALRMASSR = (uint32_t)0x00000000;
 8009026:	4b0f      	ldr	r3, [pc, #60]	; (8009064 <RTC_DeInit+0xec>)
 8009028:	2200      	movs	r2, #0
 800902a:	645a      	str	r2, [r3, #68]	; 0x44
      RTC->ALRMBSSR = (uint32_t)0x00000000;
 800902c:	4b0d      	ldr	r3, [pc, #52]	; (8009064 <RTC_DeInit+0xec>)
 800902e:	2200      	movs	r2, #0
 8009030:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Reset ISR register and exit initialization mode */
      RTC->ISR = (uint32_t)0x00000000;
 8009032:	4b0c      	ldr	r3, [pc, #48]	; (8009064 <RTC_DeInit+0xec>)
 8009034:	2200      	movs	r2, #0
 8009036:	60da      	str	r2, [r3, #12]
      
      /* Reset Tamper and alternate functions configuration register */
      RTC->TAFCR = 0x00000000;
 8009038:	4b0a      	ldr	r3, [pc, #40]	; (8009064 <RTC_DeInit+0xec>)
 800903a:	2200      	movs	r2, #0
 800903c:	641a      	str	r2, [r3, #64]	; 0x40
  
      if(RTC_WaitForSynchro() == ERROR)
 800903e:	f000 f8c9 	bl	80091d4 <RTC_WaitForSynchro>
 8009042:	4603      	mov	r3, r0
 8009044:	2b00      	cmp	r3, #0
 8009046:	d102      	bne.n	800904e <RTC_DeInit+0xd6>
      {
        status = ERROR;
 8009048:	2300      	movs	r3, #0
 800904a:	73fb      	strb	r3, [r7, #15]
 800904c:	e001      	b.n	8009052 <RTC_DeInit+0xda>
      }
      else
      {
        status = SUCCESS;      
 800904e:	2301      	movs	r3, #1
 8009050:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
  
  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF;  
 8009052:	4b04      	ldr	r3, [pc, #16]	; (8009064 <RTC_DeInit+0xec>)
 8009054:	22ff      	movs	r2, #255	; 0xff
 8009056:	625a      	str	r2, [r3, #36]	; 0x24
  
  return status;
 8009058:	7bfb      	ldrb	r3, [r7, #15]
}
 800905a:	4618      	mov	r0, r3
 800905c:	3710      	adds	r7, #16
 800905e:	46bd      	mov	sp, r7
 8009060:	bd80      	pop	{r7, pc}
 8009062:	bf00      	nop
 8009064:	40002800 	.word	0x40002800
 8009068:	007f00ff 	.word	0x007f00ff

0800906c <RTC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC registers are initialized
  *          - ERROR: RTC registers are not initialized  
  */
ErrorStatus RTC_Init(RTC_InitTypeDef* RTC_InitStruct)
{
 800906c:	b580      	push	{r7, lr}
 800906e:	b084      	sub	sp, #16
 8009070:	af00      	add	r7, sp, #0
 8009072:	6078      	str	r0, [r7, #4]
  ErrorStatus status = ERROR;
 8009074:	2300      	movs	r3, #0
 8009076:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RTC_HOUR_FORMAT(RTC_InitStruct->RTC_HourFormat));
  assert_param(IS_RTC_ASYNCH_PREDIV(RTC_InitStruct->RTC_AsynchPrediv));
  assert_param(IS_RTC_SYNCH_PREDIV(RTC_InitStruct->RTC_SynchPrediv));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8009078:	4b19      	ldr	r3, [pc, #100]	; (80090e0 <RTC_Init+0x74>)
 800907a:	22ca      	movs	r2, #202	; 0xca
 800907c:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 800907e:	4b18      	ldr	r3, [pc, #96]	; (80090e0 <RTC_Init+0x74>)
 8009080:	2253      	movs	r2, #83	; 0x53
 8009082:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode() == ERROR)
 8009084:	f000 f85c 	bl	8009140 <RTC_EnterInitMode>
 8009088:	4603      	mov	r3, r0
 800908a:	2b00      	cmp	r3, #0
 800908c:	d102      	bne.n	8009094 <RTC_Init+0x28>
  {
    status = ERROR;
 800908e:	2300      	movs	r3, #0
 8009090:	73fb      	strb	r3, [r7, #15]
 8009092:	e01c      	b.n	80090ce <RTC_Init+0x62>
  } 
  else
  {
    /* Clear RTC CR FMT Bit */
    RTC->CR &= ((uint32_t)~(RTC_CR_FMT));
 8009094:	4b12      	ldr	r3, [pc, #72]	; (80090e0 <RTC_Init+0x74>)
 8009096:	689b      	ldr	r3, [r3, #8]
 8009098:	4a11      	ldr	r2, [pc, #68]	; (80090e0 <RTC_Init+0x74>)
 800909a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800909e:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    RTC->CR |=  ((uint32_t)(RTC_InitStruct->RTC_HourFormat));
 80090a0:	4b0f      	ldr	r3, [pc, #60]	; (80090e0 <RTC_Init+0x74>)
 80090a2:	689a      	ldr	r2, [r3, #8]
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	490d      	ldr	r1, [pc, #52]	; (80090e0 <RTC_Init+0x74>)
 80090aa:	4313      	orrs	r3, r2
 80090ac:	608b      	str	r3, [r1, #8]
  
    /* Configure the RTC PRER */
    RTC->PRER = (uint32_t)(RTC_InitStruct->RTC_SynchPrediv);
 80090ae:	4a0c      	ldr	r2, [pc, #48]	; (80090e0 <RTC_Init+0x74>)
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	689b      	ldr	r3, [r3, #8]
 80090b4:	6113      	str	r3, [r2, #16]
    RTC->PRER |= (uint32_t)(RTC_InitStruct->RTC_AsynchPrediv << 16);
 80090b6:	4b0a      	ldr	r3, [pc, #40]	; (80090e0 <RTC_Init+0x74>)
 80090b8:	691a      	ldr	r2, [r3, #16]
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	685b      	ldr	r3, [r3, #4]
 80090be:	041b      	lsls	r3, r3, #16
 80090c0:	4907      	ldr	r1, [pc, #28]	; (80090e0 <RTC_Init+0x74>)
 80090c2:	4313      	orrs	r3, r2
 80090c4:	610b      	str	r3, [r1, #16]

    /* Exit Initialization mode */
    RTC_ExitInitMode();
 80090c6:	f000 f875 	bl	80091b4 <RTC_ExitInitMode>

    status = SUCCESS;    
 80090ca:	2301      	movs	r3, #1
 80090cc:	73fb      	strb	r3, [r7, #15]
  }
  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 80090ce:	4b04      	ldr	r3, [pc, #16]	; (80090e0 <RTC_Init+0x74>)
 80090d0:	22ff      	movs	r2, #255	; 0xff
 80090d2:	625a      	str	r2, [r3, #36]	; 0x24
  
  return status;
 80090d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80090d6:	4618      	mov	r0, r3
 80090d8:	3710      	adds	r7, #16
 80090da:	46bd      	mov	sp, r7
 80090dc:	bd80      	pop	{r7, pc}
 80090de:	bf00      	nop
 80090e0:	40002800 	.word	0x40002800

080090e4 <RTC_StructInit>:
  * @param  RTC_InitStruct: pointer to a RTC_InitTypeDef structure which will be 
  *         initialized.
  * @retval None
  */
void RTC_StructInit(RTC_InitTypeDef* RTC_InitStruct)
{
 80090e4:	b480      	push	{r7}
 80090e6:	b083      	sub	sp, #12
 80090e8:	af00      	add	r7, sp, #0
 80090ea:	6078      	str	r0, [r7, #4]
  /* Initialize the RTC_HourFormat member */
  RTC_InitStruct->RTC_HourFormat = RTC_HourFormat_24;
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	2200      	movs	r2, #0
 80090f0:	601a      	str	r2, [r3, #0]
    
  /* Initialize the RTC_AsynchPrediv member */
  RTC_InitStruct->RTC_AsynchPrediv = (uint32_t)0x7F;
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	227f      	movs	r2, #127	; 0x7f
 80090f6:	605a      	str	r2, [r3, #4]

  /* Initialize the RTC_SynchPrediv member */
  RTC_InitStruct->RTC_SynchPrediv = (uint32_t)0xFF; 
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	22ff      	movs	r2, #255	; 0xff
 80090fc:	609a      	str	r2, [r3, #8]
}
 80090fe:	bf00      	nop
 8009100:	370c      	adds	r7, #12
 8009102:	46bd      	mov	sp, r7
 8009104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009108:	4770      	bx	lr

0800910a <RTC_WriteProtectionCmd>:
  * @param  NewState: new state of the write protection.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RTC_WriteProtectionCmd(FunctionalState NewState)
{
 800910a:	b480      	push	{r7}
 800910c:	b083      	sub	sp, #12
 800910e:	af00      	add	r7, sp, #0
 8009110:	4603      	mov	r3, r0
 8009112:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
 8009114:	79fb      	ldrb	r3, [r7, #7]
 8009116:	2b00      	cmp	r3, #0
 8009118:	d003      	beq.n	8009122 <RTC_WriteProtectionCmd+0x18>
  {
    /* Enable the write protection for RTC registers */
    RTC->WPR = 0xFF;   
 800911a:	4b08      	ldr	r3, [pc, #32]	; (800913c <RTC_WriteProtectionCmd+0x32>)
 800911c:	22ff      	movs	r2, #255	; 0xff
 800911e:	625a      	str	r2, [r3, #36]	; 0x24
  {
    /* Disable the write protection for RTC registers */
    RTC->WPR = 0xCA;
    RTC->WPR = 0x53;    
  }
}
 8009120:	e005      	b.n	800912e <RTC_WriteProtectionCmd+0x24>
    RTC->WPR = 0xCA;
 8009122:	4b06      	ldr	r3, [pc, #24]	; (800913c <RTC_WriteProtectionCmd+0x32>)
 8009124:	22ca      	movs	r2, #202	; 0xca
 8009126:	625a      	str	r2, [r3, #36]	; 0x24
    RTC->WPR = 0x53;    
 8009128:	4b04      	ldr	r3, [pc, #16]	; (800913c <RTC_WriteProtectionCmd+0x32>)
 800912a:	2253      	movs	r2, #83	; 0x53
 800912c:	625a      	str	r2, [r3, #36]	; 0x24
}
 800912e:	bf00      	nop
 8009130:	370c      	adds	r7, #12
 8009132:	46bd      	mov	sp, r7
 8009134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009138:	4770      	bx	lr
 800913a:	bf00      	nop
 800913c:	40002800 	.word	0x40002800

08009140 <RTC_EnterInitMode>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC is in Init mode
  *          - ERROR: RTC is not in Init mode  
  */
ErrorStatus RTC_EnterInitMode(void)
{
 8009140:	b480      	push	{r7}
 8009142:	b085      	sub	sp, #20
 8009144:	af00      	add	r7, sp, #0
  __IO uint32_t initcounter = 0x00;
 8009146:	2300      	movs	r3, #0
 8009148:	607b      	str	r3, [r7, #4]
  ErrorStatus status = ERROR;
 800914a:	2300      	movs	r3, #0
 800914c:	73fb      	strb	r3, [r7, #15]
  uint32_t initstatus = 0x00;
 800914e:	2300      	movs	r3, #0
 8009150:	60bb      	str	r3, [r7, #8]
     
  /* Check if the Initialization mode is set */
  if ((RTC->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8009152:	4b17      	ldr	r3, [pc, #92]	; (80091b0 <RTC_EnterInitMode+0x70>)
 8009154:	68db      	ldr	r3, [r3, #12]
 8009156:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800915a:	2b00      	cmp	r3, #0
 800915c:	d11e      	bne.n	800919c <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    RTC->ISR = (uint32_t)RTC_INIT_MASK;
 800915e:	4b14      	ldr	r3, [pc, #80]	; (80091b0 <RTC_EnterInitMode+0x70>)
 8009160:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009164:	60da      	str	r2, [r3, #12]
    
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    do
    {
      initstatus = RTC->ISR & RTC_ISR_INITF;
 8009166:	4b12      	ldr	r3, [pc, #72]	; (80091b0 <RTC_EnterInitMode+0x70>)
 8009168:	68db      	ldr	r3, [r3, #12]
 800916a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800916e:	60bb      	str	r3, [r7, #8]
      initcounter++;  
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	3301      	adds	r3, #1
 8009174:	607b      	str	r3, [r7, #4]
    } while((initcounter != INITMODE_TIMEOUT) && (initstatus == 0x00));
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800917c:	d002      	beq.n	8009184 <RTC_EnterInitMode+0x44>
 800917e:	68bb      	ldr	r3, [r7, #8]
 8009180:	2b00      	cmp	r3, #0
 8009182:	d0f0      	beq.n	8009166 <RTC_EnterInitMode+0x26>
    
    if ((RTC->ISR & RTC_ISR_INITF) != RESET)
 8009184:	4b0a      	ldr	r3, [pc, #40]	; (80091b0 <RTC_EnterInitMode+0x70>)
 8009186:	68db      	ldr	r3, [r3, #12]
 8009188:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800918c:	2b00      	cmp	r3, #0
 800918e:	d002      	beq.n	8009196 <RTC_EnterInitMode+0x56>
    {
      status = SUCCESS;
 8009190:	2301      	movs	r3, #1
 8009192:	73fb      	strb	r3, [r7, #15]
 8009194:	e004      	b.n	80091a0 <RTC_EnterInitMode+0x60>
    }
    else
    {
      status = ERROR;
 8009196:	2300      	movs	r3, #0
 8009198:	73fb      	strb	r3, [r7, #15]
 800919a:	e001      	b.n	80091a0 <RTC_EnterInitMode+0x60>
    }        
  }
  else
  {
    status = SUCCESS;  
 800919c:	2301      	movs	r3, #1
 800919e:	73fb      	strb	r3, [r7, #15]
  } 
    
  return (status);  
 80091a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80091a2:	4618      	mov	r0, r3
 80091a4:	3714      	adds	r7, #20
 80091a6:	46bd      	mov	sp, r7
 80091a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ac:	4770      	bx	lr
 80091ae:	bf00      	nop
 80091b0:	40002800 	.word	0x40002800

080091b4 <RTC_ExitInitMode>:
  *         RTC_WriteProtectionCmd(DISABLE) before calling this function.      
  * @param  None
  * @retval None
  */
void RTC_ExitInitMode(void)
{ 
 80091b4:	b480      	push	{r7}
 80091b6:	af00      	add	r7, sp, #0
  /* Exit Initialization mode */
  RTC->ISR &= (uint32_t)~RTC_ISR_INIT;  
 80091b8:	4b05      	ldr	r3, [pc, #20]	; (80091d0 <RTC_ExitInitMode+0x1c>)
 80091ba:	68db      	ldr	r3, [r3, #12]
 80091bc:	4a04      	ldr	r2, [pc, #16]	; (80091d0 <RTC_ExitInitMode+0x1c>)
 80091be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80091c2:	60d3      	str	r3, [r2, #12]
}
 80091c4:	bf00      	nop
 80091c6:	46bd      	mov	sp, r7
 80091c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091cc:	4770      	bx	lr
 80091ce:	bf00      	nop
 80091d0:	40002800 	.word	0x40002800

080091d4 <RTC_WaitForSynchro>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC registers are synchronised
  *          - ERROR: RTC registers are not synchronised
  */
ErrorStatus RTC_WaitForSynchro(void)
{
 80091d4:	b480      	push	{r7}
 80091d6:	b085      	sub	sp, #20
 80091d8:	af00      	add	r7, sp, #0
  __IO uint32_t synchrocounter = 0;
 80091da:	2300      	movs	r3, #0
 80091dc:	607b      	str	r3, [r7, #4]
  ErrorStatus status = ERROR;
 80091de:	2300      	movs	r3, #0
 80091e0:	73fb      	strb	r3, [r7, #15]
  uint32_t synchrostatus = 0x00;
 80091e2:	2300      	movs	r3, #0
 80091e4:	60bb      	str	r3, [r7, #8]

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 80091e6:	4b18      	ldr	r3, [pc, #96]	; (8009248 <RTC_WaitForSynchro+0x74>)
 80091e8:	22ca      	movs	r2, #202	; 0xca
 80091ea:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 80091ec:	4b16      	ldr	r3, [pc, #88]	; (8009248 <RTC_WaitForSynchro+0x74>)
 80091ee:	2253      	movs	r2, #83	; 0x53
 80091f0:	625a      	str	r2, [r3, #36]	; 0x24
    
  /* Clear RSF flag */
  RTC->ISR &= (uint32_t)RTC_RSF_MASK;
 80091f2:	4b15      	ldr	r3, [pc, #84]	; (8009248 <RTC_WaitForSynchro+0x74>)
 80091f4:	68db      	ldr	r3, [r3, #12]
 80091f6:	4a14      	ldr	r2, [pc, #80]	; (8009248 <RTC_WaitForSynchro+0x74>)
 80091f8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80091fc:	60d3      	str	r3, [r2, #12]
    
  /* Wait the registers to be synchronised */
  do
  {
    synchrostatus = RTC->ISR & RTC_ISR_RSF;
 80091fe:	4b12      	ldr	r3, [pc, #72]	; (8009248 <RTC_WaitForSynchro+0x74>)
 8009200:	68db      	ldr	r3, [r3, #12]
 8009202:	f003 0320 	and.w	r3, r3, #32
 8009206:	60bb      	str	r3, [r7, #8]
    synchrocounter++;  
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	3301      	adds	r3, #1
 800920c:	607b      	str	r3, [r7, #4]
  } while((synchrocounter != SYNCHRO_TIMEOUT) && (synchrostatus == 0x00));
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009214:	d002      	beq.n	800921c <RTC_WaitForSynchro+0x48>
 8009216:	68bb      	ldr	r3, [r7, #8]
 8009218:	2b00      	cmp	r3, #0
 800921a:	d0f0      	beq.n	80091fe <RTC_WaitForSynchro+0x2a>
    
  if ((RTC->ISR & RTC_ISR_RSF) != RESET)
 800921c:	4b0a      	ldr	r3, [pc, #40]	; (8009248 <RTC_WaitForSynchro+0x74>)
 800921e:	68db      	ldr	r3, [r3, #12]
 8009220:	f003 0320 	and.w	r3, r3, #32
 8009224:	2b00      	cmp	r3, #0
 8009226:	d002      	beq.n	800922e <RTC_WaitForSynchro+0x5a>
  {
    status = SUCCESS;
 8009228:	2301      	movs	r3, #1
 800922a:	73fb      	strb	r3, [r7, #15]
 800922c:	e001      	b.n	8009232 <RTC_WaitForSynchro+0x5e>
  }
  else
  {
    status = ERROR;
 800922e:	2300      	movs	r3, #0
 8009230:	73fb      	strb	r3, [r7, #15]
  }        

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 8009232:	4b05      	ldr	r3, [pc, #20]	; (8009248 <RTC_WaitForSynchro+0x74>)
 8009234:	22ff      	movs	r2, #255	; 0xff
 8009236:	625a      	str	r2, [r3, #36]	; 0x24
    
  return (status); 
 8009238:	7bfb      	ldrb	r3, [r7, #15]
}
 800923a:	4618      	mov	r0, r3
 800923c:	3714      	adds	r7, #20
 800923e:	46bd      	mov	sp, r7
 8009240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009244:	4770      	bx	lr
 8009246:	bf00      	nop
 8009248:	40002800 	.word	0x40002800

0800924c <RTC_RefClockCmd>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC reference clock detection is enabled
  *          - ERROR: RTC reference clock detection is disabled  
  */
ErrorStatus RTC_RefClockCmd(FunctionalState NewState)
{ 
 800924c:	b580      	push	{r7, lr}
 800924e:	b084      	sub	sp, #16
 8009250:	af00      	add	r7, sp, #0
 8009252:	4603      	mov	r3, r0
 8009254:	71fb      	strb	r3, [r7, #7]
  ErrorStatus status = ERROR;
 8009256:	2300      	movs	r3, #0
 8009258:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 800925a:	4b15      	ldr	r3, [pc, #84]	; (80092b0 <RTC_RefClockCmd+0x64>)
 800925c:	22ca      	movs	r2, #202	; 0xca
 800925e:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 8009260:	4b13      	ldr	r3, [pc, #76]	; (80092b0 <RTC_RefClockCmd+0x64>)
 8009262:	2253      	movs	r2, #83	; 0x53
 8009264:	625a      	str	r2, [r3, #36]	; 0x24
    
  /* Set Initialization mode */
  if (RTC_EnterInitMode() == ERROR)
 8009266:	f7ff ff6b 	bl	8009140 <RTC_EnterInitMode>
 800926a:	4603      	mov	r3, r0
 800926c:	2b00      	cmp	r3, #0
 800926e:	d102      	bne.n	8009276 <RTC_RefClockCmd+0x2a>
  {
    status = ERROR;
 8009270:	2300      	movs	r3, #0
 8009272:	73fb      	strb	r3, [r7, #15]
 8009274:	e013      	b.n	800929e <RTC_RefClockCmd+0x52>
  } 
  else
  {  
    if (NewState != DISABLE)
 8009276:	79fb      	ldrb	r3, [r7, #7]
 8009278:	2b00      	cmp	r3, #0
 800927a:	d006      	beq.n	800928a <RTC_RefClockCmd+0x3e>
    {
      /* Enable the RTC reference clock detection */
      RTC->CR |= RTC_CR_REFCKON;   
 800927c:	4b0c      	ldr	r3, [pc, #48]	; (80092b0 <RTC_RefClockCmd+0x64>)
 800927e:	689b      	ldr	r3, [r3, #8]
 8009280:	4a0b      	ldr	r2, [pc, #44]	; (80092b0 <RTC_RefClockCmd+0x64>)
 8009282:	f043 0310 	orr.w	r3, r3, #16
 8009286:	6093      	str	r3, [r2, #8]
 8009288:	e005      	b.n	8009296 <RTC_RefClockCmd+0x4a>
    }
    else
    {
      /* Disable the RTC reference clock detection */
      RTC->CR &= ~RTC_CR_REFCKON;    
 800928a:	4b09      	ldr	r3, [pc, #36]	; (80092b0 <RTC_RefClockCmd+0x64>)
 800928c:	689b      	ldr	r3, [r3, #8]
 800928e:	4a08      	ldr	r2, [pc, #32]	; (80092b0 <RTC_RefClockCmd+0x64>)
 8009290:	f023 0310 	bic.w	r3, r3, #16
 8009294:	6093      	str	r3, [r2, #8]
    }
    /* Exit Initialization mode */
    RTC_ExitInitMode();
 8009296:	f7ff ff8d 	bl	80091b4 <RTC_ExitInitMode>
    
    status = SUCCESS;
 800929a:	2301      	movs	r3, #1
 800929c:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF;  
 800929e:	4b04      	ldr	r3, [pc, #16]	; (80092b0 <RTC_RefClockCmd+0x64>)
 80092a0:	22ff      	movs	r2, #255	; 0xff
 80092a2:	625a      	str	r2, [r3, #36]	; 0x24
  
  return status; 
 80092a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80092a6:	4618      	mov	r0, r3
 80092a8:	3710      	adds	r7, #16
 80092aa:	46bd      	mov	sp, r7
 80092ac:	bd80      	pop	{r7, pc}
 80092ae:	bf00      	nop
 80092b0:	40002800 	.word	0x40002800

080092b4 <RTC_BypassShadowCmd>:
  * @param  NewState: new state of the Bypass Shadow feature.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
*/
void RTC_BypassShadowCmd(FunctionalState NewState)
{
 80092b4:	b480      	push	{r7}
 80092b6:	b083      	sub	sp, #12
 80092b8:	af00      	add	r7, sp, #0
 80092ba:	4603      	mov	r3, r0
 80092bc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 80092be:	4b0f      	ldr	r3, [pc, #60]	; (80092fc <RTC_BypassShadowCmd+0x48>)
 80092c0:	22ca      	movs	r2, #202	; 0xca
 80092c2:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 80092c4:	4b0d      	ldr	r3, [pc, #52]	; (80092fc <RTC_BypassShadowCmd+0x48>)
 80092c6:	2253      	movs	r2, #83	; 0x53
 80092c8:	625a      	str	r2, [r3, #36]	; 0x24
  
  if (NewState != DISABLE)
 80092ca:	79fb      	ldrb	r3, [r7, #7]
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d006      	beq.n	80092de <RTC_BypassShadowCmd+0x2a>
  {
    /* Set the BYPSHAD bit */
    RTC->CR |= (uint8_t)RTC_CR_BYPSHAD;
 80092d0:	4b0a      	ldr	r3, [pc, #40]	; (80092fc <RTC_BypassShadowCmd+0x48>)
 80092d2:	689b      	ldr	r3, [r3, #8]
 80092d4:	4a09      	ldr	r2, [pc, #36]	; (80092fc <RTC_BypassShadowCmd+0x48>)
 80092d6:	f043 0320 	orr.w	r3, r3, #32
 80092da:	6093      	str	r3, [r2, #8]
 80092dc:	e005      	b.n	80092ea <RTC_BypassShadowCmd+0x36>
  }
  else
  {
    /* Reset the BYPSHAD bit */
    RTC->CR &= (uint8_t)~RTC_CR_BYPSHAD;
 80092de:	4b07      	ldr	r3, [pc, #28]	; (80092fc <RTC_BypassShadowCmd+0x48>)
 80092e0:	689b      	ldr	r3, [r3, #8]
 80092e2:	4a06      	ldr	r2, [pc, #24]	; (80092fc <RTC_BypassShadowCmd+0x48>)
 80092e4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80092e8:	6093      	str	r3, [r2, #8]
  }

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF;
 80092ea:	4b04      	ldr	r3, [pc, #16]	; (80092fc <RTC_BypassShadowCmd+0x48>)
 80092ec:	22ff      	movs	r2, #255	; 0xff
 80092ee:	625a      	str	r2, [r3, #36]	; 0x24
}
 80092f0:	bf00      	nop
 80092f2:	370c      	adds	r7, #12
 80092f4:	46bd      	mov	sp, r7
 80092f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092fa:	4770      	bx	lr
 80092fc:	40002800 	.word	0x40002800

08009300 <RTC_SetTime>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC Time register is configured
  *          - ERROR: RTC Time register is not configured
  */
ErrorStatus RTC_SetTime(uint32_t RTC_Format, RTC_TimeTypeDef* RTC_TimeStruct)
{
 8009300:	b590      	push	{r4, r7, lr}
 8009302:	b085      	sub	sp, #20
 8009304:	af00      	add	r7, sp, #0
 8009306:	6078      	str	r0, [r7, #4]
 8009308:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800930a:	2300      	movs	r3, #0
 800930c:	60fb      	str	r3, [r7, #12]
  ErrorStatus status = ERROR;
 800930e:	2300      	movs	r3, #0
 8009310:	72fb      	strb	r3, [r7, #11]
    
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(RTC_Format));
  
  if (RTC_Format == RTC_Format_BIN)
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	2b00      	cmp	r3, #0
 8009316:	d109      	bne.n	800932c <RTC_SetTime+0x2c>
  {
    if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8009318:	4b3d      	ldr	r3, [pc, #244]	; (8009410 <RTC_SetTime+0x110>)
 800931a:	689b      	ldr	r3, [r3, #8]
 800931c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009320:	2b00      	cmp	r3, #0
 8009322:	d114      	bne.n	800934e <RTC_SetTime+0x4e>
      assert_param(IS_RTC_HOUR12(RTC_TimeStruct->RTC_Hours));
      assert_param(IS_RTC_H12(RTC_TimeStruct->RTC_H12));
    } 
    else
    {
      RTC_TimeStruct->RTC_H12 = 0x00;
 8009324:	683b      	ldr	r3, [r7, #0]
 8009326:	2200      	movs	r2, #0
 8009328:	70da      	strb	r2, [r3, #3]
 800932a:	e010      	b.n	800934e <RTC_SetTime+0x4e>
    assert_param(IS_RTC_MINUTES(RTC_TimeStruct->RTC_Minutes));
    assert_param(IS_RTC_SECONDS(RTC_TimeStruct->RTC_Seconds));
  }
  else
  {
    if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800932c:	4b38      	ldr	r3, [pc, #224]	; (8009410 <RTC_SetTime+0x110>)
 800932e:	689b      	ldr	r3, [r3, #8]
 8009330:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009334:	2b00      	cmp	r3, #0
 8009336:	d007      	beq.n	8009348 <RTC_SetTime+0x48>
    {
      tmpreg = RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Hours);
 8009338:	683b      	ldr	r3, [r7, #0]
 800933a:	781b      	ldrb	r3, [r3, #0]
 800933c:	4618      	mov	r0, r3
 800933e:	f001 f8a6 	bl	800a48e <RTC_Bcd2ToByte>
 8009342:	4603      	mov	r3, r0
 8009344:	60fb      	str	r3, [r7, #12]
 8009346:	e002      	b.n	800934e <RTC_SetTime+0x4e>
      assert_param(IS_RTC_HOUR12(tmpreg));
      assert_param(IS_RTC_H12(RTC_TimeStruct->RTC_H12)); 
    } 
    else
    {
      RTC_TimeStruct->RTC_H12 = 0x00;
 8009348:	683b      	ldr	r3, [r7, #0]
 800934a:	2200      	movs	r2, #0
 800934c:	70da      	strb	r2, [r3, #3]
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Seconds)));
  }
  
  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	2b00      	cmp	r3, #0
 8009352:	d00f      	beq.n	8009374 <RTC_SetTime+0x74>
  {
    tmpreg = (((uint32_t)(RTC_TimeStruct->RTC_Hours) << 16) | \
 8009354:	683b      	ldr	r3, [r7, #0]
 8009356:	781b      	ldrb	r3, [r3, #0]
 8009358:	041a      	lsls	r2, r3, #16
             ((uint32_t)(RTC_TimeStruct->RTC_Minutes) << 8) | \
 800935a:	683b      	ldr	r3, [r7, #0]
 800935c:	785b      	ldrb	r3, [r3, #1]
 800935e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(RTC_TimeStruct->RTC_Hours) << 16) | \
 8009360:	4313      	orrs	r3, r2
             ((uint32_t)RTC_TimeStruct->RTC_Seconds) | \
 8009362:	683a      	ldr	r2, [r7, #0]
 8009364:	7892      	ldrb	r2, [r2, #2]
             ((uint32_t)(RTC_TimeStruct->RTC_Minutes) << 8) | \
 8009366:	431a      	orrs	r2, r3
             ((uint32_t)(RTC_TimeStruct->RTC_H12) << 16)); 
 8009368:	683b      	ldr	r3, [r7, #0]
 800936a:	78db      	ldrb	r3, [r3, #3]
 800936c:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(RTC_TimeStruct->RTC_Hours) << 16) | \
 800936e:	4313      	orrs	r3, r2
 8009370:	60fb      	str	r3, [r7, #12]
 8009372:	e01b      	b.n	80093ac <RTC_SetTime+0xac>
  }  
  else
  {
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Hours) << 16) | \
 8009374:	683b      	ldr	r3, [r7, #0]
 8009376:	781b      	ldrb	r3, [r3, #0]
 8009378:	4618      	mov	r0, r3
 800937a:	f001 f86b 	bl	800a454 <RTC_ByteToBcd2>
 800937e:	4603      	mov	r3, r0
 8009380:	041c      	lsls	r4, r3, #16
                   ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Minutes) << 8) | \
 8009382:	683b      	ldr	r3, [r7, #0]
 8009384:	785b      	ldrb	r3, [r3, #1]
 8009386:	4618      	mov	r0, r3
 8009388:	f001 f864 	bl	800a454 <RTC_ByteToBcd2>
 800938c:	4603      	mov	r3, r0
 800938e:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Hours) << 16) | \
 8009390:	431c      	orrs	r4, r3
                   ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Seconds)) | \
 8009392:	683b      	ldr	r3, [r7, #0]
 8009394:	789b      	ldrb	r3, [r3, #2]
 8009396:	4618      	mov	r0, r3
 8009398:	f001 f85c 	bl	800a454 <RTC_ByteToBcd2>
 800939c:	4603      	mov	r3, r0
                   ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Minutes) << 8) | \
 800939e:	ea44 0203 	orr.w	r2, r4, r3
                   (((uint32_t)RTC_TimeStruct->RTC_H12) << 16));
 80093a2:	683b      	ldr	r3, [r7, #0]
 80093a4:	78db      	ldrb	r3, [r3, #3]
 80093a6:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Hours) << 16) | \
 80093a8:	4313      	orrs	r3, r2
 80093aa:	60fb      	str	r3, [r7, #12]
  }  

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 80093ac:	4b18      	ldr	r3, [pc, #96]	; (8009410 <RTC_SetTime+0x110>)
 80093ae:	22ca      	movs	r2, #202	; 0xca
 80093b0:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 80093b2:	4b17      	ldr	r3, [pc, #92]	; (8009410 <RTC_SetTime+0x110>)
 80093b4:	2253      	movs	r2, #83	; 0x53
 80093b6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode() == ERROR)
 80093b8:	f7ff fec2 	bl	8009140 <RTC_EnterInitMode>
 80093bc:	4603      	mov	r3, r0
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d102      	bne.n	80093c8 <RTC_SetTime+0xc8>
  {
    status = ERROR;
 80093c2:	2300      	movs	r3, #0
 80093c4:	72fb      	strb	r3, [r7, #11]
 80093c6:	e01b      	b.n	8009400 <RTC_SetTime+0x100>
  } 
  else
  {
    /* Set the RTC_TR register */
    RTC->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80093c8:	4a11      	ldr	r2, [pc, #68]	; (8009410 <RTC_SetTime+0x110>)
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80093d0:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80093d4:	6013      	str	r3, [r2, #0]

    /* Exit Initialization mode */
    RTC_ExitInitMode(); 
 80093d6:	f7ff feed 	bl	80091b4 <RTC_ExitInitMode>

    /* If  RTC_CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((RTC->CR & RTC_CR_BYPSHAD) == RESET)
 80093da:	4b0d      	ldr	r3, [pc, #52]	; (8009410 <RTC_SetTime+0x110>)
 80093dc:	689b      	ldr	r3, [r3, #8]
 80093de:	f003 0320 	and.w	r3, r3, #32
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d10a      	bne.n	80093fc <RTC_SetTime+0xfc>
    {
    if(RTC_WaitForSynchro() == ERROR)
 80093e6:	f7ff fef5 	bl	80091d4 <RTC_WaitForSynchro>
 80093ea:	4603      	mov	r3, r0
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d102      	bne.n	80093f6 <RTC_SetTime+0xf6>
    {
      status = ERROR;
 80093f0:	2300      	movs	r3, #0
 80093f2:	72fb      	strb	r3, [r7, #11]
 80093f4:	e004      	b.n	8009400 <RTC_SetTime+0x100>
    }
    else
    {
      status = SUCCESS;
 80093f6:	2301      	movs	r3, #1
 80093f8:	72fb      	strb	r3, [r7, #11]
 80093fa:	e001      	b.n	8009400 <RTC_SetTime+0x100>
    }
  }
    else
    {
      status = SUCCESS;
 80093fc:	2301      	movs	r3, #1
 80093fe:	72fb      	strb	r3, [r7, #11]
    }
  }
  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 8009400:	4b03      	ldr	r3, [pc, #12]	; (8009410 <RTC_SetTime+0x110>)
 8009402:	22ff      	movs	r2, #255	; 0xff
 8009404:	625a      	str	r2, [r3, #36]	; 0x24
    
  return status;
 8009406:	7afb      	ldrb	r3, [r7, #11]
}
 8009408:	4618      	mov	r0, r3
 800940a:	3714      	adds	r7, #20
 800940c:	46bd      	mov	sp, r7
 800940e:	bd90      	pop	{r4, r7, pc}
 8009410:	40002800 	.word	0x40002800

08009414 <RTC_TimeStructInit>:
  * @param  RTC_TimeStruct: pointer to a RTC_TimeTypeDef structure which will be 
  *         initialized.
  * @retval None
  */
void RTC_TimeStructInit(RTC_TimeTypeDef* RTC_TimeStruct)
{
 8009414:	b480      	push	{r7}
 8009416:	b083      	sub	sp, #12
 8009418:	af00      	add	r7, sp, #0
 800941a:	6078      	str	r0, [r7, #4]
  /* Time = 00h:00min:00sec */
  RTC_TimeStruct->RTC_H12 = RTC_H12_AM;
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	2200      	movs	r2, #0
 8009420:	70da      	strb	r2, [r3, #3]
  RTC_TimeStruct->RTC_Hours = 0;
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	2200      	movs	r2, #0
 8009426:	701a      	strb	r2, [r3, #0]
  RTC_TimeStruct->RTC_Minutes = 0;
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	2200      	movs	r2, #0
 800942c:	705a      	strb	r2, [r3, #1]
  RTC_TimeStruct->RTC_Seconds = 0; 
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	2200      	movs	r2, #0
 8009432:	709a      	strb	r2, [r3, #2]
}
 8009434:	bf00      	nop
 8009436:	370c      	adds	r7, #12
 8009438:	46bd      	mov	sp, r7
 800943a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800943e:	4770      	bx	lr

08009440 <RTC_GetTime>:
  * @param  RTC_TimeStruct: pointer to a RTC_TimeTypeDef structure that will 
  *                        contain the returned current time configuration.     
  * @retval None
  */
void RTC_GetTime(uint32_t RTC_Format, RTC_TimeTypeDef* RTC_TimeStruct)
{
 8009440:	b580      	push	{r7, lr}
 8009442:	b084      	sub	sp, #16
 8009444:	af00      	add	r7, sp, #0
 8009446:	6078      	str	r0, [r7, #4]
 8009448:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800944a:	2300      	movs	r3, #0
 800944c:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(RTC_Format));

  /* Get the RTC_TR register */
  tmpreg = (uint32_t)(RTC->TR & RTC_TR_RESERVED_MASK); 
 800944e:	4b24      	ldr	r3, [pc, #144]	; (80094e0 <RTC_GetTime+0xa0>)
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8009456:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800945a:	60fb      	str	r3, [r7, #12]
  
  /* Fill the structure fields with the read parameters */
  RTC_TimeStruct->RTC_Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	0c1b      	lsrs	r3, r3, #16
 8009460:	b2db      	uxtb	r3, r3
 8009462:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009466:	b2da      	uxtb	r2, r3
 8009468:	683b      	ldr	r3, [r7, #0]
 800946a:	701a      	strb	r2, [r3, #0]
  RTC_TimeStruct->RTC_Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	0a1b      	lsrs	r3, r3, #8
 8009470:	b2db      	uxtb	r3, r3
 8009472:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009476:	b2da      	uxtb	r2, r3
 8009478:	683b      	ldr	r3, [r7, #0]
 800947a:	705a      	strb	r2, [r3, #1]
  RTC_TimeStruct->RTC_Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	b2db      	uxtb	r3, r3
 8009480:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009484:	b2da      	uxtb	r2, r3
 8009486:	683b      	ldr	r3, [r7, #0]
 8009488:	709a      	strb	r2, [r3, #2]
  RTC_TimeStruct->RTC_H12 = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16);  
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	0c1b      	lsrs	r3, r3, #16
 800948e:	b2db      	uxtb	r3, r3
 8009490:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009494:	b2da      	uxtb	r2, r3
 8009496:	683b      	ldr	r3, [r7, #0]
 8009498:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (RTC_Format == RTC_Format_BIN)
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	2b00      	cmp	r3, #0
 800949e:	d11a      	bne.n	80094d6 <RTC_GetTime+0x96>
  {
    /* Convert the structure parameters to Binary format */
    RTC_TimeStruct->RTC_Hours = (uint8_t)RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Hours);
 80094a0:	683b      	ldr	r3, [r7, #0]
 80094a2:	781b      	ldrb	r3, [r3, #0]
 80094a4:	4618      	mov	r0, r3
 80094a6:	f000 fff2 	bl	800a48e <RTC_Bcd2ToByte>
 80094aa:	4603      	mov	r3, r0
 80094ac:	461a      	mov	r2, r3
 80094ae:	683b      	ldr	r3, [r7, #0]
 80094b0:	701a      	strb	r2, [r3, #0]
    RTC_TimeStruct->RTC_Minutes = (uint8_t)RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Minutes);
 80094b2:	683b      	ldr	r3, [r7, #0]
 80094b4:	785b      	ldrb	r3, [r3, #1]
 80094b6:	4618      	mov	r0, r3
 80094b8:	f000 ffe9 	bl	800a48e <RTC_Bcd2ToByte>
 80094bc:	4603      	mov	r3, r0
 80094be:	461a      	mov	r2, r3
 80094c0:	683b      	ldr	r3, [r7, #0]
 80094c2:	705a      	strb	r2, [r3, #1]
    RTC_TimeStruct->RTC_Seconds = (uint8_t)RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Seconds);   
 80094c4:	683b      	ldr	r3, [r7, #0]
 80094c6:	789b      	ldrb	r3, [r3, #2]
 80094c8:	4618      	mov	r0, r3
 80094ca:	f000 ffe0 	bl	800a48e <RTC_Bcd2ToByte>
 80094ce:	4603      	mov	r3, r0
 80094d0:	461a      	mov	r2, r3
 80094d2:	683b      	ldr	r3, [r7, #0]
 80094d4:	709a      	strb	r2, [r3, #2]
  }
}
 80094d6:	bf00      	nop
 80094d8:	3710      	adds	r7, #16
 80094da:	46bd      	mov	sp, r7
 80094dc:	bd80      	pop	{r7, pc}
 80094de:	bf00      	nop
 80094e0:	40002800 	.word	0x40002800

080094e4 <RTC_GetSubSecond>:
  *         SSR register.
  * @param  None
  * @retval RTC current Calendar Sub seconds value.
  */
uint32_t RTC_GetSubSecond(void)
{
 80094e4:	b480      	push	{r7}
 80094e6:	b083      	sub	sp, #12
 80094e8:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0;
 80094ea:	2300      	movs	r3, #0
 80094ec:	607b      	str	r3, [r7, #4]
  
  /* Get sub seconds values from the correspondent registers*/
  tmpreg = (uint32_t)(RTC->SSR);
 80094ee:	4b06      	ldr	r3, [pc, #24]	; (8009508 <RTC_GetSubSecond+0x24>)
 80094f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094f2:	607b      	str	r3, [r7, #4]
  
  /* Read DR register to unfroze calendar registers */
  (void) (RTC->DR);
 80094f4:	4b04      	ldr	r3, [pc, #16]	; (8009508 <RTC_GetSubSecond+0x24>)
 80094f6:	685b      	ldr	r3, [r3, #4]
  
  return (tmpreg);
 80094f8:	687b      	ldr	r3, [r7, #4]
}
 80094fa:	4618      	mov	r0, r3
 80094fc:	370c      	adds	r7, #12
 80094fe:	46bd      	mov	sp, r7
 8009500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009504:	4770      	bx	lr
 8009506:	bf00      	nop
 8009508:	40002800 	.word	0x40002800

0800950c <RTC_SetDate>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC Date register is configured
  *          - ERROR: RTC Date register is not configured
  */
ErrorStatus RTC_SetDate(uint32_t RTC_Format, RTC_DateTypeDef* RTC_DateStruct)
{
 800950c:	b590      	push	{r4, r7, lr}
 800950e:	b085      	sub	sp, #20
 8009510:	af00      	add	r7, sp, #0
 8009512:	6078      	str	r0, [r7, #4]
 8009514:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8009516:	2300      	movs	r3, #0
 8009518:	60fb      	str	r3, [r7, #12]
  ErrorStatus status = ERROR;
 800951a:	2300      	movs	r3, #0
 800951c:	72fb      	strb	r3, [r7, #11]
  
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(RTC_Format));

  if ((RTC_Format == RTC_Format_BIN) && ((RTC_DateStruct->RTC_Month & 0x10) == 0x10))
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	2b00      	cmp	r3, #0
 8009522:	d10e      	bne.n	8009542 <RTC_SetDate+0x36>
 8009524:	683b      	ldr	r3, [r7, #0]
 8009526:	785b      	ldrb	r3, [r3, #1]
 8009528:	f003 0310 	and.w	r3, r3, #16
 800952c:	2b00      	cmp	r3, #0
 800952e:	d008      	beq.n	8009542 <RTC_SetDate+0x36>
  {
    RTC_DateStruct->RTC_Month = (RTC_DateStruct->RTC_Month & (uint32_t)~(0x10)) + 0x0A;
 8009530:	683b      	ldr	r3, [r7, #0]
 8009532:	785b      	ldrb	r3, [r3, #1]
 8009534:	f023 0310 	bic.w	r3, r3, #16
 8009538:	b2db      	uxtb	r3, r3
 800953a:	330a      	adds	r3, #10
 800953c:	b2da      	uxtb	r2, r3
 800953e:	683b      	ldr	r3, [r7, #0]
 8009540:	705a      	strb	r2, [r3, #1]
  }  
  if (RTC_Format == RTC_Format_BIN)
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	2b00      	cmp	r3, #0
 8009546:	d00d      	beq.n	8009564 <RTC_SetDate+0x58>
    assert_param(IS_RTC_DATE(RTC_DateStruct->RTC_Date));
  }
  else
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(RTC_DateStruct->RTC_Year)));
    tmpreg = RTC_Bcd2ToByte(RTC_DateStruct->RTC_Month);
 8009548:	683b      	ldr	r3, [r7, #0]
 800954a:	785b      	ldrb	r3, [r3, #1]
 800954c:	4618      	mov	r0, r3
 800954e:	f000 ff9e 	bl	800a48e <RTC_Bcd2ToByte>
 8009552:	4603      	mov	r3, r0
 8009554:	60fb      	str	r3, [r7, #12]
    assert_param(IS_RTC_MONTH(tmpreg));
    tmpreg = RTC_Bcd2ToByte(RTC_DateStruct->RTC_Date);
 8009556:	683b      	ldr	r3, [r7, #0]
 8009558:	789b      	ldrb	r3, [r3, #2]
 800955a:	4618      	mov	r0, r3
 800955c:	f000 ff97 	bl	800a48e <RTC_Bcd2ToByte>
 8009560:	4603      	mov	r3, r0
 8009562:	60fb      	str	r3, [r7, #12]
    assert_param(IS_RTC_DATE(tmpreg));
  }
  assert_param(IS_RTC_WEEKDAY(RTC_DateStruct->RTC_WeekDay));

  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	2b00      	cmp	r3, #0
 8009568:	d00f      	beq.n	800958a <RTC_SetDate+0x7e>
  {
    tmpreg = ((((uint32_t)RTC_DateStruct->RTC_Year) << 16) | \
 800956a:	683b      	ldr	r3, [r7, #0]
 800956c:	78db      	ldrb	r3, [r3, #3]
 800956e:	041a      	lsls	r2, r3, #16
              (((uint32_t)RTC_DateStruct->RTC_Month) << 8) | \
 8009570:	683b      	ldr	r3, [r7, #0]
 8009572:	785b      	ldrb	r3, [r3, #1]
 8009574:	021b      	lsls	r3, r3, #8
    tmpreg = ((((uint32_t)RTC_DateStruct->RTC_Year) << 16) | \
 8009576:	4313      	orrs	r3, r2
              ((uint32_t)RTC_DateStruct->RTC_Date) | \
 8009578:	683a      	ldr	r2, [r7, #0]
 800957a:	7892      	ldrb	r2, [r2, #2]
              (((uint32_t)RTC_DateStruct->RTC_Month) << 8) | \
 800957c:	431a      	orrs	r2, r3
              (((uint32_t)RTC_DateStruct->RTC_WeekDay) << 13)); 
 800957e:	683b      	ldr	r3, [r7, #0]
 8009580:	781b      	ldrb	r3, [r3, #0]
 8009582:	035b      	lsls	r3, r3, #13
    tmpreg = ((((uint32_t)RTC_DateStruct->RTC_Year) << 16) | \
 8009584:	4313      	orrs	r3, r2
 8009586:	60fb      	str	r3, [r7, #12]
 8009588:	e01b      	b.n	80095c2 <RTC_SetDate+0xb6>
  }  
  else
  {
    tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Year) << 16) | \
 800958a:	683b      	ldr	r3, [r7, #0]
 800958c:	78db      	ldrb	r3, [r3, #3]
 800958e:	4618      	mov	r0, r3
 8009590:	f000 ff60 	bl	800a454 <RTC_ByteToBcd2>
 8009594:	4603      	mov	r3, r0
 8009596:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Month) << 8) | \
 8009598:	683b      	ldr	r3, [r7, #0]
 800959a:	785b      	ldrb	r3, [r3, #1]
 800959c:	4618      	mov	r0, r3
 800959e:	f000 ff59 	bl	800a454 <RTC_ByteToBcd2>
 80095a2:	4603      	mov	r3, r0
 80095a4:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Year) << 16) | \
 80095a6:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Date)) | \
 80095a8:	683b      	ldr	r3, [r7, #0]
 80095aa:	789b      	ldrb	r3, [r3, #2]
 80095ac:	4618      	mov	r0, r3
 80095ae:	f000 ff51 	bl	800a454 <RTC_ByteToBcd2>
 80095b2:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Month) << 8) | \
 80095b4:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)RTC_DateStruct->RTC_WeekDay << 13));
 80095b8:	683b      	ldr	r3, [r7, #0]
 80095ba:	781b      	ldrb	r3, [r3, #0]
 80095bc:	035b      	lsls	r3, r3, #13
    tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Year) << 16) | \
 80095be:	4313      	orrs	r3, r2
 80095c0:	60fb      	str	r3, [r7, #12]
  }

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 80095c2:	4b19      	ldr	r3, [pc, #100]	; (8009628 <RTC_SetDate+0x11c>)
 80095c4:	22ca      	movs	r2, #202	; 0xca
 80095c6:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 80095c8:	4b17      	ldr	r3, [pc, #92]	; (8009628 <RTC_SetDate+0x11c>)
 80095ca:	2253      	movs	r2, #83	; 0x53
 80095cc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode() == ERROR)
 80095ce:	f7ff fdb7 	bl	8009140 <RTC_EnterInitMode>
 80095d2:	4603      	mov	r3, r0
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d102      	bne.n	80095de <RTC_SetDate+0xd2>
  {
    status = ERROR;
 80095d8:	2300      	movs	r3, #0
 80095da:	72fb      	strb	r3, [r7, #11]
 80095dc:	e01b      	b.n	8009616 <RTC_SetDate+0x10a>
  } 
  else
  {
    /* Set the RTC_DR register */
    RTC->DR = (uint32_t)(tmpreg & RTC_DR_RESERVED_MASK);
 80095de:	4a12      	ldr	r2, [pc, #72]	; (8009628 <RTC_SetDate+0x11c>)
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80095e6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80095ea:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    RTC_ExitInitMode(); 
 80095ec:	f7ff fde2 	bl	80091b4 <RTC_ExitInitMode>

    /* If  RTC_CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((RTC->CR & RTC_CR_BYPSHAD) == RESET)
 80095f0:	4b0d      	ldr	r3, [pc, #52]	; (8009628 <RTC_SetDate+0x11c>)
 80095f2:	689b      	ldr	r3, [r3, #8]
 80095f4:	f003 0320 	and.w	r3, r3, #32
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d10a      	bne.n	8009612 <RTC_SetDate+0x106>
    {
    if(RTC_WaitForSynchro() == ERROR)
 80095fc:	f7ff fdea 	bl	80091d4 <RTC_WaitForSynchro>
 8009600:	4603      	mov	r3, r0
 8009602:	2b00      	cmp	r3, #0
 8009604:	d102      	bne.n	800960c <RTC_SetDate+0x100>
    {
      status = ERROR;
 8009606:	2300      	movs	r3, #0
 8009608:	72fb      	strb	r3, [r7, #11]
 800960a:	e004      	b.n	8009616 <RTC_SetDate+0x10a>
    }
    else
    {
      status = SUCCESS;
 800960c:	2301      	movs	r3, #1
 800960e:	72fb      	strb	r3, [r7, #11]
 8009610:	e001      	b.n	8009616 <RTC_SetDate+0x10a>
    }
  }
    else
    {
      status = SUCCESS;
 8009612:	2301      	movs	r3, #1
 8009614:	72fb      	strb	r3, [r7, #11]
    }
  }
  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF;   
 8009616:	4b04      	ldr	r3, [pc, #16]	; (8009628 <RTC_SetDate+0x11c>)
 8009618:	22ff      	movs	r2, #255	; 0xff
 800961a:	625a      	str	r2, [r3, #36]	; 0x24
  
  return status;
 800961c:	7afb      	ldrb	r3, [r7, #11]
}
 800961e:	4618      	mov	r0, r3
 8009620:	3714      	adds	r7, #20
 8009622:	46bd      	mov	sp, r7
 8009624:	bd90      	pop	{r4, r7, pc}
 8009626:	bf00      	nop
 8009628:	40002800 	.word	0x40002800

0800962c <RTC_DateStructInit>:
  * @param  RTC_DateStruct: pointer to a RTC_DateTypeDef structure which will be 
  *         initialized.
  * @retval None
  */
void RTC_DateStructInit(RTC_DateTypeDef* RTC_DateStruct)
{
 800962c:	b480      	push	{r7}
 800962e:	b083      	sub	sp, #12
 8009630:	af00      	add	r7, sp, #0
 8009632:	6078      	str	r0, [r7, #4]
  /* Monday, January 01 xx00 */
  RTC_DateStruct->RTC_WeekDay = RTC_Weekday_Monday;
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	2201      	movs	r2, #1
 8009638:	701a      	strb	r2, [r3, #0]
  RTC_DateStruct->RTC_Date = 1;
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	2201      	movs	r2, #1
 800963e:	709a      	strb	r2, [r3, #2]
  RTC_DateStruct->RTC_Month = RTC_Month_January;
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	2201      	movs	r2, #1
 8009644:	705a      	strb	r2, [r3, #1]
  RTC_DateStruct->RTC_Year = 0;
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	2200      	movs	r2, #0
 800964a:	70da      	strb	r2, [r3, #3]
}
 800964c:	bf00      	nop
 800964e:	370c      	adds	r7, #12
 8009650:	46bd      	mov	sp, r7
 8009652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009656:	4770      	bx	lr

08009658 <RTC_GetDate>:
  * @param RTC_DateStruct: pointer to a RTC_DateTypeDef structure that will 
  *                        contain the returned current date configuration.     
  * @retval None
  */
void RTC_GetDate(uint32_t RTC_Format, RTC_DateTypeDef* RTC_DateStruct)
{
 8009658:	b580      	push	{r7, lr}
 800965a:	b084      	sub	sp, #16
 800965c:	af00      	add	r7, sp, #0
 800965e:	6078      	str	r0, [r7, #4]
 8009660:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8009662:	2300      	movs	r3, #0
 8009664:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(RTC_Format));
  
  /* Get the RTC_TR register */
  tmpreg = (uint32_t)(RTC->DR & RTC_DR_RESERVED_MASK); 
 8009666:	4b22      	ldr	r3, [pc, #136]	; (80096f0 <RTC_GetDate+0x98>)
 8009668:	685b      	ldr	r3, [r3, #4]
 800966a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800966e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8009672:	60fb      	str	r3, [r7, #12]

  /* Fill the structure fields with the read parameters */
  RTC_DateStruct->RTC_Year = (uint8_t)((tmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16);
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	0c1b      	lsrs	r3, r3, #16
 8009678:	b2da      	uxtb	r2, r3
 800967a:	683b      	ldr	r3, [r7, #0]
 800967c:	70da      	strb	r2, [r3, #3]
  RTC_DateStruct->RTC_Month = (uint8_t)((tmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	0a1b      	lsrs	r3, r3, #8
 8009682:	b2db      	uxtb	r3, r3
 8009684:	f003 031f 	and.w	r3, r3, #31
 8009688:	b2da      	uxtb	r2, r3
 800968a:	683b      	ldr	r3, [r7, #0]
 800968c:	705a      	strb	r2, [r3, #1]
  RTC_DateStruct->RTC_Date = (uint8_t)(tmpreg & (RTC_DR_DT | RTC_DR_DU));
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	b2db      	uxtb	r3, r3
 8009692:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009696:	b2da      	uxtb	r2, r3
 8009698:	683b      	ldr	r3, [r7, #0]
 800969a:	709a      	strb	r2, [r3, #2]
  RTC_DateStruct->RTC_WeekDay = (uint8_t)((tmpreg & (RTC_DR_WDU)) >> 13);
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	0b5b      	lsrs	r3, r3, #13
 80096a0:	b2db      	uxtb	r3, r3
 80096a2:	f003 0307 	and.w	r3, r3, #7
 80096a6:	b2da      	uxtb	r2, r3
 80096a8:	683b      	ldr	r3, [r7, #0]
 80096aa:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (RTC_Format == RTC_Format_BIN)
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d11a      	bne.n	80096e8 <RTC_GetDate+0x90>
  {
    /* Convert the structure parameters to Binary format */
    RTC_DateStruct->RTC_Year = (uint8_t)RTC_Bcd2ToByte(RTC_DateStruct->RTC_Year);
 80096b2:	683b      	ldr	r3, [r7, #0]
 80096b4:	78db      	ldrb	r3, [r3, #3]
 80096b6:	4618      	mov	r0, r3
 80096b8:	f000 fee9 	bl	800a48e <RTC_Bcd2ToByte>
 80096bc:	4603      	mov	r3, r0
 80096be:	461a      	mov	r2, r3
 80096c0:	683b      	ldr	r3, [r7, #0]
 80096c2:	70da      	strb	r2, [r3, #3]
    RTC_DateStruct->RTC_Month = (uint8_t)RTC_Bcd2ToByte(RTC_DateStruct->RTC_Month);
 80096c4:	683b      	ldr	r3, [r7, #0]
 80096c6:	785b      	ldrb	r3, [r3, #1]
 80096c8:	4618      	mov	r0, r3
 80096ca:	f000 fee0 	bl	800a48e <RTC_Bcd2ToByte>
 80096ce:	4603      	mov	r3, r0
 80096d0:	461a      	mov	r2, r3
 80096d2:	683b      	ldr	r3, [r7, #0]
 80096d4:	705a      	strb	r2, [r3, #1]
    RTC_DateStruct->RTC_Date = (uint8_t)RTC_Bcd2ToByte(RTC_DateStruct->RTC_Date);
 80096d6:	683b      	ldr	r3, [r7, #0]
 80096d8:	789b      	ldrb	r3, [r3, #2]
 80096da:	4618      	mov	r0, r3
 80096dc:	f000 fed7 	bl	800a48e <RTC_Bcd2ToByte>
 80096e0:	4603      	mov	r3, r0
 80096e2:	461a      	mov	r2, r3
 80096e4:	683b      	ldr	r3, [r7, #0]
 80096e6:	709a      	strb	r2, [r3, #2]
  }
}
 80096e8:	bf00      	nop
 80096ea:	3710      	adds	r7, #16
 80096ec:	46bd      	mov	sp, r7
 80096ee:	bd80      	pop	{r7, pc}
 80096f0:	40002800 	.word	0x40002800

080096f4 <RTC_SetAlarm>:
  * @param  RTC_AlarmStruct: pointer to a RTC_AlarmTypeDef structure that 
  *                          contains the alarm configuration parameters.     
  * @retval None
  */
void RTC_SetAlarm(uint32_t RTC_Format, uint32_t RTC_Alarm, RTC_AlarmTypeDef* RTC_AlarmStruct)
{
 80096f4:	b590      	push	{r4, r7, lr}
 80096f6:	b087      	sub	sp, #28
 80096f8:	af00      	add	r7, sp, #0
 80096fa:	60f8      	str	r0, [r7, #12]
 80096fc:	60b9      	str	r1, [r7, #8]
 80096fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8009700:	2300      	movs	r3, #0
 8009702:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(RTC_Format));
  assert_param(IS_RTC_ALARM(RTC_Alarm));
  assert_param(IS_ALARM_MASK(RTC_AlarmStruct->RTC_AlarmMask));
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(RTC_AlarmStruct->RTC_AlarmDateWeekDaySel));

  if (RTC_Format == RTC_Format_BIN)
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	2b00      	cmp	r3, #0
 8009708:	d109      	bne.n	800971e <RTC_SetAlarm+0x2a>
  {
    if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800970a:	4b47      	ldr	r3, [pc, #284]	; (8009828 <RTC_SetAlarm+0x134>)
 800970c:	689b      	ldr	r3, [r3, #8]
 800970e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009712:	2b00      	cmp	r3, #0
 8009714:	d127      	bne.n	8009766 <RTC_SetAlarm+0x72>
      assert_param(IS_RTC_HOUR12(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours));
      assert_param(IS_RTC_H12(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12));
    } 
    else
    {
      RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = 0x00;
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	2200      	movs	r2, #0
 800971a:	70da      	strb	r2, [r3, #3]
 800971c:	e023      	b.n	8009766 <RTC_SetAlarm+0x72>
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_AlarmStruct->RTC_AlarmDateWeekDay));
    }
  }
  else
  {
    if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800971e:	4b42      	ldr	r3, [pc, #264]	; (8009828 <RTC_SetAlarm+0x134>)
 8009720:	689b      	ldr	r3, [r3, #8]
 8009722:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009726:	2b00      	cmp	r3, #0
 8009728:	d007      	beq.n	800973a <RTC_SetAlarm+0x46>
    {
      tmpreg = RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours);
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	781b      	ldrb	r3, [r3, #0]
 800972e:	4618      	mov	r0, r3
 8009730:	f000 fead 	bl	800a48e <RTC_Bcd2ToByte>
 8009734:	4603      	mov	r3, r0
 8009736:	617b      	str	r3, [r7, #20]
 8009738:	e002      	b.n	8009740 <RTC_SetAlarm+0x4c>
      assert_param(IS_RTC_HOUR12(tmpreg));
      assert_param(IS_RTC_H12(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12));
    } 
    else
    {
      RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = 0x00;
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	2200      	movs	r2, #0
 800973e:	70da      	strb	r2, [r3, #3]
    }
    
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds)));
    
    if(RTC_AlarmStruct->RTC_AlarmDateWeekDaySel == RTC_AlarmDateWeekDaySel_Date)
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	689b      	ldr	r3, [r3, #8]
 8009744:	2b00      	cmp	r3, #0
 8009746:	d107      	bne.n	8009758 <RTC_SetAlarm+0x64>
    {
      tmpreg = RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmDateWeekDay);
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	7b1b      	ldrb	r3, [r3, #12]
 800974c:	4618      	mov	r0, r3
 800974e:	f000 fe9e 	bl	800a48e <RTC_Bcd2ToByte>
 8009752:	4603      	mov	r3, r0
 8009754:	617b      	str	r3, [r7, #20]
 8009756:	e006      	b.n	8009766 <RTC_SetAlarm+0x72>
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_DATE(tmpreg));    
    }
    else
    {
      tmpreg = RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmDateWeekDay);
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	7b1b      	ldrb	r3, [r3, #12]
 800975c:	4618      	mov	r0, r3
 800975e:	f000 fe96 	bl	800a48e <RTC_Bcd2ToByte>
 8009762:	4603      	mov	r3, r0
 8009764:	617b      	str	r3, [r7, #20]
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(tmpreg));      
    }    
  }

  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	2b00      	cmp	r3, #0
 800976a:	d019      	beq.n	80097a0 <RTC_SetAlarm+0xac>
  {
    tmpreg = (((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	781b      	ldrb	r3, [r3, #0]
 8009770:	041a      	lsls	r2, r3, #16
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	785b      	ldrb	r3, [r3, #1]
 8009776:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 8009778:	4313      	orrs	r3, r2
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds) | \
 800977a:	687a      	ldr	r2, [r7, #4]
 800977c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 800977e:	431a      	orrs	r2, r3
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	78db      	ldrb	r3, [r3, #3]
 8009784:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds) | \
 8009786:	431a      	orrs	r2, r3
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	7b1b      	ldrb	r3, [r3, #12]
 800978c:	061b      	lsls	r3, r3, #24
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
 800978e:	431a      	orrs	r2, r3
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmDateWeekDaySel) | \
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	689b      	ldr	r3, [r3, #8]
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
 8009794:	431a      	orrs	r2, r3
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmMask)); 
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	685b      	ldr	r3, [r3, #4]
    tmpreg = (((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 800979a:	4313      	orrs	r3, r2
 800979c:	617b      	str	r3, [r7, #20]
 800979e:	e02b      	b.n	80097f8 <RTC_SetAlarm+0x104>
  }  
  else
  {
    tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	781b      	ldrb	r3, [r3, #0]
 80097a4:	4618      	mov	r0, r3
 80097a6:	f000 fe55 	bl	800a454 <RTC_ByteToBcd2>
 80097aa:	4603      	mov	r3, r0
 80097ac:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	785b      	ldrb	r3, [r3, #1]
 80097b2:	4618      	mov	r0, r3
 80097b4:	f000 fe4e 	bl	800a454 <RTC_ByteToBcd2>
 80097b8:	4603      	mov	r3, r0
 80097ba:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 80097bc:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds)) | \
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	789b      	ldrb	r3, [r3, #2]
 80097c2:	4618      	mov	r0, r3
 80097c4:	f000 fe46 	bl	800a454 <RTC_ByteToBcd2>
 80097c8:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 80097ca:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	78db      	ldrb	r3, [r3, #3]
 80097d2:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds)) | \
 80097d4:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	7b1b      	ldrb	r3, [r3, #12]
 80097dc:	4618      	mov	r0, r3
 80097de:	f000 fe39 	bl	800a454 <RTC_ByteToBcd2>
 80097e2:	4603      	mov	r3, r0
 80097e4:	061b      	lsls	r3, r3, #24
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
 80097e6:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmDateWeekDaySel) | \
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	689b      	ldr	r3, [r3, #8]
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
 80097ee:	431a      	orrs	r2, r3
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmMask)); 
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	685b      	ldr	r3, [r3, #4]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 80097f4:	4313      	orrs	r3, r2
 80097f6:	617b      	str	r3, [r7, #20]
  } 

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 80097f8:	4b0b      	ldr	r3, [pc, #44]	; (8009828 <RTC_SetAlarm+0x134>)
 80097fa:	22ca      	movs	r2, #202	; 0xca
 80097fc:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 80097fe:	4b0a      	ldr	r3, [pc, #40]	; (8009828 <RTC_SetAlarm+0x134>)
 8009800:	2253      	movs	r2, #83	; 0x53
 8009802:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (RTC_Alarm == RTC_Alarm_A)
 8009804:	68bb      	ldr	r3, [r7, #8]
 8009806:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800980a:	d103      	bne.n	8009814 <RTC_SetAlarm+0x120>
  {
    RTC->ALRMAR = (uint32_t)tmpreg;
 800980c:	4a06      	ldr	r2, [pc, #24]	; (8009828 <RTC_SetAlarm+0x134>)
 800980e:	697b      	ldr	r3, [r7, #20]
 8009810:	61d3      	str	r3, [r2, #28]
 8009812:	e002      	b.n	800981a <RTC_SetAlarm+0x126>
  }
  else
  {
    RTC->ALRMBR = (uint32_t)tmpreg;
 8009814:	4a04      	ldr	r2, [pc, #16]	; (8009828 <RTC_SetAlarm+0x134>)
 8009816:	697b      	ldr	r3, [r7, #20]
 8009818:	6213      	str	r3, [r2, #32]
  }

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF;   
 800981a:	4b03      	ldr	r3, [pc, #12]	; (8009828 <RTC_SetAlarm+0x134>)
 800981c:	22ff      	movs	r2, #255	; 0xff
 800981e:	625a      	str	r2, [r3, #36]	; 0x24
}
 8009820:	bf00      	nop
 8009822:	371c      	adds	r7, #28
 8009824:	46bd      	mov	sp, r7
 8009826:	bd90      	pop	{r4, r7, pc}
 8009828:	40002800 	.word	0x40002800

0800982c <RTC_AlarmStructInit>:
  * @param  RTC_AlarmStruct: pointer to a @ref RTC_AlarmTypeDef structure which
  *         will be initialized.
  * @retval None
  */
void RTC_AlarmStructInit(RTC_AlarmTypeDef* RTC_AlarmStruct)
{
 800982c:	b480      	push	{r7}
 800982e:	b083      	sub	sp, #12
 8009830:	af00      	add	r7, sp, #0
 8009832:	6078      	str	r0, [r7, #4]
  /* Alarm Time Settings : Time = 00h:00mn:00sec */
  RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = RTC_H12_AM;
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	2200      	movs	r2, #0
 8009838:	70da      	strb	r2, [r3, #3]
  RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours = 0;
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	2200      	movs	r2, #0
 800983e:	701a      	strb	r2, [r3, #0]
  RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes = 0;
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	2200      	movs	r2, #0
 8009844:	705a      	strb	r2, [r3, #1]
  RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds = 0;
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	2200      	movs	r2, #0
 800984a:	709a      	strb	r2, [r3, #2]

  /* Alarm Date Settings : Date = 1st day of the month */
  RTC_AlarmStruct->RTC_AlarmDateWeekDaySel = RTC_AlarmDateWeekDaySel_Date;
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	2200      	movs	r2, #0
 8009850:	609a      	str	r2, [r3, #8]
  RTC_AlarmStruct->RTC_AlarmDateWeekDay = 1;
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	2201      	movs	r2, #1
 8009856:	731a      	strb	r2, [r3, #12]

  /* Alarm Masks Settings : Mask =  all fields are not masked */
  RTC_AlarmStruct->RTC_AlarmMask = RTC_AlarmMask_None;
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	2200      	movs	r2, #0
 800985c:	605a      	str	r2, [r3, #4]
}
 800985e:	bf00      	nop
 8009860:	370c      	adds	r7, #12
 8009862:	46bd      	mov	sp, r7
 8009864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009868:	4770      	bx	lr

0800986a <RTC_GetAlarm>:
  * @param  RTC_AlarmStruct: pointer to a RTC_AlarmTypeDef structure that will 
  *                          contains the output alarm configuration values.     
  * @retval None
  */
void RTC_GetAlarm(uint32_t RTC_Format, uint32_t RTC_Alarm, RTC_AlarmTypeDef* RTC_AlarmStruct)
{
 800986a:	b580      	push	{r7, lr}
 800986c:	b086      	sub	sp, #24
 800986e:	af00      	add	r7, sp, #0
 8009870:	60f8      	str	r0, [r7, #12]
 8009872:	60b9      	str	r1, [r7, #8]
 8009874:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8009876:	2300      	movs	r3, #0
 8009878:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(RTC_Format));
  assert_param(IS_RTC_ALARM(RTC_Alarm)); 

  /* Get the RTC_ALRMxR register */
  if (RTC_Alarm == RTC_Alarm_A)
 800987a:	68bb      	ldr	r3, [r7, #8]
 800987c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009880:	d103      	bne.n	800988a <RTC_GetAlarm+0x20>
  {
    tmpreg = (uint32_t)(RTC->ALRMAR);
 8009882:	4b31      	ldr	r3, [pc, #196]	; (8009948 <RTC_GetAlarm+0xde>)
 8009884:	69db      	ldr	r3, [r3, #28]
 8009886:	617b      	str	r3, [r7, #20]
 8009888:	e002      	b.n	8009890 <RTC_GetAlarm+0x26>
  }
  else
  {
    tmpreg = (uint32_t)(RTC->ALRMBR);
 800988a:	4b2f      	ldr	r3, [pc, #188]	; (8009948 <RTC_GetAlarm+0xde>)
 800988c:	6a1b      	ldr	r3, [r3, #32]
 800988e:	617b      	str	r3, [r7, #20]
  }

  /* Fill the structure with the read parameters */
  RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours = (uint32_t)((tmpreg & (RTC_ALRMAR_HT | \
 8009890:	697b      	ldr	r3, [r7, #20]
 8009892:	0c1b      	lsrs	r3, r3, #16
 8009894:	b2db      	uxtb	r3, r3
 8009896:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800989a:	b2da      	uxtb	r2, r3
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	701a      	strb	r2, [r3, #0]
                                                     RTC_ALRMAR_HU)) >> 16);
  RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes = (uint32_t)((tmpreg & (RTC_ALRMAR_MNT | \
 80098a0:	697b      	ldr	r3, [r7, #20]
 80098a2:	0a1b      	lsrs	r3, r3, #8
 80098a4:	b2db      	uxtb	r3, r3
 80098a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80098aa:	b2da      	uxtb	r2, r3
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	705a      	strb	r2, [r3, #1]
                                                     RTC_ALRMAR_MNU)) >> 8);
  RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds = (uint32_t)(tmpreg & (RTC_ALRMAR_ST | \
 80098b0:	697b      	ldr	r3, [r7, #20]
 80098b2:	b2db      	uxtb	r3, r3
 80098b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80098b8:	b2da      	uxtb	r2, r3
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	709a      	strb	r2, [r3, #2]
                                                     RTC_ALRMAR_SU));
  RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = (uint32_t)((tmpreg & RTC_ALRMAR_PM) >> 16);
 80098be:	697b      	ldr	r3, [r7, #20]
 80098c0:	0c1b      	lsrs	r3, r3, #16
 80098c2:	b2db      	uxtb	r3, r3
 80098c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80098c8:	b2da      	uxtb	r2, r3
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	70da      	strb	r2, [r3, #3]
  RTC_AlarmStruct->RTC_AlarmDateWeekDay = (uint32_t)((tmpreg & (RTC_ALRMAR_DT | RTC_ALRMAR_DU)) >> 24);
 80098ce:	697b      	ldr	r3, [r7, #20]
 80098d0:	0e1b      	lsrs	r3, r3, #24
 80098d2:	b2db      	uxtb	r3, r3
 80098d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80098d8:	b2da      	uxtb	r2, r3
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	731a      	strb	r2, [r3, #12]
  RTC_AlarmStruct->RTC_AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMAR_WDSEL);
 80098de:	697b      	ldr	r3, [r7, #20]
 80098e0:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	609a      	str	r2, [r3, #8]
  RTC_AlarmStruct->RTC_AlarmMask = (uint32_t)(tmpreg & RTC_AlarmMask_All);
 80098e8:	697b      	ldr	r3, [r7, #20]
 80098ea:	f003 3280 	and.w	r2, r3, #2155905152	; 0x80808080
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	605a      	str	r2, [r3, #4]

  if (RTC_Format == RTC_Format_BIN)
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d123      	bne.n	8009940 <RTC_GetAlarm+0xd6>
  {
    RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours = RTC_Bcd2ToByte(RTC_AlarmStruct-> \
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	781b      	ldrb	r3, [r3, #0]
 80098fc:	4618      	mov	r0, r3
 80098fe:	f000 fdc6 	bl	800a48e <RTC_Bcd2ToByte>
 8009902:	4603      	mov	r3, r0
 8009904:	461a      	mov	r2, r3
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	701a      	strb	r2, [r3, #0]
                                                        RTC_AlarmTime.RTC_Hours);
    RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes = RTC_Bcd2ToByte(RTC_AlarmStruct-> \
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	785b      	ldrb	r3, [r3, #1]
 800990e:	4618      	mov	r0, r3
 8009910:	f000 fdbd 	bl	800a48e <RTC_Bcd2ToByte>
 8009914:	4603      	mov	r3, r0
 8009916:	461a      	mov	r2, r3
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	705a      	strb	r2, [r3, #1]
                                                        RTC_AlarmTime.RTC_Minutes);
    RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds = RTC_Bcd2ToByte(RTC_AlarmStruct-> \
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	789b      	ldrb	r3, [r3, #2]
 8009920:	4618      	mov	r0, r3
 8009922:	f000 fdb4 	bl	800a48e <RTC_Bcd2ToByte>
 8009926:	4603      	mov	r3, r0
 8009928:	461a      	mov	r2, r3
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	709a      	strb	r2, [r3, #2]
                                                        RTC_AlarmTime.RTC_Seconds);
    RTC_AlarmStruct->RTC_AlarmDateWeekDay = RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmDateWeekDay);
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	7b1b      	ldrb	r3, [r3, #12]
 8009932:	4618      	mov	r0, r3
 8009934:	f000 fdab 	bl	800a48e <RTC_Bcd2ToByte>
 8009938:	4603      	mov	r3, r0
 800993a:	461a      	mov	r2, r3
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	731a      	strb	r2, [r3, #12]
  }  
}
 8009940:	bf00      	nop
 8009942:	3718      	adds	r7, #24
 8009944:	46bd      	mov	sp, r7
 8009946:	bd80      	pop	{r7, pc}
 8009948:	40002800 	.word	0x40002800

0800994c <RTC_AlarmCmd>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC Alarm is enabled/disabled
  *          - ERROR: RTC Alarm is not enabled/disabled  
  */
ErrorStatus RTC_AlarmCmd(uint32_t RTC_Alarm, FunctionalState NewState)
{
 800994c:	b480      	push	{r7}
 800994e:	b087      	sub	sp, #28
 8009950:	af00      	add	r7, sp, #0
 8009952:	6078      	str	r0, [r7, #4]
 8009954:	460b      	mov	r3, r1
 8009956:	70fb      	strb	r3, [r7, #3]
  __IO uint32_t alarmcounter = 0x00;
 8009958:	2300      	movs	r3, #0
 800995a:	60fb      	str	r3, [r7, #12]
  uint32_t alarmstatus = 0x00;
 800995c:	2300      	movs	r3, #0
 800995e:	613b      	str	r3, [r7, #16]
  ErrorStatus status = ERROR;
 8009960:	2300      	movs	r3, #0
 8009962:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_RTC_CMD_ALARM(RTC_Alarm));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8009964:	4b1f      	ldr	r3, [pc, #124]	; (80099e4 <RTC_AlarmCmd+0x98>)
 8009966:	22ca      	movs	r2, #202	; 0xca
 8009968:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 800996a:	4b1e      	ldr	r3, [pc, #120]	; (80099e4 <RTC_AlarmCmd+0x98>)
 800996c:	2253      	movs	r2, #83	; 0x53
 800996e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm state */
  if (NewState != DISABLE)
 8009970:	78fb      	ldrb	r3, [r7, #3]
 8009972:	2b00      	cmp	r3, #0
 8009974:	d008      	beq.n	8009988 <RTC_AlarmCmd+0x3c>
  {
    RTC->CR |= (uint32_t)RTC_Alarm;
 8009976:	4b1b      	ldr	r3, [pc, #108]	; (80099e4 <RTC_AlarmCmd+0x98>)
 8009978:	689a      	ldr	r2, [r3, #8]
 800997a:	491a      	ldr	r1, [pc, #104]	; (80099e4 <RTC_AlarmCmd+0x98>)
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	4313      	orrs	r3, r2
 8009980:	608b      	str	r3, [r1, #8]

    status = SUCCESS;    
 8009982:	2301      	movs	r3, #1
 8009984:	75fb      	strb	r3, [r7, #23]
 8009986:	e022      	b.n	80099ce <RTC_AlarmCmd+0x82>
  }
  else
  { 
    /* Disable the Alarm in RTC_CR register */
    RTC->CR &= (uint32_t)~RTC_Alarm;
 8009988:	4b16      	ldr	r3, [pc, #88]	; (80099e4 <RTC_AlarmCmd+0x98>)
 800998a:	689a      	ldr	r2, [r3, #8]
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	43db      	mvns	r3, r3
 8009990:	4914      	ldr	r1, [pc, #80]	; (80099e4 <RTC_AlarmCmd+0x98>)
 8009992:	4013      	ands	r3, r2
 8009994:	608b      	str	r3, [r1, #8]
   
    /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
    do
    {
      alarmstatus = RTC->ISR & (RTC_Alarm >> 8);
 8009996:	4b13      	ldr	r3, [pc, #76]	; (80099e4 <RTC_AlarmCmd+0x98>)
 8009998:	68da      	ldr	r2, [r3, #12]
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	0a1b      	lsrs	r3, r3, #8
 800999e:	4013      	ands	r3, r2
 80099a0:	613b      	str	r3, [r7, #16]
      alarmcounter++;  
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	3301      	adds	r3, #1
 80099a6:	60fb      	str	r3, [r7, #12]
    } while((alarmcounter != INITMODE_TIMEOUT) && (alarmstatus == 0x00));
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80099ae:	d002      	beq.n	80099b6 <RTC_AlarmCmd+0x6a>
 80099b0:	693b      	ldr	r3, [r7, #16]
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d0ef      	beq.n	8009996 <RTC_AlarmCmd+0x4a>
    
    if ((RTC->ISR & (RTC_Alarm >> 8)) == RESET)
 80099b6:	4b0b      	ldr	r3, [pc, #44]	; (80099e4 <RTC_AlarmCmd+0x98>)
 80099b8:	68da      	ldr	r2, [r3, #12]
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	0a1b      	lsrs	r3, r3, #8
 80099be:	4013      	ands	r3, r2
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d102      	bne.n	80099ca <RTC_AlarmCmd+0x7e>
    {
      status = ERROR;
 80099c4:	2300      	movs	r3, #0
 80099c6:	75fb      	strb	r3, [r7, #23]
 80099c8:	e001      	b.n	80099ce <RTC_AlarmCmd+0x82>
    } 
    else
    {
      status = SUCCESS;
 80099ca:	2301      	movs	r3, #1
 80099cc:	75fb      	strb	r3, [r7, #23]
    }        
  } 

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 80099ce:	4b05      	ldr	r3, [pc, #20]	; (80099e4 <RTC_AlarmCmd+0x98>)
 80099d0:	22ff      	movs	r2, #255	; 0xff
 80099d2:	625a      	str	r2, [r3, #36]	; 0x24
  
  return status;
 80099d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80099d6:	4618      	mov	r0, r3
 80099d8:	371c      	adds	r7, #28
 80099da:	46bd      	mov	sp, r7
 80099dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099e0:	4770      	bx	lr
 80099e2:	bf00      	nop
 80099e4:	40002800 	.word	0x40002800

080099e8 <RTC_AlarmSubSecondConfig>:
  *     @arg RTC_AlarmSubSecondMask_None   : SS[14:0] are compared and must match
  *                                          to activate alarm
  * @retval None
  */
void RTC_AlarmSubSecondConfig(uint32_t RTC_Alarm, uint32_t RTC_AlarmSubSecondValue, uint32_t RTC_AlarmSubSecondMask)
{
 80099e8:	b480      	push	{r7}
 80099ea:	b087      	sub	sp, #28
 80099ec:	af00      	add	r7, sp, #0
 80099ee:	60f8      	str	r0, [r7, #12]
 80099f0:	60b9      	str	r1, [r7, #8]
 80099f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 80099f4:	2300      	movs	r3, #0
 80099f6:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM(RTC_Alarm));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(RTC_AlarmSubSecondValue));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(RTC_AlarmSubSecondMask));
  
  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 80099f8:	4b0e      	ldr	r3, [pc, #56]	; (8009a34 <RTC_AlarmSubSecondConfig+0x4c>)
 80099fa:	22ca      	movs	r2, #202	; 0xca
 80099fc:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 80099fe:	4b0d      	ldr	r3, [pc, #52]	; (8009a34 <RTC_AlarmSubSecondConfig+0x4c>)
 8009a00:	2253      	movs	r2, #83	; 0x53
 8009a02:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* Configure the Alarm A or Alarm B Sub Second registers */
  tmpreg = (uint32_t) (uint32_t)(RTC_AlarmSubSecondValue) | (uint32_t)(RTC_AlarmSubSecondMask);
 8009a04:	68ba      	ldr	r2, [r7, #8]
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	4313      	orrs	r3, r2
 8009a0a:	617b      	str	r3, [r7, #20]
  
  if (RTC_Alarm == RTC_Alarm_A)
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009a12:	d103      	bne.n	8009a1c <RTC_AlarmSubSecondConfig+0x34>
  {
    /* Configure the Alarm A Sub Second register */
    RTC->ALRMASSR = tmpreg;
 8009a14:	4a07      	ldr	r2, [pc, #28]	; (8009a34 <RTC_AlarmSubSecondConfig+0x4c>)
 8009a16:	697b      	ldr	r3, [r7, #20]
 8009a18:	6453      	str	r3, [r2, #68]	; 0x44
 8009a1a:	e002      	b.n	8009a22 <RTC_AlarmSubSecondConfig+0x3a>
  }
  else
  {
    /* Configure the Alarm B Sub Second register */
    RTC->ALRMBSSR = tmpreg;
 8009a1c:	4a05      	ldr	r2, [pc, #20]	; (8009a34 <RTC_AlarmSubSecondConfig+0x4c>)
 8009a1e:	697b      	ldr	r3, [r7, #20]
 8009a20:	6493      	str	r3, [r2, #72]	; 0x48
  }

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF;
 8009a22:	4b04      	ldr	r3, [pc, #16]	; (8009a34 <RTC_AlarmSubSecondConfig+0x4c>)
 8009a24:	22ff      	movs	r2, #255	; 0xff
 8009a26:	625a      	str	r2, [r3, #36]	; 0x24

}
 8009a28:	bf00      	nop
 8009a2a:	371c      	adds	r7, #28
 8009a2c:	46bd      	mov	sp, r7
 8009a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a32:	4770      	bx	lr
 8009a34:	40002800 	.word	0x40002800

08009a38 <RTC_GetAlarmSubSecond>:
  *     @arg RTC_Alarm_B: to select Alarm B
  * @param  None
  * @retval RTC Alarm Sub seconds value.
  */
uint32_t RTC_GetAlarmSubSecond(uint32_t RTC_Alarm)
{
 8009a38:	b480      	push	{r7}
 8009a3a:	b085      	sub	sp, #20
 8009a3c:	af00      	add	r7, sp, #0
 8009a3e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8009a40:	2300      	movs	r3, #0
 8009a42:	60fb      	str	r3, [r7, #12]
  
  /* Get the RTC_ALRMxR register */
  if (RTC_Alarm == RTC_Alarm_A)
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009a4a:	d105      	bne.n	8009a58 <RTC_GetAlarmSubSecond+0x20>
  {
    tmpreg = (uint32_t)((RTC->ALRMASSR) & RTC_ALRMASSR_SS);
 8009a4c:	4b08      	ldr	r3, [pc, #32]	; (8009a70 <RTC_GetAlarmSubSecond+0x38>)
 8009a4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a50:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8009a54:	60fb      	str	r3, [r7, #12]
 8009a56:	e004      	b.n	8009a62 <RTC_GetAlarmSubSecond+0x2a>
  }
  else
  {
    tmpreg = (uint32_t)((RTC->ALRMBSSR) & RTC_ALRMBSSR_SS);
 8009a58:	4b05      	ldr	r3, [pc, #20]	; (8009a70 <RTC_GetAlarmSubSecond+0x38>)
 8009a5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009a5c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8009a60:	60fb      	str	r3, [r7, #12]
  } 
  
  return (tmpreg);
 8009a62:	68fb      	ldr	r3, [r7, #12]
}
 8009a64:	4618      	mov	r0, r3
 8009a66:	3714      	adds	r7, #20
 8009a68:	46bd      	mov	sp, r7
 8009a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a6e:	4770      	bx	lr
 8009a70:	40002800 	.word	0x40002800

08009a74 <RTC_WakeUpClockConfig>:
  *            @arg RTC_WakeUpClock_CK_SPRE_16bits: RTC Wakeup Counter Clock = CK_SPRE
  *            @arg RTC_WakeUpClock_CK_SPRE_17bits: RTC Wakeup Counter Clock = CK_SPRE
  * @retval None
  */
void RTC_WakeUpClockConfig(uint32_t RTC_WakeUpClock)
{
 8009a74:	b480      	push	{r7}
 8009a76:	b083      	sub	sp, #12
 8009a78:	af00      	add	r7, sp, #0
 8009a7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(RTC_WakeUpClock));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8009a7c:	4b0d      	ldr	r3, [pc, #52]	; (8009ab4 <RTC_WakeUpClockConfig+0x40>)
 8009a7e:	22ca      	movs	r2, #202	; 0xca
 8009a80:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 8009a82:	4b0c      	ldr	r3, [pc, #48]	; (8009ab4 <RTC_WakeUpClockConfig+0x40>)
 8009a84:	2253      	movs	r2, #83	; 0x53
 8009a86:	625a      	str	r2, [r3, #36]	; 0x24

  /* Clear the Wakeup Timer clock source bits in CR register */
  RTC->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8009a88:	4b0a      	ldr	r3, [pc, #40]	; (8009ab4 <RTC_WakeUpClockConfig+0x40>)
 8009a8a:	689b      	ldr	r3, [r3, #8]
 8009a8c:	4a09      	ldr	r2, [pc, #36]	; (8009ab4 <RTC_WakeUpClockConfig+0x40>)
 8009a8e:	f023 0307 	bic.w	r3, r3, #7
 8009a92:	6093      	str	r3, [r2, #8]

  /* Configure the clock source */
  RTC->CR |= (uint32_t)RTC_WakeUpClock;
 8009a94:	4b07      	ldr	r3, [pc, #28]	; (8009ab4 <RTC_WakeUpClockConfig+0x40>)
 8009a96:	689a      	ldr	r2, [r3, #8]
 8009a98:	4906      	ldr	r1, [pc, #24]	; (8009ab4 <RTC_WakeUpClockConfig+0x40>)
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	4313      	orrs	r3, r2
 8009a9e:	608b      	str	r3, [r1, #8]
  
  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 8009aa0:	4b04      	ldr	r3, [pc, #16]	; (8009ab4 <RTC_WakeUpClockConfig+0x40>)
 8009aa2:	22ff      	movs	r2, #255	; 0xff
 8009aa4:	625a      	str	r2, [r3, #36]	; 0x24
}
 8009aa6:	bf00      	nop
 8009aa8:	370c      	adds	r7, #12
 8009aaa:	46bd      	mov	sp, r7
 8009aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ab0:	4770      	bx	lr
 8009ab2:	bf00      	nop
 8009ab4:	40002800 	.word	0x40002800

08009ab8 <RTC_SetWakeUpCounter>:
  * @param  RTC_WakeUpCounter: specifies the WakeUp counter.
  *          This parameter can be a value from 0x0000 to 0xFFFF. 
  * @retval None
  */
void RTC_SetWakeUpCounter(uint32_t RTC_WakeUpCounter)
{
 8009ab8:	b480      	push	{r7}
 8009aba:	b083      	sub	sp, #12
 8009abc:	af00      	add	r7, sp, #0
 8009abe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_COUNTER(RTC_WakeUpCounter));
  
  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8009ac0:	4b08      	ldr	r3, [pc, #32]	; (8009ae4 <RTC_SetWakeUpCounter+0x2c>)
 8009ac2:	22ca      	movs	r2, #202	; 0xca
 8009ac4:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 8009ac6:	4b07      	ldr	r3, [pc, #28]	; (8009ae4 <RTC_SetWakeUpCounter+0x2c>)
 8009ac8:	2253      	movs	r2, #83	; 0x53
 8009aca:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* Configure the Wakeup Timer counter */
  RTC->WUTR = (uint32_t)RTC_WakeUpCounter;
 8009acc:	4a05      	ldr	r2, [pc, #20]	; (8009ae4 <RTC_SetWakeUpCounter+0x2c>)
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	6153      	str	r3, [r2, #20]
  
  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 8009ad2:	4b04      	ldr	r3, [pc, #16]	; (8009ae4 <RTC_SetWakeUpCounter+0x2c>)
 8009ad4:	22ff      	movs	r2, #255	; 0xff
 8009ad6:	625a      	str	r2, [r3, #36]	; 0x24
}
 8009ad8:	bf00      	nop
 8009ada:	370c      	adds	r7, #12
 8009adc:	46bd      	mov	sp, r7
 8009ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ae2:	4770      	bx	lr
 8009ae4:	40002800 	.word	0x40002800

08009ae8 <RTC_GetWakeUpCounter>:
  * @brief  Returns the RTC WakeUp timer counter value.
  * @param  None
  * @retval The RTC WakeUp Counter value.
  */
uint32_t RTC_GetWakeUpCounter(void)
{
 8009ae8:	b480      	push	{r7}
 8009aea:	af00      	add	r7, sp, #0
  /* Get the counter value */
  return ((uint32_t)(RTC->WUTR & RTC_WUTR_WUT));
 8009aec:	4b03      	ldr	r3, [pc, #12]	; (8009afc <RTC_GetWakeUpCounter+0x14>)
 8009aee:	695b      	ldr	r3, [r3, #20]
 8009af0:	b29b      	uxth	r3, r3
}
 8009af2:	4618      	mov	r0, r3
 8009af4:	46bd      	mov	sp, r7
 8009af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009afa:	4770      	bx	lr
 8009afc:	40002800 	.word	0x40002800

08009b00 <RTC_WakeUpCmd>:
  * @param  NewState: new state of the WakeUp timer.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
ErrorStatus RTC_WakeUpCmd(FunctionalState NewState)
{
 8009b00:	b480      	push	{r7}
 8009b02:	b087      	sub	sp, #28
 8009b04:	af00      	add	r7, sp, #0
 8009b06:	4603      	mov	r3, r0
 8009b08:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t wutcounter = 0x00;
 8009b0a:	2300      	movs	r3, #0
 8009b0c:	60fb      	str	r3, [r7, #12]
  uint32_t wutwfstatus = 0x00;
 8009b0e:	2300      	movs	r3, #0
 8009b10:	613b      	str	r3, [r7, #16]
  ErrorStatus status = ERROR;
 8009b12:	2300      	movs	r3, #0
 8009b14:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8009b16:	4b1e      	ldr	r3, [pc, #120]	; (8009b90 <RTC_WakeUpCmd+0x90>)
 8009b18:	22ca      	movs	r2, #202	; 0xca
 8009b1a:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 8009b1c:	4b1c      	ldr	r3, [pc, #112]	; (8009b90 <RTC_WakeUpCmd+0x90>)
 8009b1e:	2253      	movs	r2, #83	; 0x53
 8009b20:	625a      	str	r2, [r3, #36]	; 0x24

  if (NewState != DISABLE)
 8009b22:	79fb      	ldrb	r3, [r7, #7]
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d008      	beq.n	8009b3a <RTC_WakeUpCmd+0x3a>
  {
    /* Enable the Wakeup Timer */
    RTC->CR |= (uint32_t)RTC_CR_WUTE;
 8009b28:	4b19      	ldr	r3, [pc, #100]	; (8009b90 <RTC_WakeUpCmd+0x90>)
 8009b2a:	689b      	ldr	r3, [r3, #8]
 8009b2c:	4a18      	ldr	r2, [pc, #96]	; (8009b90 <RTC_WakeUpCmd+0x90>)
 8009b2e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009b32:	6093      	str	r3, [r2, #8]
    status = SUCCESS;    
 8009b34:	2301      	movs	r3, #1
 8009b36:	75fb      	strb	r3, [r7, #23]
 8009b38:	e01f      	b.n	8009b7a <RTC_WakeUpCmd+0x7a>
  }
  else
  {
    /* Disable the Wakeup Timer */
    RTC->CR &= (uint32_t)~RTC_CR_WUTE;
 8009b3a:	4b15      	ldr	r3, [pc, #84]	; (8009b90 <RTC_WakeUpCmd+0x90>)
 8009b3c:	689b      	ldr	r3, [r3, #8]
 8009b3e:	4a14      	ldr	r2, [pc, #80]	; (8009b90 <RTC_WakeUpCmd+0x90>)
 8009b40:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009b44:	6093      	str	r3, [r2, #8]
    /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
    do
    {
      wutwfstatus = RTC->ISR & RTC_ISR_WUTWF;
 8009b46:	4b12      	ldr	r3, [pc, #72]	; (8009b90 <RTC_WakeUpCmd+0x90>)
 8009b48:	68db      	ldr	r3, [r3, #12]
 8009b4a:	f003 0304 	and.w	r3, r3, #4
 8009b4e:	613b      	str	r3, [r7, #16]
      wutcounter++;  
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	3301      	adds	r3, #1
 8009b54:	60fb      	str	r3, [r7, #12]
    } while((wutcounter != INITMODE_TIMEOUT) && (wutwfstatus == 0x00));
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009b5c:	d002      	beq.n	8009b64 <RTC_WakeUpCmd+0x64>
 8009b5e:	693b      	ldr	r3, [r7, #16]
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d0f0      	beq.n	8009b46 <RTC_WakeUpCmd+0x46>
    
    if ((RTC->ISR & RTC_ISR_WUTWF) == RESET)
 8009b64:	4b0a      	ldr	r3, [pc, #40]	; (8009b90 <RTC_WakeUpCmd+0x90>)
 8009b66:	68db      	ldr	r3, [r3, #12]
 8009b68:	f003 0304 	and.w	r3, r3, #4
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d102      	bne.n	8009b76 <RTC_WakeUpCmd+0x76>
    {
      status = ERROR;
 8009b70:	2300      	movs	r3, #0
 8009b72:	75fb      	strb	r3, [r7, #23]
 8009b74:	e001      	b.n	8009b7a <RTC_WakeUpCmd+0x7a>
    }
    else
    {
      status = SUCCESS;
 8009b76:	2301      	movs	r3, #1
 8009b78:	75fb      	strb	r3, [r7, #23]
    }    
  }

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 8009b7a:	4b05      	ldr	r3, [pc, #20]	; (8009b90 <RTC_WakeUpCmd+0x90>)
 8009b7c:	22ff      	movs	r2, #255	; 0xff
 8009b7e:	625a      	str	r2, [r3, #36]	; 0x24
  
  return status;
 8009b80:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b82:	4618      	mov	r0, r3
 8009b84:	371c      	adds	r7, #28
 8009b86:	46bd      	mov	sp, r7
 8009b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b8c:	4770      	bx	lr
 8009b8e:	bf00      	nop
 8009b90:	40002800 	.word	0x40002800

08009b94 <RTC_DayLightSavingConfig>:
  *            @arg RTC_StoreOperation_Reset: BCK Bit Reset
  *            @arg RTC_StoreOperation_Set: BCK Bit Set
  * @retval None
  */
void RTC_DayLightSavingConfig(uint32_t RTC_DayLightSaving, uint32_t RTC_StoreOperation)
{
 8009b94:	b480      	push	{r7}
 8009b96:	b083      	sub	sp, #12
 8009b98:	af00      	add	r7, sp, #0
 8009b9a:	6078      	str	r0, [r7, #4]
 8009b9c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_DAYLIGHT_SAVING(RTC_DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(RTC_StoreOperation));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8009b9e:	4b0e      	ldr	r3, [pc, #56]	; (8009bd8 <RTC_DayLightSavingConfig+0x44>)
 8009ba0:	22ca      	movs	r2, #202	; 0xca
 8009ba2:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 8009ba4:	4b0c      	ldr	r3, [pc, #48]	; (8009bd8 <RTC_DayLightSavingConfig+0x44>)
 8009ba6:	2253      	movs	r2, #83	; 0x53
 8009ba8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Clear the bits to be configured */
  RTC->CR &= (uint32_t)~(RTC_CR_BCK);
 8009baa:	4b0b      	ldr	r3, [pc, #44]	; (8009bd8 <RTC_DayLightSavingConfig+0x44>)
 8009bac:	689b      	ldr	r3, [r3, #8]
 8009bae:	4a0a      	ldr	r2, [pc, #40]	; (8009bd8 <RTC_DayLightSavingConfig+0x44>)
 8009bb0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009bb4:	6093      	str	r3, [r2, #8]

  /* Configure the RTC_CR register */
  RTC->CR |= (uint32_t)(RTC_DayLightSaving | RTC_StoreOperation);
 8009bb6:	4b08      	ldr	r3, [pc, #32]	; (8009bd8 <RTC_DayLightSavingConfig+0x44>)
 8009bb8:	689a      	ldr	r2, [r3, #8]
 8009bba:	6879      	ldr	r1, [r7, #4]
 8009bbc:	683b      	ldr	r3, [r7, #0]
 8009bbe:	430b      	orrs	r3, r1
 8009bc0:	4905      	ldr	r1, [pc, #20]	; (8009bd8 <RTC_DayLightSavingConfig+0x44>)
 8009bc2:	4313      	orrs	r3, r2
 8009bc4:	608b      	str	r3, [r1, #8]

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 8009bc6:	4b04      	ldr	r3, [pc, #16]	; (8009bd8 <RTC_DayLightSavingConfig+0x44>)
 8009bc8:	22ff      	movs	r2, #255	; 0xff
 8009bca:	625a      	str	r2, [r3, #36]	; 0x24
}
 8009bcc:	bf00      	nop
 8009bce:	370c      	adds	r7, #12
 8009bd0:	46bd      	mov	sp, r7
 8009bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bd6:	4770      	bx	lr
 8009bd8:	40002800 	.word	0x40002800

08009bdc <RTC_GetStoreOperation>:
  * @retval RTC Day Light Saving stored operation.
  *          - RTC_StoreOperation_Reset
  *          - RTC_StoreOperation_Set       
  */
uint32_t RTC_GetStoreOperation(void)
{
 8009bdc:	b480      	push	{r7}
 8009bde:	af00      	add	r7, sp, #0
  return (RTC->CR & RTC_CR_BCK);
 8009be0:	4b04      	ldr	r3, [pc, #16]	; (8009bf4 <RTC_GetStoreOperation+0x18>)
 8009be2:	689b      	ldr	r3, [r3, #8]
 8009be4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
}
 8009be8:	4618      	mov	r0, r3
 8009bea:	46bd      	mov	sp, r7
 8009bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bf0:	4770      	bx	lr
 8009bf2:	bf00      	nop
 8009bf4:	40002800 	.word	0x40002800

08009bf8 <RTC_OutputConfig>:
  *            @arg RTC_OutputPolarity_Low: The output pin is low when the 
  *                                 ALRAF/ALRBF/WUTF is high (depending on OSEL)
  * @retval None
  */
void RTC_OutputConfig(uint32_t RTC_Output, uint32_t RTC_OutputPolarity)
{
 8009bf8:	b480      	push	{r7}
 8009bfa:	b083      	sub	sp, #12
 8009bfc:	af00      	add	r7, sp, #0
 8009bfe:	6078      	str	r0, [r7, #4]
 8009c00:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_OUTPUT(RTC_Output));
  assert_param(IS_RTC_OUTPUT_POL(RTC_OutputPolarity));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8009c02:	4b0e      	ldr	r3, [pc, #56]	; (8009c3c <RTC_OutputConfig+0x44>)
 8009c04:	22ca      	movs	r2, #202	; 0xca
 8009c06:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 8009c08:	4b0c      	ldr	r3, [pc, #48]	; (8009c3c <RTC_OutputConfig+0x44>)
 8009c0a:	2253      	movs	r2, #83	; 0x53
 8009c0c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Clear the bits to be configured */
  RTC->CR &= (uint32_t)~(RTC_CR_OSEL | RTC_CR_POL);
 8009c0e:	4b0b      	ldr	r3, [pc, #44]	; (8009c3c <RTC_OutputConfig+0x44>)
 8009c10:	689b      	ldr	r3, [r3, #8]
 8009c12:	4a0a      	ldr	r2, [pc, #40]	; (8009c3c <RTC_OutputConfig+0x44>)
 8009c14:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009c18:	6093      	str	r3, [r2, #8]

  /* Configure the output selection and polarity */
  RTC->CR |= (uint32_t)(RTC_Output | RTC_OutputPolarity);
 8009c1a:	4b08      	ldr	r3, [pc, #32]	; (8009c3c <RTC_OutputConfig+0x44>)
 8009c1c:	689a      	ldr	r2, [r3, #8]
 8009c1e:	6879      	ldr	r1, [r7, #4]
 8009c20:	683b      	ldr	r3, [r7, #0]
 8009c22:	430b      	orrs	r3, r1
 8009c24:	4905      	ldr	r1, [pc, #20]	; (8009c3c <RTC_OutputConfig+0x44>)
 8009c26:	4313      	orrs	r3, r2
 8009c28:	608b      	str	r3, [r1, #8]

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 8009c2a:	4b04      	ldr	r3, [pc, #16]	; (8009c3c <RTC_OutputConfig+0x44>)
 8009c2c:	22ff      	movs	r2, #255	; 0xff
 8009c2e:	625a      	str	r2, [r3, #36]	; 0x24
}
 8009c30:	bf00      	nop
 8009c32:	370c      	adds	r7, #12
 8009c34:	46bd      	mov	sp, r7
 8009c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c3a:	4770      	bx	lr
 8009c3c:	40002800 	.word	0x40002800

08009c40 <RTC_CoarseCalibConfig>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC Coarse calibration are initialized
  *          - ERROR: RTC Coarse calibration are not initialized     
  */
ErrorStatus RTC_CoarseCalibConfig(uint32_t RTC_CalibSign, uint32_t Value)
{
 8009c40:	b580      	push	{r7, lr}
 8009c42:	b084      	sub	sp, #16
 8009c44:	af00      	add	r7, sp, #0
 8009c46:	6078      	str	r0, [r7, #4]
 8009c48:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8009c4a:	2300      	movs	r3, #0
 8009c4c:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_RTC_CALIB_SIGN(RTC_CalibSign));
  assert_param(IS_RTC_CALIB_VALUE(Value)); 

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8009c4e:	4b0f      	ldr	r3, [pc, #60]	; (8009c8c <RTC_CoarseCalibConfig+0x4c>)
 8009c50:	22ca      	movs	r2, #202	; 0xca
 8009c52:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 8009c54:	4b0d      	ldr	r3, [pc, #52]	; (8009c8c <RTC_CoarseCalibConfig+0x4c>)
 8009c56:	2253      	movs	r2, #83	; 0x53
 8009c58:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode() == ERROR)
 8009c5a:	f7ff fa71 	bl	8009140 <RTC_EnterInitMode>
 8009c5e:	4603      	mov	r3, r0
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d102      	bne.n	8009c6a <RTC_CoarseCalibConfig+0x2a>
  {
    status = ERROR;
 8009c64:	2300      	movs	r3, #0
 8009c66:	73fb      	strb	r3, [r7, #15]
 8009c68:	e008      	b.n	8009c7c <RTC_CoarseCalibConfig+0x3c>
  } 
  else
  {
    /* Set the coarse calibration value */
    RTC->CALIBR = (uint32_t)(RTC_CalibSign | Value);
 8009c6a:	4908      	ldr	r1, [pc, #32]	; (8009c8c <RTC_CoarseCalibConfig+0x4c>)
 8009c6c:	687a      	ldr	r2, [r7, #4]
 8009c6e:	683b      	ldr	r3, [r7, #0]
 8009c70:	4313      	orrs	r3, r2
 8009c72:	618b      	str	r3, [r1, #24]
    /* Exit Initialization mode */
    RTC_ExitInitMode();
 8009c74:	f7ff fa9e 	bl	80091b4 <RTC_ExitInitMode>
    
    status = SUCCESS;
 8009c78:	2301      	movs	r3, #1
 8009c7a:	73fb      	strb	r3, [r7, #15]
  } 

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 8009c7c:	4b03      	ldr	r3, [pc, #12]	; (8009c8c <RTC_CoarseCalibConfig+0x4c>)
 8009c7e:	22ff      	movs	r2, #255	; 0xff
 8009c80:	625a      	str	r2, [r3, #36]	; 0x24
  
  return status;
 8009c82:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c84:	4618      	mov	r0, r3
 8009c86:	3710      	adds	r7, #16
 8009c88:	46bd      	mov	sp, r7
 8009c8a:	bd80      	pop	{r7, pc}
 8009c8c:	40002800 	.word	0x40002800

08009c90 <RTC_CoarseCalibCmd>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC Coarse calibration are enabled/disabled
  *          - ERROR: RTC Coarse calibration are not enabled/disabled    
  */
ErrorStatus RTC_CoarseCalibCmd(FunctionalState NewState)
{
 8009c90:	b580      	push	{r7, lr}
 8009c92:	b084      	sub	sp, #16
 8009c94:	af00      	add	r7, sp, #0
 8009c96:	4603      	mov	r3, r0
 8009c98:	71fb      	strb	r3, [r7, #7]
  ErrorStatus status = ERROR;
 8009c9a:	2300      	movs	r3, #0
 8009c9c:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8009c9e:	4b15      	ldr	r3, [pc, #84]	; (8009cf4 <RTC_CoarseCalibCmd+0x64>)
 8009ca0:	22ca      	movs	r2, #202	; 0xca
 8009ca2:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 8009ca4:	4b13      	ldr	r3, [pc, #76]	; (8009cf4 <RTC_CoarseCalibCmd+0x64>)
 8009ca6:	2253      	movs	r2, #83	; 0x53
 8009ca8:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* Set Initialization mode */
  if (RTC_EnterInitMode() == ERROR)
 8009caa:	f7ff fa49 	bl	8009140 <RTC_EnterInitMode>
 8009cae:	4603      	mov	r3, r0
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d102      	bne.n	8009cba <RTC_CoarseCalibCmd+0x2a>
  {
    status =  ERROR;
 8009cb4:	2300      	movs	r3, #0
 8009cb6:	73fb      	strb	r3, [r7, #15]
 8009cb8:	e013      	b.n	8009ce2 <RTC_CoarseCalibCmd+0x52>
  }
  else
  {
    if (NewState != DISABLE)
 8009cba:	79fb      	ldrb	r3, [r7, #7]
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d006      	beq.n	8009cce <RTC_CoarseCalibCmd+0x3e>
    {
      /* Enable the Coarse Calibration */
      RTC->CR |= (uint32_t)RTC_CR_DCE;
 8009cc0:	4b0c      	ldr	r3, [pc, #48]	; (8009cf4 <RTC_CoarseCalibCmd+0x64>)
 8009cc2:	689b      	ldr	r3, [r3, #8]
 8009cc4:	4a0b      	ldr	r2, [pc, #44]	; (8009cf4 <RTC_CoarseCalibCmd+0x64>)
 8009cc6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009cca:	6093      	str	r3, [r2, #8]
 8009ccc:	e005      	b.n	8009cda <RTC_CoarseCalibCmd+0x4a>
    }
    else
    { 
      /* Disable the Coarse Calibration */
      RTC->CR &= (uint32_t)~RTC_CR_DCE;
 8009cce:	4b09      	ldr	r3, [pc, #36]	; (8009cf4 <RTC_CoarseCalibCmd+0x64>)
 8009cd0:	689b      	ldr	r3, [r3, #8]
 8009cd2:	4a08      	ldr	r2, [pc, #32]	; (8009cf4 <RTC_CoarseCalibCmd+0x64>)
 8009cd4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009cd8:	6093      	str	r3, [r2, #8]
    }
    /* Exit Initialization mode */
    RTC_ExitInitMode();
 8009cda:	f7ff fa6b 	bl	80091b4 <RTC_ExitInitMode>
    
    status = SUCCESS;
 8009cde:	2301      	movs	r3, #1
 8009ce0:	73fb      	strb	r3, [r7, #15]
  } 
  
  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 8009ce2:	4b04      	ldr	r3, [pc, #16]	; (8009cf4 <RTC_CoarseCalibCmd+0x64>)
 8009ce4:	22ff      	movs	r2, #255	; 0xff
 8009ce6:	625a      	str	r2, [r3, #36]	; 0x24
  
  return status;
 8009ce8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cea:	4618      	mov	r0, r3
 8009cec:	3710      	adds	r7, #16
 8009cee:	46bd      	mov	sp, r7
 8009cf0:	bd80      	pop	{r7, pc}
 8009cf2:	bf00      	nop
 8009cf4:	40002800 	.word	0x40002800

08009cf8 <RTC_CalibOutputCmd>:
  * @param  NewState: new state of the digital calibration Output.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RTC_CalibOutputCmd(FunctionalState NewState)
{
 8009cf8:	b480      	push	{r7}
 8009cfa:	b083      	sub	sp, #12
 8009cfc:	af00      	add	r7, sp, #0
 8009cfe:	4603      	mov	r3, r0
 8009d00:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8009d02:	4b0f      	ldr	r3, [pc, #60]	; (8009d40 <RTC_CalibOutputCmd+0x48>)
 8009d04:	22ca      	movs	r2, #202	; 0xca
 8009d06:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 8009d08:	4b0d      	ldr	r3, [pc, #52]	; (8009d40 <RTC_CalibOutputCmd+0x48>)
 8009d0a:	2253      	movs	r2, #83	; 0x53
 8009d0c:	625a      	str	r2, [r3, #36]	; 0x24
  
  if (NewState != DISABLE)
 8009d0e:	79fb      	ldrb	r3, [r7, #7]
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d006      	beq.n	8009d22 <RTC_CalibOutputCmd+0x2a>
  {
    /* Enable the RTC clock output */
    RTC->CR |= (uint32_t)RTC_CR_COE;
 8009d14:	4b0a      	ldr	r3, [pc, #40]	; (8009d40 <RTC_CalibOutputCmd+0x48>)
 8009d16:	689b      	ldr	r3, [r3, #8]
 8009d18:	4a09      	ldr	r2, [pc, #36]	; (8009d40 <RTC_CalibOutputCmd+0x48>)
 8009d1a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009d1e:	6093      	str	r3, [r2, #8]
 8009d20:	e005      	b.n	8009d2e <RTC_CalibOutputCmd+0x36>
  }
  else
  { 
    /* Disable the RTC clock output */
    RTC->CR &= (uint32_t)~RTC_CR_COE;
 8009d22:	4b07      	ldr	r3, [pc, #28]	; (8009d40 <RTC_CalibOutputCmd+0x48>)
 8009d24:	689b      	ldr	r3, [r3, #8]
 8009d26:	4a06      	ldr	r2, [pc, #24]	; (8009d40 <RTC_CalibOutputCmd+0x48>)
 8009d28:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8009d2c:	6093      	str	r3, [r2, #8]
  }
  
  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 8009d2e:	4b04      	ldr	r3, [pc, #16]	; (8009d40 <RTC_CalibOutputCmd+0x48>)
 8009d30:	22ff      	movs	r2, #255	; 0xff
 8009d32:	625a      	str	r2, [r3, #36]	; 0x24
}
 8009d34:	bf00      	nop
 8009d36:	370c      	adds	r7, #12
 8009d38:	46bd      	mov	sp, r7
 8009d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d3e:	4770      	bx	lr
 8009d40:	40002800 	.word	0x40002800

08009d44 <RTC_CalibOutputConfig>:
  *     @arg RTC_CalibOutput_512Hz: A signal has a regular waveform at 512Hz. 
  *     @arg RTC_CalibOutput_1Hz  : A signal has a regular waveform at 1Hz.
  * @retval None
*/
void RTC_CalibOutputConfig(uint32_t RTC_CalibOutput)
{
 8009d44:	b480      	push	{r7}
 8009d46:	b083      	sub	sp, #12
 8009d48:	af00      	add	r7, sp, #0
 8009d4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_CALIB_OUTPUT(RTC_CalibOutput));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8009d4c:	4b0d      	ldr	r3, [pc, #52]	; (8009d84 <RTC_CalibOutputConfig+0x40>)
 8009d4e:	22ca      	movs	r2, #202	; 0xca
 8009d50:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 8009d52:	4b0c      	ldr	r3, [pc, #48]	; (8009d84 <RTC_CalibOutputConfig+0x40>)
 8009d54:	2253      	movs	r2, #83	; 0x53
 8009d56:	625a      	str	r2, [r3, #36]	; 0x24
  
  /*clear flags before configuration */
  RTC->CR &= (uint32_t)~(RTC_CR_COSEL);
 8009d58:	4b0a      	ldr	r3, [pc, #40]	; (8009d84 <RTC_CalibOutputConfig+0x40>)
 8009d5a:	689b      	ldr	r3, [r3, #8]
 8009d5c:	4a09      	ldr	r2, [pc, #36]	; (8009d84 <RTC_CalibOutputConfig+0x40>)
 8009d5e:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8009d62:	6093      	str	r3, [r2, #8]

  /* Configure the RTC_CR register */
  RTC->CR |= (uint32_t)RTC_CalibOutput;
 8009d64:	4b07      	ldr	r3, [pc, #28]	; (8009d84 <RTC_CalibOutputConfig+0x40>)
 8009d66:	689a      	ldr	r2, [r3, #8]
 8009d68:	4906      	ldr	r1, [pc, #24]	; (8009d84 <RTC_CalibOutputConfig+0x40>)
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	4313      	orrs	r3, r2
 8009d6e:	608b      	str	r3, [r1, #8]

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF;
 8009d70:	4b04      	ldr	r3, [pc, #16]	; (8009d84 <RTC_CalibOutputConfig+0x40>)
 8009d72:	22ff      	movs	r2, #255	; 0xff
 8009d74:	625a      	str	r2, [r3, #36]	; 0x24
}
 8009d76:	bf00      	nop
 8009d78:	370c      	adds	r7, #12
 8009d7a:	46bd      	mov	sp, r7
 8009d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d80:	4770      	bx	lr
 8009d82:	bf00      	nop
 8009d84:	40002800 	.word	0x40002800

08009d88 <RTC_SmoothCalibConfig>:
  *          - ERROR: RTC Calib registers are not configured
*/
ErrorStatus RTC_SmoothCalibConfig(uint32_t RTC_SmoothCalibPeriod,
                                  uint32_t RTC_SmoothCalibPlusPulses,
                                  uint32_t RTC_SmouthCalibMinusPulsesValue)
{
 8009d88:	b480      	push	{r7}
 8009d8a:	b087      	sub	sp, #28
 8009d8c:	af00      	add	r7, sp, #0
 8009d8e:	60f8      	str	r0, [r7, #12]
 8009d90:	60b9      	str	r1, [r7, #8]
 8009d92:	607a      	str	r2, [r7, #4]
  ErrorStatus status = ERROR;
 8009d94:	2300      	movs	r3, #0
 8009d96:	75fb      	strb	r3, [r7, #23]
  uint32_t recalpfcount = 0;
 8009d98:	2300      	movs	r3, #0
 8009d9a:	613b      	str	r3, [r7, #16]
  assert_param(IS_RTC_SMOOTH_CALIB_PERIOD(RTC_SmoothCalibPeriod));
  assert_param(IS_RTC_SMOOTH_CALIB_PLUS(RTC_SmoothCalibPlusPulses));
  assert_param(IS_RTC_SMOOTH_CALIB_MINUS(RTC_SmouthCalibMinusPulsesValue));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8009d9c:	4b1a      	ldr	r3, [pc, #104]	; (8009e08 <RTC_SmoothCalibConfig+0x80>)
 8009d9e:	22ca      	movs	r2, #202	; 0xca
 8009da0:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 8009da2:	4b19      	ldr	r3, [pc, #100]	; (8009e08 <RTC_SmoothCalibConfig+0x80>)
 8009da4:	2253      	movs	r2, #83	; 0x53
 8009da6:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* check if a calibration is pending*/
  if ((RTC->ISR & RTC_ISR_RECALPF) != RESET)
 8009da8:	4b17      	ldr	r3, [pc, #92]	; (8009e08 <RTC_SmoothCalibConfig+0x80>)
 8009daa:	68db      	ldr	r3, [r3, #12]
 8009dac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d00d      	beq.n	8009dd0 <RTC_SmoothCalibConfig+0x48>
  {
    /* wait until the Calibration is completed*/
    while (((RTC->ISR & RTC_ISR_RECALPF) != RESET) && (recalpfcount != RECALPF_TIMEOUT))
 8009db4:	e002      	b.n	8009dbc <RTC_SmoothCalibConfig+0x34>
    {
      recalpfcount++;
 8009db6:	693b      	ldr	r3, [r7, #16]
 8009db8:	3301      	adds	r3, #1
 8009dba:	613b      	str	r3, [r7, #16]
    while (((RTC->ISR & RTC_ISR_RECALPF) != RESET) && (recalpfcount != RECALPF_TIMEOUT))
 8009dbc:	4b12      	ldr	r3, [pc, #72]	; (8009e08 <RTC_SmoothCalibConfig+0x80>)
 8009dbe:	68db      	ldr	r3, [r3, #12]
 8009dc0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d003      	beq.n	8009dd0 <RTC_SmoothCalibConfig+0x48>
 8009dc8:	693b      	ldr	r3, [r7, #16]
 8009dca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009dce:	d1f2      	bne.n	8009db6 <RTC_SmoothCalibConfig+0x2e>
    }
  }

  /* check if the calibration pending is completed or if there is no calibration operation at all*/
  if ((RTC->ISR & RTC_ISR_RECALPF) == RESET)
 8009dd0:	4b0d      	ldr	r3, [pc, #52]	; (8009e08 <RTC_SmoothCalibConfig+0x80>)
 8009dd2:	68db      	ldr	r3, [r3, #12]
 8009dd4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d109      	bne.n	8009df0 <RTC_SmoothCalibConfig+0x68>
  {
    /* Configure the Smooth calibration settings */
    RTC->CALR = (uint32_t)((uint32_t)RTC_SmoothCalibPeriod | (uint32_t)RTC_SmoothCalibPlusPulses | (uint32_t)RTC_SmouthCalibMinusPulsesValue);
 8009ddc:	68fa      	ldr	r2, [r7, #12]
 8009dde:	68bb      	ldr	r3, [r7, #8]
 8009de0:	431a      	orrs	r2, r3
 8009de2:	4909      	ldr	r1, [pc, #36]	; (8009e08 <RTC_SmoothCalibConfig+0x80>)
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	4313      	orrs	r3, r2
 8009de8:	63cb      	str	r3, [r1, #60]	; 0x3c

    status = SUCCESS;
 8009dea:	2301      	movs	r3, #1
 8009dec:	75fb      	strb	r3, [r7, #23]
 8009dee:	e001      	b.n	8009df4 <RTC_SmoothCalibConfig+0x6c>
  }
  else
  {
    status = ERROR;
 8009df0:	2300      	movs	r3, #0
 8009df2:	75fb      	strb	r3, [r7, #23]
  }

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF;
 8009df4:	4b04      	ldr	r3, [pc, #16]	; (8009e08 <RTC_SmoothCalibConfig+0x80>)
 8009df6:	22ff      	movs	r2, #255	; 0xff
 8009df8:	625a      	str	r2, [r3, #36]	; 0x24
  
  return (ErrorStatus)(status);
 8009dfa:	7dfb      	ldrb	r3, [r7, #23]
}
 8009dfc:	4618      	mov	r0, r3
 8009dfe:	371c      	adds	r7, #28
 8009e00:	46bd      	mov	sp, r7
 8009e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e06:	4770      	bx	lr
 8009e08:	40002800 	.word	0x40002800

08009e0c <RTC_TimeStampCmd>:
  * @param  NewState: new state of the TimeStamp.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RTC_TimeStampCmd(uint32_t RTC_TimeStampEdge, FunctionalState NewState)
{
 8009e0c:	b480      	push	{r7}
 8009e0e:	b085      	sub	sp, #20
 8009e10:	af00      	add	r7, sp, #0
 8009e12:	6078      	str	r0, [r7, #4]
 8009e14:	460b      	mov	r3, r1
 8009e16:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpreg = 0;
 8009e18:	2300      	movs	r3, #0
 8009e1a:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RTC_TIMESTAMP_EDGE(RTC_TimeStampEdge));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(RTC->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 8009e1c:	4b13      	ldr	r3, [pc, #76]	; (8009e6c <RTC_TimeStampCmd+0x60>)
 8009e1e:	689b      	ldr	r3, [r3, #8]
 8009e20:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009e24:	f023 0308 	bic.w	r3, r3, #8
 8009e28:	60fb      	str	r3, [r7, #12]

  /* Get the new configuration */
  if (NewState != DISABLE)
 8009e2a:	78fb      	ldrb	r3, [r7, #3]
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d006      	beq.n	8009e3e <RTC_TimeStampCmd+0x32>
  {
    tmpreg |= (uint32_t)(RTC_TimeStampEdge | RTC_CR_TSE);
 8009e30:	687a      	ldr	r2, [r7, #4]
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	4313      	orrs	r3, r2
 8009e36:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8009e3a:	60fb      	str	r3, [r7, #12]
 8009e3c:	e003      	b.n	8009e46 <RTC_TimeStampCmd+0x3a>
  }
  else
  {
    tmpreg |= (uint32_t)(RTC_TimeStampEdge);
 8009e3e:	68fa      	ldr	r2, [r7, #12]
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	4313      	orrs	r3, r2
 8009e44:	60fb      	str	r3, [r7, #12]
  }

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8009e46:	4b09      	ldr	r3, [pc, #36]	; (8009e6c <RTC_TimeStampCmd+0x60>)
 8009e48:	22ca      	movs	r2, #202	; 0xca
 8009e4a:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 8009e4c:	4b07      	ldr	r3, [pc, #28]	; (8009e6c <RTC_TimeStampCmd+0x60>)
 8009e4e:	2253      	movs	r2, #83	; 0x53
 8009e50:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Time Stamp TSEDGE and Enable bits */
  RTC->CR = (uint32_t)tmpreg;
 8009e52:	4a06      	ldr	r2, [pc, #24]	; (8009e6c <RTC_TimeStampCmd+0x60>)
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 8009e58:	4b04      	ldr	r3, [pc, #16]	; (8009e6c <RTC_TimeStampCmd+0x60>)
 8009e5a:	22ff      	movs	r2, #255	; 0xff
 8009e5c:	625a      	str	r2, [r3, #36]	; 0x24
}
 8009e5e:	bf00      	nop
 8009e60:	3714      	adds	r7, #20
 8009e62:	46bd      	mov	sp, r7
 8009e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e68:	4770      	bx	lr
 8009e6a:	bf00      	nop
 8009e6c:	40002800 	.word	0x40002800

08009e70 <RTC_GetTimeStamp>:
  *                             contains the TimeStamp date values.     
  * @retval None
  */
void RTC_GetTimeStamp(uint32_t RTC_Format, RTC_TimeTypeDef* RTC_StampTimeStruct, 
                                      RTC_DateTypeDef* RTC_StampDateStruct)
{
 8009e70:	b580      	push	{r7, lr}
 8009e72:	b086      	sub	sp, #24
 8009e74:	af00      	add	r7, sp, #0
 8009e76:	60f8      	str	r0, [r7, #12]
 8009e78:	60b9      	str	r1, [r7, #8]
 8009e7a:	607a      	str	r2, [r7, #4]
  uint32_t tmptime = 0, tmpdate = 0;
 8009e7c:	2300      	movs	r3, #0
 8009e7e:	617b      	str	r3, [r7, #20]
 8009e80:	2300      	movs	r3, #0
 8009e82:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(RTC_Format));

  /* Get the TimeStamp time and date registers values */
  tmptime = (uint32_t)(RTC->TSTR & RTC_TR_RESERVED_MASK);
 8009e84:	4b41      	ldr	r3, [pc, #260]	; (8009f8c <RTC_GetTimeStamp+0x11c>)
 8009e86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e88:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8009e8c:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8009e90:	617b      	str	r3, [r7, #20]
  tmpdate = (uint32_t)(RTC->TSDR & RTC_DR_RESERVED_MASK);
 8009e92:	4b3e      	ldr	r3, [pc, #248]	; (8009f8c <RTC_GetTimeStamp+0x11c>)
 8009e94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e96:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8009e9a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8009e9e:	613b      	str	r3, [r7, #16]

  /* Fill the Time structure fields with the read parameters */
  RTC_StampTimeStruct->RTC_Hours = (uint8_t)((tmptime & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 8009ea0:	697b      	ldr	r3, [r7, #20]
 8009ea2:	0c1b      	lsrs	r3, r3, #16
 8009ea4:	b2db      	uxtb	r3, r3
 8009ea6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009eaa:	b2da      	uxtb	r2, r3
 8009eac:	68bb      	ldr	r3, [r7, #8]
 8009eae:	701a      	strb	r2, [r3, #0]
  RTC_StampTimeStruct->RTC_Minutes = (uint8_t)((tmptime & (RTC_TR_MNT | RTC_TR_MNU)) >> 8);
 8009eb0:	697b      	ldr	r3, [r7, #20]
 8009eb2:	0a1b      	lsrs	r3, r3, #8
 8009eb4:	b2db      	uxtb	r3, r3
 8009eb6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009eba:	b2da      	uxtb	r2, r3
 8009ebc:	68bb      	ldr	r3, [r7, #8]
 8009ebe:	705a      	strb	r2, [r3, #1]
  RTC_StampTimeStruct->RTC_Seconds = (uint8_t)(tmptime & (RTC_TR_ST | RTC_TR_SU));
 8009ec0:	697b      	ldr	r3, [r7, #20]
 8009ec2:	b2db      	uxtb	r3, r3
 8009ec4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009ec8:	b2da      	uxtb	r2, r3
 8009eca:	68bb      	ldr	r3, [r7, #8]
 8009ecc:	709a      	strb	r2, [r3, #2]
  RTC_StampTimeStruct->RTC_H12 = (uint8_t)((tmptime & (RTC_TR_PM)) >> 16);  
 8009ece:	697b      	ldr	r3, [r7, #20]
 8009ed0:	0c1b      	lsrs	r3, r3, #16
 8009ed2:	b2db      	uxtb	r3, r3
 8009ed4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ed8:	b2da      	uxtb	r2, r3
 8009eda:	68bb      	ldr	r3, [r7, #8]
 8009edc:	70da      	strb	r2, [r3, #3]

  /* Fill the Date structure fields with the read parameters */
  RTC_StampDateStruct->RTC_Year = 0;
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	2200      	movs	r2, #0
 8009ee2:	70da      	strb	r2, [r3, #3]
  RTC_StampDateStruct->RTC_Month = (uint8_t)((tmpdate & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 8009ee4:	693b      	ldr	r3, [r7, #16]
 8009ee6:	0a1b      	lsrs	r3, r3, #8
 8009ee8:	b2db      	uxtb	r3, r3
 8009eea:	f003 031f 	and.w	r3, r3, #31
 8009eee:	b2da      	uxtb	r2, r3
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	705a      	strb	r2, [r3, #1]
  RTC_StampDateStruct->RTC_Date = (uint8_t)(tmpdate & (RTC_DR_DT | RTC_DR_DU));
 8009ef4:	693b      	ldr	r3, [r7, #16]
 8009ef6:	b2db      	uxtb	r3, r3
 8009ef8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009efc:	b2da      	uxtb	r2, r3
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	709a      	strb	r2, [r3, #2]
  RTC_StampDateStruct->RTC_WeekDay = (uint8_t)((tmpdate & (RTC_DR_WDU)) >> 13);
 8009f02:	693b      	ldr	r3, [r7, #16]
 8009f04:	0b5b      	lsrs	r3, r3, #13
 8009f06:	b2db      	uxtb	r3, r3
 8009f08:	f003 0307 	and.w	r3, r3, #7
 8009f0c:	b2da      	uxtb	r2, r3
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (RTC_Format == RTC_Format_BIN)
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d135      	bne.n	8009f84 <RTC_GetTimeStamp+0x114>
  {
    /* Convert the Time structure parameters to Binary format */
    RTC_StampTimeStruct->RTC_Hours = (uint8_t)RTC_Bcd2ToByte(RTC_StampTimeStruct->RTC_Hours);
 8009f18:	68bb      	ldr	r3, [r7, #8]
 8009f1a:	781b      	ldrb	r3, [r3, #0]
 8009f1c:	4618      	mov	r0, r3
 8009f1e:	f000 fab6 	bl	800a48e <RTC_Bcd2ToByte>
 8009f22:	4603      	mov	r3, r0
 8009f24:	461a      	mov	r2, r3
 8009f26:	68bb      	ldr	r3, [r7, #8]
 8009f28:	701a      	strb	r2, [r3, #0]
    RTC_StampTimeStruct->RTC_Minutes = (uint8_t)RTC_Bcd2ToByte(RTC_StampTimeStruct->RTC_Minutes);
 8009f2a:	68bb      	ldr	r3, [r7, #8]
 8009f2c:	785b      	ldrb	r3, [r3, #1]
 8009f2e:	4618      	mov	r0, r3
 8009f30:	f000 faad 	bl	800a48e <RTC_Bcd2ToByte>
 8009f34:	4603      	mov	r3, r0
 8009f36:	461a      	mov	r2, r3
 8009f38:	68bb      	ldr	r3, [r7, #8]
 8009f3a:	705a      	strb	r2, [r3, #1]
    RTC_StampTimeStruct->RTC_Seconds = (uint8_t)RTC_Bcd2ToByte(RTC_StampTimeStruct->RTC_Seconds);
 8009f3c:	68bb      	ldr	r3, [r7, #8]
 8009f3e:	789b      	ldrb	r3, [r3, #2]
 8009f40:	4618      	mov	r0, r3
 8009f42:	f000 faa4 	bl	800a48e <RTC_Bcd2ToByte>
 8009f46:	4603      	mov	r3, r0
 8009f48:	461a      	mov	r2, r3
 8009f4a:	68bb      	ldr	r3, [r7, #8]
 8009f4c:	709a      	strb	r2, [r3, #2]

    /* Convert the Date structure parameters to Binary format */
    RTC_StampDateStruct->RTC_Month = (uint8_t)RTC_Bcd2ToByte(RTC_StampDateStruct->RTC_Month);
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	785b      	ldrb	r3, [r3, #1]
 8009f52:	4618      	mov	r0, r3
 8009f54:	f000 fa9b 	bl	800a48e <RTC_Bcd2ToByte>
 8009f58:	4603      	mov	r3, r0
 8009f5a:	461a      	mov	r2, r3
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	705a      	strb	r2, [r3, #1]
    RTC_StampDateStruct->RTC_Date = (uint8_t)RTC_Bcd2ToByte(RTC_StampDateStruct->RTC_Date);
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	789b      	ldrb	r3, [r3, #2]
 8009f64:	4618      	mov	r0, r3
 8009f66:	f000 fa92 	bl	800a48e <RTC_Bcd2ToByte>
 8009f6a:	4603      	mov	r3, r0
 8009f6c:	461a      	mov	r2, r3
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	709a      	strb	r2, [r3, #2]
    RTC_StampDateStruct->RTC_WeekDay = (uint8_t)RTC_Bcd2ToByte(RTC_StampDateStruct->RTC_WeekDay);
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	781b      	ldrb	r3, [r3, #0]
 8009f76:	4618      	mov	r0, r3
 8009f78:	f000 fa89 	bl	800a48e <RTC_Bcd2ToByte>
 8009f7c:	4603      	mov	r3, r0
 8009f7e:	461a      	mov	r2, r3
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	701a      	strb	r2, [r3, #0]
  }
}
 8009f84:	bf00      	nop
 8009f86:	3718      	adds	r7, #24
 8009f88:	46bd      	mov	sp, r7
 8009f8a:	bd80      	pop	{r7, pc}
 8009f8c:	40002800 	.word	0x40002800

08009f90 <RTC_GetTimeStampSubSecond>:
  * @brief  Get the RTC timestamp Sub seconds value.
  * @param  None
  * @retval RTC current timestamp Sub seconds value.
  */
uint32_t RTC_GetTimeStampSubSecond(void)
{
 8009f90:	b480      	push	{r7}
 8009f92:	af00      	add	r7, sp, #0
  /* Get timestamp sub seconds values from the correspondent registers */
  return (uint32_t)(RTC->TSSSR);
 8009f94:	4b03      	ldr	r3, [pc, #12]	; (8009fa4 <RTC_GetTimeStampSubSecond+0x14>)
 8009f96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
 8009f98:	4618      	mov	r0, r3
 8009f9a:	46bd      	mov	sp, r7
 8009f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fa0:	4770      	bx	lr
 8009fa2:	bf00      	nop
 8009fa4:	40002800 	.word	0x40002800

08009fa8 <RTC_TamperTriggerConfig>:
  *     @arg RTC_TamperTrigger_LowLevel: Low Level of the tamper pin causes tamper event.
  *     @arg RTC_TamperTrigger_HighLevel: High Level of the tamper pin causes tamper event.
  * @retval None
  */
void RTC_TamperTriggerConfig(uint32_t RTC_Tamper, uint32_t RTC_TamperTrigger)
{
 8009fa8:	b480      	push	{r7}
 8009faa:	b083      	sub	sp, #12
 8009fac:	af00      	add	r7, sp, #0
 8009fae:	6078      	str	r0, [r7, #4]
 8009fb0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_TAMPER(RTC_Tamper)); 
  assert_param(IS_RTC_TAMPER_TRIGGER(RTC_TamperTrigger));
 
  if (RTC_TamperTrigger == RTC_TamperTrigger_RisingEdge)
 8009fb2:	683b      	ldr	r3, [r7, #0]
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d108      	bne.n	8009fca <RTC_TamperTriggerConfig+0x22>
  {  
    /* Configure the RTC_TAFCR register */
    RTC->TAFCR &= (uint32_t)((uint32_t)~(RTC_Tamper << 1));	
 8009fb8:	4b0a      	ldr	r3, [pc, #40]	; (8009fe4 <RTC_TamperTriggerConfig+0x3c>)
 8009fba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	005b      	lsls	r3, r3, #1
 8009fc0:	43db      	mvns	r3, r3
 8009fc2:	4908      	ldr	r1, [pc, #32]	; (8009fe4 <RTC_TamperTriggerConfig+0x3c>)
 8009fc4:	4013      	ands	r3, r2
 8009fc6:	640b      	str	r3, [r1, #64]	; 0x40
  else
  { 
    /* Configure the RTC_TAFCR register */
    RTC->TAFCR |= (uint32_t)(RTC_Tamper << 1);  
  }  
}
 8009fc8:	e006      	b.n	8009fd8 <RTC_TamperTriggerConfig+0x30>
    RTC->TAFCR |= (uint32_t)(RTC_Tamper << 1);  
 8009fca:	4b06      	ldr	r3, [pc, #24]	; (8009fe4 <RTC_TamperTriggerConfig+0x3c>)
 8009fcc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	005b      	lsls	r3, r3, #1
 8009fd2:	4904      	ldr	r1, [pc, #16]	; (8009fe4 <RTC_TamperTriggerConfig+0x3c>)
 8009fd4:	4313      	orrs	r3, r2
 8009fd6:	640b      	str	r3, [r1, #64]	; 0x40
}
 8009fd8:	bf00      	nop
 8009fda:	370c      	adds	r7, #12
 8009fdc:	46bd      	mov	sp, r7
 8009fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fe2:	4770      	bx	lr
 8009fe4:	40002800 	.word	0x40002800

08009fe8 <RTC_TamperCmd>:
  * @param  NewState: new state of the tamper pin.
  *          This parameter can be: ENABLE or DISABLE.                   
  * @retval None
  */
void RTC_TamperCmd(uint32_t RTC_Tamper, FunctionalState NewState)
{
 8009fe8:	b480      	push	{r7}
 8009fea:	b083      	sub	sp, #12
 8009fec:	af00      	add	r7, sp, #0
 8009fee:	6078      	str	r0, [r7, #4]
 8009ff0:	460b      	mov	r3, r1
 8009ff2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RTC_TAMPER(RTC_Tamper));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8009ff4:	78fb      	ldrb	r3, [r7, #3]
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d006      	beq.n	800a008 <RTC_TamperCmd+0x20>
  {
    /* Enable the selected Tamper pin */
    RTC->TAFCR |= (uint32_t)RTC_Tamper;
 8009ffa:	4b0a      	ldr	r3, [pc, #40]	; (800a024 <RTC_TamperCmd+0x3c>)
 8009ffc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009ffe:	4909      	ldr	r1, [pc, #36]	; (800a024 <RTC_TamperCmd+0x3c>)
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	4313      	orrs	r3, r2
 800a004:	640b      	str	r3, [r1, #64]	; 0x40
  else
  {
    /* Disable the selected Tamper pin */
    RTC->TAFCR &= (uint32_t)~RTC_Tamper;    
  }  
}
 800a006:	e006      	b.n	800a016 <RTC_TamperCmd+0x2e>
    RTC->TAFCR &= (uint32_t)~RTC_Tamper;    
 800a008:	4b06      	ldr	r3, [pc, #24]	; (800a024 <RTC_TamperCmd+0x3c>)
 800a00a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	43db      	mvns	r3, r3
 800a010:	4904      	ldr	r1, [pc, #16]	; (800a024 <RTC_TamperCmd+0x3c>)
 800a012:	4013      	ands	r3, r2
 800a014:	640b      	str	r3, [r1, #64]	; 0x40
}
 800a016:	bf00      	nop
 800a018:	370c      	adds	r7, #12
 800a01a:	46bd      	mov	sp, r7
 800a01c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a020:	4770      	bx	lr
 800a022:	bf00      	nop
 800a024:	40002800 	.word	0x40002800

0800a028 <RTC_TamperFilterConfig>:
  *     @arg RTC_TamperFilter_8Sample: Tamper is activated after 8 consecutive 
  *                                    samples at the active level 
  * @retval None
  */
void RTC_TamperFilterConfig(uint32_t RTC_TamperFilter)
{
 800a028:	b480      	push	{r7}
 800a02a:	b083      	sub	sp, #12
 800a02c:	af00      	add	r7, sp, #0
 800a02e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_TAMPER_FILTER(RTC_TamperFilter));
   
  /* Clear TAMPFLT[1:0] bits in the RTC_TAFCR register */
  RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TAMPFLT);
 800a030:	4b08      	ldr	r3, [pc, #32]	; (800a054 <RTC_TamperFilterConfig+0x2c>)
 800a032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a034:	4a07      	ldr	r2, [pc, #28]	; (800a054 <RTC_TamperFilterConfig+0x2c>)
 800a036:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 800a03a:	6413      	str	r3, [r2, #64]	; 0x40

  /* Configure the RTC_TAFCR register */
  RTC->TAFCR |= (uint32_t)RTC_TamperFilter;
 800a03c:	4b05      	ldr	r3, [pc, #20]	; (800a054 <RTC_TamperFilterConfig+0x2c>)
 800a03e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a040:	4904      	ldr	r1, [pc, #16]	; (800a054 <RTC_TamperFilterConfig+0x2c>)
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	4313      	orrs	r3, r2
 800a046:	640b      	str	r3, [r1, #64]	; 0x40
}
 800a048:	bf00      	nop
 800a04a:	370c      	adds	r7, #12
 800a04c:	46bd      	mov	sp, r7
 800a04e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a052:	4770      	bx	lr
 800a054:	40002800 	.word	0x40002800

0800a058 <RTC_TamperSamplingFreqConfig>:
  *     @arg RTC_TamperSamplingFreq_RTCCLK_Div256: Each of the tamper inputs are sampled
  *                                           with a frequency =  RTCCLK / 256  
  * @retval None
  */
void RTC_TamperSamplingFreqConfig(uint32_t RTC_TamperSamplingFreq)
{
 800a058:	b480      	push	{r7}
 800a05a:	b083      	sub	sp, #12
 800a05c:	af00      	add	r7, sp, #0
 800a05e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_TAMPER_SAMPLING_FREQ(RTC_TamperSamplingFreq));
 
  /* Clear TAMPFREQ[2:0] bits in the RTC_TAFCR register */
  RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TAMPFREQ);
 800a060:	4b08      	ldr	r3, [pc, #32]	; (800a084 <RTC_TamperSamplingFreqConfig+0x2c>)
 800a062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a064:	4a07      	ldr	r2, [pc, #28]	; (800a084 <RTC_TamperSamplingFreqConfig+0x2c>)
 800a066:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800a06a:	6413      	str	r3, [r2, #64]	; 0x40

  /* Configure the RTC_TAFCR register */
  RTC->TAFCR |= (uint32_t)RTC_TamperSamplingFreq;
 800a06c:	4b05      	ldr	r3, [pc, #20]	; (800a084 <RTC_TamperSamplingFreqConfig+0x2c>)
 800a06e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a070:	4904      	ldr	r1, [pc, #16]	; (800a084 <RTC_TamperSamplingFreqConfig+0x2c>)
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	4313      	orrs	r3, r2
 800a076:	640b      	str	r3, [r1, #64]	; 0x40
}
 800a078:	bf00      	nop
 800a07a:	370c      	adds	r7, #12
 800a07c:	46bd      	mov	sp, r7
 800a07e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a082:	4770      	bx	lr
 800a084:	40002800 	.word	0x40002800

0800a088 <RTC_TamperPinsPrechargeDuration>:
  *     @arg RTC_TamperPrechargeDuration_4RTCCLK: Tamper pins are precharged before sampling during 4 RTCCLK cycle    
  *     @arg RTC_TamperPrechargeDuration_8RTCCLK: Tamper pins are precharged before sampling during 8 RTCCLK cycle
  * @retval None
  */
void RTC_TamperPinsPrechargeDuration(uint32_t RTC_TamperPrechargeDuration)
{
 800a088:	b480      	push	{r7}
 800a08a:	b083      	sub	sp, #12
 800a08c:	af00      	add	r7, sp, #0
 800a08e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_TAMPER_PRECHARGE_DURATION(RTC_TamperPrechargeDuration));
   
  /* Clear TAMPPRCH[1:0] bits in the RTC_TAFCR register */
  RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TAMPPRCH);
 800a090:	4b08      	ldr	r3, [pc, #32]	; (800a0b4 <RTC_TamperPinsPrechargeDuration+0x2c>)
 800a092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a094:	4a07      	ldr	r2, [pc, #28]	; (800a0b4 <RTC_TamperPinsPrechargeDuration+0x2c>)
 800a096:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 800a09a:	6413      	str	r3, [r2, #64]	; 0x40

  /* Configure the RTC_TAFCR register */
  RTC->TAFCR |= (uint32_t)RTC_TamperPrechargeDuration;
 800a09c:	4b05      	ldr	r3, [pc, #20]	; (800a0b4 <RTC_TamperPinsPrechargeDuration+0x2c>)
 800a09e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a0a0:	4904      	ldr	r1, [pc, #16]	; (800a0b4 <RTC_TamperPinsPrechargeDuration+0x2c>)
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	4313      	orrs	r3, r2
 800a0a6:	640b      	str	r3, [r1, #64]	; 0x40
}
 800a0a8:	bf00      	nop
 800a0aa:	370c      	adds	r7, #12
 800a0ac:	46bd      	mov	sp, r7
 800a0ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0b2:	4770      	bx	lr
 800a0b4:	40002800 	.word	0x40002800

0800a0b8 <RTC_TimeStampOnTamperDetectionCmd>:
  * @param  NewState: new state of the timestamp on tamper event.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RTC_TimeStampOnTamperDetectionCmd(FunctionalState NewState)
{
 800a0b8:	b480      	push	{r7}
 800a0ba:	b083      	sub	sp, #12
 800a0bc:	af00      	add	r7, sp, #0
 800a0be:	4603      	mov	r3, r0
 800a0c0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
   
  if (NewState != DISABLE)
 800a0c2:	79fb      	ldrb	r3, [r7, #7]
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d006      	beq.n	800a0d6 <RTC_TimeStampOnTamperDetectionCmd+0x1e>
  {
    /* Save timestamp on tamper detection event */
    RTC->TAFCR |= (uint32_t)RTC_TAFCR_TAMPTS;
 800a0c8:	4b09      	ldr	r3, [pc, #36]	; (800a0f0 <RTC_TimeStampOnTamperDetectionCmd+0x38>)
 800a0ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0cc:	4a08      	ldr	r2, [pc, #32]	; (800a0f0 <RTC_TimeStampOnTamperDetectionCmd+0x38>)
 800a0ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a0d2:	6413      	str	r3, [r2, #64]	; 0x40
  else
  {
    /* Tamper detection does not cause a timestamp to be saved */
    RTC->TAFCR &= (uint32_t)~RTC_TAFCR_TAMPTS;    
  }
}
 800a0d4:	e005      	b.n	800a0e2 <RTC_TimeStampOnTamperDetectionCmd+0x2a>
    RTC->TAFCR &= (uint32_t)~RTC_TAFCR_TAMPTS;    
 800a0d6:	4b06      	ldr	r3, [pc, #24]	; (800a0f0 <RTC_TimeStampOnTamperDetectionCmd+0x38>)
 800a0d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0da:	4a05      	ldr	r2, [pc, #20]	; (800a0f0 <RTC_TimeStampOnTamperDetectionCmd+0x38>)
 800a0dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a0e0:	6413      	str	r3, [r2, #64]	; 0x40
}
 800a0e2:	bf00      	nop
 800a0e4:	370c      	adds	r7, #12
 800a0e6:	46bd      	mov	sp, r7
 800a0e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ec:	4770      	bx	lr
 800a0ee:	bf00      	nop
 800a0f0:	40002800 	.word	0x40002800

0800a0f4 <RTC_TamperPullUpCmd>:
  * @param  NewState: new state of tamper pull up.
  *   This parameter can be: ENABLE or DISABLE.                   
  * @retval None
  */
void RTC_TamperPullUpCmd(FunctionalState NewState)
{
 800a0f4:	b480      	push	{r7}
 800a0f6:	b083      	sub	sp, #12
 800a0f8:	af00      	add	r7, sp, #0
 800a0fa:	4603      	mov	r3, r0
 800a0fc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
 if (NewState != DISABLE)
 800a0fe:	79fb      	ldrb	r3, [r7, #7]
 800a100:	2b00      	cmp	r3, #0
 800a102:	d006      	beq.n	800a112 <RTC_TamperPullUpCmd+0x1e>
  {
    /* Enable precharge of the selected Tamper pin */
    RTC->TAFCR &= (uint32_t)~RTC_TAFCR_TAMPPUDIS; 
 800a104:	4b09      	ldr	r3, [pc, #36]	; (800a12c <RTC_TamperPullUpCmd+0x38>)
 800a106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a108:	4a08      	ldr	r2, [pc, #32]	; (800a12c <RTC_TamperPullUpCmd+0x38>)
 800a10a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a10e:	6413      	str	r3, [r2, #64]	; 0x40
  else
  {
    /* Disable precharge of the selected Tamper pin */
    RTC->TAFCR |= (uint32_t)RTC_TAFCR_TAMPPUDIS;    
  } 
}
 800a110:	e005      	b.n	800a11e <RTC_TamperPullUpCmd+0x2a>
    RTC->TAFCR |= (uint32_t)RTC_TAFCR_TAMPPUDIS;    
 800a112:	4b06      	ldr	r3, [pc, #24]	; (800a12c <RTC_TamperPullUpCmd+0x38>)
 800a114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a116:	4a05      	ldr	r2, [pc, #20]	; (800a12c <RTC_TamperPullUpCmd+0x38>)
 800a118:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a11c:	6413      	str	r3, [r2, #64]	; 0x40
}
 800a11e:	bf00      	nop
 800a120:	370c      	adds	r7, #12
 800a122:	46bd      	mov	sp, r7
 800a124:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a128:	4770      	bx	lr
 800a12a:	bf00      	nop
 800a12c:	40002800 	.word	0x40002800

0800a130 <RTC_WriteBackupRegister>:
  *                          specify the register.
  * @param  Data: Data to be written in the specified RTC Backup data register.                     
  * @retval None
  */
void RTC_WriteBackupRegister(uint32_t RTC_BKP_DR, uint32_t Data)
{
 800a130:	b480      	push	{r7}
 800a132:	b085      	sub	sp, #20
 800a134:	af00      	add	r7, sp, #0
 800a136:	6078      	str	r0, [r7, #4]
 800a138:	6039      	str	r1, [r7, #0]
  __IO uint32_t tmp = 0;
 800a13a:	2300      	movs	r3, #0
 800a13c:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RTC_BKP(RTC_BKP_DR));

  tmp = RTC_BASE + 0x50;
 800a13e:	4b08      	ldr	r3, [pc, #32]	; (800a160 <RTC_WriteBackupRegister+0x30>)
 800a140:	60fb      	str	r3, [r7, #12]
  tmp += (RTC_BKP_DR * 4);
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	009a      	lsls	r2, r3, #2
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	4413      	add	r3, r2
 800a14a:	60fb      	str	r3, [r7, #12]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	461a      	mov	r2, r3
 800a150:	683b      	ldr	r3, [r7, #0]
 800a152:	6013      	str	r3, [r2, #0]
}
 800a154:	bf00      	nop
 800a156:	3714      	adds	r7, #20
 800a158:	46bd      	mov	sp, r7
 800a15a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a15e:	4770      	bx	lr
 800a160:	40002850 	.word	0x40002850

0800a164 <RTC_ReadBackupRegister>:
  *          This parameter can be: RTC_BKP_DRx where x can be from 0 to 19 to 
  *                          specify the register.                   
  * @retval None
  */
uint32_t RTC_ReadBackupRegister(uint32_t RTC_BKP_DR)
{
 800a164:	b480      	push	{r7}
 800a166:	b085      	sub	sp, #20
 800a168:	af00      	add	r7, sp, #0
 800a16a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmp = 0;
 800a16c:	2300      	movs	r3, #0
 800a16e:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RTC_BKP(RTC_BKP_DR));

  tmp = RTC_BASE + 0x50;
 800a170:	4b07      	ldr	r3, [pc, #28]	; (800a190 <RTC_ReadBackupRegister+0x2c>)
 800a172:	60fb      	str	r3, [r7, #12]
  tmp += (RTC_BKP_DR * 4);
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	009a      	lsls	r2, r3, #2
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	4413      	add	r3, r2
 800a17c:	60fb      	str	r3, [r7, #12]
  
  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	681b      	ldr	r3, [r3, #0]
}
 800a182:	4618      	mov	r0, r3
 800a184:	3714      	adds	r7, #20
 800a186:	46bd      	mov	sp, r7
 800a188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a18c:	4770      	bx	lr
 800a18e:	bf00      	nop
 800a190:	40002850 	.word	0x40002850

0800a194 <RTC_TamperPinSelection>:
  *            @arg RTC_TamperPin_PC13: PC13 is selected as RTC Tamper Pin.
  *            @arg RTC_TamperPin_PI8: PI8 is selected as RTC Tamper Pin.    
  * @retval None
  */
void RTC_TamperPinSelection(uint32_t RTC_TamperPin)
{
 800a194:	b480      	push	{r7}
 800a196:	b083      	sub	sp, #12
 800a198:	af00      	add	r7, sp, #0
 800a19a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_TAMPER_PIN(RTC_TamperPin));
  
  RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TAMPINSEL);
 800a19c:	4b08      	ldr	r3, [pc, #32]	; (800a1c0 <RTC_TamperPinSelection+0x2c>)
 800a19e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1a0:	4a07      	ldr	r2, [pc, #28]	; (800a1c0 <RTC_TamperPinSelection+0x2c>)
 800a1a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a1a6:	6413      	str	r3, [r2, #64]	; 0x40
  RTC->TAFCR |= (uint32_t)(RTC_TamperPin);  
 800a1a8:	4b05      	ldr	r3, [pc, #20]	; (800a1c0 <RTC_TamperPinSelection+0x2c>)
 800a1aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a1ac:	4904      	ldr	r1, [pc, #16]	; (800a1c0 <RTC_TamperPinSelection+0x2c>)
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	4313      	orrs	r3, r2
 800a1b2:	640b      	str	r3, [r1, #64]	; 0x40
}
 800a1b4:	bf00      	nop
 800a1b6:	370c      	adds	r7, #12
 800a1b8:	46bd      	mov	sp, r7
 800a1ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1be:	4770      	bx	lr
 800a1c0:	40002800 	.word	0x40002800

0800a1c4 <RTC_TimeStampPinSelection>:
  *            @arg RTC_TimeStampPin_PC13: PC13 is selected as RTC TimeStamp Pin.
  *            @arg RTC_TimeStampPin_PI8: PI8 is selected as RTC TimeStamp Pin.    
  * @retval None
  */
void RTC_TimeStampPinSelection(uint32_t RTC_TimeStampPin)
{
 800a1c4:	b480      	push	{r7}
 800a1c6:	b083      	sub	sp, #12
 800a1c8:	af00      	add	r7, sp, #0
 800a1ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));
  
  RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TSINSEL);
 800a1cc:	4b08      	ldr	r3, [pc, #32]	; (800a1f0 <RTC_TimeStampPinSelection+0x2c>)
 800a1ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1d0:	4a07      	ldr	r2, [pc, #28]	; (800a1f0 <RTC_TimeStampPinSelection+0x2c>)
 800a1d2:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800a1d6:	6413      	str	r3, [r2, #64]	; 0x40
  RTC->TAFCR |= (uint32_t)(RTC_TimeStampPin);  
 800a1d8:	4b05      	ldr	r3, [pc, #20]	; (800a1f0 <RTC_TimeStampPinSelection+0x2c>)
 800a1da:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a1dc:	4904      	ldr	r1, [pc, #16]	; (800a1f0 <RTC_TimeStampPinSelection+0x2c>)
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	4313      	orrs	r3, r2
 800a1e2:	640b      	str	r3, [r1, #64]	; 0x40
}
 800a1e4:	bf00      	nop
 800a1e6:	370c      	adds	r7, #12
 800a1e8:	46bd      	mov	sp, r7
 800a1ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ee:	4770      	bx	lr
 800a1f0:	40002800 	.word	0x40002800

0800a1f4 <RTC_OutputTypeConfig>:
  *            @arg RTC_OutputType_PushPull:  RTC Output (PC13) is configured in 
  *                                    Push Pull mode.    
  * @retval None
  */
void RTC_OutputTypeConfig(uint32_t RTC_OutputType)
{
 800a1f4:	b480      	push	{r7}
 800a1f6:	b083      	sub	sp, #12
 800a1f8:	af00      	add	r7, sp, #0
 800a1fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_OUTPUT_TYPE(RTC_OutputType));
  
  RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_ALARMOUTTYPE);
 800a1fc:	4b08      	ldr	r3, [pc, #32]	; (800a220 <RTC_OutputTypeConfig+0x2c>)
 800a1fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a200:	4a07      	ldr	r2, [pc, #28]	; (800a220 <RTC_OutputTypeConfig+0x2c>)
 800a202:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a206:	6413      	str	r3, [r2, #64]	; 0x40
  RTC->TAFCR |= (uint32_t)(RTC_OutputType);  
 800a208:	4b05      	ldr	r3, [pc, #20]	; (800a220 <RTC_OutputTypeConfig+0x2c>)
 800a20a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a20c:	4904      	ldr	r1, [pc, #16]	; (800a220 <RTC_OutputTypeConfig+0x2c>)
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	4313      	orrs	r3, r2
 800a212:	640b      	str	r3, [r1, #64]	; 0x40
}
 800a214:	bf00      	nop
 800a216:	370c      	adds	r7, #12
 800a218:	46bd      	mov	sp, r7
 800a21a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a21e:	4770      	bx	lr
 800a220:	40002800 	.word	0x40002800

0800a224 <RTC_SynchroShiftConfig>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC Shift registers are configured
  *          - ERROR: RTC Shift registers are not configured
*/
ErrorStatus RTC_SynchroShiftConfig(uint32_t RTC_ShiftAdd1S, uint32_t RTC_ShiftSubFS)
{
 800a224:	b580      	push	{r7, lr}
 800a226:	b084      	sub	sp, #16
 800a228:	af00      	add	r7, sp, #0
 800a22a:	6078      	str	r0, [r7, #4]
 800a22c:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800a22e:	2300      	movs	r3, #0
 800a230:	73fb      	strb	r3, [r7, #15]
  uint32_t shpfcount = 0;
 800a232:	2300      	movs	r3, #0
 800a234:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_RTC_SHIFT_ADD1S(RTC_ShiftAdd1S));
  assert_param(IS_RTC_SHIFT_SUBFS(RTC_ShiftSubFS));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 800a236:	4b21      	ldr	r3, [pc, #132]	; (800a2bc <RTC_SynchroShiftConfig+0x98>)
 800a238:	22ca      	movs	r2, #202	; 0xca
 800a23a:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 800a23c:	4b1f      	ldr	r3, [pc, #124]	; (800a2bc <RTC_SynchroShiftConfig+0x98>)
 800a23e:	2253      	movs	r2, #83	; 0x53
 800a240:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* Check if a Shift is pending*/
  if ((RTC->ISR & RTC_ISR_SHPF) != RESET)
 800a242:	4b1e      	ldr	r3, [pc, #120]	; (800a2bc <RTC_SynchroShiftConfig+0x98>)
 800a244:	68db      	ldr	r3, [r3, #12]
 800a246:	f003 0308 	and.w	r3, r3, #8
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d00d      	beq.n	800a26a <RTC_SynchroShiftConfig+0x46>
  {
    /* Wait until the shift is completed*/
    while (((RTC->ISR & RTC_ISR_SHPF) != RESET) && (shpfcount != SHPF_TIMEOUT))
 800a24e:	e002      	b.n	800a256 <RTC_SynchroShiftConfig+0x32>
    {
      shpfcount++;
 800a250:	68bb      	ldr	r3, [r7, #8]
 800a252:	3301      	adds	r3, #1
 800a254:	60bb      	str	r3, [r7, #8]
    while (((RTC->ISR & RTC_ISR_SHPF) != RESET) && (shpfcount != SHPF_TIMEOUT))
 800a256:	4b19      	ldr	r3, [pc, #100]	; (800a2bc <RTC_SynchroShiftConfig+0x98>)
 800a258:	68db      	ldr	r3, [r3, #12]
 800a25a:	f003 0308 	and.w	r3, r3, #8
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d003      	beq.n	800a26a <RTC_SynchroShiftConfig+0x46>
 800a262:	68bb      	ldr	r3, [r7, #8]
 800a264:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a268:	d1f2      	bne.n	800a250 <RTC_SynchroShiftConfig+0x2c>
    }
  }

  /* Check if the Shift pending is completed or if there is no Shift operation at all*/
  if ((RTC->ISR & RTC_ISR_SHPF) == RESET)
 800a26a:	4b14      	ldr	r3, [pc, #80]	; (800a2bc <RTC_SynchroShiftConfig+0x98>)
 800a26c:	68db      	ldr	r3, [r3, #12]
 800a26e:	f003 0308 	and.w	r3, r3, #8
 800a272:	2b00      	cmp	r3, #0
 800a274:	d118      	bne.n	800a2a8 <RTC_SynchroShiftConfig+0x84>
  {
    /* check if the reference clock detection is disabled */
    if((RTC->CR & RTC_CR_REFCKON) == RESET)
 800a276:	4b11      	ldr	r3, [pc, #68]	; (800a2bc <RTC_SynchroShiftConfig+0x98>)
 800a278:	689b      	ldr	r3, [r3, #8]
 800a27a:	f003 0310 	and.w	r3, r3, #16
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d10f      	bne.n	800a2a2 <RTC_SynchroShiftConfig+0x7e>
    {
      /* Configure the Shift settings */
      RTC->SHIFTR = (uint32_t)(uint32_t)(RTC_ShiftSubFS) | (uint32_t)(RTC_ShiftAdd1S);
 800a282:	490e      	ldr	r1, [pc, #56]	; (800a2bc <RTC_SynchroShiftConfig+0x98>)
 800a284:	683a      	ldr	r2, [r7, #0]
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	4313      	orrs	r3, r2
 800a28a:	62cb      	str	r3, [r1, #44]	; 0x2c
    
      if(RTC_WaitForSynchro() == ERROR)
 800a28c:	f7fe ffa2 	bl	80091d4 <RTC_WaitForSynchro>
 800a290:	4603      	mov	r3, r0
 800a292:	2b00      	cmp	r3, #0
 800a294:	d102      	bne.n	800a29c <RTC_SynchroShiftConfig+0x78>
      {
        status = ERROR;
 800a296:	2300      	movs	r3, #0
 800a298:	73fb      	strb	r3, [r7, #15]
 800a29a:	e007      	b.n	800a2ac <RTC_SynchroShiftConfig+0x88>
      }
      else
      {
        status = SUCCESS;
 800a29c:	2301      	movs	r3, #1
 800a29e:	73fb      	strb	r3, [r7, #15]
 800a2a0:	e004      	b.n	800a2ac <RTC_SynchroShiftConfig+0x88>
      }
    }
    else
    {
      status = ERROR;
 800a2a2:	2300      	movs	r3, #0
 800a2a4:	73fb      	strb	r3, [r7, #15]
 800a2a6:	e001      	b.n	800a2ac <RTC_SynchroShiftConfig+0x88>
    }
  }
  else
  {
    status = ERROR;
 800a2a8:	2300      	movs	r3, #0
 800a2aa:	73fb      	strb	r3, [r7, #15]
  }

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF;
 800a2ac:	4b03      	ldr	r3, [pc, #12]	; (800a2bc <RTC_SynchroShiftConfig+0x98>)
 800a2ae:	22ff      	movs	r2, #255	; 0xff
 800a2b0:	625a      	str	r2, [r3, #36]	; 0x24
  
  return (ErrorStatus)(status);
 800a2b2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2b4:	4618      	mov	r0, r3
 800a2b6:	3710      	adds	r7, #16
 800a2b8:	46bd      	mov	sp, r7
 800a2ba:	bd80      	pop	{r7, pc}
 800a2bc:	40002800 	.word	0x40002800

0800a2c0 <RTC_ITConfig>:
  * @param  NewState: new state of the specified RTC interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RTC_ITConfig(uint32_t RTC_IT, FunctionalState NewState)
{
 800a2c0:	b480      	push	{r7}
 800a2c2:	b083      	sub	sp, #12
 800a2c4:	af00      	add	r7, sp, #0
 800a2c6:	6078      	str	r0, [r7, #4]
 800a2c8:	460b      	mov	r3, r1
 800a2ca:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RTC_CONFIG_IT(RTC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 800a2cc:	4b1a      	ldr	r3, [pc, #104]	; (800a338 <RTC_ITConfig+0x78>)
 800a2ce:	22ca      	movs	r2, #202	; 0xca
 800a2d0:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 800a2d2:	4b19      	ldr	r3, [pc, #100]	; (800a338 <RTC_ITConfig+0x78>)
 800a2d4:	2253      	movs	r2, #83	; 0x53
 800a2d6:	625a      	str	r2, [r3, #36]	; 0x24

  if (NewState != DISABLE)
 800a2d8:	78fb      	ldrb	r3, [r7, #3]
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d010      	beq.n	800a300 <RTC_ITConfig+0x40>
  {
    /* Configure the Interrupts in the RTC_CR register */
    RTC->CR |= (uint32_t)(RTC_IT & ~RTC_TAFCR_TAMPIE);
 800a2de:	4b16      	ldr	r3, [pc, #88]	; (800a338 <RTC_ITConfig+0x78>)
 800a2e0:	689a      	ldr	r2, [r3, #8]
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	f023 0304 	bic.w	r3, r3, #4
 800a2e8:	4913      	ldr	r1, [pc, #76]	; (800a338 <RTC_ITConfig+0x78>)
 800a2ea:	4313      	orrs	r3, r2
 800a2ec:	608b      	str	r3, [r1, #8]
    /* Configure the Tamper Interrupt in the RTC_TAFCR */
    RTC->TAFCR |= (uint32_t)(RTC_IT & RTC_TAFCR_TAMPIE);
 800a2ee:	4b12      	ldr	r3, [pc, #72]	; (800a338 <RTC_ITConfig+0x78>)
 800a2f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	f003 0304 	and.w	r3, r3, #4
 800a2f8:	490f      	ldr	r1, [pc, #60]	; (800a338 <RTC_ITConfig+0x78>)
 800a2fa:	4313      	orrs	r3, r2
 800a2fc:	640b      	str	r3, [r1, #64]	; 0x40
 800a2fe:	e011      	b.n	800a324 <RTC_ITConfig+0x64>
  }
  else
  {
    /* Configure the Interrupts in the RTC_CR register */
    RTC->CR &= (uint32_t)~(RTC_IT & (uint32_t)~RTC_TAFCR_TAMPIE);
 800a300:	4b0d      	ldr	r3, [pc, #52]	; (800a338 <RTC_ITConfig+0x78>)
 800a302:	689a      	ldr	r2, [r3, #8]
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	f023 0304 	bic.w	r3, r3, #4
 800a30a:	43db      	mvns	r3, r3
 800a30c:	490a      	ldr	r1, [pc, #40]	; (800a338 <RTC_ITConfig+0x78>)
 800a30e:	4013      	ands	r3, r2
 800a310:	608b      	str	r3, [r1, #8]
    /* Configure the Tamper Interrupt in the RTC_TAFCR */
    RTC->TAFCR &= (uint32_t)~(RTC_IT & RTC_TAFCR_TAMPIE);
 800a312:	4b09      	ldr	r3, [pc, #36]	; (800a338 <RTC_ITConfig+0x78>)
 800a314:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	f003 0304 	and.w	r3, r3, #4
 800a31c:	43db      	mvns	r3, r3
 800a31e:	4906      	ldr	r1, [pc, #24]	; (800a338 <RTC_ITConfig+0x78>)
 800a320:	4013      	ands	r3, r2
 800a322:	640b      	str	r3, [r1, #64]	; 0x40
  }
  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 800a324:	4b04      	ldr	r3, [pc, #16]	; (800a338 <RTC_ITConfig+0x78>)
 800a326:	22ff      	movs	r2, #255	; 0xff
 800a328:	625a      	str	r2, [r3, #36]	; 0x24
}
 800a32a:	bf00      	nop
 800a32c:	370c      	adds	r7, #12
 800a32e:	46bd      	mov	sp, r7
 800a330:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a334:	4770      	bx	lr
 800a336:	bf00      	nop
 800a338:	40002800 	.word	0x40002800

0800a33c <RTC_GetFlagStatus>:
  *            @arg RTC_FLAG_ALRBWF: Alarm B Write flag
  *            @arg RTC_FLAG_ALRAWF: Alarm A write flag
  * @retval The new state of RTC_FLAG (SET or RESET).
  */
FlagStatus RTC_GetFlagStatus(uint32_t RTC_FLAG)
{
 800a33c:	b480      	push	{r7}
 800a33e:	b085      	sub	sp, #20
 800a340:	af00      	add	r7, sp, #0
 800a342:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 800a344:	2300      	movs	r3, #0
 800a346:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpreg = 0;
 800a348:	2300      	movs	r3, #0
 800a34a:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_RTC_GET_FLAG(RTC_FLAG));
  
  /* Get all the flags */
  tmpreg = (uint32_t)(RTC->ISR & RTC_FLAGS_MASK);
 800a34c:	4b0a      	ldr	r3, [pc, #40]	; (800a378 <RTC_GetFlagStatus+0x3c>)
 800a34e:	68da      	ldr	r2, [r3, #12]
 800a350:	4b0a      	ldr	r3, [pc, #40]	; (800a37c <RTC_GetFlagStatus+0x40>)
 800a352:	4013      	ands	r3, r2
 800a354:	60bb      	str	r3, [r7, #8]
  
  /* Return the status of the flag */
  if ((tmpreg & RTC_FLAG) != (uint32_t)RESET)
 800a356:	68ba      	ldr	r2, [r7, #8]
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	4013      	ands	r3, r2
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d002      	beq.n	800a366 <RTC_GetFlagStatus+0x2a>
  {
    bitstatus = SET;
 800a360:	2301      	movs	r3, #1
 800a362:	73fb      	strb	r3, [r7, #15]
 800a364:	e001      	b.n	800a36a <RTC_GetFlagStatus+0x2e>
  }
  else
  {
    bitstatus = RESET;
 800a366:	2300      	movs	r3, #0
 800a368:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800a36a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a36c:	4618      	mov	r0, r3
 800a36e:	3714      	adds	r7, #20
 800a370:	46bd      	mov	sp, r7
 800a372:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a376:	4770      	bx	lr
 800a378:	40002800 	.word	0x40002800
 800a37c:	00013f7f 	.word	0x00013f7f

0800a380 <RTC_ClearFlag>:
  *            @arg RTC_FLAG_ALRAF: Alarm A flag
  *            @arg RTC_FLAG_RSF: Registers Synchronized flag
  * @retval None
  */
void RTC_ClearFlag(uint32_t RTC_FLAG)
{
 800a380:	b480      	push	{r7}
 800a382:	b083      	sub	sp, #12
 800a384:	af00      	add	r7, sp, #0
 800a386:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_CLEAR_FLAG(RTC_FLAG));

  /* Clear the Flags in the RTC_ISR register */
  RTC->ISR = (uint32_t)((uint32_t)(~((RTC_FLAG | RTC_ISR_INIT)& 0x0000FFFF) | (uint32_t)(RTC->ISR & RTC_ISR_INIT)));  
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	b29b      	uxth	r3, r3
 800a38c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a390:	43da      	mvns	r2, r3
 800a392:	4b06      	ldr	r3, [pc, #24]	; (800a3ac <RTC_ClearFlag+0x2c>)
 800a394:	68db      	ldr	r3, [r3, #12]
 800a396:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a39a:	4904      	ldr	r1, [pc, #16]	; (800a3ac <RTC_ClearFlag+0x2c>)
 800a39c:	4313      	orrs	r3, r2
 800a39e:	60cb      	str	r3, [r1, #12]
}
 800a3a0:	bf00      	nop
 800a3a2:	370c      	adds	r7, #12
 800a3a4:	46bd      	mov	sp, r7
 800a3a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3aa:	4770      	bx	lr
 800a3ac:	40002800 	.word	0x40002800

0800a3b0 <RTC_GetITStatus>:
  *            @arg RTC_IT_ALRA: Alarm A interrupt 
  *            @arg RTC_IT_TAMP1: Tamper 1 event interrupt 
  * @retval The new state of RTC_IT (SET or RESET).
  */
ITStatus RTC_GetITStatus(uint32_t RTC_IT)
{
 800a3b0:	b480      	push	{r7}
 800a3b2:	b087      	sub	sp, #28
 800a3b4:	af00      	add	r7, sp, #0
 800a3b6:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
 800a3b8:	2300      	movs	r3, #0
 800a3ba:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpreg = 0, enablestatus = 0;
 800a3bc:	2300      	movs	r3, #0
 800a3be:	613b      	str	r3, [r7, #16]
 800a3c0:	2300      	movs	r3, #0
 800a3c2:	60fb      	str	r3, [r7, #12]
 
  /* Check the parameters */
  assert_param(IS_RTC_GET_IT(RTC_IT));
  
  /* Get the TAMPER Interrupt enable bit and pending bit */
  tmpreg = (uint32_t)(RTC->TAFCR & (RTC_TAFCR_TAMPIE));
 800a3c4:	4b13      	ldr	r3, [pc, #76]	; (800a414 <RTC_GetITStatus+0x64>)
 800a3c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3c8:	f003 0304 	and.w	r3, r3, #4
 800a3cc:	613b      	str	r3, [r7, #16]
 
  /* Get the Interrupt enable Status */
  enablestatus = (uint32_t)((RTC->CR & RTC_IT) | (tmpreg & (RTC_IT >> 15)));
 800a3ce:	4b11      	ldr	r3, [pc, #68]	; (800a414 <RTC_GetITStatus+0x64>)
 800a3d0:	689a      	ldr	r2, [r3, #8]
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	401a      	ands	r2, r3
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	0bd9      	lsrs	r1, r3, #15
 800a3da:	693b      	ldr	r3, [r7, #16]
 800a3dc:	400b      	ands	r3, r1
 800a3de:	4313      	orrs	r3, r2
 800a3e0:	60fb      	str	r3, [r7, #12]
  
  /* Get the Interrupt pending bit */
  tmpreg = (uint32_t)((RTC->ISR & (uint32_t)(RTC_IT >> 4)));
 800a3e2:	4b0c      	ldr	r3, [pc, #48]	; (800a414 <RTC_GetITStatus+0x64>)
 800a3e4:	68da      	ldr	r2, [r3, #12]
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	091b      	lsrs	r3, r3, #4
 800a3ea:	4013      	ands	r3, r2
 800a3ec:	613b      	str	r3, [r7, #16]
  
  /* Get the status of the Interrupt */
  if ((enablestatus != (uint32_t)RESET) && ((tmpreg & 0x0000FFFF) != (uint32_t)RESET))
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d006      	beq.n	800a402 <RTC_GetITStatus+0x52>
 800a3f4:	693b      	ldr	r3, [r7, #16]
 800a3f6:	b29b      	uxth	r3, r3
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d002      	beq.n	800a402 <RTC_GetITStatus+0x52>
  {
    bitstatus = SET;
 800a3fc:	2301      	movs	r3, #1
 800a3fe:	75fb      	strb	r3, [r7, #23]
 800a400:	e001      	b.n	800a406 <RTC_GetITStatus+0x56>
  }
  else
  {
    bitstatus = RESET;
 800a402:	2300      	movs	r3, #0
 800a404:	75fb      	strb	r3, [r7, #23]
  }
  return bitstatus;
 800a406:	7dfb      	ldrb	r3, [r7, #23]
}
 800a408:	4618      	mov	r0, r3
 800a40a:	371c      	adds	r7, #28
 800a40c:	46bd      	mov	sp, r7
 800a40e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a412:	4770      	bx	lr
 800a414:	40002800 	.word	0x40002800

0800a418 <RTC_ClearITPendingBit>:
  *            @arg RTC_IT_ALRA: Alarm A interrupt 
  *            @arg RTC_IT_TAMP1: Tamper 1 event interrupt 
  * @retval None
  */
void RTC_ClearITPendingBit(uint32_t RTC_IT)
{
 800a418:	b480      	push	{r7}
 800a41a:	b085      	sub	sp, #20
 800a41c:	af00      	add	r7, sp, #0
 800a41e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800a420:	2300      	movs	r3, #0
 800a422:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_CLEAR_IT(RTC_IT));

  /* Get the RTC_ISR Interrupt pending bits mask */
  tmpreg = (uint32_t)(RTC_IT >> 4);
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	091b      	lsrs	r3, r3, #4
 800a428:	60fb      	str	r3, [r7, #12]

  /* Clear the interrupt pending bits in the RTC_ISR register */
  RTC->ISR = (uint32_t)((uint32_t)(~((tmpreg | RTC_ISR_INIT)& 0x0000FFFF) | (uint32_t)(RTC->ISR & RTC_ISR_INIT))); 
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	b29b      	uxth	r3, r3
 800a42e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a432:	43da      	mvns	r2, r3
 800a434:	4b06      	ldr	r3, [pc, #24]	; (800a450 <RTC_ClearITPendingBit+0x38>)
 800a436:	68db      	ldr	r3, [r3, #12]
 800a438:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a43c:	4904      	ldr	r1, [pc, #16]	; (800a450 <RTC_ClearITPendingBit+0x38>)
 800a43e:	4313      	orrs	r3, r2
 800a440:	60cb      	str	r3, [r1, #12]
}
 800a442:	bf00      	nop
 800a444:	3714      	adds	r7, #20
 800a446:	46bd      	mov	sp, r7
 800a448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a44c:	4770      	bx	lr
 800a44e:	bf00      	nop
 800a450:	40002800 	.word	0x40002800

0800a454 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted.
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800a454:	b480      	push	{r7}
 800a456:	b085      	sub	sp, #20
 800a458:	af00      	add	r7, sp, #0
 800a45a:	4603      	mov	r3, r0
 800a45c:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0;
 800a45e:	2300      	movs	r3, #0
 800a460:	73fb      	strb	r3, [r7, #15]
  
  while (Value >= 10)
 800a462:	e005      	b.n	800a470 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800a464:	7bfb      	ldrb	r3, [r7, #15]
 800a466:	3301      	adds	r3, #1
 800a468:	73fb      	strb	r3, [r7, #15]
    Value -= 10;
 800a46a:	79fb      	ldrb	r3, [r7, #7]
 800a46c:	3b0a      	subs	r3, #10
 800a46e:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10)
 800a470:	79fb      	ldrb	r3, [r7, #7]
 800a472:	2b09      	cmp	r3, #9
 800a474:	d8f6      	bhi.n	800a464 <RTC_ByteToBcd2+0x10>
  }
  
  return  ((uint8_t)(bcdhigh << 4) | Value);
 800a476:	7bfb      	ldrb	r3, [r7, #15]
 800a478:	011b      	lsls	r3, r3, #4
 800a47a:	b2da      	uxtb	r2, r3
 800a47c:	79fb      	ldrb	r3, [r7, #7]
 800a47e:	4313      	orrs	r3, r2
 800a480:	b2db      	uxtb	r3, r3
}
 800a482:	4618      	mov	r0, r3
 800a484:	3714      	adds	r7, #20
 800a486:	46bd      	mov	sp, r7
 800a488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a48c:	4770      	bx	lr

0800a48e <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted.
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800a48e:	b480      	push	{r7}
 800a490:	b085      	sub	sp, #20
 800a492:	af00      	add	r7, sp, #0
 800a494:	4603      	mov	r3, r0
 800a496:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0;
 800a498:	2300      	movs	r3, #0
 800a49a:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 800a49c:	79fb      	ldrb	r3, [r7, #7]
 800a49e:	091b      	lsrs	r3, r3, #4
 800a4a0:	b2db      	uxtb	r3, r3
 800a4a2:	461a      	mov	r2, r3
 800a4a4:	0092      	lsls	r2, r2, #2
 800a4a6:	4413      	add	r3, r2
 800a4a8:	005b      	lsls	r3, r3, #1
 800a4aa:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & (uint8_t)0x0F));
 800a4ac:	79fb      	ldrb	r3, [r7, #7]
 800a4ae:	f003 030f 	and.w	r3, r3, #15
 800a4b2:	b2da      	uxtb	r2, r3
 800a4b4:	7bfb      	ldrb	r3, [r7, #15]
 800a4b6:	4413      	add	r3, r2
 800a4b8:	b2db      	uxtb	r3, r3
}
 800a4ba:	4618      	mov	r0, r3
 800a4bc:	3714      	adds	r7, #20
 800a4be:	46bd      	mov	sp, r7
 800a4c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4c4:	4770      	bx	lr
 800a4c6:	bf00      	nop

0800a4c8 <SAI_DeInit>:
  * @param  SAIx: To select the SAIx peripheral, where x can be the different instances 
  *                     
  * @retval None
  */
void SAI_DeInit(SAI_TypeDef* SAIx)
{
 800a4c8:	b580      	push	{r7, lr}
 800a4ca:	b082      	sub	sp, #8
 800a4cc:	af00      	add	r7, sp, #0
 800a4ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SAI_PERIPH(SAIx));

  /* Enable SAI1 reset state */
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_SAI1, ENABLE);
 800a4d0:	2101      	movs	r1, #1
 800a4d2:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 800a4d6:	f7fe fb43 	bl	8008b60 <RCC_APB2PeriphResetCmd>
  /* Release SAI1 from reset state */
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_SAI1, DISABLE);  
 800a4da:	2100      	movs	r1, #0
 800a4dc:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 800a4e0:	f7fe fb3e 	bl	8008b60 <RCC_APB2PeriphResetCmd>
}
 800a4e4:	bf00      	nop
 800a4e6:	3708      	adds	r7, #8
 800a4e8:	46bd      	mov	sp, r7
 800a4ea:	bd80      	pop	{r7, pc}

0800a4ec <SAI_Init>:
  * @param  SAI_InitStruct: pointer to a SAI_InitTypeDef structure that
  *         contains the configuration information for the specified SAI Block peripheral.             
  * @retval None
  */
void SAI_Init(SAI_Block_TypeDef* SAI_Block_x, SAI_InitTypeDef* SAI_InitStruct)
{
 800a4ec:	b480      	push	{r7}
 800a4ee:	b085      	sub	sp, #20
 800a4f0:	af00      	add	r7, sp, #0
 800a4f2:	6078      	str	r0, [r7, #4]
 800a4f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800a4f6:	2300      	movs	r3, #0
 800a4f8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(SAI_InitStruct->SAI_MasterDivider));
  assert_param(IS_SAI_BLOCK_FIFO_THRESHOLD(SAI_InitStruct->SAI_FIFOThreshold));

  /* SAI Block_x CR1 Configuration */
  /* Get the SAI Block_x CR1 value */
  tmpreg = SAI_Block_x->CR1;
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	60fb      	str	r3, [r7, #12]
  /* Clear MODE, PRTCFG, DS, LSBFIRST, CKSTR, SYNCEN, OUTDRIV, NODIV, and MCKDIV bits */
  tmpreg &= CR1_CLEAR_MASK;
 800a500:	68fa      	ldr	r2, [r7, #12]
 800a502:	4b1c      	ldr	r3, [pc, #112]	; (800a574 <SAI_Init+0x88>)
 800a504:	4013      	ands	r3, r2
 800a506:	60fb      	str	r3, [r7, #12]
  /* Set CKSTR bit according to SAI_ClockStrobing value   */
  /* Set SYNCEN bit according to SAI_Synchro value        */
  /* Set OUTDRIV bit according to SAI_OUTDRIV value       */
  /* Set NODIV bit according to SAI_NoDivider value       */
  /* Set MCKDIV bits according to SAI_MasterDivider value */
  tmpreg |= (uint32_t)(SAI_InitStruct->SAI_AudioMode     | SAI_InitStruct->SAI_Protocol  |
 800a508:	683b      	ldr	r3, [r7, #0]
 800a50a:	681a      	ldr	r2, [r3, #0]
 800a50c:	683b      	ldr	r3, [r7, #0]
 800a50e:	685b      	ldr	r3, [r3, #4]
 800a510:	431a      	orrs	r2, r3
                       SAI_InitStruct->SAI_DataSize      | SAI_InitStruct->SAI_FirstBit  |  
 800a512:	683b      	ldr	r3, [r7, #0]
 800a514:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(SAI_InitStruct->SAI_AudioMode     | SAI_InitStruct->SAI_Protocol  |
 800a516:	431a      	orrs	r2, r3
                       SAI_InitStruct->SAI_DataSize      | SAI_InitStruct->SAI_FirstBit  |  
 800a518:	683b      	ldr	r3, [r7, #0]
 800a51a:	68db      	ldr	r3, [r3, #12]
 800a51c:	431a      	orrs	r2, r3
                       SAI_InitStruct->SAI_ClockStrobing | SAI_InitStruct->SAI_Synchro   |  
 800a51e:	683b      	ldr	r3, [r7, #0]
 800a520:	691b      	ldr	r3, [r3, #16]
                       SAI_InitStruct->SAI_DataSize      | SAI_InitStruct->SAI_FirstBit  |  
 800a522:	431a      	orrs	r2, r3
                       SAI_InitStruct->SAI_ClockStrobing | SAI_InitStruct->SAI_Synchro   |  
 800a524:	683b      	ldr	r3, [r7, #0]
 800a526:	695b      	ldr	r3, [r3, #20]
 800a528:	431a      	orrs	r2, r3
                       SAI_InitStruct->SAI_OUTDRIV       | SAI_InitStruct->SAI_NoDivider | 
 800a52a:	683b      	ldr	r3, [r7, #0]
 800a52c:	699b      	ldr	r3, [r3, #24]
                       SAI_InitStruct->SAI_ClockStrobing | SAI_InitStruct->SAI_Synchro   |  
 800a52e:	431a      	orrs	r2, r3
                       SAI_InitStruct->SAI_OUTDRIV       | SAI_InitStruct->SAI_NoDivider | 
 800a530:	683b      	ldr	r3, [r7, #0]
 800a532:	69db      	ldr	r3, [r3, #28]
 800a534:	431a      	orrs	r2, r3
                       (uint32_t)((SAI_InitStruct->SAI_MasterDivider) << 20));
 800a536:	683b      	ldr	r3, [r7, #0]
 800a538:	6a1b      	ldr	r3, [r3, #32]
 800a53a:	051b      	lsls	r3, r3, #20
  tmpreg |= (uint32_t)(SAI_InitStruct->SAI_AudioMode     | SAI_InitStruct->SAI_Protocol  |
 800a53c:	4313      	orrs	r3, r2
 800a53e:	68fa      	ldr	r2, [r7, #12]
 800a540:	4313      	orrs	r3, r2
 800a542:	60fb      	str	r3, [r7, #12]
  /* Write to SAI_Block_x CR1 */
  SAI_Block_x->CR1 = tmpreg;
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	68fa      	ldr	r2, [r7, #12]
 800a548:	601a      	str	r2, [r3, #0]
  
  /* SAI Block_x CR2 Configuration */
  /* Get the SAIBlock_x CR2 value */
  tmpreg = SAI_Block_x->CR2;
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	685b      	ldr	r3, [r3, #4]
 800a54e:	60fb      	str	r3, [r7, #12]
  /* Clear FTH bits */
  tmpreg &= ~(SAI_xCR2_FTH);
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	f023 0303 	bic.w	r3, r3, #3
 800a556:	60fb      	str	r3, [r7, #12]
  /* Configure the FIFO Level */
  /* Set FTH bits according to SAI_FIFOThreshold value */ 
  tmpreg |= (uint32_t)(SAI_InitStruct->SAI_FIFOThreshold);
 800a558:	683b      	ldr	r3, [r7, #0]
 800a55a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a55c:	68fa      	ldr	r2, [r7, #12]
 800a55e:	4313      	orrs	r3, r2
 800a560:	60fb      	str	r3, [r7, #12]
  /* Write to SAI_Block_x CR2 */
  SAI_Block_x->CR2 = tmpreg;
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	68fa      	ldr	r2, [r7, #12]
 800a566:	605a      	str	r2, [r3, #4]
}
 800a568:	bf00      	nop
 800a56a:	3714      	adds	r7, #20
 800a56c:	46bd      	mov	sp, r7
 800a56e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a572:	4770      	bx	lr
 800a574:	ff07c010 	.word	0xff07c010

0800a578 <SAI_FrameInit>:
  * @param  SAI_FrameInitStruct: pointer to an SAI_FrameInitTypeDef structure that
  *         contains the configuration of audio frame for a specified SAI Block                       
  * @retval None
  */
void SAI_FrameInit(SAI_Block_TypeDef* SAI_Block_x, SAI_FrameInitTypeDef* SAI_FrameInitStruct)
{
 800a578:	b480      	push	{r7}
 800a57a:	b085      	sub	sp, #20
 800a57c:	af00      	add	r7, sp, #0
 800a57e:	6078      	str	r0, [r7, #4]
 800a580:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800a582:	2300      	movs	r3, #0
 800a584:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SAI_BLOCK_FS_POLARITY(SAI_FrameInitStruct->SAI_FSPolarity));
  assert_param(IS_SAI_BLOCK_FS_OFFSET(SAI_FrameInitStruct->SAI_FSOffset));

  /* SAI Block_x FRCR Configuration */
  /* Get the SAI Block_x FRCR value */
  tmpreg = SAI_Block_x->FRCR;
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	689b      	ldr	r3, [r3, #8]
 800a58a:	60fb      	str	r3, [r7, #12]
  /* Clear FRL, FSALL, FSDEF, FSPOL, FSOFF bits */
  tmpreg &= FRCR_CLEAR_MASK;
 800a58c:	68fa      	ldr	r2, [r7, #12]
 800a58e:	4b10      	ldr	r3, [pc, #64]	; (800a5d0 <SAI_FrameInit+0x58>)
 800a590:	4013      	ands	r3, r2
 800a592:	60fb      	str	r3, [r7, #12]
  /* Set FRL bits according to SAI_FrameLength value         */
  /* Set FSALL bits according to SAI_ActiveFrameLength value */
  /* Set FSDEF bit according to SAI_FSDefinition value       */
  /* Set FSPOL bit according to SAI_FSPolarity value         */
  /* Set FSOFF bit according to SAI_FSOffset value           */
  tmpreg |= (uint32_t)((uint32_t)(SAI_FrameInitStruct->SAI_FrameLength - 1)  | 
 800a594:	683b      	ldr	r3, [r7, #0]
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	1e5a      	subs	r2, r3, #1
                       SAI_FrameInitStruct->SAI_FSOffset     | 
 800a59a:	683b      	ldr	r3, [r7, #0]
 800a59c:	691b      	ldr	r3, [r3, #16]
  tmpreg |= (uint32_t)((uint32_t)(SAI_FrameInitStruct->SAI_FrameLength - 1)  | 
 800a59e:	431a      	orrs	r2, r3
                       SAI_FrameInitStruct->SAI_FSDefinition |    
 800a5a0:	683b      	ldr	r3, [r7, #0]
 800a5a2:	689b      	ldr	r3, [r3, #8]
                       SAI_FrameInitStruct->SAI_FSOffset     | 
 800a5a4:	431a      	orrs	r2, r3
                       SAI_FrameInitStruct->SAI_FSPolarity   |                        
 800a5a6:	683b      	ldr	r3, [r7, #0]
 800a5a8:	68db      	ldr	r3, [r3, #12]
                       SAI_FrameInitStruct->SAI_FSDefinition |    
 800a5aa:	431a      	orrs	r2, r3
                       (uint32_t)((SAI_FrameInitStruct->SAI_ActiveFrameLength - 1) << 8));
 800a5ac:	683b      	ldr	r3, [r7, #0]
 800a5ae:	685b      	ldr	r3, [r3, #4]
 800a5b0:	3b01      	subs	r3, #1
 800a5b2:	021b      	lsls	r3, r3, #8
  tmpreg |= (uint32_t)((uint32_t)(SAI_FrameInitStruct->SAI_FrameLength - 1)  | 
 800a5b4:	4313      	orrs	r3, r2
 800a5b6:	68fa      	ldr	r2, [r7, #12]
 800a5b8:	4313      	orrs	r3, r2
 800a5ba:	60fb      	str	r3, [r7, #12]
                       
  /* Write to SAI_Block_x FRCR */
  SAI_Block_x->FRCR = tmpreg;
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	68fa      	ldr	r2, [r7, #12]
 800a5c0:	609a      	str	r2, [r3, #8]
}
 800a5c2:	bf00      	nop
 800a5c4:	3714      	adds	r7, #20
 800a5c6:	46bd      	mov	sp, r7
 800a5c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5cc:	4770      	bx	lr
 800a5ce:	bf00      	nop
 800a5d0:	fff88000 	.word	0xfff88000

0800a5d4 <SAI_SlotInit>:
  * @param  SAI_SlotInitStruct: pointer to an SAI_SlotInitTypeDef structure that
  *         contains the configuration of audio slot for a specified SAI Block                      
  * @retval None
  */
void SAI_SlotInit(SAI_Block_TypeDef* SAI_Block_x, SAI_SlotInitTypeDef* SAI_SlotInitStruct)
{
 800a5d4:	b480      	push	{r7}
 800a5d6:	b085      	sub	sp, #20
 800a5d8:	af00      	add	r7, sp, #0
 800a5da:	6078      	str	r0, [r7, #4]
 800a5dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800a5de:	2300      	movs	r3, #0
 800a5e0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(SAI_SlotInitStruct->SAI_SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(SAI_SlotInitStruct->SAI_SlotActive));

  /* SAI Block_x SLOTR Configuration */
  /* Get the SAI Block_x SLOTR value */
  tmpreg = SAI_Block_x->SLOTR;
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	68db      	ldr	r3, [r3, #12]
 800a5e6:	60fb      	str	r3, [r7, #12]
  /* Clear FBOFF, SLOTSZ, NBSLOT, SLOTEN bits */
  tmpreg &= SLOTR_CLEAR_MASK;
 800a5e8:	68fa      	ldr	r2, [r7, #12]
 800a5ea:	f24f 0320 	movw	r3, #61472	; 0xf020
 800a5ee:	4013      	ands	r3, r2
 800a5f0:	60fb      	str	r3, [r7, #12]
     audio frame and slots activated in audio frame */
  /* Set FBOFF bits according to SAI_FirstBitOffset value  */
  /* Set SLOTSZ bits according to SAI_SlotSize value       */
  /* Set NBSLOT bits according to SAI_SlotNumber value     */
  /* Set SLOTEN bits according to SAI_SlotActive value     */
  tmpreg |= (uint32_t)(SAI_SlotInitStruct->SAI_FirstBitOffset | 
 800a5f2:	683b      	ldr	r3, [r7, #0]
 800a5f4:	681a      	ldr	r2, [r3, #0]
                       SAI_SlotInitStruct->SAI_SlotSize       | 
 800a5f6:	683b      	ldr	r3, [r7, #0]
 800a5f8:	685b      	ldr	r3, [r3, #4]
  tmpreg |= (uint32_t)(SAI_SlotInitStruct->SAI_FirstBitOffset | 
 800a5fa:	431a      	orrs	r2, r3
                       SAI_SlotInitStruct->SAI_SlotActive     |    
 800a5fc:	683b      	ldr	r3, [r7, #0]
 800a5fe:	68db      	ldr	r3, [r3, #12]
                       SAI_SlotInitStruct->SAI_SlotSize       | 
 800a600:	431a      	orrs	r2, r3
                       (uint32_t)((SAI_SlotInitStruct->SAI_SlotNumber - 1) <<  8));
 800a602:	683b      	ldr	r3, [r7, #0]
 800a604:	689b      	ldr	r3, [r3, #8]
 800a606:	3b01      	subs	r3, #1
 800a608:	021b      	lsls	r3, r3, #8
  tmpreg |= (uint32_t)(SAI_SlotInitStruct->SAI_FirstBitOffset | 
 800a60a:	4313      	orrs	r3, r2
 800a60c:	68fa      	ldr	r2, [r7, #12]
 800a60e:	4313      	orrs	r3, r2
 800a610:	60fb      	str	r3, [r7, #12]
                       
  /* Write to SAI_Block_x SLOTR */
  SAI_Block_x->SLOTR = tmpreg;
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	68fa      	ldr	r2, [r7, #12]
 800a616:	60da      	str	r2, [r3, #12]
}
 800a618:	bf00      	nop
 800a61a:	3714      	adds	r7, #20
 800a61c:	46bd      	mov	sp, r7
 800a61e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a622:	4770      	bx	lr

0800a624 <SAI_StructInit>:
  * @param  SAI_InitStruct: pointer to a SAI_InitTypeDef structure which will 
  *         be initialized.  
  * @retval None
  */
void SAI_StructInit(SAI_InitTypeDef* SAI_InitStruct)
{
 800a624:	b480      	push	{r7}
 800a626:	b083      	sub	sp, #12
 800a628:	af00      	add	r7, sp, #0
 800a62a:	6078      	str	r0, [r7, #4]
  /* Reset SAI init structure parameters values */
  /* Initialize the SAI_AudioMode member */
  SAI_InitStruct->SAI_AudioMode = SAI_Mode_MasterTx;
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	2200      	movs	r2, #0
 800a630:	601a      	str	r2, [r3, #0]
  /* Initialize the SAI_Protocol member */
  SAI_InitStruct->SAI_Protocol = SAI_Free_Protocol;
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	2200      	movs	r2, #0
 800a636:	605a      	str	r2, [r3, #4]
  /* Initialize the SAI_DataSize member */
  SAI_InitStruct->SAI_DataSize = SAI_DataSize_8b;
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	2240      	movs	r2, #64	; 0x40
 800a63c:	609a      	str	r2, [r3, #8]
  /* Initialize the SAI_FirstBit member */
  SAI_InitStruct->SAI_FirstBit = SAI_FirstBit_MSB;
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	2200      	movs	r2, #0
 800a642:	60da      	str	r2, [r3, #12]
  /* Initialize the SAI_ClockStrobing member */
  SAI_InitStruct->SAI_ClockStrobing = SAI_ClockStrobing_FallingEdge;
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	2200      	movs	r2, #0
 800a648:	611a      	str	r2, [r3, #16]
  /* Initialize the SAI_Synchro member */
  SAI_InitStruct->SAI_Synchro = SAI_Asynchronous;
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	2200      	movs	r2, #0
 800a64e:	615a      	str	r2, [r3, #20]
  /* Initialize the SAI_OUTDRIV member */
  SAI_InitStruct->SAI_OUTDRIV = SAI_OutputDrive_Disabled;
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	2200      	movs	r2, #0
 800a654:	619a      	str	r2, [r3, #24]
  /* Initialize the SAI_NoDivider member */
  SAI_InitStruct->SAI_NoDivider = SAI_MasterDivider_Enabled;
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	2200      	movs	r2, #0
 800a65a:	61da      	str	r2, [r3, #28]
  /* Initialize the SAI_MasterDivider member */
  SAI_InitStruct->SAI_MasterDivider = 0;
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	2200      	movs	r2, #0
 800a660:	621a      	str	r2, [r3, #32]
  /* Initialize the SAI_FIFOThreshold member */
  SAI_InitStruct->SAI_FIFOThreshold = SAI_Threshold_FIFOEmpty;
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	2200      	movs	r2, #0
 800a666:	625a      	str	r2, [r3, #36]	; 0x24
}
 800a668:	bf00      	nop
 800a66a:	370c      	adds	r7, #12
 800a66c:	46bd      	mov	sp, r7
 800a66e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a672:	4770      	bx	lr

0800a674 <SAI_FrameStructInit>:
  * @param  SAI_FrameInitStruct: pointer to a SAI_FrameInitTypeDef structure 
  *         which will be initialized.                     
  * @retval None
  */
void SAI_FrameStructInit(SAI_FrameInitTypeDef* SAI_FrameInitStruct)
{
 800a674:	b480      	push	{r7}
 800a676:	b083      	sub	sp, #12
 800a678:	af00      	add	r7, sp, #0
 800a67a:	6078      	str	r0, [r7, #4]
  /* Reset SAI Frame init structure parameters values */
  /* Initialize the SAI_FrameLength member */
  SAI_FrameInitStruct->SAI_FrameLength = 8;
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	2208      	movs	r2, #8
 800a680:	601a      	str	r2, [r3, #0]
  /* Initialize the SAI_ActiveFrameLength member */
  SAI_FrameInitStruct->SAI_ActiveFrameLength = 1;
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	2201      	movs	r2, #1
 800a686:	605a      	str	r2, [r3, #4]
  /* Initialize the SAI_FSDefinition member */
  SAI_FrameInitStruct->SAI_FSDefinition = SAI_FS_StartFrame;
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	2200      	movs	r2, #0
 800a68c:	609a      	str	r2, [r3, #8]
  /* Initialize the SAI_FSPolarity member */
  SAI_FrameInitStruct->SAI_FSPolarity = SAI_FS_ActiveLow;
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	2200      	movs	r2, #0
 800a692:	60da      	str	r2, [r3, #12]
  /* Initialize the SAI_FSOffset member */
  SAI_FrameInitStruct->SAI_FSOffset = SAI_FS_FirstBit;
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	2200      	movs	r2, #0
 800a698:	611a      	str	r2, [r3, #16]
}
 800a69a:	bf00      	nop
 800a69c:	370c      	adds	r7, #12
 800a69e:	46bd      	mov	sp, r7
 800a6a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6a4:	4770      	bx	lr

0800a6a6 <SAI_SlotStructInit>:
  * @param  SAI_SlotInitStruct: pointer to a SAI_SlotInitTypeDef structure 
  *         which will be initialized.                     
  * @retval None
  */
void SAI_SlotStructInit(SAI_SlotInitTypeDef* SAI_SlotInitStruct)
{
 800a6a6:	b480      	push	{r7}
 800a6a8:	b083      	sub	sp, #12
 800a6aa:	af00      	add	r7, sp, #0
 800a6ac:	6078      	str	r0, [r7, #4]
  /* Reset SAI Slot init structure parameters values */
  /* Initialize the SAI_FirstBitOffset member */
  SAI_SlotInitStruct->SAI_FirstBitOffset = 0;
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	2200      	movs	r2, #0
 800a6b2:	601a      	str	r2, [r3, #0]
  /* Initialize the SAI_SlotSize member */
  SAI_SlotInitStruct->SAI_SlotSize = SAI_SlotSize_DataSize;
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	2200      	movs	r2, #0
 800a6b8:	605a      	str	r2, [r3, #4]
  /* Initialize the SAI_SlotNumber member */
  SAI_SlotInitStruct->SAI_SlotNumber = 1;
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	2201      	movs	r2, #1
 800a6be:	609a      	str	r2, [r3, #8]
  /* Initialize the SAI_SlotActive member */
  SAI_SlotInitStruct->SAI_SlotActive = SAI_Slot_NotActive;
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	2200      	movs	r2, #0
 800a6c4:	60da      	str	r2, [r3, #12]

}
 800a6c6:	bf00      	nop
 800a6c8:	370c      	adds	r7, #12
 800a6ca:	46bd      	mov	sp, r7
 800a6cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6d0:	4770      	bx	lr

0800a6d2 <SAI_Cmd>:
  * @param  NewState: new state of the SAI_Block_x peripheral. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SAI_Cmd(SAI_Block_TypeDef* SAI_Block_x, FunctionalState NewState)
{
 800a6d2:	b480      	push	{r7}
 800a6d4:	b083      	sub	sp, #12
 800a6d6:	af00      	add	r7, sp, #0
 800a6d8:	6078      	str	r0, [r7, #4]
 800a6da:	460b      	mov	r3, r1
 800a6dc:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SAI_BLOCK_PERIPH(SAI_Block_x));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800a6de:	78fb      	ldrb	r3, [r7, #3]
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d006      	beq.n	800a6f2 <SAI_Cmd+0x20>
  {
    /* Enable the selected SAI peripheral */
    SAI_Block_x->CR1 |= SAI_xCR1_SAIEN;
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected SAI peripheral */
    SAI_Block_x->CR1 &= ~(SAI_xCR1_SAIEN);
  }
}
 800a6f0:	e005      	b.n	800a6fe <SAI_Cmd+0x2c>
    SAI_Block_x->CR1 &= ~(SAI_xCR1_SAIEN);
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	601a      	str	r2, [r3, #0]
}
 800a6fe:	bf00      	nop
 800a700:	370c      	adds	r7, #12
 800a702:	46bd      	mov	sp, r7
 800a704:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a708:	4770      	bx	lr

0800a70a <SAI_MonoModeConfig>:
  *            @arg SAI_MonoMode : Set mono audio mode
  *            @arg SAI_StreoMode : Set streo audio mode                       
  * @retval None
  */
void SAI_MonoModeConfig(SAI_Block_TypeDef* SAI_Block_x, uint32_t SAI_Mono_StreoMode)
{
 800a70a:	b480      	push	{r7}
 800a70c:	b083      	sub	sp, #12
 800a70e:	af00      	add	r7, sp, #0
 800a710:	6078      	str	r0, [r7, #4]
 800a712:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_SAI_BLOCK_PERIPH(SAI_Block_x));
  assert_param(IS_SAI_BLOCK_MONO_STREO_MODE(SAI_MonoMode));
  /* Clear MONO bit */
  SAI_Block_x->CR1 &= ~(SAI_xCR1_MONO);
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	601a      	str	r2, [r3, #0]
  /* Set new Mono Mode value */
  SAI_Block_x->CR1 |= SAI_MonoMode;
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	601a      	str	r2, [r3, #0]
}
 800a72c:	bf00      	nop
 800a72e:	370c      	adds	r7, #12
 800a730:	46bd      	mov	sp, r7
 800a732:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a736:	4770      	bx	lr

0800a738 <SAI_TRIStateConfig>:
  *            @arg SAI_Output_NotReleased : SD output line is still drived by the SAI.
  *            @arg SAI_Output_Released : SD output line is released (HI-Z)                       
  * @retval None
  */
void SAI_TRIStateConfig(SAI_Block_TypeDef* SAI_Block_x, uint32_t SAI_TRIState)
{
 800a738:	b480      	push	{r7}
 800a73a:	b083      	sub	sp, #12
 800a73c:	af00      	add	r7, sp, #0
 800a73e:	6078      	str	r0, [r7, #4]
 800a740:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_SAI_BLOCK_PERIPH(SAI_Block_x));
  assert_param(IS_SAI_BLOCK_TRISTATE_MANAGEMENT(SAI_TRIState));
  /* Clear MONO bit */
  SAI_Block_x->CR1 &= ~(SAI_xCR1_MONO);
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	601a      	str	r2, [r3, #0]
  /* Set new Mono Mode value */
  SAI_Block_x->CR1 |= SAI_MonoMode;  
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	601a      	str	r2, [r3, #0]
  
}
 800a75a:	bf00      	nop
 800a75c:	370c      	adds	r7, #12
 800a75e:	46bd      	mov	sp, r7
 800a760:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a764:	4770      	bx	lr

0800a766 <SAI_CompandingModeConfig>:
  *            @arg SAI_ULaw_2CPL_Companding : Set U law (algorithm 2's complement representation)
  *            @arg SAI_ALaw_2CPL_Companding : Set A law (algorithm 2's complement repesentation)  
  * @retval None
  */
void SAI_CompandingModeConfig(SAI_Block_TypeDef* SAI_Block_x, uint32_t SAI_CompandingMode)
{
 800a766:	b480      	push	{r7}
 800a768:	b083      	sub	sp, #12
 800a76a:	af00      	add	r7, sp, #0
 800a76c:	6078      	str	r0, [r7, #4]
 800a76e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_SAI_BLOCK_PERIPH(SAI_Block_x));
  assert_param(IS_SAI_BLOCK_COMPANDING_MODE(SAI_CompandingMode));
  /* Clear Companding Mode bits */
  SAI_Block_x->CR2 &= ~(SAI_xCR2_COMP);
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	685b      	ldr	r3, [r3, #4]
 800a774:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	605a      	str	r2, [r3, #4]
  /* Set new Companding Mode value */
  SAI_Block_x->CR2 |= SAI_CompandingMode;
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	685a      	ldr	r2, [r3, #4]
 800a780:	683b      	ldr	r3, [r7, #0]
 800a782:	431a      	orrs	r2, r3
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	605a      	str	r2, [r3, #4]
}
 800a788:	bf00      	nop
 800a78a:	370c      	adds	r7, #12
 800a78c:	46bd      	mov	sp, r7
 800a78e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a792:	4770      	bx	lr

0800a794 <SAI_MuteModeCmd>:
  * @param  NewState: new state of the SAIx block. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SAI_MuteModeCmd(SAI_Block_TypeDef* SAI_Block_x, FunctionalState NewState)
{
 800a794:	b480      	push	{r7}
 800a796:	b083      	sub	sp, #12
 800a798:	af00      	add	r7, sp, #0
 800a79a:	6078      	str	r0, [r7, #4]
 800a79c:	460b      	mov	r3, r1
 800a79e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SAI_BLOCK_PERIPH(SAI_Block_x));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800a7a0:	78fb      	ldrb	r3, [r7, #3]
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d006      	beq.n	800a7b4 <SAI_MuteModeCmd+0x20>
  {
    /* Enable the selected SAI block mute mode */
    SAI_Block_x->CR2 |= SAI_xCR2_MUTE;
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	685b      	ldr	r3, [r3, #4]
 800a7aa:	f043 0220 	orr.w	r2, r3, #32
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	605a      	str	r2, [r3, #4]
  else
  {
    /* Disable the selected SAI SS output */
    SAI_Block_x->CR2 &= ~(SAI_xCR2_MUTE);
  }
}
 800a7b2:	e005      	b.n	800a7c0 <SAI_MuteModeCmd+0x2c>
    SAI_Block_x->CR2 &= ~(SAI_xCR2_MUTE);
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	685b      	ldr	r3, [r3, #4]
 800a7b8:	f023 0220 	bic.w	r2, r3, #32
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	605a      	str	r2, [r3, #4]
}
 800a7c0:	bf00      	nop
 800a7c2:	370c      	adds	r7, #12
 800a7c4:	46bd      	mov	sp, r7
 800a7c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ca:	4770      	bx	lr

0800a7cc <SAI_MuteValueConfig>:
  *            @arg SAI_ZeroValue : bit value 0 is sent during Mute Mode
  *            @arg SAI_LastSentValue : Last value is sent during Mute Mode  
  * @retval None
  */
void SAI_MuteValueConfig(SAI_Block_TypeDef* SAI_Block_x, uint32_t SAI_MuteValue)
{
 800a7cc:	b480      	push	{r7}
 800a7ce:	b083      	sub	sp, #12
 800a7d0:	af00      	add	r7, sp, #0
 800a7d2:	6078      	str	r0, [r7, #4]
 800a7d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_SAI_BLOCK_PERIPH(SAI_Block_x));
  assert_param(IS_SAI_BLOCK_MUTE_VALUE(SAI_MuteValue));
  
  /* Clear Mute value bits */
  SAI_Block_x->CR2 &= ~(SAI_xCR2_MUTEVAL);
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	685b      	ldr	r3, [r3, #4]
 800a7da:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	605a      	str	r2, [r3, #4]
  /* Set new Mute value */
  SAI_Block_x->CR2 |= SAI_MuteValue;
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	685a      	ldr	r2, [r3, #4]
 800a7e6:	683b      	ldr	r3, [r7, #0]
 800a7e8:	431a      	orrs	r2, r3
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	605a      	str	r2, [r3, #4]
}
 800a7ee:	bf00      	nop
 800a7f0:	370c      	adds	r7, #12
 800a7f2:	46bd      	mov	sp, r7
 800a7f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7f8:	4770      	bx	lr

0800a7fa <SAI_MuteFrameCounterConfig>:
  *         This parameter can be a number between 0 and 63.  
 
  * @retval None
  */
void SAI_MuteFrameCounterConfig(SAI_Block_TypeDef* SAI_Block_x, uint32_t SAI_MuteCounter)
{
 800a7fa:	b480      	push	{r7}
 800a7fc:	b083      	sub	sp, #12
 800a7fe:	af00      	add	r7, sp, #0
 800a800:	6078      	str	r0, [r7, #4]
 800a802:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_SAI_BLOCK_PERIPH(SAI_Block_x));
  assert_param(IS_SAI_BLOCK_MUTE_COUNTER(SAI_MuteCounter));
  
  /* Clear Mute value bits */
  SAI_Block_x->CR2 &= ~(SAI_xCR2_MUTECNT);
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	685b      	ldr	r3, [r3, #4]
 800a808:	f423 52fc 	bic.w	r2, r3, #8064	; 0x1f80
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	605a      	str	r2, [r3, #4]
  /* Set new Mute value */
  SAI_Block_x->CR2 |= (SAI_MuteCounter << 7);
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	685a      	ldr	r2, [r3, #4]
 800a814:	683b      	ldr	r3, [r7, #0]
 800a816:	01db      	lsls	r3, r3, #7
 800a818:	431a      	orrs	r2, r3
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	605a      	str	r2, [r3, #4]
}
 800a81e:	bf00      	nop
 800a820:	370c      	adds	r7, #12
 800a822:	46bd      	mov	sp, r7
 800a824:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a828:	4770      	bx	lr

0800a82a <SAI_FlushFIFO>:
  * @param  NewState: new state of the selected SAI TI communication mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SAI_FlushFIFO(SAI_Block_TypeDef* SAI_Block_x)
{
 800a82a:	b480      	push	{r7}
 800a82c:	b083      	sub	sp, #12
 800a82e:	af00      	add	r7, sp, #0
 800a830:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SAI_BLOCK_PERIPH(SAI_Block_x));

  /* FIFO flush */
  SAI_Block_x->CR2 |= SAI_xCR2_FFLUSH;
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	685b      	ldr	r3, [r3, #4]
 800a836:	f043 0208 	orr.w	r2, r3, #8
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	605a      	str	r2, [r3, #4]
}
 800a83e:	bf00      	nop
 800a840:	370c      	adds	r7, #12
 800a842:	46bd      	mov	sp, r7
 800a844:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a848:	4770      	bx	lr

0800a84a <SAI_ReceiveData>:
  * @param  SAI_Block_x: where x can be A or B to select the SAI Block peripheral. 
  *         
  * @retval The value of the received data.
  */
uint32_t SAI_ReceiveData(SAI_Block_TypeDef* SAI_Block_x)
{
 800a84a:	b480      	push	{r7}
 800a84c:	b083      	sub	sp, #12
 800a84e:	af00      	add	r7, sp, #0
 800a850:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SAI_BLOCK_PERIPH(SAI_Block_x));
  
  /* Return the data in the DR register */
  return SAI_Block_x->DR;
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	69db      	ldr	r3, [r3, #28]
}
 800a856:	4618      	mov	r0, r3
 800a858:	370c      	adds	r7, #12
 800a85a:	46bd      	mov	sp, r7
 800a85c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a860:	4770      	bx	lr

0800a862 <SAI_SendData>:
  *        
  * @param  Data: Data to be transmitted.
  * @retval None
  */
void SAI_SendData(SAI_Block_TypeDef* SAI_Block_x, uint32_t Data)
{
 800a862:	b480      	push	{r7}
 800a864:	b083      	sub	sp, #12
 800a866:	af00      	add	r7, sp, #0
 800a868:	6078      	str	r0, [r7, #4]
 800a86a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_SAI_BLOCK_PERIPH(SAI_Block_x));
  
  /* Write in the DR register the data to be sent */
  SAI_Block_x->DR = Data;
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	683a      	ldr	r2, [r7, #0]
 800a870:	61da      	str	r2, [r3, #28]
}
 800a872:	bf00      	nop
 800a874:	370c      	adds	r7, #12
 800a876:	46bd      	mov	sp, r7
 800a878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a87c:	4770      	bx	lr

0800a87e <SAI_DMACmd>:
  * @param  NewState: new state of the selected SAI block DMA transfer request.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SAI_DMACmd(SAI_Block_TypeDef* SAI_Block_x, FunctionalState NewState)
{
 800a87e:	b480      	push	{r7}
 800a880:	b083      	sub	sp, #12
 800a882:	af00      	add	r7, sp, #0
 800a884:	6078      	str	r0, [r7, #4]
 800a886:	460b      	mov	r3, r1
 800a888:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SAI_BLOCK_PERIPH(SAI_Block_x));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800a88a:	78fb      	ldrb	r3, [r7, #3]
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d006      	beq.n	800a89e <SAI_DMACmd+0x20>
  {
    /* Enable the selected SAI block mute mode */
    SAI_Block_x->CR1 |= SAI_xCR1_DMAEN;
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected SAI SS output */
    SAI_Block_x->CR1 &= ~(SAI_xCR1_DMAEN);
  }
}
 800a89c:	e005      	b.n	800a8aa <SAI_DMACmd+0x2c>
    SAI_Block_x->CR1 &= ~(SAI_xCR1_DMAEN);
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	601a      	str	r2, [r3, #0]
}
 800a8aa:	bf00      	nop
 800a8ac:	370c      	adds	r7, #12
 800a8ae:	46bd      	mov	sp, r7
 800a8b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8b4:	4770      	bx	lr

0800a8b6 <SAI_ITConfig>:
  * @param  NewState: new state of the specified SAI interrupt.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SAI_ITConfig(SAI_Block_TypeDef* SAI_Block_x, uint32_t SAI_IT, FunctionalState NewState)
{ 
 800a8b6:	b480      	push	{r7}
 800a8b8:	b085      	sub	sp, #20
 800a8ba:	af00      	add	r7, sp, #0
 800a8bc:	60f8      	str	r0, [r7, #12]
 800a8be:	60b9      	str	r1, [r7, #8]
 800a8c0:	4613      	mov	r3, r2
 800a8c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_SAI_BLOCK_PERIPH(SAI_Block_x));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_SAI_BLOCK_CONFIG_IT(SAI_IT));

  if (NewState != DISABLE)
 800a8c4:	79fb      	ldrb	r3, [r7, #7]
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d006      	beq.n	800a8d8 <SAI_ITConfig+0x22>
  {
    /* Enable the selected SAI Block interrupt */
    SAI_Block_x->IMR |= SAI_IT;
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	691a      	ldr	r2, [r3, #16]
 800a8ce:	68bb      	ldr	r3, [r7, #8]
 800a8d0:	431a      	orrs	r2, r3
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	611a      	str	r2, [r3, #16]
  else
  {
    /* Disable the selected SAI Block interrupt */
    SAI_Block_x->IMR &= ~(SAI_IT);
  }
}
 800a8d6:	e006      	b.n	800a8e6 <SAI_ITConfig+0x30>
    SAI_Block_x->IMR &= ~(SAI_IT);
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	691a      	ldr	r2, [r3, #16]
 800a8dc:	68bb      	ldr	r3, [r7, #8]
 800a8de:	43db      	mvns	r3, r3
 800a8e0:	401a      	ands	r2, r3
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	611a      	str	r2, [r3, #16]
}
 800a8e6:	bf00      	nop
 800a8e8:	3714      	adds	r7, #20
 800a8ea:	46bd      	mov	sp, r7
 800a8ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8f0:	4770      	bx	lr

0800a8f2 <SAI_GetFlagStatus>:
  *            @arg SAI_FLAG_AFSDET: anticipated frame synchronization detection flag.
  *            @arg SAI_FLAG_LFSDET: late frame synchronization detection flag.
  * @retval The new state of SAI_FLAG (SET or RESET).
  */
FlagStatus SAI_GetFlagStatus(SAI_Block_TypeDef* SAI_Block_x, uint32_t SAI_FLAG)
{
 800a8f2:	b480      	push	{r7}
 800a8f4:	b085      	sub	sp, #20
 800a8f6:	af00      	add	r7, sp, #0
 800a8f8:	6078      	str	r0, [r7, #4]
 800a8fa:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 800a8fc:	2300      	movs	r3, #0
 800a8fe:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SAI_BLOCK_PERIPH(SAI_Block_x));
  assert_param(IS_SAI_BLOCK_GET_FLAG(SAI_FLAG));
  
  /* Check the status of the specified SAI flag */
  if ((SAI_Block_x->SR & SAI_FLAG) != (uint32_t)RESET)
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	695a      	ldr	r2, [r3, #20]
 800a904:	683b      	ldr	r3, [r7, #0]
 800a906:	4013      	ands	r3, r2
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d002      	beq.n	800a912 <SAI_GetFlagStatus+0x20>
  {
    /* SAI_FLAG is set */
    bitstatus = SET;
 800a90c:	2301      	movs	r3, #1
 800a90e:	73fb      	strb	r3, [r7, #15]
 800a910:	e001      	b.n	800a916 <SAI_GetFlagStatus+0x24>
  }
  else
  {
    /* SAI_FLAG is reset */
    bitstatus = RESET;
 800a912:	2300      	movs	r3, #0
 800a914:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SAI_FLAG status */
  return  bitstatus;
 800a916:	7bfb      	ldrb	r3, [r7, #15]
}
 800a918:	4618      	mov	r0, r3
 800a91a:	3714      	adds	r7, #20
 800a91c:	46bd      	mov	sp, r7
 800a91e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a922:	4770      	bx	lr

0800a924 <SAI_ClearFlag>:
  *          - When the audio block is receiver and the FIFO is not empty           
  *  
  * @retval None
  */
void SAI_ClearFlag(SAI_Block_TypeDef* SAI_Block_x, uint32_t SAI_FLAG)
{
 800a924:	b480      	push	{r7}
 800a926:	b083      	sub	sp, #12
 800a928:	af00      	add	r7, sp, #0
 800a92a:	6078      	str	r0, [r7, #4]
 800a92c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_SAI_BLOCK_PERIPH(SAI_Block_x));
  assert_param(IS_SAI_BLOCK_CLEAR_FLAG(SAI_FLAG));
    
  /* Clear the selected SAI Block flag */
  SAI_Block_x->CLRFR |= SAI_FLAG;
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	699a      	ldr	r2, [r3, #24]
 800a932:	683b      	ldr	r3, [r7, #0]
 800a934:	431a      	orrs	r2, r3
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	619a      	str	r2, [r3, #24]
}
 800a93a:	bf00      	nop
 800a93c:	370c      	adds	r7, #12
 800a93e:	46bd      	mov	sp, r7
 800a940:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a944:	4770      	bx	lr

0800a946 <SAI_GetITStatus>:
  *            @arg SAI_IT_WCKCFG: wrong clock configuration interrupt 
  *                
  * @retval The new state of SAI_IT (SET or RESET).
  */
ITStatus SAI_GetITStatus(SAI_Block_TypeDef* SAI_Block_x, uint32_t SAI_IT)
{
 800a946:	b480      	push	{r7}
 800a948:	b085      	sub	sp, #20
 800a94a:	af00      	add	r7, sp, #0
 800a94c:	6078      	str	r0, [r7, #4]
 800a94e:	6039      	str	r1, [r7, #0]
  ITStatus bitstatus = RESET;
 800a950:	2300      	movs	r3, #0
 800a952:	73fb      	strb	r3, [r7, #15]
  uint32_t  enablestatus = 0;
 800a954:	2300      	movs	r3, #0
 800a956:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_SAI_BLOCK_PERIPH(SAI_Block_x));
  assert_param(IS_SAI_BLOCK_CONFIG_IT(SAI_IT));
  
  /* Get the SAI_IT enable bit status */
  enablestatus = (SAI_Block_x->IMR & SAI_IT) ;
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	691b      	ldr	r3, [r3, #16]
 800a95c:	683a      	ldr	r2, [r7, #0]
 800a95e:	4013      	ands	r3, r2
 800a960:	60bb      	str	r3, [r7, #8]

  /* Check the status of the specified SAI interrupt */
  if (((SAI_Block_x->SR & SAI_IT) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	695a      	ldr	r2, [r3, #20]
 800a966:	683b      	ldr	r3, [r7, #0]
 800a968:	4013      	ands	r3, r2
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d005      	beq.n	800a97a <SAI_GetITStatus+0x34>
 800a96e:	68bb      	ldr	r3, [r7, #8]
 800a970:	2b00      	cmp	r3, #0
 800a972:	d002      	beq.n	800a97a <SAI_GetITStatus+0x34>
  {
    /* SAI_IT is set */
    bitstatus = SET;
 800a974:	2301      	movs	r3, #1
 800a976:	73fb      	strb	r3, [r7, #15]
 800a978:	e001      	b.n	800a97e <SAI_GetITStatus+0x38>
  }
  else
  {
    /* SAI_IT is reset */
    bitstatus = RESET;
 800a97a:	2300      	movs	r3, #0
 800a97c:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SAI_IT status */
  return bitstatus;
 800a97e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a980:	4618      	mov	r0, r3
 800a982:	3714      	adds	r7, #20
 800a984:	46bd      	mov	sp, r7
 800a986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a98a:	4770      	bx	lr

0800a98c <SAI_ClearITPendingBit>:
  *          - When the audio block is receiver and the FIFO is not empty  
  *            
  * @retval None
  */
void SAI_ClearITPendingBit(SAI_Block_TypeDef* SAI_Block_x, uint32_t SAI_IT)
{
 800a98c:	b480      	push	{r7}
 800a98e:	b083      	sub	sp, #12
 800a990:	af00      	add	r7, sp, #0
 800a992:	6078      	str	r0, [r7, #4]
 800a994:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_SAI_BLOCK_PERIPH(SAI_Block_x));
  assert_param(IS_SAI_BLOCK_CONFIG_IT(SAI_IT));

  /* Clear the selected SAI Block x interrupt pending bit */
  SAI_Block_x->CLRFR |= SAI_IT; 
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	699a      	ldr	r2, [r3, #24]
 800a99a:	683b      	ldr	r3, [r7, #0]
 800a99c:	431a      	orrs	r2, r3
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	619a      	str	r2, [r3, #24]
}
 800a9a2:	bf00      	nop
 800a9a4:	370c      	adds	r7, #12
 800a9a6:	46bd      	mov	sp, r7
 800a9a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ac:	4770      	bx	lr

0800a9ae <SAI_GetCmdStatus>:
  *          the end of audio frame.  
  *      
  * @retval Current state of the DMAy Streamx (ENABLE or DISABLE).
  */
FunctionalState SAI_GetCmdStatus(SAI_Block_TypeDef* SAI_Block_x)
{
 800a9ae:	b480      	push	{r7}
 800a9b0:	b085      	sub	sp, #20
 800a9b2:	af00      	add	r7, sp, #0
 800a9b4:	6078      	str	r0, [r7, #4]
  FunctionalState state = DISABLE;
 800a9b6:	2300      	movs	r3, #0
 800a9b8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_SAI_BLOCK_PERIPH(SAI_Block_x));
  if ((SAI_Block_x->CR1 & (uint32_t)SAI_xCR1_SAIEN) != 0)
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d002      	beq.n	800a9cc <SAI_GetCmdStatus+0x1e>
  {
    /* The selected SAI Block x EN bit is set (audio frame transfer is ongoing) */
    state = ENABLE;
 800a9c6:	2301      	movs	r3, #1
 800a9c8:	73fb      	strb	r3, [r7, #15]
 800a9ca:	e001      	b.n	800a9d0 <SAI_GetCmdStatus+0x22>
  }
  else
  {
    /* The selected SAI Block x EN bit is cleared (SAI Block is disabled and 
        all transfers are complete) */
    state = DISABLE;
 800a9cc:	2300      	movs	r3, #0
 800a9ce:	73fb      	strb	r3, [r7, #15]
  }
  return state;
 800a9d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9d2:	4618      	mov	r0, r3
 800a9d4:	3714      	adds	r7, #20
 800a9d6:	46bd      	mov	sp, r7
 800a9d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9dc:	4770      	bx	lr

0800a9de <SAI_GetFIFOStatus>:
  *           - SAI_FIFOStatus_HalfFull: if more than 1 half-full.
  *           - SAI_FIFOStatus_3QuartersFull: if more than 3 quarters-full.
  *           - SAI_FIFOStatus_Full: when FIFO is full
  */
uint32_t SAI_GetFIFOStatus(SAI_Block_TypeDef* SAI_Block_x)
{
 800a9de:	b480      	push	{r7}
 800a9e0:	b085      	sub	sp, #20
 800a9e2:	af00      	add	r7, sp, #0
 800a9e4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800a9e6:	2300      	movs	r3, #0
 800a9e8:	60fb      	str	r3, [r7, #12]
 
  /* Check the parameters */
  assert_param(IS_SAI_BLOCK_PERIPH(SAI_Block_x));
  
  /* Get the FIFO level bits */
  tmpreg = (uint32_t)((SAI_Block_x->SR & SAI_xSR_FLVL));
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	695b      	ldr	r3, [r3, #20]
 800a9ee:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800a9f2:	60fb      	str	r3, [r7, #12]
  
  return tmpreg;
 800a9f4:	68fb      	ldr	r3, [r7, #12]
}
 800a9f6:	4618      	mov	r0, r3
 800a9f8:	3714      	adds	r7, #20
 800a9fa:	46bd      	mov	sp, r7
 800a9fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa00:	4770      	bx	lr
 800aa02:	bf00      	nop

0800aa04 <SDIO_DeInit>:
  * @brief  Deinitializes the SDIO peripheral registers to their default reset values.
  * @param  None
  * @retval None
  */
void SDIO_DeInit(void)
{
 800aa04:	b580      	push	{r7, lr}
 800aa06:	af00      	add	r7, sp, #0
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_SDIO, ENABLE);
 800aa08:	2101      	movs	r1, #1
 800aa0a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800aa0e:	f7fe f8a7 	bl	8008b60 <RCC_APB2PeriphResetCmd>
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_SDIO, DISABLE);
 800aa12:	2100      	movs	r1, #0
 800aa14:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800aa18:	f7fe f8a2 	bl	8008b60 <RCC_APB2PeriphResetCmd>
}
 800aa1c:	bf00      	nop
 800aa1e:	bd80      	pop	{r7, pc}

0800aa20 <SDIO_Init>:
  * @param  SDIO_InitStruct : pointer to a SDIO_InitTypeDef structure 
  *         that contains the configuration information for the SDIO peripheral.
  * @retval None
  */
void SDIO_Init(SDIO_InitTypeDef* SDIO_InitStruct)
{
 800aa20:	b480      	push	{r7}
 800aa22:	b085      	sub	sp, #20
 800aa24:	af00      	add	r7, sp, #0
 800aa26:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800aa28:	2300      	movs	r3, #0
 800aa2a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(SDIO_InitStruct->SDIO_BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(SDIO_InitStruct->SDIO_HardwareFlowControl)); 
   
/*---------------------------- SDIO CLKCR Configuration ------------------------*/  
  /* Get the SDIO CLKCR value */
  tmpreg = SDIO->CLKCR;
 800aa2c:	4b13      	ldr	r3, [pc, #76]	; (800aa7c <SDIO_Init+0x5c>)
 800aa2e:	685b      	ldr	r3, [r3, #4]
 800aa30:	60fb      	str	r3, [r7, #12]
  
  /* Clear CLKDIV, PWRSAV, BYPASS, WIDBUS, NEGEDGE, HWFC_EN bits */
  tmpreg &= CLKCR_CLEAR_MASK;
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800aa38:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800aa3c:	60fb      	str	r3, [r7, #12]
  /* Set PWRSAV bit according to SDIO_ClockPowerSave value */
  /* Set BYPASS bit according to SDIO_ClockBypass value */
  /* Set WIDBUS bits according to SDIO_BusWide value */
  /* Set NEGEDGE bits according to SDIO_ClockEdge value */
  /* Set HWFC_EN bits according to SDIO_HardwareFlowControl value */
  tmpreg |= (SDIO_InitStruct->SDIO_ClockDiv  | SDIO_InitStruct->SDIO_ClockPowerSave |
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	7d1b      	ldrb	r3, [r3, #20]
 800aa42:	461a      	mov	r2, r3
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	689b      	ldr	r3, [r3, #8]
 800aa48:	431a      	orrs	r2, r3
             SDIO_InitStruct->SDIO_ClockBypass | SDIO_InitStruct->SDIO_BusWide |
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	685b      	ldr	r3, [r3, #4]
  tmpreg |= (SDIO_InitStruct->SDIO_ClockDiv  | SDIO_InitStruct->SDIO_ClockPowerSave |
 800aa4e:	431a      	orrs	r2, r3
             SDIO_InitStruct->SDIO_ClockBypass | SDIO_InitStruct->SDIO_BusWide |
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	68db      	ldr	r3, [r3, #12]
 800aa54:	431a      	orrs	r2, r3
             SDIO_InitStruct->SDIO_ClockEdge | SDIO_InitStruct->SDIO_HardwareFlowControl); 
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	681b      	ldr	r3, [r3, #0]
             SDIO_InitStruct->SDIO_ClockBypass | SDIO_InitStruct->SDIO_BusWide |
 800aa5a:	431a      	orrs	r2, r3
             SDIO_InitStruct->SDIO_ClockEdge | SDIO_InitStruct->SDIO_HardwareFlowControl); 
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	691b      	ldr	r3, [r3, #16]
 800aa60:	4313      	orrs	r3, r2
  tmpreg |= (SDIO_InitStruct->SDIO_ClockDiv  | SDIO_InitStruct->SDIO_ClockPowerSave |
 800aa62:	68fa      	ldr	r2, [r7, #12]
 800aa64:	4313      	orrs	r3, r2
 800aa66:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDIO CLKCR */
  SDIO->CLKCR = tmpreg;
 800aa68:	4a04      	ldr	r2, [pc, #16]	; (800aa7c <SDIO_Init+0x5c>)
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	6053      	str	r3, [r2, #4]
}
 800aa6e:	bf00      	nop
 800aa70:	3714      	adds	r7, #20
 800aa72:	46bd      	mov	sp, r7
 800aa74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa78:	4770      	bx	lr
 800aa7a:	bf00      	nop
 800aa7c:	40012c00 	.word	0x40012c00

0800aa80 <SDIO_StructInit>:
  * @param  SDIO_InitStruct: pointer to an SDIO_InitTypeDef structure which 
  *         will be initialized.
  * @retval None
  */
void SDIO_StructInit(SDIO_InitTypeDef* SDIO_InitStruct)
{
 800aa80:	b480      	push	{r7}
 800aa82:	b083      	sub	sp, #12
 800aa84:	af00      	add	r7, sp, #0
 800aa86:	6078      	str	r0, [r7, #4]
  /* SDIO_InitStruct members default value */
  SDIO_InitStruct->SDIO_ClockDiv = 0x00;
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	2200      	movs	r2, #0
 800aa8c:	751a      	strb	r2, [r3, #20]
  SDIO_InitStruct->SDIO_ClockEdge = SDIO_ClockEdge_Rising;
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	2200      	movs	r2, #0
 800aa92:	601a      	str	r2, [r3, #0]
  SDIO_InitStruct->SDIO_ClockBypass = SDIO_ClockBypass_Disable;
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	2200      	movs	r2, #0
 800aa98:	605a      	str	r2, [r3, #4]
  SDIO_InitStruct->SDIO_ClockPowerSave = SDIO_ClockPowerSave_Disable;
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	2200      	movs	r2, #0
 800aa9e:	609a      	str	r2, [r3, #8]
  SDIO_InitStruct->SDIO_BusWide = SDIO_BusWide_1b;
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	2200      	movs	r2, #0
 800aaa4:	60da      	str	r2, [r3, #12]
  SDIO_InitStruct->SDIO_HardwareFlowControl = SDIO_HardwareFlowControl_Disable;
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	2200      	movs	r2, #0
 800aaaa:	611a      	str	r2, [r3, #16]
}
 800aaac:	bf00      	nop
 800aaae:	370c      	adds	r7, #12
 800aab0:	46bd      	mov	sp, r7
 800aab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aab6:	4770      	bx	lr

0800aab8 <SDIO_ClockCmd>:
  * @param  NewState: new state of the SDIO Clock. 
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SDIO_ClockCmd(FunctionalState NewState)
{
 800aab8:	b480      	push	{r7}
 800aaba:	b083      	sub	sp, #12
 800aabc:	af00      	add	r7, sp, #0
 800aabe:	4603      	mov	r3, r0
 800aac0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) CLKCR_CLKEN_BB = (uint32_t)NewState;
 800aac2:	4a04      	ldr	r2, [pc, #16]	; (800aad4 <SDIO_ClockCmd+0x1c>)
 800aac4:	79fb      	ldrb	r3, [r7, #7]
 800aac6:	6013      	str	r3, [r2, #0]
}
 800aac8:	bf00      	nop
 800aaca:	370c      	adds	r7, #12
 800aacc:	46bd      	mov	sp, r7
 800aace:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aad2:	4770      	bx	lr
 800aad4:	422580a0 	.word	0x422580a0

0800aad8 <SDIO_SetPowerState>:
  *            @arg SDIO_PowerState_OFF: SDIO Power OFF
  *            @arg SDIO_PowerState_ON: SDIO Power ON
  * @retval None
  */
void SDIO_SetPowerState(uint32_t SDIO_PowerState)
{
 800aad8:	b480      	push	{r7}
 800aada:	b083      	sub	sp, #12
 800aadc:	af00      	add	r7, sp, #0
 800aade:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SDIO_POWER_STATE(SDIO_PowerState));
  
  SDIO->POWER = SDIO_PowerState;
 800aae0:	4a04      	ldr	r2, [pc, #16]	; (800aaf4 <SDIO_SetPowerState+0x1c>)
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	6013      	str	r3, [r2, #0]
}
 800aae6:	bf00      	nop
 800aae8:	370c      	adds	r7, #12
 800aaea:	46bd      	mov	sp, r7
 800aaec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaf0:	4770      	bx	lr
 800aaf2:	bf00      	nop
 800aaf4:	40012c00 	.word	0x40012c00

0800aaf8 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(void)
{
 800aaf8:	b480      	push	{r7}
 800aafa:	af00      	add	r7, sp, #0
  return (SDIO->POWER & (~PWR_PWRCTRL_MASK));
 800aafc:	4b04      	ldr	r3, [pc, #16]	; (800ab10 <SDIO_GetPowerState+0x18>)
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	f003 0303 	and.w	r3, r3, #3
}
 800ab04:	4618      	mov	r0, r3
 800ab06:	46bd      	mov	sp, r7
 800ab08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab0c:	4770      	bx	lr
 800ab0e:	bf00      	nop
 800ab10:	40012c00 	.word	0x40012c00

0800ab14 <SDIO_SendCommand>:
  *         structure that contains the configuration information for the SDIO 
  *         command.
  * @retval None
  */
void SDIO_SendCommand(SDIO_CmdInitTypeDef *SDIO_CmdInitStruct)
{
 800ab14:	b480      	push	{r7}
 800ab16:	b085      	sub	sp, #20
 800ab18:	af00      	add	r7, sp, #0
 800ab1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800ab1c:	2300      	movs	r3, #0
 800ab1e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_WAIT(SDIO_CmdInitStruct->SDIO_Wait));
  assert_param(IS_SDIO_CPSM(SDIO_CmdInitStruct->SDIO_CPSM));
  
/*---------------------------- SDIO ARG Configuration ------------------------*/
  /* Set the SDIO Argument value */
  SDIO->ARG = SDIO_CmdInitStruct->SDIO_Argument;
 800ab20:	4a11      	ldr	r2, [pc, #68]	; (800ab68 <SDIO_SendCommand+0x54>)
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	6093      	str	r3, [r2, #8]
  
/*---------------------------- SDIO CMD Configuration ------------------------*/  
  /* Get the SDIO CMD value */
  tmpreg = SDIO->CMD;
 800ab28:	4b0f      	ldr	r3, [pc, #60]	; (800ab68 <SDIO_SendCommand+0x54>)
 800ab2a:	68db      	ldr	r3, [r3, #12]
 800ab2c:	60fb      	str	r3, [r7, #12]
  /* Clear CMDINDEX, WAITRESP, WAITINT, WAITPEND, CPSMEN bits */
  tmpreg &= CMD_CLEAR_MASK;
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800ab34:	f023 0307 	bic.w	r3, r3, #7
 800ab38:	60fb      	str	r3, [r7, #12]
  /* Set CMDINDEX bits according to SDIO_CmdIndex value */
  /* Set WAITRESP bits according to SDIO_Response value */
  /* Set WAITINT and WAITPEND bits according to SDIO_Wait value */
  /* Set CPSMEN bits according to SDIO_CPSM value */
  tmpreg |= (uint32_t)SDIO_CmdInitStruct->SDIO_CmdIndex | SDIO_CmdInitStruct->SDIO_Response
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	685a      	ldr	r2, [r3, #4]
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	689b      	ldr	r3, [r3, #8]
 800ab42:	431a      	orrs	r2, r3
           | SDIO_CmdInitStruct->SDIO_Wait | SDIO_CmdInitStruct->SDIO_CPSM;
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	68db      	ldr	r3, [r3, #12]
 800ab48:	431a      	orrs	r2, r3
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	691b      	ldr	r3, [r3, #16]
 800ab4e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)SDIO_CmdInitStruct->SDIO_CmdIndex | SDIO_CmdInitStruct->SDIO_Response
 800ab50:	68fa      	ldr	r2, [r7, #12]
 800ab52:	4313      	orrs	r3, r2
 800ab54:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDIO CMD */
  SDIO->CMD = tmpreg;
 800ab56:	4a04      	ldr	r2, [pc, #16]	; (800ab68 <SDIO_SendCommand+0x54>)
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	60d3      	str	r3, [r2, #12]
}
 800ab5c:	bf00      	nop
 800ab5e:	3714      	adds	r7, #20
 800ab60:	46bd      	mov	sp, r7
 800ab62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab66:	4770      	bx	lr
 800ab68:	40012c00 	.word	0x40012c00

0800ab6c <SDIO_CmdStructInit>:
  * @param  SDIO_CmdInitStruct: pointer to an SDIO_CmdInitTypeDef 
  *         structure which will be initialized.
  * @retval None
  */
void SDIO_CmdStructInit(SDIO_CmdInitTypeDef* SDIO_CmdInitStruct)
{
 800ab6c:	b480      	push	{r7}
 800ab6e:	b083      	sub	sp, #12
 800ab70:	af00      	add	r7, sp, #0
 800ab72:	6078      	str	r0, [r7, #4]
  /* SDIO_CmdInitStruct members default value */
  SDIO_CmdInitStruct->SDIO_Argument = 0x00;
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	2200      	movs	r2, #0
 800ab78:	601a      	str	r2, [r3, #0]
  SDIO_CmdInitStruct->SDIO_CmdIndex = 0x00;
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	2200      	movs	r2, #0
 800ab7e:	605a      	str	r2, [r3, #4]
  SDIO_CmdInitStruct->SDIO_Response = SDIO_Response_No;
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	2200      	movs	r2, #0
 800ab84:	609a      	str	r2, [r3, #8]
  SDIO_CmdInitStruct->SDIO_Wait = SDIO_Wait_No;
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	2200      	movs	r2, #0
 800ab8a:	60da      	str	r2, [r3, #12]
  SDIO_CmdInitStruct->SDIO_CPSM = SDIO_CPSM_Disable;
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	2200      	movs	r2, #0
 800ab90:	611a      	str	r2, [r3, #16]
}
 800ab92:	bf00      	nop
 800ab94:	370c      	adds	r7, #12
 800ab96:	46bd      	mov	sp, r7
 800ab98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab9c:	4770      	bx	lr

0800ab9e <SDIO_GetCommandResponse>:
  * @brief  Returns command index of last command for which response received.
  * @param  None
  * @retval Returns the command index of the last command response received.
  */
uint8_t SDIO_GetCommandResponse(void)
{
 800ab9e:	b480      	push	{r7}
 800aba0:	af00      	add	r7, sp, #0
  return (uint8_t)(SDIO->RESPCMD);
 800aba2:	4b04      	ldr	r3, [pc, #16]	; (800abb4 <SDIO_GetCommandResponse+0x16>)
 800aba4:	691b      	ldr	r3, [r3, #16]
 800aba6:	b2db      	uxtb	r3, r3
}
 800aba8:	4618      	mov	r0, r3
 800abaa:	46bd      	mov	sp, r7
 800abac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abb0:	4770      	bx	lr
 800abb2:	bf00      	nop
 800abb4:	40012c00 	.word	0x40012c00

0800abb8 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4
  * @retval The Corresponding response register value.
  */
uint32_t SDIO_GetResponse(uint32_t SDIO_RESP)
{
 800abb8:	b480      	push	{r7}
 800abba:	b085      	sub	sp, #20
 800abbc:	af00      	add	r7, sp, #0
 800abbe:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmp = 0;
 800abc0:	2300      	movs	r3, #0
 800abc2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(SDIO_RESP));

  tmp = SDIO_RESP_ADDR + SDIO_RESP;
 800abc4:	687a      	ldr	r2, [r7, #4]
 800abc6:	4b05      	ldr	r3, [pc, #20]	; (800abdc <SDIO_GetResponse+0x24>)
 800abc8:	4413      	add	r3, r2
 800abca:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp); 
 800abcc:	68fb      	ldr	r3, [r7, #12]
 800abce:	681b      	ldr	r3, [r3, #0]
}
 800abd0:	4618      	mov	r0, r3
 800abd2:	3714      	adds	r7, #20
 800abd4:	46bd      	mov	sp, r7
 800abd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abda:	4770      	bx	lr
 800abdc:	40012c14 	.word	0x40012c14

0800abe0 <SDIO_DataConfig>:
  * @param  SDIO_DataInitStruct : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDIO command.
  * @retval None
  */
void SDIO_DataConfig(SDIO_DataInitTypeDef* SDIO_DataInitStruct)
{
 800abe0:	b480      	push	{r7}
 800abe2:	b085      	sub	sp, #20
 800abe4:	af00      	add	r7, sp, #0
 800abe6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800abe8:	2300      	movs	r3, #0
 800abea:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_MODE(SDIO_DataInitStruct->SDIO_TransferMode));
  assert_param(IS_SDIO_DPSM(SDIO_DataInitStruct->SDIO_DPSM));

/*---------------------------- SDIO DTIMER Configuration ---------------------*/
  /* Set the SDIO Data TimeOut value */
  SDIO->DTIMER = SDIO_DataInitStruct->SDIO_DataTimeOut;
 800abec:	4a12      	ldr	r2, [pc, #72]	; (800ac38 <SDIO_DataConfig+0x58>)
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	6253      	str	r3, [r2, #36]	; 0x24

/*---------------------------- SDIO DLEN Configuration -----------------------*/
  /* Set the SDIO DataLength value */
  SDIO->DLEN = SDIO_DataInitStruct->SDIO_DataLength;
 800abf4:	4a10      	ldr	r2, [pc, #64]	; (800ac38 <SDIO_DataConfig+0x58>)
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	685b      	ldr	r3, [r3, #4]
 800abfa:	6293      	str	r3, [r2, #40]	; 0x28

/*---------------------------- SDIO DCTRL Configuration ----------------------*/  
  /* Get the SDIO DCTRL value */
  tmpreg = SDIO->DCTRL;
 800abfc:	4b0e      	ldr	r3, [pc, #56]	; (800ac38 <SDIO_DataConfig+0x58>)
 800abfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac00:	60fb      	str	r3, [r7, #12]
  /* Clear DEN, DTMODE, DTDIR and DBCKSIZE bits */
  tmpreg &= DCTRL_CLEAR_MASK;
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	f023 03f7 	bic.w	r3, r3, #247	; 0xf7
 800ac08:	60fb      	str	r3, [r7, #12]
  /* Set DEN bit according to SDIO_DPSM value */
  /* Set DTMODE bit according to SDIO_TransferMode value */
  /* Set DTDIR bit according to SDIO_TransferDir value */
  /* Set DBCKSIZE bits according to SDIO_DataBlockSize value */
  tmpreg |= (uint32_t)SDIO_DataInitStruct->SDIO_DataBlockSize | SDIO_DataInitStruct->SDIO_TransferDir
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	689a      	ldr	r2, [r3, #8]
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	68db      	ldr	r3, [r3, #12]
 800ac12:	431a      	orrs	r2, r3
           | SDIO_DataInitStruct->SDIO_TransferMode | SDIO_DataInitStruct->SDIO_DPSM;
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	691b      	ldr	r3, [r3, #16]
 800ac18:	431a      	orrs	r2, r3
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	695b      	ldr	r3, [r3, #20]
 800ac1e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)SDIO_DataInitStruct->SDIO_DataBlockSize | SDIO_DataInitStruct->SDIO_TransferDir
 800ac20:	68fa      	ldr	r2, [r7, #12]
 800ac22:	4313      	orrs	r3, r2
 800ac24:	60fb      	str	r3, [r7, #12]

  /* Write to SDIO DCTRL */
  SDIO->DCTRL = tmpreg;
 800ac26:	4a04      	ldr	r2, [pc, #16]	; (800ac38 <SDIO_DataConfig+0x58>)
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 800ac2c:	bf00      	nop
 800ac2e:	3714      	adds	r7, #20
 800ac30:	46bd      	mov	sp, r7
 800ac32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac36:	4770      	bx	lr
 800ac38:	40012c00 	.word	0x40012c00

0800ac3c <SDIO_DataStructInit>:
  * @param  SDIO_DataInitStruct: pointer to an SDIO_DataInitTypeDef structure 
  *         which will be initialized.
  * @retval None
  */
void SDIO_DataStructInit(SDIO_DataInitTypeDef* SDIO_DataInitStruct)
{
 800ac3c:	b480      	push	{r7}
 800ac3e:	b083      	sub	sp, #12
 800ac40:	af00      	add	r7, sp, #0
 800ac42:	6078      	str	r0, [r7, #4]
  /* SDIO_DataInitStruct members default value */
  SDIO_DataInitStruct->SDIO_DataTimeOut = 0xFFFFFFFF;
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ac4a:	601a      	str	r2, [r3, #0]
  SDIO_DataInitStruct->SDIO_DataLength = 0x00;
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	2200      	movs	r2, #0
 800ac50:	605a      	str	r2, [r3, #4]
  SDIO_DataInitStruct->SDIO_DataBlockSize = SDIO_DataBlockSize_1b;
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	2200      	movs	r2, #0
 800ac56:	609a      	str	r2, [r3, #8]
  SDIO_DataInitStruct->SDIO_TransferDir = SDIO_TransferDir_ToCard;
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	2200      	movs	r2, #0
 800ac5c:	60da      	str	r2, [r3, #12]
  SDIO_DataInitStruct->SDIO_TransferMode = SDIO_TransferMode_Block;  
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	2200      	movs	r2, #0
 800ac62:	611a      	str	r2, [r3, #16]
  SDIO_DataInitStruct->SDIO_DPSM = SDIO_DPSM_Disable;
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	2200      	movs	r2, #0
 800ac68:	615a      	str	r2, [r3, #20]
}
 800ac6a:	bf00      	nop
 800ac6c:	370c      	adds	r7, #12
 800ac6e:	46bd      	mov	sp, r7
 800ac70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac74:	4770      	bx	lr

0800ac76 <SDIO_GetDataCounter>:
  * @brief  Returns number of remaining data bytes to be transferred.
  * @param  None
  * @retval Number of remaining data bytes to be transferred
  */
uint32_t SDIO_GetDataCounter(void)
{ 
 800ac76:	b480      	push	{r7}
 800ac78:	af00      	add	r7, sp, #0
  return SDIO->DCOUNT;
 800ac7a:	4b03      	ldr	r3, [pc, #12]	; (800ac88 <SDIO_GetDataCounter+0x12>)
 800ac7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 800ac7e:	4618      	mov	r0, r3
 800ac80:	46bd      	mov	sp, r7
 800ac82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac86:	4770      	bx	lr
 800ac88:	40012c00 	.word	0x40012c00

0800ac8c <SDIO_ReadData>:
  * @brief  Read one data word from Rx FIFO.
  * @param  None
  * @retval Data received
  */
uint32_t SDIO_ReadData(void)
{ 
 800ac8c:	b480      	push	{r7}
 800ac8e:	af00      	add	r7, sp, #0
  return SDIO->FIFO;
 800ac90:	4b03      	ldr	r3, [pc, #12]	; (800aca0 <SDIO_ReadData+0x14>)
 800ac92:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800ac96:	4618      	mov	r0, r3
 800ac98:	46bd      	mov	sp, r7
 800ac9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac9e:	4770      	bx	lr
 800aca0:	40012c00 	.word	0x40012c00

0800aca4 <SDIO_WriteData>:
  * @brief  Write one data word to Tx FIFO.
  * @param  Data: 32-bit data word to write.
  * @retval None
  */
void SDIO_WriteData(uint32_t Data)
{ 
 800aca4:	b480      	push	{r7}
 800aca6:	b083      	sub	sp, #12
 800aca8:	af00      	add	r7, sp, #0
 800acaa:	6078      	str	r0, [r7, #4]
  SDIO->FIFO = Data;
 800acac:	4a04      	ldr	r2, [pc, #16]	; (800acc0 <SDIO_WriteData+0x1c>)
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
}
 800acb4:	bf00      	nop
 800acb6:	370c      	adds	r7, #12
 800acb8:	46bd      	mov	sp, r7
 800acba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acbe:	4770      	bx	lr
 800acc0:	40012c00 	.word	0x40012c00

0800acc4 <SDIO_GetFIFOCount>:
  * @brief  Returns the number of words left to be written to or read from FIFO.	
  * @param  None
  * @retval Remaining number of words.
  */
uint32_t SDIO_GetFIFOCount(void)
{ 
 800acc4:	b480      	push	{r7}
 800acc6:	af00      	add	r7, sp, #0
  return SDIO->FIFOCNT;
 800acc8:	4b03      	ldr	r3, [pc, #12]	; (800acd8 <SDIO_GetFIFOCount+0x14>)
 800acca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
 800accc:	4618      	mov	r0, r3
 800acce:	46bd      	mov	sp, r7
 800acd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acd4:	4770      	bx	lr
 800acd6:	bf00      	nop
 800acd8:	40012c00 	.word	0x40012c00

0800acdc <SDIO_StartSDIOReadWait>:
  * @param  NewState: new state of the Start SDIO Read Wait operation. 
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SDIO_StartSDIOReadWait(FunctionalState NewState)
{ 
 800acdc:	b480      	push	{r7}
 800acde:	b083      	sub	sp, #12
 800ace0:	af00      	add	r7, sp, #0
 800ace2:	4603      	mov	r3, r0
 800ace4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) DCTRL_RWSTART_BB = (uint32_t) NewState;
 800ace6:	4a04      	ldr	r2, [pc, #16]	; (800acf8 <SDIO_StartSDIOReadWait+0x1c>)
 800ace8:	79fb      	ldrb	r3, [r7, #7]
 800acea:	6013      	str	r3, [r2, #0]
}
 800acec:	bf00      	nop
 800acee:	370c      	adds	r7, #12
 800acf0:	46bd      	mov	sp, r7
 800acf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acf6:	4770      	bx	lr
 800acf8:	422585a0 	.word	0x422585a0

0800acfc <SDIO_StopSDIOReadWait>:
  * @param  NewState: new state of the Stop SDIO Read Wait operation. 
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SDIO_StopSDIOReadWait(FunctionalState NewState)
{ 
 800acfc:	b480      	push	{r7}
 800acfe:	b083      	sub	sp, #12
 800ad00:	af00      	add	r7, sp, #0
 800ad02:	4603      	mov	r3, r0
 800ad04:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) DCTRL_RWSTOP_BB = (uint32_t) NewState;
 800ad06:	4a04      	ldr	r2, [pc, #16]	; (800ad18 <SDIO_StopSDIOReadWait+0x1c>)
 800ad08:	79fb      	ldrb	r3, [r7, #7]
 800ad0a:	6013      	str	r3, [r2, #0]
}
 800ad0c:	bf00      	nop
 800ad0e:	370c      	adds	r7, #12
 800ad10:	46bd      	mov	sp, r7
 800ad12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad16:	4770      	bx	lr
 800ad18:	422585a4 	.word	0x422585a4

0800ad1c <SDIO_SetSDIOReadWaitMode>:
  *            @arg SDIO_ReadWaitMode_CLK: Read Wait control by stopping SDIOCLK
  *            @arg SDIO_ReadWaitMode_DATA2: Read Wait control using SDIO_DATA2
  * @retval None
  */
void SDIO_SetSDIOReadWaitMode(uint32_t SDIO_ReadWaitMode)
{
 800ad1c:	b480      	push	{r7}
 800ad1e:	b083      	sub	sp, #12
 800ad20:	af00      	add	r7, sp, #0
 800ad22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SDIO_READWAIT_MODE(SDIO_ReadWaitMode));
  
  *(__IO uint32_t *) DCTRL_RWMOD_BB = SDIO_ReadWaitMode;
 800ad24:	4a04      	ldr	r2, [pc, #16]	; (800ad38 <SDIO_SetSDIOReadWaitMode+0x1c>)
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	6013      	str	r3, [r2, #0]
}
 800ad2a:	bf00      	nop
 800ad2c:	370c      	adds	r7, #12
 800ad2e:	46bd      	mov	sp, r7
 800ad30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad34:	4770      	bx	lr
 800ad36:	bf00      	nop
 800ad38:	422585a8 	.word	0x422585a8

0800ad3c <SDIO_SetSDIOOperation>:
  * @param  NewState: new state of SDIO specific operation. 
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SDIO_SetSDIOOperation(FunctionalState NewState)
{ 
 800ad3c:	b480      	push	{r7}
 800ad3e:	b083      	sub	sp, #12
 800ad40:	af00      	add	r7, sp, #0
 800ad42:	4603      	mov	r3, r0
 800ad44:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) DCTRL_SDIOEN_BB = (uint32_t)NewState;
 800ad46:	4a04      	ldr	r2, [pc, #16]	; (800ad58 <SDIO_SetSDIOOperation+0x1c>)
 800ad48:	79fb      	ldrb	r3, [r7, #7]
 800ad4a:	6013      	str	r3, [r2, #0]
}
 800ad4c:	bf00      	nop
 800ad4e:	370c      	adds	r7, #12
 800ad50:	46bd      	mov	sp, r7
 800ad52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad56:	4770      	bx	lr
 800ad58:	422585ac 	.word	0x422585ac

0800ad5c <SDIO_SendSDIOSuspendCmd>:
  * @param  NewState: new state of the SD I/O Mode suspend command.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SDIO_SendSDIOSuspendCmd(FunctionalState NewState)
{ 
 800ad5c:	b480      	push	{r7}
 800ad5e:	b083      	sub	sp, #12
 800ad60:	af00      	add	r7, sp, #0
 800ad62:	4603      	mov	r3, r0
 800ad64:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) CMD_SDIOSUSPEND_BB = (uint32_t)NewState;
 800ad66:	4a04      	ldr	r2, [pc, #16]	; (800ad78 <SDIO_SendSDIOSuspendCmd+0x1c>)
 800ad68:	79fb      	ldrb	r3, [r7, #7]
 800ad6a:	6013      	str	r3, [r2, #0]
}
 800ad6c:	bf00      	nop
 800ad6e:	370c      	adds	r7, #12
 800ad70:	46bd      	mov	sp, r7
 800ad72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad76:	4770      	bx	lr
 800ad78:	422581ac 	.word	0x422581ac

0800ad7c <SDIO_CommandCompletionCmd>:
  * @param  NewState: new state of command completion signal. 
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SDIO_CommandCompletionCmd(FunctionalState NewState)
{ 
 800ad7c:	b480      	push	{r7}
 800ad7e:	b083      	sub	sp, #12
 800ad80:	af00      	add	r7, sp, #0
 800ad82:	4603      	mov	r3, r0
 800ad84:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) CMD_ENCMDCOMPL_BB = (uint32_t)NewState;
 800ad86:	4a04      	ldr	r2, [pc, #16]	; (800ad98 <SDIO_CommandCompletionCmd+0x1c>)
 800ad88:	79fb      	ldrb	r3, [r7, #7]
 800ad8a:	6013      	str	r3, [r2, #0]
}
 800ad8c:	bf00      	nop
 800ad8e:	370c      	adds	r7, #12
 800ad90:	46bd      	mov	sp, r7
 800ad92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad96:	4770      	bx	lr
 800ad98:	422581b0 	.word	0x422581b0

0800ad9c <SDIO_CEATAITCmd>:
  * @param  NewState: new state of CE-ATA interrupt. 
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SDIO_CEATAITCmd(FunctionalState NewState)
{ 
 800ad9c:	b480      	push	{r7}
 800ad9e:	b083      	sub	sp, #12
 800ada0:	af00      	add	r7, sp, #0
 800ada2:	4603      	mov	r3, r0
 800ada4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) CMD_NIEN_BB = (uint32_t)((~((uint32_t)NewState)) & ((uint32_t)0x1));
 800ada6:	79fb      	ldrb	r3, [r7, #7]
 800ada8:	f003 0301 	and.w	r3, r3, #1
 800adac:	2b00      	cmp	r3, #0
 800adae:	bf0c      	ite	eq
 800adb0:	2301      	moveq	r3, #1
 800adb2:	2300      	movne	r3, #0
 800adb4:	b2da      	uxtb	r2, r3
 800adb6:	4b04      	ldr	r3, [pc, #16]	; (800adc8 <SDIO_CEATAITCmd+0x2c>)
 800adb8:	601a      	str	r2, [r3, #0]
}
 800adba:	bf00      	nop
 800adbc:	370c      	adds	r7, #12
 800adbe:	46bd      	mov	sp, r7
 800adc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adc4:	4770      	bx	lr
 800adc6:	bf00      	nop
 800adc8:	422581b4 	.word	0x422581b4

0800adcc <SDIO_SendCEATACmd>:
  * @param  NewState: new state of CE-ATA command. 
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SDIO_SendCEATACmd(FunctionalState NewState)
{ 
 800adcc:	b480      	push	{r7}
 800adce:	b083      	sub	sp, #12
 800add0:	af00      	add	r7, sp, #0
 800add2:	4603      	mov	r3, r0
 800add4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) CMD_ATACMD_BB = (uint32_t)NewState;
 800add6:	4a04      	ldr	r2, [pc, #16]	; (800ade8 <SDIO_SendCEATACmd+0x1c>)
 800add8:	79fb      	ldrb	r3, [r7, #7]
 800adda:	6013      	str	r3, [r2, #0]
}
 800addc:	bf00      	nop
 800adde:	370c      	adds	r7, #12
 800ade0:	46bd      	mov	sp, r7
 800ade2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ade6:	4770      	bx	lr
 800ade8:	422581b8 	.word	0x422581b8

0800adec <SDIO_DMACmd>:
  * @param  NewState: new state of the selected SDIO DMA request.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SDIO_DMACmd(FunctionalState NewState)
{
 800adec:	b480      	push	{r7}
 800adee:	b083      	sub	sp, #12
 800adf0:	af00      	add	r7, sp, #0
 800adf2:	4603      	mov	r3, r0
 800adf4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) DCTRL_DMAEN_BB = (uint32_t)NewState;
 800adf6:	4a04      	ldr	r2, [pc, #16]	; (800ae08 <SDIO_DMACmd+0x1c>)
 800adf8:	79fb      	ldrb	r3, [r7, #7]
 800adfa:	6013      	str	r3, [r2, #0]
}
 800adfc:	bf00      	nop
 800adfe:	370c      	adds	r7, #12
 800ae00:	46bd      	mov	sp, r7
 800ae02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae06:	4770      	bx	lr
 800ae08:	4225858c 	.word	0x4225858c

0800ae0c <SDIO_ITConfig>:
  * @param  NewState: new state of the specified SDIO interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None 
  */
void SDIO_ITConfig(uint32_t SDIO_IT, FunctionalState NewState)
{
 800ae0c:	b480      	push	{r7}
 800ae0e:	b083      	sub	sp, #12
 800ae10:	af00      	add	r7, sp, #0
 800ae12:	6078      	str	r0, [r7, #4]
 800ae14:	460b      	mov	r3, r1
 800ae16:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SDIO_IT(SDIO_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800ae18:	78fb      	ldrb	r3, [r7, #3]
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d006      	beq.n	800ae2c <SDIO_ITConfig+0x20>
  {
    /* Enable the SDIO interrupts */
    SDIO->MASK |= SDIO_IT;
 800ae1e:	4b0a      	ldr	r3, [pc, #40]	; (800ae48 <SDIO_ITConfig+0x3c>)
 800ae20:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ae22:	4909      	ldr	r1, [pc, #36]	; (800ae48 <SDIO_ITConfig+0x3c>)
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	4313      	orrs	r3, r2
 800ae28:	63cb      	str	r3, [r1, #60]	; 0x3c
  else
  {
    /* Disable the SDIO interrupts */
    SDIO->MASK &= ~SDIO_IT;
  } 
}
 800ae2a:	e006      	b.n	800ae3a <SDIO_ITConfig+0x2e>
    SDIO->MASK &= ~SDIO_IT;
 800ae2c:	4b06      	ldr	r3, [pc, #24]	; (800ae48 <SDIO_ITConfig+0x3c>)
 800ae2e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	43db      	mvns	r3, r3
 800ae34:	4904      	ldr	r1, [pc, #16]	; (800ae48 <SDIO_ITConfig+0x3c>)
 800ae36:	4013      	ands	r3, r2
 800ae38:	63cb      	str	r3, [r1, #60]	; 0x3c
}
 800ae3a:	bf00      	nop
 800ae3c:	370c      	adds	r7, #12
 800ae3e:	46bd      	mov	sp, r7
 800ae40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae44:	4770      	bx	lr
 800ae46:	bf00      	nop
 800ae48:	40012c00 	.word	0x40012c00

0800ae4c <SDIO_GetFlagStatus>:
  *            @arg SDIO_FLAG_SDIOIT:   SD I/O interrupt received
  *            @arg SDIO_FLAG_CEATAEND: CE-ATA command completion signal received for CMD61
  * @retval The new state of SDIO_FLAG (SET or RESET).
  */
FlagStatus SDIO_GetFlagStatus(uint32_t SDIO_FLAG)
{ 
 800ae4c:	b480      	push	{r7}
 800ae4e:	b085      	sub	sp, #20
 800ae50:	af00      	add	r7, sp, #0
 800ae52:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 800ae54:	2300      	movs	r3, #0
 800ae56:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_SDIO_FLAG(SDIO_FLAG));
  
  if ((SDIO->STA & SDIO_FLAG) != (uint32_t)RESET)
 800ae58:	4b08      	ldr	r3, [pc, #32]	; (800ae7c <SDIO_GetFlagStatus+0x30>)
 800ae5a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	4013      	ands	r3, r2
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d002      	beq.n	800ae6a <SDIO_GetFlagStatus+0x1e>
  {
    bitstatus = SET;
 800ae64:	2301      	movs	r3, #1
 800ae66:	73fb      	strb	r3, [r7, #15]
 800ae68:	e001      	b.n	800ae6e <SDIO_GetFlagStatus+0x22>
  }
  else
  {
    bitstatus = RESET;
 800ae6a:	2300      	movs	r3, #0
 800ae6c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800ae6e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae70:	4618      	mov	r0, r3
 800ae72:	3714      	adds	r7, #20
 800ae74:	46bd      	mov	sp, r7
 800ae76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae7a:	4770      	bx	lr
 800ae7c:	40012c00 	.word	0x40012c00

0800ae80 <SDIO_ClearFlag>:
  *            @arg SDIO_FLAG_SDIOIT:   SD I/O interrupt received
  *            @arg SDIO_FLAG_CEATAEND: CE-ATA command completion signal received for CMD61
  * @retval None
  */
void SDIO_ClearFlag(uint32_t SDIO_FLAG)
{ 
 800ae80:	b480      	push	{r7}
 800ae82:	b083      	sub	sp, #12
 800ae84:	af00      	add	r7, sp, #0
 800ae86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SDIO_CLEAR_FLAG(SDIO_FLAG));
   
  SDIO->ICR = SDIO_FLAG;
 800ae88:	4a04      	ldr	r2, [pc, #16]	; (800ae9c <SDIO_ClearFlag+0x1c>)
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	6393      	str	r3, [r2, #56]	; 0x38
}
 800ae8e:	bf00      	nop
 800ae90:	370c      	adds	r7, #12
 800ae92:	46bd      	mov	sp, r7
 800ae94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae98:	4770      	bx	lr
 800ae9a:	bf00      	nop
 800ae9c:	40012c00 	.word	0x40012c00

0800aea0 <SDIO_GetITStatus>:
  *            @arg SDIO_IT_SDIOIT:   SD I/O interrupt received interrupt
  *            @arg SDIO_IT_CEATAEND: CE-ATA command completion signal received for CMD61 interrupt
  * @retval The new state of SDIO_IT (SET or RESET).
  */
ITStatus SDIO_GetITStatus(uint32_t SDIO_IT)
{ 
 800aea0:	b480      	push	{r7}
 800aea2:	b085      	sub	sp, #20
 800aea4:	af00      	add	r7, sp, #0
 800aea6:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
 800aea8:	2300      	movs	r3, #0
 800aeaa:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_SDIO_GET_IT(SDIO_IT));
  if ((SDIO->STA & SDIO_IT) != (uint32_t)RESET)  
 800aeac:	4b08      	ldr	r3, [pc, #32]	; (800aed0 <SDIO_GetITStatus+0x30>)
 800aeae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	4013      	ands	r3, r2
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d002      	beq.n	800aebe <SDIO_GetITStatus+0x1e>
  {
    bitstatus = SET;
 800aeb8:	2301      	movs	r3, #1
 800aeba:	73fb      	strb	r3, [r7, #15]
 800aebc:	e001      	b.n	800aec2 <SDIO_GetITStatus+0x22>
  }
  else
  {
    bitstatus = RESET;
 800aebe:	2300      	movs	r3, #0
 800aec0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800aec2:	7bfb      	ldrb	r3, [r7, #15]
}
 800aec4:	4618      	mov	r0, r3
 800aec6:	3714      	adds	r7, #20
 800aec8:	46bd      	mov	sp, r7
 800aeca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aece:	4770      	bx	lr
 800aed0:	40012c00 	.word	0x40012c00

0800aed4 <SDIO_ClearITPendingBit>:
  *            @arg SDIO_IT_SDIOIT:   SD I/O interrupt received interrupt
  *            @arg SDIO_IT_CEATAEND: CE-ATA command completion signal received for CMD61
  * @retval None
  */
void SDIO_ClearITPendingBit(uint32_t SDIO_IT)
{ 
 800aed4:	b480      	push	{r7}
 800aed6:	b083      	sub	sp, #12
 800aed8:	af00      	add	r7, sp, #0
 800aeda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SDIO_CLEAR_IT(SDIO_IT));
   
  SDIO->ICR = SDIO_IT;
 800aedc:	4a04      	ldr	r2, [pc, #16]	; (800aef0 <SDIO_ClearITPendingBit+0x1c>)
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	6393      	str	r3, [r2, #56]	; 0x38
}
 800aee2:	bf00      	nop
 800aee4:	370c      	adds	r7, #12
 800aee6:	46bd      	mov	sp, r7
 800aee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeec:	4770      	bx	lr
 800aeee:	bf00      	nop
 800aef0:	40012c00 	.word	0x40012c00

0800aef4 <SPI_I2S_DeInit>:
  *         is managed by the I2S peripheral clock).
  *             
  * @retval None
  */
void SPI_I2S_DeInit(SPI_TypeDef* SPIx)
{
 800aef4:	b580      	push	{r7, lr}
 800aef6:	b082      	sub	sp, #8
 800aef8:	af00      	add	r7, sp, #0
 800aefa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));

  if (SPIx == SPI1)
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	4a2e      	ldr	r2, [pc, #184]	; (800afb8 <SPI_I2S_DeInit+0xc4>)
 800af00:	4293      	cmp	r3, r2
 800af02:	d10a      	bne.n	800af1a <SPI_I2S_DeInit+0x26>
  {
    /* Enable SPI1 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, ENABLE);
 800af04:	2101      	movs	r1, #1
 800af06:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800af0a:	f7fd fe29 	bl	8008b60 <RCC_APB2PeriphResetCmd>
    /* Release SPI1 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, DISABLE);
 800af0e:	2100      	movs	r1, #0
 800af10:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800af14:	f7fd fe24 	bl	8008b60 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, ENABLE);
      /* Release SPI6 from reset state */
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, DISABLE);
    }
  }
}
 800af18:	e049      	b.n	800afae <SPI_I2S_DeInit+0xba>
  else if (SPIx == SPI2)
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	4a27      	ldr	r2, [pc, #156]	; (800afbc <SPI_I2S_DeInit+0xc8>)
 800af1e:	4293      	cmp	r3, r2
 800af20:	d10a      	bne.n	800af38 <SPI_I2S_DeInit+0x44>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, ENABLE);
 800af22:	2101      	movs	r1, #1
 800af24:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800af28:	f7fd fdfa 	bl	8008b20 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, DISABLE);
 800af2c:	2100      	movs	r1, #0
 800af2e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800af32:	f7fd fdf5 	bl	8008b20 <RCC_APB1PeriphResetCmd>
}
 800af36:	e03a      	b.n	800afae <SPI_I2S_DeInit+0xba>
  else if (SPIx == SPI3)
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	4a21      	ldr	r2, [pc, #132]	; (800afc0 <SPI_I2S_DeInit+0xcc>)
 800af3c:	4293      	cmp	r3, r2
 800af3e:	d10a      	bne.n	800af56 <SPI_I2S_DeInit+0x62>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
 800af40:	2101      	movs	r1, #1
 800af42:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800af46:	f7fd fdeb 	bl	8008b20 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, DISABLE);
 800af4a:	2100      	movs	r1, #0
 800af4c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800af50:	f7fd fde6 	bl	8008b20 <RCC_APB1PeriphResetCmd>
}
 800af54:	e02b      	b.n	800afae <SPI_I2S_DeInit+0xba>
  else if (SPIx == SPI4)
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	4a1a      	ldr	r2, [pc, #104]	; (800afc4 <SPI_I2S_DeInit+0xd0>)
 800af5a:	4293      	cmp	r3, r2
 800af5c:	d10a      	bne.n	800af74 <SPI_I2S_DeInit+0x80>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI4, ENABLE);
 800af5e:	2101      	movs	r1, #1
 800af60:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800af64:	f7fd fdfc 	bl	8008b60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI4, DISABLE);
 800af68:	2100      	movs	r1, #0
 800af6a:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800af6e:	f7fd fdf7 	bl	8008b60 <RCC_APB2PeriphResetCmd>
}
 800af72:	e01c      	b.n	800afae <SPI_I2S_DeInit+0xba>
  else if (SPIx == SPI5)
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	4a14      	ldr	r2, [pc, #80]	; (800afc8 <SPI_I2S_DeInit+0xd4>)
 800af78:	4293      	cmp	r3, r2
 800af7a:	d10a      	bne.n	800af92 <SPI_I2S_DeInit+0x9e>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI5, ENABLE);
 800af7c:	2101      	movs	r1, #1
 800af7e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800af82:	f7fd fded 	bl	8008b60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI5, DISABLE);
 800af86:	2100      	movs	r1, #0
 800af88:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800af8c:	f7fd fde8 	bl	8008b60 <RCC_APB2PeriphResetCmd>
}
 800af90:	e00d      	b.n	800afae <SPI_I2S_DeInit+0xba>
    if (SPIx == SPI6)
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	4a0d      	ldr	r2, [pc, #52]	; (800afcc <SPI_I2S_DeInit+0xd8>)
 800af96:	4293      	cmp	r3, r2
 800af98:	d109      	bne.n	800afae <SPI_I2S_DeInit+0xba>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, ENABLE);
 800af9a:	2101      	movs	r1, #1
 800af9c:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800afa0:	f7fd fdde 	bl	8008b60 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, DISABLE);
 800afa4:	2100      	movs	r1, #0
 800afa6:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800afaa:	f7fd fdd9 	bl	8008b60 <RCC_APB2PeriphResetCmd>
}
 800afae:	bf00      	nop
 800afb0:	3708      	adds	r7, #8
 800afb2:	46bd      	mov	sp, r7
 800afb4:	bd80      	pop	{r7, pc}
 800afb6:	bf00      	nop
 800afb8:	40013000 	.word	0x40013000
 800afbc:	40003800 	.word	0x40003800
 800afc0:	40003c00 	.word	0x40003c00
 800afc4:	40013400 	.word	0x40013400
 800afc8:	40015000 	.word	0x40015000
 800afcc:	40015400 	.word	0x40015400

0800afd0 <SPI_Init>:
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure that
  *         contains the configuration information for the specified SPI peripheral.
  * @retval None
  */
void SPI_Init(SPI_TypeDef* SPIx, SPI_InitTypeDef* SPI_InitStruct)
{
 800afd0:	b480      	push	{r7}
 800afd2:	b085      	sub	sp, #20
 800afd4:	af00      	add	r7, sp, #0
 800afd6:	6078      	str	r0, [r7, #4]
 800afd8:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 800afda:	2300      	movs	r3, #0
 800afdc:	81fb      	strh	r3, [r7, #14]
  assert_param(IS_SPI_FIRST_BIT(SPI_InitStruct->SPI_FirstBit));
  assert_param(IS_SPI_CRC_POLYNOMIAL(SPI_InitStruct->SPI_CRCPolynomial));

/*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	881b      	ldrh	r3, [r3, #0]
 800afe2:	81fb      	strh	r3, [r7, #14]
  /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, MSTR, CPOL and CPHA bits */
  tmpreg &= CR1_CLEAR_MASK;
 800afe4:	89fb      	ldrh	r3, [r7, #14]
 800afe6:	f403 5341 	and.w	r3, r3, #12352	; 0x3040
 800afea:	81fb      	strh	r3, [r7, #14]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 800afec:	683b      	ldr	r3, [r7, #0]
 800afee:	881a      	ldrh	r2, [r3, #0]
 800aff0:	683b      	ldr	r3, [r7, #0]
 800aff2:	885b      	ldrh	r3, [r3, #2]
 800aff4:	4313      	orrs	r3, r2
 800aff6:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 800aff8:	683b      	ldr	r3, [r7, #0]
 800affa:	889b      	ldrh	r3, [r3, #4]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 800affc:	4313      	orrs	r3, r2
 800affe:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 800b000:	683b      	ldr	r3, [r7, #0]
 800b002:	88db      	ldrh	r3, [r3, #6]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 800b004:	4313      	orrs	r3, r2
 800b006:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 800b008:	683b      	ldr	r3, [r7, #0]
 800b00a:	891b      	ldrh	r3, [r3, #8]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 800b00c:	4313      	orrs	r3, r2
 800b00e:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 800b010:	683b      	ldr	r3, [r7, #0]
 800b012:	895b      	ldrh	r3, [r3, #10]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 800b014:	4313      	orrs	r3, r2
 800b016:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 800b018:	683b      	ldr	r3, [r7, #0]
 800b01a:	899b      	ldrh	r3, [r3, #12]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 800b01c:	4313      	orrs	r3, r2
 800b01e:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 800b020:	683b      	ldr	r3, [r7, #0]
 800b022:	89db      	ldrh	r3, [r3, #14]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 800b024:	4313      	orrs	r3, r2
 800b026:	b29a      	uxth	r2, r3
 800b028:	89fb      	ldrh	r3, [r7, #14]
 800b02a:	4313      	orrs	r3, r2
 800b02c:	81fb      	strh	r3, [r7, #14]
  /* Write to SPIx CR1 */
  SPIx->CR1 = tmpreg;
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	89fa      	ldrh	r2, [r7, #14]
 800b032:	801a      	strh	r2, [r3, #0]

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SMOD);
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	8b9b      	ldrh	r3, [r3, #28]
 800b038:	b29b      	uxth	r3, r3
 800b03a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b03e:	b29a      	uxth	r2, r3
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	839a      	strh	r2, [r3, #28]
/*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Write to SPIx CRCPOLY */
  SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 800b044:	683b      	ldr	r3, [r7, #0]
 800b046:	8a1a      	ldrh	r2, [r3, #16]
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	821a      	strh	r2, [r3, #16]
}
 800b04c:	bf00      	nop
 800b04e:	3714      	adds	r7, #20
 800b050:	46bd      	mov	sp, r7
 800b052:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b056:	4770      	bx	lr

0800b058 <I2S_Init>:
  *         to the value of the the source clock frequency (in Hz).
  *  
  * @retval None
  */
void I2S_Init(SPI_TypeDef* SPIx, I2S_InitTypeDef* I2S_InitStruct)
{
 800b058:	b480      	push	{r7}
 800b05a:	b08b      	sub	sp, #44	; 0x2c
 800b05c:	af00      	add	r7, sp, #0
 800b05e:	6078      	str	r0, [r7, #4]
 800b060:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0, i2sdiv = 2, i2sodd = 0, packetlength = 1;
 800b062:	2300      	movs	r3, #0
 800b064:	837b      	strh	r3, [r7, #26]
 800b066:	2302      	movs	r3, #2
 800b068:	84fb      	strh	r3, [r7, #38]	; 0x26
 800b06a:	2300      	movs	r3, #0
 800b06c:	84bb      	strh	r3, [r7, #36]	; 0x24
 800b06e:	2301      	movs	r3, #1
 800b070:	847b      	strh	r3, [r7, #34]	; 0x22
  uint32_t tmp = 0, i2sclk = 0;
 800b072:	2300      	movs	r3, #0
 800b074:	61fb      	str	r3, [r7, #28]
 800b076:	2300      	movs	r3, #0
 800b078:	617b      	str	r3, [r7, #20]
#ifndef I2S_EXTERNAL_CLOCK_VAL
  uint32_t pllm = 0, plln = 0, pllr = 0;
 800b07a:	2300      	movs	r3, #0
 800b07c:	613b      	str	r3, [r7, #16]
 800b07e:	2300      	movs	r3, #0
 800b080:	60fb      	str	r3, [r7, #12]
 800b082:	2300      	movs	r3, #0
 800b084:	60bb      	str	r3, [r7, #8]
  assert_param(IS_I2S_AUDIO_FREQ(I2S_InitStruct->I2S_AudioFreq));
  assert_param(IS_I2S_CPOL(I2S_InitStruct->I2S_CPOL));  

/*----------------------- SPIx I2SCFGR & I2SPR Configuration -----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  SPIx->I2SCFGR &= I2SCFGR_CLEAR_MASK; 
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	8b9b      	ldrh	r3, [r3, #28]
 800b08a:	b29b      	uxth	r3, r3
 800b08c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800b090:	f023 030f 	bic.w	r3, r3, #15
 800b094:	b29a      	uxth	r2, r3
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	839a      	strh	r2, [r3, #28]
  SPIx->I2SPR = 0x0002;
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	2202      	movs	r2, #2
 800b09e:	841a      	strh	r2, [r3, #32]
  
  /* Get the I2SCFGR register value */
  tmpreg = SPIx->I2SCFGR;
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	8b9b      	ldrh	r3, [r3, #28]
 800b0a4:	837b      	strh	r3, [r7, #26]
  
  /* If the default value has to be written, reinitialize i2sdiv and i2sodd*/
  if(I2S_InitStruct->I2S_AudioFreq == I2S_AudioFreq_Default)
 800b0a6:	683b      	ldr	r3, [r7, #0]
 800b0a8:	689b      	ldr	r3, [r3, #8]
 800b0aa:	2b02      	cmp	r3, #2
 800b0ac:	d104      	bne.n	800b0b8 <I2S_Init+0x60>
  {
    i2sodd = (uint16_t)0;
 800b0ae:	2300      	movs	r3, #0
 800b0b0:	84bb      	strh	r3, [r7, #36]	; 0x24
    i2sdiv = (uint16_t)2;   
 800b0b2:	2302      	movs	r3, #2
 800b0b4:	84fb      	strh	r3, [r7, #38]	; 0x26
 800b0b6:	e06d      	b.n	800b194 <I2S_Init+0x13c>
  }
  /* If the requested audio frequency is not the default, compute the prescaler */
  else
  {
    /* Check the frame length (For the Prescaler computing) *******************/
    if(I2S_InitStruct->I2S_DataFormat == I2S_DataFormat_16b)
 800b0b8:	683b      	ldr	r3, [r7, #0]
 800b0ba:	889b      	ldrh	r3, [r3, #4]
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	d102      	bne.n	800b0c6 <I2S_Init+0x6e>
    {
      /* Packet length is 16 bits */
      packetlength = 1;
 800b0c0:	2301      	movs	r3, #1
 800b0c2:	847b      	strh	r3, [r7, #34]	; 0x22
 800b0c4:	e001      	b.n	800b0ca <I2S_Init+0x72>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 2;
 800b0c6:	2302      	movs	r3, #2
 800b0c8:	847b      	strh	r3, [r7, #34]	; 0x22
    /* Set the I2S clock to the external clock  value */
    i2sclk = I2S_EXTERNAL_CLOCK_VAL;

  #else /* There is no define for External I2S clock source */
    /* Set PLLI2S as I2S clock source */
    if ((RCC->CFGR & RCC_CFGR_I2SSRC) != 0)
 800b0ca:	4b4b      	ldr	r3, [pc, #300]	; (800b1f8 <I2S_Init+0x1a0>)
 800b0cc:	689b      	ldr	r3, [r3, #8]
 800b0ce:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d005      	beq.n	800b0e2 <I2S_Init+0x8a>
    {
      RCC->CFGR &= ~(uint32_t)RCC_CFGR_I2SSRC;
 800b0d6:	4b48      	ldr	r3, [pc, #288]	; (800b1f8 <I2S_Init+0x1a0>)
 800b0d8:	689b      	ldr	r3, [r3, #8]
 800b0da:	4a47      	ldr	r2, [pc, #284]	; (800b1f8 <I2S_Init+0x1a0>)
 800b0dc:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800b0e0:	6093      	str	r3, [r2, #8]
    }    
    
    /* Get the PLLI2SN value */
    plln = (uint32_t)(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6) & \
 800b0e2:	4b45      	ldr	r3, [pc, #276]	; (800b1f8 <I2S_Init+0x1a0>)
 800b0e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b0e8:	099b      	lsrs	r3, r3, #6
 800b0ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b0ee:	60fb      	str	r3, [r7, #12]
                      (RCC_PLLI2SCFGR_PLLI2SN >> 6));
    
    /* Get the PLLI2SR value */
    pllr = (uint32_t)(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28) & \
 800b0f0:	4b41      	ldr	r3, [pc, #260]	; (800b1f8 <I2S_Init+0x1a0>)
 800b0f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b0f6:	0f1b      	lsrs	r3, r3, #28
 800b0f8:	f003 0307 	and.w	r3, r3, #7
 800b0fc:	60bb      	str	r3, [r7, #8]
                      (RCC_PLLI2SCFGR_PLLI2SR >> 28));
    
    /* Get the PLLM value */
    pllm = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM);      
 800b0fe:	4b3e      	ldr	r3, [pc, #248]	; (800b1f8 <I2S_Init+0x1a0>)
 800b100:	685b      	ldr	r3, [r3, #4]
 800b102:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b106:	613b      	str	r3, [r7, #16]

    /* Get the I2S source clock value */
    i2sclk = (uint32_t)(((HSE_VALUE / pllm) * plln) / pllr);
 800b108:	4a3c      	ldr	r2, [pc, #240]	; (800b1fc <I2S_Init+0x1a4>)
 800b10a:	693b      	ldr	r3, [r7, #16]
 800b10c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b110:	68fa      	ldr	r2, [r7, #12]
 800b112:	fb02 f203 	mul.w	r2, r2, r3
 800b116:	68bb      	ldr	r3, [r7, #8]
 800b118:	fbb2 f3f3 	udiv	r3, r2, r3
 800b11c:	617b      	str	r3, [r7, #20]
  #endif /* I2S_EXTERNAL_CLOCK_VAL */
    
    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if(I2S_InitStruct->I2S_MCLKOutput == I2S_MCLKOutput_Enable)
 800b11e:	683b      	ldr	r3, [r7, #0]
 800b120:	88db      	ldrh	r3, [r3, #6]
 800b122:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b126:	d10f      	bne.n	800b148 <I2S_Init+0xf0>
    {
      /* MCLK output is enabled */
      tmp = (uint16_t)(((((i2sclk / 256) * 10) / I2S_InitStruct->I2S_AudioFreq)) + 5);
 800b128:	697b      	ldr	r3, [r7, #20]
 800b12a:	0a1a      	lsrs	r2, r3, #8
 800b12c:	4613      	mov	r3, r2
 800b12e:	009b      	lsls	r3, r3, #2
 800b130:	4413      	add	r3, r2
 800b132:	005b      	lsls	r3, r3, #1
 800b134:	461a      	mov	r2, r3
 800b136:	683b      	ldr	r3, [r7, #0]
 800b138:	689b      	ldr	r3, [r3, #8]
 800b13a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b13e:	b29b      	uxth	r3, r3
 800b140:	3305      	adds	r3, #5
 800b142:	b29b      	uxth	r3, r3
 800b144:	61fb      	str	r3, [r7, #28]
 800b146:	e012      	b.n	800b16e <I2S_Init+0x116>
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint16_t)(((((i2sclk / (32 * packetlength)) *10 ) / I2S_InitStruct->I2S_AudioFreq)) + 5);
 800b148:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b14a:	015b      	lsls	r3, r3, #5
 800b14c:	461a      	mov	r2, r3
 800b14e:	697b      	ldr	r3, [r7, #20]
 800b150:	fbb3 f2f2 	udiv	r2, r3, r2
 800b154:	4613      	mov	r3, r2
 800b156:	009b      	lsls	r3, r3, #2
 800b158:	4413      	add	r3, r2
 800b15a:	005b      	lsls	r3, r3, #1
 800b15c:	461a      	mov	r2, r3
 800b15e:	683b      	ldr	r3, [r7, #0]
 800b160:	689b      	ldr	r3, [r3, #8]
 800b162:	fbb2 f3f3 	udiv	r3, r2, r3
 800b166:	b29b      	uxth	r3, r3
 800b168:	3305      	adds	r3, #5
 800b16a:	b29b      	uxth	r3, r3
 800b16c:	61fb      	str	r3, [r7, #28]
    }
    
    /* Remove the flatting point */
    tmp = tmp / 10;  
 800b16e:	69fb      	ldr	r3, [r7, #28]
 800b170:	4a23      	ldr	r2, [pc, #140]	; (800b200 <I2S_Init+0x1a8>)
 800b172:	fba2 2303 	umull	r2, r3, r2, r3
 800b176:	08db      	lsrs	r3, r3, #3
 800b178:	61fb      	str	r3, [r7, #28]
      
    /* Check the parity of the divider */
    i2sodd = (uint16_t)(tmp & (uint16_t)0x0001);
 800b17a:	69fb      	ldr	r3, [r7, #28]
 800b17c:	b29b      	uxth	r3, r3
 800b17e:	f003 0301 	and.w	r3, r3, #1
 800b182:	84bb      	strh	r3, [r7, #36]	; 0x24
   
    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint16_t)((tmp - i2sodd) / 2);
 800b184:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b186:	69fa      	ldr	r2, [r7, #28]
 800b188:	1ad3      	subs	r3, r2, r3
 800b18a:	085b      	lsrs	r3, r3, #1
 800b18c:	84fb      	strh	r3, [r7, #38]	; 0x26
   
    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint16_t) (i2sodd << 8);
 800b18e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b190:	021b      	lsls	r3, r3, #8
 800b192:	84bb      	strh	r3, [r7, #36]	; 0x24
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2) || (i2sdiv > 0xFF))
 800b194:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b196:	2b01      	cmp	r3, #1
 800b198:	d902      	bls.n	800b1a0 <I2S_Init+0x148>
 800b19a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b19c:	2bff      	cmp	r3, #255	; 0xff
 800b19e:	d903      	bls.n	800b1a8 <I2S_Init+0x150>
  {
    /* Set the default values */
    i2sdiv = 2;
 800b1a0:	2302      	movs	r3, #2
 800b1a2:	84fb      	strh	r3, [r7, #38]	; 0x26
    i2sodd = 0;
 800b1a4:	2300      	movs	r3, #0
 800b1a6:	84bb      	strh	r3, [r7, #36]	; 0x24
  }

  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)((uint16_t)i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));
 800b1a8:	683b      	ldr	r3, [r7, #0]
 800b1aa:	88da      	ldrh	r2, [r3, #6]
 800b1ac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b1ae:	4313      	orrs	r3, r2
 800b1b0:	b29a      	uxth	r2, r3
 800b1b2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b1b4:	4313      	orrs	r3, r2
 800b1b6:	b29a      	uxth	r2, r3
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	841a      	strh	r2, [r3, #32]
 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(I2S_InitStruct->I2S_Mode | \
 800b1bc:	683b      	ldr	r3, [r7, #0]
 800b1be:	881a      	ldrh	r2, [r3, #0]
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
 800b1c0:	683b      	ldr	r3, [r7, #0]
 800b1c2:	8859      	ldrh	r1, [r3, #2]
 800b1c4:	683b      	ldr	r3, [r7, #0]
 800b1c6:	8898      	ldrh	r0, [r3, #4]
                  (uint16_t)I2S_InitStruct->I2S_CPOL))));
 800b1c8:	683b      	ldr	r3, [r7, #0]
 800b1ca:	899b      	ldrh	r3, [r3, #12]
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
 800b1cc:	4303      	orrs	r3, r0
 800b1ce:	b29b      	uxth	r3, r3
 800b1d0:	430b      	orrs	r3, r1
 800b1d2:	b29b      	uxth	r3, r3
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(I2S_InitStruct->I2S_Mode | \
 800b1d4:	4313      	orrs	r3, r2
 800b1d6:	b29a      	uxth	r2, r3
 800b1d8:	8b7b      	ldrh	r3, [r7, #26]
 800b1da:	4313      	orrs	r3, r2
 800b1dc:	b29b      	uxth	r3, r3
 800b1de:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800b1e2:	837b      	strh	r3, [r7, #26]
 
  /* Write to SPIx I2SCFGR */  
  SPIx->I2SCFGR = tmpreg;
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	8b7a      	ldrh	r2, [r7, #26]
 800b1e8:	839a      	strh	r2, [r3, #28]
}
 800b1ea:	bf00      	nop
 800b1ec:	372c      	adds	r7, #44	; 0x2c
 800b1ee:	46bd      	mov	sp, r7
 800b1f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1f4:	4770      	bx	lr
 800b1f6:	bf00      	nop
 800b1f8:	40023800 	.word	0x40023800
 800b1fc:	007a1200 	.word	0x007a1200
 800b200:	cccccccd 	.word	0xcccccccd

0800b204 <SPI_StructInit>:
  * @brief  Fills each SPI_InitStruct member with its default value.
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure which will be initialized.
  * @retval None
  */
void SPI_StructInit(SPI_InitTypeDef* SPI_InitStruct)
{
 800b204:	b480      	push	{r7}
 800b206:	b083      	sub	sp, #12
 800b208:	af00      	add	r7, sp, #0
 800b20a:	6078      	str	r0, [r7, #4]
/*--------------- Reset SPI init structure parameters values -----------------*/
  /* Initialize the SPI_Direction member */
  SPI_InitStruct->SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	2200      	movs	r2, #0
 800b210:	801a      	strh	r2, [r3, #0]
  /* initialize the SPI_Mode member */
  SPI_InitStruct->SPI_Mode = SPI_Mode_Slave;
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	2200      	movs	r2, #0
 800b216:	805a      	strh	r2, [r3, #2]
  /* initialize the SPI_DataSize member */
  SPI_InitStruct->SPI_DataSize = SPI_DataSize_8b;
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	2200      	movs	r2, #0
 800b21c:	809a      	strh	r2, [r3, #4]
  /* Initialize the SPI_CPOL member */
  SPI_InitStruct->SPI_CPOL = SPI_CPOL_Low;
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	2200      	movs	r2, #0
 800b222:	80da      	strh	r2, [r3, #6]
  /* Initialize the SPI_CPHA member */
  SPI_InitStruct->SPI_CPHA = SPI_CPHA_1Edge;
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	2200      	movs	r2, #0
 800b228:	811a      	strh	r2, [r3, #8]
  /* Initialize the SPI_NSS member */
  SPI_InitStruct->SPI_NSS = SPI_NSS_Hard;
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	2200      	movs	r2, #0
 800b22e:	815a      	strh	r2, [r3, #10]
  /* Initialize the SPI_BaudRatePrescaler member */
  SPI_InitStruct->SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_2;
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	2200      	movs	r2, #0
 800b234:	819a      	strh	r2, [r3, #12]
  /* Initialize the SPI_FirstBit member */
  SPI_InitStruct->SPI_FirstBit = SPI_FirstBit_MSB;
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	2200      	movs	r2, #0
 800b23a:	81da      	strh	r2, [r3, #14]
  /* Initialize the SPI_CRCPolynomial member */
  SPI_InitStruct->SPI_CRCPolynomial = 7;
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	2207      	movs	r2, #7
 800b240:	821a      	strh	r2, [r3, #16]
}
 800b242:	bf00      	nop
 800b244:	370c      	adds	r7, #12
 800b246:	46bd      	mov	sp, r7
 800b248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b24c:	4770      	bx	lr

0800b24e <I2S_StructInit>:
  * @brief  Fills each I2S_InitStruct member with its default value.
  * @param  I2S_InitStruct: pointer to a I2S_InitTypeDef structure which will be initialized.
  * @retval None
  */
void I2S_StructInit(I2S_InitTypeDef* I2S_InitStruct)
{
 800b24e:	b480      	push	{r7}
 800b250:	b083      	sub	sp, #12
 800b252:	af00      	add	r7, sp, #0
 800b254:	6078      	str	r0, [r7, #4]
/*--------------- Reset I2S init structure parameters values -----------------*/
  /* Initialize the I2S_Mode member */
  I2S_InitStruct->I2S_Mode = I2S_Mode_SlaveTx;
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	2200      	movs	r2, #0
 800b25a:	801a      	strh	r2, [r3, #0]
  
  /* Initialize the I2S_Standard member */
  I2S_InitStruct->I2S_Standard = I2S_Standard_Phillips;
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	2200      	movs	r2, #0
 800b260:	805a      	strh	r2, [r3, #2]
  
  /* Initialize the I2S_DataFormat member */
  I2S_InitStruct->I2S_DataFormat = I2S_DataFormat_16b;
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	2200      	movs	r2, #0
 800b266:	809a      	strh	r2, [r3, #4]
  
  /* Initialize the I2S_MCLKOutput member */
  I2S_InitStruct->I2S_MCLKOutput = I2S_MCLKOutput_Disable;
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	2200      	movs	r2, #0
 800b26c:	80da      	strh	r2, [r3, #6]
  
  /* Initialize the I2S_AudioFreq member */
  I2S_InitStruct->I2S_AudioFreq = I2S_AudioFreq_Default;
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	2202      	movs	r2, #2
 800b272:	609a      	str	r2, [r3, #8]
  
  /* Initialize the I2S_CPOL member */
  I2S_InitStruct->I2S_CPOL = I2S_CPOL_Low;
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	2200      	movs	r2, #0
 800b278:	819a      	strh	r2, [r3, #12]
}
 800b27a:	bf00      	nop
 800b27c:	370c      	adds	r7, #12
 800b27e:	46bd      	mov	sp, r7
 800b280:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b284:	4770      	bx	lr

0800b286 <SPI_Cmd>:
  * @param  NewState: new state of the SPIx peripheral. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 800b286:	b480      	push	{r7}
 800b288:	b083      	sub	sp, #12
 800b28a:	af00      	add	r7, sp, #0
 800b28c:	6078      	str	r0, [r7, #4]
 800b28e:	460b      	mov	r3, r1
 800b290:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800b292:	78fb      	ldrb	r3, [r7, #3]
 800b294:	2b00      	cmp	r3, #0
 800b296:	d008      	beq.n	800b2aa <SPI_Cmd+0x24>
  {
    /* Enable the selected SPI peripheral */
    SPIx->CR1 |= SPI_CR1_SPE;
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	881b      	ldrh	r3, [r3, #0]
 800b29c:	b29b      	uxth	r3, r3
 800b29e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b2a2:	b29a      	uxth	r2, r3
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the selected SPI peripheral */
    SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_SPE);
  }
}
 800b2a8:	e007      	b.n	800b2ba <SPI_Cmd+0x34>
    SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_SPE);
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	881b      	ldrh	r3, [r3, #0]
 800b2ae:	b29b      	uxth	r3, r3
 800b2b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b2b4:	b29a      	uxth	r2, r3
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	801a      	strh	r2, [r3, #0]
}
 800b2ba:	bf00      	nop
 800b2bc:	370c      	adds	r7, #12
 800b2be:	46bd      	mov	sp, r7
 800b2c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2c4:	4770      	bx	lr

0800b2c6 <I2S_Cmd>:
  * @param  NewState: new state of the SPIx peripheral. 
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2S_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 800b2c6:	b480      	push	{r7}
 800b2c8:	b083      	sub	sp, #12
 800b2ca:	af00      	add	r7, sp, #0
 800b2cc:	6078      	str	r0, [r7, #4]
 800b2ce:	460b      	mov	r3, r1
 800b2d0:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_23_PERIPH_EXT(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800b2d2:	78fb      	ldrb	r3, [r7, #3]
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d008      	beq.n	800b2ea <I2S_Cmd+0x24>
  {
    /* Enable the selected SPI peripheral (in I2S mode) */
    SPIx->I2SCFGR |= SPI_I2SCFGR_I2SE;
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	8b9b      	ldrh	r3, [r3, #28]
 800b2dc:	b29b      	uxth	r3, r3
 800b2de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b2e2:	b29a      	uxth	r2, r3
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	839a      	strh	r2, [r3, #28]
  else
  {
    /* Disable the selected SPI peripheral in I2S mode */
    SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SE);
  }
}
 800b2e8:	e007      	b.n	800b2fa <I2S_Cmd+0x34>
    SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SE);
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	8b9b      	ldrh	r3, [r3, #28]
 800b2ee:	b29b      	uxth	r3, r3
 800b2f0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b2f4:	b29a      	uxth	r2, r3
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	839a      	strh	r2, [r3, #28]
}
 800b2fa:	bf00      	nop
 800b2fc:	370c      	adds	r7, #12
 800b2fe:	46bd      	mov	sp, r7
 800b300:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b304:	4770      	bx	lr

0800b306 <SPI_DataSizeConfig>:
  *            @arg SPI_DataSize_16b: Set data frame format to 16bit
  *            @arg SPI_DataSize_8b: Set data frame format to 8bit
  * @retval None
  */
void SPI_DataSizeConfig(SPI_TypeDef* SPIx, uint16_t SPI_DataSize)
{
 800b306:	b480      	push	{r7}
 800b308:	b083      	sub	sp, #12
 800b30a:	af00      	add	r7, sp, #0
 800b30c:	6078      	str	r0, [r7, #4]
 800b30e:	460b      	mov	r3, r1
 800b310:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_DATASIZE(SPI_DataSize));
  /* Clear DFF bit */
  SPIx->CR1 &= (uint16_t)~SPI_DataSize_16b;
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	881b      	ldrh	r3, [r3, #0]
 800b316:	b29b      	uxth	r3, r3
 800b318:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b31c:	b29a      	uxth	r2, r3
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	801a      	strh	r2, [r3, #0]
  /* Set new DFF bit value */
  SPIx->CR1 |= SPI_DataSize;
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	881b      	ldrh	r3, [r3, #0]
 800b326:	b29a      	uxth	r2, r3
 800b328:	887b      	ldrh	r3, [r7, #2]
 800b32a:	4313      	orrs	r3, r2
 800b32c:	b29a      	uxth	r2, r3
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	801a      	strh	r2, [r3, #0]
}
 800b332:	bf00      	nop
 800b334:	370c      	adds	r7, #12
 800b336:	46bd      	mov	sp, r7
 800b338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b33c:	4770      	bx	lr

0800b33e <SPI_BiDirectionalLineConfig>:
  *            @arg SPI_Direction_Tx: Selects Tx transmission direction
  *            @arg SPI_Direction_Rx: Selects Rx receive direction
  * @retval None
  */
void SPI_BiDirectionalLineConfig(SPI_TypeDef* SPIx, uint16_t SPI_Direction)
{
 800b33e:	b480      	push	{r7}
 800b340:	b083      	sub	sp, #12
 800b342:	af00      	add	r7, sp, #0
 800b344:	6078      	str	r0, [r7, #4]
 800b346:	460b      	mov	r3, r1
 800b348:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_DIRECTION(SPI_Direction));
  if (SPI_Direction == SPI_Direction_Tx)
 800b34a:	887b      	ldrh	r3, [r7, #2]
 800b34c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b350:	d108      	bne.n	800b364 <SPI_BiDirectionalLineConfig+0x26>
  {
    /* Set the Tx only mode */
    SPIx->CR1 |= SPI_Direction_Tx;
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	881b      	ldrh	r3, [r3, #0]
 800b356:	b29b      	uxth	r3, r3
 800b358:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b35c:	b29a      	uxth	r2, r3
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Set the Rx only mode */
    SPIx->CR1 &= SPI_Direction_Rx;
  }
}
 800b362:	e007      	b.n	800b374 <SPI_BiDirectionalLineConfig+0x36>
    SPIx->CR1 &= SPI_Direction_Rx;
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	881b      	ldrh	r3, [r3, #0]
 800b368:	b29b      	uxth	r3, r3
 800b36a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b36e:	b29a      	uxth	r2, r3
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	801a      	strh	r2, [r3, #0]
}
 800b374:	bf00      	nop
 800b376:	370c      	adds	r7, #12
 800b378:	46bd      	mov	sp, r7
 800b37a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b37e:	4770      	bx	lr

0800b380 <SPI_NSSInternalSoftwareConfig>:
  *            @arg SPI_NSSInternalSoft_Set: Set NSS pin internally
  *            @arg SPI_NSSInternalSoft_Reset: Reset NSS pin internally
  * @retval None
  */
void SPI_NSSInternalSoftwareConfig(SPI_TypeDef* SPIx, uint16_t SPI_NSSInternalSoft)
{
 800b380:	b480      	push	{r7}
 800b382:	b083      	sub	sp, #12
 800b384:	af00      	add	r7, sp, #0
 800b386:	6078      	str	r0, [r7, #4]
 800b388:	460b      	mov	r3, r1
 800b38a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_NSS_INTERNAL(SPI_NSSInternalSoft));
  if (SPI_NSSInternalSoft != SPI_NSSInternalSoft_Reset)
 800b38c:	887b      	ldrh	r3, [r7, #2]
 800b38e:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 800b392:	4293      	cmp	r3, r2
 800b394:	d008      	beq.n	800b3a8 <SPI_NSSInternalSoftwareConfig+0x28>
  {
    /* Set NSS pin internally by software */
    SPIx->CR1 |= SPI_NSSInternalSoft_Set;
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	881b      	ldrh	r3, [r3, #0]
 800b39a:	b29b      	uxth	r3, r3
 800b39c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b3a0:	b29a      	uxth	r2, r3
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Reset NSS pin internally by software */
    SPIx->CR1 &= SPI_NSSInternalSoft_Reset;
  }
}
 800b3a6:	e007      	b.n	800b3b8 <SPI_NSSInternalSoftwareConfig+0x38>
    SPIx->CR1 &= SPI_NSSInternalSoft_Reset;
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	881b      	ldrh	r3, [r3, #0]
 800b3ac:	b29b      	uxth	r3, r3
 800b3ae:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b3b2:	b29a      	uxth	r2, r3
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	801a      	strh	r2, [r3, #0]
}
 800b3b8:	bf00      	nop
 800b3ba:	370c      	adds	r7, #12
 800b3bc:	46bd      	mov	sp, r7
 800b3be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3c2:	4770      	bx	lr

0800b3c4 <SPI_SSOutputCmd>:
  * @param  NewState: new state of the SPIx SS output. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_SSOutputCmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 800b3c4:	b480      	push	{r7}
 800b3c6:	b083      	sub	sp, #12
 800b3c8:	af00      	add	r7, sp, #0
 800b3ca:	6078      	str	r0, [r7, #4]
 800b3cc:	460b      	mov	r3, r1
 800b3ce:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800b3d0:	78fb      	ldrb	r3, [r7, #3]
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	d008      	beq.n	800b3e8 <SPI_SSOutputCmd+0x24>
  {
    /* Enable the selected SPI SS output */
    SPIx->CR2 |= (uint16_t)SPI_CR2_SSOE;
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	889b      	ldrh	r3, [r3, #4]
 800b3da:	b29b      	uxth	r3, r3
 800b3dc:	f043 0304 	orr.w	r3, r3, #4
 800b3e0:	b29a      	uxth	r2, r3
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	809a      	strh	r2, [r3, #4]
  else
  {
    /* Disable the selected SPI SS output */
    SPIx->CR2 &= (uint16_t)~((uint16_t)SPI_CR2_SSOE);
  }
}
 800b3e6:	e007      	b.n	800b3f8 <SPI_SSOutputCmd+0x34>
    SPIx->CR2 &= (uint16_t)~((uint16_t)SPI_CR2_SSOE);
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	889b      	ldrh	r3, [r3, #4]
 800b3ec:	b29b      	uxth	r3, r3
 800b3ee:	f023 0304 	bic.w	r3, r3, #4
 800b3f2:	b29a      	uxth	r2, r3
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	809a      	strh	r2, [r3, #4]
}
 800b3f8:	bf00      	nop
 800b3fa:	370c      	adds	r7, #12
 800b3fc:	46bd      	mov	sp, r7
 800b3fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b402:	4770      	bx	lr

0800b404 <SPI_TIModeCmd>:
  * @param  NewState: new state of the selected SPI TI communication mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_TIModeCmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 800b404:	b480      	push	{r7}
 800b406:	b083      	sub	sp, #12
 800b408:	af00      	add	r7, sp, #0
 800b40a:	6078      	str	r0, [r7, #4]
 800b40c:	460b      	mov	r3, r1
 800b40e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800b410:	78fb      	ldrb	r3, [r7, #3]
 800b412:	2b00      	cmp	r3, #0
 800b414:	d008      	beq.n	800b428 <SPI_TIModeCmd+0x24>
  {
    /* Enable the TI mode for the selected SPI peripheral */
    SPIx->CR2 |= SPI_CR2_FRF;
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	889b      	ldrh	r3, [r3, #4]
 800b41a:	b29b      	uxth	r3, r3
 800b41c:	f043 0310 	orr.w	r3, r3, #16
 800b420:	b29a      	uxth	r2, r3
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	809a      	strh	r2, [r3, #4]
  else
  {
    /* Disable the TI mode for the selected SPI peripheral */
    SPIx->CR2 &= (uint16_t)~SPI_CR2_FRF;
  }
}
 800b426:	e007      	b.n	800b438 <SPI_TIModeCmd+0x34>
    SPIx->CR2 &= (uint16_t)~SPI_CR2_FRF;
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	889b      	ldrh	r3, [r3, #4]
 800b42c:	b29b      	uxth	r3, r3
 800b42e:	f023 0310 	bic.w	r3, r3, #16
 800b432:	b29a      	uxth	r2, r3
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	809a      	strh	r2, [r3, #4]
}
 800b438:	bf00      	nop
 800b43a:	370c      	adds	r7, #12
 800b43c:	46bd      	mov	sp, r7
 800b43e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b442:	4770      	bx	lr

0800b444 <I2S_FullDuplexConfig>:
  * @note   The I2S full duplex extension can be configured in slave mode only.    
  *  
  * @retval None
  */
void I2S_FullDuplexConfig(SPI_TypeDef* I2Sxext, I2S_InitTypeDef* I2S_InitStruct)
{
 800b444:	b480      	push	{r7}
 800b446:	b085      	sub	sp, #20
 800b448:	af00      	add	r7, sp, #0
 800b44a:	6078      	str	r0, [r7, #4]
 800b44c:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0, tmp = 0;
 800b44e:	2300      	movs	r3, #0
 800b450:	81bb      	strh	r3, [r7, #12]
 800b452:	2300      	movs	r3, #0
 800b454:	81fb      	strh	r3, [r7, #14]
  assert_param(IS_I2S_DATA_FORMAT(I2S_InitStruct->I2S_DataFormat));
  assert_param(IS_I2S_CPOL(I2S_InitStruct->I2S_CPOL));  

/*----------------------- SPIx I2SCFGR & I2SPR Configuration -----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  I2Sxext->I2SCFGR &= I2SCFGR_CLEAR_MASK; 
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	8b9b      	ldrh	r3, [r3, #28]
 800b45a:	b29b      	uxth	r3, r3
 800b45c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800b460:	f023 030f 	bic.w	r3, r3, #15
 800b464:	b29a      	uxth	r2, r3
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	839a      	strh	r2, [r3, #28]
  I2Sxext->I2SPR = 0x0002;
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	2202      	movs	r2, #2
 800b46e:	841a      	strh	r2, [r3, #32]
  
  /* Get the I2SCFGR register value */
  tmpreg = I2Sxext->I2SCFGR;
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	8b9b      	ldrh	r3, [r3, #28]
 800b474:	81bb      	strh	r3, [r7, #12]
  
  /* Get the mode to be configured for the extended I2S */
  if ((I2S_InitStruct->I2S_Mode == I2S_Mode_MasterTx) || (I2S_InitStruct->I2S_Mode == I2S_Mode_SlaveTx))
 800b476:	683b      	ldr	r3, [r7, #0]
 800b478:	881b      	ldrh	r3, [r3, #0]
 800b47a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b47e:	d003      	beq.n	800b488 <I2S_FullDuplexConfig+0x44>
 800b480:	683b      	ldr	r3, [r7, #0]
 800b482:	881b      	ldrh	r3, [r3, #0]
 800b484:	2b00      	cmp	r3, #0
 800b486:	d103      	bne.n	800b490 <I2S_FullDuplexConfig+0x4c>
  {
    tmp = I2S_Mode_SlaveRx;
 800b488:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b48c:	81fb      	strh	r3, [r7, #14]
 800b48e:	e00b      	b.n	800b4a8 <I2S_FullDuplexConfig+0x64>
  }
  else
  {
    if ((I2S_InitStruct->I2S_Mode == I2S_Mode_MasterRx) || (I2S_InitStruct->I2S_Mode == I2S_Mode_SlaveRx))
 800b490:	683b      	ldr	r3, [r7, #0]
 800b492:	881b      	ldrh	r3, [r3, #0]
 800b494:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b498:	d004      	beq.n	800b4a4 <I2S_FullDuplexConfig+0x60>
 800b49a:	683b      	ldr	r3, [r7, #0]
 800b49c:	881b      	ldrh	r3, [r3, #0]
 800b49e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b4a2:	d101      	bne.n	800b4a8 <I2S_FullDuplexConfig+0x64>
    {
      tmp = I2S_Mode_SlaveTx;
 800b4a4:	2300      	movs	r3, #0
 800b4a6:	81fb      	strh	r3, [r7, #14]
  }

 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
 800b4a8:	683b      	ldr	r3, [r7, #0]
 800b4aa:	885a      	ldrh	r2, [r3, #2]
 800b4ac:	683b      	ldr	r3, [r7, #0]
 800b4ae:	8899      	ldrh	r1, [r3, #4]
                  (uint16_t)I2S_InitStruct->I2S_CPOL))));
 800b4b0:	683b      	ldr	r3, [r7, #0]
 800b4b2:	899b      	ldrh	r3, [r3, #12]
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
 800b4b4:	430b      	orrs	r3, r1
 800b4b6:	b29b      	uxth	r3, r3
 800b4b8:	4313      	orrs	r3, r2
 800b4ba:	b29a      	uxth	r2, r3
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 800b4bc:	89fb      	ldrh	r3, [r7, #14]
 800b4be:	4313      	orrs	r3, r2
 800b4c0:	b29a      	uxth	r2, r3
 800b4c2:	89bb      	ldrh	r3, [r7, #12]
 800b4c4:	4313      	orrs	r3, r2
 800b4c6:	b29b      	uxth	r3, r3
 800b4c8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800b4cc:	81bb      	strh	r3, [r7, #12]
 
  /* Write to SPIx I2SCFGR */  
  I2Sxext->I2SCFGR = tmpreg;
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	89ba      	ldrh	r2, [r7, #12]
 800b4d2:	839a      	strh	r2, [r3, #28]
}
 800b4d4:	bf00      	nop
 800b4d6:	3714      	adds	r7, #20
 800b4d8:	46bd      	mov	sp, r7
 800b4da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4de:	4770      	bx	lr

0800b4e0 <SPI_I2S_ReceiveData>:
  * @param  SPIx: To select the SPIx/I2Sx peripheral, where x can be: 1, 2, 3, 4, 5 or 6 
  *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode. 
  * @retval The value of the received data.
  */
uint16_t SPI_I2S_ReceiveData(SPI_TypeDef* SPIx)
{
 800b4e0:	b480      	push	{r7}
 800b4e2:	b083      	sub	sp, #12
 800b4e4:	af00      	add	r7, sp, #0
 800b4e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  
  /* Return the data in the DR register */
  return SPIx->DR;
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	899b      	ldrh	r3, [r3, #12]
 800b4ec:	b29b      	uxth	r3, r3
}
 800b4ee:	4618      	mov	r0, r3
 800b4f0:	370c      	adds	r7, #12
 800b4f2:	46bd      	mov	sp, r7
 800b4f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4f8:	4770      	bx	lr

0800b4fa <SPI_I2S_SendData>:
  *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode.     
  * @param  Data: Data to be transmitted.
  * @retval None
  */
void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
{
 800b4fa:	b480      	push	{r7}
 800b4fc:	b083      	sub	sp, #12
 800b4fe:	af00      	add	r7, sp, #0
 800b500:	6078      	str	r0, [r7, #4]
 800b502:	460b      	mov	r3, r1
 800b504:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  
  /* Write in the DR register the data to be sent */
  SPIx->DR = Data;
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	887a      	ldrh	r2, [r7, #2]
 800b50a:	819a      	strh	r2, [r3, #12]
}
 800b50c:	bf00      	nop
 800b50e:	370c      	adds	r7, #12
 800b510:	46bd      	mov	sp, r7
 800b512:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b516:	4770      	bx	lr

0800b518 <SPI_CalculateCRC>:
  * @param  NewState: new state of the SPIx CRC value calculation.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_CalculateCRC(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 800b518:	b480      	push	{r7}
 800b51a:	b083      	sub	sp, #12
 800b51c:	af00      	add	r7, sp, #0
 800b51e:	6078      	str	r0, [r7, #4]
 800b520:	460b      	mov	r3, r1
 800b522:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800b524:	78fb      	ldrb	r3, [r7, #3]
 800b526:	2b00      	cmp	r3, #0
 800b528:	d008      	beq.n	800b53c <SPI_CalculateCRC+0x24>
  {
    /* Enable the selected SPI CRC calculation */
    SPIx->CR1 |= SPI_CR1_CRCEN;
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	881b      	ldrh	r3, [r3, #0]
 800b52e:	b29b      	uxth	r3, r3
 800b530:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800b534:	b29a      	uxth	r2, r3
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the selected SPI CRC calculation */
    SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_CRCEN);
  }
}
 800b53a:	e007      	b.n	800b54c <SPI_CalculateCRC+0x34>
    SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_CRCEN);
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	881b      	ldrh	r3, [r3, #0]
 800b540:	b29b      	uxth	r3, r3
 800b542:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b546:	b29a      	uxth	r2, r3
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	801a      	strh	r2, [r3, #0]
}
 800b54c:	bf00      	nop
 800b54e:	370c      	adds	r7, #12
 800b550:	46bd      	mov	sp, r7
 800b552:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b556:	4770      	bx	lr

0800b558 <SPI_TransmitCRC>:
  * @brief  Transmit the SPIx CRC value.
  * @param  SPIx: where x can be 1, 2, 3, 4, 5 or 6 to select the SPI peripheral.
  * @retval None
  */
void SPI_TransmitCRC(SPI_TypeDef* SPIx)
{
 800b558:	b480      	push	{r7}
 800b55a:	b083      	sub	sp, #12
 800b55c:	af00      	add	r7, sp, #0
 800b55e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  
  /* Enable the selected SPI CRC transmission */
  SPIx->CR1 |= SPI_CR1_CRCNEXT;
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	881b      	ldrh	r3, [r3, #0]
 800b564:	b29b      	uxth	r3, r3
 800b566:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800b56a:	b29a      	uxth	r2, r3
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	801a      	strh	r2, [r3, #0]
}
 800b570:	bf00      	nop
 800b572:	370c      	adds	r7, #12
 800b574:	46bd      	mov	sp, r7
 800b576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b57a:	4770      	bx	lr

0800b57c <SPI_GetCRC>:
  *            @arg SPI_CRC_Tx: Selects Tx CRC register
  *            @arg SPI_CRC_Rx: Selects Rx CRC register
  * @retval The selected CRC register value..
  */
uint16_t SPI_GetCRC(SPI_TypeDef* SPIx, uint8_t SPI_CRC)
{
 800b57c:	b480      	push	{r7}
 800b57e:	b085      	sub	sp, #20
 800b580:	af00      	add	r7, sp, #0
 800b582:	6078      	str	r0, [r7, #4]
 800b584:	460b      	mov	r3, r1
 800b586:	70fb      	strb	r3, [r7, #3]
  uint16_t crcreg = 0;
 800b588:	2300      	movs	r3, #0
 800b58a:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_CRC(SPI_CRC));
  if (SPI_CRC != SPI_CRC_Rx)
 800b58c:	78fb      	ldrb	r3, [r7, #3]
 800b58e:	2b01      	cmp	r3, #1
 800b590:	d003      	beq.n	800b59a <SPI_GetCRC+0x1e>
  {
    /* Get the Tx CRC register */
    crcreg = SPIx->TXCRCR;
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	8b1b      	ldrh	r3, [r3, #24]
 800b596:	81fb      	strh	r3, [r7, #14]
 800b598:	e002      	b.n	800b5a0 <SPI_GetCRC+0x24>
  }
  else
  {
    /* Get the Rx CRC register */
    crcreg = SPIx->RXCRCR;
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	8a9b      	ldrh	r3, [r3, #20]
 800b59e:	81fb      	strh	r3, [r7, #14]
  }
  /* Return the selected CRC register */
  return crcreg;
 800b5a0:	89fb      	ldrh	r3, [r7, #14]
}
 800b5a2:	4618      	mov	r0, r3
 800b5a4:	3714      	adds	r7, #20
 800b5a6:	46bd      	mov	sp, r7
 800b5a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ac:	4770      	bx	lr

0800b5ae <SPI_GetCRCPolynomial>:
  * @brief  Returns the CRC Polynomial register value for the specified SPI.
  * @param  SPIx: where x can be 1, 2, 3, 4, 5 or 6 to select the SPI peripheral.
  * @retval The CRC Polynomial register value.
  */
uint16_t SPI_GetCRCPolynomial(SPI_TypeDef* SPIx)
{
 800b5ae:	b480      	push	{r7}
 800b5b0:	b083      	sub	sp, #12
 800b5b2:	af00      	add	r7, sp, #0
 800b5b4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  
  /* Return the CRC polynomial register */
  return SPIx->CRCPR;
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	8a1b      	ldrh	r3, [r3, #16]
 800b5ba:	b29b      	uxth	r3, r3
}
 800b5bc:	4618      	mov	r0, r3
 800b5be:	370c      	adds	r7, #12
 800b5c0:	46bd      	mov	sp, r7
 800b5c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5c6:	4770      	bx	lr

0800b5c8 <SPI_I2S_DMACmd>:
  * @param  NewState: new state of the selected SPI DMA transfer request.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_I2S_DMACmd(SPI_TypeDef* SPIx, uint16_t SPI_I2S_DMAReq, FunctionalState NewState)
{
 800b5c8:	b480      	push	{r7}
 800b5ca:	b083      	sub	sp, #12
 800b5cc:	af00      	add	r7, sp, #0
 800b5ce:	6078      	str	r0, [r7, #4]
 800b5d0:	460b      	mov	r3, r1
 800b5d2:	807b      	strh	r3, [r7, #2]
 800b5d4:	4613      	mov	r3, r2
 800b5d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_SPI_I2S_DMAREQ(SPI_I2S_DMAReq));

  if (NewState != DISABLE)
 800b5d8:	787b      	ldrb	r3, [r7, #1]
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	d008      	beq.n	800b5f0 <SPI_I2S_DMACmd+0x28>
  {
    /* Enable the selected SPI DMA requests */
    SPIx->CR2 |= SPI_I2S_DMAReq;
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	889b      	ldrh	r3, [r3, #4]
 800b5e2:	b29a      	uxth	r2, r3
 800b5e4:	887b      	ldrh	r3, [r7, #2]
 800b5e6:	4313      	orrs	r3, r2
 800b5e8:	b29a      	uxth	r2, r3
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	809a      	strh	r2, [r3, #4]
  else
  {
    /* Disable the selected SPI DMA requests */
    SPIx->CR2 &= (uint16_t)~SPI_I2S_DMAReq;
  }
}
 800b5ee:	e009      	b.n	800b604 <SPI_I2S_DMACmd+0x3c>
    SPIx->CR2 &= (uint16_t)~SPI_I2S_DMAReq;
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	889b      	ldrh	r3, [r3, #4]
 800b5f4:	b29a      	uxth	r2, r3
 800b5f6:	887b      	ldrh	r3, [r7, #2]
 800b5f8:	43db      	mvns	r3, r3
 800b5fa:	b29b      	uxth	r3, r3
 800b5fc:	4013      	ands	r3, r2
 800b5fe:	b29a      	uxth	r2, r3
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	809a      	strh	r2, [r3, #4]
}
 800b604:	bf00      	nop
 800b606:	370c      	adds	r7, #12
 800b608:	46bd      	mov	sp, r7
 800b60a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b60e:	4770      	bx	lr

0800b610 <SPI_I2S_ITConfig>:
  * @param  NewState: new state of the specified SPI interrupt.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_I2S_ITConfig(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT, FunctionalState NewState)
{
 800b610:	b480      	push	{r7}
 800b612:	b085      	sub	sp, #20
 800b614:	af00      	add	r7, sp, #0
 800b616:	6078      	str	r0, [r7, #4]
 800b618:	460b      	mov	r3, r1
 800b61a:	70fb      	strb	r3, [r7, #3]
 800b61c:	4613      	mov	r3, r2
 800b61e:	70bb      	strb	r3, [r7, #2]
  uint16_t itpos = 0, itmask = 0 ;
 800b620:	2300      	movs	r3, #0
 800b622:	81fb      	strh	r3, [r7, #14]
 800b624:	2300      	movs	r3, #0
 800b626:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_SPI_I2S_CONFIG_IT(SPI_I2S_IT));

  /* Get the SPI IT index */
  itpos = SPI_I2S_IT >> 4;
 800b628:	78fb      	ldrb	r3, [r7, #3]
 800b62a:	091b      	lsrs	r3, r3, #4
 800b62c:	b2db      	uxtb	r3, r3
 800b62e:	81fb      	strh	r3, [r7, #14]

  /* Set the IT mask */
  itmask = (uint16_t)1 << (uint16_t)itpos;
 800b630:	89fb      	ldrh	r3, [r7, #14]
 800b632:	2201      	movs	r2, #1
 800b634:	fa02 f303 	lsl.w	r3, r2, r3
 800b638:	81bb      	strh	r3, [r7, #12]

  if (NewState != DISABLE)
 800b63a:	78bb      	ldrb	r3, [r7, #2]
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	d008      	beq.n	800b652 <SPI_I2S_ITConfig+0x42>
  {
    /* Enable the selected SPI interrupt */
    SPIx->CR2 |= itmask;
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	889b      	ldrh	r3, [r3, #4]
 800b644:	b29a      	uxth	r2, r3
 800b646:	89bb      	ldrh	r3, [r7, #12]
 800b648:	4313      	orrs	r3, r2
 800b64a:	b29a      	uxth	r2, r3
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	809a      	strh	r2, [r3, #4]
  else
  {
    /* Disable the selected SPI interrupt */
    SPIx->CR2 &= (uint16_t)~itmask;
  }
}
 800b650:	e009      	b.n	800b666 <SPI_I2S_ITConfig+0x56>
    SPIx->CR2 &= (uint16_t)~itmask;
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	889b      	ldrh	r3, [r3, #4]
 800b656:	b29a      	uxth	r2, r3
 800b658:	89bb      	ldrh	r3, [r7, #12]
 800b65a:	43db      	mvns	r3, r3
 800b65c:	b29b      	uxth	r3, r3
 800b65e:	4013      	ands	r3, r2
 800b660:	b29a      	uxth	r2, r3
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	809a      	strh	r2, [r3, #4]
}
 800b666:	bf00      	nop
 800b668:	3714      	adds	r7, #20
 800b66a:	46bd      	mov	sp, r7
 800b66c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b670:	4770      	bx	lr

0800b672 <SPI_I2S_GetFlagStatus>:
  *            @arg I2S_FLAG_UDR: Underrun Error flag.
  *            @arg I2S_FLAG_CHSIDE: Channel Side flag.  
  * @retval The new state of SPI_I2S_FLAG (SET or RESET).
  */
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 800b672:	b480      	push	{r7}
 800b674:	b085      	sub	sp, #20
 800b676:	af00      	add	r7, sp, #0
 800b678:	6078      	str	r0, [r7, #4]
 800b67a:	460b      	mov	r3, r1
 800b67c:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 800b67e:	2300      	movs	r3, #0
 800b680:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  
  /* Check the status of the specified SPI flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	891b      	ldrh	r3, [r3, #8]
 800b686:	b29a      	uxth	r2, r3
 800b688:	887b      	ldrh	r3, [r7, #2]
 800b68a:	4013      	ands	r3, r2
 800b68c:	b29b      	uxth	r3, r3
 800b68e:	2b00      	cmp	r3, #0
 800b690:	d002      	beq.n	800b698 <SPI_I2S_GetFlagStatus+0x26>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 800b692:	2301      	movs	r3, #1
 800b694:	73fb      	strb	r3, [r7, #15]
 800b696:	e001      	b.n	800b69c <SPI_I2S_GetFlagStatus+0x2a>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 800b698:	2300      	movs	r3, #0
 800b69a:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 800b69c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b69e:	4618      	mov	r0, r3
 800b6a0:	3714      	adds	r7, #20
 800b6a2:	46bd      	mov	sp, r7
 800b6a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6a8:	4770      	bx	lr

0800b6aa <SPI_I2S_ClearFlag>:
  *          write operation to SPI_CR1 register (SPI_Cmd() to enable the SPI).
  *  
  * @retval None
  */
void SPI_I2S_ClearFlag(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 800b6aa:	b480      	push	{r7}
 800b6ac:	b083      	sub	sp, #12
 800b6ae:	af00      	add	r7, sp, #0
 800b6b0:	6078      	str	r0, [r7, #4]
 800b6b2:	460b      	mov	r3, r1
 800b6b4:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_CLEAR_FLAG(SPI_I2S_FLAG));
    
  /* Clear the selected SPI CRC Error (CRCERR) flag */
  SPIx->SR = (uint16_t)~SPI_I2S_FLAG;
 800b6b6:	887b      	ldrh	r3, [r7, #2]
 800b6b8:	43db      	mvns	r3, r3
 800b6ba:	b29a      	uxth	r2, r3
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	811a      	strh	r2, [r3, #8]
}
 800b6c0:	bf00      	nop
 800b6c2:	370c      	adds	r7, #12
 800b6c4:	46bd      	mov	sp, r7
 800b6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ca:	4770      	bx	lr

0800b6cc <SPI_I2S_GetITStatus>:
  *            @arg I2S_IT_UDR: Underrun interrupt.  
  *            @arg SPI_I2S_IT_TIFRFE: Format Error interrupt.  
  * @retval The new state of SPI_I2S_IT (SET or RESET).
  */
ITStatus SPI_I2S_GetITStatus(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT)
{
 800b6cc:	b480      	push	{r7}
 800b6ce:	b085      	sub	sp, #20
 800b6d0:	af00      	add	r7, sp, #0
 800b6d2:	6078      	str	r0, [r7, #4]
 800b6d4:	460b      	mov	r3, r1
 800b6d6:	70fb      	strb	r3, [r7, #3]
  ITStatus bitstatus = RESET;
 800b6d8:	2300      	movs	r3, #0
 800b6da:	73fb      	strb	r3, [r7, #15]
  uint16_t itpos = 0, itmask = 0, enablestatus = 0;
 800b6dc:	2300      	movs	r3, #0
 800b6de:	81bb      	strh	r3, [r7, #12]
 800b6e0:	2300      	movs	r3, #0
 800b6e2:	817b      	strh	r3, [r7, #10]
 800b6e4:	2300      	movs	r3, #0
 800b6e6:	813b      	strh	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_IT(SPI_I2S_IT));

  /* Get the SPI_I2S_IT index */
  itpos = 0x01 << (SPI_I2S_IT & 0x0F);
 800b6e8:	78fb      	ldrb	r3, [r7, #3]
 800b6ea:	f003 030f 	and.w	r3, r3, #15
 800b6ee:	2201      	movs	r2, #1
 800b6f0:	fa02 f303 	lsl.w	r3, r2, r3
 800b6f4:	81bb      	strh	r3, [r7, #12]

  /* Get the SPI_I2S_IT IT mask */
  itmask = SPI_I2S_IT >> 4;
 800b6f6:	78fb      	ldrb	r3, [r7, #3]
 800b6f8:	091b      	lsrs	r3, r3, #4
 800b6fa:	b2db      	uxtb	r3, r3
 800b6fc:	817b      	strh	r3, [r7, #10]

  /* Set the IT mask */
  itmask = 0x01 << itmask;
 800b6fe:	897b      	ldrh	r3, [r7, #10]
 800b700:	2201      	movs	r2, #1
 800b702:	fa02 f303 	lsl.w	r3, r2, r3
 800b706:	817b      	strh	r3, [r7, #10]

  /* Get the SPI_I2S_IT enable bit status */
  enablestatus = (SPIx->CR2 & itmask) ;
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	889b      	ldrh	r3, [r3, #4]
 800b70c:	b29a      	uxth	r2, r3
 800b70e:	897b      	ldrh	r3, [r7, #10]
 800b710:	4013      	ands	r3, r2
 800b712:	813b      	strh	r3, [r7, #8]

  /* Check the status of the specified SPI interrupt */
  if (((SPIx->SR & itpos) != (uint16_t)RESET) && enablestatus)
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	891b      	ldrh	r3, [r3, #8]
 800b718:	b29a      	uxth	r2, r3
 800b71a:	89bb      	ldrh	r3, [r7, #12]
 800b71c:	4013      	ands	r3, r2
 800b71e:	b29b      	uxth	r3, r3
 800b720:	2b00      	cmp	r3, #0
 800b722:	d005      	beq.n	800b730 <SPI_I2S_GetITStatus+0x64>
 800b724:	893b      	ldrh	r3, [r7, #8]
 800b726:	2b00      	cmp	r3, #0
 800b728:	d002      	beq.n	800b730 <SPI_I2S_GetITStatus+0x64>
  {
    /* SPI_I2S_IT is set */
    bitstatus = SET;
 800b72a:	2301      	movs	r3, #1
 800b72c:	73fb      	strb	r3, [r7, #15]
 800b72e:	e001      	b.n	800b734 <SPI_I2S_GetITStatus+0x68>
  }
  else
  {
    /* SPI_I2S_IT is reset */
    bitstatus = RESET;
 800b730:	2300      	movs	r3, #0
 800b732:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_IT status */
  return bitstatus;
 800b734:	7bfb      	ldrb	r3, [r7, #15]
}
 800b736:	4618      	mov	r0, r3
 800b738:	3714      	adds	r7, #20
 800b73a:	46bd      	mov	sp, r7
 800b73c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b740:	4770      	bx	lr

0800b742 <SPI_I2S_ClearITPendingBit>:
  *          followed by a write operation to SPI_CR1 register (SPI_Cmd() to enable 
  *          the SPI).
  * @retval None
  */
void SPI_I2S_ClearITPendingBit(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT)
{
 800b742:	b480      	push	{r7}
 800b744:	b085      	sub	sp, #20
 800b746:	af00      	add	r7, sp, #0
 800b748:	6078      	str	r0, [r7, #4]
 800b74a:	460b      	mov	r3, r1
 800b74c:	70fb      	strb	r3, [r7, #3]
  uint16_t itpos = 0;
 800b74e:	2300      	movs	r3, #0
 800b750:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_CLEAR_IT(SPI_I2S_IT));

  /* Get the SPI_I2S IT index */
  itpos = 0x01 << (SPI_I2S_IT & 0x0F);
 800b752:	78fb      	ldrb	r3, [r7, #3]
 800b754:	f003 030f 	and.w	r3, r3, #15
 800b758:	2201      	movs	r2, #1
 800b75a:	fa02 f303 	lsl.w	r3, r2, r3
 800b75e:	81fb      	strh	r3, [r7, #14]

  /* Clear the selected SPI CRC Error (CRCERR) interrupt pending bit */
  SPIx->SR = (uint16_t)~itpos;
 800b760:	89fb      	ldrh	r3, [r7, #14]
 800b762:	43db      	mvns	r3, r3
 800b764:	b29a      	uxth	r2, r3
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	811a      	strh	r2, [r3, #8]
}
 800b76a:	bf00      	nop
 800b76c:	3714      	adds	r7, #20
 800b76e:	46bd      	mov	sp, r7
 800b770:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b774:	4770      	bx	lr
 800b776:	bf00      	nop

0800b778 <SYSCFG_DeInit>:
  *   registers to their default reset values.
  * @param  None
  * @retval None
  */
void SYSCFG_DeInit(void)
{
 800b778:	b580      	push	{r7, lr}
 800b77a:	af00      	add	r7, sp, #0
   RCC_APB2PeriphResetCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 800b77c:	2101      	movs	r1, #1
 800b77e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800b782:	f7fd f9ed 	bl	8008b60 <RCC_APB2PeriphResetCmd>
   RCC_APB2PeriphResetCmd(RCC_APB2Periph_SYSCFG, DISABLE);
 800b786:	2100      	movs	r1, #0
 800b788:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800b78c:	f7fd f9e8 	bl	8008b60 <RCC_APB2PeriphResetCmd>
}
 800b790:	bf00      	nop
 800b792:	bd80      	pop	{r7, pc}

0800b794 <SYSCFG_MemoryRemapConfig>:
  *            @arg SYSCFG_MemoryRemap_SRAM:        Embedded SRAM (112kB) mapped at 0x00000000
  *            @arg SYSCFG_MemoryRemap_SDRAM:       FMC (External SDRAM)  mapped at 0x00000000 for STM32F42xxx/43xxx devices.            
  * @retval None
  */
void SYSCFG_MemoryRemapConfig(uint8_t SYSCFG_MemoryRemap)
{
 800b794:	b480      	push	{r7}
 800b796:	b083      	sub	sp, #12
 800b798:	af00      	add	r7, sp, #0
 800b79a:	4603      	mov	r3, r0
 800b79c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_SYSCFG_MEMORY_REMAP_CONFING(SYSCFG_MemoryRemap));

  SYSCFG->MEMRMP = SYSCFG_MemoryRemap;
 800b79e:	4a04      	ldr	r2, [pc, #16]	; (800b7b0 <SYSCFG_MemoryRemapConfig+0x1c>)
 800b7a0:	79fb      	ldrb	r3, [r7, #7]
 800b7a2:	6013      	str	r3, [r2, #0]
}
 800b7a4:	bf00      	nop
 800b7a6:	370c      	adds	r7, #12
 800b7a8:	46bd      	mov	sp, r7
 800b7aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ae:	4770      	bx	lr
 800b7b0:	40013800 	.word	0x40013800

0800b7b4 <SYSCFG_MemorySwappingBank>:
  *            @arg DISABLE:(the default state) Flash Bank1 mapped at 0x08000000 (and aliased @0x0000 0000) 
                            and Flash Bank2 mapped at 0x08100000 (and aliased at 0x00100000)  
  * @retval None
  */
void SYSCFG_MemorySwappingBank(FunctionalState NewState)
{
 800b7b4:	b480      	push	{r7}
 800b7b6:	b083      	sub	sp, #12
 800b7b8:	af00      	add	r7, sp, #0
 800b7ba:	4603      	mov	r3, r0
 800b7bc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) UFB_MODE_BB = (uint32_t)NewState;
 800b7be:	4a04      	ldr	r2, [pc, #16]	; (800b7d0 <SYSCFG_MemorySwappingBank+0x1c>)
 800b7c0:	79fb      	ldrb	r3, [r7, #7]
 800b7c2:	6013      	str	r3, [r2, #0]
}
 800b7c4:	bf00      	nop
 800b7c6:	370c      	adds	r7, #12
 800b7c8:	46bd      	mov	sp, r7
 800b7ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ce:	4770      	bx	lr
 800b7d0:	42270020 	.word	0x42270020

0800b7d4 <SYSCFG_EXTILineConfig>:
  *           be (0..7) for STM32F42xxx/43xxx devices. 
  *             
  * @retval None
  */
void SYSCFG_EXTILineConfig(uint8_t EXTI_PortSourceGPIOx, uint8_t EXTI_PinSourcex)
{
 800b7d4:	b480      	push	{r7}
 800b7d6:	b085      	sub	sp, #20
 800b7d8:	af00      	add	r7, sp, #0
 800b7da:	4603      	mov	r3, r0
 800b7dc:	460a      	mov	r2, r1
 800b7de:	71fb      	strb	r3, [r7, #7]
 800b7e0:	4613      	mov	r3, r2
 800b7e2:	71bb      	strb	r3, [r7, #6]
  uint32_t tmp = 0x00;
 800b7e4:	2300      	movs	r3, #0
 800b7e6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_EXTI_PORT_SOURCE(EXTI_PortSourceGPIOx));
  assert_param(IS_EXTI_PIN_SOURCE(EXTI_PinSourcex));

  tmp = ((uint32_t)0x0F) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03));
 800b7e8:	79bb      	ldrb	r3, [r7, #6]
 800b7ea:	f003 0303 	and.w	r3, r3, #3
 800b7ee:	009b      	lsls	r3, r3, #2
 800b7f0:	220f      	movs	r2, #15
 800b7f2:	fa02 f303 	lsl.w	r3, r2, r3
 800b7f6:	60fb      	str	r3, [r7, #12]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] &= ~tmp;
 800b7f8:	4a16      	ldr	r2, [pc, #88]	; (800b854 <SYSCFG_EXTILineConfig+0x80>)
 800b7fa:	79bb      	ldrb	r3, [r7, #6]
 800b7fc:	089b      	lsrs	r3, r3, #2
 800b7fe:	b2db      	uxtb	r3, r3
 800b800:	3302      	adds	r3, #2
 800b802:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800b806:	68fb      	ldr	r3, [r7, #12]
 800b808:	43db      	mvns	r3, r3
 800b80a:	4812      	ldr	r0, [pc, #72]	; (800b854 <SYSCFG_EXTILineConfig+0x80>)
 800b80c:	79b9      	ldrb	r1, [r7, #6]
 800b80e:	0889      	lsrs	r1, r1, #2
 800b810:	b2c9      	uxtb	r1, r1
 800b812:	401a      	ands	r2, r3
 800b814:	1c8b      	adds	r3, r1, #2
 800b816:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] |= (((uint32_t)EXTI_PortSourceGPIOx) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03)));
 800b81a:	4a0e      	ldr	r2, [pc, #56]	; (800b854 <SYSCFG_EXTILineConfig+0x80>)
 800b81c:	79bb      	ldrb	r3, [r7, #6]
 800b81e:	089b      	lsrs	r3, r3, #2
 800b820:	b2db      	uxtb	r3, r3
 800b822:	3302      	adds	r3, #2
 800b824:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800b828:	79f9      	ldrb	r1, [r7, #7]
 800b82a:	79bb      	ldrb	r3, [r7, #6]
 800b82c:	f003 0303 	and.w	r3, r3, #3
 800b830:	009b      	lsls	r3, r3, #2
 800b832:	fa01 f303 	lsl.w	r3, r1, r3
 800b836:	4807      	ldr	r0, [pc, #28]	; (800b854 <SYSCFG_EXTILineConfig+0x80>)
 800b838:	79b9      	ldrb	r1, [r7, #6]
 800b83a:	0889      	lsrs	r1, r1, #2
 800b83c:	b2c9      	uxtb	r1, r1
 800b83e:	431a      	orrs	r2, r3
 800b840:	1c8b      	adds	r3, r1, #2
 800b842:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 800b846:	bf00      	nop
 800b848:	3714      	adds	r7, #20
 800b84a:	46bd      	mov	sp, r7
 800b84c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b850:	4770      	bx	lr
 800b852:	bf00      	nop
 800b854:	40013800 	.word	0x40013800

0800b858 <SYSCFG_ETH_MediaInterfaceConfig>:
  *            @arg SYSCFG_ETH_MediaInterface_MII: MII mode selected
  *            @arg SYSCFG_ETH_MediaInterface_RMII: RMII mode selected 
  * @retval None 
  */
void SYSCFG_ETH_MediaInterfaceConfig(uint32_t SYSCFG_ETH_MediaInterface) 
{ 
 800b858:	b480      	push	{r7}
 800b85a:	b083      	sub	sp, #12
 800b85c:	af00      	add	r7, sp, #0
 800b85e:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_ETH_MEDIA_INTERFACE(SYSCFG_ETH_MediaInterface)); 
  /* Configure MII_RMII selection bit */ 
  *(__IO uint32_t *) PMC_MII_RMII_SEL_BB = SYSCFG_ETH_MediaInterface; 
 800b860:	4a04      	ldr	r2, [pc, #16]	; (800b874 <SYSCFG_ETH_MediaInterfaceConfig+0x1c>)
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	6013      	str	r3, [r2, #0]
}
 800b866:	bf00      	nop
 800b868:	370c      	adds	r7, #12
 800b86a:	46bd      	mov	sp, r7
 800b86c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b870:	4770      	bx	lr
 800b872:	bf00      	nop
 800b874:	422700dc 	.word	0x422700dc

0800b878 <SYSCFG_CompensationCellCmd>:
  *            @arg ENABLE: I/O compensation cell enabled  
  *            @arg DISABLE: I/O compensation cell power-down mode  
  * @retval None
  */
void SYSCFG_CompensationCellCmd(FunctionalState NewState)
{
 800b878:	b480      	push	{r7}
 800b87a:	b083      	sub	sp, #12
 800b87c:	af00      	add	r7, sp, #0
 800b87e:	4603      	mov	r3, r0
 800b880:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CMPCR_CMP_PD_BB = (uint32_t)NewState;
 800b882:	4a04      	ldr	r2, [pc, #16]	; (800b894 <SYSCFG_CompensationCellCmd+0x1c>)
 800b884:	79fb      	ldrb	r3, [r7, #7]
 800b886:	6013      	str	r3, [r2, #0]
}
 800b888:	bf00      	nop
 800b88a:	370c      	adds	r7, #12
 800b88c:	46bd      	mov	sp, r7
 800b88e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b892:	4770      	bx	lr
 800b894:	42270400 	.word	0x42270400

0800b898 <SYSCFG_GetCompensationCellStatus>:
  * @brief  Checks whether the I/O Compensation Cell ready flag is set or not.
  * @param  None
  * @retval The new state of the I/O Compensation Cell ready flag (SET or RESET)
  */
FlagStatus SYSCFG_GetCompensationCellStatus(void)
{
 800b898:	b480      	push	{r7}
 800b89a:	b083      	sub	sp, #12
 800b89c:	af00      	add	r7, sp, #0
  FlagStatus bitstatus = RESET;
 800b89e:	2300      	movs	r3, #0
 800b8a0:	71fb      	strb	r3, [r7, #7]
    
  if ((SYSCFG->CMPCR & SYSCFG_CMPCR_READY ) != (uint32_t)RESET)
 800b8a2:	4b09      	ldr	r3, [pc, #36]	; (800b8c8 <SYSCFG_GetCompensationCellStatus+0x30>)
 800b8a4:	6a1b      	ldr	r3, [r3, #32]
 800b8a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	d002      	beq.n	800b8b4 <SYSCFG_GetCompensationCellStatus+0x1c>
  {
    bitstatus = SET;
 800b8ae:	2301      	movs	r3, #1
 800b8b0:	71fb      	strb	r3, [r7, #7]
 800b8b2:	e001      	b.n	800b8b8 <SYSCFG_GetCompensationCellStatus+0x20>
  }
  else
  {
    bitstatus = RESET;
 800b8b4:	2300      	movs	r3, #0
 800b8b6:	71fb      	strb	r3, [r7, #7]
  }
  return bitstatus;
 800b8b8:	79fb      	ldrb	r3, [r7, #7]
}
 800b8ba:	4618      	mov	r0, r3
 800b8bc:	370c      	adds	r7, #12
 800b8be:	46bd      	mov	sp, r7
 800b8c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8c4:	4770      	bx	lr
 800b8c6:	bf00      	nop
 800b8c8:	40013800 	.word	0x40013800

0800b8cc <TIM_DeInit>:
  * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
  * @retval None

  */
void TIM_DeInit(TIM_TypeDef* TIMx)
{
 800b8cc:	b580      	push	{r7, lr}
 800b8ce:	b082      	sub	sp, #8
 800b8d0:	af00      	add	r7, sp, #0
 800b8d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
 
  if (TIMx == TIM1)
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	4a60      	ldr	r2, [pc, #384]	; (800ba58 <TIM_DeInit+0x18c>)
 800b8d8:	4293      	cmp	r3, r2
 800b8da:	d108      	bne.n	800b8ee <TIM_DeInit+0x22>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, ENABLE);
 800b8dc:	2101      	movs	r1, #1
 800b8de:	2001      	movs	r0, #1
 800b8e0:	f7fd f93e 	bl	8008b60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, DISABLE);  
 800b8e4:	2100      	movs	r1, #0
 800b8e6:	2001      	movs	r0, #1
 800b8e8:	f7fd f93a 	bl	8008b60 <RCC_APB2PeriphResetCmd>
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 800b8ec:	e0af      	b.n	800ba4e <TIM_DeInit+0x182>
  else if (TIMx == TIM2) 
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b8f4:	d108      	bne.n	800b908 <TIM_DeInit+0x3c>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, ENABLE);
 800b8f6:	2101      	movs	r1, #1
 800b8f8:	2001      	movs	r0, #1
 800b8fa:	f7fd f911 	bl	8008b20 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, DISABLE);
 800b8fe:	2100      	movs	r1, #0
 800b900:	2001      	movs	r0, #1
 800b902:	f7fd f90d 	bl	8008b20 <RCC_APB1PeriphResetCmd>
}
 800b906:	e0a2      	b.n	800ba4e <TIM_DeInit+0x182>
  else if (TIMx == TIM3)
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	4a54      	ldr	r2, [pc, #336]	; (800ba5c <TIM_DeInit+0x190>)
 800b90c:	4293      	cmp	r3, r2
 800b90e:	d108      	bne.n	800b922 <TIM_DeInit+0x56>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, ENABLE);
 800b910:	2101      	movs	r1, #1
 800b912:	2002      	movs	r0, #2
 800b914:	f7fd f904 	bl	8008b20 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, DISABLE);
 800b918:	2100      	movs	r1, #0
 800b91a:	2002      	movs	r0, #2
 800b91c:	f7fd f900 	bl	8008b20 <RCC_APB1PeriphResetCmd>
}
 800b920:	e095      	b.n	800ba4e <TIM_DeInit+0x182>
  else if (TIMx == TIM4)
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	4a4e      	ldr	r2, [pc, #312]	; (800ba60 <TIM_DeInit+0x194>)
 800b926:	4293      	cmp	r3, r2
 800b928:	d108      	bne.n	800b93c <TIM_DeInit+0x70>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, ENABLE);
 800b92a:	2101      	movs	r1, #1
 800b92c:	2004      	movs	r0, #4
 800b92e:	f7fd f8f7 	bl	8008b20 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, DISABLE);
 800b932:	2100      	movs	r1, #0
 800b934:	2004      	movs	r0, #4
 800b936:	f7fd f8f3 	bl	8008b20 <RCC_APB1PeriphResetCmd>
}
 800b93a:	e088      	b.n	800ba4e <TIM_DeInit+0x182>
  else if (TIMx == TIM5)
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	4a49      	ldr	r2, [pc, #292]	; (800ba64 <TIM_DeInit+0x198>)
 800b940:	4293      	cmp	r3, r2
 800b942:	d108      	bne.n	800b956 <TIM_DeInit+0x8a>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, ENABLE);
 800b944:	2101      	movs	r1, #1
 800b946:	2008      	movs	r0, #8
 800b948:	f7fd f8ea 	bl	8008b20 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, DISABLE);
 800b94c:	2100      	movs	r1, #0
 800b94e:	2008      	movs	r0, #8
 800b950:	f7fd f8e6 	bl	8008b20 <RCC_APB1PeriphResetCmd>
}
 800b954:	e07b      	b.n	800ba4e <TIM_DeInit+0x182>
  else if (TIMx == TIM6)  
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	4a43      	ldr	r2, [pc, #268]	; (800ba68 <TIM_DeInit+0x19c>)
 800b95a:	4293      	cmp	r3, r2
 800b95c:	d108      	bne.n	800b970 <TIM_DeInit+0xa4>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, ENABLE);
 800b95e:	2101      	movs	r1, #1
 800b960:	2010      	movs	r0, #16
 800b962:	f7fd f8dd 	bl	8008b20 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, DISABLE);
 800b966:	2100      	movs	r1, #0
 800b968:	2010      	movs	r0, #16
 800b96a:	f7fd f8d9 	bl	8008b20 <RCC_APB1PeriphResetCmd>
}
 800b96e:	e06e      	b.n	800ba4e <TIM_DeInit+0x182>
  else if (TIMx == TIM7)
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	4a3e      	ldr	r2, [pc, #248]	; (800ba6c <TIM_DeInit+0x1a0>)
 800b974:	4293      	cmp	r3, r2
 800b976:	d108      	bne.n	800b98a <TIM_DeInit+0xbe>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, ENABLE);
 800b978:	2101      	movs	r1, #1
 800b97a:	2020      	movs	r0, #32
 800b97c:	f7fd f8d0 	bl	8008b20 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, DISABLE);
 800b980:	2100      	movs	r1, #0
 800b982:	2020      	movs	r0, #32
 800b984:	f7fd f8cc 	bl	8008b20 <RCC_APB1PeriphResetCmd>
}
 800b988:	e061      	b.n	800ba4e <TIM_DeInit+0x182>
  else if (TIMx == TIM8)
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	4a38      	ldr	r2, [pc, #224]	; (800ba70 <TIM_DeInit+0x1a4>)
 800b98e:	4293      	cmp	r3, r2
 800b990:	d108      	bne.n	800b9a4 <TIM_DeInit+0xd8>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, ENABLE);
 800b992:	2101      	movs	r1, #1
 800b994:	2002      	movs	r0, #2
 800b996:	f7fd f8e3 	bl	8008b60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, DISABLE);  
 800b99a:	2100      	movs	r1, #0
 800b99c:	2002      	movs	r0, #2
 800b99e:	f7fd f8df 	bl	8008b60 <RCC_APB2PeriphResetCmd>
}
 800b9a2:	e054      	b.n	800ba4e <TIM_DeInit+0x182>
  else if (TIMx == TIM9)
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	4a33      	ldr	r2, [pc, #204]	; (800ba74 <TIM_DeInit+0x1a8>)
 800b9a8:	4293      	cmp	r3, r2
 800b9aa:	d10a      	bne.n	800b9c2 <TIM_DeInit+0xf6>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, ENABLE);
 800b9ac:	2101      	movs	r1, #1
 800b9ae:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800b9b2:	f7fd f8d5 	bl	8008b60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, DISABLE);  
 800b9b6:	2100      	movs	r1, #0
 800b9b8:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800b9bc:	f7fd f8d0 	bl	8008b60 <RCC_APB2PeriphResetCmd>
}
 800b9c0:	e045      	b.n	800ba4e <TIM_DeInit+0x182>
  else if (TIMx == TIM10)
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	4a2c      	ldr	r2, [pc, #176]	; (800ba78 <TIM_DeInit+0x1ac>)
 800b9c6:	4293      	cmp	r3, r2
 800b9c8:	d10a      	bne.n	800b9e0 <TIM_DeInit+0x114>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, ENABLE);
 800b9ca:	2101      	movs	r1, #1
 800b9cc:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800b9d0:	f7fd f8c6 	bl	8008b60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, DISABLE);  
 800b9d4:	2100      	movs	r1, #0
 800b9d6:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800b9da:	f7fd f8c1 	bl	8008b60 <RCC_APB2PeriphResetCmd>
}
 800b9de:	e036      	b.n	800ba4e <TIM_DeInit+0x182>
  else if (TIMx == TIM11) 
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	4a26      	ldr	r2, [pc, #152]	; (800ba7c <TIM_DeInit+0x1b0>)
 800b9e4:	4293      	cmp	r3, r2
 800b9e6:	d10a      	bne.n	800b9fe <TIM_DeInit+0x132>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, ENABLE);
 800b9e8:	2101      	movs	r1, #1
 800b9ea:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800b9ee:	f7fd f8b7 	bl	8008b60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, DISABLE);  
 800b9f2:	2100      	movs	r1, #0
 800b9f4:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800b9f8:	f7fd f8b2 	bl	8008b60 <RCC_APB2PeriphResetCmd>
}
 800b9fc:	e027      	b.n	800ba4e <TIM_DeInit+0x182>
  else if (TIMx == TIM12)
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	4a1f      	ldr	r2, [pc, #124]	; (800ba80 <TIM_DeInit+0x1b4>)
 800ba02:	4293      	cmp	r3, r2
 800ba04:	d108      	bne.n	800ba18 <TIM_DeInit+0x14c>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, ENABLE);
 800ba06:	2101      	movs	r1, #1
 800ba08:	2040      	movs	r0, #64	; 0x40
 800ba0a:	f7fd f889 	bl	8008b20 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, DISABLE);  
 800ba0e:	2100      	movs	r1, #0
 800ba10:	2040      	movs	r0, #64	; 0x40
 800ba12:	f7fd f885 	bl	8008b20 <RCC_APB1PeriphResetCmd>
}
 800ba16:	e01a      	b.n	800ba4e <TIM_DeInit+0x182>
  else if (TIMx == TIM13) 
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	4a1a      	ldr	r2, [pc, #104]	; (800ba84 <TIM_DeInit+0x1b8>)
 800ba1c:	4293      	cmp	r3, r2
 800ba1e:	d108      	bne.n	800ba32 <TIM_DeInit+0x166>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, ENABLE);
 800ba20:	2101      	movs	r1, #1
 800ba22:	2080      	movs	r0, #128	; 0x80
 800ba24:	f7fd f87c 	bl	8008b20 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, DISABLE);  
 800ba28:	2100      	movs	r1, #0
 800ba2a:	2080      	movs	r0, #128	; 0x80
 800ba2c:	f7fd f878 	bl	8008b20 <RCC_APB1PeriphResetCmd>
}
 800ba30:	e00d      	b.n	800ba4e <TIM_DeInit+0x182>
    if (TIMx == TIM14) 
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	4a14      	ldr	r2, [pc, #80]	; (800ba88 <TIM_DeInit+0x1bc>)
 800ba36:	4293      	cmp	r3, r2
 800ba38:	d109      	bne.n	800ba4e <TIM_DeInit+0x182>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
 800ba3a:	2101      	movs	r1, #1
 800ba3c:	f44f 7080 	mov.w	r0, #256	; 0x100
 800ba40:	f7fd f86e 	bl	8008b20 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
 800ba44:	2100      	movs	r1, #0
 800ba46:	f44f 7080 	mov.w	r0, #256	; 0x100
 800ba4a:	f7fd f869 	bl	8008b20 <RCC_APB1PeriphResetCmd>
}
 800ba4e:	bf00      	nop
 800ba50:	3708      	adds	r7, #8
 800ba52:	46bd      	mov	sp, r7
 800ba54:	bd80      	pop	{r7, pc}
 800ba56:	bf00      	nop
 800ba58:	40010000 	.word	0x40010000
 800ba5c:	40000400 	.word	0x40000400
 800ba60:	40000800 	.word	0x40000800
 800ba64:	40000c00 	.word	0x40000c00
 800ba68:	40001000 	.word	0x40001000
 800ba6c:	40001400 	.word	0x40001400
 800ba70:	40010400 	.word	0x40010400
 800ba74:	40014000 	.word	0x40014000
 800ba78:	40014400 	.word	0x40014400
 800ba7c:	40014800 	.word	0x40014800
 800ba80:	40001800 	.word	0x40001800
 800ba84:	40001c00 	.word	0x40001c00
 800ba88:	40002000 	.word	0x40002000

0800ba8c <TIM_TimeBaseInit>:
  * @param  TIM_TimeBaseInitStruct: pointer to a TIM_TimeBaseInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 800ba8c:	b480      	push	{r7}
 800ba8e:	b085      	sub	sp, #20
 800ba90:	af00      	add	r7, sp, #0
 800ba92:	6078      	str	r0, [r7, #4]
 800ba94:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
 800ba96:	2300      	movs	r3, #0
 800ba98:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	881b      	ldrh	r3, [r3, #0]
 800ba9e:	81fb      	strh	r3, [r7, #14]

  if((TIMx == TIM1) || (TIMx == TIM8)||
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	4a29      	ldr	r2, [pc, #164]	; (800bb48 <TIM_TimeBaseInit+0xbc>)
 800baa4:	4293      	cmp	r3, r2
 800baa6:	d013      	beq.n	800bad0 <TIM_TimeBaseInit+0x44>
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	4a28      	ldr	r2, [pc, #160]	; (800bb4c <TIM_TimeBaseInit+0xc0>)
 800baac:	4293      	cmp	r3, r2
 800baae:	d00f      	beq.n	800bad0 <TIM_TimeBaseInit+0x44>
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bab6:	d00b      	beq.n	800bad0 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM2) || (TIMx == TIM3)||
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	4a25      	ldr	r2, [pc, #148]	; (800bb50 <TIM_TimeBaseInit+0xc4>)
 800babc:	4293      	cmp	r3, r2
 800babe:	d007      	beq.n	800bad0 <TIM_TimeBaseInit+0x44>
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	4a24      	ldr	r2, [pc, #144]	; (800bb54 <TIM_TimeBaseInit+0xc8>)
 800bac4:	4293      	cmp	r3, r2
 800bac6:	d003      	beq.n	800bad0 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	4a23      	ldr	r2, [pc, #140]	; (800bb58 <TIM_TimeBaseInit+0xcc>)
 800bacc:	4293      	cmp	r3, r2
 800bace:	d108      	bne.n	800bae2 <TIM_TimeBaseInit+0x56>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
 800bad0:	89fb      	ldrh	r3, [r7, #14]
 800bad2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bad6:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 800bad8:	683b      	ldr	r3, [r7, #0]
 800bada:	885a      	ldrh	r2, [r3, #2]
 800badc:	89fb      	ldrh	r3, [r7, #14]
 800bade:	4313      	orrs	r3, r2
 800bae0:	81fb      	strh	r3, [r7, #14]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	4a1d      	ldr	r2, [pc, #116]	; (800bb5c <TIM_TimeBaseInit+0xd0>)
 800bae6:	4293      	cmp	r3, r2
 800bae8:	d00c      	beq.n	800bb04 <TIM_TimeBaseInit+0x78>
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	4a1c      	ldr	r2, [pc, #112]	; (800bb60 <TIM_TimeBaseInit+0xd4>)
 800baee:	4293      	cmp	r3, r2
 800baf0:	d008      	beq.n	800bb04 <TIM_TimeBaseInit+0x78>
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 800baf2:	89fb      	ldrh	r3, [r7, #14]
 800baf4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800baf8:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 800bafa:	683b      	ldr	r3, [r7, #0]
 800bafc:	891a      	ldrh	r2, [r3, #8]
 800bafe:	89fb      	ldrh	r3, [r7, #14]
 800bb00:	4313      	orrs	r3, r2
 800bb02:	81fb      	strh	r3, [r7, #14]
  }

  TIMx->CR1 = tmpcr1;
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	89fa      	ldrh	r2, [r7, #14]
 800bb08:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 800bb0a:	683b      	ldr	r3, [r7, #0]
 800bb0c:	685a      	ldr	r2, [r3, #4]
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 800bb12:	683b      	ldr	r3, [r7, #0]
 800bb14:	881a      	ldrh	r2, [r3, #0]
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	851a      	strh	r2, [r3, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8))  
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	4a0a      	ldr	r2, [pc, #40]	; (800bb48 <TIM_TimeBaseInit+0xbc>)
 800bb1e:	4293      	cmp	r3, r2
 800bb20:	d003      	beq.n	800bb2a <TIM_TimeBaseInit+0x9e>
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	4a09      	ldr	r2, [pc, #36]	; (800bb4c <TIM_TimeBaseInit+0xc0>)
 800bb26:	4293      	cmp	r3, r2
 800bb28:	d104      	bne.n	800bb34 <TIM_TimeBaseInit+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 800bb2a:	683b      	ldr	r3, [r7, #0]
 800bb2c:	7a9b      	ldrb	r3, [r3, #10]
 800bb2e:	b29a      	uxth	r2, r3
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	2201      	movs	r2, #1
 800bb38:	829a      	strh	r2, [r3, #20]
}
 800bb3a:	bf00      	nop
 800bb3c:	3714      	adds	r7, #20
 800bb3e:	46bd      	mov	sp, r7
 800bb40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb44:	4770      	bx	lr
 800bb46:	bf00      	nop
 800bb48:	40010000 	.word	0x40010000
 800bb4c:	40010400 	.word	0x40010400
 800bb50:	40000400 	.word	0x40000400
 800bb54:	40000800 	.word	0x40000800
 800bb58:	40000c00 	.word	0x40000c00
 800bb5c:	40001000 	.word	0x40001000
 800bb60:	40001400 	.word	0x40001400

0800bb64 <TIM_TimeBaseStructInit>:
  * @param  TIM_TimeBaseInitStruct : pointer to a TIM_TimeBaseInitTypeDef
  *         structure which will be initialized.
  * @retval None
  */
void TIM_TimeBaseStructInit(TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 800bb64:	b480      	push	{r7}
 800bb66:	b083      	sub	sp, #12
 800bb68:	af00      	add	r7, sp, #0
 800bb6a:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_TimeBaseInitStruct->TIM_Period = 0xFFFFFFFF;
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bb72:	605a      	str	r2, [r3, #4]
  TIM_TimeBaseInitStruct->TIM_Prescaler = 0x0000;
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	2200      	movs	r2, #0
 800bb78:	801a      	strh	r2, [r3, #0]
  TIM_TimeBaseInitStruct->TIM_ClockDivision = TIM_CKD_DIV1;
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	2200      	movs	r2, #0
 800bb7e:	811a      	strh	r2, [r3, #8]
  TIM_TimeBaseInitStruct->TIM_CounterMode = TIM_CounterMode_Up;
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	2200      	movs	r2, #0
 800bb84:	805a      	strh	r2, [r3, #2]
  TIM_TimeBaseInitStruct->TIM_RepetitionCounter = 0x0000;
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	2200      	movs	r2, #0
 800bb8a:	729a      	strb	r2, [r3, #10]
}
 800bb8c:	bf00      	nop
 800bb8e:	370c      	adds	r7, #12
 800bb90:	46bd      	mov	sp, r7
 800bb92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb96:	4770      	bx	lr

0800bb98 <TIM_PrescalerConfig>:
  *            @arg TIM_PSCReloadMode_Update: The Prescaler is loaded at the update event.
  *            @arg TIM_PSCReloadMode_Immediate: The Prescaler is loaded immediatly.
  * @retval None
  */
void TIM_PrescalerConfig(TIM_TypeDef* TIMx, uint16_t Prescaler, uint16_t TIM_PSCReloadMode)
{
 800bb98:	b480      	push	{r7}
 800bb9a:	b083      	sub	sp, #12
 800bb9c:	af00      	add	r7, sp, #0
 800bb9e:	6078      	str	r0, [r7, #4]
 800bba0:	460b      	mov	r3, r1
 800bba2:	807b      	strh	r3, [r7, #2]
 800bba4:	4613      	mov	r3, r2
 800bba6:	803b      	strh	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_PRESCALER_RELOAD(TIM_PSCReloadMode));
  /* Set the Prescaler value */
  TIMx->PSC = Prescaler;
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	887a      	ldrh	r2, [r7, #2]
 800bbac:	851a      	strh	r2, [r3, #40]	; 0x28
  /* Set or reset the UG Bit */
  TIMx->EGR = TIM_PSCReloadMode;
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	883a      	ldrh	r2, [r7, #0]
 800bbb2:	829a      	strh	r2, [r3, #20]
}
 800bbb4:	bf00      	nop
 800bbb6:	370c      	adds	r7, #12
 800bbb8:	46bd      	mov	sp, r7
 800bbba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbbe:	4770      	bx	lr

0800bbc0 <TIM_CounterModeConfig>:
  *            @arg TIM_CounterMode_CenterAligned2: TIM Center Aligned Mode2
  *            @arg TIM_CounterMode_CenterAligned3: TIM Center Aligned Mode3
  * @retval None
  */
void TIM_CounterModeConfig(TIM_TypeDef* TIMx, uint16_t TIM_CounterMode)
{
 800bbc0:	b480      	push	{r7}
 800bbc2:	b085      	sub	sp, #20
 800bbc4:	af00      	add	r7, sp, #0
 800bbc6:	6078      	str	r0, [r7, #4]
 800bbc8:	460b      	mov	r3, r1
 800bbca:	807b      	strh	r3, [r7, #2]
  uint16_t tmpcr1 = 0;
 800bbcc:	2300      	movs	r3, #0
 800bbce:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_COUNTER_MODE(TIM_CounterMode));

  tmpcr1 = TIMx->CR1;
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	881b      	ldrh	r3, [r3, #0]
 800bbd4:	81fb      	strh	r3, [r7, #14]

  /* Reset the CMS and DIR Bits */
  tmpcr1 &= (uint16_t)~(TIM_CR1_DIR | TIM_CR1_CMS);
 800bbd6:	89fb      	ldrh	r3, [r7, #14]
 800bbd8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bbdc:	81fb      	strh	r3, [r7, #14]

  /* Set the Counter Mode */
  tmpcr1 |= TIM_CounterMode;
 800bbde:	89fa      	ldrh	r2, [r7, #14]
 800bbe0:	887b      	ldrh	r3, [r7, #2]
 800bbe2:	4313      	orrs	r3, r2
 800bbe4:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CR1 register */
  TIMx->CR1 = tmpcr1;
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	89fa      	ldrh	r2, [r7, #14]
 800bbea:	801a      	strh	r2, [r3, #0]
}
 800bbec:	bf00      	nop
 800bbee:	3714      	adds	r7, #20
 800bbf0:	46bd      	mov	sp, r7
 800bbf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbf6:	4770      	bx	lr

0800bbf8 <TIM_SetCounter>:
  * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
  * @param  Counter: specifies the Counter register new value.
  * @retval None
  */
void TIM_SetCounter(TIM_TypeDef* TIMx, uint32_t Counter)
{
 800bbf8:	b480      	push	{r7}
 800bbfa:	b083      	sub	sp, #12
 800bbfc:	af00      	add	r7, sp, #0
 800bbfe:	6078      	str	r0, [r7, #4]
 800bc00:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
   assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Set the Counter Register value */
  TIMx->CNT = Counter;
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	683a      	ldr	r2, [r7, #0]
 800bc06:	625a      	str	r2, [r3, #36]	; 0x24
}
 800bc08:	bf00      	nop
 800bc0a:	370c      	adds	r7, #12
 800bc0c:	46bd      	mov	sp, r7
 800bc0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc12:	4770      	bx	lr

0800bc14 <TIM_SetAutoreload>:
  * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
  * @param  Autoreload: specifies the Autoreload register new value.
  * @retval None
  */
void TIM_SetAutoreload(TIM_TypeDef* TIMx, uint32_t Autoreload)
{
 800bc14:	b480      	push	{r7}
 800bc16:	b083      	sub	sp, #12
 800bc18:	af00      	add	r7, sp, #0
 800bc1a:	6078      	str	r0, [r7, #4]
 800bc1c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  
  /* Set the Autoreload Register value */
  TIMx->ARR = Autoreload;
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	683a      	ldr	r2, [r7, #0]
 800bc22:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800bc24:	bf00      	nop
 800bc26:	370c      	adds	r7, #12
 800bc28:	46bd      	mov	sp, r7
 800bc2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc2e:	4770      	bx	lr

0800bc30 <TIM_GetCounter>:
  * @brief  Gets the TIMx Counter value.
  * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
  * @retval Counter Register value
  */
uint32_t TIM_GetCounter(TIM_TypeDef* TIMx)
{
 800bc30:	b480      	push	{r7}
 800bc32:	b083      	sub	sp, #12
 800bc34:	af00      	add	r7, sp, #0
 800bc36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Get the Counter Register value */
  return TIMx->CNT;
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 800bc3c:	4618      	mov	r0, r3
 800bc3e:	370c      	adds	r7, #12
 800bc40:	46bd      	mov	sp, r7
 800bc42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc46:	4770      	bx	lr

0800bc48 <TIM_GetPrescaler>:
  * @brief  Gets the TIMx Prescaler value.
  * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
  * @retval Prescaler Register value.
  */
uint16_t TIM_GetPrescaler(TIM_TypeDef* TIMx)
{
 800bc48:	b480      	push	{r7}
 800bc4a:	b083      	sub	sp, #12
 800bc4c:	af00      	add	r7, sp, #0
 800bc4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Get the Prescaler Register value */
  return TIMx->PSC;
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bc54:	b29b      	uxth	r3, r3
}
 800bc56:	4618      	mov	r0, r3
 800bc58:	370c      	adds	r7, #12
 800bc5a:	46bd      	mov	sp, r7
 800bc5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc60:	4770      	bx	lr

0800bc62 <TIM_UpdateDisableConfig>:
  * @param  NewState: new state of the TIMx UDIS bit
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_UpdateDisableConfig(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 800bc62:	b480      	push	{r7}
 800bc64:	b083      	sub	sp, #12
 800bc66:	af00      	add	r7, sp, #0
 800bc68:	6078      	str	r0, [r7, #4]
 800bc6a:	460b      	mov	r3, r1
 800bc6c:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800bc6e:	78fb      	ldrb	r3, [r7, #3]
 800bc70:	2b00      	cmp	r3, #0
 800bc72:	d008      	beq.n	800bc86 <TIM_UpdateDisableConfig+0x24>
  {
    /* Set the Update Disable Bit */
    TIMx->CR1 |= TIM_CR1_UDIS;
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	881b      	ldrh	r3, [r3, #0]
 800bc78:	b29b      	uxth	r3, r3
 800bc7a:	f043 0302 	orr.w	r3, r3, #2
 800bc7e:	b29a      	uxth	r2, r3
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Reset the Update Disable Bit */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_UDIS;
  }
}
 800bc84:	e007      	b.n	800bc96 <TIM_UpdateDisableConfig+0x34>
    TIMx->CR1 &= (uint16_t)~TIM_CR1_UDIS;
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	881b      	ldrh	r3, [r3, #0]
 800bc8a:	b29b      	uxth	r3, r3
 800bc8c:	f023 0302 	bic.w	r3, r3, #2
 800bc90:	b29a      	uxth	r2, r3
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	801a      	strh	r2, [r3, #0]
}
 800bc96:	bf00      	nop
 800bc98:	370c      	adds	r7, #12
 800bc9a:	46bd      	mov	sp, r7
 800bc9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bca0:	4770      	bx	lr

0800bca2 <TIM_UpdateRequestConfig>:
  *                 generation through the slave mode controller.
  *            @arg TIM_UpdateSource_Regular: Source of update is counter overflow/underflow.
  * @retval None
  */
void TIM_UpdateRequestConfig(TIM_TypeDef* TIMx, uint16_t TIM_UpdateSource)
{
 800bca2:	b480      	push	{r7}
 800bca4:	b083      	sub	sp, #12
 800bca6:	af00      	add	r7, sp, #0
 800bca8:	6078      	str	r0, [r7, #4]
 800bcaa:	460b      	mov	r3, r1
 800bcac:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_UPDATE_SOURCE(TIM_UpdateSource));

  if (TIM_UpdateSource != TIM_UpdateSource_Global)
 800bcae:	887b      	ldrh	r3, [r7, #2]
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	d008      	beq.n	800bcc6 <TIM_UpdateRequestConfig+0x24>
  {
    /* Set the URS Bit */
    TIMx->CR1 |= TIM_CR1_URS;
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	881b      	ldrh	r3, [r3, #0]
 800bcb8:	b29b      	uxth	r3, r3
 800bcba:	f043 0304 	orr.w	r3, r3, #4
 800bcbe:	b29a      	uxth	r2, r3
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Reset the URS Bit */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_URS;
  }
}
 800bcc4:	e007      	b.n	800bcd6 <TIM_UpdateRequestConfig+0x34>
    TIMx->CR1 &= (uint16_t)~TIM_CR1_URS;
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	881b      	ldrh	r3, [r3, #0]
 800bcca:	b29b      	uxth	r3, r3
 800bccc:	f023 0304 	bic.w	r3, r3, #4
 800bcd0:	b29a      	uxth	r2, r3
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	801a      	strh	r2, [r3, #0]
}
 800bcd6:	bf00      	nop
 800bcd8:	370c      	adds	r7, #12
 800bcda:	46bd      	mov	sp, r7
 800bcdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bce0:	4770      	bx	lr

0800bce2 <TIM_ARRPreloadConfig>:
  * @param  NewState: new state of the TIMx peripheral Preload register
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ARRPreloadConfig(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 800bce2:	b480      	push	{r7}
 800bce4:	b083      	sub	sp, #12
 800bce6:	af00      	add	r7, sp, #0
 800bce8:	6078      	str	r0, [r7, #4]
 800bcea:	460b      	mov	r3, r1
 800bcec:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800bcee:	78fb      	ldrb	r3, [r7, #3]
 800bcf0:	2b00      	cmp	r3, #0
 800bcf2:	d008      	beq.n	800bd06 <TIM_ARRPreloadConfig+0x24>
  {
    /* Set the ARR Preload Bit */
    TIMx->CR1 |= TIM_CR1_ARPE;
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	881b      	ldrh	r3, [r3, #0]
 800bcf8:	b29b      	uxth	r3, r3
 800bcfa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bcfe:	b29a      	uxth	r2, r3
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Reset the ARR Preload Bit */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_ARPE;
  }
}
 800bd04:	e007      	b.n	800bd16 <TIM_ARRPreloadConfig+0x34>
    TIMx->CR1 &= (uint16_t)~TIM_CR1_ARPE;
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	881b      	ldrh	r3, [r3, #0]
 800bd0a:	b29b      	uxth	r3, r3
 800bd0c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bd10:	b29a      	uxth	r2, r3
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	801a      	strh	r2, [r3, #0]
}
 800bd16:	bf00      	nop
 800bd18:	370c      	adds	r7, #12
 800bd1a:	46bd      	mov	sp, r7
 800bd1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd20:	4770      	bx	lr

0800bd22 <TIM_SelectOnePulseMode>:
  *            @arg TIM_OPMode_Single
  *            @arg TIM_OPMode_Repetitive
  * @retval None
  */
void TIM_SelectOnePulseMode(TIM_TypeDef* TIMx, uint16_t TIM_OPMode)
{
 800bd22:	b480      	push	{r7}
 800bd24:	b083      	sub	sp, #12
 800bd26:	af00      	add	r7, sp, #0
 800bd28:	6078      	str	r0, [r7, #4]
 800bd2a:	460b      	mov	r3, r1
 800bd2c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_OPM_MODE(TIM_OPMode));

  /* Reset the OPM Bit */
  TIMx->CR1 &= (uint16_t)~TIM_CR1_OPM;
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	881b      	ldrh	r3, [r3, #0]
 800bd32:	b29b      	uxth	r3, r3
 800bd34:	f023 0308 	bic.w	r3, r3, #8
 800bd38:	b29a      	uxth	r2, r3
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	801a      	strh	r2, [r3, #0]

  /* Configure the OPM Mode */
  TIMx->CR1 |= TIM_OPMode;
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	881b      	ldrh	r3, [r3, #0]
 800bd42:	b29a      	uxth	r2, r3
 800bd44:	887b      	ldrh	r3, [r7, #2]
 800bd46:	4313      	orrs	r3, r2
 800bd48:	b29a      	uxth	r2, r3
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	801a      	strh	r2, [r3, #0]
}
 800bd4e:	bf00      	nop
 800bd50:	370c      	adds	r7, #12
 800bd52:	46bd      	mov	sp, r7
 800bd54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd58:	4770      	bx	lr

0800bd5a <TIM_SetClockDivision>:
  *            @arg TIM_CKD_DIV2: TDTS = 2*Tck_tim
  *            @arg TIM_CKD_DIV4: TDTS = 4*Tck_tim
  * @retval None
  */
void TIM_SetClockDivision(TIM_TypeDef* TIMx, uint16_t TIM_CKD)
{
 800bd5a:	b480      	push	{r7}
 800bd5c:	b083      	sub	sp, #12
 800bd5e:	af00      	add	r7, sp, #0
 800bd60:	6078      	str	r0, [r7, #4]
 800bd62:	460b      	mov	r3, r1
 800bd64:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_CKD_DIV(TIM_CKD));

  /* Reset the CKD Bits */
  TIMx->CR1 &= (uint16_t)(~TIM_CR1_CKD);
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	881b      	ldrh	r3, [r3, #0]
 800bd6a:	b29b      	uxth	r3, r3
 800bd6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bd70:	b29a      	uxth	r2, r3
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	801a      	strh	r2, [r3, #0]

  /* Set the CKD value */
  TIMx->CR1 |= TIM_CKD;
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	881b      	ldrh	r3, [r3, #0]
 800bd7a:	b29a      	uxth	r2, r3
 800bd7c:	887b      	ldrh	r3, [r7, #2]
 800bd7e:	4313      	orrs	r3, r2
 800bd80:	b29a      	uxth	r2, r3
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	801a      	strh	r2, [r3, #0]
}
 800bd86:	bf00      	nop
 800bd88:	370c      	adds	r7, #12
 800bd8a:	46bd      	mov	sp, r7
 800bd8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd90:	4770      	bx	lr

0800bd92 <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 800bd92:	b480      	push	{r7}
 800bd94:	b083      	sub	sp, #12
 800bd96:	af00      	add	r7, sp, #0
 800bd98:	6078      	str	r0, [r7, #4]
 800bd9a:	460b      	mov	r3, r1
 800bd9c:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800bd9e:	78fb      	ldrb	r3, [r7, #3]
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	d008      	beq.n	800bdb6 <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	881b      	ldrh	r3, [r3, #0]
 800bda8:	b29b      	uxth	r3, r3
 800bdaa:	f043 0301 	orr.w	r3, r3, #1
 800bdae:	b29a      	uxth	r2, r3
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
  }
}
 800bdb4:	e007      	b.n	800bdc6 <TIM_Cmd+0x34>
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	881b      	ldrh	r3, [r3, #0]
 800bdba:	b29b      	uxth	r3, r3
 800bdbc:	f023 0301 	bic.w	r3, r3, #1
 800bdc0:	b29a      	uxth	r2, r3
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	801a      	strh	r2, [r3, #0]
}
 800bdc6:	bf00      	nop
 800bdc8:	370c      	adds	r7, #12
 800bdca:	46bd      	mov	sp, r7
 800bdcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdd0:	4770      	bx	lr

0800bdd2 <TIM_OC1Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC1Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 800bdd2:	b480      	push	{r7}
 800bdd4:	b085      	sub	sp, #20
 800bdd6:	af00      	add	r7, sp, #0
 800bdd8:	6078      	str	r0, [r7, #4]
 800bdda:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 800bddc:	2300      	movs	r3, #0
 800bdde:	817b      	strh	r3, [r7, #10]
 800bde0:	2300      	movs	r3, #0
 800bde2:	81fb      	strh	r3, [r7, #14]
 800bde4:	2300      	movs	r3, #0
 800bde6:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	8c1b      	ldrh	r3, [r3, #32]
 800bdec:	b29b      	uxth	r3, r3
 800bdee:	f023 0301 	bic.w	r3, r3, #1
 800bdf2:	b29a      	uxth	r2, r3
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	8c1b      	ldrh	r3, [r3, #32]
 800bdfc:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	889b      	ldrh	r3, [r3, #4]
 800be02:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	8b1b      	ldrh	r3, [r3, #24]
 800be08:	817b      	strh	r3, [r7, #10]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC1M;
 800be0a:	897b      	ldrh	r3, [r7, #10]
 800be0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800be10:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC1S;
 800be12:	897b      	ldrh	r3, [r7, #10]
 800be14:	f023 0303 	bic.w	r3, r3, #3
 800be18:	817b      	strh	r3, [r7, #10]
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 800be1a:	683b      	ldr	r3, [r7, #0]
 800be1c:	881a      	ldrh	r2, [r3, #0]
 800be1e:	897b      	ldrh	r3, [r7, #10]
 800be20:	4313      	orrs	r3, r2
 800be22:	817b      	strh	r3, [r7, #10]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC1P;
 800be24:	89fb      	ldrh	r3, [r7, #14]
 800be26:	f023 0302 	bic.w	r3, r3, #2
 800be2a:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
 800be2c:	683b      	ldr	r3, [r7, #0]
 800be2e:	899a      	ldrh	r2, [r3, #12]
 800be30:	89fb      	ldrh	r3, [r7, #14]
 800be32:	4313      	orrs	r3, r2
 800be34:	81fb      	strh	r3, [r7, #14]
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 800be36:	683b      	ldr	r3, [r7, #0]
 800be38:	885a      	ldrh	r2, [r3, #2]
 800be3a:	89fb      	ldrh	r3, [r7, #14]
 800be3c:	4313      	orrs	r3, r2
 800be3e:	81fb      	strh	r3, [r7, #14]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	4a1f      	ldr	r2, [pc, #124]	; (800bec0 <TIM_OC1Init+0xee>)
 800be44:	4293      	cmp	r3, r2
 800be46:	d003      	beq.n	800be50 <TIM_OC1Init+0x7e>
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	4a1e      	ldr	r2, [pc, #120]	; (800bec4 <TIM_OC1Init+0xf2>)
 800be4c:	4293      	cmp	r3, r2
 800be4e:	d123      	bne.n	800be98 <TIM_OC1Init+0xc6>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NP;
 800be50:	89fb      	ldrh	r3, [r7, #14]
 800be52:	f023 0308 	bic.w	r3, r3, #8
 800be56:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
 800be58:	683b      	ldr	r3, [r7, #0]
 800be5a:	89da      	ldrh	r2, [r3, #14]
 800be5c:	89fb      	ldrh	r3, [r7, #14]
 800be5e:	4313      	orrs	r3, r2
 800be60:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NE;
 800be62:	89fb      	ldrh	r3, [r7, #14]
 800be64:	f023 0304 	bic.w	r3, r3, #4
 800be68:	81fb      	strh	r3, [r7, #14]
    
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
 800be6a:	683b      	ldr	r3, [r7, #0]
 800be6c:	889a      	ldrh	r2, [r3, #4]
 800be6e:	89fb      	ldrh	r3, [r7, #14]
 800be70:	4313      	orrs	r3, r2
 800be72:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1;
 800be74:	89bb      	ldrh	r3, [r7, #12]
 800be76:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800be7a:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1N;
 800be7c:	89bb      	ldrh	r3, [r7, #12]
 800be7e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800be82:	81bb      	strh	r3, [r7, #12]
    /* Set the Output Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
 800be84:	683b      	ldr	r3, [r7, #0]
 800be86:	8a1a      	ldrh	r2, [r3, #16]
 800be88:	89bb      	ldrh	r3, [r7, #12]
 800be8a:	4313      	orrs	r3, r2
 800be8c:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
 800be8e:	683b      	ldr	r3, [r7, #0]
 800be90:	8a5a      	ldrh	r2, [r3, #18]
 800be92:	89bb      	ldrh	r3, [r7, #12]
 800be94:	4313      	orrs	r3, r2
 800be96:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	89ba      	ldrh	r2, [r7, #12]
 800be9c:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	897a      	ldrh	r2, [r7, #10]
 800bea2:	831a      	strh	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse;
 800bea4:	683b      	ldr	r3, [r7, #0]
 800bea6:	689a      	ldr	r2, [r3, #8]
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	635a      	str	r2, [r3, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	89fa      	ldrh	r2, [r7, #14]
 800beb0:	841a      	strh	r2, [r3, #32]
}
 800beb2:	bf00      	nop
 800beb4:	3714      	adds	r7, #20
 800beb6:	46bd      	mov	sp, r7
 800beb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bebc:	4770      	bx	lr
 800bebe:	bf00      	nop
 800bec0:	40010000 	.word	0x40010000
 800bec4:	40010400 	.word	0x40010400

0800bec8 <TIM_OC2Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC2Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 800bec8:	b480      	push	{r7}
 800beca:	b085      	sub	sp, #20
 800becc:	af00      	add	r7, sp, #0
 800bece:	6078      	str	r0, [r7, #4]
 800bed0:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 800bed2:	2300      	movs	r3, #0
 800bed4:	817b      	strh	r3, [r7, #10]
 800bed6:	2300      	movs	r3, #0
 800bed8:	81fb      	strh	r3, [r7, #14]
 800beda:	2300      	movs	r3, #0
 800bedc:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	8c1b      	ldrh	r3, [r3, #32]
 800bee2:	b29b      	uxth	r3, r3
 800bee4:	f023 0310 	bic.w	r3, r3, #16
 800bee8:	b29a      	uxth	r2, r3
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	8c1b      	ldrh	r3, [r3, #32]
 800bef2:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	889b      	ldrh	r3, [r3, #4]
 800bef8:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	8b1b      	ldrh	r3, [r3, #24]
 800befe:	817b      	strh	r3, [r7, #10]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC2M;
 800bf00:	897b      	ldrh	r3, [r7, #10]
 800bf02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bf06:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC2S;
 800bf08:	897b      	ldrh	r3, [r7, #10]
 800bf0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bf0e:	817b      	strh	r3, [r7, #10]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 800bf10:	683b      	ldr	r3, [r7, #0]
 800bf12:	881b      	ldrh	r3, [r3, #0]
 800bf14:	021b      	lsls	r3, r3, #8
 800bf16:	b29a      	uxth	r2, r3
 800bf18:	897b      	ldrh	r3, [r7, #10]
 800bf1a:	4313      	orrs	r3, r2
 800bf1c:	817b      	strh	r3, [r7, #10]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC2P;
 800bf1e:	89fb      	ldrh	r3, [r7, #14]
 800bf20:	f023 0320 	bic.w	r3, r3, #32
 800bf24:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
 800bf26:	683b      	ldr	r3, [r7, #0]
 800bf28:	899b      	ldrh	r3, [r3, #12]
 800bf2a:	011b      	lsls	r3, r3, #4
 800bf2c:	b29a      	uxth	r2, r3
 800bf2e:	89fb      	ldrh	r3, [r7, #14]
 800bf30:	4313      	orrs	r3, r2
 800bf32:	81fb      	strh	r3, [r7, #14]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
 800bf34:	683b      	ldr	r3, [r7, #0]
 800bf36:	885b      	ldrh	r3, [r3, #2]
 800bf38:	011b      	lsls	r3, r3, #4
 800bf3a:	b29a      	uxth	r2, r3
 800bf3c:	89fb      	ldrh	r3, [r7, #14]
 800bf3e:	4313      	orrs	r3, r2
 800bf40:	81fb      	strh	r3, [r7, #14]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	4a22      	ldr	r2, [pc, #136]	; (800bfd0 <TIM_OC2Init+0x108>)
 800bf46:	4293      	cmp	r3, r2
 800bf48:	d003      	beq.n	800bf52 <TIM_OC2Init+0x8a>
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	4a21      	ldr	r2, [pc, #132]	; (800bfd4 <TIM_OC2Init+0x10c>)
 800bf4e:	4293      	cmp	r3, r2
 800bf50:	d12b      	bne.n	800bfaa <TIM_OC2Init+0xe2>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NP;
 800bf52:	89fb      	ldrh	r3, [r7, #14]
 800bf54:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bf58:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
 800bf5a:	683b      	ldr	r3, [r7, #0]
 800bf5c:	89db      	ldrh	r3, [r3, #14]
 800bf5e:	011b      	lsls	r3, r3, #4
 800bf60:	b29a      	uxth	r2, r3
 800bf62:	89fb      	ldrh	r3, [r7, #14]
 800bf64:	4313      	orrs	r3, r2
 800bf66:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NE;
 800bf68:	89fb      	ldrh	r3, [r7, #14]
 800bf6a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bf6e:	81fb      	strh	r3, [r7, #14]
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
 800bf70:	683b      	ldr	r3, [r7, #0]
 800bf72:	889b      	ldrh	r3, [r3, #4]
 800bf74:	011b      	lsls	r3, r3, #4
 800bf76:	b29a      	uxth	r2, r3
 800bf78:	89fb      	ldrh	r3, [r7, #14]
 800bf7a:	4313      	orrs	r3, r2
 800bf7c:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2;
 800bf7e:	89bb      	ldrh	r3, [r7, #12]
 800bf80:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800bf84:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2N;
 800bf86:	89bb      	ldrh	r3, [r7, #12]
 800bf88:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800bf8c:	81bb      	strh	r3, [r7, #12]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
 800bf8e:	683b      	ldr	r3, [r7, #0]
 800bf90:	8a1b      	ldrh	r3, [r3, #16]
 800bf92:	009b      	lsls	r3, r3, #2
 800bf94:	b29a      	uxth	r2, r3
 800bf96:	89bb      	ldrh	r3, [r7, #12]
 800bf98:	4313      	orrs	r3, r2
 800bf9a:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
 800bf9c:	683b      	ldr	r3, [r7, #0]
 800bf9e:	8a5b      	ldrh	r3, [r3, #18]
 800bfa0:	009b      	lsls	r3, r3, #2
 800bfa2:	b29a      	uxth	r2, r3
 800bfa4:	89bb      	ldrh	r3, [r7, #12]
 800bfa6:	4313      	orrs	r3, r2
 800bfa8:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	89ba      	ldrh	r2, [r7, #12]
 800bfae:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	897a      	ldrh	r2, [r7, #10]
 800bfb4:	831a      	strh	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = TIM_OCInitStruct->TIM_Pulse;
 800bfb6:	683b      	ldr	r3, [r7, #0]
 800bfb8:	689a      	ldr	r2, [r3, #8]
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	89fa      	ldrh	r2, [r7, #14]
 800bfc2:	841a      	strh	r2, [r3, #32]
}
 800bfc4:	bf00      	nop
 800bfc6:	3714      	adds	r7, #20
 800bfc8:	46bd      	mov	sp, r7
 800bfca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfce:	4770      	bx	lr
 800bfd0:	40010000 	.word	0x40010000
 800bfd4:	40010400 	.word	0x40010400

0800bfd8 <TIM_OC3Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC3Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 800bfd8:	b480      	push	{r7}
 800bfda:	b085      	sub	sp, #20
 800bfdc:	af00      	add	r7, sp, #0
 800bfde:	6078      	str	r0, [r7, #4]
 800bfe0:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 800bfe2:	2300      	movs	r3, #0
 800bfe4:	817b      	strh	r3, [r7, #10]
 800bfe6:	2300      	movs	r3, #0
 800bfe8:	81fb      	strh	r3, [r7, #14]
 800bfea:	2300      	movs	r3, #0
 800bfec:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	8c1b      	ldrh	r3, [r3, #32]
 800bff2:	b29b      	uxth	r3, r3
 800bff4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bff8:	b29a      	uxth	r2, r3
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	8c1b      	ldrh	r3, [r3, #32]
 800c002:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	889b      	ldrh	r3, [r3, #4]
 800c008:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	8b9b      	ldrh	r3, [r3, #28]
 800c00e:	817b      	strh	r3, [r7, #10]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC3M;
 800c010:	897b      	ldrh	r3, [r7, #10]
 800c012:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c016:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC3S;  
 800c018:	897b      	ldrh	r3, [r7, #10]
 800c01a:	f023 0303 	bic.w	r3, r3, #3
 800c01e:	817b      	strh	r3, [r7, #10]
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 800c020:	683b      	ldr	r3, [r7, #0]
 800c022:	881a      	ldrh	r2, [r3, #0]
 800c024:	897b      	ldrh	r3, [r7, #10]
 800c026:	4313      	orrs	r3, r2
 800c028:	817b      	strh	r3, [r7, #10]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
 800c02a:	89fb      	ldrh	r3, [r7, #14]
 800c02c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c030:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
 800c032:	683b      	ldr	r3, [r7, #0]
 800c034:	899b      	ldrh	r3, [r3, #12]
 800c036:	021b      	lsls	r3, r3, #8
 800c038:	b29a      	uxth	r2, r3
 800c03a:	89fb      	ldrh	r3, [r7, #14]
 800c03c:	4313      	orrs	r3, r2
 800c03e:	81fb      	strh	r3, [r7, #14]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 800c040:	683b      	ldr	r3, [r7, #0]
 800c042:	885b      	ldrh	r3, [r3, #2]
 800c044:	021b      	lsls	r3, r3, #8
 800c046:	b29a      	uxth	r2, r3
 800c048:	89fb      	ldrh	r3, [r7, #14]
 800c04a:	4313      	orrs	r3, r2
 800c04c:	81fb      	strh	r3, [r7, #14]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	4a22      	ldr	r2, [pc, #136]	; (800c0dc <TIM_OC3Init+0x104>)
 800c052:	4293      	cmp	r3, r2
 800c054:	d003      	beq.n	800c05e <TIM_OC3Init+0x86>
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	4a21      	ldr	r2, [pc, #132]	; (800c0e0 <TIM_OC3Init+0x108>)
 800c05a:	4293      	cmp	r3, r2
 800c05c:	d12b      	bne.n	800c0b6 <TIM_OC3Init+0xde>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NP;
 800c05e:	89fb      	ldrh	r3, [r7, #14]
 800c060:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c064:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
 800c066:	683b      	ldr	r3, [r7, #0]
 800c068:	89db      	ldrh	r3, [r3, #14]
 800c06a:	021b      	lsls	r3, r3, #8
 800c06c:	b29a      	uxth	r2, r3
 800c06e:	89fb      	ldrh	r3, [r7, #14]
 800c070:	4313      	orrs	r3, r2
 800c072:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NE;
 800c074:	89fb      	ldrh	r3, [r7, #14]
 800c076:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c07a:	81fb      	strh	r3, [r7, #14]
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
 800c07c:	683b      	ldr	r3, [r7, #0]
 800c07e:	889b      	ldrh	r3, [r3, #4]
 800c080:	021b      	lsls	r3, r3, #8
 800c082:	b29a      	uxth	r2, r3
 800c084:	89fb      	ldrh	r3, [r7, #14]
 800c086:	4313      	orrs	r3, r2
 800c088:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3;
 800c08a:	89bb      	ldrh	r3, [r7, #12]
 800c08c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c090:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3N;
 800c092:	89bb      	ldrh	r3, [r7, #12]
 800c094:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c098:	81bb      	strh	r3, [r7, #12]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
 800c09a:	683b      	ldr	r3, [r7, #0]
 800c09c:	8a1b      	ldrh	r3, [r3, #16]
 800c09e:	011b      	lsls	r3, r3, #4
 800c0a0:	b29a      	uxth	r2, r3
 800c0a2:	89bb      	ldrh	r3, [r7, #12]
 800c0a4:	4313      	orrs	r3, r2
 800c0a6:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
 800c0a8:	683b      	ldr	r3, [r7, #0]
 800c0aa:	8a5b      	ldrh	r3, [r3, #18]
 800c0ac:	011b      	lsls	r3, r3, #4
 800c0ae:	b29a      	uxth	r2, r3
 800c0b0:	89bb      	ldrh	r3, [r7, #12]
 800c0b2:	4313      	orrs	r3, r2
 800c0b4:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	89ba      	ldrh	r2, [r7, #12]
 800c0ba:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	897a      	ldrh	r2, [r7, #10]
 800c0c0:	839a      	strh	r2, [r3, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
 800c0c2:	683b      	ldr	r3, [r7, #0]
 800c0c4:	689a      	ldr	r2, [r3, #8]
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	89fa      	ldrh	r2, [r7, #14]
 800c0ce:	841a      	strh	r2, [r3, #32]
}
 800c0d0:	bf00      	nop
 800c0d2:	3714      	adds	r7, #20
 800c0d4:	46bd      	mov	sp, r7
 800c0d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0da:	4770      	bx	lr
 800c0dc:	40010000 	.word	0x40010000
 800c0e0:	40010400 	.word	0x40010400

0800c0e4 <TIM_OC4Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC4Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 800c0e4:	b480      	push	{r7}
 800c0e6:	b085      	sub	sp, #20
 800c0e8:	af00      	add	r7, sp, #0
 800c0ea:	6078      	str	r0, [r7, #4]
 800c0ec:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 800c0ee:	2300      	movs	r3, #0
 800c0f0:	81bb      	strh	r3, [r7, #12]
 800c0f2:	2300      	movs	r3, #0
 800c0f4:	817b      	strh	r3, [r7, #10]
 800c0f6:	2300      	movs	r3, #0
 800c0f8:	81fb      	strh	r3, [r7, #14]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC4E;
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	8c1b      	ldrh	r3, [r3, #32]
 800c0fe:	b29b      	uxth	r3, r3
 800c100:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c104:	b29a      	uxth	r2, r3
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	8c1b      	ldrh	r3, [r3, #32]
 800c10e:	817b      	strh	r3, [r7, #10]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	889b      	ldrh	r3, [r3, #4]
 800c114:	81fb      	strh	r3, [r7, #14]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	8b9b      	ldrh	r3, [r3, #28]
 800c11a:	81bb      	strh	r3, [r7, #12]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC4M;
 800c11c:	89bb      	ldrh	r3, [r7, #12]
 800c11e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c122:	81bb      	strh	r3, [r7, #12]
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC4S;
 800c124:	89bb      	ldrh	r3, [r7, #12]
 800c126:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c12a:	81bb      	strh	r3, [r7, #12]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 800c12c:	683b      	ldr	r3, [r7, #0]
 800c12e:	881b      	ldrh	r3, [r3, #0]
 800c130:	021b      	lsls	r3, r3, #8
 800c132:	b29a      	uxth	r2, r3
 800c134:	89bb      	ldrh	r3, [r7, #12]
 800c136:	4313      	orrs	r3, r2
 800c138:	81bb      	strh	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
 800c13a:	897b      	ldrh	r3, [r7, #10]
 800c13c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c140:	817b      	strh	r3, [r7, #10]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
 800c142:	683b      	ldr	r3, [r7, #0]
 800c144:	899b      	ldrh	r3, [r3, #12]
 800c146:	031b      	lsls	r3, r3, #12
 800c148:	b29a      	uxth	r2, r3
 800c14a:	897b      	ldrh	r3, [r7, #10]
 800c14c:	4313      	orrs	r3, r2
 800c14e:	817b      	strh	r3, [r7, #10]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
 800c150:	683b      	ldr	r3, [r7, #0]
 800c152:	885b      	ldrh	r3, [r3, #2]
 800c154:	031b      	lsls	r3, r3, #12
 800c156:	b29a      	uxth	r2, r3
 800c158:	897b      	ldrh	r3, [r7, #10]
 800c15a:	4313      	orrs	r3, r2
 800c15c:	817b      	strh	r3, [r7, #10]
  
  if((TIMx == TIM1) || (TIMx == TIM8))
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	4a12      	ldr	r2, [pc, #72]	; (800c1ac <TIM_OC4Init+0xc8>)
 800c162:	4293      	cmp	r3, r2
 800c164:	d003      	beq.n	800c16e <TIM_OC4Init+0x8a>
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	4a11      	ldr	r2, [pc, #68]	; (800c1b0 <TIM_OC4Init+0xcc>)
 800c16a:	4293      	cmp	r3, r2
 800c16c:	d10a      	bne.n	800c184 <TIM_OC4Init+0xa0>
  {
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &=(uint16_t) ~TIM_CR2_OIS4;
 800c16e:	89fb      	ldrh	r3, [r7, #14]
 800c170:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c174:	81fb      	strh	r3, [r7, #14]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 6);
 800c176:	683b      	ldr	r3, [r7, #0]
 800c178:	8a1b      	ldrh	r3, [r3, #16]
 800c17a:	019b      	lsls	r3, r3, #6
 800c17c:	b29a      	uxth	r2, r3
 800c17e:	89fb      	ldrh	r3, [r7, #14]
 800c180:	4313      	orrs	r3, r2
 800c182:	81fb      	strh	r3, [r7, #14]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	89fa      	ldrh	r2, [r7, #14]
 800c188:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	89ba      	ldrh	r2, [r7, #12]
 800c18e:	839a      	strh	r2, [r3, #28]
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = TIM_OCInitStruct->TIM_Pulse;
 800c190:	683b      	ldr	r3, [r7, #0]
 800c192:	689a      	ldr	r2, [r3, #8]
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	897a      	ldrh	r2, [r7, #10]
 800c19c:	841a      	strh	r2, [r3, #32]
}
 800c19e:	bf00      	nop
 800c1a0:	3714      	adds	r7, #20
 800c1a2:	46bd      	mov	sp, r7
 800c1a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1a8:	4770      	bx	lr
 800c1aa:	bf00      	nop
 800c1ac:	40010000 	.word	0x40010000
 800c1b0:	40010400 	.word	0x40010400

0800c1b4 <TIM_OCStructInit>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void TIM_OCStructInit(TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 800c1b4:	b480      	push	{r7}
 800c1b6:	b083      	sub	sp, #12
 800c1b8:	af00      	add	r7, sp, #0
 800c1ba:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_OCInitStruct->TIM_OCMode = TIM_OCMode_Timing;
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	2200      	movs	r2, #0
 800c1c0:	801a      	strh	r2, [r3, #0]
  TIM_OCInitStruct->TIM_OutputState = TIM_OutputState_Disable;
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	2200      	movs	r2, #0
 800c1c6:	805a      	strh	r2, [r3, #2]
  TIM_OCInitStruct->TIM_OutputNState = TIM_OutputNState_Disable;
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	2200      	movs	r2, #0
 800c1cc:	809a      	strh	r2, [r3, #4]
  TIM_OCInitStruct->TIM_Pulse = 0x00000000;
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	2200      	movs	r2, #0
 800c1d2:	609a      	str	r2, [r3, #8]
  TIM_OCInitStruct->TIM_OCPolarity = TIM_OCPolarity_High;
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	2200      	movs	r2, #0
 800c1d8:	819a      	strh	r2, [r3, #12]
  TIM_OCInitStruct->TIM_OCNPolarity = TIM_OCPolarity_High;
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	2200      	movs	r2, #0
 800c1de:	81da      	strh	r2, [r3, #14]
  TIM_OCInitStruct->TIM_OCIdleState = TIM_OCIdleState_Reset;
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	2200      	movs	r2, #0
 800c1e4:	821a      	strh	r2, [r3, #16]
  TIM_OCInitStruct->TIM_OCNIdleState = TIM_OCNIdleState_Reset;
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	2200      	movs	r2, #0
 800c1ea:	825a      	strh	r2, [r3, #18]
}
 800c1ec:	bf00      	nop
 800c1ee:	370c      	adds	r7, #12
 800c1f0:	46bd      	mov	sp, r7
 800c1f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1f6:	4770      	bx	lr

0800c1f8 <TIM_SelectOCxM>:
  *            @arg TIM_ForcedAction_Active
  *            @arg TIM_ForcedAction_InActive
  * @retval None
  */
void TIM_SelectOCxM(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_OCMode)
{
 800c1f8:	b480      	push	{r7}
 800c1fa:	b085      	sub	sp, #20
 800c1fc:	af00      	add	r7, sp, #0
 800c1fe:	6078      	str	r0, [r7, #4]
 800c200:	460b      	mov	r3, r1
 800c202:	807b      	strh	r3, [r7, #2]
 800c204:	4613      	mov	r3, r2
 800c206:	803b      	strh	r3, [r7, #0]
  uint32_t tmp = 0;
 800c208:	2300      	movs	r3, #0
 800c20a:	60fb      	str	r3, [r7, #12]
  uint16_t tmp1 = 0;
 800c20c:	2300      	movs	r3, #0
 800c20e:	817b      	strh	r3, [r7, #10]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_OCM(TIM_OCMode));

  tmp = (uint32_t) TIMx;
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	60fb      	str	r3, [r7, #12]
  tmp += CCMR_OFFSET;
 800c214:	68fb      	ldr	r3, [r7, #12]
 800c216:	3318      	adds	r3, #24
 800c218:	60fb      	str	r3, [r7, #12]

  tmp1 = CCER_CCE_SET << (uint16_t)TIM_Channel;
 800c21a:	887b      	ldrh	r3, [r7, #2]
 800c21c:	2201      	movs	r2, #1
 800c21e:	fa02 f303 	lsl.w	r3, r2, r3
 800c222:	817b      	strh	r3, [r7, #10]

  /* Disable the Channel: Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t) ~tmp1;
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	8c1b      	ldrh	r3, [r3, #32]
 800c228:	b29a      	uxth	r2, r3
 800c22a:	897b      	ldrh	r3, [r7, #10]
 800c22c:	43db      	mvns	r3, r3
 800c22e:	b29b      	uxth	r3, r3
 800c230:	4013      	ands	r3, r2
 800c232:	b29a      	uxth	r2, r3
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	841a      	strh	r2, [r3, #32]

  if((TIM_Channel == TIM_Channel_1) ||(TIM_Channel == TIM_Channel_3))
 800c238:	887b      	ldrh	r3, [r7, #2]
 800c23a:	2b00      	cmp	r3, #0
 800c23c:	d002      	beq.n	800c244 <TIM_SelectOCxM+0x4c>
 800c23e:	887b      	ldrh	r3, [r7, #2]
 800c240:	2b08      	cmp	r3, #8
 800c242:	d114      	bne.n	800c26e <TIM_SelectOCxM+0x76>
  {
    tmp += (TIM_Channel>>1);
 800c244:	887b      	ldrh	r3, [r7, #2]
 800c246:	085b      	lsrs	r3, r3, #1
 800c248:	b29b      	uxth	r3, r3
 800c24a:	461a      	mov	r2, r3
 800c24c:	68fb      	ldr	r3, [r7, #12]
 800c24e:	4413      	add	r3, r2
 800c250:	60fb      	str	r3, [r7, #12]

    /* Reset the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp &= CCMR_OC13M_MASK;
 800c252:	68fb      	ldr	r3, [r7, #12]
 800c254:	6819      	ldr	r1, [r3, #0]
 800c256:	68fa      	ldr	r2, [r7, #12]
 800c258:	f64f 738f 	movw	r3, #65423	; 0xff8f
 800c25c:	400b      	ands	r3, r1
 800c25e:	6013      	str	r3, [r2, #0]
   
    /* Configure the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp |= TIM_OCMode;
 800c260:	68fb      	ldr	r3, [r7, #12]
 800c262:	6819      	ldr	r1, [r3, #0]
 800c264:	883a      	ldrh	r2, [r7, #0]
 800c266:	68fb      	ldr	r3, [r7, #12]
 800c268:	430a      	orrs	r2, r1
 800c26a:	601a      	str	r2, [r3, #0]
 800c26c:	e018      	b.n	800c2a0 <TIM_SelectOCxM+0xa8>
  }
  else
  {
    tmp += (uint16_t)(TIM_Channel - (uint16_t)4)>> (uint16_t)1;
 800c26e:	887b      	ldrh	r3, [r7, #2]
 800c270:	3b04      	subs	r3, #4
 800c272:	b29b      	uxth	r3, r3
 800c274:	085b      	lsrs	r3, r3, #1
 800c276:	b29b      	uxth	r3, r3
 800c278:	461a      	mov	r2, r3
 800c27a:	68fb      	ldr	r3, [r7, #12]
 800c27c:	4413      	add	r3, r2
 800c27e:	60fb      	str	r3, [r7, #12]

    /* Reset the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp &= CCMR_OC24M_MASK;
 800c280:	68fb      	ldr	r3, [r7, #12]
 800c282:	6819      	ldr	r1, [r3, #0]
 800c284:	68fa      	ldr	r2, [r7, #12]
 800c286:	f648 73ff 	movw	r3, #36863	; 0x8fff
 800c28a:	400b      	ands	r3, r1
 800c28c:	6013      	str	r3, [r2, #0]
    
    /* Configure the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp |= (uint16_t)(TIM_OCMode << 8);
 800c28e:	68fb      	ldr	r3, [r7, #12]
 800c290:	681a      	ldr	r2, [r3, #0]
 800c292:	883b      	ldrh	r3, [r7, #0]
 800c294:	021b      	lsls	r3, r3, #8
 800c296:	b29b      	uxth	r3, r3
 800c298:	4619      	mov	r1, r3
 800c29a:	68fb      	ldr	r3, [r7, #12]
 800c29c:	430a      	orrs	r2, r1
 800c29e:	601a      	str	r2, [r3, #0]
  }
}
 800c2a0:	bf00      	nop
 800c2a2:	3714      	adds	r7, #20
 800c2a4:	46bd      	mov	sp, r7
 800c2a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2aa:	4770      	bx	lr

0800c2ac <TIM_SetCompare1>:
  * @param  TIMx: where x can be 1 to 14 except 6 and 7, to select the TIM peripheral.
  * @param  Compare1: specifies the Capture Compare1 register new value.
  * @retval None
  */
void TIM_SetCompare1(TIM_TypeDef* TIMx, uint32_t Compare1)
{
 800c2ac:	b480      	push	{r7}
 800c2ae:	b083      	sub	sp, #12
 800c2b0:	af00      	add	r7, sp, #0
 800c2b2:	6078      	str	r0, [r7, #4]
 800c2b4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));

  /* Set the Capture Compare1 Register value */
  TIMx->CCR1 = Compare1;
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	683a      	ldr	r2, [r7, #0]
 800c2ba:	635a      	str	r2, [r3, #52]	; 0x34
}
 800c2bc:	bf00      	nop
 800c2be:	370c      	adds	r7, #12
 800c2c0:	46bd      	mov	sp, r7
 800c2c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2c6:	4770      	bx	lr

0800c2c8 <TIM_SetCompare2>:
  *         peripheral.
  * @param  Compare2: specifies the Capture Compare2 register new value.
  * @retval None
  */
void TIM_SetCompare2(TIM_TypeDef* TIMx, uint32_t Compare2)
{
 800c2c8:	b480      	push	{r7}
 800c2ca:	b083      	sub	sp, #12
 800c2cc:	af00      	add	r7, sp, #0
 800c2ce:	6078      	str	r0, [r7, #4]
 800c2d0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Set the Capture Compare2 Register value */
  TIMx->CCR2 = Compare2;
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	683a      	ldr	r2, [r7, #0]
 800c2d6:	639a      	str	r2, [r3, #56]	; 0x38
}
 800c2d8:	bf00      	nop
 800c2da:	370c      	adds	r7, #12
 800c2dc:	46bd      	mov	sp, r7
 800c2de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2e2:	4770      	bx	lr

0800c2e4 <TIM_SetCompare3>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @param  Compare3: specifies the Capture Compare3 register new value.
  * @retval None
  */
void TIM_SetCompare3(TIM_TypeDef* TIMx, uint32_t Compare3)
{
 800c2e4:	b480      	push	{r7}
 800c2e6:	b083      	sub	sp, #12
 800c2e8:	af00      	add	r7, sp, #0
 800c2ea:	6078      	str	r0, [r7, #4]
 800c2ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));

  /* Set the Capture Compare3 Register value */
  TIMx->CCR3 = Compare3;
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	683a      	ldr	r2, [r7, #0]
 800c2f2:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800c2f4:	bf00      	nop
 800c2f6:	370c      	adds	r7, #12
 800c2f8:	46bd      	mov	sp, r7
 800c2fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2fe:	4770      	bx	lr

0800c300 <TIM_SetCompare4>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @param  Compare4: specifies the Capture Compare4 register new value.
  * @retval None
  */
void TIM_SetCompare4(TIM_TypeDef* TIMx, uint32_t Compare4)
{
 800c300:	b480      	push	{r7}
 800c302:	b083      	sub	sp, #12
 800c304:	af00      	add	r7, sp, #0
 800c306:	6078      	str	r0, [r7, #4]
 800c308:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));

  /* Set the Capture Compare4 Register value */
  TIMx->CCR4 = Compare4;
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	683a      	ldr	r2, [r7, #0]
 800c30e:	641a      	str	r2, [r3, #64]	; 0x40
}
 800c310:	bf00      	nop
 800c312:	370c      	adds	r7, #12
 800c314:	46bd      	mov	sp, r7
 800c316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c31a:	4770      	bx	lr

0800c31c <TIM_ForcedOC1Config>:
  *            @arg TIM_ForcedAction_Active: Force active level on OC1REF
  *            @arg TIM_ForcedAction_InActive: Force inactive level on OC1REF.
  * @retval None
  */
void TIM_ForcedOC1Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
{
 800c31c:	b480      	push	{r7}
 800c31e:	b085      	sub	sp, #20
 800c320:	af00      	add	r7, sp, #0
 800c322:	6078      	str	r0, [r7, #4]
 800c324:	460b      	mov	r3, r1
 800c326:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 800c328:	2300      	movs	r3, #0
 800c32a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr1 = TIMx->CCMR1;
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	8b1b      	ldrh	r3, [r3, #24]
 800c330:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC1M Bits */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC1M;
 800c332:	89fb      	ldrh	r3, [r7, #14]
 800c334:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c338:	81fb      	strh	r3, [r7, #14]

  /* Configure The Forced output Mode */
  tmpccmr1 |= TIM_ForcedAction;
 800c33a:	89fa      	ldrh	r2, [r7, #14]
 800c33c:	887b      	ldrh	r3, [r7, #2]
 800c33e:	4313      	orrs	r3, r2
 800c340:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	89fa      	ldrh	r2, [r7, #14]
 800c346:	831a      	strh	r2, [r3, #24]
}
 800c348:	bf00      	nop
 800c34a:	3714      	adds	r7, #20
 800c34c:	46bd      	mov	sp, r7
 800c34e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c352:	4770      	bx	lr

0800c354 <TIM_ForcedOC2Config>:
  *            @arg TIM_ForcedAction_Active: Force active level on OC2REF
  *            @arg TIM_ForcedAction_InActive: Force inactive level on OC2REF.
  * @retval None
  */
void TIM_ForcedOC2Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
{
 800c354:	b480      	push	{r7}
 800c356:	b085      	sub	sp, #20
 800c358:	af00      	add	r7, sp, #0
 800c35a:	6078      	str	r0, [r7, #4]
 800c35c:	460b      	mov	r3, r1
 800c35e:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 800c360:	2300      	movs	r3, #0
 800c362:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr1 = TIMx->CCMR1;
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	8b1b      	ldrh	r3, [r3, #24]
 800c368:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC2M Bits */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC2M;
 800c36a:	89fb      	ldrh	r3, [r7, #14]
 800c36c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c370:	81fb      	strh	r3, [r7, #14]

  /* Configure The Forced output Mode */
  tmpccmr1 |= (uint16_t)(TIM_ForcedAction << 8);
 800c372:	887b      	ldrh	r3, [r7, #2]
 800c374:	021b      	lsls	r3, r3, #8
 800c376:	b29a      	uxth	r2, r3
 800c378:	89fb      	ldrh	r3, [r7, #14]
 800c37a:	4313      	orrs	r3, r2
 800c37c:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	89fa      	ldrh	r2, [r7, #14]
 800c382:	831a      	strh	r2, [r3, #24]
}
 800c384:	bf00      	nop
 800c386:	3714      	adds	r7, #20
 800c388:	46bd      	mov	sp, r7
 800c38a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c38e:	4770      	bx	lr

0800c390 <TIM_ForcedOC3Config>:
  *            @arg TIM_ForcedAction_Active: Force active level on OC3REF
  *            @arg TIM_ForcedAction_InActive: Force inactive level on OC3REF.
  * @retval None
  */
void TIM_ForcedOC3Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
{
 800c390:	b480      	push	{r7}
 800c392:	b085      	sub	sp, #20
 800c394:	af00      	add	r7, sp, #0
 800c396:	6078      	str	r0, [r7, #4]
 800c398:	460b      	mov	r3, r1
 800c39a:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 800c39c:	2300      	movs	r3, #0
 800c39e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));

  tmpccmr2 = TIMx->CCMR2;
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	8b9b      	ldrh	r3, [r3, #28]
 800c3a4:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC1M Bits */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC3M;
 800c3a6:	89fb      	ldrh	r3, [r7, #14]
 800c3a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c3ac:	81fb      	strh	r3, [r7, #14]

  /* Configure The Forced output Mode */
  tmpccmr2 |= TIM_ForcedAction;
 800c3ae:	89fa      	ldrh	r2, [r7, #14]
 800c3b0:	887b      	ldrh	r3, [r7, #2]
 800c3b2:	4313      	orrs	r3, r2
 800c3b4:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	89fa      	ldrh	r2, [r7, #14]
 800c3ba:	839a      	strh	r2, [r3, #28]
}
 800c3bc:	bf00      	nop
 800c3be:	3714      	adds	r7, #20
 800c3c0:	46bd      	mov	sp, r7
 800c3c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3c6:	4770      	bx	lr

0800c3c8 <TIM_ForcedOC4Config>:
  *            @arg TIM_ForcedAction_Active: Force active level on OC4REF
  *            @arg TIM_ForcedAction_InActive: Force inactive level on OC4REF.
  * @retval None
  */
void TIM_ForcedOC4Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
{
 800c3c8:	b480      	push	{r7}
 800c3ca:	b085      	sub	sp, #20
 800c3cc:	af00      	add	r7, sp, #0
 800c3ce:	6078      	str	r0, [r7, #4]
 800c3d0:	460b      	mov	r3, r1
 800c3d2:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 800c3d4:	2300      	movs	r3, #0
 800c3d6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr2 = TIMx->CCMR2;
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	8b9b      	ldrh	r3, [r3, #28]
 800c3dc:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC2M Bits */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC4M;
 800c3de:	89fb      	ldrh	r3, [r7, #14]
 800c3e0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c3e4:	81fb      	strh	r3, [r7, #14]

  /* Configure The Forced output Mode */
  tmpccmr2 |= (uint16_t)(TIM_ForcedAction << 8);
 800c3e6:	887b      	ldrh	r3, [r7, #2]
 800c3e8:	021b      	lsls	r3, r3, #8
 800c3ea:	b29a      	uxth	r2, r3
 800c3ec:	89fb      	ldrh	r3, [r7, #14]
 800c3ee:	4313      	orrs	r3, r2
 800c3f0:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	89fa      	ldrh	r2, [r7, #14]
 800c3f6:	839a      	strh	r2, [r3, #28]
}
 800c3f8:	bf00      	nop
 800c3fa:	3714      	adds	r7, #20
 800c3fc:	46bd      	mov	sp, r7
 800c3fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c402:	4770      	bx	lr

0800c404 <TIM_OC1PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC1PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 800c404:	b480      	push	{r7}
 800c406:	b085      	sub	sp, #20
 800c408:	af00      	add	r7, sp, #0
 800c40a:	6078      	str	r0, [r7, #4]
 800c40c:	460b      	mov	r3, r1
 800c40e:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 800c410:	2300      	movs	r3, #0
 800c412:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr1 = TIMx->CCMR1;
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	8b1b      	ldrh	r3, [r3, #24]
 800c418:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC1PE Bit */
  tmpccmr1 &= (uint16_t)(~TIM_CCMR1_OC1PE);
 800c41a:	89fb      	ldrh	r3, [r7, #14]
 800c41c:	f023 0308 	bic.w	r3, r3, #8
 800c420:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= TIM_OCPreload;
 800c422:	89fa      	ldrh	r2, [r7, #14]
 800c424:	887b      	ldrh	r3, [r7, #2]
 800c426:	4313      	orrs	r3, r2
 800c428:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	89fa      	ldrh	r2, [r7, #14]
 800c42e:	831a      	strh	r2, [r3, #24]
}
 800c430:	bf00      	nop
 800c432:	3714      	adds	r7, #20
 800c434:	46bd      	mov	sp, r7
 800c436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c43a:	4770      	bx	lr

0800c43c <TIM_OC2PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC2PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 800c43c:	b480      	push	{r7}
 800c43e:	b085      	sub	sp, #20
 800c440:	af00      	add	r7, sp, #0
 800c442:	6078      	str	r0, [r7, #4]
 800c444:	460b      	mov	r3, r1
 800c446:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 800c448:	2300      	movs	r3, #0
 800c44a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr1 = TIMx->CCMR1;
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	8b1b      	ldrh	r3, [r3, #24]
 800c450:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC2PE Bit */
  tmpccmr1 &= (uint16_t)(~TIM_CCMR1_OC2PE);
 800c452:	89fb      	ldrh	r3, [r7, #14]
 800c454:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c458:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= (uint16_t)(TIM_OCPreload << 8);
 800c45a:	887b      	ldrh	r3, [r7, #2]
 800c45c:	021b      	lsls	r3, r3, #8
 800c45e:	b29a      	uxth	r2, r3
 800c460:	89fb      	ldrh	r3, [r7, #14]
 800c462:	4313      	orrs	r3, r2
 800c464:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	89fa      	ldrh	r2, [r7, #14]
 800c46a:	831a      	strh	r2, [r3, #24]
}
 800c46c:	bf00      	nop
 800c46e:	3714      	adds	r7, #20
 800c470:	46bd      	mov	sp, r7
 800c472:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c476:	4770      	bx	lr

0800c478 <TIM_OC3PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC3PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 800c478:	b480      	push	{r7}
 800c47a:	b085      	sub	sp, #20
 800c47c:	af00      	add	r7, sp, #0
 800c47e:	6078      	str	r0, [r7, #4]
 800c480:	460b      	mov	r3, r1
 800c482:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 800c484:	2300      	movs	r3, #0
 800c486:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr2 = TIMx->CCMR2;
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	8b9b      	ldrh	r3, [r3, #28]
 800c48c:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC3PE Bit */
  tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC3PE);
 800c48e:	89fb      	ldrh	r3, [r7, #14]
 800c490:	f023 0308 	bic.w	r3, r3, #8
 800c494:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= TIM_OCPreload;
 800c496:	89fa      	ldrh	r2, [r7, #14]
 800c498:	887b      	ldrh	r3, [r7, #2]
 800c49a:	4313      	orrs	r3, r2
 800c49c:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	89fa      	ldrh	r2, [r7, #14]
 800c4a2:	839a      	strh	r2, [r3, #28]
}
 800c4a4:	bf00      	nop
 800c4a6:	3714      	adds	r7, #20
 800c4a8:	46bd      	mov	sp, r7
 800c4aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ae:	4770      	bx	lr

0800c4b0 <TIM_OC4PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC4PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 800c4b0:	b480      	push	{r7}
 800c4b2:	b085      	sub	sp, #20
 800c4b4:	af00      	add	r7, sp, #0
 800c4b6:	6078      	str	r0, [r7, #4]
 800c4b8:	460b      	mov	r3, r1
 800c4ba:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 800c4bc:	2300      	movs	r3, #0
 800c4be:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr2 = TIMx->CCMR2;
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	8b9b      	ldrh	r3, [r3, #28]
 800c4c4:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC4PE Bit */
  tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC4PE);
 800c4c6:	89fb      	ldrh	r3, [r7, #14]
 800c4c8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c4cc:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= (uint16_t)(TIM_OCPreload << 8);
 800c4ce:	887b      	ldrh	r3, [r7, #2]
 800c4d0:	021b      	lsls	r3, r3, #8
 800c4d2:	b29a      	uxth	r2, r3
 800c4d4:	89fb      	ldrh	r3, [r7, #14]
 800c4d6:	4313      	orrs	r3, r2
 800c4d8:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	89fa      	ldrh	r2, [r7, #14]
 800c4de:	839a      	strh	r2, [r3, #28]
}
 800c4e0:	bf00      	nop
 800c4e2:	3714      	adds	r7, #20
 800c4e4:	46bd      	mov	sp, r7
 800c4e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ea:	4770      	bx	lr

0800c4ec <TIM_OC1FastConfig>:
  *            @arg TIM_OCFast_Enable: TIM output compare fast enable
  *            @arg TIM_OCFast_Disable: TIM output compare fast disable
  * @retval None
  */
void TIM_OC1FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
{
 800c4ec:	b480      	push	{r7}
 800c4ee:	b085      	sub	sp, #20
 800c4f0:	af00      	add	r7, sp, #0
 800c4f2:	6078      	str	r0, [r7, #4]
 800c4f4:	460b      	mov	r3, r1
 800c4f6:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 800c4f8:	2300      	movs	r3, #0
 800c4fa:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	8b1b      	ldrh	r3, [r3, #24]
 800c500:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC1FE Bit */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC1FE;
 800c502:	89fb      	ldrh	r3, [r7, #14]
 800c504:	f023 0304 	bic.w	r3, r3, #4
 800c508:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr1 |= TIM_OCFast;
 800c50a:	89fa      	ldrh	r2, [r7, #14]
 800c50c:	887b      	ldrh	r3, [r7, #2]
 800c50e:	4313      	orrs	r3, r2
 800c510:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	89fa      	ldrh	r2, [r7, #14]
 800c516:	831a      	strh	r2, [r3, #24]
}
 800c518:	bf00      	nop
 800c51a:	3714      	adds	r7, #20
 800c51c:	46bd      	mov	sp, r7
 800c51e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c522:	4770      	bx	lr

0800c524 <TIM_OC2FastConfig>:
  *            @arg TIM_OCFast_Enable: TIM output compare fast enable
  *            @arg TIM_OCFast_Disable: TIM output compare fast disable
  * @retval None
  */
void TIM_OC2FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
{
 800c524:	b480      	push	{r7}
 800c526:	b085      	sub	sp, #20
 800c528:	af00      	add	r7, sp, #0
 800c52a:	6078      	str	r0, [r7, #4]
 800c52c:	460b      	mov	r3, r1
 800c52e:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 800c530:	2300      	movs	r3, #0
 800c532:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	8b1b      	ldrh	r3, [r3, #24]
 800c538:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC2FE Bit */
  tmpccmr1 &= (uint16_t)(~TIM_CCMR1_OC2FE);
 800c53a:	89fb      	ldrh	r3, [r7, #14]
 800c53c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c540:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr1 |= (uint16_t)(TIM_OCFast << 8);
 800c542:	887b      	ldrh	r3, [r7, #2]
 800c544:	021b      	lsls	r3, r3, #8
 800c546:	b29a      	uxth	r2, r3
 800c548:	89fb      	ldrh	r3, [r7, #14]
 800c54a:	4313      	orrs	r3, r2
 800c54c:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	89fa      	ldrh	r2, [r7, #14]
 800c552:	831a      	strh	r2, [r3, #24]
}
 800c554:	bf00      	nop
 800c556:	3714      	adds	r7, #20
 800c558:	46bd      	mov	sp, r7
 800c55a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c55e:	4770      	bx	lr

0800c560 <TIM_OC3FastConfig>:
  *            @arg TIM_OCFast_Enable: TIM output compare fast enable
  *            @arg TIM_OCFast_Disable: TIM output compare fast disable
  * @retval None
  */
void TIM_OC3FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
{
 800c560:	b480      	push	{r7}
 800c562:	b085      	sub	sp, #20
 800c564:	af00      	add	r7, sp, #0
 800c566:	6078      	str	r0, [r7, #4]
 800c568:	460b      	mov	r3, r1
 800c56a:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 800c56c:	2300      	movs	r3, #0
 800c56e:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = TIMx->CCMR2;
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	8b9b      	ldrh	r3, [r3, #28]
 800c574:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC3FE Bit */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC3FE;
 800c576:	89fb      	ldrh	r3, [r7, #14]
 800c578:	f023 0304 	bic.w	r3, r3, #4
 800c57c:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr2 |= TIM_OCFast;
 800c57e:	89fa      	ldrh	r2, [r7, #14]
 800c580:	887b      	ldrh	r3, [r7, #2]
 800c582:	4313      	orrs	r3, r2
 800c584:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmr2;
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	89fa      	ldrh	r2, [r7, #14]
 800c58a:	839a      	strh	r2, [r3, #28]
}
 800c58c:	bf00      	nop
 800c58e:	3714      	adds	r7, #20
 800c590:	46bd      	mov	sp, r7
 800c592:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c596:	4770      	bx	lr

0800c598 <TIM_OC4FastConfig>:
  *            @arg TIM_OCFast_Enable: TIM output compare fast enable
  *            @arg TIM_OCFast_Disable: TIM output compare fast disable
  * @retval None
  */
void TIM_OC4FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
{
 800c598:	b480      	push	{r7}
 800c59a:	b085      	sub	sp, #20
 800c59c:	af00      	add	r7, sp, #0
 800c59e:	6078      	str	r0, [r7, #4]
 800c5a0:	460b      	mov	r3, r1
 800c5a2:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 800c5a4:	2300      	movs	r3, #0
 800c5a6:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = TIMx->CCMR2;
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	8b9b      	ldrh	r3, [r3, #28]
 800c5ac:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC4FE Bit */
  tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC4FE);
 800c5ae:	89fb      	ldrh	r3, [r7, #14]
 800c5b0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c5b4:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr2 |= (uint16_t)(TIM_OCFast << 8);
 800c5b6:	887b      	ldrh	r3, [r7, #2]
 800c5b8:	021b      	lsls	r3, r3, #8
 800c5ba:	b29a      	uxth	r2, r3
 800c5bc:	89fb      	ldrh	r3, [r7, #14]
 800c5be:	4313      	orrs	r3, r2
 800c5c0:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmr2;
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	89fa      	ldrh	r2, [r7, #14]
 800c5c6:	839a      	strh	r2, [r3, #28]
}
 800c5c8:	bf00      	nop
 800c5ca:	3714      	adds	r7, #20
 800c5cc:	46bd      	mov	sp, r7
 800c5ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5d2:	4770      	bx	lr

0800c5d4 <TIM_ClearOC1Ref>:
  *            @arg TIM_OCClear_Enable: TIM Output clear enable
  *            @arg TIM_OCClear_Disable: TIM Output clear disable
  * @retval None
  */
void TIM_ClearOC1Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
{
 800c5d4:	b480      	push	{r7}
 800c5d6:	b085      	sub	sp, #20
 800c5d8:	af00      	add	r7, sp, #0
 800c5da:	6078      	str	r0, [r7, #4]
 800c5dc:	460b      	mov	r3, r1
 800c5de:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 800c5e0:	2300      	movs	r3, #0
 800c5e2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr1 = TIMx->CCMR1;
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	8b1b      	ldrh	r3, [r3, #24]
 800c5e8:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC1CE Bit */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC1CE;
 800c5ea:	89fb      	ldrh	r3, [r7, #14]
 800c5ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c5f0:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr1 |= TIM_OCClear;
 800c5f2:	89fa      	ldrh	r2, [r7, #14]
 800c5f4:	887b      	ldrh	r3, [r7, #2]
 800c5f6:	4313      	orrs	r3, r2
 800c5f8:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	89fa      	ldrh	r2, [r7, #14]
 800c5fe:	831a      	strh	r2, [r3, #24]
}
 800c600:	bf00      	nop
 800c602:	3714      	adds	r7, #20
 800c604:	46bd      	mov	sp, r7
 800c606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c60a:	4770      	bx	lr

0800c60c <TIM_ClearOC2Ref>:
  *            @arg TIM_OCClear_Enable: TIM Output clear enable
  *            @arg TIM_OCClear_Disable: TIM Output clear disable
  * @retval None
  */
void TIM_ClearOC2Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
{
 800c60c:	b480      	push	{r7}
 800c60e:	b085      	sub	sp, #20
 800c610:	af00      	add	r7, sp, #0
 800c612:	6078      	str	r0, [r7, #4]
 800c614:	460b      	mov	r3, r1
 800c616:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 800c618:	2300      	movs	r3, #0
 800c61a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr1 = TIMx->CCMR1;
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	8b1b      	ldrh	r3, [r3, #24]
 800c620:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC2CE Bit */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC2CE;
 800c622:	89fb      	ldrh	r3, [r7, #14]
 800c624:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800c628:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr1 |= (uint16_t)(TIM_OCClear << 8);
 800c62a:	887b      	ldrh	r3, [r7, #2]
 800c62c:	021b      	lsls	r3, r3, #8
 800c62e:	b29a      	uxth	r2, r3
 800c630:	89fb      	ldrh	r3, [r7, #14]
 800c632:	4313      	orrs	r3, r2
 800c634:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	89fa      	ldrh	r2, [r7, #14]
 800c63a:	831a      	strh	r2, [r3, #24]
}
 800c63c:	bf00      	nop
 800c63e:	3714      	adds	r7, #20
 800c640:	46bd      	mov	sp, r7
 800c642:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c646:	4770      	bx	lr

0800c648 <TIM_ClearOC3Ref>:
  *            @arg TIM_OCClear_Enable: TIM Output clear enable
  *            @arg TIM_OCClear_Disable: TIM Output clear disable
  * @retval None
  */
void TIM_ClearOC3Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
{
 800c648:	b480      	push	{r7}
 800c64a:	b085      	sub	sp, #20
 800c64c:	af00      	add	r7, sp, #0
 800c64e:	6078      	str	r0, [r7, #4]
 800c650:	460b      	mov	r3, r1
 800c652:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 800c654:	2300      	movs	r3, #0
 800c656:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr2 = TIMx->CCMR2;
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	8b9b      	ldrh	r3, [r3, #28]
 800c65c:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC3CE Bit */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC3CE;
 800c65e:	89fb      	ldrh	r3, [r7, #14]
 800c660:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c664:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr2 |= TIM_OCClear;
 800c666:	89fa      	ldrh	r2, [r7, #14]
 800c668:	887b      	ldrh	r3, [r7, #2]
 800c66a:	4313      	orrs	r3, r2
 800c66c:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	89fa      	ldrh	r2, [r7, #14]
 800c672:	839a      	strh	r2, [r3, #28]
}
 800c674:	bf00      	nop
 800c676:	3714      	adds	r7, #20
 800c678:	46bd      	mov	sp, r7
 800c67a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c67e:	4770      	bx	lr

0800c680 <TIM_ClearOC4Ref>:
  *            @arg TIM_OCClear_Enable: TIM Output clear enable
  *            @arg TIM_OCClear_Disable: TIM Output clear disable
  * @retval None
  */
void TIM_ClearOC4Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
{
 800c680:	b480      	push	{r7}
 800c682:	b085      	sub	sp, #20
 800c684:	af00      	add	r7, sp, #0
 800c686:	6078      	str	r0, [r7, #4]
 800c688:	460b      	mov	r3, r1
 800c68a:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 800c68c:	2300      	movs	r3, #0
 800c68e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr2 = TIMx->CCMR2;
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	8b9b      	ldrh	r3, [r3, #28]
 800c694:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC4CE Bit */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC4CE;
 800c696:	89fb      	ldrh	r3, [r7, #14]
 800c698:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800c69c:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr2 |= (uint16_t)(TIM_OCClear << 8);
 800c69e:	887b      	ldrh	r3, [r7, #2]
 800c6a0:	021b      	lsls	r3, r3, #8
 800c6a2:	b29a      	uxth	r2, r3
 800c6a4:	89fb      	ldrh	r3, [r7, #14]
 800c6a6:	4313      	orrs	r3, r2
 800c6a8:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	89fa      	ldrh	r2, [r7, #14]
 800c6ae:	839a      	strh	r2, [r3, #28]
}
 800c6b0:	bf00      	nop
 800c6b2:	3714      	adds	r7, #20
 800c6b4:	46bd      	mov	sp, r7
 800c6b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6ba:	4770      	bx	lr

0800c6bc <TIM_OC1PolarityConfig>:
  *            @arg TIM_OCPolarity_High: Output Compare active high
  *            @arg TIM_OCPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC1PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
{
 800c6bc:	b480      	push	{r7}
 800c6be:	b085      	sub	sp, #20
 800c6c0:	af00      	add	r7, sp, #0
 800c6c2:	6078      	str	r0, [r7, #4]
 800c6c4:	460b      	mov	r3, r1
 800c6c6:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
 800c6c8:	2300      	movs	r3, #0
 800c6ca:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	8c1b      	ldrh	r3, [r3, #32]
 800c6d0:	81fb      	strh	r3, [r7, #14]

  /* Set or Reset the CC1P Bit */
  tmpccer &= (uint16_t)(~TIM_CCER_CC1P);
 800c6d2:	89fb      	ldrh	r3, [r7, #14]
 800c6d4:	f023 0302 	bic.w	r3, r3, #2
 800c6d8:	81fb      	strh	r3, [r7, #14]
  tmpccer |= TIM_OCPolarity;
 800c6da:	89fa      	ldrh	r2, [r7, #14]
 800c6dc:	887b      	ldrh	r3, [r7, #2]
 800c6de:	4313      	orrs	r3, r2
 800c6e0:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	89fa      	ldrh	r2, [r7, #14]
 800c6e6:	841a      	strh	r2, [r3, #32]
}
 800c6e8:	bf00      	nop
 800c6ea:	3714      	adds	r7, #20
 800c6ec:	46bd      	mov	sp, r7
 800c6ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6f2:	4770      	bx	lr

0800c6f4 <TIM_OC1NPolarityConfig>:
  *            @arg TIM_OCNPolarity_High: Output Compare active high
  *            @arg TIM_OCNPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC1NPolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCNPolarity)
{
 800c6f4:	b480      	push	{r7}
 800c6f6:	b085      	sub	sp, #20
 800c6f8:	af00      	add	r7, sp, #0
 800c6fa:	6078      	str	r0, [r7, #4]
 800c6fc:	460b      	mov	r3, r1
 800c6fe:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
 800c700:	2300      	movs	r3, #0
 800c702:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
   
  tmpccer = TIMx->CCER;
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	8c1b      	ldrh	r3, [r3, #32]
 800c708:	81fb      	strh	r3, [r7, #14]

  /* Set or Reset the CC1NP Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC1NP;
 800c70a:	89fb      	ldrh	r3, [r7, #14]
 800c70c:	f023 0308 	bic.w	r3, r3, #8
 800c710:	81fb      	strh	r3, [r7, #14]
  tmpccer |= TIM_OCNPolarity;
 800c712:	89fa      	ldrh	r2, [r7, #14]
 800c714:	887b      	ldrh	r3, [r7, #2]
 800c716:	4313      	orrs	r3, r2
 800c718:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	89fa      	ldrh	r2, [r7, #14]
 800c71e:	841a      	strh	r2, [r3, #32]
}
 800c720:	bf00      	nop
 800c722:	3714      	adds	r7, #20
 800c724:	46bd      	mov	sp, r7
 800c726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c72a:	4770      	bx	lr

0800c72c <TIM_OC2PolarityConfig>:
  *            @arg TIM_OCPolarity_High: Output Compare active high
  *            @arg TIM_OCPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC2PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
{
 800c72c:	b480      	push	{r7}
 800c72e:	b085      	sub	sp, #20
 800c730:	af00      	add	r7, sp, #0
 800c732:	6078      	str	r0, [r7, #4]
 800c734:	460b      	mov	r3, r1
 800c736:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
 800c738:	2300      	movs	r3, #0
 800c73a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	8c1b      	ldrh	r3, [r3, #32]
 800c740:	81fb      	strh	r3, [r7, #14]

  /* Set or Reset the CC2P Bit */
  tmpccer &= (uint16_t)(~TIM_CCER_CC2P);
 800c742:	89fb      	ldrh	r3, [r7, #14]
 800c744:	f023 0320 	bic.w	r3, r3, #32
 800c748:	81fb      	strh	r3, [r7, #14]
  tmpccer |= (uint16_t)(TIM_OCPolarity << 4);
 800c74a:	887b      	ldrh	r3, [r7, #2]
 800c74c:	011b      	lsls	r3, r3, #4
 800c74e:	b29a      	uxth	r2, r3
 800c750:	89fb      	ldrh	r3, [r7, #14]
 800c752:	4313      	orrs	r3, r2
 800c754:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	89fa      	ldrh	r2, [r7, #14]
 800c75a:	841a      	strh	r2, [r3, #32]
}
 800c75c:	bf00      	nop
 800c75e:	3714      	adds	r7, #20
 800c760:	46bd      	mov	sp, r7
 800c762:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c766:	4770      	bx	lr

0800c768 <TIM_OC2NPolarityConfig>:
  *            @arg TIM_OCNPolarity_High: Output Compare active high
  *            @arg TIM_OCNPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC2NPolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCNPolarity)
{
 800c768:	b480      	push	{r7}
 800c76a:	b085      	sub	sp, #20
 800c76c:	af00      	add	r7, sp, #0
 800c76e:	6078      	str	r0, [r7, #4]
 800c770:	460b      	mov	r3, r1
 800c772:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
 800c774:	2300      	movs	r3, #0
 800c776:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
  
  tmpccer = TIMx->CCER;
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	8c1b      	ldrh	r3, [r3, #32]
 800c77c:	81fb      	strh	r3, [r7, #14]

  /* Set or Reset the CC2NP Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC2NP;
 800c77e:	89fb      	ldrh	r3, [r7, #14]
 800c780:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c784:	81fb      	strh	r3, [r7, #14]
  tmpccer |= (uint16_t)(TIM_OCNPolarity << 4);
 800c786:	887b      	ldrh	r3, [r7, #2]
 800c788:	011b      	lsls	r3, r3, #4
 800c78a:	b29a      	uxth	r2, r3
 800c78c:	89fb      	ldrh	r3, [r7, #14]
 800c78e:	4313      	orrs	r3, r2
 800c790:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	89fa      	ldrh	r2, [r7, #14]
 800c796:	841a      	strh	r2, [r3, #32]
}
 800c798:	bf00      	nop
 800c79a:	3714      	adds	r7, #20
 800c79c:	46bd      	mov	sp, r7
 800c79e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7a2:	4770      	bx	lr

0800c7a4 <TIM_OC3PolarityConfig>:
  *            @arg TIM_OCPolarity_High: Output Compare active high
  *            @arg TIM_OCPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC3PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
{
 800c7a4:	b480      	push	{r7}
 800c7a6:	b085      	sub	sp, #20
 800c7a8:	af00      	add	r7, sp, #0
 800c7aa:	6078      	str	r0, [r7, #4]
 800c7ac:	460b      	mov	r3, r1
 800c7ae:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
 800c7b0:	2300      	movs	r3, #0
 800c7b2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	8c1b      	ldrh	r3, [r3, #32]
 800c7b8:	81fb      	strh	r3, [r7, #14]

  /* Set or Reset the CC3P Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
 800c7ba:	89fb      	ldrh	r3, [r7, #14]
 800c7bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c7c0:	81fb      	strh	r3, [r7, #14]
  tmpccer |= (uint16_t)(TIM_OCPolarity << 8);
 800c7c2:	887b      	ldrh	r3, [r7, #2]
 800c7c4:	021b      	lsls	r3, r3, #8
 800c7c6:	b29a      	uxth	r2, r3
 800c7c8:	89fb      	ldrh	r3, [r7, #14]
 800c7ca:	4313      	orrs	r3, r2
 800c7cc:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	89fa      	ldrh	r2, [r7, #14]
 800c7d2:	841a      	strh	r2, [r3, #32]
}
 800c7d4:	bf00      	nop
 800c7d6:	3714      	adds	r7, #20
 800c7d8:	46bd      	mov	sp, r7
 800c7da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7de:	4770      	bx	lr

0800c7e0 <TIM_OC3NPolarityConfig>:
  *            @arg TIM_OCNPolarity_High: Output Compare active high
  *            @arg TIM_OCNPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC3NPolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCNPolarity)
{
 800c7e0:	b480      	push	{r7}
 800c7e2:	b085      	sub	sp, #20
 800c7e4:	af00      	add	r7, sp, #0
 800c7e6:	6078      	str	r0, [r7, #4]
 800c7e8:	460b      	mov	r3, r1
 800c7ea:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
 800c7ec:	2300      	movs	r3, #0
 800c7ee:	81fb      	strh	r3, [r7, #14]
 
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
    
  tmpccer = TIMx->CCER;
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	8c1b      	ldrh	r3, [r3, #32]
 800c7f4:	81fb      	strh	r3, [r7, #14]

  /* Set or Reset the CC3NP Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC3NP;
 800c7f6:	89fb      	ldrh	r3, [r7, #14]
 800c7f8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c7fc:	81fb      	strh	r3, [r7, #14]
  tmpccer |= (uint16_t)(TIM_OCNPolarity << 8);
 800c7fe:	887b      	ldrh	r3, [r7, #2]
 800c800:	021b      	lsls	r3, r3, #8
 800c802:	b29a      	uxth	r2, r3
 800c804:	89fb      	ldrh	r3, [r7, #14]
 800c806:	4313      	orrs	r3, r2
 800c808:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	89fa      	ldrh	r2, [r7, #14]
 800c80e:	841a      	strh	r2, [r3, #32]
}
 800c810:	bf00      	nop
 800c812:	3714      	adds	r7, #20
 800c814:	46bd      	mov	sp, r7
 800c816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c81a:	4770      	bx	lr

0800c81c <TIM_OC4PolarityConfig>:
  *            @arg TIM_OCPolarity_High: Output Compare active high
  *            @arg TIM_OCPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC4PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
{
 800c81c:	b480      	push	{r7}
 800c81e:	b085      	sub	sp, #20
 800c820:	af00      	add	r7, sp, #0
 800c822:	6078      	str	r0, [r7, #4]
 800c824:	460b      	mov	r3, r1
 800c826:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
 800c828:	2300      	movs	r3, #0
 800c82a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	8c1b      	ldrh	r3, [r3, #32]
 800c830:	81fb      	strh	r3, [r7, #14]

  /* Set or Reset the CC4P Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
 800c832:	89fb      	ldrh	r3, [r7, #14]
 800c834:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c838:	81fb      	strh	r3, [r7, #14]
  tmpccer |= (uint16_t)(TIM_OCPolarity << 12);
 800c83a:	887b      	ldrh	r3, [r7, #2]
 800c83c:	031b      	lsls	r3, r3, #12
 800c83e:	b29a      	uxth	r2, r3
 800c840:	89fb      	ldrh	r3, [r7, #14]
 800c842:	4313      	orrs	r3, r2
 800c844:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	89fa      	ldrh	r2, [r7, #14]
 800c84a:	841a      	strh	r2, [r3, #32]
}
 800c84c:	bf00      	nop
 800c84e:	3714      	adds	r7, #20
 800c850:	46bd      	mov	sp, r7
 800c852:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c856:	4770      	bx	lr

0800c858 <TIM_CCxCmd>:
  * @param  TIM_CCx: specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_Enable or TIM_CCx_Disable. 
  * @retval None
  */
void TIM_CCxCmd(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_CCx)
{
 800c858:	b480      	push	{r7}
 800c85a:	b085      	sub	sp, #20
 800c85c:	af00      	add	r7, sp, #0
 800c85e:	6078      	str	r0, [r7, #4]
 800c860:	460b      	mov	r3, r1
 800c862:	807b      	strh	r3, [r7, #2]
 800c864:	4613      	mov	r3, r2
 800c866:	803b      	strh	r3, [r7, #0]
  uint16_t tmp = 0;
 800c868:	2300      	movs	r3, #0
 800c86a:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx)); 
  assert_param(IS_TIM_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_CCX(TIM_CCx));

  tmp = CCER_CCE_SET << TIM_Channel;
 800c86c:	887b      	ldrh	r3, [r7, #2]
 800c86e:	2201      	movs	r2, #1
 800c870:	fa02 f303 	lsl.w	r3, r2, r3
 800c874:	81fb      	strh	r3, [r7, #14]

  /* Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t)~ tmp;
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	8c1b      	ldrh	r3, [r3, #32]
 800c87a:	b29a      	uxth	r2, r3
 800c87c:	89fb      	ldrh	r3, [r7, #14]
 800c87e:	43db      	mvns	r3, r3
 800c880:	b29b      	uxth	r3, r3
 800c882:	4013      	ands	r3, r2
 800c884:	b29a      	uxth	r2, r3
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	841a      	strh	r2, [r3, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |=  (uint16_t)(TIM_CCx << TIM_Channel);
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	8c1b      	ldrh	r3, [r3, #32]
 800c88e:	b29a      	uxth	r2, r3
 800c890:	8839      	ldrh	r1, [r7, #0]
 800c892:	887b      	ldrh	r3, [r7, #2]
 800c894:	fa01 f303 	lsl.w	r3, r1, r3
 800c898:	b29b      	uxth	r3, r3
 800c89a:	4313      	orrs	r3, r2
 800c89c:	b29a      	uxth	r2, r3
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	841a      	strh	r2, [r3, #32]
}
 800c8a2:	bf00      	nop
 800c8a4:	3714      	adds	r7, #20
 800c8a6:	46bd      	mov	sp, r7
 800c8a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8ac:	4770      	bx	lr

0800c8ae <TIM_CCxNCmd>:
  * @param  TIM_CCxN: specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_Enable or TIM_CCxN_Disable. 
  * @retval None
  */
void TIM_CCxNCmd(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_CCxN)
{
 800c8ae:	b480      	push	{r7}
 800c8b0:	b085      	sub	sp, #20
 800c8b2:	af00      	add	r7, sp, #0
 800c8b4:	6078      	str	r0, [r7, #4]
 800c8b6:	460b      	mov	r3, r1
 800c8b8:	807b      	strh	r3, [r7, #2]
 800c8ba:	4613      	mov	r3, r2
 800c8bc:	803b      	strh	r3, [r7, #0]
  uint16_t tmp = 0;
 800c8be:	2300      	movs	r3, #0
 800c8c0:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_COMPLEMENTARY_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_CCXN(TIM_CCxN));

  tmp = CCER_CCNE_SET << TIM_Channel;
 800c8c2:	887b      	ldrh	r3, [r7, #2]
 800c8c4:	2204      	movs	r2, #4
 800c8c6:	fa02 f303 	lsl.w	r3, r2, r3
 800c8ca:	81fb      	strh	r3, [r7, #14]

  /* Reset the CCxNE Bit */
  TIMx->CCER &= (uint16_t) ~tmp;
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	8c1b      	ldrh	r3, [r3, #32]
 800c8d0:	b29a      	uxth	r2, r3
 800c8d2:	89fb      	ldrh	r3, [r7, #14]
 800c8d4:	43db      	mvns	r3, r3
 800c8d6:	b29b      	uxth	r3, r3
 800c8d8:	4013      	ands	r3, r2
 800c8da:	b29a      	uxth	r2, r3
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	841a      	strh	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */ 
  TIMx->CCER |=  (uint16_t)(TIM_CCxN << TIM_Channel);
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	8c1b      	ldrh	r3, [r3, #32]
 800c8e4:	b29a      	uxth	r2, r3
 800c8e6:	8839      	ldrh	r1, [r7, #0]
 800c8e8:	887b      	ldrh	r3, [r7, #2]
 800c8ea:	fa01 f303 	lsl.w	r3, r1, r3
 800c8ee:	b29b      	uxth	r3, r3
 800c8f0:	4313      	orrs	r3, r2
 800c8f2:	b29a      	uxth	r2, r3
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	841a      	strh	r2, [r3, #32]
}
 800c8f8:	bf00      	nop
 800c8fa:	3714      	adds	r7, #20
 800c8fc:	46bd      	mov	sp, r7
 800c8fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c902:	4770      	bx	lr

0800c904 <TIM_ICInit>:
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_ICInit(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 800c904:	b580      	push	{r7, lr}
 800c906:	b082      	sub	sp, #8
 800c908:	af00      	add	r7, sp, #0
 800c90a:	6078      	str	r0, [r7, #4]
 800c90c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_IC_POLARITY(TIM_ICInitStruct->TIM_ICPolarity));
  assert_param(IS_TIM_IC_SELECTION(TIM_ICInitStruct->TIM_ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICInitStruct->TIM_ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(TIM_ICInitStruct->TIM_ICFilter));
  
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 800c90e:	683b      	ldr	r3, [r7, #0]
 800c910:	881b      	ldrh	r3, [r3, #0]
 800c912:	2b00      	cmp	r3, #0
 800c914:	d10f      	bne.n	800c936 <TIM_ICInit+0x32>
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 800c916:	683b      	ldr	r3, [r7, #0]
 800c918:	8859      	ldrh	r1, [r3, #2]
 800c91a:	683b      	ldr	r3, [r7, #0]
 800c91c:	889a      	ldrh	r2, [r3, #4]
 800c91e:	683b      	ldr	r3, [r7, #0]
 800c920:	891b      	ldrh	r3, [r3, #8]
 800c922:	6878      	ldr	r0, [r7, #4]
 800c924:	f000 fcb7 	bl	800d296 <TI1_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 800c928:	683b      	ldr	r3, [r7, #0]
 800c92a:	88db      	ldrh	r3, [r3, #6]
 800c92c:	4619      	mov	r1, r3
 800c92e:	6878      	ldr	r0, [r7, #4]
 800c930:	f000 f8e1 	bl	800caf6 <TIM_SetIC1Prescaler>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
}
 800c934:	e036      	b.n	800c9a4 <TIM_ICInit+0xa0>
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_2)
 800c936:	683b      	ldr	r3, [r7, #0]
 800c938:	881b      	ldrh	r3, [r3, #0]
 800c93a:	2b04      	cmp	r3, #4
 800c93c:	d10f      	bne.n	800c95e <TIM_ICInit+0x5a>
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 800c93e:	683b      	ldr	r3, [r7, #0]
 800c940:	8859      	ldrh	r1, [r3, #2]
 800c942:	683b      	ldr	r3, [r7, #0]
 800c944:	889a      	ldrh	r2, [r3, #4]
 800c946:	683b      	ldr	r3, [r7, #0]
 800c948:	891b      	ldrh	r3, [r3, #8]
 800c94a:	6878      	ldr	r0, [r7, #4]
 800c94c:	f000 fce6 	bl	800d31c <TI2_Config>
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 800c950:	683b      	ldr	r3, [r7, #0]
 800c952:	88db      	ldrh	r3, [r3, #6]
 800c954:	4619      	mov	r1, r3
 800c956:	6878      	ldr	r0, [r7, #4]
 800c958:	f000 f8e9 	bl	800cb2e <TIM_SetIC2Prescaler>
}
 800c95c:	e022      	b.n	800c9a4 <TIM_ICInit+0xa0>
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_3)
 800c95e:	683b      	ldr	r3, [r7, #0]
 800c960:	881b      	ldrh	r3, [r3, #0]
 800c962:	2b08      	cmp	r3, #8
 800c964:	d10f      	bne.n	800c986 <TIM_ICInit+0x82>
    TI3_Config(TIMx,  TIM_ICInitStruct->TIM_ICPolarity,
 800c966:	683b      	ldr	r3, [r7, #0]
 800c968:	8859      	ldrh	r1, [r3, #2]
 800c96a:	683b      	ldr	r3, [r7, #0]
 800c96c:	889a      	ldrh	r2, [r3, #4]
 800c96e:	683b      	ldr	r3, [r7, #0]
 800c970:	891b      	ldrh	r3, [r3, #8]
 800c972:	6878      	ldr	r0, [r7, #4]
 800c974:	f000 fd1f 	bl	800d3b6 <TI3_Config>
    TIM_SetIC3Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 800c978:	683b      	ldr	r3, [r7, #0]
 800c97a:	88db      	ldrh	r3, [r3, #6]
 800c97c:	4619      	mov	r1, r3
 800c97e:	6878      	ldr	r0, [r7, #4]
 800c980:	f000 f8f3 	bl	800cb6a <TIM_SetIC3Prescaler>
}
 800c984:	e00e      	b.n	800c9a4 <TIM_ICInit+0xa0>
    TI4_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 800c986:	683b      	ldr	r3, [r7, #0]
 800c988:	8859      	ldrh	r1, [r3, #2]
 800c98a:	683b      	ldr	r3, [r7, #0]
 800c98c:	889a      	ldrh	r2, [r3, #4]
 800c98e:	683b      	ldr	r3, [r7, #0]
 800c990:	891b      	ldrh	r3, [r3, #8]
 800c992:	6878      	ldr	r0, [r7, #4]
 800c994:	f000 fd57 	bl	800d446 <TI4_Config>
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 800c998:	683b      	ldr	r3, [r7, #0]
 800c99a:	88db      	ldrh	r3, [r3, #6]
 800c99c:	4619      	mov	r1, r3
 800c99e:	6878      	ldr	r0, [r7, #4]
 800c9a0:	f000 f8ff 	bl	800cba2 <TIM_SetIC4Prescaler>
}
 800c9a4:	bf00      	nop
 800c9a6:	3708      	adds	r7, #8
 800c9a8:	46bd      	mov	sp, r7
 800c9aa:	bd80      	pop	{r7, pc}

0800c9ac <TIM_ICStructInit>:
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void TIM_ICStructInit(TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 800c9ac:	b480      	push	{r7}
 800c9ae:	b083      	sub	sp, #12
 800c9b0:	af00      	add	r7, sp, #0
 800c9b2:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_ICInitStruct->TIM_Channel = TIM_Channel_1;
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	2200      	movs	r2, #0
 800c9b8:	801a      	strh	r2, [r3, #0]
  TIM_ICInitStruct->TIM_ICPolarity = TIM_ICPolarity_Rising;
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	2200      	movs	r2, #0
 800c9be:	805a      	strh	r2, [r3, #2]
  TIM_ICInitStruct->TIM_ICSelection = TIM_ICSelection_DirectTI;
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	2201      	movs	r2, #1
 800c9c4:	809a      	strh	r2, [r3, #4]
  TIM_ICInitStruct->TIM_ICPrescaler = TIM_ICPSC_DIV1;
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	2200      	movs	r2, #0
 800c9ca:	80da      	strh	r2, [r3, #6]
  TIM_ICInitStruct->TIM_ICFilter = 0x00;
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	2200      	movs	r2, #0
 800c9d0:	811a      	strh	r2, [r3, #8]
}
 800c9d2:	bf00      	nop
 800c9d4:	370c      	adds	r7, #12
 800c9d6:	46bd      	mov	sp, r7
 800c9d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9dc:	4770      	bx	lr

0800c9de <TIM_PWMIConfig>:
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_PWMIConfig(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 800c9de:	b580      	push	{r7, lr}
 800c9e0:	b084      	sub	sp, #16
 800c9e2:	af00      	add	r7, sp, #0
 800c9e4:	6078      	str	r0, [r7, #4]
 800c9e6:	6039      	str	r1, [r7, #0]
  uint16_t icoppositepolarity = TIM_ICPolarity_Rising;
 800c9e8:	2300      	movs	r3, #0
 800c9ea:	81fb      	strh	r3, [r7, #14]
  uint16_t icoppositeselection = TIM_ICSelection_DirectTI;
 800c9ec:	2301      	movs	r3, #1
 800c9ee:	81bb      	strh	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Select the Opposite Input Polarity */
  if (TIM_ICInitStruct->TIM_ICPolarity == TIM_ICPolarity_Rising)
 800c9f0:	683b      	ldr	r3, [r7, #0]
 800c9f2:	885b      	ldrh	r3, [r3, #2]
 800c9f4:	2b00      	cmp	r3, #0
 800c9f6:	d102      	bne.n	800c9fe <TIM_PWMIConfig+0x20>
  {
    icoppositepolarity = TIM_ICPolarity_Falling;
 800c9f8:	2302      	movs	r3, #2
 800c9fa:	81fb      	strh	r3, [r7, #14]
 800c9fc:	e001      	b.n	800ca02 <TIM_PWMIConfig+0x24>
  }
  else
  {
    icoppositepolarity = TIM_ICPolarity_Rising;
 800c9fe:	2300      	movs	r3, #0
 800ca00:	81fb      	strh	r3, [r7, #14]
  }
  /* Select the Opposite Input */
  if (TIM_ICInitStruct->TIM_ICSelection == TIM_ICSelection_DirectTI)
 800ca02:	683b      	ldr	r3, [r7, #0]
 800ca04:	889b      	ldrh	r3, [r3, #4]
 800ca06:	2b01      	cmp	r3, #1
 800ca08:	d102      	bne.n	800ca10 <TIM_PWMIConfig+0x32>
  {
    icoppositeselection = TIM_ICSelection_IndirectTI;
 800ca0a:	2302      	movs	r3, #2
 800ca0c:	81bb      	strh	r3, [r7, #12]
 800ca0e:	e001      	b.n	800ca14 <TIM_PWMIConfig+0x36>
  }
  else
  {
    icoppositeselection = TIM_ICSelection_DirectTI;
 800ca10:	2301      	movs	r3, #1
 800ca12:	81bb      	strh	r3, [r7, #12]
  }
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 800ca14:	683b      	ldr	r3, [r7, #0]
 800ca16:	881b      	ldrh	r3, [r3, #0]
 800ca18:	2b00      	cmp	r3, #0
 800ca1a:	d11c      	bne.n	800ca56 <TIM_PWMIConfig+0x78>
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
 800ca1c:	683b      	ldr	r3, [r7, #0]
 800ca1e:	8859      	ldrh	r1, [r3, #2]
 800ca20:	683b      	ldr	r3, [r7, #0]
 800ca22:	889a      	ldrh	r2, [r3, #4]
 800ca24:	683b      	ldr	r3, [r7, #0]
 800ca26:	891b      	ldrh	r3, [r3, #8]
 800ca28:	6878      	ldr	r0, [r7, #4]
 800ca2a:	f000 fc34 	bl	800d296 <TI1_Config>
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 800ca2e:	683b      	ldr	r3, [r7, #0]
 800ca30:	88db      	ldrh	r3, [r3, #6]
 800ca32:	4619      	mov	r1, r3
 800ca34:	6878      	ldr	r0, [r7, #4]
 800ca36:	f000 f85e 	bl	800caf6 <TIM_SetIC1Prescaler>
    /* TI2 Configuration */
    TI2_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
 800ca3a:	683b      	ldr	r3, [r7, #0]
 800ca3c:	891b      	ldrh	r3, [r3, #8]
 800ca3e:	89ba      	ldrh	r2, [r7, #12]
 800ca40:	89f9      	ldrh	r1, [r7, #14]
 800ca42:	6878      	ldr	r0, [r7, #4]
 800ca44:	f000 fc6a 	bl	800d31c <TI2_Config>
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 800ca48:	683b      	ldr	r3, [r7, #0]
 800ca4a:	88db      	ldrh	r3, [r3, #6]
 800ca4c:	4619      	mov	r1, r3
 800ca4e:	6878      	ldr	r0, [r7, #4]
 800ca50:	f000 f86d 	bl	800cb2e <TIM_SetIC2Prescaler>
    /* TI1 Configuration */
    TI1_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
}
 800ca54:	e01b      	b.n	800ca8e <TIM_PWMIConfig+0xb0>
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
 800ca56:	683b      	ldr	r3, [r7, #0]
 800ca58:	8859      	ldrh	r1, [r3, #2]
 800ca5a:	683b      	ldr	r3, [r7, #0]
 800ca5c:	889a      	ldrh	r2, [r3, #4]
 800ca5e:	683b      	ldr	r3, [r7, #0]
 800ca60:	891b      	ldrh	r3, [r3, #8]
 800ca62:	6878      	ldr	r0, [r7, #4]
 800ca64:	f000 fc5a 	bl	800d31c <TI2_Config>
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 800ca68:	683b      	ldr	r3, [r7, #0]
 800ca6a:	88db      	ldrh	r3, [r3, #6]
 800ca6c:	4619      	mov	r1, r3
 800ca6e:	6878      	ldr	r0, [r7, #4]
 800ca70:	f000 f85d 	bl	800cb2e <TIM_SetIC2Prescaler>
    TI1_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
 800ca74:	683b      	ldr	r3, [r7, #0]
 800ca76:	891b      	ldrh	r3, [r3, #8]
 800ca78:	89ba      	ldrh	r2, [r7, #12]
 800ca7a:	89f9      	ldrh	r1, [r7, #14]
 800ca7c:	6878      	ldr	r0, [r7, #4]
 800ca7e:	f000 fc0a 	bl	800d296 <TI1_Config>
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 800ca82:	683b      	ldr	r3, [r7, #0]
 800ca84:	88db      	ldrh	r3, [r3, #6]
 800ca86:	4619      	mov	r1, r3
 800ca88:	6878      	ldr	r0, [r7, #4]
 800ca8a:	f000 f834 	bl	800caf6 <TIM_SetIC1Prescaler>
}
 800ca8e:	bf00      	nop
 800ca90:	3710      	adds	r7, #16
 800ca92:	46bd      	mov	sp, r7
 800ca94:	bd80      	pop	{r7, pc}

0800ca96 <TIM_GetCapture1>:
  * @brief  Gets the TIMx Input Capture 1 value.
  * @param  TIMx: where x can be 1 to 14 except 6 and 7, to select the TIM peripheral.
  * @retval Capture Compare 1 Register value.
  */
uint32_t TIM_GetCapture1(TIM_TypeDef* TIMx)
{
 800ca96:	b480      	push	{r7}
 800ca98:	b083      	sub	sp, #12
 800ca9a:	af00      	add	r7, sp, #0
 800ca9c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));

  /* Get the Capture 1 Register value */
  return TIMx->CCR1;
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
}
 800caa2:	4618      	mov	r0, r3
 800caa4:	370c      	adds	r7, #12
 800caa6:	46bd      	mov	sp, r7
 800caa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caac:	4770      	bx	lr

0800caae <TIM_GetCapture2>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 5, 8, 9 or 12 to select the TIM 
  *         peripheral.
  * @retval Capture Compare 2 Register value.
  */
uint32_t TIM_GetCapture2(TIM_TypeDef* TIMx)
{
 800caae:	b480      	push	{r7}
 800cab0:	b083      	sub	sp, #12
 800cab2:	af00      	add	r7, sp, #0
 800cab4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Get the Capture 2 Register value */
  return TIMx->CCR2;
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
 800caba:	4618      	mov	r0, r3
 800cabc:	370c      	adds	r7, #12
 800cabe:	46bd      	mov	sp, r7
 800cac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cac4:	4770      	bx	lr

0800cac6 <TIM_GetCapture3>:
  * @brief  Gets the TIMx Input Capture 3 value.
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @retval Capture Compare 3 Register value.
  */
uint32_t TIM_GetCapture3(TIM_TypeDef* TIMx)
{
 800cac6:	b480      	push	{r7}
 800cac8:	b083      	sub	sp, #12
 800caca:	af00      	add	r7, sp, #0
 800cacc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx)); 

  /* Get the Capture 3 Register value */
  return TIMx->CCR3;
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
}
 800cad2:	4618      	mov	r0, r3
 800cad4:	370c      	adds	r7, #12
 800cad6:	46bd      	mov	sp, r7
 800cad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cadc:	4770      	bx	lr

0800cade <TIM_GetCapture4>:
  * @brief  Gets the TIMx Input Capture 4 value.
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @retval Capture Compare 4 Register value.
  */
uint32_t TIM_GetCapture4(TIM_TypeDef* TIMx)
{
 800cade:	b480      	push	{r7}
 800cae0:	b083      	sub	sp, #12
 800cae2:	af00      	add	r7, sp, #0
 800cae4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));

  /* Get the Capture 4 Register value */
  return TIMx->CCR4;
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800caea:	4618      	mov	r0, r3
 800caec:	370c      	adds	r7, #12
 800caee:	46bd      	mov	sp, r7
 800caf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caf4:	4770      	bx	lr

0800caf6 <TIM_SetIC1Prescaler>:
  *            @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *            @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC1Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
 800caf6:	b480      	push	{r7}
 800caf8:	b083      	sub	sp, #12
 800cafa:	af00      	add	r7, sp, #0
 800cafc:	6078      	str	r0, [r7, #4]
 800cafe:	460b      	mov	r3, r1
 800cb00:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC1PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~TIM_CCMR1_IC1PSC;
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	8b1b      	ldrh	r3, [r3, #24]
 800cb06:	b29b      	uxth	r3, r3
 800cb08:	f023 030c 	bic.w	r3, r3, #12
 800cb0c:	b29a      	uxth	r2, r3
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	831a      	strh	r2, [r3, #24]

  /* Set the IC1PSC value */
  TIMx->CCMR1 |= TIM_ICPSC;
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	8b1b      	ldrh	r3, [r3, #24]
 800cb16:	b29a      	uxth	r2, r3
 800cb18:	887b      	ldrh	r3, [r7, #2]
 800cb1a:	4313      	orrs	r3, r2
 800cb1c:	b29a      	uxth	r2, r3
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	831a      	strh	r2, [r3, #24]
}
 800cb22:	bf00      	nop
 800cb24:	370c      	adds	r7, #12
 800cb26:	46bd      	mov	sp, r7
 800cb28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb2c:	4770      	bx	lr

0800cb2e <TIM_SetIC2Prescaler>:
  *            @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *            @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC2Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
 800cb2e:	b480      	push	{r7}
 800cb30:	b083      	sub	sp, #12
 800cb32:	af00      	add	r7, sp, #0
 800cb34:	6078      	str	r0, [r7, #4]
 800cb36:	460b      	mov	r3, r1
 800cb38:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC2PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~TIM_CCMR1_IC2PSC;
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	8b1b      	ldrh	r3, [r3, #24]
 800cb3e:	b29b      	uxth	r3, r3
 800cb40:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800cb44:	b29a      	uxth	r2, r3
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	831a      	strh	r2, [r3, #24]

  /* Set the IC2PSC value */
  TIMx->CCMR1 |= (uint16_t)(TIM_ICPSC << 8);
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	8b1b      	ldrh	r3, [r3, #24]
 800cb4e:	b29a      	uxth	r2, r3
 800cb50:	887b      	ldrh	r3, [r7, #2]
 800cb52:	021b      	lsls	r3, r3, #8
 800cb54:	b29b      	uxth	r3, r3
 800cb56:	4313      	orrs	r3, r2
 800cb58:	b29a      	uxth	r2, r3
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	831a      	strh	r2, [r3, #24]
}
 800cb5e:	bf00      	nop
 800cb60:	370c      	adds	r7, #12
 800cb62:	46bd      	mov	sp, r7
 800cb64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb68:	4770      	bx	lr

0800cb6a <TIM_SetIC3Prescaler>:
  *            @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *            @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC3Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
 800cb6a:	b480      	push	{r7}
 800cb6c:	b083      	sub	sp, #12
 800cb6e:	af00      	add	r7, sp, #0
 800cb70:	6078      	str	r0, [r7, #4]
 800cb72:	460b      	mov	r3, r1
 800cb74:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC3PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~TIM_CCMR2_IC3PSC;
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	8b9b      	ldrh	r3, [r3, #28]
 800cb7a:	b29b      	uxth	r3, r3
 800cb7c:	f023 030c 	bic.w	r3, r3, #12
 800cb80:	b29a      	uxth	r2, r3
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	839a      	strh	r2, [r3, #28]

  /* Set the IC3PSC value */
  TIMx->CCMR2 |= TIM_ICPSC;
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	8b9b      	ldrh	r3, [r3, #28]
 800cb8a:	b29a      	uxth	r2, r3
 800cb8c:	887b      	ldrh	r3, [r7, #2]
 800cb8e:	4313      	orrs	r3, r2
 800cb90:	b29a      	uxth	r2, r3
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	839a      	strh	r2, [r3, #28]
}
 800cb96:	bf00      	nop
 800cb98:	370c      	adds	r7, #12
 800cb9a:	46bd      	mov	sp, r7
 800cb9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cba0:	4770      	bx	lr

0800cba2 <TIM_SetIC4Prescaler>:
  *            @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *            @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC4Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{  
 800cba2:	b480      	push	{r7}
 800cba4:	b083      	sub	sp, #12
 800cba6:	af00      	add	r7, sp, #0
 800cba8:	6078      	str	r0, [r7, #4]
 800cbaa:	460b      	mov	r3, r1
 800cbac:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC4PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~TIM_CCMR2_IC4PSC;
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	8b9b      	ldrh	r3, [r3, #28]
 800cbb2:	b29b      	uxth	r3, r3
 800cbb4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800cbb8:	b29a      	uxth	r2, r3
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	839a      	strh	r2, [r3, #28]

  /* Set the IC4PSC value */
  TIMx->CCMR2 |= (uint16_t)(TIM_ICPSC << 8);
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	8b9b      	ldrh	r3, [r3, #28]
 800cbc2:	b29a      	uxth	r2, r3
 800cbc4:	887b      	ldrh	r3, [r7, #2]
 800cbc6:	021b      	lsls	r3, r3, #8
 800cbc8:	b29b      	uxth	r3, r3
 800cbca:	4313      	orrs	r3, r2
 800cbcc:	b29a      	uxth	r2, r3
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	839a      	strh	r2, [r3, #28]
}
 800cbd2:	bf00      	nop
 800cbd4:	370c      	adds	r7, #12
 800cbd6:	46bd      	mov	sp, r7
 800cbd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbdc:	4770      	bx	lr

0800cbde <TIM_BDTRConfig>:
  * @param  TIM_BDTRInitStruct: pointer to a TIM_BDTRInitTypeDef structure that
  *         contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval None
  */
void TIM_BDTRConfig(TIM_TypeDef* TIMx, TIM_BDTRInitTypeDef *TIM_BDTRInitStruct)
{
 800cbde:	b480      	push	{r7}
 800cbe0:	b083      	sub	sp, #12
 800cbe2:	af00      	add	r7, sp, #0
 800cbe4:	6078      	str	r0, [r7, #4]
 800cbe6:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 800cbe8:	683b      	ldr	r3, [r7, #0]
 800cbea:	881a      	ldrh	r2, [r3, #0]
 800cbec:	683b      	ldr	r3, [r7, #0]
 800cbee:	885b      	ldrh	r3, [r3, #2]
 800cbf0:	4313      	orrs	r3, r2
 800cbf2:	b29a      	uxth	r2, r3
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
 800cbf4:	683b      	ldr	r3, [r7, #0]
 800cbf6:	889b      	ldrh	r3, [r3, #4]
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 800cbf8:	4313      	orrs	r3, r2
 800cbfa:	b29a      	uxth	r2, r3
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
 800cbfc:	683b      	ldr	r3, [r7, #0]
 800cbfe:	88db      	ldrh	r3, [r3, #6]
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 800cc00:	4313      	orrs	r3, r2
 800cc02:	b29a      	uxth	r2, r3
             TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
 800cc04:	683b      	ldr	r3, [r7, #0]
 800cc06:	891b      	ldrh	r3, [r3, #8]
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 800cc08:	4313      	orrs	r3, r2
 800cc0a:	b29a      	uxth	r2, r3
             TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
 800cc0c:	683b      	ldr	r3, [r7, #0]
 800cc0e:	895b      	ldrh	r3, [r3, #10]
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 800cc10:	4313      	orrs	r3, r2
 800cc12:	b29a      	uxth	r2, r3
             TIM_BDTRInitStruct->TIM_AutomaticOutput;
 800cc14:	683b      	ldr	r3, [r7, #0]
 800cc16:	899b      	ldrh	r3, [r3, #12]
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 800cc18:	4313      	orrs	r3, r2
 800cc1a:	b29a      	uxth	r2, r3
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
}
 800cc22:	bf00      	nop
 800cc24:	370c      	adds	r7, #12
 800cc26:	46bd      	mov	sp, r7
 800cc28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc2c:	4770      	bx	lr

0800cc2e <TIM_BDTRStructInit>:
  * @param  TIM_BDTRInitStruct: pointer to a TIM_BDTRInitTypeDef structure which
  *         will be initialized.
  * @retval None
  */
void TIM_BDTRStructInit(TIM_BDTRInitTypeDef* TIM_BDTRInitStruct)
{
 800cc2e:	b480      	push	{r7}
 800cc30:	b083      	sub	sp, #12
 800cc32:	af00      	add	r7, sp, #0
 800cc34:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_BDTRInitStruct->TIM_OSSRState = TIM_OSSRState_Disable;
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	2200      	movs	r2, #0
 800cc3a:	801a      	strh	r2, [r3, #0]
  TIM_BDTRInitStruct->TIM_OSSIState = TIM_OSSIState_Disable;
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	2200      	movs	r2, #0
 800cc40:	805a      	strh	r2, [r3, #2]
  TIM_BDTRInitStruct->TIM_LOCKLevel = TIM_LOCKLevel_OFF;
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	2200      	movs	r2, #0
 800cc46:	809a      	strh	r2, [r3, #4]
  TIM_BDTRInitStruct->TIM_DeadTime = 0x00;
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	2200      	movs	r2, #0
 800cc4c:	80da      	strh	r2, [r3, #6]
  TIM_BDTRInitStruct->TIM_Break = TIM_Break_Disable;
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	2200      	movs	r2, #0
 800cc52:	811a      	strh	r2, [r3, #8]
  TIM_BDTRInitStruct->TIM_BreakPolarity = TIM_BreakPolarity_Low;
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	2200      	movs	r2, #0
 800cc58:	815a      	strh	r2, [r3, #10]
  TIM_BDTRInitStruct->TIM_AutomaticOutput = TIM_AutomaticOutput_Disable;
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	2200      	movs	r2, #0
 800cc5e:	819a      	strh	r2, [r3, #12]
}
 800cc60:	bf00      	nop
 800cc62:	370c      	adds	r7, #12
 800cc64:	46bd      	mov	sp, r7
 800cc66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc6a:	4770      	bx	lr

0800cc6c <TIM_CtrlPWMOutputs>:
  * @param  NewState: new state of the TIM peripheral Main Outputs.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_CtrlPWMOutputs(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 800cc6c:	b480      	push	{r7}
 800cc6e:	b083      	sub	sp, #12
 800cc70:	af00      	add	r7, sp, #0
 800cc72:	6078      	str	r0, [r7, #4]
 800cc74:	460b      	mov	r3, r1
 800cc76:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800cc78:	78fb      	ldrb	r3, [r7, #3]
 800cc7a:	2b00      	cmp	r3, #0
 800cc7c:	d00c      	beq.n	800cc98 <TIM_CtrlPWMOutputs+0x2c>
  {
    /* Enable the TIM Main Output */
    TIMx->BDTR |= TIM_BDTR_MOE;
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800cc84:	b29b      	uxth	r3, r3
 800cc86:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cc8a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cc8e:	b29a      	uxth	r2, r3
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  else
  {
    /* Disable the TIM Main Output */
    TIMx->BDTR &= (uint16_t)~TIM_BDTR_MOE;
  }  
}
 800cc96:	e009      	b.n	800ccac <TIM_CtrlPWMOutputs+0x40>
    TIMx->BDTR &= (uint16_t)~TIM_BDTR_MOE;
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800cc9e:	b29b      	uxth	r3, r3
 800cca0:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800cca4:	b29a      	uxth	r2, r3
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
}
 800ccac:	bf00      	nop
 800ccae:	370c      	adds	r7, #12
 800ccb0:	46bd      	mov	sp, r7
 800ccb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccb6:	4770      	bx	lr

0800ccb8 <TIM_SelectCOM>:
  * @param  NewState: new state of the Commutation event.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_SelectCOM(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 800ccb8:	b480      	push	{r7}
 800ccba:	b083      	sub	sp, #12
 800ccbc:	af00      	add	r7, sp, #0
 800ccbe:	6078      	str	r0, [r7, #4]
 800ccc0:	460b      	mov	r3, r1
 800ccc2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800ccc4:	78fb      	ldrb	r3, [r7, #3]
 800ccc6:	2b00      	cmp	r3, #0
 800ccc8:	d008      	beq.n	800ccdc <TIM_SelectCOM+0x24>
  {
    /* Set the COM Bit */
    TIMx->CR2 |= TIM_CR2_CCUS;
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	889b      	ldrh	r3, [r3, #4]
 800ccce:	b29b      	uxth	r3, r3
 800ccd0:	f043 0304 	orr.w	r3, r3, #4
 800ccd4:	b29a      	uxth	r2, r3
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	809a      	strh	r2, [r3, #4]
  else
  {
    /* Reset the COM Bit */
    TIMx->CR2 &= (uint16_t)~TIM_CR2_CCUS;
  }
}
 800ccda:	e007      	b.n	800ccec <TIM_SelectCOM+0x34>
    TIMx->CR2 &= (uint16_t)~TIM_CR2_CCUS;
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	889b      	ldrh	r3, [r3, #4]
 800cce0:	b29b      	uxth	r3, r3
 800cce2:	f023 0304 	bic.w	r3, r3, #4
 800cce6:	b29a      	uxth	r2, r3
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	809a      	strh	r2, [r3, #4]
}
 800ccec:	bf00      	nop
 800ccee:	370c      	adds	r7, #12
 800ccf0:	46bd      	mov	sp, r7
 800ccf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccf6:	4770      	bx	lr

0800ccf8 <TIM_CCPreloadControl>:
  * @param  NewState: new state of the Capture Compare Preload Control bit
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_CCPreloadControl(TIM_TypeDef* TIMx, FunctionalState NewState)
{ 
 800ccf8:	b480      	push	{r7}
 800ccfa:	b083      	sub	sp, #12
 800ccfc:	af00      	add	r7, sp, #0
 800ccfe:	6078      	str	r0, [r7, #4]
 800cd00:	460b      	mov	r3, r1
 800cd02:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800cd04:	78fb      	ldrb	r3, [r7, #3]
 800cd06:	2b00      	cmp	r3, #0
 800cd08:	d008      	beq.n	800cd1c <TIM_CCPreloadControl+0x24>
  {
    /* Set the CCPC Bit */
    TIMx->CR2 |= TIM_CR2_CCPC;
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	889b      	ldrh	r3, [r3, #4]
 800cd0e:	b29b      	uxth	r3, r3
 800cd10:	f043 0301 	orr.w	r3, r3, #1
 800cd14:	b29a      	uxth	r2, r3
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	809a      	strh	r2, [r3, #4]
  else
  {
    /* Reset the CCPC Bit */
    TIMx->CR2 &= (uint16_t)~TIM_CR2_CCPC;
  }
}
 800cd1a:	e007      	b.n	800cd2c <TIM_CCPreloadControl+0x34>
    TIMx->CR2 &= (uint16_t)~TIM_CR2_CCPC;
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	889b      	ldrh	r3, [r3, #4]
 800cd20:	b29b      	uxth	r3, r3
 800cd22:	f023 0301 	bic.w	r3, r3, #1
 800cd26:	b29a      	uxth	r2, r3
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	809a      	strh	r2, [r3, #4]
}
 800cd2c:	bf00      	nop
 800cd2e:	370c      	adds	r7, #12
 800cd30:	46bd      	mov	sp, r7
 800cd32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd36:	4770      	bx	lr

0800cd38 <TIM_ITConfig>:
  * @param  NewState: new state of the TIM interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ITConfig(TIM_TypeDef* TIMx, uint16_t TIM_IT, FunctionalState NewState)
{  
 800cd38:	b480      	push	{r7}
 800cd3a:	b083      	sub	sp, #12
 800cd3c:	af00      	add	r7, sp, #0
 800cd3e:	6078      	str	r0, [r7, #4]
 800cd40:	460b      	mov	r3, r1
 800cd42:	807b      	strh	r3, [r7, #2]
 800cd44:	4613      	mov	r3, r2
 800cd46:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800cd48:	787b      	ldrb	r3, [r7, #1]
 800cd4a:	2b00      	cmp	r3, #0
 800cd4c:	d008      	beq.n	800cd60 <TIM_ITConfig+0x28>
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	899b      	ldrh	r3, [r3, #12]
 800cd52:	b29a      	uxth	r2, r3
 800cd54:	887b      	ldrh	r3, [r7, #2]
 800cd56:	4313      	orrs	r3, r2
 800cd58:	b29a      	uxth	r2, r3
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
  }
}
 800cd5e:	e009      	b.n	800cd74 <TIM_ITConfig+0x3c>
    TIMx->DIER &= (uint16_t)~TIM_IT;
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	899b      	ldrh	r3, [r3, #12]
 800cd64:	b29a      	uxth	r2, r3
 800cd66:	887b      	ldrh	r3, [r7, #2]
 800cd68:	43db      	mvns	r3, r3
 800cd6a:	b29b      	uxth	r3, r3
 800cd6c:	4013      	ands	r3, r2
 800cd6e:	b29a      	uxth	r2, r3
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	819a      	strh	r2, [r3, #12]
}
 800cd74:	bf00      	nop
 800cd76:	370c      	adds	r7, #12
 800cd78:	46bd      	mov	sp, r7
 800cd7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd7e:	4770      	bx	lr

0800cd80 <TIM_GenerateEvent>:
  * @note   TIM_EventSource_COM and TIM_EventSource_Break are used only with TIM1 and TIM8.
  *        
  * @retval None
  */
void TIM_GenerateEvent(TIM_TypeDef* TIMx, uint16_t TIM_EventSource)
{ 
 800cd80:	b480      	push	{r7}
 800cd82:	b083      	sub	sp, #12
 800cd84:	af00      	add	r7, sp, #0
 800cd86:	6078      	str	r0, [r7, #4]
 800cd88:	460b      	mov	r3, r1
 800cd8a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_EVENT_SOURCE(TIM_EventSource));
 
  /* Set the event sources */
  TIMx->EGR = TIM_EventSource;
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	887a      	ldrh	r2, [r7, #2]
 800cd90:	829a      	strh	r2, [r3, #20]
}
 800cd92:	bf00      	nop
 800cd94:	370c      	adds	r7, #12
 800cd96:	46bd      	mov	sp, r7
 800cd98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd9c:	4770      	bx	lr

0800cd9e <TIM_GetFlagStatus>:
  * @note   TIM_FLAG_COM and TIM_FLAG_Break are used only with TIM1 and TIM8.    
  *
  * @retval The new state of TIM_FLAG (SET or RESET).
  */
FlagStatus TIM_GetFlagStatus(TIM_TypeDef* TIMx, uint16_t TIM_FLAG)
{ 
 800cd9e:	b480      	push	{r7}
 800cda0:	b085      	sub	sp, #20
 800cda2:	af00      	add	r7, sp, #0
 800cda4:	6078      	str	r0, [r7, #4]
 800cda6:	460b      	mov	r3, r1
 800cda8:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET;  
 800cdaa:	2300      	movs	r3, #0
 800cdac:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_FLAG(TIM_FLAG));

  
  if ((TIMx->SR & TIM_FLAG) != (uint16_t)RESET)
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	8a1b      	ldrh	r3, [r3, #16]
 800cdb2:	b29a      	uxth	r2, r3
 800cdb4:	887b      	ldrh	r3, [r7, #2]
 800cdb6:	4013      	ands	r3, r2
 800cdb8:	b29b      	uxth	r3, r3
 800cdba:	2b00      	cmp	r3, #0
 800cdbc:	d002      	beq.n	800cdc4 <TIM_GetFlagStatus+0x26>
  {
    bitstatus = SET;
 800cdbe:	2301      	movs	r3, #1
 800cdc0:	73fb      	strb	r3, [r7, #15]
 800cdc2:	e001      	b.n	800cdc8 <TIM_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
 800cdc4:	2300      	movs	r3, #0
 800cdc6:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800cdc8:	7bfb      	ldrb	r3, [r7, #15]
}
 800cdca:	4618      	mov	r0, r3
 800cdcc:	3714      	adds	r7, #20
 800cdce:	46bd      	mov	sp, r7
 800cdd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdd4:	4770      	bx	lr

0800cdd6 <TIM_ClearFlag>:
  * @note   TIM_FLAG_COM and TIM_FLAG_Break are used only with TIM1 and TIM8.
  *    
  * @retval None
  */
void TIM_ClearFlag(TIM_TypeDef* TIMx, uint16_t TIM_FLAG)
{  
 800cdd6:	b480      	push	{r7}
 800cdd8:	b083      	sub	sp, #12
 800cdda:	af00      	add	r7, sp, #0
 800cddc:	6078      	str	r0, [r7, #4]
 800cdde:	460b      	mov	r3, r1
 800cde0:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
   
  /* Clear the flags */
  TIMx->SR = (uint16_t)~TIM_FLAG;
 800cde2:	887b      	ldrh	r3, [r7, #2]
 800cde4:	43db      	mvns	r3, r3
 800cde6:	b29a      	uxth	r2, r3
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	821a      	strh	r2, [r3, #16]
}
 800cdec:	bf00      	nop
 800cdee:	370c      	adds	r7, #12
 800cdf0:	46bd      	mov	sp, r7
 800cdf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdf6:	4770      	bx	lr

0800cdf8 <TIM_GetITStatus>:
  * @note   TIM_IT_COM and TIM_IT_Break are used only with TIM1 and TIM8.
  *     
  * @retval The new state of the TIM_IT(SET or RESET).
  */
ITStatus TIM_GetITStatus(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 800cdf8:	b480      	push	{r7}
 800cdfa:	b085      	sub	sp, #20
 800cdfc:	af00      	add	r7, sp, #0
 800cdfe:	6078      	str	r0, [r7, #4]
 800ce00:	460b      	mov	r3, r1
 800ce02:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET;  
 800ce04:	2300      	movs	r3, #0
 800ce06:	73fb      	strb	r3, [r7, #15]
  uint16_t itstatus = 0x0, itenable = 0x0;
 800ce08:	2300      	movs	r3, #0
 800ce0a:	81bb      	strh	r3, [r7, #12]
 800ce0c:	2300      	movs	r3, #0
 800ce0e:	817b      	strh	r3, [r7, #10]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	8a1b      	ldrh	r3, [r3, #16]
 800ce14:	b29a      	uxth	r2, r3
 800ce16:	887b      	ldrh	r3, [r7, #2]
 800ce18:	4013      	ands	r3, r2
 800ce1a:	81bb      	strh	r3, [r7, #12]
  
  itenable = TIMx->DIER & TIM_IT;
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	899b      	ldrh	r3, [r3, #12]
 800ce20:	b29a      	uxth	r2, r3
 800ce22:	887b      	ldrh	r3, [r7, #2]
 800ce24:	4013      	ands	r3, r2
 800ce26:	817b      	strh	r3, [r7, #10]
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 800ce28:	89bb      	ldrh	r3, [r7, #12]
 800ce2a:	2b00      	cmp	r3, #0
 800ce2c:	d005      	beq.n	800ce3a <TIM_GetITStatus+0x42>
 800ce2e:	897b      	ldrh	r3, [r7, #10]
 800ce30:	2b00      	cmp	r3, #0
 800ce32:	d002      	beq.n	800ce3a <TIM_GetITStatus+0x42>
  {
    bitstatus = SET;
 800ce34:	2301      	movs	r3, #1
 800ce36:	73fb      	strb	r3, [r7, #15]
 800ce38:	e001      	b.n	800ce3e <TIM_GetITStatus+0x46>
  }
  else
  {
    bitstatus = RESET;
 800ce3a:	2300      	movs	r3, #0
 800ce3c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800ce3e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce40:	4618      	mov	r0, r3
 800ce42:	3714      	adds	r7, #20
 800ce44:	46bd      	mov	sp, r7
 800ce46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce4a:	4770      	bx	lr

0800ce4c <TIM_ClearITPendingBit>:
  * @note   TIM_IT_COM and TIM_IT_Break are used only with TIM1 and TIM8.
  *      
  * @retval None
  */
void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 800ce4c:	b480      	push	{r7}
 800ce4e:	b083      	sub	sp, #12
 800ce50:	af00      	add	r7, sp, #0
 800ce52:	6078      	str	r0, [r7, #4]
 800ce54:	460b      	mov	r3, r1
 800ce56:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 800ce58:	887b      	ldrh	r3, [r7, #2]
 800ce5a:	43db      	mvns	r3, r3
 800ce5c:	b29a      	uxth	r2, r3
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	821a      	strh	r2, [r3, #16]
}
 800ce62:	bf00      	nop
 800ce64:	370c      	adds	r7, #12
 800ce66:	46bd      	mov	sp, r7
 800ce68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce6c:	4770      	bx	lr

0800ce6e <TIM_DMAConfig>:
  * @param  TIM_DMABurstLength: DMA Burst length. This parameter can be one value
  *         between: TIM_DMABurstLength_1Transfer and TIM_DMABurstLength_18Transfers.
  * @retval None
  */
void TIM_DMAConfig(TIM_TypeDef* TIMx, uint16_t TIM_DMABase, uint16_t TIM_DMABurstLength)
{
 800ce6e:	b480      	push	{r7}
 800ce70:	b083      	sub	sp, #12
 800ce72:	af00      	add	r7, sp, #0
 800ce74:	6078      	str	r0, [r7, #4]
 800ce76:	460b      	mov	r3, r1
 800ce78:	807b      	strh	r3, [r7, #2]
 800ce7a:	4613      	mov	r3, r2
 800ce7c:	803b      	strh	r3, [r7, #0]
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_DMA_BASE(TIM_DMABase)); 
  assert_param(IS_TIM_DMA_LENGTH(TIM_DMABurstLength));

  /* Set the DMA Base and the DMA Burst Length */
  TIMx->DCR = TIM_DMABase | TIM_DMABurstLength;
 800ce7e:	887a      	ldrh	r2, [r7, #2]
 800ce80:	883b      	ldrh	r3, [r7, #0]
 800ce82:	4313      	orrs	r3, r2
 800ce84:	b29a      	uxth	r2, r3
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
}
 800ce8c:	bf00      	nop
 800ce8e:	370c      	adds	r7, #12
 800ce90:	46bd      	mov	sp, r7
 800ce92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce96:	4770      	bx	lr

0800ce98 <TIM_DMACmd>:
  * @param  NewState: new state of the DMA Request sources.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_DMACmd(TIM_TypeDef* TIMx, uint16_t TIM_DMASource, FunctionalState NewState)
{ 
 800ce98:	b480      	push	{r7}
 800ce9a:	b083      	sub	sp, #12
 800ce9c:	af00      	add	r7, sp, #0
 800ce9e:	6078      	str	r0, [r7, #4]
 800cea0:	460b      	mov	r3, r1
 800cea2:	807b      	strh	r3, [r7, #2]
 800cea4:	4613      	mov	r3, r2
 800cea6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_LIST5_PERIPH(TIMx)); 
  assert_param(IS_TIM_DMA_SOURCE(TIM_DMASource));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800cea8:	787b      	ldrb	r3, [r7, #1]
 800ceaa:	2b00      	cmp	r3, #0
 800ceac:	d008      	beq.n	800cec0 <TIM_DMACmd+0x28>
  {
    /* Enable the DMA sources */
    TIMx->DIER |= TIM_DMASource; 
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	899b      	ldrh	r3, [r3, #12]
 800ceb2:	b29a      	uxth	r2, r3
 800ceb4:	887b      	ldrh	r3, [r7, #2]
 800ceb6:	4313      	orrs	r3, r2
 800ceb8:	b29a      	uxth	r2, r3
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the DMA sources */
    TIMx->DIER &= (uint16_t)~TIM_DMASource;
  }
}
 800cebe:	e009      	b.n	800ced4 <TIM_DMACmd+0x3c>
    TIMx->DIER &= (uint16_t)~TIM_DMASource;
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	899b      	ldrh	r3, [r3, #12]
 800cec4:	b29a      	uxth	r2, r3
 800cec6:	887b      	ldrh	r3, [r7, #2]
 800cec8:	43db      	mvns	r3, r3
 800ceca:	b29b      	uxth	r3, r3
 800cecc:	4013      	ands	r3, r2
 800cece:	b29a      	uxth	r2, r3
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	819a      	strh	r2, [r3, #12]
}
 800ced4:	bf00      	nop
 800ced6:	370c      	adds	r7, #12
 800ced8:	46bd      	mov	sp, r7
 800ceda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cede:	4770      	bx	lr

0800cee0 <TIM_SelectCCDMA>:
  * @param  NewState: new state of the Capture Compare DMA source
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_SelectCCDMA(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 800cee0:	b480      	push	{r7}
 800cee2:	b083      	sub	sp, #12
 800cee4:	af00      	add	r7, sp, #0
 800cee6:	6078      	str	r0, [r7, #4]
 800cee8:	460b      	mov	r3, r1
 800ceea:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800ceec:	78fb      	ldrb	r3, [r7, #3]
 800ceee:	2b00      	cmp	r3, #0
 800cef0:	d008      	beq.n	800cf04 <TIM_SelectCCDMA+0x24>
  {
    /* Set the CCDS Bit */
    TIMx->CR2 |= TIM_CR2_CCDS;
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	889b      	ldrh	r3, [r3, #4]
 800cef6:	b29b      	uxth	r3, r3
 800cef8:	f043 0308 	orr.w	r3, r3, #8
 800cefc:	b29a      	uxth	r2, r3
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	809a      	strh	r2, [r3, #4]
  else
  {
    /* Reset the CCDS Bit */
    TIMx->CR2 &= (uint16_t)~TIM_CR2_CCDS;
  }
}
 800cf02:	e007      	b.n	800cf14 <TIM_SelectCCDMA+0x34>
    TIMx->CR2 &= (uint16_t)~TIM_CR2_CCDS;
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	889b      	ldrh	r3, [r3, #4]
 800cf08:	b29b      	uxth	r3, r3
 800cf0a:	f023 0308 	bic.w	r3, r3, #8
 800cf0e:	b29a      	uxth	r2, r3
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	809a      	strh	r2, [r3, #4]
}
 800cf14:	bf00      	nop
 800cf16:	370c      	adds	r7, #12
 800cf18:	46bd      	mov	sp, r7
 800cf1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf1e:	4770      	bx	lr

0800cf20 <TIM_InternalClockConfig>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 5, 8, 9 or 12 to select the TIM 
  *         peripheral.
  * @retval None
  */
void TIM_InternalClockConfig(TIM_TypeDef* TIMx)
{
 800cf20:	b480      	push	{r7}
 800cf22:	b083      	sub	sp, #12
 800cf24:	af00      	add	r7, sp, #0
 800cf26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Disable slave mode to clock the prescaler directly with the internal clock */
  TIMx->SMCR &=  (uint16_t)~TIM_SMCR_SMS;
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	891b      	ldrh	r3, [r3, #8]
 800cf2c:	b29b      	uxth	r3, r3
 800cf2e:	f023 0307 	bic.w	r3, r3, #7
 800cf32:	b29a      	uxth	r2, r3
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	811a      	strh	r2, [r3, #8]
}
 800cf38:	bf00      	nop
 800cf3a:	370c      	adds	r7, #12
 800cf3c:	46bd      	mov	sp, r7
 800cf3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf42:	4770      	bx	lr

0800cf44 <TIM_ITRxExternalClockConfig>:
  *            @arg TIM_TS_ITR2: Internal Trigger 2
  *            @arg TIM_TS_ITR3: Internal Trigger 3
  * @retval None
  */
void TIM_ITRxExternalClockConfig(TIM_TypeDef* TIMx, uint16_t TIM_InputTriggerSource)
{
 800cf44:	b580      	push	{r7, lr}
 800cf46:	b082      	sub	sp, #8
 800cf48:	af00      	add	r7, sp, #0
 800cf4a:	6078      	str	r0, [r7, #4]
 800cf4c:	460b      	mov	r3, r1
 800cf4e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_INTERNAL_TRIGGER_SELECTION(TIM_InputTriggerSource));

  /* Select the Internal Trigger */
  TIM_SelectInputTrigger(TIMx, TIM_InputTriggerSource);
 800cf50:	887b      	ldrh	r3, [r7, #2]
 800cf52:	4619      	mov	r1, r3
 800cf54:	6878      	ldr	r0, [r7, #4]
 800cf56:	f000 f888 	bl	800d06a <TIM_SelectInputTrigger>

  /* Select the External clock mode1 */
  TIMx->SMCR |= TIM_SlaveMode_External1;
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	891b      	ldrh	r3, [r3, #8]
 800cf5e:	b29b      	uxth	r3, r3
 800cf60:	f043 0307 	orr.w	r3, r3, #7
 800cf64:	b29a      	uxth	r2, r3
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	811a      	strh	r2, [r3, #8]
}
 800cf6a:	bf00      	nop
 800cf6c:	3708      	adds	r7, #8
 800cf6e:	46bd      	mov	sp, r7
 800cf70:	bd80      	pop	{r7, pc}

0800cf72 <TIM_TIxExternalClockConfig>:
  *          This parameter must be a value between 0x0 and 0xF.
  * @retval None
  */
void TIM_TIxExternalClockConfig(TIM_TypeDef* TIMx, uint16_t TIM_TIxExternalCLKSource,
                                uint16_t TIM_ICPolarity, uint16_t ICFilter)
{
 800cf72:	b580      	push	{r7, lr}
 800cf74:	b084      	sub	sp, #16
 800cf76:	af00      	add	r7, sp, #0
 800cf78:	60f8      	str	r0, [r7, #12]
 800cf7a:	4608      	mov	r0, r1
 800cf7c:	4611      	mov	r1, r2
 800cf7e:	461a      	mov	r2, r3
 800cf80:	4603      	mov	r3, r0
 800cf82:	817b      	strh	r3, [r7, #10]
 800cf84:	460b      	mov	r3, r1
 800cf86:	813b      	strh	r3, [r7, #8]
 800cf88:	4613      	mov	r3, r2
 800cf8a:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_IC_POLARITY(TIM_ICPolarity));
  assert_param(IS_TIM_IC_FILTER(ICFilter));

  /* Configure the Timer Input Clock Source */
  if (TIM_TIxExternalCLKSource == TIM_TIxExternalCLK1Source_TI2)
 800cf8c:	897b      	ldrh	r3, [r7, #10]
 800cf8e:	2b60      	cmp	r3, #96	; 0x60
 800cf90:	d106      	bne.n	800cfa0 <TIM_TIxExternalClockConfig+0x2e>
  {
    TI2_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
 800cf92:	88fb      	ldrh	r3, [r7, #6]
 800cf94:	8939      	ldrh	r1, [r7, #8]
 800cf96:	2201      	movs	r2, #1
 800cf98:	68f8      	ldr	r0, [r7, #12]
 800cf9a:	f000 f9bf 	bl	800d31c <TI2_Config>
 800cf9e:	e005      	b.n	800cfac <TIM_TIxExternalClockConfig+0x3a>
  }
  else
  {
    TI1_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
 800cfa0:	88fb      	ldrh	r3, [r7, #6]
 800cfa2:	8939      	ldrh	r1, [r7, #8]
 800cfa4:	2201      	movs	r2, #1
 800cfa6:	68f8      	ldr	r0, [r7, #12]
 800cfa8:	f000 f975 	bl	800d296 <TI1_Config>
  }
  /* Select the Trigger source */
  TIM_SelectInputTrigger(TIMx, TIM_TIxExternalCLKSource);
 800cfac:	897b      	ldrh	r3, [r7, #10]
 800cfae:	4619      	mov	r1, r3
 800cfb0:	68f8      	ldr	r0, [r7, #12]
 800cfb2:	f000 f85a 	bl	800d06a <TIM_SelectInputTrigger>
  /* Select the External clock mode1 */
  TIMx->SMCR |= TIM_SlaveMode_External1;
 800cfb6:	68fb      	ldr	r3, [r7, #12]
 800cfb8:	891b      	ldrh	r3, [r3, #8]
 800cfba:	b29b      	uxth	r3, r3
 800cfbc:	f043 0307 	orr.w	r3, r3, #7
 800cfc0:	b29a      	uxth	r2, r3
 800cfc2:	68fb      	ldr	r3, [r7, #12]
 800cfc4:	811a      	strh	r2, [r3, #8]
}
 800cfc6:	bf00      	nop
 800cfc8:	3710      	adds	r7, #16
 800cfca:	46bd      	mov	sp, r7
 800cfcc:	bd80      	pop	{r7, pc}

0800cfce <TIM_ETRClockMode1Config>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRClockMode1Config(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler,
                            uint16_t TIM_ExtTRGPolarity, uint16_t ExtTRGFilter)
{
 800cfce:	b580      	push	{r7, lr}
 800cfd0:	b086      	sub	sp, #24
 800cfd2:	af00      	add	r7, sp, #0
 800cfd4:	60f8      	str	r0, [r7, #12]
 800cfd6:	4608      	mov	r0, r1
 800cfd8:	4611      	mov	r1, r2
 800cfda:	461a      	mov	r2, r3
 800cfdc:	4603      	mov	r3, r0
 800cfde:	817b      	strh	r3, [r7, #10]
 800cfe0:	460b      	mov	r3, r1
 800cfe2:	813b      	strh	r3, [r7, #8]
 800cfe4:	4613      	mov	r3, r2
 800cfe6:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpsmcr = 0;
 800cfe8:	2300      	movs	r3, #0
 800cfea:	82fb      	strh	r3, [r7, #22]
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));
  /* Configure the ETR Clock source */
  TIM_ETRConfig(TIMx, TIM_ExtTRGPrescaler, TIM_ExtTRGPolarity, ExtTRGFilter);
 800cfec:	88fb      	ldrh	r3, [r7, #6]
 800cfee:	893a      	ldrh	r2, [r7, #8]
 800cff0:	8979      	ldrh	r1, [r7, #10]
 800cff2:	68f8      	ldr	r0, [r7, #12]
 800cff4:	f000 f8a9 	bl	800d14a <TIM_ETRConfig>
  
  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800cff8:	68fb      	ldr	r3, [r7, #12]
 800cffa:	891b      	ldrh	r3, [r3, #8]
 800cffc:	82fb      	strh	r3, [r7, #22]

  /* Reset the SMS Bits */
  tmpsmcr &= (uint16_t)~TIM_SMCR_SMS;
 800cffe:	8afb      	ldrh	r3, [r7, #22]
 800d000:	f023 0307 	bic.w	r3, r3, #7
 800d004:	82fb      	strh	r3, [r7, #22]

  /* Select the External clock mode1 */
  tmpsmcr |= TIM_SlaveMode_External1;
 800d006:	8afb      	ldrh	r3, [r7, #22]
 800d008:	f043 0307 	orr.w	r3, r3, #7
 800d00c:	82fb      	strh	r3, [r7, #22]

  /* Select the Trigger selection : ETRF */
  tmpsmcr &= (uint16_t)~TIM_SMCR_TS;
 800d00e:	8afb      	ldrh	r3, [r7, #22]
 800d010:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d014:	82fb      	strh	r3, [r7, #22]
  tmpsmcr |= TIM_TS_ETRF;
 800d016:	8afb      	ldrh	r3, [r7, #22]
 800d018:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 800d01c:	82fb      	strh	r3, [r7, #22]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d01e:	68fb      	ldr	r3, [r7, #12]
 800d020:	8afa      	ldrh	r2, [r7, #22]
 800d022:	811a      	strh	r2, [r3, #8]
}
 800d024:	bf00      	nop
 800d026:	3718      	adds	r7, #24
 800d028:	46bd      	mov	sp, r7
 800d02a:	bd80      	pop	{r7, pc}

0800d02c <TIM_ETRClockMode2Config>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRClockMode2Config(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler, 
                             uint16_t TIM_ExtTRGPolarity, uint16_t ExtTRGFilter)
{
 800d02c:	b580      	push	{r7, lr}
 800d02e:	b084      	sub	sp, #16
 800d030:	af00      	add	r7, sp, #0
 800d032:	60f8      	str	r0, [r7, #12]
 800d034:	4608      	mov	r0, r1
 800d036:	4611      	mov	r1, r2
 800d038:	461a      	mov	r2, r3
 800d03a:	4603      	mov	r3, r0
 800d03c:	817b      	strh	r3, [r7, #10]
 800d03e:	460b      	mov	r3, r1
 800d040:	813b      	strh	r3, [r7, #8]
 800d042:	4613      	mov	r3, r2
 800d044:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));

  /* Configure the ETR Clock source */
  TIM_ETRConfig(TIMx, TIM_ExtTRGPrescaler, TIM_ExtTRGPolarity, ExtTRGFilter);
 800d046:	88fb      	ldrh	r3, [r7, #6]
 800d048:	893a      	ldrh	r2, [r7, #8]
 800d04a:	8979      	ldrh	r1, [r7, #10]
 800d04c:	68f8      	ldr	r0, [r7, #12]
 800d04e:	f000 f87c 	bl	800d14a <TIM_ETRConfig>

  /* Enable the External clock mode2 */
  TIMx->SMCR |= TIM_SMCR_ECE;
 800d052:	68fb      	ldr	r3, [r7, #12]
 800d054:	891b      	ldrh	r3, [r3, #8]
 800d056:	b29b      	uxth	r3, r3
 800d058:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800d05c:	b29a      	uxth	r2, r3
 800d05e:	68fb      	ldr	r3, [r7, #12]
 800d060:	811a      	strh	r2, [r3, #8]
}
 800d062:	bf00      	nop
 800d064:	3710      	adds	r7, #16
 800d066:	46bd      	mov	sp, r7
 800d068:	bd80      	pop	{r7, pc}

0800d06a <TIM_SelectInputTrigger>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
void TIM_SelectInputTrigger(TIM_TypeDef* TIMx, uint16_t TIM_InputTriggerSource)
{
 800d06a:	b480      	push	{r7}
 800d06c:	b085      	sub	sp, #20
 800d06e:	af00      	add	r7, sp, #0
 800d070:	6078      	str	r0, [r7, #4]
 800d072:	460b      	mov	r3, r1
 800d074:	807b      	strh	r3, [r7, #2]
  uint16_t tmpsmcr = 0;
 800d076:	2300      	movs	r3, #0
 800d078:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx)); 
  assert_param(IS_TIM_TRIGGER_SELECTION(TIM_InputTriggerSource));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	891b      	ldrh	r3, [r3, #8]
 800d07e:	81fb      	strh	r3, [r7, #14]

  /* Reset the TS Bits */
  tmpsmcr &= (uint16_t)~TIM_SMCR_TS;
 800d080:	89fb      	ldrh	r3, [r7, #14]
 800d082:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d086:	81fb      	strh	r3, [r7, #14]

  /* Set the Input Trigger source */
  tmpsmcr |= TIM_InputTriggerSource;
 800d088:	89fa      	ldrh	r2, [r7, #14]
 800d08a:	887b      	ldrh	r3, [r7, #2]
 800d08c:	4313      	orrs	r3, r2
 800d08e:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	89fa      	ldrh	r2, [r7, #14]
 800d094:	811a      	strh	r2, [r3, #8]
}
 800d096:	bf00      	nop
 800d098:	3714      	adds	r7, #20
 800d09a:	46bd      	mov	sp, r7
 800d09c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0a0:	4770      	bx	lr

0800d0a2 <TIM_SelectOutputTrigger>:
  *            @arg TIM_TRGOSource_OC4Ref: OC4REF signal is used as the trigger output(TRGO)
  *
  * @retval None
  */
void TIM_SelectOutputTrigger(TIM_TypeDef* TIMx, uint16_t TIM_TRGOSource)
{
 800d0a2:	b480      	push	{r7}
 800d0a4:	b083      	sub	sp, #12
 800d0a6:	af00      	add	r7, sp, #0
 800d0a8:	6078      	str	r0, [r7, #4]
 800d0aa:	460b      	mov	r3, r1
 800d0ac:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST5_PERIPH(TIMx));
  assert_param(IS_TIM_TRGO_SOURCE(TIM_TRGOSource));

  /* Reset the MMS Bits */
  TIMx->CR2 &= (uint16_t)~TIM_CR2_MMS;
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	889b      	ldrh	r3, [r3, #4]
 800d0b2:	b29b      	uxth	r3, r3
 800d0b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d0b8:	b29a      	uxth	r2, r3
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	809a      	strh	r2, [r3, #4]
  /* Select the TRGO source */
  TIMx->CR2 |=  TIM_TRGOSource;
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	889b      	ldrh	r3, [r3, #4]
 800d0c2:	b29a      	uxth	r2, r3
 800d0c4:	887b      	ldrh	r3, [r7, #2]
 800d0c6:	4313      	orrs	r3, r2
 800d0c8:	b29a      	uxth	r2, r3
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	809a      	strh	r2, [r3, #4]
}
 800d0ce:	bf00      	nop
 800d0d0:	370c      	adds	r7, #12
 800d0d2:	46bd      	mov	sp, r7
 800d0d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0d8:	4770      	bx	lr

0800d0da <TIM_SelectSlaveMode>:
  *            @arg TIM_SlaveMode_Trigger:   The counter starts at a rising edge of the trigger TRGI
  *            @arg TIM_SlaveMode_External1: Rising edges of the selected trigger (TRGI) clock the counter
  * @retval None
  */
void TIM_SelectSlaveMode(TIM_TypeDef* TIMx, uint16_t TIM_SlaveMode)
{
 800d0da:	b480      	push	{r7}
 800d0dc:	b083      	sub	sp, #12
 800d0de:	af00      	add	r7, sp, #0
 800d0e0:	6078      	str	r0, [r7, #4]
 800d0e2:	460b      	mov	r3, r1
 800d0e4:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_SLAVE_MODE(TIM_SlaveMode));

  /* Reset the SMS Bits */
  TIMx->SMCR &= (uint16_t)~TIM_SMCR_SMS;
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	891b      	ldrh	r3, [r3, #8]
 800d0ea:	b29b      	uxth	r3, r3
 800d0ec:	f023 0307 	bic.w	r3, r3, #7
 800d0f0:	b29a      	uxth	r2, r3
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	811a      	strh	r2, [r3, #8]

  /* Select the Slave Mode */
  TIMx->SMCR |= TIM_SlaveMode;
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	891b      	ldrh	r3, [r3, #8]
 800d0fa:	b29a      	uxth	r2, r3
 800d0fc:	887b      	ldrh	r3, [r7, #2]
 800d0fe:	4313      	orrs	r3, r2
 800d100:	b29a      	uxth	r2, r3
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	811a      	strh	r2, [r3, #8]
}
 800d106:	bf00      	nop
 800d108:	370c      	adds	r7, #12
 800d10a:	46bd      	mov	sp, r7
 800d10c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d110:	4770      	bx	lr

0800d112 <TIM_SelectMasterSlaveMode>:
  *                                             and its slaves (through TRGO)
  *            @arg TIM_MasterSlaveMode_Disable: No action
  * @retval None
  */
void TIM_SelectMasterSlaveMode(TIM_TypeDef* TIMx, uint16_t TIM_MasterSlaveMode)
{
 800d112:	b480      	push	{r7}
 800d114:	b083      	sub	sp, #12
 800d116:	af00      	add	r7, sp, #0
 800d118:	6078      	str	r0, [r7, #4]
 800d11a:	460b      	mov	r3, r1
 800d11c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_MSM_STATE(TIM_MasterSlaveMode));

  /* Reset the MSM Bit */
  TIMx->SMCR &= (uint16_t)~TIM_SMCR_MSM;
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	891b      	ldrh	r3, [r3, #8]
 800d122:	b29b      	uxth	r3, r3
 800d124:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d128:	b29a      	uxth	r2, r3
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	811a      	strh	r2, [r3, #8]
  
  /* Set or Reset the MSM Bit */
  TIMx->SMCR |= TIM_MasterSlaveMode;
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	891b      	ldrh	r3, [r3, #8]
 800d132:	b29a      	uxth	r2, r3
 800d134:	887b      	ldrh	r3, [r7, #2]
 800d136:	4313      	orrs	r3, r2
 800d138:	b29a      	uxth	r2, r3
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	811a      	strh	r2, [r3, #8]
}
 800d13e:	bf00      	nop
 800d140:	370c      	adds	r7, #12
 800d142:	46bd      	mov	sp, r7
 800d144:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d148:	4770      	bx	lr

0800d14a <TIM_ETRConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRConfig(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler,
                   uint16_t TIM_ExtTRGPolarity, uint16_t ExtTRGFilter)
{
 800d14a:	b480      	push	{r7}
 800d14c:	b087      	sub	sp, #28
 800d14e:	af00      	add	r7, sp, #0
 800d150:	60f8      	str	r0, [r7, #12]
 800d152:	4608      	mov	r0, r1
 800d154:	4611      	mov	r1, r2
 800d156:	461a      	mov	r2, r3
 800d158:	4603      	mov	r3, r0
 800d15a:	817b      	strh	r3, [r7, #10]
 800d15c:	460b      	mov	r3, r1
 800d15e:	813b      	strh	r3, [r7, #8]
 800d160:	4613      	mov	r3, r2
 800d162:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpsmcr = 0;
 800d164:	2300      	movs	r3, #0
 800d166:	82fb      	strh	r3, [r7, #22]
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));

  tmpsmcr = TIMx->SMCR;
 800d168:	68fb      	ldr	r3, [r7, #12]
 800d16a:	891b      	ldrh	r3, [r3, #8]
 800d16c:	82fb      	strh	r3, [r7, #22]

  /* Reset the ETR Bits */
  tmpsmcr &= SMCR_ETR_MASK;
 800d16e:	8afb      	ldrh	r3, [r7, #22]
 800d170:	b2db      	uxtb	r3, r3
 800d172:	82fb      	strh	r3, [r7, #22]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint16_t)(TIM_ExtTRGPrescaler | (uint16_t)(TIM_ExtTRGPolarity | (uint16_t)(ExtTRGFilter << (uint16_t)8)));
 800d174:	88fb      	ldrh	r3, [r7, #6]
 800d176:	021b      	lsls	r3, r3, #8
 800d178:	b29a      	uxth	r2, r3
 800d17a:	893b      	ldrh	r3, [r7, #8]
 800d17c:	4313      	orrs	r3, r2
 800d17e:	b29a      	uxth	r2, r3
 800d180:	897b      	ldrh	r3, [r7, #10]
 800d182:	4313      	orrs	r3, r2
 800d184:	b29a      	uxth	r2, r3
 800d186:	8afb      	ldrh	r3, [r7, #22]
 800d188:	4313      	orrs	r3, r2
 800d18a:	82fb      	strh	r3, [r7, #22]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d18c:	68fb      	ldr	r3, [r7, #12]
 800d18e:	8afa      	ldrh	r2, [r7, #22]
 800d190:	811a      	strh	r2, [r3, #8]
}
 800d192:	bf00      	nop
 800d194:	371c      	adds	r7, #28
 800d196:	46bd      	mov	sp, r7
 800d198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d19c:	4770      	bx	lr

0800d19e <TIM_EncoderInterfaceConfig>:
  *            @arg TIM_ICPolarity_Rising: IC Rising edge.
  * @retval None
  */
void TIM_EncoderInterfaceConfig(TIM_TypeDef* TIMx, uint16_t TIM_EncoderMode,
                                uint16_t TIM_IC1Polarity, uint16_t TIM_IC2Polarity)
{
 800d19e:	b480      	push	{r7}
 800d1a0:	b087      	sub	sp, #28
 800d1a2:	af00      	add	r7, sp, #0
 800d1a4:	60f8      	str	r0, [r7, #12]
 800d1a6:	4608      	mov	r0, r1
 800d1a8:	4611      	mov	r1, r2
 800d1aa:	461a      	mov	r2, r3
 800d1ac:	4603      	mov	r3, r0
 800d1ae:	817b      	strh	r3, [r7, #10]
 800d1b0:	460b      	mov	r3, r1
 800d1b2:	813b      	strh	r3, [r7, #8]
 800d1b4:	4613      	mov	r3, r2
 800d1b6:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpsmcr = 0;
 800d1b8:	2300      	movs	r3, #0
 800d1ba:	82fb      	strh	r3, [r7, #22]
  uint16_t tmpccmr1 = 0;
 800d1bc:	2300      	movs	r3, #0
 800d1be:	82bb      	strh	r3, [r7, #20]
  uint16_t tmpccer = 0;
 800d1c0:	2300      	movs	r3, #0
 800d1c2:	827b      	strh	r3, [r7, #18]
  assert_param(IS_TIM_ENCODER_MODE(TIM_EncoderMode));
  assert_param(IS_TIM_IC_POLARITY(TIM_IC1Polarity));
  assert_param(IS_TIM_IC_POLARITY(TIM_IC2Polarity));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800d1c4:	68fb      	ldr	r3, [r7, #12]
 800d1c6:	891b      	ldrh	r3, [r3, #8]
 800d1c8:	82fb      	strh	r3, [r7, #22]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 800d1ca:	68fb      	ldr	r3, [r7, #12]
 800d1cc:	8b1b      	ldrh	r3, [r3, #24]
 800d1ce:	82bb      	strh	r3, [r7, #20]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d1d0:	68fb      	ldr	r3, [r7, #12]
 800d1d2:	8c1b      	ldrh	r3, [r3, #32]
 800d1d4:	827b      	strh	r3, [r7, #18]

  /* Set the encoder Mode */
  tmpsmcr &= (uint16_t)~TIM_SMCR_SMS;
 800d1d6:	8afb      	ldrh	r3, [r7, #22]
 800d1d8:	f023 0307 	bic.w	r3, r3, #7
 800d1dc:	82fb      	strh	r3, [r7, #22]
  tmpsmcr |= TIM_EncoderMode;
 800d1de:	8afa      	ldrh	r2, [r7, #22]
 800d1e0:	897b      	ldrh	r3, [r7, #10]
 800d1e2:	4313      	orrs	r3, r2
 800d1e4:	82fb      	strh	r3, [r7, #22]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_CC2S);
 800d1e6:	8abb      	ldrh	r3, [r7, #20]
 800d1e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d1ec:	f023 0303 	bic.w	r3, r3, #3
 800d1f0:	82bb      	strh	r3, [r7, #20]
  tmpccmr1 |= TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;
 800d1f2:	8abb      	ldrh	r3, [r7, #20]
 800d1f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d1f8:	f043 0301 	orr.w	r3, r3, #1
 800d1fc:	82bb      	strh	r3, [r7, #20]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ((uint16_t)~TIM_CCER_CC1P) & ((uint16_t)~TIM_CCER_CC2P);
 800d1fe:	8a7b      	ldrh	r3, [r7, #18]
 800d200:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800d204:	827b      	strh	r3, [r7, #18]
  tmpccer |= (uint16_t)(TIM_IC1Polarity | (uint16_t)(TIM_IC2Polarity << (uint16_t)4));
 800d206:	88fb      	ldrh	r3, [r7, #6]
 800d208:	011b      	lsls	r3, r3, #4
 800d20a:	b29a      	uxth	r2, r3
 800d20c:	893b      	ldrh	r3, [r7, #8]
 800d20e:	4313      	orrs	r3, r2
 800d210:	b29a      	uxth	r2, r3
 800d212:	8a7b      	ldrh	r3, [r7, #18]
 800d214:	4313      	orrs	r3, r2
 800d216:	827b      	strh	r3, [r7, #18]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d218:	68fb      	ldr	r3, [r7, #12]
 800d21a:	8afa      	ldrh	r2, [r7, #22]
 800d21c:	811a      	strh	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
 800d21e:	68fb      	ldr	r3, [r7, #12]
 800d220:	8aba      	ldrh	r2, [r7, #20]
 800d222:	831a      	strh	r2, [r3, #24]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d224:	68fb      	ldr	r3, [r7, #12]
 800d226:	8a7a      	ldrh	r2, [r7, #18]
 800d228:	841a      	strh	r2, [r3, #32]
}
 800d22a:	bf00      	nop
 800d22c:	371c      	adds	r7, #28
 800d22e:	46bd      	mov	sp, r7
 800d230:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d234:	4770      	bx	lr

0800d236 <TIM_SelectHallSensor>:
  * @param  NewState: new state of the TIMx Hall sensor interface.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_SelectHallSensor(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 800d236:	b480      	push	{r7}
 800d238:	b083      	sub	sp, #12
 800d23a:	af00      	add	r7, sp, #0
 800d23c:	6078      	str	r0, [r7, #4]
 800d23e:	460b      	mov	r3, r1
 800d240:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800d242:	78fb      	ldrb	r3, [r7, #3]
 800d244:	2b00      	cmp	r3, #0
 800d246:	d008      	beq.n	800d25a <TIM_SelectHallSensor+0x24>
  {
    /* Set the TI1S Bit */
    TIMx->CR2 |= TIM_CR2_TI1S;
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	889b      	ldrh	r3, [r3, #4]
 800d24c:	b29b      	uxth	r3, r3
 800d24e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d252:	b29a      	uxth	r2, r3
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	809a      	strh	r2, [r3, #4]
  else
  {
    /* Reset the TI1S Bit */
    TIMx->CR2 &= (uint16_t)~TIM_CR2_TI1S;
  }
}
 800d258:	e007      	b.n	800d26a <TIM_SelectHallSensor+0x34>
    TIMx->CR2 &= (uint16_t)~TIM_CR2_TI1S;
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	889b      	ldrh	r3, [r3, #4]
 800d25e:	b29b      	uxth	r3, r3
 800d260:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d264:	b29a      	uxth	r2, r3
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	809a      	strh	r2, [r3, #4]
}
 800d26a:	bf00      	nop
 800d26c:	370c      	adds	r7, #12
 800d26e:	46bd      	mov	sp, r7
 800d270:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d274:	4770      	bx	lr

0800d276 <TIM_RemapConfig>:
  *            @arg TIM11_HSE:      TIM11 CH4 input is connected to HSE_RTC clock
  *                                 (HSE divided by a programmable prescaler)  
  * @retval None
  */
void TIM_RemapConfig(TIM_TypeDef* TIMx, uint16_t TIM_Remap)
{
 800d276:	b480      	push	{r7}
 800d278:	b083      	sub	sp, #12
 800d27a:	af00      	add	r7, sp, #0
 800d27c:	6078      	str	r0, [r7, #4]
 800d27e:	460b      	mov	r3, r1
 800d280:	807b      	strh	r3, [r7, #2]
 /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_REMAP(TIM_Remap));

  /* Set the Timer remapping configuration */
  TIMx->OR =  TIM_Remap;
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	887a      	ldrh	r2, [r7, #2]
 800d286:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
}
 800d28a:	bf00      	nop
 800d28c:	370c      	adds	r7, #12
 800d28e:	46bd      	mov	sp, r7
 800d290:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d294:	4770      	bx	lr

0800d296 <TI1_Config>:
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI1_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 800d296:	b480      	push	{r7}
 800d298:	b087      	sub	sp, #28
 800d29a:	af00      	add	r7, sp, #0
 800d29c:	60f8      	str	r0, [r7, #12]
 800d29e:	4608      	mov	r0, r1
 800d2a0:	4611      	mov	r1, r2
 800d2a2:	461a      	mov	r2, r3
 800d2a4:	4603      	mov	r3, r0
 800d2a6:	817b      	strh	r3, [r7, #10]
 800d2a8:	460b      	mov	r3, r1
 800d2aa:	813b      	strh	r3, [r7, #8]
 800d2ac:	4613      	mov	r3, r2
 800d2ae:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr1 = 0, tmpccer = 0;
 800d2b0:	2300      	movs	r3, #0
 800d2b2:	82fb      	strh	r3, [r7, #22]
 800d2b4:	2300      	movs	r3, #0
 800d2b6:	82bb      	strh	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
 800d2b8:	68fb      	ldr	r3, [r7, #12]
 800d2ba:	8c1b      	ldrh	r3, [r3, #32]
 800d2bc:	b29b      	uxth	r3, r3
 800d2be:	f023 0301 	bic.w	r3, r3, #1
 800d2c2:	b29a      	uxth	r2, r3
 800d2c4:	68fb      	ldr	r3, [r7, #12]
 800d2c6:	841a      	strh	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d2c8:	68fb      	ldr	r3, [r7, #12]
 800d2ca:	8b1b      	ldrh	r3, [r3, #24]
 800d2cc:	82fb      	strh	r3, [r7, #22]
  tmpccer = TIMx->CCER;
 800d2ce:	68fb      	ldr	r3, [r7, #12]
 800d2d0:	8c1b      	ldrh	r3, [r3, #32]
 800d2d2:	82bb      	strh	r3, [r7, #20]

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
 800d2d4:	8afb      	ldrh	r3, [r7, #22]
 800d2d6:	f023 03f3 	bic.w	r3, r3, #243	; 0xf3
 800d2da:	82fb      	strh	r3, [r7, #22]
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 800d2dc:	88fb      	ldrh	r3, [r7, #6]
 800d2de:	011b      	lsls	r3, r3, #4
 800d2e0:	b29a      	uxth	r2, r3
 800d2e2:	893b      	ldrh	r3, [r7, #8]
 800d2e4:	4313      	orrs	r3, r2
 800d2e6:	b29a      	uxth	r2, r3
 800d2e8:	8afb      	ldrh	r3, [r7, #22]
 800d2ea:	4313      	orrs	r3, r2
 800d2ec:	82fb      	strh	r3, [r7, #22]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800d2ee:	8abb      	ldrh	r3, [r7, #20]
 800d2f0:	f023 030a 	bic.w	r3, r3, #10
 800d2f4:	82bb      	strh	r3, [r7, #20]
  tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
 800d2f6:	897a      	ldrh	r2, [r7, #10]
 800d2f8:	8abb      	ldrh	r3, [r7, #20]
 800d2fa:	4313      	orrs	r3, r2
 800d2fc:	b29b      	uxth	r3, r3
 800d2fe:	f043 0301 	orr.w	r3, r3, #1
 800d302:	82bb      	strh	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800d304:	68fb      	ldr	r3, [r7, #12]
 800d306:	8afa      	ldrh	r2, [r7, #22]
 800d308:	831a      	strh	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d30a:	68fb      	ldr	r3, [r7, #12]
 800d30c:	8aba      	ldrh	r2, [r7, #20]
 800d30e:	841a      	strh	r2, [r3, #32]
}
 800d310:	bf00      	nop
 800d312:	371c      	adds	r7, #28
 800d314:	46bd      	mov	sp, r7
 800d316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d31a:	4770      	bx	lr

0800d31c <TI2_Config>:
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI2_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 800d31c:	b480      	push	{r7}
 800d31e:	b087      	sub	sp, #28
 800d320:	af00      	add	r7, sp, #0
 800d322:	60f8      	str	r0, [r7, #12]
 800d324:	4608      	mov	r0, r1
 800d326:	4611      	mov	r1, r2
 800d328:	461a      	mov	r2, r3
 800d32a:	4603      	mov	r3, r0
 800d32c:	817b      	strh	r3, [r7, #10]
 800d32e:	460b      	mov	r3, r1
 800d330:	813b      	strh	r3, [r7, #8]
 800d332:	4613      	mov	r3, r2
 800d334:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;
 800d336:	2300      	movs	r3, #0
 800d338:	82fb      	strh	r3, [r7, #22]
 800d33a:	2300      	movs	r3, #0
 800d33c:	82bb      	strh	r3, [r7, #20]
 800d33e:	2300      	movs	r3, #0
 800d340:	827b      	strh	r3, [r7, #18]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
 800d342:	68fb      	ldr	r3, [r7, #12]
 800d344:	8c1b      	ldrh	r3, [r3, #32]
 800d346:	b29b      	uxth	r3, r3
 800d348:	f023 0310 	bic.w	r3, r3, #16
 800d34c:	b29a      	uxth	r2, r3
 800d34e:	68fb      	ldr	r3, [r7, #12]
 800d350:	841a      	strh	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d352:	68fb      	ldr	r3, [r7, #12]
 800d354:	8b1b      	ldrh	r3, [r3, #24]
 800d356:	82fb      	strh	r3, [r7, #22]
  tmpccer = TIMx->CCER;
 800d358:	68fb      	ldr	r3, [r7, #12]
 800d35a:	8c1b      	ldrh	r3, [r3, #32]
 800d35c:	82bb      	strh	r3, [r7, #20]
  tmp = (uint16_t)(TIM_ICPolarity << 4);
 800d35e:	897b      	ldrh	r3, [r7, #10]
 800d360:	011b      	lsls	r3, r3, #4
 800d362:	827b      	strh	r3, [r7, #18]

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 800d364:	8afb      	ldrh	r3, [r7, #22]
 800d366:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d36a:	051b      	lsls	r3, r3, #20
 800d36c:	0d1b      	lsrs	r3, r3, #20
 800d36e:	82fb      	strh	r3, [r7, #22]
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
 800d370:	88fb      	ldrh	r3, [r7, #6]
 800d372:	031b      	lsls	r3, r3, #12
 800d374:	b29a      	uxth	r2, r3
 800d376:	8afb      	ldrh	r3, [r7, #22]
 800d378:	4313      	orrs	r3, r2
 800d37a:	82fb      	strh	r3, [r7, #22]
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);
 800d37c:	893b      	ldrh	r3, [r7, #8]
 800d37e:	021b      	lsls	r3, r3, #8
 800d380:	b29a      	uxth	r2, r3
 800d382:	8afb      	ldrh	r3, [r7, #22]
 800d384:	4313      	orrs	r3, r2
 800d386:	82fb      	strh	r3, [r7, #22]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800d388:	8abb      	ldrh	r3, [r7, #20]
 800d38a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800d38e:	82bb      	strh	r3, [r7, #20]
  tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
 800d390:	8a7a      	ldrh	r2, [r7, #18]
 800d392:	8abb      	ldrh	r3, [r7, #20]
 800d394:	4313      	orrs	r3, r2
 800d396:	b29b      	uxth	r3, r3
 800d398:	f043 0310 	orr.w	r3, r3, #16
 800d39c:	82bb      	strh	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800d39e:	68fb      	ldr	r3, [r7, #12]
 800d3a0:	8afa      	ldrh	r2, [r7, #22]
 800d3a2:	831a      	strh	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d3a4:	68fb      	ldr	r3, [r7, #12]
 800d3a6:	8aba      	ldrh	r2, [r7, #20]
 800d3a8:	841a      	strh	r2, [r3, #32]
}
 800d3aa:	bf00      	nop
 800d3ac:	371c      	adds	r7, #28
 800d3ae:	46bd      	mov	sp, r7
 800d3b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3b4:	4770      	bx	lr

0800d3b6 <TI3_Config>:
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI3_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 800d3b6:	b480      	push	{r7}
 800d3b8:	b087      	sub	sp, #28
 800d3ba:	af00      	add	r7, sp, #0
 800d3bc:	60f8      	str	r0, [r7, #12]
 800d3be:	4608      	mov	r0, r1
 800d3c0:	4611      	mov	r1, r2
 800d3c2:	461a      	mov	r2, r3
 800d3c4:	4603      	mov	r3, r0
 800d3c6:	817b      	strh	r3, [r7, #10]
 800d3c8:	460b      	mov	r3, r1
 800d3ca:	813b      	strh	r3, [r7, #8]
 800d3cc:	4613      	mov	r3, r2
 800d3ce:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;
 800d3d0:	2300      	movs	r3, #0
 800d3d2:	82fb      	strh	r3, [r7, #22]
 800d3d4:	2300      	movs	r3, #0
 800d3d6:	82bb      	strh	r3, [r7, #20]
 800d3d8:	2300      	movs	r3, #0
 800d3da:	827b      	strh	r3, [r7, #18]

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
 800d3dc:	68fb      	ldr	r3, [r7, #12]
 800d3de:	8c1b      	ldrh	r3, [r3, #32]
 800d3e0:	b29b      	uxth	r3, r3
 800d3e2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d3e6:	b29a      	uxth	r2, r3
 800d3e8:	68fb      	ldr	r3, [r7, #12]
 800d3ea:	841a      	strh	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800d3ec:	68fb      	ldr	r3, [r7, #12]
 800d3ee:	8b9b      	ldrh	r3, [r3, #28]
 800d3f0:	82fb      	strh	r3, [r7, #22]
  tmpccer = TIMx->CCER;
 800d3f2:	68fb      	ldr	r3, [r7, #12]
 800d3f4:	8c1b      	ldrh	r3, [r3, #32]
 800d3f6:	82bb      	strh	r3, [r7, #20]
  tmp = (uint16_t)(TIM_ICPolarity << 8);
 800d3f8:	897b      	ldrh	r3, [r7, #10]
 800d3fa:	021b      	lsls	r3, r3, #8
 800d3fc:	827b      	strh	r3, [r7, #18]

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR2_IC3F);
 800d3fe:	8afb      	ldrh	r3, [r7, #22]
 800d400:	f023 03f3 	bic.w	r3, r3, #243	; 0xf3
 800d404:	82fb      	strh	r3, [r7, #22]
  tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 800d406:	88fb      	ldrh	r3, [r7, #6]
 800d408:	011b      	lsls	r3, r3, #4
 800d40a:	b29a      	uxth	r2, r3
 800d40c:	893b      	ldrh	r3, [r7, #8]
 800d40e:	4313      	orrs	r3, r2
 800d410:	b29a      	uxth	r2, r3
 800d412:	8afb      	ldrh	r3, [r7, #22]
 800d414:	4313      	orrs	r3, r2
 800d416:	82fb      	strh	r3, [r7, #22]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800d418:	8abb      	ldrh	r3, [r7, #20]
 800d41a:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800d41e:	82bb      	strh	r3, [r7, #20]
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC3E);
 800d420:	8a7a      	ldrh	r2, [r7, #18]
 800d422:	8abb      	ldrh	r3, [r7, #20]
 800d424:	4313      	orrs	r3, r2
 800d426:	b29b      	uxth	r3, r3
 800d428:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d42c:	82bb      	strh	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800d42e:	68fb      	ldr	r3, [r7, #12]
 800d430:	8afa      	ldrh	r2, [r7, #22]
 800d432:	839a      	strh	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800d434:	68fb      	ldr	r3, [r7, #12]
 800d436:	8aba      	ldrh	r2, [r7, #20]
 800d438:	841a      	strh	r2, [r3, #32]
}
 800d43a:	bf00      	nop
 800d43c:	371c      	adds	r7, #28
 800d43e:	46bd      	mov	sp, r7
 800d440:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d444:	4770      	bx	lr

0800d446 <TI4_Config>:
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI4_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 800d446:	b480      	push	{r7}
 800d448:	b087      	sub	sp, #28
 800d44a:	af00      	add	r7, sp, #0
 800d44c:	60f8      	str	r0, [r7, #12]
 800d44e:	4608      	mov	r0, r1
 800d450:	4611      	mov	r1, r2
 800d452:	461a      	mov	r2, r3
 800d454:	4603      	mov	r3, r0
 800d456:	817b      	strh	r3, [r7, #10]
 800d458:	460b      	mov	r3, r1
 800d45a:	813b      	strh	r3, [r7, #8]
 800d45c:	4613      	mov	r3, r2
 800d45e:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;
 800d460:	2300      	movs	r3, #0
 800d462:	82fb      	strh	r3, [r7, #22]
 800d464:	2300      	movs	r3, #0
 800d466:	82bb      	strh	r3, [r7, #20]
 800d468:	2300      	movs	r3, #0
 800d46a:	827b      	strh	r3, [r7, #18]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC4E;
 800d46c:	68fb      	ldr	r3, [r7, #12]
 800d46e:	8c1b      	ldrh	r3, [r3, #32]
 800d470:	b29b      	uxth	r3, r3
 800d472:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d476:	b29a      	uxth	r2, r3
 800d478:	68fb      	ldr	r3, [r7, #12]
 800d47a:	841a      	strh	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800d47c:	68fb      	ldr	r3, [r7, #12]
 800d47e:	8b9b      	ldrh	r3, [r3, #28]
 800d480:	82fb      	strh	r3, [r7, #22]
  tmpccer = TIMx->CCER;
 800d482:	68fb      	ldr	r3, [r7, #12]
 800d484:	8c1b      	ldrh	r3, [r3, #32]
 800d486:	82bb      	strh	r3, [r7, #20]
  tmp = (uint16_t)(TIM_ICPolarity << 12);
 800d488:	897b      	ldrh	r3, [r7, #10]
 800d48a:	031b      	lsls	r3, r3, #12
 800d48c:	827b      	strh	r3, [r7, #18]

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 800d48e:	8afb      	ldrh	r3, [r7, #22]
 800d490:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d494:	051b      	lsls	r3, r3, #20
 800d496:	0d1b      	lsrs	r3, r3, #20
 800d498:	82fb      	strh	r3, [r7, #22]
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
 800d49a:	893b      	ldrh	r3, [r7, #8]
 800d49c:	021b      	lsls	r3, r3, #8
 800d49e:	b29a      	uxth	r2, r3
 800d4a0:	8afb      	ldrh	r3, [r7, #22]
 800d4a2:	4313      	orrs	r3, r2
 800d4a4:	82fb      	strh	r3, [r7, #22]
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);
 800d4a6:	88fb      	ldrh	r3, [r7, #6]
 800d4a8:	031b      	lsls	r3, r3, #12
 800d4aa:	b29a      	uxth	r2, r3
 800d4ac:	8afb      	ldrh	r3, [r7, #22]
 800d4ae:	4313      	orrs	r3, r2
 800d4b0:	82fb      	strh	r3, [r7, #22]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800d4b2:	8abb      	ldrh	r3, [r7, #20]
 800d4b4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d4b8:	045b      	lsls	r3, r3, #17
 800d4ba:	0c5b      	lsrs	r3, r3, #17
 800d4bc:	82bb      	strh	r3, [r7, #20]
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC4E);
 800d4be:	8a7a      	ldrh	r2, [r7, #18]
 800d4c0:	8abb      	ldrh	r3, [r7, #20]
 800d4c2:	4313      	orrs	r3, r2
 800d4c4:	b29b      	uxth	r3, r3
 800d4c6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800d4ca:	82bb      	strh	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800d4cc:	68fb      	ldr	r3, [r7, #12]
 800d4ce:	8afa      	ldrh	r2, [r7, #22]
 800d4d0:	839a      	strh	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800d4d2:	68fb      	ldr	r3, [r7, #12]
 800d4d4:	8aba      	ldrh	r2, [r7, #20]
 800d4d6:	841a      	strh	r2, [r3, #32]
}
 800d4d8:	bf00      	nop
 800d4da:	371c      	adds	r7, #28
 800d4dc:	46bd      	mov	sp, r7
 800d4de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4e2:	4770      	bx	lr

0800d4e4 <USART_DeInit>:
  * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
  *         UART peripheral.
  * @retval None
  */
void USART_DeInit(USART_TypeDef* USARTx)
{
 800d4e4:	b580      	push	{r7, lr}
 800d4e6:	b082      	sub	sp, #8
 800d4e8:	af00      	add	r7, sp, #0
 800d4ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  if (USARTx == USART1)
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	4a3b      	ldr	r2, [pc, #236]	; (800d5dc <USART_DeInit+0xf8>)
 800d4f0:	4293      	cmp	r3, r2
 800d4f2:	d108      	bne.n	800d506 <USART_DeInit+0x22>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
 800d4f4:	2101      	movs	r1, #1
 800d4f6:	2010      	movs	r0, #16
 800d4f8:	f7fb fb32 	bl	8008b60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
 800d4fc:	2100      	movs	r1, #0
 800d4fe:	2010      	movs	r0, #16
 800d500:	f7fb fb2e 	bl	8008b60 <RCC_APB2PeriphResetCmd>
    { 
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, DISABLE);
    }
  }
}
 800d504:	e065      	b.n	800d5d2 <USART_DeInit+0xee>
  else if (USARTx == USART2)
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	4a35      	ldr	r2, [pc, #212]	; (800d5e0 <USART_DeInit+0xfc>)
 800d50a:	4293      	cmp	r3, r2
 800d50c:	d10a      	bne.n	800d524 <USART_DeInit+0x40>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
 800d50e:	2101      	movs	r1, #1
 800d510:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800d514:	f7fb fb04 	bl	8008b20 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
 800d518:	2100      	movs	r1, #0
 800d51a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800d51e:	f7fb faff 	bl	8008b20 <RCC_APB1PeriphResetCmd>
}
 800d522:	e056      	b.n	800d5d2 <USART_DeInit+0xee>
  else if (USARTx == USART3)
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	4a2f      	ldr	r2, [pc, #188]	; (800d5e4 <USART_DeInit+0x100>)
 800d528:	4293      	cmp	r3, r2
 800d52a:	d10a      	bne.n	800d542 <USART_DeInit+0x5e>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
 800d52c:	2101      	movs	r1, #1
 800d52e:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800d532:	f7fb faf5 	bl	8008b20 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
 800d536:	2100      	movs	r1, #0
 800d538:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800d53c:	f7fb faf0 	bl	8008b20 <RCC_APB1PeriphResetCmd>
}
 800d540:	e047      	b.n	800d5d2 <USART_DeInit+0xee>
  else if (USARTx == UART4)
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	4a28      	ldr	r2, [pc, #160]	; (800d5e8 <USART_DeInit+0x104>)
 800d546:	4293      	cmp	r3, r2
 800d548:	d10a      	bne.n	800d560 <USART_DeInit+0x7c>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
 800d54a:	2101      	movs	r1, #1
 800d54c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800d550:	f7fb fae6 	bl	8008b20 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
 800d554:	2100      	movs	r1, #0
 800d556:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800d55a:	f7fb fae1 	bl	8008b20 <RCC_APB1PeriphResetCmd>
}
 800d55e:	e038      	b.n	800d5d2 <USART_DeInit+0xee>
  else if (USARTx == UART5)
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	4a22      	ldr	r2, [pc, #136]	; (800d5ec <USART_DeInit+0x108>)
 800d564:	4293      	cmp	r3, r2
 800d566:	d10a      	bne.n	800d57e <USART_DeInit+0x9a>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
 800d568:	2101      	movs	r1, #1
 800d56a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800d56e:	f7fb fad7 	bl	8008b20 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
 800d572:	2100      	movs	r1, #0
 800d574:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800d578:	f7fb fad2 	bl	8008b20 <RCC_APB1PeriphResetCmd>
}
 800d57c:	e029      	b.n	800d5d2 <USART_DeInit+0xee>
  else if (USARTx == USART6)
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	4a1b      	ldr	r2, [pc, #108]	; (800d5f0 <USART_DeInit+0x10c>)
 800d582:	4293      	cmp	r3, r2
 800d584:	d108      	bne.n	800d598 <USART_DeInit+0xb4>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, ENABLE);
 800d586:	2101      	movs	r1, #1
 800d588:	2020      	movs	r0, #32
 800d58a:	f7fb fae9 	bl	8008b60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, DISABLE);
 800d58e:	2100      	movs	r1, #0
 800d590:	2020      	movs	r0, #32
 800d592:	f7fb fae5 	bl	8008b60 <RCC_APB2PeriphResetCmd>
}
 800d596:	e01c      	b.n	800d5d2 <USART_DeInit+0xee>
  else if (USARTx == UART7)
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	4a16      	ldr	r2, [pc, #88]	; (800d5f4 <USART_DeInit+0x110>)
 800d59c:	4293      	cmp	r3, r2
 800d59e:	d10a      	bne.n	800d5b6 <USART_DeInit+0xd2>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART7, ENABLE);
 800d5a0:	2101      	movs	r1, #1
 800d5a2:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800d5a6:	f7fb fabb 	bl	8008b20 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART7, DISABLE);
 800d5aa:	2100      	movs	r1, #0
 800d5ac:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800d5b0:	f7fb fab6 	bl	8008b20 <RCC_APB1PeriphResetCmd>
}
 800d5b4:	e00d      	b.n	800d5d2 <USART_DeInit+0xee>
    if (USARTx == UART8)
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	4a0f      	ldr	r2, [pc, #60]	; (800d5f8 <USART_DeInit+0x114>)
 800d5ba:	4293      	cmp	r3, r2
 800d5bc:	d109      	bne.n	800d5d2 <USART_DeInit+0xee>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, ENABLE);
 800d5be:	2101      	movs	r1, #1
 800d5c0:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800d5c4:	f7fb faac 	bl	8008b20 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, DISABLE);
 800d5c8:	2100      	movs	r1, #0
 800d5ca:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800d5ce:	f7fb faa7 	bl	8008b20 <RCC_APB1PeriphResetCmd>
}
 800d5d2:	bf00      	nop
 800d5d4:	3708      	adds	r7, #8
 800d5d6:	46bd      	mov	sp, r7
 800d5d8:	bd80      	pop	{r7, pc}
 800d5da:	bf00      	nop
 800d5dc:	40011000 	.word	0x40011000
 800d5e0:	40004400 	.word	0x40004400
 800d5e4:	40004800 	.word	0x40004800
 800d5e8:	40004c00 	.word	0x40004c00
 800d5ec:	40005000 	.word	0x40005000
 800d5f0:	40011400 	.word	0x40011400
 800d5f4:	40007800 	.word	0x40007800
 800d5f8:	40007c00 	.word	0x40007c00

0800d5fc <USART_Init>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 800d5fc:	b580      	push	{r7, lr}
 800d5fe:	b08a      	sub	sp, #40	; 0x28
 800d600:	af00      	add	r7, sp, #0
 800d602:	6078      	str	r0, [r7, #4]
 800d604:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 800d606:	2300      	movs	r3, #0
 800d608:	627b      	str	r3, [r7, #36]	; 0x24
 800d60a:	2300      	movs	r3, #0
 800d60c:	623b      	str	r3, [r7, #32]
  uint32_t integerdivider = 0x00;
 800d60e:	2300      	movs	r3, #0
 800d610:	61fb      	str	r3, [r7, #28]
  uint32_t fractionaldivider = 0x00;
 800d612:	2300      	movs	r3, #0
 800d614:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  }

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	8a1b      	ldrh	r3, [r3, #16]
 800d61a:	b29b      	uxth	r3, r3
 800d61c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 800d61e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d620:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800d624:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 800d626:	683b      	ldr	r3, [r7, #0]
 800d628:	88db      	ldrh	r3, [r3, #6]
 800d62a:	461a      	mov	r2, r3
 800d62c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d62e:	4313      	orrs	r3, r2
 800d630:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 800d632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d634:	b29a      	uxth	r2, r3
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	899b      	ldrh	r3, [r3, #12]
 800d63e:	b29b      	uxth	r3, r3
 800d640:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 800d642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d644:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800d648:	f023 030c 	bic.w	r3, r3, #12
 800d64c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 800d64e:	683b      	ldr	r3, [r7, #0]
 800d650:	889a      	ldrh	r2, [r3, #4]
 800d652:	683b      	ldr	r3, [r7, #0]
 800d654:	891b      	ldrh	r3, [r3, #8]
 800d656:	4313      	orrs	r3, r2
 800d658:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
 800d65a:	683b      	ldr	r3, [r7, #0]
 800d65c:	895b      	ldrh	r3, [r3, #10]
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 800d65e:	4313      	orrs	r3, r2
 800d660:	b29b      	uxth	r3, r3
 800d662:	461a      	mov	r2, r3
 800d664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d666:	4313      	orrs	r3, r2
 800d668:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 800d66a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d66c:	b29a      	uxth	r2, r3
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	8a9b      	ldrh	r3, [r3, #20]
 800d676:	b29b      	uxth	r3, r3
 800d678:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 800d67a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d67c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d680:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 800d682:	683b      	ldr	r3, [r7, #0]
 800d684:	899b      	ldrh	r3, [r3, #12]
 800d686:	461a      	mov	r2, r3
 800d688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d68a:	4313      	orrs	r3, r2
 800d68c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 800d68e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d690:	b29a      	uxth	r2, r3
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate */
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 800d696:	f107 0308 	add.w	r3, r7, #8
 800d69a:	4618      	mov	r0, r3
 800d69c:	f7fa ff90 	bl	80085c0 <RCC_GetClocksFreq>

  if ((USARTx == USART1) || (USARTx == USART6))
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	4a30      	ldr	r2, [pc, #192]	; (800d764 <USART_Init+0x168>)
 800d6a4:	4293      	cmp	r3, r2
 800d6a6:	d003      	beq.n	800d6b0 <USART_Init+0xb4>
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	4a2f      	ldr	r2, [pc, #188]	; (800d768 <USART_Init+0x16c>)
 800d6ac:	4293      	cmp	r3, r2
 800d6ae:	d102      	bne.n	800d6b6 <USART_Init+0xba>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 800d6b0:	697b      	ldr	r3, [r7, #20]
 800d6b2:	623b      	str	r3, [r7, #32]
 800d6b4:	e001      	b.n	800d6ba <USART_Init+0xbe>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 800d6b6:	693b      	ldr	r3, [r7, #16]
 800d6b8:	623b      	str	r3, [r7, #32]
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	899b      	ldrh	r3, [r3, #12]
 800d6be:	b29b      	uxth	r3, r3
 800d6c0:	b21b      	sxth	r3, r3
 800d6c2:	2b00      	cmp	r3, #0
 800d6c4:	da0c      	bge.n	800d6e0 <USART_Init+0xe4>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 800d6c6:	6a3a      	ldr	r2, [r7, #32]
 800d6c8:	4613      	mov	r3, r2
 800d6ca:	009b      	lsls	r3, r3, #2
 800d6cc:	4413      	add	r3, r2
 800d6ce:	009a      	lsls	r2, r3, #2
 800d6d0:	441a      	add	r2, r3
 800d6d2:	683b      	ldr	r3, [r7, #0]
 800d6d4:	681b      	ldr	r3, [r3, #0]
 800d6d6:	005b      	lsls	r3, r3, #1
 800d6d8:	fbb2 f3f3 	udiv	r3, r2, r3
 800d6dc:	61fb      	str	r3, [r7, #28]
 800d6de:	e00b      	b.n	800d6f8 <USART_Init+0xfc>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 800d6e0:	6a3a      	ldr	r2, [r7, #32]
 800d6e2:	4613      	mov	r3, r2
 800d6e4:	009b      	lsls	r3, r3, #2
 800d6e6:	4413      	add	r3, r2
 800d6e8:	009a      	lsls	r2, r3, #2
 800d6ea:	441a      	add	r2, r3
 800d6ec:	683b      	ldr	r3, [r7, #0]
 800d6ee:	681b      	ldr	r3, [r3, #0]
 800d6f0:	009b      	lsls	r3, r3, #2
 800d6f2:	fbb2 f3f3 	udiv	r3, r2, r3
 800d6f6:	61fb      	str	r3, [r7, #28]
  }
  tmpreg = (integerdivider / 100) << 4;
 800d6f8:	69fb      	ldr	r3, [r7, #28]
 800d6fa:	4a1c      	ldr	r2, [pc, #112]	; (800d76c <USART_Init+0x170>)
 800d6fc:	fba2 2303 	umull	r2, r3, r2, r3
 800d700:	095b      	lsrs	r3, r3, #5
 800d702:	011b      	lsls	r3, r3, #4
 800d704:	627b      	str	r3, [r7, #36]	; 0x24

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 800d706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d708:	091b      	lsrs	r3, r3, #4
 800d70a:	2264      	movs	r2, #100	; 0x64
 800d70c:	fb02 f303 	mul.w	r3, r2, r3
 800d710:	69fa      	ldr	r2, [r7, #28]
 800d712:	1ad3      	subs	r3, r2, r3
 800d714:	61bb      	str	r3, [r7, #24]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	899b      	ldrh	r3, [r3, #12]
 800d71a:	b29b      	uxth	r3, r3
 800d71c:	b21b      	sxth	r3, r3
 800d71e:	2b00      	cmp	r3, #0
 800d720:	da0c      	bge.n	800d73c <USART_Init+0x140>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 800d722:	69bb      	ldr	r3, [r7, #24]
 800d724:	00db      	lsls	r3, r3, #3
 800d726:	3332      	adds	r3, #50	; 0x32
 800d728:	4a10      	ldr	r2, [pc, #64]	; (800d76c <USART_Init+0x170>)
 800d72a:	fba2 2303 	umull	r2, r3, r2, r3
 800d72e:	095b      	lsrs	r3, r3, #5
 800d730:	f003 0307 	and.w	r3, r3, #7
 800d734:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d736:	4313      	orrs	r3, r2
 800d738:	627b      	str	r3, [r7, #36]	; 0x24
 800d73a:	e00b      	b.n	800d754 <USART_Init+0x158>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 800d73c:	69bb      	ldr	r3, [r7, #24]
 800d73e:	011b      	lsls	r3, r3, #4
 800d740:	3332      	adds	r3, #50	; 0x32
 800d742:	4a0a      	ldr	r2, [pc, #40]	; (800d76c <USART_Init+0x170>)
 800d744:	fba2 2303 	umull	r2, r3, r2, r3
 800d748:	095b      	lsrs	r3, r3, #5
 800d74a:	f003 030f 	and.w	r3, r3, #15
 800d74e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d750:	4313      	orrs	r3, r2
 800d752:	627b      	str	r3, [r7, #36]	; 0x24
  }
  
  /* Write to USART BRR register */
  USARTx->BRR = (uint16_t)tmpreg;
 800d754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d756:	b29a      	uxth	r2, r3
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	811a      	strh	r2, [r3, #8]
}
 800d75c:	bf00      	nop
 800d75e:	3728      	adds	r7, #40	; 0x28
 800d760:	46bd      	mov	sp, r7
 800d762:	bd80      	pop	{r7, pc}
 800d764:	40011000 	.word	0x40011000
 800d768:	40011400 	.word	0x40011400
 800d76c:	51eb851f 	.word	0x51eb851f

0800d770 <USART_StructInit>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
 800d770:	b480      	push	{r7}
 800d772:	b083      	sub	sp, #12
 800d774:	af00      	add	r7, sp, #0
 800d776:	6078      	str	r0, [r7, #4]
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800d77e:	601a      	str	r2, [r3, #0]
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	2200      	movs	r2, #0
 800d784:	809a      	strh	r2, [r3, #4]
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	2200      	movs	r2, #0
 800d78a:	80da      	strh	r2, [r3, #6]
  USART_InitStruct->USART_Parity = USART_Parity_No ;
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	2200      	movs	r2, #0
 800d790:	811a      	strh	r2, [r3, #8]
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	220c      	movs	r2, #12
 800d796:	815a      	strh	r2, [r3, #10]
  USART_InitStruct->USART_HardwareFlowControl = USART_HardwareFlowControl_None;  
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	2200      	movs	r2, #0
 800d79c:	819a      	strh	r2, [r3, #12]
}
 800d79e:	bf00      	nop
 800d7a0:	370c      	adds	r7, #12
 800d7a2:	46bd      	mov	sp, r7
 800d7a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7a8:	4770      	bx	lr

0800d7aa <USART_ClockInit>:
  *         contains the configuration information for the specified  USART peripheral.
  * @note   The Smart Card and Synchronous modes are not available for UART4 and UART5.    
  * @retval None
  */
void USART_ClockInit(USART_TypeDef* USARTx, USART_ClockInitTypeDef* USART_ClockInitStruct)
{
 800d7aa:	b480      	push	{r7}
 800d7ac:	b085      	sub	sp, #20
 800d7ae:	af00      	add	r7, sp, #0
 800d7b0:	6078      	str	r0, [r7, #4]
 800d7b2:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00;
 800d7b4:	2300      	movs	r3, #0
 800d7b6:	60fb      	str	r3, [r7, #12]
  assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
  assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
  
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	8a1b      	ldrh	r3, [r3, #16]
 800d7bc:	b29b      	uxth	r3, r3
 800d7be:	60fb      	str	r3, [r7, #12]
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= (uint32_t)~((uint32_t)CR2_CLOCK_CLEAR_MASK);
 800d7c0:	68fb      	ldr	r3, [r7, #12]
 800d7c2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800d7c6:	60fb      	str	r3, [r7, #12]
  /* Configure the USART Clock, CPOL, CPHA and LastBit ------------*/
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
 800d7c8:	683b      	ldr	r3, [r7, #0]
 800d7ca:	881a      	ldrh	r2, [r3, #0]
 800d7cc:	683b      	ldr	r3, [r7, #0]
 800d7ce:	885b      	ldrh	r3, [r3, #2]
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
 800d7d0:	4313      	orrs	r3, r2
 800d7d2:	b29a      	uxth	r2, r3
 800d7d4:	683b      	ldr	r3, [r7, #0]
 800d7d6:	889b      	ldrh	r3, [r3, #4]
 800d7d8:	4313      	orrs	r3, r2
 800d7da:	b29a      	uxth	r2, r3
 800d7dc:	683b      	ldr	r3, [r7, #0]
 800d7de:	88db      	ldrh	r3, [r3, #6]
 800d7e0:	4313      	orrs	r3, r2
 800d7e2:	b29b      	uxth	r3, r3
 800d7e4:	461a      	mov	r2, r3
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
 800d7e6:	68fb      	ldr	r3, [r7, #12]
 800d7e8:	4313      	orrs	r3, r2
 800d7ea:	60fb      	str	r3, [r7, #12]
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 800d7ec:	68fb      	ldr	r3, [r7, #12]
 800d7ee:	b29a      	uxth	r2, r3
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	821a      	strh	r2, [r3, #16]
}
 800d7f4:	bf00      	nop
 800d7f6:	3714      	adds	r7, #20
 800d7f8:	46bd      	mov	sp, r7
 800d7fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7fe:	4770      	bx	lr

0800d800 <USART_ClockStructInit>:
  * @param  USART_ClockInitStruct: pointer to a USART_ClockInitTypeDef structure
  *         which will be initialized.
  * @retval None
  */
void USART_ClockStructInit(USART_ClockInitTypeDef* USART_ClockInitStruct)
{
 800d800:	b480      	push	{r7}
 800d802:	b083      	sub	sp, #12
 800d804:	af00      	add	r7, sp, #0
 800d806:	6078      	str	r0, [r7, #4]
  /* USART_ClockInitStruct members default value */
  USART_ClockInitStruct->USART_Clock = USART_Clock_Disable;
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	2200      	movs	r2, #0
 800d80c:	801a      	strh	r2, [r3, #0]
  USART_ClockInitStruct->USART_CPOL = USART_CPOL_Low;
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	2200      	movs	r2, #0
 800d812:	805a      	strh	r2, [r3, #2]
  USART_ClockInitStruct->USART_CPHA = USART_CPHA_1Edge;
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	2200      	movs	r2, #0
 800d818:	809a      	strh	r2, [r3, #4]
  USART_ClockInitStruct->USART_LastBit = USART_LastBit_Disable;
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	2200      	movs	r2, #0
 800d81e:	80da      	strh	r2, [r3, #6]
}
 800d820:	bf00      	nop
 800d822:	370c      	adds	r7, #12
 800d824:	46bd      	mov	sp, r7
 800d826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d82a:	4770      	bx	lr

0800d82c <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 800d82c:	b480      	push	{r7}
 800d82e:	b083      	sub	sp, #12
 800d830:	af00      	add	r7, sp, #0
 800d832:	6078      	str	r0, [r7, #4]
 800d834:	460b      	mov	r3, r1
 800d836:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800d838:	78fb      	ldrb	r3, [r7, #3]
 800d83a:	2b00      	cmp	r3, #0
 800d83c:	d008      	beq.n	800d850 <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	899b      	ldrh	r3, [r3, #12]
 800d842:	b29b      	uxth	r3, r3
 800d844:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800d848:	b29a      	uxth	r2, r3
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
  }
}
 800d84e:	e007      	b.n	800d860 <USART_Cmd+0x34>
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	899b      	ldrh	r3, [r3, #12]
 800d854:	b29b      	uxth	r3, r3
 800d856:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d85a:	b29a      	uxth	r2, r3
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	819a      	strh	r2, [r3, #12]
}
 800d860:	bf00      	nop
 800d862:	370c      	adds	r7, #12
 800d864:	46bd      	mov	sp, r7
 800d866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d86a:	4770      	bx	lr

0800d86c <USART_SetPrescaler>:
  * @param  USART_Prescaler: specifies the prescaler clock. 
  * @note   The function is used for IrDA mode with UART4 and UART5.   
  * @retval None
  */
void USART_SetPrescaler(USART_TypeDef* USARTx, uint8_t USART_Prescaler)
{ 
 800d86c:	b480      	push	{r7}
 800d86e:	b083      	sub	sp, #12
 800d870:	af00      	add	r7, sp, #0
 800d872:	6078      	str	r0, [r7, #4]
 800d874:	460b      	mov	r3, r1
 800d876:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Clear the USART prescaler */
  USARTx->GTPR &= USART_GTPR_GT;
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	8b1b      	ldrh	r3, [r3, #24]
 800d87c:	b29b      	uxth	r3, r3
 800d87e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800d882:	b29a      	uxth	r2, r3
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	831a      	strh	r2, [r3, #24]
  /* Set the USART prescaler */
  USARTx->GTPR |= USART_Prescaler;
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	8b1b      	ldrh	r3, [r3, #24]
 800d88c:	b29a      	uxth	r2, r3
 800d88e:	78fb      	ldrb	r3, [r7, #3]
 800d890:	b29b      	uxth	r3, r3
 800d892:	4313      	orrs	r3, r2
 800d894:	b29a      	uxth	r2, r3
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	831a      	strh	r2, [r3, #24]
}
 800d89a:	bf00      	nop
 800d89c:	370c      	adds	r7, #12
 800d89e:	46bd      	mov	sp, r7
 800d8a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8a4:	4770      	bx	lr

0800d8a6 <USART_OverSampling8Cmd>:
  * @param  NewState: new state of the USART 8x oversampling mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_OverSampling8Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 800d8a6:	b480      	push	{r7}
 800d8a8:	b083      	sub	sp, #12
 800d8aa:	af00      	add	r7, sp, #0
 800d8ac:	6078      	str	r0, [r7, #4]
 800d8ae:	460b      	mov	r3, r1
 800d8b0:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800d8b2:	78fb      	ldrb	r3, [r7, #3]
 800d8b4:	2b00      	cmp	r3, #0
 800d8b6:	d00a      	beq.n	800d8ce <USART_OverSampling8Cmd+0x28>
  {
    /* Enable the 8x Oversampling mode by setting the OVER8 bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_OVER8;
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	899b      	ldrh	r3, [r3, #12]
 800d8bc:	b29b      	uxth	r3, r3
 800d8be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d8c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d8c6:	b29a      	uxth	r2, r3
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the 8x Oversampling mode by clearing the OVER8 bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_OVER8);
  }
}  
 800d8cc:	e007      	b.n	800d8de <USART_OverSampling8Cmd+0x38>
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_OVER8);
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	899b      	ldrh	r3, [r3, #12]
 800d8d2:	b29b      	uxth	r3, r3
 800d8d4:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800d8d8:	b29a      	uxth	r2, r3
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	819a      	strh	r2, [r3, #12]
}  
 800d8de:	bf00      	nop
 800d8e0:	370c      	adds	r7, #12
 800d8e2:	46bd      	mov	sp, r7
 800d8e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8e8:	4770      	bx	lr

0800d8ea <USART_OneBitMethodCmd>:
  * @param  NewState: new state of the USART one bit sampling method.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_OneBitMethodCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 800d8ea:	b480      	push	{r7}
 800d8ec:	b083      	sub	sp, #12
 800d8ee:	af00      	add	r7, sp, #0
 800d8f0:	6078      	str	r0, [r7, #4]
 800d8f2:	460b      	mov	r3, r1
 800d8f4:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800d8f6:	78fb      	ldrb	r3, [r7, #3]
 800d8f8:	2b00      	cmp	r3, #0
 800d8fa:	d008      	beq.n	800d90e <USART_OneBitMethodCmd+0x24>
  {
    /* Enable the one bit method by setting the ONEBITE bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_ONEBIT;
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	8a9b      	ldrh	r3, [r3, #20]
 800d900:	b29b      	uxth	r3, r3
 800d902:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800d906:	b29a      	uxth	r2, r3
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	829a      	strh	r2, [r3, #20]
  else
  {
    /* Disable the one bit method by clearing the ONEBITE bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_ONEBIT);
  }
}
 800d90c:	e007      	b.n	800d91e <USART_OneBitMethodCmd+0x34>
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_ONEBIT);
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	8a9b      	ldrh	r3, [r3, #20]
 800d912:	b29b      	uxth	r3, r3
 800d914:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d918:	b29a      	uxth	r2, r3
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	829a      	strh	r2, [r3, #20]
}
 800d91e:	bf00      	nop
 800d920:	370c      	adds	r7, #12
 800d922:	46bd      	mov	sp, r7
 800d924:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d928:	4770      	bx	lr

0800d92a <USART_SendData>:
  *         UART peripheral.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 800d92a:	b480      	push	{r7}
 800d92c:	b083      	sub	sp, #12
 800d92e:	af00      	add	r7, sp, #0
 800d930:	6078      	str	r0, [r7, #4]
 800d932:	460b      	mov	r3, r1
 800d934:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 800d936:	887b      	ldrh	r3, [r7, #2]
 800d938:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d93c:	b29a      	uxth	r2, r3
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	809a      	strh	r2, [r3, #4]
}
 800d942:	bf00      	nop
 800d944:	370c      	adds	r7, #12
 800d946:	46bd      	mov	sp, r7
 800d948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d94c:	4770      	bx	lr

0800d94e <USART_ReceiveData>:
  * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
  *         UART peripheral.
  * @retval The received data.
  */
uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
 800d94e:	b480      	push	{r7}
 800d950:	b083      	sub	sp, #12
 800d952:	af00      	add	r7, sp, #0
 800d954:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	889b      	ldrh	r3, [r3, #4]
 800d95a:	b29b      	uxth	r3, r3
 800d95c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d960:	b29b      	uxth	r3, r3
}
 800d962:	4618      	mov	r0, r3
 800d964:	370c      	adds	r7, #12
 800d966:	46bd      	mov	sp, r7
 800d968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d96c:	4770      	bx	lr

0800d96e <USART_SetAddress>:
  *         UART peripheral.
  * @param  USART_Address: Indicates the address of the USART node.
  * @retval None
  */
void USART_SetAddress(USART_TypeDef* USARTx, uint8_t USART_Address)
{
 800d96e:	b480      	push	{r7}
 800d970:	b083      	sub	sp, #12
 800d972:	af00      	add	r7, sp, #0
 800d974:	6078      	str	r0, [r7, #4]
 800d976:	460b      	mov	r3, r1
 800d978:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_ADDRESS(USART_Address)); 
    
  /* Clear the USART address */
  USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_ADD);
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	8a1b      	ldrh	r3, [r3, #16]
 800d97e:	b29b      	uxth	r3, r3
 800d980:	f023 030f 	bic.w	r3, r3, #15
 800d984:	b29a      	uxth	r2, r3
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	821a      	strh	r2, [r3, #16]
  /* Set the USART address node */
  USARTx->CR2 |= USART_Address;
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	8a1b      	ldrh	r3, [r3, #16]
 800d98e:	b29a      	uxth	r2, r3
 800d990:	78fb      	ldrb	r3, [r7, #3]
 800d992:	b29b      	uxth	r3, r3
 800d994:	4313      	orrs	r3, r2
 800d996:	b29a      	uxth	r2, r3
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	821a      	strh	r2, [r3, #16]
}
 800d99c:	bf00      	nop
 800d99e:	370c      	adds	r7, #12
 800d9a0:	46bd      	mov	sp, r7
 800d9a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9a6:	4770      	bx	lr

0800d9a8 <USART_ReceiverWakeUpCmd>:
  * @param  NewState: new state of the USART mute mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ReceiverWakeUpCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 800d9a8:	b480      	push	{r7}
 800d9aa:	b083      	sub	sp, #12
 800d9ac:	af00      	add	r7, sp, #0
 800d9ae:	6078      	str	r0, [r7, #4]
 800d9b0:	460b      	mov	r3, r1
 800d9b2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  
  if (NewState != DISABLE)
 800d9b4:	78fb      	ldrb	r3, [r7, #3]
 800d9b6:	2b00      	cmp	r3, #0
 800d9b8:	d008      	beq.n	800d9cc <USART_ReceiverWakeUpCmd+0x24>
  {
    /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_RWU;
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	899b      	ldrh	r3, [r3, #12]
 800d9be:	b29b      	uxth	r3, r3
 800d9c0:	f043 0302 	orr.w	r3, r3, #2
 800d9c4:	b29a      	uxth	r2, r3
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the USART mute mode by clearing the RWU bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_RWU);
  }
}
 800d9ca:	e007      	b.n	800d9dc <USART_ReceiverWakeUpCmd+0x34>
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_RWU);
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	899b      	ldrh	r3, [r3, #12]
 800d9d0:	b29b      	uxth	r3, r3
 800d9d2:	f023 0302 	bic.w	r3, r3, #2
 800d9d6:	b29a      	uxth	r2, r3
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	819a      	strh	r2, [r3, #12]
}
 800d9dc:	bf00      	nop
 800d9de:	370c      	adds	r7, #12
 800d9e0:	46bd      	mov	sp, r7
 800d9e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9e6:	4770      	bx	lr

0800d9e8 <USART_WakeUpConfig>:
  *            @arg USART_WakeUp_IdleLine: WakeUp by an idle line detection
  *            @arg USART_WakeUp_AddressMark: WakeUp by an address mark
  * @retval None
  */
void USART_WakeUpConfig(USART_TypeDef* USARTx, uint16_t USART_WakeUp)
{
 800d9e8:	b480      	push	{r7}
 800d9ea:	b083      	sub	sp, #12
 800d9ec:	af00      	add	r7, sp, #0
 800d9ee:	6078      	str	r0, [r7, #4]
 800d9f0:	460b      	mov	r3, r1
 800d9f2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_WAKEUP(USART_WakeUp));
  
  USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_WAKE);
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	899b      	ldrh	r3, [r3, #12]
 800d9f8:	b29b      	uxth	r3, r3
 800d9fa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d9fe:	b29a      	uxth	r2, r3
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	819a      	strh	r2, [r3, #12]
  USARTx->CR1 |= USART_WakeUp;
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	899b      	ldrh	r3, [r3, #12]
 800da08:	b29a      	uxth	r2, r3
 800da0a:	887b      	ldrh	r3, [r7, #2]
 800da0c:	4313      	orrs	r3, r2
 800da0e:	b29a      	uxth	r2, r3
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	819a      	strh	r2, [r3, #12]
}
 800da14:	bf00      	nop
 800da16:	370c      	adds	r7, #12
 800da18:	46bd      	mov	sp, r7
 800da1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da1e:	4770      	bx	lr

0800da20 <USART_LINBreakDetectLengthConfig>:
  *            @arg USART_LINBreakDetectLength_10b: 10-bit break detection
  *            @arg USART_LINBreakDetectLength_11b: 11-bit break detection
  * @retval None
  */
void USART_LINBreakDetectLengthConfig(USART_TypeDef* USARTx, uint16_t USART_LINBreakDetectLength)
{
 800da20:	b480      	push	{r7}
 800da22:	b083      	sub	sp, #12
 800da24:	af00      	add	r7, sp, #0
 800da26:	6078      	str	r0, [r7, #4]
 800da28:	460b      	mov	r3, r1
 800da2a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_LIN_BREAK_DETECT_LENGTH(USART_LINBreakDetectLength));
  
  USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_LBDL);
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	8a1b      	ldrh	r3, [r3, #16]
 800da30:	b29b      	uxth	r3, r3
 800da32:	f023 0320 	bic.w	r3, r3, #32
 800da36:	b29a      	uxth	r2, r3
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	821a      	strh	r2, [r3, #16]
  USARTx->CR2 |= USART_LINBreakDetectLength;  
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	8a1b      	ldrh	r3, [r3, #16]
 800da40:	b29a      	uxth	r2, r3
 800da42:	887b      	ldrh	r3, [r7, #2]
 800da44:	4313      	orrs	r3, r2
 800da46:	b29a      	uxth	r2, r3
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	821a      	strh	r2, [r3, #16]
}
 800da4c:	bf00      	nop
 800da4e:	370c      	adds	r7, #12
 800da50:	46bd      	mov	sp, r7
 800da52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da56:	4770      	bx	lr

0800da58 <USART_LINCmd>:
  * @param  NewState: new state of the USART LIN mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_LINCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 800da58:	b480      	push	{r7}
 800da5a:	b083      	sub	sp, #12
 800da5c:	af00      	add	r7, sp, #0
 800da5e:	6078      	str	r0, [r7, #4]
 800da60:	460b      	mov	r3, r1
 800da62:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800da64:	78fb      	ldrb	r3, [r7, #3]
 800da66:	2b00      	cmp	r3, #0
 800da68:	d008      	beq.n	800da7c <USART_LINCmd+0x24>
  {
    /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
    USARTx->CR2 |= USART_CR2_LINEN;
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	8a1b      	ldrh	r3, [r3, #16]
 800da6e:	b29b      	uxth	r3, r3
 800da70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800da74:	b29a      	uxth	r2, r3
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	821a      	strh	r2, [r3, #16]
  else
  {
    /* Disable the LIN mode by clearing the LINEN bit in the CR2 register */
    USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_LINEN);
  }
}
 800da7a:	e007      	b.n	800da8c <USART_LINCmd+0x34>
    USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_LINEN);
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	8a1b      	ldrh	r3, [r3, #16]
 800da80:	b29b      	uxth	r3, r3
 800da82:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800da86:	b29a      	uxth	r2, r3
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	821a      	strh	r2, [r3, #16]
}
 800da8c:	bf00      	nop
 800da8e:	370c      	adds	r7, #12
 800da90:	46bd      	mov	sp, r7
 800da92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da96:	4770      	bx	lr

0800da98 <USART_SendBreak>:
  * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
  *         UART peripheral.
  * @retval None
  */
void USART_SendBreak(USART_TypeDef* USARTx)
{
 800da98:	b480      	push	{r7}
 800da9a:	b083      	sub	sp, #12
 800da9c:	af00      	add	r7, sp, #0
 800da9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Send break characters */
  USARTx->CR1 |= USART_CR1_SBK;
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	899b      	ldrh	r3, [r3, #12]
 800daa4:	b29b      	uxth	r3, r3
 800daa6:	f043 0301 	orr.w	r3, r3, #1
 800daaa:	b29a      	uxth	r2, r3
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	819a      	strh	r2, [r3, #12]
}
 800dab0:	bf00      	nop
 800dab2:	370c      	adds	r7, #12
 800dab4:	46bd      	mov	sp, r7
 800dab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daba:	4770      	bx	lr

0800dabc <USART_HalfDuplexCmd>:
  * @param  NewState: new state of the USART Communication.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_HalfDuplexCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 800dabc:	b480      	push	{r7}
 800dabe:	b083      	sub	sp, #12
 800dac0:	af00      	add	r7, sp, #0
 800dac2:	6078      	str	r0, [r7, #4]
 800dac4:	460b      	mov	r3, r1
 800dac6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800dac8:	78fb      	ldrb	r3, [r7, #3]
 800daca:	2b00      	cmp	r3, #0
 800dacc:	d008      	beq.n	800dae0 <USART_HalfDuplexCmd+0x24>
  {
    /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_HDSEL;
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	8a9b      	ldrh	r3, [r3, #20]
 800dad2:	b29b      	uxth	r3, r3
 800dad4:	f043 0308 	orr.w	r3, r3, #8
 800dad8:	b29a      	uxth	r2, r3
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	829a      	strh	r2, [r3, #20]
  else
  {
    /* Disable the Half-Duplex mode by clearing the HDSEL bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_HDSEL);
  }
}
 800dade:	e007      	b.n	800daf0 <USART_HalfDuplexCmd+0x34>
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_HDSEL);
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	8a9b      	ldrh	r3, [r3, #20]
 800dae4:	b29b      	uxth	r3, r3
 800dae6:	f023 0308 	bic.w	r3, r3, #8
 800daea:	b29a      	uxth	r2, r3
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	829a      	strh	r2, [r3, #20]
}
 800daf0:	bf00      	nop
 800daf2:	370c      	adds	r7, #12
 800daf4:	46bd      	mov	sp, r7
 800daf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dafa:	4770      	bx	lr

0800dafc <USART_SetGuardTime>:
  *         UART peripheral.
  * @param  USART_GuardTime: specifies the guard time.   
  * @retval None
  */
void USART_SetGuardTime(USART_TypeDef* USARTx, uint8_t USART_GuardTime)
{    
 800dafc:	b480      	push	{r7}
 800dafe:	b083      	sub	sp, #12
 800db00:	af00      	add	r7, sp, #0
 800db02:	6078      	str	r0, [r7, #4]
 800db04:	460b      	mov	r3, r1
 800db06:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_1236_PERIPH(USARTx));
  
  /* Clear the USART Guard time */
  USARTx->GTPR &= USART_GTPR_PSC;
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	8b1b      	ldrh	r3, [r3, #24]
 800db0c:	b29b      	uxth	r3, r3
 800db0e:	b2db      	uxtb	r3, r3
 800db10:	b29a      	uxth	r2, r3
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	831a      	strh	r2, [r3, #24]
  /* Set the USART guard time */
  USARTx->GTPR |= (uint16_t)((uint16_t)USART_GuardTime << 0x08);
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	8b1b      	ldrh	r3, [r3, #24]
 800db1a:	b29a      	uxth	r2, r3
 800db1c:	78fb      	ldrb	r3, [r7, #3]
 800db1e:	b29b      	uxth	r3, r3
 800db20:	021b      	lsls	r3, r3, #8
 800db22:	b29b      	uxth	r3, r3
 800db24:	4313      	orrs	r3, r2
 800db26:	b29a      	uxth	r2, r3
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	831a      	strh	r2, [r3, #24]
}
 800db2c:	bf00      	nop
 800db2e:	370c      	adds	r7, #12
 800db30:	46bd      	mov	sp, r7
 800db32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db36:	4770      	bx	lr

0800db38 <USART_SmartCardCmd>:
  * @param  NewState: new state of the Smart Card mode.
  *          This parameter can be: ENABLE or DISABLE.      
  * @retval None
  */
void USART_SmartCardCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 800db38:	b480      	push	{r7}
 800db3a:	b083      	sub	sp, #12
 800db3c:	af00      	add	r7, sp, #0
 800db3e:	6078      	str	r0, [r7, #4]
 800db40:	460b      	mov	r3, r1
 800db42:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_1236_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800db44:	78fb      	ldrb	r3, [r7, #3]
 800db46:	2b00      	cmp	r3, #0
 800db48:	d008      	beq.n	800db5c <USART_SmartCardCmd+0x24>
  {
    /* Enable the SC mode by setting the SCEN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_SCEN;
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	8a9b      	ldrh	r3, [r3, #20]
 800db4e:	b29b      	uxth	r3, r3
 800db50:	f043 0320 	orr.w	r3, r3, #32
 800db54:	b29a      	uxth	r2, r3
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	829a      	strh	r2, [r3, #20]
  else
  {
    /* Disable the SC mode by clearing the SCEN bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_SCEN);
  }
}
 800db5a:	e007      	b.n	800db6c <USART_SmartCardCmd+0x34>
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_SCEN);
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	8a9b      	ldrh	r3, [r3, #20]
 800db60:	b29b      	uxth	r3, r3
 800db62:	f023 0320 	bic.w	r3, r3, #32
 800db66:	b29a      	uxth	r2, r3
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	829a      	strh	r2, [r3, #20]
}
 800db6c:	bf00      	nop
 800db6e:	370c      	adds	r7, #12
 800db70:	46bd      	mov	sp, r7
 800db72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db76:	4770      	bx	lr

0800db78 <USART_SmartCardNACKCmd>:
  * @param  NewState: new state of the NACK transmission.
  *          This parameter can be: ENABLE or DISABLE.  
  * @retval None
  */
void USART_SmartCardNACKCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 800db78:	b480      	push	{r7}
 800db7a:	b083      	sub	sp, #12
 800db7c:	af00      	add	r7, sp, #0
 800db7e:	6078      	str	r0, [r7, #4]
 800db80:	460b      	mov	r3, r1
 800db82:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_1236_PERIPH(USARTx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800db84:	78fb      	ldrb	r3, [r7, #3]
 800db86:	2b00      	cmp	r3, #0
 800db88:	d008      	beq.n	800db9c <USART_SmartCardNACKCmd+0x24>
  {
    /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_NACK;
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	8a9b      	ldrh	r3, [r3, #20]
 800db8e:	b29b      	uxth	r3, r3
 800db90:	f043 0310 	orr.w	r3, r3, #16
 800db94:	b29a      	uxth	r2, r3
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	829a      	strh	r2, [r3, #20]
  else
  {
    /* Disable the NACK transmission by clearing the NACK bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_NACK);
  }
}
 800db9a:	e007      	b.n	800dbac <USART_SmartCardNACKCmd+0x34>
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_NACK);
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	8a9b      	ldrh	r3, [r3, #20]
 800dba0:	b29b      	uxth	r3, r3
 800dba2:	f023 0310 	bic.w	r3, r3, #16
 800dba6:	b29a      	uxth	r2, r3
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	829a      	strh	r2, [r3, #20]
}
 800dbac:	bf00      	nop
 800dbae:	370c      	adds	r7, #12
 800dbb0:	46bd      	mov	sp, r7
 800dbb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbb6:	4770      	bx	lr

0800dbb8 <USART_IrDAConfig>:
  *            @arg USART_IrDAMode_LowPower
  *            @arg USART_IrDAMode_Normal
  * @retval None
  */
void USART_IrDAConfig(USART_TypeDef* USARTx, uint16_t USART_IrDAMode)
{
 800dbb8:	b480      	push	{r7}
 800dbba:	b083      	sub	sp, #12
 800dbbc:	af00      	add	r7, sp, #0
 800dbbe:	6078      	str	r0, [r7, #4]
 800dbc0:	460b      	mov	r3, r1
 800dbc2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_IRDA_MODE(USART_IrDAMode));
    
  USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_IRLP);
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	8a9b      	ldrh	r3, [r3, #20]
 800dbc8:	b29b      	uxth	r3, r3
 800dbca:	f023 0304 	bic.w	r3, r3, #4
 800dbce:	b29a      	uxth	r2, r3
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	829a      	strh	r2, [r3, #20]
  USARTx->CR3 |= USART_IrDAMode;
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	8a9b      	ldrh	r3, [r3, #20]
 800dbd8:	b29a      	uxth	r2, r3
 800dbda:	887b      	ldrh	r3, [r7, #2]
 800dbdc:	4313      	orrs	r3, r2
 800dbde:	b29a      	uxth	r2, r3
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	829a      	strh	r2, [r3, #20]
}
 800dbe4:	bf00      	nop
 800dbe6:	370c      	adds	r7, #12
 800dbe8:	46bd      	mov	sp, r7
 800dbea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbee:	4770      	bx	lr

0800dbf0 <USART_IrDACmd>:
  * @param  NewState: new state of the IrDA mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_IrDACmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 800dbf0:	b480      	push	{r7}
 800dbf2:	b083      	sub	sp, #12
 800dbf4:	af00      	add	r7, sp, #0
 800dbf6:	6078      	str	r0, [r7, #4]
 800dbf8:	460b      	mov	r3, r1
 800dbfa:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
 800dbfc:	78fb      	ldrb	r3, [r7, #3]
 800dbfe:	2b00      	cmp	r3, #0
 800dc00:	d008      	beq.n	800dc14 <USART_IrDACmd+0x24>
  {
    /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_IREN;
 800dc02:	687b      	ldr	r3, [r7, #4]
 800dc04:	8a9b      	ldrh	r3, [r3, #20]
 800dc06:	b29b      	uxth	r3, r3
 800dc08:	f043 0302 	orr.w	r3, r3, #2
 800dc0c:	b29a      	uxth	r2, r3
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	829a      	strh	r2, [r3, #20]
  else
  {
    /* Disable the IrDA mode by clearing the IREN bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_IREN);
  }
}
 800dc12:	e007      	b.n	800dc24 <USART_IrDACmd+0x34>
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_IREN);
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	8a9b      	ldrh	r3, [r3, #20]
 800dc18:	b29b      	uxth	r3, r3
 800dc1a:	f023 0302 	bic.w	r3, r3, #2
 800dc1e:	b29a      	uxth	r2, r3
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	829a      	strh	r2, [r3, #20]
}
 800dc24:	bf00      	nop
 800dc26:	370c      	adds	r7, #12
 800dc28:	46bd      	mov	sp, r7
 800dc2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc2e:	4770      	bx	lr

0800dc30 <USART_DMACmd>:
  * @param  NewState: new state of the DMA Request sources.
  *          This parameter can be: ENABLE or DISABLE.   
  * @retval None
  */
void USART_DMACmd(USART_TypeDef* USARTx, uint16_t USART_DMAReq, FunctionalState NewState)
{
 800dc30:	b480      	push	{r7}
 800dc32:	b083      	sub	sp, #12
 800dc34:	af00      	add	r7, sp, #0
 800dc36:	6078      	str	r0, [r7, #4]
 800dc38:	460b      	mov	r3, r1
 800dc3a:	807b      	strh	r3, [r7, #2]
 800dc3c:	4613      	mov	r3, r2
 800dc3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DMAREQ(USART_DMAReq));  
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 

  if (NewState != DISABLE)
 800dc40:	787b      	ldrb	r3, [r7, #1]
 800dc42:	2b00      	cmp	r3, #0
 800dc44:	d008      	beq.n	800dc58 <USART_DMACmd+0x28>
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	8a9b      	ldrh	r3, [r3, #20]
 800dc4a:	b29a      	uxth	r2, r3
 800dc4c:	887b      	ldrh	r3, [r7, #2]
 800dc4e:	4313      	orrs	r3, r2
 800dc50:	b29a      	uxth	r2, r3
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	829a      	strh	r2, [r3, #20]
  {
    /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 &= (uint16_t)~USART_DMAReq;
  }
}
 800dc56:	e009      	b.n	800dc6c <USART_DMACmd+0x3c>
    USARTx->CR3 &= (uint16_t)~USART_DMAReq;
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	8a9b      	ldrh	r3, [r3, #20]
 800dc5c:	b29a      	uxth	r2, r3
 800dc5e:	887b      	ldrh	r3, [r7, #2]
 800dc60:	43db      	mvns	r3, r3
 800dc62:	b29b      	uxth	r3, r3
 800dc64:	4013      	ands	r3, r2
 800dc66:	b29a      	uxth	r2, r3
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	829a      	strh	r2, [r3, #20]
}
 800dc6c:	bf00      	nop
 800dc6e:	370c      	adds	r7, #12
 800dc70:	46bd      	mov	sp, r7
 800dc72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc76:	4770      	bx	lr

0800dc78 <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
 800dc78:	b480      	push	{r7}
 800dc7a:	b087      	sub	sp, #28
 800dc7c:	af00      	add	r7, sp, #0
 800dc7e:	6078      	str	r0, [r7, #4]
 800dc80:	460b      	mov	r3, r1
 800dc82:	807b      	strh	r3, [r7, #2]
 800dc84:	4613      	mov	r3, r2
 800dc86:	707b      	strb	r3, [r7, #1]
  uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
 800dc88:	2300      	movs	r3, #0
 800dc8a:	613b      	str	r3, [r7, #16]
 800dc8c:	2300      	movs	r3, #0
 800dc8e:	60fb      	str	r3, [r7, #12]
 800dc90:	2300      	movs	r3, #0
 800dc92:	60bb      	str	r3, [r7, #8]
  uint32_t usartxbase = 0x00;
 800dc94:	2300      	movs	r3, #0
 800dc96:	617b      	str	r3, [r7, #20]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  usartxbase = (uint32_t)USARTx;
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	617b      	str	r3, [r7, #20]

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 800dc9c:	887b      	ldrh	r3, [r7, #2]
 800dc9e:	b2db      	uxtb	r3, r3
 800dca0:	095b      	lsrs	r3, r3, #5
 800dca2:	b2db      	uxtb	r3, r3
 800dca4:	613b      	str	r3, [r7, #16]

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
 800dca6:	887b      	ldrh	r3, [r7, #2]
 800dca8:	f003 031f 	and.w	r3, r3, #31
 800dcac:	60fb      	str	r3, [r7, #12]
  itmask = (((uint32_t)0x01) << itpos);
 800dcae:	2201      	movs	r2, #1
 800dcb0:	68fb      	ldr	r3, [r7, #12]
 800dcb2:	fa02 f303 	lsl.w	r3, r2, r3
 800dcb6:	60bb      	str	r3, [r7, #8]
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 800dcb8:	693b      	ldr	r3, [r7, #16]
 800dcba:	2b01      	cmp	r3, #1
 800dcbc:	d103      	bne.n	800dcc6 <USART_ITConfig+0x4e>
  {
    usartxbase += 0x0C;
 800dcbe:	697b      	ldr	r3, [r7, #20]
 800dcc0:	330c      	adds	r3, #12
 800dcc2:	617b      	str	r3, [r7, #20]
 800dcc4:	e009      	b.n	800dcda <USART_ITConfig+0x62>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
 800dcc6:	693b      	ldr	r3, [r7, #16]
 800dcc8:	2b02      	cmp	r3, #2
 800dcca:	d103      	bne.n	800dcd4 <USART_ITConfig+0x5c>
  {
    usartxbase += 0x10;
 800dccc:	697b      	ldr	r3, [r7, #20]
 800dcce:	3310      	adds	r3, #16
 800dcd0:	617b      	str	r3, [r7, #20]
 800dcd2:	e002      	b.n	800dcda <USART_ITConfig+0x62>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
 800dcd4:	697b      	ldr	r3, [r7, #20]
 800dcd6:	3314      	adds	r3, #20
 800dcd8:	617b      	str	r3, [r7, #20]
  }
  if (NewState != DISABLE)
 800dcda:	787b      	ldrb	r3, [r7, #1]
 800dcdc:	2b00      	cmp	r3, #0
 800dcde:	d006      	beq.n	800dcee <USART_ITConfig+0x76>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 800dce0:	697b      	ldr	r3, [r7, #20]
 800dce2:	6819      	ldr	r1, [r3, #0]
 800dce4:	697b      	ldr	r3, [r7, #20]
 800dce6:	68ba      	ldr	r2, [r7, #8]
 800dce8:	430a      	orrs	r2, r1
 800dcea:	601a      	str	r2, [r3, #0]
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
  }
}
 800dcec:	e006      	b.n	800dcfc <USART_ITConfig+0x84>
    *(__IO uint32_t*)usartxbase &= ~itmask;
 800dcee:	697b      	ldr	r3, [r7, #20]
 800dcf0:	6819      	ldr	r1, [r3, #0]
 800dcf2:	68bb      	ldr	r3, [r7, #8]
 800dcf4:	43da      	mvns	r2, r3
 800dcf6:	697b      	ldr	r3, [r7, #20]
 800dcf8:	400a      	ands	r2, r1
 800dcfa:	601a      	str	r2, [r3, #0]
}
 800dcfc:	bf00      	nop
 800dcfe:	371c      	adds	r7, #28
 800dd00:	46bd      	mov	sp, r7
 800dd02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd06:	4770      	bx	lr

0800dd08 <USART_GetFlagStatus>:
  *            @arg USART_FLAG_FE:   Framing Error flag
  *            @arg USART_FLAG_PE:   Parity Error flag
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
 800dd08:	b480      	push	{r7}
 800dd0a:	b085      	sub	sp, #20
 800dd0c:	af00      	add	r7, sp, #0
 800dd0e:	6078      	str	r0, [r7, #4]
 800dd10:	460b      	mov	r3, r1
 800dd12:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 800dd14:	2300      	movs	r3, #0
 800dd16:	73fb      	strb	r3, [r7, #15]
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 800dd18:	687b      	ldr	r3, [r7, #4]
 800dd1a:	881b      	ldrh	r3, [r3, #0]
 800dd1c:	b29a      	uxth	r2, r3
 800dd1e:	887b      	ldrh	r3, [r7, #2]
 800dd20:	4013      	ands	r3, r2
 800dd22:	b29b      	uxth	r3, r3
 800dd24:	2b00      	cmp	r3, #0
 800dd26:	d002      	beq.n	800dd2e <USART_GetFlagStatus+0x26>
  {
    bitstatus = SET;
 800dd28:	2301      	movs	r3, #1
 800dd2a:	73fb      	strb	r3, [r7, #15]
 800dd2c:	e001      	b.n	800dd32 <USART_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
 800dd2e:	2300      	movs	r3, #0
 800dd30:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800dd32:	7bfb      	ldrb	r3, [r7, #15]
}
 800dd34:	4618      	mov	r0, r3
 800dd36:	3714      	adds	r7, #20
 800dd38:	46bd      	mov	sp, r7
 800dd3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd3e:	4770      	bx	lr

0800dd40 <USART_ClearFlag>:
  *          (USART_SendData()).
  *   
  * @retval None
  */
void USART_ClearFlag(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
 800dd40:	b480      	push	{r7}
 800dd42:	b083      	sub	sp, #12
 800dd44:	af00      	add	r7, sp, #0
 800dd46:	6078      	str	r0, [r7, #4]
 800dd48:	460b      	mov	r3, r1
 800dd4a:	807b      	strh	r3, [r7, #2]
  if ((USART_FLAG & USART_FLAG_CTS) == USART_FLAG_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
       
  USARTx->SR = (uint16_t)~USART_FLAG;
 800dd4c:	887b      	ldrh	r3, [r7, #2]
 800dd4e:	43db      	mvns	r3, r3
 800dd50:	b29a      	uxth	r2, r3
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	801a      	strh	r2, [r3, #0]
}
 800dd56:	bf00      	nop
 800dd58:	370c      	adds	r7, #12
 800dd5a:	46bd      	mov	sp, r7
 800dd5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd60:	4770      	bx	lr

0800dd62 <USART_GetITStatus>:
  *            @arg USART_IT_FE:   Framing Error interrupt
  *            @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 800dd62:	b480      	push	{r7}
 800dd64:	b087      	sub	sp, #28
 800dd66:	af00      	add	r7, sp, #0
 800dd68:	6078      	str	r0, [r7, #4]
 800dd6a:	460b      	mov	r3, r1
 800dd6c:	807b      	strh	r3, [r7, #2]
  uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
 800dd6e:	2300      	movs	r3, #0
 800dd70:	60fb      	str	r3, [r7, #12]
 800dd72:	2300      	movs	r3, #0
 800dd74:	617b      	str	r3, [r7, #20]
 800dd76:	2300      	movs	r3, #0
 800dd78:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
 800dd7a:	2300      	movs	r3, #0
 800dd7c:	74fb      	strb	r3, [r7, #19]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 800dd7e:	887b      	ldrh	r3, [r7, #2]
 800dd80:	b2db      	uxtb	r3, r3
 800dd82:	095b      	lsrs	r3, r3, #5
 800dd84:	b2db      	uxtb	r3, r3
 800dd86:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
 800dd88:	887b      	ldrh	r3, [r7, #2]
 800dd8a:	f003 031f 	and.w	r3, r3, #31
 800dd8e:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
 800dd90:	2201      	movs	r2, #1
 800dd92:	697b      	ldr	r3, [r7, #20]
 800dd94:	fa02 f303 	lsl.w	r3, r2, r3
 800dd98:	617b      	str	r3, [r7, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 800dd9a:	68bb      	ldr	r3, [r7, #8]
 800dd9c:	2b01      	cmp	r3, #1
 800dd9e:	d107      	bne.n	800ddb0 <USART_GetITStatus+0x4e>
  {
    itmask &= USARTx->CR1;
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	899b      	ldrh	r3, [r3, #12]
 800dda4:	b29b      	uxth	r3, r3
 800dda6:	461a      	mov	r2, r3
 800dda8:	697b      	ldr	r3, [r7, #20]
 800ddaa:	4013      	ands	r3, r2
 800ddac:	617b      	str	r3, [r7, #20]
 800ddae:	e011      	b.n	800ddd4 <USART_GetITStatus+0x72>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 800ddb0:	68bb      	ldr	r3, [r7, #8]
 800ddb2:	2b02      	cmp	r3, #2
 800ddb4:	d107      	bne.n	800ddc6 <USART_GetITStatus+0x64>
  {
    itmask &= USARTx->CR2;
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	8a1b      	ldrh	r3, [r3, #16]
 800ddba:	b29b      	uxth	r3, r3
 800ddbc:	461a      	mov	r2, r3
 800ddbe:	697b      	ldr	r3, [r7, #20]
 800ddc0:	4013      	ands	r3, r2
 800ddc2:	617b      	str	r3, [r7, #20]
 800ddc4:	e006      	b.n	800ddd4 <USART_GetITStatus+0x72>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 800ddc6:	687b      	ldr	r3, [r7, #4]
 800ddc8:	8a9b      	ldrh	r3, [r3, #20]
 800ddca:	b29b      	uxth	r3, r3
 800ddcc:	461a      	mov	r2, r3
 800ddce:	697b      	ldr	r3, [r7, #20]
 800ddd0:	4013      	ands	r3, r2
 800ddd2:	617b      	str	r3, [r7, #20]
  }
  
  bitpos = USART_IT >> 0x08;
 800ddd4:	887b      	ldrh	r3, [r7, #2]
 800ddd6:	0a1b      	lsrs	r3, r3, #8
 800ddd8:	b29b      	uxth	r3, r3
 800ddda:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
 800dddc:	2201      	movs	r2, #1
 800ddde:	68fb      	ldr	r3, [r7, #12]
 800dde0:	fa02 f303 	lsl.w	r3, r2, r3
 800dde4:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->SR;
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	881b      	ldrh	r3, [r3, #0]
 800ddea:	b29b      	uxth	r3, r3
 800ddec:	461a      	mov	r2, r3
 800ddee:	68fb      	ldr	r3, [r7, #12]
 800ddf0:	4013      	ands	r3, r2
 800ddf2:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 800ddf4:	697b      	ldr	r3, [r7, #20]
 800ddf6:	2b00      	cmp	r3, #0
 800ddf8:	d005      	beq.n	800de06 <USART_GetITStatus+0xa4>
 800ddfa:	68fb      	ldr	r3, [r7, #12]
 800ddfc:	2b00      	cmp	r3, #0
 800ddfe:	d002      	beq.n	800de06 <USART_GetITStatus+0xa4>
  {
    bitstatus = SET;
 800de00:	2301      	movs	r3, #1
 800de02:	74fb      	strb	r3, [r7, #19]
 800de04:	e001      	b.n	800de0a <USART_GetITStatus+0xa8>
  }
  else
  {
    bitstatus = RESET;
 800de06:	2300      	movs	r3, #0
 800de08:	74fb      	strb	r3, [r7, #19]
  }
  
  return bitstatus;  
 800de0a:	7cfb      	ldrb	r3, [r7, #19]
}
 800de0c:	4618      	mov	r0, r3
 800de0e:	371c      	adds	r7, #28
 800de10:	46bd      	mov	sp, r7
 800de12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de16:	4770      	bx	lr

0800de18 <USART_ClearITPendingBit>:
  *          (USART_SendData()).
  *  
  * @retval None
  */
void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 800de18:	b480      	push	{r7}
 800de1a:	b085      	sub	sp, #20
 800de1c:	af00      	add	r7, sp, #0
 800de1e:	6078      	str	r0, [r7, #4]
 800de20:	460b      	mov	r3, r1
 800de22:	807b      	strh	r3, [r7, #2]
  uint16_t bitpos = 0x00, itmask = 0x00;
 800de24:	2300      	movs	r3, #0
 800de26:	81fb      	strh	r3, [r7, #14]
 800de28:	2300      	movs	r3, #0
 800de2a:	81bb      	strh	r3, [r7, #12]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  bitpos = USART_IT >> 0x08;
 800de2c:	887b      	ldrh	r3, [r7, #2]
 800de2e:	0a1b      	lsrs	r3, r3, #8
 800de30:	81fb      	strh	r3, [r7, #14]
  itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
 800de32:	89fb      	ldrh	r3, [r7, #14]
 800de34:	2201      	movs	r2, #1
 800de36:	fa02 f303 	lsl.w	r3, r2, r3
 800de3a:	81bb      	strh	r3, [r7, #12]
  USARTx->SR = (uint16_t)~itmask;
 800de3c:	89bb      	ldrh	r3, [r7, #12]
 800de3e:	43db      	mvns	r3, r3
 800de40:	b29a      	uxth	r2, r3
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	801a      	strh	r2, [r3, #0]
}
 800de46:	bf00      	nop
 800de48:	3714      	adds	r7, #20
 800de4a:	46bd      	mov	sp, r7
 800de4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de50:	4770      	bx	lr
 800de52:	bf00      	nop

0800de54 <WWDG_DeInit>:
  * @brief  Deinitializes the WWDG peripheral registers to their default reset values.
  * @param  None
  * @retval None
  */
void WWDG_DeInit(void)
{
 800de54:	b580      	push	{r7, lr}
 800de56:	af00      	add	r7, sp, #0
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_WWDG, ENABLE);
 800de58:	2101      	movs	r1, #1
 800de5a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800de5e:	f7fa fe5f 	bl	8008b20 <RCC_APB1PeriphResetCmd>
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_WWDG, DISABLE);
 800de62:	2100      	movs	r1, #0
 800de64:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800de68:	f7fa fe5a 	bl	8008b20 <RCC_APB1PeriphResetCmd>
}
 800de6c:	bf00      	nop
 800de6e:	bd80      	pop	{r7, pc}

0800de70 <WWDG_SetPrescaler>:
  *     @arg WWDG_Prescaler_4: WWDG counter clock = (PCLK1/4096)/4
  *     @arg WWDG_Prescaler_8: WWDG counter clock = (PCLK1/4096)/8
  * @retval None
  */
void WWDG_SetPrescaler(uint32_t WWDG_Prescaler)
{
 800de70:	b480      	push	{r7}
 800de72:	b085      	sub	sp, #20
 800de74:	af00      	add	r7, sp, #0
 800de76:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800de78:	2300      	movs	r3, #0
 800de7a:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_WWDG_PRESCALER(WWDG_Prescaler));
  /* Clear WDGTB[1:0] bits */
  tmpreg = WWDG->CFR & CFR_WDGTB_MASK;
 800de7c:	4b08      	ldr	r3, [pc, #32]	; (800dea0 <WWDG_SetPrescaler+0x30>)
 800de7e:	685b      	ldr	r3, [r3, #4]
 800de80:	f423 73c0 	bic.w	r3, r3, #384	; 0x180
 800de84:	60fb      	str	r3, [r7, #12]
  /* Set WDGTB[1:0] bits according to WWDG_Prescaler value */
  tmpreg |= WWDG_Prescaler;
 800de86:	68fa      	ldr	r2, [r7, #12]
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	4313      	orrs	r3, r2
 800de8c:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  WWDG->CFR = tmpreg;
 800de8e:	4a04      	ldr	r2, [pc, #16]	; (800dea0 <WWDG_SetPrescaler+0x30>)
 800de90:	68fb      	ldr	r3, [r7, #12]
 800de92:	6053      	str	r3, [r2, #4]
}
 800de94:	bf00      	nop
 800de96:	3714      	adds	r7, #20
 800de98:	46bd      	mov	sp, r7
 800de9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de9e:	4770      	bx	lr
 800dea0:	40002c00 	.word	0x40002c00

0800dea4 <WWDG_SetWindowValue>:
  * @param  WindowValue: specifies the window value to be compared to the downcounter.
  *   This parameter value must be lower than 0x80.
  * @retval None
  */
void WWDG_SetWindowValue(uint8_t WindowValue)
{
 800dea4:	b480      	push	{r7}
 800dea6:	b085      	sub	sp, #20
 800dea8:	af00      	add	r7, sp, #0
 800deaa:	4603      	mov	r3, r0
 800deac:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t tmpreg = 0;
 800deae:	2300      	movs	r3, #0
 800deb0:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_WWDG_WINDOW_VALUE(WindowValue));
  /* Clear W[6:0] bits */

  tmpreg = WWDG->CFR & CFR_W_MASK;
 800deb2:	4b0a      	ldr	r3, [pc, #40]	; (800dedc <WWDG_SetWindowValue+0x38>)
 800deb4:	685b      	ldr	r3, [r3, #4]
 800deb6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800deba:	60fb      	str	r3, [r7, #12]

  /* Set W[6:0] bits according to WindowValue value */
  tmpreg |= WindowValue & (uint32_t) BIT_MASK;
 800debc:	79fb      	ldrb	r3, [r7, #7]
 800debe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800dec2:	68fb      	ldr	r3, [r7, #12]
 800dec4:	4313      	orrs	r3, r2
 800dec6:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  WWDG->CFR = tmpreg;
 800dec8:	4a04      	ldr	r2, [pc, #16]	; (800dedc <WWDG_SetWindowValue+0x38>)
 800deca:	68fb      	ldr	r3, [r7, #12]
 800decc:	6053      	str	r3, [r2, #4]
}
 800dece:	bf00      	nop
 800ded0:	3714      	adds	r7, #20
 800ded2:	46bd      	mov	sp, r7
 800ded4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ded8:	4770      	bx	lr
 800deda:	bf00      	nop
 800dedc:	40002c00 	.word	0x40002c00

0800dee0 <WWDG_EnableIT>:
  * @note   Once enabled this interrupt cannot be disabled except by a system reset.
  * @param  None
  * @retval None
  */
void WWDG_EnableIT(void)
{
 800dee0:	b480      	push	{r7}
 800dee2:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) CFR_EWI_BB = (uint32_t)ENABLE;
 800dee4:	4b03      	ldr	r3, [pc, #12]	; (800def4 <WWDG_EnableIT+0x14>)
 800dee6:	2201      	movs	r2, #1
 800dee8:	601a      	str	r2, [r3, #0]
}
 800deea:	bf00      	nop
 800deec:	46bd      	mov	sp, r7
 800deee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800def2:	4770      	bx	lr
 800def4:	420580a4 	.word	0x420580a4

0800def8 <WWDG_SetCounter>:
  *   This parameter must be a number between 0x40 and 0x7F (to prevent generating
  *   an immediate reset) 
  * @retval None
  */
void WWDG_SetCounter(uint8_t Counter)
{
 800def8:	b480      	push	{r7}
 800defa:	b083      	sub	sp, #12
 800defc:	af00      	add	r7, sp, #0
 800defe:	4603      	mov	r3, r0
 800df00:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_WWDG_COUNTER(Counter));
  /* Write to T[6:0] bits to configure the counter value, no need to do
     a read-modify-write; writing a 0 to WDGA bit does nothing */
  WWDG->CR = Counter & BIT_MASK;
 800df02:	79fb      	ldrb	r3, [r7, #7]
 800df04:	4a04      	ldr	r2, [pc, #16]	; (800df18 <WWDG_SetCounter+0x20>)
 800df06:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800df0a:	6013      	str	r3, [r2, #0]
}
 800df0c:	bf00      	nop
 800df0e:	370c      	adds	r7, #12
 800df10:	46bd      	mov	sp, r7
 800df12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df16:	4770      	bx	lr
 800df18:	40002c00 	.word	0x40002c00

0800df1c <WWDG_Enable>:
  *   This parameter must be a number between 0x40 and 0x7F (to prevent generating
  *   an immediate reset)
  * @retval None
  */
void WWDG_Enable(uint8_t Counter)
{
 800df1c:	b480      	push	{r7}
 800df1e:	b083      	sub	sp, #12
 800df20:	af00      	add	r7, sp, #0
 800df22:	4603      	mov	r3, r0
 800df24:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_WWDG_COUNTER(Counter));
  WWDG->CR = WWDG_CR_WDGA | Counter;
 800df26:	79fb      	ldrb	r3, [r7, #7]
 800df28:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800df2c:	b2da      	uxtb	r2, r3
 800df2e:	4b04      	ldr	r3, [pc, #16]	; (800df40 <WWDG_Enable+0x24>)
 800df30:	601a      	str	r2, [r3, #0]
}
 800df32:	bf00      	nop
 800df34:	370c      	adds	r7, #12
 800df36:	46bd      	mov	sp, r7
 800df38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df3c:	4770      	bx	lr
 800df3e:	bf00      	nop
 800df40:	40002c00 	.word	0x40002c00

0800df44 <WWDG_GetFlagStatus>:
  * @brief  Checks whether the Early Wakeup interrupt flag is set or not.
  * @param  None
  * @retval The new state of the Early Wakeup interrupt flag (SET or RESET)
  */
FlagStatus WWDG_GetFlagStatus(void)
{
 800df44:	b480      	push	{r7}
 800df46:	b083      	sub	sp, #12
 800df48:	af00      	add	r7, sp, #0
  FlagStatus bitstatus = RESET;
 800df4a:	2300      	movs	r3, #0
 800df4c:	71fb      	strb	r3, [r7, #7]
    
  if ((WWDG->SR) != (uint32_t)RESET)
 800df4e:	4b08      	ldr	r3, [pc, #32]	; (800df70 <WWDG_GetFlagStatus+0x2c>)
 800df50:	689b      	ldr	r3, [r3, #8]
 800df52:	2b00      	cmp	r3, #0
 800df54:	d002      	beq.n	800df5c <WWDG_GetFlagStatus+0x18>
  {
    bitstatus = SET;
 800df56:	2301      	movs	r3, #1
 800df58:	71fb      	strb	r3, [r7, #7]
 800df5a:	e001      	b.n	800df60 <WWDG_GetFlagStatus+0x1c>
  }
  else
  {
    bitstatus = RESET;
 800df5c:	2300      	movs	r3, #0
 800df5e:	71fb      	strb	r3, [r7, #7]
  }
  return bitstatus;
 800df60:	79fb      	ldrb	r3, [r7, #7]
}
 800df62:	4618      	mov	r0, r3
 800df64:	370c      	adds	r7, #12
 800df66:	46bd      	mov	sp, r7
 800df68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df6c:	4770      	bx	lr
 800df6e:	bf00      	nop
 800df70:	40002c00 	.word	0x40002c00

0800df74 <WWDG_ClearFlag>:
  * @brief  Clears Early Wakeup interrupt flag.
  * @param  None
  * @retval None
  */
void WWDG_ClearFlag(void)
{
 800df74:	b480      	push	{r7}
 800df76:	af00      	add	r7, sp, #0
  WWDG->SR = (uint32_t)RESET;
 800df78:	4b03      	ldr	r3, [pc, #12]	; (800df88 <WWDG_ClearFlag+0x14>)
 800df7a:	2200      	movs	r2, #0
 800df7c:	609a      	str	r2, [r3, #8]
}
 800df7e:	bf00      	nop
 800df80:	46bd      	mov	sp, r7
 800df82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df86:	4770      	bx	lr
 800df88:	40002c00 	.word	0x40002c00

0800df8c <STM_EVAL_LEDInit>:
  *     @arg LED3
  *     @arg LED4
  * @retval None
  */
void STM_EVAL_LEDInit(Led_TypeDef Led)
{
 800df8c:	b580      	push	{r7, lr}
 800df8e:	b084      	sub	sp, #16
 800df90:	af00      	add	r7, sp, #0
 800df92:	4603      	mov	r3, r0
 800df94:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStructure;
  
  /* Enable the GPIO_LED Clock */
  RCC_AHB1PeriphClockCmd(GPIO_CLK[Led], ENABLE);
 800df96:	79fb      	ldrb	r3, [r7, #7]
 800df98:	4a10      	ldr	r2, [pc, #64]	; (800dfdc <STM_EVAL_LEDInit+0x50>)
 800df9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800df9e:	2101      	movs	r1, #1
 800dfa0:	4618      	mov	r0, r3
 800dfa2:	f7fa fcbd 	bl	8008920 <RCC_AHB1PeriphClockCmd>

  /* Configure the GPIO_LED pin */
  GPIO_InitStructure.GPIO_Pin = GPIO_PIN[Led];
 800dfa6:	79fb      	ldrb	r3, [r7, #7]
 800dfa8:	4a0d      	ldr	r2, [pc, #52]	; (800dfe0 <STM_EVAL_LEDInit+0x54>)
 800dfaa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800dfae:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 800dfb0:	2301      	movs	r3, #1
 800dfb2:	733b      	strb	r3, [r7, #12]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 800dfb4:	2300      	movs	r3, #0
 800dfb6:	73bb      	strb	r3, [r7, #14]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 800dfb8:	2301      	movs	r3, #1
 800dfba:	73fb      	strb	r3, [r7, #15]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 800dfbc:	2302      	movs	r3, #2
 800dfbe:	737b      	strb	r3, [r7, #13]
  GPIO_Init(GPIO_PORT[Led], &GPIO_InitStructure);
 800dfc0:	79fb      	ldrb	r3, [r7, #7]
 800dfc2:	4a08      	ldr	r2, [pc, #32]	; (800dfe4 <STM_EVAL_LEDInit+0x58>)
 800dfc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dfc8:	f107 0208 	add.w	r2, r7, #8
 800dfcc:	4611      	mov	r1, r2
 800dfce:	4618      	mov	r0, r3
 800dfd0:	f7f8 fad6 	bl	8006580 <GPIO_Init>
}
 800dfd4:	bf00      	nop
 800dfd6:	3710      	adds	r7, #16
 800dfd8:	46bd      	mov	sp, r7
 800dfda:	bd80      	pop	{r7, pc}
 800dfdc:	0801ff80 	.word	0x0801ff80
 800dfe0:	0801ff7c 	.word	0x0801ff7c
 800dfe4:	20000094 	.word	0x20000094

0800dfe8 <STM_EVAL_LEDOn>:
  *     @arg LED3
  *     @arg LED4 
  * @retval None
  */
void STM_EVAL_LEDOn(Led_TypeDef Led)
{
 800dfe8:	b480      	push	{r7}
 800dfea:	b083      	sub	sp, #12
 800dfec:	af00      	add	r7, sp, #0
 800dfee:	4603      	mov	r3, r0
 800dff0:	71fb      	strb	r3, [r7, #7]
  GPIO_PORT[Led]->BSRRL = GPIO_PIN[Led];
 800dff2:	79fa      	ldrb	r2, [r7, #7]
 800dff4:	79fb      	ldrb	r3, [r7, #7]
 800dff6:	4906      	ldr	r1, [pc, #24]	; (800e010 <STM_EVAL_LEDOn+0x28>)
 800dff8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800dffc:	4905      	ldr	r1, [pc, #20]	; (800e014 <STM_EVAL_LEDOn+0x2c>)
 800dffe:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 800e002:	831a      	strh	r2, [r3, #24]
}
 800e004:	bf00      	nop
 800e006:	370c      	adds	r7, #12
 800e008:	46bd      	mov	sp, r7
 800e00a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e00e:	4770      	bx	lr
 800e010:	20000094 	.word	0x20000094
 800e014:	0801ff7c 	.word	0x0801ff7c

0800e018 <STM_EVAL_LEDOff>:
  *     @arg LED3
  *     @arg LED4
  * @retval None
  */
void STM_EVAL_LEDOff(Led_TypeDef Led)
{
 800e018:	b480      	push	{r7}
 800e01a:	b083      	sub	sp, #12
 800e01c:	af00      	add	r7, sp, #0
 800e01e:	4603      	mov	r3, r0
 800e020:	71fb      	strb	r3, [r7, #7]
  GPIO_PORT[Led]->BSRRH = GPIO_PIN[Led];  
 800e022:	79fa      	ldrb	r2, [r7, #7]
 800e024:	79fb      	ldrb	r3, [r7, #7]
 800e026:	4906      	ldr	r1, [pc, #24]	; (800e040 <STM_EVAL_LEDOff+0x28>)
 800e028:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800e02c:	4905      	ldr	r1, [pc, #20]	; (800e044 <STM_EVAL_LEDOff+0x2c>)
 800e02e:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 800e032:	835a      	strh	r2, [r3, #26]
}
 800e034:	bf00      	nop
 800e036:	370c      	adds	r7, #12
 800e038:	46bd      	mov	sp, r7
 800e03a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e03e:	4770      	bx	lr
 800e040:	20000094 	.word	0x20000094
 800e044:	0801ff7c 	.word	0x0801ff7c

0800e048 <STM_EVAL_LEDToggle>:
  *     @arg LED3
  *     @arg LED4  
  * @retval None
  */
void STM_EVAL_LEDToggle(Led_TypeDef Led)
{
 800e048:	b480      	push	{r7}
 800e04a:	b083      	sub	sp, #12
 800e04c:	af00      	add	r7, sp, #0
 800e04e:	4603      	mov	r3, r0
 800e050:	71fb      	strb	r3, [r7, #7]
  GPIO_PORT[Led]->ODR ^= GPIO_PIN[Led];
 800e052:	79fb      	ldrb	r3, [r7, #7]
 800e054:	4a0a      	ldr	r2, [pc, #40]	; (800e080 <STM_EVAL_LEDToggle+0x38>)
 800e056:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e05a:	695a      	ldr	r2, [r3, #20]
 800e05c:	79fb      	ldrb	r3, [r7, #7]
 800e05e:	4909      	ldr	r1, [pc, #36]	; (800e084 <STM_EVAL_LEDToggle+0x3c>)
 800e060:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800e064:	4618      	mov	r0, r3
 800e066:	79fb      	ldrb	r3, [r7, #7]
 800e068:	4905      	ldr	r1, [pc, #20]	; (800e080 <STM_EVAL_LEDToggle+0x38>)
 800e06a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800e06e:	4042      	eors	r2, r0
 800e070:	615a      	str	r2, [r3, #20]
}
 800e072:	bf00      	nop
 800e074:	370c      	adds	r7, #12
 800e076:	46bd      	mov	sp, r7
 800e078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e07c:	4770      	bx	lr
 800e07e:	bf00      	nop
 800e080:	20000094 	.word	0x20000094
 800e084:	0801ff7c 	.word	0x0801ff7c

0800e088 <STM_EVAL_PBInit>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  * @retval None
  */
void STM_EVAL_PBInit(Button_TypeDef Button, ButtonMode_TypeDef Button_Mode)
{
 800e088:	b580      	push	{r7, lr}
 800e08a:	b088      	sub	sp, #32
 800e08c:	af00      	add	r7, sp, #0
 800e08e:	4603      	mov	r3, r0
 800e090:	460a      	mov	r2, r1
 800e092:	71fb      	strb	r3, [r7, #7]
 800e094:	4613      	mov	r3, r2
 800e096:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef GPIO_InitStructure;
  EXTI_InitTypeDef EXTI_InitStructure;
  NVIC_InitTypeDef NVIC_InitStructure;

  /* Enable the BUTTON Clock */
  RCC_AHB1PeriphClockCmd(BUTTON_CLK[Button], ENABLE);
 800e098:	2301      	movs	r3, #1
 800e09a:	2101      	movs	r1, #1
 800e09c:	4618      	mov	r0, r3
 800e09e:	f7fa fc3f 	bl	8008920 <RCC_AHB1PeriphClockCmd>
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 800e0a2:	2101      	movs	r1, #1
 800e0a4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800e0a8:	f7fa fcba 	bl	8008a20 <RCC_APB2PeriphClockCmd>

  /* Configure Button pin as input */
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 800e0ac:	2300      	movs	r3, #0
 800e0ae:	773b      	strb	r3, [r7, #28]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_DOWN;
 800e0b0:	2302      	movs	r3, #2
 800e0b2:	77fb      	strb	r3, [r7, #31]
  GPIO_InitStructure.GPIO_Pin = BUTTON_PIN[Button];
 800e0b4:	2301      	movs	r3, #1
 800e0b6:	61bb      	str	r3, [r7, #24]
  GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStructure);
 800e0b8:	79fb      	ldrb	r3, [r7, #7]
 800e0ba:	4a18      	ldr	r2, [pc, #96]	; (800e11c <STM_EVAL_PBInit+0x94>)
 800e0bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e0c0:	f107 0218 	add.w	r2, r7, #24
 800e0c4:	4611      	mov	r1, r2
 800e0c6:	4618      	mov	r0, r3
 800e0c8:	f7f8 fa5a 	bl	8006580 <GPIO_Init>

  if (Button_Mode == BUTTON_MODE_EXTI)
 800e0cc:	79bb      	ldrb	r3, [r7, #6]
 800e0ce:	2b01      	cmp	r3, #1
 800e0d0:	d11f      	bne.n	800e112 <STM_EVAL_PBInit+0x8a>
  {
    /* Connect Button EXTI Line to Button GPIO Pin */
    SYSCFG_EXTILineConfig(BUTTON_PORT_SOURCE[Button], BUTTON_PIN_SOURCE[Button]);
 800e0d2:	2300      	movs	r3, #0
 800e0d4:	2200      	movs	r2, #0
 800e0d6:	4611      	mov	r1, r2
 800e0d8:	4618      	mov	r0, r3
 800e0da:	f7fd fb7b 	bl	800b7d4 <SYSCFG_EXTILineConfig>

    /* Configure Button EXTI line */
    EXTI_InitStructure.EXTI_Line = BUTTON_EXTI_LINE[Button];
 800e0de:	2301      	movs	r3, #1
 800e0e0:	613b      	str	r3, [r7, #16]
    EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
 800e0e2:	2300      	movs	r3, #0
 800e0e4:	753b      	strb	r3, [r7, #20]
    EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;  
 800e0e6:	2308      	movs	r3, #8
 800e0e8:	757b      	strb	r3, [r7, #21]
    EXTI_InitStructure.EXTI_LineCmd = ENABLE;
 800e0ea:	2301      	movs	r3, #1
 800e0ec:	75bb      	strb	r3, [r7, #22]
    EXTI_Init(&EXTI_InitStructure);
 800e0ee:	f107 0310 	add.w	r3, r7, #16
 800e0f2:	4618      	mov	r0, r3
 800e0f4:	f7f6 fc44 	bl	8004980 <EXTI_Init>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    NVIC_InitStructure.NVIC_IRQChannel = BUTTON_IRQn[Button];
 800e0f8:	2306      	movs	r3, #6
 800e0fa:	733b      	strb	r3, [r7, #12]
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x0F;
 800e0fc:	230f      	movs	r3, #15
 800e0fe:	737b      	strb	r3, [r7, #13]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x0F;
 800e100:	230f      	movs	r3, #15
 800e102:	73bb      	strb	r3, [r7, #14]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 800e104:	2301      	movs	r3, #1
 800e106:	73fb      	strb	r3, [r7, #15]

    NVIC_Init(&NVIC_InitStructure); 
 800e108:	f107 030c 	add.w	r3, r7, #12
 800e10c:	4618      	mov	r0, r3
 800e10e:	f7f3 fad1 	bl	80016b4 <NVIC_Init>
  }
}
 800e112:	bf00      	nop
 800e114:	3720      	adds	r7, #32
 800e116:	46bd      	mov	sp, r7
 800e118:	bd80      	pop	{r7, pc}
 800e11a:	bf00      	nop
 800e11c:	2000009c 	.word	0x2000009c

0800e120 <STM_EVAL_PBGetState>:
  * @param  Button: Specifies the Button to be checked.
  *   This parameter should be: BUTTON_USER  
  * @retval The Button GPIO pin value.
  */
uint32_t STM_EVAL_PBGetState(Button_TypeDef Button)
{
 800e120:	b580      	push	{r7, lr}
 800e122:	b082      	sub	sp, #8
 800e124:	af00      	add	r7, sp, #0
 800e126:	4603      	mov	r3, r0
 800e128:	71fb      	strb	r3, [r7, #7]
  return GPIO_ReadInputDataBit(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 800e12a:	79fb      	ldrb	r3, [r7, #7]
 800e12c:	4a06      	ldr	r2, [pc, #24]	; (800e148 <STM_EVAL_PBGetState+0x28>)
 800e12e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e132:	2201      	movs	r2, #1
 800e134:	4611      	mov	r1, r2
 800e136:	4618      	mov	r0, r3
 800e138:	f7f8 faec 	bl	8006714 <GPIO_ReadInputDataBit>
 800e13c:	4603      	mov	r3, r0
}
 800e13e:	4618      	mov	r0, r3
 800e140:	3708      	adds	r7, #8
 800e142:	46bd      	mov	sp, r7
 800e144:	bd80      	pop	{r7, pc}
 800e146:	bf00      	nop
 800e148:	2000009c 	.word	0x2000009c

0800e14c <sEE_LowLevel_DeInit>:
  * @brief  DeInitializes peripherals used by the I2C EEPROM driver.
  * @param  None
  * @retval None
  */
void sEE_LowLevel_DeInit(void)
{
 800e14c:	b580      	push	{r7, lr}
 800e14e:	b082      	sub	sp, #8
 800e150:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStructure; 
   
  /* sEE_I2C Peripheral Disable */
  I2C_Cmd(sEE_I2C, DISABLE);
 800e152:	2100      	movs	r1, #0
 800e154:	4825      	ldr	r0, [pc, #148]	; (800e1ec <sEE_LowLevel_DeInit+0xa0>)
 800e156:	f7f8 fce6 	bl	8006b26 <I2C_Cmd>
 
  /* sEE_I2C DeInit */
  I2C_DeInit(sEE_I2C);
 800e15a:	4824      	ldr	r0, [pc, #144]	; (800e1ec <sEE_LowLevel_DeInit+0xa0>)
 800e15c:	f7f8 fbc8 	bl	80068f0 <I2C_DeInit>

  /*!< sEE_I2C Periph clock disable */
  RCC_APB1PeriphClockCmd(sEE_I2C_CLK, DISABLE);
 800e160:	2100      	movs	r1, #0
 800e162:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 800e166:	f7fa fc3b 	bl	80089e0 <RCC_APB1PeriphClockCmd>
    
  /*!< GPIO configuration */  
  /*!< Configure sEE_I2C pins: SCL */
  GPIO_InitStructure.GPIO_Pin = sEE_I2C_SCL_PIN;
 800e16a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e16e:	603b      	str	r3, [r7, #0]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 800e170:	2300      	movs	r3, #0
 800e172:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 800e174:	2300      	movs	r3, #0
 800e176:	71fb      	strb	r3, [r7, #7]
  GPIO_Init(sEE_I2C_SCL_GPIO_PORT, &GPIO_InitStructure);
 800e178:	463b      	mov	r3, r7
 800e17a:	4619      	mov	r1, r3
 800e17c:	481c      	ldr	r0, [pc, #112]	; (800e1f0 <sEE_LowLevel_DeInit+0xa4>)
 800e17e:	f7f8 f9ff 	bl	8006580 <GPIO_Init>

  /*!< Configure sEE_I2C pins: SDA */
  GPIO_InitStructure.GPIO_Pin = sEE_I2C_SDA_PIN;
 800e182:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e186:	603b      	str	r3, [r7, #0]
  GPIO_Init(sEE_I2C_SDA_GPIO_PORT, &GPIO_InitStructure);
 800e188:	463b      	mov	r3, r7
 800e18a:	4619      	mov	r1, r3
 800e18c:	4819      	ldr	r0, [pc, #100]	; (800e1f4 <sEE_LowLevel_DeInit+0xa8>)
 800e18e:	f7f8 f9f7 	bl	8006580 <GPIO_Init>

  /* Configure and enable I2C DMA TX Stream interrupt */
  NVIC_InitStructure.NVIC_IRQChannel = sEE_I2C_DMA_TX_IRQn;
 800e192:	4b19      	ldr	r3, [pc, #100]	; (800e1f8 <sEE_LowLevel_DeInit+0xac>)
 800e194:	220f      	movs	r2, #15
 800e196:	701a      	strb	r2, [r3, #0]
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = sEE_I2C_DMA_PREPRIO;
 800e198:	4b17      	ldr	r3, [pc, #92]	; (800e1f8 <sEE_LowLevel_DeInit+0xac>)
 800e19a:	2200      	movs	r2, #0
 800e19c:	705a      	strb	r2, [r3, #1]
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = sEE_I2C_DMA_SUBPRIO;
 800e19e:	4b16      	ldr	r3, [pc, #88]	; (800e1f8 <sEE_LowLevel_DeInit+0xac>)
 800e1a0:	2200      	movs	r2, #0
 800e1a2:	709a      	strb	r2, [r3, #2]
  NVIC_InitStructure.NVIC_IRQChannelCmd = DISABLE;
 800e1a4:	4b14      	ldr	r3, [pc, #80]	; (800e1f8 <sEE_LowLevel_DeInit+0xac>)
 800e1a6:	2200      	movs	r2, #0
 800e1a8:	70da      	strb	r2, [r3, #3]
  NVIC_Init(&NVIC_InitStructure);
 800e1aa:	4813      	ldr	r0, [pc, #76]	; (800e1f8 <sEE_LowLevel_DeInit+0xac>)
 800e1ac:	f7f3 fa82 	bl	80016b4 <NVIC_Init>

  /* Configure and enable I2C DMA RX Stream interrupt */
  NVIC_InitStructure.NVIC_IRQChannel = sEE_I2C_DMA_RX_IRQn;
 800e1b0:	4b11      	ldr	r3, [pc, #68]	; (800e1f8 <sEE_LowLevel_DeInit+0xac>)
 800e1b2:	220d      	movs	r2, #13
 800e1b4:	701a      	strb	r2, [r3, #0]
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = sEE_I2C_DMA_PREPRIO;
 800e1b6:	4b10      	ldr	r3, [pc, #64]	; (800e1f8 <sEE_LowLevel_DeInit+0xac>)
 800e1b8:	2200      	movs	r2, #0
 800e1ba:	705a      	strb	r2, [r3, #1]
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = sEE_I2C_DMA_SUBPRIO;
 800e1bc:	4b0e      	ldr	r3, [pc, #56]	; (800e1f8 <sEE_LowLevel_DeInit+0xac>)
 800e1be:	2200      	movs	r2, #0
 800e1c0:	709a      	strb	r2, [r3, #2]
  NVIC_Init(&NVIC_InitStructure);   
 800e1c2:	480d      	ldr	r0, [pc, #52]	; (800e1f8 <sEE_LowLevel_DeInit+0xac>)
 800e1c4:	f7f3 fa76 	bl	80016b4 <NVIC_Init>
  
  /* Disable and Deinitialize the DMA Streams */
  DMA_Cmd(sEE_I2C_DMA_STREAM_TX, DISABLE);
 800e1c8:	2100      	movs	r1, #0
 800e1ca:	480c      	ldr	r0, [pc, #48]	; (800e1fc <sEE_LowLevel_DeInit+0xb0>)
 800e1cc:	f7f5 fe3b 	bl	8003e46 <DMA_Cmd>
  DMA_Cmd(sEE_I2C_DMA_STREAM_RX, DISABLE);
 800e1d0:	2100      	movs	r1, #0
 800e1d2:	480b      	ldr	r0, [pc, #44]	; (800e200 <sEE_LowLevel_DeInit+0xb4>)
 800e1d4:	f7f5 fe37 	bl	8003e46 <DMA_Cmd>
  DMA_DeInit(sEE_I2C_DMA_STREAM_TX);
 800e1d8:	4808      	ldr	r0, [pc, #32]	; (800e1fc <sEE_LowLevel_DeInit+0xb0>)
 800e1da:	f7f5 fcd1 	bl	8003b80 <DMA_DeInit>
  DMA_DeInit(sEE_I2C_DMA_STREAM_RX);
 800e1de:	4808      	ldr	r0, [pc, #32]	; (800e200 <sEE_LowLevel_DeInit+0xb4>)
 800e1e0:	f7f5 fcce 	bl	8003b80 <DMA_DeInit>
}
 800e1e4:	bf00      	nop
 800e1e6:	3708      	adds	r7, #8
 800e1e8:	46bd      	mov	sp, r7
 800e1ea:	bd80      	pop	{r7, pc}
 800e1ec:	40005c00 	.word	0x40005c00
 800e1f0:	40020000 	.word	0x40020000
 800e1f4:	40020800 	.word	0x40020800
 800e1f8:	20002e04 	.word	0x20002e04
 800e1fc:	40026070 	.word	0x40026070
 800e200:	40026040 	.word	0x40026040

0800e204 <sEE_LowLevel_Init>:
  * @brief  Initializes peripherals used by the I2C EEPROM driver.
  * @param  None
  * @retval None
  */
void sEE_LowLevel_Init(void)
{
 800e204:	b580      	push	{r7, lr}
 800e206:	b082      	sub	sp, #8
 800e208:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStructure; 
   
  /*!< sEE_I2C Periph clock enable */
  RCC_APB1PeriphClockCmd(sEE_I2C_CLK, ENABLE);
 800e20a:	2101      	movs	r1, #1
 800e20c:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 800e210:	f7fa fbe6 	bl	80089e0 <RCC_APB1PeriphClockCmd>
  
  /*!< sEE_I2C_SCL_GPIO_CLK and sEE_I2C_SDA_GPIO_CLK Periph clock enable */
  RCC_AHB1PeriphClockCmd(sEE_I2C_SCL_GPIO_CLK | sEE_I2C_SDA_GPIO_CLK, ENABLE);
 800e214:	2101      	movs	r1, #1
 800e216:	2005      	movs	r0, #5
 800e218:	f7fa fb82 	bl	8008920 <RCC_AHB1PeriphClockCmd>
  
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 800e21c:	2101      	movs	r1, #1
 800e21e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800e222:	f7fa fbfd 	bl	8008a20 <RCC_APB2PeriphClockCmd>
  
  /* Reset sEE_I2C IP */
  RCC_APB1PeriphResetCmd(sEE_I2C_CLK, ENABLE);  
 800e226:	2101      	movs	r1, #1
 800e228:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 800e22c:	f7fa fc78 	bl	8008b20 <RCC_APB1PeriphResetCmd>
  /* Release reset signal of sEE_I2C IP */
  RCC_APB1PeriphResetCmd(sEE_I2C_CLK, DISABLE);
 800e230:	2100      	movs	r1, #0
 800e232:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 800e236:	f7fa fc73 	bl	8008b20 <RCC_APB1PeriphResetCmd>
    
  /*!< GPIO configuration */  
  /*!< Configure sEE_I2C pins: SCL */   
  GPIO_InitStructure.GPIO_Pin = sEE_I2C_SCL_PIN;
 800e23a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e23e:	603b      	str	r3, [r7, #0]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 800e240:	2302      	movs	r3, #2
 800e242:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 800e244:	2302      	movs	r3, #2
 800e246:	717b      	strb	r3, [r7, #5]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
 800e248:	2301      	movs	r3, #1
 800e24a:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
 800e24c:	2300      	movs	r3, #0
 800e24e:	71fb      	strb	r3, [r7, #7]
  GPIO_Init(sEE_I2C_SCL_GPIO_PORT, &GPIO_InitStructure);
 800e250:	463b      	mov	r3, r7
 800e252:	4619      	mov	r1, r3
 800e254:	4848      	ldr	r0, [pc, #288]	; (800e378 <sEE_LowLevel_Init+0x174>)
 800e256:	f7f8 f993 	bl	8006580 <GPIO_Init>

  /*!< Configure sEE_I2C pins: SDA */
  GPIO_InitStructure.GPIO_Pin = sEE_I2C_SDA_PIN;
 800e25a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e25e:	603b      	str	r3, [r7, #0]
  GPIO_Init(sEE_I2C_SDA_GPIO_PORT, &GPIO_InitStructure);
 800e260:	463b      	mov	r3, r7
 800e262:	4619      	mov	r1, r3
 800e264:	4845      	ldr	r0, [pc, #276]	; (800e37c <sEE_LowLevel_Init+0x178>)
 800e266:	f7f8 f98b 	bl	8006580 <GPIO_Init>

  /* Connect PXx to I2C_SCL*/
  GPIO_PinAFConfig(sEE_I2C_SCL_GPIO_PORT, sEE_I2C_SCL_SOURCE, sEE_I2C_SCL_AF);
 800e26a:	2204      	movs	r2, #4
 800e26c:	2108      	movs	r1, #8
 800e26e:	4842      	ldr	r0, [pc, #264]	; (800e378 <sEE_LowLevel_Init+0x174>)
 800e270:	f7f8 faf5 	bl	800685e <GPIO_PinAFConfig>

  /* Connect PXx to I2C_SDA*/
  GPIO_PinAFConfig(sEE_I2C_SDA_GPIO_PORT, sEE_I2C_SDA_SOURCE, sEE_I2C_SDA_AF);  
 800e274:	2204      	movs	r2, #4
 800e276:	2109      	movs	r1, #9
 800e278:	4840      	ldr	r0, [pc, #256]	; (800e37c <sEE_LowLevel_Init+0x178>)
 800e27a:	f7f8 faf0 	bl	800685e <GPIO_PinAFConfig>
  
  /* Configure and enable I2C DMA TX Channel interrupt */
  NVIC_InitStructure.NVIC_IRQChannel = sEE_I2C_DMA_TX_IRQn;
 800e27e:	4b40      	ldr	r3, [pc, #256]	; (800e380 <sEE_LowLevel_Init+0x17c>)
 800e280:	220f      	movs	r2, #15
 800e282:	701a      	strb	r2, [r3, #0]
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = sEE_I2C_DMA_PREPRIO;
 800e284:	4b3e      	ldr	r3, [pc, #248]	; (800e380 <sEE_LowLevel_Init+0x17c>)
 800e286:	2200      	movs	r2, #0
 800e288:	705a      	strb	r2, [r3, #1]
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = sEE_I2C_DMA_SUBPRIO;
 800e28a:	4b3d      	ldr	r3, [pc, #244]	; (800e380 <sEE_LowLevel_Init+0x17c>)
 800e28c:	2200      	movs	r2, #0
 800e28e:	709a      	strb	r2, [r3, #2]
  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 800e290:	4b3b      	ldr	r3, [pc, #236]	; (800e380 <sEE_LowLevel_Init+0x17c>)
 800e292:	2201      	movs	r2, #1
 800e294:	70da      	strb	r2, [r3, #3]
  NVIC_Init(&NVIC_InitStructure);
 800e296:	483a      	ldr	r0, [pc, #232]	; (800e380 <sEE_LowLevel_Init+0x17c>)
 800e298:	f7f3 fa0c 	bl	80016b4 <NVIC_Init>

  /* Configure and enable I2C DMA RX Channel interrupt */
  NVIC_InitStructure.NVIC_IRQChannel = sEE_I2C_DMA_RX_IRQn;
 800e29c:	4b38      	ldr	r3, [pc, #224]	; (800e380 <sEE_LowLevel_Init+0x17c>)
 800e29e:	220d      	movs	r2, #13
 800e2a0:	701a      	strb	r2, [r3, #0]
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = sEE_I2C_DMA_PREPRIO;
 800e2a2:	4b37      	ldr	r3, [pc, #220]	; (800e380 <sEE_LowLevel_Init+0x17c>)
 800e2a4:	2200      	movs	r2, #0
 800e2a6:	705a      	strb	r2, [r3, #1]
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = sEE_I2C_DMA_SUBPRIO;
 800e2a8:	4b35      	ldr	r3, [pc, #212]	; (800e380 <sEE_LowLevel_Init+0x17c>)
 800e2aa:	2200      	movs	r2, #0
 800e2ac:	709a      	strb	r2, [r3, #2]
  NVIC_Init(&NVIC_InitStructure);  
 800e2ae:	4834      	ldr	r0, [pc, #208]	; (800e380 <sEE_LowLevel_Init+0x17c>)
 800e2b0:	f7f3 fa00 	bl	80016b4 <NVIC_Init>
  
  /*!< I2C DMA TX and RX channels configuration */
  /* Enable the DMA clock */
  RCC_AHB1PeriphClockCmd(sEE_I2C_DMA_CLK, ENABLE);
 800e2b4:	2101      	movs	r1, #1
 800e2b6:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800e2ba:	f7fa fb31 	bl	8008920 <RCC_AHB1PeriphClockCmd>
  
  /* Clear any pending flag on Rx Stream  */
  DMA_ClearFlag(sEE_I2C_DMA_STREAM_TX, sEE_TX_DMA_FLAG_FEIF | sEE_TX_DMA_FLAG_DMEIF | sEE_TX_DMA_FLAG_TEIF | \
 800e2be:	4931      	ldr	r1, [pc, #196]	; (800e384 <sEE_LowLevel_Init+0x180>)
 800e2c0:	4831      	ldr	r0, [pc, #196]	; (800e388 <sEE_LowLevel_Init+0x184>)
 800e2c2:	f7f5 fefd 	bl	80040c0 <DMA_ClearFlag>
                                       sEE_TX_DMA_FLAG_HTIF | sEE_TX_DMA_FLAG_TCIF);
  /* Disable the EE I2C Tx DMA stream */
  DMA_Cmd(sEE_I2C_DMA_STREAM_TX, DISABLE);
 800e2c6:	2100      	movs	r1, #0
 800e2c8:	482f      	ldr	r0, [pc, #188]	; (800e388 <sEE_LowLevel_Init+0x184>)
 800e2ca:	f7f5 fdbc 	bl	8003e46 <DMA_Cmd>
  /* Configure the DMA stream for the EE I2C peripheral TX direction */
  DMA_DeInit(sEE_I2C_DMA_STREAM_TX);
 800e2ce:	482e      	ldr	r0, [pc, #184]	; (800e388 <sEE_LowLevel_Init+0x184>)
 800e2d0:	f7f5 fc56 	bl	8003b80 <DMA_DeInit>
  sEEDMA_InitStructure.DMA_Channel = sEE_I2C_DMA_CHANNEL;
 800e2d4:	4b2d      	ldr	r3, [pc, #180]	; (800e38c <sEE_LowLevel_Init+0x188>)
 800e2d6:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 800e2da:	601a      	str	r2, [r3, #0]
  sEEDMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)sEE_I2C_DR_Address;
 800e2dc:	4b2b      	ldr	r3, [pc, #172]	; (800e38c <sEE_LowLevel_Init+0x188>)
 800e2de:	4a2c      	ldr	r2, [pc, #176]	; (800e390 <sEE_LowLevel_Init+0x18c>)
 800e2e0:	605a      	str	r2, [r3, #4]
  sEEDMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)0;    /* This parameter will be configured durig communication */;
 800e2e2:	4b2a      	ldr	r3, [pc, #168]	; (800e38c <sEE_LowLevel_Init+0x188>)
 800e2e4:	2200      	movs	r2, #0
 800e2e6:	609a      	str	r2, [r3, #8]
  sEEDMA_InitStructure.DMA_DIR = DMA_DIR_MemoryToPeripheral; /* This parameter will be configured durig communication */
 800e2e8:	4b28      	ldr	r3, [pc, #160]	; (800e38c <sEE_LowLevel_Init+0x188>)
 800e2ea:	2240      	movs	r2, #64	; 0x40
 800e2ec:	60da      	str	r2, [r3, #12]
  sEEDMA_InitStructure.DMA_BufferSize = 0xFFFF;              /* This parameter will be configured durig communication */
 800e2ee:	4b27      	ldr	r3, [pc, #156]	; (800e38c <sEE_LowLevel_Init+0x188>)
 800e2f0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e2f4:	611a      	str	r2, [r3, #16]
  sEEDMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 800e2f6:	4b25      	ldr	r3, [pc, #148]	; (800e38c <sEE_LowLevel_Init+0x188>)
 800e2f8:	2200      	movs	r2, #0
 800e2fa:	615a      	str	r2, [r3, #20]
  sEEDMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
 800e2fc:	4b23      	ldr	r3, [pc, #140]	; (800e38c <sEE_LowLevel_Init+0x188>)
 800e2fe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800e302:	619a      	str	r2, [r3, #24]
  sEEDMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
 800e304:	4b21      	ldr	r3, [pc, #132]	; (800e38c <sEE_LowLevel_Init+0x188>)
 800e306:	2200      	movs	r2, #0
 800e308:	61da      	str	r2, [r3, #28]
  sEEDMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
 800e30a:	4b20      	ldr	r3, [pc, #128]	; (800e38c <sEE_LowLevel_Init+0x188>)
 800e30c:	2200      	movs	r2, #0
 800e30e:	621a      	str	r2, [r3, #32]
  sEEDMA_InitStructure.DMA_Mode = DMA_Mode_Normal;
 800e310:	4b1e      	ldr	r3, [pc, #120]	; (800e38c <sEE_LowLevel_Init+0x188>)
 800e312:	2200      	movs	r2, #0
 800e314:	625a      	str	r2, [r3, #36]	; 0x24
  sEEDMA_InitStructure.DMA_Priority = DMA_Priority_VeryHigh;
 800e316:	4b1d      	ldr	r3, [pc, #116]	; (800e38c <sEE_LowLevel_Init+0x188>)
 800e318:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800e31c:	629a      	str	r2, [r3, #40]	; 0x28
  sEEDMA_InitStructure.DMA_FIFOMode = DMA_FIFOMode_Enable;
 800e31e:	4b1b      	ldr	r3, [pc, #108]	; (800e38c <sEE_LowLevel_Init+0x188>)
 800e320:	2204      	movs	r2, #4
 800e322:	62da      	str	r2, [r3, #44]	; 0x2c
  sEEDMA_InitStructure.DMA_FIFOThreshold = DMA_FIFOThreshold_Full;
 800e324:	4b19      	ldr	r3, [pc, #100]	; (800e38c <sEE_LowLevel_Init+0x188>)
 800e326:	2203      	movs	r2, #3
 800e328:	631a      	str	r2, [r3, #48]	; 0x30
  sEEDMA_InitStructure.DMA_MemoryBurst = DMA_MemoryBurst_Single;
 800e32a:	4b18      	ldr	r3, [pc, #96]	; (800e38c <sEE_LowLevel_Init+0x188>)
 800e32c:	2200      	movs	r2, #0
 800e32e:	635a      	str	r2, [r3, #52]	; 0x34
  sEEDMA_InitStructure.DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
 800e330:	4b16      	ldr	r3, [pc, #88]	; (800e38c <sEE_LowLevel_Init+0x188>)
 800e332:	2200      	movs	r2, #0
 800e334:	639a      	str	r2, [r3, #56]	; 0x38
  DMA_Init(sEE_I2C_DMA_STREAM_TX, &sEEDMA_InitStructure);
 800e336:	4915      	ldr	r1, [pc, #84]	; (800e38c <sEE_LowLevel_Init+0x188>)
 800e338:	4813      	ldr	r0, [pc, #76]	; (800e388 <sEE_LowLevel_Init+0x184>)
 800e33a:	f7f5 fcf5 	bl	8003d28 <DMA_Init>

  /* Clear any pending flag on Rx Stream */
  DMA_ClearFlag(sEE_I2C_DMA_STREAM_RX, sEE_RX_DMA_FLAG_FEIF | sEE_RX_DMA_FLAG_DMEIF | sEE_RX_DMA_FLAG_TEIF | \
 800e33e:	4915      	ldr	r1, [pc, #84]	; (800e394 <sEE_LowLevel_Init+0x190>)
 800e340:	4815      	ldr	r0, [pc, #84]	; (800e398 <sEE_LowLevel_Init+0x194>)
 800e342:	f7f5 febd 	bl	80040c0 <DMA_ClearFlag>
                                       sEE_RX_DMA_FLAG_HTIF | sEE_RX_DMA_FLAG_TCIF);
  /* Disable the EE I2C DMA Rx stream */
  DMA_Cmd(sEE_I2C_DMA_STREAM_RX, DISABLE);
 800e346:	2100      	movs	r1, #0
 800e348:	4813      	ldr	r0, [pc, #76]	; (800e398 <sEE_LowLevel_Init+0x194>)
 800e34a:	f7f5 fd7c 	bl	8003e46 <DMA_Cmd>
  /* Configure the DMA stream for the EE I2C peripheral RX direction */
  DMA_DeInit(sEE_I2C_DMA_STREAM_RX);
 800e34e:	4812      	ldr	r0, [pc, #72]	; (800e398 <sEE_LowLevel_Init+0x194>)
 800e350:	f7f5 fc16 	bl	8003b80 <DMA_DeInit>
  DMA_Init(sEE_I2C_DMA_STREAM_RX, &sEEDMA_InitStructure);
 800e354:	490d      	ldr	r1, [pc, #52]	; (800e38c <sEE_LowLevel_Init+0x188>)
 800e356:	4810      	ldr	r0, [pc, #64]	; (800e398 <sEE_LowLevel_Init+0x194>)
 800e358:	f7f5 fce6 	bl	8003d28 <DMA_Init>
  
  /* Enable the DMA Channels Interrupts */
  DMA_ITConfig(sEE_I2C_DMA_STREAM_TX, DMA_IT_TC, ENABLE);
 800e35c:	2201      	movs	r2, #1
 800e35e:	2110      	movs	r1, #16
 800e360:	4809      	ldr	r0, [pc, #36]	; (800e388 <sEE_LowLevel_Init+0x184>)
 800e362:	f7f5 fedb 	bl	800411c <DMA_ITConfig>
  DMA_ITConfig(sEE_I2C_DMA_STREAM_RX, DMA_IT_TC, ENABLE);      
 800e366:	2201      	movs	r2, #1
 800e368:	2110      	movs	r1, #16
 800e36a:	480b      	ldr	r0, [pc, #44]	; (800e398 <sEE_LowLevel_Init+0x194>)
 800e36c:	f7f5 fed6 	bl	800411c <DMA_ITConfig>
}
 800e370:	bf00      	nop
 800e372:	3708      	adds	r7, #8
 800e374:	46bd      	mov	sp, r7
 800e376:	bd80      	pop	{r7, pc}
 800e378:	40020000 	.word	0x40020000
 800e37c:	40020800 	.word	0x40020800
 800e380:	20002e04 	.word	0x20002e04
 800e384:	2000003d 	.word	0x2000003d
 800e388:	40026070 	.word	0x40026070
 800e38c:	20002dc8 	.word	0x20002dc8
 800e390:	40005c10 	.word	0x40005c10
 800e394:	103d0000 	.word	0x103d0000
 800e398:	40026040 	.word	0x40026040

0800e39c <sEE_LowLevel_DMAConfig>:
  * @brief  Initializes DMA channel used by the I2C EEPROM driver.
  * @param  None
  * @retval None
  */
void sEE_LowLevel_DMAConfig(uint32_t pBuffer, uint32_t BufferSize, uint32_t Direction)
{ 
 800e39c:	b580      	push	{r7, lr}
 800e39e:	b084      	sub	sp, #16
 800e3a0:	af00      	add	r7, sp, #0
 800e3a2:	60f8      	str	r0, [r7, #12]
 800e3a4:	60b9      	str	r1, [r7, #8]
 800e3a6:	607a      	str	r2, [r7, #4]
  /* Initialize the DMA with the new parameters */
  if (Direction == sEE_DIRECTION_TX)
 800e3a8:	687b      	ldr	r3, [r7, #4]
 800e3aa:	2b00      	cmp	r3, #0
 800e3ac:	d10d      	bne.n	800e3ca <sEE_LowLevel_DMAConfig+0x2e>
  {
    /* Configure the DMA Tx Stream with the buffer address and the buffer size */
    sEEDMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)pBuffer;
 800e3ae:	4a0f      	ldr	r2, [pc, #60]	; (800e3ec <sEE_LowLevel_DMAConfig+0x50>)
 800e3b0:	68fb      	ldr	r3, [r7, #12]
 800e3b2:	6093      	str	r3, [r2, #8]
    sEEDMA_InitStructure.DMA_DIR = DMA_DIR_MemoryToPeripheral;    
 800e3b4:	4b0d      	ldr	r3, [pc, #52]	; (800e3ec <sEE_LowLevel_DMAConfig+0x50>)
 800e3b6:	2240      	movs	r2, #64	; 0x40
 800e3b8:	60da      	str	r2, [r3, #12]
    sEEDMA_InitStructure.DMA_BufferSize = (uint32_t)BufferSize;  
 800e3ba:	4a0c      	ldr	r2, [pc, #48]	; (800e3ec <sEE_LowLevel_DMAConfig+0x50>)
 800e3bc:	68bb      	ldr	r3, [r7, #8]
 800e3be:	6113      	str	r3, [r2, #16]
    DMA_Init(sEE_I2C_DMA_STREAM_TX, &sEEDMA_InitStructure);  
 800e3c0:	490a      	ldr	r1, [pc, #40]	; (800e3ec <sEE_LowLevel_DMAConfig+0x50>)
 800e3c2:	480b      	ldr	r0, [pc, #44]	; (800e3f0 <sEE_LowLevel_DMAConfig+0x54>)
 800e3c4:	f7f5 fcb0 	bl	8003d28 <DMA_Init>
    sEEDMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)pBuffer;
    sEEDMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralToMemory;
    sEEDMA_InitStructure.DMA_BufferSize = (uint32_t)BufferSize;      
    DMA_Init(sEE_I2C_DMA_STREAM_RX, &sEEDMA_InitStructure);    
  }
}
 800e3c8:	e00c      	b.n	800e3e4 <sEE_LowLevel_DMAConfig+0x48>
    sEEDMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)pBuffer;
 800e3ca:	4a08      	ldr	r2, [pc, #32]	; (800e3ec <sEE_LowLevel_DMAConfig+0x50>)
 800e3cc:	68fb      	ldr	r3, [r7, #12]
 800e3ce:	6093      	str	r3, [r2, #8]
    sEEDMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralToMemory;
 800e3d0:	4b06      	ldr	r3, [pc, #24]	; (800e3ec <sEE_LowLevel_DMAConfig+0x50>)
 800e3d2:	2200      	movs	r2, #0
 800e3d4:	60da      	str	r2, [r3, #12]
    sEEDMA_InitStructure.DMA_BufferSize = (uint32_t)BufferSize;      
 800e3d6:	4a05      	ldr	r2, [pc, #20]	; (800e3ec <sEE_LowLevel_DMAConfig+0x50>)
 800e3d8:	68bb      	ldr	r3, [r7, #8]
 800e3da:	6113      	str	r3, [r2, #16]
    DMA_Init(sEE_I2C_DMA_STREAM_RX, &sEEDMA_InitStructure);    
 800e3dc:	4903      	ldr	r1, [pc, #12]	; (800e3ec <sEE_LowLevel_DMAConfig+0x50>)
 800e3de:	4805      	ldr	r0, [pc, #20]	; (800e3f4 <sEE_LowLevel_DMAConfig+0x58>)
 800e3e0:	f7f5 fca2 	bl	8003d28 <DMA_Init>
}
 800e3e4:	bf00      	nop
 800e3e6:	3710      	adds	r7, #16
 800e3e8:	46bd      	mov	sp, r7
 800e3ea:	bd80      	pop	{r7, pc}
 800e3ec:	20002dc8 	.word	0x20002dc8
 800e3f0:	40026070 	.word	0x40026070
 800e3f4:	40026040 	.word	0x40026040

0800e3f8 <sEE_DeInit>:
  * @brief  DeInitializes peripherals used by the I2C EEPROM driver.
  * @param  None
  * @retval None
  */
void sEE_DeInit(void)
{
 800e3f8:	b580      	push	{r7, lr}
 800e3fa:	af00      	add	r7, sp, #0
  sEE_LowLevel_DeInit(); 
 800e3fc:	f7ff fea6 	bl	800e14c <sEE_LowLevel_DeInit>
}
 800e400:	bf00      	nop
 800e402:	bd80      	pop	{r7, pc}

0800e404 <sEE_Init>:
  * @brief  Initializes peripherals used by the I2C EEPROM driver.
  * @param  None
  * @retval None
  */
void sEE_Init(void)
{ 
 800e404:	b580      	push	{r7, lr}
 800e406:	b084      	sub	sp, #16
 800e408:	af00      	add	r7, sp, #0
  I2C_InitTypeDef  I2C_InitStructure;
  
  sEE_LowLevel_Init();
 800e40a:	f7ff fefb 	bl	800e204 <sEE_LowLevel_Init>

  /* If the I2C peripheral is already enabled, don't reconfigure it */
  if ((sEE_I2C->CR1 & I2C_CR1_PE) == 0)
 800e40e:	4b15      	ldr	r3, [pc, #84]	; (800e464 <sEE_Init+0x60>)
 800e410:	881b      	ldrh	r3, [r3, #0]
 800e412:	b29b      	uxth	r3, r3
 800e414:	f003 0301 	and.w	r3, r3, #1
 800e418:	2b00      	cmp	r3, #0
 800e41a:	d117      	bne.n	800e44c <sEE_Init+0x48>
  {     
    /*!< I2C configuration */
    /* sEE_I2C configuration */
    I2C_InitStructure.I2C_Mode = I2C_Mode_I2C;
 800e41c:	2300      	movs	r3, #0
 800e41e:	80bb      	strh	r3, [r7, #4]
    I2C_InitStructure.I2C_DutyCycle = I2C_DutyCycle_2;
 800e420:	f64b 73ff 	movw	r3, #49151	; 0xbfff
 800e424:	80fb      	strh	r3, [r7, #6]
    I2C_InitStructure.I2C_OwnAddress1 = 0x00;
 800e426:	2300      	movs	r3, #0
 800e428:	813b      	strh	r3, [r7, #8]
    I2C_InitStructure.I2C_Ack = I2C_Ack_Enable;
 800e42a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e42e:	817b      	strh	r3, [r7, #10]
    I2C_InitStructure.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 800e430:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800e434:	81bb      	strh	r3, [r7, #12]
    I2C_InitStructure.I2C_ClockSpeed = I2C_SPEED;
 800e436:	4b0c      	ldr	r3, [pc, #48]	; (800e468 <sEE_Init+0x64>)
 800e438:	603b      	str	r3, [r7, #0]
    
    /* Apply sEE_I2C configuration after enabling it */
    I2C_Init(sEE_I2C, &I2C_InitStructure);
 800e43a:	463b      	mov	r3, r7
 800e43c:	4619      	mov	r1, r3
 800e43e:	4809      	ldr	r0, [pc, #36]	; (800e464 <sEE_Init+0x60>)
 800e440:	f7f8 fa90 	bl	8006964 <I2C_Init>
  
    /* sEE_I2C Peripheral Enable */
    I2C_Cmd(sEE_I2C, ENABLE);
 800e444:	2101      	movs	r1, #1
 800e446:	4807      	ldr	r0, [pc, #28]	; (800e464 <sEE_Init+0x60>)
 800e448:	f7f8 fb6d 	bl	8006b26 <I2C_Cmd>
  }  

  /* Enable the sEE_I2C peripheral DMA requests */
  I2C_DMACmd(sEE_I2C, ENABLE);  
 800e44c:	2101      	movs	r1, #1
 800e44e:	4805      	ldr	r0, [pc, #20]	; (800e464 <sEE_Init+0x60>)
 800e450:	f7f8 fdff 	bl	8007052 <I2C_DMACmd>

  /*!< Select the EEPROM address */
  sEEAddress = sEE_HW_ADDRESS;   
 800e454:	4b05      	ldr	r3, [pc, #20]	; (800e46c <sEE_Init+0x68>)
 800e456:	22a0      	movs	r2, #160	; 0xa0
 800e458:	801a      	strh	r2, [r3, #0]
}
 800e45a:	bf00      	nop
 800e45c:	3710      	adds	r7, #16
 800e45e:	46bd      	mov	sp, r7
 800e460:	bd80      	pop	{r7, pc}
 800e462:	bf00      	nop
 800e464:	40005c00 	.word	0x40005c00
 800e468:	000186a0 	.word	0x000186a0
 800e46c:	20002e08 	.word	0x20002e08

0800e470 <sEE_ReadBuffer>:
  * 
  * @retval sEE_OK (0) if operation is correctly performed, else return value 
  *         different from sEE_OK (0) or the timeout user callback.
  */
uint32_t sEE_ReadBuffer(uint8_t* pBuffer, uint16_t ReadAddr, uint16_t* NumByteToRead)
{  
 800e470:	b580      	push	{r7, lr}
 800e472:	b084      	sub	sp, #16
 800e474:	af00      	add	r7, sp, #0
 800e476:	60f8      	str	r0, [r7, #12]
 800e478:	460b      	mov	r3, r1
 800e47a:	607a      	str	r2, [r7, #4]
 800e47c:	817b      	strh	r3, [r7, #10]
  /* Set the pointer to the Number of data to be read. This pointer will be used 
      by the DMA Transfer Completer interrupt Handler in order to reset the 
      variable to 0. User should check on this variable in order to know if the 
      DMA transfer has been complete or not. */
  sEEDataReadPointer = NumByteToRead;
 800e47e:	4aa3      	ldr	r2, [pc, #652]	; (800e70c <sEE_ReadBuffer+0x29c>)
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	6013      	str	r3, [r2, #0]
  
  /*!< While the bus is busy */
  sEETimeout = sEE_LONG_TIMEOUT;
 800e484:	4ba2      	ldr	r3, [pc, #648]	; (800e710 <sEE_ReadBuffer+0x2a0>)
 800e486:	f44f 4220 	mov.w	r2, #40960	; 0xa000
 800e48a:	601a      	str	r2, [r3, #0]
  while(I2C_GetFlagStatus(sEE_I2C, I2C_FLAG_BUSY))
 800e48c:	e00a      	b.n	800e4a4 <sEE_ReadBuffer+0x34>
  {
    if((sEETimeout--) == 0) return sEE_TIMEOUT_UserCallback();
 800e48e:	4ba0      	ldr	r3, [pc, #640]	; (800e710 <sEE_ReadBuffer+0x2a0>)
 800e490:	681b      	ldr	r3, [r3, #0]
 800e492:	1e5a      	subs	r2, r3, #1
 800e494:	499e      	ldr	r1, [pc, #632]	; (800e710 <sEE_ReadBuffer+0x2a0>)
 800e496:	600a      	str	r2, [r1, #0]
 800e498:	2b00      	cmp	r3, #0
 800e49a:	d103      	bne.n	800e4a4 <sEE_ReadBuffer+0x34>
 800e49c:	f000 fc8a 	bl	800edb4 <sEE_TIMEOUT_UserCallback>
 800e4a0:	4603      	mov	r3, r0
 800e4a2:	e12e      	b.n	800e702 <sEE_ReadBuffer+0x292>
  while(I2C_GetFlagStatus(sEE_I2C, I2C_FLAG_BUSY))
 800e4a4:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 800e4a8:	489a      	ldr	r0, [pc, #616]	; (800e714 <sEE_ReadBuffer+0x2a4>)
 800e4aa:	f7f8 fe9f 	bl	80071ec <I2C_GetFlagStatus>
 800e4ae:	4603      	mov	r3, r0
 800e4b0:	2b00      	cmp	r3, #0
 800e4b2:	d1ec      	bne.n	800e48e <sEE_ReadBuffer+0x1e>
  }
  
  /*!< Send START condition */
  I2C_GenerateSTART(sEE_I2C, ENABLE);
 800e4b4:	2101      	movs	r1, #1
 800e4b6:	4897      	ldr	r0, [pc, #604]	; (800e714 <sEE_ReadBuffer+0x2a4>)
 800e4b8:	f7f8 fb97 	bl	8006bea <I2C_GenerateSTART>
  
  /*!< Test on EV5 and clear it (cleared by reading SR1 then writing to DR) */
  sEETimeout = sEE_FLAG_TIMEOUT;
 800e4bc:	4b94      	ldr	r3, [pc, #592]	; (800e710 <sEE_ReadBuffer+0x2a0>)
 800e4be:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800e4c2:	601a      	str	r2, [r3, #0]
  while(!I2C_CheckEvent(sEE_I2C, I2C_EVENT_MASTER_MODE_SELECT))
 800e4c4:	e00a      	b.n	800e4dc <sEE_ReadBuffer+0x6c>
  {
    if((sEETimeout--) == 0) return sEE_TIMEOUT_UserCallback();
 800e4c6:	4b92      	ldr	r3, [pc, #584]	; (800e710 <sEE_ReadBuffer+0x2a0>)
 800e4c8:	681b      	ldr	r3, [r3, #0]
 800e4ca:	1e5a      	subs	r2, r3, #1
 800e4cc:	4990      	ldr	r1, [pc, #576]	; (800e710 <sEE_ReadBuffer+0x2a0>)
 800e4ce:	600a      	str	r2, [r1, #0]
 800e4d0:	2b00      	cmp	r3, #0
 800e4d2:	d103      	bne.n	800e4dc <sEE_ReadBuffer+0x6c>
 800e4d4:	f000 fc6e 	bl	800edb4 <sEE_TIMEOUT_UserCallback>
 800e4d8:	4603      	mov	r3, r0
 800e4da:	e112      	b.n	800e702 <sEE_ReadBuffer+0x292>
  while(!I2C_CheckEvent(sEE_I2C, I2C_EVENT_MASTER_MODE_SELECT))
 800e4dc:	498e      	ldr	r1, [pc, #568]	; (800e718 <sEE_ReadBuffer+0x2a8>)
 800e4de:	488d      	ldr	r0, [pc, #564]	; (800e714 <sEE_ReadBuffer+0x2a4>)
 800e4e0:	f7f8 fe32 	bl	8007148 <I2C_CheckEvent>
 800e4e4:	4603      	mov	r3, r0
 800e4e6:	2b00      	cmp	r3, #0
 800e4e8:	d0ed      	beq.n	800e4c6 <sEE_ReadBuffer+0x56>
  }
  
  /*!< Send EEPROM address for write */
  I2C_Send7bitAddress(sEE_I2C, sEEAddress, I2C_Direction_Transmitter);
 800e4ea:	4b8c      	ldr	r3, [pc, #560]	; (800e71c <sEE_ReadBuffer+0x2ac>)
 800e4ec:	881b      	ldrh	r3, [r3, #0]
 800e4ee:	b29b      	uxth	r3, r3
 800e4f0:	b2db      	uxtb	r3, r3
 800e4f2:	2200      	movs	r2, #0
 800e4f4:	4619      	mov	r1, r3
 800e4f6:	4887      	ldr	r0, [pc, #540]	; (800e714 <sEE_ReadBuffer+0x2a4>)
 800e4f8:	f7f8 fbb7 	bl	8006c6a <I2C_Send7bitAddress>

  /*!< Test on EV6 and clear it */
  sEETimeout = sEE_FLAG_TIMEOUT;
 800e4fc:	4b84      	ldr	r3, [pc, #528]	; (800e710 <sEE_ReadBuffer+0x2a0>)
 800e4fe:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800e502:	601a      	str	r2, [r3, #0]
  while(!I2C_CheckEvent(sEE_I2C, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED))
 800e504:	e00a      	b.n	800e51c <sEE_ReadBuffer+0xac>
  {
    if((sEETimeout--) == 0) return sEE_TIMEOUT_UserCallback();
 800e506:	4b82      	ldr	r3, [pc, #520]	; (800e710 <sEE_ReadBuffer+0x2a0>)
 800e508:	681b      	ldr	r3, [r3, #0]
 800e50a:	1e5a      	subs	r2, r3, #1
 800e50c:	4980      	ldr	r1, [pc, #512]	; (800e710 <sEE_ReadBuffer+0x2a0>)
 800e50e:	600a      	str	r2, [r1, #0]
 800e510:	2b00      	cmp	r3, #0
 800e512:	d103      	bne.n	800e51c <sEE_ReadBuffer+0xac>
 800e514:	f000 fc4e 	bl	800edb4 <sEE_TIMEOUT_UserCallback>
 800e518:	4603      	mov	r3, r0
 800e51a:	e0f2      	b.n	800e702 <sEE_ReadBuffer+0x292>
  while(!I2C_CheckEvent(sEE_I2C, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED))
 800e51c:	4980      	ldr	r1, [pc, #512]	; (800e720 <sEE_ReadBuffer+0x2b0>)
 800e51e:	487d      	ldr	r0, [pc, #500]	; (800e714 <sEE_ReadBuffer+0x2a4>)
 800e520:	f7f8 fe12 	bl	8007148 <I2C_CheckEvent>
 800e524:	4603      	mov	r3, r0
 800e526:	2b00      	cmp	r3, #0
 800e528:	d0ed      	beq.n	800e506 <sEE_ReadBuffer+0x96>
  } 

  /*!< Send the EEPROM's internal address to read from: MSB of the address first */
  I2C_SendData(sEE_I2C, (uint8_t)((ReadAddr & 0xFF00) >> 8));    
 800e52a:	897b      	ldrh	r3, [r7, #10]
 800e52c:	0a1b      	lsrs	r3, r3, #8
 800e52e:	b29b      	uxth	r3, r3
 800e530:	b2db      	uxtb	r3, r3
 800e532:	4619      	mov	r1, r3
 800e534:	4877      	ldr	r0, [pc, #476]	; (800e714 <sEE_ReadBuffer+0x2a4>)
 800e536:	f7f8 fcfd 	bl	8006f34 <I2C_SendData>

  /*!< Test on EV8 and clear it */
  sEETimeout = sEE_FLAG_TIMEOUT;
 800e53a:	4b75      	ldr	r3, [pc, #468]	; (800e710 <sEE_ReadBuffer+0x2a0>)
 800e53c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800e540:	601a      	str	r2, [r3, #0]
  while(!I2C_CheckEvent(sEE_I2C, I2C_EVENT_MASTER_BYTE_TRANSMITTING))
 800e542:	e00a      	b.n	800e55a <sEE_ReadBuffer+0xea>
  {
    if((sEETimeout--) == 0) return sEE_TIMEOUT_UserCallback();
 800e544:	4b72      	ldr	r3, [pc, #456]	; (800e710 <sEE_ReadBuffer+0x2a0>)
 800e546:	681b      	ldr	r3, [r3, #0]
 800e548:	1e5a      	subs	r2, r3, #1
 800e54a:	4971      	ldr	r1, [pc, #452]	; (800e710 <sEE_ReadBuffer+0x2a0>)
 800e54c:	600a      	str	r2, [r1, #0]
 800e54e:	2b00      	cmp	r3, #0
 800e550:	d103      	bne.n	800e55a <sEE_ReadBuffer+0xea>
 800e552:	f000 fc2f 	bl	800edb4 <sEE_TIMEOUT_UserCallback>
 800e556:	4603      	mov	r3, r0
 800e558:	e0d3      	b.n	800e702 <sEE_ReadBuffer+0x292>
  while(!I2C_CheckEvent(sEE_I2C, I2C_EVENT_MASTER_BYTE_TRANSMITTING))
 800e55a:	4972      	ldr	r1, [pc, #456]	; (800e724 <sEE_ReadBuffer+0x2b4>)
 800e55c:	486d      	ldr	r0, [pc, #436]	; (800e714 <sEE_ReadBuffer+0x2a4>)
 800e55e:	f7f8 fdf3 	bl	8007148 <I2C_CheckEvent>
 800e562:	4603      	mov	r3, r0
 800e564:	2b00      	cmp	r3, #0
 800e566:	d0ed      	beq.n	800e544 <sEE_ReadBuffer+0xd4>
  }

  /*!< Send the EEPROM's internal address to read from: LSB of the address */
  I2C_SendData(sEE_I2C, (uint8_t)(ReadAddr & 0x00FF));    
 800e568:	897b      	ldrh	r3, [r7, #10]
 800e56a:	b2db      	uxtb	r3, r3
 800e56c:	4619      	mov	r1, r3
 800e56e:	4869      	ldr	r0, [pc, #420]	; (800e714 <sEE_ReadBuffer+0x2a4>)
 800e570:	f7f8 fce0 	bl	8006f34 <I2C_SendData>

  /*!< Test on EV8 and clear it */
  sEETimeout = sEE_FLAG_TIMEOUT;
 800e574:	4b66      	ldr	r3, [pc, #408]	; (800e710 <sEE_ReadBuffer+0x2a0>)
 800e576:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800e57a:	601a      	str	r2, [r3, #0]
  while(I2C_GetFlagStatus(sEE_I2C, I2C_FLAG_BTF) == RESET)
 800e57c:	e00a      	b.n	800e594 <sEE_ReadBuffer+0x124>
  {
    if((sEETimeout--) == 0) return sEE_TIMEOUT_UserCallback();
 800e57e:	4b64      	ldr	r3, [pc, #400]	; (800e710 <sEE_ReadBuffer+0x2a0>)
 800e580:	681b      	ldr	r3, [r3, #0]
 800e582:	1e5a      	subs	r2, r3, #1
 800e584:	4962      	ldr	r1, [pc, #392]	; (800e710 <sEE_ReadBuffer+0x2a0>)
 800e586:	600a      	str	r2, [r1, #0]
 800e588:	2b00      	cmp	r3, #0
 800e58a:	d103      	bne.n	800e594 <sEE_ReadBuffer+0x124>
 800e58c:	f000 fc12 	bl	800edb4 <sEE_TIMEOUT_UserCallback>
 800e590:	4603      	mov	r3, r0
 800e592:	e0b6      	b.n	800e702 <sEE_ReadBuffer+0x292>
  while(I2C_GetFlagStatus(sEE_I2C, I2C_FLAG_BTF) == RESET)
 800e594:	4964      	ldr	r1, [pc, #400]	; (800e728 <sEE_ReadBuffer+0x2b8>)
 800e596:	485f      	ldr	r0, [pc, #380]	; (800e714 <sEE_ReadBuffer+0x2a4>)
 800e598:	f7f8 fe28 	bl	80071ec <I2C_GetFlagStatus>
 800e59c:	4603      	mov	r3, r0
 800e59e:	2b00      	cmp	r3, #0
 800e5a0:	d0ed      	beq.n	800e57e <sEE_ReadBuffer+0x10e>
  }
  
  /*!< Send STRAT condition a second time */  
  I2C_GenerateSTART(sEE_I2C, ENABLE);
 800e5a2:	2101      	movs	r1, #1
 800e5a4:	485b      	ldr	r0, [pc, #364]	; (800e714 <sEE_ReadBuffer+0x2a4>)
 800e5a6:	f7f8 fb20 	bl	8006bea <I2C_GenerateSTART>
  
  /*!< Test on EV5 and clear it (cleared by reading SR1 then writing to DR) */
  sEETimeout = sEE_FLAG_TIMEOUT;
 800e5aa:	4b59      	ldr	r3, [pc, #356]	; (800e710 <sEE_ReadBuffer+0x2a0>)
 800e5ac:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800e5b0:	601a      	str	r2, [r3, #0]
  while(!I2C_CheckEvent(sEE_I2C, I2C_EVENT_MASTER_MODE_SELECT))
 800e5b2:	e00a      	b.n	800e5ca <sEE_ReadBuffer+0x15a>
  {
    if((sEETimeout--) == 0) return sEE_TIMEOUT_UserCallback();
 800e5b4:	4b56      	ldr	r3, [pc, #344]	; (800e710 <sEE_ReadBuffer+0x2a0>)
 800e5b6:	681b      	ldr	r3, [r3, #0]
 800e5b8:	1e5a      	subs	r2, r3, #1
 800e5ba:	4955      	ldr	r1, [pc, #340]	; (800e710 <sEE_ReadBuffer+0x2a0>)
 800e5bc:	600a      	str	r2, [r1, #0]
 800e5be:	2b00      	cmp	r3, #0
 800e5c0:	d103      	bne.n	800e5ca <sEE_ReadBuffer+0x15a>
 800e5c2:	f000 fbf7 	bl	800edb4 <sEE_TIMEOUT_UserCallback>
 800e5c6:	4603      	mov	r3, r0
 800e5c8:	e09b      	b.n	800e702 <sEE_ReadBuffer+0x292>
  while(!I2C_CheckEvent(sEE_I2C, I2C_EVENT_MASTER_MODE_SELECT))
 800e5ca:	4953      	ldr	r1, [pc, #332]	; (800e718 <sEE_ReadBuffer+0x2a8>)
 800e5cc:	4851      	ldr	r0, [pc, #324]	; (800e714 <sEE_ReadBuffer+0x2a4>)
 800e5ce:	f7f8 fdbb 	bl	8007148 <I2C_CheckEvent>
 800e5d2:	4603      	mov	r3, r0
 800e5d4:	2b00      	cmp	r3, #0
 800e5d6:	d0ed      	beq.n	800e5b4 <sEE_ReadBuffer+0x144>
  } 
  
  /*!< Send EEPROM address for read */
  I2C_Send7bitAddress(sEE_I2C, sEEAddress, I2C_Direction_Receiver);  
 800e5d8:	4b50      	ldr	r3, [pc, #320]	; (800e71c <sEE_ReadBuffer+0x2ac>)
 800e5da:	881b      	ldrh	r3, [r3, #0]
 800e5dc:	b29b      	uxth	r3, r3
 800e5de:	b2db      	uxtb	r3, r3
 800e5e0:	2201      	movs	r2, #1
 800e5e2:	4619      	mov	r1, r3
 800e5e4:	484b      	ldr	r0, [pc, #300]	; (800e714 <sEE_ReadBuffer+0x2a4>)
 800e5e6:	f7f8 fb40 	bl	8006c6a <I2C_Send7bitAddress>
  
  /* If number of data to be read is 1, then DMA couldn't be used */
  /* One Byte Master Reception procedure (POLLING) ---------------------------*/
  if ((uint16_t)(*NumByteToRead) < 2)
 800e5ea:	687b      	ldr	r3, [r7, #4]
 800e5ec:	881b      	ldrh	r3, [r3, #0]
 800e5ee:	2b01      	cmp	r3, #1
 800e5f0:	d860      	bhi.n	800e6b4 <sEE_ReadBuffer+0x244>
  {
    /* Wait on ADDR flag to be set (ADDR is still not cleared at this level */
    sEETimeout = sEE_FLAG_TIMEOUT;
 800e5f2:	4b47      	ldr	r3, [pc, #284]	; (800e710 <sEE_ReadBuffer+0x2a0>)
 800e5f4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800e5f8:	601a      	str	r2, [r3, #0]
    while(I2C_GetFlagStatus(sEE_I2C, I2C_FLAG_ADDR) == RESET)
 800e5fa:	e00a      	b.n	800e612 <sEE_ReadBuffer+0x1a2>
    {
      if((sEETimeout--) == 0) return sEE_TIMEOUT_UserCallback();
 800e5fc:	4b44      	ldr	r3, [pc, #272]	; (800e710 <sEE_ReadBuffer+0x2a0>)
 800e5fe:	681b      	ldr	r3, [r3, #0]
 800e600:	1e5a      	subs	r2, r3, #1
 800e602:	4943      	ldr	r1, [pc, #268]	; (800e710 <sEE_ReadBuffer+0x2a0>)
 800e604:	600a      	str	r2, [r1, #0]
 800e606:	2b00      	cmp	r3, #0
 800e608:	d103      	bne.n	800e612 <sEE_ReadBuffer+0x1a2>
 800e60a:	f000 fbd3 	bl	800edb4 <sEE_TIMEOUT_UserCallback>
 800e60e:	4603      	mov	r3, r0
 800e610:	e077      	b.n	800e702 <sEE_ReadBuffer+0x292>
    while(I2C_GetFlagStatus(sEE_I2C, I2C_FLAG_ADDR) == RESET)
 800e612:	4946      	ldr	r1, [pc, #280]	; (800e72c <sEE_ReadBuffer+0x2bc>)
 800e614:	483f      	ldr	r0, [pc, #252]	; (800e714 <sEE_ReadBuffer+0x2a4>)
 800e616:	f7f8 fde9 	bl	80071ec <I2C_GetFlagStatus>
 800e61a:	4603      	mov	r3, r0
 800e61c:	2b00      	cmp	r3, #0
 800e61e:	d0ed      	beq.n	800e5fc <sEE_ReadBuffer+0x18c>
    }     
    
    /*!< Disable Acknowledgement */
    I2C_AcknowledgeConfig(sEE_I2C, DISABLE);   
 800e620:	2100      	movs	r1, #0
 800e622:	483c      	ldr	r0, [pc, #240]	; (800e714 <sEE_ReadBuffer+0x2a4>)
 800e624:	f7f8 fb3f 	bl	8006ca6 <I2C_AcknowledgeConfig>
    
    /* Clear ADDR register by reading SR1 then SR2 register (SR1 has already been read) */
    (void)sEE_I2C->SR2;
 800e628:	4b3a      	ldr	r3, [pc, #232]	; (800e714 <sEE_ReadBuffer+0x2a4>)
 800e62a:	8b1b      	ldrh	r3, [r3, #24]
    
    /*!< Send STOP Condition */
    I2C_GenerateSTOP(sEE_I2C, ENABLE);
 800e62c:	2101      	movs	r1, #1
 800e62e:	4839      	ldr	r0, [pc, #228]	; (800e714 <sEE_ReadBuffer+0x2a4>)
 800e630:	f7f8 fafb 	bl	8006c2a <I2C_GenerateSTOP>
    
    /* Wait for the byte to be received */
    sEETimeout = sEE_FLAG_TIMEOUT;
 800e634:	4b36      	ldr	r3, [pc, #216]	; (800e710 <sEE_ReadBuffer+0x2a0>)
 800e636:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800e63a:	601a      	str	r2, [r3, #0]
    while(I2C_GetFlagStatus(sEE_I2C, I2C_FLAG_RXNE) == RESET)
 800e63c:	e00a      	b.n	800e654 <sEE_ReadBuffer+0x1e4>
    {
      if((sEETimeout--) == 0) return sEE_TIMEOUT_UserCallback();
 800e63e:	4b34      	ldr	r3, [pc, #208]	; (800e710 <sEE_ReadBuffer+0x2a0>)
 800e640:	681b      	ldr	r3, [r3, #0]
 800e642:	1e5a      	subs	r2, r3, #1
 800e644:	4932      	ldr	r1, [pc, #200]	; (800e710 <sEE_ReadBuffer+0x2a0>)
 800e646:	600a      	str	r2, [r1, #0]
 800e648:	2b00      	cmp	r3, #0
 800e64a:	d103      	bne.n	800e654 <sEE_ReadBuffer+0x1e4>
 800e64c:	f000 fbb2 	bl	800edb4 <sEE_TIMEOUT_UserCallback>
 800e650:	4603      	mov	r3, r0
 800e652:	e056      	b.n	800e702 <sEE_ReadBuffer+0x292>
    while(I2C_GetFlagStatus(sEE_I2C, I2C_FLAG_RXNE) == RESET)
 800e654:	4936      	ldr	r1, [pc, #216]	; (800e730 <sEE_ReadBuffer+0x2c0>)
 800e656:	482f      	ldr	r0, [pc, #188]	; (800e714 <sEE_ReadBuffer+0x2a4>)
 800e658:	f7f8 fdc8 	bl	80071ec <I2C_GetFlagStatus>
 800e65c:	4603      	mov	r3, r0
 800e65e:	2b00      	cmp	r3, #0
 800e660:	d0ed      	beq.n	800e63e <sEE_ReadBuffer+0x1ce>
    }
    
    /*!< Read the byte received from the EEPROM */
    *pBuffer = I2C_ReceiveData(sEE_I2C);
 800e662:	482c      	ldr	r0, [pc, #176]	; (800e714 <sEE_ReadBuffer+0x2a4>)
 800e664:	f7f8 fc76 	bl	8006f54 <I2C_ReceiveData>
 800e668:	4603      	mov	r3, r0
 800e66a:	461a      	mov	r2, r3
 800e66c:	68fb      	ldr	r3, [r7, #12]
 800e66e:	701a      	strb	r2, [r3, #0]
    
    /*!< Decrement the read bytes counter */
    (uint16_t)(*NumByteToRead)--;        
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	881b      	ldrh	r3, [r3, #0]
 800e674:	3b01      	subs	r3, #1
 800e676:	b29a      	uxth	r2, r3
 800e678:	687b      	ldr	r3, [r7, #4]
 800e67a:	801a      	strh	r2, [r3, #0]
    
    /* Wait to make sure that STOP control bit has been cleared */
    sEETimeout = sEE_FLAG_TIMEOUT;
 800e67c:	4b24      	ldr	r3, [pc, #144]	; (800e710 <sEE_ReadBuffer+0x2a0>)
 800e67e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800e682:	601a      	str	r2, [r3, #0]
    while(sEE_I2C->CR1 & I2C_CR1_STOP)
 800e684:	e00a      	b.n	800e69c <sEE_ReadBuffer+0x22c>
    {
      if((sEETimeout--) == 0) return sEE_TIMEOUT_UserCallback();
 800e686:	4b22      	ldr	r3, [pc, #136]	; (800e710 <sEE_ReadBuffer+0x2a0>)
 800e688:	681b      	ldr	r3, [r3, #0]
 800e68a:	1e5a      	subs	r2, r3, #1
 800e68c:	4920      	ldr	r1, [pc, #128]	; (800e710 <sEE_ReadBuffer+0x2a0>)
 800e68e:	600a      	str	r2, [r1, #0]
 800e690:	2b00      	cmp	r3, #0
 800e692:	d103      	bne.n	800e69c <sEE_ReadBuffer+0x22c>
 800e694:	f000 fb8e 	bl	800edb4 <sEE_TIMEOUT_UserCallback>
 800e698:	4603      	mov	r3, r0
 800e69a:	e032      	b.n	800e702 <sEE_ReadBuffer+0x292>
    while(sEE_I2C->CR1 & I2C_CR1_STOP)
 800e69c:	4b1d      	ldr	r3, [pc, #116]	; (800e714 <sEE_ReadBuffer+0x2a4>)
 800e69e:	881b      	ldrh	r3, [r3, #0]
 800e6a0:	b29b      	uxth	r3, r3
 800e6a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e6a6:	2b00      	cmp	r3, #0
 800e6a8:	d1ed      	bne.n	800e686 <sEE_ReadBuffer+0x216>
    }  
    
    /*!< Re-Enable Acknowledgement to be ready for another reception */
    I2C_AcknowledgeConfig(sEE_I2C, ENABLE);    
 800e6aa:	2101      	movs	r1, #1
 800e6ac:	4819      	ldr	r0, [pc, #100]	; (800e714 <sEE_ReadBuffer+0x2a4>)
 800e6ae:	f7f8 fafa 	bl	8006ca6 <I2C_AcknowledgeConfig>
 800e6b2:	e025      	b.n	800e700 <sEE_ReadBuffer+0x290>
  }
  else/* More than one Byte Master Reception procedure (DMA) -----------------*/
  {
    /*!< Test on EV6 and clear it */
    sEETimeout = sEE_FLAG_TIMEOUT;
 800e6b4:	4b16      	ldr	r3, [pc, #88]	; (800e710 <sEE_ReadBuffer+0x2a0>)
 800e6b6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800e6ba:	601a      	str	r2, [r3, #0]
    while(!I2C_CheckEvent(sEE_I2C, I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED))
 800e6bc:	e00a      	b.n	800e6d4 <sEE_ReadBuffer+0x264>
    {
      if((sEETimeout--) == 0) return sEE_TIMEOUT_UserCallback();
 800e6be:	4b14      	ldr	r3, [pc, #80]	; (800e710 <sEE_ReadBuffer+0x2a0>)
 800e6c0:	681b      	ldr	r3, [r3, #0]
 800e6c2:	1e5a      	subs	r2, r3, #1
 800e6c4:	4912      	ldr	r1, [pc, #72]	; (800e710 <sEE_ReadBuffer+0x2a0>)
 800e6c6:	600a      	str	r2, [r1, #0]
 800e6c8:	2b00      	cmp	r3, #0
 800e6ca:	d103      	bne.n	800e6d4 <sEE_ReadBuffer+0x264>
 800e6cc:	f000 fb72 	bl	800edb4 <sEE_TIMEOUT_UserCallback>
 800e6d0:	4603      	mov	r3, r0
 800e6d2:	e016      	b.n	800e702 <sEE_ReadBuffer+0x292>
    while(!I2C_CheckEvent(sEE_I2C, I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED))
 800e6d4:	4917      	ldr	r1, [pc, #92]	; (800e734 <sEE_ReadBuffer+0x2c4>)
 800e6d6:	480f      	ldr	r0, [pc, #60]	; (800e714 <sEE_ReadBuffer+0x2a4>)
 800e6d8:	f7f8 fd36 	bl	8007148 <I2C_CheckEvent>
 800e6dc:	4603      	mov	r3, r0
 800e6de:	2b00      	cmp	r3, #0
 800e6e0:	d0ed      	beq.n	800e6be <sEE_ReadBuffer+0x24e>
    }  
    
    /* Configure the DMA Rx Channel with the buffer address and the buffer size */
    sEE_LowLevel_DMAConfig((uint32_t)pBuffer, (uint16_t)(*NumByteToRead), sEE_DIRECTION_RX);
 800e6e2:	68f8      	ldr	r0, [r7, #12]
 800e6e4:	687b      	ldr	r3, [r7, #4]
 800e6e6:	881b      	ldrh	r3, [r3, #0]
 800e6e8:	2201      	movs	r2, #1
 800e6ea:	4619      	mov	r1, r3
 800e6ec:	f7ff fe56 	bl	800e39c <sEE_LowLevel_DMAConfig>
    
    /* Inform the DMA that the next End Of Transfer Signal will be the last one */
    I2C_DMALastTransferCmd(sEE_I2C, ENABLE); 
 800e6f0:	2101      	movs	r1, #1
 800e6f2:	4808      	ldr	r0, [pc, #32]	; (800e714 <sEE_ReadBuffer+0x2a4>)
 800e6f4:	f7f8 fccd 	bl	8007092 <I2C_DMALastTransferCmd>
    
    /* Enable the DMA Rx Stream */
    DMA_Cmd(sEE_I2C_DMA_STREAM_RX, ENABLE);    
 800e6f8:	2101      	movs	r1, #1
 800e6fa:	480f      	ldr	r0, [pc, #60]	; (800e738 <sEE_ReadBuffer+0x2c8>)
 800e6fc:	f7f5 fba3 	bl	8003e46 <DMA_Cmd>
  }
  
  /* If all operations OK, return sEE_OK (0) */
  return sEE_OK;
 800e700:	2300      	movs	r3, #0
}
 800e702:	4618      	mov	r0, r3
 800e704:	3710      	adds	r7, #16
 800e706:	46bd      	mov	sp, r7
 800e708:	bd80      	pop	{r7, pc}
 800e70a:	bf00      	nop
 800e70c:	20002e0c 	.word	0x20002e0c
 800e710:	200000a0 	.word	0x200000a0
 800e714:	40005c00 	.word	0x40005c00
 800e718:	00030001 	.word	0x00030001
 800e71c:	20002e08 	.word	0x20002e08
 800e720:	00070082 	.word	0x00070082
 800e724:	00070080 	.word	0x00070080
 800e728:	10000004 	.word	0x10000004
 800e72c:	10000002 	.word	0x10000002
 800e730:	10000040 	.word	0x10000040
 800e734:	00030002 	.word	0x00030002
 800e738:	40026040 	.word	0x40026040

0800e73c <sEE_WritePage>:
  * 
  * @retval sEE_OK (0) if operation is correctly performed, else return value 
  *         different from sEE_OK (0) or the timeout user callback.
  */
uint32_t sEE_WritePage(uint8_t* pBuffer, uint16_t WriteAddr, uint8_t* NumByteToWrite)
{ 
 800e73c:	b580      	push	{r7, lr}
 800e73e:	b084      	sub	sp, #16
 800e740:	af00      	add	r7, sp, #0
 800e742:	60f8      	str	r0, [r7, #12]
 800e744:	460b      	mov	r3, r1
 800e746:	607a      	str	r2, [r7, #4]
 800e748:	817b      	strh	r3, [r7, #10]
  /* Set the pointer to the Number of data to be written. This pointer will be used 
      by the DMA Transfer Completer interrupt Handler in order to reset the 
      variable to 0. User should check on this variable in order to know if the 
      DMA transfer has been complete or not. */
  sEEDataWritePointer = NumByteToWrite;  
 800e74a:	4a53      	ldr	r2, [pc, #332]	; (800e898 <sEE_WritePage+0x15c>)
 800e74c:	687b      	ldr	r3, [r7, #4]
 800e74e:	6013      	str	r3, [r2, #0]
  
  /*!< While the bus is busy */
  sEETimeout = sEE_LONG_TIMEOUT;
 800e750:	4b52      	ldr	r3, [pc, #328]	; (800e89c <sEE_WritePage+0x160>)
 800e752:	f44f 4220 	mov.w	r2, #40960	; 0xa000
 800e756:	601a      	str	r2, [r3, #0]
  while(I2C_GetFlagStatus(sEE_I2C, I2C_FLAG_BUSY))
 800e758:	e00a      	b.n	800e770 <sEE_WritePage+0x34>
  {
    if((sEETimeout--) == 0) return sEE_TIMEOUT_UserCallback();
 800e75a:	4b50      	ldr	r3, [pc, #320]	; (800e89c <sEE_WritePage+0x160>)
 800e75c:	681b      	ldr	r3, [r3, #0]
 800e75e:	1e5a      	subs	r2, r3, #1
 800e760:	494e      	ldr	r1, [pc, #312]	; (800e89c <sEE_WritePage+0x160>)
 800e762:	600a      	str	r2, [r1, #0]
 800e764:	2b00      	cmp	r3, #0
 800e766:	d103      	bne.n	800e770 <sEE_WritePage+0x34>
 800e768:	f000 fb24 	bl	800edb4 <sEE_TIMEOUT_UserCallback>
 800e76c:	4603      	mov	r3, r0
 800e76e:	e08e      	b.n	800e88e <sEE_WritePage+0x152>
  while(I2C_GetFlagStatus(sEE_I2C, I2C_FLAG_BUSY))
 800e770:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 800e774:	484a      	ldr	r0, [pc, #296]	; (800e8a0 <sEE_WritePage+0x164>)
 800e776:	f7f8 fd39 	bl	80071ec <I2C_GetFlagStatus>
 800e77a:	4603      	mov	r3, r0
 800e77c:	2b00      	cmp	r3, #0
 800e77e:	d1ec      	bne.n	800e75a <sEE_WritePage+0x1e>
  }
  
  /*!< Send START condition */
  I2C_GenerateSTART(sEE_I2C, ENABLE);
 800e780:	2101      	movs	r1, #1
 800e782:	4847      	ldr	r0, [pc, #284]	; (800e8a0 <sEE_WritePage+0x164>)
 800e784:	f7f8 fa31 	bl	8006bea <I2C_GenerateSTART>
  
  /*!< Test on EV5 and clear it */
  sEETimeout = sEE_FLAG_TIMEOUT;
 800e788:	4b44      	ldr	r3, [pc, #272]	; (800e89c <sEE_WritePage+0x160>)
 800e78a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800e78e:	601a      	str	r2, [r3, #0]
  while(!I2C_CheckEvent(sEE_I2C, I2C_EVENT_MASTER_MODE_SELECT))
 800e790:	e00a      	b.n	800e7a8 <sEE_WritePage+0x6c>
  {
    if((sEETimeout--) == 0) return sEE_TIMEOUT_UserCallback();
 800e792:	4b42      	ldr	r3, [pc, #264]	; (800e89c <sEE_WritePage+0x160>)
 800e794:	681b      	ldr	r3, [r3, #0]
 800e796:	1e5a      	subs	r2, r3, #1
 800e798:	4940      	ldr	r1, [pc, #256]	; (800e89c <sEE_WritePage+0x160>)
 800e79a:	600a      	str	r2, [r1, #0]
 800e79c:	2b00      	cmp	r3, #0
 800e79e:	d103      	bne.n	800e7a8 <sEE_WritePage+0x6c>
 800e7a0:	f000 fb08 	bl	800edb4 <sEE_TIMEOUT_UserCallback>
 800e7a4:	4603      	mov	r3, r0
 800e7a6:	e072      	b.n	800e88e <sEE_WritePage+0x152>
  while(!I2C_CheckEvent(sEE_I2C, I2C_EVENT_MASTER_MODE_SELECT))
 800e7a8:	493e      	ldr	r1, [pc, #248]	; (800e8a4 <sEE_WritePage+0x168>)
 800e7aa:	483d      	ldr	r0, [pc, #244]	; (800e8a0 <sEE_WritePage+0x164>)
 800e7ac:	f7f8 fccc 	bl	8007148 <I2C_CheckEvent>
 800e7b0:	4603      	mov	r3, r0
 800e7b2:	2b00      	cmp	r3, #0
 800e7b4:	d0ed      	beq.n	800e792 <sEE_WritePage+0x56>
  }
  
  /*!< Send EEPROM address for write */
  sEETimeout = sEE_FLAG_TIMEOUT;
 800e7b6:	4b39      	ldr	r3, [pc, #228]	; (800e89c <sEE_WritePage+0x160>)
 800e7b8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800e7bc:	601a      	str	r2, [r3, #0]
  I2C_Send7bitAddress(sEE_I2C, sEEAddress, I2C_Direction_Transmitter);
 800e7be:	4b3a      	ldr	r3, [pc, #232]	; (800e8a8 <sEE_WritePage+0x16c>)
 800e7c0:	881b      	ldrh	r3, [r3, #0]
 800e7c2:	b29b      	uxth	r3, r3
 800e7c4:	b2db      	uxtb	r3, r3
 800e7c6:	2200      	movs	r2, #0
 800e7c8:	4619      	mov	r1, r3
 800e7ca:	4835      	ldr	r0, [pc, #212]	; (800e8a0 <sEE_WritePage+0x164>)
 800e7cc:	f7f8 fa4d 	bl	8006c6a <I2C_Send7bitAddress>

  /*!< Test on EV6 and clear it */
  sEETimeout = sEE_FLAG_TIMEOUT;
 800e7d0:	4b32      	ldr	r3, [pc, #200]	; (800e89c <sEE_WritePage+0x160>)
 800e7d2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800e7d6:	601a      	str	r2, [r3, #0]
  while(!I2C_CheckEvent(sEE_I2C, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED))
 800e7d8:	e00a      	b.n	800e7f0 <sEE_WritePage+0xb4>
  {
    if((sEETimeout--) == 0) return sEE_TIMEOUT_UserCallback();
 800e7da:	4b30      	ldr	r3, [pc, #192]	; (800e89c <sEE_WritePage+0x160>)
 800e7dc:	681b      	ldr	r3, [r3, #0]
 800e7de:	1e5a      	subs	r2, r3, #1
 800e7e0:	492e      	ldr	r1, [pc, #184]	; (800e89c <sEE_WritePage+0x160>)
 800e7e2:	600a      	str	r2, [r1, #0]
 800e7e4:	2b00      	cmp	r3, #0
 800e7e6:	d103      	bne.n	800e7f0 <sEE_WritePage+0xb4>
 800e7e8:	f000 fae4 	bl	800edb4 <sEE_TIMEOUT_UserCallback>
 800e7ec:	4603      	mov	r3, r0
 800e7ee:	e04e      	b.n	800e88e <sEE_WritePage+0x152>
  while(!I2C_CheckEvent(sEE_I2C, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED))
 800e7f0:	492e      	ldr	r1, [pc, #184]	; (800e8ac <sEE_WritePage+0x170>)
 800e7f2:	482b      	ldr	r0, [pc, #172]	; (800e8a0 <sEE_WritePage+0x164>)
 800e7f4:	f7f8 fca8 	bl	8007148 <I2C_CheckEvent>
 800e7f8:	4603      	mov	r3, r0
 800e7fa:	2b00      	cmp	r3, #0
 800e7fc:	d0ed      	beq.n	800e7da <sEE_WritePage+0x9e>
  }
  
  /*!< Send the EEPROM's internal address to write to : MSB of the address first */
  I2C_SendData(sEE_I2C, (uint8_t)((WriteAddr & 0xFF00) >> 8));
 800e7fe:	897b      	ldrh	r3, [r7, #10]
 800e800:	0a1b      	lsrs	r3, r3, #8
 800e802:	b29b      	uxth	r3, r3
 800e804:	b2db      	uxtb	r3, r3
 800e806:	4619      	mov	r1, r3
 800e808:	4825      	ldr	r0, [pc, #148]	; (800e8a0 <sEE_WritePage+0x164>)
 800e80a:	f7f8 fb93 	bl	8006f34 <I2C_SendData>

  /*!< Test on EV8 and clear it */
  sEETimeout = sEE_FLAG_TIMEOUT;  
 800e80e:	4b23      	ldr	r3, [pc, #140]	; (800e89c <sEE_WritePage+0x160>)
 800e810:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800e814:	601a      	str	r2, [r3, #0]
  while(!I2C_CheckEvent(sEE_I2C, I2C_EVENT_MASTER_BYTE_TRANSMITTING))
 800e816:	e00a      	b.n	800e82e <sEE_WritePage+0xf2>
  {
    if((sEETimeout--) == 0) return sEE_TIMEOUT_UserCallback();
 800e818:	4b20      	ldr	r3, [pc, #128]	; (800e89c <sEE_WritePage+0x160>)
 800e81a:	681b      	ldr	r3, [r3, #0]
 800e81c:	1e5a      	subs	r2, r3, #1
 800e81e:	491f      	ldr	r1, [pc, #124]	; (800e89c <sEE_WritePage+0x160>)
 800e820:	600a      	str	r2, [r1, #0]
 800e822:	2b00      	cmp	r3, #0
 800e824:	d103      	bne.n	800e82e <sEE_WritePage+0xf2>
 800e826:	f000 fac5 	bl	800edb4 <sEE_TIMEOUT_UserCallback>
 800e82a:	4603      	mov	r3, r0
 800e82c:	e02f      	b.n	800e88e <sEE_WritePage+0x152>
  while(!I2C_CheckEvent(sEE_I2C, I2C_EVENT_MASTER_BYTE_TRANSMITTING))
 800e82e:	4920      	ldr	r1, [pc, #128]	; (800e8b0 <sEE_WritePage+0x174>)
 800e830:	481b      	ldr	r0, [pc, #108]	; (800e8a0 <sEE_WritePage+0x164>)
 800e832:	f7f8 fc89 	bl	8007148 <I2C_CheckEvent>
 800e836:	4603      	mov	r3, r0
 800e838:	2b00      	cmp	r3, #0
 800e83a:	d0ed      	beq.n	800e818 <sEE_WritePage+0xdc>
  }  
  
  /*!< Send the EEPROM's internal address to write to : LSB of the address */
  I2C_SendData(sEE_I2C, (uint8_t)(WriteAddr & 0x00FF));
 800e83c:	897b      	ldrh	r3, [r7, #10]
 800e83e:	b2db      	uxtb	r3, r3
 800e840:	4619      	mov	r1, r3
 800e842:	4817      	ldr	r0, [pc, #92]	; (800e8a0 <sEE_WritePage+0x164>)
 800e844:	f7f8 fb76 	bl	8006f34 <I2C_SendData>
  
  /*!< Test on EV8 and clear it */
  sEETimeout = sEE_FLAG_TIMEOUT; 
 800e848:	4b14      	ldr	r3, [pc, #80]	; (800e89c <sEE_WritePage+0x160>)
 800e84a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800e84e:	601a      	str	r2, [r3, #0]
  while(!I2C_CheckEvent(sEE_I2C, I2C_EVENT_MASTER_BYTE_TRANSMITTING))
 800e850:	e00a      	b.n	800e868 <sEE_WritePage+0x12c>
  {
    if((sEETimeout--) == 0) return sEE_TIMEOUT_UserCallback();
 800e852:	4b12      	ldr	r3, [pc, #72]	; (800e89c <sEE_WritePage+0x160>)
 800e854:	681b      	ldr	r3, [r3, #0]
 800e856:	1e5a      	subs	r2, r3, #1
 800e858:	4910      	ldr	r1, [pc, #64]	; (800e89c <sEE_WritePage+0x160>)
 800e85a:	600a      	str	r2, [r1, #0]
 800e85c:	2b00      	cmp	r3, #0
 800e85e:	d103      	bne.n	800e868 <sEE_WritePage+0x12c>
 800e860:	f000 faa8 	bl	800edb4 <sEE_TIMEOUT_UserCallback>
 800e864:	4603      	mov	r3, r0
 800e866:	e012      	b.n	800e88e <sEE_WritePage+0x152>
  while(!I2C_CheckEvent(sEE_I2C, I2C_EVENT_MASTER_BYTE_TRANSMITTING))
 800e868:	4911      	ldr	r1, [pc, #68]	; (800e8b0 <sEE_WritePage+0x174>)
 800e86a:	480d      	ldr	r0, [pc, #52]	; (800e8a0 <sEE_WritePage+0x164>)
 800e86c:	f7f8 fc6c 	bl	8007148 <I2C_CheckEvent>
 800e870:	4603      	mov	r3, r0
 800e872:	2b00      	cmp	r3, #0
 800e874:	d0ed      	beq.n	800e852 <sEE_WritePage+0x116>
  }  
  
  /* Configure the DMA Tx Channel with the buffer address and the buffer size */
  sEE_LowLevel_DMAConfig((uint32_t)pBuffer, (uint8_t)(*NumByteToWrite), sEE_DIRECTION_TX);
 800e876:	68f8      	ldr	r0, [r7, #12]
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	781b      	ldrb	r3, [r3, #0]
 800e87c:	2200      	movs	r2, #0
 800e87e:	4619      	mov	r1, r3
 800e880:	f7ff fd8c 	bl	800e39c <sEE_LowLevel_DMAConfig>
  
  /* Enable the DMA Tx Stream */
  DMA_Cmd(sEE_I2C_DMA_STREAM_TX, ENABLE);
 800e884:	2101      	movs	r1, #1
 800e886:	480b      	ldr	r0, [pc, #44]	; (800e8b4 <sEE_WritePage+0x178>)
 800e888:	f7f5 fadd 	bl	8003e46 <DMA_Cmd>
  
  /* If all operations OK, return sEE_OK (0) */
  return sEE_OK;
 800e88c:	2300      	movs	r3, #0
}
 800e88e:	4618      	mov	r0, r3
 800e890:	3710      	adds	r7, #16
 800e892:	46bd      	mov	sp, r7
 800e894:	bd80      	pop	{r7, pc}
 800e896:	bf00      	nop
 800e898:	20002e10 	.word	0x20002e10
 800e89c:	200000a0 	.word	0x200000a0
 800e8a0:	40005c00 	.word	0x40005c00
 800e8a4:	00030001 	.word	0x00030001
 800e8a8:	20002e08 	.word	0x20002e08
 800e8ac:	00070082 	.word	0x00070082
 800e8b0:	00070080 	.word	0x00070080
 800e8b4:	40026070 	.word	0x40026070

0800e8b8 <sEE_WriteBuffer>:
  * @param  WriteAddr : EEPROM's internal address to write to.
  * @param  NumByteToWrite : number of bytes to write to the EEPROM.
  * @retval None
  */
void sEE_WriteBuffer(uint8_t* pBuffer, uint16_t WriteAddr, uint16_t NumByteToWrite)
{
 800e8b8:	b580      	push	{r7, lr}
 800e8ba:	b084      	sub	sp, #16
 800e8bc:	af00      	add	r7, sp, #0
 800e8be:	6078      	str	r0, [r7, #4]
 800e8c0:	460b      	mov	r3, r1
 800e8c2:	807b      	strh	r3, [r7, #2]
 800e8c4:	4613      	mov	r3, r2
 800e8c6:	803b      	strh	r3, [r7, #0]
  uint16_t NumOfPage = 0, NumOfSingle = 0, count = 0;
 800e8c8:	2300      	movs	r3, #0
 800e8ca:	81fb      	strh	r3, [r7, #14]
 800e8cc:	2300      	movs	r3, #0
 800e8ce:	81bb      	strh	r3, [r7, #12]
 800e8d0:	2300      	movs	r3, #0
 800e8d2:	817b      	strh	r3, [r7, #10]
  uint16_t Addr = 0;
 800e8d4:	2300      	movs	r3, #0
 800e8d6:	813b      	strh	r3, [r7, #8]

  Addr = WriteAddr % sEE_PAGESIZE;
 800e8d8:	887b      	ldrh	r3, [r7, #2]
 800e8da:	f003 0303 	and.w	r3, r3, #3
 800e8de:	813b      	strh	r3, [r7, #8]
  count = sEE_PAGESIZE - Addr;
 800e8e0:	893b      	ldrh	r3, [r7, #8]
 800e8e2:	f1c3 0304 	rsb	r3, r3, #4
 800e8e6:	817b      	strh	r3, [r7, #10]
  NumOfPage =  NumByteToWrite / sEE_PAGESIZE;
 800e8e8:	883b      	ldrh	r3, [r7, #0]
 800e8ea:	089b      	lsrs	r3, r3, #2
 800e8ec:	81fb      	strh	r3, [r7, #14]
  NumOfSingle = NumByteToWrite % sEE_PAGESIZE;
 800e8ee:	883b      	ldrh	r3, [r7, #0]
 800e8f0:	f003 0303 	and.w	r3, r3, #3
 800e8f4:	81bb      	strh	r3, [r7, #12]
 
  /*!< If WriteAddr is sEE_PAGESIZE aligned  */
  if(Addr == 0) 
 800e8f6:	893b      	ldrh	r3, [r7, #8]
 800e8f8:	2b00      	cmp	r3, #0
 800e8fa:	d172      	bne.n	800e9e2 <sEE_WriteBuffer+0x12a>
  {
    /*!< If NumByteToWrite < sEE_PAGESIZE */
    if(NumOfPage == 0) 
 800e8fc:	89fb      	ldrh	r3, [r7, #14]
 800e8fe:	2b00      	cmp	r3, #0
 800e900:	d145      	bne.n	800e98e <sEE_WriteBuffer+0xd6>
    {
      /* Store the number of data to be written */
      sEEDataNum = NumOfSingle;
 800e902:	89bb      	ldrh	r3, [r7, #12]
 800e904:	b2da      	uxtb	r2, r3
 800e906:	4b97      	ldr	r3, [pc, #604]	; (800eb64 <sEE_WriteBuffer+0x2ac>)
 800e908:	701a      	strb	r2, [r3, #0]
      /* Start writing data */
      sEE_WritePage(pBuffer, WriteAddr, (uint8_t*)(&sEEDataNum));
 800e90a:	887b      	ldrh	r3, [r7, #2]
 800e90c:	4a95      	ldr	r2, [pc, #596]	; (800eb64 <sEE_WriteBuffer+0x2ac>)
 800e90e:	4619      	mov	r1, r3
 800e910:	6878      	ldr	r0, [r7, #4]
 800e912:	f7ff ff13 	bl	800e73c <sEE_WritePage>
      /* Wait transfer through DMA to be complete */
      sEETimeout = sEE_LONG_TIMEOUT;
 800e916:	4b94      	ldr	r3, [pc, #592]	; (800eb68 <sEE_WriteBuffer+0x2b0>)
 800e918:	f44f 4220 	mov.w	r2, #40960	; 0xa000
 800e91c:	601a      	str	r2, [r3, #0]
      while (sEEDataNum > 0)
 800e91e:	e009      	b.n	800e934 <sEE_WriteBuffer+0x7c>
      {
        if((sEETimeout--) == 0) {sEE_TIMEOUT_UserCallback(); return;};
 800e920:	4b91      	ldr	r3, [pc, #580]	; (800eb68 <sEE_WriteBuffer+0x2b0>)
 800e922:	681b      	ldr	r3, [r3, #0]
 800e924:	1e5a      	subs	r2, r3, #1
 800e926:	4990      	ldr	r1, [pc, #576]	; (800eb68 <sEE_WriteBuffer+0x2b0>)
 800e928:	600a      	str	r2, [r1, #0]
 800e92a:	2b00      	cmp	r3, #0
 800e92c:	d102      	bne.n	800e934 <sEE_WriteBuffer+0x7c>
 800e92e:	f000 fa41 	bl	800edb4 <sEE_TIMEOUT_UserCallback>
 800e932:	e150      	b.n	800ebd6 <sEE_WriteBuffer+0x31e>
      while (sEEDataNum > 0)
 800e934:	4b8b      	ldr	r3, [pc, #556]	; (800eb64 <sEE_WriteBuffer+0x2ac>)
 800e936:	781b      	ldrb	r3, [r3, #0]
 800e938:	b2db      	uxtb	r3, r3
 800e93a:	2b00      	cmp	r3, #0
 800e93c:	d1f0      	bne.n	800e920 <sEE_WriteBuffer+0x68>
      }
      sEE_WaitEepromStandbyState();
 800e93e:	f000 f951 	bl	800ebe4 <sEE_WaitEepromStandbyState>
 800e942:	e148      	b.n	800ebd6 <sEE_WriteBuffer+0x31e>
    else  
    {
      while(NumOfPage--)
      {
        /* Store the number of data to be written */
        sEEDataNum = sEE_PAGESIZE;        
 800e944:	4b87      	ldr	r3, [pc, #540]	; (800eb64 <sEE_WriteBuffer+0x2ac>)
 800e946:	2204      	movs	r2, #4
 800e948:	701a      	strb	r2, [r3, #0]
        sEE_WritePage(pBuffer, WriteAddr, (uint8_t*)(&sEEDataNum)); 
 800e94a:	887b      	ldrh	r3, [r7, #2]
 800e94c:	4a85      	ldr	r2, [pc, #532]	; (800eb64 <sEE_WriteBuffer+0x2ac>)
 800e94e:	4619      	mov	r1, r3
 800e950:	6878      	ldr	r0, [r7, #4]
 800e952:	f7ff fef3 	bl	800e73c <sEE_WritePage>
        /* Wait transfer through DMA to be complete */
        sEETimeout = sEE_LONG_TIMEOUT;
 800e956:	4b84      	ldr	r3, [pc, #528]	; (800eb68 <sEE_WriteBuffer+0x2b0>)
 800e958:	f44f 4220 	mov.w	r2, #40960	; 0xa000
 800e95c:	601a      	str	r2, [r3, #0]
        while (sEEDataNum > 0)
 800e95e:	e009      	b.n	800e974 <sEE_WriteBuffer+0xbc>
        {
          if((sEETimeout--) == 0) {sEE_TIMEOUT_UserCallback(); return;};
 800e960:	4b81      	ldr	r3, [pc, #516]	; (800eb68 <sEE_WriteBuffer+0x2b0>)
 800e962:	681b      	ldr	r3, [r3, #0]
 800e964:	1e5a      	subs	r2, r3, #1
 800e966:	4980      	ldr	r1, [pc, #512]	; (800eb68 <sEE_WriteBuffer+0x2b0>)
 800e968:	600a      	str	r2, [r1, #0]
 800e96a:	2b00      	cmp	r3, #0
 800e96c:	d102      	bne.n	800e974 <sEE_WriteBuffer+0xbc>
 800e96e:	f000 fa21 	bl	800edb4 <sEE_TIMEOUT_UserCallback>
 800e972:	e130      	b.n	800ebd6 <sEE_WriteBuffer+0x31e>
        while (sEEDataNum > 0)
 800e974:	4b7b      	ldr	r3, [pc, #492]	; (800eb64 <sEE_WriteBuffer+0x2ac>)
 800e976:	781b      	ldrb	r3, [r3, #0]
 800e978:	b2db      	uxtb	r3, r3
 800e97a:	2b00      	cmp	r3, #0
 800e97c:	d1f0      	bne.n	800e960 <sEE_WriteBuffer+0xa8>
        }      
        sEE_WaitEepromStandbyState();
 800e97e:	f000 f931 	bl	800ebe4 <sEE_WaitEepromStandbyState>
        WriteAddr +=  sEE_PAGESIZE;
 800e982:	887b      	ldrh	r3, [r7, #2]
 800e984:	3304      	adds	r3, #4
 800e986:	807b      	strh	r3, [r7, #2]
        pBuffer += sEE_PAGESIZE;
 800e988:	687b      	ldr	r3, [r7, #4]
 800e98a:	3304      	adds	r3, #4
 800e98c:	607b      	str	r3, [r7, #4]
      while(NumOfPage--)
 800e98e:	89fb      	ldrh	r3, [r7, #14]
 800e990:	1e5a      	subs	r2, r3, #1
 800e992:	81fa      	strh	r2, [r7, #14]
 800e994:	2b00      	cmp	r3, #0
 800e996:	d1d5      	bne.n	800e944 <sEE_WriteBuffer+0x8c>
      }

      if(NumOfSingle!=0)
 800e998:	89bb      	ldrh	r3, [r7, #12]
 800e99a:	2b00      	cmp	r3, #0
 800e99c:	f000 811b 	beq.w	800ebd6 <sEE_WriteBuffer+0x31e>
      {
        /* Store the number of data to be written */
        sEEDataNum = NumOfSingle;          
 800e9a0:	89bb      	ldrh	r3, [r7, #12]
 800e9a2:	b2da      	uxtb	r2, r3
 800e9a4:	4b6f      	ldr	r3, [pc, #444]	; (800eb64 <sEE_WriteBuffer+0x2ac>)
 800e9a6:	701a      	strb	r2, [r3, #0]
        sEE_WritePage(pBuffer, WriteAddr, (uint8_t*)(&sEEDataNum));
 800e9a8:	887b      	ldrh	r3, [r7, #2]
 800e9aa:	4a6e      	ldr	r2, [pc, #440]	; (800eb64 <sEE_WriteBuffer+0x2ac>)
 800e9ac:	4619      	mov	r1, r3
 800e9ae:	6878      	ldr	r0, [r7, #4]
 800e9b0:	f7ff fec4 	bl	800e73c <sEE_WritePage>
        /* Wait transfer through DMA to be complete */
        sEETimeout = sEE_LONG_TIMEOUT;
 800e9b4:	4b6c      	ldr	r3, [pc, #432]	; (800eb68 <sEE_WriteBuffer+0x2b0>)
 800e9b6:	f44f 4220 	mov.w	r2, #40960	; 0xa000
 800e9ba:	601a      	str	r2, [r3, #0]
        while (sEEDataNum > 0)
 800e9bc:	e009      	b.n	800e9d2 <sEE_WriteBuffer+0x11a>
        {
          if((sEETimeout--) == 0) {sEE_TIMEOUT_UserCallback(); return;};
 800e9be:	4b6a      	ldr	r3, [pc, #424]	; (800eb68 <sEE_WriteBuffer+0x2b0>)
 800e9c0:	681b      	ldr	r3, [r3, #0]
 800e9c2:	1e5a      	subs	r2, r3, #1
 800e9c4:	4968      	ldr	r1, [pc, #416]	; (800eb68 <sEE_WriteBuffer+0x2b0>)
 800e9c6:	600a      	str	r2, [r1, #0]
 800e9c8:	2b00      	cmp	r3, #0
 800e9ca:	d102      	bne.n	800e9d2 <sEE_WriteBuffer+0x11a>
 800e9cc:	f000 f9f2 	bl	800edb4 <sEE_TIMEOUT_UserCallback>
 800e9d0:	e101      	b.n	800ebd6 <sEE_WriteBuffer+0x31e>
        while (sEEDataNum > 0)
 800e9d2:	4b64      	ldr	r3, [pc, #400]	; (800eb64 <sEE_WriteBuffer+0x2ac>)
 800e9d4:	781b      	ldrb	r3, [r3, #0]
 800e9d6:	b2db      	uxtb	r3, r3
 800e9d8:	2b00      	cmp	r3, #0
 800e9da:	d1f0      	bne.n	800e9be <sEE_WriteBuffer+0x106>
        }    
        sEE_WaitEepromStandbyState();
 800e9dc:	f000 f902 	bl	800ebe4 <sEE_WaitEepromStandbyState>
 800e9e0:	e0f9      	b.n	800ebd6 <sEE_WriteBuffer+0x31e>
  }
  /*!< If WriteAddr is not sEE_PAGESIZE aligned  */
  else 
  {
    /*!< If NumByteToWrite < sEE_PAGESIZE */
    if(NumOfPage== 0) 
 800e9e2:	89fb      	ldrh	r3, [r7, #14]
 800e9e4:	2b00      	cmp	r3, #0
 800e9e6:	d16e      	bne.n	800eac6 <sEE_WriteBuffer+0x20e>
    {
      /*!< If the number of data to be written is more than the remaining space 
      in the current page: */
      if (NumByteToWrite > count)
 800e9e8:	883a      	ldrh	r2, [r7, #0]
 800e9ea:	897b      	ldrh	r3, [r7, #10]
 800e9ec:	429a      	cmp	r2, r3
 800e9ee:	d949      	bls.n	800ea84 <sEE_WriteBuffer+0x1cc>
      {
        /* Store the number of data to be written */
        sEEDataNum = count;        
 800e9f0:	897b      	ldrh	r3, [r7, #10]
 800e9f2:	b2da      	uxtb	r2, r3
 800e9f4:	4b5b      	ldr	r3, [pc, #364]	; (800eb64 <sEE_WriteBuffer+0x2ac>)
 800e9f6:	701a      	strb	r2, [r3, #0]
        /*!< Write the data contained in same page */
        sEE_WritePage(pBuffer, WriteAddr, (uint8_t*)(&sEEDataNum));
 800e9f8:	887b      	ldrh	r3, [r7, #2]
 800e9fa:	4a5a      	ldr	r2, [pc, #360]	; (800eb64 <sEE_WriteBuffer+0x2ac>)
 800e9fc:	4619      	mov	r1, r3
 800e9fe:	6878      	ldr	r0, [r7, #4]
 800ea00:	f7ff fe9c 	bl	800e73c <sEE_WritePage>
        /* Wait transfer through DMA to be complete */
        sEETimeout = sEE_LONG_TIMEOUT;
 800ea04:	4b58      	ldr	r3, [pc, #352]	; (800eb68 <sEE_WriteBuffer+0x2b0>)
 800ea06:	f44f 4220 	mov.w	r2, #40960	; 0xa000
 800ea0a:	601a      	str	r2, [r3, #0]
        while (sEEDataNum > 0)
 800ea0c:	e009      	b.n	800ea22 <sEE_WriteBuffer+0x16a>
        {
          if((sEETimeout--) == 0) {sEE_TIMEOUT_UserCallback(); return;};
 800ea0e:	4b56      	ldr	r3, [pc, #344]	; (800eb68 <sEE_WriteBuffer+0x2b0>)
 800ea10:	681b      	ldr	r3, [r3, #0]
 800ea12:	1e5a      	subs	r2, r3, #1
 800ea14:	4954      	ldr	r1, [pc, #336]	; (800eb68 <sEE_WriteBuffer+0x2b0>)
 800ea16:	600a      	str	r2, [r1, #0]
 800ea18:	2b00      	cmp	r3, #0
 800ea1a:	d102      	bne.n	800ea22 <sEE_WriteBuffer+0x16a>
 800ea1c:	f000 f9ca 	bl	800edb4 <sEE_TIMEOUT_UserCallback>
 800ea20:	e0d9      	b.n	800ebd6 <sEE_WriteBuffer+0x31e>
        while (sEEDataNum > 0)
 800ea22:	4b50      	ldr	r3, [pc, #320]	; (800eb64 <sEE_WriteBuffer+0x2ac>)
 800ea24:	781b      	ldrb	r3, [r3, #0]
 800ea26:	b2db      	uxtb	r3, r3
 800ea28:	2b00      	cmp	r3, #0
 800ea2a:	d1f0      	bne.n	800ea0e <sEE_WriteBuffer+0x156>
        }          
        sEE_WaitEepromStandbyState();      
 800ea2c:	f000 f8da 	bl	800ebe4 <sEE_WaitEepromStandbyState>
        
        /* Store the number of data to be written */
        sEEDataNum = (NumByteToWrite - count);          
 800ea30:	883b      	ldrh	r3, [r7, #0]
 800ea32:	b2da      	uxtb	r2, r3
 800ea34:	897b      	ldrh	r3, [r7, #10]
 800ea36:	b2db      	uxtb	r3, r3
 800ea38:	1ad3      	subs	r3, r2, r3
 800ea3a:	b2da      	uxtb	r2, r3
 800ea3c:	4b49      	ldr	r3, [pc, #292]	; (800eb64 <sEE_WriteBuffer+0x2ac>)
 800ea3e:	701a      	strb	r2, [r3, #0]
        /*!< Write the remaining data in the following page */
        sEE_WritePage((uint8_t*)(pBuffer + count), (WriteAddr + count), (uint8_t*)(&sEEDataNum));
 800ea40:	897b      	ldrh	r3, [r7, #10]
 800ea42:	687a      	ldr	r2, [r7, #4]
 800ea44:	18d0      	adds	r0, r2, r3
 800ea46:	887a      	ldrh	r2, [r7, #2]
 800ea48:	897b      	ldrh	r3, [r7, #10]
 800ea4a:	4413      	add	r3, r2
 800ea4c:	b29b      	uxth	r3, r3
 800ea4e:	4a45      	ldr	r2, [pc, #276]	; (800eb64 <sEE_WriteBuffer+0x2ac>)
 800ea50:	4619      	mov	r1, r3
 800ea52:	f7ff fe73 	bl	800e73c <sEE_WritePage>
        /* Wait transfer through DMA to be complete */
        sEETimeout = sEE_LONG_TIMEOUT;
 800ea56:	4b44      	ldr	r3, [pc, #272]	; (800eb68 <sEE_WriteBuffer+0x2b0>)
 800ea58:	f44f 4220 	mov.w	r2, #40960	; 0xa000
 800ea5c:	601a      	str	r2, [r3, #0]
        while (sEEDataNum > 0)
 800ea5e:	e009      	b.n	800ea74 <sEE_WriteBuffer+0x1bc>
        {
          if((sEETimeout--) == 0) {sEE_TIMEOUT_UserCallback(); return;};
 800ea60:	4b41      	ldr	r3, [pc, #260]	; (800eb68 <sEE_WriteBuffer+0x2b0>)
 800ea62:	681b      	ldr	r3, [r3, #0]
 800ea64:	1e5a      	subs	r2, r3, #1
 800ea66:	4940      	ldr	r1, [pc, #256]	; (800eb68 <sEE_WriteBuffer+0x2b0>)
 800ea68:	600a      	str	r2, [r1, #0]
 800ea6a:	2b00      	cmp	r3, #0
 800ea6c:	d102      	bne.n	800ea74 <sEE_WriteBuffer+0x1bc>
 800ea6e:	f000 f9a1 	bl	800edb4 <sEE_TIMEOUT_UserCallback>
 800ea72:	e0b0      	b.n	800ebd6 <sEE_WriteBuffer+0x31e>
        while (sEEDataNum > 0)
 800ea74:	4b3b      	ldr	r3, [pc, #236]	; (800eb64 <sEE_WriteBuffer+0x2ac>)
 800ea76:	781b      	ldrb	r3, [r3, #0]
 800ea78:	b2db      	uxtb	r3, r3
 800ea7a:	2b00      	cmp	r3, #0
 800ea7c:	d1f0      	bne.n	800ea60 <sEE_WriteBuffer+0x1a8>
        }     
        sEE_WaitEepromStandbyState();        
 800ea7e:	f000 f8b1 	bl	800ebe4 <sEE_WaitEepromStandbyState>
 800ea82:	e0a8      	b.n	800ebd6 <sEE_WriteBuffer+0x31e>
      }      
      else      
      {
        /* Store the number of data to be written */
        sEEDataNum = NumOfSingle;         
 800ea84:	89bb      	ldrh	r3, [r7, #12]
 800ea86:	b2da      	uxtb	r2, r3
 800ea88:	4b36      	ldr	r3, [pc, #216]	; (800eb64 <sEE_WriteBuffer+0x2ac>)
 800ea8a:	701a      	strb	r2, [r3, #0]
        sEE_WritePage(pBuffer, WriteAddr, (uint8_t*)(&sEEDataNum));
 800ea8c:	887b      	ldrh	r3, [r7, #2]
 800ea8e:	4a35      	ldr	r2, [pc, #212]	; (800eb64 <sEE_WriteBuffer+0x2ac>)
 800ea90:	4619      	mov	r1, r3
 800ea92:	6878      	ldr	r0, [r7, #4]
 800ea94:	f7ff fe52 	bl	800e73c <sEE_WritePage>
        /* Wait transfer through DMA to be complete */
        sEETimeout = sEE_LONG_TIMEOUT;
 800ea98:	4b33      	ldr	r3, [pc, #204]	; (800eb68 <sEE_WriteBuffer+0x2b0>)
 800ea9a:	f44f 4220 	mov.w	r2, #40960	; 0xa000
 800ea9e:	601a      	str	r2, [r3, #0]
        while (sEEDataNum > 0)
 800eaa0:	e009      	b.n	800eab6 <sEE_WriteBuffer+0x1fe>
        {
          if((sEETimeout--) == 0) {sEE_TIMEOUT_UserCallback(); return;};
 800eaa2:	4b31      	ldr	r3, [pc, #196]	; (800eb68 <sEE_WriteBuffer+0x2b0>)
 800eaa4:	681b      	ldr	r3, [r3, #0]
 800eaa6:	1e5a      	subs	r2, r3, #1
 800eaa8:	492f      	ldr	r1, [pc, #188]	; (800eb68 <sEE_WriteBuffer+0x2b0>)
 800eaaa:	600a      	str	r2, [r1, #0]
 800eaac:	2b00      	cmp	r3, #0
 800eaae:	d102      	bne.n	800eab6 <sEE_WriteBuffer+0x1fe>
 800eab0:	f000 f980 	bl	800edb4 <sEE_TIMEOUT_UserCallback>
 800eab4:	e08f      	b.n	800ebd6 <sEE_WriteBuffer+0x31e>
        while (sEEDataNum > 0)
 800eab6:	4b2b      	ldr	r3, [pc, #172]	; (800eb64 <sEE_WriteBuffer+0x2ac>)
 800eab8:	781b      	ldrb	r3, [r3, #0]
 800eaba:	b2db      	uxtb	r3, r3
 800eabc:	2b00      	cmp	r3, #0
 800eabe:	d1f0      	bne.n	800eaa2 <sEE_WriteBuffer+0x1ea>
        }          
        sEE_WaitEepromStandbyState();        
 800eac0:	f000 f890 	bl	800ebe4 <sEE_WaitEepromStandbyState>
 800eac4:	e087      	b.n	800ebd6 <sEE_WriteBuffer+0x31e>
      }     
    }
    /*!< If NumByteToWrite > sEE_PAGESIZE */
    else
    {
      NumByteToWrite -= count;
 800eac6:	883a      	ldrh	r2, [r7, #0]
 800eac8:	897b      	ldrh	r3, [r7, #10]
 800eaca:	1ad3      	subs	r3, r2, r3
 800eacc:	803b      	strh	r3, [r7, #0]
      NumOfPage =  NumByteToWrite / sEE_PAGESIZE;
 800eace:	883b      	ldrh	r3, [r7, #0]
 800ead0:	089b      	lsrs	r3, r3, #2
 800ead2:	81fb      	strh	r3, [r7, #14]
      NumOfSingle = NumByteToWrite % sEE_PAGESIZE;
 800ead4:	883b      	ldrh	r3, [r7, #0]
 800ead6:	f003 0303 	and.w	r3, r3, #3
 800eada:	81bb      	strh	r3, [r7, #12]
      
      if(count != 0)
 800eadc:	897b      	ldrh	r3, [r7, #10]
 800eade:	2b00      	cmp	r3, #0
 800eae0:	d051      	beq.n	800eb86 <sEE_WriteBuffer+0x2ce>
      {  
        /* Store the number of data to be written */
        sEEDataNum = count;         
 800eae2:	897b      	ldrh	r3, [r7, #10]
 800eae4:	b2da      	uxtb	r2, r3
 800eae6:	4b1f      	ldr	r3, [pc, #124]	; (800eb64 <sEE_WriteBuffer+0x2ac>)
 800eae8:	701a      	strb	r2, [r3, #0]
        sEE_WritePage(pBuffer, WriteAddr, (uint8_t*)(&sEEDataNum));
 800eaea:	887b      	ldrh	r3, [r7, #2]
 800eaec:	4a1d      	ldr	r2, [pc, #116]	; (800eb64 <sEE_WriteBuffer+0x2ac>)
 800eaee:	4619      	mov	r1, r3
 800eaf0:	6878      	ldr	r0, [r7, #4]
 800eaf2:	f7ff fe23 	bl	800e73c <sEE_WritePage>
        /* Wait transfer through DMA to be complete */
        sEETimeout = sEE_LONG_TIMEOUT;
 800eaf6:	4b1c      	ldr	r3, [pc, #112]	; (800eb68 <sEE_WriteBuffer+0x2b0>)
 800eaf8:	f44f 4220 	mov.w	r2, #40960	; 0xa000
 800eafc:	601a      	str	r2, [r3, #0]
        while (sEEDataNum > 0)
 800eafe:	e009      	b.n	800eb14 <sEE_WriteBuffer+0x25c>
        {
          if((sEETimeout--) == 0) {sEE_TIMEOUT_UserCallback(); return;};
 800eb00:	4b19      	ldr	r3, [pc, #100]	; (800eb68 <sEE_WriteBuffer+0x2b0>)
 800eb02:	681b      	ldr	r3, [r3, #0]
 800eb04:	1e5a      	subs	r2, r3, #1
 800eb06:	4918      	ldr	r1, [pc, #96]	; (800eb68 <sEE_WriteBuffer+0x2b0>)
 800eb08:	600a      	str	r2, [r1, #0]
 800eb0a:	2b00      	cmp	r3, #0
 800eb0c:	d102      	bne.n	800eb14 <sEE_WriteBuffer+0x25c>
 800eb0e:	f000 f951 	bl	800edb4 <sEE_TIMEOUT_UserCallback>
 800eb12:	e060      	b.n	800ebd6 <sEE_WriteBuffer+0x31e>
        while (sEEDataNum > 0)
 800eb14:	4b13      	ldr	r3, [pc, #76]	; (800eb64 <sEE_WriteBuffer+0x2ac>)
 800eb16:	781b      	ldrb	r3, [r3, #0]
 800eb18:	b2db      	uxtb	r3, r3
 800eb1a:	2b00      	cmp	r3, #0
 800eb1c:	d1f0      	bne.n	800eb00 <sEE_WriteBuffer+0x248>
        }     
        sEE_WaitEepromStandbyState();
 800eb1e:	f000 f861 	bl	800ebe4 <sEE_WaitEepromStandbyState>
        WriteAddr += count;
 800eb22:	887a      	ldrh	r2, [r7, #2]
 800eb24:	897b      	ldrh	r3, [r7, #10]
 800eb26:	4413      	add	r3, r2
 800eb28:	807b      	strh	r3, [r7, #2]
        pBuffer += count;
 800eb2a:	897b      	ldrh	r3, [r7, #10]
 800eb2c:	687a      	ldr	r2, [r7, #4]
 800eb2e:	4413      	add	r3, r2
 800eb30:	607b      	str	r3, [r7, #4]
      } 
      
      while(NumOfPage--)
 800eb32:	e028      	b.n	800eb86 <sEE_WriteBuffer+0x2ce>
      {
        /* Store the number of data to be written */
        sEEDataNum = sEE_PAGESIZE;          
 800eb34:	4b0b      	ldr	r3, [pc, #44]	; (800eb64 <sEE_WriteBuffer+0x2ac>)
 800eb36:	2204      	movs	r2, #4
 800eb38:	701a      	strb	r2, [r3, #0]
        sEE_WritePage(pBuffer, WriteAddr, (uint8_t*)(&sEEDataNum));
 800eb3a:	887b      	ldrh	r3, [r7, #2]
 800eb3c:	4a09      	ldr	r2, [pc, #36]	; (800eb64 <sEE_WriteBuffer+0x2ac>)
 800eb3e:	4619      	mov	r1, r3
 800eb40:	6878      	ldr	r0, [r7, #4]
 800eb42:	f7ff fdfb 	bl	800e73c <sEE_WritePage>
        /* Wait transfer through DMA to be complete */
        sEETimeout = sEE_LONG_TIMEOUT;
 800eb46:	4b08      	ldr	r3, [pc, #32]	; (800eb68 <sEE_WriteBuffer+0x2b0>)
 800eb48:	f44f 4220 	mov.w	r2, #40960	; 0xa000
 800eb4c:	601a      	str	r2, [r3, #0]
        while (sEEDataNum > 0)
 800eb4e:	e00d      	b.n	800eb6c <sEE_WriteBuffer+0x2b4>
        {
          if((sEETimeout--) == 0) {sEE_TIMEOUT_UserCallback(); return;};
 800eb50:	4b05      	ldr	r3, [pc, #20]	; (800eb68 <sEE_WriteBuffer+0x2b0>)
 800eb52:	681b      	ldr	r3, [r3, #0]
 800eb54:	1e5a      	subs	r2, r3, #1
 800eb56:	4904      	ldr	r1, [pc, #16]	; (800eb68 <sEE_WriteBuffer+0x2b0>)
 800eb58:	600a      	str	r2, [r1, #0]
 800eb5a:	2b00      	cmp	r3, #0
 800eb5c:	d106      	bne.n	800eb6c <sEE_WriteBuffer+0x2b4>
 800eb5e:	f000 f929 	bl	800edb4 <sEE_TIMEOUT_UserCallback>
 800eb62:	e038      	b.n	800ebd6 <sEE_WriteBuffer+0x31e>
 800eb64:	20002e14 	.word	0x20002e14
 800eb68:	200000a0 	.word	0x200000a0
        while (sEEDataNum > 0)
 800eb6c:	4b1b      	ldr	r3, [pc, #108]	; (800ebdc <sEE_WriteBuffer+0x324>)
 800eb6e:	781b      	ldrb	r3, [r3, #0]
 800eb70:	b2db      	uxtb	r3, r3
 800eb72:	2b00      	cmp	r3, #0
 800eb74:	d1ec      	bne.n	800eb50 <sEE_WriteBuffer+0x298>
        }        
        sEE_WaitEepromStandbyState();
 800eb76:	f000 f835 	bl	800ebe4 <sEE_WaitEepromStandbyState>
        WriteAddr +=  sEE_PAGESIZE;
 800eb7a:	887b      	ldrh	r3, [r7, #2]
 800eb7c:	3304      	adds	r3, #4
 800eb7e:	807b      	strh	r3, [r7, #2]
        pBuffer += sEE_PAGESIZE;  
 800eb80:	687b      	ldr	r3, [r7, #4]
 800eb82:	3304      	adds	r3, #4
 800eb84:	607b      	str	r3, [r7, #4]
      while(NumOfPage--)
 800eb86:	89fb      	ldrh	r3, [r7, #14]
 800eb88:	1e5a      	subs	r2, r3, #1
 800eb8a:	81fa      	strh	r2, [r7, #14]
 800eb8c:	2b00      	cmp	r3, #0
 800eb8e:	d1d1      	bne.n	800eb34 <sEE_WriteBuffer+0x27c>
      }
      if(NumOfSingle != 0)
 800eb90:	89bb      	ldrh	r3, [r7, #12]
 800eb92:	2b00      	cmp	r3, #0
 800eb94:	d01f      	beq.n	800ebd6 <sEE_WriteBuffer+0x31e>
      {
        /* Store the number of data to be written */
        sEEDataNum = NumOfSingle;           
 800eb96:	89bb      	ldrh	r3, [r7, #12]
 800eb98:	b2da      	uxtb	r2, r3
 800eb9a:	4b10      	ldr	r3, [pc, #64]	; (800ebdc <sEE_WriteBuffer+0x324>)
 800eb9c:	701a      	strb	r2, [r3, #0]
        sEE_WritePage(pBuffer, WriteAddr, (uint8_t*)(&sEEDataNum)); 
 800eb9e:	887b      	ldrh	r3, [r7, #2]
 800eba0:	4a0e      	ldr	r2, [pc, #56]	; (800ebdc <sEE_WriteBuffer+0x324>)
 800eba2:	4619      	mov	r1, r3
 800eba4:	6878      	ldr	r0, [r7, #4]
 800eba6:	f7ff fdc9 	bl	800e73c <sEE_WritePage>
        /* Wait transfer through DMA to be complete */
        sEETimeout = sEE_LONG_TIMEOUT;
 800ebaa:	4b0d      	ldr	r3, [pc, #52]	; (800ebe0 <sEE_WriteBuffer+0x328>)
 800ebac:	f44f 4220 	mov.w	r2, #40960	; 0xa000
 800ebb0:	601a      	str	r2, [r3, #0]
        while (sEEDataNum > 0)
 800ebb2:	e009      	b.n	800ebc8 <sEE_WriteBuffer+0x310>
        {
          if((sEETimeout--) == 0) {sEE_TIMEOUT_UserCallback(); return;};
 800ebb4:	4b0a      	ldr	r3, [pc, #40]	; (800ebe0 <sEE_WriteBuffer+0x328>)
 800ebb6:	681b      	ldr	r3, [r3, #0]
 800ebb8:	1e5a      	subs	r2, r3, #1
 800ebba:	4909      	ldr	r1, [pc, #36]	; (800ebe0 <sEE_WriteBuffer+0x328>)
 800ebbc:	600a      	str	r2, [r1, #0]
 800ebbe:	2b00      	cmp	r3, #0
 800ebc0:	d102      	bne.n	800ebc8 <sEE_WriteBuffer+0x310>
 800ebc2:	f000 f8f7 	bl	800edb4 <sEE_TIMEOUT_UserCallback>
 800ebc6:	e006      	b.n	800ebd6 <sEE_WriteBuffer+0x31e>
        while (sEEDataNum > 0)
 800ebc8:	4b04      	ldr	r3, [pc, #16]	; (800ebdc <sEE_WriteBuffer+0x324>)
 800ebca:	781b      	ldrb	r3, [r3, #0]
 800ebcc:	b2db      	uxtb	r3, r3
 800ebce:	2b00      	cmp	r3, #0
 800ebd0:	d1f0      	bne.n	800ebb4 <sEE_WriteBuffer+0x2fc>
        }         
        sEE_WaitEepromStandbyState();
 800ebd2:	f000 f807 	bl	800ebe4 <sEE_WaitEepromStandbyState>
      }
    }
  }  
}
 800ebd6:	3710      	adds	r7, #16
 800ebd8:	46bd      	mov	sp, r7
 800ebda:	bd80      	pop	{r7, pc}
 800ebdc:	20002e14 	.word	0x20002e14
 800ebe0:	200000a0 	.word	0x200000a0

0800ebe4 <sEE_WaitEepromStandbyState>:
  * @param  None
  * @retval sEE_OK (0) if operation is correctly performed, else return value 
  *         different from sEE_OK (0) or the timeout user callback.
  */
uint32_t sEE_WaitEepromStandbyState(void)      
{
 800ebe4:	b580      	push	{r7, lr}
 800ebe6:	b082      	sub	sp, #8
 800ebe8:	af00      	add	r7, sp, #0
  __IO uint16_t tmpSR1 = 0;
 800ebea:	2300      	movs	r3, #0
 800ebec:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t sEETrials = 0;
 800ebee:	2300      	movs	r3, #0
 800ebf0:	603b      	str	r3, [r7, #0]

  /*!< While the bus is busy */
  sEETimeout = sEE_LONG_TIMEOUT;
 800ebf2:	4b3b      	ldr	r3, [pc, #236]	; (800ece0 <sEE_WaitEepromStandbyState+0xfc>)
 800ebf4:	f44f 4220 	mov.w	r2, #40960	; 0xa000
 800ebf8:	601a      	str	r2, [r3, #0]
  while(I2C_GetFlagStatus(sEE_I2C, I2C_FLAG_BUSY))
 800ebfa:	e00a      	b.n	800ec12 <sEE_WaitEepromStandbyState+0x2e>
  {
    if((sEETimeout--) == 0) return sEE_TIMEOUT_UserCallback();
 800ebfc:	4b38      	ldr	r3, [pc, #224]	; (800ece0 <sEE_WaitEepromStandbyState+0xfc>)
 800ebfe:	681b      	ldr	r3, [r3, #0]
 800ec00:	1e5a      	subs	r2, r3, #1
 800ec02:	4937      	ldr	r1, [pc, #220]	; (800ece0 <sEE_WaitEepromStandbyState+0xfc>)
 800ec04:	600a      	str	r2, [r1, #0]
 800ec06:	2b00      	cmp	r3, #0
 800ec08:	d103      	bne.n	800ec12 <sEE_WaitEepromStandbyState+0x2e>
 800ec0a:	f000 f8d3 	bl	800edb4 <sEE_TIMEOUT_UserCallback>
 800ec0e:	4603      	mov	r3, r0
 800ec10:	e061      	b.n	800ecd6 <sEE_WaitEepromStandbyState+0xf2>
  while(I2C_GetFlagStatus(sEE_I2C, I2C_FLAG_BUSY))
 800ec12:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 800ec16:	4833      	ldr	r0, [pc, #204]	; (800ece4 <sEE_WaitEepromStandbyState+0x100>)
 800ec18:	f7f8 fae8 	bl	80071ec <I2C_GetFlagStatus>
 800ec1c:	4603      	mov	r3, r0
 800ec1e:	2b00      	cmp	r3, #0
 800ec20:	d1ec      	bne.n	800ebfc <sEE_WaitEepromStandbyState+0x18>
     of trials is reached (this number is defined by sEE_MAX_TRIALS_NUMBER define
     in stm32f429i_discovery_i2c_ee.h file) */
  while (1)
  {
    /*!< Send START condition */
    I2C_GenerateSTART(sEE_I2C, ENABLE);
 800ec22:	2101      	movs	r1, #1
 800ec24:	482f      	ldr	r0, [pc, #188]	; (800ece4 <sEE_WaitEepromStandbyState+0x100>)
 800ec26:	f7f7 ffe0 	bl	8006bea <I2C_GenerateSTART>

    /*!< Test on EV5 and clear it */
    sEETimeout = sEE_FLAG_TIMEOUT;
 800ec2a:	4b2d      	ldr	r3, [pc, #180]	; (800ece0 <sEE_WaitEepromStandbyState+0xfc>)
 800ec2c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800ec30:	601a      	str	r2, [r3, #0]
    while(!I2C_CheckEvent(sEE_I2C, I2C_EVENT_MASTER_MODE_SELECT))
 800ec32:	e00a      	b.n	800ec4a <sEE_WaitEepromStandbyState+0x66>
    {
      if((sEETimeout--) == 0) return sEE_TIMEOUT_UserCallback();
 800ec34:	4b2a      	ldr	r3, [pc, #168]	; (800ece0 <sEE_WaitEepromStandbyState+0xfc>)
 800ec36:	681b      	ldr	r3, [r3, #0]
 800ec38:	1e5a      	subs	r2, r3, #1
 800ec3a:	4929      	ldr	r1, [pc, #164]	; (800ece0 <sEE_WaitEepromStandbyState+0xfc>)
 800ec3c:	600a      	str	r2, [r1, #0]
 800ec3e:	2b00      	cmp	r3, #0
 800ec40:	d103      	bne.n	800ec4a <sEE_WaitEepromStandbyState+0x66>
 800ec42:	f000 f8b7 	bl	800edb4 <sEE_TIMEOUT_UserCallback>
 800ec46:	4603      	mov	r3, r0
 800ec48:	e045      	b.n	800ecd6 <sEE_WaitEepromStandbyState+0xf2>
    while(!I2C_CheckEvent(sEE_I2C, I2C_EVENT_MASTER_MODE_SELECT))
 800ec4a:	4927      	ldr	r1, [pc, #156]	; (800ece8 <sEE_WaitEepromStandbyState+0x104>)
 800ec4c:	4825      	ldr	r0, [pc, #148]	; (800ece4 <sEE_WaitEepromStandbyState+0x100>)
 800ec4e:	f7f8 fa7b 	bl	8007148 <I2C_CheckEvent>
 800ec52:	4603      	mov	r3, r0
 800ec54:	2b00      	cmp	r3, #0
 800ec56:	d0ed      	beq.n	800ec34 <sEE_WaitEepromStandbyState+0x50>
    }    

    /*!< Send EEPROM address for write */
    I2C_Send7bitAddress(sEE_I2C, sEEAddress, I2C_Direction_Transmitter);
 800ec58:	4b24      	ldr	r3, [pc, #144]	; (800ecec <sEE_WaitEepromStandbyState+0x108>)
 800ec5a:	881b      	ldrh	r3, [r3, #0]
 800ec5c:	b29b      	uxth	r3, r3
 800ec5e:	b2db      	uxtb	r3, r3
 800ec60:	2200      	movs	r2, #0
 800ec62:	4619      	mov	r1, r3
 800ec64:	481f      	ldr	r0, [pc, #124]	; (800ece4 <sEE_WaitEepromStandbyState+0x100>)
 800ec66:	f7f8 f800 	bl	8006c6a <I2C_Send7bitAddress>
    
    /* Wait for ADDR flag to be set (Slave acknowledged his address) */
    sEETimeout = sEE_LONG_TIMEOUT;
 800ec6a:	4b1d      	ldr	r3, [pc, #116]	; (800ece0 <sEE_WaitEepromStandbyState+0xfc>)
 800ec6c:	f44f 4220 	mov.w	r2, #40960	; 0xa000
 800ec70:	601a      	str	r2, [r3, #0]
    do
    {     
      /* Get the current value of the SR1 register */
      tmpSR1 = sEE_I2C->SR1;
 800ec72:	4b1c      	ldr	r3, [pc, #112]	; (800ece4 <sEE_WaitEepromStandbyState+0x100>)
 800ec74:	8a9b      	ldrh	r3, [r3, #20]
 800ec76:	b29b      	uxth	r3, r3
 800ec78:	80fb      	strh	r3, [r7, #6]
      
      /* Update the timeout value and exit if it reach 0 */
      if((sEETimeout--) == 0) return sEE_TIMEOUT_UserCallback();
 800ec7a:	4b19      	ldr	r3, [pc, #100]	; (800ece0 <sEE_WaitEepromStandbyState+0xfc>)
 800ec7c:	681b      	ldr	r3, [r3, #0]
 800ec7e:	1e5a      	subs	r2, r3, #1
 800ec80:	4917      	ldr	r1, [pc, #92]	; (800ece0 <sEE_WaitEepromStandbyState+0xfc>)
 800ec82:	600a      	str	r2, [r1, #0]
 800ec84:	2b00      	cmp	r3, #0
 800ec86:	d103      	bne.n	800ec90 <sEE_WaitEepromStandbyState+0xac>
 800ec88:	f000 f894 	bl	800edb4 <sEE_TIMEOUT_UserCallback>
 800ec8c:	4603      	mov	r3, r0
 800ec8e:	e022      	b.n	800ecd6 <sEE_WaitEepromStandbyState+0xf2>
    }
    /* Keep looping till the Address is acknowledged or the AF flag is 
       set (address not acknowledged at time) */
    while((tmpSR1 & (I2C_SR1_ADDR | I2C_SR1_AF)) == 0);
 800ec90:	88fb      	ldrh	r3, [r7, #6]
 800ec92:	b29b      	uxth	r3, r3
 800ec94:	461a      	mov	r2, r3
 800ec96:	f240 4302 	movw	r3, #1026	; 0x402
 800ec9a:	4013      	ands	r3, r2
 800ec9c:	2b00      	cmp	r3, #0
 800ec9e:	d0e8      	beq.n	800ec72 <sEE_WaitEepromStandbyState+0x8e>
     
    /* Check if the ADDR flag has been set */
    if (tmpSR1 & I2C_SR1_ADDR)
 800eca0:	88fb      	ldrh	r3, [r7, #6]
 800eca2:	b29b      	uxth	r3, r3
 800eca4:	f003 0302 	and.w	r3, r3, #2
 800eca8:	2b00      	cmp	r3, #0
 800ecaa:	d007      	beq.n	800ecbc <sEE_WaitEepromStandbyState+0xd8>
    {
      /* Clear ADDR Flag by reading SR1 then SR2 registers (SR1 have already 
         been read) */
      (void)sEE_I2C->SR2;
 800ecac:	4b0d      	ldr	r3, [pc, #52]	; (800ece4 <sEE_WaitEepromStandbyState+0x100>)
 800ecae:	8b1b      	ldrh	r3, [r3, #24]
      
      /*!< STOP condition */    
      I2C_GenerateSTOP(sEE_I2C, ENABLE);
 800ecb0:	2101      	movs	r1, #1
 800ecb2:	480c      	ldr	r0, [pc, #48]	; (800ece4 <sEE_WaitEepromStandbyState+0x100>)
 800ecb4:	f7f7 ffb9 	bl	8006c2a <I2C_GenerateSTOP>
        
      /* Exit the function */
      return sEE_OK;
 800ecb8:	2300      	movs	r3, #0
 800ecba:	e00c      	b.n	800ecd6 <sEE_WaitEepromStandbyState+0xf2>
    }
    else
    {
      /*!< Clear AF flag */
      I2C_ClearFlag(sEE_I2C, I2C_FLAG_AF);                  
 800ecbc:	490c      	ldr	r1, [pc, #48]	; (800ecf0 <sEE_WaitEepromStandbyState+0x10c>)
 800ecbe:	4809      	ldr	r0, [pc, #36]	; (800ece4 <sEE_WaitEepromStandbyState+0x100>)
 800ecc0:	f7f8 fac7 	bl	8007252 <I2C_ClearFlag>
    }
    
    /* Check if the maximum allowed number of trials has bee reached */
    if (sEETrials++ == sEE_MAX_TRIALS_NUMBER)
 800ecc4:	683b      	ldr	r3, [r7, #0]
 800ecc6:	1c5a      	adds	r2, r3, #1
 800ecc8:	603a      	str	r2, [r7, #0]
 800ecca:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800ecce:	d1a8      	bne.n	800ec22 <sEE_WaitEepromStandbyState+0x3e>
    {
      /* If the maximum number of trials has been reached, exit the function */
      return sEE_TIMEOUT_UserCallback();
 800ecd0:	f000 f870 	bl	800edb4 <sEE_TIMEOUT_UserCallback>
 800ecd4:	4603      	mov	r3, r0
    }
  }
}
 800ecd6:	4618      	mov	r0, r3
 800ecd8:	3708      	adds	r7, #8
 800ecda:	46bd      	mov	sp, r7
 800ecdc:	bd80      	pop	{r7, pc}
 800ecde:	bf00      	nop
 800ece0:	200000a0 	.word	0x200000a0
 800ece4:	40005c00 	.word	0x40005c00
 800ece8:	00030001 	.word	0x00030001
 800ecec:	20002e08 	.word	0x20002e08
 800ecf0:	10000400 	.word	0x10000400

0800ecf4 <DMA1_Stream4_IRQHandler>:
  * @brief  This function handles the DMA Tx Channel interrupt Handler.
  * @param  None
  * @retval None
  */
void sEE_I2C_DMA_TX_IRQHandler(void)
{
 800ecf4:	b580      	push	{r7, lr}
 800ecf6:	af00      	add	r7, sp, #0
  /* Check if the DMA transfer is complete */
  if(DMA_GetFlagStatus(sEE_I2C_DMA_STREAM_TX, sEE_TX_DMA_FLAG_TCIF) != RESET)
 800ecf8:	4916      	ldr	r1, [pc, #88]	; (800ed54 <DMA1_Stream4_IRQHandler+0x60>)
 800ecfa:	4817      	ldr	r0, [pc, #92]	; (800ed58 <DMA1_Stream4_IRQHandler+0x64>)
 800ecfc:	f7f5 f9a4 	bl	8004048 <DMA_GetFlagStatus>
 800ed00:	4603      	mov	r3, r0
 800ed02:	2b00      	cmp	r3, #0
 800ed04:	d024      	beq.n	800ed50 <DMA1_Stream4_IRQHandler+0x5c>
  {  
    /* Disable the DMA Tx Stream and Clear TC flag */  
    DMA_Cmd(sEE_I2C_DMA_STREAM_TX, DISABLE);
 800ed06:	2100      	movs	r1, #0
 800ed08:	4813      	ldr	r0, [pc, #76]	; (800ed58 <DMA1_Stream4_IRQHandler+0x64>)
 800ed0a:	f7f5 f89c 	bl	8003e46 <DMA_Cmd>
    DMA_ClearFlag(sEE_I2C_DMA_STREAM_TX, sEE_TX_DMA_FLAG_TCIF);
 800ed0e:	4911      	ldr	r1, [pc, #68]	; (800ed54 <DMA1_Stream4_IRQHandler+0x60>)
 800ed10:	4811      	ldr	r0, [pc, #68]	; (800ed58 <DMA1_Stream4_IRQHandler+0x64>)
 800ed12:	f7f5 f9d5 	bl	80040c0 <DMA_ClearFlag>

    /*!< Wait till all data have been physically transferred on the bus */
    sEETimeout = sEE_LONG_TIMEOUT;
 800ed16:	4b11      	ldr	r3, [pc, #68]	; (800ed5c <DMA1_Stream4_IRQHandler+0x68>)
 800ed18:	f44f 4220 	mov.w	r2, #40960	; 0xa000
 800ed1c:	601a      	str	r2, [r3, #0]
    while(!I2C_GetFlagStatus(sEE_I2C, I2C_FLAG_BTF))
 800ed1e:	e008      	b.n	800ed32 <DMA1_Stream4_IRQHandler+0x3e>
    {
      if((sEETimeout--) == 0) sEE_TIMEOUT_UserCallback();
 800ed20:	4b0e      	ldr	r3, [pc, #56]	; (800ed5c <DMA1_Stream4_IRQHandler+0x68>)
 800ed22:	681b      	ldr	r3, [r3, #0]
 800ed24:	1e5a      	subs	r2, r3, #1
 800ed26:	490d      	ldr	r1, [pc, #52]	; (800ed5c <DMA1_Stream4_IRQHandler+0x68>)
 800ed28:	600a      	str	r2, [r1, #0]
 800ed2a:	2b00      	cmp	r3, #0
 800ed2c:	d101      	bne.n	800ed32 <DMA1_Stream4_IRQHandler+0x3e>
 800ed2e:	f000 f841 	bl	800edb4 <sEE_TIMEOUT_UserCallback>
    while(!I2C_GetFlagStatus(sEE_I2C, I2C_FLAG_BTF))
 800ed32:	490b      	ldr	r1, [pc, #44]	; (800ed60 <DMA1_Stream4_IRQHandler+0x6c>)
 800ed34:	480b      	ldr	r0, [pc, #44]	; (800ed64 <DMA1_Stream4_IRQHandler+0x70>)
 800ed36:	f7f8 fa59 	bl	80071ec <I2C_GetFlagStatus>
 800ed3a:	4603      	mov	r3, r0
 800ed3c:	2b00      	cmp	r3, #0
 800ed3e:	d0ef      	beq.n	800ed20 <DMA1_Stream4_IRQHandler+0x2c>
    }
    
    /*!< Send STOP condition */
    I2C_GenerateSTOP(sEE_I2C, ENABLE);
 800ed40:	2101      	movs	r1, #1
 800ed42:	4808      	ldr	r0, [pc, #32]	; (800ed64 <DMA1_Stream4_IRQHandler+0x70>)
 800ed44:	f7f7 ff71 	bl	8006c2a <I2C_GenerateSTOP>
    
    /* Reset the variable holding the number of data to be written */
    *sEEDataWritePointer = 0;  
 800ed48:	4b07      	ldr	r3, [pc, #28]	; (800ed68 <DMA1_Stream4_IRQHandler+0x74>)
 800ed4a:	681b      	ldr	r3, [r3, #0]
 800ed4c:	2200      	movs	r2, #0
 800ed4e:	701a      	strb	r2, [r3, #0]
  }
}
 800ed50:	bf00      	nop
 800ed52:	bd80      	pop	{r7, pc}
 800ed54:	20000020 	.word	0x20000020
 800ed58:	40026070 	.word	0x40026070
 800ed5c:	200000a0 	.word	0x200000a0
 800ed60:	10000004 	.word	0x10000004
 800ed64:	40005c00 	.word	0x40005c00
 800ed68:	20002e10 	.word	0x20002e10

0800ed6c <DMA1_Stream2_IRQHandler>:
  * @brief  This function handles the DMA Rx Channel interrupt Handler.
  * @param  None
  * @retval None
  */
void sEE_I2C_DMA_RX_IRQHandler(void)
{
 800ed6c:	b580      	push	{r7, lr}
 800ed6e:	af00      	add	r7, sp, #0
  /* Check if the DMA transfer is complete */
  if(DMA_GetFlagStatus(sEE_I2C_DMA_STREAM_RX, sEE_RX_DMA_FLAG_TCIF) != RESET)
 800ed70:	f04f 5181 	mov.w	r1, #270532608	; 0x10200000
 800ed74:	480c      	ldr	r0, [pc, #48]	; (800eda8 <DMA1_Stream2_IRQHandler+0x3c>)
 800ed76:	f7f5 f967 	bl	8004048 <DMA_GetFlagStatus>
 800ed7a:	4603      	mov	r3, r0
 800ed7c:	2b00      	cmp	r3, #0
 800ed7e:	d010      	beq.n	800eda2 <DMA1_Stream2_IRQHandler+0x36>
  {      
    /*!< Send STOP Condition */
    I2C_GenerateSTOP(sEE_I2C, ENABLE);    
 800ed80:	2101      	movs	r1, #1
 800ed82:	480a      	ldr	r0, [pc, #40]	; (800edac <DMA1_Stream2_IRQHandler+0x40>)
 800ed84:	f7f7 ff51 	bl	8006c2a <I2C_GenerateSTOP>
    
    /* Disable the DMA Rx Stream and Clear TC Flag */  
    DMA_Cmd(sEE_I2C_DMA_STREAM_RX, DISABLE);
 800ed88:	2100      	movs	r1, #0
 800ed8a:	4807      	ldr	r0, [pc, #28]	; (800eda8 <DMA1_Stream2_IRQHandler+0x3c>)
 800ed8c:	f7f5 f85b 	bl	8003e46 <DMA_Cmd>
    DMA_ClearFlag(sEE_I2C_DMA_STREAM_RX, sEE_RX_DMA_FLAG_TCIF);
 800ed90:	f04f 5181 	mov.w	r1, #270532608	; 0x10200000
 800ed94:	4804      	ldr	r0, [pc, #16]	; (800eda8 <DMA1_Stream2_IRQHandler+0x3c>)
 800ed96:	f7f5 f993 	bl	80040c0 <DMA_ClearFlag>
    
    /* Reset the variable holding the number of data to be read */
    *sEEDataReadPointer = 0;
 800ed9a:	4b05      	ldr	r3, [pc, #20]	; (800edb0 <DMA1_Stream2_IRQHandler+0x44>)
 800ed9c:	681b      	ldr	r3, [r3, #0]
 800ed9e:	2200      	movs	r2, #0
 800eda0:	801a      	strh	r2, [r3, #0]
  }
}
 800eda2:	bf00      	nop
 800eda4:	bd80      	pop	{r7, pc}
 800eda6:	bf00      	nop
 800eda8:	40026040 	.word	0x40026040
 800edac:	40005c00 	.word	0x40005c00
 800edb0:	20002e0c 	.word	0x20002e0c

0800edb4 <sEE_TIMEOUT_UserCallback>:
  * @brief  Basic management of the timeout situation.
  * @param  None.
  * @retval None.
  */
uint32_t sEE_TIMEOUT_UserCallback(void)
{
 800edb4:	b480      	push	{r7}
 800edb6:	af00      	add	r7, sp, #0
  /* Block communication and all processes */
  while (1)
 800edb8:	e7fe      	b.n	800edb8 <sEE_TIMEOUT_UserCallback+0x4>
 800edba:	bf00      	nop

0800edbc <IOE_Config>:
  *         hardware (GPIOs, APB clocks ..).
  * @param  None
  * @retval IOE_OK if all initializations done correctly. Other value if error.
  */
uint8_t IOE_Config(void)
{
 800edbc:	b580      	push	{r7, lr}
 800edbe:	af00      	add	r7, sp, #0
  /* Configure the needed pins */
  IOE_GPIO_Config(); 
 800edc0:	f000 fd05 	bl	800f7ce <IOE_GPIO_Config>
  
  /* I2C initialization */
  IOE_I2C_Config();
 800edc4:	f000 fd4a 	bl	800f85c <IOE_I2C_Config>
    
  /* Read IO Expander ID  */
  if(IOE_IsOperational())
 800edc8:	f000 f8ad 	bl	800ef26 <IOE_IsOperational>
 800edcc:	4603      	mov	r3, r0
 800edce:	2b00      	cmp	r3, #0
 800edd0:	d001      	beq.n	800edd6 <IOE_Config+0x1a>
  {
    return IOE_NOT_OPERATIONAL;
 800edd2:	2304      	movs	r3, #4
 800edd4:	e008      	b.n	800ede8 <IOE_Config+0x2c>
  }
  
  /* Generate IO Expander Software reset */
  IOE_Reset(); 
 800edd6:	f000 f8bf 	bl	800ef58 <IOE_Reset>
  
  /* IO Expander configuration */
  /* Touch Panel controller and ADC configuration */
  IOE_FnctCmd(IOE_ADC_FCT, ENABLE);
 800edda:	2101      	movs	r1, #1
 800eddc:	2001      	movs	r0, #1
 800edde:	f000 f8e5 	bl	800efac <IOE_FnctCmd>
  IOE_TP_Config();
 800ede2:	f000 f959 	bl	800f098 <IOE_TP_Config>

  /* Configuration is OK */
  return IOE_OK; 
 800ede6:	2300      	movs	r3, #0
}
 800ede8:	4618      	mov	r0, r3
 800edea:	bd80      	pop	{r7, pc}

0800edec <IOE_TPITConfig>:
  * @brief  Enables the touch Panel interrupt.
  * @param  None
  * @retval IOE_OK: if all initializations are OK. Other value if error.
  */
uint8_t IOE_TPITConfig(void)
{    
 800edec:	b580      	push	{r7, lr}
 800edee:	af00      	add	r7, sp, #0
  /* Enable the Global interrupt */  
  IOE_GITCmd(ENABLE);     
 800edf0:	2001      	movs	r0, #1
 800edf2:	f000 f905 	bl	800f000 <IOE_GITCmd>
          
  /* Enable the Global GPIO Interrupt */
  IOE_GITConfig((uint8_t)(IOE_GIT_TOUCH | IOE_GIT_FTH | IOE_GIT_FOV), ENABLE);    
 800edf6:	2101      	movs	r1, #1
 800edf8:	2007      	movs	r0, #7
 800edfa:	f000 f923 	bl	800f044 <IOE_GITConfig>
    
  /* Read the GPIO_IT_STA to clear all pending bits if any */
  I2C_ReadDeviceRegister(IOE_REG_GPIO_INT_STA); 
 800edfe:	200d      	movs	r0, #13
 800ee00:	f000 fe58 	bl	800fab4 <I2C_ReadDeviceRegister>
  
  /* If all OK return IOE_OK */
  return IOE_OK;
 800ee04:	2300      	movs	r3, #0
}
 800ee06:	4618      	mov	r0, r3
 800ee08:	bd80      	pop	{r7, pc}

0800ee0a <IOE_TP_GetState>:
  * @brief  Returns Status and positions of the Touch Panel.
  * @param  None
  * @retval Pointer to TP_STATE structure holding Touch Panel information.
  */
TP_STATE* IOE_TP_GetState(void)
{
 800ee0a:	b580      	push	{r7, lr}
 800ee0c:	b084      	sub	sp, #16
 800ee0e:	af00      	add	r7, sp, #0
  uint32_t xDiff, yDiff , x , y;
  static uint32_t _x = 0, _y = 0;
  
  /* Check if the Touch detect event happened */
  TP_State.TouchDetected = (I2C_ReadDeviceRegister(IOE_REG_TP_CTRL) & 0x80);
 800ee10:	2040      	movs	r0, #64	; 0x40
 800ee12:	f000 fe4f 	bl	800fab4 <I2C_ReadDeviceRegister>
 800ee16:	4603      	mov	r3, r0
 800ee18:	b29b      	uxth	r3, r3
 800ee1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ee1e:	b29a      	uxth	r2, r3
 800ee20:	4b29      	ldr	r3, [pc, #164]	; (800eec8 <IOE_TP_GetState+0xbe>)
 800ee22:	801a      	strh	r2, [r3, #0]
  
  if(TP_State.TouchDetected) 
 800ee24:	4b28      	ldr	r3, [pc, #160]	; (800eec8 <IOE_TP_GetState+0xbe>)
 800ee26:	881b      	ldrh	r3, [r3, #0]
 800ee28:	2b00      	cmp	r3, #0
 800ee2a:	d030      	beq.n	800ee8e <IOE_TP_GetState+0x84>
  {
    x = IOE_TP_Read_X();
 800ee2c:	f000 fc5e 	bl	800f6ec <IOE_TP_Read_X>
 800ee30:	4603      	mov	r3, r0
 800ee32:	60fb      	str	r3, [r7, #12]
    y = IOE_TP_Read_Y();
 800ee34:	f000 fc8e 	bl	800f754 <IOE_TP_Read_Y>
 800ee38:	4603      	mov	r3, r0
 800ee3a:	60bb      	str	r3, [r7, #8]
    xDiff = x > _x? (x - _x): (_x - x);
 800ee3c:	4b23      	ldr	r3, [pc, #140]	; (800eecc <IOE_TP_GetState+0xc2>)
 800ee3e:	681b      	ldr	r3, [r3, #0]
 800ee40:	68fa      	ldr	r2, [r7, #12]
 800ee42:	429a      	cmp	r2, r3
 800ee44:	d904      	bls.n	800ee50 <IOE_TP_GetState+0x46>
 800ee46:	4b21      	ldr	r3, [pc, #132]	; (800eecc <IOE_TP_GetState+0xc2>)
 800ee48:	681b      	ldr	r3, [r3, #0]
 800ee4a:	68fa      	ldr	r2, [r7, #12]
 800ee4c:	1ad3      	subs	r3, r2, r3
 800ee4e:	e003      	b.n	800ee58 <IOE_TP_GetState+0x4e>
 800ee50:	4b1e      	ldr	r3, [pc, #120]	; (800eecc <IOE_TP_GetState+0xc2>)
 800ee52:	681a      	ldr	r2, [r3, #0]
 800ee54:	68fb      	ldr	r3, [r7, #12]
 800ee56:	1ad3      	subs	r3, r2, r3
 800ee58:	607b      	str	r3, [r7, #4]
    yDiff = y > _y? (y - _y): (_y - y);       
 800ee5a:	4b1d      	ldr	r3, [pc, #116]	; (800eed0 <IOE_TP_GetState+0xc6>)
 800ee5c:	681b      	ldr	r3, [r3, #0]
 800ee5e:	68ba      	ldr	r2, [r7, #8]
 800ee60:	429a      	cmp	r2, r3
 800ee62:	d904      	bls.n	800ee6e <IOE_TP_GetState+0x64>
 800ee64:	4b1a      	ldr	r3, [pc, #104]	; (800eed0 <IOE_TP_GetState+0xc6>)
 800ee66:	681b      	ldr	r3, [r3, #0]
 800ee68:	68ba      	ldr	r2, [r7, #8]
 800ee6a:	1ad3      	subs	r3, r2, r3
 800ee6c:	e003      	b.n	800ee76 <IOE_TP_GetState+0x6c>
 800ee6e:	4b18      	ldr	r3, [pc, #96]	; (800eed0 <IOE_TP_GetState+0xc6>)
 800ee70:	681a      	ldr	r2, [r3, #0]
 800ee72:	68bb      	ldr	r3, [r7, #8]
 800ee74:	1ad3      	subs	r3, r2, r3
 800ee76:	603b      	str	r3, [r7, #0]
    if (xDiff + yDiff > 5)
 800ee78:	687a      	ldr	r2, [r7, #4]
 800ee7a:	683b      	ldr	r3, [r7, #0]
 800ee7c:	4413      	add	r3, r2
 800ee7e:	2b05      	cmp	r3, #5
 800ee80:	d905      	bls.n	800ee8e <IOE_TP_GetState+0x84>
    {
      _x = x;
 800ee82:	4a12      	ldr	r2, [pc, #72]	; (800eecc <IOE_TP_GetState+0xc2>)
 800ee84:	68fb      	ldr	r3, [r7, #12]
 800ee86:	6013      	str	r3, [r2, #0]
      _y = y;       
 800ee88:	4a11      	ldr	r2, [pc, #68]	; (800eed0 <IOE_TP_GetState+0xc6>)
 800ee8a:	68bb      	ldr	r3, [r7, #8]
 800ee8c:	6013      	str	r3, [r2, #0]
    }
  }  
  /* Update the X position */
  TP_State.X = _x;
 800ee8e:	4b0f      	ldr	r3, [pc, #60]	; (800eecc <IOE_TP_GetState+0xc2>)
 800ee90:	681b      	ldr	r3, [r3, #0]
 800ee92:	b29a      	uxth	r2, r3
 800ee94:	4b0c      	ldr	r3, [pc, #48]	; (800eec8 <IOE_TP_GetState+0xbe>)
 800ee96:	805a      	strh	r2, [r3, #2]
    
  /* Update the Y position */  
  TP_State.Y = _y;
 800ee98:	4b0d      	ldr	r3, [pc, #52]	; (800eed0 <IOE_TP_GetState+0xc6>)
 800ee9a:	681b      	ldr	r3, [r3, #0]
 800ee9c:	b29a      	uxth	r2, r3
 800ee9e:	4b0a      	ldr	r3, [pc, #40]	; (800eec8 <IOE_TP_GetState+0xbe>)
 800eea0:	809a      	strh	r2, [r3, #4]
  /* Update the Z Pression index */  
  TP_State.Z = IOE_TP_Read_Z();  
 800eea2:	f000 fc81 	bl	800f7a8 <IOE_TP_Read_Z>
 800eea6:	4603      	mov	r3, r0
 800eea8:	461a      	mov	r2, r3
 800eeaa:	4b07      	ldr	r3, [pc, #28]	; (800eec8 <IOE_TP_GetState+0xbe>)
 800eeac:	80da      	strh	r2, [r3, #6]
  
  /* Clear the interrupt pending bit and enable the FIFO again */
  I2C_WriteDeviceRegister(IOE_REG_FIFO_STA, 0x01);
 800eeae:	2101      	movs	r1, #1
 800eeb0:	204b      	movs	r0, #75	; 0x4b
 800eeb2:	f000 fd4f 	bl	800f954 <I2C_WriteDeviceRegister>
  I2C_WriteDeviceRegister(IOE_REG_FIFO_STA, 0x00);
 800eeb6:	2100      	movs	r1, #0
 800eeb8:	204b      	movs	r0, #75	; 0x4b
 800eeba:	f000 fd4b 	bl	800f954 <I2C_WriteDeviceRegister>
  
  /* Return pointer to the updated structure */
  return &TP_State; 
 800eebe:	4b02      	ldr	r3, [pc, #8]	; (800eec8 <IOE_TP_GetState+0xbe>)
}
 800eec0:	4618      	mov	r0, r3
 800eec2:	3710      	adds	r7, #16
 800eec4:	46bd      	mov	sp, r7
 800eec6:	bd80      	pop	{r7, pc}
 800eec8:	20002e18 	.word	0x20002e18
 800eecc:	20002e20 	.word	0x20002e20
 800eed0:	20002e24 	.word	0x20002e24

0800eed4 <IOE_GetGITStatus>:
  *   @arg  Global_IT_FTH : Touch Panel Controller FIFO Threshold interrupt   
  *   @arg  Global_IT_TOUCH : Touch Panel Controller Touch Detected interrupt      
  * @retval Status of the checked flag. Could be SET or RESET.
  */
FlagStatus IOE_GetGITStatus(uint8_t Global_IT)
{
 800eed4:	b580      	push	{r7, lr}
 800eed6:	b084      	sub	sp, #16
 800eed8:	af00      	add	r7, sp, #0
 800eeda:	4603      	mov	r3, r0
 800eedc:	71fb      	strb	r3, [r7, #7]
  __IO uint8_t tmp = 0;
 800eede:	2300      	movs	r3, #0
 800eee0:	73fb      	strb	r3, [r7, #15]
 
  /* Get the Interrupt status */
  tmp = I2C_ReadDeviceRegister(IOE_REG_INT_STA);
 800eee2:	200b      	movs	r0, #11
 800eee4:	f000 fde6 	bl	800fab4 <I2C_ReadDeviceRegister>
 800eee8:	4603      	mov	r3, r0
 800eeea:	73fb      	strb	r3, [r7, #15]
  
  if ((tmp & (uint8_t)Global_IT) != 0)
 800eeec:	7bfb      	ldrb	r3, [r7, #15]
 800eeee:	b2da      	uxtb	r2, r3
 800eef0:	79fb      	ldrb	r3, [r7, #7]
 800eef2:	4013      	ands	r3, r2
 800eef4:	b2db      	uxtb	r3, r3
 800eef6:	2b00      	cmp	r3, #0
 800eef8:	d001      	beq.n	800eefe <IOE_GetGITStatus+0x2a>
  {
    return SET;
 800eefa:	2301      	movs	r3, #1
 800eefc:	e000      	b.n	800ef00 <IOE_GetGITStatus+0x2c>
  }
  else
  {
    return RESET;
 800eefe:	2300      	movs	r3, #0
  }
}
 800ef00:	4618      	mov	r0, r3
 800ef02:	3710      	adds	r7, #16
 800ef04:	46bd      	mov	sp, r7
 800ef06:	bd80      	pop	{r7, pc}

0800ef08 <IOE_ClearGITPending>:
  *   @arg  Global_IT_FTH : Touch Panel Controller FIFO Threshold interrupt   
  *   @arg  Global_IT_TOUCH : Touch Panel Controller Touch Detected interrupt 
  * @retval IOE_OK: if all initializations are OK. Other value if error.
  */
uint8_t IOE_ClearGITPending(uint8_t Global_IT)
{
 800ef08:	b580      	push	{r7, lr}
 800ef0a:	b082      	sub	sp, #8
 800ef0c:	af00      	add	r7, sp, #0
 800ef0e:	4603      	mov	r3, r0
 800ef10:	71fb      	strb	r3, [r7, #7]
  /* Write 1 to the bits that have to be cleared */
  I2C_WriteDeviceRegister(IOE_REG_INT_STA, Global_IT); 
 800ef12:	79fb      	ldrb	r3, [r7, #7]
 800ef14:	4619      	mov	r1, r3
 800ef16:	200b      	movs	r0, #11
 800ef18:	f000 fd1c 	bl	800f954 <I2C_WriteDeviceRegister>

  /* If all OK return IOE_OK */
  return IOE_OK;
 800ef1c:	2300      	movs	r3, #0
}
 800ef1e:	4618      	mov	r0, r3
 800ef20:	3708      	adds	r7, #8
 800ef22:	46bd      	mov	sp, r7
 800ef24:	bd80      	pop	{r7, pc}

0800ef26 <IOE_IsOperational>:
  *         communicates correctly ont the I2C bus.
  * @param  None
  * @retval IOE_OK if IOE is operational. Other value if failure.
  */
uint8_t IOE_IsOperational(void)
{
 800ef26:	b580      	push	{r7, lr}
 800ef28:	af00      	add	r7, sp, #0
  /* Return Error if the ID is not correct */
  if( IOE_ReadID() != (uint16_t)STMPE811_ID )
 800ef2a:	f000 f825 	bl	800ef78 <IOE_ReadID>
 800ef2e:	4603      	mov	r3, r0
 800ef30:	461a      	mov	r2, r3
 800ef32:	f640 0311 	movw	r3, #2065	; 0x811
 800ef36:	429a      	cmp	r2, r3
 800ef38:	d009      	beq.n	800ef4e <IOE_IsOperational+0x28>
  {
    /* Check if a Timeout occurred */
    if (IOE_TimeOut == 0)
 800ef3a:	4b06      	ldr	r3, [pc, #24]	; (800ef54 <IOE_IsOperational+0x2e>)
 800ef3c:	681b      	ldr	r3, [r3, #0]
 800ef3e:	2b00      	cmp	r3, #0
 800ef40:	d103      	bne.n	800ef4a <IOE_IsOperational+0x24>
    {
      return(IOE_TimeoutUserCallback());
 800ef42:	f000 ff91 	bl	800fe68 <IOE_TimeoutUserCallback>
 800ef46:	4603      	mov	r3, r0
 800ef48:	e002      	b.n	800ef50 <IOE_IsOperational+0x2a>
    }
    else
    {
      return IOE_FAILURE; /* ID is not Correct */
 800ef4a:	2301      	movs	r3, #1
 800ef4c:	e000      	b.n	800ef50 <IOE_IsOperational+0x2a>
    }
  } 
  else 
  {
    return IOE_OK; /* ID is correct */
 800ef4e:	2300      	movs	r3, #0
  }
}
 800ef50:	4618      	mov	r0, r3
 800ef52:	bd80      	pop	{r7, pc}
 800ef54:	200000a4 	.word	0x200000a4

0800ef58 <IOE_Reset>:
  * @brief  Resets the IO Expander by Software (SYS_CTRL1, RESET bit).
  * @param  None
  * @retval IOE_OK: if all initializations are OK. Other value if error.
  */
uint8_t IOE_Reset(void)
{
 800ef58:	b580      	push	{r7, lr}
 800ef5a:	af00      	add	r7, sp, #0
  /* Power Down the IO_Expander */
  I2C_WriteDeviceRegister(IOE_REG_SYS_CTRL1, 0x02);
 800ef5c:	2102      	movs	r1, #2
 800ef5e:	2003      	movs	r0, #3
 800ef60:	f000 fcf8 	bl	800f954 <I2C_WriteDeviceRegister>

  /* wait for a delay to insure registers erasing */
  _delay_(2); 
 800ef64:	2002      	movs	r0, #2
 800ef66:	f000 ffb5 	bl	800fed4 <delay>
  
  /* Power On the Codec after the power off => all registers are reinitialized*/
  I2C_WriteDeviceRegister(IOE_REG_SYS_CTRL1, 0x00);
 800ef6a:	2100      	movs	r1, #0
 800ef6c:	2003      	movs	r0, #3
 800ef6e:	f000 fcf1 	bl	800f954 <I2C_WriteDeviceRegister>
  
  /* If all OK return IOE_OK */
  return IOE_OK;    
 800ef72:	2300      	movs	r3, #0
}
 800ef74:	4618      	mov	r0, r3
 800ef76:	bd80      	pop	{r7, pc}

0800ef78 <IOE_ReadID>:
  * @brief  Reads the IOE device ID.
  * @param  None
  * @retval The Device ID (two bytes).
  */
uint16_t IOE_ReadID(void)
{
 800ef78:	b580      	push	{r7, lr}
 800ef7a:	b082      	sub	sp, #8
 800ef7c:	af00      	add	r7, sp, #0
  uint16_t tmp = 0;
 800ef7e:	2300      	movs	r3, #0
 800ef80:	80fb      	strh	r3, [r7, #6]

  /* Read device ID  */
  tmp = I2C_ReadDeviceRegister(0);
 800ef82:	2000      	movs	r0, #0
 800ef84:	f000 fd96 	bl	800fab4 <I2C_ReadDeviceRegister>
 800ef88:	4603      	mov	r3, r0
 800ef8a:	80fb      	strh	r3, [r7, #6]
  tmp = (uint32_t)(tmp << 8);
 800ef8c:	88fb      	ldrh	r3, [r7, #6]
 800ef8e:	021b      	lsls	r3, r3, #8
 800ef90:	80fb      	strh	r3, [r7, #6]
  tmp |= (uint32_t)I2C_ReadDeviceRegister(1);
 800ef92:	2001      	movs	r0, #1
 800ef94:	f000 fd8e 	bl	800fab4 <I2C_ReadDeviceRegister>
 800ef98:	4603      	mov	r3, r0
 800ef9a:	b29a      	uxth	r2, r3
 800ef9c:	88fb      	ldrh	r3, [r7, #6]
 800ef9e:	4313      	orrs	r3, r2
 800efa0:	80fb      	strh	r3, [r7, #6]
  
  /* Return the ID */
  return (uint16_t)tmp;
 800efa2:	88fb      	ldrh	r3, [r7, #6]
}
 800efa4:	4618      	mov	r0, r3
 800efa6:	3708      	adds	r7, #8
 800efa8:	46bd      	mov	sp, r7
 800efaa:	bd80      	pop	{r7, pc}

0800efac <IOE_FnctCmd>:
  *   @arg  IOE_ADC_FCT : ADC function
  * @param  NewState: can be ENABLE pr DISABLE   
  * @retval IOE_OK: if all initializations are OK. Other value if error.
  */
uint8_t IOE_FnctCmd(uint8_t Fct, FunctionalState NewState)
{
 800efac:	b580      	push	{r7, lr}
 800efae:	b084      	sub	sp, #16
 800efb0:	af00      	add	r7, sp, #0
 800efb2:	4603      	mov	r3, r0
 800efb4:	460a      	mov	r2, r1
 800efb6:	71fb      	strb	r3, [r7, #7]
 800efb8:	4613      	mov	r3, r2
 800efba:	71bb      	strb	r3, [r7, #6]
  uint8_t tmp = 0;
 800efbc:	2300      	movs	r3, #0
 800efbe:	73fb      	strb	r3, [r7, #15]
  
  /* Get the register value */
  tmp = I2C_ReadDeviceRegister(IOE_REG_SYS_CTRL2);
 800efc0:	2004      	movs	r0, #4
 800efc2:	f000 fd77 	bl	800fab4 <I2C_ReadDeviceRegister>
 800efc6:	4603      	mov	r3, r0
 800efc8:	73fb      	strb	r3, [r7, #15]
  
  if (NewState != DISABLE)
 800efca:	79bb      	ldrb	r3, [r7, #6]
 800efcc:	2b00      	cmp	r3, #0
 800efce:	d009      	beq.n	800efe4 <IOE_FnctCmd+0x38>
  {
    /* Set the Functionalities to be Enabled */    
    tmp &= ~(uint8_t)Fct;
 800efd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800efd4:	43db      	mvns	r3, r3
 800efd6:	b25a      	sxtb	r2, r3
 800efd8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800efdc:	4013      	ands	r3, r2
 800efde:	b25b      	sxtb	r3, r3
 800efe0:	73fb      	strb	r3, [r7, #15]
 800efe2:	e003      	b.n	800efec <IOE_FnctCmd+0x40>
  }
  else
  {
    /* Set the Functionalities to be Disabled */    
    tmp |= (uint8_t)Fct;  
 800efe4:	7bfa      	ldrb	r2, [r7, #15]
 800efe6:	79fb      	ldrb	r3, [r7, #7]
 800efe8:	4313      	orrs	r3, r2
 800efea:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Set the register value */
  I2C_WriteDeviceRegister(IOE_REG_SYS_CTRL2, tmp);
 800efec:	7bfb      	ldrb	r3, [r7, #15]
 800efee:	4619      	mov	r1, r3
 800eff0:	2004      	movs	r0, #4
 800eff2:	f000 fcaf 	bl	800f954 <I2C_WriteDeviceRegister>
  
  /* If all OK return IOE_OK */
  return IOE_OK;    
 800eff6:	2300      	movs	r3, #0
}
 800eff8:	4618      	mov	r0, r3
 800effa:	3710      	adds	r7, #16
 800effc:	46bd      	mov	sp, r7
 800effe:	bd80      	pop	{r7, pc}

0800f000 <IOE_GITCmd>:
  * @brief  Enables or disables the Global interrupt.
  * @param  NewState: could be ENABLE or DISABLE.        
  * @retval IOE_OK: if all initializations are OK. Other value if error.
  */
uint8_t IOE_GITCmd(FunctionalState NewState)
{
 800f000:	b580      	push	{r7, lr}
 800f002:	b084      	sub	sp, #16
 800f004:	af00      	add	r7, sp, #0
 800f006:	4603      	mov	r3, r0
 800f008:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0;
 800f00a:	2300      	movs	r3, #0
 800f00c:	73fb      	strb	r3, [r7, #15]
  
  /* Read the Interrupt Control register  */
  tmp = I2C_ReadDeviceRegister(IOE_REG_INT_CTRL);
 800f00e:	2009      	movs	r0, #9
 800f010:	f000 fd50 	bl	800fab4 <I2C_ReadDeviceRegister>
 800f014:	4603      	mov	r3, r0
 800f016:	73fb      	strb	r3, [r7, #15]
  
  if (NewState != DISABLE)
 800f018:	79fb      	ldrb	r3, [r7, #7]
 800f01a:	2b00      	cmp	r3, #0
 800f01c:	d004      	beq.n	800f028 <IOE_GITCmd+0x28>
  {
    /* Set the global interrupts to be Enabled */    
    tmp |= (uint8_t)IOE_GIT_EN;
 800f01e:	7bfb      	ldrb	r3, [r7, #15]
 800f020:	f043 0301 	orr.w	r3, r3, #1
 800f024:	73fb      	strb	r3, [r7, #15]
 800f026:	e003      	b.n	800f030 <IOE_GITCmd+0x30>
  }
  else
  {
    /* Set the global interrupts to be Disabled */    
    tmp &= ~(uint8_t)IOE_GIT_EN;
 800f028:	7bfb      	ldrb	r3, [r7, #15]
 800f02a:	f023 0301 	bic.w	r3, r3, #1
 800f02e:	73fb      	strb	r3, [r7, #15]
  }  
  
  /* Write Back the Interrupt Control register */
  I2C_WriteDeviceRegister(IOE_REG_INT_CTRL, tmp);
 800f030:	7bfb      	ldrb	r3, [r7, #15]
 800f032:	4619      	mov	r1, r3
 800f034:	2009      	movs	r0, #9
 800f036:	f000 fc8d 	bl	800f954 <I2C_WriteDeviceRegister>

  /* If all OK return IOE_OK */
  return IOE_OK;     
 800f03a:	2300      	movs	r3, #0
}
 800f03c:	4618      	mov	r0, r3
 800f03e:	3710      	adds	r7, #16
 800f040:	46bd      	mov	sp, r7
 800f042:	bd80      	pop	{r7, pc}

0800f044 <IOE_GITConfig>:
  *   @arg  Global_IT_TOUCH : Touch Panel Controller Touch Detected interrupt 
  * @param  NewState: can be ENABLE pr DISABLE   
  * @retval IOE_OK: if all initializations are OK. Other value if error.
  */
uint8_t IOE_GITConfig(uint8_t Global_IT, FunctionalState NewState)
{
 800f044:	b580      	push	{r7, lr}
 800f046:	b084      	sub	sp, #16
 800f048:	af00      	add	r7, sp, #0
 800f04a:	4603      	mov	r3, r0
 800f04c:	460a      	mov	r2, r1
 800f04e:	71fb      	strb	r3, [r7, #7]
 800f050:	4613      	mov	r3, r2
 800f052:	71bb      	strb	r3, [r7, #6]
  uint8_t tmp = 0;
 800f054:	2300      	movs	r3, #0
 800f056:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current value of the INT_EN register */
  tmp = I2C_ReadDeviceRegister(IOE_REG_INT_EN);
 800f058:	200a      	movs	r0, #10
 800f05a:	f000 fd2b 	bl	800fab4 <I2C_ReadDeviceRegister>
 800f05e:	4603      	mov	r3, r0
 800f060:	73fb      	strb	r3, [r7, #15]
  
  if (NewState != DISABLE)
 800f062:	79bb      	ldrb	r3, [r7, #6]
 800f064:	2b00      	cmp	r3, #0
 800f066:	d004      	beq.n	800f072 <IOE_GITConfig+0x2e>
  {
    /* Set the interrupts to be Enabled */    
    tmp |= (uint8_t)Global_IT;  
 800f068:	7bfa      	ldrb	r2, [r7, #15]
 800f06a:	79fb      	ldrb	r3, [r7, #7]
 800f06c:	4313      	orrs	r3, r2
 800f06e:	73fb      	strb	r3, [r7, #15]
 800f070:	e008      	b.n	800f084 <IOE_GITConfig+0x40>
  }
  else
  {
    /* Set the interrupts to be Disabled */    
    tmp &= ~(uint8_t)Global_IT;
 800f072:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f076:	43db      	mvns	r3, r3
 800f078:	b25a      	sxtb	r2, r3
 800f07a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f07e:	4013      	ands	r3, r2
 800f080:	b25b      	sxtb	r3, r3
 800f082:	73fb      	strb	r3, [r7, #15]
  }
  /* Set the register */
  I2C_WriteDeviceRegister(IOE_REG_INT_EN, tmp);
 800f084:	7bfb      	ldrb	r3, [r7, #15]
 800f086:	4619      	mov	r1, r3
 800f088:	200a      	movs	r0, #10
 800f08a:	f000 fc63 	bl	800f954 <I2C_WriteDeviceRegister>
  
  /* If all OK return IOE_OK */
  return IOE_OK;  
 800f08e:	2300      	movs	r3, #0
}
 800f090:	4618      	mov	r0, r3
 800f092:	3710      	adds	r7, #16
 800f094:	46bd      	mov	sp, r7
 800f096:	bd80      	pop	{r7, pc}

0800f098 <IOE_TP_Config>:
  * @brief  Configures the touch Panel Controller (Single point detection)
  * @param  None
  * @retval IOE_OK if all initializations are OK. Other value if error.
  */
uint8_t IOE_TP_Config(void)
{ 
 800f098:	b580      	push	{r7, lr}
 800f09a:	af00      	add	r7, sp, #0
  /* Enable touch Panel functionality */
  IOE_FnctCmd(IOE_TP_FCT, ENABLE);
 800f09c:	2101      	movs	r1, #1
 800f09e:	2002      	movs	r0, #2
 800f0a0:	f7ff ff84 	bl	800efac <IOE_FnctCmd>
  
  /* Select Sample Time, bit number and ADC Reference */
  I2C_WriteDeviceRegister(IOE_REG_ADC_CTRL1, 0x49);
 800f0a4:	2149      	movs	r1, #73	; 0x49
 800f0a6:	2020      	movs	r0, #32
 800f0a8:	f000 fc54 	bl	800f954 <I2C_WriteDeviceRegister>
  
  /* Wait for ~20 ms */
  _delay_(2);  
 800f0ac:	2002      	movs	r0, #2
 800f0ae:	f000 ff11 	bl	800fed4 <delay>
  
  /* Select the ADC clock speed: 3.25 MHz */
  I2C_WriteDeviceRegister(IOE_REG_ADC_CTRL2, 0x01);
 800f0b2:	2101      	movs	r1, #1
 800f0b4:	2021      	movs	r0, #33	; 0x21
 800f0b6:	f000 fc4d 	bl	800f954 <I2C_WriteDeviceRegister>
  
  /* Select TSC pins in non default mode */  
  IOE_IOAFConfig((uint8_t)TOUCH_IO_ALL, DISABLE);
 800f0ba:	2100      	movs	r1, #0
 800f0bc:	201e      	movs	r0, #30
 800f0be:	f000 f835 	bl	800f12c <IOE_IOAFConfig>
  
  /* Select 2 nF filter capacitor */
  I2C_WriteDeviceRegister(IOE_REG_TP_CFG, 0x9A);   
 800f0c2:	219a      	movs	r1, #154	; 0x9a
 800f0c4:	2041      	movs	r0, #65	; 0x41
 800f0c6:	f000 fc45 	bl	800f954 <I2C_WriteDeviceRegister>
  
  /* Select single point reading  */
  I2C_WriteDeviceRegister(IOE_REG_FIFO_TH, 0x01);
 800f0ca:	2101      	movs	r1, #1
 800f0cc:	204a      	movs	r0, #74	; 0x4a
 800f0ce:	f000 fc41 	bl	800f954 <I2C_WriteDeviceRegister>
  
  /* Write 0x01 to clear the FIFO memory content. */
  I2C_WriteDeviceRegister(IOE_REG_FIFO_STA, 0x01);
 800f0d2:	2101      	movs	r1, #1
 800f0d4:	204b      	movs	r0, #75	; 0x4b
 800f0d6:	f000 fc3d 	bl	800f954 <I2C_WriteDeviceRegister>
  
  /* Write 0x00 to put the FIFO back into operation mode  */
  I2C_WriteDeviceRegister(IOE_REG_FIFO_STA, 0x00);
 800f0da:	2100      	movs	r1, #0
 800f0dc:	204b      	movs	r0, #75	; 0x4b
 800f0de:	f000 fc39 	bl	800f954 <I2C_WriteDeviceRegister>
  
  /* set the data format for Z value: 7 fractional part and 1 whole part */
  I2C_WriteDeviceRegister(IOE_REG_TP_FRACT_XYZ, 0x01);
 800f0e2:	2101      	movs	r1, #1
 800f0e4:	2056      	movs	r0, #86	; 0x56
 800f0e6:	f000 fc35 	bl	800f954 <I2C_WriteDeviceRegister>
  
  /* set the driving capability of the device for TSC pins: 50mA */
  I2C_WriteDeviceRegister(IOE_REG_TP_I_DRIVE, 0x01);
 800f0ea:	2101      	movs	r1, #1
 800f0ec:	2058      	movs	r0, #88	; 0x58
 800f0ee:	f000 fc31 	bl	800f954 <I2C_WriteDeviceRegister>
  
  /* Use no tracking index, touch-panel controller operation mode (XYZ) and 
     enable the TSC */
  I2C_WriteDeviceRegister(IOE_REG_TP_CTRL, 0x03);
 800f0f2:	2103      	movs	r1, #3
 800f0f4:	2040      	movs	r0, #64	; 0x40
 800f0f6:	f000 fc2d 	bl	800f954 <I2C_WriteDeviceRegister>
  
  /*  Clear all the status pending bits */
  I2C_WriteDeviceRegister(IOE_REG_INT_STA, 0xFF); 
 800f0fa:	21ff      	movs	r1, #255	; 0xff
 800f0fc:	200b      	movs	r0, #11
 800f0fe:	f000 fc29 	bl	800f954 <I2C_WriteDeviceRegister>
  
  /* Initialize the TS structure to their default values */ 
  TP_State.TouchDetected = TP_State.X = TP_State.Y = TP_State.Z = 0;
 800f102:	4b09      	ldr	r3, [pc, #36]	; (800f128 <IOE_TP_Config+0x90>)
 800f104:	2200      	movs	r2, #0
 800f106:	80da      	strh	r2, [r3, #6]
 800f108:	4b07      	ldr	r3, [pc, #28]	; (800f128 <IOE_TP_Config+0x90>)
 800f10a:	88da      	ldrh	r2, [r3, #6]
 800f10c:	4b06      	ldr	r3, [pc, #24]	; (800f128 <IOE_TP_Config+0x90>)
 800f10e:	809a      	strh	r2, [r3, #4]
 800f110:	4b05      	ldr	r3, [pc, #20]	; (800f128 <IOE_TP_Config+0x90>)
 800f112:	889a      	ldrh	r2, [r3, #4]
 800f114:	4b04      	ldr	r3, [pc, #16]	; (800f128 <IOE_TP_Config+0x90>)
 800f116:	805a      	strh	r2, [r3, #2]
 800f118:	4b03      	ldr	r3, [pc, #12]	; (800f128 <IOE_TP_Config+0x90>)
 800f11a:	885a      	ldrh	r2, [r3, #2]
 800f11c:	4b02      	ldr	r3, [pc, #8]	; (800f128 <IOE_TP_Config+0x90>)
 800f11e:	801a      	strh	r2, [r3, #0]
  
  /* All configuration done */
  return IOE_OK;  
 800f120:	2300      	movs	r3, #0
}
 800f122:	4618      	mov	r0, r3
 800f124:	bd80      	pop	{r7, pc}
 800f126:	bf00      	nop
 800f128:	20002e18 	.word	0x20002e18

0800f12c <IOE_IOAFConfig>:
  * @param  NewState: State of the AF for the selected pin, could be 
  *         ENABLE or DISABLE.       
  * @retval IOE_OK: if all initializations are OK. Other value if error.
  */
uint8_t IOE_IOAFConfig(uint8_t IO_Pin, FunctionalState NewState)
{
 800f12c:	b580      	push	{r7, lr}
 800f12e:	b084      	sub	sp, #16
 800f130:	af00      	add	r7, sp, #0
 800f132:	4603      	mov	r3, r0
 800f134:	460a      	mov	r2, r1
 800f136:	71fb      	strb	r3, [r7, #7]
 800f138:	4613      	mov	r3, r2
 800f13a:	71bb      	strb	r3, [r7, #6]
  uint8_t tmp = 0;
 800f13c:	2300      	movs	r3, #0
 800f13e:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current state of the GPIO_AF register */
  tmp = I2C_ReadDeviceRegister(IOE_REG_GPIO_AF);
 800f140:	2017      	movs	r0, #23
 800f142:	f000 fcb7 	bl	800fab4 <I2C_ReadDeviceRegister>
 800f146:	4603      	mov	r3, r0
 800f148:	73fb      	strb	r3, [r7, #15]
  
  if (NewState != DISABLE)
 800f14a:	79bb      	ldrb	r3, [r7, #6]
 800f14c:	2b00      	cmp	r3, #0
 800f14e:	d004      	beq.n	800f15a <IOE_IOAFConfig+0x2e>
  {
    /* Enable the selected pins alternate function */
    tmp |= (uint8_t)IO_Pin;
 800f150:	7bfa      	ldrb	r2, [r7, #15]
 800f152:	79fb      	ldrb	r3, [r7, #7]
 800f154:	4313      	orrs	r3, r2
 800f156:	73fb      	strb	r3, [r7, #15]
 800f158:	e008      	b.n	800f16c <IOE_IOAFConfig+0x40>
  }
  else
  {
    /* Disable the selected pins alternate function */   
    tmp &= ~(uint8_t)IO_Pin;   
 800f15a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f15e:	43db      	mvns	r3, r3
 800f160:	b25a      	sxtb	r2, r3
 800f162:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f166:	4013      	ands	r3, r2
 800f168:	b25b      	sxtb	r3, r3
 800f16a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Write back the new value in GPIO_AF register */  
  I2C_WriteDeviceRegister(IOE_REG_GPIO_AF, tmp);  
 800f16c:	7bfb      	ldrb	r3, [r7, #15]
 800f16e:	4619      	mov	r1, r3
 800f170:	2017      	movs	r0, #23
 800f172:	f000 fbef 	bl	800f954 <I2C_WriteDeviceRegister>

  /* If all OK return IOE_OK */
  return IOE_OK;
 800f176:	2300      	movs	r3, #0
}
 800f178:	4618      	mov	r0, r3
 800f17a:	3710      	adds	r7, #16
 800f17c:	46bd      	mov	sp, r7
 800f17e:	bd80      	pop	{r7, pc}

0800f180 <I2C_DMA_WriteDeviceRegister>:
  * @param  RegisterAddr: The target register address
  * @param  RegisterValue: The target register value to be written 
  * @retval IOE_OK: if all operations are OK. Other value if error.
  */
uint8_t I2C_DMA_WriteDeviceRegister(uint8_t RegisterAddr, uint8_t RegisterValue)
{
 800f180:	b580      	push	{r7, lr}
 800f182:	b084      	sub	sp, #16
 800f184:	af00      	add	r7, sp, #0
 800f186:	4603      	mov	r3, r0
 800f188:	460a      	mov	r2, r1
 800f18a:	71fb      	strb	r3, [r7, #7]
 800f18c:	4613      	mov	r3, r2
 800f18e:	71bb      	strb	r3, [r7, #6]
  uint32_t read_verif = 0;  
 800f190:	2300      	movs	r3, #0
 800f192:	60fb      	str	r3, [r7, #12]
  uint8_t IOE_BufferTX = 0;
 800f194:	2300      	movs	r3, #0
 800f196:	72fb      	strb	r3, [r7, #11]
  
  /* Get Value to be written */
  IOE_BufferTX = RegisterValue;
 800f198:	79bb      	ldrb	r3, [r7, #6]
 800f19a:	72fb      	strb	r3, [r7, #11]
  
  /* Configure DMA Peripheral */
  IOE_DMA_Config(IOE_DMA_TX, (uint8_t*)(&IOE_BufferTX));
 800f19c:	f107 030b 	add.w	r3, r7, #11
 800f1a0:	4619      	mov	r1, r3
 800f1a2:	2000      	movs	r0, #0
 800f1a4:	f000 fb84 	bl	800f8b0 <IOE_DMA_Config>
  
  /* Enable the I2C peripheral */
  I2C_GenerateSTART(IOE_I2C, ENABLE);
 800f1a8:	2101      	movs	r1, #1
 800f1aa:	4852      	ldr	r0, [pc, #328]	; (800f2f4 <I2C_DMA_WriteDeviceRegister+0x174>)
 800f1ac:	f7f7 fd1d 	bl	8006bea <I2C_GenerateSTART>
  
  /* Test on SB Flag */
  IOE_TimeOut = TIMEOUT_MAX;
 800f1b0:	4b51      	ldr	r3, [pc, #324]	; (800f2f8 <I2C_DMA_WriteDeviceRegister+0x178>)
 800f1b2:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800f1b6:	601a      	str	r2, [r3, #0]
  while (I2C_GetFlagStatus(IOE_I2C,I2C_FLAG_SB) == RESET) 
 800f1b8:	e00a      	b.n	800f1d0 <I2C_DMA_WriteDeviceRegister+0x50>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
 800f1ba:	4b4f      	ldr	r3, [pc, #316]	; (800f2f8 <I2C_DMA_WriteDeviceRegister+0x178>)
 800f1bc:	681b      	ldr	r3, [r3, #0]
 800f1be:	1e5a      	subs	r2, r3, #1
 800f1c0:	494d      	ldr	r1, [pc, #308]	; (800f2f8 <I2C_DMA_WriteDeviceRegister+0x178>)
 800f1c2:	600a      	str	r2, [r1, #0]
 800f1c4:	2b00      	cmp	r3, #0
 800f1c6:	d103      	bne.n	800f1d0 <I2C_DMA_WriteDeviceRegister+0x50>
 800f1c8:	f000 fe4e 	bl	800fe68 <IOE_TimeoutUserCallback>
 800f1cc:	4603      	mov	r3, r0
 800f1ce:	e08c      	b.n	800f2ea <I2C_DMA_WriteDeviceRegister+0x16a>
  while (I2C_GetFlagStatus(IOE_I2C,I2C_FLAG_SB) == RESET) 
 800f1d0:	494a      	ldr	r1, [pc, #296]	; (800f2fc <I2C_DMA_WriteDeviceRegister+0x17c>)
 800f1d2:	4848      	ldr	r0, [pc, #288]	; (800f2f4 <I2C_DMA_WriteDeviceRegister+0x174>)
 800f1d4:	f7f8 f80a 	bl	80071ec <I2C_GetFlagStatus>
 800f1d8:	4603      	mov	r3, r0
 800f1da:	2b00      	cmp	r3, #0
 800f1dc:	d0ed      	beq.n	800f1ba <I2C_DMA_WriteDeviceRegister+0x3a>
  }
  
  /* Transmit the slave address and enable writing operation */
  I2C_Send7bitAddress(IOE_I2C, IOE_ADDR, I2C_Direction_Transmitter);
 800f1de:	2200      	movs	r2, #0
 800f1e0:	2182      	movs	r1, #130	; 0x82
 800f1e2:	4844      	ldr	r0, [pc, #272]	; (800f2f4 <I2C_DMA_WriteDeviceRegister+0x174>)
 800f1e4:	f7f7 fd41 	bl	8006c6a <I2C_Send7bitAddress>
  
  /* Test on ADDR Flag */
  IOE_TimeOut = TIMEOUT_MAX;
 800f1e8:	4b43      	ldr	r3, [pc, #268]	; (800f2f8 <I2C_DMA_WriteDeviceRegister+0x178>)
 800f1ea:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800f1ee:	601a      	str	r2, [r3, #0]
  while (!I2C_CheckEvent(IOE_I2C, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED))
 800f1f0:	e00a      	b.n	800f208 <I2C_DMA_WriteDeviceRegister+0x88>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
 800f1f2:	4b41      	ldr	r3, [pc, #260]	; (800f2f8 <I2C_DMA_WriteDeviceRegister+0x178>)
 800f1f4:	681b      	ldr	r3, [r3, #0]
 800f1f6:	1e5a      	subs	r2, r3, #1
 800f1f8:	493f      	ldr	r1, [pc, #252]	; (800f2f8 <I2C_DMA_WriteDeviceRegister+0x178>)
 800f1fa:	600a      	str	r2, [r1, #0]
 800f1fc:	2b00      	cmp	r3, #0
 800f1fe:	d103      	bne.n	800f208 <I2C_DMA_WriteDeviceRegister+0x88>
 800f200:	f000 fe32 	bl	800fe68 <IOE_TimeoutUserCallback>
 800f204:	4603      	mov	r3, r0
 800f206:	e070      	b.n	800f2ea <I2C_DMA_WriteDeviceRegister+0x16a>
  while (!I2C_CheckEvent(IOE_I2C, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED))
 800f208:	493d      	ldr	r1, [pc, #244]	; (800f300 <I2C_DMA_WriteDeviceRegister+0x180>)
 800f20a:	483a      	ldr	r0, [pc, #232]	; (800f2f4 <I2C_DMA_WriteDeviceRegister+0x174>)
 800f20c:	f7f7 ff9c 	bl	8007148 <I2C_CheckEvent>
 800f210:	4603      	mov	r3, r0
 800f212:	2b00      	cmp	r3, #0
 800f214:	d0ed      	beq.n	800f1f2 <I2C_DMA_WriteDeviceRegister+0x72>
  }
  
  /* Transmit the first address for r/w operations */
  I2C_SendData(IOE_I2C, RegisterAddr);
 800f216:	79fb      	ldrb	r3, [r7, #7]
 800f218:	4619      	mov	r1, r3
 800f21a:	4836      	ldr	r0, [pc, #216]	; (800f2f4 <I2C_DMA_WriteDeviceRegister+0x174>)
 800f21c:	f7f7 fe8a 	bl	8006f34 <I2C_SendData>
  
  /* Test on TXE FLag (data dent) */
  IOE_TimeOut = TIMEOUT_MAX;
 800f220:	4b35      	ldr	r3, [pc, #212]	; (800f2f8 <I2C_DMA_WriteDeviceRegister+0x178>)
 800f222:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800f226:	601a      	str	r2, [r3, #0]
  while ((!I2C_GetFlagStatus(IOE_I2C,I2C_FLAG_TXE)) && (!I2C_GetFlagStatus(IOE_I2C,I2C_FLAG_BTF)))  
 800f228:	e00a      	b.n	800f240 <I2C_DMA_WriteDeviceRegister+0xc0>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
 800f22a:	4b33      	ldr	r3, [pc, #204]	; (800f2f8 <I2C_DMA_WriteDeviceRegister+0x178>)
 800f22c:	681b      	ldr	r3, [r3, #0]
 800f22e:	1e5a      	subs	r2, r3, #1
 800f230:	4931      	ldr	r1, [pc, #196]	; (800f2f8 <I2C_DMA_WriteDeviceRegister+0x178>)
 800f232:	600a      	str	r2, [r1, #0]
 800f234:	2b00      	cmp	r3, #0
 800f236:	d103      	bne.n	800f240 <I2C_DMA_WriteDeviceRegister+0xc0>
 800f238:	f000 fe16 	bl	800fe68 <IOE_TimeoutUserCallback>
 800f23c:	4603      	mov	r3, r0
 800f23e:	e054      	b.n	800f2ea <I2C_DMA_WriteDeviceRegister+0x16a>
  while ((!I2C_GetFlagStatus(IOE_I2C,I2C_FLAG_TXE)) && (!I2C_GetFlagStatus(IOE_I2C,I2C_FLAG_BTF)))  
 800f240:	4930      	ldr	r1, [pc, #192]	; (800f304 <I2C_DMA_WriteDeviceRegister+0x184>)
 800f242:	482c      	ldr	r0, [pc, #176]	; (800f2f4 <I2C_DMA_WriteDeviceRegister+0x174>)
 800f244:	f7f7 ffd2 	bl	80071ec <I2C_GetFlagStatus>
 800f248:	4603      	mov	r3, r0
 800f24a:	2b00      	cmp	r3, #0
 800f24c:	d106      	bne.n	800f25c <I2C_DMA_WriteDeviceRegister+0xdc>
 800f24e:	492e      	ldr	r1, [pc, #184]	; (800f308 <I2C_DMA_WriteDeviceRegister+0x188>)
 800f250:	4828      	ldr	r0, [pc, #160]	; (800f2f4 <I2C_DMA_WriteDeviceRegister+0x174>)
 800f252:	f7f7 ffcb 	bl	80071ec <I2C_GetFlagStatus>
 800f256:	4603      	mov	r3, r0
 800f258:	2b00      	cmp	r3, #0
 800f25a:	d0e6      	beq.n	800f22a <I2C_DMA_WriteDeviceRegister+0xaa>
  }
  
  /* Enable I2C DMA request */
  I2C_DMACmd(IOE_I2C,ENABLE);
 800f25c:	2101      	movs	r1, #1
 800f25e:	4825      	ldr	r0, [pc, #148]	; (800f2f4 <I2C_DMA_WriteDeviceRegister+0x174>)
 800f260:	f7f7 fef7 	bl	8007052 <I2C_DMACmd>
  
  /* Enable DMA TX Channel */
  DMA_Cmd(IOE_DMA_TX_STREAM, ENABLE);
 800f264:	2101      	movs	r1, #1
 800f266:	4829      	ldr	r0, [pc, #164]	; (800f30c <I2C_DMA_WriteDeviceRegister+0x18c>)
 800f268:	f7f4 fded 	bl	8003e46 <DMA_Cmd>
  
  /* Wait until DMA Transfer Complete */
  IOE_TimeOut = TIMEOUT_MAX;
 800f26c:	4b22      	ldr	r3, [pc, #136]	; (800f2f8 <I2C_DMA_WriteDeviceRegister+0x178>)
 800f26e:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800f272:	601a      	str	r2, [r3, #0]
  while (!DMA_GetFlagStatus(IOE_DMA_TX_STREAM,IOE_DMA_TX_TCFLAG))
 800f274:	e00a      	b.n	800f28c <I2C_DMA_WriteDeviceRegister+0x10c>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
 800f276:	4b20      	ldr	r3, [pc, #128]	; (800f2f8 <I2C_DMA_WriteDeviceRegister+0x178>)
 800f278:	681b      	ldr	r3, [r3, #0]
 800f27a:	1e5a      	subs	r2, r3, #1
 800f27c:	491e      	ldr	r1, [pc, #120]	; (800f2f8 <I2C_DMA_WriteDeviceRegister+0x178>)
 800f27e:	600a      	str	r2, [r1, #0]
 800f280:	2b00      	cmp	r3, #0
 800f282:	d103      	bne.n	800f28c <I2C_DMA_WriteDeviceRegister+0x10c>
 800f284:	f000 fdf0 	bl	800fe68 <IOE_TimeoutUserCallback>
 800f288:	4603      	mov	r3, r0
 800f28a:	e02e      	b.n	800f2ea <I2C_DMA_WriteDeviceRegister+0x16a>
  while (!DMA_GetFlagStatus(IOE_DMA_TX_STREAM,IOE_DMA_TX_TCFLAG))
 800f28c:	4920      	ldr	r1, [pc, #128]	; (800f310 <I2C_DMA_WriteDeviceRegister+0x190>)
 800f28e:	481f      	ldr	r0, [pc, #124]	; (800f30c <I2C_DMA_WriteDeviceRegister+0x18c>)
 800f290:	f7f4 feda 	bl	8004048 <DMA_GetFlagStatus>
 800f294:	4603      	mov	r3, r0
 800f296:	2b00      	cmp	r3, #0
 800f298:	d0ed      	beq.n	800f276 <I2C_DMA_WriteDeviceRegister+0xf6>
  }  
  
  /* Wait until BTF Flag is set before generating STOP */
  IOE_TimeOut = 0xFF * TIMEOUT_MAX;
 800f29a:	4b17      	ldr	r3, [pc, #92]	; (800f2f8 <I2C_DMA_WriteDeviceRegister+0x178>)
 800f29c:	4a1d      	ldr	r2, [pc, #116]	; (800f314 <I2C_DMA_WriteDeviceRegister+0x194>)
 800f29e:	601a      	str	r2, [r3, #0]
  while ((!I2C_GetFlagStatus(IOE_I2C,I2C_FLAG_BTF)))  
 800f2a0:	e00a      	b.n	800f2b8 <I2C_DMA_WriteDeviceRegister+0x138>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
 800f2a2:	4b15      	ldr	r3, [pc, #84]	; (800f2f8 <I2C_DMA_WriteDeviceRegister+0x178>)
 800f2a4:	681b      	ldr	r3, [r3, #0]
 800f2a6:	1e5a      	subs	r2, r3, #1
 800f2a8:	4913      	ldr	r1, [pc, #76]	; (800f2f8 <I2C_DMA_WriteDeviceRegister+0x178>)
 800f2aa:	600a      	str	r2, [r1, #0]
 800f2ac:	2b00      	cmp	r3, #0
 800f2ae:	d103      	bne.n	800f2b8 <I2C_DMA_WriteDeviceRegister+0x138>
 800f2b0:	f000 fdda 	bl	800fe68 <IOE_TimeoutUserCallback>
 800f2b4:	4603      	mov	r3, r0
 800f2b6:	e018      	b.n	800f2ea <I2C_DMA_WriteDeviceRegister+0x16a>
  while ((!I2C_GetFlagStatus(IOE_I2C,I2C_FLAG_BTF)))  
 800f2b8:	4913      	ldr	r1, [pc, #76]	; (800f308 <I2C_DMA_WriteDeviceRegister+0x188>)
 800f2ba:	480e      	ldr	r0, [pc, #56]	; (800f2f4 <I2C_DMA_WriteDeviceRegister+0x174>)
 800f2bc:	f7f7 ff96 	bl	80071ec <I2C_GetFlagStatus>
 800f2c0:	4603      	mov	r3, r0
 800f2c2:	2b00      	cmp	r3, #0
 800f2c4:	d0ed      	beq.n	800f2a2 <I2C_DMA_WriteDeviceRegister+0x122>
  }
  
  /* Send STOP Condition */
  I2C_GenerateSTOP(IOE_I2C, ENABLE);
 800f2c6:	2101      	movs	r1, #1
 800f2c8:	480a      	ldr	r0, [pc, #40]	; (800f2f4 <I2C_DMA_WriteDeviceRegister+0x174>)
 800f2ca:	f7f7 fcae 	bl	8006c2a <I2C_GenerateSTOP>
  
  /* Disable DMA TX Channel */
  DMA_Cmd(IOE_DMA_TX_STREAM, DISABLE);
 800f2ce:	2100      	movs	r1, #0
 800f2d0:	480e      	ldr	r0, [pc, #56]	; (800f30c <I2C_DMA_WriteDeviceRegister+0x18c>)
 800f2d2:	f7f4 fdb8 	bl	8003e46 <DMA_Cmd>
  
  /* Disable I2C DMA request */  
  I2C_DMACmd(IOE_I2C,DISABLE);
 800f2d6:	2100      	movs	r1, #0
 800f2d8:	4806      	ldr	r0, [pc, #24]	; (800f2f4 <I2C_DMA_WriteDeviceRegister+0x174>)
 800f2da:	f7f7 feba 	bl	8007052 <I2C_DMACmd>
  
  /* Clear DMA TX Transfer Complete Flag */
  DMA_ClearFlag(IOE_DMA_TX_STREAM,IOE_DMA_TX_TCFLAG);
 800f2de:	490c      	ldr	r1, [pc, #48]	; (800f310 <I2C_DMA_WriteDeviceRegister+0x190>)
 800f2e0:	480a      	ldr	r0, [pc, #40]	; (800f30c <I2C_DMA_WriteDeviceRegister+0x18c>)
 800f2e2:	f7f4 feed 	bl	80040c0 <DMA_ClearFlag>
    read_verif = 0;
  }
#endif
  
  /* Return the verifying value: 0 (Passed) or 1 (Failed) */
  return read_verif;
 800f2e6:	68fb      	ldr	r3, [r7, #12]
 800f2e8:	b2db      	uxtb	r3, r3
}
 800f2ea:	4618      	mov	r0, r3
 800f2ec:	3710      	adds	r7, #16
 800f2ee:	46bd      	mov	sp, r7
 800f2f0:	bd80      	pop	{r7, pc}
 800f2f2:	bf00      	nop
 800f2f4:	40005c00 	.word	0x40005c00
 800f2f8:	200000a4 	.word	0x200000a4
 800f2fc:	10000001 	.word	0x10000001
 800f300:	00070082 	.word	0x00070082
 800f304:	10000080 	.word	0x10000080
 800f308:	10000004 	.word	0x10000004
 800f30c:	400260a0 	.word	0x400260a0
 800f310:	20200000 	.word	0x20200000
 800f314:	002fd000 	.word	0x002fd000

0800f318 <I2C_DMA_ReadDeviceRegister>:
  * @brief  Reads a register of the device through I2C.
  * @param  RegisterAddr: The target register address (between 00x and 0x24)
  * @retval The value of the read register (0xAA if Timeout occurred)   
  */
uint8_t I2C_DMA_ReadDeviceRegister(uint8_t RegisterAddr)
{
 800f318:	b580      	push	{r7, lr}
 800f31a:	b084      	sub	sp, #16
 800f31c:	af00      	add	r7, sp, #0
 800f31e:	4603      	mov	r3, r0
 800f320:	71fb      	strb	r3, [r7, #7]
  uint8_t IOE_BufferRX[2] = {0x00, 0x00};  
 800f322:	2300      	movs	r3, #0
 800f324:	733b      	strb	r3, [r7, #12]
 800f326:	2300      	movs	r3, #0
 800f328:	737b      	strb	r3, [r7, #13]
  
  /* Configure DMA Peripheral */
  IOE_DMA_Config(IOE_DMA_RX, (uint8_t*)IOE_BufferRX);
 800f32a:	f107 030c 	add.w	r3, r7, #12
 800f32e:	4619      	mov	r1, r3
 800f330:	2001      	movs	r0, #1
 800f332:	f000 fabd 	bl	800f8b0 <IOE_DMA_Config>
  
  /* Enable DMA NACK automatic generation */
  I2C_DMALastTransferCmd(IOE_I2C, ENABLE);
 800f336:	2101      	movs	r1, #1
 800f338:	4863      	ldr	r0, [pc, #396]	; (800f4c8 <I2C_DMA_ReadDeviceRegister+0x1b0>)
 800f33a:	f7f7 feaa 	bl	8007092 <I2C_DMALastTransferCmd>
  
  /* Enable the I2C peripheral */
  I2C_GenerateSTART(IOE_I2C, ENABLE);
 800f33e:	2101      	movs	r1, #1
 800f340:	4861      	ldr	r0, [pc, #388]	; (800f4c8 <I2C_DMA_ReadDeviceRegister+0x1b0>)
 800f342:	f7f7 fc52 	bl	8006bea <I2C_GenerateSTART>
  
  /* Test on SB Flag */
  IOE_TimeOut = TIMEOUT_MAX;
 800f346:	4b61      	ldr	r3, [pc, #388]	; (800f4cc <I2C_DMA_ReadDeviceRegister+0x1b4>)
 800f348:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800f34c:	601a      	str	r2, [r3, #0]
  while (!I2C_GetFlagStatus(IOE_I2C,I2C_FLAG_SB)) 
 800f34e:	e00a      	b.n	800f366 <I2C_DMA_ReadDeviceRegister+0x4e>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
 800f350:	4b5e      	ldr	r3, [pc, #376]	; (800f4cc <I2C_DMA_ReadDeviceRegister+0x1b4>)
 800f352:	681b      	ldr	r3, [r3, #0]
 800f354:	1e5a      	subs	r2, r3, #1
 800f356:	495d      	ldr	r1, [pc, #372]	; (800f4cc <I2C_DMA_ReadDeviceRegister+0x1b4>)
 800f358:	600a      	str	r2, [r1, #0]
 800f35a:	2b00      	cmp	r3, #0
 800f35c:	d103      	bne.n	800f366 <I2C_DMA_ReadDeviceRegister+0x4e>
 800f35e:	f000 fd83 	bl	800fe68 <IOE_TimeoutUserCallback>
 800f362:	4603      	mov	r3, r0
 800f364:	e0ac      	b.n	800f4c0 <I2C_DMA_ReadDeviceRegister+0x1a8>
  while (!I2C_GetFlagStatus(IOE_I2C,I2C_FLAG_SB)) 
 800f366:	495a      	ldr	r1, [pc, #360]	; (800f4d0 <I2C_DMA_ReadDeviceRegister+0x1b8>)
 800f368:	4857      	ldr	r0, [pc, #348]	; (800f4c8 <I2C_DMA_ReadDeviceRegister+0x1b0>)
 800f36a:	f7f7 ff3f 	bl	80071ec <I2C_GetFlagStatus>
 800f36e:	4603      	mov	r3, r0
 800f370:	2b00      	cmp	r3, #0
 800f372:	d0ed      	beq.n	800f350 <I2C_DMA_ReadDeviceRegister+0x38>
  }
  
  /* Send device address for write */
  I2C_Send7bitAddress(IOE_I2C, IOE_ADDR, I2C_Direction_Transmitter);
 800f374:	2200      	movs	r2, #0
 800f376:	2182      	movs	r1, #130	; 0x82
 800f378:	4853      	ldr	r0, [pc, #332]	; (800f4c8 <I2C_DMA_ReadDeviceRegister+0x1b0>)
 800f37a:	f7f7 fc76 	bl	8006c6a <I2C_Send7bitAddress>
  
  /* Test on ADDR Flag */
  IOE_TimeOut = TIMEOUT_MAX;
 800f37e:	4b53      	ldr	r3, [pc, #332]	; (800f4cc <I2C_DMA_ReadDeviceRegister+0x1b4>)
 800f380:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800f384:	601a      	str	r2, [r3, #0]
  while (!I2C_CheckEvent(IOE_I2C, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED)) 
 800f386:	e00a      	b.n	800f39e <I2C_DMA_ReadDeviceRegister+0x86>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
 800f388:	4b50      	ldr	r3, [pc, #320]	; (800f4cc <I2C_DMA_ReadDeviceRegister+0x1b4>)
 800f38a:	681b      	ldr	r3, [r3, #0]
 800f38c:	1e5a      	subs	r2, r3, #1
 800f38e:	494f      	ldr	r1, [pc, #316]	; (800f4cc <I2C_DMA_ReadDeviceRegister+0x1b4>)
 800f390:	600a      	str	r2, [r1, #0]
 800f392:	2b00      	cmp	r3, #0
 800f394:	d103      	bne.n	800f39e <I2C_DMA_ReadDeviceRegister+0x86>
 800f396:	f000 fd67 	bl	800fe68 <IOE_TimeoutUserCallback>
 800f39a:	4603      	mov	r3, r0
 800f39c:	e090      	b.n	800f4c0 <I2C_DMA_ReadDeviceRegister+0x1a8>
  while (!I2C_CheckEvent(IOE_I2C, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED)) 
 800f39e:	494d      	ldr	r1, [pc, #308]	; (800f4d4 <I2C_DMA_ReadDeviceRegister+0x1bc>)
 800f3a0:	4849      	ldr	r0, [pc, #292]	; (800f4c8 <I2C_DMA_ReadDeviceRegister+0x1b0>)
 800f3a2:	f7f7 fed1 	bl	8007148 <I2C_CheckEvent>
 800f3a6:	4603      	mov	r3, r0
 800f3a8:	2b00      	cmp	r3, #0
 800f3aa:	d0ed      	beq.n	800f388 <I2C_DMA_ReadDeviceRegister+0x70>
  }
  
  /* Send the device's internal address to write to */
  I2C_SendData(IOE_I2C, RegisterAddr);  
 800f3ac:	79fb      	ldrb	r3, [r7, #7]
 800f3ae:	4619      	mov	r1, r3
 800f3b0:	4845      	ldr	r0, [pc, #276]	; (800f4c8 <I2C_DMA_ReadDeviceRegister+0x1b0>)
 800f3b2:	f7f7 fdbf 	bl	8006f34 <I2C_SendData>
  
  /* Test on TXE FLag (data dent) */
  IOE_TimeOut = TIMEOUT_MAX;
 800f3b6:	4b45      	ldr	r3, [pc, #276]	; (800f4cc <I2C_DMA_ReadDeviceRegister+0x1b4>)
 800f3b8:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800f3bc:	601a      	str	r2, [r3, #0]
  while ((!I2C_GetFlagStatus(IOE_I2C,I2C_FLAG_TXE)) && (!I2C_GetFlagStatus(IOE_I2C,I2C_FLAG_BTF)))  
 800f3be:	e00a      	b.n	800f3d6 <I2C_DMA_ReadDeviceRegister+0xbe>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
 800f3c0:	4b42      	ldr	r3, [pc, #264]	; (800f4cc <I2C_DMA_ReadDeviceRegister+0x1b4>)
 800f3c2:	681b      	ldr	r3, [r3, #0]
 800f3c4:	1e5a      	subs	r2, r3, #1
 800f3c6:	4941      	ldr	r1, [pc, #260]	; (800f4cc <I2C_DMA_ReadDeviceRegister+0x1b4>)
 800f3c8:	600a      	str	r2, [r1, #0]
 800f3ca:	2b00      	cmp	r3, #0
 800f3cc:	d103      	bne.n	800f3d6 <I2C_DMA_ReadDeviceRegister+0xbe>
 800f3ce:	f000 fd4b 	bl	800fe68 <IOE_TimeoutUserCallback>
 800f3d2:	4603      	mov	r3, r0
 800f3d4:	e074      	b.n	800f4c0 <I2C_DMA_ReadDeviceRegister+0x1a8>
  while ((!I2C_GetFlagStatus(IOE_I2C,I2C_FLAG_TXE)) && (!I2C_GetFlagStatus(IOE_I2C,I2C_FLAG_BTF)))  
 800f3d6:	4940      	ldr	r1, [pc, #256]	; (800f4d8 <I2C_DMA_ReadDeviceRegister+0x1c0>)
 800f3d8:	483b      	ldr	r0, [pc, #236]	; (800f4c8 <I2C_DMA_ReadDeviceRegister+0x1b0>)
 800f3da:	f7f7 ff07 	bl	80071ec <I2C_GetFlagStatus>
 800f3de:	4603      	mov	r3, r0
 800f3e0:	2b00      	cmp	r3, #0
 800f3e2:	d106      	bne.n	800f3f2 <I2C_DMA_ReadDeviceRegister+0xda>
 800f3e4:	493d      	ldr	r1, [pc, #244]	; (800f4dc <I2C_DMA_ReadDeviceRegister+0x1c4>)
 800f3e6:	4838      	ldr	r0, [pc, #224]	; (800f4c8 <I2C_DMA_ReadDeviceRegister+0x1b0>)
 800f3e8:	f7f7 ff00 	bl	80071ec <I2C_GetFlagStatus>
 800f3ec:	4603      	mov	r3, r0
 800f3ee:	2b00      	cmp	r3, #0
 800f3f0:	d0e6      	beq.n	800f3c0 <I2C_DMA_ReadDeviceRegister+0xa8>
  }
  
  /* Send START condition a second time */  
  I2C_GenerateSTART(IOE_I2C, ENABLE);
 800f3f2:	2101      	movs	r1, #1
 800f3f4:	4834      	ldr	r0, [pc, #208]	; (800f4c8 <I2C_DMA_ReadDeviceRegister+0x1b0>)
 800f3f6:	f7f7 fbf8 	bl	8006bea <I2C_GenerateSTART>
  
  /* Test on SB Flag */
  IOE_TimeOut = TIMEOUT_MAX;
 800f3fa:	4b34      	ldr	r3, [pc, #208]	; (800f4cc <I2C_DMA_ReadDeviceRegister+0x1b4>)
 800f3fc:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800f400:	601a      	str	r2, [r3, #0]
  while (!I2C_GetFlagStatus(IOE_I2C,I2C_FLAG_SB)) 
 800f402:	e00a      	b.n	800f41a <I2C_DMA_ReadDeviceRegister+0x102>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
 800f404:	4b31      	ldr	r3, [pc, #196]	; (800f4cc <I2C_DMA_ReadDeviceRegister+0x1b4>)
 800f406:	681b      	ldr	r3, [r3, #0]
 800f408:	1e5a      	subs	r2, r3, #1
 800f40a:	4930      	ldr	r1, [pc, #192]	; (800f4cc <I2C_DMA_ReadDeviceRegister+0x1b4>)
 800f40c:	600a      	str	r2, [r1, #0]
 800f40e:	2b00      	cmp	r3, #0
 800f410:	d103      	bne.n	800f41a <I2C_DMA_ReadDeviceRegister+0x102>
 800f412:	f000 fd29 	bl	800fe68 <IOE_TimeoutUserCallback>
 800f416:	4603      	mov	r3, r0
 800f418:	e052      	b.n	800f4c0 <I2C_DMA_ReadDeviceRegister+0x1a8>
  while (!I2C_GetFlagStatus(IOE_I2C,I2C_FLAG_SB)) 
 800f41a:	492d      	ldr	r1, [pc, #180]	; (800f4d0 <I2C_DMA_ReadDeviceRegister+0x1b8>)
 800f41c:	482a      	ldr	r0, [pc, #168]	; (800f4c8 <I2C_DMA_ReadDeviceRegister+0x1b0>)
 800f41e:	f7f7 fee5 	bl	80071ec <I2C_GetFlagStatus>
 800f422:	4603      	mov	r3, r0
 800f424:	2b00      	cmp	r3, #0
 800f426:	d0ed      	beq.n	800f404 <I2C_DMA_ReadDeviceRegister+0xec>
  }
  
  /* Send IOExpander address for read */
  I2C_Send7bitAddress(IOE_I2C, IOE_ADDR, I2C_Direction_Receiver);
 800f428:	2201      	movs	r2, #1
 800f42a:	2182      	movs	r1, #130	; 0x82
 800f42c:	4826      	ldr	r0, [pc, #152]	; (800f4c8 <I2C_DMA_ReadDeviceRegister+0x1b0>)
 800f42e:	f7f7 fc1c 	bl	8006c6a <I2C_Send7bitAddress>
  
  /* Test on ADDR Flag */
  IOE_TimeOut = TIMEOUT_MAX;
 800f432:	4b26      	ldr	r3, [pc, #152]	; (800f4cc <I2C_DMA_ReadDeviceRegister+0x1b4>)
 800f434:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800f438:	601a      	str	r2, [r3, #0]
  while (!I2C_CheckEvent(IOE_I2C, I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED))   
 800f43a:	e00a      	b.n	800f452 <I2C_DMA_ReadDeviceRegister+0x13a>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
 800f43c:	4b23      	ldr	r3, [pc, #140]	; (800f4cc <I2C_DMA_ReadDeviceRegister+0x1b4>)
 800f43e:	681b      	ldr	r3, [r3, #0]
 800f440:	1e5a      	subs	r2, r3, #1
 800f442:	4922      	ldr	r1, [pc, #136]	; (800f4cc <I2C_DMA_ReadDeviceRegister+0x1b4>)
 800f444:	600a      	str	r2, [r1, #0]
 800f446:	2b00      	cmp	r3, #0
 800f448:	d103      	bne.n	800f452 <I2C_DMA_ReadDeviceRegister+0x13a>
 800f44a:	f000 fd0d 	bl	800fe68 <IOE_TimeoutUserCallback>
 800f44e:	4603      	mov	r3, r0
 800f450:	e036      	b.n	800f4c0 <I2C_DMA_ReadDeviceRegister+0x1a8>
  while (!I2C_CheckEvent(IOE_I2C, I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED))   
 800f452:	4923      	ldr	r1, [pc, #140]	; (800f4e0 <I2C_DMA_ReadDeviceRegister+0x1c8>)
 800f454:	481c      	ldr	r0, [pc, #112]	; (800f4c8 <I2C_DMA_ReadDeviceRegister+0x1b0>)
 800f456:	f7f7 fe77 	bl	8007148 <I2C_CheckEvent>
 800f45a:	4603      	mov	r3, r0
 800f45c:	2b00      	cmp	r3, #0
 800f45e:	d0ed      	beq.n	800f43c <I2C_DMA_ReadDeviceRegister+0x124>
  }
    
  /* Enable I2C DMA request */
  I2C_DMACmd(IOE_I2C,ENABLE);
 800f460:	2101      	movs	r1, #1
 800f462:	4819      	ldr	r0, [pc, #100]	; (800f4c8 <I2C_DMA_ReadDeviceRegister+0x1b0>)
 800f464:	f7f7 fdf5 	bl	8007052 <I2C_DMACmd>
  
  /* Enable DMA RX Channel */
  DMA_Cmd(IOE_DMA_RX_STREAM, ENABLE);
 800f468:	2101      	movs	r1, #1
 800f46a:	481e      	ldr	r0, [pc, #120]	; (800f4e4 <I2C_DMA_ReadDeviceRegister+0x1cc>)
 800f46c:	f7f4 fceb 	bl	8003e46 <DMA_Cmd>
  
  /* Wait until DMA Transfer Complete */
  IOE_TimeOut = 2 * TIMEOUT_MAX;
 800f470:	4b16      	ldr	r3, [pc, #88]	; (800f4cc <I2C_DMA_ReadDeviceRegister+0x1b4>)
 800f472:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
 800f476:	601a      	str	r2, [r3, #0]
  while (!DMA_GetFlagStatus(IOE_DMA_RX_STREAM,IOE_DMA_RX_TCFLAG))
 800f478:	e00a      	b.n	800f490 <I2C_DMA_ReadDeviceRegister+0x178>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
 800f47a:	4b14      	ldr	r3, [pc, #80]	; (800f4cc <I2C_DMA_ReadDeviceRegister+0x1b4>)
 800f47c:	681b      	ldr	r3, [r3, #0]
 800f47e:	1e5a      	subs	r2, r3, #1
 800f480:	4912      	ldr	r1, [pc, #72]	; (800f4cc <I2C_DMA_ReadDeviceRegister+0x1b4>)
 800f482:	600a      	str	r2, [r1, #0]
 800f484:	2b00      	cmp	r3, #0
 800f486:	d103      	bne.n	800f490 <I2C_DMA_ReadDeviceRegister+0x178>
 800f488:	f000 fcee 	bl	800fe68 <IOE_TimeoutUserCallback>
 800f48c:	4603      	mov	r3, r0
 800f48e:	e017      	b.n	800f4c0 <I2C_DMA_ReadDeviceRegister+0x1a8>
  while (!DMA_GetFlagStatus(IOE_DMA_RX_STREAM,IOE_DMA_RX_TCFLAG))
 800f490:	4915      	ldr	r1, [pc, #84]	; (800f4e8 <I2C_DMA_ReadDeviceRegister+0x1d0>)
 800f492:	4814      	ldr	r0, [pc, #80]	; (800f4e4 <I2C_DMA_ReadDeviceRegister+0x1cc>)
 800f494:	f7f4 fdd8 	bl	8004048 <DMA_GetFlagStatus>
 800f498:	4603      	mov	r3, r0
 800f49a:	2b00      	cmp	r3, #0
 800f49c:	d0ed      	beq.n	800f47a <I2C_DMA_ReadDeviceRegister+0x162>
  }        
  
  /* Send STOP Condition */
  I2C_GenerateSTOP(IOE_I2C, ENABLE);
 800f49e:	2101      	movs	r1, #1
 800f4a0:	4809      	ldr	r0, [pc, #36]	; (800f4c8 <I2C_DMA_ReadDeviceRegister+0x1b0>)
 800f4a2:	f7f7 fbc2 	bl	8006c2a <I2C_GenerateSTOP>
  
  /* Disable DMA RX Channel */
  DMA_Cmd(IOE_DMA_RX_STREAM, DISABLE);
 800f4a6:	2100      	movs	r1, #0
 800f4a8:	480e      	ldr	r0, [pc, #56]	; (800f4e4 <I2C_DMA_ReadDeviceRegister+0x1cc>)
 800f4aa:	f7f4 fccc 	bl	8003e46 <DMA_Cmd>
  
  /* Disable I2C DMA request */  
  I2C_DMACmd(IOE_I2C,DISABLE);
 800f4ae:	2100      	movs	r1, #0
 800f4b0:	4805      	ldr	r0, [pc, #20]	; (800f4c8 <I2C_DMA_ReadDeviceRegister+0x1b0>)
 800f4b2:	f7f7 fdce 	bl	8007052 <I2C_DMACmd>
  
  /* Clear DMA RX Transfer Complete Flag */
 DMA_ClearFlag(IOE_DMA_RX_STREAM,IOE_DMA_RX_TCFLAG);
 800f4b6:	490c      	ldr	r1, [pc, #48]	; (800f4e8 <I2C_DMA_ReadDeviceRegister+0x1d0>)
 800f4b8:	480a      	ldr	r0, [pc, #40]	; (800f4e4 <I2C_DMA_ReadDeviceRegister+0x1cc>)
 800f4ba:	f7f4 fe01 	bl	80040c0 <DMA_ClearFlag>
  
  /* return a pointer to the IOE_Buffer */
  return (uint8_t)IOE_BufferRX[0];
 800f4be:	7b3b      	ldrb	r3, [r7, #12]
}
 800f4c0:	4618      	mov	r0, r3
 800f4c2:	3710      	adds	r7, #16
 800f4c4:	46bd      	mov	sp, r7
 800f4c6:	bd80      	pop	{r7, pc}
 800f4c8:	40005c00 	.word	0x40005c00
 800f4cc:	200000a4 	.word	0x200000a4
 800f4d0:	10000001 	.word	0x10000001
 800f4d4:	00070082 	.word	0x00070082
 800f4d8:	10000080 	.word	0x10000080
 800f4dc:	10000004 	.word	0x10000004
 800f4e0:	00030002 	.word	0x00030002
 800f4e4:	40026010 	.word	0x40026010
 800f4e8:	10000020 	.word	0x10000020

0800f4ec <I2C_DMA_ReadDataBuffer>:
  * @brief  Reads a buffer of 2 bytes from the device registers.
  * @param  RegisterAddr: The target register address (between 00x and 0x24)
  * @retval A pointer to the buffer containing the two returned bytes (in halfword).  
  */
uint16_t I2C_DMA_ReadDataBuffer(uint32_t RegisterAddr)
{ 
 800f4ec:	b580      	push	{r7, lr}
 800f4ee:	b084      	sub	sp, #16
 800f4f0:	af00      	add	r7, sp, #0
 800f4f2:	6078      	str	r0, [r7, #4]
  uint8_t tmp= 0;
 800f4f4:	2300      	movs	r3, #0
 800f4f6:	73fb      	strb	r3, [r7, #15]
  uint8_t IOE_BufferRX[2] = {0x00, 0x00};  
 800f4f8:	2300      	movs	r3, #0
 800f4fa:	733b      	strb	r3, [r7, #12]
 800f4fc:	2300      	movs	r3, #0
 800f4fe:	737b      	strb	r3, [r7, #13]
  
  /* Configure DMA Peripheral */
  IOE_DMA_Config(IOE_DMA_RX, (uint8_t*)IOE_BufferRX);
 800f500:	f107 030c 	add.w	r3, r7, #12
 800f504:	4619      	mov	r1, r3
 800f506:	2001      	movs	r0, #1
 800f508:	f000 f9d2 	bl	800f8b0 <IOE_DMA_Config>
  
  /* Enable DMA NACK automatic generation */
  I2C_DMALastTransferCmd(IOE_I2C, ENABLE);
 800f50c:	2101      	movs	r1, #1
 800f50e:	486e      	ldr	r0, [pc, #440]	; (800f6c8 <I2C_DMA_ReadDataBuffer+0x1dc>)
 800f510:	f7f7 fdbf 	bl	8007092 <I2C_DMALastTransferCmd>
  
  /* Enable the I2C peripheral */
  I2C_GenerateSTART(IOE_I2C, ENABLE);
 800f514:	2101      	movs	r1, #1
 800f516:	486c      	ldr	r0, [pc, #432]	; (800f6c8 <I2C_DMA_ReadDataBuffer+0x1dc>)
 800f518:	f7f7 fb67 	bl	8006bea <I2C_GenerateSTART>
  
  /* Test on SB Flag */
  IOE_TimeOut = TIMEOUT_MAX;
 800f51c:	4b6b      	ldr	r3, [pc, #428]	; (800f6cc <I2C_DMA_ReadDataBuffer+0x1e0>)
 800f51e:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800f522:	601a      	str	r2, [r3, #0]
  while (!I2C_GetFlagStatus(IOE_I2C,I2C_FLAG_SB)) 
 800f524:	e00b      	b.n	800f53e <I2C_DMA_ReadDataBuffer+0x52>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
 800f526:	4b69      	ldr	r3, [pc, #420]	; (800f6cc <I2C_DMA_ReadDataBuffer+0x1e0>)
 800f528:	681b      	ldr	r3, [r3, #0]
 800f52a:	1e5a      	subs	r2, r3, #1
 800f52c:	4967      	ldr	r1, [pc, #412]	; (800f6cc <I2C_DMA_ReadDataBuffer+0x1e0>)
 800f52e:	600a      	str	r2, [r1, #0]
 800f530:	2b00      	cmp	r3, #0
 800f532:	d104      	bne.n	800f53e <I2C_DMA_ReadDataBuffer+0x52>
 800f534:	f000 fc98 	bl	800fe68 <IOE_TimeoutUserCallback>
 800f538:	4603      	mov	r3, r0
 800f53a:	b29b      	uxth	r3, r3
 800f53c:	e0bf      	b.n	800f6be <I2C_DMA_ReadDataBuffer+0x1d2>
  while (!I2C_GetFlagStatus(IOE_I2C,I2C_FLAG_SB)) 
 800f53e:	4964      	ldr	r1, [pc, #400]	; (800f6d0 <I2C_DMA_ReadDataBuffer+0x1e4>)
 800f540:	4861      	ldr	r0, [pc, #388]	; (800f6c8 <I2C_DMA_ReadDataBuffer+0x1dc>)
 800f542:	f7f7 fe53 	bl	80071ec <I2C_GetFlagStatus>
 800f546:	4603      	mov	r3, r0
 800f548:	2b00      	cmp	r3, #0
 800f54a:	d0ec      	beq.n	800f526 <I2C_DMA_ReadDataBuffer+0x3a>
  }
  
  /* Send device address for write */
  I2C_Send7bitAddress(IOE_I2C, IOE_ADDR, I2C_Direction_Transmitter);
 800f54c:	2200      	movs	r2, #0
 800f54e:	2182      	movs	r1, #130	; 0x82
 800f550:	485d      	ldr	r0, [pc, #372]	; (800f6c8 <I2C_DMA_ReadDataBuffer+0x1dc>)
 800f552:	f7f7 fb8a 	bl	8006c6a <I2C_Send7bitAddress>
  
  /* Test on ADDR Flag */
  IOE_TimeOut = TIMEOUT_MAX;
 800f556:	4b5d      	ldr	r3, [pc, #372]	; (800f6cc <I2C_DMA_ReadDataBuffer+0x1e0>)
 800f558:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800f55c:	601a      	str	r2, [r3, #0]
  while (!I2C_CheckEvent(IOE_I2C, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED))
 800f55e:	e00b      	b.n	800f578 <I2C_DMA_ReadDataBuffer+0x8c>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
 800f560:	4b5a      	ldr	r3, [pc, #360]	; (800f6cc <I2C_DMA_ReadDataBuffer+0x1e0>)
 800f562:	681b      	ldr	r3, [r3, #0]
 800f564:	1e5a      	subs	r2, r3, #1
 800f566:	4959      	ldr	r1, [pc, #356]	; (800f6cc <I2C_DMA_ReadDataBuffer+0x1e0>)
 800f568:	600a      	str	r2, [r1, #0]
 800f56a:	2b00      	cmp	r3, #0
 800f56c:	d104      	bne.n	800f578 <I2C_DMA_ReadDataBuffer+0x8c>
 800f56e:	f000 fc7b 	bl	800fe68 <IOE_TimeoutUserCallback>
 800f572:	4603      	mov	r3, r0
 800f574:	b29b      	uxth	r3, r3
 800f576:	e0a2      	b.n	800f6be <I2C_DMA_ReadDataBuffer+0x1d2>
  while (!I2C_CheckEvent(IOE_I2C, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED))
 800f578:	4956      	ldr	r1, [pc, #344]	; (800f6d4 <I2C_DMA_ReadDataBuffer+0x1e8>)
 800f57a:	4853      	ldr	r0, [pc, #332]	; (800f6c8 <I2C_DMA_ReadDataBuffer+0x1dc>)
 800f57c:	f7f7 fde4 	bl	8007148 <I2C_CheckEvent>
 800f580:	4603      	mov	r3, r0
 800f582:	2b00      	cmp	r3, #0
 800f584:	d0ec      	beq.n	800f560 <I2C_DMA_ReadDataBuffer+0x74>
  }
  
  /* Send the device's internal address to write to */
  I2C_SendData(IOE_I2C, RegisterAddr);  
 800f586:	687b      	ldr	r3, [r7, #4]
 800f588:	b2db      	uxtb	r3, r3
 800f58a:	4619      	mov	r1, r3
 800f58c:	484e      	ldr	r0, [pc, #312]	; (800f6c8 <I2C_DMA_ReadDataBuffer+0x1dc>)
 800f58e:	f7f7 fcd1 	bl	8006f34 <I2C_SendData>
  
  /* Test on TXE FLag (data dent) */
  IOE_TimeOut = TIMEOUT_MAX;
 800f592:	4b4e      	ldr	r3, [pc, #312]	; (800f6cc <I2C_DMA_ReadDataBuffer+0x1e0>)
 800f594:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800f598:	601a      	str	r2, [r3, #0]
  while ((!I2C_GetFlagStatus(IOE_I2C,I2C_FLAG_TXE)) && (!I2C_GetFlagStatus(IOE_I2C,I2C_FLAG_BTF)))  
 800f59a:	e00b      	b.n	800f5b4 <I2C_DMA_ReadDataBuffer+0xc8>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
 800f59c:	4b4b      	ldr	r3, [pc, #300]	; (800f6cc <I2C_DMA_ReadDataBuffer+0x1e0>)
 800f59e:	681b      	ldr	r3, [r3, #0]
 800f5a0:	1e5a      	subs	r2, r3, #1
 800f5a2:	494a      	ldr	r1, [pc, #296]	; (800f6cc <I2C_DMA_ReadDataBuffer+0x1e0>)
 800f5a4:	600a      	str	r2, [r1, #0]
 800f5a6:	2b00      	cmp	r3, #0
 800f5a8:	d104      	bne.n	800f5b4 <I2C_DMA_ReadDataBuffer+0xc8>
 800f5aa:	f000 fc5d 	bl	800fe68 <IOE_TimeoutUserCallback>
 800f5ae:	4603      	mov	r3, r0
 800f5b0:	b29b      	uxth	r3, r3
 800f5b2:	e084      	b.n	800f6be <I2C_DMA_ReadDataBuffer+0x1d2>
  while ((!I2C_GetFlagStatus(IOE_I2C,I2C_FLAG_TXE)) && (!I2C_GetFlagStatus(IOE_I2C,I2C_FLAG_BTF)))  
 800f5b4:	4948      	ldr	r1, [pc, #288]	; (800f6d8 <I2C_DMA_ReadDataBuffer+0x1ec>)
 800f5b6:	4844      	ldr	r0, [pc, #272]	; (800f6c8 <I2C_DMA_ReadDataBuffer+0x1dc>)
 800f5b8:	f7f7 fe18 	bl	80071ec <I2C_GetFlagStatus>
 800f5bc:	4603      	mov	r3, r0
 800f5be:	2b00      	cmp	r3, #0
 800f5c0:	d106      	bne.n	800f5d0 <I2C_DMA_ReadDataBuffer+0xe4>
 800f5c2:	4946      	ldr	r1, [pc, #280]	; (800f6dc <I2C_DMA_ReadDataBuffer+0x1f0>)
 800f5c4:	4840      	ldr	r0, [pc, #256]	; (800f6c8 <I2C_DMA_ReadDataBuffer+0x1dc>)
 800f5c6:	f7f7 fe11 	bl	80071ec <I2C_GetFlagStatus>
 800f5ca:	4603      	mov	r3, r0
 800f5cc:	2b00      	cmp	r3, #0
 800f5ce:	d0e5      	beq.n	800f59c <I2C_DMA_ReadDataBuffer+0xb0>
  }
  
  /* Send START condition a second time */  
  I2C_GenerateSTART(IOE_I2C, ENABLE);
 800f5d0:	2101      	movs	r1, #1
 800f5d2:	483d      	ldr	r0, [pc, #244]	; (800f6c8 <I2C_DMA_ReadDataBuffer+0x1dc>)
 800f5d4:	f7f7 fb09 	bl	8006bea <I2C_GenerateSTART>
  
  /* Test on SB Flag */
  IOE_TimeOut = TIMEOUT_MAX;
 800f5d8:	4b3c      	ldr	r3, [pc, #240]	; (800f6cc <I2C_DMA_ReadDataBuffer+0x1e0>)
 800f5da:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800f5de:	601a      	str	r2, [r3, #0]
  while (!I2C_GetFlagStatus(IOE_I2C,I2C_FLAG_SB)) 
 800f5e0:	e00b      	b.n	800f5fa <I2C_DMA_ReadDataBuffer+0x10e>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
 800f5e2:	4b3a      	ldr	r3, [pc, #232]	; (800f6cc <I2C_DMA_ReadDataBuffer+0x1e0>)
 800f5e4:	681b      	ldr	r3, [r3, #0]
 800f5e6:	1e5a      	subs	r2, r3, #1
 800f5e8:	4938      	ldr	r1, [pc, #224]	; (800f6cc <I2C_DMA_ReadDataBuffer+0x1e0>)
 800f5ea:	600a      	str	r2, [r1, #0]
 800f5ec:	2b00      	cmp	r3, #0
 800f5ee:	d104      	bne.n	800f5fa <I2C_DMA_ReadDataBuffer+0x10e>
 800f5f0:	f000 fc3a 	bl	800fe68 <IOE_TimeoutUserCallback>
 800f5f4:	4603      	mov	r3, r0
 800f5f6:	b29b      	uxth	r3, r3
 800f5f8:	e061      	b.n	800f6be <I2C_DMA_ReadDataBuffer+0x1d2>
  while (!I2C_GetFlagStatus(IOE_I2C,I2C_FLAG_SB)) 
 800f5fa:	4935      	ldr	r1, [pc, #212]	; (800f6d0 <I2C_DMA_ReadDataBuffer+0x1e4>)
 800f5fc:	4832      	ldr	r0, [pc, #200]	; (800f6c8 <I2C_DMA_ReadDataBuffer+0x1dc>)
 800f5fe:	f7f7 fdf5 	bl	80071ec <I2C_GetFlagStatus>
 800f602:	4603      	mov	r3, r0
 800f604:	2b00      	cmp	r3, #0
 800f606:	d0ec      	beq.n	800f5e2 <I2C_DMA_ReadDataBuffer+0xf6>
  }
  
  /* Send IO Expander address for read */
  I2C_Send7bitAddress(IOE_I2C, IOE_ADDR, I2C_Direction_Receiver);
 800f608:	2201      	movs	r2, #1
 800f60a:	2182      	movs	r1, #130	; 0x82
 800f60c:	482e      	ldr	r0, [pc, #184]	; (800f6c8 <I2C_DMA_ReadDataBuffer+0x1dc>)
 800f60e:	f7f7 fb2c 	bl	8006c6a <I2C_Send7bitAddress>
  
  /* Test on ADDR Flag */
  IOE_TimeOut = TIMEOUT_MAX;
 800f612:	4b2e      	ldr	r3, [pc, #184]	; (800f6cc <I2C_DMA_ReadDataBuffer+0x1e0>)
 800f614:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800f618:	601a      	str	r2, [r3, #0]
  while (!I2C_CheckEvent(IOE_I2C, I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED))   
 800f61a:	e00b      	b.n	800f634 <I2C_DMA_ReadDataBuffer+0x148>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
 800f61c:	4b2b      	ldr	r3, [pc, #172]	; (800f6cc <I2C_DMA_ReadDataBuffer+0x1e0>)
 800f61e:	681b      	ldr	r3, [r3, #0]
 800f620:	1e5a      	subs	r2, r3, #1
 800f622:	492a      	ldr	r1, [pc, #168]	; (800f6cc <I2C_DMA_ReadDataBuffer+0x1e0>)
 800f624:	600a      	str	r2, [r1, #0]
 800f626:	2b00      	cmp	r3, #0
 800f628:	d104      	bne.n	800f634 <I2C_DMA_ReadDataBuffer+0x148>
 800f62a:	f000 fc1d 	bl	800fe68 <IOE_TimeoutUserCallback>
 800f62e:	4603      	mov	r3, r0
 800f630:	b29b      	uxth	r3, r3
 800f632:	e044      	b.n	800f6be <I2C_DMA_ReadDataBuffer+0x1d2>
  while (!I2C_CheckEvent(IOE_I2C, I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED))   
 800f634:	492a      	ldr	r1, [pc, #168]	; (800f6e0 <I2C_DMA_ReadDataBuffer+0x1f4>)
 800f636:	4824      	ldr	r0, [pc, #144]	; (800f6c8 <I2C_DMA_ReadDataBuffer+0x1dc>)
 800f638:	f7f7 fd86 	bl	8007148 <I2C_CheckEvent>
 800f63c:	4603      	mov	r3, r0
 800f63e:	2b00      	cmp	r3, #0
 800f640:	d0ec      	beq.n	800f61c <I2C_DMA_ReadDataBuffer+0x130>
  }
  
  /* Enable I2C DMA request */
  I2C_DMACmd(IOE_I2C,ENABLE);
 800f642:	2101      	movs	r1, #1
 800f644:	4820      	ldr	r0, [pc, #128]	; (800f6c8 <I2C_DMA_ReadDataBuffer+0x1dc>)
 800f646:	f7f7 fd04 	bl	8007052 <I2C_DMACmd>
  
  /* Enable DMA RX Channel */
  DMA_Cmd(IOE_DMA_RX_STREAM, ENABLE);
 800f64a:	2101      	movs	r1, #1
 800f64c:	4825      	ldr	r0, [pc, #148]	; (800f6e4 <I2C_DMA_ReadDataBuffer+0x1f8>)
 800f64e:	f7f4 fbfa 	bl	8003e46 <DMA_Cmd>
  
  /* Wait until DMA Transfer Complete */
  IOE_TimeOut = 2 * TIMEOUT_MAX;
 800f652:	4b1e      	ldr	r3, [pc, #120]	; (800f6cc <I2C_DMA_ReadDataBuffer+0x1e0>)
 800f654:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
 800f658:	601a      	str	r2, [r3, #0]
  while (!DMA_GetFlagStatus(IOE_DMA_RX_STREAM, IOE_DMA_RX_TCFLAG))
 800f65a:	e00b      	b.n	800f674 <I2C_DMA_ReadDataBuffer+0x188>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
 800f65c:	4b1b      	ldr	r3, [pc, #108]	; (800f6cc <I2C_DMA_ReadDataBuffer+0x1e0>)
 800f65e:	681b      	ldr	r3, [r3, #0]
 800f660:	1e5a      	subs	r2, r3, #1
 800f662:	491a      	ldr	r1, [pc, #104]	; (800f6cc <I2C_DMA_ReadDataBuffer+0x1e0>)
 800f664:	600a      	str	r2, [r1, #0]
 800f666:	2b00      	cmp	r3, #0
 800f668:	d104      	bne.n	800f674 <I2C_DMA_ReadDataBuffer+0x188>
 800f66a:	f000 fbfd 	bl	800fe68 <IOE_TimeoutUserCallback>
 800f66e:	4603      	mov	r3, r0
 800f670:	b29b      	uxth	r3, r3
 800f672:	e024      	b.n	800f6be <I2C_DMA_ReadDataBuffer+0x1d2>
  while (!DMA_GetFlagStatus(IOE_DMA_RX_STREAM, IOE_DMA_RX_TCFLAG))
 800f674:	491c      	ldr	r1, [pc, #112]	; (800f6e8 <I2C_DMA_ReadDataBuffer+0x1fc>)
 800f676:	481b      	ldr	r0, [pc, #108]	; (800f6e4 <I2C_DMA_ReadDataBuffer+0x1f8>)
 800f678:	f7f4 fce6 	bl	8004048 <DMA_GetFlagStatus>
 800f67c:	4603      	mov	r3, r0
 800f67e:	2b00      	cmp	r3, #0
 800f680:	d0ec      	beq.n	800f65c <I2C_DMA_ReadDataBuffer+0x170>
  }        
  
  /* Send STOP Condition */
  I2C_GenerateSTOP(IOE_I2C, ENABLE);
 800f682:	2101      	movs	r1, #1
 800f684:	4810      	ldr	r0, [pc, #64]	; (800f6c8 <I2C_DMA_ReadDataBuffer+0x1dc>)
 800f686:	f7f7 fad0 	bl	8006c2a <I2C_GenerateSTOP>
  
  /* Disable DMA RX Channel */
  DMA_Cmd(IOE_DMA_RX_STREAM, DISABLE);
 800f68a:	2100      	movs	r1, #0
 800f68c:	4815      	ldr	r0, [pc, #84]	; (800f6e4 <I2C_DMA_ReadDataBuffer+0x1f8>)
 800f68e:	f7f4 fbda 	bl	8003e46 <DMA_Cmd>
  
  /* Disable I2C DMA request */  
  I2C_DMACmd(IOE_I2C,DISABLE);
 800f692:	2100      	movs	r1, #0
 800f694:	480c      	ldr	r0, [pc, #48]	; (800f6c8 <I2C_DMA_ReadDataBuffer+0x1dc>)
 800f696:	f7f7 fcdc 	bl	8007052 <I2C_DMACmd>
  
  /* Clear DMA RX Transfer Complete Flag */
  DMA_ClearFlag(IOE_DMA_RX_STREAM,IOE_DMA_RX_TCFLAG);
 800f69a:	4913      	ldr	r1, [pc, #76]	; (800f6e8 <I2C_DMA_ReadDataBuffer+0x1fc>)
 800f69c:	4811      	ldr	r0, [pc, #68]	; (800f6e4 <I2C_DMA_ReadDataBuffer+0x1f8>)
 800f69e:	f7f4 fd0f 	bl	80040c0 <DMA_ClearFlag>
  
  /* Reorganize received data */  
  tmp = IOE_BufferRX[0];
 800f6a2:	7b3b      	ldrb	r3, [r7, #12]
 800f6a4:	73fb      	strb	r3, [r7, #15]
  IOE_BufferRX[0] = IOE_BufferRX[1];
 800f6a6:	7b7b      	ldrb	r3, [r7, #13]
 800f6a8:	733b      	strb	r3, [r7, #12]
  IOE_BufferRX[1] = tmp;
 800f6aa:	7bfb      	ldrb	r3, [r7, #15]
 800f6ac:	737b      	strb	r3, [r7, #13]
  
  /* return the data */
  return (uint16_t) ((uint16_t)IOE_BufferRX[0] | (uint16_t)IOE_BufferRX[1]<< 8);
 800f6ae:	7b3b      	ldrb	r3, [r7, #12]
 800f6b0:	b21a      	sxth	r2, r3
 800f6b2:	7b7b      	ldrb	r3, [r7, #13]
 800f6b4:	021b      	lsls	r3, r3, #8
 800f6b6:	b21b      	sxth	r3, r3
 800f6b8:	4313      	orrs	r3, r2
 800f6ba:	b21b      	sxth	r3, r3
 800f6bc:	b29b      	uxth	r3, r3
}
 800f6be:	4618      	mov	r0, r3
 800f6c0:	3710      	adds	r7, #16
 800f6c2:	46bd      	mov	sp, r7
 800f6c4:	bd80      	pop	{r7, pc}
 800f6c6:	bf00      	nop
 800f6c8:	40005c00 	.word	0x40005c00
 800f6cc:	200000a4 	.word	0x200000a4
 800f6d0:	10000001 	.word	0x10000001
 800f6d4:	00070082 	.word	0x00070082
 800f6d8:	10000080 	.word	0x10000080
 800f6dc:	10000004 	.word	0x10000004
 800f6e0:	00030002 	.word	0x00030002
 800f6e4:	40026010 	.word	0x40026010
 800f6e8:	10000020 	.word	0x10000020

0800f6ec <IOE_TP_Read_X>:
  * @brief  Return Touch Panel X position value
  * @param  None
  * @retval X position.
  */
static uint16_t IOE_TP_Read_X(void)
{
 800f6ec:	b580      	push	{r7, lr}
 800f6ee:	b082      	sub	sp, #8
 800f6f0:	af00      	add	r7, sp, #0
  int32_t x, xr;
  
  /* Read x value from DATA_X register */
  x = I2C_ReadDataBuffer(IOE_REG_TP_DATA_X);
 800f6f2:	204d      	movs	r0, #77	; 0x4d
 800f6f4:	f000 facc 	bl	800fc90 <I2C_ReadDataBuffer>
 800f6f8:	4603      	mov	r3, r0
 800f6fa:	607b      	str	r3, [r7, #4]
  
  /* x value first correction */
  if(x <= 3000)
 800f6fc:	687b      	ldr	r3, [r7, #4]
 800f6fe:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800f702:	4293      	cmp	r3, r2
 800f704:	dc05      	bgt.n	800f712 <IOE_TP_Read_X+0x26>
  {
  x = 3870 - x;
 800f706:	687b      	ldr	r3, [r7, #4]
 800f708:	f5c3 6371 	rsb	r3, r3, #3856	; 0xf10
 800f70c:	330e      	adds	r3, #14
 800f70e:	607b      	str	r3, [r7, #4]
 800f710:	e004      	b.n	800f71c <IOE_TP_Read_X+0x30>
  }
  else
  {
   x = 3800 - x;
 800f712:	687b      	ldr	r3, [r7, #4]
 800f714:	f5c3 636d 	rsb	r3, r3, #3792	; 0xed0
 800f718:	3308      	adds	r3, #8
 800f71a:	607b      	str	r3, [r7, #4]
  }
  
  /* x value second correction */  
  xr = x / 15;
 800f71c:	687b      	ldr	r3, [r7, #4]
 800f71e:	4a0c      	ldr	r2, [pc, #48]	; (800f750 <IOE_TP_Read_X+0x64>)
 800f720:	fb82 1203 	smull	r1, r2, r2, r3
 800f724:	441a      	add	r2, r3
 800f726:	10d2      	asrs	r2, r2, #3
 800f728:	17db      	asrs	r3, r3, #31
 800f72a:	1ad3      	subs	r3, r2, r3
 800f72c:	603b      	str	r3, [r7, #0]
  
  /* return x position value */
  if(xr <= 0)
 800f72e:	683b      	ldr	r3, [r7, #0]
 800f730:	2b00      	cmp	r3, #0
 800f732:	dc02      	bgt.n	800f73a <IOE_TP_Read_X+0x4e>
  {
    xr = 0;
 800f734:	2300      	movs	r3, #0
 800f736:	603b      	str	r3, [r7, #0]
 800f738:	e004      	b.n	800f744 <IOE_TP_Read_X+0x58>
  }
  else if (xr > 240)
 800f73a:	683b      	ldr	r3, [r7, #0]
 800f73c:	2bf0      	cmp	r3, #240	; 0xf0
 800f73e:	dd01      	ble.n	800f744 <IOE_TP_Read_X+0x58>
  {
    xr = 239;
 800f740:	23ef      	movs	r3, #239	; 0xef
 800f742:	603b      	str	r3, [r7, #0]
  }
  else 
  {}
  return (uint16_t)(xr); 
 800f744:	683b      	ldr	r3, [r7, #0]
 800f746:	b29b      	uxth	r3, r3
}
 800f748:	4618      	mov	r0, r3
 800f74a:	3708      	adds	r7, #8
 800f74c:	46bd      	mov	sp, r7
 800f74e:	bd80      	pop	{r7, pc}
 800f750:	88888889 	.word	0x88888889

0800f754 <IOE_TP_Read_Y>:
  * @brief  Return Touch Panel Y position value
  * @param  None
  * @retval Y position.
  */
static uint16_t IOE_TP_Read_Y(void)
{
 800f754:	b580      	push	{r7, lr}
 800f756:	b082      	sub	sp, #8
 800f758:	af00      	add	r7, sp, #0
  int32_t y, yr;
  
  /* Read y value from DATA_Y register */
  y = I2C_ReadDataBuffer(IOE_REG_TP_DATA_Y);
 800f75a:	204f      	movs	r0, #79	; 0x4f
 800f75c:	f000 fa98 	bl	800fc90 <I2C_ReadDataBuffer>
 800f760:	4603      	mov	r3, r0
 800f762:	603b      	str	r3, [r7, #0]
  
  /* y value first correction */

  y -= 360;  
 800f764:	683b      	ldr	r3, [r7, #0]
 800f766:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800f76a:	603b      	str	r3, [r7, #0]
  
  /* y value second correction */
  yr = y / 11;
 800f76c:	683b      	ldr	r3, [r7, #0]
 800f76e:	4a0d      	ldr	r2, [pc, #52]	; (800f7a4 <IOE_TP_Read_Y+0x50>)
 800f770:	fb82 1203 	smull	r1, r2, r2, r3
 800f774:	1052      	asrs	r2, r2, #1
 800f776:	17db      	asrs	r3, r3, #31
 800f778:	1ad3      	subs	r3, r2, r3
 800f77a:	607b      	str	r3, [r7, #4]
  
  /* return y position value */
  if(yr <= 0)
 800f77c:	687b      	ldr	r3, [r7, #4]
 800f77e:	2b00      	cmp	r3, #0
 800f780:	dc02      	bgt.n	800f788 <IOE_TP_Read_Y+0x34>
  {
    yr = 0;
 800f782:	2300      	movs	r3, #0
 800f784:	607b      	str	r3, [r7, #4]
 800f786:	e006      	b.n	800f796 <IOE_TP_Read_Y+0x42>
  }
  else if (yr > 320)
 800f788:	687b      	ldr	r3, [r7, #4]
 800f78a:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800f78e:	dd02      	ble.n	800f796 <IOE_TP_Read_Y+0x42>
  {
    yr = 319;
 800f790:	f240 133f 	movw	r3, #319	; 0x13f
 800f794:	607b      	str	r3, [r7, #4]
  }
  else
  {}
  return (uint16_t)(yr); 
 800f796:	687b      	ldr	r3, [r7, #4]
 800f798:	b29b      	uxth	r3, r3
}
 800f79a:	4618      	mov	r0, r3
 800f79c:	3708      	adds	r7, #8
 800f79e:	46bd      	mov	sp, r7
 800f7a0:	bd80      	pop	{r7, pc}
 800f7a2:	bf00      	nop
 800f7a4:	2e8ba2e9 	.word	0x2e8ba2e9

0800f7a8 <IOE_TP_Read_Z>:
  * @brief  Return Touch Panel Z position value
  * @param  None
  * @retval Z position.
  */
static uint16_t IOE_TP_Read_Z(void)
{
 800f7a8:	b580      	push	{r7, lr}
 800f7aa:	b082      	sub	sp, #8
 800f7ac:	af00      	add	r7, sp, #0
  uint32_t z;
  
  /* Read z value from DATA_Z register */
  z = I2C_ReadDataBuffer(IOE_REG_TP_DATA_Z);
 800f7ae:	2051      	movs	r0, #81	; 0x51
 800f7b0:	f000 fa6e 	bl	800fc90 <I2C_ReadDataBuffer>
 800f7b4:	4603      	mov	r3, r0
 800f7b6:	607b      	str	r3, [r7, #4]

  /* return z position value */
  if(z <= 0)
 800f7b8:	687b      	ldr	r3, [r7, #4]
 800f7ba:	2b00      	cmp	r3, #0
 800f7bc:	d101      	bne.n	800f7c2 <IOE_TP_Read_Z+0x1a>
    z = 0;
 800f7be:	2300      	movs	r3, #0
 800f7c0:	607b      	str	r3, [r7, #4]
  return (uint16_t)(z); 
 800f7c2:	687b      	ldr	r3, [r7, #4]
 800f7c4:	b29b      	uxth	r3, r3
}
 800f7c6:	4618      	mov	r0, r3
 800f7c8:	3708      	adds	r7, #8
 800f7ca:	46bd      	mov	sp, r7
 800f7cc:	bd80      	pop	{r7, pc}

0800f7ce <IOE_GPIO_Config>:
  * @brief  Initializes the GPIO pins used by the IO expander.
  * @param  None
  * @retval None
  */
static void IOE_GPIO_Config(void)
{
 800f7ce:	b580      	push	{r7, lr}
 800f7d0:	b082      	sub	sp, #8
 800f7d2:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable IOE_I2C and IOE_I2C_GPIO_PORT & Alternate Function clocks */
  RCC_APB1PeriphClockCmd(IOE_I2C_CLK, ENABLE);
 800f7d4:	2101      	movs	r1, #1
 800f7d6:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 800f7da:	f7f9 f901 	bl	80089e0 <RCC_APB1PeriphClockCmd>
  RCC_AHB1PeriphClockCmd(IOE_I2C_SCL_GPIO_CLK | IOE_I2C_SDA_GPIO_CLK |
 800f7de:	2101      	movs	r1, #1
 800f7e0:	f240 1005 	movw	r0, #261	; 0x105
 800f7e4:	f7f9 f89c 	bl	8008920 <RCC_AHB1PeriphClockCmd>
                         IOE_IT_GPIO_CLK, ENABLE);
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 800f7e8:	2101      	movs	r1, #1
 800f7ea:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800f7ee:	f7f9 f917 	bl	8008a20 <RCC_APB2PeriphClockCmd>
  
  /* Reset IOE_I2C IP */
  RCC_APB1PeriphResetCmd(IOE_I2C_CLK, ENABLE);
 800f7f2:	2101      	movs	r1, #1
 800f7f4:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 800f7f8:	f7f9 f992 	bl	8008b20 <RCC_APB1PeriphResetCmd>
  /* Release reset signal of IOE_I2C IP */
  RCC_APB1PeriphResetCmd(IOE_I2C_CLK, DISABLE);
 800f7fc:	2100      	movs	r1, #0
 800f7fe:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 800f802:	f7f9 f98d 	bl	8008b20 <RCC_APB1PeriphResetCmd>

  /* Connect PXx to I2C_SCL*/
  GPIO_PinAFConfig(IOE_I2C_SCL_GPIO_PORT, IOE_I2C_SCL_SOURCE, IOE_I2C_SCL_AF);
 800f806:	2204      	movs	r2, #4
 800f808:	2108      	movs	r1, #8
 800f80a:	4812      	ldr	r0, [pc, #72]	; (800f854 <IOE_GPIO_Config+0x86>)
 800f80c:	f7f7 f827 	bl	800685e <GPIO_PinAFConfig>
  /* Connect PXx to I2C_SDA*/
  GPIO_PinAFConfig(IOE_I2C_SDA_GPIO_PORT, IOE_I2C_SDA_SOURCE, IOE_I2C_SDA_AF); 
 800f810:	2204      	movs	r2, #4
 800f812:	2109      	movs	r1, #9
 800f814:	4810      	ldr	r0, [pc, #64]	; (800f858 <IOE_GPIO_Config+0x8a>)
 800f816:	f7f7 f822 	bl	800685e <GPIO_PinAFConfig>
    
  /* IOE_I2C SCL and SDA pins configuration */
  GPIO_InitStructure.GPIO_Pin = IOE_I2C_SCL_PIN;
 800f81a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f81e:	603b      	str	r3, [r7, #0]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 800f820:	2302      	movs	r3, #2
 800f822:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 800f824:	2302      	movs	r3, #2
 800f826:	717b      	strb	r3, [r7, #5]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
 800f828:	2301      	movs	r3, #1
 800f82a:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
 800f82c:	2300      	movs	r3, #0
 800f82e:	71fb      	strb	r3, [r7, #7]
  GPIO_Init(IOE_I2C_SCL_GPIO_PORT, &GPIO_InitStructure);
 800f830:	463b      	mov	r3, r7
 800f832:	4619      	mov	r1, r3
 800f834:	4807      	ldr	r0, [pc, #28]	; (800f854 <IOE_GPIO_Config+0x86>)
 800f836:	f7f6 fea3 	bl	8006580 <GPIO_Init>

  GPIO_InitStructure.GPIO_Pin = IOE_I2C_SDA_PIN;
 800f83a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f83e:	603b      	str	r3, [r7, #0]
  GPIO_Init(IOE_I2C_SDA_GPIO_PORT, &GPIO_InitStructure);
 800f840:	463b      	mov	r3, r7
 800f842:	4619      	mov	r1, r3
 800f844:	4804      	ldr	r0, [pc, #16]	; (800f858 <IOE_GPIO_Config+0x8a>)
 800f846:	f7f6 fe9b 	bl	8006580 <GPIO_Init>
  
}
 800f84a:	bf00      	nop
 800f84c:	3708      	adds	r7, #8
 800f84e:	46bd      	mov	sp, r7
 800f850:	bd80      	pop	{r7, pc}
 800f852:	bf00      	nop
 800f854:	40020000 	.word	0x40020000
 800f858:	40020800 	.word	0x40020800

0800f85c <IOE_I2C_Config>:
  * @brief  Configure the I2C Peripheral used to communicate with IO_Expanders.
  * @param  None
  * @retval None
  */
static void IOE_I2C_Config(void)
{
 800f85c:	b580      	push	{r7, lr}
 800f85e:	b084      	sub	sp, #16
 800f860:	af00      	add	r7, sp, #0
  I2C_InitTypeDef I2C_InitStructure;

  /* If the I2C peripheral is already enabled, don't reconfigure it */
  if ((IOE_I2C->CR1 & I2C_CR1_PE) == 0)
 800f862:	4b11      	ldr	r3, [pc, #68]	; (800f8a8 <IOE_I2C_Config+0x4c>)
 800f864:	881b      	ldrh	r3, [r3, #0]
 800f866:	b29b      	uxth	r3, r3
 800f868:	f003 0301 	and.w	r3, r3, #1
 800f86c:	2b00      	cmp	r3, #0
 800f86e:	d117      	bne.n	800f8a0 <IOE_I2C_Config+0x44>
  {   
    /* IOE_I2C configuration */
    I2C_InitStructure.I2C_Mode = I2C_Mode_I2C;
 800f870:	2300      	movs	r3, #0
 800f872:	80bb      	strh	r3, [r7, #4]
    I2C_InitStructure.I2C_DutyCycle = I2C_DutyCycle_2;
 800f874:	f64b 73ff 	movw	r3, #49151	; 0xbfff
 800f878:	80fb      	strh	r3, [r7, #6]
    I2C_InitStructure.I2C_OwnAddress1 = 0x00;
 800f87a:	2300      	movs	r3, #0
 800f87c:	813b      	strh	r3, [r7, #8]
    I2C_InitStructure.I2C_Ack = I2C_Ack_Enable;
 800f87e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f882:	817b      	strh	r3, [r7, #10]
    I2C_InitStructure.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 800f884:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800f888:	81bb      	strh	r3, [r7, #12]
    I2C_InitStructure.I2C_ClockSpeed = I2C_SPEED;
 800f88a:	4b08      	ldr	r3, [pc, #32]	; (800f8ac <IOE_I2C_Config+0x50>)
 800f88c:	603b      	str	r3, [r7, #0]
  
    /* Initialize the I2C peripheral */
    I2C_Init(IOE_I2C, &I2C_InitStructure);
 800f88e:	463b      	mov	r3, r7
 800f890:	4619      	mov	r1, r3
 800f892:	4805      	ldr	r0, [pc, #20]	; (800f8a8 <IOE_I2C_Config+0x4c>)
 800f894:	f7f7 f866 	bl	8006964 <I2C_Init>
  
    /* Enable the I2C peripheral */
    I2C_Cmd(IOE_I2C, ENABLE);
 800f898:	2101      	movs	r1, #1
 800f89a:	4803      	ldr	r0, [pc, #12]	; (800f8a8 <IOE_I2C_Config+0x4c>)
 800f89c:	f7f7 f943 	bl	8006b26 <I2C_Cmd>
  }   
}
 800f8a0:	bf00      	nop
 800f8a2:	3710      	adds	r7, #16
 800f8a4:	46bd      	mov	sp, r7
 800f8a6:	bd80      	pop	{r7, pc}
 800f8a8:	40005c00 	.word	0x40005c00
 800f8ac:	000186a0 	.word	0x000186a0

0800f8b0 <IOE_DMA_Config>:
  * @brief  Configure the DMA Peripheral used to handle communication via I2C.
  * @param  None
  * @retval None
  */
static void IOE_DMA_Config(IOE_DMADirection_TypeDef Direction, uint8_t* buffer)
{
 800f8b0:	b580      	push	{r7, lr}
 800f8b2:	b092      	sub	sp, #72	; 0x48
 800f8b4:	af00      	add	r7, sp, #0
 800f8b6:	4603      	mov	r3, r0
 800f8b8:	6039      	str	r1, [r7, #0]
 800f8ba:	71fb      	strb	r3, [r7, #7]
  DMA_InitTypeDef DMA_InitStructure;
  
  RCC_AHB1PeriphClockCmd(IOE_DMA_CLK, ENABLE);
 800f8bc:	2101      	movs	r1, #1
 800f8be:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800f8c2:	f7f9 f82d 	bl	8008920 <RCC_AHB1PeriphClockCmd>
  
  /* Initialize the DMA_Channel member */
  DMA_InitStructure.DMA_Channel = IOE_DMA_CHANNEL;
 800f8c6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800f8ca:	60fb      	str	r3, [r7, #12]
  
  /* Initialize the DMA_PeripheralBaseAddr member */
  DMA_InitStructure.DMA_PeripheralBaseAddr = IOE_I2C_DR;
 800f8cc:	4b1e      	ldr	r3, [pc, #120]	; (800f948 <IOE_DMA_Config+0x98>)
 800f8ce:	613b      	str	r3, [r7, #16]
  
  /* Initialize the DMA_Memory0BaseAddr member */
  DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)buffer;
 800f8d0:	683b      	ldr	r3, [r7, #0]
 800f8d2:	617b      	str	r3, [r7, #20]
  
  /* Initialize the DMA_PeripheralInc member */
  DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 800f8d4:	2300      	movs	r3, #0
 800f8d6:	623b      	str	r3, [r7, #32]
  
  /* Initialize the DMA_MemoryInc member */
  DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
 800f8d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f8dc:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Initialize the DMA_PeripheralDataSize member */
  DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
 800f8de:	2300      	movs	r3, #0
 800f8e0:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize the DMA_MemoryDataSize member */
  DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
 800f8e2:	2300      	movs	r3, #0
 800f8e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Initialize the DMA_Mode member */
  DMA_InitStructure.DMA_Mode = DMA_Mode_Normal;
 800f8e6:	2300      	movs	r3, #0
 800f8e8:	633b      	str	r3, [r7, #48]	; 0x30
  
  /* Initialize the DMA_Priority member */
  DMA_InitStructure.DMA_Priority = DMA_Priority_Low;
 800f8ea:	2300      	movs	r3, #0
 800f8ec:	637b      	str	r3, [r7, #52]	; 0x34
  
  /* Initialize the DMA_FIFOMode member */
  DMA_InitStructure.DMA_FIFOMode = DMA_FIFOMode_Enable;
 800f8ee:	2304      	movs	r3, #4
 800f8f0:	63bb      	str	r3, [r7, #56]	; 0x38
  
  /* Initialize the DMA_FIFOThreshold member */
  DMA_InitStructure.DMA_FIFOThreshold = DMA_FIFOThreshold_1QuarterFull;
 800f8f2:	2300      	movs	r3, #0
 800f8f4:	63fb      	str	r3, [r7, #60]	; 0x3c
  
  /* Initialize the DMA_MemoryBurst member */
  DMA_InitStructure.DMA_MemoryBurst = DMA_MemoryBurst_Single;
 800f8f6:	2300      	movs	r3, #0
 800f8f8:	643b      	str	r3, [r7, #64]	; 0x40
  
  /* Initialize the DMA_PeripheralBurst member */
  DMA_InitStructure.DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
 800f8fa:	2300      	movs	r3, #0
 800f8fc:	647b      	str	r3, [r7, #68]	; 0x44
  
  /* If using DMA for Reception */
  if (Direction == IOE_DMA_RX)
 800f8fe:	79fb      	ldrb	r3, [r7, #7]
 800f900:	2b01      	cmp	r3, #1
 800f902:	d10d      	bne.n	800f920 <IOE_DMA_Config+0x70>
  {    
    /* Initialize the DMA_DIR member */
    DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralToMemory;
 800f904:	2300      	movs	r3, #0
 800f906:	61bb      	str	r3, [r7, #24]
    
    /* Initialize the DMA_BufferSize member */
    DMA_InitStructure.DMA_BufferSize = 2;
 800f908:	2302      	movs	r3, #2
 800f90a:	61fb      	str	r3, [r7, #28]
    
    DMA_DeInit(IOE_DMA_RX_STREAM);
 800f90c:	480f      	ldr	r0, [pc, #60]	; (800f94c <IOE_DMA_Config+0x9c>)
 800f90e:	f7f4 f937 	bl	8003b80 <DMA_DeInit>
    
    DMA_Init(IOE_DMA_RX_STREAM, &DMA_InitStructure);
 800f912:	f107 030c 	add.w	r3, r7, #12
 800f916:	4619      	mov	r1, r3
 800f918:	480c      	ldr	r0, [pc, #48]	; (800f94c <IOE_DMA_Config+0x9c>)
 800f91a:	f7f4 fa05 	bl	8003d28 <DMA_Init>
    
    DMA_DeInit(IOE_DMA_TX_STREAM);
    
    DMA_Init(IOE_DMA_TX_STREAM, &DMA_InitStructure);
  }
}
 800f91e:	e00f      	b.n	800f940 <IOE_DMA_Config+0x90>
  else if (Direction == IOE_DMA_TX)
 800f920:	79fb      	ldrb	r3, [r7, #7]
 800f922:	2b00      	cmp	r3, #0
 800f924:	d10c      	bne.n	800f940 <IOE_DMA_Config+0x90>
    DMA_InitStructure.DMA_DIR = DMA_DIR_MemoryToPeripheral;
 800f926:	2340      	movs	r3, #64	; 0x40
 800f928:	61bb      	str	r3, [r7, #24]
    DMA_InitStructure.DMA_BufferSize = 1;
 800f92a:	2301      	movs	r3, #1
 800f92c:	61fb      	str	r3, [r7, #28]
    DMA_DeInit(IOE_DMA_TX_STREAM);
 800f92e:	4808      	ldr	r0, [pc, #32]	; (800f950 <IOE_DMA_Config+0xa0>)
 800f930:	f7f4 f926 	bl	8003b80 <DMA_DeInit>
    DMA_Init(IOE_DMA_TX_STREAM, &DMA_InitStructure);
 800f934:	f107 030c 	add.w	r3, r7, #12
 800f938:	4619      	mov	r1, r3
 800f93a:	4805      	ldr	r0, [pc, #20]	; (800f950 <IOE_DMA_Config+0xa0>)
 800f93c:	f7f4 f9f4 	bl	8003d28 <DMA_Init>
}
 800f940:	bf00      	nop
 800f942:	3748      	adds	r7, #72	; 0x48
 800f944:	46bd      	mov	sp, r7
 800f946:	bd80      	pop	{r7, pc}
 800f948:	40005c10 	.word	0x40005c10
 800f94c:	40026010 	.word	0x40026010
 800f950:	400260a0 	.word	0x400260a0

0800f954 <I2C_WriteDeviceRegister>:
  * @param  RegisterAddr: The target register address
  * @param  RegisterValue: The target register value to be written 
  * @retval IOE_OK: if all operations are OK. Other value if error.
  */
uint8_t I2C_WriteDeviceRegister(uint8_t RegisterAddr, uint8_t RegisterValue)
{
 800f954:	b580      	push	{r7, lr}
 800f956:	b084      	sub	sp, #16
 800f958:	af00      	add	r7, sp, #0
 800f95a:	4603      	mov	r3, r0
 800f95c:	460a      	mov	r2, r1
 800f95e:	71fb      	strb	r3, [r7, #7]
 800f960:	4613      	mov	r3, r2
 800f962:	71bb      	strb	r3, [r7, #6]
  uint32_t read_verif = 0;
 800f964:	2300      	movs	r3, #0
 800f966:	60fb      	str	r3, [r7, #12]

  /* Begin the configuration sequence */
  I2C_GenerateSTART(IOE_I2C, ENABLE);
 800f968:	2101      	movs	r1, #1
 800f96a:	484c      	ldr	r0, [pc, #304]	; (800fa9c <I2C_WriteDeviceRegister+0x148>)
 800f96c:	f7f7 f93d 	bl	8006bea <I2C_GenerateSTART>

  /* Test on EV5 and clear it */
  IOE_TimeOut = TIMEOUT_MAX;
 800f970:	4b4b      	ldr	r3, [pc, #300]	; (800faa0 <I2C_WriteDeviceRegister+0x14c>)
 800f972:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800f976:	601a      	str	r2, [r3, #0]
  while (!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_SB))
 800f978:	e00a      	b.n	800f990 <I2C_WriteDeviceRegister+0x3c>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
 800f97a:	4b49      	ldr	r3, [pc, #292]	; (800faa0 <I2C_WriteDeviceRegister+0x14c>)
 800f97c:	681b      	ldr	r3, [r3, #0]
 800f97e:	1e5a      	subs	r2, r3, #1
 800f980:	4947      	ldr	r1, [pc, #284]	; (800faa0 <I2C_WriteDeviceRegister+0x14c>)
 800f982:	600a      	str	r2, [r1, #0]
 800f984:	2b00      	cmp	r3, #0
 800f986:	d103      	bne.n	800f990 <I2C_WriteDeviceRegister+0x3c>
 800f988:	f000 fa6e 	bl	800fe68 <IOE_TimeoutUserCallback>
 800f98c:	4603      	mov	r3, r0
 800f98e:	e080      	b.n	800fa92 <I2C_WriteDeviceRegister+0x13e>
  while (!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_SB))
 800f990:	4944      	ldr	r1, [pc, #272]	; (800faa4 <I2C_WriteDeviceRegister+0x150>)
 800f992:	4842      	ldr	r0, [pc, #264]	; (800fa9c <I2C_WriteDeviceRegister+0x148>)
 800f994:	f7f7 fc2a 	bl	80071ec <I2C_GetFlagStatus>
 800f998:	4603      	mov	r3, r0
 800f99a:	2b00      	cmp	r3, #0
 800f99c:	d0ed      	beq.n	800f97a <I2C_WriteDeviceRegister+0x26>
  }

  /* Transmit the slave address and enable writing operation */
  I2C_Send7bitAddress(IOE_I2C, IOE_ADDR, I2C_Direction_Transmitter);
 800f99e:	2200      	movs	r2, #0
 800f9a0:	2182      	movs	r1, #130	; 0x82
 800f9a2:	483e      	ldr	r0, [pc, #248]	; (800fa9c <I2C_WriteDeviceRegister+0x148>)
 800f9a4:	f7f7 f961 	bl	8006c6a <I2C_Send7bitAddress>
  
  /* Test on EV6 and clear it */
  IOE_TimeOut = TIMEOUT_MAX;  
 800f9a8:	4b3d      	ldr	r3, [pc, #244]	; (800faa0 <I2C_WriteDeviceRegister+0x14c>)
 800f9aa:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800f9ae:	601a      	str	r2, [r3, #0]
  while (!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_ADDR))
 800f9b0:	e00a      	b.n	800f9c8 <I2C_WriteDeviceRegister+0x74>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
 800f9b2:	4b3b      	ldr	r3, [pc, #236]	; (800faa0 <I2C_WriteDeviceRegister+0x14c>)
 800f9b4:	681b      	ldr	r3, [r3, #0]
 800f9b6:	1e5a      	subs	r2, r3, #1
 800f9b8:	4939      	ldr	r1, [pc, #228]	; (800faa0 <I2C_WriteDeviceRegister+0x14c>)
 800f9ba:	600a      	str	r2, [r1, #0]
 800f9bc:	2b00      	cmp	r3, #0
 800f9be:	d103      	bne.n	800f9c8 <I2C_WriteDeviceRegister+0x74>
 800f9c0:	f000 fa52 	bl	800fe68 <IOE_TimeoutUserCallback>
 800f9c4:	4603      	mov	r3, r0
 800f9c6:	e064      	b.n	800fa92 <I2C_WriteDeviceRegister+0x13e>
  while (!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_ADDR))
 800f9c8:	4937      	ldr	r1, [pc, #220]	; (800faa8 <I2C_WriteDeviceRegister+0x154>)
 800f9ca:	4834      	ldr	r0, [pc, #208]	; (800fa9c <I2C_WriteDeviceRegister+0x148>)
 800f9cc:	f7f7 fc0e 	bl	80071ec <I2C_GetFlagStatus>
 800f9d0:	4603      	mov	r3, r0
 800f9d2:	2b00      	cmp	r3, #0
 800f9d4:	d0ed      	beq.n	800f9b2 <I2C_WriteDeviceRegister+0x5e>
  }
  
  /* Read status register 2 to clear ADDR flag */
  IOE_I2C->SR2;
 800f9d6:	4b31      	ldr	r3, [pc, #196]	; (800fa9c <I2C_WriteDeviceRegister+0x148>)
 800f9d8:	8b1b      	ldrh	r3, [r3, #24]
  
  /* Test on EV8_1 and clear it */
  IOE_TimeOut = TIMEOUT_MAX;
 800f9da:	4b31      	ldr	r3, [pc, #196]	; (800faa0 <I2C_WriteDeviceRegister+0x14c>)
 800f9dc:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800f9e0:	601a      	str	r2, [r3, #0]
  while (!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_TXE))
 800f9e2:	e00a      	b.n	800f9fa <I2C_WriteDeviceRegister+0xa6>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
 800f9e4:	4b2e      	ldr	r3, [pc, #184]	; (800faa0 <I2C_WriteDeviceRegister+0x14c>)
 800f9e6:	681b      	ldr	r3, [r3, #0]
 800f9e8:	1e5a      	subs	r2, r3, #1
 800f9ea:	492d      	ldr	r1, [pc, #180]	; (800faa0 <I2C_WriteDeviceRegister+0x14c>)
 800f9ec:	600a      	str	r2, [r1, #0]
 800f9ee:	2b00      	cmp	r3, #0
 800f9f0:	d103      	bne.n	800f9fa <I2C_WriteDeviceRegister+0xa6>
 800f9f2:	f000 fa39 	bl	800fe68 <IOE_TimeoutUserCallback>
 800f9f6:	4603      	mov	r3, r0
 800f9f8:	e04b      	b.n	800fa92 <I2C_WriteDeviceRegister+0x13e>
  while (!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_TXE))
 800f9fa:	492c      	ldr	r1, [pc, #176]	; (800faac <I2C_WriteDeviceRegister+0x158>)
 800f9fc:	4827      	ldr	r0, [pc, #156]	; (800fa9c <I2C_WriteDeviceRegister+0x148>)
 800f9fe:	f7f7 fbf5 	bl	80071ec <I2C_GetFlagStatus>
 800fa02:	4603      	mov	r3, r0
 800fa04:	2b00      	cmp	r3, #0
 800fa06:	d0ed      	beq.n	800f9e4 <I2C_WriteDeviceRegister+0x90>
  }
  
  /* Transmit the first address for r/w operations */
  I2C_SendData(IOE_I2C, RegisterAddr);
 800fa08:	79fb      	ldrb	r3, [r7, #7]
 800fa0a:	4619      	mov	r1, r3
 800fa0c:	4823      	ldr	r0, [pc, #140]	; (800fa9c <I2C_WriteDeviceRegister+0x148>)
 800fa0e:	f7f7 fa91 	bl	8006f34 <I2C_SendData>
  
  /* Test on EV8 and clear it */
  IOE_TimeOut = TIMEOUT_MAX;
 800fa12:	4b23      	ldr	r3, [pc, #140]	; (800faa0 <I2C_WriteDeviceRegister+0x14c>)
 800fa14:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800fa18:	601a      	str	r2, [r3, #0]
  while (!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_TXE))
 800fa1a:	e00a      	b.n	800fa32 <I2C_WriteDeviceRegister+0xde>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
 800fa1c:	4b20      	ldr	r3, [pc, #128]	; (800faa0 <I2C_WriteDeviceRegister+0x14c>)
 800fa1e:	681b      	ldr	r3, [r3, #0]
 800fa20:	1e5a      	subs	r2, r3, #1
 800fa22:	491f      	ldr	r1, [pc, #124]	; (800faa0 <I2C_WriteDeviceRegister+0x14c>)
 800fa24:	600a      	str	r2, [r1, #0]
 800fa26:	2b00      	cmp	r3, #0
 800fa28:	d103      	bne.n	800fa32 <I2C_WriteDeviceRegister+0xde>
 800fa2a:	f000 fa1d 	bl	800fe68 <IOE_TimeoutUserCallback>
 800fa2e:	4603      	mov	r3, r0
 800fa30:	e02f      	b.n	800fa92 <I2C_WriteDeviceRegister+0x13e>
  while (!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_TXE))
 800fa32:	491e      	ldr	r1, [pc, #120]	; (800faac <I2C_WriteDeviceRegister+0x158>)
 800fa34:	4819      	ldr	r0, [pc, #100]	; (800fa9c <I2C_WriteDeviceRegister+0x148>)
 800fa36:	f7f7 fbd9 	bl	80071ec <I2C_GetFlagStatus>
 800fa3a:	4603      	mov	r3, r0
 800fa3c:	2b00      	cmp	r3, #0
 800fa3e:	d0ed      	beq.n	800fa1c <I2C_WriteDeviceRegister+0xc8>
  }
  
  /* Prepare the register value to be sent */
  I2C_SendData(IOE_I2C, RegisterValue);
 800fa40:	79bb      	ldrb	r3, [r7, #6]
 800fa42:	4619      	mov	r1, r3
 800fa44:	4815      	ldr	r0, [pc, #84]	; (800fa9c <I2C_WriteDeviceRegister+0x148>)
 800fa46:	f7f7 fa75 	bl	8006f34 <I2C_SendData>
  
  /* Test on EV8_2 and clear it */
  IOE_TimeOut = TIMEOUT_MAX;
 800fa4a:	4b15      	ldr	r3, [pc, #84]	; (800faa0 <I2C_WriteDeviceRegister+0x14c>)
 800fa4c:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800fa50:	601a      	str	r2, [r3, #0]
  while ((!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_TXE)) || (!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_BTF)))
 800fa52:	e00a      	b.n	800fa6a <I2C_WriteDeviceRegister+0x116>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
 800fa54:	4b12      	ldr	r3, [pc, #72]	; (800faa0 <I2C_WriteDeviceRegister+0x14c>)
 800fa56:	681b      	ldr	r3, [r3, #0]
 800fa58:	1e5a      	subs	r2, r3, #1
 800fa5a:	4911      	ldr	r1, [pc, #68]	; (800faa0 <I2C_WriteDeviceRegister+0x14c>)
 800fa5c:	600a      	str	r2, [r1, #0]
 800fa5e:	2b00      	cmp	r3, #0
 800fa60:	d103      	bne.n	800fa6a <I2C_WriteDeviceRegister+0x116>
 800fa62:	f000 fa01 	bl	800fe68 <IOE_TimeoutUserCallback>
 800fa66:	4603      	mov	r3, r0
 800fa68:	e013      	b.n	800fa92 <I2C_WriteDeviceRegister+0x13e>
  while ((!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_TXE)) || (!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_BTF)))
 800fa6a:	4910      	ldr	r1, [pc, #64]	; (800faac <I2C_WriteDeviceRegister+0x158>)
 800fa6c:	480b      	ldr	r0, [pc, #44]	; (800fa9c <I2C_WriteDeviceRegister+0x148>)
 800fa6e:	f7f7 fbbd 	bl	80071ec <I2C_GetFlagStatus>
 800fa72:	4603      	mov	r3, r0
 800fa74:	2b00      	cmp	r3, #0
 800fa76:	d0ed      	beq.n	800fa54 <I2C_WriteDeviceRegister+0x100>
 800fa78:	490d      	ldr	r1, [pc, #52]	; (800fab0 <I2C_WriteDeviceRegister+0x15c>)
 800fa7a:	4808      	ldr	r0, [pc, #32]	; (800fa9c <I2C_WriteDeviceRegister+0x148>)
 800fa7c:	f7f7 fbb6 	bl	80071ec <I2C_GetFlagStatus>
 800fa80:	4603      	mov	r3, r0
 800fa82:	2b00      	cmp	r3, #0
 800fa84:	d0e6      	beq.n	800fa54 <I2C_WriteDeviceRegister+0x100>
  }
  
  /* End the configuration sequence */
  I2C_GenerateSTOP(IOE_I2C, ENABLE);
 800fa86:	2101      	movs	r1, #1
 800fa88:	4804      	ldr	r0, [pc, #16]	; (800fa9c <I2C_WriteDeviceRegister+0x148>)
 800fa8a:	f7f7 f8ce 	bl	8006c2a <I2C_GenerateSTOP>
    read_verif = 0;
  }
#endif
  
  /* Return the verifying value: 0 (Passed) or 1 (Failed) */
  return read_verif;
 800fa8e:	68fb      	ldr	r3, [r7, #12]
 800fa90:	b2db      	uxtb	r3, r3
  
}
 800fa92:	4618      	mov	r0, r3
 800fa94:	3710      	adds	r7, #16
 800fa96:	46bd      	mov	sp, r7
 800fa98:	bd80      	pop	{r7, pc}
 800fa9a:	bf00      	nop
 800fa9c:	40005c00 	.word	0x40005c00
 800faa0:	200000a4 	.word	0x200000a4
 800faa4:	10000001 	.word	0x10000001
 800faa8:	10000002 	.word	0x10000002
 800faac:	10000080 	.word	0x10000080
 800fab0:	10000004 	.word	0x10000004

0800fab4 <I2C_ReadDeviceRegister>:
  * @brief  Reads a register of the device through I2C without DMA.
  * @param  RegisterAddr: The target register address (between 00x and 0x24)
  * @retval The value of the read register (0xAA if Timeout occurred)   
  */ 
uint8_t I2C_ReadDeviceRegister(uint8_t RegisterAddr)
{
 800fab4:	b580      	push	{r7, lr}
 800fab6:	b084      	sub	sp, #16
 800fab8:	af00      	add	r7, sp, #0
 800faba:	4603      	mov	r3, r0
 800fabc:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0;
 800fabe:	2300      	movs	r3, #0
 800fac0:	73fb      	strb	r3, [r7, #15]
  
  /* Enable the I2C peripheral */
  I2C_GenerateSTART(IOE_I2C, ENABLE);
 800fac2:	2101      	movs	r1, #1
 800fac4:	486b      	ldr	r0, [pc, #428]	; (800fc74 <I2C_ReadDeviceRegister+0x1c0>)
 800fac6:	f7f7 f890 	bl	8006bea <I2C_GenerateSTART>
  
    /* Test on EV5 and clear it */
  IOE_TimeOut = TIMEOUT_MAX;
 800faca:	4b6b      	ldr	r3, [pc, #428]	; (800fc78 <I2C_ReadDeviceRegister+0x1c4>)
 800facc:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800fad0:	601a      	str	r2, [r3, #0]
  while (!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_SB))
 800fad2:	e00a      	b.n	800faea <I2C_ReadDeviceRegister+0x36>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
 800fad4:	4b68      	ldr	r3, [pc, #416]	; (800fc78 <I2C_ReadDeviceRegister+0x1c4>)
 800fad6:	681b      	ldr	r3, [r3, #0]
 800fad8:	1e5a      	subs	r2, r3, #1
 800fada:	4967      	ldr	r1, [pc, #412]	; (800fc78 <I2C_ReadDeviceRegister+0x1c4>)
 800fadc:	600a      	str	r2, [r1, #0]
 800fade:	2b00      	cmp	r3, #0
 800fae0:	d103      	bne.n	800faea <I2C_ReadDeviceRegister+0x36>
 800fae2:	f000 f9c1 	bl	800fe68 <IOE_TimeoutUserCallback>
 800fae6:	4603      	mov	r3, r0
 800fae8:	e0c0      	b.n	800fc6c <I2C_ReadDeviceRegister+0x1b8>
  while (!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_SB))
 800faea:	4964      	ldr	r1, [pc, #400]	; (800fc7c <I2C_ReadDeviceRegister+0x1c8>)
 800faec:	4861      	ldr	r0, [pc, #388]	; (800fc74 <I2C_ReadDeviceRegister+0x1c0>)
 800faee:	f7f7 fb7d 	bl	80071ec <I2C_GetFlagStatus>
 800faf2:	4603      	mov	r3, r0
 800faf4:	2b00      	cmp	r3, #0
 800faf6:	d0ed      	beq.n	800fad4 <I2C_ReadDeviceRegister+0x20>
  }
  /* Disable Acknowledgement */
  I2C_AcknowledgeConfig(IOE_I2C, DISABLE);
 800faf8:	2100      	movs	r1, #0
 800fafa:	485e      	ldr	r0, [pc, #376]	; (800fc74 <I2C_ReadDeviceRegister+0x1c0>)
 800fafc:	f7f7 f8d3 	bl	8006ca6 <I2C_AcknowledgeConfig>
  
  /* Transmit the slave address and enable writing operation */
  I2C_Send7bitAddress(IOE_I2C, IOE_ADDR, I2C_Direction_Transmitter);
 800fb00:	2200      	movs	r2, #0
 800fb02:	2182      	movs	r1, #130	; 0x82
 800fb04:	485b      	ldr	r0, [pc, #364]	; (800fc74 <I2C_ReadDeviceRegister+0x1c0>)
 800fb06:	f7f7 f8b0 	bl	8006c6a <I2C_Send7bitAddress>
  
  /* Test on EV6 and clear it */
  IOE_TimeOut = TIMEOUT_MAX;  
 800fb0a:	4b5b      	ldr	r3, [pc, #364]	; (800fc78 <I2C_ReadDeviceRegister+0x1c4>)
 800fb0c:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800fb10:	601a      	str	r2, [r3, #0]
  while (!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_ADDR))
 800fb12:	e00a      	b.n	800fb2a <I2C_ReadDeviceRegister+0x76>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
 800fb14:	4b58      	ldr	r3, [pc, #352]	; (800fc78 <I2C_ReadDeviceRegister+0x1c4>)
 800fb16:	681b      	ldr	r3, [r3, #0]
 800fb18:	1e5a      	subs	r2, r3, #1
 800fb1a:	4957      	ldr	r1, [pc, #348]	; (800fc78 <I2C_ReadDeviceRegister+0x1c4>)
 800fb1c:	600a      	str	r2, [r1, #0]
 800fb1e:	2b00      	cmp	r3, #0
 800fb20:	d103      	bne.n	800fb2a <I2C_ReadDeviceRegister+0x76>
 800fb22:	f000 f9a1 	bl	800fe68 <IOE_TimeoutUserCallback>
 800fb26:	4603      	mov	r3, r0
 800fb28:	e0a0      	b.n	800fc6c <I2C_ReadDeviceRegister+0x1b8>
  while (!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_ADDR))
 800fb2a:	4955      	ldr	r1, [pc, #340]	; (800fc80 <I2C_ReadDeviceRegister+0x1cc>)
 800fb2c:	4851      	ldr	r0, [pc, #324]	; (800fc74 <I2C_ReadDeviceRegister+0x1c0>)
 800fb2e:	f7f7 fb5d 	bl	80071ec <I2C_GetFlagStatus>
 800fb32:	4603      	mov	r3, r0
 800fb34:	2b00      	cmp	r3, #0
 800fb36:	d0ed      	beq.n	800fb14 <I2C_ReadDeviceRegister+0x60>
  }
  
  /* Read status register 2 to clear ADDR flag */
  IOE_I2C->SR2;
 800fb38:	4b4e      	ldr	r3, [pc, #312]	; (800fc74 <I2C_ReadDeviceRegister+0x1c0>)
 800fb3a:	8b1b      	ldrh	r3, [r3, #24]
  
  /* Test on EV8 and clear it */
  IOE_TimeOut = TIMEOUT_MAX;
 800fb3c:	4b4e      	ldr	r3, [pc, #312]	; (800fc78 <I2C_ReadDeviceRegister+0x1c4>)
 800fb3e:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800fb42:	601a      	str	r2, [r3, #0]
  while (!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_TXE))
 800fb44:	e00a      	b.n	800fb5c <I2C_ReadDeviceRegister+0xa8>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
 800fb46:	4b4c      	ldr	r3, [pc, #304]	; (800fc78 <I2C_ReadDeviceRegister+0x1c4>)
 800fb48:	681b      	ldr	r3, [r3, #0]
 800fb4a:	1e5a      	subs	r2, r3, #1
 800fb4c:	494a      	ldr	r1, [pc, #296]	; (800fc78 <I2C_ReadDeviceRegister+0x1c4>)
 800fb4e:	600a      	str	r2, [r1, #0]
 800fb50:	2b00      	cmp	r3, #0
 800fb52:	d103      	bne.n	800fb5c <I2C_ReadDeviceRegister+0xa8>
 800fb54:	f000 f988 	bl	800fe68 <IOE_TimeoutUserCallback>
 800fb58:	4603      	mov	r3, r0
 800fb5a:	e087      	b.n	800fc6c <I2C_ReadDeviceRegister+0x1b8>
  while (!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_TXE))
 800fb5c:	4949      	ldr	r1, [pc, #292]	; (800fc84 <I2C_ReadDeviceRegister+0x1d0>)
 800fb5e:	4845      	ldr	r0, [pc, #276]	; (800fc74 <I2C_ReadDeviceRegister+0x1c0>)
 800fb60:	f7f7 fb44 	bl	80071ec <I2C_GetFlagStatus>
 800fb64:	4603      	mov	r3, r0
 800fb66:	2b00      	cmp	r3, #0
 800fb68:	d0ed      	beq.n	800fb46 <I2C_ReadDeviceRegister+0x92>
  }
  
  /* Transmit the first address for r/w operations */
  I2C_SendData(IOE_I2C, RegisterAddr);
 800fb6a:	79fb      	ldrb	r3, [r7, #7]
 800fb6c:	4619      	mov	r1, r3
 800fb6e:	4841      	ldr	r0, [pc, #260]	; (800fc74 <I2C_ReadDeviceRegister+0x1c0>)
 800fb70:	f7f7 f9e0 	bl	8006f34 <I2C_SendData>
  
  /* Test on EV8 and clear it */
  IOE_TimeOut = TIMEOUT_MAX;
 800fb74:	4b40      	ldr	r3, [pc, #256]	; (800fc78 <I2C_ReadDeviceRegister+0x1c4>)
 800fb76:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800fb7a:	601a      	str	r2, [r3, #0]
  while ((!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_TXE)) || (!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_BTF)))
 800fb7c:	e00a      	b.n	800fb94 <I2C_ReadDeviceRegister+0xe0>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
 800fb7e:	4b3e      	ldr	r3, [pc, #248]	; (800fc78 <I2C_ReadDeviceRegister+0x1c4>)
 800fb80:	681b      	ldr	r3, [r3, #0]
 800fb82:	1e5a      	subs	r2, r3, #1
 800fb84:	493c      	ldr	r1, [pc, #240]	; (800fc78 <I2C_ReadDeviceRegister+0x1c4>)
 800fb86:	600a      	str	r2, [r1, #0]
 800fb88:	2b00      	cmp	r3, #0
 800fb8a:	d103      	bne.n	800fb94 <I2C_ReadDeviceRegister+0xe0>
 800fb8c:	f000 f96c 	bl	800fe68 <IOE_TimeoutUserCallback>
 800fb90:	4603      	mov	r3, r0
 800fb92:	e06b      	b.n	800fc6c <I2C_ReadDeviceRegister+0x1b8>
  while ((!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_TXE)) || (!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_BTF)))
 800fb94:	493b      	ldr	r1, [pc, #236]	; (800fc84 <I2C_ReadDeviceRegister+0x1d0>)
 800fb96:	4837      	ldr	r0, [pc, #220]	; (800fc74 <I2C_ReadDeviceRegister+0x1c0>)
 800fb98:	f7f7 fb28 	bl	80071ec <I2C_GetFlagStatus>
 800fb9c:	4603      	mov	r3, r0
 800fb9e:	2b00      	cmp	r3, #0
 800fba0:	d0ed      	beq.n	800fb7e <I2C_ReadDeviceRegister+0xca>
 800fba2:	4939      	ldr	r1, [pc, #228]	; (800fc88 <I2C_ReadDeviceRegister+0x1d4>)
 800fba4:	4833      	ldr	r0, [pc, #204]	; (800fc74 <I2C_ReadDeviceRegister+0x1c0>)
 800fba6:	f7f7 fb21 	bl	80071ec <I2C_GetFlagStatus>
 800fbaa:	4603      	mov	r3, r0
 800fbac:	2b00      	cmp	r3, #0
 800fbae:	d0e6      	beq.n	800fb7e <I2C_ReadDeviceRegister+0xca>
  }
  
  /* Regenerate a start condition */
  I2C_GenerateSTART(IOE_I2C, ENABLE);
 800fbb0:	2101      	movs	r1, #1
 800fbb2:	4830      	ldr	r0, [pc, #192]	; (800fc74 <I2C_ReadDeviceRegister+0x1c0>)
 800fbb4:	f7f7 f819 	bl	8006bea <I2C_GenerateSTART>
  
  /* Test on EV5 and clear it */
  IOE_TimeOut = TIMEOUT_MAX;
 800fbb8:	4b2f      	ldr	r3, [pc, #188]	; (800fc78 <I2C_ReadDeviceRegister+0x1c4>)
 800fbba:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800fbbe:	601a      	str	r2, [r3, #0]
  while (!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_SB))
 800fbc0:	e00a      	b.n	800fbd8 <I2C_ReadDeviceRegister+0x124>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
 800fbc2:	4b2d      	ldr	r3, [pc, #180]	; (800fc78 <I2C_ReadDeviceRegister+0x1c4>)
 800fbc4:	681b      	ldr	r3, [r3, #0]
 800fbc6:	1e5a      	subs	r2, r3, #1
 800fbc8:	492b      	ldr	r1, [pc, #172]	; (800fc78 <I2C_ReadDeviceRegister+0x1c4>)
 800fbca:	600a      	str	r2, [r1, #0]
 800fbcc:	2b00      	cmp	r3, #0
 800fbce:	d103      	bne.n	800fbd8 <I2C_ReadDeviceRegister+0x124>
 800fbd0:	f000 f94a 	bl	800fe68 <IOE_TimeoutUserCallback>
 800fbd4:	4603      	mov	r3, r0
 800fbd6:	e049      	b.n	800fc6c <I2C_ReadDeviceRegister+0x1b8>
  while (!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_SB))
 800fbd8:	4928      	ldr	r1, [pc, #160]	; (800fc7c <I2C_ReadDeviceRegister+0x1c8>)
 800fbda:	4826      	ldr	r0, [pc, #152]	; (800fc74 <I2C_ReadDeviceRegister+0x1c0>)
 800fbdc:	f7f7 fb06 	bl	80071ec <I2C_GetFlagStatus>
 800fbe0:	4603      	mov	r3, r0
 800fbe2:	2b00      	cmp	r3, #0
 800fbe4:	d0ed      	beq.n	800fbc2 <I2C_ReadDeviceRegister+0x10e>
  }
  
  /* Transmit the slave address and enable writing operation */
  I2C_Send7bitAddress(IOE_I2C, IOE_ADDR, I2C_Direction_Receiver);
 800fbe6:	2201      	movs	r2, #1
 800fbe8:	2182      	movs	r1, #130	; 0x82
 800fbea:	4822      	ldr	r0, [pc, #136]	; (800fc74 <I2C_ReadDeviceRegister+0x1c0>)
 800fbec:	f7f7 f83d 	bl	8006c6a <I2C_Send7bitAddress>
  
  /* Test on EV6 and clear it */
  IOE_TimeOut = TIMEOUT_MAX;
 800fbf0:	4b21      	ldr	r3, [pc, #132]	; (800fc78 <I2C_ReadDeviceRegister+0x1c4>)
 800fbf2:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800fbf6:	601a      	str	r2, [r3, #0]
  while (!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_ADDR))
 800fbf8:	e00a      	b.n	800fc10 <I2C_ReadDeviceRegister+0x15c>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
 800fbfa:	4b1f      	ldr	r3, [pc, #124]	; (800fc78 <I2C_ReadDeviceRegister+0x1c4>)
 800fbfc:	681b      	ldr	r3, [r3, #0]
 800fbfe:	1e5a      	subs	r2, r3, #1
 800fc00:	491d      	ldr	r1, [pc, #116]	; (800fc78 <I2C_ReadDeviceRegister+0x1c4>)
 800fc02:	600a      	str	r2, [r1, #0]
 800fc04:	2b00      	cmp	r3, #0
 800fc06:	d103      	bne.n	800fc10 <I2C_ReadDeviceRegister+0x15c>
 800fc08:	f000 f92e 	bl	800fe68 <IOE_TimeoutUserCallback>
 800fc0c:	4603      	mov	r3, r0
 800fc0e:	e02d      	b.n	800fc6c <I2C_ReadDeviceRegister+0x1b8>
  while (!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_ADDR))
 800fc10:	491b      	ldr	r1, [pc, #108]	; (800fc80 <I2C_ReadDeviceRegister+0x1cc>)
 800fc12:	4818      	ldr	r0, [pc, #96]	; (800fc74 <I2C_ReadDeviceRegister+0x1c0>)
 800fc14:	f7f7 faea 	bl	80071ec <I2C_GetFlagStatus>
 800fc18:	4603      	mov	r3, r0
 800fc1a:	2b00      	cmp	r3, #0
 800fc1c:	d0ed      	beq.n	800fbfa <I2C_ReadDeviceRegister+0x146>
  }
  
    /* Read status register 2 to clear ADDR flag */
  IOE_I2C->SR2;
 800fc1e:	4b15      	ldr	r3, [pc, #84]	; (800fc74 <I2C_ReadDeviceRegister+0x1c0>)
 800fc20:	8b1b      	ldrh	r3, [r3, #24]
  
  /* Test on EV7 and clear it */
  IOE_TimeOut = TIMEOUT_MAX;
 800fc22:	4b15      	ldr	r3, [pc, #84]	; (800fc78 <I2C_ReadDeviceRegister+0x1c4>)
 800fc24:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800fc28:	601a      	str	r2, [r3, #0]
  while (!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_RXNE))
 800fc2a:	e00a      	b.n	800fc42 <I2C_ReadDeviceRegister+0x18e>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
 800fc2c:	4b12      	ldr	r3, [pc, #72]	; (800fc78 <I2C_ReadDeviceRegister+0x1c4>)
 800fc2e:	681b      	ldr	r3, [r3, #0]
 800fc30:	1e5a      	subs	r2, r3, #1
 800fc32:	4911      	ldr	r1, [pc, #68]	; (800fc78 <I2C_ReadDeviceRegister+0x1c4>)
 800fc34:	600a      	str	r2, [r1, #0]
 800fc36:	2b00      	cmp	r3, #0
 800fc38:	d103      	bne.n	800fc42 <I2C_ReadDeviceRegister+0x18e>
 800fc3a:	f000 f915 	bl	800fe68 <IOE_TimeoutUserCallback>
 800fc3e:	4603      	mov	r3, r0
 800fc40:	e014      	b.n	800fc6c <I2C_ReadDeviceRegister+0x1b8>
  while (!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_RXNE))
 800fc42:	4912      	ldr	r1, [pc, #72]	; (800fc8c <I2C_ReadDeviceRegister+0x1d8>)
 800fc44:	480b      	ldr	r0, [pc, #44]	; (800fc74 <I2C_ReadDeviceRegister+0x1c0>)
 800fc46:	f7f7 fad1 	bl	80071ec <I2C_GetFlagStatus>
 800fc4a:	4603      	mov	r3, r0
 800fc4c:	2b00      	cmp	r3, #0
 800fc4e:	d0ed      	beq.n	800fc2c <I2C_ReadDeviceRegister+0x178>
  }
  
  /* End the configuration sequence */
  I2C_GenerateSTOP(IOE_I2C, ENABLE);
 800fc50:	2101      	movs	r1, #1
 800fc52:	4808      	ldr	r0, [pc, #32]	; (800fc74 <I2C_ReadDeviceRegister+0x1c0>)
 800fc54:	f7f6 ffe9 	bl	8006c2a <I2C_GenerateSTOP>
  
  /* Load the register value */
  tmp = I2C_ReceiveData(IOE_I2C);
 800fc58:	4806      	ldr	r0, [pc, #24]	; (800fc74 <I2C_ReadDeviceRegister+0x1c0>)
 800fc5a:	f7f7 f97b 	bl	8006f54 <I2C_ReceiveData>
 800fc5e:	4603      	mov	r3, r0
 800fc60:	73fb      	strb	r3, [r7, #15]
  
  /* Enable Acknowledgement */
  I2C_AcknowledgeConfig(IOE_I2C, ENABLE);
 800fc62:	2101      	movs	r1, #1
 800fc64:	4803      	ldr	r0, [pc, #12]	; (800fc74 <I2C_ReadDeviceRegister+0x1c0>)
 800fc66:	f7f7 f81e 	bl	8006ca6 <I2C_AcknowledgeConfig>
  
  /* Return the read value */
  return tmp;
 800fc6a:	7bfb      	ldrb	r3, [r7, #15]
  
}
 800fc6c:	4618      	mov	r0, r3
 800fc6e:	3710      	adds	r7, #16
 800fc70:	46bd      	mov	sp, r7
 800fc72:	bd80      	pop	{r7, pc}
 800fc74:	40005c00 	.word	0x40005c00
 800fc78:	200000a4 	.word	0x200000a4
 800fc7c:	10000001 	.word	0x10000001
 800fc80:	10000002 	.word	0x10000002
 800fc84:	10000080 	.word	0x10000080
 800fc88:	10000004 	.word	0x10000004
 800fc8c:	10000040 	.word	0x10000040

0800fc90 <I2C_ReadDataBuffer>:
  * @brief  Reads a buffer of 2 bytes from the device registers.
  * @param  RegisterAddr: The target register adress (between 00x and 0x24)
  * @retval The data in the buffer containing the two returned bytes (in halfword).   
  */
uint16_t I2C_ReadDataBuffer(uint32_t RegisterAddr)
{
 800fc90:	b580      	push	{r7, lr}
 800fc92:	b084      	sub	sp, #16
 800fc94:	af00      	add	r7, sp, #0
 800fc96:	6078      	str	r0, [r7, #4]
  uint8_t IOE_BufferRX[2] = {0x00, 0x00};  
 800fc98:	2300      	movs	r3, #0
 800fc9a:	733b      	strb	r3, [r7, #12]
 800fc9c:	2300      	movs	r3, #0
 800fc9e:	737b      	strb	r3, [r7, #13]
  
  /* Enable the I2C peripheral */
  I2C_GenerateSTART(IOE_I2C, ENABLE);
 800fca0:	2101      	movs	r1, #1
 800fca2:	486b      	ldr	r0, [pc, #428]	; (800fe50 <I2C_ReadDataBuffer+0x1c0>)
 800fca4:	f7f6 ffa1 	bl	8006bea <I2C_GenerateSTART>
 
  /* Test on EV5 and clear it */
  IOE_TimeOut = TIMEOUT_MAX;
 800fca8:	4b6a      	ldr	r3, [pc, #424]	; (800fe54 <I2C_ReadDataBuffer+0x1c4>)
 800fcaa:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800fcae:	601a      	str	r2, [r3, #0]
  while (!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_SB))
 800fcb0:	e00b      	b.n	800fcca <I2C_ReadDataBuffer+0x3a>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
 800fcb2:	4b68      	ldr	r3, [pc, #416]	; (800fe54 <I2C_ReadDataBuffer+0x1c4>)
 800fcb4:	681b      	ldr	r3, [r3, #0]
 800fcb6:	1e5a      	subs	r2, r3, #1
 800fcb8:	4966      	ldr	r1, [pc, #408]	; (800fe54 <I2C_ReadDataBuffer+0x1c4>)
 800fcba:	600a      	str	r2, [r1, #0]
 800fcbc:	2b00      	cmp	r3, #0
 800fcbe:	d104      	bne.n	800fcca <I2C_ReadDataBuffer+0x3a>
 800fcc0:	f000 f8d2 	bl	800fe68 <IOE_TimeoutUserCallback>
 800fcc4:	4603      	mov	r3, r0
 800fcc6:	b29b      	uxth	r3, r3
 800fcc8:	e0be      	b.n	800fe48 <I2C_ReadDataBuffer+0x1b8>
  while (!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_SB))
 800fcca:	4963      	ldr	r1, [pc, #396]	; (800fe58 <I2C_ReadDataBuffer+0x1c8>)
 800fccc:	4860      	ldr	r0, [pc, #384]	; (800fe50 <I2C_ReadDataBuffer+0x1c0>)
 800fcce:	f7f7 fa8d 	bl	80071ec <I2C_GetFlagStatus>
 800fcd2:	4603      	mov	r3, r0
 800fcd4:	2b00      	cmp	r3, #0
 800fcd6:	d0ec      	beq.n	800fcb2 <I2C_ReadDataBuffer+0x22>
  }
   
  /* Send device address for write */
  I2C_Send7bitAddress(IOE_I2C, IOE_ADDR, I2C_Direction_Transmitter);
 800fcd8:	2200      	movs	r2, #0
 800fcda:	2182      	movs	r1, #130	; 0x82
 800fcdc:	485c      	ldr	r0, [pc, #368]	; (800fe50 <I2C_ReadDataBuffer+0x1c0>)
 800fcde:	f7f6 ffc4 	bl	8006c6a <I2C_Send7bitAddress>
  
  /* Test on EV6 and clear it */
  IOE_TimeOut = TIMEOUT_MAX;  
 800fce2:	4b5c      	ldr	r3, [pc, #368]	; (800fe54 <I2C_ReadDataBuffer+0x1c4>)
 800fce4:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800fce8:	601a      	str	r2, [r3, #0]
  while (!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_ADDR))
 800fcea:	e00b      	b.n	800fd04 <I2C_ReadDataBuffer+0x74>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
 800fcec:	4b59      	ldr	r3, [pc, #356]	; (800fe54 <I2C_ReadDataBuffer+0x1c4>)
 800fcee:	681b      	ldr	r3, [r3, #0]
 800fcf0:	1e5a      	subs	r2, r3, #1
 800fcf2:	4958      	ldr	r1, [pc, #352]	; (800fe54 <I2C_ReadDataBuffer+0x1c4>)
 800fcf4:	600a      	str	r2, [r1, #0]
 800fcf6:	2b00      	cmp	r3, #0
 800fcf8:	d104      	bne.n	800fd04 <I2C_ReadDataBuffer+0x74>
 800fcfa:	f000 f8b5 	bl	800fe68 <IOE_TimeoutUserCallback>
 800fcfe:	4603      	mov	r3, r0
 800fd00:	b29b      	uxth	r3, r3
 800fd02:	e0a1      	b.n	800fe48 <I2C_ReadDataBuffer+0x1b8>
  while (!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_ADDR))
 800fd04:	4955      	ldr	r1, [pc, #340]	; (800fe5c <I2C_ReadDataBuffer+0x1cc>)
 800fd06:	4852      	ldr	r0, [pc, #328]	; (800fe50 <I2C_ReadDataBuffer+0x1c0>)
 800fd08:	f7f7 fa70 	bl	80071ec <I2C_GetFlagStatus>
 800fd0c:	4603      	mov	r3, r0
 800fd0e:	2b00      	cmp	r3, #0
 800fd10:	d0ec      	beq.n	800fcec <I2C_ReadDataBuffer+0x5c>
  }
  
  /* Read status register 2 to clear ADDR flag */
  IOE_I2C->SR2;
 800fd12:	4b4f      	ldr	r3, [pc, #316]	; (800fe50 <I2C_ReadDataBuffer+0x1c0>)
 800fd14:	8b1b      	ldrh	r3, [r3, #24]
  
  /* Test on EV8 and clear it */
  IOE_TimeOut = TIMEOUT_MAX;
 800fd16:	4b4f      	ldr	r3, [pc, #316]	; (800fe54 <I2C_ReadDataBuffer+0x1c4>)
 800fd18:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800fd1c:	601a      	str	r2, [r3, #0]
  while (!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_TXE))
 800fd1e:	e00b      	b.n	800fd38 <I2C_ReadDataBuffer+0xa8>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
 800fd20:	4b4c      	ldr	r3, [pc, #304]	; (800fe54 <I2C_ReadDataBuffer+0x1c4>)
 800fd22:	681b      	ldr	r3, [r3, #0]
 800fd24:	1e5a      	subs	r2, r3, #1
 800fd26:	494b      	ldr	r1, [pc, #300]	; (800fe54 <I2C_ReadDataBuffer+0x1c4>)
 800fd28:	600a      	str	r2, [r1, #0]
 800fd2a:	2b00      	cmp	r3, #0
 800fd2c:	d104      	bne.n	800fd38 <I2C_ReadDataBuffer+0xa8>
 800fd2e:	f000 f89b 	bl	800fe68 <IOE_TimeoutUserCallback>
 800fd32:	4603      	mov	r3, r0
 800fd34:	b29b      	uxth	r3, r3
 800fd36:	e087      	b.n	800fe48 <I2C_ReadDataBuffer+0x1b8>
  while (!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_TXE))
 800fd38:	4949      	ldr	r1, [pc, #292]	; (800fe60 <I2C_ReadDataBuffer+0x1d0>)
 800fd3a:	4845      	ldr	r0, [pc, #276]	; (800fe50 <I2C_ReadDataBuffer+0x1c0>)
 800fd3c:	f7f7 fa56 	bl	80071ec <I2C_GetFlagStatus>
 800fd40:	4603      	mov	r3, r0
 800fd42:	2b00      	cmp	r3, #0
 800fd44:	d0ec      	beq.n	800fd20 <I2C_ReadDataBuffer+0x90>
  }
  
  /* Send the device's internal address to write to */
  I2C_SendData(IOE_I2C, RegisterAddr);  
 800fd46:	687b      	ldr	r3, [r7, #4]
 800fd48:	b2db      	uxtb	r3, r3
 800fd4a:	4619      	mov	r1, r3
 800fd4c:	4840      	ldr	r0, [pc, #256]	; (800fe50 <I2C_ReadDataBuffer+0x1c0>)
 800fd4e:	f7f7 f8f1 	bl	8006f34 <I2C_SendData>
    
  /* Send START condition a second time */  
  I2C_GenerateSTART(IOE_I2C, ENABLE);
 800fd52:	2101      	movs	r1, #1
 800fd54:	483e      	ldr	r0, [pc, #248]	; (800fe50 <I2C_ReadDataBuffer+0x1c0>)
 800fd56:	f7f6 ff48 	bl	8006bea <I2C_GenerateSTART>
  
  /* Test on EV5 and clear it */
  IOE_TimeOut = TIMEOUT_MAX;
 800fd5a:	4b3e      	ldr	r3, [pc, #248]	; (800fe54 <I2C_ReadDataBuffer+0x1c4>)
 800fd5c:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800fd60:	601a      	str	r2, [r3, #0]
  while (!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_SB))
 800fd62:	e00b      	b.n	800fd7c <I2C_ReadDataBuffer+0xec>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
 800fd64:	4b3b      	ldr	r3, [pc, #236]	; (800fe54 <I2C_ReadDataBuffer+0x1c4>)
 800fd66:	681b      	ldr	r3, [r3, #0]
 800fd68:	1e5a      	subs	r2, r3, #1
 800fd6a:	493a      	ldr	r1, [pc, #232]	; (800fe54 <I2C_ReadDataBuffer+0x1c4>)
 800fd6c:	600a      	str	r2, [r1, #0]
 800fd6e:	2b00      	cmp	r3, #0
 800fd70:	d104      	bne.n	800fd7c <I2C_ReadDataBuffer+0xec>
 800fd72:	f000 f879 	bl	800fe68 <IOE_TimeoutUserCallback>
 800fd76:	4603      	mov	r3, r0
 800fd78:	b29b      	uxth	r3, r3
 800fd7a:	e065      	b.n	800fe48 <I2C_ReadDataBuffer+0x1b8>
  while (!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_SB))
 800fd7c:	4936      	ldr	r1, [pc, #216]	; (800fe58 <I2C_ReadDataBuffer+0x1c8>)
 800fd7e:	4834      	ldr	r0, [pc, #208]	; (800fe50 <I2C_ReadDataBuffer+0x1c0>)
 800fd80:	f7f7 fa34 	bl	80071ec <I2C_GetFlagStatus>
 800fd84:	4603      	mov	r3, r0
 800fd86:	2b00      	cmp	r3, #0
 800fd88:	d0ec      	beq.n	800fd64 <I2C_ReadDataBuffer+0xd4>
  }
  
  /* Send IO Expander address for read */
  I2C_Send7bitAddress(IOE_I2C, IOE_ADDR, I2C_Direction_Receiver);
 800fd8a:	2201      	movs	r2, #1
 800fd8c:	2182      	movs	r1, #130	; 0x82
 800fd8e:	4830      	ldr	r0, [pc, #192]	; (800fe50 <I2C_ReadDataBuffer+0x1c0>)
 800fd90:	f7f6 ff6b 	bl	8006c6a <I2C_Send7bitAddress>
  
  /* Test on EV6 and clear it */
  IOE_TimeOut = TIMEOUT_MAX;
 800fd94:	4b2f      	ldr	r3, [pc, #188]	; (800fe54 <I2C_ReadDataBuffer+0x1c4>)
 800fd96:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800fd9a:	601a      	str	r2, [r3, #0]
  while (!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_ADDR))
 800fd9c:	e00b      	b.n	800fdb6 <I2C_ReadDataBuffer+0x126>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
 800fd9e:	4b2d      	ldr	r3, [pc, #180]	; (800fe54 <I2C_ReadDataBuffer+0x1c4>)
 800fda0:	681b      	ldr	r3, [r3, #0]
 800fda2:	1e5a      	subs	r2, r3, #1
 800fda4:	492b      	ldr	r1, [pc, #172]	; (800fe54 <I2C_ReadDataBuffer+0x1c4>)
 800fda6:	600a      	str	r2, [r1, #0]
 800fda8:	2b00      	cmp	r3, #0
 800fdaa:	d104      	bne.n	800fdb6 <I2C_ReadDataBuffer+0x126>
 800fdac:	f000 f85c 	bl	800fe68 <IOE_TimeoutUserCallback>
 800fdb0:	4603      	mov	r3, r0
 800fdb2:	b29b      	uxth	r3, r3
 800fdb4:	e048      	b.n	800fe48 <I2C_ReadDataBuffer+0x1b8>
  while (!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_ADDR))
 800fdb6:	4929      	ldr	r1, [pc, #164]	; (800fe5c <I2C_ReadDataBuffer+0x1cc>)
 800fdb8:	4825      	ldr	r0, [pc, #148]	; (800fe50 <I2C_ReadDataBuffer+0x1c0>)
 800fdba:	f7f7 fa17 	bl	80071ec <I2C_GetFlagStatus>
 800fdbe:	4603      	mov	r3, r0
 800fdc0:	2b00      	cmp	r3, #0
 800fdc2:	d0ec      	beq.n	800fd9e <I2C_ReadDataBuffer+0x10e>
  }
 
  /* Disable Acknowledgement and set Pos bit */
  I2C_AcknowledgeConfig(IOE_I2C, DISABLE);       
 800fdc4:	2100      	movs	r1, #0
 800fdc6:	4822      	ldr	r0, [pc, #136]	; (800fe50 <I2C_ReadDataBuffer+0x1c0>)
 800fdc8:	f7f6 ff6d 	bl	8006ca6 <I2C_AcknowledgeConfig>
  I2C_NACKPositionConfig(IOE_I2C, I2C_NACKPosition_Next);
 800fdcc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800fdd0:	481f      	ldr	r0, [pc, #124]	; (800fe50 <I2C_ReadDataBuffer+0x1c0>)
 800fdd2:	f7f7 f84d 	bl	8006e70 <I2C_NACKPositionConfig>
  
  /* Read status register 2 to clear ADDR flag */
  IOE_I2C->SR2;
 800fdd6:	4b1e      	ldr	r3, [pc, #120]	; (800fe50 <I2C_ReadDataBuffer+0x1c0>)
 800fdd8:	8b1b      	ldrh	r3, [r3, #24]

  /* Test on EV7 and clear it */
  IOE_TimeOut = TIMEOUT_MAX;
 800fdda:	4b1e      	ldr	r3, [pc, #120]	; (800fe54 <I2C_ReadDataBuffer+0x1c4>)
 800fddc:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800fde0:	601a      	str	r2, [r3, #0]
  while (!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_BTF))
 800fde2:	e00b      	b.n	800fdfc <I2C_ReadDataBuffer+0x16c>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
 800fde4:	4b1b      	ldr	r3, [pc, #108]	; (800fe54 <I2C_ReadDataBuffer+0x1c4>)
 800fde6:	681b      	ldr	r3, [r3, #0]
 800fde8:	1e5a      	subs	r2, r3, #1
 800fdea:	491a      	ldr	r1, [pc, #104]	; (800fe54 <I2C_ReadDataBuffer+0x1c4>)
 800fdec:	600a      	str	r2, [r1, #0]
 800fdee:	2b00      	cmp	r3, #0
 800fdf0:	d104      	bne.n	800fdfc <I2C_ReadDataBuffer+0x16c>
 800fdf2:	f000 f839 	bl	800fe68 <IOE_TimeoutUserCallback>
 800fdf6:	4603      	mov	r3, r0
 800fdf8:	b29b      	uxth	r3, r3
 800fdfa:	e025      	b.n	800fe48 <I2C_ReadDataBuffer+0x1b8>
  while (!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_BTF))
 800fdfc:	4919      	ldr	r1, [pc, #100]	; (800fe64 <I2C_ReadDataBuffer+0x1d4>)
 800fdfe:	4814      	ldr	r0, [pc, #80]	; (800fe50 <I2C_ReadDataBuffer+0x1c0>)
 800fe00:	f7f7 f9f4 	bl	80071ec <I2C_GetFlagStatus>
 800fe04:	4603      	mov	r3, r0
 800fe06:	2b00      	cmp	r3, #0
 800fe08:	d0ec      	beq.n	800fde4 <I2C_ReadDataBuffer+0x154>
  }
 
  /* Send STOP Condition */
  I2C_GenerateSTOP(IOE_I2C, ENABLE);
 800fe0a:	2101      	movs	r1, #1
 800fe0c:	4810      	ldr	r0, [pc, #64]	; (800fe50 <I2C_ReadDataBuffer+0x1c0>)
 800fe0e:	f7f6 ff0c 	bl	8006c2a <I2C_GenerateSTOP>
   
  /* Read the first byte from the IO Expander */
  IOE_BufferRX[1] = I2C_ReceiveData(IOE_I2C);
 800fe12:	480f      	ldr	r0, [pc, #60]	; (800fe50 <I2C_ReadDataBuffer+0x1c0>)
 800fe14:	f7f7 f89e 	bl	8006f54 <I2C_ReceiveData>
 800fe18:	4603      	mov	r3, r0
 800fe1a:	737b      	strb	r3, [r7, #13]
    
  /* Read the second byte from the IO Expander */
  IOE_BufferRX[0] = I2C_ReceiveData(IOE_I2C);
 800fe1c:	480c      	ldr	r0, [pc, #48]	; (800fe50 <I2C_ReadDataBuffer+0x1c0>)
 800fe1e:	f7f7 f899 	bl	8006f54 <I2C_ReceiveData>
 800fe22:	4603      	mov	r3, r0
 800fe24:	733b      	strb	r3, [r7, #12]
                                         
  /* Enable Acknowledgement and reset POS bit to be ready for another reception */
  I2C_AcknowledgeConfig(IOE_I2C, ENABLE);
 800fe26:	2101      	movs	r1, #1
 800fe28:	4809      	ldr	r0, [pc, #36]	; (800fe50 <I2C_ReadDataBuffer+0x1c0>)
 800fe2a:	f7f6 ff3c 	bl	8006ca6 <I2C_AcknowledgeConfig>
  I2C_NACKPositionConfig(IOE_I2C, I2C_NACKPosition_Current);
 800fe2e:	f24f 71ff 	movw	r1, #63487	; 0xf7ff
 800fe32:	4807      	ldr	r0, [pc, #28]	; (800fe50 <I2C_ReadDataBuffer+0x1c0>)
 800fe34:	f7f7 f81c 	bl	8006e70 <I2C_NACKPositionConfig>
   
  /* return the data */
  return ((uint16_t) IOE_BufferRX[0] | ((uint16_t)IOE_BufferRX[1]<< 8));
 800fe38:	7b3b      	ldrb	r3, [r7, #12]
 800fe3a:	b21a      	sxth	r2, r3
 800fe3c:	7b7b      	ldrb	r3, [r7, #13]
 800fe3e:	021b      	lsls	r3, r3, #8
 800fe40:	b21b      	sxth	r3, r3
 800fe42:	4313      	orrs	r3, r2
 800fe44:	b21b      	sxth	r3, r3
 800fe46:	b29b      	uxth	r3, r3
}
 800fe48:	4618      	mov	r0, r3
 800fe4a:	3710      	adds	r7, #16
 800fe4c:	46bd      	mov	sp, r7
 800fe4e:	bd80      	pop	{r7, pc}
 800fe50:	40005c00 	.word	0x40005c00
 800fe54:	200000a4 	.word	0x200000a4
 800fe58:	10000001 	.word	0x10000001
 800fe5c:	10000002 	.word	0x10000002
 800fe60:	10000080 	.word	0x10000080
 800fe64:	10000004 	.word	0x10000004

0800fe68 <IOE_TimeoutUserCallback>:
  * @brief  IOE_TIMEOUT_UserCallback
  * @param  None
  * @retval 0
  */
uint8_t IOE_TimeoutUserCallback(void)
{
 800fe68:	b580      	push	{r7, lr}
 800fe6a:	b084      	sub	sp, #16
 800fe6c:	af00      	add	r7, sp, #0
  I2C_InitTypeDef I2C_InitStructure;

  I2C_GenerateSTOP(IOE_I2C, ENABLE);
 800fe6e:	2101      	movs	r1, #1
 800fe70:	4816      	ldr	r0, [pc, #88]	; (800fecc <IOE_TimeoutUserCallback+0x64>)
 800fe72:	f7f6 feda 	bl	8006c2a <I2C_GenerateSTOP>
  I2C_SoftwareResetCmd(IOE_I2C, ENABLE);
 800fe76:	2101      	movs	r1, #1
 800fe78:	4814      	ldr	r0, [pc, #80]	; (800fecc <IOE_TimeoutUserCallback+0x64>)
 800fe7a:	f7f6 ff96 	bl	8006daa <I2C_SoftwareResetCmd>
  I2C_SoftwareResetCmd(IOE_I2C, DISABLE);
 800fe7e:	2100      	movs	r1, #0
 800fe80:	4812      	ldr	r0, [pc, #72]	; (800fecc <IOE_TimeoutUserCallback+0x64>)
 800fe82:	f7f6 ff92 	bl	8006daa <I2C_SoftwareResetCmd>
  
  IOE_GPIO_Config();
 800fe86:	f7ff fca2 	bl	800f7ce <IOE_GPIO_Config>

  /* CODEC_I2C peripheral configuration */
  I2C_DeInit(IOE_I2C);
 800fe8a:	4810      	ldr	r0, [pc, #64]	; (800fecc <IOE_TimeoutUserCallback+0x64>)
 800fe8c:	f7f6 fd30 	bl	80068f0 <I2C_DeInit>
  I2C_InitStructure.I2C_Mode = I2C_Mode_I2C;
 800fe90:	2300      	movs	r3, #0
 800fe92:	80bb      	strh	r3, [r7, #4]
  I2C_InitStructure.I2C_DutyCycle = I2C_DutyCycle_2;
 800fe94:	f64b 73ff 	movw	r3, #49151	; 0xbfff
 800fe98:	80fb      	strh	r3, [r7, #6]
  I2C_InitStructure.I2C_OwnAddress1 = 0x00;
 800fe9a:	2300      	movs	r3, #0
 800fe9c:	813b      	strh	r3, [r7, #8]
  I2C_InitStructure.I2C_Ack = I2C_Ack_Enable;
 800fe9e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800fea2:	817b      	strh	r3, [r7, #10]
  I2C_InitStructure.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 800fea4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800fea8:	81bb      	strh	r3, [r7, #12]
  I2C_InitStructure.I2C_ClockSpeed = I2C_SPEED;
 800feaa:	4b09      	ldr	r3, [pc, #36]	; (800fed0 <IOE_TimeoutUserCallback+0x68>)
 800feac:	603b      	str	r3, [r7, #0]
  
  /* Enable the I2C peripheral */
  I2C_Cmd(IOE_I2C, ENABLE);  
 800feae:	2101      	movs	r1, #1
 800feb0:	4806      	ldr	r0, [pc, #24]	; (800fecc <IOE_TimeoutUserCallback+0x64>)
 800feb2:	f7f6 fe38 	bl	8006b26 <I2C_Cmd>
  I2C_Init(IOE_I2C, &I2C_InitStructure);
 800feb6:	463b      	mov	r3, r7
 800feb8:	4619      	mov	r1, r3
 800feba:	4804      	ldr	r0, [pc, #16]	; (800fecc <IOE_TimeoutUserCallback+0x64>)
 800febc:	f7f6 fd52 	bl	8006964 <I2C_Init>
  
  return 0;
 800fec0:	2300      	movs	r3, #0
}
 800fec2:	4618      	mov	r0, r3
 800fec4:	3710      	adds	r7, #16
 800fec6:	46bd      	mov	sp, r7
 800fec8:	bd80      	pop	{r7, pc}
 800feca:	bf00      	nop
 800fecc:	40005c00 	.word	0x40005c00
 800fed0:	000186a0 	.word	0x000186a0

0800fed4 <delay>:
  * @brief  Inserts a delay time.
  * @param  nCount: specifies the delay time length.
  * @retval None
  */
static void delay(__IO uint32_t nCount)
{
 800fed4:	b480      	push	{r7}
 800fed6:	b085      	sub	sp, #20
 800fed8:	af00      	add	r7, sp, #0
 800feda:	6078      	str	r0, [r7, #4]
  __IO uint32_t index = 0; 
 800fedc:	2300      	movs	r3, #0
 800fede:	60fb      	str	r3, [r7, #12]
  for(index = (100000 * nCount); index != 0; index--)
 800fee0:	687b      	ldr	r3, [r7, #4]
 800fee2:	4a08      	ldr	r2, [pc, #32]	; (800ff04 <delay+0x30>)
 800fee4:	fb02 f303 	mul.w	r3, r2, r3
 800fee8:	60fb      	str	r3, [r7, #12]
 800feea:	e002      	b.n	800fef2 <delay+0x1e>
 800feec:	68fb      	ldr	r3, [r7, #12]
 800feee:	3b01      	subs	r3, #1
 800fef0:	60fb      	str	r3, [r7, #12]
 800fef2:	68fb      	ldr	r3, [r7, #12]
 800fef4:	2b00      	cmp	r3, #0
 800fef6:	d1f9      	bne.n	800feec <delay+0x18>
  {
  }
}
 800fef8:	bf00      	nop
 800fefa:	3714      	adds	r7, #20
 800fefc:	46bd      	mov	sp, r7
 800fefe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff02:	4770      	bx	lr
 800ff04:	000186a0 	.word	0x000186a0

0800ff08 <L3GD20_Init>:
  * @param  L3GD20_InitStruct: pointer to a L3GD20_InitTypeDef structure 
  *         that contains the configuration setting for the L3GD20.
  * @retval None
  */
void L3GD20_Init(L3GD20_InitTypeDef *L3GD20_InitStruct)
{  
 800ff08:	b580      	push	{r7, lr}
 800ff0a:	b084      	sub	sp, #16
 800ff0c:	af00      	add	r7, sp, #0
 800ff0e:	6078      	str	r0, [r7, #4]
  uint8_t ctrl1 = 0x00, ctrl4 = 0x00;
 800ff10:	2300      	movs	r3, #0
 800ff12:	73fb      	strb	r3, [r7, #15]
 800ff14:	2300      	movs	r3, #0
 800ff16:	73bb      	strb	r3, [r7, #14]
  
  /* Configure the low level interface ---------------------------------------*/
  L3GD20_LowLevel_Init();
 800ff18:	f000 f98a 	bl	8010230 <L3GD20_LowLevel_Init>
  
  /* Configure MEMS: data rate, power mode, full scale and axes */
  ctrl1 |= (uint8_t) (L3GD20_InitStruct->Power_Mode | L3GD20_InitStruct->Output_DataRate | \
 800ff1c:	687b      	ldr	r3, [r7, #4]
 800ff1e:	781a      	ldrb	r2, [r3, #0]
 800ff20:	687b      	ldr	r3, [r7, #4]
 800ff22:	785b      	ldrb	r3, [r3, #1]
 800ff24:	4313      	orrs	r3, r2
 800ff26:	b2da      	uxtb	r2, r3
                    L3GD20_InitStruct->Axes_Enable | L3GD20_InitStruct->Band_Width);
 800ff28:	687b      	ldr	r3, [r7, #4]
 800ff2a:	789b      	ldrb	r3, [r3, #2]
  ctrl1 |= (uint8_t) (L3GD20_InitStruct->Power_Mode | L3GD20_InitStruct->Output_DataRate | \
 800ff2c:	4313      	orrs	r3, r2
 800ff2e:	b2da      	uxtb	r2, r3
                    L3GD20_InitStruct->Axes_Enable | L3GD20_InitStruct->Band_Width);
 800ff30:	687b      	ldr	r3, [r7, #4]
 800ff32:	78db      	ldrb	r3, [r3, #3]
  ctrl1 |= (uint8_t) (L3GD20_InitStruct->Power_Mode | L3GD20_InitStruct->Output_DataRate | \
 800ff34:	4313      	orrs	r3, r2
 800ff36:	b2da      	uxtb	r2, r3
 800ff38:	7bfb      	ldrb	r3, [r7, #15]
 800ff3a:	4313      	orrs	r3, r2
 800ff3c:	b2db      	uxtb	r3, r3
 800ff3e:	73fb      	strb	r3, [r7, #15]
  
  ctrl4 |= (uint8_t) (L3GD20_InitStruct->BlockData_Update | L3GD20_InitStruct->Endianness | \
 800ff40:	687b      	ldr	r3, [r7, #4]
 800ff42:	791a      	ldrb	r2, [r3, #4]
 800ff44:	687b      	ldr	r3, [r7, #4]
 800ff46:	795b      	ldrb	r3, [r3, #5]
 800ff48:	4313      	orrs	r3, r2
 800ff4a:	b2da      	uxtb	r2, r3
                    L3GD20_InitStruct->Full_Scale);
 800ff4c:	687b      	ldr	r3, [r7, #4]
 800ff4e:	799b      	ldrb	r3, [r3, #6]
  ctrl4 |= (uint8_t) (L3GD20_InitStruct->BlockData_Update | L3GD20_InitStruct->Endianness | \
 800ff50:	4313      	orrs	r3, r2
 800ff52:	b2da      	uxtb	r2, r3
 800ff54:	7bbb      	ldrb	r3, [r7, #14]
 800ff56:	4313      	orrs	r3, r2
 800ff58:	b2db      	uxtb	r3, r3
 800ff5a:	73bb      	strb	r3, [r7, #14]
                    
  /* Write value to MEMS CTRL_REG1 regsister */
  L3GD20_Write(&ctrl1, L3GD20_CTRL_REG1_ADDR, 1);
 800ff5c:	f107 030f 	add.w	r3, r7, #15
 800ff60:	2201      	movs	r2, #1
 800ff62:	2120      	movs	r1, #32
 800ff64:	4618      	mov	r0, r3
 800ff66:	f000 f8fb 	bl	8010160 <L3GD20_Write>
  
  /* Write value to MEMS CTRL_REG4 regsister */
  L3GD20_Write(&ctrl4, L3GD20_CTRL_REG4_ADDR, 1);
 800ff6a:	f107 030e 	add.w	r3, r7, #14
 800ff6e:	2201      	movs	r2, #1
 800ff70:	2123      	movs	r1, #35	; 0x23
 800ff72:	4618      	mov	r0, r3
 800ff74:	f000 f8f4 	bl	8010160 <L3GD20_Write>
}
 800ff78:	bf00      	nop
 800ff7a:	3710      	adds	r7, #16
 800ff7c:	46bd      	mov	sp, r7
 800ff7e:	bd80      	pop	{r7, pc}

0800ff80 <L3GD20_RebootCmd>:
  * @brief  Reboot memory content of L3GD20
  * @param  None
  * @retval None
  */
void L3GD20_RebootCmd(void)
{
 800ff80:	b580      	push	{r7, lr}
 800ff82:	b082      	sub	sp, #8
 800ff84:	af00      	add	r7, sp, #0
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  L3GD20_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 800ff86:	1dfb      	adds	r3, r7, #7
 800ff88:	2201      	movs	r2, #1
 800ff8a:	2124      	movs	r1, #36	; 0x24
 800ff8c:	4618      	mov	r0, r3
 800ff8e:	f000 f917 	bl	80101c0 <L3GD20_Read>
  
  /* Enable the reboot memory */
  tmpreg |= L3GD20_BOOT_REBOOTMEMORY;
 800ff92:	79fb      	ldrb	r3, [r7, #7]
 800ff94:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ff98:	b2db      	uxtb	r3, r3
 800ff9a:	71fb      	strb	r3, [r7, #7]
  
  /* Write value to MEMS CTRL_REG5 regsister */
  L3GD20_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 800ff9c:	1dfb      	adds	r3, r7, #7
 800ff9e:	2201      	movs	r2, #1
 800ffa0:	2124      	movs	r1, #36	; 0x24
 800ffa2:	4618      	mov	r0, r3
 800ffa4:	f000 f8dc 	bl	8010160 <L3GD20_Write>
}
 800ffa8:	bf00      	nop
 800ffaa:	3708      	adds	r7, #8
 800ffac:	46bd      	mov	sp, r7
 800ffae:	bd80      	pop	{r7, pc}

0800ffb0 <L3GD20_INT1InterruptConfig>:
  * @param  L3GD20_InterruptConfig_TypeDef: pointer to a L3GD20_InterruptConfig_TypeDef 
  *         structure that contains the configuration setting for the L3GD20 Interrupt.
  * @retval None
  */
void L3GD20_INT1InterruptConfig(L3GD20_InterruptConfigTypeDef *L3GD20_IntConfigStruct)
{
 800ffb0:	b580      	push	{r7, lr}
 800ffb2:	b084      	sub	sp, #16
 800ffb4:	af00      	add	r7, sp, #0
 800ffb6:	6078      	str	r0, [r7, #4]
  uint8_t ctrl_cfr = 0x00, ctrl3 = 0x00;
 800ffb8:	2300      	movs	r3, #0
 800ffba:	73fb      	strb	r3, [r7, #15]
 800ffbc:	2300      	movs	r3, #0
 800ffbe:	73bb      	strb	r3, [r7, #14]
  
  /* Read INT1_CFG register */
  L3GD20_Read(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
 800ffc0:	f107 030f 	add.w	r3, r7, #15
 800ffc4:	2201      	movs	r2, #1
 800ffc6:	2130      	movs	r1, #48	; 0x30
 800ffc8:	4618      	mov	r0, r3
 800ffca:	f000 f8f9 	bl	80101c0 <L3GD20_Read>
  
  /* Read CTRL_REG3 register */
  L3GD20_Read(&ctrl3, L3GD20_CTRL_REG3_ADDR, 1);
 800ffce:	f107 030e 	add.w	r3, r7, #14
 800ffd2:	2201      	movs	r2, #1
 800ffd4:	2122      	movs	r1, #34	; 0x22
 800ffd6:	4618      	mov	r0, r3
 800ffd8:	f000 f8f2 	bl	80101c0 <L3GD20_Read>
  
  ctrl_cfr &= 0x80;
 800ffdc:	7bfb      	ldrb	r3, [r7, #15]
 800ffde:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800ffe2:	b2db      	uxtb	r3, r3
 800ffe4:	73fb      	strb	r3, [r7, #15]
  
  ctrl3 &= 0xDF;
 800ffe6:	7bbb      	ldrb	r3, [r7, #14]
 800ffe8:	f023 0320 	bic.w	r3, r3, #32
 800ffec:	b2db      	uxtb	r3, r3
 800ffee:	73bb      	strb	r3, [r7, #14]
  
  /* Configure latch Interrupt request and axe interrupts */                   
  ctrl_cfr |= (uint8_t)(L3GD20_IntConfigStruct->Latch_Request| \
 800fff0:	687b      	ldr	r3, [r7, #4]
 800fff2:	781a      	ldrb	r2, [r3, #0]
                   L3GD20_IntConfigStruct->Interrupt_Axes);
 800fff4:	687b      	ldr	r3, [r7, #4]
 800fff6:	785b      	ldrb	r3, [r3, #1]
  ctrl_cfr |= (uint8_t)(L3GD20_IntConfigStruct->Latch_Request| \
 800fff8:	4313      	orrs	r3, r2
 800fffa:	b2da      	uxtb	r2, r3
 800fffc:	7bfb      	ldrb	r3, [r7, #15]
 800fffe:	4313      	orrs	r3, r2
 8010000:	b2db      	uxtb	r3, r3
 8010002:	73fb      	strb	r3, [r7, #15]
                   
  ctrl3 |= (uint8_t)(L3GD20_IntConfigStruct->Interrupt_ActiveEdge);
 8010004:	687b      	ldr	r3, [r7, #4]
 8010006:	789a      	ldrb	r2, [r3, #2]
 8010008:	7bbb      	ldrb	r3, [r7, #14]
 801000a:	4313      	orrs	r3, r2
 801000c:	b2db      	uxtb	r3, r3
 801000e:	73bb      	strb	r3, [r7, #14]
  
  /* Write value to MEMS INT1_CFG register */
  L3GD20_Write(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
 8010010:	f107 030f 	add.w	r3, r7, #15
 8010014:	2201      	movs	r2, #1
 8010016:	2130      	movs	r1, #48	; 0x30
 8010018:	4618      	mov	r0, r3
 801001a:	f000 f8a1 	bl	8010160 <L3GD20_Write>
  
  /* Write value to MEMS CTRL_REG3 register */
  L3GD20_Write(&ctrl3, L3GD20_CTRL_REG3_ADDR, 1);
 801001e:	f107 030e 	add.w	r3, r7, #14
 8010022:	2201      	movs	r2, #1
 8010024:	2122      	movs	r1, #34	; 0x22
 8010026:	4618      	mov	r0, r3
 8010028:	f000 f89a 	bl	8010160 <L3GD20_Write>
}
 801002c:	bf00      	nop
 801002e:	3710      	adds	r7, #16
 8010030:	46bd      	mov	sp, r7
 8010032:	bd80      	pop	{r7, pc}

08010034 <L3GD20_INT1InterruptCmd>:
  *        @arg L3GD20_INT1INTERRUPT_DISABLE
  *        @arg L3GD20_INT1INTERRUPT_ENABLE    
  * @retval None
  */
void L3GD20_INT1InterruptCmd(uint8_t InterruptState)
{  
 8010034:	b580      	push	{r7, lr}
 8010036:	b084      	sub	sp, #16
 8010038:	af00      	add	r7, sp, #0
 801003a:	4603      	mov	r3, r0
 801003c:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG3 register */
  L3GD20_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 801003e:	f107 030f 	add.w	r3, r7, #15
 8010042:	2201      	movs	r2, #1
 8010044:	2122      	movs	r1, #34	; 0x22
 8010046:	4618      	mov	r0, r3
 8010048:	f000 f8ba 	bl	80101c0 <L3GD20_Read>
                  
  tmpreg &= 0x7F;	
 801004c:	7bfb      	ldrb	r3, [r7, #15]
 801004e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010052:	b2db      	uxtb	r3, r3
 8010054:	73fb      	strb	r3, [r7, #15]
  tmpreg |= InterruptState;
 8010056:	7bfa      	ldrb	r2, [r7, #15]
 8010058:	79fb      	ldrb	r3, [r7, #7]
 801005a:	4313      	orrs	r3, r2
 801005c:	b2db      	uxtb	r3, r3
 801005e:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG3 regsister */
  L3GD20_Write(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8010060:	f107 030f 	add.w	r3, r7, #15
 8010064:	2201      	movs	r2, #1
 8010066:	2122      	movs	r1, #34	; 0x22
 8010068:	4618      	mov	r0, r3
 801006a:	f000 f879 	bl	8010160 <L3GD20_Write>
}
 801006e:	bf00      	nop
 8010070:	3710      	adds	r7, #16
 8010072:	46bd      	mov	sp, r7
 8010074:	bd80      	pop	{r7, pc}

08010076 <L3GD20_INT2InterruptCmd>:
  *        @arg L3GD20_INT2INTERRUPT_DISABLE
  *        @arg L3GD20_INT2INTERRUPT_ENABLE    
  * @retval None
  */
void L3GD20_INT2InterruptCmd(uint8_t InterruptState)
{  
 8010076:	b580      	push	{r7, lr}
 8010078:	b084      	sub	sp, #16
 801007a:	af00      	add	r7, sp, #0
 801007c:	4603      	mov	r3, r0
 801007e:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG3 register */
  L3GD20_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8010080:	f107 030f 	add.w	r3, r7, #15
 8010084:	2201      	movs	r2, #1
 8010086:	2122      	movs	r1, #34	; 0x22
 8010088:	4618      	mov	r0, r3
 801008a:	f000 f899 	bl	80101c0 <L3GD20_Read>
                  
  tmpreg &= 0xF7;	
 801008e:	7bfb      	ldrb	r3, [r7, #15]
 8010090:	f023 0308 	bic.w	r3, r3, #8
 8010094:	b2db      	uxtb	r3, r3
 8010096:	73fb      	strb	r3, [r7, #15]
  tmpreg |= InterruptState;
 8010098:	7bfa      	ldrb	r2, [r7, #15]
 801009a:	79fb      	ldrb	r3, [r7, #7]
 801009c:	4313      	orrs	r3, r2
 801009e:	b2db      	uxtb	r3, r3
 80100a0:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG3 regsister */
  L3GD20_Write(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 80100a2:	f107 030f 	add.w	r3, r7, #15
 80100a6:	2201      	movs	r2, #1
 80100a8:	2122      	movs	r1, #34	; 0x22
 80100aa:	4618      	mov	r0, r3
 80100ac:	f000 f858 	bl	8010160 <L3GD20_Write>
}
 80100b0:	bf00      	nop
 80100b2:	3710      	adds	r7, #16
 80100b4:	46bd      	mov	sp, r7
 80100b6:	bd80      	pop	{r7, pc}

080100b8 <L3GD20_FilterConfig>:
  * @param  L3GD20_FilterStruct: pointer to a L3GD20_FilterConfigTypeDef structure 
  *         that contains the configuration setting for the L3GD20.        
  * @retval None
  */
void L3GD20_FilterConfig(L3GD20_FilterConfigTypeDef *L3GD20_FilterStruct) 
{
 80100b8:	b580      	push	{r7, lr}
 80100ba:	b084      	sub	sp, #16
 80100bc:	af00      	add	r7, sp, #0
 80100be:	6078      	str	r0, [r7, #4]
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  L3GD20_Read(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 80100c0:	f107 030f 	add.w	r3, r7, #15
 80100c4:	2201      	movs	r2, #1
 80100c6:	2121      	movs	r1, #33	; 0x21
 80100c8:	4618      	mov	r0, r3
 80100ca:	f000 f879 	bl	80101c0 <L3GD20_Read>
  
  tmpreg &= 0xC0;
 80100ce:	7bfb      	ldrb	r3, [r7, #15]
 80100d0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80100d4:	b2db      	uxtb	r3, r3
 80100d6:	73fb      	strb	r3, [r7, #15]
  
  /* Configure MEMS: mode and cutoff frquency */
  tmpreg |= (uint8_t) (L3GD20_FilterStruct->HighPassFilter_Mode_Selection |\
 80100d8:	687b      	ldr	r3, [r7, #4]
 80100da:	781a      	ldrb	r2, [r3, #0]
                      L3GD20_FilterStruct->HighPassFilter_CutOff_Frequency);                             
 80100dc:	687b      	ldr	r3, [r7, #4]
 80100de:	785b      	ldrb	r3, [r3, #1]
  tmpreg |= (uint8_t) (L3GD20_FilterStruct->HighPassFilter_Mode_Selection |\
 80100e0:	4313      	orrs	r3, r2
 80100e2:	b2da      	uxtb	r2, r3
 80100e4:	7bfb      	ldrb	r3, [r7, #15]
 80100e6:	4313      	orrs	r3, r2
 80100e8:	b2db      	uxtb	r3, r3
 80100ea:	73fb      	strb	r3, [r7, #15]

  /* Write value to MEMS CTRL_REG2 regsister */
  L3GD20_Write(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 80100ec:	f107 030f 	add.w	r3, r7, #15
 80100f0:	2201      	movs	r2, #1
 80100f2:	2121      	movs	r1, #33	; 0x21
 80100f4:	4618      	mov	r0, r3
 80100f6:	f000 f833 	bl	8010160 <L3GD20_Write>
}
 80100fa:	bf00      	nop
 80100fc:	3710      	adds	r7, #16
 80100fe:	46bd      	mov	sp, r7
 8010100:	bd80      	pop	{r7, pc}

08010102 <L3GD20_FilterCmd>:
  *         @arg: L3GD20_HIGHPASSFILTER_DISABLE 
  *         @arg: L3GD20_HIGHPASSFILTER_ENABLE          
  * @retval None
  */
void L3GD20_FilterCmd(uint8_t HighPassFilterState)
 {
 8010102:	b580      	push	{r7, lr}
 8010104:	b084      	sub	sp, #16
 8010106:	af00      	add	r7, sp, #0
 8010108:	4603      	mov	r3, r0
 801010a:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  L3GD20_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 801010c:	f107 030f 	add.w	r3, r7, #15
 8010110:	2201      	movs	r2, #1
 8010112:	2124      	movs	r1, #36	; 0x24
 8010114:	4618      	mov	r0, r3
 8010116:	f000 f853 	bl	80101c0 <L3GD20_Read>
                  
  tmpreg &= 0xEF;
 801011a:	7bfb      	ldrb	r3, [r7, #15]
 801011c:	f023 0310 	bic.w	r3, r3, #16
 8010120:	b2db      	uxtb	r3, r3
 8010122:	73fb      	strb	r3, [r7, #15]

  tmpreg |= HighPassFilterState;
 8010124:	7bfa      	ldrb	r2, [r7, #15]
 8010126:	79fb      	ldrb	r3, [r7, #7]
 8010128:	4313      	orrs	r3, r2
 801012a:	b2db      	uxtb	r3, r3
 801012c:	73fb      	strb	r3, [r7, #15]

  /* Write value to MEMS CTRL_REG5 regsister */
  L3GD20_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 801012e:	f107 030f 	add.w	r3, r7, #15
 8010132:	2201      	movs	r2, #1
 8010134:	2124      	movs	r1, #36	; 0x24
 8010136:	4618      	mov	r0, r3
 8010138:	f000 f812 	bl	8010160 <L3GD20_Write>
}
 801013c:	bf00      	nop
 801013e:	3710      	adds	r7, #16
 8010140:	46bd      	mov	sp, r7
 8010142:	bd80      	pop	{r7, pc}

08010144 <L3GD20_GetDataStatus>:
  * @brief  Get status for L3GD20 data
  * @param  None         
  * @retval L3GD20 status
  */
uint8_t L3GD20_GetDataStatus(void)
{
 8010144:	b580      	push	{r7, lr}
 8010146:	b082      	sub	sp, #8
 8010148:	af00      	add	r7, sp, #0
  uint8_t tmpreg;
  
  /* Read STATUS_REG register */
  L3GD20_Read(&tmpreg, L3GD20_STATUS_REG_ADDR, 1);
 801014a:	1dfb      	adds	r3, r7, #7
 801014c:	2201      	movs	r2, #1
 801014e:	2127      	movs	r1, #39	; 0x27
 8010150:	4618      	mov	r0, r3
 8010152:	f000 f835 	bl	80101c0 <L3GD20_Read>
                  
  return tmpreg;
 8010156:	79fb      	ldrb	r3, [r7, #7]
}
 8010158:	4618      	mov	r0, r3
 801015a:	3708      	adds	r7, #8
 801015c:	46bd      	mov	sp, r7
 801015e:	bd80      	pop	{r7, pc}

08010160 <L3GD20_Write>:
  * @param  WriteAddr : L3GD20's internal address to write to.
  * @param  NumByteToWrite: Number of bytes to write.
  * @retval None
  */
void L3GD20_Write(uint8_t* pBuffer, uint8_t WriteAddr, uint16_t NumByteToWrite)
{
 8010160:	b580      	push	{r7, lr}
 8010162:	b082      	sub	sp, #8
 8010164:	af00      	add	r7, sp, #0
 8010166:	6078      	str	r0, [r7, #4]
 8010168:	460b      	mov	r3, r1
 801016a:	70fb      	strb	r3, [r7, #3]
 801016c:	4613      	mov	r3, r2
 801016e:	803b      	strh	r3, [r7, #0]
  /* Configure the MS bit: 
       - When 0, the address will remain unchanged in multiple read/write commands.
       - When 1, the address will be auto incremented in multiple read/write commands.
  */
  if(NumByteToWrite > 0x01)
 8010170:	883b      	ldrh	r3, [r7, #0]
 8010172:	2b01      	cmp	r3, #1
 8010174:	d903      	bls.n	801017e <L3GD20_Write+0x1e>
  {
    WriteAddr |= (uint8_t)MULTIPLEBYTE_CMD;
 8010176:	78fb      	ldrb	r3, [r7, #3]
 8010178:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801017c:	70fb      	strb	r3, [r7, #3]
  }
  /* Set chip select Low at the start of the transmission */
  L3GD20_CS_LOW();
 801017e:	2102      	movs	r1, #2
 8010180:	480e      	ldr	r0, [pc, #56]	; (80101bc <L3GD20_Write+0x5c>)
 8010182:	f7f6 fb24 	bl	80067ce <GPIO_ResetBits>
  
  /* Send the Address of the indexed register */
  L3GD20_SendByte(WriteAddr);
 8010186:	78fb      	ldrb	r3, [r7, #3]
 8010188:	4618      	mov	r0, r3
 801018a:	f000 f8ef 	bl	801036c <L3GD20_SendByte>

  /* Send the data that will be written into the device (MSB First) */
  while(NumByteToWrite >= 0x01)
 801018e:	e00a      	b.n	80101a6 <L3GD20_Write+0x46>
  {
    L3GD20_SendByte(*pBuffer);
 8010190:	687b      	ldr	r3, [r7, #4]
 8010192:	781b      	ldrb	r3, [r3, #0]
 8010194:	4618      	mov	r0, r3
 8010196:	f000 f8e9 	bl	801036c <L3GD20_SendByte>
    NumByteToWrite--;
 801019a:	883b      	ldrh	r3, [r7, #0]
 801019c:	3b01      	subs	r3, #1
 801019e:	803b      	strh	r3, [r7, #0]
    pBuffer++;
 80101a0:	687b      	ldr	r3, [r7, #4]
 80101a2:	3301      	adds	r3, #1
 80101a4:	607b      	str	r3, [r7, #4]
  while(NumByteToWrite >= 0x01)
 80101a6:	883b      	ldrh	r3, [r7, #0]
 80101a8:	2b00      	cmp	r3, #0
 80101aa:	d1f1      	bne.n	8010190 <L3GD20_Write+0x30>
  }
  
  /* Set chip select High at the end of the transmission */ 
  L3GD20_CS_HIGH();
 80101ac:	2102      	movs	r1, #2
 80101ae:	4803      	ldr	r0, [pc, #12]	; (80101bc <L3GD20_Write+0x5c>)
 80101b0:	f7f6 fafe 	bl	80067b0 <GPIO_SetBits>
}
 80101b4:	bf00      	nop
 80101b6:	3708      	adds	r7, #8
 80101b8:	46bd      	mov	sp, r7
 80101ba:	bd80      	pop	{r7, pc}
 80101bc:	40020800 	.word	0x40020800

080101c0 <L3GD20_Read>:
  * @param  ReadAddr : L3GD20's internal address to read from.
  * @param  NumByteToRead : number of bytes to read from the L3GD20.
  * @retval None
  */
void L3GD20_Read(uint8_t* pBuffer, uint8_t ReadAddr, uint16_t NumByteToRead)
{  
 80101c0:	b580      	push	{r7, lr}
 80101c2:	b082      	sub	sp, #8
 80101c4:	af00      	add	r7, sp, #0
 80101c6:	6078      	str	r0, [r7, #4]
 80101c8:	460b      	mov	r3, r1
 80101ca:	70fb      	strb	r3, [r7, #3]
 80101cc:	4613      	mov	r3, r2
 80101ce:	803b      	strh	r3, [r7, #0]
  if(NumByteToRead > 0x01)
 80101d0:	883b      	ldrh	r3, [r7, #0]
 80101d2:	2b01      	cmp	r3, #1
 80101d4:	d904      	bls.n	80101e0 <L3GD20_Read+0x20>
  {
    ReadAddr |= (uint8_t)(READWRITE_CMD | MULTIPLEBYTE_CMD);
 80101d6:	78fb      	ldrb	r3, [r7, #3]
 80101d8:	f063 033f 	orn	r3, r3, #63	; 0x3f
 80101dc:	70fb      	strb	r3, [r7, #3]
 80101de:	e003      	b.n	80101e8 <L3GD20_Read+0x28>
  }
  else
  {
    ReadAddr |= (uint8_t)READWRITE_CMD;
 80101e0:	78fb      	ldrb	r3, [r7, #3]
 80101e2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80101e6:	70fb      	strb	r3, [r7, #3]
  }
  /* Set chip select Low at the start of the transmission */
  L3GD20_CS_LOW();
 80101e8:	2102      	movs	r1, #2
 80101ea:	4810      	ldr	r0, [pc, #64]	; (801022c <L3GD20_Read+0x6c>)
 80101ec:	f7f6 faef 	bl	80067ce <GPIO_ResetBits>
  
  /* Send the Address of the indexed register */
  L3GD20_SendByte(ReadAddr);
 80101f0:	78fb      	ldrb	r3, [r7, #3]
 80101f2:	4618      	mov	r0, r3
 80101f4:	f000 f8ba 	bl	801036c <L3GD20_SendByte>
  
  /* Receive the data that will be read from the device (MSB First) */
  while(NumByteToRead > 0x00)
 80101f8:	e00c      	b.n	8010214 <L3GD20_Read+0x54>
  {
    /* Send dummy byte (0x00) to generate the SPI clock to L3GD20 (Slave device) */
    *pBuffer = L3GD20_SendByte(DUMMY_BYTE);
 80101fa:	2000      	movs	r0, #0
 80101fc:	f000 f8b6 	bl	801036c <L3GD20_SendByte>
 8010200:	4603      	mov	r3, r0
 8010202:	461a      	mov	r2, r3
 8010204:	687b      	ldr	r3, [r7, #4]
 8010206:	701a      	strb	r2, [r3, #0]
    NumByteToRead--;
 8010208:	883b      	ldrh	r3, [r7, #0]
 801020a:	3b01      	subs	r3, #1
 801020c:	803b      	strh	r3, [r7, #0]
    pBuffer++;
 801020e:	687b      	ldr	r3, [r7, #4]
 8010210:	3301      	adds	r3, #1
 8010212:	607b      	str	r3, [r7, #4]
  while(NumByteToRead > 0x00)
 8010214:	883b      	ldrh	r3, [r7, #0]
 8010216:	2b00      	cmp	r3, #0
 8010218:	d1ef      	bne.n	80101fa <L3GD20_Read+0x3a>
  }
  
  /* Set chip select High at the end of the transmission */ 
  L3GD20_CS_HIGH();
 801021a:	2102      	movs	r1, #2
 801021c:	4803      	ldr	r0, [pc, #12]	; (801022c <L3GD20_Read+0x6c>)
 801021e:	f7f6 fac7 	bl	80067b0 <GPIO_SetBits>
}  
 8010222:	bf00      	nop
 8010224:	3708      	adds	r7, #8
 8010226:	46bd      	mov	sp, r7
 8010228:	bd80      	pop	{r7, pc}
 801022a:	bf00      	nop
 801022c:	40020800 	.word	0x40020800

08010230 <L3GD20_LowLevel_Init>:
  * @brief  Initializes the low level interface used to drive the L3GD20
  * @param  None
  * @retval None
  */
static void L3GD20_LowLevel_Init(void)
{
 8010230:	b580      	push	{r7, lr}
 8010232:	b088      	sub	sp, #32
 8010234:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  SPI_InitTypeDef  SPI_InitStructure;

  /* Enable the SPI periph */
  RCC_APB2PeriphClockCmd(L3GD20_SPI_CLK, ENABLE);
 8010236:	2101      	movs	r1, #1
 8010238:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 801023c:	f7f8 fbf0 	bl	8008a20 <RCC_APB2PeriphClockCmd>

  /* Enable SCK, MOSI and MISO GPIO clocks */
  RCC_AHB1PeriphClockCmd(L3GD20_SPI_SCK_GPIO_CLK | L3GD20_SPI_MISO_GPIO_CLK | L3GD20_SPI_MOSI_GPIO_CLK, ENABLE);
 8010240:	2101      	movs	r1, #1
 8010242:	2020      	movs	r0, #32
 8010244:	f7f8 fb6c 	bl	8008920 <RCC_AHB1PeriphClockCmd>

  /* Enable CS GPIO clock */
  RCC_AHB1PeriphClockCmd(L3GD20_SPI_CS_GPIO_CLK, ENABLE);
 8010248:	2101      	movs	r1, #1
 801024a:	2004      	movs	r0, #4
 801024c:	f7f8 fb68 	bl	8008920 <RCC_AHB1PeriphClockCmd>
  
  /* Enable INT1 GPIO clock */
  RCC_AHB1PeriphClockCmd(L3GD20_SPI_INT1_GPIO_CLK, ENABLE);
 8010250:	2101      	movs	r1, #1
 8010252:	2001      	movs	r0, #1
 8010254:	f7f8 fb64 	bl	8008920 <RCC_AHB1PeriphClockCmd>
  
  /* Enable INT2 GPIO clock */
  RCC_AHB1PeriphClockCmd(L3GD20_SPI_INT2_GPIO_CLK, ENABLE);
 8010258:	2101      	movs	r1, #1
 801025a:	2001      	movs	r0, #1
 801025c:	f7f8 fb60 	bl	8008920 <RCC_AHB1PeriphClockCmd>

  GPIO_PinAFConfig(L3GD20_SPI_SCK_GPIO_PORT, L3GD20_SPI_SCK_SOURCE, L3GD20_SPI_SCK_AF);
 8010260:	2205      	movs	r2, #5
 8010262:	2107      	movs	r1, #7
 8010264:	483d      	ldr	r0, [pc, #244]	; (801035c <L3GD20_LowLevel_Init+0x12c>)
 8010266:	f7f6 fafa 	bl	800685e <GPIO_PinAFConfig>
  GPIO_PinAFConfig(L3GD20_SPI_MISO_GPIO_PORT, L3GD20_SPI_MISO_SOURCE, L3GD20_SPI_MISO_AF);
 801026a:	2205      	movs	r2, #5
 801026c:	2108      	movs	r1, #8
 801026e:	483b      	ldr	r0, [pc, #236]	; (801035c <L3GD20_LowLevel_Init+0x12c>)
 8010270:	f7f6 faf5 	bl	800685e <GPIO_PinAFConfig>
  GPIO_PinAFConfig(L3GD20_SPI_MOSI_GPIO_PORT, L3GD20_SPI_MOSI_SOURCE, L3GD20_SPI_MOSI_AF);
 8010274:	2205      	movs	r2, #5
 8010276:	2109      	movs	r1, #9
 8010278:	4838      	ldr	r0, [pc, #224]	; (801035c <L3GD20_LowLevel_Init+0x12c>)
 801027a:	f7f6 faf0 	bl	800685e <GPIO_PinAFConfig>

  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 801027e:	2302      	movs	r3, #2
 8010280:	773b      	strb	r3, [r7, #28]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8010282:	2300      	movs	r3, #0
 8010284:	77bb      	strb	r3, [r7, #30]
  GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_DOWN;
 8010286:	2302      	movs	r3, #2
 8010288:	77fb      	strb	r3, [r7, #31]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_25MHz;
 801028a:	2301      	movs	r3, #1
 801028c:	777b      	strb	r3, [r7, #29]

  /* SPI SCK pin configuration */
  GPIO_InitStructure.GPIO_Pin = L3GD20_SPI_SCK_PIN;
 801028e:	2380      	movs	r3, #128	; 0x80
 8010290:	61bb      	str	r3, [r7, #24]
  GPIO_Init(L3GD20_SPI_SCK_GPIO_PORT, &GPIO_InitStructure);
 8010292:	f107 0318 	add.w	r3, r7, #24
 8010296:	4619      	mov	r1, r3
 8010298:	4830      	ldr	r0, [pc, #192]	; (801035c <L3GD20_LowLevel_Init+0x12c>)
 801029a:	f7f6 f971 	bl	8006580 <GPIO_Init>

  /* SPI  MOSI pin configuration */
  GPIO_InitStructure.GPIO_Pin =  L3GD20_SPI_MOSI_PIN;
 801029e:	f44f 7300 	mov.w	r3, #512	; 0x200
 80102a2:	61bb      	str	r3, [r7, #24]
  GPIO_Init(L3GD20_SPI_MOSI_GPIO_PORT, &GPIO_InitStructure);
 80102a4:	f107 0318 	add.w	r3, r7, #24
 80102a8:	4619      	mov	r1, r3
 80102aa:	482c      	ldr	r0, [pc, #176]	; (801035c <L3GD20_LowLevel_Init+0x12c>)
 80102ac:	f7f6 f968 	bl	8006580 <GPIO_Init>

  /* SPI MISO pin configuration */
  GPIO_InitStructure.GPIO_Pin = L3GD20_SPI_MISO_PIN;
 80102b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80102b4:	61bb      	str	r3, [r7, #24]
  GPIO_Init(L3GD20_SPI_MISO_GPIO_PORT, &GPIO_InitStructure);
 80102b6:	f107 0318 	add.w	r3, r7, #24
 80102ba:	4619      	mov	r1, r3
 80102bc:	4827      	ldr	r0, [pc, #156]	; (801035c <L3GD20_LowLevel_Init+0x12c>)
 80102be:	f7f6 f95f 	bl	8006580 <GPIO_Init>

  /* SPI configuration -------------------------------------------------------*/
  SPI_I2S_DeInit(L3GD20_SPI);
 80102c2:	4827      	ldr	r0, [pc, #156]	; (8010360 <L3GD20_LowLevel_Init+0x130>)
 80102c4:	f7fa fe16 	bl	800aef4 <SPI_I2S_DeInit>
  SPI_InitStructure.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 80102c8:	2300      	movs	r3, #0
 80102ca:	80bb      	strh	r3, [r7, #4]
  SPI_InitStructure.SPI_Mode = SPI_Mode_Master;
 80102cc:	f44f 7382 	mov.w	r3, #260	; 0x104
 80102d0:	80fb      	strh	r3, [r7, #6]
  SPI_InitStructure.SPI_DataSize = SPI_DataSize_8b;
 80102d2:	2300      	movs	r3, #0
 80102d4:	813b      	strh	r3, [r7, #8]
  SPI_InitStructure.SPI_CPOL = SPI_CPOL_Low;
 80102d6:	2300      	movs	r3, #0
 80102d8:	817b      	strh	r3, [r7, #10]
  SPI_InitStructure.SPI_CPHA = SPI_CPHA_1Edge;
 80102da:	2300      	movs	r3, #0
 80102dc:	81bb      	strh	r3, [r7, #12]
  SPI_InitStructure.SPI_NSS = SPI_NSS_Soft;
 80102de:	f44f 7300 	mov.w	r3, #512	; 0x200
 80102e2:	81fb      	strh	r3, [r7, #14]
     to verify these constraints:
        - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
        - l3gd20 SPI interface max baudrate is 10MHz for write/read
        - PCLK2 frequency is set to 90 MHz 
    */
  SPI_InitStructure.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_16;
 80102e4:	2318      	movs	r3, #24
 80102e6:	823b      	strh	r3, [r7, #16]
  SPI_InitStructure.SPI_FirstBit = SPI_FirstBit_MSB;
 80102e8:	2300      	movs	r3, #0
 80102ea:	827b      	strh	r3, [r7, #18]
  SPI_InitStructure.SPI_CRCPolynomial = 7;
 80102ec:	2307      	movs	r3, #7
 80102ee:	82bb      	strh	r3, [r7, #20]
  SPI_Init(L3GD20_SPI, &SPI_InitStructure);
 80102f0:	1d3b      	adds	r3, r7, #4
 80102f2:	4619      	mov	r1, r3
 80102f4:	481a      	ldr	r0, [pc, #104]	; (8010360 <L3GD20_LowLevel_Init+0x130>)
 80102f6:	f7fa fe6b 	bl	800afd0 <SPI_Init>

  /* Enable L3GD20_SPI  */
  SPI_Cmd(L3GD20_SPI, ENABLE);
 80102fa:	2101      	movs	r1, #1
 80102fc:	4818      	ldr	r0, [pc, #96]	; (8010360 <L3GD20_LowLevel_Init+0x130>)
 80102fe:	f7fa ffc2 	bl	800b286 <SPI_Cmd>
  
  /* Configure GPIO PIN for Lis Chip select */
  GPIO_InitStructure.GPIO_Pin = L3GD20_SPI_CS_PIN;
 8010302:	2302      	movs	r3, #2
 8010304:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8010306:	2301      	movs	r3, #1
 8010308:	773b      	strb	r3, [r7, #28]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 801030a:	2300      	movs	r3, #0
 801030c:	77bb      	strb	r3, [r7, #30]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_25MHz;
 801030e:	2301      	movs	r3, #1
 8010310:	777b      	strb	r3, [r7, #29]
  GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
 8010312:	2300      	movs	r3, #0
 8010314:	77fb      	strb	r3, [r7, #31]
  GPIO_Init(L3GD20_SPI_CS_GPIO_PORT, &GPIO_InitStructure);
 8010316:	f107 0318 	add.w	r3, r7, #24
 801031a:	4619      	mov	r1, r3
 801031c:	4811      	ldr	r0, [pc, #68]	; (8010364 <L3GD20_LowLevel_Init+0x134>)
 801031e:	f7f6 f92f 	bl	8006580 <GPIO_Init>

  /* Deselect : Chip Select high */
  GPIO_SetBits(L3GD20_SPI_CS_GPIO_PORT, L3GD20_SPI_CS_PIN);
 8010322:	2102      	movs	r1, #2
 8010324:	480f      	ldr	r0, [pc, #60]	; (8010364 <L3GD20_LowLevel_Init+0x134>)
 8010326:	f7f6 fa43 	bl	80067b0 <GPIO_SetBits>
  
  /* Configure GPIO PINs to detect Interrupts */
  GPIO_InitStructure.GPIO_Pin = L3GD20_SPI_INT1_PIN;
 801032a:	2302      	movs	r3, #2
 801032c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 801032e:	2300      	movs	r3, #0
 8010330:	773b      	strb	r3, [r7, #28]
  GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
 8010332:	2300      	movs	r3, #0
 8010334:	77fb      	strb	r3, [r7, #31]
  GPIO_Init(L3GD20_SPI_INT1_GPIO_PORT, &GPIO_InitStructure);
 8010336:	f107 0318 	add.w	r3, r7, #24
 801033a:	4619      	mov	r1, r3
 801033c:	480a      	ldr	r0, [pc, #40]	; (8010368 <L3GD20_LowLevel_Init+0x138>)
 801033e:	f7f6 f91f 	bl	8006580 <GPIO_Init>
  
  GPIO_InitStructure.GPIO_Pin = L3GD20_SPI_INT2_PIN;
 8010342:	2304      	movs	r3, #4
 8010344:	61bb      	str	r3, [r7, #24]
  GPIO_Init(L3GD20_SPI_INT2_GPIO_PORT, &GPIO_InitStructure);
 8010346:	f107 0318 	add.w	r3, r7, #24
 801034a:	4619      	mov	r1, r3
 801034c:	4806      	ldr	r0, [pc, #24]	; (8010368 <L3GD20_LowLevel_Init+0x138>)
 801034e:	f7f6 f917 	bl	8006580 <GPIO_Init>
}  
 8010352:	bf00      	nop
 8010354:	3720      	adds	r7, #32
 8010356:	46bd      	mov	sp, r7
 8010358:	bd80      	pop	{r7, pc}
 801035a:	bf00      	nop
 801035c:	40021400 	.word	0x40021400
 8010360:	40015000 	.word	0x40015000
 8010364:	40020800 	.word	0x40020800
 8010368:	40020000 	.word	0x40020000

0801036c <L3GD20_SendByte>:
  *         from the SPI bus.
  * @param  Byte : Byte send.
  * @retval The received byte value
  */
static uint8_t L3GD20_SendByte(uint8_t byte)
{
 801036c:	b580      	push	{r7, lr}
 801036e:	b082      	sub	sp, #8
 8010370:	af00      	add	r7, sp, #0
 8010372:	4603      	mov	r3, r0
 8010374:	71fb      	strb	r3, [r7, #7]
  /* Loop while DR register in not empty */
  L3GD20Timeout = L3GD20_FLAG_TIMEOUT;
 8010376:	4b1f      	ldr	r3, [pc, #124]	; (80103f4 <L3GD20_SendByte+0x88>)
 8010378:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801037c:	601a      	str	r2, [r3, #0]
  while (SPI_I2S_GetFlagStatus(L3GD20_SPI, SPI_I2S_FLAG_TXE) == RESET)
 801037e:	e00b      	b.n	8010398 <L3GD20_SendByte+0x2c>
  {
    if((L3GD20Timeout--) == 0) return L3GD20_TIMEOUT_UserCallback();
 8010380:	4b1c      	ldr	r3, [pc, #112]	; (80103f4 <L3GD20_SendByte+0x88>)
 8010382:	681b      	ldr	r3, [r3, #0]
 8010384:	1e5a      	subs	r2, r3, #1
 8010386:	491b      	ldr	r1, [pc, #108]	; (80103f4 <L3GD20_SendByte+0x88>)
 8010388:	600a      	str	r2, [r1, #0]
 801038a:	2b00      	cmp	r3, #0
 801038c:	d104      	bne.n	8010398 <L3GD20_SendByte+0x2c>
 801038e:	f000 f835 	bl	80103fc <L3GD20_TIMEOUT_UserCallback>
 8010392:	4603      	mov	r3, r0
 8010394:	b2db      	uxtb	r3, r3
 8010396:	e029      	b.n	80103ec <L3GD20_SendByte+0x80>
  while (SPI_I2S_GetFlagStatus(L3GD20_SPI, SPI_I2S_FLAG_TXE) == RESET)
 8010398:	2102      	movs	r1, #2
 801039a:	4817      	ldr	r0, [pc, #92]	; (80103f8 <L3GD20_SendByte+0x8c>)
 801039c:	f7fb f969 	bl	800b672 <SPI_I2S_GetFlagStatus>
 80103a0:	4603      	mov	r3, r0
 80103a2:	2b00      	cmp	r3, #0
 80103a4:	d0ec      	beq.n	8010380 <L3GD20_SendByte+0x14>
  }
  
  /* Send a Byte through the SPI peripheral */
  SPI_I2S_SendData(L3GD20_SPI, (uint16_t)byte);
 80103a6:	79fb      	ldrb	r3, [r7, #7]
 80103a8:	b29b      	uxth	r3, r3
 80103aa:	4619      	mov	r1, r3
 80103ac:	4812      	ldr	r0, [pc, #72]	; (80103f8 <L3GD20_SendByte+0x8c>)
 80103ae:	f7fb f8a4 	bl	800b4fa <SPI_I2S_SendData>
  /* Wait to receive a Byte */
  L3GD20Timeout = L3GD20_FLAG_TIMEOUT;
 80103b2:	4b10      	ldr	r3, [pc, #64]	; (80103f4 <L3GD20_SendByte+0x88>)
 80103b4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80103b8:	601a      	str	r2, [r3, #0]
  while (SPI_I2S_GetFlagStatus(L3GD20_SPI, SPI_I2S_FLAG_RXNE) == RESET)
 80103ba:	e00b      	b.n	80103d4 <L3GD20_SendByte+0x68>
  {
    if((L3GD20Timeout--) == 0) return L3GD20_TIMEOUT_UserCallback();
 80103bc:	4b0d      	ldr	r3, [pc, #52]	; (80103f4 <L3GD20_SendByte+0x88>)
 80103be:	681b      	ldr	r3, [r3, #0]
 80103c0:	1e5a      	subs	r2, r3, #1
 80103c2:	490c      	ldr	r1, [pc, #48]	; (80103f4 <L3GD20_SendByte+0x88>)
 80103c4:	600a      	str	r2, [r1, #0]
 80103c6:	2b00      	cmp	r3, #0
 80103c8:	d104      	bne.n	80103d4 <L3GD20_SendByte+0x68>
 80103ca:	f000 f817 	bl	80103fc <L3GD20_TIMEOUT_UserCallback>
 80103ce:	4603      	mov	r3, r0
 80103d0:	b2db      	uxtb	r3, r3
 80103d2:	e00b      	b.n	80103ec <L3GD20_SendByte+0x80>
  while (SPI_I2S_GetFlagStatus(L3GD20_SPI, SPI_I2S_FLAG_RXNE) == RESET)
 80103d4:	2101      	movs	r1, #1
 80103d6:	4808      	ldr	r0, [pc, #32]	; (80103f8 <L3GD20_SendByte+0x8c>)
 80103d8:	f7fb f94b 	bl	800b672 <SPI_I2S_GetFlagStatus>
 80103dc:	4603      	mov	r3, r0
 80103de:	2b00      	cmp	r3, #0
 80103e0:	d0ec      	beq.n	80103bc <L3GD20_SendByte+0x50>
  }
  
  /* Return the Byte read from the SPI bus */
  return (uint8_t)SPI_I2S_ReceiveData(L3GD20_SPI);
 80103e2:	4805      	ldr	r0, [pc, #20]	; (80103f8 <L3GD20_SendByte+0x8c>)
 80103e4:	f7fb f87c 	bl	800b4e0 <SPI_I2S_ReceiveData>
 80103e8:	4603      	mov	r3, r0
 80103ea:	b2db      	uxtb	r3, r3
}
 80103ec:	4618      	mov	r0, r3
 80103ee:	3708      	adds	r7, #8
 80103f0:	46bd      	mov	sp, r7
 80103f2:	bd80      	pop	{r7, pc}
 80103f4:	200000a8 	.word	0x200000a8
 80103f8:	40015000 	.word	0x40015000

080103fc <L3GD20_TIMEOUT_UserCallback>:
  * @brief  Basic management of the timeout situation.
  * @param  None.
  * @retval None.
  */
uint32_t L3GD20_TIMEOUT_UserCallback(void)
{
 80103fc:	b480      	push	{r7}
 80103fe:	af00      	add	r7, sp, #0
  /* Block communication and all processes */
  while (1)
 8010400:	e7fe      	b.n	8010400 <L3GD20_TIMEOUT_UserCallback+0x4>
 8010402:	bf00      	nop

08010404 <LCD_DeInit>:
  * @brief  DeInitializes the LCD.
  * @param  None
  * @retval None
  */
void LCD_DeInit(void)
{ 
 8010404:	b580      	push	{r7, lr}
 8010406:	b082      	sub	sp, #8
 8010408:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  /* LCD Display Off */
  LCD_DisplayOff();
 801040a:	f002 f800 	bl	801240e <LCD_DisplayOff>

  /* LCD_SPI disable */
  SPI_Cmd(LCD_SPI, DISABLE);
 801040e:	2100      	movs	r1, #0
 8010410:	487e      	ldr	r0, [pc, #504]	; (801060c <LCD_DeInit+0x208>)
 8010412:	f7fa ff38 	bl	800b286 <SPI_Cmd>
  
  /* LCD_SPI DeInit */
  SPI_I2S_DeInit(LCD_SPI);
 8010416:	487d      	ldr	r0, [pc, #500]	; (801060c <LCD_DeInit+0x208>)
 8010418:	f7fa fd6c 	bl	800aef4 <SPI_I2S_DeInit>
   
  /* Disable SPI clock  */
  RCC_APB2PeriphClockCmd(LCD_SPI_CLK, DISABLE);
 801041c:	2100      	movs	r1, #0
 801041e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8010422:	f7f8 fafd 	bl	8008a20 <RCC_APB2PeriphClockCmd>
    
  /* Configure NCS in Output Push-Pull mode */
  GPIO_InitStructure.GPIO_Pin = LCD_NCS_PIN;
 8010426:	2304      	movs	r3, #4
 8010428:	603b      	str	r3, [r7, #0]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 801042a:	2300      	movs	r3, #0
 801042c:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 801042e:	2300      	movs	r3, #0
 8010430:	71fb      	strb	r3, [r7, #7]
  GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8010432:	463b      	mov	r3, r7
 8010434:	4619      	mov	r1, r3
 8010436:	4876      	ldr	r0, [pc, #472]	; (8010610 <LCD_DeInit+0x20c>)
 8010438:	f7f6 f8a2 	bl	8006580 <GPIO_Init>
   
  /* Configure SPI pins: SCK, MISO and MOSI */
  GPIO_InitStructure.GPIO_Pin = LCD_SPI_SCK_PIN;
 801043c:	2380      	movs	r3, #128	; 0x80
 801043e:	603b      	str	r3, [r7, #0]
  GPIO_Init(LCD_SPI_SCK_GPIO_PORT, &GPIO_InitStructure);
 8010440:	463b      	mov	r3, r7
 8010442:	4619      	mov	r1, r3
 8010444:	4873      	ldr	r0, [pc, #460]	; (8010614 <LCD_DeInit+0x210>)
 8010446:	f7f6 f89b 	bl	8006580 <GPIO_Init>

  GPIO_InitStructure.GPIO_Pin = LCD_SPI_MISO_PIN;
 801044a:	f44f 7380 	mov.w	r3, #256	; 0x100
 801044e:	603b      	str	r3, [r7, #0]
  GPIO_Init(LCD_SPI_MISO_GPIO_PORT, &GPIO_InitStructure);
 8010450:	463b      	mov	r3, r7
 8010452:	4619      	mov	r1, r3
 8010454:	486f      	ldr	r0, [pc, #444]	; (8010614 <LCD_DeInit+0x210>)
 8010456:	f7f6 f893 	bl	8006580 <GPIO_Init>
  
  GPIO_InitStructure.GPIO_Pin = LCD_SPI_MOSI_PIN;
 801045a:	f44f 7300 	mov.w	r3, #512	; 0x200
 801045e:	603b      	str	r3, [r7, #0]
  GPIO_Init(LCD_SPI_MOSI_GPIO_PORT, &GPIO_InitStructure);
 8010460:	463b      	mov	r3, r7
 8010462:	4619      	mov	r1, r3
 8010464:	486b      	ldr	r0, [pc, #428]	; (8010614 <LCD_DeInit+0x210>)
 8010466:	f7f6 f88b 	bl	8006580 <GPIO_Init>

  /* GPIOA configuration */
  GPIO_PinAFConfig(GPIOA, GPIO_PinSource3, GPIO_AF_MCO);
 801046a:	2200      	movs	r2, #0
 801046c:	2103      	movs	r1, #3
 801046e:	486a      	ldr	r0, [pc, #424]	; (8010618 <LCD_DeInit+0x214>)
 8010470:	f7f6 f9f5 	bl	800685e <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOA, GPIO_PinSource4, GPIO_AF_MCO);
 8010474:	2200      	movs	r2, #0
 8010476:	2104      	movs	r1, #4
 8010478:	4867      	ldr	r0, [pc, #412]	; (8010618 <LCD_DeInit+0x214>)
 801047a:	f7f6 f9f0 	bl	800685e <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOA, GPIO_PinSource6, GPIO_AF_MCO);
 801047e:	2200      	movs	r2, #0
 8010480:	2106      	movs	r1, #6
 8010482:	4865      	ldr	r0, [pc, #404]	; (8010618 <LCD_DeInit+0x214>)
 8010484:	f7f6 f9eb 	bl	800685e <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOA, GPIO_PinSource11, GPIO_AF_MCO);
 8010488:	2200      	movs	r2, #0
 801048a:	210b      	movs	r1, #11
 801048c:	4862      	ldr	r0, [pc, #392]	; (8010618 <LCD_DeInit+0x214>)
 801048e:	f7f6 f9e6 	bl	800685e <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOA, GPIO_PinSource12, GPIO_AF_MCO);
 8010492:	2200      	movs	r2, #0
 8010494:	210c      	movs	r1, #12
 8010496:	4860      	ldr	r0, [pc, #384]	; (8010618 <LCD_DeInit+0x214>)
 8010498:	f7f6 f9e1 	bl	800685e <GPIO_PinAFConfig>
  
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_3 | GPIO_Pin_4 | GPIO_Pin_6 |
 801049c:	f641 0358 	movw	r3, #6232	; 0x1858
 80104a0:	603b      	str	r3, [r7, #0]
                                GPIO_Pin_11 | GPIO_Pin_12;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 80104a2:	2302      	movs	r3, #2
 80104a4:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80104a6:	2302      	movs	r3, #2
 80104a8:	717b      	strb	r3, [r7, #5]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 80104aa:	2300      	movs	r3, #0
 80104ac:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
 80104ae:	2300      	movs	r3, #0
 80104b0:	71fb      	strb	r3, [r7, #7]
  GPIO_Init(GPIOA, &GPIO_InitStructure);
 80104b2:	463b      	mov	r3, r7
 80104b4:	4619      	mov	r1, r3
 80104b6:	4858      	ldr	r0, [pc, #352]	; (8010618 <LCD_DeInit+0x214>)
 80104b8:	f7f6 f862 	bl	8006580 <GPIO_Init>

  /* GPIOB configuration */
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource0, GPIO_AF_MCO);
 80104bc:	2200      	movs	r2, #0
 80104be:	2100      	movs	r1, #0
 80104c0:	4856      	ldr	r0, [pc, #344]	; (801061c <LCD_DeInit+0x218>)
 80104c2:	f7f6 f9cc 	bl	800685e <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource1, GPIO_AF_MCO);
 80104c6:	2200      	movs	r2, #0
 80104c8:	2101      	movs	r1, #1
 80104ca:	4854      	ldr	r0, [pc, #336]	; (801061c <LCD_DeInit+0x218>)
 80104cc:	f7f6 f9c7 	bl	800685e <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource8, GPIO_AF_MCO);
 80104d0:	2200      	movs	r2, #0
 80104d2:	2108      	movs	r1, #8
 80104d4:	4851      	ldr	r0, [pc, #324]	; (801061c <LCD_DeInit+0x218>)
 80104d6:	f7f6 f9c2 	bl	800685e <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource9, GPIO_AF_MCO);
 80104da:	2200      	movs	r2, #0
 80104dc:	2109      	movs	r1, #9
 80104de:	484f      	ldr	r0, [pc, #316]	; (801061c <LCD_DeInit+0x218>)
 80104e0:	f7f6 f9bd 	bl	800685e <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource10, GPIO_AF_MCO);
 80104e4:	2200      	movs	r2, #0
 80104e6:	210a      	movs	r1, #10
 80104e8:	484c      	ldr	r0, [pc, #304]	; (801061c <LCD_DeInit+0x218>)
 80104ea:	f7f6 f9b8 	bl	800685e <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource11, GPIO_AF_MCO);
 80104ee:	2200      	movs	r2, #0
 80104f0:	210b      	movs	r1, #11
 80104f2:	484a      	ldr	r0, [pc, #296]	; (801061c <LCD_DeInit+0x218>)
 80104f4:	f7f6 f9b3 	bl	800685e <GPIO_PinAFConfig>
  
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0  | GPIO_Pin_1  | GPIO_Pin_8    |
 80104f8:	f640 7303 	movw	r3, #3843	; 0xf03
 80104fc:	603b      	str	r3, [r7, #0]
                                GPIO_Pin_9  |  GPIO_Pin_10 | GPIO_Pin_11;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 80104fe:	2302      	movs	r3, #2
 8010500:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8010502:	2302      	movs	r3, #2
 8010504:	717b      	strb	r3, [r7, #5]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8010506:	2300      	movs	r3, #0
 8010508:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
 801050a:	2300      	movs	r3, #0
 801050c:	71fb      	strb	r3, [r7, #7]
  GPIO_Init(GPIOB, &GPIO_InitStructure);
 801050e:	463b      	mov	r3, r7
 8010510:	4619      	mov	r1, r3
 8010512:	4842      	ldr	r0, [pc, #264]	; (801061c <LCD_DeInit+0x218>)
 8010514:	f7f6 f834 	bl	8006580 <GPIO_Init>
  
  /* GPIOC configuration */
  GPIO_PinAFConfig(GPIOC, GPIO_PinSource6, GPIO_AF_MCO);
 8010518:	2200      	movs	r2, #0
 801051a:	2106      	movs	r1, #6
 801051c:	483c      	ldr	r0, [pc, #240]	; (8010610 <LCD_DeInit+0x20c>)
 801051e:	f7f6 f99e 	bl	800685e <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOC, GPIO_PinSource7, GPIO_AF_MCO);
 8010522:	2200      	movs	r2, #0
 8010524:	2107      	movs	r1, #7
 8010526:	483a      	ldr	r0, [pc, #232]	; (8010610 <LCD_DeInit+0x20c>)
 8010528:	f7f6 f999 	bl	800685e <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOC, GPIO_PinSource10, GPIO_AF_MCO);
 801052c:	2200      	movs	r2, #0
 801052e:	210a      	movs	r1, #10
 8010530:	4837      	ldr	r0, [pc, #220]	; (8010610 <LCD_DeInit+0x20c>)
 8010532:	f7f6 f994 	bl	800685e <GPIO_PinAFConfig>
  
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6  | GPIO_Pin_7  | GPIO_Pin_10;
 8010536:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 801053a:	603b      	str	r3, [r7, #0]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 801053c:	2302      	movs	r3, #2
 801053e:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8010540:	2302      	movs	r3, #2
 8010542:	717b      	strb	r3, [r7, #5]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8010544:	2300      	movs	r3, #0
 8010546:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
 8010548:	2300      	movs	r3, #0
 801054a:	71fb      	strb	r3, [r7, #7]
  GPIO_Init(GPIOC, &GPIO_InitStructure);
 801054c:	463b      	mov	r3, r7
 801054e:	4619      	mov	r1, r3
 8010550:	482f      	ldr	r0, [pc, #188]	; (8010610 <LCD_DeInit+0x20c>)
 8010552:	f7f6 f815 	bl	8006580 <GPIO_Init>
  
  /* GPIOD configuration */
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource3, GPIO_AF_MCO);
 8010556:	2200      	movs	r2, #0
 8010558:	2103      	movs	r1, #3
 801055a:	4831      	ldr	r0, [pc, #196]	; (8010620 <LCD_DeInit+0x21c>)
 801055c:	f7f6 f97f 	bl	800685e <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource6, GPIO_AF_MCO);
 8010560:	2200      	movs	r2, #0
 8010562:	2106      	movs	r1, #6
 8010564:	482e      	ldr	r0, [pc, #184]	; (8010620 <LCD_DeInit+0x21c>)
 8010566:	f7f6 f97a 	bl	800685e <GPIO_PinAFConfig>
  
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_3  | GPIO_Pin_6; 
 801056a:	2348      	movs	r3, #72	; 0x48
 801056c:	603b      	str	r3, [r7, #0]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 801056e:	2302      	movs	r3, #2
 8010570:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8010572:	2302      	movs	r3, #2
 8010574:	717b      	strb	r3, [r7, #5]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8010576:	2300      	movs	r3, #0
 8010578:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
 801057a:	2300      	movs	r3, #0
 801057c:	71fb      	strb	r3, [r7, #7]
  GPIO_Init(GPIOD, &GPIO_InitStructure);  
 801057e:	463b      	mov	r3, r7
 8010580:	4619      	mov	r1, r3
 8010582:	4827      	ldr	r0, [pc, #156]	; (8010620 <LCD_DeInit+0x21c>)
 8010584:	f7f5 fffc 	bl	8006580 <GPIO_Init>

  /* GPIOF configuration */
  GPIO_PinAFConfig(GPIOF, GPIO_PinSource10, GPIO_AF_MCO);
 8010588:	2200      	movs	r2, #0
 801058a:	210a      	movs	r1, #10
 801058c:	4821      	ldr	r0, [pc, #132]	; (8010614 <LCD_DeInit+0x210>)
 801058e:	f7f6 f966 	bl	800685e <GPIO_PinAFConfig>
  
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10; 
 8010592:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010596:	603b      	str	r3, [r7, #0]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8010598:	2302      	movs	r3, #2
 801059a:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 801059c:	2302      	movs	r3, #2
 801059e:	717b      	strb	r3, [r7, #5]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 80105a0:	2300      	movs	r3, #0
 80105a2:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
 80105a4:	2300      	movs	r3, #0
 80105a6:	71fb      	strb	r3, [r7, #7]
  GPIO_Init(GPIOF, &GPIO_InitStructure);  
 80105a8:	463b      	mov	r3, r7
 80105aa:	4619      	mov	r1, r3
 80105ac:	4819      	ldr	r0, [pc, #100]	; (8010614 <LCD_DeInit+0x210>)
 80105ae:	f7f5 ffe7 	bl	8006580 <GPIO_Init>

  /* GPIOG configuration */
  GPIO_PinAFConfig(GPIOG, GPIO_PinSource6, GPIO_AF_MCO);
 80105b2:	2200      	movs	r2, #0
 80105b4:	2106      	movs	r1, #6
 80105b6:	481b      	ldr	r0, [pc, #108]	; (8010624 <LCD_DeInit+0x220>)
 80105b8:	f7f6 f951 	bl	800685e <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOG, GPIO_PinSource7, GPIO_AF_MCO);
 80105bc:	2200      	movs	r2, #0
 80105be:	2107      	movs	r1, #7
 80105c0:	4818      	ldr	r0, [pc, #96]	; (8010624 <LCD_DeInit+0x220>)
 80105c2:	f7f6 f94c 	bl	800685e <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOG, GPIO_PinSource10, GPIO_AF_MCO);
 80105c6:	2200      	movs	r2, #0
 80105c8:	210a      	movs	r1, #10
 80105ca:	4816      	ldr	r0, [pc, #88]	; (8010624 <LCD_DeInit+0x220>)
 80105cc:	f7f6 f947 	bl	800685e <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOG, GPIO_PinSource11, GPIO_AF_MCO);
 80105d0:	2200      	movs	r2, #0
 80105d2:	210b      	movs	r1, #11
 80105d4:	4813      	ldr	r0, [pc, #76]	; (8010624 <LCD_DeInit+0x220>)
 80105d6:	f7f6 f942 	bl	800685e <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOG, GPIO_PinSource12, GPIO_AF_MCO);
 80105da:	2200      	movs	r2, #0
 80105dc:	210c      	movs	r1, #12
 80105de:	4811      	ldr	r0, [pc, #68]	; (8010624 <LCD_DeInit+0x220>)
 80105e0:	f7f6 f93d 	bl	800685e <GPIO_PinAFConfig>
  
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6  | GPIO_Pin_7  | GPIO_Pin_10    |
 80105e4:	f44f 53e6 	mov.w	r3, #7360	; 0x1cc0
 80105e8:	603b      	str	r3, [r7, #0]
                                GPIO_Pin_11 | GPIO_Pin_12;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 80105ea:	2302      	movs	r3, #2
 80105ec:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80105ee:	2302      	movs	r3, #2
 80105f0:	717b      	strb	r3, [r7, #5]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 80105f2:	2300      	movs	r3, #0
 80105f4:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
 80105f6:	2300      	movs	r3, #0
 80105f8:	71fb      	strb	r3, [r7, #7]
  GPIO_Init(GPIOG, &GPIO_InitStructure);
 80105fa:	463b      	mov	r3, r7
 80105fc:	4619      	mov	r1, r3
 80105fe:	4809      	ldr	r0, [pc, #36]	; (8010624 <LCD_DeInit+0x220>)
 8010600:	f7f5 ffbe 	bl	8006580 <GPIO_Init>
}
 8010604:	bf00      	nop
 8010606:	3708      	adds	r7, #8
 8010608:	46bd      	mov	sp, r7
 801060a:	bd80      	pop	{r7, pc}
 801060c:	40015000 	.word	0x40015000
 8010610:	40020800 	.word	0x40020800
 8010614:	40021400 	.word	0x40021400
 8010618:	40020000 	.word	0x40020000
 801061c:	40020400 	.word	0x40020400
 8010620:	40020c00 	.word	0x40020c00
 8010624:	40021800 	.word	0x40021800

08010628 <LCD_Init>:
  * @brief  Initializes the LCD.
  * @param  None
  * @retval None
  */
void LCD_Init(void)
{ 
 8010628:	b580      	push	{r7, lr}
 801062a:	b090      	sub	sp, #64	; 0x40
 801062c:	af00      	add	r7, sp, #0
  LTDC_InitTypeDef       LTDC_InitStruct;
  
  /* Configure the LCD Control pins ------------------------------------------*/
  LCD_CtrlLinesConfig();
 801062e:	f001 fef5 	bl	801241c <LCD_CtrlLinesConfig>
  LCD_ChipSelect(DISABLE);
 8010632:	2000      	movs	r0, #0
 8010634:	f000 f8ae 	bl	8010794 <LCD_ChipSelect>
  LCD_ChipSelect(ENABLE);
 8010638:	2001      	movs	r0, #1
 801063a:	f000 f8ab 	bl	8010794 <LCD_ChipSelect>
  
  /* Configure the LCD_SPI interface -----------------------------------------*/
  LCD_SPIConfig(); 
 801063e:	f001 ff2b 	bl	8012498 <LCD_SPIConfig>
  
  /* Power on the LCD --------------------------------------------------------*/
  LCD_PowerOn();
 8010642:	f001 fd95 	bl	8012170 <LCD_PowerOn>
  
  /* Enable the LTDC Clock */
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_LTDC, ENABLE);
 8010646:	2101      	movs	r1, #1
 8010648:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 801064c:	f7f8 f9e8 	bl	8008a20 <RCC_APB2PeriphClockCmd>
  
  /* Enable the DMA2D Clock */
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA2D, ENABLE); 
 8010650:	2101      	movs	r1, #1
 8010652:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8010656:	f7f8 f963 	bl	8008920 <RCC_AHB1PeriphClockCmd>
  
  /* Configure the LCD Control pins */
  LCD_AF_GPIOConfig();  
 801065a:	f001 ff87 	bl	801256c <LCD_AF_GPIOConfig>
  
  /* Configure the FMC Parallel interface : SDRAM is used as Frame Buffer for LCD */
  SDRAM_Init();
 801065e:	f002 f87b 	bl	8012758 <SDRAM_Init>
  
  /* LTDC Configuration *********************************************************/  
  /* Polarity configuration */
  /* Initialize the horizontal synchronization polarity as active low */
  LTDC_InitStruct.LTDC_HSPolarity = LTDC_HSPolarity_AL;     
 8010662:	2300      	movs	r3, #0
 8010664:	607b      	str	r3, [r7, #4]
  /* Initialize the vertical synchronization polarity as active low */  
  LTDC_InitStruct.LTDC_VSPolarity = LTDC_VSPolarity_AL;     
 8010666:	2300      	movs	r3, #0
 8010668:	60bb      	str	r3, [r7, #8]
  /* Initialize the data enable polarity as active low */
  LTDC_InitStruct.LTDC_DEPolarity = LTDC_DEPolarity_AL;     
 801066a:	2300      	movs	r3, #0
 801066c:	60fb      	str	r3, [r7, #12]
  /* Initialize the pixel clock polarity as input pixel clock */ 
  LTDC_InitStruct.LTDC_PCPolarity = LTDC_PCPolarity_IPC;
 801066e:	2300      	movs	r3, #0
 8010670:	613b      	str	r3, [r7, #16]
  
  /* Configure R,G,B component values for LCD background color */                   
  LTDC_InitStruct.LTDC_BackgroundRedValue = 0;            
 8010672:	2300      	movs	r3, #0
 8010674:	637b      	str	r3, [r7, #52]	; 0x34
  LTDC_InitStruct.LTDC_BackgroundGreenValue = 0;          
 8010676:	2300      	movs	r3, #0
 8010678:	63bb      	str	r3, [r7, #56]	; 0x38
  LTDC_InitStruct.LTDC_BackgroundBlueValue = 0;  
 801067a:	2300      	movs	r3, #0
 801067c:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* Enable Pixel Clock */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAI_N = 192 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAI_R = 192/4 = 48 Mhz */
  /* LTDC clock frequency = PLLLCDCLK / RCC_PLLSAIDivR = 48/8 = 6 Mhz */
  RCC_PLLSAIConfig(192, 7, 4);
 801067e:	2204      	movs	r2, #4
 8010680:	2107      	movs	r1, #7
 8010682:	20c0      	movs	r0, #192	; 0xc0
 8010684:	f7f7 fea0 	bl	80083c8 <RCC_PLLSAIConfig>
  RCC_LTDCCLKDivConfig(RCC_PLLSAIDivR_Div8);
 8010688:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 801068c:	f7f8 f91a 	bl	80088c4 <RCC_LTDCCLKDivConfig>
  
  /* Enable PLLSAI Clock */
  RCC_PLLSAICmd(ENABLE);
 8010690:	2001      	movs	r0, #1
 8010692:	f7f7 feb3 	bl	80083fc <RCC_PLLSAICmd>
  /* Wait for PLLSAI activation */
  while(RCC_GetFlagStatus(RCC_FLAG_PLLSAIRDY) == RESET)
 8010696:	bf00      	nop
 8010698:	203d      	movs	r0, #61	; 0x3d
 801069a:	f7f8 fb47 	bl	8008d2c <RCC_GetFlagStatus>
 801069e:	4603      	mov	r3, r0
 80106a0:	2b00      	cmp	r3, #0
 80106a2:	d0f9      	beq.n	8010698 <LCD_Init+0x70>
  {
  }
  
  /* Timing configuration */  
  /* Configure horizontal synchronization width */     
  LTDC_InitStruct.LTDC_HorizontalSync = 9;
 80106a4:	2309      	movs	r3, #9
 80106a6:	617b      	str	r3, [r7, #20]
  /* Configure vertical synchronization height */
  LTDC_InitStruct.LTDC_VerticalSync = 1;
 80106a8:	2301      	movs	r3, #1
 80106aa:	61bb      	str	r3, [r7, #24]
  /* Configure accumulated horizontal back porch */
  LTDC_InitStruct.LTDC_AccumulatedHBP = 29; 
 80106ac:	231d      	movs	r3, #29
 80106ae:	61fb      	str	r3, [r7, #28]
  /* Configure accumulated vertical back porch */
  LTDC_InitStruct.LTDC_AccumulatedVBP = 3;  
 80106b0:	2303      	movs	r3, #3
 80106b2:	623b      	str	r3, [r7, #32]
  /* Configure accumulated active width */  
  LTDC_InitStruct.LTDC_AccumulatedActiveW = 269;
 80106b4:	f240 130d 	movw	r3, #269	; 0x10d
 80106b8:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure accumulated active height */
  LTDC_InitStruct.LTDC_AccumulatedActiveH = 323;
 80106ba:	f240 1343 	movw	r3, #323	; 0x143
 80106be:	62bb      	str	r3, [r7, #40]	; 0x28
  /* Configure total width */
  LTDC_InitStruct.LTDC_TotalWidth = 279; 
 80106c0:	f240 1317 	movw	r3, #279	; 0x117
 80106c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure total height */
  LTDC_InitStruct.LTDC_TotalHeigh = 327;
 80106c6:	f240 1347 	movw	r3, #327	; 0x147
 80106ca:	633b      	str	r3, [r7, #48]	; 0x30
  
  LTDC_Init(&LTDC_InitStruct);
 80106cc:	1d3b      	adds	r3, r7, #4
 80106ce:	4618      	mov	r0, r3
 80106d0:	f7f6 fe90 	bl	80073f4 <LTDC_Init>
}  
 80106d4:	bf00      	nop
 80106d6:	3740      	adds	r7, #64	; 0x40
 80106d8:	46bd      	mov	sp, r7
 80106da:	bd80      	pop	{r7, pc}

080106dc <LCD_LayerInit>:
  * @brief  Initializes the LCD Layers.
  * @param  None
  * @retval None
  */
void LCD_LayerInit(void)
{
 80106dc:	b580      	push	{r7, lr}
 80106de:	b090      	sub	sp, #64	; 0x40
 80106e0:	af00      	add	r7, sp, #0
  /* In this case all the active display area is used to display a picture then :
  Horizontal start = horizontal synchronization + Horizontal back porch = 30 
  Horizontal stop = Horizontal start + window width -1 = 30 + 240 -1
  Vertical start   = vertical synchronization + vertical back porch     = 4
  Vertical stop   = Vertical start + window height -1  = 4 + 320 -1      */      
  LTDC_Layer_InitStruct.LTDC_HorizontalStart = 30;
 80106e2:	231e      	movs	r3, #30
 80106e4:	603b      	str	r3, [r7, #0]
  LTDC_Layer_InitStruct.LTDC_HorizontalStop = (LCD_PIXEL_WIDTH + 30 - 1); 
 80106e6:	f240 130d 	movw	r3, #269	; 0x10d
 80106ea:	607b      	str	r3, [r7, #4]
  LTDC_Layer_InitStruct.LTDC_VerticalStart = 4;
 80106ec:	2304      	movs	r3, #4
 80106ee:	60bb      	str	r3, [r7, #8]
  LTDC_Layer_InitStruct.LTDC_VerticalStop = (LCD_PIXEL_HEIGHT + 4 - 1);
 80106f0:	f240 1343 	movw	r3, #323	; 0x143
 80106f4:	60fb      	str	r3, [r7, #12]
  
  /* Pixel Format configuration*/
  LTDC_Layer_InitStruct.LTDC_PixelFormat = LTDC_Pixelformat_RGB888;
 80106f6:	2301      	movs	r3, #1
 80106f8:	613b      	str	r3, [r7, #16]
  /* Alpha constant (255 totally opaque) */
  LTDC_Layer_InitStruct.LTDC_ConstantAlpha = 255; 
 80106fa:	23ff      	movs	r3, #255	; 0xff
 80106fc:	617b      	str	r3, [r7, #20]
  /* Default Color configuration (configure A,R,G,B component values) */          
  LTDC_Layer_InitStruct.LTDC_DefaultColorBlue = 0;        
 80106fe:	2300      	movs	r3, #0
 8010700:	61bb      	str	r3, [r7, #24]
  LTDC_Layer_InitStruct.LTDC_DefaultColorGreen = 255;       
 8010702:	23ff      	movs	r3, #255	; 0xff
 8010704:	61fb      	str	r3, [r7, #28]
  LTDC_Layer_InitStruct.LTDC_DefaultColorRed = 0;         
 8010706:	2300      	movs	r3, #0
 8010708:	623b      	str	r3, [r7, #32]
  LTDC_Layer_InitStruct.LTDC_DefaultColorAlpha = 0;
 801070a:	2300      	movs	r3, #0
 801070c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure blending factors */       
  LTDC_Layer_InitStruct.LTDC_BlendingFactor_1 = LTDC_BlendingFactor1_CA;    
 801070e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010712:	62bb      	str	r3, [r7, #40]	; 0x28
  LTDC_Layer_InitStruct.LTDC_BlendingFactor_2 = LTDC_BlendingFactor2_CA;
 8010714:	2305      	movs	r3, #5
 8010716:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* the length of one line of pixels in bytes + 3 then :
  Line Lenth = Active high width x number of bytes per pixel + 3 
  Active high width         = LCD_PIXEL_WIDTH 
  number of bytes per pixel = 2    (pixel_format : RGB565) 
  */
  LTDC_Layer_InitStruct.LTDC_CFBLineLength = ((LCD_PIXEL_WIDTH * 2) + 3);
 8010718:	f240 13e3 	movw	r3, #483	; 0x1e3
 801071c:	637b      	str	r3, [r7, #52]	; 0x34
  /* the pitch is the increment from the start of one line of pixels to the 
  start of the next line in bytes, then :
  Pitch = Active high width x number of bytes per pixel */ 
  LTDC_Layer_InitStruct.LTDC_CFBPitch = (LCD_PIXEL_WIDTH * 2);
 801071e:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8010722:	63bb      	str	r3, [r7, #56]	; 0x38
  
  /* Configure the number of lines */  
  LTDC_Layer_InitStruct.LTDC_CFBLineNumber = LCD_PIXEL_HEIGHT;
 8010724:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8010728:	63fb      	str	r3, [r7, #60]	; 0x3c
  
  /* Start Address configuration : the LCD Frame buffer is defined on SDRAM */    
  LTDC_Layer_InitStruct.LTDC_CFBStartAdress = LCD_FRAME_BUFFER;
 801072a:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 801072e:	633b      	str	r3, [r7, #48]	; 0x30
  
  /* Initialize LTDC layer 1 */
  LTDC_LayerInit(LTDC_Layer1, &LTDC_Layer_InitStruct);
 8010730:	463b      	mov	r3, r7
 8010732:	4619      	mov	r1, r3
 8010734:	4813      	ldr	r0, [pc, #76]	; (8010784 <LCD_LayerInit+0xa8>)
 8010736:	f7f6 ffc7 	bl	80076c8 <LTDC_LayerInit>
  
  /* Configure Layer2 */
  /* Start Address configuration : the LCD Frame buffer is defined on SDRAM w/ Offset */     
  LTDC_Layer_InitStruct.LTDC_CFBStartAdress = LCD_FRAME_BUFFER + BUFFER_OFFSET;
 801073a:	4b13      	ldr	r3, [pc, #76]	; (8010788 <LCD_LayerInit+0xac>)
 801073c:	633b      	str	r3, [r7, #48]	; 0x30
  
  /* Configure blending factors */       
  LTDC_Layer_InitStruct.LTDC_BlendingFactor_1 = LTDC_BlendingFactor1_PAxCA;    
 801073e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8010742:	62bb      	str	r3, [r7, #40]	; 0x28
  LTDC_Layer_InitStruct.LTDC_BlendingFactor_2 = LTDC_BlendingFactor2_PAxCA;
 8010744:	2307      	movs	r3, #7
 8010746:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Initialize LTDC layer 2 */
  LTDC_LayerInit(LTDC_Layer2, &LTDC_Layer_InitStruct);
 8010748:	463b      	mov	r3, r7
 801074a:	4619      	mov	r1, r3
 801074c:	480f      	ldr	r0, [pc, #60]	; (801078c <LCD_LayerInit+0xb0>)
 801074e:	f7f6 ffbb 	bl	80076c8 <LTDC_LayerInit>
  
  /* LTDC configuration reload */  
  LTDC_ReloadConfig(LTDC_IMReload);
 8010752:	2001      	movs	r0, #1
 8010754:	f7f6 ffa8 	bl	80076a8 <LTDC_ReloadConfig>
  
  /* Enable foreground & background Layers */
  LTDC_LayerCmd(LTDC_Layer1, ENABLE); 
 8010758:	2101      	movs	r1, #1
 801075a:	480a      	ldr	r0, [pc, #40]	; (8010784 <LCD_LayerInit+0xa8>)
 801075c:	f7f7 f889 	bl	8007872 <LTDC_LayerCmd>
  LTDC_LayerCmd(LTDC_Layer2, ENABLE);
 8010760:	2101      	movs	r1, #1
 8010762:	480a      	ldr	r0, [pc, #40]	; (801078c <LCD_LayerInit+0xb0>)
 8010764:	f7f7 f885 	bl	8007872 <LTDC_LayerCmd>
  
  /* LTDC configuration reload */  
  LTDC_ReloadConfig(LTDC_IMReload);
 8010768:	2001      	movs	r0, #1
 801076a:	f7f6 ff9d 	bl	80076a8 <LTDC_ReloadConfig>
  
  /* Set default font */    
  LCD_SetFont(&LCD_DEFAULT_FONT); 
 801076e:	4808      	ldr	r0, [pc, #32]	; (8010790 <LCD_LayerInit+0xb4>)
 8010770:	f000 f89a 	bl	80108a8 <LCD_SetFont>
  
  /* dithering activation */
  LTDC_DitherCmd(ENABLE);
 8010774:	2001      	movs	r0, #1
 8010776:	f7f6 ff29 	bl	80075cc <LTDC_DitherCmd>
}
 801077a:	bf00      	nop
 801077c:	3740      	adds	r7, #64	; 0x40
 801077e:	46bd      	mov	sp, r7
 8010780:	bd80      	pop	{r7, pc}
 8010782:	bf00      	nop
 8010784:	40016884 	.word	0x40016884
 8010788:	d0050000 	.word	0xd0050000
 801078c:	40016904 	.word	0x40016904
 8010790:	200000ac 	.word	0x200000ac

08010794 <LCD_ChipSelect>:
  * @brief  Controls LCD Chip Select (CS) pin
  * @param  NewState CS pin state
  * @retval None
  */
void LCD_ChipSelect(FunctionalState NewState)
{
 8010794:	b580      	push	{r7, lr}
 8010796:	b082      	sub	sp, #8
 8010798:	af00      	add	r7, sp, #0
 801079a:	4603      	mov	r3, r0
 801079c:	71fb      	strb	r3, [r7, #7]
  if (NewState == DISABLE)
 801079e:	79fb      	ldrb	r3, [r7, #7]
 80107a0:	2b00      	cmp	r3, #0
 80107a2:	d104      	bne.n	80107ae <LCD_ChipSelect+0x1a>
  {
    GPIO_ResetBits(LCD_NCS_GPIO_PORT, LCD_NCS_PIN); /* CS pin low: LCD disabled */
 80107a4:	2104      	movs	r1, #4
 80107a6:	4806      	ldr	r0, [pc, #24]	; (80107c0 <LCD_ChipSelect+0x2c>)
 80107a8:	f7f6 f811 	bl	80067ce <GPIO_ResetBits>
  }
  else
  {
    GPIO_SetBits(LCD_NCS_GPIO_PORT, LCD_NCS_PIN); /* CS pin high: LCD enabled */
  }
}
 80107ac:	e003      	b.n	80107b6 <LCD_ChipSelect+0x22>
    GPIO_SetBits(LCD_NCS_GPIO_PORT, LCD_NCS_PIN); /* CS pin high: LCD enabled */
 80107ae:	2104      	movs	r1, #4
 80107b0:	4803      	ldr	r0, [pc, #12]	; (80107c0 <LCD_ChipSelect+0x2c>)
 80107b2:	f7f5 fffd 	bl	80067b0 <GPIO_SetBits>
}
 80107b6:	bf00      	nop
 80107b8:	3708      	adds	r7, #8
 80107ba:	46bd      	mov	sp, r7
 80107bc:	bd80      	pop	{r7, pc}
 80107be:	bf00      	nop
 80107c0:	40020800 	.word	0x40020800

080107c4 <LCD_SetLayer>:
  * @brief  Sets the LCD Layer.
  * @param  Layerx: specifies the Layer foreground or background.
  * @retval None
  */
void LCD_SetLayer(uint32_t Layerx)
{
 80107c4:	b480      	push	{r7}
 80107c6:	b083      	sub	sp, #12
 80107c8:	af00      	add	r7, sp, #0
 80107ca:	6078      	str	r0, [r7, #4]
  if (Layerx == LCD_BACKGROUND_LAYER)
 80107cc:	687b      	ldr	r3, [r7, #4]
 80107ce:	2b00      	cmp	r3, #0
 80107d0:	d107      	bne.n	80107e2 <LCD_SetLayer+0x1e>
  {
    CurrentFrameBuffer = LCD_FRAME_BUFFER; 
 80107d2:	4b0a      	ldr	r3, [pc, #40]	; (80107fc <LCD_SetLayer+0x38>)
 80107d4:	f04f 4250 	mov.w	r2, #3489660928	; 0xd0000000
 80107d8:	601a      	str	r2, [r3, #0]
    CurrentLayer = LCD_BACKGROUND_LAYER;
 80107da:	4b09      	ldr	r3, [pc, #36]	; (8010800 <LCD_SetLayer+0x3c>)
 80107dc:	2200      	movs	r2, #0
 80107de:	601a      	str	r2, [r3, #0]
  else
  {
    CurrentFrameBuffer = LCD_FRAME_BUFFER + BUFFER_OFFSET;
    CurrentLayer = LCD_FOREGROUND_LAYER;
  }
}  
 80107e0:	e005      	b.n	80107ee <LCD_SetLayer+0x2a>
    CurrentFrameBuffer = LCD_FRAME_BUFFER + BUFFER_OFFSET;
 80107e2:	4b06      	ldr	r3, [pc, #24]	; (80107fc <LCD_SetLayer+0x38>)
 80107e4:	4a07      	ldr	r2, [pc, #28]	; (8010804 <LCD_SetLayer+0x40>)
 80107e6:	601a      	str	r2, [r3, #0]
    CurrentLayer = LCD_FOREGROUND_LAYER;
 80107e8:	4b05      	ldr	r3, [pc, #20]	; (8010800 <LCD_SetLayer+0x3c>)
 80107ea:	2201      	movs	r2, #1
 80107ec:	601a      	str	r2, [r3, #0]
}  
 80107ee:	bf00      	nop
 80107f0:	370c      	adds	r7, #12
 80107f2:	46bd      	mov	sp, r7
 80107f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107f8:	4770      	bx	lr
 80107fa:	bf00      	nop
 80107fc:	200000d0 	.word	0x200000d0
 8010800:	20002e30 	.word	0x20002e30
 8010804:	d0050000 	.word	0xd0050000

08010808 <LCD_SetColors>:
  * @param  TextColor: specifies the Text Color.
  * @param  BackColor: specifies the Background Color.
  * @retval None
  */
void LCD_SetColors(uint16_t TextColor, uint16_t BackColor)
{
 8010808:	b480      	push	{r7}
 801080a:	b083      	sub	sp, #12
 801080c:	af00      	add	r7, sp, #0
 801080e:	4603      	mov	r3, r0
 8010810:	460a      	mov	r2, r1
 8010812:	80fb      	strh	r3, [r7, #6]
 8010814:	4613      	mov	r3, r2
 8010816:	80bb      	strh	r3, [r7, #4]
  CurrentTextColor = TextColor; 
 8010818:	4a05      	ldr	r2, [pc, #20]	; (8010830 <LCD_SetColors+0x28>)
 801081a:	88fb      	ldrh	r3, [r7, #6]
 801081c:	8013      	strh	r3, [r2, #0]
  CurrentBackColor = BackColor;
 801081e:	4a05      	ldr	r2, [pc, #20]	; (8010834 <LCD_SetColors+0x2c>)
 8010820:	88bb      	ldrh	r3, [r7, #4]
 8010822:	8013      	strh	r3, [r2, #0]
}
 8010824:	bf00      	nop
 8010826:	370c      	adds	r7, #12
 8010828:	46bd      	mov	sp, r7
 801082a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801082e:	4770      	bx	lr
 8010830:	20002e2c 	.word	0x20002e2c
 8010834:	200000cc 	.word	0x200000cc

08010838 <LCD_GetColors>:
  * @param  BackColor: pointer to the variable that will contain the Background 
            Color.
  * @retval None
  */
void LCD_GetColors(uint16_t *TextColor, uint16_t *BackColor)
{
 8010838:	b480      	push	{r7}
 801083a:	b083      	sub	sp, #12
 801083c:	af00      	add	r7, sp, #0
 801083e:	6078      	str	r0, [r7, #4]
 8010840:	6039      	str	r1, [r7, #0]
  *TextColor = CurrentTextColor;
 8010842:	4b07      	ldr	r3, [pc, #28]	; (8010860 <LCD_GetColors+0x28>)
 8010844:	881a      	ldrh	r2, [r3, #0]
 8010846:	687b      	ldr	r3, [r7, #4]
 8010848:	801a      	strh	r2, [r3, #0]
  *BackColor = CurrentBackColor;
 801084a:	4b06      	ldr	r3, [pc, #24]	; (8010864 <LCD_GetColors+0x2c>)
 801084c:	881a      	ldrh	r2, [r3, #0]
 801084e:	683b      	ldr	r3, [r7, #0]
 8010850:	801a      	strh	r2, [r3, #0]
}
 8010852:	bf00      	nop
 8010854:	370c      	adds	r7, #12
 8010856:	46bd      	mov	sp, r7
 8010858:	f85d 7b04 	ldr.w	r7, [sp], #4
 801085c:	4770      	bx	lr
 801085e:	bf00      	nop
 8010860:	20002e2c 	.word	0x20002e2c
 8010864:	200000cc 	.word	0x200000cc

08010868 <LCD_SetTextColor>:
  * @brief  Sets the Text color.
  * @param  Color: specifies the Text color code RGB(5-6-5).
  * @retval None
  */
void LCD_SetTextColor(uint16_t Color)
{
 8010868:	b480      	push	{r7}
 801086a:	b083      	sub	sp, #12
 801086c:	af00      	add	r7, sp, #0
 801086e:	4603      	mov	r3, r0
 8010870:	80fb      	strh	r3, [r7, #6]
  CurrentTextColor = Color;
 8010872:	4a04      	ldr	r2, [pc, #16]	; (8010884 <LCD_SetTextColor+0x1c>)
 8010874:	88fb      	ldrh	r3, [r7, #6]
 8010876:	8013      	strh	r3, [r2, #0]
}
 8010878:	bf00      	nop
 801087a:	370c      	adds	r7, #12
 801087c:	46bd      	mov	sp, r7
 801087e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010882:	4770      	bx	lr
 8010884:	20002e2c 	.word	0x20002e2c

08010888 <LCD_SetBackColor>:
  * @brief  Sets the Background color.
  * @param  Color: specifies the Background color code RGB(5-6-5).
  * @retval None
  */
void LCD_SetBackColor(uint16_t Color)
{
 8010888:	b480      	push	{r7}
 801088a:	b083      	sub	sp, #12
 801088c:	af00      	add	r7, sp, #0
 801088e:	4603      	mov	r3, r0
 8010890:	80fb      	strh	r3, [r7, #6]
  CurrentBackColor = Color;
 8010892:	4a04      	ldr	r2, [pc, #16]	; (80108a4 <LCD_SetBackColor+0x1c>)
 8010894:	88fb      	ldrh	r3, [r7, #6]
 8010896:	8013      	strh	r3, [r2, #0]
}
 8010898:	bf00      	nop
 801089a:	370c      	adds	r7, #12
 801089c:	46bd      	mov	sp, r7
 801089e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108a2:	4770      	bx	lr
 80108a4:	200000cc 	.word	0x200000cc

080108a8 <LCD_SetFont>:
  * @brief  Sets the Text Font.
  * @param  fonts: specifies the font to be used.
  * @retval None
  */
void LCD_SetFont(sFONT *fonts)
{
 80108a8:	b480      	push	{r7}
 80108aa:	b083      	sub	sp, #12
 80108ac:	af00      	add	r7, sp, #0
 80108ae:	6078      	str	r0, [r7, #4]
  LCD_Currentfonts = fonts;
 80108b0:	4a04      	ldr	r2, [pc, #16]	; (80108c4 <LCD_SetFont+0x1c>)
 80108b2:	687b      	ldr	r3, [r7, #4]
 80108b4:	6013      	str	r3, [r2, #0]
}
 80108b6:	bf00      	nop
 80108b8:	370c      	adds	r7, #12
 80108ba:	46bd      	mov	sp, r7
 80108bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108c0:	4770      	bx	lr
 80108c2:	bf00      	nop
 80108c4:	20002e28 	.word	0x20002e28

080108c8 <LCD_SetTransparency>:
  * @param  transparency: specifies the transparency, 
  *         This parameter must range from 0x00 to 0xFF.
  * @retval None
  */
void LCD_SetTransparency(uint8_t transparency)
{
 80108c8:	b580      	push	{r7, lr}
 80108ca:	b082      	sub	sp, #8
 80108cc:	af00      	add	r7, sp, #0
 80108ce:	4603      	mov	r3, r0
 80108d0:	71fb      	strb	r3, [r7, #7]
  if (CurrentLayer == LCD_BACKGROUND_LAYER)
 80108d2:	4b0b      	ldr	r3, [pc, #44]	; (8010900 <LCD_SetTransparency+0x38>)
 80108d4:	681b      	ldr	r3, [r3, #0]
 80108d6:	2b00      	cmp	r3, #0
 80108d8:	d105      	bne.n	80108e6 <LCD_SetTransparency+0x1e>
  {
    LTDC_LayerAlpha(LTDC_Layer1, transparency);
 80108da:	79fb      	ldrb	r3, [r7, #7]
 80108dc:	4619      	mov	r1, r3
 80108de:	4809      	ldr	r0, [pc, #36]	; (8010904 <LCD_SetTransparency+0x3c>)
 80108e0:	f7f7 f94c 	bl	8007b7c <LTDC_LayerAlpha>
 80108e4:	e004      	b.n	80108f0 <LCD_SetTransparency+0x28>
  }
  else
  {     
    LTDC_LayerAlpha(LTDC_Layer2, transparency);
 80108e6:	79fb      	ldrb	r3, [r7, #7]
 80108e8:	4619      	mov	r1, r3
 80108ea:	4807      	ldr	r0, [pc, #28]	; (8010908 <LCD_SetTransparency+0x40>)
 80108ec:	f7f7 f946 	bl	8007b7c <LTDC_LayerAlpha>
  }
  LTDC_ReloadConfig(LTDC_IMReload);
 80108f0:	2001      	movs	r0, #1
 80108f2:	f7f6 fed9 	bl	80076a8 <LTDC_ReloadConfig>
}
 80108f6:	bf00      	nop
 80108f8:	3708      	adds	r7, #8
 80108fa:	46bd      	mov	sp, r7
 80108fc:	bd80      	pop	{r7, pc}
 80108fe:	bf00      	nop
 8010900:	20002e30 	.word	0x20002e30
 8010904:	40016884 	.word	0x40016884
 8010908:	40016904 	.word	0x40016904

0801090c <LCD_GetFont>:
  * @brief  Gets the Text Font.
  * @param  None.
  * @retval the used font.
  */
sFONT *LCD_GetFont(void)
{
 801090c:	b480      	push	{r7}
 801090e:	af00      	add	r7, sp, #0
  return LCD_Currentfonts;
 8010910:	4b03      	ldr	r3, [pc, #12]	; (8010920 <LCD_GetFont+0x14>)
 8010912:	681b      	ldr	r3, [r3, #0]
}
 8010914:	4618      	mov	r0, r3
 8010916:	46bd      	mov	sp, r7
 8010918:	f85d 7b04 	ldr.w	r7, [sp], #4
 801091c:	4770      	bx	lr
 801091e:	bf00      	nop
 8010920:	20002e28 	.word	0x20002e28

08010924 <LCD_ClearLine>:
  *                                      0..26 if LCD_Currentfonts is Font12x12 or Font8x12
  *                                      0..39 if LCD_Currentfonts is Font8x8
  * @retval None
  */
void LCD_ClearLine(uint16_t Line)
{
 8010924:	b580      	push	{r7, lr}
 8010926:	b084      	sub	sp, #16
 8010928:	af00      	add	r7, sp, #0
 801092a:	4603      	mov	r3, r0
 801092c:	80fb      	strh	r3, [r7, #6]
  uint16_t refcolumn = 0;
 801092e:	2300      	movs	r3, #0
 8010930:	81fb      	strh	r3, [r7, #14]
  /* Send the string character by character on lCD */
  while ((refcolumn < LCD_PIXEL_WIDTH) && (((refcolumn + LCD_Currentfonts->Width)& 0xFFFF) >= LCD_Currentfonts->Width))
 8010932:	e00b      	b.n	801094c <LCD_ClearLine+0x28>
  {
    /* Display one character on LCD */
    LCD_DisplayChar(Line, refcolumn, ' ');
 8010934:	89f9      	ldrh	r1, [r7, #14]
 8010936:	88fb      	ldrh	r3, [r7, #6]
 8010938:	2220      	movs	r2, #32
 801093a:	4618      	mov	r0, r3
 801093c:	f000 f942 	bl	8010bc4 <LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += LCD_Currentfonts->Width;
 8010940:	4b0b      	ldr	r3, [pc, #44]	; (8010970 <LCD_ClearLine+0x4c>)
 8010942:	681b      	ldr	r3, [r3, #0]
 8010944:	889a      	ldrh	r2, [r3, #4]
 8010946:	89fb      	ldrh	r3, [r7, #14]
 8010948:	4413      	add	r3, r2
 801094a:	81fb      	strh	r3, [r7, #14]
  while ((refcolumn < LCD_PIXEL_WIDTH) && (((refcolumn + LCD_Currentfonts->Width)& 0xFFFF) >= LCD_Currentfonts->Width))
 801094c:	89fb      	ldrh	r3, [r7, #14]
 801094e:	2bef      	cmp	r3, #239	; 0xef
 8010950:	d80a      	bhi.n	8010968 <LCD_ClearLine+0x44>
 8010952:	4b07      	ldr	r3, [pc, #28]	; (8010970 <LCD_ClearLine+0x4c>)
 8010954:	681b      	ldr	r3, [r3, #0]
 8010956:	889a      	ldrh	r2, [r3, #4]
 8010958:	89fb      	ldrh	r3, [r7, #14]
 801095a:	4413      	add	r3, r2
 801095c:	b29a      	uxth	r2, r3
 801095e:	4b04      	ldr	r3, [pc, #16]	; (8010970 <LCD_ClearLine+0x4c>)
 8010960:	681b      	ldr	r3, [r3, #0]
 8010962:	889b      	ldrh	r3, [r3, #4]
 8010964:	429a      	cmp	r2, r3
 8010966:	d2e5      	bcs.n	8010934 <LCD_ClearLine+0x10>
  }
}
 8010968:	bf00      	nop
 801096a:	3710      	adds	r7, #16
 801096c:	46bd      	mov	sp, r7
 801096e:	bd80      	pop	{r7, pc}
 8010970:	20002e28 	.word	0x20002e28

08010974 <LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: the color of the background.
  * @retval None
  */
void LCD_Clear(uint16_t Color)
{
 8010974:	b480      	push	{r7}
 8010976:	b085      	sub	sp, #20
 8010978:	af00      	add	r7, sp, #0
 801097a:	4603      	mov	r3, r0
 801097c:	80fb      	strh	r3, [r7, #6]
  uint32_t index = 0;
 801097e:	2300      	movs	r3, #0
 8010980:	60fb      	str	r3, [r7, #12]
  
  /* erase memory */
  for (index = 0x00; index < BUFFER_OFFSET; index++)
 8010982:	2300      	movs	r3, #0
 8010984:	60fb      	str	r3, [r7, #12]
 8010986:	e00a      	b.n	801099e <LCD_Clear+0x2a>
  {
    *(__IO uint16_t*)(CurrentFrameBuffer + (2*index)) = Color;
 8010988:	68fb      	ldr	r3, [r7, #12]
 801098a:	005a      	lsls	r2, r3, #1
 801098c:	4b09      	ldr	r3, [pc, #36]	; (80109b4 <LCD_Clear+0x40>)
 801098e:	681b      	ldr	r3, [r3, #0]
 8010990:	4413      	add	r3, r2
 8010992:	461a      	mov	r2, r3
 8010994:	88fb      	ldrh	r3, [r7, #6]
 8010996:	8013      	strh	r3, [r2, #0]
  for (index = 0x00; index < BUFFER_OFFSET; index++)
 8010998:	68fb      	ldr	r3, [r7, #12]
 801099a:	3301      	adds	r3, #1
 801099c:	60fb      	str	r3, [r7, #12]
 801099e:	68fb      	ldr	r3, [r7, #12]
 80109a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80109a4:	d3f0      	bcc.n	8010988 <LCD_Clear+0x14>
  } 
}
 80109a6:	bf00      	nop
 80109a8:	3714      	adds	r7, #20
 80109aa:	46bd      	mov	sp, r7
 80109ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109b0:	4770      	bx	lr
 80109b2:	bf00      	nop
 80109b4:	200000d0 	.word	0x200000d0

080109b8 <LCD_SetCursor>:
  * @param  Xpos: specifies the X position.
  * @param  Ypos: specifies the Y position. 
  * @retval Display Address
  */
uint32_t LCD_SetCursor(uint16_t Xpos, uint16_t Ypos)
{  
 80109b8:	b480      	push	{r7}
 80109ba:	b083      	sub	sp, #12
 80109bc:	af00      	add	r7, sp, #0
 80109be:	4603      	mov	r3, r0
 80109c0:	460a      	mov	r2, r1
 80109c2:	80fb      	strh	r3, [r7, #6]
 80109c4:	4613      	mov	r3, r2
 80109c6:	80bb      	strh	r3, [r7, #4]
  return CurrentFrameBuffer + 2*(Xpos + (LCD_PIXEL_WIDTH*Ypos));
 80109c8:	88f9      	ldrh	r1, [r7, #6]
 80109ca:	88ba      	ldrh	r2, [r7, #4]
 80109cc:	4613      	mov	r3, r2
 80109ce:	011b      	lsls	r3, r3, #4
 80109d0:	1a9b      	subs	r3, r3, r2
 80109d2:	011b      	lsls	r3, r3, #4
 80109d4:	440b      	add	r3, r1
 80109d6:	005b      	lsls	r3, r3, #1
 80109d8:	461a      	mov	r2, r3
 80109da:	4b04      	ldr	r3, [pc, #16]	; (80109ec <LCD_SetCursor+0x34>)
 80109dc:	681b      	ldr	r3, [r3, #0]
 80109de:	4413      	add	r3, r2
}
 80109e0:	4618      	mov	r0, r3
 80109e2:	370c      	adds	r7, #12
 80109e4:	46bd      	mov	sp, r7
 80109e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109ea:	4770      	bx	lr
 80109ec:	200000d0 	.word	0x200000d0

080109f0 <LCD_SetColorKeying>:
  * @brief  Config and Sets the color Keying.
  * @param  RGBValue: Specifies the Color reference. 
  * @retval None
  */
void LCD_SetColorKeying(uint32_t RGBValue)
{  
 80109f0:	b580      	push	{r7, lr}
 80109f2:	b086      	sub	sp, #24
 80109f4:	af00      	add	r7, sp, #0
 80109f6:	6078      	str	r0, [r7, #4]
  LTDC_ColorKeying_InitTypeDef   LTDC_colorkeying_InitStruct;
  
  /* configure the color Keying */
  LTDC_colorkeying_InitStruct.LTDC_ColorKeyBlue = 0x0000FF & RGBValue;
 80109f8:	687b      	ldr	r3, [r7, #4]
 80109fa:	b2db      	uxtb	r3, r3
 80109fc:	60fb      	str	r3, [r7, #12]
  LTDC_colorkeying_InitStruct.LTDC_ColorKeyGreen = (0x00FF00 & RGBValue) >> 8;
 80109fe:	687b      	ldr	r3, [r7, #4]
 8010a00:	0a1b      	lsrs	r3, r3, #8
 8010a02:	b2db      	uxtb	r3, r3
 8010a04:	613b      	str	r3, [r7, #16]
  LTDC_colorkeying_InitStruct.LTDC_ColorKeyRed = (0xFF0000 & RGBValue) >> 16;  
 8010a06:	687b      	ldr	r3, [r7, #4]
 8010a08:	0c1b      	lsrs	r3, r3, #16
 8010a0a:	b2db      	uxtb	r3, r3
 8010a0c:	617b      	str	r3, [r7, #20]

  if (CurrentLayer == LCD_BACKGROUND_LAYER)
 8010a0e:	4b0e      	ldr	r3, [pc, #56]	; (8010a48 <LCD_SetColorKeying+0x58>)
 8010a10:	681b      	ldr	r3, [r3, #0]
 8010a12:	2b00      	cmp	r3, #0
 8010a14:	d10a      	bne.n	8010a2c <LCD_SetColorKeying+0x3c>
  {   
    /* Enable the color Keying for Layer1 */
    LTDC_ColorKeyingConfig(LTDC_Layer1, &LTDC_colorkeying_InitStruct, ENABLE);
 8010a16:	f107 030c 	add.w	r3, r7, #12
 8010a1a:	2201      	movs	r2, #1
 8010a1c:	4619      	mov	r1, r3
 8010a1e:	480b      	ldr	r0, [pc, #44]	; (8010a4c <LCD_SetColorKeying+0x5c>)
 8010a20:	f7f6 ff8c 	bl	800793c <LTDC_ColorKeyingConfig>
    LTDC_ReloadConfig(LTDC_IMReload);
 8010a24:	2001      	movs	r0, #1
 8010a26:	f7f6 fe3f 	bl	80076a8 <LTDC_ReloadConfig>
  {
    /* Enable the color Keying for Layer2 */
    LTDC_ColorKeyingConfig(LTDC_Layer2, &LTDC_colorkeying_InitStruct, ENABLE);
    LTDC_ReloadConfig(LTDC_IMReload);
  }
}
 8010a2a:	e009      	b.n	8010a40 <LCD_SetColorKeying+0x50>
    LTDC_ColorKeyingConfig(LTDC_Layer2, &LTDC_colorkeying_InitStruct, ENABLE);
 8010a2c:	f107 030c 	add.w	r3, r7, #12
 8010a30:	2201      	movs	r2, #1
 8010a32:	4619      	mov	r1, r3
 8010a34:	4806      	ldr	r0, [pc, #24]	; (8010a50 <LCD_SetColorKeying+0x60>)
 8010a36:	f7f6 ff81 	bl	800793c <LTDC_ColorKeyingConfig>
    LTDC_ReloadConfig(LTDC_IMReload);
 8010a3a:	2001      	movs	r0, #1
 8010a3c:	f7f6 fe34 	bl	80076a8 <LTDC_ReloadConfig>
}
 8010a40:	bf00      	nop
 8010a42:	3718      	adds	r7, #24
 8010a44:	46bd      	mov	sp, r7
 8010a46:	bd80      	pop	{r7, pc}
 8010a48:	20002e30 	.word	0x20002e30
 8010a4c:	40016884 	.word	0x40016884
 8010a50:	40016904 	.word	0x40016904

08010a54 <LCD_ReSetColorKeying>:
  * @brief  Disable the color Keying.
  * @param  RGBValue: Specifies the Color reference. 
  * @retval None
  */
void LCD_ReSetColorKeying(void)
{
 8010a54:	b580      	push	{r7, lr}
 8010a56:	b084      	sub	sp, #16
 8010a58:	af00      	add	r7, sp, #0
  LTDC_ColorKeying_InitTypeDef   LTDC_colorkeying_InitStruct;
  
  if (CurrentLayer == LCD_BACKGROUND_LAYER)
 8010a5a:	4b0d      	ldr	r3, [pc, #52]	; (8010a90 <LCD_ReSetColorKeying+0x3c>)
 8010a5c:	681b      	ldr	r3, [r3, #0]
 8010a5e:	2b00      	cmp	r3, #0
 8010a60:	d109      	bne.n	8010a76 <LCD_ReSetColorKeying+0x22>
  {   
    /* Disable the color Keying for Layer1 */
    LTDC_ColorKeyingConfig(LTDC_Layer1, &LTDC_colorkeying_InitStruct, DISABLE);
 8010a62:	1d3b      	adds	r3, r7, #4
 8010a64:	2200      	movs	r2, #0
 8010a66:	4619      	mov	r1, r3
 8010a68:	480a      	ldr	r0, [pc, #40]	; (8010a94 <LCD_ReSetColorKeying+0x40>)
 8010a6a:	f7f6 ff67 	bl	800793c <LTDC_ColorKeyingConfig>
    LTDC_ReloadConfig(LTDC_IMReload);
 8010a6e:	2001      	movs	r0, #1
 8010a70:	f7f6 fe1a 	bl	80076a8 <LTDC_ReloadConfig>
  {
    /* Disable the color Keying for Layer2 */
    LTDC_ColorKeyingConfig(LTDC_Layer2, &LTDC_colorkeying_InitStruct, DISABLE);
    LTDC_ReloadConfig(LTDC_IMReload);
  }
} 
 8010a74:	e008      	b.n	8010a88 <LCD_ReSetColorKeying+0x34>
    LTDC_ColorKeyingConfig(LTDC_Layer2, &LTDC_colorkeying_InitStruct, DISABLE);
 8010a76:	1d3b      	adds	r3, r7, #4
 8010a78:	2200      	movs	r2, #0
 8010a7a:	4619      	mov	r1, r3
 8010a7c:	4806      	ldr	r0, [pc, #24]	; (8010a98 <LCD_ReSetColorKeying+0x44>)
 8010a7e:	f7f6 ff5d 	bl	800793c <LTDC_ColorKeyingConfig>
    LTDC_ReloadConfig(LTDC_IMReload);
 8010a82:	2001      	movs	r0, #1
 8010a84:	f7f6 fe10 	bl	80076a8 <LTDC_ReloadConfig>
} 
 8010a88:	bf00      	nop
 8010a8a:	3710      	adds	r7, #16
 8010a8c:	46bd      	mov	sp, r7
 8010a8e:	bd80      	pop	{r7, pc}
 8010a90:	20002e30 	.word	0x20002e30
 8010a94:	40016884 	.word	0x40016884
 8010a98:	40016904 	.word	0x40016904

08010a9c <LCD_DrawChar>:
  * @param  Ypos: start column address.
  * @param  c: pointer to the character data.
  * @retval None
  */
void LCD_DrawChar(uint16_t Xpos, uint16_t Ypos, const uint16_t *c)
{
 8010a9c:	b480      	push	{r7}
 8010a9e:	b087      	sub	sp, #28
 8010aa0:	af00      	add	r7, sp, #0
 8010aa2:	4603      	mov	r3, r0
 8010aa4:	603a      	str	r2, [r7, #0]
 8010aa6:	80fb      	strh	r3, [r7, #6]
 8010aa8:	460b      	mov	r3, r1
 8010aaa:	80bb      	strh	r3, [r7, #4]
  uint32_t index = 0, counter = 0, xpos =0;
 8010aac:	2300      	movs	r3, #0
 8010aae:	617b      	str	r3, [r7, #20]
 8010ab0:	2300      	movs	r3, #0
 8010ab2:	613b      	str	r3, [r7, #16]
 8010ab4:	2300      	movs	r3, #0
 8010ab6:	60bb      	str	r3, [r7, #8]
  uint32_t  Xaddress = 0;
 8010ab8:	2300      	movs	r3, #0
 8010aba:	60fb      	str	r3, [r7, #12]
  
  xpos = Xpos*LCD_PIXEL_WIDTH*2;
 8010abc:	88fa      	ldrh	r2, [r7, #6]
 8010abe:	4613      	mov	r3, r2
 8010ac0:	011b      	lsls	r3, r3, #4
 8010ac2:	1a9b      	subs	r3, r3, r2
 8010ac4:	015b      	lsls	r3, r3, #5
 8010ac6:	60bb      	str	r3, [r7, #8]
  Xaddress += Ypos;
 8010ac8:	88bb      	ldrh	r3, [r7, #4]
 8010aca:	68fa      	ldr	r2, [r7, #12]
 8010acc:	4413      	add	r3, r2
 8010ace:	60fb      	str	r3, [r7, #12]
  
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 8010ad0:	2300      	movs	r3, #0
 8010ad2:	617b      	str	r3, [r7, #20]
 8010ad4:	e05f      	b.n	8010b96 <LCD_DrawChar+0xfa>
  {
    
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 8010ad6:	2300      	movs	r3, #0
 8010ad8:	613b      	str	r3, [r7, #16]
 8010ada:	e04a      	b.n	8010b72 <LCD_DrawChar+0xd6>
    {
          
      if((((c[index] & ((0x80 << ((LCD_Currentfonts->Width / 12 ) * 8 ) ) >> counter)) == 0x00) &&(LCD_Currentfonts->Width <= 12))||
 8010adc:	697b      	ldr	r3, [r7, #20]
 8010ade:	005b      	lsls	r3, r3, #1
 8010ae0:	683a      	ldr	r2, [r7, #0]
 8010ae2:	4413      	add	r3, r2
 8010ae4:	881b      	ldrh	r3, [r3, #0]
 8010ae6:	4619      	mov	r1, r3
 8010ae8:	4b31      	ldr	r3, [pc, #196]	; (8010bb0 <LCD_DrawChar+0x114>)
 8010aea:	681b      	ldr	r3, [r3, #0]
 8010aec:	889b      	ldrh	r3, [r3, #4]
 8010aee:	4a31      	ldr	r2, [pc, #196]	; (8010bb4 <LCD_DrawChar+0x118>)
 8010af0:	fba2 2303 	umull	r2, r3, r2, r3
 8010af4:	08db      	lsrs	r3, r3, #3
 8010af6:	b29b      	uxth	r3, r3
 8010af8:	00db      	lsls	r3, r3, #3
 8010afa:	2280      	movs	r2, #128	; 0x80
 8010afc:	409a      	lsls	r2, r3
 8010afe:	693b      	ldr	r3, [r7, #16]
 8010b00:	fa42 f303 	asr.w	r3, r2, r3
 8010b04:	400b      	ands	r3, r1
 8010b06:	2b00      	cmp	r3, #0
 8010b08:	d104      	bne.n	8010b14 <LCD_DrawChar+0x78>
 8010b0a:	4b29      	ldr	r3, [pc, #164]	; (8010bb0 <LCD_DrawChar+0x114>)
 8010b0c:	681b      	ldr	r3, [r3, #0]
 8010b0e:	889b      	ldrh	r3, [r3, #4]
 8010b10:	2b0c      	cmp	r3, #12
 8010b12:	d911      	bls.n	8010b38 <LCD_DrawChar+0x9c>
        (((c[index] & (0x1 << counter)) == 0x00)&&(LCD_Currentfonts->Width > 12 )))
 8010b14:	697b      	ldr	r3, [r7, #20]
 8010b16:	005b      	lsls	r3, r3, #1
 8010b18:	683a      	ldr	r2, [r7, #0]
 8010b1a:	4413      	add	r3, r2
 8010b1c:	881b      	ldrh	r3, [r3, #0]
 8010b1e:	461a      	mov	r2, r3
 8010b20:	693b      	ldr	r3, [r7, #16]
 8010b22:	fa42 f303 	asr.w	r3, r2, r3
 8010b26:	f003 0301 	and.w	r3, r3, #1
      if((((c[index] & ((0x80 << ((LCD_Currentfonts->Width / 12 ) * 8 ) ) >> counter)) == 0x00) &&(LCD_Currentfonts->Width <= 12))||
 8010b2a:	2b00      	cmp	r3, #0
 8010b2c:	d110      	bne.n	8010b50 <LCD_DrawChar+0xb4>
        (((c[index] & (0x1 << counter)) == 0x00)&&(LCD_Currentfonts->Width > 12 )))
 8010b2e:	4b20      	ldr	r3, [pc, #128]	; (8010bb0 <LCD_DrawChar+0x114>)
 8010b30:	681b      	ldr	r3, [r3, #0]
 8010b32:	889b      	ldrh	r3, [r3, #4]
 8010b34:	2b0c      	cmp	r3, #12
 8010b36:	d90b      	bls.n	8010b50 <LCD_DrawChar+0xb4>
      {
          /* Write data value to all SDRAM memory */
         *(__IO uint16_t*) (CurrentFrameBuffer + (2*Xaddress) + xpos) = CurrentBackColor;
 8010b38:	68fb      	ldr	r3, [r7, #12]
 8010b3a:	005a      	lsls	r2, r3, #1
 8010b3c:	4b1e      	ldr	r3, [pc, #120]	; (8010bb8 <LCD_DrawChar+0x11c>)
 8010b3e:	681b      	ldr	r3, [r3, #0]
 8010b40:	441a      	add	r2, r3
 8010b42:	68bb      	ldr	r3, [r7, #8]
 8010b44:	4413      	add	r3, r2
 8010b46:	461a      	mov	r2, r3
 8010b48:	4b1c      	ldr	r3, [pc, #112]	; (8010bbc <LCD_DrawChar+0x120>)
 8010b4a:	881b      	ldrh	r3, [r3, #0]
 8010b4c:	8013      	strh	r3, [r2, #0]
 8010b4e:	e00a      	b.n	8010b66 <LCD_DrawChar+0xca>
      }
      else
      {
          /* Write data value to all SDRAM memory */
         *(__IO uint16_t*) (CurrentFrameBuffer + (2*Xaddress) + xpos) = CurrentTextColor;         
 8010b50:	68fb      	ldr	r3, [r7, #12]
 8010b52:	005a      	lsls	r2, r3, #1
 8010b54:	4b18      	ldr	r3, [pc, #96]	; (8010bb8 <LCD_DrawChar+0x11c>)
 8010b56:	681b      	ldr	r3, [r3, #0]
 8010b58:	441a      	add	r2, r3
 8010b5a:	68bb      	ldr	r3, [r7, #8]
 8010b5c:	4413      	add	r3, r2
 8010b5e:	461a      	mov	r2, r3
 8010b60:	4b17      	ldr	r3, [pc, #92]	; (8010bc0 <LCD_DrawChar+0x124>)
 8010b62:	881b      	ldrh	r3, [r3, #0]
 8010b64:	8013      	strh	r3, [r2, #0]
      }
      Xaddress++;
 8010b66:	68fb      	ldr	r3, [r7, #12]
 8010b68:	3301      	adds	r3, #1
 8010b6a:	60fb      	str	r3, [r7, #12]
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 8010b6c:	693b      	ldr	r3, [r7, #16]
 8010b6e:	3301      	adds	r3, #1
 8010b70:	613b      	str	r3, [r7, #16]
 8010b72:	4b0f      	ldr	r3, [pc, #60]	; (8010bb0 <LCD_DrawChar+0x114>)
 8010b74:	681b      	ldr	r3, [r3, #0]
 8010b76:	889b      	ldrh	r3, [r3, #4]
 8010b78:	461a      	mov	r2, r3
 8010b7a:	693b      	ldr	r3, [r7, #16]
 8010b7c:	4293      	cmp	r3, r2
 8010b7e:	d3ad      	bcc.n	8010adc <LCD_DrawChar+0x40>
    }
      Xaddress += (LCD_PIXEL_WIDTH - LCD_Currentfonts->Width);
 8010b80:	4b0b      	ldr	r3, [pc, #44]	; (8010bb0 <LCD_DrawChar+0x114>)
 8010b82:	681b      	ldr	r3, [r3, #0]
 8010b84:	889b      	ldrh	r3, [r3, #4]
 8010b86:	461a      	mov	r2, r3
 8010b88:	68fb      	ldr	r3, [r7, #12]
 8010b8a:	1a9b      	subs	r3, r3, r2
 8010b8c:	33f0      	adds	r3, #240	; 0xf0
 8010b8e:	60fb      	str	r3, [r7, #12]
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 8010b90:	697b      	ldr	r3, [r7, #20]
 8010b92:	3301      	adds	r3, #1
 8010b94:	617b      	str	r3, [r7, #20]
 8010b96:	4b06      	ldr	r3, [pc, #24]	; (8010bb0 <LCD_DrawChar+0x114>)
 8010b98:	681b      	ldr	r3, [r3, #0]
 8010b9a:	88db      	ldrh	r3, [r3, #6]
 8010b9c:	461a      	mov	r2, r3
 8010b9e:	697b      	ldr	r3, [r7, #20]
 8010ba0:	4293      	cmp	r3, r2
 8010ba2:	d398      	bcc.n	8010ad6 <LCD_DrawChar+0x3a>
  }
}
 8010ba4:	bf00      	nop
 8010ba6:	371c      	adds	r7, #28
 8010ba8:	46bd      	mov	sp, r7
 8010baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bae:	4770      	bx	lr
 8010bb0:	20002e28 	.word	0x20002e28
 8010bb4:	aaaaaaab 	.word	0xaaaaaaab
 8010bb8:	200000d0 	.word	0x200000d0
 8010bbc:	200000cc 	.word	0x200000cc
 8010bc0:	20002e2c 	.word	0x20002e2c

08010bc4 <LCD_DisplayChar>:
  * @param  Column: start column address.
  * @param  Ascii: character ascii code, must be between 0x20 and 0x7E.
  * @retval None
  */
void LCD_DisplayChar(uint16_t Line, uint16_t Column, uint8_t Ascii)
{
 8010bc4:	b580      	push	{r7, lr}
 8010bc6:	b082      	sub	sp, #8
 8010bc8:	af00      	add	r7, sp, #0
 8010bca:	4603      	mov	r3, r0
 8010bcc:	80fb      	strh	r3, [r7, #6]
 8010bce:	460b      	mov	r3, r1
 8010bd0:	80bb      	strh	r3, [r7, #4]
 8010bd2:	4613      	mov	r3, r2
 8010bd4:	70fb      	strb	r3, [r7, #3]
  Ascii -= 32;
 8010bd6:	78fb      	ldrb	r3, [r7, #3]
 8010bd8:	3b20      	subs	r3, #32
 8010bda:	70fb      	strb	r3, [r7, #3]

  LCD_DrawChar(Line, Column, &LCD_Currentfonts->table[Ascii * LCD_Currentfonts->Height]);
 8010bdc:	4b09      	ldr	r3, [pc, #36]	; (8010c04 <LCD_DisplayChar+0x40>)
 8010bde:	681b      	ldr	r3, [r3, #0]
 8010be0:	681a      	ldr	r2, [r3, #0]
 8010be2:	78fb      	ldrb	r3, [r7, #3]
 8010be4:	4907      	ldr	r1, [pc, #28]	; (8010c04 <LCD_DisplayChar+0x40>)
 8010be6:	6809      	ldr	r1, [r1, #0]
 8010be8:	88c9      	ldrh	r1, [r1, #6]
 8010bea:	fb01 f303 	mul.w	r3, r1, r3
 8010bee:	005b      	lsls	r3, r3, #1
 8010bf0:	441a      	add	r2, r3
 8010bf2:	88b9      	ldrh	r1, [r7, #4]
 8010bf4:	88fb      	ldrh	r3, [r7, #6]
 8010bf6:	4618      	mov	r0, r3
 8010bf8:	f7ff ff50 	bl	8010a9c <LCD_DrawChar>
}
 8010bfc:	bf00      	nop
 8010bfe:	3708      	adds	r7, #8
 8010c00:	46bd      	mov	sp, r7
 8010c02:	bd80      	pop	{r7, pc}
 8010c04:	20002e28 	.word	0x20002e28

08010c08 <LCD_DisplayStringLine>:
  *     @arg Linex: where x can be 0..9
  * @param  *ptr: pointer to string to display on LCD.
  * @retval None
  */
void LCD_DisplayStringLine(uint16_t Line, uint8_t *ptr)
{  
 8010c08:	b580      	push	{r7, lr}
 8010c0a:	b084      	sub	sp, #16
 8010c0c:	af00      	add	r7, sp, #0
 8010c0e:	4603      	mov	r3, r0
 8010c10:	6039      	str	r1, [r7, #0]
 8010c12:	80fb      	strh	r3, [r7, #6]
  uint16_t refcolumn = 0;
 8010c14:	2300      	movs	r3, #0
 8010c16:	81fb      	strh	r3, [r7, #14]
  /* Send the string character by character on lCD */
  while ((refcolumn < LCD_PIXEL_WIDTH) && ((*ptr != 0) & (((refcolumn + LCD_Currentfonts->Width) & 0xFFFF) >= LCD_Currentfonts->Width)))
 8010c18:	e00f      	b.n	8010c3a <LCD_DisplayStringLine+0x32>
  {
    /* Display one character on LCD */
    LCD_DisplayChar(Line, refcolumn, *ptr);
 8010c1a:	683b      	ldr	r3, [r7, #0]
 8010c1c:	781a      	ldrb	r2, [r3, #0]
 8010c1e:	89f9      	ldrh	r1, [r7, #14]
 8010c20:	88fb      	ldrh	r3, [r7, #6]
 8010c22:	4618      	mov	r0, r3
 8010c24:	f7ff ffce 	bl	8010bc4 <LCD_DisplayChar>
    /* Decrement the column position by width */
    refcolumn += LCD_Currentfonts->Width;
 8010c28:	4b14      	ldr	r3, [pc, #80]	; (8010c7c <LCD_DisplayStringLine+0x74>)
 8010c2a:	681b      	ldr	r3, [r3, #0]
 8010c2c:	889a      	ldrh	r2, [r3, #4]
 8010c2e:	89fb      	ldrh	r3, [r7, #14]
 8010c30:	4413      	add	r3, r2
 8010c32:	81fb      	strh	r3, [r7, #14]
    /* Point on the next character */
    ptr++;
 8010c34:	683b      	ldr	r3, [r7, #0]
 8010c36:	3301      	adds	r3, #1
 8010c38:	603b      	str	r3, [r7, #0]
  while ((refcolumn < LCD_PIXEL_WIDTH) && ((*ptr != 0) & (((refcolumn + LCD_Currentfonts->Width) & 0xFFFF) >= LCD_Currentfonts->Width)))
 8010c3a:	89fb      	ldrh	r3, [r7, #14]
 8010c3c:	2bef      	cmp	r3, #239	; 0xef
 8010c3e:	d818      	bhi.n	8010c72 <LCD_DisplayStringLine+0x6a>
 8010c40:	683b      	ldr	r3, [r7, #0]
 8010c42:	781b      	ldrb	r3, [r3, #0]
 8010c44:	2b00      	cmp	r3, #0
 8010c46:	bf14      	ite	ne
 8010c48:	2301      	movne	r3, #1
 8010c4a:	2300      	moveq	r3, #0
 8010c4c:	b2da      	uxtb	r2, r3
 8010c4e:	4b0b      	ldr	r3, [pc, #44]	; (8010c7c <LCD_DisplayStringLine+0x74>)
 8010c50:	681b      	ldr	r3, [r3, #0]
 8010c52:	8899      	ldrh	r1, [r3, #4]
 8010c54:	89fb      	ldrh	r3, [r7, #14]
 8010c56:	440b      	add	r3, r1
 8010c58:	b299      	uxth	r1, r3
 8010c5a:	4b08      	ldr	r3, [pc, #32]	; (8010c7c <LCD_DisplayStringLine+0x74>)
 8010c5c:	681b      	ldr	r3, [r3, #0]
 8010c5e:	889b      	ldrh	r3, [r3, #4]
 8010c60:	4299      	cmp	r1, r3
 8010c62:	bf2c      	ite	cs
 8010c64:	2301      	movcs	r3, #1
 8010c66:	2300      	movcc	r3, #0
 8010c68:	b2db      	uxtb	r3, r3
 8010c6a:	4013      	ands	r3, r2
 8010c6c:	b2db      	uxtb	r3, r3
 8010c6e:	2b00      	cmp	r3, #0
 8010c70:	d1d3      	bne.n	8010c1a <LCD_DisplayStringLine+0x12>
  }
}
 8010c72:	bf00      	nop
 8010c74:	3710      	adds	r7, #16
 8010c76:	46bd      	mov	sp, r7
 8010c78:	bd80      	pop	{r7, pc}
 8010c7a:	bf00      	nop
 8010c7c:	20002e28 	.word	0x20002e28

08010c80 <LCD_SetDisplayWindow>:
  * @param  Height: display window height, can be a value from 0 to 320.
  * @param  Width: display window width, can be a value from 0 to 240.
  * @retval None
  */
void LCD_SetDisplayWindow(uint16_t Xpos, uint16_t Ypos, uint16_t Height, uint16_t Width)
{
 8010c80:	b590      	push	{r4, r7, lr}
 8010c82:	b083      	sub	sp, #12
 8010c84:	af00      	add	r7, sp, #0
 8010c86:	4604      	mov	r4, r0
 8010c88:	4608      	mov	r0, r1
 8010c8a:	4611      	mov	r1, r2
 8010c8c:	461a      	mov	r2, r3
 8010c8e:	4623      	mov	r3, r4
 8010c90:	80fb      	strh	r3, [r7, #6]
 8010c92:	4603      	mov	r3, r0
 8010c94:	80bb      	strh	r3, [r7, #4]
 8010c96:	460b      	mov	r3, r1
 8010c98:	807b      	strh	r3, [r7, #2]
 8010c9a:	4613      	mov	r3, r2
 8010c9c:	803b      	strh	r3, [r7, #0]

  if (CurrentLayer == LCD_BACKGROUND_LAYER)
 8010c9e:	4b16      	ldr	r3, [pc, #88]	; (8010cf8 <LCD_SetDisplayWindow+0x78>)
 8010ca0:	681b      	ldr	r3, [r3, #0]
 8010ca2:	2b00      	cmp	r3, #0
 8010ca4:	d112      	bne.n	8010ccc <LCD_SetDisplayWindow+0x4c>
  { 
    /* reconfigure the layer1 position */
    LTDC_LayerPosition(LTDC_Layer1, Xpos, Ypos);
 8010ca6:	88ba      	ldrh	r2, [r7, #4]
 8010ca8:	88fb      	ldrh	r3, [r7, #6]
 8010caa:	4619      	mov	r1, r3
 8010cac:	4813      	ldr	r0, [pc, #76]	; (8010cfc <LCD_SetDisplayWindow+0x7c>)
 8010cae:	f7f6 fef6 	bl	8007a9e <LTDC_LayerPosition>
    LTDC_ReloadConfig(LTDC_IMReload);
 8010cb2:	2001      	movs	r0, #1
 8010cb4:	f7f6 fcf8 	bl	80076a8 <LTDC_ReloadConfig>
    
    /* reconfigure the layer1 size */
    LTDC_LayerSize(LTDC_Layer1, Width, Height);
 8010cb8:	883b      	ldrh	r3, [r7, #0]
 8010cba:	887a      	ldrh	r2, [r7, #2]
 8010cbc:	4619      	mov	r1, r3
 8010cbe:	480f      	ldr	r0, [pc, #60]	; (8010cfc <LCD_SetDisplayWindow+0x7c>)
 8010cc0:	f7f6 ff79 	bl	8007bb6 <LTDC_LayerSize>
    LTDC_ReloadConfig(LTDC_IMReload);
 8010cc4:	2001      	movs	r0, #1
 8010cc6:	f7f6 fcef 	bl	80076a8 <LTDC_ReloadConfig>
   
   /* reconfigure the layer2 size */
    LTDC_LayerSize(LTDC_Layer2, Width, Height);
    LTDC_ReloadConfig(LTDC_IMReload);
  }
}
 8010cca:	e011      	b.n	8010cf0 <LCD_SetDisplayWindow+0x70>
    LTDC_LayerPosition(LTDC_Layer2, Xpos, Ypos);
 8010ccc:	88ba      	ldrh	r2, [r7, #4]
 8010cce:	88fb      	ldrh	r3, [r7, #6]
 8010cd0:	4619      	mov	r1, r3
 8010cd2:	480b      	ldr	r0, [pc, #44]	; (8010d00 <LCD_SetDisplayWindow+0x80>)
 8010cd4:	f7f6 fee3 	bl	8007a9e <LTDC_LayerPosition>
    LTDC_ReloadConfig(LTDC_IMReload); 
 8010cd8:	2001      	movs	r0, #1
 8010cda:	f7f6 fce5 	bl	80076a8 <LTDC_ReloadConfig>
    LTDC_LayerSize(LTDC_Layer2, Width, Height);
 8010cde:	883b      	ldrh	r3, [r7, #0]
 8010ce0:	887a      	ldrh	r2, [r7, #2]
 8010ce2:	4619      	mov	r1, r3
 8010ce4:	4806      	ldr	r0, [pc, #24]	; (8010d00 <LCD_SetDisplayWindow+0x80>)
 8010ce6:	f7f6 ff66 	bl	8007bb6 <LTDC_LayerSize>
    LTDC_ReloadConfig(LTDC_IMReload);
 8010cea:	2001      	movs	r0, #1
 8010cec:	f7f6 fcdc 	bl	80076a8 <LTDC_ReloadConfig>
}
 8010cf0:	bf00      	nop
 8010cf2:	370c      	adds	r7, #12
 8010cf4:	46bd      	mov	sp, r7
 8010cf6:	bd90      	pop	{r4, r7, pc}
 8010cf8:	20002e30 	.word	0x20002e30
 8010cfc:	40016884 	.word	0x40016884
 8010d00:	40016904 	.word	0x40016904

08010d04 <LCD_WindowModeDisable>:
  * @brief  Disables LCD Window mode.
  * @param  None
  * @retval None
  */
void LCD_WindowModeDisable(void)
{
 8010d04:	b580      	push	{r7, lr}
 8010d06:	af00      	add	r7, sp, #0
  LCD_SetDisplayWindow(0, 0, LCD_PIXEL_HEIGHT, LCD_PIXEL_WIDTH); 
 8010d08:	23f0      	movs	r3, #240	; 0xf0
 8010d0a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8010d0e:	2100      	movs	r1, #0
 8010d10:	2000      	movs	r0, #0
 8010d12:	f7ff ffb5 	bl	8010c80 <LCD_SetDisplayWindow>
}
 8010d16:	bf00      	nop
 8010d18:	bd80      	pop	{r7, pc}

08010d1a <LCD_DrawLine>:
  * @param Direction: line direction.
  *   This parameter can be one of the following values: LCD_DIR_HORIZONTAL or LCD_DIR_VERTICAL.
  * @retval None
  */
void LCD_DrawLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length, uint8_t Direction)
{
 8010d1a:	b590      	push	{r4, r7, lr}
 8010d1c:	b091      	sub	sp, #68	; 0x44
 8010d1e:	af00      	add	r7, sp, #0
 8010d20:	4604      	mov	r4, r0
 8010d22:	4608      	mov	r0, r1
 8010d24:	4611      	mov	r1, r2
 8010d26:	461a      	mov	r2, r3
 8010d28:	4623      	mov	r3, r4
 8010d2a:	80fb      	strh	r3, [r7, #6]
 8010d2c:	4603      	mov	r3, r0
 8010d2e:	80bb      	strh	r3, [r7, #4]
 8010d30:	460b      	mov	r3, r1
 8010d32:	807b      	strh	r3, [r7, #2]
 8010d34:	4613      	mov	r3, r2
 8010d36:	707b      	strb	r3, [r7, #1]
  DMA2D_InitTypeDef      DMA2D_InitStruct;
  
  uint32_t  Xaddress = 0;
 8010d38:	2300      	movs	r3, #0
 8010d3a:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint16_t Red_Value = 0, Green_Value = 0, Blue_Value = 0;
 8010d3c:	2300      	movs	r3, #0
 8010d3e:	877b      	strh	r3, [r7, #58]	; 0x3a
 8010d40:	2300      	movs	r3, #0
 8010d42:	873b      	strh	r3, [r7, #56]	; 0x38
 8010d44:	2300      	movs	r3, #0
 8010d46:	86fb      	strh	r3, [r7, #54]	; 0x36
  
  Xaddress = CurrentFrameBuffer + 2*(LCD_PIXEL_WIDTH*Ypos + Xpos);
 8010d48:	88ba      	ldrh	r2, [r7, #4]
 8010d4a:	4613      	mov	r3, r2
 8010d4c:	011b      	lsls	r3, r3, #4
 8010d4e:	1a9b      	subs	r3, r3, r2
 8010d50:	011b      	lsls	r3, r3, #4
 8010d52:	461a      	mov	r2, r3
 8010d54:	88fb      	ldrh	r3, [r7, #6]
 8010d56:	4413      	add	r3, r2
 8010d58:	005b      	lsls	r3, r3, #1
 8010d5a:	461a      	mov	r2, r3
 8010d5c:	4b23      	ldr	r3, [pc, #140]	; (8010dec <LCD_DrawLine+0xd2>)
 8010d5e:	681b      	ldr	r3, [r3, #0]
 8010d60:	4413      	add	r3, r2
 8010d62:	63fb      	str	r3, [r7, #60]	; 0x3c
 
  Red_Value = (0xF800 & CurrentTextColor) >> 11;
 8010d64:	4b22      	ldr	r3, [pc, #136]	; (8010df0 <LCD_DrawLine+0xd6>)
 8010d66:	881b      	ldrh	r3, [r3, #0]
 8010d68:	0adb      	lsrs	r3, r3, #11
 8010d6a:	877b      	strh	r3, [r7, #58]	; 0x3a
  Blue_Value = 0x001F & CurrentTextColor;
 8010d6c:	4b20      	ldr	r3, [pc, #128]	; (8010df0 <LCD_DrawLine+0xd6>)
 8010d6e:	881b      	ldrh	r3, [r3, #0]
 8010d70:	f003 031f 	and.w	r3, r3, #31
 8010d74:	86fb      	strh	r3, [r7, #54]	; 0x36
  Green_Value = (0x07E0 & CurrentTextColor) >> 5;
 8010d76:	4b1e      	ldr	r3, [pc, #120]	; (8010df0 <LCD_DrawLine+0xd6>)
 8010d78:	881b      	ldrh	r3, [r3, #0]
 8010d7a:	095b      	lsrs	r3, r3, #5
 8010d7c:	b29b      	uxth	r3, r3
 8010d7e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010d82:	873b      	strh	r3, [r7, #56]	; 0x38

  /* Configure DMA2D */    
  DMA2D_DeInit();  
 8010d84:	f7f3 fa8a 	bl	800429c <DMA2D_DeInit>
  DMA2D_InitStruct.DMA2D_Mode = DMA2D_R2M;       
 8010d88:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8010d8c:	60fb      	str	r3, [r7, #12]
  DMA2D_InitStruct.DMA2D_CMode = DMA2D_RGB565;      
 8010d8e:	2302      	movs	r3, #2
 8010d90:	613b      	str	r3, [r7, #16]
  DMA2D_InitStruct.DMA2D_OutputGreen = Green_Value;      
 8010d92:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8010d94:	61bb      	str	r3, [r7, #24]
  DMA2D_InitStruct.DMA2D_OutputBlue = Blue_Value;     
 8010d96:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8010d98:	617b      	str	r3, [r7, #20]
  DMA2D_InitStruct.DMA2D_OutputRed = Red_Value;                
 8010d9a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8010d9c:	61fb      	str	r3, [r7, #28]
  DMA2D_InitStruct.DMA2D_OutputAlpha = 0x0F;                  
 8010d9e:	230f      	movs	r3, #15
 8010da0:	623b      	str	r3, [r7, #32]
  DMA2D_InitStruct.DMA2D_OutputMemoryAdd = Xaddress;                  
 8010da2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010da4:	627b      	str	r3, [r7, #36]	; 0x24
  
  if(Direction == LCD_DIR_HORIZONTAL)
 8010da6:	787b      	ldrb	r3, [r7, #1]
 8010da8:	2b00      	cmp	r3, #0
 8010daa:	d106      	bne.n	8010dba <LCD_DrawLine+0xa0>
  {                                                      
    DMA2D_InitStruct.DMA2D_OutputOffset = 0;                
 8010dac:	2300      	movs	r3, #0
 8010dae:	62bb      	str	r3, [r7, #40]	; 0x28
    DMA2D_InitStruct.DMA2D_NumberOfLine = 1;            
 8010db0:	2301      	movs	r3, #1
 8010db2:	62fb      	str	r3, [r7, #44]	; 0x2c
    DMA2D_InitStruct.DMA2D_PixelPerLine = Length; 
 8010db4:	887b      	ldrh	r3, [r7, #2]
 8010db6:	633b      	str	r3, [r7, #48]	; 0x30
 8010db8:	e005      	b.n	8010dc6 <LCD_DrawLine+0xac>
  }
  else
  {                                                            
    DMA2D_InitStruct.DMA2D_OutputOffset = LCD_PIXEL_WIDTH - 1;                
 8010dba:	23ef      	movs	r3, #239	; 0xef
 8010dbc:	62bb      	str	r3, [r7, #40]	; 0x28
    DMA2D_InitStruct.DMA2D_NumberOfLine = Length;            
 8010dbe:	887b      	ldrh	r3, [r7, #2]
 8010dc0:	62fb      	str	r3, [r7, #44]	; 0x2c
    DMA2D_InitStruct.DMA2D_PixelPerLine = 1;  
 8010dc2:	2301      	movs	r3, #1
 8010dc4:	633b      	str	r3, [r7, #48]	; 0x30
  }
  
  DMA2D_Init(&DMA2D_InitStruct);  
 8010dc6:	f107 030c 	add.w	r3, r7, #12
 8010dca:	4618      	mov	r0, r3
 8010dcc:	f7f3 fa74 	bl	80042b8 <DMA2D_Init>
  
  /* Start Transfer */ 
  DMA2D_StartTransfer();  
 8010dd0:	f7f3 fb4a 	bl	8004468 <DMA2D_StartTransfer>
  /* Wait for CTC Flag activation */
  while(DMA2D_GetFlagStatus(DMA2D_FLAG_TC) == RESET)
 8010dd4:	bf00      	nop
 8010dd6:	2002      	movs	r0, #2
 8010dd8:	f7f3 fd50 	bl	800487c <DMA2D_GetFlagStatus>
 8010ddc:	4603      	mov	r3, r0
 8010dde:	2b00      	cmp	r3, #0
 8010de0:	d0f9      	beq.n	8010dd6 <LCD_DrawLine+0xbc>
  {
  }
  
}
 8010de2:	bf00      	nop
 8010de4:	3744      	adds	r7, #68	; 0x44
 8010de6:	46bd      	mov	sp, r7
 8010de8:	bd90      	pop	{r4, r7, pc}
 8010dea:	bf00      	nop
 8010dec:	200000d0 	.word	0x200000d0
 8010df0:	20002e2c 	.word	0x20002e2c

08010df4 <LCD_DrawRect>:
  * @param  Height: display rectangle height, can be a value from 0 to 320.
  * @param  Width: display rectangle width, can be a value from 0 to 240.
  * @retval None
  */
void LCD_DrawRect(uint16_t Xpos, uint16_t Ypos, uint16_t Height, uint16_t Width)
{
 8010df4:	b590      	push	{r4, r7, lr}
 8010df6:	b083      	sub	sp, #12
 8010df8:	af00      	add	r7, sp, #0
 8010dfa:	4604      	mov	r4, r0
 8010dfc:	4608      	mov	r0, r1
 8010dfe:	4611      	mov	r1, r2
 8010e00:	461a      	mov	r2, r3
 8010e02:	4623      	mov	r3, r4
 8010e04:	80fb      	strh	r3, [r7, #6]
 8010e06:	4603      	mov	r3, r0
 8010e08:	80bb      	strh	r3, [r7, #4]
 8010e0a:	460b      	mov	r3, r1
 8010e0c:	807b      	strh	r3, [r7, #2]
 8010e0e:	4613      	mov	r3, r2
 8010e10:	803b      	strh	r3, [r7, #0]
  /* draw horizontal lines */
  LCD_DrawLine(Xpos, Ypos, Width, LCD_DIR_HORIZONTAL);
 8010e12:	883a      	ldrh	r2, [r7, #0]
 8010e14:	88b9      	ldrh	r1, [r7, #4]
 8010e16:	88f8      	ldrh	r0, [r7, #6]
 8010e18:	2300      	movs	r3, #0
 8010e1a:	f7ff ff7e 	bl	8010d1a <LCD_DrawLine>
  LCD_DrawLine(Xpos, (Ypos+ Height), Width, LCD_DIR_HORIZONTAL);
 8010e1e:	88ba      	ldrh	r2, [r7, #4]
 8010e20:	887b      	ldrh	r3, [r7, #2]
 8010e22:	4413      	add	r3, r2
 8010e24:	b299      	uxth	r1, r3
 8010e26:	883a      	ldrh	r2, [r7, #0]
 8010e28:	88f8      	ldrh	r0, [r7, #6]
 8010e2a:	2300      	movs	r3, #0
 8010e2c:	f7ff ff75 	bl	8010d1a <LCD_DrawLine>
  
  /* draw vertical lines */
  LCD_DrawLine(Xpos, Ypos, Height, LCD_DIR_VERTICAL);
 8010e30:	887a      	ldrh	r2, [r7, #2]
 8010e32:	88b9      	ldrh	r1, [r7, #4]
 8010e34:	88f8      	ldrh	r0, [r7, #6]
 8010e36:	2301      	movs	r3, #1
 8010e38:	f7ff ff6f 	bl	8010d1a <LCD_DrawLine>
  LCD_DrawLine((Xpos + Width), Ypos, Height, LCD_DIR_VERTICAL);
 8010e3c:	88fa      	ldrh	r2, [r7, #6]
 8010e3e:	883b      	ldrh	r3, [r7, #0]
 8010e40:	4413      	add	r3, r2
 8010e42:	b298      	uxth	r0, r3
 8010e44:	887a      	ldrh	r2, [r7, #2]
 8010e46:	88b9      	ldrh	r1, [r7, #4]
 8010e48:	2301      	movs	r3, #1
 8010e4a:	f7ff ff66 	bl	8010d1a <LCD_DrawLine>
}
 8010e4e:	bf00      	nop
 8010e50:	370c      	adds	r7, #12
 8010e52:	46bd      	mov	sp, r7
 8010e54:	bd90      	pop	{r4, r7, pc}

08010e56 <LCD_DrawCircle>:
  * @param  Ypos: specifies the Y position, can be a value from 0 to 320.
  * @param  Radius: radius of the circle.
  * @retval None
  */
void LCD_DrawCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 8010e56:	b480      	push	{r7}
 8010e58:	b087      	sub	sp, #28
 8010e5a:	af00      	add	r7, sp, #0
 8010e5c:	4603      	mov	r3, r0
 8010e5e:	80fb      	strh	r3, [r7, #6]
 8010e60:	460b      	mov	r3, r1
 8010e62:	80bb      	strh	r3, [r7, #4]
 8010e64:	4613      	mov	r3, r2
 8010e66:	807b      	strh	r3, [r7, #2]
    int x = -Radius, y = 0, err = 2-2*Radius, e2;
 8010e68:	887b      	ldrh	r3, [r7, #2]
 8010e6a:	425b      	negs	r3, r3
 8010e6c:	617b      	str	r3, [r7, #20]
 8010e6e:	2300      	movs	r3, #0
 8010e70:	613b      	str	r3, [r7, #16]
 8010e72:	887b      	ldrh	r3, [r7, #2]
 8010e74:	f1c3 0301 	rsb	r3, r3, #1
 8010e78:	005b      	lsls	r3, r3, #1
 8010e7a:	60fb      	str	r3, [r7, #12]
    do {
        *(__IO uint16_t*) (CurrentFrameBuffer + (2*((Xpos-x) + LCD_PIXEL_WIDTH*(Ypos+y)))) = CurrentTextColor; 
 8010e7c:	88fa      	ldrh	r2, [r7, #6]
 8010e7e:	697b      	ldr	r3, [r7, #20]
 8010e80:	1ad1      	subs	r1, r2, r3
 8010e82:	88ba      	ldrh	r2, [r7, #4]
 8010e84:	693b      	ldr	r3, [r7, #16]
 8010e86:	441a      	add	r2, r3
 8010e88:	4613      	mov	r3, r2
 8010e8a:	011b      	lsls	r3, r3, #4
 8010e8c:	1a9b      	subs	r3, r3, r2
 8010e8e:	011b      	lsls	r3, r3, #4
 8010e90:	440b      	add	r3, r1
 8010e92:	005b      	lsls	r3, r3, #1
 8010e94:	461a      	mov	r2, r3
 8010e96:	4b39      	ldr	r3, [pc, #228]	; (8010f7c <LCD_DrawCircle+0x126>)
 8010e98:	681b      	ldr	r3, [r3, #0]
 8010e9a:	4413      	add	r3, r2
 8010e9c:	461a      	mov	r2, r3
 8010e9e:	4b38      	ldr	r3, [pc, #224]	; (8010f80 <LCD_DrawCircle+0x12a>)
 8010ea0:	881b      	ldrh	r3, [r3, #0]
 8010ea2:	8013      	strh	r3, [r2, #0]
        *(__IO uint16_t*) (CurrentFrameBuffer + (2*((Xpos+x) + LCD_PIXEL_WIDTH*(Ypos+y)))) = CurrentTextColor;
 8010ea4:	88fa      	ldrh	r2, [r7, #6]
 8010ea6:	697b      	ldr	r3, [r7, #20]
 8010ea8:	18d1      	adds	r1, r2, r3
 8010eaa:	88ba      	ldrh	r2, [r7, #4]
 8010eac:	693b      	ldr	r3, [r7, #16]
 8010eae:	441a      	add	r2, r3
 8010eb0:	4613      	mov	r3, r2
 8010eb2:	011b      	lsls	r3, r3, #4
 8010eb4:	1a9b      	subs	r3, r3, r2
 8010eb6:	011b      	lsls	r3, r3, #4
 8010eb8:	440b      	add	r3, r1
 8010eba:	005b      	lsls	r3, r3, #1
 8010ebc:	461a      	mov	r2, r3
 8010ebe:	4b2f      	ldr	r3, [pc, #188]	; (8010f7c <LCD_DrawCircle+0x126>)
 8010ec0:	681b      	ldr	r3, [r3, #0]
 8010ec2:	4413      	add	r3, r2
 8010ec4:	461a      	mov	r2, r3
 8010ec6:	4b2e      	ldr	r3, [pc, #184]	; (8010f80 <LCD_DrawCircle+0x12a>)
 8010ec8:	881b      	ldrh	r3, [r3, #0]
 8010eca:	8013      	strh	r3, [r2, #0]
        *(__IO uint16_t*) (CurrentFrameBuffer + (2*((Xpos+x) + LCD_PIXEL_WIDTH*(Ypos-y)))) = CurrentTextColor;
 8010ecc:	88fa      	ldrh	r2, [r7, #6]
 8010ece:	697b      	ldr	r3, [r7, #20]
 8010ed0:	18d1      	adds	r1, r2, r3
 8010ed2:	88ba      	ldrh	r2, [r7, #4]
 8010ed4:	693b      	ldr	r3, [r7, #16]
 8010ed6:	1ad2      	subs	r2, r2, r3
 8010ed8:	4613      	mov	r3, r2
 8010eda:	011b      	lsls	r3, r3, #4
 8010edc:	1a9b      	subs	r3, r3, r2
 8010ede:	011b      	lsls	r3, r3, #4
 8010ee0:	440b      	add	r3, r1
 8010ee2:	005b      	lsls	r3, r3, #1
 8010ee4:	461a      	mov	r2, r3
 8010ee6:	4b25      	ldr	r3, [pc, #148]	; (8010f7c <LCD_DrawCircle+0x126>)
 8010ee8:	681b      	ldr	r3, [r3, #0]
 8010eea:	4413      	add	r3, r2
 8010eec:	461a      	mov	r2, r3
 8010eee:	4b24      	ldr	r3, [pc, #144]	; (8010f80 <LCD_DrawCircle+0x12a>)
 8010ef0:	881b      	ldrh	r3, [r3, #0]
 8010ef2:	8013      	strh	r3, [r2, #0]
        *(__IO uint16_t*) (CurrentFrameBuffer + (2*((Xpos-x) + LCD_PIXEL_WIDTH*(Ypos-y)))) = CurrentTextColor;
 8010ef4:	88fa      	ldrh	r2, [r7, #6]
 8010ef6:	697b      	ldr	r3, [r7, #20]
 8010ef8:	1ad1      	subs	r1, r2, r3
 8010efa:	88ba      	ldrh	r2, [r7, #4]
 8010efc:	693b      	ldr	r3, [r7, #16]
 8010efe:	1ad2      	subs	r2, r2, r3
 8010f00:	4613      	mov	r3, r2
 8010f02:	011b      	lsls	r3, r3, #4
 8010f04:	1a9b      	subs	r3, r3, r2
 8010f06:	011b      	lsls	r3, r3, #4
 8010f08:	440b      	add	r3, r1
 8010f0a:	005b      	lsls	r3, r3, #1
 8010f0c:	461a      	mov	r2, r3
 8010f0e:	4b1b      	ldr	r3, [pc, #108]	; (8010f7c <LCD_DrawCircle+0x126>)
 8010f10:	681b      	ldr	r3, [r3, #0]
 8010f12:	4413      	add	r3, r2
 8010f14:	461a      	mov	r2, r3
 8010f16:	4b1a      	ldr	r3, [pc, #104]	; (8010f80 <LCD_DrawCircle+0x12a>)
 8010f18:	881b      	ldrh	r3, [r3, #0]
 8010f1a:	8013      	strh	r3, [r2, #0]
      
        e2 = err;
 8010f1c:	68fb      	ldr	r3, [r7, #12]
 8010f1e:	60bb      	str	r3, [r7, #8]
        if (e2 <= y) {
 8010f20:	68ba      	ldr	r2, [r7, #8]
 8010f22:	693b      	ldr	r3, [r7, #16]
 8010f24:	429a      	cmp	r2, r3
 8010f26:	dc13      	bgt.n	8010f50 <LCD_DrawCircle+0xfa>
            err += ++y*2+1;
 8010f28:	693b      	ldr	r3, [r7, #16]
 8010f2a:	3301      	adds	r3, #1
 8010f2c:	613b      	str	r3, [r7, #16]
 8010f2e:	693b      	ldr	r3, [r7, #16]
 8010f30:	005b      	lsls	r3, r3, #1
 8010f32:	3301      	adds	r3, #1
 8010f34:	68fa      	ldr	r2, [r7, #12]
 8010f36:	4413      	add	r3, r2
 8010f38:	60fb      	str	r3, [r7, #12]
            if (-x == y && e2 <= x) e2 = 0;
 8010f3a:	697b      	ldr	r3, [r7, #20]
 8010f3c:	425b      	negs	r3, r3
 8010f3e:	693a      	ldr	r2, [r7, #16]
 8010f40:	429a      	cmp	r2, r3
 8010f42:	d105      	bne.n	8010f50 <LCD_DrawCircle+0xfa>
 8010f44:	68ba      	ldr	r2, [r7, #8]
 8010f46:	697b      	ldr	r3, [r7, #20]
 8010f48:	429a      	cmp	r2, r3
 8010f4a:	dc01      	bgt.n	8010f50 <LCD_DrawCircle+0xfa>
 8010f4c:	2300      	movs	r3, #0
 8010f4e:	60bb      	str	r3, [r7, #8]
        }
        if (e2 > x) err += ++x*2+1;
 8010f50:	68ba      	ldr	r2, [r7, #8]
 8010f52:	697b      	ldr	r3, [r7, #20]
 8010f54:	429a      	cmp	r2, r3
 8010f56:	dd08      	ble.n	8010f6a <LCD_DrawCircle+0x114>
 8010f58:	697b      	ldr	r3, [r7, #20]
 8010f5a:	3301      	adds	r3, #1
 8010f5c:	617b      	str	r3, [r7, #20]
 8010f5e:	697b      	ldr	r3, [r7, #20]
 8010f60:	005b      	lsls	r3, r3, #1
 8010f62:	3301      	adds	r3, #1
 8010f64:	68fa      	ldr	r2, [r7, #12]
 8010f66:	4413      	add	r3, r2
 8010f68:	60fb      	str	r3, [r7, #12]
    }
    while (x <= 0);
 8010f6a:	697b      	ldr	r3, [r7, #20]
 8010f6c:	2b00      	cmp	r3, #0
 8010f6e:	dd85      	ble.n	8010e7c <LCD_DrawCircle+0x26>
}
 8010f70:	bf00      	nop
 8010f72:	371c      	adds	r7, #28
 8010f74:	46bd      	mov	sp, r7
 8010f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f7a:	4770      	bx	lr
 8010f7c:	200000d0 	.word	0x200000d0
 8010f80:	20002e2c 	.word	0x20002e2c

08010f84 <LCD_DrawFullEllipse>:
  * @param  Radius: minor radius of ellipse.
  * @param  Radius2: major radius of ellipse.  
  * @retval None
  */
void LCD_DrawFullEllipse(int Xpos, int Ypos, int Radius, int Radius2)
{
 8010f84:	b580      	push	{r7, lr}
 8010f86:	b08c      	sub	sp, #48	; 0x30
 8010f88:	af00      	add	r7, sp, #0
 8010f8a:	60f8      	str	r0, [r7, #12]
 8010f8c:	60b9      	str	r1, [r7, #8]
 8010f8e:	607a      	str	r2, [r7, #4]
 8010f90:	603b      	str	r3, [r7, #0]
  int x = -Radius, y = 0, err = 2-2*Radius, e2;
 8010f92:	687b      	ldr	r3, [r7, #4]
 8010f94:	425b      	negs	r3, r3
 8010f96:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010f98:	2300      	movs	r3, #0
 8010f9a:	62bb      	str	r3, [r7, #40]	; 0x28
 8010f9c:	687b      	ldr	r3, [r7, #4]
 8010f9e:	f1c3 0301 	rsb	r3, r3, #1
 8010fa2:	005b      	lsls	r3, r3, #1
 8010fa4:	627b      	str	r3, [r7, #36]	; 0x24
  float K = 0, rad1 = 0, rad2 = 0;
 8010fa6:	f04f 0300 	mov.w	r3, #0
 8010faa:	61fb      	str	r3, [r7, #28]
 8010fac:	f04f 0300 	mov.w	r3, #0
 8010fb0:	61bb      	str	r3, [r7, #24]
 8010fb2:	f04f 0300 	mov.w	r3, #0
 8010fb6:	617b      	str	r3, [r7, #20]
  
  rad1 = Radius;
 8010fb8:	687b      	ldr	r3, [r7, #4]
 8010fba:	ee07 3a90 	vmov	s15, r3
 8010fbe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010fc2:	edc7 7a06 	vstr	s15, [r7, #24]
  rad2 = Radius2;
 8010fc6:	683b      	ldr	r3, [r7, #0]
 8010fc8:	ee07 3a90 	vmov	s15, r3
 8010fcc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010fd0:	edc7 7a05 	vstr	s15, [r7, #20]
  
  if (Radius > Radius2)
 8010fd4:	687a      	ldr	r2, [r7, #4]
 8010fd6:	683b      	ldr	r3, [r7, #0]
 8010fd8:	429a      	cmp	r2, r3
 8010fda:	f340 808e 	ble.w	80110fa <LCD_DrawFullEllipse+0x176>
  { 
    do 
    {
      K = (float)(rad1/rad2);
 8010fde:	edd7 6a06 	vldr	s13, [r7, #24]
 8010fe2:	ed97 7a05 	vldr	s14, [r7, #20]
 8010fe6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010fea:	edc7 7a07 	vstr	s15, [r7, #28]
      LCD_DrawLine((Xpos+x), (Ypos-(uint16_t)(y/K)), (2*(uint16_t)(y/K) + 1), LCD_DIR_VERTICAL);
 8010fee:	68fb      	ldr	r3, [r7, #12]
 8010ff0:	b29a      	uxth	r2, r3
 8010ff2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ff4:	b29b      	uxth	r3, r3
 8010ff6:	4413      	add	r3, r2
 8010ff8:	b298      	uxth	r0, r3
 8010ffa:	68bb      	ldr	r3, [r7, #8]
 8010ffc:	b29a      	uxth	r2, r3
 8010ffe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011000:	ee07 3a90 	vmov	s15, r3
 8011004:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8011008:	ed97 7a07 	vldr	s14, [r7, #28]
 801100c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011010:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011014:	ee17 3a90 	vmov	r3, s15
 8011018:	b29b      	uxth	r3, r3
 801101a:	1ad3      	subs	r3, r2, r3
 801101c:	b299      	uxth	r1, r3
 801101e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011020:	ee07 3a90 	vmov	s15, r3
 8011024:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8011028:	ed97 7a07 	vldr	s14, [r7, #28]
 801102c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011030:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011034:	ee17 3a90 	vmov	r3, s15
 8011038:	b29b      	uxth	r3, r3
 801103a:	005b      	lsls	r3, r3, #1
 801103c:	b29b      	uxth	r3, r3
 801103e:	3301      	adds	r3, #1
 8011040:	b29a      	uxth	r2, r3
 8011042:	2301      	movs	r3, #1
 8011044:	f7ff fe69 	bl	8010d1a <LCD_DrawLine>
      LCD_DrawLine((Xpos-x), (Ypos-(uint16_t)(y/K)), (2*(uint16_t)(y/K) + 1), LCD_DIR_VERTICAL);
 8011048:	68fb      	ldr	r3, [r7, #12]
 801104a:	b29a      	uxth	r2, r3
 801104c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801104e:	b29b      	uxth	r3, r3
 8011050:	1ad3      	subs	r3, r2, r3
 8011052:	b298      	uxth	r0, r3
 8011054:	68bb      	ldr	r3, [r7, #8]
 8011056:	b29a      	uxth	r2, r3
 8011058:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801105a:	ee07 3a90 	vmov	s15, r3
 801105e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8011062:	ed97 7a07 	vldr	s14, [r7, #28]
 8011066:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801106a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801106e:	ee17 3a90 	vmov	r3, s15
 8011072:	b29b      	uxth	r3, r3
 8011074:	1ad3      	subs	r3, r2, r3
 8011076:	b299      	uxth	r1, r3
 8011078:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801107a:	ee07 3a90 	vmov	s15, r3
 801107e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8011082:	ed97 7a07 	vldr	s14, [r7, #28]
 8011086:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801108a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801108e:	ee17 3a90 	vmov	r3, s15
 8011092:	b29b      	uxth	r3, r3
 8011094:	005b      	lsls	r3, r3, #1
 8011096:	b29b      	uxth	r3, r3
 8011098:	3301      	adds	r3, #1
 801109a:	b29a      	uxth	r2, r3
 801109c:	2301      	movs	r3, #1
 801109e:	f7ff fe3c 	bl	8010d1a <LCD_DrawLine>
      
      e2 = err;
 80110a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110a4:	623b      	str	r3, [r7, #32]
      if (e2 <= y) 
 80110a6:	6a3a      	ldr	r2, [r7, #32]
 80110a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80110aa:	429a      	cmp	r2, r3
 80110ac:	dc13      	bgt.n	80110d6 <LCD_DrawFullEllipse+0x152>
      {
        err += ++y*2+1;
 80110ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80110b0:	3301      	adds	r3, #1
 80110b2:	62bb      	str	r3, [r7, #40]	; 0x28
 80110b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80110b6:	005b      	lsls	r3, r3, #1
 80110b8:	3301      	adds	r3, #1
 80110ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80110bc:	4413      	add	r3, r2
 80110be:	627b      	str	r3, [r7, #36]	; 0x24
        if (-x == y && e2 <= x) e2 = 0;
 80110c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110c2:	425b      	negs	r3, r3
 80110c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80110c6:	429a      	cmp	r2, r3
 80110c8:	d105      	bne.n	80110d6 <LCD_DrawFullEllipse+0x152>
 80110ca:	6a3a      	ldr	r2, [r7, #32]
 80110cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110ce:	429a      	cmp	r2, r3
 80110d0:	dc01      	bgt.n	80110d6 <LCD_DrawFullEllipse+0x152>
 80110d2:	2300      	movs	r3, #0
 80110d4:	623b      	str	r3, [r7, #32]
      }
      if (e2 > x) err += ++x*2+1;
 80110d6:	6a3a      	ldr	r2, [r7, #32]
 80110d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110da:	429a      	cmp	r2, r3
 80110dc:	dd08      	ble.n	80110f0 <LCD_DrawFullEllipse+0x16c>
 80110de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110e0:	3301      	adds	r3, #1
 80110e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80110e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110e6:	005b      	lsls	r3, r3, #1
 80110e8:	3301      	adds	r3, #1
 80110ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80110ec:	4413      	add	r3, r2
 80110ee:	627b      	str	r3, [r7, #36]	; 0x24
      
    }
    while (x <= 0);
 80110f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110f2:	2b00      	cmp	r3, #0
 80110f4:	f77f af73 	ble.w	8010fde <LCD_DrawFullEllipse+0x5a>
      }
      if (e2 > y) err += ++y*2+1;
    }
    while (y <= 0);
  }
}
 80110f8:	e091      	b.n	801121e <LCD_DrawFullEllipse+0x29a>
    y = -Radius2; 
 80110fa:	683b      	ldr	r3, [r7, #0]
 80110fc:	425b      	negs	r3, r3
 80110fe:	62bb      	str	r3, [r7, #40]	; 0x28
    x = 0;
 8011100:	2300      	movs	r3, #0
 8011102:	62fb      	str	r3, [r7, #44]	; 0x2c
      K = (float)(rad2/rad1);       
 8011104:	edd7 6a05 	vldr	s13, [r7, #20]
 8011108:	ed97 7a06 	vldr	s14, [r7, #24]
 801110c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011110:	edc7 7a07 	vstr	s15, [r7, #28]
      LCD_DrawLine((Xpos-(uint16_t)(x/K)), (Ypos+y), (2*(uint16_t)(x/K) + 1), LCD_DIR_HORIZONTAL);
 8011114:	68fb      	ldr	r3, [r7, #12]
 8011116:	b29a      	uxth	r2, r3
 8011118:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801111a:	ee07 3a90 	vmov	s15, r3
 801111e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8011122:	ed97 7a07 	vldr	s14, [r7, #28]
 8011126:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801112a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801112e:	ee17 3a90 	vmov	r3, s15
 8011132:	b29b      	uxth	r3, r3
 8011134:	1ad3      	subs	r3, r2, r3
 8011136:	b298      	uxth	r0, r3
 8011138:	68bb      	ldr	r3, [r7, #8]
 801113a:	b29a      	uxth	r2, r3
 801113c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801113e:	b29b      	uxth	r3, r3
 8011140:	4413      	add	r3, r2
 8011142:	b299      	uxth	r1, r3
 8011144:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011146:	ee07 3a90 	vmov	s15, r3
 801114a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 801114e:	ed97 7a07 	vldr	s14, [r7, #28]
 8011152:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011156:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801115a:	ee17 3a90 	vmov	r3, s15
 801115e:	b29b      	uxth	r3, r3
 8011160:	005b      	lsls	r3, r3, #1
 8011162:	b29b      	uxth	r3, r3
 8011164:	3301      	adds	r3, #1
 8011166:	b29a      	uxth	r2, r3
 8011168:	2300      	movs	r3, #0
 801116a:	f7ff fdd6 	bl	8010d1a <LCD_DrawLine>
      LCD_DrawLine((Xpos-(uint16_t)(x/K)), (Ypos-y), (2*(uint16_t)(x/K) + 1), LCD_DIR_HORIZONTAL);
 801116e:	68fb      	ldr	r3, [r7, #12]
 8011170:	b29a      	uxth	r2, r3
 8011172:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011174:	ee07 3a90 	vmov	s15, r3
 8011178:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 801117c:	ed97 7a07 	vldr	s14, [r7, #28]
 8011180:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011184:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011188:	ee17 3a90 	vmov	r3, s15
 801118c:	b29b      	uxth	r3, r3
 801118e:	1ad3      	subs	r3, r2, r3
 8011190:	b298      	uxth	r0, r3
 8011192:	68bb      	ldr	r3, [r7, #8]
 8011194:	b29a      	uxth	r2, r3
 8011196:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011198:	b29b      	uxth	r3, r3
 801119a:	1ad3      	subs	r3, r2, r3
 801119c:	b299      	uxth	r1, r3
 801119e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111a0:	ee07 3a90 	vmov	s15, r3
 80111a4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80111a8:	ed97 7a07 	vldr	s14, [r7, #28]
 80111ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80111b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80111b4:	ee17 3a90 	vmov	r3, s15
 80111b8:	b29b      	uxth	r3, r3
 80111ba:	005b      	lsls	r3, r3, #1
 80111bc:	b29b      	uxth	r3, r3
 80111be:	3301      	adds	r3, #1
 80111c0:	b29a      	uxth	r2, r3
 80111c2:	2300      	movs	r3, #0
 80111c4:	f7ff fda9 	bl	8010d1a <LCD_DrawLine>
      e2 = err;
 80111c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80111ca:	623b      	str	r3, [r7, #32]
      if (e2 <= x) 
 80111cc:	6a3a      	ldr	r2, [r7, #32]
 80111ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111d0:	429a      	cmp	r2, r3
 80111d2:	dc13      	bgt.n	80111fc <LCD_DrawFullEllipse+0x278>
        err += ++x*2+1;
 80111d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111d6:	3301      	adds	r3, #1
 80111d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80111da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111dc:	005b      	lsls	r3, r3, #1
 80111de:	3301      	adds	r3, #1
 80111e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80111e2:	4413      	add	r3, r2
 80111e4:	627b      	str	r3, [r7, #36]	; 0x24
        if (-y == x && e2 <= y) e2 = 0;
 80111e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80111e8:	425b      	negs	r3, r3
 80111ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80111ec:	429a      	cmp	r2, r3
 80111ee:	d105      	bne.n	80111fc <LCD_DrawFullEllipse+0x278>
 80111f0:	6a3a      	ldr	r2, [r7, #32]
 80111f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80111f4:	429a      	cmp	r2, r3
 80111f6:	dc01      	bgt.n	80111fc <LCD_DrawFullEllipse+0x278>
 80111f8:	2300      	movs	r3, #0
 80111fa:	623b      	str	r3, [r7, #32]
      if (e2 > y) err += ++y*2+1;
 80111fc:	6a3a      	ldr	r2, [r7, #32]
 80111fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011200:	429a      	cmp	r2, r3
 8011202:	dd08      	ble.n	8011216 <LCD_DrawFullEllipse+0x292>
 8011204:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011206:	3301      	adds	r3, #1
 8011208:	62bb      	str	r3, [r7, #40]	; 0x28
 801120a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801120c:	005b      	lsls	r3, r3, #1
 801120e:	3301      	adds	r3, #1
 8011210:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011212:	4413      	add	r3, r2
 8011214:	627b      	str	r3, [r7, #36]	; 0x24
    while (y <= 0);
 8011216:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011218:	2b00      	cmp	r3, #0
 801121a:	f77f af73 	ble.w	8011104 <LCD_DrawFullEllipse+0x180>
}
 801121e:	bf00      	nop
 8011220:	3730      	adds	r7, #48	; 0x30
 8011222:	46bd      	mov	sp, r7
 8011224:	bd80      	pop	{r7, pc}

08011226 <LCD_DrawEllipse>:
  * @param  Radius: specifies Radius.
  * @param  Radius2: specifies Radius2.
  * @retval None
  */
void LCD_DrawEllipse(int Xpos, int Ypos, int Radius, int Radius2)
{
 8011226:	b480      	push	{r7}
 8011228:	b08d      	sub	sp, #52	; 0x34
 801122a:	af00      	add	r7, sp, #0
 801122c:	60f8      	str	r0, [r7, #12]
 801122e:	60b9      	str	r1, [r7, #8]
 8011230:	607a      	str	r2, [r7, #4]
 8011232:	603b      	str	r3, [r7, #0]
  int x = -Radius, y = 0, err = 2-2*Radius, e2;
 8011234:	687b      	ldr	r3, [r7, #4]
 8011236:	425b      	negs	r3, r3
 8011238:	62fb      	str	r3, [r7, #44]	; 0x2c
 801123a:	2300      	movs	r3, #0
 801123c:	62bb      	str	r3, [r7, #40]	; 0x28
 801123e:	687b      	ldr	r3, [r7, #4]
 8011240:	f1c3 0301 	rsb	r3, r3, #1
 8011244:	005b      	lsls	r3, r3, #1
 8011246:	627b      	str	r3, [r7, #36]	; 0x24
  float K = 0, rad1 = 0, rad2 = 0;
 8011248:	f04f 0300 	mov.w	r3, #0
 801124c:	61fb      	str	r3, [r7, #28]
 801124e:	f04f 0300 	mov.w	r3, #0
 8011252:	61bb      	str	r3, [r7, #24]
 8011254:	f04f 0300 	mov.w	r3, #0
 8011258:	617b      	str	r3, [r7, #20]
   
  rad1 = Radius;
 801125a:	687b      	ldr	r3, [r7, #4]
 801125c:	ee07 3a90 	vmov	s15, r3
 8011260:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011264:	edc7 7a06 	vstr	s15, [r7, #24]
  rad2 = Radius2;
 8011268:	683b      	ldr	r3, [r7, #0]
 801126a:	ee07 3a90 	vmov	s15, r3
 801126e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011272:	edc7 7a05 	vstr	s15, [r7, #20]
  
  if (Radius > Radius2)
 8011276:	687a      	ldr	r2, [r7, #4]
 8011278:	683b      	ldr	r3, [r7, #0]
 801127a:	429a      	cmp	r2, r3
 801127c:	f340 80bc 	ble.w	80113f8 <LCD_DrawEllipse+0x1d2>
  { 
    do {
      K = (float)(rad1/rad2);
 8011280:	edd7 6a06 	vldr	s13, [r7, #24]
 8011284:	ed97 7a05 	vldr	s14, [r7, #20]
 8011288:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801128c:	edc7 7a07 	vstr	s15, [r7, #28]
      *(__IO uint16_t*) (CurrentFrameBuffer + (2*((Xpos-x) + LCD_PIXEL_WIDTH*(Ypos+(uint16_t)(y/K))))) = CurrentTextColor; 
 8011290:	68fa      	ldr	r2, [r7, #12]
 8011292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011294:	1ad1      	subs	r1, r2, r3
 8011296:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011298:	ee07 3a90 	vmov	s15, r3
 801129c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80112a0:	ed97 7a07 	vldr	s14, [r7, #28]
 80112a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80112a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80112ac:	ee17 3a90 	vmov	r3, s15
 80112b0:	b29b      	uxth	r3, r3
 80112b2:	461a      	mov	r2, r3
 80112b4:	68bb      	ldr	r3, [r7, #8]
 80112b6:	441a      	add	r2, r3
 80112b8:	4613      	mov	r3, r2
 80112ba:	011b      	lsls	r3, r3, #4
 80112bc:	1a9b      	subs	r3, r3, r2
 80112be:	011b      	lsls	r3, r3, #4
 80112c0:	440b      	add	r3, r1
 80112c2:	005b      	lsls	r3, r3, #1
 80112c4:	461a      	mov	r2, r3
 80112c6:	4baf      	ldr	r3, [pc, #700]	; (8011584 <LCD_DrawEllipse+0x35e>)
 80112c8:	681b      	ldr	r3, [r3, #0]
 80112ca:	4413      	add	r3, r2
 80112cc:	461a      	mov	r2, r3
 80112ce:	4bae      	ldr	r3, [pc, #696]	; (8011588 <LCD_DrawEllipse+0x362>)
 80112d0:	881b      	ldrh	r3, [r3, #0]
 80112d2:	8013      	strh	r3, [r2, #0]
      *(__IO uint16_t*) (CurrentFrameBuffer + (2*((Xpos+x) + LCD_PIXEL_WIDTH*(Ypos+(uint16_t)(y/K))))) = CurrentTextColor;
 80112d4:	68fa      	ldr	r2, [r7, #12]
 80112d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80112d8:	18d1      	adds	r1, r2, r3
 80112da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80112dc:	ee07 3a90 	vmov	s15, r3
 80112e0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80112e4:	ed97 7a07 	vldr	s14, [r7, #28]
 80112e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80112ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80112f0:	ee17 3a90 	vmov	r3, s15
 80112f4:	b29b      	uxth	r3, r3
 80112f6:	461a      	mov	r2, r3
 80112f8:	68bb      	ldr	r3, [r7, #8]
 80112fa:	441a      	add	r2, r3
 80112fc:	4613      	mov	r3, r2
 80112fe:	011b      	lsls	r3, r3, #4
 8011300:	1a9b      	subs	r3, r3, r2
 8011302:	011b      	lsls	r3, r3, #4
 8011304:	440b      	add	r3, r1
 8011306:	005b      	lsls	r3, r3, #1
 8011308:	461a      	mov	r2, r3
 801130a:	4b9e      	ldr	r3, [pc, #632]	; (8011584 <LCD_DrawEllipse+0x35e>)
 801130c:	681b      	ldr	r3, [r3, #0]
 801130e:	4413      	add	r3, r2
 8011310:	461a      	mov	r2, r3
 8011312:	4b9d      	ldr	r3, [pc, #628]	; (8011588 <LCD_DrawEllipse+0x362>)
 8011314:	881b      	ldrh	r3, [r3, #0]
 8011316:	8013      	strh	r3, [r2, #0]
      *(__IO uint16_t*) (CurrentFrameBuffer + (2*((Xpos+x) + LCD_PIXEL_WIDTH*(Ypos-(uint16_t)(y/K))))) = CurrentTextColor;
 8011318:	68fa      	ldr	r2, [r7, #12]
 801131a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801131c:	18d1      	adds	r1, r2, r3
 801131e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011320:	ee07 3a90 	vmov	s15, r3
 8011324:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8011328:	ed97 7a07 	vldr	s14, [r7, #28]
 801132c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011330:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011334:	ee17 3a90 	vmov	r3, s15
 8011338:	b29b      	uxth	r3, r3
 801133a:	461a      	mov	r2, r3
 801133c:	68bb      	ldr	r3, [r7, #8]
 801133e:	1a9a      	subs	r2, r3, r2
 8011340:	4613      	mov	r3, r2
 8011342:	011b      	lsls	r3, r3, #4
 8011344:	1a9b      	subs	r3, r3, r2
 8011346:	011b      	lsls	r3, r3, #4
 8011348:	440b      	add	r3, r1
 801134a:	005b      	lsls	r3, r3, #1
 801134c:	461a      	mov	r2, r3
 801134e:	4b8d      	ldr	r3, [pc, #564]	; (8011584 <LCD_DrawEllipse+0x35e>)
 8011350:	681b      	ldr	r3, [r3, #0]
 8011352:	4413      	add	r3, r2
 8011354:	461a      	mov	r2, r3
 8011356:	4b8c      	ldr	r3, [pc, #560]	; (8011588 <LCD_DrawEllipse+0x362>)
 8011358:	881b      	ldrh	r3, [r3, #0]
 801135a:	8013      	strh	r3, [r2, #0]
      *(__IO uint16_t*) (CurrentFrameBuffer + (2*((Xpos-x) + LCD_PIXEL_WIDTH*(Ypos-(uint16_t)(y/K))))) = CurrentTextColor;
 801135c:	68fa      	ldr	r2, [r7, #12]
 801135e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011360:	1ad1      	subs	r1, r2, r3
 8011362:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011364:	ee07 3a90 	vmov	s15, r3
 8011368:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 801136c:	ed97 7a07 	vldr	s14, [r7, #28]
 8011370:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011374:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011378:	ee17 3a90 	vmov	r3, s15
 801137c:	b29b      	uxth	r3, r3
 801137e:	461a      	mov	r2, r3
 8011380:	68bb      	ldr	r3, [r7, #8]
 8011382:	1a9a      	subs	r2, r3, r2
 8011384:	4613      	mov	r3, r2
 8011386:	011b      	lsls	r3, r3, #4
 8011388:	1a9b      	subs	r3, r3, r2
 801138a:	011b      	lsls	r3, r3, #4
 801138c:	440b      	add	r3, r1
 801138e:	005b      	lsls	r3, r3, #1
 8011390:	461a      	mov	r2, r3
 8011392:	4b7c      	ldr	r3, [pc, #496]	; (8011584 <LCD_DrawEllipse+0x35e>)
 8011394:	681b      	ldr	r3, [r3, #0]
 8011396:	4413      	add	r3, r2
 8011398:	461a      	mov	r2, r3
 801139a:	4b7b      	ldr	r3, [pc, #492]	; (8011588 <LCD_DrawEllipse+0x362>)
 801139c:	881b      	ldrh	r3, [r3, #0]
 801139e:	8013      	strh	r3, [r2, #0]
            
      e2 = err;
 80113a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113a2:	623b      	str	r3, [r7, #32]
      if (e2 <= y) {
 80113a4:	6a3a      	ldr	r2, [r7, #32]
 80113a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80113a8:	429a      	cmp	r2, r3
 80113aa:	dc13      	bgt.n	80113d4 <LCD_DrawEllipse+0x1ae>
        err += ++y*2+1;
 80113ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80113ae:	3301      	adds	r3, #1
 80113b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80113b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80113b4:	005b      	lsls	r3, r3, #1
 80113b6:	3301      	adds	r3, #1
 80113b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80113ba:	4413      	add	r3, r2
 80113bc:	627b      	str	r3, [r7, #36]	; 0x24
        if (-x == y && e2 <= x) e2 = 0;
 80113be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80113c0:	425b      	negs	r3, r3
 80113c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80113c4:	429a      	cmp	r2, r3
 80113c6:	d105      	bne.n	80113d4 <LCD_DrawEllipse+0x1ae>
 80113c8:	6a3a      	ldr	r2, [r7, #32]
 80113ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80113cc:	429a      	cmp	r2, r3
 80113ce:	dc01      	bgt.n	80113d4 <LCD_DrawEllipse+0x1ae>
 80113d0:	2300      	movs	r3, #0
 80113d2:	623b      	str	r3, [r7, #32]
      }
      if (e2 > x) err += ++x*2+1;
 80113d4:	6a3a      	ldr	r2, [r7, #32]
 80113d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80113d8:	429a      	cmp	r2, r3
 80113da:	dd08      	ble.n	80113ee <LCD_DrawEllipse+0x1c8>
 80113dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80113de:	3301      	adds	r3, #1
 80113e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80113e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80113e4:	005b      	lsls	r3, r3, #1
 80113e6:	3301      	adds	r3, #1
 80113e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80113ea:	4413      	add	r3, r2
 80113ec:	627b      	str	r3, [r7, #36]	; 0x24
    }
    while (x <= 0);
 80113ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80113f0:	2b00      	cmp	r3, #0
 80113f2:	f77f af45 	ble.w	8011280 <LCD_DrawEllipse+0x5a>
      }
      if (e2 > y) err += ++y*2+1;     
    }
    while (y <= 0);
  }
}
 80113f6:	e0bf      	b.n	8011578 <LCD_DrawEllipse+0x352>
    y = -Radius2; 
 80113f8:	683b      	ldr	r3, [r7, #0]
 80113fa:	425b      	negs	r3, r3
 80113fc:	62bb      	str	r3, [r7, #40]	; 0x28
    x = 0;
 80113fe:	2300      	movs	r3, #0
 8011400:	62fb      	str	r3, [r7, #44]	; 0x2c
      K = (float)(rad2/rad1);
 8011402:	edd7 6a05 	vldr	s13, [r7, #20]
 8011406:	ed97 7a06 	vldr	s14, [r7, #24]
 801140a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801140e:	edc7 7a07 	vstr	s15, [r7, #28]
      *(__IO uint16_t*) (CurrentFrameBuffer + (2*((Xpos-(uint16_t)(x/K)) + LCD_PIXEL_WIDTH*(Ypos+y)))) = CurrentTextColor; 
 8011412:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011414:	ee07 3a90 	vmov	s15, r3
 8011418:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 801141c:	ed97 7a07 	vldr	s14, [r7, #28]
 8011420:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011424:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011428:	ee17 3a90 	vmov	r3, s15
 801142c:	b29b      	uxth	r3, r3
 801142e:	461a      	mov	r2, r3
 8011430:	68fb      	ldr	r3, [r7, #12]
 8011432:	1a99      	subs	r1, r3, r2
 8011434:	68ba      	ldr	r2, [r7, #8]
 8011436:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011438:	441a      	add	r2, r3
 801143a:	4613      	mov	r3, r2
 801143c:	011b      	lsls	r3, r3, #4
 801143e:	1a9b      	subs	r3, r3, r2
 8011440:	011b      	lsls	r3, r3, #4
 8011442:	440b      	add	r3, r1
 8011444:	005b      	lsls	r3, r3, #1
 8011446:	461a      	mov	r2, r3
 8011448:	4b4e      	ldr	r3, [pc, #312]	; (8011584 <LCD_DrawEllipse+0x35e>)
 801144a:	681b      	ldr	r3, [r3, #0]
 801144c:	4413      	add	r3, r2
 801144e:	461a      	mov	r2, r3
 8011450:	4b4d      	ldr	r3, [pc, #308]	; (8011588 <LCD_DrawEllipse+0x362>)
 8011452:	881b      	ldrh	r3, [r3, #0]
 8011454:	8013      	strh	r3, [r2, #0]
      *(__IO uint16_t*) (CurrentFrameBuffer + (2*((Xpos+(uint16_t)(x/K)) + LCD_PIXEL_WIDTH*(Ypos+y)))) = CurrentTextColor;
 8011456:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011458:	ee07 3a90 	vmov	s15, r3
 801145c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8011460:	ed97 7a07 	vldr	s14, [r7, #28]
 8011464:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011468:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801146c:	ee17 3a90 	vmov	r3, s15
 8011470:	b29b      	uxth	r3, r3
 8011472:	461a      	mov	r2, r3
 8011474:	68fb      	ldr	r3, [r7, #12]
 8011476:	18d1      	adds	r1, r2, r3
 8011478:	68ba      	ldr	r2, [r7, #8]
 801147a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801147c:	441a      	add	r2, r3
 801147e:	4613      	mov	r3, r2
 8011480:	011b      	lsls	r3, r3, #4
 8011482:	1a9b      	subs	r3, r3, r2
 8011484:	011b      	lsls	r3, r3, #4
 8011486:	440b      	add	r3, r1
 8011488:	005b      	lsls	r3, r3, #1
 801148a:	461a      	mov	r2, r3
 801148c:	4b3d      	ldr	r3, [pc, #244]	; (8011584 <LCD_DrawEllipse+0x35e>)
 801148e:	681b      	ldr	r3, [r3, #0]
 8011490:	4413      	add	r3, r2
 8011492:	461a      	mov	r2, r3
 8011494:	4b3c      	ldr	r3, [pc, #240]	; (8011588 <LCD_DrawEllipse+0x362>)
 8011496:	881b      	ldrh	r3, [r3, #0]
 8011498:	8013      	strh	r3, [r2, #0]
      *(__IO uint16_t*) (CurrentFrameBuffer + (2*((Xpos+(uint16_t)(x/K)) + LCD_PIXEL_WIDTH*(Ypos-y)))) = CurrentTextColor;
 801149a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801149c:	ee07 3a90 	vmov	s15, r3
 80114a0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80114a4:	ed97 7a07 	vldr	s14, [r7, #28]
 80114a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80114ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80114b0:	ee17 3a90 	vmov	r3, s15
 80114b4:	b29b      	uxth	r3, r3
 80114b6:	461a      	mov	r2, r3
 80114b8:	68fb      	ldr	r3, [r7, #12]
 80114ba:	18d1      	adds	r1, r2, r3
 80114bc:	68ba      	ldr	r2, [r7, #8]
 80114be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80114c0:	1ad2      	subs	r2, r2, r3
 80114c2:	4613      	mov	r3, r2
 80114c4:	011b      	lsls	r3, r3, #4
 80114c6:	1a9b      	subs	r3, r3, r2
 80114c8:	011b      	lsls	r3, r3, #4
 80114ca:	440b      	add	r3, r1
 80114cc:	005b      	lsls	r3, r3, #1
 80114ce:	461a      	mov	r2, r3
 80114d0:	4b2c      	ldr	r3, [pc, #176]	; (8011584 <LCD_DrawEllipse+0x35e>)
 80114d2:	681b      	ldr	r3, [r3, #0]
 80114d4:	4413      	add	r3, r2
 80114d6:	461a      	mov	r2, r3
 80114d8:	4b2b      	ldr	r3, [pc, #172]	; (8011588 <LCD_DrawEllipse+0x362>)
 80114da:	881b      	ldrh	r3, [r3, #0]
 80114dc:	8013      	strh	r3, [r2, #0]
      *(__IO uint16_t*) (CurrentFrameBuffer + (2*((Xpos-(uint16_t)(x/K)) + LCD_PIXEL_WIDTH*(Ypos-y)))) = CurrentTextColor;
 80114de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80114e0:	ee07 3a90 	vmov	s15, r3
 80114e4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80114e8:	ed97 7a07 	vldr	s14, [r7, #28]
 80114ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80114f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80114f4:	ee17 3a90 	vmov	r3, s15
 80114f8:	b29b      	uxth	r3, r3
 80114fa:	461a      	mov	r2, r3
 80114fc:	68fb      	ldr	r3, [r7, #12]
 80114fe:	1a99      	subs	r1, r3, r2
 8011500:	68ba      	ldr	r2, [r7, #8]
 8011502:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011504:	1ad2      	subs	r2, r2, r3
 8011506:	4613      	mov	r3, r2
 8011508:	011b      	lsls	r3, r3, #4
 801150a:	1a9b      	subs	r3, r3, r2
 801150c:	011b      	lsls	r3, r3, #4
 801150e:	440b      	add	r3, r1
 8011510:	005b      	lsls	r3, r3, #1
 8011512:	461a      	mov	r2, r3
 8011514:	4b1b      	ldr	r3, [pc, #108]	; (8011584 <LCD_DrawEllipse+0x35e>)
 8011516:	681b      	ldr	r3, [r3, #0]
 8011518:	4413      	add	r3, r2
 801151a:	461a      	mov	r2, r3
 801151c:	4b1a      	ldr	r3, [pc, #104]	; (8011588 <LCD_DrawEllipse+0x362>)
 801151e:	881b      	ldrh	r3, [r3, #0]
 8011520:	8013      	strh	r3, [r2, #0]
      e2 = err;
 8011522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011524:	623b      	str	r3, [r7, #32]
      if (e2 <= x) {
 8011526:	6a3a      	ldr	r2, [r7, #32]
 8011528:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801152a:	429a      	cmp	r2, r3
 801152c:	dc13      	bgt.n	8011556 <LCD_DrawEllipse+0x330>
        err += ++x*2+1;
 801152e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011530:	3301      	adds	r3, #1
 8011532:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011534:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011536:	005b      	lsls	r3, r3, #1
 8011538:	3301      	adds	r3, #1
 801153a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801153c:	4413      	add	r3, r2
 801153e:	627b      	str	r3, [r7, #36]	; 0x24
        if (-y == x && e2 <= y) e2 = 0;
 8011540:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011542:	425b      	negs	r3, r3
 8011544:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011546:	429a      	cmp	r2, r3
 8011548:	d105      	bne.n	8011556 <LCD_DrawEllipse+0x330>
 801154a:	6a3a      	ldr	r2, [r7, #32]
 801154c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801154e:	429a      	cmp	r2, r3
 8011550:	dc01      	bgt.n	8011556 <LCD_DrawEllipse+0x330>
 8011552:	2300      	movs	r3, #0
 8011554:	623b      	str	r3, [r7, #32]
      if (e2 > y) err += ++y*2+1;     
 8011556:	6a3a      	ldr	r2, [r7, #32]
 8011558:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801155a:	429a      	cmp	r2, r3
 801155c:	dd08      	ble.n	8011570 <LCD_DrawEllipse+0x34a>
 801155e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011560:	3301      	adds	r3, #1
 8011562:	62bb      	str	r3, [r7, #40]	; 0x28
 8011564:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011566:	005b      	lsls	r3, r3, #1
 8011568:	3301      	adds	r3, #1
 801156a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801156c:	4413      	add	r3, r2
 801156e:	627b      	str	r3, [r7, #36]	; 0x24
    while (y <= 0);
 8011570:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011572:	2b00      	cmp	r3, #0
 8011574:	f77f af45 	ble.w	8011402 <LCD_DrawEllipse+0x1dc>
}
 8011578:	bf00      	nop
 801157a:	3734      	adds	r7, #52	; 0x34
 801157c:	46bd      	mov	sp, r7
 801157e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011582:	4770      	bx	lr
 8011584:	200000d0 	.word	0x200000d0
 8011588:	20002e2c 	.word	0x20002e2c

0801158c <LCD_DrawMonoPict>:
  * @brief  Displays a mono-color picture.
  * @param  Pict: pointer to the picture array.
  * @retval None
  */
void LCD_DrawMonoPict(const uint32_t *Pict)
{
 801158c:	b480      	push	{r7}
 801158e:	b085      	sub	sp, #20
 8011590:	af00      	add	r7, sp, #0
 8011592:	6078      	str	r0, [r7, #4]
  uint32_t index = 0, counter = 0;
 8011594:	2300      	movs	r3, #0
 8011596:	60fb      	str	r3, [r7, #12]
 8011598:	2300      	movs	r3, #0
 801159a:	60bb      	str	r3, [r7, #8]
  
   
  for(index = 0; index < 2400; index++)
 801159c:	2300      	movs	r3, #0
 801159e:	60fb      	str	r3, [r7, #12]
 80115a0:	e024      	b.n	80115ec <LCD_DrawMonoPict+0x60>
  {
    for(counter = 0; counter < 32; counter++)
 80115a2:	2300      	movs	r3, #0
 80115a4:	60bb      	str	r3, [r7, #8]
 80115a6:	e01b      	b.n	80115e0 <LCD_DrawMonoPict+0x54>
    {
      if((Pict[index] & (1 << counter)) == 0x00)
 80115a8:	68fb      	ldr	r3, [r7, #12]
 80115aa:	009b      	lsls	r3, r3, #2
 80115ac:	687a      	ldr	r2, [r7, #4]
 80115ae:	4413      	add	r3, r2
 80115b0:	681b      	ldr	r3, [r3, #0]
 80115b2:	2101      	movs	r1, #1
 80115b4:	68ba      	ldr	r2, [r7, #8]
 80115b6:	fa01 f202 	lsl.w	r2, r1, r2
 80115ba:	4013      	ands	r3, r2
 80115bc:	2b00      	cmp	r3, #0
 80115be:	d106      	bne.n	80115ce <LCD_DrawMonoPict+0x42>
      {
        *(__IO uint16_t*)(CurrentFrameBuffer) = CurrentBackColor;
 80115c0:	4b0f      	ldr	r3, [pc, #60]	; (8011600 <LCD_DrawMonoPict+0x74>)
 80115c2:	681b      	ldr	r3, [r3, #0]
 80115c4:	461a      	mov	r2, r3
 80115c6:	4b0f      	ldr	r3, [pc, #60]	; (8011604 <LCD_DrawMonoPict+0x78>)
 80115c8:	881b      	ldrh	r3, [r3, #0]
 80115ca:	8013      	strh	r3, [r2, #0]
 80115cc:	e005      	b.n	80115da <LCD_DrawMonoPict+0x4e>
      }
      else
      {
        *(__IO uint16_t*)(CurrentFrameBuffer) = CurrentTextColor;
 80115ce:	4b0c      	ldr	r3, [pc, #48]	; (8011600 <LCD_DrawMonoPict+0x74>)
 80115d0:	681b      	ldr	r3, [r3, #0]
 80115d2:	461a      	mov	r2, r3
 80115d4:	4b0c      	ldr	r3, [pc, #48]	; (8011608 <LCD_DrawMonoPict+0x7c>)
 80115d6:	881b      	ldrh	r3, [r3, #0]
 80115d8:	8013      	strh	r3, [r2, #0]
    for(counter = 0; counter < 32; counter++)
 80115da:	68bb      	ldr	r3, [r7, #8]
 80115dc:	3301      	adds	r3, #1
 80115de:	60bb      	str	r3, [r7, #8]
 80115e0:	68bb      	ldr	r3, [r7, #8]
 80115e2:	2b1f      	cmp	r3, #31
 80115e4:	d9e0      	bls.n	80115a8 <LCD_DrawMonoPict+0x1c>
  for(index = 0; index < 2400; index++)
 80115e6:	68fb      	ldr	r3, [r7, #12]
 80115e8:	3301      	adds	r3, #1
 80115ea:	60fb      	str	r3, [r7, #12]
 80115ec:	68fb      	ldr	r3, [r7, #12]
 80115ee:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
 80115f2:	d3d6      	bcc.n	80115a2 <LCD_DrawMonoPict+0x16>
      }
    }
  }
}
 80115f4:	bf00      	nop
 80115f6:	3714      	adds	r7, #20
 80115f8:	46bd      	mov	sp, r7
 80115fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115fe:	4770      	bx	lr
 8011600:	200000d0 	.word	0x200000d0
 8011604:	200000cc 	.word	0x200000cc
 8011608:	20002e2c 	.word	0x20002e2c

0801160c <LCD_WriteBMP>:
  * @brief  Displays a bitmap picture loaded in the internal Flash.
  * @param  BmpAddress: Bmp picture address in the internal Flash.
  * @retval None
  */
void LCD_WriteBMP(uint32_t BmpAddress)
{
 801160c:	b580      	push	{r7, lr}
 801160e:	b08a      	sub	sp, #40	; 0x28
 8011610:	af00      	add	r7, sp, #0
 8011612:	6078      	str	r0, [r7, #4]
  uint32_t index = 0, size = 0, width = 0, height = 0, bit_pixel = 0;
 8011614:	2300      	movs	r3, #0
 8011616:	627b      	str	r3, [r7, #36]	; 0x24
 8011618:	2300      	movs	r3, #0
 801161a:	617b      	str	r3, [r7, #20]
 801161c:	2300      	movs	r3, #0
 801161e:	613b      	str	r3, [r7, #16]
 8011620:	2300      	movs	r3, #0
 8011622:	60fb      	str	r3, [r7, #12]
 8011624:	2300      	movs	r3, #0
 8011626:	60bb      	str	r3, [r7, #8]
  uint32_t Address;
  uint32_t currentline = 0, linenumber = 0;
 8011628:	2300      	movs	r3, #0
 801162a:	61fb      	str	r3, [r7, #28]
 801162c:	2300      	movs	r3, #0
 801162e:	61bb      	str	r3, [r7, #24]
 
  Address = CurrentFrameBuffer;
 8011630:	4b6b      	ldr	r3, [pc, #428]	; (80117e0 <LCD_WriteBMP+0x1d4>)
 8011632:	681b      	ldr	r3, [r3, #0]
 8011634:	623b      	str	r3, [r7, #32]

  /* Read bitmap size */
  size = *(__IO uint16_t *) (BmpAddress + 2);
 8011636:	687b      	ldr	r3, [r7, #4]
 8011638:	3302      	adds	r3, #2
 801163a:	881b      	ldrh	r3, [r3, #0]
 801163c:	b29b      	uxth	r3, r3
 801163e:	617b      	str	r3, [r7, #20]
  size |= (*(__IO uint16_t *) (BmpAddress + 4)) << 16;
 8011640:	687b      	ldr	r3, [r7, #4]
 8011642:	3304      	adds	r3, #4
 8011644:	881b      	ldrh	r3, [r3, #0]
 8011646:	b29b      	uxth	r3, r3
 8011648:	041b      	lsls	r3, r3, #16
 801164a:	461a      	mov	r2, r3
 801164c:	697b      	ldr	r3, [r7, #20]
 801164e:	4313      	orrs	r3, r2
 8011650:	617b      	str	r3, [r7, #20]
  
  /* Get bitmap data address offset */
  index = *(__IO uint16_t *) (BmpAddress + 10);
 8011652:	687b      	ldr	r3, [r7, #4]
 8011654:	330a      	adds	r3, #10
 8011656:	881b      	ldrh	r3, [r3, #0]
 8011658:	b29b      	uxth	r3, r3
 801165a:	627b      	str	r3, [r7, #36]	; 0x24
  index |= (*(__IO uint16_t *) (BmpAddress + 12)) << 16;
 801165c:	687b      	ldr	r3, [r7, #4]
 801165e:	330c      	adds	r3, #12
 8011660:	881b      	ldrh	r3, [r3, #0]
 8011662:	b29b      	uxth	r3, r3
 8011664:	041b      	lsls	r3, r3, #16
 8011666:	461a      	mov	r2, r3
 8011668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801166a:	4313      	orrs	r3, r2
 801166c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Read bitmap width */
  width = *(uint16_t *) (BmpAddress + 18);
 801166e:	687b      	ldr	r3, [r7, #4]
 8011670:	3312      	adds	r3, #18
 8011672:	881b      	ldrh	r3, [r3, #0]
 8011674:	613b      	str	r3, [r7, #16]
  width |= (*(uint16_t *) (BmpAddress + 20)) << 16;
 8011676:	687b      	ldr	r3, [r7, #4]
 8011678:	3314      	adds	r3, #20
 801167a:	881b      	ldrh	r3, [r3, #0]
 801167c:	041b      	lsls	r3, r3, #16
 801167e:	461a      	mov	r2, r3
 8011680:	693b      	ldr	r3, [r7, #16]
 8011682:	4313      	orrs	r3, r2
 8011684:	613b      	str	r3, [r7, #16]

  /* Read bitmap height */
  height = *(uint16_t *) (BmpAddress + 22);
 8011686:	687b      	ldr	r3, [r7, #4]
 8011688:	3316      	adds	r3, #22
 801168a:	881b      	ldrh	r3, [r3, #0]
 801168c:	60fb      	str	r3, [r7, #12]
  height |= (*(uint16_t *) (BmpAddress + 24)) << 16;
 801168e:	687b      	ldr	r3, [r7, #4]
 8011690:	3318      	adds	r3, #24
 8011692:	881b      	ldrh	r3, [r3, #0]
 8011694:	041b      	lsls	r3, r3, #16
 8011696:	461a      	mov	r2, r3
 8011698:	68fb      	ldr	r3, [r7, #12]
 801169a:	4313      	orrs	r3, r2
 801169c:	60fb      	str	r3, [r7, #12]

  /* Read bit/pixel */
  bit_pixel = *(uint16_t *) (BmpAddress + 28);  
 801169e:	687b      	ldr	r3, [r7, #4]
 80116a0:	331c      	adds	r3, #28
 80116a2:	881b      	ldrh	r3, [r3, #0]
 80116a4:	60bb      	str	r3, [r7, #8]
 
  if (CurrentLayer == LCD_BACKGROUND_LAYER)
 80116a6:	4b4f      	ldr	r3, [pc, #316]	; (80117e4 <LCD_WriteBMP+0x1d8>)
 80116a8:	681b      	ldr	r3, [r3, #0]
 80116aa:	2b00      	cmp	r3, #0
 80116ac:	d127      	bne.n	80116fe <LCD_WriteBMP+0xf2>
  {
    /* reconfigure layer size in accordance with the picture */
    LTDC_LayerSize(LTDC_Layer1, width, height);
 80116ae:	68fa      	ldr	r2, [r7, #12]
 80116b0:	6939      	ldr	r1, [r7, #16]
 80116b2:	484d      	ldr	r0, [pc, #308]	; (80117e8 <LCD_WriteBMP+0x1dc>)
 80116b4:	f7f6 fa7f 	bl	8007bb6 <LTDC_LayerSize>
    LTDC_ReloadConfig(LTDC_VBReload);
 80116b8:	2002      	movs	r0, #2
 80116ba:	f7f5 fff5 	bl	80076a8 <LTDC_ReloadConfig>

    /* Reconfigure the Layer pixel format in accordance with the picture */    
    if ((bit_pixel/8) == 4)
 80116be:	68bb      	ldr	r3, [r7, #8]
 80116c0:	3b20      	subs	r3, #32
 80116c2:	2b07      	cmp	r3, #7
 80116c4:	d807      	bhi.n	80116d6 <LCD_WriteBMP+0xca>
    {
      LTDC_LayerPixelFormat(LTDC_Layer1, LTDC_Pixelformat_ARGB8888);
 80116c6:	2100      	movs	r1, #0
 80116c8:	4847      	ldr	r0, [pc, #284]	; (80117e8 <LCD_WriteBMP+0x1dc>)
 80116ca:	f7f6 fada 	bl	8007c82 <LTDC_LayerPixelFormat>
      LTDC_ReloadConfig(LTDC_VBReload);
 80116ce:	2002      	movs	r0, #2
 80116d0:	f7f5 ffea 	bl	80076a8 <LTDC_ReloadConfig>
 80116d4:	e03a      	b.n	801174c <LCD_WriteBMP+0x140>
    }
    else if ((bit_pixel/8) == 2)
 80116d6:	68bb      	ldr	r3, [r7, #8]
 80116d8:	3b10      	subs	r3, #16
 80116da:	2b07      	cmp	r3, #7
 80116dc:	d807      	bhi.n	80116ee <LCD_WriteBMP+0xe2>
    {
      LTDC_LayerPixelFormat(LTDC_Layer1, LTDC_Pixelformat_RGB565);
 80116de:	2102      	movs	r1, #2
 80116e0:	4841      	ldr	r0, [pc, #260]	; (80117e8 <LCD_WriteBMP+0x1dc>)
 80116e2:	f7f6 face 	bl	8007c82 <LTDC_LayerPixelFormat>
      LTDC_ReloadConfig(LTDC_VBReload);
 80116e6:	2002      	movs	r0, #2
 80116e8:	f7f5 ffde 	bl	80076a8 <LTDC_ReloadConfig>
 80116ec:	e02e      	b.n	801174c <LCD_WriteBMP+0x140>
    }
    else 
    {
      LTDC_LayerPixelFormat(LTDC_Layer1, LTDC_Pixelformat_RGB888);
 80116ee:	2101      	movs	r1, #1
 80116f0:	483d      	ldr	r0, [pc, #244]	; (80117e8 <LCD_WriteBMP+0x1dc>)
 80116f2:	f7f6 fac6 	bl	8007c82 <LTDC_LayerPixelFormat>
      LTDC_ReloadConfig(LTDC_VBReload);
 80116f6:	2002      	movs	r0, #2
 80116f8:	f7f5 ffd6 	bl	80076a8 <LTDC_ReloadConfig>
 80116fc:	e026      	b.n	801174c <LCD_WriteBMP+0x140>
    } 
  }
  else
  {
    /* reconfigure layer size in accordance with the picture */
    LTDC_LayerSize(LTDC_Layer2, width, height);
 80116fe:	68fa      	ldr	r2, [r7, #12]
 8011700:	6939      	ldr	r1, [r7, #16]
 8011702:	483a      	ldr	r0, [pc, #232]	; (80117ec <LCD_WriteBMP+0x1e0>)
 8011704:	f7f6 fa57 	bl	8007bb6 <LTDC_LayerSize>
    LTDC_ReloadConfig(LTDC_VBReload); 
 8011708:	2002      	movs	r0, #2
 801170a:	f7f5 ffcd 	bl	80076a8 <LTDC_ReloadConfig>
    
    /* Reconfigure the Layer pixel format in accordance with the picture */
    if ((bit_pixel/8) == 4)
 801170e:	68bb      	ldr	r3, [r7, #8]
 8011710:	3b20      	subs	r3, #32
 8011712:	2b07      	cmp	r3, #7
 8011714:	d807      	bhi.n	8011726 <LCD_WriteBMP+0x11a>
    {
      LTDC_LayerPixelFormat(LTDC_Layer2, LTDC_Pixelformat_ARGB8888);
 8011716:	2100      	movs	r1, #0
 8011718:	4834      	ldr	r0, [pc, #208]	; (80117ec <LCD_WriteBMP+0x1e0>)
 801171a:	f7f6 fab2 	bl	8007c82 <LTDC_LayerPixelFormat>
      LTDC_ReloadConfig(LTDC_VBReload);
 801171e:	2002      	movs	r0, #2
 8011720:	f7f5 ffc2 	bl	80076a8 <LTDC_ReloadConfig>
 8011724:	e012      	b.n	801174c <LCD_WriteBMP+0x140>
    }
    else if ((bit_pixel/8) == 2)
 8011726:	68bb      	ldr	r3, [r7, #8]
 8011728:	3b10      	subs	r3, #16
 801172a:	2b07      	cmp	r3, #7
 801172c:	d807      	bhi.n	801173e <LCD_WriteBMP+0x132>
    {
      LTDC_LayerPixelFormat(LTDC_Layer2, LTDC_Pixelformat_RGB565);
 801172e:	2102      	movs	r1, #2
 8011730:	482e      	ldr	r0, [pc, #184]	; (80117ec <LCD_WriteBMP+0x1e0>)
 8011732:	f7f6 faa6 	bl	8007c82 <LTDC_LayerPixelFormat>
      LTDC_ReloadConfig(LTDC_VBReload);
 8011736:	2002      	movs	r0, #2
 8011738:	f7f5 ffb6 	bl	80076a8 <LTDC_ReloadConfig>
 801173c:	e006      	b.n	801174c <LCD_WriteBMP+0x140>
    }
    else
    {
      LTDC_LayerPixelFormat(LTDC_Layer2, LTDC_Pixelformat_RGB888);
 801173e:	2101      	movs	r1, #1
 8011740:	482a      	ldr	r0, [pc, #168]	; (80117ec <LCD_WriteBMP+0x1e0>)
 8011742:	f7f6 fa9e 	bl	8007c82 <LTDC_LayerPixelFormat>
      LTDC_ReloadConfig(LTDC_VBReload);  
 8011746:	2002      	movs	r0, #2
 8011748:	f7f5 ffae 	bl	80076a8 <LTDC_ReloadConfig>
    }
  }
 
  /* compute the real size of the picture (without the header)) */  
  size = (size - index); 
 801174c:	697a      	ldr	r2, [r7, #20]
 801174e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011750:	1ad3      	subs	r3, r2, r3
 8011752:	617b      	str	r3, [r7, #20]

  /* bypass the bitmap header */
  BmpAddress += index;
 8011754:	687a      	ldr	r2, [r7, #4]
 8011756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011758:	4413      	add	r3, r2
 801175a:	607b      	str	r3, [r7, #4]

  /* start copie image from the bottom */
  Address += width*(height-1)*(bit_pixel/8);
 801175c:	68fb      	ldr	r3, [r7, #12]
 801175e:	3b01      	subs	r3, #1
 8011760:	693a      	ldr	r2, [r7, #16]
 8011762:	fb02 f303 	mul.w	r3, r2, r3
 8011766:	68ba      	ldr	r2, [r7, #8]
 8011768:	08d2      	lsrs	r2, r2, #3
 801176a:	fb02 f303 	mul.w	r3, r2, r3
 801176e:	6a3a      	ldr	r2, [r7, #32]
 8011770:	4413      	add	r3, r2
 8011772:	623b      	str	r3, [r7, #32]
  
  for(index = 0; index < size; index++)
 8011774:	2300      	movs	r3, #0
 8011776:	627b      	str	r3, [r7, #36]	; 0x24
 8011778:	e02a      	b.n	80117d0 <LCD_WriteBMP+0x1c4>
  {
    *(__IO uint8_t*) (Address) = *(__IO uint8_t *)BmpAddress;
 801177a:	687a      	ldr	r2, [r7, #4]
 801177c:	6a3b      	ldr	r3, [r7, #32]
 801177e:	7812      	ldrb	r2, [r2, #0]
 8011780:	b2d2      	uxtb	r2, r2
 8011782:	701a      	strb	r2, [r3, #0]
    
    /*jump on next byte */   
    BmpAddress++;
 8011784:	687b      	ldr	r3, [r7, #4]
 8011786:	3301      	adds	r3, #1
 8011788:	607b      	str	r3, [r7, #4]
    Address++;
 801178a:	6a3b      	ldr	r3, [r7, #32]
 801178c:	3301      	adds	r3, #1
 801178e:	623b      	str	r3, [r7, #32]
    currentline++;
 8011790:	69fb      	ldr	r3, [r7, #28]
 8011792:	3301      	adds	r3, #1
 8011794:	61fb      	str	r3, [r7, #28]
    
    if((currentline/(bit_pixel/8)) == width)
 8011796:	68bb      	ldr	r3, [r7, #8]
 8011798:	08db      	lsrs	r3, r3, #3
 801179a:	69fa      	ldr	r2, [r7, #28]
 801179c:	fbb2 f3f3 	udiv	r3, r2, r3
 80117a0:	693a      	ldr	r2, [r7, #16]
 80117a2:	429a      	cmp	r2, r3
 80117a4:	d111      	bne.n	80117ca <LCD_WriteBMP+0x1be>
    {
      if(linenumber < height)
 80117a6:	69ba      	ldr	r2, [r7, #24]
 80117a8:	68fb      	ldr	r3, [r7, #12]
 80117aa:	429a      	cmp	r2, r3
 80117ac:	d20d      	bcs.n	80117ca <LCD_WriteBMP+0x1be>
      {
        linenumber++;
 80117ae:	69bb      	ldr	r3, [r7, #24]
 80117b0:	3301      	adds	r3, #1
 80117b2:	61bb      	str	r3, [r7, #24]
        Address -=(2*width*(bit_pixel/8));
 80117b4:	68bb      	ldr	r3, [r7, #8]
 80117b6:	08db      	lsrs	r3, r3, #3
 80117b8:	693a      	ldr	r2, [r7, #16]
 80117ba:	fb02 f303 	mul.w	r3, r2, r3
 80117be:	005b      	lsls	r3, r3, #1
 80117c0:	6a3a      	ldr	r2, [r7, #32]
 80117c2:	1ad3      	subs	r3, r2, r3
 80117c4:	623b      	str	r3, [r7, #32]
        currentline = 0;
 80117c6:	2300      	movs	r3, #0
 80117c8:	61fb      	str	r3, [r7, #28]
  for(index = 0; index < size; index++)
 80117ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80117cc:	3301      	adds	r3, #1
 80117ce:	627b      	str	r3, [r7, #36]	; 0x24
 80117d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80117d2:	697b      	ldr	r3, [r7, #20]
 80117d4:	429a      	cmp	r2, r3
 80117d6:	d3d0      	bcc.n	801177a <LCD_WriteBMP+0x16e>
      }
    }
  }
}
 80117d8:	bf00      	nop
 80117da:	3728      	adds	r7, #40	; 0x28
 80117dc:	46bd      	mov	sp, r7
 80117de:	bd80      	pop	{r7, pc}
 80117e0:	200000d0 	.word	0x200000d0
 80117e4:	20002e30 	.word	0x20002e30
 80117e8:	40016884 	.word	0x40016884
 80117ec:	40016904 	.word	0x40016904

080117f0 <LCD_DrawFullRect>:
  * @param  Height: rectangle height.
  * @param  Width: rectangle width.
  * @retval None
  */
void LCD_DrawFullRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 80117f0:	b590      	push	{r4, r7, lr}
 80117f2:	b091      	sub	sp, #68	; 0x44
 80117f4:	af00      	add	r7, sp, #0
 80117f6:	4604      	mov	r4, r0
 80117f8:	4608      	mov	r0, r1
 80117fa:	4611      	mov	r1, r2
 80117fc:	461a      	mov	r2, r3
 80117fe:	4623      	mov	r3, r4
 8011800:	80fb      	strh	r3, [r7, #6]
 8011802:	4603      	mov	r3, r0
 8011804:	80bb      	strh	r3, [r7, #4]
 8011806:	460b      	mov	r3, r1
 8011808:	807b      	strh	r3, [r7, #2]
 801180a:	4613      	mov	r3, r2
 801180c:	803b      	strh	r3, [r7, #0]
  DMA2D_InitTypeDef      DMA2D_InitStruct;
  
  uint32_t  Xaddress = 0; 
 801180e:	2300      	movs	r3, #0
 8011810:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint16_t Red_Value = 0, Green_Value = 0, Blue_Value = 0;
 8011812:	2300      	movs	r3, #0
 8011814:	877b      	strh	r3, [r7, #58]	; 0x3a
 8011816:	2300      	movs	r3, #0
 8011818:	873b      	strh	r3, [r7, #56]	; 0x38
 801181a:	2300      	movs	r3, #0
 801181c:	86fb      	strh	r3, [r7, #54]	; 0x36
 
  Red_Value = (0xF800 & CurrentTextColor) >> 11;
 801181e:	4b27      	ldr	r3, [pc, #156]	; (80118bc <LCD_DrawFullRect+0xcc>)
 8011820:	881b      	ldrh	r3, [r3, #0]
 8011822:	0adb      	lsrs	r3, r3, #11
 8011824:	877b      	strh	r3, [r7, #58]	; 0x3a
  Blue_Value = 0x001F & CurrentTextColor;
 8011826:	4b25      	ldr	r3, [pc, #148]	; (80118bc <LCD_DrawFullRect+0xcc>)
 8011828:	881b      	ldrh	r3, [r3, #0]
 801182a:	f003 031f 	and.w	r3, r3, #31
 801182e:	86fb      	strh	r3, [r7, #54]	; 0x36
  Green_Value = (0x07E0 & CurrentTextColor) >> 5;
 8011830:	4b22      	ldr	r3, [pc, #136]	; (80118bc <LCD_DrawFullRect+0xcc>)
 8011832:	881b      	ldrh	r3, [r3, #0]
 8011834:	095b      	lsrs	r3, r3, #5
 8011836:	b29b      	uxth	r3, r3
 8011838:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801183c:	873b      	strh	r3, [r7, #56]	; 0x38
  
  Xaddress = CurrentFrameBuffer + 2*(LCD_PIXEL_WIDTH*Ypos + Xpos);
 801183e:	88ba      	ldrh	r2, [r7, #4]
 8011840:	4613      	mov	r3, r2
 8011842:	011b      	lsls	r3, r3, #4
 8011844:	1a9b      	subs	r3, r3, r2
 8011846:	011b      	lsls	r3, r3, #4
 8011848:	461a      	mov	r2, r3
 801184a:	88fb      	ldrh	r3, [r7, #6]
 801184c:	4413      	add	r3, r2
 801184e:	005b      	lsls	r3, r3, #1
 8011850:	461a      	mov	r2, r3
 8011852:	4b1b      	ldr	r3, [pc, #108]	; (80118c0 <LCD_DrawFullRect+0xd0>)
 8011854:	681b      	ldr	r3, [r3, #0]
 8011856:	4413      	add	r3, r2
 8011858:	63fb      	str	r3, [r7, #60]	; 0x3c
  
  /* configure DMA2D */
  DMA2D_DeInit();
 801185a:	f7f2 fd1f 	bl	800429c <DMA2D_DeInit>
  DMA2D_InitStruct.DMA2D_Mode = DMA2D_R2M;       
 801185e:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8011862:	60fb      	str	r3, [r7, #12]
  DMA2D_InitStruct.DMA2D_CMode = DMA2D_RGB565;      
 8011864:	2302      	movs	r3, #2
 8011866:	613b      	str	r3, [r7, #16]
  DMA2D_InitStruct.DMA2D_OutputGreen = Green_Value;      
 8011868:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 801186a:	61bb      	str	r3, [r7, #24]
  DMA2D_InitStruct.DMA2D_OutputBlue = Blue_Value;     
 801186c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801186e:	617b      	str	r3, [r7, #20]
  DMA2D_InitStruct.DMA2D_OutputRed = Red_Value;                
 8011870:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8011872:	61fb      	str	r3, [r7, #28]
  DMA2D_InitStruct.DMA2D_OutputAlpha = 0x0F;                  
 8011874:	230f      	movs	r3, #15
 8011876:	623b      	str	r3, [r7, #32]
  DMA2D_InitStruct.DMA2D_OutputMemoryAdd = Xaddress;                
 8011878:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801187a:	627b      	str	r3, [r7, #36]	; 0x24
  DMA2D_InitStruct.DMA2D_OutputOffset = (LCD_PIXEL_WIDTH - Width);                
 801187c:	887b      	ldrh	r3, [r7, #2]
 801187e:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 8011882:	62bb      	str	r3, [r7, #40]	; 0x28
  DMA2D_InitStruct.DMA2D_NumberOfLine = Height;            
 8011884:	883b      	ldrh	r3, [r7, #0]
 8011886:	62fb      	str	r3, [r7, #44]	; 0x2c
  DMA2D_InitStruct.DMA2D_PixelPerLine = Width;
 8011888:	887b      	ldrh	r3, [r7, #2]
 801188a:	633b      	str	r3, [r7, #48]	; 0x30
  DMA2D_Init(&DMA2D_InitStruct); 
 801188c:	f107 030c 	add.w	r3, r7, #12
 8011890:	4618      	mov	r0, r3
 8011892:	f7f2 fd11 	bl	80042b8 <DMA2D_Init>
  
  /* Start Transfer */ 
  DMA2D_StartTransfer();
 8011896:	f7f2 fde7 	bl	8004468 <DMA2D_StartTransfer>
  
  /* Wait for CTC Flag activation */
  while(DMA2D_GetFlagStatus(DMA2D_FLAG_TC) == RESET)
 801189a:	bf00      	nop
 801189c:	2002      	movs	r0, #2
 801189e:	f7f2 ffed 	bl	800487c <DMA2D_GetFlagStatus>
 80118a2:	4603      	mov	r3, r0
 80118a4:	2b00      	cmp	r3, #0
 80118a6:	d0f9      	beq.n	801189c <LCD_DrawFullRect+0xac>
  {
  } 

  LCD_SetTextColor(CurrentTextColor);
 80118a8:	4b04      	ldr	r3, [pc, #16]	; (80118bc <LCD_DrawFullRect+0xcc>)
 80118aa:	881b      	ldrh	r3, [r3, #0]
 80118ac:	4618      	mov	r0, r3
 80118ae:	f7fe ffdb 	bl	8010868 <LCD_SetTextColor>
}
 80118b2:	bf00      	nop
 80118b4:	3744      	adds	r7, #68	; 0x44
 80118b6:	46bd      	mov	sp, r7
 80118b8:	bd90      	pop	{r4, r7, pc}
 80118ba:	bf00      	nop
 80118bc:	20002e2c 	.word	0x20002e2c
 80118c0:	200000d0 	.word	0x200000d0

080118c4 <LCD_DrawFullCircle>:
  * @param  Ypos: specifies the Y position, can be a value from 0 to 320.
  * @param  Radius
  * @retval None
  */
void LCD_DrawFullCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 80118c4:	b580      	push	{r7, lr}
 80118c6:	b086      	sub	sp, #24
 80118c8:	af00      	add	r7, sp, #0
 80118ca:	4603      	mov	r3, r0
 80118cc:	80fb      	strh	r3, [r7, #6]
 80118ce:	460b      	mov	r3, r1
 80118d0:	80bb      	strh	r3, [r7, #4]
 80118d2:	4613      	mov	r3, r2
 80118d4:	807b      	strh	r3, [r7, #2]
  int32_t  D;    /* Decision Variable */ 
  uint32_t  CurX;/* Current X Value */
  uint32_t  CurY;/* Current Y Value */ 
  
  D = 3 - (Radius << 1);
 80118d6:	887b      	ldrh	r3, [r7, #2]
 80118d8:	005b      	lsls	r3, r3, #1
 80118da:	f1c3 0303 	rsb	r3, r3, #3
 80118de:	617b      	str	r3, [r7, #20]
  
  CurX = 0;
 80118e0:	2300      	movs	r3, #0
 80118e2:	613b      	str	r3, [r7, #16]
  CurY = Radius;
 80118e4:	887b      	ldrh	r3, [r7, #2]
 80118e6:	60fb      	str	r3, [r7, #12]
  
  while (CurX <= CurY)
 80118e8:	e061      	b.n	80119ae <LCD_DrawFullCircle+0xea>
  {
    if(CurY > 0) 
 80118ea:	68fb      	ldr	r3, [r7, #12]
 80118ec:	2b00      	cmp	r3, #0
 80118ee:	d021      	beq.n	8011934 <LCD_DrawFullCircle+0x70>
    {
      LCD_DrawLine(Xpos - CurX, Ypos - CurY, 2*CurY, LCD_DIR_VERTICAL);
 80118f0:	693b      	ldr	r3, [r7, #16]
 80118f2:	b29b      	uxth	r3, r3
 80118f4:	88fa      	ldrh	r2, [r7, #6]
 80118f6:	1ad3      	subs	r3, r2, r3
 80118f8:	b298      	uxth	r0, r3
 80118fa:	68fb      	ldr	r3, [r7, #12]
 80118fc:	b29b      	uxth	r3, r3
 80118fe:	88ba      	ldrh	r2, [r7, #4]
 8011900:	1ad3      	subs	r3, r2, r3
 8011902:	b299      	uxth	r1, r3
 8011904:	68fb      	ldr	r3, [r7, #12]
 8011906:	b29b      	uxth	r3, r3
 8011908:	005b      	lsls	r3, r3, #1
 801190a:	b29a      	uxth	r2, r3
 801190c:	2301      	movs	r3, #1
 801190e:	f7ff fa04 	bl	8010d1a <LCD_DrawLine>
      LCD_DrawLine(Xpos + CurX, Ypos - CurY, 2*CurY, LCD_DIR_VERTICAL);
 8011912:	693b      	ldr	r3, [r7, #16]
 8011914:	b29a      	uxth	r2, r3
 8011916:	88fb      	ldrh	r3, [r7, #6]
 8011918:	4413      	add	r3, r2
 801191a:	b298      	uxth	r0, r3
 801191c:	68fb      	ldr	r3, [r7, #12]
 801191e:	b29b      	uxth	r3, r3
 8011920:	88ba      	ldrh	r2, [r7, #4]
 8011922:	1ad3      	subs	r3, r2, r3
 8011924:	b299      	uxth	r1, r3
 8011926:	68fb      	ldr	r3, [r7, #12]
 8011928:	b29b      	uxth	r3, r3
 801192a:	005b      	lsls	r3, r3, #1
 801192c:	b29a      	uxth	r2, r3
 801192e:	2301      	movs	r3, #1
 8011930:	f7ff f9f3 	bl	8010d1a <LCD_DrawLine>
    }
    
    if(CurX > 0) 
 8011934:	693b      	ldr	r3, [r7, #16]
 8011936:	2b00      	cmp	r3, #0
 8011938:	d021      	beq.n	801197e <LCD_DrawFullCircle+0xba>
    {
      LCD_DrawLine(Xpos - CurY, Ypos - CurX, 2*CurX, LCD_DIR_VERTICAL);
 801193a:	68fb      	ldr	r3, [r7, #12]
 801193c:	b29b      	uxth	r3, r3
 801193e:	88fa      	ldrh	r2, [r7, #6]
 8011940:	1ad3      	subs	r3, r2, r3
 8011942:	b298      	uxth	r0, r3
 8011944:	693b      	ldr	r3, [r7, #16]
 8011946:	b29b      	uxth	r3, r3
 8011948:	88ba      	ldrh	r2, [r7, #4]
 801194a:	1ad3      	subs	r3, r2, r3
 801194c:	b299      	uxth	r1, r3
 801194e:	693b      	ldr	r3, [r7, #16]
 8011950:	b29b      	uxth	r3, r3
 8011952:	005b      	lsls	r3, r3, #1
 8011954:	b29a      	uxth	r2, r3
 8011956:	2301      	movs	r3, #1
 8011958:	f7ff f9df 	bl	8010d1a <LCD_DrawLine>
      LCD_DrawLine(Xpos + CurY, Ypos - CurX, 2*CurX, LCD_DIR_VERTICAL);
 801195c:	68fb      	ldr	r3, [r7, #12]
 801195e:	b29a      	uxth	r2, r3
 8011960:	88fb      	ldrh	r3, [r7, #6]
 8011962:	4413      	add	r3, r2
 8011964:	b298      	uxth	r0, r3
 8011966:	693b      	ldr	r3, [r7, #16]
 8011968:	b29b      	uxth	r3, r3
 801196a:	88ba      	ldrh	r2, [r7, #4]
 801196c:	1ad3      	subs	r3, r2, r3
 801196e:	b299      	uxth	r1, r3
 8011970:	693b      	ldr	r3, [r7, #16]
 8011972:	b29b      	uxth	r3, r3
 8011974:	005b      	lsls	r3, r3, #1
 8011976:	b29a      	uxth	r2, r3
 8011978:	2301      	movs	r3, #1
 801197a:	f7ff f9ce 	bl	8010d1a <LCD_DrawLine>
    }
    if (D < 0)
 801197e:	697b      	ldr	r3, [r7, #20]
 8011980:	2b00      	cmp	r3, #0
 8011982:	da06      	bge.n	8011992 <LCD_DrawFullCircle+0xce>
    { 
      D += (CurX << 2) + 6;
 8011984:	693b      	ldr	r3, [r7, #16]
 8011986:	009a      	lsls	r2, r3, #2
 8011988:	697b      	ldr	r3, [r7, #20]
 801198a:	4413      	add	r3, r2
 801198c:	3306      	adds	r3, #6
 801198e:	617b      	str	r3, [r7, #20]
 8011990:	e00a      	b.n	80119a8 <LCD_DrawFullCircle+0xe4>
    }
    else
    {
      D += ((CurX - CurY) << 2) + 10;
 8011992:	693a      	ldr	r2, [r7, #16]
 8011994:	68fb      	ldr	r3, [r7, #12]
 8011996:	1ad3      	subs	r3, r2, r3
 8011998:	009a      	lsls	r2, r3, #2
 801199a:	697b      	ldr	r3, [r7, #20]
 801199c:	4413      	add	r3, r2
 801199e:	330a      	adds	r3, #10
 80119a0:	617b      	str	r3, [r7, #20]
      CurY--;
 80119a2:	68fb      	ldr	r3, [r7, #12]
 80119a4:	3b01      	subs	r3, #1
 80119a6:	60fb      	str	r3, [r7, #12]
    }
    CurX++;
 80119a8:	693b      	ldr	r3, [r7, #16]
 80119aa:	3301      	adds	r3, #1
 80119ac:	613b      	str	r3, [r7, #16]
  while (CurX <= CurY)
 80119ae:	693a      	ldr	r2, [r7, #16]
 80119b0:	68fb      	ldr	r3, [r7, #12]
 80119b2:	429a      	cmp	r2, r3
 80119b4:	d999      	bls.n	80118ea <LCD_DrawFullCircle+0x26>
  }
  
  LCD_DrawCircle(Xpos, Ypos, Radius);  
 80119b6:	887a      	ldrh	r2, [r7, #2]
 80119b8:	88b9      	ldrh	r1, [r7, #4]
 80119ba:	88fb      	ldrh	r3, [r7, #6]
 80119bc:	4618      	mov	r0, r3
 80119be:	f7ff fa4a 	bl	8010e56 <LCD_DrawCircle>
}
 80119c2:	bf00      	nop
 80119c4:	3718      	adds	r7, #24
 80119c6:	46bd      	mov	sp, r7
 80119c8:	bd80      	pop	{r7, pc}

080119ca <LCD_DrawUniLine>:
  * @param  x2: specifies the point 2 x position.
  * @param  y2: specifies the point 2 y position.
  * @retval None
  */
void LCD_DrawUniLine(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2)
{
 80119ca:	b590      	push	{r4, r7, lr}
 80119cc:	b08b      	sub	sp, #44	; 0x2c
 80119ce:	af00      	add	r7, sp, #0
 80119d0:	4604      	mov	r4, r0
 80119d2:	4608      	mov	r0, r1
 80119d4:	4611      	mov	r1, r2
 80119d6:	461a      	mov	r2, r3
 80119d8:	4623      	mov	r3, r4
 80119da:	80fb      	strh	r3, [r7, #6]
 80119dc:	4603      	mov	r3, r0
 80119de:	80bb      	strh	r3, [r7, #4]
 80119e0:	460b      	mov	r3, r1
 80119e2:	807b      	strh	r3, [r7, #2]
 80119e4:	4613      	mov	r3, r2
 80119e6:	803b      	strh	r3, [r7, #0]
  int16_t deltax = 0, deltay = 0, x = 0, y = 0, xinc1 = 0, xinc2 = 0, 
 80119e8:	2300      	movs	r3, #0
 80119ea:	823b      	strh	r3, [r7, #16]
 80119ec:	2300      	movs	r3, #0
 80119ee:	81fb      	strh	r3, [r7, #14]
 80119f0:	2300      	movs	r3, #0
 80119f2:	84fb      	strh	r3, [r7, #38]	; 0x26
 80119f4:	2300      	movs	r3, #0
 80119f6:	84bb      	strh	r3, [r7, #36]	; 0x24
 80119f8:	2300      	movs	r3, #0
 80119fa:	847b      	strh	r3, [r7, #34]	; 0x22
 80119fc:	2300      	movs	r3, #0
 80119fe:	843b      	strh	r3, [r7, #32]
  yinc1 = 0, yinc2 = 0, den = 0, num = 0, numadd = 0, numpixels = 0, 
 8011a00:	2300      	movs	r3, #0
 8011a02:	83fb      	strh	r3, [r7, #30]
 8011a04:	2300      	movs	r3, #0
 8011a06:	83bb      	strh	r3, [r7, #28]
 8011a08:	2300      	movs	r3, #0
 8011a0a:	837b      	strh	r3, [r7, #26]
 8011a0c:	2300      	movs	r3, #0
 8011a0e:	833b      	strh	r3, [r7, #24]
 8011a10:	2300      	movs	r3, #0
 8011a12:	82fb      	strh	r3, [r7, #22]
 8011a14:	2300      	movs	r3, #0
 8011a16:	82bb      	strh	r3, [r7, #20]
  curpixel = 0;
 8011a18:	2300      	movs	r3, #0
 8011a1a:	827b      	strh	r3, [r7, #18]
  
  deltax = ABS(x2 - x1);        /* The difference between the x's */
 8011a1c:	887a      	ldrh	r2, [r7, #2]
 8011a1e:	88fb      	ldrh	r3, [r7, #6]
 8011a20:	1ad3      	subs	r3, r2, r3
 8011a22:	2b00      	cmp	r3, #0
 8011a24:	bfb8      	it	lt
 8011a26:	425b      	neglt	r3, r3
 8011a28:	823b      	strh	r3, [r7, #16]
  deltay = ABS(y2 - y1);        /* The difference between the y's */
 8011a2a:	883a      	ldrh	r2, [r7, #0]
 8011a2c:	88bb      	ldrh	r3, [r7, #4]
 8011a2e:	1ad3      	subs	r3, r2, r3
 8011a30:	2b00      	cmp	r3, #0
 8011a32:	bfb8      	it	lt
 8011a34:	425b      	neglt	r3, r3
 8011a36:	81fb      	strh	r3, [r7, #14]
  x = x1;                       /* Start x off at the first pixel */
 8011a38:	88fb      	ldrh	r3, [r7, #6]
 8011a3a:	84fb      	strh	r3, [r7, #38]	; 0x26
  y = y1;                       /* Start y off at the first pixel */
 8011a3c:	88bb      	ldrh	r3, [r7, #4]
 8011a3e:	84bb      	strh	r3, [r7, #36]	; 0x24
  
  if (x2 >= x1)                 /* The x-values are increasing */
 8011a40:	887a      	ldrh	r2, [r7, #2]
 8011a42:	88fb      	ldrh	r3, [r7, #6]
 8011a44:	429a      	cmp	r2, r3
 8011a46:	d304      	bcc.n	8011a52 <LCD_DrawUniLine+0x88>
  {
    xinc1 = 1;
 8011a48:	2301      	movs	r3, #1
 8011a4a:	847b      	strh	r3, [r7, #34]	; 0x22
    xinc2 = 1;
 8011a4c:	2301      	movs	r3, #1
 8011a4e:	843b      	strh	r3, [r7, #32]
 8011a50:	e005      	b.n	8011a5e <LCD_DrawUniLine+0x94>
  }
  else                          /* The x-values are decreasing */
  {
    xinc1 = -1;
 8011a52:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011a56:	847b      	strh	r3, [r7, #34]	; 0x22
    xinc2 = -1;
 8011a58:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011a5c:	843b      	strh	r3, [r7, #32]
  }
  
  if (y2 >= y1)                 /* The y-values are increasing */
 8011a5e:	883a      	ldrh	r2, [r7, #0]
 8011a60:	88bb      	ldrh	r3, [r7, #4]
 8011a62:	429a      	cmp	r2, r3
 8011a64:	d304      	bcc.n	8011a70 <LCD_DrawUniLine+0xa6>
  {
    yinc1 = 1;
 8011a66:	2301      	movs	r3, #1
 8011a68:	83fb      	strh	r3, [r7, #30]
    yinc2 = 1;
 8011a6a:	2301      	movs	r3, #1
 8011a6c:	83bb      	strh	r3, [r7, #28]
 8011a6e:	e005      	b.n	8011a7c <LCD_DrawUniLine+0xb2>
  }
  else                          /* The y-values are decreasing */
  {
    yinc1 = -1;
 8011a70:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011a74:	83fb      	strh	r3, [r7, #30]
    yinc2 = -1;
 8011a76:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011a7a:	83bb      	strh	r3, [r7, #28]
  }
  
  if (deltax >= deltay)         /* There is at least one x-value for every y-value */
 8011a7c:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8011a80:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8011a84:	429a      	cmp	r2, r3
 8011a86:	db10      	blt.n	8011aaa <LCD_DrawUniLine+0xe0>
  {
    xinc1 = 0;                  /* Don't change the x when numerator >= denominator */
 8011a88:	2300      	movs	r3, #0
 8011a8a:	847b      	strh	r3, [r7, #34]	; 0x22
    yinc2 = 0;                  /* Don't change the y for every iteration */
 8011a8c:	2300      	movs	r3, #0
 8011a8e:	83bb      	strh	r3, [r7, #28]
    den = deltax;
 8011a90:	8a3b      	ldrh	r3, [r7, #16]
 8011a92:	837b      	strh	r3, [r7, #26]
    num = deltax / 2;
 8011a94:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8011a98:	0fda      	lsrs	r2, r3, #31
 8011a9a:	4413      	add	r3, r2
 8011a9c:	105b      	asrs	r3, r3, #1
 8011a9e:	833b      	strh	r3, [r7, #24]
    numadd = deltay;
 8011aa0:	89fb      	ldrh	r3, [r7, #14]
 8011aa2:	82fb      	strh	r3, [r7, #22]
    numpixels = deltax;         /* There are more x-values than y-values */
 8011aa4:	8a3b      	ldrh	r3, [r7, #16]
 8011aa6:	82bb      	strh	r3, [r7, #20]
 8011aa8:	e00f      	b.n	8011aca <LCD_DrawUniLine+0x100>
  }
  else                          /* There is at least one y-value for every x-value */
  {
    xinc2 = 0;                  /* Don't change the x for every iteration */
 8011aaa:	2300      	movs	r3, #0
 8011aac:	843b      	strh	r3, [r7, #32]
    yinc1 = 0;                  /* Don't change the y when numerator >= denominator */
 8011aae:	2300      	movs	r3, #0
 8011ab0:	83fb      	strh	r3, [r7, #30]
    den = deltay;
 8011ab2:	89fb      	ldrh	r3, [r7, #14]
 8011ab4:	837b      	strh	r3, [r7, #26]
    num = deltay / 2;
 8011ab6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8011aba:	0fda      	lsrs	r2, r3, #31
 8011abc:	4413      	add	r3, r2
 8011abe:	105b      	asrs	r3, r3, #1
 8011ac0:	833b      	strh	r3, [r7, #24]
    numadd = deltax;
 8011ac2:	8a3b      	ldrh	r3, [r7, #16]
 8011ac4:	82fb      	strh	r3, [r7, #22]
    numpixels = deltay;         /* There are more y-values than x-values */
 8011ac6:	89fb      	ldrh	r3, [r7, #14]
 8011ac8:	82bb      	strh	r3, [r7, #20]
  }
  
  for (curpixel = 0; curpixel <= numpixels; curpixel++)
 8011aca:	2300      	movs	r3, #0
 8011acc:	827b      	strh	r3, [r7, #18]
 8011ace:	e031      	b.n	8011b34 <LCD_DrawUniLine+0x16a>
  {
    PutPixel(x, y);             /* Draw the current pixel */
 8011ad0:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 8011ad4:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8011ad8:	4611      	mov	r1, r2
 8011ada:	4618      	mov	r0, r3
 8011adc:	f000 fe02 	bl	80126e4 <PutPixel>
    num += numadd;              /* Increase the numerator by the top of the fraction */
 8011ae0:	8b3a      	ldrh	r2, [r7, #24]
 8011ae2:	8afb      	ldrh	r3, [r7, #22]
 8011ae4:	4413      	add	r3, r2
 8011ae6:	b29b      	uxth	r3, r3
 8011ae8:	833b      	strh	r3, [r7, #24]
    if (num >= den)             /* Check if numerator >= denominator */
 8011aea:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8011aee:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8011af2:	429a      	cmp	r2, r3
 8011af4:	db0e      	blt.n	8011b14 <LCD_DrawUniLine+0x14a>
    {
      num -= den;               /* Calculate the new numerator value */
 8011af6:	8b3a      	ldrh	r2, [r7, #24]
 8011af8:	8b7b      	ldrh	r3, [r7, #26]
 8011afa:	1ad3      	subs	r3, r2, r3
 8011afc:	b29b      	uxth	r3, r3
 8011afe:	833b      	strh	r3, [r7, #24]
      x += xinc1;               /* Change the x as appropriate */
 8011b00:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8011b02:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011b04:	4413      	add	r3, r2
 8011b06:	b29b      	uxth	r3, r3
 8011b08:	84fb      	strh	r3, [r7, #38]	; 0x26
      y += yinc1;               /* Change the y as appropriate */
 8011b0a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8011b0c:	8bfb      	ldrh	r3, [r7, #30]
 8011b0e:	4413      	add	r3, r2
 8011b10:	b29b      	uxth	r3, r3
 8011b12:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    x += xinc2;                 /* Change the x as appropriate */
 8011b14:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8011b16:	8c3b      	ldrh	r3, [r7, #32]
 8011b18:	4413      	add	r3, r2
 8011b1a:	b29b      	uxth	r3, r3
 8011b1c:	84fb      	strh	r3, [r7, #38]	; 0x26
    y += yinc2;                 /* Change the y as appropriate */
 8011b1e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8011b20:	8bbb      	ldrh	r3, [r7, #28]
 8011b22:	4413      	add	r3, r2
 8011b24:	b29b      	uxth	r3, r3
 8011b26:	84bb      	strh	r3, [r7, #36]	; 0x24
  for (curpixel = 0; curpixel <= numpixels; curpixel++)
 8011b28:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8011b2c:	b29b      	uxth	r3, r3
 8011b2e:	3301      	adds	r3, #1
 8011b30:	b29b      	uxth	r3, r3
 8011b32:	827b      	strh	r3, [r7, #18]
 8011b34:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8011b38:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8011b3c:	429a      	cmp	r2, r3
 8011b3e:	ddc7      	ble.n	8011ad0 <LCD_DrawUniLine+0x106>
  }
}
 8011b40:	bf00      	nop
 8011b42:	372c      	adds	r7, #44	; 0x2c
 8011b44:	46bd      	mov	sp, r7
 8011b46:	bd90      	pop	{r4, r7, pc}

08011b48 <LCD_Triangle>:
  * @brief  Displays an triangle.
  * @param  Points: pointer to the points array.
  * @retval None
  */
void LCD_Triangle(pPoint Points, uint16_t PointCount)
{
 8011b48:	b580      	push	{r7, lr}
 8011b4a:	b084      	sub	sp, #16
 8011b4c:	af00      	add	r7, sp, #0
 8011b4e:	6078      	str	r0, [r7, #4]
 8011b50:	460b      	mov	r3, r1
 8011b52:	807b      	strh	r3, [r7, #2]
  int16_t X = 0, Y = 0;
 8011b54:	2300      	movs	r3, #0
 8011b56:	81fb      	strh	r3, [r7, #14]
 8011b58:	2300      	movs	r3, #0
 8011b5a:	81bb      	strh	r3, [r7, #12]
  pPoint First = Points;
 8011b5c:	687b      	ldr	r3, [r7, #4]
 8011b5e:	60bb      	str	r3, [r7, #8]

  if(PointCount != 3)
 8011b60:	887b      	ldrh	r3, [r7, #2]
 8011b62:	2b03      	cmp	r3, #3
 8011b64:	d12e      	bne.n	8011bc4 <LCD_Triangle+0x7c>
  {
    return;
  }

  while(--PointCount)
 8011b66:	e014      	b.n	8011b92 <LCD_Triangle+0x4a>
  {
    X = Points->X;
 8011b68:	687b      	ldr	r3, [r7, #4]
 8011b6a:	881b      	ldrh	r3, [r3, #0]
 8011b6c:	81fb      	strh	r3, [r7, #14]
    Y = Points->Y;
 8011b6e:	687b      	ldr	r3, [r7, #4]
 8011b70:	885b      	ldrh	r3, [r3, #2]
 8011b72:	81bb      	strh	r3, [r7, #12]
    Points++;
 8011b74:	687b      	ldr	r3, [r7, #4]
 8011b76:	3304      	adds	r3, #4
 8011b78:	607b      	str	r3, [r7, #4]
    LCD_DrawUniLine(X, Y, Points->X, Points->Y);
 8011b7a:	89f8      	ldrh	r0, [r7, #14]
 8011b7c:	89b9      	ldrh	r1, [r7, #12]
 8011b7e:	687b      	ldr	r3, [r7, #4]
 8011b80:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011b84:	b29a      	uxth	r2, r3
 8011b86:	687b      	ldr	r3, [r7, #4]
 8011b88:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8011b8c:	b29b      	uxth	r3, r3
 8011b8e:	f7ff ff1c 	bl	80119ca <LCD_DrawUniLine>
  while(--PointCount)
 8011b92:	887b      	ldrh	r3, [r7, #2]
 8011b94:	3b01      	subs	r3, #1
 8011b96:	807b      	strh	r3, [r7, #2]
 8011b98:	887b      	ldrh	r3, [r7, #2]
 8011b9a:	2b00      	cmp	r3, #0
 8011b9c:	d1e4      	bne.n	8011b68 <LCD_Triangle+0x20>
  }
  LCD_DrawUniLine(First->X, First->Y, Points->X, Points->Y);
 8011b9e:	68bb      	ldr	r3, [r7, #8]
 8011ba0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011ba4:	b298      	uxth	r0, r3
 8011ba6:	68bb      	ldr	r3, [r7, #8]
 8011ba8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8011bac:	b299      	uxth	r1, r3
 8011bae:	687b      	ldr	r3, [r7, #4]
 8011bb0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011bb4:	b29a      	uxth	r2, r3
 8011bb6:	687b      	ldr	r3, [r7, #4]
 8011bb8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8011bbc:	b29b      	uxth	r3, r3
 8011bbe:	f7ff ff04 	bl	80119ca <LCD_DrawUniLine>
 8011bc2:	e000      	b.n	8011bc6 <LCD_Triangle+0x7e>
    return;
 8011bc4:	bf00      	nop
}
 8011bc6:	3710      	adds	r7, #16
 8011bc8:	46bd      	mov	sp, r7
 8011bca:	bd80      	pop	{r7, pc}

08011bcc <LCD_FillTriangle>:
  * @param  x1..3: x position of triangle point 1..3.
  * @param  y1..3: y position of triangle point 1..3.
  * @retval None
  */
void LCD_FillTriangle(uint16_t x1, uint16_t x2, uint16_t x3, uint16_t y1, uint16_t y2, uint16_t y3)
{ 
 8011bcc:	b590      	push	{r4, r7, lr}
 8011bce:	b08b      	sub	sp, #44	; 0x2c
 8011bd0:	af00      	add	r7, sp, #0
 8011bd2:	4604      	mov	r4, r0
 8011bd4:	4608      	mov	r0, r1
 8011bd6:	4611      	mov	r1, r2
 8011bd8:	461a      	mov	r2, r3
 8011bda:	4623      	mov	r3, r4
 8011bdc:	80fb      	strh	r3, [r7, #6]
 8011bde:	4603      	mov	r3, r0
 8011be0:	80bb      	strh	r3, [r7, #4]
 8011be2:	460b      	mov	r3, r1
 8011be4:	807b      	strh	r3, [r7, #2]
 8011be6:	4613      	mov	r3, r2
 8011be8:	803b      	strh	r3, [r7, #0]
  
  int16_t deltax = 0, deltay = 0, x = 0, y = 0, xinc1 = 0, xinc2 = 0, 
 8011bea:	2300      	movs	r3, #0
 8011bec:	823b      	strh	r3, [r7, #16]
 8011bee:	2300      	movs	r3, #0
 8011bf0:	81fb      	strh	r3, [r7, #14]
 8011bf2:	2300      	movs	r3, #0
 8011bf4:	84fb      	strh	r3, [r7, #38]	; 0x26
 8011bf6:	2300      	movs	r3, #0
 8011bf8:	84bb      	strh	r3, [r7, #36]	; 0x24
 8011bfa:	2300      	movs	r3, #0
 8011bfc:	847b      	strh	r3, [r7, #34]	; 0x22
 8011bfe:	2300      	movs	r3, #0
 8011c00:	843b      	strh	r3, [r7, #32]
  yinc1 = 0, yinc2 = 0, den = 0, num = 0, numadd = 0, numpixels = 0, 
 8011c02:	2300      	movs	r3, #0
 8011c04:	83fb      	strh	r3, [r7, #30]
 8011c06:	2300      	movs	r3, #0
 8011c08:	83bb      	strh	r3, [r7, #28]
 8011c0a:	2300      	movs	r3, #0
 8011c0c:	837b      	strh	r3, [r7, #26]
 8011c0e:	2300      	movs	r3, #0
 8011c10:	833b      	strh	r3, [r7, #24]
 8011c12:	2300      	movs	r3, #0
 8011c14:	82fb      	strh	r3, [r7, #22]
 8011c16:	2300      	movs	r3, #0
 8011c18:	82bb      	strh	r3, [r7, #20]
  curpixel = 0;
 8011c1a:	2300      	movs	r3, #0
 8011c1c:	827b      	strh	r3, [r7, #18]
  
  deltax = ABS(x2 - x1);        /* The difference between the x's */
 8011c1e:	88ba      	ldrh	r2, [r7, #4]
 8011c20:	88fb      	ldrh	r3, [r7, #6]
 8011c22:	1ad3      	subs	r3, r2, r3
 8011c24:	2b00      	cmp	r3, #0
 8011c26:	bfb8      	it	lt
 8011c28:	425b      	neglt	r3, r3
 8011c2a:	823b      	strh	r3, [r7, #16]
  deltay = ABS(y2 - y1);        /* The difference between the y's */
 8011c2c:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8011c2e:	883b      	ldrh	r3, [r7, #0]
 8011c30:	1ad3      	subs	r3, r2, r3
 8011c32:	2b00      	cmp	r3, #0
 8011c34:	bfb8      	it	lt
 8011c36:	425b      	neglt	r3, r3
 8011c38:	81fb      	strh	r3, [r7, #14]
  x = x1;                       /* Start x off at the first pixel */
 8011c3a:	88fb      	ldrh	r3, [r7, #6]
 8011c3c:	84fb      	strh	r3, [r7, #38]	; 0x26
  y = y1;                       /* Start y off at the first pixel */
 8011c3e:	883b      	ldrh	r3, [r7, #0]
 8011c40:	84bb      	strh	r3, [r7, #36]	; 0x24
  
  if (x2 >= x1)                 /* The x-values are increasing */
 8011c42:	88ba      	ldrh	r2, [r7, #4]
 8011c44:	88fb      	ldrh	r3, [r7, #6]
 8011c46:	429a      	cmp	r2, r3
 8011c48:	d304      	bcc.n	8011c54 <LCD_FillTriangle+0x88>
  {
    xinc1 = 1;
 8011c4a:	2301      	movs	r3, #1
 8011c4c:	847b      	strh	r3, [r7, #34]	; 0x22
    xinc2 = 1;
 8011c4e:	2301      	movs	r3, #1
 8011c50:	843b      	strh	r3, [r7, #32]
 8011c52:	e005      	b.n	8011c60 <LCD_FillTriangle+0x94>
  }
  else                          /* The x-values are decreasing */
  {
    xinc1 = -1;
 8011c54:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011c58:	847b      	strh	r3, [r7, #34]	; 0x22
    xinc2 = -1;
 8011c5a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011c5e:	843b      	strh	r3, [r7, #32]
  }
  
  if (y2 >= y1)                 /* The y-values are increasing */
 8011c60:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8011c62:	883b      	ldrh	r3, [r7, #0]
 8011c64:	429a      	cmp	r2, r3
 8011c66:	d304      	bcc.n	8011c72 <LCD_FillTriangle+0xa6>
  {
    yinc1 = 1;
 8011c68:	2301      	movs	r3, #1
 8011c6a:	83fb      	strh	r3, [r7, #30]
    yinc2 = 1;
 8011c6c:	2301      	movs	r3, #1
 8011c6e:	83bb      	strh	r3, [r7, #28]
 8011c70:	e005      	b.n	8011c7e <LCD_FillTriangle+0xb2>
  }
  else                          /* The y-values are decreasing */
  {
    yinc1 = -1;
 8011c72:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011c76:	83fb      	strh	r3, [r7, #30]
    yinc2 = -1;
 8011c78:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011c7c:	83bb      	strh	r3, [r7, #28]
  }
  
  if (deltax >= deltay)         /* There is at least one x-value for every y-value */
 8011c7e:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8011c82:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8011c86:	429a      	cmp	r2, r3
 8011c88:	db10      	blt.n	8011cac <LCD_FillTriangle+0xe0>
  {
    xinc1 = 0;                  /* Don't change the x when numerator >= denominator */
 8011c8a:	2300      	movs	r3, #0
 8011c8c:	847b      	strh	r3, [r7, #34]	; 0x22
    yinc2 = 0;                  /* Don't change the y for every iteration */
 8011c8e:	2300      	movs	r3, #0
 8011c90:	83bb      	strh	r3, [r7, #28]
    den = deltax;
 8011c92:	8a3b      	ldrh	r3, [r7, #16]
 8011c94:	837b      	strh	r3, [r7, #26]
    num = deltax / 2;
 8011c96:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8011c9a:	0fda      	lsrs	r2, r3, #31
 8011c9c:	4413      	add	r3, r2
 8011c9e:	105b      	asrs	r3, r3, #1
 8011ca0:	833b      	strh	r3, [r7, #24]
    numadd = deltay;
 8011ca2:	89fb      	ldrh	r3, [r7, #14]
 8011ca4:	82fb      	strh	r3, [r7, #22]
    numpixels = deltax;         /* There are more x-values than y-values */
 8011ca6:	8a3b      	ldrh	r3, [r7, #16]
 8011ca8:	82bb      	strh	r3, [r7, #20]
 8011caa:	e00f      	b.n	8011ccc <LCD_FillTriangle+0x100>
  }
  else                          /* There is at least one y-value for every x-value */
  {
    xinc2 = 0;                  /* Don't change the x for every iteration */
 8011cac:	2300      	movs	r3, #0
 8011cae:	843b      	strh	r3, [r7, #32]
    yinc1 = 0;                  /* Don't change the y when numerator >= denominator */
 8011cb0:	2300      	movs	r3, #0
 8011cb2:	83fb      	strh	r3, [r7, #30]
    den = deltay;
 8011cb4:	89fb      	ldrh	r3, [r7, #14]
 8011cb6:	837b      	strh	r3, [r7, #26]
    num = deltay / 2;
 8011cb8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8011cbc:	0fda      	lsrs	r2, r3, #31
 8011cbe:	4413      	add	r3, r2
 8011cc0:	105b      	asrs	r3, r3, #1
 8011cc2:	833b      	strh	r3, [r7, #24]
    numadd = deltax;
 8011cc4:	8a3b      	ldrh	r3, [r7, #16]
 8011cc6:	82fb      	strh	r3, [r7, #22]
    numpixels = deltay;         /* There are more y-values than x-values */
 8011cc8:	89fb      	ldrh	r3, [r7, #14]
 8011cca:	82bb      	strh	r3, [r7, #20]
  }
  
  for (curpixel = 0; curpixel <= numpixels; curpixel++)
 8011ccc:	2300      	movs	r3, #0
 8011cce:	827b      	strh	r3, [r7, #18]
 8011cd0:	e02f      	b.n	8011d32 <LCD_FillTriangle+0x166>
  {
    LCD_DrawUniLine(x, y, x3, y3);
 8011cd2:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 8011cd4:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8011cd6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8011cd8:	887a      	ldrh	r2, [r7, #2]
 8011cda:	f7ff fe76 	bl	80119ca <LCD_DrawUniLine>
    
    num += numadd;              /* Increase the numerator by the top of the fraction */
 8011cde:	8b3a      	ldrh	r2, [r7, #24]
 8011ce0:	8afb      	ldrh	r3, [r7, #22]
 8011ce2:	4413      	add	r3, r2
 8011ce4:	b29b      	uxth	r3, r3
 8011ce6:	833b      	strh	r3, [r7, #24]
    if (num >= den)             /* Check if numerator >= denominator */
 8011ce8:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8011cec:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8011cf0:	429a      	cmp	r2, r3
 8011cf2:	db0e      	blt.n	8011d12 <LCD_FillTriangle+0x146>
    {
      num -= den;               /* Calculate the new numerator value */
 8011cf4:	8b3a      	ldrh	r2, [r7, #24]
 8011cf6:	8b7b      	ldrh	r3, [r7, #26]
 8011cf8:	1ad3      	subs	r3, r2, r3
 8011cfa:	b29b      	uxth	r3, r3
 8011cfc:	833b      	strh	r3, [r7, #24]
      x += xinc1;               /* Change the x as appropriate */
 8011cfe:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8011d00:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011d02:	4413      	add	r3, r2
 8011d04:	b29b      	uxth	r3, r3
 8011d06:	84fb      	strh	r3, [r7, #38]	; 0x26
      y += yinc1;               /* Change the y as appropriate */
 8011d08:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8011d0a:	8bfb      	ldrh	r3, [r7, #30]
 8011d0c:	4413      	add	r3, r2
 8011d0e:	b29b      	uxth	r3, r3
 8011d10:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    x += xinc2;                 /* Change the x as appropriate */
 8011d12:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8011d14:	8c3b      	ldrh	r3, [r7, #32]
 8011d16:	4413      	add	r3, r2
 8011d18:	b29b      	uxth	r3, r3
 8011d1a:	84fb      	strh	r3, [r7, #38]	; 0x26
    y += yinc2;                 /* Change the y as appropriate */
 8011d1c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8011d1e:	8bbb      	ldrh	r3, [r7, #28]
 8011d20:	4413      	add	r3, r2
 8011d22:	b29b      	uxth	r3, r3
 8011d24:	84bb      	strh	r3, [r7, #36]	; 0x24
  for (curpixel = 0; curpixel <= numpixels; curpixel++)
 8011d26:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8011d2a:	b29b      	uxth	r3, r3
 8011d2c:	3301      	adds	r3, #1
 8011d2e:	b29b      	uxth	r3, r3
 8011d30:	827b      	strh	r3, [r7, #18]
 8011d32:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8011d36:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8011d3a:	429a      	cmp	r2, r3
 8011d3c:	ddc9      	ble.n	8011cd2 <LCD_FillTriangle+0x106>
  }  
  
  
}
 8011d3e:	bf00      	nop
 8011d40:	372c      	adds	r7, #44	; 0x2c
 8011d42:	46bd      	mov	sp, r7
 8011d44:	bd90      	pop	{r4, r7, pc}

08011d46 <LCD_PolyLine>:
  * @param  Points: pointer to the points array.
  * @param  PointCount: Number of points.
  * @retval None
  */
void LCD_PolyLine(pPoint Points, uint16_t PointCount)
{
 8011d46:	b580      	push	{r7, lr}
 8011d48:	b084      	sub	sp, #16
 8011d4a:	af00      	add	r7, sp, #0
 8011d4c:	6078      	str	r0, [r7, #4]
 8011d4e:	460b      	mov	r3, r1
 8011d50:	807b      	strh	r3, [r7, #2]
  int16_t X = 0, Y = 0;
 8011d52:	2300      	movs	r3, #0
 8011d54:	81fb      	strh	r3, [r7, #14]
 8011d56:	2300      	movs	r3, #0
 8011d58:	81bb      	strh	r3, [r7, #12]

  if(PointCount < 2)
 8011d5a:	887b      	ldrh	r3, [r7, #2]
 8011d5c:	2b01      	cmp	r3, #1
 8011d5e:	d91c      	bls.n	8011d9a <LCD_PolyLine+0x54>
  {
    return;
  }

  while(--PointCount)
 8011d60:	e014      	b.n	8011d8c <LCD_PolyLine+0x46>
  {
    X = Points->X;
 8011d62:	687b      	ldr	r3, [r7, #4]
 8011d64:	881b      	ldrh	r3, [r3, #0]
 8011d66:	81fb      	strh	r3, [r7, #14]
    Y = Points->Y;
 8011d68:	687b      	ldr	r3, [r7, #4]
 8011d6a:	885b      	ldrh	r3, [r3, #2]
 8011d6c:	81bb      	strh	r3, [r7, #12]
    Points++;
 8011d6e:	687b      	ldr	r3, [r7, #4]
 8011d70:	3304      	adds	r3, #4
 8011d72:	607b      	str	r3, [r7, #4]
    LCD_DrawUniLine(X, Y, Points->X, Points->Y);
 8011d74:	89f8      	ldrh	r0, [r7, #14]
 8011d76:	89b9      	ldrh	r1, [r7, #12]
 8011d78:	687b      	ldr	r3, [r7, #4]
 8011d7a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011d7e:	b29a      	uxth	r2, r3
 8011d80:	687b      	ldr	r3, [r7, #4]
 8011d82:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8011d86:	b29b      	uxth	r3, r3
 8011d88:	f7ff fe1f 	bl	80119ca <LCD_DrawUniLine>
  while(--PointCount)
 8011d8c:	887b      	ldrh	r3, [r7, #2]
 8011d8e:	3b01      	subs	r3, #1
 8011d90:	807b      	strh	r3, [r7, #2]
 8011d92:	887b      	ldrh	r3, [r7, #2]
 8011d94:	2b00      	cmp	r3, #0
 8011d96:	d1e4      	bne.n	8011d62 <LCD_PolyLine+0x1c>
 8011d98:	e000      	b.n	8011d9c <LCD_PolyLine+0x56>
    return;
 8011d9a:	bf00      	nop
  }
}
 8011d9c:	3710      	adds	r7, #16
 8011d9e:	46bd      	mov	sp, r7
 8011da0:	bd80      	pop	{r7, pc}

08011da2 <LCD_PolyLineRelativeClosed>:
  * @param  Closed: specifies if the draw is closed or not.
  *           1: closed, 0 : not closed.
  * @retval None
  */
static void LCD_PolyLineRelativeClosed(pPoint Points, uint16_t PointCount, uint16_t Closed)
{
 8011da2:	b590      	push	{r4, r7, lr}
 8011da4:	b085      	sub	sp, #20
 8011da6:	af00      	add	r7, sp, #0
 8011da8:	6078      	str	r0, [r7, #4]
 8011daa:	460b      	mov	r3, r1
 8011dac:	807b      	strh	r3, [r7, #2]
 8011dae:	4613      	mov	r3, r2
 8011db0:	803b      	strh	r3, [r7, #0]
  int16_t X = 0, Y = 0;
 8011db2:	2300      	movs	r3, #0
 8011db4:	81fb      	strh	r3, [r7, #14]
 8011db6:	2300      	movs	r3, #0
 8011db8:	81bb      	strh	r3, [r7, #12]
  pPoint First = Points;
 8011dba:	687b      	ldr	r3, [r7, #4]
 8011dbc:	60bb      	str	r3, [r7, #8]

  if(PointCount < 2)
 8011dbe:	887b      	ldrh	r3, [r7, #2]
 8011dc0:	2b01      	cmp	r3, #1
 8011dc2:	d942      	bls.n	8011e4a <LCD_PolyLineRelativeClosed+0xa8>
  {
    return;
  }  
  X = Points->X;
 8011dc4:	687b      	ldr	r3, [r7, #4]
 8011dc6:	881b      	ldrh	r3, [r3, #0]
 8011dc8:	81fb      	strh	r3, [r7, #14]
  Y = Points->Y;
 8011dca:	687b      	ldr	r3, [r7, #4]
 8011dcc:	885b      	ldrh	r3, [r3, #2]
 8011dce:	81bb      	strh	r3, [r7, #12]
  while(--PointCount)
 8011dd0:	e025      	b.n	8011e1e <LCD_PolyLineRelativeClosed+0x7c>
  {
    Points++;
 8011dd2:	687b      	ldr	r3, [r7, #4]
 8011dd4:	3304      	adds	r3, #4
 8011dd6:	607b      	str	r3, [r7, #4]
    LCD_DrawUniLine(X, Y, X + Points->X, Y + Points->Y);
 8011dd8:	89f8      	ldrh	r0, [r7, #14]
 8011dda:	89b9      	ldrh	r1, [r7, #12]
 8011ddc:	687b      	ldr	r3, [r7, #4]
 8011dde:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011de2:	b29a      	uxth	r2, r3
 8011de4:	89fb      	ldrh	r3, [r7, #14]
 8011de6:	4413      	add	r3, r2
 8011de8:	b29c      	uxth	r4, r3
 8011dea:	687b      	ldr	r3, [r7, #4]
 8011dec:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8011df0:	b29a      	uxth	r2, r3
 8011df2:	89bb      	ldrh	r3, [r7, #12]
 8011df4:	4413      	add	r3, r2
 8011df6:	b29b      	uxth	r3, r3
 8011df8:	4622      	mov	r2, r4
 8011dfa:	f7ff fde6 	bl	80119ca <LCD_DrawUniLine>
    X = X + Points->X;
 8011dfe:	687b      	ldr	r3, [r7, #4]
 8011e00:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011e04:	b29a      	uxth	r2, r3
 8011e06:	89fb      	ldrh	r3, [r7, #14]
 8011e08:	4413      	add	r3, r2
 8011e0a:	b29b      	uxth	r3, r3
 8011e0c:	81fb      	strh	r3, [r7, #14]
    Y = Y + Points->Y;
 8011e0e:	687b      	ldr	r3, [r7, #4]
 8011e10:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8011e14:	b29a      	uxth	r2, r3
 8011e16:	89bb      	ldrh	r3, [r7, #12]
 8011e18:	4413      	add	r3, r2
 8011e1a:	b29b      	uxth	r3, r3
 8011e1c:	81bb      	strh	r3, [r7, #12]
  while(--PointCount)
 8011e1e:	887b      	ldrh	r3, [r7, #2]
 8011e20:	3b01      	subs	r3, #1
 8011e22:	807b      	strh	r3, [r7, #2]
 8011e24:	887b      	ldrh	r3, [r7, #2]
 8011e26:	2b00      	cmp	r3, #0
 8011e28:	d1d3      	bne.n	8011dd2 <LCD_PolyLineRelativeClosed+0x30>
  }
  if(Closed)
 8011e2a:	883b      	ldrh	r3, [r7, #0]
 8011e2c:	2b00      	cmp	r3, #0
 8011e2e:	d00d      	beq.n	8011e4c <LCD_PolyLineRelativeClosed+0xaa>
  {
    LCD_DrawUniLine(First->X, First->Y, X, Y);
 8011e30:	68bb      	ldr	r3, [r7, #8]
 8011e32:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011e36:	b298      	uxth	r0, r3
 8011e38:	68bb      	ldr	r3, [r7, #8]
 8011e3a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8011e3e:	b299      	uxth	r1, r3
 8011e40:	89fa      	ldrh	r2, [r7, #14]
 8011e42:	89bb      	ldrh	r3, [r7, #12]
 8011e44:	f7ff fdc1 	bl	80119ca <LCD_DrawUniLine>
 8011e48:	e000      	b.n	8011e4c <LCD_PolyLineRelativeClosed+0xaa>
    return;
 8011e4a:	bf00      	nop
  }  
}
 8011e4c:	3714      	adds	r7, #20
 8011e4e:	46bd      	mov	sp, r7
 8011e50:	bd90      	pop	{r4, r7, pc}

08011e52 <LCD_ClosedPolyLine>:
  * @param  Points: pointer to the points array.
  * @param  PointCount: Number of points.
  * @retval None
  */
void LCD_ClosedPolyLine(pPoint Points, uint16_t PointCount)
{
 8011e52:	b590      	push	{r4, r7, lr}
 8011e54:	b083      	sub	sp, #12
 8011e56:	af00      	add	r7, sp, #0
 8011e58:	6078      	str	r0, [r7, #4]
 8011e5a:	460b      	mov	r3, r1
 8011e5c:	807b      	strh	r3, [r7, #2]
  LCD_PolyLine(Points, PointCount);
 8011e5e:	887b      	ldrh	r3, [r7, #2]
 8011e60:	4619      	mov	r1, r3
 8011e62:	6878      	ldr	r0, [r7, #4]
 8011e64:	f7ff ff6f 	bl	8011d46 <LCD_PolyLine>
  LCD_DrawUniLine(Points->X, Points->Y, (Points+PointCount-1)->X, (Points+PointCount-1)->Y);
 8011e68:	687b      	ldr	r3, [r7, #4]
 8011e6a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011e6e:	b298      	uxth	r0, r3
 8011e70:	687b      	ldr	r3, [r7, #4]
 8011e72:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8011e76:	b299      	uxth	r1, r3
 8011e78:	887b      	ldrh	r3, [r7, #2]
 8011e7a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8011e7e:	3b01      	subs	r3, #1
 8011e80:	009b      	lsls	r3, r3, #2
 8011e82:	687a      	ldr	r2, [r7, #4]
 8011e84:	4413      	add	r3, r2
 8011e86:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011e8a:	b29c      	uxth	r4, r3
 8011e8c:	887b      	ldrh	r3, [r7, #2]
 8011e8e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8011e92:	3b01      	subs	r3, #1
 8011e94:	009b      	lsls	r3, r3, #2
 8011e96:	687a      	ldr	r2, [r7, #4]
 8011e98:	4413      	add	r3, r2
 8011e9a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8011e9e:	b29b      	uxth	r3, r3
 8011ea0:	4622      	mov	r2, r4
 8011ea2:	f7ff fd92 	bl	80119ca <LCD_DrawUniLine>
}
 8011ea6:	bf00      	nop
 8011ea8:	370c      	adds	r7, #12
 8011eaa:	46bd      	mov	sp, r7
 8011eac:	bd90      	pop	{r4, r7, pc}

08011eae <LCD_PolyLineRelative>:
  * @param  Points: pointer to the points array.
  * @param  PointCount: Number of points.
  * @retval None
  */
void LCD_PolyLineRelative(pPoint Points, uint16_t PointCount)
{
 8011eae:	b580      	push	{r7, lr}
 8011eb0:	b082      	sub	sp, #8
 8011eb2:	af00      	add	r7, sp, #0
 8011eb4:	6078      	str	r0, [r7, #4]
 8011eb6:	460b      	mov	r3, r1
 8011eb8:	807b      	strh	r3, [r7, #2]
  LCD_PolyLineRelativeClosed(Points, PointCount, 0);
 8011eba:	887b      	ldrh	r3, [r7, #2]
 8011ebc:	2200      	movs	r2, #0
 8011ebe:	4619      	mov	r1, r3
 8011ec0:	6878      	ldr	r0, [r7, #4]
 8011ec2:	f7ff ff6e 	bl	8011da2 <LCD_PolyLineRelativeClosed>
}
 8011ec6:	bf00      	nop
 8011ec8:	3708      	adds	r7, #8
 8011eca:	46bd      	mov	sp, r7
 8011ecc:	bd80      	pop	{r7, pc}

08011ece <LCD_ClosedPolyLineRelative>:
  * @param  Points: pointer to the points array.
  * @param  PointCount: Number of points.
  * @retval None
  */
void LCD_ClosedPolyLineRelative(pPoint Points, uint16_t PointCount)
{
 8011ece:	b580      	push	{r7, lr}
 8011ed0:	b082      	sub	sp, #8
 8011ed2:	af00      	add	r7, sp, #0
 8011ed4:	6078      	str	r0, [r7, #4]
 8011ed6:	460b      	mov	r3, r1
 8011ed8:	807b      	strh	r3, [r7, #2]
  LCD_PolyLineRelativeClosed(Points, PointCount, 1);
 8011eda:	887b      	ldrh	r3, [r7, #2]
 8011edc:	2201      	movs	r2, #1
 8011ede:	4619      	mov	r1, r3
 8011ee0:	6878      	ldr	r0, [r7, #4]
 8011ee2:	f7ff ff5e 	bl	8011da2 <LCD_PolyLineRelativeClosed>
}
 8011ee6:	bf00      	nop
 8011ee8:	3708      	adds	r7, #8
 8011eea:	46bd      	mov	sp, r7
 8011eec:	bd80      	pop	{r7, pc}

08011eee <LCD_FillPolyLine>:
  * @param  Points: pointer to the points array.
  * @param  PointCount: Number of points.
  * @retval None
  */
void LCD_FillPolyLine(pPoint Points, uint16_t PointCount)
{
 8011eee:	b5b0      	push	{r4, r5, r7, lr}
 8011ef0:	b08c      	sub	sp, #48	; 0x30
 8011ef2:	af02      	add	r7, sp, #8
 8011ef4:	6078      	str	r0, [r7, #4]
 8011ef6:	460b      	mov	r3, r1
 8011ef8:	807b      	strh	r3, [r7, #2]
 
  int16_t X = 0, Y = 0, X2 = 0, Y2 = 0, X_center = 0, Y_center = 0, X_first = 0, Y_first = 0, pixelX = 0, pixelY = 0, counter = 0;
 8011efa:	2300      	movs	r3, #0
 8011efc:	833b      	strh	r3, [r7, #24]
 8011efe:	2300      	movs	r3, #0
 8011f00:	82fb      	strh	r3, [r7, #22]
 8011f02:	2300      	movs	r3, #0
 8011f04:	84fb      	strh	r3, [r7, #38]	; 0x26
 8011f06:	2300      	movs	r3, #0
 8011f08:	84bb      	strh	r3, [r7, #36]	; 0x24
 8011f0a:	2300      	movs	r3, #0
 8011f0c:	82bb      	strh	r3, [r7, #20]
 8011f0e:	2300      	movs	r3, #0
 8011f10:	827b      	strh	r3, [r7, #18]
 8011f12:	2300      	movs	r3, #0
 8011f14:	823b      	strh	r3, [r7, #16]
 8011f16:	2300      	movs	r3, #0
 8011f18:	81fb      	strh	r3, [r7, #14]
 8011f1a:	2300      	movs	r3, #0
 8011f1c:	81bb      	strh	r3, [r7, #12]
 8011f1e:	2300      	movs	r3, #0
 8011f20:	817b      	strh	r3, [r7, #10]
 8011f22:	2300      	movs	r3, #0
 8011f24:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t  IMAGE_LEFT = 0, IMAGE_RIGHT = 0, IMAGE_TOP = 0, IMAGE_BOTTOM = 0;  
 8011f26:	2300      	movs	r3, #0
 8011f28:	843b      	strh	r3, [r7, #32]
 8011f2a:	2300      	movs	r3, #0
 8011f2c:	83fb      	strh	r3, [r7, #30]
 8011f2e:	2300      	movs	r3, #0
 8011f30:	83bb      	strh	r3, [r7, #28]
 8011f32:	2300      	movs	r3, #0
 8011f34:	837b      	strh	r3, [r7, #26]

  IMAGE_LEFT = IMAGE_RIGHT = Points->X;
 8011f36:	687b      	ldr	r3, [r7, #4]
 8011f38:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011f3c:	83fb      	strh	r3, [r7, #30]
 8011f3e:	8bfb      	ldrh	r3, [r7, #30]
 8011f40:	843b      	strh	r3, [r7, #32]
  IMAGE_TOP= IMAGE_BOTTOM = Points->Y;
 8011f42:	687b      	ldr	r3, [r7, #4]
 8011f44:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8011f48:	837b      	strh	r3, [r7, #26]
 8011f4a:	8b7b      	ldrh	r3, [r7, #26]
 8011f4c:	83bb      	strh	r3, [r7, #28]

  for(counter = 1; counter < PointCount; counter++)
 8011f4e:	2301      	movs	r3, #1
 8011f50:	847b      	strh	r3, [r7, #34]	; 0x22
 8011f52:	e02f      	b.n	8011fb4 <LCD_FillPolyLine+0xc6>
  {
    pixelX = POLY_X(counter);
 8011f54:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8011f58:	009b      	lsls	r3, r3, #2
 8011f5a:	687a      	ldr	r2, [r7, #4]
 8011f5c:	4413      	add	r3, r2
 8011f5e:	885b      	ldrh	r3, [r3, #2]
 8011f60:	81bb      	strh	r3, [r7, #12]
    if(pixelX < IMAGE_LEFT)
 8011f62:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8011f66:	8c3b      	ldrh	r3, [r7, #32]
 8011f68:	429a      	cmp	r2, r3
 8011f6a:	da01      	bge.n	8011f70 <LCD_FillPolyLine+0x82>
    {
      IMAGE_LEFT = pixelX;
 8011f6c:	89bb      	ldrh	r3, [r7, #12]
 8011f6e:	843b      	strh	r3, [r7, #32]
    }
    if(pixelX > IMAGE_RIGHT)
 8011f70:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8011f74:	8bfb      	ldrh	r3, [r7, #30]
 8011f76:	429a      	cmp	r2, r3
 8011f78:	dd01      	ble.n	8011f7e <LCD_FillPolyLine+0x90>
    {
      IMAGE_RIGHT = pixelX;
 8011f7a:	89bb      	ldrh	r3, [r7, #12]
 8011f7c:	83fb      	strh	r3, [r7, #30]
    }
    
    pixelY = POLY_Y(counter);
 8011f7e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8011f82:	009b      	lsls	r3, r3, #2
 8011f84:	687a      	ldr	r2, [r7, #4]
 8011f86:	4413      	add	r3, r2
 8011f88:	881b      	ldrh	r3, [r3, #0]
 8011f8a:	817b      	strh	r3, [r7, #10]
    if(pixelY < IMAGE_TOP)
 8011f8c:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8011f90:	8bbb      	ldrh	r3, [r7, #28]
 8011f92:	429a      	cmp	r2, r3
 8011f94:	da01      	bge.n	8011f9a <LCD_FillPolyLine+0xac>
    { 
      IMAGE_TOP = pixelY;
 8011f96:	897b      	ldrh	r3, [r7, #10]
 8011f98:	83bb      	strh	r3, [r7, #28]
    }
    if(pixelY > IMAGE_BOTTOM)
 8011f9a:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8011f9e:	8b7b      	ldrh	r3, [r7, #26]
 8011fa0:	429a      	cmp	r2, r3
 8011fa2:	dd01      	ble.n	8011fa8 <LCD_FillPolyLine+0xba>
    {
      IMAGE_BOTTOM = pixelY;
 8011fa4:	897b      	ldrh	r3, [r7, #10]
 8011fa6:	837b      	strh	r3, [r7, #26]
  for(counter = 1; counter < PointCount; counter++)
 8011fa8:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8011fac:	b29b      	uxth	r3, r3
 8011fae:	3301      	adds	r3, #1
 8011fb0:	b29b      	uxth	r3, r3
 8011fb2:	847b      	strh	r3, [r7, #34]	; 0x22
 8011fb4:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 8011fb8:	887b      	ldrh	r3, [r7, #2]
 8011fba:	429a      	cmp	r2, r3
 8011fbc:	dbca      	blt.n	8011f54 <LCD_FillPolyLine+0x66>
    }
  }  
  
  if(PointCount < 2)
 8011fbe:	887b      	ldrh	r3, [r7, #2]
 8011fc0:	2b01      	cmp	r3, #1
 8011fc2:	d972      	bls.n	80120aa <LCD_FillPolyLine+0x1bc>
  {
    return;
  }
  
  X_center = (IMAGE_LEFT + IMAGE_RIGHT)/2;
 8011fc4:	8c3a      	ldrh	r2, [r7, #32]
 8011fc6:	8bfb      	ldrh	r3, [r7, #30]
 8011fc8:	4413      	add	r3, r2
 8011fca:	0fda      	lsrs	r2, r3, #31
 8011fcc:	4413      	add	r3, r2
 8011fce:	105b      	asrs	r3, r3, #1
 8011fd0:	82bb      	strh	r3, [r7, #20]
  Y_center = (IMAGE_BOTTOM + IMAGE_TOP)/2;
 8011fd2:	8b7a      	ldrh	r2, [r7, #26]
 8011fd4:	8bbb      	ldrh	r3, [r7, #28]
 8011fd6:	4413      	add	r3, r2
 8011fd8:	0fda      	lsrs	r2, r3, #31
 8011fda:	4413      	add	r3, r2
 8011fdc:	105b      	asrs	r3, r3, #1
 8011fde:	827b      	strh	r3, [r7, #18]
 
  X_first = Points->X;
 8011fe0:	687b      	ldr	r3, [r7, #4]
 8011fe2:	881b      	ldrh	r3, [r3, #0]
 8011fe4:	823b      	strh	r3, [r7, #16]
  Y_first = Points->Y;
 8011fe6:	687b      	ldr	r3, [r7, #4]
 8011fe8:	885b      	ldrh	r3, [r3, #2]
 8011fea:	81fb      	strh	r3, [r7, #14]
  
  while(--PointCount)
 8011fec:	e032      	b.n	8012054 <LCD_FillPolyLine+0x166>
  {
    X = Points->X;
 8011fee:	687b      	ldr	r3, [r7, #4]
 8011ff0:	881b      	ldrh	r3, [r3, #0]
 8011ff2:	833b      	strh	r3, [r7, #24]
    Y = Points->Y;
 8011ff4:	687b      	ldr	r3, [r7, #4]
 8011ff6:	885b      	ldrh	r3, [r3, #2]
 8011ff8:	82fb      	strh	r3, [r7, #22]
    Points++;
 8011ffa:	687b      	ldr	r3, [r7, #4]
 8011ffc:	3304      	adds	r3, #4
 8011ffe:	607b      	str	r3, [r7, #4]
    X2 = Points->X;
 8012000:	687b      	ldr	r3, [r7, #4]
 8012002:	881b      	ldrh	r3, [r3, #0]
 8012004:	84fb      	strh	r3, [r7, #38]	; 0x26
    Y2 = Points->Y;    
 8012006:	687b      	ldr	r3, [r7, #4]
 8012008:	885b      	ldrh	r3, [r3, #2]
 801200a:	84bb      	strh	r3, [r7, #36]	; 0x24
  
    LCD_FillTriangle(X, X2, X_center, Y, Y2, Y_center);
 801200c:	8b38      	ldrh	r0, [r7, #24]
 801200e:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 8012010:	8abc      	ldrh	r4, [r7, #20]
 8012012:	8afd      	ldrh	r5, [r7, #22]
 8012014:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012016:	8a7a      	ldrh	r2, [r7, #18]
 8012018:	9201      	str	r2, [sp, #4]
 801201a:	9300      	str	r3, [sp, #0]
 801201c:	462b      	mov	r3, r5
 801201e:	4622      	mov	r2, r4
 8012020:	f7ff fdd4 	bl	8011bcc <LCD_FillTriangle>
    LCD_FillTriangle(X, X_center, X2, Y, Y_center, Y2);
 8012024:	8b38      	ldrh	r0, [r7, #24]
 8012026:	8ab9      	ldrh	r1, [r7, #20]
 8012028:	8cfc      	ldrh	r4, [r7, #38]	; 0x26
 801202a:	8afd      	ldrh	r5, [r7, #22]
 801202c:	8a7b      	ldrh	r3, [r7, #18]
 801202e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8012030:	9201      	str	r2, [sp, #4]
 8012032:	9300      	str	r3, [sp, #0]
 8012034:	462b      	mov	r3, r5
 8012036:	4622      	mov	r2, r4
 8012038:	f7ff fdc8 	bl	8011bcc <LCD_FillTriangle>
    LCD_FillTriangle(X_center, X2, X, Y_center, Y2, Y);   
 801203c:	8ab8      	ldrh	r0, [r7, #20]
 801203e:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 8012040:	8b3c      	ldrh	r4, [r7, #24]
 8012042:	8a7d      	ldrh	r5, [r7, #18]
 8012044:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012046:	8afa      	ldrh	r2, [r7, #22]
 8012048:	9201      	str	r2, [sp, #4]
 801204a:	9300      	str	r3, [sp, #0]
 801204c:	462b      	mov	r3, r5
 801204e:	4622      	mov	r2, r4
 8012050:	f7ff fdbc 	bl	8011bcc <LCD_FillTriangle>
  while(--PointCount)
 8012054:	887b      	ldrh	r3, [r7, #2]
 8012056:	3b01      	subs	r3, #1
 8012058:	807b      	strh	r3, [r7, #2]
 801205a:	887b      	ldrh	r3, [r7, #2]
 801205c:	2b00      	cmp	r3, #0
 801205e:	d1c6      	bne.n	8011fee <LCD_FillPolyLine+0x100>
  }
  
  LCD_FillTriangle(X_first, X2, X_center, Y_first, Y2, Y_center);
 8012060:	8a38      	ldrh	r0, [r7, #16]
 8012062:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 8012064:	8abc      	ldrh	r4, [r7, #20]
 8012066:	89fd      	ldrh	r5, [r7, #14]
 8012068:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801206a:	8a7a      	ldrh	r2, [r7, #18]
 801206c:	9201      	str	r2, [sp, #4]
 801206e:	9300      	str	r3, [sp, #0]
 8012070:	462b      	mov	r3, r5
 8012072:	4622      	mov	r2, r4
 8012074:	f7ff fdaa 	bl	8011bcc <LCD_FillTriangle>
  LCD_FillTriangle(X_first, X_center, X2, Y_first, Y_center, Y2);
 8012078:	8a38      	ldrh	r0, [r7, #16]
 801207a:	8ab9      	ldrh	r1, [r7, #20]
 801207c:	8cfc      	ldrh	r4, [r7, #38]	; 0x26
 801207e:	89fd      	ldrh	r5, [r7, #14]
 8012080:	8a7b      	ldrh	r3, [r7, #18]
 8012082:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8012084:	9201      	str	r2, [sp, #4]
 8012086:	9300      	str	r3, [sp, #0]
 8012088:	462b      	mov	r3, r5
 801208a:	4622      	mov	r2, r4
 801208c:	f7ff fd9e 	bl	8011bcc <LCD_FillTriangle>
  LCD_FillTriangle(X_center, X2, X_first, Y_center, Y2, Y_first); 
 8012090:	8ab8      	ldrh	r0, [r7, #20]
 8012092:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 8012094:	8a3c      	ldrh	r4, [r7, #16]
 8012096:	8a7d      	ldrh	r5, [r7, #18]
 8012098:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801209a:	89fa      	ldrh	r2, [r7, #14]
 801209c:	9201      	str	r2, [sp, #4]
 801209e:	9300      	str	r3, [sp, #0]
 80120a0:	462b      	mov	r3, r5
 80120a2:	4622      	mov	r2, r4
 80120a4:	f7ff fd92 	bl	8011bcc <LCD_FillTriangle>
 80120a8:	e000      	b.n	80120ac <LCD_FillPolyLine+0x1be>
    return;
 80120aa:	bf00      	nop
}
 80120ac:	3728      	adds	r7, #40	; 0x28
 80120ae:	46bd      	mov	sp, r7
 80120b0:	bdb0      	pop	{r4, r5, r7, pc}

080120b2 <LCD_WriteCommand>:
  * @brief  Writes command to select the LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void LCD_WriteCommand(uint8_t LCD_Reg)
{
 80120b2:	b580      	push	{r7, lr}
 80120b4:	b082      	sub	sp, #8
 80120b6:	af00      	add	r7, sp, #0
 80120b8:	4603      	mov	r3, r0
 80120ba:	71fb      	strb	r3, [r7, #7]
    /* Reset WRX to send command */
  LCD_CtrlLinesWrite(LCD_WRX_GPIO_PORT, LCD_WRX_PIN, Bit_RESET);
 80120bc:	2200      	movs	r2, #0
 80120be:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80120c2:	4811      	ldr	r0, [pc, #68]	; (8012108 <LCD_WriteCommand+0x56>)
 80120c4:	f000 f9d6 	bl	8012474 <LCD_CtrlLinesWrite>
  
  /* Reset LCD control line(/CS) and Send command */
  LCD_ChipSelect(DISABLE);
 80120c8:	2000      	movs	r0, #0
 80120ca:	f7fe fb63 	bl	8010794 <LCD_ChipSelect>
  SPI_I2S_SendData(LCD_SPI, LCD_Reg);
 80120ce:	79fb      	ldrb	r3, [r7, #7]
 80120d0:	b29b      	uxth	r3, r3
 80120d2:	4619      	mov	r1, r3
 80120d4:	480d      	ldr	r0, [pc, #52]	; (801210c <LCD_WriteCommand+0x5a>)
 80120d6:	f7f9 fa10 	bl	800b4fa <SPI_I2S_SendData>
  
  /* Wait until a data is sent(not busy), before config /CS HIGH */
  
  while(SPI_I2S_GetFlagStatus(LCD_SPI, SPI_I2S_FLAG_TXE) == RESET) ;
 80120da:	bf00      	nop
 80120dc:	2102      	movs	r1, #2
 80120de:	480b      	ldr	r0, [pc, #44]	; (801210c <LCD_WriteCommand+0x5a>)
 80120e0:	f7f9 fac7 	bl	800b672 <SPI_I2S_GetFlagStatus>
 80120e4:	4603      	mov	r3, r0
 80120e6:	2b00      	cmp	r3, #0
 80120e8:	d0f8      	beq.n	80120dc <LCD_WriteCommand+0x2a>
  
  while(SPI_I2S_GetFlagStatus(LCD_SPI, SPI_I2S_FLAG_BSY) != RESET);
 80120ea:	bf00      	nop
 80120ec:	2180      	movs	r1, #128	; 0x80
 80120ee:	4807      	ldr	r0, [pc, #28]	; (801210c <LCD_WriteCommand+0x5a>)
 80120f0:	f7f9 fabf 	bl	800b672 <SPI_I2S_GetFlagStatus>
 80120f4:	4603      	mov	r3, r0
 80120f6:	2b00      	cmp	r3, #0
 80120f8:	d1f8      	bne.n	80120ec <LCD_WriteCommand+0x3a>
  
  LCD_ChipSelect(ENABLE);
 80120fa:	2001      	movs	r0, #1
 80120fc:	f7fe fb4a 	bl	8010794 <LCD_ChipSelect>
}
 8012100:	bf00      	nop
 8012102:	3708      	adds	r7, #8
 8012104:	46bd      	mov	sp, r7
 8012106:	bd80      	pop	{r7, pc}
 8012108:	40020c00 	.word	0x40020c00
 801210c:	40015000 	.word	0x40015000

08012110 <LCD_WriteData>:
  *         This function must be used after LCD_WriteCommand() function
  * @param  value: data to write to the selected register.
  * @retval None
  */
void LCD_WriteData(uint8_t value)
{
 8012110:	b580      	push	{r7, lr}
 8012112:	b082      	sub	sp, #8
 8012114:	af00      	add	r7, sp, #0
 8012116:	4603      	mov	r3, r0
 8012118:	71fb      	strb	r3, [r7, #7]
    /* Set WRX to send data */
  LCD_CtrlLinesWrite(LCD_WRX_GPIO_PORT, LCD_WRX_PIN, Bit_SET);
 801211a:	2201      	movs	r2, #1
 801211c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8012120:	4811      	ldr	r0, [pc, #68]	; (8012168 <LCD_WriteData+0x58>)
 8012122:	f000 f9a7 	bl	8012474 <LCD_CtrlLinesWrite>
  
  /* Reset LCD control line(/CS) and Send data */  
  LCD_ChipSelect(DISABLE);
 8012126:	2000      	movs	r0, #0
 8012128:	f7fe fb34 	bl	8010794 <LCD_ChipSelect>
  SPI_I2S_SendData(LCD_SPI, value);
 801212c:	79fb      	ldrb	r3, [r7, #7]
 801212e:	b29b      	uxth	r3, r3
 8012130:	4619      	mov	r1, r3
 8012132:	480e      	ldr	r0, [pc, #56]	; (801216c <LCD_WriteData+0x5c>)
 8012134:	f7f9 f9e1 	bl	800b4fa <SPI_I2S_SendData>
  
  /* Wait until a data is sent(not busy), before config /CS HIGH */
  
  while(SPI_I2S_GetFlagStatus(LCD_SPI, SPI_I2S_FLAG_TXE) == RESET) ;
 8012138:	bf00      	nop
 801213a:	2102      	movs	r1, #2
 801213c:	480b      	ldr	r0, [pc, #44]	; (801216c <LCD_WriteData+0x5c>)
 801213e:	f7f9 fa98 	bl	800b672 <SPI_I2S_GetFlagStatus>
 8012142:	4603      	mov	r3, r0
 8012144:	2b00      	cmp	r3, #0
 8012146:	d0f8      	beq.n	801213a <LCD_WriteData+0x2a>
  
  while(SPI_I2S_GetFlagStatus(LCD_SPI, SPI_I2S_FLAG_BSY) != RESET);
 8012148:	bf00      	nop
 801214a:	2180      	movs	r1, #128	; 0x80
 801214c:	4807      	ldr	r0, [pc, #28]	; (801216c <LCD_WriteData+0x5c>)
 801214e:	f7f9 fa90 	bl	800b672 <SPI_I2S_GetFlagStatus>
 8012152:	4603      	mov	r3, r0
 8012154:	2b00      	cmp	r3, #0
 8012156:	d1f8      	bne.n	801214a <LCD_WriteData+0x3a>
  
  LCD_ChipSelect(ENABLE);
 8012158:	2001      	movs	r0, #1
 801215a:	f7fe fb1b 	bl	8010794 <LCD_ChipSelect>
}
 801215e:	bf00      	nop
 8012160:	3708      	adds	r7, #8
 8012162:	46bd      	mov	sp, r7
 8012164:	bd80      	pop	{r7, pc}
 8012166:	bf00      	nop
 8012168:	40020c00 	.word	0x40020c00
 801216c:	40015000 	.word	0x40015000

08012170 <LCD_PowerOn>:
  * @brief  Configure the LCD controller (Power On sequence as described in ILI9341 Datasheet)
  * @param  None
  * @retval None
  */
void LCD_PowerOn(void)
{
 8012170:	b580      	push	{r7, lr}
 8012172:	af00      	add	r7, sp, #0
  LCD_WriteCommand(0xCA);
 8012174:	20ca      	movs	r0, #202	; 0xca
 8012176:	f7ff ff9c 	bl	80120b2 <LCD_WriteCommand>
  LCD_WriteData(0xC3);
 801217a:	20c3      	movs	r0, #195	; 0xc3
 801217c:	f7ff ffc8 	bl	8012110 <LCD_WriteData>
  LCD_WriteData(0x08);
 8012180:	2008      	movs	r0, #8
 8012182:	f7ff ffc5 	bl	8012110 <LCD_WriteData>
  LCD_WriteData(0x50);
 8012186:	2050      	movs	r0, #80	; 0x50
 8012188:	f7ff ffc2 	bl	8012110 <LCD_WriteData>
  LCD_WriteCommand(LCD_POWERB);
 801218c:	20cf      	movs	r0, #207	; 0xcf
 801218e:	f7ff ff90 	bl	80120b2 <LCD_WriteCommand>
  LCD_WriteData(0x00);
 8012192:	2000      	movs	r0, #0
 8012194:	f7ff ffbc 	bl	8012110 <LCD_WriteData>
  LCD_WriteData(0xC1);
 8012198:	20c1      	movs	r0, #193	; 0xc1
 801219a:	f7ff ffb9 	bl	8012110 <LCD_WriteData>
  LCD_WriteData(0x30);
 801219e:	2030      	movs	r0, #48	; 0x30
 80121a0:	f7ff ffb6 	bl	8012110 <LCD_WriteData>
  LCD_WriteCommand(LCD_POWER_SEQ);
 80121a4:	20ed      	movs	r0, #237	; 0xed
 80121a6:	f7ff ff84 	bl	80120b2 <LCD_WriteCommand>
  LCD_WriteData(0x64);
 80121aa:	2064      	movs	r0, #100	; 0x64
 80121ac:	f7ff ffb0 	bl	8012110 <LCD_WriteData>
  LCD_WriteData(0x03);
 80121b0:	2003      	movs	r0, #3
 80121b2:	f7ff ffad 	bl	8012110 <LCD_WriteData>
  LCD_WriteData(0x12);
 80121b6:	2012      	movs	r0, #18
 80121b8:	f7ff ffaa 	bl	8012110 <LCD_WriteData>
  LCD_WriteData(0x81);
 80121bc:	2081      	movs	r0, #129	; 0x81
 80121be:	f7ff ffa7 	bl	8012110 <LCD_WriteData>
  LCD_WriteCommand(LCD_DTCA);
 80121c2:	20e8      	movs	r0, #232	; 0xe8
 80121c4:	f7ff ff75 	bl	80120b2 <LCD_WriteCommand>
  LCD_WriteData(0x85);
 80121c8:	2085      	movs	r0, #133	; 0x85
 80121ca:	f7ff ffa1 	bl	8012110 <LCD_WriteData>
  LCD_WriteData(0x00);
 80121ce:	2000      	movs	r0, #0
 80121d0:	f7ff ff9e 	bl	8012110 <LCD_WriteData>
  LCD_WriteData(0x78);
 80121d4:	2078      	movs	r0, #120	; 0x78
 80121d6:	f7ff ff9b 	bl	8012110 <LCD_WriteData>
  LCD_WriteCommand(LCD_POWERA);
 80121da:	20cb      	movs	r0, #203	; 0xcb
 80121dc:	f7ff ff69 	bl	80120b2 <LCD_WriteCommand>
  LCD_WriteData(0x39);
 80121e0:	2039      	movs	r0, #57	; 0x39
 80121e2:	f7ff ff95 	bl	8012110 <LCD_WriteData>
  LCD_WriteData(0x2C);
 80121e6:	202c      	movs	r0, #44	; 0x2c
 80121e8:	f7ff ff92 	bl	8012110 <LCD_WriteData>
  LCD_WriteData(0x00);
 80121ec:	2000      	movs	r0, #0
 80121ee:	f7ff ff8f 	bl	8012110 <LCD_WriteData>
  LCD_WriteData(0x34);
 80121f2:	2034      	movs	r0, #52	; 0x34
 80121f4:	f7ff ff8c 	bl	8012110 <LCD_WriteData>
  LCD_WriteData(0x02);
 80121f8:	2002      	movs	r0, #2
 80121fa:	f7ff ff89 	bl	8012110 <LCD_WriteData>
  LCD_WriteCommand(LCD_PRC);
 80121fe:	20f7      	movs	r0, #247	; 0xf7
 8012200:	f7ff ff57 	bl	80120b2 <LCD_WriteCommand>
  LCD_WriteData(0x20);
 8012204:	2020      	movs	r0, #32
 8012206:	f7ff ff83 	bl	8012110 <LCD_WriteData>
  LCD_WriteCommand(LCD_DTCB);
 801220a:	20ea      	movs	r0, #234	; 0xea
 801220c:	f7ff ff51 	bl	80120b2 <LCD_WriteCommand>
  LCD_WriteData(0x00);
 8012210:	2000      	movs	r0, #0
 8012212:	f7ff ff7d 	bl	8012110 <LCD_WriteData>
  LCD_WriteData(0x00);
 8012216:	2000      	movs	r0, #0
 8012218:	f7ff ff7a 	bl	8012110 <LCD_WriteData>
  LCD_WriteCommand(LCD_FRC);
 801221c:	20b1      	movs	r0, #177	; 0xb1
 801221e:	f7ff ff48 	bl	80120b2 <LCD_WriteCommand>
  LCD_WriteData(0x00);
 8012222:	2000      	movs	r0, #0
 8012224:	f7ff ff74 	bl	8012110 <LCD_WriteData>
  LCD_WriteData(0x1B);
 8012228:	201b      	movs	r0, #27
 801222a:	f7ff ff71 	bl	8012110 <LCD_WriteData>
  LCD_WriteCommand(LCD_DFC);
 801222e:	20b6      	movs	r0, #182	; 0xb6
 8012230:	f7ff ff3f 	bl	80120b2 <LCD_WriteCommand>
  LCD_WriteData(0x0A);
 8012234:	200a      	movs	r0, #10
 8012236:	f7ff ff6b 	bl	8012110 <LCD_WriteData>
  LCD_WriteData(0xA2);
 801223a:	20a2      	movs	r0, #162	; 0xa2
 801223c:	f7ff ff68 	bl	8012110 <LCD_WriteData>
  LCD_WriteCommand(LCD_POWER1);
 8012240:	20c0      	movs	r0, #192	; 0xc0
 8012242:	f7ff ff36 	bl	80120b2 <LCD_WriteCommand>
  LCD_WriteData(0x10);
 8012246:	2010      	movs	r0, #16
 8012248:	f7ff ff62 	bl	8012110 <LCD_WriteData>
  LCD_WriteCommand(LCD_POWER2);
 801224c:	20c1      	movs	r0, #193	; 0xc1
 801224e:	f7ff ff30 	bl	80120b2 <LCD_WriteCommand>
  LCD_WriteData(0x10);
 8012252:	2010      	movs	r0, #16
 8012254:	f7ff ff5c 	bl	8012110 <LCD_WriteData>
  LCD_WriteCommand(LCD_VCOM1);
 8012258:	20c5      	movs	r0, #197	; 0xc5
 801225a:	f7ff ff2a 	bl	80120b2 <LCD_WriteCommand>
  LCD_WriteData(0x45);
 801225e:	2045      	movs	r0, #69	; 0x45
 8012260:	f7ff ff56 	bl	8012110 <LCD_WriteData>
  LCD_WriteData(0x15);
 8012264:	2015      	movs	r0, #21
 8012266:	f7ff ff53 	bl	8012110 <LCD_WriteData>
  LCD_WriteCommand(LCD_VCOM2);
 801226a:	20c7      	movs	r0, #199	; 0xc7
 801226c:	f7ff ff21 	bl	80120b2 <LCD_WriteCommand>
  LCD_WriteData(0x90);
 8012270:	2090      	movs	r0, #144	; 0x90
 8012272:	f7ff ff4d 	bl	8012110 <LCD_WriteData>
  LCD_WriteCommand(LCD_MAC);
 8012276:	2036      	movs	r0, #54	; 0x36
 8012278:	f7ff ff1b 	bl	80120b2 <LCD_WriteCommand>
  LCD_WriteData(0xC8);
 801227c:	20c8      	movs	r0, #200	; 0xc8
 801227e:	f7ff ff47 	bl	8012110 <LCD_WriteData>
  LCD_WriteCommand(LCD_3GAMMA_EN);
 8012282:	20f2      	movs	r0, #242	; 0xf2
 8012284:	f7ff ff15 	bl	80120b2 <LCD_WriteCommand>
  LCD_WriteData(0x00);
 8012288:	2000      	movs	r0, #0
 801228a:	f7ff ff41 	bl	8012110 <LCD_WriteData>
  LCD_WriteCommand(LCD_RGB_INTERFACE);
 801228e:	20b0      	movs	r0, #176	; 0xb0
 8012290:	f7ff ff0f 	bl	80120b2 <LCD_WriteCommand>
  LCD_WriteData(0xC2);
 8012294:	20c2      	movs	r0, #194	; 0xc2
 8012296:	f7ff ff3b 	bl	8012110 <LCD_WriteData>
  LCD_WriteCommand(LCD_DFC);
 801229a:	20b6      	movs	r0, #182	; 0xb6
 801229c:	f7ff ff09 	bl	80120b2 <LCD_WriteCommand>
  LCD_WriteData(0x0A);
 80122a0:	200a      	movs	r0, #10
 80122a2:	f7ff ff35 	bl	8012110 <LCD_WriteData>
  LCD_WriteData(0xA7);
 80122a6:	20a7      	movs	r0, #167	; 0xa7
 80122a8:	f7ff ff32 	bl	8012110 <LCD_WriteData>
  LCD_WriteData(0x27);
 80122ac:	2027      	movs	r0, #39	; 0x27
 80122ae:	f7ff ff2f 	bl	8012110 <LCD_WriteData>
  LCD_WriteData(0x04);
 80122b2:	2004      	movs	r0, #4
 80122b4:	f7ff ff2c 	bl	8012110 <LCD_WriteData>

  /* colomn address set */
  LCD_WriteCommand(LCD_COLUMN_ADDR);
 80122b8:	202a      	movs	r0, #42	; 0x2a
 80122ba:	f7ff fefa 	bl	80120b2 <LCD_WriteCommand>
  LCD_WriteData(0x00);
 80122be:	2000      	movs	r0, #0
 80122c0:	f7ff ff26 	bl	8012110 <LCD_WriteData>
  LCD_WriteData(0x00);
 80122c4:	2000      	movs	r0, #0
 80122c6:	f7ff ff23 	bl	8012110 <LCD_WriteData>
  LCD_WriteData(0x00);
 80122ca:	2000      	movs	r0, #0
 80122cc:	f7ff ff20 	bl	8012110 <LCD_WriteData>
  LCD_WriteData(0xEF);
 80122d0:	20ef      	movs	r0, #239	; 0xef
 80122d2:	f7ff ff1d 	bl	8012110 <LCD_WriteData>
  /* Page Address Set */
  LCD_WriteCommand(LCD_PAGE_ADDR);
 80122d6:	202b      	movs	r0, #43	; 0x2b
 80122d8:	f7ff feeb 	bl	80120b2 <LCD_WriteCommand>
  LCD_WriteData(0x00);
 80122dc:	2000      	movs	r0, #0
 80122de:	f7ff ff17 	bl	8012110 <LCD_WriteData>
  LCD_WriteData(0x00);
 80122e2:	2000      	movs	r0, #0
 80122e4:	f7ff ff14 	bl	8012110 <LCD_WriteData>
  LCD_WriteData(0x01);
 80122e8:	2001      	movs	r0, #1
 80122ea:	f7ff ff11 	bl	8012110 <LCD_WriteData>
  LCD_WriteData(0x3F);
 80122ee:	203f      	movs	r0, #63	; 0x3f
 80122f0:	f7ff ff0e 	bl	8012110 <LCD_WriteData>
  LCD_WriteCommand(LCD_INTERFACE);
 80122f4:	20f6      	movs	r0, #246	; 0xf6
 80122f6:	f7ff fedc 	bl	80120b2 <LCD_WriteCommand>
  LCD_WriteData(0x01);
 80122fa:	2001      	movs	r0, #1
 80122fc:	f7ff ff08 	bl	8012110 <LCD_WriteData>
  LCD_WriteData(0x00);
 8012300:	2000      	movs	r0, #0
 8012302:	f7ff ff05 	bl	8012110 <LCD_WriteData>
  LCD_WriteData(0x06);
 8012306:	2006      	movs	r0, #6
 8012308:	f7ff ff02 	bl	8012110 <LCD_WriteData>
  
  LCD_WriteCommand(LCD_GRAM);
 801230c:	202c      	movs	r0, #44	; 0x2c
 801230e:	f7ff fed0 	bl	80120b2 <LCD_WriteCommand>
  delay(200);
 8012312:	20c8      	movs	r0, #200	; 0xc8
 8012314:	f000 fa0a 	bl	801272c <delay>
  
  LCD_WriteCommand(LCD_GAMMA);
 8012318:	2026      	movs	r0, #38	; 0x26
 801231a:	f7ff feca 	bl	80120b2 <LCD_WriteCommand>
  LCD_WriteData(0x01);
 801231e:	2001      	movs	r0, #1
 8012320:	f7ff fef6 	bl	8012110 <LCD_WriteData>
  
  LCD_WriteCommand(LCD_PGAMMA);
 8012324:	20e0      	movs	r0, #224	; 0xe0
 8012326:	f7ff fec4 	bl	80120b2 <LCD_WriteCommand>
  LCD_WriteData(0x0F);
 801232a:	200f      	movs	r0, #15
 801232c:	f7ff fef0 	bl	8012110 <LCD_WriteData>
  LCD_WriteData(0x29);
 8012330:	2029      	movs	r0, #41	; 0x29
 8012332:	f7ff feed 	bl	8012110 <LCD_WriteData>
  LCD_WriteData(0x24);
 8012336:	2024      	movs	r0, #36	; 0x24
 8012338:	f7ff feea 	bl	8012110 <LCD_WriteData>
  LCD_WriteData(0x0C);
 801233c:	200c      	movs	r0, #12
 801233e:	f7ff fee7 	bl	8012110 <LCD_WriteData>
  LCD_WriteData(0x0E);
 8012342:	200e      	movs	r0, #14
 8012344:	f7ff fee4 	bl	8012110 <LCD_WriteData>
  LCD_WriteData(0x09);
 8012348:	2009      	movs	r0, #9
 801234a:	f7ff fee1 	bl	8012110 <LCD_WriteData>
  LCD_WriteData(0x4E);
 801234e:	204e      	movs	r0, #78	; 0x4e
 8012350:	f7ff fede 	bl	8012110 <LCD_WriteData>
  LCD_WriteData(0x78);
 8012354:	2078      	movs	r0, #120	; 0x78
 8012356:	f7ff fedb 	bl	8012110 <LCD_WriteData>
  LCD_WriteData(0x3C);
 801235a:	203c      	movs	r0, #60	; 0x3c
 801235c:	f7ff fed8 	bl	8012110 <LCD_WriteData>
  LCD_WriteData(0x09);
 8012360:	2009      	movs	r0, #9
 8012362:	f7ff fed5 	bl	8012110 <LCD_WriteData>
  LCD_WriteData(0x13);
 8012366:	2013      	movs	r0, #19
 8012368:	f7ff fed2 	bl	8012110 <LCD_WriteData>
  LCD_WriteData(0x05);
 801236c:	2005      	movs	r0, #5
 801236e:	f7ff fecf 	bl	8012110 <LCD_WriteData>
  LCD_WriteData(0x17);
 8012372:	2017      	movs	r0, #23
 8012374:	f7ff fecc 	bl	8012110 <LCD_WriteData>
  LCD_WriteData(0x11);
 8012378:	2011      	movs	r0, #17
 801237a:	f7ff fec9 	bl	8012110 <LCD_WriteData>
  LCD_WriteData(0x00);
 801237e:	2000      	movs	r0, #0
 8012380:	f7ff fec6 	bl	8012110 <LCD_WriteData>
  LCD_WriteCommand(LCD_NGAMMA);
 8012384:	20e1      	movs	r0, #225	; 0xe1
 8012386:	f7ff fe94 	bl	80120b2 <LCD_WriteCommand>
  LCD_WriteData(0x00);
 801238a:	2000      	movs	r0, #0
 801238c:	f7ff fec0 	bl	8012110 <LCD_WriteData>
  LCD_WriteData(0x16);
 8012390:	2016      	movs	r0, #22
 8012392:	f7ff febd 	bl	8012110 <LCD_WriteData>
  LCD_WriteData(0x1B);
 8012396:	201b      	movs	r0, #27
 8012398:	f7ff feba 	bl	8012110 <LCD_WriteData>
  LCD_WriteData(0x04);
 801239c:	2004      	movs	r0, #4
 801239e:	f7ff feb7 	bl	8012110 <LCD_WriteData>
  LCD_WriteData(0x11);
 80123a2:	2011      	movs	r0, #17
 80123a4:	f7ff feb4 	bl	8012110 <LCD_WriteData>
  LCD_WriteData(0x07);
 80123a8:	2007      	movs	r0, #7
 80123aa:	f7ff feb1 	bl	8012110 <LCD_WriteData>
  LCD_WriteData(0x31);
 80123ae:	2031      	movs	r0, #49	; 0x31
 80123b0:	f7ff feae 	bl	8012110 <LCD_WriteData>
  LCD_WriteData(0x33);
 80123b4:	2033      	movs	r0, #51	; 0x33
 80123b6:	f7ff feab 	bl	8012110 <LCD_WriteData>
  LCD_WriteData(0x42);
 80123ba:	2042      	movs	r0, #66	; 0x42
 80123bc:	f7ff fea8 	bl	8012110 <LCD_WriteData>
  LCD_WriteData(0x05);
 80123c0:	2005      	movs	r0, #5
 80123c2:	f7ff fea5 	bl	8012110 <LCD_WriteData>
  LCD_WriteData(0x0C);
 80123c6:	200c      	movs	r0, #12
 80123c8:	f7ff fea2 	bl	8012110 <LCD_WriteData>
  LCD_WriteData(0x0A);
 80123cc:	200a      	movs	r0, #10
 80123ce:	f7ff fe9f 	bl	8012110 <LCD_WriteData>
  LCD_WriteData(0x28);
 80123d2:	2028      	movs	r0, #40	; 0x28
 80123d4:	f7ff fe9c 	bl	8012110 <LCD_WriteData>
  LCD_WriteData(0x2F);
 80123d8:	202f      	movs	r0, #47	; 0x2f
 80123da:	f7ff fe99 	bl	8012110 <LCD_WriteData>
  LCD_WriteData(0x0F);
 80123de:	200f      	movs	r0, #15
 80123e0:	f7ff fe96 	bl	8012110 <LCD_WriteData>
  
  LCD_WriteCommand(LCD_SLEEP_OUT);
 80123e4:	2011      	movs	r0, #17
 80123e6:	f7ff fe64 	bl	80120b2 <LCD_WriteCommand>
  delay(200);
 80123ea:	20c8      	movs	r0, #200	; 0xc8
 80123ec:	f000 f99e 	bl	801272c <delay>
  LCD_WriteCommand(LCD_DISPLAY_ON);
 80123f0:	2029      	movs	r0, #41	; 0x29
 80123f2:	f7ff fe5e 	bl	80120b2 <LCD_WriteCommand>
  /* GRAM start writing */
  LCD_WriteCommand(LCD_GRAM);
 80123f6:	202c      	movs	r0, #44	; 0x2c
 80123f8:	f7ff fe5b 	bl	80120b2 <LCD_WriteCommand>
 }
 80123fc:	bf00      	nop
 80123fe:	bd80      	pop	{r7, pc}

08012400 <LCD_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void LCD_DisplayOn(void)
{
 8012400:	b580      	push	{r7, lr}
 8012402:	af00      	add	r7, sp, #0
  LCD_WriteCommand(LCD_DISPLAY_ON);
 8012404:	2029      	movs	r0, #41	; 0x29
 8012406:	f7ff fe54 	bl	80120b2 <LCD_WriteCommand>
}
 801240a:	bf00      	nop
 801240c:	bd80      	pop	{r7, pc}

0801240e <LCD_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void LCD_DisplayOff(void)
{
 801240e:	b580      	push	{r7, lr}
 8012410:	af00      	add	r7, sp, #0
    /* Display Off */
    LCD_WriteCommand(LCD_DISPLAY_OFF);
 8012412:	2028      	movs	r0, #40	; 0x28
 8012414:	f7ff fe4d 	bl	80120b2 <LCD_WriteCommand>
}
 8012418:	bf00      	nop
 801241a:	bd80      	pop	{r7, pc}

0801241c <LCD_CtrlLinesConfig>:
  *         when VDDIO is lower than required LCD supply.
  * @param  None
  * @retval None
  */
void LCD_CtrlLinesConfig(void)
{
 801241c:	b580      	push	{r7, lr}
 801241e:	b082      	sub	sp, #8
 8012420:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable GPIOs clock*/
  RCC_AHB1PeriphClockCmd(LCD_NCS_GPIO_CLK | LCD_WRX_GPIO_CLK, ENABLE);
 8012422:	2101      	movs	r1, #1
 8012424:	200c      	movs	r0, #12
 8012426:	f7f6 fa7b 	bl	8008920 <RCC_AHB1PeriphClockCmd>

  /* Configure NCS in Output Push-Pull mode */
  GPIO_InitStructure.GPIO_Pin = LCD_NCS_PIN;
 801242a:	2304      	movs	r3, #4
 801242c:	603b      	str	r3, [r7, #0]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 801242e:	2302      	movs	r3, #2
 8012430:	717b      	strb	r3, [r7, #5]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8012432:	2301      	movs	r3, #1
 8012434:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8012436:	2300      	movs	r3, #0
 8012438:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 801243a:	2300      	movs	r3, #0
 801243c:	71fb      	strb	r3, [r7, #7]
  GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 801243e:	463b      	mov	r3, r7
 8012440:	4619      	mov	r1, r3
 8012442:	480a      	ldr	r0, [pc, #40]	; (801246c <LCD_CtrlLinesConfig+0x50>)
 8012444:	f7f4 f89c 	bl	8006580 <GPIO_Init>
  
  /* Configure WRX in Output Push-Pull mode */
  GPIO_InitStructure.GPIO_Pin = LCD_WRX_PIN;
 8012448:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 801244c:	603b      	str	r3, [r7, #0]
  GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 801244e:	463b      	mov	r3, r7
 8012450:	4619      	mov	r1, r3
 8012452:	4807      	ldr	r0, [pc, #28]	; (8012470 <LCD_CtrlLinesConfig+0x54>)
 8012454:	f7f4 f894 	bl	8006580 <GPIO_Init>

  /* Set chip select pin high */
  LCD_CtrlLinesWrite(LCD_NCS_GPIO_PORT, LCD_NCS_PIN, Bit_SET);
 8012458:	2201      	movs	r2, #1
 801245a:	2104      	movs	r1, #4
 801245c:	4803      	ldr	r0, [pc, #12]	; (801246c <LCD_CtrlLinesConfig+0x50>)
 801245e:	f000 f809 	bl	8012474 <LCD_CtrlLinesWrite>
}
 8012462:	bf00      	nop
 8012464:	3708      	adds	r7, #8
 8012466:	46bd      	mov	sp, r7
 8012468:	bd80      	pop	{r7, pc}
 801246a:	bf00      	nop
 801246c:	40020800 	.word	0x40020800
 8012470:	40020c00 	.word	0x40020c00

08012474 <LCD_CtrlLinesWrite>:
  *     @arg Bit_RESET: to clear the port pin
  *     @arg Bit_SET: to set the port pin
  * @retval None
  */
void LCD_CtrlLinesWrite(GPIO_TypeDef* GPIOx, uint16_t CtrlPins, BitAction BitVal)
{
 8012474:	b580      	push	{r7, lr}
 8012476:	b082      	sub	sp, #8
 8012478:	af00      	add	r7, sp, #0
 801247a:	6078      	str	r0, [r7, #4]
 801247c:	460b      	mov	r3, r1
 801247e:	807b      	strh	r3, [r7, #2]
 8012480:	4613      	mov	r3, r2
 8012482:	707b      	strb	r3, [r7, #1]
  /* Set or Reset the control line */
  GPIO_WriteBit(GPIOx, (uint16_t)CtrlPins, (BitAction)BitVal);
 8012484:	787a      	ldrb	r2, [r7, #1]
 8012486:	887b      	ldrh	r3, [r7, #2]
 8012488:	4619      	mov	r1, r3
 801248a:	6878      	ldr	r0, [r7, #4]
 801248c:	f7f4 f9ae 	bl	80067ec <GPIO_WriteBit>
}
 8012490:	bf00      	nop
 8012492:	3708      	adds	r7, #8
 8012494:	46bd      	mov	sp, r7
 8012496:	bd80      	pop	{r7, pc}

08012498 <LCD_SPIConfig>:
  * @brief  Configures the LCD_SPI interface.
  * @param  None
  * @retval None
  */
void LCD_SPIConfig(void)
{
 8012498:	b580      	push	{r7, lr}
 801249a:	b088      	sub	sp, #32
 801249c:	af00      	add	r7, sp, #0
  SPI_InitTypeDef    SPI_InitStructure;
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable LCD_SPI_SCK_GPIO_CLK, LCD_SPI_MISO_GPIO_CLK and LCD_SPI_MOSI_GPIO_CLK clock */
  RCC_AHB1PeriphClockCmd(LCD_SPI_SCK_GPIO_CLK | LCD_SPI_MISO_GPIO_CLK | LCD_SPI_MOSI_GPIO_CLK, ENABLE);
 801249e:	2101      	movs	r1, #1
 80124a0:	2020      	movs	r0, #32
 80124a2:	f7f6 fa3d 	bl	8008920 <RCC_AHB1PeriphClockCmd>

  /* Enable LCD_SPI and SYSCFG clock  */
  RCC_APB2PeriphClockCmd(LCD_SPI_CLK, ENABLE);
 80124a6:	2101      	movs	r1, #1
 80124a8:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80124ac:	f7f6 fab8 	bl	8008a20 <RCC_APB2PeriphClockCmd>
  
  /* Configure LCD_SPI SCK pin */
  GPIO_InitStructure.GPIO_Pin = LCD_SPI_SCK_PIN;
 80124b0:	2380      	movs	r3, #128	; 0x80
 80124b2:	607b      	str	r3, [r7, #4]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_25MHz;
 80124b4:	2301      	movs	r3, #1
 80124b6:	727b      	strb	r3, [r7, #9]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 80124b8:	2302      	movs	r3, #2
 80124ba:	723b      	strb	r3, [r7, #8]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 80124bc:	2300      	movs	r3, #0
 80124be:	72bb      	strb	r3, [r7, #10]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_DOWN;
 80124c0:	2302      	movs	r3, #2
 80124c2:	72fb      	strb	r3, [r7, #11]
  GPIO_Init(LCD_SPI_SCK_GPIO_PORT, &GPIO_InitStructure);
 80124c4:	1d3b      	adds	r3, r7, #4
 80124c6:	4619      	mov	r1, r3
 80124c8:	4826      	ldr	r0, [pc, #152]	; (8012564 <LCD_SPIConfig+0xcc>)
 80124ca:	f7f4 f859 	bl	8006580 <GPIO_Init>

  /* Configure LCD_SPI MISO pin */
  GPIO_InitStructure.GPIO_Pin = LCD_SPI_MISO_PIN;
 80124ce:	f44f 7380 	mov.w	r3, #256	; 0x100
 80124d2:	607b      	str	r3, [r7, #4]
  GPIO_Init(LCD_SPI_MISO_GPIO_PORT, &GPIO_InitStructure);
 80124d4:	1d3b      	adds	r3, r7, #4
 80124d6:	4619      	mov	r1, r3
 80124d8:	4822      	ldr	r0, [pc, #136]	; (8012564 <LCD_SPIConfig+0xcc>)
 80124da:	f7f4 f851 	bl	8006580 <GPIO_Init>

  /* Configure LCD_SPI MOSI pin */
  GPIO_InitStructure.GPIO_Pin = LCD_SPI_MOSI_PIN;
 80124de:	f44f 7300 	mov.w	r3, #512	; 0x200
 80124e2:	607b      	str	r3, [r7, #4]
  GPIO_Init(LCD_SPI_MOSI_GPIO_PORT, &GPIO_InitStructure);
 80124e4:	1d3b      	adds	r3, r7, #4
 80124e6:	4619      	mov	r1, r3
 80124e8:	481e      	ldr	r0, [pc, #120]	; (8012564 <LCD_SPIConfig+0xcc>)
 80124ea:	f7f4 f849 	bl	8006580 <GPIO_Init>

  /* Connect SPI SCK */
  GPIO_PinAFConfig(LCD_SPI_SCK_GPIO_PORT, LCD_SPI_SCK_SOURCE, LCD_SPI_SCK_AF);
 80124ee:	2205      	movs	r2, #5
 80124f0:	2107      	movs	r1, #7
 80124f2:	481c      	ldr	r0, [pc, #112]	; (8012564 <LCD_SPIConfig+0xcc>)
 80124f4:	f7f4 f9b3 	bl	800685e <GPIO_PinAFConfig>

  /* Connect SPI MISO */
  GPIO_PinAFConfig(LCD_SPI_MISO_GPIO_PORT, LCD_SPI_MISO_SOURCE, LCD_SPI_MISO_AF);
 80124f8:	2205      	movs	r2, #5
 80124fa:	2108      	movs	r1, #8
 80124fc:	4819      	ldr	r0, [pc, #100]	; (8012564 <LCD_SPIConfig+0xcc>)
 80124fe:	f7f4 f9ae 	bl	800685e <GPIO_PinAFConfig>

  /* Connect SPI MOSI */
  GPIO_PinAFConfig(LCD_SPI_MOSI_GPIO_PORT, LCD_SPI_MOSI_SOURCE, LCD_SPI_MOSI_AF);
 8012502:	2205      	movs	r2, #5
 8012504:	2109      	movs	r1, #9
 8012506:	4817      	ldr	r0, [pc, #92]	; (8012564 <LCD_SPIConfig+0xcc>)
 8012508:	f7f4 f9a9 	bl	800685e <GPIO_PinAFConfig>
  
  SPI_I2S_DeInit(LCD_SPI);
 801250c:	4816      	ldr	r0, [pc, #88]	; (8012568 <LCD_SPIConfig+0xd0>)
 801250e:	f7f8 fcf1 	bl	800aef4 <SPI_I2S_DeInit>

  /* SPI configuration -------------------------------------------------------*/
  /* If the SPI peripheral is already enabled, don't reconfigure it */
  if ((LCD_SPI->CR1 & SPI_CR1_SPE) == 0)
 8012512:	4b15      	ldr	r3, [pc, #84]	; (8012568 <LCD_SPIConfig+0xd0>)
 8012514:	881b      	ldrh	r3, [r3, #0]
 8012516:	b29b      	uxth	r3, r3
 8012518:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801251c:	2b00      	cmp	r3, #0
 801251e:	d11d      	bne.n	801255c <LCD_SPIConfig+0xc4>
  {    
    SPI_InitStructure.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 8012520:	2300      	movs	r3, #0
 8012522:	81bb      	strh	r3, [r7, #12]
    SPI_InitStructure.SPI_Mode = SPI_Mode_Master;
 8012524:	f44f 7382 	mov.w	r3, #260	; 0x104
 8012528:	81fb      	strh	r3, [r7, #14]
    SPI_InitStructure.SPI_DataSize = SPI_DataSize_8b;
 801252a:	2300      	movs	r3, #0
 801252c:	823b      	strh	r3, [r7, #16]
    SPI_InitStructure.SPI_CPOL = SPI_CPOL_Low;
 801252e:	2300      	movs	r3, #0
 8012530:	827b      	strh	r3, [r7, #18]
    SPI_InitStructure.SPI_CPHA = SPI_CPHA_1Edge;
 8012532:	2300      	movs	r3, #0
 8012534:	82bb      	strh	r3, [r7, #20]
    SPI_InitStructure.SPI_NSS = SPI_NSS_Soft;
 8012536:	f44f 7300 	mov.w	r3, #512	; 0x200
 801253a:	82fb      	strh	r3, [r7, #22]
       to verify these constraints:
          - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
          - l3gd20 SPI interface max baudrate is 10MHz for write/read
          - PCLK2 frequency is set to 90 MHz 
       */
    SPI_InitStructure.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_16;
 801253c:	2318      	movs	r3, #24
 801253e:	833b      	strh	r3, [r7, #24]
    SPI_InitStructure.SPI_FirstBit = SPI_FirstBit_MSB;
 8012540:	2300      	movs	r3, #0
 8012542:	837b      	strh	r3, [r7, #26]
    SPI_InitStructure.SPI_CRCPolynomial = 7;
 8012544:	2307      	movs	r3, #7
 8012546:	83bb      	strh	r3, [r7, #28]
    SPI_Init(LCD_SPI, &SPI_InitStructure);
 8012548:	f107 030c 	add.w	r3, r7, #12
 801254c:	4619      	mov	r1, r3
 801254e:	4806      	ldr	r0, [pc, #24]	; (8012568 <LCD_SPIConfig+0xd0>)
 8012550:	f7f8 fd3e 	bl	800afd0 <SPI_Init>

    /* Enable L3GD20_SPI  */
    SPI_Cmd(LCD_SPI, ENABLE);
 8012554:	2101      	movs	r1, #1
 8012556:	4804      	ldr	r0, [pc, #16]	; (8012568 <LCD_SPIConfig+0xd0>)
 8012558:	f7f8 fe95 	bl	800b286 <SPI_Cmd>
  }
}
 801255c:	bf00      	nop
 801255e:	3720      	adds	r7, #32
 8012560:	46bd      	mov	sp, r7
 8012562:	bd80      	pop	{r7, pc}
 8012564:	40021400 	.word	0x40021400
 8012568:	40015000 	.word	0x40015000

0801256c <LCD_AF_GPIOConfig>:
  * @brief  GPIO config for LTDC.
  * @param  None
  * @retval None
  */
static void LCD_AF_GPIOConfig(void)
{
 801256c:	b580      	push	{r7, lr}
 801256e:	b082      	sub	sp, #8
 8012570:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct;
  
  /* Enable GPIOA, GPIOB, GPIOC, GPIOD, GPIOF, GPIOG AHB Clocks */
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA | RCC_AHB1Periph_GPIOB | \
 8012572:	2101      	movs	r1, #1
 8012574:	206f      	movs	r0, #111	; 0x6f
 8012576:	f7f6 f9d3 	bl	8008920 <RCC_AHB1PeriphClockCmd>
           -----------------------------------------------------

*/

 /* GPIOA configuration */
  GPIO_PinAFConfig(GPIOA, GPIO_PinSource3, GPIO_AF_LTDC);
 801257a:	220e      	movs	r2, #14
 801257c:	2103      	movs	r1, #3
 801257e:	4853      	ldr	r0, [pc, #332]	; (80126cc <LCD_AF_GPIOConfig+0x160>)
 8012580:	f7f4 f96d 	bl	800685e <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOA, GPIO_PinSource4, GPIO_AF_LTDC);
 8012584:	220e      	movs	r2, #14
 8012586:	2104      	movs	r1, #4
 8012588:	4850      	ldr	r0, [pc, #320]	; (80126cc <LCD_AF_GPIOConfig+0x160>)
 801258a:	f7f4 f968 	bl	800685e <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOA, GPIO_PinSource6, GPIO_AF_LTDC);
 801258e:	220e      	movs	r2, #14
 8012590:	2106      	movs	r1, #6
 8012592:	484e      	ldr	r0, [pc, #312]	; (80126cc <LCD_AF_GPIOConfig+0x160>)
 8012594:	f7f4 f963 	bl	800685e <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOA, GPIO_PinSource11, GPIO_AF_LTDC);
 8012598:	220e      	movs	r2, #14
 801259a:	210b      	movs	r1, #11
 801259c:	484b      	ldr	r0, [pc, #300]	; (80126cc <LCD_AF_GPIOConfig+0x160>)
 801259e:	f7f4 f95e 	bl	800685e <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOA, GPIO_PinSource12, GPIO_AF_LTDC);
 80125a2:	220e      	movs	r2, #14
 80125a4:	210c      	movs	r1, #12
 80125a6:	4849      	ldr	r0, [pc, #292]	; (80126cc <LCD_AF_GPIOConfig+0x160>)
 80125a8:	f7f4 f959 	bl	800685e <GPIO_PinAFConfig>

  GPIO_InitStruct.GPIO_Pin = GPIO_Pin_3 | GPIO_Pin_4 | GPIO_Pin_6 | \
 80125ac:	f641 0358 	movw	r3, #6232	; 0x1858
 80125b0:	603b      	str	r3, [r7, #0]
                             GPIO_Pin_11 | GPIO_Pin_12;
                             
  GPIO_InitStruct.GPIO_Speed = GPIO_Speed_50MHz;
 80125b2:	2302      	movs	r3, #2
 80125b4:	717b      	strb	r3, [r7, #5]
  GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AF;
 80125b6:	2302      	movs	r3, #2
 80125b8:	713b      	strb	r3, [r7, #4]
  GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
 80125ba:	2300      	movs	r3, #0
 80125bc:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_NOPULL;
 80125be:	2300      	movs	r3, #0
 80125c0:	71fb      	strb	r3, [r7, #7]
  GPIO_Init(GPIOA, &GPIO_InitStruct);
 80125c2:	463b      	mov	r3, r7
 80125c4:	4619      	mov	r1, r3
 80125c6:	4841      	ldr	r0, [pc, #260]	; (80126cc <LCD_AF_GPIOConfig+0x160>)
 80125c8:	f7f3 ffda 	bl	8006580 <GPIO_Init>
  
 /* GPIOB configuration */  
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource0, 0x09);
 80125cc:	2209      	movs	r2, #9
 80125ce:	2100      	movs	r1, #0
 80125d0:	483f      	ldr	r0, [pc, #252]	; (80126d0 <LCD_AF_GPIOConfig+0x164>)
 80125d2:	f7f4 f944 	bl	800685e <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource1, 0x09);
 80125d6:	2209      	movs	r2, #9
 80125d8:	2101      	movs	r1, #1
 80125da:	483d      	ldr	r0, [pc, #244]	; (80126d0 <LCD_AF_GPIOConfig+0x164>)
 80125dc:	f7f4 f93f 	bl	800685e <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource8, GPIO_AF_LTDC);
 80125e0:	220e      	movs	r2, #14
 80125e2:	2108      	movs	r1, #8
 80125e4:	483a      	ldr	r0, [pc, #232]	; (80126d0 <LCD_AF_GPIOConfig+0x164>)
 80125e6:	f7f4 f93a 	bl	800685e <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource9, GPIO_AF_LTDC);
 80125ea:	220e      	movs	r2, #14
 80125ec:	2109      	movs	r1, #9
 80125ee:	4838      	ldr	r0, [pc, #224]	; (80126d0 <LCD_AF_GPIOConfig+0x164>)
 80125f0:	f7f4 f935 	bl	800685e <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource10, GPIO_AF_LTDC);
 80125f4:	220e      	movs	r2, #14
 80125f6:	210a      	movs	r1, #10
 80125f8:	4835      	ldr	r0, [pc, #212]	; (80126d0 <LCD_AF_GPIOConfig+0x164>)
 80125fa:	f7f4 f930 	bl	800685e <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource11, GPIO_AF_LTDC);
 80125fe:	220e      	movs	r2, #14
 8012600:	210b      	movs	r1, #11
 8012602:	4833      	ldr	r0, [pc, #204]	; (80126d0 <LCD_AF_GPIOConfig+0x164>)
 8012604:	f7f4 f92b 	bl	800685e <GPIO_PinAFConfig>

  GPIO_InitStruct.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_8 | \
 8012608:	f640 7303 	movw	r3, #3843	; 0xf03
 801260c:	603b      	str	r3, [r7, #0]
                             GPIO_Pin_9 | GPIO_Pin_10 | GPIO_Pin_11;
  
  GPIO_Init(GPIOB, &GPIO_InitStruct);
 801260e:	463b      	mov	r3, r7
 8012610:	4619      	mov	r1, r3
 8012612:	482f      	ldr	r0, [pc, #188]	; (80126d0 <LCD_AF_GPIOConfig+0x164>)
 8012614:	f7f3 ffb4 	bl	8006580 <GPIO_Init>

 /* GPIOC configuration */
  GPIO_PinAFConfig(GPIOC, GPIO_PinSource6, GPIO_AF_LTDC);
 8012618:	220e      	movs	r2, #14
 801261a:	2106      	movs	r1, #6
 801261c:	482d      	ldr	r0, [pc, #180]	; (80126d4 <LCD_AF_GPIOConfig+0x168>)
 801261e:	f7f4 f91e 	bl	800685e <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOC, GPIO_PinSource7, GPIO_AF_LTDC);
 8012622:	220e      	movs	r2, #14
 8012624:	2107      	movs	r1, #7
 8012626:	482b      	ldr	r0, [pc, #172]	; (80126d4 <LCD_AF_GPIOConfig+0x168>)
 8012628:	f7f4 f919 	bl	800685e <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOC, GPIO_PinSource10, GPIO_AF_LTDC);
 801262c:	220e      	movs	r2, #14
 801262e:	210a      	movs	r1, #10
 8012630:	4828      	ldr	r0, [pc, #160]	; (80126d4 <LCD_AF_GPIOConfig+0x168>)
 8012632:	f7f4 f914 	bl	800685e <GPIO_PinAFConfig>
  
  GPIO_InitStruct.GPIO_Pin = GPIO_Pin_6 | GPIO_Pin_7 | GPIO_Pin_10;
 8012636:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 801263a:	603b      	str	r3, [r7, #0]
                             
  GPIO_Init(GPIOC, &GPIO_InitStruct);
 801263c:	463b      	mov	r3, r7
 801263e:	4619      	mov	r1, r3
 8012640:	4824      	ldr	r0, [pc, #144]	; (80126d4 <LCD_AF_GPIOConfig+0x168>)
 8012642:	f7f3 ff9d 	bl	8006580 <GPIO_Init>

 /* GPIOD configuration */
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource3, GPIO_AF_LTDC);
 8012646:	220e      	movs	r2, #14
 8012648:	2103      	movs	r1, #3
 801264a:	4823      	ldr	r0, [pc, #140]	; (80126d8 <LCD_AF_GPIOConfig+0x16c>)
 801264c:	f7f4 f907 	bl	800685e <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource6, GPIO_AF_LTDC);
 8012650:	220e      	movs	r2, #14
 8012652:	2106      	movs	r1, #6
 8012654:	4820      	ldr	r0, [pc, #128]	; (80126d8 <LCD_AF_GPIOConfig+0x16c>)
 8012656:	f7f4 f902 	bl	800685e <GPIO_PinAFConfig>
  
  GPIO_InitStruct.GPIO_Pin = GPIO_Pin_3 | GPIO_Pin_6;
 801265a:	2348      	movs	r3, #72	; 0x48
 801265c:	603b      	str	r3, [r7, #0]
                             
  GPIO_Init(GPIOD, &GPIO_InitStruct);
 801265e:	463b      	mov	r3, r7
 8012660:	4619      	mov	r1, r3
 8012662:	481d      	ldr	r0, [pc, #116]	; (80126d8 <LCD_AF_GPIOConfig+0x16c>)
 8012664:	f7f3 ff8c 	bl	8006580 <GPIO_Init>
  
 /* GPIOF configuration */
  GPIO_PinAFConfig(GPIOF, GPIO_PinSource10, GPIO_AF_LTDC);
 8012668:	220e      	movs	r2, #14
 801266a:	210a      	movs	r1, #10
 801266c:	481b      	ldr	r0, [pc, #108]	; (80126dc <LCD_AF_GPIOConfig+0x170>)
 801266e:	f7f4 f8f6 	bl	800685e <GPIO_PinAFConfig>
  
  GPIO_InitStruct.GPIO_Pin = GPIO_Pin_10;
 8012672:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012676:	603b      	str	r3, [r7, #0]
                             
  GPIO_Init(GPIOF, &GPIO_InitStruct);     
 8012678:	463b      	mov	r3, r7
 801267a:	4619      	mov	r1, r3
 801267c:	4817      	ldr	r0, [pc, #92]	; (80126dc <LCD_AF_GPIOConfig+0x170>)
 801267e:	f7f3 ff7f 	bl	8006580 <GPIO_Init>

 /* GPIOG configuration */  
  GPIO_PinAFConfig(GPIOG, GPIO_PinSource6, GPIO_AF_LTDC);
 8012682:	220e      	movs	r2, #14
 8012684:	2106      	movs	r1, #6
 8012686:	4816      	ldr	r0, [pc, #88]	; (80126e0 <LCD_AF_GPIOConfig+0x174>)
 8012688:	f7f4 f8e9 	bl	800685e <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOG, GPIO_PinSource7, GPIO_AF_LTDC);
 801268c:	220e      	movs	r2, #14
 801268e:	2107      	movs	r1, #7
 8012690:	4813      	ldr	r0, [pc, #76]	; (80126e0 <LCD_AF_GPIOConfig+0x174>)
 8012692:	f7f4 f8e4 	bl	800685e <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOG, GPIO_PinSource10, 0x09);
 8012696:	2209      	movs	r2, #9
 8012698:	210a      	movs	r1, #10
 801269a:	4811      	ldr	r0, [pc, #68]	; (80126e0 <LCD_AF_GPIOConfig+0x174>)
 801269c:	f7f4 f8df 	bl	800685e <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOG, GPIO_PinSource11, GPIO_AF_LTDC);
 80126a0:	220e      	movs	r2, #14
 80126a2:	210b      	movs	r1, #11
 80126a4:	480e      	ldr	r0, [pc, #56]	; (80126e0 <LCD_AF_GPIOConfig+0x174>)
 80126a6:	f7f4 f8da 	bl	800685e <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOG, GPIO_PinSource12, 0x09);
 80126aa:	2209      	movs	r2, #9
 80126ac:	210c      	movs	r1, #12
 80126ae:	480c      	ldr	r0, [pc, #48]	; (80126e0 <LCD_AF_GPIOConfig+0x174>)
 80126b0:	f7f4 f8d5 	bl	800685e <GPIO_PinAFConfig>

  GPIO_InitStruct.GPIO_Pin = GPIO_Pin_6 | GPIO_Pin_7 | GPIO_Pin_10 | \
 80126b4:	f44f 53e6 	mov.w	r3, #7360	; 0x1cc0
 80126b8:	603b      	str	r3, [r7, #0]
                             GPIO_Pin_11 | GPIO_Pin_12;
  
  GPIO_Init(GPIOG, &GPIO_InitStruct);
 80126ba:	463b      	mov	r3, r7
 80126bc:	4619      	mov	r1, r3
 80126be:	4808      	ldr	r0, [pc, #32]	; (80126e0 <LCD_AF_GPIOConfig+0x174>)
 80126c0:	f7f3 ff5e 	bl	8006580 <GPIO_Init>
 
}
 80126c4:	bf00      	nop
 80126c6:	3708      	adds	r7, #8
 80126c8:	46bd      	mov	sp, r7
 80126ca:	bd80      	pop	{r7, pc}
 80126cc:	40020000 	.word	0x40020000
 80126d0:	40020400 	.word	0x40020400
 80126d4:	40020800 	.word	0x40020800
 80126d8:	40020c00 	.word	0x40020c00
 80126dc:	40021400 	.word	0x40021400
 80126e0:	40021800 	.word	0x40021800

080126e4 <PutPixel>:
  * @param  x: pixel x.
  * @param  y: pixel y.  
  * @retval None
  */
static void PutPixel(int16_t x, int16_t y)
{ 
 80126e4:	b580      	push	{r7, lr}
 80126e6:	b082      	sub	sp, #8
 80126e8:	af00      	add	r7, sp, #0
 80126ea:	4603      	mov	r3, r0
 80126ec:	460a      	mov	r2, r1
 80126ee:	80fb      	strh	r3, [r7, #6]
 80126f0:	4613      	mov	r3, r2
 80126f2:	80bb      	strh	r3, [r7, #4]
  if(x < 0 || x > 239 || y < 0 || y > 319)
 80126f4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80126f8:	2b00      	cmp	r3, #0
 80126fa:	db13      	blt.n	8012724 <PutPixel+0x40>
 80126fc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012700:	2bef      	cmp	r3, #239	; 0xef
 8012702:	dc0f      	bgt.n	8012724 <PutPixel+0x40>
 8012704:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8012708:	2b00      	cmp	r3, #0
 801270a:	db0b      	blt.n	8012724 <PutPixel+0x40>
 801270c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8012710:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8012714:	da06      	bge.n	8012724 <PutPixel+0x40>
  {
    return;  
  }
  LCD_DrawLine(x, y, 1, LCD_DIR_HORIZONTAL);
 8012716:	88f8      	ldrh	r0, [r7, #6]
 8012718:	88b9      	ldrh	r1, [r7, #4]
 801271a:	2300      	movs	r3, #0
 801271c:	2201      	movs	r2, #1
 801271e:	f7fe fafc 	bl	8010d1a <LCD_DrawLine>
 8012722:	e000      	b.n	8012726 <PutPixel+0x42>
    return;  
 8012724:	bf00      	nop
}
 8012726:	3708      	adds	r7, #8
 8012728:	46bd      	mov	sp, r7
 801272a:	bd80      	pop	{r7, pc}

0801272c <delay>:
  * @brief  Inserts a delay time.
  * @param  nCount: specifies the delay time length.
  * @retval None
  */
static void delay(__IO uint32_t nCount)
{
 801272c:	b480      	push	{r7}
 801272e:	b085      	sub	sp, #20
 8012730:	af00      	add	r7, sp, #0
 8012732:	6078      	str	r0, [r7, #4]
  __IO uint32_t index = 0; 
 8012734:	2300      	movs	r3, #0
 8012736:	60fb      	str	r3, [r7, #12]
  for(index = nCount; index != 0; index--)
 8012738:	687b      	ldr	r3, [r7, #4]
 801273a:	60fb      	str	r3, [r7, #12]
 801273c:	e002      	b.n	8012744 <delay+0x18>
 801273e:	68fb      	ldr	r3, [r7, #12]
 8012740:	3b01      	subs	r3, #1
 8012742:	60fb      	str	r3, [r7, #12]
 8012744:	68fb      	ldr	r3, [r7, #12]
 8012746:	2b00      	cmp	r3, #0
 8012748:	d1f9      	bne.n	801273e <delay+0x12>
  {
  }
}
 801274a:	bf00      	nop
 801274c:	3714      	adds	r7, #20
 801274e:	46bd      	mov	sp, r7
 8012750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012754:	4770      	bx	lr
 8012756:	bf00      	nop

08012758 <SDRAM_Init>:
  *         on the SDRAM.
  * @param  None
  * @retval None
  */
void SDRAM_Init(void)
{
 8012758:	b580      	push	{r7, lr}
 801275a:	b092      	sub	sp, #72	; 0x48
 801275c:	af00      	add	r7, sp, #0
  FMC_SDRAMInitTypeDef  FMC_SDRAMInitStructure;
  FMC_SDRAMTimingInitTypeDef  FMC_SDRAMTimingInitStructure; 
  
  /* GPIO configuration for FMC SDRAM bank */
  SDRAM_GPIOConfig();
 801275e:	f000 f836 	bl	80127ce <SDRAM_GPIOConfig>
  
  /* Enable FMC clock */
  RCC_AHB3PeriphClockCmd(RCC_AHB3Periph_FMC, ENABLE);
 8012762:	2101      	movs	r1, #1
 8012764:	2001      	movs	r0, #1
 8012766:	f7f6 f91b 	bl	80089a0 <RCC_AHB3PeriphClockCmd>
 
/* FMC Configuration ---------------------------------------------------------*/
/* FMC SDRAM Bank configuration */   
  /* Timing configuration for 90 Mhz of SD clock frequency (180Mhz/2) */
  /* TMRD: 2 Clock cycles */
  FMC_SDRAMTimingInitStructure.FMC_LoadToActiveDelay    = 2;      
 801276a:	2302      	movs	r3, #2
 801276c:	603b      	str	r3, [r7, #0]
  /* TXSR: min=70ns (7x11.11ns) */
  FMC_SDRAMTimingInitStructure.FMC_ExitSelfRefreshDelay = 7;
 801276e:	2307      	movs	r3, #7
 8012770:	607b      	str	r3, [r7, #4]
  /* TRAS: min=42ns (4x11.11ns) max=120k (ns) */
  FMC_SDRAMTimingInitStructure.FMC_SelfRefreshTime      = 4;
 8012772:	2304      	movs	r3, #4
 8012774:	60bb      	str	r3, [r7, #8]
  /* TRC:  min=70 (7x11.11ns) */        
  FMC_SDRAMTimingInitStructure.FMC_RowCycleDelay        = 7;         
 8012776:	2307      	movs	r3, #7
 8012778:	60fb      	str	r3, [r7, #12]
  /* TWR:  min=1+ 7ns (1+1x11.11ns) */
  FMC_SDRAMTimingInitStructure.FMC_WriteRecoveryTime    = 2;      
 801277a:	2302      	movs	r3, #2
 801277c:	613b      	str	r3, [r7, #16]
  /* TRP:  20ns => 2x11.11ns */
  FMC_SDRAMTimingInitStructure.FMC_RPDelay              = 2;                
 801277e:	2302      	movs	r3, #2
 8012780:	617b      	str	r3, [r7, #20]
  /* TRCD: 20ns => 2x11.11ns */
  FMC_SDRAMTimingInitStructure.FMC_RCDDelay             = 2;
 8012782:	2302      	movs	r3, #2
 8012784:	61bb      	str	r3, [r7, #24]

/* FMC SDRAM control configuration */
  FMC_SDRAMInitStructure.FMC_Bank = FMC_Bank2_SDRAM;
 8012786:	2301      	movs	r3, #1
 8012788:	61fb      	str	r3, [r7, #28]
  /* Row addressing: [7:0] */
  FMC_SDRAMInitStructure.FMC_ColumnBitsNumber = FMC_ColumnBits_Number_8b;
 801278a:	2300      	movs	r3, #0
 801278c:	623b      	str	r3, [r7, #32]
  /* Column addressing: [11:0] */
  FMC_SDRAMInitStructure.FMC_RowBitsNumber = FMC_RowBits_Number_12b;
 801278e:	2304      	movs	r3, #4
 8012790:	627b      	str	r3, [r7, #36]	; 0x24
  FMC_SDRAMInitStructure.FMC_SDMemoryDataWidth = SDRAM_MEMORY_WIDTH;
 8012792:	2310      	movs	r3, #16
 8012794:	62bb      	str	r3, [r7, #40]	; 0x28
  FMC_SDRAMInitStructure.FMC_InternalBankNumber = FMC_InternalBank_Number_4;
 8012796:	2340      	movs	r3, #64	; 0x40
 8012798:	62fb      	str	r3, [r7, #44]	; 0x2c
  FMC_SDRAMInitStructure.FMC_CASLatency = SDRAM_CAS_LATENCY; 
 801279a:	f44f 73c0 	mov.w	r3, #384	; 0x180
 801279e:	633b      	str	r3, [r7, #48]	; 0x30
  FMC_SDRAMInitStructure.FMC_WriteProtection = FMC_Write_Protection_Disable;
 80127a0:	2300      	movs	r3, #0
 80127a2:	637b      	str	r3, [r7, #52]	; 0x34
  FMC_SDRAMInitStructure.FMC_SDClockPeriod = SDCLOCK_PERIOD;  
 80127a4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80127a8:	63bb      	str	r3, [r7, #56]	; 0x38
  FMC_SDRAMInitStructure.FMC_ReadBurst = SDRAM_READBURST;
 80127aa:	2300      	movs	r3, #0
 80127ac:	63fb      	str	r3, [r7, #60]	; 0x3c
  FMC_SDRAMInitStructure.FMC_ReadPipeDelay = FMC_ReadPipe_Delay_1;
 80127ae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80127b2:	643b      	str	r3, [r7, #64]	; 0x40
  FMC_SDRAMInitStructure.FMC_SDRAMTimingStruct = &FMC_SDRAMTimingInitStructure;
 80127b4:	463b      	mov	r3, r7
 80127b6:	647b      	str	r3, [r7, #68]	; 0x44
  
  /* FMC SDRAM bank initialization */
  FMC_SDRAMInit(&FMC_SDRAMInitStructure); 
 80127b8:	f107 031c 	add.w	r3, r7, #28
 80127bc:	4618      	mov	r0, r3
 80127be:	f7f3 fb2b 	bl	8005e18 <FMC_SDRAMInit>
  
  /* FMC SDRAM device initialization sequence */
  SDRAM_InitSequence(); 
 80127c2:	f000 f90f 	bl	80129e4 <SDRAM_InitSequence>
  
}
 80127c6:	bf00      	nop
 80127c8:	3748      	adds	r7, #72	; 0x48
 80127ca:	46bd      	mov	sp, r7
 80127cc:	bd80      	pop	{r7, pc}

080127ce <SDRAM_GPIOConfig>:
  * @brief  Configures all SDRAM memory I/Os pins. 
  * @param  None. 
  * @retval None.
  */
void SDRAM_GPIOConfig(void)
{
 80127ce:	b580      	push	{r7, lr}
 80127d0:	b082      	sub	sp, #8
 80127d2:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable GPIOs clock */
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB | RCC_AHB1Periph_GPIOC | RCC_AHB1Periph_GPIOD |
 80127d4:	2101      	movs	r1, #1
 80127d6:	207e      	movs	r0, #126	; 0x7e
 80127d8:	f7f6 f8a2 	bl	8008920 <RCC_AHB1PeriphClockCmd>
 +-------------------+  
  
*/
  
  /* Common GPIO configuration */
  GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_AF;
 80127dc:	2302      	movs	r3, #2
 80127de:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80127e0:	2302      	movs	r3, #2
 80127e2:	717b      	strb	r3, [r7, #5]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 80127e4:	2300      	movs	r3, #0
 80127e6:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
 80127e8:	2300      	movs	r3, #0
 80127ea:	71fb      	strb	r3, [r7, #7]

  /* GPIOB configuration */
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource5 , GPIO_AF_FMC);
 80127ec:	220c      	movs	r2, #12
 80127ee:	2105      	movs	r1, #5
 80127f0:	4876      	ldr	r0, [pc, #472]	; (80129cc <SDRAM_GPIOConfig+0x1fe>)
 80127f2:	f7f4 f834 	bl	800685e <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource6 , GPIO_AF_FMC);
 80127f6:	220c      	movs	r2, #12
 80127f8:	2106      	movs	r1, #6
 80127fa:	4874      	ldr	r0, [pc, #464]	; (80129cc <SDRAM_GPIOConfig+0x1fe>)
 80127fc:	f7f4 f82f 	bl	800685e <GPIO_PinAFConfig>
  
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_5  | GPIO_Pin_6;      
 8012800:	2360      	movs	r3, #96	; 0x60
 8012802:	603b      	str	r3, [r7, #0]

  GPIO_Init(GPIOB, &GPIO_InitStructure);  
 8012804:	463b      	mov	r3, r7
 8012806:	4619      	mov	r1, r3
 8012808:	4870      	ldr	r0, [pc, #448]	; (80129cc <SDRAM_GPIOConfig+0x1fe>)
 801280a:	f7f3 feb9 	bl	8006580 <GPIO_Init>

  /* GPIOC configuration */
  GPIO_PinAFConfig(GPIOC, GPIO_PinSource0 , GPIO_AF_FMC);
 801280e:	220c      	movs	r2, #12
 8012810:	2100      	movs	r1, #0
 8012812:	486f      	ldr	r0, [pc, #444]	; (80129d0 <SDRAM_GPIOConfig+0x202>)
 8012814:	f7f4 f823 	bl	800685e <GPIO_PinAFConfig>
  
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0;      
 8012818:	2301      	movs	r3, #1
 801281a:	603b      	str	r3, [r7, #0]

  GPIO_Init(GPIOC, &GPIO_InitStructure);  
 801281c:	463b      	mov	r3, r7
 801281e:	4619      	mov	r1, r3
 8012820:	486b      	ldr	r0, [pc, #428]	; (80129d0 <SDRAM_GPIOConfig+0x202>)
 8012822:	f7f3 fead 	bl	8006580 <GPIO_Init>
  
  /* GPIOD configuration */
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource0, GPIO_AF_FMC);
 8012826:	220c      	movs	r2, #12
 8012828:	2100      	movs	r1, #0
 801282a:	486a      	ldr	r0, [pc, #424]	; (80129d4 <SDRAM_GPIOConfig+0x206>)
 801282c:	f7f4 f817 	bl	800685e <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource1, GPIO_AF_FMC);
 8012830:	220c      	movs	r2, #12
 8012832:	2101      	movs	r1, #1
 8012834:	4867      	ldr	r0, [pc, #412]	; (80129d4 <SDRAM_GPIOConfig+0x206>)
 8012836:	f7f4 f812 	bl	800685e <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource8, GPIO_AF_FMC);
 801283a:	220c      	movs	r2, #12
 801283c:	2108      	movs	r1, #8
 801283e:	4865      	ldr	r0, [pc, #404]	; (80129d4 <SDRAM_GPIOConfig+0x206>)
 8012840:	f7f4 f80d 	bl	800685e <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource9, GPIO_AF_FMC);
 8012844:	220c      	movs	r2, #12
 8012846:	2109      	movs	r1, #9
 8012848:	4862      	ldr	r0, [pc, #392]	; (80129d4 <SDRAM_GPIOConfig+0x206>)
 801284a:	f7f4 f808 	bl	800685e <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource10, GPIO_AF_FMC);
 801284e:	220c      	movs	r2, #12
 8012850:	210a      	movs	r1, #10
 8012852:	4860      	ldr	r0, [pc, #384]	; (80129d4 <SDRAM_GPIOConfig+0x206>)
 8012854:	f7f4 f803 	bl	800685e <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource14, GPIO_AF_FMC);
 8012858:	220c      	movs	r2, #12
 801285a:	210e      	movs	r1, #14
 801285c:	485d      	ldr	r0, [pc, #372]	; (80129d4 <SDRAM_GPIOConfig+0x206>)
 801285e:	f7f3 fffe 	bl	800685e <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource15, GPIO_AF_FMC);
 8012862:	220c      	movs	r2, #12
 8012864:	210f      	movs	r1, #15
 8012866:	485b      	ldr	r0, [pc, #364]	; (80129d4 <SDRAM_GPIOConfig+0x206>)
 8012868:	f7f3 fff9 	bl	800685e <GPIO_PinAFConfig>

  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1  | GPIO_Pin_8 |
 801286c:	f24c 7303 	movw	r3, #50947	; 0xc703
 8012870:	603b      	str	r3, [r7, #0]
                                GPIO_Pin_9 | GPIO_Pin_10 | GPIO_Pin_14 |
                                GPIO_Pin_15;

  GPIO_Init(GPIOD, &GPIO_InitStructure);
 8012872:	463b      	mov	r3, r7
 8012874:	4619      	mov	r1, r3
 8012876:	4857      	ldr	r0, [pc, #348]	; (80129d4 <SDRAM_GPIOConfig+0x206>)
 8012878:	f7f3 fe82 	bl	8006580 <GPIO_Init>

  /* GPIOE configuration */
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource0 , GPIO_AF_FMC);
 801287c:	220c      	movs	r2, #12
 801287e:	2100      	movs	r1, #0
 8012880:	4855      	ldr	r0, [pc, #340]	; (80129d8 <SDRAM_GPIOConfig+0x20a>)
 8012882:	f7f3 ffec 	bl	800685e <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource1 , GPIO_AF_FMC);
 8012886:	220c      	movs	r2, #12
 8012888:	2101      	movs	r1, #1
 801288a:	4853      	ldr	r0, [pc, #332]	; (80129d8 <SDRAM_GPIOConfig+0x20a>)
 801288c:	f7f3 ffe7 	bl	800685e <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource7 , GPIO_AF_FMC);
 8012890:	220c      	movs	r2, #12
 8012892:	2107      	movs	r1, #7
 8012894:	4850      	ldr	r0, [pc, #320]	; (80129d8 <SDRAM_GPIOConfig+0x20a>)
 8012896:	f7f3 ffe2 	bl	800685e <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource8 , GPIO_AF_FMC);
 801289a:	220c      	movs	r2, #12
 801289c:	2108      	movs	r1, #8
 801289e:	484e      	ldr	r0, [pc, #312]	; (80129d8 <SDRAM_GPIOConfig+0x20a>)
 80128a0:	f7f3 ffdd 	bl	800685e <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource9 , GPIO_AF_FMC);
 80128a4:	220c      	movs	r2, #12
 80128a6:	2109      	movs	r1, #9
 80128a8:	484b      	ldr	r0, [pc, #300]	; (80129d8 <SDRAM_GPIOConfig+0x20a>)
 80128aa:	f7f3 ffd8 	bl	800685e <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource10 , GPIO_AF_FMC);
 80128ae:	220c      	movs	r2, #12
 80128b0:	210a      	movs	r1, #10
 80128b2:	4849      	ldr	r0, [pc, #292]	; (80129d8 <SDRAM_GPIOConfig+0x20a>)
 80128b4:	f7f3 ffd3 	bl	800685e <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource11 , GPIO_AF_FMC);
 80128b8:	220c      	movs	r2, #12
 80128ba:	210b      	movs	r1, #11
 80128bc:	4846      	ldr	r0, [pc, #280]	; (80129d8 <SDRAM_GPIOConfig+0x20a>)
 80128be:	f7f3 ffce 	bl	800685e <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource12 , GPIO_AF_FMC);
 80128c2:	220c      	movs	r2, #12
 80128c4:	210c      	movs	r1, #12
 80128c6:	4844      	ldr	r0, [pc, #272]	; (80129d8 <SDRAM_GPIOConfig+0x20a>)
 80128c8:	f7f3 ffc9 	bl	800685e <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource13 , GPIO_AF_FMC);
 80128cc:	220c      	movs	r2, #12
 80128ce:	210d      	movs	r1, #13
 80128d0:	4841      	ldr	r0, [pc, #260]	; (80129d8 <SDRAM_GPIOConfig+0x20a>)
 80128d2:	f7f3 ffc4 	bl	800685e <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource14 , GPIO_AF_FMC);
 80128d6:	220c      	movs	r2, #12
 80128d8:	210e      	movs	r1, #14
 80128da:	483f      	ldr	r0, [pc, #252]	; (80129d8 <SDRAM_GPIOConfig+0x20a>)
 80128dc:	f7f3 ffbf 	bl	800685e <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource15 , GPIO_AF_FMC);
 80128e0:	220c      	movs	r2, #12
 80128e2:	210f      	movs	r1, #15
 80128e4:	483c      	ldr	r0, [pc, #240]	; (80129d8 <SDRAM_GPIOConfig+0x20a>)
 80128e6:	f7f3 ffba 	bl	800685e <GPIO_PinAFConfig>

  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0  | GPIO_Pin_1  | GPIO_Pin_7 |
 80128ea:	f64f 7383 	movw	r3, #65411	; 0xff83
 80128ee:	603b      	str	r3, [r7, #0]
                                GPIO_Pin_8  | GPIO_Pin_9  | GPIO_Pin_10 |
                                GPIO_Pin_11 | GPIO_Pin_12 | GPIO_Pin_13 |
                                GPIO_Pin_14 | GPIO_Pin_15;

  GPIO_Init(GPIOE, &GPIO_InitStructure);
 80128f0:	463b      	mov	r3, r7
 80128f2:	4619      	mov	r1, r3
 80128f4:	4838      	ldr	r0, [pc, #224]	; (80129d8 <SDRAM_GPIOConfig+0x20a>)
 80128f6:	f7f3 fe43 	bl	8006580 <GPIO_Init>

  /* GPIOF configuration */
  GPIO_PinAFConfig(GPIOF, GPIO_PinSource0 , GPIO_AF_FMC);
 80128fa:	220c      	movs	r2, #12
 80128fc:	2100      	movs	r1, #0
 80128fe:	4837      	ldr	r0, [pc, #220]	; (80129dc <SDRAM_GPIOConfig+0x20e>)
 8012900:	f7f3 ffad 	bl	800685e <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOF, GPIO_PinSource1 , GPIO_AF_FMC);
 8012904:	220c      	movs	r2, #12
 8012906:	2101      	movs	r1, #1
 8012908:	4834      	ldr	r0, [pc, #208]	; (80129dc <SDRAM_GPIOConfig+0x20e>)
 801290a:	f7f3 ffa8 	bl	800685e <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOF, GPIO_PinSource2 , GPIO_AF_FMC);
 801290e:	220c      	movs	r2, #12
 8012910:	2102      	movs	r1, #2
 8012912:	4832      	ldr	r0, [pc, #200]	; (80129dc <SDRAM_GPIOConfig+0x20e>)
 8012914:	f7f3 ffa3 	bl	800685e <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOF, GPIO_PinSource3 , GPIO_AF_FMC);
 8012918:	220c      	movs	r2, #12
 801291a:	2103      	movs	r1, #3
 801291c:	482f      	ldr	r0, [pc, #188]	; (80129dc <SDRAM_GPIOConfig+0x20e>)
 801291e:	f7f3 ff9e 	bl	800685e <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOF, GPIO_PinSource4 , GPIO_AF_FMC);
 8012922:	220c      	movs	r2, #12
 8012924:	2104      	movs	r1, #4
 8012926:	482d      	ldr	r0, [pc, #180]	; (80129dc <SDRAM_GPIOConfig+0x20e>)
 8012928:	f7f3 ff99 	bl	800685e <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOF, GPIO_PinSource5 , GPIO_AF_FMC);
 801292c:	220c      	movs	r2, #12
 801292e:	2105      	movs	r1, #5
 8012930:	482a      	ldr	r0, [pc, #168]	; (80129dc <SDRAM_GPIOConfig+0x20e>)
 8012932:	f7f3 ff94 	bl	800685e <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOF, GPIO_PinSource11 , GPIO_AF_FMC);
 8012936:	220c      	movs	r2, #12
 8012938:	210b      	movs	r1, #11
 801293a:	4828      	ldr	r0, [pc, #160]	; (80129dc <SDRAM_GPIOConfig+0x20e>)
 801293c:	f7f3 ff8f 	bl	800685e <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOF, GPIO_PinSource12 , GPIO_AF_FMC);
 8012940:	220c      	movs	r2, #12
 8012942:	210c      	movs	r1, #12
 8012944:	4825      	ldr	r0, [pc, #148]	; (80129dc <SDRAM_GPIOConfig+0x20e>)
 8012946:	f7f3 ff8a 	bl	800685e <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOF, GPIO_PinSource13 , GPIO_AF_FMC);
 801294a:	220c      	movs	r2, #12
 801294c:	210d      	movs	r1, #13
 801294e:	4823      	ldr	r0, [pc, #140]	; (80129dc <SDRAM_GPIOConfig+0x20e>)
 8012950:	f7f3 ff85 	bl	800685e <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOF, GPIO_PinSource14 , GPIO_AF_FMC);
 8012954:	220c      	movs	r2, #12
 8012956:	210e      	movs	r1, #14
 8012958:	4820      	ldr	r0, [pc, #128]	; (80129dc <SDRAM_GPIOConfig+0x20e>)
 801295a:	f7f3 ff80 	bl	800685e <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOF, GPIO_PinSource15 , GPIO_AF_FMC);
 801295e:	220c      	movs	r2, #12
 8012960:	210f      	movs	r1, #15
 8012962:	481e      	ldr	r0, [pc, #120]	; (80129dc <SDRAM_GPIOConfig+0x20e>)
 8012964:	f7f3 ff7b 	bl	800685e <GPIO_PinAFConfig>

  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0  | GPIO_Pin_1 | GPIO_Pin_2 | 
 8012968:	f64f 033f 	movw	r3, #63551	; 0xf83f
 801296c:	603b      	str	r3, [r7, #0]
                                GPIO_Pin_3  | GPIO_Pin_4 | GPIO_Pin_5 |
                                GPIO_Pin_11 | GPIO_Pin_12 | GPIO_Pin_13 |
                                GPIO_Pin_14 | GPIO_Pin_15;      

  GPIO_Init(GPIOF, &GPIO_InitStructure);
 801296e:	463b      	mov	r3, r7
 8012970:	4619      	mov	r1, r3
 8012972:	481a      	ldr	r0, [pc, #104]	; (80129dc <SDRAM_GPIOConfig+0x20e>)
 8012974:	f7f3 fe04 	bl	8006580 <GPIO_Init>

  /* GPIOG configuration */
  GPIO_PinAFConfig(GPIOG, GPIO_PinSource0 , GPIO_AF_FMC);
 8012978:	220c      	movs	r2, #12
 801297a:	2100      	movs	r1, #0
 801297c:	4818      	ldr	r0, [pc, #96]	; (80129e0 <SDRAM_GPIOConfig+0x212>)
 801297e:	f7f3 ff6e 	bl	800685e <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOG, GPIO_PinSource1 , GPIO_AF_FMC);
 8012982:	220c      	movs	r2, #12
 8012984:	2101      	movs	r1, #1
 8012986:	4816      	ldr	r0, [pc, #88]	; (80129e0 <SDRAM_GPIOConfig+0x212>)
 8012988:	f7f3 ff69 	bl	800685e <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOG, GPIO_PinSource4 , GPIO_AF_FMC);
 801298c:	220c      	movs	r2, #12
 801298e:	2104      	movs	r1, #4
 8012990:	4813      	ldr	r0, [pc, #76]	; (80129e0 <SDRAM_GPIOConfig+0x212>)
 8012992:	f7f3 ff64 	bl	800685e <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOG, GPIO_PinSource5 , GPIO_AF_FMC);
 8012996:	220c      	movs	r2, #12
 8012998:	2105      	movs	r1, #5
 801299a:	4811      	ldr	r0, [pc, #68]	; (80129e0 <SDRAM_GPIOConfig+0x212>)
 801299c:	f7f3 ff5f 	bl	800685e <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOG, GPIO_PinSource8 , GPIO_AF_FMC);
 80129a0:	220c      	movs	r2, #12
 80129a2:	2108      	movs	r1, #8
 80129a4:	480e      	ldr	r0, [pc, #56]	; (80129e0 <SDRAM_GPIOConfig+0x212>)
 80129a6:	f7f3 ff5a 	bl	800685e <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOG, GPIO_PinSource15 , GPIO_AF_FMC);
 80129aa:	220c      	movs	r2, #12
 80129ac:	210f      	movs	r1, #15
 80129ae:	480c      	ldr	r0, [pc, #48]	; (80129e0 <SDRAM_GPIOConfig+0x212>)
 80129b0:	f7f3 ff55 	bl	800685e <GPIO_PinAFConfig>
  

  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_4 |
 80129b4:	f248 1333 	movw	r3, #33075	; 0x8133
 80129b8:	603b      	str	r3, [r7, #0]
                                GPIO_Pin_5 | GPIO_Pin_8 | GPIO_Pin_15;

  GPIO_Init(GPIOG, &GPIO_InitStructure);    
 80129ba:	463b      	mov	r3, r7
 80129bc:	4619      	mov	r1, r3
 80129be:	4808      	ldr	r0, [pc, #32]	; (80129e0 <SDRAM_GPIOConfig+0x212>)
 80129c0:	f7f3 fdde 	bl	8006580 <GPIO_Init>
}
 80129c4:	bf00      	nop
 80129c6:	3708      	adds	r7, #8
 80129c8:	46bd      	mov	sp, r7
 80129ca:	bd80      	pop	{r7, pc}
 80129cc:	40020400 	.word	0x40020400
 80129d0:	40020800 	.word	0x40020800
 80129d4:	40020c00 	.word	0x40020c00
 80129d8:	40021000 	.word	0x40021000
 80129dc:	40021400 	.word	0x40021400
 80129e0:	40021800 	.word	0x40021800

080129e4 <SDRAM_InitSequence>:
  * @brief  Executes the SDRAM memory initialization sequence. 
  * @param  None. 
  * @retval None.
  */
void SDRAM_InitSequence(void)
{
 80129e4:	b580      	push	{r7, lr}
 80129e6:	b086      	sub	sp, #24
 80129e8:	af00      	add	r7, sp, #0
  FMC_SDRAMCommandTypeDef FMC_SDRAMCommandStructure;
  uint32_t tmpr = 0;
 80129ea:	2300      	movs	r3, #0
 80129ec:	617b      	str	r3, [r7, #20]
  
/* Step 3 --------------------------------------------------------------------*/
  /* Configure a clock configuration enable command */
  FMC_SDRAMCommandStructure.FMC_CommandMode = FMC_Command_Mode_CLK_Enabled;
 80129ee:	2301      	movs	r3, #1
 80129f0:	607b      	str	r3, [r7, #4]
  FMC_SDRAMCommandStructure.FMC_CommandTarget = FMC_Command_Target_bank2;
 80129f2:	2308      	movs	r3, #8
 80129f4:	60bb      	str	r3, [r7, #8]
  FMC_SDRAMCommandStructure.FMC_AutoRefreshNumber = 1;
 80129f6:	2301      	movs	r3, #1
 80129f8:	60fb      	str	r3, [r7, #12]
  FMC_SDRAMCommandStructure.FMC_ModeRegisterDefinition = 0;
 80129fa:	2300      	movs	r3, #0
 80129fc:	613b      	str	r3, [r7, #16]
  /* Wait until the SDRAM controller is ready */ 
  while(FMC_GetFlagStatus(FMC_Bank2_SDRAM, FMC_FLAG_Busy) != RESET)
 80129fe:	bf00      	nop
 8012a00:	2120      	movs	r1, #32
 8012a02:	2001      	movs	r0, #1
 8012a04:	f7f3 fbf4 	bl	80061f0 <FMC_GetFlagStatus>
 8012a08:	4603      	mov	r3, r0
 8012a0a:	2b00      	cmp	r3, #0
 8012a0c:	d1f8      	bne.n	8012a00 <SDRAM_InitSequence+0x1c>
  {
  }
  /* Send the command */
  FMC_SDRAMCmdConfig(&FMC_SDRAMCommandStructure);  
 8012a0e:	1d3b      	adds	r3, r7, #4
 8012a10:	4618      	mov	r0, r3
 8012a12:	f7f3 faf4 	bl	8005ffe <FMC_SDRAMCmdConfig>
  
/* Step 4 --------------------------------------------------------------------*/
  /* Insert 100 ms delay */
  __Delay(10);
 8012a16:	200a      	movs	r0, #10
 8012a18:	f000 f8ac 	bl	8012b74 <delay>
    
/* Step 5 --------------------------------------------------------------------*/
  /* Configure a PALL (precharge all) command */ 
  FMC_SDRAMCommandStructure.FMC_CommandMode = FMC_Command_Mode_PALL;
 8012a1c:	2302      	movs	r3, #2
 8012a1e:	607b      	str	r3, [r7, #4]
  FMC_SDRAMCommandStructure.FMC_CommandTarget = FMC_Command_Target_bank2;
 8012a20:	2308      	movs	r3, #8
 8012a22:	60bb      	str	r3, [r7, #8]
  FMC_SDRAMCommandStructure.FMC_AutoRefreshNumber = 1;
 8012a24:	2301      	movs	r3, #1
 8012a26:	60fb      	str	r3, [r7, #12]
  FMC_SDRAMCommandStructure.FMC_ModeRegisterDefinition = 0;
 8012a28:	2300      	movs	r3, #0
 8012a2a:	613b      	str	r3, [r7, #16]
  /* Wait until the SDRAM controller is ready */ 
  while(FMC_GetFlagStatus(FMC_Bank2_SDRAM, FMC_FLAG_Busy) != RESET)
 8012a2c:	bf00      	nop
 8012a2e:	2120      	movs	r1, #32
 8012a30:	2001      	movs	r0, #1
 8012a32:	f7f3 fbdd 	bl	80061f0 <FMC_GetFlagStatus>
 8012a36:	4603      	mov	r3, r0
 8012a38:	2b00      	cmp	r3, #0
 8012a3a:	d1f8      	bne.n	8012a2e <SDRAM_InitSequence+0x4a>
  {
  }
  /* Send the command */
  FMC_SDRAMCmdConfig(&FMC_SDRAMCommandStructure);
 8012a3c:	1d3b      	adds	r3, r7, #4
 8012a3e:	4618      	mov	r0, r3
 8012a40:	f7f3 fadd 	bl	8005ffe <FMC_SDRAMCmdConfig>
  
/* Step 6 --------------------------------------------------------------------*/
  /* Configure a Auto-Refresh command */ 
  FMC_SDRAMCommandStructure.FMC_CommandMode = FMC_Command_Mode_AutoRefresh;
 8012a44:	2303      	movs	r3, #3
 8012a46:	607b      	str	r3, [r7, #4]
  FMC_SDRAMCommandStructure.FMC_CommandTarget = FMC_Command_Target_bank2;
 8012a48:	2308      	movs	r3, #8
 8012a4a:	60bb      	str	r3, [r7, #8]
  FMC_SDRAMCommandStructure.FMC_AutoRefreshNumber = 4;
 8012a4c:	2304      	movs	r3, #4
 8012a4e:	60fb      	str	r3, [r7, #12]
  FMC_SDRAMCommandStructure.FMC_ModeRegisterDefinition = 0;
 8012a50:	2300      	movs	r3, #0
 8012a52:	613b      	str	r3, [r7, #16]
  /* Wait until the SDRAM controller is ready */ 
  while(FMC_GetFlagStatus(FMC_Bank2_SDRAM, FMC_FLAG_Busy) != RESET)
 8012a54:	bf00      	nop
 8012a56:	2120      	movs	r1, #32
 8012a58:	2001      	movs	r0, #1
 8012a5a:	f7f3 fbc9 	bl	80061f0 <FMC_GetFlagStatus>
 8012a5e:	4603      	mov	r3, r0
 8012a60:	2b00      	cmp	r3, #0
 8012a62:	d1f8      	bne.n	8012a56 <SDRAM_InitSequence+0x72>
  {
  }
  /* Send the  first command */
  FMC_SDRAMCmdConfig(&FMC_SDRAMCommandStructure);
 8012a64:	1d3b      	adds	r3, r7, #4
 8012a66:	4618      	mov	r0, r3
 8012a68:	f7f3 fac9 	bl	8005ffe <FMC_SDRAMCmdConfig>
  
  /* Wait until the SDRAM controller is ready */ 
  while(FMC_GetFlagStatus(FMC_Bank2_SDRAM, FMC_FLAG_Busy) != RESET)
 8012a6c:	bf00      	nop
 8012a6e:	2120      	movs	r1, #32
 8012a70:	2001      	movs	r0, #1
 8012a72:	f7f3 fbbd 	bl	80061f0 <FMC_GetFlagStatus>
 8012a76:	4603      	mov	r3, r0
 8012a78:	2b00      	cmp	r3, #0
 8012a7a:	d1f8      	bne.n	8012a6e <SDRAM_InitSequence+0x8a>
  {
  }
  /* Send the second command */
  FMC_SDRAMCmdConfig(&FMC_SDRAMCommandStructure);
 8012a7c:	1d3b      	adds	r3, r7, #4
 8012a7e:	4618      	mov	r0, r3
 8012a80:	f7f3 fabd 	bl	8005ffe <FMC_SDRAMCmdConfig>
  
/* Step 7 --------------------------------------------------------------------*/
  /* Program the external memory mode register */
  tmpr = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_2          |
 8012a84:	f240 2331 	movw	r3, #561	; 0x231
 8012a88:	617b      	str	r3, [r7, #20]
                   SDRAM_MODEREG_CAS_LATENCY_3           |
                   SDRAM_MODEREG_OPERATING_MODE_STANDARD |
                   SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  /* Configure a load Mode register command*/ 
  FMC_SDRAMCommandStructure.FMC_CommandMode = FMC_Command_Mode_LoadMode;
 8012a8a:	2304      	movs	r3, #4
 8012a8c:	607b      	str	r3, [r7, #4]
  FMC_SDRAMCommandStructure.FMC_CommandTarget = FMC_Command_Target_bank2;
 8012a8e:	2308      	movs	r3, #8
 8012a90:	60bb      	str	r3, [r7, #8]
  FMC_SDRAMCommandStructure.FMC_AutoRefreshNumber = 1;
 8012a92:	2301      	movs	r3, #1
 8012a94:	60fb      	str	r3, [r7, #12]
  FMC_SDRAMCommandStructure.FMC_ModeRegisterDefinition = tmpr;
 8012a96:	697b      	ldr	r3, [r7, #20]
 8012a98:	613b      	str	r3, [r7, #16]
  /* Wait until the SDRAM controller is ready */ 
  while(FMC_GetFlagStatus(FMC_Bank2_SDRAM, FMC_FLAG_Busy) != RESET)
 8012a9a:	bf00      	nop
 8012a9c:	2120      	movs	r1, #32
 8012a9e:	2001      	movs	r0, #1
 8012aa0:	f7f3 fba6 	bl	80061f0 <FMC_GetFlagStatus>
 8012aa4:	4603      	mov	r3, r0
 8012aa6:	2b00      	cmp	r3, #0
 8012aa8:	d1f8      	bne.n	8012a9c <SDRAM_InitSequence+0xb8>
  {
  }
  /* Send the command */
  FMC_SDRAMCmdConfig(&FMC_SDRAMCommandStructure);
 8012aaa:	1d3b      	adds	r3, r7, #4
 8012aac:	4618      	mov	r0, r3
 8012aae:	f7f3 faa6 	bl	8005ffe <FMC_SDRAMCmdConfig>
/* Step 8 --------------------------------------------------------------------*/

  /* Set the refresh rate counter */
  /* (15.62 us x Freq) - 20 */
  /* Set the device refresh counter */
  FMC_SetRefreshCount(1386);
 8012ab2:	f240 506a 	movw	r0, #1386	; 0x56a
 8012ab6:	f7f3 fae1 	bl	800607c <FMC_SetRefreshCount>
  /* Wait until the SDRAM controller is ready */ 
  while(FMC_GetFlagStatus(FMC_Bank2_SDRAM, FMC_FLAG_Busy) != RESET)
 8012aba:	bf00      	nop
 8012abc:	2120      	movs	r1, #32
 8012abe:	2001      	movs	r0, #1
 8012ac0:	f7f3 fb96 	bl	80061f0 <FMC_GetFlagStatus>
 8012ac4:	4603      	mov	r3, r0
 8012ac6:	2b00      	cmp	r3, #0
 8012ac8:	d1f8      	bne.n	8012abc <SDRAM_InitSequence+0xd8>
  {
  }
}
 8012aca:	bf00      	nop
 8012acc:	3718      	adds	r7, #24
 8012ace:	46bd      	mov	sp, r7
 8012ad0:	bd80      	pop	{r7, pc}

08012ad2 <SDRAM_WriteBuffer>:
  *         written.
  * @param  uwBufferSize: number of words to write. 
  * @retval None.
  */
void SDRAM_WriteBuffer(uint32_t* pBuffer, uint32_t uwWriteAddress, uint32_t uwBufferSize)
{
 8012ad2:	b580      	push	{r7, lr}
 8012ad4:	b086      	sub	sp, #24
 8012ad6:	af00      	add	r7, sp, #0
 8012ad8:	60f8      	str	r0, [r7, #12]
 8012ada:	60b9      	str	r1, [r7, #8]
 8012adc:	607a      	str	r2, [r7, #4]
  __IO uint32_t write_pointer = (uint32_t)uwWriteAddress;
 8012ade:	68bb      	ldr	r3, [r7, #8]
 8012ae0:	617b      	str	r3, [r7, #20]

  /* Disable write protection */
  FMC_SDRAMWriteProtectionConfig(FMC_Bank2_SDRAM, DISABLE);
 8012ae2:	2100      	movs	r1, #0
 8012ae4:	2001      	movs	r0, #1
 8012ae6:	f7f3 faf1 	bl	80060cc <FMC_SDRAMWriteProtectionConfig>
  
  /* Wait until the SDRAM controller is ready */ 
  while(FMC_GetFlagStatus(FMC_Bank2_SDRAM, FMC_FLAG_Busy) != RESET)
 8012aea:	bf00      	nop
 8012aec:	2120      	movs	r1, #32
 8012aee:	2001      	movs	r0, #1
 8012af0:	f7f3 fb7e 	bl	80061f0 <FMC_GetFlagStatus>
 8012af4:	4603      	mov	r3, r0
 8012af6:	2b00      	cmp	r3, #0
 8012af8:	d1f8      	bne.n	8012aec <SDRAM_WriteBuffer+0x1a>
  {
  }

  /* While there is data to write */
  for (; uwBufferSize != 0; uwBufferSize--) 
 8012afa:	e00d      	b.n	8012b18 <SDRAM_WriteBuffer+0x46>
  {
    /* Transfer data to the memory */
    *(uint32_t *) (SDRAM_BANK_ADDR + write_pointer) = *pBuffer++;
 8012afc:	68fb      	ldr	r3, [r7, #12]
 8012afe:	1d1a      	adds	r2, r3, #4
 8012b00:	60fa      	str	r2, [r7, #12]
 8012b02:	697a      	ldr	r2, [r7, #20]
 8012b04:	f102 4250 	add.w	r2, r2, #3489660928	; 0xd0000000
 8012b08:	681b      	ldr	r3, [r3, #0]
 8012b0a:	6013      	str	r3, [r2, #0]

    /* Increment the address*/
    write_pointer += 4;
 8012b0c:	697b      	ldr	r3, [r7, #20]
 8012b0e:	3304      	adds	r3, #4
 8012b10:	617b      	str	r3, [r7, #20]
  for (; uwBufferSize != 0; uwBufferSize--) 
 8012b12:	687b      	ldr	r3, [r7, #4]
 8012b14:	3b01      	subs	r3, #1
 8012b16:	607b      	str	r3, [r7, #4]
 8012b18:	687b      	ldr	r3, [r7, #4]
 8012b1a:	2b00      	cmp	r3, #0
 8012b1c:	d1ee      	bne.n	8012afc <SDRAM_WriteBuffer+0x2a>
  }
    
}
 8012b1e:	bf00      	nop
 8012b20:	3718      	adds	r7, #24
 8012b22:	46bd      	mov	sp, r7
 8012b24:	bd80      	pop	{r7, pc}

08012b26 <SDRAM_ReadBuffer>:
  *         read.
  * @param  uwBufferSize: number of words to write. 
  * @retval None.
  */
void SDRAM_ReadBuffer(uint32_t* pBuffer, uint32_t uwReadAddress, uint32_t uwBufferSize)
{
 8012b26:	b580      	push	{r7, lr}
 8012b28:	b086      	sub	sp, #24
 8012b2a:	af00      	add	r7, sp, #0
 8012b2c:	60f8      	str	r0, [r7, #12]
 8012b2e:	60b9      	str	r1, [r7, #8]
 8012b30:	607a      	str	r2, [r7, #4]
  __IO uint32_t write_pointer = (uint32_t)uwReadAddress;
 8012b32:	68bb      	ldr	r3, [r7, #8]
 8012b34:	617b      	str	r3, [r7, #20]
  
   
  /* Wait until the SDRAM controller is ready */ 
  while(FMC_GetFlagStatus(FMC_Bank2_SDRAM, FMC_FLAG_Busy) != RESET)
 8012b36:	bf00      	nop
 8012b38:	2120      	movs	r1, #32
 8012b3a:	2001      	movs	r0, #1
 8012b3c:	f7f3 fb58 	bl	80061f0 <FMC_GetFlagStatus>
 8012b40:	4603      	mov	r3, r0
 8012b42:	2b00      	cmp	r3, #0
 8012b44:	d1f8      	bne.n	8012b38 <SDRAM_ReadBuffer+0x12>
  {
  }
  
  /* Read data */
  for(; uwBufferSize != 0x00; uwBufferSize--)
 8012b46:	e00e      	b.n	8012b66 <SDRAM_ReadBuffer+0x40>
  {
   *pBuffer++ = *(__IO uint32_t *)(SDRAM_BANK_ADDR + write_pointer );
 8012b48:	697b      	ldr	r3, [r7, #20]
 8012b4a:	f103 4350 	add.w	r3, r3, #3489660928	; 0xd0000000
 8012b4e:	4619      	mov	r1, r3
 8012b50:	68fb      	ldr	r3, [r7, #12]
 8012b52:	1d1a      	adds	r2, r3, #4
 8012b54:	60fa      	str	r2, [r7, #12]
 8012b56:	680a      	ldr	r2, [r1, #0]
 8012b58:	601a      	str	r2, [r3, #0]
    
   /* Increment the address*/
    write_pointer += 4;
 8012b5a:	697b      	ldr	r3, [r7, #20]
 8012b5c:	3304      	adds	r3, #4
 8012b5e:	617b      	str	r3, [r7, #20]
  for(; uwBufferSize != 0x00; uwBufferSize--)
 8012b60:	687b      	ldr	r3, [r7, #4]
 8012b62:	3b01      	subs	r3, #1
 8012b64:	607b      	str	r3, [r7, #4]
 8012b66:	687b      	ldr	r3, [r7, #4]
 8012b68:	2b00      	cmp	r3, #0
 8012b6a:	d1ed      	bne.n	8012b48 <SDRAM_ReadBuffer+0x22>
  } 
}
 8012b6c:	bf00      	nop
 8012b6e:	3718      	adds	r7, #24
 8012b70:	46bd      	mov	sp, r7
 8012b72:	bd80      	pop	{r7, pc}

08012b74 <delay>:
  * @brief  Inserts a delay time.
  * @param  nCount: specifies the delay time length.
  * @retval None
  */
static void delay(__IO uint32_t nCount)
{
 8012b74:	b480      	push	{r7}
 8012b76:	b085      	sub	sp, #20
 8012b78:	af00      	add	r7, sp, #0
 8012b7a:	6078      	str	r0, [r7, #4]
  __IO uint32_t index = 0; 
 8012b7c:	2300      	movs	r3, #0
 8012b7e:	60fb      	str	r3, [r7, #12]
  for(index = (100000 * nCount); index != 0; index--)
 8012b80:	687b      	ldr	r3, [r7, #4]
 8012b82:	4a08      	ldr	r2, [pc, #32]	; (8012ba4 <delay+0x30>)
 8012b84:	fb02 f303 	mul.w	r3, r2, r3
 8012b88:	60fb      	str	r3, [r7, #12]
 8012b8a:	e002      	b.n	8012b92 <delay+0x1e>
 8012b8c:	68fb      	ldr	r3, [r7, #12]
 8012b8e:	3b01      	subs	r3, #1
 8012b90:	60fb      	str	r3, [r7, #12]
 8012b92:	68fb      	ldr	r3, [r7, #12]
 8012b94:	2b00      	cmp	r3, #0
 8012b96:	d1f9      	bne.n	8012b8c <delay+0x18>
  {
  }
}
 8012b98:	bf00      	nop
 8012b9a:	3714      	adds	r7, #20
 8012b9c:	46bd      	mov	sp, r7
 8012b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ba2:	4770      	bx	lr
 8012ba4:	000186a0 	.word	0x000186a0

08012ba8 <USB_OTG_BSP_Init>:
  *         Initilizes BSP configurations
  * @param  None
  * @retval None
  */

void USB_OTG_BSP_Init(USB_OTG_CORE_HANDLE *pdev) {
 8012ba8:	b580      	push	{r7, lr}
 8012baa:	b084      	sub	sp, #16
 8012bac:	af00      	add	r7, sp, #0
 8012bae:	6078      	str	r0, [r7, #4]
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
	RCC_AHB2PeriphClockCmd(RCC_AHB2Periph_OTG_FS, ENABLE) ;
	
#else //USE_USB_OTG_HS

	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB , ENABLE);
 8012bb0:	2101      	movs	r1, #1
 8012bb2:	2002      	movs	r0, #2
 8012bb4:	f7f5 feb4 	bl	8008920 <RCC_AHB1PeriphClockCmd>

	/* Configure SOF VBUS ID DM DP Pins */  
	GPIO_InitStructure.GPIO_Pin = 	GPIO_Pin_14 |	// Data -
 8012bb8:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8012bbc:	60bb      	str	r3, [r7, #8]
									GPIO_Pin_15;	// Data +

	#ifndef USB_HID_HOST_DISABLE_ID
	GPIO_InitStructure.GPIO_Pin |= GPIO_Pin_12;
 8012bbe:	68bb      	ldr	r3, [r7, #8]
 8012bc0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8012bc4:	60bb      	str	r3, [r7, #8]
	#endif

	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 8012bc6:	2303      	movs	r3, #3
 8012bc8:	737b      	strb	r3, [r7, #13]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8012bca:	2302      	movs	r3, #2
 8012bcc:	733b      	strb	r3, [r7, #12]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
 8012bce:	2301      	movs	r3, #1
 8012bd0:	73bb      	strb	r3, [r7, #14]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP; 
 8012bd2:	2301      	movs	r3, #1
 8012bd4:	73fb      	strb	r3, [r7, #15]
	GPIO_Init(GPIOB, &GPIO_InitStructure);  
 8012bd6:	f107 0308 	add.w	r3, r7, #8
 8012bda:	4619      	mov	r1, r3
 8012bdc:	4813      	ldr	r0, [pc, #76]	; (8012c2c <USB_OTG_BSP_Init+0x84>)
 8012bde:	f7f3 fccf 	bl	8006580 <GPIO_Init>

	#ifndef USB_HID_HOST_DISABLE_ID
	GPIO_PinAFConfig(GPIOB,GPIO_PinSource12, GPIO_AF_OTG2_FS);
 8012be2:	220c      	movs	r2, #12
 8012be4:	210c      	movs	r1, #12
 8012be6:	4811      	ldr	r0, [pc, #68]	; (8012c2c <USB_OTG_BSP_Init+0x84>)
 8012be8:	f7f3 fe39 	bl	800685e <GPIO_PinAFConfig>
	#endif
	
	GPIO_PinAFConfig(GPIOB,GPIO_PinSource14, GPIO_AF_OTG2_FS); 
 8012bec:	220c      	movs	r2, #12
 8012bee:	210e      	movs	r1, #14
 8012bf0:	480e      	ldr	r0, [pc, #56]	; (8012c2c <USB_OTG_BSP_Init+0x84>)
 8012bf2:	f7f3 fe34 	bl	800685e <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIOB,GPIO_PinSource15, GPIO_AF_OTG2_FS);   
 8012bf6:	220c      	movs	r2, #12
 8012bf8:	210f      	movs	r1, #15
 8012bfa:	480c      	ldr	r0, [pc, #48]	; (8012c2c <USB_OTG_BSP_Init+0x84>)
 8012bfc:	f7f3 fe2f 	bl	800685e <GPIO_PinAFConfig>
	
	/* VBUS */
	#ifndef USB_HID_HOST_DISABLE_VBUS
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_13;
 8012c00:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8012c04:	60bb      	str	r3, [r7, #8]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 8012c06:	2303      	movs	r3, #3
 8012c08:	737b      	strb	r3, [r7, #13]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 8012c0a:	2300      	movs	r3, #0
 8012c0c:	733b      	strb	r3, [r7, #12]
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 8012c0e:	f107 0308 	add.w	r3, r7, #8
 8012c12:	4619      	mov	r1, r3
 8012c14:	4805      	ldr	r0, [pc, #20]	; (8012c2c <USB_OTG_BSP_Init+0x84>)
 8012c16:	f7f3 fcb3 	bl	8006580 <GPIO_Init>
	#endif

	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_OTG_HS, ENABLE);  
 8012c1a:	2101      	movs	r1, #1
 8012c1c:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 8012c20:	f7f5 fe7e 	bl	8008920 <RCC_AHB1PeriphClockCmd>

#endif //USB_OTG_HS
}
 8012c24:	bf00      	nop
 8012c26:	3710      	adds	r7, #16
 8012c28:	46bd      	mov	sp, r7
 8012c2a:	bd80      	pop	{r7, pc}
 8012c2c:	40020400 	.word	0x40020400

08012c30 <USB_OTG_BSP_EnableInterrupt>:
  *         Configures USB Global interrupt
  * @param  None
  * @retval None
  */
void USB_OTG_BSP_EnableInterrupt(USB_OTG_CORE_HANDLE *pdev)
{
 8012c30:	b580      	push	{r7, lr}
 8012c32:	b084      	sub	sp, #16
 8012c34:	af00      	add	r7, sp, #0
 8012c36:	6078      	str	r0, [r7, #4]
  NVIC_InitTypeDef NVIC_InitStructure; 
  
  NVIC_PriorityGroupConfig(NVIC_PriorityGroup_1);
 8012c38:	f44f 60c0 	mov.w	r0, #1536	; 0x600
 8012c3c:	f7ee fd26 	bl	800168c <NVIC_PriorityGroupConfig>
#ifdef USE_USB_OTG_HS   
  NVIC_InitStructure.NVIC_IRQChannel = OTG_HS_IRQn;
 8012c40:	234d      	movs	r3, #77	; 0x4d
 8012c42:	733b      	strb	r3, [r7, #12]
#else
  NVIC_InitStructure.NVIC_IRQChannel = OTG_FS_IRQn;  
#endif
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = USB_HID_HOST_NVIC_PRIORITY;
 8012c44:	2301      	movs	r3, #1
 8012c46:	737b      	strb	r3, [r7, #13]
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = USB_HID_HOST_NVIC_SUBPRIORITY;
 8012c48:	2303      	movs	r3, #3
 8012c4a:	73bb      	strb	r3, [r7, #14]
  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8012c4c:	2301      	movs	r3, #1
 8012c4e:	73fb      	strb	r3, [r7, #15]
  NVIC_Init(&NVIC_InitStructure);
 8012c50:	f107 030c 	add.w	r3, r7, #12
 8012c54:	4618      	mov	r0, r3
 8012c56:	f7ee fd2d 	bl	80016b4 <NVIC_Init>
}
 8012c5a:	bf00      	nop
 8012c5c:	3710      	adds	r7, #16
 8012c5e:	46bd      	mov	sp, r7
 8012c60:	bd80      	pop	{r7, pc}

08012c62 <USB_OTG_BSP_DriveVBUS>:
  *         Drives the Vbus signal through IO
  * @param  state : VBUS states
  * @retval None
  */

void USB_OTG_BSP_DriveVBUS(USB_OTG_CORE_HANDLE *pdev, uint8_t state) {
 8012c62:	b580      	push	{r7, lr}
 8012c64:	b082      	sub	sp, #8
 8012c66:	af00      	add	r7, sp, #0
 8012c68:	6078      	str	r0, [r7, #4]
 8012c6a:	460b      	mov	r3, r1
 8012c6c:	70fb      	strb	r3, [r7, #3]
#ifndef USB_HID_HOST_DISABLE_VBUS
	if (0 == state) { 
 8012c6e:	78fb      	ldrb	r3, [r7, #3]
 8012c70:	2b00      	cmp	r3, #0
 8012c72:	d104      	bne.n	8012c7e <USB_OTG_BSP_DriveVBUS+0x1c>
		/* DISABLE is needed on output of the Power Switch */
		GPIO_SetBits(HOST_POWERSW_PORT, HOST_POWERSW_VBUS);
 8012c74:	2110      	movs	r1, #16
 8012c76:	4806      	ldr	r0, [pc, #24]	; (8012c90 <USB_OTG_BSP_DriveVBUS+0x2e>)
 8012c78:	f7f3 fd9a 	bl	80067b0 <GPIO_SetBits>
	} else {
		/* ENABLE the Power Switch by driving the Enable LOW */
		GPIO_ResetBits(HOST_POWERSW_PORT, HOST_POWERSW_VBUS);
	}
#endif
}
 8012c7c:	e003      	b.n	8012c86 <USB_OTG_BSP_DriveVBUS+0x24>
		GPIO_ResetBits(HOST_POWERSW_PORT, HOST_POWERSW_VBUS);
 8012c7e:	2110      	movs	r1, #16
 8012c80:	4803      	ldr	r0, [pc, #12]	; (8012c90 <USB_OTG_BSP_DriveVBUS+0x2e>)
 8012c82:	f7f3 fda4 	bl	80067ce <GPIO_ResetBits>
}
 8012c86:	bf00      	nop
 8012c88:	3708      	adds	r7, #8
 8012c8a:	46bd      	mov	sp, r7
 8012c8c:	bd80      	pop	{r7, pc}
 8012c8e:	bf00      	nop
 8012c90:	40020800 	.word	0x40020800

08012c94 <USB_OTG_BSP_ConfigVBUS>:
  *         Configures the IO for the Vbus and OverCurrent
  * @param  None
  * @retval None
  */

void  USB_OTG_BSP_ConfigVBUS(USB_OTG_CORE_HANDLE *pdev) {
 8012c94:	b580      	push	{r7, lr}
 8012c96:	b084      	sub	sp, #16
 8012c98:	af00      	add	r7, sp, #0
 8012c9a:	6078      	str	r0, [r7, #4]
#ifndef USB_HID_HOST_DISABLE_VBUS
	GPIO_InitTypeDef GPIO_InitStructure; 

	RCC_AHB1PeriphClockCmd(HOST_POWERSW_PORT_RCC, ENABLE);  
 8012c9c:	2101      	movs	r1, #1
 8012c9e:	2004      	movs	r0, #4
 8012ca0:	f7f5 fe3e 	bl	8008920 <RCC_AHB1PeriphClockCmd>

	GPIO_InitStructure.GPIO_Pin = HOST_POWERSW_VBUS;
 8012ca4:	2310      	movs	r3, #16
 8012ca6:	60bb      	str	r3, [r7, #8]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 8012ca8:	2303      	movs	r3, #3
 8012caa:	737b      	strb	r3, [r7, #13]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8012cac:	2301      	movs	r3, #1
 8012cae:	733b      	strb	r3, [r7, #12]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8012cb0:	2300      	movs	r3, #0
 8012cb2:	73bb      	strb	r3, [r7, #14]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL ;
 8012cb4:	2300      	movs	r3, #0
 8012cb6:	73fb      	strb	r3, [r7, #15]
	GPIO_Init(HOST_POWERSW_PORT,&GPIO_InitStructure);
 8012cb8:	f107 0308 	add.w	r3, r7, #8
 8012cbc:	4619      	mov	r1, r3
 8012cbe:	4807      	ldr	r0, [pc, #28]	; (8012cdc <USB_OTG_BSP_ConfigVBUS+0x48>)
 8012cc0:	f7f3 fc5e 	bl	8006580 <GPIO_Init>

	/* By Default, DISABLE is needed on output of the Power Switch */
	GPIO_SetBits(HOST_POWERSW_PORT, HOST_POWERSW_VBUS);
 8012cc4:	2110      	movs	r1, #16
 8012cc6:	4805      	ldr	r0, [pc, #20]	; (8012cdc <USB_OTG_BSP_ConfigVBUS+0x48>)
 8012cc8:	f7f3 fd72 	bl	80067b0 <GPIO_SetBits>

	USB_OTG_BSP_mDelay(200);   /* Delay is need for stabilising the Vbus Low 
 8012ccc:	20c8      	movs	r0, #200	; 0xc8
 8012cce:	f000 f82b 	bl	8012d28 <USB_OTG_BSP_mDelay>
	in Reset Condition, when Vbus=1 and Reset-button is pressed by user */
#endif
}
 8012cd2:	bf00      	nop
 8012cd4:	3710      	adds	r7, #16
 8012cd6:	46bd      	mov	sp, r7
 8012cd8:	bd80      	pop	{r7, pc}
 8012cda:	bf00      	nop
 8012cdc:	40020800 	.word	0x40020800

08012ce0 <USB_OTG_BSP_uDelay>:
  * @brief  USB_OTG_BSP_uDelay
  *         This function provides delay time in micro sec
  * @param  usec : Value of delay required in micro sec
  * @retval None
  */
void USB_OTG_BSP_uDelay (const uint32_t usec) {
 8012ce0:	b480      	push	{r7}
 8012ce2:	b085      	sub	sp, #20
 8012ce4:	af00      	add	r7, sp, #0
 8012ce6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0;
 8012ce8:	2300      	movs	r3, #0
 8012cea:	60bb      	str	r3, [r7, #8]
  const uint32_t utime = (120 * usec / 7);
 8012cec:	687a      	ldr	r2, [r7, #4]
 8012cee:	4613      	mov	r3, r2
 8012cf0:	011b      	lsls	r3, r3, #4
 8012cf2:	1a9b      	subs	r3, r3, r2
 8012cf4:	00db      	lsls	r3, r3, #3
 8012cf6:	461a      	mov	r2, r3
 8012cf8:	4b0a      	ldr	r3, [pc, #40]	; (8012d24 <USB_OTG_BSP_uDelay+0x44>)
 8012cfa:	fba3 1302 	umull	r1, r3, r3, r2
 8012cfe:	1ad2      	subs	r2, r2, r3
 8012d00:	0852      	lsrs	r2, r2, #1
 8012d02:	4413      	add	r3, r2
 8012d04:	089b      	lsrs	r3, r3, #2
 8012d06:	60fb      	str	r3, [r7, #12]
  do
  {
    if ( ++count > utime )
 8012d08:	68bb      	ldr	r3, [r7, #8]
 8012d0a:	3301      	adds	r3, #1
 8012d0c:	60bb      	str	r3, [r7, #8]
 8012d0e:	68fa      	ldr	r2, [r7, #12]
 8012d10:	429a      	cmp	r2, r3
 8012d12:	d300      	bcc.n	8012d16 <USB_OTG_BSP_uDelay+0x36>
 8012d14:	e7f8      	b.n	8012d08 <USB_OTG_BSP_uDelay+0x28>
    {
      return ;
 8012d16:	bf00      	nop
    }
  }
  while (1);  
}
 8012d18:	3714      	adds	r7, #20
 8012d1a:	46bd      	mov	sp, r7
 8012d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d20:	4770      	bx	lr
 8012d22:	bf00      	nop
 8012d24:	24924925 	.word	0x24924925

08012d28 <USB_OTG_BSP_mDelay>:
  * @brief  USB_OTG_BSP_mDelay
  *          This function provides delay time in milli sec
  * @param  msec : Value of delay required in milli sec
  * @retval None
  */
void USB_OTG_BSP_mDelay (const uint32_t msec) { 
 8012d28:	b580      	push	{r7, lr}
 8012d2a:	b082      	sub	sp, #8
 8012d2c:	af00      	add	r7, sp, #0
 8012d2e:	6078      	str	r0, [r7, #4]
    USB_OTG_BSP_uDelay(msec * 1000);
 8012d30:	687b      	ldr	r3, [r7, #4]
 8012d32:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8012d36:	fb02 f303 	mul.w	r3, r2, r3
 8012d3a:	4618      	mov	r0, r3
 8012d3c:	f7ff ffd0 	bl	8012ce0 <USB_OTG_BSP_uDelay>
}
 8012d40:	bf00      	nop
 8012d42:	3708      	adds	r7, #8
 8012d44:	46bd      	mov	sp, r7
 8012d46:	bd80      	pop	{r7, pc}

08012d48 <OTG_HS_IRQHandler>:


#ifdef USE_USB_OTG_FS
void OTG_FS_IRQHandler(void) {
#else
void OTG_HS_IRQHandler(void) {	
 8012d48:	b580      	push	{r7, lr}
 8012d4a:	af00      	add	r7, sp, #0
#endif
	USBH_OTG_ISR_Handler(&USB_OTG_Core);
 8012d4c:	4802      	ldr	r0, [pc, #8]	; (8012d58 <OTG_HS_IRQHandler+0x10>)
 8012d4e:	f001 f937 	bl	8013fc0 <USBH_OTG_ISR_Handler>
}
 8012d52:	bf00      	nop
 8012d54:	bd80      	pop	{r7, pc}
 8012d56:	bf00      	nop
 8012d58:	20002e34 	.word	0x20002e34

08012d5c <USB_OTG_EnableCommonInt>:
*         Initializes the commmon interrupts, used in both device and modes
* @param  pdev : Selected device
* @retval None
*/
static void USB_OTG_EnableCommonInt(USB_OTG_CORE_HANDLE *pdev)
{
 8012d5c:	b480      	push	{r7}
 8012d5e:	b085      	sub	sp, #20
 8012d60:	af00      	add	r7, sp, #0
 8012d62:	6078      	str	r0, [r7, #4]
  USB_OTG_GINTMSK_TypeDef  int_mask;
  
  int_mask.d32 = 0;
 8012d64:	2300      	movs	r3, #0
 8012d66:	60fb      	str	r3, [r7, #12]
  /* Clear any pending USB_OTG Interrupts */
#ifndef USE_OTG_MODE
  USB_OTG_WRITE_REG32( &pdev->regs.GREGS->GOTGINT, 0xFFFFFFFF);
 8012d68:	687b      	ldr	r3, [r7, #4]
 8012d6a:	68db      	ldr	r3, [r3, #12]
 8012d6c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012d70:	605a      	str	r2, [r3, #4]
#endif
  /* Clear any pending interrupts */
  USB_OTG_WRITE_REG32( &pdev->regs.GREGS->GINTSTS, 0xBFFFFFFF);
 8012d72:	687b      	ldr	r3, [r7, #4]
 8012d74:	68db      	ldr	r3, [r3, #12]
 8012d76:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8012d7a:	615a      	str	r2, [r3, #20]
  /* Enable the interrupts in the INTMSK */
  int_mask.b.wkupintr = 1;
 8012d7c:	7bfb      	ldrb	r3, [r7, #15]
 8012d7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012d82:	73fb      	strb	r3, [r7, #15]
  int_mask.b.usbsuspend = 1; 
 8012d84:	7b7b      	ldrb	r3, [r7, #13]
 8012d86:	f043 0308 	orr.w	r3, r3, #8
 8012d8a:	737b      	strb	r3, [r7, #13]
#ifdef USE_OTG_MODE
  int_mask.b.otgintr = 1;
  int_mask.b.sessreqintr = 1;
  int_mask.b.conidstschng = 1;
#endif
  USB_OTG_WRITE_REG32( &pdev->regs.GREGS->GINTMSK, int_mask.d32);
 8012d8c:	687b      	ldr	r3, [r7, #4]
 8012d8e:	68db      	ldr	r3, [r3, #12]
 8012d90:	68fa      	ldr	r2, [r7, #12]
 8012d92:	619a      	str	r2, [r3, #24]
}
 8012d94:	bf00      	nop
 8012d96:	3714      	adds	r7, #20
 8012d98:	46bd      	mov	sp, r7
 8012d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d9e:	4770      	bx	lr

08012da0 <USB_OTG_CoreReset>:
* @brief  USB_OTG_CoreReset : Soft reset of the core
* @param  pdev : Selected device
* @retval USB_OTG_STS : status
*/
static USB_OTG_STS USB_OTG_CoreReset(USB_OTG_CORE_HANDLE *pdev)
{
 8012da0:	b580      	push	{r7, lr}
 8012da2:	b086      	sub	sp, #24
 8012da4:	af00      	add	r7, sp, #0
 8012da6:	6078      	str	r0, [r7, #4]
  USB_OTG_STS status = USB_OTG_OK;
 8012da8:	2300      	movs	r3, #0
 8012daa:	74fb      	strb	r3, [r7, #19]
  __IO USB_OTG_GRSTCTL_TypeDef  greset;
  uint32_t count = 0;
 8012dac:	2300      	movs	r3, #0
 8012dae:	617b      	str	r3, [r7, #20]
  
  greset.d32 = 0;
 8012db0:	2300      	movs	r3, #0
 8012db2:	60fb      	str	r3, [r7, #12]
  /* Wait for AHB master IDLE state. */
  do
  {
    USB_OTG_BSP_uDelay(3);
 8012db4:	2003      	movs	r0, #3
 8012db6:	f7ff ff93 	bl	8012ce0 <USB_OTG_BSP_uDelay>
    greset.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GRSTCTL);
 8012dba:	687b      	ldr	r3, [r7, #4]
 8012dbc:	68db      	ldr	r3, [r3, #12]
 8012dbe:	691b      	ldr	r3, [r3, #16]
 8012dc0:	60fb      	str	r3, [r7, #12]
    if (++count > 200000)
 8012dc2:	697b      	ldr	r3, [r7, #20]
 8012dc4:	3301      	adds	r3, #1
 8012dc6:	617b      	str	r3, [r7, #20]
 8012dc8:	697b      	ldr	r3, [r7, #20]
 8012dca:	4a18      	ldr	r2, [pc, #96]	; (8012e2c <USB_OTG_CoreReset+0x8c>)
 8012dcc:	4293      	cmp	r3, r2
 8012dce:	d901      	bls.n	8012dd4 <USB_OTG_CoreReset+0x34>
    {
      return USB_OTG_OK;
 8012dd0:	2300      	movs	r3, #0
 8012dd2:	e026      	b.n	8012e22 <USB_OTG_CoreReset+0x82>
    }
  }
  while (greset.b.ahbidle == 0);
 8012dd4:	68fb      	ldr	r3, [r7, #12]
 8012dd6:	f3c3 73c0 	ubfx	r3, r3, #31, #1
 8012dda:	b2db      	uxtb	r3, r3
 8012ddc:	2b00      	cmp	r3, #0
 8012dde:	d0e9      	beq.n	8012db4 <USB_OTG_CoreReset+0x14>
  /* Core Soft Reset */
  count = 0;
 8012de0:	2300      	movs	r3, #0
 8012de2:	617b      	str	r3, [r7, #20]
  greset.b.csftrst = 1;
 8012de4:	68fb      	ldr	r3, [r7, #12]
 8012de6:	f043 0301 	orr.w	r3, r3, #1
 8012dea:	60fb      	str	r3, [r7, #12]
  USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GRSTCTL, greset.d32 );
 8012dec:	687b      	ldr	r3, [r7, #4]
 8012dee:	68db      	ldr	r3, [r3, #12]
 8012df0:	68fa      	ldr	r2, [r7, #12]
 8012df2:	611a      	str	r2, [r3, #16]
  do
  {
    greset.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GRSTCTL);
 8012df4:	687b      	ldr	r3, [r7, #4]
 8012df6:	68db      	ldr	r3, [r3, #12]
 8012df8:	691b      	ldr	r3, [r3, #16]
 8012dfa:	60fb      	str	r3, [r7, #12]
    if (++count > 200000)
 8012dfc:	697b      	ldr	r3, [r7, #20]
 8012dfe:	3301      	adds	r3, #1
 8012e00:	617b      	str	r3, [r7, #20]
 8012e02:	697b      	ldr	r3, [r7, #20]
 8012e04:	4a09      	ldr	r2, [pc, #36]	; (8012e2c <USB_OTG_CoreReset+0x8c>)
 8012e06:	4293      	cmp	r3, r2
 8012e08:	d806      	bhi.n	8012e18 <USB_OTG_CoreReset+0x78>
    {
      break;
    }
  }
  while (greset.b.csftrst == 1);
 8012e0a:	68fb      	ldr	r3, [r7, #12]
 8012e0c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8012e10:	b2db      	uxtb	r3, r3
 8012e12:	2b01      	cmp	r3, #1
 8012e14:	d0ee      	beq.n	8012df4 <USB_OTG_CoreReset+0x54>
 8012e16:	e000      	b.n	8012e1a <USB_OTG_CoreReset+0x7a>
      break;
 8012e18:	bf00      	nop
  /* Wait for 3 PHY Clocks*/
  USB_OTG_BSP_uDelay(3);
 8012e1a:	2003      	movs	r0, #3
 8012e1c:	f7ff ff60 	bl	8012ce0 <USB_OTG_BSP_uDelay>
  return status;
 8012e20:	7cfb      	ldrb	r3, [r7, #19]
}
 8012e22:	4618      	mov	r0, r3
 8012e24:	3718      	adds	r7, #24
 8012e26:	46bd      	mov	sp, r7
 8012e28:	bd80      	pop	{r7, pc}
 8012e2a:	bf00      	nop
 8012e2c:	00030d40 	.word	0x00030d40

08012e30 <USB_OTG_WritePacket>:
*/
USB_OTG_STS USB_OTG_WritePacket(USB_OTG_CORE_HANDLE *pdev, 
                                uint8_t             *src, 
                                uint8_t             ch_ep_num, 
                                uint16_t            len)
{
 8012e30:	b480      	push	{r7}
 8012e32:	b089      	sub	sp, #36	; 0x24
 8012e34:	af00      	add	r7, sp, #0
 8012e36:	60f8      	str	r0, [r7, #12]
 8012e38:	60b9      	str	r1, [r7, #8]
 8012e3a:	4611      	mov	r1, r2
 8012e3c:	461a      	mov	r2, r3
 8012e3e:	460b      	mov	r3, r1
 8012e40:	71fb      	strb	r3, [r7, #7]
 8012e42:	4613      	mov	r3, r2
 8012e44:	80bb      	strh	r3, [r7, #4]
  USB_OTG_STS status = USB_OTG_OK;
 8012e46:	2300      	movs	r3, #0
 8012e48:	76fb      	strb	r3, [r7, #27]
  if (pdev->cfg.dma_enable == 0)
 8012e4a:	68fb      	ldr	r3, [r7, #12]
 8012e4c:	78db      	ldrb	r3, [r3, #3]
 8012e4e:	2b00      	cmp	r3, #0
 8012e50:	d122      	bne.n	8012e98 <USB_OTG_WritePacket+0x68>
  {
    uint32_t count32b= 0 , i= 0;
 8012e52:	2300      	movs	r3, #0
 8012e54:	617b      	str	r3, [r7, #20]
 8012e56:	2300      	movs	r3, #0
 8012e58:	61fb      	str	r3, [r7, #28]
    __IO uint32_t *fifo;
    
    count32b =  (len + 3) / 4;
 8012e5a:	88bb      	ldrh	r3, [r7, #4]
 8012e5c:	3303      	adds	r3, #3
 8012e5e:	2b00      	cmp	r3, #0
 8012e60:	da00      	bge.n	8012e64 <USB_OTG_WritePacket+0x34>
 8012e62:	3303      	adds	r3, #3
 8012e64:	109b      	asrs	r3, r3, #2
 8012e66:	617b      	str	r3, [r7, #20]
    fifo = pdev->regs.DFIFO[ch_ep_num];
 8012e68:	79fb      	ldrb	r3, [r7, #7]
 8012e6a:	68fa      	ldr	r2, [r7, #12]
 8012e6c:	3332      	adds	r3, #50	; 0x32
 8012e6e:	009b      	lsls	r3, r3, #2
 8012e70:	4413      	add	r3, r2
 8012e72:	689b      	ldr	r3, [r3, #8]
 8012e74:	613b      	str	r3, [r7, #16]
    for (i = 0; i < count32b; i++, src+=4)
 8012e76:	2300      	movs	r3, #0
 8012e78:	61fb      	str	r3, [r7, #28]
 8012e7a:	e009      	b.n	8012e90 <USB_OTG_WritePacket+0x60>
    {
      USB_OTG_WRITE_REG32( fifo, *((__packed uint32_t *)src) );
 8012e7c:	68bb      	ldr	r3, [r7, #8]
 8012e7e:	681a      	ldr	r2, [r3, #0]
 8012e80:	693b      	ldr	r3, [r7, #16]
 8012e82:	601a      	str	r2, [r3, #0]
    for (i = 0; i < count32b; i++, src+=4)
 8012e84:	69fb      	ldr	r3, [r7, #28]
 8012e86:	3301      	adds	r3, #1
 8012e88:	61fb      	str	r3, [r7, #28]
 8012e8a:	68bb      	ldr	r3, [r7, #8]
 8012e8c:	3304      	adds	r3, #4
 8012e8e:	60bb      	str	r3, [r7, #8]
 8012e90:	69fa      	ldr	r2, [r7, #28]
 8012e92:	697b      	ldr	r3, [r7, #20]
 8012e94:	429a      	cmp	r2, r3
 8012e96:	d3f1      	bcc.n	8012e7c <USB_OTG_WritePacket+0x4c>
    }
  }
  return status;
 8012e98:	7efb      	ldrb	r3, [r7, #27]
}
 8012e9a:	4618      	mov	r0, r3
 8012e9c:	3724      	adds	r7, #36	; 0x24
 8012e9e:	46bd      	mov	sp, r7
 8012ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ea4:	4770      	bx	lr

08012ea6 <USB_OTG_ReadPacket>:
* @retval None
*/
void *USB_OTG_ReadPacket(USB_OTG_CORE_HANDLE *pdev, 
                         uint8_t *dest, 
                         uint16_t len)
{
 8012ea6:	b480      	push	{r7}
 8012ea8:	b089      	sub	sp, #36	; 0x24
 8012eaa:	af00      	add	r7, sp, #0
 8012eac:	60f8      	str	r0, [r7, #12]
 8012eae:	60b9      	str	r1, [r7, #8]
 8012eb0:	4613      	mov	r3, r2
 8012eb2:	80fb      	strh	r3, [r7, #6]
  uint32_t i=0;
 8012eb4:	2300      	movs	r3, #0
 8012eb6:	61fb      	str	r3, [r7, #28]
  uint32_t count32b = (len + 3) / 4;
 8012eb8:	88fb      	ldrh	r3, [r7, #6]
 8012eba:	3303      	adds	r3, #3
 8012ebc:	2b00      	cmp	r3, #0
 8012ebe:	da00      	bge.n	8012ec2 <USB_OTG_ReadPacket+0x1c>
 8012ec0:	3303      	adds	r3, #3
 8012ec2:	109b      	asrs	r3, r3, #2
 8012ec4:	61bb      	str	r3, [r7, #24]
  
  __IO uint32_t *fifo = pdev->regs.DFIFO[0];
 8012ec6:	68fb      	ldr	r3, [r7, #12]
 8012ec8:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8012ecc:	617b      	str	r3, [r7, #20]
  
  for ( i = 0; i < count32b; i++, dest += 4 )
 8012ece:	2300      	movs	r3, #0
 8012ed0:	61fb      	str	r3, [r7, #28]
 8012ed2:	e009      	b.n	8012ee8 <USB_OTG_ReadPacket+0x42>
  {
    *(__packed uint32_t *)dest = USB_OTG_READ_REG32(fifo);
 8012ed4:	697b      	ldr	r3, [r7, #20]
 8012ed6:	681a      	ldr	r2, [r3, #0]
 8012ed8:	68bb      	ldr	r3, [r7, #8]
 8012eda:	601a      	str	r2, [r3, #0]
  for ( i = 0; i < count32b; i++, dest += 4 )
 8012edc:	69fb      	ldr	r3, [r7, #28]
 8012ede:	3301      	adds	r3, #1
 8012ee0:	61fb      	str	r3, [r7, #28]
 8012ee2:	68bb      	ldr	r3, [r7, #8]
 8012ee4:	3304      	adds	r3, #4
 8012ee6:	60bb      	str	r3, [r7, #8]
 8012ee8:	69fa      	ldr	r2, [r7, #28]
 8012eea:	69bb      	ldr	r3, [r7, #24]
 8012eec:	429a      	cmp	r2, r3
 8012eee:	d3f1      	bcc.n	8012ed4 <USB_OTG_ReadPacket+0x2e>
    
  }
  return ((void *)dest);
 8012ef0:	68bb      	ldr	r3, [r7, #8]
}
 8012ef2:	4618      	mov	r0, r3
 8012ef4:	3724      	adds	r7, #36	; 0x24
 8012ef6:	46bd      	mov	sp, r7
 8012ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012efc:	4770      	bx	lr

08012efe <USB_OTG_SelectCore>:
* @param  coreID : USB OTG Core ID
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_SelectCore(USB_OTG_CORE_HANDLE *pdev, 
                               USB_OTG_CORE_ID_TypeDef coreID)
{
 8012efe:	b480      	push	{r7}
 8012f00:	b087      	sub	sp, #28
 8012f02:	af00      	add	r7, sp, #0
 8012f04:	6078      	str	r0, [r7, #4]
 8012f06:	460b      	mov	r3, r1
 8012f08:	70fb      	strb	r3, [r7, #3]
  uint32_t i , baseAddress = 0;
 8012f0a:	2300      	movs	r3, #0
 8012f0c:	613b      	str	r3, [r7, #16]
  USB_OTG_STS status = USB_OTG_OK;
 8012f0e:	2300      	movs	r3, #0
 8012f10:	73fb      	strb	r3, [r7, #15]
  
  pdev->cfg.dma_enable       = 0;
 8012f12:	687b      	ldr	r3, [r7, #4]
 8012f14:	2200      	movs	r2, #0
 8012f16:	70da      	strb	r2, [r3, #3]
  
  /* at startup the core is in FS mode */
  pdev->cfg.speed            = USB_OTG_SPEED_FULL;
 8012f18:	687b      	ldr	r3, [r7, #4]
 8012f1a:	2201      	movs	r2, #1
 8012f1c:	709a      	strb	r2, [r3, #2]
  pdev->cfg.mps              = USB_OTG_FS_MAX_PACKET_SIZE ;    
 8012f1e:	687b      	ldr	r3, [r7, #4]
 8012f20:	2240      	movs	r2, #64	; 0x40
 8012f22:	809a      	strh	r2, [r3, #4]
  
  /* initialize device cfg following its address */
  if (coreID == USB_OTG_FS_CORE_ID)
 8012f24:	78fb      	ldrb	r3, [r7, #3]
 8012f26:	2b01      	cmp	r3, #1
 8012f28:	d113      	bne.n	8012f52 <USB_OTG_SelectCore+0x54>
  {
    baseAddress                = USB_OTG_FS_BASE_ADDR;
 8012f2a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8012f2e:	613b      	str	r3, [r7, #16]
    pdev->cfg.coreID           = USB_OTG_FS_CORE_ID;
 8012f30:	687b      	ldr	r3, [r7, #4]
 8012f32:	2201      	movs	r2, #1
 8012f34:	72da      	strb	r2, [r3, #11]
    pdev->cfg.host_channels    = 8 ;
 8012f36:	687b      	ldr	r3, [r7, #4]
 8012f38:	2208      	movs	r2, #8
 8012f3a:	701a      	strb	r2, [r3, #0]
    pdev->cfg.dev_endpoints    = 4 ;
 8012f3c:	687b      	ldr	r3, [r7, #4]
 8012f3e:	2204      	movs	r2, #4
 8012f40:	705a      	strb	r2, [r3, #1]
    pdev->cfg.TotalFifoSize    = 320; /* in 32-bits */
 8012f42:	687b      	ldr	r3, [r7, #4]
 8012f44:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8012f48:	80da      	strh	r2, [r3, #6]
    pdev->cfg.phy_itface       = USB_OTG_EMBEDDED_PHY;     
 8012f4a:	687b      	ldr	r3, [r7, #4]
 8012f4c:	2202      	movs	r2, #2
 8012f4e:	721a      	strb	r2, [r3, #8]
 8012f50:	e017      	b.n	8012f82 <USB_OTG_SelectCore+0x84>
    
#ifdef USB_OTG_FS_LOW_PWR_MGMT_SUPPORT    
    pdev->cfg.low_power        = 1;    
#endif     
  }
  else if (coreID == USB_OTG_HS_CORE_ID)
 8012f52:	78fb      	ldrb	r3, [r7, #3]
 8012f54:	2b00      	cmp	r3, #0
 8012f56:	d114      	bne.n	8012f82 <USB_OTG_SelectCore+0x84>
  {
    baseAddress                = USB_OTG_HS_BASE_ADDR;
 8012f58:	4b48      	ldr	r3, [pc, #288]	; (801307c <USB_OTG_SelectCore+0x17e>)
 8012f5a:	613b      	str	r3, [r7, #16]
    pdev->cfg.coreID           = USB_OTG_HS_CORE_ID;    
 8012f5c:	687b      	ldr	r3, [r7, #4]
 8012f5e:	2200      	movs	r2, #0
 8012f60:	72da      	strb	r2, [r3, #11]
    pdev->cfg.host_channels    = 12 ;
 8012f62:	687b      	ldr	r3, [r7, #4]
 8012f64:	220c      	movs	r2, #12
 8012f66:	701a      	strb	r2, [r3, #0]
    pdev->cfg.dev_endpoints    = 6 ;
 8012f68:	687b      	ldr	r3, [r7, #4]
 8012f6a:	2206      	movs	r2, #6
 8012f6c:	705a      	strb	r2, [r3, #1]
    pdev->cfg.TotalFifoSize    = 1280;/* in 32-bits */
 8012f6e:	687b      	ldr	r3, [r7, #4]
 8012f70:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 8012f74:	80da      	strh	r2, [r3, #6]
    
#ifdef USB_OTG_ULPI_PHY_ENABLED
    pdev->cfg.phy_itface       = USB_OTG_ULPI_PHY;
#else    
#ifdef USB_OTG_EMBEDDED_PHY_ENABLED
    pdev->cfg.phy_itface       = USB_OTG_EMBEDDED_PHY;
 8012f76:	687b      	ldr	r3, [r7, #4]
 8012f78:	2202      	movs	r2, #2
 8012f7a:	721a      	strb	r2, [r3, #8]
#endif  
#endif      
    
#ifdef USB_OTG_HS_INTERNAL_DMA_ENABLED    
    pdev->cfg.dma_enable       = 1;    
 8012f7c:	687b      	ldr	r3, [r7, #4]
 8012f7e:	2201      	movs	r2, #1
 8012f80:	70da      	strb	r2, [r3, #3]
    pdev->cfg.low_power        = 1;    
#endif 
    
  }
  
  pdev->regs.GREGS = (USB_OTG_GREGS *)(baseAddress + \
 8012f82:	693a      	ldr	r2, [r7, #16]
 8012f84:	687b      	ldr	r3, [r7, #4]
 8012f86:	60da      	str	r2, [r3, #12]
    USB_OTG_CORE_GLOBAL_REGS_OFFSET);
  pdev->regs.DREGS =  (USB_OTG_DREGS  *)  (baseAddress + \
 8012f88:	693b      	ldr	r3, [r7, #16]
 8012f8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012f8e:	461a      	mov	r2, r3
 8012f90:	687b      	ldr	r3, [r7, #4]
 8012f92:	611a      	str	r2, [r3, #16]
    USB_OTG_DEV_GLOBAL_REG_OFFSET);
  
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 8012f94:	2300      	movs	r3, #0
 8012f96:	617b      	str	r3, [r7, #20]
 8012f98:	e01c      	b.n	8012fd4 <USB_OTG_SelectCore+0xd6>
  {
    pdev->regs.INEP_REGS[i]  = (USB_OTG_INEPREGS *)  \
      (baseAddress + USB_OTG_DEV_IN_EP_REG_OFFSET + \
        (i * USB_OTG_EP_REG_OFFSET));
 8012f9a:	697b      	ldr	r3, [r7, #20]
 8012f9c:	015a      	lsls	r2, r3, #5
      (baseAddress + USB_OTG_DEV_IN_EP_REG_OFFSET + \
 8012f9e:	693b      	ldr	r3, [r7, #16]
 8012fa0:	4413      	add	r3, r2
 8012fa2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
    pdev->regs.INEP_REGS[i]  = (USB_OTG_INEPREGS *)  \
 8012fa6:	4619      	mov	r1, r3
 8012fa8:	687a      	ldr	r2, [r7, #4]
 8012faa:	697b      	ldr	r3, [r7, #20]
 8012fac:	3304      	adds	r3, #4
 8012fae:	009b      	lsls	r3, r3, #2
 8012fb0:	4413      	add	r3, r2
 8012fb2:	6099      	str	r1, [r3, #8]
    pdev->regs.OUTEP_REGS[i] = (USB_OTG_OUTEPREGS *) \
      (baseAddress + USB_OTG_DEV_OUT_EP_REG_OFFSET + \
        (i * USB_OTG_EP_REG_OFFSET));
 8012fb4:	697b      	ldr	r3, [r7, #20]
 8012fb6:	015a      	lsls	r2, r3, #5
      (baseAddress + USB_OTG_DEV_OUT_EP_REG_OFFSET + \
 8012fb8:	693b      	ldr	r3, [r7, #16]
 8012fba:	4413      	add	r3, r2
 8012fbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
    pdev->regs.OUTEP_REGS[i] = (USB_OTG_OUTEPREGS *) \
 8012fc0:	4619      	mov	r1, r3
 8012fc2:	687a      	ldr	r2, [r7, #4]
 8012fc4:	697b      	ldr	r3, [r7, #20]
 8012fc6:	3314      	adds	r3, #20
 8012fc8:	009b      	lsls	r3, r3, #2
 8012fca:	4413      	add	r3, r2
 8012fcc:	6059      	str	r1, [r3, #4]
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 8012fce:	697b      	ldr	r3, [r7, #20]
 8012fd0:	3301      	adds	r3, #1
 8012fd2:	617b      	str	r3, [r7, #20]
 8012fd4:	687b      	ldr	r3, [r7, #4]
 8012fd6:	785b      	ldrb	r3, [r3, #1]
 8012fd8:	461a      	mov	r2, r3
 8012fda:	697b      	ldr	r3, [r7, #20]
 8012fdc:	4293      	cmp	r3, r2
 8012fde:	d3dc      	bcc.n	8012f9a <USB_OTG_SelectCore+0x9c>
  }
  pdev->regs.HREGS = (USB_OTG_HREGS *)(baseAddress + \
 8012fe0:	693b      	ldr	r3, [r7, #16]
 8012fe2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8012fe6:	461a      	mov	r2, r3
 8012fe8:	687b      	ldr	r3, [r7, #4]
 8012fea:	615a      	str	r2, [r3, #20]
    USB_OTG_HOST_GLOBAL_REG_OFFSET);
  pdev->regs.HPRT0 = (uint32_t *)(baseAddress + USB_OTG_HOST_PORT_REGS_OFFSET);
 8012fec:	693b      	ldr	r3, [r7, #16]
 8012fee:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8012ff2:	461a      	mov	r2, r3
 8012ff4:	687b      	ldr	r3, [r7, #4]
 8012ff6:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
  
  for (i = 0; i < pdev->cfg.host_channels; i++)
 8012ffa:	2300      	movs	r3, #0
 8012ffc:	617b      	str	r3, [r7, #20]
 8012ffe:	e00f      	b.n	8013020 <USB_OTG_SelectCore+0x122>
  {
    pdev->regs.HC_REGS[i] = (USB_OTG_HC_REGS *)(baseAddress + \
      USB_OTG_HOST_CHAN_REGS_OFFSET + \
        (i * USB_OTG_CHAN_REGS_OFFSET));
 8013000:	697b      	ldr	r3, [r7, #20]
 8013002:	015a      	lsls	r2, r3, #5
      USB_OTG_HOST_CHAN_REGS_OFFSET + \
 8013004:	693b      	ldr	r3, [r7, #16]
 8013006:	4413      	add	r3, r2
 8013008:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
    pdev->regs.HC_REGS[i] = (USB_OTG_HC_REGS *)(baseAddress + \
 801300c:	4619      	mov	r1, r3
 801300e:	687a      	ldr	r2, [r7, #4]
 8013010:	697b      	ldr	r3, [r7, #20]
 8013012:	3322      	adds	r3, #34	; 0x22
 8013014:	009b      	lsls	r3, r3, #2
 8013016:	4413      	add	r3, r2
 8013018:	6099      	str	r1, [r3, #8]
  for (i = 0; i < pdev->cfg.host_channels; i++)
 801301a:	697b      	ldr	r3, [r7, #20]
 801301c:	3301      	adds	r3, #1
 801301e:	617b      	str	r3, [r7, #20]
 8013020:	687b      	ldr	r3, [r7, #4]
 8013022:	781b      	ldrb	r3, [r3, #0]
 8013024:	461a      	mov	r2, r3
 8013026:	697b      	ldr	r3, [r7, #20]
 8013028:	4293      	cmp	r3, r2
 801302a:	d3e9      	bcc.n	8013000 <USB_OTG_SelectCore+0x102>
  }
  for (i = 0; i < pdev->cfg.host_channels; i++)
 801302c:	2300      	movs	r3, #0
 801302e:	617b      	str	r3, [r7, #20]
 8013030:	e00f      	b.n	8013052 <USB_OTG_SelectCore+0x154>
  {
    pdev->regs.DFIFO[i] = (uint32_t *)(baseAddress + USB_OTG_DATA_FIFO_OFFSET +\
      (i * USB_OTG_DATA_FIFO_SIZE));
 8013032:	697b      	ldr	r3, [r7, #20]
 8013034:	031a      	lsls	r2, r3, #12
    pdev->regs.DFIFO[i] = (uint32_t *)(baseAddress + USB_OTG_DATA_FIFO_OFFSET +\
 8013036:	693b      	ldr	r3, [r7, #16]
 8013038:	4413      	add	r3, r2
 801303a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801303e:	4619      	mov	r1, r3
 8013040:	687a      	ldr	r2, [r7, #4]
 8013042:	697b      	ldr	r3, [r7, #20]
 8013044:	3332      	adds	r3, #50	; 0x32
 8013046:	009b      	lsls	r3, r3, #2
 8013048:	4413      	add	r3, r2
 801304a:	6099      	str	r1, [r3, #8]
  for (i = 0; i < pdev->cfg.host_channels; i++)
 801304c:	697b      	ldr	r3, [r7, #20]
 801304e:	3301      	adds	r3, #1
 8013050:	617b      	str	r3, [r7, #20]
 8013052:	687b      	ldr	r3, [r7, #4]
 8013054:	781b      	ldrb	r3, [r3, #0]
 8013056:	461a      	mov	r2, r3
 8013058:	697b      	ldr	r3, [r7, #20]
 801305a:	4293      	cmp	r3, r2
 801305c:	d3e9      	bcc.n	8013032 <USB_OTG_SelectCore+0x134>
  }
  pdev->regs.PCGCCTL = (uint32_t *)(baseAddress + USB_OTG_PCGCCTL_OFFSET);
 801305e:	693b      	ldr	r3, [r7, #16]
 8013060:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8013064:	461a      	mov	r2, r3
 8013066:	687b      	ldr	r3, [r7, #4]
 8013068:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
  
  return status;
 801306c:	7bfb      	ldrb	r3, [r7, #15]
}
 801306e:	4618      	mov	r0, r3
 8013070:	371c      	adds	r7, #28
 8013072:	46bd      	mov	sp, r7
 8013074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013078:	4770      	bx	lr
 801307a:	bf00      	nop
 801307c:	40040000 	.word	0x40040000

08013080 <USB_OTG_CoreInit>:
*         device mode or host mode operation.
* @param  pdev : Selected device
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_CoreInit(USB_OTG_CORE_HANDLE *pdev)
{
 8013080:	b580      	push	{r7, lr}
 8013082:	b086      	sub	sp, #24
 8013084:	af00      	add	r7, sp, #0
 8013086:	6078      	str	r0, [r7, #4]
  USB_OTG_STS status = USB_OTG_OK;
 8013088:	2300      	movs	r3, #0
 801308a:	75fb      	strb	r3, [r7, #23]
  USB_OTG_GUSBCFG_TypeDef  usbcfg;
  USB_OTG_GCCFG_TypeDef    gccfg;
  USB_OTG_GAHBCFG_TypeDef  ahbcfg;
  
  usbcfg.d32 = 0;
 801308c:	2300      	movs	r3, #0
 801308e:	613b      	str	r3, [r7, #16]
  gccfg.d32 = 0;
 8013090:	2300      	movs	r3, #0
 8013092:	60fb      	str	r3, [r7, #12]
  ahbcfg.d32 = 0;
 8013094:	2300      	movs	r3, #0
 8013096:	60bb      	str	r3, [r7, #8]
  
  
  
  if (pdev->cfg.phy_itface == USB_OTG_ULPI_PHY)
 8013098:	687b      	ldr	r3, [r7, #4]
 801309a:	7a1b      	ldrb	r3, [r3, #8]
 801309c:	2b01      	cmp	r3, #1
 801309e:	d146      	bne.n	801312e <USB_OTG_CoreInit+0xae>
  {
    gccfg.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GCCFG);
 80130a0:	687b      	ldr	r3, [r7, #4]
 80130a2:	68db      	ldr	r3, [r3, #12]
 80130a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80130a6:	60fb      	str	r3, [r7, #12]
    gccfg.b.pwdn = 0;
 80130a8:	7bbb      	ldrb	r3, [r7, #14]
 80130aa:	f36f 0300 	bfc	r3, #0, #1
 80130ae:	73bb      	strb	r3, [r7, #14]
    
    if (pdev->cfg.Sof_output)
 80130b0:	687b      	ldr	r3, [r7, #4]
 80130b2:	7a5b      	ldrb	r3, [r3, #9]
 80130b4:	2b00      	cmp	r3, #0
 80130b6:	d003      	beq.n	80130c0 <USB_OTG_CoreInit+0x40>
    {
      gccfg.b.sofouten = 1;   
 80130b8:	7bbb      	ldrb	r3, [r7, #14]
 80130ba:	f043 0310 	orr.w	r3, r3, #16
 80130be:	73bb      	strb	r3, [r7, #14]
    }
    USB_OTG_WRITE_REG32 (&pdev->regs.GREGS->GCCFG, gccfg.d32);
 80130c0:	687b      	ldr	r3, [r7, #4]
 80130c2:	68db      	ldr	r3, [r3, #12]
 80130c4:	68fa      	ldr	r2, [r7, #12]
 80130c6:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Init The ULPI Interface */
    usbcfg.d32 = 0;
 80130c8:	2300      	movs	r3, #0
 80130ca:	613b      	str	r3, [r7, #16]
    usbcfg.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GUSBCFG);
 80130cc:	687b      	ldr	r3, [r7, #4]
 80130ce:	68db      	ldr	r3, [r3, #12]
 80130d0:	68db      	ldr	r3, [r3, #12]
 80130d2:	613b      	str	r3, [r7, #16]
    
    usbcfg.b.physel            = 0; /* HS Interface */
 80130d4:	7c3b      	ldrb	r3, [r7, #16]
 80130d6:	f36f 1386 	bfc	r3, #6, #1
 80130da:	743b      	strb	r3, [r7, #16]
#ifdef USB_OTG_INTERNAL_VBUS_ENABLED
    usbcfg.b.ulpi_ext_vbus_drv = 0; /* Use internal VBUS */
#else
#ifdef USB_OTG_EXTERNAL_VBUS_ENABLED    
    usbcfg.b.ulpi_ext_vbus_drv = 1; /* Use external VBUS */
 80130dc:	7cbb      	ldrb	r3, [r7, #18]
 80130de:	f043 0310 	orr.w	r3, r3, #16
 80130e2:	74bb      	strb	r3, [r7, #18]
#endif
#endif 
    usbcfg.b.term_sel_dl_pulse = 0; /* Data line pulsing using utmi_txvalid */    
 80130e4:	7cbb      	ldrb	r3, [r7, #18]
 80130e6:	f36f 1386 	bfc	r3, #6, #1
 80130ea:	74bb      	strb	r3, [r7, #18]
    
    usbcfg.b.ulpi_fsls = 0;
 80130ec:	7cbb      	ldrb	r3, [r7, #18]
 80130ee:	f36f 0341 	bfc	r3, #1, #1
 80130f2:	74bb      	strb	r3, [r7, #18]
    usbcfg.b.ulpi_clk_sus_m = 0;
 80130f4:	7cbb      	ldrb	r3, [r7, #18]
 80130f6:	f36f 03c3 	bfc	r3, #3, #1
 80130fa:	74bb      	strb	r3, [r7, #18]
    USB_OTG_WRITE_REG32 (&pdev->regs.GREGS->GUSBCFG, usbcfg.d32);
 80130fc:	687b      	ldr	r3, [r7, #4]
 80130fe:	68db      	ldr	r3, [r3, #12]
 8013100:	693a      	ldr	r2, [r7, #16]
 8013102:	60da      	str	r2, [r3, #12]
    
    /* Reset after a PHY select  */
    USB_OTG_CoreReset(pdev);
 8013104:	6878      	ldr	r0, [r7, #4]
 8013106:	f7ff fe4b 	bl	8012da0 <USB_OTG_CoreReset>
    
    if(pdev->cfg.dma_enable == 1)
 801310a:	687b      	ldr	r3, [r7, #4]
 801310c:	78db      	ldrb	r3, [r3, #3]
 801310e:	2b01      	cmp	r3, #1
 8013110:	d13d      	bne.n	801318e <USB_OTG_CoreInit+0x10e>
    {
      
      ahbcfg.b.hburstlen = 5; /* 64 x 32-bits*/
 8013112:	7a3b      	ldrb	r3, [r7, #8]
 8013114:	2205      	movs	r2, #5
 8013116:	f362 0344 	bfi	r3, r2, #1, #4
 801311a:	723b      	strb	r3, [r7, #8]
      ahbcfg.b.dmaenable = 1;
 801311c:	7a3b      	ldrb	r3, [r7, #8]
 801311e:	f043 0320 	orr.w	r3, r3, #32
 8013122:	723b      	strb	r3, [r7, #8]
      USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GAHBCFG, ahbcfg.d32);
 8013124:	687b      	ldr	r3, [r7, #4]
 8013126:	68db      	ldr	r3, [r3, #12]
 8013128:	68ba      	ldr	r2, [r7, #8]
 801312a:	609a      	str	r2, [r3, #8]
 801312c:	e02f      	b.n	801318e <USB_OTG_CoreInit+0x10e>
    }    
  }
  else /* FS interface (embedded Phy) */
  {
    
    usbcfg.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GUSBCFG);;
 801312e:	687b      	ldr	r3, [r7, #4]
 8013130:	68db      	ldr	r3, [r3, #12]
 8013132:	68db      	ldr	r3, [r3, #12]
 8013134:	613b      	str	r3, [r7, #16]
    usbcfg.b.physel  = 1; /* FS Interface */
 8013136:	7c3b      	ldrb	r3, [r7, #16]
 8013138:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801313c:	743b      	strb	r3, [r7, #16]
    USB_OTG_WRITE_REG32 (&pdev->regs.GREGS->GUSBCFG, usbcfg.d32);
 801313e:	687b      	ldr	r3, [r7, #4]
 8013140:	68db      	ldr	r3, [r3, #12]
 8013142:	693a      	ldr	r2, [r7, #16]
 8013144:	60da      	str	r2, [r3, #12]
    /* Reset after a PHY select and set Host mode */
    USB_OTG_CoreReset(pdev);
 8013146:	6878      	ldr	r0, [r7, #4]
 8013148:	f7ff fe2a 	bl	8012da0 <USB_OTG_CoreReset>
    /* Deactivate the power down*/
    gccfg.d32 = 0;
 801314c:	2300      	movs	r3, #0
 801314e:	60fb      	str	r3, [r7, #12]
    gccfg.b.pwdn = 1;
 8013150:	7bbb      	ldrb	r3, [r7, #14]
 8013152:	f043 0301 	orr.w	r3, r3, #1
 8013156:	73bb      	strb	r3, [r7, #14]
    
    gccfg.b.vbussensingA = 1 ;
 8013158:	7bbb      	ldrb	r3, [r7, #14]
 801315a:	f043 0304 	orr.w	r3, r3, #4
 801315e:	73bb      	strb	r3, [r7, #14]
    gccfg.b.vbussensingB = 1 ;     
 8013160:	7bbb      	ldrb	r3, [r7, #14]
 8013162:	f043 0308 	orr.w	r3, r3, #8
 8013166:	73bb      	strb	r3, [r7, #14]
#ifndef VBUS_SENSING_ENABLED
    gccfg.b.disablevbussensing = 1; 
 8013168:	7bbb      	ldrb	r3, [r7, #14]
 801316a:	f043 0320 	orr.w	r3, r3, #32
 801316e:	73bb      	strb	r3, [r7, #14]
#endif    
    
    if(pdev->cfg.Sof_output)
 8013170:	687b      	ldr	r3, [r7, #4]
 8013172:	7a5b      	ldrb	r3, [r3, #9]
 8013174:	2b00      	cmp	r3, #0
 8013176:	d003      	beq.n	8013180 <USB_OTG_CoreInit+0x100>
    {
      gccfg.b.sofouten = 1;  
 8013178:	7bbb      	ldrb	r3, [r7, #14]
 801317a:	f043 0310 	orr.w	r3, r3, #16
 801317e:	73bb      	strb	r3, [r7, #14]
    }
    
    USB_OTG_WRITE_REG32 (&pdev->regs.GREGS->GCCFG, gccfg.d32);
 8013180:	687b      	ldr	r3, [r7, #4]
 8013182:	68db      	ldr	r3, [r3, #12]
 8013184:	68fa      	ldr	r2, [r7, #12]
 8013186:	639a      	str	r2, [r3, #56]	; 0x38
    USB_OTG_BSP_mDelay(20);
 8013188:	2014      	movs	r0, #20
 801318a:	f7ff fdcd 	bl	8012d28 <USB_OTG_BSP_mDelay>
  }
  /* case the HS core is working in FS mode */
  if(pdev->cfg.dma_enable == 1)
 801318e:	687b      	ldr	r3, [r7, #4]
 8013190:	78db      	ldrb	r3, [r3, #3]
 8013192:	2b01      	cmp	r3, #1
 8013194:	d110      	bne.n	80131b8 <USB_OTG_CoreInit+0x138>
  {
    
    ahbcfg.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GAHBCFG);
 8013196:	687b      	ldr	r3, [r7, #4]
 8013198:	68db      	ldr	r3, [r3, #12]
 801319a:	689b      	ldr	r3, [r3, #8]
 801319c:	60bb      	str	r3, [r7, #8]
    ahbcfg.b.hburstlen = 5; /* 64 x 32-bits*/
 801319e:	7a3b      	ldrb	r3, [r7, #8]
 80131a0:	2205      	movs	r2, #5
 80131a2:	f362 0344 	bfi	r3, r2, #1, #4
 80131a6:	723b      	strb	r3, [r7, #8]
    ahbcfg.b.dmaenable = 1;
 80131a8:	7a3b      	ldrb	r3, [r7, #8]
 80131aa:	f043 0320 	orr.w	r3, r3, #32
 80131ae:	723b      	strb	r3, [r7, #8]
    USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GAHBCFG, ahbcfg.d32);
 80131b0:	687b      	ldr	r3, [r7, #4]
 80131b2:	68db      	ldr	r3, [r3, #12]
 80131b4:	68ba      	ldr	r2, [r7, #8]
 80131b6:	609a      	str	r2, [r3, #8]
  usbcfg.b.hnpcap = 1;
  usbcfg.b.srpcap = 1;
  USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GUSBCFG, usbcfg.d32);
  USB_OTG_EnableCommonInt(pdev);
#endif
  return status;
 80131b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80131ba:	4618      	mov	r0, r3
 80131bc:	3718      	adds	r7, #24
 80131be:	46bd      	mov	sp, r7
 80131c0:	bd80      	pop	{r7, pc}

080131c2 <USB_OTG_EnableGlobalInt>:
*         Enables the controller's Global Int in the AHB Config reg
* @param  pdev : Selected device
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_EnableGlobalInt(USB_OTG_CORE_HANDLE *pdev)
{
 80131c2:	b480      	push	{r7}
 80131c4:	b085      	sub	sp, #20
 80131c6:	af00      	add	r7, sp, #0
 80131c8:	6078      	str	r0, [r7, #4]
  USB_OTG_STS status = USB_OTG_OK;
 80131ca:	2300      	movs	r3, #0
 80131cc:	73fb      	strb	r3, [r7, #15]
  USB_OTG_GAHBCFG_TypeDef  ahbcfg;
  
  ahbcfg.d32 = 0;
 80131ce:	2300      	movs	r3, #0
 80131d0:	60bb      	str	r3, [r7, #8]
  ahbcfg.b.glblintrmsk = 1; /* Enable interrupts */
 80131d2:	7a3b      	ldrb	r3, [r7, #8]
 80131d4:	f043 0301 	orr.w	r3, r3, #1
 80131d8:	723b      	strb	r3, [r7, #8]
  USB_OTG_MODIFY_REG32(&pdev->regs.GREGS->GAHBCFG, 0, ahbcfg.d32);
 80131da:	687b      	ldr	r3, [r7, #4]
 80131dc:	68db      	ldr	r3, [r3, #12]
 80131de:	6899      	ldr	r1, [r3, #8]
 80131e0:	68ba      	ldr	r2, [r7, #8]
 80131e2:	687b      	ldr	r3, [r7, #4]
 80131e4:	68db      	ldr	r3, [r3, #12]
 80131e6:	430a      	orrs	r2, r1
 80131e8:	609a      	str	r2, [r3, #8]
  return status;
 80131ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80131ec:	4618      	mov	r0, r3
 80131ee:	3714      	adds	r7, #20
 80131f0:	46bd      	mov	sp, r7
 80131f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131f6:	4770      	bx	lr

080131f8 <USB_OTG_DisableGlobalInt>:
*         Enables the controller's Global Int in the AHB Config reg
* @param  pdev : Selected device
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_DisableGlobalInt(USB_OTG_CORE_HANDLE *pdev)
{
 80131f8:	b480      	push	{r7}
 80131fa:	b085      	sub	sp, #20
 80131fc:	af00      	add	r7, sp, #0
 80131fe:	6078      	str	r0, [r7, #4]
  USB_OTG_STS status = USB_OTG_OK;
 8013200:	2300      	movs	r3, #0
 8013202:	73fb      	strb	r3, [r7, #15]
  USB_OTG_GAHBCFG_TypeDef  ahbcfg;
  ahbcfg.d32 = 0;
 8013204:	2300      	movs	r3, #0
 8013206:	60bb      	str	r3, [r7, #8]
  ahbcfg.b.glblintrmsk = 1; /* Enable interrupts */
 8013208:	7a3b      	ldrb	r3, [r7, #8]
 801320a:	f043 0301 	orr.w	r3, r3, #1
 801320e:	723b      	strb	r3, [r7, #8]
  USB_OTG_MODIFY_REG32(&pdev->regs.GREGS->GAHBCFG, ahbcfg.d32, 0);
 8013210:	687b      	ldr	r3, [r7, #4]
 8013212:	68db      	ldr	r3, [r3, #12]
 8013214:	6899      	ldr	r1, [r3, #8]
 8013216:	68bb      	ldr	r3, [r7, #8]
 8013218:	43da      	mvns	r2, r3
 801321a:	687b      	ldr	r3, [r7, #4]
 801321c:	68db      	ldr	r3, [r3, #12]
 801321e:	400a      	ands	r2, r1
 8013220:	609a      	str	r2, [r3, #8]
  return status;
 8013222:	7bfb      	ldrb	r3, [r7, #15]
}
 8013224:	4618      	mov	r0, r3
 8013226:	3714      	adds	r7, #20
 8013228:	46bd      	mov	sp, r7
 801322a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801322e:	4770      	bx	lr

08013230 <USB_OTG_FlushTxFifo>:
* @param  pdev : Selected device
* @param  num : FO num
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_FlushTxFifo (USB_OTG_CORE_HANDLE *pdev , uint32_t num )
{
 8013230:	b580      	push	{r7, lr}
 8013232:	b086      	sub	sp, #24
 8013234:	af00      	add	r7, sp, #0
 8013236:	6078      	str	r0, [r7, #4]
 8013238:	6039      	str	r1, [r7, #0]
  USB_OTG_STS status = USB_OTG_OK;
 801323a:	2300      	movs	r3, #0
 801323c:	74fb      	strb	r3, [r7, #19]
  __IO USB_OTG_GRSTCTL_TypeDef  greset;
  
  uint32_t count = 0;
 801323e:	2300      	movs	r3, #0
 8013240:	617b      	str	r3, [r7, #20]
  greset.d32 = 0;
 8013242:	2300      	movs	r3, #0
 8013244:	60fb      	str	r3, [r7, #12]
  greset.b.txfflsh = 1;
 8013246:	68fb      	ldr	r3, [r7, #12]
 8013248:	f043 0320 	orr.w	r3, r3, #32
 801324c:	60fb      	str	r3, [r7, #12]
  greset.b.txfnum  = num;
 801324e:	683b      	ldr	r3, [r7, #0]
 8013250:	f003 031f 	and.w	r3, r3, #31
 8013254:	b2da      	uxtb	r2, r3
 8013256:	68fb      	ldr	r3, [r7, #12]
 8013258:	f362 138a 	bfi	r3, r2, #6, #5
 801325c:	60fb      	str	r3, [r7, #12]
  USB_OTG_WRITE_REG32( &pdev->regs.GREGS->GRSTCTL, greset.d32 );
 801325e:	687b      	ldr	r3, [r7, #4]
 8013260:	68db      	ldr	r3, [r3, #12]
 8013262:	68fa      	ldr	r2, [r7, #12]
 8013264:	611a      	str	r2, [r3, #16]
  do
  {
    greset.d32 = USB_OTG_READ_REG32( &pdev->regs.GREGS->GRSTCTL);
 8013266:	687b      	ldr	r3, [r7, #4]
 8013268:	68db      	ldr	r3, [r3, #12]
 801326a:	691b      	ldr	r3, [r3, #16]
 801326c:	60fb      	str	r3, [r7, #12]
    if (++count > 200000)
 801326e:	697b      	ldr	r3, [r7, #20]
 8013270:	3301      	adds	r3, #1
 8013272:	617b      	str	r3, [r7, #20]
 8013274:	697b      	ldr	r3, [r7, #20]
 8013276:	4a09      	ldr	r2, [pc, #36]	; (801329c <USB_OTG_FlushTxFifo+0x6c>)
 8013278:	4293      	cmp	r3, r2
 801327a:	d806      	bhi.n	801328a <USB_OTG_FlushTxFifo+0x5a>
    {
      break;
    }
  }
  while (greset.b.txfflsh == 1);
 801327c:	68fb      	ldr	r3, [r7, #12]
 801327e:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8013282:	b2db      	uxtb	r3, r3
 8013284:	2b01      	cmp	r3, #1
 8013286:	d0ee      	beq.n	8013266 <USB_OTG_FlushTxFifo+0x36>
 8013288:	e000      	b.n	801328c <USB_OTG_FlushTxFifo+0x5c>
      break;
 801328a:	bf00      	nop
  /* Wait for 3 PHY Clocks*/
  USB_OTG_BSP_uDelay(3);
 801328c:	2003      	movs	r0, #3
 801328e:	f7ff fd27 	bl	8012ce0 <USB_OTG_BSP_uDelay>
  return status;
 8013292:	7cfb      	ldrb	r3, [r7, #19]
}
 8013294:	4618      	mov	r0, r3
 8013296:	3718      	adds	r7, #24
 8013298:	46bd      	mov	sp, r7
 801329a:	bd80      	pop	{r7, pc}
 801329c:	00030d40 	.word	0x00030d40

080132a0 <USB_OTG_FlushRxFifo>:
* @brief  USB_OTG_FlushRxFifo : Flush a Rx FIFO
* @param  pdev : Selected device
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_FlushRxFifo( USB_OTG_CORE_HANDLE *pdev )
{
 80132a0:	b580      	push	{r7, lr}
 80132a2:	b086      	sub	sp, #24
 80132a4:	af00      	add	r7, sp, #0
 80132a6:	6078      	str	r0, [r7, #4]
  USB_OTG_STS status = USB_OTG_OK;
 80132a8:	2300      	movs	r3, #0
 80132aa:	74fb      	strb	r3, [r7, #19]
  __IO USB_OTG_GRSTCTL_TypeDef  greset;
  uint32_t count = 0;
 80132ac:	2300      	movs	r3, #0
 80132ae:	617b      	str	r3, [r7, #20]
  
  greset.d32 = 0;
 80132b0:	2300      	movs	r3, #0
 80132b2:	60fb      	str	r3, [r7, #12]
  greset.b.rxfflsh = 1;
 80132b4:	68fb      	ldr	r3, [r7, #12]
 80132b6:	f043 0310 	orr.w	r3, r3, #16
 80132ba:	60fb      	str	r3, [r7, #12]
  USB_OTG_WRITE_REG32( &pdev->regs.GREGS->GRSTCTL, greset.d32 );
 80132bc:	687b      	ldr	r3, [r7, #4]
 80132be:	68db      	ldr	r3, [r3, #12]
 80132c0:	68fa      	ldr	r2, [r7, #12]
 80132c2:	611a      	str	r2, [r3, #16]
  do
  {
    greset.d32 = USB_OTG_READ_REG32( &pdev->regs.GREGS->GRSTCTL);
 80132c4:	687b      	ldr	r3, [r7, #4]
 80132c6:	68db      	ldr	r3, [r3, #12]
 80132c8:	691b      	ldr	r3, [r3, #16]
 80132ca:	60fb      	str	r3, [r7, #12]
    if (++count > 200000)
 80132cc:	697b      	ldr	r3, [r7, #20]
 80132ce:	3301      	adds	r3, #1
 80132d0:	617b      	str	r3, [r7, #20]
 80132d2:	697b      	ldr	r3, [r7, #20]
 80132d4:	4a09      	ldr	r2, [pc, #36]	; (80132fc <USB_OTG_FlushRxFifo+0x5c>)
 80132d6:	4293      	cmp	r3, r2
 80132d8:	d806      	bhi.n	80132e8 <USB_OTG_FlushRxFifo+0x48>
    {
      break;
    }
  }
  while (greset.b.rxfflsh == 1);
 80132da:	68fb      	ldr	r3, [r7, #12]
 80132dc:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80132e0:	b2db      	uxtb	r3, r3
 80132e2:	2b01      	cmp	r3, #1
 80132e4:	d0ee      	beq.n	80132c4 <USB_OTG_FlushRxFifo+0x24>
 80132e6:	e000      	b.n	80132ea <USB_OTG_FlushRxFifo+0x4a>
      break;
 80132e8:	bf00      	nop
  /* Wait for 3 PHY Clocks*/
  USB_OTG_BSP_uDelay(3);
 80132ea:	2003      	movs	r0, #3
 80132ec:	f7ff fcf8 	bl	8012ce0 <USB_OTG_BSP_uDelay>
  return status;
 80132f0:	7cfb      	ldrb	r3, [r7, #19]
}
 80132f2:	4618      	mov	r0, r3
 80132f4:	3718      	adds	r7, #24
 80132f6:	46bd      	mov	sp, r7
 80132f8:	bd80      	pop	{r7, pc}
 80132fa:	bf00      	nop
 80132fc:	00030d40 	.word	0x00030d40

08013300 <USB_OTG_SetCurrentMode>:
* @param  pdev : Selected device
* @param  mode :  (Host/device)
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_SetCurrentMode(USB_OTG_CORE_HANDLE *pdev , uint8_t mode)
{
 8013300:	b580      	push	{r7, lr}
 8013302:	b084      	sub	sp, #16
 8013304:	af00      	add	r7, sp, #0
 8013306:	6078      	str	r0, [r7, #4]
 8013308:	460b      	mov	r3, r1
 801330a:	70fb      	strb	r3, [r7, #3]
  USB_OTG_STS status = USB_OTG_OK;
 801330c:	2300      	movs	r3, #0
 801330e:	73fb      	strb	r3, [r7, #15]
  USB_OTG_GUSBCFG_TypeDef  usbcfg;
  
  usbcfg.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GUSBCFG);
 8013310:	687b      	ldr	r3, [r7, #4]
 8013312:	68db      	ldr	r3, [r3, #12]
 8013314:	68db      	ldr	r3, [r3, #12]
 8013316:	60bb      	str	r3, [r7, #8]
  
  usbcfg.b.force_host = 0;
 8013318:	7afb      	ldrb	r3, [r7, #11]
 801331a:	f36f 1345 	bfc	r3, #5, #1
 801331e:	72fb      	strb	r3, [r7, #11]
  usbcfg.b.force_dev = 0;
 8013320:	7afb      	ldrb	r3, [r7, #11]
 8013322:	f36f 1386 	bfc	r3, #6, #1
 8013326:	72fb      	strb	r3, [r7, #11]
  
  if ( mode == HOST_MODE)
 8013328:	78fb      	ldrb	r3, [r7, #3]
 801332a:	2b01      	cmp	r3, #1
 801332c:	d104      	bne.n	8013338 <USB_OTG_SetCurrentMode+0x38>
  {
    usbcfg.b.force_host = 1;
 801332e:	7afb      	ldrb	r3, [r7, #11]
 8013330:	f043 0320 	orr.w	r3, r3, #32
 8013334:	72fb      	strb	r3, [r7, #11]
 8013336:	e006      	b.n	8013346 <USB_OTG_SetCurrentMode+0x46>
  }
  else if ( mode == DEVICE_MODE)
 8013338:	78fb      	ldrb	r3, [r7, #3]
 801333a:	2b00      	cmp	r3, #0
 801333c:	d103      	bne.n	8013346 <USB_OTG_SetCurrentMode+0x46>
  {
    usbcfg.b.force_dev = 1;
 801333e:	7afb      	ldrb	r3, [r7, #11]
 8013340:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013344:	72fb      	strb	r3, [r7, #11]
  }
  
  USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GUSBCFG, usbcfg.d32);
 8013346:	687b      	ldr	r3, [r7, #4]
 8013348:	68db      	ldr	r3, [r3, #12]
 801334a:	68ba      	ldr	r2, [r7, #8]
 801334c:	60da      	str	r2, [r3, #12]
  USB_OTG_BSP_mDelay(50);
 801334e:	2032      	movs	r0, #50	; 0x32
 8013350:	f7ff fcea 	bl	8012d28 <USB_OTG_BSP_mDelay>
  return status;
 8013354:	7bfb      	ldrb	r3, [r7, #15]
}
 8013356:	4618      	mov	r0, r3
 8013358:	3710      	adds	r7, #16
 801335a:	46bd      	mov	sp, r7
 801335c:	bd80      	pop	{r7, pc}

0801335e <USB_OTG_GetMode>:
* @brief  USB_OTG_GetMode : Get current mode
* @param  pdev : Selected device
* @retval current mode
*/
uint32_t USB_OTG_GetMode(USB_OTG_CORE_HANDLE *pdev)
{
 801335e:	b480      	push	{r7}
 8013360:	b083      	sub	sp, #12
 8013362:	af00      	add	r7, sp, #0
 8013364:	6078      	str	r0, [r7, #4]
  return (USB_OTG_READ_REG32(&pdev->regs.GREGS->GINTSTS ) & 0x1);
 8013366:	687b      	ldr	r3, [r7, #4]
 8013368:	68db      	ldr	r3, [r3, #12]
 801336a:	695b      	ldr	r3, [r3, #20]
 801336c:	f003 0301 	and.w	r3, r3, #1
}
 8013370:	4618      	mov	r0, r3
 8013372:	370c      	adds	r7, #12
 8013374:	46bd      	mov	sp, r7
 8013376:	f85d 7b04 	ldr.w	r7, [sp], #4
 801337a:	4770      	bx	lr

0801337c <USB_OTG_IsDeviceMode>:
* @brief  USB_OTG_IsDeviceMode : Check if it is device mode
* @param  pdev : Selected device
* @retval num_in_ep
*/
uint8_t USB_OTG_IsDeviceMode(USB_OTG_CORE_HANDLE *pdev)
{
 801337c:	b580      	push	{r7, lr}
 801337e:	b082      	sub	sp, #8
 8013380:	af00      	add	r7, sp, #0
 8013382:	6078      	str	r0, [r7, #4]
  return (USB_OTG_GetMode(pdev) != HOST_MODE);
 8013384:	6878      	ldr	r0, [r7, #4]
 8013386:	f7ff ffea 	bl	801335e <USB_OTG_GetMode>
 801338a:	4603      	mov	r3, r0
 801338c:	2b01      	cmp	r3, #1
 801338e:	bf14      	ite	ne
 8013390:	2301      	movne	r3, #1
 8013392:	2300      	moveq	r3, #0
 8013394:	b2db      	uxtb	r3, r3
}
 8013396:	4618      	mov	r0, r3
 8013398:	3708      	adds	r7, #8
 801339a:	46bd      	mov	sp, r7
 801339c:	bd80      	pop	{r7, pc}

0801339e <USB_OTG_IsHostMode>:
* @brief  USB_OTG_IsHostMode : Check if it is host mode
* @param  pdev : Selected device
* @retval num_in_ep
*/
uint8_t USB_OTG_IsHostMode(USB_OTG_CORE_HANDLE *pdev)
{
 801339e:	b580      	push	{r7, lr}
 80133a0:	b082      	sub	sp, #8
 80133a2:	af00      	add	r7, sp, #0
 80133a4:	6078      	str	r0, [r7, #4]
  return (USB_OTG_GetMode(pdev) == HOST_MODE);
 80133a6:	6878      	ldr	r0, [r7, #4]
 80133a8:	f7ff ffd9 	bl	801335e <USB_OTG_GetMode>
 80133ac:	4603      	mov	r3, r0
 80133ae:	2b01      	cmp	r3, #1
 80133b0:	bf0c      	ite	eq
 80133b2:	2301      	moveq	r3, #1
 80133b4:	2300      	movne	r3, #0
 80133b6:	b2db      	uxtb	r3, r3
}
 80133b8:	4618      	mov	r0, r3
 80133ba:	3708      	adds	r7, #8
 80133bc:	46bd      	mov	sp, r7
 80133be:	bd80      	pop	{r7, pc}

080133c0 <USB_OTG_ReadCoreItr>:
* @brief  USB_OTG_ReadCoreItr : returns the Core Interrupt register
* @param  pdev : Selected device
* @retval Status
*/
uint32_t USB_OTG_ReadCoreItr(USB_OTG_CORE_HANDLE *pdev)
{
 80133c0:	b480      	push	{r7}
 80133c2:	b085      	sub	sp, #20
 80133c4:	af00      	add	r7, sp, #0
 80133c6:	6078      	str	r0, [r7, #4]
  uint32_t v = 0;
 80133c8:	2300      	movs	r3, #0
 80133ca:	60fb      	str	r3, [r7, #12]
  v = USB_OTG_READ_REG32(&pdev->regs.GREGS->GINTSTS);
 80133cc:	687b      	ldr	r3, [r7, #4]
 80133ce:	68db      	ldr	r3, [r3, #12]
 80133d0:	695b      	ldr	r3, [r3, #20]
 80133d2:	60fb      	str	r3, [r7, #12]
  v &= USB_OTG_READ_REG32(&pdev->regs.GREGS->GINTMSK);
 80133d4:	687b      	ldr	r3, [r7, #4]
 80133d6:	68db      	ldr	r3, [r3, #12]
 80133d8:	699b      	ldr	r3, [r3, #24]
 80133da:	68fa      	ldr	r2, [r7, #12]
 80133dc:	4013      	ands	r3, r2
 80133de:	60fb      	str	r3, [r7, #12]
  return v;
 80133e0:	68fb      	ldr	r3, [r7, #12]
}
 80133e2:	4618      	mov	r0, r3
 80133e4:	3714      	adds	r7, #20
 80133e6:	46bd      	mov	sp, r7
 80133e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133ec:	4770      	bx	lr

080133ee <USB_OTG_ReadOtgItr>:
* @brief  USB_OTG_ReadOtgItr : returns the USB_OTG Interrupt register
* @param  pdev : Selected device
* @retval Status
*/
uint32_t USB_OTG_ReadOtgItr (USB_OTG_CORE_HANDLE *pdev)
{
 80133ee:	b480      	push	{r7}
 80133f0:	b083      	sub	sp, #12
 80133f2:	af00      	add	r7, sp, #0
 80133f4:	6078      	str	r0, [r7, #4]
  return (USB_OTG_READ_REG32 (&pdev->regs.GREGS->GOTGINT));
 80133f6:	687b      	ldr	r3, [r7, #4]
 80133f8:	68db      	ldr	r3, [r3, #12]
 80133fa:	685b      	ldr	r3, [r3, #4]
}
 80133fc:	4618      	mov	r0, r3
 80133fe:	370c      	adds	r7, #12
 8013400:	46bd      	mov	sp, r7
 8013402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013406:	4770      	bx	lr

08013408 <USB_OTG_CoreInitHost>:
* @brief  USB_OTG_CoreInitHost : Initializes USB_OTG controller for host mode
* @param  pdev : Selected device
* @retval status
*/
USB_OTG_STS USB_OTG_CoreInitHost(USB_OTG_CORE_HANDLE *pdev)
{
 8013408:	b580      	push	{r7, lr}
 801340a:	b088      	sub	sp, #32
 801340c:	af00      	add	r7, sp, #0
 801340e:	6078      	str	r0, [r7, #4]
  USB_OTG_STS                     status = USB_OTG_OK;
 8013410:	2300      	movs	r3, #0
 8013412:	76fb      	strb	r3, [r7, #27]
  
#ifdef USE_OTG_MODE
  USB_OTG_OTGCTL_TypeDef          gotgctl;
#endif
  
  uint32_t                        i = 0;
 8013414:	2300      	movs	r3, #0
 8013416:	61fb      	str	r3, [r7, #28]
  
  nptxfifosize.d32 = 0;  
 8013418:	2300      	movs	r3, #0
 801341a:	617b      	str	r3, [r7, #20]
  ptxfifosize.d32 = 0;
 801341c:	2300      	movs	r3, #0
 801341e:	613b      	str	r3, [r7, #16]
#ifdef USE_OTG_MODE
  gotgctl.d32 = 0;
#endif
  hcfg.d32 = 0;
 8013420:	2300      	movs	r3, #0
 8013422:	60fb      	str	r3, [r7, #12]
  
  
  /* configure charge pump IO */
  USB_OTG_BSP_ConfigVBUS(pdev);
 8013424:	6878      	ldr	r0, [r7, #4]
 8013426:	f7ff fc35 	bl	8012c94 <USB_OTG_BSP_ConfigVBUS>
  
  /* Restart the Phy Clock */
  USB_OTG_WRITE_REG32(pdev->regs.PCGCCTL, 0);
 801342a:	687b      	ldr	r3, [r7, #4]
 801342c:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8013430:	2200      	movs	r2, #0
 8013432:	601a      	str	r2, [r3, #0]
  
  /* Initialize Host Configuration Register */
  if (pdev->cfg.phy_itface == USB_OTG_ULPI_PHY)
 8013434:	687b      	ldr	r3, [r7, #4]
 8013436:	7a1b      	ldrb	r3, [r3, #8]
 8013438:	2b01      	cmp	r3, #1
 801343a:	d104      	bne.n	8013446 <USB_OTG_CoreInitHost+0x3e>
  {
    USB_OTG_InitFSLSPClkSel(pdev , HCFG_30_60_MHZ); 
 801343c:	2100      	movs	r1, #0
 801343e:	6878      	ldr	r0, [r7, #4]
 8013440:	f000 f8f4 	bl	801362c <USB_OTG_InitFSLSPClkSel>
 8013444:	e003      	b.n	801344e <USB_OTG_CoreInitHost+0x46>
  }
  else
  {
    USB_OTG_InitFSLSPClkSel(pdev , HCFG_48_MHZ); 
 8013446:	2101      	movs	r1, #1
 8013448:	6878      	ldr	r0, [r7, #4]
 801344a:	f000 f8ef 	bl	801362c <USB_OTG_InitFSLSPClkSel>
  }
  USB_OTG_ResetPort(pdev);
 801344e:	6878      	ldr	r0, [r7, #4]
 8013450:	f000 f935 	bl	80136be <USB_OTG_ResetPort>
  
  hcfg.d32 = USB_OTG_READ_REG32(&pdev->regs.HREGS->HCFG);
 8013454:	687b      	ldr	r3, [r7, #4]
 8013456:	695b      	ldr	r3, [r3, #20]
 8013458:	681b      	ldr	r3, [r3, #0]
 801345a:	60fb      	str	r3, [r7, #12]
  hcfg.b.fslssupp = 0;
 801345c:	7b3b      	ldrb	r3, [r7, #12]
 801345e:	f36f 0382 	bfc	r3, #2, #1
 8013462:	733b      	strb	r3, [r7, #12]
  USB_OTG_WRITE_REG32(&pdev->regs.HREGS->HCFG, hcfg.d32);
 8013464:	687b      	ldr	r3, [r7, #4]
 8013466:	695b      	ldr	r3, [r3, #20]
 8013468:	68fa      	ldr	r2, [r7, #12]
 801346a:	601a      	str	r2, [r3, #0]
    ptxfifosize.b.depth     = TXH_P_FS_FIFOSIZ;
    USB_OTG_WRITE_REG32(&pdev->regs.GREGS->HPTXFSIZ, ptxfifosize.d32);      
  }
#endif
#ifdef USB_OTG_HS_CORE  
  if (pdev->cfg.coreID == USB_OTG_HS_CORE_ID)
 801346c:	687b      	ldr	r3, [r7, #4]
 801346e:	7adb      	ldrb	r3, [r3, #11]
 8013470:	2b00      	cmp	r3, #0
 8013472:	d119      	bne.n	80134a8 <USB_OTG_CoreInitHost+0xa0>
  {
    /* set Rx FIFO size */
    USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GRXFSIZ, RX_FIFO_HS_SIZE);
 8013474:	687b      	ldr	r3, [r7, #4]
 8013476:	68db      	ldr	r3, [r3, #12]
 8013478:	f44f 7200 	mov.w	r2, #512	; 0x200
 801347c:	625a      	str	r2, [r3, #36]	; 0x24
    nptxfifosize.b.startaddr = RX_FIFO_HS_SIZE;   
 801347e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8013482:	82bb      	strh	r3, [r7, #20]
    nptxfifosize.b.depth = TXH_NP_HS_FIFOSIZ;  
 8013484:	f44f 7380 	mov.w	r3, #256	; 0x100
 8013488:	82fb      	strh	r3, [r7, #22]
    USB_OTG_WRITE_REG32(&pdev->regs.GREGS->DIEPTXF0_HNPTXFSIZ, nptxfifosize.d32);
 801348a:	687b      	ldr	r3, [r7, #4]
 801348c:	68db      	ldr	r3, [r3, #12]
 801348e:	697a      	ldr	r2, [r7, #20]
 8013490:	629a      	str	r2, [r3, #40]	; 0x28
    
    ptxfifosize.b.startaddr = RX_FIFO_HS_SIZE + TXH_NP_HS_FIFOSIZ;
 8013492:	f44f 7340 	mov.w	r3, #768	; 0x300
 8013496:	823b      	strh	r3, [r7, #16]
    ptxfifosize.b.depth     = TXH_P_HS_FIFOSIZ;
 8013498:	f44f 7380 	mov.w	r3, #256	; 0x100
 801349c:	827b      	strh	r3, [r7, #18]
    USB_OTG_WRITE_REG32(&pdev->regs.GREGS->HPTXFSIZ, ptxfifosize.d32);      
 801349e:	687b      	ldr	r3, [r7, #4]
 80134a0:	68db      	ldr	r3, [r3, #12]
 80134a2:	693a      	ldr	r2, [r7, #16]
 80134a4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  gotgctl.b.hstsethnpen = 1;
  USB_OTG_MODIFY_REG32( &pdev->regs.GREGS->GOTGCTL, gotgctl.d32, 0);
#endif
  
  /* Make sure the FIFOs are flushed. */
  USB_OTG_FlushTxFifo(pdev, 0x10 );         /* all Tx FIFOs */
 80134a8:	2110      	movs	r1, #16
 80134aa:	6878      	ldr	r0, [r7, #4]
 80134ac:	f7ff fec0 	bl	8013230 <USB_OTG_FlushTxFifo>
  USB_OTG_FlushRxFifo(pdev);
 80134b0:	6878      	ldr	r0, [r7, #4]
 80134b2:	f7ff fef5 	bl	80132a0 <USB_OTG_FlushRxFifo>
  
  
  /* Clear all pending HC Interrupts */
  for (i = 0; i < pdev->cfg.host_channels; i++)
 80134b6:	2300      	movs	r3, #0
 80134b8:	61fb      	str	r3, [r7, #28]
 80134ba:	e013      	b.n	80134e4 <USB_OTG_CoreInitHost+0xdc>
  {
    USB_OTG_WRITE_REG32( &pdev->regs.HC_REGS[i]->HCINT, 0xFFFFFFFF );
 80134bc:	687a      	ldr	r2, [r7, #4]
 80134be:	69fb      	ldr	r3, [r7, #28]
 80134c0:	3322      	adds	r3, #34	; 0x22
 80134c2:	009b      	lsls	r3, r3, #2
 80134c4:	4413      	add	r3, r2
 80134c6:	689b      	ldr	r3, [r3, #8]
 80134c8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80134cc:	609a      	str	r2, [r3, #8]
    USB_OTG_WRITE_REG32( &pdev->regs.HC_REGS[i]->HCINTMSK, 0 );
 80134ce:	687a      	ldr	r2, [r7, #4]
 80134d0:	69fb      	ldr	r3, [r7, #28]
 80134d2:	3322      	adds	r3, #34	; 0x22
 80134d4:	009b      	lsls	r3, r3, #2
 80134d6:	4413      	add	r3, r2
 80134d8:	689b      	ldr	r3, [r3, #8]
 80134da:	2200      	movs	r2, #0
 80134dc:	60da      	str	r2, [r3, #12]
  for (i = 0; i < pdev->cfg.host_channels; i++)
 80134de:	69fb      	ldr	r3, [r7, #28]
 80134e0:	3301      	adds	r3, #1
 80134e2:	61fb      	str	r3, [r7, #28]
 80134e4:	687b      	ldr	r3, [r7, #4]
 80134e6:	781b      	ldrb	r3, [r3, #0]
 80134e8:	461a      	mov	r2, r3
 80134ea:	69fb      	ldr	r3, [r7, #28]
 80134ec:	4293      	cmp	r3, r2
 80134ee:	d3e5      	bcc.n	80134bc <USB_OTG_CoreInitHost+0xb4>
  }
#ifndef USE_OTG_MODE
  USB_OTG_DriveVbus(pdev, 1);
 80134f0:	2101      	movs	r1, #1
 80134f2:	6878      	ldr	r0, [r7, #4]
 80134f4:	f000 f81c 	bl	8013530 <USB_OTG_DriveVbus>
#endif
  
  USB_OTG_EnableHostInt(pdev);
 80134f8:	6878      	ldr	r0, [r7, #4]
 80134fa:	f000 f856 	bl	80135aa <USB_OTG_EnableHostInt>
  return status;
 80134fe:	7efb      	ldrb	r3, [r7, #27]
}
 8013500:	4618      	mov	r0, r3
 8013502:	3720      	adds	r7, #32
 8013504:	46bd      	mov	sp, r7
 8013506:	bd80      	pop	{r7, pc}

08013508 <USB_OTG_IsEvenFrame>:
*         This function returns the frame number for sof packet
* @param  pdev : Selected device
* @retval Frame number
*/
uint8_t USB_OTG_IsEvenFrame (USB_OTG_CORE_HANDLE *pdev) 
{
 8013508:	b480      	push	{r7}
 801350a:	b083      	sub	sp, #12
 801350c:	af00      	add	r7, sp, #0
 801350e:	6078      	str	r0, [r7, #4]
  return !(USB_OTG_READ_REG32(&pdev->regs.HREGS->HFNUM) & 0x1);
 8013510:	687b      	ldr	r3, [r7, #4]
 8013512:	695b      	ldr	r3, [r3, #20]
 8013514:	689b      	ldr	r3, [r3, #8]
 8013516:	f003 0301 	and.w	r3, r3, #1
 801351a:	2b00      	cmp	r3, #0
 801351c:	bf0c      	ite	eq
 801351e:	2301      	moveq	r3, #1
 8013520:	2300      	movne	r3, #0
 8013522:	b2db      	uxtb	r3, r3
}
 8013524:	4618      	mov	r0, r3
 8013526:	370c      	adds	r7, #12
 8013528:	46bd      	mov	sp, r7
 801352a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801352e:	4770      	bx	lr

08013530 <USB_OTG_DriveVbus>:
* @param  pdev : Selected device
* @param  state : VBUS state
* @retval None
*/
void USB_OTG_DriveVbus (USB_OTG_CORE_HANDLE *pdev, uint8_t state)
{
 8013530:	b580      	push	{r7, lr}
 8013532:	b084      	sub	sp, #16
 8013534:	af00      	add	r7, sp, #0
 8013536:	6078      	str	r0, [r7, #4]
 8013538:	460b      	mov	r3, r1
 801353a:	70fb      	strb	r3, [r7, #3]
  USB_OTG_HPRT0_TypeDef     hprt0;
  
  hprt0.d32 = 0;
 801353c:	2300      	movs	r3, #0
 801353e:	60fb      	str	r3, [r7, #12]
  
  /* enable disable the external charge pump */
  USB_OTG_BSP_DriveVBUS(pdev, state);
 8013540:	78fb      	ldrb	r3, [r7, #3]
 8013542:	4619      	mov	r1, r3
 8013544:	6878      	ldr	r0, [r7, #4]
 8013546:	f7ff fb8c 	bl	8012c62 <USB_OTG_BSP_DriveVBUS>
  
  /* Turn on the Host port power. */
  hprt0.d32 = USB_OTG_ReadHPRT0(pdev);
 801354a:	6878      	ldr	r0, [r7, #4]
 801354c:	f000 f88a 	bl	8013664 <USB_OTG_ReadHPRT0>
 8013550:	4603      	mov	r3, r0
 8013552:	60fb      	str	r3, [r7, #12]
  if ((hprt0.b.prtpwr == 0 ) && (state == 1 ))
 8013554:	7b7b      	ldrb	r3, [r7, #13]
 8013556:	f003 0310 	and.w	r3, r3, #16
 801355a:	b2db      	uxtb	r3, r3
 801355c:	2b00      	cmp	r3, #0
 801355e:	d10b      	bne.n	8013578 <USB_OTG_DriveVbus+0x48>
 8013560:	78fb      	ldrb	r3, [r7, #3]
 8013562:	2b01      	cmp	r3, #1
 8013564:	d108      	bne.n	8013578 <USB_OTG_DriveVbus+0x48>
  {
    hprt0.b.prtpwr = 1;
 8013566:	7b7b      	ldrb	r3, [r7, #13]
 8013568:	f043 0310 	orr.w	r3, r3, #16
 801356c:	737b      	strb	r3, [r7, #13]
    USB_OTG_WRITE_REG32(pdev->regs.HPRT0, hprt0.d32);
 801356e:	687b      	ldr	r3, [r7, #4]
 8013570:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8013574:	68fa      	ldr	r2, [r7, #12]
 8013576:	601a      	str	r2, [r3, #0]
  }
  if ((hprt0.b.prtpwr == 1 ) && (state == 0 ))
 8013578:	7b7b      	ldrb	r3, [r7, #13]
 801357a:	f003 0310 	and.w	r3, r3, #16
 801357e:	b2db      	uxtb	r3, r3
 8013580:	2b00      	cmp	r3, #0
 8013582:	d00b      	beq.n	801359c <USB_OTG_DriveVbus+0x6c>
 8013584:	78fb      	ldrb	r3, [r7, #3]
 8013586:	2b00      	cmp	r3, #0
 8013588:	d108      	bne.n	801359c <USB_OTG_DriveVbus+0x6c>
  {
    hprt0.b.prtpwr = 0;
 801358a:	7b7b      	ldrb	r3, [r7, #13]
 801358c:	f36f 1304 	bfc	r3, #4, #1
 8013590:	737b      	strb	r3, [r7, #13]
    USB_OTG_WRITE_REG32(pdev->regs.HPRT0, hprt0.d32);
 8013592:	687b      	ldr	r3, [r7, #4]
 8013594:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8013598:	68fa      	ldr	r2, [r7, #12]
 801359a:	601a      	str	r2, [r3, #0]
  }
  
  USB_OTG_BSP_mDelay(200);
 801359c:	20c8      	movs	r0, #200	; 0xc8
 801359e:	f7ff fbc3 	bl	8012d28 <USB_OTG_BSP_mDelay>
}
 80135a2:	bf00      	nop
 80135a4:	3710      	adds	r7, #16
 80135a6:	46bd      	mov	sp, r7
 80135a8:	bd80      	pop	{r7, pc}

080135aa <USB_OTG_EnableHostInt>:
* @brief  USB_OTG_EnableHostInt: Enables the Host mode interrupts
* @param  pdev : Selected device
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_EnableHostInt(USB_OTG_CORE_HANDLE *pdev)
{
 80135aa:	b580      	push	{r7, lr}
 80135ac:	b084      	sub	sp, #16
 80135ae:	af00      	add	r7, sp, #0
 80135b0:	6078      	str	r0, [r7, #4]
  USB_OTG_STS       status = USB_OTG_OK;
 80135b2:	2300      	movs	r3, #0
 80135b4:	73fb      	strb	r3, [r7, #15]
  USB_OTG_GINTMSK_TypeDef  intmsk;
  intmsk.d32 = 0;
 80135b6:	2300      	movs	r3, #0
 80135b8:	60bb      	str	r3, [r7, #8]
  /* Disable all interrupts. */
  USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GINTMSK, 0);
 80135ba:	687b      	ldr	r3, [r7, #4]
 80135bc:	68db      	ldr	r3, [r3, #12]
 80135be:	2200      	movs	r2, #0
 80135c0:	619a      	str	r2, [r3, #24]
  
  /* Clear any pending interrupts. */
  USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GINTSTS, 0xFFFFFFFF);
 80135c2:	687b      	ldr	r3, [r7, #4]
 80135c4:	68db      	ldr	r3, [r3, #12]
 80135c6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80135ca:	615a      	str	r2, [r3, #20]
  
  /* Enable the common interrupts */
  USB_OTG_EnableCommonInt(pdev);
 80135cc:	6878      	ldr	r0, [r7, #4]
 80135ce:	f7ff fbc5 	bl	8012d5c <USB_OTG_EnableCommonInt>
  
  if (pdev->cfg.dma_enable == 0)
 80135d2:	687b      	ldr	r3, [r7, #4]
 80135d4:	78db      	ldrb	r3, [r3, #3]
 80135d6:	2b00      	cmp	r3, #0
 80135d8:	d103      	bne.n	80135e2 <USB_OTG_EnableHostInt+0x38>
  {  
    intmsk.b.rxstsqlvl  = 1;
 80135da:	7a3b      	ldrb	r3, [r7, #8]
 80135dc:	f043 0310 	orr.w	r3, r3, #16
 80135e0:	723b      	strb	r3, [r7, #8]
  }  
  intmsk.b.portintr   = 1;
 80135e2:	7afb      	ldrb	r3, [r7, #11]
 80135e4:	f043 0301 	orr.w	r3, r3, #1
 80135e8:	72fb      	strb	r3, [r7, #11]
  intmsk.b.hcintr     = 1;
 80135ea:	7afb      	ldrb	r3, [r7, #11]
 80135ec:	f043 0302 	orr.w	r3, r3, #2
 80135f0:	72fb      	strb	r3, [r7, #11]
  intmsk.b.disconnect = 1;  
 80135f2:	7afb      	ldrb	r3, [r7, #11]
 80135f4:	f043 0320 	orr.w	r3, r3, #32
 80135f8:	72fb      	strb	r3, [r7, #11]
  intmsk.b.sofintr    = 1;  
 80135fa:	7a3b      	ldrb	r3, [r7, #8]
 80135fc:	f043 0308 	orr.w	r3, r3, #8
 8013600:	723b      	strb	r3, [r7, #8]
  intmsk.b.incomplisoout  = 1; 
 8013602:	7abb      	ldrb	r3, [r7, #10]
 8013604:	f043 0320 	orr.w	r3, r3, #32
 8013608:	72bb      	strb	r3, [r7, #10]
  USB_OTG_MODIFY_REG32(&pdev->regs.GREGS->GINTMSK, intmsk.d32, intmsk.d32);
 801360a:	687b      	ldr	r3, [r7, #4]
 801360c:	68db      	ldr	r3, [r3, #12]
 801360e:	699a      	ldr	r2, [r3, #24]
 8013610:	68bb      	ldr	r3, [r7, #8]
 8013612:	43db      	mvns	r3, r3
 8013614:	ea02 0103 	and.w	r1, r2, r3
 8013618:	68ba      	ldr	r2, [r7, #8]
 801361a:	687b      	ldr	r3, [r7, #4]
 801361c:	68db      	ldr	r3, [r3, #12]
 801361e:	430a      	orrs	r2, r1
 8013620:	619a      	str	r2, [r3, #24]
  return status;
 8013622:	7bfb      	ldrb	r3, [r7, #15]
}
 8013624:	4618      	mov	r0, r3
 8013626:	3710      	adds	r7, #16
 8013628:	46bd      	mov	sp, r7
 801362a:	bd80      	pop	{r7, pc}

0801362c <USB_OTG_InitFSLSPClkSel>:
* @param  pdev : Selected device
* @param  freq : clock frequency
* @retval None
*/
void USB_OTG_InitFSLSPClkSel(USB_OTG_CORE_HANDLE *pdev , uint8_t freq)
{
 801362c:	b480      	push	{r7}
 801362e:	b085      	sub	sp, #20
 8013630:	af00      	add	r7, sp, #0
 8013632:	6078      	str	r0, [r7, #4]
 8013634:	460b      	mov	r3, r1
 8013636:	70fb      	strb	r3, [r7, #3]
  USB_OTG_HCFG_TypeDef   hcfg;
  
  hcfg.d32 = USB_OTG_READ_REG32(&pdev->regs.HREGS->HCFG);
 8013638:	687b      	ldr	r3, [r7, #4]
 801363a:	695b      	ldr	r3, [r3, #20]
 801363c:	681b      	ldr	r3, [r3, #0]
 801363e:	60fb      	str	r3, [r7, #12]
  hcfg.b.fslspclksel = freq;
 8013640:	78fb      	ldrb	r3, [r7, #3]
 8013642:	f003 0303 	and.w	r3, r3, #3
 8013646:	b2da      	uxtb	r2, r3
 8013648:	7b3b      	ldrb	r3, [r7, #12]
 801364a:	f362 0301 	bfi	r3, r2, #0, #2
 801364e:	733b      	strb	r3, [r7, #12]
  USB_OTG_WRITE_REG32(&pdev->regs.HREGS->HCFG, hcfg.d32);
 8013650:	687b      	ldr	r3, [r7, #4]
 8013652:	695b      	ldr	r3, [r3, #20]
 8013654:	68fa      	ldr	r2, [r7, #12]
 8013656:	601a      	str	r2, [r3, #0]
}
 8013658:	bf00      	nop
 801365a:	3714      	adds	r7, #20
 801365c:	46bd      	mov	sp, r7
 801365e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013662:	4770      	bx	lr

08013664 <USB_OTG_ReadHPRT0>:
* @brief  USB_OTG_ReadHPRT0 : Reads HPRT0 to modify later
* @param  pdev : Selected device
* @retval HPRT0 value
*/
uint32_t USB_OTG_ReadHPRT0(USB_OTG_CORE_HANDLE *pdev)
{
 8013664:	b480      	push	{r7}
 8013666:	b085      	sub	sp, #20
 8013668:	af00      	add	r7, sp, #0
 801366a:	6078      	str	r0, [r7, #4]
  USB_OTG_HPRT0_TypeDef  hprt0;
  
  hprt0.d32 = USB_OTG_READ_REG32(pdev->regs.HPRT0);
 801366c:	687b      	ldr	r3, [r7, #4]
 801366e:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8013672:	681b      	ldr	r3, [r3, #0]
 8013674:	60fb      	str	r3, [r7, #12]
  hprt0.b.prtena = 0;
 8013676:	7b3b      	ldrb	r3, [r7, #12]
 8013678:	f36f 0382 	bfc	r3, #2, #1
 801367c:	733b      	strb	r3, [r7, #12]
  hprt0.b.prtconndet = 0;
 801367e:	7b3b      	ldrb	r3, [r7, #12]
 8013680:	f36f 0341 	bfc	r3, #1, #1
 8013684:	733b      	strb	r3, [r7, #12]
  hprt0.b.prtenchng = 0;
 8013686:	7b3b      	ldrb	r3, [r7, #12]
 8013688:	f36f 03c3 	bfc	r3, #3, #1
 801368c:	733b      	strb	r3, [r7, #12]
  hprt0.b.prtovrcurrchng = 0;
 801368e:	7b3b      	ldrb	r3, [r7, #12]
 8013690:	f36f 1345 	bfc	r3, #5, #1
 8013694:	733b      	strb	r3, [r7, #12]
  return hprt0.d32;
 8013696:	68fb      	ldr	r3, [r7, #12]
}
 8013698:	4618      	mov	r0, r3
 801369a:	3714      	adds	r7, #20
 801369c:	46bd      	mov	sp, r7
 801369e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136a2:	4770      	bx	lr

080136a4 <USB_OTG_ReadHostAllChannels_intr>:
* @brief  USB_OTG_ReadHostAllChannels_intr : Register PCD Callbacks
* @param  pdev : Selected device
* @retval Status
*/
uint32_t USB_OTG_ReadHostAllChannels_intr (USB_OTG_CORE_HANDLE *pdev)
{
 80136a4:	b480      	push	{r7}
 80136a6:	b083      	sub	sp, #12
 80136a8:	af00      	add	r7, sp, #0
 80136aa:	6078      	str	r0, [r7, #4]
  return (USB_OTG_READ_REG32 (&pdev->regs.HREGS->HAINT));
 80136ac:	687b      	ldr	r3, [r7, #4]
 80136ae:	695b      	ldr	r3, [r3, #20]
 80136b0:	695b      	ldr	r3, [r3, #20]
}
 80136b2:	4618      	mov	r0, r3
 80136b4:	370c      	adds	r7, #12
 80136b6:	46bd      	mov	sp, r7
 80136b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136bc:	4770      	bx	lr

080136be <USB_OTG_ResetPort>:
* @retval status
* @note : (1)The application must wait at least 10 ms (+ 10 ms security)
*   before clearing the reset bit.
*/
uint32_t USB_OTG_ResetPort(USB_OTG_CORE_HANDLE *pdev)
{
 80136be:	b580      	push	{r7, lr}
 80136c0:	b084      	sub	sp, #16
 80136c2:	af00      	add	r7, sp, #0
 80136c4:	6078      	str	r0, [r7, #4]
  USB_OTG_HPRT0_TypeDef  hprt0;
  
  hprt0.d32 = USB_OTG_ReadHPRT0(pdev);
 80136c6:	6878      	ldr	r0, [r7, #4]
 80136c8:	f7ff ffcc 	bl	8013664 <USB_OTG_ReadHPRT0>
 80136cc:	4603      	mov	r3, r0
 80136ce:	60fb      	str	r3, [r7, #12]
  hprt0.b.prtrst = 1;
 80136d0:	7b7b      	ldrb	r3, [r7, #13]
 80136d2:	f043 0301 	orr.w	r3, r3, #1
 80136d6:	737b      	strb	r3, [r7, #13]
  USB_OTG_WRITE_REG32(pdev->regs.HPRT0, hprt0.d32);
 80136d8:	687b      	ldr	r3, [r7, #4]
 80136da:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 80136de:	68fa      	ldr	r2, [r7, #12]
 80136e0:	601a      	str	r2, [r3, #0]
  USB_OTG_BSP_mDelay (10);                                /* See Note #1 */
 80136e2:	200a      	movs	r0, #10
 80136e4:	f7ff fb20 	bl	8012d28 <USB_OTG_BSP_mDelay>
  hprt0.b.prtrst = 0;
 80136e8:	7b7b      	ldrb	r3, [r7, #13]
 80136ea:	f36f 0300 	bfc	r3, #0, #1
 80136ee:	737b      	strb	r3, [r7, #13]
  USB_OTG_WRITE_REG32(pdev->regs.HPRT0, hprt0.d32);
 80136f0:	687b      	ldr	r3, [r7, #4]
 80136f2:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 80136f6:	68fa      	ldr	r2, [r7, #12]
 80136f8:	601a      	str	r2, [r3, #0]
  USB_OTG_BSP_mDelay (20);   
 80136fa:	2014      	movs	r0, #20
 80136fc:	f7ff fb14 	bl	8012d28 <USB_OTG_BSP_mDelay>
  return 1;
 8013700:	2301      	movs	r3, #1
}
 8013702:	4618      	mov	r0, r3
 8013704:	3710      	adds	r7, #16
 8013706:	46bd      	mov	sp, r7
 8013708:	bd80      	pop	{r7, pc}

0801370a <USB_OTG_HC_Init>:
* @param  pdev : Selected device
* @param  hc_num : channel number
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_HC_Init(USB_OTG_CORE_HANDLE *pdev , uint8_t hc_num)
{
 801370a:	b480      	push	{r7}
 801370c:	b089      	sub	sp, #36	; 0x24
 801370e:	af00      	add	r7, sp, #0
 8013710:	6078      	str	r0, [r7, #4]
 8013712:	460b      	mov	r3, r1
 8013714:	70fb      	strb	r3, [r7, #3]
  USB_OTG_STS status = USB_OTG_OK;
 8013716:	2300      	movs	r3, #0
 8013718:	77fb      	strb	r3, [r7, #31]
  uint32_t intr_enable = 0;
 801371a:	2300      	movs	r3, #0
 801371c:	61bb      	str	r3, [r7, #24]
  USB_OTG_GINTMSK_TypeDef    gintmsk;
  USB_OTG_HCCHAR_TypeDef     hcchar;
  USB_OTG_HCINTn_TypeDef     hcint;
  
  
  gintmsk.d32 = 0;
 801371e:	2300      	movs	r3, #0
 8013720:	613b      	str	r3, [r7, #16]
  hcintmsk.d32 = 0;
 8013722:	2300      	movs	r3, #0
 8013724:	617b      	str	r3, [r7, #20]
  hcchar.d32 = 0;
 8013726:	2300      	movs	r3, #0
 8013728:	60fb      	str	r3, [r7, #12]
  
  /* Clear old interrupt conditions for this host channel. */
  hcint.d32 = 0xFFFFFFFF;
 801372a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801372e:	60bb      	str	r3, [r7, #8]
  USB_OTG_WRITE_REG32(&pdev->regs.HC_REGS[hc_num]->HCINT, hcint.d32);
 8013730:	78fb      	ldrb	r3, [r7, #3]
 8013732:	687a      	ldr	r2, [r7, #4]
 8013734:	3322      	adds	r3, #34	; 0x22
 8013736:	009b      	lsls	r3, r3, #2
 8013738:	4413      	add	r3, r2
 801373a:	689b      	ldr	r3, [r3, #8]
 801373c:	68ba      	ldr	r2, [r7, #8]
 801373e:	609a      	str	r2, [r3, #8]
  
  /* Enable channel interrupts required for this transfer. */
  hcintmsk.d32 = 0;
 8013740:	2300      	movs	r3, #0
 8013742:	617b      	str	r3, [r7, #20]
  
  if (pdev->cfg.dma_enable == 1)
 8013744:	687b      	ldr	r3, [r7, #4]
 8013746:	78db      	ldrb	r3, [r3, #3]
 8013748:	2b01      	cmp	r3, #1
 801374a:	d103      	bne.n	8013754 <USB_OTG_HC_Init+0x4a>
  {
    hcintmsk.b.ahberr = 1;
 801374c:	7d3b      	ldrb	r3, [r7, #20]
 801374e:	f043 0304 	orr.w	r3, r3, #4
 8013752:	753b      	strb	r3, [r7, #20]
  }
  
  switch (pdev->host.hc[hc_num].ep_type) 
 8013754:	78fb      	ldrb	r3, [r7, #3]
 8013756:	687a      	ldr	r2, [r7, #4]
 8013758:	015b      	lsls	r3, r3, #5
 801375a:	4413      	add	r3, r2
 801375c:	f203 33b1 	addw	r3, r3, #945	; 0x3b1
 8013760:	781b      	ldrb	r3, [r3, #0]
 8013762:	2b03      	cmp	r3, #3
 8013764:	f200 8089 	bhi.w	801387a <USB_OTG_HC_Init+0x170>
 8013768:	a201      	add	r2, pc, #4	; (adr r2, 8013770 <USB_OTG_HC_Init+0x66>)
 801376a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801376e:	bf00      	nop
 8013770:	08013781 	.word	0x08013781
 8013774:	08013835 	.word	0x08013835
 8013778:	08013781 	.word	0x08013781
 801377c:	080137e9 	.word	0x080137e9
  {
  case EP_TYPE_CTRL:
  case EP_TYPE_BULK:
    hcintmsk.b.xfercompl = 1;
 8013780:	7d3b      	ldrb	r3, [r7, #20]
 8013782:	f043 0301 	orr.w	r3, r3, #1
 8013786:	753b      	strb	r3, [r7, #20]
    hcintmsk.b.stall = 1;
 8013788:	7d3b      	ldrb	r3, [r7, #20]
 801378a:	f043 0308 	orr.w	r3, r3, #8
 801378e:	753b      	strb	r3, [r7, #20]
    hcintmsk.b.xacterr = 1;
 8013790:	7d3b      	ldrb	r3, [r7, #20]
 8013792:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013796:	753b      	strb	r3, [r7, #20]
    hcintmsk.b.datatglerr = 1;
 8013798:	7d7b      	ldrb	r3, [r7, #21]
 801379a:	f043 0304 	orr.w	r3, r3, #4
 801379e:	757b      	strb	r3, [r7, #21]
    hcintmsk.b.nak = 1;  
 80137a0:	7d3b      	ldrb	r3, [r7, #20]
 80137a2:	f043 0310 	orr.w	r3, r3, #16
 80137a6:	753b      	strb	r3, [r7, #20]
    if (pdev->host.hc[hc_num].ep_is_in) 
 80137a8:	78fb      	ldrb	r3, [r7, #3]
 80137aa:	687a      	ldr	r2, [r7, #4]
 80137ac:	015b      	lsls	r3, r3, #5
 80137ae:	4413      	add	r3, r2
 80137b0:	f203 33ae 	addw	r3, r3, #942	; 0x3ae
 80137b4:	781b      	ldrb	r3, [r3, #0]
 80137b6:	2b00      	cmp	r3, #0
 80137b8:	d004      	beq.n	80137c4 <USB_OTG_HC_Init+0xba>
    {
      hcintmsk.b.bblerr = 1;
 80137ba:	7d7b      	ldrb	r3, [r7, #21]
 80137bc:	f043 0301 	orr.w	r3, r3, #1
 80137c0:	757b      	strb	r3, [r7, #21]
      if (pdev->host.hc[hc_num].do_ping) 
      {
        hcintmsk.b.ack = 1;
      }
    }
    break;
 80137c2:	e055      	b.n	8013870 <USB_OTG_HC_Init+0x166>
      hcintmsk.b.nyet = 1;
 80137c4:	7d3b      	ldrb	r3, [r7, #20]
 80137c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80137ca:	753b      	strb	r3, [r7, #20]
      if (pdev->host.hc[hc_num].do_ping) 
 80137cc:	78fb      	ldrb	r3, [r7, #3]
 80137ce:	687a      	ldr	r2, [r7, #4]
 80137d0:	015b      	lsls	r3, r3, #5
 80137d2:	4413      	add	r3, r2
 80137d4:	f503 736c 	add.w	r3, r3, #944	; 0x3b0
 80137d8:	781b      	ldrb	r3, [r3, #0]
 80137da:	2b00      	cmp	r3, #0
 80137dc:	d048      	beq.n	8013870 <USB_OTG_HC_Init+0x166>
        hcintmsk.b.ack = 1;
 80137de:	7d3b      	ldrb	r3, [r7, #20]
 80137e0:	f043 0320 	orr.w	r3, r3, #32
 80137e4:	753b      	strb	r3, [r7, #20]
    break;
 80137e6:	e043      	b.n	8013870 <USB_OTG_HC_Init+0x166>
  case EP_TYPE_INTR:
    hcintmsk.b.xfercompl = 1;
 80137e8:	7d3b      	ldrb	r3, [r7, #20]
 80137ea:	f043 0301 	orr.w	r3, r3, #1
 80137ee:	753b      	strb	r3, [r7, #20]
    hcintmsk.b.nak = 1;
 80137f0:	7d3b      	ldrb	r3, [r7, #20]
 80137f2:	f043 0310 	orr.w	r3, r3, #16
 80137f6:	753b      	strb	r3, [r7, #20]
    hcintmsk.b.stall = 1;
 80137f8:	7d3b      	ldrb	r3, [r7, #20]
 80137fa:	f043 0308 	orr.w	r3, r3, #8
 80137fe:	753b      	strb	r3, [r7, #20]
    hcintmsk.b.xacterr = 1;
 8013800:	7d3b      	ldrb	r3, [r7, #20]
 8013802:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013806:	753b      	strb	r3, [r7, #20]
    hcintmsk.b.datatglerr = 1;
 8013808:	7d7b      	ldrb	r3, [r7, #21]
 801380a:	f043 0304 	orr.w	r3, r3, #4
 801380e:	757b      	strb	r3, [r7, #21]
    hcintmsk.b.frmovrun = 1;
 8013810:	7d7b      	ldrb	r3, [r7, #21]
 8013812:	f043 0302 	orr.w	r3, r3, #2
 8013816:	757b      	strb	r3, [r7, #21]
    
    if (pdev->host.hc[hc_num].ep_is_in) 
 8013818:	78fb      	ldrb	r3, [r7, #3]
 801381a:	687a      	ldr	r2, [r7, #4]
 801381c:	015b      	lsls	r3, r3, #5
 801381e:	4413      	add	r3, r2
 8013820:	f203 33ae 	addw	r3, r3, #942	; 0x3ae
 8013824:	781b      	ldrb	r3, [r3, #0]
 8013826:	2b00      	cmp	r3, #0
 8013828:	d024      	beq.n	8013874 <USB_OTG_HC_Init+0x16a>
    {
      hcintmsk.b.bblerr = 1;
 801382a:	7d7b      	ldrb	r3, [r7, #21]
 801382c:	f043 0301 	orr.w	r3, r3, #1
 8013830:	757b      	strb	r3, [r7, #21]
    }
    
    break;
 8013832:	e01f      	b.n	8013874 <USB_OTG_HC_Init+0x16a>
  case EP_TYPE_ISOC:
    hcintmsk.b.xfercompl = 1;
 8013834:	7d3b      	ldrb	r3, [r7, #20]
 8013836:	f043 0301 	orr.w	r3, r3, #1
 801383a:	753b      	strb	r3, [r7, #20]
    hcintmsk.b.frmovrun = 1;
 801383c:	7d7b      	ldrb	r3, [r7, #21]
 801383e:	f043 0302 	orr.w	r3, r3, #2
 8013842:	757b      	strb	r3, [r7, #21]
    hcintmsk.b.ack = 1;
 8013844:	7d3b      	ldrb	r3, [r7, #20]
 8013846:	f043 0320 	orr.w	r3, r3, #32
 801384a:	753b      	strb	r3, [r7, #20]
    
    if (pdev->host.hc[hc_num].ep_is_in) 
 801384c:	78fb      	ldrb	r3, [r7, #3]
 801384e:	687a      	ldr	r2, [r7, #4]
 8013850:	015b      	lsls	r3, r3, #5
 8013852:	4413      	add	r3, r2
 8013854:	f203 33ae 	addw	r3, r3, #942	; 0x3ae
 8013858:	781b      	ldrb	r3, [r3, #0]
 801385a:	2b00      	cmp	r3, #0
 801385c:	d00c      	beq.n	8013878 <USB_OTG_HC_Init+0x16e>
    {
      hcintmsk.b.xacterr = 1;
 801385e:	7d3b      	ldrb	r3, [r7, #20]
 8013860:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013864:	753b      	strb	r3, [r7, #20]
      hcintmsk.b.bblerr = 1;
 8013866:	7d7b      	ldrb	r3, [r7, #21]
 8013868:	f043 0301 	orr.w	r3, r3, #1
 801386c:	757b      	strb	r3, [r7, #21]
    }
    break;
 801386e:	e003      	b.n	8013878 <USB_OTG_HC_Init+0x16e>
    break;
 8013870:	bf00      	nop
 8013872:	e002      	b.n	801387a <USB_OTG_HC_Init+0x170>
    break;
 8013874:	bf00      	nop
 8013876:	e000      	b.n	801387a <USB_OTG_HC_Init+0x170>
    break;
 8013878:	bf00      	nop
  }
  
  
  USB_OTG_WRITE_REG32(&pdev->regs.HC_REGS[hc_num]->HCINTMSK, hcintmsk.d32);
 801387a:	78fb      	ldrb	r3, [r7, #3]
 801387c:	687a      	ldr	r2, [r7, #4]
 801387e:	3322      	adds	r3, #34	; 0x22
 8013880:	009b      	lsls	r3, r3, #2
 8013882:	4413      	add	r3, r2
 8013884:	689b      	ldr	r3, [r3, #8]
 8013886:	697a      	ldr	r2, [r7, #20]
 8013888:	60da      	str	r2, [r3, #12]
  
  
  /* Enable the top level host channel interrupt. */
  intr_enable = (1 << hc_num);
 801388a:	78fb      	ldrb	r3, [r7, #3]
 801388c:	2201      	movs	r2, #1
 801388e:	fa02 f303 	lsl.w	r3, r2, r3
 8013892:	61bb      	str	r3, [r7, #24]
  USB_OTG_MODIFY_REG32(&pdev->regs.HREGS->HAINTMSK, 0, intr_enable);
 8013894:	687b      	ldr	r3, [r7, #4]
 8013896:	695b      	ldr	r3, [r3, #20]
 8013898:	6999      	ldr	r1, [r3, #24]
 801389a:	687b      	ldr	r3, [r7, #4]
 801389c:	695b      	ldr	r3, [r3, #20]
 801389e:	69ba      	ldr	r2, [r7, #24]
 80138a0:	430a      	orrs	r2, r1
 80138a2:	619a      	str	r2, [r3, #24]
  
  /* Make sure host channel interrupts are enabled. */
  gintmsk.b.hcintr = 1;
 80138a4:	7cfb      	ldrb	r3, [r7, #19]
 80138a6:	f043 0302 	orr.w	r3, r3, #2
 80138aa:	74fb      	strb	r3, [r7, #19]
  USB_OTG_MODIFY_REG32(&pdev->regs.GREGS->GINTMSK, 0, gintmsk.d32);
 80138ac:	687b      	ldr	r3, [r7, #4]
 80138ae:	68db      	ldr	r3, [r3, #12]
 80138b0:	6999      	ldr	r1, [r3, #24]
 80138b2:	693a      	ldr	r2, [r7, #16]
 80138b4:	687b      	ldr	r3, [r7, #4]
 80138b6:	68db      	ldr	r3, [r3, #12]
 80138b8:	430a      	orrs	r2, r1
 80138ba:	619a      	str	r2, [r3, #24]
  
  /* Program the HCCHAR register */
  hcchar.d32 = 0;
 80138bc:	2300      	movs	r3, #0
 80138be:	60fb      	str	r3, [r7, #12]
  hcchar.b.devaddr = pdev->host.hc[hc_num].dev_addr;
 80138c0:	78fb      	ldrb	r3, [r7, #3]
 80138c2:	687a      	ldr	r2, [r7, #4]
 80138c4:	015b      	lsls	r3, r3, #5
 80138c6:	4413      	add	r3, r2
 80138c8:	f503 736b 	add.w	r3, r3, #940	; 0x3ac
 80138cc:	781b      	ldrb	r3, [r3, #0]
 80138ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80138d2:	b2da      	uxtb	r2, r3
 80138d4:	89fb      	ldrh	r3, [r7, #14]
 80138d6:	f362 138c 	bfi	r3, r2, #6, #7
 80138da:	81fb      	strh	r3, [r7, #14]
  hcchar.b.epnum   = pdev->host.hc[hc_num].ep_num;
 80138dc:	78fb      	ldrb	r3, [r7, #3]
 80138de:	687a      	ldr	r2, [r7, #4]
 80138e0:	015b      	lsls	r3, r3, #5
 80138e2:	4413      	add	r3, r2
 80138e4:	f203 33ad 	addw	r3, r3, #941	; 0x3ad
 80138e8:	781b      	ldrb	r3, [r3, #0]
 80138ea:	f003 030f 	and.w	r3, r3, #15
 80138ee:	b2da      	uxtb	r2, r3
 80138f0:	7b7b      	ldrb	r3, [r7, #13]
 80138f2:	f362 03c6 	bfi	r3, r2, #3, #4
 80138f6:	737b      	strb	r3, [r7, #13]
  hcchar.b.epdir   = pdev->host.hc[hc_num].ep_is_in;
 80138f8:	78fb      	ldrb	r3, [r7, #3]
 80138fa:	687a      	ldr	r2, [r7, #4]
 80138fc:	015b      	lsls	r3, r3, #5
 80138fe:	4413      	add	r3, r2
 8013900:	f203 33ae 	addw	r3, r3, #942	; 0x3ae
 8013904:	781b      	ldrb	r3, [r3, #0]
 8013906:	f003 0301 	and.w	r3, r3, #1
 801390a:	b2da      	uxtb	r2, r3
 801390c:	7b7b      	ldrb	r3, [r7, #13]
 801390e:	f362 13c7 	bfi	r3, r2, #7, #1
 8013912:	737b      	strb	r3, [r7, #13]
  hcchar.b.lspddev = (pdev->host.hc[hc_num].speed == HPRT0_PRTSPD_LOW_SPEED);
 8013914:	78fb      	ldrb	r3, [r7, #3]
 8013916:	687a      	ldr	r2, [r7, #4]
 8013918:	015b      	lsls	r3, r3, #5
 801391a:	4413      	add	r3, r2
 801391c:	f203 33af 	addw	r3, r3, #943	; 0x3af
 8013920:	781b      	ldrb	r3, [r3, #0]
 8013922:	2b02      	cmp	r3, #2
 8013924:	bf0c      	ite	eq
 8013926:	2301      	moveq	r3, #1
 8013928:	2300      	movne	r3, #0
 801392a:	b2da      	uxtb	r2, r3
 801392c:	7bbb      	ldrb	r3, [r7, #14]
 801392e:	f362 0341 	bfi	r3, r2, #1, #1
 8013932:	73bb      	strb	r3, [r7, #14]
  hcchar.b.eptype  = pdev->host.hc[hc_num].ep_type;
 8013934:	78fb      	ldrb	r3, [r7, #3]
 8013936:	687a      	ldr	r2, [r7, #4]
 8013938:	015b      	lsls	r3, r3, #5
 801393a:	4413      	add	r3, r2
 801393c:	f203 33b1 	addw	r3, r3, #945	; 0x3b1
 8013940:	781b      	ldrb	r3, [r3, #0]
 8013942:	f003 0303 	and.w	r3, r3, #3
 8013946:	b2da      	uxtb	r2, r3
 8013948:	7bbb      	ldrb	r3, [r7, #14]
 801394a:	f362 0383 	bfi	r3, r2, #2, #2
 801394e:	73bb      	strb	r3, [r7, #14]
  hcchar.b.mps     = pdev->host.hc[hc_num].max_packet;
 8013950:	78fb      	ldrb	r3, [r7, #3]
 8013952:	687a      	ldr	r2, [r7, #4]
 8013954:	015b      	lsls	r3, r3, #5
 8013956:	4413      	add	r3, r2
 8013958:	f203 33b2 	addw	r3, r3, #946	; 0x3b2
 801395c:	881b      	ldrh	r3, [r3, #0]
 801395e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8013962:	b29a      	uxth	r2, r3
 8013964:	89bb      	ldrh	r3, [r7, #12]
 8013966:	f362 030a 	bfi	r3, r2, #0, #11
 801396a:	81bb      	strh	r3, [r7, #12]
  if (pdev->host.hc[hc_num].ep_type == HCCHAR_INTR)
 801396c:	78fb      	ldrb	r3, [r7, #3]
 801396e:	687a      	ldr	r2, [r7, #4]
 8013970:	015b      	lsls	r3, r3, #5
 8013972:	4413      	add	r3, r2
 8013974:	f203 33b1 	addw	r3, r3, #945	; 0x3b1
 8013978:	781b      	ldrb	r3, [r3, #0]
 801397a:	2b03      	cmp	r3, #3
 801397c:	d103      	bne.n	8013986 <USB_OTG_HC_Init+0x27c>
  {
    hcchar.b.oddfrm  = 1;
 801397e:	7bfb      	ldrb	r3, [r7, #15]
 8013980:	f043 0320 	orr.w	r3, r3, #32
 8013984:	73fb      	strb	r3, [r7, #15]
  }
  USB_OTG_WRITE_REG32(&pdev->regs.HC_REGS[hc_num]->HCCHAR, hcchar.d32);
 8013986:	78fb      	ldrb	r3, [r7, #3]
 8013988:	687a      	ldr	r2, [r7, #4]
 801398a:	3322      	adds	r3, #34	; 0x22
 801398c:	009b      	lsls	r3, r3, #2
 801398e:	4413      	add	r3, r2
 8013990:	689b      	ldr	r3, [r3, #8]
 8013992:	68fa      	ldr	r2, [r7, #12]
 8013994:	601a      	str	r2, [r3, #0]
  return status;
 8013996:	7ffb      	ldrb	r3, [r7, #31]
}
 8013998:	4618      	mov	r0, r3
 801399a:	3724      	adds	r7, #36	; 0x24
 801399c:	46bd      	mov	sp, r7
 801399e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139a2:	4770      	bx	lr

080139a4 <USB_OTG_HC_StartXfer>:
* @param  pdev : Selected device
* @param  hc_num : channel number
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_HC_StartXfer(USB_OTG_CORE_HANDLE *pdev , uint8_t hc_num)
{
 80139a4:	b580      	push	{r7, lr}
 80139a6:	b08c      	sub	sp, #48	; 0x30
 80139a8:	af00      	add	r7, sp, #0
 80139aa:	6078      	str	r0, [r7, #4]
 80139ac:	460b      	mov	r3, r1
 80139ae:	70fb      	strb	r3, [r7, #3]
  USB_OTG_STS status = USB_OTG_OK;
 80139b0:	2300      	movs	r3, #0
 80139b2:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  USB_OTG_HCCHAR_TypeDef   hcchar;
  USB_OTG_HCTSIZn_TypeDef  hctsiz;
  USB_OTG_HNPTXSTS_TypeDef hnptxsts; 
  USB_OTG_HPTXSTS_TypeDef  hptxsts; 
  USB_OTG_GINTMSK_TypeDef  intmsk;
  uint16_t                 len_words = 0;   
 80139b6:	2300      	movs	r3, #0
 80139b8:	857b      	strh	r3, [r7, #42]	; 0x2a
  
  uint16_t num_packets;
  uint16_t max_hc_pkt_count;
  
  max_hc_pkt_count = 256;
 80139ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 80139be:	853b      	strh	r3, [r7, #40]	; 0x28
  hctsiz.d32 = 0;
 80139c0:	2300      	movs	r3, #0
 80139c2:	623b      	str	r3, [r7, #32]
  hcchar.d32 = 0;
 80139c4:	2300      	movs	r3, #0
 80139c6:	627b      	str	r3, [r7, #36]	; 0x24
  intmsk.d32 = 0;
 80139c8:	2300      	movs	r3, #0
 80139ca:	60bb      	str	r3, [r7, #8]
  
  /* Compute the expected number of packets associated to the transfer */
  if (pdev->host.hc[hc_num].xfer_len > 0)
 80139cc:	78fb      	ldrb	r3, [r7, #3]
 80139ce:	687a      	ldr	r2, [r7, #4]
 80139d0:	015b      	lsls	r3, r3, #5
 80139d2:	4413      	add	r3, r2
 80139d4:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 80139d8:	681b      	ldr	r3, [r3, #0]
 80139da:	2b00      	cmp	r3, #0
 80139dc:	d032      	beq.n	8013a44 <USB_OTG_HC_StartXfer+0xa0>
  {
    num_packets = (pdev->host.hc[hc_num].xfer_len + \
 80139de:	78fb      	ldrb	r3, [r7, #3]
 80139e0:	687a      	ldr	r2, [r7, #4]
 80139e2:	015b      	lsls	r3, r3, #5
 80139e4:	4413      	add	r3, r2
 80139e6:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 80139ea:	681b      	ldr	r3, [r3, #0]
      pdev->host.hc[hc_num].max_packet - 1) / pdev->host.hc[hc_num].max_packet;
 80139ec:	78fa      	ldrb	r2, [r7, #3]
 80139ee:	6879      	ldr	r1, [r7, #4]
 80139f0:	0152      	lsls	r2, r2, #5
 80139f2:	440a      	add	r2, r1
 80139f4:	f202 32b2 	addw	r2, r2, #946	; 0x3b2
 80139f8:	8812      	ldrh	r2, [r2, #0]
    num_packets = (pdev->host.hc[hc_num].xfer_len + \
 80139fa:	4413      	add	r3, r2
      pdev->host.hc[hc_num].max_packet - 1) / pdev->host.hc[hc_num].max_packet;
 80139fc:	3b01      	subs	r3, #1
 80139fe:	78fa      	ldrb	r2, [r7, #3]
 8013a00:	6879      	ldr	r1, [r7, #4]
 8013a02:	0152      	lsls	r2, r2, #5
 8013a04:	440a      	add	r2, r1
 8013a06:	f202 32b2 	addw	r2, r2, #946	; 0x3b2
 8013a0a:	8812      	ldrh	r2, [r2, #0]
 8013a0c:	fbb3 f3f2 	udiv	r3, r3, r2
    num_packets = (pdev->host.hc[hc_num].xfer_len + \
 8013a10:	85fb      	strh	r3, [r7, #46]	; 0x2e
    
    if (num_packets > max_hc_pkt_count)
 8013a12:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8013a14:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8013a16:	429a      	cmp	r2, r3
 8013a18:	d916      	bls.n	8013a48 <USB_OTG_HC_StartXfer+0xa4>
    {
      num_packets = max_hc_pkt_count;
 8013a1a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8013a1c:	85fb      	strh	r3, [r7, #46]	; 0x2e
      pdev->host.hc[hc_num].xfer_len = num_packets * \
 8013a1e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
        pdev->host.hc[hc_num].max_packet;
 8013a20:	78fa      	ldrb	r2, [r7, #3]
 8013a22:	6879      	ldr	r1, [r7, #4]
 8013a24:	0152      	lsls	r2, r2, #5
 8013a26:	440a      	add	r2, r1
 8013a28:	f202 32b2 	addw	r2, r2, #946	; 0x3b2
 8013a2c:	8812      	ldrh	r2, [r2, #0]
      pdev->host.hc[hc_num].xfer_len = num_packets * \
 8013a2e:	fb02 f203 	mul.w	r2, r2, r3
 8013a32:	78fb      	ldrb	r3, [r7, #3]
 8013a34:	4611      	mov	r1, r2
 8013a36:	687a      	ldr	r2, [r7, #4]
 8013a38:	015b      	lsls	r3, r3, #5
 8013a3a:	4413      	add	r3, r2
 8013a3c:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 8013a40:	6019      	str	r1, [r3, #0]
 8013a42:	e001      	b.n	8013a48 <USB_OTG_HC_StartXfer+0xa4>
    }
  }
  else
  {
    num_packets = 1;
 8013a44:	2301      	movs	r3, #1
 8013a46:	85fb      	strh	r3, [r7, #46]	; 0x2e
  }
  if (pdev->host.hc[hc_num].ep_is_in)
 8013a48:	78fb      	ldrb	r3, [r7, #3]
 8013a4a:	687a      	ldr	r2, [r7, #4]
 8013a4c:	015b      	lsls	r3, r3, #5
 8013a4e:	4413      	add	r3, r2
 8013a50:	f203 33ae 	addw	r3, r3, #942	; 0x3ae
 8013a54:	781b      	ldrb	r3, [r3, #0]
 8013a56:	2b00      	cmp	r3, #0
 8013a58:	d011      	beq.n	8013a7e <USB_OTG_HC_StartXfer+0xda>
  {
    pdev->host.hc[hc_num].xfer_len = num_packets * \
 8013a5a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
      pdev->host.hc[hc_num].max_packet;
 8013a5c:	78fa      	ldrb	r2, [r7, #3]
 8013a5e:	6879      	ldr	r1, [r7, #4]
 8013a60:	0152      	lsls	r2, r2, #5
 8013a62:	440a      	add	r2, r1
 8013a64:	f202 32b2 	addw	r2, r2, #946	; 0x3b2
 8013a68:	8812      	ldrh	r2, [r2, #0]
    pdev->host.hc[hc_num].xfer_len = num_packets * \
 8013a6a:	fb02 f203 	mul.w	r2, r2, r3
 8013a6e:	78fb      	ldrb	r3, [r7, #3]
 8013a70:	4611      	mov	r1, r2
 8013a72:	687a      	ldr	r2, [r7, #4]
 8013a74:	015b      	lsls	r3, r3, #5
 8013a76:	4413      	add	r3, r2
 8013a78:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 8013a7c:	6019      	str	r1, [r3, #0]
  }
  /* Initialize the HCTSIZn register */
  hctsiz.b.xfersize = pdev->host.hc[hc_num].xfer_len;
 8013a7e:	78fb      	ldrb	r3, [r7, #3]
 8013a80:	687a      	ldr	r2, [r7, #4]
 8013a82:	015b      	lsls	r3, r3, #5
 8013a84:	4413      	add	r3, r2
 8013a86:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 8013a8a:	681b      	ldr	r3, [r3, #0]
 8013a8c:	f3c3 0212 	ubfx	r2, r3, #0, #19
 8013a90:	6a3b      	ldr	r3, [r7, #32]
 8013a92:	f362 0312 	bfi	r3, r2, #0, #19
 8013a96:	623b      	str	r3, [r7, #32]
  hctsiz.b.pktcnt = num_packets;
 8013a98:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8013a9a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8013a9e:	b29a      	uxth	r2, r3
 8013aa0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013aa2:	f362 03cc 	bfi	r3, r2, #3, #10
 8013aa6:	847b      	strh	r3, [r7, #34]	; 0x22
  hctsiz.b.pid = pdev->host.hc[hc_num].data_pid;
 8013aa8:	78fb      	ldrb	r3, [r7, #3]
 8013aaa:	687a      	ldr	r2, [r7, #4]
 8013aac:	3315      	adds	r3, #21
 8013aae:	015b      	lsls	r3, r3, #5
 8013ab0:	4413      	add	r3, r2
 8013ab2:	f503 738a 	add.w	r3, r3, #276	; 0x114
 8013ab6:	781b      	ldrb	r3, [r3, #0]
 8013ab8:	f003 0303 	and.w	r3, r3, #3
 8013abc:	b2da      	uxtb	r2, r3
 8013abe:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8013ac2:	f362 1346 	bfi	r3, r2, #5, #2
 8013ac6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  USB_OTG_WRITE_REG32(&pdev->regs.HC_REGS[hc_num]->HCTSIZ, hctsiz.d32);
 8013aca:	78fb      	ldrb	r3, [r7, #3]
 8013acc:	687a      	ldr	r2, [r7, #4]
 8013ace:	3322      	adds	r3, #34	; 0x22
 8013ad0:	009b      	lsls	r3, r3, #2
 8013ad2:	4413      	add	r3, r2
 8013ad4:	689b      	ldr	r3, [r3, #8]
 8013ad6:	6a3a      	ldr	r2, [r7, #32]
 8013ad8:	611a      	str	r2, [r3, #16]
  
  if (pdev->cfg.dma_enable == 1)
 8013ada:	687b      	ldr	r3, [r7, #4]
 8013adc:	78db      	ldrb	r3, [r3, #3]
 8013ade:	2b01      	cmp	r3, #1
 8013ae0:	d10f      	bne.n	8013b02 <USB_OTG_HC_StartXfer+0x15e>
  {
    USB_OTG_WRITE_REG32(&pdev->regs.HC_REGS[hc_num]->HCDMA, (unsigned int)pdev->host.hc[hc_num].xfer_buff);
 8013ae2:	78fb      	ldrb	r3, [r7, #3]
 8013ae4:	687a      	ldr	r2, [r7, #4]
 8013ae6:	3315      	adds	r3, #21
 8013ae8:	015b      	lsls	r3, r3, #5
 8013aea:	4413      	add	r3, r2
 8013aec:	f503 738c 	add.w	r3, r3, #280	; 0x118
 8013af0:	6819      	ldr	r1, [r3, #0]
 8013af2:	78fb      	ldrb	r3, [r7, #3]
 8013af4:	687a      	ldr	r2, [r7, #4]
 8013af6:	3322      	adds	r3, #34	; 0x22
 8013af8:	009b      	lsls	r3, r3, #2
 8013afa:	4413      	add	r3, r2
 8013afc:	689b      	ldr	r3, [r3, #8]
 8013afe:	460a      	mov	r2, r1
 8013b00:	615a      	str	r2, [r3, #20]
  }
  
  
  hcchar.d32 = USB_OTG_READ_REG32(&pdev->regs.HC_REGS[hc_num]->HCCHAR);
 8013b02:	78fb      	ldrb	r3, [r7, #3]
 8013b04:	687a      	ldr	r2, [r7, #4]
 8013b06:	3322      	adds	r3, #34	; 0x22
 8013b08:	009b      	lsls	r3, r3, #2
 8013b0a:	4413      	add	r3, r2
 8013b0c:	689b      	ldr	r3, [r3, #8]
 8013b0e:	681b      	ldr	r3, [r3, #0]
 8013b10:	627b      	str	r3, [r7, #36]	; 0x24
  hcchar.b.oddfrm = USB_OTG_IsEvenFrame(pdev);
 8013b12:	6878      	ldr	r0, [r7, #4]
 8013b14:	f7ff fcf8 	bl	8013508 <USB_OTG_IsEvenFrame>
 8013b18:	4603      	mov	r3, r0
 8013b1a:	f003 0301 	and.w	r3, r3, #1
 8013b1e:	b2da      	uxtb	r2, r3
 8013b20:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013b24:	f362 1345 	bfi	r3, r2, #5, #1
 8013b28:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  
  /* Set host channel enable */
  hcchar.b.chen = 1;
 8013b2c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013b30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013b34:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  hcchar.b.chdis = 0;
 8013b38:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013b3c:	f36f 1386 	bfc	r3, #6, #1
 8013b40:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  USB_OTG_WRITE_REG32(&pdev->regs.HC_REGS[hc_num]->HCCHAR, hcchar.d32);
 8013b44:	78fb      	ldrb	r3, [r7, #3]
 8013b46:	687a      	ldr	r2, [r7, #4]
 8013b48:	3322      	adds	r3, #34	; 0x22
 8013b4a:	009b      	lsls	r3, r3, #2
 8013b4c:	4413      	add	r3, r2
 8013b4e:	689b      	ldr	r3, [r3, #8]
 8013b50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013b52:	601a      	str	r2, [r3, #0]
  
  if (pdev->cfg.dma_enable == 0) /* Slave mode */
 8013b54:	687b      	ldr	r3, [r7, #4]
 8013b56:	78db      	ldrb	r3, [r3, #3]
 8013b58:	2b00      	cmp	r3, #0
 8013b5a:	d17c      	bne.n	8013c56 <USB_OTG_HC_StartXfer+0x2b2>
  {  
    if((pdev->host.hc[hc_num].ep_is_in == 0) && 
 8013b5c:	78fb      	ldrb	r3, [r7, #3]
 8013b5e:	687a      	ldr	r2, [r7, #4]
 8013b60:	015b      	lsls	r3, r3, #5
 8013b62:	4413      	add	r3, r2
 8013b64:	f203 33ae 	addw	r3, r3, #942	; 0x3ae
 8013b68:	781b      	ldrb	r3, [r3, #0]
 8013b6a:	2b00      	cmp	r3, #0
 8013b6c:	d173      	bne.n	8013c56 <USB_OTG_HC_StartXfer+0x2b2>
       (pdev->host.hc[hc_num].xfer_len > 0))
 8013b6e:	78fb      	ldrb	r3, [r7, #3]
 8013b70:	687a      	ldr	r2, [r7, #4]
 8013b72:	015b      	lsls	r3, r3, #5
 8013b74:	4413      	add	r3, r2
 8013b76:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 8013b7a:	681b      	ldr	r3, [r3, #0]
    if((pdev->host.hc[hc_num].ep_is_in == 0) && 
 8013b7c:	2b00      	cmp	r3, #0
 8013b7e:	d06a      	beq.n	8013c56 <USB_OTG_HC_StartXfer+0x2b2>
    {
      switch(pdev->host.hc[hc_num].ep_type) 
 8013b80:	78fb      	ldrb	r3, [r7, #3]
 8013b82:	687a      	ldr	r2, [r7, #4]
 8013b84:	015b      	lsls	r3, r3, #5
 8013b86:	4413      	add	r3, r2
 8013b88:	f203 33b1 	addw	r3, r3, #945	; 0x3b1
 8013b8c:	781b      	ldrb	r3, [r3, #0]
 8013b8e:	2b03      	cmp	r3, #3
 8013b90:	d848      	bhi.n	8013c24 <USB_OTG_HC_StartXfer+0x280>
 8013b92:	a201      	add	r2, pc, #4	; (adr r2, 8013b98 <USB_OTG_HC_StartXfer+0x1f4>)
 8013b94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013b98:	08013ba9 	.word	0x08013ba9
 8013b9c:	08013be7 	.word	0x08013be7
 8013ba0:	08013ba9 	.word	0x08013ba9
 8013ba4:	08013be7 	.word	0x08013be7
      {
        /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:
        
        hnptxsts.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->HNPTXSTS);
 8013ba8:	687b      	ldr	r3, [r7, #4]
 8013baa:	68db      	ldr	r3, [r3, #12]
 8013bac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013bae:	617b      	str	r3, [r7, #20]
        len_words = (pdev->host.hc[hc_num].xfer_len + 3) / 4;
 8013bb0:	78fb      	ldrb	r3, [r7, #3]
 8013bb2:	687a      	ldr	r2, [r7, #4]
 8013bb4:	015b      	lsls	r3, r3, #5
 8013bb6:	4413      	add	r3, r2
 8013bb8:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 8013bbc:	681b      	ldr	r3, [r3, #0]
 8013bbe:	3303      	adds	r3, #3
 8013bc0:	089b      	lsrs	r3, r3, #2
 8013bc2:	857b      	strh	r3, [r7, #42]	; 0x2a
        
        /* check if there is enough space in FIFO space */
        if(len_words > hnptxsts.b.nptxfspcavail)
 8013bc4:	8abb      	ldrh	r3, [r7, #20]
 8013bc6:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8013bc8:	429a      	cmp	r2, r3
 8013bca:	d92d      	bls.n	8013c28 <USB_OTG_HC_StartXfer+0x284>
        {
          /* need to process data in nptxfempty interrupt */
          intmsk.b.nptxfempty = 1;
 8013bcc:	7a3b      	ldrb	r3, [r7, #8]
 8013bce:	f043 0320 	orr.w	r3, r3, #32
 8013bd2:	723b      	strb	r3, [r7, #8]
          USB_OTG_MODIFY_REG32( &pdev->regs.GREGS->GINTMSK, 0, intmsk.d32);  
 8013bd4:	687b      	ldr	r3, [r7, #4]
 8013bd6:	68db      	ldr	r3, [r3, #12]
 8013bd8:	6999      	ldr	r1, [r3, #24]
 8013bda:	68ba      	ldr	r2, [r7, #8]
 8013bdc:	687b      	ldr	r3, [r7, #4]
 8013bde:	68db      	ldr	r3, [r3, #12]
 8013be0:	430a      	orrs	r2, r1
 8013be2:	619a      	str	r2, [r3, #24]
        }
        
        break;
 8013be4:	e020      	b.n	8013c28 <USB_OTG_HC_StartXfer+0x284>
        /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        hptxsts.d32 = USB_OTG_READ_REG32(&pdev->regs.HREGS->HPTXSTS);
 8013be6:	687b      	ldr	r3, [r7, #4]
 8013be8:	695b      	ldr	r3, [r3, #20]
 8013bea:	691b      	ldr	r3, [r3, #16]
 8013bec:	60fb      	str	r3, [r7, #12]
        len_words = (pdev->host.hc[hc_num].xfer_len + 3) / 4;
 8013bee:	78fb      	ldrb	r3, [r7, #3]
 8013bf0:	687a      	ldr	r2, [r7, #4]
 8013bf2:	015b      	lsls	r3, r3, #5
 8013bf4:	4413      	add	r3, r2
 8013bf6:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 8013bfa:	681b      	ldr	r3, [r3, #0]
 8013bfc:	3303      	adds	r3, #3
 8013bfe:	089b      	lsrs	r3, r3, #2
 8013c00:	857b      	strh	r3, [r7, #42]	; 0x2a
        /* check if there is enough space in FIFO space */
        if(len_words > hptxsts.b.ptxfspcavail) /* split the transfer */
 8013c02:	89bb      	ldrh	r3, [r7, #12]
 8013c04:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8013c06:	429a      	cmp	r2, r3
 8013c08:	d910      	bls.n	8013c2c <USB_OTG_HC_StartXfer+0x288>
        {
          /* need to process data in ptxfempty interrupt */
          intmsk.b.ptxfempty = 1;
 8013c0a:	7afb      	ldrb	r3, [r7, #11]
 8013c0c:	f043 0304 	orr.w	r3, r3, #4
 8013c10:	72fb      	strb	r3, [r7, #11]
          USB_OTG_MODIFY_REG32( &pdev->regs.GREGS->GINTMSK, 0, intmsk.d32);  
 8013c12:	687b      	ldr	r3, [r7, #4]
 8013c14:	68db      	ldr	r3, [r3, #12]
 8013c16:	6999      	ldr	r1, [r3, #24]
 8013c18:	68ba      	ldr	r2, [r7, #8]
 8013c1a:	687b      	ldr	r3, [r7, #4]
 8013c1c:	68db      	ldr	r3, [r3, #12]
 8013c1e:	430a      	orrs	r2, r1
 8013c20:	619a      	str	r2, [r3, #24]
        }
        break;
 8013c22:	e003      	b.n	8013c2c <USB_OTG_HC_StartXfer+0x288>
        
      default:
        break;
 8013c24:	bf00      	nop
 8013c26:	e002      	b.n	8013c2e <USB_OTG_HC_StartXfer+0x28a>
        break;
 8013c28:	bf00      	nop
 8013c2a:	e000      	b.n	8013c2e <USB_OTG_HC_StartXfer+0x28a>
        break;
 8013c2c:	bf00      	nop
      }
      
      /* Write packet into the Tx FIFO. */
      USB_OTG_WritePacket(pdev, 
 8013c2e:	78fb      	ldrb	r3, [r7, #3]
 8013c30:	687a      	ldr	r2, [r7, #4]
 8013c32:	3315      	adds	r3, #21
 8013c34:	015b      	lsls	r3, r3, #5
 8013c36:	4413      	add	r3, r2
 8013c38:	f503 738c 	add.w	r3, r3, #280	; 0x118
 8013c3c:	6819      	ldr	r1, [r3, #0]
                          pdev->host.hc[hc_num].xfer_buff , 
                          hc_num, pdev->host.hc[hc_num].xfer_len);
 8013c3e:	78fb      	ldrb	r3, [r7, #3]
 8013c40:	687a      	ldr	r2, [r7, #4]
 8013c42:	015b      	lsls	r3, r3, #5
 8013c44:	4413      	add	r3, r2
 8013c46:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 8013c4a:	681b      	ldr	r3, [r3, #0]
      USB_OTG_WritePacket(pdev, 
 8013c4c:	b29b      	uxth	r3, r3
 8013c4e:	78fa      	ldrb	r2, [r7, #3]
 8013c50:	6878      	ldr	r0, [r7, #4]
 8013c52:	f7ff f8ed 	bl	8012e30 <USB_OTG_WritePacket>
    }
  }
  return status;
 8013c56:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
}
 8013c5a:	4618      	mov	r0, r3
 8013c5c:	3730      	adds	r7, #48	; 0x30
 8013c5e:	46bd      	mov	sp, r7
 8013c60:	bd80      	pop	{r7, pc}

08013c62 <USB_OTG_HC_Halt>:
* @param  pdev : Selected device
* @param  hc_num : channel number
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_HC_Halt(USB_OTG_CORE_HANDLE *pdev , uint8_t hc_num)
{
 8013c62:	b480      	push	{r7}
 8013c64:	b08b      	sub	sp, #44	; 0x2c
 8013c66:	af00      	add	r7, sp, #0
 8013c68:	6078      	str	r0, [r7, #4]
 8013c6a:	460b      	mov	r3, r1
 8013c6c:	70fb      	strb	r3, [r7, #3]
  USB_OTG_STS status = USB_OTG_OK;
 8013c6e:	2300      	movs	r3, #0
 8013c70:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  USB_OTG_HNPTXSTS_TypeDef            nptxsts;
  USB_OTG_HPTXSTS_TypeDef             hptxsts;
  USB_OTG_HCCHAR_TypeDef              hcchar;
  
  nptxsts.d32 = 0;
 8013c74:	2300      	movs	r3, #0
 8013c76:	61bb      	str	r3, [r7, #24]
  hptxsts.d32 = 0;
 8013c78:	2300      	movs	r3, #0
 8013c7a:	613b      	str	r3, [r7, #16]
  hcchar.d32 = USB_OTG_READ_REG32(&pdev->regs.HC_REGS[hc_num]->HCCHAR);
 8013c7c:	78fb      	ldrb	r3, [r7, #3]
 8013c7e:	687a      	ldr	r2, [r7, #4]
 8013c80:	3322      	adds	r3, #34	; 0x22
 8013c82:	009b      	lsls	r3, r3, #2
 8013c84:	4413      	add	r3, r2
 8013c86:	689b      	ldr	r3, [r3, #8]
 8013c88:	681b      	ldr	r3, [r3, #0]
 8013c8a:	60fb      	str	r3, [r7, #12]
  hcchar.b.chen = 1;
 8013c8c:	7bfb      	ldrb	r3, [r7, #15]
 8013c8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013c92:	73fb      	strb	r3, [r7, #15]
  hcchar.b.chdis = 1;
 8013c94:	7bfb      	ldrb	r3, [r7, #15]
 8013c96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013c9a:	73fb      	strb	r3, [r7, #15]
  
  /* Check for space in the request queue to issue the halt. */
  if (hcchar.b.eptype == HCCHAR_CTRL || hcchar.b.eptype == HCCHAR_BULK)
 8013c9c:	7bbb      	ldrb	r3, [r7, #14]
 8013c9e:	f003 030c 	and.w	r3, r3, #12
 8013ca2:	b2db      	uxtb	r3, r3
 8013ca4:	2b00      	cmp	r3, #0
 8013ca6:	d005      	beq.n	8013cb4 <USB_OTG_HC_Halt+0x52>
 8013ca8:	7bbb      	ldrb	r3, [r7, #14]
 8013caa:	f003 030c 	and.w	r3, r3, #12
 8013cae:	b2db      	uxtb	r3, r3
 8013cb0:	2b08      	cmp	r3, #8
 8013cb2:	d10b      	bne.n	8013ccc <USB_OTG_HC_Halt+0x6a>
  {
    nptxsts.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->HNPTXSTS);
 8013cb4:	687b      	ldr	r3, [r7, #4]
 8013cb6:	68db      	ldr	r3, [r3, #12]
 8013cb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013cba:	61bb      	str	r3, [r7, #24]
    if (nptxsts.b.nptxqspcavail == 0)
 8013cbc:	7ebb      	ldrb	r3, [r7, #26]
 8013cbe:	2b00      	cmp	r3, #0
 8013cc0:	d10f      	bne.n	8013ce2 <USB_OTG_HC_Halt+0x80>
    {
      hcchar.b.chen = 0;
 8013cc2:	7bfb      	ldrb	r3, [r7, #15]
 8013cc4:	f36f 13c7 	bfc	r3, #7, #1
 8013cc8:	73fb      	strb	r3, [r7, #15]
    if (nptxsts.b.nptxqspcavail == 0)
 8013cca:	e00a      	b.n	8013ce2 <USB_OTG_HC_Halt+0x80>
    }
  }
  else
  {
    hptxsts.d32 = USB_OTG_READ_REG32(&pdev->regs.HREGS->HPTXSTS);
 8013ccc:	687b      	ldr	r3, [r7, #4]
 8013cce:	695b      	ldr	r3, [r3, #20]
 8013cd0:	691b      	ldr	r3, [r3, #16]
 8013cd2:	613b      	str	r3, [r7, #16]
    if (hptxsts.b.ptxqspcavail == 0)
 8013cd4:	7cbb      	ldrb	r3, [r7, #18]
 8013cd6:	2b00      	cmp	r3, #0
 8013cd8:	d103      	bne.n	8013ce2 <USB_OTG_HC_Halt+0x80>
    {
      hcchar.b.chen = 0;
 8013cda:	7bfb      	ldrb	r3, [r7, #15]
 8013cdc:	f36f 13c7 	bfc	r3, #7, #1
 8013ce0:	73fb      	strb	r3, [r7, #15]
    }
  }
  USB_OTG_WRITE_REG32(&pdev->regs.HC_REGS[hc_num]->HCCHAR, hcchar.d32);
 8013ce2:	78fb      	ldrb	r3, [r7, #3]
 8013ce4:	687a      	ldr	r2, [r7, #4]
 8013ce6:	3322      	adds	r3, #34	; 0x22
 8013ce8:	009b      	lsls	r3, r3, #2
 8013cea:	4413      	add	r3, r2
 8013cec:	689b      	ldr	r3, [r3, #8]
 8013cee:	68fa      	ldr	r2, [r7, #12]
 8013cf0:	601a      	str	r2, [r3, #0]
  return status;
 8013cf2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8013cf6:	4618      	mov	r0, r3
 8013cf8:	372c      	adds	r7, #44	; 0x2c
 8013cfa:	46bd      	mov	sp, r7
 8013cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d00:	4770      	bx	lr

08013d02 <USB_OTG_HC_DoPing>:
* @brief  Issue a ping token
* @param  None
* @retval : None
*/
USB_OTG_STS USB_OTG_HC_DoPing(USB_OTG_CORE_HANDLE *pdev , uint8_t hc_num)
{
 8013d02:	b480      	push	{r7}
 8013d04:	b087      	sub	sp, #28
 8013d06:	af00      	add	r7, sp, #0
 8013d08:	6078      	str	r0, [r7, #4]
 8013d0a:	460b      	mov	r3, r1
 8013d0c:	70fb      	strb	r3, [r7, #3]
  USB_OTG_STS               status = USB_OTG_OK;
 8013d0e:	2300      	movs	r3, #0
 8013d10:	75fb      	strb	r3, [r7, #23]
  USB_OTG_HCCHAR_TypeDef    hcchar;
  USB_OTG_HCTSIZn_TypeDef   hctsiz;  
  
  hctsiz.d32 = 0;
 8013d12:	2300      	movs	r3, #0
 8013d14:	60fb      	str	r3, [r7, #12]
  hctsiz.b.dopng = 1;
 8013d16:	7bfb      	ldrb	r3, [r7, #15]
 8013d18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013d1c:	73fb      	strb	r3, [r7, #15]
  hctsiz.b.pktcnt = 1;
 8013d1e:	89fb      	ldrh	r3, [r7, #14]
 8013d20:	2201      	movs	r2, #1
 8013d22:	f362 03cc 	bfi	r3, r2, #3, #10
 8013d26:	81fb      	strh	r3, [r7, #14]
  USB_OTG_WRITE_REG32(&pdev->regs.HC_REGS[hc_num]->HCTSIZ, hctsiz.d32);
 8013d28:	78fb      	ldrb	r3, [r7, #3]
 8013d2a:	687a      	ldr	r2, [r7, #4]
 8013d2c:	3322      	adds	r3, #34	; 0x22
 8013d2e:	009b      	lsls	r3, r3, #2
 8013d30:	4413      	add	r3, r2
 8013d32:	689b      	ldr	r3, [r3, #8]
 8013d34:	68fa      	ldr	r2, [r7, #12]
 8013d36:	611a      	str	r2, [r3, #16]
  
  hcchar.d32 = USB_OTG_READ_REG32(&pdev->regs.HC_REGS[hc_num]->HCCHAR);
 8013d38:	78fb      	ldrb	r3, [r7, #3]
 8013d3a:	687a      	ldr	r2, [r7, #4]
 8013d3c:	3322      	adds	r3, #34	; 0x22
 8013d3e:	009b      	lsls	r3, r3, #2
 8013d40:	4413      	add	r3, r2
 8013d42:	689b      	ldr	r3, [r3, #8]
 8013d44:	681b      	ldr	r3, [r3, #0]
 8013d46:	613b      	str	r3, [r7, #16]
  hcchar.b.chen = 1;
 8013d48:	7cfb      	ldrb	r3, [r7, #19]
 8013d4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013d4e:	74fb      	strb	r3, [r7, #19]
  hcchar.b.chdis = 0;
 8013d50:	7cfb      	ldrb	r3, [r7, #19]
 8013d52:	f36f 1386 	bfc	r3, #6, #1
 8013d56:	74fb      	strb	r3, [r7, #19]
  USB_OTG_WRITE_REG32(&pdev->regs.HC_REGS[hc_num]->HCCHAR, hcchar.d32);
 8013d58:	78fb      	ldrb	r3, [r7, #3]
 8013d5a:	687a      	ldr	r2, [r7, #4]
 8013d5c:	3322      	adds	r3, #34	; 0x22
 8013d5e:	009b      	lsls	r3, r3, #2
 8013d60:	4413      	add	r3, r2
 8013d62:	689b      	ldr	r3, [r3, #8]
 8013d64:	693a      	ldr	r2, [r7, #16]
 8013d66:	601a      	str	r2, [r3, #0]
  return status;  
 8013d68:	7dfb      	ldrb	r3, [r7, #23]
}
 8013d6a:	4618      	mov	r0, r3
 8013d6c:	371c      	adds	r7, #28
 8013d6e:	46bd      	mov	sp, r7
 8013d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d74:	4770      	bx	lr

08013d76 <USB_OTG_StopHost>:
* @brief  Stop the device and clean up fifo's
* @param  None
* @retval : None
*/
void USB_OTG_StopHost(USB_OTG_CORE_HANDLE *pdev)
{
 8013d76:	b580      	push	{r7, lr}
 8013d78:	b084      	sub	sp, #16
 8013d7a:	af00      	add	r7, sp, #0
 8013d7c:	6078      	str	r0, [r7, #4]
  USB_OTG_HCCHAR_TypeDef  hcchar;
  uint32_t                i;
  
  USB_OTG_WRITE_REG32(&pdev->regs.HREGS->HAINTMSK , 0);
 8013d7e:	687b      	ldr	r3, [r7, #4]
 8013d80:	695b      	ldr	r3, [r3, #20]
 8013d82:	2200      	movs	r2, #0
 8013d84:	619a      	str	r2, [r3, #24]
  USB_OTG_WRITE_REG32(&pdev->regs.HREGS->HAINT,      0xFFFFFFFF);
 8013d86:	687b      	ldr	r3, [r7, #4]
 8013d88:	695b      	ldr	r3, [r3, #20]
 8013d8a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013d8e:	615a      	str	r2, [r3, #20]
  /* Flush out any leftover queued requests. */
  
  for (i = 0; i < pdev->cfg.host_channels; i++)
 8013d90:	2300      	movs	r3, #0
 8013d92:	60fb      	str	r3, [r7, #12]
 8013d94:	e01e      	b.n	8013dd4 <USB_OTG_StopHost+0x5e>
  {
    hcchar.d32 = USB_OTG_READ_REG32(&pdev->regs.HC_REGS[i]->HCCHAR);
 8013d96:	687a      	ldr	r2, [r7, #4]
 8013d98:	68fb      	ldr	r3, [r7, #12]
 8013d9a:	3322      	adds	r3, #34	; 0x22
 8013d9c:	009b      	lsls	r3, r3, #2
 8013d9e:	4413      	add	r3, r2
 8013da0:	689b      	ldr	r3, [r3, #8]
 8013da2:	681b      	ldr	r3, [r3, #0]
 8013da4:	60bb      	str	r3, [r7, #8]
    hcchar.b.chen = 0;
 8013da6:	7afb      	ldrb	r3, [r7, #11]
 8013da8:	f36f 13c7 	bfc	r3, #7, #1
 8013dac:	72fb      	strb	r3, [r7, #11]
    hcchar.b.chdis = 1;
 8013dae:	7afb      	ldrb	r3, [r7, #11]
 8013db0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013db4:	72fb      	strb	r3, [r7, #11]
    hcchar.b.epdir = 0;
 8013db6:	7a7b      	ldrb	r3, [r7, #9]
 8013db8:	f36f 13c7 	bfc	r3, #7, #1
 8013dbc:	727b      	strb	r3, [r7, #9]
    USB_OTG_WRITE_REG32(&pdev->regs.HC_REGS[i]->HCCHAR, hcchar.d32);
 8013dbe:	687a      	ldr	r2, [r7, #4]
 8013dc0:	68fb      	ldr	r3, [r7, #12]
 8013dc2:	3322      	adds	r3, #34	; 0x22
 8013dc4:	009b      	lsls	r3, r3, #2
 8013dc6:	4413      	add	r3, r2
 8013dc8:	689b      	ldr	r3, [r3, #8]
 8013dca:	68ba      	ldr	r2, [r7, #8]
 8013dcc:	601a      	str	r2, [r3, #0]
  for (i = 0; i < pdev->cfg.host_channels; i++)
 8013dce:	68fb      	ldr	r3, [r7, #12]
 8013dd0:	3301      	adds	r3, #1
 8013dd2:	60fb      	str	r3, [r7, #12]
 8013dd4:	687b      	ldr	r3, [r7, #4]
 8013dd6:	781b      	ldrb	r3, [r3, #0]
 8013dd8:	461a      	mov	r2, r3
 8013dda:	68fb      	ldr	r3, [r7, #12]
 8013ddc:	4293      	cmp	r3, r2
 8013dde:	d3da      	bcc.n	8013d96 <USB_OTG_StopHost+0x20>
  }
  
  /* Flush the FIFO */
  USB_OTG_FlushRxFifo(pdev);
 8013de0:	6878      	ldr	r0, [r7, #4]
 8013de2:	f7ff fa5d 	bl	80132a0 <USB_OTG_FlushRxFifo>
  USB_OTG_FlushTxFifo(pdev ,  0x10 );  
 8013de6:	2110      	movs	r1, #16
 8013de8:	6878      	ldr	r0, [r7, #4]
 8013dea:	f7ff fa21 	bl	8013230 <USB_OTG_FlushTxFifo>
}
 8013dee:	bf00      	nop
 8013df0:	3710      	adds	r7, #16
 8013df2:	46bd      	mov	sp, r7
 8013df4:	bd80      	pop	{r7, pc}
 8013df6:	bf00      	nop

08013df8 <HCD_Init>:
  * @param  base_address: OTG base address
  * @retval Status
  */
uint32_t HCD_Init(USB_OTG_CORE_HANDLE *pdev , 
                  USB_OTG_CORE_ID_TypeDef coreID)
{
 8013df8:	b580      	push	{r7, lr}
 8013dfa:	b084      	sub	sp, #16
 8013dfc:	af00      	add	r7, sp, #0
 8013dfe:	6078      	str	r0, [r7, #4]
 8013e00:	460b      	mov	r3, r1
 8013e02:	70fb      	strb	r3, [r7, #3]
  uint8_t i = 0;
 8013e04:	2300      	movs	r3, #0
 8013e06:	73fb      	strb	r3, [r7, #15]
  pdev->host.ConnSts = 0;
 8013e08:	687b      	ldr	r3, [r7, #4]
 8013e0a:	2200      	movs	r2, #0
 8013e0c:	f8c3 2310 	str.w	r2, [r3, #784]	; 0x310
  
  for (i= 0; i< USB_OTG_MAX_TX_FIFOS; i++)
 8013e10:	2300      	movs	r3, #0
 8013e12:	73fb      	strb	r3, [r7, #15]
 8013e14:	e015      	b.n	8013e42 <HCD_Init+0x4a>
  {
  pdev->host.ErrCnt[i]  = 0;
 8013e16:	7bfb      	ldrb	r3, [r7, #15]
 8013e18:	687a      	ldr	r2, [r7, #4]
 8013e1a:	33c4      	adds	r3, #196	; 0xc4
 8013e1c:	009b      	lsls	r3, r3, #2
 8013e1e:	4413      	add	r3, r2
 8013e20:	2200      	movs	r2, #0
 8013e22:	605a      	str	r2, [r3, #4]
  pdev->host.XferCnt[i]   = 0;
 8013e24:	7bfa      	ldrb	r2, [r7, #15]
 8013e26:	687b      	ldr	r3, [r7, #4]
 8013e28:	32d4      	adds	r2, #212	; 0xd4
 8013e2a:	2100      	movs	r1, #0
 8013e2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->host.HC_Status[i]   = HC_IDLE;
 8013e30:	7bfb      	ldrb	r3, [r7, #15]
 8013e32:	687a      	ldr	r2, [r7, #4]
 8013e34:	4413      	add	r3, r2
 8013e36:	2200      	movs	r2, #0
 8013e38:	f883 238c 	strb.w	r2, [r3, #908]	; 0x38c
  for (i= 0; i< USB_OTG_MAX_TX_FIFOS; i++)
 8013e3c:	7bfb      	ldrb	r3, [r7, #15]
 8013e3e:	3301      	adds	r3, #1
 8013e40:	73fb      	strb	r3, [r7, #15]
 8013e42:	7bfb      	ldrb	r3, [r7, #15]
 8013e44:	2b0e      	cmp	r3, #14
 8013e46:	d9e6      	bls.n	8013e16 <HCD_Init+0x1e>
  }
  pdev->host.hc[0].max_packet  = 8; 
 8013e48:	687b      	ldr	r3, [r7, #4]
 8013e4a:	2208      	movs	r2, #8
 8013e4c:	f8a3 23b2 	strh.w	r2, [r3, #946]	; 0x3b2

  USB_OTG_SelectCore(pdev, coreID);
 8013e50:	78fb      	ldrb	r3, [r7, #3]
 8013e52:	4619      	mov	r1, r3
 8013e54:	6878      	ldr	r0, [r7, #4]
 8013e56:	f7ff f852 	bl	8012efe <USB_OTG_SelectCore>
#ifndef DUAL_ROLE_MODE_ENABLED
  USB_OTG_DisableGlobalInt(pdev);
 8013e5a:	6878      	ldr	r0, [r7, #4]
 8013e5c:	f7ff f9cc 	bl	80131f8 <USB_OTG_DisableGlobalInt>
  USB_OTG_CoreInit(pdev);
 8013e60:	6878      	ldr	r0, [r7, #4]
 8013e62:	f7ff f90d 	bl	8013080 <USB_OTG_CoreInit>

  /* Force Host Mode*/
  USB_OTG_SetCurrentMode(pdev , HOST_MODE);
 8013e66:	2101      	movs	r1, #1
 8013e68:	6878      	ldr	r0, [r7, #4]
 8013e6a:	f7ff fa49 	bl	8013300 <USB_OTG_SetCurrentMode>
  USB_OTG_CoreInitHost(pdev);
 8013e6e:	6878      	ldr	r0, [r7, #4]
 8013e70:	f7ff faca 	bl	8013408 <USB_OTG_CoreInitHost>
  USB_OTG_EnableGlobalInt(pdev);
 8013e74:	6878      	ldr	r0, [r7, #4]
 8013e76:	f7ff f9a4 	bl	80131c2 <USB_OTG_EnableGlobalInt>
#endif
   
  return 0;
 8013e7a:	2300      	movs	r3, #0
}
 8013e7c:	4618      	mov	r0, r3
 8013e7e:	3710      	adds	r7, #16
 8013e80:	46bd      	mov	sp, r7
 8013e82:	bd80      	pop	{r7, pc}

08013e84 <HCD_GetCurrentSpeed>:
  * @param  pdev : Selected device
  * @retval Status
  */

uint32_t HCD_GetCurrentSpeed (USB_OTG_CORE_HANDLE *pdev)
{    
 8013e84:	b480      	push	{r7}
 8013e86:	b085      	sub	sp, #20
 8013e88:	af00      	add	r7, sp, #0
 8013e8a:	6078      	str	r0, [r7, #4]
    USB_OTG_HPRT0_TypeDef  HPRT0;
    HPRT0.d32 = USB_OTG_READ_REG32(pdev->regs.HPRT0);
 8013e8c:	687b      	ldr	r3, [r7, #4]
 8013e8e:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8013e92:	681b      	ldr	r3, [r3, #0]
 8013e94:	60fb      	str	r3, [r7, #12]
    
    return HPRT0.b.prtspd;
 8013e96:	7bbb      	ldrb	r3, [r7, #14]
 8013e98:	f3c3 0341 	ubfx	r3, r3, #1, #2
 8013e9c:	b2db      	uxtb	r3, r3
}
 8013e9e:	4618      	mov	r0, r3
 8013ea0:	3714      	adds	r7, #20
 8013ea2:	46bd      	mov	sp, r7
 8013ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ea8:	4770      	bx	lr

08013eaa <HCD_ResetPort>:
  *         Issues the reset command to device
  * @param  pdev : Selected device
  * @retval Status
  */
uint32_t HCD_ResetPort(USB_OTG_CORE_HANDLE *pdev)
{
 8013eaa:	b580      	push	{r7, lr}
 8013eac:	b082      	sub	sp, #8
 8013eae:	af00      	add	r7, sp, #0
 8013eb0:	6078      	str	r0, [r7, #4]
  interrupt triggered by the debounce done bit (DBCDNE bit in OTG_FS_GOTGINT), 
  which indicates that the bus is stable again after the electrical debounce 
  caused by the attachment of a pull-up resistor on DP (FS) or DM (LS).
  */
  
  USB_OTG_ResetPort(pdev); 
 8013eb2:	6878      	ldr	r0, [r7, #4]
 8013eb4:	f7ff fc03 	bl	80136be <USB_OTG_ResetPort>
  return 0;
 8013eb8:	2300      	movs	r3, #0
}
 8013eba:	4618      	mov	r0, r3
 8013ebc:	3708      	adds	r7, #8
 8013ebe:	46bd      	mov	sp, r7
 8013ec0:	bd80      	pop	{r7, pc}

08013ec2 <HCD_IsDeviceConnected>:
  * @param  pdev : Selected device
  * @retval Device connection status. 1 -> connected and 0 -> disconnected
  * 
  */
uint32_t HCD_IsDeviceConnected(USB_OTG_CORE_HANDLE *pdev)
{
 8013ec2:	b480      	push	{r7}
 8013ec4:	b083      	sub	sp, #12
 8013ec6:	af00      	add	r7, sp, #0
 8013ec8:	6078      	str	r0, [r7, #4]
  return (pdev->host.ConnSts);
 8013eca:	687b      	ldr	r3, [r7, #4]
 8013ecc:	f8d3 3310 	ldr.w	r3, [r3, #784]	; 0x310
}
 8013ed0:	4618      	mov	r0, r3
 8013ed2:	370c      	adds	r7, #12
 8013ed4:	46bd      	mov	sp, r7
 8013ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013eda:	4770      	bx	lr

08013edc <HCD_GetCurrentFrame>:
  * @param  pdev : Selected device
  * @retval Frame number
  * 
  */
uint32_t HCD_GetCurrentFrame (USB_OTG_CORE_HANDLE *pdev) 
{
 8013edc:	b480      	push	{r7}
 8013ede:	b083      	sub	sp, #12
 8013ee0:	af00      	add	r7, sp, #0
 8013ee2:	6078      	str	r0, [r7, #4]
 return (USB_OTG_READ_REG32(&pdev->regs.HREGS->HFNUM) & 0xFFFF) ;
 8013ee4:	687b      	ldr	r3, [r7, #4]
 8013ee6:	695b      	ldr	r3, [r3, #20]
 8013ee8:	689b      	ldr	r3, [r3, #8]
 8013eea:	b29b      	uxth	r3, r3
}
 8013eec:	4618      	mov	r0, r3
 8013eee:	370c      	adds	r7, #12
 8013ef0:	46bd      	mov	sp, r7
 8013ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ef6:	4770      	bx	lr

08013ef8 <HCD_GetURB_State>:
  * @param  pdev: Selected device
  * @retval URB_STATE
  * 
  */
URB_STATE HCD_GetURB_State (USB_OTG_CORE_HANDLE *pdev , uint8_t ch_num) 
{
 8013ef8:	b480      	push	{r7}
 8013efa:	b083      	sub	sp, #12
 8013efc:	af00      	add	r7, sp, #0
 8013efe:	6078      	str	r0, [r7, #4]
 8013f00:	460b      	mov	r3, r1
 8013f02:	70fb      	strb	r3, [r7, #3]
  return pdev->host.URB_State[ch_num] ;
 8013f04:	78fb      	ldrb	r3, [r7, #3]
 8013f06:	687a      	ldr	r2, [r7, #4]
 8013f08:	4413      	add	r3, r2
 8013f0a:	f893 339b 	ldrb.w	r3, [r3, #923]	; 0x39b
 8013f0e:	b2db      	uxtb	r3, r3
}
 8013f10:	4618      	mov	r0, r3
 8013f12:	370c      	adds	r7, #12
 8013f14:	46bd      	mov	sp, r7
 8013f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f1a:	4770      	bx	lr

08013f1c <HCD_GetXferCnt>:
  * @param  pdev: Selected device
  * @retval No. of data bytes transferred
  * 
  */
uint32_t HCD_GetXferCnt (USB_OTG_CORE_HANDLE *pdev, uint8_t ch_num) 
{
 8013f1c:	b480      	push	{r7}
 8013f1e:	b083      	sub	sp, #12
 8013f20:	af00      	add	r7, sp, #0
 8013f22:	6078      	str	r0, [r7, #4]
 8013f24:	460b      	mov	r3, r1
 8013f26:	70fb      	strb	r3, [r7, #3]
  return pdev->host.XferCnt[ch_num] ;
 8013f28:	78fa      	ldrb	r2, [r7, #3]
 8013f2a:	687b      	ldr	r3, [r7, #4]
 8013f2c:	32d4      	adds	r2, #212	; 0xd4
 8013f2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
}
 8013f32:	4618      	mov	r0, r3
 8013f34:	370c      	adds	r7, #12
 8013f36:	46bd      	mov	sp, r7
 8013f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f3c:	4770      	bx	lr

08013f3e <HCD_GetHCState>:
  * @param  pdev: Selected device
  * @retval HC_STATUS
  * 
  */
HC_STATUS HCD_GetHCState (USB_OTG_CORE_HANDLE *pdev ,  uint8_t ch_num) 
{
 8013f3e:	b480      	push	{r7}
 8013f40:	b083      	sub	sp, #12
 8013f42:	af00      	add	r7, sp, #0
 8013f44:	6078      	str	r0, [r7, #4]
 8013f46:	460b      	mov	r3, r1
 8013f48:	70fb      	strb	r3, [r7, #3]
  return pdev->host.HC_Status[ch_num] ;
 8013f4a:	78fb      	ldrb	r3, [r7, #3]
 8013f4c:	687a      	ldr	r2, [r7, #4]
 8013f4e:	4413      	add	r3, r2
 8013f50:	f893 338c 	ldrb.w	r3, [r3, #908]	; 0x38c
 8013f54:	b2db      	uxtb	r3, r3
}
 8013f56:	4618      	mov	r0, r3
 8013f58:	370c      	adds	r7, #12
 8013f5a:	46bd      	mov	sp, r7
 8013f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f60:	4770      	bx	lr

08013f62 <HCD_HC_Init>:
  * @param  pdev: Selected device
  * @param  hc_num: Channel number 
  * @retval status 
  */
uint32_t HCD_HC_Init (USB_OTG_CORE_HANDLE *pdev , uint8_t hc_num) 
{
 8013f62:	b580      	push	{r7, lr}
 8013f64:	b082      	sub	sp, #8
 8013f66:	af00      	add	r7, sp, #0
 8013f68:	6078      	str	r0, [r7, #4]
 8013f6a:	460b      	mov	r3, r1
 8013f6c:	70fb      	strb	r3, [r7, #3]
  return USB_OTG_HC_Init(pdev, hc_num);  
 8013f6e:	78fb      	ldrb	r3, [r7, #3]
 8013f70:	4619      	mov	r1, r3
 8013f72:	6878      	ldr	r0, [r7, #4]
 8013f74:	f7ff fbc9 	bl	801370a <USB_OTG_HC_Init>
 8013f78:	4603      	mov	r3, r0
}
 8013f7a:	4618      	mov	r0, r3
 8013f7c:	3708      	adds	r7, #8
 8013f7e:	46bd      	mov	sp, r7
 8013f80:	bd80      	pop	{r7, pc}

08013f82 <HCD_SubmitRequest>:
  * @param  pdev: Selected device
  * @param  hc_num: Channel number 
  * @retval status
  */
uint32_t HCD_SubmitRequest (USB_OTG_CORE_HANDLE *pdev , uint8_t hc_num) 
{
 8013f82:	b580      	push	{r7, lr}
 8013f84:	b082      	sub	sp, #8
 8013f86:	af00      	add	r7, sp, #0
 8013f88:	6078      	str	r0, [r7, #4]
 8013f8a:	460b      	mov	r3, r1
 8013f8c:	70fb      	strb	r3, [r7, #3]
  
  pdev->host.URB_State[hc_num] =   URB_IDLE;  
 8013f8e:	78fb      	ldrb	r3, [r7, #3]
 8013f90:	687a      	ldr	r2, [r7, #4]
 8013f92:	4413      	add	r3, r2
 8013f94:	2200      	movs	r2, #0
 8013f96:	f883 239b 	strb.w	r2, [r3, #923]	; 0x39b
  pdev->host.hc[hc_num].xfer_count = 0 ;
 8013f9a:	78fb      	ldrb	r3, [r7, #3]
 8013f9c:	687a      	ldr	r2, [r7, #4]
 8013f9e:	015b      	lsls	r3, r3, #5
 8013fa0:	4413      	add	r3, r2
 8013fa2:	f503 7370 	add.w	r3, r3, #960	; 0x3c0
 8013fa6:	2200      	movs	r2, #0
 8013fa8:	601a      	str	r2, [r3, #0]
  return USB_OTG_HC_StartXfer(pdev, hc_num);
 8013faa:	78fb      	ldrb	r3, [r7, #3]
 8013fac:	4619      	mov	r1, r3
 8013fae:	6878      	ldr	r0, [r7, #4]
 8013fb0:	f7ff fcf8 	bl	80139a4 <USB_OTG_HC_StartXfer>
 8013fb4:	4603      	mov	r3, r0
}
 8013fb6:	4618      	mov	r0, r3
 8013fb8:	3708      	adds	r7, #8
 8013fba:	46bd      	mov	sp, r7
 8013fbc:	bd80      	pop	{r7, pc}
	...

08013fc0 <USBH_OTG_ISR_Handler>:
* @param  pdev: Selected device
* @retval status 
*/

uint32_t USBH_OTG_ISR_Handler (USB_OTG_CORE_HANDLE *pdev)
{
 8013fc0:	b580      	push	{r7, lr}
 8013fc2:	b084      	sub	sp, #16
 8013fc4:	af00      	add	r7, sp, #0
 8013fc6:	6078      	str	r0, [r7, #4]
  USB_OTG_GINTSTS_TypeDef  gintsts;
  uint32_t retval = 0;
 8013fc8:	2300      	movs	r3, #0
 8013fca:	60fb      	str	r3, [r7, #12]
  
  gintsts.d32 = 0;
 8013fcc:	2300      	movs	r3, #0
 8013fce:	60bb      	str	r3, [r7, #8]
  
  /* Check if HOST Mode */
  if (USB_OTG_IsHostMode(pdev))
 8013fd0:	6878      	ldr	r0, [r7, #4]
 8013fd2:	f7ff f9e4 	bl	801339e <USB_OTG_IsHostMode>
 8013fd6:	4603      	mov	r3, r0
 8013fd8:	2b00      	cmp	r3, #0
 8013fda:	d071      	beq.n	80140c0 <USBH_OTG_ISR_Handler+0x100>
  {
    gintsts.d32 = USB_OTG_ReadCoreItr(pdev);
 8013fdc:	6878      	ldr	r0, [r7, #4]
 8013fde:	f7ff f9ef 	bl	80133c0 <USB_OTG_ReadCoreItr>
 8013fe2:	4603      	mov	r3, r0
 8013fe4:	60bb      	str	r3, [r7, #8]
    if (!gintsts.d32)
 8013fe6:	68bb      	ldr	r3, [r7, #8]
 8013fe8:	2b00      	cmp	r3, #0
 8013fea:	d101      	bne.n	8013ff0 <USBH_OTG_ISR_Handler+0x30>
    {
      return 0;
 8013fec:	2300      	movs	r3, #0
 8013fee:	e068      	b.n	80140c2 <USBH_OTG_ISR_Handler+0x102>
    }
    
    if (gintsts.b.sofintr)
 8013ff0:	7a3b      	ldrb	r3, [r7, #8]
 8013ff2:	f003 0308 	and.w	r3, r3, #8
 8013ff6:	b2db      	uxtb	r3, r3
 8013ff8:	2b00      	cmp	r3, #0
 8013ffa:	d006      	beq.n	801400a <USBH_OTG_ISR_Handler+0x4a>
    {
      retval |= USB_OTG_USBH_handle_sof_ISR (pdev);
 8013ffc:	6878      	ldr	r0, [r7, #4]
 8013ffe:	f000 f8aa 	bl	8014156 <USB_OTG_USBH_handle_sof_ISR>
 8014002:	4602      	mov	r2, r0
 8014004:	68fb      	ldr	r3, [r7, #12]
 8014006:	4313      	orrs	r3, r2
 8014008:	60fb      	str	r3, [r7, #12]
    }
    
    if (gintsts.b.rxstsqlvl)
 801400a:	7a3b      	ldrb	r3, [r7, #8]
 801400c:	f003 0310 	and.w	r3, r3, #16
 8014010:	b2db      	uxtb	r3, r3
 8014012:	2b00      	cmp	r3, #0
 8014014:	d006      	beq.n	8014024 <USBH_OTG_ISR_Handler+0x64>
    {
      retval |= USB_OTG_USBH_handle_rx_qlvl_ISR (pdev);
 8014016:	6878      	ldr	r0, [r7, #4]
 8014018:	f001 f888 	bl	801512c <USB_OTG_USBH_handle_rx_qlvl_ISR>
 801401c:	4602      	mov	r2, r0
 801401e:	68fb      	ldr	r3, [r7, #12]
 8014020:	4313      	orrs	r3, r2
 8014022:	60fb      	str	r3, [r7, #12]
    }
    
    if (gintsts.b.nptxfempty)
 8014024:	7a3b      	ldrb	r3, [r7, #8]
 8014026:	f003 0320 	and.w	r3, r3, #32
 801402a:	b2db      	uxtb	r3, r3
 801402c:	2b00      	cmp	r3, #0
 801402e:	d006      	beq.n	801403e <USBH_OTG_ISR_Handler+0x7e>
    {
      retval |= USB_OTG_USBH_handle_nptxfempty_ISR (pdev);
 8014030:	6878      	ldr	r0, [r7, #4]
 8014032:	f000 f8c5 	bl	80141c0 <USB_OTG_USBH_handle_nptxfempty_ISR>
 8014036:	4602      	mov	r2, r0
 8014038:	68fb      	ldr	r3, [r7, #12]
 801403a:	4313      	orrs	r3, r2
 801403c:	60fb      	str	r3, [r7, #12]
    }
    
    if (gintsts.b.ptxfempty)
 801403e:	7afb      	ldrb	r3, [r7, #11]
 8014040:	f003 0304 	and.w	r3, r3, #4
 8014044:	b2db      	uxtb	r3, r3
 8014046:	2b00      	cmp	r3, #0
 8014048:	d006      	beq.n	8014058 <USBH_OTG_ISR_Handler+0x98>
    {
      retval |= USB_OTG_USBH_handle_ptxfempty_ISR (pdev);
 801404a:	6878      	ldr	r0, [r7, #4]
 801404c:	f000 f97b 	bl	8014346 <USB_OTG_USBH_handle_ptxfempty_ISR>
 8014050:	4602      	mov	r2, r0
 8014052:	68fb      	ldr	r3, [r7, #12]
 8014054:	4313      	orrs	r3, r2
 8014056:	60fb      	str	r3, [r7, #12]
    }    
    
    if (gintsts.b.hcintr)
 8014058:	7afb      	ldrb	r3, [r7, #11]
 801405a:	f003 0302 	and.w	r3, r3, #2
 801405e:	b2db      	uxtb	r3, r3
 8014060:	2b00      	cmp	r3, #0
 8014062:	d006      	beq.n	8014072 <USBH_OTG_ISR_Handler+0xb2>
    {
      retval |= USB_OTG_USBH_handle_hc_ISR (pdev);
 8014064:	6878      	ldr	r0, [r7, #4]
 8014066:	f000 f830 	bl	80140ca <USB_OTG_USBH_handle_hc_ISR>
 801406a:	4602      	mov	r2, r0
 801406c:	68fb      	ldr	r3, [r7, #12]
 801406e:	4313      	orrs	r3, r2
 8014070:	60fb      	str	r3, [r7, #12]
    }
    
    if (gintsts.b.portintr)
 8014072:	7afb      	ldrb	r3, [r7, #11]
 8014074:	f003 0301 	and.w	r3, r3, #1
 8014078:	b2db      	uxtb	r3, r3
 801407a:	2b00      	cmp	r3, #0
 801407c:	d006      	beq.n	801408c <USBH_OTG_ISR_Handler+0xcc>
    {
      retval |= USB_OTG_USBH_handle_port_ISR (pdev);
 801407e:	6878      	ldr	r0, [r7, #4]
 8014080:	f000 fa24 	bl	80144cc <USB_OTG_USBH_handle_port_ISR>
 8014084:	4602      	mov	r2, r0
 8014086:	68fb      	ldr	r3, [r7, #12]
 8014088:	4313      	orrs	r3, r2
 801408a:	60fb      	str	r3, [r7, #12]
    }
    
    if (gintsts.b.disconnect)
 801408c:	7afb      	ldrb	r3, [r7, #11]
 801408e:	f003 0320 	and.w	r3, r3, #32
 8014092:	b2db      	uxtb	r3, r3
 8014094:	2b00      	cmp	r3, #0
 8014096:	d006      	beq.n	80140a6 <USBH_OTG_ISR_Handler+0xe6>
    {
      retval |= USB_OTG_USBH_handle_Disconnect_ISR (pdev);  
 8014098:	6878      	ldr	r0, [r7, #4]
 801409a:	f000 f877 	bl	801418c <USB_OTG_USBH_handle_Disconnect_ISR>
 801409e:	4602      	mov	r2, r0
 80140a0:	68fb      	ldr	r3, [r7, #12]
 80140a2:	4313      	orrs	r3, r2
 80140a4:	60fb      	str	r3, [r7, #12]
      
    }
    
    if (gintsts.b.incomplisoout)
 80140a6:	7abb      	ldrb	r3, [r7, #10]
 80140a8:	f003 0320 	and.w	r3, r3, #32
 80140ac:	b2db      	uxtb	r3, r3
 80140ae:	2b00      	cmp	r3, #0
 80140b0:	d006      	beq.n	80140c0 <USBH_OTG_ISR_Handler+0x100>
    {
      retval |= USB_OTG_USBH_handle_IncompletePeriodicXfer_ISR (pdev);
 80140b2:	6878      	ldr	r0, [r7, #4]
 80140b4:	f001 f909 	bl	80152ca <USB_OTG_USBH_handle_IncompletePeriodicXfer_ISR>
 80140b8:	4602      	mov	r2, r0
 80140ba:	68fb      	ldr	r3, [r7, #12]
 80140bc:	4313      	orrs	r3, r2
 80140be:	60fb      	str	r3, [r7, #12]
    }
    
    
  }
  return retval;
 80140c0:	68fb      	ldr	r3, [r7, #12]
}
 80140c2:	4618      	mov	r0, r3
 80140c4:	3710      	adds	r7, #16
 80140c6:	46bd      	mov	sp, r7
 80140c8:	bd80      	pop	{r7, pc}

080140ca <USB_OTG_USBH_handle_hc_ISR>:
*         This function indicates that one or more host channels has a pending
* @param  pdev: Selected device
* @retval status 
*/
static uint32_t USB_OTG_USBH_handle_hc_ISR (USB_OTG_CORE_HANDLE *pdev)
{
 80140ca:	b580      	push	{r7, lr}
 80140cc:	b086      	sub	sp, #24
 80140ce:	af00      	add	r7, sp, #0
 80140d0:	6078      	str	r0, [r7, #4]
  USB_OTG_HAINT_TypeDef        haint;
  USB_OTG_HCCHAR_TypeDef       hcchar;
  uint32_t i = 0;
 80140d2:	2300      	movs	r3, #0
 80140d4:	617b      	str	r3, [r7, #20]
  uint32_t retval = 0;
 80140d6:	2300      	movs	r3, #0
 80140d8:	613b      	str	r3, [r7, #16]
  
  /* Clear appropriate bits in HCINTn to clear the interrupt bit in
  * GINTSTS */
  
  haint.d32 = USB_OTG_ReadHostAllChannels_intr(pdev);
 80140da:	6878      	ldr	r0, [r7, #4]
 80140dc:	f7ff fae2 	bl	80136a4 <USB_OTG_ReadHostAllChannels_intr>
 80140e0:	4603      	mov	r3, r0
 80140e2:	60fb      	str	r3, [r7, #12]
  
  for (i = 0; i < pdev->cfg.host_channels ; i++)
 80140e4:	2300      	movs	r3, #0
 80140e6:	617b      	str	r3, [r7, #20]
 80140e8:	e02a      	b.n	8014140 <USB_OTG_USBH_handle_hc_ISR+0x76>
  {
    if (haint.b.chint & (1 << i))
 80140ea:	89bb      	ldrh	r3, [r7, #12]
 80140ec:	461a      	mov	r2, r3
 80140ee:	697b      	ldr	r3, [r7, #20]
 80140f0:	fa42 f303 	asr.w	r3, r2, r3
 80140f4:	f003 0301 	and.w	r3, r3, #1
 80140f8:	2b00      	cmp	r3, #0
 80140fa:	d01e      	beq.n	801413a <USB_OTG_USBH_handle_hc_ISR+0x70>
    {
      hcchar.d32 = USB_OTG_READ_REG32(&pdev->regs.HC_REGS[i]->HCCHAR);
 80140fc:	687a      	ldr	r2, [r7, #4]
 80140fe:	697b      	ldr	r3, [r7, #20]
 8014100:	3322      	adds	r3, #34	; 0x22
 8014102:	009b      	lsls	r3, r3, #2
 8014104:	4413      	add	r3, r2
 8014106:	689b      	ldr	r3, [r3, #8]
 8014108:	681b      	ldr	r3, [r3, #0]
 801410a:	60bb      	str	r3, [r7, #8]
      
      if (hcchar.b.epdir)
 801410c:	7a7b      	ldrb	r3, [r7, #9]
 801410e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8014112:	b2db      	uxtb	r3, r3
 8014114:	2b00      	cmp	r3, #0
 8014116:	d008      	beq.n	801412a <USB_OTG_USBH_handle_hc_ISR+0x60>
      {
        retval |= USB_OTG_USBH_handle_hc_n_In_ISR (pdev, i);
 8014118:	6979      	ldr	r1, [r7, #20]
 801411a:	6878      	ldr	r0, [r7, #4]
 801411c:	f000 fd2f 	bl	8014b7e <USB_OTG_USBH_handle_hc_n_In_ISR>
 8014120:	4602      	mov	r2, r0
 8014122:	693b      	ldr	r3, [r7, #16]
 8014124:	4313      	orrs	r3, r2
 8014126:	613b      	str	r3, [r7, #16]
 8014128:	e007      	b.n	801413a <USB_OTG_USBH_handle_hc_ISR+0x70>
      }
      else
      {
        retval |=  USB_OTG_USBH_handle_hc_n_Out_ISR (pdev, i);
 801412a:	6979      	ldr	r1, [r7, #20]
 801412c:	6878      	ldr	r0, [r7, #4]
 801412e:	f000 fa7f 	bl	8014630 <USB_OTG_USBH_handle_hc_n_Out_ISR>
 8014132:	4602      	mov	r2, r0
 8014134:	693b      	ldr	r3, [r7, #16]
 8014136:	4313      	orrs	r3, r2
 8014138:	613b      	str	r3, [r7, #16]
  for (i = 0; i < pdev->cfg.host_channels ; i++)
 801413a:	697b      	ldr	r3, [r7, #20]
 801413c:	3301      	adds	r3, #1
 801413e:	617b      	str	r3, [r7, #20]
 8014140:	687b      	ldr	r3, [r7, #4]
 8014142:	781b      	ldrb	r3, [r3, #0]
 8014144:	461a      	mov	r2, r3
 8014146:	697b      	ldr	r3, [r7, #20]
 8014148:	4293      	cmp	r3, r2
 801414a:	d3ce      	bcc.n	80140ea <USB_OTG_USBH_handle_hc_ISR+0x20>
      }
    }
  }
  
  return retval;
 801414c:	693b      	ldr	r3, [r7, #16]
}
 801414e:	4618      	mov	r0, r3
 8014150:	3718      	adds	r7, #24
 8014152:	46bd      	mov	sp, r7
 8014154:	bd80      	pop	{r7, pc}

08014156 <USB_OTG_USBH_handle_sof_ISR>:
*         Handles the start-of-frame interrupt in host mode.
* @param  pdev: Selected device
* @retval status 
*/
static uint32_t USB_OTG_USBH_handle_sof_ISR (USB_OTG_CORE_HANDLE *pdev)
{
 8014156:	b580      	push	{r7, lr}
 8014158:	b084      	sub	sp, #16
 801415a:	af00      	add	r7, sp, #0
 801415c:	6078      	str	r0, [r7, #4]
  USB_OTG_GINTSTS_TypeDef      gintsts;
  gintsts.d32 = 0;
 801415e:	2300      	movs	r3, #0
 8014160:	60fb      	str	r3, [r7, #12]
  
  USBH_HCD_INT_fops->SOF(pdev);
 8014162:	4b09      	ldr	r3, [pc, #36]	; (8014188 <USB_OTG_USBH_handle_sof_ISR+0x32>)
 8014164:	681b      	ldr	r3, [r3, #0]
 8014166:	681b      	ldr	r3, [r3, #0]
 8014168:	6878      	ldr	r0, [r7, #4]
 801416a:	4798      	blx	r3
  
  /* Clear interrupt */
  gintsts.b.sofintr = 1;
 801416c:	7b3b      	ldrb	r3, [r7, #12]
 801416e:	f043 0308 	orr.w	r3, r3, #8
 8014172:	733b      	strb	r3, [r7, #12]
  USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GINTSTS, gintsts.d32);
 8014174:	687b      	ldr	r3, [r7, #4]
 8014176:	68db      	ldr	r3, [r3, #12]
 8014178:	68fa      	ldr	r2, [r7, #12]
 801417a:	615a      	str	r2, [r3, #20]
  
  return 1;
 801417c:	2301      	movs	r3, #1
}
 801417e:	4618      	mov	r0, r3
 8014180:	3710      	adds	r7, #16
 8014182:	46bd      	mov	sp, r7
 8014184:	bd80      	pop	{r7, pc}
 8014186:	bf00      	nop
 8014188:	200000e0 	.word	0x200000e0

0801418c <USB_OTG_USBH_handle_Disconnect_ISR>:
*         Handles disconnect event.
* @param  pdev: Selected device
* @retval status 
*/
static uint32_t USB_OTG_USBH_handle_Disconnect_ISR (USB_OTG_CORE_HANDLE *pdev)
{
 801418c:	b580      	push	{r7, lr}
 801418e:	b084      	sub	sp, #16
 8014190:	af00      	add	r7, sp, #0
 8014192:	6078      	str	r0, [r7, #4]
  USB_OTG_GINTSTS_TypeDef      gintsts;
  
  gintsts.d32 = 0;
 8014194:	2300      	movs	r3, #0
 8014196:	60fb      	str	r3, [r7, #12]
  
  USBH_HCD_INT_fops->DevDisconnected(pdev);
 8014198:	4b08      	ldr	r3, [pc, #32]	; (80141bc <USB_OTG_USBH_handle_Disconnect_ISR+0x30>)
 801419a:	681b      	ldr	r3, [r3, #0]
 801419c:	689b      	ldr	r3, [r3, #8]
 801419e:	6878      	ldr	r0, [r7, #4]
 80141a0:	4798      	blx	r3
  
  /* Clear interrupt */
  gintsts.b.disconnect = 1;
 80141a2:	7bfb      	ldrb	r3, [r7, #15]
 80141a4:	f043 0320 	orr.w	r3, r3, #32
 80141a8:	73fb      	strb	r3, [r7, #15]
  USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GINTSTS, gintsts.d32);
 80141aa:	687b      	ldr	r3, [r7, #4]
 80141ac:	68db      	ldr	r3, [r3, #12]
 80141ae:	68fa      	ldr	r2, [r7, #12]
 80141b0:	615a      	str	r2, [r3, #20]
  
  return 1;
 80141b2:	2301      	movs	r3, #1
}
 80141b4:	4618      	mov	r0, r3
 80141b6:	3710      	adds	r7, #16
 80141b8:	46bd      	mov	sp, r7
 80141ba:	bd80      	pop	{r7, pc}
 80141bc:	200000e0 	.word	0x200000e0

080141c0 <USB_OTG_USBH_handle_nptxfempty_ISR>:
*         Handles non periodic tx fifo empty.
* @param  pdev: Selected device
* @retval status 
*/
static uint32_t USB_OTG_USBH_handle_nptxfempty_ISR (USB_OTG_CORE_HANDLE *pdev)
{
 80141c0:	b580      	push	{r7, lr}
 80141c2:	b088      	sub	sp, #32
 80141c4:	af00      	add	r7, sp, #0
 80141c6:	6078      	str	r0, [r7, #4]
  USB_OTG_GINTMSK_TypeDef      intmsk;
  USB_OTG_HNPTXSTS_TypeDef     hnptxsts; 
  uint16_t                     len_words , len; 
  
  hnptxsts.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->HNPTXSTS);
 80141c8:	687b      	ldr	r3, [r7, #4]
 80141ca:	68db      	ldr	r3, [r3, #12]
 80141cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80141ce:	60fb      	str	r3, [r7, #12]
  
  len_words = (pdev->host.hc[hnptxsts.b.nptxqtop.chnum].xfer_len + 3) / 4;
 80141d0:	7c3b      	ldrb	r3, [r7, #16]
 80141d2:	f3c3 03c3 	ubfx	r3, r3, #3, #4
 80141d6:	b2db      	uxtb	r3, r3
 80141d8:	687a      	ldr	r2, [r7, #4]
 80141da:	015b      	lsls	r3, r3, #5
 80141dc:	4413      	add	r3, r2
 80141de:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 80141e2:	681b      	ldr	r3, [r3, #0]
 80141e4:	3303      	adds	r3, #3
 80141e6:	089b      	lsrs	r3, r3, #2
 80141e8:	83fb      	strh	r3, [r7, #30]
  
  while ((hnptxsts.b.nptxfspcavail > len_words)&&
 80141ea:	e096      	b.n	801431a <USB_OTG_USBH_handle_nptxfempty_ISR+0x15a>
         (pdev->host.hc[hnptxsts.b.nptxqtop.chnum].xfer_len != 0))
  {
    
    len = hnptxsts.b.nptxfspcavail * 4;
 80141ec:	89bb      	ldrh	r3, [r7, #12]
 80141ee:	009b      	lsls	r3, r3, #2
 80141f0:	83bb      	strh	r3, [r7, #28]
    
    if (len > pdev->host.hc[hnptxsts.b.nptxqtop.chnum].xfer_len)
 80141f2:	8bba      	ldrh	r2, [r7, #28]
 80141f4:	7c3b      	ldrb	r3, [r7, #16]
 80141f6:	f3c3 03c3 	ubfx	r3, r3, #3, #4
 80141fa:	b2db      	uxtb	r3, r3
 80141fc:	6879      	ldr	r1, [r7, #4]
 80141fe:	015b      	lsls	r3, r3, #5
 8014200:	440b      	add	r3, r1
 8014202:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 8014206:	681b      	ldr	r3, [r3, #0]
 8014208:	429a      	cmp	r2, r3
 801420a:	d919      	bls.n	8014240 <USB_OTG_USBH_handle_nptxfempty_ISR+0x80>
    {
      /* Last packet */
      len = pdev->host.hc[hnptxsts.b.nptxqtop.chnum].xfer_len;
 801420c:	7c3b      	ldrb	r3, [r7, #16]
 801420e:	f3c3 03c3 	ubfx	r3, r3, #3, #4
 8014212:	b2db      	uxtb	r3, r3
 8014214:	687a      	ldr	r2, [r7, #4]
 8014216:	015b      	lsls	r3, r3, #5
 8014218:	4413      	add	r3, r2
 801421a:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 801421e:	681b      	ldr	r3, [r3, #0]
 8014220:	83bb      	strh	r3, [r7, #28]
      
      intmsk.d32 = 0;
 8014222:	2300      	movs	r3, #0
 8014224:	61bb      	str	r3, [r7, #24]
      intmsk.b.nptxfempty = 1;
 8014226:	7e3b      	ldrb	r3, [r7, #24]
 8014228:	f043 0320 	orr.w	r3, r3, #32
 801422c:	763b      	strb	r3, [r7, #24]
      USB_OTG_MODIFY_REG32( &pdev->regs.GREGS->GINTMSK, intmsk.d32, 0);       
 801422e:	687b      	ldr	r3, [r7, #4]
 8014230:	68db      	ldr	r3, [r3, #12]
 8014232:	6999      	ldr	r1, [r3, #24]
 8014234:	69bb      	ldr	r3, [r7, #24]
 8014236:	43da      	mvns	r2, r3
 8014238:	687b      	ldr	r3, [r7, #4]
 801423a:	68db      	ldr	r3, [r3, #12]
 801423c:	400a      	ands	r2, r1
 801423e:	619a      	str	r2, [r3, #24]
    }
    
    len_words = (pdev->host.hc[hnptxsts.b.nptxqtop.chnum].xfer_len + 3) / 4;
 8014240:	7c3b      	ldrb	r3, [r7, #16]
 8014242:	f3c3 03c3 	ubfx	r3, r3, #3, #4
 8014246:	b2db      	uxtb	r3, r3
 8014248:	687a      	ldr	r2, [r7, #4]
 801424a:	015b      	lsls	r3, r3, #5
 801424c:	4413      	add	r3, r2
 801424e:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 8014252:	681b      	ldr	r3, [r3, #0]
 8014254:	3303      	adds	r3, #3
 8014256:	089b      	lsrs	r3, r3, #2
 8014258:	83fb      	strh	r3, [r7, #30]
    
    USB_OTG_WritePacket (pdev , pdev->host.hc[hnptxsts.b.nptxqtop.chnum].xfer_buff, hnptxsts.b.nptxqtop.chnum, len);
 801425a:	7c3b      	ldrb	r3, [r7, #16]
 801425c:	f3c3 03c3 	ubfx	r3, r3, #3, #4
 8014260:	b2db      	uxtb	r3, r3
 8014262:	687a      	ldr	r2, [r7, #4]
 8014264:	3315      	adds	r3, #21
 8014266:	015b      	lsls	r3, r3, #5
 8014268:	4413      	add	r3, r2
 801426a:	f503 738c 	add.w	r3, r3, #280	; 0x118
 801426e:	6819      	ldr	r1, [r3, #0]
 8014270:	7c3b      	ldrb	r3, [r7, #16]
 8014272:	f3c3 03c3 	ubfx	r3, r3, #3, #4
 8014276:	b2db      	uxtb	r3, r3
 8014278:	461a      	mov	r2, r3
 801427a:	8bbb      	ldrh	r3, [r7, #28]
 801427c:	6878      	ldr	r0, [r7, #4]
 801427e:	f7fe fdd7 	bl	8012e30 <USB_OTG_WritePacket>
    
    pdev->host.hc[hnptxsts.b.nptxqtop.chnum].xfer_buff  += len;
 8014282:	7c3b      	ldrb	r3, [r7, #16]
 8014284:	f3c3 03c3 	ubfx	r3, r3, #3, #4
 8014288:	b2db      	uxtb	r3, r3
 801428a:	687a      	ldr	r2, [r7, #4]
 801428c:	3315      	adds	r3, #21
 801428e:	015b      	lsls	r3, r3, #5
 8014290:	4413      	add	r3, r2
 8014292:	f503 738c 	add.w	r3, r3, #280	; 0x118
 8014296:	681a      	ldr	r2, [r3, #0]
 8014298:	8bbb      	ldrh	r3, [r7, #28]
 801429a:	7c39      	ldrb	r1, [r7, #16]
 801429c:	f3c1 01c3 	ubfx	r1, r1, #3, #4
 80142a0:	b2c9      	uxtb	r1, r1
 80142a2:	4608      	mov	r0, r1
 80142a4:	441a      	add	r2, r3
 80142a6:	6879      	ldr	r1, [r7, #4]
 80142a8:	f100 0315 	add.w	r3, r0, #21
 80142ac:	015b      	lsls	r3, r3, #5
 80142ae:	440b      	add	r3, r1
 80142b0:	f503 738c 	add.w	r3, r3, #280	; 0x118
 80142b4:	601a      	str	r2, [r3, #0]
    pdev->host.hc[hnptxsts.b.nptxqtop.chnum].xfer_len   -= len;
 80142b6:	7c3b      	ldrb	r3, [r7, #16]
 80142b8:	f3c3 03c3 	ubfx	r3, r3, #3, #4
 80142bc:	b2db      	uxtb	r3, r3
 80142be:	687a      	ldr	r2, [r7, #4]
 80142c0:	015b      	lsls	r3, r3, #5
 80142c2:	4413      	add	r3, r2
 80142c4:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 80142c8:	681a      	ldr	r2, [r3, #0]
 80142ca:	8bbb      	ldrh	r3, [r7, #28]
 80142cc:	7c39      	ldrb	r1, [r7, #16]
 80142ce:	f3c1 01c3 	ubfx	r1, r1, #3, #4
 80142d2:	b2c9      	uxtb	r1, r1
 80142d4:	4608      	mov	r0, r1
 80142d6:	1ad2      	subs	r2, r2, r3
 80142d8:	6879      	ldr	r1, [r7, #4]
 80142da:	0143      	lsls	r3, r0, #5
 80142dc:	440b      	add	r3, r1
 80142de:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 80142e2:	601a      	str	r2, [r3, #0]
    pdev->host.hc[hnptxsts.b.nptxqtop.chnum].xfer_count  += len; 
 80142e4:	7c3b      	ldrb	r3, [r7, #16]
 80142e6:	f3c3 03c3 	ubfx	r3, r3, #3, #4
 80142ea:	b2db      	uxtb	r3, r3
 80142ec:	687a      	ldr	r2, [r7, #4]
 80142ee:	015b      	lsls	r3, r3, #5
 80142f0:	4413      	add	r3, r2
 80142f2:	f503 7370 	add.w	r3, r3, #960	; 0x3c0
 80142f6:	681a      	ldr	r2, [r3, #0]
 80142f8:	8bbb      	ldrh	r3, [r7, #28]
 80142fa:	7c39      	ldrb	r1, [r7, #16]
 80142fc:	f3c1 01c3 	ubfx	r1, r1, #3, #4
 8014300:	b2c9      	uxtb	r1, r1
 8014302:	4608      	mov	r0, r1
 8014304:	441a      	add	r2, r3
 8014306:	6879      	ldr	r1, [r7, #4]
 8014308:	0143      	lsls	r3, r0, #5
 801430a:	440b      	add	r3, r1
 801430c:	f503 7370 	add.w	r3, r3, #960	; 0x3c0
 8014310:	601a      	str	r2, [r3, #0]
    
    hnptxsts.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->HNPTXSTS);
 8014312:	687b      	ldr	r3, [r7, #4]
 8014314:	68db      	ldr	r3, [r3, #12]
 8014316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014318:	60fb      	str	r3, [r7, #12]
  while ((hnptxsts.b.nptxfspcavail > len_words)&&
 801431a:	89bb      	ldrh	r3, [r7, #12]
 801431c:	8bfa      	ldrh	r2, [r7, #30]
 801431e:	429a      	cmp	r2, r3
 8014320:	d20c      	bcs.n	801433c <USB_OTG_USBH_handle_nptxfempty_ISR+0x17c>
         (pdev->host.hc[hnptxsts.b.nptxqtop.chnum].xfer_len != 0))
 8014322:	7c3b      	ldrb	r3, [r7, #16]
 8014324:	f3c3 03c3 	ubfx	r3, r3, #3, #4
 8014328:	b2db      	uxtb	r3, r3
 801432a:	687a      	ldr	r2, [r7, #4]
 801432c:	015b      	lsls	r3, r3, #5
 801432e:	4413      	add	r3, r2
 8014330:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 8014334:	681b      	ldr	r3, [r3, #0]
  while ((hnptxsts.b.nptxfspcavail > len_words)&&
 8014336:	2b00      	cmp	r3, #0
 8014338:	f47f af58 	bne.w	80141ec <USB_OTG_USBH_handle_nptxfempty_ISR+0x2c>
  }  
  
  return 1;
 801433c:	2301      	movs	r3, #1
}
 801433e:	4618      	mov	r0, r3
 8014340:	3720      	adds	r7, #32
 8014342:	46bd      	mov	sp, r7
 8014344:	bd80      	pop	{r7, pc}

08014346 <USB_OTG_USBH_handle_ptxfempty_ISR>:
*         Handles periodic tx fifo empty
* @param  pdev: Selected device
* @retval status 
*/
static uint32_t USB_OTG_USBH_handle_ptxfempty_ISR (USB_OTG_CORE_HANDLE *pdev)
{
 8014346:	b580      	push	{r7, lr}
 8014348:	b086      	sub	sp, #24
 801434a:	af00      	add	r7, sp, #0
 801434c:	6078      	str	r0, [r7, #4]
  USB_OTG_GINTMSK_TypeDef      intmsk;
  USB_OTG_HPTXSTS_TypeDef      hptxsts; 
  uint16_t                     len_words , len; 
  
  hptxsts.d32 = USB_OTG_READ_REG32(&pdev->regs.HREGS->HPTXSTS);
 801434e:	687b      	ldr	r3, [r7, #4]
 8014350:	695b      	ldr	r3, [r3, #20]
 8014352:	691b      	ldr	r3, [r3, #16]
 8014354:	60bb      	str	r3, [r7, #8]
  
  len_words = (pdev->host.hc[hptxsts.b.ptxqtop.chnum].xfer_len + 3) / 4;
 8014356:	7b3b      	ldrb	r3, [r7, #12]
 8014358:	f3c3 03c3 	ubfx	r3, r3, #3, #4
 801435c:	b2db      	uxtb	r3, r3
 801435e:	687a      	ldr	r2, [r7, #4]
 8014360:	015b      	lsls	r3, r3, #5
 8014362:	4413      	add	r3, r2
 8014364:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 8014368:	681b      	ldr	r3, [r3, #0]
 801436a:	3303      	adds	r3, #3
 801436c:	089b      	lsrs	r3, r3, #2
 801436e:	82fb      	strh	r3, [r7, #22]
  
  while ((hptxsts.b.ptxfspcavail > len_words)&&
 8014370:	e096      	b.n	80144a0 <USB_OTG_USBH_handle_ptxfempty_ISR+0x15a>
         (pdev->host.hc[hptxsts.b.ptxqtop.chnum].xfer_len != 0))    
  {
    
    len = hptxsts.b.ptxfspcavail * 4;
 8014372:	893b      	ldrh	r3, [r7, #8]
 8014374:	009b      	lsls	r3, r3, #2
 8014376:	82bb      	strh	r3, [r7, #20]
    
    if (len > pdev->host.hc[hptxsts.b.ptxqtop.chnum].xfer_len)
 8014378:	8aba      	ldrh	r2, [r7, #20]
 801437a:	7b3b      	ldrb	r3, [r7, #12]
 801437c:	f3c3 03c3 	ubfx	r3, r3, #3, #4
 8014380:	b2db      	uxtb	r3, r3
 8014382:	6879      	ldr	r1, [r7, #4]
 8014384:	015b      	lsls	r3, r3, #5
 8014386:	440b      	add	r3, r1
 8014388:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 801438c:	681b      	ldr	r3, [r3, #0]
 801438e:	429a      	cmp	r2, r3
 8014390:	d919      	bls.n	80143c6 <USB_OTG_USBH_handle_ptxfempty_ISR+0x80>
    {
      len = pdev->host.hc[hptxsts.b.ptxqtop.chnum].xfer_len;
 8014392:	7b3b      	ldrb	r3, [r7, #12]
 8014394:	f3c3 03c3 	ubfx	r3, r3, #3, #4
 8014398:	b2db      	uxtb	r3, r3
 801439a:	687a      	ldr	r2, [r7, #4]
 801439c:	015b      	lsls	r3, r3, #5
 801439e:	4413      	add	r3, r2
 80143a0:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 80143a4:	681b      	ldr	r3, [r3, #0]
 80143a6:	82bb      	strh	r3, [r7, #20]
      /* Last packet */
      intmsk.d32 = 0;
 80143a8:	2300      	movs	r3, #0
 80143aa:	613b      	str	r3, [r7, #16]
      intmsk.b.ptxfempty = 1;
 80143ac:	7cfb      	ldrb	r3, [r7, #19]
 80143ae:	f043 0304 	orr.w	r3, r3, #4
 80143b2:	74fb      	strb	r3, [r7, #19]
      USB_OTG_MODIFY_REG32( &pdev->regs.GREGS->GINTMSK, intmsk.d32, 0); 
 80143b4:	687b      	ldr	r3, [r7, #4]
 80143b6:	68db      	ldr	r3, [r3, #12]
 80143b8:	6999      	ldr	r1, [r3, #24]
 80143ba:	693b      	ldr	r3, [r7, #16]
 80143bc:	43da      	mvns	r2, r3
 80143be:	687b      	ldr	r3, [r7, #4]
 80143c0:	68db      	ldr	r3, [r3, #12]
 80143c2:	400a      	ands	r2, r1
 80143c4:	619a      	str	r2, [r3, #24]
    }
    
    len_words = (pdev->host.hc[hptxsts.b.ptxqtop.chnum].xfer_len + 3) / 4;
 80143c6:	7b3b      	ldrb	r3, [r7, #12]
 80143c8:	f3c3 03c3 	ubfx	r3, r3, #3, #4
 80143cc:	b2db      	uxtb	r3, r3
 80143ce:	687a      	ldr	r2, [r7, #4]
 80143d0:	015b      	lsls	r3, r3, #5
 80143d2:	4413      	add	r3, r2
 80143d4:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 80143d8:	681b      	ldr	r3, [r3, #0]
 80143da:	3303      	adds	r3, #3
 80143dc:	089b      	lsrs	r3, r3, #2
 80143de:	82fb      	strh	r3, [r7, #22]
    
    USB_OTG_WritePacket (pdev , pdev->host.hc[hptxsts.b.ptxqtop.chnum].xfer_buff, hptxsts.b.ptxqtop.chnum, len);
 80143e0:	7b3b      	ldrb	r3, [r7, #12]
 80143e2:	f3c3 03c3 	ubfx	r3, r3, #3, #4
 80143e6:	b2db      	uxtb	r3, r3
 80143e8:	687a      	ldr	r2, [r7, #4]
 80143ea:	3315      	adds	r3, #21
 80143ec:	015b      	lsls	r3, r3, #5
 80143ee:	4413      	add	r3, r2
 80143f0:	f503 738c 	add.w	r3, r3, #280	; 0x118
 80143f4:	6819      	ldr	r1, [r3, #0]
 80143f6:	7b3b      	ldrb	r3, [r7, #12]
 80143f8:	f3c3 03c3 	ubfx	r3, r3, #3, #4
 80143fc:	b2db      	uxtb	r3, r3
 80143fe:	461a      	mov	r2, r3
 8014400:	8abb      	ldrh	r3, [r7, #20]
 8014402:	6878      	ldr	r0, [r7, #4]
 8014404:	f7fe fd14 	bl	8012e30 <USB_OTG_WritePacket>
    
    pdev->host.hc[hptxsts.b.ptxqtop.chnum].xfer_buff  += len;
 8014408:	7b3b      	ldrb	r3, [r7, #12]
 801440a:	f3c3 03c3 	ubfx	r3, r3, #3, #4
 801440e:	b2db      	uxtb	r3, r3
 8014410:	687a      	ldr	r2, [r7, #4]
 8014412:	3315      	adds	r3, #21
 8014414:	015b      	lsls	r3, r3, #5
 8014416:	4413      	add	r3, r2
 8014418:	f503 738c 	add.w	r3, r3, #280	; 0x118
 801441c:	681a      	ldr	r2, [r3, #0]
 801441e:	8abb      	ldrh	r3, [r7, #20]
 8014420:	7b39      	ldrb	r1, [r7, #12]
 8014422:	f3c1 01c3 	ubfx	r1, r1, #3, #4
 8014426:	b2c9      	uxtb	r1, r1
 8014428:	4608      	mov	r0, r1
 801442a:	441a      	add	r2, r3
 801442c:	6879      	ldr	r1, [r7, #4]
 801442e:	f100 0315 	add.w	r3, r0, #21
 8014432:	015b      	lsls	r3, r3, #5
 8014434:	440b      	add	r3, r1
 8014436:	f503 738c 	add.w	r3, r3, #280	; 0x118
 801443a:	601a      	str	r2, [r3, #0]
    pdev->host.hc[hptxsts.b.ptxqtop.chnum].xfer_len   -= len;
 801443c:	7b3b      	ldrb	r3, [r7, #12]
 801443e:	f3c3 03c3 	ubfx	r3, r3, #3, #4
 8014442:	b2db      	uxtb	r3, r3
 8014444:	687a      	ldr	r2, [r7, #4]
 8014446:	015b      	lsls	r3, r3, #5
 8014448:	4413      	add	r3, r2
 801444a:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 801444e:	681a      	ldr	r2, [r3, #0]
 8014450:	8abb      	ldrh	r3, [r7, #20]
 8014452:	7b39      	ldrb	r1, [r7, #12]
 8014454:	f3c1 01c3 	ubfx	r1, r1, #3, #4
 8014458:	b2c9      	uxtb	r1, r1
 801445a:	4608      	mov	r0, r1
 801445c:	1ad2      	subs	r2, r2, r3
 801445e:	6879      	ldr	r1, [r7, #4]
 8014460:	0143      	lsls	r3, r0, #5
 8014462:	440b      	add	r3, r1
 8014464:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 8014468:	601a      	str	r2, [r3, #0]
    pdev->host.hc[hptxsts.b.ptxqtop.chnum].xfer_count  += len; 
 801446a:	7b3b      	ldrb	r3, [r7, #12]
 801446c:	f3c3 03c3 	ubfx	r3, r3, #3, #4
 8014470:	b2db      	uxtb	r3, r3
 8014472:	687a      	ldr	r2, [r7, #4]
 8014474:	015b      	lsls	r3, r3, #5
 8014476:	4413      	add	r3, r2
 8014478:	f503 7370 	add.w	r3, r3, #960	; 0x3c0
 801447c:	681a      	ldr	r2, [r3, #0]
 801447e:	8abb      	ldrh	r3, [r7, #20]
 8014480:	7b39      	ldrb	r1, [r7, #12]
 8014482:	f3c1 01c3 	ubfx	r1, r1, #3, #4
 8014486:	b2c9      	uxtb	r1, r1
 8014488:	4608      	mov	r0, r1
 801448a:	441a      	add	r2, r3
 801448c:	6879      	ldr	r1, [r7, #4]
 801448e:	0143      	lsls	r3, r0, #5
 8014490:	440b      	add	r3, r1
 8014492:	f503 7370 	add.w	r3, r3, #960	; 0x3c0
 8014496:	601a      	str	r2, [r3, #0]
    
    hptxsts.d32 = USB_OTG_READ_REG32(&pdev->regs.HREGS->HPTXSTS);
 8014498:	687b      	ldr	r3, [r7, #4]
 801449a:	695b      	ldr	r3, [r3, #20]
 801449c:	691b      	ldr	r3, [r3, #16]
 801449e:	60bb      	str	r3, [r7, #8]
  while ((hptxsts.b.ptxfspcavail > len_words)&&
 80144a0:	893b      	ldrh	r3, [r7, #8]
 80144a2:	8afa      	ldrh	r2, [r7, #22]
 80144a4:	429a      	cmp	r2, r3
 80144a6:	d20c      	bcs.n	80144c2 <USB_OTG_USBH_handle_ptxfempty_ISR+0x17c>
         (pdev->host.hc[hptxsts.b.ptxqtop.chnum].xfer_len != 0))    
 80144a8:	7b3b      	ldrb	r3, [r7, #12]
 80144aa:	f3c3 03c3 	ubfx	r3, r3, #3, #4
 80144ae:	b2db      	uxtb	r3, r3
 80144b0:	687a      	ldr	r2, [r7, #4]
 80144b2:	015b      	lsls	r3, r3, #5
 80144b4:	4413      	add	r3, r2
 80144b6:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 80144ba:	681b      	ldr	r3, [r3, #0]
  while ((hptxsts.b.ptxfspcavail > len_words)&&
 80144bc:	2b00      	cmp	r3, #0
 80144be:	f47f af58 	bne.w	8014372 <USB_OTG_USBH_handle_ptxfempty_ISR+0x2c>
  }  
  
  return 1;
 80144c2:	2301      	movs	r3, #1
}
 80144c4:	4618      	mov	r0, r3
 80144c6:	3718      	adds	r7, #24
 80144c8:	46bd      	mov	sp, r7
 80144ca:	bd80      	pop	{r7, pc}

080144cc <USB_OTG_USBH_handle_port_ISR>:
*/
#if defined ( __ICCARM__ ) /*!< IAR Compiler */
#pragma optimize = none
#endif /* __CC_ARM */
static uint32_t USB_OTG_USBH_handle_port_ISR (USB_OTG_CORE_HANDLE *pdev)
{
 80144cc:	b580      	push	{r7, lr}
 80144ce:	b088      	sub	sp, #32
 80144d0:	af00      	add	r7, sp, #0
 80144d2:	6078      	str	r0, [r7, #4]
  USB_OTG_HPRT0_TypeDef  hprt0;
  USB_OTG_HPRT0_TypeDef  hprt0_dup;
  USB_OTG_HCFG_TypeDef   hcfg;    
  uint32_t do_reset = 0;
 80144d4:	2300      	movs	r3, #0
 80144d6:	61fb      	str	r3, [r7, #28]
  uint32_t retval = 0;
 80144d8:	2300      	movs	r3, #0
 80144da:	61bb      	str	r3, [r7, #24]
  
  hcfg.d32 = 0;
 80144dc:	2300      	movs	r3, #0
 80144de:	60fb      	str	r3, [r7, #12]
  hprt0.d32 = 0;
 80144e0:	2300      	movs	r3, #0
 80144e2:	617b      	str	r3, [r7, #20]
  hprt0_dup.d32 = 0;
 80144e4:	2300      	movs	r3, #0
 80144e6:	613b      	str	r3, [r7, #16]
  
  hprt0.d32 = USB_OTG_READ_REG32(pdev->regs.HPRT0);
 80144e8:	687b      	ldr	r3, [r7, #4]
 80144ea:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 80144ee:	681b      	ldr	r3, [r3, #0]
 80144f0:	617b      	str	r3, [r7, #20]
  hprt0_dup.d32 = USB_OTG_READ_REG32(pdev->regs.HPRT0);
 80144f2:	687b      	ldr	r3, [r7, #4]
 80144f4:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 80144f8:	681b      	ldr	r3, [r3, #0]
 80144fa:	613b      	str	r3, [r7, #16]
  
  /* Clear the interrupt bits in GINTSTS */
  
  hprt0_dup.b.prtena = 0;
 80144fc:	7c3b      	ldrb	r3, [r7, #16]
 80144fe:	f36f 0382 	bfc	r3, #2, #1
 8014502:	743b      	strb	r3, [r7, #16]
  hprt0_dup.b.prtconndet = 0;
 8014504:	7c3b      	ldrb	r3, [r7, #16]
 8014506:	f36f 0341 	bfc	r3, #1, #1
 801450a:	743b      	strb	r3, [r7, #16]
  hprt0_dup.b.prtenchng = 0;
 801450c:	7c3b      	ldrb	r3, [r7, #16]
 801450e:	f36f 03c3 	bfc	r3, #3, #1
 8014512:	743b      	strb	r3, [r7, #16]
  hprt0_dup.b.prtovrcurrchng = 0;
 8014514:	7c3b      	ldrb	r3, [r7, #16]
 8014516:	f36f 1345 	bfc	r3, #5, #1
 801451a:	743b      	strb	r3, [r7, #16]
  
  /* Port Connect Detected */
  if (hprt0.b.prtconndet)
 801451c:	7d3b      	ldrb	r3, [r7, #20]
 801451e:	f003 0302 	and.w	r3, r3, #2
 8014522:	b2db      	uxtb	r3, r3
 8014524:	2b00      	cmp	r3, #0
 8014526:	d00c      	beq.n	8014542 <USB_OTG_USBH_handle_port_ISR+0x76>
  {

    hprt0_dup.b.prtconndet = 1;
 8014528:	7c3b      	ldrb	r3, [r7, #16]
 801452a:	f043 0302 	orr.w	r3, r3, #2
 801452e:	743b      	strb	r3, [r7, #16]
    USBH_HCD_INT_fops->DevConnected(pdev);
 8014530:	4b3e      	ldr	r3, [pc, #248]	; (801462c <USB_OTG_USBH_handle_port_ISR+0x160>)
 8014532:	681b      	ldr	r3, [r3, #0]
 8014534:	685b      	ldr	r3, [r3, #4]
 8014536:	6878      	ldr	r0, [r7, #4]
 8014538:	4798      	blx	r3
    retval |= 1;
 801453a:	69bb      	ldr	r3, [r7, #24]
 801453c:	f043 0301 	orr.w	r3, r3, #1
 8014540:	61bb      	str	r3, [r7, #24]
  }
  
  /* Port Enable Changed */
  if (hprt0.b.prtenchng)
 8014542:	7d3b      	ldrb	r3, [r7, #20]
 8014544:	f003 0308 	and.w	r3, r3, #8
 8014548:	b2db      	uxtb	r3, r3
 801454a:	2b00      	cmp	r3, #0
 801454c:	d050      	beq.n	80145f0 <USB_OTG_USBH_handle_port_ISR+0x124>
  {
    hprt0_dup.b.prtenchng = 1;
 801454e:	7c3b      	ldrb	r3, [r7, #16]
 8014550:	f043 0308 	orr.w	r3, r3, #8
 8014554:	743b      	strb	r3, [r7, #16]
    
    if (hprt0.b.prtena == 1)
 8014556:	7d3b      	ldrb	r3, [r7, #20]
 8014558:	f003 0304 	and.w	r3, r3, #4
 801455c:	b2db      	uxtb	r3, r3
 801455e:	2b00      	cmp	r3, #0
 8014560:	d046      	beq.n	80145f0 <USB_OTG_USBH_handle_port_ISR+0x124>
    {
      
      USBH_HCD_INT_fops->DevConnected(pdev);
 8014562:	4b32      	ldr	r3, [pc, #200]	; (801462c <USB_OTG_USBH_handle_port_ISR+0x160>)
 8014564:	681b      	ldr	r3, [r3, #0]
 8014566:	685b      	ldr	r3, [r3, #4]
 8014568:	6878      	ldr	r0, [r7, #4]
 801456a:	4798      	blx	r3
      
      if ((hprt0.b.prtspd == HPRT0_PRTSPD_LOW_SPEED) ||
 801456c:	7dbb      	ldrb	r3, [r7, #22]
 801456e:	f003 0306 	and.w	r3, r3, #6
 8014572:	b2db      	uxtb	r3, r3
 8014574:	2b04      	cmp	r3, #4
 8014576:	d005      	beq.n	8014584 <USB_OTG_USBH_handle_port_ISR+0xb8>
          (hprt0.b.prtspd == HPRT0_PRTSPD_FULL_SPEED))
 8014578:	7dbb      	ldrb	r3, [r7, #22]
 801457a:	f003 0306 	and.w	r3, r3, #6
 801457e:	b2db      	uxtb	r3, r3
      if ((hprt0.b.prtspd == HPRT0_PRTSPD_LOW_SPEED) ||
 8014580:	2b02      	cmp	r3, #2
 8014582:	d131      	bne.n	80145e8 <USB_OTG_USBH_handle_port_ISR+0x11c>
      {
        
        hcfg.d32 = USB_OTG_READ_REG32(&pdev->regs.HREGS->HCFG);
 8014584:	687b      	ldr	r3, [r7, #4]
 8014586:	695b      	ldr	r3, [r3, #20]
 8014588:	681b      	ldr	r3, [r3, #0]
 801458a:	60fb      	str	r3, [r7, #12]
        
        if (hprt0.b.prtspd == HPRT0_PRTSPD_LOW_SPEED)
 801458c:	7dbb      	ldrb	r3, [r7, #22]
 801458e:	f003 0306 	and.w	r3, r3, #6
 8014592:	b2db      	uxtb	r3, r3
 8014594:	2b04      	cmp	r3, #4
 8014596:	d115      	bne.n	80145c4 <USB_OTG_USBH_handle_port_ISR+0xf8>
        {
          USB_OTG_WRITE_REG32(&pdev->regs.HREGS->HFIR, 6000 );
 8014598:	687b      	ldr	r3, [r7, #4]
 801459a:	695b      	ldr	r3, [r3, #20]
 801459c:	f241 7270 	movw	r2, #6000	; 0x1770
 80145a0:	605a      	str	r2, [r3, #4]
          if (hcfg.b.fslspclksel != HCFG_6_MHZ)
 80145a2:	7b3b      	ldrb	r3, [r7, #12]
 80145a4:	f003 0303 	and.w	r3, r3, #3
 80145a8:	b2db      	uxtb	r3, r3
 80145aa:	2b02      	cmp	r3, #2
 80145ac:	d01f      	beq.n	80145ee <USB_OTG_USBH_handle_port_ISR+0x122>
          {
            if(pdev->cfg.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80145ae:	687b      	ldr	r3, [r7, #4]
 80145b0:	7a1b      	ldrb	r3, [r3, #8]
 80145b2:	2b02      	cmp	r3, #2
 80145b4:	d103      	bne.n	80145be <USB_OTG_USBH_handle_port_ISR+0xf2>
            {
              USB_OTG_InitFSLSPClkSel(pdev ,HCFG_6_MHZ );
 80145b6:	2102      	movs	r1, #2
 80145b8:	6878      	ldr	r0, [r7, #4]
 80145ba:	f7ff f837 	bl	801362c <USB_OTG_InitFSLSPClkSel>
            }
            do_reset = 1;
 80145be:	2301      	movs	r3, #1
 80145c0:	61fb      	str	r3, [r7, #28]
        if (hprt0.b.prtspd == HPRT0_PRTSPD_LOW_SPEED)
 80145c2:	e014      	b.n	80145ee <USB_OTG_USBH_handle_port_ISR+0x122>
          }
        }
        else
        {
          
          USB_OTG_WRITE_REG32(&pdev->regs.HREGS->HFIR, 48000 );            
 80145c4:	687b      	ldr	r3, [r7, #4]
 80145c6:	695b      	ldr	r3, [r3, #20]
 80145c8:	f64b 3280 	movw	r2, #48000	; 0xbb80
 80145cc:	605a      	str	r2, [r3, #4]
          if (hcfg.b.fslspclksel != HCFG_48_MHZ)
 80145ce:	7b3b      	ldrb	r3, [r7, #12]
 80145d0:	f003 0303 	and.w	r3, r3, #3
 80145d4:	b2db      	uxtb	r3, r3
 80145d6:	2b01      	cmp	r3, #1
 80145d8:	d009      	beq.n	80145ee <USB_OTG_USBH_handle_port_ISR+0x122>
          {
            USB_OTG_InitFSLSPClkSel(pdev ,HCFG_48_MHZ );
 80145da:	2101      	movs	r1, #1
 80145dc:	6878      	ldr	r0, [r7, #4]
 80145de:	f7ff f825 	bl	801362c <USB_OTG_InitFSLSPClkSel>
            do_reset = 1;
 80145e2:	2301      	movs	r3, #1
 80145e4:	61fb      	str	r3, [r7, #28]
        if (hprt0.b.prtspd == HPRT0_PRTSPD_LOW_SPEED)
 80145e6:	e002      	b.n	80145ee <USB_OTG_USBH_handle_port_ISR+0x122>
          }
        }
      }
      else
      {
        do_reset = 1;
 80145e8:	2301      	movs	r3, #1
 80145ea:	61fb      	str	r3, [r7, #28]
 80145ec:	e000      	b.n	80145f0 <USB_OTG_USBH_handle_port_ISR+0x124>
        if (hprt0.b.prtspd == HPRT0_PRTSPD_LOW_SPEED)
 80145ee:	bf00      	nop
      }
    }
  }
  /* Overcurrent Change Interrupt */
  if (hprt0.b.prtovrcurrchng)
 80145f0:	7d3b      	ldrb	r3, [r7, #20]
 80145f2:	f003 0320 	and.w	r3, r3, #32
 80145f6:	b2db      	uxtb	r3, r3
 80145f8:	2b00      	cmp	r3, #0
 80145fa:	d007      	beq.n	801460c <USB_OTG_USBH_handle_port_ISR+0x140>
  {
    hprt0_dup.b.prtovrcurrchng = 1;
 80145fc:	7c3b      	ldrb	r3, [r7, #16]
 80145fe:	f043 0320 	orr.w	r3, r3, #32
 8014602:	743b      	strb	r3, [r7, #16]
    retval |= 1;
 8014604:	69bb      	ldr	r3, [r7, #24]
 8014606:	f043 0301 	orr.w	r3, r3, #1
 801460a:	61bb      	str	r3, [r7, #24]
  }
  if (do_reset)
 801460c:	69fb      	ldr	r3, [r7, #28]
 801460e:	2b00      	cmp	r3, #0
 8014610:	d002      	beq.n	8014618 <USB_OTG_USBH_handle_port_ISR+0x14c>
  {
    USB_OTG_ResetPort(pdev);
 8014612:	6878      	ldr	r0, [r7, #4]
 8014614:	f7ff f853 	bl	80136be <USB_OTG_ResetPort>
  }
  /* Clear Port Interrupts */
  USB_OTG_WRITE_REG32(pdev->regs.HPRT0, hprt0_dup.d32);
 8014618:	687b      	ldr	r3, [r7, #4]
 801461a:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 801461e:	693a      	ldr	r2, [r7, #16]
 8014620:	601a      	str	r2, [r3, #0]
  
  return retval;
 8014622:	69bb      	ldr	r3, [r7, #24]
}
 8014624:	4618      	mov	r0, r3
 8014626:	3720      	adds	r7, #32
 8014628:	46bd      	mov	sp, r7
 801462a:	bd80      	pop	{r7, pc}
 801462c:	200000e0 	.word	0x200000e0

08014630 <USB_OTG_USBH_handle_hc_n_Out_ISR>:
* @param  pdev: Selected device
* @param  hc_num: Channel number
* @retval status 
*/
uint32_t USB_OTG_USBH_handle_hc_n_Out_ISR (USB_OTG_CORE_HANDLE *pdev , uint32_t num)
{
 8014630:	b580      	push	{r7, lr}
 8014632:	b09a      	sub	sp, #104	; 0x68
 8014634:	af00      	add	r7, sp, #0
 8014636:	6078      	str	r0, [r7, #4]
 8014638:	6039      	str	r1, [r7, #0]
  USB_OTG_HCINTn_TypeDef     hcint;
  USB_OTG_HCINTMSK_TypeDef  hcintmsk;
  USB_OTG_HC_REGS *hcreg;
  USB_OTG_HCCHAR_TypeDef     hcchar; 
  
  hcreg = pdev->regs.HC_REGS[num];
 801463a:	687a      	ldr	r2, [r7, #4]
 801463c:	683b      	ldr	r3, [r7, #0]
 801463e:	3322      	adds	r3, #34	; 0x22
 8014640:	009b      	lsls	r3, r3, #2
 8014642:	4413      	add	r3, r2
 8014644:	689b      	ldr	r3, [r3, #8]
 8014646:	667b      	str	r3, [r7, #100]	; 0x64
  hcint.d32 = USB_OTG_READ_REG32(&hcreg->HCINT);
 8014648:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801464a:	689b      	ldr	r3, [r3, #8]
 801464c:	663b      	str	r3, [r7, #96]	; 0x60
  hcintmsk.d32 = USB_OTG_READ_REG32(&hcreg->HCINTMSK);
 801464e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8014650:	68db      	ldr	r3, [r3, #12]
 8014652:	65fb      	str	r3, [r7, #92]	; 0x5c
  hcint.d32 = hcint.d32 & hcintmsk.d32;
 8014654:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8014656:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014658:	4013      	ands	r3, r2
 801465a:	663b      	str	r3, [r7, #96]	; 0x60
  
  hcchar.d32 = USB_OTG_READ_REG32(&pdev->regs.HC_REGS[num]->HCCHAR);
 801465c:	687a      	ldr	r2, [r7, #4]
 801465e:	683b      	ldr	r3, [r7, #0]
 8014660:	3322      	adds	r3, #34	; 0x22
 8014662:	009b      	lsls	r3, r3, #2
 8014664:	4413      	add	r3, r2
 8014666:	689b      	ldr	r3, [r3, #8]
 8014668:	681b      	ldr	r3, [r3, #0]
 801466a:	65bb      	str	r3, [r7, #88]	; 0x58
  
  if (hcint.b.ahberr)
 801466c:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8014670:	f003 0304 	and.w	r3, r3, #4
 8014674:	b2db      	uxtb	r3, r3
 8014676:	2b00      	cmp	r3, #0
 8014678:	d021      	beq.n	80146be <USB_OTG_USBH_handle_hc_n_Out_ISR+0x8e>
  {
    CLEAR_HC_INT(hcreg ,ahberr);
 801467a:	2300      	movs	r3, #0
 801467c:	657b      	str	r3, [r7, #84]	; 0x54
 801467e:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8014682:	f043 0304 	orr.w	r3, r3, #4
 8014686:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
 801468a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801468c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801468e:	609a      	str	r2, [r3, #8]
    UNMASK_HOST_INT_CHH (num);
 8014690:	687a      	ldr	r2, [r7, #4]
 8014692:	683b      	ldr	r3, [r7, #0]
 8014694:	3322      	adds	r3, #34	; 0x22
 8014696:	009b      	lsls	r3, r3, #2
 8014698:	4413      	add	r3, r2
 801469a:	689b      	ldr	r3, [r3, #8]
 801469c:	68db      	ldr	r3, [r3, #12]
 801469e:	653b      	str	r3, [r7, #80]	; 0x50
 80146a0:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 80146a4:	f043 0302 	orr.w	r3, r3, #2
 80146a8:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
 80146ac:	687a      	ldr	r2, [r7, #4]
 80146ae:	683b      	ldr	r3, [r7, #0]
 80146b0:	3322      	adds	r3, #34	; 0x22
 80146b2:	009b      	lsls	r3, r3, #2
 80146b4:	4413      	add	r3, r2
 80146b6:	689b      	ldr	r3, [r3, #8]
 80146b8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80146ba:	60da      	str	r2, [r3, #12]
 80146bc:	e25a      	b.n	8014b74 <USB_OTG_USBH_handle_hc_n_Out_ISR+0x544>
  } 
  else if (hcint.b.ack)
 80146be:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 80146c2:	f003 0320 	and.w	r3, r3, #32
 80146c6:	b2db      	uxtb	r3, r3
 80146c8:	2b00      	cmp	r3, #0
 80146ca:	d00b      	beq.n	80146e4 <USB_OTG_USBH_handle_hc_n_Out_ISR+0xb4>
  {
    CLEAR_HC_INT(hcreg , ack);
 80146cc:	2300      	movs	r3, #0
 80146ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80146d0:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 80146d4:	f043 0320 	orr.w	r3, r3, #32
 80146d8:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
 80146dc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80146de:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80146e0:	609a      	str	r2, [r3, #8]
 80146e2:	e247      	b.n	8014b74 <USB_OTG_USBH_handle_hc_n_Out_ISR+0x544>
  }
  else if (hcint.b.frmovrun)
 80146e4:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 80146e8:	f003 0302 	and.w	r3, r3, #2
 80146ec:	b2db      	uxtb	r3, r3
 80146ee:	2b00      	cmp	r3, #0
 80146f0:	d027      	beq.n	8014742 <USB_OTG_USBH_handle_hc_n_Out_ISR+0x112>
  {
    UNMASK_HOST_INT_CHH (num);
 80146f2:	687a      	ldr	r2, [r7, #4]
 80146f4:	683b      	ldr	r3, [r7, #0]
 80146f6:	3322      	adds	r3, #34	; 0x22
 80146f8:	009b      	lsls	r3, r3, #2
 80146fa:	4413      	add	r3, r2
 80146fc:	689b      	ldr	r3, [r3, #8]
 80146fe:	68db      	ldr	r3, [r3, #12]
 8014700:	64bb      	str	r3, [r7, #72]	; 0x48
 8014702:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8014706:	f043 0302 	orr.w	r3, r3, #2
 801470a:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
 801470e:	687a      	ldr	r2, [r7, #4]
 8014710:	683b      	ldr	r3, [r7, #0]
 8014712:	3322      	adds	r3, #34	; 0x22
 8014714:	009b      	lsls	r3, r3, #2
 8014716:	4413      	add	r3, r2
 8014718:	689b      	ldr	r3, [r3, #8]
 801471a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801471c:	60da      	str	r2, [r3, #12]
    USB_OTG_HC_Halt(pdev, num);
 801471e:	683b      	ldr	r3, [r7, #0]
 8014720:	b2db      	uxtb	r3, r3
 8014722:	4619      	mov	r1, r3
 8014724:	6878      	ldr	r0, [r7, #4]
 8014726:	f7ff fa9c 	bl	8013c62 <USB_OTG_HC_Halt>
    CLEAR_HC_INT(hcreg ,frmovrun);
 801472a:	2300      	movs	r3, #0
 801472c:	647b      	str	r3, [r7, #68]	; 0x44
 801472e:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8014732:	f043 0302 	orr.w	r3, r3, #2
 8014736:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 801473a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801473c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801473e:	609a      	str	r2, [r3, #8]
 8014740:	e218      	b.n	8014b74 <USB_OTG_USBH_handle_hc_n_Out_ISR+0x544>
  }
  else if (hcint.b.xfercompl)
 8014742:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8014746:	f003 0301 	and.w	r3, r3, #1
 801474a:	b2db      	uxtb	r3, r3
 801474c:	2b00      	cmp	r3, #0
 801474e:	d035      	beq.n	80147bc <USB_OTG_USBH_handle_hc_n_Out_ISR+0x18c>
  {
    pdev->host.ErrCnt[num] = 0;
 8014750:	687a      	ldr	r2, [r7, #4]
 8014752:	683b      	ldr	r3, [r7, #0]
 8014754:	33c4      	adds	r3, #196	; 0xc4
 8014756:	009b      	lsls	r3, r3, #2
 8014758:	4413      	add	r3, r2
 801475a:	2200      	movs	r2, #0
 801475c:	605a      	str	r2, [r3, #4]
    UNMASK_HOST_INT_CHH (num);
 801475e:	687a      	ldr	r2, [r7, #4]
 8014760:	683b      	ldr	r3, [r7, #0]
 8014762:	3322      	adds	r3, #34	; 0x22
 8014764:	009b      	lsls	r3, r3, #2
 8014766:	4413      	add	r3, r2
 8014768:	689b      	ldr	r3, [r3, #8]
 801476a:	68db      	ldr	r3, [r3, #12]
 801476c:	643b      	str	r3, [r7, #64]	; 0x40
 801476e:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8014772:	f043 0302 	orr.w	r3, r3, #2
 8014776:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
 801477a:	687a      	ldr	r2, [r7, #4]
 801477c:	683b      	ldr	r3, [r7, #0]
 801477e:	3322      	adds	r3, #34	; 0x22
 8014780:	009b      	lsls	r3, r3, #2
 8014782:	4413      	add	r3, r2
 8014784:	689b      	ldr	r3, [r3, #8]
 8014786:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8014788:	60da      	str	r2, [r3, #12]
    USB_OTG_HC_Halt(pdev, num);
 801478a:	683b      	ldr	r3, [r7, #0]
 801478c:	b2db      	uxtb	r3, r3
 801478e:	4619      	mov	r1, r3
 8014790:	6878      	ldr	r0, [r7, #4]
 8014792:	f7ff fa66 	bl	8013c62 <USB_OTG_HC_Halt>
    CLEAR_HC_INT(hcreg , xfercompl);
 8014796:	2300      	movs	r3, #0
 8014798:	63fb      	str	r3, [r7, #60]	; 0x3c
 801479a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 801479e:	f043 0301 	orr.w	r3, r3, #1
 80147a2:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
 80147a6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80147a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80147aa:	609a      	str	r2, [r3, #8]
    pdev->host.HC_Status[num] = HC_XFRC;            
 80147ac:	687a      	ldr	r2, [r7, #4]
 80147ae:	683b      	ldr	r3, [r7, #0]
 80147b0:	4413      	add	r3, r2
 80147b2:	f503 7363 	add.w	r3, r3, #908	; 0x38c
 80147b6:	2201      	movs	r2, #1
 80147b8:	701a      	strb	r2, [r3, #0]
 80147ba:	e1db      	b.n	8014b74 <USB_OTG_USBH_handle_hc_n_Out_ISR+0x544>
  }
  
  else if (hcint.b.stall)
 80147bc:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 80147c0:	f003 0308 	and.w	r3, r3, #8
 80147c4:	b2db      	uxtb	r3, r3
 80147c6:	2b00      	cmp	r3, #0
 80147c8:	d02e      	beq.n	8014828 <USB_OTG_USBH_handle_hc_n_Out_ISR+0x1f8>
  {
    CLEAR_HC_INT(hcreg , stall);
 80147ca:	2300      	movs	r3, #0
 80147cc:	63bb      	str	r3, [r7, #56]	; 0x38
 80147ce:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80147d2:	f043 0308 	orr.w	r3, r3, #8
 80147d6:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
 80147da:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80147dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80147de:	609a      	str	r2, [r3, #8]
    UNMASK_HOST_INT_CHH (num);
 80147e0:	687a      	ldr	r2, [r7, #4]
 80147e2:	683b      	ldr	r3, [r7, #0]
 80147e4:	3322      	adds	r3, #34	; 0x22
 80147e6:	009b      	lsls	r3, r3, #2
 80147e8:	4413      	add	r3, r2
 80147ea:	689b      	ldr	r3, [r3, #8]
 80147ec:	68db      	ldr	r3, [r3, #12]
 80147ee:	637b      	str	r3, [r7, #52]	; 0x34
 80147f0:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80147f4:	f043 0302 	orr.w	r3, r3, #2
 80147f8:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 80147fc:	687a      	ldr	r2, [r7, #4]
 80147fe:	683b      	ldr	r3, [r7, #0]
 8014800:	3322      	adds	r3, #34	; 0x22
 8014802:	009b      	lsls	r3, r3, #2
 8014804:	4413      	add	r3, r2
 8014806:	689b      	ldr	r3, [r3, #8]
 8014808:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801480a:	60da      	str	r2, [r3, #12]
    USB_OTG_HC_Halt(pdev, num);
 801480c:	683b      	ldr	r3, [r7, #0]
 801480e:	b2db      	uxtb	r3, r3
 8014810:	4619      	mov	r1, r3
 8014812:	6878      	ldr	r0, [r7, #4]
 8014814:	f7ff fa25 	bl	8013c62 <USB_OTG_HC_Halt>
    pdev->host.HC_Status[num] = HC_STALL;      
 8014818:	687a      	ldr	r2, [r7, #4]
 801481a:	683b      	ldr	r3, [r7, #0]
 801481c:	4413      	add	r3, r2
 801481e:	f503 7363 	add.w	r3, r3, #908	; 0x38c
 8014822:	2205      	movs	r2, #5
 8014824:	701a      	strb	r2, [r3, #0]
 8014826:	e1a5      	b.n	8014b74 <USB_OTG_USBH_handle_hc_n_Out_ISR+0x544>
  }
  
  else if (hcint.b.nak)
 8014828:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 801482c:	f003 0310 	and.w	r3, r3, #16
 8014830:	b2db      	uxtb	r3, r3
 8014832:	2b00      	cmp	r3, #0
 8014834:	d035      	beq.n	80148a2 <USB_OTG_USBH_handle_hc_n_Out_ISR+0x272>
  {
    pdev->host.ErrCnt[num] = 0;
 8014836:	687a      	ldr	r2, [r7, #4]
 8014838:	683b      	ldr	r3, [r7, #0]
 801483a:	33c4      	adds	r3, #196	; 0xc4
 801483c:	009b      	lsls	r3, r3, #2
 801483e:	4413      	add	r3, r2
 8014840:	2200      	movs	r2, #0
 8014842:	605a      	str	r2, [r3, #4]
    UNMASK_HOST_INT_CHH (num);
 8014844:	687a      	ldr	r2, [r7, #4]
 8014846:	683b      	ldr	r3, [r7, #0]
 8014848:	3322      	adds	r3, #34	; 0x22
 801484a:	009b      	lsls	r3, r3, #2
 801484c:	4413      	add	r3, r2
 801484e:	689b      	ldr	r3, [r3, #8]
 8014850:	68db      	ldr	r3, [r3, #12]
 8014852:	633b      	str	r3, [r7, #48]	; 0x30
 8014854:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8014858:	f043 0302 	orr.w	r3, r3, #2
 801485c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
 8014860:	687a      	ldr	r2, [r7, #4]
 8014862:	683b      	ldr	r3, [r7, #0]
 8014864:	3322      	adds	r3, #34	; 0x22
 8014866:	009b      	lsls	r3, r3, #2
 8014868:	4413      	add	r3, r2
 801486a:	689b      	ldr	r3, [r3, #8]
 801486c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801486e:	60da      	str	r2, [r3, #12]
    USB_OTG_HC_Halt(pdev, num);
 8014870:	683b      	ldr	r3, [r7, #0]
 8014872:	b2db      	uxtb	r3, r3
 8014874:	4619      	mov	r1, r3
 8014876:	6878      	ldr	r0, [r7, #4]
 8014878:	f7ff f9f3 	bl	8013c62 <USB_OTG_HC_Halt>
    CLEAR_HC_INT(hcreg , nak);
 801487c:	2300      	movs	r3, #0
 801487e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8014880:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8014884:	f043 0310 	orr.w	r3, r3, #16
 8014888:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 801488c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801488e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8014890:	609a      	str	r2, [r3, #8]
    pdev->host.HC_Status[num] = HC_NAK;      
 8014892:	687a      	ldr	r2, [r7, #4]
 8014894:	683b      	ldr	r3, [r7, #0]
 8014896:	4413      	add	r3, r2
 8014898:	f503 7363 	add.w	r3, r3, #908	; 0x38c
 801489c:	2203      	movs	r2, #3
 801489e:	701a      	strb	r2, [r3, #0]
 80148a0:	e168      	b.n	8014b74 <USB_OTG_USBH_handle_hc_n_Out_ISR+0x544>
  }
  
  else if (hcint.b.xacterr)
 80148a2:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 80148a6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80148aa:	b2db      	uxtb	r3, r3
 80148ac:	2b00      	cmp	r3, #0
 80148ae:	d03b      	beq.n	8014928 <USB_OTG_USBH_handle_hc_n_Out_ISR+0x2f8>
  {
    UNMASK_HOST_INT_CHH (num);
 80148b0:	687a      	ldr	r2, [r7, #4]
 80148b2:	683b      	ldr	r3, [r7, #0]
 80148b4:	3322      	adds	r3, #34	; 0x22
 80148b6:	009b      	lsls	r3, r3, #2
 80148b8:	4413      	add	r3, r2
 80148ba:	689b      	ldr	r3, [r3, #8]
 80148bc:	68db      	ldr	r3, [r3, #12]
 80148be:	62bb      	str	r3, [r7, #40]	; 0x28
 80148c0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80148c4:	f043 0302 	orr.w	r3, r3, #2
 80148c8:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 80148cc:	687a      	ldr	r2, [r7, #4]
 80148ce:	683b      	ldr	r3, [r7, #0]
 80148d0:	3322      	adds	r3, #34	; 0x22
 80148d2:	009b      	lsls	r3, r3, #2
 80148d4:	4413      	add	r3, r2
 80148d6:	689b      	ldr	r3, [r3, #8]
 80148d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80148da:	60da      	str	r2, [r3, #12]
    USB_OTG_HC_Halt(pdev, num);
 80148dc:	683b      	ldr	r3, [r7, #0]
 80148de:	b2db      	uxtb	r3, r3
 80148e0:	4619      	mov	r1, r3
 80148e2:	6878      	ldr	r0, [r7, #4]
 80148e4:	f7ff f9bd 	bl	8013c62 <USB_OTG_HC_Halt>
    pdev->host.ErrCnt[num] ++;
 80148e8:	687a      	ldr	r2, [r7, #4]
 80148ea:	683b      	ldr	r3, [r7, #0]
 80148ec:	33c4      	adds	r3, #196	; 0xc4
 80148ee:	009b      	lsls	r3, r3, #2
 80148f0:	4413      	add	r3, r2
 80148f2:	685b      	ldr	r3, [r3, #4]
 80148f4:	1c5a      	adds	r2, r3, #1
 80148f6:	6879      	ldr	r1, [r7, #4]
 80148f8:	683b      	ldr	r3, [r7, #0]
 80148fa:	33c4      	adds	r3, #196	; 0xc4
 80148fc:	009b      	lsls	r3, r3, #2
 80148fe:	440b      	add	r3, r1
 8014900:	605a      	str	r2, [r3, #4]
    pdev->host.HC_Status[num] = HC_XACTERR;
 8014902:	687a      	ldr	r2, [r7, #4]
 8014904:	683b      	ldr	r3, [r7, #0]
 8014906:	4413      	add	r3, r2
 8014908:	f503 7363 	add.w	r3, r3, #908	; 0x38c
 801490c:	2206      	movs	r2, #6
 801490e:	701a      	strb	r2, [r3, #0]
    CLEAR_HC_INT(hcreg , xacterr);
 8014910:	2300      	movs	r3, #0
 8014912:	627b      	str	r3, [r7, #36]	; 0x24
 8014914:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8014918:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801491c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 8014920:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014922:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8014924:	609a      	str	r2, [r3, #8]
 8014926:	e125      	b.n	8014b74 <USB_OTG_USBH_handle_hc_n_Out_ISR+0x544>
  }
  else if (hcint.b.nyet)
 8014928:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 801492c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014930:	b2db      	uxtb	r3, r3
 8014932:	2b00      	cmp	r3, #0
 8014934:	d033      	beq.n	801499e <USB_OTG_USBH_handle_hc_n_Out_ISR+0x36e>
  {
    pdev->host.ErrCnt[num] = 0;
 8014936:	687a      	ldr	r2, [r7, #4]
 8014938:	683b      	ldr	r3, [r7, #0]
 801493a:	33c4      	adds	r3, #196	; 0xc4
 801493c:	009b      	lsls	r3, r3, #2
 801493e:	4413      	add	r3, r2
 8014940:	2200      	movs	r2, #0
 8014942:	605a      	str	r2, [r3, #4]
    UNMASK_HOST_INT_CHH (num);
 8014944:	687a      	ldr	r2, [r7, #4]
 8014946:	683b      	ldr	r3, [r7, #0]
 8014948:	3322      	adds	r3, #34	; 0x22
 801494a:	009b      	lsls	r3, r3, #2
 801494c:	4413      	add	r3, r2
 801494e:	689b      	ldr	r3, [r3, #8]
 8014950:	68db      	ldr	r3, [r3, #12]
 8014952:	623b      	str	r3, [r7, #32]
 8014954:	f897 3020 	ldrb.w	r3, [r7, #32]
 8014958:	f043 0302 	orr.w	r3, r3, #2
 801495c:	f887 3020 	strb.w	r3, [r7, #32]
 8014960:	687a      	ldr	r2, [r7, #4]
 8014962:	683b      	ldr	r3, [r7, #0]
 8014964:	3322      	adds	r3, #34	; 0x22
 8014966:	009b      	lsls	r3, r3, #2
 8014968:	4413      	add	r3, r2
 801496a:	689b      	ldr	r3, [r3, #8]
 801496c:	6a3a      	ldr	r2, [r7, #32]
 801496e:	60da      	str	r2, [r3, #12]
    USB_OTG_HC_Halt(pdev, num);
 8014970:	683b      	ldr	r3, [r7, #0]
 8014972:	b2db      	uxtb	r3, r3
 8014974:	4619      	mov	r1, r3
 8014976:	6878      	ldr	r0, [r7, #4]
 8014978:	f7ff f973 	bl	8013c62 <USB_OTG_HC_Halt>
    CLEAR_HC_INT(hcreg , nyet);
 801497c:	2300      	movs	r3, #0
 801497e:	61fb      	str	r3, [r7, #28]
 8014980:	7f3b      	ldrb	r3, [r7, #28]
 8014982:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014986:	773b      	strb	r3, [r7, #28]
 8014988:	69fa      	ldr	r2, [r7, #28]
 801498a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801498c:	609a      	str	r2, [r3, #8]
    pdev->host.HC_Status[num] = HC_NYET;    
 801498e:	687a      	ldr	r2, [r7, #4]
 8014990:	683b      	ldr	r3, [r7, #0]
 8014992:	4413      	add	r3, r2
 8014994:	f503 7363 	add.w	r3, r3, #908	; 0x38c
 8014998:	2204      	movs	r2, #4
 801499a:	701a      	strb	r2, [r3, #0]
 801499c:	e0ea      	b.n	8014b74 <USB_OTG_USBH_handle_hc_n_Out_ISR+0x544>
  }
  else if (hcint.b.datatglerr)
 801499e:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 80149a2:	f003 0304 	and.w	r3, r3, #4
 80149a6:	b2db      	uxtb	r3, r3
 80149a8:	2b00      	cmp	r3, #0
 80149aa:	d033      	beq.n	8014a14 <USB_OTG_USBH_handle_hc_n_Out_ISR+0x3e4>
  {
    
    UNMASK_HOST_INT_CHH (num);
 80149ac:	687a      	ldr	r2, [r7, #4]
 80149ae:	683b      	ldr	r3, [r7, #0]
 80149b0:	3322      	adds	r3, #34	; 0x22
 80149b2:	009b      	lsls	r3, r3, #2
 80149b4:	4413      	add	r3, r2
 80149b6:	689b      	ldr	r3, [r3, #8]
 80149b8:	68db      	ldr	r3, [r3, #12]
 80149ba:	61bb      	str	r3, [r7, #24]
 80149bc:	7e3b      	ldrb	r3, [r7, #24]
 80149be:	f043 0302 	orr.w	r3, r3, #2
 80149c2:	763b      	strb	r3, [r7, #24]
 80149c4:	687a      	ldr	r2, [r7, #4]
 80149c6:	683b      	ldr	r3, [r7, #0]
 80149c8:	3322      	adds	r3, #34	; 0x22
 80149ca:	009b      	lsls	r3, r3, #2
 80149cc:	4413      	add	r3, r2
 80149ce:	689b      	ldr	r3, [r3, #8]
 80149d0:	69ba      	ldr	r2, [r7, #24]
 80149d2:	60da      	str	r2, [r3, #12]
    USB_OTG_HC_Halt(pdev, num);
 80149d4:	683b      	ldr	r3, [r7, #0]
 80149d6:	b2db      	uxtb	r3, r3
 80149d8:	4619      	mov	r1, r3
 80149da:	6878      	ldr	r0, [r7, #4]
 80149dc:	f7ff f941 	bl	8013c62 <USB_OTG_HC_Halt>
    CLEAR_HC_INT(hcreg , nak);   
 80149e0:	2300      	movs	r3, #0
 80149e2:	617b      	str	r3, [r7, #20]
 80149e4:	7d3b      	ldrb	r3, [r7, #20]
 80149e6:	f043 0310 	orr.w	r3, r3, #16
 80149ea:	753b      	strb	r3, [r7, #20]
 80149ec:	697a      	ldr	r2, [r7, #20]
 80149ee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80149f0:	609a      	str	r2, [r3, #8]
    pdev->host.HC_Status[num] = HC_DATATGLERR;
 80149f2:	687a      	ldr	r2, [r7, #4]
 80149f4:	683b      	ldr	r3, [r7, #0]
 80149f6:	4413      	add	r3, r2
 80149f8:	f503 7363 	add.w	r3, r3, #908	; 0x38c
 80149fc:	2208      	movs	r2, #8
 80149fe:	701a      	strb	r2, [r3, #0]
    
    CLEAR_HC_INT(hcreg , datatglerr);
 8014a00:	2300      	movs	r3, #0
 8014a02:	613b      	str	r3, [r7, #16]
 8014a04:	7c7b      	ldrb	r3, [r7, #17]
 8014a06:	f043 0304 	orr.w	r3, r3, #4
 8014a0a:	747b      	strb	r3, [r7, #17]
 8014a0c:	693a      	ldr	r2, [r7, #16]
 8014a0e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8014a10:	609a      	str	r2, [r3, #8]
 8014a12:	e0af      	b.n	8014b74 <USB_OTG_USBH_handle_hc_n_Out_ISR+0x544>
  }  
  else if (hcint.b.chhltd)
 8014a14:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8014a18:	f003 0302 	and.w	r3, r3, #2
 8014a1c:	b2db      	uxtb	r3, r3
 8014a1e:	2b00      	cmp	r3, #0
 8014a20:	f000 80a8 	beq.w	8014b74 <USB_OTG_USBH_handle_hc_n_Out_ISR+0x544>
  {
    MASK_HOST_INT_CHH (num);
 8014a24:	687a      	ldr	r2, [r7, #4]
 8014a26:	683b      	ldr	r3, [r7, #0]
 8014a28:	3322      	adds	r3, #34	; 0x22
 8014a2a:	009b      	lsls	r3, r3, #2
 8014a2c:	4413      	add	r3, r2
 8014a2e:	689b      	ldr	r3, [r3, #8]
 8014a30:	68db      	ldr	r3, [r3, #12]
 8014a32:	60fb      	str	r3, [r7, #12]
 8014a34:	7b3b      	ldrb	r3, [r7, #12]
 8014a36:	f36f 0341 	bfc	r3, #1, #1
 8014a3a:	733b      	strb	r3, [r7, #12]
 8014a3c:	687a      	ldr	r2, [r7, #4]
 8014a3e:	683b      	ldr	r3, [r7, #0]
 8014a40:	3322      	adds	r3, #34	; 0x22
 8014a42:	009b      	lsls	r3, r3, #2
 8014a44:	4413      	add	r3, r2
 8014a46:	689b      	ldr	r3, [r3, #8]
 8014a48:	68fa      	ldr	r2, [r7, #12]
 8014a4a:	60da      	str	r2, [r3, #12]
    
    if(pdev->host.HC_Status[num] == HC_XFRC)
 8014a4c:	687a      	ldr	r2, [r7, #4]
 8014a4e:	683b      	ldr	r3, [r7, #0]
 8014a50:	4413      	add	r3, r2
 8014a52:	f503 7363 	add.w	r3, r3, #908	; 0x38c
 8014a56:	781b      	ldrb	r3, [r3, #0]
 8014a58:	b2db      	uxtb	r3, r3
 8014a5a:	2b01      	cmp	r3, #1
 8014a5c:	d120      	bne.n	8014aa0 <USB_OTG_USBH_handle_hc_n_Out_ISR+0x470>
    {
      pdev->host.URB_State[num] = URB_DONE;  
 8014a5e:	687a      	ldr	r2, [r7, #4]
 8014a60:	683b      	ldr	r3, [r7, #0]
 8014a62:	4413      	add	r3, r2
 8014a64:	f203 339b 	addw	r3, r3, #923	; 0x39b
 8014a68:	2201      	movs	r2, #1
 8014a6a:	701a      	strb	r2, [r3, #0]
      
      if (hcchar.b.eptype == EP_TYPE_BULK)
 8014a6c:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 8014a70:	f003 030c 	and.w	r3, r3, #12
 8014a74:	b2db      	uxtb	r3, r3
 8014a76:	2b08      	cmp	r3, #8
 8014a78:	d173      	bne.n	8014b62 <USB_OTG_USBH_handle_hc_n_Out_ISR+0x532>
      {
        pdev->host.hc[num].toggle_out ^= 1; 
 8014a7a:	687a      	ldr	r2, [r7, #4]
 8014a7c:	683b      	ldr	r3, [r7, #0]
 8014a7e:	331e      	adds	r3, #30
 8014a80:	015b      	lsls	r3, r3, #5
 8014a82:	4413      	add	r3, r2
 8014a84:	3305      	adds	r3, #5
 8014a86:	781b      	ldrb	r3, [r3, #0]
 8014a88:	f083 0301 	eor.w	r3, r3, #1
 8014a8c:	b2d9      	uxtb	r1, r3
 8014a8e:	687a      	ldr	r2, [r7, #4]
 8014a90:	683b      	ldr	r3, [r7, #0]
 8014a92:	331e      	adds	r3, #30
 8014a94:	015b      	lsls	r3, r3, #5
 8014a96:	4413      	add	r3, r2
 8014a98:	3305      	adds	r3, #5
 8014a9a:	460a      	mov	r2, r1
 8014a9c:	701a      	strb	r2, [r3, #0]
 8014a9e:	e060      	b.n	8014b62 <USB_OTG_USBH_handle_hc_n_Out_ISR+0x532>
      }
    }
    else if(pdev->host.HC_Status[num] == HC_NAK)
 8014aa0:	687a      	ldr	r2, [r7, #4]
 8014aa2:	683b      	ldr	r3, [r7, #0]
 8014aa4:	4413      	add	r3, r2
 8014aa6:	f503 7363 	add.w	r3, r3, #908	; 0x38c
 8014aaa:	781b      	ldrb	r3, [r3, #0]
 8014aac:	b2db      	uxtb	r3, r3
 8014aae:	2b03      	cmp	r3, #3
 8014ab0:	d107      	bne.n	8014ac2 <USB_OTG_USBH_handle_hc_n_Out_ISR+0x492>
    {
      pdev->host.URB_State[num] = URB_NOTREADY;      
 8014ab2:	687a      	ldr	r2, [r7, #4]
 8014ab4:	683b      	ldr	r3, [r7, #0]
 8014ab6:	4413      	add	r3, r2
 8014ab8:	f203 339b 	addw	r3, r3, #923	; 0x39b
 8014abc:	2202      	movs	r2, #2
 8014abe:	701a      	strb	r2, [r3, #0]
 8014ac0:	e04f      	b.n	8014b62 <USB_OTG_USBH_handle_hc_n_Out_ISR+0x532>
    }    
    else if(pdev->host.HC_Status[num] == HC_NYET)
 8014ac2:	687a      	ldr	r2, [r7, #4]
 8014ac4:	683b      	ldr	r3, [r7, #0]
 8014ac6:	4413      	add	r3, r2
 8014ac8:	f503 7363 	add.w	r3, r3, #908	; 0x38c
 8014acc:	781b      	ldrb	r3, [r3, #0]
 8014ace:	b2db      	uxtb	r3, r3
 8014ad0:	2b04      	cmp	r3, #4
 8014ad2:	d116      	bne.n	8014b02 <USB_OTG_USBH_handle_hc_n_Out_ISR+0x4d2>
    {
      if(pdev->host.hc[num].do_ping == 1)
 8014ad4:	687a      	ldr	r2, [r7, #4]
 8014ad6:	683b      	ldr	r3, [r7, #0]
 8014ad8:	015b      	lsls	r3, r3, #5
 8014ada:	4413      	add	r3, r2
 8014adc:	f503 736c 	add.w	r3, r3, #944	; 0x3b0
 8014ae0:	781b      	ldrb	r3, [r3, #0]
 8014ae2:	2b01      	cmp	r3, #1
 8014ae4:	d105      	bne.n	8014af2 <USB_OTG_USBH_handle_hc_n_Out_ISR+0x4c2>
      {
        USB_OTG_HC_DoPing(pdev, num);
 8014ae6:	683b      	ldr	r3, [r7, #0]
 8014ae8:	b2db      	uxtb	r3, r3
 8014aea:	4619      	mov	r1, r3
 8014aec:	6878      	ldr	r0, [r7, #4]
 8014aee:	f7ff f908 	bl	8013d02 <USB_OTG_HC_DoPing>
      }
      pdev->host.URB_State[num] = URB_NOTREADY;      
 8014af2:	687a      	ldr	r2, [r7, #4]
 8014af4:	683b      	ldr	r3, [r7, #0]
 8014af6:	4413      	add	r3, r2
 8014af8:	f203 339b 	addw	r3, r3, #923	; 0x39b
 8014afc:	2202      	movs	r2, #2
 8014afe:	701a      	strb	r2, [r3, #0]
 8014b00:	e02f      	b.n	8014b62 <USB_OTG_USBH_handle_hc_n_Out_ISR+0x532>
    }      
    else if(pdev->host.HC_Status[num] == HC_STALL)
 8014b02:	687a      	ldr	r2, [r7, #4]
 8014b04:	683b      	ldr	r3, [r7, #0]
 8014b06:	4413      	add	r3, r2
 8014b08:	f503 7363 	add.w	r3, r3, #908	; 0x38c
 8014b0c:	781b      	ldrb	r3, [r3, #0]
 8014b0e:	b2db      	uxtb	r3, r3
 8014b10:	2b05      	cmp	r3, #5
 8014b12:	d107      	bne.n	8014b24 <USB_OTG_USBH_handle_hc_n_Out_ISR+0x4f4>
    {
      pdev->host.URB_State[num] = URB_STALL;      
 8014b14:	687a      	ldr	r2, [r7, #4]
 8014b16:	683b      	ldr	r3, [r7, #0]
 8014b18:	4413      	add	r3, r2
 8014b1a:	f203 339b 	addw	r3, r3, #923	; 0x39b
 8014b1e:	2204      	movs	r2, #4
 8014b20:	701a      	strb	r2, [r3, #0]
 8014b22:	e01e      	b.n	8014b62 <USB_OTG_USBH_handle_hc_n_Out_ISR+0x532>
    }  
    else if(pdev->host.HC_Status[num] == HC_XACTERR)
 8014b24:	687a      	ldr	r2, [r7, #4]
 8014b26:	683b      	ldr	r3, [r7, #0]
 8014b28:	4413      	add	r3, r2
 8014b2a:	f503 7363 	add.w	r3, r3, #908	; 0x38c
 8014b2e:	781b      	ldrb	r3, [r3, #0]
 8014b30:	b2db      	uxtb	r3, r3
 8014b32:	2b06      	cmp	r3, #6
 8014b34:	d115      	bne.n	8014b62 <USB_OTG_USBH_handle_hc_n_Out_ISR+0x532>
    {
      if (pdev->host.ErrCnt[num] == 3)
 8014b36:	687a      	ldr	r2, [r7, #4]
 8014b38:	683b      	ldr	r3, [r7, #0]
 8014b3a:	33c4      	adds	r3, #196	; 0xc4
 8014b3c:	009b      	lsls	r3, r3, #2
 8014b3e:	4413      	add	r3, r2
 8014b40:	685b      	ldr	r3, [r3, #4]
 8014b42:	2b03      	cmp	r3, #3
 8014b44:	d10d      	bne.n	8014b62 <USB_OTG_USBH_handle_hc_n_Out_ISR+0x532>
      {
        pdev->host.URB_State[num] = URB_ERROR;  
 8014b46:	687a      	ldr	r2, [r7, #4]
 8014b48:	683b      	ldr	r3, [r7, #0]
 8014b4a:	4413      	add	r3, r2
 8014b4c:	f203 339b 	addw	r3, r3, #923	; 0x39b
 8014b50:	2203      	movs	r2, #3
 8014b52:	701a      	strb	r2, [r3, #0]
        pdev->host.ErrCnt[num] = 0;
 8014b54:	687a      	ldr	r2, [r7, #4]
 8014b56:	683b      	ldr	r3, [r7, #0]
 8014b58:	33c4      	adds	r3, #196	; 0xc4
 8014b5a:	009b      	lsls	r3, r3, #2
 8014b5c:	4413      	add	r3, r2
 8014b5e:	2200      	movs	r2, #0
 8014b60:	605a      	str	r2, [r3, #4]
      }
    }
    CLEAR_HC_INT(hcreg , chhltd);    
 8014b62:	2300      	movs	r3, #0
 8014b64:	60bb      	str	r3, [r7, #8]
 8014b66:	7a3b      	ldrb	r3, [r7, #8]
 8014b68:	f043 0302 	orr.w	r3, r3, #2
 8014b6c:	723b      	strb	r3, [r7, #8]
 8014b6e:	68ba      	ldr	r2, [r7, #8]
 8014b70:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8014b72:	609a      	str	r2, [r3, #8]
  }
  
  
  return 1;
 8014b74:	2301      	movs	r3, #1
}
 8014b76:	4618      	mov	r0, r3
 8014b78:	3768      	adds	r7, #104	; 0x68
 8014b7a:	46bd      	mov	sp, r7
 8014b7c:	bd80      	pop	{r7, pc}

08014b7e <USB_OTG_USBH_handle_hc_n_In_ISR>:
* @param  pdev: Selected device
* @param  hc_num: Channel number
* @retval status 
*/
uint32_t USB_OTG_USBH_handle_hc_n_In_ISR (USB_OTG_CORE_HANDLE *pdev , uint32_t num)
{
 8014b7e:	b580      	push	{r7, lr}
 8014b80:	b09c      	sub	sp, #112	; 0x70
 8014b82:	af00      	add	r7, sp, #0
 8014b84:	6078      	str	r0, [r7, #4]
 8014b86:	6039      	str	r1, [r7, #0]
  USB_OTG_HCCHAR_TypeDef     hcchar; 
  USB_OTG_HCTSIZn_TypeDef  hctsiz;
  USB_OTG_HC_REGS *hcreg;
  
  
  hcreg = pdev->regs.HC_REGS[num];
 8014b88:	687a      	ldr	r2, [r7, #4]
 8014b8a:	683b      	ldr	r3, [r7, #0]
 8014b8c:	3322      	adds	r3, #34	; 0x22
 8014b8e:	009b      	lsls	r3, r3, #2
 8014b90:	4413      	add	r3, r2
 8014b92:	689b      	ldr	r3, [r3, #8]
 8014b94:	66fb      	str	r3, [r7, #108]	; 0x6c
  hcint.d32 = USB_OTG_READ_REG32(&hcreg->HCINT);
 8014b96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014b98:	689b      	ldr	r3, [r3, #8]
 8014b9a:	66bb      	str	r3, [r7, #104]	; 0x68
  hcintmsk.d32 = USB_OTG_READ_REG32(&hcreg->HCINTMSK);
 8014b9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014b9e:	68db      	ldr	r3, [r3, #12]
 8014ba0:	667b      	str	r3, [r7, #100]	; 0x64
  hcint.d32 = hcint.d32 & hcintmsk.d32;
 8014ba2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8014ba4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8014ba6:	4013      	ands	r3, r2
 8014ba8:	66bb      	str	r3, [r7, #104]	; 0x68
  hcchar.d32 = USB_OTG_READ_REG32(&pdev->regs.HC_REGS[num]->HCCHAR);
 8014baa:	687a      	ldr	r2, [r7, #4]
 8014bac:	683b      	ldr	r3, [r7, #0]
 8014bae:	3322      	adds	r3, #34	; 0x22
 8014bb0:	009b      	lsls	r3, r3, #2
 8014bb2:	4413      	add	r3, r2
 8014bb4:	689b      	ldr	r3, [r3, #8]
 8014bb6:	681b      	ldr	r3, [r3, #0]
 8014bb8:	663b      	str	r3, [r7, #96]	; 0x60
  hcintmsk.d32 = 0;
 8014bba:	2300      	movs	r3, #0
 8014bbc:	667b      	str	r3, [r7, #100]	; 0x64
  
  
  if (hcint.b.ahberr)
 8014bbe:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 8014bc2:	f003 0304 	and.w	r3, r3, #4
 8014bc6:	b2db      	uxtb	r3, r3
 8014bc8:	2b00      	cmp	r3, #0
 8014bca:	d021      	beq.n	8014c10 <USB_OTG_USBH_handle_hc_n_In_ISR+0x92>
  {
    CLEAR_HC_INT(hcreg ,ahberr);
 8014bcc:	2300      	movs	r3, #0
 8014bce:	65bb      	str	r3, [r7, #88]	; 0x58
 8014bd0:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 8014bd4:	f043 0304 	orr.w	r3, r3, #4
 8014bd8:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
 8014bdc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8014bde:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014be0:	609a      	str	r2, [r3, #8]
    UNMASK_HOST_INT_CHH (num);
 8014be2:	687a      	ldr	r2, [r7, #4]
 8014be4:	683b      	ldr	r3, [r7, #0]
 8014be6:	3322      	adds	r3, #34	; 0x22
 8014be8:	009b      	lsls	r3, r3, #2
 8014bea:	4413      	add	r3, r2
 8014bec:	689b      	ldr	r3, [r3, #8]
 8014bee:	68db      	ldr	r3, [r3, #12]
 8014bf0:	657b      	str	r3, [r7, #84]	; 0x54
 8014bf2:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8014bf6:	f043 0302 	orr.w	r3, r3, #2
 8014bfa:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
 8014bfe:	687a      	ldr	r2, [r7, #4]
 8014c00:	683b      	ldr	r3, [r7, #0]
 8014c02:	3322      	adds	r3, #34	; 0x22
 8014c04:	009b      	lsls	r3, r3, #2
 8014c06:	4413      	add	r3, r2
 8014c08:	689b      	ldr	r3, [r3, #8]
 8014c0a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8014c0c:	60da      	str	r2, [r3, #12]
 8014c0e:	e099      	b.n	8014d44 <USB_OTG_USBH_handle_hc_n_In_ISR+0x1c6>
  }  
  else if (hcint.b.ack)
 8014c10:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 8014c14:	f003 0320 	and.w	r3, r3, #32
 8014c18:	b2db      	uxtb	r3, r3
 8014c1a:	2b00      	cmp	r3, #0
 8014c1c:	d00b      	beq.n	8014c36 <USB_OTG_USBH_handle_hc_n_In_ISR+0xb8>
  {
    CLEAR_HC_INT(hcreg ,ack);
 8014c1e:	2300      	movs	r3, #0
 8014c20:	653b      	str	r3, [r7, #80]	; 0x50
 8014c22:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8014c26:	f043 0320 	orr.w	r3, r3, #32
 8014c2a:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
 8014c2e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8014c30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014c32:	609a      	str	r2, [r3, #8]
 8014c34:	e086      	b.n	8014d44 <USB_OTG_USBH_handle_hc_n_In_ISR+0x1c6>
  }
  
  else if (hcint.b.stall)  
 8014c36:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 8014c3a:	f003 0308 	and.w	r3, r3, #8
 8014c3e:	b2db      	uxtb	r3, r3
 8014c40:	2b00      	cmp	r3, #0
 8014c42:	d03f      	beq.n	8014cc4 <USB_OTG_USBH_handle_hc_n_In_ISR+0x146>
  {
    UNMASK_HOST_INT_CHH (num);
 8014c44:	687a      	ldr	r2, [r7, #4]
 8014c46:	683b      	ldr	r3, [r7, #0]
 8014c48:	3322      	adds	r3, #34	; 0x22
 8014c4a:	009b      	lsls	r3, r3, #2
 8014c4c:	4413      	add	r3, r2
 8014c4e:	689b      	ldr	r3, [r3, #8]
 8014c50:	68db      	ldr	r3, [r3, #12]
 8014c52:	64fb      	str	r3, [r7, #76]	; 0x4c
 8014c54:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8014c58:	f043 0302 	orr.w	r3, r3, #2
 8014c5c:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
 8014c60:	687a      	ldr	r2, [r7, #4]
 8014c62:	683b      	ldr	r3, [r7, #0]
 8014c64:	3322      	adds	r3, #34	; 0x22
 8014c66:	009b      	lsls	r3, r3, #2
 8014c68:	4413      	add	r3, r2
 8014c6a:	689b      	ldr	r3, [r3, #8]
 8014c6c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8014c6e:	60da      	str	r2, [r3, #12]
    pdev->host.HC_Status[num] = HC_STALL; 
 8014c70:	687a      	ldr	r2, [r7, #4]
 8014c72:	683b      	ldr	r3, [r7, #0]
 8014c74:	4413      	add	r3, r2
 8014c76:	f503 7363 	add.w	r3, r3, #908	; 0x38c
 8014c7a:	2205      	movs	r2, #5
 8014c7c:	701a      	strb	r2, [r3, #0]
    CLEAR_HC_INT(hcreg , nak);   /* Clear the NAK Condition */
 8014c7e:	2300      	movs	r3, #0
 8014c80:	64bb      	str	r3, [r7, #72]	; 0x48
 8014c82:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8014c86:	f043 0310 	orr.w	r3, r3, #16
 8014c8a:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
 8014c8e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8014c90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014c92:	609a      	str	r2, [r3, #8]
    CLEAR_HC_INT(hcreg , stall); /* Clear the STALL Condition */
 8014c94:	2300      	movs	r3, #0
 8014c96:	647b      	str	r3, [r7, #68]	; 0x44
 8014c98:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8014c9c:	f043 0308 	orr.w	r3, r3, #8
 8014ca0:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
 8014ca4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8014ca6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014ca8:	609a      	str	r2, [r3, #8]
    hcint.b.nak = 0;           /* NOTE: When there is a 'stall', reset also nak, 
 8014caa:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 8014cae:	f36f 1304 	bfc	r3, #4, #1
 8014cb2:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                                  else, the pdev->host.HC_Status = HC_STALL
    will be overwritten by 'nak' in code below */
    USB_OTG_HC_Halt(pdev, num);    
 8014cb6:	683b      	ldr	r3, [r7, #0]
 8014cb8:	b2db      	uxtb	r3, r3
 8014cba:	4619      	mov	r1, r3
 8014cbc:	6878      	ldr	r0, [r7, #4]
 8014cbe:	f7fe ffd0 	bl	8013c62 <USB_OTG_HC_Halt>
 8014cc2:	e03f      	b.n	8014d44 <USB_OTG_USBH_handle_hc_n_In_ISR+0x1c6>
  }
  else if (hcint.b.datatglerr)
 8014cc4:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
 8014cc8:	f003 0304 	and.w	r3, r3, #4
 8014ccc:	b2db      	uxtb	r3, r3
 8014cce:	2b00      	cmp	r3, #0
 8014cd0:	d038      	beq.n	8014d44 <USB_OTG_USBH_handle_hc_n_In_ISR+0x1c6>
  {
    
    UNMASK_HOST_INT_CHH (num);
 8014cd2:	687a      	ldr	r2, [r7, #4]
 8014cd4:	683b      	ldr	r3, [r7, #0]
 8014cd6:	3322      	adds	r3, #34	; 0x22
 8014cd8:	009b      	lsls	r3, r3, #2
 8014cda:	4413      	add	r3, r2
 8014cdc:	689b      	ldr	r3, [r3, #8]
 8014cde:	68db      	ldr	r3, [r3, #12]
 8014ce0:	643b      	str	r3, [r7, #64]	; 0x40
 8014ce2:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8014ce6:	f043 0302 	orr.w	r3, r3, #2
 8014cea:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
 8014cee:	687a      	ldr	r2, [r7, #4]
 8014cf0:	683b      	ldr	r3, [r7, #0]
 8014cf2:	3322      	adds	r3, #34	; 0x22
 8014cf4:	009b      	lsls	r3, r3, #2
 8014cf6:	4413      	add	r3, r2
 8014cf8:	689b      	ldr	r3, [r3, #8]
 8014cfa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8014cfc:	60da      	str	r2, [r3, #12]
    USB_OTG_HC_Halt(pdev, num);
 8014cfe:	683b      	ldr	r3, [r7, #0]
 8014d00:	b2db      	uxtb	r3, r3
 8014d02:	4619      	mov	r1, r3
 8014d04:	6878      	ldr	r0, [r7, #4]
 8014d06:	f7fe ffac 	bl	8013c62 <USB_OTG_HC_Halt>
    CLEAR_HC_INT(hcreg , nak);   
 8014d0a:	2300      	movs	r3, #0
 8014d0c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8014d0e:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8014d12:	f043 0310 	orr.w	r3, r3, #16
 8014d16:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
 8014d1a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8014d1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014d1e:	609a      	str	r2, [r3, #8]
    pdev->host.HC_Status[num] = HC_DATATGLERR; 
 8014d20:	687a      	ldr	r2, [r7, #4]
 8014d22:	683b      	ldr	r3, [r7, #0]
 8014d24:	4413      	add	r3, r2
 8014d26:	f503 7363 	add.w	r3, r3, #908	; 0x38c
 8014d2a:	2208      	movs	r2, #8
 8014d2c:	701a      	strb	r2, [r3, #0]
    CLEAR_HC_INT(hcreg , datatglerr);
 8014d2e:	2300      	movs	r3, #0
 8014d30:	63bb      	str	r3, [r7, #56]	; 0x38
 8014d32:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8014d36:	f043 0304 	orr.w	r3, r3, #4
 8014d3a:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 8014d3e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014d40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014d42:	609a      	str	r2, [r3, #8]
  }    
  
  if (hcint.b.frmovrun)
 8014d44:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
 8014d48:	f003 0302 	and.w	r3, r3, #2
 8014d4c:	b2db      	uxtb	r3, r3
 8014d4e:	2b00      	cmp	r3, #0
 8014d50:	d027      	beq.n	8014da2 <USB_OTG_USBH_handle_hc_n_In_ISR+0x224>
  {
    UNMASK_HOST_INT_CHH (num);
 8014d52:	687a      	ldr	r2, [r7, #4]
 8014d54:	683b      	ldr	r3, [r7, #0]
 8014d56:	3322      	adds	r3, #34	; 0x22
 8014d58:	009b      	lsls	r3, r3, #2
 8014d5a:	4413      	add	r3, r2
 8014d5c:	689b      	ldr	r3, [r3, #8]
 8014d5e:	68db      	ldr	r3, [r3, #12]
 8014d60:	637b      	str	r3, [r7, #52]	; 0x34
 8014d62:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8014d66:	f043 0302 	orr.w	r3, r3, #2
 8014d6a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 8014d6e:	687a      	ldr	r2, [r7, #4]
 8014d70:	683b      	ldr	r3, [r7, #0]
 8014d72:	3322      	adds	r3, #34	; 0x22
 8014d74:	009b      	lsls	r3, r3, #2
 8014d76:	4413      	add	r3, r2
 8014d78:	689b      	ldr	r3, [r3, #8]
 8014d7a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014d7c:	60da      	str	r2, [r3, #12]
    USB_OTG_HC_Halt(pdev, num);
 8014d7e:	683b      	ldr	r3, [r7, #0]
 8014d80:	b2db      	uxtb	r3, r3
 8014d82:	4619      	mov	r1, r3
 8014d84:	6878      	ldr	r0, [r7, #4]
 8014d86:	f7fe ff6c 	bl	8013c62 <USB_OTG_HC_Halt>
    CLEAR_HC_INT(hcreg ,frmovrun);
 8014d8a:	2300      	movs	r3, #0
 8014d8c:	633b      	str	r3, [r7, #48]	; 0x30
 8014d8e:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8014d92:	f043 0302 	orr.w	r3, r3, #2
 8014d96:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
 8014d9a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014d9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014d9e:	609a      	str	r2, [r3, #8]
 8014da0:	e1bf      	b.n	8015122 <USB_OTG_USBH_handle_hc_n_In_ISR+0x5a4>
  }
  
  else if (hcint.b.xfercompl)
 8014da2:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 8014da6:	f003 0301 	and.w	r3, r3, #1
 8014daa:	b2db      	uxtb	r3, r3
 8014dac:	2b00      	cmp	r3, #0
 8014dae:	f000 809b 	beq.w	8014ee8 <USB_OTG_USBH_handle_hc_n_In_ISR+0x36a>
  {
    
    if (pdev->cfg.dma_enable == 1)
 8014db2:	687b      	ldr	r3, [r7, #4]
 8014db4:	78db      	ldrb	r3, [r3, #3]
 8014db6:	2b01      	cmp	r3, #1
 8014db8:	d117      	bne.n	8014dea <USB_OTG_USBH_handle_hc_n_In_ISR+0x26c>
    {
      hctsiz.d32 = USB_OTG_READ_REG32(&pdev->regs.HC_REGS[num]->HCTSIZ);
 8014dba:	687a      	ldr	r2, [r7, #4]
 8014dbc:	683b      	ldr	r3, [r7, #0]
 8014dbe:	3322      	adds	r3, #34	; 0x22
 8014dc0:	009b      	lsls	r3, r3, #2
 8014dc2:	4413      	add	r3, r2
 8014dc4:	689b      	ldr	r3, [r3, #8]
 8014dc6:	691b      	ldr	r3, [r3, #16]
 8014dc8:	65fb      	str	r3, [r7, #92]	; 0x5c
      pdev->host.XferCnt[num] =  pdev->host.hc[num].xfer_len - hctsiz.b.xfersize;
 8014dca:	687a      	ldr	r2, [r7, #4]
 8014dcc:	683b      	ldr	r3, [r7, #0]
 8014dce:	015b      	lsls	r3, r3, #5
 8014dd0:	4413      	add	r3, r2
 8014dd2:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 8014dd6:	681b      	ldr	r3, [r3, #0]
 8014dd8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8014dda:	f3c2 0212 	ubfx	r2, r2, #0, #19
 8014dde:	1a99      	subs	r1, r3, r2
 8014de0:	687b      	ldr	r3, [r7, #4]
 8014de2:	683a      	ldr	r2, [r7, #0]
 8014de4:	32d4      	adds	r2, #212	; 0xd4
 8014de6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    }
    
    pdev->host.HC_Status[num] = HC_XFRC;     
 8014dea:	687a      	ldr	r2, [r7, #4]
 8014dec:	683b      	ldr	r3, [r7, #0]
 8014dee:	4413      	add	r3, r2
 8014df0:	f503 7363 	add.w	r3, r3, #908	; 0x38c
 8014df4:	2201      	movs	r2, #1
 8014df6:	701a      	strb	r2, [r3, #0]
    pdev->host.ErrCnt [num]= 0;
 8014df8:	687a      	ldr	r2, [r7, #4]
 8014dfa:	683b      	ldr	r3, [r7, #0]
 8014dfc:	33c4      	adds	r3, #196	; 0xc4
 8014dfe:	009b      	lsls	r3, r3, #2
 8014e00:	4413      	add	r3, r2
 8014e02:	2200      	movs	r2, #0
 8014e04:	605a      	str	r2, [r3, #4]
    CLEAR_HC_INT(hcreg , xfercompl);
 8014e06:	2300      	movs	r3, #0
 8014e08:	62fb      	str	r3, [r7, #44]	; 0x2c
 8014e0a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8014e0e:	f043 0301 	orr.w	r3, r3, #1
 8014e12:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 8014e16:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014e18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014e1a:	609a      	str	r2, [r3, #8]
    
    if ((hcchar.b.eptype == EP_TYPE_CTRL)||
 8014e1c:	f897 3062 	ldrb.w	r3, [r7, #98]	; 0x62
 8014e20:	f003 030c 	and.w	r3, r3, #12
 8014e24:	b2db      	uxtb	r3, r3
 8014e26:	2b00      	cmp	r3, #0
 8014e28:	d006      	beq.n	8014e38 <USB_OTG_USBH_handle_hc_n_In_ISR+0x2ba>
        (hcchar.b.eptype == EP_TYPE_BULK))
 8014e2a:	f897 3062 	ldrb.w	r3, [r7, #98]	; 0x62
 8014e2e:	f003 030c 	and.w	r3, r3, #12
 8014e32:	b2db      	uxtb	r3, r3
    if ((hcchar.b.eptype == EP_TYPE_CTRL)||
 8014e34:	2b08      	cmp	r3, #8
 8014e36:	d139      	bne.n	8014eac <USB_OTG_USBH_handle_hc_n_In_ISR+0x32e>
    {
      UNMASK_HOST_INT_CHH (num);
 8014e38:	687a      	ldr	r2, [r7, #4]
 8014e3a:	683b      	ldr	r3, [r7, #0]
 8014e3c:	3322      	adds	r3, #34	; 0x22
 8014e3e:	009b      	lsls	r3, r3, #2
 8014e40:	4413      	add	r3, r2
 8014e42:	689b      	ldr	r3, [r3, #8]
 8014e44:	68db      	ldr	r3, [r3, #12]
 8014e46:	62bb      	str	r3, [r7, #40]	; 0x28
 8014e48:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8014e4c:	f043 0302 	orr.w	r3, r3, #2
 8014e50:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 8014e54:	687a      	ldr	r2, [r7, #4]
 8014e56:	683b      	ldr	r3, [r7, #0]
 8014e58:	3322      	adds	r3, #34	; 0x22
 8014e5a:	009b      	lsls	r3, r3, #2
 8014e5c:	4413      	add	r3, r2
 8014e5e:	689b      	ldr	r3, [r3, #8]
 8014e60:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014e62:	60da      	str	r2, [r3, #12]
      USB_OTG_HC_Halt(pdev, num);
 8014e64:	683b      	ldr	r3, [r7, #0]
 8014e66:	b2db      	uxtb	r3, r3
 8014e68:	4619      	mov	r1, r3
 8014e6a:	6878      	ldr	r0, [r7, #4]
 8014e6c:	f7fe fef9 	bl	8013c62 <USB_OTG_HC_Halt>
      CLEAR_HC_INT(hcreg , nak); 
 8014e70:	2300      	movs	r3, #0
 8014e72:	627b      	str	r3, [r7, #36]	; 0x24
 8014e74:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8014e78:	f043 0310 	orr.w	r3, r3, #16
 8014e7c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 8014e80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014e82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014e84:	609a      	str	r2, [r3, #8]
      pdev->host.hc[num].toggle_in ^= 1;
 8014e86:	687a      	ldr	r2, [r7, #4]
 8014e88:	683b      	ldr	r3, [r7, #0]
 8014e8a:	331e      	adds	r3, #30
 8014e8c:	015b      	lsls	r3, r3, #5
 8014e8e:	4413      	add	r3, r2
 8014e90:	3304      	adds	r3, #4
 8014e92:	781b      	ldrb	r3, [r3, #0]
 8014e94:	f083 0301 	eor.w	r3, r3, #1
 8014e98:	b2d9      	uxtb	r1, r3
 8014e9a:	687a      	ldr	r2, [r7, #4]
 8014e9c:	683b      	ldr	r3, [r7, #0]
 8014e9e:	331e      	adds	r3, #30
 8014ea0:	015b      	lsls	r3, r3, #5
 8014ea2:	4413      	add	r3, r2
 8014ea4:	3304      	adds	r3, #4
 8014ea6:	460a      	mov	r2, r1
 8014ea8:	701a      	strb	r2, [r3, #0]
 8014eaa:	e13a      	b.n	8015122 <USB_OTG_USBH_handle_hc_n_In_ISR+0x5a4>
      
    }
    else if(hcchar.b.eptype == EP_TYPE_INTR)
 8014eac:	f897 3062 	ldrb.w	r3, [r7, #98]	; 0x62
 8014eb0:	f003 030c 	and.w	r3, r3, #12
 8014eb4:	b2db      	uxtb	r3, r3
 8014eb6:	2b0c      	cmp	r3, #12
 8014eb8:	f040 8133 	bne.w	8015122 <USB_OTG_USBH_handle_hc_n_In_ISR+0x5a4>
    {
      hcchar.b.oddfrm  = 1;
 8014ebc:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8014ec0:	f043 0320 	orr.w	r3, r3, #32
 8014ec4:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
      USB_OTG_WRITE_REG32(&pdev->regs.HC_REGS[num]->HCCHAR, hcchar.d32); 
 8014ec8:	687a      	ldr	r2, [r7, #4]
 8014eca:	683b      	ldr	r3, [r7, #0]
 8014ecc:	3322      	adds	r3, #34	; 0x22
 8014ece:	009b      	lsls	r3, r3, #2
 8014ed0:	4413      	add	r3, r2
 8014ed2:	689b      	ldr	r3, [r3, #8]
 8014ed4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8014ed6:	601a      	str	r2, [r3, #0]
      pdev->host.URB_State[num] = URB_DONE;  
 8014ed8:	687a      	ldr	r2, [r7, #4]
 8014eda:	683b      	ldr	r3, [r7, #0]
 8014edc:	4413      	add	r3, r2
 8014ede:	f203 339b 	addw	r3, r3, #923	; 0x39b
 8014ee2:	2201      	movs	r2, #1
 8014ee4:	701a      	strb	r2, [r3, #0]
 8014ee6:	e11c      	b.n	8015122 <USB_OTG_USBH_handle_hc_n_In_ISR+0x5a4>
    }
    
  }
  else if (hcint.b.chhltd)
 8014ee8:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 8014eec:	f003 0302 	and.w	r3, r3, #2
 8014ef0:	b2db      	uxtb	r3, r3
 8014ef2:	2b00      	cmp	r3, #0
 8014ef4:	d07b      	beq.n	8014fee <USB_OTG_USBH_handle_hc_n_In_ISR+0x470>
  {
    MASK_HOST_INT_CHH (num);
 8014ef6:	687a      	ldr	r2, [r7, #4]
 8014ef8:	683b      	ldr	r3, [r7, #0]
 8014efa:	3322      	adds	r3, #34	; 0x22
 8014efc:	009b      	lsls	r3, r3, #2
 8014efe:	4413      	add	r3, r2
 8014f00:	689b      	ldr	r3, [r3, #8]
 8014f02:	68db      	ldr	r3, [r3, #12]
 8014f04:	623b      	str	r3, [r7, #32]
 8014f06:	f897 3020 	ldrb.w	r3, [r7, #32]
 8014f0a:	f36f 0341 	bfc	r3, #1, #1
 8014f0e:	f887 3020 	strb.w	r3, [r7, #32]
 8014f12:	687a      	ldr	r2, [r7, #4]
 8014f14:	683b      	ldr	r3, [r7, #0]
 8014f16:	3322      	adds	r3, #34	; 0x22
 8014f18:	009b      	lsls	r3, r3, #2
 8014f1a:	4413      	add	r3, r2
 8014f1c:	689b      	ldr	r3, [r3, #8]
 8014f1e:	6a3a      	ldr	r2, [r7, #32]
 8014f20:	60da      	str	r2, [r3, #12]
    
    if(pdev->host.HC_Status[num] == HC_XFRC)
 8014f22:	687a      	ldr	r2, [r7, #4]
 8014f24:	683b      	ldr	r3, [r7, #0]
 8014f26:	4413      	add	r3, r2
 8014f28:	f503 7363 	add.w	r3, r3, #908	; 0x38c
 8014f2c:	781b      	ldrb	r3, [r3, #0]
 8014f2e:	b2db      	uxtb	r3, r3
 8014f30:	2b01      	cmp	r3, #1
 8014f32:	d107      	bne.n	8014f44 <USB_OTG_USBH_handle_hc_n_In_ISR+0x3c6>
    {
      pdev->host.URB_State[num] = URB_DONE;      
 8014f34:	687a      	ldr	r2, [r7, #4]
 8014f36:	683b      	ldr	r3, [r7, #0]
 8014f38:	4413      	add	r3, r2
 8014f3a:	f203 339b 	addw	r3, r3, #923	; 0x39b
 8014f3e:	2201      	movs	r2, #1
 8014f40:	701a      	strb	r2, [r3, #0]
 8014f42:	e04a      	b.n	8014fda <USB_OTG_USBH_handle_hc_n_In_ISR+0x45c>
    }
    
    else if (pdev->host.HC_Status[num] == HC_STALL) 
 8014f44:	687a      	ldr	r2, [r7, #4]
 8014f46:	683b      	ldr	r3, [r7, #0]
 8014f48:	4413      	add	r3, r2
 8014f4a:	f503 7363 	add.w	r3, r3, #908	; 0x38c
 8014f4e:	781b      	ldrb	r3, [r3, #0]
 8014f50:	b2db      	uxtb	r3, r3
 8014f52:	2b05      	cmp	r3, #5
 8014f54:	d107      	bne.n	8014f66 <USB_OTG_USBH_handle_hc_n_In_ISR+0x3e8>
    {
      pdev->host.URB_State[num] = URB_STALL;
 8014f56:	687a      	ldr	r2, [r7, #4]
 8014f58:	683b      	ldr	r3, [r7, #0]
 8014f5a:	4413      	add	r3, r2
 8014f5c:	f203 339b 	addw	r3, r3, #923	; 0x39b
 8014f60:	2204      	movs	r2, #4
 8014f62:	701a      	strb	r2, [r3, #0]
 8014f64:	e039      	b.n	8014fda <USB_OTG_USBH_handle_hc_n_In_ISR+0x45c>
    }   
    
    else if((pdev->host.HC_Status[num] == HC_XACTERR) ||
 8014f66:	687a      	ldr	r2, [r7, #4]
 8014f68:	683b      	ldr	r3, [r7, #0]
 8014f6a:	4413      	add	r3, r2
 8014f6c:	f503 7363 	add.w	r3, r3, #908	; 0x38c
 8014f70:	781b      	ldrb	r3, [r3, #0]
 8014f72:	b2db      	uxtb	r3, r3
 8014f74:	2b06      	cmp	r3, #6
 8014f76:	d008      	beq.n	8014f8a <USB_OTG_USBH_handle_hc_n_In_ISR+0x40c>
            (pdev->host.HC_Status[num] == HC_DATATGLERR))
 8014f78:	687a      	ldr	r2, [r7, #4]
 8014f7a:	683b      	ldr	r3, [r7, #0]
 8014f7c:	4413      	add	r3, r2
 8014f7e:	f503 7363 	add.w	r3, r3, #908	; 0x38c
 8014f82:	781b      	ldrb	r3, [r3, #0]
 8014f84:	b2db      	uxtb	r3, r3
    else if((pdev->host.HC_Status[num] == HC_XACTERR) ||
 8014f86:	2b08      	cmp	r3, #8
 8014f88:	d10e      	bne.n	8014fa8 <USB_OTG_USBH_handle_hc_n_In_ISR+0x42a>
    {
      pdev->host.ErrCnt[num] = 0;
 8014f8a:	687a      	ldr	r2, [r7, #4]
 8014f8c:	683b      	ldr	r3, [r7, #0]
 8014f8e:	33c4      	adds	r3, #196	; 0xc4
 8014f90:	009b      	lsls	r3, r3, #2
 8014f92:	4413      	add	r3, r2
 8014f94:	2200      	movs	r2, #0
 8014f96:	605a      	str	r2, [r3, #4]
      pdev->host.URB_State[num] = URB_ERROR;  
 8014f98:	687a      	ldr	r2, [r7, #4]
 8014f9a:	683b      	ldr	r3, [r7, #0]
 8014f9c:	4413      	add	r3, r2
 8014f9e:	f203 339b 	addw	r3, r3, #923	; 0x39b
 8014fa2:	2203      	movs	r2, #3
 8014fa4:	701a      	strb	r2, [r3, #0]
 8014fa6:	e018      	b.n	8014fda <USB_OTG_USBH_handle_hc_n_In_ISR+0x45c>
      
    }
    else if(hcchar.b.eptype == EP_TYPE_INTR)
 8014fa8:	f897 3062 	ldrb.w	r3, [r7, #98]	; 0x62
 8014fac:	f003 030c 	and.w	r3, r3, #12
 8014fb0:	b2db      	uxtb	r3, r3
 8014fb2:	2b0c      	cmp	r3, #12
 8014fb4:	d111      	bne.n	8014fda <USB_OTG_USBH_handle_hc_n_In_ISR+0x45c>
    {
      pdev->host.hc[num].toggle_in ^= 1;
 8014fb6:	687a      	ldr	r2, [r7, #4]
 8014fb8:	683b      	ldr	r3, [r7, #0]
 8014fba:	331e      	adds	r3, #30
 8014fbc:	015b      	lsls	r3, r3, #5
 8014fbe:	4413      	add	r3, r2
 8014fc0:	3304      	adds	r3, #4
 8014fc2:	781b      	ldrb	r3, [r3, #0]
 8014fc4:	f083 0301 	eor.w	r3, r3, #1
 8014fc8:	b2d9      	uxtb	r1, r3
 8014fca:	687a      	ldr	r2, [r7, #4]
 8014fcc:	683b      	ldr	r3, [r7, #0]
 8014fce:	331e      	adds	r3, #30
 8014fd0:	015b      	lsls	r3, r3, #5
 8014fd2:	4413      	add	r3, r2
 8014fd4:	3304      	adds	r3, #4
 8014fd6:	460a      	mov	r2, r1
 8014fd8:	701a      	strb	r2, [r3, #0]
    }
    
    CLEAR_HC_INT(hcreg , chhltd);    
 8014fda:	2300      	movs	r3, #0
 8014fdc:	61fb      	str	r3, [r7, #28]
 8014fde:	7f3b      	ldrb	r3, [r7, #28]
 8014fe0:	f043 0302 	orr.w	r3, r3, #2
 8014fe4:	773b      	strb	r3, [r7, #28]
 8014fe6:	69fa      	ldr	r2, [r7, #28]
 8014fe8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014fea:	609a      	str	r2, [r3, #8]
 8014fec:	e099      	b.n	8015122 <USB_OTG_USBH_handle_hc_n_In_ISR+0x5a4>
    
  }    
  else if (hcint.b.xacterr)
 8014fee:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 8014ff2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8014ff6:	b2db      	uxtb	r3, r3
 8014ff8:	2b00      	cmp	r3, #0
 8014ffa:	d037      	beq.n	801506c <USB_OTG_USBH_handle_hc_n_In_ISR+0x4ee>
  {
    UNMASK_HOST_INT_CHH (num);
 8014ffc:	687a      	ldr	r2, [r7, #4]
 8014ffe:	683b      	ldr	r3, [r7, #0]
 8015000:	3322      	adds	r3, #34	; 0x22
 8015002:	009b      	lsls	r3, r3, #2
 8015004:	4413      	add	r3, r2
 8015006:	689b      	ldr	r3, [r3, #8]
 8015008:	68db      	ldr	r3, [r3, #12]
 801500a:	61bb      	str	r3, [r7, #24]
 801500c:	7e3b      	ldrb	r3, [r7, #24]
 801500e:	f043 0302 	orr.w	r3, r3, #2
 8015012:	763b      	strb	r3, [r7, #24]
 8015014:	687a      	ldr	r2, [r7, #4]
 8015016:	683b      	ldr	r3, [r7, #0]
 8015018:	3322      	adds	r3, #34	; 0x22
 801501a:	009b      	lsls	r3, r3, #2
 801501c:	4413      	add	r3, r2
 801501e:	689b      	ldr	r3, [r3, #8]
 8015020:	69ba      	ldr	r2, [r7, #24]
 8015022:	60da      	str	r2, [r3, #12]
    pdev->host.ErrCnt[num] ++;
 8015024:	687a      	ldr	r2, [r7, #4]
 8015026:	683b      	ldr	r3, [r7, #0]
 8015028:	33c4      	adds	r3, #196	; 0xc4
 801502a:	009b      	lsls	r3, r3, #2
 801502c:	4413      	add	r3, r2
 801502e:	685b      	ldr	r3, [r3, #4]
 8015030:	1c5a      	adds	r2, r3, #1
 8015032:	6879      	ldr	r1, [r7, #4]
 8015034:	683b      	ldr	r3, [r7, #0]
 8015036:	33c4      	adds	r3, #196	; 0xc4
 8015038:	009b      	lsls	r3, r3, #2
 801503a:	440b      	add	r3, r1
 801503c:	605a      	str	r2, [r3, #4]
    pdev->host.HC_Status[num] = HC_XACTERR;
 801503e:	687a      	ldr	r2, [r7, #4]
 8015040:	683b      	ldr	r3, [r7, #0]
 8015042:	4413      	add	r3, r2
 8015044:	f503 7363 	add.w	r3, r3, #908	; 0x38c
 8015048:	2206      	movs	r2, #6
 801504a:	701a      	strb	r2, [r3, #0]
    USB_OTG_HC_Halt(pdev, num);
 801504c:	683b      	ldr	r3, [r7, #0]
 801504e:	b2db      	uxtb	r3, r3
 8015050:	4619      	mov	r1, r3
 8015052:	6878      	ldr	r0, [r7, #4]
 8015054:	f7fe fe05 	bl	8013c62 <USB_OTG_HC_Halt>
    CLEAR_HC_INT(hcreg , xacterr);    
 8015058:	2300      	movs	r3, #0
 801505a:	617b      	str	r3, [r7, #20]
 801505c:	7d3b      	ldrb	r3, [r7, #20]
 801505e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015062:	753b      	strb	r3, [r7, #20]
 8015064:	697a      	ldr	r2, [r7, #20]
 8015066:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8015068:	609a      	str	r2, [r3, #8]
 801506a:	e05a      	b.n	8015122 <USB_OTG_USBH_handle_hc_n_In_ISR+0x5a4>
    
  }
  else if (hcint.b.nak)  
 801506c:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 8015070:	f003 0310 	and.w	r3, r3, #16
 8015074:	b2db      	uxtb	r3, r3
 8015076:	2b00      	cmp	r3, #0
 8015078:	d053      	beq.n	8015122 <USB_OTG_USBH_handle_hc_n_In_ISR+0x5a4>
  {  
    if(hcchar.b.eptype == EP_TYPE_INTR)
 801507a:	f897 3062 	ldrb.w	r3, [r7, #98]	; 0x62
 801507e:	f003 030c 	and.w	r3, r3, #12
 8015082:	b2db      	uxtb	r3, r3
 8015084:	2b0c      	cmp	r3, #12
 8015086:	d11a      	bne.n	80150be <USB_OTG_USBH_handle_hc_n_In_ISR+0x540>
    {
      UNMASK_HOST_INT_CHH (num);
 8015088:	687a      	ldr	r2, [r7, #4]
 801508a:	683b      	ldr	r3, [r7, #0]
 801508c:	3322      	adds	r3, #34	; 0x22
 801508e:	009b      	lsls	r3, r3, #2
 8015090:	4413      	add	r3, r2
 8015092:	689b      	ldr	r3, [r3, #8]
 8015094:	68db      	ldr	r3, [r3, #12]
 8015096:	613b      	str	r3, [r7, #16]
 8015098:	7c3b      	ldrb	r3, [r7, #16]
 801509a:	f043 0302 	orr.w	r3, r3, #2
 801509e:	743b      	strb	r3, [r7, #16]
 80150a0:	687a      	ldr	r2, [r7, #4]
 80150a2:	683b      	ldr	r3, [r7, #0]
 80150a4:	3322      	adds	r3, #34	; 0x22
 80150a6:	009b      	lsls	r3, r3, #2
 80150a8:	4413      	add	r3, r2
 80150aa:	689b      	ldr	r3, [r3, #8]
 80150ac:	693a      	ldr	r2, [r7, #16]
 80150ae:	60da      	str	r2, [r3, #12]
      USB_OTG_HC_Halt(pdev, num);
 80150b0:	683b      	ldr	r3, [r7, #0]
 80150b2:	b2db      	uxtb	r3, r3
 80150b4:	4619      	mov	r1, r3
 80150b6:	6878      	ldr	r0, [r7, #4]
 80150b8:	f7fe fdd3 	bl	8013c62 <USB_OTG_HC_Halt>
 80150bc:	e021      	b.n	8015102 <USB_OTG_USBH_handle_hc_n_In_ISR+0x584>
    }
    else if  ((hcchar.b.eptype == EP_TYPE_CTRL)||
 80150be:	f897 3062 	ldrb.w	r3, [r7, #98]	; 0x62
 80150c2:	f003 030c 	and.w	r3, r3, #12
 80150c6:	b2db      	uxtb	r3, r3
 80150c8:	2b00      	cmp	r3, #0
 80150ca:	d006      	beq.n	80150da <USB_OTG_USBH_handle_hc_n_In_ISR+0x55c>
              (hcchar.b.eptype == EP_TYPE_BULK))
 80150cc:	f897 3062 	ldrb.w	r3, [r7, #98]	; 0x62
 80150d0:	f003 030c 	and.w	r3, r3, #12
 80150d4:	b2db      	uxtb	r3, r3
    else if  ((hcchar.b.eptype == EP_TYPE_CTRL)||
 80150d6:	2b08      	cmp	r3, #8
 80150d8:	d113      	bne.n	8015102 <USB_OTG_USBH_handle_hc_n_In_ISR+0x584>
    {
      /* re-activate the channel  */
      hcchar.b.chen = 1;
 80150da:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 80150de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80150e2:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
      hcchar.b.chdis = 0;
 80150e6:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 80150ea:	f36f 1386 	bfc	r3, #6, #1
 80150ee:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
      USB_OTG_WRITE_REG32(&pdev->regs.HC_REGS[num]->HCCHAR, hcchar.d32); 
 80150f2:	687a      	ldr	r2, [r7, #4]
 80150f4:	683b      	ldr	r3, [r7, #0]
 80150f6:	3322      	adds	r3, #34	; 0x22
 80150f8:	009b      	lsls	r3, r3, #2
 80150fa:	4413      	add	r3, r2
 80150fc:	689b      	ldr	r3, [r3, #8]
 80150fe:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8015100:	601a      	str	r2, [r3, #0]
    }
    pdev->host.HC_Status[num] = HC_NAK;
 8015102:	687a      	ldr	r2, [r7, #4]
 8015104:	683b      	ldr	r3, [r7, #0]
 8015106:	4413      	add	r3, r2
 8015108:	f503 7363 	add.w	r3, r3, #908	; 0x38c
 801510c:	2203      	movs	r2, #3
 801510e:	701a      	strb	r2, [r3, #0]
    CLEAR_HC_INT(hcreg , nak);   
 8015110:	2300      	movs	r3, #0
 8015112:	60fb      	str	r3, [r7, #12]
 8015114:	7b3b      	ldrb	r3, [r7, #12]
 8015116:	f043 0310 	orr.w	r3, r3, #16
 801511a:	733b      	strb	r3, [r7, #12]
 801511c:	68fa      	ldr	r2, [r7, #12]
 801511e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8015120:	609a      	str	r2, [r3, #8]
  }
  
  
  return 1;
 8015122:	2301      	movs	r3, #1
  
}
 8015124:	4618      	mov	r0, r3
 8015126:	3770      	adds	r7, #112	; 0x70
 8015128:	46bd      	mov	sp, r7
 801512a:	bd80      	pop	{r7, pc}

0801512c <USB_OTG_USBH_handle_rx_qlvl_ISR>:
*/
#if defined ( __ICCARM__ ) /*!< IAR Compiler */
#pragma optimize = none
#endif /* __CC_ARM */
static uint32_t USB_OTG_USBH_handle_rx_qlvl_ISR (USB_OTG_CORE_HANDLE *pdev)
{
 801512c:	b580      	push	{r7, lr}
 801512e:	b088      	sub	sp, #32
 8015130:	af00      	add	r7, sp, #0
 8015132:	6078      	str	r0, [r7, #4]
  USB_OTG_GRXFSTS_TypeDef       grxsts;
  USB_OTG_GINTMSK_TypeDef       intmsk;
  USB_OTG_HCTSIZn_TypeDef       hctsiz; 
  USB_OTG_HCCHAR_TypeDef        hcchar;
  __IO uint8_t                  channelnum =0;  
 8015134:	2300      	movs	r3, #0
 8015136:	72fb      	strb	r3, [r7, #11]
  uint32_t                      count;    
  
  /* Disable the Rx Status Queue Level interrupt */
  intmsk.d32 = 0;
 8015138:	2300      	movs	r3, #0
 801513a:	617b      	str	r3, [r7, #20]
  intmsk.b.rxstsqlvl = 1;
 801513c:	7d3b      	ldrb	r3, [r7, #20]
 801513e:	f043 0310 	orr.w	r3, r3, #16
 8015142:	753b      	strb	r3, [r7, #20]
  USB_OTG_MODIFY_REG32( &pdev->regs.GREGS->GINTMSK, intmsk.d32, 0);
 8015144:	687b      	ldr	r3, [r7, #4]
 8015146:	68db      	ldr	r3, [r3, #12]
 8015148:	6999      	ldr	r1, [r3, #24]
 801514a:	697b      	ldr	r3, [r7, #20]
 801514c:	43da      	mvns	r2, r3
 801514e:	687b      	ldr	r3, [r7, #4]
 8015150:	68db      	ldr	r3, [r3, #12]
 8015152:	400a      	ands	r2, r1
 8015154:	619a      	str	r2, [r3, #24]
  
  grxsts.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GRXSTSP);
 8015156:	687b      	ldr	r3, [r7, #4]
 8015158:	68db      	ldr	r3, [r3, #12]
 801515a:	6a1b      	ldr	r3, [r3, #32]
 801515c:	61bb      	str	r3, [r7, #24]
  channelnum = grxsts.b.chnum;  
 801515e:	7e3b      	ldrb	r3, [r7, #24]
 8015160:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8015164:	b2db      	uxtb	r3, r3
 8015166:	72fb      	strb	r3, [r7, #11]
  hcchar.d32 = USB_OTG_READ_REG32(&pdev->regs.HC_REGS[channelnum]->HCCHAR);
 8015168:	7afb      	ldrb	r3, [r7, #11]
 801516a:	b2db      	uxtb	r3, r3
 801516c:	687a      	ldr	r2, [r7, #4]
 801516e:	3322      	adds	r3, #34	; 0x22
 8015170:	009b      	lsls	r3, r3, #2
 8015172:	4413      	add	r3, r2
 8015174:	689b      	ldr	r3, [r3, #8]
 8015176:	681b      	ldr	r3, [r3, #0]
 8015178:	60fb      	str	r3, [r7, #12]
  
  switch (grxsts.b.pktsts)
 801517a:	7ebb      	ldrb	r3, [r7, #26]
 801517c:	f3c3 0343 	ubfx	r3, r3, #1, #4
 8015180:	b2db      	uxtb	r3, r3
 8015182:	2b02      	cmp	r3, #2
 8015184:	d000      	beq.n	8015188 <USB_OTG_USBH_handle_rx_qlvl_ISR+0x5c>
  case GRXSTS_PKTSTS_IN_XFER_COMP:
    
  case GRXSTS_PKTSTS_DATA_TOGGLE_ERR:
  case GRXSTS_PKTSTS_CH_HALTED:
  default:
    break;
 8015186:	e08f      	b.n	80152a8 <USB_OTG_USBH_handle_rx_qlvl_ISR+0x17c>
    if ((grxsts.b.bcnt > 0) && (pdev->host.hc[channelnum].xfer_buff != (void  *)0))
 8015188:	8b3a      	ldrh	r2, [r7, #24]
 801518a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 801518e:	4013      	ands	r3, r2
 8015190:	b29b      	uxth	r3, r3
 8015192:	2b00      	cmp	r3, #0
 8015194:	f000 8087 	beq.w	80152a6 <USB_OTG_USBH_handle_rx_qlvl_ISR+0x17a>
 8015198:	7afb      	ldrb	r3, [r7, #11]
 801519a:	b2db      	uxtb	r3, r3
 801519c:	687a      	ldr	r2, [r7, #4]
 801519e:	3315      	adds	r3, #21
 80151a0:	015b      	lsls	r3, r3, #5
 80151a2:	4413      	add	r3, r2
 80151a4:	f503 738c 	add.w	r3, r3, #280	; 0x118
 80151a8:	681b      	ldr	r3, [r3, #0]
 80151aa:	2b00      	cmp	r3, #0
 80151ac:	d07b      	beq.n	80152a6 <USB_OTG_USBH_handle_rx_qlvl_ISR+0x17a>
      USB_OTG_ReadPacket(pdev, pdev->host.hc[channelnum].xfer_buff, grxsts.b.bcnt);
 80151ae:	7afb      	ldrb	r3, [r7, #11]
 80151b0:	b2db      	uxtb	r3, r3
 80151b2:	687a      	ldr	r2, [r7, #4]
 80151b4:	3315      	adds	r3, #21
 80151b6:	015b      	lsls	r3, r3, #5
 80151b8:	4413      	add	r3, r2
 80151ba:	f503 738c 	add.w	r3, r3, #280	; 0x118
 80151be:	6819      	ldr	r1, [r3, #0]
 80151c0:	8b3b      	ldrh	r3, [r7, #24]
 80151c2:	f3c3 130a 	ubfx	r3, r3, #4, #11
 80151c6:	b29b      	uxth	r3, r3
 80151c8:	461a      	mov	r2, r3
 80151ca:	6878      	ldr	r0, [r7, #4]
 80151cc:	f7fd fe6b 	bl	8012ea6 <USB_OTG_ReadPacket>
      pdev->host.hc[grxsts.b.chnum].xfer_buff += grxsts.b.bcnt;           
 80151d0:	7e3b      	ldrb	r3, [r7, #24]
 80151d2:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80151d6:	b2db      	uxtb	r3, r3
 80151d8:	687a      	ldr	r2, [r7, #4]
 80151da:	3315      	adds	r3, #21
 80151dc:	015b      	lsls	r3, r3, #5
 80151de:	4413      	add	r3, r2
 80151e0:	f503 738c 	add.w	r3, r3, #280	; 0x118
 80151e4:	681b      	ldr	r3, [r3, #0]
 80151e6:	8b3a      	ldrh	r2, [r7, #24]
 80151e8:	f3c2 120a 	ubfx	r2, r2, #4, #11
 80151ec:	b292      	uxth	r2, r2
 80151ee:	4611      	mov	r1, r2
 80151f0:	7e3a      	ldrb	r2, [r7, #24]
 80151f2:	f3c2 0203 	ubfx	r2, r2, #0, #4
 80151f6:	b2d2      	uxtb	r2, r2
 80151f8:	4610      	mov	r0, r2
 80151fa:	185a      	adds	r2, r3, r1
 80151fc:	6879      	ldr	r1, [r7, #4]
 80151fe:	f100 0315 	add.w	r3, r0, #21
 8015202:	015b      	lsls	r3, r3, #5
 8015204:	440b      	add	r3, r1
 8015206:	f503 738c 	add.w	r3, r3, #280	; 0x118
 801520a:	601a      	str	r2, [r3, #0]
      pdev->host.hc[grxsts.b.chnum].xfer_count  += grxsts.b.bcnt;
 801520c:	7e3b      	ldrb	r3, [r7, #24]
 801520e:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8015212:	b2db      	uxtb	r3, r3
 8015214:	687a      	ldr	r2, [r7, #4]
 8015216:	015b      	lsls	r3, r3, #5
 8015218:	4413      	add	r3, r2
 801521a:	f503 7370 	add.w	r3, r3, #960	; 0x3c0
 801521e:	681b      	ldr	r3, [r3, #0]
 8015220:	8b3a      	ldrh	r2, [r7, #24]
 8015222:	f3c2 120a 	ubfx	r2, r2, #4, #11
 8015226:	b292      	uxth	r2, r2
 8015228:	4611      	mov	r1, r2
 801522a:	7e3a      	ldrb	r2, [r7, #24]
 801522c:	f3c2 0203 	ubfx	r2, r2, #0, #4
 8015230:	b2d2      	uxtb	r2, r2
 8015232:	4610      	mov	r0, r2
 8015234:	185a      	adds	r2, r3, r1
 8015236:	6879      	ldr	r1, [r7, #4]
 8015238:	0143      	lsls	r3, r0, #5
 801523a:	440b      	add	r3, r1
 801523c:	f503 7370 	add.w	r3, r3, #960	; 0x3c0
 8015240:	601a      	str	r2, [r3, #0]
      count = pdev->host.hc[channelnum].xfer_count;
 8015242:	7afb      	ldrb	r3, [r7, #11]
 8015244:	b2db      	uxtb	r3, r3
 8015246:	687a      	ldr	r2, [r7, #4]
 8015248:	015b      	lsls	r3, r3, #5
 801524a:	4413      	add	r3, r2
 801524c:	f503 7370 	add.w	r3, r3, #960	; 0x3c0
 8015250:	681b      	ldr	r3, [r3, #0]
 8015252:	61fb      	str	r3, [r7, #28]
      pdev->host.XferCnt[channelnum]  = count;
 8015254:	7afb      	ldrb	r3, [r7, #11]
 8015256:	b2db      	uxtb	r3, r3
 8015258:	461a      	mov	r2, r3
 801525a:	687b      	ldr	r3, [r7, #4]
 801525c:	32d4      	adds	r2, #212	; 0xd4
 801525e:	69f9      	ldr	r1, [r7, #28]
 8015260:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      hctsiz.d32 = USB_OTG_READ_REG32(&pdev->regs.HC_REGS[channelnum]->HCTSIZ);
 8015264:	7afb      	ldrb	r3, [r7, #11]
 8015266:	b2db      	uxtb	r3, r3
 8015268:	687a      	ldr	r2, [r7, #4]
 801526a:	3322      	adds	r3, #34	; 0x22
 801526c:	009b      	lsls	r3, r3, #2
 801526e:	4413      	add	r3, r2
 8015270:	689b      	ldr	r3, [r3, #8]
 8015272:	691b      	ldr	r3, [r3, #16]
 8015274:	613b      	str	r3, [r7, #16]
      if(hctsiz.b.pktcnt > 0)
 8015276:	8a7a      	ldrh	r2, [r7, #18]
 8015278:	f641 73f8 	movw	r3, #8184	; 0x1ff8
 801527c:	4013      	ands	r3, r2
 801527e:	b29b      	uxth	r3, r3
 8015280:	2b00      	cmp	r3, #0
 8015282:	d010      	beq.n	80152a6 <USB_OTG_USBH_handle_rx_qlvl_ISR+0x17a>
        hcchar.b.chen = 1;
 8015284:	7bfb      	ldrb	r3, [r7, #15]
 8015286:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801528a:	73fb      	strb	r3, [r7, #15]
        hcchar.b.chdis = 0;
 801528c:	7bfb      	ldrb	r3, [r7, #15]
 801528e:	f36f 1386 	bfc	r3, #6, #1
 8015292:	73fb      	strb	r3, [r7, #15]
        USB_OTG_WRITE_REG32(&pdev->regs.HC_REGS[channelnum]->HCCHAR, hcchar.d32);
 8015294:	7afb      	ldrb	r3, [r7, #11]
 8015296:	b2db      	uxtb	r3, r3
 8015298:	687a      	ldr	r2, [r7, #4]
 801529a:	3322      	adds	r3, #34	; 0x22
 801529c:	009b      	lsls	r3, r3, #2
 801529e:	4413      	add	r3, r2
 80152a0:	689b      	ldr	r3, [r3, #8]
 80152a2:	68fa      	ldr	r2, [r7, #12]
 80152a4:	601a      	str	r2, [r3, #0]
    break;
 80152a6:	bf00      	nop
  }
  
  /* Enable the Rx Status Queue Level interrupt */
  intmsk.b.rxstsqlvl = 1;
 80152a8:	7d3b      	ldrb	r3, [r7, #20]
 80152aa:	f043 0310 	orr.w	r3, r3, #16
 80152ae:	753b      	strb	r3, [r7, #20]
  USB_OTG_MODIFY_REG32(&pdev->regs.GREGS->GINTMSK, 0, intmsk.d32);
 80152b0:	687b      	ldr	r3, [r7, #4]
 80152b2:	68db      	ldr	r3, [r3, #12]
 80152b4:	6999      	ldr	r1, [r3, #24]
 80152b6:	697a      	ldr	r2, [r7, #20]
 80152b8:	687b      	ldr	r3, [r7, #4]
 80152ba:	68db      	ldr	r3, [r3, #12]
 80152bc:	430a      	orrs	r2, r1
 80152be:	619a      	str	r2, [r3, #24]
  return 1;
 80152c0:	2301      	movs	r3, #1
}
 80152c2:	4618      	mov	r0, r3
 80152c4:	3720      	adds	r7, #32
 80152c6:	46bd      	mov	sp, r7
 80152c8:	bd80      	pop	{r7, pc}

080152ca <USB_OTG_USBH_handle_IncompletePeriodicXfer_ISR>:
*/
#if defined ( __ICCARM__ ) /*!< IAR Compiler */
#pragma optimize = none
#endif /* __CC_ARM */
static uint32_t USB_OTG_USBH_handle_IncompletePeriodicXfer_ISR (USB_OTG_CORE_HANDLE *pdev)
{
 80152ca:	b480      	push	{r7}
 80152cc:	b085      	sub	sp, #20
 80152ce:	af00      	add	r7, sp, #0
 80152d0:	6078      	str	r0, [r7, #4]
  USB_OTG_HCCHAR_TypeDef        hcchar; 
  
  
  
  
  hcchar.d32 = USB_OTG_READ_REG32(&pdev->regs.HC_REGS[0]->HCCHAR);
 80152d2:	687b      	ldr	r3, [r7, #4]
 80152d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80152d8:	681b      	ldr	r3, [r3, #0]
 80152da:	60bb      	str	r3, [r7, #8]
  hcchar.b.chen = 1;
 80152dc:	7afb      	ldrb	r3, [r7, #11]
 80152de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80152e2:	72fb      	strb	r3, [r7, #11]
  hcchar.b.chdis = 1;
 80152e4:	7afb      	ldrb	r3, [r7, #11]
 80152e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80152ea:	72fb      	strb	r3, [r7, #11]
  USB_OTG_WRITE_REG32(&pdev->regs.HC_REGS[0]->HCCHAR, hcchar.d32);  
 80152ec:	687b      	ldr	r3, [r7, #4]
 80152ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80152f2:	68ba      	ldr	r2, [r7, #8]
 80152f4:	601a      	str	r2, [r3, #0]
  
  gintsts.d32 = 0;
 80152f6:	2300      	movs	r3, #0
 80152f8:	60fb      	str	r3, [r7, #12]
  /* Clear interrupt */
  gintsts.b.incomplisoout = 1;
 80152fa:	7bbb      	ldrb	r3, [r7, #14]
 80152fc:	f043 0320 	orr.w	r3, r3, #32
 8015300:	73bb      	strb	r3, [r7, #14]
  USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GINTSTS, gintsts.d32);
 8015302:	687b      	ldr	r3, [r7, #4]
 8015304:	68db      	ldr	r3, [r3, #12]
 8015306:	68fa      	ldr	r2, [r7, #12]
 8015308:	615a      	str	r2, [r3, #20]
  
  return 1;
 801530a:	2301      	movs	r3, #1
}
 801530c:	4618      	mov	r0, r3
 801530e:	3714      	adds	r7, #20
 8015310:	46bd      	mov	sp, r7
 8015312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015316:	4770      	bx	lr

08015318 <USBH_Connected>:
  *         USB Connect callback function from the Interrupt. 
  * @param  selected device
  * @retval Status
*/
uint8_t USBH_Connected (USB_OTG_CORE_HANDLE *pdev)
{
 8015318:	b480      	push	{r7}
 801531a:	b083      	sub	sp, #12
 801531c:	af00      	add	r7, sp, #0
 801531e:	6078      	str	r0, [r7, #4]
  pdev->host.ConnSts = 1;
 8015320:	687b      	ldr	r3, [r7, #4]
 8015322:	2201      	movs	r2, #1
 8015324:	f8c3 2310 	str.w	r2, [r3, #784]	; 0x310
  return 0;
 8015328:	2300      	movs	r3, #0
}
 801532a:	4618      	mov	r0, r3
 801532c:	370c      	adds	r7, #12
 801532e:	46bd      	mov	sp, r7
 8015330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015334:	4770      	bx	lr

08015336 <USBH_Disconnected>:
* @param  selected device
* @retval Status
*/

uint8_t USBH_Disconnected (USB_OTG_CORE_HANDLE *pdev)
{
 8015336:	b480      	push	{r7}
 8015338:	b083      	sub	sp, #12
 801533a:	af00      	add	r7, sp, #0
 801533c:	6078      	str	r0, [r7, #4]
  pdev->host.ConnSts = 0;
 801533e:	687b      	ldr	r3, [r7, #4]
 8015340:	2200      	movs	r2, #0
 8015342:	f8c3 2310 	str.w	r2, [r3, #784]	; 0x310
  return 0;  
 8015346:	2300      	movs	r3, #0
}
 8015348:	4618      	mov	r0, r3
 801534a:	370c      	adds	r7, #12
 801534c:	46bd      	mov	sp, r7
 801534e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015352:	4770      	bx	lr

08015354 <USBH_SOF>:
  * @param  selected device
  * @retval Status
  */

uint8_t USBH_SOF (USB_OTG_CORE_HANDLE *pdev)
{
 8015354:	b480      	push	{r7}
 8015356:	b083      	sub	sp, #12
 8015358:	af00      	add	r7, sp, #0
 801535a:	6078      	str	r0, [r7, #4]
  /* This callback could be used to implement a scheduler process */
  return 0;  
 801535c:	2300      	movs	r3, #0
}
 801535e:	4618      	mov	r0, r3
 8015360:	370c      	adds	r7, #12
 8015362:	46bd      	mov	sp, r7
 8015364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015368:	4770      	bx	lr

0801536a <USBH_Init>:
void USBH_Init(USB_OTG_CORE_HANDLE *pdev,
               USB_OTG_CORE_ID_TypeDef coreID,
               USBH_HOST *phost,               
               USBH_Class_cb_TypeDef *class_cb, 
               USBH_Usr_cb_TypeDef *usr_cb)
{
 801536a:	b580      	push	{r7, lr}
 801536c:	b084      	sub	sp, #16
 801536e:	af00      	add	r7, sp, #0
 8015370:	60f8      	str	r0, [r7, #12]
 8015372:	607a      	str	r2, [r7, #4]
 8015374:	603b      	str	r3, [r7, #0]
 8015376:	460b      	mov	r3, r1
 8015378:	72fb      	strb	r3, [r7, #11]
     
  /* Hardware Init */
  USB_OTG_BSP_Init(pdev);  
 801537a:	68f8      	ldr	r0, [r7, #12]
 801537c:	f7fd fc14 	bl	8012ba8 <USB_OTG_BSP_Init>
  
  /* configure GPIO pin used for switching VBUS power */
  USB_OTG_BSP_ConfigVBUS(0);  
 8015380:	2000      	movs	r0, #0
 8015382:	f7fd fc87 	bl	8012c94 <USB_OTG_BSP_ConfigVBUS>
  
  
  /* Host de-initializations */
  USBH_DeInit(pdev, phost);
 8015386:	6879      	ldr	r1, [r7, #4]
 8015388:	68f8      	ldr	r0, [r7, #12]
 801538a:	f000 f818 	bl	80153be <USBH_DeInit>
  
  /*Register class and user callbacks */
  phost->class_cb = class_cb;
 801538e:	687b      	ldr	r3, [r7, #4]
 8015390:	683a      	ldr	r2, [r7, #0]
 8015392:	67da      	str	r2, [r3, #124]	; 0x7c
  phost->usr_cb = usr_cb;  
 8015394:	687b      	ldr	r3, [r7, #4]
 8015396:	69ba      	ldr	r2, [r7, #24]
 8015398:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    
  /* Start the USB OTG core */     
   HCD_Init(pdev , coreID);
 801539c:	7afb      	ldrb	r3, [r7, #11]
 801539e:	4619      	mov	r1, r3
 80153a0:	68f8      	ldr	r0, [r7, #12]
 80153a2:	f7fe fd29 	bl	8013df8 <HCD_Init>
   
  /* Upon Init call usr call back */
  phost->usr_cb->Init();
 80153a6:	687b      	ldr	r3, [r7, #4]
 80153a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80153ac:	681b      	ldr	r3, [r3, #0]
 80153ae:	4798      	blx	r3
  
  /* Enable Interrupts */
  USB_OTG_BSP_EnableInterrupt(pdev);
 80153b0:	68f8      	ldr	r0, [r7, #12]
 80153b2:	f7fd fc3d 	bl	8012c30 <USB_OTG_BSP_EnableInterrupt>
}
 80153b6:	bf00      	nop
 80153b8:	3710      	adds	r7, #16
 80153ba:	46bd      	mov	sp, r7
 80153bc:	bd80      	pop	{r7, pc}

080153be <USBH_DeInit>:
  *         Re-Initialize Host
  * @param  None 
  * @retval status: USBH_Status
  */
USBH_Status USBH_DeInit(USB_OTG_CORE_HANDLE *pdev, USBH_HOST *phost)
{
 80153be:	b580      	push	{r7, lr}
 80153c0:	b082      	sub	sp, #8
 80153c2:	af00      	add	r7, sp, #0
 80153c4:	6078      	str	r0, [r7, #4]
 80153c6:	6039      	str	r1, [r7, #0]
  /* Software Init */
  
  phost->gState = HOST_IDLE;
 80153c8:	683b      	ldr	r3, [r7, #0]
 80153ca:	2200      	movs	r2, #0
 80153cc:	701a      	strb	r2, [r3, #0]
  phost->gStateBkp = HOST_IDLE; 
 80153ce:	683b      	ldr	r3, [r7, #0]
 80153d0:	2200      	movs	r2, #0
 80153d2:	705a      	strb	r2, [r3, #1]
  phost->EnumState = ENUM_IDLE;
 80153d4:	683b      	ldr	r3, [r7, #0]
 80153d6:	2200      	movs	r2, #0
 80153d8:	709a      	strb	r2, [r3, #2]
  phost->RequestState = CMD_SEND;  
 80153da:	683b      	ldr	r3, [r7, #0]
 80153dc:	2201      	movs	r2, #1
 80153de:	70da      	strb	r2, [r3, #3]
  
  phost->Control.state = CTRL_SETUP;
 80153e0:	683b      	ldr	r3, [r7, #0]
 80153e2:	2201      	movs	r2, #1
 80153e4:	771a      	strb	r2, [r3, #28]
  phost->Control.ep0size = USB_OTG_MAX_EP0_SIZE;  
 80153e6:	683b      	ldr	r3, [r7, #0]
 80153e8:	2240      	movs	r2, #64	; 0x40
 80153ea:	719a      	strb	r2, [r3, #6]
  
  phost->device_prop.address = USBH_DEVICE_ADDRESS_DEFAULT;
 80153ec:	683b      	ldr	r3, [r7, #0]
 80153ee:	2200      	movs	r2, #0
 80153f0:	f883 2020 	strb.w	r2, [r3, #32]
  phost->device_prop.speed = HPRT0_PRTSPD_FULL_SPEED;
 80153f4:	683b      	ldr	r3, [r7, #0]
 80153f6:	2201      	movs	r2, #1
 80153f8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  USBH_Free_Channel  (pdev, phost->Control.hc_num_in);
 80153fc:	683b      	ldr	r3, [r7, #0]
 80153fe:	791b      	ldrb	r3, [r3, #4]
 8015400:	4619      	mov	r1, r3
 8015402:	6878      	ldr	r0, [r7, #4]
 8015404:	f000 fd5c 	bl	8015ec0 <USBH_Free_Channel>
  USBH_Free_Channel  (pdev, phost->Control.hc_num_out);  
 8015408:	683b      	ldr	r3, [r7, #0]
 801540a:	795b      	ldrb	r3, [r3, #5]
 801540c:	4619      	mov	r1, r3
 801540e:	6878      	ldr	r0, [r7, #4]
 8015410:	f000 fd56 	bl	8015ec0 <USBH_Free_Channel>
  return USBH_OK;
 8015414:	2300      	movs	r3, #0
}
 8015416:	4618      	mov	r0, r3
 8015418:	3708      	adds	r7, #8
 801541a:	46bd      	mov	sp, r7
 801541c:	bd80      	pop	{r7, pc}

0801541e <USBH_Process>:
*         USB Host core main state machine process
* @param  None 
* @retval None
*/
void USBH_Process(USB_OTG_CORE_HANDLE *pdev , USBH_HOST *phost)
{
 801541e:	b580      	push	{r7, lr}
 8015420:	b086      	sub	sp, #24
 8015422:	af02      	add	r7, sp, #8
 8015424:	6078      	str	r0, [r7, #4]
 8015426:	6039      	str	r1, [r7, #0]
  volatile USBH_Status status = USBH_FAIL;
 8015428:	2302      	movs	r3, #2
 801542a:	73fb      	strb	r3, [r7, #15]
  
  
  /* check for Host port events */
  if ((HCD_IsDeviceConnected(pdev) == 0)&& (phost->gState != HOST_IDLE)) 
 801542c:	6878      	ldr	r0, [r7, #4]
 801542e:	f7fe fd48 	bl	8013ec2 <HCD_IsDeviceConnected>
 8015432:	4603      	mov	r3, r0
 8015434:	2b00      	cmp	r3, #0
 8015436:	d10a      	bne.n	801544e <USBH_Process+0x30>
 8015438:	683b      	ldr	r3, [r7, #0]
 801543a:	781b      	ldrb	r3, [r3, #0]
 801543c:	2b00      	cmp	r3, #0
 801543e:	d006      	beq.n	801544e <USBH_Process+0x30>
  {
    if(phost->gState != HOST_DEV_DISCONNECTED) 
 8015440:	683b      	ldr	r3, [r7, #0]
 8015442:	781b      	ldrb	r3, [r3, #0]
 8015444:	2b02      	cmp	r3, #2
 8015446:	d002      	beq.n	801544e <USBH_Process+0x30>
    {
      phost->gState = HOST_DEV_DISCONNECTED;
 8015448:	683b      	ldr	r3, [r7, #0]
 801544a:	2202      	movs	r2, #2
 801544c:	701a      	strb	r2, [r3, #0]
    }
  }
    
  switch (phost->gState)
 801544e:	683b      	ldr	r3, [r7, #0]
 8015450:	781b      	ldrb	r3, [r3, #0]
 8015452:	2b0a      	cmp	r3, #10
 8015454:	f200 8101 	bhi.w	801565a <USBH_Process+0x23c>
 8015458:	a201      	add	r2, pc, #4	; (adr r2, 8015460 <USBH_Process+0x42>)
 801545a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801545e:	bf00      	nop
 8015460:	0801548d 	.word	0x0801548d
 8015464:	080154a9 	.word	0x080154a9
 8015468:	08015621 	.word	0x08015621
 801546c:	0801565b 	.word	0x0801565b
 8015470:	0801555d 	.word	0x0801555d
 8015474:	080155a7 	.word	0x080155a7
 8015478:	080155d5 	.word	0x080155d5
 801547c:	080155f3 	.word	0x080155f3
 8015480:	0801557d 	.word	0x0801557d
 8015484:	0801565b 	.word	0x0801565b
 8015488:	080155fd 	.word	0x080155fd
  {
  
  case HOST_IDLE :
    
    if (HCD_IsDeviceConnected(pdev))  
 801548c:	6878      	ldr	r0, [r7, #4]
 801548e:	f7fe fd18 	bl	8013ec2 <HCD_IsDeviceConnected>
 8015492:	4603      	mov	r3, r0
 8015494:	2b00      	cmp	r3, #0
 8015496:	f000 80e2 	beq.w	801565e <USBH_Process+0x240>
    {
      phost->gState = HOST_DEV_ATTACHED;
 801549a:	683b      	ldr	r3, [r7, #0]
 801549c:	2201      	movs	r2, #1
 801549e:	701a      	strb	r2, [r3, #0]
      USB_OTG_BSP_mDelay(100);
 80154a0:	2064      	movs	r0, #100	; 0x64
 80154a2:	f7fd fc41 	bl	8012d28 <USB_OTG_BSP_mDelay>
    }
    break;
 80154a6:	e0da      	b.n	801565e <USBH_Process+0x240>
   
  case HOST_DEV_ATTACHED :
    
    phost->usr_cb->DeviceAttached();
 80154a8:	683b      	ldr	r3, [r7, #0]
 80154aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80154ae:	689b      	ldr	r3, [r3, #8]
 80154b0:	4798      	blx	r3
    phost->Control.hc_num_out = USBH_Alloc_Channel(pdev, 0x00);
 80154b2:	2100      	movs	r1, #0
 80154b4:	6878      	ldr	r0, [r7, #4]
 80154b6:	f000 fcdd 	bl	8015e74 <USBH_Alloc_Channel>
 80154ba:	4603      	mov	r3, r0
 80154bc:	461a      	mov	r2, r3
 80154be:	683b      	ldr	r3, [r7, #0]
 80154c0:	715a      	strb	r2, [r3, #5]
    phost->Control.hc_num_in = USBH_Alloc_Channel(pdev, 0x80);  
 80154c2:	2180      	movs	r1, #128	; 0x80
 80154c4:	6878      	ldr	r0, [r7, #4]
 80154c6:	f000 fcd5 	bl	8015e74 <USBH_Alloc_Channel>
 80154ca:	4603      	mov	r3, r0
 80154cc:	461a      	mov	r2, r3
 80154ce:	683b      	ldr	r3, [r7, #0]
 80154d0:	711a      	strb	r2, [r3, #4]
  
    /* Reset USB Device */
    if ( HCD_ResetPort(pdev) == 0)
 80154d2:	6878      	ldr	r0, [r7, #4]
 80154d4:	f7fe fce9 	bl	8013eaa <HCD_ResetPort>
 80154d8:	4603      	mov	r3, r0
 80154da:	2b00      	cmp	r3, #0
 80154dc:	f040 80c1 	bne.w	8015662 <USBH_Process+0x244>
    {
      phost->usr_cb->ResetDevice();
 80154e0:	683b      	ldr	r3, [r7, #0]
 80154e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80154e6:	68db      	ldr	r3, [r3, #12]
 80154e8:	4798      	blx	r3
      /*  Wait for USB USBH_ISR_PrtEnDisableChange()  
      Host is Now ready to start the Enumeration 
      */
      
      phost->device_prop.speed = HCD_GetCurrentSpeed(pdev);
 80154ea:	6878      	ldr	r0, [r7, #4]
 80154ec:	f7fe fcca 	bl	8013e84 <HCD_GetCurrentSpeed>
 80154f0:	4603      	mov	r3, r0
 80154f2:	b2da      	uxtb	r2, r3
 80154f4:	683b      	ldr	r3, [r7, #0]
 80154f6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      
      phost->gState = HOST_ENUMERATION;
 80154fa:	683b      	ldr	r3, [r7, #0]
 80154fc:	2204      	movs	r2, #4
 80154fe:	701a      	strb	r2, [r3, #0]
      phost->usr_cb->DeviceSpeedDetected(phost->device_prop.speed);
 8015500:	683b      	ldr	r3, [r7, #0]
 8015502:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8015506:	699b      	ldr	r3, [r3, #24]
 8015508:	683a      	ldr	r2, [r7, #0]
 801550a:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 801550e:	4610      	mov	r0, r2
 8015510:	4798      	blx	r3
        
      /* Open Control pipes */
      USBH_Open_Channel (pdev,
 8015512:	683b      	ldr	r3, [r7, #0]
 8015514:	7919      	ldrb	r1, [r3, #4]
 8015516:	683b      	ldr	r3, [r7, #0]
 8015518:	f893 2020 	ldrb.w	r2, [r3, #32]
 801551c:	683b      	ldr	r3, [r7, #0]
 801551e:	f893 0021 	ldrb.w	r0, [r3, #33]	; 0x21
                           phost->Control.hc_num_in,
                           phost->device_prop.address,
                           phost->device_prop.speed,
                           EP_TYPE_CTRL,
                           phost->Control.ep0size); 
 8015522:	683b      	ldr	r3, [r7, #0]
 8015524:	799b      	ldrb	r3, [r3, #6]
      USBH_Open_Channel (pdev,
 8015526:	b29b      	uxth	r3, r3
 8015528:	9301      	str	r3, [sp, #4]
 801552a:	2300      	movs	r3, #0
 801552c:	9300      	str	r3, [sp, #0]
 801552e:	4603      	mov	r3, r0
 8015530:	6878      	ldr	r0, [r7, #4]
 8015532:	f000 fbd7 	bl	8015ce4 <USBH_Open_Channel>
      
      /* Open Control pipes */
      USBH_Open_Channel (pdev,
 8015536:	683b      	ldr	r3, [r7, #0]
 8015538:	7959      	ldrb	r1, [r3, #5]
 801553a:	683b      	ldr	r3, [r7, #0]
 801553c:	f893 2020 	ldrb.w	r2, [r3, #32]
 8015540:	683b      	ldr	r3, [r7, #0]
 8015542:	f893 0021 	ldrb.w	r0, [r3, #33]	; 0x21
                           phost->Control.hc_num_out,
                           phost->device_prop.address,
                           phost->device_prop.speed,
                           EP_TYPE_CTRL,
                           phost->Control.ep0size);          
 8015546:	683b      	ldr	r3, [r7, #0]
 8015548:	799b      	ldrb	r3, [r3, #6]
      USBH_Open_Channel (pdev,
 801554a:	b29b      	uxth	r3, r3
 801554c:	9301      	str	r3, [sp, #4]
 801554e:	2300      	movs	r3, #0
 8015550:	9300      	str	r3, [sp, #0]
 8015552:	4603      	mov	r3, r0
 8015554:	6878      	ldr	r0, [r7, #4]
 8015556:	f000 fbc5 	bl	8015ce4 <USBH_Open_Channel>
   }
    break;
 801555a:	e082      	b.n	8015662 <USBH_Process+0x244>
    
  case HOST_ENUMERATION:     
    /* Check for enumeration status */  
    if ( USBH_HandleEnum(pdev , phost) == USBH_OK)
 801555c:	6839      	ldr	r1, [r7, #0]
 801555e:	6878      	ldr	r0, [r7, #4]
 8015560:	f000 f8ac 	bl	80156bc <USBH_HandleEnum>
 8015564:	4603      	mov	r3, r0
 8015566:	2b00      	cmp	r3, #0
 8015568:	d17d      	bne.n	8015666 <USBH_Process+0x248>
    { 
      /* The function shall return USBH_OK when full enumeration is complete */
      
      /* user callback for end of device basic enumeration */
      phost->usr_cb->EnumerationDone();
 801556a:	683b      	ldr	r3, [r7, #0]
 801556c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8015570:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015572:	4798      	blx	r3
      
      phost->gState  = HOST_USR_INPUT;    
 8015574:	683b      	ldr	r3, [r7, #0]
 8015576:	2208      	movs	r2, #8
 8015578:	701a      	strb	r2, [r3, #0]
    }
    break;
 801557a:	e074      	b.n	8015666 <USBH_Process+0x248>
    
  case HOST_USR_INPUT:    
    /*The function should return user response true to move to class state */
    if ( phost->usr_cb->UserInput() == USBH_USR_RESP_OK)
 801557c:	683b      	ldr	r3, [r7, #0]
 801557e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8015582:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015584:	4798      	blx	r3
 8015586:	4603      	mov	r3, r0
 8015588:	2b01      	cmp	r3, #1
 801558a:	d16e      	bne.n	801566a <USBH_Process+0x24c>
    {
      if((phost->class_cb->Init(pdev, phost))\
 801558c:	683b      	ldr	r3, [r7, #0]
 801558e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8015590:	681b      	ldr	r3, [r3, #0]
 8015592:	6839      	ldr	r1, [r7, #0]
 8015594:	6878      	ldr	r0, [r7, #4]
 8015596:	4798      	blx	r3
 8015598:	4603      	mov	r3, r0
 801559a:	2b00      	cmp	r3, #0
 801559c:	d165      	bne.n	801566a <USBH_Process+0x24c>
        == USBH_OK)
      {
        phost->gState  = HOST_CLASS_REQUEST;     
 801559e:	683b      	ldr	r3, [r7, #0]
 80155a0:	2205      	movs	r2, #5
 80155a2:	701a      	strb	r2, [r3, #0]
      }     
    }   
    break;
 80155a4:	e061      	b.n	801566a <USBH_Process+0x24c>
    
  case HOST_CLASS_REQUEST:  
    /* process class standard contol requests state machine */ 
    status = phost->class_cb->Requests(pdev, phost);
 80155a6:	683b      	ldr	r3, [r7, #0]
 80155a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80155aa:	689b      	ldr	r3, [r3, #8]
 80155ac:	6839      	ldr	r1, [r7, #0]
 80155ae:	6878      	ldr	r0, [r7, #4]
 80155b0:	4798      	blx	r3
 80155b2:	4603      	mov	r3, r0
 80155b4:	73fb      	strb	r3, [r7, #15]
    
     if(status == USBH_OK)
 80155b6:	7bfb      	ldrb	r3, [r7, #15]
 80155b8:	b2db      	uxtb	r3, r3
 80155ba:	2b00      	cmp	r3, #0
 80155bc:	d103      	bne.n	80155c6 <USBH_Process+0x1a8>
     {
       phost->gState  = HOST_CLASS;
 80155be:	683b      	ldr	r3, [r7, #0]
 80155c0:	2206      	movs	r2, #6
 80155c2:	701a      	strb	r2, [r3, #0]
     {
       USBH_ErrorHandle(phost, status);
     }
 
    
    break;    
 80155c4:	e052      	b.n	801566c <USBH_Process+0x24e>
       USBH_ErrorHandle(phost, status);
 80155c6:	7bfb      	ldrb	r3, [r7, #15]
 80155c8:	b2db      	uxtb	r3, r3
 80155ca:	4619      	mov	r1, r3
 80155cc:	6838      	ldr	r0, [r7, #0]
 80155ce:	f000 f851 	bl	8015674 <USBH_ErrorHandle>
    break;    
 80155d2:	e04b      	b.n	801566c <USBH_Process+0x24e>
  case HOST_CLASS:   
    /* process class state machine */
    status = phost->class_cb->Machine(pdev, phost);
 80155d4:	683b      	ldr	r3, [r7, #0]
 80155d6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80155d8:	68db      	ldr	r3, [r3, #12]
 80155da:	6839      	ldr	r1, [r7, #0]
 80155dc:	6878      	ldr	r0, [r7, #4]
 80155de:	4798      	blx	r3
 80155e0:	4603      	mov	r3, r0
 80155e2:	73fb      	strb	r3, [r7, #15]
    USBH_ErrorHandle(phost, status);
 80155e4:	7bfb      	ldrb	r3, [r7, #15]
 80155e6:	b2db      	uxtb	r3, r3
 80155e8:	4619      	mov	r1, r3
 80155ea:	6838      	ldr	r0, [r7, #0]
 80155ec:	f000 f842 	bl	8015674 <USBH_ErrorHandle>
    break;       
 80155f0:	e03c      	b.n	801566c <USBH_Process+0x24e>
    
  case HOST_CTRL_XFER:
    /* process control transfer state machine */
    USBH_HandleControl(pdev, phost);    
 80155f2:	6839      	ldr	r1, [r7, #0]
 80155f4:	6878      	ldr	r0, [r7, #4]
 80155f6:	f000 f9d3 	bl	80159a0 <USBH_HandleControl>
    break;
 80155fa:	e037      	b.n	801566c <USBH_Process+0x24e>
  case HOST_SUSPENDED:
    break;
  
  case HOST_ERROR_STATE:
    /* Re-Initilaize Host for new Enumeration */
    USBH_DeInit(pdev, phost);
 80155fc:	6839      	ldr	r1, [r7, #0]
 80155fe:	6878      	ldr	r0, [r7, #4]
 8015600:	f7ff fedd 	bl	80153be <USBH_DeInit>
    phost->usr_cb->DeInit();
 8015604:	683b      	ldr	r3, [r7, #0]
 8015606:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801560a:	685b      	ldr	r3, [r3, #4]
 801560c:	4798      	blx	r3
    phost->class_cb->DeInit(pdev, &phost->device_prop);
 801560e:	683b      	ldr	r3, [r7, #0]
 8015610:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8015612:	685b      	ldr	r3, [r3, #4]
 8015614:	683a      	ldr	r2, [r7, #0]
 8015616:	3220      	adds	r2, #32
 8015618:	4611      	mov	r1, r2
 801561a:	6878      	ldr	r0, [r7, #4]
 801561c:	4798      	blx	r3
    break;
 801561e:	e025      	b.n	801566c <USBH_Process+0x24e>
    
  case HOST_DEV_DISCONNECTED :
    
    /* Manage User disconnect operations*/
    phost->usr_cb->DeviceDisconnected();
 8015620:	683b      	ldr	r3, [r7, #0]
 8015622:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8015626:	691b      	ldr	r3, [r3, #16]
 8015628:	4798      	blx	r3
    
    /* Re-Initilaize Host for new Enumeration */
    USBH_DeInit(pdev, phost);
 801562a:	6839      	ldr	r1, [r7, #0]
 801562c:	6878      	ldr	r0, [r7, #4]
 801562e:	f7ff fec6 	bl	80153be <USBH_DeInit>
    phost->usr_cb->DeInit();
 8015632:	683b      	ldr	r3, [r7, #0]
 8015634:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8015638:	685b      	ldr	r3, [r3, #4]
 801563a:	4798      	blx	r3
    phost->class_cb->DeInit(pdev, &phost->device_prop); 
 801563c:	683b      	ldr	r3, [r7, #0]
 801563e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8015640:	685b      	ldr	r3, [r3, #4]
 8015642:	683a      	ldr	r2, [r7, #0]
 8015644:	3220      	adds	r2, #32
 8015646:	4611      	mov	r1, r2
 8015648:	6878      	ldr	r0, [r7, #4]
 801564a:	4798      	blx	r3
    USBH_DeAllocate_AllChannel(pdev);  
 801564c:	6878      	ldr	r0, [r7, #4]
 801564e:	f000 fc59 	bl	8015f04 <USBH_DeAllocate_AllChannel>
    phost->gState = HOST_IDLE;
 8015652:	683b      	ldr	r3, [r7, #0]
 8015654:	2200      	movs	r2, #0
 8015656:	701a      	strb	r2, [r3, #0]
    
    break;
 8015658:	e008      	b.n	801566c <USBH_Process+0x24e>
    
  default :
    break;
 801565a:	bf00      	nop
 801565c:	e006      	b.n	801566c <USBH_Process+0x24e>
    break;
 801565e:	bf00      	nop
 8015660:	e004      	b.n	801566c <USBH_Process+0x24e>
    break;
 8015662:	bf00      	nop
 8015664:	e002      	b.n	801566c <USBH_Process+0x24e>
    break;
 8015666:	bf00      	nop
 8015668:	e000      	b.n	801566c <USBH_Process+0x24e>
    break;
 801566a:	bf00      	nop
  }

}
 801566c:	bf00      	nop
 801566e:	3710      	adds	r7, #16
 8015670:	46bd      	mov	sp, r7
 8015672:	bd80      	pop	{r7, pc}

08015674 <USBH_ErrorHandle>:
  *         This function handles the Error on Host side.
  * @param  errType : Type of Error or Busy/OK state
  * @retval None
  */
void USBH_ErrorHandle(USBH_HOST *phost, USBH_Status errType)
{
 8015674:	b580      	push	{r7, lr}
 8015676:	b082      	sub	sp, #8
 8015678:	af00      	add	r7, sp, #0
 801567a:	6078      	str	r0, [r7, #4]
 801567c:	460b      	mov	r3, r1
 801567e:	70fb      	strb	r3, [r7, #3]
  /* Error unrecovered or not supported device speed */
  if ( (errType == USBH_ERROR_SPEED_UNKNOWN) ||
 8015680:	78fb      	ldrb	r3, [r7, #3]
 8015682:	2b05      	cmp	r3, #5
 8015684:	d002      	beq.n	801568c <USBH_ErrorHandle+0x18>
 8015686:	78fb      	ldrb	r3, [r7, #3]
 8015688:	2b04      	cmp	r3, #4
 801568a:	d108      	bne.n	801569e <USBH_ErrorHandle+0x2a>
       (errType == USBH_UNRECOVERED_ERROR) )
  {
    phost->usr_cb->UnrecoveredError(); 
 801568c:	687b      	ldr	r3, [r7, #4]
 801568e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8015692:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015694:	4798      	blx	r3
    phost->gState = HOST_ERROR_STATE;   
 8015696:	687b      	ldr	r3, [r7, #4]
 8015698:	220a      	movs	r2, #10
 801569a:	701a      	strb	r2, [r3, #0]
  {
    phost->gState = HOST_ERROR_STATE;  
    /* user callback for initalization */
    phost->usr_cb->Init();
  } 
}
 801569c:	e00a      	b.n	80156b4 <USBH_ErrorHandle+0x40>
  else if(errType == USBH_APPLY_DEINIT)
 801569e:	78fb      	ldrb	r3, [r7, #3]
 80156a0:	2b06      	cmp	r3, #6
 80156a2:	d107      	bne.n	80156b4 <USBH_ErrorHandle+0x40>
    phost->gState = HOST_ERROR_STATE;  
 80156a4:	687b      	ldr	r3, [r7, #4]
 80156a6:	220a      	movs	r2, #10
 80156a8:	701a      	strb	r2, [r3, #0]
    phost->usr_cb->Init();
 80156aa:	687b      	ldr	r3, [r7, #4]
 80156ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80156b0:	681b      	ldr	r3, [r3, #0]
 80156b2:	4798      	blx	r3
}
 80156b4:	bf00      	nop
 80156b6:	3708      	adds	r7, #8
 80156b8:	46bd      	mov	sp, r7
 80156ba:	bd80      	pop	{r7, pc}

080156bc <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  pdev: Selected device
  * @retval USBH_Status
  */
static USBH_Status USBH_HandleEnum(USB_OTG_CORE_HANDLE *pdev, USBH_HOST *phost)
{
 80156bc:	b580      	push	{r7, lr}
 80156be:	b096      	sub	sp, #88	; 0x58
 80156c0:	af02      	add	r7, sp, #8
 80156c2:	6078      	str	r0, [r7, #4]
 80156c4:	6039      	str	r1, [r7, #0]
  USBH_Status Status = USBH_BUSY;  
 80156c6:	2301      	movs	r3, #1
 80156c8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  uint8_t Local_Buffer[64];
  
  switch (phost->EnumState)
 80156cc:	683b      	ldr	r3, [r7, #0]
 80156ce:	789b      	ldrb	r3, [r3, #2]
 80156d0:	2b09      	cmp	r3, #9
 80156d2:	f200 814a 	bhi.w	801596a <USBH_HandleEnum+0x2ae>
 80156d6:	a201      	add	r2, pc, #4	; (adr r2, 80156dc <USBH_HandleEnum+0x20>)
 80156d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80156dc:	08015705 	.word	0x08015705
 80156e0:	08015763 	.word	0x08015763
 80156e4:	0801578d 	.word	0x0801578d
 80156e8:	080157f3 	.word	0x080157f3
 80156ec:	0801580d 	.word	0x0801580d
 80156f0:	08015845 	.word	0x08015845
 80156f4:	0801589b 	.word	0x0801589b
 80156f8:	080158ef 	.word	0x080158ef
 80156fc:	08015943 	.word	0x08015943
 8015700:	08015963 	.word	0x08015963
  {
  case ENUM_IDLE:  
    /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
    if ( USBH_Get_DevDesc(pdev , phost, 8) == USBH_OK)
 8015704:	2208      	movs	r2, #8
 8015706:	6839      	ldr	r1, [r7, #0]
 8015708:	6878      	ldr	r0, [r7, #4]
 801570a:	f001 fb3b 	bl	8016d84 <USBH_Get_DevDesc>
 801570e:	4603      	mov	r3, r0
 8015710:	2b00      	cmp	r3, #0
 8015712:	f040 812c 	bne.w	801596e <USBH_HandleEnum+0x2b2>
    {
      phost->Control.ep0size = phost->device_prop.Dev_Desc.bMaxPacketSize;
 8015716:	683b      	ldr	r3, [r7, #0]
 8015718:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 801571c:	683b      	ldr	r3, [r7, #0]
 801571e:	719a      	strb	r2, [r3, #6]
      
      /* Issue Reset  */
      HCD_ResetPort(pdev);
 8015720:	6878      	ldr	r0, [r7, #4]
 8015722:	f7fe fbc2 	bl	8013eaa <HCD_ResetPort>
      phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8015726:	683b      	ldr	r3, [r7, #0]
 8015728:	2201      	movs	r2, #1
 801572a:	709a      	strb	r2, [r3, #2]
      
      /* modify control channels configuration for MaxPacket size */
      USBH_Modify_Channel (pdev,
 801572c:	683b      	ldr	r3, [r7, #0]
 801572e:	7959      	ldrb	r1, [r3, #5]
                           phost->Control.hc_num_out,
                           0,
                           0,
                           0,
                           phost->Control.ep0size);
 8015730:	683b      	ldr	r3, [r7, #0]
 8015732:	799b      	ldrb	r3, [r3, #6]
      USBH_Modify_Channel (pdev,
 8015734:	b29b      	uxth	r3, r3
 8015736:	9301      	str	r3, [sp, #4]
 8015738:	2300      	movs	r3, #0
 801573a:	9300      	str	r3, [sp, #0]
 801573c:	2300      	movs	r3, #0
 801573e:	2200      	movs	r2, #0
 8015740:	6878      	ldr	r0, [r7, #4]
 8015742:	f000 fb4b 	bl	8015ddc <USBH_Modify_Channel>
      
      USBH_Modify_Channel (pdev,
 8015746:	683b      	ldr	r3, [r7, #0]
 8015748:	7919      	ldrb	r1, [r3, #4]
                           phost->Control.hc_num_in,
                           0,
                           0,
                           0,
                           phost->Control.ep0size);      
 801574a:	683b      	ldr	r3, [r7, #0]
 801574c:	799b      	ldrb	r3, [r3, #6]
      USBH_Modify_Channel (pdev,
 801574e:	b29b      	uxth	r3, r3
 8015750:	9301      	str	r3, [sp, #4]
 8015752:	2300      	movs	r3, #0
 8015754:	9300      	str	r3, [sp, #0]
 8015756:	2300      	movs	r3, #0
 8015758:	2200      	movs	r2, #0
 801575a:	6878      	ldr	r0, [r7, #4]
 801575c:	f000 fb3e 	bl	8015ddc <USBH_Modify_Channel>
    }
    break;
 8015760:	e105      	b.n	801596e <USBH_HandleEnum+0x2b2>
    
  case ENUM_GET_FULL_DEV_DESC:  
    /* Get FULL Device Desc  */
    if ( USBH_Get_DevDesc(pdev, phost, USB_DEVICE_DESC_SIZE)\
 8015762:	2212      	movs	r2, #18
 8015764:	6839      	ldr	r1, [r7, #0]
 8015766:	6878      	ldr	r0, [r7, #4]
 8015768:	f001 fb0c 	bl	8016d84 <USBH_Get_DevDesc>
 801576c:	4603      	mov	r3, r0
 801576e:	2b00      	cmp	r3, #0
 8015770:	f040 80ff 	bne.w	8015972 <USBH_HandleEnum+0x2b6>
      == USBH_OK)
    {
      /* user callback for device descriptor available */
      phost->usr_cb->DeviceDescAvailable(&phost->device_prop.Dev_Desc);      
 8015774:	683b      	ldr	r3, [r7, #0]
 8015776:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801577a:	69db      	ldr	r3, [r3, #28]
 801577c:	683a      	ldr	r2, [r7, #0]
 801577e:	3222      	adds	r2, #34	; 0x22
 8015780:	4610      	mov	r0, r2
 8015782:	4798      	blx	r3
      phost->EnumState = ENUM_SET_ADDR;
 8015784:	683b      	ldr	r3, [r7, #0]
 8015786:	2202      	movs	r2, #2
 8015788:	709a      	strb	r2, [r3, #2]
    }
    break;
 801578a:	e0f2      	b.n	8015972 <USBH_HandleEnum+0x2b6>
   
  case ENUM_SET_ADDR: 
    /* set address */
    if ( USBH_SetAddress(pdev, phost, USBH_DEVICE_ADDRESS) == USBH_OK)
 801578c:	2201      	movs	r2, #1
 801578e:	6839      	ldr	r1, [r7, #0]
 8015790:	6878      	ldr	r0, [r7, #4]
 8015792:	f001 fbc4 	bl	8016f1e <USBH_SetAddress>
 8015796:	4603      	mov	r3, r0
 8015798:	2b00      	cmp	r3, #0
 801579a:	f040 80ec 	bne.w	8015976 <USBH_HandleEnum+0x2ba>
    {
      USB_OTG_BSP_mDelay(2);
 801579e:	2002      	movs	r0, #2
 80157a0:	f7fd fac2 	bl	8012d28 <USB_OTG_BSP_mDelay>
      phost->device_prop.address = USBH_DEVICE_ADDRESS;
 80157a4:	683b      	ldr	r3, [r7, #0]
 80157a6:	2201      	movs	r2, #1
 80157a8:	f883 2020 	strb.w	r2, [r3, #32]
      
      /* user callback for device address assigned */
      phost->usr_cb->DeviceAddressAssigned();
 80157ac:	683b      	ldr	r3, [r7, #0]
 80157ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80157b2:	6a1b      	ldr	r3, [r3, #32]
 80157b4:	4798      	blx	r3
      phost->EnumState = ENUM_GET_CFG_DESC;
 80157b6:	683b      	ldr	r3, [r7, #0]
 80157b8:	2203      	movs	r2, #3
 80157ba:	709a      	strb	r2, [r3, #2]
      
      /* modify control channels to update device address */
      USBH_Modify_Channel (pdev,
 80157bc:	683b      	ldr	r3, [r7, #0]
 80157be:	7919      	ldrb	r1, [r3, #4]
 80157c0:	683b      	ldr	r3, [r7, #0]
 80157c2:	f893 2020 	ldrb.w	r2, [r3, #32]
 80157c6:	2300      	movs	r3, #0
 80157c8:	9301      	str	r3, [sp, #4]
 80157ca:	2300      	movs	r3, #0
 80157cc:	9300      	str	r3, [sp, #0]
 80157ce:	2300      	movs	r3, #0
 80157d0:	6878      	ldr	r0, [r7, #4]
 80157d2:	f000 fb03 	bl	8015ddc <USBH_Modify_Channel>
                           phost->device_prop.address,
                           0,
                           0,
                           0);
      
      USBH_Modify_Channel (pdev,
 80157d6:	683b      	ldr	r3, [r7, #0]
 80157d8:	7959      	ldrb	r1, [r3, #5]
 80157da:	683b      	ldr	r3, [r7, #0]
 80157dc:	f893 2020 	ldrb.w	r2, [r3, #32]
 80157e0:	2300      	movs	r3, #0
 80157e2:	9301      	str	r3, [sp, #4]
 80157e4:	2300      	movs	r3, #0
 80157e6:	9300      	str	r3, [sp, #0]
 80157e8:	2300      	movs	r3, #0
 80157ea:	6878      	ldr	r0, [r7, #4]
 80157ec:	f000 faf6 	bl	8015ddc <USBH_Modify_Channel>
                           phost->device_prop.address,
                           0,
                           0,
                           0);         
    }
    break;
 80157f0:	e0c1      	b.n	8015976 <USBH_HandleEnum+0x2ba>
    
  case ENUM_GET_CFG_DESC:  
    /* get standard configuration descriptor */
    if ( USBH_Get_CfgDesc(pdev, 
 80157f2:	2209      	movs	r2, #9
 80157f4:	6839      	ldr	r1, [r7, #0]
 80157f6:	6878      	ldr	r0, [r7, #4]
 80157f8:	f001 faee 	bl	8016dd8 <USBH_Get_CfgDesc>
 80157fc:	4603      	mov	r3, r0
 80157fe:	2b00      	cmp	r3, #0
 8015800:	f040 80bb 	bne.w	801597a <USBH_HandleEnum+0x2be>
                          phost,
                          USB_CONFIGURATION_DESC_SIZE) == USBH_OK)
    {
      phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8015804:	683b      	ldr	r3, [r7, #0]
 8015806:	2204      	movs	r2, #4
 8015808:	709a      	strb	r2, [r3, #2]
    }
    break;
 801580a:	e0b6      	b.n	801597a <USBH_HandleEnum+0x2be>
    
  case ENUM_GET_FULL_CFG_DESC:  
    /* get FULL config descriptor (config, interface, endpoints) */
    if (USBH_Get_CfgDesc(pdev, 
 801580c:	683b      	ldr	r3, [r7, #0]
 801580e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8015810:	461a      	mov	r2, r3
 8015812:	6839      	ldr	r1, [r7, #0]
 8015814:	6878      	ldr	r0, [r7, #4]
 8015816:	f001 fadf 	bl	8016dd8 <USBH_Get_CfgDesc>
 801581a:	4603      	mov	r3, r0
 801581c:	2b00      	cmp	r3, #0
 801581e:	f040 80ae 	bne.w	801597e <USBH_HandleEnum+0x2c2>
                         phost,
                         phost->device_prop.Cfg_Desc.wTotalLength) == USBH_OK)
    {
      /* User callback for configuration descriptors available */
      phost->usr_cb->ConfigurationDescAvailable(&phost->device_prop.Cfg_Desc,
 8015822:	683b      	ldr	r3, [r7, #0]
 8015824:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8015828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801582a:	683a      	ldr	r2, [r7, #0]
 801582c:	f102 0034 	add.w	r0, r2, #52	; 0x34
                                                      phost->device_prop.Itf_Desc,
 8015830:	683a      	ldr	r2, [r7, #0]
 8015832:	f102 013e 	add.w	r1, r2, #62	; 0x3e
                                                      phost->device_prop.Ep_Desc[0]);
 8015836:	683a      	ldr	r2, [r7, #0]
 8015838:	3250      	adds	r2, #80	; 0x50
      phost->usr_cb->ConfigurationDescAvailable(&phost->device_prop.Cfg_Desc,
 801583a:	4798      	blx	r3
      
      phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 801583c:	683b      	ldr	r3, [r7, #0]
 801583e:	2205      	movs	r2, #5
 8015840:	709a      	strb	r2, [r3, #2]
    }
    break;
 8015842:	e09c      	b.n	801597e <USBH_HandleEnum+0x2c2>
    
  case ENUM_GET_MFC_STRING_DESC:  
    if (phost->device_prop.Dev_Desc.iManufacturer != 0)
 8015844:	683b      	ldr	r3, [r7, #0]
 8015846:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801584a:	2b00      	cmp	r3, #0
 801584c:	d01b      	beq.n	8015886 <USBH_HandleEnum+0x1ca>
    { /* Check that Manufacturer String is available */
      
      if ( USBH_Get_StringDesc(pdev,
 801584e:	683b      	ldr	r3, [r7, #0]
 8015850:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8015854:	f107 010c 	add.w	r1, r7, #12
 8015858:	23ff      	movs	r3, #255	; 0xff
 801585a:	9300      	str	r3, [sp, #0]
 801585c:	460b      	mov	r3, r1
 801585e:	6839      	ldr	r1, [r7, #0]
 8015860:	6878      	ldr	r0, [r7, #4]
 8015862:	f001 fafd 	bl	8016e60 <USBH_Get_StringDesc>
 8015866:	4603      	mov	r3, r0
 8015868:	2b00      	cmp	r3, #0
 801586a:	f040 808a 	bne.w	8015982 <USBH_HandleEnum+0x2c6>
                               phost->device_prop.Dev_Desc.iManufacturer, 
                               Local_Buffer , 
                               0xff) == USBH_OK)
      {
        /* User callback for Manufacturing string */
        phost->usr_cb->ManufacturerString(Local_Buffer);
 801586e:	683b      	ldr	r3, [r7, #0]
 8015870:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8015874:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015876:	f107 020c 	add.w	r2, r7, #12
 801587a:	4610      	mov	r0, r2
 801587c:	4798      	blx	r3
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 801587e:	683b      	ldr	r3, [r7, #0]
 8015880:	2206      	movs	r2, #6
 8015882:	709a      	strb	r2, [r3, #2]
    else
    {
      phost->usr_cb->ManufacturerString("N/A");      
      phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
    }
    break;
 8015884:	e07d      	b.n	8015982 <USBH_HandleEnum+0x2c6>
      phost->usr_cb->ManufacturerString("N/A");      
 8015886:	683b      	ldr	r3, [r7, #0]
 8015888:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801588c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801588e:	4843      	ldr	r0, [pc, #268]	; (801599c <USBH_HandleEnum+0x2e0>)
 8015890:	4798      	blx	r3
      phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8015892:	683b      	ldr	r3, [r7, #0]
 8015894:	2206      	movs	r2, #6
 8015896:	709a      	strb	r2, [r3, #2]
    break;
 8015898:	e073      	b.n	8015982 <USBH_HandleEnum+0x2c6>
    
  case ENUM_GET_PRODUCT_STRING_DESC:   
    if (phost->device_prop.Dev_Desc.iProduct != 0)
 801589a:	683b      	ldr	r3, [r7, #0]
 801589c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80158a0:	2b00      	cmp	r3, #0
 80158a2:	d01a      	beq.n	80158da <USBH_HandleEnum+0x21e>
    { /* Check that Product string is available */
      if ( USBH_Get_StringDesc(pdev,
 80158a4:	683b      	ldr	r3, [r7, #0]
 80158a6:	f893 2031 	ldrb.w	r2, [r3, #49]	; 0x31
 80158aa:	f107 010c 	add.w	r1, r7, #12
 80158ae:	23ff      	movs	r3, #255	; 0xff
 80158b0:	9300      	str	r3, [sp, #0]
 80158b2:	460b      	mov	r3, r1
 80158b4:	6839      	ldr	r1, [r7, #0]
 80158b6:	6878      	ldr	r0, [r7, #4]
 80158b8:	f001 fad2 	bl	8016e60 <USBH_Get_StringDesc>
 80158bc:	4603      	mov	r3, r0
 80158be:	2b00      	cmp	r3, #0
 80158c0:	d161      	bne.n	8015986 <USBH_HandleEnum+0x2ca>
                               phost->device_prop.Dev_Desc.iProduct, 
                               Local_Buffer, 
                               0xff) == USBH_OK)
      {
        /* User callback for Product string */
        phost->usr_cb->ProductString(Local_Buffer);
 80158c2:	683b      	ldr	r3, [r7, #0]
 80158c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80158c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80158ca:	f107 020c 	add.w	r2, r7, #12
 80158ce:	4610      	mov	r0, r2
 80158d0:	4798      	blx	r3
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80158d2:	683b      	ldr	r3, [r7, #0]
 80158d4:	2207      	movs	r2, #7
 80158d6:	709a      	strb	r2, [r3, #2]
    else
    {
      phost->usr_cb->ProductString("N/A");
      phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
    } 
    break;
 80158d8:	e055      	b.n	8015986 <USBH_HandleEnum+0x2ca>
      phost->usr_cb->ProductString("N/A");
 80158da:	683b      	ldr	r3, [r7, #0]
 80158dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80158e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80158e2:	482e      	ldr	r0, [pc, #184]	; (801599c <USBH_HandleEnum+0x2e0>)
 80158e4:	4798      	blx	r3
      phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80158e6:	683b      	ldr	r3, [r7, #0]
 80158e8:	2207      	movs	r2, #7
 80158ea:	709a      	strb	r2, [r3, #2]
    break;
 80158ec:	e04b      	b.n	8015986 <USBH_HandleEnum+0x2ca>
    
  case ENUM_GET_SERIALNUM_STRING_DESC:   
    if (phost->device_prop.Dev_Desc.iSerialNumber != 0)
 80158ee:	683b      	ldr	r3, [r7, #0]
 80158f0:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80158f4:	2b00      	cmp	r3, #0
 80158f6:	d01a      	beq.n	801592e <USBH_HandleEnum+0x272>
    { /* Check that Serial number string is available */    
      if ( USBH_Get_StringDesc(pdev, 
 80158f8:	683b      	ldr	r3, [r7, #0]
 80158fa:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
 80158fe:	f107 010c 	add.w	r1, r7, #12
 8015902:	23ff      	movs	r3, #255	; 0xff
 8015904:	9300      	str	r3, [sp, #0]
 8015906:	460b      	mov	r3, r1
 8015908:	6839      	ldr	r1, [r7, #0]
 801590a:	6878      	ldr	r0, [r7, #4]
 801590c:	f001 faa8 	bl	8016e60 <USBH_Get_StringDesc>
 8015910:	4603      	mov	r3, r0
 8015912:	2b00      	cmp	r3, #0
 8015914:	d139      	bne.n	801598a <USBH_HandleEnum+0x2ce>
                               phost->device_prop.Dev_Desc.iSerialNumber, 
                               Local_Buffer, 
                               0xff) == USBH_OK)
      {
        /* User callback for Serial number string */
        phost->usr_cb->SerialNumString(Local_Buffer);
 8015916:	683b      	ldr	r3, [r7, #0]
 8015918:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801591c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801591e:	f107 020c 	add.w	r2, r7, #12
 8015922:	4610      	mov	r0, r2
 8015924:	4798      	blx	r3
        phost->EnumState = ENUM_SET_CONFIGURATION;
 8015926:	683b      	ldr	r3, [r7, #0]
 8015928:	2208      	movs	r2, #8
 801592a:	709a      	strb	r2, [r3, #2]
    else
    {
      phost->usr_cb->SerialNumString("N/A");      
      phost->EnumState = ENUM_SET_CONFIGURATION;
    }  
    break;
 801592c:	e02d      	b.n	801598a <USBH_HandleEnum+0x2ce>
      phost->usr_cb->SerialNumString("N/A");      
 801592e:	683b      	ldr	r3, [r7, #0]
 8015930:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8015934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015936:	4819      	ldr	r0, [pc, #100]	; (801599c <USBH_HandleEnum+0x2e0>)
 8015938:	4798      	blx	r3
      phost->EnumState = ENUM_SET_CONFIGURATION;
 801593a:	683b      	ldr	r3, [r7, #0]
 801593c:	2208      	movs	r2, #8
 801593e:	709a      	strb	r2, [r3, #2]
    break;
 8015940:	e023      	b.n	801598a <USBH_HandleEnum+0x2ce>
      
  case ENUM_SET_CONFIGURATION:
    /* set configuration  (default config) */
    if (USBH_SetCfg(pdev, 
                    phost,
                    phost->device_prop.Cfg_Desc.bConfigurationValue) == USBH_OK)
 8015942:	683b      	ldr	r3, [r7, #0]
 8015944:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
    if (USBH_SetCfg(pdev, 
 8015948:	b29b      	uxth	r3, r3
 801594a:	461a      	mov	r2, r3
 801594c:	6839      	ldr	r1, [r7, #0]
 801594e:	6878      	ldr	r0, [r7, #4]
 8015950:	f001 fb07 	bl	8016f62 <USBH_SetCfg>
 8015954:	4603      	mov	r3, r0
 8015956:	2b00      	cmp	r3, #0
 8015958:	d119      	bne.n	801598e <USBH_HandleEnum+0x2d2>
    {
      phost->EnumState = ENUM_DEV_CONFIGURED;
 801595a:	683b      	ldr	r3, [r7, #0]
 801595c:	2209      	movs	r2, #9
 801595e:	709a      	strb	r2, [r3, #2]
    }
    break;
 8015960:	e015      	b.n	801598e <USBH_HandleEnum+0x2d2>

    
  case ENUM_DEV_CONFIGURED:
    /* user callback for enumeration done */
    Status = USBH_OK;
 8015962:	2300      	movs	r3, #0
 8015964:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    break;
 8015968:	e012      	b.n	8015990 <USBH_HandleEnum+0x2d4>
    
  default:
    break;
 801596a:	bf00      	nop
 801596c:	e010      	b.n	8015990 <USBH_HandleEnum+0x2d4>
    break;
 801596e:	bf00      	nop
 8015970:	e00e      	b.n	8015990 <USBH_HandleEnum+0x2d4>
    break;
 8015972:	bf00      	nop
 8015974:	e00c      	b.n	8015990 <USBH_HandleEnum+0x2d4>
    break;
 8015976:	bf00      	nop
 8015978:	e00a      	b.n	8015990 <USBH_HandleEnum+0x2d4>
    break;
 801597a:	bf00      	nop
 801597c:	e008      	b.n	8015990 <USBH_HandleEnum+0x2d4>
    break;
 801597e:	bf00      	nop
 8015980:	e006      	b.n	8015990 <USBH_HandleEnum+0x2d4>
    break;
 8015982:	bf00      	nop
 8015984:	e004      	b.n	8015990 <USBH_HandleEnum+0x2d4>
    break;
 8015986:	bf00      	nop
 8015988:	e002      	b.n	8015990 <USBH_HandleEnum+0x2d4>
    break;
 801598a:	bf00      	nop
 801598c:	e000      	b.n	8015990 <USBH_HandleEnum+0x2d4>
    break;
 801598e:	bf00      	nop
  }  
  return Status;
 8015990:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8015994:	4618      	mov	r0, r3
 8015996:	3750      	adds	r7, #80	; 0x50
 8015998:	46bd      	mov	sp, r7
 801599a:	bd80      	pop	{r7, pc}
 801599c:	08022970 	.word	0x08022970

080159a0 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  pdev: Selected device
  * @retval Status
  */
USBH_Status USBH_HandleControl (USB_OTG_CORE_HANDLE *pdev, USBH_HOST *phost)
{
 80159a0:	b580      	push	{r7, lr}
 80159a2:	b084      	sub	sp, #16
 80159a4:	af00      	add	r7, sp, #0
 80159a6:	6078      	str	r0, [r7, #4]
 80159a8:	6039      	str	r1, [r7, #0]
  uint8_t direction;  
  static uint16_t timeout = 0;
  USBH_Status status = USBH_OK;
 80159aa:	2300      	movs	r3, #0
 80159ac:	73fb      	strb	r3, [r7, #15]
  URB_STATE URB_Status = URB_IDLE;
 80159ae:	2300      	movs	r3, #0
 80159b0:	73bb      	strb	r3, [r7, #14]
  
  phost->Control.status = CTRL_START;
 80159b2:	683b      	ldr	r3, [r7, #0]
 80159b4:	2200      	movs	r2, #0
 80159b6:	749a      	strb	r2, [r3, #18]

  
  switch (phost->Control.state)
 80159b8:	683b      	ldr	r3, [r7, #0]
 80159ba:	7f1b      	ldrb	r3, [r3, #28]
 80159bc:	3b01      	subs	r3, #1
 80159be:	2b0a      	cmp	r3, #10
 80159c0:	f200 817e 	bhi.w	8015cc0 <USBH_HandleControl+0x320>
 80159c4:	a201      	add	r2, pc, #4	; (adr r2, 80159cc <USBH_HandleControl+0x2c>)
 80159c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80159ca:	bf00      	nop
 80159cc:	080159f9 	.word	0x080159f9
 80159d0:	08015a13 	.word	0x08015a13
 80159d4:	08015a99 	.word	0x08015a99
 80159d8:	08015ab3 	.word	0x08015ab3
 80159dc:	08015b0d 	.word	0x08015b0d
 80159e0:	08015b39 	.word	0x08015b39
 80159e4:	08015b8b 	.word	0x08015b8b
 80159e8:	08015ba1 	.word	0x08015ba1
 80159ec:	08015c0d 	.word	0x08015c0d
 80159f0:	08015c4f 	.word	0x08015c4f
 80159f4:	08015c91 	.word	0x08015c91
  {
  case CTRL_SETUP:
    /* send a SETUP packet */
    USBH_CtlSendSetup     (pdev, 
	                   phost->Control.setup.d8 , 
 80159f8:	683b      	ldr	r3, [r7, #0]
 80159fa:	f103 0114 	add.w	r1, r3, #20
    USBH_CtlSendSetup     (pdev, 
 80159fe:	683b      	ldr	r3, [r7, #0]
 8015a00:	795b      	ldrb	r3, [r3, #5]
 8015a02:	461a      	mov	r2, r3
 8015a04:	6878      	ldr	r0, [r7, #4]
 8015a06:	f000 ff2d 	bl	8016864 <USBH_CtlSendSetup>
	                   phost->Control.hc_num_out);  
    phost->Control.state = CTRL_SETUP_WAIT;  
 8015a0a:	683b      	ldr	r3, [r7, #0]
 8015a0c:	2202      	movs	r2, #2
 8015a0e:	771a      	strb	r2, [r3, #28]
    break; 
 8015a10:	e163      	b.n	8015cda <USBH_HandleControl+0x33a>
    
  case CTRL_SETUP_WAIT:
    
    URB_Status = HCD_GetURB_State(pdev , phost->Control.hc_num_out); 
 8015a12:	683b      	ldr	r3, [r7, #0]
 8015a14:	795b      	ldrb	r3, [r3, #5]
 8015a16:	4619      	mov	r1, r3
 8015a18:	6878      	ldr	r0, [r7, #4]
 8015a1a:	f7fe fa6d 	bl	8013ef8 <HCD_GetURB_State>
 8015a1e:	4603      	mov	r3, r0
 8015a20:	73bb      	strb	r3, [r7, #14]
    /* case SETUP packet sent successfully */
    if(URB_Status == URB_DONE)
 8015a22:	7bbb      	ldrb	r3, [r7, #14]
 8015a24:	2b01      	cmp	r3, #1
 8015a26:	d12c      	bne.n	8015a82 <USBH_HandleControl+0xe2>
    { 
      direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8015a28:	683b      	ldr	r3, [r7, #0]
 8015a2a:	7d1b      	ldrb	r3, [r3, #20]
 8015a2c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8015a30:	737b      	strb	r3, [r7, #13]
      
      /* check if there is a data stage */
      if (phost->Control.setup.b.wLength.w != 0 )
 8015a32:	683b      	ldr	r3, [r7, #0]
 8015a34:	8b5b      	ldrh	r3, [r3, #26]
 8015a36:	2b00      	cmp	r3, #0
 8015a38:	d00e      	beq.n	8015a58 <USBH_HandleControl+0xb8>
      {        
        timeout = DATA_STAGE_TIMEOUT;
 8015a3a:	4ba6      	ldr	r3, [pc, #664]	; (8015cd4 <USBH_HandleControl+0x334>)
 8015a3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8015a40:	801a      	strh	r2, [r3, #0]
        if (direction == USB_D2H)
 8015a42:	7b7b      	ldrb	r3, [r7, #13]
 8015a44:	2b80      	cmp	r3, #128	; 0x80
 8015a46:	d103      	bne.n	8015a50 <USBH_HandleControl+0xb0>
        {
          /* Data Direction is IN */
          phost->Control.state = CTRL_DATA_IN;
 8015a48:	683b      	ldr	r3, [r7, #0]
 8015a4a:	2203      	movs	r2, #3
 8015a4c:	771a      	strb	r2, [r3, #28]
 8015a4e:	e010      	b.n	8015a72 <USBH_HandleControl+0xd2>
        }
        else
        {
          /* Data Direction is OUT */
          phost->Control.state = CTRL_DATA_OUT;
 8015a50:	683b      	ldr	r3, [r7, #0]
 8015a52:	2205      	movs	r2, #5
 8015a54:	771a      	strb	r2, [r3, #28]
 8015a56:	e00c      	b.n	8015a72 <USBH_HandleControl+0xd2>
        } 
      }
      /* No DATA stage */
      else
      {
        timeout = NODATA_STAGE_TIMEOUT;
 8015a58:	4b9e      	ldr	r3, [pc, #632]	; (8015cd4 <USBH_HandleControl+0x334>)
 8015a5a:	2232      	movs	r2, #50	; 0x32
 8015a5c:	801a      	strh	r2, [r3, #0]
        
        /* If there is No Data Transfer Stage */
        if (direction == USB_D2H)
 8015a5e:	7b7b      	ldrb	r3, [r7, #13]
 8015a60:	2b80      	cmp	r3, #128	; 0x80
 8015a62:	d103      	bne.n	8015a6c <USBH_HandleControl+0xcc>
        {
          /* Data Direction is IN */
          phost->Control.state = CTRL_STATUS_OUT;
 8015a64:	683b      	ldr	r3, [r7, #0]
 8015a66:	2209      	movs	r2, #9
 8015a68:	771a      	strb	r2, [r3, #28]
 8015a6a:	e002      	b.n	8015a72 <USBH_HandleControl+0xd2>
        }
        else
        {
          /* Data Direction is OUT */
          phost->Control.state = CTRL_STATUS_IN;
 8015a6c:	683b      	ldr	r3, [r7, #0]
 8015a6e:	2207      	movs	r2, #7
 8015a70:	771a      	strb	r2, [r3, #28]
        } 
      }          
      /* Set the delay timer to enable timeout for data stage completion */
      phost->Control.timer = HCD_GetCurrentFrame(pdev);
 8015a72:	6878      	ldr	r0, [r7, #4]
 8015a74:	f7fe fa32 	bl	8013edc <HCD_GetCurrentFrame>
 8015a78:	4603      	mov	r3, r0
 8015a7a:	b29a      	uxth	r2, r3
 8015a7c:	683b      	ldr	r3, [r7, #0]
 8015a7e:	821a      	strh	r2, [r3, #16]
    else if(URB_Status == URB_ERROR)
    {
      phost->Control.state = CTRL_ERROR;     
      phost->Control.status = CTRL_XACTERR;
    }    
    break;
 8015a80:	e120      	b.n	8015cc4 <USBH_HandleControl+0x324>
    else if(URB_Status == URB_ERROR)
 8015a82:	7bbb      	ldrb	r3, [r7, #14]
 8015a84:	2b03      	cmp	r3, #3
 8015a86:	f040 811d 	bne.w	8015cc4 <USBH_HandleControl+0x324>
      phost->Control.state = CTRL_ERROR;     
 8015a8a:	683b      	ldr	r3, [r7, #0]
 8015a8c:	220b      	movs	r2, #11
 8015a8e:	771a      	strb	r2, [r3, #28]
      phost->Control.status = CTRL_XACTERR;
 8015a90:	683b      	ldr	r3, [r7, #0]
 8015a92:	2205      	movs	r2, #5
 8015a94:	749a      	strb	r2, [r3, #18]
    break;
 8015a96:	e115      	b.n	8015cc4 <USBH_HandleControl+0x324>
    
  case CTRL_DATA_IN:  
    /* Issue an IN token */ 
    USBH_CtlReceiveData(pdev,
 8015a98:	683b      	ldr	r3, [r7, #0]
 8015a9a:	6899      	ldr	r1, [r3, #8]
 8015a9c:	683b      	ldr	r3, [r7, #0]
 8015a9e:	899a      	ldrh	r2, [r3, #12]
 8015aa0:	683b      	ldr	r3, [r7, #0]
 8015aa2:	791b      	ldrb	r3, [r3, #4]
 8015aa4:	6878      	ldr	r0, [r7, #4]
 8015aa6:	f000 ff66 	bl	8016976 <USBH_CtlReceiveData>
                        phost->Control.buff, 
                        phost->Control.length,
                        phost->Control.hc_num_in);
 
    phost->Control.state = CTRL_DATA_IN_WAIT;
 8015aaa:	683b      	ldr	r3, [r7, #0]
 8015aac:	2204      	movs	r2, #4
 8015aae:	771a      	strb	r2, [r3, #28]
    break;    
 8015ab0:	e113      	b.n	8015cda <USBH_HandleControl+0x33a>
    
  case CTRL_DATA_IN_WAIT:
    
    URB_Status = HCD_GetURB_State(pdev , phost->Control.hc_num_in); 
 8015ab2:	683b      	ldr	r3, [r7, #0]
 8015ab4:	791b      	ldrb	r3, [r3, #4]
 8015ab6:	4619      	mov	r1, r3
 8015ab8:	6878      	ldr	r0, [r7, #4]
 8015aba:	f7fe fa1d 	bl	8013ef8 <HCD_GetURB_State>
 8015abe:	4603      	mov	r3, r0
 8015ac0:	73bb      	strb	r3, [r7, #14]
    
    /* check is DATA packet transfered successfully */
    if  (URB_Status == URB_DONE)
 8015ac2:	7bbb      	ldrb	r3, [r7, #14]
 8015ac4:	2b01      	cmp	r3, #1
 8015ac6:	d102      	bne.n	8015ace <USBH_HandleControl+0x12e>
    { 
      phost->Control.state = CTRL_STATUS_OUT;
 8015ac8:	683b      	ldr	r3, [r7, #0]
 8015aca:	2209      	movs	r2, #9
 8015acc:	771a      	strb	r2, [r3, #28]
    }
   
    /* manage error cases*/
    if  (URB_Status == URB_STALL) 
 8015ace:	7bbb      	ldrb	r3, [r7, #14]
 8015ad0:	2b04      	cmp	r3, #4
 8015ad2:	d104      	bne.n	8015ade <USBH_HandleControl+0x13e>
    { 
      /* In stall case, return to previous machine state*/
      phost->gState =   phost->gStateBkp;
 8015ad4:	683b      	ldr	r3, [r7, #0]
 8015ad6:	785a      	ldrb	r2, [r3, #1]
 8015ad8:	683b      	ldr	r3, [r7, #0]
 8015ada:	701a      	strb	r2, [r3, #0]
    else if ((HCD_GetCurrentFrame(pdev)- phost->Control.timer) > timeout)
    {
      /* timeout for IN transfer */
      phost->Control.state = CTRL_ERROR; 
    }   
    break;
 8015adc:	e0f4      	b.n	8015cc8 <USBH_HandleControl+0x328>
    else if (URB_Status == URB_ERROR)
 8015ade:	7bbb      	ldrb	r3, [r7, #14]
 8015ae0:	2b03      	cmp	r3, #3
 8015ae2:	d103      	bne.n	8015aec <USBH_HandleControl+0x14c>
      phost->Control.state = CTRL_ERROR;    
 8015ae4:	683b      	ldr	r3, [r7, #0]
 8015ae6:	220b      	movs	r2, #11
 8015ae8:	771a      	strb	r2, [r3, #28]
    break;
 8015aea:	e0ed      	b.n	8015cc8 <USBH_HandleControl+0x328>
    else if ((HCD_GetCurrentFrame(pdev)- phost->Control.timer) > timeout)
 8015aec:	6878      	ldr	r0, [r7, #4]
 8015aee:	f7fe f9f5 	bl	8013edc <HCD_GetCurrentFrame>
 8015af2:	4602      	mov	r2, r0
 8015af4:	683b      	ldr	r3, [r7, #0]
 8015af6:	8a1b      	ldrh	r3, [r3, #16]
 8015af8:	1ad3      	subs	r3, r2, r3
 8015afa:	4a76      	ldr	r2, [pc, #472]	; (8015cd4 <USBH_HandleControl+0x334>)
 8015afc:	8812      	ldrh	r2, [r2, #0]
 8015afe:	4293      	cmp	r3, r2
 8015b00:	f240 80e2 	bls.w	8015cc8 <USBH_HandleControl+0x328>
      phost->Control.state = CTRL_ERROR; 
 8015b04:	683b      	ldr	r3, [r7, #0]
 8015b06:	220b      	movs	r2, #11
 8015b08:	771a      	strb	r2, [r3, #28]
    break;
 8015b0a:	e0dd      	b.n	8015cc8 <USBH_HandleControl+0x328>
    
  case CTRL_DATA_OUT:
    /* Start DATA out transfer (only one DATA packet)*/
    pdev->host.hc[phost->Control.hc_num_out].toggle_out = 1; 
 8015b0c:	683b      	ldr	r3, [r7, #0]
 8015b0e:	795b      	ldrb	r3, [r3, #5]
 8015b10:	687a      	ldr	r2, [r7, #4]
 8015b12:	331e      	adds	r3, #30
 8015b14:	015b      	lsls	r3, r3, #5
 8015b16:	4413      	add	r3, r2
 8015b18:	3305      	adds	r3, #5
 8015b1a:	2201      	movs	r2, #1
 8015b1c:	701a      	strb	r2, [r3, #0]
        
    USBH_CtlSendData (pdev,
 8015b1e:	683b      	ldr	r3, [r7, #0]
 8015b20:	6899      	ldr	r1, [r3, #8]
 8015b22:	683b      	ldr	r3, [r7, #0]
 8015b24:	899a      	ldrh	r2, [r3, #12]
 8015b26:	683b      	ldr	r3, [r7, #0]
 8015b28:	795b      	ldrb	r3, [r3, #5]
 8015b2a:	6878      	ldr	r0, [r7, #4]
 8015b2c:	f000 fece 	bl	80168cc <USBH_CtlSendData>
    



    
    phost->Control.state = CTRL_DATA_OUT_WAIT;
 8015b30:	683b      	ldr	r3, [r7, #0]
 8015b32:	2206      	movs	r2, #6
 8015b34:	771a      	strb	r2, [r3, #28]
    break;
 8015b36:	e0d0      	b.n	8015cda <USBH_HandleControl+0x33a>
    
  case CTRL_DATA_OUT_WAIT:
    
    URB_Status = HCD_GetURB_State(pdev , phost->Control.hc_num_out);     
 8015b38:	683b      	ldr	r3, [r7, #0]
 8015b3a:	795b      	ldrb	r3, [r3, #5]
 8015b3c:	4619      	mov	r1, r3
 8015b3e:	6878      	ldr	r0, [r7, #4]
 8015b40:	f7fe f9da 	bl	8013ef8 <HCD_GetURB_State>
 8015b44:	4603      	mov	r3, r0
 8015b46:	73bb      	strb	r3, [r7, #14]
    if  (URB_Status == URB_DONE)
 8015b48:	7bbb      	ldrb	r3, [r7, #14]
 8015b4a:	2b01      	cmp	r3, #1
 8015b4c:	d103      	bne.n	8015b56 <USBH_HandleControl+0x1b6>
    { /* If the Setup Pkt is sent successful, then change the state */
      phost->Control.state = CTRL_STATUS_IN;
 8015b4e:	683b      	ldr	r3, [r7, #0]
 8015b50:	2207      	movs	r2, #7
 8015b52:	771a      	strb	r2, [r3, #28]
    else if (URB_Status == URB_ERROR)
    {
      /* device error */
      phost->Control.state = CTRL_ERROR;      
    } 
    break;
 8015b54:	e0ba      	b.n	8015ccc <USBH_HandleControl+0x32c>
    else if  (URB_Status == URB_STALL) 
 8015b56:	7bbb      	ldrb	r3, [r7, #14]
 8015b58:	2b04      	cmp	r3, #4
 8015b5a:	d107      	bne.n	8015b6c <USBH_HandleControl+0x1cc>
      phost->gState =   phost->gStateBkp;
 8015b5c:	683b      	ldr	r3, [r7, #0]
 8015b5e:	785a      	ldrb	r2, [r3, #1]
 8015b60:	683b      	ldr	r3, [r7, #0]
 8015b62:	701a      	strb	r2, [r3, #0]
      phost->Control.state = CTRL_STALLED;  
 8015b64:	683b      	ldr	r3, [r7, #0]
 8015b66:	220c      	movs	r2, #12
 8015b68:	771a      	strb	r2, [r3, #28]
    break;
 8015b6a:	e0af      	b.n	8015ccc <USBH_HandleControl+0x32c>
    else if  (URB_Status == URB_NOTREADY)
 8015b6c:	7bbb      	ldrb	r3, [r7, #14]
 8015b6e:	2b02      	cmp	r3, #2
 8015b70:	d103      	bne.n	8015b7a <USBH_HandleControl+0x1da>
      phost->Control.state = CTRL_DATA_OUT;
 8015b72:	683b      	ldr	r3, [r7, #0]
 8015b74:	2205      	movs	r2, #5
 8015b76:	771a      	strb	r2, [r3, #28]
    break;
 8015b78:	e0a8      	b.n	8015ccc <USBH_HandleControl+0x32c>
    else if (URB_Status == URB_ERROR)
 8015b7a:	7bbb      	ldrb	r3, [r7, #14]
 8015b7c:	2b03      	cmp	r3, #3
 8015b7e:	f040 80a5 	bne.w	8015ccc <USBH_HandleControl+0x32c>
      phost->Control.state = CTRL_ERROR;      
 8015b82:	683b      	ldr	r3, [r7, #0]
 8015b84:	220b      	movs	r2, #11
 8015b86:	771a      	strb	r2, [r3, #28]
    break;
 8015b88:	e0a0      	b.n	8015ccc <USBH_HandleControl+0x32c>
    
    
  case CTRL_STATUS_IN:
    /* Send 0 bytes out packet */
    USBH_CtlReceiveData (pdev,
 8015b8a:	683b      	ldr	r3, [r7, #0]
 8015b8c:	791b      	ldrb	r3, [r3, #4]
 8015b8e:	2200      	movs	r2, #0
 8015b90:	2100      	movs	r1, #0
 8015b92:	6878      	ldr	r0, [r7, #4]
 8015b94:	f000 feef 	bl	8016976 <USBH_CtlReceiveData>
                         0,
                         0,
                         phost->Control.hc_num_in);
    
    phost->Control.state = CTRL_STATUS_IN_WAIT;
 8015b98:	683b      	ldr	r3, [r7, #0]
 8015b9a:	2208      	movs	r2, #8
 8015b9c:	771a      	strb	r2, [r3, #28]
    
    break;
 8015b9e:	e09c      	b.n	8015cda <USBH_HandleControl+0x33a>
    
  case CTRL_STATUS_IN_WAIT:
    
    URB_Status = HCD_GetURB_State(pdev , phost->Control.hc_num_in); 
 8015ba0:	683b      	ldr	r3, [r7, #0]
 8015ba2:	791b      	ldrb	r3, [r3, #4]
 8015ba4:	4619      	mov	r1, r3
 8015ba6:	6878      	ldr	r0, [r7, #4]
 8015ba8:	f7fe f9a6 	bl	8013ef8 <HCD_GetURB_State>
 8015bac:	4603      	mov	r3, r0
 8015bae:	73bb      	strb	r3, [r7, #14]
    
    if  ( URB_Status == URB_DONE)
 8015bb0:	7bbb      	ldrb	r3, [r7, #14]
 8015bb2:	2b01      	cmp	r3, #1
 8015bb4:	d107      	bne.n	8015bc6 <USBH_HandleControl+0x226>
    { /* Control transfers completed, Exit the State Machine */
      phost->gState =   phost->gStateBkp;
 8015bb6:	683b      	ldr	r3, [r7, #0]
 8015bb8:	785a      	ldrb	r2, [r3, #1]
 8015bba:	683b      	ldr	r3, [r7, #0]
 8015bbc:	701a      	strb	r2, [r3, #0]
      phost->Control.state = CTRL_COMPLETE;
 8015bbe:	683b      	ldr	r3, [r7, #0]
 8015bc0:	220d      	movs	r2, #13
 8015bc2:	771a      	strb	r2, [r3, #28]
      /* Control transfers completed, Exit the State Machine */
      phost->gState =   phost->gStateBkp;
      phost->Control.status = CTRL_STALL;
      status = USBH_NOT_SUPPORTED;
    }
    break;
 8015bc4:	e084      	b.n	8015cd0 <USBH_HandleControl+0x330>
    else if (URB_Status == URB_ERROR)
 8015bc6:	7bbb      	ldrb	r3, [r7, #14]
 8015bc8:	2b03      	cmp	r3, #3
 8015bca:	d103      	bne.n	8015bd4 <USBH_HandleControl+0x234>
      phost->Control.state = CTRL_ERROR;  
 8015bcc:	683b      	ldr	r3, [r7, #0]
 8015bce:	220b      	movs	r2, #11
 8015bd0:	771a      	strb	r2, [r3, #28]
    break;
 8015bd2:	e07d      	b.n	8015cd0 <USBH_HandleControl+0x330>
    else if((HCD_GetCurrentFrame(pdev)\
 8015bd4:	6878      	ldr	r0, [r7, #4]
 8015bd6:	f7fe f981 	bl	8013edc <HCD_GetCurrentFrame>
 8015bda:	4602      	mov	r2, r0
      - phost->Control.timer) > timeout)
 8015bdc:	683b      	ldr	r3, [r7, #0]
 8015bde:	8a1b      	ldrh	r3, [r3, #16]
 8015be0:	1ad3      	subs	r3, r2, r3
 8015be2:	4a3c      	ldr	r2, [pc, #240]	; (8015cd4 <USBH_HandleControl+0x334>)
 8015be4:	8812      	ldrh	r2, [r2, #0]
    else if((HCD_GetCurrentFrame(pdev)\
 8015be6:	4293      	cmp	r3, r2
 8015be8:	d903      	bls.n	8015bf2 <USBH_HandleControl+0x252>
      phost->Control.state = CTRL_ERROR; 
 8015bea:	683b      	ldr	r3, [r7, #0]
 8015bec:	220b      	movs	r2, #11
 8015bee:	771a      	strb	r2, [r3, #28]
    break;
 8015bf0:	e06e      	b.n	8015cd0 <USBH_HandleControl+0x330>
     else if(URB_Status == URB_STALL)
 8015bf2:	7bbb      	ldrb	r3, [r7, #14]
 8015bf4:	2b04      	cmp	r3, #4
 8015bf6:	d16b      	bne.n	8015cd0 <USBH_HandleControl+0x330>
      phost->gState =   phost->gStateBkp;
 8015bf8:	683b      	ldr	r3, [r7, #0]
 8015bfa:	785a      	ldrb	r2, [r3, #1]
 8015bfc:	683b      	ldr	r3, [r7, #0]
 8015bfe:	701a      	strb	r2, [r3, #0]
      phost->Control.status = CTRL_STALL;
 8015c00:	683b      	ldr	r3, [r7, #0]
 8015c02:	2204      	movs	r2, #4
 8015c04:	749a      	strb	r2, [r3, #18]
      status = USBH_NOT_SUPPORTED;
 8015c06:	2303      	movs	r3, #3
 8015c08:	73fb      	strb	r3, [r7, #15]
    break;
 8015c0a:	e061      	b.n	8015cd0 <USBH_HandleControl+0x330>
    
  case CTRL_STATUS_OUT:
    pdev->host.hc[phost->Control.hc_num_out].toggle_out ^= 1; 
 8015c0c:	683b      	ldr	r3, [r7, #0]
 8015c0e:	795b      	ldrb	r3, [r3, #5]
 8015c10:	687a      	ldr	r2, [r7, #4]
 8015c12:	331e      	adds	r3, #30
 8015c14:	015b      	lsls	r3, r3, #5
 8015c16:	4413      	add	r3, r2
 8015c18:	3305      	adds	r3, #5
 8015c1a:	781b      	ldrb	r3, [r3, #0]
 8015c1c:	683a      	ldr	r2, [r7, #0]
 8015c1e:	7952      	ldrb	r2, [r2, #5]
 8015c20:	4610      	mov	r0, r2
 8015c22:	f083 0301 	eor.w	r3, r3, #1
 8015c26:	b2d9      	uxtb	r1, r3
 8015c28:	687a      	ldr	r2, [r7, #4]
 8015c2a:	f100 031e 	add.w	r3, r0, #30
 8015c2e:	015b      	lsls	r3, r3, #5
 8015c30:	4413      	add	r3, r2
 8015c32:	3305      	adds	r3, #5
 8015c34:	460a      	mov	r2, r1
 8015c36:	701a      	strb	r2, [r3, #0]
    USBH_CtlSendData (pdev,
 8015c38:	683b      	ldr	r3, [r7, #0]
 8015c3a:	795b      	ldrb	r3, [r3, #5]
 8015c3c:	2200      	movs	r2, #0
 8015c3e:	2100      	movs	r1, #0
 8015c40:	6878      	ldr	r0, [r7, #4]
 8015c42:	f000 fe43 	bl	80168cc <USBH_CtlSendData>
                      0,
                      0,
                      phost->Control.hc_num_out);
    
    phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8015c46:	683b      	ldr	r3, [r7, #0]
 8015c48:	220a      	movs	r2, #10
 8015c4a:	771a      	strb	r2, [r3, #28]
    break;
 8015c4c:	e045      	b.n	8015cda <USBH_HandleControl+0x33a>
    
  case CTRL_STATUS_OUT_WAIT: 
    
    URB_Status = HCD_GetURB_State(pdev , phost->Control.hc_num_out);  
 8015c4e:	683b      	ldr	r3, [r7, #0]
 8015c50:	795b      	ldrb	r3, [r3, #5]
 8015c52:	4619      	mov	r1, r3
 8015c54:	6878      	ldr	r0, [r7, #4]
 8015c56:	f7fe f94f 	bl	8013ef8 <HCD_GetURB_State>
 8015c5a:	4603      	mov	r3, r0
 8015c5c:	73bb      	strb	r3, [r7, #14]
    if  (URB_Status == URB_DONE)
 8015c5e:	7bbb      	ldrb	r3, [r7, #14]
 8015c60:	2b01      	cmp	r3, #1
 8015c62:	d107      	bne.n	8015c74 <USBH_HandleControl+0x2d4>
    { 
      phost->gState =   phost->gStateBkp; 
 8015c64:	683b      	ldr	r3, [r7, #0]
 8015c66:	785a      	ldrb	r2, [r3, #1]
 8015c68:	683b      	ldr	r3, [r7, #0]
 8015c6a:	701a      	strb	r2, [r3, #0]
      phost->Control.state = CTRL_COMPLETE; 
 8015c6c:	683b      	ldr	r3, [r7, #0]
 8015c6e:	220d      	movs	r2, #13
 8015c70:	771a      	strb	r2, [r3, #28]
    }      
    else if (URB_Status == URB_ERROR)
    {
      phost->Control.state = CTRL_ERROR;      
    }
    break;
 8015c72:	e031      	b.n	8015cd8 <USBH_HandleControl+0x338>
    else if  (URB_Status == URB_NOTREADY)
 8015c74:	7bbb      	ldrb	r3, [r7, #14]
 8015c76:	2b02      	cmp	r3, #2
 8015c78:	d103      	bne.n	8015c82 <USBH_HandleControl+0x2e2>
      phost->Control.state = CTRL_STATUS_OUT;
 8015c7a:	683b      	ldr	r3, [r7, #0]
 8015c7c:	2209      	movs	r2, #9
 8015c7e:	771a      	strb	r2, [r3, #28]
    break;
 8015c80:	e02a      	b.n	8015cd8 <USBH_HandleControl+0x338>
    else if (URB_Status == URB_ERROR)
 8015c82:	7bbb      	ldrb	r3, [r7, #14]
 8015c84:	2b03      	cmp	r3, #3
 8015c86:	d127      	bne.n	8015cd8 <USBH_HandleControl+0x338>
      phost->Control.state = CTRL_ERROR;      
 8015c88:	683b      	ldr	r3, [r7, #0]
 8015c8a:	220b      	movs	r2, #11
 8015c8c:	771a      	strb	r2, [r3, #28]
    break;
 8015c8e:	e023      	b.n	8015cd8 <USBH_HandleControl+0x338>
    PID; i.e., recovery actions via some other pipe are not required for control
    endpoints. For the Default Control Pipe, a device reset will ultimately be 
    required to clear the halt or error condition if the next Setup PID is not 
    accepted.
    */
    if (++ phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8015c90:	683b      	ldr	r3, [r7, #0]
 8015c92:	7b9b      	ldrb	r3, [r3, #14]
 8015c94:	3301      	adds	r3, #1
 8015c96:	b2da      	uxtb	r2, r3
 8015c98:	683b      	ldr	r3, [r7, #0]
 8015c9a:	739a      	strb	r2, [r3, #14]
 8015c9c:	683b      	ldr	r3, [r7, #0]
 8015c9e:	7b9b      	ldrb	r3, [r3, #14]
 8015ca0:	2b02      	cmp	r3, #2
 8015ca2:	d803      	bhi.n	8015cac <USBH_HandleControl+0x30c>
    {
      /* Do the transmission again, starting from SETUP Packet */
      phost->Control.state = CTRL_SETUP; 
 8015ca4:	683b      	ldr	r3, [r7, #0]
 8015ca6:	2201      	movs	r2, #1
 8015ca8:	771a      	strb	r2, [r3, #28]
      phost->Control.status = CTRL_FAIL;
      phost->gState =   phost->gStateBkp;
      
      status = USBH_FAIL;
    }
    break;
 8015caa:	e016      	b.n	8015cda <USBH_HandleControl+0x33a>
      phost->Control.status = CTRL_FAIL;
 8015cac:	683b      	ldr	r3, [r7, #0]
 8015cae:	2208      	movs	r2, #8
 8015cb0:	749a      	strb	r2, [r3, #18]
      phost->gState =   phost->gStateBkp;
 8015cb2:	683b      	ldr	r3, [r7, #0]
 8015cb4:	785a      	ldrb	r2, [r3, #1]
 8015cb6:	683b      	ldr	r3, [r7, #0]
 8015cb8:	701a      	strb	r2, [r3, #0]
      status = USBH_FAIL;
 8015cba:	2302      	movs	r3, #2
 8015cbc:	73fb      	strb	r3, [r7, #15]
    break;
 8015cbe:	e00c      	b.n	8015cda <USBH_HandleControl+0x33a>
    
  default:
    break;
 8015cc0:	bf00      	nop
 8015cc2:	e00a      	b.n	8015cda <USBH_HandleControl+0x33a>
    break;
 8015cc4:	bf00      	nop
 8015cc6:	e008      	b.n	8015cda <USBH_HandleControl+0x33a>
    break;
 8015cc8:	bf00      	nop
 8015cca:	e006      	b.n	8015cda <USBH_HandleControl+0x33a>
    break;
 8015ccc:	bf00      	nop
 8015cce:	e004      	b.n	8015cda <USBH_HandleControl+0x33a>
    break;
 8015cd0:	bf00      	nop
 8015cd2:	e002      	b.n	8015cda <USBH_HandleControl+0x33a>
 8015cd4:	20003466 	.word	0x20003466
    break;
 8015cd8:	bf00      	nop
  }
  return status;
 8015cda:	7bfb      	ldrb	r3, [r7, #15]
}
 8015cdc:	4618      	mov	r0, r3
 8015cde:	3710      	adds	r7, #16
 8015ce0:	46bd      	mov	sp, r7
 8015ce2:	bd80      	pop	{r7, pc}

08015ce4 <USBH_Open_Channel>:
                            uint8_t hc_num,
                            uint8_t dev_address,
                            uint8_t speed,
                            uint8_t ep_type,
                            uint16_t mps)
{
 8015ce4:	b580      	push	{r7, lr}
 8015ce6:	b082      	sub	sp, #8
 8015ce8:	af00      	add	r7, sp, #0
 8015cea:	6078      	str	r0, [r7, #4]
 8015cec:	4608      	mov	r0, r1
 8015cee:	4611      	mov	r1, r2
 8015cf0:	461a      	mov	r2, r3
 8015cf2:	4603      	mov	r3, r0
 8015cf4:	70fb      	strb	r3, [r7, #3]
 8015cf6:	460b      	mov	r3, r1
 8015cf8:	70bb      	strb	r3, [r7, #2]
 8015cfa:	4613      	mov	r3, r2
 8015cfc:	707b      	strb	r3, [r7, #1]

  pdev->host.hc[hc_num].ep_num = pdev->host.channel[hc_num]& 0x7F;
 8015cfe:	78fb      	ldrb	r3, [r7, #3]
 8015d00:	687a      	ldr	r2, [r7, #4]
 8015d02:	f503 7331 	add.w	r3, r3, #708	; 0x2c4
 8015d06:	005b      	lsls	r3, r3, #1
 8015d08:	4413      	add	r3, r2
 8015d0a:	889b      	ldrh	r3, [r3, #4]
 8015d0c:	b2da      	uxtb	r2, r3
 8015d0e:	78fb      	ldrb	r3, [r7, #3]
 8015d10:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8015d14:	b2d1      	uxtb	r1, r2
 8015d16:	687a      	ldr	r2, [r7, #4]
 8015d18:	015b      	lsls	r3, r3, #5
 8015d1a:	4413      	add	r3, r2
 8015d1c:	f203 33ad 	addw	r3, r3, #941	; 0x3ad
 8015d20:	460a      	mov	r2, r1
 8015d22:	701a      	strb	r2, [r3, #0]
  pdev->host.hc[hc_num].ep_is_in = (pdev->host.channel[hc_num] & 0x80 ) == 0x80;  
 8015d24:	78fb      	ldrb	r3, [r7, #3]
 8015d26:	687a      	ldr	r2, [r7, #4]
 8015d28:	f503 7331 	add.w	r3, r3, #708	; 0x2c4
 8015d2c:	005b      	lsls	r3, r3, #1
 8015d2e:	4413      	add	r3, r2
 8015d30:	889b      	ldrh	r3, [r3, #4]
 8015d32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8015d36:	2b00      	cmp	r3, #0
 8015d38:	bf14      	ite	ne
 8015d3a:	2301      	movne	r3, #1
 8015d3c:	2300      	moveq	r3, #0
 8015d3e:	b2da      	uxtb	r2, r3
 8015d40:	78fb      	ldrb	r3, [r7, #3]
 8015d42:	4611      	mov	r1, r2
 8015d44:	687a      	ldr	r2, [r7, #4]
 8015d46:	015b      	lsls	r3, r3, #5
 8015d48:	4413      	add	r3, r2
 8015d4a:	f203 33ae 	addw	r3, r3, #942	; 0x3ae
 8015d4e:	460a      	mov	r2, r1
 8015d50:	701a      	strb	r2, [r3, #0]
  pdev->host.hc[hc_num].dev_addr = dev_address;  
 8015d52:	78fb      	ldrb	r3, [r7, #3]
 8015d54:	687a      	ldr	r2, [r7, #4]
 8015d56:	015b      	lsls	r3, r3, #5
 8015d58:	4413      	add	r3, r2
 8015d5a:	f503 736b 	add.w	r3, r3, #940	; 0x3ac
 8015d5e:	78ba      	ldrb	r2, [r7, #2]
 8015d60:	701a      	strb	r2, [r3, #0]
  pdev->host.hc[hc_num].ep_type = ep_type;  
 8015d62:	78fb      	ldrb	r3, [r7, #3]
 8015d64:	687a      	ldr	r2, [r7, #4]
 8015d66:	015b      	lsls	r3, r3, #5
 8015d68:	4413      	add	r3, r2
 8015d6a:	f203 33b1 	addw	r3, r3, #945	; 0x3b1
 8015d6e:	7c3a      	ldrb	r2, [r7, #16]
 8015d70:	701a      	strb	r2, [r3, #0]
  pdev->host.hc[hc_num].max_packet = mps; 
 8015d72:	78fb      	ldrb	r3, [r7, #3]
 8015d74:	687a      	ldr	r2, [r7, #4]
 8015d76:	015b      	lsls	r3, r3, #5
 8015d78:	4413      	add	r3, r2
 8015d7a:	f203 33b2 	addw	r3, r3, #946	; 0x3b2
 8015d7e:	8aba      	ldrh	r2, [r7, #20]
 8015d80:	801a      	strh	r2, [r3, #0]
  pdev->host.hc[hc_num].speed = speed; 
 8015d82:	78fb      	ldrb	r3, [r7, #3]
 8015d84:	687a      	ldr	r2, [r7, #4]
 8015d86:	015b      	lsls	r3, r3, #5
 8015d88:	4413      	add	r3, r2
 8015d8a:	f203 33af 	addw	r3, r3, #943	; 0x3af
 8015d8e:	787a      	ldrb	r2, [r7, #1]
 8015d90:	701a      	strb	r2, [r3, #0]
  pdev->host.hc[hc_num].toggle_in = 0; 
 8015d92:	78fb      	ldrb	r3, [r7, #3]
 8015d94:	687a      	ldr	r2, [r7, #4]
 8015d96:	331e      	adds	r3, #30
 8015d98:	015b      	lsls	r3, r3, #5
 8015d9a:	4413      	add	r3, r2
 8015d9c:	3304      	adds	r3, #4
 8015d9e:	2200      	movs	r2, #0
 8015da0:	701a      	strb	r2, [r3, #0]
  pdev->host.hc[hc_num].toggle_out = 0;   
 8015da2:	78fb      	ldrb	r3, [r7, #3]
 8015da4:	687a      	ldr	r2, [r7, #4]
 8015da6:	331e      	adds	r3, #30
 8015da8:	015b      	lsls	r3, r3, #5
 8015daa:	4413      	add	r3, r2
 8015dac:	3305      	adds	r3, #5
 8015dae:	2200      	movs	r2, #0
 8015db0:	701a      	strb	r2, [r3, #0]
  if(speed == HPRT0_PRTSPD_HIGH_SPEED)
 8015db2:	787b      	ldrb	r3, [r7, #1]
 8015db4:	2b00      	cmp	r3, #0
 8015db6:	d107      	bne.n	8015dc8 <USBH_Open_Channel+0xe4>
  {
    pdev->host.hc[hc_num].do_ping = 1;
 8015db8:	78fb      	ldrb	r3, [r7, #3]
 8015dba:	687a      	ldr	r2, [r7, #4]
 8015dbc:	015b      	lsls	r3, r3, #5
 8015dbe:	4413      	add	r3, r2
 8015dc0:	f503 736c 	add.w	r3, r3, #944	; 0x3b0
 8015dc4:	2201      	movs	r2, #1
 8015dc6:	701a      	strb	r2, [r3, #0]
  }
  
  USB_OTG_HC_Init(pdev, hc_num) ;
 8015dc8:	78fb      	ldrb	r3, [r7, #3]
 8015dca:	4619      	mov	r1, r3
 8015dcc:	6878      	ldr	r0, [r7, #4]
 8015dce:	f7fd fc9c 	bl	801370a <USB_OTG_HC_Init>
  
  return HC_OK; 
 8015dd2:	2300      	movs	r3, #0

}
 8015dd4:	4618      	mov	r0, r3
 8015dd6:	3708      	adds	r7, #8
 8015dd8:	46bd      	mov	sp, r7
 8015dda:	bd80      	pop	{r7, pc}

08015ddc <USBH_Modify_Channel>:
                            uint8_t hc_num,
                            uint8_t dev_address,
                            uint8_t speed,
                            uint8_t ep_type,
                            uint16_t mps)
{
 8015ddc:	b580      	push	{r7, lr}
 8015dde:	b082      	sub	sp, #8
 8015de0:	af00      	add	r7, sp, #0
 8015de2:	6078      	str	r0, [r7, #4]
 8015de4:	4608      	mov	r0, r1
 8015de6:	4611      	mov	r1, r2
 8015de8:	461a      	mov	r2, r3
 8015dea:	4603      	mov	r3, r0
 8015dec:	70fb      	strb	r3, [r7, #3]
 8015dee:	460b      	mov	r3, r1
 8015df0:	70bb      	strb	r3, [r7, #2]
 8015df2:	4613      	mov	r3, r2
 8015df4:	707b      	strb	r3, [r7, #1]
  
  if(dev_address != 0)
 8015df6:	78bb      	ldrb	r3, [r7, #2]
 8015df8:	2b00      	cmp	r3, #0
 8015dfa:	d007      	beq.n	8015e0c <USBH_Modify_Channel+0x30>
  {
    pdev->host.hc[hc_num].dev_addr = dev_address;  
 8015dfc:	78fb      	ldrb	r3, [r7, #3]
 8015dfe:	687a      	ldr	r2, [r7, #4]
 8015e00:	015b      	lsls	r3, r3, #5
 8015e02:	4413      	add	r3, r2
 8015e04:	f503 736b 	add.w	r3, r3, #940	; 0x3ac
 8015e08:	78ba      	ldrb	r2, [r7, #2]
 8015e0a:	701a      	strb	r2, [r3, #0]
  }
  
  if((pdev->host.hc[hc_num].max_packet != mps) && (mps != 0))
 8015e0c:	78fb      	ldrb	r3, [r7, #3]
 8015e0e:	687a      	ldr	r2, [r7, #4]
 8015e10:	015b      	lsls	r3, r3, #5
 8015e12:	4413      	add	r3, r2
 8015e14:	f203 33b2 	addw	r3, r3, #946	; 0x3b2
 8015e18:	881b      	ldrh	r3, [r3, #0]
 8015e1a:	8aba      	ldrh	r2, [r7, #20]
 8015e1c:	429a      	cmp	r2, r3
 8015e1e:	d00a      	beq.n	8015e36 <USBH_Modify_Channel+0x5a>
 8015e20:	8abb      	ldrh	r3, [r7, #20]
 8015e22:	2b00      	cmp	r3, #0
 8015e24:	d007      	beq.n	8015e36 <USBH_Modify_Channel+0x5a>
  {
    pdev->host.hc[hc_num].max_packet = mps; 
 8015e26:	78fb      	ldrb	r3, [r7, #3]
 8015e28:	687a      	ldr	r2, [r7, #4]
 8015e2a:	015b      	lsls	r3, r3, #5
 8015e2c:	4413      	add	r3, r2
 8015e2e:	f203 33b2 	addw	r3, r3, #946	; 0x3b2
 8015e32:	8aba      	ldrh	r2, [r7, #20]
 8015e34:	801a      	strh	r2, [r3, #0]
  }
  
  if((pdev->host.hc[hc_num].speed != speed ) && (speed != 0 )) 
 8015e36:	78fb      	ldrb	r3, [r7, #3]
 8015e38:	687a      	ldr	r2, [r7, #4]
 8015e3a:	015b      	lsls	r3, r3, #5
 8015e3c:	4413      	add	r3, r2
 8015e3e:	f203 33af 	addw	r3, r3, #943	; 0x3af
 8015e42:	781b      	ldrb	r3, [r3, #0]
 8015e44:	787a      	ldrb	r2, [r7, #1]
 8015e46:	429a      	cmp	r2, r3
 8015e48:	d00a      	beq.n	8015e60 <USBH_Modify_Channel+0x84>
 8015e4a:	787b      	ldrb	r3, [r7, #1]
 8015e4c:	2b00      	cmp	r3, #0
 8015e4e:	d007      	beq.n	8015e60 <USBH_Modify_Channel+0x84>
  {
    pdev->host.hc[hc_num].speed = speed; 
 8015e50:	78fb      	ldrb	r3, [r7, #3]
 8015e52:	687a      	ldr	r2, [r7, #4]
 8015e54:	015b      	lsls	r3, r3, #5
 8015e56:	4413      	add	r3, r2
 8015e58:	f203 33af 	addw	r3, r3, #943	; 0x3af
 8015e5c:	787a      	ldrb	r2, [r7, #1]
 8015e5e:	701a      	strb	r2, [r3, #0]
  }
  
  USB_OTG_HC_Init(pdev, hc_num);
 8015e60:	78fb      	ldrb	r3, [r7, #3]
 8015e62:	4619      	mov	r1, r3
 8015e64:	6878      	ldr	r0, [r7, #4]
 8015e66:	f7fd fc50 	bl	801370a <USB_OTG_HC_Init>
  return HC_OK; 
 8015e6a:	2300      	movs	r3, #0

}
 8015e6c:	4618      	mov	r0, r3
 8015e6e:	3708      	adds	r7, #8
 8015e70:	46bd      	mov	sp, r7
 8015e72:	bd80      	pop	{r7, pc}

08015e74 <USBH_Alloc_Channel>:
  *         Allocate a new channel for the pipe
  * @param  ep_addr: End point for which the channel to be allocated
  * @retval hc_num: Host channel number
  */
uint8_t USBH_Alloc_Channel  (USB_OTG_CORE_HANDLE *pdev, uint8_t ep_addr)
{
 8015e74:	b580      	push	{r7, lr}
 8015e76:	b084      	sub	sp, #16
 8015e78:	af00      	add	r7, sp, #0
 8015e7a:	6078      	str	r0, [r7, #4]
 8015e7c:	460b      	mov	r3, r1
 8015e7e:	70fb      	strb	r3, [r7, #3]
  uint16_t hc_num;
  
  hc_num =  USBH_GetFreeChannel(pdev);
 8015e80:	6878      	ldr	r0, [r7, #4]
 8015e82:	f000 f85b 	bl	8015f3c <USBH_GetFreeChannel>
 8015e86:	4603      	mov	r3, r0
 8015e88:	81fb      	strh	r3, [r7, #14]

  if (hc_num != HC_ERROR)
 8015e8a:	89fb      	ldrh	r3, [r7, #14]
 8015e8c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015e90:	4293      	cmp	r3, r2
 8015e92:	d00f      	beq.n	8015eb4 <USBH_Alloc_Channel+0x40>
  {
	pdev->host.channel[hc_num] = HC_USED | ep_addr;
 8015e94:	78fb      	ldrb	r3, [r7, #3]
 8015e96:	b21b      	sxth	r3, r3
 8015e98:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8015e9c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8015ea0:	b21a      	sxth	r2, r3
 8015ea2:	89fb      	ldrh	r3, [r7, #14]
 8015ea4:	b291      	uxth	r1, r2
 8015ea6:	687a      	ldr	r2, [r7, #4]
 8015ea8:	f503 7331 	add.w	r3, r3, #708	; 0x2c4
 8015eac:	005b      	lsls	r3, r3, #1
 8015eae:	4413      	add	r3, r2
 8015eb0:	460a      	mov	r2, r1
 8015eb2:	809a      	strh	r2, [r3, #4]
  }
  return hc_num;
 8015eb4:	89fb      	ldrh	r3, [r7, #14]
 8015eb6:	b2db      	uxtb	r3, r3
}
 8015eb8:	4618      	mov	r0, r3
 8015eba:	3710      	adds	r7, #16
 8015ebc:	46bd      	mov	sp, r7
 8015ebe:	bd80      	pop	{r7, pc}

08015ec0 <USBH_Free_Channel>:
  *         Free the USB host channel
  * @param  idx: Channel number to be freed 
  * @retval Status
  */
uint8_t USBH_Free_Channel  (USB_OTG_CORE_HANDLE *pdev, uint8_t idx)
{
 8015ec0:	b480      	push	{r7}
 8015ec2:	b083      	sub	sp, #12
 8015ec4:	af00      	add	r7, sp, #0
 8015ec6:	6078      	str	r0, [r7, #4]
 8015ec8:	460b      	mov	r3, r1
 8015eca:	70fb      	strb	r3, [r7, #3]
   if(idx < HC_MAX)
 8015ecc:	78fb      	ldrb	r3, [r7, #3]
 8015ece:	2b07      	cmp	r3, #7
 8015ed0:	d811      	bhi.n	8015ef6 <USBH_Free_Channel+0x36>
   {
	 pdev->host.channel[idx] &= HC_USED_MASK;
 8015ed2:	78fb      	ldrb	r3, [r7, #3]
 8015ed4:	687a      	ldr	r2, [r7, #4]
 8015ed6:	f503 7331 	add.w	r3, r3, #708	; 0x2c4
 8015eda:	005b      	lsls	r3, r3, #1
 8015edc:	4413      	add	r3, r2
 8015ede:	889a      	ldrh	r2, [r3, #4]
 8015ee0:	78fb      	ldrb	r3, [r7, #3]
 8015ee2:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8015ee6:	b291      	uxth	r1, r2
 8015ee8:	687a      	ldr	r2, [r7, #4]
 8015eea:	f503 7331 	add.w	r3, r3, #708	; 0x2c4
 8015eee:	005b      	lsls	r3, r3, #1
 8015ef0:	4413      	add	r3, r2
 8015ef2:	460a      	mov	r2, r1
 8015ef4:	809a      	strh	r2, [r3, #4]
   }
   return USBH_OK;
 8015ef6:	2300      	movs	r3, #0
}
 8015ef8:	4618      	mov	r0, r3
 8015efa:	370c      	adds	r7, #12
 8015efc:	46bd      	mov	sp, r7
 8015efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f02:	4770      	bx	lr

08015f04 <USBH_DeAllocate_AllChannel>:
  *         Free all USB host channel
* @param  pdev : core instance
  * @retval Status
  */
uint8_t USBH_DeAllocate_AllChannel  (USB_OTG_CORE_HANDLE *pdev)
{
 8015f04:	b480      	push	{r7}
 8015f06:	b085      	sub	sp, #20
 8015f08:	af00      	add	r7, sp, #0
 8015f0a:	6078      	str	r0, [r7, #4]
   uint8_t idx;
   
   for (idx = 2; idx < HC_MAX ; idx ++)
 8015f0c:	2302      	movs	r3, #2
 8015f0e:	73fb      	strb	r3, [r7, #15]
 8015f10:	e00a      	b.n	8015f28 <USBH_DeAllocate_AllChannel+0x24>
   {
	 pdev->host.channel[idx] = 0;
 8015f12:	7bfb      	ldrb	r3, [r7, #15]
 8015f14:	687a      	ldr	r2, [r7, #4]
 8015f16:	f503 7331 	add.w	r3, r3, #708	; 0x2c4
 8015f1a:	005b      	lsls	r3, r3, #1
 8015f1c:	4413      	add	r3, r2
 8015f1e:	2200      	movs	r2, #0
 8015f20:	809a      	strh	r2, [r3, #4]
   for (idx = 2; idx < HC_MAX ; idx ++)
 8015f22:	7bfb      	ldrb	r3, [r7, #15]
 8015f24:	3301      	adds	r3, #1
 8015f26:	73fb      	strb	r3, [r7, #15]
 8015f28:	7bfb      	ldrb	r3, [r7, #15]
 8015f2a:	2b07      	cmp	r3, #7
 8015f2c:	d9f1      	bls.n	8015f12 <USBH_DeAllocate_AllChannel+0xe>
   }
   return USBH_OK;
 8015f2e:	2300      	movs	r3, #0
}
 8015f30:	4618      	mov	r0, r3
 8015f32:	3714      	adds	r7, #20
 8015f34:	46bd      	mov	sp, r7
 8015f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f3a:	4770      	bx	lr

08015f3c <USBH_GetFreeChannel>:
  *         Get a free channel number for allocation to a device endpoint
  * @param  None
  * @retval idx: Free Channel number
  */
static uint16_t USBH_GetFreeChannel (USB_OTG_CORE_HANDLE *pdev)
{
 8015f3c:	b480      	push	{r7}
 8015f3e:	b085      	sub	sp, #20
 8015f40:	af00      	add	r7, sp, #0
 8015f42:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0;
 8015f44:	2300      	movs	r3, #0
 8015f46:	73fb      	strb	r3, [r7, #15]
  
  for (idx = 0 ; idx < HC_MAX ; idx++)
 8015f48:	2300      	movs	r3, #0
 8015f4a:	73fb      	strb	r3, [r7, #15]
 8015f4c:	e00f      	b.n	8015f6e <USBH_GetFreeChannel+0x32>
  {
	if ((pdev->host.channel[idx] & HC_USED) == 0)
 8015f4e:	7bfb      	ldrb	r3, [r7, #15]
 8015f50:	687a      	ldr	r2, [r7, #4]
 8015f52:	f503 7331 	add.w	r3, r3, #708	; 0x2c4
 8015f56:	005b      	lsls	r3, r3, #1
 8015f58:	4413      	add	r3, r2
 8015f5a:	889b      	ldrh	r3, [r3, #4]
 8015f5c:	b21b      	sxth	r3, r3
 8015f5e:	2b00      	cmp	r3, #0
 8015f60:	db02      	blt.n	8015f68 <USBH_GetFreeChannel+0x2c>
	{
	   return idx;
 8015f62:	7bfb      	ldrb	r3, [r7, #15]
 8015f64:	b29b      	uxth	r3, r3
 8015f66:	e007      	b.n	8015f78 <USBH_GetFreeChannel+0x3c>
  for (idx = 0 ; idx < HC_MAX ; idx++)
 8015f68:	7bfb      	ldrb	r3, [r7, #15]
 8015f6a:	3301      	adds	r3, #1
 8015f6c:	73fb      	strb	r3, [r7, #15]
 8015f6e:	7bfb      	ldrb	r3, [r7, #15]
 8015f70:	2b07      	cmp	r3, #7
 8015f72:	d9ec      	bls.n	8015f4e <USBH_GetFreeChannel+0x12>
	} 
  }
  return HC_ERROR;
 8015f74:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8015f78:	4618      	mov	r0, r3
 8015f7a:	3714      	adds	r7, #20
 8015f7c:	46bd      	mov	sp, r7
 8015f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f82:	4770      	bx	lr

08015f84 <USBH_HID_InterfaceInit>:
* @param  hdev: Selected device property
* @retval  USBH_Status :Response for USB HID driver intialization
*/
static USBH_Status USBH_HID_InterfaceInit ( USB_OTG_CORE_HANDLE *pdev, 
                                           void *phost)
{	
 8015f84:	b580      	push	{r7, lr}
 8015f86:	b088      	sub	sp, #32
 8015f88:	af02      	add	r7, sp, #8
 8015f8a:	6078      	str	r0, [r7, #4]
 8015f8c:	6039      	str	r1, [r7, #0]
  uint8_t maxEP;
  USBH_HOST *pphost = phost;
 8015f8e:	683b      	ldr	r3, [r7, #0]
 8015f90:	613b      	str	r3, [r7, #16]
    
  uint8_t num =0;
 8015f92:	2300      	movs	r3, #0
 8015f94:	75fb      	strb	r3, [r7, #23]
  USBH_Status status = USBH_BUSY ;
 8015f96:	2301      	movs	r3, #1
 8015f98:	75bb      	strb	r3, [r7, #22]
  HID_Machine.state = HID_ERROR;
 8015f9a:	4b60      	ldr	r3, [pc, #384]	; (801611c <USBH_HID_InterfaceInit+0x198>)
 8015f9c:	2206      	movs	r2, #6
 8015f9e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  
  
  if(pphost->device_prop.Itf_Desc[0].bInterfaceSubClass  == HID_BOOT_CODE)
 8015fa2:	693b      	ldr	r3, [r7, #16]
 8015fa4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8015fa8:	2b01      	cmp	r3, #1
 8015faa:	f040 80ac 	bne.w	8016106 <USBH_HID_InterfaceInit+0x182>
  {
    /*Decode Bootclass Protocl: Mouse or Keyboard*/
    if(pphost->device_prop.Itf_Desc[0].bInterfaceProtocol == HID_KEYBRD_BOOT_CODE)
 8015fae:	693b      	ldr	r3, [r7, #16]
 8015fb0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8015fb4:	2b01      	cmp	r3, #1
 8015fb6:	d103      	bne.n	8015fc0 <USBH_HID_InterfaceInit+0x3c>
    {
      HID_Machine.cb = &HID_KEYBRD_cb;
 8015fb8:	4b58      	ldr	r3, [pc, #352]	; (801611c <USBH_HID_InterfaceInit+0x198>)
 8015fba:	4a59      	ldr	r2, [pc, #356]	; (8016120 <USBH_HID_InterfaceInit+0x19c>)
 8015fbc:	651a      	str	r2, [r3, #80]	; 0x50
 8015fbe:	e007      	b.n	8015fd0 <USBH_HID_InterfaceInit+0x4c>
    }
    else if(pphost->device_prop.Itf_Desc[0].bInterfaceProtocol  == HID_MOUSE_BOOT_CODE)		  
 8015fc0:	693b      	ldr	r3, [r7, #16]
 8015fc2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8015fc6:	2b02      	cmp	r3, #2
 8015fc8:	d102      	bne.n	8015fd0 <USBH_HID_InterfaceInit+0x4c>
    {
      HID_Machine.cb = &HID_MOUSE_cb;
 8015fca:	4b54      	ldr	r3, [pc, #336]	; (801611c <USBH_HID_InterfaceInit+0x198>)
 8015fcc:	4a55      	ldr	r2, [pc, #340]	; (8016124 <USBH_HID_InterfaceInit+0x1a0>)
 8015fce:	651a      	str	r2, [r3, #80]	; 0x50
    }
    
    HID_Machine.state     = HID_IDLE;
 8015fd0:	4b52      	ldr	r3, [pc, #328]	; (801611c <USBH_HID_InterfaceInit+0x198>)
 8015fd2:	2200      	movs	r2, #0
 8015fd4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    HID_Machine.ctl_state = HID_REQ_IDLE; 
 8015fd8:	4b50      	ldr	r3, [pc, #320]	; (801611c <USBH_HID_InterfaceInit+0x198>)
 8015fda:	2200      	movs	r2, #0
 8015fdc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    HID_Machine.ep_addr   = pphost->device_prop.Ep_Desc[0][0].bEndpointAddress;
 8015fe0:	693b      	ldr	r3, [r7, #16]
 8015fe2:	f893 2052 	ldrb.w	r2, [r3, #82]	; 0x52
 8015fe6:	4b4d      	ldr	r3, [pc, #308]	; (801611c <USBH_HID_InterfaceInit+0x198>)
 8015fe8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    HID_Machine.length    = pphost->device_prop.Ep_Desc[0][0].wMaxPacketSize;
 8015fec:	693b      	ldr	r3, [r7, #16]
 8015fee:	f8b3 2054 	ldrh.w	r2, [r3, #84]	; 0x54
 8015ff2:	4b4a      	ldr	r3, [pc, #296]	; (801611c <USBH_HID_InterfaceInit+0x198>)
 8015ff4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    HID_Machine.poll      = pphost->device_prop.Ep_Desc[0][0].bInterval ;
 8015ff8:	693b      	ldr	r3, [r7, #16]
 8015ffa:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8015ffe:	b29a      	uxth	r2, r3
 8016000:	4b46      	ldr	r3, [pc, #280]	; (801611c <USBH_HID_InterfaceInit+0x198>)
 8016002:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    
    if (HID_Machine.poll  < HID_MIN_POLL) 
 8016006:	4b45      	ldr	r3, [pc, #276]	; (801611c <USBH_HID_InterfaceInit+0x198>)
 8016008:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 801600c:	2b09      	cmp	r3, #9
 801600e:	d803      	bhi.n	8016018 <USBH_HID_InterfaceInit+0x94>
    {
       HID_Machine.poll = HID_MIN_POLL;
 8016010:	4b42      	ldr	r3, [pc, #264]	; (801611c <USBH_HID_InterfaceInit+0x198>)
 8016012:	220a      	movs	r2, #10
 8016014:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

    
    /* Check fo available number of endpoints */
    /* Find the number of EPs in the Interface Descriptor */      
    /* Choose the lower number in order not to overrun the buffer allocated */
    maxEP = ( (pphost->device_prop.Itf_Desc[0].bNumEndpoints <= USBH_MAX_NUM_ENDPOINTS) ? 
 8016018:	693b      	ldr	r3, [r7, #16]
 801601a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801601e:	2b02      	cmp	r3, #2
 8016020:	bf28      	it	cs
 8016022:	2302      	movcs	r3, #2
 8016024:	73fb      	strb	r3, [r7, #15]
             pphost->device_prop.Itf_Desc[0].bNumEndpoints :
                 USBH_MAX_NUM_ENDPOINTS); 
    
    
    /* Decode endpoint IN and OUT address from interface descriptor */
    for (num=0; num < maxEP; num++)
 8016026:	2300      	movs	r3, #0
 8016028:	75fb      	strb	r3, [r7, #23]
 801602a:	e062      	b.n	80160f2 <USBH_HID_InterfaceInit+0x16e>
    {
      if(pphost->device_prop.Ep_Desc[0][num].bEndpointAddress & 0x80)
 801602c:	7dfb      	ldrb	r3, [r7, #23]
 801602e:	693a      	ldr	r2, [r7, #16]
 8016030:	330a      	adds	r3, #10
 8016032:	00db      	lsls	r3, r3, #3
 8016034:	4413      	add	r3, r2
 8016036:	789b      	ldrb	r3, [r3, #2]
 8016038:	b25b      	sxtb	r3, r3
 801603a:	2b00      	cmp	r3, #0
 801603c:	da2b      	bge.n	8016096 <USBH_HID_InterfaceInit+0x112>
      {
        HID_Machine.HIDIntInEp = (pphost->device_prop.Ep_Desc[0][num].bEndpointAddress);
 801603e:	7dfb      	ldrb	r3, [r7, #23]
 8016040:	693a      	ldr	r2, [r7, #16]
 8016042:	330a      	adds	r3, #10
 8016044:	00db      	lsls	r3, r3, #3
 8016046:	4413      	add	r3, r2
 8016048:	789a      	ldrb	r2, [r3, #2]
 801604a:	4b34      	ldr	r3, [pc, #208]	; (801611c <USBH_HID_InterfaceInit+0x198>)
 801604c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        HID_Machine.hc_num_in  =\
               USBH_Alloc_Channel(pdev, 
 8016050:	7dfb      	ldrb	r3, [r7, #23]
 8016052:	693a      	ldr	r2, [r7, #16]
 8016054:	330a      	adds	r3, #10
 8016056:	00db      	lsls	r3, r3, #3
 8016058:	4413      	add	r3, r2
 801605a:	789b      	ldrb	r3, [r3, #2]
 801605c:	4619      	mov	r1, r3
 801605e:	6878      	ldr	r0, [r7, #4]
 8016060:	f7ff ff08 	bl	8015e74 <USBH_Alloc_Channel>
 8016064:	4603      	mov	r3, r0
 8016066:	461a      	mov	r2, r3
        HID_Machine.hc_num_in  =\
 8016068:	4b2c      	ldr	r3, [pc, #176]	; (801611c <USBH_HID_InterfaceInit+0x198>)
 801606a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
                                  pphost->device_prop.Ep_Desc[0][num].bEndpointAddress);
        
        /* Open channel for IN endpoint */
        USBH_Open_Channel  (pdev,
 801606e:	4b2b      	ldr	r3, [pc, #172]	; (801611c <USBH_HID_InterfaceInit+0x198>)
 8016070:	f893 1040 	ldrb.w	r1, [r3, #64]	; 0x40
 8016074:	693b      	ldr	r3, [r7, #16]
 8016076:	f893 2020 	ldrb.w	r2, [r3, #32]
 801607a:	693b      	ldr	r3, [r7, #16]
 801607c:	f893 0021 	ldrb.w	r0, [r3, #33]	; 0x21
 8016080:	4b26      	ldr	r3, [pc, #152]	; (801611c <USBH_HID_InterfaceInit+0x198>)
 8016082:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8016086:	9301      	str	r3, [sp, #4]
 8016088:	2303      	movs	r3, #3
 801608a:	9300      	str	r3, [sp, #0]
 801608c:	4603      	mov	r3, r0
 801608e:	6878      	ldr	r0, [r7, #4]
 8016090:	f7ff fe28 	bl	8015ce4 <USBH_Open_Channel>
 8016094:	e02a      	b.n	80160ec <USBH_HID_InterfaceInit+0x168>
                            EP_TYPE_INTR,
                            HID_Machine.length); 
      }
      else
      {
        HID_Machine.HIDIntOutEp = (pphost->device_prop.Ep_Desc[0][num].bEndpointAddress);
 8016096:	7dfb      	ldrb	r3, [r7, #23]
 8016098:	693a      	ldr	r2, [r7, #16]
 801609a:	330a      	adds	r3, #10
 801609c:	00db      	lsls	r3, r3, #3
 801609e:	4413      	add	r3, r2
 80160a0:	789a      	ldrb	r2, [r3, #2]
 80160a2:	4b1e      	ldr	r3, [pc, #120]	; (801611c <USBH_HID_InterfaceInit+0x198>)
 80160a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
        HID_Machine.hc_num_out  =\
                USBH_Alloc_Channel(pdev, 
 80160a8:	7dfb      	ldrb	r3, [r7, #23]
 80160aa:	693a      	ldr	r2, [r7, #16]
 80160ac:	330a      	adds	r3, #10
 80160ae:	00db      	lsls	r3, r3, #3
 80160b0:	4413      	add	r3, r2
 80160b2:	789b      	ldrb	r3, [r3, #2]
 80160b4:	4619      	mov	r1, r3
 80160b6:	6878      	ldr	r0, [r7, #4]
 80160b8:	f7ff fedc 	bl	8015e74 <USBH_Alloc_Channel>
 80160bc:	4603      	mov	r3, r0
 80160be:	461a      	mov	r2, r3
        HID_Machine.hc_num_out  =\
 80160c0:	4b16      	ldr	r3, [pc, #88]	; (801611c <USBH_HID_InterfaceInit+0x198>)
 80160c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
                                   pphost->device_prop.Ep_Desc[0][num].bEndpointAddress);
        
        /* Open channel for OUT endpoint */
        USBH_Open_Channel  (pdev,
 80160c6:	4b15      	ldr	r3, [pc, #84]	; (801611c <USBH_HID_InterfaceInit+0x198>)
 80160c8:	f893 1041 	ldrb.w	r1, [r3, #65]	; 0x41
 80160cc:	693b      	ldr	r3, [r7, #16]
 80160ce:	f893 2020 	ldrb.w	r2, [r3, #32]
 80160d2:	693b      	ldr	r3, [r7, #16]
 80160d4:	f893 0021 	ldrb.w	r0, [r3, #33]	; 0x21
 80160d8:	4b10      	ldr	r3, [pc, #64]	; (801611c <USBH_HID_InterfaceInit+0x198>)
 80160da:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80160de:	9301      	str	r3, [sp, #4]
 80160e0:	2303      	movs	r3, #3
 80160e2:	9300      	str	r3, [sp, #0]
 80160e4:	4603      	mov	r3, r0
 80160e6:	6878      	ldr	r0, [r7, #4]
 80160e8:	f7ff fdfc 	bl	8015ce4 <USBH_Open_Channel>
    for (num=0; num < maxEP; num++)
 80160ec:	7dfb      	ldrb	r3, [r7, #23]
 80160ee:	3301      	adds	r3, #1
 80160f0:	75fb      	strb	r3, [r7, #23]
 80160f2:	7dfa      	ldrb	r2, [r7, #23]
 80160f4:	7bfb      	ldrb	r3, [r7, #15]
 80160f6:	429a      	cmp	r2, r3
 80160f8:	d398      	bcc.n	801602c <USBH_HID_InterfaceInit+0xa8>
                            HID_Machine.length); 
      }
      
    }   
    
     start_toggle =0;
 80160fa:	4b0b      	ldr	r3, [pc, #44]	; (8016128 <USBH_HID_InterfaceInit+0x1a4>)
 80160fc:	2200      	movs	r2, #0
 80160fe:	701a      	strb	r2, [r3, #0]
     status = USBH_OK; 
 8016100:	2300      	movs	r3, #0
 8016102:	75bb      	strb	r3, [r7, #22]
 8016104:	e004      	b.n	8016110 <USBH_HID_InterfaceInit+0x18c>
  }
  else
  {
    pphost->usr_cb->DeviceNotSupported();   
 8016106:	693b      	ldr	r3, [r7, #16]
 8016108:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801610c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801610e:	4798      	blx	r3
  }
  
  return status;
 8016110:	7dbb      	ldrb	r3, [r7, #22]
  
}
 8016112:	4618      	mov	r0, r3
 8016114:	3718      	adds	r7, #24
 8016116:	46bd      	mov	sp, r7
 8016118:	bd80      	pop	{r7, pc}
 801611a:	bf00      	nop
 801611c:	20003468 	.word	0x20003468
 8016120:	200000f4 	.word	0x200000f4
 8016124:	200000fc 	.word	0x200000fc
 8016128:	20003516 	.word	0x20003516

0801612c <USBH_HID_InterfaceDeInit>:
* @param  hdev: Selected device property
* @retval None
*/
void USBH_HID_InterfaceDeInit ( USB_OTG_CORE_HANDLE *pdev,
                               void *phost)
{	
 801612c:	b580      	push	{r7, lr}
 801612e:	b082      	sub	sp, #8
 8016130:	af00      	add	r7, sp, #0
 8016132:	6078      	str	r0, [r7, #4]
 8016134:	6039      	str	r1, [r7, #0]
   //USBH_HOST *pphost = phost;
    
  if(HID_Machine.hc_num_in != 0x00)
 8016136:	4b1a      	ldr	r3, [pc, #104]	; (80161a0 <USBH_HID_InterfaceDeInit+0x74>)
 8016138:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801613c:	2b00      	cmp	r3, #0
 801613e:	d011      	beq.n	8016164 <USBH_HID_InterfaceDeInit+0x38>
  {   
    USB_OTG_HC_Halt(pdev, HID_Machine.hc_num_in);
 8016140:	4b17      	ldr	r3, [pc, #92]	; (80161a0 <USBH_HID_InterfaceDeInit+0x74>)
 8016142:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8016146:	4619      	mov	r1, r3
 8016148:	6878      	ldr	r0, [r7, #4]
 801614a:	f7fd fd8a 	bl	8013c62 <USB_OTG_HC_Halt>
    USBH_Free_Channel  (pdev, HID_Machine.hc_num_in);
 801614e:	4b14      	ldr	r3, [pc, #80]	; (80161a0 <USBH_HID_InterfaceDeInit+0x74>)
 8016150:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8016154:	4619      	mov	r1, r3
 8016156:	6878      	ldr	r0, [r7, #4]
 8016158:	f7ff feb2 	bl	8015ec0 <USBH_Free_Channel>
    HID_Machine.hc_num_in = 0;     /* Reset the Channel as Free */  
 801615c:	4b10      	ldr	r3, [pc, #64]	; (80161a0 <USBH_HID_InterfaceDeInit+0x74>)
 801615e:	2200      	movs	r2, #0
 8016160:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }
  
  if(HID_Machine.hc_num_out != 0x00)
 8016164:	4b0e      	ldr	r3, [pc, #56]	; (80161a0 <USBH_HID_InterfaceDeInit+0x74>)
 8016166:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801616a:	2b00      	cmp	r3, #0
 801616c:	d011      	beq.n	8016192 <USBH_HID_InterfaceDeInit+0x66>
  {   
    USB_OTG_HC_Halt(pdev, HID_Machine.hc_num_out);
 801616e:	4b0c      	ldr	r3, [pc, #48]	; (80161a0 <USBH_HID_InterfaceDeInit+0x74>)
 8016170:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8016174:	4619      	mov	r1, r3
 8016176:	6878      	ldr	r0, [r7, #4]
 8016178:	f7fd fd73 	bl	8013c62 <USB_OTG_HC_Halt>
    USBH_Free_Channel  (pdev, HID_Machine.hc_num_out);
 801617c:	4b08      	ldr	r3, [pc, #32]	; (80161a0 <USBH_HID_InterfaceDeInit+0x74>)
 801617e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8016182:	4619      	mov	r1, r3
 8016184:	6878      	ldr	r0, [r7, #4]
 8016186:	f7ff fe9b 	bl	8015ec0 <USBH_Free_Channel>
    HID_Machine.hc_num_out = 0;     /* Reset the Channel as Free */  
 801618a:	4b05      	ldr	r3, [pc, #20]	; (80161a0 <USBH_HID_InterfaceDeInit+0x74>)
 801618c:	2200      	movs	r2, #0
 801618e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
 
  start_toggle = 0;
 8016192:	4b04      	ldr	r3, [pc, #16]	; (80161a4 <USBH_HID_InterfaceDeInit+0x78>)
 8016194:	2200      	movs	r2, #0
 8016196:	701a      	strb	r2, [r3, #0]
}
 8016198:	bf00      	nop
 801619a:	3708      	adds	r7, #8
 801619c:	46bd      	mov	sp, r7
 801619e:	bd80      	pop	{r7, pc}
 80161a0:	20003468 	.word	0x20003468
 80161a4:	20003516 	.word	0x20003516

080161a8 <USBH_HID_ClassRequest>:
* @param  hdev: Selected device property
* @retval  USBH_Status :Response for USB Set Protocol request
*/
static USBH_Status USBH_HID_ClassRequest(USB_OTG_CORE_HANDLE *pdev , 
                                         void *phost)
{   
 80161a8:	b580      	push	{r7, lr}
 80161aa:	b086      	sub	sp, #24
 80161ac:	af00      	add	r7, sp, #0
 80161ae:	6078      	str	r0, [r7, #4]
 80161b0:	6039      	str	r1, [r7, #0]
    USBH_HOST *pphost = phost;
 80161b2:	683b      	ldr	r3, [r7, #0]
 80161b4:	613b      	str	r3, [r7, #16]
    
  USBH_Status status         = USBH_BUSY;
 80161b6:	2301      	movs	r3, #1
 80161b8:	75fb      	strb	r3, [r7, #23]
  USBH_Status classReqStatus = USBH_BUSY;
 80161ba:	2301      	movs	r3, #1
 80161bc:	73fb      	strb	r3, [r7, #15]
  
  
  /* Switch HID state machine */
  switch (HID_Machine.ctl_state)
 80161be:	4b35      	ldr	r3, [pc, #212]	; (8016294 <USBH_HID_ClassRequest+0xec>)
 80161c0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80161c4:	2b04      	cmp	r3, #4
 80161c6:	d857      	bhi.n	8016278 <USBH_HID_ClassRequest+0xd0>
 80161c8:	a201      	add	r2, pc, #4	; (adr r2, 80161d0 <USBH_HID_ClassRequest+0x28>)
 80161ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80161ce:	bf00      	nop
 80161d0:	080161e5 	.word	0x080161e5
 80161d4:	0801620d 	.word	0x0801620d
 80161d8:	080161e5 	.word	0x080161e5
 80161dc:	0801622b 	.word	0x0801622b
 80161e0:	0801625b 	.word	0x0801625b
  {
  case HID_IDLE:  
  case HID_REQ_GET_HID_DESC:
    
    /* Get HID Desc */ 
    if (USBH_Get_HID_Descriptor (pdev, pphost, USB_HID_DESC_SIZE)== USBH_OK)
 80161e4:	2209      	movs	r2, #9
 80161e6:	6939      	ldr	r1, [r7, #16]
 80161e8:	6878      	ldr	r0, [r7, #4]
 80161ea:	f000 f914 	bl	8016416 <USBH_Get_HID_Descriptor>
 80161ee:	4603      	mov	r3, r0
 80161f0:	2b00      	cmp	r3, #0
 80161f2:	d143      	bne.n	801627c <USBH_HID_ClassRequest+0xd4>
    {
      
      USBH_ParseHIDDesc(&HID_Desc, pdev->host.Rx_Buffer);
 80161f4:	687b      	ldr	r3, [r7, #4]
 80161f6:	f503 7388 	add.w	r3, r3, #272	; 0x110
 80161fa:	4619      	mov	r1, r3
 80161fc:	4826      	ldr	r0, [pc, #152]	; (8016298 <USBH_HID_ClassRequest+0xf0>)
 80161fe:	f000 f9a7 	bl	8016550 <USBH_ParseHIDDesc>
      HID_Machine.ctl_state = HID_REQ_GET_REPORT_DESC;
 8016202:	4b24      	ldr	r3, [pc, #144]	; (8016294 <USBH_HID_ClassRequest+0xec>)
 8016204:	2201      	movs	r2, #1
 8016206:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    
    break;     
 801620a:	e037      	b.n	801627c <USBH_HID_ClassRequest+0xd4>
  case HID_REQ_GET_REPORT_DESC:
    
    
    /* Get Report Desc */ 
    if (USBH_Get_HID_ReportDescriptor(pdev , pphost, HID_Desc.wItemLength) == USBH_OK)
 801620c:	4b22      	ldr	r3, [pc, #136]	; (8016298 <USBH_HID_ClassRequest+0xf0>)
 801620e:	891b      	ldrh	r3, [r3, #8]
 8016210:	461a      	mov	r2, r3
 8016212:	6939      	ldr	r1, [r7, #16]
 8016214:	6878      	ldr	r0, [r7, #4]
 8016216:	f000 f8e3 	bl	80163e0 <USBH_Get_HID_ReportDescriptor>
 801621a:	4603      	mov	r3, r0
 801621c:	2b00      	cmp	r3, #0
 801621e:	d12f      	bne.n	8016280 <USBH_HID_ClassRequest+0xd8>
    {
      HID_Machine.ctl_state = HID_REQ_SET_IDLE;
 8016220:	4b1c      	ldr	r3, [pc, #112]	; (8016294 <USBH_HID_ClassRequest+0xec>)
 8016222:	2203      	movs	r2, #3
 8016224:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    
    break;
 8016228:	e02a      	b.n	8016280 <USBH_HID_ClassRequest+0xd8>
    
  case HID_REQ_SET_IDLE:
    
    classReqStatus = USBH_Set_Idle (pdev, pphost, 0, 0);
 801622a:	2300      	movs	r3, #0
 801622c:	2200      	movs	r2, #0
 801622e:	6939      	ldr	r1, [r7, #16]
 8016230:	6878      	ldr	r0, [r7, #4]
 8016232:	f000 f90b 	bl	801644c <USBH_Set_Idle>
 8016236:	4603      	mov	r3, r0
 8016238:	73fb      	strb	r3, [r7, #15]
    
    /* set Idle */
    if (classReqStatus == USBH_OK)
 801623a:	7bfb      	ldrb	r3, [r7, #15]
 801623c:	2b00      	cmp	r3, #0
 801623e:	d104      	bne.n	801624a <USBH_HID_ClassRequest+0xa2>
    {
      HID_Machine.ctl_state = HID_REQ_SET_PROTOCOL;  
 8016240:	4b14      	ldr	r3, [pc, #80]	; (8016294 <USBH_HID_ClassRequest+0xec>)
 8016242:	2204      	movs	r2, #4
 8016244:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    else if(classReqStatus == USBH_NOT_SUPPORTED) 
    {
      HID_Machine.ctl_state = HID_REQ_SET_PROTOCOL;        
    } 
    break; 
 8016248:	e01c      	b.n	8016284 <USBH_HID_ClassRequest+0xdc>
    else if(classReqStatus == USBH_NOT_SUPPORTED) 
 801624a:	7bfb      	ldrb	r3, [r7, #15]
 801624c:	2b03      	cmp	r3, #3
 801624e:	d119      	bne.n	8016284 <USBH_HID_ClassRequest+0xdc>
      HID_Machine.ctl_state = HID_REQ_SET_PROTOCOL;        
 8016250:	4b10      	ldr	r3, [pc, #64]	; (8016294 <USBH_HID_ClassRequest+0xec>)
 8016252:	2204      	movs	r2, #4
 8016254:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    break; 
 8016258:	e014      	b.n	8016284 <USBH_HID_ClassRequest+0xdc>
    
  case HID_REQ_SET_PROTOCOL:
    /* set protocol */
    if (USBH_Set_Protocol (pdev ,pphost, 0) == USBH_OK)
 801625a:	2200      	movs	r2, #0
 801625c:	6939      	ldr	r1, [r7, #16]
 801625e:	6878      	ldr	r0, [r7, #4]
 8016260:	f000 f94e 	bl	8016500 <USBH_Set_Protocol>
 8016264:	4603      	mov	r3, r0
 8016266:	2b00      	cmp	r3, #0
 8016268:	d10e      	bne.n	8016288 <USBH_HID_ClassRequest+0xe0>
    {
      HID_Machine.ctl_state = HID_REQ_IDLE;
 801626a:	4b0a      	ldr	r3, [pc, #40]	; (8016294 <USBH_HID_ClassRequest+0xec>)
 801626c:	2200      	movs	r2, #0
 801626e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
      
      /* all requests performed*/
      status = USBH_OK; 
 8016272:	2300      	movs	r3, #0
 8016274:	75fb      	strb	r3, [r7, #23]
    } 
    break;
 8016276:	e007      	b.n	8016288 <USBH_HID_ClassRequest+0xe0>
    
  default:
    break;
 8016278:	bf00      	nop
 801627a:	e006      	b.n	801628a <USBH_HID_ClassRequest+0xe2>
    break;     
 801627c:	bf00      	nop
 801627e:	e004      	b.n	801628a <USBH_HID_ClassRequest+0xe2>
    break;
 8016280:	bf00      	nop
 8016282:	e002      	b.n	801628a <USBH_HID_ClassRequest+0xe2>
    break; 
 8016284:	bf00      	nop
 8016286:	e000      	b.n	801628a <USBH_HID_ClassRequest+0xe2>
    break;
 8016288:	bf00      	nop
  }
  
  return status; 
 801628a:	7dfb      	ldrb	r3, [r7, #23]
}
 801628c:	4618      	mov	r0, r3
 801628e:	3718      	adds	r7, #24
 8016290:	46bd      	mov	sp, r7
 8016292:	bd80      	pop	{r7, pc}
 8016294:	20003468 	.word	0x20003468
 8016298:	2000350c 	.word	0x2000350c

0801629c <USBH_HID_Handle>:
* @param  hdev: Selected device property
* @retval USBH_Status
*/
static USBH_Status USBH_HID_Handle(USB_OTG_CORE_HANDLE *pdev , 
                                   void   *phost)
{
 801629c:	b580      	push	{r7, lr}
 801629e:	b084      	sub	sp, #16
 80162a0:	af00      	add	r7, sp, #0
 80162a2:	6078      	str	r0, [r7, #4]
 80162a4:	6039      	str	r1, [r7, #0]
  USBH_HOST *pphost = phost;
 80162a6:	683b      	ldr	r3, [r7, #0]
 80162a8:	60fb      	str	r3, [r7, #12]
  USBH_Status status = USBH_OK;
 80162aa:	2300      	movs	r3, #0
 80162ac:	72fb      	strb	r3, [r7, #11]
  
  switch (HID_Machine.state)
 80162ae:	4b4a      	ldr	r3, [pc, #296]	; (80163d8 <USBH_HID_Handle+0x13c>)
 80162b0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80162b4:	2b05      	cmp	r3, #5
 80162b6:	f200 8084 	bhi.w	80163c2 <USBH_HID_Handle+0x126>
 80162ba:	a201      	add	r2, pc, #4	; (adr r2, 80162c0 <USBH_HID_Handle+0x24>)
 80162bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80162c0:	080162d9 	.word	0x080162d9
 80162c4:	080163c3 	.word	0x080163c3
 80162c8:	080163c3 	.word	0x080163c3
 80162cc:	080162ff 	.word	0x080162ff
 80162d0:	080162e9 	.word	0x080162e9
 80162d4:	08016335 	.word	0x08016335
  {
    
  case HID_IDLE:
    HID_Machine.cb->Init();
 80162d8:	4b3f      	ldr	r3, [pc, #252]	; (80163d8 <USBH_HID_Handle+0x13c>)
 80162da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80162dc:	681b      	ldr	r3, [r3, #0]
 80162de:	4798      	blx	r3
    HID_Machine.state = HID_SYNC;
 80162e0:	4b3d      	ldr	r3, [pc, #244]	; (80163d8 <USBH_HID_Handle+0x13c>)
 80162e2:	2204      	movs	r2, #4
 80162e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    
  case HID_SYNC:

    /* Sync with start of Even Frame */
    if(USB_OTG_IsEvenFrame(pdev) == TRUE)
 80162e8:	6878      	ldr	r0, [r7, #4]
 80162ea:	f7fd f90d 	bl	8013508 <USB_OTG_IsEvenFrame>
 80162ee:	4603      	mov	r3, r0
 80162f0:	2b01      	cmp	r3, #1
 80162f2:	d168      	bne.n	80163c6 <USBH_HID_Handle+0x12a>
    {
      HID_Machine.state = HID_GET_DATA;  
 80162f4:	4b38      	ldr	r3, [pc, #224]	; (80163d8 <USBH_HID_Handle+0x13c>)
 80162f6:	2203      	movs	r2, #3
 80162f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    }
    break;
 80162fc:	e063      	b.n	80163c6 <USBH_HID_Handle+0x12a>
    
  case HID_GET_DATA:

    USBH_InterruptReceiveData(pdev, 
                              HID_Machine.buff,
                              HID_Machine.length,
 80162fe:	4b36      	ldr	r3, [pc, #216]	; (80163d8 <USBH_HID_Handle+0x13c>)
 8016300:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
    USBH_InterruptReceiveData(pdev, 
 8016304:	b2da      	uxtb	r2, r3
 8016306:	4b34      	ldr	r3, [pc, #208]	; (80163d8 <USBH_HID_Handle+0x13c>)
 8016308:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801630c:	4932      	ldr	r1, [pc, #200]	; (80163d8 <USBH_HID_Handle+0x13c>)
 801630e:	6878      	ldr	r0, [r7, #4]
 8016310:	f000 fbfc 	bl	8016b0c <USBH_InterruptReceiveData>
                              HID_Machine.hc_num_in);
    start_toggle = 1;
 8016314:	4b31      	ldr	r3, [pc, #196]	; (80163dc <USBH_HID_Handle+0x140>)
 8016316:	2201      	movs	r2, #1
 8016318:	701a      	strb	r2, [r3, #0]
    
    HID_Machine.state = HID_POLL;
 801631a:	4b2f      	ldr	r3, [pc, #188]	; (80163d8 <USBH_HID_Handle+0x13c>)
 801631c:	2205      	movs	r2, #5
 801631e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    HID_Machine.timer = HCD_GetCurrentFrame(pdev);
 8016322:	6878      	ldr	r0, [r7, #4]
 8016324:	f7fd fdda 	bl	8013edc <HCD_GetCurrentFrame>
 8016328:	4603      	mov	r3, r0
 801632a:	b29a      	uxth	r2, r3
 801632c:	4b2a      	ldr	r3, [pc, #168]	; (80163d8 <USBH_HID_Handle+0x13c>)
 801632e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
    break;
 8016332:	e04b      	b.n	80163cc <USBH_HID_Handle+0x130>
    
  case HID_POLL:
    if(( HCD_GetCurrentFrame(pdev) - HID_Machine.timer) >= HID_Machine.poll)
 8016334:	6878      	ldr	r0, [r7, #4]
 8016336:	f7fd fdd1 	bl	8013edc <HCD_GetCurrentFrame>
 801633a:	4602      	mov	r2, r0
 801633c:	4b26      	ldr	r3, [pc, #152]	; (80163d8 <USBH_HID_Handle+0x13c>)
 801633e:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 8016342:	b29b      	uxth	r3, r3
 8016344:	1ad3      	subs	r3, r2, r3
 8016346:	4a24      	ldr	r2, [pc, #144]	; (80163d8 <USBH_HID_Handle+0x13c>)
 8016348:	f8b2 204a 	ldrh.w	r2, [r2, #74]	; 0x4a
 801634c:	4293      	cmp	r3, r2
 801634e:	d304      	bcc.n	801635a <USBH_HID_Handle+0xbe>
    {
      HID_Machine.state = HID_GET_DATA;
 8016350:	4b21      	ldr	r3, [pc, #132]	; (80163d8 <USBH_HID_Handle+0x13c>)
 8016352:	2203      	movs	r2, #3
 8016354:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        HID_Machine.state = HID_GET_DATA;
        
      }
      
    }      
    break;
 8016358:	e037      	b.n	80163ca <USBH_HID_Handle+0x12e>
    else if(HCD_GetURB_State(pdev , HID_Machine.hc_num_in) == URB_DONE)
 801635a:	4b1f      	ldr	r3, [pc, #124]	; (80163d8 <USBH_HID_Handle+0x13c>)
 801635c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8016360:	4619      	mov	r1, r3
 8016362:	6878      	ldr	r0, [r7, #4]
 8016364:	f7fd fdc8 	bl	8013ef8 <HCD_GetURB_State>
 8016368:	4603      	mov	r3, r0
 801636a:	2b01      	cmp	r3, #1
 801636c:	d10d      	bne.n	801638a <USBH_HID_Handle+0xee>
      if(start_toggle == 1) /* handle data once */
 801636e:	4b1b      	ldr	r3, [pc, #108]	; (80163dc <USBH_HID_Handle+0x140>)
 8016370:	781b      	ldrb	r3, [r3, #0]
 8016372:	b2db      	uxtb	r3, r3
 8016374:	2b01      	cmp	r3, #1
 8016376:	d128      	bne.n	80163ca <USBH_HID_Handle+0x12e>
        start_toggle = 0;
 8016378:	4b18      	ldr	r3, [pc, #96]	; (80163dc <USBH_HID_Handle+0x140>)
 801637a:	2200      	movs	r2, #0
 801637c:	701a      	strb	r2, [r3, #0]
        HID_Machine.cb->Decode(HID_Machine.buff);
 801637e:	4b16      	ldr	r3, [pc, #88]	; (80163d8 <USBH_HID_Handle+0x13c>)
 8016380:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016382:	685b      	ldr	r3, [r3, #4]
 8016384:	4814      	ldr	r0, [pc, #80]	; (80163d8 <USBH_HID_Handle+0x13c>)
 8016386:	4798      	blx	r3
    break;
 8016388:	e01f      	b.n	80163ca <USBH_HID_Handle+0x12e>
    else if(HCD_GetURB_State(pdev, HID_Machine.hc_num_in) == URB_STALL) /* IN Endpoint Stalled */
 801638a:	4b13      	ldr	r3, [pc, #76]	; (80163d8 <USBH_HID_Handle+0x13c>)
 801638c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8016390:	4619      	mov	r1, r3
 8016392:	6878      	ldr	r0, [r7, #4]
 8016394:	f7fd fdb0 	bl	8013ef8 <HCD_GetURB_State>
 8016398:	4603      	mov	r3, r0
 801639a:	2b04      	cmp	r3, #4
 801639c:	d115      	bne.n	80163ca <USBH_HID_Handle+0x12e>
      if( (USBH_ClrFeature(pdev, 
 801639e:	4b0e      	ldr	r3, [pc, #56]	; (80163d8 <USBH_HID_Handle+0x13c>)
 80163a0:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 80163a4:	4b0c      	ldr	r3, [pc, #48]	; (80163d8 <USBH_HID_Handle+0x13c>)
 80163a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80163aa:	68f9      	ldr	r1, [r7, #12]
 80163ac:	6878      	ldr	r0, [r7, #4]
 80163ae:	f000 fe20 	bl	8016ff2 <USBH_ClrFeature>
 80163b2:	4603      	mov	r3, r0
 80163b4:	2b00      	cmp	r3, #0
 80163b6:	d108      	bne.n	80163ca <USBH_HID_Handle+0x12e>
        HID_Machine.state = HID_GET_DATA;
 80163b8:	4b07      	ldr	r3, [pc, #28]	; (80163d8 <USBH_HID_Handle+0x13c>)
 80163ba:	2203      	movs	r2, #3
 80163bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    break;
 80163c0:	e003      	b.n	80163ca <USBH_HID_Handle+0x12e>
    
  default:
    break;
 80163c2:	bf00      	nop
 80163c4:	e002      	b.n	80163cc <USBH_HID_Handle+0x130>
    break;
 80163c6:	bf00      	nop
 80163c8:	e000      	b.n	80163cc <USBH_HID_Handle+0x130>
    break;
 80163ca:	bf00      	nop
  }
  return status;
 80163cc:	7afb      	ldrb	r3, [r7, #11]
}
 80163ce:	4618      	mov	r0, r3
 80163d0:	3710      	adds	r7, #16
 80163d2:	46bd      	mov	sp, r7
 80163d4:	bd80      	pop	{r7, pc}
 80163d6:	bf00      	nop
 80163d8:	20003468 	.word	0x20003468
 80163dc:	20003516 	.word	0x20003516

080163e0 <USBH_Get_HID_ReportDescriptor>:
* @retval USBH_Status : Response for USB HID Get Report Descriptor Request
*/
static USBH_Status USBH_Get_HID_ReportDescriptor (USB_OTG_CORE_HANDLE *pdev,
                                                  USBH_HOST *phost,
                                                  uint16_t length)
{
 80163e0:	b580      	push	{r7, lr}
 80163e2:	b088      	sub	sp, #32
 80163e4:	af02      	add	r7, sp, #8
 80163e6:	60f8      	str	r0, [r7, #12]
 80163e8:	60b9      	str	r1, [r7, #8]
 80163ea:	4613      	mov	r3, r2
 80163ec:	80fb      	strh	r3, [r7, #6]
  status = USBH_GetDescriptor(pdev,
                              phost,
                              USB_REQ_RECIPIENT_INTERFACE
                                | USB_REQ_TYPE_STANDARD,                                  
                                USB_DESC_HID_REPORT, 
                                pdev->host.Rx_Buffer,
 80163ee:	68fb      	ldr	r3, [r7, #12]
 80163f0:	f503 7388 	add.w	r3, r3, #272	; 0x110
  status = USBH_GetDescriptor(pdev,
 80163f4:	88fa      	ldrh	r2, [r7, #6]
 80163f6:	9201      	str	r2, [sp, #4]
 80163f8:	9300      	str	r3, [sp, #0]
 80163fa:	f44f 5308 	mov.w	r3, #8704	; 0x2200
 80163fe:	2201      	movs	r2, #1
 8016400:	68b9      	ldr	r1, [r7, #8]
 8016402:	68f8      	ldr	r0, [r7, #12]
 8016404:	f000 fd58 	bl	8016eb8 <USBH_GetDescriptor>
 8016408:	4603      	mov	r3, r0
 801640a:	75fb      	strb	r3, [r7, #23]
  HID report descriptor parsing is not required.
  In case, for supporting Non-Boot Protocol devices and output reports,
  user may parse the report descriptor*/
  
  
  return status;
 801640c:	7dfb      	ldrb	r3, [r7, #23]
}
 801640e:	4618      	mov	r0, r3
 8016410:	3718      	adds	r7, #24
 8016412:	46bd      	mov	sp, r7
 8016414:	bd80      	pop	{r7, pc}

08016416 <USBH_Get_HID_Descriptor>:
* @retval USBH_Status : Response for USB HID Get Report Descriptor Request
*/
static USBH_Status USBH_Get_HID_Descriptor (USB_OTG_CORE_HANDLE *pdev,
                                            USBH_HOST *phost,
                                            uint16_t length)
{
 8016416:	b580      	push	{r7, lr}
 8016418:	b088      	sub	sp, #32
 801641a:	af02      	add	r7, sp, #8
 801641c:	60f8      	str	r0, [r7, #12]
 801641e:	60b9      	str	r1, [r7, #8]
 8016420:	4613      	mov	r3, r2
 8016422:	80fb      	strh	r3, [r7, #6]
  status = USBH_GetDescriptor(pdev, 
                              phost,
                              USB_REQ_RECIPIENT_INTERFACE
                                | USB_REQ_TYPE_STANDARD,                                  
                                USB_DESC_HID,
                                pdev->host.Rx_Buffer,
 8016424:	68fb      	ldr	r3, [r7, #12]
 8016426:	f503 7388 	add.w	r3, r3, #272	; 0x110
  status = USBH_GetDescriptor(pdev, 
 801642a:	88fa      	ldrh	r2, [r7, #6]
 801642c:	9201      	str	r2, [sp, #4]
 801642e:	9300      	str	r3, [sp, #0]
 8016430:	f44f 5304 	mov.w	r3, #8448	; 0x2100
 8016434:	2201      	movs	r2, #1
 8016436:	68b9      	ldr	r1, [r7, #8]
 8016438:	68f8      	ldr	r0, [r7, #12]
 801643a:	f000 fd3d 	bl	8016eb8 <USBH_GetDescriptor>
 801643e:	4603      	mov	r3, r0
 8016440:	75fb      	strb	r3, [r7, #23]
                                length);
 
  return status;
 8016442:	7dfb      	ldrb	r3, [r7, #23]
}
 8016444:	4618      	mov	r0, r3
 8016446:	3718      	adds	r7, #24
 8016448:	46bd      	mov	sp, r7
 801644a:	bd80      	pop	{r7, pc}

0801644c <USBH_Set_Idle>:
*/
static USBH_Status USBH_Set_Idle (USB_OTG_CORE_HANDLE *pdev,
                                  USBH_HOST *phost,
                                  uint8_t duration,
                                  uint8_t reportId)
{
 801644c:	b580      	push	{r7, lr}
 801644e:	b084      	sub	sp, #16
 8016450:	af00      	add	r7, sp, #0
 8016452:	60f8      	str	r0, [r7, #12]
 8016454:	60b9      	str	r1, [r7, #8]
 8016456:	4611      	mov	r1, r2
 8016458:	461a      	mov	r2, r3
 801645a:	460b      	mov	r3, r1
 801645c:	71fb      	strb	r3, [r7, #7]
 801645e:	4613      	mov	r3, r2
 8016460:	71bb      	strb	r3, [r7, #6]
  
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_INTERFACE |\
 8016462:	68bb      	ldr	r3, [r7, #8]
 8016464:	2221      	movs	r2, #33	; 0x21
 8016466:	751a      	strb	r2, [r3, #20]
    USB_REQ_TYPE_CLASS;
  
  
  phost->Control.setup.b.bRequest = USB_HID_SET_IDLE;
 8016468:	68bb      	ldr	r3, [r7, #8]
 801646a:	220a      	movs	r2, #10
 801646c:	755a      	strb	r2, [r3, #21]
  phost->Control.setup.b.wValue.w = (duration << 8 ) | reportId;
 801646e:	79fb      	ldrb	r3, [r7, #7]
 8016470:	021b      	lsls	r3, r3, #8
 8016472:	b21a      	sxth	r2, r3
 8016474:	79bb      	ldrb	r3, [r7, #6]
 8016476:	b21b      	sxth	r3, r3
 8016478:	4313      	orrs	r3, r2
 801647a:	b21b      	sxth	r3, r3
 801647c:	b29a      	uxth	r2, r3
 801647e:	68bb      	ldr	r3, [r7, #8]
 8016480:	82da      	strh	r2, [r3, #22]
  
  phost->Control.setup.b.wIndex.w = 0;
 8016482:	68bb      	ldr	r3, [r7, #8]
 8016484:	2200      	movs	r2, #0
 8016486:	831a      	strh	r2, [r3, #24]
  phost->Control.setup.b.wLength.w = 0;
 8016488:	68bb      	ldr	r3, [r7, #8]
 801648a:	2200      	movs	r2, #0
 801648c:	835a      	strh	r2, [r3, #26]
  
  return USBH_CtlReq(pdev, phost, 0 , 0 );
 801648e:	2300      	movs	r3, #0
 8016490:	2200      	movs	r2, #0
 8016492:	68b9      	ldr	r1, [r7, #8]
 8016494:	68f8      	ldr	r0, [r7, #12]
 8016496:	f000 f9a3 	bl	80167e0 <USBH_CtlReq>
 801649a:	4603      	mov	r3, r0
}
 801649c:	4618      	mov	r0, r3
 801649e:	3710      	adds	r7, #16
 80164a0:	46bd      	mov	sp, r7
 80164a2:	bd80      	pop	{r7, pc}

080164a4 <USBH_Set_Report>:
                                 USBH_HOST *phost,
                                    uint8_t reportType,
                                    uint8_t reportId,
                                    uint8_t reportLen,
                                    uint8_t* reportBuff)
{
 80164a4:	b580      	push	{r7, lr}
 80164a6:	b084      	sub	sp, #16
 80164a8:	af00      	add	r7, sp, #0
 80164aa:	60f8      	str	r0, [r7, #12]
 80164ac:	60b9      	str	r1, [r7, #8]
 80164ae:	4611      	mov	r1, r2
 80164b0:	461a      	mov	r2, r3
 80164b2:	460b      	mov	r3, r1
 80164b4:	71fb      	strb	r3, [r7, #7]
 80164b6:	4613      	mov	r3, r2
 80164b8:	71bb      	strb	r3, [r7, #6]
  
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_INTERFACE |\
 80164ba:	68bb      	ldr	r3, [r7, #8]
 80164bc:	2221      	movs	r2, #33	; 0x21
 80164be:	751a      	strb	r2, [r3, #20]
    USB_REQ_TYPE_CLASS;
  
  
  phost->Control.setup.b.bRequest = USB_HID_SET_REPORT;
 80164c0:	68bb      	ldr	r3, [r7, #8]
 80164c2:	2209      	movs	r2, #9
 80164c4:	755a      	strb	r2, [r3, #21]
  phost->Control.setup.b.wValue.w = (reportType << 8 ) | reportId;
 80164c6:	79fb      	ldrb	r3, [r7, #7]
 80164c8:	021b      	lsls	r3, r3, #8
 80164ca:	b21a      	sxth	r2, r3
 80164cc:	79bb      	ldrb	r3, [r7, #6]
 80164ce:	b21b      	sxth	r3, r3
 80164d0:	4313      	orrs	r3, r2
 80164d2:	b21b      	sxth	r3, r3
 80164d4:	b29a      	uxth	r2, r3
 80164d6:	68bb      	ldr	r3, [r7, #8]
 80164d8:	82da      	strh	r2, [r3, #22]
  
  phost->Control.setup.b.wIndex.w = 0;
 80164da:	68bb      	ldr	r3, [r7, #8]
 80164dc:	2200      	movs	r2, #0
 80164de:	831a      	strh	r2, [r3, #24]
  phost->Control.setup.b.wLength.w = reportLen;
 80164e0:	7e3b      	ldrb	r3, [r7, #24]
 80164e2:	b29a      	uxth	r2, r3
 80164e4:	68bb      	ldr	r3, [r7, #8]
 80164e6:	835a      	strh	r2, [r3, #26]
  
  return USBH_CtlReq(pdev, phost, reportBuff , reportLen );
 80164e8:	7e3b      	ldrb	r3, [r7, #24]
 80164ea:	b29b      	uxth	r3, r3
 80164ec:	69fa      	ldr	r2, [r7, #28]
 80164ee:	68b9      	ldr	r1, [r7, #8]
 80164f0:	68f8      	ldr	r0, [r7, #12]
 80164f2:	f000 f975 	bl	80167e0 <USBH_CtlReq>
 80164f6:	4603      	mov	r3, r0
}
 80164f8:	4618      	mov	r0, r3
 80164fa:	3710      	adds	r7, #16
 80164fc:	46bd      	mov	sp, r7
 80164fe:	bd80      	pop	{r7, pc}

08016500 <USBH_Set_Protocol>:
* @retval USBH_Status : Response for USB Set Protocol request
*/
static USBH_Status USBH_Set_Protocol(USB_OTG_CORE_HANDLE *pdev,
                                     USBH_HOST *phost,
                                     uint8_t protocol)
{
 8016500:	b580      	push	{r7, lr}
 8016502:	b084      	sub	sp, #16
 8016504:	af00      	add	r7, sp, #0
 8016506:	60f8      	str	r0, [r7, #12]
 8016508:	60b9      	str	r1, [r7, #8]
 801650a:	4613      	mov	r3, r2
 801650c:	71fb      	strb	r3, [r7, #7]
  
  
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_INTERFACE |\
 801650e:	68bb      	ldr	r3, [r7, #8]
 8016510:	2221      	movs	r2, #33	; 0x21
 8016512:	751a      	strb	r2, [r3, #20]
    USB_REQ_TYPE_CLASS;
  
  
  phost->Control.setup.b.bRequest = USB_HID_SET_PROTOCOL;
 8016514:	68bb      	ldr	r3, [r7, #8]
 8016516:	220b      	movs	r2, #11
 8016518:	755a      	strb	r2, [r3, #21]
  
  if(protocol != 0)
 801651a:	79fb      	ldrb	r3, [r7, #7]
 801651c:	2b00      	cmp	r3, #0
 801651e:	d003      	beq.n	8016528 <USBH_Set_Protocol+0x28>
  {
    /* Boot Protocol */
    phost->Control.setup.b.wValue.w = 0;
 8016520:	68bb      	ldr	r3, [r7, #8]
 8016522:	2200      	movs	r2, #0
 8016524:	82da      	strh	r2, [r3, #22]
 8016526:	e002      	b.n	801652e <USBH_Set_Protocol+0x2e>
  }
  else
  {
    /*Report Protocol*/
    phost->Control.setup.b.wValue.w = 1;
 8016528:	68bb      	ldr	r3, [r7, #8]
 801652a:	2201      	movs	r2, #1
 801652c:	82da      	strh	r2, [r3, #22]
  }
  
  phost->Control.setup.b.wIndex.w = 0;
 801652e:	68bb      	ldr	r3, [r7, #8]
 8016530:	2200      	movs	r2, #0
 8016532:	831a      	strh	r2, [r3, #24]
  phost->Control.setup.b.wLength.w = 0;
 8016534:	68bb      	ldr	r3, [r7, #8]
 8016536:	2200      	movs	r2, #0
 8016538:	835a      	strh	r2, [r3, #26]
  
  return USBH_CtlReq(pdev, phost, 0 , 0 );
 801653a:	2300      	movs	r3, #0
 801653c:	2200      	movs	r2, #0
 801653e:	68b9      	ldr	r1, [r7, #8]
 8016540:	68f8      	ldr	r0, [r7, #12]
 8016542:	f000 f94d 	bl	80167e0 <USBH_CtlReq>
 8016546:	4603      	mov	r3, r0
  
}
 8016548:	4618      	mov	r0, r3
 801654a:	3710      	adds	r7, #16
 801654c:	46bd      	mov	sp, r7
 801654e:	bd80      	pop	{r7, pc}

08016550 <USBH_ParseHIDDesc>:
*         This function Parse the HID descriptor
* @param  buf: Buffer where the source descriptor is available
* @retval None
*/
static void  USBH_ParseHIDDesc (USBH_HIDDesc_TypeDef *desc, uint8_t *buf)
{
 8016550:	b480      	push	{r7}
 8016552:	b083      	sub	sp, #12
 8016554:	af00      	add	r7, sp, #0
 8016556:	6078      	str	r0, [r7, #4]
 8016558:	6039      	str	r1, [r7, #0]
  
  desc->bLength                  = *(uint8_t  *) (buf + 0);
 801655a:	683b      	ldr	r3, [r7, #0]
 801655c:	781a      	ldrb	r2, [r3, #0]
 801655e:	687b      	ldr	r3, [r7, #4]
 8016560:	701a      	strb	r2, [r3, #0]
  desc->bDescriptorType          = *(uint8_t  *) (buf + 1);
 8016562:	683b      	ldr	r3, [r7, #0]
 8016564:	785a      	ldrb	r2, [r3, #1]
 8016566:	687b      	ldr	r3, [r7, #4]
 8016568:	705a      	strb	r2, [r3, #1]
  desc->bcdHID                   =  LE16  (buf + 2);
 801656a:	683b      	ldr	r3, [r7, #0]
 801656c:	3302      	adds	r3, #2
 801656e:	781b      	ldrb	r3, [r3, #0]
 8016570:	b29a      	uxth	r2, r3
 8016572:	683b      	ldr	r3, [r7, #0]
 8016574:	3302      	adds	r3, #2
 8016576:	3301      	adds	r3, #1
 8016578:	781b      	ldrb	r3, [r3, #0]
 801657a:	b29b      	uxth	r3, r3
 801657c:	021b      	lsls	r3, r3, #8
 801657e:	b29b      	uxth	r3, r3
 8016580:	4413      	add	r3, r2
 8016582:	b29a      	uxth	r2, r3
 8016584:	687b      	ldr	r3, [r7, #4]
 8016586:	805a      	strh	r2, [r3, #2]
  desc->bCountryCode             = *(uint8_t  *) (buf + 4);
 8016588:	683b      	ldr	r3, [r7, #0]
 801658a:	791a      	ldrb	r2, [r3, #4]
 801658c:	687b      	ldr	r3, [r7, #4]
 801658e:	711a      	strb	r2, [r3, #4]
  desc->bNumDescriptors          = *(uint8_t  *) (buf + 5);
 8016590:	683b      	ldr	r3, [r7, #0]
 8016592:	795a      	ldrb	r2, [r3, #5]
 8016594:	687b      	ldr	r3, [r7, #4]
 8016596:	715a      	strb	r2, [r3, #5]
  desc->bReportDescriptorType    = *(uint8_t  *) (buf + 6);
 8016598:	683b      	ldr	r3, [r7, #0]
 801659a:	799a      	ldrb	r2, [r3, #6]
 801659c:	687b      	ldr	r3, [r7, #4]
 801659e:	719a      	strb	r2, [r3, #6]
  desc->wItemLength              =  LE16  (buf + 7);
 80165a0:	683b      	ldr	r3, [r7, #0]
 80165a2:	3307      	adds	r3, #7
 80165a4:	781b      	ldrb	r3, [r3, #0]
 80165a6:	b29a      	uxth	r2, r3
 80165a8:	683b      	ldr	r3, [r7, #0]
 80165aa:	3307      	adds	r3, #7
 80165ac:	3301      	adds	r3, #1
 80165ae:	781b      	ldrb	r3, [r3, #0]
 80165b0:	b29b      	uxth	r3, r3
 80165b2:	021b      	lsls	r3, r3, #8
 80165b4:	b29b      	uxth	r3, r3
 80165b6:	4413      	add	r3, r2
 80165b8:	b29a      	uxth	r2, r3
 80165ba:	687b      	ldr	r3, [r7, #4]
 80165bc:	811a      	strh	r2, [r3, #8]
  
} 
 80165be:	bf00      	nop
 80165c0:	370c      	adds	r7, #12
 80165c2:	46bd      	mov	sp, r7
 80165c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80165c8:	4770      	bx	lr
 80165ca:	bf00      	nop

080165cc <KEYBRD_Init>:
*         Initialize the keyboard function.
* @param  None
* @retval None
*/
static void  KEYBRD_Init (void)
{
 80165cc:	b580      	push	{r7, lr}
 80165ce:	af00      	add	r7, sp, #0
  /* Call User Init*/
  USR_KEYBRD_Init();
 80165d0:	f7ea fb69 	bl	8000ca6 <USR_KEYBRD_Init>
}
 80165d4:	bf00      	nop
 80165d6:	bd80      	pop	{r7, pc}

080165d8 <KEYBRD_Decode>:
* @param  pbuf : Pointer to the HID IN report data buffer
* @retval None
*/

static void KEYBRD_Decode(uint8_t *pbuf)
{
 80165d8:	b580      	push	{r7, lr}
 80165da:	b084      	sub	sp, #16
 80165dc:	af00      	add	r7, sp, #0
 80165de:	6078      	str	r0, [r7, #4]
  uint8_t   ix;
  uint8_t   jx;
  uint8_t   error;
  uint8_t   output;            
  
  nbr_keys      = 0;
 80165e0:	4b64      	ldr	r3, [pc, #400]	; (8016774 <KEYBRD_Decode+0x19c>)
 80165e2:	2200      	movs	r2, #0
 80165e4:	701a      	strb	r2, [r3, #0]
  nbr_keys_new  = 0;
 80165e6:	4b64      	ldr	r3, [pc, #400]	; (8016778 <KEYBRD_Decode+0x1a0>)
 80165e8:	2200      	movs	r2, #0
 80165ea:	701a      	strb	r2, [r3, #0]
  nbr_keys_last = 0;
 80165ec:	4b63      	ldr	r3, [pc, #396]	; (801677c <KEYBRD_Decode+0x1a4>)
 80165ee:	2200      	movs	r2, #0
 80165f0:	701a      	strb	r2, [r3, #0]
  key_newest    = 0x00;
 80165f2:	4b63      	ldr	r3, [pc, #396]	; (8016780 <KEYBRD_Decode+0x1a8>)
 80165f4:	2200      	movs	r2, #0
 80165f6:	701a      	strb	r2, [r3, #0]
  
  
  /* Check if Shift key is pressed */                                                                         
  if ((pbuf[0] == KBD_LEFT_SHIFT) || (pbuf[0] == KBD_RIGHT_SHIFT)) {
 80165f8:	687b      	ldr	r3, [r7, #4]
 80165fa:	781b      	ldrb	r3, [r3, #0]
 80165fc:	2b02      	cmp	r3, #2
 80165fe:	d003      	beq.n	8016608 <KEYBRD_Decode+0x30>
 8016600:	687b      	ldr	r3, [r7, #4]
 8016602:	781b      	ldrb	r3, [r3, #0]
 8016604:	2b20      	cmp	r3, #32
 8016606:	d103      	bne.n	8016610 <KEYBRD_Decode+0x38>
    shift = TRUE;
 8016608:	4b5e      	ldr	r3, [pc, #376]	; (8016784 <KEYBRD_Decode+0x1ac>)
 801660a:	2201      	movs	r2, #1
 801660c:	701a      	strb	r2, [r3, #0]
 801660e:	e002      	b.n	8016616 <KEYBRD_Decode+0x3e>
  } else {
    shift = FALSE;
 8016610:	4b5c      	ldr	r3, [pc, #368]	; (8016784 <KEYBRD_Decode+0x1ac>)
 8016612:	2200      	movs	r2, #0
 8016614:	701a      	strb	r2, [r3, #0]
  }
  
  error = FALSE;
 8016616:	2300      	movs	r3, #0
 8016618:	737b      	strb	r3, [r7, #13]
  
  /* Check for the value of pressed key */
  for (ix = 2; ix < 2 + KBR_MAX_NBR_PRESSED; ix++) {                       
 801661a:	2302      	movs	r3, #2
 801661c:	73fb      	strb	r3, [r7, #15]
 801661e:	e016      	b.n	801664e <KEYBRD_Decode+0x76>
    if ((pbuf[ix] == 0x01) ||
 8016620:	7bfb      	ldrb	r3, [r7, #15]
 8016622:	687a      	ldr	r2, [r7, #4]
 8016624:	4413      	add	r3, r2
 8016626:	781b      	ldrb	r3, [r3, #0]
 8016628:	2b01      	cmp	r3, #1
 801662a:	d00b      	beq.n	8016644 <KEYBRD_Decode+0x6c>
        (pbuf[ix] == 0x02) ||
 801662c:	7bfb      	ldrb	r3, [r7, #15]
 801662e:	687a      	ldr	r2, [r7, #4]
 8016630:	4413      	add	r3, r2
 8016632:	781b      	ldrb	r3, [r3, #0]
    if ((pbuf[ix] == 0x01) ||
 8016634:	2b02      	cmp	r3, #2
 8016636:	d005      	beq.n	8016644 <KEYBRD_Decode+0x6c>
          (pbuf[ix] == 0x03)) {
 8016638:	7bfb      	ldrb	r3, [r7, #15]
 801663a:	687a      	ldr	r2, [r7, #4]
 801663c:	4413      	add	r3, r2
 801663e:	781b      	ldrb	r3, [r3, #0]
        (pbuf[ix] == 0x02) ||
 8016640:	2b03      	cmp	r3, #3
 8016642:	d101      	bne.n	8016648 <KEYBRD_Decode+0x70>
            error = TRUE;
 8016644:	2301      	movs	r3, #1
 8016646:	737b      	strb	r3, [r7, #13]
  for (ix = 2; ix < 2 + KBR_MAX_NBR_PRESSED; ix++) {                       
 8016648:	7bfb      	ldrb	r3, [r7, #15]
 801664a:	3301      	adds	r3, #1
 801664c:	73fb      	strb	r3, [r7, #15]
 801664e:	7bfb      	ldrb	r3, [r7, #15]
 8016650:	2b07      	cmp	r3, #7
 8016652:	d9e5      	bls.n	8016620 <KEYBRD_Decode+0x48>
          }
  }
  
  if (error == TRUE) {
 8016654:	7b7b      	ldrb	r3, [r7, #13]
 8016656:	2b01      	cmp	r3, #1
 8016658:	f000 8087 	beq.w	801676a <KEYBRD_Decode+0x192>
    return;
  }
  
  nbr_keys     = 0;
 801665c:	4b45      	ldr	r3, [pc, #276]	; (8016774 <KEYBRD_Decode+0x19c>)
 801665e:	2200      	movs	r2, #0
 8016660:	701a      	strb	r2, [r3, #0]
  nbr_keys_new = 0;
 8016662:	4b45      	ldr	r3, [pc, #276]	; (8016778 <KEYBRD_Decode+0x1a0>)
 8016664:	2200      	movs	r2, #0
 8016666:	701a      	strb	r2, [r3, #0]
  for (ix = 2; ix < 2 + KBR_MAX_NBR_PRESSED; ix++) {
 8016668:	2302      	movs	r3, #2
 801666a:	73fb      	strb	r3, [r7, #15]
 801666c:	e03f      	b.n	80166ee <KEYBRD_Decode+0x116>
    if (pbuf[ix] != 0) {
 801666e:	7bfb      	ldrb	r3, [r7, #15]
 8016670:	687a      	ldr	r2, [r7, #4]
 8016672:	4413      	add	r3, r2
 8016674:	781b      	ldrb	r3, [r3, #0]
 8016676:	2b00      	cmp	r3, #0
 8016678:	d036      	beq.n	80166e8 <KEYBRD_Decode+0x110>
      keys[nbr_keys] = pbuf[ix];                                       
 801667a:	7bfb      	ldrb	r3, [r7, #15]
 801667c:	687a      	ldr	r2, [r7, #4]
 801667e:	4413      	add	r3, r2
 8016680:	4a3c      	ldr	r2, [pc, #240]	; (8016774 <KEYBRD_Decode+0x19c>)
 8016682:	7812      	ldrb	r2, [r2, #0]
 8016684:	7819      	ldrb	r1, [r3, #0]
 8016686:	4b40      	ldr	r3, [pc, #256]	; (8016788 <KEYBRD_Decode+0x1b0>)
 8016688:	5499      	strb	r1, [r3, r2]
      nbr_keys++;
 801668a:	4b3a      	ldr	r3, [pc, #232]	; (8016774 <KEYBRD_Decode+0x19c>)
 801668c:	781b      	ldrb	r3, [r3, #0]
 801668e:	3301      	adds	r3, #1
 8016690:	b2da      	uxtb	r2, r3
 8016692:	4b38      	ldr	r3, [pc, #224]	; (8016774 <KEYBRD_Decode+0x19c>)
 8016694:	701a      	strb	r2, [r3, #0]
      for (jx = 0; jx < nbr_keys_last; jx++) {                         
 8016696:	2300      	movs	r3, #0
 8016698:	73bb      	strb	r3, [r7, #14]
 801669a:	e00b      	b.n	80166b4 <KEYBRD_Decode+0xdc>
        if (pbuf[ix] == keys_last[jx]) {
 801669c:	7bfb      	ldrb	r3, [r7, #15]
 801669e:	687a      	ldr	r2, [r7, #4]
 80166a0:	4413      	add	r3, r2
 80166a2:	781a      	ldrb	r2, [r3, #0]
 80166a4:	7bbb      	ldrb	r3, [r7, #14]
 80166a6:	4939      	ldr	r1, [pc, #228]	; (801678c <KEYBRD_Decode+0x1b4>)
 80166a8:	5ccb      	ldrb	r3, [r1, r3]
 80166aa:	429a      	cmp	r2, r3
 80166ac:	d008      	beq.n	80166c0 <KEYBRD_Decode+0xe8>
      for (jx = 0; jx < nbr_keys_last; jx++) {                         
 80166ae:	7bbb      	ldrb	r3, [r7, #14]
 80166b0:	3301      	adds	r3, #1
 80166b2:	73bb      	strb	r3, [r7, #14]
 80166b4:	4b31      	ldr	r3, [pc, #196]	; (801677c <KEYBRD_Decode+0x1a4>)
 80166b6:	781b      	ldrb	r3, [r3, #0]
 80166b8:	7bba      	ldrb	r2, [r7, #14]
 80166ba:	429a      	cmp	r2, r3
 80166bc:	d3ee      	bcc.n	801669c <KEYBRD_Decode+0xc4>
 80166be:	e000      	b.n	80166c2 <KEYBRD_Decode+0xea>
          break;
 80166c0:	bf00      	nop
        }
      }
      
      if (jx == nbr_keys_last) {
 80166c2:	4b2e      	ldr	r3, [pc, #184]	; (801677c <KEYBRD_Decode+0x1a4>)
 80166c4:	781b      	ldrb	r3, [r3, #0]
 80166c6:	7bba      	ldrb	r2, [r7, #14]
 80166c8:	429a      	cmp	r2, r3
 80166ca:	d10d      	bne.n	80166e8 <KEYBRD_Decode+0x110>
        keys_new[nbr_keys_new] = pbuf[ix];
 80166cc:	7bfb      	ldrb	r3, [r7, #15]
 80166ce:	687a      	ldr	r2, [r7, #4]
 80166d0:	4413      	add	r3, r2
 80166d2:	4a29      	ldr	r2, [pc, #164]	; (8016778 <KEYBRD_Decode+0x1a0>)
 80166d4:	7812      	ldrb	r2, [r2, #0]
 80166d6:	7819      	ldrb	r1, [r3, #0]
 80166d8:	4b2d      	ldr	r3, [pc, #180]	; (8016790 <KEYBRD_Decode+0x1b8>)
 80166da:	5499      	strb	r1, [r3, r2]
        nbr_keys_new++;
 80166dc:	4b26      	ldr	r3, [pc, #152]	; (8016778 <KEYBRD_Decode+0x1a0>)
 80166de:	781b      	ldrb	r3, [r3, #0]
 80166e0:	3301      	adds	r3, #1
 80166e2:	b2da      	uxtb	r2, r3
 80166e4:	4b24      	ldr	r3, [pc, #144]	; (8016778 <KEYBRD_Decode+0x1a0>)
 80166e6:	701a      	strb	r2, [r3, #0]
  for (ix = 2; ix < 2 + KBR_MAX_NBR_PRESSED; ix++) {
 80166e8:	7bfb      	ldrb	r3, [r7, #15]
 80166ea:	3301      	adds	r3, #1
 80166ec:	73fb      	strb	r3, [r7, #15]
 80166ee:	7bfb      	ldrb	r3, [r7, #15]
 80166f0:	2b07      	cmp	r3, #7
 80166f2:	d9bc      	bls.n	801666e <KEYBRD_Decode+0x96>
      }
    }
  }
  
  if (nbr_keys_new == 1) {
 80166f4:	4b20      	ldr	r3, [pc, #128]	; (8016778 <KEYBRD_Decode+0x1a0>)
 80166f6:	781b      	ldrb	r3, [r3, #0]
 80166f8:	2b01      	cmp	r3, #1
 80166fa:	d11f      	bne.n	801673c <KEYBRD_Decode+0x164>
    key_newest = keys_new[0];
 80166fc:	4b24      	ldr	r3, [pc, #144]	; (8016790 <KEYBRD_Decode+0x1b8>)
 80166fe:	781a      	ldrb	r2, [r3, #0]
 8016700:	4b1f      	ldr	r3, [pc, #124]	; (8016780 <KEYBRD_Decode+0x1a8>)
 8016702:	701a      	strb	r2, [r3, #0]
    
    if (shift == TRUE) {
 8016704:	4b1f      	ldr	r3, [pc, #124]	; (8016784 <KEYBRD_Decode+0x1ac>)
 8016706:	781b      	ldrb	r3, [r3, #0]
 8016708:	2b01      	cmp	r3, #1
 801670a:	d109      	bne.n	8016720 <KEYBRD_Decode+0x148>
      output =  HID_KEYBRD_ShiftKey[HID_KEYBRD_Codes[key_newest]];
 801670c:	4b1c      	ldr	r3, [pc, #112]	; (8016780 <KEYBRD_Decode+0x1a8>)
 801670e:	781b      	ldrb	r3, [r3, #0]
 8016710:	461a      	mov	r2, r3
 8016712:	4b20      	ldr	r3, [pc, #128]	; (8016794 <KEYBRD_Decode+0x1bc>)
 8016714:	5c9b      	ldrb	r3, [r3, r2]
 8016716:	461a      	mov	r2, r3
 8016718:	4b1f      	ldr	r3, [pc, #124]	; (8016798 <KEYBRD_Decode+0x1c0>)
 801671a:	569b      	ldrsb	r3, [r3, r2]
 801671c:	733b      	strb	r3, [r7, #12]
 801671e:	e008      	b.n	8016732 <KEYBRD_Decode+0x15a>
    } else {
      output =  HID_KEYBRD_Key[HID_KEYBRD_Codes[key_newest]];
 8016720:	4b17      	ldr	r3, [pc, #92]	; (8016780 <KEYBRD_Decode+0x1a8>)
 8016722:	781b      	ldrb	r3, [r3, #0]
 8016724:	461a      	mov	r2, r3
 8016726:	4b1b      	ldr	r3, [pc, #108]	; (8016794 <KEYBRD_Decode+0x1bc>)
 8016728:	5c9b      	ldrb	r3, [r3, r2]
 801672a:	461a      	mov	r2, r3
 801672c:	4b1b      	ldr	r3, [pc, #108]	; (801679c <KEYBRD_Decode+0x1c4>)
 801672e:	569b      	ldrsb	r3, [r3, r2]
 8016730:	733b      	strb	r3, [r7, #12]
    }
    
    /* call user process handle */
    USR_KEYBRD_ProcessData(output);
 8016732:	7b3b      	ldrb	r3, [r7, #12]
 8016734:	4618      	mov	r0, r3
 8016736:	f7ea fabd 	bl	8000cb4 <USR_KEYBRD_ProcessData>
 801673a:	e002      	b.n	8016742 <KEYBRD_Decode+0x16a>
  } else {
    key_newest = 0x00;
 801673c:	4b10      	ldr	r3, [pc, #64]	; (8016780 <KEYBRD_Decode+0x1a8>)
 801673e:	2200      	movs	r2, #0
 8016740:	701a      	strb	r2, [r3, #0]
  }
  
  
  nbr_keys_last  = nbr_keys;
 8016742:	4b0c      	ldr	r3, [pc, #48]	; (8016774 <KEYBRD_Decode+0x19c>)
 8016744:	781a      	ldrb	r2, [r3, #0]
 8016746:	4b0d      	ldr	r3, [pc, #52]	; (801677c <KEYBRD_Decode+0x1a4>)
 8016748:	701a      	strb	r2, [r3, #0]
  for (ix = 0; ix < KBR_MAX_NBR_PRESSED; ix++) {
 801674a:	2300      	movs	r3, #0
 801674c:	73fb      	strb	r3, [r7, #15]
 801674e:	e008      	b.n	8016762 <KEYBRD_Decode+0x18a>
    keys_last[ix] = keys[ix];
 8016750:	7bfa      	ldrb	r2, [r7, #15]
 8016752:	7bfb      	ldrb	r3, [r7, #15]
 8016754:	490c      	ldr	r1, [pc, #48]	; (8016788 <KEYBRD_Decode+0x1b0>)
 8016756:	5c89      	ldrb	r1, [r1, r2]
 8016758:	4a0c      	ldr	r2, [pc, #48]	; (801678c <KEYBRD_Decode+0x1b4>)
 801675a:	54d1      	strb	r1, [r2, r3]
  for (ix = 0; ix < KBR_MAX_NBR_PRESSED; ix++) {
 801675c:	7bfb      	ldrb	r3, [r7, #15]
 801675e:	3301      	adds	r3, #1
 8016760:	73fb      	strb	r3, [r7, #15]
 8016762:	7bfb      	ldrb	r3, [r7, #15]
 8016764:	2b05      	cmp	r3, #5
 8016766:	d9f3      	bls.n	8016750 <KEYBRD_Decode+0x178>
 8016768:	e000      	b.n	801676c <KEYBRD_Decode+0x194>
    return;
 801676a:	bf00      	nop
  }
}
 801676c:	3710      	adds	r7, #16
 801676e:	46bd      	mov	sp, r7
 8016770:	bd80      	pop	{r7, pc}
 8016772:	bf00      	nop
 8016774:	20003518 	.word	0x20003518
 8016778:	20003519 	.word	0x20003519
 801677c:	2000351a 	.word	0x2000351a
 8016780:	2000351b 	.word	0x2000351b
 8016784:	2000351c 	.word	0x2000351c
 8016788:	20003520 	.word	0x20003520
 801678c:	20003528 	.word	0x20003528
 8016790:	20003530 	.word	0x20003530
 8016794:	08022974 	.word	0x08022974
 8016798:	08022ae0 	.word	0x08022ae0
 801679c:	08022a5c 	.word	0x08022a5c

080167a0 <MOUSE_Init>:
*         Init Mouse State.
* @param  None
* @retval None
*/
static void  MOUSE_Init ( void)
{
 80167a0:	b580      	push	{r7, lr}
 80167a2:	af00      	add	r7, sp, #0
 /* Call User Init*/
 USR_MOUSE_Init();
 80167a4:	f7ea faba 	bl	8000d1c <USR_MOUSE_Init>
}
 80167a8:	bf00      	nop
 80167aa:	bd80      	pop	{r7, pc}

080167ac <MOUSE_Decode>:
*         Decode Mouse data
* @param  data : Pointer to Mouse HID data buffer
* @retval None
*/
static void  MOUSE_Decode(uint8_t *data)
{
 80167ac:	b580      	push	{r7, lr}
 80167ae:	b082      	sub	sp, #8
 80167b0:	af00      	add	r7, sp, #0
 80167b2:	6078      	str	r0, [r7, #4]
  HID_MOUSE_Data.button = data[0];
 80167b4:	687b      	ldr	r3, [r7, #4]
 80167b6:	781a      	ldrb	r2, [r3, #0]
 80167b8:	4b08      	ldr	r3, [pc, #32]	; (80167dc <MOUSE_Decode+0x30>)
 80167ba:	70da      	strb	r2, [r3, #3]

  HID_MOUSE_Data.x      = data[1];
 80167bc:	687b      	ldr	r3, [r7, #4]
 80167be:	785a      	ldrb	r2, [r3, #1]
 80167c0:	4b06      	ldr	r3, [pc, #24]	; (80167dc <MOUSE_Decode+0x30>)
 80167c2:	701a      	strb	r2, [r3, #0]
  HID_MOUSE_Data.y      = data[2];
 80167c4:	687b      	ldr	r3, [r7, #4]
 80167c6:	789a      	ldrb	r2, [r3, #2]
 80167c8:	4b04      	ldr	r3, [pc, #16]	; (80167dc <MOUSE_Decode+0x30>)
 80167ca:	705a      	strb	r2, [r3, #1]
  
  USR_MOUSE_ProcessData(&HID_MOUSE_Data);
 80167cc:	4803      	ldr	r0, [pc, #12]	; (80167dc <MOUSE_Decode+0x30>)
 80167ce:	f7ea fabb 	bl	8000d48 <USR_MOUSE_ProcessData>

}
 80167d2:	bf00      	nop
 80167d4:	3708      	adds	r7, #8
 80167d6:	46bd      	mov	sp, r7
 80167d8:	bd80      	pop	{r7, pc}
 80167da:	bf00      	nop
 80167dc:	20003538 	.word	0x20003538

080167e0 <USBH_CtlReq>:
  */
USBH_Status USBH_CtlReq     (USB_OTG_CORE_HANDLE *pdev, 
                             USBH_HOST           *phost, 
                             uint8_t             *buff,
                             uint16_t            length)
{
 80167e0:	b580      	push	{r7, lr}
 80167e2:	b086      	sub	sp, #24
 80167e4:	af00      	add	r7, sp, #0
 80167e6:	60f8      	str	r0, [r7, #12]
 80167e8:	60b9      	str	r1, [r7, #8]
 80167ea:	607a      	str	r2, [r7, #4]
 80167ec:	807b      	strh	r3, [r7, #2]
  USBH_Status status;
  status = USBH_BUSY;
 80167ee:	2301      	movs	r3, #1
 80167f0:	75fb      	strb	r3, [r7, #23]
  
  switch (phost->RequestState)
 80167f2:	68bb      	ldr	r3, [r7, #8]
 80167f4:	78db      	ldrb	r3, [r3, #3]
 80167f6:	2b01      	cmp	r3, #1
 80167f8:	d002      	beq.n	8016800 <USBH_CtlReq+0x20>
 80167fa:	2b02      	cmp	r3, #2
 80167fc:	d00c      	beq.n	8016818 <USBH_CtlReq+0x38>
      status = USBH_NOT_SUPPORTED;
    }
    break;
    
  default:
    break; 
 80167fe:	e02c      	b.n	801685a <USBH_CtlReq+0x7a>
    USBH_SubmitSetupRequest(phost, buff, length);
 8016800:	887b      	ldrh	r3, [r7, #2]
 8016802:	461a      	mov	r2, r3
 8016804:	6879      	ldr	r1, [r7, #4]
 8016806:	68b8      	ldr	r0, [r7, #8]
 8016808:	f000 fa38 	bl	8016c7c <USBH_SubmitSetupRequest>
    phost->RequestState = CMD_WAIT;
 801680c:	68bb      	ldr	r3, [r7, #8]
 801680e:	2202      	movs	r2, #2
 8016810:	70da      	strb	r2, [r3, #3]
    status = USBH_BUSY;
 8016812:	2301      	movs	r3, #1
 8016814:	75fb      	strb	r3, [r7, #23]
    break;
 8016816:	e020      	b.n	801685a <USBH_CtlReq+0x7a>
     if (phost->Control.state == CTRL_COMPLETE ) 
 8016818:	68bb      	ldr	r3, [r7, #8]
 801681a:	7f1b      	ldrb	r3, [r3, #28]
 801681c:	2b0d      	cmp	r3, #13
 801681e:	d108      	bne.n	8016832 <USBH_CtlReq+0x52>
      phost->RequestState = CMD_SEND;
 8016820:	68bb      	ldr	r3, [r7, #8]
 8016822:	2201      	movs	r2, #1
 8016824:	70da      	strb	r2, [r3, #3]
      phost->Control.state =CTRL_IDLE;  
 8016826:	68bb      	ldr	r3, [r7, #8]
 8016828:	2200      	movs	r2, #0
 801682a:	771a      	strb	r2, [r3, #28]
      status = USBH_OK;      
 801682c:	2300      	movs	r3, #0
 801682e:	75fb      	strb	r3, [r7, #23]
    break;
 8016830:	e012      	b.n	8016858 <USBH_CtlReq+0x78>
    else if  (phost->Control.state == CTRL_ERROR)
 8016832:	68bb      	ldr	r3, [r7, #8]
 8016834:	7f1b      	ldrb	r3, [r3, #28]
 8016836:	2b0b      	cmp	r3, #11
 8016838:	d105      	bne.n	8016846 <USBH_CtlReq+0x66>
      phost->RequestState = CMD_SEND;
 801683a:	68bb      	ldr	r3, [r7, #8]
 801683c:	2201      	movs	r2, #1
 801683e:	70da      	strb	r2, [r3, #3]
      status = USBH_FAIL;
 8016840:	2302      	movs	r3, #2
 8016842:	75fb      	strb	r3, [r7, #23]
    break;
 8016844:	e008      	b.n	8016858 <USBH_CtlReq+0x78>
     else if  (phost->Control.state == CTRL_STALLED )
 8016846:	68bb      	ldr	r3, [r7, #8]
 8016848:	7f1b      	ldrb	r3, [r3, #28]
 801684a:	2b0c      	cmp	r3, #12
 801684c:	d104      	bne.n	8016858 <USBH_CtlReq+0x78>
      phost->RequestState = CMD_SEND;
 801684e:	68bb      	ldr	r3, [r7, #8]
 8016850:	2201      	movs	r2, #1
 8016852:	70da      	strb	r2, [r3, #3]
      status = USBH_NOT_SUPPORTED;
 8016854:	2303      	movs	r3, #3
 8016856:	75fb      	strb	r3, [r7, #23]
    break;
 8016858:	bf00      	nop
  }
  return status;
 801685a:	7dfb      	ldrb	r3, [r7, #23]
}
 801685c:	4618      	mov	r0, r3
 801685e:	3718      	adds	r7, #24
 8016860:	46bd      	mov	sp, r7
 8016862:	bd80      	pop	{r7, pc}

08016864 <USBH_CtlSendSetup>:
  * @param  hc_num: Host channel Number
  * @retval Status
  */
USBH_Status USBH_CtlSendSetup ( USB_OTG_CORE_HANDLE *pdev, 
                                uint8_t *buff, 
                                uint8_t hc_num){
 8016864:	b580      	push	{r7, lr}
 8016866:	b084      	sub	sp, #16
 8016868:	af00      	add	r7, sp, #0
 801686a:	60f8      	str	r0, [r7, #12]
 801686c:	60b9      	str	r1, [r7, #8]
 801686e:	4613      	mov	r3, r2
 8016870:	71fb      	strb	r3, [r7, #7]
  pdev->host.hc[hc_num].ep_is_in = 0;
 8016872:	79fb      	ldrb	r3, [r7, #7]
 8016874:	68fa      	ldr	r2, [r7, #12]
 8016876:	015b      	lsls	r3, r3, #5
 8016878:	4413      	add	r3, r2
 801687a:	f203 33ae 	addw	r3, r3, #942	; 0x3ae
 801687e:	2200      	movs	r2, #0
 8016880:	701a      	strb	r2, [r3, #0]
  pdev->host.hc[hc_num].data_pid = HC_PID_SETUP;   
 8016882:	79fb      	ldrb	r3, [r7, #7]
 8016884:	68fa      	ldr	r2, [r7, #12]
 8016886:	3315      	adds	r3, #21
 8016888:	015b      	lsls	r3, r3, #5
 801688a:	4413      	add	r3, r2
 801688c:	f503 738a 	add.w	r3, r3, #276	; 0x114
 8016890:	2203      	movs	r2, #3
 8016892:	701a      	strb	r2, [r3, #0]
  pdev->host.hc[hc_num].xfer_buff = buff;
 8016894:	79fb      	ldrb	r3, [r7, #7]
 8016896:	68fa      	ldr	r2, [r7, #12]
 8016898:	3315      	adds	r3, #21
 801689a:	015b      	lsls	r3, r3, #5
 801689c:	4413      	add	r3, r2
 801689e:	f503 738c 	add.w	r3, r3, #280	; 0x118
 80168a2:	68ba      	ldr	r2, [r7, #8]
 80168a4:	601a      	str	r2, [r3, #0]
  pdev->host.hc[hc_num].xfer_len = USBH_SETUP_PKT_SIZE;   
 80168a6:	79fb      	ldrb	r3, [r7, #7]
 80168a8:	68fa      	ldr	r2, [r7, #12]
 80168aa:	015b      	lsls	r3, r3, #5
 80168ac:	4413      	add	r3, r2
 80168ae:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 80168b2:	2208      	movs	r2, #8
 80168b4:	601a      	str	r2, [r3, #0]

  return (USBH_Status)HCD_SubmitRequest (pdev , hc_num);   
 80168b6:	79fb      	ldrb	r3, [r7, #7]
 80168b8:	4619      	mov	r1, r3
 80168ba:	68f8      	ldr	r0, [r7, #12]
 80168bc:	f7fd fb61 	bl	8013f82 <HCD_SubmitRequest>
 80168c0:	4603      	mov	r3, r0
 80168c2:	b2db      	uxtb	r3, r3
}
 80168c4:	4618      	mov	r0, r3
 80168c6:	3710      	adds	r7, #16
 80168c8:	46bd      	mov	sp, r7
 80168ca:	bd80      	pop	{r7, pc}

080168cc <USBH_CtlSendData>:
  */
USBH_Status USBH_CtlSendData ( USB_OTG_CORE_HANDLE *pdev, 
                                uint8_t *buff, 
                                uint16_t length,
                                uint8_t hc_num)
{
 80168cc:	b580      	push	{r7, lr}
 80168ce:	b084      	sub	sp, #16
 80168d0:	af00      	add	r7, sp, #0
 80168d2:	60f8      	str	r0, [r7, #12]
 80168d4:	60b9      	str	r1, [r7, #8]
 80168d6:	4611      	mov	r1, r2
 80168d8:	461a      	mov	r2, r3
 80168da:	460b      	mov	r3, r1
 80168dc:	80fb      	strh	r3, [r7, #6]
 80168de:	4613      	mov	r3, r2
 80168e0:	717b      	strb	r3, [r7, #5]
  pdev->host.hc[hc_num].ep_is_in = 0;
 80168e2:	797b      	ldrb	r3, [r7, #5]
 80168e4:	68fa      	ldr	r2, [r7, #12]
 80168e6:	015b      	lsls	r3, r3, #5
 80168e8:	4413      	add	r3, r2
 80168ea:	f203 33ae 	addw	r3, r3, #942	; 0x3ae
 80168ee:	2200      	movs	r2, #0
 80168f0:	701a      	strb	r2, [r3, #0]
  pdev->host.hc[hc_num].xfer_buff = buff;
 80168f2:	797b      	ldrb	r3, [r7, #5]
 80168f4:	68fa      	ldr	r2, [r7, #12]
 80168f6:	3315      	adds	r3, #21
 80168f8:	015b      	lsls	r3, r3, #5
 80168fa:	4413      	add	r3, r2
 80168fc:	f503 738c 	add.w	r3, r3, #280	; 0x118
 8016900:	68ba      	ldr	r2, [r7, #8]
 8016902:	601a      	str	r2, [r3, #0]
  pdev->host.hc[hc_num].xfer_len = length;
 8016904:	797b      	ldrb	r3, [r7, #5]
 8016906:	88fa      	ldrh	r2, [r7, #6]
 8016908:	68f9      	ldr	r1, [r7, #12]
 801690a:	015b      	lsls	r3, r3, #5
 801690c:	440b      	add	r3, r1
 801690e:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 8016912:	601a      	str	r2, [r3, #0]
 
  if ( length == 0 )
 8016914:	88fb      	ldrh	r3, [r7, #6]
 8016916:	2b00      	cmp	r3, #0
 8016918:	d107      	bne.n	801692a <USBH_CtlSendData+0x5e>
  { /* For Status OUT stage, Length==0, Status Out PID = 1 */
    pdev->host.hc[hc_num].toggle_out = 1;   
 801691a:	797b      	ldrb	r3, [r7, #5]
 801691c:	68fa      	ldr	r2, [r7, #12]
 801691e:	331e      	adds	r3, #30
 8016920:	015b      	lsls	r3, r3, #5
 8016922:	4413      	add	r3, r2
 8016924:	3305      	adds	r3, #5
 8016926:	2201      	movs	r2, #1
 8016928:	701a      	strb	r2, [r3, #0]
  }
 
 /* Set the Data Toggle bit as per the Flag */
  if ( pdev->host.hc[hc_num].toggle_out == 0)
 801692a:	797b      	ldrb	r3, [r7, #5]
 801692c:	68fa      	ldr	r2, [r7, #12]
 801692e:	331e      	adds	r3, #30
 8016930:	015b      	lsls	r3, r3, #5
 8016932:	4413      	add	r3, r2
 8016934:	3305      	adds	r3, #5
 8016936:	781b      	ldrb	r3, [r3, #0]
 8016938:	2b00      	cmp	r3, #0
 801693a:	d109      	bne.n	8016950 <USBH_CtlSendData+0x84>
  { /* Put the PID 0 */
      pdev->host.hc[hc_num].data_pid = HC_PID_DATA0;    
 801693c:	797b      	ldrb	r3, [r7, #5]
 801693e:	68fa      	ldr	r2, [r7, #12]
 8016940:	3315      	adds	r3, #21
 8016942:	015b      	lsls	r3, r3, #5
 8016944:	4413      	add	r3, r2
 8016946:	f503 738a 	add.w	r3, r3, #276	; 0x114
 801694a:	2200      	movs	r2, #0
 801694c:	701a      	strb	r2, [r3, #0]
 801694e:	e008      	b.n	8016962 <USBH_CtlSendData+0x96>
  }
 else
 { /* Put the PID 1 */
      pdev->host.hc[hc_num].data_pid = HC_PID_DATA1 ;
 8016950:	797b      	ldrb	r3, [r7, #5]
 8016952:	68fa      	ldr	r2, [r7, #12]
 8016954:	3315      	adds	r3, #21
 8016956:	015b      	lsls	r3, r3, #5
 8016958:	4413      	add	r3, r2
 801695a:	f503 738a 	add.w	r3, r3, #276	; 0x114
 801695e:	2202      	movs	r2, #2
 8016960:	701a      	strb	r2, [r3, #0]
 }

  HCD_SubmitRequest (pdev , hc_num);   
 8016962:	797b      	ldrb	r3, [r7, #5]
 8016964:	4619      	mov	r1, r3
 8016966:	68f8      	ldr	r0, [r7, #12]
 8016968:	f7fd fb0b 	bl	8013f82 <HCD_SubmitRequest>
   
  return USBH_OK;
 801696c:	2300      	movs	r3, #0
}
 801696e:	4618      	mov	r0, r3
 8016970:	3710      	adds	r7, #16
 8016972:	46bd      	mov	sp, r7
 8016974:	bd80      	pop	{r7, pc}

08016976 <USBH_CtlReceiveData>:
  */
USBH_Status USBH_CtlReceiveData(USB_OTG_CORE_HANDLE *pdev, 
                                uint8_t* buff, 
                                uint16_t length,
                                uint8_t hc_num)
{
 8016976:	b580      	push	{r7, lr}
 8016978:	b084      	sub	sp, #16
 801697a:	af00      	add	r7, sp, #0
 801697c:	60f8      	str	r0, [r7, #12]
 801697e:	60b9      	str	r1, [r7, #8]
 8016980:	4611      	mov	r1, r2
 8016982:	461a      	mov	r2, r3
 8016984:	460b      	mov	r3, r1
 8016986:	80fb      	strh	r3, [r7, #6]
 8016988:	4613      	mov	r3, r2
 801698a:	717b      	strb	r3, [r7, #5]

  pdev->host.hc[hc_num].ep_is_in = 1;
 801698c:	797b      	ldrb	r3, [r7, #5]
 801698e:	68fa      	ldr	r2, [r7, #12]
 8016990:	015b      	lsls	r3, r3, #5
 8016992:	4413      	add	r3, r2
 8016994:	f203 33ae 	addw	r3, r3, #942	; 0x3ae
 8016998:	2201      	movs	r2, #1
 801699a:	701a      	strb	r2, [r3, #0]
  pdev->host.hc[hc_num].data_pid = HC_PID_DATA1;
 801699c:	797b      	ldrb	r3, [r7, #5]
 801699e:	68fa      	ldr	r2, [r7, #12]
 80169a0:	3315      	adds	r3, #21
 80169a2:	015b      	lsls	r3, r3, #5
 80169a4:	4413      	add	r3, r2
 80169a6:	f503 738a 	add.w	r3, r3, #276	; 0x114
 80169aa:	2202      	movs	r2, #2
 80169ac:	701a      	strb	r2, [r3, #0]
  pdev->host.hc[hc_num].xfer_buff = buff;
 80169ae:	797b      	ldrb	r3, [r7, #5]
 80169b0:	68fa      	ldr	r2, [r7, #12]
 80169b2:	3315      	adds	r3, #21
 80169b4:	015b      	lsls	r3, r3, #5
 80169b6:	4413      	add	r3, r2
 80169b8:	f503 738c 	add.w	r3, r3, #280	; 0x118
 80169bc:	68ba      	ldr	r2, [r7, #8]
 80169be:	601a      	str	r2, [r3, #0]
  pdev->host.hc[hc_num].xfer_len = length;  
 80169c0:	797b      	ldrb	r3, [r7, #5]
 80169c2:	88fa      	ldrh	r2, [r7, #6]
 80169c4:	68f9      	ldr	r1, [r7, #12]
 80169c6:	015b      	lsls	r3, r3, #5
 80169c8:	440b      	add	r3, r1
 80169ca:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 80169ce:	601a      	str	r2, [r3, #0]

  HCD_SubmitRequest (pdev , hc_num);   
 80169d0:	797b      	ldrb	r3, [r7, #5]
 80169d2:	4619      	mov	r1, r3
 80169d4:	68f8      	ldr	r0, [r7, #12]
 80169d6:	f7fd fad4 	bl	8013f82 <HCD_SubmitRequest>
  
  return USBH_OK;
 80169da:	2300      	movs	r3, #0
  
}
 80169dc:	4618      	mov	r0, r3
 80169de:	3710      	adds	r7, #16
 80169e0:	46bd      	mov	sp, r7
 80169e2:	bd80      	pop	{r7, pc}

080169e4 <USBH_BulkSendData>:
  */
USBH_Status USBH_BulkSendData ( USB_OTG_CORE_HANDLE *pdev, 
                                uint8_t *buff, 
                                uint16_t length,
                                uint8_t hc_num)
{ 
 80169e4:	b580      	push	{r7, lr}
 80169e6:	b084      	sub	sp, #16
 80169e8:	af00      	add	r7, sp, #0
 80169ea:	60f8      	str	r0, [r7, #12]
 80169ec:	60b9      	str	r1, [r7, #8]
 80169ee:	4611      	mov	r1, r2
 80169f0:	461a      	mov	r2, r3
 80169f2:	460b      	mov	r3, r1
 80169f4:	80fb      	strh	r3, [r7, #6]
 80169f6:	4613      	mov	r3, r2
 80169f8:	717b      	strb	r3, [r7, #5]
  pdev->host.hc[hc_num].ep_is_in = 0;
 80169fa:	797b      	ldrb	r3, [r7, #5]
 80169fc:	68fa      	ldr	r2, [r7, #12]
 80169fe:	015b      	lsls	r3, r3, #5
 8016a00:	4413      	add	r3, r2
 8016a02:	f203 33ae 	addw	r3, r3, #942	; 0x3ae
 8016a06:	2200      	movs	r2, #0
 8016a08:	701a      	strb	r2, [r3, #0]
  pdev->host.hc[hc_num].xfer_buff = buff;
 8016a0a:	797b      	ldrb	r3, [r7, #5]
 8016a0c:	68fa      	ldr	r2, [r7, #12]
 8016a0e:	3315      	adds	r3, #21
 8016a10:	015b      	lsls	r3, r3, #5
 8016a12:	4413      	add	r3, r2
 8016a14:	f503 738c 	add.w	r3, r3, #280	; 0x118
 8016a18:	68ba      	ldr	r2, [r7, #8]
 8016a1a:	601a      	str	r2, [r3, #0]
  pdev->host.hc[hc_num].xfer_len = length;  
 8016a1c:	797b      	ldrb	r3, [r7, #5]
 8016a1e:	88fa      	ldrh	r2, [r7, #6]
 8016a20:	68f9      	ldr	r1, [r7, #12]
 8016a22:	015b      	lsls	r3, r3, #5
 8016a24:	440b      	add	r3, r1
 8016a26:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 8016a2a:	601a      	str	r2, [r3, #0]

 /* Set the Data Toggle bit as per the Flag */
  if ( pdev->host.hc[hc_num].toggle_out == 0)
 8016a2c:	797b      	ldrb	r3, [r7, #5]
 8016a2e:	68fa      	ldr	r2, [r7, #12]
 8016a30:	331e      	adds	r3, #30
 8016a32:	015b      	lsls	r3, r3, #5
 8016a34:	4413      	add	r3, r2
 8016a36:	3305      	adds	r3, #5
 8016a38:	781b      	ldrb	r3, [r3, #0]
 8016a3a:	2b00      	cmp	r3, #0
 8016a3c:	d109      	bne.n	8016a52 <USBH_BulkSendData+0x6e>
  { /* Put the PID 0 */
      pdev->host.hc[hc_num].data_pid = HC_PID_DATA0;    
 8016a3e:	797b      	ldrb	r3, [r7, #5]
 8016a40:	68fa      	ldr	r2, [r7, #12]
 8016a42:	3315      	adds	r3, #21
 8016a44:	015b      	lsls	r3, r3, #5
 8016a46:	4413      	add	r3, r2
 8016a48:	f503 738a 	add.w	r3, r3, #276	; 0x114
 8016a4c:	2200      	movs	r2, #0
 8016a4e:	701a      	strb	r2, [r3, #0]
 8016a50:	e008      	b.n	8016a64 <USBH_BulkSendData+0x80>
  }
 else
 { /* Put the PID 1 */
      pdev->host.hc[hc_num].data_pid = HC_PID_DATA1 ;
 8016a52:	797b      	ldrb	r3, [r7, #5]
 8016a54:	68fa      	ldr	r2, [r7, #12]
 8016a56:	3315      	adds	r3, #21
 8016a58:	015b      	lsls	r3, r3, #5
 8016a5a:	4413      	add	r3, r2
 8016a5c:	f503 738a 	add.w	r3, r3, #276	; 0x114
 8016a60:	2202      	movs	r2, #2
 8016a62:	701a      	strb	r2, [r3, #0]
 }

  HCD_SubmitRequest (pdev , hc_num);   
 8016a64:	797b      	ldrb	r3, [r7, #5]
 8016a66:	4619      	mov	r1, r3
 8016a68:	68f8      	ldr	r0, [r7, #12]
 8016a6a:	f7fd fa8a 	bl	8013f82 <HCD_SubmitRequest>
  return USBH_OK;
 8016a6e:	2300      	movs	r3, #0
}
 8016a70:	4618      	mov	r0, r3
 8016a72:	3710      	adds	r7, #16
 8016a74:	46bd      	mov	sp, r7
 8016a76:	bd80      	pop	{r7, pc}

08016a78 <USBH_BulkReceiveData>:
  */
USBH_Status USBH_BulkReceiveData( USB_OTG_CORE_HANDLE *pdev, 
                                uint8_t *buff, 
                                uint16_t length,
                                uint8_t hc_num)
{
 8016a78:	b580      	push	{r7, lr}
 8016a7a:	b084      	sub	sp, #16
 8016a7c:	af00      	add	r7, sp, #0
 8016a7e:	60f8      	str	r0, [r7, #12]
 8016a80:	60b9      	str	r1, [r7, #8]
 8016a82:	4611      	mov	r1, r2
 8016a84:	461a      	mov	r2, r3
 8016a86:	460b      	mov	r3, r1
 8016a88:	80fb      	strh	r3, [r7, #6]
 8016a8a:	4613      	mov	r3, r2
 8016a8c:	717b      	strb	r3, [r7, #5]
  pdev->host.hc[hc_num].ep_is_in = 1;   
 8016a8e:	797b      	ldrb	r3, [r7, #5]
 8016a90:	68fa      	ldr	r2, [r7, #12]
 8016a92:	015b      	lsls	r3, r3, #5
 8016a94:	4413      	add	r3, r2
 8016a96:	f203 33ae 	addw	r3, r3, #942	; 0x3ae
 8016a9a:	2201      	movs	r2, #1
 8016a9c:	701a      	strb	r2, [r3, #0]
  pdev->host.hc[hc_num].xfer_buff = buff;
 8016a9e:	797b      	ldrb	r3, [r7, #5]
 8016aa0:	68fa      	ldr	r2, [r7, #12]
 8016aa2:	3315      	adds	r3, #21
 8016aa4:	015b      	lsls	r3, r3, #5
 8016aa6:	4413      	add	r3, r2
 8016aa8:	f503 738c 	add.w	r3, r3, #280	; 0x118
 8016aac:	68ba      	ldr	r2, [r7, #8]
 8016aae:	601a      	str	r2, [r3, #0]
  pdev->host.hc[hc_num].xfer_len = length;
 8016ab0:	797b      	ldrb	r3, [r7, #5]
 8016ab2:	88fa      	ldrh	r2, [r7, #6]
 8016ab4:	68f9      	ldr	r1, [r7, #12]
 8016ab6:	015b      	lsls	r3, r3, #5
 8016ab8:	440b      	add	r3, r1
 8016aba:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 8016abe:	601a      	str	r2, [r3, #0]
  

  if( pdev->host.hc[hc_num].toggle_in == 0)
 8016ac0:	797b      	ldrb	r3, [r7, #5]
 8016ac2:	68fa      	ldr	r2, [r7, #12]
 8016ac4:	331e      	adds	r3, #30
 8016ac6:	015b      	lsls	r3, r3, #5
 8016ac8:	4413      	add	r3, r2
 8016aca:	3304      	adds	r3, #4
 8016acc:	781b      	ldrb	r3, [r3, #0]
 8016ace:	2b00      	cmp	r3, #0
 8016ad0:	d109      	bne.n	8016ae6 <USBH_BulkReceiveData+0x6e>
  {
    pdev->host.hc[hc_num].data_pid = HC_PID_DATA0;
 8016ad2:	797b      	ldrb	r3, [r7, #5]
 8016ad4:	68fa      	ldr	r2, [r7, #12]
 8016ad6:	3315      	adds	r3, #21
 8016ad8:	015b      	lsls	r3, r3, #5
 8016ada:	4413      	add	r3, r2
 8016adc:	f503 738a 	add.w	r3, r3, #276	; 0x114
 8016ae0:	2200      	movs	r2, #0
 8016ae2:	701a      	strb	r2, [r3, #0]
 8016ae4:	e008      	b.n	8016af8 <USBH_BulkReceiveData+0x80>
  }
  else
  {
    pdev->host.hc[hc_num].data_pid = HC_PID_DATA1;
 8016ae6:	797b      	ldrb	r3, [r7, #5]
 8016ae8:	68fa      	ldr	r2, [r7, #12]
 8016aea:	3315      	adds	r3, #21
 8016aec:	015b      	lsls	r3, r3, #5
 8016aee:	4413      	add	r3, r2
 8016af0:	f503 738a 	add.w	r3, r3, #276	; 0x114
 8016af4:	2202      	movs	r2, #2
 8016af6:	701a      	strb	r2, [r3, #0]
  }

  HCD_SubmitRequest (pdev , hc_num);  
 8016af8:	797b      	ldrb	r3, [r7, #5]
 8016afa:	4619      	mov	r1, r3
 8016afc:	68f8      	ldr	r0, [r7, #12]
 8016afe:	f7fd fa40 	bl	8013f82 <HCD_SubmitRequest>
  return USBH_OK;
 8016b02:	2300      	movs	r3, #0
}
 8016b04:	4618      	mov	r0, r3
 8016b06:	3710      	adds	r7, #16
 8016b08:	46bd      	mov	sp, r7
 8016b0a:	bd80      	pop	{r7, pc}

08016b0c <USBH_InterruptReceiveData>:
  */
USBH_Status USBH_InterruptReceiveData( USB_OTG_CORE_HANDLE *pdev, 
                                uint8_t *buff, 
                                uint8_t length,
                                uint8_t hc_num)
{
 8016b0c:	b580      	push	{r7, lr}
 8016b0e:	b084      	sub	sp, #16
 8016b10:	af00      	add	r7, sp, #0
 8016b12:	60f8      	str	r0, [r7, #12]
 8016b14:	60b9      	str	r1, [r7, #8]
 8016b16:	4611      	mov	r1, r2
 8016b18:	461a      	mov	r2, r3
 8016b1a:	460b      	mov	r3, r1
 8016b1c:	71fb      	strb	r3, [r7, #7]
 8016b1e:	4613      	mov	r3, r2
 8016b20:	71bb      	strb	r3, [r7, #6]

  pdev->host.hc[hc_num].ep_is_in = 1;  
 8016b22:	79bb      	ldrb	r3, [r7, #6]
 8016b24:	68fa      	ldr	r2, [r7, #12]
 8016b26:	015b      	lsls	r3, r3, #5
 8016b28:	4413      	add	r3, r2
 8016b2a:	f203 33ae 	addw	r3, r3, #942	; 0x3ae
 8016b2e:	2201      	movs	r2, #1
 8016b30:	701a      	strb	r2, [r3, #0]
  pdev->host.hc[hc_num].xfer_buff = buff;
 8016b32:	79bb      	ldrb	r3, [r7, #6]
 8016b34:	68fa      	ldr	r2, [r7, #12]
 8016b36:	3315      	adds	r3, #21
 8016b38:	015b      	lsls	r3, r3, #5
 8016b3a:	4413      	add	r3, r2
 8016b3c:	f503 738c 	add.w	r3, r3, #280	; 0x118
 8016b40:	68ba      	ldr	r2, [r7, #8]
 8016b42:	601a      	str	r2, [r3, #0]
  pdev->host.hc[hc_num].xfer_len = length;
 8016b44:	79bb      	ldrb	r3, [r7, #6]
 8016b46:	79fa      	ldrb	r2, [r7, #7]
 8016b48:	68f9      	ldr	r1, [r7, #12]
 8016b4a:	015b      	lsls	r3, r3, #5
 8016b4c:	440b      	add	r3, r1
 8016b4e:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 8016b52:	601a      	str	r2, [r3, #0]
  

  
  if(pdev->host.hc[hc_num].toggle_in == 0)
 8016b54:	79bb      	ldrb	r3, [r7, #6]
 8016b56:	68fa      	ldr	r2, [r7, #12]
 8016b58:	331e      	adds	r3, #30
 8016b5a:	015b      	lsls	r3, r3, #5
 8016b5c:	4413      	add	r3, r2
 8016b5e:	3304      	adds	r3, #4
 8016b60:	781b      	ldrb	r3, [r3, #0]
 8016b62:	2b00      	cmp	r3, #0
 8016b64:	d109      	bne.n	8016b7a <USBH_InterruptReceiveData+0x6e>
  {
    pdev->host.hc[hc_num].data_pid = HC_PID_DATA0;
 8016b66:	79bb      	ldrb	r3, [r7, #6]
 8016b68:	68fa      	ldr	r2, [r7, #12]
 8016b6a:	3315      	adds	r3, #21
 8016b6c:	015b      	lsls	r3, r3, #5
 8016b6e:	4413      	add	r3, r2
 8016b70:	f503 738a 	add.w	r3, r3, #276	; 0x114
 8016b74:	2200      	movs	r2, #0
 8016b76:	701a      	strb	r2, [r3, #0]
 8016b78:	e008      	b.n	8016b8c <USBH_InterruptReceiveData+0x80>
  }
  else
  {
    pdev->host.hc[hc_num].data_pid = HC_PID_DATA1;
 8016b7a:	79bb      	ldrb	r3, [r7, #6]
 8016b7c:	68fa      	ldr	r2, [r7, #12]
 8016b7e:	3315      	adds	r3, #21
 8016b80:	015b      	lsls	r3, r3, #5
 8016b82:	4413      	add	r3, r2
 8016b84:	f503 738a 	add.w	r3, r3, #276	; 0x114
 8016b88:	2202      	movs	r2, #2
 8016b8a:	701a      	strb	r2, [r3, #0]
  }

  /* toggle DATA PID */
  pdev->host.hc[hc_num].toggle_in ^= 1;  
 8016b8c:	79bb      	ldrb	r3, [r7, #6]
 8016b8e:	68fa      	ldr	r2, [r7, #12]
 8016b90:	331e      	adds	r3, #30
 8016b92:	015b      	lsls	r3, r3, #5
 8016b94:	4413      	add	r3, r2
 8016b96:	3304      	adds	r3, #4
 8016b98:	781a      	ldrb	r2, [r3, #0]
 8016b9a:	79bb      	ldrb	r3, [r7, #6]
 8016b9c:	f082 0201 	eor.w	r2, r2, #1
 8016ba0:	b2d1      	uxtb	r1, r2
 8016ba2:	68fa      	ldr	r2, [r7, #12]
 8016ba4:	331e      	adds	r3, #30
 8016ba6:	015b      	lsls	r3, r3, #5
 8016ba8:	4413      	add	r3, r2
 8016baa:	3304      	adds	r3, #4
 8016bac:	460a      	mov	r2, r1
 8016bae:	701a      	strb	r2, [r3, #0]
  
  HCD_SubmitRequest (pdev , hc_num);  
 8016bb0:	79bb      	ldrb	r3, [r7, #6]
 8016bb2:	4619      	mov	r1, r3
 8016bb4:	68f8      	ldr	r0, [r7, #12]
 8016bb6:	f7fd f9e4 	bl	8013f82 <HCD_SubmitRequest>
  
  return USBH_OK;
 8016bba:	2300      	movs	r3, #0
}
 8016bbc:	4618      	mov	r0, r3
 8016bbe:	3710      	adds	r7, #16
 8016bc0:	46bd      	mov	sp, r7
 8016bc2:	bd80      	pop	{r7, pc}

08016bc4 <USBH_InterruptSendData>:
  */
USBH_Status USBH_InterruptSendData( USB_OTG_CORE_HANDLE *pdev, 
                                uint8_t *buff, 
                                uint8_t length,
                                uint8_t hc_num)
{
 8016bc4:	b580      	push	{r7, lr}
 8016bc6:	b084      	sub	sp, #16
 8016bc8:	af00      	add	r7, sp, #0
 8016bca:	60f8      	str	r0, [r7, #12]
 8016bcc:	60b9      	str	r1, [r7, #8]
 8016bce:	4611      	mov	r1, r2
 8016bd0:	461a      	mov	r2, r3
 8016bd2:	460b      	mov	r3, r1
 8016bd4:	71fb      	strb	r3, [r7, #7]
 8016bd6:	4613      	mov	r3, r2
 8016bd8:	71bb      	strb	r3, [r7, #6]

  pdev->host.hc[hc_num].ep_is_in = 0;  
 8016bda:	79bb      	ldrb	r3, [r7, #6]
 8016bdc:	68fa      	ldr	r2, [r7, #12]
 8016bde:	015b      	lsls	r3, r3, #5
 8016be0:	4413      	add	r3, r2
 8016be2:	f203 33ae 	addw	r3, r3, #942	; 0x3ae
 8016be6:	2200      	movs	r2, #0
 8016be8:	701a      	strb	r2, [r3, #0]
  pdev->host.hc[hc_num].xfer_buff = buff;
 8016bea:	79bb      	ldrb	r3, [r7, #6]
 8016bec:	68fa      	ldr	r2, [r7, #12]
 8016bee:	3315      	adds	r3, #21
 8016bf0:	015b      	lsls	r3, r3, #5
 8016bf2:	4413      	add	r3, r2
 8016bf4:	f503 738c 	add.w	r3, r3, #280	; 0x118
 8016bf8:	68ba      	ldr	r2, [r7, #8]
 8016bfa:	601a      	str	r2, [r3, #0]
  pdev->host.hc[hc_num].xfer_len = length;
 8016bfc:	79bb      	ldrb	r3, [r7, #6]
 8016bfe:	79fa      	ldrb	r2, [r7, #7]
 8016c00:	68f9      	ldr	r1, [r7, #12]
 8016c02:	015b      	lsls	r3, r3, #5
 8016c04:	440b      	add	r3, r1
 8016c06:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 8016c0a:	601a      	str	r2, [r3, #0]
  
  if(pdev->host.hc[hc_num].toggle_in == 0)
 8016c0c:	79bb      	ldrb	r3, [r7, #6]
 8016c0e:	68fa      	ldr	r2, [r7, #12]
 8016c10:	331e      	adds	r3, #30
 8016c12:	015b      	lsls	r3, r3, #5
 8016c14:	4413      	add	r3, r2
 8016c16:	3304      	adds	r3, #4
 8016c18:	781b      	ldrb	r3, [r3, #0]
 8016c1a:	2b00      	cmp	r3, #0
 8016c1c:	d109      	bne.n	8016c32 <USBH_InterruptSendData+0x6e>
  {
    pdev->host.hc[hc_num].data_pid = HC_PID_DATA0;
 8016c1e:	79bb      	ldrb	r3, [r7, #6]
 8016c20:	68fa      	ldr	r2, [r7, #12]
 8016c22:	3315      	adds	r3, #21
 8016c24:	015b      	lsls	r3, r3, #5
 8016c26:	4413      	add	r3, r2
 8016c28:	f503 738a 	add.w	r3, r3, #276	; 0x114
 8016c2c:	2200      	movs	r2, #0
 8016c2e:	701a      	strb	r2, [r3, #0]
 8016c30:	e008      	b.n	8016c44 <USBH_InterruptSendData+0x80>
  }
  else
  {
    pdev->host.hc[hc_num].data_pid = HC_PID_DATA1;
 8016c32:	79bb      	ldrb	r3, [r7, #6]
 8016c34:	68fa      	ldr	r2, [r7, #12]
 8016c36:	3315      	adds	r3, #21
 8016c38:	015b      	lsls	r3, r3, #5
 8016c3a:	4413      	add	r3, r2
 8016c3c:	f503 738a 	add.w	r3, r3, #276	; 0x114
 8016c40:	2202      	movs	r2, #2
 8016c42:	701a      	strb	r2, [r3, #0]
  }

  pdev->host.hc[hc_num].toggle_in ^= 1;  
 8016c44:	79bb      	ldrb	r3, [r7, #6]
 8016c46:	68fa      	ldr	r2, [r7, #12]
 8016c48:	331e      	adds	r3, #30
 8016c4a:	015b      	lsls	r3, r3, #5
 8016c4c:	4413      	add	r3, r2
 8016c4e:	3304      	adds	r3, #4
 8016c50:	781a      	ldrb	r2, [r3, #0]
 8016c52:	79bb      	ldrb	r3, [r7, #6]
 8016c54:	f082 0201 	eor.w	r2, r2, #1
 8016c58:	b2d1      	uxtb	r1, r2
 8016c5a:	68fa      	ldr	r2, [r7, #12]
 8016c5c:	331e      	adds	r3, #30
 8016c5e:	015b      	lsls	r3, r3, #5
 8016c60:	4413      	add	r3, r2
 8016c62:	3304      	adds	r3, #4
 8016c64:	460a      	mov	r2, r1
 8016c66:	701a      	strb	r2, [r3, #0]
  
  HCD_SubmitRequest (pdev , hc_num);  
 8016c68:	79bb      	ldrb	r3, [r7, #6]
 8016c6a:	4619      	mov	r1, r3
 8016c6c:	68f8      	ldr	r0, [r7, #12]
 8016c6e:	f7fd f988 	bl	8013f82 <HCD_SubmitRequest>
  
  return USBH_OK;
 8016c72:	2300      	movs	r3, #0
}
 8016c74:	4618      	mov	r0, r3
 8016c76:	3710      	adds	r7, #16
 8016c78:	46bd      	mov	sp, r7
 8016c7a:	bd80      	pop	{r7, pc}

08016c7c <USBH_SubmitSetupRequest>:
  * @retval Status. 
*/
static USBH_Status USBH_SubmitSetupRequest(USBH_HOST *phost,
                                           uint8_t* buff, 
                                           uint16_t length)
{
 8016c7c:	b480      	push	{r7}
 8016c7e:	b085      	sub	sp, #20
 8016c80:	af00      	add	r7, sp, #0
 8016c82:	60f8      	str	r0, [r7, #12]
 8016c84:	60b9      	str	r1, [r7, #8]
 8016c86:	4613      	mov	r3, r2
 8016c88:	80fb      	strh	r3, [r7, #6]
  
  /* Save Global State */
  phost->gStateBkp =   phost->gState; 
 8016c8a:	68fb      	ldr	r3, [r7, #12]
 8016c8c:	781a      	ldrb	r2, [r3, #0]
 8016c8e:	68fb      	ldr	r3, [r7, #12]
 8016c90:	705a      	strb	r2, [r3, #1]
  
  /* Prepare the Transactions */
  phost->gState = HOST_CTRL_XFER;
 8016c92:	68fb      	ldr	r3, [r7, #12]
 8016c94:	2207      	movs	r2, #7
 8016c96:	701a      	strb	r2, [r3, #0]
  phost->Control.buff = buff; 
 8016c98:	68fb      	ldr	r3, [r7, #12]
 8016c9a:	68ba      	ldr	r2, [r7, #8]
 8016c9c:	609a      	str	r2, [r3, #8]
  phost->Control.length = length;
 8016c9e:	68fb      	ldr	r3, [r7, #12]
 8016ca0:	88fa      	ldrh	r2, [r7, #6]
 8016ca2:	819a      	strh	r2, [r3, #12]
  phost->Control.state = CTRL_SETUP;  
 8016ca4:	68fb      	ldr	r3, [r7, #12]
 8016ca6:	2201      	movs	r2, #1
 8016ca8:	771a      	strb	r2, [r3, #28]

  return USBH_OK;  
 8016caa:	2300      	movs	r3, #0
}
 8016cac:	4618      	mov	r0, r3
 8016cae:	3714      	adds	r7, #20
 8016cb0:	46bd      	mov	sp, r7
 8016cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016cb6:	4770      	bx	lr

08016cb8 <USBH_IsocReceiveData>:
  */
USBH_Status USBH_IsocReceiveData( USB_OTG_CORE_HANDLE *pdev, 
                                uint8_t *buff, 
                                uint32_t length,
                                uint8_t hc_num)
{    
 8016cb8:	b580      	push	{r7, lr}
 8016cba:	b084      	sub	sp, #16
 8016cbc:	af00      	add	r7, sp, #0
 8016cbe:	60f8      	str	r0, [r7, #12]
 8016cc0:	60b9      	str	r1, [r7, #8]
 8016cc2:	607a      	str	r2, [r7, #4]
 8016cc4:	70fb      	strb	r3, [r7, #3]
  
  pdev->host.hc[hc_num].ep_is_in = 1;  
 8016cc6:	78fb      	ldrb	r3, [r7, #3]
 8016cc8:	68fa      	ldr	r2, [r7, #12]
 8016cca:	015b      	lsls	r3, r3, #5
 8016ccc:	4413      	add	r3, r2
 8016cce:	f203 33ae 	addw	r3, r3, #942	; 0x3ae
 8016cd2:	2201      	movs	r2, #1
 8016cd4:	701a      	strb	r2, [r3, #0]
  pdev->host.hc[hc_num].xfer_buff = buff;
 8016cd6:	78fb      	ldrb	r3, [r7, #3]
 8016cd8:	68fa      	ldr	r2, [r7, #12]
 8016cda:	3315      	adds	r3, #21
 8016cdc:	015b      	lsls	r3, r3, #5
 8016cde:	4413      	add	r3, r2
 8016ce0:	f503 738c 	add.w	r3, r3, #280	; 0x118
 8016ce4:	68ba      	ldr	r2, [r7, #8]
 8016ce6:	601a      	str	r2, [r3, #0]
  pdev->host.hc[hc_num].xfer_len = length;
 8016ce8:	78fb      	ldrb	r3, [r7, #3]
 8016cea:	68fa      	ldr	r2, [r7, #12]
 8016cec:	015b      	lsls	r3, r3, #5
 8016cee:	4413      	add	r3, r2
 8016cf0:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 8016cf4:	687a      	ldr	r2, [r7, #4]
 8016cf6:	601a      	str	r2, [r3, #0]
  pdev->host.hc[hc_num].data_pid = HC_PID_DATA0;
 8016cf8:	78fb      	ldrb	r3, [r7, #3]
 8016cfa:	68fa      	ldr	r2, [r7, #12]
 8016cfc:	3315      	adds	r3, #21
 8016cfe:	015b      	lsls	r3, r3, #5
 8016d00:	4413      	add	r3, r2
 8016d02:	f503 738a 	add.w	r3, r3, #276	; 0x114
 8016d06:	2200      	movs	r2, #0
 8016d08:	701a      	strb	r2, [r3, #0]
  

  HCD_SubmitRequest (pdev , hc_num);  
 8016d0a:	78fb      	ldrb	r3, [r7, #3]
 8016d0c:	4619      	mov	r1, r3
 8016d0e:	68f8      	ldr	r0, [r7, #12]
 8016d10:	f7fd f937 	bl	8013f82 <HCD_SubmitRequest>
  
  return USBH_OK;
 8016d14:	2300      	movs	r3, #0
}
 8016d16:	4618      	mov	r0, r3
 8016d18:	3710      	adds	r7, #16
 8016d1a:	46bd      	mov	sp, r7
 8016d1c:	bd80      	pop	{r7, pc}

08016d1e <USBH_IsocSendData>:
  */
USBH_Status USBH_IsocSendData( USB_OTG_CORE_HANDLE *pdev, 
                                uint8_t *buff, 
                                uint32_t length,
                                uint8_t hc_num)
{
 8016d1e:	b580      	push	{r7, lr}
 8016d20:	b084      	sub	sp, #16
 8016d22:	af00      	add	r7, sp, #0
 8016d24:	60f8      	str	r0, [r7, #12]
 8016d26:	60b9      	str	r1, [r7, #8]
 8016d28:	607a      	str	r2, [r7, #4]
 8016d2a:	70fb      	strb	r3, [r7, #3]
  
  pdev->host.hc[hc_num].ep_is_in = 0;  
 8016d2c:	78fb      	ldrb	r3, [r7, #3]
 8016d2e:	68fa      	ldr	r2, [r7, #12]
 8016d30:	015b      	lsls	r3, r3, #5
 8016d32:	4413      	add	r3, r2
 8016d34:	f203 33ae 	addw	r3, r3, #942	; 0x3ae
 8016d38:	2200      	movs	r2, #0
 8016d3a:	701a      	strb	r2, [r3, #0]
  pdev->host.hc[hc_num].xfer_buff = buff;
 8016d3c:	78fb      	ldrb	r3, [r7, #3]
 8016d3e:	68fa      	ldr	r2, [r7, #12]
 8016d40:	3315      	adds	r3, #21
 8016d42:	015b      	lsls	r3, r3, #5
 8016d44:	4413      	add	r3, r2
 8016d46:	f503 738c 	add.w	r3, r3, #280	; 0x118
 8016d4a:	68ba      	ldr	r2, [r7, #8]
 8016d4c:	601a      	str	r2, [r3, #0]
  pdev->host.hc[hc_num].xfer_len = length;
 8016d4e:	78fb      	ldrb	r3, [r7, #3]
 8016d50:	68fa      	ldr	r2, [r7, #12]
 8016d52:	015b      	lsls	r3, r3, #5
 8016d54:	4413      	add	r3, r2
 8016d56:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 8016d5a:	687a      	ldr	r2, [r7, #4]
 8016d5c:	601a      	str	r2, [r3, #0]
  pdev->host.hc[hc_num].data_pid = HC_PID_DATA0;
 8016d5e:	78fb      	ldrb	r3, [r7, #3]
 8016d60:	68fa      	ldr	r2, [r7, #12]
 8016d62:	3315      	adds	r3, #21
 8016d64:	015b      	lsls	r3, r3, #5
 8016d66:	4413      	add	r3, r2
 8016d68:	f503 738a 	add.w	r3, r3, #276	; 0x114
 8016d6c:	2200      	movs	r2, #0
 8016d6e:	701a      	strb	r2, [r3, #0]
  
  HCD_SubmitRequest (pdev , hc_num);  
 8016d70:	78fb      	ldrb	r3, [r7, #3]
 8016d72:	4619      	mov	r1, r3
 8016d74:	68f8      	ldr	r0, [r7, #12]
 8016d76:	f7fd f904 	bl	8013f82 <HCD_SubmitRequest>
  
  return USBH_OK;
 8016d7a:	2300      	movs	r3, #0
}
 8016d7c:	4618      	mov	r0, r3
 8016d7e:	3710      	adds	r7, #16
 8016d80:	46bd      	mov	sp, r7
 8016d82:	bd80      	pop	{r7, pc}

08016d84 <USBH_Get_DevDesc>:
* @retval Status
*/
USBH_Status USBH_Get_DevDesc(USB_OTG_CORE_HANDLE *pdev,
                             USBH_HOST *phost,
                             uint8_t length)
{
 8016d84:	b580      	push	{r7, lr}
 8016d86:	b088      	sub	sp, #32
 8016d88:	af02      	add	r7, sp, #8
 8016d8a:	60f8      	str	r0, [r7, #12]
 8016d8c:	60b9      	str	r1, [r7, #8]
 8016d8e:	4613      	mov	r3, r2
 8016d90:	71fb      	strb	r3, [r7, #7]
  
  if((status = USBH_GetDescriptor(pdev, 
                                  phost,
                                  USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,                          
                                  USB_DESC_DEVICE, 
                                  pdev->host.Rx_Buffer,
 8016d92:	68fb      	ldr	r3, [r7, #12]
 8016d94:	f503 7388 	add.w	r3, r3, #272	; 0x110
  if((status = USBH_GetDescriptor(pdev, 
 8016d98:	79fa      	ldrb	r2, [r7, #7]
 8016d9a:	b292      	uxth	r2, r2
 8016d9c:	9201      	str	r2, [sp, #4]
 8016d9e:	9300      	str	r3, [sp, #0]
 8016da0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8016da4:	2200      	movs	r2, #0
 8016da6:	68b9      	ldr	r1, [r7, #8]
 8016da8:	68f8      	ldr	r0, [r7, #12]
 8016daa:	f000 f885 	bl	8016eb8 <USBH_GetDescriptor>
 8016dae:	4603      	mov	r3, r0
 8016db0:	75fb      	strb	r3, [r7, #23]
 8016db2:	7dfb      	ldrb	r3, [r7, #23]
 8016db4:	2b00      	cmp	r3, #0
 8016db6:	d10a      	bne.n	8016dce <USBH_Get_DevDesc+0x4a>
                                  length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */       
    USBH_ParseDevDesc(&phost->device_prop.Dev_Desc, pdev->host.Rx_Buffer, length);
 8016db8:	68bb      	ldr	r3, [r7, #8]
 8016dba:	f103 0022 	add.w	r0, r3, #34	; 0x22
 8016dbe:	68fb      	ldr	r3, [r7, #12]
 8016dc0:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8016dc4:	79fa      	ldrb	r2, [r7, #7]
 8016dc6:	b292      	uxth	r2, r2
 8016dc8:	4619      	mov	r1, r3
 8016dca:	f000 f94d 	bl	8017068 <USBH_ParseDevDesc>
  }
  return status;      
 8016dce:	7dfb      	ldrb	r3, [r7, #23]
}
 8016dd0:	4618      	mov	r0, r3
 8016dd2:	3718      	adds	r7, #24
 8016dd4:	46bd      	mov	sp, r7
 8016dd6:	bd80      	pop	{r7, pc}

08016dd8 <USBH_Get_CfgDesc>:
*/
USBH_Status USBH_Get_CfgDesc(USB_OTG_CORE_HANDLE *pdev, 
                             USBH_HOST           *phost,                      
                             uint16_t length)

{
 8016dd8:	b590      	push	{r4, r7, lr}
 8016dda:	b089      	sub	sp, #36	; 0x24
 8016ddc:	af02      	add	r7, sp, #8
 8016dde:	60f8      	str	r0, [r7, #12]
 8016de0:	60b9      	str	r1, [r7, #8]
 8016de2:	4613      	mov	r3, r2
 8016de4:	80fb      	strh	r3, [r7, #6]
  USBH_Status status;
  uint16_t index = 0;
 8016de6:	2300      	movs	r3, #0
 8016de8:	82fb      	strh	r3, [r7, #22]
  
  if((status = USBH_GetDescriptor(pdev,
                                  phost,
                                  USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,                          
                                  USB_DESC_CONFIGURATION, 
                                  pdev->host.Rx_Buffer,
 8016dea:	68fb      	ldr	r3, [r7, #12]
 8016dec:	f503 7388 	add.w	r3, r3, #272	; 0x110
  if((status = USBH_GetDescriptor(pdev,
 8016df0:	88fa      	ldrh	r2, [r7, #6]
 8016df2:	9201      	str	r2, [sp, #4]
 8016df4:	9300      	str	r3, [sp, #0]
 8016df6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8016dfa:	2200      	movs	r2, #0
 8016dfc:	68b9      	ldr	r1, [r7, #8]
 8016dfe:	68f8      	ldr	r0, [r7, #12]
 8016e00:	f000 f85a 	bl	8016eb8 <USBH_GetDescriptor>
 8016e04:	4603      	mov	r3, r0
 8016e06:	757b      	strb	r3, [r7, #21]
 8016e08:	7d7b      	ldrb	r3, [r7, #21]
 8016e0a:	2b00      	cmp	r3, #0
 8016e0c:	d120      	bne.n	8016e50 <USBH_Get_CfgDesc+0x78>
                                  length)) == USBH_OK)
  {
    /*save Cfg descriptor for class parsing usage */
    for( ; index < length ; index ++)
 8016e0e:	e00a      	b.n	8016e26 <USBH_Get_CfgDesc+0x4e>
    {
      USBH_CfgDesc[index] = pdev->host.Rx_Buffer[index];
 8016e10:	8afa      	ldrh	r2, [r7, #22]
 8016e12:	8afb      	ldrh	r3, [r7, #22]
 8016e14:	68f9      	ldr	r1, [r7, #12]
 8016e16:	440a      	add	r2, r1
 8016e18:	f892 1110 	ldrb.w	r1, [r2, #272]	; 0x110
 8016e1c:	4a0f      	ldr	r2, [pc, #60]	; (8016e5c <USBH_Get_CfgDesc+0x84>)
 8016e1e:	54d1      	strb	r1, [r2, r3]
    for( ; index < length ; index ++)
 8016e20:	8afb      	ldrh	r3, [r7, #22]
 8016e22:	3301      	adds	r3, #1
 8016e24:	82fb      	strh	r3, [r7, #22]
 8016e26:	8afa      	ldrh	r2, [r7, #22]
 8016e28:	88fb      	ldrh	r3, [r7, #6]
 8016e2a:	429a      	cmp	r2, r3
 8016e2c:	d3f0      	bcc.n	8016e10 <USBH_Get_CfgDesc+0x38>
    }
    
    /* Commands successfully sent and Response Received  */       
    USBH_ParseCfgDesc (&phost->device_prop.Cfg_Desc,
 8016e2e:	68bb      	ldr	r3, [r7, #8]
 8016e30:	f103 0034 	add.w	r0, r3, #52	; 0x34
                       phost->device_prop.Itf_Desc,
 8016e34:	68bb      	ldr	r3, [r7, #8]
 8016e36:	f103 013e 	add.w	r1, r3, #62	; 0x3e
                       phost->device_prop.Ep_Desc, 
 8016e3a:	68bb      	ldr	r3, [r7, #8]
 8016e3c:	f103 0250 	add.w	r2, r3, #80	; 0x50
                       pdev->host.Rx_Buffer,
 8016e40:	68fb      	ldr	r3, [r7, #12]
 8016e42:	f503 7488 	add.w	r4, r3, #272	; 0x110
    USBH_ParseCfgDesc (&phost->device_prop.Cfg_Desc,
 8016e46:	88fb      	ldrh	r3, [r7, #6]
 8016e48:	9300      	str	r3, [sp, #0]
 8016e4a:	4623      	mov	r3, r4
 8016e4c:	f000 f980 	bl	8017150 <USBH_ParseCfgDesc>
                       length); 
    
  }
  return status;
 8016e50:	7d7b      	ldrb	r3, [r7, #21]
}
 8016e52:	4618      	mov	r0, r3
 8016e54:	371c      	adds	r7, #28
 8016e56:	46bd      	mov	sp, r7
 8016e58:	bd90      	pop	{r4, r7, pc}
 8016e5a:	bf00      	nop
 8016e5c:	2000353c 	.word	0x2000353c

08016e60 <USBH_Get_StringDesc>:
USBH_Status USBH_Get_StringDesc(USB_OTG_CORE_HANDLE *pdev,
                                USBH_HOST *phost,
                                uint8_t string_index, 
                                uint8_t *buff, 
                                uint16_t length)
{
 8016e60:	b580      	push	{r7, lr}
 8016e62:	b088      	sub	sp, #32
 8016e64:	af02      	add	r7, sp, #8
 8016e66:	60f8      	str	r0, [r7, #12]
 8016e68:	60b9      	str	r1, [r7, #8]
 8016e6a:	603b      	str	r3, [r7, #0]
 8016e6c:	4613      	mov	r3, r2
 8016e6e:	71fb      	strb	r3, [r7, #7]
  USBH_Status status;
  
  if((status = USBH_GetDescriptor(pdev,
                                  phost,
                                  USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,                                    
                                  USB_DESC_STRING | string_index, 
 8016e70:	79fb      	ldrb	r3, [r7, #7]
 8016e72:	b21b      	sxth	r3, r3
 8016e74:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8016e78:	b21b      	sxth	r3, r3
  if((status = USBH_GetDescriptor(pdev,
 8016e7a:	b299      	uxth	r1, r3
                                  pdev->host.Rx_Buffer,
 8016e7c:	68fb      	ldr	r3, [r7, #12]
 8016e7e:	f503 7388 	add.w	r3, r3, #272	; 0x110
  if((status = USBH_GetDescriptor(pdev,
 8016e82:	8c3a      	ldrh	r2, [r7, #32]
 8016e84:	9201      	str	r2, [sp, #4]
 8016e86:	9300      	str	r3, [sp, #0]
 8016e88:	460b      	mov	r3, r1
 8016e8a:	2200      	movs	r2, #0
 8016e8c:	68b9      	ldr	r1, [r7, #8]
 8016e8e:	68f8      	ldr	r0, [r7, #12]
 8016e90:	f000 f812 	bl	8016eb8 <USBH_GetDescriptor>
 8016e94:	4603      	mov	r3, r0
 8016e96:	75fb      	strb	r3, [r7, #23]
 8016e98:	7dfb      	ldrb	r3, [r7, #23]
 8016e9a:	2b00      	cmp	r3, #0
 8016e9c:	d107      	bne.n	8016eae <USBH_Get_StringDesc+0x4e>
                                  length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */       
    USBH_ParseStringDesc(pdev->host.Rx_Buffer,buff, length);    
 8016e9e:	68fb      	ldr	r3, [r7, #12]
 8016ea0:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8016ea4:	8c3a      	ldrh	r2, [r7, #32]
 8016ea6:	6839      	ldr	r1, [r7, #0]
 8016ea8:	4618      	mov	r0, r3
 8016eaa:	f000 fa90 	bl	80173ce <USBH_ParseStringDesc>
  }
  return status;
 8016eae:	7dfb      	ldrb	r3, [r7, #23]
}
 8016eb0:	4618      	mov	r0, r3
 8016eb2:	3718      	adds	r7, #24
 8016eb4:	46bd      	mov	sp, r7
 8016eb6:	bd80      	pop	{r7, pc}

08016eb8 <USBH_GetDescriptor>:
                               USBH_HOST           *phost,                                
                               uint8_t  req_type,
                               uint16_t value_idx, 
                               uint8_t* buff, 
                               uint16_t length )
{ 
 8016eb8:	b580      	push	{r7, lr}
 8016eba:	b084      	sub	sp, #16
 8016ebc:	af00      	add	r7, sp, #0
 8016ebe:	60f8      	str	r0, [r7, #12]
 8016ec0:	60b9      	str	r1, [r7, #8]
 8016ec2:	4611      	mov	r1, r2
 8016ec4:	461a      	mov	r2, r3
 8016ec6:	460b      	mov	r3, r1
 8016ec8:	71fb      	strb	r3, [r7, #7]
 8016eca:	4613      	mov	r3, r2
 8016ecc:	80bb      	strh	r3, [r7, #4]
  phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8016ece:	79fb      	ldrb	r3, [r7, #7]
 8016ed0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8016ed4:	b2da      	uxtb	r2, r3
 8016ed6:	68bb      	ldr	r3, [r7, #8]
 8016ed8:	751a      	strb	r2, [r3, #20]
  phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8016eda:	68bb      	ldr	r3, [r7, #8]
 8016edc:	2206      	movs	r2, #6
 8016ede:	755a      	strb	r2, [r3, #21]
  phost->Control.setup.b.wValue.w = value_idx;
 8016ee0:	68bb      	ldr	r3, [r7, #8]
 8016ee2:	88ba      	ldrh	r2, [r7, #4]
 8016ee4:	82da      	strh	r2, [r3, #22]
  
  if ((value_idx & 0xff00) == USB_DESC_STRING)
 8016ee6:	88bb      	ldrh	r3, [r7, #4]
 8016ee8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8016eec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8016ef0:	d104      	bne.n	8016efc <USBH_GetDescriptor+0x44>
  {
    phost->Control.setup.b.wIndex.w = 0x0409;
 8016ef2:	68bb      	ldr	r3, [r7, #8]
 8016ef4:	f240 4209 	movw	r2, #1033	; 0x409
 8016ef8:	831a      	strh	r2, [r3, #24]
 8016efa:	e002      	b.n	8016f02 <USBH_GetDescriptor+0x4a>
  }
  else
  {
    phost->Control.setup.b.wIndex.w = 0;
 8016efc:	68bb      	ldr	r3, [r7, #8]
 8016efe:	2200      	movs	r2, #0
 8016f00:	831a      	strh	r2, [r3, #24]
  }
  phost->Control.setup.b.wLength.w = length;           
 8016f02:	68bb      	ldr	r3, [r7, #8]
 8016f04:	8bba      	ldrh	r2, [r7, #28]
 8016f06:	835a      	strh	r2, [r3, #26]
  return USBH_CtlReq(pdev, phost, buff , length );     
 8016f08:	8bbb      	ldrh	r3, [r7, #28]
 8016f0a:	69ba      	ldr	r2, [r7, #24]
 8016f0c:	68b9      	ldr	r1, [r7, #8]
 8016f0e:	68f8      	ldr	r0, [r7, #12]
 8016f10:	f7ff fc66 	bl	80167e0 <USBH_CtlReq>
 8016f14:	4603      	mov	r3, r0
}
 8016f16:	4618      	mov	r0, r3
 8016f18:	3710      	adds	r7, #16
 8016f1a:	46bd      	mov	sp, r7
 8016f1c:	bd80      	pop	{r7, pc}

08016f1e <USBH_SetAddress>:
* @retval Status
*/
USBH_Status USBH_SetAddress(USB_OTG_CORE_HANDLE *pdev, 
                            USBH_HOST *phost,
                            uint8_t DeviceAddress)
{
 8016f1e:	b580      	push	{r7, lr}
 8016f20:	b084      	sub	sp, #16
 8016f22:	af00      	add	r7, sp, #0
 8016f24:	60f8      	str	r0, [r7, #12]
 8016f26:	60b9      	str	r1, [r7, #8]
 8016f28:	4613      	mov	r3, r2
 8016f2a:	71fb      	strb	r3, [r7, #7]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8016f2c:	68bb      	ldr	r3, [r7, #8]
 8016f2e:	2200      	movs	r2, #0
 8016f30:	751a      	strb	r2, [r3, #20]
    USB_REQ_TYPE_STANDARD;
  
  phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8016f32:	68bb      	ldr	r3, [r7, #8]
 8016f34:	2205      	movs	r2, #5
 8016f36:	755a      	strb	r2, [r3, #21]
  
  phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8016f38:	79fb      	ldrb	r3, [r7, #7]
 8016f3a:	b29a      	uxth	r2, r3
 8016f3c:	68bb      	ldr	r3, [r7, #8]
 8016f3e:	82da      	strh	r2, [r3, #22]
  phost->Control.setup.b.wIndex.w = 0;
 8016f40:	68bb      	ldr	r3, [r7, #8]
 8016f42:	2200      	movs	r2, #0
 8016f44:	831a      	strh	r2, [r3, #24]
  phost->Control.setup.b.wLength.w = 0;
 8016f46:	68bb      	ldr	r3, [r7, #8]
 8016f48:	2200      	movs	r2, #0
 8016f4a:	835a      	strh	r2, [r3, #26]
  
  return USBH_CtlReq(pdev, phost, 0 , 0 );
 8016f4c:	2300      	movs	r3, #0
 8016f4e:	2200      	movs	r2, #0
 8016f50:	68b9      	ldr	r1, [r7, #8]
 8016f52:	68f8      	ldr	r0, [r7, #12]
 8016f54:	f7ff fc44 	bl	80167e0 <USBH_CtlReq>
 8016f58:	4603      	mov	r3, r0
}
 8016f5a:	4618      	mov	r0, r3
 8016f5c:	3710      	adds	r7, #16
 8016f5e:	46bd      	mov	sp, r7
 8016f60:	bd80      	pop	{r7, pc}

08016f62 <USBH_SetCfg>:
* @retval Status
*/
USBH_Status USBH_SetCfg(USB_OTG_CORE_HANDLE *pdev, 
                        USBH_HOST *phost,
                        uint16_t cfg_idx)
{
 8016f62:	b580      	push	{r7, lr}
 8016f64:	b084      	sub	sp, #16
 8016f66:	af00      	add	r7, sp, #0
 8016f68:	60f8      	str	r0, [r7, #12]
 8016f6a:	60b9      	str	r1, [r7, #8]
 8016f6c:	4613      	mov	r3, r2
 8016f6e:	80fb      	strh	r3, [r7, #6]
  
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE |\
 8016f70:	68bb      	ldr	r3, [r7, #8]
 8016f72:	2200      	movs	r2, #0
 8016f74:	751a      	strb	r2, [r3, #20]
    USB_REQ_TYPE_STANDARD;
  phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8016f76:	68bb      	ldr	r3, [r7, #8]
 8016f78:	2209      	movs	r2, #9
 8016f7a:	755a      	strb	r2, [r3, #21]
  phost->Control.setup.b.wValue.w = cfg_idx;
 8016f7c:	68bb      	ldr	r3, [r7, #8]
 8016f7e:	88fa      	ldrh	r2, [r7, #6]
 8016f80:	82da      	strh	r2, [r3, #22]
  phost->Control.setup.b.wIndex.w = 0;
 8016f82:	68bb      	ldr	r3, [r7, #8]
 8016f84:	2200      	movs	r2, #0
 8016f86:	831a      	strh	r2, [r3, #24]
  phost->Control.setup.b.wLength.w = 0;           
 8016f88:	68bb      	ldr	r3, [r7, #8]
 8016f8a:	2200      	movs	r2, #0
 8016f8c:	835a      	strh	r2, [r3, #26]
  
  return USBH_CtlReq(pdev, phost, 0 , 0 );      
 8016f8e:	2300      	movs	r3, #0
 8016f90:	2200      	movs	r2, #0
 8016f92:	68b9      	ldr	r1, [r7, #8]
 8016f94:	68f8      	ldr	r0, [r7, #12]
 8016f96:	f7ff fc23 	bl	80167e0 <USBH_CtlReq>
 8016f9a:	4603      	mov	r3, r0
}
 8016f9c:	4618      	mov	r0, r3
 8016f9e:	3710      	adds	r7, #16
 8016fa0:	46bd      	mov	sp, r7
 8016fa2:	bd80      	pop	{r7, pc}

08016fa4 <USBH_SetInterface>:
* @retval Status
*/
USBH_Status USBH_SetInterface(USB_OTG_CORE_HANDLE *pdev, 
                        USBH_HOST *phost,
                        uint8_t ep_num, uint8_t altSetting)
{
 8016fa4:	b580      	push	{r7, lr}
 8016fa6:	b084      	sub	sp, #16
 8016fa8:	af00      	add	r7, sp, #0
 8016faa:	60f8      	str	r0, [r7, #12]
 8016fac:	60b9      	str	r1, [r7, #8]
 8016fae:	4611      	mov	r1, r2
 8016fb0:	461a      	mov	r2, r3
 8016fb2:	460b      	mov	r3, r1
 8016fb4:	71fb      	strb	r3, [r7, #7]
 8016fb6:	4613      	mov	r3, r2
 8016fb8:	71bb      	strb	r3, [r7, #6]
  
  
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_INTERFACE | \
 8016fba:	68bb      	ldr	r3, [r7, #8]
 8016fbc:	2201      	movs	r2, #1
 8016fbe:	751a      	strb	r2, [r3, #20]
    USB_REQ_TYPE_STANDARD;
  
  phost->Control.setup.b.bRequest = USB_REQ_SET_INTERFACE;
 8016fc0:	68bb      	ldr	r3, [r7, #8]
 8016fc2:	220b      	movs	r2, #11
 8016fc4:	755a      	strb	r2, [r3, #21]
  phost->Control.setup.b.wValue.w = altSetting;
 8016fc6:	79bb      	ldrb	r3, [r7, #6]
 8016fc8:	b29a      	uxth	r2, r3
 8016fca:	68bb      	ldr	r3, [r7, #8]
 8016fcc:	82da      	strh	r2, [r3, #22]
  phost->Control.setup.b.wIndex.w = ep_num;
 8016fce:	79fb      	ldrb	r3, [r7, #7]
 8016fd0:	b29a      	uxth	r2, r3
 8016fd2:	68bb      	ldr	r3, [r7, #8]
 8016fd4:	831a      	strh	r2, [r3, #24]
  phost->Control.setup.b.wLength.w = 0;           
 8016fd6:	68bb      	ldr	r3, [r7, #8]
 8016fd8:	2200      	movs	r2, #0
 8016fda:	835a      	strh	r2, [r3, #26]
 
  return USBH_CtlReq(pdev, phost, 0 , 0 );     
 8016fdc:	2300      	movs	r3, #0
 8016fde:	2200      	movs	r2, #0
 8016fe0:	68b9      	ldr	r1, [r7, #8]
 8016fe2:	68f8      	ldr	r0, [r7, #12]
 8016fe4:	f7ff fbfc 	bl	80167e0 <USBH_CtlReq>
 8016fe8:	4603      	mov	r3, r0
}
 8016fea:	4618      	mov	r0, r3
 8016fec:	3710      	adds	r7, #16
 8016fee:	46bd      	mov	sp, r7
 8016ff0:	bd80      	pop	{r7, pc}

08016ff2 <USBH_ClrFeature>:
*/
USBH_Status USBH_ClrFeature(USB_OTG_CORE_HANDLE *pdev,
                            USBH_HOST *phost,
                            uint8_t ep_num, 
                            uint8_t hc_num) 
{
 8016ff2:	b580      	push	{r7, lr}
 8016ff4:	b084      	sub	sp, #16
 8016ff6:	af00      	add	r7, sp, #0
 8016ff8:	60f8      	str	r0, [r7, #12]
 8016ffa:	60b9      	str	r1, [r7, #8]
 8016ffc:	4611      	mov	r1, r2
 8016ffe:	461a      	mov	r2, r3
 8017000:	460b      	mov	r3, r1
 8017002:	71fb      	strb	r3, [r7, #7]
 8017004:	4613      	mov	r3, r2
 8017006:	71bb      	strb	r3, [r7, #6]
  
  phost->Control.setup.b.bmRequestType = USB_H2D | 
 8017008:	68bb      	ldr	r3, [r7, #8]
 801700a:	2202      	movs	r2, #2
 801700c:	751a      	strb	r2, [r3, #20]
                                         USB_REQ_RECIPIENT_ENDPOINT |
                                         USB_REQ_TYPE_STANDARD;
  
  phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 801700e:	68bb      	ldr	r3, [r7, #8]
 8017010:	2201      	movs	r2, #1
 8017012:	755a      	strb	r2, [r3, #21]
  phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8017014:	68bb      	ldr	r3, [r7, #8]
 8017016:	2200      	movs	r2, #0
 8017018:	82da      	strh	r2, [r3, #22]
  phost->Control.setup.b.wIndex.w = ep_num;
 801701a:	79fb      	ldrb	r3, [r7, #7]
 801701c:	b29a      	uxth	r2, r3
 801701e:	68bb      	ldr	r3, [r7, #8]
 8017020:	831a      	strh	r2, [r3, #24]
  phost->Control.setup.b.wLength.w = 0;           
 8017022:	68bb      	ldr	r3, [r7, #8]
 8017024:	2200      	movs	r2, #0
 8017026:	835a      	strh	r2, [r3, #26]
  
  if ((ep_num & USB_REQ_DIR_MASK ) == USB_D2H)
 8017028:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801702c:	2b00      	cmp	r3, #0
 801702e:	da08      	bge.n	8017042 <USBH_ClrFeature+0x50>
  { /* EP Type is IN */
    pdev->host.hc[hc_num].toggle_in = 0; 
 8017030:	79bb      	ldrb	r3, [r7, #6]
 8017032:	68fa      	ldr	r2, [r7, #12]
 8017034:	331e      	adds	r3, #30
 8017036:	015b      	lsls	r3, r3, #5
 8017038:	4413      	add	r3, r2
 801703a:	3304      	adds	r3, #4
 801703c:	2200      	movs	r2, #0
 801703e:	701a      	strb	r2, [r3, #0]
 8017040:	e007      	b.n	8017052 <USBH_ClrFeature+0x60>
  }
  else
  {/* EP Type is OUT */
    pdev->host.hc[hc_num].toggle_out = 0; 
 8017042:	79bb      	ldrb	r3, [r7, #6]
 8017044:	68fa      	ldr	r2, [r7, #12]
 8017046:	331e      	adds	r3, #30
 8017048:	015b      	lsls	r3, r3, #5
 801704a:	4413      	add	r3, r2
 801704c:	3305      	adds	r3, #5
 801704e:	2200      	movs	r2, #0
 8017050:	701a      	strb	r2, [r3, #0]
  }
  
  return USBH_CtlReq(pdev, phost, 0 , 0 );   
 8017052:	2300      	movs	r3, #0
 8017054:	2200      	movs	r2, #0
 8017056:	68b9      	ldr	r1, [r7, #8]
 8017058:	68f8      	ldr	r0, [r7, #12]
 801705a:	f7ff fbc1 	bl	80167e0 <USBH_CtlReq>
 801705e:	4603      	mov	r3, r0
}
 8017060:	4618      	mov	r0, r3
 8017062:	3710      	adds	r7, #16
 8017064:	46bd      	mov	sp, r7
 8017066:	bd80      	pop	{r7, pc}

08017068 <USBH_ParseDevDesc>:
* @retval None
*/
static void  USBH_ParseDevDesc (USBH_DevDesc_TypeDef* dev_desc,
                                uint8_t *buf, 
                                uint16_t length)
{
 8017068:	b480      	push	{r7}
 801706a:	b085      	sub	sp, #20
 801706c:	af00      	add	r7, sp, #0
 801706e:	60f8      	str	r0, [r7, #12]
 8017070:	60b9      	str	r1, [r7, #8]
 8017072:	4613      	mov	r3, r2
 8017074:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t  *) (buf +  0);
 8017076:	68bb      	ldr	r3, [r7, #8]
 8017078:	781a      	ldrb	r2, [r3, #0]
 801707a:	68fb      	ldr	r3, [r7, #12]
 801707c:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t  *) (buf +  1);
 801707e:	68bb      	ldr	r3, [r7, #8]
 8017080:	785a      	ldrb	r2, [r3, #1]
 8017082:	68fb      	ldr	r3, [r7, #12]
 8017084:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16 (buf +  2);
 8017086:	68bb      	ldr	r3, [r7, #8]
 8017088:	3302      	adds	r3, #2
 801708a:	781b      	ldrb	r3, [r3, #0]
 801708c:	b29a      	uxth	r2, r3
 801708e:	68bb      	ldr	r3, [r7, #8]
 8017090:	3302      	adds	r3, #2
 8017092:	3301      	adds	r3, #1
 8017094:	781b      	ldrb	r3, [r3, #0]
 8017096:	b29b      	uxth	r3, r3
 8017098:	021b      	lsls	r3, r3, #8
 801709a:	b29b      	uxth	r3, r3
 801709c:	4413      	add	r3, r2
 801709e:	b29a      	uxth	r2, r3
 80170a0:	68fb      	ldr	r3, [r7, #12]
 80170a2:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t  *) (buf +  4);
 80170a4:	68bb      	ldr	r3, [r7, #8]
 80170a6:	791a      	ldrb	r2, [r3, #4]
 80170a8:	68fb      	ldr	r3, [r7, #12]
 80170aa:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t  *) (buf +  5);
 80170ac:	68bb      	ldr	r3, [r7, #8]
 80170ae:	795a      	ldrb	r2, [r3, #5]
 80170b0:	68fb      	ldr	r3, [r7, #12]
 80170b2:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t  *) (buf +  6);
 80170b4:	68bb      	ldr	r3, [r7, #8]
 80170b6:	799a      	ldrb	r2, [r3, #6]
 80170b8:	68fb      	ldr	r3, [r7, #12]
 80170ba:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t  *) (buf +  7);
 80170bc:	68bb      	ldr	r3, [r7, #8]
 80170be:	79da      	ldrb	r2, [r3, #7]
 80170c0:	68fb      	ldr	r3, [r7, #12]
 80170c2:	71da      	strb	r2, [r3, #7]
  
  if (length > 8)
 80170c4:	88fb      	ldrh	r3, [r7, #6]
 80170c6:	2b08      	cmp	r3, #8
 80170c8:	d93c      	bls.n	8017144 <USBH_ParseDevDesc+0xdc>
  { /* For 1st time after device connection, Host may issue only 8 bytes for 
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16 (buf +  8);
 80170ca:	68bb      	ldr	r3, [r7, #8]
 80170cc:	3308      	adds	r3, #8
 80170ce:	781b      	ldrb	r3, [r3, #0]
 80170d0:	b29a      	uxth	r2, r3
 80170d2:	68bb      	ldr	r3, [r7, #8]
 80170d4:	3308      	adds	r3, #8
 80170d6:	3301      	adds	r3, #1
 80170d8:	781b      	ldrb	r3, [r3, #0]
 80170da:	b29b      	uxth	r3, r3
 80170dc:	021b      	lsls	r3, r3, #8
 80170de:	b29b      	uxth	r3, r3
 80170e0:	4413      	add	r3, r2
 80170e2:	b29a      	uxth	r2, r3
 80170e4:	68fb      	ldr	r3, [r7, #12]
 80170e6:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16 (buf + 10);
 80170e8:	68bb      	ldr	r3, [r7, #8]
 80170ea:	330a      	adds	r3, #10
 80170ec:	781b      	ldrb	r3, [r3, #0]
 80170ee:	b29a      	uxth	r2, r3
 80170f0:	68bb      	ldr	r3, [r7, #8]
 80170f2:	330a      	adds	r3, #10
 80170f4:	3301      	adds	r3, #1
 80170f6:	781b      	ldrb	r3, [r3, #0]
 80170f8:	b29b      	uxth	r3, r3
 80170fa:	021b      	lsls	r3, r3, #8
 80170fc:	b29b      	uxth	r3, r3
 80170fe:	4413      	add	r3, r2
 8017100:	b29a      	uxth	r2, r3
 8017102:	68fb      	ldr	r3, [r7, #12]
 8017104:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16 (buf + 12);
 8017106:	68bb      	ldr	r3, [r7, #8]
 8017108:	330c      	adds	r3, #12
 801710a:	781b      	ldrb	r3, [r3, #0]
 801710c:	b29a      	uxth	r2, r3
 801710e:	68bb      	ldr	r3, [r7, #8]
 8017110:	330c      	adds	r3, #12
 8017112:	3301      	adds	r3, #1
 8017114:	781b      	ldrb	r3, [r3, #0]
 8017116:	b29b      	uxth	r3, r3
 8017118:	021b      	lsls	r3, r3, #8
 801711a:	b29b      	uxth	r3, r3
 801711c:	4413      	add	r3, r2
 801711e:	b29a      	uxth	r2, r3
 8017120:	68fb      	ldr	r3, [r7, #12]
 8017122:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t  *) (buf + 14);
 8017124:	68bb      	ldr	r3, [r7, #8]
 8017126:	7b9a      	ldrb	r2, [r3, #14]
 8017128:	68fb      	ldr	r3, [r7, #12]
 801712a:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t  *) (buf + 15);
 801712c:	68bb      	ldr	r3, [r7, #8]
 801712e:	7bda      	ldrb	r2, [r3, #15]
 8017130:	68fb      	ldr	r3, [r7, #12]
 8017132:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t  *) (buf + 16);
 8017134:	68bb      	ldr	r3, [r7, #8]
 8017136:	7c1a      	ldrb	r2, [r3, #16]
 8017138:	68fb      	ldr	r3, [r7, #12]
 801713a:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t  *) (buf + 17);
 801713c:	68bb      	ldr	r3, [r7, #8]
 801713e:	7c5a      	ldrb	r2, [r3, #17]
 8017140:	68fb      	ldr	r3, [r7, #12]
 8017142:	745a      	strb	r2, [r3, #17]
  }
}
 8017144:	bf00      	nop
 8017146:	3714      	adds	r7, #20
 8017148:	46bd      	mov	sp, r7
 801714a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801714e:	4770      	bx	lr

08017150 <USBH_ParseCfgDesc>:
static void  USBH_ParseCfgDesc (USBH_CfgDesc_TypeDef* cfg_desc,
                                USBH_InterfaceDesc_TypeDef* itf_desc,
                                USBH_EpDesc_TypeDef   ep_desc[][USBH_MAX_NUM_ENDPOINTS], 
                                uint8_t *buf, 
                                uint16_t length)
{  
 8017150:	b580      	push	{r7, lr}
 8017152:	b08c      	sub	sp, #48	; 0x30
 8017154:	af00      	add	r7, sp, #0
 8017156:	60f8      	str	r0, [r7, #12]
 8017158:	60b9      	str	r1, [r7, #8]
 801715a:	607a      	str	r2, [r7, #4]
 801715c:	603b      	str	r3, [r7, #0]
  USBH_InterfaceDesc_TypeDef    *pif ;
  USBH_InterfaceDesc_TypeDef    temp_pif ;  
  USBH_EpDesc_TypeDef           *pep;  
  USBH_DescHeader_t             *pdesc = (USBH_DescHeader_t *)buf;
 801715e:	683b      	ldr	r3, [r7, #0]
 8017160:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint16_t                      ptr;
  int8_t                        if_ix = 0;
 8017162:	2300      	movs	r3, #0
 8017164:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  int8_t                        ep_ix = 0;  
 8017168:	2300      	movs	r3, #0
 801716a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  static uint16_t               prev_ep_size = 0;
  static uint8_t                prev_itf = 0;  
  
  
  pdesc   = (USBH_DescHeader_t *)buf;
 801716e:	683b      	ldr	r3, [r7, #0]
 8017170:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t  *) (buf + 0);
 8017172:	683b      	ldr	r3, [r7, #0]
 8017174:	781a      	ldrb	r2, [r3, #0]
 8017176:	68fb      	ldr	r3, [r7, #12]
 8017178:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t  *) (buf + 1);
 801717a:	683b      	ldr	r3, [r7, #0]
 801717c:	785a      	ldrb	r2, [r3, #1]
 801717e:	68fb      	ldr	r3, [r7, #12]
 8017180:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16 (buf + 2);
 8017182:	683b      	ldr	r3, [r7, #0]
 8017184:	3302      	adds	r3, #2
 8017186:	781b      	ldrb	r3, [r3, #0]
 8017188:	b29a      	uxth	r2, r3
 801718a:	683b      	ldr	r3, [r7, #0]
 801718c:	3302      	adds	r3, #2
 801718e:	3301      	adds	r3, #1
 8017190:	781b      	ldrb	r3, [r3, #0]
 8017192:	b29b      	uxth	r3, r3
 8017194:	021b      	lsls	r3, r3, #8
 8017196:	b29b      	uxth	r3, r3
 8017198:	4413      	add	r3, r2
 801719a:	b29a      	uxth	r2, r3
 801719c:	68fb      	ldr	r3, [r7, #12]
 801719e:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t  *) (buf + 4);
 80171a0:	683b      	ldr	r3, [r7, #0]
 80171a2:	791a      	ldrb	r2, [r3, #4]
 80171a4:	68fb      	ldr	r3, [r7, #12]
 80171a6:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t  *) (buf + 5);
 80171a8:	683b      	ldr	r3, [r7, #0]
 80171aa:	795a      	ldrb	r2, [r3, #5]
 80171ac:	68fb      	ldr	r3, [r7, #12]
 80171ae:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t  *) (buf + 6);
 80171b0:	683b      	ldr	r3, [r7, #0]
 80171b2:	799a      	ldrb	r2, [r3, #6]
 80171b4:	68fb      	ldr	r3, [r7, #12]
 80171b6:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t  *) (buf + 7);
 80171b8:	683b      	ldr	r3, [r7, #0]
 80171ba:	79da      	ldrb	r2, [r3, #7]
 80171bc:	68fb      	ldr	r3, [r7, #12]
 80171be:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t  *) (buf + 8);    
 80171c0:	683b      	ldr	r3, [r7, #0]
 80171c2:	7a1a      	ldrb	r2, [r3, #8]
 80171c4:	68fb      	ldr	r3, [r7, #12]
 80171c6:	721a      	strb	r2, [r3, #8]
  
  
  if (length > USB_CONFIGURATION_DESC_SIZE)
 80171c8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80171ca:	2b09      	cmp	r3, #9
 80171cc:	f240 809a 	bls.w	8017304 <USBH_ParseCfgDesc+0x1b4>
  {
    ptr = USB_LEN_CFG_DESC;
 80171d0:	2309      	movs	r3, #9
 80171d2:	827b      	strh	r3, [r7, #18]
    
    if ( cfg_desc->bNumInterfaces <= USBH_MAX_NUM_INTERFACES) 
 80171d4:	68fb      	ldr	r3, [r7, #12]
 80171d6:	791b      	ldrb	r3, [r3, #4]
 80171d8:	2b02      	cmp	r3, #2
 80171da:	f200 808d 	bhi.w	80172f8 <USBH_ParseCfgDesc+0x1a8>
    {
      pif = (USBH_InterfaceDesc_TypeDef *)0;
 80171de:	2300      	movs	r3, #0
 80171e0:	627b      	str	r3, [r7, #36]	; 0x24
      
      while (ptr < cfg_desc->wTotalLength ) 
 80171e2:	e083      	b.n	80172ec <USBH_ParseCfgDesc+0x19c>
      {
        pdesc = USBH_GetNextDesc((uint8_t *)pdesc, &ptr);
 80171e4:	f107 0312 	add.w	r3, r7, #18
 80171e8:	4619      	mov	r1, r3
 80171ea:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80171ec:	f000 f922 	bl	8017434 <USBH_GetNextDesc>
 80171f0:	62f8      	str	r0, [r7, #44]	; 0x2c
        if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE) 
 80171f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80171f4:	785b      	ldrb	r3, [r3, #1]
 80171f6:	2b04      	cmp	r3, #4
 80171f8:	d178      	bne.n	80172ec <USBH_ParseCfgDesc+0x19c>
        {
          if_ix             = *(((uint8_t *)pdesc ) + 2);
 80171fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80171fc:	3302      	adds	r3, #2
 80171fe:	781b      	ldrb	r3, [r3, #0]
 8017200:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
          pif               = &itf_desc[if_ix];
 8017204:	f997 202a 	ldrsb.w	r2, [r7, #42]	; 0x2a
 8017208:	4613      	mov	r3, r2
 801720a:	00db      	lsls	r3, r3, #3
 801720c:	4413      	add	r3, r2
 801720e:	68ba      	ldr	r2, [r7, #8]
 8017210:	4413      	add	r3, r2
 8017212:	627b      	str	r3, [r7, #36]	; 0x24
          
          if((*((uint8_t *)pdesc + 3)) < 3)
 8017214:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017216:	3303      	adds	r3, #3
 8017218:	781b      	ldrb	r3, [r3, #0]
 801721a:	2b02      	cmp	r3, #2
 801721c:	d866      	bhi.n	80172ec <USBH_ParseCfgDesc+0x19c>
          {
          USBH_ParseInterfaceDesc (&temp_pif, (uint8_t *)pdesc);            
 801721e:	f107 0314 	add.w	r3, r7, #20
 8017222:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8017224:	4618      	mov	r0, r3
 8017226:	f000 f875 	bl	8017314 <USBH_ParseInterfaceDesc>
          ep_ix = 0;
 801722a:	2300      	movs	r3, #0
 801722c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
          
          /* Parse Ep descriptors relative to the current interface */
          if(temp_pif.bNumEndpoints <= USBH_MAX_NUM_ENDPOINTS)
 8017230:	7e3b      	ldrb	r3, [r7, #24]
 8017232:	2b02      	cmp	r3, #2
 8017234:	d85a      	bhi.n	80172ec <USBH_ParseCfgDesc+0x19c>
          {          
            while (ep_ix < temp_pif.bNumEndpoints) 
 8017236:	e054      	b.n	80172e2 <USBH_ParseCfgDesc+0x192>
            {
              pdesc = USBH_GetNextDesc((void* )pdesc, &ptr);
 8017238:	f107 0312 	add.w	r3, r7, #18
 801723c:	4619      	mov	r1, r3
 801723e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8017240:	f000 f8f8 	bl	8017434 <USBH_GetNextDesc>
 8017244:	62f8      	str	r0, [r7, #44]	; 0x2c
              if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT) 
 8017246:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017248:	785b      	ldrb	r3, [r3, #1]
 801724a:	2b05      	cmp	r3, #5
 801724c:	d149      	bne.n	80172e2 <USBH_ParseCfgDesc+0x192>
              {  
                pep               = &ep_desc[if_ix][ep_ix];
 801724e:	f997 302a 	ldrsb.w	r3, [r7, #42]	; 0x2a
 8017252:	011b      	lsls	r3, r3, #4
 8017254:	687a      	ldr	r2, [r7, #4]
 8017256:	441a      	add	r2, r3
 8017258:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 801725c:	00db      	lsls	r3, r3, #3
 801725e:	4413      	add	r3, r2
 8017260:	623b      	str	r3, [r7, #32]
                
                if(prev_itf != if_ix)
 8017262:	4b2a      	ldr	r3, [pc, #168]	; (801730c <USBH_ParseCfgDesc+0x1bc>)
 8017264:	781b      	ldrb	r3, [r3, #0]
 8017266:	461a      	mov	r2, r3
 8017268:	f997 302a 	ldrsb.w	r3, [r7, #42]	; 0x2a
 801726c:	429a      	cmp	r2, r3
 801726e:	d00a      	beq.n	8017286 <USBH_ParseCfgDesc+0x136>
                {
                  prev_itf = if_ix;
 8017270:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
 8017274:	4b25      	ldr	r3, [pc, #148]	; (801730c <USBH_ParseCfgDesc+0x1bc>)
 8017276:	701a      	strb	r2, [r3, #0]
                  USBH_ParseInterfaceDesc (pif, (uint8_t *)&temp_pif); 
 8017278:	f107 0314 	add.w	r3, r7, #20
 801727c:	4619      	mov	r1, r3
 801727e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017280:	f000 f848 	bl	8017314 <USBH_ParseInterfaceDesc>
 8017284:	e014      	b.n	80172b0 <USBH_ParseCfgDesc+0x160>
                }
                else
                {
                  if(prev_ep_size > LE16((uint8_t *)pdesc + 4))
 8017286:	4b22      	ldr	r3, [pc, #136]	; (8017310 <USBH_ParseCfgDesc+0x1c0>)
 8017288:	881b      	ldrh	r3, [r3, #0]
 801728a:	461a      	mov	r2, r3
 801728c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801728e:	3304      	adds	r3, #4
 8017290:	781b      	ldrb	r3, [r3, #0]
 8017292:	4619      	mov	r1, r3
 8017294:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017296:	3305      	adds	r3, #5
 8017298:	781b      	ldrb	r3, [r3, #0]
 801729a:	021b      	lsls	r3, r3, #8
 801729c:	440b      	add	r3, r1
 801729e:	429a      	cmp	r2, r3
 80172a0:	dd00      	ble.n	80172a4 <USBH_ParseCfgDesc+0x154>
                  {
                    break;
 80172a2:	e023      	b.n	80172ec <USBH_ParseCfgDesc+0x19c>
                  }
                  else
                  {
                    USBH_ParseInterfaceDesc (pif, (uint8_t *)&temp_pif);    
 80172a4:	f107 0314 	add.w	r3, r7, #20
 80172a8:	4619      	mov	r1, r3
 80172aa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80172ac:	f000 f832 	bl	8017314 <USBH_ParseInterfaceDesc>
                  }
                }
                USBH_ParseEPDesc (pep, (uint8_t *)pdesc);
 80172b0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80172b2:	6a38      	ldr	r0, [r7, #32]
 80172b4:	f000 f85d 	bl	8017372 <USBH_ParseEPDesc>
                prev_ep_size = LE16((uint8_t *)pdesc + 4);
 80172b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80172ba:	3304      	adds	r3, #4
 80172bc:	781b      	ldrb	r3, [r3, #0]
 80172be:	b29a      	uxth	r2, r3
 80172c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80172c2:	3305      	adds	r3, #5
 80172c4:	781b      	ldrb	r3, [r3, #0]
 80172c6:	b29b      	uxth	r3, r3
 80172c8:	021b      	lsls	r3, r3, #8
 80172ca:	b29b      	uxth	r3, r3
 80172cc:	4413      	add	r3, r2
 80172ce:	b29a      	uxth	r2, r3
 80172d0:	4b0f      	ldr	r3, [pc, #60]	; (8017310 <USBH_ParseCfgDesc+0x1c0>)
 80172d2:	801a      	strh	r2, [r3, #0]
                ep_ix++;
 80172d4:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80172d8:	b2db      	uxtb	r3, r3
 80172da:	3301      	adds	r3, #1
 80172dc:	b2db      	uxtb	r3, r3
 80172de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            while (ep_ix < temp_pif.bNumEndpoints) 
 80172e2:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80172e6:	7e3a      	ldrb	r2, [r7, #24]
 80172e8:	4293      	cmp	r3, r2
 80172ea:	dba5      	blt.n	8017238 <USBH_ParseCfgDesc+0xe8>
      while (ptr < cfg_desc->wTotalLength ) 
 80172ec:	68fb      	ldr	r3, [r7, #12]
 80172ee:	885a      	ldrh	r2, [r3, #2]
 80172f0:	8a7b      	ldrh	r3, [r7, #18]
 80172f2:	429a      	cmp	r2, r3
 80172f4:	f63f af76 	bhi.w	80171e4 <USBH_ParseCfgDesc+0x94>
          }
         }
        }
      }
    }
    prev_ep_size = 0;
 80172f8:	4b05      	ldr	r3, [pc, #20]	; (8017310 <USBH_ParseCfgDesc+0x1c0>)
 80172fa:	2200      	movs	r2, #0
 80172fc:	801a      	strh	r2, [r3, #0]
    prev_itf = 0; 
 80172fe:	4b03      	ldr	r3, [pc, #12]	; (801730c <USBH_ParseCfgDesc+0x1bc>)
 8017300:	2200      	movs	r2, #0
 8017302:	701a      	strb	r2, [r3, #0]
  }  
}
 8017304:	bf00      	nop
 8017306:	3730      	adds	r7, #48	; 0x30
 8017308:	46bd      	mov	sp, r7
 801730a:	bd80      	pop	{r7, pc}
 801730c:	2000373c 	.word	0x2000373c
 8017310:	2000373e 	.word	0x2000373e

08017314 <USBH_ParseInterfaceDesc>:
* @param  buf: Buffer where the descriptor data is available
* @retval None
*/
static void  USBH_ParseInterfaceDesc (USBH_InterfaceDesc_TypeDef *if_descriptor, 
                                      uint8_t *buf)
{
 8017314:	b480      	push	{r7}
 8017316:	b083      	sub	sp, #12
 8017318:	af00      	add	r7, sp, #0
 801731a:	6078      	str	r0, [r7, #4]
 801731c:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t  *) (buf + 0);
 801731e:	683b      	ldr	r3, [r7, #0]
 8017320:	781a      	ldrb	r2, [r3, #0]
 8017322:	687b      	ldr	r3, [r7, #4]
 8017324:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t  *) (buf + 1);
 8017326:	683b      	ldr	r3, [r7, #0]
 8017328:	785a      	ldrb	r2, [r3, #1]
 801732a:	687b      	ldr	r3, [r7, #4]
 801732c:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t  *) (buf + 2);
 801732e:	683b      	ldr	r3, [r7, #0]
 8017330:	789a      	ldrb	r2, [r3, #2]
 8017332:	687b      	ldr	r3, [r7, #4]
 8017334:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t  *) (buf + 3);
 8017336:	683b      	ldr	r3, [r7, #0]
 8017338:	78da      	ldrb	r2, [r3, #3]
 801733a:	687b      	ldr	r3, [r7, #4]
 801733c:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t  *) (buf + 4);
 801733e:	683b      	ldr	r3, [r7, #0]
 8017340:	791a      	ldrb	r2, [r3, #4]
 8017342:	687b      	ldr	r3, [r7, #4]
 8017344:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t  *) (buf + 5);
 8017346:	683b      	ldr	r3, [r7, #0]
 8017348:	795a      	ldrb	r2, [r3, #5]
 801734a:	687b      	ldr	r3, [r7, #4]
 801734c:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t  *) (buf + 6);
 801734e:	683b      	ldr	r3, [r7, #0]
 8017350:	799a      	ldrb	r2, [r3, #6]
 8017352:	687b      	ldr	r3, [r7, #4]
 8017354:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t  *) (buf + 7);
 8017356:	683b      	ldr	r3, [r7, #0]
 8017358:	79da      	ldrb	r2, [r3, #7]
 801735a:	687b      	ldr	r3, [r7, #4]
 801735c:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t  *) (buf + 8);
 801735e:	683b      	ldr	r3, [r7, #0]
 8017360:	7a1a      	ldrb	r2, [r3, #8]
 8017362:	687b      	ldr	r3, [r7, #4]
 8017364:	721a      	strb	r2, [r3, #8]
}
 8017366:	bf00      	nop
 8017368:	370c      	adds	r7, #12
 801736a:	46bd      	mov	sp, r7
 801736c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017370:	4770      	bx	lr

08017372 <USBH_ParseEPDesc>:
* @param  buf: Buffer where the parsed descriptor stored
* @retval None
*/
static void  USBH_ParseEPDesc (USBH_EpDesc_TypeDef  *ep_descriptor, 
                               uint8_t *buf)
{
 8017372:	b480      	push	{r7}
 8017374:	b083      	sub	sp, #12
 8017376:	af00      	add	r7, sp, #0
 8017378:	6078      	str	r0, [r7, #4]
 801737a:	6039      	str	r1, [r7, #0]
  
  ep_descriptor->bLength          = *(uint8_t  *) (buf + 0);
 801737c:	683b      	ldr	r3, [r7, #0]
 801737e:	781a      	ldrb	r2, [r3, #0]
 8017380:	687b      	ldr	r3, [r7, #4]
 8017382:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t  *) (buf + 1);
 8017384:	683b      	ldr	r3, [r7, #0]
 8017386:	785a      	ldrb	r2, [r3, #1]
 8017388:	687b      	ldr	r3, [r7, #4]
 801738a:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t  *) (buf + 2);
 801738c:	683b      	ldr	r3, [r7, #0]
 801738e:	789a      	ldrb	r2, [r3, #2]
 8017390:	687b      	ldr	r3, [r7, #4]
 8017392:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t  *) (buf + 3);
 8017394:	683b      	ldr	r3, [r7, #0]
 8017396:	78da      	ldrb	r2, [r3, #3]
 8017398:	687b      	ldr	r3, [r7, #4]
 801739a:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16 (buf + 4);
 801739c:	683b      	ldr	r3, [r7, #0]
 801739e:	3304      	adds	r3, #4
 80173a0:	781b      	ldrb	r3, [r3, #0]
 80173a2:	b29a      	uxth	r2, r3
 80173a4:	683b      	ldr	r3, [r7, #0]
 80173a6:	3304      	adds	r3, #4
 80173a8:	3301      	adds	r3, #1
 80173aa:	781b      	ldrb	r3, [r3, #0]
 80173ac:	b29b      	uxth	r3, r3
 80173ae:	021b      	lsls	r3, r3, #8
 80173b0:	b29b      	uxth	r3, r3
 80173b2:	4413      	add	r3, r2
 80173b4:	b29a      	uxth	r2, r3
 80173b6:	687b      	ldr	r3, [r7, #4]
 80173b8:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t  *) (buf + 6);
 80173ba:	683b      	ldr	r3, [r7, #0]
 80173bc:	799a      	ldrb	r2, [r3, #6]
 80173be:	687b      	ldr	r3, [r7, #4]
 80173c0:	719a      	strb	r2, [r3, #6]
}
 80173c2:	bf00      	nop
 80173c4:	370c      	adds	r7, #12
 80173c6:	46bd      	mov	sp, r7
 80173c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80173cc:	4770      	bx	lr

080173ce <USBH_ParseStringDesc>:
* @retval None
*/
static void USBH_ParseStringDesc (uint8_t* psrc, 
                                  uint8_t* pdest, 
                                  uint16_t length)
{
 80173ce:	b480      	push	{r7}
 80173d0:	b087      	sub	sp, #28
 80173d2:	af00      	add	r7, sp, #0
 80173d4:	60f8      	str	r0, [r7, #12]
 80173d6:	60b9      	str	r1, [r7, #8]
 80173d8:	4613      	mov	r3, r2
 80173da:	80fb      	strh	r3, [r7, #6]
  */
  
  /* Check which is lower size, the Size of string or the length of bytes read 
  from the device */
  
  if ( psrc[1] == USB_DESC_TYPE_STRING)
 80173dc:	68fb      	ldr	r3, [r7, #12]
 80173de:	3301      	adds	r3, #1
 80173e0:	781b      	ldrb	r3, [r3, #0]
 80173e2:	2b03      	cmp	r3, #3
 80173e4:	d120      	bne.n	8017428 <USBH_ParseStringDesc+0x5a>
  { /* Make sure the Descriptor is String Type */
    
    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */      
    strlength = ( ( (psrc[0]-2) <= length) ? (psrc[0]-2) :length); 
 80173e6:	68fb      	ldr	r3, [r7, #12]
 80173e8:	781b      	ldrb	r3, [r3, #0]
 80173ea:	1e9a      	subs	r2, r3, #2
 80173ec:	88fb      	ldrh	r3, [r7, #6]
 80173ee:	4293      	cmp	r3, r2
 80173f0:	bfa8      	it	ge
 80173f2:	4613      	movge	r3, r2
 80173f4:	82bb      	strh	r3, [r7, #20]
    psrc += 2; /* Adjust the offset ignoring the String Len and Descriptor type */
 80173f6:	68fb      	ldr	r3, [r7, #12]
 80173f8:	3302      	adds	r3, #2
 80173fa:	60fb      	str	r3, [r7, #12]
    
    for (idx = 0; idx < strlength; idx+=2 )
 80173fc:	2300      	movs	r3, #0
 80173fe:	82fb      	strh	r3, [r7, #22]
 8017400:	e00b      	b.n	801741a <USBH_ParseStringDesc+0x4c>
    {/* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8017402:	8afb      	ldrh	r3, [r7, #22]
 8017404:	68fa      	ldr	r2, [r7, #12]
 8017406:	4413      	add	r3, r2
 8017408:	781a      	ldrb	r2, [r3, #0]
 801740a:	68bb      	ldr	r3, [r7, #8]
 801740c:	701a      	strb	r2, [r3, #0]
      pdest++;
 801740e:	68bb      	ldr	r3, [r7, #8]
 8017410:	3301      	adds	r3, #1
 8017412:	60bb      	str	r3, [r7, #8]
    for (idx = 0; idx < strlength; idx+=2 )
 8017414:	8afb      	ldrh	r3, [r7, #22]
 8017416:	3302      	adds	r3, #2
 8017418:	82fb      	strh	r3, [r7, #22]
 801741a:	8afa      	ldrh	r2, [r7, #22]
 801741c:	8abb      	ldrh	r3, [r7, #20]
 801741e:	429a      	cmp	r2, r3
 8017420:	d3ef      	bcc.n	8017402 <USBH_ParseStringDesc+0x34>
    }  
    *pdest = 0; /* mark end of string */  
 8017422:	68bb      	ldr	r3, [r7, #8]
 8017424:	2200      	movs	r2, #0
 8017426:	701a      	strb	r2, [r3, #0]
  }
}
 8017428:	bf00      	nop
 801742a:	371c      	adds	r7, #28
 801742c:	46bd      	mov	sp, r7
 801742e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017432:	4770      	bx	lr

08017434 <USBH_GetNextDesc>:
* @param  buf: Buffer where the cfg descriptor is available
* @param  ptr: data popinter inside the cfg descriptor
* @retval next header
*/
USBH_DescHeader_t  *USBH_GetNextDesc (uint8_t   *pbuf, uint16_t  *ptr)
{
 8017434:	b480      	push	{r7}
 8017436:	b085      	sub	sp, #20
 8017438:	af00      	add	r7, sp, #0
 801743a:	6078      	str	r0, [r7, #4]
 801743c:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;
 
  *ptr += ((USBH_DescHeader_t *)pbuf)->bLength;  
 801743e:	683b      	ldr	r3, [r7, #0]
 8017440:	881a      	ldrh	r2, [r3, #0]
 8017442:	687b      	ldr	r3, [r7, #4]
 8017444:	781b      	ldrb	r3, [r3, #0]
 8017446:	b29b      	uxth	r3, r3
 8017448:	4413      	add	r3, r2
 801744a:	b29a      	uxth	r2, r3
 801744c:	683b      	ldr	r3, [r7, #0]
 801744e:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)((uint8_t *)pbuf + \
         ((USBH_DescHeader_t *)pbuf)->bLength);
 8017450:	687b      	ldr	r3, [r7, #4]
 8017452:	781b      	ldrb	r3, [r3, #0]
 8017454:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)((uint8_t *)pbuf + \
 8017456:	687b      	ldr	r3, [r7, #4]
 8017458:	4413      	add	r3, r2
 801745a:	60fb      	str	r3, [r7, #12]
 
  return(pnext);
 801745c:	68fb      	ldr	r3, [r7, #12]
}
 801745e:	4618      	mov	r0, r3
 8017460:	3714      	adds	r7, #20
 8017462:	46bd      	mov	sp, r7
 8017464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017468:	4770      	bx	lr
 801746a:	bf00      	nop

0801746c <InitTaskContext>:
 * @details    This function is called to initialize the stack frame of the 
 *             task being created.
 ******************************************************************************
 */
OS_STK *InitTaskContext(FUNCPtr task,void *param,OS_STK *pstk)
{
 801746c:	b480      	push	{r7}
 801746e:	b087      	sub	sp, #28
 8017470:	af00      	add	r7, sp, #0
 8017472:	60f8      	str	r0, [r7, #12]
 8017474:	60b9      	str	r1, [r7, #8]
 8017476:	607a      	str	r2, [r7, #4]
    OS_STK *context;
	context  = pstk;
 8017478:	687b      	ldr	r3, [r7, #4]
 801747a:	617b      	str	r3, [r7, #20]
#if CFG_CHIP_TYPE == 3
	context      = context - 18;
#endif
    *(context--) = (U32)0x01000000L;      /* xPSR	        */
 801747c:	697b      	ldr	r3, [r7, #20]
 801747e:	1f1a      	subs	r2, r3, #4
 8017480:	617a      	str	r2, [r7, #20]
 8017482:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8017486:	601a      	str	r2, [r3, #0]
	*(context--) = (U32)task;             /* Entry point of task.                         */
 8017488:	697b      	ldr	r3, [r7, #20]
 801748a:	1f1a      	subs	r2, r3, #4
 801748c:	617a      	str	r2, [r7, #20]
 801748e:	68fa      	ldr	r2, [r7, #12]
 8017490:	601a      	str	r2, [r3, #0]
	*(context)   = (U32)0xFFFFFFFEL;
 8017492:	697b      	ldr	r3, [r7, #20]
 8017494:	f06f 0201 	mvn.w	r2, #1
 8017498:	601a      	str	r2, [r3, #0]
    context      = context - 5;
 801749a:	697b      	ldr	r3, [r7, #20]
 801749c:	3b14      	subs	r3, #20
 801749e:	617b      	str	r3, [r7, #20]
	*(context)   = (U32)param;            /* R0: argument */
 80174a0:	68ba      	ldr	r2, [r7, #8]
 80174a2:	697b      	ldr	r3, [r7, #20]
 80174a4:	601a      	str	r2, [r3, #0]
	context      = context - 8;
 80174a6:	697b      	ldr	r3, [r7, #20]
 80174a8:	3b20      	subs	r3, #32
 80174aa:	617b      	str	r3, [r7, #20]
#if CFG_CHIP_TYPE == 3
	context      = context - 16;
#endif
//    *(--context) = 0xfffffffd;          /* LR */
  	
    return (context);                   /* Returns location of new stack top. */
 80174ac:	697b      	ldr	r3, [r7, #20]
}
 80174ae:	4618      	mov	r0, r3
 80174b0:	371c      	adds	r7, #28
 80174b2:	46bd      	mov	sp, r7
 80174b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80174b8:	4770      	bx	lr

080174ba <SysTick_Handler>:
 * @details    This is system tick interrupt headler.		 
 * @note       CoOS may schedule when exiting this ISR. 
 *******************************************************************************
 */ 
void SysTick_Handler(void)
{
 80174ba:	b598      	push	{r3, r4, r7, lr}
 80174bc:	af00      	add	r7, sp, #0
    OSSchedLock++;                  /* Lock scheduler.                        */
 80174be:	4b20      	ldr	r3, [pc, #128]	; (8017540 <SysTick_Handler+0x86>)
 80174c0:	781b      	ldrb	r3, [r3, #0]
 80174c2:	b2db      	uxtb	r3, r3
 80174c4:	3301      	adds	r3, #1
 80174c6:	b2da      	uxtb	r2, r3
 80174c8:	4b1d      	ldr	r3, [pc, #116]	; (8017540 <SysTick_Handler+0x86>)
 80174ca:	701a      	strb	r2, [r3, #0]
    OSTickCnt++;                    /* Increment systerm time.                */
 80174cc:	4b1d      	ldr	r3, [pc, #116]	; (8017544 <SysTick_Handler+0x8a>)
 80174ce:	e9d3 1200 	ldrd	r1, r2, [r3]
 80174d2:	1c4b      	adds	r3, r1, #1
 80174d4:	f142 0400 	adc.w	r4, r2, #0
 80174d8:	4a1a      	ldr	r2, [pc, #104]	; (8017544 <SysTick_Handler+0x8a>)
 80174da:	e9c2 3400 	strd	r3, r4, [r2]
#if CFG_TASK_WAITTING_EN >0    
    if(DlyList != Co_NULL)             /* Have task in delay list?               */
 80174de:	4b1a      	ldr	r3, [pc, #104]	; (8017548 <SysTick_Handler+0x8e>)
 80174e0:	681b      	ldr	r3, [r3, #0]
 80174e2:	2b00      	cmp	r3, #0
 80174e4:	d010      	beq.n	8017508 <SysTick_Handler+0x4e>
    {
        if(DlyList->delayTick > 1)  /* Delay time > 1?                        */
 80174e6:	4b18      	ldr	r3, [pc, #96]	; (8017548 <SysTick_Handler+0x8e>)
 80174e8:	681b      	ldr	r3, [r3, #0]
 80174ea:	6a1b      	ldr	r3, [r3, #32]
 80174ec:	2b01      	cmp	r3, #1
 80174ee:	d905      	bls.n	80174fc <SysTick_Handler+0x42>
        {
			DlyList->delayTick--;   /* Decrease delay time of the list head.  */         
 80174f0:	4b15      	ldr	r3, [pc, #84]	; (8017548 <SysTick_Handler+0x8e>)
 80174f2:	681b      	ldr	r3, [r3, #0]
 80174f4:	6a1a      	ldr	r2, [r3, #32]
 80174f6:	3a01      	subs	r2, #1
 80174f8:	621a      	str	r2, [r3, #32]
 80174fa:	e005      	b.n	8017508 <SysTick_Handler+0x4e>
        }
		else
		{
			DlyList->delayTick = 0;
 80174fc:	4b12      	ldr	r3, [pc, #72]	; (8017548 <SysTick_Handler+0x8e>)
 80174fe:	681b      	ldr	r3, [r3, #0]
 8017500:	2200      	movs	r2, #0
 8017502:	621a      	str	r2, [r3, #32]
			isr_TimeDispose();       /* Call hander for delay time list        */
 8017504:	f003 f94c 	bl	801a7a0 <isr_TimeDispose>
		}
    }
#endif
    
#if CFG_TMR_EN > 0	
    if(TmrList != Co_NULL)             /* Have timer in working?                 */
 8017508:	4b10      	ldr	r3, [pc, #64]	; (801754c <SysTick_Handler+0x92>)
 801750a:	681b      	ldr	r3, [r3, #0]
 801750c:	2b00      	cmp	r3, #0
 801750e:	d010      	beq.n	8017532 <SysTick_Handler+0x78>
    {
        if(TmrList->tmrCnt > 1)     /* Timer time > 1?                        */
 8017510:	4b0e      	ldr	r3, [pc, #56]	; (801754c <SysTick_Handler+0x92>)
 8017512:	681b      	ldr	r3, [r3, #0]
 8017514:	685b      	ldr	r3, [r3, #4]
 8017516:	2b01      	cmp	r3, #1
 8017518:	d905      	bls.n	8017526 <SysTick_Handler+0x6c>
        {
			TmrList->tmrCnt--;      /* Decrease timer time of the list head.  */        
 801751a:	4b0c      	ldr	r3, [pc, #48]	; (801754c <SysTick_Handler+0x92>)
 801751c:	681b      	ldr	r3, [r3, #0]
 801751e:	685a      	ldr	r2, [r3, #4]
 8017520:	3a01      	subs	r2, #1
 8017522:	605a      	str	r2, [r3, #4]
 8017524:	e005      	b.n	8017532 <SysTick_Handler+0x78>
        }
		else
		{
			TmrList->tmrCnt = 0;
 8017526:	4b09      	ldr	r3, [pc, #36]	; (801754c <SysTick_Handler+0x92>)
 8017528:	681b      	ldr	r3, [r3, #0]
 801752a:	2200      	movs	r2, #0
 801752c:	605a      	str	r2, [r3, #4]
			isr_TmrDispose();         /* Call hander for timer list             */
 801752e:	f003 fca7 	bl	801ae80 <isr_TmrDispose>
		}
    }	
#endif
	TaskSchedReq = Co_TRUE;
 8017532:	4b07      	ldr	r3, [pc, #28]	; (8017550 <SysTick_Handler+0x96>)
 8017534:	2201      	movs	r2, #1
 8017536:	701a      	strb	r2, [r3, #0]
    OsSchedUnlock();
 8017538:	f000 f83e 	bl	80175b8 <OsSchedUnlock>
}
 801753c:	bf00      	nop
 801753e:	bd98      	pop	{r3, r4, r7, pc}
 8017540:	20003749 	.word	0x20003749
 8017544:	20003740 	.word	0x20003740
 8017548:	2000d738 	.word	0x2000d738
 801754c:	2000d76c 	.word	0x2000d76c
 8017550:	2000374a 	.word	0x2000374a

08017554 <CoEnterISR>:
 *             interrupt handler code,and call CoExitISR() after your handler
 *             code and before exiting from ISR.	 
 *******************************************************************************
 */
void CoEnterISR(void)
{
 8017554:	b580      	push	{r7, lr}
 8017556:	af00      	add	r7, sp, #0
    Inc8(&OSIntNesting);                /* OSIntNesting increment             */
 8017558:	4802      	ldr	r0, [pc, #8]	; (8017564 <CoEnterISR+0x10>)
 801755a:	f001 fd85 	bl	8019068 <Inc8>
}
 801755e:	bf00      	nop
 8017560:	bd80      	pop	{r7, pc}
 8017562:	bf00      	nop
 8017564:	20003748 	.word	0x20003748

08017568 <CoExitISR>:
 *
 * @note 
 *******************************************************************************
 */
void CoExitISR(void)
{
 8017568:	b580      	push	{r7, lr}
 801756a:	af00      	add	r7, sp, #0
    Dec8(&OSIntNesting);                /* OSIntNesting decrease              */
 801756c:	480f      	ldr	r0, [pc, #60]	; (80175ac <CoExitISR+0x44>)
 801756e:	f001 fd93 	bl	8019098 <Dec8>
    if( OSIntNesting == 0)              /* Is OSIntNesting == 0?              */
 8017572:	4b0e      	ldr	r3, [pc, #56]	; (80175ac <CoExitISR+0x44>)
 8017574:	781b      	ldrb	r3, [r3, #0]
 8017576:	b2db      	uxtb	r3, r3
 8017578:	2b00      	cmp	r3, #0
 801757a:	d114      	bne.n	80175a6 <CoExitISR+0x3e>
    {
        if(TaskSchedReq == Co_TRUE)
 801757c:	4b0c      	ldr	r3, [pc, #48]	; (80175b0 <CoExitISR+0x48>)
 801757e:	781b      	ldrb	r3, [r3, #0]
 8017580:	b2db      	uxtb	r3, r3
 8017582:	2b01      	cmp	r3, #1
 8017584:	d10f      	bne.n	80175a6 <CoExitISR+0x3e>
        {
			OSSchedLock++;
 8017586:	4b0b      	ldr	r3, [pc, #44]	; (80175b4 <CoExitISR+0x4c>)
 8017588:	781b      	ldrb	r3, [r3, #0]
 801758a:	b2db      	uxtb	r3, r3
 801758c:	3301      	adds	r3, #1
 801758e:	b2da      	uxtb	r2, r3
 8017590:	4b08      	ldr	r3, [pc, #32]	; (80175b4 <CoExitISR+0x4c>)
 8017592:	701a      	strb	r2, [r3, #0]
            Schedule();                 /* Call task schedule                 */
 8017594:	f002 fc78 	bl	8019e88 <Schedule>
			OSSchedLock--;
 8017598:	4b06      	ldr	r3, [pc, #24]	; (80175b4 <CoExitISR+0x4c>)
 801759a:	781b      	ldrb	r3, [r3, #0]
 801759c:	b2db      	uxtb	r3, r3
 801759e:	3b01      	subs	r3, #1
 80175a0:	b2da      	uxtb	r2, r3
 80175a2:	4b04      	ldr	r3, [pc, #16]	; (80175b4 <CoExitISR+0x4c>)
 80175a4:	701a      	strb	r2, [r3, #0]
        }
    }
}
 80175a6:	bf00      	nop
 80175a8:	bd80      	pop	{r7, pc}
 80175aa:	bf00      	nop
 80175ac:	20003748 	.word	0x20003748
 80175b0:	2000374a 	.word	0x2000374a
 80175b4:	20003749 	.word	0x20003749

080175b8 <OsSchedUnlock>:
 *
 * @note 
 *******************************************************************************
 */
void OsSchedUnlock(void)
{
 80175b8:	b580      	push	{r7, lr}
 80175ba:	af00      	add	r7, sp, #0
    if(OSSchedLock == 1)                /* Is OSSchedLock == 0?               */
 80175bc:	4b0f      	ldr	r3, [pc, #60]	; (80175fc <OsSchedUnlock+0x44>)
 80175be:	781b      	ldrb	r3, [r3, #0]
 80175c0:	b2db      	uxtb	r3, r3
 80175c2:	2b01      	cmp	r3, #1
 80175c4:	d110      	bne.n	80175e8 <OsSchedUnlock+0x30>
    {
#if CFG_TASK_WAITTING_EN > 0
        if(IsrReq == Co_TRUE)
 80175c6:	4b0e      	ldr	r3, [pc, #56]	; (8017600 <OsSchedUnlock+0x48>)
 80175c8:	781b      	ldrb	r3, [r3, #0]
 80175ca:	2b01      	cmp	r3, #1
 80175cc:	d101      	bne.n	80175d2 <OsSchedUnlock+0x1a>
        {
            RespondSRQ();               /* Respond service request            */	
 80175ce:	f002 f9fd 	bl	80199cc <RespondSRQ>
        }
#endif
        /* Judge task state change or higher PRI task coming in               */
        if(TaskSchedReq == Co_TRUE)
 80175d2:	4b0c      	ldr	r3, [pc, #48]	; (8017604 <OsSchedUnlock+0x4c>)
 80175d4:	781b      	ldrb	r3, [r3, #0]
 80175d6:	b2db      	uxtb	r3, r3
 80175d8:	2b01      	cmp	r3, #1
 80175da:	d101      	bne.n	80175e0 <OsSchedUnlock+0x28>
        {
            Schedule();                 /* Call task schedule                 */
 80175dc:	f002 fc54 	bl	8019e88 <Schedule>
        }
		OSSchedLock = 0;
 80175e0:	4b06      	ldr	r3, [pc, #24]	; (80175fc <OsSchedUnlock+0x44>)
 80175e2:	2200      	movs	r2, #0
 80175e4:	701a      	strb	r2, [r3, #0]
    }
	else
	{
		OSSchedLock--; 	
	}
}
 80175e6:	e006      	b.n	80175f6 <OsSchedUnlock+0x3e>
		OSSchedLock--; 	
 80175e8:	4b04      	ldr	r3, [pc, #16]	; (80175fc <OsSchedUnlock+0x44>)
 80175ea:	781b      	ldrb	r3, [r3, #0]
 80175ec:	b2db      	uxtb	r3, r3
 80175ee:	3b01      	subs	r3, #1
 80175f0:	b2da      	uxtb	r2, r3
 80175f2:	4b02      	ldr	r3, [pc, #8]	; (80175fc <OsSchedUnlock+0x44>)
 80175f4:	701a      	strb	r2, [r3, #0]
}
 80175f6:	bf00      	nop
 80175f8:	bd80      	pop	{r7, pc}
 80175fa:	bf00      	nop
 80175fc:	20003749 	.word	0x20003749
 8017600:	2000d594 	.word	0x2000d594
 8017604:	2000374a 	.word	0x2000374a

08017608 <CoSchedLock>:
 *
 * @note 
 *******************************************************************************
 */
void CoSchedLock(void)
{									    
 8017608:	b480      	push	{r7}
 801760a:	af00      	add	r7, sp, #0
    OsSchedLock();                      /* Lock schedule                      */
 801760c:	4b05      	ldr	r3, [pc, #20]	; (8017624 <CoSchedLock+0x1c>)
 801760e:	781b      	ldrb	r3, [r3, #0]
 8017610:	b2db      	uxtb	r3, r3
 8017612:	3301      	adds	r3, #1
 8017614:	b2da      	uxtb	r2, r3
 8017616:	4b03      	ldr	r3, [pc, #12]	; (8017624 <CoSchedLock+0x1c>)
 8017618:	701a      	strb	r2, [r3, #0]
}
 801761a:	bf00      	nop
 801761c:	46bd      	mov	sp, r7
 801761e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017622:	4770      	bx	lr
 8017624:	20003749 	.word	0x20003749

08017628 <CoSchedUnlock>:
 *
 * @note 
 *******************************************************************************
 */
void CoSchedUnlock(void)
{
 8017628:	b580      	push	{r7, lr}
 801762a:	af00      	add	r7, sp, #0
    OsSchedUnlock();                    /* Unlock schedule                    */
 801762c:	f7ff ffc4 	bl	80175b8 <OsSchedUnlock>
}
 8017630:	bf00      	nop
 8017632:	bd80      	pop	{r7, pc}

08017634 <CoInitOS>:
 *            OsStart();            // Start multitask.
 * @endcode	
 *******************************************************************************		
 */
void CoInitOS(void)
{
 8017634:	b580      	push	{r7, lr}
 8017636:	af00      	add	r7, sp, #0
    InitSysTick();                /* Initialize system tick.                  */
 8017638:	4b16      	ldr	r3, [pc, #88]	; (8017694 <CoInitOS+0x60>)
 801763a:	4a17      	ldr	r2, [pc, #92]	; (8017698 <CoInitOS+0x64>)
 801763c:	601a      	str	r2, [r3, #0]
 801763e:	4b17      	ldr	r3, [pc, #92]	; (801769c <CoInitOS+0x68>)
 8017640:	2207      	movs	r2, #7
 8017642:	601a      	str	r2, [r3, #0]
    InitInt();                    /* Initialize PendSV,SVC,SysTick interrupt  */	
 8017644:	4b16      	ldr	r3, [pc, #88]	; (80176a0 <CoInitOS+0x6c>)
 8017646:	681b      	ldr	r3, [r3, #0]
 8017648:	4a15      	ldr	r2, [pc, #84]	; (80176a0 <CoInitOS+0x6c>)
 801764a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801764e:	6013      	str	r3, [r2, #0]
 8017650:	4b14      	ldr	r3, [pc, #80]	; (80176a4 <CoInitOS+0x70>)
 8017652:	681b      	ldr	r3, [r3, #0]
 8017654:	4a13      	ldr	r2, [pc, #76]	; (80176a4 <CoInitOS+0x70>)
 8017656:	ea6f 4303 	mvn.w	r3, r3, lsl #16
 801765a:	ea6f 4313 	mvn.w	r3, r3, lsr #16
 801765e:	6013      	str	r3, [r2, #0]
    CreateTCBList();              /* Create TCB list.                         */   
 8017660:	f002 fa34 	bl	8019acc <CreateTCBList>
#if CFG_EVENT_EN > 0				    
    CreateEventList();            /* Create event control list.               */
 8017664:	f000 f84c 	bl	8017700 <CreateEventList>
#endif  
#if CFG_KHEAP_EN > 0
    CoCreateKheap();              /* Create kernel heap within user define    */
 8017668:	f000 fef6 	bl	8018458 <CoCreateKheap>
#endif   
    OsSchedLock();                /* Lock Schedule                            */ 
 801766c:	4b0e      	ldr	r3, [pc, #56]	; (80176a8 <CoInitOS+0x74>)
 801766e:	781b      	ldrb	r3, [r3, #0]
 8017670:	b2db      	uxtb	r3, r3
 8017672:	3301      	adds	r3, #1
 8017674:	b2da      	uxtb	r2, r3
 8017676:	4b0c      	ldr	r3, [pc, #48]	; (80176a8 <CoInitOS+0x74>)
 8017678:	701a      	strb	r2, [r3, #0]
                                  /* Create first task -- IDLE task.          */ 
    CoCreateTask(                      CoIdleTask,
 801767a:	4b0c      	ldr	r3, [pc, #48]	; (80176ac <CoInitOS+0x78>)
 801767c:	f44f 52ca 	mov.w	r2, #6464	; 0x1940
 8017680:	2100      	movs	r1, #0
 8017682:	480b      	ldr	r0, [pc, #44]	; (80176b0 <CoInitOS+0x7c>)
 8017684:	f002 fcca 	bl	801a01c <CreateTask>
                                  CFG_LOWEST_PRIO,
                 &idle_stk[CFG_IDLE_STACK_SIZE-1],
                              CFG_IDLE_STACK_SIZE
                 );
				                  /* Set PSP for CoIdleTask coming in */ 
	SetEnvironment(&idle_stk[CFG_IDLE_STACK_SIZE-1]);
 8017688:	4808      	ldr	r0, [pc, #32]	; (80176ac <CoInitOS+0x78>)
 801768a:	f001 fd2b 	bl	80190e4 <SetEnvironment>
}
 801768e:	bf00      	nop
 8017690:	bd80      	pop	{r7, pc}
 8017692:	bf00      	nop
 8017694:	e000e014 	.word	0xe000e014
 8017698:	000afc7f 	.word	0x000afc7f
 801769c:	e000e010 	.word	0xe000e010
 80176a0:	e000ed1c 	.word	0xe000ed1c
 80176a4:	e000ed20 	.word	0xe000ed20
 80176a8:	20003749 	.word	0x20003749
 80176ac:	2000d718 	.word	0x2000d718
 80176b0:	08018441 	.word	0x08018441

080176b4 <CoStartOS>:
 * @note       This function must be called to start OS when you use CoOS,and must
 *             call after CoOsInit().
 *******************************************************************************
 */
void CoStartOS(void)
{
 80176b4:	b580      	push	{r7, lr}
 80176b6:	af00      	add	r7, sp, #0
    TCBRunning  = &TCBTbl[0];           /* Get running task                     */
 80176b8:	4b09      	ldr	r3, [pc, #36]	; (80176e0 <CoStartOS+0x2c>)
 80176ba:	4a0a      	ldr	r2, [pc, #40]	; (80176e4 <CoStartOS+0x30>)
 80176bc:	601a      	str	r2, [r3, #0]
    TCBNext     = TCBRunning;           /* Set next scheduled task as running task */
 80176be:	4b08      	ldr	r3, [pc, #32]	; (80176e0 <CoStartOS+0x2c>)
 80176c0:	681b      	ldr	r3, [r3, #0]
 80176c2:	4a09      	ldr	r2, [pc, #36]	; (80176e8 <CoStartOS+0x34>)
 80176c4:	6013      	str	r3, [r2, #0]
    TCBRunning->state = TASK_RUNNING;   /* Set running task status to RUNNING   */
 80176c6:	4b06      	ldr	r3, [pc, #24]	; (80176e0 <CoStartOS+0x2c>)
 80176c8:	681b      	ldr	r3, [r3, #0]
 80176ca:	2201      	movs	r2, #1
 80176cc:	715a      	strb	r2, [r3, #5]
    RemoveFromTCBRdyList(TCBRunning);   /* Remove running task from READY list  */
 80176ce:	4b04      	ldr	r3, [pc, #16]	; (80176e0 <CoStartOS+0x2c>)
 80176d0:	681b      	ldr	r3, [r3, #0]
 80176d2:	4618      	mov	r0, r3
 80176d4:	f002 fab2 	bl	8019c3c <RemoveFromTCBRdyList>
    OsSchedUnlock();					/* Enable Schedule,call task schedule   */
 80176d8:	f7ff ff6e 	bl	80175b8 <OsSchedUnlock>
}
 80176dc:	bf00      	nop
 80176de:	bd80      	pop	{r7, pc}
 80176e0:	2000d728 	.word	0x2000d728
 80176e4:	2000d598 	.word	0x2000d598
 80176e8:	2000d724 	.word	0x2000d724

080176ec <CoGetOSVersion>:
 *             the return value corresponds to CooCox's version number multiplied
 *             by 100. In other words, version 1.02 would be returned as 102.         
 *******************************************************************************
 */
OS_VER CoGetOSVersion(void)
{
 80176ec:	b480      	push	{r7}
 80176ee:	af00      	add	r7, sp, #0
    return OS_VERSION;                  /* Get CooCox CoOS version            */
 80176f0:	f44f 738b 	mov.w	r3, #278	; 0x116
}
 80176f4:	4618      	mov	r0, r3
 80176f6:	46bd      	mov	sp, r7
 80176f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80176fc:	4770      	bx	lr
 80176fe:	bf00      	nop

08017700 <CreateEventList>:
 * @details    This function is called by OSInit() API to create a ECB list,supply
 *             a  pointer to next event control block that not used.	 				
 *******************************************************************************
 */
void CreateEventList(void)
{	
 8017700:	b480      	push	{r7}
 8017702:	b085      	sub	sp, #20
 8017704:	af00      	add	r7, sp, #0
    U8  i;
    P_ECB pecb1;
#if CFG_MAX_EVENT > 1
    P_ECB pecb2;
#endif
    i=0;
 8017706:	2300      	movs	r3, #0
 8017708:	73fb      	strb	r3, [r7, #15]
    pecb1 = &EventTbl[0];               /* Get first item                     */
 801770a:	4b19      	ldr	r3, [pc, #100]	; (8017770 <CreateEventList+0x70>)
 801770c:	60bb      	str	r3, [r7, #8]
    pecb1->id        = i;               /* Assign ID.                         */
    pecb1->eventType = EVENT_TYPE_INVALID;  /* Sign that not to use.          */
#endif
    
#if CFG_MAX_EVENT > 1             /* Build event list for more than one item  */								   
    pecb2 = &EventTbl[1];
 801770e:	4b19      	ldr	r3, [pc, #100]	; (8017774 <CreateEventList+0x74>)
 8017710:	607b      	str	r3, [r7, #4]
    for(;i< (CFG_MAX_EVENT-1);i++ )
 8017712:	e014      	b.n	801773e <CreateEventList+0x3e>
    {
        pecb1->eventPtr  = (void*)pecb2;      /* Set link for list            */
 8017714:	68bb      	ldr	r3, [r7, #8]
 8017716:	687a      	ldr	r2, [r7, #4]
 8017718:	601a      	str	r2, [r3, #0]
        pecb1->id        = i;                 /* Assign ID.                   */
 801771a:	68bb      	ldr	r3, [r7, #8]
 801771c:	7bfa      	ldrb	r2, [r7, #15]
 801771e:	711a      	strb	r2, [r3, #4]
        pecb1->eventType = EVENT_TYPE_INVALID;/* Sign that not to use.        */
 8017720:	68ba      	ldr	r2, [r7, #8]
 8017722:	7953      	ldrb	r3, [r2, #5]
 8017724:	2104      	movs	r1, #4
 8017726:	f361 0303 	bfi	r3, r1, #0, #4
 801772a:	7153      	strb	r3, [r2, #5]
        pecb1++;                              /* Get next item                */
 801772c:	68bb      	ldr	r3, [r7, #8]
 801772e:	3310      	adds	r3, #16
 8017730:	60bb      	str	r3, [r7, #8]
        pecb2++;	
 8017732:	687b      	ldr	r3, [r7, #4]
 8017734:	3310      	adds	r3, #16
 8017736:	607b      	str	r3, [r7, #4]
    for(;i< (CFG_MAX_EVENT-1);i++ )
 8017738:	7bfb      	ldrb	r3, [r7, #15]
 801773a:	3301      	adds	r3, #1
 801773c:	73fb      	strb	r3, [r7, #15]
 801773e:	7bfb      	ldrb	r3, [r7, #15]
 8017740:	2b12      	cmp	r3, #18
 8017742:	d9e7      	bls.n	8017714 <CreateEventList+0x14>
    }
	pecb1->eventType = EVENT_TYPE_INVALID;    /* Sign that not to use.        */
 8017744:	68ba      	ldr	r2, [r7, #8]
 8017746:	7953      	ldrb	r3, [r2, #5]
 8017748:	2104      	movs	r1, #4
 801774a:	f361 0303 	bfi	r3, r1, #0, #4
 801774e:	7153      	strb	r3, [r2, #5]
    pecb1->eventPtr  = Co_NULL;                  /* Set link for last item       */
 8017750:	68bb      	ldr	r3, [r7, #8]
 8017752:	2200      	movs	r2, #0
 8017754:	601a      	str	r2, [r3, #0]
    pecb1->id        = i;	
 8017756:	68bb      	ldr	r3, [r7, #8]
 8017758:	7bfa      	ldrb	r2, [r7, #15]
 801775a:	711a      	strb	r2, [r3, #4]
#endif
    
    FreeEventList    = &EventTbl[0];          /* Set free event item          */	
 801775c:	4b06      	ldr	r3, [pc, #24]	; (8017778 <CreateEventList+0x78>)
 801775e:	4a04      	ldr	r2, [pc, #16]	; (8017770 <CreateEventList+0x70>)
 8017760:	601a      	str	r2, [r3, #0]
}
 8017762:	bf00      	nop
 8017764:	3714      	adds	r7, #20
 8017766:	46bd      	mov	sp, r7
 8017768:	f85d 7b04 	ldr.w	r7, [sp], #4
 801776c:	4770      	bx	lr
 801776e:	bf00      	nop
 8017770:	2000374c 	.word	0x2000374c
 8017774:	2000375c 	.word	0x2000375c
 8017778:	2000388c 	.word	0x2000388c

0801777c <ReleaseECB>:
 * @details    This function is called to release a event control block when a 
 *             event be deleted.
 *******************************************************************************
 */
static void ReleaseECB(P_ECB pecb)
{
 801777c:	b580      	push	{r7, lr}
 801777e:	b082      	sub	sp, #8
 8017780:	af00      	add	r7, sp, #0
 8017782:	6078      	str	r0, [r7, #4]
    pecb->eventType = EVENT_TYPE_INVALID;     /* Sign that not to use.        */ 
 8017784:	687a      	ldr	r2, [r7, #4]
 8017786:	7953      	ldrb	r3, [r2, #5]
 8017788:	2104      	movs	r1, #4
 801778a:	f361 0303 	bfi	r3, r1, #0, #4
 801778e:	7153      	strb	r3, [r2, #5]
    OsSchedLock();                            /* Lock schedule                */
 8017790:	4b09      	ldr	r3, [pc, #36]	; (80177b8 <ReleaseECB+0x3c>)
 8017792:	781b      	ldrb	r3, [r3, #0]
 8017794:	b2db      	uxtb	r3, r3
 8017796:	3301      	adds	r3, #1
 8017798:	b2da      	uxtb	r2, r3
 801779a:	4b07      	ldr	r3, [pc, #28]	; (80177b8 <ReleaseECB+0x3c>)
 801779c:	701a      	strb	r2, [r3, #0]
    pecb->eventPtr  = FreeEventList;          /* Release ECB that event hold  */
 801779e:	4b07      	ldr	r3, [pc, #28]	; (80177bc <ReleaseECB+0x40>)
 80177a0:	681a      	ldr	r2, [r3, #0]
 80177a2:	687b      	ldr	r3, [r7, #4]
 80177a4:	601a      	str	r2, [r3, #0]
    FreeEventList   = pecb;                   /* Reset free event item        */
 80177a6:	4a05      	ldr	r2, [pc, #20]	; (80177bc <ReleaseECB+0x40>)
 80177a8:	687b      	ldr	r3, [r7, #4]
 80177aa:	6013      	str	r3, [r2, #0]
    OsSchedUnlock();                          /* Unlock schedule              */
 80177ac:	f7ff ff04 	bl	80175b8 <OsSchedUnlock>
}
 80177b0:	bf00      	nop
 80177b2:	3708      	adds	r7, #8
 80177b4:	46bd      	mov	sp, r7
 80177b6:	bd80      	pop	{r7, pc}
 80177b8:	20003749 	.word	0x20003749
 80177bc:	2000388c 	.word	0x2000388c

080177c0 <CreatEvent>:
 *
 * @note       This is a internal function of CooCox CoOS,User can't call.
 *******************************************************************************
 */
P_ECB CreatEvent(U8 eventType,U8 eventSortType,void* eventPtr)
{
 80177c0:	b580      	push	{r7, lr}
 80177c2:	b084      	sub	sp, #16
 80177c4:	af00      	add	r7, sp, #0
 80177c6:	4603      	mov	r3, r0
 80177c8:	603a      	str	r2, [r7, #0]
 80177ca:	71fb      	strb	r3, [r7, #7]
 80177cc:	460b      	mov	r3, r1
 80177ce:	71bb      	strb	r3, [r7, #6]
    P_ECB pecb;
    
    OsSchedLock();                      /* Lock schedule                      */
 80177d0:	4b1a      	ldr	r3, [pc, #104]	; (801783c <CreatEvent+0x7c>)
 80177d2:	781b      	ldrb	r3, [r3, #0]
 80177d4:	b2db      	uxtb	r3, r3
 80177d6:	3301      	adds	r3, #1
 80177d8:	b2da      	uxtb	r2, r3
 80177da:	4b18      	ldr	r3, [pc, #96]	; (801783c <CreatEvent+0x7c>)
 80177dc:	701a      	strb	r2, [r3, #0]
    if(FreeEventList == Co_NULL)           /* Is there no free evnet item        */
 80177de:	4b18      	ldr	r3, [pc, #96]	; (8017840 <CreatEvent+0x80>)
 80177e0:	681b      	ldr	r3, [r3, #0]
 80177e2:	2b00      	cmp	r3, #0
 80177e4:	d103      	bne.n	80177ee <CreatEvent+0x2e>
    {
        OsSchedUnlock();                /* Yes,unlock schedule                */
 80177e6:	f7ff fee7 	bl	80175b8 <OsSchedUnlock>
        return Co_NULL;                    /* Return error                       */
 80177ea:	2300      	movs	r3, #0
 80177ec:	e022      	b.n	8017834 <CreatEvent+0x74>
    }
    pecb          = FreeEventList;/* Assign the free event item to this event */
 80177ee:	4b14      	ldr	r3, [pc, #80]	; (8017840 <CreatEvent+0x80>)
 80177f0:	681b      	ldr	r3, [r3, #0]
 80177f2:	60fb      	str	r3, [r7, #12]
    FreeEventList = FreeEventList->eventPtr;  /* Reset free event item        */
 80177f4:	4b12      	ldr	r3, [pc, #72]	; (8017840 <CreatEvent+0x80>)
 80177f6:	681b      	ldr	r3, [r3, #0]
 80177f8:	681b      	ldr	r3, [r3, #0]
 80177fa:	4a11      	ldr	r2, [pc, #68]	; (8017840 <CreatEvent+0x80>)
 80177fc:	6013      	str	r3, [r2, #0]
    OsSchedUnlock();                    /* Unlock schedul                     */
 80177fe:	f7ff fedb 	bl	80175b8 <OsSchedUnlock>
    
    pecb->eventType     = eventType;    /* Initialize event item as user set  */
 8017802:	79fb      	ldrb	r3, [r7, #7]
 8017804:	f003 030f 	and.w	r3, r3, #15
 8017808:	b2d9      	uxtb	r1, r3
 801780a:	68fa      	ldr	r2, [r7, #12]
 801780c:	7953      	ldrb	r3, [r2, #5]
 801780e:	f361 0303 	bfi	r3, r1, #0, #4
 8017812:	7153      	strb	r3, [r2, #5]
    pecb->eventSortType = eventSortType;
 8017814:	79bb      	ldrb	r3, [r7, #6]
 8017816:	f003 030f 	and.w	r3, r3, #15
 801781a:	b2d9      	uxtb	r1, r3
 801781c:	68fa      	ldr	r2, [r7, #12]
 801781e:	7953      	ldrb	r3, [r2, #5]
 8017820:	f361 1307 	bfi	r3, r1, #4, #4
 8017824:	7153      	strb	r3, [r2, #5]
    pecb->eventPtr      = eventPtr;
 8017826:	68fb      	ldr	r3, [r7, #12]
 8017828:	683a      	ldr	r2, [r7, #0]
 801782a:	601a      	str	r2, [r3, #0]
    pecb->eventTCBList  = Co_NULL;
 801782c:	68fb      	ldr	r3, [r7, #12]
 801782e:	2200      	movs	r2, #0
 8017830:	60da      	str	r2, [r3, #12]
    return pecb;                        /* Return event item pointer          */
 8017832:	68fb      	ldr	r3, [r7, #12]
}
 8017834:	4618      	mov	r0, r3
 8017836:	3710      	adds	r7, #16
 8017838:	46bd      	mov	sp, r7
 801783a:	bd80      	pop	{r7, pc}
 801783c:	20003749 	.word	0x20003749
 8017840:	2000388c 	.word	0x2000388c

08017844 <DeleteEvent>:
 *
 * @note       This is a internal function of Coocox CoOS,user can't call.		
 *******************************************************************************
 */
StatusType DeleteEvent(P_ECB pecb,U8 opt)
{
 8017844:	b580      	push	{r7, lr}
 8017846:	b084      	sub	sp, #16
 8017848:	af00      	add	r7, sp, #0
 801784a:	6078      	str	r0, [r7, #4]
 801784c:	460b      	mov	r3, r1
 801784e:	70fb      	strb	r3, [r7, #3]
    P_OSTCB ptcb;
    if(opt == OPT_DEL_NO_PEND)          /* Do delete event when no task pend? */
 8017850:	78fb      	ldrb	r3, [r7, #3]
 8017852:	2b00      	cmp	r3, #0
 8017854:	d109      	bne.n	801786a <DeleteEvent+0x26>
    {
        if(pecb->eventTCBList != Co_NULL)  /* Yes,is there task pend this event? */
 8017856:	687b      	ldr	r3, [r7, #4]
 8017858:	68db      	ldr	r3, [r3, #12]
 801785a:	2b00      	cmp	r3, #0
 801785c:	d001      	beq.n	8017862 <DeleteEvent+0x1e>
        {
            return E_TASK_WAITING;      /* Yes,error return                   */
 801785e:	2304      	movs	r3, #4
 8017860:	e030      	b.n	80178c4 <DeleteEvent+0x80>
        }
        else
        {
            ReleaseECB(pecb);           /* No,release resource that event hold*/
 8017862:	6878      	ldr	r0, [r7, #4]
 8017864:	f7ff ff8a 	bl	801777c <ReleaseECB>
 8017868:	e02b      	b.n	80178c2 <DeleteEvent+0x7e>
        }
    }
    else if(opt == OPT_DEL_ANYWAY)      /* Do delete event anyway?            */
 801786a:	78fb      	ldrb	r3, [r7, #3]
 801786c:	2b01      	cmp	r3, #1
 801786e:	d128      	bne.n	80178c2 <DeleteEvent+0x7e>
    {
        OsSchedLock();                      /* Lock schedule                  */
 8017870:	4b16      	ldr	r3, [pc, #88]	; (80178cc <DeleteEvent+0x88>)
 8017872:	781b      	ldrb	r3, [r3, #0]
 8017874:	b2db      	uxtb	r3, r3
 8017876:	3301      	adds	r3, #1
 8017878:	b2da      	uxtb	r2, r3
 801787a:	4b14      	ldr	r3, [pc, #80]	; (80178cc <DeleteEvent+0x88>)
 801787c:	701a      	strb	r2, [r3, #0]
        while(pecb->eventTCBList != Co_NULL)   /* Is there task pend this event? */
 801787e:	e017      	b.n	80178b0 <DeleteEvent+0x6c>
        {                                   /* Yes,remove it                  */
            ptcb = pecb->eventTCBList;/* Get first task in event waiting list */
 8017880:	687b      	ldr	r3, [r7, #4]
 8017882:	68db      	ldr	r3, [r3, #12]
 8017884:	60fb      	str	r3, [r7, #12]
            if(ptcb->delayTick != INVALID_VALUE) /* Is task in delay list?    */
 8017886:	68fb      	ldr	r3, [r7, #12]
 8017888:	6a1b      	ldr	r3, [r3, #32]
 801788a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801788e:	d002      	beq.n	8017896 <DeleteEvent+0x52>
            {
                RemoveDelayList(ptcb);    /* Yes,remove task from delay list  */
 8017890:	68f8      	ldr	r0, [r7, #12]
 8017892:	f002 fe15 	bl	801a4c0 <RemoveDelayList>
            }

            /* Set next item as event waiting list head */
            pecb->eventTCBList = ptcb->waitNext; 
 8017896:	68fb      	ldr	r3, [r7, #12]
 8017898:	695a      	ldr	r2, [r3, #20]
 801789a:	687b      	ldr	r3, [r7, #4]
 801789c:	60da      	str	r2, [r3, #12]
            ptcb->waitNext     = Co_NULL;  /* Clear link for event waiting list  */
 801789e:	68fb      	ldr	r3, [r7, #12]
 80178a0:	2200      	movs	r2, #0
 80178a2:	615a      	str	r2, [r3, #20]
            ptcb->eventID      = INVALID_ID;  /* Sign that not to use.        */
 80178a4:	68fb      	ldr	r3, [r7, #12]
 80178a6:	22ff      	movs	r2, #255	; 0xff
 80178a8:	721a      	strb	r2, [r3, #8]

			InsertToTCBRdyList(ptcb);         /* Insert task into ready list  */
 80178aa:	68f8      	ldr	r0, [r7, #12]
 80178ac:	f002 f942 	bl	8019b34 <InsertToTCBRdyList>
        while(pecb->eventTCBList != Co_NULL)   /* Is there task pend this event? */
 80178b0:	687b      	ldr	r3, [r7, #4]
 80178b2:	68db      	ldr	r3, [r3, #12]
 80178b4:	2b00      	cmp	r3, #0
 80178b6:	d1e3      	bne.n	8017880 <DeleteEvent+0x3c>
        }
        OsSchedUnlock();                  /* Unlock schedule                  */
 80178b8:	f7ff fe7e 	bl	80175b8 <OsSchedUnlock>
        ReleaseECB(pecb);                 /* Release resource that event hold */
 80178bc:	6878      	ldr	r0, [r7, #4]
 80178be:	f7ff ff5d 	bl	801777c <ReleaseECB>
    }
    return E_OK;                          /* Return OK                        */
 80178c2:	2300      	movs	r3, #0
}
 80178c4:	4618      	mov	r0, r3
 80178c6:	3710      	adds	r7, #16
 80178c8:	46bd      	mov	sp, r7
 80178ca:	bd80      	pop	{r7, pc}
 80178cc:	20003749 	.word	0x20003749

080178d0 <EventTaskToWait>:
 *                                          as head,lowest priority as end.
 *                                          (Highest-->...-->Lowest-->Co_NULL)
 *******************************************************************************
 */
void EventTaskToWait(P_ECB pecb,P_OSTCB ptcb)
{
 80178d0:	b580      	push	{r7, lr}
 80178d2:	b084      	sub	sp, #16
 80178d4:	af00      	add	r7, sp, #0
 80178d6:	6078      	str	r0, [r7, #4]
 80178d8:	6039      	str	r1, [r7, #0]
    P_OSTCB ptcb1;
#if (CFG_EVENT_SORT == 2) || (CFG_EVENT_SORT == 3)
    P_OSTCB ptcb2;
#endif
    
    OsSchedLock();                  /* Lock schedule                          */
 80178da:	4b3b      	ldr	r3, [pc, #236]	; (80179c8 <EventTaskToWait+0xf8>)
 80178dc:	781b      	ldrb	r3, [r3, #0]
 80178de:	b2db      	uxtb	r3, r3
 80178e0:	3301      	adds	r3, #1
 80178e2:	b2da      	uxtb	r2, r3
 80178e4:	4b38      	ldr	r3, [pc, #224]	; (80179c8 <EventTaskToWait+0xf8>)
 80178e6:	701a      	strb	r2, [r3, #0]
    ptcb1 = pecb->eventTCBList;     /* Get first task in event waiting list   */
 80178e8:	687b      	ldr	r3, [r7, #4]
 80178ea:	68db      	ldr	r3, [r3, #12]
 80178ec:	60fb      	str	r3, [r7, #12]
    ptcb->eventID = pecb->id;       /* Set event ID for task                  */
 80178ee:	687b      	ldr	r3, [r7, #4]
 80178f0:	791a      	ldrb	r2, [r3, #4]
 80178f2:	683b      	ldr	r3, [r7, #0]
 80178f4:	721a      	strb	r2, [r3, #8]
    
#if CFG_EVENT_SORT == 3             /* Does event waiting list sort as FIFO?  */
                              
    if(pecb->eventSortType == EVENT_SORT_TYPE_FIFO)	
 80178f6:	687b      	ldr	r3, [r7, #4]
 80178f8:	795b      	ldrb	r3, [r3, #5]
 80178fa:	f023 030f 	bic.w	r3, r3, #15
 80178fe:	b2db      	uxtb	r3, r3
 8017900:	2b10      	cmp	r3, #16
 8017902:	d114      	bne.n	801792e <EventTaskToWait+0x5e>
#endif
    
#if (CFG_EVENT_SORT == 1) || (CFG_EVENT_SORT == 3)
    {
        if(ptcb1 == Co_NULL)                 /* Is no item in event waiting list?*/
 8017904:	68fb      	ldr	r3, [r7, #12]
 8017906:	2b00      	cmp	r3, #0
 8017908:	d106      	bne.n	8017918 <EventTaskToWait+0x48>
        {
            pecb->eventTCBList = ptcb;    /* Yes,set task as first item       */
 801790a:	687b      	ldr	r3, [r7, #4]
 801790c:	683a      	ldr	r2, [r7, #0]
 801790e:	60da      	str	r2, [r3, #12]
 8017910:	e04e      	b.n	80179b0 <EventTaskToWait+0xe0>
        }
        else
        {								
            while(ptcb1->waitNext != Co_NULL)/* No,insert task in last           */
            {
                ptcb1 = ptcb1->waitNext;	
 8017912:	68fb      	ldr	r3, [r7, #12]
 8017914:	695b      	ldr	r3, [r3, #20]
 8017916:	60fb      	str	r3, [r7, #12]
            while(ptcb1->waitNext != Co_NULL)/* No,insert task in last           */
 8017918:	68fb      	ldr	r3, [r7, #12]
 801791a:	695b      	ldr	r3, [r3, #20]
 801791c:	2b00      	cmp	r3, #0
 801791e:	d1f8      	bne.n	8017912 <EventTaskToWait+0x42>
            }	
            ptcb1->waitNext = ptcb;       /* Set link for list                */
 8017920:	68fb      	ldr	r3, [r7, #12]
 8017922:	683a      	ldr	r2, [r7, #0]
 8017924:	615a      	str	r2, [r3, #20]
            ptcb->waitPrev  = ptcb1;	
 8017926:	683b      	ldr	r3, [r7, #0]
 8017928:	68fa      	ldr	r2, [r7, #12]
 801792a:	619a      	str	r2, [r3, #24]
 801792c:	e040      	b.n	80179b0 <EventTaskToWait+0xe0>
        }
    }
#endif
    
#if CFG_EVENT_SORT ==3 /* Does event waiting list sort as preemptive priority?*/                           
    else if(pecb->eventSortType == EVENT_SORT_TYPE_PRIO)
 801792e:	687b      	ldr	r3, [r7, #4]
 8017930:	795b      	ldrb	r3, [r3, #5]
 8017932:	f023 030f 	bic.w	r3, r3, #15
 8017936:	b2db      	uxtb	r3, r3
 8017938:	2b20      	cmp	r3, #32
 801793a:	d139      	bne.n	80179b0 <EventTaskToWait+0xe0>
#endif  
#if (CFG_EVENT_SORT == 2) || (CFG_EVENT_SORT == 3)
    {
        if(ptcb1 == Co_NULL)               /* Is no item in event waiting list?  */
 801793c:	68fb      	ldr	r3, [r7, #12]
 801793e:	2b00      	cmp	r3, #0
 8017940:	d103      	bne.n	801794a <EventTaskToWait+0x7a>
        {
            pecb->eventTCBList = ptcb;  /* Yes,set task as first item         */
 8017942:	687b      	ldr	r3, [r7, #4]
 8017944:	683a      	ldr	r2, [r7, #0]
 8017946:	60da      	str	r2, [r3, #12]
 8017948:	e032      	b.n	80179b0 <EventTaskToWait+0xe0>
        }
        /* Is PRI of task higher than list first item?                        */
        else if(ptcb1->prio > ptcb->prio) 
 801794a:	68fb      	ldr	r3, [r7, #12]
 801794c:	791a      	ldrb	r2, [r3, #4]
 801794e:	683b      	ldr	r3, [r7, #0]
 8017950:	791b      	ldrb	r3, [r3, #4]
 8017952:	429a      	cmp	r2, r3
 8017954:	d909      	bls.n	801796a <EventTaskToWait+0x9a>
        {
            pecb->eventTCBList = ptcb;  /* Reset task as first item           */
 8017956:	687b      	ldr	r3, [r7, #4]
 8017958:	683a      	ldr	r2, [r7, #0]
 801795a:	60da      	str	r2, [r3, #12]
            ptcb->waitNext     = ptcb1; /* Set link for list                  */
 801795c:	683b      	ldr	r3, [r7, #0]
 801795e:	68fa      	ldr	r2, [r7, #12]
 8017960:	615a      	str	r2, [r3, #20]
            ptcb1->waitPrev    = ptcb;	
 8017962:	68fb      	ldr	r3, [r7, #12]
 8017964:	683a      	ldr	r2, [r7, #0]
 8017966:	619a      	str	r2, [r3, #24]
 8017968:	e022      	b.n	80179b0 <EventTaskToWait+0xe0>
        }
        else                            /* No,find correct place to insert    */
        {								
            ptcb2 = ptcb1->waitNext;
 801796a:	68fb      	ldr	r3, [r7, #12]
 801796c:	695b      	ldr	r3, [r3, #20]
 801796e:	60bb      	str	r3, [r7, #8]
            while(ptcb2 != Co_NULL)        /* Is last item?                      */
 8017970:	e00a      	b.n	8017988 <EventTaskToWait+0xb8>
            {	                          
                if(ptcb2->prio > ptcb->prio)  /* No,is correct place?         */
 8017972:	68bb      	ldr	r3, [r7, #8]
 8017974:	791a      	ldrb	r2, [r3, #4]
 8017976:	683b      	ldr	r3, [r7, #0]
 8017978:	791b      	ldrb	r3, [r3, #4]
 801797a:	429a      	cmp	r2, r3
 801797c:	d808      	bhi.n	8017990 <EventTaskToWait+0xc0>
                { 
                    break;                    /* Yes,break Circulation        */
                }
                ptcb1 = ptcb2;                /* Save current item            */
 801797e:	68bb      	ldr	r3, [r7, #8]
 8017980:	60fb      	str	r3, [r7, #12]
                ptcb2 = ptcb2->waitNext;      /* Get next item                */
 8017982:	68bb      	ldr	r3, [r7, #8]
 8017984:	695b      	ldr	r3, [r3, #20]
 8017986:	60bb      	str	r3, [r7, #8]
            while(ptcb2 != Co_NULL)        /* Is last item?                      */
 8017988:	68bb      	ldr	r3, [r7, #8]
 801798a:	2b00      	cmp	r3, #0
 801798c:	d1f1      	bne.n	8017972 <EventTaskToWait+0xa2>
 801798e:	e000      	b.n	8017992 <EventTaskToWait+0xc2>
                    break;                    /* Yes,break Circulation        */
 8017990:	bf00      	nop
            }
            ptcb1->waitNext = ptcb;           /* Set link for list            */
 8017992:	68fb      	ldr	r3, [r7, #12]
 8017994:	683a      	ldr	r2, [r7, #0]
 8017996:	615a      	str	r2, [r3, #20]
            ptcb->waitPrev  = ptcb1;
 8017998:	683b      	ldr	r3, [r7, #0]
 801799a:	68fa      	ldr	r2, [r7, #12]
 801799c:	619a      	str	r2, [r3, #24]
            ptcb->waitNext  = ptcb2;
 801799e:	683b      	ldr	r3, [r7, #0]
 80179a0:	68ba      	ldr	r2, [r7, #8]
 80179a2:	615a      	str	r2, [r3, #20]
            if(ptcb2 != Co_NULL)
 80179a4:	68bb      	ldr	r3, [r7, #8]
 80179a6:	2b00      	cmp	r3, #0
 80179a8:	d002      	beq.n	80179b0 <EventTaskToWait+0xe0>
            {
                ptcb2->waitPrev = ptcb;	
 80179aa:	68bb      	ldr	r3, [r7, #8]
 80179ac:	683a      	ldr	r2, [r7, #0]
 80179ae:	619a      	str	r2, [r3, #24]
            }
        }		
    }
#endif
    ptcb->state = TASK_WAITING;     /* Set task status to TASK_WAITING state  */
 80179b0:	683b      	ldr	r3, [r7, #0]
 80179b2:	2202      	movs	r2, #2
 80179b4:	715a      	strb	r2, [r3, #5]
    TaskSchedReq = Co_TRUE;
 80179b6:	4b05      	ldr	r3, [pc, #20]	; (80179cc <EventTaskToWait+0xfc>)
 80179b8:	2201      	movs	r2, #1
 80179ba:	701a      	strb	r2, [r3, #0]
    OsSchedUnlock();                /* Unlock schedule,and call task schedule */
 80179bc:	f7ff fdfc 	bl	80175b8 <OsSchedUnlock>
}
 80179c0:	bf00      	nop
 80179c2:	3710      	adds	r7, #16
 80179c4:	46bd      	mov	sp, r7
 80179c6:	bd80      	pop	{r7, pc}
 80179c8:	20003749 	.word	0x20003749
 80179cc:	2000374a 	.word	0x2000374a

080179d0 <EventTaskToRdy>:
 * @details    This function is called to remove a task from event wait list,and	 
 *             then insert it into the READY list.
 *******************************************************************************
 */
void EventTaskToRdy(P_ECB pecb)
{
 80179d0:	b580      	push	{r7, lr}
 80179d2:	b084      	sub	sp, #16
 80179d4:	af00      	add	r7, sp, #0
 80179d6:	6078      	str	r0, [r7, #4]
    P_OSTCB ptcb;
#if CFG_QUEUE_EN >0
    P_QCB   pqcb;
#endif
    ptcb = pecb->eventTCBList;
 80179d8:	687b      	ldr	r3, [r7, #4]
 80179da:	68db      	ldr	r3, [r3, #12]
 80179dc:	60fb      	str	r3, [r7, #12]
    if(ptcb == Co_NULL)
 80179de:	68fb      	ldr	r3, [r7, #12]
 80179e0:	2b00      	cmp	r3, #0
 80179e2:	d054      	beq.n	8017a8e <EventTaskToRdy+0xbe>
        return;
    
    pecb->eventTCBList = ptcb->waitNext;/* Get first task in event waiting list*/
 80179e4:	68fb      	ldr	r3, [r7, #12]
 80179e6:	695a      	ldr	r2, [r3, #20]
 80179e8:	687b      	ldr	r3, [r7, #4]
 80179ea:	60da      	str	r2, [r3, #12]
    if(pecb->eventTCBList != Co_NULL)      /* Is no item in event waiting list?  */
 80179ec:	687b      	ldr	r3, [r7, #4]
 80179ee:	68db      	ldr	r3, [r3, #12]
 80179f0:	2b00      	cmp	r3, #0
 80179f2:	d003      	beq.n	80179fc <EventTaskToRdy+0x2c>
    {
        pecb->eventTCBList->waitPrev = Co_NULL; /* No,clear link for first item  */
 80179f4:	687b      	ldr	r3, [r7, #4]
 80179f6:	68db      	ldr	r3, [r3, #12]
 80179f8:	2200      	movs	r2, #0
 80179fa:	619a      	str	r2, [r3, #24]
    }
    
    ptcb->waitNext = Co_NULL;                /* Clear event waiting link for task*/
 80179fc:	68fb      	ldr	r3, [r7, #12]
 80179fe:	2200      	movs	r2, #0
 8017a00:	615a      	str	r2, [r3, #20]
    ptcb->eventID  = INVALID_ID;          /* Sign that not to use.            */
 8017a02:	68fb      	ldr	r3, [r7, #12]
 8017a04:	22ff      	movs	r2, #255	; 0xff
 8017a06:	721a      	strb	r2, [r3, #8]
    
    if(ptcb->delayTick != INVALID_VALUE)  /* Is task in delay list?           */		         
 8017a08:	68fb      	ldr	r3, [r7, #12]
 8017a0a:	6a1b      	ldr	r3, [r3, #32]
 8017a0c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8017a10:	d002      	beq.n	8017a18 <EventTaskToRdy+0x48>
    {
        RemoveDelayList(ptcb);            /* Yes,remove task from DELAY list  */
 8017a12:	68f8      	ldr	r0, [r7, #12]
 8017a14:	f002 fd54 	bl	801a4c0 <RemoveDelayList>
    }
#if CFG_MAILBOX_EN >0
    if(pecb->eventType == EVENT_TYPE_MBOX)/* Is it a mailbox event?           */
 8017a18:	687b      	ldr	r3, [r7, #4]
 8017a1a:	795b      	ldrb	r3, [r3, #5]
 8017a1c:	f003 030f 	and.w	r3, r3, #15
 8017a20:	b2db      	uxtb	r3, r3
 8017a22:	2b02      	cmp	r3, #2
 8017a24:	d107      	bne.n	8017a36 <EventTaskToRdy+0x66>
    {
        ptcb->pmail    = pecb->eventPtr;  /* Yes,send mail to task            */
 8017a26:	687b      	ldr	r3, [r7, #4]
 8017a28:	681a      	ldr	r2, [r3, #0]
 8017a2a:	68fb      	ldr	r3, [r7, #12]
 8017a2c:	611a      	str	r2, [r3, #16]
        pecb->eventPtr = Co_NULL;            /* Clear event sign                 */
 8017a2e:	687b      	ldr	r3, [r7, #4]
 8017a30:	2200      	movs	r2, #0
 8017a32:	601a      	str	r2, [r3, #0]
 8017a34:	e01e      	b.n	8017a74 <EventTaskToRdy+0xa4>
        //pecb->eventCounter--;
    }
#endif
#if CFG_QUEUE_EN >0
    else if(pecb->eventType == EVENT_TYPE_QUEUE)  /* Is it a queue event?     */
 8017a36:	687b      	ldr	r3, [r7, #4]
 8017a38:	795b      	ldrb	r3, [r3, #5]
 8017a3a:	f003 030f 	and.w	r3, r3, #15
 8017a3e:	b2db      	uxtb	r3, r3
 8017a40:	2b03      	cmp	r3, #3
 8017a42:	d10c      	bne.n	8017a5e <EventTaskToRdy+0x8e>
    {										   
        pqcb        = (P_QCB)pecb->eventPtr;      /* Yes,get queue pointer    */
 8017a44:	687b      	ldr	r3, [r7, #4]
 8017a46:	681b      	ldr	r3, [r3, #0]
 8017a48:	60bb      	str	r3, [r7, #8]
        ptcb->pmail = *(pqcb->qStart + pqcb->head);   /* Send mail to task    */
 8017a4a:	68bb      	ldr	r3, [r7, #8]
 8017a4c:	681a      	ldr	r2, [r3, #0]
 8017a4e:	68bb      	ldr	r3, [r7, #8]
 8017a50:	88db      	ldrh	r3, [r3, #6]
 8017a52:	009b      	lsls	r3, r3, #2
 8017a54:	4413      	add	r3, r2
 8017a56:	681a      	ldr	r2, [r3, #0]
 8017a58:	68fb      	ldr	r3, [r7, #12]
 8017a5a:	611a      	str	r2, [r3, #16]
 8017a5c:	e00a      	b.n	8017a74 <EventTaskToRdy+0xa4>
        //}
    }
#endif

#if CFG_SEM_EN >0
    else if(pecb->eventType == EVENT_TYPE_SEM)/* Is it a semaphore event?     */
 8017a5e:	687b      	ldr	r3, [r7, #4]
 8017a60:	795b      	ldrb	r3, [r3, #5]
 8017a62:	f003 030f 	and.w	r3, r3, #15
 8017a66:	b2db      	uxtb	r3, r3
 8017a68:	2b01      	cmp	r3, #1
 8017a6a:	d103      	bne.n	8017a74 <EventTaskToRdy+0xa4>
    {
        //pecb->eventCounter--;                 /* Yes,clear event sign         */
        ptcb->pmail = (void*)0xffffffff;      /* Indicate task woke by event  */
 8017a6c:	68fb      	ldr	r3, [r7, #12]
 8017a6e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8017a72:	611a      	str	r2, [r3, #16]
    }
#endif
	if(ptcb == TCBRunning)
 8017a74:	4b08      	ldr	r3, [pc, #32]	; (8017a98 <EventTaskToRdy+0xc8>)
 8017a76:	681b      	ldr	r3, [r3, #0]
 8017a78:	68fa      	ldr	r2, [r7, #12]
 8017a7a:	429a      	cmp	r2, r3
 8017a7c:	d103      	bne.n	8017a86 <EventTaskToRdy+0xb6>
	{
		ptcb->state = TASK_RUNNING;
 8017a7e:	68fb      	ldr	r3, [r7, #12]
 8017a80:	2201      	movs	r2, #1
 8017a82:	715a      	strb	r2, [r3, #5]
 8017a84:	e004      	b.n	8017a90 <EventTaskToRdy+0xc0>
	} 
	else
	{
		InsertToTCBRdyList(ptcb);            /* Insert task into ready list  */
 8017a86:	68f8      	ldr	r0, [r7, #12]
 8017a88:	f002 f854 	bl	8019b34 <InsertToTCBRdyList>
 8017a8c:	e000      	b.n	8017a90 <EventTaskToRdy+0xc0>
        return;
 8017a8e:	bf00      	nop
	}
}
 8017a90:	3710      	adds	r7, #16
 8017a92:	46bd      	mov	sp, r7
 8017a94:	bd80      	pop	{r7, pc}
 8017a96:	bf00      	nop
 8017a98:	2000d728 	.word	0x2000d728

08017a9c <RemoveEventWaittingList>:
 * @details    This function is called to remove a task from event wait list,and	 
 *             then insert it to the ready list.
 *******************************************************************************
 */
void RemoveEventWaittingList(P_OSTCB ptcb)
{
 8017a9c:	b480      	push	{r7}
 8017a9e:	b085      	sub	sp, #20
 8017aa0:	af00      	add	r7, sp, #0
 8017aa2:	6078      	str	r0, [r7, #4]
    P_ECB pecb;
    pecb = &EventTbl[ptcb->eventID];    /* Get event control block            */
 8017aa4:	687b      	ldr	r3, [r7, #4]
 8017aa6:	7a1b      	ldrb	r3, [r3, #8]
 8017aa8:	011b      	lsls	r3, r3, #4
 8017aaa:	4a22      	ldr	r2, [pc, #136]	; (8017b34 <RemoveEventWaittingList+0x98>)
 8017aac:	4413      	add	r3, r2
 8017aae:	60fb      	str	r3, [r7, #12]
    
    /* Is there only one item in event waiting list?                          */
    if((ptcb->waitNext == Co_NULL) && (ptcb->waitPrev == Co_NULL))
 8017ab0:	687b      	ldr	r3, [r7, #4]
 8017ab2:	695b      	ldr	r3, [r3, #20]
 8017ab4:	2b00      	cmp	r3, #0
 8017ab6:	d107      	bne.n	8017ac8 <RemoveEventWaittingList+0x2c>
 8017ab8:	687b      	ldr	r3, [r7, #4]
 8017aba:	699b      	ldr	r3, [r3, #24]
 8017abc:	2b00      	cmp	r3, #0
 8017abe:	d103      	bne.n	8017ac8 <RemoveEventWaittingList+0x2c>
    {
        pecb->eventTCBList = Co_NULL;      /* Yes,set event waiting list as Co_NULL */
 8017ac0:	68fb      	ldr	r3, [r7, #12]
 8017ac2:	2200      	movs	r2, #0
 8017ac4:	60da      	str	r2, [r3, #12]
 8017ac6:	e02b      	b.n	8017b20 <RemoveEventWaittingList+0x84>
    }
    else if(ptcb->waitPrev == Co_NULL)/* Is the first item in event waiting list?*/
 8017ac8:	687b      	ldr	r3, [r7, #4]
 8017aca:	699b      	ldr	r3, [r3, #24]
 8017acc:	2b00      	cmp	r3, #0
 8017ace:	d10b      	bne.n	8017ae8 <RemoveEventWaittingList+0x4c>
    {
        /* Yes,remove task from list,and reset event waiting list             */
        ptcb->waitNext->waitPrev = Co_NULL;
 8017ad0:	687b      	ldr	r3, [r7, #4]
 8017ad2:	695b      	ldr	r3, [r3, #20]
 8017ad4:	2200      	movs	r2, #0
 8017ad6:	619a      	str	r2, [r3, #24]
		pecb->eventTCBList = ptcb->waitNext;	
 8017ad8:	687b      	ldr	r3, [r7, #4]
 8017ada:	695a      	ldr	r2, [r3, #20]
 8017adc:	68fb      	ldr	r3, [r7, #12]
 8017ade:	60da      	str	r2, [r3, #12]
        ptcb->waitNext = Co_NULL;
 8017ae0:	687b      	ldr	r3, [r7, #4]
 8017ae2:	2200      	movs	r2, #0
 8017ae4:	615a      	str	r2, [r3, #20]
 8017ae6:	e01b      	b.n	8017b20 <RemoveEventWaittingList+0x84>
    }
    else if(ptcb->waitNext == Co_NULL)/* Is the last item in event waiting list? */
 8017ae8:	687b      	ldr	r3, [r7, #4]
 8017aea:	695b      	ldr	r3, [r3, #20]
 8017aec:	2b00      	cmp	r3, #0
 8017aee:	d107      	bne.n	8017b00 <RemoveEventWaittingList+0x64>
    {
        ptcb->waitPrev->waitNext = Co_NULL;  /* Yes,remove task form list        */
 8017af0:	687b      	ldr	r3, [r7, #4]
 8017af2:	699b      	ldr	r3, [r3, #24]
 8017af4:	2200      	movs	r2, #0
 8017af6:	615a      	str	r2, [r3, #20]
        ptcb->waitPrev = Co_NULL;
 8017af8:	687b      	ldr	r3, [r7, #4]
 8017afa:	2200      	movs	r2, #0
 8017afc:	619a      	str	r2, [r3, #24]
 8017afe:	e00f      	b.n	8017b20 <RemoveEventWaittingList+0x84>
    }
    else                                  /* No, remove task from list        */
    {										
        ptcb->waitPrev->waitNext = ptcb->waitNext;
 8017b00:	687b      	ldr	r3, [r7, #4]
 8017b02:	699b      	ldr	r3, [r3, #24]
 8017b04:	687a      	ldr	r2, [r7, #4]
 8017b06:	6952      	ldr	r2, [r2, #20]
 8017b08:	615a      	str	r2, [r3, #20]
        ptcb->waitNext->waitPrev = ptcb->waitPrev;
 8017b0a:	687b      	ldr	r3, [r7, #4]
 8017b0c:	695b      	ldr	r3, [r3, #20]
 8017b0e:	687a      	ldr	r2, [r7, #4]
 8017b10:	6992      	ldr	r2, [r2, #24]
 8017b12:	619a      	str	r2, [r3, #24]
        ptcb->waitPrev = Co_NULL;
 8017b14:	687b      	ldr	r3, [r7, #4]
 8017b16:	2200      	movs	r2, #0
 8017b18:	619a      	str	r2, [r3, #24]
        ptcb->waitNext = Co_NULL;
 8017b1a:	687b      	ldr	r3, [r7, #4]
 8017b1c:	2200      	movs	r2, #0
 8017b1e:	615a      	str	r2, [r3, #20]
    }
    ptcb->eventID  = INVALID_ID;          /* Sign that not to use.            */
 8017b20:	687b      	ldr	r3, [r7, #4]
 8017b22:	22ff      	movs	r2, #255	; 0xff
 8017b24:	721a      	strb	r2, [r3, #8]
}
 8017b26:	bf00      	nop
 8017b28:	3714      	adds	r7, #20
 8017b2a:	46bd      	mov	sp, r7
 8017b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b30:	4770      	bx	lr
 8017b32:	bf00      	nop
 8017b34:	2000374c 	.word	0x2000374c

08017b38 <CoCreateFlag>:
 * @details    This function use to create a event flag.	 
 * @note 
 *******************************************************************************
 */
OS_FlagID CoCreateFlag(BOOL bAutoReset,BOOL bInitialState)
{
 8017b38:	b580      	push	{r7, lr}
 8017b3a:	b084      	sub	sp, #16
 8017b3c:	af00      	add	r7, sp, #0
 8017b3e:	4603      	mov	r3, r0
 8017b40:	460a      	mov	r2, r1
 8017b42:	71fb      	strb	r3, [r7, #7]
 8017b44:	4613      	mov	r3, r2
 8017b46:	71bb      	strb	r3, [r7, #6]
    U8  i;
    OsSchedLock();
 8017b48:	4b1f      	ldr	r3, [pc, #124]	; (8017bc8 <CoCreateFlag+0x90>)
 8017b4a:	781b      	ldrb	r3, [r3, #0]
 8017b4c:	b2db      	uxtb	r3, r3
 8017b4e:	3301      	adds	r3, #1
 8017b50:	b2da      	uxtb	r2, r3
 8017b52:	4b1d      	ldr	r3, [pc, #116]	; (8017bc8 <CoCreateFlag+0x90>)
 8017b54:	701a      	strb	r2, [r3, #0]
    
    for(i=0;i<FLAG_MAX_NUM;i++)
 8017b56:	2300      	movs	r3, #0
 8017b58:	73fb      	strb	r3, [r7, #15]
 8017b5a:	e02a      	b.n	8017bb2 <CoCreateFlag+0x7a>
    {
        /* Assign a free flag control block                                   */
        if((FlagCrl.flagActive&(1<<i)) == 0 )
 8017b5c:	4b1b      	ldr	r3, [pc, #108]	; (8017bcc <CoCreateFlag+0x94>)
 8017b5e:	689b      	ldr	r3, [r3, #8]
 8017b60:	7bfa      	ldrb	r2, [r7, #15]
 8017b62:	2101      	movs	r1, #1
 8017b64:	fa01 f202 	lsl.w	r2, r1, r2
 8017b68:	4013      	ands	r3, r2
 8017b6a:	2b00      	cmp	r3, #0
 8017b6c:	d11e      	bne.n	8017bac <CoCreateFlag+0x74>
        {
            FlagCrl.flagActive |= (1<<i);         /* Initialize active flag   */
 8017b6e:	4b17      	ldr	r3, [pc, #92]	; (8017bcc <CoCreateFlag+0x94>)
 8017b70:	689b      	ldr	r3, [r3, #8]
 8017b72:	7bfa      	ldrb	r2, [r7, #15]
 8017b74:	2101      	movs	r1, #1
 8017b76:	fa01 f202 	lsl.w	r2, r1, r2
 8017b7a:	4313      	orrs	r3, r2
 8017b7c:	4a13      	ldr	r2, [pc, #76]	; (8017bcc <CoCreateFlag+0x94>)
 8017b7e:	6093      	str	r3, [r2, #8]
            FlagCrl.flagRdy    |= (bInitialState<<i);/* Initialize ready flag */
 8017b80:	4b12      	ldr	r3, [pc, #72]	; (8017bcc <CoCreateFlag+0x94>)
 8017b82:	681b      	ldr	r3, [r3, #0]
 8017b84:	79b9      	ldrb	r1, [r7, #6]
 8017b86:	7bfa      	ldrb	r2, [r7, #15]
 8017b88:	fa01 f202 	lsl.w	r2, r1, r2
 8017b8c:	4313      	orrs	r3, r2
 8017b8e:	4a0f      	ldr	r2, [pc, #60]	; (8017bcc <CoCreateFlag+0x94>)
 8017b90:	6013      	str	r3, [r2, #0]
            FlagCrl.resetOpt   |= (bAutoReset<<i);/* Initialize reset option  */
 8017b92:	4b0e      	ldr	r3, [pc, #56]	; (8017bcc <CoCreateFlag+0x94>)
 8017b94:	685b      	ldr	r3, [r3, #4]
 8017b96:	79f9      	ldrb	r1, [r7, #7]
 8017b98:	7bfa      	ldrb	r2, [r7, #15]
 8017b9a:	fa01 f202 	lsl.w	r2, r1, r2
 8017b9e:	4313      	orrs	r3, r2
 8017ba0:	4a0a      	ldr	r2, [pc, #40]	; (8017bcc <CoCreateFlag+0x94>)
 8017ba2:	6053      	str	r3, [r2, #4]
            OsSchedUnlock();
 8017ba4:	f7ff fd08 	bl	80175b8 <OsSchedUnlock>
            return i ;                  /* Return Flag ID                     */
 8017ba8:	7bfb      	ldrb	r3, [r7, #15]
 8017baa:	e008      	b.n	8017bbe <CoCreateFlag+0x86>
    for(i=0;i<FLAG_MAX_NUM;i++)
 8017bac:	7bfb      	ldrb	r3, [r7, #15]
 8017bae:	3301      	adds	r3, #1
 8017bb0:	73fb      	strb	r3, [r7, #15]
 8017bb2:	7bfb      	ldrb	r3, [r7, #15]
 8017bb4:	2b1f      	cmp	r3, #31
 8017bb6:	d9d1      	bls.n	8017b5c <CoCreateFlag+0x24>
        }	
    }
    OsSchedUnlock();
 8017bb8:	f7ff fcfe 	bl	80175b8 <OsSchedUnlock>
    
    return E_CREATE_FAIL;               /* There is no free flag control block*/	
 8017bbc:	23ff      	movs	r3, #255	; 0xff
}
 8017bbe:	4618      	mov	r0, r3
 8017bc0:	3710      	adds	r7, #16
 8017bc2:	46bd      	mov	sp, r7
 8017bc4:	bd80      	pop	{r7, pc}
 8017bc6:	bf00      	nop
 8017bc8:	20003749 	.word	0x20003749
 8017bcc:	20003890 	.word	0x20003890

08017bd0 <CoDelFlag>:
 * @details    This function is called to delete a event flag.
 * @note 
 *******************************************************************************
 */
StatusType CoDelFlag(OS_FlagID id,U8 opt)
{
 8017bd0:	b580      	push	{r7, lr}
 8017bd2:	b084      	sub	sp, #16
 8017bd4:	af00      	add	r7, sp, #0
 8017bd6:	4603      	mov	r3, r0
 8017bd8:	460a      	mov	r2, r1
 8017bda:	71fb      	strb	r3, [r7, #7]
 8017bdc:	4613      	mov	r3, r2
 8017bde:	71bb      	strb	r3, [r7, #6]
    P_FLAG_NODE pnode;
    P_FCB pfcb;
    pfcb  = &FlagCrl;
 8017be0:	4b3e      	ldr	r3, [pc, #248]	; (8017cdc <CoDelFlag+0x10c>)
 8017be2:	60bb      	str	r3, [r7, #8]
    if(OSIntNesting > 0)                /* If be called from ISR              */
 8017be4:	4b3e      	ldr	r3, [pc, #248]	; (8017ce0 <CoDelFlag+0x110>)
 8017be6:	781b      	ldrb	r3, [r3, #0]
 8017be8:	b2db      	uxtb	r3, r3
 8017bea:	2b00      	cmp	r3, #0
 8017bec:	d001      	beq.n	8017bf2 <CoDelFlag+0x22>
    {
        return E_CALL;
 8017bee:	2303      	movs	r3, #3
 8017bf0:	e070      	b.n	8017cd4 <CoDelFlag+0x104>
    }
#if CFG_PAR_CHECKOUT_EN >0
    if((pfcb->flagActive&(1<<id)) == 0) /* Flag is valid or not               */
 8017bf2:	68bb      	ldr	r3, [r7, #8]
 8017bf4:	689b      	ldr	r3, [r3, #8]
 8017bf6:	79fa      	ldrb	r2, [r7, #7]
 8017bf8:	2101      	movs	r1, #1
 8017bfa:	fa01 f202 	lsl.w	r2, r1, r2
 8017bfe:	4013      	ands	r3, r2
 8017c00:	2b00      	cmp	r3, #0
 8017c02:	d101      	bne.n	8017c08 <CoDelFlag+0x38>
    {
        return E_INVALID_ID;	
 8017c04:	2301      	movs	r3, #1
 8017c06:	e065      	b.n	8017cd4 <CoDelFlag+0x104>
    }
#endif
    OsSchedLock();
 8017c08:	4b36      	ldr	r3, [pc, #216]	; (8017ce4 <CoDelFlag+0x114>)
 8017c0a:	781b      	ldrb	r3, [r3, #0]
 8017c0c:	b2db      	uxtb	r3, r3
 8017c0e:	3301      	adds	r3, #1
 8017c10:	b2da      	uxtb	r2, r3
 8017c12:	4b34      	ldr	r3, [pc, #208]	; (8017ce4 <CoDelFlag+0x114>)
 8017c14:	701a      	strb	r2, [r3, #0]
    pnode = pfcb->headNode;
 8017c16:	68bb      	ldr	r3, [r7, #8]
 8017c18:	68db      	ldr	r3, [r3, #12]
 8017c1a:	60fb      	str	r3, [r7, #12]
    
    while(pnode != Co_NULL)                /* Ready all tasks waiting for flags  */
 8017c1c:	e036      	b.n	8017c8c <CoDelFlag+0xbc>
    {
        if((pnode->waitFlags&(1<<id)) != 0) /* If no task is waiting on flags */
 8017c1e:	68fb      	ldr	r3, [r7, #12]
 8017c20:	689b      	ldr	r3, [r3, #8]
 8017c22:	79fa      	ldrb	r2, [r7, #7]
 8017c24:	2101      	movs	r1, #1
 8017c26:	fa01 f202 	lsl.w	r2, r1, r2
 8017c2a:	4013      	ands	r3, r2
 8017c2c:	2b00      	cmp	r3, #0
 8017c2e:	d02a      	beq.n	8017c86 <CoDelFlag+0xb6>
    	  {
            if(opt == OPT_DEL_NO_PEND)      /* Delete flag if no task waiting */
 8017c30:	79bb      	ldrb	r3, [r7, #6]
 8017c32:	2b00      	cmp	r3, #0
 8017c34:	d103      	bne.n	8017c3e <CoDelFlag+0x6e>
            {
              	OsSchedUnlock();
 8017c36:	f7ff fcbf 	bl	80175b8 <OsSchedUnlock>
               	return E_TASK_WAITING;
 8017c3a:	2304      	movs	r3, #4
 8017c3c:	e04a      	b.n	8017cd4 <CoDelFlag+0x104>
            }
            else if (opt == OPT_DEL_ANYWAY) /* Always delete the flag         */
 8017c3e:	79bb      	ldrb	r3, [r7, #6]
 8017c40:	2b01      	cmp	r3, #1
 8017c42:	d120      	bne.n	8017c86 <CoDelFlag+0xb6>
            {
                if(pnode->waitType == OPT_WAIT_ALL)
 8017c44:	68fb      	ldr	r3, [r7, #12]
 8017c46:	7c1b      	ldrb	r3, [r3, #16]
 8017c48:	2b00      	cmp	r3, #0
 8017c4a:	d117      	bne.n	8017c7c <CoDelFlag+0xac>
                {
                    /* If the flag is only required by NODE                   */
                    if( pnode->waitFlags == (1<<id) )	
 8017c4c:	68fb      	ldr	r3, [r7, #12]
 8017c4e:	689b      	ldr	r3, [r3, #8]
 8017c50:	79fa      	ldrb	r2, [r7, #7]
 8017c52:	2101      	movs	r1, #1
 8017c54:	fa01 f202 	lsl.w	r2, r1, r2
 8017c58:	4293      	cmp	r3, r2
 8017c5a:	d104      	bne.n	8017c66 <CoDelFlag+0x96>
                    {
                        /* Remove the NODE from waiting list                  */
                        pnode = RemoveFromLink(pnode); 	
 8017c5c:	68f8      	ldr	r0, [r7, #12]
 8017c5e:	f000 fb81 	bl	8018364 <RemoveFromLink>
 8017c62:	60f8      	str	r0, [r7, #12]
                        continue;	
 8017c64:	e012      	b.n	8017c8c <CoDelFlag+0xbc>
                    }	
                    else
                    {
                        pnode->waitFlags &= ~(1<<id);   /* Update waitflags   */
 8017c66:	68fb      	ldr	r3, [r7, #12]
 8017c68:	689b      	ldr	r3, [r3, #8]
 8017c6a:	79fa      	ldrb	r2, [r7, #7]
 8017c6c:	2101      	movs	r1, #1
 8017c6e:	fa01 f202 	lsl.w	r2, r1, r2
 8017c72:	43d2      	mvns	r2, r2
 8017c74:	401a      	ands	r2, r3
 8017c76:	68fb      	ldr	r3, [r7, #12]
 8017c78:	609a      	str	r2, [r3, #8]
 8017c7a:	e004      	b.n	8017c86 <CoDelFlag+0xb6>
                    }		
                }
                else   							
                {
                    pnode = RemoveFromLink(pnode);
 8017c7c:	68f8      	ldr	r0, [r7, #12]
 8017c7e:	f000 fb71 	bl	8018364 <RemoveFromLink>
 8017c82:	60f8      	str	r0, [r7, #12]
                    continue;	
 8017c84:	e002      	b.n	8017c8c <CoDelFlag+0xbc>
                }	
            }
        }	
        pnode = pnode->nextNode;		
 8017c86:	68fb      	ldr	r3, [r7, #12]
 8017c88:	681b      	ldr	r3, [r3, #0]
 8017c8a:	60fb      	str	r3, [r7, #12]
    while(pnode != Co_NULL)                /* Ready all tasks waiting for flags  */
 8017c8c:	68fb      	ldr	r3, [r7, #12]
 8017c8e:	2b00      	cmp	r3, #0
 8017c90:	d1c5      	bne.n	8017c1e <CoDelFlag+0x4e>
    }
    
    /* Remove the flag from the flags list */
    pfcb->flagActive &= ~(1<<id);			
 8017c92:	68bb      	ldr	r3, [r7, #8]
 8017c94:	689b      	ldr	r3, [r3, #8]
 8017c96:	79fa      	ldrb	r2, [r7, #7]
 8017c98:	2101      	movs	r1, #1
 8017c9a:	fa01 f202 	lsl.w	r2, r1, r2
 8017c9e:	43d2      	mvns	r2, r2
 8017ca0:	401a      	ands	r2, r3
 8017ca2:	68bb      	ldr	r3, [r7, #8]
 8017ca4:	609a      	str	r2, [r3, #8]
    pfcb->flagRdy    &= ~(1<<id);
 8017ca6:	68bb      	ldr	r3, [r7, #8]
 8017ca8:	681b      	ldr	r3, [r3, #0]
 8017caa:	79fa      	ldrb	r2, [r7, #7]
 8017cac:	2101      	movs	r1, #1
 8017cae:	fa01 f202 	lsl.w	r2, r1, r2
 8017cb2:	43d2      	mvns	r2, r2
 8017cb4:	401a      	ands	r2, r3
 8017cb6:	68bb      	ldr	r3, [r7, #8]
 8017cb8:	601a      	str	r2, [r3, #0]
    pfcb->resetOpt   &= ~(1<<id);
 8017cba:	68bb      	ldr	r3, [r7, #8]
 8017cbc:	685b      	ldr	r3, [r3, #4]
 8017cbe:	79fa      	ldrb	r2, [r7, #7]
 8017cc0:	2101      	movs	r1, #1
 8017cc2:	fa01 f202 	lsl.w	r2, r1, r2
 8017cc6:	43d2      	mvns	r2, r2
 8017cc8:	401a      	ands	r2, r3
 8017cca:	68bb      	ldr	r3, [r7, #8]
 8017ccc:	605a      	str	r2, [r3, #4]
    OsSchedUnlock();
 8017cce:	f7ff fc73 	bl	80175b8 <OsSchedUnlock>
    return E_OK;
 8017cd2:	2300      	movs	r3, #0
}
 8017cd4:	4618      	mov	r0, r3
 8017cd6:	3710      	adds	r7, #16
 8017cd8:	46bd      	mov	sp, r7
 8017cda:	bd80      	pop	{r7, pc}
 8017cdc:	20003890 	.word	0x20003890
 8017ce0:	20003748 	.word	0x20003748
 8017ce4:	20003749 	.word	0x20003749

08017ce8 <CoAcceptSingleFlag>:
 * @details    This fucntion is called to accept single flag
 * @note 
 *******************************************************************************
 */
StatusType CoAcceptSingleFlag(OS_FlagID id)
{
 8017ce8:	b580      	push	{r7, lr}
 8017cea:	b084      	sub	sp, #16
 8017cec:	af00      	add	r7, sp, #0
 8017cee:	4603      	mov	r3, r0
 8017cf0:	71fb      	strb	r3, [r7, #7]
    P_FCB pfcb;
    pfcb  = &FlagCrl;
 8017cf2:	4b1c      	ldr	r3, [pc, #112]	; (8017d64 <CoAcceptSingleFlag+0x7c>)
 8017cf4:	60fb      	str	r3, [r7, #12]
#if CFG_PAR_CHECKOUT_EN >0	
    if(id >= FLAG_MAX_NUM)              
 8017cf6:	79fb      	ldrb	r3, [r7, #7]
 8017cf8:	2b1f      	cmp	r3, #31
 8017cfa:	d901      	bls.n	8017d00 <CoAcceptSingleFlag+0x18>
    {
        return E_INVALID_ID;            /* Invalid 'id',return error          */
 8017cfc:	2301      	movs	r3, #1
 8017cfe:	e02c      	b.n	8017d5a <CoAcceptSingleFlag+0x72>
    }
    if((pfcb->flagActive&(1<<id)) == 0) 
 8017d00:	68fb      	ldr	r3, [r7, #12]
 8017d02:	689b      	ldr	r3, [r3, #8]
 8017d04:	79fa      	ldrb	r2, [r7, #7]
 8017d06:	2101      	movs	r1, #1
 8017d08:	fa01 f202 	lsl.w	r2, r1, r2
 8017d0c:	4013      	ands	r3, r2
 8017d0e:	2b00      	cmp	r3, #0
 8017d10:	d101      	bne.n	8017d16 <CoAcceptSingleFlag+0x2e>
    {
        return E_INVALID_ID;            /* Flag is deactive,return error      */
 8017d12:	2301      	movs	r3, #1
 8017d14:	e021      	b.n	8017d5a <CoAcceptSingleFlag+0x72>
    }	
#endif
    if((pfcb->flagRdy&(1<<id)) != 0)    /* If the required flag is set        */
 8017d16:	68fb      	ldr	r3, [r7, #12]
 8017d18:	681b      	ldr	r3, [r3, #0]
 8017d1a:	79fa      	ldrb	r2, [r7, #7]
 8017d1c:	2101      	movs	r1, #1
 8017d1e:	fa01 f202 	lsl.w	r2, r1, r2
 8017d22:	4013      	ands	r3, r2
 8017d24:	2b00      	cmp	r3, #0
 8017d26:	d017      	beq.n	8017d58 <CoAcceptSingleFlag+0x70>
    {
        OsSchedLock()
 8017d28:	4b0f      	ldr	r3, [pc, #60]	; (8017d68 <CoAcceptSingleFlag+0x80>)
 8017d2a:	781b      	ldrb	r3, [r3, #0]
 8017d2c:	b2db      	uxtb	r3, r3
 8017d2e:	3301      	adds	r3, #1
 8017d30:	b2da      	uxtb	r2, r3
 8017d32:	4b0d      	ldr	r3, [pc, #52]	; (8017d68 <CoAcceptSingleFlag+0x80>)
 8017d34:	701a      	strb	r2, [r3, #0]
        pfcb->flagRdy &= ~((FlagCrl.resetOpt)&(1<<id)); /* Clear the flag     */
 8017d36:	68fb      	ldr	r3, [r7, #12]
 8017d38:	681a      	ldr	r2, [r3, #0]
 8017d3a:	4b0a      	ldr	r3, [pc, #40]	; (8017d64 <CoAcceptSingleFlag+0x7c>)
 8017d3c:	685b      	ldr	r3, [r3, #4]
 8017d3e:	79f9      	ldrb	r1, [r7, #7]
 8017d40:	2001      	movs	r0, #1
 8017d42:	fa00 f101 	lsl.w	r1, r0, r1
 8017d46:	400b      	ands	r3, r1
 8017d48:	43db      	mvns	r3, r3
 8017d4a:	401a      	ands	r2, r3
 8017d4c:	68fb      	ldr	r3, [r7, #12]
 8017d4e:	601a      	str	r2, [r3, #0]
        OsSchedUnlock();
 8017d50:	f7ff fc32 	bl	80175b8 <OsSchedUnlock>
        return E_OK;
 8017d54:	2300      	movs	r3, #0
 8017d56:	e000      	b.n	8017d5a <CoAcceptSingleFlag+0x72>
    }
    else                                /* If the required flag is not set    */
    {
        return E_FLAG_NOT_READY;
 8017d58:	230c      	movs	r3, #12
    }
}
 8017d5a:	4618      	mov	r0, r3
 8017d5c:	3710      	adds	r7, #16
 8017d5e:	46bd      	mov	sp, r7
 8017d60:	bd80      	pop	{r7, pc}
 8017d62:	bf00      	nop
 8017d64:	20003890 	.word	0x20003890
 8017d68:	20003749 	.word	0x20003749

08017d6c <CoAcceptMultipleFlags>:
 * @details    This fucntion is called to accept multiple flags. 
 * @note 
 *******************************************************************************
 */
U32 CoAcceptMultipleFlags(U32 flags,U8 waitType,StatusType *perr)
{
 8017d6c:	b580      	push	{r7, lr}
 8017d6e:	b086      	sub	sp, #24
 8017d70:	af00      	add	r7, sp, #0
 8017d72:	60f8      	str	r0, [r7, #12]
 8017d74:	460b      	mov	r3, r1
 8017d76:	607a      	str	r2, [r7, #4]
 8017d78:	72fb      	strb	r3, [r7, #11]
    U32  springFlag;
    P_FCB pfcb;
    pfcb  = &FlagCrl;
 8017d7a:	4b29      	ldr	r3, [pc, #164]	; (8017e20 <CoAcceptMultipleFlags+0xb4>)
 8017d7c:	617b      	str	r3, [r7, #20]
    
#if CFG_PAR_CHECKOUT_EN >0	
    if((flags&pfcb->flagActive) != flags )  /* Judge flag is active or not?   */    
 8017d7e:	697b      	ldr	r3, [r7, #20]
 8017d80:	689a      	ldr	r2, [r3, #8]
 8017d82:	68fb      	ldr	r3, [r7, #12]
 8017d84:	4013      	ands	r3, r2
 8017d86:	68fa      	ldr	r2, [r7, #12]
 8017d88:	429a      	cmp	r2, r3
 8017d8a:	d004      	beq.n	8017d96 <CoAcceptMultipleFlags+0x2a>
    {
        *perr = E_INVALID_PARAMETER;        /* Invalid flags                  */
 8017d8c:	687b      	ldr	r3, [r7, #4]
 8017d8e:	2202      	movs	r2, #2
 8017d90:	701a      	strb	r2, [r3, #0]
        return 0;
 8017d92:	2300      	movs	r3, #0
 8017d94:	e040      	b.n	8017e18 <CoAcceptMultipleFlags+0xac>
    }
#endif
    
    springFlag = flags & pfcb->flagRdy;
 8017d96:	697b      	ldr	r3, [r7, #20]
 8017d98:	681b      	ldr	r3, [r3, #0]
 8017d9a:	68fa      	ldr	r2, [r7, #12]
 8017d9c:	4013      	ands	r3, r2
 8017d9e:	613b      	str	r3, [r7, #16]
    
    OsSchedLock();
 8017da0:	4b20      	ldr	r3, [pc, #128]	; (8017e24 <CoAcceptMultipleFlags+0xb8>)
 8017da2:	781b      	ldrb	r3, [r3, #0]
 8017da4:	b2db      	uxtb	r3, r3
 8017da6:	3301      	adds	r3, #1
 8017da8:	b2da      	uxtb	r2, r3
 8017daa:	4b1e      	ldr	r3, [pc, #120]	; (8017e24 <CoAcceptMultipleFlags+0xb8>)
 8017dac:	701a      	strb	r2, [r3, #0]
    /* If any required flags are set */
    if( (springFlag != 0) && (waitType == OPT_WAIT_ANY) )	
 8017dae:	693b      	ldr	r3, [r7, #16]
 8017db0:	2b00      	cmp	r3, #0
 8017db2:	d013      	beq.n	8017ddc <CoAcceptMultipleFlags+0x70>
 8017db4:	7afb      	ldrb	r3, [r7, #11]
 8017db6:	2b01      	cmp	r3, #1
 8017db8:	d110      	bne.n	8017ddc <CoAcceptMultipleFlags+0x70>
    {
        
        pfcb->flagRdy &= ~(springFlag & pfcb->resetOpt);  /* Clear the flags  */
 8017dba:	697b      	ldr	r3, [r7, #20]
 8017dbc:	681a      	ldr	r2, [r3, #0]
 8017dbe:	697b      	ldr	r3, [r7, #20]
 8017dc0:	6859      	ldr	r1, [r3, #4]
 8017dc2:	693b      	ldr	r3, [r7, #16]
 8017dc4:	400b      	ands	r3, r1
 8017dc6:	43db      	mvns	r3, r3
 8017dc8:	401a      	ands	r2, r3
 8017dca:	697b      	ldr	r3, [r7, #20]
 8017dcc:	601a      	str	r2, [r3, #0]
        OsSchedUnlock();
 8017dce:	f7ff fbf3 	bl	80175b8 <OsSchedUnlock>
        *perr = E_OK;
 8017dd2:	687b      	ldr	r3, [r7, #4]
 8017dd4:	2200      	movs	r2, #0
 8017dd6:	701a      	strb	r2, [r3, #0]
        return springFlag;
 8017dd8:	693b      	ldr	r3, [r7, #16]
 8017dda:	e01d      	b.n	8017e18 <CoAcceptMultipleFlags+0xac>
    }
    
    /* If all required flags are set */
    if((springFlag == flags) && (waitType == OPT_WAIT_ALL))
 8017ddc:	693a      	ldr	r2, [r7, #16]
 8017dde:	68fb      	ldr	r3, [r7, #12]
 8017de0:	429a      	cmp	r2, r3
 8017de2:	d113      	bne.n	8017e0c <CoAcceptMultipleFlags+0xa0>
 8017de4:	7afb      	ldrb	r3, [r7, #11]
 8017de6:	2b00      	cmp	r3, #0
 8017de8:	d110      	bne.n	8017e0c <CoAcceptMultipleFlags+0xa0>
    {
        pfcb->flagRdy &= ~(springFlag&pfcb->resetOpt);    /* Clear the flags  */
 8017dea:	697b      	ldr	r3, [r7, #20]
 8017dec:	681a      	ldr	r2, [r3, #0]
 8017dee:	697b      	ldr	r3, [r7, #20]
 8017df0:	6859      	ldr	r1, [r3, #4]
 8017df2:	693b      	ldr	r3, [r7, #16]
 8017df4:	400b      	ands	r3, r1
 8017df6:	43db      	mvns	r3, r3
 8017df8:	401a      	ands	r2, r3
 8017dfa:	697b      	ldr	r3, [r7, #20]
 8017dfc:	601a      	str	r2, [r3, #0]
        OsSchedUnlock();	
 8017dfe:	f7ff fbdb 	bl	80175b8 <OsSchedUnlock>
        *perr = E_OK;					
 8017e02:	687b      	ldr	r3, [r7, #4]
 8017e04:	2200      	movs	r2, #0
 8017e06:	701a      	strb	r2, [r3, #0]
        return springFlag;		 	
 8017e08:	693b      	ldr	r3, [r7, #16]
 8017e0a:	e005      	b.n	8017e18 <CoAcceptMultipleFlags+0xac>
    }
    OsSchedUnlock();
 8017e0c:	f7ff fbd4 	bl	80175b8 <OsSchedUnlock>
    *perr = E_FLAG_NOT_READY;		
 8017e10:	687b      	ldr	r3, [r7, #4]
 8017e12:	220c      	movs	r2, #12
 8017e14:	701a      	strb	r2, [r3, #0]
    return 0;
 8017e16:	2300      	movs	r3, #0
}
 8017e18:	4618      	mov	r0, r3
 8017e1a:	3718      	adds	r7, #24
 8017e1c:	46bd      	mov	sp, r7
 8017e1e:	bd80      	pop	{r7, pc}
 8017e20:	20003890 	.word	0x20003890
 8017e24:	20003749 	.word	0x20003749

08017e28 <CoWaitForSingleFlag>:
 *                 or RUNNING state.  
 * @note 
 *******************************************************************************
 */
StatusType CoWaitForSingleFlag(OS_FlagID id,U32 timeout)
{
 8017e28:	b580      	push	{r7, lr}
 8017e2a:	b08a      	sub	sp, #40	; 0x28
 8017e2c:	af00      	add	r7, sp, #0
 8017e2e:	4603      	mov	r3, r0
 8017e30:	6039      	str	r1, [r7, #0]
 8017e32:	71fb      	strb	r3, [r7, #7]
    FLAG_NODE flagNode;
    P_FCB     pfcb;
    P_OSTCB   curTCB;
    
    if(OSIntNesting > 0)                /* See if the caller is ISR           */
 8017e34:	4b54      	ldr	r3, [pc, #336]	; (8017f88 <CoWaitForSingleFlag+0x160>)
 8017e36:	781b      	ldrb	r3, [r3, #0]
 8017e38:	b2db      	uxtb	r3, r3
 8017e3a:	2b00      	cmp	r3, #0
 8017e3c:	d001      	beq.n	8017e42 <CoWaitForSingleFlag+0x1a>
    {
        return E_CALL;
 8017e3e:	2303      	movs	r3, #3
 8017e40:	e09e      	b.n	8017f80 <CoWaitForSingleFlag+0x158>
    }
    if(OSSchedLock != 0)                /* Schedule is lock?                  */
 8017e42:	4b52      	ldr	r3, [pc, #328]	; (8017f8c <CoWaitForSingleFlag+0x164>)
 8017e44:	781b      	ldrb	r3, [r3, #0]
 8017e46:	b2db      	uxtb	r3, r3
 8017e48:	2b00      	cmp	r3, #0
 8017e4a:	d001      	beq.n	8017e50 <CoWaitForSingleFlag+0x28>
    {								 
        return E_OS_IN_LOCK;            /* Yes,error return                   */
 8017e4c:	2315      	movs	r3, #21
 8017e4e:	e097      	b.n	8017f80 <CoWaitForSingleFlag+0x158>
    }	
    
#if CFG_PAR_CHECKOUT_EN >0	
    if(id >= FLAG_MAX_NUM)              /* Judge id is valid or not?          */  
 8017e50:	79fb      	ldrb	r3, [r7, #7]
 8017e52:	2b1f      	cmp	r3, #31
 8017e54:	d901      	bls.n	8017e5a <CoWaitForSingleFlag+0x32>
    {
        return E_INVALID_ID;            /* Invalid 'id'                       */      	
 8017e56:	2301      	movs	r3, #1
 8017e58:	e092      	b.n	8017f80 <CoWaitForSingleFlag+0x158>
    }
    if((FlagCrl.flagActive&(1<<id)) == 0 )/* Judge flag is active or not?       */
 8017e5a:	4b4d      	ldr	r3, [pc, #308]	; (8017f90 <CoWaitForSingleFlag+0x168>)
 8017e5c:	689b      	ldr	r3, [r3, #8]
 8017e5e:	79fa      	ldrb	r2, [r7, #7]
 8017e60:	2101      	movs	r1, #1
 8017e62:	fa01 f202 	lsl.w	r2, r1, r2
 8017e66:	4013      	ands	r3, r2
 8017e68:	2b00      	cmp	r3, #0
 8017e6a:	d101      	bne.n	8017e70 <CoWaitForSingleFlag+0x48>
    {
        return E_INVALID_ID;            /* Flag is deactive ,return error     */
 8017e6c:	2301      	movs	r3, #1
 8017e6e:	e087      	b.n	8017f80 <CoWaitForSingleFlag+0x158>
    }	
#endif

   	OsSchedLock();
 8017e70:	4b46      	ldr	r3, [pc, #280]	; (8017f8c <CoWaitForSingleFlag+0x164>)
 8017e72:	781b      	ldrb	r3, [r3, #0]
 8017e74:	b2db      	uxtb	r3, r3
 8017e76:	3301      	adds	r3, #1
 8017e78:	b2da      	uxtb	r2, r3
 8017e7a:	4b44      	ldr	r3, [pc, #272]	; (8017f8c <CoWaitForSingleFlag+0x164>)
 8017e7c:	701a      	strb	r2, [r3, #0]
	pfcb = &FlagCrl;
 8017e7e:	4b44      	ldr	r3, [pc, #272]	; (8017f90 <CoWaitForSingleFlag+0x168>)
 8017e80:	627b      	str	r3, [r7, #36]	; 0x24
    /* See if the required flag is set */
    if((pfcb->flagRdy&(1<<id)) != 0)    /* If the required flag is set        */
 8017e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e84:	681b      	ldr	r3, [r3, #0]
 8017e86:	79fa      	ldrb	r2, [r7, #7]
 8017e88:	2101      	movs	r1, #1
 8017e8a:	fa01 f202 	lsl.w	r2, r1, r2
 8017e8e:	4013      	ands	r3, r2
 8017e90:	2b00      	cmp	r3, #0
 8017e92:	d00f      	beq.n	8017eb4 <CoWaitForSingleFlag+0x8c>
    {
        pfcb->flagRdy &= ~((pfcb->resetOpt&(1<<id))); /* Clear the flag       */
 8017e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e96:	681a      	ldr	r2, [r3, #0]
 8017e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e9a:	685b      	ldr	r3, [r3, #4]
 8017e9c:	79f9      	ldrb	r1, [r7, #7]
 8017e9e:	2001      	movs	r0, #1
 8017ea0:	fa00 f101 	lsl.w	r1, r0, r1
 8017ea4:	400b      	ands	r3, r1
 8017ea6:	43db      	mvns	r3, r3
 8017ea8:	401a      	ands	r2, r3
 8017eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017eac:	601a      	str	r2, [r3, #0]
        OsSchedUnlock();
 8017eae:	f7ff fb83 	bl	80175b8 <OsSchedUnlock>
 8017eb2:	e064      	b.n	8017f7e <CoWaitForSingleFlag+0x156>
    }
    else                                /* If the required flag is not set    */
    {
        curTCB = TCBRunning;
 8017eb4:	4b37      	ldr	r3, [pc, #220]	; (8017f94 <CoWaitForSingleFlag+0x16c>)
 8017eb6:	681b      	ldr	r3, [r3, #0]
 8017eb8:	623b      	str	r3, [r7, #32]
        if(timeout == 0)                /* If time-out is not configured      */
 8017eba:	683b      	ldr	r3, [r7, #0]
 8017ebc:	2b00      	cmp	r3, #0
 8017ebe:	d12d      	bne.n	8017f1c <CoWaitForSingleFlag+0xf4>
        {
            /* Block task until the required flag is set                      */
            FlagBlock (&flagNode,(1<<id),OPT_WAIT_ONE);  
 8017ec0:	79fb      	ldrb	r3, [r7, #7]
 8017ec2:	2201      	movs	r2, #1
 8017ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8017ec8:	4619      	mov	r1, r3
 8017eca:	f107 030c 	add.w	r3, r7, #12
 8017ece:	2202      	movs	r2, #2
 8017ed0:	4618      	mov	r0, r3
 8017ed2:	f000 fa09 	bl	80182e8 <FlagBlock>
            curTCB->state  = TASK_WAITING;	
 8017ed6:	6a3b      	ldr	r3, [r7, #32]
 8017ed8:	2202      	movs	r2, #2
 8017eda:	715a      	strb	r2, [r3, #5]
			TaskSchedReq   = Co_TRUE;
 8017edc:	4b2e      	ldr	r3, [pc, #184]	; (8017f98 <CoWaitForSingleFlag+0x170>)
 8017ede:	2201      	movs	r2, #1
 8017ee0:	701a      	strb	r2, [r3, #0]
            OsSchedUnlock();
 8017ee2:	f7ff fb69 	bl	80175b8 <OsSchedUnlock>
            
            /* The required flag is set and the task is in running state      */
            curTCB->pnode  = Co_NULL;
 8017ee6:	6a3b      	ldr	r3, [r7, #32]
 8017ee8:	2200      	movs	r2, #0
 8017eea:	61da      	str	r2, [r3, #28]
            OsSchedLock();
 8017eec:	4b27      	ldr	r3, [pc, #156]	; (8017f8c <CoWaitForSingleFlag+0x164>)
 8017eee:	781b      	ldrb	r3, [r3, #0]
 8017ef0:	b2db      	uxtb	r3, r3
 8017ef2:	3301      	adds	r3, #1
 8017ef4:	b2da      	uxtb	r2, r3
 8017ef6:	4b25      	ldr	r3, [pc, #148]	; (8017f8c <CoWaitForSingleFlag+0x164>)
 8017ef8:	701a      	strb	r2, [r3, #0]
            
            /* Clear the required flag or not                                 */	
            pfcb->flagRdy &= ~((1<<id)&(pfcb->resetOpt)); 
 8017efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017efc:	681a      	ldr	r2, [r3, #0]
 8017efe:	79fb      	ldrb	r3, [r7, #7]
 8017f00:	2101      	movs	r1, #1
 8017f02:	fa01 f303 	lsl.w	r3, r1, r3
 8017f06:	4619      	mov	r1, r3
 8017f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017f0a:	685b      	ldr	r3, [r3, #4]
 8017f0c:	400b      	ands	r3, r1
 8017f0e:	43db      	mvns	r3, r3
 8017f10:	401a      	ands	r2, r3
 8017f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017f14:	601a      	str	r2, [r3, #0]
            OsSchedUnlock();
 8017f16:	f7ff fb4f 	bl	80175b8 <OsSchedUnlock>
 8017f1a:	e030      	b.n	8017f7e <CoWaitForSingleFlag+0x156>
        }
        else                            /* If time-out is configured          */
        {
            /* Block task until the required flag is set or time-out occurs   */
            FlagBlock(&flagNode,(1<<id),OPT_WAIT_ONE);
 8017f1c:	79fb      	ldrb	r3, [r7, #7]
 8017f1e:	2201      	movs	r2, #1
 8017f20:	fa02 f303 	lsl.w	r3, r2, r3
 8017f24:	4619      	mov	r1, r3
 8017f26:	f107 030c 	add.w	r3, r7, #12
 8017f2a:	2202      	movs	r2, #2
 8017f2c:	4618      	mov	r0, r3
 8017f2e:	f000 f9db 	bl	80182e8 <FlagBlock>
            InsertDelayList(curTCB,timeout);
 8017f32:	6839      	ldr	r1, [r7, #0]
 8017f34:	6a38      	ldr	r0, [r7, #32]
 8017f36:	f002 fa4b 	bl	801a3d0 <InsertDelayList>
            
            OsSchedUnlock();
 8017f3a:	f7ff fb3d 	bl	80175b8 <OsSchedUnlock>
            if(curTCB->pnode == Co_NULL)     /* If time-out occurred             */
 8017f3e:	6a3b      	ldr	r3, [r7, #32]
 8017f40:	69db      	ldr	r3, [r3, #28]
 8017f42:	2b00      	cmp	r3, #0
 8017f44:	d101      	bne.n	8017f4a <CoWaitForSingleFlag+0x122>
            {
                return E_TIMEOUT;		
 8017f46:	2305      	movs	r3, #5
 8017f48:	e01a      	b.n	8017f80 <CoWaitForSingleFlag+0x158>
            }
            else                          /* If flag is set                   */
            {
                curTCB->pnode = Co_NULL;
 8017f4a:	6a3b      	ldr	r3, [r7, #32]
 8017f4c:	2200      	movs	r2, #0
 8017f4e:	61da      	str	r2, [r3, #28]
                OsSchedLock();
 8017f50:	4b0e      	ldr	r3, [pc, #56]	; (8017f8c <CoWaitForSingleFlag+0x164>)
 8017f52:	781b      	ldrb	r3, [r3, #0]
 8017f54:	b2db      	uxtb	r3, r3
 8017f56:	3301      	adds	r3, #1
 8017f58:	b2da      	uxtb	r2, r3
 8017f5a:	4b0c      	ldr	r3, [pc, #48]	; (8017f8c <CoWaitForSingleFlag+0x164>)
 8017f5c:	701a      	strb	r2, [r3, #0]
                
                /* Clear the required flag or not                             */
                pfcb->flagRdy &= ~((1<<id)&(pfcb->resetOpt));	 
 8017f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017f60:	681a      	ldr	r2, [r3, #0]
 8017f62:	79fb      	ldrb	r3, [r7, #7]
 8017f64:	2101      	movs	r1, #1
 8017f66:	fa01 f303 	lsl.w	r3, r1, r3
 8017f6a:	4619      	mov	r1, r3
 8017f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017f6e:	685b      	ldr	r3, [r3, #4]
 8017f70:	400b      	ands	r3, r1
 8017f72:	43db      	mvns	r3, r3
 8017f74:	401a      	ands	r2, r3
 8017f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017f78:	601a      	str	r2, [r3, #0]
                OsSchedUnlock();
 8017f7a:	f7ff fb1d 	bl	80175b8 <OsSchedUnlock>
            }	
        }
    }
    return E_OK;	
 8017f7e:	2300      	movs	r3, #0
}
 8017f80:	4618      	mov	r0, r3
 8017f82:	3728      	adds	r7, #40	; 0x28
 8017f84:	46bd      	mov	sp, r7
 8017f86:	bd80      	pop	{r7, pc}
 8017f88:	20003748 	.word	0x20003748
 8017f8c:	20003749 	.word	0x20003749
 8017f90:	20003890 	.word	0x20003890
 8017f94:	2000d728 	.word	0x2000d728
 8017f98:	2000374a 	.word	0x2000374a

08017f9c <CoWaitForMultipleFlags>:
 * @details    This function is called to pend a task for waitting multiple flag. 
 * @note 
 *******************************************************************************
 */
U32 CoWaitForMultipleFlags(U32 flags,U8 waitType,U32 timeout,StatusType *perr)
{
 8017f9c:	b580      	push	{r7, lr}
 8017f9e:	b08c      	sub	sp, #48	; 0x30
 8017fa0:	af00      	add	r7, sp, #0
 8017fa2:	60f8      	str	r0, [r7, #12]
 8017fa4:	607a      	str	r2, [r7, #4]
 8017fa6:	603b      	str	r3, [r7, #0]
 8017fa8:	460b      	mov	r3, r1
 8017faa:	72fb      	strb	r3, [r7, #11]
    P_FCB     pfcb;
    FLAG_NODE flagNode;
    P_OSTCB   curTCB;
    
   
    if(OSIntNesting > 0)                /* If the caller is ISR               */
 8017fac:	4b65      	ldr	r3, [pc, #404]	; (8018144 <CoWaitForMultipleFlags+0x1a8>)
 8017fae:	781b      	ldrb	r3, [r3, #0]
 8017fb0:	b2db      	uxtb	r3, r3
 8017fb2:	2b00      	cmp	r3, #0
 8017fb4:	d004      	beq.n	8017fc0 <CoWaitForMultipleFlags+0x24>
    {
        *perr = E_CALL;
 8017fb6:	683b      	ldr	r3, [r7, #0]
 8017fb8:	2203      	movs	r2, #3
 8017fba:	701a      	strb	r2, [r3, #0]
        return 0;
 8017fbc:	2300      	movs	r3, #0
 8017fbe:	e0bc      	b.n	801813a <CoWaitForMultipleFlags+0x19e>
    }
    if(OSSchedLock != 0)                /* Schedule is lock?                  */
 8017fc0:	4b61      	ldr	r3, [pc, #388]	; (8018148 <CoWaitForMultipleFlags+0x1ac>)
 8017fc2:	781b      	ldrb	r3, [r3, #0]
 8017fc4:	b2db      	uxtb	r3, r3
 8017fc6:	2b00      	cmp	r3, #0
 8017fc8:	d004      	beq.n	8017fd4 <CoWaitForMultipleFlags+0x38>
    {	
        *perr = E_OS_IN_LOCK;							 
 8017fca:	683b      	ldr	r3, [r7, #0]
 8017fcc:	2215      	movs	r2, #21
 8017fce:	701a      	strb	r2, [r3, #0]
        return 0;                       /* Yes,error return                   */
 8017fd0:	2300      	movs	r3, #0
 8017fd2:	e0b2      	b.n	801813a <CoWaitForMultipleFlags+0x19e>
    }
#if CFG_PAR_CHECKOUT_EN >0  
    if( (flags&FlagCrl.flagActive) != flags )
 8017fd4:	4b5d      	ldr	r3, [pc, #372]	; (801814c <CoWaitForMultipleFlags+0x1b0>)
 8017fd6:	689a      	ldr	r2, [r3, #8]
 8017fd8:	68fb      	ldr	r3, [r7, #12]
 8017fda:	4013      	ands	r3, r2
 8017fdc:	68fa      	ldr	r2, [r7, #12]
 8017fde:	429a      	cmp	r2, r3
 8017fe0:	d004      	beq.n	8017fec <CoWaitForMultipleFlags+0x50>
    {
        *perr = E_INVALID_PARAMETER;    /* Invalid 'flags'                    */
 8017fe2:	683b      	ldr	r3, [r7, #0]
 8017fe4:	2202      	movs	r2, #2
 8017fe6:	701a      	strb	r2, [r3, #0]
        return 0;
 8017fe8:	2300      	movs	r3, #0
 8017fea:	e0a6      	b.n	801813a <CoWaitForMultipleFlags+0x19e>
    }
#endif
    OsSchedLock();
 8017fec:	4b56      	ldr	r3, [pc, #344]	; (8018148 <CoWaitForMultipleFlags+0x1ac>)
 8017fee:	781b      	ldrb	r3, [r3, #0]
 8017ff0:	b2db      	uxtb	r3, r3
 8017ff2:	3301      	adds	r3, #1
 8017ff4:	b2da      	uxtb	r2, r3
 8017ff6:	4b54      	ldr	r3, [pc, #336]	; (8018148 <CoWaitForMultipleFlags+0x1ac>)
 8017ff8:	701a      	strb	r2, [r3, #0]
	pfcb = &FlagCrl;
 8017ffa:	4b54      	ldr	r3, [pc, #336]	; (801814c <CoWaitForMultipleFlags+0x1b0>)
 8017ffc:	62fb      	str	r3, [r7, #44]	; 0x2c
    springFlag = flags & pfcb->flagRdy;
 8017ffe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018000:	681b      	ldr	r3, [r3, #0]
 8018002:	68fa      	ldr	r2, [r7, #12]
 8018004:	4013      	ands	r3, r2
 8018006:	62bb      	str	r3, [r7, #40]	; 0x28
    
    /* If any required flags are set  */
    if((springFlag != 0) && (waitType == OPT_WAIT_ANY))
 8018008:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801800a:	2b00      	cmp	r3, #0
 801800c:	d013      	beq.n	8018036 <CoWaitForMultipleFlags+0x9a>
 801800e:	7afb      	ldrb	r3, [r7, #11]
 8018010:	2b01      	cmp	r3, #1
 8018012:	d110      	bne.n	8018036 <CoWaitForMultipleFlags+0x9a>
    {
        pfcb->flagRdy &= ~(springFlag & pfcb->resetOpt);  /* Clear the flag   */
 8018014:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018016:	681a      	ldr	r2, [r3, #0]
 8018018:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801801a:	6859      	ldr	r1, [r3, #4]
 801801c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801801e:	400b      	ands	r3, r1
 8018020:	43db      	mvns	r3, r3
 8018022:	401a      	ands	r2, r3
 8018024:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018026:	601a      	str	r2, [r3, #0]
        OsSchedUnlock();
 8018028:	f7ff fac6 	bl	80175b8 <OsSchedUnlock>
        *perr = E_OK;
 801802c:	683b      	ldr	r3, [r7, #0]
 801802e:	2200      	movs	r2, #0
 8018030:	701a      	strb	r2, [r3, #0]
        return springFlag;
 8018032:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018034:	e081      	b.n	801813a <CoWaitForMultipleFlags+0x19e>
    }
    
    /* If all required flags are set */
    if( (springFlag == flags) && (waitType == OPT_WAIT_ALL) )  
 8018036:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8018038:	68fb      	ldr	r3, [r7, #12]
 801803a:	429a      	cmp	r2, r3
 801803c:	d113      	bne.n	8018066 <CoWaitForMultipleFlags+0xca>
 801803e:	7afb      	ldrb	r3, [r7, #11]
 8018040:	2b00      	cmp	r3, #0
 8018042:	d110      	bne.n	8018066 <CoWaitForMultipleFlags+0xca>
    {
        pfcb->flagRdy &= ~(springFlag & pfcb->resetOpt);  /* Clear the flags  */
 8018044:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018046:	681a      	ldr	r2, [r3, #0]
 8018048:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801804a:	6859      	ldr	r1, [r3, #4]
 801804c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801804e:	400b      	ands	r3, r1
 8018050:	43db      	mvns	r3, r3
 8018052:	401a      	ands	r2, r3
 8018054:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018056:	601a      	str	r2, [r3, #0]
        OsSchedUnlock();	
 8018058:	f7ff faae 	bl	80175b8 <OsSchedUnlock>
        *perr = E_OK;
 801805c:	683b      	ldr	r3, [r7, #0]
 801805e:	2200      	movs	r2, #0
 8018060:	701a      	strb	r2, [r3, #0]
        return springFlag;		 	
 8018062:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018064:	e069      	b.n	801813a <CoWaitForMultipleFlags+0x19e>
    }
    
    curTCB = TCBRunning;
 8018066:	4b3a      	ldr	r3, [pc, #232]	; (8018150 <CoWaitForMultipleFlags+0x1b4>)
 8018068:	681b      	ldr	r3, [r3, #0]
 801806a:	627b      	str	r3, [r7, #36]	; 0x24
    if(timeout == 0)                    /* If time-out is not configured      */
 801806c:	687b      	ldr	r3, [r7, #4]
 801806e:	2b00      	cmp	r3, #0
 8018070:	d12e      	bne.n	80180d0 <CoWaitForMultipleFlags+0x134>
    {
        /* Block task until the required flag are set                         */
        FlagBlock(&flagNode,flags,waitType);
 8018072:	7afa      	ldrb	r2, [r7, #11]
 8018074:	f107 0310 	add.w	r3, r7, #16
 8018078:	68f9      	ldr	r1, [r7, #12]
 801807a:	4618      	mov	r0, r3
 801807c:	f000 f934 	bl	80182e8 <FlagBlock>
        curTCB->state  = TASK_WAITING;	
 8018080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018082:	2202      	movs	r2, #2
 8018084:	715a      	strb	r2, [r3, #5]
		TaskSchedReq   = Co_TRUE;
 8018086:	4b33      	ldr	r3, [pc, #204]	; (8018154 <CoWaitForMultipleFlags+0x1b8>)
 8018088:	2201      	movs	r2, #1
 801808a:	701a      	strb	r2, [r3, #0]
		OsSchedUnlock();
 801808c:	f7ff fa94 	bl	80175b8 <OsSchedUnlock>
        
        curTCB->pnode  = Co_NULL;
 8018090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018092:	2200      	movs	r2, #0
 8018094:	61da      	str	r2, [r3, #28]
        OsSchedLock();			 	
 8018096:	4b2c      	ldr	r3, [pc, #176]	; (8018148 <CoWaitForMultipleFlags+0x1ac>)
 8018098:	781b      	ldrb	r3, [r3, #0]
 801809a:	b2db      	uxtb	r3, r3
 801809c:	3301      	adds	r3, #1
 801809e:	b2da      	uxtb	r2, r3
 80180a0:	4b29      	ldr	r3, [pc, #164]	; (8018148 <CoWaitForMultipleFlags+0x1ac>)
 80180a2:	701a      	strb	r2, [r3, #0]
        springFlag     = flags & pfcb->flagRdy;		
 80180a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80180a6:	681b      	ldr	r3, [r3, #0]
 80180a8:	68fa      	ldr	r2, [r7, #12]
 80180aa:	4013      	ands	r3, r2
 80180ac:	62bb      	str	r3, [r7, #40]	; 0x28
        pfcb->flagRdy &= ~(springFlag & pfcb->resetOpt);/* Clear the flags    */	
 80180ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80180b0:	681a      	ldr	r2, [r3, #0]
 80180b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80180b4:	6859      	ldr	r1, [r3, #4]
 80180b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80180b8:	400b      	ands	r3, r1
 80180ba:	43db      	mvns	r3, r3
 80180bc:	401a      	ands	r2, r3
 80180be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80180c0:	601a      	str	r2, [r3, #0]
        OsSchedUnlock();
 80180c2:	f7ff fa79 	bl	80175b8 <OsSchedUnlock>
        *perr = E_OK;
 80180c6:	683b      	ldr	r3, [r7, #0]
 80180c8:	2200      	movs	r2, #0
 80180ca:	701a      	strb	r2, [r3, #0]
        return springFlag;
 80180cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80180ce:	e034      	b.n	801813a <CoWaitForMultipleFlags+0x19e>
    }
    else                                /* If time-out is configured          */
    {
        /* Block task until the required flag are set or time-out occurred    */
        FlagBlock(&flagNode,flags,waitType);
 80180d0:	7afa      	ldrb	r2, [r7, #11]
 80180d2:	f107 0310 	add.w	r3, r7, #16
 80180d6:	68f9      	ldr	r1, [r7, #12]
 80180d8:	4618      	mov	r0, r3
 80180da:	f000 f905 	bl	80182e8 <FlagBlock>
        InsertDelayList(curTCB,timeout);
 80180de:	6879      	ldr	r1, [r7, #4]
 80180e0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80180e2:	f002 f975 	bl	801a3d0 <InsertDelayList>
        
        OsSchedUnlock();
 80180e6:	f7ff fa67 	bl	80175b8 <OsSchedUnlock>
        if(curTCB->pnode == Co_NULL)       /* If time-out occurred               */
 80180ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80180ec:	69db      	ldr	r3, [r3, #28]
 80180ee:	2b00      	cmp	r3, #0
 80180f0:	d104      	bne.n	80180fc <CoWaitForMultipleFlags+0x160>
        {
            *perr = E_TIMEOUT;
 80180f2:	683b      	ldr	r3, [r7, #0]
 80180f4:	2205      	movs	r2, #5
 80180f6:	701a      	strb	r2, [r3, #0]
            return 0;	
 80180f8:	2300      	movs	r3, #0
 80180fa:	e01e      	b.n	801813a <CoWaitForMultipleFlags+0x19e>
        }
        else                            /* If the required flags are set      */
        {
            curTCB->pnode = Co_NULL;
 80180fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80180fe:	2200      	movs	r2, #0
 8018100:	61da      	str	r2, [r3, #28]
            OsSchedLock();
 8018102:	4b11      	ldr	r3, [pc, #68]	; (8018148 <CoWaitForMultipleFlags+0x1ac>)
 8018104:	781b      	ldrb	r3, [r3, #0]
 8018106:	b2db      	uxtb	r3, r3
 8018108:	3301      	adds	r3, #1
 801810a:	b2da      	uxtb	r2, r3
 801810c:	4b0e      	ldr	r3, [pc, #56]	; (8018148 <CoWaitForMultipleFlags+0x1ac>)
 801810e:	701a      	strb	r2, [r3, #0]
            springFlag    = flags & FlagCrl.flagRdy;
 8018110:	4b0e      	ldr	r3, [pc, #56]	; (801814c <CoWaitForMultipleFlags+0x1b0>)
 8018112:	681b      	ldr	r3, [r3, #0]
 8018114:	68fa      	ldr	r2, [r7, #12]
 8018116:	4013      	ands	r3, r2
 8018118:	62bb      	str	r3, [r7, #40]	; 0x28
            
            /* Clear the required ready flags or not */
            pfcb->flagRdy &= ~(springFlag & pfcb->resetOpt);	
 801811a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801811c:	681a      	ldr	r2, [r3, #0]
 801811e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018120:	6859      	ldr	r1, [r3, #4]
 8018122:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018124:	400b      	ands	r3, r1
 8018126:	43db      	mvns	r3, r3
 8018128:	401a      	ands	r2, r3
 801812a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801812c:	601a      	str	r2, [r3, #0]
            OsSchedUnlock();
 801812e:	f7ff fa43 	bl	80175b8 <OsSchedUnlock>
            *perr = E_OK;
 8018132:	683b      	ldr	r3, [r7, #0]
 8018134:	2200      	movs	r2, #0
 8018136:	701a      	strb	r2, [r3, #0]
            return springFlag;	
 8018138:	6abb      	ldr	r3, [r7, #40]	; 0x28
        }	
    }	
}
 801813a:	4618      	mov	r0, r3
 801813c:	3730      	adds	r7, #48	; 0x30
 801813e:	46bd      	mov	sp, r7
 8018140:	bd80      	pop	{r7, pc}
 8018142:	bf00      	nop
 8018144:	20003748 	.word	0x20003748
 8018148:	20003749 	.word	0x20003749
 801814c:	20003890 	.word	0x20003890
 8018150:	2000d728 	.word	0x2000d728
 8018154:	2000374a 	.word	0x2000374a

08018158 <CoClearFlag>:
 *
 * @note 
 *******************************************************************************
 */
StatusType CoClearFlag(OS_FlagID id)
{
 8018158:	b480      	push	{r7}
 801815a:	b085      	sub	sp, #20
 801815c:	af00      	add	r7, sp, #0
 801815e:	4603      	mov	r3, r0
 8018160:	71fb      	strb	r3, [r7, #7]
    P_FCB pfcb;
    pfcb = &FlagCrl;
 8018162:	4b11      	ldr	r3, [pc, #68]	; (80181a8 <CoClearFlag+0x50>)
 8018164:	60fb      	str	r3, [r7, #12]
#if CFG_PAR_CHECKOUT_EN >0
    if(id >= FLAG_MAX_NUM)                  
 8018166:	79fb      	ldrb	r3, [r7, #7]
 8018168:	2b1f      	cmp	r3, #31
 801816a:	d901      	bls.n	8018170 <CoClearFlag+0x18>
    {
        return E_INVALID_ID;                /* Invalid id                     */	
 801816c:	2301      	movs	r3, #1
 801816e:	e015      	b.n	801819c <CoClearFlag+0x44>
    }
    if((pfcb->flagActive&(1<<id)) == 0)     
 8018170:	68fb      	ldr	r3, [r7, #12]
 8018172:	689b      	ldr	r3, [r3, #8]
 8018174:	79fa      	ldrb	r2, [r7, #7]
 8018176:	2101      	movs	r1, #1
 8018178:	fa01 f202 	lsl.w	r2, r1, r2
 801817c:	4013      	ands	r3, r2
 801817e:	2b00      	cmp	r3, #0
 8018180:	d101      	bne.n	8018186 <CoClearFlag+0x2e>
    {
        return E_INVALID_ID;                /* Invalid flag                   */
 8018182:	2301      	movs	r3, #1
 8018184:	e00a      	b.n	801819c <CoClearFlag+0x44>
    }
#endif

    pfcb->flagRdy &= ~(1<<id);              /* Clear the flag                 */
 8018186:	68fb      	ldr	r3, [r7, #12]
 8018188:	681b      	ldr	r3, [r3, #0]
 801818a:	79fa      	ldrb	r2, [r7, #7]
 801818c:	2101      	movs	r1, #1
 801818e:	fa01 f202 	lsl.w	r2, r1, r2
 8018192:	43d2      	mvns	r2, r2
 8018194:	401a      	ands	r2, r3
 8018196:	68fb      	ldr	r3, [r7, #12]
 8018198:	601a      	str	r2, [r3, #0]
    return E_OK;
 801819a:	2300      	movs	r3, #0
}
 801819c:	4618      	mov	r0, r3
 801819e:	3714      	adds	r7, #20
 80181a0:	46bd      	mov	sp, r7
 80181a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80181a6:	4770      	bx	lr
 80181a8:	20003890 	.word	0x20003890

080181ac <CoSetFlag>:
 * @details    This function is called to set a flag. 
 * @note 
 *******************************************************************************
 */
StatusType CoSetFlag(OS_FlagID id)
{
 80181ac:	b580      	push	{r7, lr}
 80181ae:	b084      	sub	sp, #16
 80181b0:	af00      	add	r7, sp, #0
 80181b2:	4603      	mov	r3, r0
 80181b4:	71fb      	strb	r3, [r7, #7]
    P_FLAG_NODE pnode;
    P_FCB pfcb;
    pfcb  = &FlagCrl;
 80181b6:	4b39      	ldr	r3, [pc, #228]	; (801829c <CoSetFlag+0xf0>)
 80181b8:	60bb      	str	r3, [r7, #8]
    
#if CFG_PAR_CHECKOUT_EN >0
    if(id >= FLAG_MAX_NUM)              /* Flag is valid or not               */							
 80181ba:	79fb      	ldrb	r3, [r7, #7]
 80181bc:	2b1f      	cmp	r3, #31
 80181be:	d901      	bls.n	80181c4 <CoSetFlag+0x18>
    {
        return E_INVALID_ID;            /* Invalid flag id                    */      	
 80181c0:	2301      	movs	r3, #1
 80181c2:	e066      	b.n	8018292 <CoSetFlag+0xe6>
    }
    if((pfcb->flagActive&(1<<id)) == 0)  
 80181c4:	68bb      	ldr	r3, [r7, #8]
 80181c6:	689b      	ldr	r3, [r3, #8]
 80181c8:	79fa      	ldrb	r2, [r7, #7]
 80181ca:	2101      	movs	r1, #1
 80181cc:	fa01 f202 	lsl.w	r2, r1, r2
 80181d0:	4013      	ands	r3, r2
 80181d2:	2b00      	cmp	r3, #0
 80181d4:	d101      	bne.n	80181da <CoSetFlag+0x2e>
    {
        return E_INVALID_ID;            /* Flag is not exist                  */
 80181d6:	2301      	movs	r3, #1
 80181d8:	e05b      	b.n	8018292 <CoSetFlag+0xe6>
    }
#endif
    
    if((pfcb->flagRdy&(1<<id)) != 0)    /* Flag had already been set          */
 80181da:	68bb      	ldr	r3, [r7, #8]
 80181dc:	681b      	ldr	r3, [r3, #0]
 80181de:	79fa      	ldrb	r2, [r7, #7]
 80181e0:	2101      	movs	r1, #1
 80181e2:	fa01 f202 	lsl.w	r2, r1, r2
 80181e6:	4013      	ands	r3, r2
 80181e8:	2b00      	cmp	r3, #0
 80181ea:	d001      	beq.n	80181f0 <CoSetFlag+0x44>
    {
    	return E_OK;
 80181ec:	2300      	movs	r3, #0
 80181ee:	e050      	b.n	8018292 <CoSetFlag+0xe6>
    }
    
    pfcb->flagRdy |= (1<<id);           /* Update the flags ready list        */
 80181f0:	68bb      	ldr	r3, [r7, #8]
 80181f2:	681b      	ldr	r3, [r3, #0]
 80181f4:	79fa      	ldrb	r2, [r7, #7]
 80181f6:	2101      	movs	r1, #1
 80181f8:	fa01 f202 	lsl.w	r2, r1, r2
 80181fc:	431a      	orrs	r2, r3
 80181fe:	68bb      	ldr	r3, [r7, #8]
 8018200:	601a      	str	r2, [r3, #0]
    
    OsSchedLock();
 8018202:	4b27      	ldr	r3, [pc, #156]	; (80182a0 <CoSetFlag+0xf4>)
 8018204:	781b      	ldrb	r3, [r3, #0]
 8018206:	b2db      	uxtb	r3, r3
 8018208:	3301      	adds	r3, #1
 801820a:	b2da      	uxtb	r2, r3
 801820c:	4b24      	ldr	r3, [pc, #144]	; (80182a0 <CoSetFlag+0xf4>)
 801820e:	701a      	strb	r2, [r3, #0]
    pnode = pfcb->headNode;	  		
 8018210:	68bb      	ldr	r3, [r7, #8]
 8018212:	68db      	ldr	r3, [r3, #12]
 8018214:	60fb      	str	r3, [r7, #12]
    while(pnode != Co_NULL)
 8018216:	e032      	b.n	801827e <CoSetFlag+0xd2>
    {
        if(pnode->waitType == OPT_WAIT_ALL)   /* Extract all the bits we want */
 8018218:	68fb      	ldr	r3, [r7, #12]
 801821a:	7c1b      	ldrb	r3, [r3, #16]
 801821c:	2b00      	cmp	r3, #0
 801821e:	d116      	bne.n	801824e <CoSetFlag+0xa2>
      	{			
            if((pnode->waitFlags&pfcb->flagRdy) == pnode->waitFlags)
 8018220:	68fb      	ldr	r3, [r7, #12]
 8018222:	689a      	ldr	r2, [r3, #8]
 8018224:	68bb      	ldr	r3, [r7, #8]
 8018226:	681b      	ldr	r3, [r3, #0]
 8018228:	401a      	ands	r2, r3
 801822a:	68fb      	ldr	r3, [r7, #12]
 801822c:	689b      	ldr	r3, [r3, #8]
 801822e:	429a      	cmp	r2, r3
 8018230:	d122      	bne.n	8018278 <CoSetFlag+0xcc>
            {
               /* Remove the flag node from the wait list                    */
                pnode = RemoveFromLink(pnode);		
 8018232:	68f8      	ldr	r0, [r7, #12]
 8018234:	f000 f896 	bl	8018364 <RemoveFromLink>
 8018238:	60f8      	str	r0, [r7, #12]
                if((pfcb->resetOpt&(1<<id)) != 0)/* If the flags is auto-reset*/	
 801823a:	68bb      	ldr	r3, [r7, #8]
 801823c:	685b      	ldr	r3, [r3, #4]
 801823e:	79fa      	ldrb	r2, [r7, #7]
 8018240:	2101      	movs	r1, #1
 8018242:	fa01 f202 	lsl.w	r2, r1, r2
 8018246:	4013      	ands	r3, r2
 8018248:	2b00      	cmp	r3, #0
 801824a:	d11c      	bne.n	8018286 <CoSetFlag+0xda>
                {
                    break;							
                }
                continue;	
 801824c:	e017      	b.n	801827e <CoSetFlag+0xd2>
            }	
      	}
        else                           /* Extract only the bits we want       */	
      	{
            if( (pnode->waitFlags & pfcb->flagRdy) != 0)
 801824e:	68fb      	ldr	r3, [r7, #12]
 8018250:	689a      	ldr	r2, [r3, #8]
 8018252:	68bb      	ldr	r3, [r7, #8]
 8018254:	681b      	ldr	r3, [r3, #0]
 8018256:	4013      	ands	r3, r2
 8018258:	2b00      	cmp	r3, #0
 801825a:	d00d      	beq.n	8018278 <CoSetFlag+0xcc>
            {
                /* Remove the flag node from the wait list                    */
                pnode = RemoveFromLink(pnode);	 	
 801825c:	68f8      	ldr	r0, [r7, #12]
 801825e:	f000 f881 	bl	8018364 <RemoveFromLink>
 8018262:	60f8      	str	r0, [r7, #12]
                if((pfcb->resetOpt&(1<<id)) != 0)
 8018264:	68bb      	ldr	r3, [r7, #8]
 8018266:	685b      	ldr	r3, [r3, #4]
 8018268:	79fa      	ldrb	r2, [r7, #7]
 801826a:	2101      	movs	r1, #1
 801826c:	fa01 f202 	lsl.w	r2, r1, r2
 8018270:	4013      	ands	r3, r2
 8018272:	2b00      	cmp	r3, #0
 8018274:	d109      	bne.n	801828a <CoSetFlag+0xde>
                {
                    break;              /* The flags is auto-reset            */	
                }
                continue;
 8018276:	e002      	b.n	801827e <CoSetFlag+0xd2>
            }	
      	}
      	pnode = pnode->nextNode;					
 8018278:	68fb      	ldr	r3, [r7, #12]
 801827a:	681b      	ldr	r3, [r3, #0]
 801827c:	60fb      	str	r3, [r7, #12]
    while(pnode != Co_NULL)
 801827e:	68fb      	ldr	r3, [r7, #12]
 8018280:	2b00      	cmp	r3, #0
 8018282:	d1c9      	bne.n	8018218 <CoSetFlag+0x6c>
 8018284:	e002      	b.n	801828c <CoSetFlag+0xe0>
                    break;							
 8018286:	bf00      	nop
 8018288:	e000      	b.n	801828c <CoSetFlag+0xe0>
                    break;              /* The flags is auto-reset            */	
 801828a:	bf00      	nop
    }
    OsSchedUnlock();
 801828c:	f7ff f994 	bl	80175b8 <OsSchedUnlock>
    return E_OK;
 8018290:	2300      	movs	r3, #0
}
 8018292:	4618      	mov	r0, r3
 8018294:	3710      	adds	r7, #16
 8018296:	46bd      	mov	sp, r7
 8018298:	bd80      	pop	{r7, pc}
 801829a:	bf00      	nop
 801829c:	20003890 	.word	0x20003890
 80182a0:	20003749 	.word	0x20003749

080182a4 <isr_SetFlag>:
 * @note 
 *******************************************************************************
 */
#if CFG_MAX_SERVICE_REQUEST > 0
StatusType isr_SetFlag(OS_FlagID id)
{
 80182a4:	b580      	push	{r7, lr}
 80182a6:	b082      	sub	sp, #8
 80182a8:	af00      	add	r7, sp, #0
 80182aa:	4603      	mov	r3, r0
 80182ac:	71fb      	strb	r3, [r7, #7]
    if(OSSchedLock > 0)         /* If scheduler is locked,(the caller is ISR) */
 80182ae:	4b0d      	ldr	r3, [pc, #52]	; (80182e4 <isr_SetFlag+0x40>)
 80182b0:	781b      	ldrb	r3, [r3, #0]
 80182b2:	b2db      	uxtb	r3, r3
 80182b4:	2b00      	cmp	r3, #0
 80182b6:	d00c      	beq.n	80182d2 <isr_SetFlag+0x2e>
    {
        /* Insert the request into service request queue                      */
        if(InsertInSRQ(FLAG_REQ,id,Co_NULL) == Co_FALSE)
 80182b8:	79fb      	ldrb	r3, [r7, #7]
 80182ba:	2200      	movs	r2, #0
 80182bc:	4619      	mov	r1, r3
 80182be:	2003      	movs	r0, #3
 80182c0:	f001 fb3e 	bl	8019940 <InsertInSRQ>
 80182c4:	4603      	mov	r3, r0
 80182c6:	2b00      	cmp	r3, #0
 80182c8:	d101      	bne.n	80182ce <isr_SetFlag+0x2a>
        {
            return E_SEV_REQ_FULL;      /* The service requst queue is full   */
 80182ca:	2312      	movs	r3, #18
 80182cc:	e006      	b.n	80182dc <isr_SetFlag+0x38>
        }			
        else
        {
            return E_OK;   							
 80182ce:	2300      	movs	r3, #0
 80182d0:	e004      	b.n	80182dc <isr_SetFlag+0x38>
        }
    }
    else
    {
        return(CoSetFlag(id));          /* The caller is not ISR, set the flag*/
 80182d2:	79fb      	ldrb	r3, [r7, #7]
 80182d4:	4618      	mov	r0, r3
 80182d6:	f7ff ff69 	bl	80181ac <CoSetFlag>
 80182da:	4603      	mov	r3, r0
    }
}
 80182dc:	4618      	mov	r0, r3
 80182de:	3708      	adds	r7, #8
 80182e0:	46bd      	mov	sp, r7
 80182e2:	bd80      	pop	{r7, pc}
 80182e4:	20003749 	.word	0x20003749

080182e8 <FlagBlock>:
 * @details    This function is called to block a task to wait a flag event.	 
 * @note 
 *******************************************************************************
 */
static void FlagBlock(P_FLAG_NODE pnode,U32 flags,U8 waitType)
{
 80182e8:	b480      	push	{r7}
 80182ea:	b087      	sub	sp, #28
 80182ec:	af00      	add	r7, sp, #0
 80182ee:	60f8      	str	r0, [r7, #12]
 80182f0:	60b9      	str	r1, [r7, #8]
 80182f2:	4613      	mov	r3, r2
 80182f4:	71fb      	strb	r3, [r7, #7]
    P_FCB     pfcb;
    pfcb  = &FlagCrl;
 80182f6:	4b19      	ldr	r3, [pc, #100]	; (801835c <FlagBlock+0x74>)
 80182f8:	617b      	str	r3, [r7, #20]
    
    TCBRunning->pnode = pnode;	
 80182fa:	4b19      	ldr	r3, [pc, #100]	; (8018360 <FlagBlock+0x78>)
 80182fc:	681b      	ldr	r3, [r3, #0]
 80182fe:	68fa      	ldr	r2, [r7, #12]
 8018300:	61da      	str	r2, [r3, #28]
    pnode->waitTask   = TCBRunning;
 8018302:	4b17      	ldr	r3, [pc, #92]	; (8018360 <FlagBlock+0x78>)
 8018304:	681a      	ldr	r2, [r3, #0]
 8018306:	68fb      	ldr	r3, [r7, #12]
 8018308:	60da      	str	r2, [r3, #12]
    pnode->waitFlags  = flags;      /* Save the flags that we need to wait for*/
 801830a:	68fb      	ldr	r3, [r7, #12]
 801830c:	68ba      	ldr	r2, [r7, #8]
 801830e:	609a      	str	r2, [r3, #8]
    pnode->waitType   = waitType;   /* Save the type of wait                  */
 8018310:	68fb      	ldr	r3, [r7, #12]
 8018312:	79fa      	ldrb	r2, [r7, #7]
 8018314:	741a      	strb	r2, [r3, #16]
        
    if(pfcb->tailNode == Co_NULL)      /* If this is the first NODE to insert?   */
 8018316:	697b      	ldr	r3, [r7, #20]
 8018318:	691b      	ldr	r3, [r3, #16]
 801831a:	2b00      	cmp	r3, #0
 801831c:	d109      	bne.n	8018332 <FlagBlock+0x4a>
    {
        pnode->nextNode = Co_NULL;
 801831e:	68fb      	ldr	r3, [r7, #12]
 8018320:	2200      	movs	r2, #0
 8018322:	601a      	str	r2, [r3, #0]
        pnode->prevNode = Co_NULL;
 8018324:	68fb      	ldr	r3, [r7, #12]
 8018326:	2200      	movs	r2, #0
 8018328:	605a      	str	r2, [r3, #4]
        pfcb->headNode  = pnode;    /* Insert the NODE to the head            */	
 801832a:	697b      	ldr	r3, [r7, #20]
 801832c:	68fa      	ldr	r2, [r7, #12]
 801832e:	60da      	str	r2, [r3, #12]
 8018330:	e00a      	b.n	8018348 <FlagBlock+0x60>
    }
    else                            /* If it is not the first NODE to insert? */
    {
        pfcb->tailNode->nextNode = pnode;   /* Insert the NODE to the tail    */
 8018332:	697b      	ldr	r3, [r7, #20]
 8018334:	691b      	ldr	r3, [r3, #16]
 8018336:	68fa      	ldr	r2, [r7, #12]
 8018338:	601a      	str	r2, [r3, #0]
        pnode->prevNode          = pfcb->tailNode;
 801833a:	697b      	ldr	r3, [r7, #20]
 801833c:	691a      	ldr	r2, [r3, #16]
 801833e:	68fb      	ldr	r3, [r7, #12]
 8018340:	605a      	str	r2, [r3, #4]
        pnode->nextNode          = Co_NULL;
 8018342:	68fb      	ldr	r3, [r7, #12]
 8018344:	2200      	movs	r2, #0
 8018346:	601a      	str	r2, [r3, #0]
    }
    pfcb->tailNode = pnode;
 8018348:	697b      	ldr	r3, [r7, #20]
 801834a:	68fa      	ldr	r2, [r7, #12]
 801834c:	611a      	str	r2, [r3, #16]
}
 801834e:	bf00      	nop
 8018350:	371c      	adds	r7, #28
 8018352:	46bd      	mov	sp, r7
 8018354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018358:	4770      	bx	lr
 801835a:	bf00      	nop
 801835c:	20003890 	.word	0x20003890
 8018360:	2000d728 	.word	0x2000d728

08018364 <RemoveFromLink>:
 * @details   This function is called to remove a flag node from the wait list.			 
 * @note 
 *******************************************************************************
 */
static P_FLAG_NODE RemoveFromLink(P_FLAG_NODE pnode)
{
 8018364:	b580      	push	{r7, lr}
 8018366:	b084      	sub	sp, #16
 8018368:	af00      	add	r7, sp, #0
 801836a:	6078      	str	r0, [r7, #4]
    P_OSTCB ptcb;
    
    RemoveLinkNode(pnode);            /* Remove the flag node from wait list. */			 
 801836c:	6878      	ldr	r0, [r7, #4]
 801836e:	f000 f823 	bl	80183b8 <RemoveLinkNode>
    ptcb = pnode->waitTask;
 8018372:	687b      	ldr	r3, [r7, #4]
 8018374:	68db      	ldr	r3, [r3, #12]
 8018376:	60fb      	str	r3, [r7, #12]
    
    /* The task in the delay list */
    if(ptcb->delayTick != INVALID_VALUE)/* If the task is in tick delay list  */			         
 8018378:	68fb      	ldr	r3, [r7, #12]
 801837a:	6a1b      	ldr	r3, [r3, #32]
 801837c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8018380:	d002      	beq.n	8018388 <RemoveFromLink+0x24>
    {
        RemoveDelayList(ptcb);        /* Remove the task from tick delay list */	
 8018382:	68f8      	ldr	r0, [r7, #12]
 8018384:	f002 f89c 	bl	801a4c0 <RemoveDelayList>
    }
	
	ptcb->pnode = (void*)0xffffffff;
 8018388:	68fb      	ldr	r3, [r7, #12]
 801838a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801838e:	61da      	str	r2, [r3, #28]

	if(ptcb == TCBRunning)
 8018390:	4b08      	ldr	r3, [pc, #32]	; (80183b4 <RemoveFromLink+0x50>)
 8018392:	681b      	ldr	r3, [r3, #0]
 8018394:	68fa      	ldr	r2, [r7, #12]
 8018396:	429a      	cmp	r2, r3
 8018398:	d103      	bne.n	80183a2 <RemoveFromLink+0x3e>
	{
		ptcb->state = TASK_RUNNING;
 801839a:	68fb      	ldr	r3, [r7, #12]
 801839c:	2201      	movs	r2, #1
 801839e:	715a      	strb	r2, [r3, #5]
 80183a0:	e002      	b.n	80183a8 <RemoveFromLink+0x44>
	} 
	else
	{
		InsertToTCBRdyList(ptcb);         /* Insert the task to ready list        */	
 80183a2:	68f8      	ldr	r0, [r7, #12]
 80183a4:	f001 fbc6 	bl	8019b34 <InsertToTCBRdyList>
	}   
    return (pnode->nextNode);	
 80183a8:	687b      	ldr	r3, [r7, #4]
 80183aa:	681b      	ldr	r3, [r3, #0]
}
 80183ac:	4618      	mov	r0, r3
 80183ae:	3710      	adds	r7, #16
 80183b0:	46bd      	mov	sp, r7
 80183b2:	bd80      	pop	{r7, pc}
 80183b4:	2000d728 	.word	0x2000d728

080183b8 <RemoveLinkNode>:
 * @details    This function is called to remove a flag node from the wait list.			 
 * @note 
 *******************************************************************************
 */
void RemoveLinkNode(P_FLAG_NODE pnode)
{
 80183b8:	b480      	push	{r7}
 80183ba:	b083      	sub	sp, #12
 80183bc:	af00      	add	r7, sp, #0
 80183be:	6078      	str	r0, [r7, #4]
    /* If only one NODE in the list*/
    if((pnode->nextNode == Co_NULL) && (pnode->prevNode == Co_NULL))
 80183c0:	687b      	ldr	r3, [r7, #4]
 80183c2:	681b      	ldr	r3, [r3, #0]
 80183c4:	2b00      	cmp	r3, #0
 80183c6:	d10a      	bne.n	80183de <RemoveLinkNode+0x26>
 80183c8:	687b      	ldr	r3, [r7, #4]
 80183ca:	685b      	ldr	r3, [r3, #4]
 80183cc:	2b00      	cmp	r3, #0
 80183ce:	d106      	bne.n	80183de <RemoveLinkNode+0x26>
    {
        FlagCrl.headNode = Co_NULL;
 80183d0:	4b1a      	ldr	r3, [pc, #104]	; (801843c <RemoveLinkNode+0x84>)
 80183d2:	2200      	movs	r2, #0
 80183d4:	60da      	str	r2, [r3, #12]
        FlagCrl.tailNode = Co_NULL;
 80183d6:	4b19      	ldr	r3, [pc, #100]	; (801843c <RemoveLinkNode+0x84>)
 80183d8:	2200      	movs	r2, #0
 80183da:	611a      	str	r2, [r3, #16]
 80183dc:	e023      	b.n	8018426 <RemoveLinkNode+0x6e>
    }
    else if(pnode->nextNode == Co_NULL)      /* If the NODE is tail              */
 80183de:	687b      	ldr	r3, [r7, #4]
 80183e0:	681b      	ldr	r3, [r3, #0]
 80183e2:	2b00      	cmp	r3, #0
 80183e4:	d108      	bne.n	80183f8 <RemoveLinkNode+0x40>
    {
        FlagCrl.tailNode          = pnode->prevNode;
 80183e6:	687b      	ldr	r3, [r7, #4]
 80183e8:	685b      	ldr	r3, [r3, #4]
 80183ea:	4a14      	ldr	r2, [pc, #80]	; (801843c <RemoveLinkNode+0x84>)
 80183ec:	6113      	str	r3, [r2, #16]
        pnode->prevNode->nextNode = Co_NULL;
 80183ee:	687b      	ldr	r3, [r7, #4]
 80183f0:	685b      	ldr	r3, [r3, #4]
 80183f2:	2200      	movs	r2, #0
 80183f4:	601a      	str	r2, [r3, #0]
 80183f6:	e016      	b.n	8018426 <RemoveLinkNode+0x6e>
    }
    else if(pnode->prevNode == Co_NULL)      /* If the NODE is head              */
 80183f8:	687b      	ldr	r3, [r7, #4]
 80183fa:	685b      	ldr	r3, [r3, #4]
 80183fc:	2b00      	cmp	r3, #0
 80183fe:	d108      	bne.n	8018412 <RemoveLinkNode+0x5a>
    {
        FlagCrl.headNode          = pnode->nextNode;
 8018400:	687b      	ldr	r3, [r7, #4]
 8018402:	681b      	ldr	r3, [r3, #0]
 8018404:	4a0d      	ldr	r2, [pc, #52]	; (801843c <RemoveLinkNode+0x84>)
 8018406:	60d3      	str	r3, [r2, #12]
        pnode->nextNode->prevNode = Co_NULL;
 8018408:	687b      	ldr	r3, [r7, #4]
 801840a:	681b      	ldr	r3, [r3, #0]
 801840c:	2200      	movs	r2, #0
 801840e:	605a      	str	r2, [r3, #4]
 8018410:	e009      	b.n	8018426 <RemoveLinkNode+0x6e>
    }
    else                                  /* The NODE is in the middle        */
    {
        pnode->nextNode->prevNode = pnode->prevNode;
 8018412:	687b      	ldr	r3, [r7, #4]
 8018414:	681b      	ldr	r3, [r3, #0]
 8018416:	687a      	ldr	r2, [r7, #4]
 8018418:	6852      	ldr	r2, [r2, #4]
 801841a:	605a      	str	r2, [r3, #4]
        pnode->prevNode->nextNode = pnode->nextNode;
 801841c:	687b      	ldr	r3, [r7, #4]
 801841e:	685b      	ldr	r3, [r3, #4]
 8018420:	687a      	ldr	r2, [r7, #4]
 8018422:	6812      	ldr	r2, [r2, #0]
 8018424:	601a      	str	r2, [r3, #0]
    }
    pnode->waitTask->pnode = Co_NULL;
 8018426:	687b      	ldr	r3, [r7, #4]
 8018428:	68db      	ldr	r3, [r3, #12]
 801842a:	2200      	movs	r2, #0
 801842c:	61da      	str	r2, [r3, #28]
}
 801842e:	bf00      	nop
 8018430:	370c      	adds	r7, #12
 8018432:	46bd      	mov	sp, r7
 8018434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018438:	4770      	bx	lr
 801843a:	bf00      	nop
 801843c:	20003890 	.word	0x20003890

08018440 <CoIdleTask>:
 * @par Description
 * @details    This function is system IDLE task code.	 
 *******************************************************************************
 */
void CoIdleTask(void* pdata)
{
 8018440:	b480      	push	{r7}
 8018442:	b083      	sub	sp, #12
 8018444:	af00      	add	r7, sp, #0
 8018446:	6078      	str	r0, [r7, #4]
		printf(", priority => %d\r\n", ptcb->prio);
		ptcb++;
	}
	
	printf("[%10s] Sleeping...\r\n", "system");*/
	for( ; ; )
 8018448:	e7fe      	b.n	8018448 <CoIdleTask+0x8>

0801844a <CoStkOverflowHook>:
 * @par Description
 * @details    This function is a hook for stack overflow.	 
 *******************************************************************************
 */
void CoStkOverflowHook(OS_TID taskID)
{
 801844a:	b480      	push	{r7}
 801844c:	b083      	sub	sp, #12
 801844e:	af00      	add	r7, sp, #0
 8018450:	4603      	mov	r3, r0
 8018452:	71fb      	strb	r3, [r7, #7]
    /* Process stack overflow  here */
    for(; ;) 
 8018454:	e7fe      	b.n	8018454 <CoStkOverflowHook+0xa>
	...

08018458 <CoCreateKheap>:
 * @par Description
 * @details    This function is called to create kernel heap.
 *******************************************************************************
 */
void CoCreateKheap(void)
{
 8018458:	b480      	push	{r7}
 801845a:	af00      	add	r7, sp, #0
    Kheap.startAddr  = (U32)(KernelHeap); /* Initialize kernel heap control   */
 801845c:	4a0e      	ldr	r2, [pc, #56]	; (8018498 <CoCreateKheap+0x40>)
 801845e:	4b0f      	ldr	r3, [pc, #60]	; (801849c <CoCreateKheap+0x44>)
 8018460:	601a      	str	r2, [r3, #0]
    Kheap.endAddr    = (U32)(KernelHeap) + KHEAP_SIZE*4;
 8018462:	4b0d      	ldr	r3, [pc, #52]	; (8018498 <CoCreateKheap+0x40>)
 8018464:	f503 431c 	add.w	r3, r3, #39936	; 0x9c00
 8018468:	3340      	adds	r3, #64	; 0x40
 801846a:	4a0c      	ldr	r2, [pc, #48]	; (801849c <CoCreateKheap+0x44>)
 801846c:	6053      	str	r3, [r2, #4]
    FMBlist          = (P_FMB)KernelHeap; /* Initialize free memory block list*/
 801846e:	4b0c      	ldr	r3, [pc, #48]	; (80184a0 <CoCreateKheap+0x48>)
 8018470:	4a09      	ldr	r2, [pc, #36]	; (8018498 <CoCreateKheap+0x40>)
 8018472:	601a      	str	r2, [r3, #0]
    FMBlist->nextFMB = Co_NULL;
 8018474:	4b0a      	ldr	r3, [pc, #40]	; (80184a0 <CoCreateKheap+0x48>)
 8018476:	681b      	ldr	r3, [r3, #0]
 8018478:	2200      	movs	r2, #0
 801847a:	601a      	str	r2, [r3, #0]
    FMBlist->nextUMB = Co_NULL;
 801847c:	4b08      	ldr	r3, [pc, #32]	; (80184a0 <CoCreateKheap+0x48>)
 801847e:	681b      	ldr	r3, [r3, #0]
 8018480:	2200      	movs	r2, #0
 8018482:	605a      	str	r2, [r3, #4]
    FMBlist->preUMB  = Co_NULL;
 8018484:	4b06      	ldr	r3, [pc, #24]	; (80184a0 <CoCreateKheap+0x48>)
 8018486:	681b      	ldr	r3, [r3, #0]
 8018488:	2200      	movs	r2, #0
 801848a:	609a      	str	r2, [r3, #8]
}
 801848c:	bf00      	nop
 801848e:	46bd      	mov	sp, r7
 8018490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018494:	4770      	bx	lr
 8018496:	bf00      	nop
 8018498:	200038a4 	.word	0x200038a4
 801849c:	2000d4e8 	.word	0x2000d4e8
 80184a0:	2000d4e4 	.word	0x2000d4e4

080184a4 <CoKmalloc>:
 * @par Description
 * @details    This function is called to allocation size bytes of memory block.
 *******************************************************************************
 */
void* CoKmalloc(U32 size)
{
 80184a4:	b580      	push	{r7, lr}
 80184a6:	b08a      	sub	sp, #40	; 0x28
 80184a8:	af00      	add	r7, sp, #0
 80184aa:	6078      	str	r0, [r7, #4]
    U8*   memAddr;
    U32   freeSize;
    U32   kheapAddr;
    
#if CFG_PAR_CHECKOUT_EN >0              /* Check validity of parameter        */
    if( size == 0 )
 80184ac:	687b      	ldr	r3, [r7, #4]
 80184ae:	2b00      	cmp	r3, #0
 80184b0:	d101      	bne.n	80184b6 <CoKmalloc+0x12>
    {
        return Co_NULL;
 80184b2:	2300      	movs	r3, #0
 80184b4:	e0a2      	b.n	80185fc <CoKmalloc+0x158>
    }
#endif

    /* Word alignment,and add used memory head size */
    size      = (((size+3)>>2)<<2) + 8;
 80184b6:	687b      	ldr	r3, [r7, #4]
 80184b8:	3303      	adds	r3, #3
 80184ba:	f023 0303 	bic.w	r3, r3, #3
 80184be:	3308      	adds	r3, #8
 80184c0:	607b      	str	r3, [r7, #4]
    kheapAddr = Kheap.endAddr;        /* Get the end address of kernel heap   */
 80184c2:	4b50      	ldr	r3, [pc, #320]	; (8018604 <CoKmalloc+0x160>)
 80184c4:	685b      	ldr	r3, [r3, #4]
 80184c6:	61bb      	str	r3, [r7, #24]
    OsSchedLock();                    /* Lock schedule                        */
 80184c8:	4b4f      	ldr	r3, [pc, #316]	; (8018608 <CoKmalloc+0x164>)
 80184ca:	781b      	ldrb	r3, [r3, #0]
 80184cc:	b2db      	uxtb	r3, r3
 80184ce:	3301      	adds	r3, #1
 80184d0:	b2da      	uxtb	r2, r3
 80184d2:	4b4d      	ldr	r3, [pc, #308]	; (8018608 <CoKmalloc+0x164>)
 80184d4:	701a      	strb	r2, [r3, #0]
    freeMB = FMBlist;                 /* Get first item of free memory list   */
 80184d6:	4b4d      	ldr	r3, [pc, #308]	; (801860c <CoKmalloc+0x168>)
 80184d8:	681b      	ldr	r3, [r3, #0]
 80184da:	627b      	str	r3, [r7, #36]	; 0x24
    preFMB = Co_NULL;
 80184dc:	2300      	movs	r3, #0
 80184de:	623b      	str	r3, [r7, #32]
    while(freeMB != Co_NULL )            /* Is out of free memory list?          */
 80184e0:	e085      	b.n	80185ee <CoKmalloc+0x14a>
    {                                 /* No                                   */
        if(freeMB->nextUMB == Co_NULL)   /* Is last item of free memory list?    */
 80184e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80184e4:	685b      	ldr	r3, [r3, #4]
 80184e6:	2b00      	cmp	r3, #0
 80184e8:	d104      	bne.n	80184f4 <CoKmalloc+0x50>
        {                             /* Yes,get size for this free item      */
            freeSize = kheapAddr - (U32)(freeMB);
 80184ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80184ec:	69ba      	ldr	r2, [r7, #24]
 80184ee:	1ad3      	subs	r3, r2, r3
 80184f0:	61fb      	str	r3, [r7, #28]
 80184f2:	e006      	b.n	8018502 <CoKmalloc+0x5e>
        }
        else                          /* No,get size for this free item       */
        {							   
            freeSize = (U32)(freeMB->nextUMB) -1 - (U32)(freeMB);	
 80184f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80184f6:	685b      	ldr	r3, [r3, #4]
 80184f8:	461a      	mov	r2, r3
 80184fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80184fc:	1ad3      	subs	r3, r2, r3
 80184fe:	3b01      	subs	r3, #1
 8018500:	61fb      	str	r3, [r7, #28]
        }
        if(freeSize >= size)        /* If the size equal or greater than need */
 8018502:	69fa      	ldr	r2, [r7, #28]
 8018504:	687b      	ldr	r3, [r7, #4]
 8018506:	429a      	cmp	r2, r3
 8018508:	d36c      	bcc.n	80185e4 <CoKmalloc+0x140>
        {                           /* Yes,assign in this free memory         */
            usedMB=(P_UMB)freeMB;/* Get the address for used memory block head*/
 801850a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801850c:	617b      	str	r3, [r7, #20]
            
            /* Get the address for used memory block                          */
            memAddr = (U8*)((U32)(usedMB) + 8);	
 801850e:	697b      	ldr	r3, [r7, #20]
 8018510:	3308      	adds	r3, #8
 8018512:	613b      	str	r3, [r7, #16]
            
            /* Is left size of free memory smaller than 12?                   */	 
            if((freeSize-size) < 12)	 
 8018514:	69fa      	ldr	r2, [r7, #28]
 8018516:	687b      	ldr	r3, [r7, #4]
 8018518:	1ad3      	subs	r3, r2, r3
 801851a:	2b0b      	cmp	r3, #11
 801851c:	d822      	bhi.n	8018564 <CoKmalloc+0xc0>
            {		
                /* Yes,malloc together(12 is the size of the header information 
                   of free memory block ).                                    */
                if(preFMB != Co_NULL)/* Is first item of free memory block list? */
 801851e:	6a3b      	ldr	r3, [r7, #32]
 8018520:	2b00      	cmp	r3, #0
 8018522:	d004      	beq.n	801852e <CoKmalloc+0x8a>
                {                             /* No,set the link for list     */
                    preFMB->nextFMB = freeMB->nextFMB;
 8018524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018526:	681a      	ldr	r2, [r3, #0]
 8018528:	6a3b      	ldr	r3, [r7, #32]
 801852a:	601a      	str	r2, [r3, #0]
 801852c:	e003      	b.n	8018536 <CoKmalloc+0x92>
                }
                else                          /* Yes,reset the first item     */
                {						
                    FMBlist = freeMB->nextFMB;		
 801852e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018530:	681b      	ldr	r3, [r3, #0]
 8018532:	4a36      	ldr	r2, [pc, #216]	; (801860c <CoKmalloc+0x168>)
 8018534:	6013      	str	r3, [r2, #0]
                }
                
                if(freeMB->nextUMB != Co_NULL)   /* Is last item?                */
 8018536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018538:	685b      	ldr	r3, [r3, #4]
 801853a:	2b00      	cmp	r3, #0
 801853c:	d009      	beq.n	8018552 <CoKmalloc+0xae>
                {                             /* No,set the link for list     */
                    tmpUMB = (P_UMB)((U32)(freeMB->nextUMB)-1); 
 801853e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018540:	685b      	ldr	r3, [r3, #4]
 8018542:	3b01      	subs	r3, #1
 8018544:	60bb      	str	r3, [r7, #8]
                    tmpUMB->preMB = (void*)((U32)usedMB|0x1);
 8018546:	697b      	ldr	r3, [r7, #20]
 8018548:	f043 0301 	orr.w	r3, r3, #1
 801854c:	461a      	mov	r2, r3
 801854e:	68bb      	ldr	r3, [r7, #8]
 8018550:	605a      	str	r2, [r3, #4]
                }
                
                usedMB->nextMB = freeMB->nextUMB;/* Set used memory block link*/
 8018552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018554:	685a      	ldr	r2, [r3, #4]
 8018556:	697b      	ldr	r3, [r7, #20]
 8018558:	601a      	str	r2, [r3, #0]
                usedMB->preMB  = freeMB->preUMB;
 801855a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801855c:	689a      	ldr	r2, [r3, #8]
 801855e:	697b      	ldr	r3, [r7, #20]
 8018560:	605a      	str	r2, [r3, #4]
 8018562:	e02d      	b.n	80185c0 <CoKmalloc+0x11c>
            }
            else                            /* No,the left size more than 12  */
            {		
                /* Get new free memory block address                          */
                newFMB = (P_FMB)((U32)(freeMB) + size);
 8018564:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018566:	687b      	ldr	r3, [r7, #4]
 8018568:	4413      	add	r3, r2
 801856a:	60fb      	str	r3, [r7, #12]
                
                if(preFMB != Co_NULL)/* Is first item of free memory block list? */
 801856c:	6a3b      	ldr	r3, [r7, #32]
 801856e:	2b00      	cmp	r3, #0
 8018570:	d003      	beq.n	801857a <CoKmalloc+0xd6>
                {						
                    preFMB->nextFMB = newFMB; /* No,set the link for list     */		
 8018572:	6a3b      	ldr	r3, [r7, #32]
 8018574:	68fa      	ldr	r2, [r7, #12]
 8018576:	601a      	str	r2, [r3, #0]
 8018578:	e002      	b.n	8018580 <CoKmalloc+0xdc>
                }	
                else
                {					    
                    FMBlist = newFMB;         /* Yes,reset the first item     */	
 801857a:	4a24      	ldr	r2, [pc, #144]	; (801860c <CoKmalloc+0x168>)
 801857c:	68fb      	ldr	r3, [r7, #12]
 801857e:	6013      	str	r3, [r2, #0]
                }
                
                /* Set link for new free memory block                         */
                newFMB->preUMB  = (P_UMB)((U32)usedMB|0x1);
 8018580:	697b      	ldr	r3, [r7, #20]
 8018582:	f043 0301 	orr.w	r3, r3, #1
 8018586:	461a      	mov	r2, r3
 8018588:	68fb      	ldr	r3, [r7, #12]
 801858a:	609a      	str	r2, [r3, #8]
                newFMB->nextUMB = freeMB->nextUMB;
 801858c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801858e:	685a      	ldr	r2, [r3, #4]
 8018590:	68fb      	ldr	r3, [r7, #12]
 8018592:	605a      	str	r2, [r3, #4]
                newFMB->nextFMB = freeMB->nextFMB;
 8018594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018596:	681a      	ldr	r2, [r3, #0]
 8018598:	68fb      	ldr	r3, [r7, #12]
 801859a:	601a      	str	r2, [r3, #0]
                
                if(freeMB->nextUMB != Co_NULL) /* Is last item?                  */
 801859c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801859e:	685b      	ldr	r3, [r3, #4]
 80185a0:	2b00      	cmp	r3, #0
 80185a2:	d006      	beq.n	80185b2 <CoKmalloc+0x10e>
                {                           /* No,set the link for list       */
                    tmpUMB = (P_UMB)((U32)(freeMB->nextUMB)-1); 
 80185a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80185a6:	685b      	ldr	r3, [r3, #4]
 80185a8:	3b01      	subs	r3, #1
 80185aa:	60bb      	str	r3, [r7, #8]
                    tmpUMB->preMB = newFMB;
 80185ac:	68bb      	ldr	r3, [r7, #8]
 80185ae:	68fa      	ldr	r2, [r7, #12]
 80185b0:	605a      	str	r2, [r3, #4]
                }
                
                usedMB->nextMB = newFMB;    /* Set used memory block link     */
 80185b2:	697b      	ldr	r3, [r7, #20]
 80185b4:	68fa      	ldr	r2, [r7, #12]
 80185b6:	601a      	str	r2, [r3, #0]
                usedMB->preMB  = freeMB->preUMB;
 80185b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80185ba:	689a      	ldr	r2, [r3, #8]
 80185bc:	697b      	ldr	r3, [r7, #20]
 80185be:	605a      	str	r2, [r3, #4]
            }
          
            if(freeMB->preUMB != Co_NULL)      /* Is first item?                 */
 80185c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80185c2:	689b      	ldr	r3, [r3, #8]
 80185c4:	2b00      	cmp	r3, #0
 80185c6:	d009      	beq.n	80185dc <CoKmalloc+0x138>
            {                               /* No,set the link for list       */
                tmpUMB = (P_UMB)((U32)(freeMB->preUMB)-1); 
 80185c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80185ca:	689b      	ldr	r3, [r3, #8]
 80185cc:	3b01      	subs	r3, #1
 80185ce:	60bb      	str	r3, [r7, #8]
                tmpUMB->nextMB = (void*)((U32)usedMB|0x1);
 80185d0:	697b      	ldr	r3, [r7, #20]
 80185d2:	f043 0301 	orr.w	r3, r3, #1
 80185d6:	461a      	mov	r2, r3
 80185d8:	68bb      	ldr	r3, [r7, #8]
 80185da:	601a      	str	r2, [r3, #0]
            }
          
            OsSchedUnlock();              /* Unlock schedule                  */
 80185dc:	f7fe ffec 	bl	80175b8 <OsSchedUnlock>
            return memAddr;               /* Return used memory block address */
 80185e0:	693b      	ldr	r3, [r7, #16]
 80185e2:	e00b      	b.n	80185fc <CoKmalloc+0x158>
        }
        preFMB = freeMB;        /* Save current free memory block as previous */
 80185e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80185e6:	623b      	str	r3, [r7, #32]
        freeMB = freeMB->nextFMB;         /* Get the next item as current item*/
 80185e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80185ea:	681b      	ldr	r3, [r3, #0]
 80185ec:	627b      	str	r3, [r7, #36]	; 0x24
    while(freeMB != Co_NULL )            /* Is out of free memory list?          */
 80185ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80185f0:	2b00      	cmp	r3, #0
 80185f2:	f47f af76 	bne.w	80184e2 <CoKmalloc+0x3e>
    }
    OsSchedUnlock();                      /* Unlock schedule                  */
 80185f6:	f7fe ffdf 	bl	80175b8 <OsSchedUnlock>
    return Co_NULL;                          /* Error return                     */
 80185fa:	2300      	movs	r3, #0
}
 80185fc:	4618      	mov	r0, r3
 80185fe:	3728      	adds	r7, #40	; 0x28
 8018600:	46bd      	mov	sp, r7
 8018602:	bd80      	pop	{r7, pc}
 8018604:	2000d4e8 	.word	0x2000d4e8
 8018608:	20003749 	.word	0x20003749
 801860c:	2000d4e4 	.word	0x2000d4e4

08018610 <CoKfree>:
 * @par Description
 * @details    This function is called to release memory block.
 *******************************************************************************
 */
void CoKfree(void* memBuf)
{
 8018610:	b580      	push	{r7, lr}
 8018612:	b088      	sub	sp, #32
 8018614:	af00      	add	r7, sp, #0
 8018616:	6078      	str	r0, [r7, #4]
    P_FMB    curFMB,nextFMB,preFMB;
    P_UMB    usedMB,nextUMB,preUMB;

#if CFG_PAR_CHECKOUT_EN >0              /* Check validity of parameter        */
    if(memBuf == Co_NULL)
 8018618:	687b      	ldr	r3, [r7, #4]
 801861a:	2b00      	cmp	r3, #0
 801861c:	f000 815e 	beq.w	80188dc <CoKfree+0x2cc>
    {
        return;
    }
#endif
    
    usedMB = (P_UMB)((U32)(memBuf)-8);
 8018620:	687b      	ldr	r3, [r7, #4]
 8018622:	3b08      	subs	r3, #8
 8018624:	60fb      	str	r3, [r7, #12]
    
#if CFG_PAR_CHECKOUT_EN >0              /* Check validity of parameter        */
    if((U32)(memBuf) < Kheap.startAddr)
 8018626:	4b8b      	ldr	r3, [pc, #556]	; (8018854 <CoKfree+0x244>)
 8018628:	681a      	ldr	r2, [r3, #0]
 801862a:	687b      	ldr	r3, [r7, #4]
 801862c:	429a      	cmp	r2, r3
 801862e:	f200 8157 	bhi.w	80188e0 <CoKfree+0x2d0>
    {
        return;
    }
    if((U32)(memBuf) > Kheap.endAddr)
 8018632:	4b88      	ldr	r3, [pc, #544]	; (8018854 <CoKfree+0x244>)
 8018634:	685a      	ldr	r2, [r3, #4]
 8018636:	687b      	ldr	r3, [r7, #4]
 8018638:	429a      	cmp	r2, r3
 801863a:	f0c0 8153 	bcc.w	80188e4 <CoKfree+0x2d4>
        return;
    }
#endif
    
    
    OsSchedLock();                      /* Lock schedule                      */
 801863e:	4b86      	ldr	r3, [pc, #536]	; (8018858 <CoKfree+0x248>)
 8018640:	781b      	ldrb	r3, [r3, #0]
 8018642:	b2db      	uxtb	r3, r3
 8018644:	3301      	adds	r3, #1
 8018646:	b2da      	uxtb	r2, r3
 8018648:	4b83      	ldr	r3, [pc, #524]	; (8018858 <CoKfree+0x248>)
 801864a:	701a      	strb	r2, [r3, #0]

#if CFG_PAR_CHECKOUT_EN >0              /* Check UMB in list                  */ 
    if((U32)(usedMB) < (U32)(FMBlist))
 801864c:	68fb      	ldr	r3, [r7, #12]
 801864e:	4a83      	ldr	r2, [pc, #524]	; (801885c <CoKfree+0x24c>)
 8018650:	6812      	ldr	r2, [r2, #0]
 8018652:	4293      	cmp	r3, r2
 8018654:	d214      	bcs.n	8018680 <CoKfree+0x70>
    {
        preUMB = (P_UMB)((U32)(FMBlist->preUMB)-1);
 8018656:	4b81      	ldr	r3, [pc, #516]	; (801885c <CoKfree+0x24c>)
 8018658:	681b      	ldr	r3, [r3, #0]
 801865a:	689b      	ldr	r3, [r3, #8]
 801865c:	3b01      	subs	r3, #1
 801865e:	613b      	str	r3, [r7, #16]
        while(preUMB != usedMB)	
 8018660:	e009      	b.n	8018676 <CoKfree+0x66>
        {
            if(preUMB == Co_NULL)
 8018662:	693b      	ldr	r3, [r7, #16]
 8018664:	2b00      	cmp	r3, #0
 8018666:	d102      	bne.n	801866e <CoKfree+0x5e>
            {
                OsSchedUnlock();
 8018668:	f7fe ffa6 	bl	80175b8 <OsSchedUnlock>
                return;
 801866c:	e13b      	b.n	80188e6 <CoKfree+0x2d6>
            }
            preUMB = (P_UMB)((U32)(preUMB->preMB)-1);	
 801866e:	693b      	ldr	r3, [r7, #16]
 8018670:	685b      	ldr	r3, [r3, #4]
 8018672:	3b01      	subs	r3, #1
 8018674:	613b      	str	r3, [r7, #16]
        while(preUMB != usedMB)	
 8018676:	693a      	ldr	r2, [r7, #16]
 8018678:	68fb      	ldr	r3, [r7, #12]
 801867a:	429a      	cmp	r2, r3
 801867c:	d1f1      	bne.n	8018662 <CoKfree+0x52>
 801867e:	e031      	b.n	80186e4 <CoKfree+0xd4>
        }
    }
    else
    {
        if(FMBlist == Co_NULL)
 8018680:	4b76      	ldr	r3, [pc, #472]	; (801885c <CoKfree+0x24c>)
 8018682:	681b      	ldr	r3, [r3, #0]
 8018684:	2b00      	cmp	r3, #0
 8018686:	d103      	bne.n	8018690 <CoKfree+0x80>
        {
            nextUMB = (P_UMB)(Kheap.startAddr);	
 8018688:	4b72      	ldr	r3, [pc, #456]	; (8018854 <CoKfree+0x244>)
 801868a:	681b      	ldr	r3, [r3, #0]
 801868c:	617b      	str	r3, [r7, #20]
 801868e:	e025      	b.n	80186dc <CoKfree+0xcc>
        }
        else
        {
            if(FMBlist->nextUMB != Co_NULL)
 8018690:	4b72      	ldr	r3, [pc, #456]	; (801885c <CoKfree+0x24c>)
 8018692:	681b      	ldr	r3, [r3, #0]
 8018694:	685b      	ldr	r3, [r3, #4]
 8018696:	2b00      	cmp	r3, #0
 8018698:	d005      	beq.n	80186a6 <CoKfree+0x96>
            {
                nextUMB = (P_UMB)((U32)(FMBlist->nextUMB)-1);	
 801869a:	4b70      	ldr	r3, [pc, #448]	; (801885c <CoKfree+0x24c>)
 801869c:	681b      	ldr	r3, [r3, #0]
 801869e:	685b      	ldr	r3, [r3, #4]
 80186a0:	3b01      	subs	r3, #1
 80186a2:	617b      	str	r3, [r7, #20]
 80186a4:	e01a      	b.n	80186dc <CoKfree+0xcc>
            }
            else
            {
                nextUMB = Co_NULL;
 80186a6:	2300      	movs	r3, #0
 80186a8:	617b      	str	r3, [r7, #20]
            }
        }
    	
        while(nextUMB != usedMB)	
 80186aa:	e017      	b.n	80186dc <CoKfree+0xcc>
        {
            if(nextUMB == Co_NULL)
 80186ac:	697b      	ldr	r3, [r7, #20]
 80186ae:	2b00      	cmp	r3, #0
 80186b0:	d102      	bne.n	80186b8 <CoKfree+0xa8>
            {
                OsSchedUnlock();
 80186b2:	f7fe ff81 	bl	80175b8 <OsSchedUnlock>
                return;
 80186b6:	e116      	b.n	80188e6 <CoKfree+0x2d6>
            }	
            if(((U32)(nextUMB->nextMB)&0x1) == 0)		
 80186b8:	697b      	ldr	r3, [r7, #20]
 80186ba:	681b      	ldr	r3, [r3, #0]
 80186bc:	f003 0301 	and.w	r3, r3, #1
 80186c0:	2b00      	cmp	r3, #0
 80186c2:	d107      	bne.n	80186d4 <CoKfree+0xc4>
            {
                nextFMB = (P_FMB)(nextUMB->nextMB);
 80186c4:	697b      	ldr	r3, [r7, #20]
 80186c6:	681b      	ldr	r3, [r3, #0]
 80186c8:	61bb      	str	r3, [r7, #24]
                nextUMB = (P_UMB)((U32)(nextFMB->nextUMB)-1);		
 80186ca:	69bb      	ldr	r3, [r7, #24]
 80186cc:	685b      	ldr	r3, [r3, #4]
 80186ce:	3b01      	subs	r3, #1
 80186d0:	617b      	str	r3, [r7, #20]
 80186d2:	e003      	b.n	80186dc <CoKfree+0xcc>
            }
            else
            {
                nextUMB = (P_UMB)((U32)(nextUMB->nextMB)-1);	
 80186d4:	697b      	ldr	r3, [r7, #20]
 80186d6:	681b      	ldr	r3, [r3, #0]
 80186d8:	3b01      	subs	r3, #1
 80186da:	617b      	str	r3, [r7, #20]
        while(nextUMB != usedMB)	
 80186dc:	697a      	ldr	r2, [r7, #20]
 80186de:	68fb      	ldr	r3, [r7, #12]
 80186e0:	429a      	cmp	r2, r3
 80186e2:	d1e3      	bne.n	80186ac <CoKfree+0x9c>
    }
#endif
    
    
    /* Is between two free memory block? */	 
    if( (((U32)(usedMB->nextMB)&0x1) == 0) && (((U32)(usedMB->preMB)&0x1)==0) )	
 80186e4:	68fb      	ldr	r3, [r7, #12]
 80186e6:	681b      	ldr	r3, [r3, #0]
 80186e8:	f003 0301 	and.w	r3, r3, #1
 80186ec:	2b00      	cmp	r3, #0
 80186ee:	d151      	bne.n	8018794 <CoKfree+0x184>
 80186f0:	68fb      	ldr	r3, [r7, #12]
 80186f2:	685b      	ldr	r3, [r3, #4]
 80186f4:	f003 0301 	and.w	r3, r3, #1
 80186f8:	2b00      	cmp	r3, #0
 80186fa:	d14b      	bne.n	8018794 <CoKfree+0x184>
    {                             /* Yes,is the only one item in kernel heap? */
        if((usedMB->nextMB == Co_NULL) && (usedMB->preMB == Co_NULL))
 80186fc:	68fb      	ldr	r3, [r7, #12]
 80186fe:	681b      	ldr	r3, [r3, #0]
 8018700:	2b00      	cmp	r3, #0
 8018702:	d112      	bne.n	801872a <CoKfree+0x11a>
 8018704:	68fb      	ldr	r3, [r7, #12]
 8018706:	685b      	ldr	r3, [r3, #4]
 8018708:	2b00      	cmp	r3, #0
 801870a:	d10e      	bne.n	801872a <CoKfree+0x11a>
        {
            curFMB = (P_FMB)usedMB;       /* Yes,release this item            */
 801870c:	68fb      	ldr	r3, [r7, #12]
 801870e:	61fb      	str	r3, [r7, #28]
            curFMB->nextFMB = Co_NULL;
 8018710:	69fb      	ldr	r3, [r7, #28]
 8018712:	2200      	movs	r2, #0
 8018714:	601a      	str	r2, [r3, #0]
            curFMB->nextUMB = Co_NULL;
 8018716:	69fb      	ldr	r3, [r7, #28]
 8018718:	2200      	movs	r2, #0
 801871a:	605a      	str	r2, [r3, #4]
            curFMB->preUMB  = Co_NULL;
 801871c:	69fb      	ldr	r3, [r7, #28]
 801871e:	2200      	movs	r2, #0
 8018720:	609a      	str	r2, [r3, #8]
            FMBlist = curFMB;	
 8018722:	4a4e      	ldr	r2, [pc, #312]	; (801885c <CoKfree+0x24c>)
 8018724:	69fb      	ldr	r3, [r7, #28]
 8018726:	6013      	str	r3, [r2, #0]
        if((usedMB->nextMB == Co_NULL) && (usedMB->preMB == Co_NULL))
 8018728:	e0bf      	b.n	80188aa <CoKfree+0x29a>
        }
        else if(usedMB->preMB == Co_NULL)    /* Is the first item in kernel heap */
 801872a:	68fb      	ldr	r3, [r7, #12]
 801872c:	685b      	ldr	r3, [r3, #4]
 801872e:	2b00      	cmp	r3, #0
 8018730:	d113      	bne.n	801875a <CoKfree+0x14a>
        {		
            /* Yes,release this item,and set link for list                    */						
            curFMB  = (P_FMB)usedMB; 
 8018732:	68fb      	ldr	r3, [r7, #12]
 8018734:	61fb      	str	r3, [r7, #28]
            nextFMB = (P_FMB)usedMB->nextMB;
 8018736:	68fb      	ldr	r3, [r7, #12]
 8018738:	681b      	ldr	r3, [r3, #0]
 801873a:	61bb      	str	r3, [r7, #24]
            
            curFMB->nextFMB = nextFMB->nextFMB;	
 801873c:	69bb      	ldr	r3, [r7, #24]
 801873e:	681a      	ldr	r2, [r3, #0]
 8018740:	69fb      	ldr	r3, [r7, #28]
 8018742:	601a      	str	r2, [r3, #0]
            curFMB->nextUMB = nextFMB->nextUMB;
 8018744:	69bb      	ldr	r3, [r7, #24]
 8018746:	685a      	ldr	r2, [r3, #4]
 8018748:	69fb      	ldr	r3, [r7, #28]
 801874a:	605a      	str	r2, [r3, #4]
            curFMB->preUMB  = Co_NULL;
 801874c:	69fb      	ldr	r3, [r7, #28]
 801874e:	2200      	movs	r2, #0
 8018750:	609a      	str	r2, [r3, #8]
            FMBlist         = curFMB;
 8018752:	4a42      	ldr	r2, [pc, #264]	; (801885c <CoKfree+0x24c>)
 8018754:	69fb      	ldr	r3, [r7, #28]
 8018756:	6013      	str	r3, [r2, #0]
        if((usedMB->nextMB == Co_NULL) && (usedMB->preMB == Co_NULL))
 8018758:	e0a7      	b.n	80188aa <CoKfree+0x29a>
        }
        else if(usedMB->nextMB == Co_NULL)   /* Is the last item in kernel heap  */
 801875a:	68fb      	ldr	r3, [r7, #12]
 801875c:	681b      	ldr	r3, [r3, #0]
 801875e:	2b00      	cmp	r3, #0
 8018760:	d109      	bne.n	8018776 <CoKfree+0x166>
        {                      /* Yes,release this item,and set link for list */
            curFMB = (P_FMB)(usedMB->preMB);	
 8018762:	68fb      	ldr	r3, [r7, #12]
 8018764:	685b      	ldr	r3, [r3, #4]
 8018766:	61fb      	str	r3, [r7, #28]
            curFMB->nextFMB = Co_NULL;
 8018768:	69fb      	ldr	r3, [r7, #28]
 801876a:	2200      	movs	r2, #0
 801876c:	601a      	str	r2, [r3, #0]
            curFMB->nextUMB = Co_NULL;
 801876e:	69fb      	ldr	r3, [r7, #28]
 8018770:	2200      	movs	r2, #0
 8018772:	605a      	str	r2, [r3, #4]
        if((usedMB->nextMB == Co_NULL) && (usedMB->preMB == Co_NULL))
 8018774:	e099      	b.n	80188aa <CoKfree+0x29a>
        }							    
        else                  /* All no,show this item between two normal FMB */
        {		
            /* release this item,and set link for list                        */						  
            nextFMB = (P_FMB)usedMB->nextMB;
 8018776:	68fb      	ldr	r3, [r7, #12]
 8018778:	681b      	ldr	r3, [r3, #0]
 801877a:	61bb      	str	r3, [r7, #24]
            curFMB  = (P_FMB)(usedMB->preMB);	
 801877c:	68fb      	ldr	r3, [r7, #12]
 801877e:	685b      	ldr	r3, [r3, #4]
 8018780:	61fb      	str	r3, [r7, #28]
            
            curFMB->nextFMB = nextFMB->nextFMB;
 8018782:	69bb      	ldr	r3, [r7, #24]
 8018784:	681a      	ldr	r2, [r3, #0]
 8018786:	69fb      	ldr	r3, [r7, #28]
 8018788:	601a      	str	r2, [r3, #0]
            curFMB->nextUMB = nextFMB->nextUMB;
 801878a:	69bb      	ldr	r3, [r7, #24]
 801878c:	685a      	ldr	r2, [r3, #4]
 801878e:	69fb      	ldr	r3, [r7, #28]
 8018790:	605a      	str	r2, [r3, #4]
        if((usedMB->nextMB == Co_NULL) && (usedMB->preMB == Co_NULL))
 8018792:	e08a      	b.n	80188aa <CoKfree+0x29a>
        }
    }
    else if(((U32)(usedMB->preMB)&0x1) == 0)  /* Is between FMB and UMB?      */
 8018794:	68fb      	ldr	r3, [r7, #12]
 8018796:	685b      	ldr	r3, [r3, #4]
 8018798:	f003 0301 	and.w	r3, r3, #1
 801879c:	2b00      	cmp	r3, #0
 801879e:	d120      	bne.n	80187e2 <CoKfree+0x1d2>
    {								   
        if(usedMB->preMB == Co_NULL)   /* Yes,is the first item in kernel heap?  */
 80187a0:	68fb      	ldr	r3, [r7, #12]
 80187a2:	685b      	ldr	r3, [r3, #4]
 80187a4:	2b00      	cmp	r3, #0
 80187a6:	d112      	bne.n	80187ce <CoKfree+0x1be>
        {
            /* Yes,release this item,and set link for list                    */
            curFMB          = (P_FMB)usedMB;      
 80187a8:	68fb      	ldr	r3, [r7, #12]
 80187aa:	61fb      	str	r3, [r7, #28]
            nextUMB         = (P_UMB)usedMB->nextMB;		
 80187ac:	68fb      	ldr	r3, [r7, #12]
 80187ae:	681b      	ldr	r3, [r3, #0]
 80187b0:	617b      	str	r3, [r7, #20]
            curFMB->nextUMB = nextUMB;
 80187b2:	69fb      	ldr	r3, [r7, #28]
 80187b4:	697a      	ldr	r2, [r7, #20]
 80187b6:	605a      	str	r2, [r3, #4]
            curFMB->preUMB  = Co_NULL;
 80187b8:	69fb      	ldr	r3, [r7, #28]
 80187ba:	2200      	movs	r2, #0
 80187bc:	609a      	str	r2, [r3, #8]
            curFMB->nextFMB = FMBlist;
 80187be:	4b27      	ldr	r3, [pc, #156]	; (801885c <CoKfree+0x24c>)
 80187c0:	681a      	ldr	r2, [r3, #0]
 80187c2:	69fb      	ldr	r3, [r7, #28]
 80187c4:	601a      	str	r2, [r3, #0]
            FMBlist         = curFMB;
 80187c6:	4a25      	ldr	r2, [pc, #148]	; (801885c <CoKfree+0x24c>)
 80187c8:	69fb      	ldr	r3, [r7, #28]
 80187ca:	6013      	str	r3, [r2, #0]
 80187cc:	e06d      	b.n	80188aa <CoKfree+0x29a>
        }
        else                    /* No,release this item,and set link for list */
        {							      
            curFMB          = (P_FMB)usedMB->preMB;
 80187ce:	68fb      	ldr	r3, [r7, #12]
 80187d0:	685b      	ldr	r3, [r3, #4]
 80187d2:	61fb      	str	r3, [r7, #28]
            nextUMB         = (P_UMB)usedMB->nextMB;
 80187d4:	68fb      	ldr	r3, [r7, #12]
 80187d6:	681b      	ldr	r3, [r3, #0]
 80187d8:	617b      	str	r3, [r7, #20]
            curFMB->nextUMB = nextUMB;
 80187da:	69fb      	ldr	r3, [r7, #28]
 80187dc:	697a      	ldr	r2, [r7, #20]
 80187de:	605a      	str	r2, [r3, #4]
 80187e0:	e063      	b.n	80188aa <CoKfree+0x29a>
        }
    
    }
    else if(((U32)(usedMB->nextMB)&0x1) == 0)   /* Is between UMB and FMB?    */
 80187e2:	68fb      	ldr	r3, [r7, #12]
 80187e4:	681b      	ldr	r3, [r3, #0]
 80187e6:	f003 0301 	and.w	r3, r3, #1
 80187ea:	2b00      	cmp	r3, #0
 80187ec:	d138      	bne.n	8018860 <CoKfree+0x250>
    {                                           /* Yes                        */
        preUMB = (P_UMB)(usedMB->preMB);        /* Get previous UMB           */
 80187ee:	68fb      	ldr	r3, [r7, #12]
 80187f0:	685b      	ldr	r3, [r3, #4]
 80187f2:	613b      	str	r3, [r7, #16]
        curFMB = (P_FMB)(usedMB);               /* new FMB                    */
 80187f4:	68fb      	ldr	r3, [r7, #12]
 80187f6:	61fb      	str	r3, [r7, #28]
        preFMB = GetPreFMB(usedMB);             /* Get previous FMB           */
 80187f8:	68f8      	ldr	r0, [r7, #12]
 80187fa:	f000 f879 	bl	80188f0 <GetPreFMB>
 80187fe:	60b8      	str	r0, [r7, #8]
        if(preFMB == Co_NULL)                      /* Is previous FMB==Co_NULL?     */
 8018800:	68bb      	ldr	r3, [r7, #8]
 8018802:	2b00      	cmp	r3, #0
 8018804:	d106      	bne.n	8018814 <CoKfree+0x204>
        {	
            nextFMB = FMBlist;                  /* Yes,get next FMB           */ 
 8018806:	4b15      	ldr	r3, [pc, #84]	; (801885c <CoKfree+0x24c>)
 8018808:	681b      	ldr	r3, [r3, #0]
 801880a:	61bb      	str	r3, [r7, #24]
            FMBlist = curFMB;   /* Reset new FMB as the first item of FMB list*/
 801880c:	4a13      	ldr	r2, [pc, #76]	; (801885c <CoKfree+0x24c>)
 801880e:	69fb      	ldr	r3, [r7, #28]
 8018810:	6013      	str	r3, [r2, #0]
 8018812:	e005      	b.n	8018820 <CoKfree+0x210>
        }
        else
        {
            nextFMB = preFMB->nextFMB;          /* No,get next FMB            */
 8018814:	68bb      	ldr	r3, [r7, #8]
 8018816:	681b      	ldr	r3, [r3, #0]
 8018818:	61bb      	str	r3, [r7, #24]
            preFMB->nextFMB  = curFMB;          /* Set link for FMB list      */
 801881a:	68bb      	ldr	r3, [r7, #8]
 801881c:	69fa      	ldr	r2, [r7, #28]
 801881e:	601a      	str	r2, [r3, #0]
        }
        
        if(nextFMB == Co_NULL)           /* Is new FMB as last item of FMB list? */
 8018820:	69bb      	ldr	r3, [r7, #24]
 8018822:	2b00      	cmp	r3, #0
 8018824:	d109      	bne.n	801883a <CoKfree+0x22a>
        {	
            curFMB->preUMB  = preUMB;           /* Yes,set link for list      */
 8018826:	69fb      	ldr	r3, [r7, #28]
 8018828:	693a      	ldr	r2, [r7, #16]
 801882a:	609a      	str	r2, [r3, #8]
            curFMB->nextUMB = Co_NULL;
 801882c:	69fb      	ldr	r3, [r7, #28]
 801882e:	2200      	movs	r2, #0
 8018830:	605a      	str	r2, [r3, #4]
            curFMB->nextFMB = Co_NULL;
 8018832:	69fb      	ldr	r3, [r7, #28]
 8018834:	2200      	movs	r2, #0
 8018836:	601a      	str	r2, [r3, #0]
 8018838:	e037      	b.n	80188aa <CoKfree+0x29a>
        }	
        else
        {
            curFMB->preUMB  = preUMB;           /* No,set link for list       */
 801883a:	69fb      	ldr	r3, [r7, #28]
 801883c:	693a      	ldr	r2, [r7, #16]
 801883e:	609a      	str	r2, [r3, #8]
            curFMB->nextUMB = nextFMB->nextUMB;
 8018840:	69bb      	ldr	r3, [r7, #24]
 8018842:	685a      	ldr	r2, [r3, #4]
 8018844:	69fb      	ldr	r3, [r7, #28]
 8018846:	605a      	str	r2, [r3, #4]
            curFMB->nextFMB = nextFMB->nextFMB;	
 8018848:	69bb      	ldr	r3, [r7, #24]
 801884a:	681a      	ldr	r2, [r3, #0]
 801884c:	69fb      	ldr	r3, [r7, #28]
 801884e:	601a      	str	r2, [r3, #0]
 8018850:	e02b      	b.n	80188aa <CoKfree+0x29a>
 8018852:	bf00      	nop
 8018854:	2000d4e8 	.word	0x2000d4e8
 8018858:	20003749 	.word	0x20003749
 801885c:	2000d4e4 	.word	0x2000d4e4
        }
    }
    else                                    /* All no,show UMB between two UMB*/
    {									  
        curFMB  = (P_FMB)(usedMB);          /* new FMB                        */
 8018860:	68fb      	ldr	r3, [r7, #12]
 8018862:	61fb      	str	r3, [r7, #28]
        preFMB  = GetPreFMB(usedMB);        /* Get previous FMB               */
 8018864:	68f8      	ldr	r0, [r7, #12]
 8018866:	f000 f843 	bl	80188f0 <GetPreFMB>
 801886a:	60b8      	str	r0, [r7, #8]
        preUMB  = (P_UMB)(usedMB->preMB);   /* Get previous UMB               */
 801886c:	68fb      	ldr	r3, [r7, #12]
 801886e:	685b      	ldr	r3, [r3, #4]
 8018870:	613b      	str	r3, [r7, #16]
        nextUMB = (P_UMB)(usedMB->nextMB);  /* Get next UMB                   */
 8018872:	68fb      	ldr	r3, [r7, #12]
 8018874:	681b      	ldr	r3, [r3, #0]
 8018876:	617b      	str	r3, [r7, #20]
        
        if(preFMB == Co_NULL )                 /* Is previous FMB==Co_NULL?         */
 8018878:	68bb      	ldr	r3, [r7, #8]
 801887a:	2b00      	cmp	r3, #0
 801887c:	d106      	bne.n	801888c <CoKfree+0x27c>
        {
            nextFMB = FMBlist;              /* Yes,get next FMB               */
 801887e:	4b1b      	ldr	r3, [pc, #108]	; (80188ec <CoKfree+0x2dc>)
 8018880:	681b      	ldr	r3, [r3, #0]
 8018882:	61bb      	str	r3, [r7, #24]
            FMBlist = curFMB;  /* Reset new FMB as the first item of FMB list */
 8018884:	4a19      	ldr	r2, [pc, #100]	; (80188ec <CoKfree+0x2dc>)
 8018886:	69fb      	ldr	r3, [r7, #28]
 8018888:	6013      	str	r3, [r2, #0]
 801888a:	e005      	b.n	8018898 <CoKfree+0x288>
      	}
      	else
      	{
            nextFMB = preFMB->nextFMB;      /* No,get next FMB                */
 801888c:	68bb      	ldr	r3, [r7, #8]
 801888e:	681b      	ldr	r3, [r3, #0]
 8018890:	61bb      	str	r3, [r7, #24]
            preFMB->nextFMB = curFMB;       /* Set link for FMB list          */
 8018892:	68bb      	ldr	r3, [r7, #8]
 8018894:	69fa      	ldr	r2, [r7, #28]
 8018896:	601a      	str	r2, [r3, #0]
      	}
      	
        curFMB->preUMB  = preUMB;           /* Set current FMB link for list  */
 8018898:	69fb      	ldr	r3, [r7, #28]
 801889a:	693a      	ldr	r2, [r7, #16]
 801889c:	609a      	str	r2, [r3, #8]
        curFMB->nextUMB = nextUMB;
 801889e:	69fb      	ldr	r3, [r7, #28]
 80188a0:	697a      	ldr	r2, [r7, #20]
 80188a2:	605a      	str	r2, [r3, #4]
        curFMB->nextFMB = nextFMB;
 80188a4:	69fb      	ldr	r3, [r7, #28]
 80188a6:	69ba      	ldr	r2, [r7, #24]
 80188a8:	601a      	str	r2, [r3, #0]
    }
    
    if(curFMB->preUMB != Co_NULL)/* Is current FMB as first item in kernel heap? */
 80188aa:	69fb      	ldr	r3, [r7, #28]
 80188ac:	689b      	ldr	r3, [r3, #8]
 80188ae:	2b00      	cmp	r3, #0
 80188b0:	d006      	beq.n	80188c0 <CoKfree+0x2b0>
    {                         /* No,set link for list                         */
      	preUMB = (P_UMB)((U32)(curFMB->preUMB)-1); 
 80188b2:	69fb      	ldr	r3, [r7, #28]
 80188b4:	689b      	ldr	r3, [r3, #8]
 80188b6:	3b01      	subs	r3, #1
 80188b8:	613b      	str	r3, [r7, #16]
      	preUMB->nextMB = (void*)curFMB;
 80188ba:	693b      	ldr	r3, [r7, #16]
 80188bc:	69fa      	ldr	r2, [r7, #28]
 80188be:	601a      	str	r2, [r3, #0]
    }
    if(curFMB->nextUMB != Co_NULL)/* Is current FMB as last item in kernel heap? */
 80188c0:	69fb      	ldr	r3, [r7, #28]
 80188c2:	685b      	ldr	r3, [r3, #4]
 80188c4:	2b00      	cmp	r3, #0
 80188c6:	d006      	beq.n	80188d6 <CoKfree+0x2c6>
    {                          /* No,set link for list                        */
      	nextUMB = (P_UMB)((U32)(curFMB->nextUMB)-1); 
 80188c8:	69fb      	ldr	r3, [r7, #28]
 80188ca:	685b      	ldr	r3, [r3, #4]
 80188cc:	3b01      	subs	r3, #1
 80188ce:	617b      	str	r3, [r7, #20]
      	nextUMB->preMB = (void*)curFMB;		
 80188d0:	697b      	ldr	r3, [r7, #20]
 80188d2:	69fa      	ldr	r2, [r7, #28]
 80188d4:	605a      	str	r2, [r3, #4]
    }
    OsSchedUnlock();           /* Unlock schedule                             */
 80188d6:	f7fe fe6f 	bl	80175b8 <OsSchedUnlock>
 80188da:	e004      	b.n	80188e6 <CoKfree+0x2d6>
        return;
 80188dc:	bf00      	nop
 80188de:	e002      	b.n	80188e6 <CoKfree+0x2d6>
        return;
 80188e0:	bf00      	nop
 80188e2:	e000      	b.n	80188e6 <CoKfree+0x2d6>
        return;
 80188e4:	bf00      	nop
}
 80188e6:	3720      	adds	r7, #32
 80188e8:	46bd      	mov	sp, r7
 80188ea:	bd80      	pop	{r7, pc}
 80188ec:	2000d4e4 	.word	0x2000d4e4

080188f0 <GetPreFMB>:
 * @par Description
 * @details    This function is called to get previous free memory block pointer.
 *******************************************************************************
 */
static P_FMB GetPreFMB(P_UMB usedMB)
{
 80188f0:	b480      	push	{r7}
 80188f2:	b085      	sub	sp, #20
 80188f4:	af00      	add	r7, sp, #0
 80188f6:	6078      	str	r0, [r7, #4]
    P_UMB preUMB;
    preUMB = usedMB;
 80188f8:	687b      	ldr	r3, [r7, #4]
 80188fa:	60fb      	str	r3, [r7, #12]
    while(((U32)(preUMB->preMB)&0x1))   /* Is previous MB as FMB?             */
 80188fc:	e003      	b.n	8018906 <GetPreFMB+0x16>
    {                                   /* No,get previous MB                 */
        preUMB = (P_UMB)((U32)(preUMB->preMB)-1);
 80188fe:	68fb      	ldr	r3, [r7, #12]
 8018900:	685b      	ldr	r3, [r3, #4]
 8018902:	3b01      	subs	r3, #1
 8018904:	60fb      	str	r3, [r7, #12]
    while(((U32)(preUMB->preMB)&0x1))   /* Is previous MB as FMB?             */
 8018906:	68fb      	ldr	r3, [r7, #12]
 8018908:	685b      	ldr	r3, [r3, #4]
 801890a:	f003 0301 	and.w	r3, r3, #1
 801890e:	2b00      	cmp	r3, #0
 8018910:	d1f5      	bne.n	80188fe <GetPreFMB+0xe>
    }	
    return (P_FMB)(preUMB->preMB);      /* Yes,return previous MB             */
 8018912:	68fb      	ldr	r3, [r7, #12]
 8018914:	685b      	ldr	r3, [r3, #4]
}
 8018916:	4618      	mov	r0, r3
 8018918:	3714      	adds	r7, #20
 801891a:	46bd      	mov	sp, r7
 801891c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018920:	4770      	bx	lr
 8018922:	bf00      	nop

08018924 <CoCreateMbox>:
 * @details    This function is called to create a mailbox. 
 * @note 
 *******************************************************************************
 */
OS_EventID CoCreateMbox(U8 sortType)
{
 8018924:	b580      	push	{r7, lr}
 8018926:	b084      	sub	sp, #16
 8018928:	af00      	add	r7, sp, #0
 801892a:	4603      	mov	r3, r0
 801892c:	71fb      	strb	r3, [r7, #7]
    P_ECB pecb;
    
    /* Create a mailbox type event control block                              */
    pecb = CreatEvent(EVENT_TYPE_MBOX,sortType,Co_NULL);
 801892e:	79fb      	ldrb	r3, [r7, #7]
 8018930:	2200      	movs	r2, #0
 8018932:	4619      	mov	r1, r3
 8018934:	2002      	movs	r0, #2
 8018936:	f7fe ff43 	bl	80177c0 <CreatEvent>
 801893a:	60f8      	str	r0, [r7, #12]
    if(pecb == Co_NULL)                    /* If failed to create event block    */
 801893c:	68fb      	ldr	r3, [r7, #12]
 801893e:	2b00      	cmp	r3, #0
 8018940:	d101      	bne.n	8018946 <CoCreateMbox+0x22>
    {
        return E_CREATE_FAIL;
 8018942:	23ff      	movs	r3, #255	; 0xff
 8018944:	e004      	b.n	8018950 <CoCreateMbox+0x2c>
    }
    pecb->eventCounter = 0;
 8018946:	68fb      	ldr	r3, [r7, #12]
 8018948:	2200      	movs	r2, #0
 801894a:	80da      	strh	r2, [r3, #6]
    return (pecb->id);      /* Create a mailbox successfully, return event ID */		
 801894c:	68fb      	ldr	r3, [r7, #12]
 801894e:	791b      	ldrb	r3, [r3, #4]
}
 8018950:	4618      	mov	r0, r3
 8018952:	3710      	adds	r7, #16
 8018954:	46bd      	mov	sp, r7
 8018956:	bd80      	pop	{r7, pc}

08018958 <CoDelMbox>:
 * @details    This function is called to delete a mailbox.	 
 * @note 
 *******************************************************************************
 */
StatusType CoDelMbox(OS_EventID id,U8 opt)
{
 8018958:	b580      	push	{r7, lr}
 801895a:	b084      	sub	sp, #16
 801895c:	af00      	add	r7, sp, #0
 801895e:	4603      	mov	r3, r0
 8018960:	460a      	mov	r2, r1
 8018962:	71fb      	strb	r3, [r7, #7]
 8018964:	4613      	mov	r3, r2
 8018966:	71bb      	strb	r3, [r7, #6]
    P_ECB pecb;
    
#if CFG_PAR_CHECKOUT_EN >0
    if(id >= CFG_MAX_EVENT)               /* Judge id is valid or not?        */ 
 8018968:	79fb      	ldrb	r3, [r7, #7]
 801896a:	2b13      	cmp	r3, #19
 801896c:	d901      	bls.n	8018972 <CoDelMbox+0x1a>
    {
        return E_INVALID_ID;              /* Id is invalid ,return error      */
 801896e:	2301      	movs	r3, #1
 8018970:	e013      	b.n	801899a <CoDelMbox+0x42>
    }
#endif
    pecb = &EventTbl[id];
 8018972:	79fb      	ldrb	r3, [r7, #7]
 8018974:	011b      	lsls	r3, r3, #4
 8018976:	4a0b      	ldr	r2, [pc, #44]	; (80189a4 <CoDelMbox+0x4c>)
 8018978:	4413      	add	r3, r2
 801897a:	60fb      	str	r3, [r7, #12]
#if CFG_PAR_CHECKOUT_EN >0
    if(pecb->eventType != EVENT_TYPE_MBOX)/* Validate event control block type*/    
 801897c:	68fb      	ldr	r3, [r7, #12]
 801897e:	795b      	ldrb	r3, [r3, #5]
 8018980:	f003 030f 	and.w	r3, r3, #15
 8018984:	b2db      	uxtb	r3, r3
 8018986:	2b02      	cmp	r3, #2
 8018988:	d001      	beq.n	801898e <CoDelMbox+0x36>
    {
        return E_INVALID_ID;              /* The event is not mailbox         */	
 801898a:	2301      	movs	r3, #1
 801898c:	e005      	b.n	801899a <CoDelMbox+0x42>
    }
#endif	
    return (DeleteEvent(pecb,opt)); /* Delete the mailbox event control block */
 801898e:	79bb      	ldrb	r3, [r7, #6]
 8018990:	4619      	mov	r1, r3
 8018992:	68f8      	ldr	r0, [r7, #12]
 8018994:	f7fe ff56 	bl	8017844 <DeleteEvent>
 8018998:	4603      	mov	r3, r0
}
 801899a:	4618      	mov	r0, r3
 801899c:	3710      	adds	r7, #16
 801899e:	46bd      	mov	sp, r7
 80189a0:	bd80      	pop	{r7, pc}
 80189a2:	bf00      	nop
 80189a4:	2000374c 	.word	0x2000374c

080189a8 <CoAcceptMail>:
 * @details    This function is called to accept a mailbox. 
 * @note 
 *******************************************************************************
 */
void* CoAcceptMail(OS_EventID id,StatusType* perr)
{
 80189a8:	b580      	push	{r7, lr}
 80189aa:	b084      	sub	sp, #16
 80189ac:	af00      	add	r7, sp, #0
 80189ae:	4603      	mov	r3, r0
 80189b0:	6039      	str	r1, [r7, #0]
 80189b2:	71fb      	strb	r3, [r7, #7]
    P_ECB pecb;
    void* pmail;
#if CFG_PAR_CHECKOUT_EN >0
    if(id >= CFG_MAX_EVENT)	                
 80189b4:	79fb      	ldrb	r3, [r7, #7]
 80189b6:	2b13      	cmp	r3, #19
 80189b8:	d904      	bls.n	80189c4 <CoAcceptMail+0x1c>
    {
        *perr = E_INVALID_ID;             /* Invalid 'id'                     */
 80189ba:	683b      	ldr	r3, [r7, #0]
 80189bc:	2201      	movs	r2, #1
 80189be:	701a      	strb	r2, [r3, #0]
        return Co_NULL;
 80189c0:	2300      	movs	r3, #0
 80189c2:	e031      	b.n	8018a28 <CoAcceptMail+0x80>
    }
#endif
    pecb = &EventTbl[id];
 80189c4:	79fb      	ldrb	r3, [r7, #7]
 80189c6:	011b      	lsls	r3, r3, #4
 80189c8:	4a19      	ldr	r2, [pc, #100]	; (8018a30 <CoAcceptMail+0x88>)
 80189ca:	4413      	add	r3, r2
 80189cc:	60fb      	str	r3, [r7, #12]
    
#if CFG_PAR_CHECKOUT_EN >0
    if(pecb->eventType != EVENT_TYPE_MBOX)/* Invalid event control block type */
 80189ce:	68fb      	ldr	r3, [r7, #12]
 80189d0:	795b      	ldrb	r3, [r3, #5]
 80189d2:	f003 030f 	and.w	r3, r3, #15
 80189d6:	b2db      	uxtb	r3, r3
 80189d8:	2b02      	cmp	r3, #2
 80189da:	d004      	beq.n	80189e6 <CoAcceptMail+0x3e>
    {
        *perr = E_INVALID_ID;	
 80189dc:	683b      	ldr	r3, [r7, #0]
 80189de:	2201      	movs	r2, #1
 80189e0:	701a      	strb	r2, [r3, #0]
        return Co_NULL;
 80189e2:	2300      	movs	r3, #0
 80189e4:	e020      	b.n	8018a28 <CoAcceptMail+0x80>
    }
#endif
	OsSchedLock();
 80189e6:	4b13      	ldr	r3, [pc, #76]	; (8018a34 <CoAcceptMail+0x8c>)
 80189e8:	781b      	ldrb	r3, [r3, #0]
 80189ea:	b2db      	uxtb	r3, r3
 80189ec:	3301      	adds	r3, #1
 80189ee:	b2da      	uxtb	r2, r3
 80189f0:	4b10      	ldr	r3, [pc, #64]	; (8018a34 <CoAcceptMail+0x8c>)
 80189f2:	701a      	strb	r2, [r3, #0]
    if(pecb->eventCounter == 1)             /* If there is already a message  */
 80189f4:	68fb      	ldr	r3, [r7, #12]
 80189f6:	88db      	ldrh	r3, [r3, #6]
 80189f8:	2b01      	cmp	r3, #1
 80189fa:	d10f      	bne.n	8018a1c <CoAcceptMail+0x74>
    {
        *perr = E_OK;
 80189fc:	683b      	ldr	r3, [r7, #0]
 80189fe:	2200      	movs	r2, #0
 8018a00:	701a      	strb	r2, [r3, #0]
        pmail = pecb->eventPtr;             /* Get the message                */
 8018a02:	68fb      	ldr	r3, [r7, #12]
 8018a04:	681b      	ldr	r3, [r3, #0]
 8018a06:	60bb      	str	r3, [r7, #8]
        pecb->eventPtr     = Co_NULL;          /* Clear the mailbox              */
 8018a08:	68fb      	ldr	r3, [r7, #12]
 8018a0a:	2200      	movs	r2, #0
 8018a0c:	601a      	str	r2, [r3, #0]
        pecb->eventCounter = 0;
 8018a0e:	68fb      	ldr	r3, [r7, #12]
 8018a10:	2200      	movs	r2, #0
 8018a12:	80da      	strh	r2, [r3, #6]
		OsSchedUnlock();
 8018a14:	f7fe fdd0 	bl	80175b8 <OsSchedUnlock>
        return pmail;                       /* Return the message received    */		
 8018a18:	68bb      	ldr	r3, [r7, #8]
 8018a1a:	e005      	b.n	8018a28 <CoAcceptMail+0x80>
    }
    else                                    /* If the mailbox is empty        */
    {	
		OsSchedUnlock();
 8018a1c:	f7fe fdcc 	bl	80175b8 <OsSchedUnlock>
        *perr = E_MBOX_EMPTY;               /* Mailbox is empty,return Co_NULL   */
 8018a20:	683b      	ldr	r3, [r7, #0]
 8018a22:	220a      	movs	r2, #10
 8018a24:	701a      	strb	r2, [r3, #0]
        return Co_NULL;
 8018a26:	2300      	movs	r3, #0
    }
}
 8018a28:	4618      	mov	r0, r3
 8018a2a:	3710      	adds	r7, #16
 8018a2c:	46bd      	mov	sp, r7
 8018a2e:	bd80      	pop	{r7, pc}
 8018a30:	2000374c 	.word	0x2000374c
 8018a34:	20003749 	.word	0x20003749

08018a38 <CoPendMail>:
 * @details    This function is called to wait a mailbox.	 
 * @note 
 *******************************************************************************
 */
void* CoPendMail(OS_EventID id,U32 timeout,StatusType* perr)
{
 8018a38:	b580      	push	{r7, lr}
 8018a3a:	b088      	sub	sp, #32
 8018a3c:	af00      	add	r7, sp, #0
 8018a3e:	4603      	mov	r3, r0
 8018a40:	60b9      	str	r1, [r7, #8]
 8018a42:	607a      	str	r2, [r7, #4]
 8018a44:	73fb      	strb	r3, [r7, #15]
    P_ECB pecb;
    void* pmail;
    P_OSTCB  curTCB;
     
    if(OSIntNesting > 0)                /* If the caller is ISR               */
 8018a46:	4b4f      	ldr	r3, [pc, #316]	; (8018b84 <CoPendMail+0x14c>)
 8018a48:	781b      	ldrb	r3, [r3, #0]
 8018a4a:	b2db      	uxtb	r3, r3
 8018a4c:	2b00      	cmp	r3, #0
 8018a4e:	d004      	beq.n	8018a5a <CoPendMail+0x22>
    {
        *perr = E_CALL;
 8018a50:	687b      	ldr	r3, [r7, #4]
 8018a52:	2203      	movs	r2, #3
 8018a54:	701a      	strb	r2, [r3, #0]
        return Co_NULL;
 8018a56:	2300      	movs	r3, #0
 8018a58:	e090      	b.n	8018b7c <CoPendMail+0x144>
    }
    
#if CFG_PAR_CHECKOUT_EN >0
    if(id >= CFG_MAX_EVENT)              
 8018a5a:	7bfb      	ldrb	r3, [r7, #15]
 8018a5c:	2b13      	cmp	r3, #19
 8018a5e:	d904      	bls.n	8018a6a <CoPendMail+0x32>
    {
        *perr = E_INVALID_ID;           /* Invalid 'id',retrun error          */
 8018a60:	687b      	ldr	r3, [r7, #4]
 8018a62:	2201      	movs	r2, #1
 8018a64:	701a      	strb	r2, [r3, #0]
        return Co_NULL;
 8018a66:	2300      	movs	r3, #0
 8018a68:	e088      	b.n	8018b7c <CoPendMail+0x144>
    }
#endif

    pecb = &EventTbl[id];
 8018a6a:	7bfb      	ldrb	r3, [r7, #15]
 8018a6c:	011b      	lsls	r3, r3, #4
 8018a6e:	4a46      	ldr	r2, [pc, #280]	; (8018b88 <CoPendMail+0x150>)
 8018a70:	4413      	add	r3, r2
 8018a72:	61fb      	str	r3, [r7, #28]
#if CFG_PAR_CHECKOUT_EN >0
    if(pecb->eventType != EVENT_TYPE_MBOX)
 8018a74:	69fb      	ldr	r3, [r7, #28]
 8018a76:	795b      	ldrb	r3, [r3, #5]
 8018a78:	f003 030f 	and.w	r3, r3, #15
 8018a7c:	b2db      	uxtb	r3, r3
 8018a7e:	2b02      	cmp	r3, #2
 8018a80:	d004      	beq.n	8018a8c <CoPendMail+0x54>
    {
        *perr = E_INVALID_ID;       /* Invalid event type,not EVENT_TYPE_MBOX */
 8018a82:	687b      	ldr	r3, [r7, #4]
 8018a84:	2201      	movs	r2, #1
 8018a86:	701a      	strb	r2, [r3, #0]
        return Co_NULL;
 8018a88:	2300      	movs	r3, #0
 8018a8a:	e077      	b.n	8018b7c <CoPendMail+0x144>
    }
#endif

    if(OSSchedLock != 0)                /* Judge schedule is locked or not?   */
 8018a8c:	4b3f      	ldr	r3, [pc, #252]	; (8018b8c <CoPendMail+0x154>)
 8018a8e:	781b      	ldrb	r3, [r3, #0]
 8018a90:	b2db      	uxtb	r3, r3
 8018a92:	2b00      	cmp	r3, #0
 8018a94:	d004      	beq.n	8018aa0 <CoPendMail+0x68>
    {	
        *perr = E_OS_IN_LOCK;           /* Schedule is locked                 */								 
 8018a96:	687b      	ldr	r3, [r7, #4]
 8018a98:	2215      	movs	r2, #21
 8018a9a:	701a      	strb	r2, [r3, #0]
        return Co_NULL;                    /* return Co_NULL                        */
 8018a9c:	2300      	movs	r3, #0
 8018a9e:	e06d      	b.n	8018b7c <CoPendMail+0x144>
    }
    OsSchedLock();
 8018aa0:	4b3a      	ldr	r3, [pc, #232]	; (8018b8c <CoPendMail+0x154>)
 8018aa2:	781b      	ldrb	r3, [r3, #0]
 8018aa4:	b2db      	uxtb	r3, r3
 8018aa6:	3301      	adds	r3, #1
 8018aa8:	b2da      	uxtb	r2, r3
 8018aaa:	4b38      	ldr	r3, [pc, #224]	; (8018b8c <CoPendMail+0x154>)
 8018aac:	701a      	strb	r2, [r3, #0]
    if( pecb->eventCounter == 1)        /* If there is already a message      */
 8018aae:	69fb      	ldr	r3, [r7, #28]
 8018ab0:	88db      	ldrh	r3, [r3, #6]
 8018ab2:	2b01      	cmp	r3, #1
 8018ab4:	d10f      	bne.n	8018ad6 <CoPendMail+0x9e>
    {
        *perr = E_OK;
 8018ab6:	687b      	ldr	r3, [r7, #4]
 8018ab8:	2200      	movs	r2, #0
 8018aba:	701a      	strb	r2, [r3, #0]
        pmail = pecb->eventPtr;         /* Get the message                    */
 8018abc:	69fb      	ldr	r3, [r7, #28]
 8018abe:	681b      	ldr	r3, [r3, #0]
 8018ac0:	617b      	str	r3, [r7, #20]
        pecb->eventPtr     = Co_NULL;      /* Clear the mailbox                  */
 8018ac2:	69fb      	ldr	r3, [r7, #28]
 8018ac4:	2200      	movs	r2, #0
 8018ac6:	601a      	str	r2, [r3, #0]
        pecb->eventCounter = 0;
 8018ac8:	69fb      	ldr	r3, [r7, #28]
 8018aca:	2200      	movs	r2, #0
 8018acc:	80da      	strh	r2, [r3, #6]
        OsSchedUnlock();
 8018ace:	f7fe fd73 	bl	80175b8 <OsSchedUnlock>
        return pmail;                   /* Return the message received        */
 8018ad2:	697b      	ldr	r3, [r7, #20]
 8018ad4:	e052      	b.n	8018b7c <CoPendMail+0x144>
    }
    else                       /* If message is not available, task will pend */ 
    {
    	OsSchedUnlock();
 8018ad6:	f7fe fd6f 	bl	80175b8 <OsSchedUnlock>
        curTCB = TCBRunning;
 8018ada:	4b2d      	ldr	r3, [pc, #180]	; (8018b90 <CoPendMail+0x158>)
 8018adc:	681b      	ldr	r3, [r3, #0]
 8018ade:	61bb      	str	r3, [r7, #24]
        if(timeout == 0)                /* If time-out is not configured      */
 8018ae0:	68bb      	ldr	r3, [r7, #8]
 8018ae2:	2b00      	cmp	r3, #0
 8018ae4:	d11a      	bne.n	8018b1c <CoPendMail+0xe4>
        {
            EventTaskToWait(pecb,curTCB); /* Block task until event occurs    */
 8018ae6:	69b9      	ldr	r1, [r7, #24]
 8018ae8:	69f8      	ldr	r0, [r7, #28]
 8018aea:	f7fe fef1 	bl	80178d0 <EventTaskToWait>
            *perr = E_OK;
 8018aee:	687b      	ldr	r3, [r7, #4]
 8018af0:	2200      	movs	r2, #0
 8018af2:	701a      	strb	r2, [r3, #0]
            
            /* Have recived a message or the mailbox have been deleted        */
            OsSchedLock();
 8018af4:	4b25      	ldr	r3, [pc, #148]	; (8018b8c <CoPendMail+0x154>)
 8018af6:	781b      	ldrb	r3, [r3, #0]
 8018af8:	b2db      	uxtb	r3, r3
 8018afa:	3301      	adds	r3, #1
 8018afc:	b2da      	uxtb	r2, r3
 8018afe:	4b23      	ldr	r3, [pc, #140]	; (8018b8c <CoPendMail+0x154>)
 8018b00:	701a      	strb	r2, [r3, #0]
            pmail = curTCB->pmail;    
 8018b02:	69bb      	ldr	r3, [r7, #24]
 8018b04:	691b      	ldr	r3, [r3, #16]
 8018b06:	617b      	str	r3, [r7, #20]
            pecb->eventCounter = 0;               
 8018b08:	69fb      	ldr	r3, [r7, #28]
 8018b0a:	2200      	movs	r2, #0
 8018b0c:	80da      	strh	r2, [r3, #6]
            curTCB->pmail = Co_NULL;
 8018b0e:	69bb      	ldr	r3, [r7, #24]
 8018b10:	2200      	movs	r2, #0
 8018b12:	611a      	str	r2, [r3, #16]
            OsSchedUnlock(); 
 8018b14:	f7fe fd50 	bl	80175b8 <OsSchedUnlock>
            return pmail;               /* Return received message or Co_NULL    */
 8018b18:	697b      	ldr	r3, [r7, #20]
 8018b1a:	e02f      	b.n	8018b7c <CoPendMail+0x144>
        }
        else                            /* If time-out is configured          */
        {
            OsSchedLock();
 8018b1c:	4b1b      	ldr	r3, [pc, #108]	; (8018b8c <CoPendMail+0x154>)
 8018b1e:	781b      	ldrb	r3, [r3, #0]
 8018b20:	b2db      	uxtb	r3, r3
 8018b22:	3301      	adds	r3, #1
 8018b24:	b2da      	uxtb	r2, r3
 8018b26:	4b19      	ldr	r3, [pc, #100]	; (8018b8c <CoPendMail+0x154>)
 8018b28:	701a      	strb	r2, [r3, #0]
            
            /* Block task until event or timeout occurs                       */
            EventTaskToWait(pecb,curTCB);   
 8018b2a:	69b9      	ldr	r1, [r7, #24]
 8018b2c:	69f8      	ldr	r0, [r7, #28]
 8018b2e:	f7fe fecf 	bl	80178d0 <EventTaskToWait>
            InsertDelayList(curTCB,timeout);
 8018b32:	68b9      	ldr	r1, [r7, #8]
 8018b34:	69b8      	ldr	r0, [r7, #24]
 8018b36:	f001 fc4b 	bl	801a3d0 <InsertDelayList>
            OsSchedUnlock();
 8018b3a:	f7fe fd3d 	bl	80175b8 <OsSchedUnlock>
            if( curTCB->pmail == Co_NULL)  /* Time-out occurred                  */
 8018b3e:	69bb      	ldr	r3, [r7, #24]
 8018b40:	691b      	ldr	r3, [r3, #16]
 8018b42:	2b00      	cmp	r3, #0
 8018b44:	d104      	bne.n	8018b50 <CoPendMail+0x118>
            {
                *perr = E_TIMEOUT;
 8018b46:	687b      	ldr	r3, [r7, #4]
 8018b48:	2205      	movs	r2, #5
 8018b4a:	701a      	strb	r2, [r3, #0]
                return Co_NULL;
 8018b4c:	2300      	movs	r3, #0
 8018b4e:	e015      	b.n	8018b7c <CoPendMail+0x144>
            }
            else    /* Have recived a message or the mailbox have been deleted*/
            {
                *perr = E_OK;
 8018b50:	687b      	ldr	r3, [r7, #4]
 8018b52:	2200      	movs	r2, #0
 8018b54:	701a      	strb	r2, [r3, #0]
                
                OsSchedLock();
 8018b56:	4b0d      	ldr	r3, [pc, #52]	; (8018b8c <CoPendMail+0x154>)
 8018b58:	781b      	ldrb	r3, [r3, #0]
 8018b5a:	b2db      	uxtb	r3, r3
 8018b5c:	3301      	adds	r3, #1
 8018b5e:	b2da      	uxtb	r2, r3
 8018b60:	4b0a      	ldr	r3, [pc, #40]	; (8018b8c <CoPendMail+0x154>)
 8018b62:	701a      	strb	r2, [r3, #0]
                pmail = curTCB->pmail;            
 8018b64:	69bb      	ldr	r3, [r7, #24]
 8018b66:	691b      	ldr	r3, [r3, #16]
 8018b68:	617b      	str	r3, [r7, #20]
                pecb->eventCounter = 0;   
 8018b6a:	69fb      	ldr	r3, [r7, #28]
 8018b6c:	2200      	movs	r2, #0
 8018b6e:	80da      	strh	r2, [r3, #6]
                curTCB->pmail = Co_NULL;
 8018b70:	69bb      	ldr	r3, [r7, #24]
 8018b72:	2200      	movs	r2, #0
 8018b74:	611a      	str	r2, [r3, #16]
                OsSchedUnlock(); 
 8018b76:	f7fe fd1f 	bl	80175b8 <OsSchedUnlock>
                
                return pmail;           /* Return received message or Co_NULL    */
 8018b7a:	697b      	ldr	r3, [r7, #20]
            }			
        }	
    }
}
 8018b7c:	4618      	mov	r0, r3
 8018b7e:	3720      	adds	r7, #32
 8018b80:	46bd      	mov	sp, r7
 8018b82:	bd80      	pop	{r7, pc}
 8018b84:	20003748 	.word	0x20003748
 8018b88:	2000374c 	.word	0x2000374c
 8018b8c:	20003749 	.word	0x20003749
 8018b90:	2000d728 	.word	0x2000d728

08018b94 <CoPostMail>:
 * @details    This function is called to post a mail. 
 * @note 
 *******************************************************************************
 */
StatusType CoPostMail(OS_EventID id,void* pmail)
{
 8018b94:	b580      	push	{r7, lr}
 8018b96:	b084      	sub	sp, #16
 8018b98:	af00      	add	r7, sp, #0
 8018b9a:	4603      	mov	r3, r0
 8018b9c:	6039      	str	r1, [r7, #0]
 8018b9e:	71fb      	strb	r3, [r7, #7]
    P_ECB pecb;
#if CFG_PAR_CHECKOUT_EN >0
    if(id >= CFG_MAX_EVENT)	                
 8018ba0:	79fb      	ldrb	r3, [r7, #7]
 8018ba2:	2b13      	cmp	r3, #19
 8018ba4:	d901      	bls.n	8018baa <CoPostMail+0x16>
    {
        return E_INVALID_ID;            /* Invalid id,return error            */
 8018ba6:	2301      	movs	r3, #1
 8018ba8:	e026      	b.n	8018bf8 <CoPostMail+0x64>
    }
#endif

    pecb = &EventTbl[id];
 8018baa:	79fb      	ldrb	r3, [r7, #7]
 8018bac:	011b      	lsls	r3, r3, #4
 8018bae:	4a14      	ldr	r2, [pc, #80]	; (8018c00 <CoPostMail+0x6c>)
 8018bb0:	4413      	add	r3, r2
 8018bb2:	60fb      	str	r3, [r7, #12]
#if CFG_PAR_CHECKOUT_EN >0
    if(pecb->eventType != EVENT_TYPE_MBOX)/* Validate event control block type*/
 8018bb4:	68fb      	ldr	r3, [r7, #12]
 8018bb6:	795b      	ldrb	r3, [r3, #5]
 8018bb8:	f003 030f 	and.w	r3, r3, #15
 8018bbc:	b2db      	uxtb	r3, r3
 8018bbe:	2b02      	cmp	r3, #2
 8018bc0:	d001      	beq.n	8018bc6 <CoPostMail+0x32>
    {
        return E_INVALID_ID;              /* Event is not mailbox,return error*/
 8018bc2:	2301      	movs	r3, #1
 8018bc4:	e018      	b.n	8018bf8 <CoPostMail+0x64>
    }
#endif

    if(pecb->eventCounter == 0)   /* If mailbox doesn't already have a message*/	
 8018bc6:	68fb      	ldr	r3, [r7, #12]
 8018bc8:	88db      	ldrh	r3, [r3, #6]
 8018bca:	2b00      	cmp	r3, #0
 8018bcc:	d113      	bne.n	8018bf6 <CoPostMail+0x62>
    {
        OsSchedLock();
 8018bce:	4b0d      	ldr	r3, [pc, #52]	; (8018c04 <CoPostMail+0x70>)
 8018bd0:	781b      	ldrb	r3, [r3, #0]
 8018bd2:	b2db      	uxtb	r3, r3
 8018bd4:	3301      	adds	r3, #1
 8018bd6:	b2da      	uxtb	r2, r3
 8018bd8:	4b0a      	ldr	r3, [pc, #40]	; (8018c04 <CoPostMail+0x70>)
 8018bda:	701a      	strb	r2, [r3, #0]
        pecb->eventPtr     = pmail;       /* Place message in mailbox         */
 8018bdc:	68fb      	ldr	r3, [r7, #12]
 8018bde:	683a      	ldr	r2, [r7, #0]
 8018be0:	601a      	str	r2, [r3, #0]
        pecb->eventCounter = 1;
 8018be2:	68fb      	ldr	r3, [r7, #12]
 8018be4:	2201      	movs	r2, #1
 8018be6:	80da      	strh	r2, [r3, #6]
        EventTaskToRdy(pecb);             /* Check waiting list               */
 8018be8:	68f8      	ldr	r0, [r7, #12]
 8018bea:	f7fe fef1 	bl	80179d0 <EventTaskToRdy>
        OsSchedUnlock();
 8018bee:	f7fe fce3 	bl	80175b8 <OsSchedUnlock>
        return E_OK;	
 8018bf2:	2300      	movs	r3, #0
 8018bf4:	e000      	b.n	8018bf8 <CoPostMail+0x64>
    }
    else                          /* If there is already a message in mailbox */              
    {
        return E_MBOX_FULL;       /* Mailbox is full,and return "E_MBOX_FULL" */
 8018bf6:	2307      	movs	r3, #7
    }
}
 8018bf8:	4618      	mov	r0, r3
 8018bfa:	3710      	adds	r7, #16
 8018bfc:	46bd      	mov	sp, r7
 8018bfe:	bd80      	pop	{r7, pc}
 8018c00:	2000374c 	.word	0x2000374c
 8018c04:	20003749 	.word	0x20003749

08018c08 <isr_PostMail>:
 * @note 
 *******************************************************************************
 */
#if CFG_MAX_SERVICE_REQUEST > 0
StatusType isr_PostMail(OS_EventID id,void* pmail)
{
 8018c08:	b580      	push	{r7, lr}
 8018c0a:	b082      	sub	sp, #8
 8018c0c:	af00      	add	r7, sp, #0
 8018c0e:	4603      	mov	r3, r0
 8018c10:	6039      	str	r1, [r7, #0]
 8018c12:	71fb      	strb	r3, [r7, #7]
    if(OSSchedLock > 0)         /* If scheduler is locked,(the caller is ISR) */
 8018c14:	4b0d      	ldr	r3, [pc, #52]	; (8018c4c <isr_PostMail+0x44>)
 8018c16:	781b      	ldrb	r3, [r3, #0]
 8018c18:	b2db      	uxtb	r3, r3
 8018c1a:	2b00      	cmp	r3, #0
 8018c1c:	d00c      	beq.n	8018c38 <isr_PostMail+0x30>
    {
        /* Insert the request into service request queue                      */
        if(InsertInSRQ(MBOX_REQ,id,pmail) == Co_FALSE)
 8018c1e:	79fb      	ldrb	r3, [r7, #7]
 8018c20:	683a      	ldr	r2, [r7, #0]
 8018c22:	4619      	mov	r1, r3
 8018c24:	2002      	movs	r0, #2
 8018c26:	f000 fe8b 	bl	8019940 <InsertInSRQ>
 8018c2a:	4603      	mov	r3, r0
 8018c2c:	2b00      	cmp	r3, #0
 8018c2e:	d101      	bne.n	8018c34 <isr_PostMail+0x2c>
        {
            return E_SEV_REQ_FULL;        /* If service request queue is full */
 8018c30:	2312      	movs	r3, #18
 8018c32:	e007      	b.n	8018c44 <isr_PostMail+0x3c>
        }			
        else                              /* Operate successfully             */
        {
            return E_OK;
 8018c34:	2300      	movs	r3, #0
 8018c36:	e005      	b.n	8018c44 <isr_PostMail+0x3c>
        }
    }
    else
    {
        return(CoPostMail(id,pmail));     /* Sends the message to the mailbox */ 
 8018c38:	79fb      	ldrb	r3, [r7, #7]
 8018c3a:	6839      	ldr	r1, [r7, #0]
 8018c3c:	4618      	mov	r0, r3
 8018c3e:	f7ff ffa9 	bl	8018b94 <CoPostMail>
 8018c42:	4603      	mov	r3, r0
    }
}
 8018c44:	4618      	mov	r0, r3
 8018c46:	3708      	adds	r7, #8
 8018c48:	46bd      	mov	sp, r7
 8018c4a:	bd80      	pop	{r7, pc}
 8018c4c:	20003749 	.word	0x20003749

08018c50 <CoCreateMutex>:
 * @details    This function is called to create a mutex. 
 * @note  		
 *******************************************************************************
 */
OS_MutexID CoCreateMutex(void)
{
 8018c50:	b580      	push	{r7, lr}
 8018c52:	b082      	sub	sp, #8
 8018c54:	af00      	add	r7, sp, #0
    OS_MutexID id;
    P_MUTEX pMutex;
    OsSchedLock();
 8018c56:	4b18      	ldr	r3, [pc, #96]	; (8018cb8 <CoCreateMutex+0x68>)
 8018c58:	781b      	ldrb	r3, [r3, #0]
 8018c5a:	b2db      	uxtb	r3, r3
 8018c5c:	3301      	adds	r3, #1
 8018c5e:	b2da      	uxtb	r2, r3
 8018c60:	4b15      	ldr	r3, [pc, #84]	; (8018cb8 <CoCreateMutex+0x68>)
 8018c62:	701a      	strb	r2, [r3, #0]
    
    /* Assign a free mutex control block */
    if(MutexFreeID < CFG_MAX_MUTEX )
 8018c64:	4b15      	ldr	r3, [pc, #84]	; (8018cbc <CoCreateMutex+0x6c>)
 8018c66:	781b      	ldrb	r3, [r3, #0]
 8018c68:	2b09      	cmp	r3, #9
 8018c6a:	d81e      	bhi.n	8018caa <CoCreateMutex+0x5a>
    {
        id  = MutexFreeID++;
 8018c6c:	4b13      	ldr	r3, [pc, #76]	; (8018cbc <CoCreateMutex+0x6c>)
 8018c6e:	781b      	ldrb	r3, [r3, #0]
 8018c70:	1c5a      	adds	r2, r3, #1
 8018c72:	b2d1      	uxtb	r1, r2
 8018c74:	4a11      	ldr	r2, [pc, #68]	; (8018cbc <CoCreateMutex+0x6c>)
 8018c76:	7011      	strb	r1, [r2, #0]
 8018c78:	71fb      	strb	r3, [r7, #7]
        OsSchedUnlock();
 8018c7a:	f7fe fc9d 	bl	80175b8 <OsSchedUnlock>
        pMutex = &MutexTbl[id];
 8018c7e:	79fb      	ldrb	r3, [r7, #7]
 8018c80:	00db      	lsls	r3, r3, #3
 8018c82:	4a0f      	ldr	r2, [pc, #60]	; (8018cc0 <CoCreateMutex+0x70>)
 8018c84:	4413      	add	r3, r2
 8018c86:	603b      	str	r3, [r7, #0]
        pMutex->hipriTaskID  = INVALID_ID;
 8018c88:	683b      	ldr	r3, [r7, #0]
 8018c8a:	22ff      	movs	r2, #255	; 0xff
 8018c8c:	70da      	strb	r2, [r3, #3]
        pMutex->originalPrio = 0xff;
 8018c8e:	683b      	ldr	r3, [r7, #0]
 8018c90:	22ff      	movs	r2, #255	; 0xff
 8018c92:	701a      	strb	r2, [r3, #0]
        pMutex->mutexFlag    = MUTEX_FREE;  /* Mutex is free,not was occupied */
 8018c94:	683b      	ldr	r3, [r7, #0]
 8018c96:	2200      	movs	r2, #0
 8018c98:	705a      	strb	r2, [r3, #1]
        pMutex->taskID       = INVALID_ID;
 8018c9a:	683b      	ldr	r3, [r7, #0]
 8018c9c:	22ff      	movs	r2, #255	; 0xff
 8018c9e:	709a      	strb	r2, [r3, #2]
        pMutex->waittingList = Co_NULL;
 8018ca0:	683b      	ldr	r3, [r7, #0]
 8018ca2:	2200      	movs	r2, #0
 8018ca4:	605a      	str	r2, [r3, #4]
        return id;                      /* Return mutex ID                    */			
 8018ca6:	79fb      	ldrb	r3, [r7, #7]
 8018ca8:	e002      	b.n	8018cb0 <CoCreateMutex+0x60>
    }	
    
    OsSchedUnlock();	 
 8018caa:	f7fe fc85 	bl	80175b8 <OsSchedUnlock>
    return E_CREATE_FAIL;               /* No free mutex control block        */	
 8018cae:	23ff      	movs	r3, #255	; 0xff
}
 8018cb0:	4618      	mov	r0, r3
 8018cb2:	3708      	adds	r7, #8
 8018cb4:	46bd      	mov	sp, r7
 8018cb6:	bd80      	pop	{r7, pc}
 8018cb8:	20003749 	.word	0x20003749
 8018cbc:	2000d4f0 	.word	0x2000d4f0
 8018cc0:	2000d4f4 	.word	0x2000d4f4

08018cc4 <CoEnterMutexSection>:
 * @details    This function is called when entering a critical area.	 
 * @note 
 *******************************************************************************
 */
StatusType CoEnterMutexSection(OS_MutexID mutexID)
{
 8018cc4:	b580      	push	{r7, lr}
 8018cc6:	b086      	sub	sp, #24
 8018cc8:	af00      	add	r7, sp, #0
 8018cca:	4603      	mov	r3, r0
 8018ccc:	71fb      	strb	r3, [r7, #7]

#if CFG_EVENT_EN >0
    P_ECB pecb;
#endif

    if(OSIntNesting > 0)                /* If the caller is ISR               */
 8018cce:	4b53      	ldr	r3, [pc, #332]	; (8018e1c <CoEnterMutexSection+0x158>)
 8018cd0:	781b      	ldrb	r3, [r3, #0]
 8018cd2:	b2db      	uxtb	r3, r3
 8018cd4:	2b00      	cmp	r3, #0
 8018cd6:	d001      	beq.n	8018cdc <CoEnterMutexSection+0x18>
    {
        return E_CALL;
 8018cd8:	2303      	movs	r3, #3
 8018cda:	e09b      	b.n	8018e14 <CoEnterMutexSection+0x150>
    }
    if(OSSchedLock != 0)                /* Is OS lock?                        */
 8018cdc:	4b50      	ldr	r3, [pc, #320]	; (8018e20 <CoEnterMutexSection+0x15c>)
 8018cde:	781b      	ldrb	r3, [r3, #0]
 8018ce0:	b2db      	uxtb	r3, r3
 8018ce2:	2b00      	cmp	r3, #0
 8018ce4:	d001      	beq.n	8018cea <CoEnterMutexSection+0x26>
    {								 
        return E_OS_IN_LOCK;            /* Yes,error return                   */
 8018ce6:	2315      	movs	r3, #21
 8018ce8:	e094      	b.n	8018e14 <CoEnterMutexSection+0x150>
    }	

#if CFG_PAR_CHECKOUT_EN >0
    if(mutexID >= MutexFreeID)          /* Invalid 'mutexID'                  */
 8018cea:	4b4e      	ldr	r3, [pc, #312]	; (8018e24 <CoEnterMutexSection+0x160>)
 8018cec:	781b      	ldrb	r3, [r3, #0]
 8018cee:	79fa      	ldrb	r2, [r7, #7]
 8018cf0:	429a      	cmp	r2, r3
 8018cf2:	d301      	bcc.n	8018cf8 <CoEnterMutexSection+0x34>
    {
        return E_INVALID_ID;	
 8018cf4:	2301      	movs	r3, #1
 8018cf6:	e08d      	b.n	8018e14 <CoEnterMutexSection+0x150>
    }
#endif

    OsSchedLock();
 8018cf8:	4b49      	ldr	r3, [pc, #292]	; (8018e20 <CoEnterMutexSection+0x15c>)
 8018cfa:	781b      	ldrb	r3, [r3, #0]
 8018cfc:	b2db      	uxtb	r3, r3
 8018cfe:	3301      	adds	r3, #1
 8018d00:	b2da      	uxtb	r2, r3
 8018d02:	4b47      	ldr	r3, [pc, #284]	; (8018e20 <CoEnterMutexSection+0x15c>)
 8018d04:	701a      	strb	r2, [r3, #0]
    pCurTcb = TCBRunning;
 8018d06:	4b48      	ldr	r3, [pc, #288]	; (8018e28 <CoEnterMutexSection+0x164>)
 8018d08:	681b      	ldr	r3, [r3, #0]
 8018d0a:	613b      	str	r3, [r7, #16]
    pMutex  = &MutexTbl[mutexID];
 8018d0c:	79fb      	ldrb	r3, [r7, #7]
 8018d0e:	00db      	lsls	r3, r3, #3
 8018d10:	4a46      	ldr	r2, [pc, #280]	; (8018e2c <CoEnterMutexSection+0x168>)
 8018d12:	4413      	add	r3, r2
 8018d14:	60fb      	str	r3, [r7, #12]
    
    pCurTcb->mutexID = mutexID;
 8018d16:	693b      	ldr	r3, [r7, #16]
 8018d18:	79fa      	ldrb	r2, [r7, #7]
 8018d1a:	71da      	strb	r2, [r3, #7]
    if(pMutex->mutexFlag == MUTEX_FREE)       /* If mutex is available        */	 
 8018d1c:	68fb      	ldr	r3, [r7, #12]
 8018d1e:	785b      	ldrb	r3, [r3, #1]
 8018d20:	2b00      	cmp	r3, #0
 8018d22:	d10f      	bne.n	8018d44 <CoEnterMutexSection+0x80>
    {
        pMutex->originalPrio = pCurTcb->prio; /* Save priority of owning task */   
 8018d24:	693b      	ldr	r3, [r7, #16]
 8018d26:	791a      	ldrb	r2, [r3, #4]
 8018d28:	68fb      	ldr	r3, [r7, #12]
 8018d2a:	701a      	strb	r2, [r3, #0]
        pMutex->taskID       = pCurTcb->taskID;   /* Acquire the resource     */
 8018d2c:	693b      	ldr	r3, [r7, #16]
 8018d2e:	799a      	ldrb	r2, [r3, #6]
 8018d30:	68fb      	ldr	r3, [r7, #12]
 8018d32:	709a      	strb	r2, [r3, #2]
        pMutex->hipriTaskID  = pCurTcb->taskID;
 8018d34:	693b      	ldr	r3, [r7, #16]
 8018d36:	799a      	ldrb	r2, [r3, #6]
 8018d38:	68fb      	ldr	r3, [r7, #12]
 8018d3a:	70da      	strb	r2, [r3, #3]
        pMutex->mutexFlag    = MUTEX_OCCUPY;      /* Occupy the mutex resource*/
 8018d3c:	68fb      	ldr	r3, [r7, #12]
 8018d3e:	2201      	movs	r2, #1
 8018d40:	705a      	strb	r2, [r3, #1]
 8018d42:	e064      	b.n	8018e0e <CoEnterMutexSection+0x14a>
    }
    /* If the mutex resource had been occupied                                */
    else if(pMutex->mutexFlag == MUTEX_OCCUPY)	 	
 8018d44:	68fb      	ldr	r3, [r7, #12]
 8018d46:	785b      	ldrb	r3, [r3, #1]
 8018d48:	2b01      	cmp	r3, #1
 8018d4a:	d160      	bne.n	8018e0e <CoEnterMutexSection+0x14a>
    {	
		ptcb = &TCBTbl[pMutex->taskID];
 8018d4c:	68fb      	ldr	r3, [r7, #12]
 8018d4e:	789b      	ldrb	r3, [r3, #2]
 8018d50:	461a      	mov	r2, r3
 8018d52:	4613      	mov	r3, r2
 8018d54:	005b      	lsls	r3, r3, #1
 8018d56:	4413      	add	r3, r2
 8018d58:	011b      	lsls	r3, r3, #4
 8018d5a:	4a35      	ldr	r2, [pc, #212]	; (8018e30 <CoEnterMutexSection+0x16c>)
 8018d5c:	4413      	add	r3, r2
 8018d5e:	617b      	str	r3, [r7, #20]
        if(ptcb->prio > pCurTcb->prio)  /* Need to promote priority of owner? */
 8018d60:	697b      	ldr	r3, [r7, #20]
 8018d62:	791a      	ldrb	r2, [r3, #4]
 8018d64:	693b      	ldr	r3, [r7, #16]
 8018d66:	791b      	ldrb	r3, [r3, #4]
 8018d68:	429a      	cmp	r2, r3
 8018d6a:	d92a      	bls.n	8018dc2 <CoEnterMutexSection+0xfe>
        {
#if CFG_ORDER_LIST_SCHEDULE_EN ==0
			DeleteTaskPri(ptcb->prio);
			ActiveTaskPri(pCurTcb->prio);
#endif	
            ptcb->prio = pCurTcb->prio;	    /* Promote prio of owner          */
 8018d6c:	693b      	ldr	r3, [r7, #16]
 8018d6e:	791a      	ldrb	r2, [r3, #4]
 8018d70:	697b      	ldr	r3, [r7, #20]
 8018d72:	711a      	strb	r2, [r3, #4]
            
            /* Upgarde the highest priority about the mutex                   */
            pMutex->hipriTaskID	= pCurTcb->taskID;	
 8018d74:	693b      	ldr	r3, [r7, #16]
 8018d76:	799a      	ldrb	r2, [r3, #6]
 8018d78:	68fb      	ldr	r3, [r7, #12]
 8018d7a:	70da      	strb	r2, [r3, #3]
            if(ptcb->state == TASK_READY)   /* If the task is ready to run    */
 8018d7c:	697b      	ldr	r3, [r7, #20]
 8018d7e:	795b      	ldrb	r3, [r3, #5]
 8018d80:	2b00      	cmp	r3, #0
 8018d82:	d106      	bne.n	8018d92 <CoEnterMutexSection+0xce>
            {
                RemoveFromTCBRdyList(ptcb); /* Remove the task from READY list*/
 8018d84:	6978      	ldr	r0, [r7, #20]
 8018d86:	f000 ff59 	bl	8019c3c <RemoveFromTCBRdyList>
                InsertToTCBRdyList(ptcb);   /* Insert the task into READY list*/
 8018d8a:	6978      	ldr	r0, [r7, #20]
 8018d8c:	f000 fed2 	bl	8019b34 <InsertToTCBRdyList>
 8018d90:	e017      	b.n	8018dc2 <CoEnterMutexSection+0xfe>
            }
#if CFG_EVENT_EN >0
            /* If the task is waiting on a event                              */
            else if(ptcb->eventID != INVALID_ID) 
 8018d92:	697b      	ldr	r3, [r7, #20]
 8018d94:	7a1b      	ldrb	r3, [r3, #8]
 8018d96:	2bff      	cmp	r3, #255	; 0xff
 8018d98:	d013      	beq.n	8018dc2 <CoEnterMutexSection+0xfe>
            {
                pecb = &EventTbl[ptcb->eventID];
 8018d9a:	697b      	ldr	r3, [r7, #20]
 8018d9c:	7a1b      	ldrb	r3, [r3, #8]
 8018d9e:	011b      	lsls	r3, r3, #4
 8018da0:	4a24      	ldr	r2, [pc, #144]	; (8018e34 <CoEnterMutexSection+0x170>)
 8018da2:	4413      	add	r3, r2
 8018da4:	60bb      	str	r3, [r7, #8]
                
                /* If the event waiting type is preemptive Priority           */
                if(pecb->eventSortType == EVENT_SORT_TYPE_PRIO)	
 8018da6:	68bb      	ldr	r3, [r7, #8]
 8018da8:	795b      	ldrb	r3, [r3, #5]
 8018daa:	f023 030f 	bic.w	r3, r3, #15
 8018dae:	b2db      	uxtb	r3, r3
 8018db0:	2b20      	cmp	r3, #32
 8018db2:	d106      	bne.n	8018dc2 <CoEnterMutexSection+0xfe>
                {
                    /* Remove the task from event waiting list                */
                    RemoveEventWaittingList(ptcb);
 8018db4:	6978      	ldr	r0, [r7, #20]
 8018db6:	f7fe fe71 	bl	8017a9c <RemoveEventWaittingList>
                    
                    /* Insert the task into event waiting list                */ 	
                    EventTaskToWait(pecb,ptcb);		
 8018dba:	6979      	ldr	r1, [r7, #20]
 8018dbc:	68b8      	ldr	r0, [r7, #8]
 8018dbe:	f7fe fd87 	bl	80178d0 <EventTaskToWait>
                }	
            }
#endif	
        }
        
        pCurTcb->state   = TASK_WAITING;    /* Block current task             */
 8018dc2:	693b      	ldr	r3, [r7, #16]
 8018dc4:	2202      	movs	r2, #2
 8018dc6:	715a      	strb	r2, [r3, #5]
		TaskSchedReq     = Co_TRUE;
 8018dc8:	4b1b      	ldr	r3, [pc, #108]	; (8018e38 <CoEnterMutexSection+0x174>)
 8018dca:	2201      	movs	r2, #1
 8018dcc:	701a      	strb	r2, [r3, #0]
        pCurTcb->TCBnext = Co_NULL;
 8018dce:	693b      	ldr	r3, [r7, #16]
 8018dd0:	2200      	movs	r2, #0
 8018dd2:	625a      	str	r2, [r3, #36]	; 0x24
        pCurTcb->TCBprev = Co_NULL;
 8018dd4:	693b      	ldr	r3, [r7, #16]
 8018dd6:	2200      	movs	r2, #0
 8018dd8:	629a      	str	r2, [r3, #40]	; 0x28
        
        ptcb = pMutex->waittingList;
 8018dda:	68fb      	ldr	r3, [r7, #12]
 8018ddc:	685b      	ldr	r3, [r3, #4]
 8018dde:	617b      	str	r3, [r7, #20]
        if(ptcb == Co_NULL)               /* If the event waiting list is empty  */
 8018de0:	697b      	ldr	r3, [r7, #20]
 8018de2:	2b00      	cmp	r3, #0
 8018de4:	d106      	bne.n	8018df4 <CoEnterMutexSection+0x130>
        {
            pMutex->waittingList = pCurTcb; /* Insert the task to head        */
 8018de6:	68fb      	ldr	r3, [r7, #12]
 8018de8:	693a      	ldr	r2, [r7, #16]
 8018dea:	605a      	str	r2, [r3, #4]
 8018dec:	e00f      	b.n	8018e0e <CoEnterMutexSection+0x14a>
        }
        else                        /* If the event waiting list is not empty */
        {            	
            while(ptcb->TCBnext != Co_NULL)    /* Insert the task to tail        */
            {
                ptcb = ptcb->TCBnext;		
 8018dee:	697b      	ldr	r3, [r7, #20]
 8018df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018df2:	617b      	str	r3, [r7, #20]
            while(ptcb->TCBnext != Co_NULL)    /* Insert the task to tail        */
 8018df4:	697b      	ldr	r3, [r7, #20]
 8018df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018df8:	2b00      	cmp	r3, #0
 8018dfa:	d1f8      	bne.n	8018dee <CoEnterMutexSection+0x12a>
            }
            ptcb->TCBnext    = pCurTcb;
 8018dfc:	697b      	ldr	r3, [r7, #20]
 8018dfe:	693a      	ldr	r2, [r7, #16]
 8018e00:	625a      	str	r2, [r3, #36]	; 0x24
            pCurTcb->TCBprev = ptcb;
 8018e02:	693b      	ldr	r3, [r7, #16]
 8018e04:	697a      	ldr	r2, [r7, #20]
 8018e06:	629a      	str	r2, [r3, #40]	; 0x28
            pCurTcb->TCBnext = Co_NULL;
 8018e08:	693b      	ldr	r3, [r7, #16]
 8018e0a:	2200      	movs	r2, #0
 8018e0c:	625a      	str	r2, [r3, #36]	; 0x24
        }
    }
    OsSchedUnlock();
 8018e0e:	f7fe fbd3 	bl	80175b8 <OsSchedUnlock>
    return E_OK;			
 8018e12:	2300      	movs	r3, #0
}
 8018e14:	4618      	mov	r0, r3
 8018e16:	3718      	adds	r7, #24
 8018e18:	46bd      	mov	sp, r7
 8018e1a:	bd80      	pop	{r7, pc}
 8018e1c:	20003748 	.word	0x20003748
 8018e20:	20003749 	.word	0x20003749
 8018e24:	2000d4f0 	.word	0x2000d4f0
 8018e28:	2000d728 	.word	0x2000d728
 8018e2c:	2000d4f4 	.word	0x2000d4f4
 8018e30:	2000d598 	.word	0x2000d598
 8018e34:	2000374c 	.word	0x2000374c
 8018e38:	2000374a 	.word	0x2000374a

08018e3c <CoLeaveMutexSection>:
 * @details    This function must be called when exiting from a critical area.	
 * @note 
 *******************************************************************************
 */
StatusType CoLeaveMutexSection(OS_MutexID mutexID)
{
 8018e3c:	b580      	push	{r7, lr}
 8018e3e:	b086      	sub	sp, #24
 8018e40:	af00      	add	r7, sp, #0
 8018e42:	4603      	mov	r3, r0
 8018e44:	71fb      	strb	r3, [r7, #7]
    P_OSTCB ptcb;
    P_MUTEX pMutex;
    U8      prio;
    U8      taskID;
    
    if(OSIntNesting > 0)                /* If the caller is ISR               */
 8018e46:	4b46      	ldr	r3, [pc, #280]	; (8018f60 <CoLeaveMutexSection+0x124>)
 8018e48:	781b      	ldrb	r3, [r3, #0]
 8018e4a:	b2db      	uxtb	r3, r3
 8018e4c:	2b00      	cmp	r3, #0
 8018e4e:	d001      	beq.n	8018e54 <CoLeaveMutexSection+0x18>
    {
        return E_CALL;
 8018e50:	2303      	movs	r3, #3
 8018e52:	e080      	b.n	8018f56 <CoLeaveMutexSection+0x11a>
    }

#if CFG_PAR_CHECKOUT_EN >0
    if(mutexID >= MutexFreeID)
 8018e54:	4b43      	ldr	r3, [pc, #268]	; (8018f64 <CoLeaveMutexSection+0x128>)
 8018e56:	781b      	ldrb	r3, [r3, #0]
 8018e58:	79fa      	ldrb	r2, [r7, #7]
 8018e5a:	429a      	cmp	r2, r3
 8018e5c:	d301      	bcc.n	8018e62 <CoLeaveMutexSection+0x26>
    {
        return E_INVALID_ID;            /* Invalid mutex id, return error     */
 8018e5e:	2301      	movs	r3, #1
 8018e60:	e079      	b.n	8018f56 <CoLeaveMutexSection+0x11a>
    }
#endif	
    OsSchedLock();
 8018e62:	4b41      	ldr	r3, [pc, #260]	; (8018f68 <CoLeaveMutexSection+0x12c>)
 8018e64:	781b      	ldrb	r3, [r3, #0]
 8018e66:	b2db      	uxtb	r3, r3
 8018e68:	3301      	adds	r3, #1
 8018e6a:	b2da      	uxtb	r2, r3
 8018e6c:	4b3e      	ldr	r3, [pc, #248]	; (8018f68 <CoLeaveMutexSection+0x12c>)
 8018e6e:	701a      	strb	r2, [r3, #0]
    pMutex = &MutexTbl[mutexID];        /* Obtain point of mutex control block*/   
 8018e70:	79fb      	ldrb	r3, [r7, #7]
 8018e72:	00db      	lsls	r3, r3, #3
 8018e74:	4a3d      	ldr	r2, [pc, #244]	; (8018f6c <CoLeaveMutexSection+0x130>)
 8018e76:	4413      	add	r3, r2
 8018e78:	60fb      	str	r3, [r7, #12]
    ptcb = &TCBTbl[pMutex->taskID];
 8018e7a:	68fb      	ldr	r3, [r7, #12]
 8018e7c:	789b      	ldrb	r3, [r3, #2]
 8018e7e:	461a      	mov	r2, r3
 8018e80:	4613      	mov	r3, r2
 8018e82:	005b      	lsls	r3, r3, #1
 8018e84:	4413      	add	r3, r2
 8018e86:	011b      	lsls	r3, r3, #4
 8018e88:	4a39      	ldr	r2, [pc, #228]	; (8018f70 <CoLeaveMutexSection+0x134>)
 8018e8a:	4413      	add	r3, r2
 8018e8c:	617b      	str	r3, [r7, #20]
	ptcb->mutexID = INVALID_ID;
 8018e8e:	697b      	ldr	r3, [r7, #20]
 8018e90:	22ff      	movs	r2, #255	; 0xff
 8018e92:	71da      	strb	r2, [r3, #7]
	if(pMutex->waittingList == Co_NULL)    /* If the mutex waiting list is empty */
 8018e94:	68fb      	ldr	r3, [r7, #12]
 8018e96:	685b      	ldr	r3, [r3, #4]
 8018e98:	2b00      	cmp	r3, #0
 8018e9a:	d108      	bne.n	8018eae <CoLeaveMutexSection+0x72>
    {
        pMutex->mutexFlag = MUTEX_FREE; /* The mutex resource is available    */
 8018e9c:	68fb      	ldr	r3, [r7, #12]
 8018e9e:	2200      	movs	r2, #0
 8018ea0:	705a      	strb	r2, [r3, #1]
        pMutex->taskID    = INVALID_ID;
 8018ea2:	68fb      	ldr	r3, [r7, #12]
 8018ea4:	22ff      	movs	r2, #255	; 0xff
 8018ea6:	709a      	strb	r2, [r3, #2]
        OsSchedUnlock();
 8018ea8:	f7fe fb86 	bl	80175b8 <OsSchedUnlock>
 8018eac:	e052      	b.n	8018f54 <CoLeaveMutexSection+0x118>
    }	
    else              /* If there is at least one task waitting for the mutex */
    { 
        taskID = pMutex->taskID;        /* Get task ID of mutex owner         */
 8018eae:	68fb      	ldr	r3, [r7, #12]
 8018eb0:	789b      	ldrb	r3, [r3, #2]
 8018eb2:	72fb      	strb	r3, [r7, #11]
        
                                /* we havn't promoted current task's priority */
        if(pMutex->hipriTaskID == taskID)   
 8018eb4:	68fb      	ldr	r3, [r7, #12]
 8018eb6:	78db      	ldrb	r3, [r3, #3]
 8018eb8:	7afa      	ldrb	r2, [r7, #11]
 8018eba:	429a      	cmp	r2, r3
 8018ebc:	d119      	bne.n	8018ef2 <CoLeaveMutexSection+0xb6>
        {
            ptcb = pMutex->waittingList;/* Point to mutex first waiting task  */		
 8018ebe:	68fb      	ldr	r3, [r7, #12]
 8018ec0:	685b      	ldr	r3, [r3, #4]
 8018ec2:	617b      	str	r3, [r7, #20]
            prio = ptcb->prio; 
 8018ec4:	697b      	ldr	r3, [r7, #20]
 8018ec6:	791b      	ldrb	r3, [r3, #4]
 8018ec8:	74fb      	strb	r3, [r7, #19]
            while(ptcb != Co_NULL)         /* Find the highest priority task     */
 8018eca:	e00e      	b.n	8018eea <CoLeaveMutexSection+0xae>
            {
                if(ptcb->prio < prio)  		
 8018ecc:	697b      	ldr	r3, [r7, #20]
 8018ece:	791b      	ldrb	r3, [r3, #4]
 8018ed0:	7cfa      	ldrb	r2, [r7, #19]
 8018ed2:	429a      	cmp	r2, r3
 8018ed4:	d906      	bls.n	8018ee4 <CoLeaveMutexSection+0xa8>
                {
                    prio = ptcb->prio;
 8018ed6:	697b      	ldr	r3, [r7, #20]
 8018ed8:	791b      	ldrb	r3, [r3, #4]
 8018eda:	74fb      	strb	r3, [r7, #19]
                    pMutex->hipriTaskID = ptcb->taskID;
 8018edc:	697b      	ldr	r3, [r7, #20]
 8018ede:	799a      	ldrb	r2, [r3, #6]
 8018ee0:	68fb      	ldr	r3, [r7, #12]
 8018ee2:	70da      	strb	r2, [r3, #3]
                }
                ptcb = ptcb->TCBnext;					
 8018ee4:	697b      	ldr	r3, [r7, #20]
 8018ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018ee8:	617b      	str	r3, [r7, #20]
            while(ptcb != Co_NULL)         /* Find the highest priority task     */
 8018eea:	697b      	ldr	r3, [r7, #20]
 8018eec:	2b00      	cmp	r3, #0
 8018eee:	d1ed      	bne.n	8018ecc <CoLeaveMutexSection+0x90>
 8018ef0:	e009      	b.n	8018f06 <CoLeaveMutexSection+0xca>
            }
        }
        else                     /* we have promoted current task's priority  */
        {
			prio = TCBTbl[taskID].prio;
 8018ef2:	7afa      	ldrb	r2, [r7, #11]
 8018ef4:	491e      	ldr	r1, [pc, #120]	; (8018f70 <CoLeaveMutexSection+0x134>)
 8018ef6:	4613      	mov	r3, r2
 8018ef8:	005b      	lsls	r3, r3, #1
 8018efa:	4413      	add	r3, r2
 8018efc:	011b      	lsls	r3, r3, #4
 8018efe:	440b      	add	r3, r1
 8018f00:	3304      	adds	r3, #4
 8018f02:	781b      	ldrb	r3, [r3, #0]
 8018f04:	74fb      	strb	r3, [r7, #19]
        }
        
        /* Reset the task priority */
		pMutex->taskID = INVALID_ID;	
 8018f06:	68fb      	ldr	r3, [r7, #12]
 8018f08:	22ff      	movs	r2, #255	; 0xff
 8018f0a:	709a      	strb	r2, [r3, #2]
		CoSetPriority(taskID,pMutex->originalPrio);
 8018f0c:	68fb      	ldr	r3, [r7, #12]
 8018f0e:	781a      	ldrb	r2, [r3, #0]
 8018f10:	7afb      	ldrb	r3, [r7, #11]
 8018f12:	4611      	mov	r1, r2
 8018f14:	4618      	mov	r0, r3
 8018f16:	f000 fed5 	bl	8019cc4 <CoSetPriority>
        
        /* Find first task in waiting list ready to run  */	
        ptcb                 = pMutex->waittingList; 		
 8018f1a:	68fb      	ldr	r3, [r7, #12]
 8018f1c:	685b      	ldr	r3, [r3, #4]
 8018f1e:	617b      	str	r3, [r7, #20]
        pMutex->waittingList = ptcb->TCBnext;	
 8018f20:	697b      	ldr	r3, [r7, #20]
 8018f22:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8018f24:	68fb      	ldr	r3, [r7, #12]
 8018f26:	605a      	str	r2, [r3, #4]
        pMutex->originalPrio = ptcb->prio;
 8018f28:	697b      	ldr	r3, [r7, #20]
 8018f2a:	791a      	ldrb	r2, [r3, #4]
 8018f2c:	68fb      	ldr	r3, [r7, #12]
 8018f2e:	701a      	strb	r2, [r3, #0]
        pMutex->taskID       = ptcb->taskID;
 8018f30:	697b      	ldr	r3, [r7, #20]
 8018f32:	799a      	ldrb	r2, [r3, #6]
 8018f34:	68fb      	ldr	r3, [r7, #12]
 8018f36:	709a      	strb	r2, [r3, #2]
			DeleteTaskPri(ptcb->prio);
			ActiveTaskPri(prio);			
		}
#endif	

        ptcb->prio           = prio;    /* Raise the task's priority          */       
 8018f38:	697b      	ldr	r3, [r7, #20]
 8018f3a:	7cfa      	ldrb	r2, [r7, #19]
 8018f3c:	711a      	strb	r2, [r3, #4]
        				   
        /* Insert the task which acquire the mutex into ready list.           */
        ptcb->TCBnext = Co_NULL;
 8018f3e:	697b      	ldr	r3, [r7, #20]
 8018f40:	2200      	movs	r2, #0
 8018f42:	625a      	str	r2, [r3, #36]	; 0x24
        ptcb->TCBprev = Co_NULL;
 8018f44:	697b      	ldr	r3, [r7, #20]
 8018f46:	2200      	movs	r2, #0
 8018f48:	629a      	str	r2, [r3, #40]	; 0x28

		InsertToTCBRdyList(ptcb);     /* Insert the task into the READY list  */
 8018f4a:	6978      	ldr	r0, [r7, #20]
 8018f4c:	f000 fdf2 	bl	8019b34 <InsertToTCBRdyList>
        OsSchedUnlock();
 8018f50:	f7fe fb32 	bl	80175b8 <OsSchedUnlock>
    }
    return E_OK;			
 8018f54:	2300      	movs	r3, #0
}
 8018f56:	4618      	mov	r0, r3
 8018f58:	3718      	adds	r7, #24
 8018f5a:	46bd      	mov	sp, r7
 8018f5c:	bd80      	pop	{r7, pc}
 8018f5e:	bf00      	nop
 8018f60:	20003748 	.word	0x20003748
 8018f64:	2000d4f0 	.word	0x2000d4f0
 8018f68:	20003749 	.word	0x20003749
 8018f6c:	2000d4f4 	.word	0x2000d4f4
 8018f70:	2000d598 	.word	0x2000d598

08018f74 <RemoveMutexList>:
 * @details   This function be called when delete a task.	
 * @note 
 *******************************************************************************
 */
void RemoveMutexList(P_OSTCB ptcb)
{
 8018f74:	b580      	push	{r7, lr}
 8018f76:	b086      	sub	sp, #24
 8018f78:	af00      	add	r7, sp, #0
 8018f7a:	6078      	str	r0, [r7, #4]
    U8 prio;
	OS_TID taskID;
    P_MUTEX pMutex;
    pMutex = &MutexTbl[ptcb->mutexID];
 8018f7c:	687b      	ldr	r3, [r7, #4]
 8018f7e:	79db      	ldrb	r3, [r3, #7]
 8018f80:	00db      	lsls	r3, r3, #3
 8018f82:	4a38      	ldr	r2, [pc, #224]	; (8019064 <RemoveMutexList+0xf0>)
 8018f84:	4413      	add	r3, r2
 8018f86:	613b      	str	r3, [r7, #16]
    
    /* If only one task waiting on mutex                                      */	
    if((ptcb->TCBnext ==Co_NULL) && (ptcb->TCBprev == Co_NULL))
 8018f88:	687b      	ldr	r3, [r7, #4]
 8018f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018f8c:	2b00      	cmp	r3, #0
 8018f8e:	d107      	bne.n	8018fa0 <RemoveMutexList+0x2c>
 8018f90:	687b      	ldr	r3, [r7, #4]
 8018f92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018f94:	2b00      	cmp	r3, #0
 8018f96:	d103      	bne.n	8018fa0 <RemoveMutexList+0x2c>
    {
        pMutex->waittingList = Co_NULL;     /* Waiting list is empty             */
 8018f98:	693b      	ldr	r3, [r7, #16]
 8018f9a:	2200      	movs	r2, #0
 8018f9c:	605a      	str	r2, [r3, #4]
 8018f9e:	e027      	b.n	8018ff0 <RemoveMutexList+0x7c>
    }
    else if(ptcb->TCBnext == Co_NULL)  /* If the task is the last of waiting list*/
 8018fa0:	687b      	ldr	r3, [r7, #4]
 8018fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018fa4:	2b00      	cmp	r3, #0
 8018fa6:	d107      	bne.n	8018fb8 <RemoveMutexList+0x44>
    {
        /* Remove task from mutex waiting list                                */
        ptcb->TCBprev->TCBnext = Co_NULL;
 8018fa8:	687b      	ldr	r3, [r7, #4]
 8018faa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018fac:	2200      	movs	r2, #0
 8018fae:	625a      	str	r2, [r3, #36]	; 0x24
        ptcb->TCBprev = Co_NULL;
 8018fb0:	687b      	ldr	r3, [r7, #4]
 8018fb2:	2200      	movs	r2, #0
 8018fb4:	629a      	str	r2, [r3, #40]	; 0x28
 8018fb6:	e01b      	b.n	8018ff0 <RemoveMutexList+0x7c>
    }	
    else if(ptcb->TCBprev ==  Co_NULL)/* If the task is the first of waiting list*/
 8018fb8:	687b      	ldr	r3, [r7, #4]
 8018fba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018fbc:	2b00      	cmp	r3, #0
 8018fbe:	d107      	bne.n	8018fd0 <RemoveMutexList+0x5c>
    {
        /* Remove task from waiting list                                      */
        ptcb->TCBnext->TCBprev = Co_NULL;
 8018fc0:	687b      	ldr	r3, [r7, #4]
 8018fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018fc4:	2200      	movs	r2, #0
 8018fc6:	629a      	str	r2, [r3, #40]	; 0x28
        ptcb->TCBnext = Co_NULL;
 8018fc8:	687b      	ldr	r3, [r7, #4]
 8018fca:	2200      	movs	r2, #0
 8018fcc:	625a      	str	r2, [r3, #36]	; 0x24
 8018fce:	e00f      	b.n	8018ff0 <RemoveMutexList+0x7c>
    }
    else                      /* If the task is in the middle of waiting list */
    {
        /* Remove task from wait list */
        ptcb->TCBnext->TCBprev = ptcb->TCBprev;
 8018fd0:	687b      	ldr	r3, [r7, #4]
 8018fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018fd4:	687a      	ldr	r2, [r7, #4]
 8018fd6:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8018fd8:	629a      	str	r2, [r3, #40]	; 0x28
        ptcb->TCBprev->TCBnext = ptcb->TCBnext;
 8018fda:	687b      	ldr	r3, [r7, #4]
 8018fdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018fde:	687a      	ldr	r2, [r7, #4]
 8018fe0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8018fe2:	625a      	str	r2, [r3, #36]	; 0x24
        ptcb->TCBprev          = Co_NULL;
 8018fe4:	687b      	ldr	r3, [r7, #4]
 8018fe6:	2200      	movs	r2, #0
 8018fe8:	629a      	str	r2, [r3, #40]	; 0x28
        ptcb->TCBnext          = Co_NULL;
 8018fea:	687b      	ldr	r3, [r7, #4]
 8018fec:	2200      	movs	r2, #0
 8018fee:	625a      	str	r2, [r3, #36]	; 0x24
    }
    
    ptcb->mutexID = INVALID_ID;
 8018ff0:	687b      	ldr	r3, [r7, #4]
 8018ff2:	22ff      	movs	r2, #255	; 0xff
 8018ff4:	71da      	strb	r2, [r3, #7]
    
    /* If the task have highest priority in mutex waiting list                */	
    if(pMutex->hipriTaskID == ptcb->taskID)						
 8018ff6:	693b      	ldr	r3, [r7, #16]
 8018ff8:	78da      	ldrb	r2, [r3, #3]
 8018ffa:	687b      	ldr	r3, [r7, #4]
 8018ffc:	799b      	ldrb	r3, [r3, #6]
 8018ffe:	429a      	cmp	r2, r3
 8019000:	d12b      	bne.n	801905a <RemoveMutexList+0xe6>
    {
        ptcb = pMutex->waittingList;
 8019002:	693b      	ldr	r3, [r7, #16]
 8019004:	685b      	ldr	r3, [r3, #4]
 8019006:	607b      	str	r3, [r7, #4]
        prio = pMutex->originalPrio; 
 8019008:	693b      	ldr	r3, [r7, #16]
 801900a:	781b      	ldrb	r3, [r3, #0]
 801900c:	75fb      	strb	r3, [r7, #23]
        pMutex->hipriTaskID = pMutex->taskID;
 801900e:	693b      	ldr	r3, [r7, #16]
 8019010:	789a      	ldrb	r2, [r3, #2]
 8019012:	693b      	ldr	r3, [r7, #16]
 8019014:	70da      	strb	r2, [r3, #3]
        while(ptcb != Co_NULL)           /* Find task ID of highest priority task*/
 8019016:	e00e      	b.n	8019036 <RemoveMutexList+0xc2>
        {
            if(ptcb->prio < prio)
 8019018:	687b      	ldr	r3, [r7, #4]
 801901a:	791b      	ldrb	r3, [r3, #4]
 801901c:	7dfa      	ldrb	r2, [r7, #23]
 801901e:	429a      	cmp	r2, r3
 8019020:	d906      	bls.n	8019030 <RemoveMutexList+0xbc>
            {
                prio = ptcb->prio;
 8019022:	687b      	ldr	r3, [r7, #4]
 8019024:	791b      	ldrb	r3, [r3, #4]
 8019026:	75fb      	strb	r3, [r7, #23]
                pMutex->hipriTaskID = ptcb->taskID;
 8019028:	687b      	ldr	r3, [r7, #4]
 801902a:	799a      	ldrb	r2, [r3, #6]
 801902c:	693b      	ldr	r3, [r7, #16]
 801902e:	70da      	strb	r2, [r3, #3]
            }
            ptcb = ptcb->TCBnext;			
 8019030:	687b      	ldr	r3, [r7, #4]
 8019032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019034:	607b      	str	r3, [r7, #4]
        while(ptcb != Co_NULL)           /* Find task ID of highest priority task*/
 8019036:	687b      	ldr	r3, [r7, #4]
 8019038:	2b00      	cmp	r3, #0
 801903a:	d1ed      	bne.n	8019018 <RemoveMutexList+0xa4>
        }
		taskID = pMutex->taskID;
 801903c:	693b      	ldr	r3, [r7, #16]
 801903e:	789b      	ldrb	r3, [r3, #2]
 8019040:	73fb      	strb	r3, [r7, #15]
		pMutex->taskID = INVALID_ID;
 8019042:	693b      	ldr	r3, [r7, #16]
 8019044:	22ff      	movs	r2, #255	; 0xff
 8019046:	709a      	strb	r2, [r3, #2]
		CoSetPriority(taskID,prio);         /* Reset the mutex ower priority  */
 8019048:	7dfa      	ldrb	r2, [r7, #23]
 801904a:	7bfb      	ldrb	r3, [r7, #15]
 801904c:	4611      	mov	r1, r2
 801904e:	4618      	mov	r0, r3
 8019050:	f000 fe38 	bl	8019cc4 <CoSetPriority>
		pMutex->taskID = taskID;
 8019054:	693b      	ldr	r3, [r7, #16]
 8019056:	7bfa      	ldrb	r2, [r7, #15]
 8019058:	709a      	strb	r2, [r3, #2]
    }
}
 801905a:	bf00      	nop
 801905c:	3718      	adds	r7, #24
 801905e:	46bd      	mov	sp, r7
 8019060:	bd80      	pop	{r7, pc}
 8019062:	bf00      	nop
 8019064:	2000d4f4 	.word	0x2000d4f4

08019068 <Inc8>:
 * @details    This function is called to Plus a byte integers 
 *             and Saved into memory cell.
 ******************************************************************************
 */
U8 Inc8 (volatile U8 *data)
{
 8019068:	b490      	push	{r4, r7}
 801906a:	b082      	sub	sp, #8
 801906c:	af00      	add	r7, sp, #0
 801906e:	6078      	str	r0, [r7, #4]
  register U8  result = 0;
 8019070:	2400      	movs	r4, #0
  
  __asm volatile 
 8019072:	687b      	ldr	r3, [r7, #4]
 8019074:	b402      	push	{r1}
 8019076:	b672      	cpsid	i
 8019078:	7819      	ldrb	r1, [r3, #0]
 801907a:	f101 0101 	add.w	r1, r1, #1
 801907e:	7019      	strb	r1, [r3, #0]
 8019080:	b662      	cpsie	i
 8019082:	f1a1 0101 	sub.w	r1, r1, #1
 8019086:	000b      	movs	r3, r1
 8019088:	bc02      	pop	{r1}
 801908a:	b2dc      	uxtb	r4, r3
      " MOVS    %0,R1    \n"
      " POP     {R1}     \n"
      :"=r"(result)
      :"r"(data)
  );
  return (result);
 801908c:	4623      	mov	r3, r4
  
}
 801908e:	4618      	mov	r0, r3
 8019090:	3708      	adds	r7, #8
 8019092:	46bd      	mov	sp, r7
 8019094:	bc90      	pop	{r4, r7}
 8019096:	4770      	bx	lr

08019098 <Dec8>:
 * @details    This function is called to Decrease a byte integers 
 *             and Saved into memory cell.
 ******************************************************************************
 */
U8 Dec8 (volatile U8 *data)
{
 8019098:	b490      	push	{r4, r7}
 801909a:	b082      	sub	sp, #8
 801909c:	af00      	add	r7, sp, #0
 801909e:	6078      	str	r0, [r7, #4]
  register U8  result = 0;
 80190a0:	2400      	movs	r4, #0
  __asm volatile 
 80190a2:	687b      	ldr	r3, [r7, #4]
 80190a4:	b402      	push	{r1}
 80190a6:	b672      	cpsid	i
 80190a8:	7819      	ldrb	r1, [r3, #0]
 80190aa:	f1a1 0101 	sub.w	r1, r1, #1
 80190ae:	7019      	strb	r1, [r3, #0]
 80190b0:	b662      	cpsie	i
 80190b2:	000b      	movs	r3, r1
 80190b4:	bc02      	pop	{r1}
 80190b6:	b2dc      	uxtb	r4, r3
      " MOVS    %0,R1    \n"
      " POP     {R1}     \n"
      :"=r"(result)
      :"r"(data)
  ); 
  return (result); 
 80190b8:	4623      	mov	r3, r4
}
 80190ba:	4618      	mov	r0, r3
 80190bc:	3708      	adds	r7, #8
 80190be:	46bd      	mov	sp, r7
 80190c0:	bc90      	pop	{r4, r7}
 80190c2:	4770      	bx	lr

080190c4 <IRQ_ENABLE_RESTORE>:
 * @par Description
 * @details    This function is called to ENABLE Interrupt.
 ******************************************************************************
 */
void IRQ_ENABLE_RESTORE(void)
{ 
 80190c4:	b480      	push	{r7}
 80190c6:	af00      	add	r7, sp, #0
  __asm volatile 
 80190c8:	b662      	cpsie	i
  (
      " CPSIE   I        \n"
  );	
  return;
 80190ca:	bf00      	nop
}
 80190cc:	46bd      	mov	sp, r7
 80190ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80190d2:	4770      	bx	lr

080190d4 <IRQ_DISABLE_SAVE>:
 * @par Description
 * @details    This function is called to close Interrupt.
 ******************************************************************************
 */
void IRQ_DISABLE_SAVE(void)
{  
 80190d4:	b480      	push	{r7}
 80190d6:	af00      	add	r7, sp, #0
  __asm volatile 
 80190d8:	b672      	cpsid	i
  (
      " CPSID   I        \n"
  );	
  return;
 80190da:	bf00      	nop
}
 80190dc:	46bd      	mov	sp, r7
 80190de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80190e2:	4770      	bx	lr

080190e4 <SetEnvironment>:
 *              for Coocox OS running.
 ******************************************************************************
 */
void SetEnvironment (OS_STK *pstk)
{
    __asm volatile
 80190e4:	f1a0 001c 	sub.w	r0, r0, #28
 80190e8:	f380 8809 	msr	PSP, r0
 80190ec:	4770      	bx	lr
#endif
       " MSR    PSP,R0 \n"
       " BX      LR               \n"
    );
  
}
 80190ee:	bf00      	nop

080190f0 <SwitchContext>:
 *              Switch Context for task change
 ******************************************************************************
 */
void SwitchContext(void)
{
  __asm volatile
 80190f0:	4b0f      	ldr	r3, [pc, #60]	; (8019130 <exitPendSV+0x10>)
 80190f2:	681b      	ldr	r3, [r3, #0]
 80190f4:	4a0f      	ldr	r2, [pc, #60]	; (8019134 <exitPendSV+0x14>)
 80190f6:	6811      	ldr	r1, [r2, #0]
 80190f8:	6019      	str	r1, [r3, #0]
 80190fa:	4770      	bx	lr
	  " LDR     R1,[R2]            \n"
      " STR     R1, [R3]           \n"
      " BX      LR               \n"   
  );
 
}
 80190fc:	bf00      	nop

080190fe <PendSV_Handler>:

#if CFG_CHIP_TYPE == 1 || 3 == CFG_CHIP_TYPE
void PendSV_Handler(void)
{
////////debug block /////////////////////////
  __asm volatile
 80190fe:	4b0e      	ldr	r3, [pc, #56]	; (8019138 <exitPendSV+0x18>)
 8019100:	6819      	ldr	r1, [r3, #0]
 8019102:	4a0e      	ldr	r2, [pc, #56]	; (801913c <exitPendSV+0x1c>)
 8019104:	6812      	ldr	r2, [r2, #0]
 8019106:	4291      	cmp	r1, r2
 8019108:	d00a      	beq.n	8019120 <exitPendSV>
 801910a:	f3ef 8009 	mrs	r0, PSP
 801910e:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8019112:	6008      	str	r0, [r1, #0]
 8019114:	601a      	str	r2, [r3, #0]
 8019116:	6810      	ldr	r0, [r2, #0]
 8019118:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 801911c:	f380 8809 	msr	PSP, r0

08019120 <exitPendSV>:
 8019120:	4b07      	ldr	r3, [pc, #28]	; (8019140 <exitPendSV+0x20>)
 8019122:	2000      	movs	r0, #0
 8019124:	7018      	strb	r0, [r3, #0]
 8019126:	f04e 0e04 	orr.w	lr, lr, #4
 801912a:	4770      	bx	lr
#if CFG_CHIP_TYPE == 3
    " LDR    LR,=0xFFFFFFED \n"
#endif
    " BX     LR             \n"    // Exit interrupt
  );
}
 801912c:	bf00      	nop
 801912e:	0000      	.short	0x0000
 8019130:	20000104 	.word	0x20000104
 8019134:	20000108 	.word	0x20000108
 8019138:	2000d728 	.word	0x2000d728
 801913c:	2000d724 	.word	0x2000d724
 8019140:	20003749 	.word	0x20003749

08019144 <CoCreateQueue>:
 * @details    This function is called to create a queue. 
 * @note 
 *******************************************************************************
 */			 		   
OS_EventID CoCreateQueue(void **qStart, U16 size ,U8 sortType)
{
 8019144:	b580      	push	{r7, lr}
 8019146:	b084      	sub	sp, #16
 8019148:	af00      	add	r7, sp, #0
 801914a:	6078      	str	r0, [r7, #4]
 801914c:	460b      	mov	r3, r1
 801914e:	807b      	strh	r3, [r7, #2]
 8019150:	4613      	mov	r3, r2
 8019152:	707b      	strb	r3, [r7, #1]
    U8    i;  
    P_ECB pecb;

#if CFG_PAR_CHECKOUT_EN >0	
    if((qStart == Co_NULL) || (size == 0))
 8019154:	687b      	ldr	r3, [r7, #4]
 8019156:	2b00      	cmp	r3, #0
 8019158:	d002      	beq.n	8019160 <CoCreateQueue+0x1c>
 801915a:	887b      	ldrh	r3, [r7, #2]
 801915c:	2b00      	cmp	r3, #0
 801915e:	d101      	bne.n	8019164 <CoCreateQueue+0x20>
    {
        return E_CREATE_FAIL;
 8019160:	23ff      	movs	r3, #255	; 0xff
 8019162:	e063      	b.n	801922c <CoCreateQueue+0xe8>
    }
#endif

    OsSchedLock();
 8019164:	4b33      	ldr	r3, [pc, #204]	; (8019234 <CoCreateQueue+0xf0>)
 8019166:	781b      	ldrb	r3, [r3, #0]
 8019168:	b2db      	uxtb	r3, r3
 801916a:	3301      	adds	r3, #1
 801916c:	b2da      	uxtb	r2, r3
 801916e:	4b31      	ldr	r3, [pc, #196]	; (8019234 <CoCreateQueue+0xf0>)
 8019170:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < CFG_MAX_QUEUE; i++)
 8019172:	2300      	movs	r3, #0
 8019174:	73fb      	strb	r3, [r7, #15]
 8019176:	e053      	b.n	8019220 <CoCreateQueue+0xdc>
    {
        /* Assign a free QUEUE control block                                  */
        if((QueueIDVessel & (1 << i)) == 0)	
 8019178:	7bfb      	ldrb	r3, [r7, #15]
 801917a:	2201      	movs	r2, #1
 801917c:	fa02 f303 	lsl.w	r3, r2, r3
 8019180:	461a      	mov	r2, r3
 8019182:	4b2d      	ldr	r3, [pc, #180]	; (8019238 <CoCreateQueue+0xf4>)
 8019184:	681b      	ldr	r3, [r3, #0]
 8019186:	4013      	ands	r3, r2
 8019188:	2b00      	cmp	r3, #0
 801918a:	d146      	bne.n	801921a <CoCreateQueue+0xd6>
        {
            QueueIDVessel |= (1<<i);		
 801918c:	7bfb      	ldrb	r3, [r7, #15]
 801918e:	2201      	movs	r2, #1
 8019190:	fa02 f303 	lsl.w	r3, r2, r3
 8019194:	461a      	mov	r2, r3
 8019196:	4b28      	ldr	r3, [pc, #160]	; (8019238 <CoCreateQueue+0xf4>)
 8019198:	681b      	ldr	r3, [r3, #0]
 801919a:	4313      	orrs	r3, r2
 801919c:	4a26      	ldr	r2, [pc, #152]	; (8019238 <CoCreateQueue+0xf4>)
 801919e:	6013      	str	r3, [r2, #0]
            OsSchedUnlock();
 80191a0:	f7fe fa0a 	bl	80175b8 <OsSchedUnlock>
            
            QueueTbl[i].qStart   = qStart;  /* Initialize the queue           */
 80191a4:	7bfb      	ldrb	r3, [r7, #15]
 80191a6:	4a25      	ldr	r2, [pc, #148]	; (801923c <CoCreateQueue+0xf8>)
 80191a8:	011b      	lsls	r3, r3, #4
 80191aa:	4413      	add	r3, r2
 80191ac:	687a      	ldr	r2, [r7, #4]
 80191ae:	601a      	str	r2, [r3, #0]
            QueueTbl[i].id       = i;
 80191b0:	7bfb      	ldrb	r3, [r7, #15]
 80191b2:	4a22      	ldr	r2, [pc, #136]	; (801923c <CoCreateQueue+0xf8>)
 80191b4:	011b      	lsls	r3, r3, #4
 80191b6:	4413      	add	r3, r2
 80191b8:	3304      	adds	r3, #4
 80191ba:	7bfa      	ldrb	r2, [r7, #15]
 80191bc:	701a      	strb	r2, [r3, #0]
            QueueTbl[i].head     = 0;
 80191be:	7bfb      	ldrb	r3, [r7, #15]
 80191c0:	4a1e      	ldr	r2, [pc, #120]	; (801923c <CoCreateQueue+0xf8>)
 80191c2:	011b      	lsls	r3, r3, #4
 80191c4:	4413      	add	r3, r2
 80191c6:	3306      	adds	r3, #6
 80191c8:	2200      	movs	r2, #0
 80191ca:	801a      	strh	r2, [r3, #0]
            QueueTbl[i].tail     = 0;
 80191cc:	7bfb      	ldrb	r3, [r7, #15]
 80191ce:	4a1b      	ldr	r2, [pc, #108]	; (801923c <CoCreateQueue+0xf8>)
 80191d0:	011b      	lsls	r3, r3, #4
 80191d2:	4413      	add	r3, r2
 80191d4:	3308      	adds	r3, #8
 80191d6:	2200      	movs	r2, #0
 80191d8:	801a      	strh	r2, [r3, #0]
            QueueTbl[i].qMaxSize = size; 
 80191da:	7bfb      	ldrb	r3, [r7, #15]
 80191dc:	4a17      	ldr	r2, [pc, #92]	; (801923c <CoCreateQueue+0xf8>)
 80191de:	011b      	lsls	r3, r3, #4
 80191e0:	4413      	add	r3, r2
 80191e2:	330a      	adds	r3, #10
 80191e4:	887a      	ldrh	r2, [r7, #2]
 80191e6:	801a      	strh	r2, [r3, #0]
            QueueTbl[i].qSize    = 0;
 80191e8:	7bfb      	ldrb	r3, [r7, #15]
 80191ea:	4a14      	ldr	r2, [pc, #80]	; (801923c <CoCreateQueue+0xf8>)
 80191ec:	011b      	lsls	r3, r3, #4
 80191ee:	4413      	add	r3, r2
 80191f0:	330c      	adds	r3, #12
 80191f2:	2200      	movs	r2, #0
 80191f4:	801a      	strh	r2, [r3, #0]
            
            /* Get a event control block and initial the event content        */
            pecb = CreatEvent(EVENT_TYPE_QUEUE,sortType,&QueueTbl[i]);
 80191f6:	7bfb      	ldrb	r3, [r7, #15]
 80191f8:	011b      	lsls	r3, r3, #4
 80191fa:	4a10      	ldr	r2, [pc, #64]	; (801923c <CoCreateQueue+0xf8>)
 80191fc:	441a      	add	r2, r3
 80191fe:	787b      	ldrb	r3, [r7, #1]
 8019200:	4619      	mov	r1, r3
 8019202:	2003      	movs	r0, #3
 8019204:	f7fe fadc 	bl	80177c0 <CreatEvent>
 8019208:	60b8      	str	r0, [r7, #8]
            
            if(pecb == Co_NULL )       /* If there is no free EVENT control block*/
 801920a:	68bb      	ldr	r3, [r7, #8]
 801920c:	2b00      	cmp	r3, #0
 801920e:	d101      	bne.n	8019214 <CoCreateQueue+0xd0>
            {
                return E_CREATE_FAIL;
 8019210:	23ff      	movs	r3, #255	; 0xff
 8019212:	e00b      	b.n	801922c <CoCreateQueue+0xe8>
            }
            return (pecb->id);		
 8019214:	68bb      	ldr	r3, [r7, #8]
 8019216:	791b      	ldrb	r3, [r3, #4]
 8019218:	e008      	b.n	801922c <CoCreateQueue+0xe8>
    for(i = 0; i < CFG_MAX_QUEUE; i++)
 801921a:	7bfb      	ldrb	r3, [r7, #15]
 801921c:	3301      	adds	r3, #1
 801921e:	73fb      	strb	r3, [r7, #15]
 8019220:	7bfb      	ldrb	r3, [r7, #15]
 8019222:	2b01      	cmp	r3, #1
 8019224:	d9a8      	bls.n	8019178 <CoCreateQueue+0x34>
        }
    }
    
    OsSchedUnlock();
 8019226:	f7fe f9c7 	bl	80175b8 <OsSchedUnlock>
    return E_CREATE_FAIL;             /* There is no free QUEUE control block */	
 801922a:	23ff      	movs	r3, #255	; 0xff
}
 801922c:	4618      	mov	r0, r3
 801922e:	3710      	adds	r7, #16
 8019230:	46bd      	mov	sp, r7
 8019232:	bd80      	pop	{r7, pc}
 8019234:	20003749 	.word	0x20003749
 8019238:	2000d564 	.word	0x2000d564
 801923c:	2000d544 	.word	0x2000d544

08019240 <CoDelQueue>:
 * @details    This function is called to delete a queue. 
 * @note 
 *******************************************************************************
 */
StatusType CoDelQueue(OS_EventID id,U8 opt)
{
 8019240:	b580      	push	{r7, lr}
 8019242:	b086      	sub	sp, #24
 8019244:	af00      	add	r7, sp, #0
 8019246:	4603      	mov	r3, r0
 8019248:	460a      	mov	r2, r1
 801924a:	71fb      	strb	r3, [r7, #7]
 801924c:	4613      	mov	r3, r2
 801924e:	71bb      	strb	r3, [r7, #6]
    P_ECB   pecb;
    P_QCB   pqcb;
    StatusType err;
#if CFG_PAR_CHECKOUT_EN >0      
    if(id >= CFG_MAX_EVENT)	                     
 8019250:	79fb      	ldrb	r3, [r7, #7]
 8019252:	2b13      	cmp	r3, #19
 8019254:	d901      	bls.n	801925a <CoDelQueue+0x1a>
    {
        return E_INVALID_ID;            /* Invalid id,return error            */
 8019256:	2301      	movs	r3, #1
 8019258:	e038      	b.n	80192cc <CoDelQueue+0x8c>
    }
#endif

    pecb = &EventTbl[id];
 801925a:	79fb      	ldrb	r3, [r7, #7]
 801925c:	011b      	lsls	r3, r3, #4
 801925e:	4a1d      	ldr	r2, [pc, #116]	; (80192d4 <CoDelQueue+0x94>)
 8019260:	4413      	add	r3, r2
 8019262:	617b      	str	r3, [r7, #20]
#if CFG_PAR_CHECKOUT_EN >0
    if( pecb->eventType != EVENT_TYPE_QUEUE)
 8019264:	697b      	ldr	r3, [r7, #20]
 8019266:	795b      	ldrb	r3, [r3, #5]
 8019268:	f003 030f 	and.w	r3, r3, #15
 801926c:	b2db      	uxtb	r3, r3
 801926e:	2b03      	cmp	r3, #3
 8019270:	d001      	beq.n	8019276 <CoDelQueue+0x36>
    {
        return E_INVALID_ID;            /* The event is not queue,return error*/	
 8019272:	2301      	movs	r3, #1
 8019274:	e02a      	b.n	80192cc <CoDelQueue+0x8c>
    }
#endif
    pqcb = (P_QCB)pecb->eventPtr;       /* Point at queue control block       */
 8019276:	697b      	ldr	r3, [r7, #20]
 8019278:	681b      	ldr	r3, [r3, #0]
 801927a:	613b      	str	r3, [r7, #16]
    err  = DeleteEvent(pecb,opt);       /* Delete the event control block     */
 801927c:	79bb      	ldrb	r3, [r7, #6]
 801927e:	4619      	mov	r1, r3
 8019280:	6978      	ldr	r0, [r7, #20]
 8019282:	f7fe fadf 	bl	8017844 <DeleteEvent>
 8019286:	4603      	mov	r3, r0
 8019288:	73fb      	strb	r3, [r7, #15]
    if(err == E_OK)                   /* If the event block have been deleted */
 801928a:	7bfb      	ldrb	r3, [r7, #15]
 801928c:	2b00      	cmp	r3, #0
 801928e:	d11c      	bne.n	80192ca <CoDelQueue+0x8a>
    {
        QueueIDVessel &= ~((U32)(1<<(pqcb->id)));   /* Update free queue list             */
 8019290:	693b      	ldr	r3, [r7, #16]
 8019292:	791b      	ldrb	r3, [r3, #4]
 8019294:	461a      	mov	r2, r3
 8019296:	2301      	movs	r3, #1
 8019298:	4093      	lsls	r3, r2
 801929a:	43da      	mvns	r2, r3
 801929c:	4b0e      	ldr	r3, [pc, #56]	; (80192d8 <CoDelQueue+0x98>)
 801929e:	681b      	ldr	r3, [r3, #0]
 80192a0:	4013      	ands	r3, r2
 80192a2:	4a0d      	ldr	r2, [pc, #52]	; (80192d8 <CoDelQueue+0x98>)
 80192a4:	6013      	str	r3, [r2, #0]
        pqcb->qStart   = Co_NULL;
 80192a6:	693b      	ldr	r3, [r7, #16]
 80192a8:	2200      	movs	r2, #0
 80192aa:	601a      	str	r2, [r3, #0]
		    pqcb->id       = 0;
 80192ac:	693b      	ldr	r3, [r7, #16]
 80192ae:	2200      	movs	r2, #0
 80192b0:	711a      	strb	r2, [r3, #4]
        pqcb->head     = 0;
 80192b2:	693b      	ldr	r3, [r7, #16]
 80192b4:	2200      	movs	r2, #0
 80192b6:	80da      	strh	r2, [r3, #6]
        pqcb->tail     = 0;
 80192b8:	693b      	ldr	r3, [r7, #16]
 80192ba:	2200      	movs	r2, #0
 80192bc:	811a      	strh	r2, [r3, #8]
        pqcb->qMaxSize = 0;
 80192be:	693b      	ldr	r3, [r7, #16]
 80192c0:	2200      	movs	r2, #0
 80192c2:	815a      	strh	r2, [r3, #10]
        pqcb->qSize    = 0;
 80192c4:	693b      	ldr	r3, [r7, #16]
 80192c6:	2200      	movs	r2, #0
 80192c8:	819a      	strh	r2, [r3, #12]
    }
    return err;	
 80192ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80192cc:	4618      	mov	r0, r3
 80192ce:	3718      	adds	r7, #24
 80192d0:	46bd      	mov	sp, r7
 80192d2:	bd80      	pop	{r7, pc}
 80192d4:	2000374c 	.word	0x2000374c
 80192d8:	2000d564 	.word	0x2000d564

080192dc <CoAcceptQueueMail>:
 * @details    This function is called to accept a mail from queue.
 * @note 
 *******************************************************************************
 */
void* CoAcceptQueueMail(OS_EventID id,StatusType* perr)
{
 80192dc:	b580      	push	{r7, lr}
 80192de:	b086      	sub	sp, #24
 80192e0:	af00      	add	r7, sp, #0
 80192e2:	4603      	mov	r3, r0
 80192e4:	6039      	str	r1, [r7, #0]
 80192e6:	71fb      	strb	r3, [r7, #7]
  P_ECB pecb;
  P_QCB pqcb;
  void* pmail;
#if CFG_PAR_CHECKOUT_EN >0
    if(id >= CFG_MAX_EVENT)             
 80192e8:	79fb      	ldrb	r3, [r7, #7]
 80192ea:	2b13      	cmp	r3, #19
 80192ec:	d904      	bls.n	80192f8 <CoAcceptQueueMail+0x1c>
    {
        *perr = E_INVALID_ID;           /* Invalid id,return error            */
 80192ee:	683b      	ldr	r3, [r7, #0]
 80192f0:	2201      	movs	r2, #1
 80192f2:	701a      	strb	r2, [r3, #0]
        return Co_NULL;
 80192f4:	2300      	movs	r3, #0
 80192f6:	e048      	b.n	801938a <CoAcceptQueueMail+0xae>
    }
#endif

    pecb = &EventTbl[id];
 80192f8:	79fb      	ldrb	r3, [r7, #7]
 80192fa:	011b      	lsls	r3, r3, #4
 80192fc:	4a25      	ldr	r2, [pc, #148]	; (8019394 <CoAcceptQueueMail+0xb8>)
 80192fe:	4413      	add	r3, r2
 8019300:	617b      	str	r3, [r7, #20]
#if CFG_PAR_CHECKOUT_EN >0
    if(pecb->eventType != EVENT_TYPE_QUEUE)/* Invalid event control block type*/          		
 8019302:	697b      	ldr	r3, [r7, #20]
 8019304:	795b      	ldrb	r3, [r3, #5]
 8019306:	f003 030f 	and.w	r3, r3, #15
 801930a:	b2db      	uxtb	r3, r3
 801930c:	2b03      	cmp	r3, #3
 801930e:	d004      	beq.n	801931a <CoAcceptQueueMail+0x3e>
    {
        *perr = E_INVALID_ID;
 8019310:	683b      	ldr	r3, [r7, #0]
 8019312:	2201      	movs	r2, #1
 8019314:	701a      	strb	r2, [r3, #0]
        return Co_NULL;
 8019316:	2300      	movs	r3, #0
 8019318:	e037      	b.n	801938a <CoAcceptQueueMail+0xae>
    }
#endif	
    pqcb = (P_QCB)pecb->eventPtr;       /* Point at queue control block       */
 801931a:	697b      	ldr	r3, [r7, #20]
 801931c:	681b      	ldr	r3, [r3, #0]
 801931e:	613b      	str	r3, [r7, #16]
	OsSchedLock();
 8019320:	4b1d      	ldr	r3, [pc, #116]	; (8019398 <CoAcceptQueueMail+0xbc>)
 8019322:	781b      	ldrb	r3, [r3, #0]
 8019324:	b2db      	uxtb	r3, r3
 8019326:	3301      	adds	r3, #1
 8019328:	b2da      	uxtb	r2, r3
 801932a:	4b1b      	ldr	r3, [pc, #108]	; (8019398 <CoAcceptQueueMail+0xbc>)
 801932c:	701a      	strb	r2, [r3, #0]
    if(pqcb->qSize != 0)            /* If there are any messages in the queue */
 801932e:	693b      	ldr	r3, [r7, #16]
 8019330:	899b      	ldrh	r3, [r3, #12]
 8019332:	2b00      	cmp	r3, #0
 8019334:	d023      	beq.n	801937e <CoAcceptQueueMail+0xa2>
    {
        /* Extract oldest message from the queue */
        pmail = *(pqcb->qStart + pqcb->head);  
 8019336:	693b      	ldr	r3, [r7, #16]
 8019338:	681a      	ldr	r2, [r3, #0]
 801933a:	693b      	ldr	r3, [r7, #16]
 801933c:	88db      	ldrh	r3, [r3, #6]
 801933e:	009b      	lsls	r3, r3, #2
 8019340:	4413      	add	r3, r2
 8019342:	681b      	ldr	r3, [r3, #0]
 8019344:	60fb      	str	r3, [r7, #12]
        pqcb->head++;                   /* Update the queue head              */ 
 8019346:	693b      	ldr	r3, [r7, #16]
 8019348:	88db      	ldrh	r3, [r3, #6]
 801934a:	3301      	adds	r3, #1
 801934c:	b29a      	uxth	r2, r3
 801934e:	693b      	ldr	r3, [r7, #16]
 8019350:	80da      	strh	r2, [r3, #6]
        pqcb->qSize--;          /* Update the number of messages in the queue */  
 8019352:	693b      	ldr	r3, [r7, #16]
 8019354:	899b      	ldrh	r3, [r3, #12]
 8019356:	3b01      	subs	r3, #1
 8019358:	b29a      	uxth	r2, r3
 801935a:	693b      	ldr	r3, [r7, #16]
 801935c:	819a      	strh	r2, [r3, #12]
        if(pqcb->head == pqcb->qMaxSize)
 801935e:	693b      	ldr	r3, [r7, #16]
 8019360:	88da      	ldrh	r2, [r3, #6]
 8019362:	693b      	ldr	r3, [r7, #16]
 8019364:	895b      	ldrh	r3, [r3, #10]
 8019366:	429a      	cmp	r2, r3
 8019368:	d102      	bne.n	8019370 <CoAcceptQueueMail+0x94>
        {
            pqcb->head = 0;	
 801936a:	693b      	ldr	r3, [r7, #16]
 801936c:	2200      	movs	r2, #0
 801936e:	80da      	strh	r2, [r3, #6]
        }
		OsSchedUnlock();
 8019370:	f7fe f922 	bl	80175b8 <OsSchedUnlock>
        *perr = E_OK;
 8019374:	683b      	ldr	r3, [r7, #0]
 8019376:	2200      	movs	r2, #0
 8019378:	701a      	strb	r2, [r3, #0]
        return pmail;                   /* Return message received            */
 801937a:	68fb      	ldr	r3, [r7, #12]
 801937c:	e005      	b.n	801938a <CoAcceptQueueMail+0xae>
    }
    else                                /* If there is no message in the queue*/
    {
		OsSchedUnlock();
 801937e:	f7fe f91b 	bl	80175b8 <OsSchedUnlock>
        *perr = E_QUEUE_EMPTY;                 
 8019382:	683b      	ldr	r3, [r7, #0]
 8019384:	220b      	movs	r2, #11
 8019386:	701a      	strb	r2, [r3, #0]
        return Co_NULL;                    /* Return Co_NULL                        */
 8019388:	2300      	movs	r3, #0
    }	
}
 801938a:	4618      	mov	r0, r3
 801938c:	3718      	adds	r7, #24
 801938e:	46bd      	mov	sp, r7
 8019390:	bd80      	pop	{r7, pc}
 8019392:	bf00      	nop
 8019394:	2000374c 	.word	0x2000374c
 8019398:	20003749 	.word	0x20003749

0801939c <CoPendQueueMail>:
 * @details    This function is called to wait for a mail.		   	
 * @note 
 *******************************************************************************
 */
void* CoPendQueueMail(OS_EventID id,U32 timeout,StatusType* perr)
{
 801939c:	b580      	push	{r7, lr}
 801939e:	b088      	sub	sp, #32
 80193a0:	af00      	add	r7, sp, #0
 80193a2:	4603      	mov	r3, r0
 80193a4:	60b9      	str	r1, [r7, #8]
 80193a6:	607a      	str	r2, [r7, #4]
 80193a8:	73fb      	strb	r3, [r7, #15]
    P_ECB   pecb;
    P_QCB   pqcb;
    P_OSTCB curTCB;
    void*   pmail;
    if(OSIntNesting > 0)                /* If the caller is ISR               */
 80193aa:	4b6d      	ldr	r3, [pc, #436]	; (8019560 <CoPendQueueMail+0x1c4>)
 80193ac:	781b      	ldrb	r3, [r3, #0]
 80193ae:	b2db      	uxtb	r3, r3
 80193b0:	2b00      	cmp	r3, #0
 80193b2:	d004      	beq.n	80193be <CoPendQueueMail+0x22>
    {
        *perr = E_CALL;
 80193b4:	687b      	ldr	r3, [r7, #4]
 80193b6:	2203      	movs	r2, #3
 80193b8:	701a      	strb	r2, [r3, #0]
        return Co_NULL;
 80193ba:	2300      	movs	r3, #0
 80193bc:	e0cb      	b.n	8019556 <CoPendQueueMail+0x1ba>
    }
#if CFG_PAR_CHECKOUT_EN >0
    if(id >= CFG_MAX_EVENT)	         
 80193be:	7bfb      	ldrb	r3, [r7, #15]
 80193c0:	2b13      	cmp	r3, #19
 80193c2:	d904      	bls.n	80193ce <CoPendQueueMail+0x32>
    {
        *perr = E_INVALID_ID;           /* Invalid event id,return error      */
 80193c4:	687b      	ldr	r3, [r7, #4]
 80193c6:	2201      	movs	r2, #1
 80193c8:	701a      	strb	r2, [r3, #0]
        return Co_NULL;
 80193ca:	2300      	movs	r3, #0
 80193cc:	e0c3      	b.n	8019556 <CoPendQueueMail+0x1ba>
    }
#endif

    pecb = &EventTbl[id];
 80193ce:	7bfb      	ldrb	r3, [r7, #15]
 80193d0:	011b      	lsls	r3, r3, #4
 80193d2:	4a64      	ldr	r2, [pc, #400]	; (8019564 <CoPendQueueMail+0x1c8>)
 80193d4:	4413      	add	r3, r2
 80193d6:	61fb      	str	r3, [r7, #28]
#if CFG_PAR_CHECKOUT_EN >0
    if(pecb->eventType != EVENT_TYPE_QUEUE) /* The event type is not queue    */
 80193d8:	69fb      	ldr	r3, [r7, #28]
 80193da:	795b      	ldrb	r3, [r3, #5]
 80193dc:	f003 030f 	and.w	r3, r3, #15
 80193e0:	b2db      	uxtb	r3, r3
 80193e2:	2b03      	cmp	r3, #3
 80193e4:	d004      	beq.n	80193f0 <CoPendQueueMail+0x54>
    {
        *perr = E_INVALID_ID;
 80193e6:	687b      	ldr	r3, [r7, #4]
 80193e8:	2201      	movs	r2, #1
 80193ea:	701a      	strb	r2, [r3, #0]
        return Co_NULL;
 80193ec:	2300      	movs	r3, #0
 80193ee:	e0b2      	b.n	8019556 <CoPendQueueMail+0x1ba>
    }
#endif	
    if(OSSchedLock != 0)                /* Judge schedule is locked or not?   */
 80193f0:	4b5d      	ldr	r3, [pc, #372]	; (8019568 <CoPendQueueMail+0x1cc>)
 80193f2:	781b      	ldrb	r3, [r3, #0]
 80193f4:	b2db      	uxtb	r3, r3
 80193f6:	2b00      	cmp	r3, #0
 80193f8:	d004      	beq.n	8019404 <CoPendQueueMail+0x68>
    {	
        *perr = E_OS_IN_LOCK;           /* Schedule is locked,return error    */								 
 80193fa:	687b      	ldr	r3, [r7, #4]
 80193fc:	2215      	movs	r2, #21
 80193fe:	701a      	strb	r2, [r3, #0]
        return Co_NULL;
 8019400:	2300      	movs	r3, #0
 8019402:	e0a8      	b.n	8019556 <CoPendQueueMail+0x1ba>
    }	
    pqcb = (P_QCB)pecb->eventPtr;       /* Point at queue control block       */
 8019404:	69fb      	ldr	r3, [r7, #28]
 8019406:	681b      	ldr	r3, [r3, #0]
 8019408:	61bb      	str	r3, [r7, #24]
    OsSchedLock();
 801940a:	4b57      	ldr	r3, [pc, #348]	; (8019568 <CoPendQueueMail+0x1cc>)
 801940c:	781b      	ldrb	r3, [r3, #0]
 801940e:	b2db      	uxtb	r3, r3
 8019410:	3301      	adds	r3, #1
 8019412:	b2da      	uxtb	r2, r3
 8019414:	4b54      	ldr	r3, [pc, #336]	; (8019568 <CoPendQueueMail+0x1cc>)
 8019416:	701a      	strb	r2, [r3, #0]
    if(pqcb->qSize != 0)            /* If there are any messages in the queue */
 8019418:	69bb      	ldr	r3, [r7, #24]
 801941a:	899b      	ldrh	r3, [r3, #12]
 801941c:	2b00      	cmp	r3, #0
 801941e:	d023      	beq.n	8019468 <CoPendQueueMail+0xcc>
    {
        /* Extract oldest message from the queue                              */
        pmail = *(pqcb->qStart + pqcb->head);   
 8019420:	69bb      	ldr	r3, [r7, #24]
 8019422:	681a      	ldr	r2, [r3, #0]
 8019424:	69bb      	ldr	r3, [r7, #24]
 8019426:	88db      	ldrh	r3, [r3, #6]
 8019428:	009b      	lsls	r3, r3, #2
 801942a:	4413      	add	r3, r2
 801942c:	681b      	ldr	r3, [r3, #0]
 801942e:	613b      	str	r3, [r7, #16]
        pqcb->head++;                   /* Update the queue head              */ 
 8019430:	69bb      	ldr	r3, [r7, #24]
 8019432:	88db      	ldrh	r3, [r3, #6]
 8019434:	3301      	adds	r3, #1
 8019436:	b29a      	uxth	r2, r3
 8019438:	69bb      	ldr	r3, [r7, #24]
 801943a:	80da      	strh	r2, [r3, #6]
        pqcb->qSize--;          /* Update the number of messages in the queue */  
 801943c:	69bb      	ldr	r3, [r7, #24]
 801943e:	899b      	ldrh	r3, [r3, #12]
 8019440:	3b01      	subs	r3, #1
 8019442:	b29a      	uxth	r2, r3
 8019444:	69bb      	ldr	r3, [r7, #24]
 8019446:	819a      	strh	r2, [r3, #12]
        if(pqcb->head == pqcb->qMaxSize)/* Check queue head                   */
 8019448:	69bb      	ldr	r3, [r7, #24]
 801944a:	88da      	ldrh	r2, [r3, #6]
 801944c:	69bb      	ldr	r3, [r7, #24]
 801944e:	895b      	ldrh	r3, [r3, #10]
 8019450:	429a      	cmp	r2, r3
 8019452:	d102      	bne.n	801945a <CoPendQueueMail+0xbe>
        {
            pqcb->head = 0;	
 8019454:	69bb      	ldr	r3, [r7, #24]
 8019456:	2200      	movs	r2, #0
 8019458:	80da      	strh	r2, [r3, #6]
        }
        OsSchedUnlock();
 801945a:	f7fe f8ad 	bl	80175b8 <OsSchedUnlock>
        *perr = E_OK;
 801945e:	687b      	ldr	r3, [r7, #4]
 8019460:	2200      	movs	r2, #0
 8019462:	701a      	strb	r2, [r3, #0]
        return pmail;                   /* Return message received            */
 8019464:	693b      	ldr	r3, [r7, #16]
 8019466:	e076      	b.n	8019556 <CoPendQueueMail+0x1ba>
    }
    else                                /* If there is no message in the queue*/
    {
    	OsSchedUnlock();
 8019468:	f7fe f8a6 	bl	80175b8 <OsSchedUnlock>
        curTCB = TCBRunning;
 801946c:	4b3f      	ldr	r3, [pc, #252]	; (801956c <CoPendQueueMail+0x1d0>)
 801946e:	681b      	ldr	r3, [r3, #0]
 8019470:	617b      	str	r3, [r7, #20]
        if(timeout == 0)                /* If time-out is not configured      */
 8019472:	68bb      	ldr	r3, [r7, #8]
 8019474:	2b00      	cmp	r3, #0
 8019476:	d12c      	bne.n	80194d2 <CoPendQueueMail+0x136>
        {
            /* Block current task until the event occur                       */
            EventTaskToWait(pecb,curTCB); 
 8019478:	6979      	ldr	r1, [r7, #20]
 801947a:	69f8      	ldr	r0, [r7, #28]
 801947c:	f7fe fa28 	bl	80178d0 <EventTaskToWait>
            
            /* Have recived message or the queue have been deleted            */
            OsSchedLock(); 
 8019480:	4b39      	ldr	r3, [pc, #228]	; (8019568 <CoPendQueueMail+0x1cc>)
 8019482:	781b      	ldrb	r3, [r3, #0]
 8019484:	b2db      	uxtb	r3, r3
 8019486:	3301      	adds	r3, #1
 8019488:	b2da      	uxtb	r2, r3
 801948a:	4b37      	ldr	r3, [pc, #220]	; (8019568 <CoPendQueueMail+0x1cc>)
 801948c:	701a      	strb	r2, [r3, #0]
            pmail = curTCB->pmail;              
 801948e:	697b      	ldr	r3, [r7, #20]
 8019490:	691b      	ldr	r3, [r3, #16]
 8019492:	613b      	str	r3, [r7, #16]
            curTCB->pmail = Co_NULL;
 8019494:	697b      	ldr	r3, [r7, #20]
 8019496:	2200      	movs	r2, #0
 8019498:	611a      	str	r2, [r3, #16]
            pqcb->head++;                             /* Clear event sign         */
 801949a:	69bb      	ldr	r3, [r7, #24]
 801949c:	88db      	ldrh	r3, [r3, #6]
 801949e:	3301      	adds	r3, #1
 80194a0:	b29a      	uxth	r2, r3
 80194a2:	69bb      	ldr	r3, [r7, #24]
 80194a4:	80da      	strh	r2, [r3, #6]
            pqcb->qSize--;
 80194a6:	69bb      	ldr	r3, [r7, #24]
 80194a8:	899b      	ldrh	r3, [r3, #12]
 80194aa:	3b01      	subs	r3, #1
 80194ac:	b29a      	uxth	r2, r3
 80194ae:	69bb      	ldr	r3, [r7, #24]
 80194b0:	819a      	strh	r2, [r3, #12]
            if(pqcb->head == pqcb->qMaxSize)
 80194b2:	69bb      	ldr	r3, [r7, #24]
 80194b4:	88da      	ldrh	r2, [r3, #6]
 80194b6:	69bb      	ldr	r3, [r7, #24]
 80194b8:	895b      	ldrh	r3, [r3, #10]
 80194ba:	429a      	cmp	r2, r3
 80194bc:	d102      	bne.n	80194c4 <CoPendQueueMail+0x128>
            {
                pqcb->head = 0;	
 80194be:	69bb      	ldr	r3, [r7, #24]
 80194c0:	2200      	movs	r2, #0
 80194c2:	80da      	strh	r2, [r3, #6]
            }
            OsSchedUnlock();
 80194c4:	f7fe f878 	bl	80175b8 <OsSchedUnlock>
            *perr = E_OK;
 80194c8:	687b      	ldr	r3, [r7, #4]
 80194ca:	2200      	movs	r2, #0
 80194cc:	701a      	strb	r2, [r3, #0]
            return pmail;               /* Return message received or Co_NULL    */
 80194ce:	693b      	ldr	r3, [r7, #16]
 80194d0:	e041      	b.n	8019556 <CoPendQueueMail+0x1ba>
        }
        else                            /* If time-out is configured          */
        {
            OsSchedLock(); 
 80194d2:	4b25      	ldr	r3, [pc, #148]	; (8019568 <CoPendQueueMail+0x1cc>)
 80194d4:	781b      	ldrb	r3, [r3, #0]
 80194d6:	b2db      	uxtb	r3, r3
 80194d8:	3301      	adds	r3, #1
 80194da:	b2da      	uxtb	r2, r3
 80194dc:	4b22      	ldr	r3, [pc, #136]	; (8019568 <CoPendQueueMail+0x1cc>)
 80194de:	701a      	strb	r2, [r3, #0]
            
            /* Block current task until event or timeout occurs               */           
            EventTaskToWait(pecb,curTCB);       
 80194e0:	6979      	ldr	r1, [r7, #20]
 80194e2:	69f8      	ldr	r0, [r7, #28]
 80194e4:	f7fe f9f4 	bl	80178d0 <EventTaskToWait>
            InsertDelayList(curTCB,timeout);
 80194e8:	68b9      	ldr	r1, [r7, #8]
 80194ea:	6978      	ldr	r0, [r7, #20]
 80194ec:	f000 ff70 	bl	801a3d0 <InsertDelayList>
            OsSchedUnlock();
 80194f0:	f7fe f862 	bl	80175b8 <OsSchedUnlock>
            if(curTCB->pmail == Co_NULL)   /* If time-out occurred               */
 80194f4:	697b      	ldr	r3, [r7, #20]
 80194f6:	691b      	ldr	r3, [r3, #16]
 80194f8:	2b00      	cmp	r3, #0
 80194fa:	d104      	bne.n	8019506 <CoPendQueueMail+0x16a>
            {
                *perr = E_TIMEOUT;
 80194fc:	687b      	ldr	r3, [r7, #4]
 80194fe:	2205      	movs	r2, #5
 8019500:	701a      	strb	r2, [r3, #0]
                return Co_NULL;
 8019502:	2300      	movs	r3, #0
 8019504:	e027      	b.n	8019556 <CoPendQueueMail+0x1ba>
            }
            else                        /* If event occured                   */
            {
                OsSchedLock();
 8019506:	4b18      	ldr	r3, [pc, #96]	; (8019568 <CoPendQueueMail+0x1cc>)
 8019508:	781b      	ldrb	r3, [r3, #0]
 801950a:	b2db      	uxtb	r3, r3
 801950c:	3301      	adds	r3, #1
 801950e:	b2da      	uxtb	r2, r3
 8019510:	4b15      	ldr	r3, [pc, #84]	; (8019568 <CoPendQueueMail+0x1cc>)
 8019512:	701a      	strb	r2, [r3, #0]
                pmail = curTCB->pmail;              
 8019514:	697b      	ldr	r3, [r7, #20]
 8019516:	691b      	ldr	r3, [r3, #16]
 8019518:	613b      	str	r3, [r7, #16]
                curTCB->pmail = Co_NULL;
 801951a:	697b      	ldr	r3, [r7, #20]
 801951c:	2200      	movs	r2, #0
 801951e:	611a      	str	r2, [r3, #16]
                pqcb->head++;                             /* Clear event sign         */
 8019520:	69bb      	ldr	r3, [r7, #24]
 8019522:	88db      	ldrh	r3, [r3, #6]
 8019524:	3301      	adds	r3, #1
 8019526:	b29a      	uxth	r2, r3
 8019528:	69bb      	ldr	r3, [r7, #24]
 801952a:	80da      	strh	r2, [r3, #6]
                pqcb->qSize--;
 801952c:	69bb      	ldr	r3, [r7, #24]
 801952e:	899b      	ldrh	r3, [r3, #12]
 8019530:	3b01      	subs	r3, #1
 8019532:	b29a      	uxth	r2, r3
 8019534:	69bb      	ldr	r3, [r7, #24]
 8019536:	819a      	strh	r2, [r3, #12]
                if(pqcb->head == pqcb->qMaxSize)
 8019538:	69bb      	ldr	r3, [r7, #24]
 801953a:	88da      	ldrh	r2, [r3, #6]
 801953c:	69bb      	ldr	r3, [r7, #24]
 801953e:	895b      	ldrh	r3, [r3, #10]
 8019540:	429a      	cmp	r2, r3
 8019542:	d102      	bne.n	801954a <CoPendQueueMail+0x1ae>
                {
                    pqcb->head = 0;	
 8019544:	69bb      	ldr	r3, [r7, #24]
 8019546:	2200      	movs	r2, #0
 8019548:	80da      	strh	r2, [r3, #6]
                }
                OsSchedUnlock();
 801954a:	f7fe f835 	bl	80175b8 <OsSchedUnlock>
                *perr = E_OK;
 801954e:	687b      	ldr	r3, [r7, #4]
 8019550:	2200      	movs	r2, #0
 8019552:	701a      	strb	r2, [r3, #0]
                return pmail;           /* Return message received or Co_NULL    */
 8019554:	693b      	ldr	r3, [r7, #16]
            }				
        }	
    }
}
 8019556:	4618      	mov	r0, r3
 8019558:	3720      	adds	r7, #32
 801955a:	46bd      	mov	sp, r7
 801955c:	bd80      	pop	{r7, pc}
 801955e:	bf00      	nop
 8019560:	20003748 	.word	0x20003748
 8019564:	2000374c 	.word	0x2000374c
 8019568:	20003749 	.word	0x20003749
 801956c:	2000d728 	.word	0x2000d728

08019570 <CoPostQueueMail>:
 * @details    This function is called to post a mail to queue.
 * @note 
 *******************************************************************************
 */
StatusType CoPostQueueMail(OS_EventID id,void* pmail)
{	
 8019570:	b580      	push	{r7, lr}
 8019572:	b084      	sub	sp, #16
 8019574:	af00      	add	r7, sp, #0
 8019576:	4603      	mov	r3, r0
 8019578:	6039      	str	r1, [r7, #0]
 801957a:	71fb      	strb	r3, [r7, #7]
    P_ECB pecb;
    P_QCB pqcb;
#if CFG_PAR_CHECKOUT_EN >0                     
    if(id >= CFG_MAX_EVENT)	
 801957c:	79fb      	ldrb	r3, [r7, #7]
 801957e:	2b13      	cmp	r3, #19
 8019580:	d901      	bls.n	8019586 <CoPostQueueMail+0x16>
    {
        return E_INVALID_ID;          
 8019582:	2301      	movs	r3, #1
 8019584:	e042      	b.n	801960c <CoPostQueueMail+0x9c>
    }
#endif

    pecb = &EventTbl[id];
 8019586:	79fb      	ldrb	r3, [r7, #7]
 8019588:	011b      	lsls	r3, r3, #4
 801958a:	4a22      	ldr	r2, [pc, #136]	; (8019614 <CoPostQueueMail+0xa4>)
 801958c:	4413      	add	r3, r2
 801958e:	60fb      	str	r3, [r7, #12]
#if CFG_PAR_CHECKOUT_EN >0
    if(pecb->eventType != EVENT_TYPE_QUEUE)   
 8019590:	68fb      	ldr	r3, [r7, #12]
 8019592:	795b      	ldrb	r3, [r3, #5]
 8019594:	f003 030f 	and.w	r3, r3, #15
 8019598:	b2db      	uxtb	r3, r3
 801959a:	2b03      	cmp	r3, #3
 801959c:	d001      	beq.n	80195a2 <CoPostQueueMail+0x32>
    {
        return E_INVALID_ID;            /* The event type isn't queue,return  */	
 801959e:	2301      	movs	r3, #1
 80195a0:	e034      	b.n	801960c <CoPostQueueMail+0x9c>
    }	
#endif
    pqcb = (P_QCB)pecb->eventPtr;	
 80195a2:	68fb      	ldr	r3, [r7, #12]
 80195a4:	681b      	ldr	r3, [r3, #0]
 80195a6:	60bb      	str	r3, [r7, #8]
    if(pqcb->qSize == pqcb->qMaxSize)   /* If queue is full                   */
 80195a8:	68bb      	ldr	r3, [r7, #8]
 80195aa:	899a      	ldrh	r2, [r3, #12]
 80195ac:	68bb      	ldr	r3, [r7, #8]
 80195ae:	895b      	ldrh	r3, [r3, #10]
 80195b0:	429a      	cmp	r2, r3
 80195b2:	d101      	bne.n	80195b8 <CoPostQueueMail+0x48>
    {
        return E_QUEUE_FULL;
 80195b4:	2308      	movs	r3, #8
 80195b6:	e029      	b.n	801960c <CoPostQueueMail+0x9c>
    }
    else                                /* If queue is not full               */
    {
        OsSchedLock();
 80195b8:	4b17      	ldr	r3, [pc, #92]	; (8019618 <CoPostQueueMail+0xa8>)
 80195ba:	781b      	ldrb	r3, [r3, #0]
 80195bc:	b2db      	uxtb	r3, r3
 80195be:	3301      	adds	r3, #1
 80195c0:	b2da      	uxtb	r2, r3
 80195c2:	4b15      	ldr	r3, [pc, #84]	; (8019618 <CoPostQueueMail+0xa8>)
 80195c4:	701a      	strb	r2, [r3, #0]
        *(pqcb->qStart + pqcb->tail) = pmail;   /* Insert message into queue  */
 80195c6:	68bb      	ldr	r3, [r7, #8]
 80195c8:	681a      	ldr	r2, [r3, #0]
 80195ca:	68bb      	ldr	r3, [r7, #8]
 80195cc:	891b      	ldrh	r3, [r3, #8]
 80195ce:	009b      	lsls	r3, r3, #2
 80195d0:	4413      	add	r3, r2
 80195d2:	683a      	ldr	r2, [r7, #0]
 80195d4:	601a      	str	r2, [r3, #0]
        pqcb->tail++;                           /* Update queue tail          */
 80195d6:	68bb      	ldr	r3, [r7, #8]
 80195d8:	891b      	ldrh	r3, [r3, #8]
 80195da:	3301      	adds	r3, #1
 80195dc:	b29a      	uxth	r2, r3
 80195de:	68bb      	ldr	r3, [r7, #8]
 80195e0:	811a      	strh	r2, [r3, #8]
        pqcb->qSize++;          /* Update the number of messages in the queue */
 80195e2:	68bb      	ldr	r3, [r7, #8]
 80195e4:	899b      	ldrh	r3, [r3, #12]
 80195e6:	3301      	adds	r3, #1
 80195e8:	b29a      	uxth	r2, r3
 80195ea:	68bb      	ldr	r3, [r7, #8]
 80195ec:	819a      	strh	r2, [r3, #12]
        if(pqcb->tail == pqcb->qMaxSize)        /* Check queue tail           */   
 80195ee:	68bb      	ldr	r3, [r7, #8]
 80195f0:	891a      	ldrh	r2, [r3, #8]
 80195f2:	68bb      	ldr	r3, [r7, #8]
 80195f4:	895b      	ldrh	r3, [r3, #10]
 80195f6:	429a      	cmp	r2, r3
 80195f8:	d102      	bne.n	8019600 <CoPostQueueMail+0x90>
        {
            pqcb->tail = 0;	
 80195fa:	68bb      	ldr	r3, [r7, #8]
 80195fc:	2200      	movs	r2, #0
 80195fe:	811a      	strh	r2, [r3, #8]
        }
        EventTaskToRdy(pecb);           /* Check the event waiting list       */
 8019600:	68f8      	ldr	r0, [r7, #12]
 8019602:	f7fe f9e5 	bl	80179d0 <EventTaskToRdy>
        OsSchedUnlock();
 8019606:	f7fd ffd7 	bl	80175b8 <OsSchedUnlock>
        return E_OK;
 801960a:	2300      	movs	r3, #0
    }
}
 801960c:	4618      	mov	r0, r3
 801960e:	3710      	adds	r7, #16
 8019610:	46bd      	mov	sp, r7
 8019612:	bd80      	pop	{r7, pc}
 8019614:	2000374c 	.word	0x2000374c
 8019618:	20003749 	.word	0x20003749

0801961c <isr_PostQueueMail>:
 * @note 				   
 *******************************************************************************
 */
#if CFG_MAX_SERVICE_REQUEST > 0
StatusType isr_PostQueueMail(OS_EventID id,void* pmail)
{
 801961c:	b580      	push	{r7, lr}
 801961e:	b082      	sub	sp, #8
 8019620:	af00      	add	r7, sp, #0
 8019622:	4603      	mov	r3, r0
 8019624:	6039      	str	r1, [r7, #0]
 8019626:	71fb      	strb	r3, [r7, #7]
    if(OSSchedLock > 0)         /* If scheduler is locked,(the caller is ISR) */
 8019628:	4b0d      	ldr	r3, [pc, #52]	; (8019660 <isr_PostQueueMail+0x44>)
 801962a:	781b      	ldrb	r3, [r3, #0]
 801962c:	b2db      	uxtb	r3, r3
 801962e:	2b00      	cmp	r3, #0
 8019630:	d00c      	beq.n	801964c <isr_PostQueueMail+0x30>
    {
        /* Insert the request into service request queue                      */
        if(InsertInSRQ(QUEUE_REQ,id,pmail) == Co_FALSE)
 8019632:	79fb      	ldrb	r3, [r7, #7]
 8019634:	683a      	ldr	r2, [r7, #0]
 8019636:	4619      	mov	r1, r3
 8019638:	2004      	movs	r0, #4
 801963a:	f000 f981 	bl	8019940 <InsertInSRQ>
 801963e:	4603      	mov	r3, r0
 8019640:	2b00      	cmp	r3, #0
 8019642:	d101      	bne.n	8019648 <isr_PostQueueMail+0x2c>
        {
            return E_SEV_REQ_FULL;      /* If service request queue is full   */          
 8019644:	2312      	movs	r3, #18
 8019646:	e007      	b.n	8019658 <isr_PostQueueMail+0x3c>
        }			
        else  /* If the request have been inserted into service request queue */
        {
            return E_OK;
 8019648:	2300      	movs	r3, #0
 801964a:	e005      	b.n	8019658 <isr_PostQueueMail+0x3c>
        }
    }
    else                                /* The scheduler is unlocked          */
    {
        return(CoPostQueueMail(id,pmail));    /* Send the message to the queue*/ 
 801964c:	79fb      	ldrb	r3, [r7, #7]
 801964e:	6839      	ldr	r1, [r7, #0]
 8019650:	4618      	mov	r0, r3
 8019652:	f7ff ff8d 	bl	8019570 <CoPostQueueMail>
 8019656:	4603      	mov	r3, r0
    }
}
 8019658:	4618      	mov	r0, r3
 801965a:	3708      	adds	r7, #8
 801965c:	46bd      	mov	sp, r7
 801965e:	bd80      	pop	{r7, pc}
 8019660:	20003749 	.word	0x20003749

08019664 <CoCreateSem>:
 * @par Description
 * @details    This function is called to create a semaphore. 
 *******************************************************************************
 */
OS_EventID CoCreateSem(U16 initCnt,U16 maxCnt,U8 sortType)
{
 8019664:	b580      	push	{r7, lr}
 8019666:	b084      	sub	sp, #16
 8019668:	af00      	add	r7, sp, #0
 801966a:	4603      	mov	r3, r0
 801966c:	80fb      	strh	r3, [r7, #6]
 801966e:	460b      	mov	r3, r1
 8019670:	80bb      	strh	r3, [r7, #4]
 8019672:	4613      	mov	r3, r2
 8019674:	70fb      	strb	r3, [r7, #3]
    P_ECB pecb;
#if CFG_PAR_CHECKOUT_EN >0
    if(initCnt > maxCnt)    
 8019676:	88fa      	ldrh	r2, [r7, #6]
 8019678:	88bb      	ldrh	r3, [r7, #4]
 801967a:	429a      	cmp	r2, r3
 801967c:	d901      	bls.n	8019682 <CoCreateSem+0x1e>
    {
        return E_CREATE_FAIL;           /* Invalid 'initCnt' or 'maxCnt'      */	
 801967e:	23ff      	movs	r3, #255	; 0xff
 8019680:	e01b      	b.n	80196ba <CoCreateSem+0x56>
    }
    
    if ((sortType != EVENT_SORT_TYPE_FIFO) && (sortType != EVENT_SORT_TYPE_PRIO))
 8019682:	78fb      	ldrb	r3, [r7, #3]
 8019684:	2b01      	cmp	r3, #1
 8019686:	d004      	beq.n	8019692 <CoCreateSem+0x2e>
 8019688:	78fb      	ldrb	r3, [r7, #3]
 801968a:	2b02      	cmp	r3, #2
 801968c:	d001      	beq.n	8019692 <CoCreateSem+0x2e>
    {
        return E_CREATE_FAIL;           /* Illegal sort type,return error     */
 801968e:	23ff      	movs	r3, #255	; 0xff
 8019690:	e013      	b.n	80196ba <CoCreateSem+0x56>
    }
#endif	
    
    /* Create a semaphore type event control block                            */
    pecb = CreatEvent(EVENT_TYPE_SEM,sortType,Co_NULL);
 8019692:	78fb      	ldrb	r3, [r7, #3]
 8019694:	2200      	movs	r2, #0
 8019696:	4619      	mov	r1, r3
 8019698:	2001      	movs	r0, #1
 801969a:	f7fe f891 	bl	80177c0 <CreatEvent>
 801969e:	60f8      	str	r0, [r7, #12]
    if(pecb == Co_NULL)                    /* If failed to create event block    */
 80196a0:	68fb      	ldr	r3, [r7, #12]
 80196a2:	2b00      	cmp	r3, #0
 80196a4:	d101      	bne.n	80196aa <CoCreateSem+0x46>
    {
        return E_CREATE_FAIL;
 80196a6:	23ff      	movs	r3, #255	; 0xff
 80196a8:	e007      	b.n	80196ba <CoCreateSem+0x56>
    }
    pecb->eventCounter        = initCnt;/* Initialize event block             */
 80196aa:	68fb      	ldr	r3, [r7, #12]
 80196ac:	88fa      	ldrh	r2, [r7, #6]
 80196ae:	80da      	strh	r2, [r3, #6]
    pecb->initialEventCounter = maxCnt;
 80196b0:	68fb      	ldr	r3, [r7, #12]
 80196b2:	88ba      	ldrh	r2, [r7, #4]
 80196b4:	811a      	strh	r2, [r3, #8]
    return (pecb->id);                  /* Return event id                    */
 80196b6:	68fb      	ldr	r3, [r7, #12]
 80196b8:	791b      	ldrb	r3, [r3, #4]
}
 80196ba:	4618      	mov	r0, r3
 80196bc:	3710      	adds	r7, #16
 80196be:	46bd      	mov	sp, r7
 80196c0:	bd80      	pop	{r7, pc}

080196c2 <CoDelSem>:
 *
 * @note 
 *******************************************************************************
 */
StatusType CoDelSem(OS_EventID id,U8 opt)
{
 80196c2:	b580      	push	{r7, lr}
 80196c4:	b084      	sub	sp, #16
 80196c6:	af00      	add	r7, sp, #0
 80196c8:	4603      	mov	r3, r0
 80196ca:	460a      	mov	r2, r1
 80196cc:	71fb      	strb	r3, [r7, #7]
 80196ce:	4613      	mov	r3, r2
 80196d0:	71bb      	strb	r3, [r7, #6]
    P_ECB pecb;

#if CFG_PAR_CHECKOUT_EN >0
    if(id >= CFG_MAX_EVENT)	                 
 80196d2:	79fb      	ldrb	r3, [r7, #7]
 80196d4:	2b13      	cmp	r3, #19
 80196d6:	d901      	bls.n	80196dc <CoDelSem+0x1a>
    {
        return E_INVALID_ID;
 80196d8:	2301      	movs	r3, #1
 80196da:	e013      	b.n	8019704 <CoDelSem+0x42>
    }
#endif

    pecb = &EventTbl[id];
 80196dc:	79fb      	ldrb	r3, [r7, #7]
 80196de:	011b      	lsls	r3, r3, #4
 80196e0:	4a0a      	ldr	r2, [pc, #40]	; (801970c <CoDelSem+0x4a>)
 80196e2:	4413      	add	r3, r2
 80196e4:	60fb      	str	r3, [r7, #12]

#if CFG_PAR_CHECKOUT_EN >0
    if(pecb->eventType != EVENT_TYPE_SEM)  
 80196e6:	68fb      	ldr	r3, [r7, #12]
 80196e8:	795b      	ldrb	r3, [r3, #5]
 80196ea:	f003 030f 	and.w	r3, r3, #15
 80196ee:	b2db      	uxtb	r3, r3
 80196f0:	2b01      	cmp	r3, #1
 80196f2:	d001      	beq.n	80196f8 <CoDelSem+0x36>
    {
        return E_INVALID_ID;             /* The event type is not semaphore   */	
 80196f4:	2301      	movs	r3, #1
 80196f6:	e005      	b.n	8019704 <CoDelSem+0x42>
    }	
#endif

    return (DeleteEvent(pecb,opt));/* Delete the semaphore event control block*/
 80196f8:	79bb      	ldrb	r3, [r7, #6]
 80196fa:	4619      	mov	r1, r3
 80196fc:	68f8      	ldr	r0, [r7, #12]
 80196fe:	f7fe f8a1 	bl	8017844 <DeleteEvent>
 8019702:	4603      	mov	r3, r0
}
 8019704:	4618      	mov	r0, r3
 8019706:	3710      	adds	r7, #16
 8019708:	46bd      	mov	sp, r7
 801970a:	bd80      	pop	{r7, pc}
 801970c:	2000374c 	.word	0x2000374c

08019710 <CoAcceptSem>:
 * @par Description
 * @details    This function is called accept a semaphore without waitting. 
 *******************************************************************************
 */
StatusType CoAcceptSem(OS_EventID id)
{
 8019710:	b580      	push	{r7, lr}
 8019712:	b084      	sub	sp, #16
 8019714:	af00      	add	r7, sp, #0
 8019716:	4603      	mov	r3, r0
 8019718:	71fb      	strb	r3, [r7, #7]
    P_ECB pecb;
#if CFG_PAR_CHECKOUT_EN >0
    if(id >= CFG_MAX_EVENT)	                 
 801971a:	79fb      	ldrb	r3, [r7, #7]
 801971c:	2b13      	cmp	r3, #19
 801971e:	d901      	bls.n	8019724 <CoAcceptSem+0x14>
    {
        return E_INVALID_ID;
 8019720:	2301      	movs	r3, #1
 8019722:	e025      	b.n	8019770 <CoAcceptSem+0x60>
    }
#endif

	pecb = &EventTbl[id];
 8019724:	79fb      	ldrb	r3, [r7, #7]
 8019726:	011b      	lsls	r3, r3, #4
 8019728:	4a13      	ldr	r2, [pc, #76]	; (8019778 <CoAcceptSem+0x68>)
 801972a:	4413      	add	r3, r2
 801972c:	60fb      	str	r3, [r7, #12]
#if CFG_PAR_CHECKOUT_EN >0
    if( pecb->eventType != EVENT_TYPE_SEM)   
 801972e:	68fb      	ldr	r3, [r7, #12]
 8019730:	795b      	ldrb	r3, [r3, #5]
 8019732:	f003 030f 	and.w	r3, r3, #15
 8019736:	b2db      	uxtb	r3, r3
 8019738:	2b01      	cmp	r3, #1
 801973a:	d001      	beq.n	8019740 <CoAcceptSem+0x30>
    {
        return E_INVALID_ID;	
 801973c:	2301      	movs	r3, #1
 801973e:	e017      	b.n	8019770 <CoAcceptSem+0x60>
    }
#endif
	OsSchedLock();
 8019740:	4b0e      	ldr	r3, [pc, #56]	; (801977c <CoAcceptSem+0x6c>)
 8019742:	781b      	ldrb	r3, [r3, #0]
 8019744:	b2db      	uxtb	r3, r3
 8019746:	3301      	adds	r3, #1
 8019748:	b2da      	uxtb	r2, r3
 801974a:	4b0c      	ldr	r3, [pc, #48]	; (801977c <CoAcceptSem+0x6c>)
 801974c:	701a      	strb	r2, [r3, #0]
    if(pecb->eventCounter > 0) /* If semaphore is positive,resource available */
 801974e:	68fb      	ldr	r3, [r7, #12]
 8019750:	88db      	ldrh	r3, [r3, #6]
 8019752:	2b00      	cmp	r3, #0
 8019754:	d009      	beq.n	801976a <CoAcceptSem+0x5a>
    {	
        pecb->eventCounter--;         /* Decrement semaphore only if positive */
 8019756:	68fb      	ldr	r3, [r7, #12]
 8019758:	88db      	ldrh	r3, [r3, #6]
 801975a:	3b01      	subs	r3, #1
 801975c:	b29a      	uxth	r2, r3
 801975e:	68fb      	ldr	r3, [r7, #12]
 8019760:	80da      	strh	r2, [r3, #6]
		OsSchedUnlock();
 8019762:	f7fd ff29 	bl	80175b8 <OsSchedUnlock>
        return E_OK;	
 8019766:	2300      	movs	r3, #0
 8019768:	e002      	b.n	8019770 <CoAcceptSem+0x60>
    }
    else                                /* Resource is not available          */
    {	
		OsSchedUnlock();
 801976a:	f7fd ff25 	bl	80175b8 <OsSchedUnlock>
        return E_SEM_EMPTY;
 801976e:	2309      	movs	r3, #9
    }	
}
 8019770:	4618      	mov	r0, r3
 8019772:	3710      	adds	r7, #16
 8019774:	46bd      	mov	sp, r7
 8019776:	bd80      	pop	{r7, pc}
 8019778:	2000374c 	.word	0x2000374c
 801977c:	20003749 	.word	0x20003749

08019780 <CoPendSem>:
 * @details    This function is called to waits for a semaphore. 
 * @note       IF this function is called in ISR,nothing to do and return immediately.
 *******************************************************************************
 */
StatusType CoPendSem(OS_EventID id,U32 timeout)
{
 8019780:	b580      	push	{r7, lr}
 8019782:	b084      	sub	sp, #16
 8019784:	af00      	add	r7, sp, #0
 8019786:	4603      	mov	r3, r0
 8019788:	6039      	str	r1, [r7, #0]
 801978a:	71fb      	strb	r3, [r7, #7]
    P_ECB 	 pecb;
    P_OSTCB  curTCB;
    if(OSIntNesting > 0)                /* If the caller is ISR               */
 801978c:	4b39      	ldr	r3, [pc, #228]	; (8019874 <CoPendSem+0xf4>)
 801978e:	781b      	ldrb	r3, [r3, #0]
 8019790:	b2db      	uxtb	r3, r3
 8019792:	2b00      	cmp	r3, #0
 8019794:	d001      	beq.n	801979a <CoPendSem+0x1a>
    {
        return E_CALL;
 8019796:	2303      	movs	r3, #3
 8019798:	e068      	b.n	801986c <CoPendSem+0xec>
    }
#if CFG_PAR_CHECKOUT_EN >0
    if(id >= CFG_MAX_EVENT)	            
 801979a:	79fb      	ldrb	r3, [r7, #7]
 801979c:	2b13      	cmp	r3, #19
 801979e:	d901      	bls.n	80197a4 <CoPendSem+0x24>
    {
        return E_INVALID_ID;
 80197a0:	2301      	movs	r3, #1
 80197a2:	e063      	b.n	801986c <CoPendSem+0xec>
    }
#endif

	  pecb = &EventTbl[id];
 80197a4:	79fb      	ldrb	r3, [r7, #7]
 80197a6:	011b      	lsls	r3, r3, #4
 80197a8:	4a33      	ldr	r2, [pc, #204]	; (8019878 <CoPendSem+0xf8>)
 80197aa:	4413      	add	r3, r2
 80197ac:	60fb      	str	r3, [r7, #12]
#if CFG_PAR_CHECKOUT_EN >0
    if(pecb->eventType != EVENT_TYPE_SEM)     
 80197ae:	68fb      	ldr	r3, [r7, #12]
 80197b0:	795b      	ldrb	r3, [r3, #5]
 80197b2:	f003 030f 	and.w	r3, r3, #15
 80197b6:	b2db      	uxtb	r3, r3
 80197b8:	2b01      	cmp	r3, #1
 80197ba:	d001      	beq.n	80197c0 <CoPendSem+0x40>
    {
       return E_INVALID_ID;	
 80197bc:	2301      	movs	r3, #1
 80197be:	e055      	b.n	801986c <CoPendSem+0xec>
    }
#endif
    if(OSSchedLock != 0)                /* Schdule is locked?                 */
 80197c0:	4b2e      	ldr	r3, [pc, #184]	; (801987c <CoPendSem+0xfc>)
 80197c2:	781b      	ldrb	r3, [r3, #0]
 80197c4:	b2db      	uxtb	r3, r3
 80197c6:	2b00      	cmp	r3, #0
 80197c8:	d001      	beq.n	80197ce <CoPendSem+0x4e>
    {
        return E_OS_IN_LOCK;            /* Yes,error return                   */
 80197ca:	2315      	movs	r3, #21
 80197cc:	e04e      	b.n	801986c <CoPendSem+0xec>
    }
    OsSchedLock();
 80197ce:	4b2b      	ldr	r3, [pc, #172]	; (801987c <CoPendSem+0xfc>)
 80197d0:	781b      	ldrb	r3, [r3, #0]
 80197d2:	b2db      	uxtb	r3, r3
 80197d4:	3301      	adds	r3, #1
 80197d6:	b2da      	uxtb	r2, r3
 80197d8:	4b28      	ldr	r3, [pc, #160]	; (801987c <CoPendSem+0xfc>)
 80197da:	701a      	strb	r2, [r3, #0]
    if(pecb->eventCounter > 0) /* If semaphore is positive,resource available */       
 80197dc:	68fb      	ldr	r3, [r7, #12]
 80197de:	88db      	ldrh	r3, [r3, #6]
 80197e0:	2b00      	cmp	r3, #0
 80197e2:	d009      	beq.n	80197f8 <CoPendSem+0x78>
    {	
        pecb->eventCounter--;         /* Decrement semaphore only if positive */
 80197e4:	68fb      	ldr	r3, [r7, #12]
 80197e6:	88db      	ldrh	r3, [r3, #6]
 80197e8:	3b01      	subs	r3, #1
 80197ea:	b29a      	uxth	r2, r3
 80197ec:	68fb      	ldr	r3, [r7, #12]
 80197ee:	80da      	strh	r2, [r3, #6]
        OsSchedUnlock();
 80197f0:	f7fd fee2 	bl	80175b8 <OsSchedUnlock>
        return E_OK;	
 80197f4:	2300      	movs	r3, #0
 80197f6:	e039      	b.n	801986c <CoPendSem+0xec>
    }
    else                                /* Resource is not available          */
    {
        curTCB = TCBRunning;
 80197f8:	4b21      	ldr	r3, [pc, #132]	; (8019880 <CoPendSem+0x100>)
 80197fa:	681b      	ldr	r3, [r3, #0]
 80197fc:	60bb      	str	r3, [r7, #8]
        if(timeout == 0)                /* If time-out is not configured      */
 80197fe:	683b      	ldr	r3, [r7, #0]
 8019800:	2b00      	cmp	r3, #0
 8019802:	d110      	bne.n	8019826 <CoPendSem+0xa6>
        {
            EventTaskToWait(pecb,curTCB); /* Block task until event occurs    */ 
 8019804:	68b9      	ldr	r1, [r7, #8]
 8019806:	68f8      	ldr	r0, [r7, #12]
 8019808:	f7fe f862 	bl	80178d0 <EventTaskToWait>
            pecb->eventCounter--;             
 801980c:	68fb      	ldr	r3, [r7, #12]
 801980e:	88db      	ldrh	r3, [r3, #6]
 8019810:	3b01      	subs	r3, #1
 8019812:	b29a      	uxth	r2, r3
 8019814:	68fb      	ldr	r3, [r7, #12]
 8019816:	80da      	strh	r2, [r3, #6]
            curTCB->pmail = Co_NULL;
 8019818:	68bb      	ldr	r3, [r7, #8]
 801981a:	2200      	movs	r2, #0
 801981c:	611a      	str	r2, [r3, #16]
            OsSchedUnlock();
 801981e:	f7fd fecb 	bl	80175b8 <OsSchedUnlock>
            return E_OK;
 8019822:	2300      	movs	r3, #0
 8019824:	e022      	b.n	801986c <CoPendSem+0xec>
        }
        else                            /* If time-out is configured          */
        {
            /* Block task until event or timeout occurs                       */
            EventTaskToWait(pecb,curTCB);
 8019826:	68b9      	ldr	r1, [r7, #8]
 8019828:	68f8      	ldr	r0, [r7, #12]
 801982a:	f7fe f851 	bl	80178d0 <EventTaskToWait>
            InsertDelayList(curTCB,timeout);
 801982e:	6839      	ldr	r1, [r7, #0]
 8019830:	68b8      	ldr	r0, [r7, #8]
 8019832:	f000 fdcd 	bl	801a3d0 <InsertDelayList>
            
            OsSchedUnlock();
 8019836:	f7fd febf 	bl	80175b8 <OsSchedUnlock>
            if (curTCB->pmail == Co_NULL)  /* If pmail is Co_NULL, time-out occurred*/
 801983a:	68bb      	ldr	r3, [r7, #8]
 801983c:	691b      	ldr	r3, [r3, #16]
 801983e:	2b00      	cmp	r3, #0
 8019840:	d101      	bne.n	8019846 <CoPendSem+0xc6>
            {
              return E_TIMEOUT;	
 8019842:	2305      	movs	r3, #5
 8019844:	e012      	b.n	801986c <CoPendSem+0xec>
            }                               
            else                  /* Event occurred or event have been deleted*/    
            {
                OsSchedLock();
 8019846:	4b0d      	ldr	r3, [pc, #52]	; (801987c <CoPendSem+0xfc>)
 8019848:	781b      	ldrb	r3, [r3, #0]
 801984a:	b2db      	uxtb	r3, r3
 801984c:	3301      	adds	r3, #1
 801984e:	b2da      	uxtb	r2, r3
 8019850:	4b0a      	ldr	r3, [pc, #40]	; (801987c <CoPendSem+0xfc>)
 8019852:	701a      	strb	r2, [r3, #0]
                curTCB->pmail = Co_NULL;
 8019854:	68bb      	ldr	r3, [r7, #8]
 8019856:	2200      	movs	r2, #0
 8019858:	611a      	str	r2, [r3, #16]
                pecb->eventCounter--; 
 801985a:	68fb      	ldr	r3, [r7, #12]
 801985c:	88db      	ldrh	r3, [r3, #6]
 801985e:	3b01      	subs	r3, #1
 8019860:	b29a      	uxth	r2, r3
 8019862:	68fb      	ldr	r3, [r7, #12]
 8019864:	80da      	strh	r2, [r3, #6]
                OsSchedUnlock();
 8019866:	f7fd fea7 	bl	80175b8 <OsSchedUnlock>
                return E_OK;	
 801986a:	2300      	movs	r3, #0
            }				
        }		
    }
}
 801986c:	4618      	mov	r0, r3
 801986e:	3710      	adds	r7, #16
 8019870:	46bd      	mov	sp, r7
 8019872:	bd80      	pop	{r7, pc}
 8019874:	20003748 	.word	0x20003748
 8019878:	2000374c 	.word	0x2000374c
 801987c:	20003749 	.word	0x20003749
 8019880:	2000d728 	.word	0x2000d728

08019884 <CoPostSem>:
 *
 * @note 
 *******************************************************************************
 */
StatusType CoPostSem(OS_EventID id)
{
 8019884:	b580      	push	{r7, lr}
 8019886:	b084      	sub	sp, #16
 8019888:	af00      	add	r7, sp, #0
 801988a:	4603      	mov	r3, r0
 801988c:	71fb      	strb	r3, [r7, #7]
    P_ECB pecb;
#if CFG_PAR_CHECKOUT_EN >0
    if(id >= CFG_MAX_EVENT)	                  
 801988e:	79fb      	ldrb	r3, [r7, #7]
 8019890:	2b13      	cmp	r3, #19
 8019892:	d901      	bls.n	8019898 <CoPostSem+0x14>
    {
        return E_INVALID_ID;
 8019894:	2301      	movs	r3, #1
 8019896:	e028      	b.n	80198ea <CoPostSem+0x66>
    }
#endif

    pecb = &EventTbl[id];
 8019898:	79fb      	ldrb	r3, [r7, #7]
 801989a:	011b      	lsls	r3, r3, #4
 801989c:	4a15      	ldr	r2, [pc, #84]	; (80198f4 <CoPostSem+0x70>)
 801989e:	4413      	add	r3, r2
 80198a0:	60fb      	str	r3, [r7, #12]
#if CFG_PAR_CHECKOUT_EN >0
    if(pecb->eventType != EVENT_TYPE_SEM) /* Invalid event control block type */
 80198a2:	68fb      	ldr	r3, [r7, #12]
 80198a4:	795b      	ldrb	r3, [r3, #5]
 80198a6:	f003 030f 	and.w	r3, r3, #15
 80198aa:	b2db      	uxtb	r3, r3
 80198ac:	2b01      	cmp	r3, #1
 80198ae:	d001      	beq.n	80198b4 <CoPostSem+0x30>
    {
        return E_INVALID_ID;	
 80198b0:	2301      	movs	r3, #1
 80198b2:	e01a      	b.n	80198ea <CoPostSem+0x66>
    }
#endif

    /* Make sure semaphore will not overflow */
    if(pecb->eventCounter == pecb->initialEventCounter) 
 80198b4:	68fb      	ldr	r3, [r7, #12]
 80198b6:	88da      	ldrh	r2, [r3, #6]
 80198b8:	68fb      	ldr	r3, [r7, #12]
 80198ba:	891b      	ldrh	r3, [r3, #8]
 80198bc:	429a      	cmp	r2, r3
 80198be:	d101      	bne.n	80198c4 <CoPostSem+0x40>
    {
        return E_SEM_FULL;    /* The counter of Semaphore reach the max number*/
 80198c0:	2306      	movs	r3, #6
 80198c2:	e012      	b.n	80198ea <CoPostSem+0x66>
    }
    OsSchedLock();
 80198c4:	4b0c      	ldr	r3, [pc, #48]	; (80198f8 <CoPostSem+0x74>)
 80198c6:	781b      	ldrb	r3, [r3, #0]
 80198c8:	b2db      	uxtb	r3, r3
 80198ca:	3301      	adds	r3, #1
 80198cc:	b2da      	uxtb	r2, r3
 80198ce:	4b0a      	ldr	r3, [pc, #40]	; (80198f8 <CoPostSem+0x74>)
 80198d0:	701a      	strb	r2, [r3, #0]
    pecb->eventCounter++;     /* Increment semaphore count to register event  */
 80198d2:	68fb      	ldr	r3, [r7, #12]
 80198d4:	88db      	ldrh	r3, [r3, #6]
 80198d6:	3301      	adds	r3, #1
 80198d8:	b29a      	uxth	r2, r3
 80198da:	68fb      	ldr	r3, [r7, #12]
 80198dc:	80da      	strh	r2, [r3, #6]
    EventTaskToRdy(pecb);     /* Check semaphore event waiting list           */
 80198de:	68f8      	ldr	r0, [r7, #12]
 80198e0:	f7fe f876 	bl	80179d0 <EventTaskToRdy>
    OsSchedUnlock();
 80198e4:	f7fd fe68 	bl	80175b8 <OsSchedUnlock>
    return E_OK;
 80198e8:	2300      	movs	r3, #0
		
}
 80198ea:	4618      	mov	r0, r3
 80198ec:	3710      	adds	r7, #16
 80198ee:	46bd      	mov	sp, r7
 80198f0:	bd80      	pop	{r7, pc}
 80198f2:	bf00      	nop
 80198f4:	2000374c 	.word	0x2000374c
 80198f8:	20003749 	.word	0x20003749

080198fc <isr_PostSem>:
 * @note 
 *******************************************************************************
 */
#if CFG_MAX_SERVICE_REQUEST > 0
StatusType isr_PostSem(OS_EventID id)
{
 80198fc:	b580      	push	{r7, lr}
 80198fe:	b082      	sub	sp, #8
 8019900:	af00      	add	r7, sp, #0
 8019902:	4603      	mov	r3, r0
 8019904:	71fb      	strb	r3, [r7, #7]
    if(OSSchedLock > 0)         /* If scheduler is locked,(the caller is ISR) */      
 8019906:	4b0d      	ldr	r3, [pc, #52]	; (801993c <isr_PostSem+0x40>)
 8019908:	781b      	ldrb	r3, [r3, #0]
 801990a:	b2db      	uxtb	r3, r3
 801990c:	2b00      	cmp	r3, #0
 801990e:	d00c      	beq.n	801992a <isr_PostSem+0x2e>
    {
        /* Initiate a post service handling request */
        if(InsertInSRQ(SEM_REQ,id,Co_NULL) == Co_FALSE)
 8019910:	79fb      	ldrb	r3, [r7, #7]
 8019912:	2200      	movs	r2, #0
 8019914:	4619      	mov	r1, r3
 8019916:	2001      	movs	r0, #1
 8019918:	f000 f812 	bl	8019940 <InsertInSRQ>
 801991c:	4603      	mov	r3, r0
 801991e:	2b00      	cmp	r3, #0
 8019920:	d101      	bne.n	8019926 <isr_PostSem+0x2a>
        {
            return E_SEV_REQ_FULL;        /* If service request queue is full */
 8019922:	2312      	movs	r3, #18
 8019924:	e006      	b.n	8019934 <isr_PostSem+0x38>
        }			
        else                              /* Operate successfully             */
        {
            return E_OK;                        
 8019926:	2300      	movs	r3, #0
 8019928:	e004      	b.n	8019934 <isr_PostSem+0x38>
        }
    }
    else
    {
        return(CoPostSem(id));            /* Post semaphore                   */
 801992a:	79fb      	ldrb	r3, [r7, #7]
 801992c:	4618      	mov	r0, r3
 801992e:	f7ff ffa9 	bl	8019884 <CoPostSem>
 8019932:	4603      	mov	r3, r0
    }
}
 8019934:	4618      	mov	r0, r3
 8019936:	3708      	adds	r7, #8
 8019938:	46bd      	mov	sp, r7
 801993a:	bd80      	pop	{r7, pc}
 801993c:	20003749 	.word	0x20003749

08019940 <InsertInSRQ>:
 * @note 
 *******************************************************************************
 */
#if (CFG_MAX_SERVICE_REQUEST > 0)
BOOL InsertInSRQ(U8 type,U8 id,void* arg)
{
 8019940:	b580      	push	{r7, lr}
 8019942:	b084      	sub	sp, #16
 8019944:	af00      	add	r7, sp, #0
 8019946:	4603      	mov	r3, r0
 8019948:	603a      	str	r2, [r7, #0]
 801994a:	71fb      	strb	r3, [r7, #7]
 801994c:	460b      	mov	r3, r1
 801994e:	71bb      	strb	r3, [r7, #6]
    P_SQC   pcell;
	U8 cnt;
	U8 heed;
    IRQ_DISABLE_SAVE();
 8019950:	f7ff fbc0 	bl	80190d4 <IRQ_DISABLE_SAVE>
    if (ServiceReq.cnt >= CFG_MAX_SERVICE_REQUEST)
 8019954:	4b1a      	ldr	r3, [pc, #104]	; (80199c0 <InsertInSRQ+0x80>)
 8019956:	781b      	ldrb	r3, [r3, #0]
 8019958:	2b04      	cmp	r3, #4
 801995a:	d903      	bls.n	8019964 <InsertInSRQ+0x24>
    {
        IRQ_ENABLE_RESTORE ();
 801995c:	f7ff fbb2 	bl	80190c4 <IRQ_ENABLE_RESTORE>

        return Co_FALSE;                   /* Error return                       */
 8019960:	2300      	movs	r3, #0
 8019962:	e028      	b.n	80199b6 <InsertInSRQ+0x76>
    }
	cnt = Inc8(&ServiceReq.cnt);
 8019964:	4816      	ldr	r0, [pc, #88]	; (80199c0 <InsertInSRQ+0x80>)
 8019966:	f7ff fb7f 	bl	8019068 <Inc8>
 801996a:	4603      	mov	r3, r0
 801996c:	73fb      	strb	r3, [r7, #15]
	heed = ServiceReq.head;
 801996e:	4b14      	ldr	r3, [pc, #80]	; (80199c0 <InsertInSRQ+0x80>)
 8019970:	785b      	ldrb	r3, [r3, #1]
 8019972:	73bb      	strb	r3, [r7, #14]
    IsrReq = Co_TRUE;
 8019974:	4b13      	ldr	r3, [pc, #76]	; (80199c4 <InsertInSRQ+0x84>)
 8019976:	2201      	movs	r2, #1
 8019978:	701a      	strb	r2, [r3, #0]
    pcell = &ServiceReq.cell[((cnt+heed)%CFG_MAX_SERVICE_REQUEST)];/*the tail */
 801997a:	7bfa      	ldrb	r2, [r7, #15]
 801997c:	7bbb      	ldrb	r3, [r7, #14]
 801997e:	18d1      	adds	r1, r2, r3
 8019980:	4b11      	ldr	r3, [pc, #68]	; (80199c8 <InsertInSRQ+0x88>)
 8019982:	fb83 2301 	smull	r2, r3, r3, r1
 8019986:	105a      	asrs	r2, r3, #1
 8019988:	17cb      	asrs	r3, r1, #31
 801998a:	1ad2      	subs	r2, r2, r3
 801998c:	4613      	mov	r3, r2
 801998e:	009b      	lsls	r3, r3, #2
 8019990:	4413      	add	r3, r2
 8019992:	1aca      	subs	r2, r1, r3
 8019994:	00d3      	lsls	r3, r2, #3
 8019996:	4a0a      	ldr	r2, [pc, #40]	; (80199c0 <InsertInSRQ+0x80>)
 8019998:	4413      	add	r3, r2
 801999a:	3304      	adds	r3, #4
 801999c:	60bb      	str	r3, [r7, #8]
    pcell->type = type;                 /* Save service request type,         */
 801999e:	68bb      	ldr	r3, [r7, #8]
 80199a0:	79fa      	ldrb	r2, [r7, #7]
 80199a2:	701a      	strb	r2, [r3, #0]
    pcell->id   = id;                   /* event id                           */
 80199a4:	68bb      	ldr	r3, [r7, #8]
 80199a6:	79ba      	ldrb	r2, [r7, #6]
 80199a8:	705a      	strb	r2, [r3, #1]
    pcell->arg  = arg;                  /* and parameter                      */
 80199aa:	68bb      	ldr	r3, [r7, #8]
 80199ac:	683a      	ldr	r2, [r7, #0]
 80199ae:	605a      	str	r2, [r3, #4]
    IRQ_ENABLE_RESTORE ();
 80199b0:	f7ff fb88 	bl	80190c4 <IRQ_ENABLE_RESTORE>

    return Co_TRUE;                        /* Return OK                          */
 80199b4:	2301      	movs	r3, #1
}
 80199b6:	4618      	mov	r0, r3
 80199b8:	3710      	adds	r7, #16
 80199ba:	46bd      	mov	sp, r7
 80199bc:	bd80      	pop	{r7, pc}
 80199be:	bf00      	nop
 80199c0:	2000d568 	.word	0x2000d568
 80199c4:	2000d594 	.word	0x2000d594
 80199c8:	66666667 	.word	0x66666667

080199cc <RespondSRQ>:
 *             request queue.
 * @note 
 *******************************************************************************
 */
void RespondSRQ(void)
{
 80199cc:	b580      	push	{r7, lr}
 80199ce:	b082      	sub	sp, #8
 80199d0:	af00      	add	r7, sp, #0
    SQC cell;

#endif

#if (CFG_TASK_WAITTING_EN > 0)
    if(TimeReq == Co_TRUE)                 /* Time delay request?                */
 80199d2:	4b39      	ldr	r3, [pc, #228]	; (8019ab8 <RespondSRQ+0xec>)
 80199d4:	781b      	ldrb	r3, [r3, #0]
 80199d6:	2b01      	cmp	r3, #1
 80199d8:	d104      	bne.n	80199e4 <RespondSRQ+0x18>
    {
        TimeDispose();                  /* Yes,call handler                   */
 80199da:	f000 fea5 	bl	801a728 <TimeDispose>
        TimeReq = Co_FALSE;                /* Reset time delay request Co_FALSE     */
 80199de:	4b36      	ldr	r3, [pc, #216]	; (8019ab8 <RespondSRQ+0xec>)
 80199e0:	2200      	movs	r2, #0
 80199e2:	701a      	strb	r2, [r3, #0]
    }
#endif
#if CFG_TMR_EN  > 0
    if(TimerReq == Co_TRUE)                /* Timer request?                     */
 80199e4:	4b35      	ldr	r3, [pc, #212]	; (8019abc <RespondSRQ+0xf0>)
 80199e6:	781b      	ldrb	r3, [r3, #0]
 80199e8:	2b01      	cmp	r3, #1
 80199ea:	d152      	bne.n	8019a92 <RespondSRQ+0xc6>
    {
        TmrDispose();                   /* Yes,call handler                   */
 80199ec:	f001 fa0c 	bl	801ae08 <TmrDispose>
        TimerReq = Co_FALSE;               /* Reset timer request Co_FALSE          */
 80199f0:	4b32      	ldr	r3, [pc, #200]	; (8019abc <RespondSRQ+0xf0>)
 80199f2:	2200      	movs	r2, #0
 80199f4:	701a      	strb	r2, [r3, #0]
    }
#endif

#if CFG_MAX_SERVICE_REQUEST > 0

    while (ServiceReq.cnt != 0)
 80199f6:	e04c      	b.n	8019a92 <RespondSRQ+0xc6>
    {
        IRQ_DISABLE_SAVE ();            /* need to protect the following      */
 80199f8:	f7ff fb6c 	bl	80190d4 <IRQ_DISABLE_SAVE>
        cell = ServiceReq.cell[ServiceReq.head];  /* extract one cell         */
 80199fc:	4b30      	ldr	r3, [pc, #192]	; (8019ac0 <RespondSRQ+0xf4>)
 80199fe:	785b      	ldrb	r3, [r3, #1]
 8019a00:	4a2f      	ldr	r2, [pc, #188]	; (8019ac0 <RespondSRQ+0xf4>)
 8019a02:	00db      	lsls	r3, r3, #3
 8019a04:	4413      	add	r3, r2
 8019a06:	463a      	mov	r2, r7
 8019a08:	3304      	adds	r3, #4
 8019a0a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8019a0e:	e882 0003 	stmia.w	r2, {r0, r1}
        ServiceReq.head = (ServiceReq.head + 1) % /* move head (pop)          */
 8019a12:	4b2b      	ldr	r3, [pc, #172]	; (8019ac0 <RespondSRQ+0xf4>)
 8019a14:	785b      	ldrb	r3, [r3, #1]
 8019a16:	1c5a      	adds	r2, r3, #1
 8019a18:	4b2a      	ldr	r3, [pc, #168]	; (8019ac4 <RespondSRQ+0xf8>)
 8019a1a:	fb83 1302 	smull	r1, r3, r3, r2
 8019a1e:	1059      	asrs	r1, r3, #1
 8019a20:	17d3      	asrs	r3, r2, #31
 8019a22:	1ac9      	subs	r1, r1, r3
 8019a24:	460b      	mov	r3, r1
 8019a26:	009b      	lsls	r3, r3, #2
 8019a28:	440b      	add	r3, r1
 8019a2a:	1ad1      	subs	r1, r2, r3
 8019a2c:	b2ca      	uxtb	r2, r1
 8019a2e:	4b24      	ldr	r3, [pc, #144]	; (8019ac0 <RespondSRQ+0xf4>)
 8019a30:	705a      	strb	r2, [r3, #1]
                     CFG_MAX_SERVICE_REQUEST;
        ServiceReq.cnt--;
 8019a32:	4b23      	ldr	r3, [pc, #140]	; (8019ac0 <RespondSRQ+0xf4>)
 8019a34:	781b      	ldrb	r3, [r3, #0]
 8019a36:	3b01      	subs	r3, #1
 8019a38:	b2da      	uxtb	r2, r3
 8019a3a:	4b21      	ldr	r3, [pc, #132]	; (8019ac0 <RespondSRQ+0xf4>)
 8019a3c:	701a      	strb	r2, [r3, #0]
        IRQ_ENABLE_RESTORE ();          /* now use the cell copy              */
 8019a3e:	f7ff fb41 	bl	80190c4 <IRQ_ENABLE_RESTORE>

        switch(cell.type)               /* Judge service request type         */
 8019a42:	783b      	ldrb	r3, [r7, #0]
 8019a44:	3b01      	subs	r3, #1
 8019a46:	2b03      	cmp	r3, #3
 8019a48:	d822      	bhi.n	8019a90 <RespondSRQ+0xc4>
 8019a4a:	a201      	add	r2, pc, #4	; (adr r2, 8019a50 <RespondSRQ+0x84>)
 8019a4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019a50:	08019a61 	.word	0x08019a61
 8019a54:	08019a6b 	.word	0x08019a6b
 8019a58:	08019a79 	.word	0x08019a79
 8019a5c:	08019a83 	.word	0x08019a83
        {
#if CFG_SEM_EN > 0
        case SEM_REQ:                   /* Semaphore post request,call handler*/
            CoPostSem(cell.id);
 8019a60:	787b      	ldrb	r3, [r7, #1]
 8019a62:	4618      	mov	r0, r3
 8019a64:	f7ff ff0e 	bl	8019884 <CoPostSem>
            break;
 8019a68:	e013      	b.n	8019a92 <RespondSRQ+0xc6>
#endif
#if CFG_MAILBOX_EN > 0
        case MBOX_REQ:                  /* Mailbox post request,call handler  */
            CoPostMail(cell.id, cell.arg);
 8019a6a:	787b      	ldrb	r3, [r7, #1]
 8019a6c:	687a      	ldr	r2, [r7, #4]
 8019a6e:	4611      	mov	r1, r2
 8019a70:	4618      	mov	r0, r3
 8019a72:	f7ff f88f 	bl	8018b94 <CoPostMail>
            break;
 8019a76:	e00c      	b.n	8019a92 <RespondSRQ+0xc6>
#endif
#if CFG_FLAG_EN > 0
        case FLAG_REQ:                  /* Flag set request,call handler      */
            CoSetFlag(cell.id);
 8019a78:	787b      	ldrb	r3, [r7, #1]
 8019a7a:	4618      	mov	r0, r3
 8019a7c:	f7fe fb96 	bl	80181ac <CoSetFlag>
            break;
 8019a80:	e007      	b.n	8019a92 <RespondSRQ+0xc6>
#endif
#if CFG_QUEUE_EN > 0
        case QUEUE_REQ:                 /* Queue post request,call handler    */
            CoPostQueueMail(cell.id, cell.arg);
 8019a82:	787b      	ldrb	r3, [r7, #1]
 8019a84:	687a      	ldr	r2, [r7, #4]
 8019a86:	4611      	mov	r1, r2
 8019a88:	4618      	mov	r0, r3
 8019a8a:	f7ff fd71 	bl	8019570 <CoPostQueueMail>
            break;
 8019a8e:	e000      	b.n	8019a92 <RespondSRQ+0xc6>
#endif
        default:                        /* Others,break                       */
            break;
 8019a90:	bf00      	nop
    while (ServiceReq.cnt != 0)
 8019a92:	4b0b      	ldr	r3, [pc, #44]	; (8019ac0 <RespondSRQ+0xf4>)
 8019a94:	781b      	ldrb	r3, [r3, #0]
 8019a96:	2b00      	cmp	r3, #0
 8019a98:	d1ae      	bne.n	80199f8 <RespondSRQ+0x2c>
        }
    }
#endif
    IRQ_DISABLE_SAVE ();                /* need to protect the following      */
 8019a9a:	f7ff fb1b 	bl	80190d4 <IRQ_DISABLE_SAVE>

    if (ServiceReq.cnt == 0)            /* another item in the queue already? */
 8019a9e:	4b08      	ldr	r3, [pc, #32]	; (8019ac0 <RespondSRQ+0xf4>)
 8019aa0:	781b      	ldrb	r3, [r3, #0]
 8019aa2:	2b00      	cmp	r3, #0
 8019aa4:	d102      	bne.n	8019aac <RespondSRQ+0xe0>
    {
        IsrReq = Co_FALSE;                 /* queue still empty here             */
 8019aa6:	4b08      	ldr	r3, [pc, #32]	; (8019ac8 <RespondSRQ+0xfc>)
 8019aa8:	2200      	movs	r2, #0
 8019aaa:	701a      	strb	r2, [r3, #0]
    }
    IRQ_ENABLE_RESTORE ();              /* now it is done and return          */
 8019aac:	f7ff fb0a 	bl	80190c4 <IRQ_ENABLE_RESTORE>
}
 8019ab0:	bf00      	nop
 8019ab2:	3708      	adds	r7, #8
 8019ab4:	46bd      	mov	sp, r7
 8019ab6:	bd80      	pop	{r7, pc}
 8019ab8:	2000d595 	.word	0x2000d595
 8019abc:	2000d596 	.word	0x2000d596
 8019ac0:	2000d568 	.word	0x2000d568
 8019ac4:	66666667 	.word	0x66666667
 8019ac8:	2000d594 	.word	0x2000d594

08019acc <CreateTCBList>:
 * @details    This function is called by CoOSInit() to initial the empty list	 
 *             of OS_TCBS,supply a pointer to free TCB.
 *******************************************************************************
 */
void CreateTCBList(void)
{	
 8019acc:	b480      	push	{r7}
 8019ace:	b085      	sub	sp, #20
 8019ad0:	af00      	add	r7, sp, #0
    
#if CFG_ORDER_LIST_SCHEDULE_EN ==0
	PriNum = 0;
#endif

	ptcb1 = &TCBTbl[0];	                /* Build the free TCB list            */
 8019ad2:	4b15      	ldr	r3, [pc, #84]	; (8019b28 <CreateTCBList+0x5c>)
 8019ad4:	60bb      	str	r3, [r7, #8]
    ptcb2 = &TCBTbl[1];  
 8019ad6:	4b15      	ldr	r3, [pc, #84]	; (8019b2c <CreateTCBList+0x60>)
 8019ad8:	607b      	str	r3, [r7, #4]
    for(i=0;i< (CFG_MAX_USER_TASKS+SYS_TASK_NUM-1);i++ )
 8019ada:	2300      	movs	r3, #0
 8019adc:	73fb      	strb	r3, [r7, #15]
 8019ade:	e011      	b.n	8019b04 <CreateTCBList+0x38>
    {
		ptcb1->taskID    = i;
 8019ae0:	68bb      	ldr	r3, [r7, #8]
 8019ae2:	7bfa      	ldrb	r2, [r7, #15]
 8019ae4:	719a      	strb	r2, [r3, #6]
		ptcb1->state     = TASK_DORMANT;
 8019ae6:	68bb      	ldr	r3, [r7, #8]
 8019ae8:	2203      	movs	r2, #3
 8019aea:	715a      	strb	r2, [r3, #5]
        ptcb1->TCBnext   = ptcb2;
 8019aec:	68bb      	ldr	r3, [r7, #8]
 8019aee:	687a      	ldr	r2, [r7, #4]
 8019af0:	625a      	str	r2, [r3, #36]	; 0x24
#if CFG_ORDER_LIST_SCHEDULE_EN ==0
		RdyTaskPri[i]    = INVALID_ID;
		ActivePri[i]	 = INVALID_ID;
#endif
        ptcb1++;
 8019af2:	68bb      	ldr	r3, [r7, #8]
 8019af4:	3330      	adds	r3, #48	; 0x30
 8019af6:	60bb      	str	r3, [r7, #8]
        ptcb2++;	
 8019af8:	687b      	ldr	r3, [r7, #4]
 8019afa:	3330      	adds	r3, #48	; 0x30
 8019afc:	607b      	str	r3, [r7, #4]
    for(i=0;i< (CFG_MAX_USER_TASKS+SYS_TASK_NUM-1);i++ )
 8019afe:	7bfb      	ldrb	r3, [r7, #15]
 8019b00:	3301      	adds	r3, #1
 8019b02:	73fb      	strb	r3, [r7, #15]
 8019b04:	7bfb      	ldrb	r3, [r7, #15]
 8019b06:	2b04      	cmp	r3, #4
 8019b08:	d9ea      	bls.n	8019ae0 <CreateTCBList+0x14>
    }
#if CFG_ORDER_LIST_SCHEDULE_EN ==0
		ActivePri[i]	 = INVALID_ID;
#endif

	ptcb1->taskID    = i;	
 8019b0a:	68bb      	ldr	r3, [r7, #8]
 8019b0c:	7bfa      	ldrb	r2, [r7, #15]
 8019b0e:	719a      	strb	r2, [r3, #6]
    ptcb1->TCBnext   = Co_NULL;
 8019b10:	68bb      	ldr	r3, [r7, #8]
 8019b12:	2200      	movs	r2, #0
 8019b14:	625a      	str	r2, [r3, #36]	; 0x24
    FreeTCB = &TCBTbl[0];         /* Initialize FreeTCB as head item of list  */			
 8019b16:	4b06      	ldr	r3, [pc, #24]	; (8019b30 <CreateTCBList+0x64>)
 8019b18:	4a03      	ldr	r2, [pc, #12]	; (8019b28 <CreateTCBList+0x5c>)
 8019b1a:	601a      	str	r2, [r3, #0]
}
 8019b1c:	bf00      	nop
 8019b1e:	3714      	adds	r7, #20
 8019b20:	46bd      	mov	sp, r7
 8019b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019b26:	4770      	bx	lr
 8019b28:	2000d598 	.word	0x2000d598
 8019b2c:	2000d5c8 	.word	0x2000d5c8
 8019b30:	2000d71c 	.word	0x2000d71c

08019b34 <InsertToTCBRdyList>:
 * @par Description
 * @details   This function is called to insert a task to the READY list. 
 *******************************************************************************
 */
void InsertToTCBRdyList(P_OSTCB tcbInsert)
{
 8019b34:	e92d 0890 	stmdb	sp!, {r4, r7, fp}
 8019b38:	b087      	sub	sp, #28
 8019b3a:	af00      	add	r7, sp, #0
 8019b3c:	6078      	str	r0, [r7, #4]
#if CFG_ORDER_LIST_SCHEDULE_EN ==0
	U8  seqNum;
	U8  RdyTaskSeqNum;
#endif
    
    prio = tcbInsert->prio;             /* Get PRI of inserted task           */
 8019b3e:	687b      	ldr	r3, [r7, #4]
 8019b40:	791b      	ldrb	r3, [r3, #4]
 8019b42:	73fb      	strb	r3, [r7, #15]
    tcbInsert->state     = TASK_READY;  /* Set task as TASK_READY             */
 8019b44:	687b      	ldr	r3, [r7, #4]
 8019b46:	2200      	movs	r2, #0
 8019b48:	715a      	strb	r2, [r3, #5]

#if CFG_ROBIN_EN >0
	ptcb = TCBRunning;
 8019b4a:	4b37      	ldr	r3, [pc, #220]	; (8019c28 <InsertToTCBRdyList+0xf4>)
 8019b4c:	681b      	ldr	r3, [r3, #0]
 8019b4e:	613b      	str	r3, [r7, #16]
    /* Set schedule time for the same PRI task as TCBRunning.                 */
    if(prio == ptcb->prio)  /* Is PRI of inserted task equal to running task? */
 8019b50:	693b      	ldr	r3, [r7, #16]
 8019b52:	791b      	ldrb	r3, [r3, #4]
 8019b54:	7bfa      	ldrb	r2, [r7, #15]
 8019b56:	429a      	cmp	r2, r3
 8019b58:	d11f      	bne.n	8019b9a <InsertToTCBRdyList+0x66>
    {
        if(ptcb != tcbInsert) /* Yes,is inserted task equal to running task?  */
 8019b5a:	693a      	ldr	r2, [r7, #16]
 8019b5c:	687b      	ldr	r3, [r7, #4]
 8019b5e:	429a      	cmp	r2, r3
 8019b60:	d01b      	beq.n	8019b9a <InsertToTCBRdyList+0x66>
        {
            if(ptcb != Co_NULL)            /* No,TCBRunning == Co_NULL?             */
 8019b62:	693b      	ldr	r3, [r7, #16]
 8019b64:	2b00      	cmp	r3, #0
 8019b66:	d018      	beq.n	8019b9a <InsertToTCBRdyList+0x66>
            {                           /* N0,OSCheckTime < OSTickCnt?        */
                if(OSCheckTime < OSTickCnt)	 
 8019b68:	4b30      	ldr	r3, [pc, #192]	; (8019c2c <InsertToTCBRdyList+0xf8>)
 8019b6a:	e9d3 1200 	ldrd	r1, r2, [r3]
 8019b6e:	4b30      	ldr	r3, [pc, #192]	; (8019c30 <InsertToTCBRdyList+0xfc>)
 8019b70:	e9d3 3400 	ldrd	r3, r4, [r3]
 8019b74:	42a2      	cmp	r2, r4
 8019b76:	bf08      	it	eq
 8019b78:	4299      	cmpeq	r1, r3
 8019b7a:	d20e      	bcs.n	8019b9a <InsertToTCBRdyList+0x66>
                {                       /* Yes,set OSCheckTime for task robin */
                    OSCheckTime = OSTickCnt + ptcb->timeSlice;	
 8019b7c:	693b      	ldr	r3, [r7, #16]
 8019b7e:	895b      	ldrh	r3, [r3, #10]
 8019b80:	b299      	uxth	r1, r3
 8019b82:	f04f 0200 	mov.w	r2, #0
 8019b86:	4b2a      	ldr	r3, [pc, #168]	; (8019c30 <InsertToTCBRdyList+0xfc>)
 8019b88:	e9d3 bc00 	ldrd	fp, ip, [r3]
 8019b8c:	eb1b 0301 	adds.w	r3, fp, r1
 8019b90:	eb4c 0402 	adc.w	r4, ip, r2
 8019b94:	4a25      	ldr	r2, [pc, #148]	; (8019c2c <InsertToTCBRdyList+0xf8>)
 8019b96:	e9c2 3400 	strd	r3, r4, [r2]
	    ptcbNext->TCBprev  = tcbInsert;
	}


#else
    ptcb = TCBRdy;
 8019b9a:	4b26      	ldr	r3, [pc, #152]	; (8019c34 <InsertToTCBRdyList+0x100>)
 8019b9c:	681b      	ldr	r3, [r3, #0]
 8019b9e:	613b      	str	r3, [r7, #16]
    if (ptcb == Co_NULL)                   /* Is ready list Co_NULL?                */
 8019ba0:	693b      	ldr	r3, [r7, #16]
 8019ba2:	2b00      	cmp	r3, #0
 8019ba4:	d106      	bne.n	8019bb4 <InsertToTCBRdyList+0x80>
    {
        TaskSchedReq = Co_TRUE;
 8019ba6:	4b24      	ldr	r3, [pc, #144]	; (8019c38 <InsertToTCBRdyList+0x104>)
 8019ba8:	2201      	movs	r2, #1
 8019baa:	701a      	strb	r2, [r3, #0]
        TCBRdy = tcbInsert;         /* Yse,set tcbInsert as head item of list */
 8019bac:	4a21      	ldr	r2, [pc, #132]	; (8019c34 <InsertToTCBRdyList+0x100>)
 8019bae:	687b      	ldr	r3, [r7, #4]
 8019bb0:	6013      	str	r3, [r2, #0]
        {
            ptcbNext->TCBprev  = tcbInsert;
        }		
    }
#endif
}
 8019bb2:	e033      	b.n	8019c1c <InsertToTCBRdyList+0xe8>
    else if (prio < ptcb->prio)/* Is PRI of inserted task higher than TCBRdy? */
 8019bb4:	693b      	ldr	r3, [r7, #16]
 8019bb6:	791b      	ldrb	r3, [r3, #4]
 8019bb8:	7bfa      	ldrb	r2, [r7, #15]
 8019bba:	429a      	cmp	r2, r3
 8019bbc:	d20c      	bcs.n	8019bd8 <InsertToTCBRdyList+0xa4>
        TaskSchedReq = Co_TRUE;
 8019bbe:	4b1e      	ldr	r3, [pc, #120]	; (8019c38 <InsertToTCBRdyList+0x104>)
 8019bc0:	2201      	movs	r2, #1
 8019bc2:	701a      	strb	r2, [r3, #0]
        tcbInsert->TCBnext = ptcb;  /* Yes,set tcbInsert as head item of list */
 8019bc4:	687b      	ldr	r3, [r7, #4]
 8019bc6:	693a      	ldr	r2, [r7, #16]
 8019bc8:	625a      	str	r2, [r3, #36]	; 0x24
        ptcb->TCBprev  = tcbInsert;
 8019bca:	693b      	ldr	r3, [r7, #16]
 8019bcc:	687a      	ldr	r2, [r7, #4]
 8019bce:	629a      	str	r2, [r3, #40]	; 0x28
        TCBRdy         = tcbInsert;
 8019bd0:	4a18      	ldr	r2, [pc, #96]	; (8019c34 <InsertToTCBRdyList+0x100>)
 8019bd2:	687b      	ldr	r3, [r7, #4]
 8019bd4:	6013      	str	r3, [r2, #0]
}
 8019bd6:	e021      	b.n	8019c1c <InsertToTCBRdyList+0xe8>
        ptcbNext = ptcb->TCBnext;       /* Get next item                      */
 8019bd8:	693b      	ldr	r3, [r7, #16]
 8019bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019bdc:	617b      	str	r3, [r7, #20]
        while(ptcbNext != Co_NULL)         /* Is last item in ready list?        */
 8019bde:	e009      	b.n	8019bf4 <InsertToTCBRdyList+0xc0>
            if(prio < ptcbNext->prio)   /* Is correct place?                  */
 8019be0:	697b      	ldr	r3, [r7, #20]
 8019be2:	791b      	ldrb	r3, [r3, #4]
 8019be4:	7bfa      	ldrb	r2, [r7, #15]
 8019be6:	429a      	cmp	r2, r3
 8019be8:	d308      	bcc.n	8019bfc <InsertToTCBRdyList+0xc8>
            ptcb     = ptcbNext;        /* Save current item                  */
 8019bea:	697b      	ldr	r3, [r7, #20]
 8019bec:	613b      	str	r3, [r7, #16]
            ptcbNext = ptcbNext->TCBnext; /* Get next item                    */
 8019bee:	697b      	ldr	r3, [r7, #20]
 8019bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019bf2:	617b      	str	r3, [r7, #20]
        while(ptcbNext != Co_NULL)         /* Is last item in ready list?        */
 8019bf4:	697b      	ldr	r3, [r7, #20]
 8019bf6:	2b00      	cmp	r3, #0
 8019bf8:	d1f2      	bne.n	8019be0 <InsertToTCBRdyList+0xac>
 8019bfa:	e000      	b.n	8019bfe <InsertToTCBRdyList+0xca>
                break;                  /* Yes,break circulation              */
 8019bfc:	bf00      	nop
        tcbInsert->TCBnext = ptcbNext;  /* Set link for list                  */
 8019bfe:	687b      	ldr	r3, [r7, #4]
 8019c00:	697a      	ldr	r2, [r7, #20]
 8019c02:	625a      	str	r2, [r3, #36]	; 0x24
        ptcb->TCBnext      = tcbInsert;
 8019c04:	693b      	ldr	r3, [r7, #16]
 8019c06:	687a      	ldr	r2, [r7, #4]
 8019c08:	625a      	str	r2, [r3, #36]	; 0x24
        tcbInsert->TCBprev = ptcb;
 8019c0a:	687b      	ldr	r3, [r7, #4]
 8019c0c:	693a      	ldr	r2, [r7, #16]
 8019c0e:	629a      	str	r2, [r3, #40]	; 0x28
        if(ptcbNext != Co_NULL)
 8019c10:	697b      	ldr	r3, [r7, #20]
 8019c12:	2b00      	cmp	r3, #0
 8019c14:	d002      	beq.n	8019c1c <InsertToTCBRdyList+0xe8>
            ptcbNext->TCBprev  = tcbInsert;
 8019c16:	697b      	ldr	r3, [r7, #20]
 8019c18:	687a      	ldr	r2, [r7, #4]
 8019c1a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8019c1c:	bf00      	nop
 8019c1e:	371c      	adds	r7, #28
 8019c20:	46bd      	mov	sp, r7
 8019c22:	e8bd 0890 	ldmia.w	sp!, {r4, r7, fp}
 8019c26:	4770      	bx	lr
 8019c28:	2000d728 	.word	0x2000d728
 8019c2c:	2000d730 	.word	0x2000d730
 8019c30:	20003740 	.word	0x20003740
 8019c34:	2000d720 	.word	0x2000d720
 8019c38:	2000374a 	.word	0x2000374a

08019c3c <RemoveFromTCBRdyList>:
 * @par Description
 * @details    This function is called to remove a task from the READY list.
 *******************************************************************************
 */
void RemoveFromTCBRdyList(P_OSTCB ptcb)
{
 8019c3c:	b480      	push	{r7}
 8019c3e:	b083      	sub	sp, #12
 8019c40:	af00      	add	r7, sp, #0
 8019c42:	6078      	str	r0, [r7, #4]
	prio = ptcb->prio;
	GetPriSeqNum(prio,&seqNum);
#endif

    /* Is there only one item in READY list?                                  */
    if((ptcb->TCBnext == Co_NULL) && (ptcb->TCBprev == Co_NULL) )
 8019c44:	687b      	ldr	r3, [r7, #4]
 8019c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019c48:	2b00      	cmp	r3, #0
 8019c4a:	d107      	bne.n	8019c5c <RemoveFromTCBRdyList+0x20>
 8019c4c:	687b      	ldr	r3, [r7, #4]
 8019c4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019c50:	2b00      	cmp	r3, #0
 8019c52:	d103      	bne.n	8019c5c <RemoveFromTCBRdyList+0x20>
    {
        TCBRdy = Co_NULL;                  /* Yes,set READY list as Co_NULL         */
 8019c54:	4b1a      	ldr	r3, [pc, #104]	; (8019cc0 <RemoveFromTCBRdyList+0x84>)
 8019c56:	2200      	movs	r2, #0
 8019c58:	601a      	str	r2, [r3, #0]
		{
			RdyTaskPri[seqNum] = INVALID_ID;
			SetPrioSeqNumStatus(seqNum, 0);
		}
#endif
}
 8019c5a:	e02b      	b.n	8019cb4 <RemoveFromTCBRdyList+0x78>
    else if(ptcb->TCBprev == Co_NULL)      /* Is the first item in READY list?   */
 8019c5c:	687b      	ldr	r3, [r7, #4]
 8019c5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019c60:	2b00      	cmp	r3, #0
 8019c62:	d10b      	bne.n	8019c7c <RemoveFromTCBRdyList+0x40>
        TCBRdy = ptcb->TCBnext;		    
 8019c64:	687b      	ldr	r3, [r7, #4]
 8019c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019c68:	4a15      	ldr	r2, [pc, #84]	; (8019cc0 <RemoveFromTCBRdyList+0x84>)
 8019c6a:	6013      	str	r3, [r2, #0]
        ptcb->TCBnext   = Co_NULL;
 8019c6c:	687b      	ldr	r3, [r7, #4]
 8019c6e:	2200      	movs	r2, #0
 8019c70:	625a      	str	r2, [r3, #36]	; 0x24
        TCBRdy->TCBprev = Co_NULL;
 8019c72:	4b13      	ldr	r3, [pc, #76]	; (8019cc0 <RemoveFromTCBRdyList+0x84>)
 8019c74:	681b      	ldr	r3, [r3, #0]
 8019c76:	2200      	movs	r2, #0
 8019c78:	629a      	str	r2, [r3, #40]	; 0x28
}
 8019c7a:	e01b      	b.n	8019cb4 <RemoveFromTCBRdyList+0x78>
    else if( ptcb->TCBnext == Co_NULL)     /* Is the last item in READY list?    */
 8019c7c:	687b      	ldr	r3, [r7, #4]
 8019c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019c80:	2b00      	cmp	r3, #0
 8019c82:	d107      	bne.n	8019c94 <RemoveFromTCBRdyList+0x58>
        ptcb->TCBprev->TCBnext = Co_NULL;
 8019c84:	687b      	ldr	r3, [r7, #4]
 8019c86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019c88:	2200      	movs	r2, #0
 8019c8a:	625a      	str	r2, [r3, #36]	; 0x24
        ptcb->TCBprev          = Co_NULL;
 8019c8c:	687b      	ldr	r3, [r7, #4]
 8019c8e:	2200      	movs	r2, #0
 8019c90:	629a      	str	r2, [r3, #40]	; 0x28
}
 8019c92:	e00f      	b.n	8019cb4 <RemoveFromTCBRdyList+0x78>
        ptcb->TCBprev->TCBnext = ptcb->TCBnext;
 8019c94:	687b      	ldr	r3, [r7, #4]
 8019c96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019c98:	687a      	ldr	r2, [r7, #4]
 8019c9a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8019c9c:	625a      	str	r2, [r3, #36]	; 0x24
        ptcb->TCBnext->TCBprev = ptcb->TCBprev;
 8019c9e:	687b      	ldr	r3, [r7, #4]
 8019ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019ca2:	687a      	ldr	r2, [r7, #4]
 8019ca4:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8019ca6:	629a      	str	r2, [r3, #40]	; 0x28
        ptcb->TCBnext = Co_NULL;
 8019ca8:	687b      	ldr	r3, [r7, #4]
 8019caa:	2200      	movs	r2, #0
 8019cac:	625a      	str	r2, [r3, #36]	; 0x24
        ptcb->TCBprev = Co_NULL;
 8019cae:	687b      	ldr	r3, [r7, #4]
 8019cb0:	2200      	movs	r2, #0
 8019cb2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8019cb4:	bf00      	nop
 8019cb6:	370c      	adds	r7, #12
 8019cb8:	46bd      	mov	sp, r7
 8019cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019cbe:	4770      	bx	lr
 8019cc0:	2000d720 	.word	0x2000d720

08019cc4 <CoSetPriority>:
 * @par Description
 * @details    This function is called to change priority for a specify task. 	
 *******************************************************************************
 */
StatusType CoSetPriority(OS_TID taskID,U8 priority)
{			
 8019cc4:	b580      	push	{r7, lr}
 8019cc6:	b086      	sub	sp, #24
 8019cc8:	af00      	add	r7, sp, #0
 8019cca:	4603      	mov	r3, r0
 8019ccc:	460a      	mov	r2, r1
 8019cce:	71fb      	strb	r3, [r7, #7]
 8019cd0:	4613      	mov	r3, r2
 8019cd2:	71bb      	strb	r3, [r7, #6]
#endif
#if CFG_EVENT_EN >0
    P_ECB pecb;
#endif

    if(taskID == 0)                     /* Is idle task?                      */
 8019cd4:	79fb      	ldrb	r3, [r7, #7]
 8019cd6:	2b00      	cmp	r3, #0
 8019cd8:	d101      	bne.n	8019cde <CoSetPriority+0x1a>
    {											 
        return E_PROTECTED_TASK;        /* Yes,error return                   */
 8019cda:	2314      	movs	r3, #20
 8019cdc:	e0c3      	b.n	8019e66 <CoSetPriority+0x1a2>
    }   
	
#if CFG_PAR_CHECKOUT_EN >0              /* Check validity of parameter        */
    if(taskID >= CFG_MAX_USER_TASKS + SYS_TASK_NUM)
 8019cde:	79fb      	ldrb	r3, [r7, #7]
 8019ce0:	2b05      	cmp	r3, #5
 8019ce2:	d901      	bls.n	8019ce8 <CoSetPriority+0x24>
    {
        return E_INVALID_ID;
 8019ce4:	2301      	movs	r3, #1
 8019ce6:	e0be      	b.n	8019e66 <CoSetPriority+0x1a2>
    }
#endif
	ptcb = &TCBTbl[taskID];             /* Get TCB of task ID                 */
 8019ce8:	79fa      	ldrb	r2, [r7, #7]
 8019cea:	4613      	mov	r3, r2
 8019cec:	005b      	lsls	r3, r3, #1
 8019cee:	4413      	add	r3, r2
 8019cf0:	011b      	lsls	r3, r3, #4
 8019cf2:	4a5f      	ldr	r2, [pc, #380]	; (8019e70 <CoSetPriority+0x1ac>)
 8019cf4:	4413      	add	r3, r2
 8019cf6:	617b      	str	r3, [r7, #20]
#if CFG_PAR_CHECKOUT_EN >0    
    if(ptcb->state == TASK_DORMANT)
 8019cf8:	697b      	ldr	r3, [r7, #20]
 8019cfa:	795b      	ldrb	r3, [r3, #5]
 8019cfc:	2b03      	cmp	r3, #3
 8019cfe:	d101      	bne.n	8019d04 <CoSetPriority+0x40>
    {
        return E_INVALID_ID;
 8019d00:	2301      	movs	r3, #1
 8019d02:	e0b0      	b.n	8019e66 <CoSetPriority+0x1a2>
    }
    if(priority > CFG_LOWEST_PRIO)
 8019d04:	79bb      	ldrb	r3, [r7, #6]
 8019d06:	2b40      	cmp	r3, #64	; 0x40
 8019d08:	d901      	bls.n	8019d0e <CoSetPriority+0x4a>
    {
        return E_INVALID_ID;
 8019d0a:	2301      	movs	r3, #1
 8019d0c:	e0ab      	b.n	8019e66 <CoSetPriority+0x1a2>
    }
#endif

    if(ptcb->prio != priority)          /* Is PRI equal to original PRI?      */
 8019d0e:	697b      	ldr	r3, [r7, #20]
 8019d10:	791b      	ldrb	r3, [r3, #4]
 8019d12:	79ba      	ldrb	r2, [r7, #6]
 8019d14:	429a      	cmp	r2, r3
 8019d16:	f000 80a5 	beq.w	8019e64 <CoSetPriority+0x1a0>
    {                                   /* No                                 */
#if CFG_MUTEX_EN >0
        if(ptcb->mutexID != INVALID_ID)
 8019d1a:	697b      	ldr	r3, [r7, #20]
 8019d1c:	79db      	ldrb	r3, [r3, #7]
 8019d1e:	2bff      	cmp	r3, #255	; 0xff
 8019d20:	d015      	beq.n	8019d4e <CoSetPriority+0x8a>
        {
            pMutex = &MutexTbl[ptcb->mutexID];
 8019d22:	697b      	ldr	r3, [r7, #20]
 8019d24:	79db      	ldrb	r3, [r3, #7]
 8019d26:	00db      	lsls	r3, r3, #3
 8019d28:	4a52      	ldr	r2, [pc, #328]	; (8019e74 <CoSetPriority+0x1b0>)
 8019d2a:	4413      	add	r3, r2
 8019d2c:	60fb      	str	r3, [r7, #12]
            if(pMutex->taskID == ptcb->taskID)  /* Task hold mutex?               */
 8019d2e:	68fb      	ldr	r3, [r7, #12]
 8019d30:	789a      	ldrb	r2, [r3, #2]
 8019d32:	697b      	ldr	r3, [r7, #20]
 8019d34:	799b      	ldrb	r3, [r3, #6]
 8019d36:	429a      	cmp	r2, r3
 8019d38:	d109      	bne.n	8019d4e <CoSetPriority+0x8a>
            {
                 pMutex->originalPrio= priority;/* Yes,change original PRI in mutex*/
 8019d3a:	68fb      	ldr	r3, [r7, #12]
 8019d3c:	79ba      	ldrb	r2, [r7, #6]
 8019d3e:	701a      	strb	r2, [r3, #0]
                 if(ptcb->prio < priority)     /* Is task priority higher than set?*/
 8019d40:	697b      	ldr	r3, [r7, #20]
 8019d42:	791b      	ldrb	r3, [r3, #4]
 8019d44:	79ba      	ldrb	r2, [r7, #6]
 8019d46:	429a      	cmp	r2, r3
 8019d48:	d901      	bls.n	8019d4e <CoSetPriority+0x8a>
                 {
                     return E_OK;                /* Yes,do nothing,return OK       */
 8019d4a:	2300      	movs	r3, #0
 8019d4c:	e08b      	b.n	8019e66 <CoSetPriority+0x1a2>
#if CFG_ORDER_LIST_SCHEDULE_EN ==0
		DeleteTaskPri(ptcb->prio);
		ActiveTaskPri(priority);	
#endif	

        ptcb->prio = priority;              /* Change task PRI                */
 8019d4e:	697b      	ldr	r3, [r7, #20]
 8019d50:	79ba      	ldrb	r2, [r7, #6]
 8019d52:	711a      	strb	r2, [r3, #4]
        if(ptcb->state == TASK_READY)       /* Is task in READY list?         */
 8019d54:	697b      	ldr	r3, [r7, #20]
 8019d56:	795b      	ldrb	r3, [r3, #5]
 8019d58:	2b00      	cmp	r3, #0
 8019d5a:	d10f      	bne.n	8019d7c <CoSetPriority+0xb8>
        {
            OsSchedLock();                  /* Yes,reorder task in READY list */
 8019d5c:	4b46      	ldr	r3, [pc, #280]	; (8019e78 <CoSetPriority+0x1b4>)
 8019d5e:	781b      	ldrb	r3, [r3, #0]
 8019d60:	b2db      	uxtb	r3, r3
 8019d62:	3301      	adds	r3, #1
 8019d64:	b2da      	uxtb	r2, r3
 8019d66:	4b44      	ldr	r3, [pc, #272]	; (8019e78 <CoSetPriority+0x1b4>)
 8019d68:	701a      	strb	r2, [r3, #0]
            RemoveFromTCBRdyList(ptcb);
 8019d6a:	6978      	ldr	r0, [r7, #20]
 8019d6c:	f7ff ff66 	bl	8019c3c <RemoveFromTCBRdyList>
            InsertToTCBRdyList(ptcb);	
 8019d70:	6978      	ldr	r0, [r7, #20]
 8019d72:	f7ff fedf 	bl	8019b34 <InsertToTCBRdyList>
            OsSchedUnlock();
 8019d76:	f7fd fc1f 	bl	80175b8 <OsSchedUnlock>
 8019d7a:	e073      	b.n	8019e64 <CoSetPriority+0x1a0>
        }
        else if(ptcb->state == TASK_RUNNING)/* Is task running?               */
 8019d7c:	697b      	ldr	r3, [r7, #20]
 8019d7e:	795b      	ldrb	r3, [r3, #5]
 8019d80:	2b01      	cmp	r3, #1
 8019d82:	d113      	bne.n	8019dac <CoSetPriority+0xe8>
        {
            if(ptcb->prio > TCBRdy->prio)   /* Yes,Is PRI higher than TCBRdy? */
 8019d84:	697b      	ldr	r3, [r7, #20]
 8019d86:	791a      	ldrb	r2, [r3, #4]
 8019d88:	4b3c      	ldr	r3, [pc, #240]	; (8019e7c <CoSetPriority+0x1b8>)
 8019d8a:	681b      	ldr	r3, [r3, #0]
 8019d8c:	791b      	ldrb	r3, [r3, #4]
 8019d8e:	429a      	cmp	r2, r3
 8019d90:	d968      	bls.n	8019e64 <CoSetPriority+0x1a0>
            {
				OsSchedLock();              /* Yes,reorder task in READY list */
 8019d92:	4b39      	ldr	r3, [pc, #228]	; (8019e78 <CoSetPriority+0x1b4>)
 8019d94:	781b      	ldrb	r3, [r3, #0]
 8019d96:	b2db      	uxtb	r3, r3
 8019d98:	3301      	adds	r3, #1
 8019d9a:	b2da      	uxtb	r2, r3
 8019d9c:	4b36      	ldr	r3, [pc, #216]	; (8019e78 <CoSetPriority+0x1b4>)
 8019d9e:	701a      	strb	r2, [r3, #0]
				TaskSchedReq = Co_TRUE;
 8019da0:	4b37      	ldr	r3, [pc, #220]	; (8019e80 <CoSetPriority+0x1bc>)
 8019da2:	2201      	movs	r2, #1
 8019da4:	701a      	strb	r2, [r3, #0]
                OsSchedUnlock();
 8019da6:	f7fd fc07 	bl	80175b8 <OsSchedUnlock>
 8019daa:	e05b      	b.n	8019e64 <CoSetPriority+0x1a0>
            }
        }
        else
        {                                   /* No,task in WAITING list        */
#if CFG_MUTEX_EN >0
            if(ptcb->mutexID != INVALID_ID) /* Is task in mutex WAITING list? */
 8019dac:	697b      	ldr	r3, [r7, #20]
 8019dae:	79db      	ldrb	r3, [r3, #7]
 8019db0:	2bff      	cmp	r3, #255	; 0xff
 8019db2:	d037      	beq.n	8019e24 <CoSetPriority+0x160>
            {
                /* Yes,reset the highest PRI in the list */
				OsSchedLock(); 
 8019db4:	4b30      	ldr	r3, [pc, #192]	; (8019e78 <CoSetPriority+0x1b4>)
 8019db6:	781b      	ldrb	r3, [r3, #0]
 8019db8:	b2db      	uxtb	r3, r3
 8019dba:	3301      	adds	r3, #1
 8019dbc:	b2da      	uxtb	r2, r3
 8019dbe:	4b2e      	ldr	r3, [pc, #184]	; (8019e78 <CoSetPriority+0x1b4>)
 8019dc0:	701a      	strb	r2, [r3, #0]
				pMutex = &MutexTbl[ptcb->mutexID];
 8019dc2:	697b      	ldr	r3, [r7, #20]
 8019dc4:	79db      	ldrb	r3, [r3, #7]
 8019dc6:	00db      	lsls	r3, r3, #3
 8019dc8:	4a2a      	ldr	r2, [pc, #168]	; (8019e74 <CoSetPriority+0x1b0>)
 8019dca:	4413      	add	r3, r2
 8019dcc:	60fb      	str	r3, [r7, #12]
                ptcb = pMutex->waittingList;  
 8019dce:	68fb      	ldr	r3, [r7, #12]
 8019dd0:	685b      	ldr	r3, [r3, #4]
 8019dd2:	617b      	str	r3, [r7, #20]
                prio = pMutex->originalPrio; 
 8019dd4:	68fb      	ldr	r3, [r7, #12]
 8019dd6:	781b      	ldrb	r3, [r3, #0]
 8019dd8:	74fb      	strb	r3, [r7, #19]
                pMutex->hipriTaskID = pMutex->taskID;
 8019dda:	68fb      	ldr	r3, [r7, #12]
 8019ddc:	789a      	ldrb	r2, [r3, #2]
 8019dde:	68fb      	ldr	r3, [r7, #12]
 8019de0:	70da      	strb	r2, [r3, #3]
                while(ptcb != Co_NULL)
 8019de2:	e00e      	b.n	8019e02 <CoSetPriority+0x13e>
                {
                    if(ptcb->prio < prio)
 8019de4:	697b      	ldr	r3, [r7, #20]
 8019de6:	791b      	ldrb	r3, [r3, #4]
 8019de8:	7cfa      	ldrb	r2, [r7, #19]
 8019dea:	429a      	cmp	r2, r3
 8019dec:	d906      	bls.n	8019dfc <CoSetPriority+0x138>
                    {
                        prio = ptcb->prio;
 8019dee:	697b      	ldr	r3, [r7, #20]
 8019df0:	791b      	ldrb	r3, [r3, #4]
 8019df2:	74fb      	strb	r3, [r7, #19]
                        pMutex->hipriTaskID = ptcb->taskID;
 8019df4:	697b      	ldr	r3, [r7, #20]
 8019df6:	799a      	ldrb	r2, [r3, #6]
 8019df8:	68fb      	ldr	r3, [r7, #12]
 8019dfa:	70da      	strb	r2, [r3, #3]
                    }
                    ptcb = ptcb->TCBnext;			
 8019dfc:	697b      	ldr	r3, [r7, #20]
 8019dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019e00:	617b      	str	r3, [r7, #20]
                while(ptcb != Co_NULL)
 8019e02:	697b      	ldr	r3, [r7, #20]
 8019e04:	2b00      	cmp	r3, #0
 8019e06:	d1ed      	bne.n	8019de4 <CoSetPriority+0x120>
                }
				OsSchedUnlock();
 8019e08:	f7fd fbd6 	bl	80175b8 <OsSchedUnlock>
                if(pMutex->originalPrio != prio)
 8019e0c:	68fb      	ldr	r3, [r7, #12]
 8019e0e:	781b      	ldrb	r3, [r3, #0]
 8019e10:	7cfa      	ldrb	r2, [r7, #19]
 8019e12:	429a      	cmp	r2, r3
 8019e14:	d006      	beq.n	8019e24 <CoSetPriority+0x160>
                {
                    CoSetPriority(pMutex->taskID,prio);	
 8019e16:	68fb      	ldr	r3, [r7, #12]
 8019e18:	789b      	ldrb	r3, [r3, #2]
 8019e1a:	7cfa      	ldrb	r2, [r7, #19]
 8019e1c:	4611      	mov	r1, r2
 8019e1e:	4618      	mov	r0, r3
 8019e20:	f7ff ff50 	bl	8019cc4 <CoSetPriority>
                }	
            }
#endif

#if CFG_EVENT_EN >0
			ptcb = &TCBTbl[taskID];
 8019e24:	79fa      	ldrb	r2, [r7, #7]
 8019e26:	4613      	mov	r3, r2
 8019e28:	005b      	lsls	r3, r3, #1
 8019e2a:	4413      	add	r3, r2
 8019e2c:	011b      	lsls	r3, r3, #4
 8019e2e:	4a10      	ldr	r2, [pc, #64]	; (8019e70 <CoSetPriority+0x1ac>)
 8019e30:	4413      	add	r3, r2
 8019e32:	617b      	str	r3, [r7, #20]
            if(ptcb->eventID != INVALID_ID) /* Is task in event WAITING list? */
 8019e34:	697b      	ldr	r3, [r7, #20]
 8019e36:	7a1b      	ldrb	r3, [r3, #8]
 8019e38:	2bff      	cmp	r3, #255	; 0xff
 8019e3a:	d013      	beq.n	8019e64 <CoSetPriority+0x1a0>
            {								    
                pecb = &EventTbl[ptcb->eventID];
 8019e3c:	697b      	ldr	r3, [r7, #20]
 8019e3e:	7a1b      	ldrb	r3, [r3, #8]
 8019e40:	011b      	lsls	r3, r3, #4
 8019e42:	4a10      	ldr	r2, [pc, #64]	; (8019e84 <CoSetPriority+0x1c0>)
 8019e44:	4413      	add	r3, r2
 8019e46:	60bb      	str	r3, [r7, #8]
                
                /* Yes,is event sort type as preemptive PRI?                  */
                if(pecb->eventSortType == EVENT_SORT_TYPE_PRIO)
 8019e48:	68bb      	ldr	r3, [r7, #8]
 8019e4a:	795b      	ldrb	r3, [r3, #5]
 8019e4c:	f023 030f 	bic.w	r3, r3, #15
 8019e50:	b2db      	uxtb	r3, r3
 8019e52:	2b20      	cmp	r3, #32
 8019e54:	d106      	bne.n	8019e64 <CoSetPriority+0x1a0>
                {	  
                    /* Yes,reorder task in the list                           */
                    RemoveEventWaittingList(ptcb);
 8019e56:	6978      	ldr	r0, [r7, #20]
 8019e58:	f7fd fe20 	bl	8017a9c <RemoveEventWaittingList>
                    EventTaskToWait(pecb,ptcb);
 8019e5c:	6979      	ldr	r1, [r7, #20]
 8019e5e:	68b8      	ldr	r0, [r7, #8]
 8019e60:	f7fd fd36 	bl	80178d0 <EventTaskToWait>
                }	
            }
#endif
        }
    }
    return E_OK;
 8019e64:	2300      	movs	r3, #0
}
 8019e66:	4618      	mov	r0, r3
 8019e68:	3718      	adds	r7, #24
 8019e6a:	46bd      	mov	sp, r7
 8019e6c:	bd80      	pop	{r7, pc}
 8019e6e:	bf00      	nop
 8019e70:	2000d598 	.word	0x2000d598
 8019e74:	2000d4f4 	.word	0x2000d4f4
 8019e78:	20003749 	.word	0x20003749
 8019e7c:	2000d720 	.word	0x2000d720
 8019e80:	2000374a 	.word	0x2000374a
 8019e84:	2000374c 	.word	0x2000374c

08019e88 <Schedule>:
 * @details    This function is called by every where need to switch context,
 *             It is schedule function of OS kernel.
 *******************************************************************************
 */
void Schedule(void)
{
 8019e88:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8019e8c:	b084      	sub	sp, #16
 8019e8e:	af00      	add	r7, sp, #0
    U8  RunPrio,RdyPrio;
    P_OSTCB pRdyTcb,pCurTcb;
   
	
    pCurTcb = TCBRunning;    
 8019e90:	4b46      	ldr	r3, [pc, #280]	; (8019fac <Schedule+0x124>)
 8019e92:	681b      	ldr	r3, [r3, #0]
 8019e94:	60fb      	str	r3, [r7, #12]
    pRdyTcb = TCBRdy;
 8019e96:	4b46      	ldr	r3, [pc, #280]	; (8019fb0 <Schedule+0x128>)
 8019e98:	681b      	ldr	r3, [r3, #0]
 8019e9a:	60bb      	str	r3, [r7, #8]

	if((pRdyTcb==Co_NULL) || (pCurTcb != TCBNext) || (OSSchedLock >1) || (OSIntNesting >0))
 8019e9c:	68bb      	ldr	r3, [r7, #8]
 8019e9e:	2b00      	cmp	r3, #0
 8019ea0:	d07c      	beq.n	8019f9c <Schedule+0x114>
 8019ea2:	4b44      	ldr	r3, [pc, #272]	; (8019fb4 <Schedule+0x12c>)
 8019ea4:	681b      	ldr	r3, [r3, #0]
 8019ea6:	68fa      	ldr	r2, [r7, #12]
 8019ea8:	429a      	cmp	r2, r3
 8019eaa:	d177      	bne.n	8019f9c <Schedule+0x114>
 8019eac:	4b42      	ldr	r3, [pc, #264]	; (8019fb8 <Schedule+0x130>)
 8019eae:	781b      	ldrb	r3, [r3, #0]
 8019eb0:	b2db      	uxtb	r3, r3
 8019eb2:	2b01      	cmp	r3, #1
 8019eb4:	d872      	bhi.n	8019f9c <Schedule+0x114>
 8019eb6:	4b41      	ldr	r3, [pc, #260]	; (8019fbc <Schedule+0x134>)
 8019eb8:	781b      	ldrb	r3, [r3, #0]
 8019eba:	b2db      	uxtb	r3, r3
 8019ebc:	2b00      	cmp	r3, #0
 8019ebe:	d16d      	bne.n	8019f9c <Schedule+0x114>
	{
		return;
	}
    
	TaskSchedReq = Co_FALSE;
 8019ec0:	4b3f      	ldr	r3, [pc, #252]	; (8019fc0 <Schedule+0x138>)
 8019ec2:	2200      	movs	r2, #0
 8019ec4:	701a      	strb	r2, [r3, #0]
    RunPrio = pCurTcb->prio;
 8019ec6:	68fb      	ldr	r3, [r7, #12]
 8019ec8:	791b      	ldrb	r3, [r3, #4]
 8019eca:	71fb      	strb	r3, [r7, #7]
    RdyPrio = pRdyTcb->prio;
 8019ecc:	68bb      	ldr	r3, [r7, #8]
 8019ece:	791b      	ldrb	r3, [r3, #4]
 8019ed0:	71bb      	strb	r3, [r7, #6]

	/* Is Running task status was changed? */
    if(pCurTcb->state != TASK_RUNNING)	
 8019ed2:	68fb      	ldr	r3, [r7, #12]
 8019ed4:	795b      	ldrb	r3, [r3, #5]
 8019ed6:	2b01      	cmp	r3, #1
 8019ed8:	d009      	beq.n	8019eee <Schedule+0x66>
    {
        TCBNext        = pRdyTcb;   /* Yes,set TCBNext and reorder READY list */
 8019eda:	4a36      	ldr	r2, [pc, #216]	; (8019fb4 <Schedule+0x12c>)
 8019edc:	68bb      	ldr	r3, [r7, #8]
 8019ede:	6013      	str	r3, [r2, #0]
        pRdyTcb->state = TASK_RUNNING;
 8019ee0:	68bb      	ldr	r3, [r7, #8]
 8019ee2:	2201      	movs	r2, #1
 8019ee4:	715a      	strb	r2, [r3, #5]
        RemoveFromTCBRdyList(pRdyTcb);
 8019ee6:	68b8      	ldr	r0, [r7, #8]
 8019ee8:	f7ff fea8 	bl	8019c3c <RemoveFromTCBRdyList>
 8019eec:	e02a      	b.n	8019f44 <Schedule+0xbc>
    }

    else if(RdyPrio < RunPrio )     /* Is higher PRI task coming in?          */
 8019eee:	79ba      	ldrb	r2, [r7, #6]
 8019ef0:	79fb      	ldrb	r3, [r7, #7]
 8019ef2:	429a      	cmp	r2, r3
 8019ef4:	d20c      	bcs.n	8019f10 <Schedule+0x88>
    {
        TCBNext        = pRdyTcb;   /* Yes,set TCBNext and reorder READY list */
 8019ef6:	4a2f      	ldr	r2, [pc, #188]	; (8019fb4 <Schedule+0x12c>)
 8019ef8:	68bb      	ldr	r3, [r7, #8]
 8019efa:	6013      	str	r3, [r2, #0]
        InsertToTCBRdyList(pCurTcb);
 8019efc:	68f8      	ldr	r0, [r7, #12]
 8019efe:	f7ff fe19 	bl	8019b34 <InsertToTCBRdyList>
		RemoveFromTCBRdyList(pRdyTcb);
 8019f02:	68b8      	ldr	r0, [r7, #8]
 8019f04:	f7ff fe9a 	bl	8019c3c <RemoveFromTCBRdyList>
        pRdyTcb->state = TASK_RUNNING;
 8019f08:	68bb      	ldr	r3, [r7, #8]
 8019f0a:	2201      	movs	r2, #1
 8019f0c:	715a      	strb	r2, [r3, #5]
 8019f0e:	e019      	b.n	8019f44 <Schedule+0xbc>
    }
    
#if CFG_ROBIN_EN >0                 /* Is time for robinning                  */                            
    else if((RunPrio == RdyPrio) && (OSCheckTime == OSTickCnt))
 8019f10:	79fa      	ldrb	r2, [r7, #7]
 8019f12:	79bb      	ldrb	r3, [r7, #6]
 8019f14:	429a      	cmp	r2, r3
 8019f16:	d143      	bne.n	8019fa0 <Schedule+0x118>
 8019f18:	4b2a      	ldr	r3, [pc, #168]	; (8019fc4 <Schedule+0x13c>)
 8019f1a:	e9d3 1200 	ldrd	r1, r2, [r3]
 8019f1e:	4b2a      	ldr	r3, [pc, #168]	; (8019fc8 <Schedule+0x140>)
 8019f20:	e9d3 3400 	ldrd	r3, r4, [r3]
 8019f24:	42a2      	cmp	r2, r4
 8019f26:	bf08      	it	eq
 8019f28:	4299      	cmpeq	r1, r3
 8019f2a:	d139      	bne.n	8019fa0 <Schedule+0x118>
    {
        TCBNext        = pRdyTcb;   /* Yes,set TCBNext and reorder READY list */
 8019f2c:	4a21      	ldr	r2, [pc, #132]	; (8019fb4 <Schedule+0x12c>)
 8019f2e:	68bb      	ldr	r3, [r7, #8]
 8019f30:	6013      	str	r3, [r2, #0]
        InsertToTCBRdyList(pCurTcb);
 8019f32:	68f8      	ldr	r0, [r7, #12]
 8019f34:	f7ff fdfe 	bl	8019b34 <InsertToTCBRdyList>
		RemoveFromTCBRdyList(pRdyTcb);
 8019f38:	68b8      	ldr	r0, [r7, #8]
 8019f3a:	f7ff fe7f 	bl	8019c3c <RemoveFromTCBRdyList>
        pRdyTcb->state = TASK_RUNNING;
 8019f3e:	68bb      	ldr	r3, [r7, #8]
 8019f40:	2201      	movs	r2, #1
 8019f42:	715a      	strb	r2, [r3, #5]
    {								    
        return;	
    }
    
#if CFG_ROBIN_EN >0
    if(TCBNext->prio == TCBRdy->prio)  /* Reset OSCheckTime for task robinnig */
 8019f44:	4b1b      	ldr	r3, [pc, #108]	; (8019fb4 <Schedule+0x12c>)
 8019f46:	681b      	ldr	r3, [r3, #0]
 8019f48:	791a      	ldrb	r2, [r3, #4]
 8019f4a:	4b19      	ldr	r3, [pc, #100]	; (8019fb0 <Schedule+0x128>)
 8019f4c:	681b      	ldr	r3, [r3, #0]
 8019f4e:	791b      	ldrb	r3, [r3, #4]
 8019f50:	429a      	cmp	r2, r3
 8019f52:	d10f      	bne.n	8019f74 <Schedule+0xec>
        OSCheckTime = OSTickCnt + TCBNext->timeSlice;
 8019f54:	4b17      	ldr	r3, [pc, #92]	; (8019fb4 <Schedule+0x12c>)
 8019f56:	681b      	ldr	r3, [r3, #0]
 8019f58:	895b      	ldrh	r3, [r3, #10]
 8019f5a:	b299      	uxth	r1, r3
 8019f5c:	f04f 0200 	mov.w	r2, #0
 8019f60:	4b19      	ldr	r3, [pc, #100]	; (8019fc8 <Schedule+0x140>)
 8019f62:	e9d3 bc00 	ldrd	fp, ip, [r3]
 8019f66:	eb1b 0301 	adds.w	r3, fp, r1
 8019f6a:	eb4c 0402 	adc.w	r4, ip, r2
 8019f6e:	4a15      	ldr	r2, [pc, #84]	; (8019fc4 <Schedule+0x13c>)
 8019f70:	e9c2 3400 	strd	r3, r4, [r2]
#endif
    
  
#if CFG_STK_CHECKOUT_EN > 0                       /* Is stack overflow?       */
    if((pCurTcb->stkPtr < pCurTcb->stack)||(*(U32*)(pCurTcb->stack) != MAGIC_WORD))       
 8019f74:	68fb      	ldr	r3, [r7, #12]
 8019f76:	681a      	ldr	r2, [r3, #0]
 8019f78:	68fb      	ldr	r3, [r7, #12]
 8019f7a:	68db      	ldr	r3, [r3, #12]
 8019f7c:	429a      	cmp	r2, r3
 8019f7e:	d305      	bcc.n	8019f8c <Schedule+0x104>
 8019f80:	68fb      	ldr	r3, [r7, #12]
 8019f82:	68db      	ldr	r3, [r3, #12]
 8019f84:	681b      	ldr	r3, [r3, #0]
 8019f86:	4a11      	ldr	r2, [pc, #68]	; (8019fcc <Schedule+0x144>)
 8019f88:	4293      	cmp	r3, r2
 8019f8a:	d004      	beq.n	8019f96 <Schedule+0x10e>
    {									
        CoStkOverflowHook(pCurTcb->taskID);       /* Yes,call handler         */		
 8019f8c:	68fb      	ldr	r3, [r7, #12]
 8019f8e:	799b      	ldrb	r3, [r3, #6]
 8019f90:	4618      	mov	r0, r3
 8019f92:	f7fe fa5a 	bl	801844a <CoStkOverflowHook>
    }   
#endif
 	
    SwitchContext();                              /* Call task context switch */
 8019f96:	f7ff f8ab 	bl	80190f0 <SwitchContext>
 8019f9a:	e002      	b.n	8019fa2 <Schedule+0x11a>
		return;
 8019f9c:	bf00      	nop
 8019f9e:	e000      	b.n	8019fa2 <Schedule+0x11a>
        return;	
 8019fa0:	bf00      	nop
}
 8019fa2:	3710      	adds	r7, #16
 8019fa4:	46bd      	mov	sp, r7
 8019fa6:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8019faa:	bf00      	nop
 8019fac:	2000d728 	.word	0x2000d728
 8019fb0:	2000d720 	.word	0x2000d720
 8019fb4:	2000d724 	.word	0x2000d724
 8019fb8:	20003749 	.word	0x20003749
 8019fbc:	20003748 	.word	0x20003748
 8019fc0:	2000374a 	.word	0x2000374a
 8019fc4:	2000d730 	.word	0x2000d730
 8019fc8:	20003740 	.word	0x20003740
 8019fcc:	5a5aa5a5 	.word	0x5a5aa5a5

08019fd0 <AssignTCB>:
 * @details    This function is called to assign a task control block for task 
 *              being created.
 *******************************************************************************
 */
static P_OSTCB AssignTCB(void)
{
 8019fd0:	b580      	push	{r7, lr}
 8019fd2:	b082      	sub	sp, #8
 8019fd4:	af00      	add	r7, sp, #0
    P_OSTCB	ptcb;
    
    OsSchedLock();                      /* Lock schedule                      */
 8019fd6:	4b0f      	ldr	r3, [pc, #60]	; (801a014 <AssignTCB+0x44>)
 8019fd8:	781b      	ldrb	r3, [r3, #0]
 8019fda:	b2db      	uxtb	r3, r3
 8019fdc:	3301      	adds	r3, #1
 8019fde:	b2da      	uxtb	r2, r3
 8019fe0:	4b0c      	ldr	r3, [pc, #48]	; (801a014 <AssignTCB+0x44>)
 8019fe2:	701a      	strb	r2, [r3, #0]
    if(FreeTCB == Co_NULL)                 /* Is there no free TCB               */
 8019fe4:	4b0c      	ldr	r3, [pc, #48]	; (801a018 <AssignTCB+0x48>)
 8019fe6:	681b      	ldr	r3, [r3, #0]
 8019fe8:	2b00      	cmp	r3, #0
 8019fea:	d103      	bne.n	8019ff4 <AssignTCB+0x24>
    {
        OsSchedUnlock();                /* Yes,unlock schedule                */
 8019fec:	f7fd fae4 	bl	80175b8 <OsSchedUnlock>
        return Co_NULL;                    /* Error return                       */
 8019ff0:	2300      	movs	r3, #0
 8019ff2:	e00a      	b.n	801a00a <AssignTCB+0x3a>
    }	
	ptcb    = FreeTCB;          /* Yes,assgin free TCB for this task  */    
 8019ff4:	4b08      	ldr	r3, [pc, #32]	; (801a018 <AssignTCB+0x48>)
 8019ff6:	681b      	ldr	r3, [r3, #0]
 8019ff8:	607b      	str	r3, [r7, #4]
	/* Set next item as the head of free TCB list                     */
    FreeTCB = FreeTCB->TCBnext; 
 8019ffa:	4b07      	ldr	r3, [pc, #28]	; (801a018 <AssignTCB+0x48>)
 8019ffc:	681b      	ldr	r3, [r3, #0]
 8019ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a000:	4a05      	ldr	r2, [pc, #20]	; (801a018 <AssignTCB+0x48>)
 801a002:	6013      	str	r3, [r2, #0]
	OsSchedUnlock();
 801a004:	f7fd fad8 	bl	80175b8 <OsSchedUnlock>
	return ptcb;
 801a008:	687b      	ldr	r3, [r7, #4]
}
 801a00a:	4618      	mov	r0, r3
 801a00c:	3708      	adds	r7, #8
 801a00e:	46bd      	mov	sp, r7
 801a010:	bd80      	pop	{r7, pc}
 801a012:	bf00      	nop
 801a014:	20003749 	.word	0x20003749
 801a018:	2000d71c 	.word	0x2000d71c

0801a01c <CreateTask>:
 * @details    This function is called by application to create a task,return a id 
 *             to mark this task.
 *******************************************************************************
 */
OS_TID CreateTask(FUNCPtr task,void *argv,U32 parameter,OS_STK *stk)
{
 801a01c:	b580      	push	{r7, lr}
 801a01e:	b088      	sub	sp, #32
 801a020:	af00      	add	r7, sp, #0
 801a022:	60f8      	str	r0, [r7, #12]
 801a024:	60b9      	str	r1, [r7, #8]
 801a026:	607a      	str	r2, [r7, #4]
 801a028:	603b      	str	r3, [r7, #0]
    U16     timeSlice;
#endif
   
#if CFG_STK_CHECKOUT_EN >0              /* Check validity of parameter        */
    U16 sktSz;
    sktSz = (parameter&0xfff00)>>8;    
 801a02a:	687b      	ldr	r3, [r7, #4]
 801a02c:	0a1b      	lsrs	r3, r3, #8
 801a02e:	b29b      	uxth	r3, r3
 801a030:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801a034:	83bb      	strh	r3, [r7, #28]
#endif
    prio = parameter&0xff;
 801a036:	687b      	ldr	r3, [r7, #4]
 801a038:	76fb      	strb	r3, [r7, #27]

#if CFG_PAR_CHECKOUT_EN >0              /* Check validity of parameter        */
    if(task == Co_NULL)
 801a03a:	68fb      	ldr	r3, [r7, #12]
 801a03c:	2b00      	cmp	r3, #0
 801a03e:	d101      	bne.n	801a044 <CreateTask+0x28>
    {
        return E_CREATE_FAIL;
 801a040:	23ff      	movs	r3, #255	; 0xff
 801a042:	e072      	b.n	801a12a <CreateTask+0x10e>
    }
    if(stk == Co_NULL)
 801a044:	683b      	ldr	r3, [r7, #0]
 801a046:	2b00      	cmp	r3, #0
 801a048:	d101      	bne.n	801a04e <CreateTask+0x32>
    {
        return E_CREATE_FAIL;
 801a04a:	23ff      	movs	r3, #255	; 0xff
 801a04c:	e06d      	b.n	801a12a <CreateTask+0x10e>
    }
    if(prio > CFG_LOWEST_PRIO)
 801a04e:	7efb      	ldrb	r3, [r7, #27]
 801a050:	2b40      	cmp	r3, #64	; 0x40
 801a052:	d901      	bls.n	801a058 <CreateTask+0x3c>
    {
        return E_CREATE_FAIL;		
 801a054:	23ff      	movs	r3, #255	; 0xff
 801a056:	e068      	b.n	801a12a <CreateTask+0x10e>
    }
#if CFG_STK_CHECKOUT_EN >0
    if(sktSz < 20)
 801a058:	8bbb      	ldrh	r3, [r7, #28]
 801a05a:	2b13      	cmp	r3, #19
 801a05c:	d801      	bhi.n	801a062 <CreateTask+0x46>
    {
        return E_CREATE_FAIL;		
 801a05e:	23ff      	movs	r3, #255	; 0xff
 801a060:	e063      	b.n	801a12a <CreateTask+0x10e>
#if CFG_TASK_SCHEDULE_EN == 0
	if(TCBRunning != Co_NULL)
		 return E_CREATE_FAIL;	
#endif   

    stkTopPtr = InitTaskContext(task,argv,stk);   /* Initialize task context. */
 801a062:	683a      	ldr	r2, [r7, #0]
 801a064:	68b9      	ldr	r1, [r7, #8]
 801a066:	68f8      	ldr	r0, [r7, #12]
 801a068:	f7fd fa00 	bl	801746c <InitTaskContext>
 801a06c:	6178      	str	r0, [r7, #20]
    
    ptcb = AssignTCB();                 /* Get free TCB to use                */
 801a06e:	f7ff ffaf 	bl	8019fd0 <AssignTCB>
 801a072:	6138      	str	r0, [r7, #16]
    
    if(ptcb == Co_NULL)                    /* Is free TCB equal to Co_NULL?         */
 801a074:	693b      	ldr	r3, [r7, #16]
 801a076:	2b00      	cmp	r3, #0
 801a078:	d101      	bne.n	801a07e <CreateTask+0x62>
    {
        return E_CREATE_FAIL;           /* Yes,error return                   */
 801a07a:	23ff      	movs	r3, #255	; 0xff
 801a07c:	e055      	b.n	801a12a <CreateTask+0x10e>
    }
    
    ptcb->stkPtr = stkTopPtr;           /* Initialize TCB as user set         */
 801a07e:	693b      	ldr	r3, [r7, #16]
 801a080:	697a      	ldr	r2, [r7, #20]
 801a082:	601a      	str	r2, [r3, #0]
    ptcb->prio   = prio;
 801a084:	693b      	ldr	r3, [r7, #16]
 801a086:	7efa      	ldrb	r2, [r7, #27]
 801a088:	711a      	strb	r2, [r3, #4]
#if CFG_STK_CHECKOUT_EN >0
    ptcb->stack = stk+1 - sktSz; /* Set bottom stack for stack overflow check */
 801a08a:	8bba      	ldrh	r2, [r7, #28]
 801a08c:	4613      	mov	r3, r2
 801a08e:	079b      	lsls	r3, r3, #30
 801a090:	1a9b      	subs	r3, r3, r2
 801a092:	009b      	lsls	r3, r3, #2
 801a094:	3304      	adds	r3, #4
 801a096:	683a      	ldr	r2, [r7, #0]
 801a098:	441a      	add	r2, r3
 801a09a:	693b      	ldr	r3, [r7, #16]
 801a09c:	60da      	str	r2, [r3, #12]
    *(U32*)(ptcb->stack) = MAGIC_WORD;
 801a09e:	693b      	ldr	r3, [r7, #16]
 801a0a0:	68db      	ldr	r3, [r3, #12]
 801a0a2:	4a24      	ldr	r2, [pc, #144]	; (801a134 <CreateTask+0x118>)
 801a0a4:	601a      	str	r2, [r3, #0]
#endif	

#if CFG_TASK_WAITTING_EN >0
    ptcb->delayTick	= INVALID_VALUE;	
 801a0a6:	693b      	ldr	r3, [r7, #16]
 801a0a8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801a0ac:	621a      	str	r2, [r3, #32]

#if CFG_TASK_SCHEDULE_EN == 0
	ptcb->taskFuc = task;
	ptcb->taskStk = stk;
#endif     
    ptcb->TCBnext = Co_NULL;               /* Initialize TCB link in READY list  */
 801a0ae:	693b      	ldr	r3, [r7, #16]
 801a0b0:	2200      	movs	r2, #0
 801a0b2:	625a      	str	r2, [r3, #36]	; 0x24
    ptcb->TCBprev = Co_NULL;
 801a0b4:	693b      	ldr	r3, [r7, #16]
 801a0b6:	2200      	movs	r2, #0
 801a0b8:	629a      	str	r2, [r3, #40]	; 0x28

#if CFG_ROBIN_EN >0						/* Set task time slice for task robin */
    timeSlice = (parameter&0x7fff0000)>>20; 
 801a0ba:	687b      	ldr	r3, [r7, #4]
 801a0bc:	0d1b      	lsrs	r3, r3, #20
 801a0be:	b29b      	uxth	r3, r3
 801a0c0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801a0c4:	83fb      	strh	r3, [r7, #30]
    if(timeSlice == 0)
 801a0c6:	8bfb      	ldrh	r3, [r7, #30]
 801a0c8:	2b00      	cmp	r3, #0
 801a0ca:	d101      	bne.n	801a0d0 <CreateTask+0xb4>
    {
        timeSlice = CFG_TIME_SLICE;
 801a0cc:	230a      	movs	r3, #10
 801a0ce:	83fb      	strh	r3, [r7, #30]
    }
    ptcb->timeSlice = timeSlice;
 801a0d0:	693b      	ldr	r3, [r7, #16]
 801a0d2:	8bfa      	ldrh	r2, [r7, #30]
 801a0d4:	815a      	strh	r2, [r3, #10]
#endif

#if CFG_FLAG_EN > 0
    ptcb->pnode = Co_NULL;                 /* Initialize task as no flag waiting */
 801a0d6:	693b      	ldr	r3, [r7, #16]
 801a0d8:	2200      	movs	r2, #0
 801a0da:	61da      	str	r2, [r3, #28]
#endif

#if CFG_EVENT_EN > 0
    ptcb->eventID  = INVALID_ID;      	/* Initialize task as no event waiting*/
 801a0dc:	693b      	ldr	r3, [r7, #16]
 801a0de:	22ff      	movs	r2, #255	; 0xff
 801a0e0:	721a      	strb	r2, [r3, #8]
    ptcb->pmail    = Co_NULL;
 801a0e2:	693b      	ldr	r3, [r7, #16]
 801a0e4:	2200      	movs	r2, #0
 801a0e6:	611a      	str	r2, [r3, #16]
    ptcb->waitNext = Co_NULL;
 801a0e8:	693b      	ldr	r3, [r7, #16]
 801a0ea:	2200      	movs	r2, #0
 801a0ec:	615a      	str	r2, [r3, #20]
    ptcb->waitPrev = Co_NULL;
 801a0ee:	693b      	ldr	r3, [r7, #16]
 801a0f0:	2200      	movs	r2, #0
 801a0f2:	619a      	str	r2, [r3, #24]
#endif

#if CFG_MUTEX_EN > 0
    /* Initialize task as no mutex holding or waiting                         */
    ptcb->mutexID = INVALID_ID; 
 801a0f4:	693b      	ldr	r3, [r7, #16]
 801a0f6:	22ff      	movs	r2, #255	; 0xff
 801a0f8:	71da      	strb	r2, [r3, #7]
#endif 

#if CFG_ORDER_LIST_SCHEDULE_EN ==0
	ActiveTaskPri(prio);	
#endif	
	ptcb->userData = Co_NULL;
 801a0fa:	693b      	ldr	r3, [r7, #16]
 801a0fc:	2200      	movs	r2, #0
 801a0fe:	62da      	str	r2, [r3, #44]	; 0x2c

	if((parameter>>31) == 0)			/* Is task in waitting state?         */
 801a100:	687b      	ldr	r3, [r7, #4]
 801a102:	2b00      	cmp	r3, #0
 801a104:	db0c      	blt.n	801a120 <CreateTask+0x104>
	{									/* No,set it into ready list          */
		OsSchedLock();                  /* Lock schedule                      */
 801a106:	4b0c      	ldr	r3, [pc, #48]	; (801a138 <CreateTask+0x11c>)
 801a108:	781b      	ldrb	r3, [r3, #0]
 801a10a:	b2db      	uxtb	r3, r3
 801a10c:	3301      	adds	r3, #1
 801a10e:	b2da      	uxtb	r2, r3
 801a110:	4b09      	ldr	r3, [pc, #36]	; (801a138 <CreateTask+0x11c>)
 801a112:	701a      	strb	r2, [r3, #0]
		InsertToTCBRdyList(ptcb);       /* Insert into the READY list         */
 801a114:	6938      	ldr	r0, [r7, #16]
 801a116:	f7ff fd0d 	bl	8019b34 <InsertToTCBRdyList>
	    OsSchedUnlock();                /* Unlock schedule                    */
 801a11a:	f7fd fa4d 	bl	80175b8 <OsSchedUnlock>
 801a11e:	e002      	b.n	801a126 <CreateTask+0x10a>
	}
	else
	{									/* Yes,Set task status as TASK_WAITING*/
		ptcb->state   = TASK_WAITING;	
 801a120:	693b      	ldr	r3, [r7, #16]
 801a122:	2202      	movs	r2, #2
 801a124:	715a      	strb	r2, [r3, #5]
	}
    return ptcb->taskID;                /* Return task ID                     */
 801a126:	693b      	ldr	r3, [r7, #16]
 801a128:	799b      	ldrb	r3, [r3, #6]
}
 801a12a:	4618      	mov	r0, r3
 801a12c:	3720      	adds	r7, #32
 801a12e:	46bd      	mov	sp, r7
 801a130:	bd80      	pop	{r7, pc}
 801a132:	bf00      	nop
 801a134:	5a5aa5a5 	.word	0x5a5aa5a5
 801a138:	20003749 	.word	0x20003749

0801a13c <CoDelTask>:
 * @par Description
 * @details    This function is called to delete assign task.	 
 *******************************************************************************
 */
StatusType CoDelTask(OS_TID taskID)
{
 801a13c:	b580      	push	{r7, lr}
 801a13e:	b084      	sub	sp, #16
 801a140:	af00      	add	r7, sp, #0
 801a142:	4603      	mov	r3, r0
 801a144:	71fb      	strb	r3, [r7, #7]
    P_OSTCB ptcb;

#if CFG_PAR_CHECKOUT_EN >0              /* Check validity of parameter        */
    if(taskID >= CFG_MAX_USER_TASKS + SYS_TASK_NUM)
 801a146:	79fb      	ldrb	r3, [r7, #7]
 801a148:	2b05      	cmp	r3, #5
 801a14a:	d901      	bls.n	801a150 <CoDelTask+0x14>
    {
        return E_INVALID_ID;
 801a14c:	2301      	movs	r3, #1
 801a14e:	e077      	b.n	801a240 <CoDelTask+0x104>
    }
#endif
	ptcb = &TCBTbl[taskID];
 801a150:	79fa      	ldrb	r2, [r7, #7]
 801a152:	4613      	mov	r3, r2
 801a154:	005b      	lsls	r3, r3, #1
 801a156:	4413      	add	r3, r2
 801a158:	011b      	lsls	r3, r3, #4
 801a15a:	4a3b      	ldr	r2, [pc, #236]	; (801a248 <CoDelTask+0x10c>)
 801a15c:	4413      	add	r3, r2
 801a15e:	60fb      	str	r3, [r7, #12]
#if CFG_PAR_CHECKOUT_EN >0 
    if(ptcb->state == TASK_DORMANT)
 801a160:	68fb      	ldr	r3, [r7, #12]
 801a162:	795b      	ldrb	r3, [r3, #5]
 801a164:	2b03      	cmp	r3, #3
 801a166:	d101      	bne.n	801a16c <CoDelTask+0x30>
    {
        return E_INVALID_ID;
 801a168:	2301      	movs	r3, #1
 801a16a:	e069      	b.n	801a240 <CoDelTask+0x104>
    }
#endif
    if(taskID == 0)                     /* Is idle task?                      */
 801a16c:	79fb      	ldrb	r3, [r7, #7]
 801a16e:	2b00      	cmp	r3, #0
 801a170:	d101      	bne.n	801a176 <CoDelTask+0x3a>
    {											 
        return E_PROTECTED_TASK;        /* Yes,error return                   */
 801a172:	2314      	movs	r3, #20
 801a174:	e064      	b.n	801a240 <CoDelTask+0x104>
    }    
    
    if(ptcb->state == TASK_RUNNING)     /* Is task running?                   */
 801a176:	68fb      	ldr	r3, [r7, #12]
 801a178:	795b      	ldrb	r3, [r3, #5]
 801a17a:	2b01      	cmp	r3, #1
 801a17c:	d106      	bne.n	801a18c <CoDelTask+0x50>
    {
        if(OSSchedLock != 0)            /* Yes,is OS lock?                    */
 801a17e:	4b33      	ldr	r3, [pc, #204]	; (801a24c <CoDelTask+0x110>)
 801a180:	781b      	ldrb	r3, [r3, #0]
 801a182:	b2db      	uxtb	r3, r3
 801a184:	2b00      	cmp	r3, #0
 801a186:	d001      	beq.n	801a18c <CoDelTask+0x50>
        {
            return E_OS_IN_LOCK;        /* Yes,error return                   */
 801a188:	2315      	movs	r3, #21
 801a18a:	e059      	b.n	801a240 <CoDelTask+0x104>
        }	
    }
		
#if CFG_MUTEX_EN >0                     /* Do task hold mutex?                */
    if(ptcb->mutexID != INVALID_ID)
 801a18c:	68fb      	ldr	r3, [r7, #12]
 801a18e:	79db      	ldrb	r3, [r3, #7]
 801a190:	2bff      	cmp	r3, #255	; 0xff
 801a192:	d00e      	beq.n	801a1b2 <CoDelTask+0x76>
	{
        if(MutexTbl[ptcb->mutexID].taskID == ptcb->taskID)
 801a194:	68fb      	ldr	r3, [r7, #12]
 801a196:	79db      	ldrb	r3, [r3, #7]
 801a198:	4a2d      	ldr	r2, [pc, #180]	; (801a250 <CoDelTask+0x114>)
 801a19a:	00db      	lsls	r3, r3, #3
 801a19c:	4413      	add	r3, r2
 801a19e:	789a      	ldrb	r2, [r3, #2]
 801a1a0:	68fb      	ldr	r3, [r7, #12]
 801a1a2:	799b      	ldrb	r3, [r3, #6]
 801a1a4:	429a      	cmp	r2, r3
 801a1a6:	d104      	bne.n	801a1b2 <CoDelTask+0x76>
        {                               /* Yes,leave the mutex                */
            CoLeaveMutexSection(ptcb->mutexID);
 801a1a8:	68fb      	ldr	r3, [r7, #12]
 801a1aa:	79db      	ldrb	r3, [r3, #7]
 801a1ac:	4618      	mov	r0, r3
 801a1ae:	f7fe fe45 	bl	8018e3c <CoLeaveMutexSection>
        }
    }
	
#endif	

    OsSchedLock();                      /* Lock schedule                      */
 801a1b2:	4b26      	ldr	r3, [pc, #152]	; (801a24c <CoDelTask+0x110>)
 801a1b4:	781b      	ldrb	r3, [r3, #0]
 801a1b6:	b2db      	uxtb	r3, r3
 801a1b8:	3301      	adds	r3, #1
 801a1ba:	b2da      	uxtb	r2, r3
 801a1bc:	4b23      	ldr	r3, [pc, #140]	; (801a24c <CoDelTask+0x110>)
 801a1be:	701a      	strb	r2, [r3, #0]
    
    if(ptcb->state == TASK_READY)       /* Is task in READY list?             */
 801a1c0:	68fb      	ldr	r3, [r7, #12]
 801a1c2:	795b      	ldrb	r3, [r3, #5]
 801a1c4:	2b00      	cmp	r3, #0
 801a1c6:	d103      	bne.n	801a1d0 <CoDelTask+0x94>
    {
        RemoveFromTCBRdyList(ptcb);     /* Yes,remove task from the READY list*/
 801a1c8:	68f8      	ldr	r0, [r7, #12]
 801a1ca:	f7ff fd37 	bl	8019c3c <RemoveFromTCBRdyList>
 801a1ce:	e022      	b.n	801a216 <CoDelTask+0xda>
    }

#if CFG_TASK_WAITTING_EN > 0 
    else if(ptcb->state == TASK_WAITING)/* Is task in the WAITING list?       */
 801a1d0:	68fb      	ldr	r3, [r7, #12]
 801a1d2:	795b      	ldrb	r3, [r3, #5]
 801a1d4:	2b02      	cmp	r3, #2
 801a1d6:	d11e      	bne.n	801a216 <CoDelTask+0xda>
    {
        /* Yes,Is task in delay list? */
        if(ptcb->delayTick != INVALID_VALUE)			         
 801a1d8:	68fb      	ldr	r3, [r7, #12]
 801a1da:	6a1b      	ldr	r3, [r3, #32]
 801a1dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801a1e0:	d002      	beq.n	801a1e8 <CoDelTask+0xac>
        {
            RemoveDelayList(ptcb);      /* Yes,remove task from READY list    */
 801a1e2:	68f8      	ldr	r0, [r7, #12]
 801a1e4:	f000 f96c 	bl	801a4c0 <RemoveDelayList>
        }

#if CFG_EVENT_EN > 0
        if(ptcb->eventID != INVALID_ID) /* Is task in event waiting list?     */
 801a1e8:	68fb      	ldr	r3, [r7, #12]
 801a1ea:	7a1b      	ldrb	r3, [r3, #8]
 801a1ec:	2bff      	cmp	r3, #255	; 0xff
 801a1ee:	d002      	beq.n	801a1f6 <CoDelTask+0xba>
        {		
            /* Yes,remove task from event waiting list                        */
            RemoveEventWaittingList(ptcb);	
 801a1f0:	68f8      	ldr	r0, [r7, #12]
 801a1f2:	f7fd fc53 	bl	8017a9c <RemoveEventWaittingList>
        }
#endif

#if CFG_FLAG_EN > 0
        if(ptcb->pnode != Co_NULL)         /* Is task in flag waiting list?      */
 801a1f6:	68fb      	ldr	r3, [r7, #12]
 801a1f8:	69db      	ldr	r3, [r3, #28]
 801a1fa:	2b00      	cmp	r3, #0
 801a1fc:	d004      	beq.n	801a208 <CoDelTask+0xcc>
        {
            /* Yes,remove task from flag waiting list                         */
            RemoveLinkNode(ptcb->pnode);	
 801a1fe:	68fb      	ldr	r3, [r7, #12]
 801a200:	69db      	ldr	r3, [r3, #28]
 801a202:	4618      	mov	r0, r3
 801a204:	f7fe f8d8 	bl	80183b8 <RemoveLinkNode>
        }
#endif

#if CFG_MUTEX_EN >0
        if(ptcb->mutexID != INVALID_ID) /* Is task in mutex waiting list?     */
 801a208:	68fb      	ldr	r3, [r7, #12]
 801a20a:	79db      	ldrb	r3, [r3, #7]
 801a20c:	2bff      	cmp	r3, #255	; 0xff
 801a20e:	d002      	beq.n	801a216 <CoDelTask+0xda>
        {
            RemoveMutexList(ptcb);  /* Yes,remove task from mutex waiting list*/
 801a210:	68f8      	ldr	r0, [r7, #12]
 801a212:	f7fe feaf 	bl	8018f74 <RemoveMutexList>
        }
#endif
	  }
#endif
    ptcb->state   = TASK_DORMANT;       /* Release TCB                        */
 801a216:	68fb      	ldr	r3, [r7, #12]
 801a218:	2203      	movs	r2, #3
 801a21a:	715a      	strb	r2, [r3, #5]
	TaskSchedReq  = Co_TRUE;
 801a21c:	4b0d      	ldr	r3, [pc, #52]	; (801a254 <CoDelTask+0x118>)
 801a21e:	2201      	movs	r2, #1
 801a220:	701a      	strb	r2, [r3, #0]
	  
	CoKfree(ptcb->userData);
 801a222:	68fb      	ldr	r3, [r7, #12]
 801a224:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a226:	4618      	mov	r0, r3
 801a228:	f7fe f9f2 	bl	8018610 <CoKfree>
#if CFG_ORDER_LIST_SCHEDULE_EN ==0
	DeleteTaskPri(ptcb->prio);	
#endif	

#if CFG_TASK_SCHEDULE_EN >0
    ptcb->TCBnext = FreeTCB;
 801a22c:	4b0a      	ldr	r3, [pc, #40]	; (801a258 <CoDelTask+0x11c>)
 801a22e:	681a      	ldr	r2, [r3, #0]
 801a230:	68fb      	ldr	r3, [r7, #12]
 801a232:	625a      	str	r2, [r3, #36]	; 0x24
    FreeTCB       = ptcb;
 801a234:	4a08      	ldr	r2, [pc, #32]	; (801a258 <CoDelTask+0x11c>)
 801a236:	68fb      	ldr	r3, [r7, #12]
 801a238:	6013      	str	r3, [r2, #0]
#endif
    OsSchedUnlock();                    /* Unlock schedule                    */
 801a23a:	f7fd f9bd 	bl	80175b8 <OsSchedUnlock>
    return E_OK;                        /* return OK                          */
 801a23e:	2300      	movs	r3, #0
}
 801a240:	4618      	mov	r0, r3
 801a242:	3710      	adds	r7, #16
 801a244:	46bd      	mov	sp, r7
 801a246:	bd80      	pop	{r7, pc}
 801a248:	2000d598 	.word	0x2000d598
 801a24c:	20003749 	.word	0x20003749
 801a250:	2000d4f4 	.word	0x2000d4f4
 801a254:	2000374a 	.word	0x2000374a
 801a258:	2000d71c 	.word	0x2000d71c

0801a25c <CoExitTask>:
 * @par Description
 * @details    This function is called to exit current task.	 
 *******************************************************************************
 */
void CoExitTask(void)
{
 801a25c:	b580      	push	{r7, lr}
 801a25e:	af00      	add	r7, sp, #0
    CoDelTask(TCBRunning->taskID);      /* Call task delete function          */
 801a260:	4b03      	ldr	r3, [pc, #12]	; (801a270 <CoExitTask+0x14>)
 801a262:	681b      	ldr	r3, [r3, #0]
 801a264:	799b      	ldrb	r3, [r3, #6]
 801a266:	4618      	mov	r0, r3
 801a268:	f7ff ff68 	bl	801a13c <CoDelTask>
}
 801a26c:	bf00      	nop
 801a26e:	bd80      	pop	{r7, pc}
 801a270:	2000d728 	.word	0x2000d728

0801a274 <CoGetCurTaskID>:
 * @par Description
 * @details    This function is called to get current task id.	 
 *******************************************************************************
 */
OS_TID CoGetCurTaskID(void)
{
 801a274:	b480      	push	{r7}
 801a276:	af00      	add	r7, sp, #0
    return (TCBRunning->taskID);        /* Return running task ID             */
 801a278:	4b03      	ldr	r3, [pc, #12]	; (801a288 <CoGetCurTaskID+0x14>)
 801a27a:	681b      	ldr	r3, [r3, #0]
 801a27c:	799b      	ldrb	r3, [r3, #6]
}
 801a27e:	4618      	mov	r0, r3
 801a280:	46bd      	mov	sp, r7
 801a282:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a286:	4770      	bx	lr
 801a288:	2000d728 	.word	0x2000d728

0801a28c <CoSuspendTask>:
 * @par Description
 * @details    This function is called to exit current task.	 
 *******************************************************************************
 */
StatusType CoSuspendTask(OS_TID taskID)
{
 801a28c:	b580      	push	{r7, lr}
 801a28e:	b084      	sub	sp, #16
 801a290:	af00      	add	r7, sp, #0
 801a292:	4603      	mov	r3, r0
 801a294:	71fb      	strb	r3, [r7, #7]
    P_OSTCB ptcb;

	if(taskID == 0)                     /* Is idle task?                      */
 801a296:	79fb      	ldrb	r3, [r7, #7]
 801a298:	2b00      	cmp	r3, #0
 801a29a:	d101      	bne.n	801a2a0 <CoSuspendTask+0x14>
    {											 
        return E_PROTECTED_TASK;        /* Yes,error return                   */
 801a29c:	2314      	movs	r3, #20
 801a29e:	e038      	b.n	801a312 <CoSuspendTask+0x86>
    }   
#if CFG_PAR_CHECKOUT_EN >0              /* Check validity of parameter        */
    if(taskID >= CFG_MAX_USER_TASKS + SYS_TASK_NUM)
 801a2a0:	79fb      	ldrb	r3, [r7, #7]
 801a2a2:	2b05      	cmp	r3, #5
 801a2a4:	d901      	bls.n	801a2aa <CoSuspendTask+0x1e>
    {
        return E_INVALID_ID;
 801a2a6:	2301      	movs	r3, #1
 801a2a8:	e033      	b.n	801a312 <CoSuspendTask+0x86>
    }
#endif
	ptcb = &TCBTbl[taskID];
 801a2aa:	79fa      	ldrb	r2, [r7, #7]
 801a2ac:	4613      	mov	r3, r2
 801a2ae:	005b      	lsls	r3, r3, #1
 801a2b0:	4413      	add	r3, r2
 801a2b2:	011b      	lsls	r3, r3, #4
 801a2b4:	4a19      	ldr	r2, [pc, #100]	; (801a31c <CoSuspendTask+0x90>)
 801a2b6:	4413      	add	r3, r2
 801a2b8:	60fb      	str	r3, [r7, #12]
#if CFG_PAR_CHECKOUT_EN >0  
    if(ptcb->state == TASK_DORMANT)
 801a2ba:	68fb      	ldr	r3, [r7, #12]
 801a2bc:	795b      	ldrb	r3, [r3, #5]
 801a2be:	2b03      	cmp	r3, #3
 801a2c0:	d101      	bne.n	801a2c6 <CoSuspendTask+0x3a>
    {
        return E_INVALID_ID;
 801a2c2:	2301      	movs	r3, #1
 801a2c4:	e025      	b.n	801a312 <CoSuspendTask+0x86>
    }
#endif
    if(OSSchedLock != 0)
 801a2c6:	4b16      	ldr	r3, [pc, #88]	; (801a320 <CoSuspendTask+0x94>)
 801a2c8:	781b      	ldrb	r3, [r3, #0]
 801a2ca:	b2db      	uxtb	r3, r3
 801a2cc:	2b00      	cmp	r3, #0
 801a2ce:	d001      	beq.n	801a2d4 <CoSuspendTask+0x48>
    {
        return E_OS_IN_LOCK;
 801a2d0:	2315      	movs	r3, #21
 801a2d2:	e01e      	b.n	801a312 <CoSuspendTask+0x86>
    }
    if(ptcb->state == TASK_WAITING)     /* Is task in WAITING list?           */
 801a2d4:	68fb      	ldr	r3, [r7, #12]
 801a2d6:	795b      	ldrb	r3, [r3, #5]
 801a2d8:	2b02      	cmp	r3, #2
 801a2da:	d101      	bne.n	801a2e0 <CoSuspendTask+0x54>
    {
        return E_ALREADY_IN_WAITING;    /* Yes,error return                   */
 801a2dc:	230d      	movs	r3, #13
 801a2de:	e018      	b.n	801a312 <CoSuspendTask+0x86>
    }
    
    OsSchedLock();	
 801a2e0:	4b0f      	ldr	r3, [pc, #60]	; (801a320 <CoSuspendTask+0x94>)
 801a2e2:	781b      	ldrb	r3, [r3, #0]
 801a2e4:	b2db      	uxtb	r3, r3
 801a2e6:	3301      	adds	r3, #1
 801a2e8:	b2da      	uxtb	r2, r3
 801a2ea:	4b0d      	ldr	r3, [pc, #52]	; (801a320 <CoSuspendTask+0x94>)
 801a2ec:	701a      	strb	r2, [r3, #0]
    if(ptcb != TCBRunning)              /* Is runing task?                    */
 801a2ee:	4b0d      	ldr	r3, [pc, #52]	; (801a324 <CoSuspendTask+0x98>)
 801a2f0:	681b      	ldr	r3, [r3, #0]
 801a2f2:	68fa      	ldr	r2, [r7, #12]
 801a2f4:	429a      	cmp	r2, r3
 801a2f6:	d003      	beq.n	801a300 <CoSuspendTask+0x74>
    {
        RemoveFromTCBRdyList(ptcb);     /* No,Remove task from READY list     */
 801a2f8:	68f8      	ldr	r0, [r7, #12]
 801a2fa:	f7ff fc9f 	bl	8019c3c <RemoveFromTCBRdyList>
 801a2fe:	e002      	b.n	801a306 <CoSuspendTask+0x7a>
    }
	else
	{
		TaskSchedReq = Co_TRUE;
 801a300:	4b09      	ldr	r3, [pc, #36]	; (801a328 <CoSuspendTask+0x9c>)
 801a302:	2201      	movs	r2, #1
 801a304:	701a      	strb	r2, [r3, #0]
	}

    ptcb->state = TASK_WAITING;	        /* Set task status as TASK_WAITING    */
 801a306:	68fb      	ldr	r3, [r7, #12]
 801a308:	2202      	movs	r2, #2
 801a30a:	715a      	strb	r2, [r3, #5]
    OsSchedUnlock();                    /* Call task schedule                 */
 801a30c:	f7fd f954 	bl	80175b8 <OsSchedUnlock>
    return E_OK;                        /* Return OK                          */
 801a310:	2300      	movs	r3, #0
}
 801a312:	4618      	mov	r0, r3
 801a314:	3710      	adds	r7, #16
 801a316:	46bd      	mov	sp, r7
 801a318:	bd80      	pop	{r7, pc}
 801a31a:	bf00      	nop
 801a31c:	2000d598 	.word	0x2000d598
 801a320:	20003749 	.word	0x20003749
 801a324:	2000d728 	.word	0x2000d728
 801a328:	2000374a 	.word	0x2000374a

0801a32c <CoAwakeTask>:
 * @par Description
 * @details    This function is called to awake current task.	 
 *******************************************************************************
 */
StatusType CoAwakeTask(OS_TID taskID)
{
 801a32c:	b580      	push	{r7, lr}
 801a32e:	b084      	sub	sp, #16
 801a330:	af00      	add	r7, sp, #0
 801a332:	4603      	mov	r3, r0
 801a334:	71fb      	strb	r3, [r7, #7]
    P_OSTCB ptcb;
	
 	if(taskID == 0)                     /* Is idle task?                      */
 801a336:	79fb      	ldrb	r3, [r7, #7]
 801a338:	2b00      	cmp	r3, #0
 801a33a:	d101      	bne.n	801a340 <CoAwakeTask+0x14>
    {											 
        return E_PROTECTED_TASK;        /* Yes,error return                   */
 801a33c:	2314      	movs	r3, #20
 801a33e:	e03e      	b.n	801a3be <CoAwakeTask+0x92>
    } 
#if CFG_PAR_CHECKOUT_EN >0              /* Check validity of parameter        */
    if(taskID >= CFG_MAX_USER_TASKS + SYS_TASK_NUM)
 801a340:	79fb      	ldrb	r3, [r7, #7]
 801a342:	2b05      	cmp	r3, #5
 801a344:	d901      	bls.n	801a34a <CoAwakeTask+0x1e>
    {
        return E_INVALID_ID;
 801a346:	2301      	movs	r3, #1
 801a348:	e039      	b.n	801a3be <CoAwakeTask+0x92>
    }
#endif
	ptcb = &TCBTbl[taskID];
 801a34a:	79fa      	ldrb	r2, [r7, #7]
 801a34c:	4613      	mov	r3, r2
 801a34e:	005b      	lsls	r3, r3, #1
 801a350:	4413      	add	r3, r2
 801a352:	011b      	lsls	r3, r3, #4
 801a354:	4a1c      	ldr	r2, [pc, #112]	; (801a3c8 <CoAwakeTask+0x9c>)
 801a356:	4413      	add	r3, r2
 801a358:	60fb      	str	r3, [r7, #12]
#if CFG_PAR_CHECKOUT_EN >0  
    if(ptcb->state == TASK_DORMANT)
 801a35a:	68fb      	ldr	r3, [r7, #12]
 801a35c:	795b      	ldrb	r3, [r3, #5]
 801a35e:	2b03      	cmp	r3, #3
 801a360:	d101      	bne.n	801a366 <CoAwakeTask+0x3a>
    {
        return E_INVALID_ID;
 801a362:	2301      	movs	r3, #1
 801a364:	e02b      	b.n	801a3be <CoAwakeTask+0x92>
    }
#endif
    
    if(ptcb->state != TASK_WAITING)     /* Is task in WAITING list            */
 801a366:	68fb      	ldr	r3, [r7, #12]
 801a368:	795b      	ldrb	r3, [r3, #5]
 801a36a:	2b02      	cmp	r3, #2
 801a36c:	d001      	beq.n	801a372 <CoAwakeTask+0x46>
    {
        return E_TASK_NOT_WAITING;      /* No,error return                    */
 801a36e:	230e      	movs	r3, #14
 801a370:	e025      	b.n	801a3be <CoAwakeTask+0x92>
    }	

#if CFG_TASK_WAITTING_EN > 0
    if(ptcb->delayTick != INVALID_VALUE)/* Is task in READY list              */
 801a372:	68fb      	ldr	r3, [r7, #12]
 801a374:	6a1b      	ldr	r3, [r3, #32]
 801a376:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801a37a:	d001      	beq.n	801a380 <CoAwakeTask+0x54>
    {
        return E_TASK_WAIT_OTHER;       /* Yes,error return                   */
 801a37c:	230f      	movs	r3, #15
 801a37e:	e01e      	b.n	801a3be <CoAwakeTask+0x92>
    }

#if CFG_FLAG_EN > 0
    if(ptcb->pnode != Co_NULL)             /* Is task in flag waiting list       */
 801a380:	68fb      	ldr	r3, [r7, #12]
 801a382:	69db      	ldr	r3, [r3, #28]
 801a384:	2b00      	cmp	r3, #0
 801a386:	d001      	beq.n	801a38c <CoAwakeTask+0x60>
    {
        return E_TASK_WAIT_OTHER;       /* Yes,error return                   */
 801a388:	230f      	movs	r3, #15
 801a38a:	e018      	b.n	801a3be <CoAwakeTask+0x92>
    }
#endif

#if CFG_EVENT_EN>0
    if(ptcb->eventID != INVALID_ID)     /* Is task in event waiting list      */
 801a38c:	68fb      	ldr	r3, [r7, #12]
 801a38e:	7a1b      	ldrb	r3, [r3, #8]
 801a390:	2bff      	cmp	r3, #255	; 0xff
 801a392:	d001      	beq.n	801a398 <CoAwakeTask+0x6c>
    {
        return E_TASK_WAIT_OTHER;       /* Yes,error return                   */
 801a394:	230f      	movs	r3, #15
 801a396:	e012      	b.n	801a3be <CoAwakeTask+0x92>
    }
#endif	

#if CFG_MUTEX_EN > 0
    if(ptcb->mutexID != INVALID_ID)     /* Is task in mutex waiting list      */
 801a398:	68fb      	ldr	r3, [r7, #12]
 801a39a:	79db      	ldrb	r3, [r3, #7]
 801a39c:	2bff      	cmp	r3, #255	; 0xff
 801a39e:	d001      	beq.n	801a3a4 <CoAwakeTask+0x78>
    {
        return E_TASK_WAIT_OTHER;       /* Yes,error return                   */
 801a3a0:	230f      	movs	r3, #15
 801a3a2:	e00c      	b.n	801a3be <CoAwakeTask+0x92>
#endif

#endif	  //CFG_TASK_WAITTING_EN

    /* All no,so WAITING state was set by CoSuspendTask()                     */
    OsSchedLock();                      /* Lock schedule                      */
 801a3a4:	4b09      	ldr	r3, [pc, #36]	; (801a3cc <CoAwakeTask+0xa0>)
 801a3a6:	781b      	ldrb	r3, [r3, #0]
 801a3a8:	b2db      	uxtb	r3, r3
 801a3aa:	3301      	adds	r3, #1
 801a3ac:	b2da      	uxtb	r2, r3
 801a3ae:	4b07      	ldr	r3, [pc, #28]	; (801a3cc <CoAwakeTask+0xa0>)
 801a3b0:	701a      	strb	r2, [r3, #0]
	InsertToTCBRdyList(ptcb);           /* Insert the task into the READY list*/
 801a3b2:	68f8      	ldr	r0, [r7, #12]
 801a3b4:	f7ff fbbe 	bl	8019b34 <InsertToTCBRdyList>
    OsSchedUnlock();                    /* Unlock schedule                    */
 801a3b8:	f7fd f8fe 	bl	80175b8 <OsSchedUnlock>
    return E_OK;                        /* return OK                          */
 801a3bc:	2300      	movs	r3, #0
}
 801a3be:	4618      	mov	r0, r3
 801a3c0:	3710      	adds	r7, #16
 801a3c2:	46bd      	mov	sp, r7
 801a3c4:	bd80      	pop	{r7, pc}
 801a3c6:	bf00      	nop
 801a3c8:	2000d598 	.word	0x2000d598
 801a3cc:	20003749 	.word	0x20003749

0801a3d0 <InsertDelayList>:
 * @par Description
 * @details    This function is called to insert task into DELAY list.
 *******************************************************************************
 */
void InsertDelayList(P_OSTCB ptcb,U32 ticks)
{
 801a3d0:	b480      	push	{r7}
 801a3d2:	b085      	sub	sp, #20
 801a3d4:	af00      	add	r7, sp, #0
 801a3d6:	6078      	str	r0, [r7, #4]
 801a3d8:	6039      	str	r1, [r7, #0]
    S32 deltaTicks;
    P_OSTCB dlyNext;
    
    if(ticks == 0)                      /* Is delay tick == 0?                */
 801a3da:	683b      	ldr	r3, [r7, #0]
 801a3dc:	2b00      	cmp	r3, #0
 801a3de:	d065      	beq.n	801a4ac <InsertDelayList+0xdc>
        return;                         /* Yes,do nothing,return              */
    if(DlyList == Co_NULL)                 /* Is no item in DELAY list?          */
 801a3e0:	4b35      	ldr	r3, [pc, #212]	; (801a4b8 <InsertDelayList+0xe8>)
 801a3e2:	681b      	ldr	r3, [r3, #0]
 801a3e4:	2b00      	cmp	r3, #0
 801a3e6:	d106      	bne.n	801a3f6 <InsertDelayList+0x26>
    {
        ptcb->delayTick = ticks;        /* Yes,set this as first item         */
 801a3e8:	687b      	ldr	r3, [r7, #4]
 801a3ea:	683a      	ldr	r2, [r7, #0]
 801a3ec:	621a      	str	r2, [r3, #32]
        DlyList         = ptcb;
 801a3ee:	4a32      	ldr	r2, [pc, #200]	; (801a4b8 <InsertDelayList+0xe8>)
 801a3f0:	687b      	ldr	r3, [r7, #4]
 801a3f2:	6013      	str	r3, [r2, #0]
 801a3f4:	e053      	b.n	801a49e <InsertDelayList+0xce>
    }
    else
    {	
        /* No,find correct place ,and insert the task */
        dlyNext    = DlyList; 
 801a3f6:	4b30      	ldr	r3, [pc, #192]	; (801a4b8 <InsertDelayList+0xe8>)
 801a3f8:	681b      	ldr	r3, [r3, #0]
 801a3fa:	60bb      	str	r3, [r7, #8]
        deltaTicks = ticks;             /* Get task delay ticks               */
 801a3fc:	683b      	ldr	r3, [r7, #0]
 801a3fe:	60fb      	str	r3, [r7, #12]
        
        /* Find correct place */
        while(dlyNext != Co_NULL)
 801a400:	e04a      	b.n	801a498 <InsertDelayList+0xc8>
        {		
            /* Get delta ticks with previous item */ 
            deltaTicks -= dlyNext->delayTick;  
 801a402:	68fa      	ldr	r2, [r7, #12]
 801a404:	68bb      	ldr	r3, [r7, #8]
 801a406:	6a1b      	ldr	r3, [r3, #32]
 801a408:	1ad3      	subs	r3, r2, r3
 801a40a:	60fb      	str	r3, [r7, #12]
            if(deltaTicks < 0)          /* Is delta ticks<0?                  */
 801a40c:	68fb      	ldr	r3, [r7, #12]
 801a40e:	2b00      	cmp	r3, #0
 801a410:	da2e      	bge.n	801a470 <InsertDelayList+0xa0>
            {	  
                /* Yes,get correct place */
                if(dlyNext->TCBprev != Co_NULL)   /* Is head item of DELAY list? */
 801a412:	68bb      	ldr	r3, [r7, #8]
 801a414:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a416:	2b00      	cmp	r3, #0
 801a418:	d00e      	beq.n	801a438 <InsertDelayList+0x68>
                {							   
                    dlyNext->TCBprev->TCBnext = ptcb;   /* No,insert into     */ 
 801a41a:	68bb      	ldr	r3, [r7, #8]
 801a41c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a41e:	687a      	ldr	r2, [r7, #4]
 801a420:	625a      	str	r2, [r3, #36]	; 0x24
                    ptcb->TCBprev             = dlyNext->TCBprev;
 801a422:	68bb      	ldr	r3, [r7, #8]
 801a424:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801a426:	687b      	ldr	r3, [r7, #4]
 801a428:	629a      	str	r2, [r3, #40]	; 0x28
                    ptcb->TCBnext             = dlyNext;
 801a42a:	687b      	ldr	r3, [r7, #4]
 801a42c:	68ba      	ldr	r2, [r7, #8]
 801a42e:	625a      	str	r2, [r3, #36]	; 0x24
                    dlyNext->TCBprev          = ptcb;
 801a430:	68bb      	ldr	r3, [r7, #8]
 801a432:	687a      	ldr	r2, [r7, #4]
 801a434:	629a      	str	r2, [r3, #40]	; 0x28
 801a436:	e00a      	b.n	801a44e <InsertDelayList+0x7e>
                }
                else                    /* Yes,set task as first item         */
                {							   
                    ptcb->TCBnext    = DlyList;
 801a438:	4b1f      	ldr	r3, [pc, #124]	; (801a4b8 <InsertDelayList+0xe8>)
 801a43a:	681a      	ldr	r2, [r3, #0]
 801a43c:	687b      	ldr	r3, [r7, #4]
 801a43e:	625a      	str	r2, [r3, #36]	; 0x24
                    DlyList->TCBprev = ptcb;
 801a440:	4b1d      	ldr	r3, [pc, #116]	; (801a4b8 <InsertDelayList+0xe8>)
 801a442:	681b      	ldr	r3, [r3, #0]
 801a444:	687a      	ldr	r2, [r7, #4]
 801a446:	629a      	str	r2, [r3, #40]	; 0x28
                    DlyList          = ptcb;
 801a448:	4a1b      	ldr	r2, [pc, #108]	; (801a4b8 <InsertDelayList+0xe8>)
 801a44a:	687b      	ldr	r3, [r7, #4]
 801a44c:	6013      	str	r3, [r2, #0]
                }
                ptcb->delayTick           = ptcb->TCBnext->delayTick+deltaTicks;
 801a44e:	687b      	ldr	r3, [r7, #4]
 801a450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a452:	6a1a      	ldr	r2, [r3, #32]
 801a454:	68fb      	ldr	r3, [r7, #12]
 801a456:	441a      	add	r2, r3
 801a458:	687b      	ldr	r3, [r7, #4]
 801a45a:	621a      	str	r2, [r3, #32]
                ptcb->TCBnext->delayTick -= ptcb->delayTick; 
 801a45c:	687b      	ldr	r3, [r7, #4]
 801a45e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a460:	6a19      	ldr	r1, [r3, #32]
 801a462:	687b      	ldr	r3, [r7, #4]
 801a464:	6a1a      	ldr	r2, [r3, #32]
 801a466:	687b      	ldr	r3, [r7, #4]
 801a468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a46a:	1a8a      	subs	r2, r1, r2
 801a46c:	621a      	str	r2, [r3, #32]
                break;
 801a46e:	e016      	b.n	801a49e <InsertDelayList+0xce>
            }
            /* Is last item in DELAY list? */
            else if((deltaTicks >= 0) && (dlyNext->TCBnext == Co_NULL) )
 801a470:	68fb      	ldr	r3, [r7, #12]
 801a472:	2b00      	cmp	r3, #0
 801a474:	db0d      	blt.n	801a492 <InsertDelayList+0xc2>
 801a476:	68bb      	ldr	r3, [r7, #8]
 801a478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a47a:	2b00      	cmp	r3, #0
 801a47c:	d109      	bne.n	801a492 <InsertDelayList+0xc2>
            {								   
                ptcb->TCBprev    = dlyNext; /* Yes,insert into                */
 801a47e:	687b      	ldr	r3, [r7, #4]
 801a480:	68ba      	ldr	r2, [r7, #8]
 801a482:	629a      	str	r2, [r3, #40]	; 0x28
                dlyNext->TCBnext = ptcb;	
 801a484:	68bb      	ldr	r3, [r7, #8]
 801a486:	687a      	ldr	r2, [r7, #4]
 801a488:	625a      	str	r2, [r3, #36]	; 0x24
                ptcb->delayTick  = deltaTicks;
 801a48a:	68fa      	ldr	r2, [r7, #12]
 801a48c:	687b      	ldr	r3, [r7, #4]
 801a48e:	621a      	str	r2, [r3, #32]
                break;
 801a490:	e005      	b.n	801a49e <InsertDelayList+0xce>
            }
            dlyNext = dlyNext->TCBnext; /* Get the next item in DELAY list    */
 801a492:	68bb      	ldr	r3, [r7, #8]
 801a494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a496:	60bb      	str	r3, [r7, #8]
        while(dlyNext != Co_NULL)
 801a498:	68bb      	ldr	r3, [r7, #8]
 801a49a:	2b00      	cmp	r3, #0
 801a49c:	d1b1      	bne.n	801a402 <InsertDelayList+0x32>
        }
    }

    ptcb->state  = TASK_WAITING;        /* Set task status as TASK_WAITING    */
 801a49e:	687b      	ldr	r3, [r7, #4]
 801a4a0:	2202      	movs	r2, #2
 801a4a2:	715a      	strb	r2, [r3, #5]
    TaskSchedReq = Co_TRUE;
 801a4a4:	4b05      	ldr	r3, [pc, #20]	; (801a4bc <InsertDelayList+0xec>)
 801a4a6:	2201      	movs	r2, #1
 801a4a8:	701a      	strb	r2, [r3, #0]
 801a4aa:	e000      	b.n	801a4ae <InsertDelayList+0xde>
        return;                         /* Yes,do nothing,return              */
 801a4ac:	bf00      	nop
}
 801a4ae:	3714      	adds	r7, #20
 801a4b0:	46bd      	mov	sp, r7
 801a4b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a4b6:	4770      	bx	lr
 801a4b8:	2000d738 	.word	0x2000d738
 801a4bc:	2000374a 	.word	0x2000374a

0801a4c0 <RemoveDelayList>:
 * @par Description
 * @details    This function is called to remove task from the DELAY list.
 *******************************************************************************
 */
void RemoveDelayList(P_OSTCB ptcb)
{
 801a4c0:	b480      	push	{r7}
 801a4c2:	b083      	sub	sp, #12
 801a4c4:	af00      	add	r7, sp, #0
 801a4c6:	6078      	str	r0, [r7, #4]
    
    /* Is there only one item in the DELAY list?   */
    if((ptcb->TCBprev == Co_NULL) && ( ptcb->TCBnext == Co_NULL))
 801a4c8:	687b      	ldr	r3, [r7, #4]
 801a4ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a4cc:	2b00      	cmp	r3, #0
 801a4ce:	d107      	bne.n	801a4e0 <RemoveDelayList+0x20>
 801a4d0:	687b      	ldr	r3, [r7, #4]
 801a4d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a4d4:	2b00      	cmp	r3, #0
 801a4d6:	d103      	bne.n	801a4e0 <RemoveDelayList+0x20>
    {
        DlyList = Co_NULL;	                /* Yes,set DELAY list as Co_NULL         */
 801a4d8:	4b25      	ldr	r3, [pc, #148]	; (801a570 <RemoveDelayList+0xb0>)
 801a4da:	2200      	movs	r2, #0
 801a4dc:	601a      	str	r2, [r3, #0]
 801a4de:	e03d      	b.n	801a55c <RemoveDelayList+0x9c>
    }
    else if(ptcb->TCBprev == Co_NULL)      /* Is the first item in DELAY list?   */
 801a4e0:	687b      	ldr	r3, [r7, #4]
 801a4e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a4e4:	2b00      	cmp	r3, #0
 801a4e6:	d114      	bne.n	801a512 <RemoveDelayList+0x52>
    {   
	    /* Yes,remove task from the DELAY list,and reset the list             */
        DlyList	                  = ptcb->TCBnext;
 801a4e8:	687b      	ldr	r3, [r7, #4]
 801a4ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a4ec:	4a20      	ldr	r2, [pc, #128]	; (801a570 <RemoveDelayList+0xb0>)
 801a4ee:	6013      	str	r3, [r2, #0]
        ptcb->TCBnext->delayTick += ptcb->delayTick;
 801a4f0:	687b      	ldr	r3, [r7, #4]
 801a4f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a4f4:	6a19      	ldr	r1, [r3, #32]
 801a4f6:	687b      	ldr	r3, [r7, #4]
 801a4f8:	6a1a      	ldr	r2, [r3, #32]
 801a4fa:	687b      	ldr	r3, [r7, #4]
 801a4fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a4fe:	440a      	add	r2, r1
 801a500:	621a      	str	r2, [r3, #32]
        ptcb->TCBnext->TCBprev    = Co_NULL;
 801a502:	687b      	ldr	r3, [r7, #4]
 801a504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a506:	2200      	movs	r2, #0
 801a508:	629a      	str	r2, [r3, #40]	; 0x28
        ptcb->TCBnext             = Co_NULL;
 801a50a:	687b      	ldr	r3, [r7, #4]
 801a50c:	2200      	movs	r2, #0
 801a50e:	625a      	str	r2, [r3, #36]	; 0x24
 801a510:	e024      	b.n	801a55c <RemoveDelayList+0x9c>
        
    }
    else if(ptcb->TCBnext == Co_NULL)      /* Is the last item in DELAY list?    */
 801a512:	687b      	ldr	r3, [r7, #4]
 801a514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a516:	2b00      	cmp	r3, #0
 801a518:	d107      	bne.n	801a52a <RemoveDelayList+0x6a>
    {									
        ptcb->TCBprev->TCBnext = Co_NULL;  /* Yes,remove task form DELAY list    */
 801a51a:	687b      	ldr	r3, [r7, #4]
 801a51c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a51e:	2200      	movs	r2, #0
 801a520:	625a      	str	r2, [r3, #36]	; 0x24
        ptcb->TCBprev          = Co_NULL;
 801a522:	687b      	ldr	r3, [r7, #4]
 801a524:	2200      	movs	r2, #0
 801a526:	629a      	str	r2, [r3, #40]	; 0x28
 801a528:	e018      	b.n	801a55c <RemoveDelayList+0x9c>
    }
    else                                /* No, remove task from DELAY list    */
    {									
        ptcb->TCBprev->TCBnext    = ptcb->TCBnext;	
 801a52a:	687b      	ldr	r3, [r7, #4]
 801a52c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a52e:	687a      	ldr	r2, [r7, #4]
 801a530:	6a52      	ldr	r2, [r2, #36]	; 0x24
 801a532:	625a      	str	r2, [r3, #36]	; 0x24
        ptcb->TCBnext->TCBprev    = ptcb->TCBprev;	
 801a534:	687b      	ldr	r3, [r7, #4]
 801a536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a538:	687a      	ldr	r2, [r7, #4]
 801a53a:	6a92      	ldr	r2, [r2, #40]	; 0x28
 801a53c:	629a      	str	r2, [r3, #40]	; 0x28
        ptcb->TCBnext->delayTick += ptcb->delayTick;
 801a53e:	687b      	ldr	r3, [r7, #4]
 801a540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a542:	6a19      	ldr	r1, [r3, #32]
 801a544:	687b      	ldr	r3, [r7, #4]
 801a546:	6a1a      	ldr	r2, [r3, #32]
 801a548:	687b      	ldr	r3, [r7, #4]
 801a54a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a54c:	440a      	add	r2, r1
 801a54e:	621a      	str	r2, [r3, #32]
        ptcb->TCBnext     	      = Co_NULL;
 801a550:	687b      	ldr	r3, [r7, #4]
 801a552:	2200      	movs	r2, #0
 801a554:	625a      	str	r2, [r3, #36]	; 0x24
        ptcb->TCBprev             = Co_NULL;
 801a556:	687b      	ldr	r3, [r7, #4]
 801a558:	2200      	movs	r2, #0
 801a55a:	629a      	str	r2, [r3, #40]	; 0x28
    }
    ptcb->delayTick = INVALID_VALUE;  /* Set task delay tick value as invalid */		
 801a55c:	687b      	ldr	r3, [r7, #4]
 801a55e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801a562:	621a      	str	r2, [r3, #32]
}
 801a564:	bf00      	nop
 801a566:	370c      	adds	r7, #12
 801a568:	46bd      	mov	sp, r7
 801a56a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a56e:	4770      	bx	lr
 801a570:	2000d738 	.word	0x2000d738

0801a574 <CoGetOSTime>:
 * @par Description
 * @details    This function is called to obtain current system tick counter.
 *******************************************************************************
 */
U64 CoGetOSTime(void)
{
 801a574:	b490      	push	{r4, r7}
 801a576:	af00      	add	r7, sp, #0
    return OSTickCnt;                   /* Get system time(tick)              */
 801a578:	4b03      	ldr	r3, [pc, #12]	; (801a588 <CoGetOSTime+0x14>)
 801a57a:	e9d3 3400 	ldrd	r3, r4, [r3]
}
 801a57e:	4618      	mov	r0, r3
 801a580:	4621      	mov	r1, r4
 801a582:	46bd      	mov	sp, r7
 801a584:	bc90      	pop	{r4, r7}
 801a586:	4770      	bx	lr
 801a588:	20003740 	.word	0x20003740

0801a58c <CoTickDelay>:
 *
 * @note       This function be called in ISR,do nothing and return immediately.
 *******************************************************************************	
 */
StatusType CoTickDelay(U32 ticks)
{
 801a58c:	b580      	push	{r7, lr}
 801a58e:	b082      	sub	sp, #8
 801a590:	af00      	add	r7, sp, #0
 801a592:	6078      	str	r0, [r7, #4]
    if(OSIntNesting >0)	                /* Is call in ISR?                    */
 801a594:	4b16      	ldr	r3, [pc, #88]	; (801a5f0 <CoTickDelay+0x64>)
 801a596:	781b      	ldrb	r3, [r3, #0]
 801a598:	b2db      	uxtb	r3, r3
 801a59a:	2b00      	cmp	r3, #0
 801a59c:	d001      	beq.n	801a5a2 <CoTickDelay+0x16>
    {
        return E_CALL;                  /* Yes,error return                   */
 801a59e:	2303      	movs	r3, #3
 801a5a0:	e021      	b.n	801a5e6 <CoTickDelay+0x5a>
    }
    
    if(ticks == INVALID_VALUE)          /* Is tick==INVALID_VALUE?            */
 801a5a2:	687b      	ldr	r3, [r7, #4]
 801a5a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801a5a8:	d101      	bne.n	801a5ae <CoTickDelay+0x22>
    {
        return E_INVALID_PARAMETER;     /* Yes,error return                   */
 801a5aa:	2302      	movs	r3, #2
 801a5ac:	e01b      	b.n	801a5e6 <CoTickDelay+0x5a>
    }	
    if(ticks == 0)                      /* Is tick==0?                        */
 801a5ae:	687b      	ldr	r3, [r7, #4]
 801a5b0:	2b00      	cmp	r3, #0
 801a5b2:	d101      	bne.n	801a5b8 <CoTickDelay+0x2c>
    {
        return E_OK;                    /* Yes,do nothing ,return OK          */
 801a5b4:	2300      	movs	r3, #0
 801a5b6:	e016      	b.n	801a5e6 <CoTickDelay+0x5a>
    }
    if(OSSchedLock != 0)                /* Is OS lock?                        */
 801a5b8:	4b0e      	ldr	r3, [pc, #56]	; (801a5f4 <CoTickDelay+0x68>)
 801a5ba:	781b      	ldrb	r3, [r3, #0]
 801a5bc:	b2db      	uxtb	r3, r3
 801a5be:	2b00      	cmp	r3, #0
 801a5c0:	d001      	beq.n	801a5c6 <CoTickDelay+0x3a>
    {
        return E_OS_IN_LOCK;            /* Yes,error return                   */
 801a5c2:	2315      	movs	r3, #21
 801a5c4:	e00f      	b.n	801a5e6 <CoTickDelay+0x5a>
    }	
    OsSchedLock();                      /* Lock schedule                      */
 801a5c6:	4b0b      	ldr	r3, [pc, #44]	; (801a5f4 <CoTickDelay+0x68>)
 801a5c8:	781b      	ldrb	r3, [r3, #0]
 801a5ca:	b2db      	uxtb	r3, r3
 801a5cc:	3301      	adds	r3, #1
 801a5ce:	b2da      	uxtb	r2, r3
 801a5d0:	4b08      	ldr	r3, [pc, #32]	; (801a5f4 <CoTickDelay+0x68>)
 801a5d2:	701a      	strb	r2, [r3, #0]
    InsertDelayList(TCBRunning,ticks);	/* Insert task in DELAY list          */
 801a5d4:	4b08      	ldr	r3, [pc, #32]	; (801a5f8 <CoTickDelay+0x6c>)
 801a5d6:	681b      	ldr	r3, [r3, #0]
 801a5d8:	6879      	ldr	r1, [r7, #4]
 801a5da:	4618      	mov	r0, r3
 801a5dc:	f7ff fef8 	bl	801a3d0 <InsertDelayList>
    OsSchedUnlock();                /* Unlock schedule,and call task schedule */
 801a5e0:	f7fc ffea 	bl	80175b8 <OsSchedUnlock>
    return E_OK;                        /* Return OK                          */
 801a5e4:	2300      	movs	r3, #0
}
 801a5e6:	4618      	mov	r0, r3
 801a5e8:	3708      	adds	r7, #8
 801a5ea:	46bd      	mov	sp, r7
 801a5ec:	bd80      	pop	{r7, pc}
 801a5ee:	bf00      	nop
 801a5f0:	20003748 	.word	0x20003748
 801a5f4:	20003749 	.word	0x20003749
 801a5f8:	2000d728 	.word	0x2000d728

0801a5fc <CoResetTaskDelayTick>:
 * @par Description
 * @details    This function delay specify ticks for current task.
 ******************************************************************************* 	
 */
StatusType CoResetTaskDelayTick(OS_TID taskID,U32 ticks)
{
 801a5fc:	b580      	push	{r7, lr}
 801a5fe:	b084      	sub	sp, #16
 801a600:	af00      	add	r7, sp, #0
 801a602:	4603      	mov	r3, r0
 801a604:	6039      	str	r1, [r7, #0]
 801a606:	71fb      	strb	r3, [r7, #7]
    P_OSTCB ptcb;
	

#if CFG_PAR_CHECKOUT_EN >0              /* Check validity of parameter        */
    if(taskID >= CFG_MAX_USER_TASKS + SYS_TASK_NUM)
 801a608:	79fb      	ldrb	r3, [r7, #7]
 801a60a:	2b05      	cmp	r3, #5
 801a60c:	d901      	bls.n	801a612 <CoResetTaskDelayTick+0x16>
    {
        return E_INVALID_ID;
 801a60e:	2301      	movs	r3, #1
 801a610:	e02c      	b.n	801a66c <CoResetTaskDelayTick+0x70>
    }
#endif

	ptcb = &TCBTbl[taskID];
 801a612:	79fa      	ldrb	r2, [r7, #7]
 801a614:	4613      	mov	r3, r2
 801a616:	005b      	lsls	r3, r3, #1
 801a618:	4413      	add	r3, r2
 801a61a:	011b      	lsls	r3, r3, #4
 801a61c:	4a15      	ldr	r2, [pc, #84]	; (801a674 <CoResetTaskDelayTick+0x78>)
 801a61e:	4413      	add	r3, r2
 801a620:	60fb      	str	r3, [r7, #12]
#if CFG_PAR_CHECKOUT_EN >0 
    if(ptcb->stkPtr == Co_NULL)
 801a622:	68fb      	ldr	r3, [r7, #12]
 801a624:	681b      	ldr	r3, [r3, #0]
 801a626:	2b00      	cmp	r3, #0
 801a628:	d101      	bne.n	801a62e <CoResetTaskDelayTick+0x32>
    {
        return E_INVALID_ID;
 801a62a:	2301      	movs	r3, #1
 801a62c:	e01e      	b.n	801a66c <CoResetTaskDelayTick+0x70>
    }
#endif

    if(ptcb->delayTick == INVALID_VALUE)  /* Is tick==INVALID_VALUE?          */
 801a62e:	68fb      	ldr	r3, [r7, #12]
 801a630:	6a1b      	ldr	r3, [r3, #32]
 801a632:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801a636:	d101      	bne.n	801a63c <CoResetTaskDelayTick+0x40>
    {
        return E_NOT_IN_DELAY_LIST;       /* Yes,error return                 */
 801a638:	2311      	movs	r3, #17
 801a63a:	e017      	b.n	801a66c <CoResetTaskDelayTick+0x70>
    }
    OsSchedLock();                        /* Lock schedule                    */
 801a63c:	4b0e      	ldr	r3, [pc, #56]	; (801a678 <CoResetTaskDelayTick+0x7c>)
 801a63e:	781b      	ldrb	r3, [r3, #0]
 801a640:	b2db      	uxtb	r3, r3
 801a642:	3301      	adds	r3, #1
 801a644:	b2da      	uxtb	r2, r3
 801a646:	4b0c      	ldr	r3, [pc, #48]	; (801a678 <CoResetTaskDelayTick+0x7c>)
 801a648:	701a      	strb	r2, [r3, #0]
    RemoveDelayList(ptcb);                /* Remove task from the DELAY list  */
 801a64a:	68f8      	ldr	r0, [r7, #12]
 801a64c:	f7ff ff38 	bl	801a4c0 <RemoveDelayList>
    
    if(ticks == 0)                        /* Is delay tick==0?                */
 801a650:	683b      	ldr	r3, [r7, #0]
 801a652:	2b00      	cmp	r3, #0
 801a654:	d103      	bne.n	801a65e <CoResetTaskDelayTick+0x62>
    {
        InsertToTCBRdyList(ptcb);         /* Insert task into the DELAY list  */
 801a656:	68f8      	ldr	r0, [r7, #12]
 801a658:	f7ff fa6c 	bl	8019b34 <InsertToTCBRdyList>
 801a65c:	e003      	b.n	801a666 <CoResetTaskDelayTick+0x6a>
    }
    else
    {									
        InsertDelayList(ptcb,ticks);      /* No,insert task into DELAY list   */
 801a65e:	6839      	ldr	r1, [r7, #0]
 801a660:	68f8      	ldr	r0, [r7, #12]
 801a662:	f7ff feb5 	bl	801a3d0 <InsertDelayList>
    }
    OsSchedUnlock();                /* Unlock schedule,and call task schedule */
 801a666:	f7fc ffa7 	bl	80175b8 <OsSchedUnlock>
    return E_OK;                          /* Return OK                        */
 801a66a:	2300      	movs	r3, #0
}
 801a66c:	4618      	mov	r0, r3
 801a66e:	3710      	adds	r7, #16
 801a670:	46bd      	mov	sp, r7
 801a672:	bd80      	pop	{r7, pc}
 801a674:	2000d598 	.word	0x2000d598
 801a678:	20003749 	.word	0x20003749

0801a67c <CoTimeDelay>:
 * @note       If this function called in ISR,do nothing and return immediately.
 *******************************************************************************
 */
#if CFG_TIME_DELAY_EN >0
StatusType  CoTimeDelay(U8 hour,U8 minute,U8 sec,U16 millsec)
{
 801a67c:	b590      	push	{r4, r7, lr}
 801a67e:	b085      	sub	sp, #20
 801a680:	af00      	add	r7, sp, #0
 801a682:	4604      	mov	r4, r0
 801a684:	4608      	mov	r0, r1
 801a686:	4611      	mov	r1, r2
 801a688:	461a      	mov	r2, r3
 801a68a:	4623      	mov	r3, r4
 801a68c:	71fb      	strb	r3, [r7, #7]
 801a68e:	4603      	mov	r3, r0
 801a690:	71bb      	strb	r3, [r7, #6]
 801a692:	460b      	mov	r3, r1
 801a694:	717b      	strb	r3, [r7, #5]
 801a696:	4613      	mov	r3, r2
 801a698:	807b      	strh	r3, [r7, #2]
    U32	ticks;
#if CFG_PAR_CHECKOUT_EN >0              /* Check validity of parameter        */
    if(OSIntNesting > 0)
 801a69a:	4b20      	ldr	r3, [pc, #128]	; (801a71c <CoTimeDelay+0xa0>)
 801a69c:	781b      	ldrb	r3, [r3, #0]
 801a69e:	b2db      	uxtb	r3, r3
 801a6a0:	2b00      	cmp	r3, #0
 801a6a2:	d001      	beq.n	801a6a8 <CoTimeDelay+0x2c>
    {
        return E_CALL;
 801a6a4:	2303      	movs	r3, #3
 801a6a6:	e034      	b.n	801a712 <CoTimeDelay+0x96>
    }
    if((minute > 59)||(sec > 59)||(millsec > 999))
 801a6a8:	79bb      	ldrb	r3, [r7, #6]
 801a6aa:	2b3b      	cmp	r3, #59	; 0x3b
 801a6ac:	d806      	bhi.n	801a6bc <CoTimeDelay+0x40>
 801a6ae:	797b      	ldrb	r3, [r7, #5]
 801a6b0:	2b3b      	cmp	r3, #59	; 0x3b
 801a6b2:	d803      	bhi.n	801a6bc <CoTimeDelay+0x40>
 801a6b4:	887b      	ldrh	r3, [r7, #2]
 801a6b6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801a6ba:	d301      	bcc.n	801a6c0 <CoTimeDelay+0x44>
        return E_INVALID_PARAMETER;
 801a6bc:	2302      	movs	r3, #2
 801a6be:	e028      	b.n	801a712 <CoTimeDelay+0x96>
#endif
    if(OSSchedLock != 0)                /* Is OS lock?                        */
 801a6c0:	4b17      	ldr	r3, [pc, #92]	; (801a720 <CoTimeDelay+0xa4>)
 801a6c2:	781b      	ldrb	r3, [r3, #0]
 801a6c4:	b2db      	uxtb	r3, r3
 801a6c6:	2b00      	cmp	r3, #0
 801a6c8:	d001      	beq.n	801a6ce <CoTimeDelay+0x52>
    {
        return E_OS_IN_LOCK;            /* Yes,error return                   */
 801a6ca:	2315      	movs	r3, #21
 801a6cc:	e021      	b.n	801a712 <CoTimeDelay+0x96>
    }	
    
    /* Get tick counter from time */
    ticks = ((hour*3600) + (minute*60) + (sec)) * (CFG_SYSTICK_FREQ)\
 801a6ce:	79fb      	ldrb	r3, [r7, #7]
 801a6d0:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 801a6d4:	fb02 f103 	mul.w	r1, r2, r3
 801a6d8:	79ba      	ldrb	r2, [r7, #6]
 801a6da:	4613      	mov	r3, r2
 801a6dc:	011b      	lsls	r3, r3, #4
 801a6de:	1a9b      	subs	r3, r3, r2
 801a6e0:	009b      	lsls	r3, r3, #2
 801a6e2:	18ca      	adds	r2, r1, r3
 801a6e4:	797b      	ldrb	r3, [r7, #5]
 801a6e6:	4413      	add	r3, r2
 801a6e8:	2264      	movs	r2, #100	; 0x64
 801a6ea:	fb02 f203 	mul.w	r2, r2, r3
            + (millsec*CFG_SYSTICK_FREQ + 500)/1000;
 801a6ee:	887b      	ldrh	r3, [r7, #2]
 801a6f0:	2164      	movs	r1, #100	; 0x64
 801a6f2:	fb01 f303 	mul.w	r3, r1, r3
 801a6f6:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 801a6fa:	490a      	ldr	r1, [pc, #40]	; (801a724 <CoTimeDelay+0xa8>)
 801a6fc:	fb81 0103 	smull	r0, r1, r1, r3
 801a700:	1189      	asrs	r1, r1, #6
 801a702:	17db      	asrs	r3, r3, #31
 801a704:	1acb      	subs	r3, r1, r3
 801a706:	4413      	add	r3, r2
    ticks = ((hour*3600) + (minute*60) + (sec)) * (CFG_SYSTICK_FREQ)\
 801a708:	60fb      	str	r3, [r7, #12]
    
    CoTickDelay(ticks);                 /* Call tick delay                    */
 801a70a:	68f8      	ldr	r0, [r7, #12]
 801a70c:	f7ff ff3e 	bl	801a58c <CoTickDelay>
    return E_OK;                        /* Return OK                          */
 801a710:	2300      	movs	r3, #0
}
 801a712:	4618      	mov	r0, r3
 801a714:	3714      	adds	r7, #20
 801a716:	46bd      	mov	sp, r7
 801a718:	bd90      	pop	{r4, r7, pc}
 801a71a:	bf00      	nop
 801a71c:	20003748 	.word	0x20003748
 801a720:	20003749 	.word	0x20003749
 801a724:	10624dd3 	.word	0x10624dd3

0801a728 <TimeDispose>:
 * @par Description
 * @details    This function is called to dispose time delay of all task.  
 *******************************************************************************
 */
void TimeDispose(void)
{  
 801a728:	b580      	push	{r7, lr}
 801a72a:	b082      	sub	sp, #8
 801a72c:	af00      	add	r7, sp, #0
    P_OSTCB	dlyList;
    
    dlyList = DlyList;                  /* Get first item of DELAY list       */
 801a72e:	4b1b      	ldr	r3, [pc, #108]	; (801a79c <TimeDispose+0x74>)
 801a730:	681b      	ldr	r3, [r3, #0]
 801a732:	607b      	str	r3, [r7, #4]
    while((dlyList != Co_NULL) && (dlyList->delayTick == 0) )
 801a734:	e026      	b.n	801a784 <TimeDispose+0x5c>
    {	
    
#if CFG_EVENT_EN > 0
        if(dlyList->eventID != INVALID_ID) /* Is task in event waiting list?  */
 801a736:	687b      	ldr	r3, [r7, #4]
 801a738:	7a1b      	ldrb	r3, [r3, #8]
 801a73a:	2bff      	cmp	r3, #255	; 0xff
 801a73c:	d002      	beq.n	801a744 <TimeDispose+0x1c>
        {								   
            RemoveEventWaittingList(dlyList); /* Yes,remove task from list    */	
 801a73e:	6878      	ldr	r0, [r7, #4]
 801a740:	f7fd f9ac 	bl	8017a9c <RemoveEventWaittingList>
        }
#endif

#if CFG_FLAG_EN  > 0
        if(dlyList->pnode != Co_NULL)          /* Is task in flag waiting list?  */
 801a744:	687b      	ldr	r3, [r7, #4]
 801a746:	69db      	ldr	r3, [r3, #28]
 801a748:	2b00      	cmp	r3, #0
 801a74a:	d004      	beq.n	801a756 <TimeDispose+0x2e>
        {
            RemoveLinkNode(dlyList->pnode); /* Yes,remove task from list      */	
 801a74c:	687b      	ldr	r3, [r7, #4]
 801a74e:	69db      	ldr	r3, [r3, #28]
 801a750:	4618      	mov	r0, r3
 801a752:	f7fd fe31 	bl	80183b8 <RemoveLinkNode>
        }
#endif
        dlyList->delayTick = INVALID_VALUE; /* Set delay tick value as invalid*/
 801a756:	687b      	ldr	r3, [r7, #4]
 801a758:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801a75c:	621a      	str	r2, [r3, #32]
        DlyList = dlyList->TCBnext; /* Get next item as the head of DELAY list*/
 801a75e:	687b      	ldr	r3, [r7, #4]
 801a760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a762:	4a0e      	ldr	r2, [pc, #56]	; (801a79c <TimeDispose+0x74>)
 801a764:	6013      	str	r3, [r2, #0]
        dlyList->TCBnext   = Co_NULL;
 801a766:	687b      	ldr	r3, [r7, #4]
 801a768:	2200      	movs	r2, #0
 801a76a:	625a      	str	r2, [r3, #36]	; 0x24

		InsertToTCBRdyList(dlyList);        /* Insert task into READY list    */
 801a76c:	6878      	ldr	r0, [r7, #4]
 801a76e:	f7ff f9e1 	bl	8019b34 <InsertToTCBRdyList>
        
        dlyList = DlyList;                /* Get the first item of DELAY list */
 801a772:	4b0a      	ldr	r3, [pc, #40]	; (801a79c <TimeDispose+0x74>)
 801a774:	681b      	ldr	r3, [r3, #0]
 801a776:	607b      	str	r3, [r7, #4]
        if(dlyList != Co_NULL)                 /* Is DELAY list as Co_NULL?         */
 801a778:	687b      	ldr	r3, [r7, #4]
 801a77a:	2b00      	cmp	r3, #0
 801a77c:	d002      	beq.n	801a784 <TimeDispose+0x5c>
        {
            dlyList->TCBprev = Co_NULL;        /* No,initialize the first item   */
 801a77e:	687b      	ldr	r3, [r7, #4]
 801a780:	2200      	movs	r2, #0
 801a782:	629a      	str	r2, [r3, #40]	; 0x28
    while((dlyList != Co_NULL) && (dlyList->delayTick == 0) )
 801a784:	687b      	ldr	r3, [r7, #4]
 801a786:	2b00      	cmp	r3, #0
 801a788:	d003      	beq.n	801a792 <TimeDispose+0x6a>
 801a78a:	687b      	ldr	r3, [r7, #4]
 801a78c:	6a1b      	ldr	r3, [r3, #32]
 801a78e:	2b00      	cmp	r3, #0
 801a790:	d0d1      	beq.n	801a736 <TimeDispose+0xe>
        }
    }
}
 801a792:	bf00      	nop
 801a794:	3708      	adds	r7, #8
 801a796:	46bd      	mov	sp, r7
 801a798:	bd80      	pop	{r7, pc}
 801a79a:	bf00      	nop
 801a79c:	2000d738 	.word	0x2000d738

0801a7a0 <isr_TimeDispose>:
 * @details    This function is called in systick interrupt to dispose time delay   
 *             of all task.
 *******************************************************************************
 */
void isr_TimeDispose(void)
{
 801a7a0:	b580      	push	{r7, lr}
 801a7a2:	af00      	add	r7, sp, #0
    if(OSSchedLock > 1)                 /* Is schedule lock?                  */
 801a7a4:	4b07      	ldr	r3, [pc, #28]	; (801a7c4 <isr_TimeDispose+0x24>)
 801a7a6:	781b      	ldrb	r3, [r3, #0]
 801a7a8:	b2db      	uxtb	r3, r3
 801a7aa:	2b01      	cmp	r3, #1
 801a7ac:	d906      	bls.n	801a7bc <isr_TimeDispose+0x1c>
    {
        IsrReq = Co_TRUE;
 801a7ae:	4b06      	ldr	r3, [pc, #24]	; (801a7c8 <isr_TimeDispose+0x28>)
 801a7b0:	2201      	movs	r2, #1
 801a7b2:	701a      	strb	r2, [r3, #0]
        TimeReq = Co_TRUE;                 /* Yes,set time request Co_TRUE          */
 801a7b4:	4b05      	ldr	r3, [pc, #20]	; (801a7cc <isr_TimeDispose+0x2c>)
 801a7b6:	2201      	movs	r2, #1
 801a7b8:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        TimeDispose();                  /* No,call handler                    */
    }
}
 801a7ba:	e001      	b.n	801a7c0 <isr_TimeDispose+0x20>
        TimeDispose();                  /* No,call handler                    */
 801a7bc:	f7ff ffb4 	bl	801a728 <TimeDispose>
}
 801a7c0:	bf00      	nop
 801a7c2:	bd80      	pop	{r7, pc}
 801a7c4:	20003749 	.word	0x20003749
 801a7c8:	2000d594 	.word	0x2000d594
 801a7cc:	2000d595 	.word	0x2000d595

0801a7d0 <InsertTmrList>:
 * @par Description
 * @details    This function is called to insert a timer into the timer list.  
 *******************************************************************************
 */
static void InsertTmrList(OS_TCID tmrID)
{
 801a7d0:	b590      	push	{r4, r7, lr}
 801a7d2:	b087      	sub	sp, #28
 801a7d4:	af00      	add	r7, sp, #0
 801a7d6:	4603      	mov	r3, r0
 801a7d8:	71fb      	strb	r3, [r7, #7]
    P_TmrCtrl pTmr;
    S32 deltaTicks;
    U32 tmrCnt;
    tmrCnt = TmrTbl[tmrID].tmrCnt;      /* Get timer time                     */
 801a7da:	79fa      	ldrb	r2, [r7, #7]
 801a7dc:	4970      	ldr	r1, [pc, #448]	; (801a9a0 <InsertTmrList+0x1d0>)
 801a7de:	4613      	mov	r3, r2
 801a7e0:	005b      	lsls	r3, r3, #1
 801a7e2:	4413      	add	r3, r2
 801a7e4:	00db      	lsls	r3, r3, #3
 801a7e6:	440b      	add	r3, r1
 801a7e8:	3304      	adds	r3, #4
 801a7ea:	681b      	ldr	r3, [r3, #0]
 801a7ec:	60fb      	str	r3, [r7, #12]
    
    if(tmrCnt == 0)                     /* Is timer time==0?                  */
 801a7ee:	68fb      	ldr	r3, [r7, #12]
 801a7f0:	2b00      	cmp	r3, #0
 801a7f2:	f000 80d1 	beq.w	801a998 <InsertTmrList+0x1c8>
    {
        return;                         /* Do nothing,return                  */
    }
    
    OsSchedLock();                      /* Lock schedule                      */
 801a7f6:	4b6b      	ldr	r3, [pc, #428]	; (801a9a4 <InsertTmrList+0x1d4>)
 801a7f8:	781b      	ldrb	r3, [r3, #0]
 801a7fa:	b2db      	uxtb	r3, r3
 801a7fc:	3301      	adds	r3, #1
 801a7fe:	b2da      	uxtb	r2, r3
 801a800:	4b68      	ldr	r3, [pc, #416]	; (801a9a4 <InsertTmrList+0x1d4>)
 801a802:	701a      	strb	r2, [r3, #0]
    if(TmrList == Co_NULL)                 /* Is no item in timer list?          */
 801a804:	4b68      	ldr	r3, [pc, #416]	; (801a9a8 <InsertTmrList+0x1d8>)
 801a806:	681b      	ldr	r3, [r3, #0]
 801a808:	2b00      	cmp	r3, #0
 801a80a:	d109      	bne.n	801a820 <InsertTmrList+0x50>
    {
        TmrList = &TmrTbl[tmrID];       /* Yes,set this as first item         */
 801a80c:	79fa      	ldrb	r2, [r7, #7]
 801a80e:	4613      	mov	r3, r2
 801a810:	005b      	lsls	r3, r3, #1
 801a812:	4413      	add	r3, r2
 801a814:	00db      	lsls	r3, r3, #3
 801a816:	4a62      	ldr	r2, [pc, #392]	; (801a9a0 <InsertTmrList+0x1d0>)
 801a818:	4413      	add	r3, r2
 801a81a:	4a63      	ldr	r2, [pc, #396]	; (801a9a8 <InsertTmrList+0x1d8>)
 801a81c:	6013      	str	r3, [r2, #0]
 801a81e:	e0b8      	b.n	801a992 <InsertTmrList+0x1c2>
    }
    else                  /* No,find correct place ,and insert inserted timer */
    {								    
      	pTmr       = TmrList; 
 801a820:	4b61      	ldr	r3, [pc, #388]	; (801a9a8 <InsertTmrList+0x1d8>)
 801a822:	681b      	ldr	r3, [r3, #0]
 801a824:	617b      	str	r3, [r7, #20]
      	deltaTicks = tmrCnt;            /* Get timer tick                     */
 801a826:	68fb      	ldr	r3, [r7, #12]
 801a828:	613b      	str	r3, [r7, #16]
      	
      	/* find correct place */
      	while(pTmr != Co_NULL)
 801a82a:	e0ae      	b.n	801a98a <InsertTmrList+0x1ba>
      	{				    
            deltaTicks -= pTmr->tmrCnt; /* Get ticks with previous item       */
 801a82c:	693a      	ldr	r2, [r7, #16]
 801a82e:	697b      	ldr	r3, [r7, #20]
 801a830:	685b      	ldr	r3, [r3, #4]
 801a832:	1ad3      	subs	r3, r2, r3
 801a834:	613b      	str	r3, [r7, #16]
            if(deltaTicks < 0)          /* Is delta ticks<0?                  */  
 801a836:	693b      	ldr	r3, [r7, #16]
 801a838:	2b00      	cmp	r3, #0
 801a83a:	da7e      	bge.n	801a93a <InsertTmrList+0x16a>
            {	
                /* Yes,get correct place */
                if(pTmr->tmrPrev!= Co_NULL)/* Is head item of timer list?        */
 801a83c:	697b      	ldr	r3, [r7, #20]
 801a83e:	695b      	ldr	r3, [r3, #20]
 801a840:	2b00      	cmp	r3, #0
 801a842:	d028      	beq.n	801a896 <InsertTmrList+0xc6>
                {	
                    /* No,insert into */
                    pTmr->tmrPrev->tmrNext = &TmrTbl[tmrID]; 
 801a844:	79fa      	ldrb	r2, [r7, #7]
 801a846:	697b      	ldr	r3, [r7, #20]
 801a848:	6959      	ldr	r1, [r3, #20]
 801a84a:	4613      	mov	r3, r2
 801a84c:	005b      	lsls	r3, r3, #1
 801a84e:	4413      	add	r3, r2
 801a850:	00db      	lsls	r3, r3, #3
 801a852:	4a53      	ldr	r2, [pc, #332]	; (801a9a0 <InsertTmrList+0x1d0>)
 801a854:	4413      	add	r3, r2
 801a856:	610b      	str	r3, [r1, #16]
                    TmrTbl[tmrID].tmrPrev  = pTmr->tmrPrev;
 801a858:	79fa      	ldrb	r2, [r7, #7]
 801a85a:	697b      	ldr	r3, [r7, #20]
 801a85c:	6959      	ldr	r1, [r3, #20]
 801a85e:	4850      	ldr	r0, [pc, #320]	; (801a9a0 <InsertTmrList+0x1d0>)
 801a860:	4613      	mov	r3, r2
 801a862:	005b      	lsls	r3, r3, #1
 801a864:	4413      	add	r3, r2
 801a866:	00db      	lsls	r3, r3, #3
 801a868:	4403      	add	r3, r0
 801a86a:	3314      	adds	r3, #20
 801a86c:	6019      	str	r1, [r3, #0]
                    TmrTbl[tmrID].tmrNext  = pTmr;
 801a86e:	79fa      	ldrb	r2, [r7, #7]
 801a870:	494b      	ldr	r1, [pc, #300]	; (801a9a0 <InsertTmrList+0x1d0>)
 801a872:	4613      	mov	r3, r2
 801a874:	005b      	lsls	r3, r3, #1
 801a876:	4413      	add	r3, r2
 801a878:	00db      	lsls	r3, r3, #3
 801a87a:	440b      	add	r3, r1
 801a87c:	3310      	adds	r3, #16
 801a87e:	697a      	ldr	r2, [r7, #20]
 801a880:	601a      	str	r2, [r3, #0]
                    pTmr->tmrPrev          = &TmrTbl[tmrID];
 801a882:	79fa      	ldrb	r2, [r7, #7]
 801a884:	4613      	mov	r3, r2
 801a886:	005b      	lsls	r3, r3, #1
 801a888:	4413      	add	r3, r2
 801a88a:	00db      	lsls	r3, r3, #3
 801a88c:	4a44      	ldr	r2, [pc, #272]	; (801a9a0 <InsertTmrList+0x1d0>)
 801a88e:	441a      	add	r2, r3
 801a890:	697b      	ldr	r3, [r7, #20]
 801a892:	615a      	str	r2, [r3, #20]
 801a894:	e01d      	b.n	801a8d2 <InsertTmrList+0x102>
                }
                else                    /* Yes,set task as first item         */ 	
                {
                    TmrTbl[tmrID].tmrNext = TmrList;
 801a896:	79fa      	ldrb	r2, [r7, #7]
 801a898:	4b43      	ldr	r3, [pc, #268]	; (801a9a8 <InsertTmrList+0x1d8>)
 801a89a:	6819      	ldr	r1, [r3, #0]
 801a89c:	4840      	ldr	r0, [pc, #256]	; (801a9a0 <InsertTmrList+0x1d0>)
 801a89e:	4613      	mov	r3, r2
 801a8a0:	005b      	lsls	r3, r3, #1
 801a8a2:	4413      	add	r3, r2
 801a8a4:	00db      	lsls	r3, r3, #3
 801a8a6:	4403      	add	r3, r0
 801a8a8:	3310      	adds	r3, #16
 801a8aa:	6019      	str	r1, [r3, #0]
                    TmrList->tmrPrev      = &TmrTbl[tmrID];
 801a8ac:	79fa      	ldrb	r2, [r7, #7]
 801a8ae:	4b3e      	ldr	r3, [pc, #248]	; (801a9a8 <InsertTmrList+0x1d8>)
 801a8b0:	6819      	ldr	r1, [r3, #0]
 801a8b2:	4613      	mov	r3, r2
 801a8b4:	005b      	lsls	r3, r3, #1
 801a8b6:	4413      	add	r3, r2
 801a8b8:	00db      	lsls	r3, r3, #3
 801a8ba:	4a39      	ldr	r2, [pc, #228]	; (801a9a0 <InsertTmrList+0x1d0>)
 801a8bc:	4413      	add	r3, r2
 801a8be:	614b      	str	r3, [r1, #20]
                    TmrList               = &TmrTbl[tmrID];
 801a8c0:	79fa      	ldrb	r2, [r7, #7]
 801a8c2:	4613      	mov	r3, r2
 801a8c4:	005b      	lsls	r3, r3, #1
 801a8c6:	4413      	add	r3, r2
 801a8c8:	00db      	lsls	r3, r3, #3
 801a8ca:	4a35      	ldr	r2, [pc, #212]	; (801a9a0 <InsertTmrList+0x1d0>)
 801a8cc:	4413      	add	r3, r2
 801a8ce:	4a36      	ldr	r2, [pc, #216]	; (801a9a8 <InsertTmrList+0x1d8>)
 801a8d0:	6013      	str	r3, [r2, #0]
                }
                TmrTbl[tmrID].tmrCnt            = TmrTbl[tmrID].tmrNext->tmrCnt+deltaTicks;
 801a8d2:	79fa      	ldrb	r2, [r7, #7]
 801a8d4:	4932      	ldr	r1, [pc, #200]	; (801a9a0 <InsertTmrList+0x1d0>)
 801a8d6:	4613      	mov	r3, r2
 801a8d8:	005b      	lsls	r3, r3, #1
 801a8da:	4413      	add	r3, r2
 801a8dc:	00db      	lsls	r3, r3, #3
 801a8de:	440b      	add	r3, r1
 801a8e0:	3310      	adds	r3, #16
 801a8e2:	681b      	ldr	r3, [r3, #0]
 801a8e4:	6859      	ldr	r1, [r3, #4]
 801a8e6:	693b      	ldr	r3, [r7, #16]
 801a8e8:	79fa      	ldrb	r2, [r7, #7]
 801a8ea:	4419      	add	r1, r3
 801a8ec:	482c      	ldr	r0, [pc, #176]	; (801a9a0 <InsertTmrList+0x1d0>)
 801a8ee:	4613      	mov	r3, r2
 801a8f0:	005b      	lsls	r3, r3, #1
 801a8f2:	4413      	add	r3, r2
 801a8f4:	00db      	lsls	r3, r3, #3
 801a8f6:	4403      	add	r3, r0
 801a8f8:	3304      	adds	r3, #4
 801a8fa:	6019      	str	r1, [r3, #0]
                TmrTbl[tmrID].tmrNext->tmrCnt  -= TmrTbl[tmrID].tmrCnt; 
 801a8fc:	79fa      	ldrb	r2, [r7, #7]
 801a8fe:	4928      	ldr	r1, [pc, #160]	; (801a9a0 <InsertTmrList+0x1d0>)
 801a900:	4613      	mov	r3, r2
 801a902:	005b      	lsls	r3, r3, #1
 801a904:	4413      	add	r3, r2
 801a906:	00db      	lsls	r3, r3, #3
 801a908:	440b      	add	r3, r1
 801a90a:	3310      	adds	r3, #16
 801a90c:	681b      	ldr	r3, [r3, #0]
 801a90e:	6858      	ldr	r0, [r3, #4]
 801a910:	79fa      	ldrb	r2, [r7, #7]
 801a912:	4923      	ldr	r1, [pc, #140]	; (801a9a0 <InsertTmrList+0x1d0>)
 801a914:	4613      	mov	r3, r2
 801a916:	005b      	lsls	r3, r3, #1
 801a918:	4413      	add	r3, r2
 801a91a:	00db      	lsls	r3, r3, #3
 801a91c:	440b      	add	r3, r1
 801a91e:	3304      	adds	r3, #4
 801a920:	6819      	ldr	r1, [r3, #0]
 801a922:	79fa      	ldrb	r2, [r7, #7]
 801a924:	4c1e      	ldr	r4, [pc, #120]	; (801a9a0 <InsertTmrList+0x1d0>)
 801a926:	4613      	mov	r3, r2
 801a928:	005b      	lsls	r3, r3, #1
 801a92a:	4413      	add	r3, r2
 801a92c:	00db      	lsls	r3, r3, #3
 801a92e:	4423      	add	r3, r4
 801a930:	3310      	adds	r3, #16
 801a932:	681b      	ldr	r3, [r3, #0]
 801a934:	1a42      	subs	r2, r0, r1
 801a936:	605a      	str	r2, [r3, #4]
                break;	
 801a938:	e02b      	b.n	801a992 <InsertTmrList+0x1c2>
            }
            /* Is last item in list? */									
            else if((deltaTicks >= 0) && (pTmr->tmrNext == Co_NULL))
 801a93a:	693b      	ldr	r3, [r7, #16]
 801a93c:	2b00      	cmp	r3, #0
 801a93e:	db21      	blt.n	801a984 <InsertTmrList+0x1b4>
 801a940:	697b      	ldr	r3, [r7, #20]
 801a942:	691b      	ldr	r3, [r3, #16]
 801a944:	2b00      	cmp	r3, #0
 801a946:	d11d      	bne.n	801a984 <InsertTmrList+0x1b4>
            {	
                /* Yes,insert into */
                TmrTbl[tmrID].tmrPrev = pTmr;
 801a948:	79fa      	ldrb	r2, [r7, #7]
 801a94a:	4915      	ldr	r1, [pc, #84]	; (801a9a0 <InsertTmrList+0x1d0>)
 801a94c:	4613      	mov	r3, r2
 801a94e:	005b      	lsls	r3, r3, #1
 801a950:	4413      	add	r3, r2
 801a952:	00db      	lsls	r3, r3, #3
 801a954:	440b      	add	r3, r1
 801a956:	3314      	adds	r3, #20
 801a958:	697a      	ldr	r2, [r7, #20]
 801a95a:	601a      	str	r2, [r3, #0]
                pTmr->tmrNext         = &TmrTbl[tmrID];	
 801a95c:	79fa      	ldrb	r2, [r7, #7]
 801a95e:	4613      	mov	r3, r2
 801a960:	005b      	lsls	r3, r3, #1
 801a962:	4413      	add	r3, r2
 801a964:	00db      	lsls	r3, r3, #3
 801a966:	4a0e      	ldr	r2, [pc, #56]	; (801a9a0 <InsertTmrList+0x1d0>)
 801a968:	441a      	add	r2, r3
 801a96a:	697b      	ldr	r3, [r7, #20]
 801a96c:	611a      	str	r2, [r3, #16]
                TmrTbl[tmrID].tmrCnt  = deltaTicks;
 801a96e:	79fa      	ldrb	r2, [r7, #7]
 801a970:	6939      	ldr	r1, [r7, #16]
 801a972:	480b      	ldr	r0, [pc, #44]	; (801a9a0 <InsertTmrList+0x1d0>)
 801a974:	4613      	mov	r3, r2
 801a976:	005b      	lsls	r3, r3, #1
 801a978:	4413      	add	r3, r2
 801a97a:	00db      	lsls	r3, r3, #3
 801a97c:	4403      	add	r3, r0
 801a97e:	3304      	adds	r3, #4
 801a980:	6019      	str	r1, [r3, #0]
                break;	
 801a982:	e006      	b.n	801a992 <InsertTmrList+0x1c2>
            }
            pTmr = pTmr->tmrNext;       /* Get the next item in timer list    */	
 801a984:	697b      	ldr	r3, [r7, #20]
 801a986:	691b      	ldr	r3, [r3, #16]
 801a988:	617b      	str	r3, [r7, #20]
      	while(pTmr != Co_NULL)
 801a98a:	697b      	ldr	r3, [r7, #20]
 801a98c:	2b00      	cmp	r3, #0
 801a98e:	f47f af4d 	bne.w	801a82c <InsertTmrList+0x5c>
      	}
    }
    OsSchedUnlock();                    /* Unlock schedule                    */
 801a992:	f7fc fe11 	bl	80175b8 <OsSchedUnlock>
 801a996:	e000      	b.n	801a99a <InsertTmrList+0x1ca>
        return;                         /* Do nothing,return                  */
 801a998:	bf00      	nop
}
 801a99a:	371c      	adds	r7, #28
 801a99c:	46bd      	mov	sp, r7
 801a99e:	bd90      	pop	{r4, r7, pc}
 801a9a0:	2000d73c 	.word	0x2000d73c
 801a9a4:	20003749 	.word	0x20003749
 801a9a8:	2000d76c 	.word	0x2000d76c

0801a9ac <RemoveTmrList>:
 * @par Description
 * @details    This function is called to remove a timer from the timer list. 
 *******************************************************************************
 */
static void RemoveTmrList(OS_TCID tmrID)
{
 801a9ac:	b580      	push	{r7, lr}
 801a9ae:	b084      	sub	sp, #16
 801a9b0:	af00      	add	r7, sp, #0
 801a9b2:	4603      	mov	r3, r0
 801a9b4:	71fb      	strb	r3, [r7, #7]
    P_TmrCtrl pTmr;
    
    pTmr = &TmrTbl[tmrID];
 801a9b6:	79fa      	ldrb	r2, [r7, #7]
 801a9b8:	4613      	mov	r3, r2
 801a9ba:	005b      	lsls	r3, r3, #1
 801a9bc:	4413      	add	r3, r2
 801a9be:	00db      	lsls	r3, r3, #3
 801a9c0:	4a2c      	ldr	r2, [pc, #176]	; (801aa74 <RemoveTmrList+0xc8>)
 801a9c2:	4413      	add	r3, r2
 801a9c4:	60fb      	str	r3, [r7, #12]
    
    OsSchedLock();                      /* Lock schedule                      */
 801a9c6:	4b2c      	ldr	r3, [pc, #176]	; (801aa78 <RemoveTmrList+0xcc>)
 801a9c8:	781b      	ldrb	r3, [r3, #0]
 801a9ca:	b2db      	uxtb	r3, r3
 801a9cc:	3301      	adds	r3, #1
 801a9ce:	b2da      	uxtb	r2, r3
 801a9d0:	4b29      	ldr	r3, [pc, #164]	; (801aa78 <RemoveTmrList+0xcc>)
 801a9d2:	701a      	strb	r2, [r3, #0]
    
    /* Is there only one item in timer list?                                  */
    if((pTmr->tmrPrev == Co_NULL) && (pTmr->tmrNext == Co_NULL))
 801a9d4:	68fb      	ldr	r3, [r7, #12]
 801a9d6:	695b      	ldr	r3, [r3, #20]
 801a9d8:	2b00      	cmp	r3, #0
 801a9da:	d107      	bne.n	801a9ec <RemoveTmrList+0x40>
 801a9dc:	68fb      	ldr	r3, [r7, #12]
 801a9de:	691b      	ldr	r3, [r3, #16]
 801a9e0:	2b00      	cmp	r3, #0
 801a9e2:	d103      	bne.n	801a9ec <RemoveTmrList+0x40>
    {		
        TmrList = Co_NULL;                 /* Yes,set timer list as Co_NULL         */
 801a9e4:	4b25      	ldr	r3, [pc, #148]	; (801aa7c <RemoveTmrList+0xd0>)
 801a9e6:	2200      	movs	r2, #0
 801a9e8:	601a      	str	r2, [r3, #0]
 801a9ea:	e03d      	b.n	801aa68 <RemoveTmrList+0xbc>
    }
    else if(pTmr->tmrPrev == Co_NULL)      /* Is the first item in timer list?   */
 801a9ec:	68fb      	ldr	r3, [r7, #12]
 801a9ee:	695b      	ldr	r3, [r3, #20]
 801a9f0:	2b00      	cmp	r3, #0
 801a9f2:	d114      	bne.n	801aa1e <RemoveTmrList+0x72>
    {   /* Yes,remove timer from list,and reset timer list                    */
        TmrList  = pTmr->tmrNext;
 801a9f4:	68fb      	ldr	r3, [r7, #12]
 801a9f6:	691b      	ldr	r3, [r3, #16]
 801a9f8:	4a20      	ldr	r2, [pc, #128]	; (801aa7c <RemoveTmrList+0xd0>)
 801a9fa:	6013      	str	r3, [r2, #0]
        TmrList->tmrPrev = Co_NULL;
 801a9fc:	4b1f      	ldr	r3, [pc, #124]	; (801aa7c <RemoveTmrList+0xd0>)
 801a9fe:	681b      	ldr	r3, [r3, #0]
 801aa00:	2200      	movs	r2, #0
 801aa02:	615a      	str	r2, [r3, #20]
        pTmr->tmrNext->tmrCnt += pTmr->tmrCnt;
 801aa04:	68fb      	ldr	r3, [r7, #12]
 801aa06:	691b      	ldr	r3, [r3, #16]
 801aa08:	6859      	ldr	r1, [r3, #4]
 801aa0a:	68fb      	ldr	r3, [r7, #12]
 801aa0c:	685a      	ldr	r2, [r3, #4]
 801aa0e:	68fb      	ldr	r3, [r7, #12]
 801aa10:	691b      	ldr	r3, [r3, #16]
 801aa12:	440a      	add	r2, r1
 801aa14:	605a      	str	r2, [r3, #4]
        pTmr->tmrNext    = Co_NULL;
 801aa16:	68fb      	ldr	r3, [r7, #12]
 801aa18:	2200      	movs	r2, #0
 801aa1a:	611a      	str	r2, [r3, #16]
 801aa1c:	e024      	b.n	801aa68 <RemoveTmrList+0xbc>
    }
    else if(pTmr->tmrNext == Co_NULL)      /* Is the last item in timer list?    */
 801aa1e:	68fb      	ldr	r3, [r7, #12]
 801aa20:	691b      	ldr	r3, [r3, #16]
 801aa22:	2b00      	cmp	r3, #0
 801aa24:	d107      	bne.n	801aa36 <RemoveTmrList+0x8a>
    {
        /* Yes,remove timer form list */
        pTmr->tmrPrev->tmrNext = Co_NULL;
 801aa26:	68fb      	ldr	r3, [r7, #12]
 801aa28:	695b      	ldr	r3, [r3, #20]
 801aa2a:	2200      	movs	r2, #0
 801aa2c:	611a      	str	r2, [r3, #16]
        pTmr->tmrPrev = Co_NULL;
 801aa2e:	68fb      	ldr	r3, [r7, #12]
 801aa30:	2200      	movs	r2, #0
 801aa32:	615a      	str	r2, [r3, #20]
 801aa34:	e018      	b.n	801aa68 <RemoveTmrList+0xbc>
    }
    else                                /* No, remove timer from list         */
    {
        pTmr->tmrPrev->tmrNext  =  pTmr->tmrNext;
 801aa36:	68fb      	ldr	r3, [r7, #12]
 801aa38:	695b      	ldr	r3, [r3, #20]
 801aa3a:	68fa      	ldr	r2, [r7, #12]
 801aa3c:	6912      	ldr	r2, [r2, #16]
 801aa3e:	611a      	str	r2, [r3, #16]
        pTmr->tmrNext->tmrPrev  =  pTmr->tmrPrev;
 801aa40:	68fb      	ldr	r3, [r7, #12]
 801aa42:	691b      	ldr	r3, [r3, #16]
 801aa44:	68fa      	ldr	r2, [r7, #12]
 801aa46:	6952      	ldr	r2, [r2, #20]
 801aa48:	615a      	str	r2, [r3, #20]
        pTmr->tmrNext->tmrCnt  += pTmr->tmrCnt;
 801aa4a:	68fb      	ldr	r3, [r7, #12]
 801aa4c:	691b      	ldr	r3, [r3, #16]
 801aa4e:	6859      	ldr	r1, [r3, #4]
 801aa50:	68fb      	ldr	r3, [r7, #12]
 801aa52:	685a      	ldr	r2, [r3, #4]
 801aa54:	68fb      	ldr	r3, [r7, #12]
 801aa56:	691b      	ldr	r3, [r3, #16]
 801aa58:	440a      	add	r2, r1
 801aa5a:	605a      	str	r2, [r3, #4]
        pTmr->tmrNext = Co_NULL;
 801aa5c:	68fb      	ldr	r3, [r7, #12]
 801aa5e:	2200      	movs	r2, #0
 801aa60:	611a      	str	r2, [r3, #16]
        pTmr->tmrPrev = Co_NULL;
 801aa62:	68fb      	ldr	r3, [r7, #12]
 801aa64:	2200      	movs	r2, #0
 801aa66:	615a      	str	r2, [r3, #20]
    }
    OsSchedUnlock();                    /* Unlock schedule                    */
 801aa68:	f7fc fda6 	bl	80175b8 <OsSchedUnlock>
}
 801aa6c:	bf00      	nop
 801aa6e:	3710      	adds	r7, #16
 801aa70:	46bd      	mov	sp, r7
 801aa72:	bd80      	pop	{r7, pc}
 801aa74:	2000d73c 	.word	0x2000d73c
 801aa78:	20003749 	.word	0x20003749
 801aa7c:	2000d76c 	.word	0x2000d76c

0801aa80 <CoCreateTmr>:
 * @par Description
 * @details    This function is called to create a timer.
 *******************************************************************************
 */
OS_TCID CoCreateTmr(U8 tmrType, U32 tmrCnt, U32 tmrReload, vFUNCPtr func)
{
 801aa80:	b580      	push	{r7, lr}
 801aa82:	b086      	sub	sp, #24
 801aa84:	af00      	add	r7, sp, #0
 801aa86:	60b9      	str	r1, [r7, #8]
 801aa88:	607a      	str	r2, [r7, #4]
 801aa8a:	603b      	str	r3, [r7, #0]
 801aa8c:	4603      	mov	r3, r0
 801aa8e:	73fb      	strb	r3, [r7, #15]
    U8 i;
#if CFG_PAR_CHECKOUT_EN >0              /* Check validity of parameter        */
    if((tmrType != TMR_TYPE_ONE_SHOT) && (tmrType != TMR_TYPE_PERIODIC))
 801aa90:	7bfb      	ldrb	r3, [r7, #15]
 801aa92:	2b00      	cmp	r3, #0
 801aa94:	d004      	beq.n	801aaa0 <CoCreateTmr+0x20>
 801aa96:	7bfb      	ldrb	r3, [r7, #15]
 801aa98:	2b01      	cmp	r3, #1
 801aa9a:	d001      	beq.n	801aaa0 <CoCreateTmr+0x20>
    {
        return E_CREATE_FAIL;	
 801aa9c:	23ff      	movs	r3, #255	; 0xff
 801aa9e:	e07e      	b.n	801ab9e <CoCreateTmr+0x11e>
    }
    if(func == Co_NULL)
 801aaa0:	683b      	ldr	r3, [r7, #0]
 801aaa2:	2b00      	cmp	r3, #0
 801aaa4:	d101      	bne.n	801aaaa <CoCreateTmr+0x2a>
    {
        return E_CREATE_FAIL;
 801aaa6:	23ff      	movs	r3, #255	; 0xff
 801aaa8:	e079      	b.n	801ab9e <CoCreateTmr+0x11e>
    }
#endif
    OsSchedLock();                        /* Lock schedule                    */
 801aaaa:	4b3f      	ldr	r3, [pc, #252]	; (801aba8 <CoCreateTmr+0x128>)
 801aaac:	781b      	ldrb	r3, [r3, #0]
 801aaae:	b2db      	uxtb	r3, r3
 801aab0:	3301      	adds	r3, #1
 801aab2:	b2da      	uxtb	r2, r3
 801aab4:	4b3c      	ldr	r3, [pc, #240]	; (801aba8 <CoCreateTmr+0x128>)
 801aab6:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < CFG_MAX_TMR; i++)
 801aab8:	2300      	movs	r3, #0
 801aaba:	75fb      	strb	r3, [r7, #23]
 801aabc:	e069      	b.n	801ab92 <CoCreateTmr+0x112>
    {
        if((TmrIDVessel & (1 << i)) == 0) /* Is free timer ID?                */
 801aabe:	7dfb      	ldrb	r3, [r7, #23]
 801aac0:	2201      	movs	r2, #1
 801aac2:	fa02 f303 	lsl.w	r3, r2, r3
 801aac6:	461a      	mov	r2, r3
 801aac8:	4b38      	ldr	r3, [pc, #224]	; (801abac <CoCreateTmr+0x12c>)
 801aaca:	681b      	ldr	r3, [r3, #0]
 801aacc:	4013      	ands	r3, r2
 801aace:	2b00      	cmp	r3, #0
 801aad0:	d15c      	bne.n	801ab8c <CoCreateTmr+0x10c>
        {
            TmrIDVessel |= (1<<i);        /* Yes,assign ID to this timer      */
 801aad2:	7dfb      	ldrb	r3, [r7, #23]
 801aad4:	2201      	movs	r2, #1
 801aad6:	fa02 f303 	lsl.w	r3, r2, r3
 801aada:	461a      	mov	r2, r3
 801aadc:	4b33      	ldr	r3, [pc, #204]	; (801abac <CoCreateTmr+0x12c>)
 801aade:	681b      	ldr	r3, [r3, #0]
 801aae0:	4313      	orrs	r3, r2
 801aae2:	4a32      	ldr	r2, [pc, #200]	; (801abac <CoCreateTmr+0x12c>)
 801aae4:	6013      	str	r3, [r2, #0]
            OsSchedUnlock();              /* Unlock schedule                  */
 801aae6:	f7fc fd67 	bl	80175b8 <OsSchedUnlock>
            TmrTbl[i].tmrID     = i;      /* Initialize timer as user set     */
 801aaea:	7dfa      	ldrb	r2, [r7, #23]
 801aaec:	4930      	ldr	r1, [pc, #192]	; (801abb0 <CoCreateTmr+0x130>)
 801aaee:	4613      	mov	r3, r2
 801aaf0:	005b      	lsls	r3, r3, #1
 801aaf2:	4413      	add	r3, r2
 801aaf4:	00db      	lsls	r3, r3, #3
 801aaf6:	440b      	add	r3, r1
 801aaf8:	7dfa      	ldrb	r2, [r7, #23]
 801aafa:	701a      	strb	r2, [r3, #0]
            TmrTbl[i].tmrType   = tmrType;	
 801aafc:	7dfa      	ldrb	r2, [r7, #23]
 801aafe:	492c      	ldr	r1, [pc, #176]	; (801abb0 <CoCreateTmr+0x130>)
 801ab00:	4613      	mov	r3, r2
 801ab02:	005b      	lsls	r3, r3, #1
 801ab04:	4413      	add	r3, r2
 801ab06:	00db      	lsls	r3, r3, #3
 801ab08:	440b      	add	r3, r1
 801ab0a:	3301      	adds	r3, #1
 801ab0c:	7bfa      	ldrb	r2, [r7, #15]
 801ab0e:	701a      	strb	r2, [r3, #0]
            TmrTbl[i].tmrState  = TMR_STATE_STOPPED;
 801ab10:	7dfa      	ldrb	r2, [r7, #23]
 801ab12:	4927      	ldr	r1, [pc, #156]	; (801abb0 <CoCreateTmr+0x130>)
 801ab14:	4613      	mov	r3, r2
 801ab16:	005b      	lsls	r3, r3, #1
 801ab18:	4413      	add	r3, r2
 801ab1a:	00db      	lsls	r3, r3, #3
 801ab1c:	440b      	add	r3, r1
 801ab1e:	3302      	adds	r3, #2
 801ab20:	2201      	movs	r2, #1
 801ab22:	701a      	strb	r2, [r3, #0]
            TmrTbl[i].tmrCnt    = tmrCnt;
 801ab24:	7dfa      	ldrb	r2, [r7, #23]
 801ab26:	4922      	ldr	r1, [pc, #136]	; (801abb0 <CoCreateTmr+0x130>)
 801ab28:	4613      	mov	r3, r2
 801ab2a:	005b      	lsls	r3, r3, #1
 801ab2c:	4413      	add	r3, r2
 801ab2e:	00db      	lsls	r3, r3, #3
 801ab30:	440b      	add	r3, r1
 801ab32:	3304      	adds	r3, #4
 801ab34:	68ba      	ldr	r2, [r7, #8]
 801ab36:	601a      	str	r2, [r3, #0]
            TmrTbl[i].tmrReload	= tmrReload;
 801ab38:	7dfa      	ldrb	r2, [r7, #23]
 801ab3a:	491d      	ldr	r1, [pc, #116]	; (801abb0 <CoCreateTmr+0x130>)
 801ab3c:	4613      	mov	r3, r2
 801ab3e:	005b      	lsls	r3, r3, #1
 801ab40:	4413      	add	r3, r2
 801ab42:	00db      	lsls	r3, r3, #3
 801ab44:	440b      	add	r3, r1
 801ab46:	3308      	adds	r3, #8
 801ab48:	687a      	ldr	r2, [r7, #4]
 801ab4a:	601a      	str	r2, [r3, #0]
            TmrTbl[i].tmrCallBack = func;
 801ab4c:	7dfa      	ldrb	r2, [r7, #23]
 801ab4e:	4918      	ldr	r1, [pc, #96]	; (801abb0 <CoCreateTmr+0x130>)
 801ab50:	4613      	mov	r3, r2
 801ab52:	005b      	lsls	r3, r3, #1
 801ab54:	4413      	add	r3, r2
 801ab56:	00db      	lsls	r3, r3, #3
 801ab58:	440b      	add	r3, r1
 801ab5a:	330c      	adds	r3, #12
 801ab5c:	683a      	ldr	r2, [r7, #0]
 801ab5e:	601a      	str	r2, [r3, #0]
            TmrTbl[i].tmrPrev   = Co_NULL;
 801ab60:	7dfa      	ldrb	r2, [r7, #23]
 801ab62:	4913      	ldr	r1, [pc, #76]	; (801abb0 <CoCreateTmr+0x130>)
 801ab64:	4613      	mov	r3, r2
 801ab66:	005b      	lsls	r3, r3, #1
 801ab68:	4413      	add	r3, r2
 801ab6a:	00db      	lsls	r3, r3, #3
 801ab6c:	440b      	add	r3, r1
 801ab6e:	3314      	adds	r3, #20
 801ab70:	2200      	movs	r2, #0
 801ab72:	601a      	str	r2, [r3, #0]
            TmrTbl[i].tmrNext   = Co_NULL;
 801ab74:	7dfa      	ldrb	r2, [r7, #23]
 801ab76:	490e      	ldr	r1, [pc, #56]	; (801abb0 <CoCreateTmr+0x130>)
 801ab78:	4613      	mov	r3, r2
 801ab7a:	005b      	lsls	r3, r3, #1
 801ab7c:	4413      	add	r3, r2
 801ab7e:	00db      	lsls	r3, r3, #3
 801ab80:	440b      	add	r3, r1
 801ab82:	3310      	adds	r3, #16
 801ab84:	2200      	movs	r2, #0
 801ab86:	601a      	str	r2, [r3, #0]
            return i;                     /* Return timer ID                  */
 801ab88:	7dfb      	ldrb	r3, [r7, #23]
 801ab8a:	e008      	b.n	801ab9e <CoCreateTmr+0x11e>
    for(i = 0; i < CFG_MAX_TMR; i++)
 801ab8c:	7dfb      	ldrb	r3, [r7, #23]
 801ab8e:	3301      	adds	r3, #1
 801ab90:	75fb      	strb	r3, [r7, #23]
 801ab92:	7dfb      	ldrb	r3, [r7, #23]
 801ab94:	2b01      	cmp	r3, #1
 801ab96:	d992      	bls.n	801aabe <CoCreateTmr+0x3e>
        }
    }
    OsSchedUnlock();                      /* Unlock schedule                  */
 801ab98:	f7fc fd0e 	bl	80175b8 <OsSchedUnlock>
    return E_CREATE_FAIL;                 /* Error return                     */
 801ab9c:	23ff      	movs	r3, #255	; 0xff
}
 801ab9e:	4618      	mov	r0, r3
 801aba0:	3718      	adds	r7, #24
 801aba2:	46bd      	mov	sp, r7
 801aba4:	bd80      	pop	{r7, pc}
 801aba6:	bf00      	nop
 801aba8:	20003749 	.word	0x20003749
 801abac:	2000d770 	.word	0x2000d770
 801abb0:	2000d73c 	.word	0x2000d73c

0801abb4 <CoStartTmr>:
 * @par Description
 * @details    This function is called to make a timer start countering. 
 *******************************************************************************
 */
StatusType CoStartTmr(OS_TCID tmrID)
{
 801abb4:	b580      	push	{r7, lr}
 801abb6:	b082      	sub	sp, #8
 801abb8:	af00      	add	r7, sp, #0
 801abba:	4603      	mov	r3, r0
 801abbc:	71fb      	strb	r3, [r7, #7]
#if CFG_PAR_CHECKOUT_EN >0              /* Check validity of parameter        */
    if(tmrID >= CFG_MAX_TMR)
 801abbe:	79fb      	ldrb	r3, [r7, #7]
 801abc0:	2b01      	cmp	r3, #1
 801abc2:	d901      	bls.n	801abc8 <CoStartTmr+0x14>
    {
        return E_INVALID_ID;
 801abc4:	2301      	movs	r3, #1
 801abc6:	e027      	b.n	801ac18 <CoStartTmr+0x64>
    }
    if( (TmrIDVessel & (1<<tmrID)) == 0)
 801abc8:	79fb      	ldrb	r3, [r7, #7]
 801abca:	2201      	movs	r2, #1
 801abcc:	fa02 f303 	lsl.w	r3, r2, r3
 801abd0:	461a      	mov	r2, r3
 801abd2:	4b13      	ldr	r3, [pc, #76]	; (801ac20 <CoStartTmr+0x6c>)
 801abd4:	681b      	ldr	r3, [r3, #0]
 801abd6:	4013      	ands	r3, r2
 801abd8:	2b00      	cmp	r3, #0
 801abda:	d101      	bne.n	801abe0 <CoStartTmr+0x2c>
    {
        return E_INVALID_ID;
 801abdc:	2301      	movs	r3, #1
 801abde:	e01b      	b.n	801ac18 <CoStartTmr+0x64>
    }
#endif
    
    if(TmrTbl[tmrID].tmrState == TMR_STATE_RUNNING)   /* Is timer running?    */
 801abe0:	79fa      	ldrb	r2, [r7, #7]
 801abe2:	4910      	ldr	r1, [pc, #64]	; (801ac24 <CoStartTmr+0x70>)
 801abe4:	4613      	mov	r3, r2
 801abe6:	005b      	lsls	r3, r3, #1
 801abe8:	4413      	add	r3, r2
 801abea:	00db      	lsls	r3, r3, #3
 801abec:	440b      	add	r3, r1
 801abee:	3302      	adds	r3, #2
 801abf0:	781b      	ldrb	r3, [r3, #0]
 801abf2:	2b00      	cmp	r3, #0
 801abf4:	d101      	bne.n	801abfa <CoStartTmr+0x46>
    {
        return E_OK;                              /* Yes,do nothing,return OK */
 801abf6:	2300      	movs	r3, #0
 801abf8:	e00e      	b.n	801ac18 <CoStartTmr+0x64>
    }
    
    /* No,set timer status as TMR_STATE_RUNNING */
    TmrTbl[tmrID].tmrState = TMR_STATE_RUNNING; 
 801abfa:	79fa      	ldrb	r2, [r7, #7]
 801abfc:	4909      	ldr	r1, [pc, #36]	; (801ac24 <CoStartTmr+0x70>)
 801abfe:	4613      	mov	r3, r2
 801ac00:	005b      	lsls	r3, r3, #1
 801ac02:	4413      	add	r3, r2
 801ac04:	00db      	lsls	r3, r3, #3
 801ac06:	440b      	add	r3, r1
 801ac08:	3302      	adds	r3, #2
 801ac0a:	2200      	movs	r2, #0
 801ac0c:	701a      	strb	r2, [r3, #0]
    InsertTmrList(tmrID);               /* Insert this timer into timer list  */
 801ac0e:	79fb      	ldrb	r3, [r7, #7]
 801ac10:	4618      	mov	r0, r3
 801ac12:	f7ff fddd 	bl	801a7d0 <InsertTmrList>
    return E_OK;                        /* Return OK                          */
 801ac16:	2300      	movs	r3, #0
}
 801ac18:	4618      	mov	r0, r3
 801ac1a:	3708      	adds	r7, #8
 801ac1c:	46bd      	mov	sp, r7
 801ac1e:	bd80      	pop	{r7, pc}
 801ac20:	2000d770 	.word	0x2000d770
 801ac24:	2000d73c 	.word	0x2000d73c

0801ac28 <CoStopTmr>:
 * @par Description
 * @details    This function is called to stop a timer from counting. 
 *******************************************************************************
 */
StatusType CoStopTmr(OS_TCID tmrID)
{	
 801ac28:	b580      	push	{r7, lr}
 801ac2a:	b082      	sub	sp, #8
 801ac2c:	af00      	add	r7, sp, #0
 801ac2e:	4603      	mov	r3, r0
 801ac30:	71fb      	strb	r3, [r7, #7]
#if CFG_PAR_CHECKOUT_EN >0              /* Check validity of parameter        */
    if(tmrID >= CFG_MAX_TMR)
 801ac32:	79fb      	ldrb	r3, [r7, #7]
 801ac34:	2b01      	cmp	r3, #1
 801ac36:	d901      	bls.n	801ac3c <CoStopTmr+0x14>
    {
        return E_INVALID_ID;
 801ac38:	2301      	movs	r3, #1
 801ac3a:	e027      	b.n	801ac8c <CoStopTmr+0x64>
    }
    if((TmrIDVessel & (1<<tmrID)) == 0)
 801ac3c:	79fb      	ldrb	r3, [r7, #7]
 801ac3e:	2201      	movs	r2, #1
 801ac40:	fa02 f303 	lsl.w	r3, r2, r3
 801ac44:	461a      	mov	r2, r3
 801ac46:	4b13      	ldr	r3, [pc, #76]	; (801ac94 <CoStopTmr+0x6c>)
 801ac48:	681b      	ldr	r3, [r3, #0]
 801ac4a:	4013      	ands	r3, r2
 801ac4c:	2b00      	cmp	r3, #0
 801ac4e:	d101      	bne.n	801ac54 <CoStopTmr+0x2c>
    {
        return E_INVALID_ID;
 801ac50:	2301      	movs	r3, #1
 801ac52:	e01b      	b.n	801ac8c <CoStopTmr+0x64>
    }
#endif
    
    
    if(TmrTbl[tmrID].tmrState == TMR_STATE_STOPPED)/* Does timer stop running?*/
 801ac54:	79fa      	ldrb	r2, [r7, #7]
 801ac56:	4910      	ldr	r1, [pc, #64]	; (801ac98 <CoStopTmr+0x70>)
 801ac58:	4613      	mov	r3, r2
 801ac5a:	005b      	lsls	r3, r3, #1
 801ac5c:	4413      	add	r3, r2
 801ac5e:	00db      	lsls	r3, r3, #3
 801ac60:	440b      	add	r3, r1
 801ac62:	3302      	adds	r3, #2
 801ac64:	781b      	ldrb	r3, [r3, #0]
 801ac66:	2b01      	cmp	r3, #1
 801ac68:	d101      	bne.n	801ac6e <CoStopTmr+0x46>
    {
        return E_OK;                    /* Yes,do nothing,return OK           */
 801ac6a:	2300      	movs	r3, #0
 801ac6c:	e00e      	b.n	801ac8c <CoStopTmr+0x64>
    }
    RemoveTmrList(tmrID);             /* No,remove this timer from timer list */
 801ac6e:	79fb      	ldrb	r3, [r7, #7]
 801ac70:	4618      	mov	r0, r3
 801ac72:	f7ff fe9b 	bl	801a9ac <RemoveTmrList>
    
    /* Set timer status as TMR_STATE_STOPPED  */
    TmrTbl[tmrID].tmrState = TMR_STATE_STOPPED;	
 801ac76:	79fa      	ldrb	r2, [r7, #7]
 801ac78:	4907      	ldr	r1, [pc, #28]	; (801ac98 <CoStopTmr+0x70>)
 801ac7a:	4613      	mov	r3, r2
 801ac7c:	005b      	lsls	r3, r3, #1
 801ac7e:	4413      	add	r3, r2
 801ac80:	00db      	lsls	r3, r3, #3
 801ac82:	440b      	add	r3, r1
 801ac84:	3302      	adds	r3, #2
 801ac86:	2201      	movs	r2, #1
 801ac88:	701a      	strb	r2, [r3, #0]
    return E_OK;                        /* Return OK                          */
 801ac8a:	2300      	movs	r3, #0
}
 801ac8c:	4618      	mov	r0, r3
 801ac8e:	3708      	adds	r7, #8
 801ac90:	46bd      	mov	sp, r7
 801ac92:	bd80      	pop	{r7, pc}
 801ac94:	2000d770 	.word	0x2000d770
 801ac98:	2000d73c 	.word	0x2000d73c

0801ac9c <CoDelTmr>:
 * @par Description
 * @details    This function is called to delete a timer which created before.	
 *******************************************************************************
 */
StatusType CoDelTmr(OS_TCID tmrID)
{
 801ac9c:	b580      	push	{r7, lr}
 801ac9e:	b082      	sub	sp, #8
 801aca0:	af00      	add	r7, sp, #0
 801aca2:	4603      	mov	r3, r0
 801aca4:	71fb      	strb	r3, [r7, #7]
#if CFG_PAR_CHECKOUT_EN >0              /* Check validity of parameter        */
    if(tmrID >= CFG_MAX_TMR)
 801aca6:	79fb      	ldrb	r3, [r7, #7]
 801aca8:	2b01      	cmp	r3, #1
 801acaa:	d901      	bls.n	801acb0 <CoDelTmr+0x14>
    {
        return E_INVALID_ID;
 801acac:	2301      	movs	r3, #1
 801acae:	e026      	b.n	801acfe <CoDelTmr+0x62>
    }
    if( (TmrIDVessel & (1<<tmrID)) == 0)
 801acb0:	79fb      	ldrb	r3, [r7, #7]
 801acb2:	2201      	movs	r2, #1
 801acb4:	fa02 f303 	lsl.w	r3, r2, r3
 801acb8:	461a      	mov	r2, r3
 801acba:	4b13      	ldr	r3, [pc, #76]	; (801ad08 <CoDelTmr+0x6c>)
 801acbc:	681b      	ldr	r3, [r3, #0]
 801acbe:	4013      	ands	r3, r2
 801acc0:	2b00      	cmp	r3, #0
 801acc2:	d101      	bne.n	801acc8 <CoDelTmr+0x2c>
    {
        return E_INVALID_ID;
 801acc4:	2301      	movs	r3, #1
 801acc6:	e01a      	b.n	801acfe <CoDelTmr+0x62>
    }
#endif
	
    if(TmrTbl[tmrID].tmrState == TMR_STATE_RUNNING) /* Is timer running?      */
 801acc8:	79fa      	ldrb	r2, [r7, #7]
 801acca:	4910      	ldr	r1, [pc, #64]	; (801ad0c <CoDelTmr+0x70>)
 801accc:	4613      	mov	r3, r2
 801acce:	005b      	lsls	r3, r3, #1
 801acd0:	4413      	add	r3, r2
 801acd2:	00db      	lsls	r3, r3, #3
 801acd4:	440b      	add	r3, r1
 801acd6:	3302      	adds	r3, #2
 801acd8:	781b      	ldrb	r3, [r3, #0]
 801acda:	2b00      	cmp	r3, #0
 801acdc:	d103      	bne.n	801ace6 <CoDelTmr+0x4a>
    {
        RemoveTmrList(tmrID);         /* Yes,remove this timer from timer list*/
 801acde:	79fb      	ldrb	r3, [r7, #7]
 801ace0:	4618      	mov	r0, r3
 801ace2:	f7ff fe63 	bl	801a9ac <RemoveTmrList>
    }
    TmrIDVessel &=~(1<<tmrID);        /* Release resource that this timer hold*/
 801ace6:	79fb      	ldrb	r3, [r7, #7]
 801ace8:	2201      	movs	r2, #1
 801acea:	fa02 f303 	lsl.w	r3, r2, r3
 801acee:	43db      	mvns	r3, r3
 801acf0:	461a      	mov	r2, r3
 801acf2:	4b05      	ldr	r3, [pc, #20]	; (801ad08 <CoDelTmr+0x6c>)
 801acf4:	681b      	ldr	r3, [r3, #0]
 801acf6:	4013      	ands	r3, r2
 801acf8:	4a03      	ldr	r2, [pc, #12]	; (801ad08 <CoDelTmr+0x6c>)
 801acfa:	6013      	str	r3, [r2, #0]
    return E_OK;                      /* Return OK                            */
 801acfc:	2300      	movs	r3, #0
}
 801acfe:	4618      	mov	r0, r3
 801ad00:	3708      	adds	r7, #8
 801ad02:	46bd      	mov	sp, r7
 801ad04:	bd80      	pop	{r7, pc}
 801ad06:	bf00      	nop
 801ad08:	2000d770 	.word	0x2000d770
 801ad0c:	2000d73c 	.word	0x2000d73c

0801ad10 <CoGetCurTmrCnt>:
 * @par Description
 * @details    This function is called to obtain current counter of specify timer.
 *******************************************************************************
 */
U32 CoGetCurTmrCnt(OS_TCID tmrID,StatusType* perr)
{
 801ad10:	b480      	push	{r7}
 801ad12:	b083      	sub	sp, #12
 801ad14:	af00      	add	r7, sp, #0
 801ad16:	4603      	mov	r3, r0
 801ad18:	6039      	str	r1, [r7, #0]
 801ad1a:	71fb      	strb	r3, [r7, #7]
#if CFG_PAR_CHECKOUT_EN >0              /* Check validity of parameter        */
    if(tmrID >= CFG_MAX_TMR)
 801ad1c:	79fb      	ldrb	r3, [r7, #7]
 801ad1e:	2b01      	cmp	r3, #1
 801ad20:	d904      	bls.n	801ad2c <CoGetCurTmrCnt+0x1c>
    {
        *perr = E_INVALID_ID;
 801ad22:	683b      	ldr	r3, [r7, #0]
 801ad24:	2201      	movs	r2, #1
 801ad26:	701a      	strb	r2, [r3, #0]
        return 0;
 801ad28:	2300      	movs	r3, #0
 801ad2a:	e01a      	b.n	801ad62 <CoGetCurTmrCnt+0x52>
    }
    if((TmrIDVessel & (1<<tmrID)) == 0)
 801ad2c:	79fb      	ldrb	r3, [r7, #7]
 801ad2e:	2201      	movs	r2, #1
 801ad30:	fa02 f303 	lsl.w	r3, r2, r3
 801ad34:	461a      	mov	r2, r3
 801ad36:	4b0e      	ldr	r3, [pc, #56]	; (801ad70 <CoGetCurTmrCnt+0x60>)
 801ad38:	681b      	ldr	r3, [r3, #0]
 801ad3a:	4013      	ands	r3, r2
 801ad3c:	2b00      	cmp	r3, #0
 801ad3e:	d104      	bne.n	801ad4a <CoGetCurTmrCnt+0x3a>
    {
        *perr = E_INVALID_ID;
 801ad40:	683b      	ldr	r3, [r7, #0]
 801ad42:	2201      	movs	r2, #1
 801ad44:	701a      	strb	r2, [r3, #0]
        return 0;
 801ad46:	2300      	movs	r3, #0
 801ad48:	e00b      	b.n	801ad62 <CoGetCurTmrCnt+0x52>
    }
#endif
    *perr = E_OK;
 801ad4a:	683b      	ldr	r3, [r7, #0]
 801ad4c:	2200      	movs	r2, #0
 801ad4e:	701a      	strb	r2, [r3, #0]
    return TmrTbl[tmrID].tmrCnt;        /* Return timer counter               */
 801ad50:	79fa      	ldrb	r2, [r7, #7]
 801ad52:	4908      	ldr	r1, [pc, #32]	; (801ad74 <CoGetCurTmrCnt+0x64>)
 801ad54:	4613      	mov	r3, r2
 801ad56:	005b      	lsls	r3, r3, #1
 801ad58:	4413      	add	r3, r2
 801ad5a:	00db      	lsls	r3, r3, #3
 801ad5c:	440b      	add	r3, r1
 801ad5e:	3304      	adds	r3, #4
 801ad60:	681b      	ldr	r3, [r3, #0]
}
 801ad62:	4618      	mov	r0, r3
 801ad64:	370c      	adds	r7, #12
 801ad66:	46bd      	mov	sp, r7
 801ad68:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ad6c:	4770      	bx	lr
 801ad6e:	bf00      	nop
 801ad70:	2000d770 	.word	0x2000d770
 801ad74:	2000d73c 	.word	0x2000d73c

0801ad78 <CoSetTmrCnt>:
 * @par Description
 * @details    This function is called to set timer counter and reload value.
 *******************************************************************************
 */
StatusType CoSetTmrCnt(OS_TCID tmrID,U32 tmrCnt,U32 tmrReload)
{
 801ad78:	b580      	push	{r7, lr}
 801ad7a:	b084      	sub	sp, #16
 801ad7c:	af00      	add	r7, sp, #0
 801ad7e:	4603      	mov	r3, r0
 801ad80:	60b9      	str	r1, [r7, #8]
 801ad82:	607a      	str	r2, [r7, #4]
 801ad84:	73fb      	strb	r3, [r7, #15]
#if CFG_PAR_CHECKOUT_EN >0              /* Check validity of parameter        */
    if(tmrID >= CFG_MAX_TMR)
 801ad86:	7bfb      	ldrb	r3, [r7, #15]
 801ad88:	2b01      	cmp	r3, #1
 801ad8a:	d901      	bls.n	801ad90 <CoSetTmrCnt+0x18>
    {
        return E_INVALID_ID;
 801ad8c:	2301      	movs	r3, #1
 801ad8e:	e033      	b.n	801adf8 <CoSetTmrCnt+0x80>
    }
    if( (TmrIDVessel & (1<<tmrID)) == 0)
 801ad90:	7bfb      	ldrb	r3, [r7, #15]
 801ad92:	2201      	movs	r2, #1
 801ad94:	fa02 f303 	lsl.w	r3, r2, r3
 801ad98:	461a      	mov	r2, r3
 801ad9a:	4b19      	ldr	r3, [pc, #100]	; (801ae00 <CoSetTmrCnt+0x88>)
 801ad9c:	681b      	ldr	r3, [r3, #0]
 801ad9e:	4013      	ands	r3, r2
 801ada0:	2b00      	cmp	r3, #0
 801ada2:	d101      	bne.n	801ada8 <CoSetTmrCnt+0x30>
    {
        return E_INVALID_ID;
 801ada4:	2301      	movs	r3, #1
 801ada6:	e027      	b.n	801adf8 <CoSetTmrCnt+0x80>
    }
#endif
    TmrTbl[tmrID].tmrCnt    = tmrCnt; /* Reset timer counter and reload value */
 801ada8:	7bfa      	ldrb	r2, [r7, #15]
 801adaa:	4916      	ldr	r1, [pc, #88]	; (801ae04 <CoSetTmrCnt+0x8c>)
 801adac:	4613      	mov	r3, r2
 801adae:	005b      	lsls	r3, r3, #1
 801adb0:	4413      	add	r3, r2
 801adb2:	00db      	lsls	r3, r3, #3
 801adb4:	440b      	add	r3, r1
 801adb6:	3304      	adds	r3, #4
 801adb8:	68ba      	ldr	r2, [r7, #8]
 801adba:	601a      	str	r2, [r3, #0]
    TmrTbl[tmrID].tmrReload = tmrReload;
 801adbc:	7bfa      	ldrb	r2, [r7, #15]
 801adbe:	4911      	ldr	r1, [pc, #68]	; (801ae04 <CoSetTmrCnt+0x8c>)
 801adc0:	4613      	mov	r3, r2
 801adc2:	005b      	lsls	r3, r3, #1
 801adc4:	4413      	add	r3, r2
 801adc6:	00db      	lsls	r3, r3, #3
 801adc8:	440b      	add	r3, r1
 801adca:	3308      	adds	r3, #8
 801adcc:	687a      	ldr	r2, [r7, #4]
 801adce:	601a      	str	r2, [r3, #0]
    								
    if(TmrTbl[tmrID].tmrState == TMR_STATE_RUNNING)   /* Is timer running?    */
 801add0:	7bfa      	ldrb	r2, [r7, #15]
 801add2:	490c      	ldr	r1, [pc, #48]	; (801ae04 <CoSetTmrCnt+0x8c>)
 801add4:	4613      	mov	r3, r2
 801add6:	005b      	lsls	r3, r3, #1
 801add8:	4413      	add	r3, r2
 801adda:	00db      	lsls	r3, r3, #3
 801addc:	440b      	add	r3, r1
 801adde:	3302      	adds	r3, #2
 801ade0:	781b      	ldrb	r3, [r3, #0]
 801ade2:	2b00      	cmp	r3, #0
 801ade4:	d107      	bne.n	801adf6 <CoSetTmrCnt+0x7e>
    {
        RemoveTmrList(tmrID);           /* Yes,reorder timer in timer list    */
 801ade6:	7bfb      	ldrb	r3, [r7, #15]
 801ade8:	4618      	mov	r0, r3
 801adea:	f7ff fddf 	bl	801a9ac <RemoveTmrList>
        InsertTmrList(tmrID);	
 801adee:	7bfb      	ldrb	r3, [r7, #15]
 801adf0:	4618      	mov	r0, r3
 801adf2:	f7ff fced 	bl	801a7d0 <InsertTmrList>
    }
    return E_OK;                        /* Return OK                          */
 801adf6:	2300      	movs	r3, #0
}
 801adf8:	4618      	mov	r0, r3
 801adfa:	3710      	adds	r7, #16
 801adfc:	46bd      	mov	sp, r7
 801adfe:	bd80      	pop	{r7, pc}
 801ae00:	2000d770 	.word	0x2000d770
 801ae04:	2000d73c 	.word	0x2000d73c

0801ae08 <TmrDispose>:
 * @par Description
 * @details    This function is called to dispose timer counter.
 *******************************************************************************
 */
void TmrDispose(void)
{
 801ae08:	b580      	push	{r7, lr}
 801ae0a:	b082      	sub	sp, #8
 801ae0c:	af00      	add	r7, sp, #0
    P_TmrCtrl	pTmr;
    
    pTmr = TmrList;                     /* Get first item of timer list       */
 801ae0e:	4b1b      	ldr	r3, [pc, #108]	; (801ae7c <TmrDispose+0x74>)
 801ae10:	681b      	ldr	r3, [r3, #0]
 801ae12:	607b      	str	r3, [r7, #4]
    while((pTmr != Co_NULL) && (pTmr->tmrCnt == 0) )
 801ae14:	e027      	b.n	801ae66 <TmrDispose+0x5e>
    {	
        if(pTmr->tmrType == TMR_TYPE_ONE_SHOT)    /* Is a One-shot timer?     */
 801ae16:	687b      	ldr	r3, [r7, #4]
 801ae18:	785b      	ldrb	r3, [r3, #1]
 801ae1a:	2b00      	cmp	r3, #0
 801ae1c:	d10b      	bne.n	801ae36 <TmrDispose+0x2e>
        {
            /* Yes,remove this timer from timer list                          */
            RemoveTmrList(pTmr->tmrID);
 801ae1e:	687b      	ldr	r3, [r7, #4]
 801ae20:	781b      	ldrb	r3, [r3, #0]
 801ae22:	4618      	mov	r0, r3
 801ae24:	f7ff fdc2 	bl	801a9ac <RemoveTmrList>
            
            /* Set timer status as TMR_STATE_STOPPED                          */
            pTmr->tmrState = TMR_STATE_STOPPED;
 801ae28:	687b      	ldr	r3, [r7, #4]
 801ae2a:	2201      	movs	r2, #1
 801ae2c:	709a      	strb	r2, [r3, #2]
            (pTmr->tmrCallBack)();          /* Call timer callback function   */
 801ae2e:	687b      	ldr	r3, [r7, #4]
 801ae30:	68db      	ldr	r3, [r3, #12]
 801ae32:	4798      	blx	r3
 801ae34:	e014      	b.n	801ae60 <TmrDispose+0x58>
        }
        else if(pTmr->tmrType == TMR_TYPE_PERIODIC)   /* Is a periodic timer? */
 801ae36:	687b      	ldr	r3, [r7, #4]
 801ae38:	785b      	ldrb	r3, [r3, #1]
 801ae3a:	2b01      	cmp	r3, #1
 801ae3c:	d110      	bne.n	801ae60 <TmrDispose+0x58>
        {
            /* Yes,remove this timer from timer list                          */
            RemoveTmrList(pTmr->tmrID); 
 801ae3e:	687b      	ldr	r3, [r7, #4]
 801ae40:	781b      	ldrb	r3, [r3, #0]
 801ae42:	4618      	mov	r0, r3
 801ae44:	f7ff fdb2 	bl	801a9ac <RemoveTmrList>
            pTmr->tmrCnt = pTmr->tmrReload;   /* Reset timer tick             */
 801ae48:	687b      	ldr	r3, [r7, #4]
 801ae4a:	689a      	ldr	r2, [r3, #8]
 801ae4c:	687b      	ldr	r3, [r7, #4]
 801ae4e:	605a      	str	r2, [r3, #4]
            InsertTmrList(pTmr->tmrID);       /* Insert timer into timer list */
 801ae50:	687b      	ldr	r3, [r7, #4]
 801ae52:	781b      	ldrb	r3, [r3, #0]
 801ae54:	4618      	mov	r0, r3
 801ae56:	f7ff fcbb 	bl	801a7d0 <InsertTmrList>
            (pTmr->tmrCallBack)();            /* Call timer callback function */
 801ae5a:	687b      	ldr	r3, [r7, #4]
 801ae5c:	68db      	ldr	r3, [r3, #12]
 801ae5e:	4798      	blx	r3
        }
        pTmr = TmrList;	                      /* Get first item of timer list */
 801ae60:	4b06      	ldr	r3, [pc, #24]	; (801ae7c <TmrDispose+0x74>)
 801ae62:	681b      	ldr	r3, [r3, #0]
 801ae64:	607b      	str	r3, [r7, #4]
    while((pTmr != Co_NULL) && (pTmr->tmrCnt == 0) )
 801ae66:	687b      	ldr	r3, [r7, #4]
 801ae68:	2b00      	cmp	r3, #0
 801ae6a:	d003      	beq.n	801ae74 <TmrDispose+0x6c>
 801ae6c:	687b      	ldr	r3, [r7, #4]
 801ae6e:	685b      	ldr	r3, [r3, #4]
 801ae70:	2b00      	cmp	r3, #0
 801ae72:	d0d0      	beq.n	801ae16 <TmrDispose+0xe>
    }
}
 801ae74:	bf00      	nop
 801ae76:	3708      	adds	r7, #8
 801ae78:	46bd      	mov	sp, r7
 801ae7a:	bd80      	pop	{r7, pc}
 801ae7c:	2000d76c 	.word	0x2000d76c

0801ae80 <isr_TmrDispose>:
 * @par Description
 * @details    This function is called to dispose timer counter.
 *******************************************************************************
 */
void isr_TmrDispose(void)
{
 801ae80:	b580      	push	{r7, lr}
 801ae82:	af00      	add	r7, sp, #0
    if(OSSchedLock > 1)                 /* Is schedule lock?                  */
 801ae84:	4b07      	ldr	r3, [pc, #28]	; (801aea4 <isr_TmrDispose+0x24>)
 801ae86:	781b      	ldrb	r3, [r3, #0]
 801ae88:	b2db      	uxtb	r3, r3
 801ae8a:	2b01      	cmp	r3, #1
 801ae8c:	d906      	bls.n	801ae9c <isr_TmrDispose+0x1c>
    {
        IsrReq = Co_TRUE;
 801ae8e:	4b06      	ldr	r3, [pc, #24]	; (801aea8 <isr_TmrDispose+0x28>)
 801ae90:	2201      	movs	r2, #1
 801ae92:	701a      	strb	r2, [r3, #0]
        TimerReq  = Co_TRUE;               /* Yes,set timer request true         */
 801ae94:	4b05      	ldr	r3, [pc, #20]	; (801aeac <isr_TmrDispose+0x2c>)
 801ae96:	2201      	movs	r2, #1
 801ae98:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        TmrDispose();                   /* No,call handler                    */
    }
}	 
 801ae9a:	e001      	b.n	801aea0 <isr_TmrDispose+0x20>
        TmrDispose();                   /* No,call handler                    */
 801ae9c:	f7ff ffb4 	bl	801ae08 <TmrDispose>
}	 
 801aea0:	bf00      	nop
 801aea2:	bd80      	pop	{r7, pc}
 801aea4:	20003749 	.word	0x20003749
 801aea8:	2000d594 	.word	0x2000d594
 801aeac:	2000d596 	.word	0x2000d596

0801aeb0 <CoTickToTime>:
 * @details    This function is called to convert specify ticks to time format.	  	 	
 *******************************************************************************				
 */
#if CFG_TICK_TO_TIME_EN > 0
void CoTickToTime(U32 ticks,U8* hour,U8* minute,U8* sec,U16* millsec)
{
 801aeb0:	b480      	push	{r7}
 801aeb2:	b087      	sub	sp, #28
 801aeb4:	af00      	add	r7, sp, #0
 801aeb6:	60f8      	str	r0, [r7, #12]
 801aeb8:	60b9      	str	r1, [r7, #8]
 801aeba:	607a      	str	r2, [r7, #4]
 801aebc:	603b      	str	r3, [r7, #0]
    U32 totalTime;
    
    /* Convert ticks to time*/
    totalTime = ticks * (1000/CFG_SYSTICK_FREQ);
 801aebe:	68fa      	ldr	r2, [r7, #12]
 801aec0:	4613      	mov	r3, r2
 801aec2:	009b      	lsls	r3, r3, #2
 801aec4:	4413      	add	r3, r2
 801aec6:	005b      	lsls	r3, r3, #1
 801aec8:	617b      	str	r3, [r7, #20]
    *millsec  = totalTime%1000;
 801aeca:	697a      	ldr	r2, [r7, #20]
 801aecc:	4b20      	ldr	r3, [pc, #128]	; (801af50 <CoTickToTime+0xa0>)
 801aece:	fba3 1302 	umull	r1, r3, r3, r2
 801aed2:	099b      	lsrs	r3, r3, #6
 801aed4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 801aed8:	fb01 f303 	mul.w	r3, r1, r3
 801aedc:	1ad3      	subs	r3, r2, r3
 801aede:	b29a      	uxth	r2, r3
 801aee0:	6a3b      	ldr	r3, [r7, #32]
 801aee2:	801a      	strh	r2, [r3, #0]
    totalTime = totalTime/1000;
 801aee4:	697b      	ldr	r3, [r7, #20]
 801aee6:	4a1a      	ldr	r2, [pc, #104]	; (801af50 <CoTickToTime+0xa0>)
 801aee8:	fba2 2303 	umull	r2, r3, r2, r3
 801aeec:	099b      	lsrs	r3, r3, #6
 801aeee:	617b      	str	r3, [r7, #20]
    *sec      = totalTime%60;
 801aef0:	6979      	ldr	r1, [r7, #20]
 801aef2:	4b18      	ldr	r3, [pc, #96]	; (801af54 <CoTickToTime+0xa4>)
 801aef4:	fba3 2301 	umull	r2, r3, r3, r1
 801aef8:	095a      	lsrs	r2, r3, #5
 801aefa:	4613      	mov	r3, r2
 801aefc:	011b      	lsls	r3, r3, #4
 801aefe:	1a9b      	subs	r3, r3, r2
 801af00:	009b      	lsls	r3, r3, #2
 801af02:	1aca      	subs	r2, r1, r3
 801af04:	b2d2      	uxtb	r2, r2
 801af06:	683b      	ldr	r3, [r7, #0]
 801af08:	701a      	strb	r2, [r3, #0]
    totalTime = totalTime/60;
 801af0a:	697b      	ldr	r3, [r7, #20]
 801af0c:	4a11      	ldr	r2, [pc, #68]	; (801af54 <CoTickToTime+0xa4>)
 801af0e:	fba2 2303 	umull	r2, r3, r2, r3
 801af12:	095b      	lsrs	r3, r3, #5
 801af14:	617b      	str	r3, [r7, #20]
    *minute   = totalTime%60;
 801af16:	6979      	ldr	r1, [r7, #20]
 801af18:	4b0e      	ldr	r3, [pc, #56]	; (801af54 <CoTickToTime+0xa4>)
 801af1a:	fba3 2301 	umull	r2, r3, r3, r1
 801af1e:	095a      	lsrs	r2, r3, #5
 801af20:	4613      	mov	r3, r2
 801af22:	011b      	lsls	r3, r3, #4
 801af24:	1a9b      	subs	r3, r3, r2
 801af26:	009b      	lsls	r3, r3, #2
 801af28:	1aca      	subs	r2, r1, r3
 801af2a:	b2d2      	uxtb	r2, r2
 801af2c:	687b      	ldr	r3, [r7, #4]
 801af2e:	701a      	strb	r2, [r3, #0]
    totalTime = totalTime/60;
 801af30:	697b      	ldr	r3, [r7, #20]
 801af32:	4a08      	ldr	r2, [pc, #32]	; (801af54 <CoTickToTime+0xa4>)
 801af34:	fba2 2303 	umull	r2, r3, r2, r3
 801af38:	095b      	lsrs	r3, r3, #5
 801af3a:	617b      	str	r3, [r7, #20]
    *hour     = totalTime;		
 801af3c:	697b      	ldr	r3, [r7, #20]
 801af3e:	b2da      	uxtb	r2, r3
 801af40:	68bb      	ldr	r3, [r7, #8]
 801af42:	701a      	strb	r2, [r3, #0]
}
 801af44:	bf00      	nop
 801af46:	371c      	adds	r7, #28
 801af48:	46bd      	mov	sp, r7
 801af4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801af4e:	4770      	bx	lr
 801af50:	10624dd3 	.word	0x10624dd3
 801af54:	88888889 	.word	0x88888889

0801af58 <CoTimeToTick>:
 * @details    This function is called to convert specify time to tick number. 		 
 *******************************************************************************
 */
#if CFG_TIME_TO_TICK_EN > 0
StatusType  CoTimeToTick(U8 hour,U8 minute,U8 sec,U16 millsec,U32* ticks)
{
 801af58:	b490      	push	{r4, r7}
 801af5a:	b082      	sub	sp, #8
 801af5c:	af00      	add	r7, sp, #0
 801af5e:	4604      	mov	r4, r0
 801af60:	4608      	mov	r0, r1
 801af62:	4611      	mov	r1, r2
 801af64:	461a      	mov	r2, r3
 801af66:	4623      	mov	r3, r4
 801af68:	71fb      	strb	r3, [r7, #7]
 801af6a:	4603      	mov	r3, r0
 801af6c:	71bb      	strb	r3, [r7, #6]
 801af6e:	460b      	mov	r3, r1
 801af70:	717b      	strb	r3, [r7, #5]
 801af72:	4613      	mov	r3, r2
 801af74:	807b      	strh	r3, [r7, #2]
#if CFG_PAR_CHECKOUT_EN >0
    /* Validate arguments to be within range */
    if((minute > 59)||(sec > 59)||(millsec > 999))
 801af76:	79bb      	ldrb	r3, [r7, #6]
 801af78:	2b3b      	cmp	r3, #59	; 0x3b
 801af7a:	d806      	bhi.n	801af8a <CoTimeToTick+0x32>
 801af7c:	797b      	ldrb	r3, [r7, #5]
 801af7e:	2b3b      	cmp	r3, #59	; 0x3b
 801af80:	d803      	bhi.n	801af8a <CoTimeToTick+0x32>
 801af82:	887b      	ldrh	r3, [r7, #2]
 801af84:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801af88:	d301      	bcc.n	801af8e <CoTimeToTick+0x36>
        return E_INVALID_PARAMETER;
 801af8a:	2302      	movs	r3, #2
 801af8c:	e020      	b.n	801afd0 <CoTimeToTick+0x78>
#endif

    /* Convert time to ticks */
    *ticks = ((hour*3600) + (minute*60) + (sec)) * (CFG_SYSTICK_FREQ)\
 801af8e:	79fb      	ldrb	r3, [r7, #7]
 801af90:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 801af94:	fb02 f103 	mul.w	r1, r2, r3
 801af98:	79ba      	ldrb	r2, [r7, #6]
 801af9a:	4613      	mov	r3, r2
 801af9c:	011b      	lsls	r3, r3, #4
 801af9e:	1a9b      	subs	r3, r3, r2
 801afa0:	009b      	lsls	r3, r3, #2
 801afa2:	18ca      	adds	r2, r1, r3
 801afa4:	797b      	ldrb	r3, [r7, #5]
 801afa6:	4413      	add	r3, r2
 801afa8:	2264      	movs	r2, #100	; 0x64
 801afaa:	fb02 f203 	mul.w	r2, r2, r3
              + (millsec*CFG_SYSTICK_FREQ + 500)/1000;
 801afae:	887b      	ldrh	r3, [r7, #2]
 801afb0:	2164      	movs	r1, #100	; 0x64
 801afb2:	fb01 f303 	mul.w	r3, r1, r3
 801afb6:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 801afba:	4908      	ldr	r1, [pc, #32]	; (801afdc <CoTimeToTick+0x84>)
 801afbc:	fb81 0103 	smull	r0, r1, r1, r3
 801afc0:	1189      	asrs	r1, r1, #6
 801afc2:	17db      	asrs	r3, r3, #31
 801afc4:	1acb      	subs	r3, r1, r3
 801afc6:	4413      	add	r3, r2
 801afc8:	461a      	mov	r2, r3
    *ticks = ((hour*3600) + (minute*60) + (sec)) * (CFG_SYSTICK_FREQ)\
 801afca:	693b      	ldr	r3, [r7, #16]
 801afcc:	601a      	str	r2, [r3, #0]
    return E_OK;
 801afce:	2300      	movs	r3, #0
}
 801afd0:	4618      	mov	r0, r3
 801afd2:	3708      	adds	r7, #8
 801afd4:	46bd      	mov	sp, r7
 801afd6:	bc90      	pop	{r4, r7}
 801afd8:	4770      	bx	lr
 801afda:	bf00      	nop
 801afdc:	10624dd3 	.word	0x10624dd3

0801afe0 <_cogui_app_init>:
 * @param[out] None
 * @retval     None 
 *******************************************************************************
 */
void _cogui_app_init(cogui_app_t *app)
{
 801afe0:	b580      	push	{r7, lr}
 801afe2:	b082      	sub	sp, #8
 801afe4:	af00      	add	r7, sp, #0
 801afe6:	6078      	str	r0, [r7, #4]
    /* set all feild to zero first */
    cogui_memset(app, 0, sizeof(cogui_app_t));
 801afe8:	f04f 0258 	mov.w	r2, #88	; 0x58
 801afec:	f04f 0300 	mov.w	r3, #0
 801aff0:	2100      	movs	r1, #0
 801aff2:	6878      	ldr	r0, [r7, #4]
 801aff4:	f001 fd1c 	bl	801ca30 <cogui_memset>

    /* set app default event handler */
	app->handler = cogui_app_event_handler;
 801aff8:	687b      	ldr	r3, [r7, #4]
 801affa:	4a03      	ldr	r2, [pc, #12]	; (801b008 <_cogui_app_init+0x28>)
 801affc:	651a      	str	r2, [r3, #80]	; 0x50
}
 801affe:	bf00      	nop
 801b000:	3708      	adds	r7, #8
 801b002:	46bd      	mov	sp, r7
 801b004:	bd80      	pop	{r7, pc}
 801b006:	bf00      	nop
 801b008:	0801b3d5 	.word	0x0801b3d5

0801b00c <cogui_app_create>:
 * @retval     *app      The created application pointer. 
 * @retval     Co_NULL   If sync to server failed.
 *******************************************************************************
 */
cogui_app_t *cogui_app_create(char *title)
{
 801b00c:	b580      	push	{r7, lr}
 801b00e:	b092      	sub	sp, #72	; 0x48
 801b010:	af00      	add	r7, sp, #0
 801b012:	6078      	str	r0, [r7, #4]
    cogui_app_t *app;
    cogui_app_t *srv_app;
    OS_TID tid = CoGetCurTaskID();
 801b014:	f7ff f92e 	bl	801a274 <CoGetCurTaskID>
 801b018:	4603      	mov	r3, r0
 801b01a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    struct cogui_event event;

    COGUI_ASSERT(tid != 0);
 801b01e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801b022:	2b00      	cmp	r3, #0
 801b024:	d104      	bne.n	801b030 <cogui_app_create+0x24>
 801b026:	2231      	movs	r2, #49	; 0x31
 801b028:	4932      	ldr	r1, [pc, #200]	; (801b0f4 <cogui_app_create+0xe8>)
 801b02a:	4833      	ldr	r0, [pc, #204]	; (801b0f8 <cogui_app_create+0xec>)
 801b02c:	f002 f8fe 	bl	801d22c <cogui_assert_handler>
    COGUI_ASSERT(title != Co_NULL);
 801b030:	687b      	ldr	r3, [r7, #4]
 801b032:	2b00      	cmp	r3, #0
 801b034:	d104      	bne.n	801b040 <cogui_app_create+0x34>
 801b036:	2232      	movs	r2, #50	; 0x32
 801b038:	492e      	ldr	r1, [pc, #184]	; (801b0f4 <cogui_app_create+0xe8>)
 801b03a:	4830      	ldr	r0, [pc, #192]	; (801b0fc <cogui_app_create+0xf0>)
 801b03c:	f002 f8f6 	bl	801d22c <cogui_assert_handler>

    app = cogui_malloc(sizeof(cogui_app_t));
 801b040:	2058      	movs	r0, #88	; 0x58
 801b042:	f001 fbf3 	bl	801c82c <cogui_malloc>
 801b046:	6438      	str	r0, [r7, #64]	; 0x40
    if (app == Co_NULL)
 801b048:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801b04a:	2b00      	cmp	r3, #0
 801b04c:	d101      	bne.n	801b052 <cogui_app_create+0x46>
        return Co_NULL;
 801b04e:	2300      	movs	r3, #0
 801b050:	e04b      	b.n	801b0ea <cogui_app_create+0xde>
    
    _cogui_app_init(app);
 801b052:	6c38      	ldr	r0, [r7, #64]	; 0x40
 801b054:	f7ff ffc4 	bl	801afe0 <_cogui_app_init>

    /* filled meta data */
    app->tid = tid;
 801b058:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801b05a:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 801b05e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    app->name = cogui_strdup((char *)title);
 801b062:	6878      	ldr	r0, [r7, #4]
 801b064:	f001 fdf2 	bl	801cc4c <cogui_strdup>
 801b068:	4602      	mov	r2, r0
 801b06a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801b06c:	605a      	str	r2, [r3, #4]
    app->mq = CoCreateMbox(EVENT_SORT_TYPE_PRIO);
 801b06e:	2002      	movs	r0, #2
 801b070:	f7fd fc58 	bl	8018924 <CoCreateMbox>
 801b074:	4603      	mov	r3, r0
 801b076:	461a      	mov	r2, r3
 801b078:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801b07a:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

    srv_app = cogui_get_server();
 801b07e:	f001 fba5 	bl	801c7cc <cogui_get_server>
 801b082:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(srv_app == Co_NULL) {
 801b084:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801b086:	2b00      	cmp	r3, #0
 801b088:	d10c      	bne.n	801b0a4 <cogui_app_create+0x98>

        /* if we are creating server, just return here */
        TCBTbl[tid].userData = app;
 801b08a:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 801b08e:	491c      	ldr	r1, [pc, #112]	; (801b100 <cogui_app_create+0xf4>)
 801b090:	4613      	mov	r3, r2
 801b092:	005b      	lsls	r3, r3, #1
 801b094:	4413      	add	r3, r2
 801b096:	011b      	lsls	r3, r3, #4
 801b098:	440b      	add	r3, r1
 801b09a:	332c      	adds	r3, #44	; 0x2c
 801b09c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801b09e:	601a      	str	r2, [r3, #0]
        return app;
 801b0a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801b0a2:	e022      	b.n	801b0ea <cogui_app_create+0xde>
    }
	
    /* if server is already created, sync with it */
    COGUI_EVENT_INIT(&event, COGUI_EVENT_APP_CREATE);
 801b0a4:	2300      	movs	r3, #0
 801b0a6:	723b      	strb	r3, [r7, #8]
 801b0a8:	f000 f97c 	bl	801b3a4 <cogui_app_self>
 801b0ac:	4603      	mov	r3, r0
 801b0ae:	60fb      	str	r3, [r7, #12]
 801b0b0:	2300      	movs	r3, #0
 801b0b2:	743b      	strb	r3, [r7, #16]
    event.app = app;
 801b0b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801b0b6:	617b      	str	r3, [r7, #20]

    /* if server ack OK, return here */
    if(cogui_server_post_event_sync(&event) == GUI_E_OK) {
 801b0b8:	f107 0308 	add.w	r3, r7, #8
 801b0bc:	4618      	mov	r0, r3
 801b0be:	f001 fb6b 	bl	801c798 <cogui_server_post_event_sync>
 801b0c2:	4603      	mov	r3, r0
 801b0c4:	2b17      	cmp	r3, #23
 801b0c6:	d10c      	bne.n	801b0e2 <cogui_app_create+0xd6>
        TCBTbl[tid].userData = app;
 801b0c8:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 801b0cc:	490c      	ldr	r1, [pc, #48]	; (801b100 <cogui_app_create+0xf4>)
 801b0ce:	4613      	mov	r3, r2
 801b0d0:	005b      	lsls	r3, r3, #1
 801b0d2:	4413      	add	r3, r2
 801b0d4:	011b      	lsls	r3, r3, #4
 801b0d6:	440b      	add	r3, r1
 801b0d8:	332c      	adds	r3, #44	; 0x2c
 801b0da:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801b0dc:	601a      	str	r2, [r3, #0]
        return app;
 801b0de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801b0e0:	e003      	b.n	801b0ea <cogui_app_create+0xde>
    }

    /* if server not ack OK, free pointer and return Co_NULL */
    cogui_free(app);
 801b0e2:	6c38      	ldr	r0, [r7, #64]	; 0x40
 801b0e4:	f001 fbba 	bl	801c85c <cogui_free>
    return Co_NULL;
 801b0e8:	2300      	movs	r3, #0
}
 801b0ea:	4618      	mov	r0, r3
 801b0ec:	3748      	adds	r7, #72	; 0x48
 801b0ee:	46bd      	mov	sp, r7
 801b0f0:	bd80      	pop	{r7, pc}
 801b0f2:	bf00      	nop
 801b0f4:	08022be8 	.word	0x08022be8
 801b0f8:	08022b64 	.word	0x08022b64
 801b0fc:	08022b70 	.word	0x08022b70
 801b100:	2000d598 	.word	0x2000d598

0801b104 <cogui_app_delete>:
 * @param[out] None
 * @retval     None
 *******************************************************************************
 */
void cogui_app_delete(cogui_app_t *app)
{
 801b104:	b580      	push	{r7, lr}
 801b106:	b090      	sub	sp, #64	; 0x40
 801b108:	af00      	add	r7, sp, #0
 801b10a:	6078      	str	r0, [r7, #4]
    COGUI_ASSERT(app != Co_NULL);
 801b10c:	687b      	ldr	r3, [r7, #4]
 801b10e:	2b00      	cmp	r3, #0
 801b110:	d104      	bne.n	801b11c <cogui_app_delete+0x18>
 801b112:	2260      	movs	r2, #96	; 0x60
 801b114:	4928      	ldr	r1, [pc, #160]	; (801b1b8 <cogui_app_delete+0xb4>)
 801b116:	4829      	ldr	r0, [pc, #164]	; (801b1bc <cogui_app_delete+0xb8>)
 801b118:	f002 f888 	bl	801d22c <cogui_assert_handler>
    COGUI_ASSERT(app->tid);
 801b11c:	687b      	ldr	r3, [r7, #4]
 801b11e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801b122:	2b00      	cmp	r3, #0
 801b124:	d104      	bne.n	801b130 <cogui_app_delete+0x2c>
 801b126:	2261      	movs	r2, #97	; 0x61
 801b128:	4923      	ldr	r1, [pc, #140]	; (801b1b8 <cogui_app_delete+0xb4>)
 801b12a:	4825      	ldr	r0, [pc, #148]	; (801b1c0 <cogui_app_delete+0xbc>)
 801b12c:	f002 f87e 	bl	801d22c <cogui_assert_handler>
    COGUI_ASSERT(app->mq);
 801b130:	687b      	ldr	r3, [r7, #4]
 801b132:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 801b136:	2b00      	cmp	r3, #0
 801b138:	d104      	bne.n	801b144 <cogui_app_delete+0x40>
 801b13a:	2262      	movs	r2, #98	; 0x62
 801b13c:	491e      	ldr	r1, [pc, #120]	; (801b1b8 <cogui_app_delete+0xb4>)
 801b13e:	4821      	ldr	r0, [pc, #132]	; (801b1c4 <cogui_app_delete+0xc0>)
 801b140:	f002 f874 	bl	801d22c <cogui_assert_handler>

    cogui_app_t *srv_app;
    struct cogui_event event;

    /* free application name buffer */
    cogui_free(app->name);
 801b144:	687b      	ldr	r3, [r7, #4]
 801b146:	685b      	ldr	r3, [r3, #4]
 801b148:	4618      	mov	r0, r3
 801b14a:	f001 fb87 	bl	801c85c <cogui_free>
    app->name = Co_NULL;
 801b14e:	687b      	ldr	r3, [r7, #4]
 801b150:	2200      	movs	r2, #0
 801b152:	605a      	str	r2, [r3, #4]
	
    /* free event buffer */
    CoDelMbox(app->mq, OPT_DEL_ANYWAY);
 801b154:	687b      	ldr	r3, [r7, #4]
 801b156:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 801b15a:	2101      	movs	r1, #1
 801b15c:	4618      	mov	r0, r3
 801b15e:	f7fd fbfb 	bl	8018958 <CoDelMbox>
    TCBTbl[app->tid].userData = 0;
 801b162:	687b      	ldr	r3, [r7, #4]
 801b164:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801b168:	4619      	mov	r1, r3
 801b16a:	4a17      	ldr	r2, [pc, #92]	; (801b1c8 <cogui_app_delete+0xc4>)
 801b16c:	460b      	mov	r3, r1
 801b16e:	005b      	lsls	r3, r3, #1
 801b170:	440b      	add	r3, r1
 801b172:	011b      	lsls	r3, r3, #4
 801b174:	4413      	add	r3, r2
 801b176:	332c      	adds	r3, #44	; 0x2c
 801b178:	2200      	movs	r2, #0
 801b17a:	601a      	str	r2, [r3, #0]
	
    /* we should sync to server */
    srv_app = cogui_get_server();
 801b17c:	f001 fb26 	bl	801c7cc <cogui_get_server>
 801b180:	63f8      	str	r0, [r7, #60]	; 0x3c
    COGUI_EVENT_INIT(&event, COGUI_EVENT_APP_DELE);
 801b182:	2301      	movs	r3, #1
 801b184:	723b      	strb	r3, [r7, #8]
 801b186:	f000 f90d 	bl	801b3a4 <cogui_app_self>
 801b18a:	4603      	mov	r3, r0
 801b18c:	60fb      	str	r3, [r7, #12]
 801b18e:	2300      	movs	r3, #0
 801b190:	743b      	strb	r3, [r7, #16]
    event.app = app;
 801b192:	687b      	ldr	r3, [r7, #4]
 801b194:	617b      	str	r3, [r7, #20]

    /* if server not ack OK, just return */
    if(cogui_send_sync(srv_app, &event) != GUI_E_OK) {
 801b196:	f107 0308 	add.w	r3, r7, #8
 801b19a:	4619      	mov	r1, r3
 801b19c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801b19e:	f001 fbbf 	bl	801c920 <cogui_send_sync>
 801b1a2:	4603      	mov	r3, r0
 801b1a4:	2b17      	cmp	r3, #23
 801b1a6:	d103      	bne.n	801b1b0 <cogui_app_delete+0xac>
       return;
    }
	
    /* if server ack OK, free application buffer */
	cogui_free(app);
 801b1a8:	6878      	ldr	r0, [r7, #4]
 801b1aa:	f001 fb57 	bl	801c85c <cogui_free>
 801b1ae:	e000      	b.n	801b1b2 <cogui_app_delete+0xae>
       return;
 801b1b0:	bf00      	nop
}
 801b1b2:	3740      	adds	r7, #64	; 0x40
 801b1b4:	46bd      	mov	sp, r7
 801b1b6:	bd80      	pop	{r7, pc}
 801b1b8:	08022bfc 	.word	0x08022bfc
 801b1bc:	08022b84 	.word	0x08022b84
 801b1c0:	08022b94 	.word	0x08022b94
 801b1c4:	08022ba0 	.word	0x08022ba0
 801b1c8:	2000d598 	.word	0x2000d598

0801b1cc <_cogui_app_event_loop>:
 * @param[out] None
 * @retval     None
 *******************************************************************************
 */
static void _cogui_app_event_loop(cogui_app_t *app)
{
 801b1cc:	b580      	push	{r7, lr}
 801b1ce:	b084      	sub	sp, #16
 801b1d0:	af00      	add	r7, sp, #0
 801b1d2:	6078      	str	r0, [r7, #4]
    StatusType  result;
    co_uint16_t current_ref;
    struct cogui_event *event;

    event = (struct cogui_event *)app->event_buffer;
 801b1d4:	687b      	ldr	r3, [r7, #4]
 801b1d6:	3314      	adds	r3, #20
 801b1d8:	60fb      	str	r3, [r7, #12]

    current_ref = ++app->ref_cnt;
 801b1da:	687b      	ldr	r3, [r7, #4]
 801b1dc:	899b      	ldrh	r3, [r3, #12]
 801b1de:	3301      	adds	r3, #1
 801b1e0:	b29a      	uxth	r2, r3
 801b1e2:	687b      	ldr	r3, [r7, #4]
 801b1e4:	819a      	strh	r2, [r3, #12]
 801b1e6:	687b      	ldr	r3, [r7, #4]
 801b1e8:	899b      	ldrh	r3, [r3, #12]
 801b1ea:	817b      	strh	r3, [r7, #10]
    while(current_ref <= app->ref_cnt) {
 801b1ec:	e013      	b.n	801b216 <_cogui_app_event_loop+0x4a>
        result = cogui_recv(app->mq, event, 0);
 801b1ee:	687b      	ldr	r3, [r7, #4]
 801b1f0:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 801b1f4:	2200      	movs	r2, #0
 801b1f6:	68f9      	ldr	r1, [r7, #12]
 801b1f8:	4618      	mov	r0, r3
 801b1fa:	f001 fbe3 	bl	801c9c4 <cogui_recv>
 801b1fe:	4603      	mov	r3, r0
 801b200:	727b      	strb	r3, [r7, #9]

        if(result == GUI_E_OK && event != Co_NULL) {
 801b202:	7a7b      	ldrb	r3, [r7, #9]
 801b204:	2b17      	cmp	r3, #23
 801b206:	d106      	bne.n	801b216 <_cogui_app_event_loop+0x4a>
 801b208:	68fb      	ldr	r3, [r7, #12]
 801b20a:	2b00      	cmp	r3, #0
 801b20c:	d003      	beq.n	801b216 <_cogui_app_event_loop+0x4a>
            //cogui_printf("[%10s] Got a event no.%d\r\n", app->name, event->type);
            app->handler(event);
 801b20e:	687b      	ldr	r3, [r7, #4]
 801b210:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801b212:	68f8      	ldr	r0, [r7, #12]
 801b214:	4798      	blx	r3
    while(current_ref <= app->ref_cnt) {
 801b216:	687b      	ldr	r3, [r7, #4]
 801b218:	899b      	ldrh	r3, [r3, #12]
 801b21a:	897a      	ldrh	r2, [r7, #10]
 801b21c:	429a      	cmp	r2, r3
 801b21e:	d9e6      	bls.n	801b1ee <_cogui_app_event_loop+0x22>
        }
    }
}
 801b220:	bf00      	nop
 801b222:	3710      	adds	r7, #16
 801b224:	46bd      	mov	sp, r7
 801b226:	bd80      	pop	{r7, pc}

0801b228 <cogui_app_run>:

void cogui_app_run(cogui_app_t *app)
{
 801b228:	b580      	push	{r7, lr}
 801b22a:	b090      	sub	sp, #64	; 0x40
 801b22c:	af00      	add	r7, sp, #0
 801b22e:	6078      	str	r0, [r7, #4]
    COGUI_ASSERT(app != Co_NULL);
 801b230:	687b      	ldr	r3, [r7, #4]
 801b232:	2b00      	cmp	r3, #0
 801b234:	d104      	bne.n	801b240 <cogui_app_run+0x18>
 801b236:	229a      	movs	r2, #154	; 0x9a
 801b238:	4923      	ldr	r1, [pc, #140]	; (801b2c8 <cogui_app_run+0xa0>)
 801b23a:	4824      	ldr	r0, [pc, #144]	; (801b2cc <cogui_app_run+0xa4>)
 801b23c:	f001 fff6 	bl	801d22c <cogui_assert_handler>
    COGUI_ASSERT(app->tid);
 801b240:	687b      	ldr	r3, [r7, #4]
 801b242:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801b246:	2b00      	cmp	r3, #0
 801b248:	d104      	bne.n	801b254 <cogui_app_run+0x2c>
 801b24a:	229b      	movs	r2, #155	; 0x9b
 801b24c:	491e      	ldr	r1, [pc, #120]	; (801b2c8 <cogui_app_run+0xa0>)
 801b24e:	4820      	ldr	r0, [pc, #128]	; (801b2d0 <cogui_app_run+0xa8>)
 801b250:	f001 ffec 	bl	801d22c <cogui_assert_handler>
    COGUI_ASSERT(TCBTbl[app->tid].userData);
 801b254:	687b      	ldr	r3, [r7, #4]
 801b256:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801b25a:	4619      	mov	r1, r3
 801b25c:	4a1d      	ldr	r2, [pc, #116]	; (801b2d4 <cogui_app_run+0xac>)
 801b25e:	460b      	mov	r3, r1
 801b260:	005b      	lsls	r3, r3, #1
 801b262:	440b      	add	r3, r1
 801b264:	011b      	lsls	r3, r3, #4
 801b266:	4413      	add	r3, r2
 801b268:	332c      	adds	r3, #44	; 0x2c
 801b26a:	681b      	ldr	r3, [r3, #0]
 801b26c:	2b00      	cmp	r3, #0
 801b26e:	d104      	bne.n	801b27a <cogui_app_run+0x52>
 801b270:	229c      	movs	r2, #156	; 0x9c
 801b272:	4915      	ldr	r1, [pc, #84]	; (801b2c8 <cogui_app_run+0xa0>)
 801b274:	4818      	ldr	r0, [pc, #96]	; (801b2d8 <cogui_app_run+0xb0>)
 801b276:	f001 ffd9 	bl	801d22c <cogui_assert_handler>

    if (app != cogui_get_server()){
 801b27a:	f001 faa7 	bl	801c7cc <cogui_get_server>
 801b27e:	4602      	mov	r2, r0
 801b280:	687b      	ldr	r3, [r7, #4]
 801b282:	4293      	cmp	r3, r2
 801b284:	d013      	beq.n	801b2ae <cogui_app_run+0x86>
        struct cogui_event event;
        COGUI_EVENT_INIT(&event, COGUI_EVENT_PAINT);
 801b286:	230f      	movs	r3, #15
 801b288:	733b      	strb	r3, [r7, #12]
 801b28a:	f000 f88b 	bl	801b3a4 <cogui_app_self>
 801b28e:	4603      	mov	r3, r0
 801b290:	613b      	str	r3, [r7, #16]
 801b292:	2300      	movs	r3, #0
 801b294:	753b      	strb	r3, [r7, #20]
        event.app = app;
 801b296:	687b      	ldr	r3, [r7, #4]
 801b298:	61bb      	str	r3, [r7, #24]

        cogui_send(cogui_get_server(), &event);
 801b29a:	f001 fa97 	bl	801c7cc <cogui_get_server>
 801b29e:	4602      	mov	r2, r0
 801b2a0:	f107 030c 	add.w	r3, r7, #12
 801b2a4:	4619      	mov	r1, r3
 801b2a6:	4610      	mov	r0, r2
 801b2a8:	f001 fb0c 	bl	801c8c4 <cogui_send>
 801b2ac:	e004      	b.n	801b2b8 <cogui_app_run+0x90>
    }
    else {
        main_page = cogui_main_window_create();
 801b2ae:	f003 f885 	bl	801e3bc <cogui_main_window_create>
 801b2b2:	4602      	mov	r2, r0
 801b2b4:	4b09      	ldr	r3, [pc, #36]	; (801b2dc <cogui_app_run+0xb4>)
 801b2b6:	601a      	str	r2, [r3, #0]
    }

    _cogui_app_event_loop(app);
 801b2b8:	6878      	ldr	r0, [r7, #4]
 801b2ba:	f7ff ff87 	bl	801b1cc <_cogui_app_event_loop>
}
 801b2be:	bf00      	nop
 801b2c0:	3740      	adds	r7, #64	; 0x40
 801b2c2:	46bd      	mov	sp, r7
 801b2c4:	bd80      	pop	{r7, pc}
 801b2c6:	bf00      	nop
 801b2c8:	08022c10 	.word	0x08022c10
 801b2cc:	08022b84 	.word	0x08022b84
 801b2d0:	08022b94 	.word	0x08022b94
 801b2d4:	2000d598 	.word	0x2000d598
 801b2d8:	08022ba8 	.word	0x08022ba8
 801b2dc:	2000d774 	.word	0x2000d774

0801b2e0 <cogui_app_exit>:

void cogui_app_exit(cogui_app_t *app, U16 code)
{
 801b2e0:	b480      	push	{r7}
 801b2e2:	b083      	sub	sp, #12
 801b2e4:	af00      	add	r7, sp, #0
 801b2e6:	6078      	str	r0, [r7, #4]
 801b2e8:	460b      	mov	r3, r1
 801b2ea:	807b      	strh	r3, [r7, #2]
    if (app->ref_cnt == 0) {
 801b2ec:	687b      	ldr	r3, [r7, #4]
 801b2ee:	899b      	ldrh	r3, [r3, #12]
 801b2f0:	2b00      	cmp	r3, #0
 801b2f2:	d009      	beq.n	801b308 <cogui_app_exit+0x28>
        return;
    }
    
    app->ref_cnt--;
 801b2f4:	687b      	ldr	r3, [r7, #4]
 801b2f6:	899b      	ldrh	r3, [r3, #12]
 801b2f8:	3b01      	subs	r3, #1
 801b2fa:	b29a      	uxth	r2, r3
 801b2fc:	687b      	ldr	r3, [r7, #4]
 801b2fe:	819a      	strh	r2, [r3, #12]
    app->exit_code = code;
 801b300:	687b      	ldr	r3, [r7, #4]
 801b302:	887a      	ldrh	r2, [r7, #2]
 801b304:	81da      	strh	r2, [r3, #14]
 801b306:	e000      	b.n	801b30a <cogui_app_exit+0x2a>
        return;
 801b308:	bf00      	nop
}
 801b30a:	370c      	adds	r7, #12
 801b30c:	46bd      	mov	sp, r7
 801b30e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b312:	4770      	bx	lr

0801b314 <cogui_app_close>:

StatusType cogui_app_close(cogui_app_t *app)
{
 801b314:	b580      	push	{r7, lr}
 801b316:	b090      	sub	sp, #64	; 0x40
 801b318:	af00      	add	r7, sp, #0
 801b31a:	6078      	str	r0, [r7, #4]
	struct cogui_event event;

    COGUI_EVENT_INIT(&event, COGUI_EVENT_APP_DELE);
 801b31c:	2301      	movs	r3, #1
 801b31e:	733b      	strb	r3, [r7, #12]
 801b320:	f000 f840 	bl	801b3a4 <cogui_app_self>
 801b324:	4603      	mov	r3, r0
 801b326:	613b      	str	r3, [r7, #16]
 801b328:	2300      	movs	r3, #0
 801b32a:	753b      	strb	r3, [r7, #20]
    event.app = app;
 801b32c:	687b      	ldr	r3, [r7, #4]
 801b32e:	61bb      	str	r3, [r7, #24]

    return cogui_send(app, &event);
 801b330:	f107 030c 	add.w	r3, r7, #12
 801b334:	4619      	mov	r1, r3
 801b336:	6878      	ldr	r0, [r7, #4]
 801b338:	f001 fac4 	bl	801c8c4 <cogui_send>
 801b33c:	4603      	mov	r3, r0
}
 801b33e:	4618      	mov	r0, r3
 801b340:	3740      	adds	r7, #64	; 0x40
 801b342:	46bd      	mov	sp, r7
 801b344:	bd80      	pop	{r7, pc}

0801b346 <cogui_app_sleep>:

void cogui_app_sleep(cogui_app_t *app, U32 sleep_tick)
{
 801b346:	b580      	push	{r7, lr}
 801b348:	b082      	sub	sp, #8
 801b34a:	af00      	add	r7, sp, #0
 801b34c:	6078      	str	r0, [r7, #4]
 801b34e:	6039      	str	r1, [r7, #0]
    COGUI_ASSERT(app != Co_NULL);
 801b350:	687b      	ldr	r3, [r7, #4]
 801b352:	2b00      	cmp	r3, #0
 801b354:	d104      	bne.n	801b360 <cogui_app_sleep+0x1a>
 801b356:	22c2      	movs	r2, #194	; 0xc2
 801b358:	490e      	ldr	r1, [pc, #56]	; (801b394 <cogui_app_sleep+0x4e>)
 801b35a:	480f      	ldr	r0, [pc, #60]	; (801b398 <cogui_app_sleep+0x52>)
 801b35c:	f001 ff66 	bl	801d22c <cogui_assert_handler>
    COGUI_ASSERT(app->tid);
 801b360:	687b      	ldr	r3, [r7, #4]
 801b362:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801b366:	2b00      	cmp	r3, #0
 801b368:	d104      	bne.n	801b374 <cogui_app_sleep+0x2e>
 801b36a:	22c3      	movs	r2, #195	; 0xc3
 801b36c:	4909      	ldr	r1, [pc, #36]	; (801b394 <cogui_app_sleep+0x4e>)
 801b36e:	480b      	ldr	r0, [pc, #44]	; (801b39c <cogui_app_sleep+0x56>)
 801b370:	f001 ff5c 	bl	801d22c <cogui_assert_handler>
    COGUI_ASSERT(app->user_data);
 801b374:	687b      	ldr	r3, [r7, #4]
 801b376:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801b378:	2b00      	cmp	r3, #0
 801b37a:	d104      	bne.n	801b386 <cogui_app_sleep+0x40>
 801b37c:	22c4      	movs	r2, #196	; 0xc4
 801b37e:	4905      	ldr	r1, [pc, #20]	; (801b394 <cogui_app_sleep+0x4e>)
 801b380:	4807      	ldr	r0, [pc, #28]	; (801b3a0 <cogui_app_sleep+0x5a>)
 801b382:	f001 ff53 	bl	801d22c <cogui_assert_handler>

    CoTickDelay(sleep_tick);
 801b386:	6838      	ldr	r0, [r7, #0]
 801b388:	f7ff f900 	bl	801a58c <CoTickDelay>
}
 801b38c:	bf00      	nop
 801b38e:	3708      	adds	r7, #8
 801b390:	46bd      	mov	sp, r7
 801b392:	bd80      	pop	{r7, pc}
 801b394:	08022c20 	.word	0x08022c20
 801b398:	08022b84 	.word	0x08022b84
 801b39c:	08022b94 	.word	0x08022b94
 801b3a0:	08022bc4 	.word	0x08022bc4

0801b3a4 <cogui_app_self>:
 * @param[out] None
 * @retval     *app      Current application pointer.
 *******************************************************************************
 */
cogui_app_t *cogui_app_self(void)
{
 801b3a4:	b580      	push	{r7, lr}
 801b3a6:	b082      	sub	sp, #8
 801b3a8:	af00      	add	r7, sp, #0
    cogui_app_t *app;
    OS_TID self;

    /* get current application in TCBTbl */
    self = CoGetCurTaskID();
 801b3aa:	f7fe ff63 	bl	801a274 <CoGetCurTaskID>
 801b3ae:	4603      	mov	r3, r0
 801b3b0:	71fb      	strb	r3, [r7, #7]
    app  = (cogui_app_t *)TCBTbl[self].userData;
 801b3b2:	79fa      	ldrb	r2, [r7, #7]
 801b3b4:	4906      	ldr	r1, [pc, #24]	; (801b3d0 <cogui_app_self+0x2c>)
 801b3b6:	4613      	mov	r3, r2
 801b3b8:	005b      	lsls	r3, r3, #1
 801b3ba:	4413      	add	r3, r2
 801b3bc:	011b      	lsls	r3, r3, #4
 801b3be:	440b      	add	r3, r1
 801b3c0:	332c      	adds	r3, #44	; 0x2c
 801b3c2:	681b      	ldr	r3, [r3, #0]
 801b3c4:	603b      	str	r3, [r7, #0]

    return app;
 801b3c6:	683b      	ldr	r3, [r7, #0]
}
 801b3c8:	4618      	mov	r0, r3
 801b3ca:	3708      	adds	r7, #8
 801b3cc:	46bd      	mov	sp, r7
 801b3ce:	bd80      	pop	{r7, pc}
 801b3d0:	2000d598 	.word	0x2000d598

0801b3d4 <cogui_app_event_handler>:
 * @retval     GUI_E_OK         Handle event successfully.
 * @retval     GUI_E_ERROR      Occured some error while handle event.
 *******************************************************************************
 */
static StatusType cogui_app_event_handler(struct cogui_event *event)
{
 801b3d4:	b580      	push	{r7, lr}
 801b3d6:	b084      	sub	sp, #16
 801b3d8:	af00      	add	r7, sp, #0
 801b3da:	6078      	str	r0, [r7, #4]
	COGUI_ASSERT(event != Co_NULL);
 801b3dc:	687b      	ldr	r3, [r7, #4]
 801b3de:	2b00      	cmp	r3, #0
 801b3e0:	d104      	bne.n	801b3ec <cogui_app_event_handler+0x18>
 801b3e2:	22e8      	movs	r2, #232	; 0xe8
 801b3e4:	4918      	ldr	r1, [pc, #96]	; (801b448 <cogui_app_event_handler+0x74>)
 801b3e6:	4819      	ldr	r0, [pc, #100]	; (801b44c <cogui_app_event_handler+0x78>)
 801b3e8:	f001 ff20 	bl	801d22c <cogui_assert_handler>

    StatusType result = GUI_E_ERROR;
 801b3ec:	2316      	movs	r3, #22
 801b3ee:	73fb      	strb	r3, [r7, #15]

	switch (event->type)
 801b3f0:	687b      	ldr	r3, [r7, #4]
 801b3f2:	781b      	ldrb	r3, [r3, #0]
 801b3f4:	2b01      	cmp	r3, #1
 801b3f6:	d002      	beq.n	801b3fe <cogui_app_event_handler+0x2a>
 801b3f8:	2b0f      	cmp	r3, #15
 801b3fa:	d009      	beq.n	801b410 <cogui_app_event_handler+0x3c>
 801b3fc:	e01a      	b.n	801b434 <cogui_app_event_handler+0x60>
    {
	case COGUI_EVENT_APP_DELE:
		cogui_app_exit((event)->app, 0);
 801b3fe:	687b      	ldr	r3, [r7, #4]
 801b400:	68db      	ldr	r3, [r3, #12]
 801b402:	2100      	movs	r1, #0
 801b404:	4618      	mov	r0, r3
 801b406:	f7ff ff6b 	bl	801b2e0 <cogui_app_exit>
        result = GUI_E_OK;
 801b40a:	2317      	movs	r3, #23
 801b40c:	73fb      	strb	r3, [r7, #15]
		break;
 801b40e:	e015      	b.n	801b43c <cogui_app_event_handler+0x68>

	case COGUI_EVENT_PAINT:
        if (cogui_app_self()->optional_handler != Co_NULL) {
 801b410:	f7ff ffc8 	bl	801b3a4 <cogui_app_self>
 801b414:	4603      	mov	r3, r0
 801b416:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801b418:	2b00      	cmp	r3, #0
 801b41a:	d008      	beq.n	801b42e <cogui_app_event_handler+0x5a>
            result = cogui_app_self()->optional_handler(event);
 801b41c:	f7ff ffc2 	bl	801b3a4 <cogui_app_self>
 801b420:	4603      	mov	r3, r0
 801b422:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801b424:	6878      	ldr	r0, [r7, #4]
 801b426:	4798      	blx	r3
 801b428:	4603      	mov	r3, r0
 801b42a:	73fb      	strb	r3, [r7, #15]
        }
        else {
            result = GUI_E_ERROR;
        }
        break;
 801b42c:	e006      	b.n	801b43c <cogui_app_event_handler+0x68>
            result = GUI_E_ERROR;
 801b42e:	2316      	movs	r3, #22
 801b430:	73fb      	strb	r3, [r7, #15]
        break;
 801b432:	e003      	b.n	801b43c <cogui_app_event_handler+0x68>

	default:
		return result = GUI_E_ERROR;	
 801b434:	2316      	movs	r3, #22
 801b436:	73fb      	strb	r3, [r7, #15]
 801b438:	7bfb      	ldrb	r3, [r7, #15]
 801b43a:	e000      	b.n	801b43e <cogui_app_event_handler+0x6a>
	}
		
	return result;
 801b43c:	7bfb      	ldrb	r3, [r7, #15]
}
 801b43e:	4618      	mov	r0, r3
 801b440:	3710      	adds	r7, #16
 801b442:	46bd      	mov	sp, r7
 801b444:	bd80      	pop	{r7, pc}
 801b446:	bf00      	nop
 801b448:	08022c30 	.word	0x08022c30
 801b44c:	08022bd4 	.word	0x08022bd4

0801b450 <cogui_dc_draw_line>:
 * @param[out] None
 * @retval     None
 *******************************************************************************
 */
void cogui_dc_draw_line(cogui_dc_t *dc, co_int32_t x1, co_int32_t x2, co_int32_t y1, co_int32_t y2)
{
 801b450:	b590      	push	{r4, r7, lr}
 801b452:	b085      	sub	sp, #20
 801b454:	af00      	add	r7, sp, #0
 801b456:	60f8      	str	r0, [r7, #12]
 801b458:	60b9      	str	r1, [r7, #8]
 801b45a:	607a      	str	r2, [r7, #4]
 801b45c:	603b      	str	r3, [r7, #0]
	COGUI_ASSERT(dc != Co_NULL);
 801b45e:	68fb      	ldr	r3, [r7, #12]
 801b460:	2b00      	cmp	r3, #0
 801b462:	d104      	bne.n	801b46e <cogui_dc_draw_line+0x1e>
 801b464:	221a      	movs	r2, #26
 801b466:	4929      	ldr	r1, [pc, #164]	; (801b50c <cogui_dc_draw_line+0xbc>)
 801b468:	4829      	ldr	r0, [pc, #164]	; (801b510 <cogui_dc_draw_line+0xc0>)
 801b46a:	f001 fedf 	bl	801d22c <cogui_assert_handler>
	
    /* this is a line width 1 */
	if (x1 == x2)
 801b46e:	68ba      	ldr	r2, [r7, #8]
 801b470:	687b      	ldr	r3, [r7, #4]
 801b472:	429a      	cmp	r2, r3
 801b474:	d108      	bne.n	801b488 <cogui_dc_draw_line+0x38>
		dc->engine->draw_vline(dc, x1, y1, y2);
 801b476:	68fb      	ldr	r3, [r7, #12]
 801b478:	685b      	ldr	r3, [r3, #4]
 801b47a:	689c      	ldr	r4, [r3, #8]
 801b47c:	6a3b      	ldr	r3, [r7, #32]
 801b47e:	683a      	ldr	r2, [r7, #0]
 801b480:	68b9      	ldr	r1, [r7, #8]
 801b482:	68f8      	ldr	r0, [r7, #12]
 801b484:	47a0      	blx	r4
		_int_comp(y1, y2);
		
		for( ; y1 < y2; y1++)
			dc->engine->draw_hline(dc, x1, x2, y1);
	}
}
 801b486:	e03c      	b.n	801b502 <cogui_dc_draw_line+0xb2>
	else if (y1 == y2)
 801b488:	683a      	ldr	r2, [r7, #0]
 801b48a:	6a3b      	ldr	r3, [r7, #32]
 801b48c:	429a      	cmp	r2, r3
 801b48e:	d108      	bne.n	801b4a2 <cogui_dc_draw_line+0x52>
		dc->engine->draw_hline(dc, x1, x2, y1);
 801b490:	68fb      	ldr	r3, [r7, #12]
 801b492:	685b      	ldr	r3, [r3, #4]
 801b494:	68dc      	ldr	r4, [r3, #12]
 801b496:	683b      	ldr	r3, [r7, #0]
 801b498:	687a      	ldr	r2, [r7, #4]
 801b49a:	68b9      	ldr	r1, [r7, #8]
 801b49c:	68f8      	ldr	r0, [r7, #12]
 801b49e:	47a0      	blx	r4
}
 801b4a0:	e02f      	b.n	801b502 <cogui_dc_draw_line+0xb2>
		_int_comp(x1, x2);
 801b4a2:	68ba      	ldr	r2, [r7, #8]
 801b4a4:	687b      	ldr	r3, [r7, #4]
 801b4a6:	429a      	cmp	r2, r3
 801b4a8:	dd0b      	ble.n	801b4c2 <cogui_dc_draw_line+0x72>
 801b4aa:	68ba      	ldr	r2, [r7, #8]
 801b4ac:	687b      	ldr	r3, [r7, #4]
 801b4ae:	4053      	eors	r3, r2
 801b4b0:	60bb      	str	r3, [r7, #8]
 801b4b2:	687a      	ldr	r2, [r7, #4]
 801b4b4:	68bb      	ldr	r3, [r7, #8]
 801b4b6:	4053      	eors	r3, r2
 801b4b8:	607b      	str	r3, [r7, #4]
 801b4ba:	68ba      	ldr	r2, [r7, #8]
 801b4bc:	687b      	ldr	r3, [r7, #4]
 801b4be:	4053      	eors	r3, r2
 801b4c0:	60bb      	str	r3, [r7, #8]
		_int_comp(y1, y2);
 801b4c2:	683a      	ldr	r2, [r7, #0]
 801b4c4:	6a3b      	ldr	r3, [r7, #32]
 801b4c6:	429a      	cmp	r2, r3
 801b4c8:	dd17      	ble.n	801b4fa <cogui_dc_draw_line+0xaa>
 801b4ca:	683a      	ldr	r2, [r7, #0]
 801b4cc:	6a3b      	ldr	r3, [r7, #32]
 801b4ce:	4053      	eors	r3, r2
 801b4d0:	603b      	str	r3, [r7, #0]
 801b4d2:	6a3a      	ldr	r2, [r7, #32]
 801b4d4:	683b      	ldr	r3, [r7, #0]
 801b4d6:	4053      	eors	r3, r2
 801b4d8:	623b      	str	r3, [r7, #32]
 801b4da:	683a      	ldr	r2, [r7, #0]
 801b4dc:	6a3b      	ldr	r3, [r7, #32]
 801b4de:	4053      	eors	r3, r2
 801b4e0:	603b      	str	r3, [r7, #0]
		for( ; y1 < y2; y1++)
 801b4e2:	e00a      	b.n	801b4fa <cogui_dc_draw_line+0xaa>
			dc->engine->draw_hline(dc, x1, x2, y1);
 801b4e4:	68fb      	ldr	r3, [r7, #12]
 801b4e6:	685b      	ldr	r3, [r3, #4]
 801b4e8:	68dc      	ldr	r4, [r3, #12]
 801b4ea:	683b      	ldr	r3, [r7, #0]
 801b4ec:	687a      	ldr	r2, [r7, #4]
 801b4ee:	68b9      	ldr	r1, [r7, #8]
 801b4f0:	68f8      	ldr	r0, [r7, #12]
 801b4f2:	47a0      	blx	r4
		for( ; y1 < y2; y1++)
 801b4f4:	683b      	ldr	r3, [r7, #0]
 801b4f6:	3301      	adds	r3, #1
 801b4f8:	603b      	str	r3, [r7, #0]
 801b4fa:	683a      	ldr	r2, [r7, #0]
 801b4fc:	6a3b      	ldr	r3, [r7, #32]
 801b4fe:	429a      	cmp	r2, r3
 801b500:	dbf0      	blt.n	801b4e4 <cogui_dc_draw_line+0x94>
}
 801b502:	bf00      	nop
 801b504:	3714      	adds	r7, #20
 801b506:	46bd      	mov	sp, r7
 801b508:	bd90      	pop	{r4, r7, pc}
 801b50a:	bf00      	nop
 801b50c:	08022cd4 	.word	0x08022cd4
 801b510:	08022cb0 	.word	0x08022cb0

0801b514 <cogui_dc_draw_rect>:
 * @param[out] None
 * @retval     None
 *******************************************************************************
 */
void cogui_dc_draw_rect(cogui_dc_t *dc, cogui_rect_t *rect)
{
 801b514:	b590      	push	{r4, r7, lr}
 801b516:	b087      	sub	sp, #28
 801b518:	af00      	add	r7, sp, #0
 801b51a:	6078      	str	r0, [r7, #4]
 801b51c:	6039      	str	r1, [r7, #0]
	COGUI_ASSERT(dc != Co_NULL);
 801b51e:	687b      	ldr	r3, [r7, #4]
 801b520:	2b00      	cmp	r3, #0
 801b522:	d104      	bne.n	801b52e <cogui_dc_draw_rect+0x1a>
 801b524:	2237      	movs	r2, #55	; 0x37
 801b526:	491f      	ldr	r1, [pc, #124]	; (801b5a4 <cogui_dc_draw_rect+0x90>)
 801b528:	481f      	ldr	r0, [pc, #124]	; (801b5a8 <cogui_dc_draw_rect+0x94>)
 801b52a:	f001 fe7f 	bl	801d22c <cogui_assert_handler>
	
	if (rect == Co_NULL)
 801b52e:	683b      	ldr	r3, [r7, #0]
 801b530:	2b00      	cmp	r3, #0
 801b532:	d032      	beq.n	801b59a <cogui_dc_draw_rect+0x86>
		return;
	
	co_int32_t x1, x2, y1, y2;
	
	x1 = rect->x1;
 801b534:	683b      	ldr	r3, [r7, #0]
 801b536:	f9b3 3000 	ldrsh.w	r3, [r3]
 801b53a:	617b      	str	r3, [r7, #20]
	x2 = rect->x2;
 801b53c:	683b      	ldr	r3, [r7, #0]
 801b53e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801b542:	613b      	str	r3, [r7, #16]
	y1 = rect->y1;
 801b544:	683b      	ldr	r3, [r7, #0]
 801b546:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801b54a:	60fb      	str	r3, [r7, #12]
	y2 = rect->y2;
 801b54c:	683b      	ldr	r3, [r7, #0]
 801b54e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801b552:	60bb      	str	r3, [r7, #8]
	
    /* draw rectangle's 4 edges*/
	dc->engine->draw_vline(dc, x1,   y1, y2);
 801b554:	687b      	ldr	r3, [r7, #4]
 801b556:	685b      	ldr	r3, [r3, #4]
 801b558:	689c      	ldr	r4, [r3, #8]
 801b55a:	68bb      	ldr	r3, [r7, #8]
 801b55c:	68fa      	ldr	r2, [r7, #12]
 801b55e:	6979      	ldr	r1, [r7, #20]
 801b560:	6878      	ldr	r0, [r7, #4]
 801b562:	47a0      	blx	r4
	dc->engine->draw_vline(dc, x2-1, y1, y2);
 801b564:	687b      	ldr	r3, [r7, #4]
 801b566:	685b      	ldr	r3, [r3, #4]
 801b568:	689c      	ldr	r4, [r3, #8]
 801b56a:	693b      	ldr	r3, [r7, #16]
 801b56c:	1e59      	subs	r1, r3, #1
 801b56e:	68bb      	ldr	r3, [r7, #8]
 801b570:	68fa      	ldr	r2, [r7, #12]
 801b572:	6878      	ldr	r0, [r7, #4]
 801b574:	47a0      	blx	r4
	dc->engine->draw_hline(dc, x1,   x2, y1);
 801b576:	687b      	ldr	r3, [r7, #4]
 801b578:	685b      	ldr	r3, [r3, #4]
 801b57a:	68dc      	ldr	r4, [r3, #12]
 801b57c:	68fb      	ldr	r3, [r7, #12]
 801b57e:	693a      	ldr	r2, [r7, #16]
 801b580:	6979      	ldr	r1, [r7, #20]
 801b582:	6878      	ldr	r0, [r7, #4]
 801b584:	47a0      	blx	r4
	dc->engine->draw_hline(dc, x1,   x2, y2-1);
 801b586:	687b      	ldr	r3, [r7, #4]
 801b588:	685b      	ldr	r3, [r3, #4]
 801b58a:	68dc      	ldr	r4, [r3, #12]
 801b58c:	68bb      	ldr	r3, [r7, #8]
 801b58e:	3b01      	subs	r3, #1
 801b590:	693a      	ldr	r2, [r7, #16]
 801b592:	6979      	ldr	r1, [r7, #20]
 801b594:	6878      	ldr	r0, [r7, #4]
 801b596:	47a0      	blx	r4
 801b598:	e000      	b.n	801b59c <cogui_dc_draw_rect+0x88>
		return;
 801b59a:	bf00      	nop
}
 801b59c:	371c      	adds	r7, #28
 801b59e:	46bd      	mov	sp, r7
 801b5a0:	bd90      	pop	{r4, r7, pc}
 801b5a2:	bf00      	nop
 801b5a4:	08022ce8 	.word	0x08022ce8
 801b5a8:	08022cb0 	.word	0x08022cb0

0801b5ac <cogui_dc_fill_rect_forecolor>:
 * @details    This function is called to draw a solid rectangle and filled
 *             with foreground color.
 *******************************************************************************
 */
void cogui_dc_fill_rect_forecolor(cogui_dc_t *dc, cogui_rect_t *rect)
{
 801b5ac:	b590      	push	{r4, r7, lr}
 801b5ae:	b085      	sub	sp, #20
 801b5b0:	af00      	add	r7, sp, #0
 801b5b2:	6078      	str	r0, [r7, #4]
 801b5b4:	6039      	str	r1, [r7, #0]
	COGUI_ASSERT(dc != Co_NULL);
 801b5b6:	687b      	ldr	r3, [r7, #4]
 801b5b8:	2b00      	cmp	r3, #0
 801b5ba:	d104      	bne.n	801b5c6 <cogui_dc_fill_rect_forecolor+0x1a>
 801b5bc:	2259      	movs	r2, #89	; 0x59
 801b5be:	4915      	ldr	r1, [pc, #84]	; (801b614 <cogui_dc_fill_rect_forecolor+0x68>)
 801b5c0:	4815      	ldr	r0, [pc, #84]	; (801b618 <cogui_dc_fill_rect_forecolor+0x6c>)
 801b5c2:	f001 fe33 	bl	801d22c <cogui_assert_handler>
	cogui_color_t save_color;
	
    /* Since the fill_rect interface will filled with background color, so we
     * should save the old background color and change background into current
     * foreground color */
	save_color      = COGUI_DC_BC(dc);
 801b5c6:	6878      	ldr	r0, [r7, #4]
 801b5c8:	f000 f9b8 	bl	801b93c <cogui_dc_get_gc>
 801b5cc:	4603      	mov	r3, r0
 801b5ce:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 801b5d2:	e9c7 3402 	strd	r3, r4, [r7, #8]
	COGUI_DC_BC(dc) = COGUI_DC_FC(dc);
 801b5d6:	6878      	ldr	r0, [r7, #4]
 801b5d8:	f000 f9b0 	bl	801b93c <cogui_dc_get_gc>
 801b5dc:	4604      	mov	r4, r0
 801b5de:	6878      	ldr	r0, [r7, #4]
 801b5e0:	f000 f9ac 	bl	801b93c <cogui_dc_get_gc>
 801b5e4:	4602      	mov	r2, r0
 801b5e6:	e9d4 3400 	ldrd	r3, r4, [r4]
 801b5ea:	e9c2 3402 	strd	r3, r4, [r2, #8]
	
    /* call interface */
	dc->engine->fill_rect(dc, rect);
 801b5ee:	687b      	ldr	r3, [r7, #4]
 801b5f0:	685b      	ldr	r3, [r3, #4]
 801b5f2:	691b      	ldr	r3, [r3, #16]
 801b5f4:	6839      	ldr	r1, [r7, #0]
 801b5f6:	6878      	ldr	r0, [r7, #4]
 801b5f8:	4798      	blx	r3
	
    /* restore background color */
	COGUI_DC_BC(dc) = save_color;
 801b5fa:	6878      	ldr	r0, [r7, #4]
 801b5fc:	f000 f99e 	bl	801b93c <cogui_dc_get_gc>
 801b600:	4602      	mov	r2, r0
 801b602:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 801b606:	e9c2 3402 	strd	r3, r4, [r2, #8]
}
 801b60a:	bf00      	nop
 801b60c:	3714      	adds	r7, #20
 801b60e:	46bd      	mov	sp, r7
 801b610:	bd90      	pop	{r4, r7, pc}
 801b612:	bf00      	nop
 801b614:	08022cfc 	.word	0x08022cfc
 801b618:	08022cb0 	.word	0x08022cb0

0801b61c <cogui_dc_draw_shaded_rect>:

void cogui_dc_draw_shaded_rect(cogui_dc_t *dc, cogui_rect_t *rect, cogui_color_t c1, cogui_color_t c2)
{
 801b61c:	b590      	push	{r4, r7, lr}
 801b61e:	b085      	sub	sp, #20
 801b620:	af00      	add	r7, sp, #0
 801b622:	60f8      	str	r0, [r7, #12]
 801b624:	60b9      	str	r1, [r7, #8]
 801b626:	e9c7 2300 	strd	r2, r3, [r7]
	COGUI_ASSERT(dc != Co_NULL);
 801b62a:	68fb      	ldr	r3, [r7, #12]
 801b62c:	2b00      	cmp	r3, #0
 801b62e:	d104      	bne.n	801b63a <cogui_dc_draw_shaded_rect+0x1e>
 801b630:	226c      	movs	r2, #108	; 0x6c
 801b632:	492c      	ldr	r1, [pc, #176]	; (801b6e4 <cogui_dc_draw_shaded_rect+0xc8>)
 801b634:	482c      	ldr	r0, [pc, #176]	; (801b6e8 <cogui_dc_draw_shaded_rect+0xcc>)
 801b636:	f001 fdf9 	bl	801d22c <cogui_assert_handler>
		
	COGUI_DC_FC(dc) = c1;
 801b63a:	68f8      	ldr	r0, [r7, #12]
 801b63c:	f000 f97e 	bl	801b93c <cogui_dc_get_gc>
 801b640:	4602      	mov	r2, r0
 801b642:	e9d7 3400 	ldrd	r3, r4, [r7]
 801b646:	e9c2 3400 	strd	r3, r4, [r2]
	dc->engine->draw_vline(dc, rect->x1,   rect->y1, rect->y2);
 801b64a:	68fb      	ldr	r3, [r7, #12]
 801b64c:	685b      	ldr	r3, [r3, #4]
 801b64e:	689c      	ldr	r4, [r3, #8]
 801b650:	68bb      	ldr	r3, [r7, #8]
 801b652:	f9b3 3000 	ldrsh.w	r3, [r3]
 801b656:	4619      	mov	r1, r3
 801b658:	68bb      	ldr	r3, [r7, #8]
 801b65a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801b65e:	461a      	mov	r2, r3
 801b660:	68bb      	ldr	r3, [r7, #8]
 801b662:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801b666:	68f8      	ldr	r0, [r7, #12]
 801b668:	47a0      	blx	r4
	dc->engine->draw_hline(dc, rect->x1+1, rect->x2, rect->y1);
 801b66a:	68fb      	ldr	r3, [r7, #12]
 801b66c:	685b      	ldr	r3, [r3, #4]
 801b66e:	68dc      	ldr	r4, [r3, #12]
 801b670:	68bb      	ldr	r3, [r7, #8]
 801b672:	f9b3 3000 	ldrsh.w	r3, [r3]
 801b676:	1c59      	adds	r1, r3, #1
 801b678:	68bb      	ldr	r3, [r7, #8]
 801b67a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801b67e:	461a      	mov	r2, r3
 801b680:	68bb      	ldr	r3, [r7, #8]
 801b682:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801b686:	68f8      	ldr	r0, [r7, #12]
 801b688:	47a0      	blx	r4
	
	COGUI_DC_FC(dc) = c2;
 801b68a:	68f8      	ldr	r0, [r7, #12]
 801b68c:	f000 f956 	bl	801b93c <cogui_dc_get_gc>
 801b690:	4602      	mov	r2, r0
 801b692:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 801b696:	e9c2 3400 	strd	r3, r4, [r2]
	dc->engine->draw_vline(dc, rect->x2-1, rect->y1, rect->y2);
 801b69a:	68fb      	ldr	r3, [r7, #12]
 801b69c:	685b      	ldr	r3, [r3, #4]
 801b69e:	689c      	ldr	r4, [r3, #8]
 801b6a0:	68bb      	ldr	r3, [r7, #8]
 801b6a2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801b6a6:	1e59      	subs	r1, r3, #1
 801b6a8:	68bb      	ldr	r3, [r7, #8]
 801b6aa:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801b6ae:	461a      	mov	r2, r3
 801b6b0:	68bb      	ldr	r3, [r7, #8]
 801b6b2:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801b6b6:	68f8      	ldr	r0, [r7, #12]
 801b6b8:	47a0      	blx	r4
	dc->engine->draw_hline(dc, rect->x1,   rect->x2, rect->y2-1);
 801b6ba:	68fb      	ldr	r3, [r7, #12]
 801b6bc:	685b      	ldr	r3, [r3, #4]
 801b6be:	68dc      	ldr	r4, [r3, #12]
 801b6c0:	68bb      	ldr	r3, [r7, #8]
 801b6c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 801b6c6:	4619      	mov	r1, r3
 801b6c8:	68bb      	ldr	r3, [r7, #8]
 801b6ca:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801b6ce:	461a      	mov	r2, r3
 801b6d0:	68bb      	ldr	r3, [r7, #8]
 801b6d2:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801b6d6:	3b01      	subs	r3, #1
 801b6d8:	68f8      	ldr	r0, [r7, #12]
 801b6da:	47a0      	blx	r4
}
 801b6dc:	bf00      	nop
 801b6de:	3714      	adds	r7, #20
 801b6e0:	46bd      	mov	sp, r7
 801b6e2:	bd90      	pop	{r4, r7, pc}
 801b6e4:	08022d1c 	.word	0x08022d1c
 801b6e8:	08022cb0 	.word	0x08022cb0

0801b6ec <cogui_dc_draw_border>:

void cogui_dc_draw_border(cogui_dc_t *dc, cogui_rect_t *rect)
{
 801b6ec:	b590      	push	{r4, r7, lr}
 801b6ee:	b087      	sub	sp, #28
 801b6f0:	af00      	add	r7, sp, #0
 801b6f2:	6078      	str	r0, [r7, #4]
 801b6f4:	6039      	str	r1, [r7, #0]
	cogui_rect_t r = *rect;
 801b6f6:	683a      	ldr	r2, [r7, #0]
 801b6f8:	f107 0308 	add.w	r3, r7, #8
 801b6fc:	6810      	ldr	r0, [r2, #0]
 801b6fe:	6851      	ldr	r1, [r2, #4]
 801b700:	c303      	stmia	r3!, {r0, r1}
	cogui_color_t save_color;
	
	COGUI_ASSERT(dc != Co_NULL);
 801b702:	687b      	ldr	r3, [r7, #4]
 801b704:	2b00      	cmp	r3, #0
 801b706:	d104      	bne.n	801b712 <cogui_dc_draw_border+0x26>
 801b708:	227c      	movs	r2, #124	; 0x7c
 801b70a:	4927      	ldr	r1, [pc, #156]	; (801b7a8 <cogui_dc_draw_border+0xbc>)
 801b70c:	4827      	ldr	r0, [pc, #156]	; (801b7ac <cogui_dc_draw_border+0xc0>)
 801b70e:	f001 fd8d 	bl	801d22c <cogui_assert_handler>
	
	if (rect == Co_NULL)
 801b712:	683b      	ldr	r3, [r7, #0]
 801b714:	2b00      	cmp	r3, #0
 801b716:	d042      	beq.n	801b79e <cogui_dc_draw_border+0xb2>
		return;
	
    save_color      = COGUI_DC_FC(dc);
 801b718:	6878      	ldr	r0, [r7, #4]
 801b71a:	f000 f90f 	bl	801b93c <cogui_dc_get_gc>
 801b71e:	4603      	mov	r3, r0
 801b720:	e9d3 3400 	ldrd	r3, r4, [r3]
 801b724:	e9c7 3404 	strd	r3, r4, [r7, #16]
	COGUI_DC_FC(dc) = COGUI_LIGHT_GRAY;
 801b728:	6878      	ldr	r0, [r7, #4]
 801b72a:	f000 f907 	bl	801b93c <cogui_dc_get_gc>
 801b72e:	4602      	mov	r2, r0
 801b730:	f649 43f3 	movw	r3, #40179	; 0x9cf3
 801b734:	f04f 0400 	mov.w	r4, #0
 801b738:	e9c2 3400 	strd	r3, r4, [r2]

	cogui_dc_draw_rect(dc, &r);
 801b73c:	f107 0308 	add.w	r3, r7, #8
 801b740:	4619      	mov	r1, r3
 801b742:	6878      	ldr	r0, [r7, #4]
 801b744:	f7ff fee6 	bl	801b514 <cogui_dc_draw_rect>

    COGUI_RECT_EXPAND(&r, -1);
 801b748:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801b74c:	b29b      	uxth	r3, r3
 801b74e:	3301      	adds	r3, #1
 801b750:	b29b      	uxth	r3, r3
 801b752:	b21b      	sxth	r3, r3
 801b754:	813b      	strh	r3, [r7, #8]
 801b756:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 801b75a:	b29b      	uxth	r3, r3
 801b75c:	3b01      	subs	r3, #1
 801b75e:	b29b      	uxth	r3, r3
 801b760:	b21b      	sxth	r3, r3
 801b762:	817b      	strh	r3, [r7, #10]
 801b764:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 801b768:	b29b      	uxth	r3, r3
 801b76a:	3301      	adds	r3, #1
 801b76c:	b29b      	uxth	r3, r3
 801b76e:	b21b      	sxth	r3, r3
 801b770:	81bb      	strh	r3, [r7, #12]
 801b772:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801b776:	b29b      	uxth	r3, r3
 801b778:	3b01      	subs	r3, #1
 801b77a:	b29b      	uxth	r3, r3
 801b77c:	b21b      	sxth	r3, r3
 801b77e:	81fb      	strh	r3, [r7, #14]

	cogui_dc_draw_rect(dc, &r);
 801b780:	f107 0308 	add.w	r3, r7, #8
 801b784:	4619      	mov	r1, r3
 801b786:	6878      	ldr	r0, [r7, #4]
 801b788:	f7ff fec4 	bl	801b514 <cogui_dc_draw_rect>

    COGUI_DC_FC(dc) = save_color;
 801b78c:	6878      	ldr	r0, [r7, #4]
 801b78e:	f000 f8d5 	bl	801b93c <cogui_dc_get_gc>
 801b792:	4602      	mov	r2, r0
 801b794:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 801b798:	e9c2 3400 	strd	r3, r4, [r2]
 801b79c:	e000      	b.n	801b7a0 <cogui_dc_draw_border+0xb4>
		return;
 801b79e:	bf00      	nop
}
 801b7a0:	371c      	adds	r7, #28
 801b7a2:	46bd      	mov	sp, r7
 801b7a4:	bd90      	pop	{r4, r7, pc}
 801b7a6:	bf00      	nop
 801b7a8:	08022d38 	.word	0x08022d38
 801b7ac:	08022cb0 	.word	0x08022cb0

0801b7b0 <cogui_dc_draw_text>:

void cogui_dc_draw_text(cogui_dc_t *dc, cogui_rect_t *rect, char *str)
{
 801b7b0:	b5b0      	push	{r4, r5, r7, lr}
 801b7b2:	b08c      	sub	sp, #48	; 0x30
 801b7b4:	af02      	add	r7, sp, #8
 801b7b6:	60f8      	str	r0, [r7, #12]
 801b7b8:	60b9      	str	r1, [r7, #8]
 801b7ba:	607a      	str	r2, [r7, #4]
	COGUI_ASSERT(dc != Co_NULL);
 801b7bc:	68fb      	ldr	r3, [r7, #12]
 801b7be:	2b00      	cmp	r3, #0
 801b7c0:	d104      	bne.n	801b7cc <cogui_dc_draw_text+0x1c>
 801b7c2:	228f      	movs	r2, #143	; 0x8f
 801b7c4:	495b      	ldr	r1, [pc, #364]	; (801b934 <cogui_dc_draw_text+0x184>)
 801b7c6:	485c      	ldr	r0, [pc, #368]	; (801b938 <cogui_dc_draw_text+0x188>)
 801b7c8:	f001 fd30 	bl	801d22c <cogui_assert_handler>

    /* pass if nothing to show */
    if (str == Co_NULL) {
 801b7cc:	687b      	ldr	r3, [r7, #4]
 801b7ce:	2b00      	cmp	r3, #0
 801b7d0:	f000 80ac 	beq.w	801b92c <cogui_dc_draw_text+0x17c>
        return;
    }

    co_uint16_t text_align = COGUI_DC_TA(dc);
 801b7d4:	68f8      	ldr	r0, [r7, #12]
 801b7d6:	f000 f8b1 	bl	801b93c <cogui_dc_get_gc>
 801b7da:	4603      	mov	r3, r0
 801b7dc:	8a9b      	ldrh	r3, [r3, #20]
 801b7de:	837b      	strh	r3, [r7, #26]
    co_int16_t  tx, ty;

    /* default style setting */
    if (text_align == COGUI_TEXT_ALIGN_NONE) {
 801b7e0:	8b7b      	ldrh	r3, [r7, #26]
 801b7e2:	2b00      	cmp	r3, #0
 801b7e4:	d103      	bne.n	801b7ee <cogui_dc_draw_text+0x3e>
        tx = ty = 0;
 801b7e6:	2300      	movs	r3, #0
 801b7e8:	84bb      	strh	r3, [r7, #36]	; 0x24
 801b7ea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801b7ec:	84fb      	strh	r3, [r7, #38]	; 0x26
    }

    co_uint32_t text_width = cogui_get_text_width(str, COGUI_DC_FONT(dc));
 801b7ee:	68f8      	ldr	r0, [r7, #12]
 801b7f0:	f000 f8a4 	bl	801b93c <cogui_dc_get_gc>
 801b7f4:	4603      	mov	r3, r0
 801b7f6:	691b      	ldr	r3, [r3, #16]
 801b7f8:	4619      	mov	r1, r3
 801b7fa:	6878      	ldr	r0, [r7, #4]
 801b7fc:	f000 fc6b 	bl	801c0d6 <cogui_get_text_width>
 801b800:	6238      	str	r0, [r7, #32]
    co_uint32_t rect_width = COGUI_RECT_WIDTH(rect);
 801b802:	68bb      	ldr	r3, [r7, #8]
 801b804:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801b808:	461a      	mov	r2, r3
 801b80a:	68bb      	ldr	r3, [r7, #8]
 801b80c:	f9b3 3000 	ldrsh.w	r3, [r3]
 801b810:	1ad3      	subs	r3, r2, r3
 801b812:	617b      	str	r3, [r7, #20]

    /* if text is too long, it will no longer align */
    if (text_width > rect_width) {
 801b814:	6a3a      	ldr	r2, [r7, #32]
 801b816:	697b      	ldr	r3, [r7, #20]
 801b818:	429a      	cmp	r2, r3
 801b81a:	d901      	bls.n	801b820 <cogui_dc_draw_text+0x70>
        text_width = rect_width;
 801b81c:	697b      	ldr	r3, [r7, #20]
 801b81e:	623b      	str	r3, [r7, #32]
    }

    /* fixed text start point x */
    if (text_align & COGUI_TEXT_ALIGN_LEFT) {
 801b820:	8b7b      	ldrh	r3, [r7, #26]
 801b822:	f003 0301 	and.w	r3, r3, #1
 801b826:	2b00      	cmp	r3, #0
 801b828:	d002      	beq.n	801b830 <cogui_dc_draw_text+0x80>
        tx = 0;
 801b82a:	2300      	movs	r3, #0
 801b82c:	84fb      	strh	r3, [r7, #38]	; 0x26
 801b82e:	e01e      	b.n	801b86e <cogui_dc_draw_text+0xbe>
    }
    else if (text_align & COGUI_TEXT_ALIGN_CENTER) {
 801b830:	8b7b      	ldrh	r3, [r7, #26]
 801b832:	f003 0304 	and.w	r3, r3, #4
 801b836:	2b00      	cmp	r3, #0
 801b838:	d00d      	beq.n	801b856 <cogui_dc_draw_text+0xa6>
        tx = rect_width - text_width;
 801b83a:	697b      	ldr	r3, [r7, #20]
 801b83c:	b29a      	uxth	r2, r3
 801b83e:	6a3b      	ldr	r3, [r7, #32]
 801b840:	b29b      	uxth	r3, r3
 801b842:	1ad3      	subs	r3, r2, r3
 801b844:	b29b      	uxth	r3, r3
 801b846:	84fb      	strh	r3, [r7, #38]	; 0x26
        tx /=2;
 801b848:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 801b84c:	0fda      	lsrs	r2, r3, #31
 801b84e:	4413      	add	r3, r2
 801b850:	105b      	asrs	r3, r3, #1
 801b852:	84fb      	strh	r3, [r7, #38]	; 0x26
 801b854:	e00b      	b.n	801b86e <cogui_dc_draw_text+0xbe>
    }
    else if (text_align & COGUI_TEXT_ALIGN_RIGHT) {
 801b856:	8b7b      	ldrh	r3, [r7, #26]
 801b858:	f003 0302 	and.w	r3, r3, #2
 801b85c:	2b00      	cmp	r3, #0
 801b85e:	d006      	beq.n	801b86e <cogui_dc_draw_text+0xbe>
        tx = rect_width - text_width;
 801b860:	697b      	ldr	r3, [r7, #20]
 801b862:	b29a      	uxth	r2, r3
 801b864:	6a3b      	ldr	r3, [r7, #32]
 801b866:	b29b      	uxth	r3, r3
 801b868:	1ad3      	subs	r3, r2, r3
 801b86a:	b29b      	uxth	r3, r3
 801b86c:	84fb      	strh	r3, [r7, #38]	; 0x26
    }

    co_uint32_t text_height = cogui_get_text_height(str, COGUI_DC_FONT(dc), rect);
 801b86e:	68f8      	ldr	r0, [r7, #12]
 801b870:	f000 f864 	bl	801b93c <cogui_dc_get_gc>
 801b874:	4603      	mov	r3, r0
 801b876:	691b      	ldr	r3, [r3, #16]
 801b878:	68ba      	ldr	r2, [r7, #8]
 801b87a:	4619      	mov	r1, r3
 801b87c:	6878      	ldr	r0, [r7, #4]
 801b87e:	f000 fc57 	bl	801c130 <cogui_get_text_height>
 801b882:	61f8      	str	r0, [r7, #28]
    co_uint32_t rect_height = COGUI_RECT_HEIGHT(rect);
 801b884:	68bb      	ldr	r3, [r7, #8]
 801b886:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801b88a:	461a      	mov	r2, r3
 801b88c:	68bb      	ldr	r3, [r7, #8]
 801b88e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801b892:	1ad3      	subs	r3, r2, r3
 801b894:	613b      	str	r3, [r7, #16]

    /* text overflow-y: hidden */
    if (text_height > rect_height) {
 801b896:	69fa      	ldr	r2, [r7, #28]
 801b898:	693b      	ldr	r3, [r7, #16]
 801b89a:	429a      	cmp	r2, r3
 801b89c:	d901      	bls.n	801b8a2 <cogui_dc_draw_text+0xf2>
        text_height = rect_height;
 801b89e:	693b      	ldr	r3, [r7, #16]
 801b8a0:	61fb      	str	r3, [r7, #28]
    } 

    /* fixed text start point y */
    if (text_align & COGUI_TEXT_ALIGN_TOP) {
 801b8a2:	8b7b      	ldrh	r3, [r7, #26]
 801b8a4:	f003 0308 	and.w	r3, r3, #8
 801b8a8:	2b00      	cmp	r3, #0
 801b8aa:	d002      	beq.n	801b8b2 <cogui_dc_draw_text+0x102>
        ty = 0;
 801b8ac:	2300      	movs	r3, #0
 801b8ae:	84bb      	strh	r3, [r7, #36]	; 0x24
 801b8b0:	e01e      	b.n	801b8f0 <cogui_dc_draw_text+0x140>
    }
    else if (text_align & COGUI_TEXT_ALIGN_MIDDLE) {
 801b8b2:	8b7b      	ldrh	r3, [r7, #26]
 801b8b4:	f003 0310 	and.w	r3, r3, #16
 801b8b8:	2b00      	cmp	r3, #0
 801b8ba:	d00d      	beq.n	801b8d8 <cogui_dc_draw_text+0x128>
        ty = rect_height - text_height;
 801b8bc:	693b      	ldr	r3, [r7, #16]
 801b8be:	b29a      	uxth	r2, r3
 801b8c0:	69fb      	ldr	r3, [r7, #28]
 801b8c2:	b29b      	uxth	r3, r3
 801b8c4:	1ad3      	subs	r3, r2, r3
 801b8c6:	b29b      	uxth	r3, r3
 801b8c8:	84bb      	strh	r3, [r7, #36]	; 0x24
        ty/=2;
 801b8ca:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 801b8ce:	0fda      	lsrs	r2, r3, #31
 801b8d0:	4413      	add	r3, r2
 801b8d2:	105b      	asrs	r3, r3, #1
 801b8d4:	84bb      	strh	r3, [r7, #36]	; 0x24
 801b8d6:	e00b      	b.n	801b8f0 <cogui_dc_draw_text+0x140>
    }
    else if (text_align & COGUI_TEXT_ALIGN_BOTTOM) {
 801b8d8:	8b7b      	ldrh	r3, [r7, #26]
 801b8da:	f003 0320 	and.w	r3, r3, #32
 801b8de:	2b00      	cmp	r3, #0
 801b8e0:	d006      	beq.n	801b8f0 <cogui_dc_draw_text+0x140>
        ty = rect_height - text_height;
 801b8e2:	693b      	ldr	r3, [r7, #16]
 801b8e4:	b29a      	uxth	r2, r3
 801b8e6:	69fb      	ldr	r3, [r7, #28]
 801b8e8:	b29b      	uxth	r3, r3
 801b8ea:	1ad3      	subs	r3, r2, r3
 801b8ec:	b29b      	uxth	r3, r3
 801b8ee:	84bb      	strh	r3, [r7, #36]	; 0x24
    }

    /* put text in the right place */
    cogui_lcd_puts(tx+rect->x1, ty+rect->y1, str, COGUI_DC_FONT(dc), dc, rect);
 801b8f0:	68bb      	ldr	r3, [r7, #8]
 801b8f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 801b8f6:	b29a      	uxth	r2, r3
 801b8f8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801b8fa:	4413      	add	r3, r2
 801b8fc:	b29c      	uxth	r4, r3
 801b8fe:	68bb      	ldr	r3, [r7, #8]
 801b900:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801b904:	b29a      	uxth	r2, r3
 801b906:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801b908:	4413      	add	r3, r2
 801b90a:	b29d      	uxth	r5, r3
 801b90c:	68f8      	ldr	r0, [r7, #12]
 801b90e:	f000 f815 	bl	801b93c <cogui_dc_get_gc>
 801b912:	4603      	mov	r3, r0
 801b914:	691a      	ldr	r2, [r3, #16]
 801b916:	68bb      	ldr	r3, [r7, #8]
 801b918:	9301      	str	r3, [sp, #4]
 801b91a:	68fb      	ldr	r3, [r7, #12]
 801b91c:	9300      	str	r3, [sp, #0]
 801b91e:	4613      	mov	r3, r2
 801b920:	687a      	ldr	r2, [r7, #4]
 801b922:	4629      	mov	r1, r5
 801b924:	4620      	mov	r0, r4
 801b926:	f000 fb49 	bl	801bfbc <cogui_lcd_puts>
 801b92a:	e000      	b.n	801b92e <cogui_dc_draw_text+0x17e>
        return;
 801b92c:	bf00      	nop
}
 801b92e:	3728      	adds	r7, #40	; 0x28
 801b930:	46bd      	mov	sp, r7
 801b932:	bdb0      	pop	{r4, r5, r7, pc}
 801b934:	08022d50 	.word	0x08022d50
 801b938:	08022cb0 	.word	0x08022cb0

0801b93c <cogui_dc_get_gc>:
 * @details    This function is called to find graph context by giving DC 
 *             pointer.
 *******************************************************************************
 */
struct cogui_gc *cogui_dc_get_gc(cogui_dc_t *dc)
{
 801b93c:	b580      	push	{r7, lr}
 801b93e:	b084      	sub	sp, #16
 801b940:	af00      	add	r7, sp, #0
 801b942:	6078      	str	r0, [r7, #4]
	struct cogui_gc *gc = Co_NULL;
 801b944:	2300      	movs	r3, #0
 801b946:	60fb      	str	r3, [r7, #12]
	
	COGUI_ASSERT(dc != Co_NULL);
 801b948:	687b      	ldr	r3, [r7, #4]
 801b94a:	2b00      	cmp	r3, #0
 801b94c:	d104      	bne.n	801b958 <cogui_dc_get_gc+0x1c>
 801b94e:	22da      	movs	r2, #218	; 0xda
 801b950:	490a      	ldr	r1, [pc, #40]	; (801b97c <cogui_dc_get_gc+0x40>)
 801b952:	480b      	ldr	r0, [pc, #44]	; (801b980 <cogui_dc_get_gc+0x44>)
 801b954:	f001 fc6a 	bl	801d22c <cogui_assert_handler>
	
	switch(dc->type) {
 801b958:	687b      	ldr	r3, [r7, #4]
 801b95a:	781b      	ldrb	r3, [r3, #0]
 801b95c:	2b01      	cmp	r3, #1
 801b95e:	d000      	beq.n	801b962 <cogui_dc_get_gc+0x26>
			break;
		}

		case COGUI_DC_BUFFER:
		default:
			break;
 801b960:	e006      	b.n	801b970 <cogui_dc_get_gc+0x34>
			dchw = (struct cogui_dc_hw *)dc;
 801b962:	687b      	ldr	r3, [r7, #4]
 801b964:	60bb      	str	r3, [r7, #8]
			gc = &dchw->owner->gc;
 801b966:	68bb      	ldr	r3, [r7, #8]
 801b968:	689b      	ldr	r3, [r3, #8]
 801b96a:	3330      	adds	r3, #48	; 0x30
 801b96c:	60fb      	str	r3, [r7, #12]
			break;
 801b96e:	bf00      	nop
	}
	
	return gc;
 801b970:	68fb      	ldr	r3, [r7, #12]
}
 801b972:	4618      	mov	r0, r3
 801b974:	3710      	adds	r7, #16
 801b976:	46bd      	mov	sp, r7
 801b978:	bd80      	pop	{r7, pc}
 801b97a:	bf00      	nop
 801b97c:	08022d64 	.word	0x08022d64
 801b980:	08022cb0 	.word	0x08022cb0

0801b984 <cogui_dc_get_owner>:
 * @details    This function is called to find owner widget by giving DC 
 *             pointer.
 *******************************************************************************
 */
struct cogui_widget *cogui_dc_get_owner(cogui_dc_t *dc)
{
 801b984:	b580      	push	{r7, lr}
 801b986:	b084      	sub	sp, #16
 801b988:	af00      	add	r7, sp, #0
 801b98a:	6078      	str	r0, [r7, #4]
	cogui_widget_t *owner = Co_NULL;
 801b98c:	2300      	movs	r3, #0
 801b98e:	60fb      	str	r3, [r7, #12]
	
	COGUI_ASSERT(dc != Co_NULL);
 801b990:	687b      	ldr	r3, [r7, #4]
 801b992:	2b00      	cmp	r3, #0
 801b994:	d104      	bne.n	801b9a0 <cogui_dc_get_owner+0x1c>
 801b996:	22fe      	movs	r2, #254	; 0xfe
 801b998:	4909      	ldr	r1, [pc, #36]	; (801b9c0 <cogui_dc_get_owner+0x3c>)
 801b99a:	480a      	ldr	r0, [pc, #40]	; (801b9c4 <cogui_dc_get_owner+0x40>)
 801b99c:	f001 fc46 	bl	801d22c <cogui_assert_handler>
	
	switch(dc->type) {
 801b9a0:	687b      	ldr	r3, [r7, #4]
 801b9a2:	781b      	ldrb	r3, [r3, #0]
 801b9a4:	2b01      	cmp	r3, #1
 801b9a6:	d000      	beq.n	801b9aa <cogui_dc_get_owner+0x26>
			break;
		}

		case COGUI_DC_BUFFER:
		default:
			break;
 801b9a8:	e005      	b.n	801b9b6 <cogui_dc_get_owner+0x32>
			dchw = (struct cogui_dc_hw *)dc;
 801b9aa:	687b      	ldr	r3, [r7, #4]
 801b9ac:	60bb      	str	r3, [r7, #8]
			owner = dchw->owner;
 801b9ae:	68bb      	ldr	r3, [r7, #8]
 801b9b0:	689b      	ldr	r3, [r3, #8]
 801b9b2:	60fb      	str	r3, [r7, #12]
			break;
 801b9b4:	bf00      	nop
	}
	
	return owner;
 801b9b6:	68fb      	ldr	r3, [r7, #12]
}
 801b9b8:	4618      	mov	r0, r3
 801b9ba:	3710      	adds	r7, #16
 801b9bc:	46bd      	mov	sp, r7
 801b9be:	bd80      	pop	{r7, pc}
 801b9c0:	08022d74 	.word	0x08022d74
 801b9c4:	08022cb0 	.word	0x08022cb0

0801b9c8 <cogui_dc_begin_drawing>:
 * @details    This function is called to start drawing by create a DC engine
 *             for it.
 *******************************************************************************
 */
cogui_dc_t *cogui_dc_begin_drawing(cogui_widget_t *owner)
{
 801b9c8:	b580      	push	{r7, lr}
 801b9ca:	b084      	sub	sp, #16
 801b9cc:	af00      	add	r7, sp, #0
 801b9ce:	6078      	str	r0, [r7, #4]
    cogui_dc_t *dc;

    COGUI_ASSERT(owner != Co_NULL);
 801b9d0:	687b      	ldr	r3, [r7, #4]
 801b9d2:	2b00      	cmp	r3, #0
 801b9d4:	d105      	bne.n	801b9e2 <cogui_dc_begin_drawing+0x1a>
 801b9d6:	f44f 7291 	mov.w	r2, #290	; 0x122
 801b9da:	4908      	ldr	r1, [pc, #32]	; (801b9fc <cogui_dc_begin_drawing+0x34>)
 801b9dc:	4808      	ldr	r0, [pc, #32]	; (801ba00 <cogui_dc_begin_drawing+0x38>)
 801b9de:	f001 fc25 	bl	801d22c <cogui_assert_handler>

#if (COGUI_SCREEN_TYPE == 0)
    /* call hardware interface */
    dc = cogui_dc_hw_create(owner);
 801b9e2:	6878      	ldr	r0, [r7, #4]
 801b9e4:	f000 f828 	bl	801ba38 <cogui_dc_hw_create>
 801b9e8:	60f8      	str	r0, [r7, #12]
#else
#endif

    /* put dc pointer into owner structure */
    owner->dc_engine = dc;
 801b9ea:	687b      	ldr	r3, [r7, #4]
 801b9ec:	68fa      	ldr	r2, [r7, #12]
 801b9ee:	629a      	str	r2, [r3, #40]	; 0x28

    return dc;
 801b9f0:	68fb      	ldr	r3, [r7, #12]
}
 801b9f2:	4618      	mov	r0, r3
 801b9f4:	3710      	adds	r7, #16
 801b9f6:	46bd      	mov	sp, r7
 801b9f8:	bd80      	pop	{r7, pc}
 801b9fa:	bf00      	nop
 801b9fc:	08022d88 	.word	0x08022d88
 801ba00:	08022cc0 	.word	0x08022cc0

0801ba04 <cogui_dc_end_drawing>:
 * @par Description
 * @details    This function is called to free a DC pointer.
 *******************************************************************************
 */
void cogui_dc_end_drawing(cogui_dc_t *dc)
{
 801ba04:	b580      	push	{r7, lr}
 801ba06:	b082      	sub	sp, #8
 801ba08:	af00      	add	r7, sp, #0
 801ba0a:	6078      	str	r0, [r7, #4]
    COGUI_ASSERT(dc != Co_NULL);
 801ba0c:	687b      	ldr	r3, [r7, #4]
 801ba0e:	2b00      	cmp	r3, #0
 801ba10:	d105      	bne.n	801ba1e <cogui_dc_end_drawing+0x1a>
 801ba12:	f240 123d 	movw	r2, #317	; 0x13d
 801ba16:	4906      	ldr	r1, [pc, #24]	; (801ba30 <cogui_dc_end_drawing+0x2c>)
 801ba18:	4806      	ldr	r0, [pc, #24]	; (801ba34 <cogui_dc_end_drawing+0x30>)
 801ba1a:	f001 fc07 	bl	801d22c <cogui_assert_handler>

    /* call DC's fini function */
    dc->engine->fini(dc);
 801ba1e:	687b      	ldr	r3, [r7, #4]
 801ba20:	685b      	ldr	r3, [r3, #4]
 801ba22:	695b      	ldr	r3, [r3, #20]
 801ba24:	6878      	ldr	r0, [r7, #4]
 801ba26:	4798      	blx	r3
}
 801ba28:	bf00      	nop
 801ba2a:	3708      	adds	r7, #8
 801ba2c:	46bd      	mov	sp, r7
 801ba2e:	bd80      	pop	{r7, pc}
 801ba30:	08022da0 	.word	0x08022da0
 801ba34:	08022cb0 	.word	0x08022cb0

0801ba38 <cogui_dc_hw_create>:
 * @param[out] None
 * @retval     *dc		DC pointer which we create     
 *******************************************************************************
 */
cogui_dc_t *cogui_dc_hw_create(cogui_widget_t *owner)
{
 801ba38:	b580      	push	{r7, lr}
 801ba3a:	b084      	sub	sp, #16
 801ba3c:	af00      	add	r7, sp, #0
 801ba3e:	6078      	str	r0, [r7, #4]
    struct cogui_dc_hw *dc;

    if (owner == Co_NULL)
 801ba40:	687b      	ldr	r3, [r7, #4]
 801ba42:	2b00      	cmp	r3, #0
 801ba44:	d101      	bne.n	801ba4a <cogui_dc_hw_create+0x12>
        return Co_NULL;
 801ba46:	2300      	movs	r3, #0
 801ba48:	e017      	b.n	801ba7a <cogui_dc_hw_create+0x42>

    dc = (struct cogui_dc_hw *) cogui_malloc(sizeof(struct cogui_dc_hw));
 801ba4a:	2010      	movs	r0, #16
 801ba4c:	f000 feee 	bl	801c82c <cogui_malloc>
 801ba50:	60f8      	str	r0, [r7, #12]
    if (dc) {
 801ba52:	68fb      	ldr	r3, [r7, #12]
 801ba54:	2b00      	cmp	r3, #0
 801ba56:	d00f      	beq.n	801ba78 <cogui_dc_hw_create+0x40>
        dc->parent.type = COGUI_DC_HW;
 801ba58:	68fb      	ldr	r3, [r7, #12]
 801ba5a:	2201      	movs	r2, #1
 801ba5c:	701a      	strb	r2, [r3, #0]
        dc->parent.engine = &dc_hw_engine;
 801ba5e:	68fb      	ldr	r3, [r7, #12]
 801ba60:	4a08      	ldr	r2, [pc, #32]	; (801ba84 <cogui_dc_hw_create+0x4c>)
 801ba62:	605a      	str	r2, [r3, #4]
        dc->owner = owner;
 801ba64:	68fb      	ldr	r3, [r7, #12]
 801ba66:	687a      	ldr	r2, [r7, #4]
 801ba68:	609a      	str	r2, [r3, #8]
        dc->hw_driver = cogui_graphic_driver_get_default();
 801ba6a:	f000 fa8b 	bl	801bf84 <cogui_graphic_driver_get_default>
 801ba6e:	4602      	mov	r2, r0
 801ba70:	68fb      	ldr	r3, [r7, #12]
 801ba72:	60da      	str	r2, [r3, #12]
		
        return (cogui_dc_t *)dc;
 801ba74:	68fb      	ldr	r3, [r7, #12]
 801ba76:	e000      	b.n	801ba7a <cogui_dc_hw_create+0x42>
    }

    return Co_NULL;
 801ba78:	2300      	movs	r3, #0
}
 801ba7a:	4618      	mov	r0, r3
 801ba7c:	3710      	adds	r7, #16
 801ba7e:	46bd      	mov	sp, r7
 801ba80:	bd80      	pop	{r7, pc}
 801ba82:	bf00      	nop
 801ba84:	20000110 	.word	0x20000110

0801ba88 <cogui_dc_hw_fini>:
 * @retval     GUI_E_OK	    Finish successfully
 * @retval     GUI_E_ERROR	Something wrong with this DC
 *******************************************************************************
 */
static StatusType cogui_dc_hw_fini(cogui_dc_t *dc)
{
 801ba88:	b580      	push	{r7, lr}
 801ba8a:	b082      	sub	sp, #8
 801ba8c:	af00      	add	r7, sp, #0
 801ba8e:	6078      	str	r0, [r7, #4]
    if (dc == Co_NULL || dc->type != COGUI_DC_HW)
 801ba90:	687b      	ldr	r3, [r7, #4]
 801ba92:	2b00      	cmp	r3, #0
 801ba94:	d003      	beq.n	801ba9e <cogui_dc_hw_fini+0x16>
 801ba96:	687b      	ldr	r3, [r7, #4]
 801ba98:	781b      	ldrb	r3, [r3, #0]
 801ba9a:	2b01      	cmp	r3, #1
 801ba9c:	d001      	beq.n	801baa2 <cogui_dc_hw_fini+0x1a>
        return GUI_E_ERROR;
 801ba9e:	2316      	movs	r3, #22
 801baa0:	e003      	b.n	801baaa <cogui_dc_hw_fini+0x22>

    /* release hardware DC */
    cogui_free(dc);
 801baa2:	6878      	ldr	r0, [r7, #4]
 801baa4:	f000 feda 	bl	801c85c <cogui_free>

    return GUI_E_OK;
 801baa8:	2317      	movs	r3, #23
}
 801baaa:	4618      	mov	r0, r3
 801baac:	3708      	adds	r7, #8
 801baae:	46bd      	mov	sp, r7
 801bab0:	bd80      	pop	{r7, pc}

0801bab2 <cogui_dc_hw_draw_point>:
 * @param[out] None
 * @retval     None
 *******************************************************************************
 */
static void cogui_dc_hw_draw_point(cogui_dc_t *self, co_int32_t x, co_int32_t y)
{
 801bab2:	b580      	push	{r7, lr}
 801bab4:	b086      	sub	sp, #24
 801bab6:	af00      	add	r7, sp, #0
 801bab8:	60f8      	str	r0, [r7, #12]
 801baba:	60b9      	str	r1, [r7, #8]
 801babc:	607a      	str	r2, [r7, #4]
    struct cogui_dc_hw *dc;

    COGUI_ASSERT(self != Co_NULL);
 801babe:	68fb      	ldr	r3, [r7, #12]
 801bac0:	2b00      	cmp	r3, #0
 801bac2:	d104      	bne.n	801bace <cogui_dc_hw_draw_point+0x1c>
 801bac4:	225c      	movs	r2, #92	; 0x5c
 801bac6:	4920      	ldr	r1, [pc, #128]	; (801bb48 <cogui_dc_hw_draw_point+0x96>)
 801bac8:	4820      	ldr	r0, [pc, #128]	; (801bb4c <cogui_dc_hw_draw_point+0x9a>)
 801baca:	f001 fbaf 	bl	801d22c <cogui_assert_handler>
    dc = (struct cogui_dc_hw *) self;
 801bace:	68fb      	ldr	r3, [r7, #12]
 801bad0:	617b      	str	r3, [r7, #20]

    /* determine the point is vaild or not */
    if (x < 0 || y < 0)
 801bad2:	68bb      	ldr	r3, [r7, #8]
 801bad4:	2b00      	cmp	r3, #0
 801bad6:	db2e      	blt.n	801bb36 <cogui_dc_hw_draw_point+0x84>
 801bad8:	687b      	ldr	r3, [r7, #4]
 801bada:	2b00      	cmp	r3, #0
 801badc:	db2b      	blt.n	801bb36 <cogui_dc_hw_draw_point+0x84>
        return;

    /* move x to logic x */
    x = x + dc->owner->extent.x1;
 801bade:	697b      	ldr	r3, [r7, #20]
 801bae0:	689b      	ldr	r3, [r3, #8]
 801bae2:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 801bae6:	461a      	mov	r2, r3
 801bae8:	68bb      	ldr	r3, [r7, #8]
 801baea:	4413      	add	r3, r2
 801baec:	60bb      	str	r3, [r7, #8]
    if (x >= dc->owner->extent.x2) 
 801baee:	697b      	ldr	r3, [r7, #20]
 801baf0:	689b      	ldr	r3, [r3, #8]
 801baf2:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 801baf6:	461a      	mov	r2, r3
 801baf8:	68bb      	ldr	r3, [r7, #8]
 801bafa:	4293      	cmp	r3, r2
 801bafc:	da1d      	bge.n	801bb3a <cogui_dc_hw_draw_point+0x88>
        return;
    
    /* move y to logic y */
    y = y + dc->owner->extent.y1;
 801bafe:	697b      	ldr	r3, [r7, #20]
 801bb00:	689b      	ldr	r3, [r3, #8]
 801bb02:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 801bb06:	461a      	mov	r2, r3
 801bb08:	687b      	ldr	r3, [r7, #4]
 801bb0a:	4413      	add	r3, r2
 801bb0c:	607b      	str	r3, [r7, #4]
    if (y >= dc->owner->extent.y2) 
 801bb0e:	697b      	ldr	r3, [r7, #20]
 801bb10:	689b      	ldr	r3, [r3, #8]
 801bb12:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 801bb16:	461a      	mov	r2, r3
 801bb18:	687b      	ldr	r3, [r7, #4]
 801bb1a:	4293      	cmp	r3, r2
 801bb1c:	da0f      	bge.n	801bb3e <cogui_dc_hw_draw_point+0x8c>
        return;

    /* draw this point */
    dc->hw_driver->ops->set_pixel(&(dc->owner->gc.foreground), x, y);
 801bb1e:	697b      	ldr	r3, [r7, #20]
 801bb20:	68db      	ldr	r3, [r3, #12]
 801bb22:	68db      	ldr	r3, [r3, #12]
 801bb24:	681b      	ldr	r3, [r3, #0]
 801bb26:	697a      	ldr	r2, [r7, #20]
 801bb28:	6892      	ldr	r2, [r2, #8]
 801bb2a:	f102 0030 	add.w	r0, r2, #48	; 0x30
 801bb2e:	687a      	ldr	r2, [r7, #4]
 801bb30:	68b9      	ldr	r1, [r7, #8]
 801bb32:	4798      	blx	r3
 801bb34:	e004      	b.n	801bb40 <cogui_dc_hw_draw_point+0x8e>
        return;
 801bb36:	bf00      	nop
 801bb38:	e002      	b.n	801bb40 <cogui_dc_hw_draw_point+0x8e>
        return;
 801bb3a:	bf00      	nop
 801bb3c:	e000      	b.n	801bb40 <cogui_dc_hw_draw_point+0x8e>
        return;
 801bb3e:	bf00      	nop
}
 801bb40:	3718      	adds	r7, #24
 801bb42:	46bd      	mov	sp, r7
 801bb44:	bd80      	pop	{r7, pc}
 801bb46:	bf00      	nop
 801bb48:	08022dd0 	.word	0x08022dd0
 801bb4c:	08022db8 	.word	0x08022db8

0801bb50 <cogui_dc_hw_draw_color_point>:
 * @param[out] None
 * @retval     None
 *******************************************************************************
 */
static void cogui_dc_hw_draw_color_point(cogui_dc_t *self, co_int32_t x, co_int32_t y, cogui_color_t color)
{
 801bb50:	b580      	push	{r7, lr}
 801bb52:	b086      	sub	sp, #24
 801bb54:	af00      	add	r7, sp, #0
 801bb56:	60f8      	str	r0, [r7, #12]
 801bb58:	60b9      	str	r1, [r7, #8]
 801bb5a:	607a      	str	r2, [r7, #4]
    struct cogui_dc_hw *dc;

    COGUI_ASSERT(self != Co_NULL);
 801bb5c:	68fb      	ldr	r3, [r7, #12]
 801bb5e:	2b00      	cmp	r3, #0
 801bb60:	d104      	bne.n	801bb6c <cogui_dc_hw_draw_color_point+0x1c>
 801bb62:	2280      	movs	r2, #128	; 0x80
 801bb64:	491e      	ldr	r1, [pc, #120]	; (801bbe0 <cogui_dc_hw_draw_color_point+0x90>)
 801bb66:	481f      	ldr	r0, [pc, #124]	; (801bbe4 <cogui_dc_hw_draw_color_point+0x94>)
 801bb68:	f001 fb60 	bl	801d22c <cogui_assert_handler>
    dc = (struct cogui_dc_hw *) self;
 801bb6c:	68fb      	ldr	r3, [r7, #12]
 801bb6e:	617b      	str	r3, [r7, #20]

    /* determine the point is vaild or not */
    if (x < 0 || y < 0)
 801bb70:	68bb      	ldr	r3, [r7, #8]
 801bb72:	2b00      	cmp	r3, #0
 801bb74:	db2c      	blt.n	801bbd0 <cogui_dc_hw_draw_color_point+0x80>
 801bb76:	687b      	ldr	r3, [r7, #4]
 801bb78:	2b00      	cmp	r3, #0
 801bb7a:	db29      	blt.n	801bbd0 <cogui_dc_hw_draw_color_point+0x80>
        return;

    /* move x to logic x */
    x = x + dc->owner->extent.x1;
 801bb7c:	697b      	ldr	r3, [r7, #20]
 801bb7e:	689b      	ldr	r3, [r3, #8]
 801bb80:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 801bb84:	461a      	mov	r2, r3
 801bb86:	68bb      	ldr	r3, [r7, #8]
 801bb88:	4413      	add	r3, r2
 801bb8a:	60bb      	str	r3, [r7, #8]
    if (x >= dc->owner->extent.x2)
 801bb8c:	697b      	ldr	r3, [r7, #20]
 801bb8e:	689b      	ldr	r3, [r3, #8]
 801bb90:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 801bb94:	461a      	mov	r2, r3
 801bb96:	68bb      	ldr	r3, [r7, #8]
 801bb98:	4293      	cmp	r3, r2
 801bb9a:	da1b      	bge.n	801bbd4 <cogui_dc_hw_draw_color_point+0x84>
        return;
    
    /* move y to logic y */
    y = y + dc->owner->extent.y1;
 801bb9c:	697b      	ldr	r3, [r7, #20]
 801bb9e:	689b      	ldr	r3, [r3, #8]
 801bba0:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 801bba4:	461a      	mov	r2, r3
 801bba6:	687b      	ldr	r3, [r7, #4]
 801bba8:	4413      	add	r3, r2
 801bbaa:	607b      	str	r3, [r7, #4]
    if (y >= dc->owner->extent.y2)
 801bbac:	697b      	ldr	r3, [r7, #20]
 801bbae:	689b      	ldr	r3, [r3, #8]
 801bbb0:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 801bbb4:	461a      	mov	r2, r3
 801bbb6:	687b      	ldr	r3, [r7, #4]
 801bbb8:	4293      	cmp	r3, r2
 801bbba:	da0d      	bge.n	801bbd8 <cogui_dc_hw_draw_color_point+0x88>
        return;
    
    /* draw this point */
    dc->hw_driver->ops->set_pixel(&color, x, y);
 801bbbc:	697b      	ldr	r3, [r7, #20]
 801bbbe:	68db      	ldr	r3, [r3, #12]
 801bbc0:	68db      	ldr	r3, [r3, #12]
 801bbc2:	681b      	ldr	r3, [r3, #0]
 801bbc4:	687a      	ldr	r2, [r7, #4]
 801bbc6:	68b9      	ldr	r1, [r7, #8]
 801bbc8:	f107 0020 	add.w	r0, r7, #32
 801bbcc:	4798      	blx	r3
 801bbce:	e004      	b.n	801bbda <cogui_dc_hw_draw_color_point+0x8a>
        return;
 801bbd0:	bf00      	nop
 801bbd2:	e002      	b.n	801bbda <cogui_dc_hw_draw_color_point+0x8a>
        return;
 801bbd4:	bf00      	nop
 801bbd6:	e000      	b.n	801bbda <cogui_dc_hw_draw_color_point+0x8a>
        return;
 801bbd8:	bf00      	nop
}
 801bbda:	3718      	adds	r7, #24
 801bbdc:	46bd      	mov	sp, r7
 801bbde:	bd80      	pop	{r7, pc}
 801bbe0:	08022de8 	.word	0x08022de8
 801bbe4:	08022db8 	.word	0x08022db8

0801bbe8 <cogui_dc_hw_draw_vline>:
 * @details    This function is called to draw a vertical line through hardware
 *             DC, this line is (y2-y1) height.
 *******************************************************************************
 */
static void cogui_dc_hw_draw_vline(cogui_dc_t *self, co_int32_t x, co_int32_t y1, co_int32_t y2)
{
 801bbe8:	b590      	push	{r4, r7, lr}
 801bbea:	b087      	sub	sp, #28
 801bbec:	af00      	add	r7, sp, #0
 801bbee:	60f8      	str	r0, [r7, #12]
 801bbf0:	60b9      	str	r1, [r7, #8]
 801bbf2:	607a      	str	r2, [r7, #4]
 801bbf4:	603b      	str	r3, [r7, #0]
    struct cogui_dc_hw *dc;

    COGUI_ASSERT(self != Co_NULL);
 801bbf6:	68fb      	ldr	r3, [r7, #12]
 801bbf8:	2b00      	cmp	r3, #0
 801bbfa:	d104      	bne.n	801bc06 <cogui_dc_hw_draw_vline+0x1e>
 801bbfc:	22a8      	movs	r2, #168	; 0xa8
 801bbfe:	493c      	ldr	r1, [pc, #240]	; (801bcf0 <cogui_dc_hw_draw_vline+0x108>)
 801bc00:	483c      	ldr	r0, [pc, #240]	; (801bcf4 <cogui_dc_hw_draw_vline+0x10c>)
 801bc02:	f001 fb13 	bl	801d22c <cogui_assert_handler>
    dc = (struct cogui_dc_hw *) self;
 801bc06:	68fb      	ldr	r3, [r7, #12]
 801bc08:	617b      	str	r3, [r7, #20]

    /* determine x is vaild or not */
    if (x < 0)
 801bc0a:	68bb      	ldr	r3, [r7, #8]
 801bc0c:	2b00      	cmp	r3, #0
 801bc0e:	db66      	blt.n	801bcde <cogui_dc_hw_draw_vline+0xf6>
        return;

    /* move x to logic x */
    x = x + dc->owner->extent.x1;
 801bc10:	697b      	ldr	r3, [r7, #20]
 801bc12:	689b      	ldr	r3, [r3, #8]
 801bc14:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 801bc18:	461a      	mov	r2, r3
 801bc1a:	68bb      	ldr	r3, [r7, #8]
 801bc1c:	4413      	add	r3, r2
 801bc1e:	60bb      	str	r3, [r7, #8]
    if (x >= dc->owner->extent.x2)
 801bc20:	697b      	ldr	r3, [r7, #20]
 801bc22:	689b      	ldr	r3, [r3, #8]
 801bc24:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 801bc28:	461a      	mov	r2, r3
 801bc2a:	68bb      	ldr	r3, [r7, #8]
 801bc2c:	4293      	cmp	r3, r2
 801bc2e:	da58      	bge.n	801bce2 <cogui_dc_hw_draw_vline+0xfa>
        return;

    /* move y1 and y2 to logic */    
    y1 = y1 + dc->owner->extent.y1;
 801bc30:	697b      	ldr	r3, [r7, #20]
 801bc32:	689b      	ldr	r3, [r3, #8]
 801bc34:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 801bc38:	461a      	mov	r2, r3
 801bc3a:	687b      	ldr	r3, [r7, #4]
 801bc3c:	4413      	add	r3, r2
 801bc3e:	607b      	str	r3, [r7, #4]
    y2 = y2 + dc->owner->extent.y1;
 801bc40:	697b      	ldr	r3, [r7, #20]
 801bc42:	689b      	ldr	r3, [r3, #8]
 801bc44:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 801bc48:	461a      	mov	r2, r3
 801bc4a:	683b      	ldr	r3, [r7, #0]
 801bc4c:	4413      	add	r3, r2
 801bc4e:	603b      	str	r3, [r7, #0]

    /* y1 should less than y2 */
    if (y1 > y2)
 801bc50:	687a      	ldr	r2, [r7, #4]
 801bc52:	683b      	ldr	r3, [r7, #0]
 801bc54:	429a      	cmp	r2, r3
 801bc56:	dd0b      	ble.n	801bc70 <cogui_dc_hw_draw_vline+0x88>
        _int_swap(y1, y2);
 801bc58:	687a      	ldr	r2, [r7, #4]
 801bc5a:	683b      	ldr	r3, [r7, #0]
 801bc5c:	4053      	eors	r3, r2
 801bc5e:	607b      	str	r3, [r7, #4]
 801bc60:	683a      	ldr	r2, [r7, #0]
 801bc62:	687b      	ldr	r3, [r7, #4]
 801bc64:	4053      	eors	r3, r2
 801bc66:	603b      	str	r3, [r7, #0]
 801bc68:	687a      	ldr	r2, [r7, #4]
 801bc6a:	683b      	ldr	r3, [r7, #0]
 801bc6c:	4053      	eors	r3, r2
 801bc6e:	607b      	str	r3, [r7, #4]
    
    /* determine y1 and y2 are vaild or not */
    if (y1 > dc->owner->extent.y2 || y2 < dc->owner->extent.y1)
 801bc70:	697b      	ldr	r3, [r7, #20]
 801bc72:	689b      	ldr	r3, [r3, #8]
 801bc74:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 801bc78:	461a      	mov	r2, r3
 801bc7a:	687b      	ldr	r3, [r7, #4]
 801bc7c:	4293      	cmp	r3, r2
 801bc7e:	dc32      	bgt.n	801bce6 <cogui_dc_hw_draw_vline+0xfe>
 801bc80:	697b      	ldr	r3, [r7, #20]
 801bc82:	689b      	ldr	r3, [r3, #8]
 801bc84:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 801bc88:	461a      	mov	r2, r3
 801bc8a:	683b      	ldr	r3, [r7, #0]
 801bc8c:	4293      	cmp	r3, r2
 801bc8e:	db2a      	blt.n	801bce6 <cogui_dc_hw_draw_vline+0xfe>
        return;

    /* if the line is over extent, cut it */
    if (y1 < dc->owner->extent.y1)
 801bc90:	697b      	ldr	r3, [r7, #20]
 801bc92:	689b      	ldr	r3, [r3, #8]
 801bc94:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 801bc98:	461a      	mov	r2, r3
 801bc9a:	687b      	ldr	r3, [r7, #4]
 801bc9c:	4293      	cmp	r3, r2
 801bc9e:	da04      	bge.n	801bcaa <cogui_dc_hw_draw_vline+0xc2>
        y1 = dc->owner->extent.y1;
 801bca0:	697b      	ldr	r3, [r7, #20]
 801bca2:	689b      	ldr	r3, [r3, #8]
 801bca4:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 801bca8:	607b      	str	r3, [r7, #4]
    
    if (y2 > dc->owner->extent.y2)
 801bcaa:	697b      	ldr	r3, [r7, #20]
 801bcac:	689b      	ldr	r3, [r3, #8]
 801bcae:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 801bcb2:	461a      	mov	r2, r3
 801bcb4:	683b      	ldr	r3, [r7, #0]
 801bcb6:	4293      	cmp	r3, r2
 801bcb8:	dd04      	ble.n	801bcc4 <cogui_dc_hw_draw_vline+0xdc>
        y2 = dc->owner->extent.y2;
 801bcba:	697b      	ldr	r3, [r7, #20]
 801bcbc:	689b      	ldr	r3, [r3, #8]
 801bcbe:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 801bcc2:	603b      	str	r3, [r7, #0]

    /* draw this line */
    dc->hw_driver->ops->draw_vline(&(dc->owner->gc.foreground), x, y1, y2);
 801bcc4:	697b      	ldr	r3, [r7, #20]
 801bcc6:	68db      	ldr	r3, [r3, #12]
 801bcc8:	68db      	ldr	r3, [r3, #12]
 801bcca:	68dc      	ldr	r4, [r3, #12]
 801bccc:	697b      	ldr	r3, [r7, #20]
 801bcce:	689b      	ldr	r3, [r3, #8]
 801bcd0:	f103 0030 	add.w	r0, r3, #48	; 0x30
 801bcd4:	683b      	ldr	r3, [r7, #0]
 801bcd6:	687a      	ldr	r2, [r7, #4]
 801bcd8:	68b9      	ldr	r1, [r7, #8]
 801bcda:	47a0      	blx	r4
 801bcdc:	e004      	b.n	801bce8 <cogui_dc_hw_draw_vline+0x100>
        return;
 801bcde:	bf00      	nop
 801bce0:	e002      	b.n	801bce8 <cogui_dc_hw_draw_vline+0x100>
        return;
 801bce2:	bf00      	nop
 801bce4:	e000      	b.n	801bce8 <cogui_dc_hw_draw_vline+0x100>
        return;
 801bce6:	bf00      	nop
}
 801bce8:	371c      	adds	r7, #28
 801bcea:	46bd      	mov	sp, r7
 801bcec:	bd90      	pop	{r4, r7, pc}
 801bcee:	bf00      	nop
 801bcf0:	08022e08 	.word	0x08022e08
 801bcf4:	08022db8 	.word	0x08022db8

0801bcf8 <cogui_dc_hw_draw_hline>:
 * @details    This function is called to draw a horizontal line through hardware
 *             DC, this line is (x2-x1) width.
 *******************************************************************************
 */
static void cogui_dc_hw_draw_hline(cogui_dc_t *self, co_int32_t x1, co_int32_t x2, co_int32_t y)
{
 801bcf8:	b590      	push	{r4, r7, lr}
 801bcfa:	b087      	sub	sp, #28
 801bcfc:	af00      	add	r7, sp, #0
 801bcfe:	60f8      	str	r0, [r7, #12]
 801bd00:	60b9      	str	r1, [r7, #8]
 801bd02:	607a      	str	r2, [r7, #4]
 801bd04:	603b      	str	r3, [r7, #0]
    struct cogui_dc_hw *dc;

    COGUI_ASSERT(self != Co_NULL);
 801bd06:	68fb      	ldr	r3, [r7, #12]
 801bd08:	2b00      	cmp	r3, #0
 801bd0a:	d104      	bne.n	801bd16 <cogui_dc_hw_draw_hline+0x1e>
 801bd0c:	22de      	movs	r2, #222	; 0xde
 801bd0e:	493c      	ldr	r1, [pc, #240]	; (801be00 <cogui_dc_hw_draw_hline+0x108>)
 801bd10:	483c      	ldr	r0, [pc, #240]	; (801be04 <cogui_dc_hw_draw_hline+0x10c>)
 801bd12:	f001 fa8b 	bl	801d22c <cogui_assert_handler>
    dc = (struct cogui_dc_hw *) self;
 801bd16:	68fb      	ldr	r3, [r7, #12]
 801bd18:	617b      	str	r3, [r7, #20]

    /* determine y is vaild or not */
    if (y < 0)
 801bd1a:	683b      	ldr	r3, [r7, #0]
 801bd1c:	2b00      	cmp	r3, #0
 801bd1e:	db66      	blt.n	801bdee <cogui_dc_hw_draw_hline+0xf6>
        return;
    
    /* move y to logic y */
    y = y + dc->owner->extent.y1;
 801bd20:	697b      	ldr	r3, [r7, #20]
 801bd22:	689b      	ldr	r3, [r3, #8]
 801bd24:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 801bd28:	461a      	mov	r2, r3
 801bd2a:	683b      	ldr	r3, [r7, #0]
 801bd2c:	4413      	add	r3, r2
 801bd2e:	603b      	str	r3, [r7, #0]
    if (y >= dc->owner->extent.y2)
 801bd30:	697b      	ldr	r3, [r7, #20]
 801bd32:	689b      	ldr	r3, [r3, #8]
 801bd34:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 801bd38:	461a      	mov	r2, r3
 801bd3a:	683b      	ldr	r3, [r7, #0]
 801bd3c:	4293      	cmp	r3, r2
 801bd3e:	da58      	bge.n	801bdf2 <cogui_dc_hw_draw_hline+0xfa>
        return;

    /* move x1 and x2 to logic */    
    x1 = x1 + dc->owner->extent.x1;
 801bd40:	697b      	ldr	r3, [r7, #20]
 801bd42:	689b      	ldr	r3, [r3, #8]
 801bd44:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 801bd48:	461a      	mov	r2, r3
 801bd4a:	68bb      	ldr	r3, [r7, #8]
 801bd4c:	4413      	add	r3, r2
 801bd4e:	60bb      	str	r3, [r7, #8]
    x2 = x2 + dc->owner->extent.x1;
 801bd50:	697b      	ldr	r3, [r7, #20]
 801bd52:	689b      	ldr	r3, [r3, #8]
 801bd54:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 801bd58:	461a      	mov	r2, r3
 801bd5a:	687b      	ldr	r3, [r7, #4]
 801bd5c:	4413      	add	r3, r2
 801bd5e:	607b      	str	r3, [r7, #4]

    /* x1 should less than x2 */
    if (x1 > x2)
 801bd60:	68ba      	ldr	r2, [r7, #8]
 801bd62:	687b      	ldr	r3, [r7, #4]
 801bd64:	429a      	cmp	r2, r3
 801bd66:	dd0b      	ble.n	801bd80 <cogui_dc_hw_draw_hline+0x88>
        _int_swap(x1, x2);
 801bd68:	68ba      	ldr	r2, [r7, #8]
 801bd6a:	687b      	ldr	r3, [r7, #4]
 801bd6c:	4053      	eors	r3, r2
 801bd6e:	60bb      	str	r3, [r7, #8]
 801bd70:	687a      	ldr	r2, [r7, #4]
 801bd72:	68bb      	ldr	r3, [r7, #8]
 801bd74:	4053      	eors	r3, r2
 801bd76:	607b      	str	r3, [r7, #4]
 801bd78:	68ba      	ldr	r2, [r7, #8]
 801bd7a:	687b      	ldr	r3, [r7, #4]
 801bd7c:	4053      	eors	r3, r2
 801bd7e:	60bb      	str	r3, [r7, #8]
    
    /* determine x1 and x2 are vaild or not */
    if (x1 > dc->owner->extent.x2 || x2 < dc->owner->extent.x1)
 801bd80:	697b      	ldr	r3, [r7, #20]
 801bd82:	689b      	ldr	r3, [r3, #8]
 801bd84:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 801bd88:	461a      	mov	r2, r3
 801bd8a:	68bb      	ldr	r3, [r7, #8]
 801bd8c:	4293      	cmp	r3, r2
 801bd8e:	dc32      	bgt.n	801bdf6 <cogui_dc_hw_draw_hline+0xfe>
 801bd90:	697b      	ldr	r3, [r7, #20]
 801bd92:	689b      	ldr	r3, [r3, #8]
 801bd94:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 801bd98:	461a      	mov	r2, r3
 801bd9a:	687b      	ldr	r3, [r7, #4]
 801bd9c:	4293      	cmp	r3, r2
 801bd9e:	db2a      	blt.n	801bdf6 <cogui_dc_hw_draw_hline+0xfe>
        return;

    /* if the line is over extent, cut it */
    if (x1 < dc->owner->extent.x1)
 801bda0:	697b      	ldr	r3, [r7, #20]
 801bda2:	689b      	ldr	r3, [r3, #8]
 801bda4:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 801bda8:	461a      	mov	r2, r3
 801bdaa:	68bb      	ldr	r3, [r7, #8]
 801bdac:	4293      	cmp	r3, r2
 801bdae:	da04      	bge.n	801bdba <cogui_dc_hw_draw_hline+0xc2>
        x1 = dc->owner->extent.x1;
 801bdb0:	697b      	ldr	r3, [r7, #20]
 801bdb2:	689b      	ldr	r3, [r3, #8]
 801bdb4:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 801bdb8:	60bb      	str	r3, [r7, #8]
    
    if (x2 > dc->owner->extent.x2)
 801bdba:	697b      	ldr	r3, [r7, #20]
 801bdbc:	689b      	ldr	r3, [r3, #8]
 801bdbe:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 801bdc2:	461a      	mov	r2, r3
 801bdc4:	687b      	ldr	r3, [r7, #4]
 801bdc6:	4293      	cmp	r3, r2
 801bdc8:	dd04      	ble.n	801bdd4 <cogui_dc_hw_draw_hline+0xdc>
        x2 = dc->owner->extent.x2;
 801bdca:	697b      	ldr	r3, [r7, #20]
 801bdcc:	689b      	ldr	r3, [r3, #8]
 801bdce:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 801bdd2:	607b      	str	r3, [r7, #4]

    /* draw this line */
    dc->hw_driver->ops->draw_hline(&(dc->owner->gc.foreground), x1, x2, y);
 801bdd4:	697b      	ldr	r3, [r7, #20]
 801bdd6:	68db      	ldr	r3, [r3, #12]
 801bdd8:	68db      	ldr	r3, [r3, #12]
 801bdda:	689c      	ldr	r4, [r3, #8]
 801bddc:	697b      	ldr	r3, [r7, #20]
 801bdde:	689b      	ldr	r3, [r3, #8]
 801bde0:	f103 0030 	add.w	r0, r3, #48	; 0x30
 801bde4:	683b      	ldr	r3, [r7, #0]
 801bde6:	687a      	ldr	r2, [r7, #4]
 801bde8:	68b9      	ldr	r1, [r7, #8]
 801bdea:	47a0      	blx	r4
 801bdec:	e004      	b.n	801bdf8 <cogui_dc_hw_draw_hline+0x100>
        return;
 801bdee:	bf00      	nop
 801bdf0:	e002      	b.n	801bdf8 <cogui_dc_hw_draw_hline+0x100>
        return;
 801bdf2:	bf00      	nop
 801bdf4:	e000      	b.n	801bdf8 <cogui_dc_hw_draw_hline+0x100>
        return;
 801bdf6:	bf00      	nop
}
 801bdf8:	371c      	adds	r7, #28
 801bdfa:	46bd      	mov	sp, r7
 801bdfc:	bd90      	pop	{r4, r7, pc}
 801bdfe:	bf00      	nop
 801be00:	08022e20 	.word	0x08022e20
 801be04:	08022db8 	.word	0x08022db8

0801be08 <cogui_dc_hw_fill_rect>:
 * @details    This function is called to filled a rectangle line through hardware
 *             DC, and choose graph context's background to fill.
 *******************************************************************************
 */
static void cogui_dc_hw_fill_rect(cogui_dc_t *self, cogui_rect_t *rect)
{
 801be08:	b590      	push	{r4, r7, lr}
 801be0a:	b08b      	sub	sp, #44	; 0x2c
 801be0c:	af00      	add	r7, sp, #0
 801be0e:	6078      	str	r0, [r7, #4]
 801be10:	6039      	str	r1, [r7, #0]
    cogui_color_t color;
    co_int32_t y1, y2, x1, x2;
    struct cogui_dc_hw *dc;

    COGUI_ASSERT(rect);
 801be12:	683b      	ldr	r3, [r7, #0]
 801be14:	2b00      	cmp	r3, #0
 801be16:	d105      	bne.n	801be24 <cogui_dc_hw_fill_rect+0x1c>
 801be18:	f44f 728a 	mov.w	r2, #276	; 0x114
 801be1c:	4956      	ldr	r1, [pc, #344]	; (801bf78 <cogui_dc_hw_fill_rect+0x170>)
 801be1e:	4857      	ldr	r0, [pc, #348]	; (801bf7c <cogui_dc_hw_fill_rect+0x174>)
 801be20:	f001 fa04 	bl	801d22c <cogui_assert_handler>
    COGUI_ASSERT(self != Co_NULL);
 801be24:	687b      	ldr	r3, [r7, #4]
 801be26:	2b00      	cmp	r3, #0
 801be28:	d105      	bne.n	801be36 <cogui_dc_hw_fill_rect+0x2e>
 801be2a:	f240 1215 	movw	r2, #277	; 0x115
 801be2e:	4952      	ldr	r1, [pc, #328]	; (801bf78 <cogui_dc_hw_fill_rect+0x170>)
 801be30:	4853      	ldr	r0, [pc, #332]	; (801bf80 <cogui_dc_hw_fill_rect+0x178>)
 801be32:	f001 f9fb 	bl	801d22c <cogui_assert_handler>
    dc = (struct cogui_dc_hw *) self;
 801be36:	687b      	ldr	r3, [r7, #4]
 801be38:	617b      	str	r3, [r7, #20]

    /* get background color */
    color = dc->owner->gc.background;
 801be3a:	697b      	ldr	r3, [r7, #20]
 801be3c:	689b      	ldr	r3, [r3, #8]
 801be3e:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 801be42:	e9c7 3402 	strd	r3, r4, [r7, #8]

    /* move to logic position */
    x1 = rect->x1 + dc->owner->extent.x1;
 801be46:	683b      	ldr	r3, [r7, #0]
 801be48:	f9b3 3000 	ldrsh.w	r3, [r3]
 801be4c:	461a      	mov	r2, r3
 801be4e:	697b      	ldr	r3, [r7, #20]
 801be50:	689b      	ldr	r3, [r3, #8]
 801be52:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 801be56:	4413      	add	r3, r2
 801be58:	61fb      	str	r3, [r7, #28]
    if (x1 > dc->owner->extent.x2)
 801be5a:	697b      	ldr	r3, [r7, #20]
 801be5c:	689b      	ldr	r3, [r3, #8]
 801be5e:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 801be62:	461a      	mov	r2, r3
 801be64:	69fb      	ldr	r3, [r7, #28]
 801be66:	4293      	cmp	r3, r2
 801be68:	dc7c      	bgt.n	801bf64 <cogui_dc_hw_fill_rect+0x15c>
        return;
    
    if (x1 < dc->owner->extent.x1)
 801be6a:	697b      	ldr	r3, [r7, #20]
 801be6c:	689b      	ldr	r3, [r3, #8]
 801be6e:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 801be72:	461a      	mov	r2, r3
 801be74:	69fb      	ldr	r3, [r7, #28]
 801be76:	4293      	cmp	r3, r2
 801be78:	da04      	bge.n	801be84 <cogui_dc_hw_fill_rect+0x7c>
        x1 = dc->owner->extent.x1;
 801be7a:	697b      	ldr	r3, [r7, #20]
 801be7c:	689b      	ldr	r3, [r3, #8]
 801be7e:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 801be82:	61fb      	str	r3, [r7, #28]
    
    x2 = rect->x2 + dc->owner->extent.x1;
 801be84:	683b      	ldr	r3, [r7, #0]
 801be86:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801be8a:	461a      	mov	r2, r3
 801be8c:	697b      	ldr	r3, [r7, #20]
 801be8e:	689b      	ldr	r3, [r3, #8]
 801be90:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 801be94:	4413      	add	r3, r2
 801be96:	61bb      	str	r3, [r7, #24]
    if (x2 < dc->owner->extent.x1)
 801be98:	697b      	ldr	r3, [r7, #20]
 801be9a:	689b      	ldr	r3, [r3, #8]
 801be9c:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 801bea0:	461a      	mov	r2, r3
 801bea2:	69bb      	ldr	r3, [r7, #24]
 801bea4:	4293      	cmp	r3, r2
 801bea6:	db5f      	blt.n	801bf68 <cogui_dc_hw_fill_rect+0x160>
        return;
    
    if (x2 > dc->owner->extent.x2)
 801bea8:	697b      	ldr	r3, [r7, #20]
 801beaa:	689b      	ldr	r3, [r3, #8]
 801beac:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 801beb0:	461a      	mov	r2, r3
 801beb2:	69bb      	ldr	r3, [r7, #24]
 801beb4:	4293      	cmp	r3, r2
 801beb6:	dd04      	ble.n	801bec2 <cogui_dc_hw_fill_rect+0xba>
        x2 = dc->owner->extent.x2;        
 801beb8:	697b      	ldr	r3, [r7, #20]
 801beba:	689b      	ldr	r3, [r3, #8]
 801bebc:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 801bec0:	61bb      	str	r3, [r7, #24]
    

    y1 = rect->y1 + dc->owner->extent.y1;
 801bec2:	683b      	ldr	r3, [r7, #0]
 801bec4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801bec8:	461a      	mov	r2, r3
 801beca:	697b      	ldr	r3, [r7, #20]
 801becc:	689b      	ldr	r3, [r3, #8]
 801bece:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 801bed2:	4413      	add	r3, r2
 801bed4:	627b      	str	r3, [r7, #36]	; 0x24
    if (y1 > dc->owner->extent.y2)
 801bed6:	697b      	ldr	r3, [r7, #20]
 801bed8:	689b      	ldr	r3, [r3, #8]
 801beda:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 801bede:	461a      	mov	r2, r3
 801bee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bee2:	4293      	cmp	r3, r2
 801bee4:	dc42      	bgt.n	801bf6c <cogui_dc_hw_fill_rect+0x164>
        return;
    
    if (y1 < dc->owner->extent.y1)
 801bee6:	697b      	ldr	r3, [r7, #20]
 801bee8:	689b      	ldr	r3, [r3, #8]
 801beea:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 801beee:	461a      	mov	r2, r3
 801bef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bef2:	4293      	cmp	r3, r2
 801bef4:	da04      	bge.n	801bf00 <cogui_dc_hw_fill_rect+0xf8>
        y1 = dc->owner->extent.y1;
 801bef6:	697b      	ldr	r3, [r7, #20]
 801bef8:	689b      	ldr	r3, [r3, #8]
 801befa:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 801befe:	627b      	str	r3, [r7, #36]	; 0x24
    
    y2 = rect->y2 + dc->owner->extent.y1;
 801bf00:	683b      	ldr	r3, [r7, #0]
 801bf02:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801bf06:	461a      	mov	r2, r3
 801bf08:	697b      	ldr	r3, [r7, #20]
 801bf0a:	689b      	ldr	r3, [r3, #8]
 801bf0c:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 801bf10:	4413      	add	r3, r2
 801bf12:	623b      	str	r3, [r7, #32]
    if (y2 < dc->owner->extent.y1)
 801bf14:	697b      	ldr	r3, [r7, #20]
 801bf16:	689b      	ldr	r3, [r3, #8]
 801bf18:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 801bf1c:	461a      	mov	r2, r3
 801bf1e:	6a3b      	ldr	r3, [r7, #32]
 801bf20:	4293      	cmp	r3, r2
 801bf22:	db25      	blt.n	801bf70 <cogui_dc_hw_fill_rect+0x168>
        return;
    
    if (y2 > dc->owner->extent.y2)
 801bf24:	697b      	ldr	r3, [r7, #20]
 801bf26:	689b      	ldr	r3, [r3, #8]
 801bf28:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 801bf2c:	461a      	mov	r2, r3
 801bf2e:	6a3b      	ldr	r3, [r7, #32]
 801bf30:	4293      	cmp	r3, r2
 801bf32:	dd12      	ble.n	801bf5a <cogui_dc_hw_fill_rect+0x152>
        y2 = dc->owner->extent.y2;
 801bf34:	697b      	ldr	r3, [r7, #20]
 801bf36:	689b      	ldr	r3, [r3, #8]
 801bf38:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 801bf3c:	623b      	str	r3, [r7, #32]
    
    /* fille rectangle */
    for (; y1 < y2; y1++) {
 801bf3e:	e00c      	b.n	801bf5a <cogui_dc_hw_fill_rect+0x152>
        dc->hw_driver->ops->draw_hline(&color, x1, x2, y1);
 801bf40:	697b      	ldr	r3, [r7, #20]
 801bf42:	68db      	ldr	r3, [r3, #12]
 801bf44:	68db      	ldr	r3, [r3, #12]
 801bf46:	689c      	ldr	r4, [r3, #8]
 801bf48:	f107 0008 	add.w	r0, r7, #8
 801bf4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bf4e:	69ba      	ldr	r2, [r7, #24]
 801bf50:	69f9      	ldr	r1, [r7, #28]
 801bf52:	47a0      	blx	r4
    for (; y1 < y2; y1++) {
 801bf54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bf56:	3301      	adds	r3, #1
 801bf58:	627b      	str	r3, [r7, #36]	; 0x24
 801bf5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801bf5c:	6a3b      	ldr	r3, [r7, #32]
 801bf5e:	429a      	cmp	r2, r3
 801bf60:	dbee      	blt.n	801bf40 <cogui_dc_hw_fill_rect+0x138>
 801bf62:	e006      	b.n	801bf72 <cogui_dc_hw_fill_rect+0x16a>
        return;
 801bf64:	bf00      	nop
 801bf66:	e004      	b.n	801bf72 <cogui_dc_hw_fill_rect+0x16a>
        return;
 801bf68:	bf00      	nop
 801bf6a:	e002      	b.n	801bf72 <cogui_dc_hw_fill_rect+0x16a>
        return;
 801bf6c:	bf00      	nop
 801bf6e:	e000      	b.n	801bf72 <cogui_dc_hw_fill_rect+0x16a>
        return;
 801bf70:	bf00      	nop
    }
}
 801bf72:	372c      	adds	r7, #44	; 0x2c
 801bf74:	46bd      	mov	sp, r7
 801bf76:	bd90      	pop	{r4, r7, pc}
 801bf78:	08022e38 	.word	0x08022e38
 801bf7c:	08022dc8 	.word	0x08022dc8
 801bf80:	08022db8 	.word	0x08022db8

0801bf84 <cogui_graphic_driver_get_default>:

static cogui_graphic_driver_t _driver;
static cogui_graphic_driver_t *_current_driver = &_driver;

cogui_graphic_driver_t *cogui_graphic_driver_get_default()
{   
 801bf84:	b480      	push	{r7}
 801bf86:	af00      	add	r7, sp, #0
    return _current_driver;
 801bf88:	4b03      	ldr	r3, [pc, #12]	; (801bf98 <cogui_graphic_driver_get_default+0x14>)
 801bf8a:	681b      	ldr	r3, [r3, #0]
}
 801bf8c:	4618      	mov	r0, r3
 801bf8e:	46bd      	mov	sp, r7
 801bf90:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bf94:	4770      	bx	lr
 801bf96:	bf00      	nop
 801bf98:	20000128 	.word	0x20000128

0801bf9c <cogui_set_graphic_driver>:

void cogui_set_graphic_driver(cogui_graphic_driver_t *driver)
{
 801bf9c:	b480      	push	{r7}
 801bf9e:	b083      	sub	sp, #12
 801bfa0:	af00      	add	r7, sp, #0
 801bfa2:	6078      	str	r0, [r7, #4]
	_current_driver = driver;
 801bfa4:	4a04      	ldr	r2, [pc, #16]	; (801bfb8 <cogui_set_graphic_driver+0x1c>)
 801bfa6:	687b      	ldr	r3, [r7, #4]
 801bfa8:	6013      	str	r3, [r2, #0]
}
 801bfaa:	bf00      	nop
 801bfac:	370c      	adds	r7, #12
 801bfae:	46bd      	mov	sp, r7
 801bfb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bfb4:	4770      	bx	lr
 801bfb6:	bf00      	nop
 801bfb8:	20000128 	.word	0x20000128

0801bfbc <cogui_lcd_puts>:
 * @param[out] None
 * @retval     None 
 *******************************************************************************
 */
void cogui_lcd_puts(co_uint16_t x, co_uint16_t y, char *str, cogui_font_t *font, cogui_dc_t *dc, cogui_rect_t *rect)
{
 801bfbc:	b580      	push	{r7, lr}
 801bfbe:	b086      	sub	sp, #24
 801bfc0:	af02      	add	r7, sp, #8
 801bfc2:	60ba      	str	r2, [r7, #8]
 801bfc4:	607b      	str	r3, [r7, #4]
 801bfc6:	4603      	mov	r3, r0
 801bfc8:	81fb      	strh	r3, [r7, #14]
 801bfca:	460b      	mov	r3, r1
 801bfcc:	81bb      	strh	r3, [r7, #12]
    while (*str) {
 801bfce:	e034      	b.n	801c03a <cogui_lcd_puts+0x7e>
        if (*str == '\n') {
 801bfd0:	68bb      	ldr	r3, [r7, #8]
 801bfd2:	781b      	ldrb	r3, [r3, #0]
 801bfd4:	2b0a      	cmp	r3, #10
 801bfd6:	d10c      	bne.n	801bff2 <cogui_lcd_puts+0x36>
			y += font->height;
 801bfd8:	687b      	ldr	r3, [r7, #4]
 801bfda:	88da      	ldrh	r2, [r3, #6]
 801bfdc:	89bb      	ldrh	r3, [r7, #12]
 801bfde:	4413      	add	r3, r2
 801bfe0:	81bb      	strh	r3, [r7, #12]
            x = rect->x1;
 801bfe2:	69fb      	ldr	r3, [r7, #28]
 801bfe4:	f9b3 3000 	ldrsh.w	r3, [r3]
 801bfe8:	81fb      	strh	r3, [r7, #14]
			
			str++;
 801bfea:	68bb      	ldr	r3, [r7, #8]
 801bfec:	3301      	adds	r3, #1
 801bfee:	60bb      	str	r3, [r7, #8]
			continue;
 801bff0:	e023      	b.n	801c03a <cogui_lcd_puts+0x7e>
		}

        cogui_lcd_putc(x, y, *str++, font, dc, rect);
 801bff2:	68bb      	ldr	r3, [r7, #8]
 801bff4:	1c5a      	adds	r2, r3, #1
 801bff6:	60ba      	str	r2, [r7, #8]
 801bff8:	781a      	ldrb	r2, [r3, #0]
 801bffa:	89b9      	ldrh	r1, [r7, #12]
 801bffc:	89f8      	ldrh	r0, [r7, #14]
 801bffe:	69fb      	ldr	r3, [r7, #28]
 801c000:	9301      	str	r3, [sp, #4]
 801c002:	69bb      	ldr	r3, [r7, #24]
 801c004:	9300      	str	r3, [sp, #0]
 801c006:	687b      	ldr	r3, [r7, #4]
 801c008:	f000 f81f 	bl	801c04a <cogui_lcd_putc>

        x += font->width;
 801c00c:	687b      	ldr	r3, [r7, #4]
 801c00e:	889a      	ldrh	r2, [r3, #4]
 801c010:	89fb      	ldrh	r3, [r7, #14]
 801c012:	4413      	add	r3, r2
 801c014:	81fb      	strh	r3, [r7, #14]

        if (x + font->width > rect->x2) {
 801c016:	89fb      	ldrh	r3, [r7, #14]
 801c018:	687a      	ldr	r2, [r7, #4]
 801c01a:	8892      	ldrh	r2, [r2, #4]
 801c01c:	4413      	add	r3, r2
 801c01e:	69fa      	ldr	r2, [r7, #28]
 801c020:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 801c024:	4293      	cmp	r3, r2
 801c026:	dd08      	ble.n	801c03a <cogui_lcd_puts+0x7e>
            y += font->height;
 801c028:	687b      	ldr	r3, [r7, #4]
 801c02a:	88da      	ldrh	r2, [r3, #6]
 801c02c:	89bb      	ldrh	r3, [r7, #12]
 801c02e:	4413      	add	r3, r2
 801c030:	81bb      	strh	r3, [r7, #12]
            x = rect->x1;
 801c032:	69fb      	ldr	r3, [r7, #28]
 801c034:	f9b3 3000 	ldrsh.w	r3, [r3]
 801c038:	81fb      	strh	r3, [r7, #14]
    while (*str) {
 801c03a:	68bb      	ldr	r3, [r7, #8]
 801c03c:	781b      	ldrb	r3, [r3, #0]
 801c03e:	2b00      	cmp	r3, #0
 801c040:	d1c6      	bne.n	801bfd0 <cogui_lcd_puts+0x14>
	    }
    }
}
 801c042:	bf00      	nop
 801c044:	3710      	adds	r7, #16
 801c046:	46bd      	mov	sp, r7
 801c048:	bd80      	pop	{r7, pc}

0801c04a <cogui_lcd_putc>:
 * @param[out] None
 * @retval     None 
 *******************************************************************************
 */
void cogui_lcd_putc(co_uint16_t x, co_uint16_t y, char c, cogui_font_t *font, cogui_dc_t *dc, cogui_rect_t *rect)
{	
 801c04a:	b580      	push	{r7, lr}
 801c04c:	b086      	sub	sp, #24
 801c04e:	af00      	add	r7, sp, #0
 801c050:	607b      	str	r3, [r7, #4]
 801c052:	4603      	mov	r3, r0
 801c054:	81fb      	strh	r3, [r7, #14]
 801c056:	460b      	mov	r3, r1
 801c058:	81bb      	strh	r3, [r7, #12]
 801c05a:	4613      	mov	r3, r2
 801c05c:	72fb      	strb	r3, [r7, #11]
	co_uint16_t i, j, f;
	for ( i=0; i<font->height; i++) {
 801c05e:	2300      	movs	r3, #0
 801c060:	82fb      	strh	r3, [r7, #22]
 801c062:	e02f      	b.n	801c0c4 <cogui_lcd_putc+0x7a>
		/* first element in font table is "space", which is 32 in ASCII */
		f = font->data[(c - 32)*font->height + i];
 801c064:	687b      	ldr	r3, [r7, #4]
 801c066:	689a      	ldr	r2, [r3, #8]
 801c068:	7afb      	ldrb	r3, [r7, #11]
 801c06a:	3b20      	subs	r3, #32
 801c06c:	6879      	ldr	r1, [r7, #4]
 801c06e:	88c9      	ldrh	r1, [r1, #6]
 801c070:	fb01 f103 	mul.w	r1, r1, r3
 801c074:	8afb      	ldrh	r3, [r7, #22]
 801c076:	440b      	add	r3, r1
 801c078:	005b      	lsls	r3, r3, #1
 801c07a:	4413      	add	r3, r2
 801c07c:	881b      	ldrh	r3, [r3, #0]
 801c07e:	827b      	strh	r3, [r7, #18]
		for ( j=0; j<font->width; j++) {
 801c080:	2300      	movs	r3, #0
 801c082:	82bb      	strh	r3, [r7, #20]
 801c084:	e016      	b.n	801c0b4 <cogui_lcd_putc+0x6a>
			if ((f << j) & 0x8000) {
 801c086:	8a7a      	ldrh	r2, [r7, #18]
 801c088:	8abb      	ldrh	r3, [r7, #20]
 801c08a:	fa02 f303 	lsl.w	r3, r2, r3
 801c08e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801c092:	2b00      	cmp	r3, #0
 801c094:	d00b      	beq.n	801c0ae <cogui_lcd_putc+0x64>
				dc->engine->draw_point(dc, x+j, y+i);
 801c096:	6a3b      	ldr	r3, [r7, #32]
 801c098:	685b      	ldr	r3, [r3, #4]
 801c09a:	681b      	ldr	r3, [r3, #0]
 801c09c:	89f9      	ldrh	r1, [r7, #14]
 801c09e:	8aba      	ldrh	r2, [r7, #20]
 801c0a0:	1888      	adds	r0, r1, r2
 801c0a2:	89b9      	ldrh	r1, [r7, #12]
 801c0a4:	8afa      	ldrh	r2, [r7, #22]
 801c0a6:	440a      	add	r2, r1
 801c0a8:	4601      	mov	r1, r0
 801c0aa:	6a38      	ldr	r0, [r7, #32]
 801c0ac:	4798      	blx	r3
		for ( j=0; j<font->width; j++) {
 801c0ae:	8abb      	ldrh	r3, [r7, #20]
 801c0b0:	3301      	adds	r3, #1
 801c0b2:	82bb      	strh	r3, [r7, #20]
 801c0b4:	687b      	ldr	r3, [r7, #4]
 801c0b6:	889b      	ldrh	r3, [r3, #4]
 801c0b8:	8aba      	ldrh	r2, [r7, #20]
 801c0ba:	429a      	cmp	r2, r3
 801c0bc:	d3e3      	bcc.n	801c086 <cogui_lcd_putc+0x3c>
	for ( i=0; i<font->height; i++) {
 801c0be:	8afb      	ldrh	r3, [r7, #22]
 801c0c0:	3301      	adds	r3, #1
 801c0c2:	82fb      	strh	r3, [r7, #22]
 801c0c4:	687b      	ldr	r3, [r7, #4]
 801c0c6:	88db      	ldrh	r3, [r3, #6]
 801c0c8:	8afa      	ldrh	r2, [r7, #22]
 801c0ca:	429a      	cmp	r2, r3
 801c0cc:	d3ca      	bcc.n	801c064 <cogui_lcd_putc+0x1a>
			}
		}
	}
}
 801c0ce:	bf00      	nop
 801c0d0:	3718      	adds	r7, #24
 801c0d2:	46bd      	mov	sp, r7
 801c0d4:	bd80      	pop	{r7, pc}

0801c0d6 <cogui_get_text_width>:
 * @param[out] None
 * @retval     text_width       Result of string widget.
 *******************************************************************************
 */
co_uint32_t cogui_get_text_width(char *str, cogui_font_t *font)
{
 801c0d6:	b590      	push	{r4, r7, lr}
 801c0d8:	b087      	sub	sp, #28
 801c0da:	af00      	add	r7, sp, #0
 801c0dc:	6078      	str	r0, [r7, #4]
 801c0de:	6039      	str	r1, [r7, #0]
    COGUI_ASSERT(font != Co_NULL);
 801c0e0:	683b      	ldr	r3, [r7, #0]
 801c0e2:	2b00      	cmp	r3, #0
 801c0e4:	d104      	bne.n	801c0f0 <cogui_get_text_width+0x1a>
 801c0e6:	2257      	movs	r2, #87	; 0x57
 801c0e8:	490f      	ldr	r1, [pc, #60]	; (801c128 <cogui_get_text_width+0x52>)
 801c0ea:	4810      	ldr	r0, [pc, #64]	; (801c12c <cogui_get_text_width+0x56>)
 801c0ec:	f001 f89e 	bl	801d22c <cogui_assert_handler>

    co_uint32_t text_width;
    co_uint64_t str_len = str != Co_NULL ? cogui_strlen(str) : 0;
 801c0f0:	687b      	ldr	r3, [r7, #4]
 801c0f2:	2b00      	cmp	r3, #0
 801c0f4:	d005      	beq.n	801c102 <cogui_get_text_width+0x2c>
 801c0f6:	6878      	ldr	r0, [r7, #4]
 801c0f8:	f000 fd8f 	bl	801cc1a <cogui_strlen>
 801c0fc:	4603      	mov	r3, r0
 801c0fe:	460c      	mov	r4, r1
 801c100:	e003      	b.n	801c10a <cogui_get_text_width+0x34>
 801c102:	f04f 0300 	mov.w	r3, #0
 801c106:	f04f 0400 	mov.w	r4, #0
 801c10a:	e9c7 3404 	strd	r3, r4, [r7, #16]

    /* compute text widget */
    text_width = str_len * font->width;
 801c10e:	683b      	ldr	r3, [r7, #0]
 801c110:	889b      	ldrh	r3, [r3, #4]
 801c112:	461a      	mov	r2, r3
 801c114:	693b      	ldr	r3, [r7, #16]
 801c116:	fb03 f302 	mul.w	r3, r3, r2
 801c11a:	60fb      	str	r3, [r7, #12]

    return text_width;
 801c11c:	68fb      	ldr	r3, [r7, #12]
}
 801c11e:	4618      	mov	r0, r3
 801c120:	371c      	adds	r7, #28
 801c122:	46bd      	mov	sp, r7
 801c124:	bd90      	pop	{r4, r7, pc}
 801c126:	bf00      	nop
 801c128:	08022e70 	.word	0x08022e70
 801c12c:	08022e50 	.word	0x08022e50

0801c130 <cogui_get_text_height>:
 * @param[out] None
 * @retval     text_height      Result of string height.
 *******************************************************************************
 */
co_uint32_t cogui_get_text_height(char *str, cogui_font_t *font, cogui_rect_t *rect)
{
 801c130:	b580      	push	{r7, lr}
 801c132:	b088      	sub	sp, #32
 801c134:	af00      	add	r7, sp, #0
 801c136:	60f8      	str	r0, [r7, #12]
 801c138:	60b9      	str	r1, [r7, #8]
 801c13a:	607a      	str	r2, [r7, #4]
    COGUI_ASSERT(rect != Co_NULL);
 801c13c:	687b      	ldr	r3, [r7, #4]
 801c13e:	2b00      	cmp	r3, #0
 801c140:	d104      	bne.n	801c14c <cogui_get_text_height+0x1c>
 801c142:	226e      	movs	r2, #110	; 0x6e
 801c144:	4915      	ldr	r1, [pc, #84]	; (801c19c <cogui_get_text_height+0x6c>)
 801c146:	4816      	ldr	r0, [pc, #88]	; (801c1a0 <cogui_get_text_height+0x70>)
 801c148:	f001 f870 	bl	801d22c <cogui_assert_handler>
    COGUI_ASSERT(font != Co_NULL);
 801c14c:	68bb      	ldr	r3, [r7, #8]
 801c14e:	2b00      	cmp	r3, #0
 801c150:	d104      	bne.n	801c15c <cogui_get_text_height+0x2c>
 801c152:	226f      	movs	r2, #111	; 0x6f
 801c154:	4911      	ldr	r1, [pc, #68]	; (801c19c <cogui_get_text_height+0x6c>)
 801c156:	4813      	ldr	r0, [pc, #76]	; (801c1a4 <cogui_get_text_height+0x74>)
 801c158:	f001 f868 	bl	801d22c <cogui_assert_handler>

    co_uint32_t rect_width = COGUI_RECT_WIDTH(rect);
 801c15c:	687b      	ldr	r3, [r7, #4]
 801c15e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801c162:	461a      	mov	r2, r3
 801c164:	687b      	ldr	r3, [r7, #4]
 801c166:	f9b3 3000 	ldrsh.w	r3, [r3]
 801c16a:	1ad3      	subs	r3, r2, r3
 801c16c:	61fb      	str	r3, [r7, #28]
    co_uint32_t text_width;
    co_uint32_t text_height;
    co_uint32_t lines;

    /* how many lines does this text has in this rectangle */
    text_width = cogui_get_text_width(str, font);
 801c16e:	68b9      	ldr	r1, [r7, #8]
 801c170:	68f8      	ldr	r0, [r7, #12]
 801c172:	f7ff ffb0 	bl	801c0d6 <cogui_get_text_width>
 801c176:	61b8      	str	r0, [r7, #24]
    lines = text_width / rect_width + 1;
 801c178:	69ba      	ldr	r2, [r7, #24]
 801c17a:	69fb      	ldr	r3, [r7, #28]
 801c17c:	fbb2 f3f3 	udiv	r3, r2, r3
 801c180:	3301      	adds	r3, #1
 801c182:	617b      	str	r3, [r7, #20]

    /* compute text height */
    text_height = lines * font->height;
 801c184:	68bb      	ldr	r3, [r7, #8]
 801c186:	88db      	ldrh	r3, [r3, #6]
 801c188:	461a      	mov	r2, r3
 801c18a:	697b      	ldr	r3, [r7, #20]
 801c18c:	fb02 f303 	mul.w	r3, r2, r3
 801c190:	613b      	str	r3, [r7, #16]

    return text_height;
 801c192:	693b      	ldr	r3, [r7, #16]
}
 801c194:	4618      	mov	r0, r3
 801c196:	3720      	adds	r7, #32
 801c198:	46bd      	mov	sp, r7
 801c19a:	bd80      	pop	{r7, pc}
 801c19c:	08022e88 	.word	0x08022e88
 801c1a0:	08022e60 	.word	0x08022e60
 801c1a4:	08022e50 	.word	0x08022e50

0801c1a8 <_cogui_mouse_init>:
struct cogui_cursor *_cursor=Co_NULL;
extern cogui_window_t *main_page;
co_bool_t first_show = 1;

void _cogui_mouse_init()
{
 801c1a8:	b590      	push	{r4, r7, lr}
 801c1aa:	b083      	sub	sp, #12
 801c1ac:	af02      	add	r7, sp, #8
    _cursor = cogui_malloc(sizeof(struct cogui_cursor));
 801c1ae:	f44f 6001 	mov.w	r0, #2064	; 0x810
 801c1b2:	f000 fb3b 	bl	801c82c <cogui_malloc>
 801c1b6:	4602      	mov	r2, r0
 801c1b8:	4b26      	ldr	r3, [pc, #152]	; (801c254 <_cogui_mouse_init+0xac>)
 801c1ba:	601a      	str	r2, [r3, #0]
    COGUI_ASSERT(_cursor != Co_NULL);
 801c1bc:	4b25      	ldr	r3, [pc, #148]	; (801c254 <_cogui_mouse_init+0xac>)
 801c1be:	681b      	ldr	r3, [r3, #0]
 801c1c0:	2b00      	cmp	r3, #0
 801c1c2:	d104      	bne.n	801c1ce <_cogui_mouse_init+0x26>
 801c1c4:	2213      	movs	r2, #19
 801c1c6:	4924      	ldr	r1, [pc, #144]	; (801c258 <_cogui_mouse_init+0xb0>)
 801c1c8:	4824      	ldr	r0, [pc, #144]	; (801c25c <_cogui_mouse_init+0xb4>)
 801c1ca:	f001 f82f 	bl	801d22c <cogui_assert_handler>

    cogui_memset(_cursor, 0, sizeof(struct cogui_cursor));
 801c1ce:	4b21      	ldr	r3, [pc, #132]	; (801c254 <_cogui_mouse_init+0xac>)
 801c1d0:	6818      	ldr	r0, [r3, #0]
 801c1d2:	f44f 6201 	mov.w	r2, #2064	; 0x810
 801c1d6:	f04f 0300 	mov.w	r3, #0
 801c1da:	2100      	movs	r1, #0
 801c1dc:	f000 fc28 	bl	801ca30 <cogui_memset>

    _cursor->cursor_widget = cogui_widget_create(main_page);
 801c1e0:	4b1f      	ldr	r3, [pc, #124]	; (801c260 <_cogui_mouse_init+0xb8>)
 801c1e2:	681a      	ldr	r2, [r3, #0]
 801c1e4:	4b1b      	ldr	r3, [pc, #108]	; (801c254 <_cogui_mouse_init+0xac>)
 801c1e6:	681c      	ldr	r4, [r3, #0]
 801c1e8:	4610      	mov	r0, r2
 801c1ea:	f001 f943 	bl	801d474 <cogui_widget_create>
 801c1ee:	4603      	mov	r3, r0
 801c1f0:	60a3      	str	r3, [r4, #8]
	cogui_widget_set_rectangle(_cursor->cursor_widget, 0, 0, 240, 320);
 801c1f2:	4b18      	ldr	r3, [pc, #96]	; (801c254 <_cogui_mouse_init+0xac>)
 801c1f4:	681b      	ldr	r3, [r3, #0]
 801c1f6:	6898      	ldr	r0, [r3, #8]
 801c1f8:	f44f 73a0 	mov.w	r3, #320	; 0x140
 801c1fc:	9300      	str	r3, [sp, #0]
 801c1fe:	23f0      	movs	r3, #240	; 0xf0
 801c200:	2200      	movs	r2, #0
 801c202:	2100      	movs	r1, #0
 801c204:	f001 fc9d 	bl	801db42 <cogui_widget_set_rectangle>
	_cursor->cursor_widget->gc.foreground = COGUI_WHITE;
 801c208:	4b12      	ldr	r3, [pc, #72]	; (801c254 <_cogui_mouse_init+0xac>)
 801c20a:	681b      	ldr	r3, [r3, #0]
 801c20c:	689a      	ldr	r2, [r3, #8]
 801c20e:	4b15      	ldr	r3, [pc, #84]	; (801c264 <_cogui_mouse_init+0xbc>)
 801c210:	e9d3 3400 	ldrd	r3, r4, [r3]
 801c214:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
    cogui_widget_set_font(_cursor->cursor_widget, &tm_symbol_16x16);
 801c218:	4b0e      	ldr	r3, [pc, #56]	; (801c254 <_cogui_mouse_init+0xac>)
 801c21a:	681b      	ldr	r3, [r3, #0]
 801c21c:	689b      	ldr	r3, [r3, #8]
 801c21e:	4912      	ldr	r1, [pc, #72]	; (801c268 <_cogui_mouse_init+0xc0>)
 801c220:	4618      	mov	r0, r3
 801c222:	f001 fd4f 	bl	801dcc4 <cogui_widget_set_font>

    _cursor->frame_buffer = ((struct cogui_dc_hw *)(_cursor->cursor_widget->dc_engine))->hw_driver->frame_buffer;
 801c226:	4b0b      	ldr	r3, [pc, #44]	; (801c254 <_cogui_mouse_init+0xac>)
 801c228:	681b      	ldr	r3, [r3, #0]
 801c22a:	689b      	ldr	r3, [r3, #8]
 801c22c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c22e:	68da      	ldr	r2, [r3, #12]
 801c230:	4b08      	ldr	r3, [pc, #32]	; (801c254 <_cogui_mouse_init+0xac>)
 801c232:	681b      	ldr	r3, [r3, #0]
 801c234:	6892      	ldr	r2, [r2, #8]
 801c236:	60da      	str	r2, [r3, #12]

    first_show = 1;
 801c238:	4b0c      	ldr	r3, [pc, #48]	; (801c26c <_cogui_mouse_init+0xc4>)
 801c23a:	2201      	movs	r2, #1
 801c23c:	701a      	strb	r2, [r3, #0]

    cogui_mouse_set_speed(COGUI_MOUSE_SPEED_MIDDLE);
 801c23e:	2004      	movs	r0, #4
 801c240:	f000 f87c 	bl	801c33c <cogui_mouse_set_speed>
    cogui_mouse_set_position(105, 155);
 801c244:	219b      	movs	r1, #155	; 0x9b
 801c246:	2069      	movs	r0, #105	; 0x69
 801c248:	f000 f85a 	bl	801c300 <cogui_mouse_set_position>
}
 801c24c:	bf00      	nop
 801c24e:	3704      	adds	r7, #4
 801c250:	46bd      	mov	sp, r7
 801c252:	bd90      	pop	{r4, r7, pc}
 801c254:	2000d78c 	.word	0x2000d78c
 801c258:	08022ebc 	.word	0x08022ebc
 801c25c:	08022ea0 	.word	0x08022ea0
 801c260:	2000d774 	.word	0x2000d774
 801c264:	08022c90 	.word	0x08022c90
 801c268:	20000134 	.word	0x20000134
 801c26c:	20000130 	.word	0x20000130

0801c270 <cogui_mouse_return_picture>:

static void cogui_mouse_return_picture(void)
{
 801c270:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c272:	b085      	sub	sp, #20
 801c274:	af02      	add	r7, sp, #8
    COGUI_CHECK_CURSOR();
 801c276:	4b21      	ldr	r3, [pc, #132]	; (801c2fc <cogui_mouse_return_picture+0x8c>)
 801c278:	681b      	ldr	r3, [r3, #0]
 801c27a:	2b00      	cmp	r3, #0
 801c27c:	d101      	bne.n	801c282 <cogui_mouse_return_picture+0x12>
 801c27e:	f7ff ff93 	bl	801c1a8 <_cogui_mouse_init>
    co_uint16_t i, j;

    for (i=0; i<16; i++) {
 801c282:	2300      	movs	r3, #0
 801c284:	80fb      	strh	r3, [r7, #6]
 801c286:	e032      	b.n	801c2ee <cogui_mouse_return_picture+0x7e>
        for (j=0; j<16; j++) {
 801c288:	2300      	movs	r3, #0
 801c28a:	80bb      	strh	r3, [r7, #4]
 801c28c:	e029      	b.n	801c2e2 <cogui_mouse_return_picture+0x72>
            //cogui_printf("%x (%d, %d)", (co_uint16_t)_cursor->save_picture[i][j], _cursor->cx+j, _cursor->cy+i);
            cogui_dc_draw_point(_cursor->cursor_widget->dc_engine, _cursor->cx+j, _cursor->cy+i, _cursor->save_picture[i][j]);
 801c28e:	4b1b      	ldr	r3, [pc, #108]	; (801c2fc <cogui_mouse_return_picture+0x8c>)
 801c290:	681b      	ldr	r3, [r3, #0]
 801c292:	689b      	ldr	r3, [r3, #8]
 801c294:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c296:	685b      	ldr	r3, [r3, #4]
 801c298:	685d      	ldr	r5, [r3, #4]
 801c29a:	4b18      	ldr	r3, [pc, #96]	; (801c2fc <cogui_mouse_return_picture+0x8c>)
 801c29c:	681b      	ldr	r3, [r3, #0]
 801c29e:	689b      	ldr	r3, [r3, #8]
 801c2a0:	6a98      	ldr	r0, [r3, #40]	; 0x28
 801c2a2:	4b16      	ldr	r3, [pc, #88]	; (801c2fc <cogui_mouse_return_picture+0x8c>)
 801c2a4:	681b      	ldr	r3, [r3, #0]
 801c2a6:	881b      	ldrh	r3, [r3, #0]
 801c2a8:	461a      	mov	r2, r3
 801c2aa:	88bb      	ldrh	r3, [r7, #4]
 801c2ac:	18d6      	adds	r6, r2, r3
 801c2ae:	4b13      	ldr	r3, [pc, #76]	; (801c2fc <cogui_mouse_return_picture+0x8c>)
 801c2b0:	681b      	ldr	r3, [r3, #0]
 801c2b2:	885b      	ldrh	r3, [r3, #2]
 801c2b4:	461a      	mov	r2, r3
 801c2b6:	88fb      	ldrh	r3, [r7, #6]
 801c2b8:	eb02 0c03 	add.w	ip, r2, r3
 801c2bc:	4b0f      	ldr	r3, [pc, #60]	; (801c2fc <cogui_mouse_return_picture+0x8c>)
 801c2be:	681a      	ldr	r2, [r3, #0]
 801c2c0:	88f9      	ldrh	r1, [r7, #6]
 801c2c2:	88bb      	ldrh	r3, [r7, #4]
 801c2c4:	0109      	lsls	r1, r1, #4
 801c2c6:	440b      	add	r3, r1
 801c2c8:	3302      	adds	r3, #2
 801c2ca:	00db      	lsls	r3, r3, #3
 801c2cc:	4413      	add	r3, r2
 801c2ce:	e9d3 3400 	ldrd	r3, r4, [r3]
 801c2d2:	e9cd 3400 	strd	r3, r4, [sp]
 801c2d6:	4662      	mov	r2, ip
 801c2d8:	4631      	mov	r1, r6
 801c2da:	47a8      	blx	r5
        for (j=0; j<16; j++) {
 801c2dc:	88bb      	ldrh	r3, [r7, #4]
 801c2de:	3301      	adds	r3, #1
 801c2e0:	80bb      	strh	r3, [r7, #4]
 801c2e2:	88bb      	ldrh	r3, [r7, #4]
 801c2e4:	2b0f      	cmp	r3, #15
 801c2e6:	d9d2      	bls.n	801c28e <cogui_mouse_return_picture+0x1e>
    for (i=0; i<16; i++) {
 801c2e8:	88fb      	ldrh	r3, [r7, #6]
 801c2ea:	3301      	adds	r3, #1
 801c2ec:	80fb      	strh	r3, [r7, #6]
 801c2ee:	88fb      	ldrh	r3, [r7, #6]
 801c2f0:	2b0f      	cmp	r3, #15
 801c2f2:	d9c9      	bls.n	801c288 <cogui_mouse_return_picture+0x18>
        }
        //cogui_printf("\r\n");
    }
}
 801c2f4:	bf00      	nop
 801c2f6:	370c      	adds	r7, #12
 801c2f8:	46bd      	mov	sp, r7
 801c2fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c2fc:	2000d78c 	.word	0x2000d78c

0801c300 <cogui_mouse_set_position>:

void cogui_mouse_set_position(co_uint16_t x, co_uint16_t y)
{
 801c300:	b580      	push	{r7, lr}
 801c302:	b082      	sub	sp, #8
 801c304:	af00      	add	r7, sp, #0
 801c306:	4603      	mov	r3, r0
 801c308:	460a      	mov	r2, r1
 801c30a:	80fb      	strh	r3, [r7, #6]
 801c30c:	4613      	mov	r3, r2
 801c30e:	80bb      	strh	r3, [r7, #4]
    COGUI_CHECK_CURSOR();
 801c310:	4b09      	ldr	r3, [pc, #36]	; (801c338 <cogui_mouse_set_position+0x38>)
 801c312:	681b      	ldr	r3, [r3, #0]
 801c314:	2b00      	cmp	r3, #0
 801c316:	d101      	bne.n	801c31c <cogui_mouse_set_position+0x1c>
 801c318:	f7ff ff46 	bl	801c1a8 <_cogui_mouse_init>

    _cursor->cx = x;
 801c31c:	4b06      	ldr	r3, [pc, #24]	; (801c338 <cogui_mouse_set_position+0x38>)
 801c31e:	681b      	ldr	r3, [r3, #0]
 801c320:	88fa      	ldrh	r2, [r7, #6]
 801c322:	801a      	strh	r2, [r3, #0]
    _cursor->cy = y;
 801c324:	4b04      	ldr	r3, [pc, #16]	; (801c338 <cogui_mouse_set_position+0x38>)
 801c326:	681b      	ldr	r3, [r3, #0]
 801c328:	88ba      	ldrh	r2, [r7, #4]
 801c32a:	805a      	strh	r2, [r3, #2]
    
    cogui_mouse_show();
 801c32c:	f000 f8ea 	bl	801c504 <cogui_mouse_show>
}
 801c330:	bf00      	nop
 801c332:	3708      	adds	r7, #8
 801c334:	46bd      	mov	sp, r7
 801c336:	bd80      	pop	{r7, pc}
 801c338:	2000d78c 	.word	0x2000d78c

0801c33c <cogui_mouse_set_speed>:

void cogui_mouse_set_speed(co_uint8_t speed)
{
 801c33c:	b580      	push	{r7, lr}
 801c33e:	b082      	sub	sp, #8
 801c340:	af00      	add	r7, sp, #0
 801c342:	4603      	mov	r3, r0
 801c344:	71fb      	strb	r3, [r7, #7]
    COGUI_CHECK_CURSOR();
 801c346:	4b07      	ldr	r3, [pc, #28]	; (801c364 <cogui_mouse_set_speed+0x28>)
 801c348:	681b      	ldr	r3, [r3, #0]
 801c34a:	2b00      	cmp	r3, #0
 801c34c:	d101      	bne.n	801c352 <cogui_mouse_set_speed+0x16>
 801c34e:	f7ff ff2b 	bl	801c1a8 <_cogui_mouse_init>

    _cursor->speed = speed;
 801c352:	4b04      	ldr	r3, [pc, #16]	; (801c364 <cogui_mouse_set_speed+0x28>)
 801c354:	681b      	ldr	r3, [r3, #0]
 801c356:	79fa      	ldrb	r2, [r7, #7]
 801c358:	711a      	strb	r2, [r3, #4]
}
 801c35a:	bf00      	nop
 801c35c:	3708      	adds	r7, #8
 801c35e:	46bd      	mov	sp, r7
 801c360:	bd80      	pop	{r7, pc}
 801c362:	bf00      	nop
 801c364:	2000d78c 	.word	0x2000d78c

0801c368 <cogui_mouse_move_to>:

void cogui_mouse_move_to(co_uint16_t x,co_uint16_t y)
{
 801c368:	b580      	push	{r7, lr}
 801c36a:	b082      	sub	sp, #8
 801c36c:	af00      	add	r7, sp, #0
 801c36e:	4603      	mov	r3, r0
 801c370:	460a      	mov	r2, r1
 801c372:	80fb      	strh	r3, [r7, #6]
 801c374:	4613      	mov	r3, r2
 801c376:	80bb      	strh	r3, [r7, #4]
    COGUI_CHECK_CURSOR();
 801c378:	4b17      	ldr	r3, [pc, #92]	; (801c3d8 <cogui_mouse_move_to+0x70>)
 801c37a:	681b      	ldr	r3, [r3, #0]
 801c37c:	2b00      	cmp	r3, #0
 801c37e:	d101      	bne.n	801c384 <cogui_mouse_move_to+0x1c>
 801c380:	f7ff ff12 	bl	801c1a8 <_cogui_mouse_init>

    if (x > 230) {
 801c384:	88fb      	ldrh	r3, [r7, #6]
 801c386:	2be6      	cmp	r3, #230	; 0xe6
 801c388:	d901      	bls.n	801c38e <cogui_mouse_move_to+0x26>
        x = 230;
 801c38a:	23e6      	movs	r3, #230	; 0xe6
 801c38c:	80fb      	strh	r3, [r7, #6]
    }
    if (y > 310) {
 801c38e:	88bb      	ldrh	r3, [r7, #4]
 801c390:	f5b3 7f9b 	cmp.w	r3, #310	; 0x136
 801c394:	d902      	bls.n	801c39c <cogui_mouse_move_to+0x34>
        y = 310;
 801c396:	f44f 739b 	mov.w	r3, #310	; 0x136
 801c39a:	80bb      	strh	r3, [r7, #4]
    }

    if (_cursor->cx == x && _cursor->cy == y) {
 801c39c:	4b0e      	ldr	r3, [pc, #56]	; (801c3d8 <cogui_mouse_move_to+0x70>)
 801c39e:	681b      	ldr	r3, [r3, #0]
 801c3a0:	881b      	ldrh	r3, [r3, #0]
 801c3a2:	88fa      	ldrh	r2, [r7, #6]
 801c3a4:	429a      	cmp	r2, r3
 801c3a6:	d105      	bne.n	801c3b4 <cogui_mouse_move_to+0x4c>
 801c3a8:	4b0b      	ldr	r3, [pc, #44]	; (801c3d8 <cogui_mouse_move_to+0x70>)
 801c3aa:	681b      	ldr	r3, [r3, #0]
 801c3ac:	885b      	ldrh	r3, [r3, #2]
 801c3ae:	88ba      	ldrh	r2, [r7, #4]
 801c3b0:	429a      	cmp	r2, r3
 801c3b2:	d00d      	beq.n	801c3d0 <cogui_mouse_move_to+0x68>
        return;
    }

    if (!first_show) {
 801c3b4:	4b09      	ldr	r3, [pc, #36]	; (801c3dc <cogui_mouse_move_to+0x74>)
 801c3b6:	f993 3000 	ldrsb.w	r3, [r3]
 801c3ba:	2b00      	cmp	r3, #0
 801c3bc:	d101      	bne.n	801c3c2 <cogui_mouse_move_to+0x5a>
        cogui_mouse_return_picture();
 801c3be:	f7ff ff57 	bl	801c270 <cogui_mouse_return_picture>
    }

    cogui_mouse_set_position(x, y);
 801c3c2:	88ba      	ldrh	r2, [r7, #4]
 801c3c4:	88fb      	ldrh	r3, [r7, #6]
 801c3c6:	4611      	mov	r1, r2
 801c3c8:	4618      	mov	r0, r3
 801c3ca:	f7ff ff99 	bl	801c300 <cogui_mouse_set_position>
 801c3ce:	e000      	b.n	801c3d2 <cogui_mouse_move_to+0x6a>
        return;
 801c3d0:	bf00      	nop
}
 801c3d2:	3708      	adds	r7, #8
 801c3d4:	46bd      	mov	sp, r7
 801c3d6:	bd80      	pop	{r7, pc}
 801c3d8:	2000d78c 	.word	0x2000d78c
 801c3dc:	20000130 	.word	0x20000130

0801c3e0 <cogui_mouse_move_delta>:

void cogui_mouse_move_delta(co_int32_t dx,co_int32_t dy)
{
 801c3e0:	b580      	push	{r7, lr}
 801c3e2:	b084      	sub	sp, #16
 801c3e4:	af00      	add	r7, sp, #0
 801c3e6:	6078      	str	r0, [r7, #4]
 801c3e8:	6039      	str	r1, [r7, #0]
    COGUI_CHECK_CURSOR();
 801c3ea:	4b1b      	ldr	r3, [pc, #108]	; (801c458 <cogui_mouse_move_delta+0x78>)
 801c3ec:	681b      	ldr	r3, [r3, #0]
 801c3ee:	2b00      	cmp	r3, #0
 801c3f0:	d101      	bne.n	801c3f6 <cogui_mouse_move_delta+0x16>
 801c3f2:	f7ff fed9 	bl	801c1a8 <_cogui_mouse_init>
    
    co_int32_t x = _cursor->cx + dx/_cursor->speed;
 801c3f6:	4b18      	ldr	r3, [pc, #96]	; (801c458 <cogui_mouse_move_delta+0x78>)
 801c3f8:	681b      	ldr	r3, [r3, #0]
 801c3fa:	881b      	ldrh	r3, [r3, #0]
 801c3fc:	461a      	mov	r2, r3
 801c3fe:	4b16      	ldr	r3, [pc, #88]	; (801c458 <cogui_mouse_move_delta+0x78>)
 801c400:	681b      	ldr	r3, [r3, #0]
 801c402:	791b      	ldrb	r3, [r3, #4]
 801c404:	4619      	mov	r1, r3
 801c406:	687b      	ldr	r3, [r7, #4]
 801c408:	fb93 f3f1 	sdiv	r3, r3, r1
 801c40c:	4413      	add	r3, r2
 801c40e:	60fb      	str	r3, [r7, #12]
    co_int32_t y = _cursor->cy + dy/_cursor->speed;
 801c410:	4b11      	ldr	r3, [pc, #68]	; (801c458 <cogui_mouse_move_delta+0x78>)
 801c412:	681b      	ldr	r3, [r3, #0]
 801c414:	885b      	ldrh	r3, [r3, #2]
 801c416:	461a      	mov	r2, r3
 801c418:	4b0f      	ldr	r3, [pc, #60]	; (801c458 <cogui_mouse_move_delta+0x78>)
 801c41a:	681b      	ldr	r3, [r3, #0]
 801c41c:	791b      	ldrb	r3, [r3, #4]
 801c41e:	4619      	mov	r1, r3
 801c420:	683b      	ldr	r3, [r7, #0]
 801c422:	fb93 f3f1 	sdiv	r3, r3, r1
 801c426:	4413      	add	r3, r2
 801c428:	60bb      	str	r3, [r7, #8]

    if (x < 0) {
 801c42a:	68fb      	ldr	r3, [r7, #12]
 801c42c:	2b00      	cmp	r3, #0
 801c42e:	da01      	bge.n	801c434 <cogui_mouse_move_delta+0x54>
        x = 0;
 801c430:	2300      	movs	r3, #0
 801c432:	60fb      	str	r3, [r7, #12]
    }
    if (y < 0) {
 801c434:	68bb      	ldr	r3, [r7, #8]
 801c436:	2b00      	cmp	r3, #0
 801c438:	da01      	bge.n	801c43e <cogui_mouse_move_delta+0x5e>
        y = 0;
 801c43a:	2300      	movs	r3, #0
 801c43c:	60bb      	str	r3, [r7, #8]
    }

    cogui_mouse_move_to(x, y);
 801c43e:	68fb      	ldr	r3, [r7, #12]
 801c440:	b29b      	uxth	r3, r3
 801c442:	68ba      	ldr	r2, [r7, #8]
 801c444:	b292      	uxth	r2, r2
 801c446:	4611      	mov	r1, r2
 801c448:	4618      	mov	r0, r3
 801c44a:	f7ff ff8d 	bl	801c368 <cogui_mouse_move_to>
}
 801c44e:	bf00      	nop
 801c450:	3710      	adds	r7, #16
 801c452:	46bd      	mov	sp, r7
 801c454:	bd80      	pop	{r7, pc}
 801c456:	bf00      	nop
 801c458:	2000d78c 	.word	0x2000d78c

0801c45c <cogui_mouse_restore>:

void cogui_mouse_restore(void)
{
 801c45c:	b590      	push	{r4, r7, lr}
 801c45e:	b085      	sub	sp, #20
 801c460:	af00      	add	r7, sp, #0
    COGUI_CHECK_CURSOR();
 801c462:	4b26      	ldr	r3, [pc, #152]	; (801c4fc <cogui_mouse_restore+0xa0>)
 801c464:	681b      	ldr	r3, [r3, #0]
 801c466:	2b00      	cmp	r3, #0
 801c468:	d101      	bne.n	801c46e <cogui_mouse_restore+0x12>
 801c46a:	f7ff fe9d 	bl	801c1a8 <_cogui_mouse_init>
    co_uint32_t start_pt = _cursor->frame_buffer;
 801c46e:	4b23      	ldr	r3, [pc, #140]	; (801c4fc <cogui_mouse_restore+0xa0>)
 801c470:	681b      	ldr	r3, [r3, #0]
 801c472:	68db      	ldr	r3, [r3, #12]
 801c474:	60fb      	str	r3, [r7, #12]
    co_uint16_t i, j;
    co_uint16_t buf;

    for (i=0; i<16; i++) {
 801c476:	2300      	movs	r3, #0
 801c478:	817b      	strh	r3, [r7, #10]
 801c47a:	e034      	b.n	801c4e6 <cogui_mouse_restore+0x8a>
        start_pt = _cursor->frame_buffer + 2*(240*(_cursor->cy+i) + _cursor->cx);
 801c47c:	4b1f      	ldr	r3, [pc, #124]	; (801c4fc <cogui_mouse_restore+0xa0>)
 801c47e:	681b      	ldr	r3, [r3, #0]
 801c480:	68d9      	ldr	r1, [r3, #12]
 801c482:	4b1e      	ldr	r3, [pc, #120]	; (801c4fc <cogui_mouse_restore+0xa0>)
 801c484:	681b      	ldr	r3, [r3, #0]
 801c486:	885b      	ldrh	r3, [r3, #2]
 801c488:	461a      	mov	r2, r3
 801c48a:	897b      	ldrh	r3, [r7, #10]
 801c48c:	441a      	add	r2, r3
 801c48e:	4613      	mov	r3, r2
 801c490:	011b      	lsls	r3, r3, #4
 801c492:	1a9b      	subs	r3, r3, r2
 801c494:	011b      	lsls	r3, r3, #4
 801c496:	461a      	mov	r2, r3
 801c498:	4b18      	ldr	r3, [pc, #96]	; (801c4fc <cogui_mouse_restore+0xa0>)
 801c49a:	681b      	ldr	r3, [r3, #0]
 801c49c:	881b      	ldrh	r3, [r3, #0]
 801c49e:	4413      	add	r3, r2
 801c4a0:	005b      	lsls	r3, r3, #1
 801c4a2:	440b      	add	r3, r1
 801c4a4:	60fb      	str	r3, [r7, #12]
        for (j=0; j<16; j++) {
 801c4a6:	2300      	movs	r3, #0
 801c4a8:	813b      	strh	r3, [r7, #8]
 801c4aa:	e016      	b.n	801c4da <cogui_mouse_restore+0x7e>
            buf = *(co_uint16_t *)start_pt;
 801c4ac:	68fb      	ldr	r3, [r7, #12]
 801c4ae:	881b      	ldrh	r3, [r3, #0]
 801c4b0:	80fb      	strh	r3, [r7, #6]
            _cursor->save_picture[i][j] = buf;
 801c4b2:	4b12      	ldr	r3, [pc, #72]	; (801c4fc <cogui_mouse_restore+0xa0>)
 801c4b4:	6819      	ldr	r1, [r3, #0]
 801c4b6:	8978      	ldrh	r0, [r7, #10]
 801c4b8:	893a      	ldrh	r2, [r7, #8]
 801c4ba:	88fb      	ldrh	r3, [r7, #6]
 801c4bc:	f04f 0400 	mov.w	r4, #0
 801c4c0:	0100      	lsls	r0, r0, #4
 801c4c2:	4402      	add	r2, r0
 801c4c4:	3202      	adds	r2, #2
 801c4c6:	00d2      	lsls	r2, r2, #3
 801c4c8:	440a      	add	r2, r1
 801c4ca:	e9c2 3400 	strd	r3, r4, [r2]
            start_pt += 2;
 801c4ce:	68fb      	ldr	r3, [r7, #12]
 801c4d0:	3302      	adds	r3, #2
 801c4d2:	60fb      	str	r3, [r7, #12]
        for (j=0; j<16; j++) {
 801c4d4:	893b      	ldrh	r3, [r7, #8]
 801c4d6:	3301      	adds	r3, #1
 801c4d8:	813b      	strh	r3, [r7, #8]
 801c4da:	893b      	ldrh	r3, [r7, #8]
 801c4dc:	2b0f      	cmp	r3, #15
 801c4de:	d9e5      	bls.n	801c4ac <cogui_mouse_restore+0x50>
    for (i=0; i<16; i++) {
 801c4e0:	897b      	ldrh	r3, [r7, #10]
 801c4e2:	3301      	adds	r3, #1
 801c4e4:	817b      	strh	r3, [r7, #10]
 801c4e6:	897b      	ldrh	r3, [r7, #10]
 801c4e8:	2b0f      	cmp	r3, #15
 801c4ea:	d9c7      	bls.n	801c47c <cogui_mouse_restore+0x20>
        }
    }
    first_show = 0;
 801c4ec:	4b04      	ldr	r3, [pc, #16]	; (801c500 <cogui_mouse_restore+0xa4>)
 801c4ee:	2200      	movs	r2, #0
 801c4f0:	701a      	strb	r2, [r3, #0]
}
 801c4f2:	bf00      	nop
 801c4f4:	3714      	adds	r7, #20
 801c4f6:	46bd      	mov	sp, r7
 801c4f8:	bd90      	pop	{r4, r7, pc}
 801c4fa:	bf00      	nop
 801c4fc:	2000d78c 	.word	0x2000d78c
 801c500:	20000130 	.word	0x20000130

0801c504 <cogui_mouse_show>:

void cogui_mouse_show(void)
{
 801c504:	b590      	push	{r4, r7, lr}
 801c506:	b083      	sub	sp, #12
 801c508:	af00      	add	r7, sp, #0
    COGUI_CHECK_CURSOR();
 801c50a:	4b23      	ldr	r3, [pc, #140]	; (801c598 <cogui_mouse_show+0x94>)
 801c50c:	681b      	ldr	r3, [r3, #0]
 801c50e:	2b00      	cmp	r3, #0
 801c510:	d101      	bne.n	801c516 <cogui_mouse_show+0x12>
 801c512:	f7ff fe49 	bl	801c1a8 <_cogui_mouse_init>

    cogui_mouse_restore();
 801c516:	f7ff ffa1 	bl	801c45c <cogui_mouse_restore>

    cogui_rect_t rect;
    COGUI_SET_RECT(&rect, _cursor->cx, _cursor->cy, 16, 16);
 801c51a:	4b1f      	ldr	r3, [pc, #124]	; (801c598 <cogui_mouse_show+0x94>)
 801c51c:	681b      	ldr	r3, [r3, #0]
 801c51e:	881b      	ldrh	r3, [r3, #0]
 801c520:	b21b      	sxth	r3, r3
 801c522:	803b      	strh	r3, [r7, #0]
 801c524:	4b1c      	ldr	r3, [pc, #112]	; (801c598 <cogui_mouse_show+0x94>)
 801c526:	681b      	ldr	r3, [r3, #0]
 801c528:	881b      	ldrh	r3, [r3, #0]
 801c52a:	3310      	adds	r3, #16
 801c52c:	b29b      	uxth	r3, r3
 801c52e:	b21b      	sxth	r3, r3
 801c530:	807b      	strh	r3, [r7, #2]
 801c532:	4b19      	ldr	r3, [pc, #100]	; (801c598 <cogui_mouse_show+0x94>)
 801c534:	681b      	ldr	r3, [r3, #0]
 801c536:	885b      	ldrh	r3, [r3, #2]
 801c538:	b21b      	sxth	r3, r3
 801c53a:	80bb      	strh	r3, [r7, #4]
 801c53c:	4b16      	ldr	r3, [pc, #88]	; (801c598 <cogui_mouse_show+0x94>)
 801c53e:	681b      	ldr	r3, [r3, #0]
 801c540:	885b      	ldrh	r3, [r3, #2]
 801c542:	3310      	adds	r3, #16
 801c544:	b29b      	uxth	r3, r3
 801c546:	b21b      	sxth	r3, r3
 801c548:	80fb      	strh	r3, [r7, #6]

	_cursor->cursor_widget->gc.foreground = COGUI_WHITE;
 801c54a:	4b13      	ldr	r3, [pc, #76]	; (801c598 <cogui_mouse_show+0x94>)
 801c54c:	681b      	ldr	r3, [r3, #0]
 801c54e:	689a      	ldr	r2, [r3, #8]
 801c550:	4b12      	ldr	r3, [pc, #72]	; (801c59c <cogui_mouse_show+0x98>)
 801c552:	e9d3 3400 	ldrd	r3, r4, [r3]
 801c556:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
    cogui_dc_draw_text(_cursor->cursor_widget->dc_engine, &rect, "#");
 801c55a:	4b0f      	ldr	r3, [pc, #60]	; (801c598 <cogui_mouse_show+0x94>)
 801c55c:	681b      	ldr	r3, [r3, #0]
 801c55e:	689b      	ldr	r3, [r3, #8]
 801c560:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c562:	4639      	mov	r1, r7
 801c564:	4a0e      	ldr	r2, [pc, #56]	; (801c5a0 <cogui_mouse_show+0x9c>)
 801c566:	4618      	mov	r0, r3
 801c568:	f7ff f922 	bl	801b7b0 <cogui_dc_draw_text>
	_cursor->cursor_widget->gc.foreground = COGUI_BLACK;
 801c56c:	4b0a      	ldr	r3, [pc, #40]	; (801c598 <cogui_mouse_show+0x94>)
 801c56e:	681b      	ldr	r3, [r3, #0]
 801c570:	689a      	ldr	r2, [r3, #8]
 801c572:	4b0c      	ldr	r3, [pc, #48]	; (801c5a4 <cogui_mouse_show+0xa0>)
 801c574:	e9d3 3400 	ldrd	r3, r4, [r3]
 801c578:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
    cogui_dc_draw_text(_cursor->cursor_widget->dc_engine, &rect, "$");
 801c57c:	4b06      	ldr	r3, [pc, #24]	; (801c598 <cogui_mouse_show+0x94>)
 801c57e:	681b      	ldr	r3, [r3, #0]
 801c580:	689b      	ldr	r3, [r3, #8]
 801c582:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c584:	4639      	mov	r1, r7
 801c586:	4a08      	ldr	r2, [pc, #32]	; (801c5a8 <cogui_mouse_show+0xa4>)
 801c588:	4618      	mov	r0, r3
 801c58a:	f7ff f911 	bl	801b7b0 <cogui_dc_draw_text>
}
 801c58e:	bf00      	nop
 801c590:	370c      	adds	r7, #12
 801c592:	46bd      	mov	sp, r7
 801c594:	bd90      	pop	{r4, r7, pc}
 801c596:	bf00      	nop
 801c598:	2000d78c 	.word	0x2000d78c
 801c59c:	08022c90 	.word	0x08022c90
 801c5a0:	08022eb4 	.word	0x08022eb4
 801c5a4:	08022c98 	.word	0x08022c98
 801c5a8:	08022eb8 	.word	0x08022eb8

0801c5ac <cogui_server_handler_mouse_btn>:

cogui_app_t *server_app = Co_NULL;
OS_STK   server_Stk[512]={0};

void cogui_server_handler_mouse_btn(struct cogui_event *event)
{
 801c5ac:	b580      	push	{r7, lr}
 801c5ae:	b082      	sub	sp, #8
 801c5b0:	af00      	add	r7, sp, #0
 801c5b2:	6078      	str	r0, [r7, #4]
    /* the topwin contains current mouse */
    //P_TopWin win    = Co_NULL;

    COGUI_EVENT_INIT(event, COGUI_EVENT_MOUSE_BUTTON);
 801c5b4:	687b      	ldr	r3, [r7, #4]
 801c5b6:	220d      	movs	r2, #13
 801c5b8:	701a      	strb	r2, [r3, #0]
 801c5ba:	f7fe fef3 	bl	801b3a4 <cogui_app_self>
 801c5be:	4602      	mov	r2, r0
 801c5c0:	687b      	ldr	r3, [r7, #4]
 801c5c2:	605a      	str	r2, [r3, #4]
 801c5c4:	687b      	ldr	r3, [r7, #4]
 801c5c6:	2200      	movs	r2, #0
 801c5c8:	721a      	strb	r2, [r3, #8]
        return;
    }

    event->win = win->wid;*/

    while(cogui_send(event->app, event) != E_OK){
 801c5ca:	e002      	b.n	801c5d2 <cogui_server_handler_mouse_btn+0x26>
        CoTickDelay(50);
 801c5cc:	2032      	movs	r0, #50	; 0x32
 801c5ce:	f7fd ffdd 	bl	801a58c <CoTickDelay>
    while(cogui_send(event->app, event) != E_OK){
 801c5d2:	687b      	ldr	r3, [r7, #4]
 801c5d4:	68db      	ldr	r3, [r3, #12]
 801c5d6:	6879      	ldr	r1, [r7, #4]
 801c5d8:	4618      	mov	r0, r3
 801c5da:	f000 f973 	bl	801c8c4 <cogui_send>
 801c5de:	4603      	mov	r3, r0
 801c5e0:	2b00      	cmp	r3, #0
 801c5e2:	d1f3      	bne.n	801c5cc <cogui_server_handler_mouse_btn+0x20>
    }
}
 801c5e4:	bf00      	nop
 801c5e6:	3708      	adds	r7, #8
 801c5e8:	46bd      	mov	sp, r7
 801c5ea:	bd80      	pop	{r7, pc}

0801c5ec <cogui_server_handler_mouse_motion>:

void cogui_server_handler_mouse_motion(struct cogui_event *event)
{
 801c5ec:	b580      	push	{r7, lr}
 801c5ee:	b082      	sub	sp, #8
 801c5f0:	af00      	add	r7, sp, #0
 801c5f2:	6078      	str	r0, [r7, #4]
    cogui_mouse_move_delta(event->dx, event->dy);
 801c5f4:	687b      	ldr	r3, [r7, #4]
 801c5f6:	695a      	ldr	r2, [r3, #20]
 801c5f8:	687b      	ldr	r3, [r7, #4]
 801c5fa:	699b      	ldr	r3, [r3, #24]
 801c5fc:	4619      	mov	r1, r3
 801c5fe:	4610      	mov	r0, r2
 801c600:	f7ff feee 	bl	801c3e0 <cogui_mouse_move_delta>
}
 801c604:	bf00      	nop
 801c606:	3708      	adds	r7, #8
 801c608:	46bd      	mov	sp, r7
 801c60a:	bd80      	pop	{r7, pc}

0801c60c <cogui_server_event_kbd>:

void cogui_server_event_kbd(struct cogui_event *event)
{
 801c60c:	b580      	push	{r7, lr}
 801c60e:	b082      	sub	sp, #8
 801c610:	af00      	add	r7, sp, #0
 801c612:	6078      	str	r0, [r7, #4]
    /* the topwin contains current mouse */
    //P_TopWin win = Co_NULL;

    COGUI_EVENT_INIT(event, COGUI_EVENT_KBD);
 801c614:	687b      	ldr	r3, [r7, #4]
 801c616:	220e      	movs	r2, #14
 801c618:	701a      	strb	r2, [r3, #0]
 801c61a:	f7fe fec3 	bl	801b3a4 <cogui_app_self>
 801c61e:	4602      	mov	r2, r0
 801c620:	687b      	ldr	r3, [r7, #4]
 801c622:	605a      	str	r2, [r3, #4]
 801c624:	687b      	ldr	r3, [r7, #4]
 801c626:	2200      	movs	r2, #0
 801c628:	721a      	strb	r2, [r3, #8]
        return;
    }

    event->win = win->wid;*/

    cogui_send(event->app, event);
 801c62a:	687b      	ldr	r3, [r7, #4]
 801c62c:	68db      	ldr	r3, [r3, #12]
 801c62e:	6879      	ldr	r1, [r7, #4]
 801c630:	4618      	mov	r0, r3
 801c632:	f000 f947 	bl	801c8c4 <cogui_send>
}
 801c636:	bf00      	nop
 801c638:	3708      	adds	r7, #8
 801c63a:	46bd      	mov	sp, r7
 801c63c:	bd80      	pop	{r7, pc}

0801c63e <cogui_server_event_handler>:

StatusType cogui_server_event_handler(struct cogui_event *event)
{
 801c63e:	b580      	push	{r7, lr}
 801c640:	b084      	sub	sp, #16
 801c642:	af00      	add	r7, sp, #0
 801c644:	6078      	str	r0, [r7, #4]
    COGUI_ASSERT(event != Co_NULL);
 801c646:	687b      	ldr	r3, [r7, #4]
 801c648:	2b00      	cmp	r3, #0
 801c64a:	d104      	bne.n	801c656 <cogui_server_event_handler+0x18>
 801c64c:	223d      	movs	r2, #61	; 0x3d
 801c64e:	492c      	ldr	r1, [pc, #176]	; (801c700 <cogui_server_event_handler+0xc2>)
 801c650:	482c      	ldr	r0, [pc, #176]	; (801c704 <cogui_server_event_handler+0xc6>)
 801c652:	f000 fdeb 	bl	801d22c <cogui_assert_handler>

    StatusType result = GUI_E_ERROR;
 801c656:	2316      	movs	r3, #22
 801c658:	73fb      	strb	r3, [r7, #15]

    switch (event->type)
 801c65a:	687b      	ldr	r3, [r7, #4]
 801c65c:	781b      	ldrb	r3, [r3, #0]
 801c65e:	2b0f      	cmp	r3, #15
 801c660:	d848      	bhi.n	801c6f4 <cogui_server_event_handler+0xb6>
 801c662:	a201      	add	r2, pc, #4	; (adr r2, 801c668 <cogui_server_event_handler+0x2a>)
 801c664:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801c668:	0801c6a9 	.word	0x0801c6a9
 801c66c:	0801c6a9 	.word	0x0801c6a9
 801c670:	0801c6f5 	.word	0x0801c6f5
 801c674:	0801c6f5 	.word	0x0801c6f5
 801c678:	0801c6f5 	.word	0x0801c6f5
 801c67c:	0801c6f5 	.word	0x0801c6f5
 801c680:	0801c6f5 	.word	0x0801c6f5
 801c684:	0801c6f5 	.word	0x0801c6f5
 801c688:	0801c6f5 	.word	0x0801c6f5
 801c68c:	0801c6d1 	.word	0x0801c6d1
 801c690:	0801c6d1 	.word	0x0801c6d1
 801c694:	0801c6f5 	.word	0x0801c6f5
 801c698:	0801c6c9 	.word	0x0801c6c9
 801c69c:	0801c6f5 	.word	0x0801c6f5
 801c6a0:	0801c6f5 	.word	0x0801c6f5
 801c6a4:	0801c6b7 	.word	0x0801c6b7
    {
	case COGUI_EVENT_APP_CREATE:
    case COGUI_EVENT_APP_DELE:
		result = cogui_ack(event, E_OK);
 801c6a8:	2100      	movs	r1, #0
 801c6aa:	6878      	ldr	r0, [r7, #4]
 801c6ac:	f000 f8e1 	bl	801c872 <cogui_ack>
 801c6b0:	4603      	mov	r3, r0
 801c6b2:	73fb      	strb	r3, [r7, #15]
		break;
 801c6b4:	e01f      	b.n	801c6f6 <cogui_server_event_handler+0xb8>

    case COGUI_EVENT_PAINT:
        result = cogui_send(event->sender, event);
 801c6b6:	687b      	ldr	r3, [r7, #4]
 801c6b8:	685b      	ldr	r3, [r3, #4]
 801c6ba:	6879      	ldr	r1, [r7, #4]
 801c6bc:	4618      	mov	r0, r3
 801c6be:	f000 f901 	bl	801c8c4 <cogui_send>
 801c6c2:	4603      	mov	r3, r0
 801c6c4:	73fb      	strb	r3, [r7, #15]
        break;
 801c6c6:	e016      	b.n	801c6f6 <cogui_server_event_handler+0xb8>
        break;

    case COGUI_EVENT_MOUSE_MOTION:
        /* handle mouse motion event */
		
        cogui_server_handler_mouse_motion(event);
 801c6c8:	6878      	ldr	r0, [r7, #4]
 801c6ca:	f7ff ff8f 	bl	801c5ec <cogui_server_handler_mouse_motion>
        break;
 801c6ce:	e012      	b.n	801c6f6 <cogui_server_event_handler+0xb8>

    case COGUI_EVENT_WINDOW_CLOSE:
    case COGUI_EVENT_WINDOW_HIDE:
    {
        if (COGUI_WINDOW_IS_ENABLE(event->win)) {
 801c6d0:	687b      	ldr	r3, [r7, #4]
 801c6d2:	691b      	ldr	r3, [r3, #16]
 801c6d4:	68db      	ldr	r3, [r3, #12]
 801c6d6:	f003 0301 	and.w	r3, r3, #1
 801c6da:	2b00      	cmp	r3, #0
 801c6dc:	d001      	beq.n	801c6e2 <cogui_server_event_handler+0xa4>
            result = GUI_E_ERROR;
 801c6de:	2316      	movs	r3, #22
 801c6e0:	73fb      	strb	r3, [r7, #15]
        }

        result = cogui_window_show(server_app->win);    
 801c6e2:	4b09      	ldr	r3, [pc, #36]	; (801c708 <cogui_server_event_handler+0xca>)
 801c6e4:	681b      	ldr	r3, [r3, #0]
 801c6e6:	691b      	ldr	r3, [r3, #16]
 801c6e8:	4618      	mov	r0, r3
 801c6ea:	f002 f911 	bl	801e910 <cogui_window_show>
 801c6ee:	4603      	mov	r3, r0
 801c6f0:	73fb      	strb	r3, [r7, #15]
        break;
 801c6f2:	e000      	b.n	801c6f6 <cogui_server_event_handler+0xb8>
		
        //cogui_server_event_handler_kbd((struct cogui_event_kbd *)event);
        break;

    default:
        break;
 801c6f4:	bf00      	nop
    }

    return result;
 801c6f6:	7bfb      	ldrb	r3, [r7, #15]
}
 801c6f8:	4618      	mov	r0, r3
 801c6fa:	3710      	adds	r7, #16
 801c6fc:	46bd      	mov	sp, r7
 801c6fe:	bd80      	pop	{r7, pc}
 801c700:	08022eec 	.word	0x08022eec
 801c704:	08022ed0 	.word	0x08022ed0
 801c708:	2000d790 	.word	0x2000d790

0801c70c <cogui_server_entry>:

void cogui_server_entry(void *parameter)
{
 801c70c:	b580      	push	{r7, lr}
 801c70e:	b082      	sub	sp, #8
 801c710:	af00      	add	r7, sp, #0
 801c712:	6078      	str	r0, [r7, #4]
    server_app = cogui_app_create("Server");
 801c714:	4810      	ldr	r0, [pc, #64]	; (801c758 <cogui_server_entry+0x4c>)
 801c716:	f7fe fc79 	bl	801b00c <cogui_app_create>
 801c71a:	4602      	mov	r2, r0
 801c71c:	4b0f      	ldr	r3, [pc, #60]	; (801c75c <cogui_server_entry+0x50>)
 801c71e:	601a      	str	r2, [r3, #0]
    if(server_app == Co_NULL){
 801c720:	4b0e      	ldr	r3, [pc, #56]	; (801c75c <cogui_server_entry+0x50>)
 801c722:	681b      	ldr	r3, [r3, #0]
 801c724:	2b00      	cmp	r3, #0
 801c726:	d013      	beq.n	801c750 <cogui_server_entry+0x44>
        return;
    }

    server_app->handler = cogui_server_event_handler;
 801c728:	4b0c      	ldr	r3, [pc, #48]	; (801c75c <cogui_server_entry+0x50>)
 801c72a:	681b      	ldr	r3, [r3, #0]
 801c72c:	4a0c      	ldr	r2, [pc, #48]	; (801c760 <cogui_server_entry+0x54>)
 801c72e:	651a      	str	r2, [r3, #80]	; 0x50

    cogui_app_run(server_app);
 801c730:	4b0a      	ldr	r3, [pc, #40]	; (801c75c <cogui_server_entry+0x50>)
 801c732:	681b      	ldr	r3, [r3, #0]
 801c734:	4618      	mov	r0, r3
 801c736:	f7fe fd77 	bl	801b228 <cogui_app_run>
    cogui_app_delete(server_app);
 801c73a:	4b08      	ldr	r3, [pc, #32]	; (801c75c <cogui_server_entry+0x50>)
 801c73c:	681b      	ldr	r3, [r3, #0]
 801c73e:	4618      	mov	r0, r3
 801c740:	f7fe fce0 	bl	801b104 <cogui_app_delete>
    server_app = Co_NULL;
 801c744:	4b05      	ldr	r3, [pc, #20]	; (801c75c <cogui_server_entry+0x50>)
 801c746:	2200      	movs	r2, #0
 801c748:	601a      	str	r2, [r3, #0]

    CoExitTask();
 801c74a:	f7fd fd87 	bl	801a25c <CoExitTask>
 801c74e:	e000      	b.n	801c752 <cogui_server_entry+0x46>
        return;
 801c750:	bf00      	nop
}
 801c752:	3708      	adds	r7, #8
 801c754:	46bd      	mov	sp, r7
 801c756:	bd80      	pop	{r7, pc}
 801c758:	08022ee4 	.word	0x08022ee4
 801c75c:	2000d790 	.word	0x2000d790
 801c760:	0801c63f 	.word	0x0801c63f

0801c764 <cogui_server_post_event>:

StatusType cogui_server_post_event(struct cogui_event *event)
{
 801c764:	b580      	push	{r7, lr}
 801c766:	b084      	sub	sp, #16
 801c768:	af00      	add	r7, sp, #0
 801c76a:	6078      	str	r0, [r7, #4]
    StatusType result;

    if (server_app != Co_NULL){
 801c76c:	4b09      	ldr	r3, [pc, #36]	; (801c794 <cogui_server_post_event+0x30>)
 801c76e:	681b      	ldr	r3, [r3, #0]
 801c770:	2b00      	cmp	r3, #0
 801c772:	d008      	beq.n	801c786 <cogui_server_post_event+0x22>
        result = cogui_send(server_app, event);
 801c774:	4b07      	ldr	r3, [pc, #28]	; (801c794 <cogui_server_post_event+0x30>)
 801c776:	681b      	ldr	r3, [r3, #0]
 801c778:	6879      	ldr	r1, [r7, #4]
 801c77a:	4618      	mov	r0, r3
 801c77c:	f000 f8a2 	bl	801c8c4 <cogui_send>
 801c780:	4603      	mov	r3, r0
 801c782:	73fb      	strb	r3, [r7, #15]
 801c784:	e001      	b.n	801c78a <cogui_server_post_event+0x26>
    }
    else{
        result = GUI_E_ERROR;
 801c786:	2316      	movs	r3, #22
 801c788:	73fb      	strb	r3, [r7, #15]
    }

    return result;
 801c78a:	7bfb      	ldrb	r3, [r7, #15]
}
 801c78c:	4618      	mov	r0, r3
 801c78e:	3710      	adds	r7, #16
 801c790:	46bd      	mov	sp, r7
 801c792:	bd80      	pop	{r7, pc}
 801c794:	2000d790 	.word	0x2000d790

0801c798 <cogui_server_post_event_sync>:

StatusType cogui_server_post_event_sync(struct cogui_event *event)
{
 801c798:	b580      	push	{r7, lr}
 801c79a:	b084      	sub	sp, #16
 801c79c:	af00      	add	r7, sp, #0
 801c79e:	6078      	str	r0, [r7, #4]
    StatusType result;

    if (server_app != Co_NULL){
 801c7a0:	4b09      	ldr	r3, [pc, #36]	; (801c7c8 <cogui_server_post_event_sync+0x30>)
 801c7a2:	681b      	ldr	r3, [r3, #0]
 801c7a4:	2b00      	cmp	r3, #0
 801c7a6:	d008      	beq.n	801c7ba <cogui_server_post_event_sync+0x22>
        result = cogui_send_sync(server_app, event);
 801c7a8:	4b07      	ldr	r3, [pc, #28]	; (801c7c8 <cogui_server_post_event_sync+0x30>)
 801c7aa:	681b      	ldr	r3, [r3, #0]
 801c7ac:	6879      	ldr	r1, [r7, #4]
 801c7ae:	4618      	mov	r0, r3
 801c7b0:	f000 f8b6 	bl	801c920 <cogui_send_sync>
 801c7b4:	4603      	mov	r3, r0
 801c7b6:	73fb      	strb	r3, [r7, #15]
 801c7b8:	e001      	b.n	801c7be <cogui_server_post_event_sync+0x26>
    }
    else{
        result = GUI_E_ERROR;
 801c7ba:	2316      	movs	r3, #22
 801c7bc:	73fb      	strb	r3, [r7, #15]
    }

    return result;
 801c7be:	7bfb      	ldrb	r3, [r7, #15]
}
 801c7c0:	4618      	mov	r0, r3
 801c7c2:	3710      	adds	r7, #16
 801c7c4:	46bd      	mov	sp, r7
 801c7c6:	bd80      	pop	{r7, pc}
 801c7c8:	2000d790 	.word	0x2000d790

0801c7cc <cogui_get_server>:


cogui_app_t *cogui_get_server(void)
{
 801c7cc:	b480      	push	{r7}
 801c7ce:	af00      	add	r7, sp, #0
    return server_app;
 801c7d0:	4b03      	ldr	r3, [pc, #12]	; (801c7e0 <cogui_get_server+0x14>)
 801c7d2:	681b      	ldr	r3, [r3, #0]
}
 801c7d4:	4618      	mov	r0, r3
 801c7d6:	46bd      	mov	sp, r7
 801c7d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c7dc:	4770      	bx	lr
 801c7de:	bf00      	nop
 801c7e0:	2000d790 	.word	0x2000d790

0801c7e4 <cogui_server_init>:

void cogui_server_init(void)
{
 801c7e4:	b580      	push	{r7, lr}
 801c7e6:	af00      	add	r7, sp, #0
    CoCreateTask(cogui_server_entry, (void *)0, 15,&server_Stk[511], 512);
 801c7e8:	4b03      	ldr	r3, [pc, #12]	; (801c7f8 <cogui_server_init+0x14>)
 801c7ea:	4a04      	ldr	r2, [pc, #16]	; (801c7fc <cogui_server_init+0x18>)
 801c7ec:	2100      	movs	r1, #0
 801c7ee:	4804      	ldr	r0, [pc, #16]	; (801c800 <cogui_server_init+0x1c>)
 801c7f0:	f7fd fc14 	bl	801a01c <CreateTask>
}
 801c7f4:	bf00      	nop
 801c7f6:	bd80      	pop	{r7, pc}
 801c7f8:	2000df90 	.word	0x2000df90
 801c7fc:	0002000f 	.word	0x0002000f
 801c800:	0801c70d 	.word	0x0801c70d

0801c804 <cogui_system_init>:
 * @param[out] None
 * @retval     None
 *******************************************************************************
 */
void cogui_system_init(void)
{
 801c804:	b580      	push	{r7, lr}
 801c806:	af00      	add	r7, sp, #0
    cogui_printf("[%10s] Initial server...", "Server");
 801c808:	4905      	ldr	r1, [pc, #20]	; (801c820 <cogui_system_init+0x1c>)
 801c80a:	4806      	ldr	r0, [pc, #24]	; (801c824 <cogui_system_init+0x20>)
 801c80c:	f000 fb2e 	bl	801ce6c <cogui_printf>
    cogui_server_init();
 801c810:	f7ff ffe8 	bl	801c7e4 <cogui_server_init>
    cogui_printf("\t\t\x1b[;32;1m[OK]\x1b[0;m\r\n");
 801c814:	4804      	ldr	r0, [pc, #16]	; (801c828 <cogui_system_init+0x24>)
 801c816:	f000 fb29 	bl	801ce6c <cogui_printf>
}
 801c81a:	bf00      	nop
 801c81c:	bd80      	pop	{r7, pc}
 801c81e:	bf00      	nop
 801c820:	08022fac 	.word	0x08022fac
 801c824:	08022fb4 	.word	0x08022fb4
 801c828:	08022fd0 	.word	0x08022fd0

0801c82c <cogui_malloc>:
 * @param[out] None
 * @retval     *ptr     Allocated memory pointer.
 *******************************************************************************
 */
void *cogui_malloc(U32 size)
{
 801c82c:	b580      	push	{r7, lr}
 801c82e:	b084      	sub	sp, #16
 801c830:	af00      	add	r7, sp, #0
 801c832:	6078      	str	r0, [r7, #4]
    void *ptr;
    
    ptr = CoKmalloc(size);
 801c834:	6878      	ldr	r0, [r7, #4]
 801c836:	f7fb fe35 	bl	80184a4 <CoKmalloc>
 801c83a:	60f8      	str	r0, [r7, #12]

    /* if malloc failed, print error message */
	if(ptr == Co_NULL){
 801c83c:	68fb      	ldr	r3, [r7, #12]
 801c83e:	2b00      	cmp	r3, #0
 801c840:	d103      	bne.n	801c84a <cogui_malloc+0x1e>
		cogui_printf("[%10s] out of memory\r\n", "system");
 801c842:	4904      	ldr	r1, [pc, #16]	; (801c854 <cogui_malloc+0x28>)
 801c844:	4804      	ldr	r0, [pc, #16]	; (801c858 <cogui_malloc+0x2c>)
 801c846:	f000 fb11 	bl	801ce6c <cogui_printf>
	}
	
    return ptr;
 801c84a:	68fb      	ldr	r3, [r7, #12]
}
 801c84c:	4618      	mov	r0, r3
 801c84e:	3710      	adds	r7, #16
 801c850:	46bd      	mov	sp, r7
 801c852:	bd80      	pop	{r7, pc}
 801c854:	08022fe8 	.word	0x08022fe8
 801c858:	08022ff0 	.word	0x08022ff0

0801c85c <cogui_free>:
 * @param[out] None
 * @retval     None
 *******************************************************************************
 */
void cogui_free(void* ptr)
{
 801c85c:	b580      	push	{r7, lr}
 801c85e:	b082      	sub	sp, #8
 801c860:	af00      	add	r7, sp, #0
 801c862:	6078      	str	r0, [r7, #4]
    CoKfree(ptr);
 801c864:	6878      	ldr	r0, [r7, #4]
 801c866:	f7fb fed3 	bl	8018610 <CoKfree>
}
 801c86a:	bf00      	nop
 801c86c:	3708      	adds	r7, #8
 801c86e:	46bd      	mov	sp, r7
 801c870:	bd80      	pop	{r7, pc}

0801c872 <cogui_ack>:
 * @param[out] None       
 * @retval     GUI_E_OK     Always return GUI_E_OK .  
 *******************************************************************************
 */
StatusType cogui_ack(struct cogui_event *event, StatusType status)
{
 801c872:	b580      	push	{r7, lr}
 801c874:	b082      	sub	sp, #8
 801c876:	af00      	add	r7, sp, #0
 801c878:	6078      	str	r0, [r7, #4]
 801c87a:	460b      	mov	r3, r1
 801c87c:	70fb      	strb	r3, [r7, #3]
    COGUI_ASSERT(event != Co_NULL);
 801c87e:	687b      	ldr	r3, [r7, #4]
 801c880:	2b00      	cmp	r3, #0
 801c882:	d104      	bne.n	801c88e <cogui_ack+0x1c>
 801c884:	224a      	movs	r2, #74	; 0x4a
 801c886:	490c      	ldr	r1, [pc, #48]	; (801c8b8 <cogui_ack+0x46>)
 801c888:	480c      	ldr	r0, [pc, #48]	; (801c8bc <cogui_ack+0x4a>)
 801c88a:	f000 fccf 	bl	801d22c <cogui_assert_handler>
    COGUI_ASSERT(event->ack);
 801c88e:	687b      	ldr	r3, [r7, #4]
 801c890:	7a1b      	ldrb	r3, [r3, #8]
 801c892:	2b00      	cmp	r3, #0
 801c894:	d104      	bne.n	801c8a0 <cogui_ack+0x2e>
 801c896:	224b      	movs	r2, #75	; 0x4b
 801c898:	4907      	ldr	r1, [pc, #28]	; (801c8b8 <cogui_ack+0x46>)
 801c89a:	4809      	ldr	r0, [pc, #36]	; (801c8c0 <cogui_ack+0x4e>)
 801c89c:	f000 fcc6 	bl	801d22c <cogui_assert_handler>
	
    /* ACK status */
    CoPostMail(event->ack, (void *)&status);
 801c8a0:	687b      	ldr	r3, [r7, #4]
 801c8a2:	7a1b      	ldrb	r3, [r3, #8]
 801c8a4:	1cfa      	adds	r2, r7, #3
 801c8a6:	4611      	mov	r1, r2
 801c8a8:	4618      	mov	r0, r3
 801c8aa:	f7fc f973 	bl	8018b94 <CoPostMail>

    return GUI_E_OK;
 801c8ae:	2317      	movs	r3, #23
}
 801c8b0:	4618      	mov	r0, r3
 801c8b2:	3708      	adds	r7, #8
 801c8b4:	46bd      	mov	sp, r7
 801c8b6:	bd80      	pop	{r7, pc}
 801c8b8:	08023088 	.word	0x08023088
 801c8bc:	08023008 	.word	0x08023008
 801c8c0:	0802301c 	.word	0x0802301c

0801c8c4 <cogui_send>:
 * @retval     GUI_E_OK         If send successfully.         
 * @retval     GUI_E_ERROR      If some error occurred.          
 *******************************************************************************
 */
StatusType cogui_send(cogui_app_t *app, struct cogui_event *event)
{
 801c8c4:	b580      	push	{r7, lr}
 801c8c6:	b084      	sub	sp, #16
 801c8c8:	af00      	add	r7, sp, #0
 801c8ca:	6078      	str	r0, [r7, #4]
 801c8cc:	6039      	str	r1, [r7, #0]
    StatusType result;

    COGUI_ASSERT(event != Co_NULL);
 801c8ce:	683b      	ldr	r3, [r7, #0]
 801c8d0:	2b00      	cmp	r3, #0
 801c8d2:	d104      	bne.n	801c8de <cogui_send+0x1a>
 801c8d4:	2261      	movs	r2, #97	; 0x61
 801c8d6:	490f      	ldr	r1, [pc, #60]	; (801c914 <cogui_send+0x50>)
 801c8d8:	480f      	ldr	r0, [pc, #60]	; (801c918 <cogui_send+0x54>)
 801c8da:	f000 fca7 	bl	801d22c <cogui_assert_handler>
    COGUI_ASSERT(app != Co_NULL);
 801c8de:	687b      	ldr	r3, [r7, #4]
 801c8e0:	2b00      	cmp	r3, #0
 801c8e2:	d104      	bne.n	801c8ee <cogui_send+0x2a>
 801c8e4:	2262      	movs	r2, #98	; 0x62
 801c8e6:	490b      	ldr	r1, [pc, #44]	; (801c914 <cogui_send+0x50>)
 801c8e8:	480c      	ldr	r0, [pc, #48]	; (801c91c <cogui_send+0x58>)
 801c8ea:	f000 fc9f 	bl	801d22c <cogui_assert_handler>

    /* send event to application */
    result = CoPostMail(app->mq, event);
 801c8ee:	687b      	ldr	r3, [r7, #4]
 801c8f0:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 801c8f4:	6839      	ldr	r1, [r7, #0]
 801c8f6:	4618      	mov	r0, r3
 801c8f8:	f7fc f94c 	bl	8018b94 <CoPostMail>
 801c8fc:	4603      	mov	r3, r0
 801c8fe:	73fb      	strb	r3, [r7, #15]

    /* return result to GUI status type */
    COGUI_RETURN_TYPE(result);
 801c900:	7bfb      	ldrb	r3, [r7, #15]
 801c902:	2b00      	cmp	r3, #0
 801c904:	d101      	bne.n	801c90a <cogui_send+0x46>
 801c906:	2317      	movs	r3, #23
 801c908:	e000      	b.n	801c90c <cogui_send+0x48>
 801c90a:	2316      	movs	r3, #22
}
 801c90c:	4618      	mov	r0, r3
 801c90e:	3710      	adds	r7, #16
 801c910:	46bd      	mov	sp, r7
 801c912:	bd80      	pop	{r7, pc}
 801c914:	08023094 	.word	0x08023094
 801c918:	08023008 	.word	0x08023008
 801c91c:	08023028 	.word	0x08023028

0801c920 <cogui_send_sync>:
 * @retval     GUI_E_OK         If send successfully.         
 * @retval     GUI_E_ERROR      If some error occurred.          
 *******************************************************************************
 */
StatusType cogui_send_sync(cogui_app_t *app, struct cogui_event *event)
{
 801c920:	b580      	push	{r7, lr}
 801c922:	b084      	sub	sp, #16
 801c924:	af00      	add	r7, sp, #0
 801c926:	6078      	str	r0, [r7, #4]
 801c928:	6039      	str	r1, [r7, #0]
    StatusType result;

    COGUI_ASSERT(event != Co_NULL);
 801c92a:	683b      	ldr	r3, [r7, #0]
 801c92c:	2b00      	cmp	r3, #0
 801c92e:	d104      	bne.n	801c93a <cogui_send_sync+0x1a>
 801c930:	2279      	movs	r2, #121	; 0x79
 801c932:	4921      	ldr	r1, [pc, #132]	; (801c9b8 <cogui_send_sync+0x98>)
 801c934:	4821      	ldr	r0, [pc, #132]	; (801c9bc <cogui_send_sync+0x9c>)
 801c936:	f000 fc79 	bl	801d22c <cogui_assert_handler>
    COGUI_ASSERT(app != Co_NULL);
 801c93a:	687b      	ldr	r3, [r7, #4]
 801c93c:	2b00      	cmp	r3, #0
 801c93e:	d104      	bne.n	801c94a <cogui_send_sync+0x2a>
 801c940:	227a      	movs	r2, #122	; 0x7a
 801c942:	491d      	ldr	r1, [pc, #116]	; (801c9b8 <cogui_send_sync+0x98>)
 801c944:	481e      	ldr	r0, [pc, #120]	; (801c9c0 <cogui_send_sync+0xa0>)
 801c946:	f000 fc71 	bl	801d22c <cogui_assert_handler>

    /* create a mail box for acking */
    OS_EventID mq = CoCreateMbox(EVENT_SORT_TYPE_FIFO);
 801c94a:	2001      	movs	r0, #1
 801c94c:	f7fb ffea 	bl	8018924 <CoCreateMbox>
 801c950:	4603      	mov	r3, r0
 801c952:	73fb      	strb	r3, [r7, #15]
	event->ack = mq;
 801c954:	683b      	ldr	r3, [r7, #0]
 801c956:	7bfa      	ldrb	r2, [r7, #15]
 801c958:	721a      	strb	r2, [r3, #8]

    /* send event to application */
    result = CoPostMail(app->mq, event);
 801c95a:	687b      	ldr	r3, [r7, #4]
 801c95c:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 801c960:	6839      	ldr	r1, [r7, #0]
 801c962:	4618      	mov	r0, r3
 801c964:	f7fc f916 	bl	8018b94 <CoPostMail>
 801c968:	4603      	mov	r3, r0
 801c96a:	73bb      	strb	r3, [r7, #14]
    
    /* if send event failed, return */
    if (result != E_OK){
 801c96c:	7bbb      	ldrb	r3, [r7, #14]
 801c96e:	2b00      	cmp	r3, #0
 801c970:	d00b      	beq.n	801c98a <cogui_send_sync+0x6a>
        CoDelMbox(mq, OPT_DEL_ANYWAY);
 801c972:	7bfb      	ldrb	r3, [r7, #15]
 801c974:	2101      	movs	r1, #1
 801c976:	4618      	mov	r0, r3
 801c978:	f7fb ffee 	bl	8018958 <CoDelMbox>
        COGUI_RETURN_TYPE(result);
 801c97c:	7bbb      	ldrb	r3, [r7, #14]
 801c97e:	2b00      	cmp	r3, #0
 801c980:	d101      	bne.n	801c986 <cogui_send_sync+0x66>
 801c982:	2317      	movs	r3, #23
 801c984:	e014      	b.n	801c9b0 <cogui_send_sync+0x90>
 801c986:	2316      	movs	r3, #22
 801c988:	e012      	b.n	801c9b0 <cogui_send_sync+0x90>
    }

    /* wait forever for server ack */
    event = CoPendMail(mq, 0, &result);
 801c98a:	f107 020e 	add.w	r2, r7, #14
 801c98e:	7bfb      	ldrb	r3, [r7, #15]
 801c990:	2100      	movs	r1, #0
 801c992:	4618      	mov	r0, r3
 801c994:	f7fc f850 	bl	8018a38 <CoPendMail>
 801c998:	6038      	str	r0, [r7, #0]

    /* delete the mail box after receive ack */
    CoDelMbox(mq, OPT_DEL_ANYWAY);
 801c99a:	7bfb      	ldrb	r3, [r7, #15]
 801c99c:	2101      	movs	r1, #1
 801c99e:	4618      	mov	r0, r3
 801c9a0:	f7fb ffda 	bl	8018958 <CoDelMbox>

    /* return result to GUI status type */
    COGUI_RETURN_TYPE(result);
 801c9a4:	7bbb      	ldrb	r3, [r7, #14]
 801c9a6:	2b00      	cmp	r3, #0
 801c9a8:	d101      	bne.n	801c9ae <cogui_send_sync+0x8e>
 801c9aa:	2317      	movs	r3, #23
 801c9ac:	e000      	b.n	801c9b0 <cogui_send_sync+0x90>
 801c9ae:	2316      	movs	r3, #22
}
 801c9b0:	4618      	mov	r0, r3
 801c9b2:	3710      	adds	r7, #16
 801c9b4:	46bd      	mov	sp, r7
 801c9b6:	bd80      	pop	{r7, pc}
 801c9b8:	080230a0 	.word	0x080230a0
 801c9bc:	08023008 	.word	0x08023008
 801c9c0:	08023028 	.word	0x08023028

0801c9c4 <cogui_recv>:
 * @retval     GUI_E_OK         Receive event successfully
 * @retval     GUI_E_ERROR      Something wrong when receiveing a event
 *******************************************************************************
 */
StatusType cogui_recv(OS_EventID mq, struct cogui_event *event, co_int32_t timeout)
{
 801c9c4:	b580      	push	{r7, lr}
 801c9c6:	b088      	sub	sp, #32
 801c9c8:	af00      	add	r7, sp, #0
 801c9ca:	4603      	mov	r3, r0
 801c9cc:	60b9      	str	r1, [r7, #8]
 801c9ce:	607a      	str	r2, [r7, #4]
 801c9d0:	73fb      	strb	r3, [r7, #15]
    StatusType result;
    cogui_app_t *app;
    struct cogui_event* buf;

    COGUI_ASSERT(event!=Co_NULL);
 801c9d2:	68bb      	ldr	r3, [r7, #8]
 801c9d4:	2b00      	cmp	r3, #0
 801c9d6:	d104      	bne.n	801c9e2 <cogui_recv+0x1e>
 801c9d8:	22a3      	movs	r2, #163	; 0xa3
 801c9da:	4913      	ldr	r1, [pc, #76]	; (801ca28 <cogui_recv+0x64>)
 801c9dc:	4813      	ldr	r0, [pc, #76]	; (801ca2c <cogui_recv+0x68>)
 801c9de:	f000 fc25 	bl	801d22c <cogui_assert_handler>

    /* check running applicate is vaild or not */
    app = cogui_app_self();
 801c9e2:	f7fe fcdf 	bl	801b3a4 <cogui_app_self>
 801c9e6:	61f8      	str	r0, [r7, #28]
    if (app == Co_NULL) {
 801c9e8:	69fb      	ldr	r3, [r7, #28]
 801c9ea:	2b00      	cmp	r3, #0
 801c9ec:	d101      	bne.n	801c9f2 <cogui_recv+0x2e>
        return GUI_E_APP_NULL;
 801c9ee:	2318      	movs	r3, #24
 801c9f0:	e015      	b.n	801ca1e <cogui_recv+0x5a>
    }

    /* receive a event and copy to event pointer */
    buf = (struct cogui_event *)CoPendMail(mq, timeout, &result);
 801c9f2:	6879      	ldr	r1, [r7, #4]
 801c9f4:	f107 0217 	add.w	r2, r7, #23
 801c9f8:	7bfb      	ldrb	r3, [r7, #15]
 801c9fa:	4618      	mov	r0, r3
 801c9fc:	f7fc f81c 	bl	8018a38 <CoPendMail>
 801ca00:	61b8      	str	r0, [r7, #24]
    cogui_memcpy(event, buf, sizeof(struct cogui_event));
 801ca02:	f04f 0234 	mov.w	r2, #52	; 0x34
 801ca06:	f04f 0300 	mov.w	r3, #0
 801ca0a:	69b9      	ldr	r1, [r7, #24]
 801ca0c:	68b8      	ldr	r0, [r7, #8]
 801ca0e:	f000 f82f 	bl	801ca70 <cogui_memcpy>

    /* return result to GUI status type */
    COGUI_RETURN_TYPE(result);
 801ca12:	7dfb      	ldrb	r3, [r7, #23]
 801ca14:	2b00      	cmp	r3, #0
 801ca16:	d101      	bne.n	801ca1c <cogui_recv+0x58>
 801ca18:	2317      	movs	r3, #23
 801ca1a:	e000      	b.n	801ca1e <cogui_recv+0x5a>
 801ca1c:	2316      	movs	r3, #22
}
 801ca1e:	4618      	mov	r0, r3
 801ca20:	3720      	adds	r7, #32
 801ca22:	46bd      	mov	sp, r7
 801ca24:	bd80      	pop	{r7, pc}
 801ca26:	bf00      	nop
 801ca28:	080230b0 	.word	0x080230b0
 801ca2c:	08023038 	.word	0x08023038

0801ca30 <cogui_memset>:
 * @param[out] *buf             Result after setting.
 * @retval     *buf             Result after setting.
 *******************************************************************************
 */
void *cogui_memset(void *buf, int val, co_uint64_t size)
{
 801ca30:	b490      	push	{r4, r7}
 801ca32:	b086      	sub	sp, #24
 801ca34:	af00      	add	r7, sp, #0
 801ca36:	60f8      	str	r0, [r7, #12]
 801ca38:	60b9      	str	r1, [r7, #8]
 801ca3a:	e9c7 2300 	strd	r2, r3, [r7]
    char *tmp = (char *)buf;
 801ca3e:	68fb      	ldr	r3, [r7, #12]
 801ca40:	617b      	str	r3, [r7, #20]

    /* setting value one by one */
    while (size--) {
 801ca42:	e005      	b.n	801ca50 <cogui_memset+0x20>
        *tmp++ = val;
 801ca44:	697b      	ldr	r3, [r7, #20]
 801ca46:	1c5a      	adds	r2, r3, #1
 801ca48:	617a      	str	r2, [r7, #20]
 801ca4a:	68ba      	ldr	r2, [r7, #8]
 801ca4c:	b2d2      	uxtb	r2, r2
 801ca4e:	701a      	strb	r2, [r3, #0]
    while (size--) {
 801ca50:	e9d7 3400 	ldrd	r3, r4, [r7]
 801ca54:	f113 31ff 	adds.w	r1, r3, #4294967295	; 0xffffffff
 801ca58:	f144 32ff 	adc.w	r2, r4, #4294967295	; 0xffffffff
 801ca5c:	e9c7 1200 	strd	r1, r2, [r7]
 801ca60:	4323      	orrs	r3, r4
 801ca62:	d1ef      	bne.n	801ca44 <cogui_memset+0x14>
    }

    return buf;
 801ca64:	68fb      	ldr	r3, [r7, #12]
}
 801ca66:	4618      	mov	r0, r3
 801ca68:	3718      	adds	r7, #24
 801ca6a:	46bd      	mov	sp, r7
 801ca6c:	bc90      	pop	{r4, r7}
 801ca6e:	4770      	bx	lr

0801ca70 <cogui_memcpy>:
 * @param[out] *dest            Memory buffer to paste.
 * @retval     *dest            Result after pasting.
 *******************************************************************************
 */
void *cogui_memcpy(void *dest, const void *src, co_uint64_t size)
{
 801ca70:	b490      	push	{r4, r7}
 801ca72:	b086      	sub	sp, #24
 801ca74:	af00      	add	r7, sp, #0
 801ca76:	60f8      	str	r0, [r7, #12]
 801ca78:	60b9      	str	r1, [r7, #8]
 801ca7a:	e9c7 2300 	strd	r2, r3, [r7]
    char *tar = (char *)dest;
 801ca7e:	68fb      	ldr	r3, [r7, #12]
 801ca80:	617b      	str	r3, [r7, #20]
    char *tmp = (char *)src;
 801ca82:	68bb      	ldr	r3, [r7, #8]
 801ca84:	613b      	str	r3, [r7, #16]

    /* pasting value one by one */
    while (size--) {
 801ca86:	e007      	b.n	801ca98 <cogui_memcpy+0x28>
        *tar++ = *tmp++; 
 801ca88:	693a      	ldr	r2, [r7, #16]
 801ca8a:	1c53      	adds	r3, r2, #1
 801ca8c:	613b      	str	r3, [r7, #16]
 801ca8e:	697b      	ldr	r3, [r7, #20]
 801ca90:	1c59      	adds	r1, r3, #1
 801ca92:	6179      	str	r1, [r7, #20]
 801ca94:	7812      	ldrb	r2, [r2, #0]
 801ca96:	701a      	strb	r2, [r3, #0]
    while (size--) {
 801ca98:	e9d7 3400 	ldrd	r3, r4, [r7]
 801ca9c:	f113 31ff 	adds.w	r1, r3, #4294967295	; 0xffffffff
 801caa0:	f144 32ff 	adc.w	r2, r4, #4294967295	; 0xffffffff
 801caa4:	e9c7 1200 	strd	r1, r2, [r7]
 801caa8:	4323      	orrs	r3, r4
 801caaa:	d1ed      	bne.n	801ca88 <cogui_memcpy+0x18>
    }

    return dest;    
 801caac:	68fb      	ldr	r3, [r7, #12]
}
 801caae:	4618      	mov	r0, r3
 801cab0:	3718      	adds	r7, #24
 801cab2:	46bd      	mov	sp, r7
 801cab4:	bc90      	pop	{r4, r7}
 801cab6:	4770      	bx	lr

0801cab8 <cogui_memmove>:
 * @param[out] *dest            Destination of moving.
 * @retval     *dest            Result after moving.
 *******************************************************************************
 */
void *cogui_memmove(void *dest, const void *src, co_uint64_t size)
{
 801cab8:	b490      	push	{r4, r7}
 801caba:	b086      	sub	sp, #24
 801cabc:	af00      	add	r7, sp, #0
 801cabe:	60f8      	str	r0, [r7, #12]
 801cac0:	60b9      	str	r1, [r7, #8]
 801cac2:	e9c7 2300 	strd	r2, r3, [r7]
    char *ds = (char *)dest;
 801cac6:	68fb      	ldr	r3, [r7, #12]
 801cac8:	617b      	str	r3, [r7, #20]
    char *ss = (char *)src;
 801caca:	68bb      	ldr	r3, [r7, #8]
 801cacc:	613b      	str	r3, [r7, #16]

    /* if destination is on the back of source, and the size will not overwrite */
    if (ss < ds && ds < ss + size) {
 801cace:	693a      	ldr	r2, [r7, #16]
 801cad0:	697b      	ldr	r3, [r7, #20]
 801cad2:	429a      	cmp	r2, r3
 801cad4:	d22b      	bcs.n	801cb2e <cogui_memmove+0x76>
 801cad6:	683b      	ldr	r3, [r7, #0]
 801cad8:	693a      	ldr	r2, [r7, #16]
 801cada:	4413      	add	r3, r2
 801cadc:	697a      	ldr	r2, [r7, #20]
 801cade:	429a      	cmp	r2, r3
 801cae0:	d225      	bcs.n	801cb2e <cogui_memmove+0x76>
        ds += size;
 801cae2:	683b      	ldr	r3, [r7, #0]
 801cae4:	697a      	ldr	r2, [r7, #20]
 801cae6:	4413      	add	r3, r2
 801cae8:	617b      	str	r3, [r7, #20]
        ss += size;
 801caea:	683b      	ldr	r3, [r7, #0]
 801caec:	693a      	ldr	r2, [r7, #16]
 801caee:	4413      	add	r3, r2
 801caf0:	613b      	str	r3, [r7, #16]

        /* moving from the last slot*/
        while (size--) {
 801caf2:	e009      	b.n	801cb08 <cogui_memmove+0x50>
            *(--ds) = *(--ss);
 801caf4:	693b      	ldr	r3, [r7, #16]
 801caf6:	3b01      	subs	r3, #1
 801caf8:	613b      	str	r3, [r7, #16]
 801cafa:	697b      	ldr	r3, [r7, #20]
 801cafc:	3b01      	subs	r3, #1
 801cafe:	617b      	str	r3, [r7, #20]
 801cb00:	693b      	ldr	r3, [r7, #16]
 801cb02:	781a      	ldrb	r2, [r3, #0]
 801cb04:	697b      	ldr	r3, [r7, #20]
 801cb06:	701a      	strb	r2, [r3, #0]
        while (size--) {
 801cb08:	e9d7 3400 	ldrd	r3, r4, [r7]
 801cb0c:	f113 31ff 	adds.w	r1, r3, #4294967295	; 0xffffffff
 801cb10:	f144 32ff 	adc.w	r2, r4, #4294967295	; 0xffffffff
 801cb14:	e9c7 1200 	strd	r1, r2, [r7]
 801cb18:	4323      	orrs	r3, r4
 801cb1a:	d1eb      	bne.n	801caf4 <cogui_memmove+0x3c>
    if (ss < ds && ds < ss + size) {
 801cb1c:	e011      	b.n	801cb42 <cogui_memmove+0x8a>
    }
    else {

        /* moving from the first slot */
        while (size--) {
            *ds++ = *ss++;
 801cb1e:	693a      	ldr	r2, [r7, #16]
 801cb20:	1c53      	adds	r3, r2, #1
 801cb22:	613b      	str	r3, [r7, #16]
 801cb24:	697b      	ldr	r3, [r7, #20]
 801cb26:	1c59      	adds	r1, r3, #1
 801cb28:	6179      	str	r1, [r7, #20]
 801cb2a:	7812      	ldrb	r2, [r2, #0]
 801cb2c:	701a      	strb	r2, [r3, #0]
        while (size--) {
 801cb2e:	e9d7 3400 	ldrd	r3, r4, [r7]
 801cb32:	f113 31ff 	adds.w	r1, r3, #4294967295	; 0xffffffff
 801cb36:	f144 32ff 	adc.w	r2, r4, #4294967295	; 0xffffffff
 801cb3a:	e9c7 1200 	strd	r1, r2, [r7]
 801cb3e:	4323      	orrs	r3, r4
 801cb40:	d1ed      	bne.n	801cb1e <cogui_memmove+0x66>
        }
    }

    return dest;
 801cb42:	68fb      	ldr	r3, [r7, #12]
}
 801cb44:	4618      	mov	r0, r3
 801cb46:	3718      	adds	r7, #24
 801cb48:	46bd      	mov	sp, r7
 801cb4a:	bc90      	pop	{r4, r7}
 801cb4c:	4770      	bx	lr

0801cb4e <cogui_memcmp>:
 * @param[out] None
 * @retval     res              Value of first different slot.
 *******************************************************************************
 */
co_int32_t cogui_memcmp(const void *buf1, const void *buf2, co_uint64_t size)
{
 801cb4e:	b490      	push	{r4, r7}
 801cb50:	b088      	sub	sp, #32
 801cb52:	af00      	add	r7, sp, #0
 801cb54:	60f8      	str	r0, [r7, #12]
 801cb56:	60b9      	str	r1, [r7, #8]
 801cb58:	e9c7 2300 	strd	r2, r3, [r7]
    const unsigned char *s1, *s2;
    int res = 0;
 801cb5c:	2300      	movs	r3, #0
 801cb5e:	617b      	str	r3, [r7, #20]

    for (s1 = (const unsigned char *)buf1, s2 = (const unsigned char *)buf2; size > 0; ++s1, ++s2, --size) {
 801cb60:	68fb      	ldr	r3, [r7, #12]
 801cb62:	61fb      	str	r3, [r7, #28]
 801cb64:	68bb      	ldr	r3, [r7, #8]
 801cb66:	61bb      	str	r3, [r7, #24]
 801cb68:	e017      	b.n	801cb9a <cogui_memcmp+0x4c>

        /* if different is occurred */
        if ((res = *s1 - *s2) != 0) {
 801cb6a:	69fb      	ldr	r3, [r7, #28]
 801cb6c:	781b      	ldrb	r3, [r3, #0]
 801cb6e:	461a      	mov	r2, r3
 801cb70:	69bb      	ldr	r3, [r7, #24]
 801cb72:	781b      	ldrb	r3, [r3, #0]
 801cb74:	1ad3      	subs	r3, r2, r3
 801cb76:	617b      	str	r3, [r7, #20]
 801cb78:	697b      	ldr	r3, [r7, #20]
 801cb7a:	2b00      	cmp	r3, #0
 801cb7c:	d112      	bne.n	801cba4 <cogui_memcmp+0x56>
    for (s1 = (const unsigned char *)buf1, s2 = (const unsigned char *)buf2; size > 0; ++s1, ++s2, --size) {
 801cb7e:	69fb      	ldr	r3, [r7, #28]
 801cb80:	3301      	adds	r3, #1
 801cb82:	61fb      	str	r3, [r7, #28]
 801cb84:	69bb      	ldr	r3, [r7, #24]
 801cb86:	3301      	adds	r3, #1
 801cb88:	61bb      	str	r3, [r7, #24]
 801cb8a:	e9d7 3400 	ldrd	r3, r4, [r7]
 801cb8e:	f113 31ff 	adds.w	r1, r3, #4294967295	; 0xffffffff
 801cb92:	f144 32ff 	adc.w	r2, r4, #4294967295	; 0xffffffff
 801cb96:	e9c7 1200 	strd	r1, r2, [r7]
 801cb9a:	e9d7 3400 	ldrd	r3, r4, [r7]
 801cb9e:	4323      	orrs	r3, r4
 801cba0:	d1e3      	bne.n	801cb6a <cogui_memcmp+0x1c>
 801cba2:	e000      	b.n	801cba6 <cogui_memcmp+0x58>
            break;
 801cba4:	bf00      	nop
        }
    }
     
    return res;
 801cba6:	697b      	ldr	r3, [r7, #20]
}
 801cba8:	4618      	mov	r0, r3
 801cbaa:	3720      	adds	r7, #32
 801cbac:	46bd      	mov	sp, r7
 801cbae:	bc90      	pop	{r4, r7}
 801cbb0:	4770      	bx	lr

0801cbb2 <cogui_strstr>:
 * @retval     res              Where we first find the substring.
 * @retval     Co_NULL          If we found nothing.
 *******************************************************************************
 */
char *cogui_strstr(const char *src, const char *tar)
{
 801cbb2:	b590      	push	{r4, r7, lr}
 801cbb4:	b085      	sub	sp, #20
 801cbb6:	af00      	add	r7, sp, #0
 801cbb8:	6078      	str	r0, [r7, #4]
 801cbba:	6039      	str	r1, [r7, #0]
    int ls, lt;

    /* if target is NULL, just return the start point of source */
    lt = cogui_strlen(src);
 801cbbc:	6878      	ldr	r0, [r7, #4]
 801cbbe:	f000 f82c 	bl	801cc1a <cogui_strlen>
 801cbc2:	4603      	mov	r3, r0
 801cbc4:	460c      	mov	r4, r1
 801cbc6:	60bb      	str	r3, [r7, #8]
    if (!lt) {
 801cbc8:	68bb      	ldr	r3, [r7, #8]
 801cbca:	2b00      	cmp	r3, #0
 801cbcc:	d101      	bne.n	801cbd2 <cogui_strstr+0x20>
        return (char *)src;
 801cbce:	687b      	ldr	r3, [r7, #4]
 801cbd0:	e01f      	b.n	801cc12 <cogui_strstr+0x60>
    }

    /* only if target's length is shorten then source's length should search */
    ls = cogui_strlen(tar);
 801cbd2:	6838      	ldr	r0, [r7, #0]
 801cbd4:	f000 f821 	bl	801cc1a <cogui_strlen>
 801cbd8:	4603      	mov	r3, r0
 801cbda:	460c      	mov	r4, r1
 801cbdc:	60fb      	str	r3, [r7, #12]
    while (ls >= lt) {
 801cbde:	e013      	b.n	801cc08 <cogui_strstr+0x56>
        ls--;
 801cbe0:	68fb      	ldr	r3, [r7, #12]
 801cbe2:	3b01      	subs	r3, #1
 801cbe4:	60fb      	str	r3, [r7, #12]

        /* if we found one, return occurred point */
        if (!cogui_memcmp(src, tar, lt)) {
 801cbe6:	68bb      	ldr	r3, [r7, #8]
 801cbe8:	ea4f 74e3 	mov.w	r4, r3, asr #31
 801cbec:	461a      	mov	r2, r3
 801cbee:	4623      	mov	r3, r4
 801cbf0:	6839      	ldr	r1, [r7, #0]
 801cbf2:	6878      	ldr	r0, [r7, #4]
 801cbf4:	f7ff ffab 	bl	801cb4e <cogui_memcmp>
 801cbf8:	4603      	mov	r3, r0
 801cbfa:	2b00      	cmp	r3, #0
 801cbfc:	d101      	bne.n	801cc02 <cogui_strstr+0x50>
            return (char *)src;
 801cbfe:	687b      	ldr	r3, [r7, #4]
 801cc00:	e007      	b.n	801cc12 <cogui_strstr+0x60>
        }

        src++;
 801cc02:	687b      	ldr	r3, [r7, #4]
 801cc04:	3301      	adds	r3, #1
 801cc06:	607b      	str	r3, [r7, #4]
    while (ls >= lt) {
 801cc08:	68fa      	ldr	r2, [r7, #12]
 801cc0a:	68bb      	ldr	r3, [r7, #8]
 801cc0c:	429a      	cmp	r2, r3
 801cc0e:	dae7      	bge.n	801cbe0 <cogui_strstr+0x2e>
    }     

    /* if we can't find substring, return Co_NULL */
    return Co_NULL;
 801cc10:	2300      	movs	r3, #0
}
 801cc12:	4618      	mov	r0, r3
 801cc14:	3714      	adds	r7, #20
 801cc16:	46bd      	mov	sp, r7
 801cc18:	bd90      	pop	{r4, r7, pc}

0801cc1a <cogui_strlen>:
 * @param[out] None
 * @retval     length    Result of string length. 
 *******************************************************************************
 */
co_uint64_t cogui_strlen(const char *str)
{
 801cc1a:	b490      	push	{r4, r7}
 801cc1c:	b084      	sub	sp, #16
 801cc1e:	af00      	add	r7, sp, #0
 801cc20:	6078      	str	r0, [r7, #4]
    const char *s;

    /* goto the end of the string */
    for (s = str; *s != '\0'; ++s) {
 801cc22:	687b      	ldr	r3, [r7, #4]
 801cc24:	60fb      	str	r3, [r7, #12]
 801cc26:	e002      	b.n	801cc2e <cogui_strlen+0x14>
 801cc28:	68fb      	ldr	r3, [r7, #12]
 801cc2a:	3301      	adds	r3, #1
 801cc2c:	60fb      	str	r3, [r7, #12]
 801cc2e:	68fb      	ldr	r3, [r7, #12]
 801cc30:	781b      	ldrb	r3, [r3, #0]
 801cc32:	2b00      	cmp	r3, #0
 801cc34:	d1f8      	bne.n	801cc28 <cogui_strlen+0xe>
        /* passing */
    }
    
    /* return memory address's differece */
    return s - str;
 801cc36:	68fa      	ldr	r2, [r7, #12]
 801cc38:	687b      	ldr	r3, [r7, #4]
 801cc3a:	1ad3      	subs	r3, r2, r3
 801cc3c:	ea4f 74e3 	mov.w	r4, r3, asr #31
}
 801cc40:	4618      	mov	r0, r3
 801cc42:	4621      	mov	r1, r4
 801cc44:	3710      	adds	r7, #16
 801cc46:	46bd      	mov	sp, r7
 801cc48:	bc90      	pop	{r4, r7}
 801cc4a:	4770      	bx	lr

0801cc4c <cogui_strdup>:
 * @param[out] None
 * @retval     *tmp      Result of new string pointer.
 *******************************************************************************
 */
char *cogui_strdup(const char *str)
{   
 801cc4c:	b590      	push	{r4, r7, lr}
 801cc4e:	b087      	sub	sp, #28
 801cc50:	af00      	add	r7, sp, #0
 801cc52:	6078      	str	r0, [r7, #4]
    /* allocate a memory for duplicate */
    co_uint64_t len = cogui_strlen(str) + 1; /* need to plus one for '/0' */
 801cc54:	6878      	ldr	r0, [r7, #4]
 801cc56:	f7ff ffe0 	bl	801cc1a <cogui_strlen>
 801cc5a:	460a      	mov	r2, r1
 801cc5c:	4601      	mov	r1, r0
 801cc5e:	1c4b      	adds	r3, r1, #1
 801cc60:	f142 0400 	adc.w	r4, r2, #0
 801cc64:	e9c7 3404 	strd	r3, r4, [r7, #16]
    char *tmp =  (char *)cogui_malloc(len);
 801cc68:	693b      	ldr	r3, [r7, #16]
 801cc6a:	4618      	mov	r0, r3
 801cc6c:	f7ff fdde 	bl	801c82c <cogui_malloc>
 801cc70:	60f8      	str	r0, [r7, #12]

    /* if allocate failed, return Co_NULL */
    if (tmp == Co_NULL) {
 801cc72:	68fb      	ldr	r3, [r7, #12]
 801cc74:	2b00      	cmp	r3, #0
 801cc76:	d101      	bne.n	801cc7c <cogui_strdup+0x30>
        return tmp;
 801cc78:	68fb      	ldr	r3, [r7, #12]
 801cc7a:	e006      	b.n	801cc8a <cogui_strdup+0x3e>
    }

    /* using cogui_memmove to finish the work */
    cogui_memmove(tmp, str, len);
 801cc7c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 801cc80:	6879      	ldr	r1, [r7, #4]
 801cc82:	68f8      	ldr	r0, [r7, #12]
 801cc84:	f7ff ff18 	bl	801cab8 <cogui_memmove>

    return tmp;
 801cc88:	68fb      	ldr	r3, [r7, #12]
}
 801cc8a:	4618      	mov	r0, r3
 801cc8c:	371c      	adds	r7, #28
 801cc8e:	46bd      	mov	sp, r7
 801cc90:	bd90      	pop	{r4, r7, pc}

0801cc92 <cogui_strncmp>:
 * @retval     val        Value of two strings difference on first occurred.
 * @retval     0          Return 0 if two strings are equal.
 *******************************************************************************
 */
co_int32_t cogui_strncmp(const char *str1, const char *str2, co_uint64_t len)
{
 801cc92:	b490      	push	{r4, r7}
 801cc94:	b084      	sub	sp, #16
 801cc96:	af00      	add	r7, sp, #0
 801cc98:	60f8      	str	r0, [r7, #12]
 801cc9a:	60b9      	str	r1, [r7, #8]
 801cc9c:	e9c7 2300 	strd	r2, r3, [r7]
    /* if two strings value are different or out of range, will break this loop */
    for (; *str1 && *str1 == *str2 && len; str1++, str2++, len--) {
 801cca0:	e00d      	b.n	801ccbe <cogui_strncmp+0x2c>
 801cca2:	68fb      	ldr	r3, [r7, #12]
 801cca4:	3301      	adds	r3, #1
 801cca6:	60fb      	str	r3, [r7, #12]
 801cca8:	68bb      	ldr	r3, [r7, #8]
 801ccaa:	3301      	adds	r3, #1
 801ccac:	60bb      	str	r3, [r7, #8]
 801ccae:	e9d7 3400 	ldrd	r3, r4, [r7]
 801ccb2:	f113 31ff 	adds.w	r1, r3, #4294967295	; 0xffffffff
 801ccb6:	f144 32ff 	adc.w	r2, r4, #4294967295	; 0xffffffff
 801ccba:	e9c7 1200 	strd	r1, r2, [r7]
 801ccbe:	68fb      	ldr	r3, [r7, #12]
 801ccc0:	781b      	ldrb	r3, [r3, #0]
 801ccc2:	2b00      	cmp	r3, #0
 801ccc4:	d009      	beq.n	801ccda <cogui_strncmp+0x48>
 801ccc6:	68fb      	ldr	r3, [r7, #12]
 801ccc8:	781a      	ldrb	r2, [r3, #0]
 801ccca:	68bb      	ldr	r3, [r7, #8]
 801cccc:	781b      	ldrb	r3, [r3, #0]
 801ccce:	429a      	cmp	r2, r3
 801ccd0:	d103      	bne.n	801ccda <cogui_strncmp+0x48>
 801ccd2:	e9d7 3400 	ldrd	r3, r4, [r7]
 801ccd6:	4323      	orrs	r3, r4
 801ccd8:	d1e3      	bne.n	801cca2 <cogui_strncmp+0x10>
        /* passing */
    }

    /* return differece of two strings value in current slot */
    return (*str1 - *str2);
 801ccda:	68fb      	ldr	r3, [r7, #12]
 801ccdc:	781b      	ldrb	r3, [r3, #0]
 801ccde:	461a      	mov	r2, r3
 801cce0:	68bb      	ldr	r3, [r7, #8]
 801cce2:	781b      	ldrb	r3, [r3, #0]
 801cce4:	1ad3      	subs	r3, r2, r3
}
 801cce6:	4618      	mov	r0, r3
 801cce8:	3710      	adds	r7, #16
 801ccea:	46bd      	mov	sp, r7
 801ccec:	bc90      	pop	{r4, r7}
 801ccee:	4770      	bx	lr

0801ccf0 <cogui_strcmp>:
 * @retval     val        Value of two strings difference on first occurred.
 * @retval     0          Return 0 if two strings are equal.
 *******************************************************************************
 */
co_int32_t cogui_strcmp(const char *str1, const char *str2)
{
 801ccf0:	b480      	push	{r7}
 801ccf2:	b083      	sub	sp, #12
 801ccf4:	af00      	add	r7, sp, #0
 801ccf6:	6078      	str	r0, [r7, #4]
 801ccf8:	6039      	str	r1, [r7, #0]
    /* if two strings value are different, will break this loop */
    for (; *str1 && *str1 == *str2; str1++, str2++) {
 801ccfa:	e005      	b.n	801cd08 <cogui_strcmp+0x18>
 801ccfc:	687b      	ldr	r3, [r7, #4]
 801ccfe:	3301      	adds	r3, #1
 801cd00:	607b      	str	r3, [r7, #4]
 801cd02:	683b      	ldr	r3, [r7, #0]
 801cd04:	3301      	adds	r3, #1
 801cd06:	603b      	str	r3, [r7, #0]
 801cd08:	687b      	ldr	r3, [r7, #4]
 801cd0a:	781b      	ldrb	r3, [r3, #0]
 801cd0c:	2b00      	cmp	r3, #0
 801cd0e:	d005      	beq.n	801cd1c <cogui_strcmp+0x2c>
 801cd10:	687b      	ldr	r3, [r7, #4]
 801cd12:	781a      	ldrb	r2, [r3, #0]
 801cd14:	683b      	ldr	r3, [r7, #0]
 801cd16:	781b      	ldrb	r3, [r3, #0]
 801cd18:	429a      	cmp	r2, r3
 801cd1a:	d0ef      	beq.n	801ccfc <cogui_strcmp+0xc>
        /* passing */
    }

    /* return differece of two strings value in current slot */
    return (*str1 - *str2);
 801cd1c:	687b      	ldr	r3, [r7, #4]
 801cd1e:	781b      	ldrb	r3, [r3, #0]
 801cd20:	461a      	mov	r2, r3
 801cd22:	683b      	ldr	r3, [r7, #0]
 801cd24:	781b      	ldrb	r3, [r3, #0]
 801cd26:	1ad3      	subs	r3, r2, r3
}
 801cd28:	4618      	mov	r0, r3
 801cd2a:	370c      	adds	r7, #12
 801cd2c:	46bd      	mov	sp, r7
 801cd2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cd32:	4770      	bx	lr

0801cd34 <cogui_pow>:
 * @param[out] None
 * @retval     sum      Result of x power by y. 
 *******************************************************************************
 */
co_uint64_t cogui_pow(co_int32_t base, co_int32_t exp)
{
 801cd34:	b490      	push	{r4, r7}
 801cd36:	b084      	sub	sp, #16
 801cd38:	af00      	add	r7, sp, #0
 801cd3a:	6078      	str	r0, [r7, #4]
 801cd3c:	6039      	str	r1, [r7, #0]
    co_uint64_t sum = 1;
 801cd3e:	f04f 0301 	mov.w	r3, #1
 801cd42:	f04f 0400 	mov.w	r4, #0
 801cd46:	e9c7 3402 	strd	r3, r4, [r7, #8]

    /* multiplicative base */
    while (exp--)
 801cd4a:	e012      	b.n	801cd72 <cogui_pow+0x3e>
        sum *= base;
 801cd4c:	687b      	ldr	r3, [r7, #4]
 801cd4e:	ea4f 74e3 	mov.w	r4, r3, asr #31
 801cd52:	68fa      	ldr	r2, [r7, #12]
 801cd54:	fb03 f102 	mul.w	r1, r3, r2
 801cd58:	68ba      	ldr	r2, [r7, #8]
 801cd5a:	fb04 f202 	mul.w	r2, r4, r2
 801cd5e:	440a      	add	r2, r1
 801cd60:	68b9      	ldr	r1, [r7, #8]
 801cd62:	fba1 3403 	umull	r3, r4, r1, r3
 801cd66:	4422      	add	r2, r4
 801cd68:	4614      	mov	r4, r2
 801cd6a:	e9c7 3402 	strd	r3, r4, [r7, #8]
 801cd6e:	e9c7 3402 	strd	r3, r4, [r7, #8]
    while (exp--)
 801cd72:	683b      	ldr	r3, [r7, #0]
 801cd74:	1e5a      	subs	r2, r3, #1
 801cd76:	603a      	str	r2, [r7, #0]
 801cd78:	2b00      	cmp	r3, #0
 801cd7a:	d1e7      	bne.n	801cd4c <cogui_pow+0x18>

    return sum;
 801cd7c:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
}
 801cd80:	4618      	mov	r0, r3
 801cd82:	4621      	mov	r1, r4
 801cd84:	3710      	adds	r7, #16
 801cd86:	46bd      	mov	sp, r7
 801cd88:	bc90      	pop	{r4, r7}
 801cd8a:	4770      	bx	lr

0801cd8c <cogui_itoa>:
 * @param[out] *ss      Transform result.
 * @retval     None
 *******************************************************************************
 */
void cogui_itoa(co_int16_t n, char *ss)
{
 801cd8c:	b480      	push	{r7}
 801cd8e:	b08b      	sub	sp, #44	; 0x2c
 801cd90:	af00      	add	r7, sp, #0
 801cd92:	4603      	mov	r3, r0
 801cd94:	6039      	str	r1, [r7, #0]
 801cd96:	80fb      	strh	r3, [r7, #6]
    int i, j, sign, k;
    char s[10];

    /* determine the signed */
    if((sign=n)<0)
 801cd98:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801cd9c:	61bb      	str	r3, [r7, #24]
 801cd9e:	69bb      	ldr	r3, [r7, #24]
 801cda0:	2b00      	cmp	r3, #0
 801cda2:	da03      	bge.n	801cdac <cogui_itoa+0x20>
        n=-n;
 801cda4:	88fb      	ldrh	r3, [r7, #6]
 801cda6:	425b      	negs	r3, r3
 801cda8:	b29b      	uxth	r3, r3
 801cdaa:	80fb      	strh	r3, [r7, #6]

    i=0;
 801cdac:	2300      	movs	r3, #0
 801cdae:	627b      	str	r3, [r7, #36]	; 0x24
    do{
        s[i++]=n%10+'0';
 801cdb0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 801cdb4:	4b2c      	ldr	r3, [pc, #176]	; (801ce68 <cogui_itoa+0xdc>)
 801cdb6:	fb83 1302 	smull	r1, r3, r3, r2
 801cdba:	1099      	asrs	r1, r3, #2
 801cdbc:	17d3      	asrs	r3, r2, #31
 801cdbe:	1ac9      	subs	r1, r1, r3
 801cdc0:	460b      	mov	r3, r1
 801cdc2:	009b      	lsls	r3, r3, #2
 801cdc4:	440b      	add	r3, r1
 801cdc6:	005b      	lsls	r3, r3, #1
 801cdc8:	1ad3      	subs	r3, r2, r3
 801cdca:	b21b      	sxth	r3, r3
 801cdcc:	b2da      	uxtb	r2, r3
 801cdce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cdd0:	1c59      	adds	r1, r3, #1
 801cdd2:	6279      	str	r1, [r7, #36]	; 0x24
 801cdd4:	3230      	adds	r2, #48	; 0x30
 801cdd6:	b2d2      	uxtb	r2, r2
 801cdd8:	f107 0128 	add.w	r1, r7, #40	; 0x28
 801cddc:	440b      	add	r3, r1
 801cdde:	f803 2c1c 	strb.w	r2, [r3, #-28]
    }while ((n/=10)>0);
 801cde2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801cde6:	4a20      	ldr	r2, [pc, #128]	; (801ce68 <cogui_itoa+0xdc>)
 801cde8:	fb82 1203 	smull	r1, r2, r2, r3
 801cdec:	1092      	asrs	r2, r2, #2
 801cdee:	17db      	asrs	r3, r3, #31
 801cdf0:	1ad3      	subs	r3, r2, r3
 801cdf2:	80fb      	strh	r3, [r7, #6]
 801cdf4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801cdf8:	2b00      	cmp	r3, #0
 801cdfa:	dcd9      	bgt.n	801cdb0 <cogui_itoa+0x24>

    /* add '-' if it is negative */
    if(sign<0)
 801cdfc:	69bb      	ldr	r3, [r7, #24]
 801cdfe:	2b00      	cmp	r3, #0
 801ce00:	da08      	bge.n	801ce14 <cogui_itoa+0x88>
        s[i++]='-';
 801ce02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ce04:	1c5a      	adds	r2, r3, #1
 801ce06:	627a      	str	r2, [r7, #36]	; 0x24
 801ce08:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801ce0c:	4413      	add	r3, r2
 801ce0e:	222d      	movs	r2, #45	; 0x2d
 801ce10:	f803 2c1c 	strb.w	r2, [r3, #-28]

    /* add end character to the end of the string */
    s[i]='\0';
 801ce14:	f107 020c 	add.w	r2, r7, #12
 801ce18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ce1a:	4413      	add	r3, r2
 801ce1c:	2200      	movs	r2, #0
 801ce1e:	701a      	strb	r2, [r3, #0]

    /* reverse the result to real string */
    for(j=i-1, k=0; j>=0; j--, k++) {
 801ce20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ce22:	3b01      	subs	r3, #1
 801ce24:	623b      	str	r3, [r7, #32]
 801ce26:	2300      	movs	r3, #0
 801ce28:	61fb      	str	r3, [r7, #28]
 801ce2a:	e00e      	b.n	801ce4a <cogui_itoa+0xbe>
        ss[k] = s[j];
 801ce2c:	69fb      	ldr	r3, [r7, #28]
 801ce2e:	683a      	ldr	r2, [r7, #0]
 801ce30:	4413      	add	r3, r2
 801ce32:	f107 010c 	add.w	r1, r7, #12
 801ce36:	6a3a      	ldr	r2, [r7, #32]
 801ce38:	440a      	add	r2, r1
 801ce3a:	7812      	ldrb	r2, [r2, #0]
 801ce3c:	701a      	strb	r2, [r3, #0]
    for(j=i-1, k=0; j>=0; j--, k++) {
 801ce3e:	6a3b      	ldr	r3, [r7, #32]
 801ce40:	3b01      	subs	r3, #1
 801ce42:	623b      	str	r3, [r7, #32]
 801ce44:	69fb      	ldr	r3, [r7, #28]
 801ce46:	3301      	adds	r3, #1
 801ce48:	61fb      	str	r3, [r7, #28]
 801ce4a:	6a3b      	ldr	r3, [r7, #32]
 801ce4c:	2b00      	cmp	r3, #0
 801ce4e:	daed      	bge.n	801ce2c <cogui_itoa+0xa0>
    }

    /* add end character to the end of the string */
    ss[k]='\0';
 801ce50:	69fb      	ldr	r3, [r7, #28]
 801ce52:	683a      	ldr	r2, [r7, #0]
 801ce54:	4413      	add	r3, r2
 801ce56:	2200      	movs	r2, #0
 801ce58:	701a      	strb	r2, [r3, #0]
}
 801ce5a:	bf00      	nop
 801ce5c:	372c      	adds	r7, #44	; 0x2c
 801ce5e:	46bd      	mov	sp, r7
 801ce60:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ce64:	4770      	bx	lr
 801ce66:	bf00      	nop
 801ce68:	66666667 	.word	0x66666667

0801ce6c <cogui_printf>:
 * @retval     res     How long we print.
 *******************************************************************************
 */
#ifdef COGUI_DEBUG_PRINT
int cogui_printf(const char *str,...)
{
 801ce6c:	b40f      	push	{r0, r1, r2, r3}
 801ce6e:	b5b0      	push	{r4, r5, r7, lr}
 801ce70:	b08a      	sub	sp, #40	; 0x28
 801ce72:	af00      	add	r7, sp, #0
	va_list ap;
    int val,r_val,space=0,align=0;
 801ce74:	2300      	movs	r3, #0
 801ce76:	61fb      	str	r3, [r7, #28]
 801ce78:	2300      	movs	r3, #0
 801ce7a:	61bb      	str	r3, [r7, #24]
	char count, ch;
	char *s = Co_NULL;
 801ce7c:	2300      	movs	r3, #0
 801ce7e:	613b      	str	r3, [r7, #16]
    int res = 0;
 801ce80:	2300      	movs	r3, #0
 801ce82:	60fb      	str	r3, [r7, #12]

    va_start(ap,str);
 801ce84:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801ce88:	603b      	str	r3, [r7, #0]
    while ('\0' != *str) { 
 801ce8a:	e1be      	b.n	801d20a <cogui_printf+0x39e>
        space=0;
 801ce8c:	2300      	movs	r3, #0
 801ce8e:	61fb      	str	r3, [r7, #28]
        align=0;
 801ce90:	2300      	movs	r3, #0
 801ce92:	61bb      	str	r3, [r7, #24]
        switch (*str)
 801ce94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ce96:	781b      	ldrb	r3, [r3, #0]
 801ce98:	2b0d      	cmp	r3, #13
 801ce9a:	f000 81a4 	beq.w	801d1e6 <cogui_printf+0x37a>
 801ce9e:	2b25      	cmp	r3, #37	; 0x25
 801cea0:	d003      	beq.n	801ceaa <cogui_printf+0x3e>
 801cea2:	2b0a      	cmp	r3, #10
 801cea4:	f000 8198 	beq.w	801d1d8 <cogui_printf+0x36c>
 801cea8:	e1a4      	b.n	801d1f4 <cogui_printf+0x388>
        {
            case '%':
                str++;
 801ceaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ceac:	3301      	adds	r3, #1
 801ceae:	63bb      	str	r3, [r7, #56]	; 0x38

                /* if add a minor symbol before data type, align by left */
                if (*str == '-') {
 801ceb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ceb2:	781b      	ldrb	r3, [r3, #0]
 801ceb4:	2b2d      	cmp	r3, #45	; 0x2d
 801ceb6:	d114      	bne.n	801cee2 <cogui_printf+0x76>
                    align = 1;
 801ceb8:	2301      	movs	r3, #1
 801ceba:	61bb      	str	r3, [r7, #24]
                    str++;
 801cebc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801cebe:	3301      	adds	r3, #1
 801cec0:	63bb      	str	r3, [r7, #56]	; 0x38
                }

                /* transform output length to integer */
                while (*str >= '0' && *str <= '9') {
 801cec2:	e00e      	b.n	801cee2 <cogui_printf+0x76>
                    space *= 10;
 801cec4:	69fa      	ldr	r2, [r7, #28]
 801cec6:	4613      	mov	r3, r2
 801cec8:	009b      	lsls	r3, r3, #2
 801ceca:	4413      	add	r3, r2
 801cecc:	005b      	lsls	r3, r3, #1
 801cece:	61fb      	str	r3, [r7, #28]
                    space += *str - '0';
 801ced0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ced2:	781b      	ldrb	r3, [r3, #0]
 801ced4:	3b30      	subs	r3, #48	; 0x30
 801ced6:	69fa      	ldr	r2, [r7, #28]
 801ced8:	4413      	add	r3, r2
 801ceda:	61fb      	str	r3, [r7, #28]
                    str++;
 801cedc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801cede:	3301      	adds	r3, #1
 801cee0:	63bb      	str	r3, [r7, #56]	; 0x38
                while (*str >= '0' && *str <= '9') {
 801cee2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801cee4:	781b      	ldrb	r3, [r3, #0]
 801cee6:	2b2f      	cmp	r3, #47	; 0x2f
 801cee8:	d903      	bls.n	801cef2 <cogui_printf+0x86>
 801ceea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ceec:	781b      	ldrb	r3, [r3, #0]
 801ceee:	2b39      	cmp	r3, #57	; 0x39
 801cef0:	d9e8      	bls.n	801cec4 <cogui_printf+0x58>
                }

                switch (*str) {
 801cef2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801cef4:	781b      	ldrb	r3, [r3, #0]
 801cef6:	3b63      	subs	r3, #99	; 0x63
 801cef8:	2b15      	cmp	r3, #21
 801cefa:	f200 8169 	bhi.w	801d1d0 <cogui_printf+0x364>
 801cefe:	a201      	add	r2, pc, #4	; (adr r2, 801cf04 <cogui_printf+0x98>)
 801cf00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801cf04:	0801d1b9 	.word	0x0801d1b9
 801cf08:	0801cf5d 	.word	0x0801cf5d
 801cf0c:	0801d1d1 	.word	0x0801d1d1
 801cf10:	0801d1d1 	.word	0x0801d1d1
 801cf14:	0801d1d1 	.word	0x0801d1d1
 801cf18:	0801d1d1 	.word	0x0801d1d1
 801cf1c:	0801d1d1 	.word	0x0801d1d1
 801cf20:	0801d1d1 	.word	0x0801d1d1
 801cf24:	0801d1d1 	.word	0x0801d1d1
 801cf28:	0801d1d1 	.word	0x0801d1d1
 801cf2c:	0801d1d1 	.word	0x0801d1d1
 801cf30:	0801d1d1 	.word	0x0801d1d1
 801cf34:	0801d1d1 	.word	0x0801d1d1
 801cf38:	0801d02b 	.word	0x0801d02b
 801cf3c:	0801d1d1 	.word	0x0801d1d1
 801cf40:	0801d1d1 	.word	0x0801d1d1
 801cf44:	0801d105 	.word	0x0801d105
 801cf48:	0801d1d1 	.word	0x0801d1d1
 801cf4c:	0801d1d1 	.word	0x0801d1d1
 801cf50:	0801d1d1 	.word	0x0801d1d1
 801cf54:	0801d1d1 	.word	0x0801d1d1
 801cf58:	0801d031 	.word	0x0801d031

                    /* handle integer var */
                    case 'd':
                        val = va_arg(ap, int); 
 801cf5c:	683b      	ldr	r3, [r7, #0]
 801cf5e:	1d1a      	adds	r2, r3, #4
 801cf60:	603a      	str	r2, [r7, #0]
 801cf62:	681b      	ldr	r3, [r3, #0]
 801cf64:	627b      	str	r3, [r7, #36]	; 0x24
 			            
                        /* if val is negative or zero */
                        if (val < 0) {
 801cf66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cf68:	2b00      	cmp	r3, #0
 801cf6a:	da06      	bge.n	801cf7a <cogui_printf+0x10e>
                            cogui_putchar('-');
 801cf6c:	202d      	movs	r0, #45	; 0x2d
 801cf6e:	f7e4 f981 	bl	8001274 <stm_print_char>
                            val = 0 - val;
 801cf72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cf74:	425b      	negs	r3, r3
 801cf76:	627b      	str	r3, [r7, #36]	; 0x24
 801cf78:	e005      	b.n	801cf86 <cogui_printf+0x11a>
                        }
                        else if (val == 0) {
 801cf7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cf7c:	2b00      	cmp	r3, #0
 801cf7e:	d102      	bne.n	801cf86 <cogui_printf+0x11a>
                            cogui_putchar('0');
 801cf80:	2030      	movs	r0, #48	; 0x30
 801cf82:	f7e4 f977 	bl	8001274 <stm_print_char>
                        }

                        // TODO
                        if (val < space*10) {
 801cf86:	69fa      	ldr	r2, [r7, #28]
 801cf88:	4613      	mov	r3, r2
 801cf8a:	009b      	lsls	r3, r3, #2
 801cf8c:	4413      	add	r3, r2
 801cf8e:	005b      	lsls	r3, r3, #1

                        }
                        
                        r_val = val; 
 801cf90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cf92:	623b      	str	r3, [r7, #32]
                        count = 0; 
 801cf94:	2300      	movs	r3, #0
 801cf96:	75fb      	strb	r3, [r7, #23]
						while (r_val) {
 801cf98:	e00a      	b.n	801cfb0 <cogui_printf+0x144>
                            count++;
 801cf9a:	7dfb      	ldrb	r3, [r7, #23]
 801cf9c:	3301      	adds	r3, #1
 801cf9e:	75fb      	strb	r3, [r7, #23]
                            r_val /= 10;
 801cfa0:	6a3b      	ldr	r3, [r7, #32]
 801cfa2:	4aa0      	ldr	r2, [pc, #640]	; (801d224 <cogui_printf+0x3b8>)
 801cfa4:	fb82 1203 	smull	r1, r2, r2, r3
 801cfa8:	1092      	asrs	r2, r2, #2
 801cfaa:	17db      	asrs	r3, r3, #31
 801cfac:	1ad3      	subs	r3, r2, r3
 801cfae:	623b      	str	r3, [r7, #32]
						while (r_val) {
 801cfb0:	6a3b      	ldr	r3, [r7, #32]
 801cfb2:	2b00      	cmp	r3, #0
 801cfb4:	d1f1      	bne.n	801cf9a <cogui_printf+0x12e>
                        }
						res += count;
 801cfb6:	7dfb      	ldrb	r3, [r7, #23]
 801cfb8:	68fa      	ldr	r2, [r7, #12]
 801cfba:	4413      	add	r3, r2
 801cfbc:	60fb      	str	r3, [r7, #12]
                        r_val = val; 
 801cfbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cfc0:	623b      	str	r3, [r7, #32]
                        while (count) { 
 801cfc2:	e02e      	b.n	801d022 <cogui_printf+0x1b6>
                            ch = r_val / cogui_pow(10,count - 1);
 801cfc4:	6a3b      	ldr	r3, [r7, #32]
 801cfc6:	461c      	mov	r4, r3
 801cfc8:	ea4f 75e4 	mov.w	r5, r4, asr #31
 801cfcc:	7dfb      	ldrb	r3, [r7, #23]
 801cfce:	3b01      	subs	r3, #1
 801cfd0:	4619      	mov	r1, r3
 801cfd2:	200a      	movs	r0, #10
 801cfd4:	f7ff feae 	bl	801cd34 <cogui_pow>
 801cfd8:	4602      	mov	r2, r0
 801cfda:	460b      	mov	r3, r1
 801cfdc:	4620      	mov	r0, r4
 801cfde:	4629      	mov	r1, r5
 801cfe0:	f001 fe5c 	bl	801ec9c <__aeabi_uldivmod>
 801cfe4:	4603      	mov	r3, r0
 801cfe6:	460c      	mov	r4, r1
 801cfe8:	71fb      	strb	r3, [r7, #7]
							r_val %= cogui_pow(10, count - 1);
 801cfea:	7dfb      	ldrb	r3, [r7, #23]
 801cfec:	3b01      	subs	r3, #1
 801cfee:	4619      	mov	r1, r3
 801cff0:	200a      	movs	r0, #10
 801cff2:	f7ff fe9f 	bl	801cd34 <cogui_pow>
 801cff6:	4604      	mov	r4, r0
 801cff8:	460d      	mov	r5, r1
 801cffa:	6a3b      	ldr	r3, [r7, #32]
 801cffc:	4618      	mov	r0, r3
 801cffe:	ea4f 71e0 	mov.w	r1, r0, asr #31
 801d002:	4622      	mov	r2, r4
 801d004:	462b      	mov	r3, r5
 801d006:	f001 fe49 	bl	801ec9c <__aeabi_uldivmod>
 801d00a:	461c      	mov	r4, r3
 801d00c:	4613      	mov	r3, r2
 801d00e:	623b      	str	r3, [r7, #32]
							cogui_putchar(ch + '0');
 801d010:	79fb      	ldrb	r3, [r7, #7]
 801d012:	3330      	adds	r3, #48	; 0x30
 801d014:	b2db      	uxtb	r3, r3
 801d016:	4618      	mov	r0, r3
 801d018:	f7e4 f92c 	bl	8001274 <stm_print_char>
							count--;
 801d01c:	7dfb      	ldrb	r3, [r7, #23]
 801d01e:	3b01      	subs	r3, #1
 801d020:	75fb      	strb	r3, [r7, #23]
                        while (count) { 
 801d022:	7dfb      	ldrb	r3, [r7, #23]
 801d024:	2b00      	cmp	r3, #0
 801d026:	d1cd      	bne.n	801cfc4 <cogui_printf+0x158>
						}
                        break;
 801d028:	e0d5      	b.n	801d1d6 <cogui_printf+0x36a>
                    
                    /* case p to pointer */
                    case 'p':
                        /* first print a "0x" */
                        cogui_putstr("0x");
 801d02a:	487f      	ldr	r0, [pc, #508]	; (801d228 <cogui_printf+0x3bc>)
 801d02c:	f7e4 f93a 	bl	80012a4 <stm_print_string>
                        /* remain work will finish with case 'x' */
                        
                    /* handle integer var with hex output */
                    case 'x':
                        val = va_arg(ap, int);
 801d030:	683b      	ldr	r3, [r7, #0]
 801d032:	1d1a      	adds	r2, r3, #4
 801d034:	603a      	str	r2, [r7, #0]
 801d036:	681b      	ldr	r3, [r3, #0]
 801d038:	627b      	str	r3, [r7, #36]	; 0x24

                        /* if val is negative or zero */
                        if (val<0) {
 801d03a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d03c:	2b00      	cmp	r3, #0
 801d03e:	da06      	bge.n	801d04e <cogui_printf+0x1e2>
                            cogui_putchar('-');
 801d040:	202d      	movs	r0, #45	; 0x2d
 801d042:	f7e4 f917 	bl	8001274 <stm_print_char>
                            val = 0 - val;
 801d046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d048:	425b      	negs	r3, r3
 801d04a:	627b      	str	r3, [r7, #36]	; 0x24
 801d04c:	e005      	b.n	801d05a <cogui_printf+0x1ee>
                        }
                        else if (val == 0) {
 801d04e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d050:	2b00      	cmp	r3, #0
 801d052:	d102      	bne.n	801d05a <cogui_printf+0x1ee>
                            cogui_putchar('0');
 801d054:	2030      	movs	r0, #48	; 0x30
 801d056:	f7e4 f90d 	bl	8001274 <stm_print_char>
                        }
                        
                        r_val = val; 
 801d05a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d05c:	623b      	str	r3, [r7, #32]
                        count = 0;
 801d05e:	2300      	movs	r3, #0
 801d060:	75fb      	strb	r3, [r7, #23]
						while (r_val) {
 801d062:	e008      	b.n	801d076 <cogui_printf+0x20a>
                            count++;
 801d064:	7dfb      	ldrb	r3, [r7, #23]
 801d066:	3301      	adds	r3, #1
 801d068:	75fb      	strb	r3, [r7, #23]
                            r_val /= 16; 
 801d06a:	6a3b      	ldr	r3, [r7, #32]
 801d06c:	2b00      	cmp	r3, #0
 801d06e:	da00      	bge.n	801d072 <cogui_printf+0x206>
 801d070:	330f      	adds	r3, #15
 801d072:	111b      	asrs	r3, r3, #4
 801d074:	623b      	str	r3, [r7, #32]
						while (r_val) {
 801d076:	6a3b      	ldr	r3, [r7, #32]
 801d078:	2b00      	cmp	r3, #0
 801d07a:	d1f3      	bne.n	801d064 <cogui_printf+0x1f8>
                        }
                        res += count;
 801d07c:	7dfb      	ldrb	r3, [r7, #23]
 801d07e:	68fa      	ldr	r2, [r7, #12]
 801d080:	4413      	add	r3, r2
 801d082:	60fb      	str	r3, [r7, #12]
                        r_val = val; 
 801d084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d086:	623b      	str	r3, [r7, #32]
                        while(count) { 
 801d088:	e038      	b.n	801d0fc <cogui_printf+0x290>
                            ch = r_val / cogui_pow(16, count - 1);
 801d08a:	6a3b      	ldr	r3, [r7, #32]
 801d08c:	461c      	mov	r4, r3
 801d08e:	ea4f 75e4 	mov.w	r5, r4, asr #31
 801d092:	7dfb      	ldrb	r3, [r7, #23]
 801d094:	3b01      	subs	r3, #1
 801d096:	4619      	mov	r1, r3
 801d098:	2010      	movs	r0, #16
 801d09a:	f7ff fe4b 	bl	801cd34 <cogui_pow>
 801d09e:	4602      	mov	r2, r0
 801d0a0:	460b      	mov	r3, r1
 801d0a2:	4620      	mov	r0, r4
 801d0a4:	4629      	mov	r1, r5
 801d0a6:	f001 fdf9 	bl	801ec9c <__aeabi_uldivmod>
 801d0aa:	4603      	mov	r3, r0
 801d0ac:	460c      	mov	r4, r1
 801d0ae:	71fb      	strb	r3, [r7, #7]
							r_val %= cogui_pow(16, count - 1);
 801d0b0:	7dfb      	ldrb	r3, [r7, #23]
 801d0b2:	3b01      	subs	r3, #1
 801d0b4:	4619      	mov	r1, r3
 801d0b6:	2010      	movs	r0, #16
 801d0b8:	f7ff fe3c 	bl	801cd34 <cogui_pow>
 801d0bc:	4604      	mov	r4, r0
 801d0be:	460d      	mov	r5, r1
 801d0c0:	6a3b      	ldr	r3, [r7, #32]
 801d0c2:	4618      	mov	r0, r3
 801d0c4:	ea4f 71e0 	mov.w	r1, r0, asr #31
 801d0c8:	4622      	mov	r2, r4
 801d0ca:	462b      	mov	r3, r5
 801d0cc:	f001 fde6 	bl	801ec9c <__aeabi_uldivmod>
 801d0d0:	461c      	mov	r4, r3
 801d0d2:	4613      	mov	r3, r2
 801d0d4:	623b      	str	r3, [r7, #32]

							if (ch <= 9) {
 801d0d6:	79fb      	ldrb	r3, [r7, #7]
 801d0d8:	2b09      	cmp	r3, #9
 801d0da:	d806      	bhi.n	801d0ea <cogui_printf+0x27e>
                                cogui_putchar(ch + '0');
 801d0dc:	79fb      	ldrb	r3, [r7, #7]
 801d0de:	3330      	adds	r3, #48	; 0x30
 801d0e0:	b2db      	uxtb	r3, r3
 801d0e2:	4618      	mov	r0, r3
 801d0e4:	f7e4 f8c6 	bl	8001274 <stm_print_char>
 801d0e8:	e005      	b.n	801d0f6 <cogui_printf+0x28a>
                            }
                            else {
								cogui_putchar(ch - 10 + 'a');
 801d0ea:	79fb      	ldrb	r3, [r7, #7]
 801d0ec:	3357      	adds	r3, #87	; 0x57
 801d0ee:	b2db      	uxtb	r3, r3
 801d0f0:	4618      	mov	r0, r3
 801d0f2:	f7e4 f8bf 	bl	8001274 <stm_print_char>
                            }

							count--;
 801d0f6:	7dfb      	ldrb	r3, [r7, #23]
 801d0f8:	3b01      	subs	r3, #1
 801d0fa:	75fb      	strb	r3, [r7, #23]
                        while(count) { 
 801d0fc:	7dfb      	ldrb	r3, [r7, #23]
 801d0fe:	2b00      	cmp	r3, #0
 801d100:	d1c3      	bne.n	801d08a <cogui_printf+0x21e>
						}
						break;
 801d102:	e068      	b.n	801d1d6 <cogui_printf+0x36a>

                    /* handle string var */
                    case 's':
						s = va_arg(ap, char *);
 801d104:	683b      	ldr	r3, [r7, #0]
 801d106:	1d1a      	adds	r2, r3, #4
 801d108:	603a      	str	r2, [r7, #0]
 801d10a:	681b      	ldr	r3, [r3, #0]
 801d10c:	613b      	str	r3, [r7, #16]
                        int len = cogui_strlen(s);
 801d10e:	6938      	ldr	r0, [r7, #16]
 801d110:	f7ff fd83 	bl	801cc1a <cogui_strlen>
 801d114:	4603      	mov	r3, r0
 801d116:	460c      	mov	r4, r1
 801d118:	60bb      	str	r3, [r7, #8]
                        
                        if (len < space && !align) {
 801d11a:	68ba      	ldr	r2, [r7, #8]
 801d11c:	69fb      	ldr	r3, [r7, #28]
 801d11e:	429a      	cmp	r2, r3
 801d120:	da10      	bge.n	801d144 <cogui_printf+0x2d8>
 801d122:	69bb      	ldr	r3, [r7, #24]
 801d124:	2b00      	cmp	r3, #0
 801d126:	d10d      	bne.n	801d144 <cogui_printf+0x2d8>

                            while (len < space) {
 801d128:	e008      	b.n	801d13c <cogui_printf+0x2d0>
                                cogui_putchar(' ');
 801d12a:	2020      	movs	r0, #32
 801d12c:	f7e4 f8a2 	bl	8001274 <stm_print_char>
                                space --;
 801d130:	69fb      	ldr	r3, [r7, #28]
 801d132:	3b01      	subs	r3, #1
 801d134:	61fb      	str	r3, [r7, #28]
                                res ++;
 801d136:	68fb      	ldr	r3, [r7, #12]
 801d138:	3301      	adds	r3, #1
 801d13a:	60fb      	str	r3, [r7, #12]
                            while (len < space) {
 801d13c:	68ba      	ldr	r2, [r7, #8]
 801d13e:	69fb      	ldr	r3, [r7, #28]
 801d140:	429a      	cmp	r2, r3
 801d142:	dbf2      	blt.n	801d12a <cogui_printf+0x2be>
                            }
                        }
                        
                        if (len > space && space) {
 801d144:	68ba      	ldr	r2, [r7, #8]
 801d146:	69fb      	ldr	r3, [r7, #28]
 801d148:	429a      	cmp	r2, r3
 801d14a:	dd13      	ble.n	801d174 <cogui_printf+0x308>
 801d14c:	69fb      	ldr	r3, [r7, #28]
 801d14e:	2b00      	cmp	r3, #0
 801d150:	d010      	beq.n	801d174 <cogui_printf+0x308>
                            while (space --) {
 801d152:	e009      	b.n	801d168 <cogui_printf+0x2fc>
                                cogui_putchar(*s++);
 801d154:	693b      	ldr	r3, [r7, #16]
 801d156:	1c5a      	adds	r2, r3, #1
 801d158:	613a      	str	r2, [r7, #16]
 801d15a:	781b      	ldrb	r3, [r3, #0]
 801d15c:	4618      	mov	r0, r3
 801d15e:	f7e4 f889 	bl	8001274 <stm_print_char>
                                res++;
 801d162:	68fb      	ldr	r3, [r7, #12]
 801d164:	3301      	adds	r3, #1
 801d166:	60fb      	str	r3, [r7, #12]
                            while (space --) {
 801d168:	69fb      	ldr	r3, [r7, #28]
 801d16a:	1e5a      	subs	r2, r3, #1
 801d16c:	61fa      	str	r2, [r7, #28]
 801d16e:	2b00      	cmp	r3, #0
 801d170:	d1f0      	bne.n	801d154 <cogui_printf+0x2e8>
                        if (len > space && space) {
 801d172:	e00b      	b.n	801d18c <cogui_printf+0x320>
                            }
                        }
                        else {
                            cogui_putstr(s);
 801d174:	6938      	ldr	r0, [r7, #16]
 801d176:	f7e4 f895 	bl	80012a4 <stm_print_string>
                            res += cogui_strlen(s);                                
 801d17a:	6938      	ldr	r0, [r7, #16]
 801d17c:	f7ff fd4d 	bl	801cc1a <cogui_strlen>
 801d180:	4603      	mov	r3, r0
 801d182:	460c      	mov	r4, r1
 801d184:	461a      	mov	r2, r3
 801d186:	68fb      	ldr	r3, [r7, #12]
 801d188:	4413      	add	r3, r2
 801d18a:	60fb      	str	r3, [r7, #12]
                        }
						

                        if (len < space && align) {
 801d18c:	68ba      	ldr	r2, [r7, #8]
 801d18e:	69fb      	ldr	r3, [r7, #28]
 801d190:	429a      	cmp	r2, r3
 801d192:	da1f      	bge.n	801d1d4 <cogui_printf+0x368>
 801d194:	69bb      	ldr	r3, [r7, #24]
 801d196:	2b00      	cmp	r3, #0
 801d198:	d01c      	beq.n	801d1d4 <cogui_printf+0x368>

                            while (len < space) {
 801d19a:	e008      	b.n	801d1ae <cogui_printf+0x342>
                                cogui_putchar(' ');
 801d19c:	2020      	movs	r0, #32
 801d19e:	f7e4 f869 	bl	8001274 <stm_print_char>
                                space --;
 801d1a2:	69fb      	ldr	r3, [r7, #28]
 801d1a4:	3b01      	subs	r3, #1
 801d1a6:	61fb      	str	r3, [r7, #28]
                                res ++;
 801d1a8:	68fb      	ldr	r3, [r7, #12]
 801d1aa:	3301      	adds	r3, #1
 801d1ac:	60fb      	str	r3, [r7, #12]
                            while (len < space) {
 801d1ae:	68ba      	ldr	r2, [r7, #8]
 801d1b0:	69fb      	ldr	r3, [r7, #28]
 801d1b2:	429a      	cmp	r2, r3
 801d1b4:	dbf2      	blt.n	801d19c <cogui_printf+0x330>
                            }
                        }
						break;
 801d1b6:	e00d      	b.n	801d1d4 <cogui_printf+0x368>
					
                    /* handle character var */
                    case 'c':
                        cogui_putchar( (char)va_arg(ap, int ));
 801d1b8:	683b      	ldr	r3, [r7, #0]
 801d1ba:	1d1a      	adds	r2, r3, #4
 801d1bc:	603a      	str	r2, [r7, #0]
 801d1be:	681b      	ldr	r3, [r3, #0]
 801d1c0:	b2db      	uxtb	r3, r3
 801d1c2:	4618      	mov	r0, r3
 801d1c4:	f7e4 f856 	bl	8001274 <stm_print_char>
						res += 1;
 801d1c8:	68fb      	ldr	r3, [r7, #12]
 801d1ca:	3301      	adds	r3, #1
 801d1cc:	60fb      	str	r3, [r7, #12]
                        break;
 801d1ce:	e002      	b.n	801d1d6 <cogui_printf+0x36a>

                    default:
						break;
 801d1d0:	bf00      	nop
 801d1d2:	e017      	b.n	801d204 <cogui_printf+0x398>
						break;
 801d1d4:	bf00      	nop
				}
				break;
 801d1d6:	e015      	b.n	801d204 <cogui_printf+0x398>
            
            /* handle escape character: newline */
            case '\n':
				cogui_putchar('\n');
 801d1d8:	200a      	movs	r0, #10
 801d1da:	f7e4 f84b 	bl	8001274 <stm_print_char>
				res += 1;
 801d1de:	68fb      	ldr	r3, [r7, #12]
 801d1e0:	3301      	adds	r3, #1
 801d1e2:	60fb      	str	r3, [r7, #12]
				break;
 801d1e4:	e00e      	b.n	801d204 <cogui_printf+0x398>
			
            /* handle escape character: return */
			case '\r':
				cogui_putchar('\r');
 801d1e6:	200d      	movs	r0, #13
 801d1e8:	f7e4 f844 	bl	8001274 <stm_print_char>
				res += 1;
 801d1ec:	68fb      	ldr	r3, [r7, #12]
 801d1ee:	3301      	adds	r3, #1
 801d1f0:	60fb      	str	r3, [r7, #12]
				break;
 801d1f2:	e007      	b.n	801d204 <cogui_printf+0x398>
			
            /* just output character */
			default:
				cogui_putchar(*str);
 801d1f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d1f6:	781b      	ldrb	r3, [r3, #0]
 801d1f8:	4618      	mov	r0, r3
 801d1fa:	f7e4 f83b 	bl	8001274 <stm_print_char>
				res += 1;
 801d1fe:	68fb      	ldr	r3, [r7, #12]
 801d200:	3301      	adds	r3, #1
 801d202:	60fb      	str	r3, [r7, #12]
		}
		str++;
 801d204:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d206:	3301      	adds	r3, #1
 801d208:	63bb      	str	r3, [r7, #56]	; 0x38
    while ('\0' != *str) { 
 801d20a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d20c:	781b      	ldrb	r3, [r3, #0]
 801d20e:	2b00      	cmp	r3, #0
 801d210:	f47f ae3c 	bne.w	801ce8c <cogui_printf+0x20>
    }
    va_end(ap);

	return res;
 801d214:	68fb      	ldr	r3, [r7, #12]
}
 801d216:	4618      	mov	r0, r3
 801d218:	3728      	adds	r7, #40	; 0x28
 801d21a:	46bd      	mov	sp, r7
 801d21c:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 801d220:	b004      	add	sp, #16
 801d222:	4770      	bx	lr
 801d224:	66666667 	.word	0x66666667
 801d228:	08023048 	.word	0x08023048

0801d22c <cogui_assert_handler>:
 * @param[out] None
 * @retval     None
 *******************************************************************************
 */
void cogui_assert_handler(const char *ex_string, const char *func, U32 line)
{
 801d22c:	b580      	push	{r7, lr}
 801d22e:	b086      	sub	sp, #24
 801d230:	af00      	add	r7, sp, #0
 801d232:	60f8      	str	r0, [r7, #12]
 801d234:	60b9      	str	r1, [r7, #8]
 801d236:	607a      	str	r2, [r7, #4]
    /* output message to screen */
    cogui_assert_failed_page(ex_string, line, func);
 801d238:	687b      	ldr	r3, [r7, #4]
 801d23a:	b29b      	uxth	r3, r3
 801d23c:	68ba      	ldr	r2, [r7, #8]
 801d23e:	4619      	mov	r1, r3
 801d240:	68f8      	ldr	r0, [r7, #12]
 801d242:	f001 fc73 	bl	801eb2c <cogui_assert_failed_page>

	volatile char dummy = 0;
 801d246:	2300      	movs	r3, #0
 801d248:	75fb      	strb	r3, [r7, #23]

    /* print error message */
	cogui_printf("(%s) assertion failed at function: %s, line number: %d.\r\n", ex_string, func, line);
 801d24a:	687b      	ldr	r3, [r7, #4]
 801d24c:	68ba      	ldr	r2, [r7, #8]
 801d24e:	68f9      	ldr	r1, [r7, #12]
 801d250:	4805      	ldr	r0, [pc, #20]	; (801d268 <cogui_assert_handler+0x3c>)
 801d252:	f7ff fe0b 	bl	801ce6c <cogui_printf>

    /* loop forever */
	while(dummy == 0)
 801d256:	bf00      	nop
 801d258:	7dfb      	ldrb	r3, [r7, #23]
 801d25a:	b2db      	uxtb	r3, r3
 801d25c:	2b00      	cmp	r3, #0
 801d25e:	d0fb      	beq.n	801d258 <cogui_assert_handler+0x2c>
	{
        /* panic */
	}
}
 801d260:	bf00      	nop
 801d262:	3718      	adds	r7, #24
 801d264:	46bd      	mov	sp, r7
 801d266:	bd80      	pop	{r7, pc}
 801d268:	0802304c 	.word	0x0802304c

0801d26c <cogui_title_create>:
 *             window contain a minimal button, close button and title
 *             name field.
 *******************************************************************************
 */
void cogui_title_create(cogui_window_t *win)
{
 801d26c:	b590      	push	{r4, r7, lr}
 801d26e:	b087      	sub	sp, #28
 801d270:	af02      	add	r7, sp, #8
 801d272:	6078      	str	r0, [r7, #4]
    cogui_widget_t *close_btn = cogui_widget_create(win);
 801d274:	6878      	ldr	r0, [r7, #4]
 801d276:	f000 f8fd 	bl	801d474 <cogui_widget_create>
 801d27a:	60f8      	str	r0, [r7, #12]
    cogui_widget_t  *mini_btn = cogui_widget_create(win);
 801d27c:	6878      	ldr	r0, [r7, #4]
 801d27e:	f000 f8f9 	bl	801d474 <cogui_widget_create>
 801d282:	60b8      	str	r0, [r7, #8]

    /* filled default color scheme for title */
    win->title->gc.foreground = default_title_foreground;
 801d284:	687b      	ldr	r3, [r7, #4]
 801d286:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801d288:	f649 43f3 	movw	r3, #40179	; 0x9cf3
 801d28c:	f04f 0400 	mov.w	r4, #0
 801d290:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
    win->title->gc.background = default_title_background;
 801d294:	687b      	ldr	r3, [r7, #4]
 801d296:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801d298:	f04f 0300 	mov.w	r3, #0
 801d29c:	f04f 0400 	mov.w	r4, #0
 801d2a0:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
    close_btn->gc.foreground  = default_button_foreground;
 801d2a4:	f244 2308 	movw	r3, #16904	; 0x4208
 801d2a8:	f04f 0400 	mov.w	r4, #0
 801d2ac:	68fa      	ldr	r2, [r7, #12]
 801d2ae:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
    mini_btn->gc.foreground   = default_button_foreground;
 801d2b2:	f244 2308 	movw	r3, #16904	; 0x4208
 801d2b6:	f04f 0400 	mov.w	r4, #0
 801d2ba:	68ba      	ldr	r2, [r7, #8]
 801d2bc:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30

    /* enabled all three widgets */
    COGUI_WIDGET_ENABLE(win->title);
 801d2c0:	687b      	ldr	r3, [r7, #4]
 801d2c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d2c4:	689a      	ldr	r2, [r3, #8]
 801d2c6:	687b      	ldr	r3, [r7, #4]
 801d2c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d2ca:	f042 0201 	orr.w	r2, r2, #1
 801d2ce:	609a      	str	r2, [r3, #8]
    COGUI_WIDGET_ENABLE(close_btn);
 801d2d0:	68fb      	ldr	r3, [r7, #12]
 801d2d2:	689b      	ldr	r3, [r3, #8]
 801d2d4:	f043 0201 	orr.w	r2, r3, #1
 801d2d8:	68fb      	ldr	r3, [r7, #12]
 801d2da:	609a      	str	r2, [r3, #8]
    COGUI_WIDGET_ENABLE(mini_btn);
 801d2dc:	68bb      	ldr	r3, [r7, #8]
 801d2de:	689b      	ldr	r3, [r3, #8]
 801d2e0:	f043 0201 	orr.w	r2, r3, #1
 801d2e4:	68bb      	ldr	r3, [r7, #8]
 801d2e6:	609a      	str	r2, [r3, #8]

    /* give this three widgets flags */
    win->title->flag |= COGUI_WIDGET_FLAG_TITLE | COGUI_WIDGET_FLAG_RECT | COGUI_WIDGET_FLAG_FILLED;
 801d2e8:	687b      	ldr	r3, [r7, #4]
 801d2ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d2ec:	689a      	ldr	r2, [r3, #8]
 801d2ee:	687b      	ldr	r3, [r7, #4]
 801d2f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d2f2:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 801d2f6:	609a      	str	r2, [r3, #8]
    close_btn->flag  |= COGUI_WIDGET_FLAG_TITLE;
 801d2f8:	68fb      	ldr	r3, [r7, #12]
 801d2fa:	689b      	ldr	r3, [r3, #8]
 801d2fc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 801d300:	68fb      	ldr	r3, [r7, #12]
 801d302:	609a      	str	r2, [r3, #8]
    mini_btn->flag   |= COGUI_WIDGET_FLAG_TITLE;
 801d304:	68bb      	ldr	r3, [r7, #8]
 801d306:	689b      	ldr	r3, [r3, #8]
 801d308:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 801d30c:	68bb      	ldr	r3, [r7, #8]
 801d30e:	609a      	str	r2, [r3, #8]

    /* set three widgets sizes */
    cogui_widget_set_rectangle(win->title, 65, 0, 240, COGUI_WINTITLE_HEIGHT);
 801d310:	687b      	ldr	r3, [r7, #4]
 801d312:	6a58      	ldr	r0, [r3, #36]	; 0x24
 801d314:	2328      	movs	r3, #40	; 0x28
 801d316:	9300      	str	r3, [sp, #0]
 801d318:	23f0      	movs	r3, #240	; 0xf0
 801d31a:	2200      	movs	r2, #0
 801d31c:	2141      	movs	r1, #65	; 0x41
 801d31e:	f000 fc10 	bl	801db42 <cogui_widget_set_rectangle>
    cogui_widget_set_rectangle(close_btn, 8, 0, 20, 40);
 801d322:	2328      	movs	r3, #40	; 0x28
 801d324:	9300      	str	r3, [sp, #0]
 801d326:	2314      	movs	r3, #20
 801d328:	2200      	movs	r2, #0
 801d32a:	2108      	movs	r1, #8
 801d32c:	68f8      	ldr	r0, [r7, #12]
 801d32e:	f000 fc08 	bl	801db42 <cogui_widget_set_rectangle>
    cogui_widget_set_rectangle(mini_btn, 32, 0, 20, 40);
 801d332:	2328      	movs	r3, #40	; 0x28
 801d334:	9300      	str	r3, [sp, #0]
 801d336:	2314      	movs	r3, #20
 801d338:	2200      	movs	r2, #0
 801d33a:	2120      	movs	r1, #32
 801d33c:	68b8      	ldr	r0, [r7, #8]
 801d33e:	f000 fc00 	bl	801db42 <cogui_widget_set_rectangle>

    /* set title font style */
    cogui_widget_set_text_align(win->title, COGUI_TEXT_ALIGN_LEFT|COGUI_TEXT_ALIGN_MIDDLE);
 801d342:	687b      	ldr	r3, [r7, #4]
 801d344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d346:	2111      	movs	r1, #17
 801d348:	4618      	mov	r0, r3
 801d34a:	f000 fcdf 	bl	801dd0c <cogui_widget_set_text_align>
    cogui_widget_set_font(win->title, &tm_font_16x26);
 801d34e:	687b      	ldr	r3, [r7, #4]
 801d350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d352:	4917      	ldr	r1, [pc, #92]	; (801d3b0 <cogui_title_create+0x144>)
 801d354:	4618      	mov	r0, r3
 801d356:	f000 fcb5 	bl	801dcc4 <cogui_widget_set_font>
    cogui_widget_set_text(win->title, win->title_name);
 801d35a:	687b      	ldr	r3, [r7, #4]
 801d35c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801d35e:	687b      	ldr	r3, [r7, #4]
 801d360:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d362:	4619      	mov	r1, r3
 801d364:	4610      	mov	r0, r2
 801d366:	f000 fced 	bl	801dd44 <cogui_widget_set_text>

    /* symbol "X" */
    cogui_widget_set_text_align(close_btn, COGUI_TEXT_ALIGN_CENTER|COGUI_TEXT_ALIGN_MIDDLE);
 801d36a:	2114      	movs	r1, #20
 801d36c:	68f8      	ldr	r0, [r7, #12]
 801d36e:	f000 fccd 	bl	801dd0c <cogui_widget_set_text_align>
    cogui_widget_set_font(close_btn, &tm_symbol_16x16);
 801d372:	4910      	ldr	r1, [pc, #64]	; (801d3b4 <cogui_title_create+0x148>)
 801d374:	68f8      	ldr	r0, [r7, #12]
 801d376:	f000 fca5 	bl	801dcc4 <cogui_widget_set_font>
    cogui_widget_set_text(close_btn, "!");
 801d37a:	490f      	ldr	r1, [pc, #60]	; (801d3b8 <cogui_title_create+0x14c>)
 801d37c:	68f8      	ldr	r0, [r7, #12]
 801d37e:	f000 fce1 	bl	801dd44 <cogui_widget_set_text>
    close_btn->gc.padding = COGUI_PADDING(0,2,0,0);
 801d382:	68fa      	ldr	r2, [r7, #12]
 801d384:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 801d388:	f04f 0400 	mov.w	r4, #0
 801d38c:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48

    /* symbol "-" */
    cogui_widget_set_text_align(mini_btn, COGUI_TEXT_ALIGN_CENTER|COGUI_TEXT_ALIGN_MIDDLE);
 801d390:	2114      	movs	r1, #20
 801d392:	68b8      	ldr	r0, [r7, #8]
 801d394:	f000 fcba 	bl	801dd0c <cogui_widget_set_text_align>
    cogui_widget_set_font(mini_btn, &tm_symbol_16x16);
 801d398:	4906      	ldr	r1, [pc, #24]	; (801d3b4 <cogui_title_create+0x148>)
 801d39a:	68b8      	ldr	r0, [r7, #8]
 801d39c:	f000 fc92 	bl	801dcc4 <cogui_widget_set_font>
    cogui_widget_set_text(mini_btn, "\"");
 801d3a0:	4906      	ldr	r1, [pc, #24]	; (801d3bc <cogui_title_create+0x150>)
 801d3a2:	68b8      	ldr	r0, [r7, #8]
 801d3a4:	f000 fcce 	bl	801dd44 <cogui_widget_set_text>
}
 801d3a8:	bf00      	nop
 801d3aa:	3714      	adds	r7, #20
 801d3ac:	46bd      	mov	sp, r7
 801d3ae:	bd90      	pop	{r4, r7, pc}
 801d3b0:	20000158 	.word	0x20000158
 801d3b4:	20000134 	.word	0x20000134
 801d3b8:	080230d8 	.word	0x080230d8
 801d3bc:	080230dc 	.word	0x080230dc

0801d3c0 <cogui_title_delete>:
 * @param[out] None
 * @retval     None 
 *******************************************************************************
 */
void cogui_title_delete(cogui_window_t *win)
{
 801d3c0:	b580      	push	{r7, lr}
 801d3c2:	b084      	sub	sp, #16
 801d3c4:	af00      	add	r7, sp, #0
 801d3c6:	6078      	str	r0, [r7, #4]
    /* delete two button */
    cogui_widget_t *close_btn = win->title->next;
 801d3c8:	687b      	ldr	r3, [r7, #4]
 801d3ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d3cc:	681b      	ldr	r3, [r3, #0]
 801d3ce:	60fb      	str	r3, [r7, #12]
    cogui_widget_t  *mini_btn = win->title->next->next;
 801d3d0:	687b      	ldr	r3, [r7, #4]
 801d3d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d3d4:	681b      	ldr	r3, [r3, #0]
 801d3d6:	681b      	ldr	r3, [r3, #0]
 801d3d8:	60bb      	str	r3, [r7, #8]
    cogui_widget_delete(close_btn);
 801d3da:	68f8      	ldr	r0, [r7, #12]
 801d3dc:	f000 f898 	bl	801d510 <cogui_widget_delete>
    cogui_widget_delete(mini_btn);
 801d3e0:	68b8      	ldr	r0, [r7, #8]
 801d3e2:	f000 f895 	bl	801d510 <cogui_widget_delete>

    /* title widget will delete at window deletion */
    COGUI_WIDGET_DISABLE(win->title);
 801d3e6:	687b      	ldr	r3, [r7, #4]
 801d3e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d3ea:	689a      	ldr	r2, [r3, #8]
 801d3ec:	687b      	ldr	r3, [r7, #4]
 801d3ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d3f0:	f022 0201 	bic.w	r2, r2, #1
 801d3f4:	609a      	str	r2, [r3, #8]
}
 801d3f6:	bf00      	nop
 801d3f8:	3710      	adds	r7, #16
 801d3fa:	46bd      	mov	sp, r7
 801d3fc:	bd80      	pop	{r7, pc}
 801d3fe:	bf00      	nop

0801d400 <_cogui_widget_init>:
extern struct cogui_window *main_page;

StatusType cogui_widget_event_handler(cogui_widget_t *widget, struct cogui_event *event);

static void _cogui_widget_init(cogui_widget_t *widget)
{
 801d400:	b590      	push	{r4, r7, lr}
 801d402:	b083      	sub	sp, #12
 801d404:	af00      	add	r7, sp, #0
 801d406:	6078      	str	r0, [r7, #4]
    cogui_memset(widget, 0, sizeof(cogui_widget_t));
 801d408:	f04f 0268 	mov.w	r2, #104	; 0x68
 801d40c:	f04f 0300 	mov.w	r3, #0
 801d410:	2100      	movs	r1, #0
 801d412:	6878      	ldr	r0, [r7, #4]
 801d414:	f7ff fb0c 	bl	801ca30 <cogui_memset>

    /* init flag and type */
    widget->flag = COGUI_WIDGET_FLAG_INIT | COGUI_WIDGET_TYPE_INIT;
 801d418:	687b      	ldr	r3, [r7, #4]
 801d41a:	2210      	movs	r2, #16
 801d41c:	609a      	str	r2, [r3, #8]

    /* set default fore/background */
	widget->gc.foreground = default_foreground;
 801d41e:	4b11      	ldr	r3, [pc, #68]	; (801d464 <_cogui_widget_init+0x64>)
 801d420:	e9d3 3400 	ldrd	r3, r4, [r3]
 801d424:	687a      	ldr	r2, [r7, #4]
 801d426:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
	widget->gc.background = default_background;
 801d42a:	4b0f      	ldr	r3, [pc, #60]	; (801d468 <_cogui_widget_init+0x68>)
 801d42c:	e9d3 3400 	ldrd	r3, r4, [r3]
 801d430:	687a      	ldr	r2, [r7, #4]
 801d432:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
    widget->gc.font       = default_font;
 801d436:	4b0d      	ldr	r3, [pc, #52]	; (801d46c <_cogui_widget_init+0x6c>)
 801d438:	681a      	ldr	r2, [r3, #0]
 801d43a:	687b      	ldr	r3, [r7, #4]
 801d43c:	641a      	str	r2, [r3, #64]	; 0x40

    /* initial extent rectangle */
    COGUI_INIT_RECR(&widget->extent);
 801d43e:	687b      	ldr	r3, [r7, #4]
 801d440:	2200      	movs	r2, #0
 801d442:	825a      	strh	r2, [r3, #18]
 801d444:	687b      	ldr	r3, [r7, #4]
 801d446:	2200      	movs	r2, #0
 801d448:	829a      	strh	r2, [r3, #20]
 801d44a:	687b      	ldr	r3, [r7, #4]
 801d44c:	2200      	movs	r2, #0
 801d44e:	82da      	strh	r2, [r3, #22]
 801d450:	687b      	ldr	r3, [r7, #4]
 801d452:	2200      	movs	r2, #0
 801d454:	831a      	strh	r2, [r3, #24]

    /* set event handler */
    widget->handler = cogui_widget_event_handler;
 801d456:	687b      	ldr	r3, [r7, #4]
 801d458:	4a05      	ldr	r2, [pc, #20]	; (801d470 <_cogui_widget_init+0x70>)
 801d45a:	661a      	str	r2, [r3, #96]	; 0x60
}
 801d45c:	bf00      	nop
 801d45e:	370c      	adds	r7, #12
 801d460:	46bd      	mov	sp, r7
 801d462:	bd90      	pop	{r4, r7, pc}
 801d464:	08022ca0 	.word	0x08022ca0
 801d468:	08022ca8 	.word	0x08022ca8
 801d46c:	2000012c 	.word	0x2000012c
 801d470:	0801e26d 	.word	0x0801e26d

0801d474 <cogui_widget_create>:

cogui_widget_t *cogui_widget_create(struct cogui_window *top)
{
 801d474:	b580      	push	{r7, lr}
 801d476:	b084      	sub	sp, #16
 801d478:	af00      	add	r7, sp, #0
 801d47a:	6078      	str	r0, [r7, #4]
    cogui_widget_t *widget;

    COGUI_ASSERT(top != Co_NULL);
 801d47c:	687b      	ldr	r3, [r7, #4]
 801d47e:	2b00      	cmp	r3, #0
 801d480:	d104      	bne.n	801d48c <cogui_widget_create+0x18>
 801d482:	222c      	movs	r2, #44	; 0x2c
 801d484:	491f      	ldr	r1, [pc, #124]	; (801d504 <cogui_widget_create+0x90>)
 801d486:	4820      	ldr	r0, [pc, #128]	; (801d508 <cogui_widget_create+0x94>)
 801d488:	f7ff fed0 	bl	801d22c <cogui_assert_handler>

    widget = cogui_malloc(sizeof(cogui_widget_t));
 801d48c:	2068      	movs	r0, #104	; 0x68
 801d48e:	f7ff f9cd 	bl	801c82c <cogui_malloc>
 801d492:	60f8      	str	r0, [r7, #12]
    if (widget == Co_NULL) {
 801d494:	68fb      	ldr	r3, [r7, #12]
 801d496:	2b00      	cmp	r3, #0
 801d498:	d101      	bne.n	801d49e <cogui_widget_create+0x2a>
        return Co_NULL;
 801d49a:	2300      	movs	r3, #0
 801d49c:	e02e      	b.n	801d4fc <cogui_widget_create+0x88>
    }
    
    /* first initial structure data */
    _cogui_widget_init(widget);
 801d49e:	68f8      	ldr	r0, [r7, #12]
 801d4a0:	f7ff ffae 	bl	801d400 <_cogui_widget_init>

    /* set type to widget */
    widget->flag &= ~COGUI_WIDGET_TYPE_MASK;
 801d4a4:	68fb      	ldr	r3, [r7, #12]
 801d4a6:	689b      	ldr	r3, [r3, #8]
 801d4a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 801d4ac:	68fb      	ldr	r3, [r7, #12]
 801d4ae:	609a      	str	r2, [r3, #8]
    widget->flag |= COGUI_WIDGET_TYPE_WIDGET;
 801d4b0:	68fb      	ldr	r3, [r7, #12]
 801d4b2:	689b      	ldr	r3, [r3, #8]
 801d4b4:	f043 0220 	orr.w	r2, r3, #32
 801d4b8:	68fb      	ldr	r3, [r7, #12]
 801d4ba:	609a      	str	r2, [r3, #8]

    /* create a dc engine */
    widget->dc_engine = cogui_dc_begin_drawing(widget);
 801d4bc:	68f8      	ldr	r0, [r7, #12]
 801d4be:	f7fe fa83 	bl	801b9c8 <cogui_dc_begin_drawing>
 801d4c2:	4602      	mov	r2, r0
 801d4c4:	68fb      	ldr	r3, [r7, #12]
 801d4c6:	629a      	str	r2, [r3, #40]	; 0x28
    COGUI_ASSERT(widget->dc_engine != Co_NULL);
 801d4c8:	68fb      	ldr	r3, [r7, #12]
 801d4ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d4cc:	2b00      	cmp	r3, #0
 801d4ce:	d104      	bne.n	801d4da <cogui_widget_create+0x66>
 801d4d0:	223c      	movs	r2, #60	; 0x3c
 801d4d2:	490c      	ldr	r1, [pc, #48]	; (801d504 <cogui_widget_create+0x90>)
 801d4d4:	480d      	ldr	r0, [pc, #52]	; (801d50c <cogui_widget_create+0x98>)
 801d4d6:	f7ff fea9 	bl	801d22c <cogui_assert_handler>

    widget->top = top;
 801d4da:	68fb      	ldr	r3, [r7, #12]
 801d4dc:	687a      	ldr	r2, [r7, #4]
 801d4de:	605a      	str	r2, [r3, #4]
    widget->id  = top->widget_cnt++;
 801d4e0:	687b      	ldr	r3, [r7, #4]
 801d4e2:	699b      	ldr	r3, [r3, #24]
 801d4e4:	1c59      	adds	r1, r3, #1
 801d4e6:	687a      	ldr	r2, [r7, #4]
 801d4e8:	6191      	str	r1, [r2, #24]
 801d4ea:	68fa      	ldr	r2, [r7, #12]
 801d4ec:	60d3      	str	r3, [r2, #12]

    cogui_widget_list_insert(widget);
 801d4ee:	68f8      	ldr	r0, [r7, #12]
 801d4f0:	f000 f884 	bl	801d5fc <cogui_widget_list_insert>

    top->focus_widget = widget;
 801d4f4:	687b      	ldr	r3, [r7, #4]
 801d4f6:	68fa      	ldr	r2, [r7, #12]
 801d4f8:	61da      	str	r2, [r3, #28]
    return widget;
 801d4fa:	68fb      	ldr	r3, [r7, #12]
}
 801d4fc:	4618      	mov	r0, r3
 801d4fe:	3710      	adds	r7, #16
 801d500:	46bd      	mov	sp, r7
 801d502:	bd80      	pop	{r7, pc}
 801d504:	08025994 	.word	0x08025994
 801d508:	080258f8 	.word	0x080258f8
 801d50c:	08025908 	.word	0x08025908

0801d510 <cogui_widget_delete>:

void cogui_widget_delete(cogui_widget_t *widget)
{
 801d510:	b580      	push	{r7, lr}
 801d512:	b082      	sub	sp, #8
 801d514:	af00      	add	r7, sp, #0
 801d516:	6078      	str	r0, [r7, #4]
    cogui_widget_list_pop(widget->id, widget->top);
 801d518:	687b      	ldr	r3, [r7, #4]
 801d51a:	68db      	ldr	r3, [r3, #12]
 801d51c:	461a      	mov	r2, r3
 801d51e:	687b      	ldr	r3, [r7, #4]
 801d520:	685b      	ldr	r3, [r3, #4]
 801d522:	4619      	mov	r1, r3
 801d524:	4610      	mov	r0, r2
 801d526:	f000 f8a5 	bl	801d674 <cogui_widget_list_pop>
    cogui_dc_end_drawing(widget->dc_engine);
 801d52a:	687b      	ldr	r3, [r7, #4]
 801d52c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d52e:	4618      	mov	r0, r3
 801d530:	f7fe fa68 	bl	801ba04 <cogui_dc_end_drawing>
    cogui_widget_clear_text(widget);
 801d534:	6878      	ldr	r0, [r7, #4]
 801d536:	f000 fc8d 	bl	801de54 <cogui_widget_clear_text>

    if (widget->user_data) {
 801d53a:	687b      	ldr	r3, [r7, #4]
 801d53c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801d53e:	2b00      	cmp	r3, #0
 801d540:	d004      	beq.n	801d54c <cogui_widget_delete+0x3c>
        cogui_free(widget->user_data);
 801d542:	687b      	ldr	r3, [r7, #4]
 801d544:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801d546:	4618      	mov	r0, r3
 801d548:	f7ff f988 	bl	801c85c <cogui_free>
    }

    cogui_free(widget);
 801d54c:	6878      	ldr	r0, [r7, #4]
 801d54e:	f7ff f985 	bl	801c85c <cogui_free>
}
 801d552:	bf00      	nop
 801d554:	3708      	adds	r7, #8
 801d556:	46bd      	mov	sp, r7
 801d558:	bd80      	pop	{r7, pc}

0801d55a <cogui_widget_list_init>:
 * @details    This function is used to initial a screen list to a header node
 *             and a full screen widget, and refresh screen currently.    
 *******************************************************************************
 */
cogui_widget_t *cogui_widget_list_init(struct cogui_window *top)
{	
 801d55a:	b590      	push	{r4, r7, lr}
 801d55c:	b087      	sub	sp, #28
 801d55e:	af02      	add	r7, sp, #8
 801d560:	6078      	str	r0, [r7, #4]
    /* create header node */
	cogui_widget_t *header = cogui_widget_create(top);
 801d562:	6878      	ldr	r0, [r7, #4]
 801d564:	f7ff ff86 	bl	801d474 <cogui_widget_create>
 801d568:	60f8      	str	r0, [r7, #12]
    COGUI_ASSERT(header != Co_NULL);
 801d56a:	68fb      	ldr	r3, [r7, #12]
 801d56c:	2b00      	cmp	r3, #0
 801d56e:	d104      	bne.n	801d57a <cogui_widget_list_init+0x20>
 801d570:	2264      	movs	r2, #100	; 0x64
 801d572:	491e      	ldr	r1, [pc, #120]	; (801d5ec <cogui_widget_list_init+0x92>)
 801d574:	481e      	ldr	r0, [pc, #120]	; (801d5f0 <cogui_widget_list_init+0x96>)
 801d576:	f7ff fe59 	bl	801d22c <cogui_assert_handler>
    header->flag |= COGUI_WIDGET_FLAG_HEADER;
 801d57a:	68fb      	ldr	r3, [r7, #12]
 801d57c:	689b      	ldr	r3, [r3, #8]
 801d57e:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 801d582:	68fb      	ldr	r3, [r7, #12]
 801d584:	609a      	str	r2, [r3, #8]
    
    /* first object should be a fill screen */
    cogui_widget_t *widget = cogui_widget_create(top);
 801d586:	6878      	ldr	r0, [r7, #4]
 801d588:	f7ff ff74 	bl	801d474 <cogui_widget_create>
 801d58c:	60b8      	str	r0, [r7, #8]
    COGUI_ASSERT(widget != Co_NULL);	
 801d58e:	68bb      	ldr	r3, [r7, #8]
 801d590:	2b00      	cmp	r3, #0
 801d592:	d104      	bne.n	801d59e <cogui_widget_list_init+0x44>
 801d594:	2269      	movs	r2, #105	; 0x69
 801d596:	4915      	ldr	r1, [pc, #84]	; (801d5ec <cogui_widget_list_init+0x92>)
 801d598:	4816      	ldr	r0, [pc, #88]	; (801d5f4 <cogui_widget_list_init+0x9a>)
 801d59a:	f7ff fe47 	bl	801d22c <cogui_assert_handler>

    /* enabled it */
    widget->flag |= COGUI_WIDGET_FLAG_SHOWN;
 801d59e:	68bb      	ldr	r3, [r7, #8]
 801d5a0:	689b      	ldr	r3, [r3, #8]
 801d5a2:	f043 0201 	orr.w	r2, r3, #1
 801d5a6:	68bb      	ldr	r3, [r7, #8]
 801d5a8:	609a      	str	r2, [r3, #8]

    /* set as a full screen rectangle */
    widget->flag |= COGUI_WIDGET_FLAG_RECT | COGUI_WIDGET_FLAG_HEADER;
 801d5aa:	68bb      	ldr	r3, [r7, #8]
 801d5ac:	689b      	ldr	r3, [r3, #8]
 801d5ae:	f443 4284 	orr.w	r2, r3, #16896	; 0x4200
 801d5b2:	68bb      	ldr	r3, [r7, #8]
 801d5b4:	609a      	str	r2, [r3, #8]
    cogui_widget_set_rectangle(widget, 0, 0, COGUI_SCREEN_WIDTH, COGUI_SCREEN_HEIGHT);
 801d5b6:	f44f 73a0 	mov.w	r3, #320	; 0x140
 801d5ba:	9300      	str	r3, [sp, #0]
 801d5bc:	23f0      	movs	r3, #240	; 0xf0
 801d5be:	2200      	movs	r2, #0
 801d5c0:	2100      	movs	r1, #0
 801d5c2:	68b8      	ldr	r0, [r7, #8]
 801d5c4:	f000 fabd 	bl	801db42 <cogui_widget_set_rectangle>

    /* this node should be filled by background */
    widget->gc.foreground = default_background;
 801d5c8:	4b0b      	ldr	r3, [pc, #44]	; (801d5f8 <cogui_widget_list_init+0x9e>)
 801d5ca:	e9d3 3400 	ldrd	r3, r4, [r3]
 801d5ce:	68ba      	ldr	r2, [r7, #8]
 801d5d0:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
    widget->flag |= COGUI_WIDGET_FLAG_FILLED;
 801d5d4:	68bb      	ldr	r3, [r7, #8]
 801d5d6:	689b      	ldr	r3, [r3, #8]
 801d5d8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 801d5dc:	68bb      	ldr	r3, [r7, #8]
 801d5de:	609a      	str	r2, [r3, #8]

	return widget;
 801d5e0:	68bb      	ldr	r3, [r7, #8]
}
 801d5e2:	4618      	mov	r0, r3
 801d5e4:	3714      	adds	r7, #20
 801d5e6:	46bd      	mov	sp, r7
 801d5e8:	bd90      	pop	{r4, r7, pc}
 801d5ea:	bf00      	nop
 801d5ec:	080259a8 	.word	0x080259a8
 801d5f0:	08025928 	.word	0x08025928
 801d5f4:	0802593c 	.word	0x0802593c
 801d5f8:	08022ca8 	.word	0x08022ca8

0801d5fc <cogui_widget_list_insert>:
 * @details    This function is used to insert a screen node into screen list
 *             and refresh screen currently.
 *******************************************************************************
 */
void cogui_widget_list_insert(cogui_widget_t *node)
{  
 801d5fc:	b580      	push	{r7, lr}
 801d5fe:	b084      	sub	sp, #16
 801d600:	af00      	add	r7, sp, #0
 801d602:	6078      	str	r0, [r7, #4]
    COGUI_ASSERT(node != Co_NULL);
 801d604:	687b      	ldr	r3, [r7, #4]
 801d606:	2b00      	cmp	r3, #0
 801d608:	d104      	bne.n	801d614 <cogui_widget_list_insert+0x18>
 801d60a:	2287      	movs	r2, #135	; 0x87
 801d60c:	4916      	ldr	r1, [pc, #88]	; (801d668 <cogui_widget_list_insert+0x6c>)
 801d60e:	4817      	ldr	r0, [pc, #92]	; (801d66c <cogui_widget_list_insert+0x70>)
 801d610:	f7ff fe0c 	bl	801d22c <cogui_assert_handler>

    struct cogui_window *top = node->top;
 801d614:	687b      	ldr	r3, [r7, #4]
 801d616:	685b      	ldr	r3, [r3, #4]
 801d618:	60bb      	str	r3, [r7, #8]
    COGUI_ASSERT(top != Co_NULL);
 801d61a:	68bb      	ldr	r3, [r7, #8]
 801d61c:	2b00      	cmp	r3, #0
 801d61e:	d104      	bne.n	801d62a <cogui_widget_list_insert+0x2e>
 801d620:	228a      	movs	r2, #138	; 0x8a
 801d622:	4911      	ldr	r1, [pc, #68]	; (801d668 <cogui_widget_list_insert+0x6c>)
 801d624:	4812      	ldr	r0, [pc, #72]	; (801d670 <cogui_widget_list_insert+0x74>)
 801d626:	f7ff fe01 	bl	801d22c <cogui_assert_handler>

    /* if it is header node */
    if (top->widget_list == Co_NULL) {
 801d62a:	68bb      	ldr	r3, [r7, #8]
 801d62c:	685b      	ldr	r3, [r3, #4]
 801d62e:	2b00      	cmp	r3, #0
 801d630:	d106      	bne.n	801d640 <cogui_widget_list_insert+0x44>
        top->widget_list = node;
 801d632:	68bb      	ldr	r3, [r7, #8]
 801d634:	687a      	ldr	r2, [r7, #4]
 801d636:	605a      	str	r2, [r3, #4]
        node->next = Co_NULL;
 801d638:	687b      	ldr	r3, [r7, #4]
 801d63a:	2200      	movs	r2, #0
 801d63c:	601a      	str	r2, [r3, #0]
        return;
 801d63e:	e010      	b.n	801d662 <cogui_widget_list_insert+0x66>
    }

    cogui_widget_t *list = top->widget_list;
 801d640:	68bb      	ldr	r3, [r7, #8]
 801d642:	685b      	ldr	r3, [r3, #4]
 801d644:	60fb      	str	r3, [r7, #12]

    while (list->next != Co_NULL)
 801d646:	e002      	b.n	801d64e <cogui_widget_list_insert+0x52>
        list = list->next;
 801d648:	68fb      	ldr	r3, [r7, #12]
 801d64a:	681b      	ldr	r3, [r3, #0]
 801d64c:	60fb      	str	r3, [r7, #12]
    while (list->next != Co_NULL)
 801d64e:	68fb      	ldr	r3, [r7, #12]
 801d650:	681b      	ldr	r3, [r3, #0]
 801d652:	2b00      	cmp	r3, #0
 801d654:	d1f8      	bne.n	801d648 <cogui_widget_list_insert+0x4c>

    list->next = node;
 801d656:	68fb      	ldr	r3, [r7, #12]
 801d658:	687a      	ldr	r2, [r7, #4]
 801d65a:	601a      	str	r2, [r3, #0]
    node->next = Co_NULL;
 801d65c:	687b      	ldr	r3, [r7, #4]
 801d65e:	2200      	movs	r2, #0
 801d660:	601a      	str	r2, [r3, #0]
    
    /* after inserted, refresh screen */
    //cogui_screen_refresh(top);
}
 801d662:	3710      	adds	r7, #16
 801d664:	46bd      	mov	sp, r7
 801d666:	bd80      	pop	{r7, pc}
 801d668:	080259c0 	.word	0x080259c0
 801d66c:	08025950 	.word	0x08025950
 801d670:	080258f8 	.word	0x080258f8

0801d674 <cogui_widget_list_pop>:
 * @details    This function is used to pop out a screen node from screen list
 *             and not delete it right now. 
 *******************************************************************************
 */
cogui_widget_t *cogui_widget_list_pop(co_uint32_t id, struct cogui_window *top)
{
 801d674:	b580      	push	{r7, lr}
 801d676:	b084      	sub	sp, #16
 801d678:	af00      	add	r7, sp, #0
 801d67a:	6078      	str	r0, [r7, #4]
 801d67c:	6039      	str	r1, [r7, #0]
    cogui_widget_t *list = top->widget_list->next;
 801d67e:	683b      	ldr	r3, [r7, #0]
 801d680:	685b      	ldr	r3, [r3, #4]
 801d682:	681b      	ldr	r3, [r3, #0]
 801d684:	60fb      	str	r3, [r7, #12]

    /* recursive from first node */
    while (list->next != Co_NULL) {
 801d686:	e018      	b.n	801d6ba <cogui_widget_list_pop+0x46>
        if (list->next->id == id) {
 801d688:	68fb      	ldr	r3, [r7, #12]
 801d68a:	681b      	ldr	r3, [r3, #0]
 801d68c:	68db      	ldr	r3, [r3, #12]
 801d68e:	461a      	mov	r2, r3
 801d690:	687b      	ldr	r3, [r7, #4]
 801d692:	4293      	cmp	r3, r2
 801d694:	d10e      	bne.n	801d6b4 <cogui_widget_list_pop+0x40>
            cogui_widget_t *tmp_widget = list->next;
 801d696:	68fb      	ldr	r3, [r7, #12]
 801d698:	681b      	ldr	r3, [r3, #0]
 801d69a:	60bb      	str	r3, [r7, #8]
            
            list->next = tmp_widget->next;
 801d69c:	68bb      	ldr	r3, [r7, #8]
 801d69e:	681a      	ldr	r2, [r3, #0]
 801d6a0:	68fb      	ldr	r3, [r7, #12]
 801d6a2:	601a      	str	r2, [r3, #0]

            tmp_widget->next = Co_NULL;
 801d6a4:	68bb      	ldr	r3, [r7, #8]
 801d6a6:	2200      	movs	r2, #0
 801d6a8:	601a      	str	r2, [r3, #0]
            
			/* after pop function, refresh screen */
			cogui_screen_refresh(top);
 801d6aa:	6838      	ldr	r0, [r7, #0]
 801d6ac:	f000 f82d 	bl	801d70a <cogui_screen_refresh>
			
            return tmp_widget;
 801d6b0:	68bb      	ldr	r3, [r7, #8]
 801d6b2:	e007      	b.n	801d6c4 <cogui_widget_list_pop+0x50>
        }

        /* or move to next one */
        list = list->next;
 801d6b4:	68fb      	ldr	r3, [r7, #12]
 801d6b6:	681b      	ldr	r3, [r3, #0]
 801d6b8:	60fb      	str	r3, [r7, #12]
    while (list->next != Co_NULL) {
 801d6ba:	68fb      	ldr	r3, [r7, #12]
 801d6bc:	681b      	ldr	r3, [r3, #0]
 801d6be:	2b00      	cmp	r3, #0
 801d6c0:	d1e2      	bne.n	801d688 <cogui_widget_list_pop+0x14>
    }

    return Co_NULL;
 801d6c2:	2300      	movs	r3, #0
}
 801d6c4:	4618      	mov	r0, r3
 801d6c6:	3710      	adds	r7, #16
 801d6c8:	46bd      	mov	sp, r7
 801d6ca:	bd80      	pop	{r7, pc}

0801d6cc <cogui_get_widget_node>:
 * @retval     screen_node  The result we found
 * @retval     Co_NULL      Or we did not find it
 *******************************************************************************
 */
cogui_widget_t *cogui_get_widget_node(co_uint32_t id, struct cogui_window *top)
{
 801d6cc:	b480      	push	{r7}
 801d6ce:	b085      	sub	sp, #20
 801d6d0:	af00      	add	r7, sp, #0
 801d6d2:	6078      	str	r0, [r7, #4]
 801d6d4:	6039      	str	r1, [r7, #0]
    cogui_widget_t *list = top->widget_list->next;
 801d6d6:	683b      	ldr	r3, [r7, #0]
 801d6d8:	685b      	ldr	r3, [r3, #4]
 801d6da:	681b      	ldr	r3, [r3, #0]
 801d6dc:	60fb      	str	r3, [r7, #12]

    /* recursive from first node */
    while (list != Co_NULL) {
 801d6de:	e00a      	b.n	801d6f6 <cogui_get_widget_node+0x2a>
        /* find the corrent one, return it */
        if (list->id == id) {
 801d6e0:	68fb      	ldr	r3, [r7, #12]
 801d6e2:	68db      	ldr	r3, [r3, #12]
 801d6e4:	461a      	mov	r2, r3
 801d6e6:	687b      	ldr	r3, [r7, #4]
 801d6e8:	4293      	cmp	r3, r2
 801d6ea:	d101      	bne.n	801d6f0 <cogui_get_widget_node+0x24>
            return list;
 801d6ec:	68fb      	ldr	r3, [r7, #12]
 801d6ee:	e006      	b.n	801d6fe <cogui_get_widget_node+0x32>
        }

        /* or move to next one */
        list = list->next;
 801d6f0:	68fb      	ldr	r3, [r7, #12]
 801d6f2:	681b      	ldr	r3, [r3, #0]
 801d6f4:	60fb      	str	r3, [r7, #12]
    while (list != Co_NULL) {
 801d6f6:	68fb      	ldr	r3, [r7, #12]
 801d6f8:	2b00      	cmp	r3, #0
 801d6fa:	d1f1      	bne.n	801d6e0 <cogui_get_widget_node+0x14>
    }

    return Co_NULL;
 801d6fc:	2300      	movs	r3, #0
}
 801d6fe:	4618      	mov	r0, r3
 801d700:	3714      	adds	r7, #20
 801d702:	46bd      	mov	sp, r7
 801d704:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d708:	4770      	bx	lr

0801d70a <cogui_screen_refresh>:
 * @par Description
 * @details    This function is called to refresh screen by list.
 *******************************************************************************
 */
StatusType cogui_screen_refresh(struct cogui_window *top)
{
 801d70a:	b590      	push	{r4, r7, lr}
 801d70c:	b089      	sub	sp, #36	; 0x24
 801d70e:	af00      	add	r7, sp, #0
 801d710:	6078      	str	r0, [r7, #4]
    COGUI_ASSERT(top != Co_NULL);
 801d712:	687b      	ldr	r3, [r7, #4]
 801d714:	2b00      	cmp	r3, #0
 801d716:	d104      	bne.n	801d722 <cogui_screen_refresh+0x18>
 801d718:	22ed      	movs	r2, #237	; 0xed
 801d71a:	4964      	ldr	r1, [pc, #400]	; (801d8ac <cogui_screen_refresh+0x1a2>)
 801d71c:	4864      	ldr	r0, [pc, #400]	; (801d8b0 <cogui_screen_refresh+0x1a6>)
 801d71e:	f7ff fd85 	bl	801d22c <cogui_assert_handler>

    if (!COGUI_WINDOW_IS_ENABLE(top) && top != main_page) {
 801d722:	687b      	ldr	r3, [r7, #4]
 801d724:	68db      	ldr	r3, [r3, #12]
 801d726:	f003 0301 	and.w	r3, r3, #1
 801d72a:	2b00      	cmp	r3, #0
 801d72c:	d107      	bne.n	801d73e <cogui_screen_refresh+0x34>
 801d72e:	4b61      	ldr	r3, [pc, #388]	; (801d8b4 <cogui_screen_refresh+0x1aa>)
 801d730:	681b      	ldr	r3, [r3, #0]
 801d732:	687a      	ldr	r2, [r7, #4]
 801d734:	429a      	cmp	r2, r3
 801d736:	d002      	beq.n	801d73e <cogui_screen_refresh+0x34>
        top = main_page;
 801d738:	4b5e      	ldr	r3, [pc, #376]	; (801d8b4 <cogui_screen_refresh+0x1aa>)
 801d73a:	681b      	ldr	r3, [r3, #0]
 801d73c:	607b      	str	r3, [r7, #4]
    }

    if (!COGUI_WINDOW_IS_ENABLE(top) && top == main_page) {
 801d73e:	687b      	ldr	r3, [r7, #4]
 801d740:	68db      	ldr	r3, [r3, #12]
 801d742:	f003 0301 	and.w	r3, r3, #1
 801d746:	2b00      	cmp	r3, #0
 801d748:	d106      	bne.n	801d758 <cogui_screen_refresh+0x4e>
 801d74a:	4b5a      	ldr	r3, [pc, #360]	; (801d8b4 <cogui_screen_refresh+0x1aa>)
 801d74c:	681b      	ldr	r3, [r3, #0]
 801d74e:	687a      	ldr	r2, [r7, #4]
 801d750:	429a      	cmp	r2, r3
 801d752:	d101      	bne.n	801d758 <cogui_screen_refresh+0x4e>
        return GUI_E_ERROR;
 801d754:	2316      	movs	r3, #22
 801d756:	e0a4      	b.n	801d8a2 <cogui_screen_refresh+0x198>
    }

    cogui_widget_t *list = top->widget_list->next;
 801d758:	687b      	ldr	r3, [r7, #4]
 801d75a:	685b      	ldr	r3, [r3, #4]
 801d75c:	681b      	ldr	r3, [r3, #0]
 801d75e:	61fb      	str	r3, [r7, #28]

    while (list != Co_NULL) {
 801d760:	e09a      	b.n	801d898 <cogui_screen_refresh+0x18e>
        /* if this node is disabled, skip it */
        if (!COGUI_WIDGET_IS_ENABLE(list)){
 801d762:	69fb      	ldr	r3, [r7, #28]
 801d764:	689b      	ldr	r3, [r3, #8]
 801d766:	f003 0301 	and.w	r3, r3, #1
 801d76a:	2b00      	cmp	r3, #0
 801d76c:	d103      	bne.n	801d776 <cogui_screen_refresh+0x6c>
            list = list->next;
 801d76e:	69fb      	ldr	r3, [r7, #28]
 801d770:	681b      	ldr	r3, [r3, #0]
 801d772:	61fb      	str	r3, [r7, #28]
            continue;
 801d774:	e090      	b.n	801d898 <cogui_screen_refresh+0x18e>
        }

        /* draw shape if needed */
        if (list->flag & COGUI_WIDGET_FLAG_RECT) {
 801d776:	69fb      	ldr	r3, [r7, #28]
 801d778:	689b      	ldr	r3, [r3, #8]
 801d77a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801d77e:	2b00      	cmp	r3, #0
 801d780:	d018      	beq.n	801d7b4 <cogui_screen_refresh+0xaa>
            if (list->flag & COGUI_WIDGET_FLAG_FILLED) {
 801d782:	69fb      	ldr	r3, [r7, #28]
 801d784:	689b      	ldr	r3, [r3, #8]
 801d786:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801d78a:	2b00      	cmp	r3, #0
 801d78c:	d00a      	beq.n	801d7a4 <cogui_screen_refresh+0x9a>
                list->dc_engine->engine->fill_rect(list->dc_engine, &list->inner_extent);
 801d78e:	69fb      	ldr	r3, [r7, #28]
 801d790:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d792:	685b      	ldr	r3, [r3, #4]
 801d794:	691b      	ldr	r3, [r3, #16]
 801d796:	69fa      	ldr	r2, [r7, #28]
 801d798:	6a90      	ldr	r0, [r2, #40]	; 0x28
 801d79a:	69fa      	ldr	r2, [r7, #28]
 801d79c:	321a      	adds	r2, #26
 801d79e:	4611      	mov	r1, r2
 801d7a0:	4798      	blx	r3
 801d7a2:	e007      	b.n	801d7b4 <cogui_screen_refresh+0xaa>
			}
            else {
                cogui_dc_draw_rect(list->dc_engine, &list->inner_extent);
 801d7a4:	69fb      	ldr	r3, [r7, #28]
 801d7a6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801d7a8:	69fb      	ldr	r3, [r7, #28]
 801d7aa:	331a      	adds	r3, #26
 801d7ac:	4619      	mov	r1, r3
 801d7ae:	4610      	mov	r0, r2
 801d7b0:	f7fd feb0 	bl	801b514 <cogui_dc_draw_rect>
            }
        }
        
        /* draw text if needed */
        if (list->flag & COGUI_WIDGET_FLAG_HAS_TEXT) {
 801d7b4:	69fb      	ldr	r3, [r7, #28]
 801d7b6:	689b      	ldr	r3, [r3, #8]
 801d7b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801d7bc:	2b00      	cmp	r3, #0
 801d7be:	d05a      	beq.n	801d876 <cogui_screen_refresh+0x16c>
            cogui_rect_t pr = list->inner_extent;
 801d7c0:	69fa      	ldr	r2, [r7, #28]
 801d7c2:	f107 0308 	add.w	r3, r7, #8
 801d7c6:	321a      	adds	r2, #26
 801d7c8:	6810      	ldr	r0, [r2, #0]
 801d7ca:	6851      	ldr	r1, [r2, #4]
 801d7cc:	c303      	stmia	r3!, {r0, r1}
            co_uint64_t padding = list->gc.padding;
 801d7ce:	69fb      	ldr	r3, [r7, #28]
 801d7d0:	e9d3 3412 	ldrd	r3, r4, [r3, #72]	; 0x48
 801d7d4:	e9c7 3404 	strd	r3, r4, [r7, #16]
            COGUI_RECT_PADDING(&pr, padding);
 801d7d8:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801d7dc:	b298      	uxth	r0, r3
 801d7de:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 801d7e2:	f04f 0300 	mov.w	r3, #0
 801d7e6:	f04f 0400 	mov.w	r4, #0
 801d7ea:	0a0b      	lsrs	r3, r1, #8
 801d7ec:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 801d7f0:	0a14      	lsrs	r4, r2, #8
 801d7f2:	b29b      	uxth	r3, r3
 801d7f4:	b2db      	uxtb	r3, r3
 801d7f6:	b29b      	uxth	r3, r3
 801d7f8:	4403      	add	r3, r0
 801d7fa:	b29b      	uxth	r3, r3
 801d7fc:	b21b      	sxth	r3, r3
 801d7fe:	813b      	strh	r3, [r7, #8]
 801d800:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 801d804:	b29a      	uxth	r2, r3
 801d806:	8a3b      	ldrh	r3, [r7, #16]
 801d808:	b2db      	uxtb	r3, r3
 801d80a:	b29b      	uxth	r3, r3
 801d80c:	1ad3      	subs	r3, r2, r3
 801d80e:	b29b      	uxth	r3, r3
 801d810:	b21b      	sxth	r3, r3
 801d812:	817b      	strh	r3, [r7, #10]
 801d814:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 801d818:	b298      	uxth	r0, r3
 801d81a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 801d81e:	f04f 0300 	mov.w	r3, #0
 801d822:	f04f 0400 	mov.w	r4, #0
 801d826:	0e0b      	lsrs	r3, r1, #24
 801d828:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801d82c:	0e14      	lsrs	r4, r2, #24
 801d82e:	b29b      	uxth	r3, r3
 801d830:	b2db      	uxtb	r3, r3
 801d832:	b29b      	uxth	r3, r3
 801d834:	4403      	add	r3, r0
 801d836:	b29b      	uxth	r3, r3
 801d838:	b21b      	sxth	r3, r3
 801d83a:	81bb      	strh	r3, [r7, #12]
 801d83c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801d840:	b298      	uxth	r0, r3
 801d842:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 801d846:	f04f 0300 	mov.w	r3, #0
 801d84a:	f04f 0400 	mov.w	r4, #0
 801d84e:	0c0b      	lsrs	r3, r1, #16
 801d850:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801d854:	0c14      	lsrs	r4, r2, #16
 801d856:	b29b      	uxth	r3, r3
 801d858:	b2db      	uxtb	r3, r3
 801d85a:	b29b      	uxth	r3, r3
 801d85c:	1ac3      	subs	r3, r0, r3
 801d85e:	b29b      	uxth	r3, r3
 801d860:	b21b      	sxth	r3, r3
 801d862:	81fb      	strh	r3, [r7, #14]

            cogui_dc_draw_text(list->dc_engine, &pr, list->text);
 801d864:	69fb      	ldr	r3, [r7, #28]
 801d866:	6a98      	ldr	r0, [r3, #40]	; 0x28
 801d868:	69fb      	ldr	r3, [r7, #28]
 801d86a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801d86c:	f107 0308 	add.w	r3, r7, #8
 801d870:	4619      	mov	r1, r3
 801d872:	f7fd ff9d 	bl	801b7b0 <cogui_dc_draw_text>
        }

        /* draw border at last if needed */
        if (list->flag & COGUI_WIDGET_BORDER) {
 801d876:	69fb      	ldr	r3, [r7, #28]
 801d878:	689b      	ldr	r3, [r3, #8]
 801d87a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801d87e:	2b00      	cmp	r3, #0
 801d880:	d007      	beq.n	801d892 <cogui_screen_refresh+0x188>
            cogui_dc_draw_border(list->dc_engine, &list->inner_extent);
 801d882:	69fb      	ldr	r3, [r7, #28]
 801d884:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801d886:	69fb      	ldr	r3, [r7, #28]
 801d888:	331a      	adds	r3, #26
 801d88a:	4619      	mov	r1, r3
 801d88c:	4610      	mov	r0, r2
 801d88e:	f7fd ff2d 	bl	801b6ec <cogui_dc_draw_border>
        }        

        /* go forward to next node */
        list = list->next;
 801d892:	69fb      	ldr	r3, [r7, #28]
 801d894:	681b      	ldr	r3, [r3, #0]
 801d896:	61fb      	str	r3, [r7, #28]
    while (list != Co_NULL) {
 801d898:	69fb      	ldr	r3, [r7, #28]
 801d89a:	2b00      	cmp	r3, #0
 801d89c:	f47f af61 	bne.w	801d762 <cogui_screen_refresh+0x58>
    }

    return GUI_E_OK;
 801d8a0:	2317      	movs	r3, #23
}
 801d8a2:	4618      	mov	r0, r3
 801d8a4:	3724      	adds	r7, #36	; 0x24
 801d8a6:	46bd      	mov	sp, r7
 801d8a8:	bd90      	pop	{r4, r7, pc}
 801d8aa:	bf00      	nop
 801d8ac:	080259dc 	.word	0x080259dc
 801d8b0:	080258f8 	.word	0x080258f8
 801d8b4:	2000d774 	.word	0x2000d774

0801d8b8 <cogui_widget_set_focus>:

void cogui_widget_set_focus(cogui_widget_t *widget, event_handler_ptr handler)
{
 801d8b8:	b580      	push	{r7, lr}
 801d8ba:	b082      	sub	sp, #8
 801d8bc:	af00      	add	r7, sp, #0
 801d8be:	6078      	str	r0, [r7, #4]
 801d8c0:	6039      	str	r1, [r7, #0]
    COGUI_ASSERT(widget != Co_NULL);
 801d8c2:	687b      	ldr	r3, [r7, #4]
 801d8c4:	2b00      	cmp	r3, #0
 801d8c6:	d105      	bne.n	801d8d4 <cogui_widget_set_focus+0x1c>
 801d8c8:	f240 1221 	movw	r2, #289	; 0x121
 801d8cc:	4905      	ldr	r1, [pc, #20]	; (801d8e4 <cogui_widget_set_focus+0x2c>)
 801d8ce:	4806      	ldr	r0, [pc, #24]	; (801d8e8 <cogui_widget_set_focus+0x30>)
 801d8d0:	f7ff fcac 	bl	801d22c <cogui_assert_handler>

    widget->on_focus_in = handler;
 801d8d4:	687b      	ldr	r3, [r7, #4]
 801d8d6:	683a      	ldr	r2, [r7, #0]
 801d8d8:	659a      	str	r2, [r3, #88]	; 0x58
}
 801d8da:	bf00      	nop
 801d8dc:	3708      	adds	r7, #8
 801d8de:	46bd      	mov	sp, r7
 801d8e0:	bd80      	pop	{r7, pc}
 801d8e2:	bf00      	nop
 801d8e4:	080259f4 	.word	0x080259f4
 801d8e8:	0802593c 	.word	0x0802593c

0801d8ec <cogui_widget_set_unfocus>:

void cogui_widget_set_unfocus(cogui_widget_t *widget, event_handler_ptr handler)
{
 801d8ec:	b580      	push	{r7, lr}
 801d8ee:	b082      	sub	sp, #8
 801d8f0:	af00      	add	r7, sp, #0
 801d8f2:	6078      	str	r0, [r7, #4]
 801d8f4:	6039      	str	r1, [r7, #0]
    COGUI_ASSERT(widget != Co_NULL);
 801d8f6:	687b      	ldr	r3, [r7, #4]
 801d8f8:	2b00      	cmp	r3, #0
 801d8fa:	d105      	bne.n	801d908 <cogui_widget_set_unfocus+0x1c>
 801d8fc:	f44f 7294 	mov.w	r2, #296	; 0x128
 801d900:	4905      	ldr	r1, [pc, #20]	; (801d918 <cogui_widget_set_unfocus+0x2c>)
 801d902:	4806      	ldr	r0, [pc, #24]	; (801d91c <cogui_widget_set_unfocus+0x30>)
 801d904:	f7ff fc92 	bl	801d22c <cogui_assert_handler>
    
    widget->on_focus_out = handler;
 801d908:	687b      	ldr	r3, [r7, #4]
 801d90a:	683a      	ldr	r2, [r7, #0]
 801d90c:	65da      	str	r2, [r3, #92]	; 0x5c
}
 801d90e:	bf00      	nop
 801d910:	3708      	adds	r7, #8
 801d912:	46bd      	mov	sp, r7
 801d914:	bd80      	pop	{r7, pc}
 801d916:	bf00      	nop
 801d918:	08025a0c 	.word	0x08025a0c
 801d91c:	0802593c 	.word	0x0802593c

0801d920 <cogui_widget_focus>:

void cogui_widget_focus(cogui_widget_t *widget)
{
 801d920:	b580      	push	{r7, lr}
 801d922:	b082      	sub	sp, #8
 801d924:	af00      	add	r7, sp, #0
 801d926:	6078      	str	r0, [r7, #4]
    COGUI_ASSERT(widget != Co_NULL);
 801d928:	687b      	ldr	r3, [r7, #4]
 801d92a:	2b00      	cmp	r3, #0
 801d92c:	d105      	bne.n	801d93a <cogui_widget_focus+0x1a>
 801d92e:	f240 122f 	movw	r2, #303	; 0x12f
 801d932:	4917      	ldr	r1, [pc, #92]	; (801d990 <cogui_widget_focus+0x70>)
 801d934:	4817      	ldr	r0, [pc, #92]	; (801d994 <cogui_widget_focus+0x74>)
 801d936:	f7ff fc79 	bl	801d22c <cogui_assert_handler>

    widget->flag |= COGUI_WIDGET_FLAG_FOCUS;
 801d93a:	687b      	ldr	r3, [r7, #4]
 801d93c:	689b      	ldr	r3, [r3, #8]
 801d93e:	f043 0202 	orr.w	r2, r3, #2
 801d942:	687b      	ldr	r3, [r7, #4]
 801d944:	609a      	str	r2, [r3, #8]

    if (widget->top->focus_widget == widget) {
 801d946:	687b      	ldr	r3, [r7, #4]
 801d948:	685b      	ldr	r3, [r3, #4]
 801d94a:	69db      	ldr	r3, [r3, #28]
 801d94c:	687a      	ldr	r2, [r7, #4]
 801d94e:	429a      	cmp	r2, r3
 801d950:	d105      	bne.n	801d95e <cogui_widget_focus+0x3e>
        cogui_screen_refresh(widget->top);
 801d952:	687b      	ldr	r3, [r7, #4]
 801d954:	685b      	ldr	r3, [r3, #4]
 801d956:	4618      	mov	r0, r3
 801d958:	f7ff fed7 	bl	801d70a <cogui_screen_refresh>
        return;
 801d95c:	e014      	b.n	801d988 <cogui_widget_focus+0x68>
    }
    else {
        widget->top->focus_widget = widget;
 801d95e:	687b      	ldr	r3, [r7, #4]
 801d960:	685b      	ldr	r3, [r3, #4]
 801d962:	687a      	ldr	r2, [r7, #4]
 801d964:	61da      	str	r2, [r3, #28]
    }

    /* put this node into last of the list */
    cogui_widget_list_pop(widget->id, widget->top);
 801d966:	687b      	ldr	r3, [r7, #4]
 801d968:	68db      	ldr	r3, [r3, #12]
 801d96a:	461a      	mov	r2, r3
 801d96c:	687b      	ldr	r3, [r7, #4]
 801d96e:	685b      	ldr	r3, [r3, #4]
 801d970:	4619      	mov	r1, r3
 801d972:	4610      	mov	r0, r2
 801d974:	f7ff fe7e 	bl	801d674 <cogui_widget_list_pop>
    cogui_widget_list_insert(widget);
 801d978:	6878      	ldr	r0, [r7, #4]
 801d97a:	f7ff fe3f 	bl	801d5fc <cogui_widget_list_insert>
    cogui_screen_refresh(widget->top);
 801d97e:	687b      	ldr	r3, [r7, #4]
 801d980:	685b      	ldr	r3, [r3, #4]
 801d982:	4618      	mov	r0, r3
 801d984:	f7ff fec1 	bl	801d70a <cogui_screen_refresh>
}
 801d988:	3708      	adds	r7, #8
 801d98a:	46bd      	mov	sp, r7
 801d98c:	bd80      	pop	{r7, pc}
 801d98e:	bf00      	nop
 801d990:	08025a28 	.word	0x08025a28
 801d994:	0802593c 	.word	0x0802593c

0801d998 <cogui_widget_unfocus>:

void cogui_widget_unfocus(cogui_widget_t *widget)
{
 801d998:	b580      	push	{r7, lr}
 801d99a:	b084      	sub	sp, #16
 801d99c:	af00      	add	r7, sp, #0
 801d99e:	6078      	str	r0, [r7, #4]
    COGUI_ASSERT(widget != Co_NULL);
 801d9a0:	687b      	ldr	r3, [r7, #4]
 801d9a2:	2b00      	cmp	r3, #0
 801d9a4:	d105      	bne.n	801d9b2 <cogui_widget_unfocus+0x1a>
 801d9a6:	f240 1243 	movw	r2, #323	; 0x143
 801d9aa:	4918      	ldr	r1, [pc, #96]	; (801da0c <cogui_widget_unfocus+0x74>)
 801d9ac:	4818      	ldr	r0, [pc, #96]	; (801da10 <cogui_widget_unfocus+0x78>)
 801d9ae:	f7ff fc3d 	bl	801d22c <cogui_assert_handler>

    widget->flag &= ~COGUI_WIDGET_FLAG_FOCUS;
 801d9b2:	687b      	ldr	r3, [r7, #4]
 801d9b4:	689b      	ldr	r3, [r3, #8]
 801d9b6:	f023 0202 	bic.w	r2, r3, #2
 801d9ba:	687b      	ldr	r3, [r7, #4]
 801d9bc:	609a      	str	r2, [r3, #8]

    cogui_widget_t *list = widget->top->widget_list;
 801d9be:	687b      	ldr	r3, [r7, #4]
 801d9c0:	685b      	ldr	r3, [r3, #4]
 801d9c2:	685b      	ldr	r3, [r3, #4]
 801d9c4:	60fb      	str	r3, [r7, #12]
	
    while(list->next != widget)
 801d9c6:	e002      	b.n	801d9ce <cogui_widget_unfocus+0x36>
        list = list->next; /* it will stop at new focus widget */
 801d9c8:	68fb      	ldr	r3, [r7, #12]
 801d9ca:	681b      	ldr	r3, [r3, #0]
 801d9cc:	60fb      	str	r3, [r7, #12]
    while(list->next != widget)
 801d9ce:	68fb      	ldr	r3, [r7, #12]
 801d9d0:	681b      	ldr	r3, [r3, #0]
 801d9d2:	687a      	ldr	r2, [r7, #4]
 801d9d4:	429a      	cmp	r2, r3
 801d9d6:	d1f7      	bne.n	801d9c8 <cogui_widget_unfocus+0x30>

    /* let new focus node insert into the list of the last */
    cogui_widget_list_pop(list->id, widget->top);
 801d9d8:	68fb      	ldr	r3, [r7, #12]
 801d9da:	68db      	ldr	r3, [r3, #12]
 801d9dc:	461a      	mov	r2, r3
 801d9de:	687b      	ldr	r3, [r7, #4]
 801d9e0:	685b      	ldr	r3, [r3, #4]
 801d9e2:	4619      	mov	r1, r3
 801d9e4:	4610      	mov	r0, r2
 801d9e6:	f7ff fe45 	bl	801d674 <cogui_widget_list_pop>
    cogui_widget_list_insert(list);
 801d9ea:	68f8      	ldr	r0, [r7, #12]
 801d9ec:	f7ff fe06 	bl	801d5fc <cogui_widget_list_insert>
    cogui_screen_refresh(widget->top);
 801d9f0:	687b      	ldr	r3, [r7, #4]
 801d9f2:	685b      	ldr	r3, [r3, #4]
 801d9f4:	4618      	mov	r0, r3
 801d9f6:	f7ff fe88 	bl	801d70a <cogui_screen_refresh>

    widget->top->focus_widget = list;
 801d9fa:	687b      	ldr	r3, [r7, #4]
 801d9fc:	685b      	ldr	r3, [r3, #4]
 801d9fe:	68fa      	ldr	r2, [r7, #12]
 801da00:	61da      	str	r2, [r3, #28]
}
 801da02:	bf00      	nop
 801da04:	3710      	adds	r7, #16
 801da06:	46bd      	mov	sp, r7
 801da08:	bd80      	pop	{r7, pc}
 801da0a:	bf00      	nop
 801da0c:	08025a3c 	.word	0x08025a3c
 801da10:	0802593c 	.word	0x0802593c

0801da14 <cogui_widget_get_rect>:

void cogui_widget_get_rect(cogui_widget_t *widget, cogui_rect_t *rect)
{
 801da14:	b580      	push	{r7, lr}
 801da16:	b082      	sub	sp, #8
 801da18:	af00      	add	r7, sp, #0
 801da1a:	6078      	str	r0, [r7, #4]
 801da1c:	6039      	str	r1, [r7, #0]
    COGUI_ASSERT(widget != Co_NULL);
 801da1e:	687b      	ldr	r3, [r7, #4]
 801da20:	2b00      	cmp	r3, #0
 801da22:	d105      	bne.n	801da30 <cogui_widget_get_rect+0x1c>
 801da24:	f44f 72ab 	mov.w	r2, #342	; 0x156
 801da28:	4916      	ldr	r1, [pc, #88]	; (801da84 <cogui_widget_get_rect+0x70>)
 801da2a:	4817      	ldr	r0, [pc, #92]	; (801da88 <cogui_widget_get_rect+0x74>)
 801da2c:	f7ff fbfe 	bl	801d22c <cogui_assert_handler>

    if (rect != Co_NULL) {
 801da30:	683b      	ldr	r3, [r7, #0]
 801da32:	2b00      	cmp	r3, #0
 801da34:	d021      	beq.n	801da7a <cogui_widget_get_rect+0x66>
        rect->x1 = rect->y1 = 0;
 801da36:	683b      	ldr	r3, [r7, #0]
 801da38:	2200      	movs	r2, #0
 801da3a:	809a      	strh	r2, [r3, #4]
 801da3c:	683b      	ldr	r3, [r7, #0]
 801da3e:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 801da42:	683b      	ldr	r3, [r7, #0]
 801da44:	801a      	strh	r2, [r3, #0]
        rect->x2 = widget->extent.x2 - widget->extent.x1;
 801da46:	687b      	ldr	r3, [r7, #4]
 801da48:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 801da4c:	b29a      	uxth	r2, r3
 801da4e:	687b      	ldr	r3, [r7, #4]
 801da50:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 801da54:	b29b      	uxth	r3, r3
 801da56:	1ad3      	subs	r3, r2, r3
 801da58:	b29b      	uxth	r3, r3
 801da5a:	b21a      	sxth	r2, r3
 801da5c:	683b      	ldr	r3, [r7, #0]
 801da5e:	805a      	strh	r2, [r3, #2]
        rect->y2 = widget->extent.y2 - widget->extent.y1;
 801da60:	687b      	ldr	r3, [r7, #4]
 801da62:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 801da66:	b29a      	uxth	r2, r3
 801da68:	687b      	ldr	r3, [r7, #4]
 801da6a:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 801da6e:	b29b      	uxth	r3, r3
 801da70:	1ad3      	subs	r3, r2, r3
 801da72:	b29b      	uxth	r3, r3
 801da74:	b21a      	sxth	r2, r3
 801da76:	683b      	ldr	r3, [r7, #0]
 801da78:	80da      	strh	r2, [r3, #6]
    }
}
 801da7a:	bf00      	nop
 801da7c:	3708      	adds	r7, #8
 801da7e:	46bd      	mov	sp, r7
 801da80:	bd80      	pop	{r7, pc}
 801da82:	bf00      	nop
 801da84:	08025a54 	.word	0x08025a54
 801da88:	0802593c 	.word	0x0802593c

0801da8c <cogui_widget_get_extent>:

void cogui_widget_get_extent(cogui_widget_t *widget, cogui_rect_t *rect)
{
 801da8c:	b580      	push	{r7, lr}
 801da8e:	b082      	sub	sp, #8
 801da90:	af00      	add	r7, sp, #0
 801da92:	6078      	str	r0, [r7, #4]
 801da94:	6039      	str	r1, [r7, #0]
    COGUI_ASSERT(widget != Co_NULL);
 801da96:	687b      	ldr	r3, [r7, #4]
 801da98:	2b00      	cmp	r3, #0
 801da9a:	d105      	bne.n	801daa8 <cogui_widget_get_extent+0x1c>
 801da9c:	f240 1261 	movw	r2, #353	; 0x161
 801daa0:	490b      	ldr	r1, [pc, #44]	; (801dad0 <cogui_widget_get_extent+0x44>)
 801daa2:	480c      	ldr	r0, [pc, #48]	; (801dad4 <cogui_widget_get_extent+0x48>)
 801daa4:	f7ff fbc2 	bl	801d22c <cogui_assert_handler>
    COGUI_ASSERT(rect != Co_NULL);
 801daa8:	683b      	ldr	r3, [r7, #0]
 801daaa:	2b00      	cmp	r3, #0
 801daac:	d105      	bne.n	801daba <cogui_widget_get_extent+0x2e>
 801daae:	f44f 72b1 	mov.w	r2, #354	; 0x162
 801dab2:	4907      	ldr	r1, [pc, #28]	; (801dad0 <cogui_widget_get_extent+0x44>)
 801dab4:	4808      	ldr	r0, [pc, #32]	; (801dad8 <cogui_widget_get_extent+0x4c>)
 801dab6:	f7ff fbb9 	bl	801d22c <cogui_assert_handler>

    *rect = widget->extent;
 801daba:	683a      	ldr	r2, [r7, #0]
 801dabc:	687b      	ldr	r3, [r7, #4]
 801dabe:	3312      	adds	r3, #18
 801dac0:	6819      	ldr	r1, [r3, #0]
 801dac2:	685b      	ldr	r3, [r3, #4]
 801dac4:	6011      	str	r1, [r2, #0]
 801dac6:	6053      	str	r3, [r2, #4]
}
 801dac8:	bf00      	nop
 801daca:	3708      	adds	r7, #8
 801dacc:	46bd      	mov	sp, r7
 801dace:	bd80      	pop	{r7, pc}
 801dad0:	08025a6c 	.word	0x08025a6c
 801dad4:	0802593c 	.word	0x0802593c
 801dad8:	08025960 	.word	0x08025960

0801dadc <cogui_widget_set_rect>:

static void cogui_widget_set_rect(cogui_widget_t *widget, cogui_rect_t *rect)
{
 801dadc:	b480      	push	{r7}
 801dade:	b083      	sub	sp, #12
 801dae0:	af00      	add	r7, sp, #0
 801dae2:	6078      	str	r0, [r7, #4]
 801dae4:	6039      	str	r1, [r7, #0]
    if (widget == Co_NULL || rect == Co_NULL)
 801dae6:	687b      	ldr	r3, [r7, #4]
 801dae8:	2b00      	cmp	r3, #0
 801daea:	d024      	beq.n	801db36 <cogui_widget_set_rect+0x5a>
 801daec:	683b      	ldr	r3, [r7, #0]
 801daee:	2b00      	cmp	r3, #0
 801daf0:	d021      	beq.n	801db36 <cogui_widget_set_rect+0x5a>
	    return;

    widget->extent = *rect;
 801daf2:	687b      	ldr	r3, [r7, #4]
 801daf4:	683a      	ldr	r2, [r7, #0]
 801daf6:	3312      	adds	r3, #18
 801daf8:	6811      	ldr	r1, [r2, #0]
 801dafa:	6852      	ldr	r2, [r2, #4]
 801dafc:	6019      	str	r1, [r3, #0]
 801dafe:	605a      	str	r2, [r3, #4]

    widget->min_width  = widget->extent.x2 - widget->extent.x1;
 801db00:	687b      	ldr	r3, [r7, #4]
 801db02:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 801db06:	b29a      	uxth	r2, r3
 801db08:	687b      	ldr	r3, [r7, #4]
 801db0a:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 801db0e:	b29b      	uxth	r3, r3
 801db10:	1ad3      	subs	r3, r2, r3
 801db12:	b29b      	uxth	r3, r3
 801db14:	b21a      	sxth	r2, r3
 801db16:	687b      	ldr	r3, [r7, #4]
 801db18:	845a      	strh	r2, [r3, #34]	; 0x22
    widget->min_height = widget->extent.y2 - widget->extent.y1;
 801db1a:	687b      	ldr	r3, [r7, #4]
 801db1c:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 801db20:	b29a      	uxth	r2, r3
 801db22:	687b      	ldr	r3, [r7, #4]
 801db24:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 801db28:	b29b      	uxth	r3, r3
 801db2a:	1ad3      	subs	r3, r2, r3
 801db2c:	b29b      	uxth	r3, r3
 801db2e:	b21a      	sxth	r2, r3
 801db30:	687b      	ldr	r3, [r7, #4]
 801db32:	849a      	strh	r2, [r3, #36]	; 0x24
 801db34:	e000      	b.n	801db38 <cogui_widget_set_rect+0x5c>
	    return;
 801db36:	bf00      	nop
}
 801db38:	370c      	adds	r7, #12
 801db3a:	46bd      	mov	sp, r7
 801db3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801db40:	4770      	bx	lr

0801db42 <cogui_widget_set_rectangle>:

void cogui_widget_set_rectangle(cogui_widget_t *widget, S32 x, S32 y, S32 width, S32 height)
{
 801db42:	b580      	push	{r7, lr}
 801db44:	b086      	sub	sp, #24
 801db46:	af00      	add	r7, sp, #0
 801db48:	60f8      	str	r0, [r7, #12]
 801db4a:	60b9      	str	r1, [r7, #8]
 801db4c:	607a      	str	r2, [r7, #4]
 801db4e:	603b      	str	r3, [r7, #0]
    if (!(widget->top->style & COGUI_WINDOW_STYLE_NO_TITLE) && !(widget->flag & COGUI_WIDGET_FLAG_TITLE) && !(widget->flag & COGUI_WIDGET_FLAG_HEADER) ) {
 801db50:	68fb      	ldr	r3, [r7, #12]
 801db52:	685b      	ldr	r3, [r3, #4]
 801db54:	895b      	ldrh	r3, [r3, #10]
 801db56:	f003 0301 	and.w	r3, r3, #1
 801db5a:	2b00      	cmp	r3, #0
 801db5c:	d110      	bne.n	801db80 <cogui_widget_set_rectangle+0x3e>
 801db5e:	68fb      	ldr	r3, [r7, #12]
 801db60:	689b      	ldr	r3, [r3, #8]
 801db62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801db66:	2b00      	cmp	r3, #0
 801db68:	d10a      	bne.n	801db80 <cogui_widget_set_rectangle+0x3e>
 801db6a:	68fb      	ldr	r3, [r7, #12]
 801db6c:	689b      	ldr	r3, [r3, #8]
 801db6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801db72:	2b00      	cmp	r3, #0
 801db74:	d104      	bne.n	801db80 <cogui_widget_set_rectangle+0x3e>
        if (y <= COGUI_WINTITLE_HEIGHT)
 801db76:	687b      	ldr	r3, [r7, #4]
 801db78:	2b28      	cmp	r3, #40	; 0x28
 801db7a:	dc01      	bgt.n	801db80 <cogui_widget_set_rectangle+0x3e>
            y = COGUI_WINTITLE_HEIGHT+1;
 801db7c:	2329      	movs	r3, #41	; 0x29
 801db7e:	607b      	str	r3, [r7, #4]
    }

    cogui_rect_t rect;

    COGUI_SET_RECT(&rect, x, y, width, height);
 801db80:	68bb      	ldr	r3, [r7, #8]
 801db82:	b21b      	sxth	r3, r3
 801db84:	823b      	strh	r3, [r7, #16]
 801db86:	68bb      	ldr	r3, [r7, #8]
 801db88:	b29a      	uxth	r2, r3
 801db8a:	683b      	ldr	r3, [r7, #0]
 801db8c:	b29b      	uxth	r3, r3
 801db8e:	4413      	add	r3, r2
 801db90:	b29b      	uxth	r3, r3
 801db92:	b21b      	sxth	r3, r3
 801db94:	827b      	strh	r3, [r7, #18]
 801db96:	687b      	ldr	r3, [r7, #4]
 801db98:	b21b      	sxth	r3, r3
 801db9a:	82bb      	strh	r3, [r7, #20]
 801db9c:	687b      	ldr	r3, [r7, #4]
 801db9e:	b29a      	uxth	r2, r3
 801dba0:	6a3b      	ldr	r3, [r7, #32]
 801dba2:	b29b      	uxth	r3, r3
 801dba4:	4413      	add	r3, r2
 801dba6:	b29b      	uxth	r3, r3
 801dba8:	b21b      	sxth	r3, r3
 801dbaa:	82fb      	strh	r3, [r7, #22]
    cogui_widget_set_rect(widget, &rect);
 801dbac:	f107 0310 	add.w	r3, r7, #16
 801dbb0:	4619      	mov	r1, r3
 801dbb2:	68f8      	ldr	r0, [r7, #12]
 801dbb4:	f7ff ff92 	bl	801dadc <cogui_widget_set_rect>

    COGUI_SET_RECT(&widget->inner_extent, 0, 0, width, height);
 801dbb8:	68fb      	ldr	r3, [r7, #12]
 801dbba:	2200      	movs	r2, #0
 801dbbc:	835a      	strh	r2, [r3, #26]
 801dbbe:	683b      	ldr	r3, [r7, #0]
 801dbc0:	b21a      	sxth	r2, r3
 801dbc2:	68fb      	ldr	r3, [r7, #12]
 801dbc4:	839a      	strh	r2, [r3, #28]
 801dbc6:	68fb      	ldr	r3, [r7, #12]
 801dbc8:	2200      	movs	r2, #0
 801dbca:	83da      	strh	r2, [r3, #30]
 801dbcc:	6a3b      	ldr	r3, [r7, #32]
 801dbce:	b21a      	sxth	r2, r3
 801dbd0:	68fb      	ldr	r3, [r7, #12]
 801dbd2:	841a      	strh	r2, [r3, #32]
}
 801dbd4:	bf00      	nop
 801dbd6:	3718      	adds	r7, #24
 801dbd8:	46bd      	mov	sp, r7
 801dbda:	bd80      	pop	{r7, pc}

0801dbdc <cogui_widget_set_minsize>:

void cogui_widget_set_minsize(cogui_widget_t *widget, S32 width, S32 height)
{
 801dbdc:	b580      	push	{r7, lr}
 801dbde:	b084      	sub	sp, #16
 801dbe0:	af00      	add	r7, sp, #0
 801dbe2:	60f8      	str	r0, [r7, #12]
 801dbe4:	60b9      	str	r1, [r7, #8]
 801dbe6:	607a      	str	r2, [r7, #4]
    COGUI_ASSERT(widget != Co_NULL);
 801dbe8:	68fb      	ldr	r3, [r7, #12]
 801dbea:	2b00      	cmp	r3, #0
 801dbec:	d105      	bne.n	801dbfa <cogui_widget_set_minsize+0x1e>
 801dbee:	f240 1283 	movw	r2, #387	; 0x183
 801dbf2:	4908      	ldr	r1, [pc, #32]	; (801dc14 <cogui_widget_set_minsize+0x38>)
 801dbf4:	4808      	ldr	r0, [pc, #32]	; (801dc18 <cogui_widget_set_minsize+0x3c>)
 801dbf6:	f7ff fb19 	bl	801d22c <cogui_assert_handler>

    widget->min_width = width;
 801dbfa:	68bb      	ldr	r3, [r7, #8]
 801dbfc:	b21a      	sxth	r2, r3
 801dbfe:	68fb      	ldr	r3, [r7, #12]
 801dc00:	845a      	strh	r2, [r3, #34]	; 0x22
    widget->min_height = height;
 801dc02:	687b      	ldr	r3, [r7, #4]
 801dc04:	b21a      	sxth	r2, r3
 801dc06:	68fb      	ldr	r3, [r7, #12]
 801dc08:	849a      	strh	r2, [r3, #36]	; 0x24
}
 801dc0a:	bf00      	nop
 801dc0c:	3710      	adds	r7, #16
 801dc0e:	46bd      	mov	sp, r7
 801dc10:	bd80      	pop	{r7, pc}
 801dc12:	bf00      	nop
 801dc14:	08025a84 	.word	0x08025a84
 801dc18:	0802593c 	.word	0x0802593c

0801dc1c <cogui_widget_set_minwidth>:

void cogui_widget_set_minwidth(cogui_widget_t *widget, S32 width)
{
 801dc1c:	b580      	push	{r7, lr}
 801dc1e:	b082      	sub	sp, #8
 801dc20:	af00      	add	r7, sp, #0
 801dc22:	6078      	str	r0, [r7, #4]
 801dc24:	6039      	str	r1, [r7, #0]
    COGUI_ASSERT(widget != Co_NULL);
 801dc26:	687b      	ldr	r3, [r7, #4]
 801dc28:	2b00      	cmp	r3, #0
 801dc2a:	d105      	bne.n	801dc38 <cogui_widget_set_minwidth+0x1c>
 801dc2c:	f240 128b 	movw	r2, #395	; 0x18b
 801dc30:	4905      	ldr	r1, [pc, #20]	; (801dc48 <cogui_widget_set_minwidth+0x2c>)
 801dc32:	4806      	ldr	r0, [pc, #24]	; (801dc4c <cogui_widget_set_minwidth+0x30>)
 801dc34:	f7ff fafa 	bl	801d22c <cogui_assert_handler>

    widget->min_width = width;
 801dc38:	683b      	ldr	r3, [r7, #0]
 801dc3a:	b21a      	sxth	r2, r3
 801dc3c:	687b      	ldr	r3, [r7, #4]
 801dc3e:	845a      	strh	r2, [r3, #34]	; 0x22
}
 801dc40:	bf00      	nop
 801dc42:	3708      	adds	r7, #8
 801dc44:	46bd      	mov	sp, r7
 801dc46:	bd80      	pop	{r7, pc}
 801dc48:	08025aa0 	.word	0x08025aa0
 801dc4c:	0802593c 	.word	0x0802593c

0801dc50 <cogui_widget_set_mingheight>:

void cogui_widget_set_mingheight(cogui_widget_t *widget, S32 height)
{
 801dc50:	b580      	push	{r7, lr}
 801dc52:	b082      	sub	sp, #8
 801dc54:	af00      	add	r7, sp, #0
 801dc56:	6078      	str	r0, [r7, #4]
 801dc58:	6039      	str	r1, [r7, #0]
    COGUI_ASSERT(widget != Co_NULL);
 801dc5a:	687b      	ldr	r3, [r7, #4]
 801dc5c:	2b00      	cmp	r3, #0
 801dc5e:	d105      	bne.n	801dc6c <cogui_widget_set_mingheight+0x1c>
 801dc60:	f44f 72c9 	mov.w	r2, #402	; 0x192
 801dc64:	4905      	ldr	r1, [pc, #20]	; (801dc7c <cogui_widget_set_mingheight+0x2c>)
 801dc66:	4806      	ldr	r0, [pc, #24]	; (801dc80 <cogui_widget_set_mingheight+0x30>)
 801dc68:	f7ff fae0 	bl	801d22c <cogui_assert_handler>

    widget->min_height = height;
 801dc6c:	683b      	ldr	r3, [r7, #0]
 801dc6e:	b21a      	sxth	r2, r3
 801dc70:	687b      	ldr	r3, [r7, #4]
 801dc72:	849a      	strh	r2, [r3, #36]	; 0x24
}
 801dc74:	bf00      	nop
 801dc76:	3708      	adds	r7, #8
 801dc78:	46bd      	mov	sp, r7
 801dc7a:	bd80      	pop	{r7, pc}
 801dc7c:	08025abc 	.word	0x08025abc
 801dc80:	0802593c 	.word	0x0802593c

0801dc84 <cogui_widget_enable_border>:

void cogui_widget_enable_border(cogui_widget_t *widget)
{
 801dc84:	b580      	push	{r7, lr}
 801dc86:	b082      	sub	sp, #8
 801dc88:	af00      	add	r7, sp, #0
 801dc8a:	6078      	str	r0, [r7, #4]
    COGUI_ASSERT(widget != Co_NULL);
 801dc8c:	687b      	ldr	r3, [r7, #4]
 801dc8e:	2b00      	cmp	r3, #0
 801dc90:	d105      	bne.n	801dc9e <cogui_widget_enable_border+0x1a>
 801dc92:	f240 1299 	movw	r2, #409	; 0x199
 801dc96:	4909      	ldr	r1, [pc, #36]	; (801dcbc <cogui_widget_enable_border+0x38>)
 801dc98:	4809      	ldr	r0, [pc, #36]	; (801dcc0 <cogui_widget_enable_border+0x3c>)
 801dc9a:	f7ff fac7 	bl	801d22c <cogui_assert_handler>

    widget->flag |= COGUI_WIDGET_BORDER;
 801dc9e:	687b      	ldr	r3, [r7, #4]
 801dca0:	689b      	ldr	r3, [r3, #8]
 801dca2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 801dca6:	687b      	ldr	r3, [r7, #4]
 801dca8:	609a      	str	r2, [r3, #8]

    cogui_screen_refresh(widget->top);
 801dcaa:	687b      	ldr	r3, [r7, #4]
 801dcac:	685b      	ldr	r3, [r3, #4]
 801dcae:	4618      	mov	r0, r3
 801dcb0:	f7ff fd2b 	bl	801d70a <cogui_screen_refresh>
}
 801dcb4:	bf00      	nop
 801dcb6:	3708      	adds	r7, #8
 801dcb8:	46bd      	mov	sp, r7
 801dcba:	bd80      	pop	{r7, pc}
 801dcbc:	08025ad8 	.word	0x08025ad8
 801dcc0:	0802593c 	.word	0x0802593c

0801dcc4 <cogui_widget_set_font>:

void cogui_widget_set_font(cogui_widget_t* widget, cogui_font_t *font)
{
 801dcc4:	b580      	push	{r7, lr}
 801dcc6:	b082      	sub	sp, #8
 801dcc8:	af00      	add	r7, sp, #0
 801dcca:	6078      	str	r0, [r7, #4]
 801dccc:	6039      	str	r1, [r7, #0]
    COGUI_ASSERT(widget != Co_NULL);
 801dcce:	687b      	ldr	r3, [r7, #4]
 801dcd0:	2b00      	cmp	r3, #0
 801dcd2:	d105      	bne.n	801dce0 <cogui_widget_set_font+0x1c>
 801dcd4:	f44f 72d1 	mov.w	r2, #418	; 0x1a2
 801dcd8:	4909      	ldr	r1, [pc, #36]	; (801dd00 <cogui_widget_set_font+0x3c>)
 801dcda:	480a      	ldr	r0, [pc, #40]	; (801dd04 <cogui_widget_set_font+0x40>)
 801dcdc:	f7ff faa6 	bl	801d22c <cogui_assert_handler>
    COGUI_ASSERT(font != Co_NULL);
 801dce0:	683b      	ldr	r3, [r7, #0]
 801dce2:	2b00      	cmp	r3, #0
 801dce4:	d105      	bne.n	801dcf2 <cogui_widget_set_font+0x2e>
 801dce6:	f240 12a3 	movw	r2, #419	; 0x1a3
 801dcea:	4905      	ldr	r1, [pc, #20]	; (801dd00 <cogui_widget_set_font+0x3c>)
 801dcec:	4806      	ldr	r0, [pc, #24]	; (801dd08 <cogui_widget_set_font+0x44>)
 801dcee:	f7ff fa9d 	bl	801d22c <cogui_assert_handler>

    widget->gc.font = font;
 801dcf2:	687b      	ldr	r3, [r7, #4]
 801dcf4:	683a      	ldr	r2, [r7, #0]
 801dcf6:	641a      	str	r2, [r3, #64]	; 0x40
}
 801dcf8:	bf00      	nop
 801dcfa:	3708      	adds	r7, #8
 801dcfc:	46bd      	mov	sp, r7
 801dcfe:	bd80      	pop	{r7, pc}
 801dd00:	08025af4 	.word	0x08025af4
 801dd04:	0802593c 	.word	0x0802593c
 801dd08:	08025970 	.word	0x08025970

0801dd0c <cogui_widget_set_text_align>:

void cogui_widget_set_text_align(cogui_widget_t *widget, co_uint16_t style)
{
 801dd0c:	b580      	push	{r7, lr}
 801dd0e:	b082      	sub	sp, #8
 801dd10:	af00      	add	r7, sp, #0
 801dd12:	6078      	str	r0, [r7, #4]
 801dd14:	460b      	mov	r3, r1
 801dd16:	807b      	strh	r3, [r7, #2]
    COGUI_ASSERT(widget != Co_NULL);
 801dd18:	687b      	ldr	r3, [r7, #4]
 801dd1a:	2b00      	cmp	r3, #0
 801dd1c:	d105      	bne.n	801dd2a <cogui_widget_set_text_align+0x1e>
 801dd1e:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 801dd22:	4906      	ldr	r1, [pc, #24]	; (801dd3c <cogui_widget_set_text_align+0x30>)
 801dd24:	4806      	ldr	r0, [pc, #24]	; (801dd40 <cogui_widget_set_text_align+0x34>)
 801dd26:	f7ff fa81 	bl	801d22c <cogui_assert_handler>

    widget->gc.text_align = style;
 801dd2a:	687b      	ldr	r3, [r7, #4]
 801dd2c:	887a      	ldrh	r2, [r7, #2]
 801dd2e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
}
 801dd32:	bf00      	nop
 801dd34:	3708      	adds	r7, #8
 801dd36:	46bd      	mov	sp, r7
 801dd38:	bd80      	pop	{r7, pc}
 801dd3a:	bf00      	nop
 801dd3c:	08025b0c 	.word	0x08025b0c
 801dd40:	0802593c 	.word	0x0802593c

0801dd44 <cogui_widget_set_text>:

void cogui_widget_set_text(cogui_widget_t *widget, const char *text)
{
 801dd44:	b580      	push	{r7, lr}
 801dd46:	b082      	sub	sp, #8
 801dd48:	af00      	add	r7, sp, #0
 801dd4a:	6078      	str	r0, [r7, #4]
 801dd4c:	6039      	str	r1, [r7, #0]
    COGUI_ASSERT(widget != Co_NULL);
 801dd4e:	687b      	ldr	r3, [r7, #4]
 801dd50:	2b00      	cmp	r3, #0
 801dd52:	d105      	bne.n	801dd60 <cogui_widget_set_text+0x1c>
 801dd54:	f240 12b1 	movw	r2, #433	; 0x1b1
 801dd58:	4909      	ldr	r1, [pc, #36]	; (801dd80 <cogui_widget_set_text+0x3c>)
 801dd5a:	480a      	ldr	r0, [pc, #40]	; (801dd84 <cogui_widget_set_text+0x40>)
 801dd5c:	f7ff fa66 	bl	801d22c <cogui_assert_handler>

    widget->flag |= COGUI_WIDGET_FLAG_HAS_TEXT;
 801dd60:	687b      	ldr	r3, [r7, #4]
 801dd62:	689b      	ldr	r3, [r3, #8]
 801dd64:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 801dd68:	687b      	ldr	r3, [r7, #4]
 801dd6a:	609a      	str	r2, [r3, #8]
    
    widget->text = cogui_strdup(text);
 801dd6c:	6838      	ldr	r0, [r7, #0]
 801dd6e:	f7fe ff6d 	bl	801cc4c <cogui_strdup>
 801dd72:	4602      	mov	r2, r0
 801dd74:	687b      	ldr	r3, [r7, #4]
 801dd76:	651a      	str	r2, [r3, #80]	; 0x50
}
 801dd78:	bf00      	nop
 801dd7a:	3708      	adds	r7, #8
 801dd7c:	46bd      	mov	sp, r7
 801dd7e:	bd80      	pop	{r7, pc}
 801dd80:	08025b28 	.word	0x08025b28
 801dd84:	0802593c 	.word	0x0802593c

0801dd88 <cogui_widget_append_text>:

void cogui_widget_append_text(cogui_widget_t *widget, const char *text)
{
 801dd88:	b5f0      	push	{r4, r5, r6, r7, lr}
 801dd8a:	b087      	sub	sp, #28
 801dd8c:	af00      	add	r7, sp, #0
 801dd8e:	6078      	str	r0, [r7, #4]
 801dd90:	6039      	str	r1, [r7, #0]
    COGUI_ASSERT(widget != Co_NULL);
 801dd92:	687b      	ldr	r3, [r7, #4]
 801dd94:	2b00      	cmp	r3, #0
 801dd96:	d105      	bne.n	801dda4 <cogui_widget_append_text+0x1c>
 801dd98:	f44f 72dd 	mov.w	r2, #442	; 0x1ba
 801dd9c:	492b      	ldr	r1, [pc, #172]	; (801de4c <cogui_widget_append_text+0xc4>)
 801dd9e:	482c      	ldr	r0, [pc, #176]	; (801de50 <cogui_widget_append_text+0xc8>)
 801dda0:	f7ff fa44 	bl	801d22c <cogui_assert_handler>
    
    /* if this is first text, just call set_text to do finish work */
    if (!(widget->flag & COGUI_WIDGET_FLAG_HAS_TEXT)) {
 801dda4:	687b      	ldr	r3, [r7, #4]
 801dda6:	689b      	ldr	r3, [r3, #8]
 801dda8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801ddac:	2b00      	cmp	r3, #0
 801ddae:	d104      	bne.n	801ddba <cogui_widget_append_text+0x32>
        cogui_widget_set_text(widget, text);
 801ddb0:	6839      	ldr	r1, [r7, #0]
 801ddb2:	6878      	ldr	r0, [r7, #4]
 801ddb4:	f7ff ffc6 	bl	801dd44 <cogui_widget_set_text>
        return;
 801ddb8:	e045      	b.n	801de46 <cogui_widget_append_text+0xbe>
    }
    
    co_uint64_t len = cogui_strlen(text) + cogui_strlen(widget->text) + 1;
 801ddba:	6838      	ldr	r0, [r7, #0]
 801ddbc:	f7fe ff2d 	bl	801cc1a <cogui_strlen>
 801ddc0:	4605      	mov	r5, r0
 801ddc2:	460e      	mov	r6, r1
 801ddc4:	687b      	ldr	r3, [r7, #4]
 801ddc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801ddc8:	4618      	mov	r0, r3
 801ddca:	f7fe ff26 	bl	801cc1a <cogui_strlen>
 801ddce:	4603      	mov	r3, r0
 801ddd0:	460c      	mov	r4, r1
 801ddd2:	1959      	adds	r1, r3, r5
 801ddd4:	eb44 0206 	adc.w	r2, r4, r6
 801ddd8:	1c4b      	adds	r3, r1, #1
 801ddda:	f142 0400 	adc.w	r4, r2, #0
 801ddde:	e9c7 3404 	strd	r3, r4, [r7, #16]
    char * new_text = (char *)cogui_malloc(len);
 801dde2:	693b      	ldr	r3, [r7, #16]
 801dde4:	4618      	mov	r0, r3
 801dde6:	f7fe fd21 	bl	801c82c <cogui_malloc>
 801ddea:	60f8      	str	r0, [r7, #12]

    /* create new string and put 'text' on original text's end */
    cogui_memcpy(new_text, widget->text, cogui_strlen(widget->text));
 801ddec:	687b      	ldr	r3, [r7, #4]
 801ddee:	6d1c      	ldr	r4, [r3, #80]	; 0x50
 801ddf0:	687b      	ldr	r3, [r7, #4]
 801ddf2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801ddf4:	4618      	mov	r0, r3
 801ddf6:	f7fe ff10 	bl	801cc1a <cogui_strlen>
 801ddfa:	4602      	mov	r2, r0
 801ddfc:	460b      	mov	r3, r1
 801ddfe:	4621      	mov	r1, r4
 801de00:	68f8      	ldr	r0, [r7, #12]
 801de02:	f7fe fe35 	bl	801ca70 <cogui_memcpy>
    cogui_memcpy(new_text+cogui_strlen(widget->text), text, cogui_strlen(text)+1);
 801de06:	687b      	ldr	r3, [r7, #4]
 801de08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801de0a:	4618      	mov	r0, r3
 801de0c:	f7fe ff05 	bl	801cc1a <cogui_strlen>
 801de10:	4603      	mov	r3, r0
 801de12:	460c      	mov	r4, r1
 801de14:	461a      	mov	r2, r3
 801de16:	68fb      	ldr	r3, [r7, #12]
 801de18:	189d      	adds	r5, r3, r2
 801de1a:	6838      	ldr	r0, [r7, #0]
 801de1c:	f7fe fefd 	bl	801cc1a <cogui_strlen>
 801de20:	460a      	mov	r2, r1
 801de22:	4601      	mov	r1, r0
 801de24:	1c4b      	adds	r3, r1, #1
 801de26:	f142 0400 	adc.w	r4, r2, #0
 801de2a:	461a      	mov	r2, r3
 801de2c:	4623      	mov	r3, r4
 801de2e:	6839      	ldr	r1, [r7, #0]
 801de30:	4628      	mov	r0, r5
 801de32:	f7fe fe1d 	bl	801ca70 <cogui_memcpy>

    /* after copy original text, free it */
    cogui_free(widget->text);
 801de36:	687b      	ldr	r3, [r7, #4]
 801de38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801de3a:	4618      	mov	r0, r3
 801de3c:	f7fe fd0e 	bl	801c85c <cogui_free>

    widget->text = new_text;
 801de40:	687b      	ldr	r3, [r7, #4]
 801de42:	68fa      	ldr	r2, [r7, #12]
 801de44:	651a      	str	r2, [r3, #80]	; 0x50
}
 801de46:	371c      	adds	r7, #28
 801de48:	46bd      	mov	sp, r7
 801de4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801de4c:	08025b40 	.word	0x08025b40
 801de50:	0802593c 	.word	0x0802593c

0801de54 <cogui_widget_clear_text>:

void cogui_widget_clear_text(cogui_widget_t *widget)
{
 801de54:	b580      	push	{r7, lr}
 801de56:	b082      	sub	sp, #8
 801de58:	af00      	add	r7, sp, #0
 801de5a:	6078      	str	r0, [r7, #4]
    widget->flag &= ~COGUI_WIDGET_FLAG_HAS_TEXT;
 801de5c:	687b      	ldr	r3, [r7, #4]
 801de5e:	689b      	ldr	r3, [r3, #8]
 801de60:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 801de64:	687b      	ldr	r3, [r7, #4]
 801de66:	609a      	str	r2, [r3, #8]

    /* free text pointer if needed */
    if (widget->text) {
 801de68:	687b      	ldr	r3, [r7, #4]
 801de6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801de6c:	2b00      	cmp	r3, #0
 801de6e:	d004      	beq.n	801de7a <cogui_widget_clear_text+0x26>
        cogui_free(widget->text);
 801de70:	687b      	ldr	r3, [r7, #4]
 801de72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801de74:	4618      	mov	r0, r3
 801de76:	f7fe fcf1 	bl	801c85c <cogui_free>
    }
}
 801de7a:	bf00      	nop
 801de7c:	3708      	adds	r7, #8
 801de7e:	46bd      	mov	sp, r7
 801de80:	bd80      	pop	{r7, pc}

0801de82 <_cogui_widget_move>:

static void _cogui_widget_move(cogui_widget_t *widget, S32 dx, S32 dy)
{
 801de82:	b580      	push	{r7, lr}
 801de84:	b084      	sub	sp, #16
 801de86:	af00      	add	r7, sp, #0
 801de88:	60f8      	str	r0, [r7, #12]
 801de8a:	60b9      	str	r1, [r7, #8]
 801de8c:	607a      	str	r2, [r7, #4]
    widget->extent.x1 += dx;
 801de8e:	68fb      	ldr	r3, [r7, #12]
 801de90:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 801de94:	b29a      	uxth	r2, r3
 801de96:	68bb      	ldr	r3, [r7, #8]
 801de98:	b29b      	uxth	r3, r3
 801de9a:	4413      	add	r3, r2
 801de9c:	b29b      	uxth	r3, r3
 801de9e:	b21a      	sxth	r2, r3
 801dea0:	68fb      	ldr	r3, [r7, #12]
 801dea2:	825a      	strh	r2, [r3, #18]
    widget->extent.x2 += dx;
 801dea4:	68fb      	ldr	r3, [r7, #12]
 801dea6:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 801deaa:	b29a      	uxth	r2, r3
 801deac:	68bb      	ldr	r3, [r7, #8]
 801deae:	b29b      	uxth	r3, r3
 801deb0:	4413      	add	r3, r2
 801deb2:	b29b      	uxth	r3, r3
 801deb4:	b21a      	sxth	r2, r3
 801deb6:	68fb      	ldr	r3, [r7, #12]
 801deb8:	829a      	strh	r2, [r3, #20]

    widget->extent.y1 += dy;
 801deba:	68fb      	ldr	r3, [r7, #12]
 801debc:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 801dec0:	b29a      	uxth	r2, r3
 801dec2:	687b      	ldr	r3, [r7, #4]
 801dec4:	b29b      	uxth	r3, r3
 801dec6:	4413      	add	r3, r2
 801dec8:	b29b      	uxth	r3, r3
 801deca:	b21a      	sxth	r2, r3
 801decc:	68fb      	ldr	r3, [r7, #12]
 801dece:	82da      	strh	r2, [r3, #22]
    widget->extent.y2 += dy;
 801ded0:	68fb      	ldr	r3, [r7, #12]
 801ded2:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 801ded6:	b29a      	uxth	r2, r3
 801ded8:	687b      	ldr	r3, [r7, #4]
 801deda:	b29b      	uxth	r3, r3
 801dedc:	4413      	add	r3, r2
 801dede:	b29b      	uxth	r3, r3
 801dee0:	b21a      	sxth	r2, r3
 801dee2:	68fb      	ldr	r3, [r7, #12]
 801dee4:	831a      	strh	r2, [r3, #24]

	cogui_screen_refresh(widget->top);
 801dee6:	68fb      	ldr	r3, [r7, #12]
 801dee8:	685b      	ldr	r3, [r3, #4]
 801deea:	4618      	mov	r0, r3
 801deec:	f7ff fc0d 	bl	801d70a <cogui_screen_refresh>
}
 801def0:	bf00      	nop
 801def2:	3710      	adds	r7, #16
 801def4:	46bd      	mov	sp, r7
 801def6:	bd80      	pop	{r7, pc}

0801def8 <cogui_widget_move_to_logic>:

void cogui_widget_move_to_logic(cogui_widget_t *widget, S32 dx, S32 dy)
{
 801def8:	b580      	push	{r7, lr}
 801defa:	b084      	sub	sp, #16
 801defc:	af00      	add	r7, sp, #0
 801defe:	60f8      	str	r0, [r7, #12]
 801df00:	60b9      	str	r1, [r7, #8]
 801df02:	607a      	str	r2, [r7, #4]
    if (widget == Co_NULL) {
 801df04:	68fb      	ldr	r3, [r7, #12]
 801df06:	2b00      	cmp	r3, #0
 801df08:	d005      	beq.n	801df16 <cogui_widget_move_to_logic+0x1e>
        return;
    }
	
	_cogui_widget_move(widget, dx, dy);
 801df0a:	687a      	ldr	r2, [r7, #4]
 801df0c:	68b9      	ldr	r1, [r7, #8]
 801df0e:	68f8      	ldr	r0, [r7, #12]
 801df10:	f7ff ffb7 	bl	801de82 <_cogui_widget_move>
 801df14:	e000      	b.n	801df18 <cogui_widget_move_to_logic+0x20>
        return;
 801df16:	bf00      	nop
}
 801df18:	3710      	adds	r7, #16
 801df1a:	46bd      	mov	sp, r7
 801df1c:	bd80      	pop	{r7, pc}

0801df1e <cogui_widget_point_l2p>:

void cogui_widget_point_l2p(cogui_widget_t *widget, cogui_point_t *point)
{
 801df1e:	b580      	push	{r7, lr}
 801df20:	b082      	sub	sp, #8
 801df22:	af00      	add	r7, sp, #0
 801df24:	6078      	str	r0, [r7, #4]
 801df26:	6039      	str	r1, [r7, #0]
    COGUI_ASSERT(widget != Co_NULL);
 801df28:	687b      	ldr	r3, [r7, #4]
 801df2a:	2b00      	cmp	r3, #0
 801df2c:	d105      	bne.n	801df3a <cogui_widget_point_l2p+0x1c>
 801df2e:	f240 12ef 	movw	r2, #495	; 0x1ef
 801df32:	4912      	ldr	r1, [pc, #72]	; (801df7c <cogui_widget_point_l2p+0x5e>)
 801df34:	4812      	ldr	r0, [pc, #72]	; (801df80 <cogui_widget_point_l2p+0x62>)
 801df36:	f7ff f979 	bl	801d22c <cogui_assert_handler>

    if (point != Co_NULL) {
 801df3a:	683b      	ldr	r3, [r7, #0]
 801df3c:	2b00      	cmp	r3, #0
 801df3e:	d019      	beq.n	801df74 <cogui_widget_point_l2p+0x56>
        point->x += widget->extent.x1;
 801df40:	683b      	ldr	r3, [r7, #0]
 801df42:	f9b3 3000 	ldrsh.w	r3, [r3]
 801df46:	b29a      	uxth	r2, r3
 801df48:	687b      	ldr	r3, [r7, #4]
 801df4a:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 801df4e:	b29b      	uxth	r3, r3
 801df50:	4413      	add	r3, r2
 801df52:	b29b      	uxth	r3, r3
 801df54:	b21a      	sxth	r2, r3
 801df56:	683b      	ldr	r3, [r7, #0]
 801df58:	801a      	strh	r2, [r3, #0]
        point->y += widget->extent.y1;
 801df5a:	683b      	ldr	r3, [r7, #0]
 801df5c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801df60:	b29a      	uxth	r2, r3
 801df62:	687b      	ldr	r3, [r7, #4]
 801df64:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 801df68:	b29b      	uxth	r3, r3
 801df6a:	4413      	add	r3, r2
 801df6c:	b29b      	uxth	r3, r3
 801df6e:	b21a      	sxth	r2, r3
 801df70:	683b      	ldr	r3, [r7, #0]
 801df72:	805a      	strh	r2, [r3, #2]
    }
}
 801df74:	bf00      	nop
 801df76:	3708      	adds	r7, #8
 801df78:	46bd      	mov	sp, r7
 801df7a:	bd80      	pop	{r7, pc}
 801df7c:	08025b5c 	.word	0x08025b5c
 801df80:	0802593c 	.word	0x0802593c

0801df84 <cogui_widget_rect_l2p>:

void cogui_widget_rect_l2p(cogui_widget_t *widget, cogui_rect_t *rect)
{
 801df84:	b580      	push	{r7, lr}
 801df86:	b082      	sub	sp, #8
 801df88:	af00      	add	r7, sp, #0
 801df8a:	6078      	str	r0, [r7, #4]
 801df8c:	6039      	str	r1, [r7, #0]
    COGUI_ASSERT(widget != Co_NULL);
 801df8e:	687b      	ldr	r3, [r7, #4]
 801df90:	2b00      	cmp	r3, #0
 801df92:	d105      	bne.n	801dfa0 <cogui_widget_rect_l2p+0x1c>
 801df94:	f240 12f9 	movw	r2, #505	; 0x1f9
 801df98:	491f      	ldr	r1, [pc, #124]	; (801e018 <cogui_widget_rect_l2p+0x94>)
 801df9a:	4820      	ldr	r0, [pc, #128]	; (801e01c <cogui_widget_rect_l2p+0x98>)
 801df9c:	f7ff f946 	bl	801d22c <cogui_assert_handler>

    if (rect != Co_NULL) {
 801dfa0:	683b      	ldr	r3, [r7, #0]
 801dfa2:	2b00      	cmp	r3, #0
 801dfa4:	d033      	beq.n	801e00e <cogui_widget_rect_l2p+0x8a>
        rect->x1 += widget->extent.x1;
 801dfa6:	683b      	ldr	r3, [r7, #0]
 801dfa8:	f9b3 3000 	ldrsh.w	r3, [r3]
 801dfac:	b29a      	uxth	r2, r3
 801dfae:	687b      	ldr	r3, [r7, #4]
 801dfb0:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 801dfb4:	b29b      	uxth	r3, r3
 801dfb6:	4413      	add	r3, r2
 801dfb8:	b29b      	uxth	r3, r3
 801dfba:	b21a      	sxth	r2, r3
 801dfbc:	683b      	ldr	r3, [r7, #0]
 801dfbe:	801a      	strh	r2, [r3, #0]
        rect->x2 += widget->extent.x1;
 801dfc0:	683b      	ldr	r3, [r7, #0]
 801dfc2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801dfc6:	b29a      	uxth	r2, r3
 801dfc8:	687b      	ldr	r3, [r7, #4]
 801dfca:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 801dfce:	b29b      	uxth	r3, r3
 801dfd0:	4413      	add	r3, r2
 801dfd2:	b29b      	uxth	r3, r3
 801dfd4:	b21a      	sxth	r2, r3
 801dfd6:	683b      	ldr	r3, [r7, #0]
 801dfd8:	805a      	strh	r2, [r3, #2]

        rect->y1 += widget->extent.y1;
 801dfda:	683b      	ldr	r3, [r7, #0]
 801dfdc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801dfe0:	b29a      	uxth	r2, r3
 801dfe2:	687b      	ldr	r3, [r7, #4]
 801dfe4:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 801dfe8:	b29b      	uxth	r3, r3
 801dfea:	4413      	add	r3, r2
 801dfec:	b29b      	uxth	r3, r3
 801dfee:	b21a      	sxth	r2, r3
 801dff0:	683b      	ldr	r3, [r7, #0]
 801dff2:	809a      	strh	r2, [r3, #4]
        rect->y2 += widget->extent.y1;
 801dff4:	683b      	ldr	r3, [r7, #0]
 801dff6:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801dffa:	b29a      	uxth	r2, r3
 801dffc:	687b      	ldr	r3, [r7, #4]
 801dffe:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 801e002:	b29b      	uxth	r3, r3
 801e004:	4413      	add	r3, r2
 801e006:	b29b      	uxth	r3, r3
 801e008:	b21a      	sxth	r2, r3
 801e00a:	683b      	ldr	r3, [r7, #0]
 801e00c:	80da      	strh	r2, [r3, #6]
    }
}
 801e00e:	bf00      	nop
 801e010:	3708      	adds	r7, #8
 801e012:	46bd      	mov	sp, r7
 801e014:	bd80      	pop	{r7, pc}
 801e016:	bf00      	nop
 801e018:	08025b74 	.word	0x08025b74
 801e01c:	0802593c 	.word	0x0802593c

0801e020 <cogui_widget_point_p2l>:

void cogui_widget_point_p2l(cogui_widget_t *widget, cogui_point_t *point)
{
 801e020:	b580      	push	{r7, lr}
 801e022:	b082      	sub	sp, #8
 801e024:	af00      	add	r7, sp, #0
 801e026:	6078      	str	r0, [r7, #4]
 801e028:	6039      	str	r1, [r7, #0]
    COGUI_ASSERT(widget != Co_NULL);
 801e02a:	687b      	ldr	r3, [r7, #4]
 801e02c:	2b00      	cmp	r3, #0
 801e02e:	d105      	bne.n	801e03c <cogui_widget_point_p2l+0x1c>
 801e030:	f240 2206 	movw	r2, #518	; 0x206
 801e034:	4912      	ldr	r1, [pc, #72]	; (801e080 <cogui_widget_point_p2l+0x60>)
 801e036:	4813      	ldr	r0, [pc, #76]	; (801e084 <cogui_widget_point_p2l+0x64>)
 801e038:	f7ff f8f8 	bl	801d22c <cogui_assert_handler>

    if (point != Co_NULL) {
 801e03c:	683b      	ldr	r3, [r7, #0]
 801e03e:	2b00      	cmp	r3, #0
 801e040:	d019      	beq.n	801e076 <cogui_widget_point_p2l+0x56>
        point->x -= widget->extent.x1;
 801e042:	683b      	ldr	r3, [r7, #0]
 801e044:	f9b3 3000 	ldrsh.w	r3, [r3]
 801e048:	b29a      	uxth	r2, r3
 801e04a:	687b      	ldr	r3, [r7, #4]
 801e04c:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 801e050:	b29b      	uxth	r3, r3
 801e052:	1ad3      	subs	r3, r2, r3
 801e054:	b29b      	uxth	r3, r3
 801e056:	b21a      	sxth	r2, r3
 801e058:	683b      	ldr	r3, [r7, #0]
 801e05a:	801a      	strh	r2, [r3, #0]
        point->y -= widget->extent.y1;
 801e05c:	683b      	ldr	r3, [r7, #0]
 801e05e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801e062:	b29a      	uxth	r2, r3
 801e064:	687b      	ldr	r3, [r7, #4]
 801e066:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 801e06a:	b29b      	uxth	r3, r3
 801e06c:	1ad3      	subs	r3, r2, r3
 801e06e:	b29b      	uxth	r3, r3
 801e070:	b21a      	sxth	r2, r3
 801e072:	683b      	ldr	r3, [r7, #0]
 801e074:	805a      	strh	r2, [r3, #2]
    }    
}
 801e076:	bf00      	nop
 801e078:	3708      	adds	r7, #8
 801e07a:	46bd      	mov	sp, r7
 801e07c:	bd80      	pop	{r7, pc}
 801e07e:	bf00      	nop
 801e080:	08025b8c 	.word	0x08025b8c
 801e084:	0802593c 	.word	0x0802593c

0801e088 <cogui_widget_rect_p2l>:

void cogui_widget_rect_p2l(cogui_widget_t *widget, cogui_rect_t *rect)
{
 801e088:	b580      	push	{r7, lr}
 801e08a:	b082      	sub	sp, #8
 801e08c:	af00      	add	r7, sp, #0
 801e08e:	6078      	str	r0, [r7, #4]
 801e090:	6039      	str	r1, [r7, #0]
    COGUI_ASSERT(widget != Co_NULL);
 801e092:	687b      	ldr	r3, [r7, #4]
 801e094:	2b00      	cmp	r3, #0
 801e096:	d105      	bne.n	801e0a4 <cogui_widget_rect_p2l+0x1c>
 801e098:	f44f 7204 	mov.w	r2, #528	; 0x210
 801e09c:	491f      	ldr	r1, [pc, #124]	; (801e11c <cogui_widget_rect_p2l+0x94>)
 801e09e:	4820      	ldr	r0, [pc, #128]	; (801e120 <cogui_widget_rect_p2l+0x98>)
 801e0a0:	f7ff f8c4 	bl	801d22c <cogui_assert_handler>
    
    if (rect != Co_NULL) {
 801e0a4:	683b      	ldr	r3, [r7, #0]
 801e0a6:	2b00      	cmp	r3, #0
 801e0a8:	d033      	beq.n	801e112 <cogui_widget_rect_p2l+0x8a>
        rect->x1 -= widget->extent.x1;
 801e0aa:	683b      	ldr	r3, [r7, #0]
 801e0ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 801e0b0:	b29a      	uxth	r2, r3
 801e0b2:	687b      	ldr	r3, [r7, #4]
 801e0b4:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 801e0b8:	b29b      	uxth	r3, r3
 801e0ba:	1ad3      	subs	r3, r2, r3
 801e0bc:	b29b      	uxth	r3, r3
 801e0be:	b21a      	sxth	r2, r3
 801e0c0:	683b      	ldr	r3, [r7, #0]
 801e0c2:	801a      	strh	r2, [r3, #0]
        rect->x2 -= widget->extent.x1;
 801e0c4:	683b      	ldr	r3, [r7, #0]
 801e0c6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801e0ca:	b29a      	uxth	r2, r3
 801e0cc:	687b      	ldr	r3, [r7, #4]
 801e0ce:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 801e0d2:	b29b      	uxth	r3, r3
 801e0d4:	1ad3      	subs	r3, r2, r3
 801e0d6:	b29b      	uxth	r3, r3
 801e0d8:	b21a      	sxth	r2, r3
 801e0da:	683b      	ldr	r3, [r7, #0]
 801e0dc:	805a      	strh	r2, [r3, #2]

        rect->y1 -= widget->extent.y1;
 801e0de:	683b      	ldr	r3, [r7, #0]
 801e0e0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801e0e4:	b29a      	uxth	r2, r3
 801e0e6:	687b      	ldr	r3, [r7, #4]
 801e0e8:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 801e0ec:	b29b      	uxth	r3, r3
 801e0ee:	1ad3      	subs	r3, r2, r3
 801e0f0:	b29b      	uxth	r3, r3
 801e0f2:	b21a      	sxth	r2, r3
 801e0f4:	683b      	ldr	r3, [r7, #0]
 801e0f6:	809a      	strh	r2, [r3, #4]
        rect->y2 -= widget->extent.y1;
 801e0f8:	683b      	ldr	r3, [r7, #0]
 801e0fa:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801e0fe:	b29a      	uxth	r2, r3
 801e100:	687b      	ldr	r3, [r7, #4]
 801e102:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 801e106:	b29b      	uxth	r3, r3
 801e108:	1ad3      	subs	r3, r2, r3
 801e10a:	b29b      	uxth	r3, r3
 801e10c:	b21a      	sxth	r2, r3
 801e10e:	683b      	ldr	r3, [r7, #0]
 801e110:	80da      	strh	r2, [r3, #6]
    }
}
 801e112:	bf00      	nop
 801e114:	3708      	adds	r7, #8
 801e116:	46bd      	mov	sp, r7
 801e118:	bd80      	pop	{r7, pc}
 801e11a:	bf00      	nop
 801e11c:	08025ba4 	.word	0x08025ba4
 801e120:	0802593c 	.word	0x0802593c

0801e124 <cogui_widget_show>:

StatusType cogui_widget_show(cogui_widget_t *widget)
{
 801e124:	b580      	push	{r7, lr}
 801e126:	b090      	sub	sp, #64	; 0x40
 801e128:	af00      	add	r7, sp, #0
 801e12a:	6078      	str	r0, [r7, #4]
    struct cogui_event event;
    COGUI_ASSERT(widget != Co_NULL);
 801e12c:	687b      	ldr	r3, [r7, #4]
 801e12e:	2b00      	cmp	r3, #0
 801e130:	d105      	bne.n	801e13e <cogui_widget_show+0x1a>
 801e132:	f240 221e 	movw	r2, #542	; 0x21e
 801e136:	4917      	ldr	r1, [pc, #92]	; (801e194 <cogui_widget_show+0x70>)
 801e138:	4817      	ldr	r0, [pc, #92]	; (801e198 <cogui_widget_show+0x74>)
 801e13a:	f7ff f877 	bl	801d22c <cogui_assert_handler>

    StatusType result;

    if (widget->flag & COGUI_WIDGET_FLAG_SHOWN)
 801e13e:	687b      	ldr	r3, [r7, #4]
 801e140:	689b      	ldr	r3, [r3, #8]
 801e142:	f003 0301 	and.w	r3, r3, #1
 801e146:	2b00      	cmp	r3, #0
 801e148:	d001      	beq.n	801e14e <cogui_widget_show+0x2a>
        return GUI_E_ERROR;
 801e14a:	2316      	movs	r3, #22
 801e14c:	e01d      	b.n	801e18a <cogui_widget_show+0x66>

    widget->flag |= COGUI_WIDGET_FLAG_SHOWN;
 801e14e:	687b      	ldr	r3, [r7, #4]
 801e150:	689b      	ldr	r3, [r3, #8]
 801e152:	f043 0201 	orr.w	r2, r3, #1
 801e156:	687b      	ldr	r3, [r7, #4]
 801e158:	609a      	str	r2, [r3, #8]

    COGUI_EVENT_INIT(&event, COGUI_EVENT_WIDGET_SHOW);
 801e15a:	2303      	movs	r3, #3
 801e15c:	723b      	strb	r3, [r7, #8]
 801e15e:	f7fd f921 	bl	801b3a4 <cogui_app_self>
 801e162:	4603      	mov	r3, r0
 801e164:	60fb      	str	r3, [r7, #12]
 801e166:	2300      	movs	r3, #0
 801e168:	743b      	strb	r3, [r7, #16]

    if (widget->handler != Co_NULL)
 801e16a:	687b      	ldr	r3, [r7, #4]
 801e16c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801e16e:	2b00      	cmp	r3, #0
 801e170:	d009      	beq.n	801e186 <cogui_widget_show+0x62>
        result = widget->handler(widget, &event);
 801e172:	687b      	ldr	r3, [r7, #4]
 801e174:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801e176:	f107 0208 	add.w	r2, r7, #8
 801e17a:	4611      	mov	r1, r2
 801e17c:	6878      	ldr	r0, [r7, #4]
 801e17e:	4798      	blx	r3
 801e180:	4603      	mov	r3, r0
 801e182:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

    return result;
 801e186:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 801e18a:	4618      	mov	r0, r3
 801e18c:	3740      	adds	r7, #64	; 0x40
 801e18e:	46bd      	mov	sp, r7
 801e190:	bd80      	pop	{r7, pc}
 801e192:	bf00      	nop
 801e194:	08025bbc 	.word	0x08025bbc
 801e198:	0802593c 	.word	0x0802593c

0801e19c <cogui_widget_hide>:

StatusType cogui_widget_hide(cogui_widget_t *widget)
{
 801e19c:	b580      	push	{r7, lr}
 801e19e:	b090      	sub	sp, #64	; 0x40
 801e1a0:	af00      	add	r7, sp, #0
 801e1a2:	6078      	str	r0, [r7, #4]
    struct cogui_event event;
    COGUI_ASSERT(widget != Co_NULL);
 801e1a4:	687b      	ldr	r3, [r7, #4]
 801e1a6:	2b00      	cmp	r3, #0
 801e1a8:	d105      	bne.n	801e1b6 <cogui_widget_hide+0x1a>
 801e1aa:	f240 2232 	movw	r2, #562	; 0x232
 801e1ae:	4917      	ldr	r1, [pc, #92]	; (801e20c <cogui_widget_hide+0x70>)
 801e1b0:	4817      	ldr	r0, [pc, #92]	; (801e210 <cogui_widget_hide+0x74>)
 801e1b2:	f7ff f83b 	bl	801d22c <cogui_assert_handler>

    StatusType result;

    if (!(widget->flag & COGUI_WIDGET_FLAG_SHOWN))
 801e1b6:	687b      	ldr	r3, [r7, #4]
 801e1b8:	689b      	ldr	r3, [r3, #8]
 801e1ba:	f003 0301 	and.w	r3, r3, #1
 801e1be:	2b00      	cmp	r3, #0
 801e1c0:	d101      	bne.n	801e1c6 <cogui_widget_hide+0x2a>
        return GUI_E_ERROR;
 801e1c2:	2316      	movs	r3, #22
 801e1c4:	e01d      	b.n	801e202 <cogui_widget_hide+0x66>
    
    widget->flag &= ~COGUI_WIDGET_FLAG_SHOWN;
 801e1c6:	687b      	ldr	r3, [r7, #4]
 801e1c8:	689b      	ldr	r3, [r3, #8]
 801e1ca:	f023 0201 	bic.w	r2, r3, #1
 801e1ce:	687b      	ldr	r3, [r7, #4]
 801e1d0:	609a      	str	r2, [r3, #8]

    COGUI_EVENT_INIT(&event, COGUI_EVENT_WIDGET_HIDE);
 801e1d2:	2304      	movs	r3, #4
 801e1d4:	723b      	strb	r3, [r7, #8]
 801e1d6:	f7fd f8e5 	bl	801b3a4 <cogui_app_self>
 801e1da:	4603      	mov	r3, r0
 801e1dc:	60fb      	str	r3, [r7, #12]
 801e1de:	2300      	movs	r3, #0
 801e1e0:	743b      	strb	r3, [r7, #16]
    
    if (widget->handler != Co_NULL)
 801e1e2:	687b      	ldr	r3, [r7, #4]
 801e1e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801e1e6:	2b00      	cmp	r3, #0
 801e1e8:	d009      	beq.n	801e1fe <cogui_widget_hide+0x62>
        result = widget->handler(widget, &event);
 801e1ea:	687b      	ldr	r3, [r7, #4]
 801e1ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801e1ee:	f107 0208 	add.w	r2, r7, #8
 801e1f2:	4611      	mov	r1, r2
 801e1f4:	6878      	ldr	r0, [r7, #4]
 801e1f6:	4798      	blx	r3
 801e1f8:	4603      	mov	r3, r0
 801e1fa:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

    return result;
 801e1fe:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 801e202:	4618      	mov	r0, r3
 801e204:	3740      	adds	r7, #64	; 0x40
 801e206:	46bd      	mov	sp, r7
 801e208:	bd80      	pop	{r7, pc}
 801e20a:	bf00      	nop
 801e20c:	08025bd0 	.word	0x08025bd0
 801e210:	0802593c 	.word	0x0802593c

0801e214 <cogui_widget_onshow>:

StatusType cogui_widget_onshow(cogui_widget_t *widget, struct cogui_event *event)
{
 801e214:	b580      	push	{r7, lr}
 801e216:	b082      	sub	sp, #8
 801e218:	af00      	add	r7, sp, #0
 801e21a:	6078      	str	r0, [r7, #4]
 801e21c:	6039      	str	r1, [r7, #0]
    if (!(widget->flag & COGUI_WIDGET_FLAG_SHOWN))
 801e21e:	687b      	ldr	r3, [r7, #4]
 801e220:	689b      	ldr	r3, [r3, #8]
 801e222:	f003 0301 	and.w	r3, r3, #1
 801e226:	2b00      	cmp	r3, #0
 801e228:	d101      	bne.n	801e22e <cogui_widget_onshow+0x1a>
        return GUI_E_ERROR;
 801e22a:	2316      	movs	r3, #22
 801e22c:	e003      	b.n	801e236 <cogui_widget_onshow+0x22>

    cogui_widget_focus(widget);
 801e22e:	6878      	ldr	r0, [r7, #4]
 801e230:	f7ff fb76 	bl	801d920 <cogui_widget_focus>

    return GUI_E_OK;
 801e234:	2317      	movs	r3, #23
}
 801e236:	4618      	mov	r0, r3
 801e238:	3708      	adds	r7, #8
 801e23a:	46bd      	mov	sp, r7
 801e23c:	bd80      	pop	{r7, pc}

0801e23e <cogui_widget_onhide>:

StatusType cogui_widget_onhide(cogui_widget_t *widget, struct cogui_event *event)
{
 801e23e:	b580      	push	{r7, lr}
 801e240:	b082      	sub	sp, #8
 801e242:	af00      	add	r7, sp, #0
 801e244:	6078      	str	r0, [r7, #4]
 801e246:	6039      	str	r1, [r7, #0]
    if (widget->flag & COGUI_WIDGET_FLAG_SHOWN) {
 801e248:	687b      	ldr	r3, [r7, #4]
 801e24a:	689b      	ldr	r3, [r3, #8]
 801e24c:	f003 0301 	and.w	r3, r3, #1
 801e250:	2b00      	cmp	r3, #0
 801e252:	d001      	beq.n	801e258 <cogui_widget_onhide+0x1a>
        return GUI_E_ERROR;
 801e254:	2316      	movs	r3, #22
 801e256:	e005      	b.n	801e264 <cogui_widget_onhide+0x26>
    }

	cogui_screen_refresh(widget->top);
 801e258:	687b      	ldr	r3, [r7, #4]
 801e25a:	685b      	ldr	r3, [r3, #4]
 801e25c:	4618      	mov	r0, r3
 801e25e:	f7ff fa54 	bl	801d70a <cogui_screen_refresh>

    return GUI_E_OK;
 801e262:	2317      	movs	r3, #23
}
 801e264:	4618      	mov	r0, r3
 801e266:	3708      	adds	r7, #8
 801e268:	46bd      	mov	sp, r7
 801e26a:	bd80      	pop	{r7, pc}

0801e26c <cogui_widget_event_handler>:

void cogui_widget_update(cogui_widget_t *widget);

StatusType cogui_widget_event_handler(cogui_widget_t *widget, struct cogui_event *event)
{
 801e26c:	b580      	push	{r7, lr}
 801e26e:	b084      	sub	sp, #16
 801e270:	af00      	add	r7, sp, #0
 801e272:	6078      	str	r0, [r7, #4]
 801e274:	6039      	str	r1, [r7, #0]
    COGUI_ASSERT(widget != Co_NULL);
 801e276:	687b      	ldr	r3, [r7, #4]
 801e278:	2b00      	cmp	r3, #0
 801e27a:	d105      	bne.n	801e288 <cogui_widget_event_handler+0x1c>
 801e27c:	f44f 7217 	mov.w	r2, #604	; 0x25c
 801e280:	4915      	ldr	r1, [pc, #84]	; (801e2d8 <cogui_widget_event_handler+0x6c>)
 801e282:	4816      	ldr	r0, [pc, #88]	; (801e2dc <cogui_widget_event_handler+0x70>)
 801e284:	f7fe ffd2 	bl	801d22c <cogui_assert_handler>
    COGUI_ASSERT(event != Co_NULL);
 801e288:	683b      	ldr	r3, [r7, #0]
 801e28a:	2b00      	cmp	r3, #0
 801e28c:	d105      	bne.n	801e29a <cogui_widget_event_handler+0x2e>
 801e28e:	f240 225d 	movw	r2, #605	; 0x25d
 801e292:	4911      	ldr	r1, [pc, #68]	; (801e2d8 <cogui_widget_event_handler+0x6c>)
 801e294:	4812      	ldr	r0, [pc, #72]	; (801e2e0 <cogui_widget_event_handler+0x74>)
 801e296:	f7fe ffc9 	bl	801d22c <cogui_assert_handler>

    StatusType result = GUI_E_ERROR;
 801e29a:	2316      	movs	r3, #22
 801e29c:	73fb      	strb	r3, [r7, #15]

    switch (event->type)
 801e29e:	683b      	ldr	r3, [r7, #0]
 801e2a0:	781b      	ldrb	r3, [r3, #0]
 801e2a2:	2b03      	cmp	r3, #3
 801e2a4:	d002      	beq.n	801e2ac <cogui_widget_event_handler+0x40>
 801e2a6:	2b04      	cmp	r3, #4
 801e2a8:	d008      	beq.n	801e2bc <cogui_widget_event_handler+0x50>
 801e2aa:	e00f      	b.n	801e2cc <cogui_widget_event_handler+0x60>
    {
    case COGUI_EVENT_WIDGET_SHOW:
        result = cogui_widget_onshow(widget, event);
 801e2ac:	6839      	ldr	r1, [r7, #0]
 801e2ae:	6878      	ldr	r0, [r7, #4]
 801e2b0:	f7ff ffb0 	bl	801e214 <cogui_widget_onshow>
 801e2b4:	4603      	mov	r3, r0
 801e2b6:	73fb      	strb	r3, [r7, #15]
        return result;
 801e2b8:	7bfb      	ldrb	r3, [r7, #15]
 801e2ba:	e008      	b.n	801e2ce <cogui_widget_event_handler+0x62>

     case COGUI_EVENT_WIDGET_HIDE:
        result = cogui_widget_onhide(widget, event);
 801e2bc:	6839      	ldr	r1, [r7, #0]
 801e2be:	6878      	ldr	r0, [r7, #4]
 801e2c0:	f7ff ffbd 	bl	801e23e <cogui_widget_onhide>
 801e2c4:	4603      	mov	r3, r0
 801e2c6:	73fb      	strb	r3, [r7, #15]
        return result;
 801e2c8:	7bfb      	ldrb	r3, [r7, #15]
 801e2ca:	e000      	b.n	801e2ce <cogui_widget_event_handler+0x62>
    }

	return result;
 801e2cc:	7bfb      	ldrb	r3, [r7, #15]
}
 801e2ce:	4618      	mov	r0, r3
 801e2d0:	3710      	adds	r7, #16
 801e2d2:	46bd      	mov	sp, r7
 801e2d4:	bd80      	pop	{r7, pc}
 801e2d6:	bf00      	nop
 801e2d8:	08025be4 	.word	0x08025be4
 801e2dc:	0802593c 	.word	0x0802593c
 801e2e0:	08025980 	.word	0x08025980

0801e2e4 <_cogui_window_init>:
static void cogui_main_page_app_uninstall(co_int16_t);

StatusType cogui_window_event_handler(struct cogui_window * win, struct cogui_event *event);

static void _cogui_window_init(cogui_window_t *win)
{
 801e2e4:	b580      	push	{r7, lr}
 801e2e6:	b082      	sub	sp, #8
 801e2e8:	af00      	add	r7, sp, #0
 801e2ea:	6078      	str	r0, [r7, #4]
    cogui_memset(win, 0, sizeof(cogui_window_t));
 801e2ec:	f04f 0248 	mov.w	r2, #72	; 0x48
 801e2f0:	f04f 0300 	mov.w	r3, #0
 801e2f4:	2100      	movs	r1, #0
 801e2f6:	6878      	ldr	r0, [r7, #4]
 801e2f8:	f7fe fb9a 	bl	801ca30 <cogui_memset>

    win->app        = cogui_app_self();
 801e2fc:	f7fd f852 	bl	801b3a4 <cogui_app_self>
 801e300:	4602      	mov	r2, r0
 801e302:	687b      	ldr	r3, [r7, #4]
 801e304:	621a      	str	r2, [r3, #32]
    win->app->win   = win;
 801e306:	687b      	ldr	r3, [r7, #4]
 801e308:	6a1b      	ldr	r3, [r3, #32]
 801e30a:	687a      	ldr	r2, [r7, #4]
 801e30c:	611a      	str	r2, [r3, #16]

    win->title_name = cogui_app_self()->name;
 801e30e:	f7fd f849 	bl	801b3a4 <cogui_app_self>
 801e312:	4603      	mov	r3, r0
 801e314:	685a      	ldr	r2, [r3, #4]
 801e316:	687b      	ldr	r3, [r7, #4]
 801e318:	629a      	str	r2, [r3, #40]	; 0x28

    win->flag       = COGUI_WINDOW_FLAG_INIT;
 801e31a:	687b      	ldr	r3, [r7, #4]
 801e31c:	2200      	movs	r2, #0
 801e31e:	60da      	str	r2, [r3, #12]
    win->handler    = cogui_window_event_handler;
 801e320:	687b      	ldr	r3, [r7, #4]
 801e322:	4a03      	ldr	r2, [pc, #12]	; (801e330 <_cogui_window_init+0x4c>)
 801e324:	645a      	str	r2, [r3, #68]	; 0x44
}
 801e326:	bf00      	nop
 801e328:	3708      	adds	r7, #8
 801e32a:	46bd      	mov	sp, r7
 801e32c:	bd80      	pop	{r7, pc}
 801e32e:	bf00      	nop
 801e330:	0801eaad 	.word	0x0801eaad

0801e334 <cogui_window_create>:

cogui_window_t *cogui_window_create(co_uint16_t style)
{
 801e334:	b580      	push	{r7, lr}
 801e336:	b084      	sub	sp, #16
 801e338:	af00      	add	r7, sp, #0
 801e33a:	4603      	mov	r3, r0
 801e33c:	80fb      	strh	r3, [r7, #6]
    co_int16_t id = -1;
 801e33e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801e342:	81fb      	strh	r3, [r7, #14]
    if (main_page) {
 801e344:	4b1b      	ldr	r3, [pc, #108]	; (801e3b4 <cogui_window_create+0x80>)
 801e346:	681b      	ldr	r3, [r3, #0]
 801e348:	2b00      	cmp	r3, #0
 801e34a:	d008      	beq.n	801e35e <cogui_window_create+0x2a>
        id = cogui_main_page_app_install(cogui_app_self()->name);
 801e34c:	f7fd f82a 	bl	801b3a4 <cogui_app_self>
 801e350:	4603      	mov	r3, r0
 801e352:	685b      	ldr	r3, [r3, #4]
 801e354:	4618      	mov	r0, r3
 801e356:	f000 f915 	bl	801e584 <cogui_main_page_app_install>
 801e35a:	4603      	mov	r3, r0
 801e35c:	81fb      	strh	r3, [r7, #14]
    }

    cogui_window_t *win;
    win = cogui_malloc(sizeof(cogui_window_t));
 801e35e:	2048      	movs	r0, #72	; 0x48
 801e360:	f7fe fa64 	bl	801c82c <cogui_malloc>
 801e364:	60b8      	str	r0, [r7, #8]
    if (win == Co_NULL)
 801e366:	68bb      	ldr	r3, [r7, #8]
 801e368:	2b00      	cmp	r3, #0
 801e36a:	d101      	bne.n	801e370 <cogui_window_create+0x3c>
        return Co_NULL;
 801e36c:	2300      	movs	r3, #0
 801e36e:	e01d      	b.n	801e3ac <cogui_window_create+0x78>

    _cogui_window_init(win);
 801e370:	68b8      	ldr	r0, [r7, #8]
 801e372:	f7ff ffb7 	bl	801e2e4 <_cogui_window_init>

    cogui_widget_list_init(win);
 801e376:	68b8      	ldr	r0, [r7, #8]
 801e378:	f7ff f8ef 	bl	801d55a <cogui_widget_list_init>

    if (!(style & COGUI_WINDOW_STYLE_NO_TITLE)) {
 801e37c:	88fb      	ldrh	r3, [r7, #6]
 801e37e:	f003 0301 	and.w	r3, r3, #1
 801e382:	2b00      	cmp	r3, #0
 801e384:	d108      	bne.n	801e398 <cogui_window_create+0x64>
        win->title = cogui_widget_create(win);
 801e386:	68b8      	ldr	r0, [r7, #8]
 801e388:	f7ff f874 	bl	801d474 <cogui_widget_create>
 801e38c:	4602      	mov	r2, r0
 801e38e:	68bb      	ldr	r3, [r7, #8]
 801e390:	625a      	str	r2, [r3, #36]	; 0x24
        cogui_title_create(win);
 801e392:	68b8      	ldr	r0, [r7, #8]
 801e394:	f7fe ff6a 	bl	801d26c <cogui_title_create>
    }

    win->style = style;
 801e398:	68bb      	ldr	r3, [r7, #8]
 801e39a:	88fa      	ldrh	r2, [r7, #6]
 801e39c:	815a      	strh	r2, [r3, #10]
    win->magic = COGUI_WINDOW_MAGIC;
 801e39e:	68bb      	ldr	r3, [r7, #8]
 801e3a0:	4a05      	ldr	r2, [pc, #20]	; (801e3b8 <cogui_window_create+0x84>)
 801e3a2:	601a      	str	r2, [r3, #0]
    win->id    = id;
 801e3a4:	68bb      	ldr	r3, [r7, #8]
 801e3a6:	89fa      	ldrh	r2, [r7, #14]
 801e3a8:	811a      	strh	r2, [r3, #8]

    return win;
 801e3aa:	68bb      	ldr	r3, [r7, #8]
}
 801e3ac:	4618      	mov	r0, r3
 801e3ae:	3710      	adds	r7, #16
 801e3b0:	46bd      	mov	sp, r7
 801e3b2:	bd80      	pop	{r7, pc}
 801e3b4:	2000d774 	.word	0x2000d774
 801e3b8:	57696e00 	.word	0x57696e00

0801e3bc <cogui_main_window_create>:

cogui_window_t *cogui_main_window_create(void)
{
 801e3bc:	b590      	push	{r4, r7, lr}
 801e3be:	b087      	sub	sp, #28
 801e3c0:	af02      	add	r7, sp, #8
    cogui_window_t *win     = cogui_window_create_without_title();
 801e3c2:	2001      	movs	r0, #1
 801e3c4:	f7ff ffb6 	bl	801e334 <cogui_window_create>
 801e3c8:	60b8      	str	r0, [r7, #8]
    cogui_widget_t *widget;
    co_uint16_t     i;

    widget = cogui_widget_create(win);
 801e3ca:	68b8      	ldr	r0, [r7, #8]
 801e3cc:	f7ff f852 	bl	801d474 <cogui_widget_create>
 801e3d0:	6078      	str	r0, [r7, #4]
    cogui_widget_set_rectangle(widget, 0, 0, 240, 40);
 801e3d2:	2328      	movs	r3, #40	; 0x28
 801e3d4:	9300      	str	r3, [sp, #0]
 801e3d6:	23f0      	movs	r3, #240	; 0xf0
 801e3d8:	2200      	movs	r2, #0
 801e3da:	2100      	movs	r1, #0
 801e3dc:	6878      	ldr	r0, [r7, #4]
 801e3de:	f7ff fbb0 	bl	801db42 <cogui_widget_set_rectangle>
    widget->gc.background = COGUI_BLACK;
 801e3e2:	4b61      	ldr	r3, [pc, #388]	; (801e568 <cogui_main_window_create+0x1ac>)
 801e3e4:	e9d3 3400 	ldrd	r3, r4, [r3]
 801e3e8:	687a      	ldr	r2, [r7, #4]
 801e3ea:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
    widget->flag |= COGUI_WIDGET_FLAG_RECT | COGUI_WIDGET_FLAG_FILLED;
 801e3ee:	687b      	ldr	r3, [r7, #4]
 801e3f0:	689b      	ldr	r3, [r3, #8]
 801e3f2:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 801e3f6:	687b      	ldr	r3, [r7, #4]
 801e3f8:	609a      	str	r2, [r3, #8]
    cogui_widget_set_text(widget, "CoOS");
 801e3fa:	495c      	ldr	r1, [pc, #368]	; (801e56c <cogui_main_window_create+0x1b0>)
 801e3fc:	6878      	ldr	r0, [r7, #4]
 801e3fe:	f7ff fca1 	bl	801dd44 <cogui_widget_set_text>
    cogui_widget_set_font(widget, &tm_font_16x26);
 801e402:	495b      	ldr	r1, [pc, #364]	; (801e570 <cogui_main_window_create+0x1b4>)
 801e404:	6878      	ldr	r0, [r7, #4]
 801e406:	f7ff fc5d 	bl	801dcc4 <cogui_widget_set_font>
    cogui_widget_set_text_align(widget, COGUI_TEXT_ALIGN_CENTER|COGUI_TEXT_ALIGN_MIDDLE);
 801e40a:	2114      	movs	r1, #20
 801e40c:	6878      	ldr	r0, [r7, #4]
 801e40e:	f7ff fc7d 	bl	801dd0c <cogui_widget_set_text_align>
    COGUI_WIDGET_ENABLE(widget);
 801e412:	687b      	ldr	r3, [r7, #4]
 801e414:	689b      	ldr	r3, [r3, #8]
 801e416:	f043 0201 	orr.w	r2, r3, #1
 801e41a:	687b      	ldr	r3, [r7, #4]
 801e41c:	609a      	str	r2, [r3, #8]

    for ( i=0; i<9; i++) {
 801e41e:	2300      	movs	r3, #0
 801e420:	81fb      	strh	r3, [r7, #14]
 801e422:	e095      	b.n	801e550 <cogui_main_window_create+0x194>
        widget = cogui_widget_create(win);
 801e424:	68b8      	ldr	r0, [r7, #8]
 801e426:	f7ff f825 	bl	801d474 <cogui_widget_create>
 801e42a:	6078      	str	r0, [r7, #4]
        cogui_widget_set_rectangle(widget, 15 + (i%3)*75 , 55 + (i/3)*88, 60, 60);
 801e42c:	89fa      	ldrh	r2, [r7, #14]
 801e42e:	4b51      	ldr	r3, [pc, #324]	; (801e574 <cogui_main_window_create+0x1b8>)
 801e430:	fba3 1302 	umull	r1, r3, r3, r2
 801e434:	0859      	lsrs	r1, r3, #1
 801e436:	460b      	mov	r3, r1
 801e438:	005b      	lsls	r3, r3, #1
 801e43a:	440b      	add	r3, r1
 801e43c:	1ad3      	subs	r3, r2, r3
 801e43e:	b29b      	uxth	r3, r3
 801e440:	461a      	mov	r2, r3
 801e442:	4613      	mov	r3, r2
 801e444:	009b      	lsls	r3, r3, #2
 801e446:	4413      	add	r3, r2
 801e448:	011a      	lsls	r2, r3, #4
 801e44a:	1ad3      	subs	r3, r2, r3
 801e44c:	f103 010f 	add.w	r1, r3, #15
 801e450:	89fb      	ldrh	r3, [r7, #14]
 801e452:	4a48      	ldr	r2, [pc, #288]	; (801e574 <cogui_main_window_create+0x1b8>)
 801e454:	fba2 2303 	umull	r2, r3, r2, r3
 801e458:	085b      	lsrs	r3, r3, #1
 801e45a:	b29b      	uxth	r3, r3
 801e45c:	461a      	mov	r2, r3
 801e45e:	2358      	movs	r3, #88	; 0x58
 801e460:	fb03 f302 	mul.w	r3, r3, r2
 801e464:	f103 0237 	add.w	r2, r3, #55	; 0x37
 801e468:	233c      	movs	r3, #60	; 0x3c
 801e46a:	9300      	str	r3, [sp, #0]
 801e46c:	233c      	movs	r3, #60	; 0x3c
 801e46e:	6878      	ldr	r0, [r7, #4]
 801e470:	f7ff fb67 	bl	801db42 <cogui_widget_set_rectangle>
        widget->gc.foreground = COGUI_GREEN; 
 801e474:	4b40      	ldr	r3, [pc, #256]	; (801e578 <cogui_main_window_create+0x1bc>)
 801e476:	e9d3 3400 	ldrd	r3, r4, [r3]
 801e47a:	687a      	ldr	r2, [r7, #4]
 801e47c:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
        widget->flag |= COGUI_WIDGET_FLAG_RECT;
 801e480:	687b      	ldr	r3, [r7, #4]
 801e482:	689b      	ldr	r3, [r3, #8]
 801e484:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 801e488:	687b      	ldr	r3, [r7, #4]
 801e48a:	609a      	str	r2, [r3, #8]
        COGUI_WIDGET_ENABLE(widget);
 801e48c:	687b      	ldr	r3, [r7, #4]
 801e48e:	689b      	ldr	r3, [r3, #8]
 801e490:	f043 0201 	orr.w	r2, r3, #1
 801e494:	687b      	ldr	r3, [r7, #4]
 801e496:	609a      	str	r2, [r3, #8]
        cogui_widget_set_font(widget, &tm_font_16x26);
 801e498:	4935      	ldr	r1, [pc, #212]	; (801e570 <cogui_main_window_create+0x1b4>)
 801e49a:	6878      	ldr	r0, [r7, #4]
 801e49c:	f7ff fc12 	bl	801dcc4 <cogui_widget_set_font>
        cogui_widget_set_text_align(widget, COGUI_TEXT_ALIGN_CENTER|COGUI_TEXT_ALIGN_MIDDLE);
 801e4a0:	2114      	movs	r1, #20
 801e4a2:	6878      	ldr	r0, [r7, #4]
 801e4a4:	f7ff fc32 	bl	801dd0c <cogui_widget_set_text_align>

        main_app_table[i].app_icon = widget;
 801e4a8:	89fa      	ldrh	r2, [r7, #14]
 801e4aa:	4934      	ldr	r1, [pc, #208]	; (801e57c <cogui_main_window_create+0x1c0>)
 801e4ac:	4613      	mov	r3, r2
 801e4ae:	005b      	lsls	r3, r3, #1
 801e4b0:	4413      	add	r3, r2
 801e4b2:	009b      	lsls	r3, r3, #2
 801e4b4:	440b      	add	r3, r1
 801e4b6:	687a      	ldr	r2, [r7, #4]
 801e4b8:	601a      	str	r2, [r3, #0]

        widget = cogui_widget_create(win);
 801e4ba:	68b8      	ldr	r0, [r7, #8]
 801e4bc:	f7fe ffda 	bl	801d474 <cogui_widget_create>
 801e4c0:	6078      	str	r0, [r7, #4]
        cogui_widget_set_rectangle(widget, 15 + (i%3)*75 , 115 + (i/3)*88, 60, 13);
 801e4c2:	89fa      	ldrh	r2, [r7, #14]
 801e4c4:	4b2b      	ldr	r3, [pc, #172]	; (801e574 <cogui_main_window_create+0x1b8>)
 801e4c6:	fba3 1302 	umull	r1, r3, r3, r2
 801e4ca:	0859      	lsrs	r1, r3, #1
 801e4cc:	460b      	mov	r3, r1
 801e4ce:	005b      	lsls	r3, r3, #1
 801e4d0:	440b      	add	r3, r1
 801e4d2:	1ad3      	subs	r3, r2, r3
 801e4d4:	b29b      	uxth	r3, r3
 801e4d6:	461a      	mov	r2, r3
 801e4d8:	4613      	mov	r3, r2
 801e4da:	009b      	lsls	r3, r3, #2
 801e4dc:	4413      	add	r3, r2
 801e4de:	011a      	lsls	r2, r3, #4
 801e4e0:	1ad3      	subs	r3, r2, r3
 801e4e2:	f103 010f 	add.w	r1, r3, #15
 801e4e6:	89fb      	ldrh	r3, [r7, #14]
 801e4e8:	4a22      	ldr	r2, [pc, #136]	; (801e574 <cogui_main_window_create+0x1b8>)
 801e4ea:	fba2 2303 	umull	r2, r3, r2, r3
 801e4ee:	085b      	lsrs	r3, r3, #1
 801e4f0:	b29b      	uxth	r3, r3
 801e4f2:	461a      	mov	r2, r3
 801e4f4:	2358      	movs	r3, #88	; 0x58
 801e4f6:	fb03 f302 	mul.w	r3, r3, r2
 801e4fa:	f103 0273 	add.w	r2, r3, #115	; 0x73
 801e4fe:	230d      	movs	r3, #13
 801e500:	9300      	str	r3, [sp, #0]
 801e502:	233c      	movs	r3, #60	; 0x3c
 801e504:	6878      	ldr	r0, [r7, #4]
 801e506:	f7ff fb1c 	bl	801db42 <cogui_widget_set_rectangle>
        widget->gc.foreground = COGUI_WHITE; 
 801e50a:	4b1d      	ldr	r3, [pc, #116]	; (801e580 <cogui_main_window_create+0x1c4>)
 801e50c:	e9d3 3400 	ldrd	r3, r4, [r3]
 801e510:	687a      	ldr	r2, [r7, #4]
 801e512:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
        widget->flag |= COGUI_WIDGET_FLAG_RECT| COGUI_WIDGET_FLAG_FILLED;
 801e516:	687b      	ldr	r3, [r7, #4]
 801e518:	689b      	ldr	r3, [r3, #8]
 801e51a:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 801e51e:	687b      	ldr	r3, [r7, #4]
 801e520:	609a      	str	r2, [r3, #8]
        cogui_widget_set_text_align(widget, COGUI_TEXT_ALIGN_CENTER|COGUI_TEXT_ALIGN_MIDDLE);
 801e522:	2114      	movs	r1, #20
 801e524:	6878      	ldr	r0, [r7, #4]
 801e526:	f7ff fbf1 	bl	801dd0c <cogui_widget_set_text_align>
        COGUI_WIDGET_ENABLE(widget);
 801e52a:	687b      	ldr	r3, [r7, #4]
 801e52c:	689b      	ldr	r3, [r3, #8]
 801e52e:	f043 0201 	orr.w	r2, r3, #1
 801e532:	687b      	ldr	r3, [r7, #4]
 801e534:	609a      	str	r2, [r3, #8]

        main_app_table[i].app_title_box = widget;
 801e536:	89fa      	ldrh	r2, [r7, #14]
 801e538:	4910      	ldr	r1, [pc, #64]	; (801e57c <cogui_main_window_create+0x1c0>)
 801e53a:	4613      	mov	r3, r2
 801e53c:	005b      	lsls	r3, r3, #1
 801e53e:	4413      	add	r3, r2
 801e540:	009b      	lsls	r3, r3, #2
 801e542:	440b      	add	r3, r1
 801e544:	3304      	adds	r3, #4
 801e546:	687a      	ldr	r2, [r7, #4]
 801e548:	601a      	str	r2, [r3, #0]
    for ( i=0; i<9; i++) {
 801e54a:	89fb      	ldrh	r3, [r7, #14]
 801e54c:	3301      	adds	r3, #1
 801e54e:	81fb      	strh	r3, [r7, #14]
 801e550:	89fb      	ldrh	r3, [r7, #14]
 801e552:	2b08      	cmp	r3, #8
 801e554:	f67f af66 	bls.w	801e424 <cogui_main_window_create+0x68>
    }

    cogui_window_show(win);
 801e558:	68b8      	ldr	r0, [r7, #8]
 801e55a:	f000 f9d9 	bl	801e910 <cogui_window_show>

    return win;
 801e55e:	68bb      	ldr	r3, [r7, #8]
}
 801e560:	4618      	mov	r0, r3
 801e562:	3714      	adds	r7, #20
 801e564:	46bd      	mov	sp, r7
 801e566:	bd90      	pop	{r4, r7, pc}
 801e568:	08022c98 	.word	0x08022c98
 801e56c:	08025c00 	.word	0x08025c00
 801e570:	20000158 	.word	0x20000158
 801e574:	aaaaaaab 	.word	0xaaaaaaab
 801e578:	08022c50 	.word	0x08022c50
 801e57c:	2000df9c 	.word	0x2000df9c
 801e580:	08022c90 	.word	0x08022c90

0801e584 <cogui_main_page_app_install>:

static co_int16_t cogui_main_page_app_install(char* title)
{
 801e584:	b590      	push	{r4, r7, lr}
 801e586:	b085      	sub	sp, #20
 801e588:	af00      	add	r7, sp, #0
 801e58a:	6078      	str	r0, [r7, #4]
    if (current_app_install_cnt > 9) {
 801e58c:	4b2d      	ldr	r3, [pc, #180]	; (801e644 <cogui_main_page_app_install+0xc0>)
 801e58e:	f9b3 3000 	ldrsh.w	r3, [r3]
 801e592:	2b09      	cmp	r3, #9
 801e594:	dd01      	ble.n	801e59a <cogui_main_page_app_install+0x16>
        return GUI_E_ERROR;
 801e596:	2316      	movs	r3, #22
 801e598:	e050      	b.n	801e63c <cogui_main_page_app_install+0xb8>
    }

    cogui_widget_t *widget;
    char *icon_text = cogui_strdup(title);
 801e59a:	6878      	ldr	r0, [r7, #4]
 801e59c:	f7fe fb56 	bl	801cc4c <cogui_strdup>
 801e5a0:	60f8      	str	r0, [r7, #12]
    icon_text[1] = 0;
 801e5a2:	68fb      	ldr	r3, [r7, #12]
 801e5a4:	3301      	adds	r3, #1
 801e5a6:	2200      	movs	r2, #0
 801e5a8:	701a      	strb	r2, [r3, #0]
    widget = main_app_table[current_app_install_cnt].app_icon;
 801e5aa:	4b26      	ldr	r3, [pc, #152]	; (801e644 <cogui_main_page_app_install+0xc0>)
 801e5ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 801e5b0:	4619      	mov	r1, r3
 801e5b2:	4a25      	ldr	r2, [pc, #148]	; (801e648 <cogui_main_page_app_install+0xc4>)
 801e5b4:	460b      	mov	r3, r1
 801e5b6:	005b      	lsls	r3, r3, #1
 801e5b8:	440b      	add	r3, r1
 801e5ba:	009b      	lsls	r3, r3, #2
 801e5bc:	4413      	add	r3, r2
 801e5be:	681b      	ldr	r3, [r3, #0]
 801e5c0:	60bb      	str	r3, [r7, #8]
    cogui_widget_set_text(widget, icon_text);
 801e5c2:	68f9      	ldr	r1, [r7, #12]
 801e5c4:	68b8      	ldr	r0, [r7, #8]
 801e5c6:	f7ff fbbd 	bl	801dd44 <cogui_widget_set_text>

    widget->flag |= COGUI_WIDGET_FLAG_FILLED;
 801e5ca:	68bb      	ldr	r3, [r7, #8]
 801e5cc:	689b      	ldr	r3, [r3, #8]
 801e5ce:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 801e5d2:	68bb      	ldr	r3, [r7, #8]
 801e5d4:	609a      	str	r2, [r3, #8]
    widget->gc.background = COGUI_GREEN;
 801e5d6:	4b1d      	ldr	r3, [pc, #116]	; (801e64c <cogui_main_page_app_install+0xc8>)
 801e5d8:	e9d3 3400 	ldrd	r3, r4, [r3]
 801e5dc:	68ba      	ldr	r2, [r7, #8]
 801e5de:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
    widget->gc.foreground = COGUI_WHITE;
 801e5e2:	4b1b      	ldr	r3, [pc, #108]	; (801e650 <cogui_main_page_app_install+0xcc>)
 801e5e4:	e9d3 3400 	ldrd	r3, r4, [r3]
 801e5e8:	68ba      	ldr	r2, [r7, #8]
 801e5ea:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30

    widget = main_app_table[current_app_install_cnt].app_title_box;
 801e5ee:	4b15      	ldr	r3, [pc, #84]	; (801e644 <cogui_main_page_app_install+0xc0>)
 801e5f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 801e5f4:	4619      	mov	r1, r3
 801e5f6:	4a14      	ldr	r2, [pc, #80]	; (801e648 <cogui_main_page_app_install+0xc4>)
 801e5f8:	460b      	mov	r3, r1
 801e5fa:	005b      	lsls	r3, r3, #1
 801e5fc:	440b      	add	r3, r1
 801e5fe:	009b      	lsls	r3, r3, #2
 801e600:	4413      	add	r3, r2
 801e602:	3304      	adds	r3, #4
 801e604:	681b      	ldr	r3, [r3, #0]
 801e606:	60bb      	str	r3, [r7, #8]
    cogui_widget_set_text(widget, title);
 801e608:	6879      	ldr	r1, [r7, #4]
 801e60a:	68b8      	ldr	r0, [r7, #8]
 801e60c:	f7ff fb9a 	bl	801dd44 <cogui_widget_set_text>

    main_app_table[current_app_install_cnt].title = title;
 801e610:	4b0c      	ldr	r3, [pc, #48]	; (801e644 <cogui_main_page_app_install+0xc0>)
 801e612:	f9b3 3000 	ldrsh.w	r3, [r3]
 801e616:	4619      	mov	r1, r3
 801e618:	4a0b      	ldr	r2, [pc, #44]	; (801e648 <cogui_main_page_app_install+0xc4>)
 801e61a:	460b      	mov	r3, r1
 801e61c:	005b      	lsls	r3, r3, #1
 801e61e:	440b      	add	r3, r1
 801e620:	009b      	lsls	r3, r3, #2
 801e622:	4413      	add	r3, r2
 801e624:	3308      	adds	r3, #8
 801e626:	687a      	ldr	r2, [r7, #4]
 801e628:	601a      	str	r2, [r3, #0]

    return current_app_install_cnt++;
 801e62a:	4b06      	ldr	r3, [pc, #24]	; (801e644 <cogui_main_page_app_install+0xc0>)
 801e62c:	f9b3 3000 	ldrsh.w	r3, [r3]
 801e630:	b29a      	uxth	r2, r3
 801e632:	3201      	adds	r2, #1
 801e634:	b292      	uxth	r2, r2
 801e636:	b211      	sxth	r1, r2
 801e638:	4a02      	ldr	r2, [pc, #8]	; (801e644 <cogui_main_page_app_install+0xc0>)
 801e63a:	8011      	strh	r1, [r2, #0]
}
 801e63c:	4618      	mov	r0, r3
 801e63e:	3714      	adds	r7, #20
 801e640:	46bd      	mov	sp, r7
 801e642:	bd90      	pop	{r4, r7, pc}
 801e644:	2000df98 	.word	0x2000df98
 801e648:	2000df9c 	.word	0x2000df9c
 801e64c:	08022c50 	.word	0x08022c50
 801e650:	08022c90 	.word	0x08022c90

0801e654 <cogui_main_page_app_uninstall>:

static void cogui_main_page_app_uninstall(co_int16_t id)
{
 801e654:	b590      	push	{r4, r7, lr}
 801e656:	b085      	sub	sp, #20
 801e658:	af00      	add	r7, sp, #0
 801e65a:	4603      	mov	r3, r0
 801e65c:	80fb      	strh	r3, [r7, #6]
    COGUI_ASSERT((id < current_app_install_cnt) && (id >= 0));
 801e65e:	4b4c      	ldr	r3, [pc, #304]	; (801e790 <cogui_main_page_app_uninstall+0x13c>)
 801e660:	f9b3 3000 	ldrsh.w	r3, [r3]
 801e664:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 801e668:	429a      	cmp	r2, r3
 801e66a:	da03      	bge.n	801e674 <cogui_main_page_app_uninstall+0x20>
 801e66c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801e670:	2b00      	cmp	r3, #0
 801e672:	da04      	bge.n	801e67e <cogui_main_page_app_uninstall+0x2a>
 801e674:	2283      	movs	r2, #131	; 0x83
 801e676:	4947      	ldr	r1, [pc, #284]	; (801e794 <cogui_main_page_app_uninstall+0x140>)
 801e678:	4847      	ldr	r0, [pc, #284]	; (801e798 <cogui_main_page_app_uninstall+0x144>)
 801e67a:	f7fe fdd7 	bl	801d22c <cogui_assert_handler>

    main_app_table[id].app_icon->flag &= ~COGUI_WIDGET_FLAG_FILLED;
 801e67e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 801e682:	4946      	ldr	r1, [pc, #280]	; (801e79c <cogui_main_page_app_uninstall+0x148>)
 801e684:	4613      	mov	r3, r2
 801e686:	005b      	lsls	r3, r3, #1
 801e688:	4413      	add	r3, r2
 801e68a:	009b      	lsls	r3, r3, #2
 801e68c:	440b      	add	r3, r1
 801e68e:	681b      	ldr	r3, [r3, #0]
 801e690:	6899      	ldr	r1, [r3, #8]
 801e692:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 801e696:	4841      	ldr	r0, [pc, #260]	; (801e79c <cogui_main_page_app_uninstall+0x148>)
 801e698:	4613      	mov	r3, r2
 801e69a:	005b      	lsls	r3, r3, #1
 801e69c:	4413      	add	r3, r2
 801e69e:	009b      	lsls	r3, r3, #2
 801e6a0:	4403      	add	r3, r0
 801e6a2:	681b      	ldr	r3, [r3, #0]
 801e6a4:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 801e6a8:	609a      	str	r2, [r3, #8]
    main_app_table[id].title = Co_NULL;
 801e6aa:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 801e6ae:	493b      	ldr	r1, [pc, #236]	; (801e79c <cogui_main_page_app_uninstall+0x148>)
 801e6b0:	4613      	mov	r3, r2
 801e6b2:	005b      	lsls	r3, r3, #1
 801e6b4:	4413      	add	r3, r2
 801e6b6:	009b      	lsls	r3, r3, #2
 801e6b8:	440b      	add	r3, r1
 801e6ba:	3308      	adds	r3, #8
 801e6bc:	2200      	movs	r2, #0
 801e6be:	601a      	str	r2, [r3, #0]

    cogui_widget_clear_text(main_app_table[id].app_icon);
 801e6c0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 801e6c4:	4935      	ldr	r1, [pc, #212]	; (801e79c <cogui_main_page_app_uninstall+0x148>)
 801e6c6:	4613      	mov	r3, r2
 801e6c8:	005b      	lsls	r3, r3, #1
 801e6ca:	4413      	add	r3, r2
 801e6cc:	009b      	lsls	r3, r3, #2
 801e6ce:	440b      	add	r3, r1
 801e6d0:	681b      	ldr	r3, [r3, #0]
 801e6d2:	4618      	mov	r0, r3
 801e6d4:	f7ff fbbe 	bl	801de54 <cogui_widget_clear_text>
    cogui_widget_clear_text(main_app_table[id].app_title_box);
 801e6d8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 801e6dc:	492f      	ldr	r1, [pc, #188]	; (801e79c <cogui_main_page_app_uninstall+0x148>)
 801e6de:	4613      	mov	r3, r2
 801e6e0:	005b      	lsls	r3, r3, #1
 801e6e2:	4413      	add	r3, r2
 801e6e4:	009b      	lsls	r3, r3, #2
 801e6e6:	440b      	add	r3, r1
 801e6e8:	3304      	adds	r3, #4
 801e6ea:	681b      	ldr	r3, [r3, #0]
 801e6ec:	4618      	mov	r0, r3
 801e6ee:	f7ff fbb1 	bl	801de54 <cogui_widget_clear_text>

    cogui_widget_t *widget;    
    widget = main_app_table[current_app_install_cnt].app_icon;
 801e6f2:	4b27      	ldr	r3, [pc, #156]	; (801e790 <cogui_main_page_app_uninstall+0x13c>)
 801e6f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 801e6f8:	4619      	mov	r1, r3
 801e6fa:	4a28      	ldr	r2, [pc, #160]	; (801e79c <cogui_main_page_app_uninstall+0x148>)
 801e6fc:	460b      	mov	r3, r1
 801e6fe:	005b      	lsls	r3, r3, #1
 801e700:	440b      	add	r3, r1
 801e702:	009b      	lsls	r3, r3, #2
 801e704:	4413      	add	r3, r2
 801e706:	681b      	ldr	r3, [r3, #0]
 801e708:	60bb      	str	r3, [r7, #8]
    widget->gc.background = COGUI_BLACK;
 801e70a:	4b25      	ldr	r3, [pc, #148]	; (801e7a0 <cogui_main_page_app_uninstall+0x14c>)
 801e70c:	e9d3 3400 	ldrd	r3, r4, [r3]
 801e710:	68ba      	ldr	r2, [r7, #8]
 801e712:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
    widget->gc.foreground = COGUI_GREEN;
 801e716:	4b23      	ldr	r3, [pc, #140]	; (801e7a4 <cogui_main_page_app_uninstall+0x150>)
 801e718:	e9d3 3400 	ldrd	r3, r4, [r3]
 801e71c:	68ba      	ldr	r2, [r7, #8]
 801e71e:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30

    /* if this app is not previous install app, we need to shift all app forward */
    if (id != --current_app_install_cnt) {
 801e722:	4b1b      	ldr	r3, [pc, #108]	; (801e790 <cogui_main_page_app_uninstall+0x13c>)
 801e724:	f9b3 3000 	ldrsh.w	r3, [r3]
 801e728:	b29b      	uxth	r3, r3
 801e72a:	3b01      	subs	r3, #1
 801e72c:	b29b      	uxth	r3, r3
 801e72e:	b21a      	sxth	r2, r3
 801e730:	4b17      	ldr	r3, [pc, #92]	; (801e790 <cogui_main_page_app_uninstall+0x13c>)
 801e732:	801a      	strh	r2, [r3, #0]
 801e734:	4b16      	ldr	r3, [pc, #88]	; (801e790 <cogui_main_page_app_uninstall+0x13c>)
 801e736:	f9b3 3000 	ldrsh.w	r3, [r3]
 801e73a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 801e73e:	429a      	cmp	r2, r3
 801e740:	d022      	beq.n	801e788 <cogui_main_page_app_uninstall+0x134>
        co_uint16_t i;
        for ( i=id+1; i<=current_app_install_cnt; i++) {
 801e742:	88fb      	ldrh	r3, [r7, #6]
 801e744:	3301      	adds	r3, #1
 801e746:	81fb      	strh	r3, [r7, #14]
 801e748:	e018      	b.n	801e77c <cogui_main_page_app_uninstall+0x128>
            cogui_memcpy(main_app_table+(i-1), main_app_table+i, sizeof(struct main_app_table));
 801e74a:	89fa      	ldrh	r2, [r7, #14]
 801e74c:	4613      	mov	r3, r2
 801e74e:	005b      	lsls	r3, r3, #1
 801e750:	4413      	add	r3, r2
 801e752:	009b      	lsls	r3, r3, #2
 801e754:	3b0c      	subs	r3, #12
 801e756:	4a11      	ldr	r2, [pc, #68]	; (801e79c <cogui_main_page_app_uninstall+0x148>)
 801e758:	1898      	adds	r0, r3, r2
 801e75a:	89fa      	ldrh	r2, [r7, #14]
 801e75c:	4613      	mov	r3, r2
 801e75e:	005b      	lsls	r3, r3, #1
 801e760:	4413      	add	r3, r2
 801e762:	009b      	lsls	r3, r3, #2
 801e764:	461a      	mov	r2, r3
 801e766:	4b0d      	ldr	r3, [pc, #52]	; (801e79c <cogui_main_page_app_uninstall+0x148>)
 801e768:	18d1      	adds	r1, r2, r3
 801e76a:	f04f 020c 	mov.w	r2, #12
 801e76e:	f04f 0300 	mov.w	r3, #0
 801e772:	f7fe f97d 	bl	801ca70 <cogui_memcpy>
        for ( i=id+1; i<=current_app_install_cnt; i++) {
 801e776:	89fb      	ldrh	r3, [r7, #14]
 801e778:	3301      	adds	r3, #1
 801e77a:	81fb      	strh	r3, [r7, #14]
 801e77c:	89fb      	ldrh	r3, [r7, #14]
 801e77e:	4a04      	ldr	r2, [pc, #16]	; (801e790 <cogui_main_page_app_uninstall+0x13c>)
 801e780:	f9b2 2000 	ldrsh.w	r2, [r2]
 801e784:	4293      	cmp	r3, r2
 801e786:	dde0      	ble.n	801e74a <cogui_main_page_app_uninstall+0xf6>
        }
    }
}   
 801e788:	bf00      	nop
 801e78a:	3714      	adds	r7, #20
 801e78c:	46bd      	mov	sp, r7
 801e78e:	bd90      	pop	{r4, r7, pc}
 801e790:	2000df98 	.word	0x2000df98
 801e794:	08025cac 	.word	0x08025cac
 801e798:	08025c08 	.word	0x08025c08
 801e79c:	2000df9c 	.word	0x2000df9c
 801e7a0:	08022c98 	.word	0x08022c98
 801e7a4:	08022c50 	.word	0x08022c50

0801e7a8 <cogui_window_delete>:

void cogui_window_delete(cogui_window_t *win)
{
 801e7a8:	b580      	push	{r7, lr}
 801e7aa:	b084      	sub	sp, #16
 801e7ac:	af00      	add	r7, sp, #0
 801e7ae:	6078      	str	r0, [r7, #4]
    /* remove magic code */
    win->magic = 0;
 801e7b0:	687b      	ldr	r3, [r7, #4]
 801e7b2:	2200      	movs	r2, #0
 801e7b4:	601a      	str	r2, [r3, #0]

    /* delete title widget */
    cogui_title_delete(win);
 801e7b6:	6878      	ldr	r0, [r7, #4]
 801e7b8:	f7fe fe02 	bl	801d3c0 <cogui_title_delete>
    cogui_widget_delete(win->title);
 801e7bc:	687b      	ldr	r3, [r7, #4]
 801e7be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e7c0:	4618      	mov	r0, r3
 801e7c2:	f7fe fea5 	bl	801d510 <cogui_widget_delete>

    /* delete all widget */
    cogui_widget_t *tmp_widget = win->widget_list->next;
 801e7c6:	687b      	ldr	r3, [r7, #4]
 801e7c8:	685b      	ldr	r3, [r3, #4]
 801e7ca:	681b      	ldr	r3, [r3, #0]
 801e7cc:	60fb      	str	r3, [r7, #12]
    cogui_widget_t *next_delete_widget = tmp_widget;
 801e7ce:	68fb      	ldr	r3, [r7, #12]
 801e7d0:	60bb      	str	r3, [r7, #8]
    while ((next_delete_widget = next_delete_widget->next) != Co_NULL) {
 801e7d2:	e004      	b.n	801e7de <cogui_window_delete+0x36>
        cogui_widget_delete(tmp_widget);
 801e7d4:	68f8      	ldr	r0, [r7, #12]
 801e7d6:	f7fe fe9b 	bl	801d510 <cogui_widget_delete>
        tmp_widget = next_delete_widget;
 801e7da:	68bb      	ldr	r3, [r7, #8]
 801e7dc:	60fb      	str	r3, [r7, #12]
    while ((next_delete_widget = next_delete_widget->next) != Co_NULL) {
 801e7de:	68bb      	ldr	r3, [r7, #8]
 801e7e0:	681b      	ldr	r3, [r3, #0]
 801e7e2:	60bb      	str	r3, [r7, #8]
 801e7e4:	68bb      	ldr	r3, [r7, #8]
 801e7e6:	2b00      	cmp	r3, #0
 801e7e8:	d1f4      	bne.n	801e7d4 <cogui_window_delete+0x2c>
    }

    /* last delete header widget */
    cogui_widget_delete(win->widget_list);
 801e7ea:	687b      	ldr	r3, [r7, #4]
 801e7ec:	685b      	ldr	r3, [r3, #4]
 801e7ee:	4618      	mov	r0, r3
 801e7f0:	f7fe fe8e 	bl	801d510 <cogui_widget_delete>

    /* remove window pointer in app structure */
    win->app->win = Co_NULL;
 801e7f4:	687b      	ldr	r3, [r7, #4]
 801e7f6:	6a1b      	ldr	r3, [r3, #32]
 801e7f8:	2200      	movs	r2, #0
 801e7fa:	611a      	str	r2, [r3, #16]

    /* free user data if need */
    if (win->user_data) {
 801e7fc:	687b      	ldr	r3, [r7, #4]
 801e7fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801e800:	2b00      	cmp	r3, #0
 801e802:	d004      	beq.n	801e80e <cogui_window_delete+0x66>
        cogui_free(win->user_data);
 801e804:	687b      	ldr	r3, [r7, #4]
 801e806:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801e808:	4618      	mov	r0, r3
 801e80a:	f7fe f827 	bl	801c85c <cogui_free>
    }

    cogui_main_page_app_uninstall(win->id);
 801e80e:	687b      	ldr	r3, [r7, #4]
 801e810:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 801e814:	4618      	mov	r0, r3
 801e816:	f7ff ff1d 	bl	801e654 <cogui_main_page_app_uninstall>

    /* free window */
    cogui_free(win);
 801e81a:	6878      	ldr	r0, [r7, #4]
 801e81c:	f7fe f81e 	bl	801c85c <cogui_free>
}
 801e820:	bf00      	nop
 801e822:	3710      	adds	r7, #16
 801e824:	46bd      	mov	sp, r7
 801e826:	bd80      	pop	{r7, pc}

0801e828 <cogui_window_close>:

StatusType cogui_window_close(cogui_window_t *win)
{
 801e828:	b580      	push	{r7, lr}
 801e82a:	b090      	sub	sp, #64	; 0x40
 801e82c:	af00      	add	r7, sp, #0
 801e82e:	6078      	str	r0, [r7, #4]
    COGUI_ASSERT(win != Co_NULL);
 801e830:	687b      	ldr	r3, [r7, #4]
 801e832:	2b00      	cmp	r3, #0
 801e834:	d104      	bne.n	801e840 <cogui_window_close+0x18>
 801e836:	22bd      	movs	r2, #189	; 0xbd
 801e838:	490f      	ldr	r1, [pc, #60]	; (801e878 <cogui_window_close+0x50>)
 801e83a:	4810      	ldr	r0, [pc, #64]	; (801e87c <cogui_window_close+0x54>)
 801e83c:	f7fe fcf6 	bl	801d22c <cogui_assert_handler>

    cogui_window_delete(win);
 801e840:	6878      	ldr	r0, [r7, #4]
 801e842:	f7ff ffb1 	bl	801e7a8 <cogui_window_delete>

    struct cogui_event event;
    COGUI_EVENT_INIT(&event, COGUI_EVENT_WINDOW_CLOSE);
 801e846:	230a      	movs	r3, #10
 801e848:	733b      	strb	r3, [r7, #12]
 801e84a:	f7fc fdab 	bl	801b3a4 <cogui_app_self>
 801e84e:	4603      	mov	r3, r0
 801e850:	613b      	str	r3, [r7, #16]
 801e852:	2300      	movs	r3, #0
 801e854:	753b      	strb	r3, [r7, #20]
    event.win = win;
 801e856:	687b      	ldr	r3, [r7, #4]
 801e858:	61fb      	str	r3, [r7, #28]

    return cogui_send(cogui_get_server(), &event);
 801e85a:	f7fd ffb7 	bl	801c7cc <cogui_get_server>
 801e85e:	4602      	mov	r2, r0
 801e860:	f107 030c 	add.w	r3, r7, #12
 801e864:	4619      	mov	r1, r3
 801e866:	4610      	mov	r0, r2
 801e868:	f7fe f82c 	bl	801c8c4 <cogui_send>
 801e86c:	4603      	mov	r3, r0
}
 801e86e:	4618      	mov	r0, r3
 801e870:	3740      	adds	r7, #64	; 0x40
 801e872:	46bd      	mov	sp, r7
 801e874:	bd80      	pop	{r7, pc}
 801e876:	bf00      	nop
 801e878:	08025ccc 	.word	0x08025ccc
 801e87c:	08025c34 	.word	0x08025c34

0801e880 <cogui_window_set_onactivate>:

void cogui_window_set_onactivate(cogui_window_t *win, event_handler_ptr handler)
{
 801e880:	b580      	push	{r7, lr}
 801e882:	b082      	sub	sp, #8
 801e884:	af00      	add	r7, sp, #0
 801e886:	6078      	str	r0, [r7, #4]
 801e888:	6039      	str	r1, [r7, #0]
    COGUI_ASSERT(win != Co_NULL);
 801e88a:	687b      	ldr	r3, [r7, #4]
 801e88c:	2b00      	cmp	r3, #0
 801e88e:	d104      	bne.n	801e89a <cogui_window_set_onactivate+0x1a>
 801e890:	22ca      	movs	r2, #202	; 0xca
 801e892:	4905      	ldr	r1, [pc, #20]	; (801e8a8 <cogui_window_set_onactivate+0x28>)
 801e894:	4805      	ldr	r0, [pc, #20]	; (801e8ac <cogui_window_set_onactivate+0x2c>)
 801e896:	f7fe fcc9 	bl	801d22c <cogui_assert_handler>
    
    win->on_activate = handler;
 801e89a:	687b      	ldr	r3, [r7, #4]
 801e89c:	683a      	ldr	r2, [r7, #0]
 801e89e:	635a      	str	r2, [r3, #52]	; 0x34
}
 801e8a0:	bf00      	nop
 801e8a2:	3708      	adds	r7, #8
 801e8a4:	46bd      	mov	sp, r7
 801e8a6:	bd80      	pop	{r7, pc}
 801e8a8:	08025ce0 	.word	0x08025ce0
 801e8ac:	08025c34 	.word	0x08025c34

0801e8b0 <cogui_window_set_ondeactive>:

void cogui_window_set_ondeactive(cogui_window_t *win, event_handler_ptr handler)
{
 801e8b0:	b580      	push	{r7, lr}
 801e8b2:	b082      	sub	sp, #8
 801e8b4:	af00      	add	r7, sp, #0
 801e8b6:	6078      	str	r0, [r7, #4]
 801e8b8:	6039      	str	r1, [r7, #0]
    COGUI_ASSERT(win != Co_NULL);
 801e8ba:	687b      	ldr	r3, [r7, #4]
 801e8bc:	2b00      	cmp	r3, #0
 801e8be:	d104      	bne.n	801e8ca <cogui_window_set_ondeactive+0x1a>
 801e8c0:	22d1      	movs	r2, #209	; 0xd1
 801e8c2:	4905      	ldr	r1, [pc, #20]	; (801e8d8 <cogui_window_set_ondeactive+0x28>)
 801e8c4:	4805      	ldr	r0, [pc, #20]	; (801e8dc <cogui_window_set_ondeactive+0x2c>)
 801e8c6:	f7fe fcb1 	bl	801d22c <cogui_assert_handler>
    
    win->on_deactivate = handler;
 801e8ca:	687b      	ldr	r3, [r7, #4]
 801e8cc:	683a      	ldr	r2, [r7, #0]
 801e8ce:	639a      	str	r2, [r3, #56]	; 0x38
}
 801e8d0:	bf00      	nop
 801e8d2:	3708      	adds	r7, #8
 801e8d4:	46bd      	mov	sp, r7
 801e8d6:	bd80      	pop	{r7, pc}
 801e8d8:	08025cfc 	.word	0x08025cfc
 801e8dc:	08025c34 	.word	0x08025c34

0801e8e0 <cogui_window_set_onkey>:


void cogui_window_set_onkey(cogui_window_t *win, event_handler_ptr handler)
{
 801e8e0:	b580      	push	{r7, lr}
 801e8e2:	b082      	sub	sp, #8
 801e8e4:	af00      	add	r7, sp, #0
 801e8e6:	6078      	str	r0, [r7, #4]
 801e8e8:	6039      	str	r1, [r7, #0]
    COGUI_ASSERT(win != Co_NULL);
 801e8ea:	687b      	ldr	r3, [r7, #4]
 801e8ec:	2b00      	cmp	r3, #0
 801e8ee:	d104      	bne.n	801e8fa <cogui_window_set_onkey+0x1a>
 801e8f0:	22d9      	movs	r2, #217	; 0xd9
 801e8f2:	4905      	ldr	r1, [pc, #20]	; (801e908 <cogui_window_set_onkey+0x28>)
 801e8f4:	4805      	ldr	r0, [pc, #20]	; (801e90c <cogui_window_set_onkey+0x2c>)
 801e8f6:	f7fe fc99 	bl	801d22c <cogui_assert_handler>
    
    win->on_key = handler;
 801e8fa:	687b      	ldr	r3, [r7, #4]
 801e8fc:	683a      	ldr	r2, [r7, #0]
 801e8fe:	63da      	str	r2, [r3, #60]	; 0x3c
}
 801e900:	bf00      	nop
 801e902:	3708      	adds	r7, #8
 801e904:	46bd      	mov	sp, r7
 801e906:	bd80      	pop	{r7, pc}
 801e908:	08025d18 	.word	0x08025d18
 801e90c:	08025c34 	.word	0x08025c34

0801e910 <cogui_window_show>:

StatusType cogui_window_show(cogui_window_t *win)
{
 801e910:	b580      	push	{r7, lr}
 801e912:	b090      	sub	sp, #64	; 0x40
 801e914:	af00      	add	r7, sp, #0
 801e916:	6078      	str	r0, [r7, #4]
    COGUI_ASSERT(win != Co_NULL);
 801e918:	687b      	ldr	r3, [r7, #4]
 801e91a:	2b00      	cmp	r3, #0
 801e91c:	d104      	bne.n	801e928 <cogui_window_show+0x18>
 801e91e:	22e0      	movs	r2, #224	; 0xe0
 801e920:	491d      	ldr	r1, [pc, #116]	; (801e998 <cogui_window_show+0x88>)
 801e922:	481e      	ldr	r0, [pc, #120]	; (801e99c <cogui_window_show+0x8c>)
 801e924:	f7fe fc82 	bl	801d22c <cogui_assert_handler>
    struct cogui_event event;
    StatusType result;

    /* if this is not main page to show, first hide main page */
    if (win != main_page) {
 801e928:	4b1d      	ldr	r3, [pc, #116]	; (801e9a0 <cogui_window_show+0x90>)
 801e92a:	681b      	ldr	r3, [r3, #0]
 801e92c:	687a      	ldr	r2, [r7, #4]
 801e92e:	429a      	cmp	r2, r3
 801e930:	d007      	beq.n	801e942 <cogui_window_show+0x32>
        COGUI_WINDOW_DISABLE(main_page);
 801e932:	4b1b      	ldr	r3, [pc, #108]	; (801e9a0 <cogui_window_show+0x90>)
 801e934:	681b      	ldr	r3, [r3, #0]
 801e936:	68da      	ldr	r2, [r3, #12]
 801e938:	4b19      	ldr	r3, [pc, #100]	; (801e9a0 <cogui_window_show+0x90>)
 801e93a:	681b      	ldr	r3, [r3, #0]
 801e93c:	f022 0201 	bic.w	r2, r2, #1
 801e940:	60da      	str	r2, [r3, #12]
    }

    /* determine whether if window is need to show */
    if (COGUI_WINDOW_IS_ENABLE(win)) {
 801e942:	687b      	ldr	r3, [r7, #4]
 801e944:	68db      	ldr	r3, [r3, #12]
 801e946:	f003 0301 	and.w	r3, r3, #1
 801e94a:	2b00      	cmp	r3, #0
 801e94c:	d001      	beq.n	801e952 <cogui_window_show+0x42>
        return GUI_E_ERROR;
 801e94e:	2316      	movs	r3, #22
 801e950:	e01d      	b.n	801e98e <cogui_window_show+0x7e>
    }
    else {
        COGUI_WINDOW_ENABLE(win);
 801e952:	687b      	ldr	r3, [r7, #4]
 801e954:	68db      	ldr	r3, [r3, #12]
 801e956:	f043 0201 	orr.w	r2, r3, #1
 801e95a:	687b      	ldr	r3, [r7, #4]
 801e95c:	60da      	str	r2, [r3, #12]
    }

    COGUI_EVENT_INIT(&event, COGUI_EVENT_WINDOW_SHOW);
 801e95e:	2308      	movs	r3, #8
 801e960:	723b      	strb	r3, [r7, #8]
 801e962:	f7fc fd1f 	bl	801b3a4 <cogui_app_self>
 801e966:	4603      	mov	r3, r0
 801e968:	60fb      	str	r3, [r7, #12]
 801e96a:	2300      	movs	r3, #0
 801e96c:	743b      	strb	r3, [r7, #16]

    if (win->handler != Co_NULL)
 801e96e:	687b      	ldr	r3, [r7, #4]
 801e970:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801e972:	2b00      	cmp	r3, #0
 801e974:	d009      	beq.n	801e98a <cogui_window_show+0x7a>
        result = win->handler(win, &event);
 801e976:	687b      	ldr	r3, [r7, #4]
 801e978:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801e97a:	f107 0208 	add.w	r2, r7, #8
 801e97e:	4611      	mov	r1, r2
 801e980:	6878      	ldr	r0, [r7, #4]
 801e982:	4798      	blx	r3
 801e984:	4603      	mov	r3, r0
 801e986:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

    return result;
 801e98a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 801e98e:	4618      	mov	r0, r3
 801e990:	3740      	adds	r7, #64	; 0x40
 801e992:	46bd      	mov	sp, r7
 801e994:	bd80      	pop	{r7, pc}
 801e996:	bf00      	nop
 801e998:	08025d30 	.word	0x08025d30
 801e99c:	08025c34 	.word	0x08025c34
 801e9a0:	2000d774 	.word	0x2000d774

0801e9a4 <cogui_window_hide>:

StatusType cogui_window_hide(cogui_window_t *win)
{
 801e9a4:	b580      	push	{r7, lr}
 801e9a6:	b090      	sub	sp, #64	; 0x40
 801e9a8:	af00      	add	r7, sp, #0
 801e9aa:	6078      	str	r0, [r7, #4]
    COGUI_ASSERT(win != Co_NULL);
 801e9ac:	687b      	ldr	r3, [r7, #4]
 801e9ae:	2b00      	cmp	r3, #0
 801e9b0:	d104      	bne.n	801e9bc <cogui_window_hide+0x18>
 801e9b2:	22fb      	movs	r2, #251	; 0xfb
 801e9b4:	4916      	ldr	r1, [pc, #88]	; (801ea10 <cogui_window_hide+0x6c>)
 801e9b6:	4817      	ldr	r0, [pc, #92]	; (801ea14 <cogui_window_hide+0x70>)
 801e9b8:	f7fe fc38 	bl	801d22c <cogui_assert_handler>
    struct cogui_event event;
    StatusType result;

    /* determine whether if window is need to hide */
    if (!COGUI_WINDOW_IS_ENABLE(win)) {
 801e9bc:	687b      	ldr	r3, [r7, #4]
 801e9be:	68db      	ldr	r3, [r3, #12]
 801e9c0:	f003 0301 	and.w	r3, r3, #1
 801e9c4:	2b00      	cmp	r3, #0
 801e9c6:	d101      	bne.n	801e9cc <cogui_window_hide+0x28>
        return GUI_E_ERROR;
 801e9c8:	2316      	movs	r3, #22
 801e9ca:	e01d      	b.n	801ea08 <cogui_window_hide+0x64>
    }
    else {
        COGUI_WINDOW_DISABLE(win);
 801e9cc:	687b      	ldr	r3, [r7, #4]
 801e9ce:	68db      	ldr	r3, [r3, #12]
 801e9d0:	f023 0201 	bic.w	r2, r3, #1
 801e9d4:	687b      	ldr	r3, [r7, #4]
 801e9d6:	60da      	str	r2, [r3, #12]
    }

    COGUI_EVENT_INIT(&event, COGUI_EVENT_WINDOW_HIDE);
 801e9d8:	2309      	movs	r3, #9
 801e9da:	723b      	strb	r3, [r7, #8]
 801e9dc:	f7fc fce2 	bl	801b3a4 <cogui_app_self>
 801e9e0:	4603      	mov	r3, r0
 801e9e2:	60fb      	str	r3, [r7, #12]
 801e9e4:	2300      	movs	r3, #0
 801e9e6:	743b      	strb	r3, [r7, #16]

    if (win->handler != Co_NULL)
 801e9e8:	687b      	ldr	r3, [r7, #4]
 801e9ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801e9ec:	2b00      	cmp	r3, #0
 801e9ee:	d009      	beq.n	801ea04 <cogui_window_hide+0x60>
        result = win->handler(win, &event);
 801e9f0:	687b      	ldr	r3, [r7, #4]
 801e9f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801e9f4:	f107 0208 	add.w	r2, r7, #8
 801e9f8:	4611      	mov	r1, r2
 801e9fa:	6878      	ldr	r0, [r7, #4]
 801e9fc:	4798      	blx	r3
 801e9fe:	4603      	mov	r3, r0
 801ea00:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

    return result;
 801ea04:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 801ea08:	4618      	mov	r0, r3
 801ea0a:	3740      	adds	r7, #64	; 0x40
 801ea0c:	46bd      	mov	sp, r7
 801ea0e:	bd80      	pop	{r7, pc}
 801ea10:	08025d44 	.word	0x08025d44
 801ea14:	08025c34 	.word	0x08025c34

0801ea18 <cogui_window_onshow>:

StatusType cogui_window_onshow(cogui_window_t *win)
{
 801ea18:	b580      	push	{r7, lr}
 801ea1a:	b082      	sub	sp, #8
 801ea1c:	af00      	add	r7, sp, #0
 801ea1e:	6078      	str	r0, [r7, #4]
    if (!COGUI_WINDOW_IS_ENABLE(win)) {
 801ea20:	687b      	ldr	r3, [r7, #4]
 801ea22:	68db      	ldr	r3, [r3, #12]
 801ea24:	f003 0301 	and.w	r3, r3, #1
 801ea28:	2b00      	cmp	r3, #0
 801ea2a:	d101      	bne.n	801ea30 <cogui_window_onshow+0x18>
        return GUI_E_ERROR;
 801ea2c:	2316      	movs	r3, #22
 801ea2e:	e006      	b.n	801ea3e <cogui_window_onshow+0x26>
    }

	cogui_screen_refresh(win);
 801ea30:	6878      	ldr	r0, [r7, #4]
 801ea32:	f7fe fe6a 	bl	801d70a <cogui_screen_refresh>

    current_window = win;
 801ea36:	4a04      	ldr	r2, [pc, #16]	; (801ea48 <cogui_window_onshow+0x30>)
 801ea38:	687b      	ldr	r3, [r7, #4]
 801ea3a:	6013      	str	r3, [r2, #0]

    return GUI_E_OK;
 801ea3c:	2317      	movs	r3, #23
}
 801ea3e:	4618      	mov	r0, r3
 801ea40:	3708      	adds	r7, #8
 801ea42:	46bd      	mov	sp, r7
 801ea44:	bd80      	pop	{r7, pc}
 801ea46:	bf00      	nop
 801ea48:	2000df94 	.word	0x2000df94

0801ea4c <cogui_window_onhide>:

StatusType cogui_window_onhide(cogui_window_t *win)
{
 801ea4c:	b580      	push	{r7, lr}
 801ea4e:	b090      	sub	sp, #64	; 0x40
 801ea50:	af00      	add	r7, sp, #0
 801ea52:	6078      	str	r0, [r7, #4]
    if (COGUI_WINDOW_IS_ENABLE(win)) {
 801ea54:	687b      	ldr	r3, [r7, #4]
 801ea56:	68db      	ldr	r3, [r3, #12]
 801ea58:	f003 0301 	and.w	r3, r3, #1
 801ea5c:	2b00      	cmp	r3, #0
 801ea5e:	d001      	beq.n	801ea64 <cogui_window_onhide+0x18>
        return GUI_E_ERROR;
 801ea60:	2316      	movs	r3, #22
 801ea62:	e013      	b.n	801ea8c <cogui_window_onhide+0x40>
    }

    struct cogui_event event;
    COGUI_EVENT_INIT(&event, COGUI_EVENT_WINDOW_HIDE);
 801ea64:	2309      	movs	r3, #9
 801ea66:	733b      	strb	r3, [r7, #12]
 801ea68:	f7fc fc9c 	bl	801b3a4 <cogui_app_self>
 801ea6c:	4603      	mov	r3, r0
 801ea6e:	613b      	str	r3, [r7, #16]
 801ea70:	2300      	movs	r3, #0
 801ea72:	753b      	strb	r3, [r7, #20]
    event.win = win;
 801ea74:	687b      	ldr	r3, [r7, #4]
 801ea76:	61fb      	str	r3, [r7, #28]

    return cogui_send(cogui_get_server(), &event);
 801ea78:	f7fd fea8 	bl	801c7cc <cogui_get_server>
 801ea7c:	4602      	mov	r2, r0
 801ea7e:	f107 030c 	add.w	r3, r7, #12
 801ea82:	4619      	mov	r1, r3
 801ea84:	4610      	mov	r0, r2
 801ea86:	f7fd ff1d 	bl	801c8c4 <cogui_send>
 801ea8a:	4603      	mov	r3, r0
}
 801ea8c:	4618      	mov	r0, r3
 801ea8e:	3740      	adds	r7, #64	; 0x40
 801ea90:	46bd      	mov	sp, r7
 801ea92:	bd80      	pop	{r7, pc}

0801ea94 <cogui_get_current_window>:

cogui_window_t *cogui_get_current_window()
{
 801ea94:	b580      	push	{r7, lr}
 801ea96:	b082      	sub	sp, #8
 801ea98:	af00      	add	r7, sp, #0
    cogui_app_t *app = cogui_app_self();
 801ea9a:	f7fc fc83 	bl	801b3a4 <cogui_app_self>
 801ea9e:	6078      	str	r0, [r7, #4]

    return app->win;
 801eaa0:	687b      	ldr	r3, [r7, #4]
 801eaa2:	691b      	ldr	r3, [r3, #16]
}
 801eaa4:	4618      	mov	r0, r3
 801eaa6:	3708      	adds	r7, #8
 801eaa8:	46bd      	mov	sp, r7
 801eaaa:	bd80      	pop	{r7, pc}

0801eaac <cogui_window_event_handler>:

StatusType cogui_window_event_handler(struct cogui_window *win, struct cogui_event *event)
{
 801eaac:	b580      	push	{r7, lr}
 801eaae:	b084      	sub	sp, #16
 801eab0:	af00      	add	r7, sp, #0
 801eab2:	6078      	str	r0, [r7, #4]
 801eab4:	6039      	str	r1, [r7, #0]
    COGUI_ASSERT(win != Co_NULL);
 801eab6:	687b      	ldr	r3, [r7, #4]
 801eab8:	2b00      	cmp	r3, #0
 801eaba:	d105      	bne.n	801eac8 <cogui_window_event_handler+0x1c>
 801eabc:	f44f 7299 	mov.w	r2, #306	; 0x132
 801eac0:	4917      	ldr	r1, [pc, #92]	; (801eb20 <cogui_window_event_handler+0x74>)
 801eac2:	4818      	ldr	r0, [pc, #96]	; (801eb24 <cogui_window_event_handler+0x78>)
 801eac4:	f7fe fbb2 	bl	801d22c <cogui_assert_handler>
    COGUI_ASSERT(event != Co_NULL);
 801eac8:	683b      	ldr	r3, [r7, #0]
 801eaca:	2b00      	cmp	r3, #0
 801eacc:	d105      	bne.n	801eada <cogui_window_event_handler+0x2e>
 801eace:	f240 1233 	movw	r2, #307	; 0x133
 801ead2:	4913      	ldr	r1, [pc, #76]	; (801eb20 <cogui_window_event_handler+0x74>)
 801ead4:	4814      	ldr	r0, [pc, #80]	; (801eb28 <cogui_window_event_handler+0x7c>)
 801ead6:	f7fe fba9 	bl	801d22c <cogui_assert_handler>

    StatusType result = GUI_E_ERROR;
 801eada:	2316      	movs	r3, #22
 801eadc:	73fb      	strb	r3, [r7, #15]

    switch (event->type)
 801eade:	683b      	ldr	r3, [r7, #0]
 801eae0:	781b      	ldrb	r3, [r3, #0]
 801eae2:	2b09      	cmp	r3, #9
 801eae4:	d00a      	beq.n	801eafc <cogui_window_event_handler+0x50>
 801eae6:	2b0a      	cmp	r3, #10
 801eae8:	d00e      	beq.n	801eb08 <cogui_window_event_handler+0x5c>
 801eaea:	2b08      	cmp	r3, #8
 801eaec:	d000      	beq.n	801eaf0 <cogui_window_event_handler+0x44>
    case COGUI_EVENT_WINDOW_CLOSE:
        result = cogui_window_close(win);
        break; 

    default:
        break;
 801eaee:	e011      	b.n	801eb14 <cogui_window_event_handler+0x68>
        result = cogui_window_onshow(win);
 801eaf0:	6878      	ldr	r0, [r7, #4]
 801eaf2:	f7ff ff91 	bl	801ea18 <cogui_window_onshow>
 801eaf6:	4603      	mov	r3, r0
 801eaf8:	73fb      	strb	r3, [r7, #15]
        break; 
 801eafa:	e00b      	b.n	801eb14 <cogui_window_event_handler+0x68>
        result = cogui_window_onhide(win);
 801eafc:	6878      	ldr	r0, [r7, #4]
 801eafe:	f7ff ffa5 	bl	801ea4c <cogui_window_onhide>
 801eb02:	4603      	mov	r3, r0
 801eb04:	73fb      	strb	r3, [r7, #15]
        break; 
 801eb06:	e005      	b.n	801eb14 <cogui_window_event_handler+0x68>
        result = cogui_window_close(win);
 801eb08:	6878      	ldr	r0, [r7, #4]
 801eb0a:	f7ff fe8d 	bl	801e828 <cogui_window_close>
 801eb0e:	4603      	mov	r3, r0
 801eb10:	73fb      	strb	r3, [r7, #15]
        break; 
 801eb12:	bf00      	nop
    }

	return result;
 801eb14:	7bfb      	ldrb	r3, [r7, #15]
}
 801eb16:	4618      	mov	r0, r3
 801eb18:	3710      	adds	r7, #16
 801eb1a:	46bd      	mov	sp, r7
 801eb1c:	bd80      	pop	{r7, pc}
 801eb1e:	bf00      	nop
 801eb20:	08025d58 	.word	0x08025d58
 801eb24:	08025c34 	.word	0x08025c34
 801eb28:	08025c44 	.word	0x08025c44

0801eb2c <cogui_assert_failed_page>:

void cogui_assert_failed_page(const char* ex, co_uint16_t line, const char* func)
{
 801eb2c:	b590      	push	{r4, r7, lr}
 801eb2e:	b08d      	sub	sp, #52	; 0x34
 801eb30:	af02      	add	r7, sp, #8
 801eb32:	60f8      	str	r0, [r7, #12]
 801eb34:	460b      	mov	r3, r1
 801eb36:	607a      	str	r2, [r7, #4]
 801eb38:	817b      	strh	r3, [r7, #10]
    /* let full screen background set to blue */
    main_page->widget_list->next->gc.background = COGUI_BLUE;
 801eb3a:	4b48      	ldr	r3, [pc, #288]	; (801ec5c <cogui_assert_failed_page+0x130>)
 801eb3c:	681b      	ldr	r3, [r3, #0]
 801eb3e:	685b      	ldr	r3, [r3, #4]
 801eb40:	681a      	ldr	r2, [r3, #0]
 801eb42:	4b47      	ldr	r3, [pc, #284]	; (801ec60 <cogui_assert_failed_page+0x134>)
 801eb44:	e9d3 3400 	ldrd	r3, r4, [r3]
 801eb48:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
    main_page->widget_list->next->next = Co_NULL;
 801eb4c:	4b43      	ldr	r3, [pc, #268]	; (801ec5c <cogui_assert_failed_page+0x130>)
 801eb4e:	681b      	ldr	r3, [r3, #0]
 801eb50:	685b      	ldr	r3, [r3, #4]
 801eb52:	681b      	ldr	r3, [r3, #0]
 801eb54:	2200      	movs	r2, #0
 801eb56:	601a      	str	r2, [r3, #0]

    cogui_window_show(main_page);
 801eb58:	4b40      	ldr	r3, [pc, #256]	; (801ec5c <cogui_assert_failed_page+0x130>)
 801eb5a:	681b      	ldr	r3, [r3, #0]
 801eb5c:	4618      	mov	r0, r3
 801eb5e:	f7ff fed7 	bl	801e910 <cogui_window_show>
    /* create a widget to print error text */
    cogui_widget_t *widget;
    widget = cogui_widget_create(main_page);
 801eb62:	4b3e      	ldr	r3, [pc, #248]	; (801ec5c <cogui_assert_failed_page+0x130>)
 801eb64:	681b      	ldr	r3, [r3, #0]
 801eb66:	4618      	mov	r0, r3
 801eb68:	f7fe fc84 	bl	801d474 <cogui_widget_create>
 801eb6c:	6278      	str	r0, [r7, #36]	; 0x24
    cogui_widget_set_rectangle(widget, 15 , 55, 60, 60);
 801eb6e:	233c      	movs	r3, #60	; 0x3c
 801eb70:	9300      	str	r3, [sp, #0]
 801eb72:	233c      	movs	r3, #60	; 0x3c
 801eb74:	2237      	movs	r2, #55	; 0x37
 801eb76:	210f      	movs	r1, #15
 801eb78:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801eb7a:	f7fe ffe2 	bl	801db42 <cogui_widget_set_rectangle>
    widget->gc.foreground = COGUI_WHITE; 
 801eb7e:	4b39      	ldr	r3, [pc, #228]	; (801ec64 <cogui_assert_failed_page+0x138>)
 801eb80:	e9d3 3400 	ldrd	r3, r4, [r3]
 801eb84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801eb86:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
    cogui_widget_set_font(widget, &tm_font_16x26);
 801eb8a:	4937      	ldr	r1, [pc, #220]	; (801ec68 <cogui_assert_failed_page+0x13c>)
 801eb8c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801eb8e:	f7ff f899 	bl	801dcc4 <cogui_widget_set_font>

    widget->gc.padding = COGUI_PADDING(17, 0, 5, 0);
 801eb92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801eb94:	4b35      	ldr	r3, [pc, #212]	; (801ec6c <cogui_assert_failed_page+0x140>)
 801eb96:	f04f 0400 	mov.w	r4, #0
 801eb9a:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48

    /* set to error code */
    cogui_widget_set_text(widget, ":("); 
 801eb9e:	4934      	ldr	r1, [pc, #208]	; (801ec70 <cogui_assert_failed_page+0x144>)
 801eba0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801eba2:	f7ff f8cf 	bl	801dd44 <cogui_widget_set_text>
    cogui_widget_show(widget);
 801eba6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801eba8:	f7ff fabc 	bl	801e124 <cogui_widget_show>

    widget = cogui_widget_create(main_page);
 801ebac:	4b2b      	ldr	r3, [pc, #172]	; (801ec5c <cogui_assert_failed_page+0x130>)
 801ebae:	681b      	ldr	r3, [r3, #0]
 801ebb0:	4618      	mov	r0, r3
 801ebb2:	f7fe fc5f 	bl	801d474 <cogui_widget_create>
 801ebb6:	6278      	str	r0, [r7, #36]	; 0x24
    cogui_widget_set_rectangle(widget, 20 , 120, 200, 200);
 801ebb8:	23c8      	movs	r3, #200	; 0xc8
 801ebba:	9300      	str	r3, [sp, #0]
 801ebbc:	23c8      	movs	r3, #200	; 0xc8
 801ebbe:	2278      	movs	r2, #120	; 0x78
 801ebc0:	2114      	movs	r1, #20
 801ebc2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801ebc4:	f7fe ffbd 	bl	801db42 <cogui_widget_set_rectangle>
    cogui_widget_set_font(widget, &tm_font_11x18);
 801ebc8:	492a      	ldr	r1, [pc, #168]	; (801ec74 <cogui_assert_failed_page+0x148>)
 801ebca:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801ebcc:	f7ff f87a 	bl	801dcc4 <cogui_widget_set_font>
    cogui_widget_set_text(widget, "Your computer ran into a problem.\n"); 
 801ebd0:	4929      	ldr	r1, [pc, #164]	; (801ec78 <cogui_assert_failed_page+0x14c>)
 801ebd2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801ebd4:	f7ff f8b6 	bl	801dd44 <cogui_widget_set_text>
    cogui_widget_show(widget);
 801ebd8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801ebda:	f7ff faa3 	bl	801e124 <cogui_widget_show>

    widget = cogui_widget_create(main_page);
 801ebde:	4b1f      	ldr	r3, [pc, #124]	; (801ec5c <cogui_assert_failed_page+0x130>)
 801ebe0:	681b      	ldr	r3, [r3, #0]
 801ebe2:	4618      	mov	r0, r3
 801ebe4:	f7fe fc46 	bl	801d474 <cogui_widget_create>
 801ebe8:	6278      	str	r0, [r7, #36]	; 0x24
    cogui_widget_set_rectangle(widget, 20 , 170, 200, 150);
 801ebea:	2396      	movs	r3, #150	; 0x96
 801ebec:	9300      	str	r3, [sp, #0]
 801ebee:	23c8      	movs	r3, #200	; 0xc8
 801ebf0:	22aa      	movs	r2, #170	; 0xaa
 801ebf2:	2114      	movs	r1, #20
 801ebf4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801ebf6:	f7fe ffa4 	bl	801db42 <cogui_widget_set_rectangle>
    char *ex_str = cogui_strdup(ex);
 801ebfa:	68f8      	ldr	r0, [r7, #12]
 801ebfc:	f7fe f826 	bl	801cc4c <cogui_strdup>
 801ec00:	6238      	str	r0, [r7, #32]
    char *f_str = cogui_strdup(func);
 801ec02:	6878      	ldr	r0, [r7, #4]
 801ec04:	f7fe f822 	bl	801cc4c <cogui_strdup>
 801ec08:	61f8      	str	r0, [r7, #28]
    char l_str[10];
    cogui_itoa(line, l_str);
 801ec0a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 801ec0e:	f107 0210 	add.w	r2, r7, #16
 801ec12:	4611      	mov	r1, r2
 801ec14:	4618      	mov	r0, r3
 801ec16:	f7fe f8b9 	bl	801cd8c <cogui_itoa>

    cogui_widget_set_text(widget, "Assert failed at\n"); 
 801ec1a:	4918      	ldr	r1, [pc, #96]	; (801ec7c <cogui_assert_failed_page+0x150>)
 801ec1c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801ec1e:	f7ff f891 	bl	801dd44 <cogui_widget_set_text>
    cogui_widget_append_text(widget, f_str);
 801ec22:	69f9      	ldr	r1, [r7, #28]
 801ec24:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801ec26:	f7ff f8af 	bl	801dd88 <cogui_widget_append_text>
    cogui_widget_append_text(widget, "\nLine: ");
 801ec2a:	4915      	ldr	r1, [pc, #84]	; (801ec80 <cogui_assert_failed_page+0x154>)
 801ec2c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801ec2e:	f7ff f8ab 	bl	801dd88 <cogui_widget_append_text>
    cogui_widget_append_text(widget, l_str);
 801ec32:	f107 0310 	add.w	r3, r7, #16
 801ec36:	4619      	mov	r1, r3
 801ec38:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801ec3a:	f7ff f8a5 	bl	801dd88 <cogui_widget_append_text>
    cogui_widget_append_text(widget, "\nExpression: ");
 801ec3e:	4911      	ldr	r1, [pc, #68]	; (801ec84 <cogui_assert_failed_page+0x158>)
 801ec40:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801ec42:	f7ff f8a1 	bl	801dd88 <cogui_widget_append_text>
    cogui_widget_append_text(widget, ex_str);
 801ec46:	6a39      	ldr	r1, [r7, #32]
 801ec48:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801ec4a:	f7ff f89d 	bl	801dd88 <cogui_widget_append_text>
    cogui_widget_show(widget);
 801ec4e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801ec50:	f7ff fa68 	bl	801e124 <cogui_widget_show>
}
 801ec54:	bf00      	nop
 801ec56:	372c      	adds	r7, #44	; 0x2c
 801ec58:	46bd      	mov	sp, r7
 801ec5a:	bd90      	pop	{r4, r7, pc}
 801ec5c:	2000d774 	.word	0x2000d774
 801ec60:	08022c58 	.word	0x08022c58
 801ec64:	08022c90 	.word	0x08022c90
 801ec68:	20000158 	.word	0x20000158
 801ec6c:	11000500 	.word	0x11000500
 801ec70:	08025c58 	.word	0x08025c58
 801ec74:	2000014c 	.word	0x2000014c
 801ec78:	08025c5c 	.word	0x08025c5c
 801ec7c:	08025c80 	.word	0x08025c80
 801ec80:	08025c94 	.word	0x08025c94
 801ec84:	08025c9c 	.word	0x08025c9c
 801ec88:	08025d8c 	.word	0x08025d8c
 801ec8c:	20000000 	.word	0x20000000
 801ec90:	20000594 	.word	0x20000594
 801ec94:	20000598 	.word	0x20000598
 801ec98:	2000e02c 	.word	0x2000e02c

0801ec9c <__aeabi_uldivmod>:
 801ec9c:	b953      	cbnz	r3, 801ecb4 <__aeabi_uldivmod+0x18>
 801ec9e:	b94a      	cbnz	r2, 801ecb4 <__aeabi_uldivmod+0x18>
 801eca0:	2900      	cmp	r1, #0
 801eca2:	bf08      	it	eq
 801eca4:	2800      	cmpeq	r0, #0
 801eca6:	bf1c      	itt	ne
 801eca8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 801ecac:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 801ecb0:	f000 b972 	b.w	801ef98 <__aeabi_idiv0>
 801ecb4:	f1ad 0c08 	sub.w	ip, sp, #8
 801ecb8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 801ecbc:	f000 f806 	bl	801eccc <__udivmoddi4>
 801ecc0:	f8dd e004 	ldr.w	lr, [sp, #4]
 801ecc4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801ecc8:	b004      	add	sp, #16
 801ecca:	4770      	bx	lr

0801eccc <__udivmoddi4>:
 801eccc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ecd0:	9e08      	ldr	r6, [sp, #32]
 801ecd2:	4604      	mov	r4, r0
 801ecd4:	4688      	mov	r8, r1
 801ecd6:	2b00      	cmp	r3, #0
 801ecd8:	d14b      	bne.n	801ed72 <__udivmoddi4+0xa6>
 801ecda:	428a      	cmp	r2, r1
 801ecdc:	4615      	mov	r5, r2
 801ecde:	d967      	bls.n	801edb0 <__udivmoddi4+0xe4>
 801ece0:	fab2 f282 	clz	r2, r2
 801ece4:	b14a      	cbz	r2, 801ecfa <__udivmoddi4+0x2e>
 801ece6:	f1c2 0720 	rsb	r7, r2, #32
 801ecea:	fa01 f302 	lsl.w	r3, r1, r2
 801ecee:	fa20 f707 	lsr.w	r7, r0, r7
 801ecf2:	4095      	lsls	r5, r2
 801ecf4:	ea47 0803 	orr.w	r8, r7, r3
 801ecf8:	4094      	lsls	r4, r2
 801ecfa:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 801ecfe:	0c23      	lsrs	r3, r4, #16
 801ed00:	fbb8 f7fe 	udiv	r7, r8, lr
 801ed04:	fa1f fc85 	uxth.w	ip, r5
 801ed08:	fb0e 8817 	mls	r8, lr, r7, r8
 801ed0c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 801ed10:	fb07 f10c 	mul.w	r1, r7, ip
 801ed14:	4299      	cmp	r1, r3
 801ed16:	d909      	bls.n	801ed2c <__udivmoddi4+0x60>
 801ed18:	18eb      	adds	r3, r5, r3
 801ed1a:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 801ed1e:	f080 811b 	bcs.w	801ef58 <__udivmoddi4+0x28c>
 801ed22:	4299      	cmp	r1, r3
 801ed24:	f240 8118 	bls.w	801ef58 <__udivmoddi4+0x28c>
 801ed28:	3f02      	subs	r7, #2
 801ed2a:	442b      	add	r3, r5
 801ed2c:	1a5b      	subs	r3, r3, r1
 801ed2e:	b2a4      	uxth	r4, r4
 801ed30:	fbb3 f0fe 	udiv	r0, r3, lr
 801ed34:	fb0e 3310 	mls	r3, lr, r0, r3
 801ed38:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 801ed3c:	fb00 fc0c 	mul.w	ip, r0, ip
 801ed40:	45a4      	cmp	ip, r4
 801ed42:	d909      	bls.n	801ed58 <__udivmoddi4+0x8c>
 801ed44:	192c      	adds	r4, r5, r4
 801ed46:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 801ed4a:	f080 8107 	bcs.w	801ef5c <__udivmoddi4+0x290>
 801ed4e:	45a4      	cmp	ip, r4
 801ed50:	f240 8104 	bls.w	801ef5c <__udivmoddi4+0x290>
 801ed54:	3802      	subs	r0, #2
 801ed56:	442c      	add	r4, r5
 801ed58:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 801ed5c:	eba4 040c 	sub.w	r4, r4, ip
 801ed60:	2700      	movs	r7, #0
 801ed62:	b11e      	cbz	r6, 801ed6c <__udivmoddi4+0xa0>
 801ed64:	40d4      	lsrs	r4, r2
 801ed66:	2300      	movs	r3, #0
 801ed68:	e9c6 4300 	strd	r4, r3, [r6]
 801ed6c:	4639      	mov	r1, r7
 801ed6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ed72:	428b      	cmp	r3, r1
 801ed74:	d909      	bls.n	801ed8a <__udivmoddi4+0xbe>
 801ed76:	2e00      	cmp	r6, #0
 801ed78:	f000 80eb 	beq.w	801ef52 <__udivmoddi4+0x286>
 801ed7c:	2700      	movs	r7, #0
 801ed7e:	e9c6 0100 	strd	r0, r1, [r6]
 801ed82:	4638      	mov	r0, r7
 801ed84:	4639      	mov	r1, r7
 801ed86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ed8a:	fab3 f783 	clz	r7, r3
 801ed8e:	2f00      	cmp	r7, #0
 801ed90:	d147      	bne.n	801ee22 <__udivmoddi4+0x156>
 801ed92:	428b      	cmp	r3, r1
 801ed94:	d302      	bcc.n	801ed9c <__udivmoddi4+0xd0>
 801ed96:	4282      	cmp	r2, r0
 801ed98:	f200 80fa 	bhi.w	801ef90 <__udivmoddi4+0x2c4>
 801ed9c:	1a84      	subs	r4, r0, r2
 801ed9e:	eb61 0303 	sbc.w	r3, r1, r3
 801eda2:	2001      	movs	r0, #1
 801eda4:	4698      	mov	r8, r3
 801eda6:	2e00      	cmp	r6, #0
 801eda8:	d0e0      	beq.n	801ed6c <__udivmoddi4+0xa0>
 801edaa:	e9c6 4800 	strd	r4, r8, [r6]
 801edae:	e7dd      	b.n	801ed6c <__udivmoddi4+0xa0>
 801edb0:	b902      	cbnz	r2, 801edb4 <__udivmoddi4+0xe8>
 801edb2:	deff      	udf	#255	; 0xff
 801edb4:	fab2 f282 	clz	r2, r2
 801edb8:	2a00      	cmp	r2, #0
 801edba:	f040 808f 	bne.w	801eedc <__udivmoddi4+0x210>
 801edbe:	1b49      	subs	r1, r1, r5
 801edc0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 801edc4:	fa1f f885 	uxth.w	r8, r5
 801edc8:	2701      	movs	r7, #1
 801edca:	fbb1 fcfe 	udiv	ip, r1, lr
 801edce:	0c23      	lsrs	r3, r4, #16
 801edd0:	fb0e 111c 	mls	r1, lr, ip, r1
 801edd4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 801edd8:	fb08 f10c 	mul.w	r1, r8, ip
 801eddc:	4299      	cmp	r1, r3
 801edde:	d907      	bls.n	801edf0 <__udivmoddi4+0x124>
 801ede0:	18eb      	adds	r3, r5, r3
 801ede2:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 801ede6:	d202      	bcs.n	801edee <__udivmoddi4+0x122>
 801ede8:	4299      	cmp	r1, r3
 801edea:	f200 80cd 	bhi.w	801ef88 <__udivmoddi4+0x2bc>
 801edee:	4684      	mov	ip, r0
 801edf0:	1a59      	subs	r1, r3, r1
 801edf2:	b2a3      	uxth	r3, r4
 801edf4:	fbb1 f0fe 	udiv	r0, r1, lr
 801edf8:	fb0e 1410 	mls	r4, lr, r0, r1
 801edfc:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 801ee00:	fb08 f800 	mul.w	r8, r8, r0
 801ee04:	45a0      	cmp	r8, r4
 801ee06:	d907      	bls.n	801ee18 <__udivmoddi4+0x14c>
 801ee08:	192c      	adds	r4, r5, r4
 801ee0a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 801ee0e:	d202      	bcs.n	801ee16 <__udivmoddi4+0x14a>
 801ee10:	45a0      	cmp	r8, r4
 801ee12:	f200 80b6 	bhi.w	801ef82 <__udivmoddi4+0x2b6>
 801ee16:	4618      	mov	r0, r3
 801ee18:	eba4 0408 	sub.w	r4, r4, r8
 801ee1c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 801ee20:	e79f      	b.n	801ed62 <__udivmoddi4+0x96>
 801ee22:	f1c7 0c20 	rsb	ip, r7, #32
 801ee26:	40bb      	lsls	r3, r7
 801ee28:	fa22 fe0c 	lsr.w	lr, r2, ip
 801ee2c:	ea4e 0e03 	orr.w	lr, lr, r3
 801ee30:	fa01 f407 	lsl.w	r4, r1, r7
 801ee34:	fa20 f50c 	lsr.w	r5, r0, ip
 801ee38:	fa21 f30c 	lsr.w	r3, r1, ip
 801ee3c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 801ee40:	4325      	orrs	r5, r4
 801ee42:	fbb3 f9f8 	udiv	r9, r3, r8
 801ee46:	0c2c      	lsrs	r4, r5, #16
 801ee48:	fb08 3319 	mls	r3, r8, r9, r3
 801ee4c:	fa1f fa8e 	uxth.w	sl, lr
 801ee50:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 801ee54:	fb09 f40a 	mul.w	r4, r9, sl
 801ee58:	429c      	cmp	r4, r3
 801ee5a:	fa02 f207 	lsl.w	r2, r2, r7
 801ee5e:	fa00 f107 	lsl.w	r1, r0, r7
 801ee62:	d90b      	bls.n	801ee7c <__udivmoddi4+0x1b0>
 801ee64:	eb1e 0303 	adds.w	r3, lr, r3
 801ee68:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 801ee6c:	f080 8087 	bcs.w	801ef7e <__udivmoddi4+0x2b2>
 801ee70:	429c      	cmp	r4, r3
 801ee72:	f240 8084 	bls.w	801ef7e <__udivmoddi4+0x2b2>
 801ee76:	f1a9 0902 	sub.w	r9, r9, #2
 801ee7a:	4473      	add	r3, lr
 801ee7c:	1b1b      	subs	r3, r3, r4
 801ee7e:	b2ad      	uxth	r5, r5
 801ee80:	fbb3 f0f8 	udiv	r0, r3, r8
 801ee84:	fb08 3310 	mls	r3, r8, r0, r3
 801ee88:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 801ee8c:	fb00 fa0a 	mul.w	sl, r0, sl
 801ee90:	45a2      	cmp	sl, r4
 801ee92:	d908      	bls.n	801eea6 <__udivmoddi4+0x1da>
 801ee94:	eb1e 0404 	adds.w	r4, lr, r4
 801ee98:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 801ee9c:	d26b      	bcs.n	801ef76 <__udivmoddi4+0x2aa>
 801ee9e:	45a2      	cmp	sl, r4
 801eea0:	d969      	bls.n	801ef76 <__udivmoddi4+0x2aa>
 801eea2:	3802      	subs	r0, #2
 801eea4:	4474      	add	r4, lr
 801eea6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 801eeaa:	fba0 8902 	umull	r8, r9, r0, r2
 801eeae:	eba4 040a 	sub.w	r4, r4, sl
 801eeb2:	454c      	cmp	r4, r9
 801eeb4:	46c2      	mov	sl, r8
 801eeb6:	464b      	mov	r3, r9
 801eeb8:	d354      	bcc.n	801ef64 <__udivmoddi4+0x298>
 801eeba:	d051      	beq.n	801ef60 <__udivmoddi4+0x294>
 801eebc:	2e00      	cmp	r6, #0
 801eebe:	d069      	beq.n	801ef94 <__udivmoddi4+0x2c8>
 801eec0:	ebb1 050a 	subs.w	r5, r1, sl
 801eec4:	eb64 0403 	sbc.w	r4, r4, r3
 801eec8:	fa04 fc0c 	lsl.w	ip, r4, ip
 801eecc:	40fd      	lsrs	r5, r7
 801eece:	40fc      	lsrs	r4, r7
 801eed0:	ea4c 0505 	orr.w	r5, ip, r5
 801eed4:	e9c6 5400 	strd	r5, r4, [r6]
 801eed8:	2700      	movs	r7, #0
 801eeda:	e747      	b.n	801ed6c <__udivmoddi4+0xa0>
 801eedc:	f1c2 0320 	rsb	r3, r2, #32
 801eee0:	fa20 f703 	lsr.w	r7, r0, r3
 801eee4:	4095      	lsls	r5, r2
 801eee6:	fa01 f002 	lsl.w	r0, r1, r2
 801eeea:	fa21 f303 	lsr.w	r3, r1, r3
 801eeee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 801eef2:	4338      	orrs	r0, r7
 801eef4:	0c01      	lsrs	r1, r0, #16
 801eef6:	fbb3 f7fe 	udiv	r7, r3, lr
 801eefa:	fa1f f885 	uxth.w	r8, r5
 801eefe:	fb0e 3317 	mls	r3, lr, r7, r3
 801ef02:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 801ef06:	fb07 f308 	mul.w	r3, r7, r8
 801ef0a:	428b      	cmp	r3, r1
 801ef0c:	fa04 f402 	lsl.w	r4, r4, r2
 801ef10:	d907      	bls.n	801ef22 <__udivmoddi4+0x256>
 801ef12:	1869      	adds	r1, r5, r1
 801ef14:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 801ef18:	d22f      	bcs.n	801ef7a <__udivmoddi4+0x2ae>
 801ef1a:	428b      	cmp	r3, r1
 801ef1c:	d92d      	bls.n	801ef7a <__udivmoddi4+0x2ae>
 801ef1e:	3f02      	subs	r7, #2
 801ef20:	4429      	add	r1, r5
 801ef22:	1acb      	subs	r3, r1, r3
 801ef24:	b281      	uxth	r1, r0
 801ef26:	fbb3 f0fe 	udiv	r0, r3, lr
 801ef2a:	fb0e 3310 	mls	r3, lr, r0, r3
 801ef2e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 801ef32:	fb00 f308 	mul.w	r3, r0, r8
 801ef36:	428b      	cmp	r3, r1
 801ef38:	d907      	bls.n	801ef4a <__udivmoddi4+0x27e>
 801ef3a:	1869      	adds	r1, r5, r1
 801ef3c:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 801ef40:	d217      	bcs.n	801ef72 <__udivmoddi4+0x2a6>
 801ef42:	428b      	cmp	r3, r1
 801ef44:	d915      	bls.n	801ef72 <__udivmoddi4+0x2a6>
 801ef46:	3802      	subs	r0, #2
 801ef48:	4429      	add	r1, r5
 801ef4a:	1ac9      	subs	r1, r1, r3
 801ef4c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 801ef50:	e73b      	b.n	801edca <__udivmoddi4+0xfe>
 801ef52:	4637      	mov	r7, r6
 801ef54:	4630      	mov	r0, r6
 801ef56:	e709      	b.n	801ed6c <__udivmoddi4+0xa0>
 801ef58:	4607      	mov	r7, r0
 801ef5a:	e6e7      	b.n	801ed2c <__udivmoddi4+0x60>
 801ef5c:	4618      	mov	r0, r3
 801ef5e:	e6fb      	b.n	801ed58 <__udivmoddi4+0x8c>
 801ef60:	4541      	cmp	r1, r8
 801ef62:	d2ab      	bcs.n	801eebc <__udivmoddi4+0x1f0>
 801ef64:	ebb8 0a02 	subs.w	sl, r8, r2
 801ef68:	eb69 020e 	sbc.w	r2, r9, lr
 801ef6c:	3801      	subs	r0, #1
 801ef6e:	4613      	mov	r3, r2
 801ef70:	e7a4      	b.n	801eebc <__udivmoddi4+0x1f0>
 801ef72:	4660      	mov	r0, ip
 801ef74:	e7e9      	b.n	801ef4a <__udivmoddi4+0x27e>
 801ef76:	4618      	mov	r0, r3
 801ef78:	e795      	b.n	801eea6 <__udivmoddi4+0x1da>
 801ef7a:	4667      	mov	r7, ip
 801ef7c:	e7d1      	b.n	801ef22 <__udivmoddi4+0x256>
 801ef7e:	4681      	mov	r9, r0
 801ef80:	e77c      	b.n	801ee7c <__udivmoddi4+0x1b0>
 801ef82:	3802      	subs	r0, #2
 801ef84:	442c      	add	r4, r5
 801ef86:	e747      	b.n	801ee18 <__udivmoddi4+0x14c>
 801ef88:	f1ac 0c02 	sub.w	ip, ip, #2
 801ef8c:	442b      	add	r3, r5
 801ef8e:	e72f      	b.n	801edf0 <__udivmoddi4+0x124>
 801ef90:	4638      	mov	r0, r7
 801ef92:	e708      	b.n	801eda6 <__udivmoddi4+0xda>
 801ef94:	4637      	mov	r7, r6
 801ef96:	e6e9      	b.n	801ed6c <__udivmoddi4+0xa0>

0801ef98 <__aeabi_idiv0>:
 801ef98:	4770      	bx	lr
 801ef9a:	bf00      	nop

0801ef9c <Reset_Handler>:
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 801ef9c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 801ef9e:	e003      	b.n	801efa8 <LoopCopyDataInit>

0801efa0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 801efa0:	4b0b      	ldr	r3, [pc, #44]	; (801efd0 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 801efa2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 801efa4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 801efa6:	3104      	adds	r1, #4

0801efa8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 801efa8:	480a      	ldr	r0, [pc, #40]	; (801efd4 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 801efaa:	4b0b      	ldr	r3, [pc, #44]	; (801efd8 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 801efac:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 801efae:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 801efb0:	d3f6      	bcc.n	801efa0 <CopyDataInit>
  ldr  r2, =_sbss
 801efb2:	4a0a      	ldr	r2, [pc, #40]	; (801efdc <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 801efb4:	e002      	b.n	801efbc <LoopFillZerobss>

0801efb6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 801efb6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 801efb8:	f842 3b04 	str.w	r3, [r2], #4

0801efbc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 801efbc:	4b08      	ldr	r3, [pc, #32]	; (801efe0 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 801efbe:	429a      	cmp	r2, r3
  bcc  FillZerobss
 801efc0:	d3f9      	bcc.n	801efb6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 801efc2:	f7e2 fa1b 	bl	80013fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 801efc6:	f000 f81f 	bl	801f008 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 801efca:	f7e1 fc4b 	bl	8000864 <main>
  bx  lr    
 801efce:	4770      	bx	lr
  ldr  r3, =_sidata
 801efd0:	08025d8c 	.word	0x08025d8c
  ldr  r0, =_sdata
 801efd4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 801efd8:	20000594 	.word	0x20000594
  ldr  r2, =_sbss
 801efdc:	20000598 	.word	0x20000598
  ldr  r3, = _ebss
 801efe0:	2000e02c 	.word	0x2000e02c

0801efe4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 801efe4:	e7fe      	b.n	801efe4 <ADC_IRQHandler>
	...

0801efe8 <exit>:
 801efe8:	b508      	push	{r3, lr}
 801efea:	2100      	movs	r1, #0
 801efec:	4604      	mov	r4, r0
 801efee:	f000 f883 	bl	801f0f8 <__call_exitprocs>
 801eff2:	4b04      	ldr	r3, [pc, #16]	; (801f004 <exit+0x1c>)
 801eff4:	6818      	ldr	r0, [r3, #0]
 801eff6:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 801eff8:	b103      	cbz	r3, 801effc <exit+0x14>
 801effa:	4798      	blx	r3
 801effc:	4620      	mov	r0, r4
 801effe:	f000 f983 	bl	801f308 <_exit>
 801f002:	bf00      	nop
 801f004:	08025d74 	.word	0x08025d74

0801f008 <__libc_init_array>:
 801f008:	b570      	push	{r4, r5, r6, lr}
 801f00a:	4e0d      	ldr	r6, [pc, #52]	; (801f040 <__libc_init_array+0x38>)
 801f00c:	4d0d      	ldr	r5, [pc, #52]	; (801f044 <__libc_init_array+0x3c>)
 801f00e:	1b76      	subs	r6, r6, r5
 801f010:	10b6      	asrs	r6, r6, #2
 801f012:	d006      	beq.n	801f022 <__libc_init_array+0x1a>
 801f014:	2400      	movs	r4, #0
 801f016:	3401      	adds	r4, #1
 801f018:	f855 3b04 	ldr.w	r3, [r5], #4
 801f01c:	4798      	blx	r3
 801f01e:	42a6      	cmp	r6, r4
 801f020:	d1f9      	bne.n	801f016 <__libc_init_array+0xe>
 801f022:	4e09      	ldr	r6, [pc, #36]	; (801f048 <__libc_init_array+0x40>)
 801f024:	4d09      	ldr	r5, [pc, #36]	; (801f04c <__libc_init_array+0x44>)
 801f026:	1b76      	subs	r6, r6, r5
 801f028:	f000 f972 	bl	801f310 <_init>
 801f02c:	10b6      	asrs	r6, r6, #2
 801f02e:	d006      	beq.n	801f03e <__libc_init_array+0x36>
 801f030:	2400      	movs	r4, #0
 801f032:	3401      	adds	r4, #1
 801f034:	f855 3b04 	ldr.w	r3, [r5], #4
 801f038:	4798      	blx	r3
 801f03a:	42a6      	cmp	r6, r4
 801f03c:	d1f9      	bne.n	801f032 <__libc_init_array+0x2a>
 801f03e:	bd70      	pop	{r4, r5, r6, pc}
 801f040:	08025d80 	.word	0x08025d80
 801f044:	08025d80 	.word	0x08025d80
 801f048:	08025d88 	.word	0x08025d88
 801f04c:	08025d80 	.word	0x08025d80

0801f050 <memset>:
 801f050:	b4f0      	push	{r4, r5, r6, r7}
 801f052:	0786      	lsls	r6, r0, #30
 801f054:	d043      	beq.n	801f0de <memset+0x8e>
 801f056:	1e54      	subs	r4, r2, #1
 801f058:	2a00      	cmp	r2, #0
 801f05a:	d03e      	beq.n	801f0da <memset+0x8a>
 801f05c:	b2ca      	uxtb	r2, r1
 801f05e:	4603      	mov	r3, r0
 801f060:	e002      	b.n	801f068 <memset+0x18>
 801f062:	f114 34ff 	adds.w	r4, r4, #4294967295	; 0xffffffff
 801f066:	d338      	bcc.n	801f0da <memset+0x8a>
 801f068:	f803 2b01 	strb.w	r2, [r3], #1
 801f06c:	079d      	lsls	r5, r3, #30
 801f06e:	d1f8      	bne.n	801f062 <memset+0x12>
 801f070:	2c03      	cmp	r4, #3
 801f072:	d92b      	bls.n	801f0cc <memset+0x7c>
 801f074:	b2cd      	uxtb	r5, r1
 801f076:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 801f07a:	2c0f      	cmp	r4, #15
 801f07c:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 801f080:	d916      	bls.n	801f0b0 <memset+0x60>
 801f082:	f1a4 0710 	sub.w	r7, r4, #16
 801f086:	093f      	lsrs	r7, r7, #4
 801f088:	f103 0620 	add.w	r6, r3, #32
 801f08c:	eb06 1607 	add.w	r6, r6, r7, lsl #4
 801f090:	f103 0210 	add.w	r2, r3, #16
 801f094:	e942 5504 	strd	r5, r5, [r2, #-16]
 801f098:	e942 5502 	strd	r5, r5, [r2, #-8]
 801f09c:	3210      	adds	r2, #16
 801f09e:	42b2      	cmp	r2, r6
 801f0a0:	d1f8      	bne.n	801f094 <memset+0x44>
 801f0a2:	f004 040f 	and.w	r4, r4, #15
 801f0a6:	3701      	adds	r7, #1
 801f0a8:	2c03      	cmp	r4, #3
 801f0aa:	eb03 1307 	add.w	r3, r3, r7, lsl #4
 801f0ae:	d90d      	bls.n	801f0cc <memset+0x7c>
 801f0b0:	461e      	mov	r6, r3
 801f0b2:	4622      	mov	r2, r4
 801f0b4:	3a04      	subs	r2, #4
 801f0b6:	2a03      	cmp	r2, #3
 801f0b8:	f846 5b04 	str.w	r5, [r6], #4
 801f0bc:	d8fa      	bhi.n	801f0b4 <memset+0x64>
 801f0be:	1f22      	subs	r2, r4, #4
 801f0c0:	f022 0203 	bic.w	r2, r2, #3
 801f0c4:	3204      	adds	r2, #4
 801f0c6:	4413      	add	r3, r2
 801f0c8:	f004 0403 	and.w	r4, r4, #3
 801f0cc:	b12c      	cbz	r4, 801f0da <memset+0x8a>
 801f0ce:	b2c9      	uxtb	r1, r1
 801f0d0:	441c      	add	r4, r3
 801f0d2:	f803 1b01 	strb.w	r1, [r3], #1
 801f0d6:	429c      	cmp	r4, r3
 801f0d8:	d1fb      	bne.n	801f0d2 <memset+0x82>
 801f0da:	bcf0      	pop	{r4, r5, r6, r7}
 801f0dc:	4770      	bx	lr
 801f0de:	4614      	mov	r4, r2
 801f0e0:	4603      	mov	r3, r0
 801f0e2:	e7c5      	b.n	801f070 <memset+0x20>

0801f0e4 <register_fini>:
 801f0e4:	4b02      	ldr	r3, [pc, #8]	; (801f0f0 <register_fini+0xc>)
 801f0e6:	b113      	cbz	r3, 801f0ee <register_fini+0xa>
 801f0e8:	4802      	ldr	r0, [pc, #8]	; (801f0f4 <register_fini+0x10>)
 801f0ea:	f000 b879 	b.w	801f1e0 <atexit>
 801f0ee:	4770      	bx	lr
 801f0f0:	00000000 	.word	0x00000000
 801f0f4:	0801f1ed 	.word	0x0801f1ed

0801f0f8 <__call_exitprocs>:
 801f0f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f0fc:	4b35      	ldr	r3, [pc, #212]	; (801f1d4 <__call_exitprocs+0xdc>)
 801f0fe:	b085      	sub	sp, #20
 801f100:	460f      	mov	r7, r1
 801f102:	9003      	str	r0, [sp, #12]
 801f104:	6818      	ldr	r0, [r3, #0]
 801f106:	f000 f895 	bl	801f234 <__retarget_lock_acquire_recursive>
 801f10a:	4b33      	ldr	r3, [pc, #204]	; (801f1d8 <__call_exitprocs+0xe0>)
 801f10c:	681b      	ldr	r3, [r3, #0]
 801f10e:	9301      	str	r3, [sp, #4]
 801f110:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 801f114:	9302      	str	r3, [sp, #8]
 801f116:	46b9      	mov	r9, r7
 801f118:	9b01      	ldr	r3, [sp, #4]
 801f11a:	f8d3 6148 	ldr.w	r6, [r3, #328]	; 0x148
 801f11e:	b33e      	cbz	r6, 801f170 <__call_exitprocs+0x78>
 801f120:	f8dd a008 	ldr.w	sl, [sp, #8]
 801f124:	f04f 0801 	mov.w	r8, #1
 801f128:	6874      	ldr	r4, [r6, #4]
 801f12a:	1e65      	subs	r5, r4, #1
 801f12c:	d40f      	bmi.n	801f14e <__call_exitprocs+0x56>
 801f12e:	3401      	adds	r4, #1
 801f130:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 801f134:	2700      	movs	r7, #0
 801f136:	f1b9 0f00 	cmp.w	r9, #0
 801f13a:	d020      	beq.n	801f17e <__call_exitprocs+0x86>
 801f13c:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 801f140:	454b      	cmp	r3, r9
 801f142:	d01c      	beq.n	801f17e <__call_exitprocs+0x86>
 801f144:	3d01      	subs	r5, #1
 801f146:	1c6b      	adds	r3, r5, #1
 801f148:	f1a4 0404 	sub.w	r4, r4, #4
 801f14c:	d1f3      	bne.n	801f136 <__call_exitprocs+0x3e>
 801f14e:	4b23      	ldr	r3, [pc, #140]	; (801f1dc <__call_exitprocs+0xe4>)
 801f150:	b173      	cbz	r3, 801f170 <__call_exitprocs+0x78>
 801f152:	e9d6 3200 	ldrd	r3, r2, [r6]
 801f156:	2a00      	cmp	r2, #0
 801f158:	d134      	bne.n	801f1c4 <__call_exitprocs+0xcc>
 801f15a:	2b00      	cmp	r3, #0
 801f15c:	d032      	beq.n	801f1c4 <__call_exitprocs+0xcc>
 801f15e:	4630      	mov	r0, r6
 801f160:	f8ca 3000 	str.w	r3, [sl]
 801f164:	f3af 8000 	nop.w
 801f168:	f8da 6000 	ldr.w	r6, [sl]
 801f16c:	2e00      	cmp	r6, #0
 801f16e:	d1db      	bne.n	801f128 <__call_exitprocs+0x30>
 801f170:	4b18      	ldr	r3, [pc, #96]	; (801f1d4 <__call_exitprocs+0xdc>)
 801f172:	6818      	ldr	r0, [r3, #0]
 801f174:	b005      	add	sp, #20
 801f176:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f17a:	f000 b863 	b.w	801f244 <__retarget_lock_release_recursive>
 801f17e:	6873      	ldr	r3, [r6, #4]
 801f180:	6822      	ldr	r2, [r4, #0]
 801f182:	3b01      	subs	r3, #1
 801f184:	42ab      	cmp	r3, r5
 801f186:	bf0c      	ite	eq
 801f188:	6075      	streq	r5, [r6, #4]
 801f18a:	6027      	strne	r7, [r4, #0]
 801f18c:	2a00      	cmp	r2, #0
 801f18e:	d0d9      	beq.n	801f144 <__call_exitprocs+0x4c>
 801f190:	f8d6 1188 	ldr.w	r1, [r6, #392]	; 0x188
 801f194:	f8d6 b004 	ldr.w	fp, [r6, #4]
 801f198:	fa08 f305 	lsl.w	r3, r8, r5
 801f19c:	420b      	tst	r3, r1
 801f19e:	d108      	bne.n	801f1b2 <__call_exitprocs+0xba>
 801f1a0:	4790      	blx	r2
 801f1a2:	6873      	ldr	r3, [r6, #4]
 801f1a4:	455b      	cmp	r3, fp
 801f1a6:	d1b7      	bne.n	801f118 <__call_exitprocs+0x20>
 801f1a8:	f8da 3000 	ldr.w	r3, [sl]
 801f1ac:	42b3      	cmp	r3, r6
 801f1ae:	d0c9      	beq.n	801f144 <__call_exitprocs+0x4c>
 801f1b0:	e7b2      	b.n	801f118 <__call_exitprocs+0x20>
 801f1b2:	f8d6 018c 	ldr.w	r0, [r6, #396]	; 0x18c
 801f1b6:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 801f1ba:	4203      	tst	r3, r0
 801f1bc:	d107      	bne.n	801f1ce <__call_exitprocs+0xd6>
 801f1be:	9803      	ldr	r0, [sp, #12]
 801f1c0:	4790      	blx	r2
 801f1c2:	e7ee      	b.n	801f1a2 <__call_exitprocs+0xaa>
 801f1c4:	46b2      	mov	sl, r6
 801f1c6:	461e      	mov	r6, r3
 801f1c8:	2e00      	cmp	r6, #0
 801f1ca:	d1ad      	bne.n	801f128 <__call_exitprocs+0x30>
 801f1cc:	e7d0      	b.n	801f170 <__call_exitprocs+0x78>
 801f1ce:	4608      	mov	r0, r1
 801f1d0:	4790      	blx	r2
 801f1d2:	e7e6      	b.n	801f1a2 <__call_exitprocs+0xaa>
 801f1d4:	20000590 	.word	0x20000590
 801f1d8:	08025d74 	.word	0x08025d74
 801f1dc:	00000000 	.word	0x00000000

0801f1e0 <atexit>:
 801f1e0:	2300      	movs	r3, #0
 801f1e2:	4601      	mov	r1, r0
 801f1e4:	461a      	mov	r2, r3
 801f1e6:	4618      	mov	r0, r3
 801f1e8:	f000 b82e 	b.w	801f248 <__register_exitproc>

0801f1ec <__libc_fini_array>:
 801f1ec:	b538      	push	{r3, r4, r5, lr}
 801f1ee:	4c0a      	ldr	r4, [pc, #40]	; (801f218 <__libc_fini_array+0x2c>)
 801f1f0:	4d0a      	ldr	r5, [pc, #40]	; (801f21c <__libc_fini_array+0x30>)
 801f1f2:	1b64      	subs	r4, r4, r5
 801f1f4:	10a4      	asrs	r4, r4, #2
 801f1f6:	d00a      	beq.n	801f20e <__libc_fini_array+0x22>
 801f1f8:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
 801f1fc:	3b01      	subs	r3, #1
 801f1fe:	eb05 0583 	add.w	r5, r5, r3, lsl #2
 801f202:	3c01      	subs	r4, #1
 801f204:	f855 3904 	ldr.w	r3, [r5], #-4
 801f208:	4798      	blx	r3
 801f20a:	2c00      	cmp	r4, #0
 801f20c:	d1f9      	bne.n	801f202 <__libc_fini_array+0x16>
 801f20e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801f212:	f000 b883 	b.w	801f31c <_fini>
 801f216:	bf00      	nop
 801f218:	08025d8c 	.word	0x08025d8c
 801f21c:	08025d88 	.word	0x08025d88

0801f220 <__retarget_lock_init>:
 801f220:	4770      	bx	lr
 801f222:	bf00      	nop

0801f224 <__retarget_lock_init_recursive>:
 801f224:	4770      	bx	lr
 801f226:	bf00      	nop

0801f228 <__retarget_lock_close>:
 801f228:	4770      	bx	lr
 801f22a:	bf00      	nop

0801f22c <__retarget_lock_close_recursive>:
 801f22c:	4770      	bx	lr
 801f22e:	bf00      	nop

0801f230 <__retarget_lock_acquire>:
 801f230:	4770      	bx	lr
 801f232:	bf00      	nop

0801f234 <__retarget_lock_acquire_recursive>:
 801f234:	4770      	bx	lr
 801f236:	bf00      	nop

0801f238 <__retarget_lock_try_acquire>:
 801f238:	2001      	movs	r0, #1
 801f23a:	4770      	bx	lr

0801f23c <__retarget_lock_try_acquire_recursive>:
 801f23c:	2001      	movs	r0, #1
 801f23e:	4770      	bx	lr

0801f240 <__retarget_lock_release>:
 801f240:	4770      	bx	lr
 801f242:	bf00      	nop

0801f244 <__retarget_lock_release_recursive>:
 801f244:	4770      	bx	lr
 801f246:	bf00      	nop

0801f248 <__register_exitproc>:
 801f248:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801f24c:	4d2b      	ldr	r5, [pc, #172]	; (801f2fc <__register_exitproc+0xb4>)
 801f24e:	4606      	mov	r6, r0
 801f250:	6828      	ldr	r0, [r5, #0]
 801f252:	4698      	mov	r8, r3
 801f254:	460f      	mov	r7, r1
 801f256:	4691      	mov	r9, r2
 801f258:	f7ff ffec 	bl	801f234 <__retarget_lock_acquire_recursive>
 801f25c:	4b28      	ldr	r3, [pc, #160]	; (801f300 <__register_exitproc+0xb8>)
 801f25e:	681c      	ldr	r4, [r3, #0]
 801f260:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
 801f264:	2b00      	cmp	r3, #0
 801f266:	d03d      	beq.n	801f2e4 <__register_exitproc+0x9c>
 801f268:	685a      	ldr	r2, [r3, #4]
 801f26a:	2a1f      	cmp	r2, #31
 801f26c:	dc0d      	bgt.n	801f28a <__register_exitproc+0x42>
 801f26e:	f102 0c01 	add.w	ip, r2, #1
 801f272:	bb16      	cbnz	r6, 801f2ba <__register_exitproc+0x72>
 801f274:	3202      	adds	r2, #2
 801f276:	f8c3 c004 	str.w	ip, [r3, #4]
 801f27a:	6828      	ldr	r0, [r5, #0]
 801f27c:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
 801f280:	f7ff ffe0 	bl	801f244 <__retarget_lock_release_recursive>
 801f284:	2000      	movs	r0, #0
 801f286:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801f28a:	4b1e      	ldr	r3, [pc, #120]	; (801f304 <__register_exitproc+0xbc>)
 801f28c:	b37b      	cbz	r3, 801f2ee <__register_exitproc+0xa6>
 801f28e:	f44f 70c8 	mov.w	r0, #400	; 0x190
 801f292:	f3af 8000 	nop.w
 801f296:	4603      	mov	r3, r0
 801f298:	b348      	cbz	r0, 801f2ee <__register_exitproc+0xa6>
 801f29a:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
 801f29e:	2100      	movs	r1, #0
 801f2a0:	e9c0 2100 	strd	r2, r1, [r0]
 801f2a4:	f04f 0c01 	mov.w	ip, #1
 801f2a8:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
 801f2ac:	460a      	mov	r2, r1
 801f2ae:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
 801f2b2:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
 801f2b6:	2e00      	cmp	r6, #0
 801f2b8:	d0dc      	beq.n	801f274 <__register_exitproc+0x2c>
 801f2ba:	eb03 0182 	add.w	r1, r3, r2, lsl #2
 801f2be:	2401      	movs	r4, #1
 801f2c0:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
 801f2c4:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
 801f2c8:	4094      	lsls	r4, r2
 801f2ca:	4320      	orrs	r0, r4
 801f2cc:	2e02      	cmp	r6, #2
 801f2ce:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
 801f2d2:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
 801f2d6:	d1cd      	bne.n	801f274 <__register_exitproc+0x2c>
 801f2d8:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
 801f2dc:	430c      	orrs	r4, r1
 801f2de:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
 801f2e2:	e7c7      	b.n	801f274 <__register_exitproc+0x2c>
 801f2e4:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
 801f2e8:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
 801f2ec:	e7bc      	b.n	801f268 <__register_exitproc+0x20>
 801f2ee:	6828      	ldr	r0, [r5, #0]
 801f2f0:	f7ff ffa8 	bl	801f244 <__retarget_lock_release_recursive>
 801f2f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801f2f8:	e7c5      	b.n	801f286 <__register_exitproc+0x3e>
 801f2fa:	bf00      	nop
 801f2fc:	20000590 	.word	0x20000590
 801f300:	08025d74 	.word	0x08025d74
 801f304:	00000000 	.word	0x00000000

0801f308 <_exit>:
 801f308:	e7fe      	b.n	801f308 <_exit>
 801f30a:	bf00      	nop

0801f30c <__EH_FRAME_BEGIN__>:
 801f30c:	0000 0000                                   ....

0801f310 <_init>:
 801f310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f312:	bf00      	nop
 801f314:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801f316:	bc08      	pop	{r3}
 801f318:	469e      	mov	lr, r3
 801f31a:	4770      	bx	lr

0801f31c <_fini>:
 801f31c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f31e:	bf00      	nop
 801f320:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801f322:	bc08      	pop	{r3}
 801f324:	469e      	mov	lr, r3
 801f326:	4770      	bx	lr
